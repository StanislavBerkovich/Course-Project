das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,-0x66(%eax)
pop    %ecx
inc    %edx
pop    %edi
jb     80481e8 <_init-0x154>
arpl   %bx,0x11f89b3c(%ebp)
mov    $0x82473710,%esp
jl     8048227 <_init-0x115>
add    (%eax),%al
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x1b0>
xor    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edx
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
int3
test   %eax,(%eax,%ecx,1)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482c3 <_init-0x79>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482d1 <_init-0x6b>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x74(%ebx)
jb     80482cd <_init-0x6f>
jo     80482e5 <_init-0x57>
add    %bl,0x5f(%edi)
jae    80482e5 <_init-0x57>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x746e6972,0x70(%eax,%eax,1),%ebp
data16
add    %dh,0x74(%ebx)
jb     80482f5 <_init-0x47>
outsb  %gs:(%esi),(%dx)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804830c <_init-0x30>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    804831b <_init-0x21>
popa
jb     804831e <_init-0x1e>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x61,0x30000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
imul   $0x0,(%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    $0x0,%al
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
add    $0xa0200000,%eax
add    $0x8,%al
pop    %es
push   %es
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1cbb,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     804835a <_init+0x1e>
call   80483a0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048360 <_init+0x24>
jmp    *0x804a010
push   $0x8
jmp    8048360 <_init+0x24>
jmp    *0x804a014
push   $0x10
jmp    8048360 <_init+0x24>
jmp    *0x804a018
push   $0x18
jmp    8048360 <_init+0x24>
jmp    *0x804a01c
push   $0x20
jmp    8048360 <_init+0x24>
jmp    *0x804a020
push   $0x28
jmp    8048360 <_init+0x24>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80485b0
push   $0x8048540
push   %ecx
push   %esi
push   $0x80484cd
call   80483c0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a097,%eax
sub    $0x804a094,%eax
cmp    $0x6,%eax
ja     8048420 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804841f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a094,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a094,%eax
sub    $0x804a094,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048459 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048458 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a094,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a092
jne    804849c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048410 <deregister_tm_clones>
movb   $0x1,0x804a092
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048440 <register_tm_clones>
nop
jmp    8048440 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x50,%esp
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
lea    0x14(%esp),%eax
add    $0x8,%eax
movl   $0x804a060,(%eax)
movl   $0x804a060,0x4(%esp)
lea    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048390 <strcpy@plt>
movl   $0x804a060,(%esp)
call   80483b0 <strlen@plt>
mov    %eax,0x4(%esp)
movl   $0x80485d0,(%esp)
call   8048370 <printf@plt>
mov    $0x0,%eax
mov    0x4c(%esp),%edx
xor    %gs:0x14,%edx
je     8048536 <main+0x69>
call   8048380 <__stack_chk_fail@plt>
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1ab5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   804833c <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048599 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048578 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80485b0 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a43,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %ebx
push   $0x636c6c65
xor    %ah,0x20(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8048648 <_IO_stdin_used+0x7c>
cmp    (%eax),%ah
and    $0x75520a64,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x2e2e2e2e,0x67(%esi),%ebp
cs cs or %cs:(%edx),%cl
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
push   $0x44fffffd
add    %al,(%eax)
add    %dl,%ch
(bad)
(bad)
ljmp   *0x0(%eax)
add    %al,(%eax)
dec    %eax
(bad)
(bad)
decl   -0x48000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804863b <_IO_stdin_used+0x6f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0xfd,%al
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804865b <_IO_stdin_used+0x8f>
js     8048659 <_IO_stdin_used+0x8d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,-0x2(%ebp)
(bad)
ljmp   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
add    -0x3b(%edi),%ah
or     $0x4,%al
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %bh,0x61fffffe(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x1140000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
.byte 0xa0
test   %al,(%eax,%ecx,1)
.byte 0x80
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
cmp    $0x83,%al
add    $0x8,%al
or     $0xb4000000,%eax
test   %eax,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
dec    %esp
(bad)
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
jne    8049f6a <_DYNAMIC+0x56>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%ebx,%eax,4)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
add    $0x83,%al
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x2c(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x3e(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
jbe    8049f91 <_DYNAMIC+0x7d>
add    $0x8,%al
xchg   %al,-0x7c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
addl   $0xffffffb6,(%eax,%ecx,1)
addl   $0xffffffc6,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
sub    $0x4,%esp
pop    %esp
xor    %edx,%edx
push   %edx
pushw  $0x462d
mov    %esp,%esi
push   %edx
push   $0x736e6961
push   $0x68637069
mov    %esp,%edi
push   $0x2f6e6962
push   $0x732f2f2f
mov    %esp,%ebx
push   %edx
push   %esi
push   %edi
mov    %esp,%ecx
xor    %eax,%eax
mov    $0xb,%al
int    $0x80
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x80482c4>
je     81 <_init-0x80482bb>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x80482b6>
je     8f <_init-0x80482ad>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x804829b>
je     aa <_init-0x8048292>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x804828c>
je     b9 <_init-0x8048283>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
