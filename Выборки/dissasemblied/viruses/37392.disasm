das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ch,0x384ffe40(%esi)
jmp    6627a247 <_end+0x5e2301ff>
js     80481a0 <_init-0x1a0>
fmuls  (%edi)
mov    $0x9463783b,%ebx
.byte 0x7b
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    (%eax),%eax
and    %al,(%esi)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x4bad1c8c,%eax
jecxz  8048190 <_init-0x1b0>
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ebx
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,(%ebx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    (%eax),%al
add    %al,(%eax)
inc    %eax
mov    0x40804,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
or     $0x86,%al
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482c7 <_init-0x79>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482d5 <_init-0x6b>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
jae    80482e2 <_init-0x5e>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x656c7274,0x73(%eax,%eax,1),%ebp
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
outsl  %fs:(%esi),(%dx)
jne    80482fc <_init-0x44>
add    %ah,0x70(%esi)
jb     80482f6 <_init-0x4a>
outsb  %ds:(%esi),(%dx)
je     80482f6 <_init-0x4a>
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048311 <_init-0x2f>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048320 <_init-0x20>
popa
jb     8048323 <_init-0x1d>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x30000,%eax
bound  %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x6c,0x20000,%ecx
00
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%al
add    %al,-0x60(%eax)
add    $0x8,%al
.byte 0x5
push   %es
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
.byte 0x5
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1cb7,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     804835e <_init+0x1e>
call   8048390 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048370 <_init+0x30>
jmp    *0x804a010
push   $0x8
jmp    8048370 <_init+0x30>
jmp    *0x804a014
push   $0x10
jmp    8048370 <_init+0x30>
jmp    *0x804a018
push   $0x18
jmp    8048370 <_init+0x30>
jmp    *0x804a01c
push   $0x20
jmp    8048370 <_init+0x30>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80485f0
push   $0x8048580
push   %ecx
push   %esi
push   $0x80484cd
call   80483b0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a02b,%eax
sub    $0x804a028,%eax
cmp    $0x6,%eax
ja     8048420 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804841f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a028,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a028,%eax
sub    $0x804a028,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048459 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048458 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a028,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a044
jne    804849c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048410 <deregister_tm_clones>
movb   $0x1,0x804a044
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048440 <register_tm_clones>
nop
jmp    8048440 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x40,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
movl   $0x68580f6a,0x11(%esp)
movl   $0x1ff9090,0x15(%esp)
movl   $0x10e9c159,0x19(%esp)
movl   $0x6f649068,0x1d(%esp)
movl   $0xebc15b77,0x21(%esp)
movl   $0x2f685308,0x25(%esp)
movl   $0x68616873,0x29(%esp)
movl   $0x6374652f,0x2d(%esp)
movl   $0x80cde389,0x31(%esp)
movl   $0x1b301b0,0x35(%esp)
movw   $0x80cd,0x39(%esp)
movb   $0x0,0x3b(%esp)
lea    0x11(%esp),%eax
mov    %eax,(%esp)
call   80483a0 <strlen@plt>
mov    0x804a040,%edx
mov    %eax,0x8(%esp)
movl   $0x8048610,0x4(%esp)
mov    %edx,(%esp)
call   80483c0 <fprintf@plt>
lea    0x11(%esp),%eax
call   *%eax
mov    0x3c(%esp),%ecx
xor    %gs:0x14,%ecx
je     804857c <main+0xaf>
call   8048380 <__stack_chk_fail@plt>
leave
ret
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a75,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048340 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80485d9 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80485b8 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80485f0 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a03,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
dec    %esp
outsb  %gs:(%esi),(%dx)
addr16 je 804867e <_IO_stdin_used+0x72>
cmp    (%eax),%ah
and    $0xa0a64,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
push   %eax
std
(bad)
incl   0x0(%eax,%eax,1)
add    %ch,0x68fffffe(%ebp)
add    %al,(%eax)
add    %ah,-0x1(%eax)
(bad)
decl   -0x30000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8048663 <_IO_stdin_used+0x57>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
add    $0xfd,%al
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8048683 <_IO_stdin_used+0x77>
js     8048681 <_IO_stdin_used+0x75>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,0xb1fffffe
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
add    0x4040cc5(%ebp),%ch
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
sar    %dh
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0xfc0000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
.byte 0xa0
test   %al,(%eax,%ecx,1)
.byte 0x80
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
inc    %eax
addl   $0xd,(%eax,%ecx,1)
add    %al,(%eax)
add    %dh,%ah
test   %eax,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
push   %eax
(bad)
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dl,%al
addl   $0xa,(%eax,%ecx,1)
jbe    8049f6a <_DYNAMIC+0x56>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,(%eax)
addl   $0x11,(%eax,%ecx,1)
add    %al,(%eax)
add    %cl,(%eax)
addl   $0x12,(%eax,%ecx,1)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x28(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x3a(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
xchg   %al,-0x7c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
addl   $0xffffffb6,(%eax,%ecx,1)
addl   $0xffffffc6,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x80482c8>
je     81 <_init-0x80482bf>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x80482ba>
je     8f <_init-0x80482b1>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x804829f>
je     aa <_init-0x8048296>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048290>
je     b9 <_init-0x8048287>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
