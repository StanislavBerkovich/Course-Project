das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %cl,-0x79(%edi)
jae    8048169 <_init-0x1cf>
adc    %dl,0x72229f93
movsl  %ds:(%esi),%es:(%edi)
and    0x51d44d68,%ch
mov    $0xb8,%cl
.byte 0xf7
add    (%eax),%al
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x1ac>
xor    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ds
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,%ds:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %ch,0x4(%esi,%eax,4)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482c3 <_init-0x75>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482d1 <_init-0x67>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x75(%eax)
je     80482dd <_init-0x5b>
add    %bl,0x5f(%edi)
jae    80482e3 <_init-0x55>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x746e6972,0x70(%eax,%eax,1),%ebp
data16
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804830a <_init-0x2e>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048319 <_init-0x1f>
popa
jb     804831c <_init-0x1c>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x5f,0x30000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
imul   $0x0,(%eax),%eax
cld
lahf
add    $0x8,%al
push   %es
add    $0x0,%al
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
add    $0xa0200000,%eax
add    $0x8,%al
pop    %es
push   %es
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1cbf,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048356 <_init+0x1e>
call   80483a0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048360 <_init+0x28>
jmp    *0x804a010
push   $0x8
jmp    8048360 <_init+0x28>
jmp    *0x804a014
push   $0x10
jmp    8048360 <_init+0x28>
jmp    *0x804a018
push   $0x18
jmp    8048360 <_init+0x28>
jmp    *0x804a01c
push   $0x20
jmp    8048360 <_init+0x28>
jmp    *0x804a020
push   $0x28
jmp    8048360 <_init+0x28>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8048650
push   $0x80485e0
push   %ecx
push   %esi
push   $0x80484cd
call   80483b0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a02f,%eax
sub    $0x804a02c,%eax
cmp    $0x6,%eax
ja     8048420 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804841f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a02c,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a02c,%eax
sub    $0x804a02c,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048459 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048458 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a02c,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a02c
jne    804849c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048410 <deregister_tm_clones>
movb   $0x1,0x804a02c
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048440 <register_tm_clones>
nop
jmp    8048440 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x70,%esp
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
lea    0x19(%esp),%eax
mov    $0x804869c,%edx
mov    $0x53,%ebx
mov    %eax,%ecx
and    $0x1,%ecx
test   %ecx,%ecx
je     804850a <main+0x3d>
movzbl (%edx),%ecx
mov    %cl,(%eax)
add    $0x1,%eax
add    $0x1,%edx
sub    $0x1,%ebx
mov    %eax,%ecx
and    $0x2,%ecx
test   %ecx,%ecx
je     8048522 <main+0x55>
movzwl (%edx),%ecx
mov    %cx,(%eax)
add    $0x2,%eax
add    $0x2,%edx
sub    $0x2,%ebx
mov    %ebx,%ecx
shr    $0x2,%ecx
mov    %eax,%edi
mov    %edx,%esi
rep movsl %ds:(%esi),%es:(%edi)
mov    %esi,%edx
mov    %edi,%eax
mov    $0x0,%ecx
mov    %ebx,%esi
and    $0x2,%esi
test   %esi,%esi
je     804854a <main+0x7d>
movzwl (%edx,%ecx,1),%esi
mov    %si,(%eax,%ecx,1)
add    $0x2,%ecx
and    $0x1,%ebx
test   %ebx,%ebx
je     8048558 <main+0x8b>
movzbl (%edx,%ecx,1),%edx
mov    %dl,(%eax,%ecx,1)
movb   $0x0,0x18(%esp)
movl   $0x53,0x4(%esp)
movl   $0x8048670,(%esp)
call   8048370 <printf@plt>
movl   $0x8048684,(%esp)
call   8048370 <printf@plt>
movl   $0x1,0xc(%esp)
lea    0x18(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x53,0x4(%esp)
lea    0x19(%esp),%eax
mov    %eax,(%esp)
call   80483c0 <memmem@plt>
test   %eax,%eax
jne    80485b3 <main+0xe6>
movl   $0x8048695,(%esp)
call   8048390 <puts@plt>
jmp    80485bf <main+0xf2>
movl   $0x8048699,(%esp)
call   8048390 <puts@plt>
lea    0x19(%esp),%eax
call   *%eax
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
je     80485d7 <main+0x10a>
call   8048380 <__stack_chk_fail@plt>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a15,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048338 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048639 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048618 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8048650 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x19a3,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
jae    80486da <_IO_stdin_used+0x6e>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
arpl   %bp,0x64(%edi)
gs
pop    %edi
jae    80486e5 <_IO_stdin_used+0x79>
jp     80486e3 <_IO_stdin_used+0x77>
cmp    (%eax),%ah
and    $0x63000a75,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     80486ea <_IO_stdin_used+0x7e>
imul   $0x6c756e20,0x73(%esi),%ebp
insb   (%dx),%es:(%edi)
jae    80486cd <_IO_stdin_used+0x61>
and    %al,(%eax)
jns    80486fc <_IO_stdin_used+0x90>
jae    8048699 <_IO_stdin_used+0x2d>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %dh,(%ecx)
(bad)
xor    %eax,%eax
push   $0x2
pop    %ecx
mov    $0x3053,%ax
push   %eax
push   $0x7974742f
push   $0x7665642f
mov    %esp,%ebx
push   $0x5
pop    %eax
mov    %eax,%esi
int    $0x80
mov    %eax,%esi
xor    %ecx,%ecx
mov    %esi,%ebx
push   $0x3f
pop    %eax
int    $0x80
inc    %ecx
cmp    $0x3,%cl
jne    80486bf <_IO_stdin_used+0x53>
mov    $0x6873,%ax
push   %eax
mov    %esp,%ecx
push   %edx
push   %ecx
mov    %esp,%ecx
push   %edx
push   $0x786f6279
push   $0x7375622f
push   $0x6e69622f
mov    %esp,%ebx
push   $0xb
pop    %eax
int    $0x80
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
jo     80486fa <_IO_stdin_used+0x8e>
(bad)
incl   0x0(%eax,%eax,1)
add    %bl,%ch
std
(bad)
ljmp   *0x0(%eax)
add    %al,(%eax)
lock (bad)
(bad)
lcall  *0x60000000(%eax)
(bad)
(bad)
call   *%esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8048733 <_IO_stdin_used+0xc7>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
and    $0xfc,%al
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8048753 <_IO_stdin_used+0xe7>
js     8048751 <_IO_stdin_used+0xe5>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sub    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,-0x3(%ebp)
(bad)
call   *(%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc3010203,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
jo     804878e <_IO_stdin_used+0x122>
add    %al,(%eax)
push   %eax
(bad)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %ch,-0x17c0000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
.byte 0xa0
test   %al,(%eax,%ecx,1)
.byte 0x80
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
cmp    %al,0xd0804(%ebx)
add    %al,(%eax)
push   %esp
xchg   %al,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
dec    %esp
(bad)
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
jae    8049f6a <_DYNAMIC+0x56>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%eax)
addl   $0x11,(%eax,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x12,(%eax,%ecx,1)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x30(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x40(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
jbe    8049f91 <_DYNAMIC+0x7d>
add    $0x8,%al
xchg   %al,-0x7c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
addl   $0xffffffb6,(%eax,%ecx,1)
addl   $0xffffffc6,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x80482c0>
je     81 <_init-0x80482b7>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x80482b2>
je     8f <_init-0x80482a9>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048297>
je     aa <_init-0x804828e>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048288>
je     b9 <_init-0x804827f>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
