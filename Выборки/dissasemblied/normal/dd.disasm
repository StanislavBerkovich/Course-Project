das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ch,0x3762fa0f(%eax,%eiz,8)
jge    80481f1 <__ctype_toupper_loc@plt-0xddf>
sub    (%esi),%ecx
jnp    80481d9 <__ctype_toupper_loc@plt-0xdf7>
movsl  %ds:(%esi),%es:(%edi)
repz repz sub (%edi),%bl
.byte 0x35
push   $0x60
add    (%eax),%eax
add    %al,(%eax)
push   %ecx
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%esi)
rorb   $0x24,0x0(%eax)
imul   $0x5112,(%ecx),%ebx
add    %dl,0x0(%edx)
add    %al,(%eax)
pop    %ecx
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x50bc1c8c,%eax
jbe    8048176 <__ctype_toupper_loc@plt-0xe5a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <__ctype_toupper_loc@plt-0xe43>
dec    %ebx
jecxz  80481a4 <__ctype_toupper_loc@plt-0xe2c>
xchg   %eax,%esi
mov    0xb3c09789,%al
notl   (%edx)
in     $0x62,%eax
inc    %ecx
cmc
xor    %esp,%eax
notl   (%edx)
test   $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ch
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ecx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     8048406 <__ctype_toupper_loc@plt-0xbca>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     (%dx),%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,(%ebx)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
rolb   $0x0,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jge    80484b8 <__ctype_toupper_loc@plt-0xb18>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%edx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%bl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ds
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lea    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lret   $0x1
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %al,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jne    8048618 <__ctype_toupper_loc@plt-0x9b8>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     8048627 <__ctype_toupper_loc@plt-0x9a9>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     (%dx),%eax
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x60000001(%edi)
jb     8048710 <__ctype_toupper_loc@plt-0x8c0>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
pop    %edi
add    (%eax),%eax
add    %al,(%eax)
jb     8048720 <__ctype_toupper_loc@plt-0x8b0>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
incb   (%ecx)
add    %al,(%eax)
add    $0x72,%al
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x3(%edx)
add    %al,(%eax)
and    %dh,0x5(%edx)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
and    $0x22,%al
add    $0x408,%eax
add    %dl,(%ecx)
add    %cl,(%edi)
add    %al,%ch
add    %al,(%eax)
add    %ah,(%eax)
jb     8048760 <__ctype_toupper_loc@plt-0x870>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
cld
add    (%eax),%al
add    %ah,0x5(%edx,%esi,2)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
test   %al,(%edx)
add    %al,(%eax)
add    %dh,0x5(%edx)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
pop    %edx
add    %al,(%eax)
add    %al,0x72(%eax)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804880b <__ctype_toupper_loc@plt-0x7c5>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048819 <__ctype_toupper_loc@plt-0x7b7>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048826 <__ctype_toupper_loc@plt-0x7aa>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048832 <__ctype_toupper_loc@plt-0x79e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048839 <__ctype_toupper_loc@plt-0x797>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804884b <__ctype_toupper_loc@plt-0x785>
outsl  %ds:(%esi),(%dx)
ja     804883d <__ctype_toupper_loc@plt-0x793>
add    %dh,0x74(%ebx)
jb     804884d <__ctype_toupper_loc@plt-0x783>
arpl   %bp,0x70(%ebp)
add    %ah,0x6e(%ebx,%eiz,2)
addr16
gs
je     804885e <__ctype_toupper_loc@plt-0x772>
gs
js     8048861 <__ctype_toupper_loc@plt-0x76f>
add    %ch,0x70(%edi)
je     804885b <__ctype_toupper_loc@plt-0x775>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     804886b <__ctype_toupper_loc@plt-0x765>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     8048877 <__ctype_toupper_loc@plt-0x759>
gs
js     804887a <__ctype_toupper_loc@plt-0x756>
add    %ah,0x74(%esi)
jb     8048880 <__ctype_toupper_loc@plt-0x750>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs
ss
xor    $0x0,%al
gs
jb     8048888 <__ctype_toupper_loc@plt-0x748>
outsl  %ds:(%esi),(%dx)
jb     8048819 <__ctype_toupper_loc@plt-0x7b7>
jae    8048884 <__ctype_toupper_loc@plt-0x74c>
addr16 jo 8048890 <__ctype_toupper_loc@plt-0x740>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x61(%ebp)
jae    804888f <__ctype_toupper_loc@plt-0x741>
add    %bl,0x5f(%edi)
jae    804889d <__ctype_toupper_loc@plt-0x733>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
data16
jae    80488c3 <__ctype_toupper_loc@plt-0x70d>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048853 <__ctype_toupper_loc@plt-0x77d>
pop    %edi
gs
js     80488c0 <__ctype_toupper_loc@plt-0x710>
je     8048859 <__ctype_toupper_loc@plt-0x777>
jo     80488cd <__ctype_toupper_loc@plt-0x703>
outsl  %ds:(%esi),(%dx)
addr16 jb 80488c0 <__ctype_toupper_loc@plt-0x710>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    80488e9 <__ctype_toupper_loc@plt-0x6e7>
gs
jb     80488ed <__ctype_toupper_loc@plt-0x6e3>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     80488eb <__ctype_toupper_loc@plt-0x6e5>
pop    %edi
addr16
gs
je     80488ea <__ctype_toupper_loc@plt-0x6e6>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048903 <__ctype_toupper_loc@plt-0x6cd>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     8048896 <__ctype_toupper_loc@plt-0x73a>
data16
fs
popa
je     80488fc <__ctype_toupper_loc@plt-0x6d4>
jae    8048916 <__ctype_toupper_loc@plt-0x6ba>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    804891d <__ctype_toupper_loc@plt-0x6b3>
jb     8048917 <__ctype_toupper_loc@plt-0x6b9>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048917 <__ctype_toupper_loc@plt-0x6b9>
add    %dh,0x69(%ebx)
addr16
gs
insl   (%dx),%es:(%edi)
jo     8048930 <__ctype_toupper_loc@plt-0x6a0>
jns    8048931 <__ctype_toupper_loc@plt-0x69f>
gs
je     80488c1 <__ctype_toupper_loc@plt-0x70f>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
jae    804892b <__ctype_toupper_loc@plt-0x6a5>
je     80488c8 <__ctype_toupper_loc@plt-0x708>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
arpl   %bp,%gs:0x6e(%edi)
jbe    80488d3 <__ctype_toupper_loc@plt-0x6fd>
pop    %edi
pop    %edi
gs
jb     804894a <__ctype_toupper_loc@plt-0x686>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
jb     8048952 <__ctype_toupper_loc@plt-0x67e>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x65(%edi)
je     804896b <__ctype_toupper_loc@plt-0x665>
popa
addr16
gs
jae    8048969 <__ctype_toupper_loc@plt-0x667>
jp     8048967 <__ctype_toupper_loc@plt-0x669>
add    %ah,0x70(%ebp,%esi,2)
xor    (%eax),%al
pop    %edi
pop    %edi
data16
js     8048980 <__ctype_toupper_loc@plt-0x650>
je     8048970 <__ctype_toupper_loc@plt-0x660>
je     8048947 <__ctype_toupper_loc@plt-0x689>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     804898a <__ctype_toupper_loc@plt-0x646>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
imul   $0x65736464,0x61(%edi),%esp
je     804892b <__ctype_toupper_loc@plt-0x6a5>
jae    80489a1 <__ctype_toupper_loc@plt-0x62f>
outsl  %fs:(%esi),(%dx)
jne    80489a5 <__ctype_toupper_loc@plt-0x62b>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80489ad <__ctype_toupper_loc@plt-0x623>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jb     80489b3 <__ctype_toupper_loc@plt-0x61d>
imul   $0x73626d00,0x65(%ebx),%esi
imul   $0x5f5f0074,0x69(%esi),%ebp
jne    80489c8 <__ctype_toupper_loc@plt-0x608>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048966 <__ctype_toupper_loc@plt-0x66a>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     80489e9 <__ctype_toupper_loc@plt-0x5e7>
outsb  %ds:(%esi),(%dx)
jbe    8048987 <__ctype_toupper_loc@plt-0x649>
pop    %edi
pop    %edi
data16
jb     80489f1 <__ctype_toupper_loc@plt-0x5df>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048a0a <__ctype_toupper_loc@plt-0x5c6>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
data16
jae    8048a05 <__ctype_toupper_loc@plt-0x5cb>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048a19 <__ctype_toupper_loc@plt-0x5b7>
jo     8048a20 <__ctype_toupper_loc@plt-0x5b0>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048a26 <__ctype_toupper_loc@plt-0x5aa>
je     8048a24 <__ctype_toupper_loc@plt-0x5ac>
add    %ah,0x65(%edi)
je     8048a38 <__ctype_toupper_loc@plt-0x598>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    80489cd <__ctype_toupper_loc@plt-0x603>
jae    8048a38 <__ctype_toupper_loc@plt-0x598>
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x69(%ebx)
imul   $0x65626d65,0x6d(%bp,%di),%esi
jb     80489f0 <__ctype_toupper_loc@plt-0x5e0>
arpl   %bp,0x63(%edi,%ebp,2)
imul   $0x65,0x67(%edi),%ebx
je     8048a6e <__ctype_toupper_loc@plt-0x562>
imul   $0x665f5f00,0x65(%ebp),%ebp
jo     8048a68 <__ctype_toupper_loc@plt-0x568>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048a78 <__ctype_toupper_loc@plt-0x558>
push   $0x72700072
outsl  %ds:(%esi),(%dx)
addr16 jb 8048a7f <__ctype_toupper_loc@plt-0x551>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048aa4 <__ctype_toupper_loc@plt-0x52c>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048aa0 <__ctype_toupper_loc@plt-0x530>
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048ab6 <__ctype_toupper_loc@plt-0x51a>
jne    8048ab9 <__ctype_toupper_loc@plt-0x517>
jo     8048ab0 <__ctype_toupper_loc@plt-0x520>
jb     8048aac <__ctype_toupper_loc@plt-0x524>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048aca <__ctype_toupper_loc@plt-0x506>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048ac4 <__ctype_toupper_loc@plt-0x50c>
jb     8048ac0 <__ctype_toupper_loc@plt-0x510>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
data16
arpl   %bp,0x74(%esi)
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
jae    8048adf <__ctype_toupper_loc@plt-0x4f1>
jb     8048ada <__ctype_toupper_loc@plt-0x4f6>
outsb  %ds:(%esi),(%dx)
je     8048ada <__ctype_toupper_loc@plt-0x4f6>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048ae5 <__ctype_toupper_loc@plt-0x4eb>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048aec <__ctype_toupper_loc@plt-0x4e4>
js     8048afd <__ctype_toupper_loc@plt-0x4d3>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x6574706f,0x0(%esi),%ebp
jb     8048b08 <__ctype_toupper_loc@plt-0x4c8>
add    %dh,0x74(%ebx)
jb     8048afe <__ctype_toupper_loc@plt-0x4d2>
insl   (%dx),%es:(%edi)
jo     8048a9e <__ctype_toupper_loc@plt-0x532>
pop    %edi
pop    %edi
jae    8048b16 <__ctype_toupper_loc@plt-0x4ba>
jb     8048b18 <__ctype_toupper_loc@plt-0x4b8>
outsl  %ds:(%esi),(%dx)
jne    8048b13 <__ctype_toupper_loc@plt-0x4bd>
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x616e7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048b32 <__ctype_toupper_loc@plt-0x49e>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x766f5f5f,0x0(%esi),%ebp
gs
jb     8048b31 <__ctype_toupper_loc@plt-0x49f>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048acf <__ctype_toupper_loc@plt-0x501>
jo     8048b40 <__ctype_toupper_loc@plt-0x490>
jae    8048b3c <__ctype_toupper_loc@plt-0x494>
js     8048b34 <__ctype_toupper_loc@plt-0x49c>
popaw
fs
jbe    8048b43 <__ctype_toupper_loc@plt-0x48d>
jae    8048b41 <__ctype_toupper_loc@plt-0x48f>
ss
xor    $0x0,%al
data16
jo     8048b57 <__ctype_toupper_loc@plt-0x479>
je     8048b57 <__ctype_toupper_loc@plt-0x479>
pop    %edi
jne    8048b55 <__ctype_toupper_loc@plt-0x47b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b69 <__ctype_toupper_loc@plt-0x467>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b74 <__ctype_toupper_loc@plt-0x45c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b78 <__ctype_toupper_loc@plt-0x458>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048b7c <__ctype_toupper_loc@plt-0x454>
js     8048b82 <__ctype_toupper_loc@plt-0x44e>
je     8048b1b <__ctype_toupper_loc@plt-0x4b5>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048b98 <__ctype_toupper_loc@plt-0x438>
popa
jb     8048b9b <__ctype_toupper_loc@plt-0x435>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x4000300,%eax
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
push   %es
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%ebx)
add    %cl,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edi)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
or     %eax,(%eax)
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%eax,%eax,1)
or     %eax,(%eax)
add    (%eax),%eax
add    (%eax),%eax
or     (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %cl,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %eax,(%eax)
or     %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jae    8048c6b <__ctype_toupper_loc@plt-0x365>
imul   $0xa0000,(%ecx),%ecx
xchg   %eax,%esi
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %cl,(%ecx)
add    %ah,0x10000003(%edx)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x80000,(%ecx),%ecx
scas   %es:(%edi),%al
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x70000,0xd(%ecx),%ebp
mov    $0x10000003,%edx
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x3c4,0x60000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%edi
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
add    $0x3ce00,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x40000,0xd(%ecx),%ebp
flds   (%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x30000,%eax
jecxz  8048ccd <__ctype_toupper_loc@plt-0x303>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x20000,%eax
in     (%dx),%eax
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
outsl  %ds:(%esi),(%dx)
add    $0x270608,%eax
add    %al,(%eax)
jb     8048cf0 <__ctype_toupper_loc@plt-0x2e0>
or     %al,0x4000052
jb     8048cf8 <__ctype_toupper_loc@plt-0x2d8>
or     %al,0x20000053
jb     8048d00 <__ctype_toupper_loc@plt-0x2d0>
or     %al,0x40000054
jb     8048d08 <__ctype_toupper_loc@plt-0x2c8>
or     %al,0x60000059
jb     8048d10 <__ctype_toupper_loc@plt-0x2c0>
or     %al,0x64000051
jb     8048d18 <__ctype_toupper_loc@plt-0x2b8>
.byte 0x8
.byte 0x5
push   %edi
or     $0x70,%al
add    $0x10708,%eax
add    %dl,(%eax)
jo     8048d28 <__ctype_toupper_loc@plt-0x2a8>
or     %al,(%edi)
add    (%eax),%al
add    %dl,(%eax,%esi,2)
add    $0x30708,%eax
add    %bl,(%eax)
jo     8048d38 <__ctype_toupper_loc@plt-0x298>
or     %al,(%edi)
add    $0x0,%al
add    %bl,(%eax,%esi,2)
add    $0x50708,%eax
add    %ah,(%eax)
jo     8048d48 <__ctype_toupper_loc@plt-0x288>
or     %al,(%edi)
push   %es
add    %al,(%eax)
and    $0x70,%al
add    $0x70708,%eax
add    %ch,(%eax)
jo     8048d58 <__ctype_toupper_loc@plt-0x278>
or     %al,(%edi)
or     %al,(%eax)
add    %ch,(%eax,%esi,2)
add    $0x90708,%eax
add    %dh,(%eax)
jo     8048d68 <__ctype_toupper_loc@plt-0x268>
or     %al,(%edi)
or     (%eax),%al
add    %dh,(%eax,%esi,2)
add    $0xb0708,%eax
add    %bh,(%eax)
jo     8048d78 <__ctype_toupper_loc@plt-0x258>
or     %al,(%edi)
or     $0x0,%al
add    %bh,(%eax,%esi,2)
add    $0xd0708,%eax
add    %al,0x70(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%esi,2)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
jo     8048d98 <__ctype_toupper_loc@plt-0x238>
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x70(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x70(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    $0x70600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%esi,2)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080570
sbb    %al,(%eax)
add    %ch,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x70(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x70(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    $0x70800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%esi,2)
add    %al,(%eax)
mov    %dh,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x21070805(%eax,%esi,2)
add    %al,(%eax)
nop
jo     8048e28 <__ctype_toupper_loc@plt-0x1a8>
or     %al,(%edi)
and    (%eax),%al
add    %dl,0x23070805(%eax,%esi,2)
add    %al,(%eax)
cwtl
jo     8048e38 <__ctype_toupper_loc@plt-0x198>
or     %al,(%edi)
and    $0x0,%al
add    %bl,0x25070805(%eax,%esi,2)
add    %al,(%eax)
mov    0x7080570,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
jo     8048e50 <__ctype_toupper_loc@plt-0x180>
or     %al,(%edi)
daa
add    %al,(%eax)
test   $0x70,%al
add    $0x280708,%eax
add    %ch,0x29070805(%eax,%esi,2)
add    %al,(%eax)
mov    $0x70,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%esi,2)
add    %al,(%eax)
mov    $0x7080570,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%esi,2)
add    %al,(%eax)
(bad)
jo     8048e88 <__ctype_toupper_loc@plt-0x148>
or     %al,(%edi)
add    %al,%cs:(%eax)
les    0x5(%eax),%esi
or     %al,(%edi)
das
add    %al,(%eax)
enter  $0x570,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
jo     8048ea0 <__ctype_toupper_loc@plt-0x130>
or     %al,(%edi)
xor    %eax,(%eax)
add    %dl,%al
jo     8048ea8 <__ctype_toupper_loc@plt-0x128>
or     %al,(%edi)
xor    (%eax),%al
add    %dl,%ah
jo     8048eb0 <__ctype_toupper_loc@plt-0x120>
or     %al,(%edi)
xor    (%eax),%eax
add    %bl,%al
jo     8048eb8 <__ctype_toupper_loc@plt-0x118>
or     %al,(%edi)
xor    $0x0,%al
add    %bl,%ah
jo     8048ec0 <__ctype_toupper_loc@plt-0x110>
or     %al,(%edi)
xor    $0x70e00000,%eax
add    $0x360708,%eax
add    %ah,%ah
jo     8048ed0 <__ctype_toupper_loc@plt-0x100>
or     %al,(%edi)
aaa
add    %al,(%eax)
call   f0c9445 <opterr+0x70721e1>
cmp    %al,(%eax)
add    %ch,%ah
jo     8048ee0 <__ctype_toupper_loc@plt-0xf0>
or     %al,(%edi)
cmp    %eax,(%eax)
add    %dh,%al
jo     8048ee8 <__ctype_toupper_loc@plt-0xe8>
or     %al,(%edi)
cmp    (%eax),%al
add    %dh,%ah
jo     8048ef0 <__ctype_toupper_loc@plt-0xe0>
or     %al,(%edi)
cmp    (%eax),%eax
add    %bh,%al
jo     8048ef8 <__ctype_toupper_loc@plt-0xd8>
or     %al,(%edi)
cmp    $0x0,%al
add    %bh,%ah
jo     8048f00 <__ctype_toupper_loc@plt-0xd0>
or     %al,(%edi)
cmp    $0x71000000,%eax
add    $0x3e0708,%eax
add    %al,(%ecx,%esi,2)
add    $0x3f0708,%eax
add    %cl,(%eax)
jno    8048f18 <__ctype_toupper_loc@plt-0xb8>
or     %al,(%edi)
inc    %eax
add    %al,(%eax)
or     $0x71,%al
add    $0x410708,%eax
add    %dl,(%eax)
jno    8048f28 <__ctype_toupper_loc@plt-0xa8>
or     %al,(%edi)
inc    %edx
add    %al,(%eax)
adc    $0x71,%al
add    $0x430708,%eax
add    %bl,(%eax)
jno    8048f38 <__ctype_toupper_loc@plt-0x98>
or     %al,(%edi)
inc    %esp
add    %al,(%eax)
sbb    $0x71,%al
add    $0x450708,%eax
add    %ah,(%eax)
jno    8048f48 <__ctype_toupper_loc@plt-0x88>
or     %al,(%edi)
inc    %esi
add    %al,(%eax)
and    $0x71,%al
add    $0x470708,%eax
add    %ch,(%eax)
jno    8048f58 <__ctype_toupper_loc@plt-0x78>
or     %al,(%edi)
dec    %eax
add    %al,(%eax)
sub    $0x71,%al
add    $0x490708,%eax
add    %dh,(%eax)
jno    8048f68 <__ctype_toupper_loc@plt-0x68>
or     %al,(%edi)
dec    %edx
add    %al,(%eax)
xor    $0x71,%al
add    $0x4b0708,%eax
add    %bh,(%eax)
jno    8048f78 <__ctype_toupper_loc@plt-0x58>
or     %al,(%edi)
dec    %esp
add    %al,(%eax)
cmp    $0x71,%al
add    $0x4d0708,%eax
add    %al,0x71(%eax)
add    $0x4e0708,%eax
add    %al,0x5(%ecx,%esi,2)
or     %al,(%edi)
dec    %edi
add    %al,(%eax)
dec    %eax
jno    8048f98 <__ctype_toupper_loc@plt-0x38>
or     %al,(%edi)
push   %eax
push   %ebx
sub    $0x8,%esp
call   804b900 <__sprintf_chk@plt+0x2440>
add    $0xe05f,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048fb6 <__ctype_toupper_loc@plt-0x1a>
call   8049230 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8057004
jmp    *0x8057008
add    %al,(%eax)
jmp    *0x805700c
push   $0x0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057010
push   $0x8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057014
push   $0x10
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057018
push   $0x18
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805701c
push   $0x20
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057020
push   $0x28
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057024
push   $0x30
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057028
push   $0x38
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805702c
push   $0x40
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057030
push   $0x48
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057034
push   $0x50
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057038
push   $0x58
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805703c
push   $0x60
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057040
push   $0x68
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057044
push   $0x70
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057048
push   $0x78
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805704c
push   $0x80
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057050
push   $0x88
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057054
push   $0x90
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057058
push   $0x98
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805705c
push   $0xa0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057060
push   $0xa8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057064
push   $0xb0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057068
push   $0xb8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805706c
push   $0xc0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057070
push   $0xc8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057074
push   $0xd0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057078
push   $0xd8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805707c
push   $0xe0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057080
push   $0xe8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057084
push   $0xf0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057088
push   $0xf8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805708c
push   $0x100
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057090
push   $0x108
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057094
push   $0x110
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057098
push   $0x118
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805709c
push   $0x120
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a0
push   $0x128
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a4
push   $0x130
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a8
push   $0x138
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570ac
push   $0x140
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b0
push   $0x148
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b4
push   $0x150
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b8
push   $0x158
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570bc
push   $0x160
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c0
push   $0x168
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c4
push   $0x170
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c8
push   $0x178
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570cc
push   $0x180
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d0
push   $0x188
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d4
push   $0x190
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d8
push   $0x198
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570dc
push   $0x1a0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e0
push   $0x1a8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e4
push   $0x1b0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e8
push   $0x1b8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570ec
push   $0x1c0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f0
push   $0x1c8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f4
push   $0x1d0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f8
push   $0x1d8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570fc
push   $0x1e0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057100
push   $0x1e8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057104
push   $0x1f0
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057108
push   $0x1f8
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805710c
push   $0x200
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057110
push   $0x208
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057114
push   $0x210
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057118
push   $0x218
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805711c
push   $0x220
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057120
push   $0x228
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057124
push   $0x230
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057128
push   $0x238
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805712c
push   $0x240
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057130
push   $0x248
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057134
push   $0x250
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057138
push   $0x258
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805713c
push   $0x260
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057140
push   $0x268
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057144
push   $0x270
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057148
push   $0x278
jmp    8048fc0 <__ctype_toupper_loc@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xf0,%esp
movl   $0x80535e6,(%esp)
call   80491e0 <getenv@plt>
movl   $0x8057660,(%esp)
mov    %eax,%ebx
call   8049370 <sigemptyset@plt>
lea    0x64(%esp),%eax
test   %ebx,%ebx
mov    %eax,0x40(%esp)
je     804b3bf <__sprintf_chk@plt+0x1eff>
mov    0x40(%esp),%eax
movl   $0x0,0x4(%esp)
movl   $0x2,(%esp)
mov    %eax,0x8(%esp)
call   8049400 <sigaction@plt>
cmpl   $0x1,0x64(%esp)
je     8049540 <__sprintf_chk@plt+0x80>
movl   $0x2,0x4(%esp)
movl   $0x8057660,(%esp)
call   8049300 <sigaddset@plt>
lea    0x68(%esp),%edi
mov    $0x8057660,%esi
mov    $0x20,%ecx
rep movsl %ds:(%esi),%es:(%edi)
movl   $0xa,0x4(%esp)
movl   $0x8057660,(%esp)
call   8049120 <sigismember@plt>
test   %eax,%eax
jne    8049bcd <__sprintf_chk@plt+0x70d>
movl   $0x2,0x4(%esp)
movl   $0x8057660,(%esp)
call   8049120 <sigismember@plt>
test   %eax,%eax
je     80495b3 <__sprintf_chk@plt+0xf3>
mov    0x40(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x2,(%esp)
movl   $0x804b9d0,0x64(%esp)
mov    %eax,0x4(%esp)
movl   $0xc0000000,0xe8(%esp)
c0
call   8049400 <sigaction@plt>
mov    0xc(%ebp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804ea10 <__sprintf_chk@plt+0x5550>
movl   $0x80541bd,0x4(%esp)
movl   $0x6,(%esp)
call   80493a0 <setlocale@plt>
movl   $0x80535f6,0x4(%esp)
movl   $0x8053472,(%esp)
call   8049410 <bindtextdomain@plt>
movl   $0x8053472,(%esp)
call   8049130 <textdomain@plt>
movl   $0x804c9c0,(%esp)
call   80521c0 <__sprintf_chk@plt+0x8d00>
call   80492e0 <getpagesize@plt>
movl   $0x0,0x24(%esp)
movl   $0x8053608,0x20(%esp)
movl   $0x8053614,0x1c(%esp)
movl   $0x8053624,0x18(%esp)
movl   $0x804b9f0,0x14(%esp)
mov    %eax,0x805778c
mov    0x8057180,%eax
movl   $0x8053472,0xc(%esp)
movl   $0x805362f,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0xc(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   804e950 <__sprintf_chk@plt+0x5490>
mov    0xc(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x80541bd,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
movb   $0x0,0x8057170
mov    %eax,(%esp)
call   8049270 <getopt_long@plt>
cmp    $0xffffffff,%eax
jne    80498a0 <__sprintf_chk@plt+0x3e0>
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %al,0x8057540(%eax)
add    $0x1,%eax
cmp    $0x100,%eax
jne    80496a0 <__sprintf_chk@plt+0x1e0>
mov    0x8057240,%esi
cmp    %esi,0x8(%ebp)
jle    8049c01 <__sprintf_chk@plt+0x741>
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
movl   $0xffffffff,0x4c(%esp)
movl   $0xffffffff,0x48(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x30(%esp)
nop
mov    0xc(%ebp),%eax
mov    (%eax,%esi,4),%edi
movl   $0x3d,0x4(%esp)
mov    %edi,(%esp)
call   8049280 <strchr@plt>
test   %eax,%eax
je     804b854 <__sprintf_chk@plt+0x2394>
add    $0x1,%eax
mov    $0x805359b,%edx
mov    %eax,0x58(%esp)
mov    %edi,%eax
jmp    8049737 <__sprintf_chk@plt+0x277>
xchg   %ax,%ax
add    $0x1,%eax
add    $0x1,%edx
cmp    %cl,-0x1(%eax)
jne    80498b0 <__sprintf_chk@plt+0x3f0>
movzbl (%edx),%ecx
test   %cl,%cl
jne    8049728 <__sprintf_chk@plt+0x268>
movzbl (%eax),%eax
test   %al,%al
je     804974d <__sprintf_chk@plt+0x28d>
cmp    $0x3d,%al
jne    80498b0 <__sprintf_chk@plt+0x3f0>
mov    0x58(%esp),%eax
mov    %eax,0x8057794
add    $0x1,%esi
cmp    0x8(%ebp),%esi
jne    80496f8 <__sprintf_chk@plt+0x238>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8049c31 <__sprintf_chk@plt+0x771>
mov    %eax,0x8057784
mov    %eax,0x8057788
cmpl   $0x0,0x8057784
jne    8049787 <__sprintf_chk@plt+0x2c7>
movl   $0x200,0x8057784
00
cmpl   $0x0,0x8057780
jne    8049797 <__sprintf_chk@plt+0x2d7>
andl   $0xffffffe7,0x8057750
mov    0x805774c,%eax
test   $0x101000,%eax
je     80497ad <__sprintf_chk@plt+0x2ed>
or     $0x101000,%eax
mov    %eax,0x805774c
mov    0x8057748,%ecx
test   $0x1,%cl
jne    804985c <__sprintf_chk@plt+0x39c>
mov    0x805774c,%ebx
test   $0x10,%bl
jne    804b807 <__sprintf_chk@plt+0x2347>
test   $0xc,%cl
jne    804b89b <__sprintf_chk@plt+0x23db>
test   $0x8,%bl
je     8049c57 <__sprintf_chk@plt+0x797>
mov    0x3c(%esp),%eax
or     0x44(%esp),%eax
jne    804aafb <__sprintf_chk@plt+0x163b>
test   $0x4,%bl
je     8049c7a <__sprintf_chk@plt+0x7ba>
cmpl   $0xffffffff,0x48(%esp)
je     804ae75 <__sprintf_chk@plt+0x19b5>
mov    %ecx,0x58(%esp)
mov    0x8057788,%esi
xor    %edi,%edi
mov    0x48(%esp),%ecx
mov    0x4c(%esp),%eax
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x48(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,0x8057178
mov    0x4c(%esp),%eax
mov    %edx,0x805717c
mov    %eax,(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    0x58(%esp),%ecx
mov    %eax,0x8057754
jmp    8049c97 <__sprintf_chk@plt+0x7d7>
movl   $0x5,0x8(%esp)
movl   $0x8053670,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x80536aa,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x80534f5,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   80491d0 <error@plt>
movl   $0x1,(%esp)
call   804b9f0 <__sprintf_chk@plt+0x2530>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%edx
mov    $0x805359e,%eax
jmp    80498cb <__sprintf_chk@plt+0x40b>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edx
add    $0x1,%eax
cmp    %cl,-0x1(%edx)
jne    80498f0 <__sprintf_chk@plt+0x430>
movzbl (%eax),%ecx
test   %cl,%cl
jne    80498c0 <__sprintf_chk@plt+0x400>
movzbl (%edx),%eax
test   %al,%al
je     80498dd <__sprintf_chk@plt+0x41d>
cmp    $0x3d,%al
jne    80498f0 <__sprintf_chk@plt+0x430>
mov    0x58(%esp),%eax
mov    %eax,0x8057790
jmp    8049756 <__sprintf_chk@plt+0x296>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%edx
mov    $0x80535a1,%eax
jmp    804990b <__sprintf_chk@plt+0x44b>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edx
add    $0x1,%eax
cmp    %cl,-0x1(%edx)
jne    8049925 <__sprintf_chk@plt+0x465>
movzbl (%eax),%ecx
test   %cl,%cl
jne    8049900 <__sprintf_chk@plt+0x440>
movzbl (%edx),%eax
test   %al,%al
je     80499cb <__sprintf_chk@plt+0x50b>
cmp    $0x3d,%al
je     80499cb <__sprintf_chk@plt+0x50b>
mov    %edi,%eax
mov    $0x80535a6,%edx
jmp    804993b <__sprintf_chk@plt+0x47b>
xchg   %ax,%ax
add    $0x1,%eax
add    $0x1,%edx
cmp    %cl,-0x1(%eax)
jne    8049955 <__sprintf_chk@plt+0x495>
movzbl (%edx),%ecx
test   %cl,%cl
jne    8049930 <__sprintf_chk@plt+0x470>
movzbl (%eax),%eax
test   %al,%al
je     80499e9 <__sprintf_chk@plt+0x529>
cmp    $0x3d,%al
je     80499e9 <__sprintf_chk@plt+0x529>
mov    %edi,%edx
mov    $0x80535ac,%eax
jmp    804996b <__sprintf_chk@plt+0x4ab>
xchg   %ax,%ax
add    $0x1,%edx
add    $0x1,%eax
cmp    %cl,-0x1(%edx)
jne    8049985 <__sprintf_chk@plt+0x4c5>
movzbl (%eax),%ecx
test   %cl,%cl
jne    8049960 <__sprintf_chk@plt+0x4a0>
movzbl (%edx),%eax
test   %al,%al
je     8049b09 <__sprintf_chk@plt+0x649>
cmp    $0x3d,%al
je     8049b09 <__sprintf_chk@plt+0x649>
mov    %edi,%eax
mov    $0x80535b2,%edx
jmp    804999b <__sprintf_chk@plt+0x4db>
xchg   %ax,%ax
add    $0x1,%eax
add    $0x1,%edx
cmp    %cl,-0x1(%eax)
jne    8049a07 <__sprintf_chk@plt+0x547>
movzbl (%edx),%ecx
test   %cl,%cl
jne    8049990 <__sprintf_chk@plt+0x4d0>
movzbl (%eax),%eax
test   %al,%al
je     80499ad <__sprintf_chk@plt+0x4ed>
cmp    $0x3d,%al
jne    8049a07 <__sprintf_chk@plt+0x547>
mov    0x58(%esp),%eax
mov    $0x8053684,%ecx
mov    $0x8053a60,%edx
call   804c3a0 <__sprintf_chk@plt+0x2ee0>
or     %eax,0x8057744
jmp    8049756 <__sprintf_chk@plt+0x296>
mov    0x58(%esp),%eax
mov    $0x805364a,%ecx
mov    $0x8053be0,%edx
call   804c3a0 <__sprintf_chk@plt+0x2ee0>
or     %eax,0x8057750
jmp    8049756 <__sprintf_chk@plt+0x296>
mov    0x58(%esp),%eax
mov    $0x805365d,%ecx
mov    $0x8053aa0,%edx
call   804c3a0 <__sprintf_chk@plt+0x2ee0>
or     %eax,0x805774c
jmp    8049756 <__sprintf_chk@plt+0x296>
mov    0x40(%esp),%edx
mov    $0x80535b9,%ebx
mov    0x58(%esp),%eax
movb   $0x0,0x64(%esp)
call   804c490 <__sprintf_chk@plt+0x2fd0>
mov    %edx,0x54(%esp)
mov    %edi,%edx
mov    %eax,0x50(%esp)
jmp    8049a3f <__sprintf_chk@plt+0x57f>
lea    0x0(%esi),%esi
add    $0x1,%edx
add    $0x1,%ebx
cmp    %al,-0x1(%edx)
jne    8049b30 <__sprintf_chk@plt+0x670>
movzbl (%ebx),%eax
test   %al,%al
jne    8049a30 <__sprintf_chk@plt+0x570>
movzbl (%edx),%ecx
test   %cl,%cl
jne    8049b27 <__sprintf_chk@plt+0x667>
mov    0x54(%esp),%eax
mov    $0x1,%ecx
or     0x50(%esp),%eax
movzbl 0x64(%esp),%ebx
je     8049a9f <__sprintf_chk@plt+0x5df>
mov    0x805778c,%ecx
xor    %edx,%edx
mov    $0x7fffffff,%eax
lea    0x4(%ecx,%ecx,1),%ecx
neg    %ecx
cmp    $0x7ffffffe,%ecx
ja     8049a84 <__sprintf_chk@plt+0x5c4>
mov    %ecx,%eax
xor    %edx,%edx
cmp    %edx,0x54(%esp)
mov    $0x1,%ecx
ja     8049a9f <__sprintf_chk@plt+0x5df>
jb     804af21 <__sprintf_chk@plt+0x1a61>
cmp    %eax,0x50(%esp)
jbe    804af21 <__sprintf_chk@plt+0x1a61>
or     %ebx,%ecx
mov    0x50(%esp),%eax
mov    %cl,0x64(%esp)
andb   $0x1,0x64(%esp)
mov    %eax,0x8057788
cmpb   $0x0,0x64(%esp)
je     8049756 <__sprintf_chk@plt+0x296>
mov    0x58(%esp),%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053698,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    8049756 <__sprintf_chk@plt+0x296>
mov    0x58(%esp),%eax
mov    $0x8053670,%ecx
mov    $0x8053aa0,%edx
call   804c3a0 <__sprintf_chk@plt+0x2ee0>
or     %eax,0x8057748
jmp    8049756 <__sprintf_chk@plt+0x296>
cmp    $0x3d,%cl
je     8049a51 <__sprintf_chk@plt+0x591>
mov    %edi,%edx
mov    $0x80535bd,%ebx
jmp    8049b4f <__sprintf_chk@plt+0x68f>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edx
add    $0x1,%ebx
cmp    %al,-0x1(%edx)
jne    804b04b <__sprintf_chk@plt+0x1b8b>
movzbl (%ebx),%eax
test   %al,%al
jne    8049b40 <__sprintf_chk@plt+0x680>
movzbl (%edx),%ecx
test   %cl,%cl
je     8049b66 <__sprintf_chk@plt+0x6a6>
cmp    $0x3d,%cl
jne    804b04b <__sprintf_chk@plt+0x1b8b>
movzbl 0x64(%esp),%eax
mov    $0x1,%ecx
mov    %eax,%edx
mov    0x54(%esp),%eax
or     0x50(%esp),%eax
je     8049bb4 <__sprintf_chk@plt+0x6f4>
mov    0x805778c,%edi
xor    %ebx,%ebx
mov    $0x7fffffff,%ecx
neg    %edi
cmp    $0x7ffffffe,%edi
ja     8049b97 <__sprintf_chk@plt+0x6d7>
mov    %edi,%ecx
xor    %ebx,%ebx
cmp    %ebx,0x54(%esp)
mov    $0x1,%edi
ja     8049bb2 <__sprintf_chk@plt+0x6f2>
jb     804af71 <__sprintf_chk@plt+0x1ab1>
cmp    %ecx,0x50(%esp)
jbe    804af71 <__sprintf_chk@plt+0x1ab1>
mov    %edi,%ecx
mov    0x50(%esp),%eax
or     %ecx,%edx
mov    %dl,0x64(%esp)
andb   $0x1,0x64(%esp)
mov    %eax,0x8057784
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
mov    0x40(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0xa,(%esp)
movl   $0x804b9e0,0x64(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0xe8(%esp)
00
call   8049400 <sigaction@plt>
jmp    804956c <__sprintf_chk@plt+0xac>
movl   $0x0,0x44(%esp)
movl   $0x0,0x3c(%esp)
movl   $0xffffffff,0x4c(%esp)
movl   $0xffffffff,0x48(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
orl    $0x800,0x8057750
00
cmpl   $0x0,0x8057788
jne    8049774 <__sprintf_chk@plt+0x2b4>
movl   $0x200,0x8057788
00
jmp    8049774 <__sprintf_chk@plt+0x2b4>
mov    0x3c(%esp),%edi
mov    0x44(%esp),%esi
mov    %edi,%eax
or     %esi,%eax
je     80497eb <__sprintf_chk@plt+0x32b>
mov    %esi,0x8057778
mov    %edi,0x805777c
jmp    80497eb <__sprintf_chk@plt+0x32b>
cmpl   $0xffffffff,0x48(%esp)
je     804ae61 <__sprintf_chk@plt+0x19a1>
mov    0x4c(%esp),%eax
mov    %eax,0x8057178
mov    0x48(%esp),%eax
mov    %eax,0x805717c
test   $0x10,%cl
je     804aa63 <__sprintf_chk@plt+0x15a3>
mov    0x34(%esp),%eax
or     0x38(%esp),%eax
jne    804ab58 <__sprintf_chk@plt+0x1698>
mov    0x8057750,%eax
test   $0x8,%ah
mov    %eax,%edi
je     804a979 <__sprintf_chk@plt+0x14b9>
test   $0x1,%bl
mov    $0x804cb90,%eax
movb   $0x0,0x80576f8
je     8049cd4 <__sprintf_chk@plt+0x814>
mov    $0x804cc50,%eax
mov    %eax,0x8057640
mov    %edi,%eax
and    $0xfffffffe,%ebx
and    $0x7,%eax
lea    -0x1(%eax),%edx
test   %eax,%edx
mov    %ebx,0x805774c
jne    804b292 <__sprintf_chk@plt+0x1dd2>
mov    %edi,%eax
and    $0x18,%eax
lea    -0x1(%eax),%edx
test   %eax,%edx
jne    804b252 <__sprintf_chk@plt+0x1d92>
mov    %edi,%eax
and    $0x60,%eax
lea    -0x1(%eax),%edx
test   %eax,%edx
jne    804b212 <__sprintf_chk@plt+0x1d52>
mov    %edi,%eax
and    $0x3000,%eax
lea    -0x1(%eax),%edx
test   %eax,%edx
jne    804b1d9 <__sprintf_chk@plt+0x1d19>
mov    0x805774c,%eax
and    $0x4002,%eax
lea    -0x1(%eax),%edx
test   %eax,%edx
jne    804a30d <__sprintf_chk@plt+0xe4d>
mov    0x8057748,%eax
mov    %eax,%edx
and    $0x4002,%edx
lea    -0x1(%edx),%ecx
test   %edx,%ecx
jne    804a30d <__sprintf_chk@plt+0xe4d>
test   $0x4,%ah
mov    0x8057750,%edi
je     8049d68 <__sprintf_chk@plt+0x8a8>
test   $0x200,%edi
je     804ae85 <__sprintf_chk@plt+0x19c5>
mov    0x805774c,%edx
test   $0x2,%dl
je     8049d83 <__sprintf_chk@plt+0x8c3>
and    $0xfffffffd,%edx
movb   $0x1,0x8057645
mov    %edx,0x805774c
test   $0x2,%al
je     8049d96 <__sprintf_chk@plt+0x8d6>
and    $0xfffffffd,%eax
movb   $0x1,0x8057644
mov    %eax,0x8057748
test   $0x1,%edi
je     8049dc5 <__sprintf_chk@plt+0x905>
xor    %eax,%eax
movzbl 0x8057540(%eax),%edx
add    $0x1,%eax
movzbl 0x8053760(%edx),%edx
mov    %dl,0x805753f(%eax)
cmp    $0x100,%eax
jne    8049da0 <__sprintf_chk@plt+0x8e0>
movb   $0x1,0x8057740
test   $0x40,%edi
je     804a9f3 <__sprintf_chk@plt+0x1533>
call   8048fd0 <__ctype_toupper_loc@plt>
mov    (%eax),%ecx
xor    %eax,%eax
lea    0x0(%esi),%esi
movzbl 0x8057540(%eax),%edx
add    $0x1,%eax
mov    (%ecx,%edx,4),%edx
mov    %dl,0x805753f(%eax)
cmp    $0x100,%eax
jne    8049de0 <__sprintf_chk@plt+0x920>
movb   $0x1,0x8057740
test   $0x2,%edi
je     804a9bf <__sprintf_chk@plt+0x14ff>
xor    %eax,%eax
nop
movzbl 0x8057540(%eax),%edx
add    $0x1,%eax
movzbl 0x8053960(%edx),%edx
mov    %dl,0x805753f(%eax)
cmp    $0x100,%eax
jne    8049e10 <__sprintf_chk@plt+0x950>
movb   $0x1,0x8057740
movb   $0x25,0x8057172
movb   $0x40,0x8057171
mov    0x8057794,%eax
test   %eax,%eax
je     804b38a <__sprintf_chk@plt+0x1eca>
mov    0x805774c,%edx
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
call   804d810 <__sprintf_chk@plt+0x4350>
test   %eax,%eax
js     804b442 <__sprintf_chk@plt+0x1f82>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
call   80493e0 <lseek64@plt>
mov    %edx,%ecx
not    %ecx
shr    $0x1f,%ecx
test   %edx,%edx
mov    %cl,0x805770c
js     804b2d2 <__sprintf_chk@plt+0x1e12>
mov    %edx,0x8057704
mov    %eax,0x8057700
call   8049330 <__errno_location@plt>
mov    0x8057790,%edx
test   %edx,%edx
mov    %eax,0x44(%esp)
mov    (%eax),%eax
mov    %eax,0x8057708
je     804b5e2 <__sprintf_chk@plt+0x2122>
mov    0x8057750,%ecx
mov    %ecx,%eax
and    $0x1000,%eax
cmp    $0x1,%eax
mov    %ecx,%eax
sbb    %ebx,%ebx
and    $0x40,%ebx
or     0x8057748,%ebx
shr    $0x6,%eax
and    $0x80,%eax
or     %eax,%ebx
mov    0x805776c,%eax
or     0x8057768,%eax
jne    804aa2f <__sprintf_chk@plt+0x156f>
and    $0x200,%ecx
cmp    $0x1,%ecx
sbb    %eax,%eax
and    $0x200,%eax
or     %eax,%ebx
or     $0x1,%ebx
movl   $0x1b6,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x1,(%esp)
call   804d810 <__sprintf_chk@plt+0x4350>
test   %eax,%eax
js     804b594 <__sprintf_chk@plt+0x20d4>
mov    0x805776c,%ebx
mov    0x8057768,%esi
mov    %ebx,%eax
or     %esi,%eax
je     8049f6c <__sprintf_chk@plt+0xaac>
testb  $0x2,0x8057751
je     804abbb <__sprintf_chk@plt+0x16fb>
call   804d880 <__sprintf_chk@plt+0x43c0>
mov    0x8057788,%ebx
mov    %eax,0x8057710
mov    0x805778c,%eax
mov    %edx,0x8057714
lea    0x3(%ebx,%eax,2),%eax
mov    %eax,(%esp)
call   8049200 <malloc@plt>
test   %eax,%eax
mov    %eax,0x8057530
je     804b544 <__sprintf_chk@plt+0x2084>
mov    0x805778c,%ecx
xor    %edx,%edx
mov    0x8057530,%eax
lea    0x1(%eax,%ecx,1),%ebx
mov    %ebx,%eax
div    %ecx
sub    %edx,%ebx
testb  $0x8,0x8057751
mov    %ebx,0x4c(%esp)
jne    804b186 <__sprintf_chk@plt+0x1cc6>
mov    0x4c(%esp),%eax
movl   $0x0,0x805752c
00
mov    %eax,0x80576e8
sub    $0x1,%ecx
cmp    $0x3,%ecx
jbe    804b830 <__sprintf_chk@plt+0x2370>
mov    0x80576e8,%eax
mov    0x805777c,%ebx
add    0x8057784,%eax
mov    0x8057778,%ecx
movl   $0x1010101,(%eax)
mov    %ebx,%eax
or     %ecx,%eax
jne    804a017 <__sprintf_chk@plt+0xb57>
cmpl   $0x0,0x8057770
je     804a0f8 <__sprintf_chk@plt+0xc38>
mov    0x8057788,%eax
mov    0x8057704,%edx
movl   $0x8057770,0xc(%esp)
mov    0x8057770,%esi
mov    %ecx,(%esp)
mov    %eax,%edi
mov    %eax,0x58(%esp)
mov    0x8057700,%eax
mov    %edx,0x54(%esp)
mov    0x8057794,%edx
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x50(%esp)
mov    0x4c(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,0x10(%esp)
xor    %eax,%eax
call   804ccd0 <__sprintf_chk@plt+0x3810>
mov    0x8057700,%edi
mov    %edi,0x48(%esp)
mov    0x8057704,%edi
or     %eax,%edx
mov    %edi,0x3c(%esp)
jne    804a0b1 <__sprintf_chk@plt+0xbf1>
cmpb   $0x0,0x80576f9
mov    0x38(%esp),%ecx
jne    804a0f8 <__sprintf_chk@plt+0xc38>
mov    0x58(%esp),%eax
xor    %edi,%edi
add    0x50(%esp),%esi
adc    0x54(%esp),%edi
imul   0x58(%esp),%ebx
mul    %ecx
add    %ebx,%edx
add    %eax,%esi
adc    %edx,%edi
cmp    0x3c(%esp),%edi
je     804b50b <__sprintf_chk@plt+0x204b>
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053330,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x805776c,%eax
mov    0x8057768,%edx
mov    0x8057760,%ecx
mov    %eax,%edi
or     %edx,%edi
jne    804a34b <__sprintf_chk@plt+0xe8b>
mov    %ecx,%edi
or     0x8057764,%edi
jne    804a34b <__sprintf_chk@plt+0xe8b>
mov    0x805717c,%eax
or     0x8057178,%eax
jne    804a13b <__sprintf_chk@plt+0xc7b>
cmpl   $0x0,0x8057754
je     804acd7 <__sprintf_chk@plt+0x1817>
mov    0x8057750,%eax
movl   $0x0,0x3c(%esp)
movl   $0x0,0x48(%esp)
mov    %eax,%ecx
lea    0x0(%esi),%esi
mov    0x8057178,%eax
mov    0x8057754,%ebx
mov    0x805717c,%edx
mov    0x8057720,%esi
mov    0x8057724,%edi
add    0x8057728,%esi
mov    %eax,0x58(%esp)
adc    0x805772c,%edi
xor    %eax,%eax
test   %ebx,%ebx
mov    %edx,0x5c(%esp)
setne  %al
xor    %edx,%edx
add    0x58(%esp),%eax
adc    0x5c(%esp),%edx
cmp    %edx,%edi
ja     804a400 <__sprintf_chk@plt+0xf40>
jb     804a1ac <__sprintf_chk@plt+0xcec>
cmp    %eax,%esi
jae    804a400 <__sprintf_chk@plt+0xf40>
mov    %ecx,%eax
and    $0x500,%eax
cmp    $0x500,%eax
je     804a674 <__sprintf_chk@plt+0x11b4>
cmp    0x5c(%esp),%edi
jb     804a580 <__sprintf_chk@plt+0x10c0>
ja     804a1d6 <__sprintf_chk@plt+0xd16>
cmp    0x58(%esp),%esi
xchg   %ax,%ax
jb     804a580 <__sprintf_chk@plt+0x10c0>
mov    %ebx,0x8(%esp)
mov    0x4c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   *0x8057640
test   %eax,%eax
mov    %eax,%esi
js     804a6a0 <__sprintf_chk@plt+0x11e0>
cmpb   $0x0,0x8057645
jne    804a833 <__sprintf_chk@plt+0x1373>
test   %esi,%esi
je     804a849 <__sprintf_chk@plt+0x1389>
mov    %esi,%ebx
mov    %esi,%eax
sar    $0x1f,%ebx
mov    %ebx,%edx
add    0x8057700,%eax
adc    0x8057704,%edx
mov    %eax,0x8057700
cmp    %edx,%ebx
mov    %edx,0x8057704
ja     804a238 <__sprintf_chk@plt+0xd78>
jb     804a23f <__sprintf_chk@plt+0xd7f>
cmp    %eax,%esi
jbe    804a23f <__sprintf_chk@plt+0xd7f>
movb   $0x1,0x80576f9
mov    0x8057788,%ebx
cmp    %esi,%ebx
jbe    804a590 <__sprintf_chk@plt+0x10d0>
mov    0x8057750,%eax
addl   $0x1,0x8057728
adcl   $0x0,0x805772c
test   $0x4,%ah
mov    %esi,0x48(%esp)
je     804a299 <__sprintf_chk@plt+0xdd9>
test   $0x1,%ah
jne    804a293 <__sprintf_chk@plt+0xdd3>
mov    %ebx,%edx
sub    %esi,%edx
test   $0x18,%al
mov    0x4c(%esp),%eax
lea    (%eax,%esi,1),%ecx
jne    804a96f <__sprintf_chk@plt+0x14af>
xor    %eax,%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,(%esp)
call   8049310 <memset@plt>
mov    %esi,0x48(%esp)
mov    %ebx,%esi
mov    0x80576e8,%edi
cmp    %edi,0x4c(%esp)
je     804a5b6 <__sprintf_chk@plt+0x10f6>
cmpb   $0x0,0x8057740
je     804a2d4 <__sprintf_chk@plt+0xe14>
test   %esi,%esi
je     804a2d4 <__sprintf_chk@plt+0xe14>
mov    0x4c(%esp),%edx
lea    (%edx,%esi,1),%ecx
lea    0x0(%esi),%esi
movzbl (%edx),%eax
add    $0x1,%edx
movzbl 0x8057540(%eax),%eax
mov    %al,-0x1(%edx)
cmp    %ecx,%edx
jne    804a2c0 <__sprintf_chk@plt+0xe00>
mov    0x8057750,%ebx
mov    0x4c(%esp),%ecx
test   $0x80,%bl
jne    804a7ce <__sprintf_chk@plt+0x130e>
test   $0x8,%bl
jne    804a7ba <__sprintf_chk@plt+0x12fa>
and    $0x10,%ebx
je     804a600 <__sprintf_chk@plt+0x1140>
mov    %ecx,%eax
mov    %esi,%edx
call   804d4c0 <__sprintf_chk@plt+0x4000>
mov    0x8057750,%ecx
jmp    804a158 <__sprintf_chk@plt+0xc98>
movl   $0x5,0x8(%esp)
movl   $0x80531b8,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x8057748,%eax
jmp    8049d51 <__sprintf_chk@plt+0x891>
mov    %ecx,0x64(%esp)
mov    0x80576e8,%ecx
mov    0x40(%esp),%edi
mov    %edx,(%esp)
mov    0x8057790,%edx
mov    %eax,0x4(%esp)
mov    $0x1,%eax
mov    %ecx,0x10(%esp)
mov    0x8057784,%ecx
mov    %edi,0xc(%esp)
mov    %ecx,0x8(%esp)
call   804ccd0 <__sprintf_chk@plt+0x3810>
mov    %edx,%edi
mov    %eax,%ebx
or     %eax,%edi
mov    %edx,%esi
jne    804aae5 <__sprintf_chk@plt+0x1625>
mov    0x64(%esp),%eax
test   %eax,%eax
je     804a121 <__sprintf_chk@plt+0xc61>
mov    %eax,0x8(%esp)
mov    0x80576e8,%eax
mov    %esi,%edi
movl   $0x0,0x4(%esp)
mov    %ebx,%esi
mov    %eax,(%esp)
call   8049310 <memset@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
or     %esi,%eax
je     804afe0 <__sprintf_chk@plt+0x1b20>
mov    0x8057784,%ebx
mov    0x80576e8,%eax
mov    %ebx,%edx
call   804d100 <__sprintf_chk@plt+0x3c40>
cmp    %eax,%ebx
jne    804aff8 <__sprintf_chk@plt+0x1b38>
add    $0xffffffff,%esi
adc    $0xffffffff,%edi
mov    %edi,%eax
or     %esi,%eax
jne    804a3c0 <__sprintf_chk@plt+0xf00>
cmpl   $0x0,0x64(%esp)
jne    804a3c0 <__sprintf_chk@plt+0xf00>
jmp    804a121 <__sprintf_chk@plt+0xc61>
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,%edi
cmpb   $0x0,0x8057539
je     804a44d <__sprintf_chk@plt+0xf8d>
test   $0x8,%edi
jne    804b51a <__sprintf_chk@plt+0x205a>
test   $0x10,%edi
jne    804b7b0 <__sprintf_chk@plt+0x22f0>
mov    0x80576e4,%edx
movzbl 0x8057538,%ebx
mov    0x80576e8,%ecx
lea    0x1(%edx),%eax
cmp    0x8057784,%eax
mov    %eax,0x80576e4
mov    %bl,(%ecx,%edx,1)
jae    804b6e5 <__sprintf_chk@plt+0x2225>
test   $0x8,%edi
je     804a4a5 <__sprintf_chk@plt+0xfe5>
mov    0x80576e0,%ebx
test   %ebx,%ebx
je     804a4e4 <__sprintf_chk@plt+0x1024>
cmp    %ebx,0x8057780
ja     804a478 <__sprintf_chk@plt+0xfb8>
jmp    804a4b5 <__sprintf_chk@plt+0xff5>
add    $0x1,%ebx
cmp    0x8057780,%ebx
jae    804a4a5 <__sprintf_chk@plt+0xfe5>
mov    0x80576e4,%edx
movzbl 0x8057171,%ecx
mov    0x80576e8,%esi
lea    0x1(%edx),%eax
cmp    0x8057784,%eax
mov    %eax,0x80576e4
mov    %cl,(%esi,%edx,1)
jb     804a46d <__sprintf_chk@plt+0xfad>
call   804d300 <__sprintf_chk@plt+0x3e40>
jmp    804a46d <__sprintf_chk@plt+0xfad>
mov    0x8057750,%eax
cmpl   $0x0,0x80576e0
mov    %eax,%edi
je     804a4e4 <__sprintf_chk@plt+0x1024>
and    $0x10,%edi
je     804a4e4 <__sprintf_chk@plt+0x1024>
mov    0x80576e4,%edx
movzbl 0x8057172,%ebx
mov    0x80576e8,%ecx
lea    0x1(%edx),%eax
cmp    0x8057784,%eax
mov    %eax,0x80576e4
mov    %bl,(%ecx,%edx,1)
jae    804b6db <__sprintf_chk@plt+0x221b>
mov    0x80576e4,%edx
test   %edx,%edx
jne    804b0fa <__sprintf_chk@plt+0x1c3a>
cmpb   $0x0,0x8057758
jne    804ad73 <__sprintf_chk@plt+0x18b3>
mov    0x8057750,%eax
test   $0x40,%ah
mov    %eax,%edi
jne    804aee2 <__sprintf_chk@plt+0x1a22>
and    $0x8000,%edi
je     804a539 <__sprintf_chk@plt+0x1079>
mov    0x44(%esp),%ebx
jmp    804a529 <__sprintf_chk@plt+0x1069>
lea    0x0(%esi),%esi
cmpl   $0x4,(%ebx)
jne    804b41e <__sprintf_chk@plt+0x1f5e>
movl   $0x1,(%esp)
call   80492b0 <fsync@plt>
test   %eax,%eax
jne    804a520 <__sprintf_chk@plt+0x1060>
mov    0x805717c,%edx
mov    0x8057178,%eax
mov    %edx,%edi
or     %eax,%edi
je     804b1c7 <__sprintf_chk@plt+0x1d07>
add    $0x1,%edx
je     804ad65 <__sprintf_chk@plt+0x18a5>
cmpb   $0x0,0x8057645
jne    804b40e <__sprintf_chk@plt+0x1f4e>
cmpb   $0x0,0x8057644
jne    804b3fb <__sprintf_chk@plt+0x1f3b>
mov    0x3c(%esp),%eax
call   804ccb0 <__sprintf_chk@plt+0x37f0>
lea    0x0(%esi),%esi
mov    0x8057788,%eax
mov    %eax,0x8(%esp)
jmp    804a1da <__sprintf_chk@plt+0xd1a>
xchg   %ax,%ax
addl   $0x1,0x8057720
mov    0x80576e8,%edi
adcl   $0x0,0x8057724
cmp    %edi,0x4c(%esp)
movl   $0x0,0x48(%esp)
jne    804a2a9 <__sprintf_chk@plt+0xde9>
mov    0x4c(%esp),%eax
mov    %esi,%edx
xor    %ebx,%ebx
call   804d100 <__sprintf_chk@plt+0x3c40>
add    %eax,0x8057718
adc    %ebx,0x805771c
cmp    %esi,%eax
jne    804b130 <__sprintf_chk@plt+0x1c70>
cmp    0x8057788,%esi
je     804aec9 <__sprintf_chk@plt+0x1a09>
addl   $0x1,0x8057738
adcl   $0x0,0x805773c
mov    0x8057750,%ecx
jmp    804a158 <__sprintf_chk@plt+0xc98>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
jmp    804a611 <__sprintf_chk@plt+0x1151>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     804a669 <__sprintf_chk@plt+0x11a9>
mov    0x80576e8,%eax
mov    0x8057784,%edx
mov    0x80576e4,%edi
mov    %ecx,0x4(%esp)
mov    %ecx,0x58(%esp)
mov    %edx,%ebx
sub    %edi,%ebx
cmp    %ebx,%esi
cmovbe %esi,%ebx
add    %edi,%eax
mov    %ebx,0x8(%esp)
sub    %ebx,%esi
mov    %eax,(%esp)
mov    %edx,0x50(%esp)
call   8049080 <memcpy@plt>
mov    0x58(%esp),%ecx
mov    0x50(%esp),%edx
add    %ebx,%ecx
add    %edi,%ebx
cmp    %ebx,%edx
mov    %ebx,0x80576e4
ja     804a608 <__sprintf_chk@plt+0x1148>
mov    %ecx,0x58(%esp)
call   804d300 <__sprintf_chk@plt+0x3e40>
test   %esi,%esi
mov    0x58(%esp),%ecx
jne    804a60c <__sprintf_chk@plt+0x114c>
mov    0x8057750,%ecx
jmp    804a158 <__sprintf_chk@plt+0xc98>
and    $0x18,%ecx
mov    0x8057788,%edx
cmp    $0x1,%ecx
sbb    %eax,%eax
not    %eax
and    $0x20,%eax
mov    %eax,0x4(%esp)
mov    0x4c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049310 <memset@plt>
jmp    804a1be <__sprintf_chk@plt+0xcfe>
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805357c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
mov    0x8057750,%ecx
test   $0x1,%ch
je     804b4fc <__sprintf_chk@plt+0x203c>
call   804bfe0 <__sprintf_chk@plt+0x2b20>
mov    0x8057788,%ebx
xor    %ecx,%ecx
sub    0x48(%esp),%ebx
xor    %eax,%eax
mov    %ecx,0x54(%esp)
mov    %ebx,%edx
mov    %ebx,0x50(%esp)
call   804c780 <__sprintf_chk@plt+0x32c0>
cmpb   $0x0,0x805770c
jne    804a855 <__sprintf_chk@plt+0x1395>
mov    0x8057708,%eax
cmp    $0x1d,%eax
je     804a799 <__sprintf_chk@plt+0x12d9>
mov    0x44(%esp),%edi
mov    %eax,(%edi)
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805356c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
movb   $0x0,0x805770c
movl   $0x1d,0x8057708
00
movl   $0x1,0x3c(%esp)
mov    0x8057750,%ecx
test   $0x4,%ch
je     804a158 <__sprintf_chk@plt+0xc98>
cmpl   $0x0,0x48(%esp)
jne    804a158 <__sprintf_chk@plt+0xc98>
xor    %esi,%esi
jmp    804a23f <__sprintf_chk@plt+0xd7f>
mov    %ecx,%eax
mov    %esi,%edx
call   804d3c0 <__sprintf_chk@plt+0x3f00>
mov    0x8057750,%ecx
jmp    804a158 <__sprintf_chk@plt+0xc98>
cmpb   $0x0,0x8057539
je     804a7f0 <__sprintf_chk@plt+0x1330>
movzbl 0x8057538,%eax
mov    %ecx,%edx
add    $0x1,%esi
lea    -0x1(%ecx),%ecx
movb   $0x0,0x8057539
mov    %al,-0x1(%edx)
test   $0x1,%esi
je     804a80b <__sprintf_chk@plt+0x134b>
sub    $0x1,%esi
movzbl (%ecx,%esi,1),%eax
movb   $0x1,0x8057539
mov    %al,0x8057538
mov    %esi,%edx
shr    %edx
lea    (%ecx,%esi,1),%eax
je     804a82b <__sprintf_chk@plt+0x136b>
mov    %ecx,0x58(%esp)
movzbl -0x2(%eax),%ecx
sub    $0x2,%eax
mov    %cl,0x2(%eax)
sub    $0x1,%edx
jne    804a818 <__sprintf_chk@plt+0x1358>
mov    0x58(%esp),%ecx
add    $0x1,%ecx
jmp    804a2e7 <__sprintf_chk@plt+0xe27>
mov    %eax,%ecx
mov    %eax,%edx
sar    $0x1f,%ecx
xor    %eax,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
test   %esi,%esi
jne    804a20e <__sprintf_chk@plt+0xd4e>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    804a402 <__sprintf_chk@plt+0xf42>
mov    0x54(%esp),%edi
mov    0x50(%esp),%esi
mov    %edi,%edx
mov    %esi,%eax
add    0x8057700,%eax
adc    0x8057704,%edx
mov    %eax,0x58(%esp)
cmp    %edx,%edi
mov    %edx,0x5c(%esp)
mov    %eax,0x8057700
mov    %edx,0x8057704
jae    804aa86 <__sprintf_chk@plt+0x15c6>
mov    0x5c(%esp),%eax
shr    $0x1f,%eax
or     %al,0x80576f9
jne    804aa99 <__sprintf_chk@plt+0x15d9>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
call   80493e0 <lseek64@plt>
test   %edx,%edx
mov    %eax,%edi
mov    %edx,%eax
js     804a737 <__sprintf_chk@plt+0x1277>
cmp    %eax,0x5c(%esp)
mov    %edi,%edx
mov    %eax,%ecx
je     804b535 <__sprintf_chk@plt+0x2075>
mov    0x58(%esp),%esi
mov    0x5c(%esp),%edi
sub    %edx,%esi
sbb    %ecx,%edi
mov    %esi,%edx
test   %edi,%edi
mov    %edi,%ecx
js     804af28 <__sprintf_chk@plt+0x1a68>
cmp    %edi,0x54(%esp)
jg     804a906 <__sprintf_chk@plt+0x1446>
jl     804af28 <__sprintf_chk@plt+0x1a68>
cmp    %esi,%ebx
nop
jb     804af28 <__sprintf_chk@plt+0x1a68>
mov    0x8057794,%eax
mov    %edx,(%esp)
xor    %edx,%edx
movl   $0x1,0x8(%esp)
mov    %ecx,0x4(%esp)
call   804c680 <__sprintf_chk@plt+0x31c0>
test   %edx,%edx
jns    804a799 <__sprintf_chk@plt+0x12d9>
mov    0x44(%esp),%eax
cmpl   $0x0,(%eax)
jne    804a737 <__sprintf_chk@plt+0x1277>
movl   $0x5,0x8(%esp)
movl   $0x80533ac,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    804a737 <__sprintf_chk@plt+0x1277>
mov    $0x20,%eax
jmp    804a283 <__sprintf_chk@plt+0xdc3>
test   $0x1,%bl
jne    804aaef <__sprintf_chk@plt+0x162f>
mov    0x805777c,%eax
or     0x8057778,%eax
jne    804a9ae <__sprintf_chk@plt+0x14ee>
mov    0x8057178,%eax
mov    0x805717c,%edx
add    $0xffffffff,%eax
adc    $0xffffffff,%edx
cmp    $0xffffffff,%edx
jb     804a9ae <__sprintf_chk@plt+0x14ee>
cmp    $0xfffffffd,%eax
ja     804af78 <__sprintf_chk@plt+0x1ab8>
movb   $0x1,0x80576f8
mov    $0x804cb90,%eax
jmp    8049cd4 <__sprintf_chk@plt+0x814>
and    $0x4,%edi
je     8049e43 <__sprintf_chk@plt+0x983>
xor    %eax,%eax
lea    0x0(%esi),%esi
movzbl 0x8057540(%eax),%edx
add    $0x1,%eax
movzbl 0x8053860(%edx),%edx
mov    %dl,0x805753f(%eax)
cmp    $0x100,%eax
jne    804a9d0 <__sprintf_chk@plt+0x1510>
jmp    8049e2e <__sprintf_chk@plt+0x96e>
test   $0x20,%edi
je     8049e01 <__sprintf_chk@plt+0x941>
nop
call   8049480 <__ctype_tolower_loc@plt>
mov    (%eax),%ecx
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x8057540(%eax),%edx
add    $0x1,%eax
mov    (%ecx,%edx,4),%edx
mov    %dl,0x805753f(%eax)
cmp    $0x100,%eax
jne    804aa10 <__sprintf_chk@plt+0x1550>
jmp    8049dfa <__sprintf_chk@plt+0x93a>
mov    %ebx,%eax
or     $0x2,%eax
mov    %edx,0x4(%esp)
movl   $0x1b6,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,(%esp)
call   804d810 <__sprintf_chk@plt+0x4350>
mov    0x8057790,%edx
test   %eax,%eax
jns    8049f4d <__sprintf_chk@plt+0xa8d>
jmp    8049f26 <__sprintf_chk@plt+0xa66>
mov    0x34(%esp),%edi
mov    0x38(%esp),%esi
mov    %edi,%eax
or     %esi,%eax
je     8049cae <__sprintf_chk@plt+0x7ee>
mov    %esi,0x8057768
mov    %edi,0x805776c
jmp    8049cae <__sprintf_chk@plt+0x7ee>
ja     804aa92 <__sprintf_chk@plt+0x15d2>
cmp    0x58(%esp),%ebx
jbe    804a888 <__sprintf_chk@plt+0x13c8>
movb   $0x1,0x80576f9
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053354,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    804a780 <__sprintf_chk@plt+0x12c0>
mov    0x8057784,%eax
jmp    804a39c <__sprintf_chk@plt+0xedc>
movb   $0x0,0x80576f8
jmp    8049ccf <__sprintf_chk@plt+0x80f>
mov    %ecx,0x58(%esp)
mov    0x8057788,%esi
xor    %edi,%edi
mov    0x3c(%esp),%ecx
mov    0x44(%esp),%eax
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x3c(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,0x8057778
mov    0x44(%esp),%eax
mov    %edx,0x805777c
mov    %eax,(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    0x58(%esp),%ecx
mov    %eax,0x8057770
jmp    80497eb <__sprintf_chk@plt+0x32b>
mov    %ecx,0x58(%esp)
mov    0x8057784,%esi
xor    %edi,%edi
mov    0x34(%esp),%ecx
mov    0x38(%esp),%eax
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x34(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,0x8057768
mov    0x38(%esp),%eax
mov    %edx,0x805776c
mov    %eax,(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    0x58(%esp),%ecx
mov    %eax,0x8057760
mov    %edx,0x8057764
jmp    8049cae <__sprintf_chk@plt+0x7ee>
mov    0x8057784,%edi
mov    %ebx,%ecx
movl   $0x0,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0x7fffffff,0x4(%esp)
mov    %edi,%eax
imul   %edi,%ecx
mul    %esi
mov    %edi,0x8(%esp)
add    %ecx,%edx
add    0x8057760,%eax
adc    0x8057764,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
call   8051b60 <__sprintf_chk@plt+0x86a0>
cmp    %edx,%ebx
jb     804ac16 <__sprintf_chk@plt+0x1756>
ja     804af94 <__sprintf_chk@plt+0x1ad4>
cmp    %eax,%esi
lea    0x0(%esi,%eiz,1),%esi
ja     804af94 <__sprintf_chk@plt+0x1ad4>
mov    0x58(%esp),%eax
mov    0x5c(%esp),%edx
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   8049360 <ftruncate64@plt>
test   %eax,%eax
je     8049f6c <__sprintf_chk@plt+0xaac>
mov    0x44(%esp),%eax
mov    (%eax),%ebx
mov    0x40(%esp),%eax
movl   $0x1,0x4(%esp)
movl   $0x3,(%esp)
mov    %eax,0x8(%esp)
call   8049170 <__fxstat64@plt>
test   %eax,%eax
jne    804b62e <__sprintf_chk@plt+0x216e>
mov    0x74(%esp),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
je     804ac7f <__sprintf_chk@plt+0x17bf>
cmp    $0x8000,%eax
jne    8049f6c <__sprintf_chk@plt+0xaac>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053260,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    0x5c(%esp),%edi
mov    %esi,0x14(%esp)
mov    0x58(%esp),%esi
mov    %ebx,0x4(%esp)
movl   $0x1,(%esp)
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    8049f6c <__sprintf_chk@plt+0xaac>
movl   $0x0,0x3c(%esp)
cmpb   $0x0,0x8057645
jne    804b493 <__sprintf_chk@plt+0x1fd3>
cmpb   $0x0,0x8057644
je     804a571 <__sprintf_chk@plt+0x10b1>
xor    %edx,%edx
xor    %ecx,%ecx
mov    $0x1,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
test   %al,%al
jne    804a571 <__sprintf_chk@plt+0x10b1>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053408,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
movl   $0x1,0x3c(%esp)
jmp    804a571 <__sprintf_chk@plt+0x10b1>
add    $0x1,%eax
jne    804a557 <__sprintf_chk@plt+0x1097>
jmp    804a571 <__sprintf_chk@plt+0x10b1>
mov    0x40(%esp),%eax
movl   $0x1,0x4(%esp)
movl   $0x3,(%esp)
mov    %eax,0x8(%esp)
call   8049170 <__fxstat64@plt>
test   %eax,%eax
jne    804b73c <__sprintf_chk@plt+0x227c>
mov    0x74(%esp),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
jne    804a4ff <__sprintf_chk@plt+0x103f>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
movl   $0x1,(%esp)
call   80493e0 <lseek64@plt>
cmp    0x94(%esp),%edx
mov    %eax,%ebx
mov    %edx,%esi
jl     804a4ff <__sprintf_chk@plt+0x103f>
jg     804adef <__sprintf_chk@plt+0x192f>
cmp    0x90(%esp),%eax
jbe    804a4ff <__sprintf_chk@plt+0x103f>
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
call   8049360 <ftruncate64@plt>
test   %eax,%eax
je     804a4ff <__sprintf_chk@plt+0x103f>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x80533d4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049100 <dcgettext@plt>
mov    %edi,0x14(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804b179 <__sprintf_chk@plt+0x1cb9>
cmpl   $0xffffffff,0x4c(%esp)
jne    8049c85 <__sprintf_chk@plt+0x7c5>
lea    0x0(%esi,%eiz,1),%esi
jmp    8049c97 <__sprintf_chk@plt+0x7d7>
cmpl   $0xffffffff,0x4c(%esp)
jne    80497ff <__sprintf_chk@plt+0x33f>
jmp    8049c97 <__sprintf_chk@plt+0x7d7>
movl   $0x5,0x8(%esp)
movl   $0x80531dc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x8057748,%eax
mov    0x8057750,%edi
jmp    8049d68 <__sprintf_chk@plt+0x8a8>
addl   $0x1,0x8057730
adcl   $0x0,0x8057734
mov    0x8057750,%ecx
jmp    804a158 <__sprintf_chk@plt+0xc98>
movl   $0x1,(%esp)
call   8049450 <fdatasync@plt>
mov    0x8057750,%edi
test   %eax,%eax
je     804a50f <__sprintf_chk@plt+0x104f>
mov    0x44(%esp),%eax
mov    (%eax),%eax
cmp    $0x16,%eax
jne    804b67c <__sprintf_chk@plt+0x21bc>
orl    $0x8000,0x8057750
00
mov    0x8057750,%eax
mov    %eax,%edi
jmp    804a50f <__sprintf_chk@plt+0x104f>
xor    %ecx,%ecx
jmp    8049a9f <__sprintf_chk@plt+0x5df>
movl   $0x5,0x8(%esp)
movl   $0x805337c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x58(%esp)
mov    %ecx,0x5c(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x58(%esp),%edx
mov    0x5c(%esp),%ecx
jmp    804a906 <__sprintf_chk@plt+0x1446>
xor    %edi,%edi
jmp    8049bb2 <__sprintf_chk@plt+0x6f2>
or     %ebx,%ecx
and    $0x40,%ch
jne    804a9ae <__sprintf_chk@plt+0x14ee>
movb   $0x0,0x80576f8
mov    $0x804cb90,%eax
jmp    8049cd4 <__sprintf_chk@plt+0x814>
movl   $0x5,0x8(%esp)
movl   $0x8053210,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %edi,0x14(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x10(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    804ac16 <__sprintf_chk@plt+0x1756>
lea    0x0(%esi,%eiz,1),%esi
mov    0x64(%esp),%ebx
mov    0x80576e8,%eax
mov    %ebx,%edx
call   804d100 <__sprintf_chk@plt+0x3c40>
cmp    %eax,%ebx
je     804a121 <__sprintf_chk@plt+0xc61>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805358d,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
mov    $0x1,%eax
call   804ccb0 <__sprintf_chk@plt+0x37f0>
mov    $0x80535c2,%ebx
mov    0x50(%esp),%eax
mov    %edi,0x2c(%esp)
mov    0x54(%esp),%edx
jmp    804b06f <__sprintf_chk@plt+0x1baf>
xchg   %ax,%ax
add    $0x1,%edi
add    $0x1,%ebx
cmp    %cl,-0x1(%edi)
jne    804b2db <__sprintf_chk@plt+0x1e1b>
movzbl (%ebx),%ecx
test   %cl,%cl
jne    804b060 <__sprintf_chk@plt+0x1ba0>
mov    %eax,0x50(%esp)
mov    %edi,%eax
mov    0x2c(%esp),%edi
movzbl (%eax),%ecx
mov    %edx,0x54(%esp)
test   %cl,%cl
je     804b094 <__sprintf_chk@plt+0x1bd4>
cmp    $0x3d,%cl
jne    804b2e7 <__sprintf_chk@plt+0x1e27>
mov    0x54(%esp),%eax
mov    $0x1,%ecx
or     0x50(%esp),%eax
movzbl 0x64(%esp),%ebx
je     804b0e2 <__sprintf_chk@plt+0x1c22>
mov    0x805778c,%ecx
xor    %edx,%edx
mov    $0x7fffffff,%eax
lea    0x4(%ecx,%ecx,1),%ecx
neg    %ecx
cmp    $0x7ffffffe,%ecx
ja     804b0c7 <__sprintf_chk@plt+0x1c07>
mov    %ecx,%eax
xor    %edx,%edx
cmp    %edx,0x54(%esp)
mov    $0x1,%ecx
ja     804b0e2 <__sprintf_chk@plt+0x1c22>
jb     804b627 <__sprintf_chk@plt+0x2167>
cmp    %eax,0x50(%esp)
jbe    804b627 <__sprintf_chk@plt+0x2167>
mov    0x50(%esp),%eax
or     %ebx,%ecx
mov    %cl,0x64(%esp)
andb   $0x1,0x64(%esp)
mov    %eax,0x30(%esp)
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
mov    0x80576e8,%eax
xor    %ebx,%ebx
call   804d100 <__sprintf_chk@plt+0x3c40>
add    %eax,0x8057718
adc    %ebx,0x805771c
test   %eax,%eax
je     804b124 <__sprintf_chk@plt+0x1c64>
addl   $0x1,0x8057738
adcl   $0x0,0x805773c
cmp    0x80576e4,%eax
je     804a4f2 <__sprintf_chk@plt+0x1032>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x80536fd,0x4(%esp)
mov    %eax,%ebx
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
movl   $0x1,0x3c(%esp)
jmp    804a539 <__sprintf_chk@plt+0x1079>
mov    0x8057784,%ebx
lea    -0x1(%ebx,%ecx,1),%eax
mov    %eax,(%esp)
call   8049200 <malloc@plt>
test   %eax,%eax
mov    %eax,0x805752c
je     804b760 <__sprintf_chk@plt+0x22a0>
mov    0x805778c,%ecx
xor    %edx,%edx
mov    0x805752c,%eax
lea    -0x1(%eax,%ecx,1),%ebx
mov    %ebx,%eax
div    %ecx
sub    %edx,%ebx
mov    %ebx,0x80576e8
jmp    8049fdb <__sprintf_chk@plt+0xb1b>
cmpl   $0x0,0x8057754
jne    804a557 <__sprintf_chk@plt+0x1097>
jmp    804acdf <__sprintf_chk@plt+0x181f>
movl   $0x5,0x8(%esp)
movl   $0x8053198,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    8049d24 <__sprintf_chk@plt+0x864>
movl   $0x5,0x8(%esp)
movl   $0x8053178,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    8049d12 <__sprintf_chk@plt+0x852>
movl   $0x5,0x8(%esp)
movl   $0x8053154,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    8049d02 <__sprintf_chk@plt+0x842>
movl   $0x5,0x8(%esp)
movl   $0x8053124,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    8049cf2 <__sprintf_chk@plt+0x832>
xor    %eax,%eax
xor    %edx,%edx
jmp    8049eb3 <__sprintf_chk@plt+0x9f3>
mov    0x2c(%esp),%edi
mov    %eax,0x50(%esp)
mov    %edx,0x54(%esp)
mov    %edi,%ecx
mov    $0x80535c1,%ebx
jmp    804b2fb <__sprintf_chk@plt+0x1e3b>
add    $0x1,%ecx
add    $0x1,%ebx
cmp    %al,-0x1(%ecx)
jne    804b30e <__sprintf_chk@plt+0x1e4e>
movzbl (%ebx),%eax
test   %al,%al
jne    804b2f0 <__sprintf_chk@plt+0x1e30>
movzbl (%ecx),%ecx
test   %cl,%cl
je     804b35a <__sprintf_chk@plt+0x1e9a>
cmp    $0x3d,%cl
je     804b35a <__sprintf_chk@plt+0x1e9a>
mov    %edi,%ecx
mov    $0x8053567,%ebx
mov    %edi,%edx
jmp    804b32a <__sprintf_chk@plt+0x1e6a>
add    $0x1,%ecx
add    $0x1,%ebx
mov    %edi,%eax
cmp    %al,-0x1(%ecx)
jne    804b6f6 <__sprintf_chk@plt+0x2236>
movzbl (%ebx),%edi
mov    %edi,%eax
test   %al,%al
jne    804b319 <__sprintf_chk@plt+0x1e59>
movzbl (%ecx),%ecx
mov    %edx,%edi
test   %cl,%cl
je     804b345 <__sprintf_chk@plt+0x1e85>
cmp    $0x3d,%cl
jne    804b6f8 <__sprintf_chk@plt+0x2238>
mov    0x50(%esp),%eax
mov    0x54(%esp),%edx
mov    %eax,0x44(%esp)
mov    %edx,0x3c(%esp)
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
mov    0x50(%esp),%ecx
mov    $0x1,%edi
mov    0x54(%esp),%ebx
add    $0xffffffff,%ecx
adc    $0xffffffff,%ebx
cmp    $0x0,%ebx
jbe    804b61a <__sprintf_chk@plt+0x215a>
mov    %edi,%eax
or     %al,0x64(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x8057780
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
movl   $0x5,0x8(%esp)
movl   $0x80536c3,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    0x805774c,%edx
mov    %eax,%ecx
mov    %eax,0x8057794
xor    %eax,%eax
call   804c580 <__sprintf_chk@plt+0x30c0>
jmp    8049e7a <__sprintf_chk@plt+0x9ba>
mov    %eax,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0xa,(%esp)
call   8049400 <sigaction@plt>
cmpl   $0x1,0x64(%esp)
je     8049509 <__sprintf_chk@plt+0x49>
movl   $0xa,0x4(%esp)
movl   $0x8057660,(%esp)
call   8049300 <sigaddset@plt>
jmp    8049509 <__sprintf_chk@plt+0x49>
xor    %edx,%edx
xor    %ecx,%ecx
mov    $0x1,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
jmp    804a571 <__sprintf_chk@plt+0x10b1>
xor    %edx,%edx
xor    %ecx,%ecx
xor    %eax,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
jmp    804a564 <__sprintf_chk@plt+0x10a4>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053726,0x4(%esp)
mov    %eax,%ebx
jmp    804b14f <__sprintf_chk@plt+0x1c8f>
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x80536d2,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    8049e7a <__sprintf_chk@plt+0x9ba>
xor    %edx,%edx
xor    %ecx,%ecx
xor    %eax,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
test   %al,%al
jne    804acec <__sprintf_chk@plt+0x182c>
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053408,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
movl   $0x1,0x3c(%esp)
jmp    804acec <__sprintf_chk@plt+0x182c>
mov    %ecx,%edi
movl   $0x1,0x3c(%esp)
jmp    804a402 <__sprintf_chk@plt+0xf42>
cmp    0x48(%esp),%esi
jne    804a0b1 <__sprintf_chk@plt+0xbf1>
jmp    804a0f8 <__sprintf_chk@plt+0xc38>
mov    $0x8057538,%eax
mov    $0x1,%edx
call   804d3c0 <__sprintf_chk@plt+0x3f00>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    804a44d <__sprintf_chk@plt+0xf8d>
cmp    %edi,0x58(%esp)
jne    804a8d9 <__sprintf_chk@plt+0x1419>
jmp    804a799 <__sprintf_chk@plt+0x12d9>
mov    %ebx,%eax
call   804c350 <__sprintf_chk@plt+0x2e90>
mov    0x8057788,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053294,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    8049fa0 <__sprintf_chk@plt+0xae0>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x80536d2,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    8049f4d <__sprintf_chk@plt+0xa8d>
movl   $0x5,0x8(%esp)
movl   $0x80536e4,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    0x8057748,%edx
mov    %eax,%ecx
mov    %eax,0x8057790
mov    $0x1,%eax
call   804c580 <__sprintf_chk@plt+0x30c0>
jmp    8049f6c <__sprintf_chk@plt+0xaac>
cmp    $0xfffffffe,%ecx
seta   %al
mov    %eax,%edi
jmp    804b376 <__sprintf_chk@plt+0x1eb6>
xor    %ecx,%ecx
jmp    804b0e2 <__sprintf_chk@plt+0x1c22>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805354c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804ac64 <__sprintf_chk@plt+0x17a4>
cmp    $0x26,%eax
je     804af0b <__sprintf_chk@plt+0x1a4b>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805370e,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
movl   $0x1,0x3c(%esp)
jmp    804af0b <__sprintf_chk@plt+0x1a4b>
call   804d300 <__sprintf_chk@plt+0x3e40>
jmp    804a4e4 <__sprintf_chk@plt+0x1024>
call   804d300 <__sprintf_chk@plt+0x3e40>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    804a44d <__sprintf_chk@plt+0xf8d>
mov    %edx,%edi
mov    %edi,%ecx
mov    $0x8053577,%ebx
jmp    804b710 <__sprintf_chk@plt+0x2250>
add    $0x1,%ecx
add    $0x1,%ebx
cmp    %al,-0x1(%ecx)
jne    804b7cb <__sprintf_chk@plt+0x230b>
movzbl (%ebx),%eax
test   %al,%al
jne    804b701 <__sprintf_chk@plt+0x2241>
movzbl (%ecx),%ecx
test   %cl,%cl
je     804b727 <__sprintf_chk@plt+0x2267>
cmp    $0x3d,%cl
jne    804b7cb <__sprintf_chk@plt+0x230b>
mov    0x50(%esp),%eax
mov    0x54(%esp),%edx
mov    %eax,0x38(%esp)
mov    %edx,0x34(%esp)
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805354c,0x4(%esp)
mov    %eax,%ebx
jmp    804b14f <__sprintf_chk@plt+0x1c8f>
mov    %ebx,%eax
call   804c350 <__sprintf_chk@plt+0x2e90>
mov    0x8057784,%ebx
movl   $0x5,0x8(%esp)
movl   $0x80532cc,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    804b1a5 <__sprintf_chk@plt+0x1ce5>
mov    $0x8057538,%eax
mov    $0x1,%edx
call   804d4c0 <__sprintf_chk@plt+0x4000>
mov    0x8057750,%eax
mov    %eax,%edi
jmp    804a44d <__sprintf_chk@plt+0xf8d>
mov    %edi,%ecx
mov    $0x80535c5,%ebx
jmp    804b7df <__sprintf_chk@plt+0x231f>
add    $0x1,%ecx
add    $0x1,%ebx
cmp    %al,-0x1(%ecx)
jne    804b854 <__sprintf_chk@plt+0x2394>
movzbl (%ebx),%eax
test   %al,%al
jne    804b7d4 <__sprintf_chk@plt+0x2314>
movzbl (%ecx),%ecx
test   %cl,%cl
je     804b7f2 <__sprintf_chk@plt+0x2332>
cmp    $0x3d,%cl
jne    804b854 <__sprintf_chk@plt+0x2394>
mov    0x50(%esp),%eax
mov    0x54(%esp),%edx
mov    %eax,0x4c(%esp)
mov    %edx,0x48(%esp)
jmp    8049ab3 <__sprintf_chk@plt+0x5f3>
movl   $0x5,0x8(%esp)
movl   $0x805365d,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x80536b6,0x10(%esp)
jmp    8049880 <__sprintf_chk@plt+0x3c0>
movl   $0x8053740,0xc(%esp)
movl   $0x770,0x8(%esp)
movl   $0x80536f4,0x4(%esp)
movl   $0x8053308,(%esp)
call   8049490 <__assert_fail@plt>
mov    %edi,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053632,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
jmp    80498a0 <__sprintf_chk@plt+0x3e0>
and    $0x4,%cl
mov    $0x80535d9,%eax
mov    $0x80535cb,%ebx
cmove  %eax,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053670,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0x10(%esp)
jmp    8049880 <__sprintf_chk@plt+0x3c0>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80521b0
push   $0x8052140
push   %ecx
push   %esi
push   $0x80494d0
call   80492c0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80571e7,%eax
sub    $0x80571e4,%eax
cmp    $0x6,%eax
ja     804b920 <__sprintf_chk@plt+0x2460>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804b91f <__sprintf_chk@plt+0x245f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80571e4,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80571e4,%eax
sub    $0x80571e4,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804b959 <__sprintf_chk@plt+0x2499>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804b958 <__sprintf_chk@plt+0x2498>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80571e4,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8057268
jne    804b99c <__sprintf_chk@plt+0x24dc>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804b910 <__sprintf_chk@plt+0x2450>
movb   $0x1,0x8057268
leave
repz ret
xchg   %ax,%ax
mov    0x8056f10,%eax
test   %eax,%eax
je     804b9c8 <__sprintf_chk@plt+0x2508>
mov    $0x0,%eax
test   %eax,%eax
je     804b9c8 <__sprintf_chk@plt+0x2508>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8056f10,(%esp)
call   *%eax
leave
jmp    804b940 <__sprintf_chk@plt+0x2480>
nop
jmp    804b940 <__sprintf_chk@plt+0x2480>
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x805764c
ret
lea    0x0(%esi),%esi
mov    0x8057648,%eax
add    $0x1,%eax
mov    %eax,0x8057648
ret
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x80577a0,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     804ba44 <__sprintf_chk@plt+0x2584>
movl   $0x8052228,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8049240 <exit@plt>
movl   $0x8052250,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x805227c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x80523e4,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052608,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x80526fc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052948,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052a68,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052ad4,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052afc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052b24,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052b50,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052b80,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052bbc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052be0,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052c08,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052c2c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052c68,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052c8c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052ccc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052d08,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052d44,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x8053428,0xc(%esp)
movl   $0x8053428,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052e8c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052ebc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    0x80577a0,%eax
mov    %eax,(%esp)
call   804d770 <__sprintf_chk@plt+0x42b0>
movl   $0x5,0x8(%esp)
movl   $0x805342d,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8053444,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805345a,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x8052ef4,0xc(%esp)
movl   $0x805346e,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
mov    0x8057260,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052f1c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   80493a0 <setlocale@plt>
test   %eax,%eax
je     804bf57 <__sprintf_chk@plt+0x2a97>
movl   $0x3,0x8(%esp)
movl   $0x805347c,0x4(%esp)
mov    %eax,(%esp)
call   8049430 <strncmp@plt>
test   %eax,%eax
jne    804bf9b <__sprintf_chk@plt+0x2adb>
mov    0x80577a0,%eax
mov    %eax,(%esp)
call   804d770 <__sprintf_chk@plt+0x42b0>
movl   $0x5,0x8(%esp)
movl   $0x8052fa4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
jmp    804ba3c <__sprintf_chk@plt+0x257c>
mov    0x80577a0,%eax
mov    %eax,(%esp)
call   804d770 <__sprintf_chk@plt+0x42b0>
movl   $0x5,0x8(%esp)
movl   $0x8052f5c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
jmp    804bf57 <__sprintf_chk@plt+0x2a97>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2fc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2ec(%esp)
xor    %eax,%eax
mov    0x8057744,%eax
and    $0x3,%eax
cmp    $0x3,%eax
je     804c149 <__sprintf_chk@plt+0x2c89>
mov    0x805773c,%edx
mov    0x8057738,%eax
mov    0x805772c,%ecx
movl   $0x5,0x8(%esp)
mov    0x8057730,%esi
mov    %edx,0x3c(%esp)
mov    0x8057728,%edx
mov    %eax,0x38(%esp)
mov    0x8057720,%eax
movl   $0x8052fe8,0x4(%esp)
mov    0x8057734,%edi
movl   $0x0,(%esp)
mov    %edx,0x40(%esp)
mov    0x8057724,%edx
mov    %ecx,0x44(%esp)
mov    %eax,0x48(%esp)
mov    %edx,0x4c(%esp)
call   8049100 <dcgettext@plt>
mov    0x38(%esp),%ecx
mov    0x3c(%esp),%ebx
mov    %edi,0x20(%esp)
mov    0x40(%esp),%edx
mov    0x48(%esp),%edi
mov    %ecx,0x24(%esp)
mov    0x4c(%esp),%ebp
mov    0x44(%esp),%ecx
mov    %eax,0x8(%esp)
mov    0x8057204,%eax
mov    %ebx,0x28(%esp)
mov    %esi,0x1c(%esp)
mov    %edx,0x14(%esp)
mov    %ecx,0x18(%esp)
mov    %edi,0xc(%esp)
mov    %ebp,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
mov    0x80576f4,%ebx
mov    0x80576f0,%esi
mov    %ebx,%eax
or     %esi,%eax
je     804c140 <__sprintf_chk@plt+0x2c80>
cmp    $0x0,%ebx
mov    %esi,%eax
jbe    804c0f7 <__sprintf_chk@plt+0x2c37>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
add    $0xf4240,%eax
movl   $0x5,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8053480,0x8(%esp)
movl   $0x8053498,0x4(%esp)
movl   $0x0,(%esp)
call   8049460 <dcngettext@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
testb  $0x1,0x8057744
je     804c168 <__sprintf_chk@plt+0x2ca8>
mov    0x2ec(%esp),%eax
xor    %gs:0x14,%eax
jne    804c34b <__sprintf_chk@plt+0x2e8b>
add    $0x2fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8057718,%eax
lea    0x60(%esp),%ebx
mov    0x805771c,%edx
movl   $0x1,0x18(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x1,0x10(%esp)
movl   $0x0,0x14(%esp)
movl   $0x1d1,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804d910 <__sprintf_chk@plt+0x4450>
mov    0x805771c,%esi
mov    0x8057718,%edi
cmp    $0x0,%esi
mov    %eax,%ebp
mov    %edi,%eax
jbe    804c1e5 <__sprintf_chk@plt+0x2d25>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edi,(%esp)
mov    %esi,0x4(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
add    $0xf4240,%eax
movl   $0x5,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x80534af,0x8(%esp)
movl   $0x80534c6,0x4(%esp)
movl   $0x0,(%esp)
call   8049460 <dcngettext@plt>
mov    %ebp,0x14(%esp)
mov    %edi,0xc(%esp)
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
call   804d880 <__sprintf_chk@plt+0x43c0>
mov    0x8057714,%edi
mov    0x8057710,%esi
cmp    %edi,%edx
mov    %eax,%ecx
mov    %edx,%ebp
jl     804c318 <__sprintf_chk@plt+0x2e58>
jle    804c310 <__sprintf_chk@plt+0x2e50>
mov    %ecx,%eax
mov    %ebp,%edx
sub    %esi,%eax
sbb    %edi,%edx
mov    %eax,0x50(%esp)
test   %edx,%edx
mov    %edx,0x54(%esp)
fildll 0x50(%esp)
js     804c340 <__sprintf_chk@plt+0x2e80>
fstpl  0x58(%esp)
fldl   0x58(%esp)
fdivs  0x8053cf4
mov    %eax,0x18(%esp)
mov    0x8057718,%eax
mov    %edx,0x1c(%esp)
mov    0x805771c,%edx
mov    %ebx,0x8(%esp)
movl   $0x3b9aca00,0x10(%esp)
movl   $0x0,0x14(%esp)
movl   $0x1d1,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
fstpl  0x38(%esp)
call   804d910 <__sprintf_chk@plt+0x4450>
mov    %eax,%ebx
fldl   0x38(%esp)
movl   $0x5,0x8(%esp)
fstpl  0x38(%esp)
movl   $0x80534e7,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8057204,%eax
fldl   0x38(%esp)
fstpl  0xc(%esp)
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    804c149 <__sprintf_chk@plt+0x2c89>
xchg   %ax,%ax
cmp    %esi,%eax
ja     804c255 <__sprintf_chk@plt+0x2d95>
movl   $0x5,0x8(%esp)
movl   $0x80534dc,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
fldz
jmp    804c2c4 <__sprintf_chk@plt+0x2e04>
lea    0x0(%esi),%esi
fadds  0x8053cf0
jmp    804c271 <__sprintf_chk@plt+0x2db1>
call   8049110 <__stack_chk_fail@plt>
sub    $0x2c,%esp
movl   $0x1,0x18(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x1,0x10(%esp)
movl   $0x0,0x14(%esp)
movl   $0x1f1,0xc(%esp)
movl   $0x80572a0,0x8(%esp)
mov    %eax,(%esp)
movl   $0x0,0x4(%esp)
call   804d910 <__sprintf_chk@plt+0x4450>
add    $0x2c,%esp
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
xor    %ebp,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x2c,%esp
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
movl   $0x2c,0x4(%esp)
mov    %esi,(%esp)
call   8049280 <strchr@plt>
mov    0x18(%esp),%edi
nop
mov    %edi,%ecx
mov    %esi,%edx
jmp    804c3db <__sprintf_chk@plt+0x2f1b>
xchg   %ax,%ax
add    $0x1,%edx
add    $0x1,%ecx
cmp    %bl,-0x1(%edx)
jne    804c3f5 <__sprintf_chk@plt+0x2f35>
movzbl (%ecx),%ebx
test   %bl,%bl
jne    804c3d0 <__sprintf_chk@plt+0x2f10>
movzbl (%edx),%edx
test   %dl,%dl
je     804c3ee <__sprintf_chk@plt+0x2f2e>
cmp    $0x2c,%dl
jne    804c3f5 <__sprintf_chk@plt+0x2f35>
mov    0xc(%edi),%edx
test   %edx,%edx
jne    804c3ff <__sprintf_chk@plt+0x2f3f>
cmpb   $0x0,(%edi)
je     804c414 <__sprintf_chk@plt+0x2f54>
add    $0x10,%edi
jmp    804c3c8 <__sprintf_chk@plt+0x2f08>
or     %edx,%ebp
test   %eax,%eax
je     804c40a <__sprintf_chk@plt+0x2f4a>
lea    0x1(%eax),%esi
jmp    804c3b3 <__sprintf_chk@plt+0x2ef3>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   %eax,%eax
je     804c484 <__sprintf_chk@plt+0x2fc4>
sub    %esi,%eax
mov    %eax,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
call   804fb80 <__sprintf_chk@plt+0x66c0>
movl   $0x5,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0x10(%esp)
movl   $0x80534f5,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <error@plt>
movl   $0x1,(%esp)
call   804b9f0 <__sprintf_chk@plt+0x2530>
mov    %esi,(%esp)
call   80492a0 <strlen@plt>
jmp    804c41a <__sprintf_chk@plt+0x2f5a>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x4c,%esp
lea    0x38(%esp),%edx
lea    0x34(%esp),%ecx
movl   $0x80534fc,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0xa,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8050910 <__sprintf_chk@plt+0x7450>
cmp    $0x2,%eax
je     804c4e0 <__sprintf_chk@plt+0x3020>
test   %eax,%eax
jne    804c4e9 <__sprintf_chk@plt+0x3029>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x34(%esp),%eax
cmpb   $0x78,(%eax)
je     804c4f8 <__sprintf_chk@plt+0x3038>
movb   $0x1,(%ebx)
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
xor    %edx,%edx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1,%eax
mov    %ebx,%edx
call   804c490 <__sprintf_chk@plt+0x2fd0>
mov    %eax,%edi
mov    %eax,0x20(%esp)
mov    %edx,%eax
or     %edi,%eax
mov    %edx,0x2c(%esp)
je     804c4ec <__sprintf_chk@plt+0x302c>
mov    0x38(%esp),%esi
mov    %edx,%ebp
mov    0x3c(%esp),%edi
mov    0x20(%esp),%ecx
imul   %esi,%ebp
imul   %edi,%ecx
add    %ebp,%ecx
mov    0x20(%esp),%ebp
mov    %ebp,%eax
mul    %esi
mov    %ebp,0x8(%esp)
mov    %eax,0x20(%esp)
mov    0x2c(%esp),%eax
mov    %edx,0x24(%esp)
add    %ecx,0x24(%esp)
mov    0x24(%esp),%edx
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
xor    %edi,%edx
xor    %esi,%eax
or     %eax,%edx
jne    804c4e9 <__sprintf_chk@plt+0x3029>
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
jmp    804c4d2 <__sprintf_chk@plt+0x3012>
jmp    804c580 <__sprintf_chk@plt+0x30c0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
and    $0xfffdfeff,%edi
jne    804c599 <__sprintf_chk@plt+0x30d9>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x3,0x4(%esp)
mov    %eax,%ebx
mov    %ecx,%ebp
mov    %eax,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
test   %eax,%eax
mov    %eax,%esi
js     804c5da <__sprintf_chk@plt+0x311a>
or     %eax,%edi
cmp    %edi,%eax
je     804c591 <__sprintf_chk@plt+0x30d1>
test   $0x10000,%edi
jne    804c626 <__sprintf_chk@plt+0x3166>
mov    %edi,0x8(%esp)
movl   $0x4,0x4(%esp)
mov    %ebx,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
add    $0x1,%eax
jne    804c591 <__sprintf_chk@plt+0x30d1>
mov    %ebp,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805350a,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804c591 <__sprintf_chk@plt+0x30d1>
lea    0x10(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049170 <__fxstat64@plt>
test   %eax,%eax
jne    804c5da <__sprintf_chk@plt+0x311a>
mov    0x20(%esp),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
je     804c662 <__sprintf_chk@plt+0x31a2>
call   8049330 <__errno_location@plt>
movl   $0x14,(%eax)
jmp    804c5da <__sprintf_chk@plt+0x311a>
and    $0xfffeffff,%edi
cmp    %esi,%edi
je     804c591 <__sprintf_chk@plt+0x30d1>
jmp    804c5c1 <__sprintf_chk@plt+0x3101>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x6c,%esp
mov    %eax,0x18(%esp)
lea    0x28(%esp),%eax
mov    0x80(%esp),%esi
mov    %edx,(%esp)
mov    0x84(%esp),%edi
mov    %eax,0x8(%esp)
movl   $0x801c6d02,0x4(%esp)
call   8049150 <ioctl@plt>
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,%ebp
mov    0x88(%esp),%eax
mov    %eax,0xc(%esp)
call   80493e0 <lseek64@plt>
test   %edx,%edx
mov    %eax,%esi
jns    804c6e0 <__sprintf_chk@plt+0x3220>
add    $0x6c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   %ebp,%ebp
jne    804c6d6 <__sprintf_chk@plt+0x3216>
lea    0x44(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x801c6d02,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x1c(%esp)
call   8049150 <ioctl@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804c6d6 <__sprintf_chk@plt+0x3216>
mov    0x48(%esp),%eax
cmp    %eax,0x2c(%esp)
jne    804c6d6 <__sprintf_chk@plt+0x3216>
mov    0x58(%esp),%eax
cmp    %eax,0x3c(%esp)
jne    804c6d6 <__sprintf_chk@plt+0x3216>
mov    0x5c(%esp),%eax
cmp    %eax,0x40(%esp)
jne    804c6d6 <__sprintf_chk@plt+0x3216>
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
or     $0xffffffff,%esi
movl   $0x8053014,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    0x18(%esp),%ecx
mov    %ebx,0x10(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
call   8049330 <__errno_location@plt>
or     $0xffffffff,%edx
movl   $0x0,(%eax)
jmp    804c6d6 <__sprintf_chk@plt+0x3216>
push   %ebp
push   %edi
push   %esi
mov    $0x8057288,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x3c,%esp
test   %eax,%eax
mov    $0x8057280,%eax
cmovne %eax,%esi
mov    %edx,%eax
mov    %edx,0x20(%esp)
mov    %ecx,%edx
mov    %ecx,0x24(%esp)
or     %eax,%ecx
je     804c7f8 <__sprintf_chk@plt+0x3338>
mov    %eax,%edi
mov    0x805778c,%eax
mov    %edx,%ebp
add    (%esi),%edi
adc    0x4(%esi),%ebp
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %edi,(%esp)
mov    %ebp,0x4(%esp)
call   8051ce0 <__sprintf_chk@plt+0x8820>
cmp    %edx,%ebp
mov    %eax,(%esi)
mov    %edx,0x4(%esi)
jle    804c840 <__sprintf_chk@plt+0x3380>
sub    %eax,%edi
sbb    %edx,%ebp
mov    %edi,%esi
mov    %ebp,%eax
mov    %ebp,%edi
or     %esi,%eax
jne    804c922 <__sprintf_chk@plt+0x3462>
mov    $0x1,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x4(%esi),%edi
mov    (%esi),%esi
mov    %edi,%eax
or     %esi,%eax
jne    804c810 <__sprintf_chk@plt+0x3350>
mov    0x805717c,%eax
or     0x8057178,%eax
jne    804c7e9 <__sprintf_chk@plt+0x3329>
test   %ebx,%ebx
jne    804c848 <__sprintf_chk@plt+0x3388>
xor    %ecx,%ecx
xor    %ebx,%ebx
cmpb   $0x0,0x805770c
jne    804c8e0 <__sprintf_chk@plt+0x3420>
call   8049330 <__errno_location@plt>
movl   $0x1d,(%eax)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
jl     804c7e9 <__sprintf_chk@plt+0x3329>
cmp    %eax,%edi
ja     804c7d7 <__sprintf_chk@plt+0x3317>
jmp    804c7e9 <__sprintf_chk@plt+0x3329>
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
cmp    $0x1,%ebx
je     804c868 <__sprintf_chk@plt+0x33a8>
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8057168,%ecx
mov    0x805716c,%ebx
mov    %ecx,%eax
and    %ebx,%eax
cmp    $0xffffffff,%eax
je     804c85d <__sprintf_chk@plt+0x339d>
test   %ebx,%ebx
js     804c968 <__sprintf_chk@plt+0x34a8>
mov    %esi,0xc(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x4(%esp)
mov    %ebx,0x8(%esp)
movl   $0x4,0x14(%esp)
movl   $0x1,(%esp)
mov    %ecx,0x28(%esp)
mov    %ebx,0x2c(%esp)
call   8049420 <posix_fadvise64@plt>
mov    0x28(%esp),%ecx
add    0x20(%esp),%esi
mov    0x2c(%esp),%ebx
adc    0x24(%esp),%edi
add    %ecx,%esi
mov    %esi,0x8057168
adc    %ebx,%edi
cmp    $0xffffffff,%eax
mov    %edi,0x805716c
setne  %al
jmp    804c7ee <__sprintf_chk@plt+0x332e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8057700,%eax
mov    0x8057704,%edx
movl   $0x4,0x14(%esp)
mov    %esi,0xc(%esp)
sub    %esi,%eax
sbb    %edi,%edx
sub    %ecx,%eax
sbb    %ebx,%edx
mov    %edi,0x10(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x0,(%esp)
call   8049420 <posix_fadvise64@plt>
cmp    $0xffffffff,%eax
setne  %al
jmp    804c7ee <__sprintf_chk@plt+0x332e>
mov    0x20(%esp),%edx
mov    0x24(%esp),%ecx
mov    %edx,%eax
mov    %ecx,%edx
or     %esi,%eax
or     %ebp,%edx
or     %eax,%edx
je     804c803 <__sprintf_chk@plt+0x3343>
test   %ebx,%ebx
jne    804c950 <__sprintf_chk@plt+0x3490>
mov    0x8057288,%ecx
mov    0x805728c,%ebx
jmp    804c818 <__sprintf_chk@plt+0x3358>
nop
mov    0x8057280,%eax
mov    0x8057284,%edx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
jmp    804c858 <__sprintf_chk@plt+0x3398>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
movl   $0x1,(%esp)
call   80493e0 <lseek64@plt>
mov    0x20(%esp),%ecx
mov    0x24(%esp),%ebx
add    %esi,%ecx
adc    %edi,%ebx
sub    %ecx,%eax
sbb    %ebx,%edx
test   %edx,%edx
mov    %eax,0x8057168
mov    %edx,0x805716c
js     804c85d <__sprintf_chk@plt+0x339d>
mov    %eax,%ecx
mov    %edx,%ebx
jmp    804c885 <__sprintf_chk@plt+0x33c5>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x8057170
jne    804c9e8 <__sprintf_chk@plt+0x3528>
sub    $0x1c,%esp
mov    0x8057204,%eax
mov    %eax,(%esp)
call   804d600 <__sprintf_chk@plt+0x4140>
test   %eax,%eax
jne    804c9ed <__sprintf_chk@plt+0x352d>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
jmp    804d6a0 <__sprintf_chk@plt+0x41e0>
movl   $0x1,(%esp)
call   8049040 <_exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
movl   $0x0,(%esp)
call   8049470 <close@plt>
test   %eax,%eax
js     804ca88 <__sprintf_chk@plt+0x35c8>
movl   $0x1,(%esp)
call   8049470 <close@plt>
test   %eax,%eax
js     804ca30 <__sprintf_chk@plt+0x3570>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053535,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x8057794,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805351f,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804ca15 <__sprintf_chk@plt+0x3555>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x94,%esp
lea    0x10(%esp),%esi
lea    0x0(%esi,%eiz,1),%esi
mov    0x805764c,%eax
test   %eax,%eax
jne    804cb02 <__sprintf_chk@plt+0x3642>
mov    0x8057648,%eax
test   %eax,%eax
je     804cb64 <__sprintf_chk@plt+0x36a4>
mov    %esi,0x8(%esp)
movl   $0x8057660,0x4(%esp)
movl   $0x0,(%esp)
call   8049050 <sigprocmask@plt>
mov    0x805764c,%ebx
mov    0x8057648,%eax
test   %eax,%eax
je     804cb31 <__sprintf_chk@plt+0x3671>
sub    $0x1,%eax
mov    %eax,0x8057648
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x2,(%esp)
call   8049050 <sigprocmask@plt>
test   %ebx,%ebx
jne    804cb70 <__sprintf_chk@plt+0x36b0>
call   804bfe0 <__sprintf_chk@plt+0x2b20>
mov    0x805764c,%eax
test   %eax,%eax
jne    804cb02 <__sprintf_chk@plt+0x3642>
mov    0x8057648,%eax
test   %eax,%eax
jne    804cb02 <__sprintf_chk@plt+0x3642>
add    $0x94,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
call   804ca00 <__sprintf_chk@plt+0x3540>
call   804bfe0 <__sprintf_chk@plt+0x2b20>
mov    %ebx,(%esp)
call   8048fe0 <raise@plt>
jmp    804caf0 <__sprintf_chk@plt+0x3630>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%ebp
mov    0x44(%esp),%edi
mov    0x48(%esp),%esi
jmp    804cbb6 <__sprintf_chk@plt+0x36f6>
lea    0x0(%esi),%esi
call   8049330 <__errno_location@plt>
cmpl   $0x4,(%eax)
jne    804cc42 <__sprintf_chk@plt+0x3782>
call   804cae0 <__sprintf_chk@plt+0x3620>
mov    %esi,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   8049020 <read@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804cba8 <__sprintf_chk@plt+0x36e8>
je     804cc42 <__sprintf_chk@plt+0x3782>
cmpb   $0x0,0x80576f8
je     804cc42 <__sprintf_chk@plt+0x3782>
mov    0x8057534,%edi
test   %edi,%edi
jle    804cc3c <__sprintf_chk@plt+0x377c>
cmp    %edi,%esi
jbe    804cc3c <__sprintf_chk@plt+0x377c>
mov    %edi,0xc(%esp)
movl   $0x5,0x10(%esp)
movl   $0x805308c,0x8(%esp)
movl   $0x80530c8,0x4(%esp)
movl   $0x0,(%esp)
call   8049460 <dcngettext@plt>
mov    %edi,0xc(%esp)
sar    $0x1f,%edi
mov    %edi,0x10(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80491d0 <error@plt>
movb   $0x0,0x80576f8
mov    %ebx,0x8057534
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%ebx
mov    0x30(%esp),%edi
mov    0x34(%esp),%ebp
test   %ebx,%ebx
je     804cca2 <__sprintf_chk@plt+0x37e2>
xor    %esi,%esi
jmp    804cc7a <__sprintf_chk@plt+0x37ba>
nop
lea    0x0(%esi,%eiz,1),%esi
je     804cc98 <__sprintf_chk@plt+0x37d8>
add    %eax,%esi
add    %eax,%ebp
sub    %eax,%ebx
je     804cc98 <__sprintf_chk@plt+0x37d8>
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804cb90 <__sprintf_chk@plt+0x36d0>
test   %eax,%eax
jns    804cc70 <__sprintf_chk@plt+0x37b0>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
jmp    804cc8e <__sprintf_chk@plt+0x37ce>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
call   804ca00 <__sprintf_chk@plt+0x3540>
call   804bfe0 <__sprintf_chk@plt+0x2b20>
call   804cae0 <__sprintf_chk@plt+0x3620>
mov    %ebx,(%esp)
call   8049240 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x9c,%esp
mov    0xbc(%esp),%eax
mov    %edx,0x18(%esp)
mov    0xb4(%esp),%ebp
mov    0xb0(%esp),%edi
mov    (%eax),%ebx
call   8049330 <__errno_location@plt>
xor    %edx,%edx
mov    %edx,0x14(%esp)
movl   $0x0,(%eax)
mov    %eax,0x24(%esp)
mov    0xb8(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0x7fffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %eax,0x10(%esp)
call   8051b60 <__sprintf_chk@plt+0x86a0>
cmp    %edx,%ebp
jbe    804cd6e <__sprintf_chk@plt+0x38ae>
mov    0x18(%esp),%eax
mov    %esi,%edx
movl   $0x2,0x8(%esp)
movl   $0x0,(%esp)
movl   $0x0,0x4(%esp)
call   804c680 <__sprintf_chk@plt+0x31c0>
test   %edx,%edx
jns    804d0cb <__sprintf_chk@plt+0x3c0b>
movl   $0x0,0x28(%esp)
jmp    804ce10 <__sprintf_chk@plt+0x3950>
jae    804cec7 <__sprintf_chk@plt+0x3a07>
mov    0xb8(%esp),%ecx
mov    %edi,%eax
mull   0xb8(%esp)
movl   $0x1,0x8(%esp)
imul   %ebp,%ecx
add    %ecx,%edx
mov    %ebx,%ecx
xor    %ebx,%ebx
add    %eax,%ecx
mov    0x18(%esp),%eax
adc    %edx,%ebx
mov    %esi,%edx
mov    %ecx,(%esp)
mov    %ebx,0x4(%esp)
mov    %ecx,0x28(%esp)
mov    %ebx,0x2c(%esp)
call   804c680 <__sprintf_chk@plt+0x31c0>
test   %edx,%edx
js     804cddc <__sprintf_chk@plt+0x391c>
test   %esi,%esi
je     804cee0 <__sprintf_chk@plt+0x3a20>
nop
mov    0xbc(%esp),%eax
xor    %edx,%edx
movl   $0x0,(%eax)
xor    %eax,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x24(%esp),%eax
mov    %esi,%edx
mov    (%eax),%eax
movl   $0x2,0x8(%esp)
movl   $0x0,(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x28(%esp)
mov    0x18(%esp),%eax
call   804c680 <__sprintf_chk@plt+0x31c0>
test   %edx,%edx
jns    804d0c4 <__sprintf_chk@plt+0x3c04>
mov    %ebp,%edx
mov    %esi,%ebp
mov    %edi,%esi
mov    %edx,%edi
mov    %edi,%ebx
mov    0x8057640,%edx
or     %esi,%ebx
mov    0xb8(%esp),%eax
jne    804ce34 <__sprintf_chk@plt+0x3974>
mov    0xbc(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0xc0(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   *%edx
test   %eax,%eax
js     804d01f <__sprintf_chk@plt+0x3b5f>
je     804ced5 <__sprintf_chk@plt+0x3a15>
test   %ebp,%ebp
jne    804ce94 <__sprintf_chk@plt+0x39d4>
mov    %eax,%ebx
mov    %eax,%ecx
sar    $0x1f,%ebx
mov    %ebx,0x14(%esp)
add    0x8057700,%ecx
adc    0x8057704,%ebx
cmp    %ebx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    %ecx,0x8057700
mov    %ebx,0x8057704
jb     804ce94 <__sprintf_chk@plt+0x39d4>
ja     804ce8d <__sprintf_chk@plt+0x39cd>
cmp    %ecx,%eax
jbe    804ce94 <__sprintf_chk@plt+0x39d4>
movb   $0x1,0x80576f9
mov    %edi,%eax
or     %esi,%eax
je     804cdc0 <__sprintf_chk@plt+0x3900>
add    $0xffffffff,%esi
adc    $0xffffffff,%edi
mov    %edi,%eax
or     %esi,%eax
jne    804ce18 <__sprintf_chk@plt+0x3958>
mov    0xbc(%esp),%eax
cmpl   $0x0,(%eax)
jne    804ce18 <__sprintf_chk@plt+0x3958>
xor    %eax,%eax
xor    %edx,%edx
jmp    804cdd1 <__sprintf_chk@plt+0x3911>
cmp    %eax,%edi
ja     804cd37 <__sprintf_chk@plt+0x3877>
nop
jmp    804cd74 <__sprintf_chk@plt+0x38b4>
mov    %edi,%ebp
mov    %esi,%eax
mov    %ebp,%edx
jmp    804cdd1 <__sprintf_chk@plt+0x3911>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x3,(%esp)
call   8049170 <__fxstat64@plt>
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
jne    804cfca <__sprintf_chk@plt+0x3b0a>
mov    0x40(%esp),%eax
and    $0xd000,%eax
cmp    $0x8000,%eax
jne    804cf84 <__sprintf_chk@plt+0x3ac4>
mov    0x5c(%esp),%eax
mov    0x60(%esp),%edx
mov    0x8057700,%esi
mov    0x8057704,%edi
mov    %eax,0x18(%esp)
mov    %ecx,%eax
mov    %edx,0x1c(%esp)
mov    %ebx,%edx
add    %esi,%eax
adc    %edi,%edx
cmp    %edx,0x1c(%esp)
ja     804cfc4 <__sprintf_chk@plt+0x3b04>
jb     804cf4e <__sprintf_chk@plt+0x3a8e>
cmp    %eax,0x18(%esp)
jae    804cfc4 <__sprintf_chk@plt+0x3b04>
mov    %ecx,%eax
mov    %ebx,%edx
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
sub    0x18(%esp),%eax
sbb    0x1c(%esp),%edx
mov    %ecx,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%ebx
sub    %esi,%ecx
sbb    %edi,%ebx
jmp    804cf94 <__sprintf_chk@plt+0x3ad4>
mov    0x8057700,%esi
xor    %eax,%eax
xor    %edx,%edx
mov    0x8057704,%edi
add    %ecx,%esi
adc    %ebx,%edi
cmp    %edi,%ebx
mov    %esi,0x8057700
mov    %edi,0x8057704
jb     804cdd1 <__sprintf_chk@plt+0x3911>
jbe    804cfba <__sprintf_chk@plt+0x3afa>
movb   $0x1,0x80576f9
jmp    804cdd1 <__sprintf_chk@plt+0x3911>
cmp    %esi,%ecx
jbe    804cdd1 <__sprintf_chk@plt+0x3911>
jmp    804cfae <__sprintf_chk@plt+0x3aee>
xor    %eax,%eax
xor    %edx,%edx
jmp    804cf94 <__sprintf_chk@plt+0x3ad4>
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805354c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049100 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
jmp    804cf0c <__sprintf_chk@plt+0x3a4c>
mov    0x18(%esp),%eax
test   %ebp,%ebp
mov    %eax,(%esp)
jne    804d083 <__sprintf_chk@plt+0x3bc3>
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805357c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
testb  $0x1,0x8057751
je     804d079 <__sprintf_chk@plt+0x3bb9>
call   804bfe0 <__sprintf_chk@plt+0x2b20>
mov    $0x1,%eax
call   804ccb0 <__sprintf_chk@plt+0x37f0>
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805356c,0x4(%esp)
mov    %eax,%ebx
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804d079 <__sprintf_chk@plt+0x3bb9>
cmpl   $0x0,0x28(%esp)
jne    804d0d3 <__sprintf_chk@plt+0x3c13>
movl   $0x4b,0x28(%esp)
mov    0x18(%esp),%eax
test   %esi,%esi
mov    %eax,(%esp)
jne    804d083 <__sprintf_chk@plt+0x3bc3>
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805355c,0x4(%esp)
mov    %eax,%ebx
jmp    804d09a <__sprintf_chk@plt+0x3bda>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x2c,%esp
testb  $0x40,0x8057749
je     804d120 <__sprintf_chk@plt+0x3c60>
cmp    %edx,0x8057784
ja     804d258 <__sprintf_chk@plt+0x3d98>
xor    %ebx,%ebx
test   %esi,%esi
je     804d1b7 <__sprintf_chk@plt+0x3cf7>
lea    (%edi,%esi,1),%ebp
mov    %esi,0x18(%esp)
movl   $0x0,0x1c(%esp)
lea    0x0(%esi,%eiz,1),%esi
call   804cae0 <__sprintf_chk@plt+0x3620>
mov    0x8057750,%ecx
movb   $0x0,0x8057758
test   $0x10000,%ecx
je     804d17b <__sprintf_chk@plt+0x3cbb>
mov    %edi,%eax
cmpl   $0x0,(%eax)
lea    0x4(%eax),%edx
jne    804d16e <__sprintf_chk@plt+0x3cae>
mov    %edx,%eax
cmpl   $0x0,(%eax)
lea    0x4(%eax),%edx
je     804d164 <__sprintf_chk@plt+0x3ca4>
add    $0x1,%eax
cmpb   $0x0,-0x1(%eax)
je     804d16e <__sprintf_chk@plt+0x3cae>
cmp    %ebp,%eax
ja     804d1c8 <__sprintf_chk@plt+0x3d08>
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    (%edi,%ebx,1),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492d0 <write@plt>
test   %eax,%eax
js     804d208 <__sprintf_chk@plt+0x3d48>
je     804d230 <__sprintf_chk@plt+0x3d70>
add    %eax,%ebx
cmp    %ebx,%esi
ja     804d140 <__sprintf_chk@plt+0x3c80>
cmpb   $0x0,0x8057644
je     804d1b7 <__sprintf_chk@plt+0x3cf7>
test   %ebx,%ebx
jne    804d240 <__sprintf_chk@plt+0x3d80>
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
movl   $0x1,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
mov    %ecx,0x14(%esp)
call   80493e0 <lseek64@plt>
mov    0x14(%esp),%ecx
test   %edx,%edx
js     804d218 <__sprintf_chk@plt+0x3d58>
test   %esi,%esi
mov    %esi,%eax
movb   $0x1,0x8057758
jns    804d1a0 <__sprintf_chk@plt+0x3ce0>
lea    0x0(%esi),%esi
call   8049330 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     804d1a2 <__sprintf_chk@plt+0x3ce2>
jmp    804d1a6 <__sprintf_chk@plt+0x3ce6>
lea    0x0(%esi,%eiz,1),%esi
and    $0xfffeffff,%ecx
mov    %ecx,0x8057750
jmp    804d17b <__sprintf_chk@plt+0x3cbb>
lea    0x0(%esi,%eiz,1),%esi
call   8049330 <__errno_location@plt>
movl   $0x1c,(%eax)
jmp    804d1a6 <__sprintf_chk@plt+0x3ce6>
mov    %ebx,%edx
xor    %ecx,%ecx
mov    $0x1,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x3,0x4(%esp)
movl   $0x1,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
movl   $0x4,0x4(%esp)
movl   $0x1,(%esp)
and    $0xbf,%ah
mov    %eax,0x8(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
test   %eax,%eax
jne    804d2a8 <__sprintf_chk@plt+0x3de8>
xor    %edx,%edx
xor    %ecx,%ecx
mov    $0x1,%eax
call   804c780 <__sprintf_chk@plt+0x32c0>
orl    $0x8000,0x8057750
00
jmp    804d120 <__sprintf_chk@plt+0x3c60>
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x8053104,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebp
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %ebp,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804d28b <__sprintf_chk@plt+0x3dcb>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x10,%esp
mov    0x8057784,%edx
mov    0x80576e8,%eax
call   804d100 <__sprintf_chk@plt+0x3c40>
add    %eax,0x8057718
adc    %ebx,0x805771c
cmp    0x8057784,%eax
mov    %eax,%esi
jne    804d34d <__sprintf_chk@plt+0x3e8d>
addl   $0x1,0x8057730
adcl   $0x0,0x8057734
movl   $0x0,0x80576e4
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x8057790,%eax
mov    %eax,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x5,0x8(%esp)
movl   $0x805358d,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
call   8049330 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
test   %esi,%esi
je     804d3ab <__sprintf_chk@plt+0x3eeb>
addl   $0x1,0x8057738
adcl   $0x0,0x805773c
mov    $0x1,%eax
call   804ccb0 <__sprintf_chk@plt+0x37f0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0xc,%esp
test   %edx,%edx
jne    804d425 <__sprintf_chk@plt+0x3f65>
jmp    804d451 <__sprintf_chk@plt+0x3f91>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80576e0,%edx
mov    0x8057780,%ecx
cmp    %ecx,%edx
je     804d498 <__sprintf_chk@plt+0x3fd8>
cmp    %ecx,%edx
jae    804d414 <__sprintf_chk@plt+0x3f54>
mov    0x80576e4,%ebx
mov    0x80576e8,%esi
lea    0x1(%ebx),%ecx
cmp    0x8057784,%ecx
mov    %ecx,0x80576e4
mov    %al,(%esi,%ebx,1)
jae    804d4b0 <__sprintf_chk@plt+0x3ff0>
add    $0x1,%edx
add    $0x1,%ebp
sub    $0x1,%edi
mov    %edx,0x80576e0
je     804d451 <__sprintf_chk@plt+0x3f91>
movzbl 0x0(%ebp),%eax
cmp    0x8057172,%al
jne    804d3d8 <__sprintf_chk@plt+0x3f18>
mov    0x80576e0,%ebx
cmp    0x8057780,%ebx
jb     804d469 <__sprintf_chk@plt+0x3fa9>
add    $0x1,%ebp
sub    $0x1,%edi
movl   $0x0,0x80576e0
00
jne    804d425 <__sprintf_chk@plt+0x3f65>
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804d300 <__sprintf_chk@plt+0x3e40>
add    $0x1,%ebx
cmp    %ebx,0x8057780
jbe    804d43f <__sprintf_chk@plt+0x3f7f>
mov    0x80576e4,%esi
mov    0x80576e8,%eax
movzbl 0x8057171,%edx
lea    0x1(%esi),%ecx
cmp    0x8057784,%ecx
mov    %ecx,0x80576e4
mov    %dl,(%eax,%esi,1)
jb     804d45e <__sprintf_chk@plt+0x3f9e>
jmp    804d459 <__sprintf_chk@plt+0x3f99>
lea    0x0(%esi,%eiz,1),%esi
addl   $0x1,0x80576f0
adcl   $0x0,0x80576f4
jmp    804d414 <__sprintf_chk@plt+0x3f54>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804d300 <__sprintf_chk@plt+0x3e40>
mov    0x80576e0,%edx
jmp    804d414 <__sprintf_chk@plt+0x3f54>
push   %ebp
xor    %ebp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
test   %edx,%edx
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
jne    804d52e <__sprintf_chk@plt+0x406e>
jmp    804d5e6 <__sprintf_chk@plt+0x4126>
lea    0x0(%esi),%esi
mov    0x80576e4,%ecx
sub    $0x1,%ebp
movzbl 0x8057172,%edx
mov    0x80576e8,%ebx
movl   $0x0,0x8057290
00
lea    0x1(%ecx),%eax
cmp    0x8057784,%eax
movl   $0x0,0x80576e0
00
mov    %eax,0x80576e4
mov    %dl,(%ebx,%ecx,1)
jae    804d5d4 <__sprintf_chk@plt+0x4114>
add    $0x1,%ebp
cmp    %ebp,0xc(%esp)
jbe    804d5e6 <__sprintf_chk@plt+0x4126>
mov    0x8(%esp),%eax
movzbl (%eax,%ebp,1),%ebx
mov    0x80576e0,%eax
cmp    0x8057780,%eax
lea    0x1(%eax),%edx
mov    %edx,0x80576e0
jae    804d4e0 <__sprintf_chk@plt+0x4020>
movzbl 0x8057171,%ecx
cmp    %cl,%bl
je     804d5f0 <__sprintf_chk@plt+0x4130>
mov    0x8057290,%edx
mov    0x80576e8,%edi
mov    0x80576e4,%eax
mov    0x8057784,%esi
test   %edx,%edx
jne    804d592 <__sprintf_chk@plt+0x40d2>
jmp    804d5c0 <__sprintf_chk@plt+0x4100>
mov    0x8057290,%ecx
lea    -0x1(%ecx),%edx
test   %edx,%edx
mov    %edx,0x8057290
je     804d5c0 <__sprintf_chk@plt+0x4100>
movzbl 0x8057171,%ecx
lea    0x1(%eax),%edx
cmp    %esi,%edx
mov    %cl,(%edi,%eax,1)
mov    %edx,%eax
mov    %edx,0x80576e4
jb     804d578 <__sprintf_chk@plt+0x40b8>
call   804d300 <__sprintf_chk@plt+0x3e40>
mov    0x80576e8,%edi
mov    0x80576e4,%eax
mov    0x8057784,%esi
jmp    804d578 <__sprintf_chk@plt+0x40b8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%eax),%edx
cmp    %esi,%edx
mov    %edx,0x80576e4
mov    %bl,(%edi,%eax,1)
jb     804d521 <__sprintf_chk@plt+0x4061>
call   804d300 <__sprintf_chk@plt+0x3e40>
add    $0x1,%ebp
cmp    %ebp,0xc(%esp)
ja     804d52e <__sprintf_chk@plt+0x406e>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
addl   $0x1,0x8057290
jmp    804d521 <__sprintf_chk@plt+0x4061>
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   80491a0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8051150 <__sprintf_chk@plt+0x7c90>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804d640 <__sprintf_chk@plt+0x4180>
test   %dl,%dl
je     804d637 <__sprintf_chk@plt+0x4177>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804d660 <__sprintf_chk@plt+0x41a0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804d637 <__sprintf_chk@plt+0x4177>
call   8049330 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049330 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
mov    %eax,0x805779c
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8057798
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8057260,%eax
mov    %eax,(%esp)
call   804d600 <__sprintf_chk@plt+0x4140>
test   %eax,%eax
je     804d6c9 <__sprintf_chk@plt+0x4209>
cmpb   $0x0,0x8057798
je     804d6e0 <__sprintf_chk@plt+0x4220>
call   8049330 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804d6e0 <__sprintf_chk@plt+0x4220>
mov    0x8057204,%eax
mov    %eax,(%esp)
call   804d600 <__sprintf_chk@plt+0x4140>
test   %eax,%eax
jne    804d738 <__sprintf_chk@plt+0x4278>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x8053cfd,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %eax,%ebx
mov    0x805779c,%eax
test   %eax,%eax
je     804d745 <__sprintf_chk@plt+0x4285>
mov    %eax,(%esp)
call   804fcf0 <__sprintf_chk@plt+0x6830>
mov    %eax,%esi
call   8049330 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x80534f5,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
mov    0x8057184,%eax
mov    %eax,(%esp)
call   8049040 <_exit@plt>
call   8049330 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x80545b2,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80491d0 <error@plt>
jmp    804d738 <__sprintf_chk@plt+0x4278>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804d78b <__sprintf_chk@plt+0x42cb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804d780 <__sprintf_chk@plt+0x42c0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804d7b9 <__sprintf_chk@plt+0x42f9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804d7b9 <__sprintf_chk@plt+0x42f9>
cmp    $0x2f,%cl
je     804d7c0 <__sprintf_chk@plt+0x4300>
test   %bl,%bl
je     804d798 <__sprintf_chk@plt+0x42d8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804d7a2 <__sprintf_chk@plt+0x42e2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804d798 <__sprintf_chk@plt+0x42d8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80492a0 <strlen@plt>
cmp    $0x1,%eax
jbe    804d7ef <__sprintf_chk@plt+0x432f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804d7f8 <__sprintf_chk@plt+0x4338>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804d7e5 <__sprintf_chk@plt+0x4325>
nop
jmp    804d7ef <__sprintf_chk@plt+0x432f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8049010 <open64@plt>
mov    %eax,%ebx
shr    $0x1f,%eax
test   %al,%al
je     804d848 <__sprintf_chk@plt+0x4388>
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %ebx,0x30(%esp)
je     804d83c <__sprintf_chk@plt+0x437c>
mov    0x30(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8048ff0 <dup2@plt>
mov    %eax,%edi
call   8049330 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049470 <close@plt>
mov    %ebx,%eax
mov    %ebp,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
push   %ebx
sub    $0x28,%esp
lea    0x18(%esp),%ebx
mov    %ebx,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <clock_gettime@plt>
test   %eax,%eax
je     804d8a4 <__sprintf_chk@plt+0x43e4>
mov    %ebx,(%esp)
call   804d8c0 <__sprintf_chk@plt+0x4400>
mov    0x1c(%esp),%ecx
mov    $0x3b9aca00,%eax
imull  0x18(%esp)
mov    %ecx,%ebx
sar    $0x1f,%ebx
add    %ecx,%eax
adc    %ebx,%edx
add    $0x28,%esp
pop    %ebx
ret
nop
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%ebx
movl   $0x0,(%esp)
mov    %ebx,0x4(%esp)
call   80490a0 <clock_gettime@plt>
test   %eax,%eax
je     804d901 <__sprintf_chk@plt+0x4441>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80490f0 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    %eax,(%ebx)
imul   $0x3e8,0x1c(%esp),%eax
mov    %eax,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xcc,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0xbc(%esp)
xor    %ecx,%ecx
mov    0xec(%esp),%ecx
mov    0xe0(%esp),%eax
mov    0xe4(%esp),%edx
mov    0xf4(%esp),%edi
and    $0x3,%ecx
mov    0xf0(%esp),%esi
mov    %eax,0x50(%esp)
mov    0xe8(%esp),%eax
mov    %ecx,0x58(%esp)
mov    0xec(%esp),%ecx
mov    %edx,0x54(%esp)
mov    0xfc(%esp),%edx
mov    %eax,%ebp
and    $0x20,%ecx
mov    %eax,0x4c(%esp)
mov    0xf8(%esp),%eax
cmp    $0x1,%ecx
mov    %ecx,0x64(%esp)
sbb    %ecx,%ecx
mov    %ecx,0x40(%esp)
andl   $0xffffffe8,0x40(%esp)
addl   $0x400,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   80493d0 <localeconv@plt>
mov    (%eax),%ecx
mov    %eax,%ebx
mov    %ecx,(%esp)
mov    %ecx,0x60(%esp)
call   80492a0 <strlen@plt>
mov    $0x1,%edx
mov    %eax,%ecx
lea    -0x1(%eax),%eax
cmp    $0x10,%eax
mov    $0x8053d09,%eax
cmovb  %ecx,%edx
mov    0x8(%ebx),%ecx
cmovb  0x60(%esp),%eax
mov    %edx,0x68(%esp)
mov    %ecx,0x6c(%esp)
mov    0x4(%ebx),%ecx
mov    %eax,0x60(%esp)
mov    %ecx,(%esp)
mov    %ecx,%ebx
call   80492a0 <strlen@plt>
mov    %ebp,%ecx
cmp    $0x11,%eax
mov    $0x80541bd,%eax
cmovb  %ebx,%eax
add    $0x288,%ecx
cmp    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    %ecx,0x48(%esp)
ja     804dd52 <__sprintf_chk@plt+0x4892>
jae    804dd48 <__sprintf_chk@plt+0x4888>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
or     %eax,%edx
je     804df88 <__sprintf_chk@plt+0x4ac8>
mov    0x54(%esp),%edx
mov    0x50(%esp),%eax
mov    %edx,0x8c(%esp)
test   %edx,%edx
mov    %eax,0x88(%esp)
fildll 0x88(%esp)
js     804e2c8 <__sprintf_chk@plt+0x4e08>
mov    %esi,0x88(%esp)
test   %edi,%edi
mov    %edi,0x8c(%esp)
fildll 0x88(%esp)
js     804e2a8 <__sprintf_chk@plt+0x4de8>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
mov    %edx,0x8c(%esp)
test   %edx,%edx
mov    %eax,0x88(%esp)
fildll 0x88(%esp)
js     804e2b8 <__sprintf_chk@plt+0x4df8>
fdivrp %st,%st(1)
testb  $0x10,0xec(%esp)
fmulp  %st,%st(1)
je     804de58 <__sprintf_chk@plt+0x4998>
fildl  0x40(%esp)
xor    %ebp,%ebp
fld    %st(0)
jmp    804dac4 <__sprintf_chk@plt+0x4604>
fstp   %st(1)
fxch   %st(2)
fld    %st(0)
add    $0x1,%ebp
fmul   %st(2),%st
fxch   %st(3)
fucomi %st(3),%st
jb     804dae0 <__sprintf_chk@plt+0x4620>
cmp    $0x8,%ebp
jne    804dac0 <__sprintf_chk@plt+0x4600>
fstp   %st(2)
fstp   %st(2)
jmp    804dae4 <__sprintf_chk@plt+0x4624>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(2)
fstp   %st(2)
fdivp  %st,%st(1)
cmpl   $0x1,0x58(%esp)
fld    %st(0)
je     804dbb8 <__sprintf_chk@plt+0x46f8>
fstp   %st(0)
fldt   0x8053d80
fucomip %st(1),%st
jbe    804e2a0 <__sprintf_chk@plt+0x4de0>
flds   0x8053d70
fxch   %st(1)
fucomi %st(1),%st
jae    804e4a0 <__sprintf_chk@plt+0x4fe0>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%esi
xor    %eax,%eax
xor    %edx,%edx
test   %esi,%esi
jne    804db91 <__sprintf_chk@plt+0x46d1>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     804e635 <__sprintf_chk@plt+0x5175>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomi %st(1),%st
fstp   %st(1)
jp     804db91 <__sprintf_chk@plt+0x46d1>
je     804e5d8 <__sprintf_chk@plt+0x5118>
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
js     804e5e1 <__sprintf_chk@plt+0x5121>
fxch   %st(1)
jmp    804dbba <__sprintf_chk@plt+0x46fa>
xchg   %ax,%ax
fxch   %st(1)
fstpt  0x20(%esp)
mov    0x4c(%esp),%edi
movl   $0x8053d11,0xc(%esp)
fstpt  0x10(%esp)
mov    %edi,(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80494c0 <__sprintf_chk@plt>
mov    %edi,(%esp)
call   80492a0 <strlen@plt>
mov    0x68(%esp),%edi
mov    0x64(%esp),%edx
add    $0x1,%edi
mov    %eax,%esi
xor    %eax,%eax
test   %edx,%edx
sete   %al
lea    0x1(%edi,%eax,1),%eax
cmp    %eax,%esi
fldt   0x20(%esp)
ja     804dc30 <__sprintf_chk@plt+0x4770>
testb  $0x8,0xec(%esp)
je     804dea8 <__sprintf_chk@plt+0x49e8>
mov    0x4c(%esp),%eax
cmpb   $0x30,-0x1(%eax,%esi,1)
jne    804deb0 <__sprintf_chk@plt+0x49f0>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x1,0x58(%esp)
fmuls  0x8053d74
je     804dd08 <__sprintf_chk@plt+0x4848>
fldt   0x8053d80
fucomip %st(1),%st
jbe    804dd08 <__sprintf_chk@plt+0x4848>
flds   0x8053d70
fxch   %st(1)
fucomi %st(1),%st
jae    804e578 <__sprintf_chk@plt+0x50b8>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%esi
xor    %eax,%eax
xor    %edx,%edx
test   %esi,%esi
jne    804dce0 <__sprintf_chk@plt+0x4820>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     804e642 <__sprintf_chk@plt+0x5182>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomip %st(1),%st
fstp   %st(0)
jp     804dce2 <__sprintf_chk@plt+0x4822>
jne    804dce2 <__sprintf_chk@plt+0x4822>
xor    %eax,%eax
xor    %edx,%edx
jmp    804dce2 <__sprintf_chk@plt+0x4822>
nop
fstp   %st(0)
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
jns    804dd08 <__sprintf_chk@plt+0x4848>
fadds  0x8053cf0
lea    0x0(%esi),%esi
fdivs  0x8053d74
mov    0x4c(%esp),%edi
movl   $0x8053d0b,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
fstpt  0x10(%esp)
call   80494c0 <__sprintf_chk@plt>
mov    %edi,(%esp)
xor    %edi,%edi
call   80492a0 <strlen@plt>
mov    %eax,%esi
jmp    804deb8 <__sprintf_chk@plt+0x49f8>
nop
cmp    %esi,0x38(%esp)
jbe    804da19 <__sprintf_chk@plt+0x4559>
mov    %edi,%eax
or     %esi,%eax
je     804da3d <__sprintf_chk@plt+0x457d>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
or     %eax,%edx
jne    804da3d <__sprintf_chk@plt+0x457d>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x50(%esp),%edi
mov    0x54(%esp),%ebp
mov    %edi,(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,%ebx
mov    %eax,%esi
mov    %edx,0xc(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    $0xa,%ecx
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
imul   $0xa,%edx,%edx
mov    %edx,0x20(%esp)
mul    %ecx
mov    %eax,0x50(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x54(%esp)
mov    0x50(%esp),%edx
add    %eax,0x54(%esp)
mov    0x54(%esp),%ecx
mov    %edx,(%esp)
mov    %ecx,0x4(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %edi,(%esp)
mov    %ebp,0x4(%esp)
shld   $0x1,%eax,%edx
add    %eax,%eax
mov    %eax,0x70(%esp)
mov    %edx,0x74(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x54(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,0x24(%esp)
mov    0x50(%esp),%edx
mov    %eax,0x20(%esp)
mov    %edx,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
cmp    0x74(%esp),%ebx
mov    %eax,0x50(%esp)
jae    804e4f0 <__sprintf_chk@plt+0x5030>
mov    $0x3,%ebx
jmp    804e014 <__sprintf_chk@plt+0x4b54>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x1,0x58(%esp)
je     804de6d <__sprintf_chk@plt+0x49ad>
fldt   0x8053d80
fucomip %st(1),%st
ja     804e1e0 <__sprintf_chk@plt+0x4d20>
mov    0x4c(%esp),%edi
mov    $0xffffffff,%ebp
fstpt  0x10(%esp)
movl   $0x8053d0b,0xc(%esp)
mov    %edi,(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80494c0 <__sprintf_chk@plt>
mov    %edi,(%esp)
xor    %edi,%edi
call   80492a0 <strlen@plt>
mov    %eax,%esi
jmp    804deb8 <__sprintf_chk@plt+0x49f8>
fstp   %st(0)
jmp    804deb8 <__sprintf_chk@plt+0x49f8>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
mov    0x48(%esp),%ebx
mov    0x4c(%esp),%eax
mov    %esi,0x8(%esp)
sub    %esi,%ebx
sub    %edi,%esi
mov    %eax,0x4(%esp)
add    %ebx,%esi
mov    %ebx,(%esp)
call   8049060 <memmove@plt>
testb  $0x4,0xec(%esp)
jne    804e0e8 <__sprintf_chk@plt+0x4c28>
testb  $0x80,0xec(%esp)
je     804df5d <__sprintf_chk@plt+0x4a9d>
cmp    $0xffffffff,%ebp
je     804e2d8 <__sprintf_chk@plt+0x4e18>
mov    0xec(%esp),%eax
mov    %ebp,%edi
and    $0x100,%eax
or     %eax,%edi
je     804df5d <__sprintf_chk@plt+0x4a9d>
testb  $0x40,0xec(%esp)
jne    804e1c0 <__sprintf_chk@plt+0x4d00>
test   %ebp,%ebp
je     804e742 <__sprintf_chk@plt+0x5282>
mov    0x64(%esp),%esi
mov    0x48(%esp),%edi
test   %esi,%esi
lea    0x1(%edi),%edx
je     804e1a8 <__sprintf_chk@plt+0x4ce8>
movzbl 0x8053d64(%ebp),%ecx
mov    0x48(%esp),%edi
mov    %cl,(%edi)
test   %eax,%eax
je     804e74b <__sprintf_chk@plt+0x528b>
mov    0x64(%esp),%ecx
test   %ecx,%ecx
jne    804e190 <__sprintf_chk@plt+0x4cd0>
lea    0x1(%edx),%eax
mov    %eax,0x48(%esp)
movb   $0x42,(%edx)
mov    0xbc(%esp),%edi
xor    %gs:0x14,%edi
mov    0x48(%esp),%eax
movb   $0x0,(%eax)
mov    %ebx,%eax
jne    804e73d <__sprintf_chk@plt+0x527d>
add    $0xcc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    %eax,%ecx
mov    %edx,%ebx
mov    0x54(%esp),%edx
mov    %eax,0x78(%esp)
mov    0x50(%esp),%eax
mov    %ebx,0x70(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,%ebp
mov    %ecx,%eax
imul   %ebx,%ebp
mov    %edx,%ebx
mull   0x50(%esp)
imul   %ecx,%ebx
mov    %eax,0x20(%esp)
mov    0x70(%esp),%eax
add    %ebp,%ebx
mov    %edx,0x24(%esp)
add    %ebx,0x24(%esp)
mov    0x24(%esp),%edx
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x50(%esp),%ecx
mov    0x54(%esp),%ebx
xor    %ecx,%eax
xor    %ebx,%edx
or     %eax,%edx
jne    804da3d <__sprintf_chk@plt+0x457d>
xor    %ebx,%ebx
movl   $0x0,0x50(%esp)
mov    0xec(%esp),%eax
and    $0x10,%eax
mov    %eax,0x7c(%esp)
je     804e340 <__sprintf_chk@plt+0x4e80>
xor    %edi,%edi
mov    0x40(%esp),%esi
cmpl   $0x0,0x24(%esp)
jbe    804e560 <__sprintf_chk@plt+0x50a0>
xor    %ebp,%ebp
mov    %ebp,%ecx
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
mov    %ecx,0x78(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    0x50(%esp),%ecx
xor    %edx,%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
lea    (%eax,%eax,4),%eax
lea    (%ecx,%eax,2),%eax
mov    %ebx,%ecx
divl   0x40(%esp)
sar    %ecx
lea    (%ecx,%edx,2),%ebp
mov    0x24(%esp),%ecx
mov    0x20(%esp),%edx
add    %ebp,%ebx
mov    %eax,0x70(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    0x78(%esp),%ecx
cmp    %ebp,0x40(%esp)
mov    %eax,0x20(%esp)
mov    0x70(%esp),%eax
mov    %edx,0x24(%esp)
mov    %eax,0x50(%esp)
jbe    804e618 <__sprintf_chk@plt+0x5158>
test   %ebx,%ebx
setne  %bl
movzbl %bl,%ebx
add    $0x1,%ecx
cmp    0x24(%esp),%edi
jbe    804e5f0 <__sprintf_chk@plt+0x5130>
cmpl   $0x0,0x24(%esp)
mov    %ecx,%ebp
jbe    804e64f <__sprintf_chk@plt+0x518f>
mov    0x48(%esp),%esi
jmp    804e349 <__sprintf_chk@plt+0x4e89>
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
sub    %ebx,%esi
mov    $0xffffffff,%edi
mov    %eax,(%esp)
call   80492a0 <strlen@plt>
mov    %ebx,0x4(%esp)
add    %esi,%ebx
movl   $0x29,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %eax,0x20(%esp)
lea    0x93(%esp),%eax
mov    %eax,(%esp)
call   8049220 <__memcpy_chk@plt>
mov    %ebx,%eax
mov    %edi,%ebx
mov    %ebp,0x60(%esp)
mov    %eax,%edi
mov    0x6c(%esp),%ebp
jmp    804e14a <__sprintf_chk@plt+0x4c8a>
mov    0x20(%esp),%eax
sub    %eax,%edi
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049080 <memcpy@plt>
movzbl 0x0(%ebp),%eax
test   %al,%al
je     804e15f <__sprintf_chk@plt+0x4c9f>
movzbl %al,%edx
cmp    $0x7e,%al
mov    %edx,%ebx
cmova  %esi,%ebx
add    $0x1,%ebp
cmp    %esi,%ebx
cmova  %esi,%ebx
sub    %ebx,%esi
sub    %ebx,%edi
lea    0x93(%esp),%eax
add    %esi,%eax
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049080 <memcpy@plt>
test   %esi,%esi
jne    804e130 <__sprintf_chk@plt+0x4c70>
mov    0x60(%esp),%ebp
mov    %edi,%ebx
jmp    804dee4 <__sprintf_chk@plt+0x4a24>
test   %ebp,%ebp
je     804df53 <__sprintf_chk@plt+0x4a93>
movb   $0x69,(%edx)
add    $0x1,%edx
jmp    804df53 <__sprintf_chk@plt+0x4a93>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%ebp
mov    $0x6b,%ecx
jne    804df32 <__sprintf_chk@plt+0x4a72>
jmp    804df39 <__sprintf_chk@plt+0x4a79>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4c(%esp),%edi
lea    0x289(%edi),%esi
mov    %esi,0x48(%esp)
movb   $0x20,0x288(%edi)
jmp    804df17 <__sprintf_chk@plt+0x4a57>
lea    0x0(%esi),%esi
flds   0x8053d70
fxch   %st(1)
fucomi %st(1),%st
jae    804e450 <__sprintf_chk@plt+0x4f90>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%edi
xor    %eax,%eax
xor    %edx,%edx
test   %edi,%edi
jne    804e270 <__sprintf_chk@plt+0x4db0>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     804e628 <__sprintf_chk@plt+0x5168>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomip %st(1),%st
fstp   %st(0)
jp     804e272 <__sprintf_chk@plt+0x4db2>
je     804e5c8 <__sprintf_chk@plt+0x5108>
jmp    804e272 <__sprintf_chk@plt+0x4db2>
fstp   %st(0)
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
jns    804de6d <__sprintf_chk@plt+0x49ad>
fadds  0x8053cf0
jmp    804de6d <__sprintf_chk@plt+0x49ad>
xchg   %ax,%ax
fld    %st(0)
jmp    804dbba <__sprintf_chk@plt+0x46fa>
nop
fadds  0x8053cf0
jmp    804da7f <__sprintf_chk@plt+0x45bf>
nop
lea    0x0(%esi,%eiz,1),%esi
fadds  0x8053cf0
jmp    804daa4 <__sprintf_chk@plt+0x45e4>
nop
lea    0x0(%esi,%eiz,1),%esi
fadds  0x8053cf0
jmp    804da62 <__sprintf_chk@plt+0x45a2>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,0x3c(%esp)
ja     804e2ec <__sprintf_chk@plt+0x4e2c>
xor    %ebp,%ebp
cmpl   $0x1,0x38(%esp)
jbe    804def7 <__sprintf_chk@plt+0x4a37>
mov    0x40(%esp),%esi
mov    $0x1,%edx
xor    %ecx,%ecx
mov    %edx,%eax
xor    %edi,%edi
mov    $0x1,%ebp
mov    %ecx,%edx
mov    %ebx,0x20(%esp)
xchg   %ax,%ax
mov    %edx,%ecx
mov    %edi,%ebx
imul   %eax,%ebx
imul   %esi,%ecx
mul    %esi
add    %ebx,%ecx
add    %ecx,%edx
cmp    %edx,0x3c(%esp)
ja     804e330 <__sprintf_chk@plt+0x4e70>
jb     804e326 <__sprintf_chk@plt+0x4e66>
cmp    %eax,0x38(%esp)
ja     804e330 <__sprintf_chk@plt+0x4e70>
mov    0x20(%esp),%ebx
jmp    804def7 <__sprintf_chk@plt+0x4a37>
nop
add    $0x1,%ebp
cmp    $0x8,%ebp
jne    804e308 <__sprintf_chk@plt+0x4e48>
jmp    804e326 <__sprintf_chk@plt+0x4e66>
lea    0x0(%esi),%esi
mov    0x48(%esp),%esi
mov    $0xffffffff,%ebp
cmpl   $0x1,0x58(%esp)
je     804e528 <__sprintf_chk@plt+0x5068>
mov    0x58(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
jne    804e367 <__sprintf_chk@plt+0x4ea7>
add    0x50(%esp),%ebx
test   %ebx,%ebx
setg   %al
test   %al,%al
je     804e3e0 <__sprintf_chk@plt+0x4f20>
mov    0x7c(%esp),%edi
addl   $0x1,0x20(%esp)
adcl   $0x0,0x24(%esp)
test   %edi,%edi
je     804e3e0 <__sprintf_chk@plt+0x4f20>
mov    0x40(%esp),%eax
xor    %ebx,%ebx
mov    0x24(%esp),%edx
mov    %eax,%ecx
xor    0x20(%esp),%eax
or     %eax,%edx
jne    804e3e0 <__sprintf_chk@plt+0x4f20>
cmp    $0x8,%ebp
mov    %ecx,0x20(%esp)
mov    %ebx,0x24(%esp)
je     804e3e0 <__sprintf_chk@plt+0x4f20>
add    $0x1,%ebp
testb  $0x8,0xec(%esp)
movl   $0x1,0x20(%esp)
movl   $0x0,0x24(%esp)
jne    804e3e0 <__sprintf_chk@plt+0x4f20>
mov    0x68(%esp),%edi
lea    -0x1(%esi),%eax
movb   $0x30,-0x1(%esi)
sub    %edi,%eax
mov    %eax,%esi
mov    0x60(%esp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049080 <memcpy@plt>
xchg   %ax,%ax
mov    %esi,%ebx
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
sub    $0x1,%ebx
mov    0x24(%esp),%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8051fe0 <__sprintf_chk@plt+0x8b20>
mov    0x24(%esp),%edx
add    $0x30,%eax
mov    %al,(%ebx)
mov    0x20(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    %edx,%ecx
or     %eax,%ecx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
jne    804e3e8 <__sprintf_chk@plt+0x4f28>
jmp    804ded6 <__sprintf_chk@plt+0x4a16>
nop
lea    0x0(%esi,%eiz,1),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    804e230 <__sprintf_chk@plt+0x4d70>
lea    0x0(%esi),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    804db53 <__sprintf_chk@plt+0x4693>
lea    0x0(%esi),%esi
ja     804e510 <__sprintf_chk@plt+0x5050>
cmp    0x70(%esp),%esi
ja     804e510 <__sprintf_chk@plt+0x5050>
cmp    0x74(%esp),%ebx
jbe    804e754 <__sprintf_chk@plt+0x5294>
mov    $0x2,%ebx
jmp    804e014 <__sprintf_chk@plt+0x4b54>
lea    0x0(%esi,%eiz,1),%esi
mov    0x70(%esp),%eax
xor    %ebx,%ebx
mov    0x74(%esp),%edx
mov    %eax,%edi
or     %edx,%edi
setne  %bl
jmp    804e014 <__sprintf_chk@plt+0x4b54>
xchg   %ax,%ax
mov    0x20(%esp),%eax
movl   $0x0,0x5c(%esp)
and    $0x1,%eax
mov    %eax,0x58(%esp)
mov    %ebx,%eax
cltd
add    0x58(%esp),%eax
adc    0x5c(%esp),%edx
mov    %eax,%edi
xor    %eax,%eax
or     %edx,%edi
mov    0x50(%esp),%edi
setne  %al
add    %eax,%edi
cmp    $0x5,%edi
setg   %al
jmp    804e367 <__sprintf_chk@plt+0x4ea7>
cmp    %esi,0x20(%esp)
jae    804e039 <__sprintf_chk@plt+0x4b79>
mov    0x48(%esp),%esi
xor    %ebp,%ebp
jmp    804e349 <__sprintf_chk@plt+0x4e89>
lea    0x0(%esi),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    804dc9f <__sprintf_chk@plt+0x47df>
lea    0x0(%esi),%esi
xor    %eax,%eax
xor    %edx,%edx
jmp    804e272 <__sprintf_chk@plt+0x4db2>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
xor    %edx,%edx
jmp    804db91 <__sprintf_chk@plt+0x46d1>
fadds  0x8053cf0
fxch   %st(1)
jmp    804dbba <__sprintf_chk@plt+0x46fa>
xchg   %ax,%ax
jb     804e5fc <__sprintf_chk@plt+0x513c>
cmp    0x20(%esp),%esi
ja     804e0cc <__sprintf_chk@plt+0x4c0c>
cmp    $0x8,%ecx
nop
jne    804e040 <__sprintf_chk@plt+0x4b80>
mov    %ecx,%ebp
mov    0x48(%esp),%esi
jmp    804e349 <__sprintf_chk@plt+0x4e89>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,0x40(%esp)
sbb    %ebx,%ebx
not    %ebx
add    $0x3,%ebx
jmp    804e0bf <__sprintf_chk@plt+0x4bff>
fadds  0x8053cf0
fxch   %st(1)
jmp    804e25b <__sprintf_chk@plt+0x4d9b>
fadds  0x8053cf0
fxch   %st(1)
jmp    804db7e <__sprintf_chk@plt+0x46be>
fadds  0x8053cf0
fxch   %st(1)
jmp    804dcca <__sprintf_chk@plt+0x480a>
cmpl   $0x9,0x20(%esp)
ja     804e0d9 <__sprintf_chk@plt+0x4c19>
cmpl   $0x1,0x58(%esp)
je     804e6ea <__sprintf_chk@plt+0x522a>
mov    0x58(%esp),%ecx
test   %ebx,%ebx
setg   %al
test   %ecx,%ecx
sete   %dl
and    %edx,%eax
test   %al,%al
je     804e6ce <__sprintf_chk@plt+0x520e>
mov    0x70(%esp),%eax
add    $0x1,%eax
cmp    $0xa,%eax
mov    %eax,0x50(%esp)
je     804e70f <__sprintf_chk@plt+0x524f>
movzbl 0x50(%esp),%eax
xor    %ebx,%ebx
mov    0x4c(%esp),%edi
add    $0x30,%eax
mov    %al,0x287(%edi)
mov    0x68(%esp),%eax
lea    0x287(%edi),%esi
sub    %eax,%esi
mov    %eax,0x8(%esp)
mov    0x60(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049080 <memcpy@plt>
movl   $0x0,0x50(%esp)
jmp    804e349 <__sprintf_chk@plt+0x4e89>
mov    0x70(%esp),%eax
test   %eax,%eax
jne    804e68d <__sprintf_chk@plt+0x51cd>
testb  $0x8,0xec(%esp)
jne    804e6fe <__sprintf_chk@plt+0x523e>
movl   $0x0,0x50(%esp)
jmp    804e68d <__sprintf_chk@plt+0x51cd>
mov    0x70(%esp),%eax
and    $0x1,%eax
add    %ebx,%eax
cmp    $0x2,%eax
setg   %al
jmp    804e675 <__sprintf_chk@plt+0x51b5>
mov    0x48(%esp),%esi
movl   $0x0,0x50(%esp)
jmp    804e349 <__sprintf_chk@plt+0x4e89>
addl   $0x1,0x20(%esp)
mov    0x20(%esp),%esi
adcl   $0x0,0x24(%esp)
mov    0x24(%esp),%edi
mov    %esi,%eax
xor    $0xa,%eax
or     %edi,%eax
jne    804e76b <__sprintf_chk@plt+0x52ab>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movl   $0x0,0x50(%esp)
jmp    804e349 <__sprintf_chk@plt+0x4e89>
call   8049110 <__stack_chk_fail@plt>
mov    0x48(%esp),%edx
jmp    804df3f <__sprintf_chk@plt+0x4a7f>
mov    %edx,0x48(%esp)
jmp    804df5d <__sprintf_chk@plt+0x4a9d>
jb     804de4a <__sprintf_chk@plt+0x498a>
cmp    0x70(%esp),%esi
xchg   %ax,%ax
jae    804e502 <__sprintf_chk@plt+0x5042>
jmp    804de4a <__sprintf_chk@plt+0x498a>
xor    %ebx,%ebx
lea    0x0(%esi),%esi
jmp    804e6d6 <__sprintf_chk@plt+0x5216>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x40(%esp),%ebx
mov    0x48(%esp),%esi
test   %ebx,%ebx
je     804e8b0 <__sprintf_chk@plt+0x53f0>
xor    %edi,%edi
cmpb   $0x27,(%ebx)
je     804e828 <__sprintf_chk@plt+0x5368>
movl   $0x4,0xc(%esp)
movl   $0x8053d50,0x8(%esp)
movl   $0x8053d58,0x4(%esp)
mov    %ebx,(%esp)
call   8051420 <__sprintf_chk@plt+0x7f60>
test   %eax,%eax
js     804e838 <__sprintf_chk@plt+0x5378>
or     0x8053d50(,%eax,4),%edi
mov    $0x1,%edx
movl   $0x1,(%esi)
xor    %ecx,%ecx
movl   $0x0,0x4(%esi)
mov    0x44(%esp),%eax
mov    %edi,(%eax)
xor    %eax,%eax
or     %edx,%ecx
je     804e7f8 <__sprintf_chk@plt+0x5338>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80535e6,(%esp)
call   80491e0 <getenv@plt>
test   %eax,%eax
je     804e8a0 <__sprintf_chk@plt+0x53e0>
mov    $0x200,%eax
xor    %edx,%edx
mov    %eax,(%esi)
mov    $0x4,%eax
mov    %edx,0x4(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
mov    $0x4,%di
jmp    804e7a1 <__sprintf_chk@plt+0x52e1>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%eax
movl   $0x8053d2c,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8050910 <__sprintf_chk@plt+0x7450>
test   %eax,%eax
jne    804e900 <__sprintf_chk@plt+0x5440>
movzbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%al
jbe    804e895 <__sprintf_chk@plt+0x53d5>
mov    0x2c(%esp),%edx
cmp    %edx,%ebx
jne    804e888 <__sprintf_chk@plt+0x53c8>
jmp    804e918 <__sprintf_chk@plt+0x5458>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %edx,%ebx
je     804e918 <__sprintf_chk@plt+0x5458>
add    $0x1,%ebx
movzbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%al
ja     804e880 <__sprintf_chk@plt+0x53c0>
mov    (%esi),%edx
mov    0x4(%esi),%ecx
jmp    804e7e0 <__sprintf_chk@plt+0x5320>
nop
mov    $0x400,%eax
xor    %edx,%edx
jmp    804e813 <__sprintf_chk@plt+0x5353>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8053d17,(%esp)
call   80491e0 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804e796 <__sprintf_chk@plt+0x52d6>
movl   $0x8053d22,(%esp)
call   80491e0 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804e796 <__sprintf_chk@plt+0x52d6>
movl   $0x80535e6,(%esp)
call   80491e0 <getenv@plt>
test   %eax,%eax
je     804e942 <__sprintf_chk@plt+0x5482>
mov    $0x200,%edx
xor    %ecx,%ecx
mov    %edx,(%esi)
xor    %edi,%edi
mov    %ecx,0x4(%esi)
jmp    804e7e0 <__sprintf_chk@plt+0x5320>
nop
mov    0x44(%esp),%edx
mov    0x4(%esi),%ecx
movl   $0x0,(%edx)
mov    (%esi),%edx
jmp    804e7e8 <__sprintf_chk@plt+0x5328>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x42,-0x1(%edx)
je     804e930 <__sprintf_chk@plt+0x5470>
or     $0x80,%edi
or     $0x20,%edi
jmp    804e895 <__sprintf_chk@plt+0x53d5>
lea    0x0(%esi,%eiz,1),%esi
or     $0x180,%edi
cmpb   $0x69,-0x2(%edx)
jne    804e895 <__sprintf_chk@plt+0x53d5>
jmp    804e924 <__sprintf_chk@plt+0x5464>
mov    $0x400,%edx
xor    %ecx,%ecx
jmp    804e8f3 <__sprintf_chk@plt+0x5433>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x28,%esp
mov    0x8057264,%ebx
cmpl   $0x2,0x30(%esp)
movl   $0x0,0x8057264
00
je     804e980 <__sprintf_chk@plt+0x54c0>
mov    %ebx,0x8057264
movl   $0x0,0x8057240
00
add    $0x28,%esp
pop    %ebx
ret
mov    0x34(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x8053da0,0xc(%esp)
movl   $0x8053d90,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
call   8049270 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804e96b <__sprintf_chk@plt+0x54ab>
cmp    $0x68,%eax
je     804e9f8 <__sprintf_chk@plt+0x5538>
cmp    $0x76,%eax
jne    804e96b <__sprintf_chk@plt+0x54ab>
lea    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8057260,%eax
mov    %eax,(%esp)
call   8050500 <__sprintf_chk@plt+0x7040>
movl   $0x0,(%esp)
call   8049240 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,(%esp)
call   *0x44(%esp)
jmp    804e9bb <__sprintf_chk@plt+0x54fb>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804ea93 <__sprintf_chk@plt+0x55d3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80493b0 <strrchr@plt>
test   %eax,%eax
je     804ea7f <__sprintf_chk@plt+0x55bf>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804ea7f <__sprintf_chk@plt+0x55bf>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8053e08,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804ea7f <__sprintf_chk@plt+0x55bf>
mov    $0x3,%ecx
mov    $0x8053e10,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804ea7f <__sprintf_chk@plt+0x55bf>
lea    0x4(%eax),%ebx
mov    %ebx,0x8057200
mov    %ebx,0x80577a0
mov    %ebx,0x8057220
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8057204,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8053dd0,(%esp)
mov    %eax,0xc(%esp)
call   8049160 <fwrite@plt>
call   8049440 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804eae1 <__sprintf_chk@plt+0x5621>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049440 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804eb20 <__sprintf_chk@plt+0x5660>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   80517a0 <__sprintf_chk@plt+0x82e0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804eb88 <__sprintf_chk@plt+0x56c8>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804eb70 <__sprintf_chk@plt+0x56b0>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x2d,0x3(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x38,0x4(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x0,0x5(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x60,(%esi)
mov    $0x8053e21,%eax
mov    $0x8053e14,%edx
cmovne %edx,%eax
jmp    804eb18 <__sprintf_chk@plt+0x5658>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8053e1b,%eax
cmp    $0x7,%edi
mov    $0x80536b4,%edx
cmovne %edx,%eax
jmp    804eb18 <__sprintf_chk@plt+0x5658>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804eb70 <__sprintf_chk@plt+0x56b0>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x31,0x2(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x38,0x3(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x30,0x4(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x33,0x5(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x30,0x6(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x0,0x7(%eax)
jne    804eb70 <__sprintf_chk@plt+0x56b0>
cmpb   $0x60,(%esi)
mov    $0x8053e1d,%eax
mov    $0x8053e18,%edx
cmovne %edx,%eax
jmp    804eb18 <__sprintf_chk@plt+0x5658>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049180 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804f4b8 <__sprintf_chk@plt+0x5ff8>
mov    0x94(%esp),%eax
jmp    *0x8053e60(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804f2c0 <__sprintf_chk@plt+0x5e00>
test   %al,%al
je     804f2d3 <__sprintf_chk@plt+0x5e13>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804f2a8 <__sprintf_chk@plt+0x5de8>
cmpb   $0x0,0x58(%esp)
je     804f2a8 <__sprintf_chk@plt+0x5de8>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804f2a8 <__sprintf_chk@plt+0x5de8>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   80490e0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804f340 <__sprintf_chk@plt+0x5e80>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804f058 <__sprintf_chk@plt+0x5b98>
movzbl %bl,%eax
jmp    *0x8053e84(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804ee98 <__sprintf_chk@plt+0x59d8>
cmpl   $0x3,0x94(%esp)
jne    804edf8 <__sprintf_chk@plt+0x5938>
testb  $0x4,0x98(%esp)
je     804edf8 <__sprintf_chk@plt+0x5938>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804edf8 <__sprintf_chk@plt+0x5938>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804edf8 <__sprintf_chk@plt+0x5938>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804edf8 <__sprintf_chk@plt+0x5938>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804edf8 <__sprintf_chk@plt+0x5938>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmp    %edi,%ebp
jae    804edbe <__sprintf_chk@plt+0x58fe>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804edce <__sprintf_chk@plt+0x590e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804edde <__sprintf_chk@plt+0x591e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804edee <__sprintf_chk@plt+0x592e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804ee06 <__sprintf_chk@plt+0x5946>
cmpb   $0x0,0x5a(%esp)
jne    804ee2b <__sprintf_chk@plt+0x596b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804ee2b <__sprintf_chk@plt+0x596b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804ee32 <__sprintf_chk@plt+0x5972>
cmpb   $0x0,0x24(%esp)
je     804ee48 <__sprintf_chk@plt+0x5988>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmp    %edi,%ebp
jae    804ee45 <__sprintf_chk@plt+0x5985>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804ee56 <__sprintf_chk@plt+0x5996>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804ec98 <__sprintf_chk@plt+0x57d8>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804f4a8 <__sprintf_chk@plt+0x5fe8>
test   %al,%al
jne    804edf8 <__sprintf_chk@plt+0x5938>
test   %esi,%esi
jne    804edf8 <__sprintf_chk@plt+0x5938>
cmpl   $0x2,0x94(%esp)
jne    804edf8 <__sprintf_chk@plt+0x5938>
nop
cmpb   $0x0,0x2f(%esp)
je     804edf8 <__sprintf_chk@plt+0x5938>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804f5d2 <__sprintf_chk@plt+0x6112>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804f51b <__sprintf_chk@plt+0x605b>
cmpb   $0x0,0x58(%esp)
je     804edf8 <__sprintf_chk@plt+0x5938>
mov    %eax,%ebx
jmp    804ee32 <__sprintf_chk@plt+0x5972>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804ef23 <__sprintf_chk@plt+0x5a63>
nop
mov    $0x66,%eax
jmp    804ef23 <__sprintf_chk@plt+0x5a63>
nop
mov    $0x76,%eax
jmp    804ef23 <__sprintf_chk@plt+0x5a63>
nop
mov    $0x6e,%eax
jmp    804ef15 <__sprintf_chk@plt+0x5a55>
nop
mov    $0x74,%eax
jmp    804ef15 <__sprintf_chk@plt+0x5a55>
nop
cmpb   $0x0,0x58(%esp)
je     804f490 <__sprintf_chk@plt+0x5fd0>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmp    %edi,%ebp
jae    804ef82 <__sprintf_chk@plt+0x5ac2>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804efc8 <__sprintf_chk@plt+0x5b08>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804efc8 <__sprintf_chk@plt+0x5b08>
cmp    %eax,%edi
ja     804f530 <__sprintf_chk@plt+0x6070>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804efbe <__sprintf_chk@plt+0x5afe>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804ee06 <__sprintf_chk@plt+0x5946>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804ef23 <__sprintf_chk@plt+0x5a63>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804effe <__sprintf_chk@plt+0x5b3e>
cmpb   $0x0,0x2f(%esp)
je     804effe <__sprintf_chk@plt+0x5b3e>
test   %dl,%dl
jne    804ee48 <__sprintf_chk@plt+0x5988>
mov    %ebx,%eax
jmp    804ef15 <__sprintf_chk@plt+0x5a55>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804edf8 <__sprintf_chk@plt+0x5938>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmp    %edi,%ebp
jae    804f02d <__sprintf_chk@plt+0x5b6d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804f03d <__sprintf_chk@plt+0x5b7d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804f04d <__sprintf_chk@plt+0x5b8d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804edf8 <__sprintf_chk@plt+0x5938>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804f350 <__sprintf_chk@plt+0x5e90>
call   80494a0 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804edf8 <__sprintf_chk@plt+0x5938>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804f104 <__sprintf_chk@plt+0x5c44>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmp    %edi,%ebp
jae    804f0b3 <__sprintf_chk@plt+0x5bf3>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804f0c6 <__sprintf_chk@plt+0x5c06>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804f0dc <__sprintf_chk@plt+0x5c1c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804ee4b <__sprintf_chk@plt+0x598b>
cmp    %edi,%ebp
jae    804f0f9 <__sprintf_chk@plt+0x5c39>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804f0a0 <__sprintf_chk@plt+0x5be0>
cmpb   $0x0,0x24(%esp)
je     804f0e5 <__sprintf_chk@plt+0x5c25>
cmp    %edi,%ebp
jae    804f117 <__sprintf_chk@plt+0x5c57>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804f0e5 <__sprintf_chk@plt+0x5c25>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804f5d7 <__sprintf_chk@plt+0x6117>
test   %edi,%edi
je     804f4dd <__sprintf_chk@plt+0x601d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8053e1b,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8053e1b,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
lea    0x0(%esi,%eiz,1),%esi
je     804f1ec <__sprintf_chk@plt+0x5d2c>
mov    0x94(%esp),%edx
mov    $0x8053e25,%eax
call   804eaf0 <__sprintf_chk@plt+0x5630>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x80536b4,%eax
call   804eaf0 <__sprintf_chk@plt+0x5630>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804f21a <__sprintf_chk@plt+0x5d5a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804f21a <__sprintf_chk@plt+0x5d5a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804f20f <__sprintf_chk@plt+0x5d4f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804f208 <__sprintf_chk@plt+0x5d48>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   80492a0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80536b4,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804f5f3 <__sprintf_chk@plt+0x6133>
test   %edi,%edi
je     804f4fc <__sprintf_chk@plt+0x603c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80536b4,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804ed30 <__sprintf_chk@plt+0x5870>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804ecb8 <__sprintf_chk@plt+0x57f8>
test   %ebp,%ebp
jne    804f2ec <__sprintf_chk@plt+0x5e2c>
cmpl   $0x2,0x94(%esp)
jne    804f2ec <__sprintf_chk@plt+0x5e2c>
cmpb   $0x0,0x2f(%esp)
jne    804eea8 <__sprintf_chk@plt+0x59e8>
cmpb   $0x0,0x2f(%esp)
jne    804f322 <__sprintf_chk@plt+0x5e62>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804f322 <__sprintf_chk@plt+0x5e62>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804f322 <__sprintf_chk@plt+0x5e62>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804f317 <__sprintf_chk@plt+0x5e57>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804f310 <__sprintf_chk@plt+0x5e50>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804eef2 <__sprintf_chk@plt+0x5a32>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804eef2 <__sprintf_chk@plt+0x5a32>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804ed30 <__sprintf_chk@plt+0x5870>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804f4bd <__sprintf_chk@plt+0x5ffd>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   80491b0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804f53d <__sprintf_chk@plt+0x607d>
cmp    $0xffffffff,%eax
je     804f558 <__sprintf_chk@plt+0x6098>
cmp    $0xfffffffe,%eax
je     804f573 <__sprintf_chk@plt+0x60b3>
cmpb   $0x0,0x2f(%esp)
je     804f41f <__sprintf_chk@plt+0x5f5f>
cmpl   $0x2,0x94(%esp)
jne    804f41f <__sprintf_chk@plt+0x5f5f>
cmp    $0x1,%eax
je     804f41f <__sprintf_chk@plt+0x5f5f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804f418 <__sprintf_chk@plt+0x5f58>
movzbl %al,%eax
jmp    *0x8054080(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804f400 <__sprintf_chk@plt+0x5f40>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049140 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8049090 <mbsinit@plt>
test   %eax,%eax
je     804f391 <__sprintf_chk@plt+0x5ed1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804f083 <__sprintf_chk@plt+0x5bc3>
and    0x58(%esp),%dl
jmp    804f08d <__sprintf_chk@plt+0x5bcd>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804eea8 <__sprintf_chk@plt+0x59e8>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804edf8 <__sprintf_chk@plt+0x5938>
add    $0x1,%esi
jmp    804ec98 <__sprintf_chk@plt+0x57d8>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804ee79 <__sprintf_chk@plt+0x59b9>
call   8049440 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   80492a0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804f36e <__sprintf_chk@plt+0x5eae>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8053e1b,0x3c(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80536b4,0x3c(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
cmpb   $0x0,0x2f(%esp)
je     804ef23 <__sprintf_chk@plt+0x5a63>
jmp    804eea8 <__sprintf_chk@plt+0x59e8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804efae <__sprintf_chk@plt+0x5aee>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804f465 <__sprintf_chk@plt+0x5fa5>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804f465 <__sprintf_chk@plt+0x5fa5>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804f5c8 <__sprintf_chk@plt+0x6108>
cmpb   $0x0,(%eax)
je     804f5c8 <__sprintf_chk@plt+0x6108>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804f5b6 <__sprintf_chk@plt+0x60f6>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804f5c0 <__sprintf_chk@plt+0x6100>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804f5b0 <__sprintf_chk@plt+0x60f0>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804f465 <__sprintf_chk@plt+0x5fa5>
call   8049110 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8053e1b,0x3c(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80536b4,0x3c(%esp)
jmp    804ec78 <__sprintf_chk@plt+0x57b8>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049330 <__errno_location@plt>
test   %edi,%edi
mov    0x80571d0,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804f79c <__sprintf_chk@plt+0x62dc>
cmp    0x80571dc,%edi
jb     804f6a8 <__sprintf_chk@plt+0x61e8>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804f7a1 <__sprintf_chk@plt+0x62e1>
cmp    $0x80571d4,%esi
lea    0x0(,%ebp,8),%eax
je     804f770 <__sprintf_chk@plt+0x62b0>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80506c0 <__sprintf_chk@plt+0x7200>
mov    %eax,%esi
mov    %eax,0x80571d0
mov    0x80571dc,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049310 <memset@plt>
mov    %ebp,0x80571dc
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
cmp    %eax,%ebp
ja     804f757 <__sprintf_chk@plt+0x6297>
lea    0x1(%eax),%ebp
cmp    $0x80577c0,%esi
mov    %ebp,(%edi)
je     804f712 <__sprintf_chk@plt+0x6252>
mov    %esi,(%esp)
call   8049070 <free@plt>
mov    %ebp,(%esp)
call   8050650 <__sprintf_chk@plt+0x7190>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   80506c0 <__sprintf_chk@plt+0x7200>
mov    0x80571d8,%edx
mov    %eax,%esi
mov    %eax,0x80571d0
mov    0x80571d4,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804f67f <__sprintf_chk@plt+0x61bf>
call   8049440 <abort@plt>
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049330 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x80578c0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   8050860 <__sprintf_chk@plt+0x73a0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x80578c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804f810 <__sprintf_chk@plt+0x6350>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x80578c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x80578c0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x80578c0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x80578c0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804f8c3 <__sprintf_chk@plt+0x6403>
test   %ecx,%ecx
je     804f8c3 <__sprintf_chk@plt+0x6403>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049440 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x80578c0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049330 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x80578c0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049330 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   8050650 <__sprintf_chk@plt+0x7190>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804ebe0 <__sprintf_chk@plt+0x5720>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804f9f8 <__sprintf_chk@plt+0x6538>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804f930 <__sprintf_chk@plt+0x6470>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x80571dc,%edi
mov    0x80571d0,%esi
cmp    $0x1,%edi
jbe    804fa73 <__sprintf_chk@plt+0x65b3>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8049070 <free@plt>
cmp    %edi,%ebx
jne    804fa60 <__sprintf_chk@plt+0x65a0>
mov    0x4(%esi),%eax
cmp    $0x80577c0,%eax
je     804fa99 <__sprintf_chk@plt+0x65d9>
mov    %eax,(%esp)
call   8049070 <free@plt>
movl   $0x100,0x80571d4
00
movl   $0x80577c0,0x80571d8
08
cmp    $0x80571d4,%esi
je     804fab3 <__sprintf_chk@plt+0x65f3>
mov    %esi,(%esp)
call   8049070 <free@plt>
movl   $0x80571d4,0x80571d0
08
movl   $0x1,0x80571dc
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x80578c0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x80578c0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x80578c0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x80578c0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804eac0 <__sprintf_chk@plt+0x5600>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f610 <__sprintf_chk@plt+0x6150>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804eac0 <__sprintf_chk@plt+0x5600>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f610 <__sprintf_chk@plt+0x6150>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804fb50 <__sprintf_chk@plt+0x6690>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804fb80 <__sprintf_chk@plt+0x66c0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x80578c0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x80578c4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x80578c8,%eax
mov    %eax,0x18(%esp)
mov    0x80578cc,%eax
mov    %eax,0x1c(%esp)
mov    0x80578d0,%eax
mov    %eax,0x20(%esp)
mov    0x80578d4,%eax
mov    %eax,0x24(%esp)
mov    0x80578d8,%eax
mov    %eax,0x28(%esp)
mov    0x80578dc,%eax
mov    %eax,0x2c(%esp)
mov    0x80578e0,%eax
mov    %eax,0x30(%esp)
mov    0x80578e4,%eax
mov    %eax,0x34(%esp)
mov    0x80578e8,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x80578ec,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804f610 <__sprintf_chk@plt+0x6150>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fc10 <__sprintf_chk@plt+0x6750>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804fc10 <__sprintf_chk@plt+0x6750>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fc10 <__sprintf_chk@plt+0x6750>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x80578c0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x80578c4,%eax
mov    %eax,0x14(%esp)
mov    0x80578c8,%eax
mov    %eax,0x18(%esp)
mov    0x80578cc,%eax
mov    %eax,0x1c(%esp)
mov    0x80578d0,%eax
mov    %eax,0x20(%esp)
mov    0x80578d4,%eax
mov    %eax,0x24(%esp)
mov    0x80578d8,%eax
mov    %eax,0x28(%esp)
mov    0x80578dc,%eax
mov    %eax,0x2c(%esp)
mov    0x80578e0,%eax
mov    %eax,0x30(%esp)
mov    0x80578e4,%eax
mov    %eax,0x34(%esp)
mov    0x80578e8,%eax
mov    %eax,0x38(%esp)
mov    0x80578ec,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804f890 <__sprintf_chk@plt+0x63d0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f610 <__sprintf_chk@plt+0x6150>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804fd50 <__sprintf_chk@plt+0x6890>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804fd50 <__sprintf_chk@plt+0x6890>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804fd50 <__sprintf_chk@plt+0x6890>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x80571a0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x80571a0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x80571a0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x80571a0,0x4(%esp)
jmp    804f610 <__sprintf_chk@plt+0x6150>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     80503f8 <__sprintf_chk@plt+0x6f38>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8054164,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8054177,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8054400,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80493f0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80541d4,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     8050420 <__sprintf_chk@plt+0x6f60>
jmp    *0x80543d8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054338,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8049100 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80493f0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054368,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8049100 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80493f0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049440 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805417b,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493f0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805418b,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493f0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80541a2,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493f0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80542a0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8049100 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    805009f <__sprintf_chk@plt+0x6bdf>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80542c0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049100 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    805009f <__sprintf_chk@plt+0x6bdf>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80542e4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049100 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    805009f <__sprintf_chk@plt+0x6bdf>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805430c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049100 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    805009f <__sprintf_chk@plt+0x6bdf>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8054170,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    804ff91 <__sprintf_chk@plt+0x6ad1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805439c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8049100 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    805012a <__sprintf_chk@plt+0x6c6a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     80504ca <__sprintf_chk@plt+0x700a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    80504c0 <__sprintf_chk@plt+0x7000>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ff40 <__sprintf_chk@plt+0x6a80>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     8050522 <__sprintf_chk@plt+0x7062>
add    $0x1,%eax
cmp    $0xa,%eax
jne    8050510 <__sprintf_chk@plt+0x7050>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804ff40 <__sprintf_chk@plt+0x6a80>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8050500 <__sprintf_chk@plt+0x7040>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x80541be,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x8053444,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805345a,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
movl   $0x8052ef4,0xc(%esp)
movl   $0x805346e,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049350 <__printf_chk@plt>
mov    0x8057260,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052f1c,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049200 <malloc@plt>
test   %eax,%eax
je     8050669 <__sprintf_chk@plt+0x71a9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     8050664 <__sprintf_chk@plt+0x71a4>
lea    0x0(%esi),%esi
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     80506a9 <__sprintf_chk@plt+0x71e9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    8050650 <__sprintf_chk@plt+0x7190>
call   80508c0 <__sprintf_chk@plt+0x7400>
xchg   %ax,%ax
jmp    8050650 <__sprintf_chk@plt+0x7190>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     80506e8 <__sprintf_chk@plt+0x7228>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <realloc@plt>
test   %eax,%eax
je     80506fb <__sprintf_chk@plt+0x723b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     80506d0 <__sprintf_chk@plt+0x7210>
mov    %eax,(%esp)
call   8049070 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     80506e0 <__sprintf_chk@plt+0x7220>
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     8050743 <__sprintf_chk@plt+0x7283>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    80506c0 <__sprintf_chk@plt+0x7200>
call   80508c0 <__sprintf_chk@plt+0x7400>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     8050790 <__sprintf_chk@plt+0x72d0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    80507a8 <__sprintf_chk@plt+0x72e8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    80506c0 <__sprintf_chk@plt+0x7200>
xchg   %ax,%ax
test   %ecx,%ecx
jne    8050779 <__sprintf_chk@plt+0x72b9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    8050779 <__sprintf_chk@plt+0x72b9>
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     80507e8 <__sprintf_chk@plt+0x7328>
cmp    $0xaaaaaaa9,%eax
ja     80507f4 <__sprintf_chk@plt+0x7334>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    80506c0 <__sprintf_chk@plt+0x7200>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    80507d0 <__sprintf_chk@plt+0x7310>
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8050650 <__sprintf_chk@plt+0x7190>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049310 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80494b0 <calloc@plt>
test   %eax,%eax
je     805084f <__sprintf_chk@plt+0x738f>
add    $0x1c,%esp
ret
nop
call   80508c0 <__sprintf_chk@plt+0x7400>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   8050650 <__sprintf_chk@plt+0x7190>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049080 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80492a0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   8050860 <__sprintf_chk@plt+0x73a0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805442f,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    0x8057184,%edx
movl   $0x80545b2,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <error@plt>
call   8049440 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x78(%esp),%esi
mov    0x70(%esp),%edi
mov    0x74(%esp),%ebx
cmp    $0x24,%esi
ja     805111f <__sprintf_chk@plt+0x7c5f>
movzbl (%edi),%edx
lea    0x4c(%esp),%eax
test   %ebx,%ebx
cmove  %eax,%ebx
mov    %edx,0x18(%esp)
call   80494a0 <__ctype_b_loc@plt>
mov    0x18(%esp),%edx
mov    (%eax),%ebp
mov    %edi,%eax
jmp    8050956 <__sprintf_chk@plt+0x7496>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%edx
movzbl %dl,%ecx
testb  $0x20,0x1(%ebp,%ecx,2)
jne    8050950 <__sprintf_chk@plt+0x7490>
cmp    $0x2d,%dl
jne    8050978 <__sprintf_chk@plt+0x74b8>
mov    $0x4,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049330 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebp
mov    %esi,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   80490b0 <__strtoull_internal@plt>
mov    (%ebx),%esi
cmp    %edi,%esi
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
je     8050a79 <__sprintf_chk@plt+0x75b9>
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    80509e8 <__sprintf_chk@plt+0x7528>
xor    %edi,%edi
mov    0x80(%esp),%ebp
test   %ebp,%ebp
je     80509ca <__sprintf_chk@plt+0x750a>
movzbl (%esi),%edx
test   %dl,%dl
jne    80509f8 <__sprintf_chk@plt+0x7538>
mov    0x7c(%esp),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%esi)
mov    %edi,%eax
mov    %edx,0x4(%esi)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x22,%eax
mov    $0x1,%edi
jne    8050965 <__sprintf_chk@plt+0x74a5>
jmp    80509b8 <__sprintf_chk@plt+0x74f8>
movsbl %dl,%eax
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   8049280 <strchr@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
je     8050ad0 <__sprintf_chk@plt+0x7610>
mov    0x80(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   8049280 <strchr@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
je     8050a5d <__sprintf_chk@plt+0x759d>
movzbl 0x1(%esi),%eax
cmp    $0x44,%al
je     805109b <__sprintf_chk@plt+0x7bdb>
cmp    $0x69,%al
je     8051082 <__sprintf_chk@plt+0x7bc2>
cmp    $0x42,%al
je     805109b <__sprintf_chk@plt+0x7bdb>
mov    $0x1,%ebp
mov    $0x400,%eax
sub    $0x42,%edx
cmp    $0x35,%dl
ja     8050ad0 <__sprintf_chk@plt+0x7610>
movzbl %dl,%edx
jmp    *0x8054478(,%edx,4)
mov    0x80(%esp),%eax
test   %eax,%eax
je     8050965 <__sprintf_chk@plt+0x74a5>
movzbl (%edi),%edx
test   %dl,%dl
je     8050965 <__sprintf_chk@plt+0x74a5>
movsbl %dl,%eax
xor    %edi,%edi
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   8049280 <strchr@plt>
mov    0x20(%esp),%edx
movl   $0x1,0x18(%esp)
movl   $0x0,0x1c(%esp)
test   %eax,%eax
jne    8050a1e <__sprintf_chk@plt+0x755e>
jmp    8050965 <__sprintf_chk@plt+0x74a5>
mov    0x7c(%esp),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%esi)
mov    %edi,%eax
mov    %edx,0x4(%esi)
or     $0x2,%eax
jmp    805096a <__sprintf_chk@plt+0x74aa>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
cmp    %edx,0x1c(%esp)
mov    %eax,%ecx
mov    %edx,0x30(%esp)
ja     8051105 <__sprintf_chk@plt+0x7c45>
jb     8050b2c <__sprintf_chk@plt+0x766c>
cmp    %ecx,0x18(%esp)
ja     8051105 <__sprintf_chk@plt+0x7c45>
mov    0x1c(%esp),%eax
mov    0x24(%esp),%edx
imul   0x18(%esp),%edx
imul   0x20(%esp),%eax
add    %edx,%eax
mov    %eax,0x2c(%esp)
mov    0x18(%esp),%eax
mull   0x20(%esp)
mov    %eax,0x18(%esp)
mov    0x2c(%esp),%eax
mov    %edx,0x1c(%esp)
add    %eax,0x1c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jb     8051105 <__sprintf_chk@plt+0x7c45>
ja     8050b76 <__sprintf_chk@plt+0x76b6>
cmp    0x18(%esp),%ecx
jb     8051105 <__sprintf_chk@plt+0x7c45>
mov    0x20(%esp),%eax
mov    0x1c(%esp),%ecx
mov    0x24(%esp),%edx
imul   %eax,%ecx
mov    0x18(%esp),%eax
imul   %edx,%eax
add    %eax,%ecx
mov    0x18(%esp),%eax
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
or     %eax,%edi
add    %ebp,%esi
mov    %edi,%eax
or     $0x2,%eax
mov    %esi,(%ebx)
cmpb   $0x0,(%esi)
cmovne %eax,%edi
jmp    80509ca <__sprintf_chk@plt+0x750a>
cmpl   $0x7fffffff,0x1c(%esp)
ja     80510b7 <__sprintf_chk@plt+0x7bf7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0x1,%eax,%edx
add    %eax,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
cmpl   $0x7fffff,0x1c(%esp)
ja     80510b7 <__sprintf_chk@plt+0x7bf7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0x9,%eax,%edx
shl    $0x9,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x7,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    8050c98 <__sprintf_chk@plt+0x77d8>
ja     8050c55 <__sprintf_chk@plt+0x7795>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8050ca2 <__sprintf_chk@plt+0x77e2>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     80510aa <__sprintf_chk@plt+0x7bea>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    8050c49 <__sprintf_chk@plt+0x7789>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8050c8b <__sprintf_chk@plt+0x77cb>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x8,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    8050d46 <__sprintf_chk@plt+0x7886>
ja     8050d03 <__sprintf_chk@plt+0x7843>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8050d50 <__sprintf_chk@plt+0x7890>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     80510aa <__sprintf_chk@plt+0x7bea>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    8050cf7 <__sprintf_chk@plt+0x7837>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8050d39 <__sprintf_chk@plt+0x7879>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x4,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jb     80510d1 <__sprintf_chk@plt+0x7c11>
ja     8050dc1 <__sprintf_chk@plt+0x7901>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     80510d1 <__sprintf_chk@plt+0x7c11>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
jne    8050da3 <__sprintf_chk@plt+0x78e3>
mov    0x2c(%esp),%eax
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x5,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
jmp    8050e9a <__sprintf_chk@plt+0x79da>
ja     8050e55 <__sprintf_chk@plt+0x7995>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     8050ea4 <__sprintf_chk@plt+0x79e4>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
je     8050e02 <__sprintf_chk@plt+0x7942>
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jae    8050e49 <__sprintf_chk@plt+0x7989>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8050e8b <__sprintf_chk@plt+0x79cb>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
cmp    %edx,0x1c(%esp)
ja     80510b7 <__sprintf_chk@plt+0x7bf7>
jb     8050ef6 <__sprintf_chk@plt+0x7a36>
cmp    %eax,0x18(%esp)
ja     80510b7 <__sprintf_chk@plt+0x7bf7>
mov    0x1c(%esp),%edx
mov    0x24(%esp),%eax
imul   0x20(%esp),%edx
imul   0x18(%esp),%eax
lea    (%eax,%edx,1),%ecx
jmp    8050b8e <__sprintf_chk@plt+0x76ce>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x3,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jb     80510eb <__sprintf_chk@plt+0x7c2b>
ja     8050f6a <__sprintf_chk@plt+0x7aaa>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     80510eb <__sprintf_chk@plt+0x7c2b>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
jne    8050f4c <__sprintf_chk@plt+0x7a8c>
jmp    8050e02 <__sprintf_chk@plt+0x7942>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8051eb0 <__sprintf_chk@plt+0x89f0>
mov    $0x6,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    8051039 <__sprintf_chk@plt+0x7b79>
ja     8050ffa <__sprintf_chk@plt+0x7b3a>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8051043 <__sprintf_chk@plt+0x7b83>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     80510aa <__sprintf_chk@plt+0x7bea>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    8050fee <__sprintf_chk@plt+0x7b2e>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8051030 <__sprintf_chk@plt+0x7b70>
cmpl   $0x3fffff,0x1c(%esp)
ja     80510b7 <__sprintf_chk@plt+0x7bf7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0xa,%eax,%edx
shl    $0xa,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
xor    %eax,%eax
cmpb   $0x42,0x2(%esi)
sete   %al
mov    %eax,%ebp
mov    $0x400,%eax
lea    0x1(%ebp,%ebp,1),%ebp
jmp    8050a67 <__sprintf_chk@plt+0x75a7>
mov    $0x2,%ebp
mov    $0x3e8,%eax
jmp    8050a67 <__sprintf_chk@plt+0x75a7>
mov    0x2c(%esp),%eax
mov    0x74(%esp),%ebx
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%eax
movl   $0xffffffff,0x1c(%esp)
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8050df7 <__sprintf_chk@plt+0x7937>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8050fa0 <__sprintf_chk@plt+0x7ae0>
mov    $0x1,%eax
movl   $0xffffffff,0x18(%esp)
movl   $0xffffffff,0x1c(%esp)
jmp    8050ba4 <__sprintf_chk@plt+0x76e4>
movl   $0x8054550,0xc(%esp)
movl   $0x60,0x8(%esp)
movl   $0x8054440,0x4(%esp)
movl   $0x8054450,(%esp)
call   8049490 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049340 <fileno@plt>
test   %eax,%eax
js     80511d8 <__sprintf_chk@plt+0x7d18>
mov    %ebx,(%esp)
call   8049210 <__freading@plt>
test   %eax,%eax
jne    80511a8 <__sprintf_chk@plt+0x7ce8>
mov    %ebx,(%esp)
call   8051310 <__sprintf_chk@plt+0x7e50>
test   %eax,%eax
je     80511d8 <__sprintf_chk@plt+0x7d18>
call   8049330 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   80490c0 <fclose@plt>
test   %edi,%edi
je     805119a <__sprintf_chk@plt+0x7cda>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049340 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   80493e0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8051172 <__sprintf_chk@plt+0x7cb2>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    80490c0 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    8051250 <__sprintf_chk@plt+0x7d90>
mov    0x80578f0,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     80512f8 <__sprintf_chk@plt+0x7e38>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   80492f0 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8051270 <__sprintf_chk@plt+0x7db0>
movl   $0x1,0x80578f0
00
test   %ebx,%ebx
js     8051247 <__sprintf_chk@plt+0x7d87>
cmpl   $0xffffffff,0x80578f0
je     80512a0 <__sprintf_chk@plt+0x7de0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   80492f0 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8049330 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    8051230 <__sprintf_chk@plt+0x7d70>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
test   %eax,%eax
mov    %eax,%ebx
js     8051247 <__sprintf_chk@plt+0x7d87>
movl   $0xffffffff,0x80578f0
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80492f0 <fcntl@plt>
test   %eax,%eax
js     80512d4 <__sprintf_chk@plt+0x7e14>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   80492f0 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    8051247 <__sprintf_chk@plt+0x7d87>
call   8049330 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   8049470 <close@plt>
mov    %edi,(%esi)
jmp    8051247 <__sprintf_chk@plt+0x7d87>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7d30>
mov    %eax,%ebx
jmp    805123a <__sprintf_chk@plt+0x7d7a>
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8051328 <__sprintf_chk@plt+0x7e68>
mov    %ebx,(%esp)
call   8049210 <__freading@plt>
test   %eax,%eax
jne    8051338 <__sprintf_chk@plt+0x7e78>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049030 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8051328 <__sprintf_chk@plt+0x7e68>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   8051370 <__sprintf_chk@plt+0x7eb0>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049030 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     80513b0 <__sprintf_chk@plt+0x7ef0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80490d0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    805138f <__sprintf_chk@plt+0x7ecf>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    805138f <__sprintf_chk@plt+0x7ecf>
mov    %ebx,(%esp)
call   8049340 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   80493e0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     80513f7 <__sprintf_chk@plt+0x7f37>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    80513ef <__sprintf_chk@plt+0x7f2f>
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x1,(%esp)
call   804b9f0 <__sprintf_chk@plt+0x2530>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   80492a0 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     8051502 <__sprintf_chk@plt+0x8042>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    80514a6 <__sprintf_chk@plt+0x7fe6>
mov    0x48(%esp),%eax
test   %eax,%eax
je     80514d8 <__sprintf_chk@plt+0x8018>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   80490e0 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     80514e0 <__sprintf_chk@plt+0x8020>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049430 <strncmp@plt>
test   %eax,%eax
jne    8051494 <__sprintf_chk@plt+0x7fd4>
mov    %edi,(%esp)
call   80492a0 <strlen@plt>
cmp    %ebp,%eax
je     80514f8 <__sprintf_chk@plt+0x8038>
cmpl   $0xffffffff,0x18(%esp)
jne    8051458 <__sprintf_chk@plt+0x7f98>
mov    %ebx,0x18(%esp)
jmp    8051494 <__sprintf_chk@plt+0x7fd4>
nop
movb   $0x1,0x1f(%esp)
jmp    8051494 <__sprintf_chk@plt+0x7fd4>
nop
cmpb   $0x0,0x1f(%esp)
jne    805150c <__sprintf_chk@plt+0x804c>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    80514e7 <__sprintf_chk@plt+0x8027>
mov    $0xfffffffe,%eax
jmp    80514eb <__sprintf_chk@plt+0x802b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     80515a8 <__sprintf_chk@plt+0x80e8>
movl   $0x8054576,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804ff00 <__sprintf_chk@plt+0x6a40>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   804fb50 <__sprintf_chk@plt+0x6690>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x805455b,0x4(%esp)
movl   $0x0,(%esp)
call   8049100 <dcgettext@plt>
mov    %eax,%esi
jmp    805154a <__sprintf_chk@plt+0x808a>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x8057204,%edi
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x8054593,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   8049100 <dcgettext@plt>
mov    %edi,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   8049260 <fputs_unlocked@plt>
mov    (%esi),%ebp
xor    %esi,%esi
test   %ebp,%ebp
jne    805165d <__sprintf_chk@plt+0x819d>
jmp    80516a8 <__sprintf_chk@plt+0x81e8>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    %ebx,%edi
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x80545a8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     80516a8 <__sprintf_chk@plt+0x81e8>
test   %esi,%esi
je     8051620 <__sprintf_chk@plt+0x8160>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <memcmp@plt>
test   %eax,%eax
jne    8051620 <__sprintf_chk@plt+0x8160>
mov    %ebp,(%esp)
call   804ff20 <__sprintf_chk@plt+0x6a60>
movl   $0x80545b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   80493f0 <__fprintf_chk@plt>
jmp    805164b <__sprintf_chk@plt+0x818b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8057204,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    80516c6 <__sprintf_chk@plt+0x8206>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   8051420 <__sprintf_chk@plt+0x7f60>
test   %eax,%eax
js     8051717 <__sprintf_chk@plt+0x8257>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8051520 <__sprintf_chk@plt+0x8060>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   80515c0 <__sprintf_chk@plt+0x8100>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    805170f <__sprintf_chk@plt+0x824f>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     8051793 <__sprintf_chk@plt+0x82d3>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    805177b <__sprintf_chk@plt+0x82bb>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     8051793 <__sprintf_chk@plt+0x82d3>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80490e0 <memcmp@plt>
test   %eax,%eax
jne    8051770 <__sprintf_chk@plt+0x82b0>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049390 <nl_langinfo@plt>
mov    0x80578f4,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x80541bd,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     805186c <__sprintf_chk@plt+0x83ac>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8051837 <__sprintf_chk@plt+0x8377>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8051810 <__sprintf_chk@plt+0x8350>
nop
mov    %ebp,(%esp)
call   80492a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   80492a0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8051868 <__sprintf_chk@plt+0x83a8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8049000 <strcmp@plt>
test   %eax,%eax
je     805182b <__sprintf_chk@plt+0x836b>
cmp    $0x2a,%bl
jne    80517f0 <__sprintf_chk@plt+0x8330>
cmpb   $0x0,0x1(%ebp)
jne    80517f0 <__sprintf_chk@plt+0x8330>
mov    %ebp,(%esp)
call   80492a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x80545be,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8051b2d <__sprintf_chk@plt+0x866d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8051837 <__sprintf_chk@plt+0x8377>
movl   $0x80545c4,(%esp)
call   80491e0 <getenv@plt>
test   %eax,%eax
je     8051885 <__sprintf_chk@plt+0x83c5>
cmpb   $0x0,(%eax)
jne    8051a93 <__sprintf_chk@plt+0x85d3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x80545b5,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8051a84 <__sprintf_chk@plt+0x85c4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049200 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8051b23 <__sprintf_chk@plt+0x8663>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8049080 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     80518ec <__sprintf_chk@plt+0x842c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8049010 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8051a68 <__sprintf_chk@plt+0x85a8>
movl   $0x8053d07,0x4(%esp)
mov    %eax,(%esp)
call   8049250 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8051a60 <__sprintf_chk@plt+0x85a0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8051a46 <__sprintf_chk@plt+0x8586>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8051950 <__sprintf_chk@plt+0x8490>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8051950 <__sprintf_chk@plt+0x8490>
cmp    $0x23,%eax
je     8051abd <__sprintf_chk@plt+0x85fd>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049320 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x80545d4,0x4(%esp)
mov    %esi,(%esp)
call   8049290 <fscanf@plt>
cmp    $0x1,%eax
jle    8051ae0 <__sprintf_chk@plt+0x8620>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   80492a0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   80492a0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    8051afe <__sprintf_chk@plt+0x863e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049200 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8051b32 <__sprintf_chk@plt+0x8672>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049190 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049190 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     805195c <__sprintf_chk@plt+0x849c>
mov    %esi,(%esp)
call   8049380 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8051ae0 <__sprintf_chk@plt+0x8620>
jmp    8051965 <__sprintf_chk@plt+0x84a5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049470 <close@plt>
mov    $0x80541bd,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049070 <free@plt>
mov    %ebp,0x80578f4
jmp    80517df <__sprintf_chk@plt+0x831f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    80518ab <__sprintf_chk@plt+0x83eb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   80492a0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8051a84 <__sprintf_chk@plt+0x85c4>
lea    -0x1(%eax),%eax
jmp    8051894 <__sprintf_chk@plt+0x83d4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8051ad7 <__sprintf_chk@plt+0x8617>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8051b4c <__sprintf_chk@plt+0x868c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    8051ab8 <__sprintf_chk@plt+0x85f8>
cmp    $0xffffffff,%eax
jne    8051950 <__sprintf_chk@plt+0x8490>
mov    %esi,(%esp)
call   8051150 <__sprintf_chk@plt+0x7c90>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8051a68 <__sprintf_chk@plt+0x85a8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    8051a6d <__sprintf_chk@plt+0x85ad>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   80491f0 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    80519fc <__sprintf_chk@plt+0x853c>
mov    $0x80541bd,%ebp
jmp    8051a79 <__sprintf_chk@plt+0x85b9>
call   8049110 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x80541bd,%ebp
call   8049070 <free@plt>
mov    %esi,(%esp)
call   8051150 <__sprintf_chk@plt+0x7c90>
jmp    8051a6d <__sprintf_chk@plt+0x85ad>
mov    %esi,(%esp)
call   8049380 <__uflow@plt>
jmp    8051ad2 <__sprintf_chk@plt+0x8612>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%edi
mov    0x20(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
test   %edi,%edi
mov    %edi,%ecx
mov    %eax,%ebp
js     8051c28 <__sprintf_chk@plt+0x8768>
test   %ebp,%ebp
mov    0x4(%esp),%esi
mov    %eax,%edi
js     8051c44 <__sprintf_chk@plt+0x8784>
test   %edi,%edi
mov    %ecx,%ebp
mov    %edx,0x8(%esp)
mov    %edi,%eax
mov    %edx,%ecx
mov    %esi,0x4(%esp)
jne    8051bc0 <__sprintf_chk@plt+0x8700>
cmp    %ebp,%esi
jbe    8051be8 <__sprintf_chk@plt+0x8728>
mov    %ebp,%edx
mov    %ecx,%eax
xor    %ebp,%ebp
div    %esi
mov    %eax,%ecx
jmp    8051bc8 <__sprintf_chk@plt+0x8708>
lea    0x0(%esi),%esi
cmp    %ebp,%edi
jbe    8051c08 <__sprintf_chk@plt+0x8748>
xor    %ebp,%ebp
xor    %ecx,%ecx
mov    %ecx,%eax
mov    (%esp),%ecx
mov    %ebp,%edx
test   %ecx,%ecx
je     8051bda <__sprintf_chk@plt+0x871a>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x10,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
jne    8051bf7 <__sprintf_chk@plt+0x8737>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%esi
mov    %ebp,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    %ecx,%eax
div    %esi
mov    %eax,%ecx
jmp    8051bc8 <__sprintf_chk@plt+0x8708>
nop
bsr    %edi,%edi
xor    $0x1f,%edi
jne    8051c58 <__sprintf_chk@plt+0x8798>
mov    0x8(%esp),%edi
cmp    %edi,0x4(%esp)
jbe    8051c1e <__sprintf_chk@plt+0x875e>
cmp    %ebp,%eax
jae    8051bc4 <__sprintf_chk@plt+0x8704>
xor    %ebp,%ebp
mov    $0x1,%ecx
jmp    8051bc8 <__sprintf_chk@plt+0x8708>
nop
neg    %edx
mov    0x4(%esp),%esi
mov    %eax,%edi
adc    $0x0,%ecx
neg    %ecx
test   %ebp,%ebp
movl   $0xffffffff,(%esp)
jns    8051b9b <__sprintf_chk@plt+0x86db>
neg    %esi
adc    $0x0,%edi
notl   (%esp)
neg    %edi
jmp    8051b9b <__sprintf_chk@plt+0x86db>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ecx
mov    0x4(%esp),%esi
shl    %cl,%eax
mov    %eax,%edx
mov    $0x20,%eax
sub    %edi,%eax
mov    %eax,%ecx
shr    %cl,%esi
mov    %edi,%ecx
mov    %esi,0xc(%esp)
mov    0x4(%esp),%esi
or     %edx,0xc(%esp)
mov    %ebp,%edx
shl    %cl,%esi
mov    %eax,%ecx
mov    %esi,0x4(%esp)
mov    0x8(%esp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%ebp
mov    %eax,%ecx
shr    %cl,%esi
or     %ebp,%esi
mov    %esi,%eax
divl   0xc(%esp)
mov    %edx,%ebp
mov    %eax,%esi
mull   0x4(%esp)
cmp    %edx,%ebp
mov    %edx,0x4(%esp)
jb     8051cc8 <__sprintf_chk@plt+0x8808>
mov    0x8(%esp),%edx
mov    %edi,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8051cbd <__sprintf_chk@plt+0x87fd>
cmp    0x4(%esp),%ebp
je     8051cc8 <__sprintf_chk@plt+0x8808>
mov    %esi,%ecx
xor    %ebp,%ebp
jmp    8051bc8 <__sprintf_chk@plt+0x8708>
xchg   %ax,%ax
lea    -0x1(%esi),%ecx
xor    %ebp,%ebp
jmp    8051bc8 <__sprintf_chk@plt+0x8708>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x20,%esp
mov    0x34(%esp),%edx
mov    0x3c(%esp),%eax
mov    0x30(%esp),%ebp
mov    0x38(%esp),%edi
test   %edx,%edx
mov    %eax,%esi
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
movl   $0x0,0xc(%esp)
js     8051dc8 <__sprintf_chk@plt+0x8908>
test   %esi,%esi
mov    %edi,%edx
mov    %eax,%ecx
js     8051db8 <__sprintf_chk@plt+0x88f8>
mov    0x4(%esp),%edi
mov    %ecx,%eax
mov    %edx,%ecx
mov    (%esp),%esi
test   %eax,%eax
mov    %edx,0x10(%esp)
mov    %edi,%ebp
mov    %esi,0x14(%esp)
mov    %esi,%edi
mov    %ebp,%esi
jne    8051d50 <__sprintf_chk@plt+0x8890>
cmp    %esi,%edx
jbe    8051d98 <__sprintf_chk@plt+0x88d8>
mov    %esi,%edx
mov    0x14(%esp),%eax
div    %ecx
mov    %edx,%esi
mov    %esi,%eax
xor    %edx,%edx
jmp    8051d59 <__sprintf_chk@plt+0x8899>
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%eax
jbe    8051d70 <__sprintf_chk@plt+0x88b0>
mov    (%esp),%eax
mov    %esi,%edx
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     8051d68 <__sprintf_chk@plt+0x88a8>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x20,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
bsr    %eax,%edx
mov    %edx,(%esp)
xorl   $0x1f,(%esp)
jne    8051de8 <__sprintf_chk@plt+0x8928>
cmp    %edi,%ecx
jbe    8051e80 <__sprintf_chk@plt+0x89c0>
cmp    %esi,%eax
jb     8051e80 <__sprintf_chk@plt+0x89c0>
mov    %edi,%eax
mov    %ebp,%edx
jmp    8051d59 <__sprintf_chk@plt+0x8899>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    8051da7 <__sprintf_chk@plt+0x88e7>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%ecx
mov    %esi,%eax
xor    %edx,%edx
div    %ecx
mov    %edi,%eax
div    %ecx
mov    %edx,%esi
jmp    8051d46 <__sprintf_chk@plt+0x8886>
lea    0x0(%esi),%esi
neg    %edx
adc    $0x0,%ecx
neg    %ecx
jmp    8051d1b <__sprintf_chk@plt+0x885b>
lea    0x0(%esi,%eiz,1),%esi
negl   (%esp)
adcl   $0x0,0x4(%esp)
negl   0x4(%esp)
movl   $0xffffffff,0xc(%esp)
jmp    8051d0f <__sprintf_chk@plt+0x884f>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%edx
movl   $0x20,0x18(%esp)
mov    0x10(%esp),%ebp
sub    %edx,0x18(%esp)
mov    %edx,%ecx
shl    %cl,%eax
movzbl 0x18(%esp),%ecx
mov    %ebp,%edi
shr    %cl,%edi
mov    %edx,%ecx
shl    %cl,%ebp
movzbl 0x18(%esp),%ecx
or     %eax,%edi
mov    %edx,%eax
mov    %esi,%edx
mov    %ebp,0x1c(%esp)
shr    %cl,%edx
mov    %eax,%ecx
mov    0x14(%esp),%eax
shl    %cl,%esi
movzbl 0x18(%esp),%ecx
shr    %cl,%eax
movzbl (%esp),%ecx
or     %esi,%eax
mov    0x14(%esp),%esi
div    %edi
shl    %cl,%esi
mov    %esi,0x14(%esp)
mov    %edx,%esi
mul    %ebp
mov    %edx,0x10(%esp)
mov    0x10(%esp),%ebp
mov    %eax,%edx
cmp    %ebp,%esi
mov    %ebp,%ecx
jb     8051e94 <__sprintf_chk@plt+0x89d4>
cmp    %eax,0x14(%esp)
jb     8051e90 <__sprintf_chk@plt+0x89d0>
mov    (%esp),%ebp
mov    0x14(%esp),%edi
sub    %edx,%edi
sbb    %ecx,%esi
mov    %esi,%eax
mov    %ebp,%ecx
shr    %cl,%edi
movzbl 0x18(%esp),%ecx
shl    %cl,%eax
mov    %ebp,%ecx
or     %eax,%edi
shr    %cl,%esi
mov    %edi,%eax
mov    %esi,%edx
jmp    8051d59 <__sprintf_chk@plt+0x8899>
nop
sub    %ecx,%edi
sbb    %eax,%esi
mov    %esi,%ebp
jmp    8051d8c <__sprintf_chk@plt+0x88cc>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%esi
jne    8051e58 <__sprintf_chk@plt+0x8998>
mov    0x10(%esp),%ecx
mov    %eax,%edx
sub    0x1c(%esp),%edx
sbb    %edi,%ecx
jmp    8051e58 <__sprintf_chk@plt+0x8998>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    8051f00 <__sprintf_chk@plt+0x8a40>
cmp    %ebp,%ecx
ja     8051f38 <__sprintf_chk@plt+0x8a78>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8051ee8 <__sprintf_chk@plt+0x8a28>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     8051f28 <__sprintf_chk@plt+0x8a68>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8051f48 <__sprintf_chk@plt+0x8a88>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8051fb8 <__sprintf_chk@plt+0x8af8>
cmp    %edx,%eax
jb     8051fb8 <__sprintf_chk@plt+0x8af8>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8051fc8 <__sprintf_chk@plt+0x8b08>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8051fa9 <__sprintf_chk@plt+0x8ae9>
cmp    (%esp),%esi
je     8051fc8 <__sprintf_chk@plt+0x8b08>
mov    %edi,%eax
xor    %edx,%edx
jmp    8051f2c <__sprintf_chk@plt+0x8a6c>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    8051f2c <__sprintf_chk@plt+0x8a6c>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    8052028 <__sprintf_chk@plt+0x8b68>
cmp    %edi,%esi
jbe    8052060 <__sprintf_chk@plt+0x8ba0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8052080 <__sprintf_chk@plt+0x8bc0>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8052090 <__sprintf_chk@plt+0x8bd0>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     8052128 <__sprintf_chk@plt+0x8c68>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8052071 <__sprintf_chk@plt+0x8bb1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    805201b <__sprintf_chk@plt+0x8b5b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     8052114 <__sprintf_chk@plt+0x8c54>
cmp    %eax,0xc(%esp)
jb     8052110 <__sprintf_chk@plt+0x8c50>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    80520ee <__sprintf_chk@plt+0x8c2e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    80520ee <__sprintf_chk@plt+0x8c2e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     8052041 <__sprintf_chk@plt+0x8b81>
jmp    8052051 <__sprintf_chk@plt+0x8b91>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804b900 <__sprintf_chk@plt+0x2440>
add    $0x4eb5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048f98 <__ctype_toupper_loc@plt-0x38>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8052199 <__sprintf_chk@plt+0x8cd9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8052178 <__sprintf_chk@plt+0x8cb8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80521b0 <__sprintf_chk@plt+0x8cf0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804b900 <__sprintf_chk@plt+0x2440>
add    $0x4e3a,%ebx
sub    $0x18,%esp
lea    0x164(%ebx),%eax
test   %eax,%eax
je     80521f8 <__sprintf_chk@plt+0x8d38>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    80521db <__sprintf_chk@plt+0x8d1b>
push   %ebx
sub    $0x8,%esp
call   804b900 <__sprintf_chk@plt+0x2440>
add    $0x4dfb,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     80522a4 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     805225c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80522a5 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     80522b4 <_IO_stdin_used+0x90>
popa
je     80522b3 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
inc    %ebp
push   %edx
inc    %ecx
dec    %esi
inc    %esp
pop    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x504f2073
push   %esp
dec    %ecx
dec    %edi
dec    %esi
or     (%eax),%al
add    %al,(%eax)
add    %al,0x6f(%ebx)
jo     80522f9 <_IO_stdin_used+0xd5>
and    %ah,0x20(%ecx)
imul   $0x6320,0x2c(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jbe    80522f3 <_IO_stdin_used+0xcf>
jb     8052304 <_IO_stdin_used+0xe0>
imul   $0x646e6120,0x67(%esi),%ebp
and    %ah,0x6f(%esi)
jb     8052309 <_IO_stdin_used+0xe5>
popa
je     8052313 <_IO_stdin_used+0xef>
imul   $0x63636120,0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jb     805230d <_IO_stdin_used+0xe9>
imul   $0x206f7420,0x67(%esi),%ebp
je     805231a <_IO_stdin_used+0xf6>
and    %ch,%gs:0x70(%edi)
gs
jb     805231a <_IO_stdin_used+0xf6>
outsb  %ds:(%esi),(%dx)
fs
jae    80522eb <_IO_stdin_used+0xc7>
or     (%edx),%cl
and    %ah,(%eax)
bound  %esi,0x3d(%ebx)
inc    %edx
pop    %ecx
push   %esp
inc    %ebp
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jb     8052338 <_IO_stdin_used+0x114>
popa
and    %ah,%fs:0x6e(%ecx)
and    %dh,%fs:0x72(%edi)
imul   $0x74207075,0x20(%ebp,%eiz,2),%esi
outsl  %ds:(%esi),(%dx)
and    %al,0x59(%edx)
push   %esp
inc    %ebp
push   %ebx
and    %ah,0x79(%edx)
je     8052355 <_IO_stdin_used+0x131>
jae    8052312 <_IO_stdin_used+0xee>
popa
je     8052315 <_IO_stdin_used+0xf1>
popa
and    %dh,0x6d(%ecx,%ebp,2)
or     %gs:(%eax),%ah
and    %ah,0x62(%ebx)
jae    805233f <_IO_stdin_used+0x11b>
inc    %edx
pop    %ecx
push   %esp
inc    %ebp
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jbe    8052378 <_IO_stdin_used+0x154>
jb     8052389 <_IO_stdin_used+0x165>
and    %al,0x59(%edx)
push   %esp
inc    %ebp
push   %ebx
and    %ah,0x79(%edx)
je     8052385 <_IO_stdin_used+0x161>
jae    8052342 <_IO_stdin_used+0x11e>
popa
je     8052345 <_IO_stdin_used+0x121>
popa
and    %dh,0x6d(%ecx,%ebp,2)
or     %gs:(%eax),%ah
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jbe    8052370 <_IO_stdin_used+0x14c>
inc    %ebx
dec    %edi
dec    %esi
push   %esi
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x6e(%edi)
jbe    80523a8 <_IO_stdin_used+0x184>
jb     80523b9 <_IO_stdin_used+0x195>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %dh,0x65(%eax)
jb     8052376 <_IO_stdin_used+0x152>
je     80523c0 <_IO_stdin_used+0x19c>
and    %ah,%gs:0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
and    %dh,0x65(%ebx)
jo     80523c5 <_IO_stdin_used+0x1a1>
jb     80523c7 <_IO_stdin_used+0x1a3>
je     80523cd <_IO_stdin_used+0x1a9>
and    %dh,%fs:0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
and    %ch,0x73(%ecx,%ebp,2)
je     8052380 <_IO_stdin_used+0x15c>
and    %ah,(%eax)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     80523bb <_IO_stdin_used+0x197>
dec    %esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6f(%ebx)
jo     8052405 <_IO_stdin_used+0x1e1>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    80523b2 <_IO_stdin_used+0x18e>
dec    %esi
and    %ch,0x6e(%ecx)
jo     805240d <_IO_stdin_used+0x1e9>
je     80523ba <_IO_stdin_used+0x196>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x20,0xa(%ebx),%esi
and    %ch,0x62(%ecx)
jae    80523e4 <_IO_stdin_used+0x1c0>
inc    %edx
pop    %ecx
push   %esp
inc    %ebp
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%edx)
popa
and    %dh,%fs:0x70(%ebp)
and    %dh,0x20(%edi,%ebp,2)
inc    %edx
pop    %ecx
push   %esp
inc    %ebp
push   %ebx
and    %ah,0x79(%edx)
je     805242d <_IO_stdin_used+0x209>
jae    80523ea <_IO_stdin_used+0x1c6>
popa
je     80523ed <_IO_stdin_used+0x1c9>
popa
and    %dh,0x6d(%ecx,%ebp,2)
and    %ch,%gs:(%eax)
fs
gs
popaw
jne    8052447 <_IO_stdin_used+0x223>
je     8052417 <_IO_stdin_used+0x1f3>
and    %dh,0xa293231
add    %ah,(%eax)
and    %ch,0x66(%ecx)
cmp    $0x454c4946,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%edx)
popa
and    %ah,%fs:0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
and    %ch,0x6e(%ecx)
jae    805247d <_IO_stdin_used+0x259>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %dh,0x74(%ebx)
imul   $0x66692020,%fs:0xa(%esi),%ebp
insb   (%dx),%es:(%edi)
popa
addr16 cmp $0x47414c46,%eax
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%edx)
popa
and    %ah,%fs:0x73(%ecx)
and    %dh,0x65(%eax)
jb     8052454 <_IO_stdin_used+0x230>
je     805249e <_IO_stdin_used+0x27a>
and    %ah,%gs:0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
and    %dh,0x65(%ebx)
jo     80524a3 <_IO_stdin_used+0x27f>
jb     80524a5 <_IO_stdin_used+0x281>
je     80524ab <_IO_stdin_used+0x287>
and    %dh,%fs:0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
and    %ch,0x73(%ecx,%ebp,2)
je     805245e <_IO_stdin_used+0x23a>
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
bound  %esi,0x3d(%ebx)
inc    %edx
pop    %ecx
push   %esp
inc    %ebp
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%edi)
imul   $0x45545942,0x20(%ebp,%eiz,2),%esi
push   %ebx
and    %ah,0x79(%edx)
je     80524db <_IO_stdin_used+0x2b7>
jae    8052498 <_IO_stdin_used+0x274>
popa
je     805249b <_IO_stdin_used+0x277>
popa
and    %dh,0x6d(%ecx,%ebp,2)
and    %ch,%gs:(%eax)
fs
gs
popaw
jne    80524f5 <_IO_stdin_used+0x2d1>
je     80524c5 <_IO_stdin_used+0x2a1>
and    %dh,0xa293231
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
cmp    $0x4946,%ax
dec    %esp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%edi)
imul   $0x46206f74,0x20(%ebp,%eiz,2),%esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ch,0x6e(%ecx)
jae    8052529 <_IO_stdin_used+0x305>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %dh,0x74(%ebx)
outsl  %fs:(%esi),(%dx)
jne    8052536 <_IO_stdin_used+0x312>
or     (%eax),%ah
and    %ch,0x66(%edi)
insb   (%dx),%es:(%edi)
popa
addr16 cmp $0x47414c46,%eax
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%edi)
imul   $0x70207361,0x20(%ebp,%eiz,2),%esi
gs
jb     8052502 <_IO_stdin_used+0x2de>
je     805254c <_IO_stdin_used+0x328>
and    %ah,%gs:0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
and    %dh,0x65(%ebx)
jo     8052551 <_IO_stdin_used+0x32d>
jb     8052553 <_IO_stdin_used+0x32f>
je     8052559 <_IO_stdin_used+0x335>
and    %dh,%fs:0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
and    %ch,0x73(%ecx,%ebp,2)
je     805250c <_IO_stdin_used+0x2e8>
and    %ah,(%eax)
jae    805256b <_IO_stdin_used+0x347>
imul   $0x20,%gs:0x2020204e,%edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8052581 <_IO_stdin_used+0x35d>
imul   $0x626f204e,0x20(%eax),%esi
jae    805254c <_IO_stdin_used+0x328>
jae    805258a <_IO_stdin_used+0x366>
jp     8052588 <_IO_stdin_used+0x364>
and    %ah,%fs:0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
and    %ah,0x74(%ecx)
and    %dh,0x74(%ebx)
popa
jb     80525a8 <_IO_stdin_used+0x384>
and    %ch,0x66(%edi)
and    %ch,0x75(%edi)
je     80525ac <_IO_stdin_used+0x388>
jne    80525b2 <_IO_stdin_used+0x38e>
or     (%eax),%ah
and    %dh,0x6b(%ebx)
imul   $0x2020204e,0x3d(%eax),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x6b(%ebx)
imul   $0x6269204e,0x20(%eax),%esi
jae    8052589 <_IO_stdin_used+0x365>
jae    80525c7 <_IO_stdin_used+0x3a3>
jp     80525c5 <_IO_stdin_used+0x3a1>
and    %ah,%fs:0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
and    %ah,0x74(%ecx)
and    %dh,0x74(%ebx)
popa
jb     80525e5 <_IO_stdin_used+0x3c1>
and    %ch,0x66(%edi)
and    %ch,0x6e(%ecx)
jo     80525ee <_IO_stdin_used+0x3ca>
je     8052585 <_IO_stdin_used+0x361>
and    %ah,(%eax)
jae    80525f3 <_IO_stdin_used+0x3cf>
popa
je     80525f7 <_IO_stdin_used+0x3d3>
jae    80525c1 <_IO_stdin_used+0x39d>
push   %edi
dec    %eax
dec    %ecx
inc    %ebx
dec    %eax
and    %ah,(%eax)
and    %ah,(%eax)
push   %edi
dec    %eax
dec    %ecx
inc    %ebx
dec    %eax
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jae    8052612 <_IO_stdin_used+0x3ee>
jo     805260f <_IO_stdin_used+0x3eb>
jb     8052606 <_IO_stdin_used+0x3e2>
jae    8052616 <_IO_stdin_used+0x3f2>
and    %ch,0x75(%edi)
je     8052618 <_IO_stdin_used+0x3f4>
jne    805261e <_IO_stdin_used+0x3fa>
je     8052615 <_IO_stdin_used+0x3f1>
outsb  %ds:(%esi),(%dx)
and    %dh,0x6f(%si)
and    %dh,0x74(%ebx)
fs
gs
jb     805262a <_IO_stdin_used+0x406>
cmp    (%edx),%ecx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
daa
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
js     8052637 <_IO_stdin_used+0x413>
gs
jb     80525fb <_IO_stdin_used+0x3d7>
and    %dh,0x75(%ebx)
jo     8052649 <_IO_stdin_used+0x425>
jb     8052640 <_IO_stdin_used+0x41c>
jae    8052650 <_IO_stdin_used+0x42c>
gs
jae    8052600 <_IO_stdin_used+0x3dc>
je     8052654 <_IO_stdin_used+0x430>
popa
outsb  %ds:(%esi),(%dx)
jae    805264c <_IO_stdin_used+0x428>
gs
jb     8052609 <_IO_stdin_used+0x3e5>
jae    805265f <_IO_stdin_used+0x43b>
popa
je     8052661 <_IO_stdin_used+0x43d>
sub    $0x20,%al
daa
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
daa
and    %dh,0x75(%ebx)
jo     805266b <_IO_stdin_used+0x447>
jb     8052662 <_IO_stdin_used+0x43e>
jae    8052672 <_IO_stdin_used+0x44e>
gs
jae    8052622 <_IO_stdin_used+0x3fe>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     (%eax),%al
add    %cl,(%edx)
dec    %esi
and    %ah,0x6e(%ecx)
and    %al,%fs:0x59(%edx)
push   %esp
inc    %ebp
push   %ebx
and    %ch,0x61(%ebp)
jns    8052639 <_IO_stdin_used+0x415>
bound  %esp,0x20(%ebp)
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8052688 <_IO_stdin_used+0x464>
and    %ah,%fs:0x79(%edx)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805269c <_IO_stdin_used+0x478>
outsb  %ds:(%esi),(%dx)
and    %ch,0x75(%di)
insb   (%dx),%es:(%edi)
je     80526a4 <_IO_stdin_used+0x480>
jo     80526a9 <_IO_stdin_used+0x485>
imul   $0x65766974,0x61(%ebx),%esp
and    %dh,0x75(%ebx)
data32 imul $0x3a73,0x65(%eax),%di
or     0x20(%ebx),%ah
cmp    $0x77202c31,%eax
and    %bh,0x62202c32
and    %bh,0x2c323135
and    %ch,0x42(%ebx)
and    %bh,0x30303031
sub    $0x20,%al
dec    %ebx
and    %bh,0x34323031
sub    $0x20,%al
dec    %ebp
inc    %edx
and    %bh,0x30303031
sub    (%ecx),%dh
xor    %dh,(%eax)
xor    %ch,(%eax,%eiz,1)
dec    %ebp
and    %bh,0x34323031
sub    (%ecx),%dh
xor    %dh,(%edx)
xor    $0x2c,%al
and    %bh,0x4d(%eax)
and    %bh,0x42470a4d
and    %bh,0x30303031
sub    (%ecx),%dh
xor    %dh,(%eax)
xor    %ch,(%edx)
xor    %esi,(%eax)
xor    %dh,(%eax)
sub    $0x20,%al
inc    %edi
and    %bh,0x34323031
sub    (%ecx),%dh
xor    %dh,(%edx)
xor    $0x2a,%al
xor    %esi,(%eax)
xor    (%esp,%ebp,1),%dh
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6f(%ebx)
and    %ch,0x6e(%edi)
and    %ah,0x6f(%esi)
jb     80526ee <_IO_stdin_used+0x4ca>
push   %esp
sub    $0x20,%al
push   %eax
sub    $0x20,%al
inc    %ebp
sub    $0x20,%al
pop    %edx
sub    $0x20,%al
pop    %ecx
or     %cs:(%edx),%cl
inc    %ebp
popa
arpl   %bp,0x20(%eax)
inc    %ebx
dec    %edi
dec    %esi
push   %esi
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
and    %ch,0x61(%ebp)
jns    8052713 <_IO_stdin_used+0x4ef>
bound  %esp,0x3a(%ebp)
or     (%edx),%cl
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
popa
jae    8052764 <_IO_stdin_used+0x540>
imul   $0x20202020,0x20(%ecx),%ebp
data16
jb     805277a <_IO_stdin_used+0x556>
insl   (%dx),%es:(%edi)
and    %al,0x42(%ebp)
inc    %ebx
inc    %esp
dec    %ecx
inc    %ebx
and    %dh,0x20(%edi,%ebp,2)
inc    %ecx
push   %ebx
inc    %ebx
dec    %ecx
dec    %ecx
or     (%eax),%ah
and    %ah,0x62(%ebp)
arpl   %sp,0x63(%ecx,%ebp,2)
and    %ah,(%eax)
and    %ah,(%eax)
data16
jb     805279b <_IO_stdin_used+0x577>
insl   (%dx),%es:(%edi)
and    %al,0x53(%ecx)
inc    %ebx
dec    %ecx
dec    %ecx
and    %dh,0x20(%edi,%ebp,2)
inc    %ebp
inc    %edx
inc    %ebx
inc    %esp
dec    %ecx
inc    %ebx
or     (%eax),%ah
and    %ch,0x62(%ecx)
insl   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %al,0x53(%ecx)
inc    %ebx
dec    %ecx
dec    %ecx
and    %dh,0x20(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
je     80527c1 <_IO_stdin_used+0x59d>
jb     80527cc <_IO_stdin_used+0x5a8>
popa
je     80527c6 <_IO_stdin_used+0x5a2>
and    %al,0x42(%ebp)
inc    %ebx
inc    %esp
dec    %ecx
inc    %ebx
or     (%eax),%ah
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
and    %ah,(%eax)
and    %ah,(%eax)
jo     80527d8 <_IO_stdin_used+0x5b4>
and    %ch,%fs:0x65(%esi)
ja     80527e9 <_IO_stdin_used+0x5c5>
imul   $0x7265742d,0x65(%esi),%ebp
insl   (%dx),%es:(%edi)
imul   $0x20646574,0x61(%esi),%ebp
jb     80527f3 <_IO_stdin_used+0x5cf>
arpl   %bp,0x72(%edi)
fs
jae    80527b4 <_IO_stdin_used+0x590>
ja     80527ff <_IO_stdin_used+0x5db>
je     8052800 <_IO_stdin_used+0x5dc>
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x73(%ebp)
and    %dh,0x20(%edi,%ebp,2)
arpl   %sp,0x73(%edx)
sub    $0x657a6973,%eax
or     (%eax),%ah
and    %dh,0x6e(%ebp)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x20,(%eax),%esp
and    %dh,0x65(%edx)
jo     8052828 <_IO_stdin_used+0x604>
popa
arpl   %sp,0x20(%ebp)
je     8052834 <_IO_stdin_used+0x610>
popa
imul   $0x70732067,0x6e(%ecx,%ebp,2),%ebp
popa
arpl   %sp,0x73(%ebp)
and    %ch,0x6e(%ecx)
and    %ah,0x62(%ebx)
jae    8052804 <_IO_stdin_used+0x5e0>
jae    8052842 <_IO_stdin_used+0x61e>
jp     8052840 <_IO_stdin_used+0x61c>
and    %dh,0x65(%edx)
arpl   %bp,0x72(%edi)
fs
jae    8052804 <_IO_stdin_used+0x5e0>
ja     805284f <_IO_stdin_used+0x62b>
je     8052850 <_IO_stdin_used+0x62c>
and    %ch,0x65(%esi)
ja     8052859 <_IO_stdin_used+0x635>
imul   $0x6c20200a,0x65(%esi),%ebp
arpl   %sp,0x73(%ecx)
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x70(%di)
jo     805286d <_IO_stdin_used+0x649>
jb     805282a <_IO_stdin_used+0x606>
arpl   %sp,0x73(%ecx)
and    %dh,%gs:0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805287b <_IO_stdin_used+0x657>
jb     8052838 <_IO_stdin_used+0x614>
arpl   %sp,0x73(%ecx)
or     %gs:(%eax),%ah
and    %dh,0x63(%ebp)
popa
jae    8052889 <_IO_stdin_used+0x665>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6f(%si)
ja     8052899 <_IO_stdin_used+0x675>
jb     8052856 <_IO_stdin_used+0x632>
arpl   %sp,0x73(%ecx)
and    %dh,%gs:0x20(%edi,%ebp,2)
jne    80528b0 <_IO_stdin_used+0x68c>
jo     80528a7 <_IO_stdin_used+0x683>
jb     8052864 <_IO_stdin_used+0x640>
arpl   %sp,0x73(%ecx)
or     %gs:(%eax),%ah
and    %dh,0x70(%ebx)
popa
jb     80528c3 <_IO_stdin_used+0x69f>
and    %ah,%gs:(%eax)
and    %ah,(%eax)
je     80528c9 <_IO_stdin_used+0x6a5>
jns    8052879 <_IO_stdin_used+0x655>
je     80528ca <_IO_stdin_used+0x6a6>
and    %dh,0x65(%ebx)
imul   $0x72,%gs:(%eax),%esp
popa
je     80528cd <_IO_stdin_used+0x6a9>
gs
jb     8052888 <_IO_stdin_used+0x664>
je     80528d2 <_IO_stdin_used+0x6ae>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x72(%edi)
imul   $0x20656874,0x20(%ebp,%eiz,2),%esi
outsl  %ds:(%esi),(%dx)
jne    80528ee <_IO_stdin_used+0x6ca>
jo     80528f1 <_IO_stdin_used+0x6cd>
je     805289e <_IO_stdin_used+0x67a>
outsw  %ds:(%esi),(%dx)
jb     80528a2 <_IO_stdin_used+0x67e>
dec    %esi
push   %ebp
dec    %esp
and    %ch,0x6e(%ecx)
jo     80528ff <_IO_stdin_used+0x6db>
je     80528ac <_IO_stdin_used+0x688>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x20,0xa(%ebx),%esi
and    %dh,0x77(%ebx)
popa
bound  %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x77(%ebx)
popa
jo     80528c4 <_IO_stdin_used+0x6a0>
gs
jbe    805290c <_IO_stdin_used+0x6e8>
jb     8052922 <_IO_stdin_used+0x6fe>
and    %dh,0x61(%eax)
imul   $0x6920666f,0x20(%edx),%esi
outsb  %ds:(%esi),(%dx)
jo     805292b <_IO_stdin_used+0x707>
je     80528d8 <_IO_stdin_used+0x6b4>
bound  %edi,0x74(%ecx)
gs
jae    80528c8 <_IO_stdin_used+0x6a4>
and    %ah,(%eax)
jae    805293b <_IO_stdin_used+0x717>
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x61(%eax)
and    %ah,%fs:0x76(%ebp)
gs
jb     805294c <_IO_stdin_used+0x728>
and    %ch,0x6e(%ecx)
jo     805294d <_IO_stdin_used+0x729>
je     80528fa <_IO_stdin_used+0x6d6>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x77,(%eax),%esp
imul   $0x734c554e,0x20(%eax,%ebp,2),%esi
and    %dh,0x20(%edi,%ebp,2)
imul   $0x7a69732d,0x73(%edx),%esp
cmp    %gs:(%eax),%esp
ja     8052961 <_IO_stdin_used+0x73d>
outsb  %gs:(%esi),(%dx)
and    %dh,0x73(%ebp)
gs or  %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x69(%edi)
je     8052979 <_IO_stdin_used+0x755>
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
jb     805293b <_IO_stdin_used+0x717>
jne    805298b <_IO_stdin_used+0x767>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x70,(%eax,%eiz,1),%ebp
popa
and    %dh,%fs:0x69(%edi)
je     8052994 <_IO_stdin_used+0x770>
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x73(%ebp)
and    %dh,0x61(%edx)
je     80529a0 <_IO_stdin_used+0x77c>
gs
jb     805295b <_IO_stdin_used+0x737>
je     80529a5 <_IO_stdin_used+0x781>
popa
outsb  %ds:(%esi),(%dx)
and    %cl,0x55(%esi)
dec    %esp
jae    805294f <_IO_stdin_used+0x72b>
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x78(%ebp)
arpl   %bp,0x20(%eax,%eiz,1)
and    %ah,(%eax)
and    %ah,(%eax)
popaw
imul   $0x68742066,0x69(%eax,%eiz,1),%ebp
and    %ch,%gs:0x75(%edi)
je     80529d4 <_IO_stdin_used+0x7b0>
jne    80529da <_IO_stdin_used+0x7b6>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x6c(%ecx)
jb     80529d5 <_IO_stdin_used+0x7b1>
popa
fs
jns    8052994 <_IO_stdin_used+0x770>
gs
js     80529e0 <_IO_stdin_used+0x7bc>
jae    80529ed <_IO_stdin_used+0x7c9>
jae    8052985 <_IO_stdin_used+0x761>
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x65(%edx)
popa
je     80529a5 <_IO_stdin_used+0x781>
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     80529ae <_IO_stdin_used+0x78a>
arpl   %si,0x65(%edx)
popa
je     80529f9 <_IO_stdin_used+0x7d5>
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x75(%edi)
je     8052a0d <_IO_stdin_used+0x7e9>
jne    8052a13 <_IO_stdin_used+0x7ef>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x6f(%esi)
je     8052a1d <_IO_stdin_used+0x7f9>
jne    8052a1b <_IO_stdin_used+0x7f7>
arpl   %sp,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     80529d8 <_IO_stdin_used+0x7b4>
je     8052a2c <_IO_stdin_used+0x808>
jne    8052a2a <_IO_stdin_used+0x806>
arpl   %sp,0x74(%ecx)
and    %dh,%gs:0x65(%eax,%ebp,2)
and    %ch,0x75(%edi)
je     8052a39 <_IO_stdin_used+0x815>
jne    8052a3f <_IO_stdin_used+0x81b>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x6f(%esi)
gs
jb     8052a4a <_IO_stdin_used+0x826>
outsl  %ds:(%esi),(%dx)
jb     80529fb <_IO_stdin_used+0x7d7>
and    %ah,(%eax)
arpl   %bp,0x6e(%edi)
je     8052a4b <_IO_stdin_used+0x827>
outsb  %ds:(%esi),(%dx)
jne    8052a4a <_IO_stdin_used+0x826>
and    %ah,0x66(%ecx)
je     8052a4f <_IO_stdin_used+0x82b>
jb     8052a0c <_IO_stdin_used+0x7e8>
jb     8052a53 <_IO_stdin_used+0x82f>
popa
and    %ah,%fs:0x72(%ebp)
jb     8052a64 <_IO_stdin_used+0x840>
jb     8052a6a <_IO_stdin_used+0x846>
or     (%eax),%ah
and    %ah,0x64(%esi)
popa
je     8052a60 <_IO_stdin_used+0x83c>
jae    8052a7a <_IO_stdin_used+0x856>
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
and    %dh,0x68(%eax)
jns    8052a7c <_IO_stdin_used+0x858>
imul   $0x20796c6c,0x61(%ebx),%esp
ja     8052a84 <_IO_stdin_used+0x860>
imul   $0x7074756f,0x20(%ebp,%eiz,2),%esi
jne    8052a90 <_IO_stdin_used+0x86c>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x74(%ecx,%eiz,2)
popa
and    %ah,0x65(%edx)
outsw  %ds:(%esi),(%dx)
jb     8052a92 <_IO_stdin_used+0x86e>
and    %ah,0x69(%esi)
outsb  %ds:(%esi),(%dx)
imul   $0xa676e69,0x68(%ebx),%esi
and    %ah,(%eax)
data16
jae    8052ab6 <_IO_stdin_used+0x892>
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x65736977,0x65(%ebx),%ebp
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %ah,0x6c(%ecx)
jae    8052ac5 <_IO_stdin_used+0x8a1>
and    %dh,0x72(%edi)
imul   $0x6174656d,0x20(%ebp,%eiz,2),%esi
fs
popa
je     8052ac6 <_IO_stdin_used+0x8a2>
or     (%eax),%al
add    %cl,(%edx)
inc    %ebp
popa
arpl   %bp,0x20(%eax)
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
and    %ch,0x61(%ebp)
jns    8052a9e <_IO_stdin_used+0x87a>
bound  %esp,0x3a(%ebp)
or     (%edx),%cl
and    %ah,(%eax)
popa
jo     8052af8 <_IO_stdin_used+0x8d4>
outsb  %gs:(%esi),(%dx)
and    %ah,%fs:(%eax)
and    %ah,(%eax)
popa
jo     8052b02 <_IO_stdin_used+0x8de>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x6f(%ebp)
fs and %ch,%fs:%gs:(%eax)
insl   (%dx),%es:(%edi)
popa
imul   $0x20,0x73(%ebp),%esp
jae    8052b09 <_IO_stdin_used+0x8e5>
outsb  %ds:(%esi),(%dx)
jae    8052b0c <_IO_stdin_used+0x8e8>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8052acd <_IO_stdin_used+0x8a9>
outsw  %ds:(%esi),(%dx)
jb     8052ad1 <_IO_stdin_used+0x8ad>
outsl  %ds:(%esi),(%dx)
jne    8052b28 <_IO_stdin_used+0x904>
jo     8052b2b <_IO_stdin_used+0x907>
je     8052af3 <_IO_stdin_used+0x8cf>
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jbe    8052afb <_IO_stdin_used+0x8d7>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8052b34 <_IO_stdin_used+0x910>
jne    8052b32 <_IO_stdin_used+0x90e>
arpl   %sp,(%eax)
jae    8052b3d <_IO_stdin_used+0x919>
addr16
addr16
gs
jae    8052b41 <_IO_stdin_used+0x91d>
gs sub %ecx,%fs:%gs:(%edx)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x20(%eax,%eiz,1)
and    %ah,(%eax)
jne    8052b55 <_IO_stdin_used+0x931>
and    %ah,%gs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x49(%eax,%eiz,1)
das
dec    %edi
and    %ah,0x6f(%esi)
jb     8052b13 <_IO_stdin_used+0x8ef>
fs
popa
je     8052b58 <_IO_stdin_used+0x934>
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8052b28 <_IO_stdin_used+0x904>
and    %ah,0x61(%esi)
imul   $0x73656c6e,0x75(%eax,%eiz,1),%ebp
jae    8052b35 <_IO_stdin_used+0x911>
popa
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8052b2b <_IO_stdin_used+0x907>
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x79(%ebx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jne    8052ba5 <_IO_stdin_used+0x981>
and    %dh,%gs:0x79(%ebx)
outsb  %ds:(%esi),(%dx)
arpl   %bp,0x72(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x2f492064,0x65(%edx),%edi
dec    %edi
and    %ah,0x6f(%esi)
jb     8052b69 <_IO_stdin_used+0x945>
fs
popa
je     8052bae <_IO_stdin_used+0x98a>
or     (%eax),%al
add    %ah,(%eax)
and    %dh,0x79(%ebx)
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6b(%ecx,%ebp,2)
gs
ja     8052bcb <_IO_stdin_used+0x9a7>
jae    8052bc9 <_IO_stdin_used+0x9a5>
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %ah,0x6c(%ecx)
jae    8052bdd <_IO_stdin_used+0x9b9>
and    %ah,0x6f(%esi)
jb     8052b93 <_IO_stdin_used+0x96f>
insl   (%dx),%es:(%edi)
gs
je     8052bd8 <_IO_stdin_used+0x9b4>
fs
popa
je     8052bdc <_IO_stdin_used+0x9b8>
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x20,(%eax),%esp
popa
arpl   %sp,0x75(%ebx)
insl   (%dx),%es:(%edi)
jne    8052c00 <_IO_stdin_used+0x9dc>
popa
je     8052bfc <_IO_stdin_used+0x9d8>
and    %ah,0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
and    %ch,0x66(%edi)
and    %ch,0x6e(%ecx)
jo     8052c20 <_IO_stdin_used+0x9fc>
je     8052bcd <_IO_stdin_used+0x9a9>
sub    %ch,0x66(%ecx)
insb   (%dx),%es:(%edi)
popa
and    %ch,0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8052be2 <_IO_stdin_used+0x9be>
or     (%eax),%al
add    %ah,(%eax)
and    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x20,(%eax),%esp
jne    8052c3d <_IO_stdin_used+0xa19>
and    %ch,%gs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
sub    $0x636f6c62,%eax
imul   $0x67,0x6e(%ecx),%ebp
and    %cl,0x2f(%ecx)
dec    %edi
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
popa
je     8052c50 <_IO_stdin_used+0xa2c>
insl   (%dx),%es:(%edi)
and    %ah,%gs:(%eax)
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8052c13 <_IO_stdin_used+0x9ef>
jne    8052c65 <_IO_stdin_used+0xa41>
fs
popa
je     8052c5e <_IO_stdin_used+0xa3a>
and    %ah,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    8052c21 <_IO_stdin_used+0x9fd>
je     8052c6c <_IO_stdin_used+0xa48>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %ah,(%eax)
and    %ch,0x6f(%esi)
arpl   %sp,0x63(%ecx)
push   $0x20202065
imul   $0x20647261,%fs:0x63(%ebx),%esi
arpl   %sp,0x63(%ecx)
push   $0x64206465
popa
je     8052c88 <_IO_stdin_used+0xa64>
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ch,0x6f(%esi)
arpl   %si,0x79(%esp,%esi,2)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8052c5f <_IO_stdin_used+0xa3b>
popa
jae    8052cb5 <_IO_stdin_used+0xa91>
imul   $0x6e6f6320,0x6e(%edi),%esp
je     8052cbd <_IO_stdin_used+0xa99>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x72657420,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
imul   $0x7266206c,0x61(%esi),%ebp
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8052c93 <_IO_stdin_used+0xa6f>
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8052c9b <_IO_stdin_used+0xa77>
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8052ca2 <_IO_stdin_used+0xa7e>
jae    8052cfd <_IO_stdin_used+0xad9>
insl   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x20000a73,0x6b(%esi),%ebp
and    %ah,0x6f(%ebx)
jne    8052d00 <_IO_stdin_used+0xadc>
je     8052cf3 <_IO_stdin_used+0xacf>
bound  %edi,0x74(%ecx)
gs
jae    8052cba <_IO_stdin_used+0xa96>
and    %dh,0x65(%edx,%esi,2)
popa
je     8052cc1 <_IO_stdin_used+0xa9d>
daa
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     8052ce5 <_IO_stdin_used+0xac1>
dec    %esi
daa
and    %ah,0x73(%ecx)
and    %ah,0x20(%ecx)
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x6f(%ebx)
jne    8052d27 <_IO_stdin_used+0xb03>
je     8052cdb <_IO_stdin_used+0xab7>
sub    %ch,0x66(%ecx)
insb   (%dx),%es:(%edi)
popa
and    %ch,0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8052cf0 <_IO_stdin_used+0xacc>
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %dh,0x6b(%ebx)
imul   $0x65747962,0x5f(%eax),%esi
jae    8052cf9 <_IO_stdin_used+0xad5>
and    %dh,0x65(%edx,%esi,2)
popa
je     8052d00 <_IO_stdin_used+0xadc>
daa
jae    8052d4e <_IO_stdin_used+0xb2a>
imul   $0x6120274e,0x3d(%eax),%esi
jae    8052d0c <_IO_stdin_used+0xae8>
popa
and    %ah,0x79(%edx)
je     8052d57 <_IO_stdin_used+0xb33>
and    %ah,0x6f(%ebx)
jne    8052d65 <_IO_stdin_used+0xb41>
je     8052d19 <_IO_stdin_used+0xaf5>
sub    %ch,0x66(%ecx)
insb   (%dx),%es:(%edi)
popa
and    %ch,0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8052d2e <_IO_stdin_used+0xb0a>
or     (%eax),%al
add    %ah,(%eax)
and    %dh,0x65(%ebx)
imul   $0x79,%gs:0x62(%edi),%ebx
je     8052d78 <_IO_stdin_used+0xb54>
jae    8052d35 <_IO_stdin_used+0xb11>
and    %dh,0x65(%edx,%esi,2)
popa
je     8052d3c <_IO_stdin_used+0xb18>
daa
jae    8052d84 <_IO_stdin_used+0xb60>
imul   $0x73,%gs:0x6120274e,%edi
and    %ah,0x20(%ecx)
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x6f(%ebx)
jne    8052da1 <_IO_stdin_used+0xb7d>
je     8052d55 <_IO_stdin_used+0xb31>
sub    %ch,0x66(%edi)
insb   (%dx),%es:(%edi)
popa
and    %ch,0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8052d6a <_IO_stdin_used+0xb46>
or     (%eax),%al
add    %cl,(%edx)
push   %ebx
outsb  %gs:(%esi),(%dx)
imul   $0x25206120,%fs:0x67(%esi),%ebp
jae    8052d72 <_IO_stdin_used+0xb4e>
jae    8052dbd <_IO_stdin_used+0xb99>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
popa
and    %dh,0x75(%edx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x64642720,0x67(%esi),%ebp
daa
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8052d93 <_IO_stdin_used+0xb6f>
insl   (%dx),%es:(%edi)
popa
imul   $0x20,0x73(%ebp),%esp
imul   $0x746e6972,0x70(%edx,%ecx,1),%esi
and    %cl,0x2f(%ecx)
dec    %edi
and    %dh,0x74(%ebx)
popa
je     8052df4 <_IO_stdin_used+0xbd0>
jae    8052e01 <_IO_stdin_used+0xbdd>
imul   $0x206f7420,0x73(%ebx),%esp
jae    8052e0a <_IO_stdin_used+0xbe6>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8052e00 <_IO_stdin_used+0xbdc>
and    %ah,0x72(%ebp)
jb     8052e10 <_IO_stdin_used+0xbec>
jb     8052dc3 <_IO_stdin_used+0xb9f>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x65(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
jae    8052e25 <_IO_stdin_used+0xc01>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x6f(%ebx)
jo     8052e30 <_IO_stdin_used+0xc0c>
imul   $0x200a0a2e,0x67(%esi),%ebp
and    %ah,(%eax,%eiz,1)
fs and %ch,%fs:0x66(%ecx)
cmp    $0x7665642f,%eax
das
jp     8052e33 <_IO_stdin_used+0xc0f>
jb     8052e3f <_IO_stdin_used+0xc1b>
and    %ch,0x66(%edi)
cmp    $0x7665642f,%eax
das
outsb  %ds:(%esi),(%dx)
jne    8052e48 <_IO_stdin_used+0xc24>
insb   (%dx),%es:(%edi)
and    %dh,%es:0x69(%eax)
fs
cmp    $0x200a2124,%eax
and    %ah,(%eax,%eiz,1)
imul   $0x6c,0x6c(%ecx),%ebp
and    %ch,0x24207325
jo     8052e5f <_IO_stdin_used+0xc3b>
cmp    %fs:(%eax),%esp
jae    8052e67 <_IO_stdin_used+0xc43>
gs
gs
jo     8052e1f <_IO_stdin_used+0xbfb>
xor    %edi,(%ebx)
and    %ch,0x69(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,(%eax,%esi,2)
imul   $0x33383120,0x20(%edx,%ecx,1),%esp
xor    0x2b323033,%esi
xor    %ah,(%eax)
jb     8052e80 <_IO_stdin_used+0xc5c>
arpl   %bp,0x72(%edi)
fs
jae    8052e41 <_IO_stdin_used+0xc1d>
imul   $0x38312020,0xa(%esi),%ebp
xor    (%ebx),%esi
xor    $0x2b323033,%eax
xor    %ah,(%eax)
jb     8052e98 <_IO_stdin_used+0xc74>
arpl   %bp,0x72(%edi)
fs
jae    8052e59 <_IO_stdin_used+0xc35>
outsl  %ds:(%esi),(%dx)
jne    8052eb0 <_IO_stdin_used+0xc8c>
or     (%eax),%ah
and    %bh,(%ecx)
xor    (%eax),%edi
aaa
ss
aaa
xor    $0x36,%al
xor    (%eax,%eiz,1),%dh
bound  %edi,0x74(%ecx)
gs
jae    8052e70 <_IO_stdin_used+0xc4c>
sub    %bh,(%ecx)
cs
xor    $0x20,%al
inc    %edi
inc    %edx
sub    %esp,(%eax)
arpl   %bp,0x70(%edi)
imul   $0x3433202c,0x64(%ebp),%esp
cs xor %cs:%ss:(%edi),%dh
cmp    %esp,(%eax)
jae    8052ed0 <_IO_stdin_used+0xcac>
arpl   %bp,0x6e(%edi)
fs
jae    8052e9d <_IO_stdin_used+0xc79>
and    %dh,(%edx)
aaa
xor    %esp,(%eax)
dec    %ebp
inc    %edx
das
jae    8052e85 <_IO_stdin_used+0xc61>
or     0x70(%edi),%cl
je     8052ee9 <_IO_stdin_used+0xcc5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8052ea4 <_IO_stdin_used+0xc80>
popa
jb     8052eec <_IO_stdin_used+0xcc8>
cmp    (%edx),%cl
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c65682d
jo     8052eb9 <_IO_stdin_used+0xc95>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     8052f0f <_IO_stdin_used+0xceb>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    8052f32 <_IO_stdin_used+0xd0e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8052f44 <_IO_stdin_used+0xd20>
jo     8052f47 <_IO_stdin_used+0xd23>
je     8052ef4 <_IO_stdin_used+0xcd0>
jbe    8052f3b <_IO_stdin_used+0xd17>
jb     8052f4b <_IO_stdin_used+0xd27>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8052f4f <_IO_stdin_used+0xd2b>
popa
je     8052f4e <_IO_stdin_used+0xd2a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x74680000,0x0(%edx,%ecx,1),%esi
je     8052f68 <_IO_stdin_used+0xd44>
cmp    (%edi),%ch
das
ja     8052f74 <_IO_stdin_used+0xd50>
ja     8052f2d <_IO_stdin_used+0xd09>
outsb  %ds:(%si),(%dx)
jne    8052f31 <_IO_stdin_used+0xd0d>
outsl  %ds:(%esi),(%dx)
jb     8052f6d <_IO_stdin_used+0xd49>
das
jae    8052f78 <_IO_stdin_used+0xd54>
data16
je     8052f83 <_IO_stdin_used+0xd5f>
popa
jb     8052f74 <_IO_stdin_used+0xd50>
das
arpl   %bp,0x72(%edi)
gs
jne    8052f8a <_IO_stdin_used+0xd66>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     8052f83 <_IO_stdin_used+0xd5f>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8052f49 <_IO_stdin_used+0xd25>
jne    8052f9e <_IO_stdin_used+0xd7a>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8052faf <_IO_stdin_used+0xd8b>
popa
jb     8052fa0 <_IO_stdin_used+0xd7c>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8052fb5 <_IO_stdin_used+0xd91>
jo     8052f7d <_IO_stdin_used+0xd59>
das
das
ja     8052fbe <_IO_stdin_used+0xd9a>
ja     8052f77 <_IO_stdin_used+0xd53>
outsb  %ds:(%si),(%dx)
jne    8052f7b <_IO_stdin_used+0xd57>
outsl  %ds:(%esi),(%dx)
jb     8052fb7 <_IO_stdin_used+0xd93>
das
addr16
gs
je     8052fbd <_IO_stdin_used+0xd99>
gs
insb   (%dx),%es:(%edi)
jo     8052f88 <_IO_stdin_used+0xd64>
or     %ds:(%eax),%al
push   %edx
gs
jo     8052fcf <_IO_stdin_used+0xdab>
jb     8052fd6 <_IO_stdin_used+0xdb2>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8052fd8 <_IO_stdin_used+0xdb4>
popa
je     8052fd8 <_IO_stdin_used+0xdb4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 8052f97 <_IO_stdin_used+0xd73>
je     8052fe8 <_IO_stdin_used+0xdc4>
and    %bh,(%eax,%ebp,2)
je     8052ff2 <_IO_stdin_used+0xdce>
jo     8052fba <_IO_stdin_used+0xd96>
das
das
je     8052ff6 <_IO_stdin_used+0xdd2>
popa
outsb  %ds:(%esi),(%dx)
jae    8052ff4 <_IO_stdin_used+0xdd0>
popa
je     8052ff4 <_IO_stdin_used+0xdd0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     8053001 <_IO_stdin_used+0xddd>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     8052fff <_IO_stdin_used+0xddb>
das
je     8053000 <_IO_stdin_used+0xddc>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     8052fc8 <_IO_stdin_used+0xda4>
arpl   %bp,0x6d(%edi)
jo     8053019 <_IO_stdin_used+0xdf5>
gs
je     8053015 <_IO_stdin_used+0xdf1>
and    %ah,0x63(%edi,%ebp,2)
jne    8053023 <_IO_stdin_used+0xdff>
outsb  %gs:(%esi),(%dx)
je     805301b <_IO_stdin_used+0xdf7>
je     8053025 <_IO_stdin_used+0xe01>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8053037 <_IO_stdin_used+0xe13>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     8053033 <_IO_stdin_used+0xe0f>
jne    8053044 <_IO_stdin_used+0xe20>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
and    $0x2b756c6c,%eax
and    $0x20756c6c,%eax
jb     8053059 <_IO_stdin_used+0xe35>
arpl   %bp,0x72(%edi)
fs
jae    805301a <_IO_stdin_used+0xdf6>
imul   $0x756c6c25,0xa(%esi),%ebp
sub    0x20756c6c,%esp
jb     805306e <_IO_stdin_used+0xe4a>
arpl   %bp,0x72(%edi)
fs
jae    805302f <_IO_stdin_used+0xe0b>
outsl  %ds:(%esi),(%dx)
jne    8053086 <_IO_stdin_used+0xe62>
or     (%eax),%al
ja     8053077 <_IO_stdin_used+0xe53>
jb     8053086 <_IO_stdin_used+0xe62>
imul   $0x6f77203a,0x67(%esi),%ebp
jb     805308c <_IO_stdin_used+0xe68>
imul   $0x6f726120,0x67(%esi),%ebp
jne    8053098 <_IO_stdin_used+0xe74>
and    %ch,%fs:0x65(%ebx,%esi,2)
imul   $0x6b,%gs:(%eax),%esp
gs
jb     80530a4 <_IO_stdin_used+0xe80>
gs
insb   (%dx),%es:(%edi)
and    %ah,0x75(%edx)
and    %ah,0x6f(%bp)
jb     8053061 <_IO_stdin_used+0xe3d>
imul   $0x2528,0x20(%ebp,%eiz,2),%bp
jae    8053073 <_IO_stdin_used+0xe4f>
or     (%eax),%ah
and    %ch,0x66(%edi)
and    %ch,0x74(%ebp)
pop    %edi
je     80530ce <_IO_stdin_used+0xeaa>
jo     80530bc <_IO_stdin_used+0xe98>
cmp    $0x30257830,%eax
insb   (%dx),%es:(%edi)
js     805307f <_IO_stdin_used+0xe5b>
sub    $0x6573202d,%eax
and    %bh,%gs:(%ebx,%esi,2)
jns    80530dd <_IO_stdin_used+0xeb9>
das
insl   (%dx),%es:(%edi)
je     80530d7 <_IO_stdin_used+0xeb3>
outsl  %ds:(%esi),(%dx)
cs
push   $0x6f66203e
jb     8053097 <_IO_stdin_used+0xe73>
je     80530e1 <_IO_stdin_used+0xebd>
and    %ch,%gs:0x73(%ecx,%ebp,2)
je     80530a0 <_IO_stdin_used+0xe7c>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x70(%ecx,%edi,2)
gs
jae    8053089 <_IO_stdin_used+0xe65>
add    %al,(%eax)
add    %dh,0x61(%edi)
jb     80530fe <_IO_stdin_used+0xeda>
imul   $0x6170203a,0x67(%esi),%ebp
jb     805310d <_IO_stdin_used+0xee9>
imul   $0x61657220,0x6c(%ecx),%esp
and    %ch,%fs:(%eax)
and    $0x20756c6c,%eax
bound  %edi,0x74(%ecx)
gs
jae    80530d7 <_IO_stdin_used+0xeb3>
cmp    (%eax),%esp
jae    8053127 <_IO_stdin_used+0xf03>
addr16
addr16
gs
jae    805312b <_IO_stdin_used+0xf07>
and    %ch,0x66(%ecx)
insb   (%dx),%es:(%edi)
popa
addr16 cmp $0x6c6c7566,%eax
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x77,(%eax),%eax
popa
jb     805313a <_IO_stdin_used+0xf16>
imul   $0x6170203a,0x67(%esi),%ebp
jb     8053149 <_IO_stdin_used+0xf25>
imul   $0x61657220,0x6c(%ecx),%esp
and    %ch,%fs:(%eax)
and    $0x20756c6c,%eax
bound  %edi,0x74(%ecx)
sub    %edi,%gs:(%ebx)
and    %dh,0x75(%ebx)
addr16
addr16
gs
jae    8053166 <_IO_stdin_used+0xf42>
and    %ch,0x66(%ecx)
insb   (%dx),%es:(%edi)
popa
addr16 cmp $0x6c6c7566,%eax
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
je     8053185 <_IO_stdin_used+0xf61>
jb     8053180 <_IO_stdin_used+0xf5c>
and    %ch,0x66(%edi)
data16
and    %cl,0x5f(%edi)
inc    %esp
dec    %ecx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
cmp    (%eax),%ah
and    $0x61630073,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805314b <_IO_stdin_used+0xf27>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ah,%gs:0x6e(%ecx)
jns    8053157 <_IO_stdin_used+0xf33>
je     80531b0 <_IO_stdin_used+0xf8c>
outsl  %ds:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %bh,0x61(%ebx)
jae    80531a5 <_IO_stdin_used+0xf81>
imul   $0x64636265,0x2c(%ecx),%ebp
imul   $0x7d6d6269,0x2c(%ebx),%esp
add    %al,(%eax)
add    %al,(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805317b <_IO_stdin_used+0xf57>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ah,%gs:0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x6e(%ebp)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
add    %al,(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805319f <_IO_stdin_used+0xf7b>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ch,%gs:0x61(%ebx,%eiz,2)
jae    80531f1 <_IO_stdin_used+0xfcd>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x63(%ebp)
popa
jae    80531fb <_IO_stdin_used+0xfd7>
add    %al,(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80531bf <_IO_stdin_used+0xf9b>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ah,%gs:0x78(%ebp)
arpl   %bp,0x61(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6f(%esi)
arpl   %si,0x65(%edx)
popa
je     80531b8 <_IO_stdin_used+0xf94>
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80531df <_IO_stdin_used+0xfbb>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ah,%gs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x61(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6f(%esi)
arpl   %sp,0x63(%ecx)
push   $0x65
jns    805324d <_IO_stdin_used+0x1029>
jne    8053200 <_IO_stdin_used+0xfdc>
jo     8053254 <_IO_stdin_used+0x1030>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x62(%ecx)
insb   (%dx),%es:(%edi)
jns    8053209 <_IO_stdin_used+0xfe5>
ja     805324c <_IO_stdin_used+0x1028>
outsb  %ds:(%esi),(%dx)
je     805320e <_IO_stdin_used+0xfea>
arpl   %bp,0x6e(%edi)
jbe    8053230 <_IO_stdin_used+0x100c>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053269 <_IO_stdin_used+0x1045>
jne    8053267 <_IO_stdin_used+0x1043>
arpl   %sp,(%eax)
ja     8053266 <_IO_stdin_used+0x1042>
je     8053267 <_IO_stdin_used+0x1043>
and    %ch,0x66(%edi)
insb   (%dx),%es:(%edi)
popa
addr16 cmp $0x65707061,%eax
outsb  %ds:(%esi),(%dx)
add    %al,%fs:(%eax)
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
data16
data16
jae    805327a <_IO_stdin_used+0x1056>
je     8053237 <_IO_stdin_used+0x1013>
je     8053288 <_IO_stdin_used+0x1064>
outsl  %ds:(%esi),(%dx)
and    %ch,0x72(%ecx,%eiz,2)
cmp    %gs:(%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053249 <_IO_stdin_used+0x1025>
je     805329d <_IO_stdin_used+0x1079>
jne    805329b <_IO_stdin_used+0x1077>
arpl   %sp,0x74(%ecx)
and    %dh,%gs:0x20(%edi,%ebp,2)
popa
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 80532a5 <_IO_stdin_used+0x1081>
and    %ch,0x66(%edi)
and    %dh,0x65(%ebx)
imul   $0x20,%gs:0x756c6c25,%edi
sub    %ah,0x622d756c
jns    80532c7 <_IO_stdin_used+0x10a3>
sub    %esp,%gs:(%eax)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,0x0(%ebx),%esi
add    %al,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
je     80532de <_IO_stdin_used+0x10ba>
jne    80532dc <_IO_stdin_used+0x10b8>
arpl   %sp,0x74(%ecx)
and    %dh,%gs:0x20(%edi,%ebp,2)
and    $0x20756c6c,%eax
bound  %edi,0x74(%ecx)
gs
jae    80532a1 <_IO_stdin_used+0x107d>
imul   $0x7074756f,0x20(%esi),%ebp
jne    80532fe <_IO_stdin_used+0x10da>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x6d000073
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8053313 <_IO_stdin_used+0x10ef>
and    %ah,0x78(%ebp)
push   $0x74737561
gs and %ah,%fs:%gs:0x79(%edx)
and    %ch,0x6e(%ecx)
jo     8053321 <_IO_stdin_used+0x10fd>
je     80532ce <_IO_stdin_used+0x10aa>
bound  %esi,0x66(%ebp)
data16
gs
jb     80532d5 <_IO_stdin_used+0x10b1>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x69(%ebx)
jp     8053321 <_IO_stdin_used+0x10fd>
and    %ah,0x6220757a
jns    8053338 <_IO_stdin_used+0x1114>
gs
jae    80532e7 <_IO_stdin_used+0x10c3>
sub    %ah,0x6d002973
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805334b <_IO_stdin_used+0x1127>
and    %ah,0x78(%ebp)
push   $0x74737561
gs and %ah,%fs:%gs:0x79(%edx)
and    %ch,0x75(%edi)
je     8053354 <_IO_stdin_used+0x1130>
jne    805335a <_IO_stdin_used+0x1136>
and    %ah,0x75(%edx)
data16
data16
gs
jb     805330e <_IO_stdin_used+0x10ea>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x69(%ebx)
jp     805335a <_IO_stdin_used+0x1136>
and    %ah,0x6220757a
jns    8053371 <_IO_stdin_used+0x114d>
gs
jae    8053320 <_IO_stdin_used+0x10fc>
sub    %ah,0x2973
add    %al,(%eax)
jae    8053373 <_IO_stdin_used+0x114f>
jp     8053371 <_IO_stdin_used+0x114d>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%eax)
jne    805337b <_IO_stdin_used+0x1157>
outsb  %ds:(%esi),(%dx)
je     8053385 <_IO_stdin_used+0x1161>
je     8053389 <_IO_stdin_used+0x1165>
pop    %edi
je     8053343 <_IO_stdin_used+0x111f>
and    %bh,0x61702820(,%edi,1)
addr16
gs
pop    %edi
jae    805338f <_IO_stdin_used+0x116b>
jp     805338d <_IO_stdin_used+0x1169>
and    %ch,0x293120
add    %al,(%eax)
and    $0x63203a73,%eax
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805335b <_IO_stdin_used+0x1137>
jae    80533a8 <_IO_stdin_used+0x1184>
imul   $0x73206f74,0x20(%eax),%esi
jo     80533ab <_IO_stdin_used+0x1187>
arpl   %bp,0x66(%ecx)
imul   $0x66666f20,0x64(%ebp),%esp
jae    80533b7 <_IO_stdin_used+0x1193>
je     8053354 <_IO_stdin_used+0x1130>
outsl  %ds:(%esi),(%dx)
data16
data16
jae    80533be <_IO_stdin_used+0x119a>
je     805337b <_IO_stdin_used+0x1157>
outsl  %ds:(%esi),(%dx)
jbe    80533c3 <_IO_stdin_used+0x119f>
jb     80533c6 <_IO_stdin_used+0x11a2>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8053384 <_IO_stdin_used+0x1160>
ja     80533ce <_IO_stdin_used+0x11aa>
imul   $0x64616572,0x20(%ebp,%eiz,2),%ebp
imul   $0x6c696620,0x67(%esi),%ebp
and    %ah,%gs:0x73
ja     80533df <_IO_stdin_used+0x11bb>
jb     80533ee <_IO_stdin_used+0x11ca>
imul   $0x6e69203a,0x67(%esi),%ebp
jbe    80533ea <_IO_stdin_used+0x11c6>
insb   (%dx),%es:(%edi)
imul   $0x20656c69,0x66(%eax,%eiz,1),%esp
outsl  %ds:(%esi),(%dx)
data16
data16
jae    80533fc <_IO_stdin_used+0x11d8>
je     80533b9 <_IO_stdin_used+0x1195>
popa
data16
je     8053402 <_IO_stdin_used+0x11de>
jb     80533bf <_IO_stdin_used+0x119b>
popaw
imul   $0x61657220,0x64(%ebp,%eiz,2),%ebp
add    %al,%fs:(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80533d3 <_IO_stdin_used+0x11af>
ja     8053424 <_IO_stdin_used+0x1200>
jb     8053422 <_IO_stdin_used+0x11fe>
and    %ah,0x72(%ecx)
outsl  %ds:(%esi),(%dx)
jne    805342b <_IO_stdin_used+0x1207>
and    %ch,%fs:0x65(%ebx)
jb     8053431 <_IO_stdin_used+0x120d>
gs
insb   (%dx),%es:(%edi)
and    %ah,0x75(%edx)
and    %ah,0x66(%bx,%di)
je     8053433 <_IO_stdin_used+0x120f>
jb     80533f0 <_IO_stdin_used+0x11cc>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
je     8053452 <_IO_stdin_used+0x122e>
jne    8053450 <_IO_stdin_used+0x122c>
arpl   %sp,0x74(%ecx)
and    %dh,%gs:0x20(%edi,%ebp,2)
and    $0x20646c6c,%eax
bound  %edi,0x74(%ecx)
gs
jae    8053415 <_IO_stdin_used+0x11f1>
imul   $0x7074756f,0x20(%esi),%ebp
jne    8053472 <_IO_stdin_used+0x124e>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x66000073
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x20647261,%fs:0x63(%ebx),%esi
arpl   %sp,0x63(%ecx)
push   $0x6f662065
jb     805345e <_IO_stdin_used+0x123a>
and    %ah,0x53550073
push   %edx
xor    %eax,(%eax)
or     0x65(%edx),%dl
jo     80534a1 <_IO_stdin_used+0x127d>
jb     80534a8 <_IO_stdin_used+0x1284>
and    %ah,0x75622073
addr16 jae 805345d <_IO_stdin_used+0x1239>
je     80534ae <_IO_stdin_used+0x128a>
and    %ah,0x62000a73
jne    80534ae <_IO_stdin_used+0x128a>
sub    $0x65726f63,%eax
jne    80534c2 <_IO_stdin_used+0x129e>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     80534c0 <_IO_stdin_used+0x129c>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    80534aa <_IO_stdin_used+0x1286>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     80534db <_IO_stdin_used+0x12b7>
jne    80534ec <_IO_stdin_used+0x12c8>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
and    $0x20756c6c,%eax
je     80534f9 <_IO_stdin_used+0x12d5>
jne    80534f7 <_IO_stdin_used+0x12d3>
arpl   %sp,0x74(%ecx)
gs and %dh,%fs:%gs:0x65(%edx)
arpl   %bp,0x72(%edi)
fs
jae    80534a1 <_IO_stdin_used+0x127d>
add    %ah,0x20756c6c
je     8053511 <_IO_stdin_used+0x12ed>
jne    805350f <_IO_stdin_used+0x12eb>
arpl   %sp,0x74(%ecx)
gs and %dh,%fs:%gs:0x65(%edx)
arpl   %bp,0x72(%edi)
or     %fs:(%eax),%al
and    $0x20756c6c,%eax
bound  %edi,0x74(%ecx)
gs
jae    80534da <_IO_stdin_used+0x12b6>
sub    %ah,0x63202973
outsl  %ds:(%esi),(%dx)
jo     805352c <_IO_stdin_used+0x1308>
gs add %ah,%fs:%gs:0x20756c6c
bound  %edi,0x74(%ecx)
and    %ch,%gs:(%eax)
and    $0x63202973,%eax
outsl  %ds:(%esi),(%dx)
jo     8053542 <_IO_stdin_used+0x131e>
gs add %cl,%fs:%gs:0x6e(%ecx)
imul   $0x7974,0x69(%esi),%bp
and    %al,0x0(%edx)
sub    $0x20,%al
and    $0x2c732067,%eax
and    %ah,0xa732f73
add    %ah,0x25203a73
jae    80534fc <_IO_stdin_used+0x12d8>
bound  %esp,0x45(%ebx)
inc    %edi
imul   $0x50,0x4d(%ebx),%ecx
push   %esp
ja     8053560 <_IO_stdin_used+0x133c>
pop    %edx
xor    %al,(%eax)
jae    8053571 <_IO_stdin_used+0x134d>
je     8053582 <_IO_stdin_used+0x135e>
imul   $0x616c6620,0x67(%esi),%ebp
addr16 jae 8053538 <_IO_stdin_used+0x1314>
outsw  %ds:(%esi),(%dx)
jb     805353c <_IO_stdin_used+0x1318>
and    $0x6c630073,%eax
outsl  %ds:(%esi),(%dx)
jae    805358d <_IO_stdin_used+0x1369>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%bx,%di)
jo     80535a0 <_IO_stdin_used+0x137c>
je     805354d <_IO_stdin_used+0x1329>
imul   $0x7325,0x20(%ebp,%eiz,2),%bp
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    80535a3 <_IO_stdin_used+0x137f>
outsb  %ds:(%esi),(%dx)
and    %ch,0x75(%bx)
je     80535b1 <_IO_stdin_used+0x138d>
jne    80535b7 <_IO_stdin_used+0x1393>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053573 <_IO_stdin_used+0x134f>
data16
jae    80535ca <_IO_stdin_used+0x13a6>
popa
je     8053579 <_IO_stdin_used+0x1355>
and    $0x73250073,%eax
cmp    (%eax),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053587 <_IO_stdin_used+0x1363>
jae    80535d4 <_IO_stdin_used+0x13b0>
imul   $0x203a7325,0x0(%eax),%esi
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053597 <_IO_stdin_used+0x1373>
jae    80535de <_IO_stdin_used+0x13ba>
imul   $0x65,%gs:(%eax),%eax
jb     80535f1 <_IO_stdin_used+0x13cd>
outsl  %ds:(%esi),(%dx)
jb     80535a2 <_IO_stdin_used+0x137e>
jb     80535e9 <_IO_stdin_used+0x13c5>
popa
imul   $0x732520,%fs:0x67(%esi),%ebp
ja     8053601 <_IO_stdin_used+0x13dd>
imul   $0x6f742067,0x6e(%ecx,%ebp,2),%esi
and    %ah,0x66690073
add    %ch,0x66(%edi)
add    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jbe    80535a6 <_IO_stdin_used+0x1382>
imul   $0x6f006761,0x6c(%esi),%esp
data16
insb   (%dx),%es:(%edi)
popa
add    %dh,0x74(%bp,%di)
popa
je     805362c <_IO_stdin_used+0x1408>
jae    80535b9 <_IO_stdin_used+0x1395>
imul   $0x73626f00,0x73(%edx),%esp
add    %ah,0x62(%ebx)
jae    80535c5 <_IO_stdin_used+0x13a1>
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     80535cb <_IO_stdin_used+0x13a7>
daa
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     8053631 <_IO_stdin_used+0x140d>
bound  %edi,0x74(%ecx)
gs
jae    80535ff <_IO_stdin_used+0x13db>
add    %ah,(%edi)
jae    8053647 <_IO_stdin_used+0x1423>
imul   $0x65747962,0x5f(%eax),%esi
jae    805360c <_IO_stdin_used+0x13e8>
add    %dl,0x4f(%eax)
push   %ebx
dec    %ecx
pop    %eax
dec    %esp
pop    %ecx
pop    %edi
inc    %ebx
dec    %edi
push   %edx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
add    %ch,(%edi)
jne    805366c <_IO_stdin_used+0x1448>
jb     805362a <_IO_stdin_used+0x1406>
jae    8053665 <_IO_stdin_used+0x1441>
popa
jb     8053665 <_IO_stdin_used+0x1441>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dl,%gs:0x74(%ebx)
jne    805366d <_IO_stdin_used+0x1449>
jb     8053682 <_IO_stdin_used+0x145e>
and    %cl,0x65(%ebx)
insl   (%dx),%es:(%edi)
jo     8053614 <_IO_stdin_used+0x13f0>
inc    %esp
popa
jbe    8053681 <_IO_stdin_used+0x145d>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     805368b <_IO_stdin_used+0x1467>
add    %dl,%gs:0x61(%eax)
jne    8053694 <_IO_stdin_used+0x1470>
and    %dl,0x75(%edx)
bound  %ebp,0x6e(%ecx)
add    %ah,0x0(%esp,%eiz,2)
jne    80536a2 <_IO_stdin_used+0x147e>
jb     805369b <_IO_stdin_used+0x1477>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x706f2064,0x65(%edx),%edi
gs
jb     80536a5 <_IO_stdin_used+0x1481>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6e690073
jbe    80536af <_IO_stdin_used+0x148b>
insb   (%dx),%es:(%edi)
imul   $0x65766e6f,0x63(%eax,%eiz,1),%esp
jb     80536cc <_IO_stdin_used+0x14a8>
imul   $0x766e6900,0x6e(%edi),%ebp
popa
insb   (%dx),%es:(%edi)
imul   $0x7475706e,0x69(%eax,%eiz,1),%esp
and    %ah,0x6c(%esi)
popa
add    %ch,0x6e(%bx,%di)
jbe    80536d5 <_IO_stdin_used+0x14b1>
insb   (%dx),%es:(%edi)
imul   $0x75707475,0x6f(%eax,%eiz,1),%esp
je     805369f <_IO_stdin_used+0x147b>
data16
insb   (%dx),%es:(%edi)
popa
add    %ch,0x6e(%bx,%di)
jbe    80536e9 <_IO_stdin_used+0x14c5>
insb   (%dx),%es:(%edi)
imul   $0x75746174,0x73(%eax,%eiz,1),%esp
jae    80536b3 <_IO_stdin_used+0x148f>
data16
insb   (%dx),%es:(%edi)
popa
add    %ch,0x6e(%bx,%di)
jbe    80536fd <_IO_stdin_used+0x14d9>
insb   (%dx),%es:(%edi)
imul   $0x65626d75,0x6e(%eax,%eiz,1),%esp
jb     80536c7 <_IO_stdin_used+0x14a3>
and    $0x66270073,%eax
jne    805371a <_IO_stdin_used+0x14f6>
insb   (%dx),%es:(%edi)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%edi),%esp
daa
jae    805371e <_IO_stdin_used+0x14fa>
imul   $0x79,%gs:0x62(%edi),%ebx
je     8053725 <_IO_stdin_used+0x1501>
jae    80536e9 <_IO_stdin_used+0x14c5>
add    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     805372f <_IO_stdin_used+0x150b>
and    %ch,0x6e(%ecx)
jo     8053745 <_IO_stdin_used+0x1521>
je     80536d2 <_IO_stdin_used+0x14ae>
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
jo     8053744 <_IO_stdin_used+0x1520>
outsb  %ds:(%esi),(%dx)
and    %ah,0x74730073
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8053750 <_IO_stdin_used+0x152c>
and    %ch,0x75(%edi)
je     8053761 <_IO_stdin_used+0x153d>
jne    8053767 <_IO_stdin_used+0x1543>
add    %dh,0x72(%ebx)
arpl   %bp,(%edi)
fs fs arpl %ax,%cs:%fs:(%eax)
gs
jb     8053772 <_IO_stdin_used+0x154e>
outsl  %ds:(%esi),(%dx)
jb     8053723 <_IO_stdin_used+0x14ff>
ja     8053777 <_IO_stdin_used+0x1553>
imul   $0x73252067,0x6e(%ecx,%ebp,2),%esi
add    %ah,0x64(%esi)
popa
je     8053774 <_IO_stdin_used+0x1550>
jae    805378e <_IO_stdin_used+0x156a>
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
popaw
imul   $0x726f6620,0x64(%ebp,%eiz,2),%ebp
and    %ah,0x73660073
jns    8053798 <_IO_stdin_used+0x1574>
arpl   %sp,(%eax)
popaw
imul   $0x726f6620,0x64(%ebp,%eiz,2),%ebp
and    %ah,0x73
add    %al,(%eax)
add    %al,(%eax)
fs
fs
pop    %edi
arpl   %bp,0x70(%edi)
jns    8053748 <_IO_stdin_used+0x1524>
add    %al,(%ecx)
add    (%ebx),%al
pushf
or     %eax,-0x71726881(%esi)
or     0x11100f0e(,%ecx,1),%ecx
adc    (%ebx),%dl
popf
test   %ecx,(%eax)
xchg   %ebx,(%eax)
sbb    %edx,0x1e1d1c8f(%edx)
pop    %ds
addb   $0x17,0xa848382(%ecx)
sbb    -0x73747577(%eax),%ecx
add    $0x91900706,%eax
push   %ss
xchg   %eax,%ebx
xchg   %eax,%esp
xchg   %eax,%ebp
xchg   %eax,%esi
add    $0x98,%al
cltd
lcall  $0x201a,$0x9e15149b
mov    0xa4a3a2a1,%al
movsl  %ds:(%esi),%es:(%edi)
cmpsb  %es:(%edi),%ds:(%esi)
cmpsl  %es:(%edi),%ds:(%esi)
test   $0x5b,%al
cs
cmp    $0x28,%al
sub    (%ecx),%esp
es
test   $0xadacabaa,%eax
scas   %es:(%edi),%al
scas   %es:(%edi),%eax
mov    $0xb1,%al
pop    %ebp
and    $0x2a,%al
sub    %edi,(%ebx)
pop    %esi
sub    $0xb4b3b22f,%eax
mov    $0xb6,%ch
mov    $0xb8,%bh
mov    $0x5f252c7c,%ecx
ds
aas
mov    $0xbebdbcbb,%edx
mov    $0x60c2c1c0,%edi
cmp    (%ebx),%ah
inc    %eax
daa
cmp    $0x6261c322,%eax
arpl   %sp,0x66(%ebp,%eiz,2)
addr16 push $0xc6c5c469
(bad)
enter  $0xcac9,$0x6a
imul   $0x6f,0x6e(%ebp,%ebp,2),%ebp
jo     805386a <_IO_stdin_used+0x1646>
jb     80537c6 <_IO_stdin_used+0x15a2>
int3
int    $0xce
iret
rcl    %cl
jle    8053876 <_IO_stdin_used+0x1652>
je     805387a <_IO_stdin_used+0x1656>
jbe    805387e <_IO_stdin_used+0x165a>
js     8053882 <_IO_stdin_used+0x165e>
jp     80537dd <_IO_stdin_used+0x15b9>
rcl    %cl,%esp
aad    $0xd6
xlat   %ds:(%ebx)
fcomp  %st(1)
fcmovu %st(3),%st
(bad)
(bad)
loopne 80537fb <_IO_stdin_used+0x15d7>
loop   80537ff <_IO_stdin_used+0x15db>
in     $0xe5,%al
out    %al,$0xe7
jnp    8053863 <_IO_stdin_used+0x163f>
inc    %edx
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
dec    %ecx
call   f4f12318 <opterr+0xecebb0b4>
in     (%dx),%eax
jge    805387c <_IO_stdin_used+0x1658>
dec    %ebx
dec    %esp
dec    %ebp
dec    %esi
dec    %edi
push   %eax
push   %ecx
push   %edx
out    %al,(%dx)
out    %eax,(%dx)
lock icebp
repnz repz pop %esp
lahf
push   %ebx
push   %esp
push   %ebp
push   %esi
push   %edi
pop    %eax
pop    %ecx
pop    %edx
hlt
cmc
div    %bh
clc
stc
xor    %dh,(%ecx)
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
cmp    %bh,(%ecx)
cli
sti
cld
std
(bad)
incl   (%eax)
add    %eax,(%edx)
add    (%edi),%esi
sub    $0x5162f2e,%eax
and    $0xe0d0c0b,%eax
movups (%ecx),%xmm2
adc    (%ebx),%dl
cmp    $0x3d,%al
xor    (%esi),%ah
sbb    %bl,(%ecx)
aas
daa
sbb    $0x1d,%al
push   %ds
pop    %ds
inc    %eax
pop    %edx
jg     80538ff <_IO_stdin_used+0x16db>
pop    %ebx
insb   (%dx),%es:(%edi)
push   %eax
jge    80538d6 <_IO_stdin_used+0x16b2>
pop    %ebp
pop    %esp
dec    %esi
imul   $0x61,0x4b(%eax),%esp
lock icebp
repnz repz hlt
cmc
div    %bh
clc
stc
jp     80538fa <_IO_stdin_used+0x16d6>
dec    %esp
jle    805390d <_IO_stdin_used+0x16e9>
outsl  %ds:(%esi),(%dx)
jl     8053863 <_IO_stdin_used+0x163f>
ret    $0xc4c3
(bad)
enter  $0xd1c9,$0xd2
rcl    %cl,%esp
aad    $0xd6
xlat   %ds:(%ebx)
fcomp  %st(1)
loop   8053898 <_IO_stdin_used+0x1674>
in     $0xe5,%al
out    %al,$0xe7
call   c5e5e6a7 <opterr+0xbde07443>
pop    %edi
insl   (%dx),%es:(%edi)
jns    8053843 <_IO_stdin_used+0x161f>
(bad)
addl   $0xffffff91,-0x7677787a(%ebp,%eax,4)
xchg   %eax,%edx
xchg   %eax,%ebx
xchg   %eax,%esp
xchg   %eax,%ebp
xchg   %eax,%esi
xchg   %eax,%edi
cwtl
cltd
mov    %al,0xa6a5a4a3
cmpsl  %es:(%edi),%ds:(%esi)
test   $0xa9,%al
rorb   $0xa1,-0x30(%edi)
pop    %es
and    %ah,(%ecx)
and    (%ebx),%ah
and    $0x15,%al
push   %es
pop    %ss
sub    %ch,(%ecx)
sub    (%ebx),%ch
sub    $0x9,%al
or     (%ebx),%bl
xor    %dh,(%ecx)
sbb    (%ebx),%dh
xor    $0x35,%al
or     %bh,%ss:(%eax)
cmp    %edi,(%edx)
cmp    (%esp,%edx,1),%eax
loope,pt 8053942 <_IO_stdin_used+0x171e>
inc    %edx
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
dec    %ecx
push   %ecx
push   %edx
push   %ebx
push   %esp
push   %ebp
push   %esi
push   %edi
pop    %eax
pop    %ecx
bound  %esp,0x64(%ebx)
gs
addr16 pushw $0x7069
jno    805398f <_IO_stdin_used+0x176b>
jae    8053993 <_IO_stdin_used+0x176f>
jne    8053997 <_IO_stdin_used+0x1773>
ja     805399b <_IO_stdin_used+0x1777>
orb    $0x8f,-0x71727375(%edx)
nop
lcall  $0xa09f,$0x9e9d9c9b
stos   %al,%es:(%edi)
stos   %eax,%es:(%edi)
lods   %ds:(%esi),%al
lods   %ds:(%esi),%eax
scas   %es:(%edi),%al
scas   %es:(%edi),%eax
mov    $0xb1,%al
mov    $0xb3,%dl
mov    $0xb5,%ah
mov    $0xb7,%dh
mov    $0xbcbbbab9,%eax
mov    $0xcbcabfbe,%ebp
int3
int    $0xce
iret
fcmovu %st(3),%st
(bad)
(bad)
ljmp   $0xfaef,$0xeeedeceb
sti
cld
std
(bad)
incl   (%eax)
add    %eax,(%edx)
add    (%edi),%esi
sub    $0x5162f2e,%eax
and    $0xe0d0c0b,%eax
movups (%ecx),%xmm2
adc    (%ebx),%dl
cmp    $0x3d,%al
xor    (%esi),%ah
sbb    %bl,(%ecx)
aas
daa
sbb    $0x1d,%al
push   %ds
pop    %ds
inc    %eax
dec    %edi
jg     80539ff <_IO_stdin_used+0x17db>
pop    %ebx
insb   (%dx),%es:(%edi)
push   %eax
jge    80539d6 <_IO_stdin_used+0x17b2>
pop    %ebp
pop    %esp
dec    %esi
imul   $0x61,0x4b(%eax),%esp
lock icebp
repnz repz hlt
cmc
div    %bh
clc
stc
jp     80539fa <_IO_stdin_used+0x17d6>
dec    %esp
jle    8053a0d <_IO_stdin_used+0x17e9>
outsl  %ds:(%esi),(%dx)
jl     8053963 <_IO_stdin_used+0x173f>
ret    $0xc4c3
(bad)
enter  $0xd1c9,$0xd2
rcl    %cl,%esp
aad    $0xd6
xlat   %ds:(%ebx)
fcomp  %st(1)
loop   8053998 <_IO_stdin_used+0x1774>
in     $0xe5,%al
out    %al,$0xe7
call   62e584a7 <opterr+0x5ae01243>
pop    %edi
insl   (%dx),%es:(%edi)
jns    8053943 <_IO_stdin_used+0x171f>
(bad)
addl   $0xffffff91,-0x7677787a(%ebp,%eax,4)
xchg   %eax,%edx
xchg   %eax,%ebx
xchg   %eax,%esp
xchg   %eax,%ebp
xchg   %eax,%esi
xchg   %eax,%edi
cwtl
cltd
mov    %al,0xa6a5a4a3
cmpsl  %es:(%edi),%ds:(%esi)
test   $0xa9,%al
shrb   $0xa1,-0x30(%edx)
pop    %es
and    %ah,(%ecx)
and    (%ebx),%ah
and    $0x15,%al
push   %es
pop    %ss
sub    %ch,(%ecx)
sub    (%ebx),%ch
sub    $0x9,%al
or     (%ebx),%bl
xor    %dh,(%ecx)
sbb    (%ebx),%dh
xor    $0x35,%al
or     %bh,%ss:(%eax)
cmp    %edi,(%edx)
cmp    (%esp,%edx,1),%eax
loope,pt 8053a42 <_IO_stdin_used+0x181e>
inc    %edx
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
dec    %ecx
push   %ecx
push   %edx
push   %ebx
push   %esp
push   %ebp
push   %esi
push   %edi
pop    %eax
pop    %ecx
bound  %esp,0x64(%ebx)
gs
addr16 pushw $0x7069
jno    8053a8f <_IO_stdin_used+0x186b>
jae    8053a93 <_IO_stdin_used+0x186f>
jne    8053a97 <_IO_stdin_used+0x1873>
ja     8053a9b <_IO_stdin_used+0x1877>
orb    $0x8f,-0x71727375(%edx)
nop
lcall  $0xa09f,$0x9e9d9c9b
stos   %al,%es:(%edi)
stos   %eax,%es:(%edi)
lods   %ds:(%esi),%al
lods   %ds:(%esi),%eax
scas   %es:(%edi),%al
scas   %es:(%edi),%eax
mov    $0xb1,%al
mov    $0xb3,%dl
mov    $0xb5,%ah
mov    $0xb7,%dh
mov    $0xbcbbbab9,%eax
mov    $0xcbcabfbe,%ebp
int3
int    $0xce
iret
fcmovu %st(3),%st
(bad)
(bad)
ljmp   $0xfaef,$0xeeedeceb
sti
cld
std
(bad)
ljmp   *0x6f(%esi)
js     8053aca <_IO_stdin_used+0x18a6>
gs
jb     8053a67 <_IO_stdin_used+0x1843>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
popa
jo     8053b13 <_IO_stdin_used+0x18ef>
outsb  %gs:(%esi),(%dx)
add    %al,%fs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
popa
jb     8053b2f <_IO_stdin_used+0x190b>
add    %al,(%eax)
arpl   %bp,0x6f(%ecx)
add    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8053aea <_IO_stdin_used+0x18c6>
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
fs
jae    8053b6c <_IO_stdin_used+0x1948>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
popa
je     8053b6e <_IO_stdin_used+0x194a>
insl   (%dx),%es:(%edi)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x63(%ecx)
push   $0x65
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x79(%esp,%esi,2)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8053b39 <_IO_stdin_used+0x1915>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %ch,0x6f(%esi)
insb   (%dx),%es:(%edi)
imul   $0x73,0x6b(%esi),%ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
jae    8053bdb <_IO_stdin_used+0x19b7>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
adc    %dl,(%eax)
add    %dh,0x78(%ebp,%eiz,2)
je     8053b75 <_IO_stdin_used+0x1951>
add    %al,(%eax)
add    %ah,0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,0x6f(%ebx)
jne    8053c02 <_IO_stdin_used+0x19de>
je     8053bf5 <_IO_stdin_used+0x19d1>
bound  %edi,0x74(%ecx)
gs
jae    8053b9c <_IO_stdin_used+0x1978>
add    $0x0,%al
add    %al,(%eax)
jae    8053c0d <_IO_stdin_used+0x19e9>
imul   $0x65747962,0x5f(%eax),%esi
jae    8053bab <_IO_stdin_used+0x1987>
add    %cl,(%eax)
add    %al,(%eax)
add    %dh,0x65(%ebx)
imul   $0x79,%gs:0x62(%edi),%ebx
je     8053c1e <_IO_stdin_used+0x19fa>
jae    8053bbb <_IO_stdin_used+0x1997>
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x73(%ecx)
arpl   %bp,0x69(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
or     %al,(%eax)
add    %ah,0x62(%ebp)
arpl   %sp,0x63(%ecx,%ebp,2)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%cl
add    %al,(%eax)
imul   $0x0,0x6d(%edx),%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax,%ecx,1)
add    %al,(%eax)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
or     %al,(%eax)
add    %dh,0x6e(%ebp)
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%eax),%eax
add    %al,(%eax)
add    %dl,(%eax)
or     %al,(%eax)
add    %ch,0x61(%ebx,%eiz,2)
jae    8053c9a <_IO_stdin_used+0x1a76>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
or     %al,(%eax)
add    %dh,0x63(%ebp)
popa
jae    8053caa <_IO_stdin_used+0x1a86>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x8(%eax)
add    %al,(%eax)
jae    8053cc2 <_IO_stdin_used+0x1a9e>
popa
jb     8053cc8 <_IO_stdin_used+0x1aa4>
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
jae    8053cd9 <_IO_stdin_used+0x1ab5>
popa
bound  %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x6e000008(%eax)
outsl  %ds:(%esi),(%dx)
gs
jb     8053ce7 <_IO_stdin_used+0x1ac3>
outsl  %ds:(%esi),(%dx)
jb     8053c78 <_IO_stdin_used+0x1a54>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x65(%edx)
popa
je     8053c88 <_IO_stdin_used+0x1a64>
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
gs
js     8053cf6 <_IO_stdin_used+0x1ad2>
insb   (%dx),%es:(%edi)
add    %ah,(%eax)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053d16 <_IO_stdin_used+0x1af2>
jne    8053d14 <_IO_stdin_used+0x1af0>
arpl   %ax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
jae    8053d2b <_IO_stdin_used+0x1b07>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
add    $0x0,%al
add    %ah,0x64(%esi)
popa
je     8053d26 <_IO_stdin_used+0x1b02>
jae    8053d40 <_IO_stdin_used+0x1b1c>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %ah,0x73(%esi)
jns    8053d42 <_IO_stdin_used+0x1b1e>
arpl   %ax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
sbbb   $0x6b,0x28(%edi)
outsb  %ds:(%esi),(%dx)
dec    %esi
cmp    %ch,(%esi)
xor    (%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     8053d09 <_IO_stdin_used+0x1ae5>
add    %ah,%cs:0x664c302e
add    %ah,0x664c312e
add    %al,0x4c(%edx)
dec    %edi
inc    %ebx
dec    %ebx
pop    %edi
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
add    %al,0x4c(%edx)
dec    %edi
inc    %ebx
dec    %ebx
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
add    %ah,0x45(%ebp)
addr16 inc %edi
imul   $0x4d,0x6d(%ebx),%ecx
jo     8053d86 <_IO_stdin_used+0x1b62>
je     8053d8c <_IO_stdin_used+0x1b68>
jns    8053d93 <_IO_stdin_used+0x1b6f>
jp     8053d96 <_IO_stdin_used+0x1b72>
xor    %al,(%eax)
push   $0x6e616d75
sub    $0x64616572,%eax
popa
bound  %ebp,0x0(%ebp,%eiz,2)
jae    8053db8 <_IO_stdin_used+0x1b94>
add    %dh,-0x70000000(%eax)
add    %al,(%eax)
add    %bh,(%esi)
cmp    $0x3d4d0805,%eax
add    $0x8,%eax
add    %al,(%eax)
dec    %ebx
dec    %ebp
inc    %edi
push   %esp
push   %eax
inc    %ebp
pop    %edx
pop    %ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %edi
add    %al,(%eax)
and    %al,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
ds
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sub    (%eax),%eax
push   $0x706c65
add    %dl,0x8053d(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
push   %ebp
ss
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8053e37 <_IO_stdin_used+0x1c13>
xor    %bl,0x20(%ebp)
ja     8053e42 <_IO_stdin_used+0x1c1e>
jae    8053e03 <_IO_stdin_used+0x1bdf>
jo     8053e46 <_IO_stdin_used+0x1c22>
jae    8053e5a <_IO_stdin_used+0x1c36>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    8053e57 <_IO_stdin_used+0x1c33>
push   $0x206e6120
gs
js     8053e5d <_IO_stdin_used+0x1c39>
arpl   %sp,(%eax)
jae    8053e75 <_IO_stdin_used+0x1c51>
jae    8053e72 <_IO_stdin_used+0x1c4e>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2200af(%ecx)
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     8053e90 <_IO_stdin_used+0x1c6c>
jb     8053e8e <_IO_stdin_used+0x1c6a>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8053eb4 <_IO_stdin_used+0x1c90>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    8053eaa <_IO_stdin_used+0x1c86>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %eax
in     (%dx),%al
add    $0x8,%al
cmp    %dh,%dl
add    $0x8,%al
push   $0x280804f2
icebp
add    $0x8,%al
push   $0x980804f1
icebp
add    $0x8,%al
(bad)
icebp
add    $0x8,%al
(bad)
icebp
add    $0x8,%al
(bad)
icebp
add    $0x8,%al
pusha
out    %eax,(%dx)
add    $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
fsubr  %st(7),%st
add    $0x8,%al
cmp    %ch,%bh
add    $0x8,%al
pop    %eax
out    %eax,(%dx)
add    $0x8,%al
push   %eax
out    %eax,(%dx)
add    $0x8,%al
dec    %eax
out    %eax,(%dx)
add    $0x8,%al
inc    %eax
out    %eax,(%dx)
add    $0x8,%al
adc    %ch,%bh
add    $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
pop    %eax
lock add $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
sub    $0xee890804,%esi
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
or     %dh,%al
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
dec    %eax
in     (%dx),%eax
add    $0x8,%al
pop    %eax
lock add $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
call   d44e8 <__ctype_toupper_loc@plt-0x7f74ae8>
in     (%dx),%eax
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
clc
in     (%dx),%eax
add    $0x8,%al
pusha
out    %al,(%dx)
add    $0x8,%al
mov    %ebp,%esi
add    $0x8,%al
pusha
out    %al,(%dx)
add    $0x8,%al
sub    $0xf4800804,%esi
add    $0x8,%al
xor    $0x4,%ah
or     %bl,(%eax)
hlt
add    $0x8,%al
xor    $0x4,%ah
or     %bl,(%eax)
hlt
add    $0x8,%al
xor    $0x4,%ah
or     %bl,(%eax)
hlt
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
sbb    %dh,%ah
add    $0x8,%al
xor    $0x4,%ah
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %ah,(%edi)
ds
add    $0x53e2f08,%eax
or     %dh,0xfb08053e
ss
add    $0x53e4208,%eax
or     %cl,0x3e(%edx)
add    $0x5360108,%eax
or     %dl,0x3e(%ecx)
add    $0x8,%eax
add    %ah,0x25282073
jae    8054194 <_IO_stdin_used+0x1f70>
and    %ah,0x25000a73
jae    8054193 <_IO_stdin_used+0x1f6f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     80541e7 <_IO_stdin_used+0x1fc3>
je     80541f4 <_IO_stdin_used+0x1fd0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     80541f7 <_IO_stdin_used+0x1fd3>
je     8054204 <_IO_stdin_used+0x1fe0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     805420e <_IO_stdin_used+0x1fea>
je     805421b <_IO_stdin_used+0x1ff7>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80541e0 <_IO_stdin_used+0x1fbc>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8054232 <_IO_stdin_used+0x200e>
jb     8054239 <_IO_stdin_used+0x2015>
and    %ah,0x75(%edx)
addr16 jae 80541eb <_IO_stdin_used+0x1fc7>
je     805423c <_IO_stdin_used+0x2018>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8054241 <_IO_stdin_used+0x201d>
and    %al,0x50(%edi)
dec    %esp
jbe    8054215 <_IO_stdin_used+0x1ff1>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8054264 <_IO_stdin_used+0x2040>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     805421a <_IO_stdin_used+0x1ff6>
insb   (%dx),%es:(%edi)
popa
je     8054263 <_IO_stdin_used+0x203f>
jb     8054220 <_IO_stdin_used+0x1ffc>
cmp    $0x68,%al
je     8054278 <_IO_stdin_used+0x2054>
jo     8054240 <_IO_stdin_used+0x201c>
das
das
outsb  %ds:(%si),(%dx)
jne    805423a <_IO_stdin_used+0x2016>
outsl  %ds:(%esi),(%dx)
jb     8054276 <_IO_stdin_used+0x2052>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8054288 <_IO_stdin_used+0x2064>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8054249 <_IO_stdin_used+0x2025>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     80542ad <_IO_stdin_used+0x2089>
popa
jb     805429e <_IO_stdin_used+0x207a>
cmp    (%eax),%ah
jns    80542ac <_IO_stdin_used+0x2088>
jne    805425f <_IO_stdin_used+0x203b>
popa
jb     80542a7 <_IO_stdin_used+0x2083>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     80542c7 <_IO_stdin_used+0x20a3>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     80542d1 <_IO_stdin_used+0x20ad>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     80542ee <_IO_stdin_used+0x20ca>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     80542ed <_IO_stdin_used+0x20c9>
outsb  %ds:(%esi),(%dx)
je     80542ab <_IO_stdin_used+0x2087>
jo     80542f2 <_IO_stdin_used+0x20ce>
jb     80542fc <_IO_stdin_used+0x20d8>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805430c <_IO_stdin_used+0x20e8>
je     8054319 <_IO_stdin_used+0x20f5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80542de <_IO_stdin_used+0x20ba>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805432c <_IO_stdin_used+0x2108>
je     8054339 <_IO_stdin_used+0x2115>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80542fe <_IO_stdin_used+0x20da>
and    %ah,0x250a2c73
jae    8054306 <_IO_stdin_used+0x20e2>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054350 <_IO_stdin_used+0x212c>
je     805435d <_IO_stdin_used+0x2139>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054322 <_IO_stdin_used+0x20fe>
and    %ah,0x250a2c73
jae    805432a <_IO_stdin_used+0x2106>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054378 <_IO_stdin_used+0x2154>
je     8054385 <_IO_stdin_used+0x2161>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805434a <_IO_stdin_used+0x2126>
and    %ah,0x250a2c73
jae    8054352 <_IO_stdin_used+0x212e>
and    %ah,0x25202c73
jae    805435a <_IO_stdin_used+0x2136>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80543a4 <_IO_stdin_used+0x2180>
je     80543b1 <_IO_stdin_used+0x218d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054376 <_IO_stdin_used+0x2152>
and    %ah,0x250a2c73
jae    805437e <_IO_stdin_used+0x215a>
and    %ah,0x25202c73
jae    8054386 <_IO_stdin_used+0x2162>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80543d4 <_IO_stdin_used+0x21b0>
je     80543e1 <_IO_stdin_used+0x21bd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80543a6 <_IO_stdin_used+0x2182>
and    %ah,0x250a2c73
jae    80543ae <_IO_stdin_used+0x218a>
and    %ah,0x25202c73
jae    80543b6 <_IO_stdin_used+0x2192>
and    %ah,0x250a2c73
jae    80543be <_IO_stdin_used+0x219a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054408 <_IO_stdin_used+0x21e4>
je     8054415 <_IO_stdin_used+0x21f1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80543da <_IO_stdin_used+0x21b6>
and    %ah,0x250a2c73
jae    80543e2 <_IO_stdin_used+0x21be>
and    %ah,0x25202c73
jae    80543ea <_IO_stdin_used+0x21c6>
and    %ah,0x250a2c73
jae    80543f2 <_IO_stdin_used+0x21ce>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
push   %eax
add    %eax,0x5015808
or     %bl,-0x1ff7faff(%eax)
add    %eax,0x5023808
or     %dl,-0x7f7fafe(%eax)
add    0x5037008,%al
or     %dl,(%eax)
add    %al,0x500a808
or     %al,0x6f(%ebx)
jo     805447d <_IO_stdin_used+0x2259>
jb     805446f <_IO_stdin_used+0x224b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8054491 <_IO_stdin_used+0x226d>
popa
jb     8054482 <_IO_stdin_used+0x225e>
and    %al,0x6f(%esi)
jne    8054490 <_IO_stdin_used+0x226c>
fs
popa
je     805448f <_IO_stdin_used+0x226b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80544ae <_IO_stdin_used+0x228a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     80544b9 <_IO_stdin_used+0x2295>
je     80544ba <_IO_stdin_used+0x2296>
je     80544b9 <_IO_stdin_used+0x2295>
insb   (%dx),%es:(%edi)
arpl   %ax,%cs:(%eax)
add    %al,(%eax)
xor    %ah,(%eax)
cmp    $0x3d,%al
and    %dh,0x74(%ebx)
jb     80544cd <_IO_stdin_used+0x22a9>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %ah,%gs:(%esi)
and    %dh,%es:0x74(%ebx)
jb     80544dc <_IO_stdin_used+0x22b8>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %bh,%gs:0x363320(,%edi,1)
add    %al,(%eax)
pop    %edx
adc    %al,0x50ad008
or     %dl,%al
or     0x50fb008,%al
or     %dl,%al
or     0x50f1008,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ebb08,%al
or     %dl,%al
or     0x50aeb08,%al
or     %dl,%al
or     0x50ad008,%al
or     %cl,(%ebx)
push   %cs
add    $0x50ad008,%eax
or     %dl,%al
or     0x50ad008,%al
or     %ah,0xd(%edi)
add    $0x50ad008,%eax
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50cb908,%al
or     %cl,(%ebx)
or     $0x5,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50be208,%al
or     %ah,-0x2ff7faf5(%edx)
or     0x50ad008,%al
or     %dl,%al
or     0x50f1008,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ebb08,%al
or     %dl,%al
or     0x50aeb08,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ad008,%al
or     %dl,%al
or     0x50ad008,%al
or     %ah,0xd(%edi)
add    $0x50ad008,%eax
or     %dl,%al
or     0x50bba08,%al
or     %bh,0x73(%eax)
je     80545c6 <_IO_stdin_used+0x23a2>
je     80545c5 <_IO_stdin_used+0x23a1>
jne    80545c5 <_IO_stdin_used+0x23a1>
popa
js     805455b <_IO_stdin_used+0x2337>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x72(%ecx)
addr16 jne 80545d5 <_IO_stdin_used+0x23b1>
outsb  %gs:(%esi),(%dx)
je     805458c <_IO_stdin_used+0x2368>
and    $0x6f662073,%eax
jb     8054593 <_IO_stdin_used+0x236f>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    80545ec <_IO_stdin_used+0x23c8>
jne    80545f2 <_IO_stdin_used+0x23ce>
and    %ah,0x72(%ecx)
addr16 jne 80545f2 <_IO_stdin_used+0x23ce>
outsb  %gs:(%esi),(%dx)
je     80545a9 <_IO_stdin_used+0x2385>
and    $0x6f662073,%eax
jb     80545b0 <_IO_stdin_used+0x238c>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     8054615 <_IO_stdin_used+0x23f1>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x732520
sub    $0x20,%al
and    $0x752f0073,%eax
jae    805462b <_IO_stdin_used+0x2407>
das
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
pop    %eax
add    (%eax),%eax
add    %ch,0x0(%edx)
add    %al,(%eax)
loopne 8054637 <_IO_stdin_used+0x2413>
(bad)
pushl  0x0(%ebx,%eax,1)
add    %dh,%al
dec    %esi
(bad)
incl   0x8(%eax)
add    %al,(%eax)
lock jae 80545fe <_IO_stdin_used+0x23da>
lcall  *0x3(%eax)
je     8054606 <_IO_stdin_used+0x23e2>
ljmp   *0x74100000(%ebx,%eax,1)
(bad)
inc    %eax
add    (%eax),%eax
add    %al,(%eax)
jp     8054616 <_IO_stdin_used+0x23f2>
jmp    *%eax
add    (%eax),%eax
add    %dh,0x7d(%eax)
(bad)
jmp    *(%esp,%eax,1)
add    %al,(%eax)
sarb   $0xff,-0x1(%ebp)
cmp    $0x4,%al
add    %al,(%eax)
mov    $0x7e,%al
(bad)
(bad)
jl     8054636 <_IO_stdin_used+0x2412>
add    %al,(%eax)
mov    0xd0ffff7f,%al
add    $0x0,%al
add    %ah,0x10ffff80(%eax)
add    $0x81a00000,%eax
(bad)
call   *0x5(%eax)
add    %al,(%eax)
loopne 80545d1 <_IO_stdin_used+0x23ad>
(bad)
(bad)
mov    $0x20000005,%esp
test   %bh,%bh
(bad)
fadds  0x85000000
(bad)
call   *(%esi,%eax,1)
add    %al,(%eax)
mov    $0x85,%al
(bad)
incl   0x0(%esi,%eax,1)
add    %dh,-0x7a(%eax)
(bad)
incl   -0x2ffffffa(%eax)
xchg   %bh,%bh
call   *%esp
push   %es
add    %al,(%eax)
lock xchg %bh,%bh
push   %eax
push   %es
add    %al,(%eax)
and    %cl,0x730ffff(%ebx)
add    %al,(%eax)
and    %cl,0x788ffff(%ebp)
add    %al,(%eax)
loopne 8054623 <_IO_stdin_used+0x23ff>
(bad)
inc    %eax
pop    %es
add    %al,(%eax)
loopne 805462c <_IO_stdin_used+0x2408>
(bad)
incl   (%eax)
or     %al,(%eax)
add    %ah,(%eax)
nop
(bad)
jmp    *0x8(%eax)
add    %al,(%eax)
mov    0xb8ffff90,%al
or     %al,(%eax)
add    %dh,-0x33000070(%eax)
or     %al,(%eax)
add    %al,%al
nop
(bad)
jmp    *%eax
or     %al,(%eax)
add    %dl,0xcffff91(%eax)
or     %eax,(%eax)
add    %dh,%al
xchg   %eax,%ecx
(bad)
ljmp   *(%ecx,%ecx,1)
add    %al,(%eax)
xor    %dl,0x950ffff(%edx)
add    %al,(%eax)
mov    0xa4ffff92,%al
or     %eax,(%eax)
add    %ah,%al
xchg   %eax,%edx
(bad)
inc    %esp
or     %eax,(%eax)
add    %dh,(%eax)
xchg   %eax,%ebx
(bad)
(bad)
call   a80546fe <opterr+0x9fffd49a>
mov    0xa2cffff,%eax
add    %al,(%eax)
jo     80546a1 <_IO_stdin_used+0x247d>
(bad)
pushl  0x0(%edx,%ecx,1)
add    %dh,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
lcall  *-0x1ffffff6(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
(bad)
fmuls  (%edx)
add    %al,(%eax)
adc    %ah,0xb04ffff(%ebp)
add    %al,(%eax)
add    %ah,0xb3cffff(%esi)
add    %al,(%eax)
xor    %dh,0xb80ffff(%eax)
add    %al,(%eax)
(bad)
mov    $0xff,%cl
inc    %eax
or     (%eax),%eax
add    %dl,(%eax)
mov    $0xff,%dl
push   %esp
or     (%eax),%eax
add    %dh,(%eax)
mov    $0xff,%dl
decl   (%eax)
or     $0x0,%al
add    %dl,-0x4e(%eax)
(bad)
lcall  *(%esp,%ecx,1)
add    %al,(%eax)
nop
mov    $0xff,%dl
incl   0xc(%eax)
add    %al,(%eax)
mov    $0xb2,%al
(bad)
call   *0x0(%esp,%ecx,1)
add    %dh,%al
mov    $0xff,%dl
(bad)
js     805476e <_IO_stdin_used+0x254a>
add    %al,(%eax)
push   %eax
mov    $0xff,%bl
ljmp   *-0x4bd00000(%esp,%ecx,1)
(bad)
(bad)
call   68054781 <opterr+0x5fffd51d>
mov    $0xff,%ah
incl   (%eax)
or     $0xb4f00000,%eax
(bad)
pushl  -0x4af00000(,%ecx,1)
(bad)
decl   0xd(%eax)
add    %al,(%eax)
xor    %dh,0xd5cffff(%ebp)
add    %al,(%eax)
push   %eax
mov    $0xff,%ch
pushl  0xd(%eax)
add    %al,(%eax)
jo     8054753 <_IO_stdin_used+0x252f>
(bad)
incl   -0x4a600000(%ebp,%ecx,1)
(bad)
jmp    *-0x4a300000(%ebp,%ecx,1)
(bad)
inc    %esp
or     $0xb6000000,%eax
(bad)
(bad)
fmull  0xb6300000
(bad)
push   %esp
or     $0xb6e00000,%eax
(bad)
lcall  *(%eax)
push   %cs
add    %al,(%eax)
adc    %dh,0xe30ffff(%edi)
add    %al,(%eax)
inc    %eax
mov    $0xff,%bh
decl   0xe(%eax)
add    %al,(%eax)
jo     8054795 <_IO_stdin_used+0x2571>
(bad)
jmp    *0xe(%eax)
add    %al,(%eax)
and    %bh,0xe84ffff(%eax)
add    %al,(%eax)
pusha
mov    $0xe9cffff,%eax
add    %al,(%eax)
mov    0xb4ffffb8,%al
push   %cs
add    %al,(%eax)
loopne 80547b6 <_IO_stdin_used+0x2592>
(bad)
dec    %esp
push   %cs
add    %al,(%eax)
add    %bh,0xee0ffff(%ecx)
add    %al,(%eax)
and    %bh,0xef4ffff(%ecx)
add    %al,(%eax)
inc    %eax
mov    $0xf08ffff,%ecx
add    %al,(%eax)
pusha
mov    $0xf1cffff,%ecx
add    %al,(%eax)
sarb   0xfb8ffff(%esi)
add    %al,(%eax)
and    %bh,0xfd0ffff(%edi)
add    %al,(%eax)
cmpb   $0x0,0xff4ffff(%edi)
add    %al,%al
mov    $0x100cffff,%edi
add    %al,(%eax)
jo     8054806 <_IO_stdin_used+0x25e2>
(bad)
pushl  (%eax)
adc    %al,(%eax)
add    %ah,0x54ffffc0(%eax)
adc    %al,(%eax)
add    %dl,%al
sar    $0xff,%bh
js     805486a <_IO_stdin_used+0x2646>
add    %al,(%eax)
loopne 805481e <_IO_stdin_used+0x25fa>
(bad)
decl   -0x3ed00000(%eax,%edx,1)
(bad)
(bad)
mov    $0x70000010,%esp
sar    $0xff,%edi
call   d8054885 <opterr+0xcfffd621>
sar    $0xff,%edi
sbb    %dl,(%ecx)
add    %al,(%eax)
and    %al,%dl
(bad)
(bad)
cmp    $0x11,%al
add    %al,(%eax)
push   %eax
ret    $0xffff
pop    %esp
adc    %eax,(%eax)
add    %al,0x78ffffc2(%eax)
adc    %eax,(%eax)
add    %dh,-0x6700003e(%eax)
adc    %eax,(%eax)
add    %ah,%al
ret    $0xffff
mov    $0x30000011,%eax
ret
(bad)
dec    %esp
adc    %eax,(%eax)
add    %dh,-0x35(%eax)
(bad)
jmp    *(%edx,%edx,1)
add    %al,(%eax)
adc    %cl,%ah
(bad)
ljmp   *0x0(%edx,%edx,1)
add    %dh,(%eax)
int    $0xff
pushl  -0x32700000(%edx,%edx,1)
(bad)
jmp    *%eax
adc    (%eax),%al
add    %ah,(%eax)
into
(bad)
(bad)
cmp    %dl,(%ebx)
add    %al,(%eax)
inc    %eax
into
(bad)
call   *0x13(%eax)
add    %al,(%eax)
inc    %eax
iret
(bad)
ljmp   *-0x1fffffed(%eax)
iret
(bad)
(bad)
fcoms  (%ebx)
add    %al,(%eax)
add    %dl,%cl
(bad)
ljmp   *(%esp,%edx,1)
add    %al,(%eax)
jo     80548c7 <_IO_stdin_used+0x26a3>
(bad)
ljmp   *0x0(%esp,%edx,1)
add    %al,%al
sar    %edi
ljmp   *-0x7fffffec(%eax)
aad    $0xff
(bad)
call   8054921 <_IO_stdin_used+0x26fd>
xlat   %ds:(%ebx)
(bad)
jmp    *(%eax)
adc    $0xd8d00000,%eax
(bad)
lcall  *0x15(%eax)
add    %al,(%eax)
add    %bl,%dl
(bad)
inc    %esp
adc    $0xdb600000,%eax
(bad)
pushl  (%eax)
push   %ss
add    %al,(%eax)
rcr    %bl
(bad)
ljmp   *0x0(%esi,%edx,1)
add    %ah,%al
(bad)
.byte 0xff
adcb   $0x0,(%esi)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8054953 <_IO_stdin_used+0x272f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
fs
inc    %esi
(bad)
call   *(%eax)
add    $0xe000000,%eax
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8054973 <_IO_stdin_used+0x274f>
js     8054971 <_IO_stdin_used+0x274d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x70(%eax)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %cl,-0x1(%eax,%esi,2)
decl   (%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
push   $0x48000000
jo     80549aa <_IO_stdin_used+0x2786>
(bad)
out    %eax,(%dx)
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
mov    %al,(%eax)
add    %al,(%eax)
sbb    %dh,-0x1(%esi)
pushl  0x3(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x6900e46
jns    80549ed <_IO_stdin_used+0x27c9>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
int3
add    %al,(%eax)
add    %al,-0x1(%ecx,%edi,2)
incl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %ebx
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ah,%ah
add    %al,(%eax)
add    %bh,-0x1(%ecx,%edi,2)
(bad)
out    %al,(%dx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x62,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %ah,(%ecx,%eax,1)
add    %al,(%eax)
sub    $0x7a,%al
(bad)
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7c600e45
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
js     8054ab7 <_IO_stdin_used+0x2893>
add    %al,(%eax)
enter  $0xff7a,$0xff
cmc
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x1900e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x88000001,%eax
jnp    8054afa <_IO_stdin_used+0x28d6>
incl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1800e45
push   %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
clc
add    %eax,(%eax)
add    %cl,0x7c(%eax)
(bad)
(bad)
cmp    %al,(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x63,0x2500e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%eax),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
add    %fs:(%eax),%al
add    %bl,(%esi,%edi,2)
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %cl,0x20(%esi,%ecx,1)
push   %esp
push   %cs
add    $0x4d,%al
push   %cs
and    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %al,0x40000002(%eax)
jle    8054bc2 <_IO_stdin_used+0x299e>
(bad)
flds   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
mov    $0xe4000002,%esp
jle    8054bfe <_IO_stdin_used+0x29da>
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x46,(%ebx)
push   %cs
mov    0xa820201,%al
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,%ah
add    (%eax),%al
add    %ah,-0x1(%edi,%edi,2)
(bad)
mov    $0x0,%esp
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffae,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x50,%al
add    %al,(%eax)
add    %ch,(%eax)
add    (%eax),%eax
add    %ch,%al
jg     8054c6a <_IO_stdin_used+0x2a46>
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7a300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %bh,0x0(%ebx,%eax,1)
add    %dh,%ah
jg     8054cbe <_IO_stdin_used+0x2a9a>
lcall  *0x0
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cwtl
add    (%eax),%eax
add    %bh,%al
jg     8054cda <_IO_stdin_used+0x2ab6>
jmp    *(%edi)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2,0x1b00e46
sti
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%edx
add    %bl,%al
add    (%eax),%eax
add    %ch,%al
cmp    $0xffffffff,%edi
testb  $0x0,(%ecx)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffaf,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
mov    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
xor    %al,(%eax,%eax,1)
add    %dl,-0x4a00007b(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ecx),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
push   $0x18000004
xchg   %bh,%bh
incl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff89,0x2200e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
test   $0x4,%al
add    %al,(%eax)
fadds  0x13cffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x20,0x3300e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
call   b0054e2d <opterr+0xa7ffdbc9>
inc    %esi
(bad)
incl   (%eax)
and    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x54,%eax
or     %al,0x87b80000
(bad)
(bad)
js     8054e4e <_IO_stdin_used+0x2c2a>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     8054e6f <_IO_stdin_used+0x2c4b>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x5(%eax)
add    %al,(%eax)
loopne 8054e29 <_IO_stdin_used+0x2c05>
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp,%eax,1)
add    %bl,%ah
xchg   %edi,%edi
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,-0x27fffffb(%eax)
xchg   %edi,%edi
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
mov    $0x5,%ah
add    %al,(%eax)
jl     8054e7e <_IO_stdin_used+0x2c5a>
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,%ah
add    $0x88bc0000,%eax
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %bh,%al
add    $0x88d80000,%eax
(bad)
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x68300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx),%esi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
dec    %esp
push   %es
add    %al,(%eax)
hlt
mov    %bh,%bh
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
jns    8054fad <_IO_stdin_used+0x2d89>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,0x0(%esi,%eax,1)
add    %dl,(%ecx,%ecx,4)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%eax),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x40000006(%eax)
mov    %edi,%edi
jmp    *0xe(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1e00e46
pushw  %es
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,%ah
push   %es
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xchg   %eax,%edi
(bad)
dec    %ebx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0xa(%ecx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%eax),%ebp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%esp
add    %al,(%eax)
add    %bl,(%edi,%eax,1)
add    %al,(%eax)
hlt
cwtl
(bad)
pushl  0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
push   $0xa
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
inc    %eax
pop    %es
add    %al,(%eax)
nop
cltd
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%edi)
add    %al,(%eax)
lcall  $0x0,$0x26ffff
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
lods   %ds:(%esi),%al
pop    %es
add    %al,(%eax)
add    $0x9a,%al
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%ah
pop    %es
add    %al,(%eax)
mov    $0x2fffff9a,%esp
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
sub    %cl,(%eax)
add    %al,(%eax)
test   $0xa4,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %ch,0x8(%eax)
add    %al,(%eax)
or     %ah,0x36ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x59ec0000(%eax,%ecx,1)
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x20000008(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%ah
or     %al,(%eax)
add    %ch,(%esi,%eiz,4)
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   50055231 <opterr+0x47ffdfcd>
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,%ah
or     %al,(%eax)
add    %dl,-0x1(%esi,%eiz,4)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
and    %cl,(%ecx)
add    %al,(%eax)
jo     8055208 <_IO_stdin_used+0x2fe4>
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
push   %esp
or     %eax,(%eax)
add    %bl,0xd4ffff(%esi,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %dl,0x40000009(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
test   $0x9,%al
add    %al,(%eax)
pop    %eax
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fmull  (%ecx)
add    %al,(%eax)
mov    $0xa7,%ah
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,%al
or     %eax,(%eax)
add    %al,%al
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%edx,%ecx,1)
add    %al,(%eax)
int3
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
or     (%eax),%al
add    %bl,%al
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sub    $0xa,%al
add    %al,(%eax)
in     $0xa7,%al
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %cl,0x0(%edx,%ecx,1)
add    %dh,%ah
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ch,0x0(%edx,%ecx,1)
add    %al,(%eax,%ebp,4)
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
test   %cl,(%edx)
add    %al,(%eax)
sbb    $0xa8,%al
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
pushf
or     (%eax),%al
add    %dh,(%eax,%ebp,4)
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
rorb   $0x0,(%edx)
add    %al,%al
test   $0xff,%al
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
fmuls  (%edx)
add    %al,(%eax)
fsubrs 0x23ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
lock or (%eax),%al
add    %dh,%al
test   $0xff,%al
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
or     %cl,(%ebx)
add    %al,(%eax)
or     %ch,0xa5ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    $0xb,%al
add    %al,(%eax)
xchg   %eax,%esp
test   $0x33ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %esp
or     (%eax),%eax
add    %bh,0x33ffff(%ecx,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pop    %esp
or     (%eax),%eax
add    %ah,%ah
test   $0x33ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
je     80554bd <_IO_stdin_used+0x3299>
add    %al,(%eax)
or     $0xaa,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x1800000b(%eax)
stos   %al,%es:(%edi)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x55dc0000(%ebx,%ecx,1)
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x3000000b(%eax)
stos   %al,%es:(%edi)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x3c000000(%eax)
or     (%eax),%eax
add    %bh,(%edx,%ebp,4)
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pusha
or     $0x0,%al
add    %dl,(%eax)
scas   %es:(%edi),%eax
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %bh,0xc(%eax)
add    %al,(%eax)
dec    %eax
scas   %es:(%edi),%eax
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
pushf
or     $0x0,%al
add    %al,0x33ffff(%edi,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    $0xc,%ah
add    %al,(%eax)
lods   %ds:(%esi),%al
scas   %es:(%edi),%eax
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
fmuls  (%eax,%eax,1)
add    %bh,(%eax)
mov    $0xff,%al
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
cld
or     $0x0,%al
add    %al,-0x1(%eax,%esi,4)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
and    %cl,0xb0500000
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
xor    $0xd,%al
add    %al,(%eax)
dec    %esp
mov    $0xff,%al
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
fs
or     $0xb06c0000,%eax
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
nop
or     $0xb0800000,%eax
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
rorb   $0xff,0xb0b00000
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
in     $0xd,%al
add    %al,(%eax)
fdivl  0x29ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,(%esi,%ecx,1)
add    %al,(%eax)
in     (%dx),%al
mov    $0xff,%al
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
and    %cl,(%esi)
add    %al,(%eax)
add    %dh,0x29ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %al,0xe(%eax)
add    %al,(%eax)
adc    %dh,0x24ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %ah,0xe(%eax)
add    %al,(%eax)
and    %dh,0x46ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0x0(%eax,%eax,1)
add    %dh,0x0(%esi,%ecx,1)
add    %bl,-0x1(%ecx,%esi,4)
pushl  (%ebx)
or     %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
push   $0x41140e0a
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %cl,%ah
push   %cs
add    %al,(%eax)
inc    %esp
mov    $0x97ffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,(%edi,%ecx,1)
add    %al,(%eax)
pushf
mov    $0x11fffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %bl,0x0(%edi,%ecx,1)
add    %dh,-0x1(%edx,%edi,4)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %cl,-0x57fffff1(%eax)
mov    $0x8cffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
loopne 805592d <_IO_stdin_used+0x3709>
add    %al,(%eax)
loopne 80558dc <_IO_stdin_used+0x36b8>
(bad)
call   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %cl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %bh,%al
sldt   (%eax)
call   fc0558f7 <opterr+0xf3ffe693>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
push   %eax
adc    %al,(%eax)
add    %dl,-0x5f000045(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     80559b3 <_IO_stdin_used+0x378f>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %al,0x10(%eax)
mov    $0x11effff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
aam    $0x10
add    %al,(%eax)
int3
mov    $0x66ffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%edx,1)
add    %al,(%eax)
cld
mov    $0x4dffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
push   %eax
adc    %eax,(%eax)
add    %dl,(%eax)
mov    $0x3b9ffff,%ebp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
nop
adc    %eax,(%eax)
add    %dl,0x72ffffc0(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%esi)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x11,$0x0
fadd   %st(1),%st
(bad)
inc    %edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%esi)
add    0x41100e0a(%ebp),%al
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
jo     8055b05 <_IO_stdin_used+0x38e1>
(bad)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
adc    (%eax),%al
add    %dh,(%esp,%eax,8)
(bad)
call   *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     8055bd3 <_IO_stdin_used+0x39af>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8055c0a <_IO_stdin_used+0x39e6>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bl,%al
adc    (%eax),%al
add    %ch,(%eax)
(bad)
popa
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,(%ebx,%edx,1)
add    %al,(%eax)
pop    %esp
(bad)
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sub    %dl,(%ebx)
add    %al,(%eax)
pop    %eax
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0xa0
.byte 0xb9
add    $0x8,%al
.byte 0x80
.byte 0xb9
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
cwtl
popl   (%eax,%ecx,1)
or     $0xfc000000,%eax
and    %eax,0x1908
add    %cl,(%eax)
outsl  %ds:(%esi),(%dx)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x6f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
xchg   %eax,%esp
xchg   %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %dh,%ah
addl   $0xa,(%eax,%ecx,1)
testl  $0xb0000,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
jo     8056f88 <_IO_stdin_used+0x4d64>
or     %al,(%edx)
add    %al,(%eax)
add    %al,0x14000002(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%edi)
add    %al,(%eax)
add    %bl,(%eax)
lea    (%eax,%ecx,1),%eax
adc    %eax,(%eax)
add    %al,(%eax)
loopne 8056f2e <_IO_stdin_used+0x4d0a>
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x40(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x74(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x6f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,%dh
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8056fc6 <_IO_stdin_used+0x4da2>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8057007 <_IO_stdin_used+0x4de3>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8057048 <_IO_stdin_used+0x4e24>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    8057089 <_IO_stdin_used+0x4e65>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    80570ca <_IO_stdin_used+0x4ea6>
add    $0x8,%al
xchg   %dl,0x4949608(%esp,%eax,1)
or     %ah,-0x49f7fb6c(%esi)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
incl   (%ecx)
and    %cl,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
clc
cmp    $0x5,%al
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %dl,%ah
jno    80571d8 <_IO_stdin_used+0x4fb4>
or     %al,(%eax)
add    %eax,(%eax)
add    %al,%al
ja     80571e0 <_IO_stdin_used+0x4fbc>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x5,%al
.byte 0x8
add    %al,(%eax)
add    %al,(%eax)
fs add %al,%fs:(%eax)
sub    (%ebx),%ebp
test   $0x8,%al
