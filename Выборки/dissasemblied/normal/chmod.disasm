das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bh,(%edi)
popl   0x52307d6f(%ebp)
les    -0x75060a6d(%ebp,%edi,1),%edx
sbb    $0xaab9e550,%eax
.byte 0x72
add    (%eax),%eax
add    %al,(%eax)
inc    %ebx
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,-0x4dffbbe0(%edx)
and    %ecx,0x22804048(%esi,%edx,4)
and    %cl,(%eax)
add    %al,(%ebx,%eax,2)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
dec    %edi
add    %al,(%eax)
add    %bl,%ah
dec    %ebx
popa
(bad)
sub    %bl,0x390c1c8c
mov    -0xd8ffa05(%edx),%dl
mov    $0x389e7650,%esp
repnz mov (%esi,%eax,4),%ebx
lock xchg %eax,%esi
jl     80481c3 <strcmp@plt-0xc8d>
sub    $0x63,%al
jb     804823b <strcmp@plt-0xc15>
ret
mov    %dl,-0x3f1cb454(%edx)
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %ah,%al
notl   (%edx)
cmpsb  %es:(%edi),%ds:(%esi)
inc    %ebp
loop   80481c4 <strcmp@plt-0xc8c>
.byte 0xa2
notl   (%edx)
mov    $0x2,%cl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jbe    8048287 <strcmp@plt-0xbc9>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fwait
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,%fs:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pushf
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cli
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx,%eax,1)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    $0x0,%ah
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %es
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ds
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %gs:(%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
(bad)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bl
add    %eax,(%eax)
add    %ah,-0x11(%eax)
add    $0x8,%al
xor    $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
or     $0x15d00,%eax
add    %ah,%al
push   %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x1(%ebp)
add    %al,(%eax)
push   %eax
out    %eax,$0x4
or     %al,0x12000008
add    %cl,0x29b00
add    %ah,0x510804ef(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x2e400
add    %al,0x4080551(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %al,0x84000002
push   %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,%bh
add    (%eax),%al
add    %dh,0x8048e(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bh
add    (%eax),%al
add    %ah,0x4080551(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,0x2(%ebp)
add    %al,(%eax)
inc    %eax
loop   80486cf <strcmp@plt-0x781>
or     %bh,0x3(%ebx)
add    %al,(%eax)
adc    (%eax),%al
or     $0xb00,%eax
add    %ah,%ah
or     $0x5,%al
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
(bad)
mov    $0xa0000000,%ecx
push   %ecx
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %al,0x2(%eax)
add    %al,(%eax)
adcb   $0x8,0x5(%ecx)
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edi
add    %al,(%eax)
add    %al,%al
push   %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,%dh
add    %al,(%eax)
add    %al,%al
in     $0x4,%eax
or     %al,0x12000001(%esi)
add    %cl,0x1f300
add    %ah,%ah
push   %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    80487ab <strcmp@plt-0x6a5>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80487b9 <strcmp@plt-0x697>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    80487c6 <strcmp@plt-0x68a>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     80487d2 <strcmp@plt-0x67e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     80487d9 <strcmp@plt-0x677>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     80487eb <strcmp@plt-0x665>
outsl  %ds:(%esi),(%dx)
ja     80487dd <strcmp@plt-0x673>
add    %dh,0x74(%ebx)
jb     80487ed <strcmp@plt-0x663>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80487f0 <strcmp@plt-0x660>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048800 <strcmp@plt-0x650>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     804880c <strcmp@plt-0x644>
gs
js     804880f <strcmp@plt-0x641>
add    %bl,0x5f(%edi)
data16
js     8048814 <strcmp@plt-0x63c>
je     8048804 <strcmp@plt-0x64c>
je     8048806 <strcmp@plt-0x64a>
je     80487dd <strcmp@plt-0x673>
xor    $0x0,%al
arpl   %bp,0x73(%edi,%ebp,2)
gs imul $0x64686366,%fs:%gs:0x0(%edx),%esi
64
imul   $0x6f727265,0x0(%edx),%esi
jb     80487bf <strcmp@plt-0x691>
pop    %edi
pop    %edi
jae    8048837 <strcmp@plt-0x619>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     80487e7 <strcmp@plt-0x669>
pop    %edi
gs
js     8048854 <strcmp@plt-0x5fc>
je     80487ed <strcmp@plt-0x663>
jo     8048861 <strcmp@plt-0x5ef>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048854 <strcmp@plt-0x5fc>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    804887d <strcmp@plt-0x5d3>
gs
jb     8048881 <strcmp@plt-0x5cf>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     804887f <strcmp@plt-0x5d1>
pop    %edi
addr16
gs
je     804887e <strcmp@plt-0x5d2>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048897 <strcmp@plt-0x5b9>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     804882a <strcmp@plt-0x626>
data16
je     80488a0 <strcmp@plt-0x5b0>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %ah,%gs:0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    80488b1 <strcmp@plt-0x59f>
jb     80488ab <strcmp@plt-0x5a5>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     80488ab <strcmp@plt-0x5a5>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    80488b3 <strcmp@plt-0x59d>
je     8048850 <strcmp@plt-0x600>
pop    %edi
pop    %edi
gs
jb     80488c7 <strcmp@plt-0x589>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x63(%esi)
push   $0x61646f6d
je     8048878 <strcmp@plt-0x5d8>
pop    %edi
pop    %edi
data16
js     80488f0 <strcmp@plt-0x560>
je     80488e0 <strcmp@plt-0x570>
je     80488b7 <strcmp@plt-0x599>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     80488fa <strcmp@plt-0x556>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80488f8 <strcmp@plt-0x558>
outsl  %ds:(%esi),(%dx)
jne    804890b <strcmp@plt-0x545>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ah,0x74(%esi)
jae    8048904 <strcmp@plt-0x54c>
jb     804890c <strcmp@plt-0x544>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804891c <strcmp@plt-0x534>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jne    804892e <strcmp@plt-0x522>
popa
jae    804892f <strcmp@plt-0x521>
add    %ah,0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     804892f <strcmp@plt-0x521>
outsb  %ds:(%esi),(%dx)
imul   $0x6973626d,%fs:0x0(%edx),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x73786c5f,0x5f(%eax,%eax,1),%esi
je     804893f <strcmp@plt-0x511>
je     8048916 <strcmp@plt-0x53a>
xor    $0x0,%al
data16
jae    8048959 <strcmp@plt-0x4f7>
popa
je     804894e <strcmp@plt-0x502>
jae    8048920 <strcmp@plt-0x530>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    8048956 <strcmp@plt-0x4fa>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80488f4 <strcmp@plt-0x55c>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     8048977 <strcmp@plt-0x4d9>
je     8048967 <strcmp@plt-0x4e9>
je     804893e <strcmp@plt-0x512>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048981 <strcmp@plt-0x4cf>
outsb  %ds:(%esi),(%dx)
jbe    804891f <strcmp@plt-0x531>
data16
je     8048995 <strcmp@plt-0x4bb>
pop    %edi
jae    804898a <strcmp@plt-0x4c6>
je     8048927 <strcmp@plt-0x529>
outsl  %ds:(%esi),(%dx)
jo     804899e <strcmp@plt-0x4b2>
popa
jb     8048994 <strcmp@plt-0x4bc>
add    %bl,0x5f(%edi)
data16
jb     8048998 <strcmp@plt-0x4b8>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     80489b1 <strcmp@plt-0x49f>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     80489ba <strcmp@plt-0x496>
jo     80489c1 <strcmp@plt-0x48f>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     80489c7 <strcmp@plt-0x489>
je     80489c5 <strcmp@plt-0x48b>
add    %bl,0x5f(%edi)
data16
jo     80489cb <strcmp@plt-0x485>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 80489db <strcmp@plt-0x475>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048a00 <strcmp@plt-0x450>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80489fc <strcmp@plt-0x454>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x73710034,%fs:0x36(%edx),%esi
73
outsl  %ds:(%esi),(%dx)
jb     8048a1c <strcmp@plt-0x434>
add    %ah,0x74(%esi)
jae    8048a0c <strcmp@plt-0x444>
outsl  %ds:(%esi),(%dx)
jo     8048a15 <strcmp@plt-0x43b>
outsb  %ds:(%esi),(%dx)
add    %ah,0x63(%esi)
outsb  %ds:(%esi),(%dx)
je     8048a23 <strcmp@plt-0x42d>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048a24 <strcmp@plt-0x42c>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048a2b <strcmp@plt-0x425>
js     8048a3c <strcmp@plt-0x414>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x5f737466,0x0(%esi),%ebp
arpl   %bp,0x69(%eax)
insb   (%dx),%es:(%edi)
fs
jb     8048a3f <strcmp@plt-0x411>
outsb  %ds:(%esi),(%dx)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
popa
je     8048a19 <strcmp@plt-0x437>
xor    $0x0,%al
jae    8048a5b <strcmp@plt-0x3f5>
jb     8048a4c <strcmp@plt-0x404>
insl   (%dx),%es:(%edi)
jo     80489ec <strcmp@plt-0x464>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048a6c <strcmp@plt-0x3e4>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %ah,%fs:0x70(%esi)
jne    8048a7c <strcmp@plt-0x3d4>
jae    8048a69 <strcmp@plt-0x3e7>
jne    8048a7a <strcmp@plt-0x3d6>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048a8e <strcmp@plt-0x3c2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048a99 <strcmp@plt-0x3b7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048a9d <strcmp@plt-0x3b3>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048aa1 <strcmp@plt-0x3af>
js     8048aa7 <strcmp@plt-0x3a9>
je     8048a40 <strcmp@plt-0x410>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048abd <strcmp@plt-0x393>
popa
jb     8048ac0 <strcmp@plt-0x390>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000200,%eax
add    %al,0x6000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000000
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
pop    %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%eax
add    $0x7000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x5000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
sbb    (%ebx),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     8048b7b <strcmp@plt-0x2d5>
imul   $0x70000,(%ecx),%ecx
and    $0x10000003,%eax
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x60000,(%ecx),%ecx
xor    %eax,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x50000,%eax
cmp    $0x10000003,%eax
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x347,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
push   %ecx
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
pop    %ebx
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
dec    %edi
add    $0x1d0608,%eax
add    %al,0x5080551(%eax)
inc    %edi
add    %al,(%eax)
test   %dl,0x5(%ecx)
or     %al,0xa0000048
push   %ecx
add    $0x4a0508,%eax
add    %al,%al
push   %ecx
add    $0x4f0508,%eax
add    %ah,%al
push   %ecx
add    $0x440508,%eax
add    %ah,%ah
push   %ecx
add    $0x510508,%eax
or     $0x50,%al
add    $0x10708,%eax
add    %dl,(%eax)
push   %eax
add    $0x20708,%eax
add    %dl,(%eax,%edx,2)
add    $0x30708,%eax
add    %bl,(%eax)
push   %eax
add    $0x40708,%eax
add    %bl,(%eax,%edx,2)
add    $0x50708,%eax
add    %ah,(%eax)
push   %eax
add    $0x60708,%eax
add    %ah,(%eax,%edx,2)
add    $0x490708,%eax
add    %ch,(%eax)
push   %eax
add    $0x70708,%eax
add    %ch,(%eax,%edx,2)
add    $0x80708,%eax
add    %dh,(%eax)
push   %eax
add    $0x90708,%eax
add    %dh,(%eax,%edx,2)
add    $0xa0708,%eax
add    %bh,(%eax)
push   %eax
add    $0xb0708,%eax
add    %bh,(%eax,%edx,2)
add    $0xc0708,%eax
add    %al,0x50(%eax)
add    $0xd0708,%eax
add    %al,0x5(%eax,%edx,2)
or     %al,(%edi)
push   %cs
add    %al,(%eax)
dec    %eax
push   %eax
add    $0xf0708,%eax
add    %cl,0x5(%eax,%edx,2)
or     %al,(%edi)
adc    %al,(%eax)
add    %dl,0x50(%eax)
add    $0x110708,%eax
add    %dl,0x5(%eax,%edx,2)
or     %al,(%edi)
adc    (%eax),%al
add    %bl,0x50(%eax)
add    $0x130708,%eax
add    %bl,0x5(%eax,%edx,2)
or     %al,(%edi)
adc    $0x0,%al
add    %ah,0x50(%eax)
add    $0x150708,%eax
add    %ah,0x5(%eax,%edx,2)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
push   $0x7080550
pop    %ss
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %eax
add    $0x180708,%eax
add    %dh,0x50(%eax)
add    $0x190708,%eax
add    %dh,0x5(%eax,%edx,2)
or     %al,(%edi)
sbb    (%eax),%al
add    %bh,0x50(%eax)
add    $0x1b0708,%eax
add    %bh,0x5(%eax,%edx,2)
or     %al,(%edi)
sbb    $0x0,%al
add    %al,0x7080550(%eax)
sbb    $0x50840000,%eax
add    $0x1e0708,%eax
add    %cl,0x7080550(%eax)
pop    %ds
add    %al,(%eax)
mov    %ss,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %dl,0x7080550(%eax)
and    %eax,(%eax)
add    %dl,0x22070805(%eax,%edx,2)
add    %al,(%eax)
cwtl
push   %eax
add    $0x230708,%eax
add    %bl,0x24070805(%eax,%edx,2)
add    %al,(%eax)
mov    0x7080550,%al
and    $0x50a40000,%eax
add    $0x260708,%eax
add    %ch,0x7080550(%eax)
daa
add    %al,(%eax)
lods   %ds:(%esi),%al
push   %eax
add    $0x280708,%eax
add    %dh,0x7080550(%eax)
sub    %eax,(%eax)
add    %dh,0x2a070805(%eax,%edx,2)
add    %al,(%eax)
mov    $0x7080550,%eax
sub    (%eax),%eax
add    %bh,0x2c070805(%eax,%edx,2)
add    %al,(%eax)
rclb   $0x8,0x5(%eax)
pop    %es
sub    $0x50c40000,%eax
add    $0x2e0708,%eax
add    %cl,%al
push   %eax
add    $0x2f0708,%eax
add    %cl,%ah
push   %eax
add    $0x300708,%eax
add    %dl,%al
push   %eax
add    $0x310708,%eax
add    %dl,%ah
push   %eax
add    $0x320708,%eax
add    %bl,%al
push   %eax
add    $0x330708,%eax
add    %bl,%ah
push   %eax
add    $0x340708,%eax
add    %ah,%al
push   %eax
add    $0x350708,%eax
add    %ah,%ah
push   %eax
add    $0x360708,%eax
add    %ch,%al
push   %eax
add    $0x370708,%eax
add    %ch,%ah
push   %eax
add    $0x380708,%eax
add    %dh,%al
push   %eax
add    $0x390708,%eax
add    %dh,%ah
push   %eax
add    $0x3a0708,%eax
add    %bh,%al
push   %eax
add    $0x3b0708,%eax
add    %bh,%ah
push   %eax
add    $0x3c0708,%eax
add    %al,(%eax)
push   %ecx
add    $0x3d0708,%eax
add    %al,(%ecx,%edx,2)
add    $0x3e0708,%eax
add    %cl,(%eax)
push   %ecx
add    $0x3f0708,%eax
add    %cl,(%ecx,%edx,2)
add    $0x400708,%eax
add    %dl,(%eax)
push   %ecx
add    $0x410708,%eax
add    %dl,(%ecx,%edx,2)
add    $0x420708,%eax
push   %ebx
sub    $0x8,%esp
call   804a190 <calloc@plt+0xf20>
add    $0xc1e7,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048e2e <strcmp@plt-0x22>
call   8049020 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8055004
jmp    *0x8055008
add    %al,(%eax)
jmp    *0x805500c
push   $0x0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055010
push   $0x8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055014
push   $0x10
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055018
push   $0x18
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805501c
push   $0x20
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055020
push   $0x28
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055024
push   $0x30
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055028
push   $0x38
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805502c
push   $0x40
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055030
push   $0x48
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055034
push   $0x50
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055038
push   $0x58
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805503c
push   $0x60
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055040
push   $0x68
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055044
push   $0x70
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055048
push   $0x78
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805504c
push   $0x80
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055050
push   $0x88
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055054
push   $0x90
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055058
push   $0x98
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805505c
push   $0xa0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055060
push   $0xa8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055064
push   $0xb0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055068
push   $0xb8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805506c
push   $0xc0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055070
push   $0xc8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055074
push   $0xd0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055078
push   $0xd8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805507c
push   $0xe0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055080
push   $0xe8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055084
push   $0xf0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055088
push   $0xf8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805508c
push   $0x100
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055090
push   $0x108
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055094
push   $0x110
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055098
push   $0x118
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805509c
push   $0x120
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550a0
push   $0x128
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550a4
push   $0x130
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550a8
push   $0x138
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550ac
push   $0x140
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550b0
push   $0x148
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550b4
push   $0x150
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550b8
push   $0x158
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550bc
push   $0x160
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550c0
push   $0x168
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550c4
push   $0x170
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550c8
push   $0x178
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550cc
push   $0x180
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550d0
push   $0x188
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550d4
push   $0x190
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550d8
push   $0x198
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550dc
push   $0x1a0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550e0
push   $0x1a8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550e4
push   $0x1b0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550e8
push   $0x1b8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550ec
push   $0x1c0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550f0
push   $0x1c8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550f4
push   $0x1d0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550f8
push   $0x1d8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x80550fc
push   $0x1e0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055100
push   $0x1e8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055104
push   $0x1f0
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055108
push   $0x1f8
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x805510c
push   $0x200
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055110
push   $0x208
jmp    8048e40 <strcmp@plt-0x10>
jmp    *0x8055114
push   $0x210
jmp    8048e40 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xc0,%esp
mov    0xc(%ebp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0xbc(%esp)
xor    %eax,%eax
mov    0x8(%ebp),%esi
movl   $0x0,0x40(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804ae50 <calloc@plt+0x1be0>
movl   $0x8051b9d,0x4(%esp)
movl   $0x6,(%esp)
call   8049150 <setlocale@plt>
movl   $0x80514d7,0x4(%esp)
movl   $0x80514c9,(%esp)
call   80491d0 <bindtextdomain@plt>
movl   $0x80514c9,(%esp)
call   8048f30 <textdomain@plt>
movl   $0x804a5f0,(%esp)
call   8050c90 <fts_children+0x1cf0>
movb   $0x0,0x8055200
movb   $0x0,0x8055201
movb   $0x0,0x8055202
movl   $0x0,0x30(%esp)
movb   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x10(%esp)
movl   $0x8051660,0xc(%esp)
movl   $0x8051180,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   8049060 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     80495ab <calloc@plt+0x33b>
cmp    $0x63,%eax
je     80494d6 <calloc@plt+0x266>
xchg   %ax,%ax
jle    80493a8 <calloc@plt+0x138>
cmp    $0x76,%eax
je     80494e5 <calloc@plt+0x275>
nop
lea    0x0(%esi,%eiz,1),%esi
jle    8049447 <calloc@plt+0x1d7>
cmp    $0x80,%eax
je     8049570 <calloc@plt+0x300>
jle    804961b <calloc@plt+0x3ab>
cmp    $0x81,%eax
je     8049428 <calloc@plt+0x1b8>
cmp    $0x82,%eax
jne    80494ca <calloc@plt+0x25a>
mov    0x80551e4,%eax
mov    %eax,0x30(%esp)
jmp    8049328 <calloc@plt+0xb8>
cmp    $0x37,%eax
jg     8049432 <calloc@plt+0x1c2>
cmp    $0x30,%eax
jge    8049504 <calloc@plt+0x294>
cmp    $0xffffff7e,%eax
je     804941c <calloc@plt+0x1ac>
jg     80495fa <calloc@plt+0x38a>
cmp    $0xffffff7d,%eax
jne    80494ca <calloc@plt+0x25a>
mov    0x805512c,%eax
movl   $0x0,0x18(%esp)
movl   $0x80514e9,0x14(%esp)
movl   $0x80514f6,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x80551e0,%eax
movl   $0x80514c5,0x8(%esp)
movl   $0x8051506,0x4(%esp)
mov    %eax,(%esp)
call   804ca00 <calloc@plt+0x3790>
movl   $0x0,(%esp)
call   8049030 <exit@plt>
movl   $0x0,(%esp)
call   804a260 <calloc@plt+0xff0>
movb   $0x1,0x38(%esp)
jmp    8049328 <calloc@plt+0xb8>
cmp    $0x52,%eax
jne    80494f4 <calloc@plt+0x284>
movb   $0x1,0x8055202
jmp    8049328 <calloc@plt+0xb8>
cmp    $0x6f,%eax
je     8049504 <calloc@plt+0x294>
jg     804963b <calloc@plt+0x3cb>
cmp    $0x66,%eax
jne    804962b <calloc@plt+0x3bb>
movb   $0x1,0x8055201
jmp    8049328 <calloc@plt+0xb8>
cmpl   $0x0,0x34(%esp)
je     8049653 <calloc@plt+0x3e3>
mov    0x34(%esp),%edx
cmp    %edx,-0x4(%ebx,%eax,4)
jne    8049653 <calloc@plt+0x3e3>
mov    -0x4(%ebx,%esi,4),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x805151c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f10 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
movl   $0x1,(%esp)
call   804a260 <calloc@plt+0xff0>
movl   $0x1,0x8055128
00
jmp    8049328 <calloc@plt+0xb8>
movl   $0x0,0x8055128
00
jmp    8049328 <calloc@plt+0xb8>
jle    804960b <calloc@plt+0x39b>
cmp    $0x58,%eax
je     8049504 <calloc@plt+0x294>
cmp    $0x61,%eax
jne    80494ca <calloc@plt+0x25a>
mov    0x80551c0,%eax
or     $0xffffffff,%ecx
xor    %edx,%edx
mov    -0x4(%ebx,%eax,4),%edi
xor    %eax,%eax
mov    %edi,0x28(%esp)
repnz scas %es:(%edi),%al
mov    0x3c(%esp),%eax
not    %ecx
sub    $0x1,%ecx
test   %eax,%eax
setne  %dl
add    %eax,%edx
lea    (%ecx,%edx,1),%eax
cmp    0x40(%esp),%eax
mov    %eax,0x2c(%esp)
jae    804957a <calloc@plt+0x30a>
mov    0x34(%esp),%eax
add    $0x1,%ecx
mov    0x3c(%esp),%edi
add    %eax,%edx
movb   $0x2c,(%eax,%edi,1)
mov    0x28(%esp),%eax
mov    %ecx,0x8(%esp)
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   8048ec0 <memcpy@plt>
mov    0x2c(%esp),%eax
movb   $0x1,0x8055200
mov    %eax,0x3c(%esp)
jmp    8049328 <calloc@plt+0xb8>
movb   $0x0,0x38(%esp)
jmp    8049328 <calloc@plt+0xb8>
add    $0x1,%eax
mov    %eax,0x40(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %edx,0x20(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,(%esp)
call   804cc50 <calloc@plt+0x39e0>
mov    0x20(%esp),%edx
mov    0x24(%esp),%ecx
mov    %eax,0x34(%esp)
jmp    8049537 <calloc@plt+0x2c7>
cmpl   $0x0,0x30(%esp)
je     8049ac4 <calloc@plt+0x854>
cmpl   $0x0,0x34(%esp)
je     804964b <calloc@plt+0x3db>
movl   $0x5,0x8(%esp)
movl   $0x80511c4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
jmp    80494ca <calloc@plt+0x25a>
sub    $0x2b,%eax
cmp    $0x1,%eax
ja     80494ca <calloc@plt+0x25a>
jmp    8049504 <calloc@plt+0x294>
cmp    $0x3d,%eax
xchg   %ax,%ax
jne    80494ca <calloc@plt+0x25a>
jmp    8049504 <calloc@plt+0x294>
cmp    $0x78,%eax
xchg   %ax,%ax
jg     80494ca <calloc@plt+0x25a>
jmp    8049504 <calloc@plt+0x294>
cmp    $0x67,%eax
xchg   %ax,%ax
jne    80494ca <calloc@plt+0x25a>
jmp    8049504 <calloc@plt+0x294>
cmp    $0x72,%eax
xchg   %ax,%ax
jl     80494ca <calloc@plt+0x25a>
jmp    8049504 <calloc@plt+0x294>
cmp    0x80551c0,%esi
jg     8049668 <calloc@plt+0x3f8>
movl   $0x5,0x8(%esp)
movl   $0x805150c,0x4(%esp)
jmp    80495d1 <calloc@plt+0x361>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ac80 <calloc@plt+0x1a10>
test   %eax,%eax
mov    %eax,0x8055208
je     804a0b6 <calloc@plt+0xe46>
cmpb   $0x0,0x8055202
je     8049695 <calloc@plt+0x425>
cmpb   $0x0,0x38(%esp)
jne    8049f64 <calloc@plt+0xcf4>
movl   $0x0,0x80551fc
00
mov    0x80551c0,%eax
movl   $0x0,0x8(%esp)
movl   $0x411,0x4(%esp)
lea    (%ebx,%eax,4),%eax
mov    %eax,(%esp)
call   804cdb0 <calloc@plt+0x3b40>
movb   $0x1,0x30(%esp)
mov    %eax,%edi
mov    %edi,(%esp)
call   804e750 <fts_read>
test   %eax,%eax
mov    %eax,%ebx
je     8049cd3 <calloc@plt+0xa63>
mov    0x1c(%eax),%eax
mov    0x18(%ebx),%esi
mov    %eax,0x3c(%esp)
movzwl 0x3c(%ebx),%eax
sub    $0x2,%eax
cmp    $0xb,%ax
ja     8049850 <calloc@plt+0x5e0>
movzwl %ax,%eax
jmp    *0x8051620(,%eax,4)
mov    $0x1,%esi
mov    %esi,%eax
and    %al,0x30(%esp)
jmp    80496c6 <calloc@plt+0x456>
cmpb   $0x0,0x8055201
je     8049eb4 <calloc@plt+0xc44>
movl   $0x0,0x38(%esp)
xor    %esi,%esi
movl   $0x0,0x34(%esp)
cmpl   $0x2,0x8055128
je     8049816 <calloc@plt+0x5a6>
cmpl   $0x0,0x8055128
jne    8049816 <calloc@plt+0x5a6>
mov    %esi,%eax
test   %al,%al
jne    8049a7a <calloc@plt+0x80a>
lea    0xa4(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
lea    0xb0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
movb   $0x0,0xae(%esp)
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
movl   $0x5,0x8(%esp)
movl   $0x80513ec,0x4(%esp)
movl   $0x0,(%esp)
movb   $0x0,0xba(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,%edx
mov    0x3c(%esp),%eax
mov    %edx,0x2c(%esp)
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
lea    0xa5(%esp),%ecx
mov    0x2c(%esp),%edx
mov    %ecx,0x18(%esp)
mov    0x38(%esp),%ecx
movl   $0x1,(%esp)
mov    %edx,0x4(%esp)
and    $0xfff,%ecx
mov    %ecx,0x14(%esp)
lea    0xb1(%esp),%ecx
mov    %ecx,0x10(%esp)
mov    0x34(%esp),%ecx
mov    %eax,0x8(%esp)
and    $0xfff,%ecx
mov    %ecx,0xc(%esp)
call   8049120 <__printf_chk@plt>
mov    %esi,%eax
test   %al,%al
je     8049816 <calloc@plt+0x5a6>
cmpb   $0x0,0x8055200
jne    8049b15 <calloc@plt+0x8a5>
cmpb   $0x0,0x8055202
jne    8049702 <calloc@plt+0x492>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804ef60 <fts_set>
jmp    8049702 <calloc@plt+0x492>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804ce20 <calloc@plt+0x3bb0>
test   %al,%al
jne    8049f0e <calloc@plt+0xc9e>
mov    0x80551fc,%eax
test   %eax,%eax
je     804986e <calloc@plt+0x5fe>
mov    0x4(%eax),%ecx
cmp    %ecx,0xa0(%ebx)
mov    0x9c(%ebx),%edx
je     8049c03 <calloc@plt+0x993>
mov    0x54(%ebx),%eax
movl   $0x0,0x10(%esp)
mov    %eax,%ecx
mov    %eax,%edx
mov    %eax,0x34(%esp)
mov    0x8055208,%eax
and    $0xf000,%edx
cmp    $0x4000,%edx
mov    %ecx,(%esp)
mov    %edx,0x2c(%esp)
mov    %eax,0xc(%esp)
mov    0x8055204,%eax
mov    %eax,0x8(%esp)
sete   %al
movzbl %al,%eax
mov    %eax,0x4(%esp)
call   804ace0 <calloc@plt+0x1a70>
mov    0x2c(%esp),%edx
cmp    $0xa000,%edx
mov    %eax,0x38(%esp)
je     8049b0b <calloc@plt+0x89b>
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
mov    0x1c(%edi),%eax
mov    %eax,(%esp)
call   80490d0 <fchmodat@plt>
test   %eax,%eax
jne    8049d27 <calloc@plt+0xab7>
cmpl   $0x2,0x8055128
je     804a158 <calloc@plt+0xee8>
mov    0x38(%esp),%edx
mov    %edx,%eax
and    $0xe,%dh
jne    8049d92 <calloc@plt+0xb22>
xor    0x34(%esp),%eax
test   $0xfff,%eax
je     8049e08 <calloc@plt+0xb98>
lea    0xa4(%esp),%eax
mov    $0x1,%esi
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
lea    0xb0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
movb   $0x0,0xae(%esp)
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
movl   $0x5,0x8(%esp)
movl   $0x80513b8,0x4(%esp)
movl   $0x0,(%esp)
movb   $0x0,0xba(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,%edx
jmp    80497a9 <calloc@plt+0x539>
cmpb   $0x0,0x8055201
jne    8049717 <calloc@plt+0x4a7>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051210,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
jmp    8049717 <calloc@plt+0x4a7>
cmpl   $0x0,0x30(%ebx)
jne    80499e6 <calloc@plt+0x776>
cmpl   $0x0,0x10(%ebx)
nop
je     804a05a <calloc@plt+0xdea>
cmpb   $0x0,0x8055201
jne    8049717 <calloc@plt+0x4a7>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051556,0x4(%esp)
mov    %eax,%esi
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049717 <calloc@plt+0x4a7>
cmpb   $0x0,0x8055201
jne    8049717 <calloc@plt+0x4a7>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x8051543,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049717 <calloc@plt+0x4a7>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x805144c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
xor    %eax,%eax
mov    $0x1,%esi
jmp    8049805 <calloc@plt+0x595>
cmpl   $0x0,0x34(%esp)
je     8049fcd <calloc@plt+0xd5d>
mov    0x80551c0,%eax
cmp    %eax,%esi
jle    804946b <calloc@plt+0x1fb>
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804a950 <calloc@plt+0x16e0>
test   %eax,%eax
mov    %eax,0x8055208
je     804a106 <calloc@plt+0xe96>
movl   $0x0,(%esp)
call   8049210 <umask@plt>
mov    %eax,0x8055204
jmp    8049681 <calloc@plt+0x411>
mov    $0x1,%esi
jmp    8049729 <calloc@plt+0x4b9>
mov    0x34(%esp),%edx
mov    0x8055208,%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
mov    %edx,%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
sete   %al
movzbl %al,%eax
mov    %eax,0x4(%esp)
call   804ace0 <calloc@plt+0x1a70>
mov    %eax,%edx
not    %edx
test   %edx,0x38(%esp)
je     8049816 <calloc@plt+0x5a6>
mov    %eax,0x34(%esp)
lea    0xa4(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
lea    0xb0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
mov    0x3c(%esp),%eax
movb   $0x0,0xba(%esp)
movb   $0x0,0xae(%esp)
mov    %eax,(%esp)
call   804c130 <calloc@plt+0x2ec0>
movl   $0x5,0x8(%esp)
movl   $0x8051394,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
lea    0xb1(%esp),%edx
mov    %edx,0x14(%esp)
lea    0xa5(%esp),%edx
mov    %esi,0xc(%esp)
xor    %esi,%esi
mov    %edx,0x10(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
jmp    8049816 <calloc@plt+0x5a6>
cmp    (%eax),%edx
jne    804986e <calloc@plt+0x5fe>
mov    0xc(%eax),%ecx
cmp    %ecx,0x48(%ebx)
mov    0x44(%ebx),%edx
jne    804986e <calloc@plt+0x5fe>
cmp    0x8(%eax),%edx
jne    804986e <calloc@plt+0x5fe>
mov    0x3c(%esp),%eax
cmpb   $0x2f,(%eax)
jne    8049fe7 <calloc@plt+0xd77>
cmpb   $0x0,0x1(%eax)
jne    8049fe7 <calloc@plt+0xd77>
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x80512f4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
movl   $0x5,0x8(%esp)
xor    %esi,%esi
movl   $0x8051360,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804ef60 <fts_set>
mov    %edi,(%esp)
call   804e750 <fts_read>
jmp    8049702 <calloc@plt+0x492>
call   8049100 <__errno_location@plt>
cmpl   $0x0,(%eax)
mov    %eax,%ebx
lea    0x0(%esi),%esi
je     8049d0c <calloc@plt+0xa9c>
cmpb   $0x0,0x8055201
je     804a07f <calloc@plt+0xe0f>
mov    %edi,(%esp)
call   804e5c0 <fts_close>
test   %eax,%eax
jne    8049ed7 <calloc@plt+0xc67>
mov    $0x1,%eax
mov    %eax,(%esp)
call   8049030 <exit@plt>
mov    %edi,(%esp)
call   804e5c0 <fts_close>
test   %eax,%eax
jne    8049ed7 <calloc@plt+0xc67>
xor    %eax,%eax
cmpb   $0x0,0x30(%esp)
jne    8049d04 <calloc@plt+0xa94>
jmp    8049cff <calloc@plt+0xa8f>
xor    %esi,%esi
cmpb   $0x0,0x8055201
jne    8049729 <calloc@plt+0x4b9>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051580,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x28(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,0x2c(%esp)
call   8049100 <__errno_location@plt>
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ecx
mov    %edx,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049729 <calloc@plt+0x4b9>
lea    0x44(%esp),%eax
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
call   8049200 <__xstat64@plt>
test   %eax,%eax
je     8049f5b <calloc@plt+0xceb>
cmpb   $0x0,0x8055201
jne    8049e08 <calloc@plt+0xb98>
mov    %esi,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x805159b,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %eax,0x2c(%esp)
call   8049100 <__errno_location@plt>
mov    0x2c(%esp),%edx
mov    %esi,0xc(%esp)
mov    %edx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
cmpl   $0x0,0x8055128
jne    804a158 <calloc@plt+0xee8>
lea    0xa4(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804a760 <calloc@plt+0x14f0>
lea    0xb0(%esp),%ecx
mov    %ecx,0x4(%esp)
mov    0x34(%esp),%ecx
movb   $0x0,0xae(%esp)
mov    %ecx,(%esp)
call   804a760 <calloc@plt+0x14f0>
movl   $0x5,0x8(%esp)
movl   $0x8051428,0x4(%esp)
movl   $0x0,(%esp)
movb   $0x0,0xba(%esp)
call   8048f10 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    %ecx,(%esp)
mov    %eax,%esi
call   804c360 <calloc@plt+0x30f0>
lea    0xa5(%esp),%edx
mov    %edx,0x10(%esp)
mov    0x38(%esp),%edx
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
and    $0xfff,%edx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049120 <__printf_chk@plt>
mov    $0x1,%eax
jmp    8049aba <calloc@plt+0x84a>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051567,0x4(%esp)
mov    %eax,%esi
jmp    8049a11 <calloc@plt+0x7a1>
movl   $0x5,0x8(%esp)
movl   $0x80515b8,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049cff <calloc@plt+0xa8f>
mov    0x3c(%esp),%eax
xor    %esi,%esi
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051238,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f10 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
jmp    8049702 <calloc@plt+0x492>
mov    0x54(%esp),%eax
jmp    8049908 <calloc@plt+0x698>
movl   $0x80551ec,(%esp)
call   804c380 <calloc@plt+0x3110>
test   %eax,%eax
mov    %eax,0x80551fc
jne    804969f <calloc@plt+0x42f>
movl   $0x80517ea,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x80511f0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8048f10 <dcgettext@plt>
mov    %eax,%esi
call   8049100 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    804969f <calloc@plt+0x42f>
mov    0x80551c0,%eax
lea    0x1(%eax),%edx
mov    (%ebx,%eax,4),%eax
mov    %edx,0x80551c0
mov    %eax,0x34(%esp)
jmp    8049acf <calloc@plt+0x85f>
movl   $0x80517ea,0x4(%esp)
movl   $0x1,(%esp)
call   804c340 <calloc@plt+0x30d0>
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   804c340 <calloc@plt+0x30d0>
movl   $0x5,0x8(%esp)
movl   $0x8051324,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x3c(%esp)
call   8048f10 <dcgettext@plt>
mov    0x3c(%esp),%edx
mov    %esi,0x10(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
jmp    8049c7c <calloc@plt+0xa0c>
movl   $0x1,0x10(%ebx)
mov    $0x1,%esi
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804ef60 <fts_set>
jmp    8049702 <calloc@plt+0x492>
movl   $0x5,0x8(%esp)
movl   $0x8051546,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049cef <calloc@plt+0xa7f>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x80511f0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8048f10 <dcgettext@plt>
mov    %eax,%esi
call   8049100 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049681 <calloc@plt+0x411>
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804c360 <calloc@plt+0x30f0>
movl   $0x5,0x8(%esp)
movl   $0x8051535,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f10 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
movl   $0x1,(%esp)
call   804a260 <calloc@plt+0xff0>
mov    $0x1,%esi
jmp    8049809 <calloc@plt+0x599>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8050c80
push   $0x8050c10
push   %ecx
push   %esi
push   $0x8049280
call   80490b0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x8055183,%eax
sub    $0x8055180,%eax
cmp    $0x6,%eax
ja     804a1b0 <calloc@plt+0xf40>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804a1af <calloc@plt+0xf3f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8055180,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x8055180,%eax
sub    $0x8055180,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804a1e9 <calloc@plt+0xf79>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804a1e8 <calloc@plt+0xf78>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x8055180,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x80551e8
jne    804a22c <calloc@plt+0xfbc>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804a1a0 <calloc@plt+0xf30>
movb   $0x1,0x80551e8
leave
repz ret
xchg   %ax,%ax
mov    0x8054f10,%eax
test   %eax,%eax
je     804a258 <calloc@plt+0xfe8>
mov    $0x0,%eax
test   %eax,%eax
je     804a258 <calloc@plt+0xfe8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8054f10,(%esp)
call   *%eax
leave
jmp    804a1d0 <calloc@plt+0xf60>
nop
jmp    804a1d0 <calloc@plt+0xf60>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8055214,%esi
mov    0x30(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     804a2b4 <calloc@plt+0x1044>
movl   $0x8050ce8,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8055184,%eax
mov    %eax,(%esp)
call   80491c0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8049030 <exit@plt>
movl   $0x8050d10,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050d98,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050e04,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050ed0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050f50,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050f94,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050fd8,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051008,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051040,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
mov    0x8055214,%eax
mov    %eax,(%esp)
call   804a6c0 <calloc@plt+0x1450>
movl   $0x5,0x8(%esp)
movl   $0x8051484,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x805149b,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80514b1,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x805108c,0xc(%esp)
movl   $0x80514c5,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
mov    0x80551e0,%esi
movl   $0x5,0x8(%esp)
movl   $0x80510b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8049150 <setlocale@plt>
test   %eax,%eax
je     804a539 <calloc@plt+0x12c9>
movl   $0x3,0x8(%esp)
movl   $0x80514d3,0x4(%esp)
mov    %eax,(%esp)
call   80491e0 <strncmp@plt>
test   %eax,%eax
jne    804a57d <calloc@plt+0x130d>
mov    0x8055214,%eax
mov    %eax,(%esp)
call   804a6c0 <calloc@plt+0x1450>
movl   $0x5,0x8(%esp)
movl   $0x805113c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
jmp    804a2ac <calloc@plt+0x103c>
mov    0x8055214,%eax
mov    %eax,(%esp)
call   804a6c0 <calloc@plt+0x1450>
movl   $0x5,0x8(%esp)
movl   $0x80510f4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f10 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
jmp    804a539 <calloc@plt+0x12c9>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8055210
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x805520c
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x80551e0,%eax
mov    %eax,(%esp)
call   804f1a0 <fts_children+0x200>
test   %eax,%eax
je     804a619 <calloc@plt+0x13a9>
cmpb   $0x0,0x805520c
je     804a630 <calloc@plt+0x13c0>
call   8049100 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804a630 <calloc@plt+0x13c0>
mov    0x8055184,%eax
mov    %eax,(%esp)
call   804f1a0 <fts_children+0x200>
test   %eax,%eax
jne    804a688 <calloc@plt+0x1418>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x8051715,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8055210,%eax
test   %eax,%eax
je     804a695 <calloc@plt+0x1425>
mov    %eax,(%esp)
call   804c130 <calloc@plt+0x2ec0>
mov    %eax,%esi
call   8049100 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x8051721,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
mov    0x8055130,%eax
mov    %eax,(%esp)
call   8048e80 <_exit@plt>
call   8049100 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8051543,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    804a688 <calloc@plt+0x1418>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804a6db <calloc@plt+0x146b>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804a6d0 <calloc@plt+0x1460>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804a709 <calloc@plt+0x1499>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804a709 <calloc@plt+0x1499>
cmp    $0x2f,%cl
je     804a710 <calloc@plt+0x14a0>
test   %bl,%bl
je     804a6e8 <calloc@plt+0x1478>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804a6f2 <calloc@plt+0x1482>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804a6e8 <calloc@plt+0x1478>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049090 <strlen@plt>
cmp    $0x1,%eax
jbe    804a73f <calloc@plt+0x14cf>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804a748 <calloc@plt+0x14d8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804a735 <calloc@plt+0x14c5>
nop
jmp    804a73f <calloc@plt+0x14cf>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
mov    %eax,%ecx
and    $0xf000,%ecx
cmp    $0x8000,%ecx
je     804a8e8 <calloc@plt+0x1678>
cmp    $0x4000,%ecx
je     804a8f8 <calloc@plt+0x1688>
cmp    $0x6000,%ecx
je     804a908 <calloc@plt+0x1698>
cmp    $0x2000,%ecx
je     804a8d8 <calloc@plt+0x1668>
cmp    $0xa000,%ecx
je     804a918 <calloc@plt+0x16a8>
cmp    $0x1000,%ecx
je     804a928 <calloc@plt+0x16b8>
cmp    $0xc000,%ecx
mov    $0x73,%ebx
mov    $0x3f,%ecx
cmovne %ecx,%ebx
mov    %eax,%ecx
and    $0x100,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x1(%edx)
mov    %eax,%ecx
and    $0x80,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x2(%edx)
mov    %eax,%ecx
and    $0x40,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x8,%ah
mov    %bl,(%edx)
je     804a8c8 <calloc@plt+0x1658>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x3(%edx)
mov    %eax,%ecx
and    $0x20,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x4(%edx)
mov    %eax,%ecx
and    $0x10,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x5(%edx)
mov    %eax,%ecx
and    $0x8,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x4,%ah
je     804a8c0 <calloc@plt+0x1650>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x6(%edx)
mov    %eax,%ecx
and    $0x4,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x7(%edx)
mov    %eax,%ecx
and    $0x2,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
test   $0x2,%ah
mov    %cl,0x8(%edx)
je     804a8a0 <calloc@plt+0x1630>
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffe0,%eax
add    $0x74,%eax
mov    %al,0x9(%edx)
movb   $0x20,0xa(%edx)
movb   $0x0,0xb(%edx)
pop    %ebx
ret
lea    0x0(%esi),%esi
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffb5,%eax
add    $0x78,%eax
mov    %al,0x9(%edx)
movb   $0x20,0xa(%edx)
movb   $0x0,0xb(%edx)
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804a851 <calloc@plt+0x15e1>
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804a813 <calloc@plt+0x15a3>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x63,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi),%esi
mov    $0x2d,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi),%esi
mov    $0x64,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi),%esi
mov    $0x62,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi),%esi
mov    $0x6c,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi),%esi
mov    $0x70,%ebx
jmp    804a7cc <calloc@plt+0x155c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
mov    %eax,0x4(%esp)
jmp    804a760 <calloc@plt+0x14f0>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
movsbl (%ebx),%eax
lea    -0x30(%eax),%edx
cmp    $0x7,%dl
mov    %ebx,%edx
jbe    804aa00 <calloc@plt+0x1790>
test   %al,%al
mov    $0x1,%esi
je     804ac2b <calloc@plt+0x19bb>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x2b,%al
mov    $0x1,%ecx
je     804a993 <calloc@plt+0x1723>
and    $0xffffffef,%eax
xor    %ecx,%ecx
cmp    $0x2d,%al
sete   %cl
add    $0x1,%edx
movzbl (%edx),%eax
add    %ecx,%esi
test   %al,%al
jne    804a980 <calloc@plt+0x1710>
cmp    $0xfffffff,%esi
ja     804ac6d <calloc@plt+0x19fd>
shl    $0x4,%esi
mov    %esi,(%esp)
xor    %ebp,%ebp
call   804caf0 <calloc@plt+0x3880>
mov    %eax,0xc(%esp)
xor    %edi,%edi
movzbl (%ebx),%eax
cmp    $0x61,%al
je     804ab80 <calloc@plt+0x1910>
jle    804aa28 <calloc@plt+0x17b8>
cmp    $0x6f,%al
je     804aba0 <calloc@plt+0x1930>
cmp    $0x75,%al
je     804ab98 <calloc@plt+0x1928>
cmp    $0x67,%al
lea    0x0(%esi),%esi
je     804ab90 <calloc@plt+0x1920>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
xor    %esi,%esi
jmp    804aa17 <calloc@plt+0x17a7>
lea    0x0(%esi,%eiz,1),%esi
movsbl (%edx),%eax
lea    -0x30(%eax),%ecx
cmp    $0x7,%cl
ja     804aba8 <calloc@plt+0x1938>
lea    -0x30(%eax,%esi,8),%esi
add    $0x1,%edx
cmp    $0xfff,%esi
jbe    804aa08 <calloc@plt+0x1798>
jmp    804a9f2 <calloc@plt+0x1782>
cmp    $0x2d,%al
je     804aa36 <calloc@plt+0x17c6>
cmp    $0x3d,%al
xchg   %ax,%ax
je     804aa36 <calloc@plt+0x17c6>
cmp    $0x2b,%al
jne    804a9e6 <calloc@plt+0x1776>
mov    %ebp,%esi
add    $0x1,%ebp
shl    $0x4,%esi
mov    %al,0xb(%esp)
add    0xc(%esp),%esi
jmp    804aaa2 <calloc@plt+0x1832>
cmp    $0x6f,%cl
je     804ab68 <calloc@plt+0x18f8>
cmp    $0x75,%cl
jne    804aaf0 <calloc@plt+0x1880>
add    $0x2,%ebx
mov    $0x3,%edx
mov    $0x1c0,%eax
movzbl 0xb(%esp),%ecx
mov    %dl,0x1(%esi)
mov    %eax,%edx
and    %edi,%edx
test   %edi,%edi
mov    %eax,0x8(%esi)
cmovne %edx,%eax
mov    %cl,(%esi)
mov    %edi,0x4(%esi)
mov    %eax,0xc(%esi)
movzbl (%ebx),%eax
cmp    $0x2b,%al
je     804aa98 <calloc@plt+0x1828>
mov    %eax,%edx
and    $0xffffffef,%edx
cmp    $0x2d,%dl
jne    804ac34 <calloc@plt+0x19c4>
add    $0x10,%esi
add    $0x1,%ebp
mov    %al,0xb(%esp)
movsbl 0x1(%ebx),%ecx
lea    0x1(%ebx),%eax
cmp    $0x67,%cl
je     804ab50 <calloc@plt+0x18e0>
jg     804aa48 <calloc@plt+0x17d8>
lea    -0x30(%ecx),%edx
cmp    $0x7,%dl
ja     804aaf0 <calloc@plt+0x1880>
xor    %edx,%edx
xchg   %ax,%ax
jmp    804aad7 <calloc@plt+0x1867>
lea    0x0(%esi),%esi
movsbl (%eax),%ecx
lea    -0x30(%ecx),%ebx
cmp    $0x7,%bl
ja     804abf8 <calloc@plt+0x1988>
lea    -0x30(%ecx,%edx,8),%edx
add    $0x1,%eax
cmp    $0xfff,%edx
jbe    804aac8 <calloc@plt+0x1858>
jmp    804a9f2 <calloc@plt+0x1782>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebx
mov    $0x1,%edx
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
sub    $0x58,%ecx
cmp    $0x20,%cl
ja     804aa67 <calloc@plt+0x17f7>
movzbl %cl,%ecx
jmp    *0x8051728(,%ecx,4)
xchg   %ax,%ax
mov    $0x2,%edx
lea    0x0(%esi),%esi
add    $0x1,%ebx
movzbl (%ebx),%ecx
jmp    804ab00 <calloc@plt+0x1890>
or     $0x49,%eax
jmp    804ab20 <calloc@plt+0x18b0>
lea    0x0(%esi),%esi
or     $0x92,%al
jmp    804ab20 <calloc@plt+0x18b0>
lea    0x0(%esi,%eiz,1),%esi
or     $0x2,%ah
jmp    804ab20 <calloc@plt+0x18b0>
lea    0x0(%esi),%esi
or     $0xc,%ah
jmp    804ab20 <calloc@plt+0x18b0>
lea    0x0(%esi),%esi
or     $0x124,%eax
jmp    804ab20 <calloc@plt+0x18b0>
nop
add    $0x2,%ebx
mov    $0x3,%edx
mov    $0x38,%eax
jmp    804aa67 <calloc@plt+0x17f7>
lea    0x0(%esi),%esi
add    $0x2,%ebx
mov    $0x3,%edx
mov    $0x7,%eax
jmp    804aa67 <calloc@plt+0x17f7>
lea    0x0(%esi),%esi
mov    $0xfff,%edi
add    $0x1,%ebx
jmp    804a9be <calloc@plt+0x174e>
lea    0x0(%esi),%esi
or     $0x438,%edi
jmp    804ab85 <calloc@plt+0x1915>
or     $0x9c0,%edi
jmp    804ab85 <calloc@plt+0x1915>
or     $0x207,%edi
jmp    804ab85 <calloc@plt+0x1915>
test   %al,%al
jne    804a9f2 <calloc@plt+0x1782>
sub    %ebx,%edx
mov    $0xfff,%ebx
cmp    $0x4,%edx
jg     804abca <calloc@plt+0x195a>
mov    %esi,%ebx
and    $0xc00,%ebx
or     $0x3ff,%ebx
movl   $0x20,(%esp)
call   804caf0 <calloc@plt+0x3880>
movb   $0x3d,(%eax)
movb   $0x1,0x1(%eax)
movl   $0xfff,0x4(%eax)
mov    %esi,0x8(%eax)
mov    %ebx,0xc(%eax)
movb   $0x0,0x11(%eax)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
test   %edi,%edi
jne    804a9f2 <calloc@plt+0x1782>
cmp    $0x2c,%cl
jne    804ac40 <calloc@plt+0x19d0>
movzbl 0xb(%esp),%ebx
mov    $0xfff,%edi
movb   $0x1,0x1(%esi)
movl   $0xfff,0x4(%esi)
mov    %edx,0x8(%esi)
mov    %bl,(%esi)
mov    %eax,%ebx
mov    $0xfff,%eax
jmp    804aa80 <calloc@plt+0x1810>
mov    $0x10,%si
jmp    804a9ae <calloc@plt+0x173e>
cmp    $0x2c,%al
jne    804ac50 <calloc@plt+0x19e0>
add    $0x1,%ebx
jmp    804a9bc <calloc@plt+0x174c>
test   %cl,%cl
je     804ac05 <calloc@plt+0x1995>
jmp    804a9f2 <calloc@plt+0x1782>
lea    0x0(%esi,%eiz,1),%esi
test   %al,%al
jne    804a9e6 <calloc@plt+0x1776>
mov    0xc(%esp),%edi
mov    %ebp,%eax
shl    $0x4,%eax
movb   $0x0,0x1(%edi,%eax,1)
mov    %edi,%eax
jmp    804a9f4 <calloc@plt+0x1784>
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x78,%esp
lea    0x10(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x80(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049200 <__xstat64@plt>
xor    %edx,%edx
test   %eax,%eax
jne    804acd7 <calloc@plt+0x1a67>
movl   $0x20,(%esp)
mov    0x20(%esp),%ebx
call   804caf0 <calloc@plt+0x3880>
movb   $0x3d,(%eax)
mov    %eax,%edx
movb   $0x1,0x1(%eax)
movl   $0xfff,0x4(%eax)
mov    %ebx,0x8(%eax)
movl   $0xfff,0xc(%eax)
movb   $0x0,0x11(%eax)
add    $0x78,%esp
mov    %edx,%eax
pop    %ebx
ret
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xd,%esp
mov    0x2d(%esp),%ecx
mov    0x21(%esp),%eax
movzbl 0x25(%esp),%edx
movl   $0x0,0x5(%esp)
movzbl 0x1(%ecx),%esi
and    $0xfff,%eax
mov    %dl,(%esp)
mov    %esi,%ebx
test   %bl,%bl
je     804ae24 <calloc@plt+0x1bb4>
movzbl %dl,%edi
mov    %edi,0x9(%esp)
mov    0x29(%esp),%edi
mov    %eax,0x21(%esp)
not    %edi
mov    %edi,0x1(%esp)
jmp    804adb3 <calloc@plt+0x1b43>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x3,%al
jne    804ad77 <calloc@plt+0x1b07>
and    0x21(%esp),%ebx
mov    %ebx,%ebp
and    $0x124,%ebx
cmp    $0x1,%ebx
mov    %ebp,%ebx
sbb    %esi,%esi
and    $0x92,%ebx
not    %esi
and    $0x124,%esi
cmp    $0x1,%ebx
sbb    %ebx,%ebx
not    %ebx
and    $0x92,%ebx
or     %esi,%ebx
mov    %ebp,%esi
and    $0x49,%esi
cmp    $0x1,%esi
sbb    %esi,%esi
not    %esi
and    $0x49,%esi
or     %esi,%ebx
or     %ebp,%ebx
mov    0x1(%esp),%ebp
mov    %edx,%esi
test   %edi,%edi
not    %esi
cmovne %edi,%ebp
and    %ebx,%esi
movzbl (%ecx),%ebx
and    %ebp,%esi
cmp    $0x2d,%bl
je     804ae40 <calloc@plt+0x1bd0>
cmp    $0x3d,%bl
je     804adf0 <calloc@plt+0x1b80>
cmp    $0x2b,%bl
jne    804ada6 <calloc@plt+0x1b36>
or     %esi,0x5(%esp)
or     %esi,0x21(%esp)
add    $0x10,%ecx
movzbl 0x1(%ecx),%esi
mov    %esi,%eax
test   %al,%al
je     804ae20 <calloc@plt+0x1bb0>
cmpb   $0x1,(%esp)
mov    %esi,%eax
mov    0xc(%ecx),%ebx
mov    0x4(%ecx),%edi
sbb    %edx,%edx
not    %edx
and    $0xc00,%edx
not    %ebx
and    %ebx,%edx
cmp    $0x2,%al
mov    0x8(%ecx),%ebx
jne    804ad30 <calloc@plt+0x1ac0>
mov    0x21(%esp),%ebp
mov    %ebx,%esi
or     $0x49,%esi
and    $0x49,%ebp
or     0x9(%esp),%ebp
cmovne %esi,%ebx
jmp    804ad77 <calloc@plt+0x1b07>
lea    0x0(%esi),%esi
mov    %edi,%ebp
xor    %ebx,%ebx
not    %ebp
test   %edi,%edi
cmovne %ebp,%ebx
add    $0x10,%ecx
or     %edx,%ebx
and    %ebx,0x21(%esp)
mov    %ebx,%edx
or     %esi,0x21(%esp)
not    %edx
movzbl 0x1(%ecx),%esi
and    $0xfff,%edx
or     %edx,0x5(%esp)
mov    %esi,%eax
test   %al,%al
jne    804adb3 <calloc@plt+0x1b43>
mov    0x21(%esp),%eax
mov    0x31(%esp),%edx
test   %edx,%edx
je     804ae36 <calloc@plt+0x1bc6>
mov    0x31(%esp),%edi
mov    0x5(%esp),%ecx
mov    %ecx,(%edi)
add    $0xd,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
or     %esi,0x5(%esp)
not    %esi
and    %esi,0x21(%esp)
jmp    804ada6 <calloc@plt+0x1b36>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804aed3 <calloc@plt+0x1c63>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049160 <strrchr@plt>
test   %eax,%eax
je     804aebf <calloc@plt+0x1c4f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804aebf <calloc@plt+0x1c4f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x80517e4,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804aebf <calloc@plt+0x1c4f>
mov    $0x3,%ecx
mov    $0x80517ec,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804aebf <calloc@plt+0x1c4f>
lea    0x4(%eax),%ebx
mov    %ebx,0x8055180
mov    %ebx,0x8055214
mov    %ebx,0x80551a0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8055184,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80517ac,(%esp)
mov    %eax,0xc(%esp)
call   8048f60 <fwrite@plt>
call   80491f0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804af21 <calloc@plt+0x1cb1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   80491f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804af60 <calloc@plt+0x1cf0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8050390 <fts_children+0x13f0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804afc8 <calloc@plt+0x1d58>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804afb0 <calloc@plt+0x1d40>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x2d,0x3(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x38,0x4(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x0,0x5(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x60,(%esi)
mov    $0x80517ff,%eax
mov    $0x80517f0,%edx
cmovne %edx,%eax
jmp    804af58 <calloc@plt+0x1ce8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80517f9,%eax
cmp    $0x7,%edi
mov    $0x80517f7,%edx
cmovne %edx,%eax
jmp    804af58 <calloc@plt+0x1ce8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804afb0 <calloc@plt+0x1d40>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x31,0x2(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x38,0x3(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x30,0x4(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x33,0x5(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x30,0x6(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x0,0x7(%eax)
jne    804afb0 <calloc@plt+0x1d40>
cmpb   $0x60,(%esi)
mov    $0x80517fb,%eax
mov    $0x80517f4,%edx
cmovne %edx,%eax
jmp    804af58 <calloc@plt+0x1ce8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804b8f8 <calloc@plt+0x2688>
mov    0x94(%esp),%eax
jmp    *0x8051840(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804b700 <calloc@plt+0x2490>
test   %al,%al
je     804b713 <calloc@plt+0x24a3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804b6e8 <calloc@plt+0x2478>
cmpb   $0x0,0x58(%esp)
je     804b6e8 <calloc@plt+0x2478>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804b6e8 <calloc@plt+0x2478>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048f00 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804b780 <calloc@plt+0x2510>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804b498 <calloc@plt+0x2228>
movzbl %bl,%eax
jmp    *0x8051864(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804b2d8 <calloc@plt+0x2068>
cmpl   $0x3,0x94(%esp)
jne    804b238 <calloc@plt+0x1fc8>
testb  $0x4,0x98(%esp)
je     804b238 <calloc@plt+0x1fc8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804b238 <calloc@plt+0x1fc8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804b238 <calloc@plt+0x1fc8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804b238 <calloc@plt+0x1fc8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804b238 <calloc@plt+0x1fc8>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmp    %edi,%ebp
jae    804b1fe <calloc@plt+0x1f8e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b20e <calloc@plt+0x1f9e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b21e <calloc@plt+0x1fae>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804b22e <calloc@plt+0x1fbe>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804b246 <calloc@plt+0x1fd6>
cmpb   $0x0,0x5a(%esp)
jne    804b26b <calloc@plt+0x1ffb>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804b26b <calloc@plt+0x1ffb>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804b272 <calloc@plt+0x2002>
cmpb   $0x0,0x24(%esp)
je     804b288 <calloc@plt+0x2018>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmp    %edi,%ebp
jae    804b285 <calloc@plt+0x2015>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804b296 <calloc@plt+0x2026>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804b0d8 <calloc@plt+0x1e68>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804b8e8 <calloc@plt+0x2678>
test   %al,%al
jne    804b238 <calloc@plt+0x1fc8>
test   %esi,%esi
jne    804b238 <calloc@plt+0x1fc8>
cmpl   $0x2,0x94(%esp)
jne    804b238 <calloc@plt+0x1fc8>
nop
cmpb   $0x0,0x2f(%esp)
je     804b238 <calloc@plt+0x1fc8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b020 <calloc@plt+0x1db0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804ba12 <calloc@plt+0x27a2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804b95b <calloc@plt+0x26eb>
cmpb   $0x0,0x58(%esp)
je     804b238 <calloc@plt+0x1fc8>
mov    %eax,%ebx
jmp    804b272 <calloc@plt+0x2002>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804b363 <calloc@plt+0x20f3>
nop
mov    $0x66,%eax
jmp    804b363 <calloc@plt+0x20f3>
nop
mov    $0x76,%eax
jmp    804b363 <calloc@plt+0x20f3>
nop
mov    $0x6e,%eax
jmp    804b355 <calloc@plt+0x20e5>
nop
mov    $0x74,%eax
jmp    804b355 <calloc@plt+0x20e5>
nop
cmpb   $0x0,0x58(%esp)
je     804b8d0 <calloc@plt+0x2660>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmp    %edi,%ebp
jae    804b3c2 <calloc@plt+0x2152>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804b408 <calloc@plt+0x2198>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804b408 <calloc@plt+0x2198>
cmp    %eax,%edi
ja     804b970 <calloc@plt+0x2700>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b3fe <calloc@plt+0x218e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804b246 <calloc@plt+0x1fd6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804b363 <calloc@plt+0x20f3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804b43e <calloc@plt+0x21ce>
cmpb   $0x0,0x2f(%esp)
je     804b43e <calloc@plt+0x21ce>
test   %dl,%dl
jne    804b288 <calloc@plt+0x2018>
mov    %ebx,%eax
jmp    804b355 <calloc@plt+0x20e5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804b238 <calloc@plt+0x1fc8>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmp    %edi,%ebp
jae    804b46d <calloc@plt+0x21fd>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b47d <calloc@plt+0x220d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b48d <calloc@plt+0x221d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804b238 <calloc@plt+0x1fc8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804b790 <calloc@plt+0x2520>
call   8049260 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804b238 <calloc@plt+0x1fc8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804b544 <calloc@plt+0x22d4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmp    %edi,%ebp
jae    804b4f3 <calloc@plt+0x2283>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b506 <calloc@plt+0x2296>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b51c <calloc@plt+0x22ac>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804b28b <calloc@plt+0x201b>
cmp    %edi,%ebp
jae    804b539 <calloc@plt+0x22c9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804b4e0 <calloc@plt+0x2270>
cmpb   $0x0,0x24(%esp)
je     804b525 <calloc@plt+0x22b5>
cmp    %edi,%ebp
jae    804b557 <calloc@plt+0x22e7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804b525 <calloc@plt+0x22b5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804ba17 <calloc@plt+0x27a7>
test   %edi,%edi
je     804b91d <calloc@plt+0x26ad>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80517f9,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804b0b8 <calloc@plt+0x1e48>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80517f9,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804b0b8 <calloc@plt+0x1e48>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
lea    0x0(%esi,%eiz,1),%esi
je     804b62c <calloc@plt+0x23bc>
mov    0x94(%esp),%edx
mov    $0x8051803,%eax
call   804af30 <calloc@plt+0x1cc0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x80517f7,%eax
call   804af30 <calloc@plt+0x1cc0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804b65a <calloc@plt+0x23ea>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b65a <calloc@plt+0x23ea>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804b64f <calloc@plt+0x23df>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b648 <calloc@plt+0x23d8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049090 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80517f7,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804b0b8 <calloc@plt+0x1e48>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804ba33 <calloc@plt+0x27c3>
test   %edi,%edi
je     804b93c <calloc@plt+0x26cc>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x80517f7,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804b0b8 <calloc@plt+0x1e48>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804b170 <calloc@plt+0x1f00>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804b0f8 <calloc@plt+0x1e88>
test   %ebp,%ebp
jne    804b72c <calloc@plt+0x24bc>
cmpl   $0x2,0x94(%esp)
jne    804b72c <calloc@plt+0x24bc>
cmpb   $0x0,0x2f(%esp)
jne    804b2e8 <calloc@plt+0x2078>
cmpb   $0x0,0x2f(%esp)
jne    804b762 <calloc@plt+0x24f2>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804b762 <calloc@plt+0x24f2>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b762 <calloc@plt+0x24f2>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804b757 <calloc@plt+0x24e7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b750 <calloc@plt+0x24e0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804b332 <calloc@plt+0x20c2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804b332 <calloc@plt+0x20c2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804b170 <calloc@plt+0x1f00>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804b8fd <calloc@plt+0x268d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804b97d <calloc@plt+0x270d>
cmp    $0xffffffff,%eax
je     804b998 <calloc@plt+0x2728>
cmp    $0xfffffffe,%eax
je     804b9b3 <calloc@plt+0x2743>
cmpb   $0x0,0x2f(%esp)
je     804b85f <calloc@plt+0x25ef>
cmpl   $0x2,0x94(%esp)
jne    804b85f <calloc@plt+0x25ef>
cmp    $0x1,%eax
je     804b85f <calloc@plt+0x25ef>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804b858 <calloc@plt+0x25e8>
movzbl %al,%eax
jmp    *0x8051a60(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804b840 <calloc@plt+0x25d0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048f50 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048ed0 <mbsinit@plt>
test   %eax,%eax
je     804b7d1 <calloc@plt+0x2561>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804b4c3 <calloc@plt+0x2253>
and    0x58(%esp),%dl
jmp    804b4cd <calloc@plt+0x225d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804b2e8 <calloc@plt+0x2078>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804b238 <calloc@plt+0x1fc8>
add    $0x1,%esi
jmp    804b0d8 <calloc@plt+0x1e68>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804b2b9 <calloc@plt+0x2049>
call   80491f0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049090 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804b7ae <calloc@plt+0x253e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80517f9,0x3c(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80517f7,0x3c(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
cmpb   $0x0,0x2f(%esp)
je     804b363 <calloc@plt+0x20f3>
jmp    804b2e8 <calloc@plt+0x2078>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804b3ee <calloc@plt+0x217e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804b8a5 <calloc@plt+0x2635>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804b8a5 <calloc@plt+0x2635>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804ba08 <calloc@plt+0x2798>
cmpb   $0x0,(%eax)
je     804ba08 <calloc@plt+0x2798>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804b9f6 <calloc@plt+0x2786>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804ba00 <calloc@plt+0x2790>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804b9f0 <calloc@plt+0x2780>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804b8a5 <calloc@plt+0x2635>
call   8048f20 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80517f9,0x3c(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x80517f7,0x3c(%esp)
jmp    804b0b8 <calloc@plt+0x1e48>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049100 <__errno_location@plt>
test   %edi,%edi
mov    0x8055170,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804bbdc <calloc@plt+0x296c>
cmp    0x805517c,%edi
jb     804bae8 <calloc@plt+0x2878>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804bbe1 <calloc@plt+0x2971>
cmp    $0x8055174,%esi
lea    0x0(,%ebp,8),%eax
je     804bbb0 <calloc@plt+0x2940>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804cb60 <calloc@plt+0x38f0>
mov    %eax,%esi
mov    %eax,0x8055170
mov    0x805517c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   80490e0 <memset@plt>
mov    %ebp,0x805517c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b020 <calloc@plt+0x1db0>
cmp    %eax,%ebp
ja     804bb97 <calloc@plt+0x2927>
lea    0x1(%eax),%ebp
cmp    $0x8055220,%esi
mov    %ebp,(%edi)
je     804bb52 <calloc@plt+0x28e2>
mov    %esi,(%esp)
call   8048eb0 <free@plt>
mov    %ebp,(%esp)
call   804caf0 <calloc@plt+0x3880>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b020 <calloc@plt+0x1db0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804cb60 <calloc@plt+0x38f0>
mov    0x8055178,%edx
mov    %eax,%esi
mov    %eax,0x8055170
mov    0x8055174,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804babf <calloc@plt+0x284f>
call   80491f0 <abort@plt>
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049100 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8055320,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804cd00 <calloc@plt+0x3a90>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8055320,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804bc50 <calloc@plt+0x29e0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8055320,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8055320,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8055320,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8055320,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804bd03 <calloc@plt+0x2a93>
test   %ecx,%ecx
je     804bd03 <calloc@plt+0x2a93>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   80491f0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8055320,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049100 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b020 <calloc@plt+0x1db0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8055320,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049100 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804b020 <calloc@plt+0x1db0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804caf0 <calloc@plt+0x3880>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804b020 <calloc@plt+0x1db0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804be38 <calloc@plt+0x2bc8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804bd70 <calloc@plt+0x2b00>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x805517c,%edi
mov    0x8055170,%esi
cmp    $0x1,%edi
jbe    804beb3 <calloc@plt+0x2c43>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048eb0 <free@plt>
cmp    %edi,%ebx
jne    804bea0 <calloc@plt+0x2c30>
mov    0x4(%esi),%eax
cmp    $0x8055220,%eax
je     804bed9 <calloc@plt+0x2c69>
mov    %eax,(%esp)
call   8048eb0 <free@plt>
movl   $0x100,0x8055174
00
movl   $0x8055220,0x8055178
08
cmp    $0x8055174,%esi
je     804bef3 <calloc@plt+0x2c83>
mov    %esi,(%esp)
call   8048eb0 <free@plt>
movl   $0x8055174,0x8055170
08
movl   $0x1,0x805517c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8055320,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8055320,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8055320,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8055320,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804af00 <calloc@plt+0x1c90>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804ba50 <calloc@plt+0x27e0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804af00 <calloc@plt+0x1c90>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804ba50 <calloc@plt+0x27e0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804bf90 <calloc@plt+0x2d20>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804bfc0 <calloc@plt+0x2d50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8055320,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8055324,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8055328,%eax
mov    %eax,0x18(%esp)
mov    0x805532c,%eax
mov    %eax,0x1c(%esp)
mov    0x8055330,%eax
mov    %eax,0x20(%esp)
mov    0x8055334,%eax
mov    %eax,0x24(%esp)
mov    0x8055338,%eax
mov    %eax,0x28(%esp)
mov    0x805533c,%eax
mov    %eax,0x2c(%esp)
mov    0x8055340,%eax
mov    %eax,0x30(%esp)
mov    0x8055344,%eax
mov    %eax,0x34(%esp)
mov    0x8055348,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805534c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804ba50 <calloc@plt+0x27e0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c050 <calloc@plt+0x2de0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804c050 <calloc@plt+0x2de0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c050 <calloc@plt+0x2de0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8055320,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8055324,%eax
mov    %eax,0x14(%esp)
mov    0x8055328,%eax
mov    %eax,0x18(%esp)
mov    0x805532c,%eax
mov    %eax,0x1c(%esp)
mov    0x8055330,%eax
mov    %eax,0x20(%esp)
mov    0x8055334,%eax
mov    %eax,0x24(%esp)
mov    0x8055338,%eax
mov    %eax,0x28(%esp)
mov    0x805533c,%eax
mov    %eax,0x2c(%esp)
mov    0x8055340,%eax
mov    %eax,0x30(%esp)
mov    0x8055344,%eax
mov    %eax,0x34(%esp)
mov    0x8055348,%eax
mov    %eax,0x38(%esp)
mov    0x805534c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804bcd0 <calloc@plt+0x2a60>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804ba50 <calloc@plt+0x27e0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c190 <calloc@plt+0x2f20>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c190 <calloc@plt+0x2f20>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c190 <calloc@plt+0x2f20>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8055140,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8055140,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8055140,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8055140,0x4(%esp)
jmp    804ba50 <calloc@plt+0x27e0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x78,%esp
lea    0x10(%esp),%eax
mov    0x80(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x80517ea,0x4(%esp)
movl   $0x3,(%esp)
call   8049220 <__lxstat64@plt>
test   %eax,%eax
jne    804c3d0 <calloc@plt+0x3160>
mov    0x68(%esp),%eax
mov    0x6c(%esp),%edx
mov    %eax,(%ebx)
mov    0x10(%esp),%eax
mov    %edx,0x4(%ebx)
mov    0x14(%esp),%edx
mov    %eax,0x8(%ebx)
mov    %ebx,%eax
mov    %edx,0xc(%ebx)
add    $0x78,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
add    $0x78,%esp
xor    %eax,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804c898 <calloc@plt+0x3628>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8051b44,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051b57,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8051de0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80491c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051bb4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804c8c0 <calloc@plt+0x3650>
jmp    *0x8051db8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051d18,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048f10 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80491c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051d48,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048f10 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80491c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   80491f0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051b5b,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491c0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051b6b,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491c0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051b82,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491c0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051c80,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048f10 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
jmp    804c53f <calloc@plt+0x32cf>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051ca0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048f10 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
jmp    804c53f <calloc@plt+0x32cf>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051cc4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048f10 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
jmp    804c53f <calloc@plt+0x32cf>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051cec,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048f10 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
jmp    804c53f <calloc@plt+0x32cf>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8051b50,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491c0 <__fprintf_chk@plt>
jmp    804c431 <calloc@plt+0x31c1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051d7c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048f10 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804c5ca <calloc@plt+0x335a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804c96a <calloc@plt+0x36fa>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804c960 <calloc@plt+0x36f0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c3e0 <calloc@plt+0x3170>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804c9c2 <calloc@plt+0x3752>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804c9b0 <calloc@plt+0x3740>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804c3e0 <calloc@plt+0x3170>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c9a0 <calloc@plt+0x3730>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x8051b9e,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x805149b,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80514b1,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
movl   $0x805108c,0xc(%esp)
movl   $0x80514c5,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049120 <__printf_chk@plt>
mov    0x80551e0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x80510b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
je     804cb09 <calloc@plt+0x3899>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804cb04 <calloc@plt+0x3894>
lea    0x0(%esi),%esi
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804cb49 <calloc@plt+0x38d9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804caf0 <calloc@plt+0x3880>
call   804cd60 <calloc@plt+0x3af0>
xchg   %ax,%ax
jmp    804caf0 <calloc@plt+0x3880>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804cb88 <calloc@plt+0x3918>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <realloc@plt>
test   %eax,%eax
je     804cb9b <calloc@plt+0x392b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804cb70 <calloc@plt+0x3900>
mov    %eax,(%esp)
call   8048eb0 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804cb80 <calloc@plt+0x3910>
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804cbe3 <calloc@plt+0x3973>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804cb60 <calloc@plt+0x38f0>
call   804cd60 <calloc@plt+0x3af0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804cc30 <calloc@plt+0x39c0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804cc48 <calloc@plt+0x39d8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804cb60 <calloc@plt+0x38f0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804cc19 <calloc@plt+0x39a9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804cc19 <calloc@plt+0x39a9>
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804cc88 <calloc@plt+0x3a18>
cmp    $0xaaaaaaa9,%eax
ja     804cc94 <calloc@plt+0x3a24>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804cb60 <calloc@plt+0x38f0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804cc70 <calloc@plt+0x3a00>
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804caf0 <calloc@plt+0x3880>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80490e0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049270 <calloc@plt>
test   %eax,%eax
je     804ccef <calloc@plt+0x3a7f>
add    $0x1c,%esp
ret
nop
call   804cd60 <calloc@plt+0x3af0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804caf0 <calloc@plt+0x3880>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048ec0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049090 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804cd00 <calloc@plt+0x3a90>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x8051e0f,0x4(%esp)
movl   $0x0,(%esp)
call   8048f10 <dcgettext@plt>
mov    0x8055130,%edx
movl   $0x8051543,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048fd0 <error@plt>
call   80491f0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    0x28(%esp),%edx
or     $0x2,%ah
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804e240 <fts_open>
test   %eax,%eax
je     804cde0 <calloc@plt+0x3b70>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
call   8049100 <__errno_location@plt>
cmpl   $0x16,(%eax)
je     804cdf0 <calloc@plt+0x3b80>
call   804cd60 <calloc@plt+0x3af0>
nop
movl   $0x8051e48,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x8051e20,0x4(%esp)
movl   $0x8051e2b,(%esp)
call   8049250 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    0x2c(%eax),%edx
and    $0x11,%edx
cmp    $0x10,%edx
je     804ce48 <calloc@plt+0x3bd8>
xor    %eax,%eax
cmp    $0x11,%edx
je     804ce38 <calloc@plt+0x3bc8>
repz ret
mov    0x8(%esp),%eax
mov    0x30(%eax),%eax
test   %eax,%eax
setne  %al
ret
lea    0x0(%esi),%esi
mov    $0x1,%eax
ret
xchg   %ax,%ax
push   %esi
xor    %eax,%eax
push   %ebx
mov    0xc(%esp),%esi
mov    0x10(%esp),%ebx
mov    0x8(%esi),%edx
mov    0xc(%esi),%ecx
xor    0xc(%ebx),%ecx
xor    0x8(%ebx),%edx
or     %edx,%ecx
je     804ce70 <calloc@plt+0x3c00>
pop    %ebx
pop    %esi
ret
nop
mov    (%esi),%edx
mov    0x4(%esi),%eax
xor    0x4(%ebx),%eax
xor    (%ebx),%edx
pop    %ebx
pop    %esi
or     %eax,%edx
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0xc(%eax),%edx
mov    0x8(%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8050ab0 <fts_children+0x1b10>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8050ab0 <fts_children+0x1b10>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%esp),%ecx
mov    (%eax),%edx
mov    0x4(%eax),%eax
xor    0x4(%ecx),%eax
xor    (%ecx),%edx
or     %eax,%edx
sete   %al
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%ecx
mov    0x9c(%eax),%ebx
mov    0x10(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%edx
mov    0x9c(%eax),%esi
cmp    %edx,%ecx
jae    804cf48 <calloc@plt+0x3cd8>
mov    $0xffffffff,%eax
nop
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
jbe    804cf68 <calloc@plt+0x3cf8>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804cf40 <calloc@plt+0x3cd0>
jb     804cf59 <calloc@plt+0x3ce9>
cmp    %esi,%ebx
ja     804cf40 <calloc@plt+0x3cd0>
xor    %eax,%eax
pop    %ebx
pop    %esi
lea    0x0(%esi),%esi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%ebx
jb     804cf3a <calloc@plt+0x3cca>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804cf40 <calloc@plt+0x3cd0>
jmp    804cf53 <calloc@plt+0x3ce3>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x1c,%esp
mov    0x28(%eax),%ebp
cmp    %ecx,0x24(%eax)
jb     804d008 <calloc@plt+0x3d98>
mov    0x8(%eax),%edx
test   %ebx,%ebx
je     804cfb0 <calloc@plt+0x3d40>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%edx
mov    %ebx,-0x4(%edx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804cfa0 <calloc@plt+0x3d30>
mov    0x8(%esi),%edx
mov    %ebp,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   80491b0 <qsort@plt>
mov    0x8(%esi),%ebp
mov    %edi,%esi
sub    $0x1,%esi
mov    0x0(%ebp),%eax
je     804d05b <calloc@plt+0x3deb>
mov    %eax,%ecx
mov    %ebp,%edx
jmp    804cfe2 <calloc@plt+0x3d72>
nop
mov    (%edx),%ecx
mov    0x4(%edx),%ebx
add    $0x4,%edx
sub    $0x1,%esi
mov    %ebx,0x8(%ecx)
jne    804cfe0 <calloc@plt+0x3d70>
mov    -0x4(%ebp,%edi,4),%edx
movl   $0x0,0x8(%edx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%ecx),%eax
cmp    $0x3fffffff,%eax
mov    %eax,0x24(%esi)
ja     804d038 <calloc@plt+0x3dc8>
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048ff0 <realloc@plt>
test   %eax,%eax
je     804d038 <calloc@plt+0x3dc8>
mov    %eax,0x8(%esi)
mov    %eax,%edx
jmp    804cf98 <calloc@plt+0x3d28>
lea    0x0(%esi),%esi
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    %ebx,%eax
movl   $0x0,0x8(%esi)
movl   $0x0,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,%edx
jmp    804cff4 <calloc@plt+0x3d84>
nop
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
lea    0xa8(%ecx),%eax
mov    %eax,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804d0d6 <calloc@plt+0x3e66>
lea    0xa4(%eax),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8048ec0 <memcpy@plt>
mov    0x14(%edi),%eax
mov    $0x3,%edx
movb   $0x0,0xa4(%ebx,%esi,1)
mov    %esi,0x34(%ebx)
mov    %edi,0x2c(%ebx)
mov    %eax,0x1c(%ebx)
xor    %eax,%eax
movl   $0x0,0x20(%ebx)
movl   $0x0,0xc(%ebx)
mov    %ax,0x3e(%ebx)
mov    %dx,0x40(%ebx)
movl   $0x0,0x10(%ebx)
movl   $0x0,0x14(%ebx)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
test   %eax,%eax
jne    804d0f2 <calloc@plt+0x3e82>
jmp    804d110 <calloc@plt+0x3ea0>
lea    0x0(%esi),%esi
mov    %esi,%ebx
mov    0xc(%ebx),%eax
mov    0x8(%ebx),%esi
test   %eax,%eax
je     804d104 <calloc@plt+0x3e94>
mov    %eax,(%esp)
call   8049240 <closedir@plt>
mov    %ebx,(%esp)
call   8048eb0 <free@plt>
test   %esi,%esi
jne    804d0f0 <calloc@plt+0x3e80>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
jmp    804d134 <calloc@plt+0x3ec4>
mov    %ebx,(%esp)
call   8050350 <fts_children+0x13b0>
test   %eax,%eax
jns    804d148 <calloc@plt+0x3ed8>
mov    %ebx,(%esp)
call   8050300 <fts_children+0x1360>
test   %al,%al
je     804d128 <calloc@plt+0x3eb8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049230 <close@plt>
jmp    804d134 <calloc@plt+0x3ec4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x1c(%eax),%eax
cmp    %edx,%eax
je     804d1ac <calloc@plt+0x3f3c>
test   %cl,%cl
jne    804d190 <calloc@plt+0x3f20>
testb  $0x4,0x2c(%ebx)
jne    804d186 <calloc@plt+0x3f16>
test   %eax,%eax
js     804d186 <calloc@plt+0x3f16>
mov    %eax,(%esp)
call   8049230 <close@plt>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
mov    %eax,0x4(%esp)
lea    0x38(%ebx),%eax
mov    %eax,(%esp)
call   8050310 <fts_children+0x1370>
test   %eax,%eax
jns    804d17e <calloc@plt+0x3f0e>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
cmp    $0xffffff9c,%eax
je     804d170 <calloc@plt+0x3f00>
call   80491f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %esi,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x2c(%eax),%eax
test   $0x4,%al
jne    804d1e8 <calloc@plt+0x3f78>
test   $0x2,%ah
je     804d1f8 <calloc@plt+0x3f88>
mov    $0x1,%ecx
mov    $0xffffff9c,%edx
mov    %ebx,%eax
xor    %esi,%esi
call   804d160 <calloc@plt+0x3ef0>
lea    0x38(%ebx),%eax
call   804d120 <calloc@plt+0x3eb0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8049180 <fchdir@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,%esi
lea    0x38(%ebx),%eax
call   804d120 <calloc@plt+0x3eb0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x2c,%esp
mov    0x30(%ecx),%ebp
lea    0x44(%ecx),%edi
mov    0x40(%esp),%edx
mov    (%esi),%ecx
test   %ebp,%ebp
jne    804d240 <calloc@plt+0x3fd0>
test   $0x1,%cl
jne    804d249 <calloc@plt+0x3fd9>
and    $0x2,%ecx
jne    804d249 <calloc@plt+0x3fd9>
test   %dl,%dl
je     804d2c8 <calloc@plt+0x4058>
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049200 <__xstat64@plt>
test   %eax,%eax
je     804d2f0 <calloc@plt+0x4080>
call   8049100 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0x2,%esi
je     804d3c0 <calloc@plt+0x4150>
mov    %esi,0x20(%ebx)
test   $0x1,%edi
mov    $0x60,%edx
jne    804d3b0 <calloc@plt+0x4140>
test   $0x2,%edi
jne    804d398 <calloc@plt+0x4128>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     804d2b1 <calloc@plt+0x4041>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804d2b9 <calloc@plt+0x4049>
movb   $0x0,(%edi)
mov    $0xa,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%ebx),%edx
movl   $0x100,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x3,(%esp)
call   8048f40 <__fxstatat64@plt>
test   %eax,%eax
jne    804d328 <calloc@plt+0x40b8>
nop
mov    0x54(%ebx),%ecx
and    $0xf000,%ecx
cmp    $0x4000,%ecx
je     804d338 <calloc@plt+0x40c8>
cmp    $0xa000,%ecx
mov    $0xc,%eax
je     804d2be <calloc@plt+0x404e>
xor    %eax,%eax
cmp    $0x8000,%ecx
sete   %al
add    $0x2c,%esp
pop    %ebx
lea    0x3(%eax,%eax,4),%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049100 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
jmp    804d27d <calloc@plt+0x400d>
nop
mov    (%esi),%edx
mov    0x58(%ebx),%eax
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
and    $0x2,%edx
sub    %edx,%eax
cmpb   $0x2e,0xa4(%ebx)
mov    %eax,0x38(%ebx)
mov    $0x1,%eax
jne    804d2be <calloc@plt+0x404e>
cmpb   $0x0,0xa5(%ebx)
je     804d380 <calloc@plt+0x4110>
mov    0xa4(%ebx),%edx
and    $0xffff00,%edx
cmp    $0x2e00,%edx
jne    804d2be <calloc@plt+0x404e>
cmpl   $0x1,0x30(%ebx)
sbb    %eax,%eax
and    $0xfffffffc,%eax
add    $0x5,%eax
jmp    804d2be <calloc@plt+0x404e>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804d29a <calloc@plt+0x402a>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x44(%ebx)
add    $0x1,%edi
mov    $0x5f,%dl
jmp    804d28e <calloc@plt+0x401e>
xchg   %ax,%ax
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__lxstat64@plt>
test   %eax,%eax
jne    804d27a <calloc@plt+0x400a>
movl   $0x0,0x0(%ebp)
mov    $0xd,%al
jmp    804d2be <calloc@plt+0x404e>
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    (%edx),%eax
lea    0x100(%eax,%ecx,1),%ecx
cmp    %ecx,%eax
ja     804d428 <calloc@plt+0x41b8>
mov    (%ebx),%eax
mov    %ecx,(%edx)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <realloc@plt>
test   %eax,%eax
je     804d450 <calloc@plt+0x41e0>
mov    %eax,(%ebx)
mov    $0x1,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
movl   $0x0,(%ebx)
call   8049100 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
xor    %eax,%eax
movl   $0x0,(%ebx)
jmp    804d41e <calloc@plt+0x41ae>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
mov    %edx,%ebx
sub    $0x28,%esp
test   $0x102,%eax
je     804d4b8 <calloc@plt+0x4248>
movl   $0x8048eb0,0x10(%esp)
movl   $0x804ce50,0xc(%esp)
movl   $0x804ce90,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1f,(%esp)
call   804fb10 <fts_children+0xb70>
test   %eax,%eax
mov    %eax,(%ebx)
setne  %al
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x1c,(%esp)
call   8049000 <malloc@plt>
mov    %eax,%edx
mov    %eax,(%ebx)
xor    %eax,%eax
test   %edx,%edx
je     804d4b0 <calloc@plt+0x4240>
mov    %edx,(%esp)
call   804f220 <fts_children+0x280>
add    $0x28,%esp
mov    $0x1,%eax
pop    %ebx
ret
push   %esi
push   %ebx
mov    %edx,%ebx
and    $0x10,%ebx
sub    $0x14,%esp
cmp    $0x1,%ebx
mov    %edx,%ebx
sbb    %esi,%esi
and    $0xfffe0000,%esi
shl    $0x7,%ebx
add    $0x30900,%esi
and    $0x40000,%ebx
or     %esi,%ebx
and    $0x2,%dh
je     804d540 <calloc@plt+0x42d0>
mov    %ebx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8050750 <fts_children+0x17b0>
mov    %eax,%ebx
test   %ebx,%ebx
js     804d533 <calloc@plt+0x42c3>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804f100 <fts_children+0x160>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x4(%esp)
mov    %ecx,(%esp)
call   804f330 <fts_children+0x390>
mov    %eax,%ebx
jmp    804d51f <calloc@plt+0x42af>
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%ebx
mov    %edx,0x18(%esp)
movb   $0x0,0x14(%esp)
test   %ebx,%ebx
je     804d586 <calloc@plt+0x4316>
cmpb   $0x2e,(%ebx)
jne    804d586 <calloc@plt+0x4316>
cmpb   $0x2e,0x1(%ebx)
jne    804d586 <calloc@plt+0x4316>
cmpb   $0x0,0x2(%ebx)
sete   0x14(%esp)
mov    0x2c(%ebp),%edx
mov    %edx,%esi
and    $0x4,%esi
je     804d5b8 <calloc@plt+0x4348>
and    $0x200,%edx
mov    %edx,%esi
je     804d5a8 <calloc@plt+0x4338>
xor    %esi,%esi
test   %edi,%edi
js     804d5a8 <calloc@plt+0x4338>
mov    %edi,(%esp)
call   8049230 <close@plt>
add    $0x8c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edi,%eax
shr    $0x1f,%eax
cmpb   $0x0,0x14(%esp)
jne    804d650 <calloc@plt+0x43e0>
test   %al,%al
jne    804d666 <calloc@plt+0x43f6>
mov    %edi,0x1c(%esp)
test   $0x2,%dl
jne    804d600 <calloc@plt+0x4390>
test   %ebx,%ebx
je     804d6a8 <calloc@plt+0x4438>
cmpb   $0x2e,(%ebx)
jne    804d6a8 <calloc@plt+0x4438>
cmpb   $0x2e,0x1(%ebx)
xchg   %ax,%ax
jne    804d6a8 <calloc@plt+0x4438>
cmpb   $0x0,0x2(%ebx)
jne    804d6a8 <calloc@plt+0x4438>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <__fxstat64@plt>
test   %eax,%eax
je     804d6c8 <calloc@plt+0x4458>
mov    $0xffffffff,%eax
test   %edi,%edi
mov    %eax,%esi
jns    804d5a8 <calloc@plt+0x4338>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebx
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
mov    %edi,(%ebx)
jmp    804d5a8 <calloc@plt+0x4338>
nop
test   %al,%al
je     804d5d0 <calloc@plt+0x4360>
test   $0x2,%dh
jne    804d6f0 <calloc@plt+0x4480>
movb   $0x1,0x14(%esp)
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
call   804d4e0 <calloc@plt+0x4270>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804d763 <calloc@plt+0x44f3>
mov    0x2c(%ebp),%edx
jmp    804d5d4 <calloc@plt+0x4364>
lea    0x0(%esi,%eiz,1),%esi
mov    0x9c(%ecx),%eax
mov    0xa0(%ecx),%edx
xor    0x7c(%esp),%edx
xor    0x78(%esp),%eax
or     %eax,%edx
jne    804d6de <calloc@plt+0x446e>
mov    0x2c(%ebp),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x2,%dh
jne    804d748 <calloc@plt+0x44d8>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049180 <fchdir@plt>
jmp    804d629 <calloc@plt+0x43b9>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
mov    0x44(%ecx),%eax
mov    0x48(%ecx),%edx
xor    0x24(%esp),%edx
xor    0x20(%esp),%eax
or     %eax,%edx
je     804d688 <calloc@plt+0x4418>
call   8049100 <__errno_location@plt>
movl   $0x2,(%eax)
jmp    804d624 <calloc@plt+0x43b4>
xchg   %ax,%ax
lea    0x38(%ebp),%ecx
mov    %ecx,(%esp)
mov    %edx,0x1c(%esp)
mov    %ecx,0x14(%esp)
call   8050300 <fts_children+0x1360>
mov    0x1c(%esp),%edx
mov    0x14(%esp),%ecx
test   %al,%al
jne    804d661 <calloc@plt+0x43f1>
mov    %ecx,(%esp)
call   8050350 <fts_children+0x13b0>
mov    0x2c(%ebp),%edx
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804d661 <calloc@plt+0x43f1>
test   $0x2,%dl
mov    0x1c(%esp),%edi
movb   $0x1,0x14(%esp)
je     804d6a8 <calloc@plt+0x4438>
jmp    804d600 <calloc@plt+0x4390>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x14(%esp),%ecx
mov    %ebp,%eax
mov    0x1c(%esp),%edx
xor    $0x1,%ecx
movzbl %cl,%ecx
call   804d160 <calloc@plt+0x3ef0>
jmp    804d5a8 <calloc@plt+0x4338>
mov    $0xffffffff,%esi
jmp    804d5a8 <calloc@plt+0x4338>
lea    0x0(%esi),%esi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
test   $0x102,%eax
je     804d800 <calloc@plt+0x4590>
movl   $0x14,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804d838 <calloc@plt+0x45c8>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %ebx,0x10(%esi)
mov    %esi,0x4(%esp)
mov    %eax,(%esi)
mov    0x9c(%ebx),%eax
mov    %edx,0x4(%esi)
mov    0xa0(%ebx),%edx
mov    %eax,0x8(%esi)
mov    (%edi),%eax
mov    %edx,0xc(%esi)
mov    %eax,(%esp)
call   8050120 <fts_children+0x1180>
mov    %eax,%edi
mov    $0x1,%eax
cmp    %edi,%esi
je     804d7f2 <calloc@plt+0x4582>
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048eb0 <free@plt>
test   %edi,%edi
je     804d838 <calloc@plt+0x45c8>
mov    0x10(%edi),%edx
mov    $0x2,%ecx
mov    0xc(%esp),%eax
mov    %cx,0x3c(%ebx)
mov    %edx,(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x44(%ecx),%eax
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   804f240 <fts_children+0x2a0>
test   %al,%al
je     804d828 <calloc@plt+0x45b8>
mov    $0x2,%edx
mov    %ebx,(%ebx)
mov    %dx,0x3c(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x10,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804d850 <calloc@plt+0x45e0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x34,%esp
test   $0x102,%eax
jne    804d898 <calloc@plt+0x4628>
mov    0x4(%ecx),%esi
test   %esi,%esi
je     804d88d <calloc@plt+0x461d>
mov    0x30(%esi),%eax
test   %eax,%eax
js     804d88d <calloc@plt+0x461d>
mov    (%edx),%ebx
mov    0x14(%ebx),%eax
or     0x10(%ebx),%eax
je     804d912 <calloc@plt+0x46a2>
mov    (%ebx),%eax
mov    0x4(%ebx),%edx
xor    0xa0(%ecx),%edx
xor    0x9c(%ecx),%eax
or     %eax,%edx
je     804d8e0 <calloc@plt+0x4670>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%ecx),%ebx
lea    0x1c(%esp),%eax
mov    0x48(%ecx),%esi
mov    %ebx,0x1c(%esp)
mov    0xa0(%ecx),%ebx
mov    0x9c(%ecx),%ecx
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %esi,0x20(%esp)
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,(%esp)
call   8050160 <fts_children+0x11c0>
test   %eax,%eax
je     804d912 <calloc@plt+0x46a2>
mov    %eax,(%esp)
call   8048eb0 <free@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
xor    0x48(%ecx),%edx
xor    0x44(%ecx),%eax
or     %eax,%edx
jne    804d88d <calloc@plt+0x461d>
mov    0x44(%esi),%eax
mov    0x48(%esi),%edx
mov    %eax,0x8(%ebx)
mov    0x9c(%esi),%eax
mov    %edx,0xc(%ebx)
mov    0xa0(%esi),%edx
mov    %eax,(%ebx)
mov    %edx,0x4(%ebx)
jmp    804d88d <calloc@plt+0x461d>
call   80491f0 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    (%eax),%eax
mov    %edx,0x38(%esp)
mov    %eax,0x14(%esp)
mov    0xc(%eax),%eax
test   %eax,%eax
setne  0x3e(%esp)
jne    804dea0 <calloc@plt+0x4c30>
mov    0x2c(%ebp),%eax
mov    $0x10900,%ecx
test   $0x10,%al
jne    804ddd8 <calloc@plt+0x4b68>
mov    0x2c(%ebp),%edx
shl    $0x7,%eax
mov    $0xffffff9c,%ebx
mov    0x14(%esp),%edi
and    $0x40000,%eax
and    $0x204,%edx
cmp    $0x200,%edx
mov    0x18(%edi),%esi
je     804e068 <calloc@plt+0x4df8>
or     %ecx,%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
call   8050750 <fts_children+0x17b0>
test   %eax,%eax
mov    %eax,%ebx
js     804e101 <calloc@plt+0x4e91>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f100 <fts_children+0x160>
mov    %ebx,(%esp)
call   8049170 <fdopendir@plt>
test   %eax,%eax
je     804e0ee <calloc@plt+0x4e7e>
mov    0x14(%esp),%edi
cmpw   $0xb,0x3c(%edi)
mov    %eax,0xc(%edi)
je     804e124 <calloc@plt+0x4eb4>
mov    0x2c(%ebp),%eax
test   $0x1,%ah
jne    804df18 <calloc@plt+0x4ca8>
cmpl   $0x1,0x28(%ebp)
sbb    %edi,%edi
xor    %ecx,%ecx
mov    %edi,0x24(%esp)
andl   $0x186a1,0x24(%esp)
subl   $0x1,0x24(%esp)
cmpl   $0x2,0x38(%esp)
je     804da0d <calloc@plt+0x479d>
mov    0x2c(%ebp),%edx
mov    $0xffffffff,%ecx
and    $0x18,%edx
cmp    $0x18,%edx
je     804dee8 <calloc@plt+0x4c78>
cmpb   $0x0,0x3e(%esp)
movb   $0x1,0x3f(%esp)
jne    804da48 <calloc@plt+0x47d8>
test   %ecx,%ecx
setne  %cl
cmpl   $0x3,0x38(%esp)
mov    %ecx,%esi
sete   %cl
mov    %ecx,%edi
mov    %esi,%ecx
test   %cl,%cl
jne    804de68 <calloc@plt+0x4bf8>
mov    %edi,%ecx
test   %cl,%cl
movb   $0x0,0x3f(%esp)
jne    804de68 <calloc@plt+0x4bf8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
movl   $0x0,0x2c(%esp)
mov    0x28(%edi),%edx
mov    0x1c(%edi),%ebx
lea    -0x1(%edx),%ecx
cmpb   $0x2f,-0x1(%ebx,%edx,1)
cmove  %ecx,%edx
test   $0x4,%al
jne    804ddc0 <calloc@plt+0x4b50>
mov    0x20(%ebp),%edi
lea    0x1(%edx),%eax
mov    %eax,0x1c(%esp)
movb   $0x0,0x3d(%esp)
movl   $0x0,0x10(%esp)
mov    %edi,0x18(%esp)
sub    %eax,0x18(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x20(%esp)
mov    0x30(%eax),%eax
add    $0x1,%eax
mov    %eax,0x28(%esp)
lea    0x2c(%ebp),%eax
mov    %eax,0x34(%esp)
lea    0x2(%edx),%eax
mov    %eax,0x30(%esp)
jmp    804db8a <calloc@plt+0x491a>
lea    0x0(%esi),%esi
add    0x1c(%esp),%edx
jb     804dc4e <calloc@plt+0x49de>
mov    0x28(%esp),%eax
testb  $0x4,0x2c(%ebp)
mov    %eax,0x30(%ebx)
mov    0x0(%ebp),%eax
mov    %edx,0x28(%ebx)
mov    0x4(%esi),%edx
mov    %eax,0x4(%ebx)
mov    (%esi),%eax
mov    %edx,0xa0(%ebx)
mov    %eax,0x9c(%ebx)
jne    804dca0 <calloc@plt+0x4a30>
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804db0f <calloc@plt+0x489f>
testb  $0x4,0x2d(%ebp)
je     804dcd0 <calloc@plt+0x4a60>
mov    0x2c(%ebp),%eax
xor    %ecx,%ecx
and    $0x18,%eax
cmp    $0x18,%eax
je     804ddb0 <calloc@plt+0x4b40>
mov    $0xb,%edi
xor    %eax,%eax
mov    %di,0x3c(%ebx)
movzbl 0x12(%esi),%edx
sub    $0x1,%edx
cmp    $0xb,%edx
ja     804db3e <calloc@plt+0x48ce>
mov    0x8051e60(,%edx,4),%eax
xor    %edx,%edx
test   %ecx,%ecx
mov    %eax,0x54(%ebx)
mov    $0x1,%eax
jne    804db53 <calloc@plt+0x48e3>
mov    $0x2,%eax
xor    %edx,%edx
mov    0x20(%esp),%esi
mov    %eax,0x70(%ebx)
mov    %edx,0x74(%ebx)
movl   $0x0,0x8(%ebx)
test   %esi,%esi
je     804dcfc <calloc@plt+0x4a8c>
mov    0x10(%esp),%eax
addl   $0x1,0xc(%esp)
mov    %ebx,0x8(%eax)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
jbe    804dd18 <calloc@plt+0x4aa8>
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     804dd18 <calloc@plt+0x4aa8>
mov    %eax,(%esp)
call   80491a0 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e0c0 <calloc@plt+0x4e50>
testb  $0x20,0x2c(%ebp)
jne    804dbbb <calloc@plt+0x494b>
cmpb   $0x2e,0x13(%eax)
je     804dd90 <calloc@plt+0x4b20>
lea    0x13(%esi),%edi
mov    %edi,(%esp)
call   8049090 <strlen@plt>
mov    %edi,%edx
mov    %eax,%ecx
mov    %ebp,%eax
call   804d060 <calloc@plt+0x3df0>
test   %eax,%eax
mov    %eax,%ebx
je     804e070 <calloc@plt+0x4e00>
mov    %edi,(%esp)
call   8049090 <strlen@plt>
cmp    %eax,0x18(%esp)
mov    %eax,%edx
ja     804dac0 <calloc@plt+0x4850>
mov    0x14(%ebp),%ecx
lea    0x20(%ebp),%edx
mov    %ecx,0x18(%esp)
mov    0x30(%esp),%ecx
add    %eax,%ecx
lea    0x14(%ebp),%eax
call   804d3f0 <calloc@plt+0x4180>
test   %al,%al
je     804e070 <calloc@plt+0x4e00>
mov    0x14(%ebp),%eax
cmp    0x18(%esp),%eax
je     804dc2b <calloc@plt+0x49bb>
testb  $0x4,0x2c(%ebp)
movb   $0x1,0x3d(%esp)
je     804dc2b <calloc@plt+0x49bb>
add    0x1c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x20(%ebp),%eax
mov    %edi,(%esp)
mov    %eax,0x18(%esp)
mov    0x1c(%esp),%eax
sub    %eax,0x18(%esp)
call   8049090 <strlen@plt>
mov    %eax,%edx
add    0x1c(%esp),%edx
jae    804daca <calloc@plt+0x485a>
mov    %ebx,(%esp)
call   8048eb0 <free@plt>
mov    0x20(%esp),%eax
call   804d0e0 <calloc@plt+0x3e70>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049240 <closedir@plt>
mov    $0x7,%edx
movl   $0x0,0xc(%edi)
mov    %dx,0x3c(%edi)
orl    $0x4000,0x2c(%ebp)
call   8049100 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x34(%ebx),%eax
add    $0x1,%eax
mov    %eax,0x8(%esp)
lea    0xa4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <memmove@plt>
jmp    804dafe <calloc@plt+0x488e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x34(%esp),%edx
movl   $0x0,(%esp)
call   804d220 <calloc@plt+0x3fb0>
mov    0x20(%esp),%esi
movl   $0x0,0x8(%ebx)
test   %esi,%esi
mov    %ax,0x3c(%ebx)
jne    804db6c <calloc@plt+0x48fc>
addl   $0x1,0xc(%esp)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
mov    %ebx,0x20(%esp)
ja     804db86 <calloc@plt+0x4916>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x3d(%esp)
jne    804df68 <calloc@plt+0x4cf8>
testb  $0x4,0x2c(%ebp)
je     804dd46 <calloc@plt+0x4ad6>
mov    0x1c(%esp),%eax
cmp    %eax,0x20(%ebp)
je     804dd3a <calloc@plt+0x4aca>
mov    0xc(%esp),%eax
test   %eax,%eax
jne    804dd3f <calloc@plt+0x4acf>
subl   $0x1,0x2c(%esp)
mov    0x2c(%esp),%eax
movb   $0x0,(%eax)
cmpb   $0x0,0x3f(%esp)
jne    804de00 <calloc@plt+0x4b90>
mov    0xc(%esp),%ebx
test   %ebx,%ebx
je     804e16c <calloc@plt+0x4efc>
cmpl   $0x2710,0xc(%esp)
jbe    804dec0 <calloc@plt+0x4c50>
mov    0x28(%ebp),%edx
test   %edx,%edx
je     804e187 <calloc@plt+0x4f17>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
call   804cf80 <calloc@plt+0x3d10>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x14(%eax)
je     804dda1 <calloc@plt+0x4b31>
cmpw   $0x2e,0x14(%eax)
jne    804dbbb <calloc@plt+0x494b>
mov    0x10(%esp),%ebx
jmp    804db86 <calloc@plt+0x4916>
lea    0x0(%esi),%esi
xor    %ecx,%ecx
testb  $0xfb,0x12(%esi)
setne  %cl
jmp    804db20 <calloc@plt+0x48b0>
xchg   %ax,%ax
mov    0x14(%ebp),%eax
add    %edx,%eax
lea    0x1(%eax),%edi
mov    %edi,0x2c(%esp)
movb   $0x2f,(%eax)
jmp    804da6d <calloc@plt+0x47fd>
lea    0x0(%esi,%eiz,1),%esi
test   $0x1,%al
mov    $0x30900,%ecx
je     804d956 <calloc@plt+0x46e6>
mov    0x14(%esp),%edi
cmpl   $0x1,0x30(%edi)
sbb    %ecx,%ecx
and    $0xfffe0000,%ecx
add    $0x30900,%ecx
jmp    804d956 <calloc@plt+0x46e6>
cmpb   $0x0,0x3e(%esp)
jne    804dd51 <calloc@plt+0x4ae1>
mov    0xc(%esp),%eax
test   %eax,%eax
je     804de1e <calloc@plt+0x4bae>
cmpl   $0x1,0x38(%esp)
jne    804dd5d <calloc@plt+0x4aed>
mov    0x14(%esp),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jne    804e148 <calloc@plt+0x4ed8>
mov    %ebp,%eax
call   804d1c0 <calloc@plt+0x3f50>
test   %eax,%eax
setne  %al
test   %al,%al
je     804dd51 <calloc@plt+0x4ae1>
mov    0x14(%esp),%eax
mov    $0x7,%esi
mov    %si,0x3c(%eax)
mov    0x20(%esp),%eax
orl    $0x4000,0x2c(%ebp)
call   804d0e0 <calloc@plt+0x3e70>
xor    %eax,%eax
jmp    804ded6 <calloc@plt+0x4c66>
lea    0x0(%esi),%esi
test   $0x2,%ah
jne    804dfd7 <calloc@plt+0x4d67>
mov    0x14(%esp),%edx
mov    %ebx,%ecx
mov    %ebp,%eax
movl   $0x0,(%esp)
call   804d550 <calloc@plt+0x42e0>
test   %eax,%eax
jne    804e000 <calloc@plt+0x4d90>
mov    0x2c(%ebp),%eax
movb   $0x1,0x3f(%esp)
jmp    804da48 <calloc@plt+0x47d8>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048e90 <dirfd@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804e1e8 <calloc@plt+0x4f78>
mov    0x2c(%ebp),%eax
jmp    804d9d9 <calloc@plt+0x4769>
lea    0x0(%esi),%esi
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804ded2 <calloc@plt+0x4c62>
cmpl   $0x1,0xc(%esp)
ja     804dd76 <calloc@plt+0x4b06>
mov    0x20(%esp),%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%esi
mov    %eax,%edx
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
mov    0x58(%esi),%ecx
and    $0x2,%edx
movb   $0x1,0x3f(%esp)
sub    %edx,%ecx
cmpb   $0x0,0x3e(%esp)
jne    804da48 <calloc@plt+0x47d8>
jmp    804da19 <calloc@plt+0x47a9>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
lea    0x34(%ebp),%esi
mov    %esi,%edx
mov    %edi,%ecx
call   804d850 <calloc@plt+0x45e0>
mov    0x1c(%ebp),%eax
lea    0x2c(%ebp),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804d220 <calloc@plt+0x3fb0>
mov    0x2c(%ebp),%eax
mov    %edi,%ecx
mov    %esi,%edx
call   804d770 <calloc@plt+0x4500>
test   %al,%al
jne    804deb2 <calloc@plt+0x4c42>
call   8049100 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804ded6 <calloc@plt+0x4c66>
lea    0x0(%esi),%esi
mov    0x4(%ebp),%eax
mov    0x14(%ebp),%edx
test   %eax,%eax
je     804df97 <calloc@plt+0x4d27>
lea    0x0(%esi),%esi
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804df8d <calloc@plt+0x4d1d>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    %edx,0x1c(%eax)
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804df78 <calloc@plt+0x4d08>
mov    0x20(%esp),%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%eax),%ecx
test   %ecx,%ecx
js     804dd23 <calloc@plt+0x4ab3>
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804dfc0 <calloc@plt+0x4d50>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    0x8(%eax),%ecx
mov    %edx,0x1c(%eax)
test   %ecx,%ecx
je     804dfd0 <calloc@plt+0x4d60>
mov    %ecx,%eax
jmp    804dfa0 <calloc@plt+0x4d30>
xchg   %ax,%ax
mov    0x4(%eax),%ecx
mov    %ecx,%eax
jmp    804dfa0 <calloc@plt+0x4d30>
mov    %ebx,(%esp)
call   8050790 <fts_children+0x17f0>
test   %eax,%eax
mov    %eax,%ebx
js     804e000 <calloc@plt+0x4d90>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f100 <fts_children+0x160>
jmp    804de71 <calloc@plt+0x4c01>
lea    0x0(%esi),%esi
mov    %esi,%eax
test   %al,%al
je     804e00c <calloc@plt+0x4d9c>
mov    %edi,%eax
test   %al,%al
jne    804e053 <calloc@plt+0x4de3>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
orw    $0x1,0x3e(%edi)
mov    %eax,(%esp)
call   8049240 <closedir@plt>
mov    0x2c(%ebp),%eax
movl   $0x0,0xc(%edi)
test   $0x2,%ah
je     804e03e <calloc@plt+0x4dce>
test   %ebx,%ebx
js     804e03e <calloc@plt+0x4dce>
mov    %ebx,(%esp)
call   8049230 <close@plt>
mov    0x2c(%ebp),%eax
mov    0x14(%esp),%edi
movb   $0x0,0x3f(%esp)
movl   $0x0,0xc(%edi)
jmp    804da48 <calloc@plt+0x47d8>
call   8049100 <__errno_location@plt>
mov    0x14(%esp),%edi
mov    (%eax),%eax
mov    %eax,0x20(%edi)
jmp    804e00c <calloc@plt+0x4d9c>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%ebx
jmp    804d97f <calloc@plt+0x470f>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048eb0 <free@plt>
mov    0x20(%esp),%eax
call   804d0e0 <calloc@plt+0x3e70>
mov    0x14(%esp),%ebx
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8049240 <closedir@plt>
mov    $0x7,%ecx
xor    %eax,%eax
movl   $0x0,0xc(%ebx)
mov    %cx,0x3c(%ebx)
orl    $0x4000,0x2c(%ebp)
mov    %edi,(%esi)
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
test   %eax,%eax
je     804dd18 <calloc@plt+0x4aa8>
mov    %eax,(%esp)
call   8049240 <closedir@plt>
cmpb   $0x0,0x3d(%esp)
movl   $0x0,0xc(%edi)
je     804dd23 <calloc@plt+0x4ab3>
jmp    804df68 <calloc@plt+0x4cf8>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049230 <close@plt>
mov    %edi,(%esi)
mov    0x14(%esp),%eax
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%eax)
je     804e209 <calloc@plt+0x4f99>
xor    %eax,%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x14(%esp),%esi
lea    0x2c(%ebp),%edx
mov    0x1c(%ebp),%eax
movl   $0x0,(%esp)
mov    %esi,%ecx
call   804d220 <calloc@plt+0x3fb0>
mov    %ax,0x3c(%esi)
mov    0x2c(%ebp),%eax
jmp    804d9d9 <calloc@plt+0x4769>
mov    0x14(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x4(%eax),%edx
mov    %ebp,%eax
movl   $0x8051e52,(%esp)
call   804d550 <calloc@plt+0x42e0>
test   %eax,%eax
setne  %al
jmp    804de39 <calloc@plt+0x4bc9>
cmpl   $0x3,0x38(%esp)
je     804e227 <calloc@plt+0x4fb7>
mov    0x20(%esp),%eax
call   804d0e0 <calloc@plt+0x3e70>
xor    %eax,%eax
jmp    804ded6 <calloc@plt+0x4c66>
testb  $0x2,0x2d(%ebp)
je     804ded2 <calloc@plt+0x4c62>
lea    0x4c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   8049070 <fstatfs64@plt>
test   %eax,%eax
jne    804e1c2 <calloc@plt+0x4f52>
mov    0x4c(%esp),%eax
cmp    $0x6969,%eax
je     804dec0 <calloc@plt+0x4c50>
cmp    $0x1021994,%eax
je     804dec0 <calloc@plt+0x4c50>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
movl   $0x804cf10,0x28(%ebp)
call   804cf80 <calloc@plt+0x3d10>
movl   $0x0,0x28(%ebp)
mov    %eax,0x20(%esp)
jmp    804ded2 <calloc@plt+0x4c62>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049240 <closedir@plt>
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%edi)
jne    804e117 <calloc@plt+0x4ea7>
mov    0x14(%esp),%edi
mov    $0x4,%ebx
mov    %bx,0x3c(%edi)
call   8049100 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%edi)
xor    %eax,%eax
jmp    804e119 <calloc@plt+0x4ea9>
mov    0x14(%esp),%eax
mov    $0x6,%ecx
mov    %cx,0x3c(%eax)
jmp    804e177 <calloc@plt+0x4f07>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebx
mov    %ebx,%esi
and    $0xffffe000,%esi
jne    804e528 <fts_open+0x2e8>
mov    %ebx,%eax
and    $0x204,%eax
cmp    $0x204,%eax
je     804e528 <fts_open+0x2e8>
test   $0x12,%bl
je     804e528 <fts_open+0x2e8>
movl   $0x58,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804e5ad <fts_open+0x36d>
mov    %eax,%edi
mov    $0x16,%ecx
mov    %esi,%eax
test   $0x2,%bl
rep stos %eax,%es:(%edi)
mov    0x48(%esp),%eax
mov    %eax,0x28(%ebp)
jne    804e4e8 <fts_open+0x2a8>
mov    %ebx,0x2c(%ebp)
mov    0x40(%esp),%eax
movl   $0xffffff9c,0x1c(%ebp)
mov    (%eax),%eax
test   %eax,%eax
je     804e5a3 <fts_open+0x363>
mov    0x40(%esp),%edi
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8049090 <strlen@plt>
cmp    %eax,%esi
cmovb  %eax,%esi
add    $0x4,%edi
mov    (%edi),%eax
test   %eax,%eax
jne    804e2c8 <fts_open+0x88>
lea    0x1(%esi),%ecx
mov    $0x1000,%ax
cmp    $0x1000,%ecx
cmovb  %eax,%ecx
lea    0x20(%ebp),%edx
lea    0x14(%ebp),%eax
call   804d3f0 <calloc@plt+0x4180>
test   %al,%al
mov    %al,0x17(%esp)
je     804e516 <fts_open+0x2d6>
mov    0x40(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
je     804e588 <fts_open+0x348>
xor    %ecx,%ecx
mov    $0x8051b9d,%edx
mov    %ebp,%eax
call   804d060 <calloc@plt+0x3df0>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     804e50b <fts_open+0x2cb>
movl   $0xffffffff,0x30(%eax)
mov    0x40(%esp),%eax
mov    (%eax),%edx
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804e34f <fts_open+0x10f>
mov    0x2c(%ebp),%eax
shr    $0xa,%eax
and    $0x1,%eax
mov    %al,0x17(%esp)
test   %edx,%edx
je     804e5b4 <fts_open+0x374>
and    $0x1000,%ebx
xor    %esi,%esi
lea    0x2c(%ebp),%eax
xor    %edi,%edi
mov    %ebx,0x10(%esp)
mov    %edx,%ebx
movl   $0x0,0x1c(%esp)
mov    %eax,0x18(%esp)
jmp    804e3bd <fts_open+0x17d>
cmpb   $0x0,0x17(%esp)
je     804e414 <fts_open+0x1d4>
mov    $0xb,%eax
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
movl   $0x2,0x70(%ebx)
movl   $0x0,0x74(%ebx)
test   %eax,%eax
je     804e439 <fts_open+0x1f9>
mov    %edi,0x8(%ebx)
mov    %ebx,%edi
mov    0x40(%esp),%eax
add    $0x1,%esi
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
je     804e468 <fts_open+0x228>
mov    %ebx,(%esp)
call   8049090 <strlen@plt>
mov    0x10(%esp),%edx
test   %edx,%edx
jne    804e3e0 <fts_open+0x1a0>
cmp    $0x2,%eax
jbe    804e3e0 <fts_open+0x1a0>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
je     804e4d0 <fts_open+0x290>
lea    0x0(%esi),%esi
mov    %eax,%ecx
mov    %ebx,%edx
mov    %ebp,%eax
call   804d060 <calloc@plt+0x3df0>
test   %eax,%eax
mov    %eax,%ebx
je     804e4f8 <fts_open+0x2b8>
movl   $0x0,0x30(%eax)
mov    0xc(%esp),%eax
test   %edi,%edi
mov    %eax,0x4(%ebx)
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
jne    804e378 <fts_open+0x138>
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x18(%esp),%edx
movl   $0x0,(%esp)
call   804d220 <calloc@plt+0x3fb0>
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804e3a6 <fts_open+0x166>
test   %edi,%edi
movl   $0x0,0x8(%ebx)
je     804e598 <fts_open+0x358>
mov    0x1c(%esp),%eax
add    $0x1,%esi
mov    %ebx,0x1c(%esp)
mov    %ebx,0x8(%eax)
mov    0x40(%esp),%eax
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
jne    804e3bd <fts_open+0x17d>
lea    0x0(%esi),%esi
cmp    $0x1,%esi
ja     804e568 <fts_open+0x328>
xor    %ecx,%ecx
mov    $0x8051b9d,%edx
mov    %ebp,%eax
call   804d060 <calloc@plt+0x3df0>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     804e4f8 <fts_open+0x2b8>
mov    $0x9,%edx
mov    %dx,0x3c(%eax)
lea    0x34(%ebp),%edx
mov    %edi,0x8(%eax)
mov    0x2c(%ebp),%eax
call   804d470 <calloc@plt+0x4200>
test   %al,%al
je     804e4f8 <fts_open+0x2b8>
mov    0x2c(%ebp),%edx
test   $0x204,%edx
je     804e540 <fts_open+0x300>
lea    0x38(%ebp),%eax
mov    %eax,(%esp)
movl   $0xffffffff,0x4(%esp)
call   80502d0 <fts_children+0x1330>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x2f,-0x2(%ebx,%eax,1)
jne    804e3e0 <fts_open+0x1a0>
sub    $0x1,%eax
cmp    $0x1,%eax
jne    804e4d0 <fts_open+0x290>
jmp    804e3e0 <fts_open+0x1a0>
mov    %ebx,%eax
and    $0xfd,%ah
or     $0x4,%eax
mov    %eax,0x2c(%ebp)
jmp    804e2a8 <fts_open+0x68>
mov    %edi,%eax
call   804d0e0 <calloc@plt+0x3e70>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x14(%ebp),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    %ebp,(%esp)
call   8048eb0 <free@plt>
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049100 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebp),%eax
mov    $0x8051e53,%ecx
call   804d4e0 <calloc@plt+0x4270>
test   %eax,%eax
mov    %eax,0x18(%ebp)
jns    804e4b0 <fts_open+0x270>
orl    $0x4,0x2c(%ebp)
jmp    804e4b0 <fts_open+0x270>
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804e471 <fts_open+0x231>
mov    %edi,%edx
mov    %esi,%ecx
mov    %ebp,%eax
call   804cf80 <calloc@plt+0x3d10>
mov    %eax,%edi
jmp    804e471 <fts_open+0x231>
xchg   %ax,%ax
xor    %edx,%edx
movl   $0x0,0xc(%esp)
jmp    804e33a <fts_open+0xfa>
nop
mov    %ebx,%edi
mov    %ebx,0x1c(%esp)
jmp    804e3ab <fts_open+0x16b>
mov    $0x1000,%ecx
jmp    804e2ee <fts_open+0xae>
xor    %eax,%eax
jmp    804e520 <fts_open+0x2e0>
xor    %edi,%edi
jmp    804e471 <fts_open+0x231>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%eax
test   %eax,%eax
je     804e618 <fts_close+0x58>
mov    0x30(%eax),%edx
test   %edx,%edx
jns    804e5f1 <fts_close+0x31>
jmp    804e6fc <fts_close+0x13c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
js     804e610 <fts_close+0x50>
mov    %ebx,%eax
mov    0x8(%eax),%ebx
test   %ebx,%ebx
jne    804e5e0 <fts_close+0x20>
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
jns    804e5ef <fts_close+0x2f>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8048eb0 <free@plt>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804e624 <fts_close+0x64>
call   804d0e0 <calloc@plt+0x3e70>
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x2c(%esi),%eax
test   $0x2,%ah
je     804e6b0 <fts_close+0xf0>
mov    0x1c(%esi),%eax
test   %eax,%eax
js     804e660 <fts_close+0xa0>
mov    %eax,(%esp)
call   8049230 <close@plt>
test   %eax,%eax
jne    804e6f0 <fts_close+0x130>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
lea    0x38(%esi),%eax
call   804d120 <calloc@plt+0x3eb0>
mov    0x30(%esi),%eax
test   %eax,%eax
je     804e679 <fts_close+0xb9>
mov    %eax,(%esp)
call   804fce0 <fts_children+0xd40>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804e6e0 <fts_close+0x120>
test   %eax,%eax
je     804e691 <fts_close+0xd1>
mov    %eax,(%esp)
call   804fce0 <fts_children+0xd40>
mov    %esi,(%esp)
call   8048eb0 <free@plt>
xor    %eax,%eax
test   %ebx,%ebx
jne    804e735 <fts_close+0x175>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   $0x4,%al
jne    804e660 <fts_close+0xa0>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049180 <fchdir@plt>
test   %eax,%eax
jne    804e705 <fts_close+0x145>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
test   %eax,%eax
je     804e660 <fts_close+0xa0>
call   8049100 <__errno_location@plt>
mov    %eax,%edi
mov    (%edi),%ebx
jmp    804e662 <fts_close+0xa2>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048eb0 <free@plt>
jmp    804e691 <fts_close+0xd1>
lea    0x0(%esi),%esi
call   8049100 <__errno_location@plt>
mov    (%eax),%ebx
jmp    804e662 <fts_close+0xa2>
mov    %eax,%ebx
xchg   %ax,%ax
jmp    804e610 <fts_close+0x50>
call   8049100 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%edi
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
test   %eax,%eax
je     804e662 <fts_close+0xa2>
test   %ebx,%ebx
jne    804e662 <fts_close+0xa2>
mov    (%edi),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
jmp    804e662 <fts_close+0xa2>
call   8049100 <__errno_location@plt>
mov    %ebx,(%eax)
mov    $0xffffffff,%eax
jmp    804e6a3 <fts_close+0xe3>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%esi
mov    (%esi),%edi
test   %edi,%edi
je     804e858 <fts_read+0x108>
mov    0x2c(%esi),%edx
test   $0x40,%dh
jne    804e858 <fts_read+0x108>
movzwl 0x40(%edi),%eax
mov    $0x3,%ecx
mov    %cx,0x40(%edi)
cmp    $0x1,%ax
je     804eb00 <fts_read+0x3b0>
cmp    $0x2,%ax
je     804e868 <fts_read+0x118>
cmpw   $0x1,0x3c(%edi)
jne    804e7cd <fts_read+0x7d>
nop
jmp    804e8e5 <fts_read+0x195>
lea    0x0(%esi),%esi
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8048eb0 <free@plt>
mov    0x30(%ebx),%edx
test   %edx,%edx
je     804e920 <fts_read+0x1d0>
movzwl 0x40(%ebx),%eax
cmp    $0x4,%ax
jne    804ea28 <fts_read+0x2d8>
mov    %ebx,%edi
mov    0x8(%edi),%ebx
test   %ebx,%ebx
jne    804e7a8 <fts_read+0x58>
mov    0x4(%edi),%ebx
mov    0xc(%ebx),%ecx
test   %ecx,%ecx
jne    804ecd0 <fts_read+0x580>
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8048eb0 <free@plt>
cmpl   $0xffffffff,0x30(%ebx)
je     804ebcd <fts_read+0x47d>
cmpw   $0xb,0x3c(%ebx)
je     804eefd <fts_read+0x7ad>
mov    0x14(%esi),%edx
mov    0x28(%ebx),%eax
movb   $0x0,(%edx,%eax,1)
mov    0x30(%ebx),%ebp
test   %ebp,%ebp
je     804eb5d <fts_read+0x40d>
movzwl 0x3e(%ebx),%eax
test   $0x2,%al
je     804eb1f <fts_read+0x3cf>
mov    0x2c(%esi),%eax
test   $0x4,%al
je     804eb6d <fts_read+0x41d>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
mov    0x2c(%esi),%eax
mov    0x20(%ebx),%edi
test   %edi,%edi
je     804eae0 <fts_read+0x390>
mov    $0x7,%edx
mov    %dx,0x3c(%ebx)
test   $0x40,%ah
je     804e90e <fts_read+0x1be>
xor    %eax,%eax
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movzwl 0x3c(%edi),%eax
lea    -0xc(%eax),%ecx
cmp    $0x1,%cx
jbe    804eb92 <fts_read+0x442>
sub    $0x1,%ax
jne    804e7cd <fts_read+0x7d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x40,%dl
je     804ea78 <fts_read+0x328>
mov    0x44(%edi),%eax
mov    0x48(%edi),%ecx
xor    0x10(%esi),%ecx
xor    0xc(%esi),%eax
or     %eax,%ecx
je     804ea78 <fts_read+0x328>
testb  $0x2,0x3e(%edi)
jne    804ecc0 <fts_read+0x570>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804e8c2 <fts_read+0x172>
call   804d0e0 <calloc@plt+0x3e70>
movl   $0x0,0x4(%esi)
mov    $0x6,%eax
mov    %edi,%ecx
mov    %ax,0x3c(%edi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
call   804d850 <calloc@plt+0x45e0>
add    $0x8c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x4,%ax
jne    804e888 <fts_read+0x138>
jmp    804e8a5 <fts_read+0x155>
lea    0x0(%esi),%esi
mov    0x70(%ebx),%edx
mov    0x74(%ebx),%eax
mov    %edx,%ecx
xor    $0x2,%ecx
or     %eax,%ecx
je     804ec4b <fts_read+0x4fb>
xor    $0x1,%edx
or     %eax,%edx
jne    804eefd <fts_read+0x7ad>
add    $0x8c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
call   804d1c0 <calloc@plt+0x3f50>
test   %eax,%eax
jne    804ec2d <fts_read+0x4dd>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804ebf0 <fts_read+0x4a0>
test   %eax,%eax
je     804e94b <fts_read+0x1fb>
mov    %eax,(%esp)
call   804fce0 <fts_children+0xd40>
mov    0x34(%ebx),%eax
lea    0xa4(%ebx),%edi
mov    %eax,0x28(%ebx)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8048ea0 <memmove@plt>
movl   $0x2f,0x4(%esp)
mov    %edi,(%esp)
call   8049160 <strrchr@plt>
test   %eax,%eax
je     804e9b4 <fts_read+0x264>
cmp    %eax,%edi
je     804ec39 <fts_read+0x4e9>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x18(%esp)
call   8049090 <strlen@plt>
mov    0x18(%esp),%edx
mov    %edi,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,%ebp
lea    0x1(%eax),%eax
mov    %eax,0x8(%esp)
call   8048ea0 <memmove@plt>
mov    %ebp,0x34(%ebx)
mov    0x14(%esi),%eax
lea    0x34(%esi),%edx
mov    %eax,0x1c(%ebx)
mov    %eax,0x18(%ebx)
mov    0x2c(%esi),%eax
call   804d470 <calloc@plt+0x4200>
movzwl 0x3c(%ebx),%ecx
cmp    $0xb,%cx
mov    %ebx,(%esi)
je     804e8f0 <fts_read+0x1a0>
cmp    $0x1,%cx
mov    %ebx,%eax
jne    804e85a <fts_read+0x10a>
mov    0x30(%ebx),%eax
test   %eax,%eax
jne    804e9f7 <fts_read+0x2a7>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %eax,0xc(%esi)
mov    %edx,0x10(%esi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804d770 <calloc@plt+0x4500>
mov    %eax,%edx
mov    %ebx,%eax
test   %dl,%dl
jne    804e85a <fts_read+0x10a>
call   8049100 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804e85a <fts_read+0x10a>
lea    0x0(%esi),%esi
cmp    $0x2,%ax
je     804ecfb <fts_read+0x5ab>
mov    0x4(%ebx),%ecx
mov    0x28(%ecx),%edx
mov    0x1c(%ecx),%ecx
lea    -0x1(%edx),%eax
cmpb   $0x2f,-0x1(%ecx,%edx,1)
cmovne %edx,%eax
add    0x14(%esi),%eax
movb   $0x2f,(%eax)
mov    0x34(%ebx),%ecx
add    $0x1,%eax
mov    %eax,(%esp)
lea    0x1(%ecx),%edx
mov    %edx,0x8(%esp)
lea    0xa4(%ebx),%edx
mov    %edx,0x4(%esp)
call   8048ea0 <memmove@plt>
movzwl 0x3c(%ebx),%ecx
jmp    804e9cc <fts_read+0x27c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
test   %eax,%eax
je     804ec0f <fts_read+0x4bf>
test   $0x20,%dh
jne    804ebfd <fts_read+0x4ad>
mov    0x18(%edi),%eax
mov    $0xffffffff,%ecx
mov    %edi,%edx
mov    %eax,(%esp)
mov    %esi,%eax
call   804d550 <calloc@plt+0x42e0>
test   %eax,%eax
je     804eb8a <fts_read+0x43a>
call   8049100 <__errno_location@plt>
mov    0x4(%esi),%edx
mov    %edx,%ebx
mov    (%eax),%eax
orw    $0x1,0x3e(%edi)
test   %edx,%edx
mov    %eax,0x20(%edi)
je     804ead2 <fts_read+0x382>
mov    0x4(%ebx),%eax
mov    0x18(%eax),%eax
mov    %eax,0x18(%ebx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804eac0 <fts_read+0x370>
mov    %edx,%ebx
movl   $0x0,0x4(%esi)
jmp    804ea32 <fts_read+0x2e2>
xchg   %ax,%ax
mov    $0x6,%ecx
mov    %cx,0x3c(%ebx)
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804d850 <calloc@plt+0x45e0>
mov    0x2c(%esi),%eax
jmp    804e84f <fts_read+0xff>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804d220 <calloc@plt+0x3fb0>
mov    %ax,0x3c(%edi)
mov    %edi,%eax
jmp    804e85a <fts_read+0x10a>
test   $0x1,%al
jne    804e838 <fts_read+0xe8>
mov    0x4(%ebx),%edx
mov    $0xffffffff,%ecx
mov    %esi,%eax
movl   $0x8051e52,(%esp)
call   804d550 <calloc@plt+0x42e0>
test   %eax,%eax
je     804e838 <fts_read+0xe8>
call   8049100 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    0x2c(%esi),%eax
or     $0x40,%ah
mov    %eax,0x2c(%esi)
jmp    804e83b <fts_read+0xeb>
mov    %esi,%eax
call   804d1c0 <calloc@plt+0x3f50>
test   %eax,%eax
jne    804eb45 <fts_read+0x3f5>
jmp    804e838 <fts_read+0xe8>
test   $0x2,%ah
je     804ed27 <fts_read+0x5d7>
mov    0x24(%ebx),%edx
mov    $0x1,%ecx
mov    %esi,%eax
call   804d160 <calloc@plt+0x3ef0>
jmp    804e82d <fts_read+0xdd>
mov    0x4(%esi),%ebx
jmp    804ead2 <fts_read+0x382>
mov    0x1c(%esi),%eax
mov    %edi,%ecx
mov    %edi,%ebx
lea    0x2c(%esi),%edx
movl   $0x1,(%esp)
call   804d220 <calloc@plt+0x3fb0>
cmp    $0x1,%ax
mov    %eax,%ecx
mov    %ax,0x3c(%edi)
jne    804e9cc <fts_read+0x27c>
mov    0x2c(%esi),%edx
test   $0x4,%dl
je     804ed99 <fts_read+0x649>
mov    %edi,(%esi)
mov    %edi,%ebx
jmp    804e9d8 <fts_read+0x288>
mov    %ebx,(%esp)
call   8048eb0 <free@plt>
call   8049100 <__errno_location@plt>
movl   $0x0,(%eax)
xor    %eax,%eax
movl   $0x0,(%esi)
jmp    804e85a <fts_read+0x10a>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048eb0 <free@plt>
jmp    804e94b <fts_read+0x1fb>
and    $0xdf,%dh
mov    %edx,0x2c(%esi)
call   804d0e0 <calloc@plt+0x3e70>
movl   $0x0,0x4(%esi)
mov    $0x3,%edx
mov    %esi,%eax
call   804d920 <calloc@plt+0x46b0>
test   %eax,%eax
mov    %eax,0x4(%esi)
je     804ee16 <fts_read+0x6c6>
mov    %eax,%ebx
jmp    804ead2 <fts_read+0x382>
orl    $0x4000,0x2c(%esi)
jmp    804e858 <fts_read+0x108>
cmpb   $0x0,0xa5(%ebx)
jne    804e989 <fts_read+0x239>
jmp    804e9b4 <fts_read+0x264>
mov    0x30(%ebx),%eax
mov    0x4(%ebx),%edi
test   %eax,%eax
jle    804ec6b <fts_read+0x51b>
mov    0x38(%edi),%eax
test   %eax,%eax
jne    804ec6b <fts_read+0x51b>
mov    0x2c(%esi),%eax
and    $0x18,%eax
cmp    $0x18,%eax
je     804edbf <fts_read+0x66f>
mov    0x1c(%esi),%eax
mov    %ebx,%ecx
lea    0x2c(%esi),%edx
movl   $0x0,(%esp)
call   804d220 <calloc@plt+0x3fb0>
mov    %eax,%ecx
mov    %ax,0x3c(%ebx)
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
jne    804e9d8 <fts_read+0x288>
mov    0x30(%ebx),%eax
test   %eax,%eax
je     804e9d8 <fts_read+0x288>
mov    0x38(%edi),%eax
test   %eax,%eax
je     804e9d8 <fts_read+0x288>
sub    $0x1,%eax
mov    %eax,0x38(%edi)
jmp    804e9d8 <fts_read+0x288>
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%edi),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
jmp    804e8af <fts_read+0x15f>
mov    0x28(%ebx),%eax
mov    0x14(%esi),%edx
mov    %ebx,(%esi)
movb   $0x0,(%edx,%eax,1)
mov    $0x3,%edx
mov    %esi,%eax
call   804d920 <calloc@plt+0x46b0>
test   %eax,%eax
mov    %eax,%ebx
je     804ed60 <fts_read+0x610>
mov    %edi,(%esp)
call   8048eb0 <free@plt>
jmp    804ea32 <fts_read+0x2e2>
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %ebx,%ecx
movl   $0x1,(%esp)
call   804d220 <calloc@plt+0x3fb0>
cmp    $0x1,%ax
mov    %ax,0x3c(%ebx)
je     804ed72 <fts_read+0x622>
mov    $0x3,%eax
mov    %ax,0x40(%ebx)
jmp    804ea32 <fts_read+0x2e2>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049180 <fchdir@plt>
test   %eax,%eax
je     804e82d <fts_read+0xdd>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebp
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049230 <close@plt>
mov    %edi,0x0(%ebp)
mov    %edi,0x20(%ebx)
orl    $0x4000,0x2c(%esi)
jmp    804e82d <fts_read+0xdd>
testb  $0x40,0x2d(%esi)
jne    804e858 <fts_read+0x108>
mov    0x4(%edi),%ebx
jmp    804e7e2 <fts_read+0x92>
mov    0x2c(%esi),%edx
test   $0x4,%dl
jne    804ed19 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x8051e53,%ecx
call   804d4e0 <calloc@plt+0x4270>
test   %eax,%eax
mov    %eax,0x24(%ebx)
js     804ee4a <fts_read+0x6fa>
orw    $0x2,0x3e(%ebx)
jmp    804ed19 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x8051e53,%ecx
call   804d4e0 <calloc@plt+0x4270>
test   %eax,%eax
mov    %eax,0x24(%edi)
js     804ee62 <fts_read+0x712>
orw    $0x2,0x3e(%edi)
movzwl 0x3c(%edi),%ecx
jmp    804e9cc <fts_read+0x27c>
mov    0x2c(%edi),%edx
testb  $0x2,0x2d(%edx)
mov    0x30(%edx),%ebp
je     804ec6b <fts_read+0x51b>
test   %ebp,%ebp
je     804ef02 <fts_read+0x7b2>
mov    0x44(%edi),%eax
mov    %edx,0x18(%esp)
mov    0x48(%edi),%edx
mov    %ebp,(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,0x24(%esp)
call   804f8c0 <fts_children+0x920>
mov    0x18(%esp),%edx
test   %eax,%eax
je     804ee7f <fts_read+0x72f>
movzbl 0x8(%eax),%edx
test   %dl,%dl
je     804ec6b <fts_read+0x51b>
movzwl 0x3c(%ebx),%ecx
jmp    804e9d8 <fts_read+0x288>
mov    0x2c(%esi),%eax
test   $0x40,%ah
jne    804e858 <fts_read+0x108>
mov    0x20(%edi),%ebp
test   %ebp,%ebp
je     804ee39 <fts_read+0x6e9>
cmpw   $0x4,0x3c(%edi)
je     804ee39 <fts_read+0x6e9>
mov    $0x7,%ebx
mov    %bx,0x3c(%edi)
lea    0x34(%esi),%edx
mov    %edi,%ecx
call   804d850 <calloc@plt+0x45e0>
mov    %edi,%eax
jmp    804e85a <fts_read+0x10a>
call   8049100 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    $0x7,%eax
mov    %ax,0x3c(%ebx)
jmp    804ed19 <fts_read+0x5c9>
call   8049100 <__errno_location@plt>
mov    $0x7,%ecx
mov    (%eax),%eax
mov    %eax,0x20(%edi)
mov    $0x7,%eax
mov    %ax,0x3c(%edi)
jmp    804ebc4 <fts_read+0x474>
movl   $0xc,(%esp)
mov    %edx,0x1c(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804ec6b <fts_read+0x51b>
mov    0x1c(%esp),%edx
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%edx),%eax
mov    %eax,(%esp)
call   8049070 <fstatfs64@plt>
xor    %edx,%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
jne    804eec7 <fts_read+0x777>
cmpl   $0x52654973,0x2c(%esp)
sete   %dl
mov    %dl,0x8(%ecx)
mov    0x44(%edi),%eax
mov    %edx,0x1c(%esp)
mov    0x48(%edi),%edx
mov    %ecx,0x18(%esp)
mov    %eax,(%ecx)
mov    %edx,0x4(%ecx)
mov    %ecx,0x4(%esp)
mov    %ebp,(%esp)
call   8050120 <fts_children+0x1180>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804ef48 <fts_read+0x7f8>
cmp    %eax,%ecx
je     804ee05 <fts_read+0x6b5>
call   80491f0 <abort@plt>
movl   $0x8048eb0,0x10(%esp)
movl   $0x804cef0,0xc(%esp)
movl   $0x804cec0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %edx,0x18(%esp)
call   804fb10 <fts_children+0xb70>
mov    0x18(%esp),%edx
test   %eax,%eax
mov    %eax,%ebp
mov    %eax,0x30(%edx)
jne    804edd7 <fts_read+0x687>
jmp    804ec6b <fts_read+0x51b>
mov    %ecx,(%esp)
call   8048eb0 <free@plt>
jmp    804ec6b <fts_read+0x51b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0xc,%esp
mov    0x18(%esp),%eax
cmp    $0x4,%eax
ja     804ef80 <fts_set+0x20>
mov    0x14(%esp),%edx
mov    %ax,0x40(%edx)
xor    %eax,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
call   8049100 <__errno_location@plt>
movl   $0x16,(%eax)
mov    $0x1,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
testl  $0xffffdfff,0x34(%esp)
mov    0x30(%esp),%ebx
jne    804f098 <fts_children+0xf8>
call   8049100 <__errno_location@plt>
mov    (%ebx),%esi
movl   $0x0,(%eax)
mov    %eax,%edi
testb  $0x40,0x2d(%ebx)
jne    804f0b0 <fts_children+0x110>
movzwl 0x3c(%esi),%ecx
cmp    $0x9,%cx
je     804f088 <fts_children+0xe8>
xor    %eax,%eax
cmp    $0x1,%cx
jne    804f026 <fts_children+0x86>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804eff4 <fts_children+0x54>
call   804d0e0 <calloc@plt+0x3e70>
cmpl   $0x2000,0x34(%esp)
mov    $0x1,%ebp
je     804f030 <fts_children+0x90>
mov    0x30(%esi),%eax
test   %eax,%eax
jne    804f01a <fts_children+0x7a>
mov    0x18(%esi),%eax
cmpb   $0x2f,(%eax)
je     804f01a <fts_children+0x7a>
mov    0x2c(%ebx),%edx
test   $0x4,%dl
je     804f048 <fts_children+0xa8>
mov    %ebp,%edx
mov    %ebx,%eax
call   804d920 <calloc@plt+0x46b0>
mov    %eax,0x4(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x30(%esi),%eax
mov    $0x2,%bp
orl    $0x2000,0x2c(%ebx)
test   %eax,%eax
je     804f00a <fts_children+0x6a>
jmp    804f01a <fts_children+0x7a>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    $0x8051e53,%ecx
call   804d4e0 <calloc@plt+0x4270>
test   %eax,%eax
mov    %eax,%esi
js     804f0d0 <fts_children+0x130>
mov    %ebp,%edx
mov    %ebx,%eax
call   804d920 <calloc@plt+0x46b0>
testb  $0x2,0x2d(%ebx)
mov    %eax,0x4(%ebx)
je     804f0b8 <fts_children+0x118>
mov    $0x1,%ecx
mov    %esi,%edx
mov    %ebx,%eax
call   804d160 <calloc@plt+0x3ef0>
mov    0x4(%ebx),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x8(%esi),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049100 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804f026 <fts_children+0x86>
nop
mov    %esi,(%esp)
call   8049180 <fchdir@plt>
test   %eax,%eax
jne    804f0de <fts_children+0x13e>
mov    %esi,(%esp)
call   8049230 <close@plt>
jmp    804f07b <fts_children+0xdb>
xchg   %ax,%ax
movl   $0x0,0x4(%ebx)
xor    %eax,%eax
jmp    804f026 <fts_children+0x86>
mov    (%edi),%ebx
mov    %esi,(%esp)
call   8049230 <close@plt>
xor    %eax,%eax
mov    %ebx,(%edi)
jmp    804f026 <fts_children+0x86>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x0,0x8(%esp)
mov    0x24(%esp),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   80508a0 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%edx
js     804f168 <fts_children+0x1c8>
mov    %eax,%ecx
mov    %esi,%ebx
and    $0xfffffffe,%eax
or     $0x1,%ecx
test   %bl,%bl
cmove  %eax,%ecx
xor    %eax,%eax
cmp    %edx,%ecx
je     804f160 <fts_children+0x1c0>
mov    %ecx,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   80508a0 <fts_children+0x1900>
cmp    $0xffffffff,%eax
sete   %al
movzbl %al,%eax
neg    %eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    $0xffffffff,%eax
jmp    804f160 <fts_children+0x1c0>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x406,0x4(%esp)
mov    %eax,(%esp)
call   80508a0 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048fa0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8050800 <fts_children+0x1860>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804f1e0 <fts_children+0x240>
test   %dl,%dl
je     804f1d7 <fts_children+0x237>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804f200 <fts_children+0x260>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804f1d7 <fts_children+0x237>
call   8049100 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049100 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
movl   $0x95f616,0x18(%eax)
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
cmpl   $0x95f616,0x18(%esi)
jne    804f2fd <fts_children+0x35d>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
mov    %edx,%ebx
or     %eax,%ebx
je     804f2b0 <fts_children+0x310>
mov    0x58(%edi),%ebx
mov    %ebx,%ecx
mov    %ebx,0x18(%esp)
mov    0x5c(%edi),%ebx
xor    (%esi),%ecx
mov    %ebx,0x1c(%esp)
xor    0x4(%esi),%ebx
or     %ecx,%ebx
je     804f2e0 <fts_children+0x340>
mov    %eax,%ecx
mov    %edx,%ebx
add    $0x1,%ecx
adc    $0x0,%ebx
mov    %ecx,%ebp
and    %eax,%ebp
and    %ebx,%edx
xor    %eax,%eax
or     %ebp,%edx
mov    %ecx,0x10(%esi)
mov    %ebx,0x14(%esi)
jne    804f2d6 <fts_children+0x336>
mov    %ebx,%eax
or     %ecx,%eax
je     804f2f0 <fts_children+0x350>
mov    0x18(%esp),%ebx
mov    0x1c(%esp),%ecx
jmp    804f2c4 <fts_children+0x324>
lea    0x0(%esi),%esi
mov    0x58(%edi),%ebx
mov    0x5c(%edi),%ecx
movl   $0x1,0x10(%esi)
movl   $0x0,0x14(%esi)
mov    (%edi),%eax
mov    0x4(%edi),%edx
mov    %ebx,(%esi)
mov    %ecx,0x4(%esi)
mov    %eax,0x8(%esi)
xor    %eax,%eax
mov    %edx,0xc(%esi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    (%edi),%ecx
mov    0x4(%edi),%ebx
xor    0xc(%esi),%ebx
xor    0x8(%esi),%ecx
or     %ecx,%ebx
jne    804f281 <fts_children+0x2e1>
nop
add    $0x2c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8051eba,0xc(%esp)
movl   $0x3c,0x8(%esp)
movl   $0x8051e90,0x4(%esp)
movl   $0x8051ea2,(%esp)
call   8049250 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x24(%esp),%edx
test   $0x40,%dl
cmovne 0x28(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048e60 <open64@plt>
mov    %eax,(%esp)
call   80507c0 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
cmp    $0x9,%eax
push   %edi
push   %esi
push   %ebx
ja     804f3e6 <fts_children+0x446>
mov    $0xb,%ebx
mov    $0xaaaaaaab,%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%ebx
jbe    804f3df <fts_children+0x43f>
mov    %ebx,%eax
mul    %ebp
shr    %edx
lea    (%edx,%edx,2),%eax
cmp    %eax,%ebx
je     804f3d0 <fts_children+0x430>
mov    $0x10,%edi
mov    $0x9,%esi
mov    $0x3,%ecx
jmp    804f3bd <fts_children+0x41d>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
add    $0x8,%edi
test   %edx,%edx
je     804f3d0 <fts_children+0x430>
add    %edi,%esi
add    $0x2,%ecx
cmp    %ebx,%esi
jb     804f3b0 <fts_children+0x410>
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
test   %edx,%edx
jne    804f3d8 <fts_children+0x438>
add    $0x2,%ebx
cmp    $0xffffffff,%ebx
jne    804f388 <fts_children+0x3e8>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%ecx
jmp    804f3c6 <fts_children+0x426>
or     $0x1,%eax
cmp    $0xffffffff,%eax
mov    %eax,%ebx
jne    804f37e <fts_children+0x3de>
jmp    804f3d8 <fts_children+0x438>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
xor    %edx,%edx
ror    $0x3,%eax
divl   0x8(%esp)
mov    %edx,%eax
ret
mov    0x8(%esp),%eax
cmp    %eax,0x4(%esp)
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x8(%eax),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   *0x18(%ebx)
cmp    0x8(%ebx),%eax
jae    804f442 <fts_children+0x4a2>
mov    (%ebx),%edx
add    $0x18,%esp
pop    %ebx
lea    (%edx,%eax,8),%eax
ret
call   80491f0 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    %ecx,0xc(%esp)
mov    0x30(%esp),%ebp
call   804f420 <fts_children+0x480>
mov    0xc(%esp),%ecx
mov    %eax,%ebx
mov    %eax,(%ecx)
mov    (%eax),%eax
test   %eax,%eax
je     804f4d6 <fts_children+0x536>
cmp    %eax,%edi
je     804f48a <fts_children+0x4ea>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
je     804f4cf <fts_children+0x52f>
mov    (%ebx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804f4b0 <fts_children+0x510>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     804f508 <fts_children+0x568>
mov    (%edx),%edi
mov    0x4(%edx),%ebp
mov    %edi,(%ebx)
mov    %ebp,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%edx),%eax
cmp    %edi,%eax
je     804f4e5 <fts_children+0x545>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
jne    804f4e0 <fts_children+0x540>
mov    0x4(%ebx),%ebx
mov    0x4(%ebx),%edx
test   %edx,%edx
jne    804f4b8 <fts_children+0x518>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4(%ebx),%edx
mov    (%edx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804f4b0 <fts_children+0x510>
mov    0x4(%edx),%ecx
mov    %ecx,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,(%ebx)
jmp    804f4b0 <fts_children+0x510>
mov    (%eax),%edx
mov    %eax,%ecx
cmp    $0x8051f34,%edx
je     804f5b8 <fts_children+0x618>
flds   0x8(%edx)
flds   0x8051f48
fxch   %st(1)
fucomi %st(1),%st
jbe    804f578 <fts_children+0x5d8>
flds   0x8051f4c
fucomip %st(1),%st
jbe    804f580 <fts_children+0x5e0>
flds   0xc(%edx)
flds   0x8051f50
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804f588 <fts_children+0x5e8>
flds   (%edx)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     804f590 <fts_children+0x5f0>
faddp  %st,%st(2)
flds   0x4(%edx)
fucomi %st(2),%st
jbe    804f598 <fts_children+0x5f8>
fld1
fucomip %st(1),%st
fstp   %st(0)
jb     804f5a0 <fts_children+0x600>
fucomip %st(1),%st
fstp   %st(0)
mov    $0x1,%eax
jbe    804f5a8 <fts_children+0x608>
jmp    804f5bd <fts_children+0x61d>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
fstp   %st(0)
jmp    804f5a8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804f5a8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804f5a8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804f5a8 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804f5a8 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8051f34,(%ecx)
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
repz ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%edx),%edi
cmp    0x4(%edx),%edi
mov    %edx,0x4(%esp)
mov    %cl,0xb(%esp)
jae    804f644 <fts_children+0x6a4>
mov    (%edi),%ebx
test   %ebx,%ebx
je     804f638 <fts_children+0x698>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
jne    804f5f7 <fts_children+0x657>
jmp    804f62a <fts_children+0x68a>
nop
mov    0x4(%eax),%ecx
test   %edx,%edx
mov    %ecx,0x4(%ebp)
mov    %ebp,0x4(%eax)
je     804f628 <fts_children+0x688>
mov    %edx,%ebp
mov    0x0(%ebp),%ebx
mov    %esi,%eax
mov    %ebx,%edx
call   804f420 <fts_children+0x480>
mov    0x4(%ebp),%edx
mov    (%eax),%ecx
test   %ecx,%ecx
jne    804f5e8 <fts_children+0x648>
mov    %ebx,(%eax)
addl   $0x1,0xc(%esi)
test   %edx,%edx
movl   $0x0,0x0(%ebp)
mov    0x24(%esi),%eax
mov    %eax,0x4(%ebp)
mov    %ebp,0x24(%esi)
jne    804f5f5 <fts_children+0x655>
xchg   %ax,%ax
mov    (%edi),%ebx
cmpb   $0x0,0xb(%esp)
movl   $0x0,0x4(%edi)
je     804f658 <fts_children+0x6b8>
mov    0x4(%esp),%eax
add    $0x8,%edi
cmp    %edi,0x4(%eax)
ja     804f5d8 <fts_children+0x638>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %esi,%eax
call   804f420 <fts_children+0x480>
mov    %eax,%edx
mov    (%eax),%eax
test   %eax,%eax
je     804f6a2 <fts_children+0x702>
mov    0x24(%esi),%eax
test   %eax,%eax
je     804f6aa <fts_children+0x70a>
mov    0x4(%eax),%ecx
mov    %ecx,0x24(%esi)
mov    0x4(%edx),%ecx
mov    %ebx,(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x4(%edx)
mov    0x4(%esp),%eax
add    $0x8,%edi
movl   $0x0,-0x8(%edi)
subl   $0x1,0xc(%eax)
mov    0x4(%esp),%eax
cmp    %edi,0x4(%eax)
ja     804f5d8 <fts_children+0x638>
jmp    804f644 <fts_children+0x6a4>
mov    %ebx,(%edx)
addl   $0x1,0xc(%esi)
jmp    804f681 <fts_children+0x6e1>
movl   $0x8,(%esp)
mov    %edx,0xc(%esp)
call   8049000 <malloc@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    804f676 <fts_children+0x6d6>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%ebx
mov    0x4(%eax),%esi
xor    %eax,%eax
cmp    %esi,%ebx
jae    804f746 <fts_children+0x7a6>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%edx
test   %edx,%edx
je     804f73f <fts_children+0x79f>
mov    0x4(%ebx),%edx
mov    $0x1,%ecx
test   %edx,%edx
je     804f73a <fts_children+0x79a>
lea    0x0(%esi),%esi
mov    0x4(%edx),%edx
add    $0x1,%ecx
test   %edx,%edx
jne    804f730 <fts_children+0x790>
cmp    %ecx,%eax
cmovb  %ecx,%eax
add    $0x8,%ebx
cmp    %esi,%ebx
jb     804f718 <fts_children+0x778>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
xor    %edx,%edx
push   %esi
push   %ebx
mov    0x10(%esp),%edi
xor    %ebx,%ebx
mov    (%edi),%ecx
mov    0x4(%edi),%esi
cmp    %esi,%ecx
jae    804f791 <fts_children+0x7f1>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804f78a <fts_children+0x7ea>
mov    0x4(%ecx),%eax
add    $0x1,%ebx
add    $0x1,%edx
test   %eax,%eax
je     804f78a <fts_children+0x7ea>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804f780 <fts_children+0x7e0>
add    $0x8,%ecx
cmp    %esi,%ecx
jb     804f768 <fts_children+0x7c8>
xor    %eax,%eax
cmp    %ebx,0xc(%edi)
je     804f79c <fts_children+0x7fc>
pop    %ebx
pop    %esi
pop    %edi
ret
cmp    %edx,0x10(%edi)
pop    %ebx
pop    %esi
sete   %al
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    0x54(%esp),%ebx
mov    0xc(%eax),%edi
mov    (%eax),%ecx
mov    0x4(%eax),%ebp
mov    0x10(%eax),%esi
mov    %edi,0x24(%esp)
xor    %edi,%edi
cmp    %ebp,%ecx
mov    %esi,0x20(%esp)
mov    0x8(%eax),%esi
jae    804f80e <fts_children+0x86e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804f807 <fts_children+0x867>
mov    0x4(%ecx),%eax
mov    $0x1,%edx
test   %eax,%eax
je     804f802 <fts_children+0x862>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804f7f8 <fts_children+0x858>
cmp    %edx,%edi
cmovb  %edx,%edi
add    $0x8,%ecx
cmp    %ebp,%ecx
jb     804f7e0 <fts_children+0x840>
mov    0x20(%esp),%eax
mov    %ebx,(%esp)
movl   $0x8051ec6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   80491c0 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8051ede,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80491c0 <__fprintf_chk@plt>
mov    0x24(%esp),%ecx
xor    %edx,%edx
mov    %edx,0x2c(%esp)
xor    %edx,%edx
mov    %ebx,(%esp)
movl   $0x8051f10,0x8(%esp)
mov    %ecx,0x28(%esp)
mov    %ecx,0xc(%esp)
fildll 0x28(%esp)
fmuls  0x8051f54
mov    %esi,0x28(%esp)
mov    %edx,0x2c(%esp)
movl   $0x1,0x4(%esp)
fildll 0x28(%esp)
fdivrp %st,%st(1)
fstpl  0x10(%esp)
call   80491c0 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8051ef6,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80491c0 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804f420 <fts_children+0x480>
mov    (%eax),%ecx
mov    %eax,%ebx
test   %ecx,%ecx
jne    804f8ea <fts_children+0x94a>
jmp    804f903 <fts_children+0x963>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
cmp    %ecx,%esi
je     804f912 <fts_children+0x972>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   *0x1c(%edi)
test   %al,%al
jne    804f910 <fts_children+0x970>
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    804f8e8 <fts_children+0x948>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
add    $0x10,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    0x10(%esp),%eax
mov    0x10(%eax),%edx
test   %edx,%edx
je     804f951 <fts_children+0x9b1>
mov    (%eax),%edx
mov    0x4(%eax),%ecx
cmp    %ecx,%edx
jb     804f947 <fts_children+0x9a7>
jmp    804f957 <fts_children+0x9b7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%edx
cmp    %ecx,%edx
jae    804f957 <fts_children+0x9b7>
mov    (%edx),%eax
test   %eax,%eax
je     804f940 <fts_children+0x9a0>
add    $0xc,%esp
ret
xor    %eax,%eax
add    $0xc,%esp
ret
call   80491f0 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804f420 <fts_children+0x480>
mov    %eax,%ebx
mov    %eax,%ecx
jmp    804f987 <fts_children+0x9e7>
lea    0x0(%esi),%esi
mov    0x4(%ecx),%ecx
test   %ecx,%ecx
je     804f992 <fts_children+0x9f2>
cmp    %esi,(%ecx)
jne    804f980 <fts_children+0x9e0>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    804f9ab <fts_children+0xa0b>
mov    0x4(%edi),%edx
jmp    804f99e <fts_children+0x9fe>
nop
mov    (%ebx),%eax
test   %eax,%eax
jne    804f9a7 <fts_children+0xa07>
add    $0x8,%ebx
cmp    %edx,%ebx
jb     804f998 <fts_children+0x9f8>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
pop    %ebx
mov    (%eax),%eax
pop    %esi
pop    %edi
ret
jmp    804f9c0 <fts_children+0xa20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    0x0(%ebp),%edi
cmp    %edi,0x4(%ebp)
jbe    804fa18 <fts_children+0xa78>
mov    (%edi),%edx
test   %edx,%edx
je     804fa0c <fts_children+0xa6c>
cmp    %eax,%ebx
jbe    804fa18 <fts_children+0xa78>
mov    %edx,(%esi,%eax,4)
mov    0x4(%edi),%edx
lea    0x1(%eax),%ecx
mov    %ecx,%eax
test   %edx,%edx
je     804fa0c <fts_children+0xa6c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,%eax
je     804fa18 <fts_children+0xa78>
mov    (%edx),%ecx
add    $0x1,%eax
mov    %ecx,-0x4(%esi,%eax,4)
mov    0x4(%edx),%edx
test   %edx,%edx
jne    804f9f8 <fts_children+0xa58>
add    $0x8,%edi
cmp    %edi,0x4(%ebp)
ja     804f9da <fts_children+0xa3a>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x30(%esp),%ecx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%eax),%eax
cmp    %eax,0x4(%ecx)
mov    %eax,0xc(%esp)
jbe    804fa88 <fts_children+0xae8>
mov    0xc(%esp),%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    804fa5b <fts_children+0xabb>
jmp    804fa72 <fts_children+0xad2>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   *%esi
test   %al,%al
je     804fa88 <fts_children+0xae8>
mov    0x4(%ebp),%ebp
add    $0x1,%ebx
test   %ebp,%ebp
jne    804fa58 <fts_children+0xab8>
mov    0x30(%esp),%eax
addl   $0x8,0xc(%esp)
mov    0xc(%esp),%edx
cmp    %edx,0x4(%eax)
ja     804fa44 <fts_children+0xaa4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    0xc(%esp),%ebx
mov    0x10(%esp),%esi
movzbl (%ebx),%ecx
test   %cl,%cl
je     804fad2 <fts_children+0xb32>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %cl,%eax
mov    %edx,%ecx
shl    $0x5,%ecx
add    $0x1,%ebx
sub    %edx,%ecx
xor    %edx,%edx
add    %ecx,%eax
movzbl (%ebx),%ecx
div    %esi
test   %cl,%cl
jne    804fab8 <fts_children+0xb18>
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x0,(%eax)
movl   $0x3f800000,0x4(%eax)
movl   $0x3f4ccccd,0x8(%eax)
movl   $0x3fb4fdf4,0xc(%eax)
movb   $0x0,0x10(%eax)
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x804f400,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%edi
mov    0x4c(%esp),%esi
movl   $0x28,(%esp)
mov    0x44(%esp),%ebx
test   %edi,%edi
cmove  %eax,%edi
test   %esi,%esi
mov    $0x804f410,%eax
cmove  %eax,%esi
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804fc48 <fts_children+0xca8>
test   %ebx,%ebx
mov    $0x8051f34,%eax
cmove  %eax,%ebx
mov    %ebx,0x14(%ebp)
lea    0x14(%ebp),%eax
call   804f510 <fts_children+0x570>
test   %al,%al
je     804fc31 <fts_children+0xc91>
cmpb   $0x0,0x10(%ebx)
flds   0x8(%ebx)
jne    804fbc0 <fts_children+0xc20>
mov    0x40(%esp),%ecx
xor    %ebx,%ebx
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8051f58
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    804fc28 <fts_children+0xc88>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,0x40(%esp)
jmp    804fbc2 <fts_children+0xc22>
nop
fstp   %st(0)
mov    0x40(%esp),%eax
call   804f370 <fts_children+0x3d0>
cmp    $0x3fffffff,%eax
mov    %eax,%ebx
ja     804fc2a <fts_children+0xc8a>
test   %eax,%eax
mov    %eax,0x8(%ebp)
je     804fc31 <fts_children+0xc91>
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   8049270 <calloc@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     804fc31 <fts_children+0xc91>
lea    (%eax,%ebx,8),%eax
mov    %eax,0x4(%ebp)
mov    0x50(%esp),%eax
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
mov    %edi,0x18(%ebp)
mov    %eax,0x20(%ebp)
mov    %ebp,%eax
mov    %esi,0x1c(%ebp)
movl   $0x0,0x24(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
movl   $0x0,0x8(%ebp)
mov    %ebp,(%esp)
call   8048eb0 <free@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804fc1c <fts_children+0xc7c>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    804fcc6 <fts_children+0xd26>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
test   %eax,%eax
je     804fcbe <fts_children+0xd1e>
mov    0x4(%edi),%ebx
mov    0x20(%esi),%edx
test   %ebx,%ebx
jne    804fc82 <fts_children+0xce2>
jmp    804fca6 <fts_children+0xd06>
lea    0x0(%esi),%esi
mov    %eax,%ebx
test   %edx,%edx
je     804fc90 <fts_children+0xcf0>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *%edx
mov    0x20(%esi),%edx
mov    0x4(%ebx),%eax
mov    0x24(%esi),%ecx
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %ecx,0x4(%ebx)
mov    %ebx,0x24(%esi)
jne    804fc80 <fts_children+0xce0>
test   %edx,%edx
je     804fcb1 <fts_children+0xd11>
mov    (%edi),%eax
mov    %eax,(%esp)
call   *%edx
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     804fc68 <fts_children+0xcc8>
movl   $0x0,0xc(%esi)
movl   $0x0,0x10(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x20(%esi),%edx
test   %edx,%edx
je     804fcf8 <fts_children+0xd58>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    804fd6a <fts_children+0xdca>
mov    0x4(%esi),%eax
mov    (%esi),%edi
cmp    %eax,%edi
jae    804fd31 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edi),%eax
test   %eax,%eax
jne    804fd1a <fts_children+0xd7a>
jmp    804fd29 <fts_children+0xd89>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048eb0 <free@plt>
test   %ebx,%ebx
jne    804fd18 <fts_children+0xd78>
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     804fd08 <fts_children+0xd68>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    804fd42 <fts_children+0xda2>
jmp    804fd51 <fts_children+0xdb1>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048eb0 <free@plt>
test   %ebx,%ebx
jne    804fd40 <fts_children+0xda0>
mov    (%esi),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048eb0 <free@plt>
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    804fd31 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
mov    %edi,%ebx
test   %eax,%eax
jne    804fd8a <fts_children+0xdea>
jmp    804fd97 <fts_children+0xdf7>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *0x20(%esi)
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    804fd88 <fts_children+0xde8>
mov    0x4(%esi),%eax
add    $0x8,%edi
cmp    %edi,%eax
ja     804fd78 <fts_children+0xdd8>
jmp    804fcfb <fts_children+0xd5b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    0x64(%esp),%eax
mov    0x14(%esi),%edi
cmpb   $0x0,0x10(%edi)
flds   0x8(%edi)
jne    804fe10 <fts_children+0xe70>
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    %ebx,0x14(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8051f58
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    804fef0 <fts_children+0xf50>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,%eax
jmp    804fe12 <fts_children+0xe72>
fstp   %st(0)
call   804f370 <fts_children+0x3d0>
mov    %eax,%ebx
lea    -0x1(%eax),%eax
cmp    $0x3ffffffe,%eax
ja     804fef2 <fts_children+0xf52>
cmp    %ebx,0x8(%esi)
je     804fee0 <fts_children+0xf40>
movl   $0x8,0x4(%esp)
mov    %ebx,(%esp)
call   8049270 <calloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     804fef2 <fts_children+0xf52>
lea    (%eax,%ebx,8),%eax
xor    %ecx,%ecx
mov    %eax,0x2c(%esp)
mov    0x18(%esi),%eax
mov    %esi,%edx
mov    %ebx,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,0x40(%esp)
mov    0x1c(%esi),%eax
mov    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x48(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x4c(%esp)
lea    0x28(%esp),%eax
call   804f5c0 <fts_children+0x620>
test   %al,%al
mov    %eax,%ebx
jne    804ff00 <fts_children+0xf60>
mov    0x4c(%esp),%eax
mov    $0x1,%ecx
lea    0x28(%esp),%edx
mov    %eax,0x24(%esi)
mov    %esi,%eax
call   804f5c0 <fts_children+0x620>
test   %al,%al
je     804ff35 <fts_children+0xf95>
xor    %ecx,%ecx
mov    %esi,%eax
lea    0x28(%esp),%edx
call   804f5c0 <fts_children+0x620>
test   %al,%al
je     804ff35 <fts_children+0xf95>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x50,%esp
mov    $0x1,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
fstp   %st(0)
add    $0x50,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x30(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esi)
mov    0x4c(%esp),%eax
mov    %eax,0x24(%esi)
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
call   80491f0 <abort@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%edi
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebx
test   %edi,%edi
je     80500c8 <fts_children+0x1128>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804f450 <fts_children+0x4b0>
test   %eax,%eax
je     804ff88 <fts_children+0xfe8>
test   %ebx,%ebx
je     8050008 <fts_children+0x1068>
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  0x8(%eax)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804ffc8 <fts_children+0x1028>
jmp    8050018 <fts_children+0x1078>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     80500d0 <fts_children+0x1130>
mov    0x24(%esi),%eax
test   %eax,%eax
je     80500e4 <fts_children+0x1144>
mov    0x4(%eax),%edx
mov    %edx,0x24(%esi)
mov    0x4(%ebx),%edx
mov    %edi,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x4(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%esi),%eax
call   804f510 <fts_children+0x570>
mov    0x14(%esi),%ecx
xor    %edx,%edx
mov    0x8(%esi),%eax
flds   0x8(%ecx)
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
fld    %st(2)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804ffc0 <fts_children+0x1020>
cmpb   $0x0,0x10(%ecx)
fmuls  0xc(%ecx)
jne    8050068 <fts_children+0x10c8>
fmulp  %st,%st(1)
jmp    805006a <fts_children+0x10ca>
lea    0x0(%esi),%esi
fstp   %st(1)
flds   0x8051f58
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80500fa <fts_children+0x115a>
fnstcw 0x1e(%esp)
mov    %esi,(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   804fdb0 <fts_children+0xe10>
test   %al,%al
je     80500fc <fts_children+0x115c>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804f450 <fts_children+0x4b0>
test   %eax,%eax
je     804ffc8 <fts_children+0x1028>
call   80491f0 <abort@plt>
lea    0x0(%esi),%esi
mov    %edi,(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
addl   $0x1,0xc(%esi)
jmp    804ff7e <fts_children+0xfde>
movl   $0x8,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
jne    804ffe7 <fts_children+0x1047>
jmp    80500fc <fts_children+0x115c>
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    804ff7e <fts_children+0xfde>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
jmp    804ff40 <fts_children+0xfa0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x34(%esp),%ebx
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804ff40 <fts_children+0xfa0>
cmp    $0xffffffff,%eax
je     8050158 <fts_children+0x11b8>
test   %eax,%eax
mov    %ebx,%eax
cmove  0x1c(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    805014e <fts_children+0x11ae>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
lea    0x2c(%esp),%ecx
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %esi,%eax
call   804f450 <fts_children+0x4b0>
test   %eax,%eax
mov    %eax,%edi
je     8050298 <fts_children+0x12f8>
mov    %eax,%ebp
mov    0x2c(%esp),%eax
subl   $0x1,0x10(%esi)
mov    (%eax),%eax
test   %eax,%eax
jne    80501a8 <fts_children+0x1208>
jmp    80501b8 <fts_children+0x1218>
lea    0x0(%esi),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
sub    $0x1,%eax
mov    %eax,0xc(%esi)
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  (%eax)
fucomip %st(1),%st
fstp   %st(0)
jbe    80501a8 <fts_children+0x1208>
lea    0x14(%esi),%eax
call   804f510 <fts_children+0x570>
mov    0x8(%esi),%eax
xor    %edx,%edx
mov    0x14(%esi),%ecx
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
flds   (%ecx)
fmul   %st(2),%st
fucomip %st(1),%st
fstp   %st(0)
jbe    80501a0 <fts_children+0x1200>
cmpb   $0x0,0x10(%ecx)
fmuls  0x4(%ecx)
je     80502a0 <fts_children+0x1300>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,%ebp
mov    %esi,(%esp)
call   804fdb0 <fts_children+0xe10>
test   %al,%al
jne    80501a8 <fts_children+0x1208>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    805027a <fts_children+0x12da>
lea    0x0(%esi,%eiz,1),%esi
jmp    8050289 <fts_children+0x12e9>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048eb0 <free@plt>
test   %ebx,%ebx
jne    8050278 <fts_children+0x12d8>
movl   $0x0,0x24(%esi)
mov    %edi,%ebp
jmp    80501a8 <fts_children+0x1208>
nop
xor    %ebp,%ebp
jmp    80501a8 <fts_children+0x1208>
nop
fmuls  0x8(%ecx)
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
jmp    805024f <fts_children+0x12af>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
movb   $0x1,0x1c(%eax)
movl   $0x0,0x14(%eax)
movl   $0x0,0x18(%eax)
mov    %edx,(%eax)
mov    %edx,0x4(%eax)
mov    %edx,0x8(%eax)
mov    %edx,0xc(%eax)
mov    %edx,0x10(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movzbl 0x1c(%eax),%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%edi
movzbl 0x1c(%edx),%eax
mov    0x14(%edx),%ecx
xor    $0x1,%eax
movzbl %al,%esi
add    %esi,%ecx
and    $0x3,%ecx
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %edi,(%ebx)
mov    0x18(%edx),%ebx
mov    %ecx,0x14(%edx)
cmp    %ecx,%ebx
jne    8050346 <fts_children+0x13a6>
add    %esi,%ebx
and    $0x3,%ebx
mov    %ebx,0x18(%edx)
movb   $0x0,0x1c(%edx)
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%edx
cmpb   $0x0,0x1c(%edx)
jne    805038a <fts_children+0x13ea>
mov    0x14(%edx),%ecx
mov    0x10(%edx),%esi
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %esi,(%ebx)
cmp    0x18(%edx),%ecx
je     8050380 <fts_children+0x13e0>
add    $0x3,%ecx
and    $0x3,%ecx
mov    %ecx,0x14(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
movb   $0x1,0x1c(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
call   80491f0 <abort@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049140 <nl_langinfo@plt>
mov    0x8055350,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x8051b9d,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     805045c <fts_children+0x14bc>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8050427 <fts_children+0x1487>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8050400 <fts_children+0x1460>
nop
mov    %ebp,(%esp)
call   8049090 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049090 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8050458 <fts_children+0x14b8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048e50 <strcmp@plt>
test   %eax,%eax
je     805041b <fts_children+0x147b>
cmp    $0x2a,%bl
jne    80503e0 <fts_children+0x1440>
cmpb   $0x0,0x1(%ebp)
jne    80503e0 <fts_children+0x1440>
mov    %ebp,(%esp)
call   8049090 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8051f65,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    805071d <fts_children+0x177d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8050427 <fts_children+0x1487>
movl   $0x8051f6b,(%esp)
call   8048fe0 <getenv@plt>
test   %eax,%eax
je     8050475 <fts_children+0x14d5>
cmpb   $0x0,(%eax)
jne    8050683 <fts_children+0x16e3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8051f5c,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8050674 <fts_children+0x16d4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8050713 <fts_children+0x1773>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048ec0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     80504dc <fts_children+0x153c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048e60 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050658 <fts_children+0x16b8>
movl   $0x805171f,0x4(%esp)
mov    %eax,(%esp)
call   8049040 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8050650 <fts_children+0x16b0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050636 <fts_children+0x1696>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8050540 <fts_children+0x15a0>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8050540 <fts_children+0x15a0>
cmp    $0x23,%eax
je     80506ad <fts_children+0x170d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490f0 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8051f7b,0x4(%esp)
mov    %esi,(%esp)
call   8049080 <fscanf@plt>
cmp    $0x1,%eax
jle    80506d0 <fts_children+0x1730>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049090 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049090 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    80506ee <fts_children+0x174e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049000 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8050722 <fts_children+0x1782>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048f90 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048f90 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     805054c <fts_children+0x15ac>
mov    %esi,(%esp)
call   8049130 <__uflow@plt>
cmp    $0xffffffff,%eax
je     80506d0 <fts_children+0x1730>
jmp    8050555 <fts_children+0x15b5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049230 <close@plt>
mov    $0x8051b9d,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048eb0 <free@plt>
mov    %ebp,0x8055350
jmp    80503cf <fts_children+0x142f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    805049b <fts_children+0x14fb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049090 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8050674 <fts_children+0x16d4>
lea    -0x1(%eax),%eax
jmp    8050484 <fts_children+0x14e4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     80506c7 <fts_children+0x1727>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    805073c <fts_children+0x179c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    80506a8 <fts_children+0x1708>
cmp    $0xffffffff,%eax
jne    8050540 <fts_children+0x15a0>
mov    %esi,(%esp)
call   8050800 <fts_children+0x1860>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050658 <fts_children+0x16b8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    805065d <fts_children+0x16bd>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048ff0 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    80505ec <fts_children+0x164c>
mov    $0x8051b9d,%ebp
jmp    8050669 <fts_children+0x16c9>
call   8048f20 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x8051b9d,%ebp
call   8048eb0 <free@plt>
mov    %esi,(%esp)
call   8050800 <fts_children+0x1860>
jmp    805065d <fts_children+0x16bd>
mov    %esi,(%esp)
call   8049130 <__uflow@plt>
jmp    80506c2 <fts_children+0x1722>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x28(%esp),%edx
test   $0x40,%dl
cmovne 0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <openat64@plt>
mov    %eax,(%esp)
call   80507c0 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80508a0 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
ja     80507ef <fts_children+0x184f>
mov    %ebx,(%esp)
call   8050790 <fts_children+0x17f0>
mov    %eax,%edi
call   8049100 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049230 <close@plt>
mov    %ebp,(%esi)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049110 <fileno@plt>
test   %eax,%eax
js     8050888 <fts_children+0x18e8>
mov    %ebx,(%esp)
call   8049010 <__freading@plt>
test   %eax,%eax
jne    8050858 <fts_children+0x18b8>
mov    %ebx,(%esp)
call   80509c0 <fts_children+0x1a20>
test   %eax,%eax
je     8050888 <fts_children+0x18e8>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048ee0 <fclose@plt>
test   %edi,%edi
je     805084a <fts_children+0x18aa>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049110 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049190 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8050822 <fts_children+0x1882>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048ee0 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    8050900 <fts_children+0x1960>
mov    0x8055354,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     80509a8 <fts_children+0x1a08>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   80490c0 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8050920 <fts_children+0x1980>
movl   $0x1,0x8055354
00
test   %ebx,%ebx
js     80508f7 <fts_children+0x1957>
cmpl   $0xffffffff,0x8055354
je     8050950 <fts_children+0x19b0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   80490c0 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8049100 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    80508e0 <fts_children+0x1940>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80508a0 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%ebx
js     80508f7 <fts_children+0x1957>
movl   $0xffffffff,0x8055354
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80490c0 <fcntl@plt>
test   %eax,%eax
js     8050984 <fts_children+0x19e4>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   80490c0 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    80508f7 <fts_children+0x1957>
call   8049100 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   8049230 <close@plt>
mov    %edi,(%esi)
jmp    80508f7 <fts_children+0x1957>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80508a0 <fts_children+0x1900>
mov    %eax,%ebx
jmp    80508ea <fts_children+0x194a>
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     80509d8 <fts_children+0x1a38>
mov    %ebx,(%esp)
call   8049010 <__freading@plt>
test   %eax,%eax
jne    80509e8 <fts_children+0x1a48>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048e70 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     80509d8 <fts_children+0x1a38>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   8050a20 <fts_children+0x1a80>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048e70 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     8050a60 <fts_children+0x1ac0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048ef0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    8050a3f <fts_children+0x1a9f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    8050a3f <fts_children+0x1a9f>
mov    %ebx,(%esp)
call   8049110 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8049190 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     8050aa7 <fts_children+0x1b07>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    8050a9f <fts_children+0x1aff>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    8050af8 <fts_children+0x1b58>
cmp    %edi,%esi
jbe    8050b30 <fts_children+0x1b90>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8050b50 <fts_children+0x1bb0>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8050b60 <fts_children+0x1bc0>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     8050bf8 <fts_children+0x1c58>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8050b41 <fts_children+0x1ba1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    8050aeb <fts_children+0x1b4b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     8050be4 <fts_children+0x1c44>
cmp    %eax,0xc(%esp)
jb     8050be0 <fts_children+0x1c40>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    8050bbe <fts_children+0x1c1e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    8050bbe <fts_children+0x1c1e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     8050b11 <fts_children+0x1b71>
jmp    8050b21 <fts_children+0x1b81>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a190 <calloc@plt+0xf20>
add    $0x43e5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048e10 <strcmp@plt-0x40>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8050c69 <fts_children+0x1cc9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8050c48 <fts_children+0x1ca8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8050c80 <fts_children+0x1ce0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804a190 <calloc@plt+0xf20>
add    $0x436a,%ebx
sub    $0x18,%esp
lea    0x124(%ebx),%eax
test   %eax,%eax
je     8050cc8 <fts_children+0x1d28>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    8050cab <fts_children+0x1d0b>
push   %ebx
sub    $0x8,%esp
call   804a190 <calloc@plt+0xf20>
add    $0x432b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     8050d64 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     8050d1c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8050d65 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8050d74 <_IO_stdin_used+0x90>
popa
je     8050d73 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %cl,%cs:0x4f(%ebp)
inc    %esp
inc    %ebp
pop    %ebx
sub    $0x4d,%al
dec    %edi
inc    %esp
inc    %ebp
pop    %ebp
cs cs and %al,%cs:0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x4f5b2073
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %cl,%cs:0x43(%edi)
push   %esp
inc    %ecx
dec    %esp
sub    $0x45444f4d,%eax
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x4f5b2073
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %ch,%cs:0x6665722d
66
gs
jb     8050de9 <_IO_stdin_used+0x105>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%al
add    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x6f(%ebp)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
dec    %ebp
dec    %edi
inc    %esp
inc    %ebp
or     %cs:0x69(%edi),%dl
je     8050e2a <_IO_stdin_used+0x146>
and    %ch,0x6665722d
gs
jb     8050e30 <_IO_stdin_used+0x14c>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2c(%ebp)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x6f(%ebp)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
je     8050e5a <_IO_stdin_used+0x176>
popa
je     8050e15 <_IO_stdin_used+0x131>
outsl  %ds:(%esi),(%dx)
data16
and    %dl,0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
or     %cs:(%edx),%cl
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c63,%eax
sub    $0x6e616863,%eax
addr16
gs
jae    8050e34 <_IO_stdin_used+0x150>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6b(%ecx,%ebp,2)
and    %dh,%gs:0x65(%esi)
jb     8050e88 <_IO_stdin_used+0x1a4>
outsl  %ds:(%esi),(%dx)
jae    8050e8e <_IO_stdin_used+0x1aa>
and    %ah,0x75(%edx)
je     8050e4e <_IO_stdin_used+0x16a>
jb     8050e95 <_IO_stdin_used+0x1b1>
jo     8050ea1 <_IO_stdin_used+0x1bd>
jb     8050ea8 <_IO_stdin_used+0x1c4>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8050e5a <_IO_stdin_used+0x176>
ja     8050ea4 <_IO_stdin_used+0x1c0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x20(%ecx)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x73(%bx,%di)
and    %ch,0x61(%ebp)
fs or  %fs:%gs:(%eax),%ah
and    %ch,0x2d202c66
sub    $0x656c6973,%eax
outsb  %ds:(%esi),(%dx)
je     8050e8b <_IO_stdin_used+0x1a7>
and    %ch,0x6975712d
gs
je     8050e88 <_IO_stdin_used+0x1a4>
and    %dh,0x75(%ebx)
jo     8050edd <_IO_stdin_used+0x1f9>
jb     8050ed4 <_IO_stdin_used+0x1f0>
jae    8050ee4 <_IO_stdin_used+0x200>
and    %ch,0x6f(%ebp)
jae    8050eea <_IO_stdin_used+0x206>
and    %ah,0x72(%ebp)
jb     8050eea <_IO_stdin_used+0x206>
jb     8050e9d <_IO_stdin_used+0x1b9>
insl   (%dx),%es:(%edi)
gs
jae    8050ef4 <_IO_stdin_used+0x210>
popa
addr16
gs
jae    8050e90 <_IO_stdin_used+0x1ac>
and    %ah,(%eax)
sub    $0x2d202c76,%eax
sub    $0x62726576,%eax
outsl  %ds:(%esi),(%dx)
jae    8050efa <_IO_stdin_used+0x216>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8050f16 <_IO_stdin_used+0x232>
jo     8050f19 <_IO_stdin_used+0x235>
je     8050ec6 <_IO_stdin_used+0x1e2>
popa
and    %ah,0x61(%ecx,%ebp,2)
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jae    8050f24 <_IO_stdin_used+0x240>
imul   $0x20726f66,0x20(%ebx),%esp
gs
jbe    8050f1f <_IO_stdin_used+0x23b>
jb     8050f35 <_IO_stdin_used+0x251>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8050f2f <_IO_stdin_used+0x24b>
or     %fs:(%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x2d6f6e2d
jo     8050f4f <_IO_stdin_used+0x26b>
gs
jae    8050f45 <_IO_stdin_used+0x261>
jb     8050f58 <_IO_stdin_used+0x274>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8050f11 <_IO_stdin_used+0x22d>
je     8050f65 <_IO_stdin_used+0x281>
gs
popa
je     8050f17 <_IO_stdin_used+0x233>
daa
das
daa
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8050f25 <_IO_stdin_used+0x241>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    8050f7c <_IO_stdin_used+0x298>
je     8050f3b <_IO_stdin_used+0x257>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6572702d
jae    8050f85 <_IO_stdin_used+0x2a1>
jb     8050f98 <_IO_stdin_used+0x2b4>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
and    %ah,(%eax)
popaw
imul   $0x706f206f,0x74(%eax,%eiz,1),%ebp
gs
jb     8050f9a <_IO_stdin_used+0x2b6>
je     8050fa0 <_IO_stdin_used+0x2bc>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8050fac <_IO_stdin_used+0x2c8>
jbe    8050faa <_IO_stdin_used+0x2c6>
insb   (%dx),%es:(%edi)
jns    8050f68 <_IO_stdin_used+0x284>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edi)
das
daa
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6665722d,%eax
gs
jb     8050fc3 <_IO_stdin_used+0x2df>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
jne    8050fde <_IO_stdin_used+0x2fa>
and    %dl,%gs:0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
daa
jae    8050f95 <_IO_stdin_used+0x2b1>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %ch,%fs:%gs:0x6e(%ecx)
jae    8050ff2 <_IO_stdin_used+0x30e>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %cl,0x4f(%ebp)
inc    %esp
inc    %ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8050ff4 <_IO_stdin_used+0x310>
jae    8050f9b <_IO_stdin_used+0x2b7>
add    %al,(%eax)
add    %ah,(%eax)
and    %ch,0x2d202c52
sub    $0x75636572,%eax
jb     8051015 <_IO_stdin_used+0x331>
imul   $0x20202020,0x65(%esi),%esi
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x69(%bp)
insb   (%dx),%es:(%edi)
gs
jae    8050fda <_IO_stdin_used+0x2f6>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x63657220,0x73(%ebp),%esp
jne    8051041 <_IO_stdin_used+0x35d>
jae    805103a <_IO_stdin_used+0x356>
jbe    8051038 <_IO_stdin_used+0x354>
insb   (%dx),%es:(%edi)
jns    8050fe0 <_IO_stdin_used+0x2fc>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     8051005 <_IO_stdin_used+0x321>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     805105b <_IO_stdin_used+0x377>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    805107e <_IO_stdin_used+0x39a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8051090 <_IO_stdin_used+0x3ac>
jo     8051093 <_IO_stdin_used+0x3af>
je     8051040 <_IO_stdin_used+0x35c>
jbe    8051087 <_IO_stdin_used+0x3a3>
jb     8051097 <_IO_stdin_used+0x3b3>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     805109b <_IO_stdin_used+0x3b7>
popa
je     805109a <_IO_stdin_used+0x3b6>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x450a0000,0x0(%edx,%ecx,1),%esi
popa
arpl   %bp,0x20(%eax)
dec    %ebp
dec    %edi
inc    %esp
inc    %ebp
and    %ch,0x73(%ecx)
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x6f(%esi)
jb     80510c6 <_IO_stdin_used+0x3e2>
and    %ah,(%edi)
pop    %ebx
jne    80510c5 <_IO_stdin_used+0x3e1>
outsl  %ds:(%esi),(%dx)
popa
pop    %ebp
sub    (%eax),%ch
pop    %ebx
sub    $0x285d3d2b,%eax
pop    %ebx
jb     80510e3 <_IO_stdin_used+0x3ff>
js     80510c6 <_IO_stdin_used+0x3e2>
jae    80510e4 <_IO_stdin_used+0x400>
pop    %ebp
sub    0x75(%ebx,%ebx,2),%bh
outsl  %ds:(%si),(%dx)
pop    %ebp
sub    %ebp,(%ecx)
sub    0x2d(%ebx,%ebx,2),%edi
sub    0x2d305b5d,%edi
aaa
pop    %ebp
sub    (%edi),%esp
or     %cs:(%eax),%al
add    %ch,0x74(%eax)
je     8051100 <_IO_stdin_used+0x41c>
cmp    (%edi),%ch
das
ja     805110c <_IO_stdin_used+0x428>
ja     80510c5 <_IO_stdin_used+0x3e1>
outsb  %ds:(%si),(%dx)
jne    80510c9 <_IO_stdin_used+0x3e5>
outsl  %ds:(%esi),(%dx)
jb     8051105 <_IO_stdin_used+0x421>
das
jae    8051110 <_IO_stdin_used+0x42c>
data16
je     805111b <_IO_stdin_used+0x437>
popa
jb     805110c <_IO_stdin_used+0x428>
das
arpl   %bp,0x72(%edi)
gs
jne    8051122 <_IO_stdin_used+0x43e>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     805111b <_IO_stdin_used+0x437>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     80510e1 <_IO_stdin_used+0x3fd>
jne    8051136 <_IO_stdin_used+0x452>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8051147 <_IO_stdin_used+0x463>
popa
jb     8051138 <_IO_stdin_used+0x454>
cmp    (%eax),%ah
cmp    $0x68,%al
je     805114d <_IO_stdin_used+0x469>
jo     8051115 <_IO_stdin_used+0x431>
das
das
ja     8051156 <_IO_stdin_used+0x472>
ja     805110f <_IO_stdin_used+0x42b>
outsb  %ds:(%si),(%dx)
jne    8051113 <_IO_stdin_used+0x42f>
outsl  %ds:(%esi),(%dx)
jb     805114f <_IO_stdin_used+0x46b>
das
addr16
gs
je     8051155 <_IO_stdin_used+0x471>
gs
insb   (%dx),%es:(%edi)
jo     8051120 <_IO_stdin_used+0x43c>
or     %ds:(%eax),%al
push   %edx
gs
jo     8051167 <_IO_stdin_used+0x483>
jb     805116e <_IO_stdin_used+0x48a>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8051170 <_IO_stdin_used+0x48c>
popa
je     8051170 <_IO_stdin_used+0x48c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 805112f <_IO_stdin_used+0x44b>
je     8051180 <_IO_stdin_used+0x49c>
and    %bh,(%eax,%ebp,2)
je     805118a <_IO_stdin_used+0x4a6>
jo     8051152 <_IO_stdin_used+0x46e>
das
das
je     805118e <_IO_stdin_used+0x4aa>
popa
outsb  %ds:(%esi),(%dx)
jae    805118c <_IO_stdin_used+0x4a8>
popa
je     805118c <_IO_stdin_used+0x4a8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     8051199 <_IO_stdin_used+0x4b5>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     8051197 <_IO_stdin_used+0x4b3>
das
je     8051198 <_IO_stdin_used+0x4b4>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     8051160 <_IO_stdin_used+0x47c>
arpl   %bp,0x6d(%edi)
jo     80511b1 <_IO_stdin_used+0x4cd>
gs
je     80511ad <_IO_stdin_used+0x4c9>
and    %ah,0x63(%edi,%ebp,2)
jne    80511bb <_IO_stdin_used+0x4d7>
outsb  %gs:(%esi),(%dx)
je     80511b3 <_IO_stdin_used+0x4cf>
je     80511bd <_IO_stdin_used+0x4d9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     80511cf <_IO_stdin_used+0x4eb>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     80511cb <_IO_stdin_used+0x4e7>
jne    80511dc <_IO_stdin_used+0x4f8>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
push   %edx
arpl   %sp,0x76(%esi)
jb     80511c0 <_IO_stdin_used+0x4dc>
cmp    0x3a(%edi),%dh
cmp    0x3a(%eax),%bh
cmp    0x3a(%eax),%bl
cmp    0x3a(%ebx),%dh
cmp    0x3a(%edx,%edi,1),%dh
jne    80511d2 <_IO_stdin_used+0x4ee>
cmp    0x3a(%edi),%ah
cmp    0x3a(%edi),%ch
cmp    0x3a(%ecx),%ah
cmp    (%edx,%edi,1),%ch
cmp    (%ebx),%ch
cmp    (%edx),%bh
cmp    $0x3a303a3a,%eax
cmp    (%ecx),%dh
cmp    (%edx),%bh
xor    (%edx),%bh
cmp    (%ebx),%dh
cmp    (%edx),%bh
xor    $0x3a,%al
cmp    0x3a363a3a,%dh
cmp    (%edi),%dh
cmp    (%edx),%bh
add    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80511eb <_IO_stdin_used+0x507>
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ch,%gs:0x6f(%ebp)
fs and %ah,%fs:%gs:0x6e(%ecx)
and    %ch,%fs:0x6665722d
gs
jb     8051249 <_IO_stdin_used+0x565>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
outsl  %ds:(%esi),(%dx)
jo     805125f <_IO_stdin_used+0x57b>
imul   $0x61660073,0x6e(%edi),%ebp
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     805121e <_IO_stdin_used+0x53a>
popa
je     8051275 <_IO_stdin_used+0x591>
jb     805126c <_IO_stdin_used+0x588>
bound  %esi,0x74(%ebp)
gs
jae    8051229 <_IO_stdin_used+0x545>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x63000073
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051237 <_IO_stdin_used+0x553>
outsl  %ds:(%esi),(%dx)
jo     805127f <_IO_stdin_used+0x59b>
jb     805127d <_IO_stdin_used+0x599>
je     8051283 <_IO_stdin_used+0x59f>
and    %ch,0x6e(%edi)
and    %ah,0x6e(%ecx,%eiz,2)
insb   (%dx),%es:(%di)
imul   $0x6d797320,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
imul   $0x732520,0x6b(%esi),%ebp
add    %al,(%eax)
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
inc    %ebx
imul   $0x72616c75,0x63(%edx),%esi
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051274 <_IO_stdin_used+0x590>
jae    80512ca <_IO_stdin_used+0x5e6>
jb     80512cd <_IO_stdin_used+0x5e9>
arpl   %si,0x72(%ebp,%esi,2)
gs or  %cs:%gs:0x69(%eax,%ebp,2),%dl
jae    8051284 <_IO_stdin_used+0x5a0>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80512de <_IO_stdin_used+0x5fa>
and    %ah,0x65(%ebx)
jb     80512e3 <_IO_stdin_used+0x5ff>
popa
imul   $0x656d2079,0x6c(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
jae    805129b <_IO_stdin_used+0x5b7>
je     80512e5 <_IO_stdin_used+0x601>
popa
je     80512a0 <_IO_stdin_used+0x5bc>
jns    80512f1 <_IO_stdin_used+0x60d>
jne    80512a4 <_IO_stdin_used+0x5c0>
push   $0x20657661
popa
and    %ah,0x6f(%ebx)
jb     8051301 <_IO_stdin_used+0x61d>
jne    8051301 <_IO_stdin_used+0x61d>
je     80512f8 <_IO_stdin_used+0x614>
and    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x79(%ebx)
jae    8051312 <_IO_stdin_used+0x62e>
gs
insl   (%dx),%es:(%edi)
or     %cs:0x4f(%esi),%cl
push   %esp
dec    %ecx
inc    %esi
pop    %ecx
and    %bl,0x4f(%ecx)
push   %ebp
push   %edx
and    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
and    %cl,0x41(%ebp)
dec    %esi
inc    %ecx
inc    %edi
inc    %ebp
push   %edx
or     %cs:0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8051332 <_IO_stdin_used+0x64e>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%si)
jb     8051335 <_IO_stdin_used+0x651>
arpl   %si,0x72(%edi,%ebp,2)
jns    80512f6 <_IO_stdin_used+0x612>
imul   $0x74726170,0x20(%ebx),%esi
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x79(%ebx)
arpl   %bp,0x3a(%ebp,%eiz,2)
or     (%eax),%ah
and    %ah,0xa73
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     8051370 <_IO_stdin_used+0x68c>
jne    8051376 <_IO_stdin_used+0x692>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     805136f <_IO_stdin_used+0x68b>
jb     805136d <_IO_stdin_used+0x689>
je     8051373 <_IO_stdin_used+0x68f>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    805137f <_IO_stdin_used+0x69b>
jbe    805137d <_IO_stdin_used+0x699>
insb   (%dx),%es:(%edi)
jns    805133b <_IO_stdin_used+0x657>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     80513a0 <_IO_stdin_used+0x6bc>
jne    80513a6 <_IO_stdin_used+0x6c2>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     805139f <_IO_stdin_used+0x6bb>
jb     805139d <_IO_stdin_used+0x6b9>
je     80513a3 <_IO_stdin_used+0x6bf>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    80513af <_IO_stdin_used+0x6cb>
jbe    80513ad <_IO_stdin_used+0x6c9>
insb   (%dx),%es:(%edi)
jns    805136b <_IO_stdin_used+0x687>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73282073
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x2973
add    %dh,0x73(%ebp)
and    %ch,%gs:0x2d6f6e2d
jo     80513dd <_IO_stdin_used+0x6f9>
gs
jae    80513d3 <_IO_stdin_used+0x6ef>
jb     80513e6 <_IO_stdin_used+0x702>
gs
sub    $0x746f6f72,%eax
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jbe    80513e2 <_IO_stdin_used+0x6fe>
jb     80513f1 <_IO_stdin_used+0x70d>
imul   $0x73696874,0x20(%ebp,%eiz,2),%esp
and    %ah,0x61(%esi)
imul   $0x6566,0x61(%ebx,%esi,2),%ebp
add    %al,(%eax)
and    $0x6e203a73,%eax
gs
ja     80513bc <_IO_stdin_used+0x6d8>
jo     8051403 <_IO_stdin_used+0x71f>
jb     805140d <_IO_stdin_used+0x729>
imul   $0x736e6f69,0x73(%ebx),%esi
and    %ah,0x72(%ecx)
and    %ah,%gs:0x6e202c73
outsl  %ds:(%esi),(%dx)
je     80513d4 <_IO_stdin_used+0x6f0>
and    $0x6d000073,%eax
outsl  %ds:(%esi),(%dx)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x68632073
popa
outsb  %ds:(%esi),(%dx)
gs and %ah,%fs:%gs:0x72(%bp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f6c3430
and    %ch,(%eax)
and    $0x74202973,%eax
outsl  %ds:(%esi),(%dx)
and    %ah,0x6f6c3430
and    %ch,(%eax)
and    $0xa2973,%eax
add    %al,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6f(%di)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f6c3430
and    %ch,(%eax)
and    $0x74202973,%eax
outsl  %ds:(%esi),(%dx)
and    %ah,0x6f6c3430
and    %ch,(%eax)
and    $0xa2973,%eax
add    %ch,0x6f(%ebp)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x65722073
je     8051498 <_IO_stdin_used+0x7b4>
imul   $0x73612064,0x65(%esi),%ebp
and    %ah,0x6f6c3430
and    %ch,(%eax)
and    $0xa2973,%eax
add    %ch,0x65(%esi)
imul   $0x79732072,0x65(%eax,%ebp,2),%esi
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ah,0x6f6e2073
jb     8051489 <_IO_stdin_used+0x7a5>
jb     80514d0 <_IO_stdin_used+0x7ec>
data16
gs
jb     80514d4 <_IO_stdin_used+0x7f0>
outsb  %ds:(%esi),(%dx)
je     8051492 <_IO_stdin_used+0x7ae>
push   $0x62207361
gs outsb %gs:(%esi),(%dx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
gs or  %fs:%gs:(%bx,%si),%al
or     0x65(%edx),%dl
jo     80514f8 <_IO_stdin_used+0x814>
jb     80514ff <_IO_stdin_used+0x81b>
and    %ah,0x75622073
addr16 jae 80514b4 <_IO_stdin_used+0x7d0>
je     8051505 <_IO_stdin_used+0x821>
and    %ah,0x62000a73
jne    8051505 <_IO_stdin_used+0x821>
sub    $0x65726f63,%eax
jne    8051519 <_IO_stdin_used+0x835>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051517 <_IO_stdin_used+0x833>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    8051501 <_IO_stdin_used+0x81d>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     8051532 <_IO_stdin_used+0x84e>
jne    8051543 <_IO_stdin_used+0x85f>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    805154d <_IO_stdin_used+0x869>
jb     805150b <_IO_stdin_used+0x827>
jae    8051546 <_IO_stdin_used+0x862>
popa
jb     8051546 <_IO_stdin_used+0x862>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %cl,%gs:0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x65(%ebp)
jns    8051556 <_IO_stdin_used+0x872>
jb     805155c <_IO_stdin_used+0x878>
outsb  %ds:(%esi),(%dx)
add    %al,0x61(%si)
jbe    8051563 <_IO_stdin_used+0x87f>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     805156d <_IO_stdin_used+0x889>
add    %ah,%gs:0x68(%ebx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
add    %ch,%fs:0x69(%ebp)
jae    8051583 <_IO_stdin_used+0x89f>
imul   $0x65706f20,0x67(%esi),%ebp
jb     805157a <_IO_stdin_used+0x896>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x69(%ebp)
jae    8051593 <_IO_stdin_used+0x8af>
imul   $0x65706f20,0x67(%esi),%ebp
jb     805158a <_IO_stdin_used+0x8a6>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x66(%ecx)
je     8051595 <_IO_stdin_used+0x8b1>
jb     8051552 <_IO_stdin_used+0x86e>
and    $0x6e690073,%eax
jbe    805159a <_IO_stdin_used+0x8b6>
insb   (%dx),%es:(%edi)
imul   $0x3a65646f,0x6d(%eax,%eiz,1),%esp
and    %ah,0x74660073
jae    80515a9 <_IO_stdin_used+0x8c5>
jb     80515b1 <_IO_stdin_used+0x8cd>
popa
and    %ah,%fs:0x61(%esi)
imul   $0x6e616300,0x64(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805157d <_IO_stdin_used+0x899>
popa
arpl   %sp,0x65(%ebx)
jae    80515d6 <_IO_stdin_used+0x8f2>
and    %ah,0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805158e <_IO_stdin_used+0x8aa>
jb     80515d5 <_IO_stdin_used+0x8f1>
popa
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    805159d <_IO_stdin_used+0x8b9>
and    $0x68630073,%eax
popa
outsb  %ds:(%esi),(%dx)
imul   $0x72657020,0x67(%bp),%ebp
insl   (%dx),%es:(%edi)
imul   $0x736e6f69,0x73(%ebx),%esi
and    %ch,0x66(%edi)
and    %ah,0x65670073
je     8051613 <_IO_stdin_used+0x92f>
imul   $0x77656e20,0x67(%esi),%ebp
and    %ah,0x74(%ecx)
je     805161d <_IO_stdin_used+0x939>
imul   $0x20736574,0x75(%edx),%esp
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x74660073
jae    805161b <_IO_stdin_used+0x937>
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x61(%esi)
imul   $0x61686300,0x64(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
addr16
gs
jae    80515d1 <_IO_stdin_used+0x8ed>
jb     8051638 <_IO_stdin_used+0x954>
arpl   %si,0x72(%ebp)
jae    8051641 <_IO_stdin_used+0x95d>
jbe    805163f <_IO_stdin_used+0x95b>
add    %ch,0x6f(%esi)
sub    $0x73657270,%eax
gs
jb     805165b <_IO_stdin_used+0x977>
gs
sub    $0x746f6f72,%eax
add    %dh,0x75(%ecx)
imul   $0x66657200,0x74(%ebp),%esp
gs
jb     805165d <_IO_stdin_used+0x979>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
jae    8051667 <_IO_stdin_used+0x983>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     8051603 <_IO_stdin_used+0x91f>
jbe    805166a <_IO_stdin_used+0x986>
jb     8051669 <_IO_stdin_used+0x985>
outsl  %ds:(%esi),(%dx)
jae    805166f <_IO_stdin_used+0x98b>
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051610 <_IO_stdin_used+0x92c>
jbe    8051677 <_IO_stdin_used+0x993>
jb     8051687 <_IO_stdin_used+0x9a3>
imul   $0x0,0x6e(%edi),%ebp
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%eax,%ebx,4)
add    $0x8,%al
push   %eax
cwtl
add    $0x8,%al
or     -0x67aff7fc(%edi),%dl
add    $0x8,%al
std
xchg   %eax,%esi
add    $0x8,%al
cmp    $0x5008049a,%eax
cwtl
add    $0x8,%al
push   %eax
cwtl
add    $0x8,%al
aad    $0x99
add    $0x8,%al
push   %eax
cwtl
add    $0x8,%al
push   %eax
cwtl
add    $0x8,%al
jge    80515e7 <_IO_stdin_used+0x903>
add    $0x8,%al
leave
adc    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
arpl   %ax,(%eax)
add    %al,(%eax)
rcll   0x805
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %edx
add    %al,(%eax)
add    %bl,%bl
adc    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %bl,%dh
adc    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x15ec0000,(%eax)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
repnz adc $0x10805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
(bad)
add    %al,(%eax)
add    %bh,%ah
adc    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
data16
add    %al,(%eax)
add    %al,(%ebx)
push   %ss
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
or     (%esi),%edx
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%esi)
(bad)
call   *(%eax)
push   %ss
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     8051721 <_IO_stdin_used+0xa3d>
and    $0x25203a73,%eax
jae    8051728 <_IO_stdin_used+0xa44>
sbb    %ch,-0x5598f7fc(%ebx)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
dec    %eax
stos   %eax,%es:(%edi)
add    $0x8,%al
inc    %eax
stos   %eax,%es:(%edi)
add    $0x8,%al
cmp    %ch,-0x5598f7fc(%ebx)
add    $0x8,%al
stos   %al,%es:(%di)
add    $0x8,%al
xor    %ch,-0x54d7f7fc(%ebx)
add    $0x8,%al
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8051813 <_IO_stdin_used+0xb2f>
xor    %bl,0x20(%ebp)
ja     805181e <_IO_stdin_used+0xb3a>
jae    80517df <_IO_stdin_used+0xafb>
jo     8051822 <_IO_stdin_used+0xb3e>
jae    8051836 <_IO_stdin_used+0xb52>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    8051833 <_IO_stdin_used+0xb4f>
push   $0x206e6120
gs
js     8051839 <_IO_stdin_used+0xb55>
arpl   %sp,(%eax)
jae    8051851 <_IO_stdin_used+0xb6d>
jae    805184e <_IO_stdin_used+0xb6a>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     805186e <_IO_stdin_used+0xb8a>
jb     805186c <_IO_stdin_used+0xb88>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8051892 <_IO_stdin_used+0xbae>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    8051888 <_IO_stdin_used+0xba4>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
cwtl
mov    $0x4,%al
or     %bh,-0x4a(%eax)
add    $0x8,%al
test   $0xb6,%al
add    $0x8,%al
push   $0xa80804b5
mov    $0x4,%ch
or     %bl,%al
mov    $0x4,%ch
or     %al,(%eax)
mov    $0x4,%dh
or     %al,(%eax)
mov    $0x4,%dh
or     %al,(%eax)
mov    $0x4,%dh
or     %ah,-0x67f7fb4d(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,0x180804b4(%eax)
mov    $0x4,%ah
or     %bh,-0x4d(%eax)
add    $0x8,%al
cwtl
mov    $0x4,%bl
or     %dl,-0x77f7fb4d(%eax)
mov    $0x4,%bl
or     %al,0x500804b3(%eax)
mov    $0x4,%bl
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %bl,-0x67f7fb4c(%eax)
mov    $0x4,%ah
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %al,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,-0x4c(%eax)
add    $0x8,%al
leave
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %cl,-0x67f7fb4f(%eax)
mov    $0x4,%ah
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %ch,(%eax)
mov    $0x4,%ah
or     %bh,(%eax)
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %cl,%cl
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %bh,(%eax)
mov    $0x4,%dl
or     %ah,-0x36f7fb4e(%eax)
mov    $0x4,%dl
or     %ah,-0x3ef7fb4e(%eax)
mov    $0x4,%dl
or     %al,%al
mov    $0xb8c00804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8c00804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8c00804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8c00804,%eax
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %al,0xd080518
sbb    %al,0x5181308
or     %ah,0x2008051e(%eax)
sbb    %al,0x5182808
or     %ah,%dl
adc    $0x5,%al
or     %ch,(%edi)
sbb    %al,0x8
add    %ah,0x25282073
jae    8051b74 <_IO_stdin_used+0xe90>
and    %ah,0x25000a73
jae    8051b73 <_IO_stdin_used+0xe8f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8051bc7 <_IO_stdin_used+0xee3>
je     8051bd4 <_IO_stdin_used+0xef0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8051bd7 <_IO_stdin_used+0xef3>
je     8051be4 <_IO_stdin_used+0xf00>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     8051bee <_IO_stdin_used+0xf0a>
je     8051bfb <_IO_stdin_used+0xf17>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051bc0 <_IO_stdin_used+0xedc>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8051c12 <_IO_stdin_used+0xf2e>
jb     8051c19 <_IO_stdin_used+0xf35>
and    %ah,0x75(%edx)
addr16 jae 8051bcb <_IO_stdin_used+0xee7>
je     8051c1c <_IO_stdin_used+0xf38>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8051c21 <_IO_stdin_used+0xf3d>
and    %al,0x50(%edi)
dec    %esp
jbe    8051bf5 <_IO_stdin_used+0xf11>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8051c44 <_IO_stdin_used+0xf60>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     8051bfa <_IO_stdin_used+0xf16>
insb   (%dx),%es:(%edi)
popa
je     8051c43 <_IO_stdin_used+0xf5f>
jb     8051c00 <_IO_stdin_used+0xf1c>
cmp    $0x68,%al
je     8051c58 <_IO_stdin_used+0xf74>
jo     8051c20 <_IO_stdin_used+0xf3c>
das
das
outsb  %ds:(%si),(%dx)
jne    8051c1a <_IO_stdin_used+0xf36>
outsl  %ds:(%esi),(%dx)
jb     8051c56 <_IO_stdin_used+0xf72>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8051c68 <_IO_stdin_used+0xf84>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8051c29 <_IO_stdin_used+0xf45>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     8051c8d <_IO_stdin_used+0xfa9>
popa
jb     8051c7e <_IO_stdin_used+0xf9a>
cmp    (%eax),%ah
jns    8051c8c <_IO_stdin_used+0xfa8>
jne    8051c3f <_IO_stdin_used+0xf5b>
popa
jb     8051c87 <_IO_stdin_used+0xfa3>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8051ca7 <_IO_stdin_used+0xfc3>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8051cb1 <_IO_stdin_used+0xfcd>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     8051cce <_IO_stdin_used+0xfea>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     8051ccd <_IO_stdin_used+0xfe9>
outsb  %ds:(%esi),(%dx)
je     8051c8b <_IO_stdin_used+0xfa7>
jo     8051cd2 <_IO_stdin_used+0xfee>
jb     8051cdc <_IO_stdin_used+0xff8>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     8051cec <_IO_stdin_used+0x1008>
je     8051cf9 <_IO_stdin_used+0x1015>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051cbe <_IO_stdin_used+0xfda>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051d0c <_IO_stdin_used+0x1028>
je     8051d19 <_IO_stdin_used+0x1035>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051cde <_IO_stdin_used+0xffa>
and    %ah,0x250a2c73
jae    8051ce6 <_IO_stdin_used+0x1002>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051d30 <_IO_stdin_used+0x104c>
je     8051d3d <_IO_stdin_used+0x1059>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051d02 <_IO_stdin_used+0x101e>
and    %ah,0x250a2c73
jae    8051d0a <_IO_stdin_used+0x1026>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051d58 <_IO_stdin_used+0x1074>
je     8051d65 <_IO_stdin_used+0x1081>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051d2a <_IO_stdin_used+0x1046>
and    %ah,0x250a2c73
jae    8051d32 <_IO_stdin_used+0x104e>
and    %ah,0x25202c73
jae    8051d3a <_IO_stdin_used+0x1056>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051d84 <_IO_stdin_used+0x10a0>
je     8051d91 <_IO_stdin_used+0x10ad>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051d56 <_IO_stdin_used+0x1072>
and    %ah,0x250a2c73
jae    8051d5e <_IO_stdin_used+0x107a>
and    %ah,0x25202c73
jae    8051d66 <_IO_stdin_used+0x1082>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051db4 <_IO_stdin_used+0x10d0>
je     8051dc1 <_IO_stdin_used+0x10dd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051d86 <_IO_stdin_used+0x10a2>
and    %ah,0x250a2c73
jae    8051d8e <_IO_stdin_used+0x10aa>
and    %ah,0x25202c73
jae    8051d96 <_IO_stdin_used+0x10b2>
and    %ah,0x250a2c73
jae    8051d9e <_IO_stdin_used+0x10ba>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051de8 <_IO_stdin_used+0x1104>
je     8051df5 <_IO_stdin_used+0x1111>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051dba <_IO_stdin_used+0x10d6>
and    %ah,0x250a2c73
jae    8051dc2 <_IO_stdin_used+0x10de>
and    %ah,0x25202c73
jae    8051dca <_IO_stdin_used+0x10e6>
and    %ah,0x250a2c73
jae    8051dd2 <_IO_stdin_used+0x10ee>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
lock lds (%eax,%ecx,1),%eax
clc
lds    (%eax,%ecx,1),%eax
cmp    %al,%dh
add    $0x8,%al
add    $0x4,%dh
or     %bl,%al
movb   $0x30,(%eax,%ecx,1)
movl   $0x804c798,(%eax,%ecx,1)
adc    %cl,%al
add    $0x8,%al
mov    $0xc4,%al
add    $0x8,%al
dec    %eax
lds    (%eax,%ecx,1),%eax
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     8051e5d <_IO_stdin_used+0x1179>
jb     8051e4f <_IO_stdin_used+0x116b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8051e71 <_IO_stdin_used+0x118d>
popa
jb     8051e62 <_IO_stdin_used+0x117e>
and    %al,0x6f(%esi)
jne    8051e70 <_IO_stdin_used+0x118c>
fs
popa
je     8051e6f <_IO_stdin_used+0x118b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8051e8e <_IO_stdin_used+0x11aa>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     8051e8c <_IO_stdin_used+0x11a8>
je     8051e9b <_IO_stdin_used+0x11b7>
arpl   %ax,%cs:(%eax)
sub    %ch,(%edx)
pop    %edi
pop    %edi
gs
jb     8051ea4 <_IO_stdin_used+0x11c0>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x29292820,0x6e(%edi),%ebp
and    %ah,(%ecx)
cmp    $0x323220,%eax
js     8051eb0 <_IO_stdin_used+0x11cc>
je     8051ebf <_IO_stdin_used+0x11db>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8051eb5 <_IO_stdin_used+0x11d1>
outsb  %ds:(%esi),(%dx)
add    %ch,(%esi)
add    %al,%cs:(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6c637963,0x2f(%edx),%esp
gs
sub    $0x63656863,%eax
imul   $0x63,(%esi),%ebp
add    %dh,0x74(%ebx)
popa
je     8051f0c <_IO_stdin_used+0x1228>
sub    $0x67616d3e,%eax
imul   $0x39203d3d,0x20(%ebx),%esp
cmp    %dh,(%edx)
aaa
cmp    %dh,(%esi)
xor    (%eax),%al
arpl   %di,0x63(%ecx)
insb   (%dx),%es:(%edi)
gs
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x0(%ebx)
and    (%eax),%esp
outsb  %gs:(%esi),(%dx)
je     8051f3e <_IO_stdin_used+0x125a>
imul   $0x2020203a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
cmp    (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
insl   (%dx),%es:(%edi)
popa
js     8051f1a <_IO_stdin_used+0x1236>
bound  %esi,0x63(%ebp)
imul   $0x20,0x74(%ebp),%esp
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8051f6f <_IO_stdin_used+0x128b>
cmp    (%eax),%ah
and    $0xa756c,%eax
add    %al,(%eax)
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %dh,0x73(%ebp)
gs cmp %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,0x2820756c
and    $0x2566322e,%eax
and    $0xa29,%eax
cmpb   $0xcd,(%edi)
int3
dec    %esp
aas
hlt
std
mov    $0x3f,%ah
add    %al,(%eax)
add    %al,(%eax)
int    $0xcc
int3
cmp    $0x3f666666,%eax
int    $0xcc
mov    %?,(%edi)
add    %al,(%eax)
enter  $0x42,$0x0
orb    $0x75,0x2f(%edi)
jae    8051fd2 <_IO_stdin_used+0x12ee>
das
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
js     8051f92 <_IO_stdin_used+0x12ae>
add    %al,(%eax)
mov    (%eax),%es
add    %al,(%eax)
mov    $0x94ffff6e,%eax
add    $0x0,%al
add    %bh,%al
jb     8051f9e <_IO_stdin_used+0x12ba>
(bad)
fadds  (%eax,%eax,1)
add    %bl,%al
(bad)
(bad)
(bad)
mov    $0x48000004,%eax
xchg   %bh,%bh
(bad)
clc
add    $0x0,%al
add    %bl,-0x7a(%eax)
(bad)
decl   -0x79980000(,%eax,1)
(bad)
jmp    *(%eax)
add    $0x87380000,%eax
(bad)
decl   0x0(%ebp,%eax,1)
add    %bl,0x6cffff87(%eax)
add    $0x87d80000,%eax
(bad)
call   *-0x47fffffb(%eax)
mov    %edi,%edi
(bad)
mov    $0xc8000005,%eax
mov    %edi,%edi
dec    %esp
add    $0x8cf80000,%eax
(bad)
jmp    *(%esi,%eax,1)
add    %al,(%eax)
pop    %eax
(bad)
(bad)
decl   0x6(%eax)
add    %al,(%eax)
enter  $0xff8e,$0xff
mov    %al,(%esi)
add    %al,(%eax)
js     8051f95 <_IO_stdin_used+0x12b1>
(bad)
dec    %eax
push   %es
add    %al,(%eax)
test   $0x8f,%al
(bad)
push   %esp
push   %es
add    %al,(%eax)
cwtl
nop
(bad)
ljmp   *(%edi,%eax,1)
add    %al,(%eax)
enter  $0xff9a,$0xff
jo     8052029 <_IO_stdin_used+0x1345>
add    %al,(%eax)
push   $0xb0ffff9c
pop    %es
add    %al,(%eax)
test   $0x9c,%al
(bad)
jmp    *%esp
pop    %es
add    %al,(%eax)
enter  $0xff9c,$0xff
clc
pop    %es
add    %al,(%eax)
call   15051fdd <optarg+0xcffcdf9>
or     %al,(%eax)
add    %ch,(%eax)
popf
(bad)
pushl  (%eax)
or     %al,(%eax)
add    %cl,-0x63(%eax)
(bad)
incl   0x0(%eax,%ecx,1)
add    %cl,0x68ffff9d(%eax)
or     %al,(%eax)
add    %ch,%al
popf
(bad)
lcall  *-0x61380000(%eax,%ecx,1)
(bad)
(bad)
fmuls  (%eax)
add    %al,(%eax)
clc
sahf
(bad)
push   %eax
or     %al,(%eax)
add    %cl,0x24ffff9f(%eax)
or     %eax,(%eax)
add    %ch,0x38ffff9f(%eax)
or     %eax,(%eax)
add    %cl,%al
lahf
(bad)
decl   0x0(%ecx,%ecx,1)
add    %ch,%al
lahf
(bad)
jmp    *0x9(%eax)
add    %al,(%eax)
or     %ah,0x974ffff(%eax)
add    %al,(%eax)
cmp    %ah,0x994ffff(%eax)
add    %al,(%eax)
push   $0xb4ffffa0
or     %eax,(%eax)
add    %bl,-0x33000060(%eax)
or     %eax,(%eax)
add    %cl,%al
mov    0x9e4ffff,%al
add    %al,(%eax)
js     805205f <_IO_stdin_used+0x137b>
(bad)
decl   (%eax)
or     (%eax),%al
add    %ch,0x20ffffa1(%eax)
or     (%eax),%al
add    %bl,%al
mov    0xa38ffff,%eax
add    %al,(%eax)
or     %ah,0xa50ffff(%edx)
add    %al,(%eax)
mov    $0x74ffffa2,%eax
or     (%eax),%al
add    %bh,%al
mov    %al,0xa8cffff
add    %al,(%eax)
cmp    %ah,0xaa4ffff(%ebx)
add    %al,(%eax)
js     8052099 <_IO_stdin_used+0x13b5>
(bad)
(bad)
mov    $0x9800000a,%esp
mov    %eax,0xad0ffff
add    %al,(%eax)
mov    $0xe4ffffa3,%eax
or     (%eax),%al
add    %bl,%al
mov    %eax,0xaf8ffff
add    %al,(%eax)
clc
mov    %eax,0xb0cffff
add    %al,(%eax)
pop    %eax
movsb  %ds:(%esi),%es:(%edi)
(bad)
(bad)
cmp    %cl,(%ebx)
add    %al,(%eax)
enter  $0xffa9,$0xff
aam    $0xb
add    %al,(%eax)
sbb    %ch,0xbecffff(%edx)
add    %al,(%eax)
js     80520e0 <_IO_stdin_used+0x13fc>
(bad)
call   *(%eax)
or     $0x0,%al
add    %bh,0x28ffffaa(%eax)
or     $0x0,%al
add    %ch,-0x55(%eax)
(bad)
decl   0x0(%esp,%ecx,1)
add    %bl,0x70ffffab(%eax)
or     $0x0,%al
add    %cl,%al
stos   %eax,%es:(%edi)
(bad)
call   *-0x54280000(%esp,%ecx,1)
(bad)
ljmp   *0x2800000c(%eax)
lods   %ds:(%esi),%al
(bad)
(bad)
fmuls  (%eax,%eax,1)
add    %ch,-0x54(%eax)
(bad)
incl   -0x53380000(,%ecx,1)
(bad)
pushl  -0x52e80000(,%ecx,1)
(bad)
lcall  *0xd(%eax)
add    %al,(%eax)
dec    %eax
lods   %ds:(%esi),%eax
(bad)
(bad)
js     8052197 <_IO_stdin_used+0x14b3>
add    %al,(%eax)
js     805213b <_IO_stdin_used+0x1457>
(bad)
call   *-0x52580000(%ebp,%ecx,1)
(bad)
pushl  -0x52280000(%ebp,%ecx,1)
(bad)
call   *%esp
or     $0xae280000,%eax
(bad)
(bad)
call   a00521ba <optarg+0x97ffcfd6>
scas   %es:(%edi),%al
(bad)
incl   (%esi,%ecx,1)
add    %al,(%eax)
enter  $0xffae,$0xff
sbb    %cl,(%esi)
add    %al,(%eax)
or     %ch,0xe48ffff(%edi)
add    %al,(%eax)
cmp    %ch,0xe60ffff(%edi)
add    %al,(%eax)
push   $0x78ffffaf
push   %cs
add    %al,(%eax)
mov    %ch,0xe8cffff(%edi)
add    %al,(%eax)
clc
scas   %es:(%edi),%eax
(bad)
inc    %eax
push   %cs
add    %al,(%eax)
fdivs  0xf18ffff(%eax)
add    %al,(%eax)
pop    %eax
mov    $0xff,%cl
call   *0x0(%edi,%ecx,1)
add    %bl,-0x7f00004f(%eax)
sldt   (%eax)
fdivs  0xfa4ffff(%ecx)
add    %al,(%eax)
cmp    %dh,0xfe0ffff(%edx)
add    %al,(%eax)
cwtl
mov    $0xff,%dl
lcall  *(%eax)
adc    %al,(%eax)
add    %ch,-0x4c(%eax)
(bad)
pushl  0x10(%eax)
add    %al,(%eax)
call   a90521d5 <optarg+0xa0ffcff1>
adc    %al,(%eax)
add    %bl,-0x4b(%eax)
(bad)
dec    %esp
adc    %al,(%eax)
add    %cl,%al
mov    $0xff,%ch
(bad)
cld
adc    %al,(%eax)
add    %ch,%al
mov    $0xff,%bh
(bad)
cmp    $0x11,%al
add    %al,(%eax)
enter  $0xffb8,$0xff
test   $0x11,%al
add    %al,(%eax)
cwtl
mov    $0x11e4ffff,%ecx
add    %al,(%eax)
mov    $0x84ffffc2,%eax
adc    (%eax),%al
add    %bh,(%eax)
(bad)
(bad)
push   %esp
adc    (%eax),%al
add    %cl,%al
(bad)
(bad)
ljmp   *(%ebx,%edx,1)
add    %al,(%eax)
fmul   %st(7),%st
(bad)
lcall  *-0x2fe80000(%ebx,%edx,1)
(bad)
(bad)
mov    $0x78000013,%esp
sar    %edi
incl   0x14(%eax)
add    %al,(%eax)
call   81052252 <optarg+0x78ffd06e>
adc    $0x0,%al
add    %bl,(%eax)
sar    %cl,%bh
call   *-0x67ffffec(%eax)
sar    %cl,%bh
(bad)
call   c00522a9 <optarg+0xb7ffd0c5>
sar    %cl,%bh
(bad)
cld
adc    $0x0,%al
add    %ch,0x54ffffd3(%eax)
adc    $0xd3e80000,%eax
(bad)
ljmp   *0x0(%ebp,%edx,1)
add    %bh,-0x2c(%eax)
(bad)
ljmp   *-0x77ffffeb(%eax)
aam    $0xff
(bad)
mov    $0x98000015,%esp
aam    $0xff
call   *%eax
adc    $0xd4c80000,%eax
(bad)
push   %esp
adc    $0xd5880000,%eax
(bad)
jmp    *0x16(%eax)
add    %al,(%eax)
cmp    %dl,%dh
(bad)
pushl  0x0(%esi,%edx,1)
add    %cl,-0x29(%eax)
(bad)
dec    %eax
push   %ss
add    %al,(%eax)
pop    %eax
xlat   %ds:(%ebx)
(bad)
(bad)
fcoml  (%esi)
add    %al,(%eax)
push   $0xf0ffffd7
push   %ss
add    %al,(%eax)
js     80522cd <_IO_stdin_used+0x15e9>
(bad)
incl   (%edi,%edx,1)
add    %al,(%eax)
enter  $0xffd7,$0xff
sub    %dl,(%edi)
add    %al,(%eax)
sub    %bl,%al
(bad)
jmp    *0x0(%edi,%edx,1)
add    %bh,(%eax)
fcos
jmp    *-0x67ffffe9(%eax)
fcos
(bad)
call   e0052334 <optarg+0xd7ffd150>
fcos
decl   (%eax)
sbb    %al,(%eax)
add    %bh,(%eax)
(bad)
incl   0x0(%eax,%ebx,1)
add    %bl,0x7cffffda(%eax)
sbb    %al,(%eax)
add    %bl,(%eax)
(bad)
(bad)
mov    $0x58000018,%eax
(bad)
(bad)
fcompl (%eax)
add    %al,(%eax)
mov    %bl,%bl
(bad)
push   %eax
sbb    %al,(%eax)
add    %cl,%al
fdivr  %st,%st(7)
decl   0x19(%eax)
add    %al,(%eax)
pop    %eax
(bad)
(bad)
jl     8052373 <_IO_stdin_used+0x168f>
add    %al,(%eax)
sub    %bl,%dh
(bad)
pushl  -0x20480000(%ecx,%ebx,1)
(bad)
jmp    *(%edx,%ebx,1)
add    %al,(%eax)
mov    %ah,%cl
(bad)
incl   -0x67ffffe6(%eax)
loope  8052376 <_IO_stdin_used+0x1692>
call   *-0x1e280000(%edx,%ebx,1)
(bad)
(bad)
mov    $0x4800001a,%eax
jecxz  8052386 <_IO_stdin_used+0x16a2>
(bad)
clc
sbb    (%eax),%al
add    %bh,-0x1d(%eax)
(bad)
decl   (%ebx,%ebx,1)
add    %al,(%eax)
mov    %ah,%bl
(bad)
jmp    *(%eax)
sbb    (%eax),%eax
add    %cl,%al
jecxz  805239e <_IO_stdin_used+0x16ba>
decl   0x0(%ebx,%ebx,1)
add    %cl,(%eax)
in     $0xff,%al
decl   -0x37ffffe5(%eax)
out    %eax,$0xff
dec    %eax
sbb    (%eax),%eax
add    %cl,(%eax)
call   23e623b9 <optarg+0x1be0d1d5>
add    %al,(%eax)
cmp    %ch,%al
(bad)
(bad)
clc
sbb    (%eax),%eax
add    %bh,-0x18(%eax)
(bad)
pushl  (%esp,%ebx,1)
add    %al,(%eax)
sbb    %ch,%cl
(bad)
(bad)
jl     80523ee <_IO_stdin_used+0x170a>
add    %al,(%eax)
cmp    %ch,%dl
(bad)
inc    %esp
sbb    $0x0,%al
add    %bl,-0xf000016(%eax)
sbb    $0x0,%al
add    %ch,(%eax)
jmp    80523e6 <_IO_stdin_used+0x1702>
decl   0x1d(%eax)
add    %al,(%eax)
mov    %ch,%ah
(bad)
pushl  -0x13080000(%ebp,%ebx,1)
(bad)
push   %eax
sbb    $0xed080000,%eax
(bad)
incl   (%esi,%ebx,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805241b <_IO_stdin_used+0x1737>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x6a,%al
(bad)
incl   0x4(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805243b <_IO_stdin_used+0x1757>
js     8052439 <_IO_stdin_used+0x1755>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,(%eax)
jle    805244a <_IO_stdin_used+0x1766>
jmp    *0x3(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %bl,(%eax)
outsb  %ds:(%esi),(%dx)
(bad)
jmp    *%edx
push   %cs
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x10,%eax
addb   $0x0,(%eax)
add    %cl,-0x7f(%eax)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x7ebc0000(%eax,%eax,1)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,0x40000000(%eax)
cmp    $0xcaff,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
aam    $0x0
add    %al,(%eax)
in     $0x81,%al
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %al,(%eax)
add    %ah,(%edx,%eax,4)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
inc    %eax
(bad)
(bad)
call   *%edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x1380302(%ebx)
or     %bl,%al
push   %cs
add    $0x47,%al
or     0xa(%edx),%ebx
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %al,0x1(%eax)
add    %al,(%eax)
clc
cmp    $0xffffffff,%edi
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dl,0x0(%ecx,%eax,1)
add    %dh,%ah
cmp    $0xffffffff,%edi
and    (%ebx),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa0,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%ebx),%eax
icebp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %eax,(%eax)
add    %cl,%ah
xchg   %bh,%bh
lcall  *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x7ff1bcfe(%ebx)
add    %eax,(%edx)
push   %esi
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
rolb   (%ecx)
add    %al,(%eax)
or     %al,0x16fffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x52,0x3210e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
adc    %al,(%edx)
add    %al,(%eax)
cmp    %cl,0xadffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
push   %eax
add    (%eax),%al
add    %ch,0x26ffff88(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
jl     8052684 <_IO_stdin_used+0x19a0>
add    %al,(%eax)
lods   %ds:(%esi),%al
mov    %bh,%bh
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,-0x769c0000(%edx,%eax,1)
(bad)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
clc
add    (%eax),%al
add    %dl,-0x6d(%eax)
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%eax
add    %dh,0x36ffff94(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ebx,%eax,1)
add    %bh,0x11ffff(%esp,%edx,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%ebx)
add    %cl,%al
xchg   %eax,%esp
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,-0x6b2c0000(%ebx,%eax,1)
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
mov    $0xf0000003,%eax
xchg   %eax,%esp
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,%ah
add    (%eax),%eax
add    %bh,%ah
xchg   %eax,%esp
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
lock add (%eax),%eax
add    %bl,(%eax)
xchg   %eax,%ebp
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
and    $0x4,%al
add    %al,(%eax)
inc    %esp
xchg   %eax,%ebp
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ah,0x4(%eax)
add    %al,(%eax)
call   34052802 <optarg+0x2bffd61e>
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
js     8052882 <_IO_stdin_used+0x1b9e>
add    %al,(%eax)
add    %dl,0x84ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    $0x0,%al
add    %bl,-0x1(%esi,%edx,4)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,%al
add    $0x0,%al
add    %ch,-0x6a(%eax)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,%ah
add    $0x0,%al
add    %dh,-0x1(%esi,%edx,4)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,%al
add    $0x0,%al
add    %al,0x17ffff96(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cld
add    $0x0,%al
add    %cl,0x2dffff(%esi,%edx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,-0x69640000(,%eax,1)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,-0x69540000(,%eax,1)
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %esp
add    $0x96c40000,%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    $0x96dc0000,%eax
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
nop
add    $0x97680000,%eax
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
test   $0x5,%al
add    %al,(%eax)
adcb   $0x0,0x23ffff(%edi)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
rolb   $0xff,0x97980000
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
fadds  0x97b00000
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cld
add    $0x983c0000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
adc    $0x6,%al
add    %al,(%eax)
fs
cwtl
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
sub    $0x6,%al
add    %al,(%eax)
mov    %ds,0x33ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %esp
push   %es
add    %al,(%eax)
mov    $0x98,%ah
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,0x6(%eax)
add    %al,(%eax)
rcrb   $0x0,0x17ffff(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x0(%esi,%eax,1)
add    %cl,%ah
cwtl
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,-0x27fffffa(%eax)
cwtl
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,-0x671c0000(%esi,%eax,1)
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x7ff1bcfe(%ebx)
add    %eax,(%edx)
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x98,%al
add    %al,(%eax)
add    %al,%al
push   %es
add    %al,(%eax)
sbb    %bl,0x567ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
pop    %es
add    %al,(%eax)
in     (%dx),%al
popf
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dh,0x0(%edi,%eax,1)
add    %ah,(%esi,%ebx,4)
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cwtl
pop    %es
add    %al,(%eax)
pusha
sahf
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    $0x7,%al
add    %al,(%eax)
mov    %bl,0xa7ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
aam    $0x7
add    %al,(%eax)
adc    $0x9f,%al
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
clc
pop    %es
add    %al,(%eax)
and    %bl,0x2effff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
sbb    $0x8,%al
add    %al,(%eax)
sub    $0x9f,%al
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
xor    %cl,(%eax)
add    %al,(%eax)
sub    %bl,0x44ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
pusha
or     %al,(%eax)
add    %cl,-0x61(%eax)
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    %cs,(%eax)
add    %al,(%eax)
pop    %esp
lahf
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x8c000008,%esp
lahf
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
loopne 8052cee <_IO_stdin_used+0x200a>
add    %al,(%eax)
mov    $0x29ffff9f,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,(%eax)
or     %eax,(%eax)
add    %cl,%al
lahf
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x9,%al
add    %al,(%eax)
fcompl 0x29ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,(%ecx,%ecx,1)
add    %al,(%eax)
in     (%dx),%al
lahf
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,0x0(%ecx,%ecx,1)
add    %bh,%ah
lahf
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,(%eax)
add    %al,(%eax)
add    %dh,0x9(%eax)
add    %al,(%eax)
cmp    %ah,0x64ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,-0x5f740000(%ecx,%ecx,1)
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
mov    0xa8000009,%al
mov    0x32ffff,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x59,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     -0x3d(%ebx),%ecx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
rorb   (%ecx)
add    %al,(%eax)
mov    $0x2dffffa0,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,0xe(%ecx)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
call   d8052dfa <optarg+0xcfffdc16>
mov    0x2cffff,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%eax)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
call   21052dad <optarg+0x18ffdbc9>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,(%edx,%ecx,1)
add    %al,(%eax)
hlt
mov    0x67ffff,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x6f,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     -0x3d(%edx,%ecx,1),%edx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,0xa(%eax)
add    %al,(%eax)
xor    %ah,0xdfffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x71,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
dec    %esi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,-0x47fffff6(%eax)
mov    0x80ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %bl,%ah
or     (%eax),%al
add    %bh,%ah
mov    0x36ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xc(%esi,%ecx,1)
inc    %ecx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     %cl,(%ebx)
add    %al,(%eax)
adc    %ah,0x32ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
sub    $0xb,%al
add    %al,(%eax)
sub    $0xa2,%al
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
push   $0x5000000b
mov    %al,0x5dffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%eax),%esp
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ah,0x7800000b(%eax)
mov    %al,0x1cdffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffff96,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
clc
or     (%eax),%eax
add    %dh,%al
mov    %eax,0x74ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
imul   $0xe,(%edx),%ecx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
sub    %cl,(%eax,%eax,1)
add    %al,-0x5c(%eax)
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4502(%ebx)
jge    805304d <_IO_stdin_used+0x2369>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ecx),%esp
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
or     $0x0,%al
add    %al,0x70ffff(%esp,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x48,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esp
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
test   %cl,(%eax,%eax,1)
add    %al,%ah
movsb  %ds:(%esi),%es:(%edi)
(bad)
lcall  *0x2
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
push   %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
les    (%eax,%eax,1),%ecx
add    %ah,0xd1ffff(%esi,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ebx),%bh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
xor    %cl,0xa7180000
(bad)
inc    %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
jnp    805315a <_IO_stdin_used+0x2476>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
pushf
add    %al,(%eax)
add    %ch,0x0(%ebp,%ecx,1)
add    %ch,0x919ffff(%edi,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e46
push   $0x3
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jmp    80531ba <_IO_stdin_used+0x24d6>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
dec    %esp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
rolb   %cl,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %cl,(%esi,%ecx,1)
add    %al,(%eax)
sub    $0xb0,%al
(bad)
(bad)
jnp    805321d <_IO_stdin_used+0x2539>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7f,0x3400e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
push   %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
jl     8053290 <_IO_stdin_used+0x25ac>
add    %al,(%eax)
cmp    $0xb3,%al
(bad)
incl   0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    %al,%ah
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %dh,-0x4b6c0000(%esi,%ecx,1)
(bad)
incl   0x8
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
push   %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8053302 <_IO_stdin_used+0x261e>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
and    $0xf,%al
add    %al,(%eax)
xor    $0xbc,%al
(bad)
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %dl,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
add    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax)
add    %al,0x0(%edi,%ecx,1)
add    %dl,-0x1(%esp,%edi,4)
call   *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff82,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0xf,$0x0
xor    %bh,0x6fffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebp),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
push   $0x23ffffbd
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %bl,(%eax)
adc    %al,(%eax)
add    %al,0x78ffffbd(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     8053447 <_IO_stdin_used+0x2763>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x10(%eax)
add    %al,(%eax)
test   $0xbd,%al
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %al,-0x424c0000(%eax,%edx,1)
(bad)
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
fcoml  (%eax)
add    %al,(%eax)
dec    %esp
mov    $0x31ffff,%esi
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%ebp)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
hlt
adc    %al,(%eax)
add    %dh,-0x1(%esi,%edi,4)
incl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a6402
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xor    %dl,(%ecx)
add    %al,(%eax)
enter  $0xffbe,$0xff
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
inc    %esp
adc    %eax,(%eax)
add    %al,%ah
mov    $0xcffff,%esi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pop    %eax
adc    %eax,(%eax)
add    %al,%al
mov    $0x27ffff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
push   $0x7c000000
adc    %eax,(%eax)
add    %cl,%ah
mov    $0xc0ffff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x58,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
call   28053602 <optarg+0x1fffe41e>
mov    $0xafffff,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %bh,%ah
adc    %eax,(%eax)
add    %bh,0x10cffff(%edi,%edi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
push   %eax
adc    (%eax),%al
add    %bh,-0x40(%eax)
(bad)
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%edx,%edx,1)
add    %dh,-0x1(%eax,%eax,8)
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,0x12(%eax)
add    %al,(%eax)
jo     8053642 <_IO_stdin_used+0x295e>
(bad)
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,-0x3f940000(%edx,%edx,1)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x2,(%ebx)
inc    %ebp
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %dh,-0x67ffffee(%eax)
sar    $0xff,%bh
push   %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa440204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx,%eax,8),%eax
or     $0x41,%al
(bad)
push   %cs
or     %al,0xe(%edi,%eax,8)
add    $0x38,%al
add    %al,(%eax)
add    %ch,%ah
adc    (%eax),%al
add    %bh,0x106ffff(%eax,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %ch,(%eax)
adc    (%eax),%eax
add    %dl,0x5bffffc1(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebp),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
jo     8053789 <_IO_stdin_used+0x2aa5>
add    %al,(%eax)
test   $0xc1,%al
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %ch,0xa(%ebp)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dl,-0x37ffffed(%eax)
sar    $0xff,%edi
push   %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa450204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %cl,%ah
adc    (%eax),%eax
add    %ch,%ah
sar    $0xff,%edi
pop    %ebp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x10,0xec35302
inc    %ecx
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %al,(%esp,%edx,1)
add    %al,(%eax)
adc    $0xc2,%al
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %al,0x14(%eax)
add    %al,(%eax)
pop    %eax
ret    $0xffff
aaa
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x71,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fs
adc    $0x0,%al
add    %dh,-0x1(%edx,%eax,8)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bh,0x14(%eax)
add    %al,(%eax)
nop
ret    $0xffff
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx,%ecx,1),%edx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,%al
adc    $0x0,%al
add    %bh,-0x3d(%eax)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    -0x3cbeeff2(%ecx),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
add    $0x15,%al
add    %al,(%eax)
aam    $0xc3
(bad)
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %bh,-0x3b940000(,%edx,1)
(bad)
decl   0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    (%ebx),%esp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %ch,-0x3a740000(%ebp,%edx,1)
(bad)
inc    %esi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
jnp    80539db <_IO_stdin_used+0x2cf7>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    80539ee <_IO_stdin_used+0x2d0a>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
push   %ss
add    %al,(%eax)
add    %al,%bh
(bad)
incl   0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%esi,%edx,1)
add    %al,(%eax)
cld
(bad)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
inc    %eax
push   %ss
add    %al,(%eax)
sbb    %al,%bh
(bad)
jmp    *0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x44,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
adcb   $0x0,(%esi)
add    %cl,-0x38(%eax)
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x379c0000(%esi,%edx,1)
(bad)
decl   (%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,0x60000016(%eax)
enter  $0xffff,$0x3e
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xec37804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %dl,%ah
push   %ss
add    %al,(%eax)
je     8053aa6 <_IO_stdin_used+0x2dc2>
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ch,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%eax
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
adc    %dl,(%edi)
add    %al,(%eax)
js     8053ae2 <_IO_stdin_used+0x2dfe>
(bad)
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
push   %eax
pop    %ss
add    %al,(%eax)
clc
lret
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xe(%ebp)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0x20000017
int3
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
adcb   $0x0,(%edi)
add    %bh,(%eax)
int3
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6b300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %bh,-0x33c40000(%edi,%edx,1)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %al,(%eax,%ebx,1)
add    %al,(%eax)
xchg   %eax,%esp
int3
(bad)
lcall  *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %cl,0x0(%eax,%ebx,1)
add    %ch,-0x1(%ebp,%ecx,8)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %bh,0x18(%eax)
add    %al,(%eax)
mov    0x8cffffcd,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   $0xd0000000
sbb    %al,(%eax)
add    %bl,%al
int    $0xff
call   *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     8053cff <_IO_stdin_used+0x301b>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8053d36 <_IO_stdin_used+0x3052>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,(%ecx,%ebx,1)
add    %al,(%eax)
int3
into
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,0x19(%eax)
add    %al,(%eax)
add    %cl,%bh
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,-0x31040000(%ecx,%ebx,1)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0x30
.byte 0xa2
add    $0x8,%al
.byte 0x10
.byte 0xa2
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
adc    %cl,0xd0804(%esi)
add    %al,(%eax)
int3
or     $0x5,%al
or     %bl,(%ecx)
add    %al,(%eax)
add    %cl,(%eax)
dec    %edi
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x4f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
xor    $0x87,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dl,(%edx,%eax,4)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
add    %gs:(%eax),%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
add    $0x208,%eax
add    %bl,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bh,%al
mov    (%eax,%ecx,1),%eax
adc    %eax,(%eax)
add    %al,(%eax)
rorb   $0x0,0x120804(%ebx)
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x40(%edi)
mov    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x66(%edi)
mov    (%eax,%ecx,1),%al
add    %al,(%eax)
adc    $0x4f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,-0x72(%esi)
add    $0x8,%al
data16
mov    (%eax,%ecx,1),%es
jbe    8054fa4 <_IO_stdin_used+0x42c0>
add    $0x8,%al
xchg   %cl,-0x7169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %es
popl   (%eax,%ecx,1)
push   %ss
popl   (%eax,%ecx,1)
popl   %es:(%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8054fe5 <_IO_stdin_used+0x4301>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8055026 <_IO_stdin_used+0x4342>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8055067 <_IO_stdin_used+0x4383>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    80550a8 <_IO_stdin_used+0x43c4>
add    $0x8,%al
add    (%eax),%al
add    %al,(%eax)
adc    %dl,(%edi)
add    $0x108,%eax
add    %al,(%esi)
add    %al,(%eax)
add    %dh,0x5(%ecx,%edx,2)
or     %al,(%eax)
add    %eax,(%eax)
add    %ah,(%eax)
push   %edx
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
arpl   %bp,0x6d(%eax)
outsl  %ds:(%esi),(%dx)
add    %al,%fs:(%eax)
.byte 0x0
test   %ecx,(%edx,%eax,1)
pusha
