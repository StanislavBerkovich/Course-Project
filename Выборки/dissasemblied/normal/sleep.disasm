das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,%bl
negl   0x6e(%esi,%esi,1)
ficompl -0x7203d6e6(,%ecx,2)
push   %ds
(bad)
xor    %esp,%ecx
.byte 0x20
xchg   %eax,%esp
nop
.byte 0x8a
add    (%eax),%eax
add    %al,(%eax)
add    %al,%ss:(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%esi)
rorb   $0x24,0x0(%eax)
imul   $0x3612,(%ecx),%ebx
add    %dh,(%edi)
add    %al,(%eax)
add    %bh,(%esi)
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x50bc1c8c,%eax
jbe    8048176 <strcmp@plt-0xa3a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <strcmp@plt-0xa23>
dec    %ebx
jecxz  80481a4 <strcmp@plt-0xa0c>
xchg   %eax,%esi
mov    0xb3c09789,%al
notl   (%edx)
in     $0x62,%eax
inc    %ecx
cmc
xor    %esp,%eax
notl   (%edx)
incl   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
js     80482c6 <strcmp@plt-0x8ea>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ljmp   $0x0,$0x0
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jb     8048366 <strcmp@plt-0x84a>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ja     8048377 <strcmp@plt-0x839>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jle    80483a7 <strcmp@plt-0x809>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebp
add    (%eax),%al
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jmp    80484fa <strcmp@plt-0x6b6>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lcall  $0x0,$0x0
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%ecx),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aad    $0x0
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %al,(%ecx)
add    %al,(%eax)
mov    0x40804f1,%al
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,0x40000002
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
mov    %eax,(%ecx)
add    %al,(%eax)
inc    %esp
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
inc    %eax
add    (%eax),%al
add    %ah,-0xf(%eax)
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
test   %bh,0x40804(%edi)
add    %al,(%eax)
adc    %eax,(%eax)
verr   0x60000000(%esi)
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
clc
add    %eax,(%eax)
add    %ah,0x40804(%ecx,%esi,8)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
les    (%ecx),%eax
add    %al,(%eax)
inc    %eax
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edi
add    %al,(%eax)
add    %al,0x40804f1(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804865b <strcmp@plt-0x555>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048669 <strcmp@plt-0x547>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048676 <strcmp@plt-0x53a>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048682 <strcmp@plt-0x52e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048689 <strcmp@plt-0x527>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804869b <strcmp@plt-0x515>
outsl  %ds:(%esi),(%dx)
ja     804868d <strcmp@plt-0x523>
add    %dh,0x74(%ebx)
jb     804869d <strcmp@plt-0x513>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80486a0 <strcmp@plt-0x510>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     80486b0 <strcmp@plt-0x500>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80486bc <strcmp@plt-0x4f4>
gs
js     80486bf <strcmp@plt-0x4f1>
add    %ch,0x61(%esi)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jae    80486be <strcmp@plt-0x4f2>
gs
gs
jo     8048656 <strcmp@plt-0x55a>
gs
jb     80486cb <strcmp@plt-0x4e5>
outsl  %ds:(%esi),(%dx)
jb     804865c <strcmp@plt-0x554>
pop    %edi
pop    %edi
jae    80486d4 <strcmp@plt-0x4dc>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048684 <strcmp@plt-0x52c>
pop    %edi
gs
js     80486f1 <strcmp@plt-0x4bf>
je     804868a <strcmp@plt-0x526>
jo     80486fe <strcmp@plt-0x4b2>
outsl  %ds:(%esi),(%dx)
addr16 jb 80486f1 <strcmp@plt-0x4bf>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     804870d <strcmp@plt-0x4a3>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048726 <strcmp@plt-0x48a>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80486b9 <strcmp@plt-0x4f7>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048736 <strcmp@plt-0x47a>
jb     8048730 <strcmp@plt-0x480>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048730 <strcmp@plt-0x480>
add    %ch,0x65(%esi)
ja     804873e <strcmp@plt-0x472>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048742 <strcmp@plt-0x46e>
je     80486df <strcmp@plt-0x4d1>
pop    %edi
pop    %edi
gs
jb     8048756 <strcmp@plt-0x45a>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
data16
jo     8048775 <strcmp@plt-0x43b>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048773 <strcmp@plt-0x43d>
outsl  %ds:(%esi),(%dx)
jne    8048786 <strcmp@plt-0x42a>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804878e <strcmp@plt-0x422>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     8048741 <strcmp@plt-0x46f>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     80487c4 <strcmp@plt-0x3ec>
outsb  %ds:(%esi),(%dx)
jbe    8048762 <strcmp@plt-0x44e>
pop    %edi
pop    %edi
data16
jb     80487cc <strcmp@plt-0x3e4>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     80487e5 <strcmp@plt-0x3cb>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     80487ee <strcmp@plt-0x3c2>
jo     80487f5 <strcmp@plt-0x3bb>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     80487fb <strcmp@plt-0x3b5>
je     80487f9 <strcmp@plt-0x3b7>
add    %bl,0x5f(%edi)
data16
jo     80487ff <strcmp@plt-0x3b1>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 804880f <strcmp@plt-0x3a1>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048834 <strcmp@plt-0x37c>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048830 <strcmp@plt-0x380>
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048838 <strcmp@plt-0x378>
js     8048849 <strcmp@plt-0x367>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x6574706f,0x0(%esi),%ebp
jb     8048854 <strcmp@plt-0x35c>
add    %dh,0x74(%ebx)
jb     804884a <strcmp@plt-0x366>
insl   (%dx),%es:(%edi)
jo     80487ea <strcmp@plt-0x3c6>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804886a <strcmp@plt-0x346>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x74727473,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
fs
pop    %edi
insb   (%dx),%es:(%edi)
add    %ah,0x70(%esi)
jne    804887d <strcmp@plt-0x333>
jae    804886a <strcmp@plt-0x346>
jne    804887b <strcmp@plt-0x335>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     804888f <strcmp@plt-0x321>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     804889a <strcmp@plt-0x316>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    804889e <strcmp@plt-0x312>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     80488a2 <strcmp@plt-0x30e>
js     80488a8 <strcmp@plt-0x308>
je     8048841 <strcmp@plt-0x36f>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80488be <strcmp@plt-0x2f2>
popa
jb     80488c1 <strcmp@plt-0x2ef>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x2000400,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %cl,(%eax)
add    %ch,0x0(%edx,%eax,1)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x70000,(%ecx),%ecx
js     8048944 <strcmp@plt-0x26c>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x60000,%eax
test   %al,(%edx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x28e,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x40000,%eax
cwtl
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x30000,0xd(%ecx),%ebp
mov    %al,0x10000002
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
lods   %ds:(%esi),%al
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
cld
out    %eax,(%dx)
add    $0x8,%al
push   %es
sbb    $0x0,%al
add    %al,-0xf(%eax)
add    $0x8,%al
add    $0x44000037,%eax
icebp
add    $0x8,%al
add    $0x60000038,%eax
icebp
add    $0x8,%al
add    $0x80000039,%eax
icebp
add    $0x8,%al
add    $0xa000003e,%eax
icebp
add    $0x8,%al
add    $0xa4000036,%eax
icebp
add    $0x8,%al
.byte 0x5
cmp    $0x0,%al
or     $0xf0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
lock add $0x8,%al
pop    %es
add    (%eax),%al
add    %dl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
lock add $0x8,%al
pop    %es
add    $0x0,%al
add    %bl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    $0xf0200000,%eax
add    $0x8,%al
pop    %es
push   %es
add    %al,(%eax)
and    $0xf0,%al
add    $0x8,%al
pop    %es
pop    %es
add    %al,(%eax)
sub    %dh,%al
add    $0x8,%al
pop    %es
or     %al,(%eax)
add    %ch,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     %eax,(%eax)
add    %dh,(%eax)
lock add $0x8,%al
pop    %es
or     (%eax),%al
add    %dh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     (%eax),%eax
add    %bh,(%eax)
lock add $0x8,%al
pop    %es
or     $0x0,%al
add    %bh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     $0xf0400000,%eax
add    $0x8,%al
pop    %es
push   %cs
add    %al,(%eax)
inc    %esp
lock add $0x8,%al
pop    %es
sldt   (%eax)
dec    %eax
lock add $0x8,%al
pop    %es
adc    %al,(%eax)
add    %cl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    (%eax),%al
add    %dl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    $0x0,%al
add    %bl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    $0xf0600000,%eax
add    $0x8,%al
pop    %es
push   %ss
add    %al,(%eax)
fs
lock add $0x8,%al
pop    %es
pop    %ss
add    %al,(%eax)
push   $0x70804f0
sbb    %al,(%eax)
add    %ch,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    (%eax),%al
add    %dh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    $0x0,%al
add    %bh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    $0xf0800000,%eax
add    $0x8,%al
pop    %es
push   %ds
add    %al,(%eax)
test   %dh,%al
add    $0x8,%al
pop    %es
pop    %ds
add    %al,(%eax)
mov    %dh,%al
add    $0x8,%al
pop    %es
and    %al,(%eax)
add    %cl,0x21070804(%eax,%esi,8)
add    %al,(%eax)
nop
lock add $0x8,%al
pop    %es
and    (%eax),%al
add    %dl,0x23070804(%eax,%esi,8)
add    %al,(%eax)
cwtl
lock add $0x8,%al
pop    %es
and    $0x0,%al
add    %bl,0x25070804(%eax,%esi,8)
add    %al,(%eax)
mov    0x70804f0,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
lock add $0x8,%al
pop    %es
daa
add    %al,(%eax)
test   $0xf0,%al
add    $0x8,%al
pop    %es
sub    %al,(%eax)
add    %ch,0x29070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0xf0,%al
add    $0x8,%al
pop    %es
sub    (%eax),%al
add    %dh,0x2b070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0x70804f0,%eax
sub    $0x0,%al
add    %bh,0x2d070804(%eax,%esi,8)
add    %al,(%eax)
(bad)
lock add $0x8,%al
pop    %es
add    %al,%cs:(%eax)
(bad)
lock add $0x8,%al
pop    %es
das
add    %al,(%eax)
enter  $0x4f0,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
lock add $0x8,%al
pop    %es
xor    %eax,(%eax)
add    %dl,%al
lock add $0x8,%al
pop    %es
xor    (%eax),%al
add    %dl,%ah
lock add $0x8,%al
pop    %es
xor    (%eax),%eax
add    %bl,%al
lock add $0x8,%al
pop    %es
xor    $0x0,%al
add    %bl,%ah
lock add $0x8,%al
pop    %es
.byte 0x35
push   %ebx
sub    $0x8,%esp
call   80491f0 <calloc@plt+0x300>
add    $0x647f,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048b96 <strcmp@plt-0x1a>
call   8048d60 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804f004
jmp    *0x804f008
add    %al,(%eax)
jmp    *0x804f00c
push   $0x0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f010
push   $0x8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f014
push   $0x10
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f018
push   $0x18
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f01c
push   $0x20
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f020
push   $0x28
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f024
push   $0x30
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f028
push   $0x38
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f02c
push   $0x40
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f030
push   $0x48
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f034
push   $0x50
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f038
push   $0x58
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f03c
push   $0x60
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f040
push   $0x68
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f044
push   $0x70
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f048
push   $0x78
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f04c
push   $0x80
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f050
push   $0x88
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f054
push   $0x90
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f058
push   $0x98
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f05c
push   $0xa0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f060
push   $0xa8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f064
push   $0xb0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f068
push   $0xb8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f06c
push   $0xc0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f070
push   $0xc8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f074
push   $0xd0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f078
push   $0xd8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f07c
push   $0xe0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f080
push   $0xe8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f084
push   $0xf0
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f088
push   $0xf8
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f08c
push   $0x100
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f090
push   $0x108
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f094
push   $0x110
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f098
push   $0x118
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f09c
push   $0x120
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0a0
push   $0x128
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0a4
push   $0x130
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0a8
push   $0x138
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0ac
push   $0x140
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0b0
push   $0x148
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0b4
push   $0x150
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0b8
push   $0x158
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0bc
push   $0x160
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0c0
push   $0x168
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0c4
push   $0x170
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0c8
push   $0x178
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0cc
push   $0x180
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0d0
push   $0x188
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0d4
push   $0x190
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0d8
push   $0x198
jmp    8048ba0 <strcmp@plt-0x10>
jmp    *0x804f0dc
push   $0x1a0
jmp    8048ba0 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x50,%esp
mov    0xc(%ebp),%ebx
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80497e0 <calloc@plt+0x8f0>
movl   $0x804c79d,0x4(%esp)
movl   $0x6,(%esp)
call   8048e50 <setlocale@plt>
movl   $0x804c2dc,0x4(%esp)
movl   $0x804c2ce,(%esp)
call   8048ea0 <bindtextdomain@plt>
movl   $0x804c2ce,(%esp)
call   8048c90 <textdomain@plt>
movl   $0x80495b0,(%esp)
call   804bf30 <calloc@plt+0x3040>
mov    0x804f0e8,%eax
movl   $0x0,0x20(%esp)
movl   $0x804c2ee,0x1c(%esp)
movl   $0x804c2fa,0x18(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%ebp),%eax
movl   $0x80492c0,0x14(%esp)
movl   $0x804c2ca,0xc(%esp)
movl   $0x804c307,0x8(%esp)
mov    %eax,(%esp)
mov    %ebx,0x4(%esp)
call   8049720 <calloc@plt+0x830>
mov    0x8(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x804c79d,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048da0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8048fd9 <calloc@plt+0xe9>
movl   $0x1,(%esp)
call   80492c0 <calloc@plt+0x3d0>
cmpl   $0x1,0x8(%ebp)
je     8049182 <calloc@plt+0x292>
mov    0x804f180,%edi
cmp    %edi,0x8(%ebp)
jle    80491bb <calloc@plt+0x2cb>
mov    $0x1,%eax
mov    %ebx,%esi
fldz
mov    %eax,%ebx
fstpl  0x30(%esp)
lea    0x0(%esi,%eiz,1),%esi
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x44(%esp),%eax
movl   $0x8049510,0xc(%esp)
mov    %eax,0x4(%esp)
mov    (%esi,%edi,4),%eax
mov    %eax,(%esp)
call   804b750 <calloc@plt+0x2860>
test   %al,%al
je     80490e0 <calloc@plt+0x1f0>
fldl   0x48(%esp)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     80490d0 <calloc@plt+0x1e0>
mov    0x44(%esp),%eax
movzbl (%eax),%ecx
test   %cl,%cl
je     8049130 <calloc@plt+0x240>
cmpb   $0x0,0x1(%eax)
jne    80490d8 <calloc@plt+0x1e8>
cmp    $0x68,%cl
je     804913a <calloc@plt+0x24a>
jg     80490b6 <calloc@plt+0x1c6>
cmp    $0x64,%cl
mov    $0x15180,%eax
jne    80490dc <calloc@plt+0x1ec>
nop
mov    %eax,0x3c(%esp)
fildl  0x3c(%esp)
fmulp  %st,%st(1)
faddl  0x30(%esp)
add    $0x1,%edi
cmp    0x8(%ebp),%edi
fstpl  0x30(%esp)
jne    8049008 <calloc@plt+0x118>
test   %bl,%bl
je     8048fcd <calloc@plt+0xdd>
fldl   0x30(%esp)
fstpl  (%esp)
call   804b6e0 <calloc@plt+0x27f0>
test   %eax,%eax
jne    8049144 <calloc@plt+0x254>
movl   $0x0,(%esp)
call   8048d70 <exit@plt>
cmp    $0x6d,%cl
mov    $0x3c,%eax
je     8049070 <calloc@plt+0x180>
cmp    $0x73,%cl
mov    $0x1,%al
je     8049070 <calloc@plt+0x180>
fstp   %st(0)
jmp    80490e0 <calloc@plt+0x1f0>
nop
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
jmp    80490e0 <calloc@plt+0x1f0>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
jmp    80490e0 <calloc@plt+0x1f0>
fstp   %st(0)
xchg   %ax,%ax
mov    (%esi,%edi,4),%eax
mov    %eax,(%esp)
call   804acf0 <calloc@plt+0x1e00>
movl   $0x5,0x8(%esp)
movl   $0x804c31d,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048c60 <dcgettext@plt>
mov    %ebx,0xc(%esp)
xor    %ebx,%ebx
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048d10 <error@plt>
fldl   0x48(%esp)
jmp    804907a <calloc@plt+0x18a>
mov    $0x1,%eax
jmp    8049070 <calloc@plt+0x180>
mov    $0xe10,%eax
jmp    8049070 <calloc@plt+0x180>
movl   $0x5,0x8(%esp)
movl   $0x804c336,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %eax,%ebx
call   8048e00 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d10 <error@plt>
jmp    80490aa <calloc@plt+0x1ba>
movl   $0x5,0x8(%esp)
movl   $0x804c30d,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048d10 <error@plt>
jmp    8048fcd <calloc@plt+0xdd>
fldz
fstpl  0x30(%esp)
jmp    8049096 <calloc@plt+0x1a6>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804bf20
push   $0x804beb0
push   %ecx
push   %esi
push   $0x8048f00
call   8048dd0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804f143,%eax
sub    $0x804f140,%eax
cmp    $0x6,%eax
ja     8049210 <calloc@plt+0x320>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804920f <calloc@plt+0x31f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804f140,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804f140,%eax
sub    $0x804f140,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049249 <calloc@plt+0x359>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049248 <calloc@plt+0x358>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804f140,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804f1a8
jne    804928c <calloc@plt+0x39c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049200 <calloc@plt+0x310>
movb   $0x1,0x804f1a8
leave
repz ret
xchg   %ax,%ax
mov    0x804ef10,%eax
test   %eax,%eax
je     80492b8 <calloc@plt+0x3c8>
mov    $0x0,%eax
test   %eax,%eax
je     80492b8 <calloc@plt+0x3c8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804ef10,(%esp)
call   *%eax
leave
jmp    8049230 <calloc@plt+0x340>
nop
jmp    8049230 <calloc@plt+0x340>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x804f1b8,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049314 <calloc@plt+0x424>
movl   $0x804bf88,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x804f144,%eax
mov    %eax,(%esp)
call   8048e90 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8048d70 <exit@plt>
movl   $0x804bfb0,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c130,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <fputs_unlocked@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c160,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <fputs_unlocked@plt>
mov    0x804f1b8,%eax
mov    %eax,(%esp)
call   8049680 <calloc@plt+0x790>
movl   $0x5,0x8(%esp)
movl   $0x804c289,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c60 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x804c2a0,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c2b6,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
movl   $0x804c198,0xc(%esp)
movl   $0x804c2ca,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c1c0,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8048e50 <setlocale@plt>
test   %eax,%eax
je     8049481 <calloc@plt+0x591>
movl   $0x3,0x8(%esp)
movl   $0x804c2d8,0x4(%esp)
mov    %eax,(%esp)
call   8048eb0 <strncmp@plt>
test   %eax,%eax
jne    80494c5 <calloc@plt+0x5d5>
mov    0x804f1b8,%eax
mov    %eax,(%esp)
call   8049680 <calloc@plt+0x790>
movl   $0x5,0x8(%esp)
movl   $0x804c248,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c60 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
jmp    804930c <calloc@plt+0x41c>
mov    0x804f1b8,%eax
mov    %eax,(%esp)
call   8049680 <calloc@plt+0x790>
movl   $0x5,0x8(%esp)
movl   $0x804c200,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c60 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
jmp    8049481 <calloc@plt+0x591>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x804f1ac,%eax
mov    0x24(%esp),%ebx
test   %eax,%eax
je     8049560 <calloc@plt+0x670>
mov    0x804f1ac,%eax
test   %eax,%eax
je     8049548 <calloc@plt+0x658>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048c30 <strtod_l@plt>
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
je     8049588 <calloc@plt+0x698>
mov    0x20(%esp),%eax
fldz
mov    %eax,(%ebx)
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x8(%esp)
movl   $0x804c356,0x4(%esp)
movl   $0x1fbf,(%esp)
call   8048c80 <newlocale@plt>
mov    %eax,0x804f1ac
jmp    8049521 <calloc@plt+0x631>
nop
lea    0x0(%esi,%eiz,1),%esi
fldz
jmp    804953e <calloc@plt+0x64e>
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
mov    %eax,0x804f1b4
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x804f1b0
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x804f1a0,%eax
mov    %eax,(%esp)
call   804b7e0 <calloc@plt+0x28f0>
test   %eax,%eax
je     80495d9 <calloc@plt+0x6e9>
cmpb   $0x0,0x804f1b0
je     80495f0 <calloc@plt+0x700>
call   8048e00 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    80495f0 <calloc@plt+0x700>
mov    0x804f144,%eax
mov    %eax,(%esp)
call   804b7e0 <calloc@plt+0x28f0>
test   %eax,%eax
jne    8049648 <calloc@plt+0x758>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x804c358,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %eax,%ebx
mov    0x804f1b4,%eax
test   %eax,%eax
je     8049655 <calloc@plt+0x765>
mov    %eax,(%esp)
call   804aac0 <calloc@plt+0x1bd0>
mov    %eax,%esi
call   8048e00 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x804c364,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048d10 <error@plt>
mov    0x804f0ec,%eax
mov    %eax,(%esp)
call   8048be0 <_exit@plt>
call   8048e00 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x804c368,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048d10 <error@plt>
jmp    8049648 <calloc@plt+0x758>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804969b <calloc@plt+0x7ab>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     8049690 <calloc@plt+0x7a0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     80496c9 <calloc@plt+0x7d9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     80496c9 <calloc@plt+0x7d9>
cmp    $0x2f,%cl
je     80496d0 <calloc@plt+0x7e0>
test   %bl,%bl
je     80496a8 <calloc@plt+0x7b8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    80496b2 <calloc@plt+0x7c2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    80496a8 <calloc@plt+0x7b8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048dc0 <strlen@plt>
cmp    $0x1,%eax
jbe    80496ff <calloc@plt+0x80f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     8049708 <calloc@plt+0x818>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    80496f5 <calloc@plt+0x805>
nop
jmp    80496ff <calloc@plt+0x80f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x804f1a4,%ebx
cmpl   $0x2,0x30(%esp)
movl   $0x0,0x804f1a4
00
je     8049750 <calloc@plt+0x860>
mov    %ebx,0x804f1a4
movl   $0x0,0x804f180
00
add    $0x28,%esp
pop    %ebx
ret
mov    0x34(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804c380,0xc(%esp)
movl   $0x804c36b,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
call   8048da0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804973b <calloc@plt+0x84b>
cmp    $0x68,%eax
je     80497c8 <calloc@plt+0x8d8>
cmp    $0x76,%eax
jne    804973b <calloc@plt+0x84b>
lea    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x804f1a0,%eax
mov    %eax,(%esp)
call   804b2d0 <calloc@plt+0x23e0>
movl   $0x0,(%esp)
call   8048d70 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,(%esp)
call   *0x44(%esp)
jmp    804978b <calloc@plt+0x89b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     8049863 <calloc@plt+0x973>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8048e60 <strrchr@plt>
test   %eax,%eax
je     804984f <calloc@plt+0x95f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804984f <calloc@plt+0x95f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x804c3e8,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804984f <calloc@plt+0x95f>
mov    $0x3,%ecx
mov    $0x804c3f0,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804984f <calloc@plt+0x95f>
lea    0x4(%eax),%ebx
mov    %ebx,0x804f140
mov    %ebx,0x804f1b8
mov    %ebx,0x804f160
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x804f144,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804c3b0,(%esp)
mov    %eax,0xc(%esp)
call   8048cb0 <fwrite@plt>
call   8048ec0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     80498b1 <calloc@plt+0x9c1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8048ec0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     80498f0 <calloc@plt+0xa00>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804b960 <calloc@plt+0x2a70>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    8049958 <calloc@plt+0xa68>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    8049940 <calloc@plt+0xa50>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x2d,0x3(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x38,0x4(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x0,0x5(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x60,(%esi)
mov    $0x804c403,%eax
mov    $0x804c3f4,%edx
cmovne %edx,%eax
jmp    80498e8 <calloc@plt+0x9f8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x804c3fd,%eax
cmp    $0x7,%edi
mov    $0x804c3fb,%edx
cmovne %edx,%eax
jmp    80498e8 <calloc@plt+0x9f8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    8049940 <calloc@plt+0xa50>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x31,0x2(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x38,0x3(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x30,0x4(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x33,0x5(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x30,0x6(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x0,0x7(%eax)
jne    8049940 <calloc@plt+0xa50>
cmpb   $0x60,(%esi)
mov    $0x804c3ff,%eax
mov    $0x804c3f8,%edx
cmovne %edx,%eax
jmp    80498e8 <calloc@plt+0x9f8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048cc0 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804a288 <calloc@plt+0x1398>
mov    0x94(%esp),%eax
jmp    *0x804c440(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a090 <calloc@plt+0x11a0>
test   %al,%al
je     804a0a3 <calloc@plt+0x11b3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804a078 <calloc@plt+0x1188>
cmpb   $0x0,0x58(%esp)
je     804a078 <calloc@plt+0x1188>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804a078 <calloc@plt+0x1188>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048c50 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804a110 <calloc@plt+0x1220>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     8049e28 <calloc@plt+0xf38>
movzbl %bl,%eax
jmp    *0x804c464(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     8049c68 <calloc@plt+0xd78>
cmpl   $0x3,0x94(%esp)
jne    8049bc8 <calloc@plt+0xcd8>
testb  $0x4,0x98(%esp)
je     8049bc8 <calloc@plt+0xcd8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8049bc8 <calloc@plt+0xcd8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8049bc8 <calloc@plt+0xcd8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8049bc8 <calloc@plt+0xcd8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8049bc8 <calloc@plt+0xcd8>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmp    %edi,%ebp
jae    8049b8e <calloc@plt+0xc9e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049b9e <calloc@plt+0xcae>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049bae <calloc@plt+0xcbe>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    8049bbe <calloc@plt+0xcce>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8049bd6 <calloc@plt+0xce6>
cmpb   $0x0,0x5a(%esp)
jne    8049bfb <calloc@plt+0xd0b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8049bfb <calloc@plt+0xd0b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8049c02 <calloc@plt+0xd12>
cmpb   $0x0,0x24(%esp)
je     8049c18 <calloc@plt+0xd28>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmp    %edi,%ebp
jae    8049c15 <calloc@plt+0xd25>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    8049c26 <calloc@plt+0xd36>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    8049a68 <calloc@plt+0xb78>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a278 <calloc@plt+0x1388>
test   %al,%al
jne    8049bc8 <calloc@plt+0xcd8>
test   %esi,%esi
jne    8049bc8 <calloc@plt+0xcd8>
cmpl   $0x2,0x94(%esp)
jne    8049bc8 <calloc@plt+0xcd8>
nop
cmpb   $0x0,0x2f(%esp)
je     8049bc8 <calloc@plt+0xcd8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   80499b0 <calloc@plt+0xac0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804a3a2 <calloc@plt+0x14b2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804a2eb <calloc@plt+0x13fb>
cmpb   $0x0,0x58(%esp)
je     8049bc8 <calloc@plt+0xcd8>
mov    %eax,%ebx
jmp    8049c02 <calloc@plt+0xd12>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8049cf3 <calloc@plt+0xe03>
nop
mov    $0x66,%eax
jmp    8049cf3 <calloc@plt+0xe03>
nop
mov    $0x76,%eax
jmp    8049cf3 <calloc@plt+0xe03>
nop
mov    $0x6e,%eax
jmp    8049ce5 <calloc@plt+0xdf5>
nop
mov    $0x74,%eax
jmp    8049ce5 <calloc@plt+0xdf5>
nop
cmpb   $0x0,0x58(%esp)
je     804a260 <calloc@plt+0x1370>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmp    %edi,%ebp
jae    8049d52 <calloc@plt+0xe62>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8049d98 <calloc@plt+0xea8>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8049d98 <calloc@plt+0xea8>
cmp    %eax,%edi
ja     804a300 <calloc@plt+0x1410>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049d8e <calloc@plt+0xe9e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8049bd6 <calloc@plt+0xce6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8049cf3 <calloc@plt+0xe03>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     8049dce <calloc@plt+0xede>
cmpb   $0x0,0x2f(%esp)
je     8049dce <calloc@plt+0xede>
test   %dl,%dl
jne    8049c18 <calloc@plt+0xd28>
mov    %ebx,%eax
jmp    8049ce5 <calloc@plt+0xdf5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8049bc8 <calloc@plt+0xcd8>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmp    %edi,%ebp
jae    8049dfd <calloc@plt+0xf0d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049e0d <calloc@plt+0xf1d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049e1d <calloc@plt+0xf2d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8049bc8 <calloc@plt+0xcd8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804a120 <calloc@plt+0x1230>
call   8048ee0 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8049bc8 <calloc@plt+0xcd8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    8049ed4 <calloc@plt+0xfe4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmp    %edi,%ebp
jae    8049e83 <calloc@plt+0xf93>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    8049e96 <calloc@plt+0xfa6>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    8049eac <calloc@plt+0xfbc>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    8049c1b <calloc@plt+0xd2b>
cmp    %edi,%ebp
jae    8049ec9 <calloc@plt+0xfd9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    8049e70 <calloc@plt+0xf80>
cmpb   $0x0,0x24(%esp)
je     8049eb5 <calloc@plt+0xfc5>
cmp    %edi,%ebp
jae    8049ee7 <calloc@plt+0xff7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    8049eb5 <calloc@plt+0xfc5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a3a7 <calloc@plt+0x14b7>
test   %edi,%edi
je     804a2ad <calloc@plt+0x13bd>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c3fd,0x3c(%esp)
movb   $0x22,(%eax)
jmp    8049a48 <calloc@plt+0xb58>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c3fd,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    8049a48 <calloc@plt+0xb58>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    8049a48 <calloc@plt+0xb58>
lea    0x0(%esi,%eiz,1),%esi
je     8049fbc <calloc@plt+0x10cc>
mov    0x94(%esp),%edx
mov    $0x804c407,%eax
call   80498c0 <calloc@plt+0x9d0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x804c3fb,%eax
call   80498c0 <calloc@plt+0x9d0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    8049fea <calloc@plt+0x10fa>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8049fea <calloc@plt+0x10fa>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    8049fdf <calloc@plt+0x10ef>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8049fd8 <calloc@plt+0x10e8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8048dc0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    8049a48 <calloc@plt+0xb58>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c3fb,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    8049a48 <calloc@plt+0xb58>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a3c3 <calloc@plt+0x14d3>
test   %edi,%edi
je     804a2cc <calloc@plt+0x13dc>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c3fb,0x3c(%esp)
movb   $0x27,(%eax)
jmp    8049a48 <calloc@plt+0xb58>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8049b00 <calloc@plt+0xc10>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8049a88 <calloc@plt+0xb98>
test   %ebp,%ebp
jne    804a0bc <calloc@plt+0x11cc>
cmpl   $0x2,0x94(%esp)
jne    804a0bc <calloc@plt+0x11cc>
cmpb   $0x0,0x2f(%esp)
jne    8049c78 <calloc@plt+0xd88>
cmpb   $0x0,0x2f(%esp)
jne    804a0f2 <calloc@plt+0x1202>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804a0f2 <calloc@plt+0x1202>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804a0f2 <calloc@plt+0x1202>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804a0e7 <calloc@plt+0x11f7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804a0e0 <calloc@plt+0x11f0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8049cc2 <calloc@plt+0xdd2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8049cc2 <calloc@plt+0xdd2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8049b00 <calloc@plt+0xc10>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804a28d <calloc@plt+0x139d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048cf0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804a30d <calloc@plt+0x141d>
cmp    $0xffffffff,%eax
je     804a328 <calloc@plt+0x1438>
cmp    $0xfffffffe,%eax
je     804a343 <calloc@plt+0x1453>
cmpb   $0x0,0x2f(%esp)
je     804a1ef <calloc@plt+0x12ff>
cmpl   $0x2,0x94(%esp)
jne    804a1ef <calloc@plt+0x12ff>
cmp    $0x1,%eax
je     804a1ef <calloc@plt+0x12ff>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804a1e8 <calloc@plt+0x12f8>
movzbl %al,%eax
jmp    *0x804c660(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804a1d0 <calloc@plt+0x12e0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048ca0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048c10 <mbsinit@plt>
test   %eax,%eax
je     804a161 <calloc@plt+0x1271>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    8049e53 <calloc@plt+0xf63>
and    0x58(%esp),%dl
jmp    8049e5d <calloc@plt+0xf6d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8049c78 <calloc@plt+0xd88>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8049bc8 <calloc@plt+0xcd8>
add    $0x1,%esi
jmp    8049a68 <calloc@plt+0xb78>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    8049c49 <calloc@plt+0xd59>
call   8048ec0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8048dc0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804a13e <calloc@plt+0x124e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c3fd,0x3c(%esp)
jmp    8049a48 <calloc@plt+0xb58>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c3fb,0x3c(%esp)
jmp    8049a48 <calloc@plt+0xb58>
cmpb   $0x0,0x2f(%esp)
je     8049cf3 <calloc@plt+0xe03>
jmp    8049c78 <calloc@plt+0xd88>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    8049d7e <calloc@plt+0xe8e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a235 <calloc@plt+0x1345>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a235 <calloc@plt+0x1345>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804a398 <calloc@plt+0x14a8>
cmpb   $0x0,(%eax)
je     804a398 <calloc@plt+0x14a8>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804a386 <calloc@plt+0x1496>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804a390 <calloc@plt+0x14a0>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804a380 <calloc@plt+0x1490>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804a235 <calloc@plt+0x1345>
call   8048c70 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c3fd,0x3c(%esp)
jmp    8049a48 <calloc@plt+0xb58>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c3fb,0x3c(%esp)
jmp    8049a48 <calloc@plt+0xb58>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8048e00 <__errno_location@plt>
test   %edi,%edi
mov    0x804f130,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804a56c <calloc@plt+0x167c>
cmp    0x804f13c,%edi
jb     804a478 <calloc@plt+0x1588>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804a571 <calloc@plt+0x1681>
cmp    $0x804f134,%esi
lea    0x0(,%ebp,8),%eax
je     804a540 <calloc@plt+0x1650>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b490 <calloc@plt+0x25a0>
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f13c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8048de0 <memset@plt>
mov    %ebp,0x804f13c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   80499b0 <calloc@plt+0xac0>
cmp    %eax,%ebp
ja     804a527 <calloc@plt+0x1637>
lea    0x1(%eax),%ebp
cmp    $0x804f1c0,%esi
mov    %ebp,(%edi)
je     804a4e2 <calloc@plt+0x15f2>
mov    %esi,(%esp)
call   8048bf0 <free@plt>
mov    %ebp,(%esp)
call   804b420 <calloc@plt+0x2530>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   80499b0 <calloc@plt+0xac0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804b490 <calloc@plt+0x25a0>
mov    0x804f138,%edx
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f134,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804a44f <calloc@plt+0x155f>
call   8048ec0 <abort@plt>
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8048e00 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x804f2c0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804b630 <calloc@plt+0x2740>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804a5e0 <calloc@plt+0x16f0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x804f2c0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x804f2c0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804a693 <calloc@plt+0x17a3>
test   %ecx,%ecx
je     804a693 <calloc@plt+0x17a3>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8048ec0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x804f2c0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048e00 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   80499b0 <calloc@plt+0xac0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x804f2c0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048e00 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   80499b0 <calloc@plt+0xac0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804b420 <calloc@plt+0x2530>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   80499b0 <calloc@plt+0xac0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804a7c8 <calloc@plt+0x18d8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a700 <calloc@plt+0x1810>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x804f13c,%edi
mov    0x804f130,%esi
cmp    $0x1,%edi
jbe    804a843 <calloc@plt+0x1953>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048bf0 <free@plt>
cmp    %edi,%ebx
jne    804a830 <calloc@plt+0x1940>
mov    0x4(%esi),%eax
cmp    $0x804f1c0,%eax
je     804a869 <calloc@plt+0x1979>
mov    %eax,(%esp)
call   8048bf0 <free@plt>
movl   $0x100,0x804f134
00
movl   $0x804f1c0,0x804f138
08
cmp    $0x804f134,%esi
je     804a883 <calloc@plt+0x1993>
mov    %esi,(%esp)
call   8048bf0 <free@plt>
movl   $0x804f134,0x804f130
08
movl   $0x1,0x804f13c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f2c0,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f2c0,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f2c0,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f2c0,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049890 <calloc@plt+0x9a0>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a3e0 <calloc@plt+0x14f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049890 <calloc@plt+0x9a0>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a3e0 <calloc@plt+0x14f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804a920 <calloc@plt+0x1a30>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804a950 <calloc@plt+0x1a60>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x804f2c0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x804f2c4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x804f2c8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2d0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2d4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2d8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2dc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2e0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2e4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2e8,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804a3e0 <calloc@plt+0x14f0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a9e0 <calloc@plt+0x1af0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804a9e0 <calloc@plt+0x1af0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a9e0 <calloc@plt+0x1af0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x804f2c0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x804f2c4,%eax
mov    %eax,0x14(%esp)
mov    0x804f2c8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2d0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2d4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2d8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2dc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2e0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2e4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2e8,%eax
mov    %eax,0x38(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804a660 <calloc@plt+0x1770>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a3e0 <calloc@plt+0x14f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ab20 <calloc@plt+0x1c30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804ab20 <calloc@plt+0x1c30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804ab20 <calloc@plt+0x1c30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f100,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f100,0x4(%esp)
jmp    804a3e0 <calloc@plt+0x14f0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804b1c8 <calloc@plt+0x22d8>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x804c744,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c757,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x804c9e0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048e90 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c7b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804b1f0 <calloc@plt+0x2300>
jmp    *0x804c9b8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c918,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048c60 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8048e90 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c948,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048c60 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8048e90 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8048ec0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c75b,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e90 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c76b,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e90 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c782,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e90 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c880,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048c60 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
jmp    804ae6f <calloc@plt+0x1f7f>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c8a0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048c60 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
jmp    804ae6f <calloc@plt+0x1f7f>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c8c4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c60 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
jmp    804ae6f <calloc@plt+0x1f7f>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c8ec,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c60 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
jmp    804ae6f <calloc@plt+0x1f7f>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x804c750,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e90 <__fprintf_chk@plt>
jmp    804ad61 <calloc@plt+0x1e71>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c97c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048c60 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804aefa <calloc@plt+0x200a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804b29a <calloc@plt+0x23aa>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804b290 <calloc@plt+0x23a0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ad10 <calloc@plt+0x1e20>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804b2f2 <calloc@plt+0x2402>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804b2e0 <calloc@plt+0x23f0>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804ad10 <calloc@plt+0x1e20>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804b2d0 <calloc@plt+0x23e0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x804c79e,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
movl   $0x804c2a0,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c2b6,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
movl   $0x804c198,0xc(%esp)
movl   $0x804c2ca,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e20 <__printf_chk@plt>
mov    0x804f1a0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c1c0,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048d40 <malloc@plt>
test   %eax,%eax
je     804b439 <calloc@plt+0x2549>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804b434 <calloc@plt+0x2544>
lea    0x0(%esi),%esi
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804b479 <calloc@plt+0x2589>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b420 <calloc@plt+0x2530>
call   804b690 <calloc@plt+0x27a0>
xchg   %ax,%ax
jmp    804b420 <calloc@plt+0x2530>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804b4b8 <calloc@plt+0x25c8>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048d30 <realloc@plt>
test   %eax,%eax
je     804b4cb <calloc@plt+0x25db>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804b4a0 <calloc@plt+0x25b0>
mov    %eax,(%esp)
call   8048bf0 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804b4b0 <calloc@plt+0x25c0>
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804b513 <calloc@plt+0x2623>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804b490 <calloc@plt+0x25a0>
call   804b690 <calloc@plt+0x27a0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804b560 <calloc@plt+0x2670>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804b578 <calloc@plt+0x2688>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804b490 <calloc@plt+0x25a0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804b549 <calloc@plt+0x2659>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804b549 <calloc@plt+0x2659>
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804b5b8 <calloc@plt+0x26c8>
cmp    $0xaaaaaaa9,%eax
ja     804b5c4 <calloc@plt+0x26d4>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b490 <calloc@plt+0x25a0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804b5a0 <calloc@plt+0x26b0>
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804b420 <calloc@plt+0x2530>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048de0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048ef0 <calloc@plt>
test   %eax,%eax
je     804b61f <calloc@plt+0x272f>
add    $0x1c,%esp
ret
nop
call   804b690 <calloc@plt+0x27a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804b420 <calloc@plt+0x2530>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048c00 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048dc0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804b630 <calloc@plt+0x2740>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x804ca0f,0x4(%esp)
movl   $0x0,(%esp)
call   8048c60 <dcgettext@plt>
mov    0x804f0ec,%edx
movl   $0x804c368,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048d10 <error@plt>
call   8048ec0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
sub    $0x20,%esp
fldl   0x8(%ebp)
lea    -0x10(%ebp),%esi
fstpl  0x4(%esp)
mov    %esi,(%esp)
call   804b860 <calloc@plt+0x2970>
sub    $0x4,%esp
call   8048e00 <__errno_location@plt>
mov    %eax,%ebx
jmp    804b710 <calloc@plt+0x2820>
xchg   %ax,%ax
testl  $0xfffffffb,(%ebx)
jne    804b738 <calloc@plt+0x2848>
movl   $0x0,(%ebx)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8048e80 <nanosleep@plt>
test   %eax,%eax
jne    804b708 <calloc@plt+0x2818>
lea    -0x8(%ebp),%esp
pop    %ebx
pop    %esi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x8(%ebp),%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
call   8048e00 <__errno_location@plt>
mov    0x30(%esp),%esi
mov    0x34(%esp),%ebx
movl   $0x0,(%eax)
mov    %eax,%edi
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   *0x3c(%esp)
mov    0x1c(%esp),%edx
cmp    %esi,%edx
je     804b7c0 <calloc@plt+0x28d0>
test   %ebx,%ebx
je     804b7c8 <calloc@plt+0x28d8>
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jnp    804b7b0 <calloc@plt+0x28c0>
cmpl   $0x22,(%edi)
setne  %al
test   %ebx,%ebx
je     804b79c <calloc@plt+0x28ac>
mov    %edx,(%ebx)
mov    0x38(%esp),%edx
fstpl  (%edx)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
jne    804b790 <calloc@plt+0x28a0>
mov    $0x1,%eax
jmp    804b796 <calloc@plt+0x28a6>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804b796 <calloc@plt+0x28a6>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
cmpb   $0x0,(%edx)
jne    804b79c <calloc@plt+0x28ac>
nop
jmp    804b786 <calloc@plt+0x2896>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048ce0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   804bd20 <calloc@plt+0x2e30>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804b820 <calloc@plt+0x2930>
test   %dl,%dl
je     804b817 <calloc@plt+0x2927>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804b840 <calloc@plt+0x2950>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804b817 <calloc@plt+0x2927>
call   8048e00 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8048e00 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0xc,%esp
fldl   0x1c(%esp)
flds   0x804ca20
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
mov    0x18(%esp),%ecx
jbe    804b928 <calloc@plt+0x2a38>
flds   0x804ca24
fucomip %st(1),%st
jbe    804b908 <calloc@plt+0x2a18>
fnstcw 0x6(%esp)
xor    %edx,%edx
movzwl 0x6(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x4(%esp)
fldcw  0x4(%esp)
fistl  (%esp)
fldcw  0x6(%esp)
mov    (%esp),%ebx
mov    %ebx,(%esp)
fildl  (%esp)
fsubrp %st,%st(1)
fmuls  0x804ca28
fldcw  0x4(%esp)
fistl  (%esp)
fldcw  0x6(%esp)
mov    (%esp),%eax
mov    %eax,(%esp)
fildl  (%esp)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
seta   %dl
lea    (%edx,%eax,1),%esi
mov    $0x44b82fa1,%edx
mov    %esi,%eax
imul   %edx
mov    %esi,%eax
sar    $0x1f,%eax
sar    $0x1c,%edx
sub    %eax,%edx
mov    %esi,%eax
add    %edx,%ebx
imul   $0x3b9aca00,%edx,%edx
sub    %edx,%eax
js     804b940 <calloc@plt+0x2a50>
mov    %eax,0x4(%ecx)
mov    %ecx,%eax
mov    %ebx,(%ecx)
add    $0xc,%esp
pop    %ebx
pop    %esi
ret    $0x4
nop
fstp   %st(0)
mov    $0x3b9ac9ff,%eax
mov    $0x7fffffff,%ebx
mov    %eax,0x4(%ecx)
mov    %ecx,%eax
mov    %ebx,(%ecx)
add    $0xc,%esp
pop    %ebx
pop    %esi
ret    $0x4
nop
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
xor    %eax,%eax
mov    $0x80000000,%ebx
mov    %eax,0x4(%ecx)
mov    %ecx,%eax
mov    %ebx,(%ecx)
add    $0xc,%esp
pop    %ebx
pop    %esi
ret    $0x4
sub    $0x1,%ebx
add    $0x3b9aca00,%eax
mov    %eax,0x4(%ecx)
mov    %ecx,%eax
mov    %ebx,(%ecx)
add    $0xc,%esp
pop    %ebx
pop    %esi
ret    $0x4
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8048e40 <nl_langinfo@plt>
mov    0x804f2f0,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x804c79d,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804ba2c <calloc@plt+0x2b3c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804b9f7 <calloc@plt+0x2b07>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804b9d0 <calloc@plt+0x2ae0>
nop
mov    %ebp,(%esp)
call   8048dc0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8048dc0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804ba28 <calloc@plt+0x2b38>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048bb0 <strcmp@plt>
test   %eax,%eax
je     804b9eb <calloc@plt+0x2afb>
cmp    $0x2a,%bl
jne    804b9b0 <calloc@plt+0x2ac0>
cmpb   $0x0,0x1(%ebp)
jne    804b9b0 <calloc@plt+0x2ac0>
mov    %ebp,(%esp)
call   8048dc0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x804ca35,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804bced <calloc@plt+0x2dfd>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804b9f7 <calloc@plt+0x2b07>
movl   $0x804ca3b,(%esp)
call   8048d20 <getenv@plt>
test   %eax,%eax
je     804ba45 <calloc@plt+0x2b55>
cmpb   $0x0,(%eax)
jne    804bc53 <calloc@plt+0x2d63>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x804ca2c,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804bc44 <calloc@plt+0x2d54>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8048d40 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804bce3 <calloc@plt+0x2df3>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048c00 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804baac <calloc@plt+0x2bbc>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048bc0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804bc28 <calloc@plt+0x2d38>
movl   $0x804c362,0x4(%esp)
mov    %eax,(%esp)
call   8048d80 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804bc20 <calloc@plt+0x2d30>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bc06 <calloc@plt+0x2d16>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804bb10 <calloc@plt+0x2c20>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804bb10 <calloc@plt+0x2c20>
cmp    $0x23,%eax
je     804bc7d <calloc@plt+0x2d8d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048df0 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804ca4b,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <fscanf@plt>
cmp    $0x1,%eax
jle    804bca0 <calloc@plt+0x2db0>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8048dc0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8048dc0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804bcbe <calloc@plt+0x2dce>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8048d40 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804bcf2 <calloc@plt+0x2e02>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048cd0 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048cd0 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804bb1c <calloc@plt+0x2c2c>
mov    %esi,(%esp)
call   8048e30 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804bca0 <calloc@plt+0x2db0>
jmp    804bb25 <calloc@plt+0x2c35>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048ed0 <close@plt>
mov    $0x804c79d,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048bf0 <free@plt>
mov    %ebp,0x804f2f0
jmp    804b99f <calloc@plt+0x2aaf>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804ba6b <calloc@plt+0x2b7b>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8048dc0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804bc44 <calloc@plt+0x2d54>
lea    -0x1(%eax),%eax
jmp    804ba54 <calloc@plt+0x2b64>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804bc97 <calloc@plt+0x2da7>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bd0c <calloc@plt+0x2e1c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804bc78 <calloc@plt+0x2d88>
cmp    $0xffffffff,%eax
jne    804bb10 <calloc@plt+0x2c20>
mov    %esi,(%esp)
call   804bd20 <calloc@plt+0x2e30>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804bc28 <calloc@plt+0x2d38>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804bc2d <calloc@plt+0x2d3d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048d30 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804bbbc <calloc@plt+0x2ccc>
mov    $0x804c79d,%ebp
jmp    804bc39 <calloc@plt+0x2d49>
call   8048c70 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x804c79d,%ebp
call   8048bf0 <free@plt>
mov    %esi,(%esp)
call   804bd20 <calloc@plt+0x2e30>
jmp    804bc2d <calloc@plt+0x2d3d>
mov    %esi,(%esp)
call   8048e30 <__uflow@plt>
jmp    804bc92 <calloc@plt+0x2da2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048e10 <fileno@plt>
test   %eax,%eax
js     804bda8 <calloc@plt+0x2eb8>
mov    %ebx,(%esp)
call   8048d50 <__freading@plt>
test   %eax,%eax
jne    804bd78 <calloc@plt+0x2e88>
mov    %ebx,(%esp)
call   804bdc0 <calloc@plt+0x2ed0>
test   %eax,%eax
je     804bda8 <calloc@plt+0x2eb8>
call   8048e00 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048c20 <fclose@plt>
test   %edi,%edi
je     804bd6a <calloc@plt+0x2e7a>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8048e10 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8048e70 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    804bd42 <calloc@plt+0x2e52>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048c20 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804bdd8 <calloc@plt+0x2ee8>
mov    %ebx,(%esp)
call   8048d50 <__freading@plt>
test   %eax,%eax
jne    804bde8 <calloc@plt+0x2ef8>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048bd0 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804bdd8 <calloc@plt+0x2ee8>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804be20 <calloc@plt+0x2f30>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048bd0 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804be60 <calloc@plt+0x2f70>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048c40 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804be3f <calloc@plt+0x2f4f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804be3f <calloc@plt+0x2f4f>
mov    %ebx,(%esp)
call   8048e10 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8048e70 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804bea7 <calloc@plt+0x2fb7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804be9f <calloc@plt+0x2faf>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80491f0 <calloc@plt+0x300>
add    $0x3145,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048b78 <strcmp@plt-0x38>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804bf09 <calloc@plt+0x3019>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804bee8 <calloc@plt+0x2ff8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804bf20 <calloc@plt+0x3030>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   80491f0 <calloc@plt+0x300>
add    $0x30ca,%ebx
sub    $0x18,%esp
lea    0xe4(%ebx),%eax
test   %eax,%eax
je     804bf68 <calloc@plt+0x3078>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048d00 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    804bf4b <calloc@plt+0x305b>
push   %ebx
sub    $0x8,%esp
call   80491f0 <calloc@plt+0x300>
add    $0x308b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     804c004 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     804bfbc <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804c005 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804c014 <_IO_stdin_used+0x90>
popa
je     804c013 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x554e2073,%eax
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
pop    %ebx
push   %ebx
push   %ebp
inc    %esi
inc    %esi
dec    %ecx
pop    %eax
pop    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x504f2073
push   %esp
dec    %ecx
dec    %edi
dec    %esi
or     0x61(%eax),%dl
jne    804c054 <_IO_stdin_used+0xd0>
and    %ah,%gs:0x6f(%esi)
jb     804c007 <_IO_stdin_used+0x83>
dec    %esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %dh,0x65(%ebx)
arpl   %bp,0x6e(%edi)
fs
jae    804c024 <_IO_stdin_used+0xa0>
and    %ah,(%eax)
push   %ebx
push   %ebp
inc    %esi
inc    %esi
dec    %ecx
pop    %eax
and    %ch,0x61(%ebp)
jns    804c023 <_IO_stdin_used+0x9f>
bound  %esp,0x20(%ebp)
daa
jae    804c030 <_IO_stdin_used+0xac>
and    %ah,0x6f(%esi)
jb     804c02e <_IO_stdin_used+0xaa>
jae    804c075 <_IO_stdin_used+0xf1>
arpl   %bp,0x6e(%edi)
fs
jae    804c036 <_IO_stdin_used+0xb2>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    804c08d <_IO_stdin_used+0x109>
je     804c04c <_IO_stdin_used+0xc8>
sub    $0xa,%al
daa
insl   (%dx),%es:(%edi)
daa
and    %ah,0x6f(%esi)
jb     804c04d <_IO_stdin_used+0xc9>
insl   (%dx),%es:(%edi)
imul   $0x2c736574,0x75(%esi),%ebp
and    %ah,(%edi)
push   $0x6f662027
jb     804c05e <_IO_stdin_used+0xda>
push   $0x7372756f
and    %ch,0x72(%edi)
and    %ah,(%edi)
fs
daa
and    %ah,0x6f(%esi)
jb     804c06f <_IO_stdin_used+0xeb>
fs
popa
jns    804c0c6 <_IO_stdin_used+0x142>
and    %ah,%cs:(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x736f6d20,0x65(%ebx),%ebp
je     804c082 <_IO_stdin_used+0xfe>
imul   $0x656d656c,0x70(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
je     804c0cd <_IO_stdin_used+0x149>
je     804c0d7 <_IO_stdin_used+0x153>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804c07c <_IO_stdin_used+0xf8>
je     804c0dc <_IO_stdin_used+0x158>
popa
je     804c097 <_IO_stdin_used+0x113>
jb     804c0de <_IO_stdin_used+0x15a>
jno    804c0f0 <_IO_stdin_used+0x16c>
imul   $0x4d554e20,0x65(%edx),%esi
inc    %edx
inc    %ebp
push   %edx
and    %ah,0x65(%edx)
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
je     804c0f5 <_IO_stdin_used+0x171>
addr16
gs
jb     804c0c0 <_IO_stdin_used+0x13c>
and    %ch,0x65(%eax)
jb     804c0fe <_IO_stdin_used+0x17a>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %ch,0x61(%ebp)
jns    804c0c5 <_IO_stdin_used+0x141>
bound  %esp,0x20(%ebp)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
bound  %ebp,0x74(%ecx)
jb     804c113 <_IO_stdin_used+0x18f>
jb     804c12d <_IO_stdin_used+0x1a9>
and    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
popa
je     804c124 <_IO_stdin_used+0x1a0>
outsb  %ds:(%esi),(%dx)
or     0x6f(%bx,%si),%dh
imul   $0x6d756e20,0x74(%esi),%ebp
bound  %esp,0x72(%ebp)
and    %ah,%cs:(%eax)
inc    %edi
imul   $0x7774206e,0x65(%esi),%esi
outsl  %ds:(%esi),(%dx)
and    %ch,0x72(%edi)
and    %ch,0x6f(%ebp)
jb     804c143 <_IO_stdin_used+0x1bf>
and    %ah,0x72(%ecx)
addr16 jne 804c151 <_IO_stdin_used+0x1cd>
outsb  %gs:(%esi),(%dx)
je     804c15b <_IO_stdin_used+0x1d7>
sub    $0x20,%al
jo     804c14d <_IO_stdin_used+0x1c9>
jne    804c161 <_IO_stdin_used+0x1dd>
and    %ah,%gs:0x6f(%esi)
jb     804c114 <_IO_stdin_used+0x190>
je     804c15e <_IO_stdin_used+0x1da>
and    %ah,%gs:0x6d(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804c16b <_IO_stdin_used+0x1e7>
je     804c11f <_IO_stdin_used+0x19b>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x6d(%ecx,%ebp,2)
or     %gs:0x70(%ebx),%dh
arpl   %bp,%gs:0x66(%ecx)
imul   $0x20796220,0x64(%ebp),%esp
je     804c17e <_IO_stdin_used+0x1fa>
and    %dh,%gs:0x75(%ebx)
insl   (%dx),%es:(%edi)
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
imul   $0x756c6176,0x20(%edx),%esi
gs
jae    804c15a <_IO_stdin_used+0x1d6>
or     (%edx),%cl
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     804c15d <_IO_stdin_used+0x1d9>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     804c1b3 <_IO_stdin_used+0x22f>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    804c1d6 <_IO_stdin_used+0x252>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    804c1e8 <_IO_stdin_used+0x264>
jo     804c1eb <_IO_stdin_used+0x267>
je     804c198 <_IO_stdin_used+0x214>
jbe    804c1df <_IO_stdin_used+0x25b>
jb     804c1ef <_IO_stdin_used+0x26b>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c1f3 <_IO_stdin_used+0x26f>
popa
je     804c1f2 <_IO_stdin_used+0x26e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x74680000,0x0(%edx,%ecx,1),%esi
je     804c20c <_IO_stdin_used+0x288>
cmp    (%edi),%ch
das
ja     804c218 <_IO_stdin_used+0x294>
ja     804c1d1 <_IO_stdin_used+0x24d>
outsb  %ds:(%si),(%dx)
jne    804c1d5 <_IO_stdin_used+0x251>
outsl  %ds:(%esi),(%dx)
jb     804c211 <_IO_stdin_used+0x28d>
das
jae    804c21c <_IO_stdin_used+0x298>
data16
je     804c227 <_IO_stdin_used+0x2a3>
popa
jb     804c218 <_IO_stdin_used+0x294>
das
arpl   %bp,0x72(%edi)
gs
jne    804c22e <_IO_stdin_used+0x2aa>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     804c227 <_IO_stdin_used+0x2a3>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804c1ed <_IO_stdin_used+0x269>
jne    804c242 <_IO_stdin_used+0x2be>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     804c253 <_IO_stdin_used+0x2cf>
popa
jb     804c244 <_IO_stdin_used+0x2c0>
cmp    (%eax),%ah
cmp    $0x68,%al
je     804c259 <_IO_stdin_used+0x2d5>
jo     804c221 <_IO_stdin_used+0x29d>
das
das
ja     804c262 <_IO_stdin_used+0x2de>
ja     804c21b <_IO_stdin_used+0x297>
outsb  %ds:(%si),(%dx)
jne    804c21f <_IO_stdin_used+0x29b>
outsl  %ds:(%esi),(%dx)
jb     804c25b <_IO_stdin_used+0x2d7>
das
addr16
gs
je     804c261 <_IO_stdin_used+0x2dd>
gs
insb   (%dx),%es:(%edi)
jo     804c22c <_IO_stdin_used+0x2a8>
or     %ds:(%eax),%al
push   %edx
gs
jo     804c273 <_IO_stdin_used+0x2ef>
jb     804c27a <_IO_stdin_used+0x2f6>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    804c27c <_IO_stdin_used+0x2f8>
popa
je     804c27c <_IO_stdin_used+0x2f8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 804c23b <_IO_stdin_used+0x2b7>
je     804c28c <_IO_stdin_used+0x308>
and    %bh,(%eax,%ebp,2)
je     804c296 <_IO_stdin_used+0x312>
jo     804c25e <_IO_stdin_used+0x2da>
das
das
je     804c29a <_IO_stdin_used+0x316>
popa
outsb  %ds:(%esi),(%dx)
jae    804c298 <_IO_stdin_used+0x314>
popa
je     804c298 <_IO_stdin_used+0x314>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     804c2a5 <_IO_stdin_used+0x321>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     804c2a3 <_IO_stdin_used+0x31f>
das
je     804c2a4 <_IO_stdin_used+0x320>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     804c26c <_IO_stdin_used+0x2e8>
arpl   %bp,0x6d(%edi)
jo     804c2bd <_IO_stdin_used+0x339>
gs
je     804c2b9 <_IO_stdin_used+0x335>
and    %ah,0x63(%edi,%ebp,2)
jne    804c2c7 <_IO_stdin_used+0x343>
outsb  %gs:(%esi),(%dx)
je     804c2bf <_IO_stdin_used+0x33b>
je     804c2c9 <_IO_stdin_used+0x345>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     804c2db <_IO_stdin_used+0x357>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     804c2d7 <_IO_stdin_used+0x353>
jne    804c2e8 <_IO_stdin_used+0x364>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa000a27,0x6e(%edi),%ebp
push   %edx
gs
jo     804c2fd <_IO_stdin_used+0x379>
jb     804c304 <_IO_stdin_used+0x380>
and    %ah,0x75622073
addr16 jae 804c2b9 <_IO_stdin_used+0x335>
je     804c30a <_IO_stdin_used+0x386>
and    %ah,0x62000a73
jne    804c30a <_IO_stdin_used+0x386>
sub    $0x65726f63,%eax
jne    804c31e <_IO_stdin_used+0x39a>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c31c <_IO_stdin_used+0x398>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    804c306 <_IO_stdin_used+0x382>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     804c337 <_IO_stdin_used+0x3b3>
jne    804c348 <_IO_stdin_used+0x3c4>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    804c352 <_IO_stdin_used+0x3ce>
jb     804c310 <_IO_stdin_used+0x38c>
jae    804c34b <_IO_stdin_used+0x3c7>
popa
jb     804c34b <_IO_stdin_used+0x3c7>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dl,%gs:0x61(%eax)
jne    804c35e <_IO_stdin_used+0x3da>
and    %al,0x67(%ebp)
addr16
gs
jb     804c36d <_IO_stdin_used+0x3e9>
add    %cl,0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x65(%ebp)
jns    804c367 <_IO_stdin_used+0x3e3>
jb     804c36d <_IO_stdin_used+0x3e9>
outsb  %ds:(%esi),(%dx)
add    %dh,0x6c(%bp,%di)
gs
gs
jo     804c30d <_IO_stdin_used+0x389>
insl   (%dx),%es:(%edi)
imul   $0x20676e69,0x73(%ebx),%esi
outsl  %ds:(%esi),(%dx)
jo     804c37d <_IO_stdin_used+0x3f9>
jb     804c37b <_IO_stdin_used+0x3f7>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x6e(%ecx)
jbe    804c382 <_IO_stdin_used+0x3fe>
insb   (%dx),%es:(%edi)
imul   $0x20656d69,0x74(%eax,%eiz,1),%esp
imul   $0x61767265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804c35d <_IO_stdin_used+0x3d9>
jb     804c3a4 <_IO_stdin_used+0x420>
popa
and    %dh,%fs:0x65(%edx)
popa
insb   (%dx),%es:(%edi)
je     804c3b1 <_IO_stdin_used+0x42d>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x0(%ebx)
cmp    %ch,(%esi)
xor    (%ecx),%dh
add    %al,0x0(%ebx)
ja     804c3cc <_IO_stdin_used+0x448>
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     804c364 <_IO_stdin_used+0x3e0>
and    $0x25203a73,%eax
jae    804c36b <_IO_stdin_used+0x3e7>
sub    (%eax),%eax
push   $0x706c65
jbe    804c3d9 <_IO_stdin_used+0x455>
jb     804c3e9 <_IO_stdin_used+0x465>
imul   $0x0,0x6e(%edi),%ebp
add    %al,(%eax)
add    %ch,-0x3d(%ebp)
add    $0x8,%al
push   $0x72000000
ret
add    $0x8,%al
jbe    804c39e <_IO_stdin_used+0x41a>
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 804c417 <_IO_stdin_used+0x493>
xor    %bl,0x20(%ebp)
ja     804c422 <_IO_stdin_used+0x49e>
jae    804c3e3 <_IO_stdin_used+0x45f>
jo     804c426 <_IO_stdin_used+0x4a2>
jae    804c43a <_IO_stdin_used+0x4b6>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    804c437 <_IO_stdin_used+0x4b3>
push   $0x206e6120
gs
js     804c43d <_IO_stdin_used+0x4b9>
arpl   %sp,(%eax)
jae    804c455 <_IO_stdin_used+0x4d1>
jae    804c452 <_IO_stdin_used+0x4ce>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     804c472 <_IO_stdin_used+0x4ee>
jb     804c470 <_IO_stdin_used+0x4ec>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    804c496 <_IO_stdin_used+0x512>
add    %ah,0x0(%ebx)
arpl   %bp,0x6279616d
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
sub    %bl,-0x5ff7f7fc(%edx)
add    $0x8,%al
cmp    %ah,-0x6107f7fc(%eax)
add    $0x8,%al
cmp    %bl,-0x6097f7fc(%edi)
add    $0x8,%al
nop
lahf
add    $0x8,%al
nop
lahf
add    $0x8,%al
nop
lahf
add    $0x8,%al
xor    %bl,-0x61d7f7fc(%ebp)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x6257f7fc(%esi)
add    $0x8,%al
or     %bl,-0x62d7f7fc(%ebp)
add    $0x8,%al
and    %bl,-0x62e7f7fc(%ebp)
add    $0x8,%al
adc    %bl,-0x631ff7fc(%ebp)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
sub    %bl,-0x61d7f7fc(%esi)
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
push   %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
enter  $0x49b,$0x8
pop    %ecx
pushf
add    $0x8,%al
fcomps -0x63a6f7fc(%ebp)
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
sbb    %bl,-0x61d7f7fc(%ebx)
add    $0x8,%al
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
pop    %ecx
pushf
add    $0x8,%al
mov    $0xc808049d,%eax
fwait
add    $0x8,%al
pop    %ecx
pushf
add    $0x8,%al
enter  $0x49b,$0x8
pop    %ecx
pushf
add    $0x8,%al
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
enter  $0x49b,$0x8
xor    %bl,0x49c5908(%esp,%eax,1)
or     %dh,(%eax)
pushf
add    $0x8,%al
push   %ecx
pushf
add    $0x8,%al
push   %eax
mov    %al,0xa2500804
add    $0x8,%al
call   580ccb0e <opterr+0x5007d96a>
mov    %al,0xa1e80804
add    $0x8,%al
push   %eax
mov    %al,0xa1e80804
add    $0x8,%al
call   f00ccb22 <opterr+0xe807d97e>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb2e <opterr+0xe807d98a>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb3a <opterr+0xe807d996>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb46 <opterr+0xe807d9a2>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb52 <opterr+0xe807d9ae>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb5e <opterr+0xe807d9ba>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb6a <opterr+0xe807d9c6>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb76 <opterr+0xe807d9d2>
mov    0xa1e80804,%eax
add    $0x8,%al
call   f00ccb82 <opterr+0xe807d9de>
mov    0xa2500804,%eax
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %cl,(%ecx)
les    (%eax,%ecx,1),%eax
adc    %eax,%esp
add    $0x8,%al
pop    %ss
les    (%eax,%ecx,1),%eax
and    $0xc4,%al
add    $0x8,%al
les    %es:(%eax,%ecx,1),%eax
les    %cs:(%eax,%ecx,1),%eax
out    %eax,$0xc2
add    $0x8,%al
xor    $0x804c4,%eax
add    %al,(%eax)
add    %ah,0x25282073
jae    804c774 <_IO_stdin_used+0x7f0>
and    %ah,0x25000a73
jae    804c773 <_IO_stdin_used+0x7ef>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     804c7c7 <_IO_stdin_used+0x843>
je     804c7d4 <_IO_stdin_used+0x850>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     804c7d7 <_IO_stdin_used+0x853>
je     804c7e4 <_IO_stdin_used+0x860>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     804c7ee <_IO_stdin_used+0x86a>
je     804c7fb <_IO_stdin_used+0x877>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c7c0 <_IO_stdin_used+0x83c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     804c812 <_IO_stdin_used+0x88e>
jb     804c819 <_IO_stdin_used+0x895>
and    %ah,0x75(%edx)
addr16 jae 804c7cb <_IO_stdin_used+0x847>
je     804c81c <_IO_stdin_used+0x898>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    804c821 <_IO_stdin_used+0x89d>
and    %al,0x50(%edi)
dec    %esp
jbe    804c7f5 <_IO_stdin_used+0x871>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     804c844 <_IO_stdin_used+0x8c0>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     804c7fa <_IO_stdin_used+0x876>
insb   (%dx),%es:(%edi)
popa
je     804c843 <_IO_stdin_used+0x8bf>
jb     804c800 <_IO_stdin_used+0x87c>
cmp    $0x68,%al
je     804c858 <_IO_stdin_used+0x8d4>
jo     804c820 <_IO_stdin_used+0x89c>
das
das
outsb  %ds:(%si),(%dx)
jne    804c81a <_IO_stdin_used+0x896>
outsl  %ds:(%esi),(%dx)
jb     804c856 <_IO_stdin_used+0x8d2>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 804c868 <_IO_stdin_used+0x8e4>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    804c829 <_IO_stdin_used+0x8a5>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     804c88d <_IO_stdin_used+0x909>
popa
jb     804c87e <_IO_stdin_used+0x8fa>
cmp    (%eax),%ah
jns    804c88c <_IO_stdin_used+0x908>
jne    804c83f <_IO_stdin_used+0x8bb>
popa
jb     804c887 <_IO_stdin_used+0x903>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     804c8a7 <_IO_stdin_used+0x923>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     804c8b1 <_IO_stdin_used+0x92d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     804c8ce <_IO_stdin_used+0x94a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     804c8cd <_IO_stdin_used+0x949>
outsb  %ds:(%esi),(%dx)
je     804c88b <_IO_stdin_used+0x907>
jo     804c8d2 <_IO_stdin_used+0x94e>
jb     804c8dc <_IO_stdin_used+0x958>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     804c8ec <_IO_stdin_used+0x968>
je     804c8f9 <_IO_stdin_used+0x975>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c8be <_IO_stdin_used+0x93a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c90c <_IO_stdin_used+0x988>
je     804c919 <_IO_stdin_used+0x995>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c8de <_IO_stdin_used+0x95a>
and    %ah,0x250a2c73
jae    804c8e6 <_IO_stdin_used+0x962>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c930 <_IO_stdin_used+0x9ac>
je     804c93d <_IO_stdin_used+0x9b9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c902 <_IO_stdin_used+0x97e>
and    %ah,0x250a2c73
jae    804c90a <_IO_stdin_used+0x986>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c958 <_IO_stdin_used+0x9d4>
je     804c965 <_IO_stdin_used+0x9e1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c92a <_IO_stdin_used+0x9a6>
and    %ah,0x250a2c73
jae    804c932 <_IO_stdin_used+0x9ae>
and    %ah,0x25202c73
jae    804c93a <_IO_stdin_used+0x9b6>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c984 <_IO_stdin_used+0xa00>
je     804c991 <_IO_stdin_used+0xa0d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c956 <_IO_stdin_used+0x9d2>
and    %ah,0x250a2c73
jae    804c95e <_IO_stdin_used+0x9da>
and    %ah,0x25202c73
jae    804c966 <_IO_stdin_used+0x9e2>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c9b4 <_IO_stdin_used+0xa30>
je     804c9c1 <_IO_stdin_used+0xa3d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c986 <_IO_stdin_used+0xa02>
and    %ah,0x250a2c73
jae    804c98e <_IO_stdin_used+0xa0a>
and    %ah,0x25202c73
jae    804c996 <_IO_stdin_used+0xa12>
and    %ah,0x250a2c73
jae    804c99e <_IO_stdin_used+0xa1a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c9e8 <_IO_stdin_used+0xa64>
je     804c9f5 <_IO_stdin_used+0xa71>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c9ba <_IO_stdin_used+0xa36>
and    %ah,0x250a2c73
jae    804c9c2 <_IO_stdin_used+0xa3e>
and    %ah,0x25202c73
jae    804c9ca <_IO_stdin_used+0xa46>
and    %ah,0x250a2c73
jae    804c9d2 <_IO_stdin_used+0xa4e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
and    %ch,-0x50d7f7fc(%edi)
add    $0x8,%al
push   $0xb00804af
scas   %es:(%edi),%eax
add    $0x8,%al
or     %dh,-0x4f9ff7fc(%eax)
add    $0x8,%al
enter  $0x4b0,$0x8
inc    %eax
mov    $0x4,%cl
or     %ah,%al
lods   %ds:(%esi),%eax
add    $0x8,%al
js     804c98c <_IO_stdin_used+0xa08>
add    $0x8,%al
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     804ca5d <_IO_stdin_used+0xad9>
jb     804ca4f <_IO_stdin_used+0xacb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     804ca71 <_IO_stdin_used+0xaed>
popa
jb     804ca62 <_IO_stdin_used+0xade>
and    %al,0x6f(%esi)
jne    804ca70 <_IO_stdin_used+0xaec>
fs
popa
je     804ca6f <_IO_stdin_used+0xaeb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804ca8e <_IO_stdin_used+0xb0a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %al,%fs:%gs:(%eax)
add    %al,(%eax)
iret
add    %al,(%eax)
add    %cl,0x28(%edi)
imul   $0x2f,0x4e(%esi),%ebp
jne    804caa2 <_IO_stdin_used+0xb1e>
jb     804ca60 <_IO_stdin_used+0xadc>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
push   %eax
add    (%eax),%al
add    %cl,0x0(%ecx)
add    %al,(%eax)
dec    %eax
sar    $0xff,%edi
insb   (%dx),%es:(%edi)
add    (%eax),%al
add    %ch,-0x4f00003c(%eax)
add    (%eax),%al
add    %ch,-0x38(%eax)
(bad)
call   *-0x47fffffe(%eax)
lret   $0xffff
rolb   (%edx)
add    %al,(%eax)
cmp    %cl,%bl
(bad)
incl   (%eax)
add    (%eax),%eax
add    %cl,-0x35(%eax)
(bad)
call   *(%ebx,%eax,1)
add    %al,(%eax)
pop    %eax
lret
(bad)
ljmp   *(%eax)
add    (%eax),%eax
add    %ch,(%eax)
int3
(bad)
call   *0x0(%ebx,%eax,1)
add    %cl,0x74ffffcc(%eax)
add    (%eax),%eax
add    %cl,%al
int3
(bad)
lcall  *-0x77fffffd(%eax)
int    $0xff
(bad)
mov    $0x38000003,%esp
into
(bad)
(bad)
cld
add    (%eax),%eax
add    %ch,-0x32(%eax)
(bad)
ljmp   *(%eax)
add    $0x0,%al
add    %bl,-0x31(%eax)
(bad)
jmp    *0x4(%eax)
add    %al,(%eax)
mov    %bl,%cl
(bad)
jmp    *-0x24d80000(%esp,%eax,1)
(bad)
jmp    *%esp
add    $0x0,%al
add    %ch,-0x25(%eax)
(bad)
lcall  *(%eax)
add    $0xdb880000,%eax
(bad)
ljmp   *-0x24580000(,%eax,1)
(bad)
incl   0x5(%eax)
add    %al,(%eax)
call   6d04cadc <opterr+0x64ffd938>
add    $0xdc080000,%eax
(bad)
(bad)
js     804cb0f <_IO_stdin_used+0xb8b>
add    %al,(%eax)
dec    %eax
fdivr  %st,%st(7)
lcall  *-0x23580000(%ebp,%eax,1)
(bad)
call   *%eax
add    $0xdd880000,%eax
(bad)
decl   (%esi,%eax,1)
add    %al,(%eax)
mov    $0x24ffffdd,%eax
push   %es
add    %al,(%eax)
dec    %eax
fdivrp %st,%st(7)
lcall  *0x6(%eax)
add    %al,(%eax)
push   $0x6cffffde
push   %es
add    %al,(%eax)
mov    %bl,%dh
(bad)
incl   -0x57fffffa(%eax)
fdivrp %st,%st(7)
call   *-0x21380000(%esi,%eax,1)
(bad)
ljmp   *-0x7fffffa(%eax)
fdivrp %st,%st(7)
dec    %eax
push   %es
add    %al,(%eax)
sub    %bl,%bh
(bad)
(bad)
call   6004cb6b <opterr+0x57ffd9c7>
(bad)
incl   (%eax)
pop    %es
add    %al,(%eax)
mov    %bl,%bh
(bad)
lcall  *(%eax)
pop    %es
add    %al,(%eax)
cmp    %ah,%al
(bad)
(bad)
cmp    $0x7,%al
add    %al,(%eax)
push   $0x54ffffe0
pop    %es
add    %al,(%eax)
cwtl
loopne 804cb86 <_IO_stdin_used+0xc02>
ljmp   *0x0(%edi,%eax,1)
add    %cl,%al
loopne 804cb8e <_IO_stdin_used+0xc0a>
incl   -0x1e880000(%edi,%eax,1)
(bad)
ljmp   *-0x47fffff9(%eax)
loope  804cb9e <_IO_stdin_used+0xc1a>
inc    %eax
pop    %es
add    %al,(%eax)
clc
loope  804cba6 <_IO_stdin_used+0xc22>
(bad)
fadds  (%edi)
add    %al,(%eax)
cmp    %ah,%dl
(bad)
push   %eax
pop    %es
add    %al,(%eax)
pop    %eax
loop   804cbb6 <_IO_stdin_used+0xc32>
incl   (%eax,%ecx,1)
add    %al,(%eax)
js     804cba0 <_IO_stdin_used+0xc1c>
(bad)
lcall  *(%eax)
or     %al,(%eax)
add    %bl,0x2cffffe2(%eax)
or     %al,(%eax)
add    %bh,0x40ffffe2(%eax)
or     %al,(%eax)
add    %ch,(%eax)
call   10e1cbd9 <opterr+0x8dcda35>
add    %al,(%eax)
js     804cbc6 <_IO_stdin_used+0xc42>
(bad)
push   %esp
or     %al,(%eax)
add    %bl,%al
call   111dcbe9 <opterr+0x918da45>
add    %al,(%eax)
sbb    %ch,%cl
(bad)
pushl  (%eax)
or     %eax,(%eax)
add    %cl,%al
jmp    1159cbf9 <opterr+0x954da55>
add    %al,(%eax)
clc
jmp    117dcc01 <opterr+0x978da5d>
add    %al,(%eax)
sub    %ch,%dl
(bad)
lcall  *-0x15c80000(%ecx,%ecx,1)
(bad)
pushl  -0x77fffff7(%eax)
ljmp   $0x0,$0x9e0ffff
enter  $0xffea,$0xff
or     $0xa,%al
add    %al,(%eax)
sub    %ch,%bl
(bad)
(bad)
cmp    $0xa,%al
add    %al,(%eax)
js     804cc19 <_IO_stdin_used+0xc95>
(bad)
jmp    *0xa(%eax)
add    %al,(%eax)
test   $0xeb,%al
(bad)
incl   -0x27fffff6(%eax)
jmp    804cc3e <_IO_stdin_used+0xcba>
lcall  *-0x13f80000(%edx,%ecx,1)
(bad)
(bad)
mov    $0x3800000a,%esp
in     (%dx),%al
(bad)
(bad)
fmull  (%edx)
add    %al,(%eax)
mov    %ch,%ah
(bad)
push   %eax
or     (%eax),%al
add    %bh,%al
in     (%dx),%al
(bad)
jmp    *(%ebx,%ecx,1)
add    %al,(%eax)
mov    %ch,%ch
(bad)
lcall  *0x0(%ebx,%ecx,1)
add    %cl,(%eax)
out    %al,(%dx)
(bad)
pushl  -0x10f80000(%ebx,%ecx,1)
(bad)
decl   (%eax)
or     $0x0,%al
add    %cl,%al
repnz (bad)
decl   0xc(%eax)
add    %al,(%eax)
push   $0x90fffff3
or     $0x0,%al
add    %cl,%al
repz (bad)
(bad)
mov    $0x5800000c,%esp
hlt
(bad)
call   *-0xb380000(,%ecx,1)
(bad)
call   *0xd(%eax)
add    %al,(%eax)
fdiv   %st(4),%st
(bad)
jmp    *0x0(%ebp,%ecx,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804ccc3 <_IO_stdin_used+0xd3f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
aam    $0xbe
(bad)
jmp    *0x3(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804cce3 <_IO_stdin_used+0xd5f>
js     804cce1 <_IO_stdin_used+0xd5d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,%al
(bad)
dec    %ecx
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %dh,%al
sar    $0xff,%edi
movb   $0x0,(%edx)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x2c,%eax
addb   $0x0,(%eax)
add    %ah,%al
(bad)
(bad)
(bad)
jl     804cd36 <_IO_stdin_used+0xdb2>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
mov    $0x0,%al
add    %al,(%eax)
xor    %cl,%al
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,%ah
add    %al,(%eax)
add    %ch,(%eax,%ecx,8)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,%al
add    %al,(%eax)
add    %ch,(%eax)
enter  $0xffff,$0xca
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
add    $0x1,%al
add    %al,(%eax)
int3
enter  $0xffff,$0x57
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,(%ecx,%eax,1)
add    %al,(%eax)
or     $0xc9,%al
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
dec    %eax
add    %eax,(%eax)
add    %ch,(%eax)
leave
(bad)
pushl  0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
push   $0xa
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %al,%ah
leave
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %eax,(%eax)
add    %dh,(%edx,%ecx,8)
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
fadds  (%ecx)
add    %al,(%eax)
cmp    %cl,%dl
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%eax)
add    (%eax),%al
add    %dh,%al
lret   $0xffff
das
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
push   %esp
add    (%eax),%al
add    %bl,%ah
aam    $0xff
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %dl,-0x29c40000(%edx,%eax,1)
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,%al
add    (%eax),%al
add    %cl,-0x2a(%eax)
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    (%eax),%al
add    %dl,-0x1(%esi,%edx,8)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%al
add    (%eax),%al
add    %ah,-0x2a(%eax)
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x3,%al
add    %al,(%eax)
jl     804cf9c <_IO_stdin_used+0x1018>
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    (%eax),%eax
add    %cl,0x38ffffd6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
dec    %esp
add    (%eax),%eax
add    %ah,0x60ffff(%esi,%edx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%ebx)
add    %dl,%al
(bad)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,-0x288c0000(%ebx,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
aam    $0x3
add    %al,(%eax)
mov    %ss,%edi
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
or     %al,(%eax,%eax,1)
add    %ch,%al
xlat   %ds:(%ebx)
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%esp,%eax,1)
add    %al,(%eax)
hlt
xlat   %ds:(%ebx)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    $0x0,%al
add    %al,(%eax)
fdivr  %st(7),%st
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,0x0(%esp,%eax,1)
add    %cl,(%eax,%ebx,8)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %eax
add    $0x0,%al
add    %bl,(%eax)
fdivr  %st(7),%st
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,0x4(%eax)
add    %al,(%eax)
sub    %bl,%al
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bl,0x38000004(%eax)
fdivr  %st(7),%st
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
mov    $0x4,%al
add    %al,(%eax)
push   %eax
fdivr  %st(7),%st
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
enter  $0x4,$0x0
push   $0xb0ffffd8
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
add    $0x0,%al
add    %dh,%ah
fdivr  %st(7),%st
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
add    $0x5,%al
add    %al,(%eax)
or     $0xd9,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
sbb    $0x5,%al
add    %al,(%eax)
and    $0xd9,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
xor    $0x5,%al
add    %al,(%eax)
cmp    $0xd9,%al
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
pop    %eax
add    $0xd9c80000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
jo     804d223 <_IO_stdin_used+0x129f>
add    %al,(%eax)
lock fcos
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
mov    %al,0xda180000
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
mov    0x40000005,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,-0x25b40000(%ebp,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,%al
add    $0xda580000,%eax
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    $0xda640000,%eax
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x10000000(%eax)
add    $0xda700000,%eax
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
mov    %es,(%esi)
add    %al,(%eax)
inc    %esp
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ah,-0x20840000(%esi,%eax,1)
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
enter  $0x6,$0x0
mov    $0x33ffffdf,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
loopne 804d394 <_IO_stdin_used+0x1410>
add    %al,(%eax)
loopne 804d371 <_IO_stdin_used+0x13ed>
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    $0x7,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
loopne 804d3b6 <_IO_stdin_used+0x1432>
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sub    %al,(%edi)
add    %al,(%eax)
js     804d3ba <_IO_stdin_used+0x1436>
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
dec    %esp
pop    %es
add    %al,(%eax)
test   %ah,%al
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
pusha
pop    %es
add    %al,(%eax)
and    $0xff,%al
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
nop
pop    %es
add    %al,(%eax)
mov    0x38ffffe0,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    $0xb4000007,%esp
loopne 804d46e <_IO_stdin_used+0x14ea>
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
pop    %es
add    %al,(%eax)
in     $0xe0,%al
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
adc    %cl,(%eax)
add    %al,(%eax)
adc    %ah,%cl
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %dh,(%eax)
or     %al,(%eax)
add    %ah,(%eax)
loope  804d4e2 <_IO_stdin_used+0x155e>
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
dec    %esp
or     %al,(%eax)
add    %dh,(%ecx,%eiz,8)
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %ch,0x0(%eax,%ecx,1)
add    %al,-0x1(%ecx,%eiz,8)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %cl,-0x1eac0000(%eax,%ecx,1)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,(%eax)
add    %al,(%eax)
add    %ah,-0x6ffffff8(%eax)
loope  804d552 <_IO_stdin_used+0x15ce>
jmp    *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ebp
xchg   %al,(%ebx)
addl   $0x46,(%edx,%eax,1)
or     %bl,%al
inc    %ecx
movb   $0xc,-0x3b(%ecx)
add    $0x4,%al
dec    %eax
or     -0x3d(%ecx),%ecx
inc    %ecx
movb   $0xc,-0x3b(%ecx)
add    $0x4,%al
xor    $0x0,%al
add    %al,(%eax)
aam    $0x8
add    %al,(%eax)
int3
loope  804d586 <_IO_stdin_used+0x1602>
incl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%edi),%cl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %cl,(%ecx,%ecx,1)
add    %al,(%eax)
and    $0xe2,%al
(bad)
(bad)
js     804d5c2 <_IO_stdin_used+0x163e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     804d5e3 <_IO_stdin_used+0x165f>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax)
add    %al,(%eax)
or     %eax,%fs:(%eax)
add    %cl,-0x1(%edx,%eiz,8)
push   %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
sbb    %al,(%edx)
popf
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%esi),%edx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%edx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx),%edx
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %bh,-0x7fffff7(%eax)
loop   804d66a <_IO_stdin_used+0x16e6>
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%eax
add    %bh,%al
or     %eax,(%eax)
add    %bh,-0x1a(%eax)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
inc    %eax
or     (%eax),%al
add    %dl,%al
out    %al,$0xff
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ch,0x0(%edx,%ecx,1)
add    %al,(%edi,%eiz,8)
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
les    (%edx),%ecx
add    %al,(%eax)
cmp    $0xe7,%al
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,(%eax)
or     (%eax),%eax
add    %dh,-0x19(%eax)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,(%ebx,%ecx,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
out    %eax,$0xff
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
nop
xchg   %eax,%edx
add    $0x8,%al
jo     804eea0 <_IO_stdin_used+0x2f1c>
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
js     804eead <_IO_stdin_used+0x2f29>
add    $0x8,%al
or     $0x6c000000,%eax
mov    $0x190804,%edi
add    %al,(%eax)
or     %ch,%bh
add    $0x8,%al
sbb    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0xef,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
in     $0x85,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dh,%ah
addl   $0xa,(%eax,%ecx,1)
mov    $0x2,%dh
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
lock add $0x8,%al
add    (%eax),%al
add    %al,(%eax)
test   $0x1,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dl,%al
mov    %eax,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
cwtl
mov    %eax,(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x18(%edi)
mov    %eax,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x66(%edi)
mov    %al,(%eax,%ecx,1)
add    %al,(%eax)
adc    $0xef,%al
add    $0x8,%al
mov    $0x8b,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
(bad)
mov    (%eax,%ecx,1),%eax
out    %al,$0x8b
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
push   %es
mov    %es,(%eax,%ecx,1)
push   %ss
mov    %es,(%eax,%ecx,1)
mov    %es,%es:(%eax,%ecx,1)
mov    %es,%ss:(%eax,%ecx,1)
inc    %esi
mov    %es,(%eax,%ecx,1)
push   %esi
mov    %es,(%eax,%ecx,1)
data16
mov    %es,(%eax,%ecx,1)
jbe    804efca <_IO_stdin_used+0x3046>
add    $0x8,%al
xchg   %cl,0x48c9608(%esp,%eax,1)
or     %ah,-0x49f7fb74(%esi)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
out    %al,$0x8c
add    $0x8,%al
(bad)
mov    %es,(%eax,%ecx,1)
push   %es
lea    (%eax,%ecx,1),%eax
push   %ss
lea    (%eax,%ecx,1),%eax
lea    %es:(%eax,%ecx,1),%eax
lea    %ss:(%eax,%ecx,1),%eax
inc    %esi
lea    (%eax,%ecx,1),%eax
push   %esi
lea    (%eax,%ecx,1),%eax
lea    (%eax,%ecx,1),%ax
jbe    804f00b <_IO_stdin_used+0x3087>
add    $0x8,%al
xchg   %cl,-0x7269f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lea    (%eax,%ecx,1),%eax
mov    $0x8d,%dh
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
(bad)
lea    (%eax,%ecx,1),%eax
out    %al,$0x8d
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
push   %es
mov    (%eax,%ecx,1),%es
push   %ss
mov    (%eax,%ecx,1),%es
mov    %es:(%eax,%ecx,1),%es
mov    %ss:(%eax,%ecx,1),%es
inc    %esi
mov    (%eax,%ecx,1),%es
push   %esi
mov    (%eax,%ecx,1),%es
data16
mov    (%eax,%ecx,1),%es
jbe    804f04c <_IO_stdin_used+0x30c8>
add    $0x8,%al
xchg   %cl,-0x7169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %ecx
ret
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %dh,(%ecx,%esi,8)
add    $0x8,%al
add    %al,(%ecx)
add    %al,(%eax)
(bad)
icebp
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jae    6e <strcmp@plt-0x8048b42>
gs
gs
jo     6 <strcmp@plt-0x8048baa>
add    %al,(%eax)
jle    ffffffde <opterr+0xf7fb0e3a>
or     %bl,%dl
