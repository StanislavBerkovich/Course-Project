das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,-0x24ed710a(%edi)
cs
enter  $0x6f26,$0xda
jge    804815d <__ctype_toupper_loc@plt-0xd23>
divl   -0x2d(%ebp)
dec    %esp
sti
push   $0x4c
ds
add    (%eax),%eax
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax,%eax,2)
dec    %eax
add    %ah,0x48123d(%ebp,%ebp,2)
add    %al,(%eax)
dec    %ecx
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
sub    %ebx,0x50bc1c8c
jbe    8048176 <__ctype_toupper_loc@plt-0xd0a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <__ctype_toupper_loc@plt-0xcf3>
dec    %ebx
jecxz  80481a4 <__ctype_toupper_loc@plt-0xcdc>
push   %bp
popa
adc    %dl,-0x1a687660(%esi)
bound  %eax,-0xb(%ecx)
xor    %ah,%al
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
push   $0x2
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%bh
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,%fs:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %esi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
incl   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lods   %ds:(%esi),%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    0x2,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cwtl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edi)
add    (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fildl  (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movl   $0x0,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
int    $0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%dh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
rolb   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   $0x2,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
flds   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jle    804863c <__ctype_toupper_loc@plt-0x844>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %eax,$0x0
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ecx)
add    %eax,(%eax)
add    %al,(%eax)
jb     8048684 <__ctype_toupper_loc@plt-0x7fc>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
out    %eax,(%dx)
add    (%eax),%al
add    %ah,0x4080571(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,-0x5bffffff(%ecx)
jno    80486a4 <__ctype_toupper_loc@plt-0x7dc>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
cli
add    (%eax),%al
add    %al,%al
jno    80486b4 <__ctype_toupper_loc@plt-0x7cc>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
adc    0x408,%al
add    %dl,(%ecx)
add    %cl,(%edi)
add    %ah,-0x1c000000(%ebx)
jno    80486d4 <__ctype_toupper_loc@plt-0x7ac>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
scas   %es:(%edi),%eax
add    %al,(%eax)
add    %al,%al
jno    80486e4 <__ctype_toupper_loc@plt-0x79c>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
inc    %ebp
add    (%eax),%al
add    %ah,0x4080571(%eax)
add    %al,(%eax)
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %bl,0x0(%eax,%eax,1)
add    %ah,%al
jno    8048704 <__ctype_toupper_loc@plt-0x77c>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
lahf
add    %eax,(%eax)
add    %al,(%edx,%esi,2)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804878f <__ctype_toupper_loc@plt-0x6f1>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    804879d <__ctype_toupper_loc@plt-0x6e3>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
jae    80487aa <__ctype_toupper_loc@plt-0x6d6>
jo     804879b <__ctype_toupper_loc@plt-0x6e5>
jo     80487b3 <__ctype_toupper_loc@plt-0x6cd>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    80487b7 <__ctype_toupper_loc@plt-0x6c9>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     80487c3 <__ctype_toupper_loc@plt-0x6bd>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     80487ca <__ctype_toupper_loc@plt-0x6b6>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     80487dc <__ctype_toupper_loc@plt-0x6a4>
outsl  %ds:(%esi),(%dx)
ja     80487ce <__ctype_toupper_loc@plt-0x6b2>
add    %dh,0x74(%ebx)
jb     80487de <__ctype_toupper_loc@plt-0x6a2>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80487e1 <__ctype_toupper_loc@plt-0x69f>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     80487f1 <__ctype_toupper_loc@plt-0x68f>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80487fd <__ctype_toupper_loc@plt-0x683>
gs
js     8048800 <__ctype_toupper_loc@plt-0x680>
add    %ah,0x72(%ebp)
jb     8048800 <__ctype_toupper_loc@plt-0x680>
jb     8048793 <__ctype_toupper_loc@plt-0x6ed>
pop    %edi
pop    %edi
jae    804880b <__ctype_toupper_loc@plt-0x675>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     80487bb <__ctype_toupper_loc@plt-0x6c5>
jae    8048831 <__ctype_toupper_loc@plt-0x64f>
imul   $0x6978655f,%fs:0x0(%esi),%ebp
je     80487c7 <__ctype_toupper_loc@plt-0x6b9>
jo     804883b <__ctype_toupper_loc@plt-0x645>
outsl  %ds:(%esi),(%dx)
addr16 jb 804882e <__ctype_toupper_loc@plt-0x652>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %dh,%gs:0x74(%ebx)
jb     8048849 <__ctype_toupper_loc@plt-0x637>
je     804884e <__ctype_toupper_loc@plt-0x632>
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     8048853 <__ctype_toupper_loc@plt-0x62d>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    804886c <__ctype_toupper_loc@plt-0x614>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80487ff <__ctype_toupper_loc@plt-0x681>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    804887c <__ctype_toupper_loc@plt-0x604>
jb     8048876 <__ctype_toupper_loc@plt-0x60a>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048876 <__ctype_toupper_loc@plt-0x60a>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    804887e <__ctype_toupper_loc@plt-0x602>
je     804881b <__ctype_toupper_loc@plt-0x665>
pop    %edi
pop    %edi
gs
jb     8048892 <__ctype_toupper_loc@plt-0x5ee>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6d656d00,0x6e(%edi),%ebp
arpl   %bp,0x70(%ebp)
add    %dh,0x6e(%ebp)
jae    804889c <__ctype_toupper_loc@plt-0x5e4>
je     804889e <__ctype_toupper_loc@plt-0x5e2>
outsb  %ds:(%esi),(%dx)
jbe    804883c <__ctype_toupper_loc@plt-0x644>
pop    %edi
pop    %edi
data16
jo     80488b3 <__ctype_toupper_loc@plt-0x5cd>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x70,(%eax),%eax
jne    80488c1 <__ctype_toupper_loc@plt-0x5bf>
outsb  %gs:(%esi),(%dx)
jbe    8048851 <__ctype_toupper_loc@plt-0x62f>
jae    80488c7 <__ctype_toupper_loc@plt-0x5b9>
outsl  %fs:(%esi),(%dx)
jne    80488cb <__ctype_toupper_loc@plt-0x5b5>
add    %ah,0x70(%esi)
jne    80488d0 <__ctype_toupper_loc@plt-0x5b0>
arpl   %ax,(%eax)
data16
jae    80488c6 <__ctype_toupper_loc@plt-0x5ba>
imul   $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80488d9 <__ctype_toupper_loc@plt-0x5a7>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     804888c <__ctype_toupper_loc@plt-0x5f4>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     804890f <__ctype_toupper_loc@plt-0x571>
je     80488ff <__ctype_toupper_loc@plt-0x581>
je     80488d6 <__ctype_toupper_loc@plt-0x5aa>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048919 <__ctype_toupper_loc@plt-0x567>
outsb  %ds:(%esi),(%dx)
jbe    80488b7 <__ctype_toupper_loc@plt-0x5c9>
outsl  %ds:(%esi),(%dx)
jo     804892e <__ctype_toupper_loc@plt-0x552>
popa
jb     8048924 <__ctype_toupper_loc@plt-0x55c>
add    %bl,0x5f(%edi)
data16
jb     8048928 <__ctype_toupper_loc@plt-0x558>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048941 <__ctype_toupper_loc@plt-0x53f>
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x5f(%ebx)
jae    804893d <__ctype_toupper_loc@plt-0x543>
je     804894e <__ctype_toupper_loc@plt-0x532>
imul   $0x63736600,0x65(%ebp),%ebp
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048958 <__ctype_toupper_loc@plt-0x528>
jo     804895f <__ctype_toupper_loc@plt-0x521>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%bp,%di)
je     8048969 <__ctype_toupper_loc@plt-0x517>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    80488fe <__ctype_toupper_loc@plt-0x582>
imul   $0x6f,0x6e(%ebp,%eiz,2),%bp
pop    %edi
pop    %edi
addr16
gs
je     804896f <__ctype_toupper_loc@plt-0x511>
gs
insb   (%dx),%es:(%edi)
imul   $0x69727766,0x0(%ebp),%ebp
je     804897b <__ctype_toupper_loc@plt-0x505>
add    %ah,0x65(%edi)
je     804898f <__ctype_toupper_loc@plt-0x4f1>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    8048924 <__ctype_toupper_loc@plt-0x55c>
arpl   %bp,0x63(%edi,%ebp,2)
imul   $0x65,0x67(%edi),%ebx
je     80489a2 <__ctype_toupper_loc@plt-0x4de>
imul   $0x665f5f00,0x65(%ebp),%ebp
jo     804899c <__ctype_toupper_loc@plt-0x4e4>
outsb  %ds:(%esi),(%dx)
imul   $0x636f6c00,%fs:0x67(%esi),%ebp
popa
insb   (%dx),%es:(%edi)
je     80489ad <__ctype_toupper_loc@plt-0x4d3>
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x65(%ebx,%esi,2)
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     80489b6 <__ctype_toupper_loc@plt-0x4ca>
push   $0x6b6d0072
je     80489c3 <__ctype_toupper_loc@plt-0x4bd>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 80489c4 <__ctype_toupper_loc@plt-0x4bc>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     80489e9 <__ctype_toupper_loc@plt-0x497>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80489e5 <__ctype_toupper_loc@plt-0x49b>
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     80489fb <__ctype_toupper_loc@plt-0x485>
jne    80489fe <__ctype_toupper_loc@plt-0x482>
jo     80489f5 <__ctype_toupper_loc@plt-0x48b>
jb     80489f1 <__ctype_toupper_loc@plt-0x48f>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048a0f <__ctype_toupper_loc@plt-0x471>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048a09 <__ctype_toupper_loc@plt-0x477>
jb     8048a05 <__ctype_toupper_loc@plt-0x47b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
jae    8048a1e <__ctype_toupper_loc@plt-0x462>
jb     8048a19 <__ctype_toupper_loc@plt-0x467>
outsb  %ds:(%esi),(%dx)
je     8048a19 <__ctype_toupper_loc@plt-0x467>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x6f(%esi)
jo     8048a21 <__ctype_toupper_loc@plt-0x45f>
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
bound  %ebp,0x6e(%ecx)
fs
je     8048a2b <__ctype_toupper_loc@plt-0x455>
js     8048a3c <__ctype_toupper_loc@plt-0x444>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x63727473,0x0(%esi),%ebp
insl   (%dx),%es:(%edi)
jo     80489d6 <__ctype_toupper_loc@plt-0x4aa>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048a56 <__ctype_toupper_loc@plt-0x42a>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x766f5f5f,0x0(%esi),%ebp
gs
jb     8048a55 <__ctype_toupper_loc@plt-0x42b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80489f3 <__ctype_toupper_loc@plt-0x48d>
data16
jo     8048a6b <__ctype_toupper_loc@plt-0x415>
je     8048a6b <__ctype_toupper_loc@plt-0x415>
pop    %edi
jne    8048a69 <__ctype_toupper_loc@plt-0x417>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048a7d <__ctype_toupper_loc@plt-0x403>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048a88 <__ctype_toupper_loc@plt-0x3f8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048a8c <__ctype_toupper_loc@plt-0x3f4>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048a90 <__ctype_toupper_loc@plt-0x3f0>
js     8048a96 <__ctype_toupper_loc@plt-0x3ea>
je     8048a2f <__ctype_toupper_loc@plt-0x451>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048aac <__ctype_toupper_loc@plt-0x3d4>
popa
jb     8048aaf <__ctype_toupper_loc@plt-0x3d1>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x3000400,%eax
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
push   %es
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%ebx)
add    %cl,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
or     %eax,(%eax)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x9000300,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
or     %eax,(%eax)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %cl,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %eax,(%eax)
or     %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
je     8048b63 <__ctype_toupper_loc@plt-0x31d>
imul   $0x90000,(%ecx),%ecx
add    %es:(%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x80000,(%ecx),%ecx
xor    (%ebx),%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x70000,%eax
add    %ds:(%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x348,0x60000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%edi
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
add    $0x35200,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x40000,0xd(%ecx),%ebp
pop    %ebp
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x30000,0xd(%ecx),%ebp
add    (%bx,%si),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x20000,0xd(%ecx),%ebp
jno    8048bc5 <__ctype_toupper_loc@plt-0x2bb>
add    %al,(%eax)
add    %al,(%eax)
cld
outsl  %ds:(%esi),(%dx)
add    $0x220608,%eax
add    %ah,0x5080571(%eax)
dec    %ecx
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
jno    8048be0 <__ctype_toupper_loc@plt-0x2a0>
or     %al,0xc000004a
jno    8048be8 <__ctype_toupper_loc@plt-0x298>
or     %al,0xe000004b
jno    8048bf0 <__ctype_toupper_loc@plt-0x290>
or     %al,0xe4000050
jno    8048bf8 <__ctype_toupper_loc@plt-0x288>
or     %al,0x4d
jb     8048c00 <__ctype_toupper_loc@plt-0x280>
or     %al,0x4000048
jb     8048c08 <__ctype_toupper_loc@plt-0x278>
.byte 0x8
.byte 0x5
push   %ecx
or     $0x70,%al
add    $0x10708,%eax
add    %dl,(%eax)
jo     8048c18 <__ctype_toupper_loc@plt-0x268>
or     %al,(%edi)
add    (%eax),%al
add    %dl,(%eax,%esi,2)
add    $0x30708,%eax
add    %bl,(%eax)
jo     8048c28 <__ctype_toupper_loc@plt-0x258>
or     %al,(%edi)
add    $0x0,%al
add    %bl,(%eax,%esi,2)
add    $0x50708,%eax
add    %ah,(%eax)
jo     8048c38 <__ctype_toupper_loc@plt-0x248>
or     %al,(%edi)
push   %es
add    %al,(%eax)
and    $0x70,%al
add    $0x70708,%eax
add    %ch,(%eax)
jo     8048c48 <__ctype_toupper_loc@plt-0x238>
or     %al,(%edi)
or     %al,(%eax)
add    %ch,(%eax,%esi,2)
add    $0x90708,%eax
add    %dh,(%eax)
jo     8048c58 <__ctype_toupper_loc@plt-0x228>
or     %al,(%edi)
or     (%eax),%al
add    %dh,(%eax,%esi,2)
add    $0xb0708,%eax
add    %bh,(%eax)
jo     8048c68 <__ctype_toupper_loc@plt-0x218>
or     %al,(%edi)
or     $0x0,%al
add    %bh,(%eax,%esi,2)
add    $0xd0708,%eax
add    %al,0x70(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%esi,2)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
jo     8048c88 <__ctype_toupper_loc@plt-0x1f8>
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x70(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x70(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    $0x70600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%esi,2)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080570
sbb    %al,(%eax)
add    %ch,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x70(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x70(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    $0x70800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%esi,2)
add    %al,(%eax)
mov    %dh,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x21070805(%eax,%esi,2)
add    %al,(%eax)
nop
jo     8048d18 <__ctype_toupper_loc@plt-0x168>
or     %al,(%edi)
and    (%eax),%al
add    %dl,0x23070805(%eax,%esi,2)
add    %al,(%eax)
cwtl
jo     8048d28 <__ctype_toupper_loc@plt-0x158>
or     %al,(%edi)
and    $0x0,%al
add    %bl,0x25070805(%eax,%esi,2)
add    %al,(%eax)
mov    0x7080570,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
jo     8048d40 <__ctype_toupper_loc@plt-0x140>
or     %al,(%edi)
daa
add    %al,(%eax)
test   $0x70,%al
add    $0x280708,%eax
add    %ch,0x29070805(%eax,%esi,2)
add    %al,(%eax)
mov    $0x70,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%esi,2)
add    %al,(%eax)
mov    $0x7080570,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%esi,2)
add    %al,(%eax)
(bad)
jo     8048d78 <__ctype_toupper_loc@plt-0x108>
or     %al,(%edi)
add    %al,%cs:(%eax)
les    0x5(%eax),%esi
or     %al,(%edi)
das
add    %al,(%eax)
enter  $0x570,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
jo     8048d90 <__ctype_toupper_loc@plt-0xf0>
or     %al,(%edi)
xor    %eax,(%eax)
add    %dl,%al
jo     8048d98 <__ctype_toupper_loc@plt-0xe8>
or     %al,(%edi)
xor    (%eax),%al
add    %dl,%ah
jo     8048da0 <__ctype_toupper_loc@plt-0xe0>
or     %al,(%edi)
xor    (%eax),%eax
add    %bl,%al
jo     8048da8 <__ctype_toupper_loc@plt-0xd8>
or     %al,(%edi)
xor    $0x0,%al
add    %bl,%ah
jo     8048db0 <__ctype_toupper_loc@plt-0xd0>
or     %al,(%edi)
xor    $0x70e00000,%eax
add    $0x360708,%eax
add    %ah,%ah
jo     8048dc0 <__ctype_toupper_loc@plt-0xc0>
or     %al,(%edi)
aaa
add    %al,(%eax)
call   f0c9335 <optarg+0x7072131>
cmp    %al,(%eax)
add    %ch,%ah
jo     8048dd0 <__ctype_toupper_loc@plt-0xb0>
or     %al,(%edi)
cmp    %eax,(%eax)
add    %dh,%al
jo     8048dd8 <__ctype_toupper_loc@plt-0xa8>
or     %al,(%edi)
cmp    (%eax),%al
add    %dh,%ah
jo     8048de0 <__ctype_toupper_loc@plt-0xa0>
or     %al,(%edi)
cmp    (%eax),%eax
add    %bh,%al
jo     8048de8 <__ctype_toupper_loc@plt-0x98>
or     %al,(%edi)
cmp    $0x0,%al
add    %bh,%ah
jo     8048df0 <__ctype_toupper_loc@plt-0x90>
or     %al,(%edi)
cmp    $0x71000000,%eax
add    $0x3e0708,%eax
add    %al,(%ecx,%esi,2)
add    $0x3f0708,%eax
add    %cl,(%eax)
jno    8048e08 <__ctype_toupper_loc@plt-0x78>
or     %al,(%edi)
inc    %eax
add    %al,(%eax)
or     $0x71,%al
add    $0x410708,%eax
add    %dl,(%eax)
jno    8048e18 <__ctype_toupper_loc@plt-0x68>
or     %al,(%edi)
inc    %edx
add    %al,(%eax)
adc    $0x71,%al
add    $0x430708,%eax
add    %bl,(%eax)
jno    8048e28 <__ctype_toupper_loc@plt-0x58>
or     %al,(%edi)
inc    %esp
add    %al,(%eax)
sbb    $0x71,%al
add    $0x450708,%eax
add    %ah,(%eax)
jno    8048e38 <__ctype_toupper_loc@plt-0x48>
or     %al,(%edi)
inc    %esi
add    %al,(%eax)
and    $0x71,%al
add    $0x470708,%eax
push   %ebx
sub    $0x8,%esp
call   8049b30 <__sprintf_chk@plt+0x850>
add    $0xe1b7,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048e5e <__ctype_toupper_loc@plt-0x22>
call   8049090 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8057004
jmp    *0x8057008
add    %al,(%eax)
jmp    *0x805700c
push   $0x0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057010
push   $0x8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057014
push   $0x10
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057018
push   $0x18
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805701c
push   $0x20
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057020
push   $0x28
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057024
push   $0x30
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057028
push   $0x38
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805702c
push   $0x40
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057030
push   $0x48
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057034
push   $0x50
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057038
push   $0x58
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805703c
push   $0x60
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057040
push   $0x68
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057044
push   $0x70
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057048
push   $0x78
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805704c
push   $0x80
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057050
push   $0x88
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057054
push   $0x90
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057058
push   $0x98
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805705c
push   $0xa0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057060
push   $0xa8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057064
push   $0xb0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057068
push   $0xb8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805706c
push   $0xc0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057070
push   $0xc8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057074
push   $0xd0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057078
push   $0xd8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805707c
push   $0xe0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057080
push   $0xe8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057084
push   $0xf0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057088
push   $0xf8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805708c
push   $0x100
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057090
push   $0x108
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057094
push   $0x110
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057098
push   $0x118
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805709c
push   $0x120
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a0
push   $0x128
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a4
push   $0x130
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570a8
push   $0x138
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570ac
push   $0x140
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b0
push   $0x148
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b4
push   $0x150
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570b8
push   $0x158
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570bc
push   $0x160
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c0
push   $0x168
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c4
push   $0x170
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570c8
push   $0x178
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570cc
push   $0x180
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d0
push   $0x188
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d4
push   $0x190
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570d8
push   $0x198
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570dc
push   $0x1a0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e0
push   $0x1a8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e4
push   $0x1b0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570e8
push   $0x1b8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570ec
push   $0x1c0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f0
push   $0x1c8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f4
push   $0x1d0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570f8
push   $0x1d8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x80570fc
push   $0x1e0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057100
push   $0x1e8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057104
push   $0x1f0
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057108
push   $0x1f8
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805710c
push   $0x200
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057110
push   $0x208
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057114
push   $0x210
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057118
push   $0x218
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x805711c
push   $0x220
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057120
push   $0x228
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
jmp    *0x8057124
push   $0x230
jmp    8048e70 <__ctype_toupper_loc@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xa0,%esp
mov    0xc(%ebp),%ebx
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804e8e0 <__sprintf_chk@plt+0x5600>
movl   $0x8053e7d,0x4(%esp)
movl   $0x6,(%esp)
call   80491f0 <setlocale@plt>
movl   $0x80512cb,0x4(%esp)
movl   $0x80512a5,(%esp)
call   8049250 <bindtextdomain@plt>
movl   $0x80512a5,(%esp)
call   8048fa0 <textdomain@plt>
movl   $0x804a6d0,(%esp)
call   80511f0 <__sprintf_chk@plt+0x7f10>
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movb   $0x0,0x23(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x24(%esp)
mov    0x8(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x8052800,0xc(%esp)
movl   $0x80528e0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80490e0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     80495f6 <__sprintf_chk@plt+0x316>
cmp    $0x64,%eax
je     80495e1 <__sprintf_chk@plt+0x301>
lea    0x0(%esi,%eiz,1),%esi
jle    80493e8 <__sprintf_chk@plt+0x108>
cmp    $0x73,%eax
je     80495c2 <__sprintf_chk@plt+0x2e2>
nop
lea    0x0(%esi,%eiz,1),%esi
jg     8049450 <__sprintf_chk@plt+0x170>
cmp    $0x66,%eax
je     8049516 <__sprintf_chk@plt+0x236>
cmp    $0x72,%eax
jne    80495b6 <__sprintf_chk@plt+0x2d6>
mov    0x8057204,%eax
mov    %eax,0x28(%esp)
jmp    8049373 <__sprintf_chk@plt+0x93>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffff7e,%eax
je     80495d5 <__sprintf_chk@plt+0x2f5>
jle    8049524 <__sprintf_chk@plt+0x244>
cmp    $0x49,%eax
je     80494c2 <__sprintf_chk@plt+0x1e2>
cmp    $0x52,%eax
jne    80495b6 <__sprintf_chk@plt+0x2d6>
mov    $0x80528ee,%edi
test   %esi,%esi
je     8049448 <__sprintf_chk@plt+0x168>
movl   $0x5,0x8(%esp)
movl   $0x80525ac,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
mov    %edi,%esi
jmp    8049373 <__sprintf_chk@plt+0x93>
nop
cmp    $0x75,%eax
je     80494a9 <__sprintf_chk@plt+0x1c9>
add    $0xffffff80,%eax
jne    80495b6 <__sprintf_chk@plt+0x2d6>
mov    0x805714c,%eax
movl   $0x4,0x10(%esp)
movl   $0x8052910,0xc(%esp)
movl   $0x8052924,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x8057204,%eax
movl   $0x80512dd,(%esp)
mov    %eax,0x4(%esp)
call   804a5f0 <__sprintf_chk@plt+0x1310>
mov    0x8052910(,%eax,4),%edi
shl    $0x5,%edi
add    $0x80527a0,%edi
jmp    8049410 <__sprintf_chk@plt+0x130>
movl   $0x80512f3,(%esp)
call   80491d0 <putenv@plt>
test   %eax,%eax
je     8049373 <__sprintf_chk@plt+0x93>
call   8050800 <__sprintf_chk@plt+0x7520>
mov    0x8057204,%eax
test   %eax,%eax
je     80495ef <__sprintf_chk@plt+0x30f>
mov    0x805714c,%edx
movl   $0x4,0x10(%esp)
movl   $0x8052908,0xc(%esp)
movl   $0x805291c,0x8(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x4(%esp)
movl   $0x80512e8,(%esp)
call   804a5f0 <__sprintf_chk@plt+0x1310>
mov    0x8052908(,%eax,4),%edi
shl    $0x5,%edi
add    $0x8052700,%edi
jmp    8049410 <__sprintf_chk@plt+0x130>
mov    0x8057204,%eax
mov    %eax,0x2c(%esp)
jmp    8049373 <__sprintf_chk@plt+0x93>
cmp    $0xffffff7d,%eax
jne    80495b6 <__sprintf_chk@plt+0x2d6>
mov    0x8057148,%eax
movl   $0x0,0x14(%esp)
movl   $0x80512fb,0x10(%esp)
movl   $0x80512a1,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8057200,%eax
movl   $0x8051346,0x4(%esp)
mov    %eax,(%esp)
call   80504a0 <__sprintf_chk@plt+0x71c0>
movl   $0x0,(%esp)
call   80490a0 <exit@plt>
mov    (%ebx,%ecx,4),%eax
mov    %eax,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x5,0x8(%esp)
movl   $0x805130b,0x4(%esp)
mov    %eax,%ebx
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
movl   $0x1,(%esp)
call   8049d50 <__sprintf_chk@plt+0xa70>
mov    0x8057204,%eax
movb   $0x1,0x23(%esp)
mov    %eax,0x1c(%esp)
jmp    8049373 <__sprintf_chk@plt+0x93>
movl   $0x0,(%esp)
call   8049d50 <__sprintf_chk@plt+0xa70>
mov    0x8057204,%eax
mov    %eax,0x24(%esp)
jmp    8049373 <__sprintf_chk@plt+0x93>
xor    %edi,%edi
jmp    8049508 <__sprintf_chk@plt+0x228>
cmpl   $0x0,0x2c(%esp)
setne  %al
cmpl   $0x0,0x28(%esp)
mov    %eax,%edi
movzbl %al,%eax
setne  0x22(%esp)
xor    %edx,%edx
cmpl   $0x0,0x24(%esp)
setne  %dl
add    %eax,%edx
movzbl 0x22(%esp),%eax
add    %eax,%edx
cmp    $0x1,%edx
jle    804965e <__sprintf_chk@plt+0x37e>
movl   $0x5,0x8(%esp)
movl   $0x80525d0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
jmp    80495b6 <__sprintf_chk@plt+0x2d6>
mov    %edx,%eax
and    $0x1,%al
mov    %al,0x18(%esp)
jne    80497fe <__sprintf_chk@plt+0x51e>
mov    0x80571e0,%eax
cmp    %eax,0x8(%ebp)
jle    80496a4 <__sprintf_chk@plt+0x3c4>
lea    0x1(%eax),%ecx
cmp    %ecx,0x8(%ebp)
jg     8049571 <__sprintf_chk@plt+0x291>
mov    (%ebx,%eax,4),%ecx
cmpb   $0x2b,(%ecx)
je     80499d7 <__sprintf_chk@plt+0x6f7>
cmpb   $0x0,0x18(%esp)
jne    8049a84 <__sprintf_chk@plt+0x7a4>
cmpb   $0x0,0x23(%esp)
jne    8049a84 <__sprintf_chk@plt+0x7a4>
test   %esi,%esi
je     8049ab4 <__sprintf_chk@plt+0x7d4>
mov    %edi,%eax
test   %al,%al
je     8049874 <__sprintf_chk@plt+0x594>
mov    0x2c(%esp),%eax
cmpb   $0x2d,(%eax)
jne    804981e <__sprintf_chk@plt+0x53e>
cmpb   $0x0,0x1(%eax)
jne    804981e <__sprintf_chk@plt+0x53e>
movl   $0x5,0x8(%esp)
movl   $0x805131c,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,0x2c(%esp)
mov    0x80571e4,%eax
mov    %eax,0x28(%esp)
movl   $0x0,0x34(%esp)
mov    $0x1,%ebx
movl   $0x0,0x38(%esp)
mov    0x28(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0xc(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <__getdelim@plt>
test   %eax,%eax
mov    %eax,%edi
js     80497ce <__sprintf_chk@plt+0x4ee>
mov    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   804da10 <__sprintf_chk@plt+0x4730>
test   %al,%al
jne    80497af <__sprintf_chk@plt+0x4cf>
mov    0x34(%esp),%edx
lea    -0x1(%edx,%edi,1),%eax
cmpb   $0xa,(%eax)
je     80497c5 <__sprintf_chk@plt+0x4e5>
mov    %edx,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x5,0x8(%esp)
movl   $0x805132b,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f70 <dcgettext@plt>
mov    %ebx,0xc(%esp)
xor    %ebx,%ebx
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
jmp    804970b <__sprintf_chk@plt+0x42b>
mov    0x40(%esp),%edx
mov    %esi,%eax
mov    0x44(%esp),%ecx
call   8049c00 <__sprintf_chk@plt+0x920>
and    %eax,%ebx
jmp    804970b <__sprintf_chk@plt+0x42b>
movb   $0x0,(%eax)
mov    0x34(%esp),%edx
jmp    8049766 <__sprintf_chk@plt+0x486>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8050850 <__sprintf_chk@plt+0x7570>
add    $0x1,%eax
je     80499a1 <__sprintf_chk@plt+0x6c1>
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8048ee0 <free@plt>
xor    %eax,%eax
test   %bl,%bl
sete   %al
mov    %eax,(%esp)
call   80490a0 <exit@plt>
cmpb   $0x0,0x23(%esp)
je     804966c <__sprintf_chk@plt+0x38c>
movl   $0x5,0x8(%esp)
movl   $0x8052614,0x4(%esp)
jmp    8049635 <__sprintf_chk@plt+0x355>
mov    0x2c(%esp),%eax
movl   $0x805299d,0x4(%esp)
mov    %eax,(%esp)
call   8048fd0 <fopen64@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
jne    80496f6 <__sprintf_chk@plt+0x416>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
mov    %eax,%ebx
call   8049180 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8052990,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
jmp    80496f6 <__sprintf_chk@plt+0x416>
and    $0x1,%dl
jne    8049934 <__sprintf_chk@plt+0x654>
cmpb   $0x0,0x23(%esp)
jne    8049934 <__sprintf_chk@plt+0x654>
mov    0x80571e0,%eax
cmp    %eax,0x8(%ebp)
jle    8049aa3 <__sprintf_chk@plt+0x7c3>
mov    (%ebx,%eax,4),%eax
movl   $0xe,0x8(%esp)
mov    %eax,0x1c(%esp)
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804e5b0 <__sprintf_chk@plt+0x52d0>
movl   $0x0,0x3c(%esp)
movb   $0x1,0x23(%esp)
test   %al,%al
jne    804990c <__sprintf_chk@plt+0x62c>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x5,0x8(%esp)
movl   $0x805132b,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f70 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
cmpb   $0x0,0x23(%esp)
jne    8049a30 <__sprintf_chk@plt+0x750>
mov    $0x1,%edi
mov    0x38(%esp),%edx
mov    %esi,%eax
mov    0x3c(%esp),%ecx
call   8049c00 <__sprintf_chk@plt+0x920>
mov    %eax,%ebx
and    %edi,%ebx
jmp    80497ef <__sprintf_chk@plt+0x50f>
cmpb   $0x0,0x22(%esp)
je     8049ada <__sprintf_chk@plt+0x7fa>
lea    0x40(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049280 <__xstat64@plt>
test   %eax,%eax
je     8049986 <__sprintf_chk@plt+0x6a6>
call   8049180 <__errno_location@plt>
mov    0x28(%esp),%ecx
movl   $0x8052990,0x8(%esp)
mov    %ecx,0xc(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
mov    0x88(%esp),%eax
mov    %eax,0x38(%esp)
mov    0x8c(%esp),%eax
mov    %eax,0x3c(%esp)
jmp    804990c <__sprintf_chk@plt+0x62c>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
mov    %eax,%esi
call   8049180 <__errno_location@plt>
mov    %esi,0xc(%esp)
movl   $0x8052990,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
jmp    80497e3 <__sprintf_chk@plt+0x503>
test   %esi,%esi
je     8049a1c <__sprintf_chk@plt+0x73c>
movl   $0x5,0x8(%esp)
movl   $0x80525ac,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x18(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
mov    0x80571e0,%eax
mov    0x18(%esp),%edx
lea    0x1(%eax),%esi
mov    %esi,0x80571e0
mov    (%ebx,%eax,4),%esi
add    $0x1,%esi
jmp    80496a4 <__sprintf_chk@plt+0x3c4>
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804fe10 <__sprintf_chk@plt+0x6b30>
test   %eax,%eax
je     8049917 <__sprintf_chk@plt+0x637>
movl   $0x5,0x8(%esp)
xor    %edi,%edi
movl   $0x805133b,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,%ebx
call   8049180 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
jmp    804991c <__sprintf_chk@plt+0x63c>
mov    %ecx,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x5,0x8(%esp)
movl   $0x8052654,0x4(%esp)
mov    %eax,%ebx
jmp    804958e <__sprintf_chk@plt+0x2ae>
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804c270 <__sprintf_chk@plt+0x2f90>
jmp    8049917 <__sprintf_chk@plt+0x637>
movl   $0x2006c,(%esp)
mov    %edx,0x18(%esp)
call   80491e0 <nl_langinfo@plt>
mov    0x18(%esp),%edx
cmpb   $0x0,(%eax)
mov    %eax,%esi
mov    $0x80512b3,%eax
cmove  %eax,%esi
jmp    80496ac <__sprintf_chk@plt+0x3cc>
mov    0x1c(%esp),%ecx
mov    0x24(%esp),%eax
movl   $0x0,0x8(%esp)
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %eax,0x1c(%esp)
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804da10 <__sprintf_chk@plt+0x4730>
jmp    80498c2 <__sprintf_chk@plt+0x5e2>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80511e0
push   $0x8051170
push   %ecx
push   %esi
push   $0x80492f0
call   8049150 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80571a3,%eax
sub    $0x80571a0,%eax
cmp    $0x6,%eax
ja     8049b50 <__sprintf_chk@plt+0x870>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049b4f <__sprintf_chk@plt+0x86f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80571a0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80571a0,%eax
sub    $0x80571a0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049b89 <__sprintf_chk@plt+0x8a9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049b88 <__sprintf_chk@plt+0x8a8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80571a0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8057208
jne    8049bcc <__sprintf_chk@plt+0x8ec>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049b40 <__sprintf_chk@plt+0x860>
movb   $0x1,0x8057208
leave
repz ret
xchg   %ax,%ax
mov    0x8056f10,%eax
test   %eax,%eax
je     8049bf8 <__sprintf_chk@plt+0x918>
mov    $0x0,%eax
test   %eax,%eax
je     8049bf8 <__sprintf_chk@plt+0x918>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8056f10,(%esp)
call   *%eax
leave
jmp    8049b70 <__sprintf_chk@plt+0x890>
nop
jmp    8049b70 <__sprintf_chk@plt+0x890>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x44,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
lea    0x18(%esp),%eax
mov    %eax,(%esp)
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
mov    %eax,%esi
je     8049cd8 <__sprintf_chk@plt+0x9f8>
cmp    $0x80528ee,%ebx
je     8049cb8 <__sprintf_chk@plt+0x9d8>
mov    0x1c(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8057200,%eax
mov    %eax,(%esp)
call   804c240 <__sprintf_chk@plt+0x2f60>
mov    0x8057200,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8049d37 <__sprintf_chk@plt+0xa57>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
cmp    $0x80528ee,%ebx
mov    $0x1,%esi
je     8049ca0 <__sprintf_chk@plt+0x9c0>
mov    0x3c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    8049d32 <__sprintf_chk@plt+0xa52>
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
movl   $0x8053e7d,0x4(%esp)
movl   $0x2,(%esp)
call   80491f0 <setlocale@plt>
jmp    8049c85 <__sprintf_chk@plt+0x9a5>
xchg   %ax,%ax
movl   $0x8052d64,0x4(%esp)
movl   $0x2,(%esp)
call   80491f0 <setlocale@plt>
jmp    8049c39 <__sprintf_chk@plt+0x959>
lea    0x0(%esi,%eiz,1),%esi
lea    0x27(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
sar    $0x1f,%eax
mov    %eax,0x4(%esp)
call   804c2c0 <__sprintf_chk@plt+0x2fe0>
movl   $0x5,0x8(%esp)
movl   $0x8051248,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048f70 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049040 <error@plt>
jmp    8049c85 <__sprintf_chk@plt+0x9a5>
call   8048f90 <__stack_chk_fail@plt>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__overflow@plt>
jmp    8049c78 <__sprintf_chk@plt+0x998>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x8057214,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049da4 <__sprintf_chk@plt+0xac4>
movl   $0x80513a8,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   8049240 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   80490a0 <exit@plt>
movl   $0x80513d0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805142c,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051474,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80514c0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051674,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051748,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051924,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051954,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805198c,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051a10,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051ae4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051b94,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051c3c,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051c98,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051d28,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051e58,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051ec4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051fbc,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805205c,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80521a4,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052278,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052368,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    0x8057214,%eax
mov    %eax,(%esp)
call   804a7a0 <__sprintf_chk@plt+0x14c0>
movl   $0x5,0x8(%esp)
movl   $0x8051260,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f70 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8051277,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805128d,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x80524b8,0xc(%esp)
movl   $0x80512a1,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80524e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   80491f0 <setlocale@plt>
test   %eax,%eax
je     804a27b <__sprintf_chk@plt+0xf9b>
movl   $0x3,0x8(%esp)
movl   $0x80512af,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strncmp@plt>
test   %eax,%eax
jne    804a2bf <__sprintf_chk@plt+0xfdf>
mov    0x8057214,%eax
mov    %eax,(%esp)
call   804a7a0 <__sprintf_chk@plt+0x14c0>
movl   $0x5,0x8(%esp)
movl   $0x8052568,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f70 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
jmp    8049d9c <__sprintf_chk@plt+0xabc>
mov    0x8057214,%eax
mov    %eax,(%esp)
call   804a7a0 <__sprintf_chk@plt+0x14c0>
movl   $0x5,0x8(%esp)
movl   $0x8052520,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048f70 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
jmp    804a27b <__sprintf_chk@plt+0xf9b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x1,(%esp)
call   8049d50 <__sprintf_chk@plt+0xa70>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049120 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     804a412 <__sprintf_chk@plt+0x1132>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    804a3b6 <__sprintf_chk@plt+0x10d6>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804a3e8 <__sprintf_chk@plt+0x1108>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048f50 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     804a3f0 <__sprintf_chk@plt+0x1110>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049260 <strncmp@plt>
test   %eax,%eax
jne    804a3a4 <__sprintf_chk@plt+0x10c4>
mov    %edi,(%esp)
call   8049120 <strlen@plt>
cmp    %ebp,%eax
je     804a408 <__sprintf_chk@plt+0x1128>
cmpl   $0xffffffff,0x18(%esp)
jne    804a368 <__sprintf_chk@plt+0x1088>
mov    %ebx,0x18(%esp)
jmp    804a3a4 <__sprintf_chk@plt+0x10c4>
nop
movb   $0x1,0x1f(%esp)
jmp    804a3a4 <__sprintf_chk@plt+0x10c4>
nop
cmpb   $0x0,0x1f(%esp)
jne    804a41c <__sprintf_chk@plt+0x113c>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    804a3f7 <__sprintf_chk@plt+0x1117>
mov    $0xfffffffe,%eax
jmp    804a3fb <__sprintf_chk@plt+0x111b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     804a4b8 <__sprintf_chk@plt+0x11d8>
movl   $0x8052954,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804fdd0 <__sprintf_chk@plt+0x6af0>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   804fa20 <__sprintf_chk@plt+0x6740>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   8049040 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x8052939,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,%esi
jmp    804a45a <__sprintf_chk@plt+0x117a>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x80571a4,%edi
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x8052971,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   8048f70 <dcgettext@plt>
mov    %edi,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
mov    (%esi),%ebp
xor    %esi,%esi
test   %ebp,%ebp
jne    804a56d <__sprintf_chk@plt+0x128d>
jmp    804a5b8 <__sprintf_chk@plt+0x12d8>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    %ebx,%edi
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x8052986,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   8049240 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     804a5b8 <__sprintf_chk@plt+0x12d8>
test   %esi,%esi
je     804a530 <__sprintf_chk@plt+0x1250>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8048f50 <memcmp@plt>
test   %eax,%eax
jne    804a530 <__sprintf_chk@plt+0x1250>
mov    %ebp,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b10>
movl   $0x805298e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804a55b <__sprintf_chk@plt+0x127b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80571a4,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804a5d6 <__sprintf_chk@plt+0x12f6>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049210 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   804a330 <__sprintf_chk@plt+0x1050>
test   %eax,%eax
js     804a627 <__sprintf_chk@plt+0x1347>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804a430 <__sprintf_chk@plt+0x1150>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804a4d0 <__sprintf_chk@plt+0x11f0>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    804a61f <__sprintf_chk@plt+0x133f>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     804a6a3 <__sprintf_chk@plt+0x13c3>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    804a68b <__sprintf_chk@plt+0x13ab>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     804a6a3 <__sprintf_chk@plt+0x13c3>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048f50 <memcmp@plt>
test   %eax,%eax
jne    804a680 <__sprintf_chk@plt+0x13a0>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8057210
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x805720c
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8057200,%eax
mov    %eax,(%esp)
call   80509e0 <__sprintf_chk@plt+0x7700>
test   %eax,%eax
je     804a6f9 <__sprintf_chk@plt+0x1419>
cmpb   $0x0,0x805720c
je     804a710 <__sprintf_chk@plt+0x1430>
call   8049180 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804a710 <__sprintf_chk@plt+0x1430>
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   80509e0 <__sprintf_chk@plt+0x7700>
test   %eax,%eax
jne    804a768 <__sprintf_chk@plt+0x1488>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x8052993,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8057210,%eax
test   %eax,%eax
je     804a775 <__sprintf_chk@plt+0x1495>
mov    %eax,(%esp)
call   804fbc0 <__sprintf_chk@plt+0x68e0>
mov    %eax,%esi
call   8049180 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x805299f,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
mov    0x8057150,%eax
mov    %eax,(%esp)
call   8048ed0 <_exit@plt>
call   8049180 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8052990,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049040 <error@plt>
jmp    804a768 <__sprintf_chk@plt+0x1488>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804a7bb <__sprintf_chk@plt+0x14db>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804a7b0 <__sprintf_chk@plt+0x14d0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804a7e9 <__sprintf_chk@plt+0x1509>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804a7e9 <__sprintf_chk@plt+0x1509>
cmp    $0x2f,%cl
je     804a7f0 <__sprintf_chk@plt+0x1510>
test   %bl,%bl
je     804a7c8 <__sprintf_chk@plt+0x14e8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804a7d2 <__sprintf_chk@plt+0x14f2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804a7c8 <__sprintf_chk@plt+0x14e8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049120 <strlen@plt>
cmp    $0x1,%eax
jbe    804a81f <__sprintf_chk@plt+0x153f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804a828 <__sprintf_chk@plt+0x1548>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804a815 <__sprintf_chk@plt+0x1535>
nop
jmp    804a81f <__sprintf_chk@plt+0x153f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
test   %ecx,%ecx
je     804a875 <__sprintf_chk@plt+0x1595>
mov    %eax,%edi
mov    %edx,%ebx
call   80492b0 <__ctype_tolower_loc@plt>
mov    %eax,%ebp
mov    %edi,0x4(%esp)
movzbl (%ebx),%eax
add    $0x1,%ebx
mov    0x0(%ebp),%edx
mov    (%edx,%eax,4),%edx
mov    %edx,(%esp)
call   8049220 <fputc@plt>
sub    $0x1,%esi
jne    804a858 <__sprintf_chk@plt+0x1578>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
test   %ecx,%ecx
je     804a8b5 <__sprintf_chk@plt+0x15d5>
mov    %eax,%edi
mov    %edx,%ebx
call   8048e80 <__ctype_toupper_loc@plt>
mov    %eax,%ebp
mov    %edi,0x4(%esp)
movzbl (%ebx),%eax
add    $0x1,%ebx
mov    0x0(%ebp),%edx
mov    (%edx,%eax,4),%edx
mov    %edx,(%esp)
call   8049220 <fputc@plt>
sub    $0x1,%esi
jne    804a898 <__sprintf_chk@plt+0x15b8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
mov    %ecx,%edi
push   %esi
push   %ebx
sub    $0x4ac,%esp
mov    0x4c0(%esp),%esi
mov    %al,0x33(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x49c(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
mov    0x8(%esi),%eax
mov    0x28(%esi),%ebx
mov    %esi,0x34(%esp)
cmp    $0xc,%eax
mov    %eax,0x24(%esp)
mov    %ebx,0x3c(%esp)
jle    804aa78 <__sprintf_chk@plt+0x1798>
subl   $0xc,0x24(%esp)
movsbl (%edi),%eax
test   %al,%al
je     804a950 <__sprintf_chk@plt+0x1670>
movl   $0x0,0x18(%esp)
cmp    $0x25,%al
je     804a978 <__sprintf_chk@plt+0x1698>
cmpl   $0xfffffffd,0x18(%esp)
ja     804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%ebx
test   %ebx,%ebx
je     804a938 <__sprintf_chk@plt+0x1658>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049220 <fputc@plt>
addl   $0x1,0x18(%esp)
mov    %edi,%ebx
movsbl 0x1(%ebx),%eax
lea    0x1(%ebx),%edi
test   %al,%al
jne    804a919 <__sprintf_chk@plt+0x1639>
mov    0x18(%esp),%eax
jmp    804a952 <__sprintf_chk@plt+0x1672>
xor    %eax,%eax
mov    0x49c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    804c22e <__sprintf_chk@plt+0x2f4e>
add    $0x4ac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x33(%esp),%eax
movl   $0x0,0x28(%esp)
mov    %al,0x20(%esp)
xor    %eax,%eax
add    $0x1,%edi
movzbl (%edi),%ecx
cmp    $0x30,%cl
je     804a9b0 <__sprintf_chk@plt+0x16d0>
jg     804a9c0 <__sprintf_chk@plt+0x16e0>
cmp    $0x23,%cl
jne    804a9d0 <__sprintf_chk@plt+0x16f0>
add    $0x1,%edi
movzbl (%edi),%ecx
mov    $0x1,%eax
cmp    $0x30,%cl
jne    804a996 <__sprintf_chk@plt+0x16b6>
lea    0x0(%esi),%esi
movsbl %cl,%ebx
mov    %ebx,0x28(%esp)
jmp    804a98b <__sprintf_chk@plt+0x16ab>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x5e,%cl
jne    804aa58 <__sprintf_chk@plt+0x1778>
movb   $0x1,0x20(%esp)
jmp    804a98b <__sprintf_chk@plt+0x16ab>
cmp    $0x2d,%cl
je     804a9b0 <__sprintf_chk@plt+0x16d0>
movsbl %cl,%edx
mov    $0xffffffff,%ebp
sub    $0x30,%edx
cmp    $0x9,%edx
ja     804aa28 <__sprintf_chk@plt+0x1748>
xor    %ebp,%ebp
jmp    804aa12 <__sprintf_chk@plt+0x1732>
lea    0x0(%esi,%eiz,1),%esi
movsbl (%edi),%edx
je     804aaa0 <__sprintf_chk@plt+0x17c0>
lea    0x0(%ebp,%ebp,4),%ecx
lea    -0x30(%edx,%ecx,2),%ebp
add    $0x1,%edi
movzbl (%edi),%ecx
movsbl %cl,%edx
sub    $0x30,%edx
cmp    $0x9,%edx
ja     804aa28 <__sprintf_chk@plt+0x1748>
cmp    $0xccccccc,%ebp
jle    804a9f0 <__sprintf_chk@plt+0x1710>
mov    $0x7fffffff,%ebp
jmp    804aa01 <__sprintf_chk@plt+0x1721>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x45,%cl
je     804aa90 <__sprintf_chk@plt+0x17b0>
cmp    $0x4f,%cl
je     804aa90 <__sprintf_chk@plt+0x17b0>
movl   $0x0,0x2c(%esp)
movsbl %cl,%ebx
cmp    $0x7a,%cl
mov    %ebx,0x38(%esp)
ja     804bb04 <__sprintf_chk@plt+0x2824>
movzbl %cl,%edx
jmp    *0x80529c8(,%edx,4)
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x5f,%cl
je     804a9b0 <__sprintf_chk@plt+0x16d0>
movsbl %cl,%edx
mov    $0xffffffff,%ebp
sub    $0x30,%edx
cmp    $0x9,%edx
ja     804aa28 <__sprintf_chk@plt+0x1748>
jmp    804a9e5 <__sprintf_chk@plt+0x1705>
xchg   %ax,%ax
mov    0x24(%esp),%esi
mov    $0xc,%eax
test   %esi,%esi
cmovne %esi,%eax
mov    %eax,0x24(%esp)
jmp    804a90a <__sprintf_chk@plt+0x162a>
nop
movsbl %cl,%ebx
add    $0x1,%edi
movzbl (%edi),%ecx
mov    %ebx,0x2c(%esp)
jmp    804aa3a <__sprintf_chk@plt+0x175a>
nop
cmp    $0x37,%dl
jle    804a9f9 <__sprintf_chk@plt+0x1719>
mov    $0x7fffffff,%ebp
jmp    804aa01 <__sprintf_chk@plt+0x1721>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x4f,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
movb   $0x0,0x40(%esp)
mov    0x2c(%esp),%ebx
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
test   %ebx,%ebx
jne    804c233 <__sprintf_chk@plt+0x2f53>
mov    %edi,%ebx
movl   $0x0,0x50(%esp)
lea    0x99(%esp),%eax
mov    %cl,(%eax)
movb   $0x0,0x1(%eax)
mov    0x34(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x97(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x9c(%esp),%eax
mov    %eax,(%esp)
call   80490d0 <strftime@plt>
test   %eax,%eax
je     804a93f <__sprintf_chk@plt+0x165f>
mov    0x18(%esp),%edx
lea    -0x1(%eax),%esi
xor    %eax,%eax
test   %ebp,%ebp
mov    %esi,%edi
cmovns %ebp,%eax
cmp    %esi,%eax
cmovae %eax,%edi
not    %edx
cmp    %edx,%edi
mov    %edi,0x2c(%esp)
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804ab8c <__sprintf_chk@plt+0x18ac>
cmp    %eax,%esi
jae    804ab64 <__sprintf_chk@plt+0x1884>
mov    0x50(%esp),%eax
test   %eax,%eax
je     804ab99 <__sprintf_chk@plt+0x18b9>
cmpb   $0x0,0x40(%esp)
jne    804bb3f <__sprintf_chk@plt+0x285f>
cmpb   $0x0,0x20(%esp)
je     804acaa <__sprintf_chk@plt+0x19ca>
mov    0x1c(%esp),%eax
mov    %esi,%ecx
lea    0x9d(%esp),%edx
call   804a880 <__sprintf_chk@plt+0x15a0>
mov    0x2c(%esp),%eax
add    %eax,0x18(%esp)
jmp    804a93f <__sprintf_chk@plt+0x165f>
mov    %ebp,%edi
sub    %esi,%edi
cmpl   $0x30,0x28(%esp)
je     804bad0 <__sprintf_chk@plt+0x27f0>
xor    %ebp,%ebp
test   %edi,%edi
je     804ab64 <__sprintf_chk@plt+0x1884>
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804abb8 <__sprintf_chk@plt+0x18d8>
mov    0x28(%esp),%ebx
jmp    804ab64 <__sprintf_chk@plt+0x1884>
mov    %ebx,%edi
nop
lea    -0x1(%edi),%eax
mov    $0x1,%edx
mov    %eax,%esi
add    $0x1,%edx
lea    -0x1(%eax),%eax
cmpb   $0x25,0x1(%eax)
jne    804abe0 <__sprintf_chk@plt+0x1900>
mov    %edx,0x2c(%esp)
mov    %edi,%ebx
mov    0x2c(%esp),%ecx
xor    %eax,%eax
test   %ebp,%ebp
mov    0x18(%esp),%edx
cmovns %ebp,%eax
cmp    %eax,%ecx
mov    %ecx,%edi
cmovb  %eax,%edi
not    %edx
cmp    %edx,%edi
mov    %edi,0x38(%esp)
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804ac79 <__sprintf_chk@plt+0x1999>
cmp    %ecx,%eax
jbe    804ac63 <__sprintf_chk@plt+0x1983>
mov    %ebp,%edi
sub    0x2c(%esp),%edi
cmpl   $0x30,0x28(%esp)
je     804bb56 <__sprintf_chk@plt+0x2876>
xor    %ebp,%ebp
test   %edi,%edi
je     804ac63 <__sprintf_chk@plt+0x1983>
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
lea    0x0(%esi),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804ac48 <__sprintf_chk@plt+0x1968>
mov    0x28(%esp),%ebx
cmpb   $0x0,0x20(%esp)
je     804ac88 <__sprintf_chk@plt+0x19a8>
mov    0x2c(%esp),%ecx
mov    %esi,%edx
mov    0x1c(%esp),%eax
call   804a880 <__sprintf_chk@plt+0x15a0>
mov    0x38(%esp),%eax
add    %eax,0x18(%esp)
jmp    804a93f <__sprintf_chk@plt+0x165f>
xchg   %ax,%ax
mov    0x1c(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048fe0 <fwrite@plt>
jmp    804ac79 <__sprintf_chk@plt+0x1999>
mov    0x1c(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x9d(%esp),%eax
mov    %eax,(%esp)
call   8048fe0 <fwrite@plt>
jmp    804ab8c <__sprintf_chk@plt+0x18ac>
mov    0x2c(%esp),%edx
test   %edx,%edx
jne    804abd8 <__sprintf_chk@plt+0x18f8>
movzbl 0x20(%esp),%ebx
test   %al,%al
mov    $0x1,%eax
cmovne %eax,%ebx
mov    %bl,0x20(%esp)
movb   $0x20,0x97(%esp)
mov    %edi,%ebx
movb   $0x25,0x98(%esp)
lea    0x99(%esp),%eax
movb   $0x0,0x40(%esp)
movl   $0x0,0x50(%esp)
jmp    804aaf5 <__sprintf_chk@plt+0x1815>
mov    0x2c(%esp),%eax
cmp    $0x45,%eax
je     804be15 <__sprintf_chk@plt+0x2b35>
cmp    $0x4f,%eax
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movl   $0x4,0x50(%esp)
mov    0x14(%eax),%esi
cmp    $0xfffff894,%esi
setl   0x40(%esp)
add    $0x76c,%esi
xor    %ebx,%ebx
movb   $0x0,0x54(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
neg    %eax
cmpb   $0x0,0x40(%esp)
lea    0xaa(%esp),%ecx
mov    %ebp,0x38(%esp)
cmovne %eax,%esi
nop
test   $0x1,%bl
je     804ad84 <__sprintf_chk@plt+0x1aa4>
movb   $0x3a,-0x1(%ecx)
sub    $0x1,%ecx
mov    $0xcccccccd,%eax
mul    %esi
lea    -0x1(%ecx),%ebp
shr    $0x3,%edx
lea    (%edx,%edx,4),%eax
add    %eax,%eax
sub    %eax,%esi
lea    0x30(%esi),%eax
mov    %edx,%esi
sar    %ebx
mov    %al,-0x1(%ecx)
je     804ada8 <__sprintf_chk@plt+0x1ac8>
mov    %ebp,%ecx
jmp    804ad78 <__sprintf_chk@plt+0x1a98>
test   %edx,%edx
jne    804ada4 <__sprintf_chk@plt+0x1ac4>
mov    0x50(%esp),%eax
mov    %ebp,0x2c(%esp)
mov    0x38(%esp),%ebp
cmp    %eax,%ebp
cmovge %ebp,%eax
cmpb   $0x0,0x40(%esp)
mov    %eax,0x38(%esp)
jne    804b8d8 <__sprintf_chk@plt+0x25f8>
cmpb   $0x0,0x54(%esp)
jne    804bb35 <__sprintf_chk@plt+0x2855>
cmpl   $0x2d,0x28(%esp)
je     804bdfd <__sprintf_chk@plt+0x2b1d>
mov    0x2c(%esp),%esi
lea    0xaa(%esp),%eax
sub    %eax,%esi
add    0x38(%esp),%esi
test   %esi,%esi
jle    804bdfd <__sprintf_chk@plt+0x2b1d>
mov    %edi,%ebx
movb   $0x0,0x50(%esp)
movb   $0x0,0x40(%esp)
cmpl   $0x5f,0x28(%esp)
je     804bb8c <__sprintf_chk@plt+0x28ac>
mov    0x18(%esp),%edx
not    %edx
cmp    %edx,0x38(%esp)
jae    804a950 <__sprintf_chk@plt+0x1670>
cmpb   $0x0,0x50(%esp)
je     804aec2 <__sprintf_chk@plt+0x1be2>
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
mov    $0x1,%edi
test   %eax,%eax
cmovne %eax,%edi
cmp    %edi,%edx
jbe    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804aebe <__sprintf_chk@plt+0x1bde>
cmp    $0x1,%eax
jbe    804aea9 <__sprintf_chk@plt+0x1bc9>
mov    0x38(%esp),%eax
test   %eax,%eax
jne    804aea9 <__sprintf_chk@plt+0x1bc9>
cmpl   $0x30,0x28(%esp)
lea    -0x1(%ebp),%eax
je     804c045 <__sprintf_chk@plt+0x2d65>
xor    %ebp,%ebp
test   %eax,%eax
je     804aea9 <__sprintf_chk@plt+0x1bc9>
mov    %esi,0x54(%esp)
mov    0x1c(%esp),%esi
mov    %ebx,0x50(%esp)
mov    %eax,%ebx
mov    %ebp,%eax
mov    %edi,%ebp
mov    %eax,%edi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804ae88 <__sprintf_chk@plt+0x1ba8>
mov    0x50(%esp),%ebx
mov    %ebp,%edi
mov    0x54(%esp),%esi
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
movsbl 0x40(%esp),%eax
mov    %eax,(%esp)
call   8049220 <fputc@plt>
add    %edi,0x18(%esp)
mov    0x1c(%esp),%eax
xor    %edi,%edi
mov    0x1c(%esp),%ebp
test   %eax,%eax
je     804be29 <__sprintf_chk@plt+0x2b49>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %esi,%edi
jne    804aed8 <__sprintf_chk@plt+0x1bf8>
add    %edi,0x18(%esp)
xor    %edx,%edx
xor    %ebp,%ebp
lea    0xaa(%esp),%esi
mov    %edx,%eax
sub    0x2c(%esp),%esi
cmp    %edx,%esi
cmovae %esi,%eax
mov    %eax,%edi
mov    %eax,0x40(%esp)
mov    0x18(%esp),%eax
not    %eax
cmp    %eax,%edi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804af85 <__sprintf_chk@plt+0x1ca5>
cmp    %edx,%esi
jae    804af6b <__sprintf_chk@plt+0x1c8b>
mov    0x38(%esp),%edi
test   %edi,%edi
jne    804af6b <__sprintf_chk@plt+0x1c8b>
mov    %ebp,%edi
sub    %esi,%edi
cmpl   $0x30,0x28(%esp)
je     804bd1d <__sprintf_chk@plt+0x2a3d>
xor    %ebp,%ebp
test   %edi,%edi
je     804af6b <__sprintf_chk@plt+0x1c8b>
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804af50 <__sprintf_chk@plt+0x1c70>
mov    0x28(%esp),%ebx
cmpb   $0x0,0x20(%esp)
je     804bb10 <__sprintf_chk@plt+0x2830>
mov    0x2c(%esp),%edx
mov    %esi,%ecx
mov    0x1c(%esp),%eax
call   804a880 <__sprintf_chk@plt+0x15a0>
mov    0x40(%esp),%eax
add    %eax,0x18(%esp)
jmp    804a93f <__sprintf_chk@plt+0x165f>
cmp    $0x1,%al
sbb    %esi,%esi
mov    %esi,0x2c(%esp)
movzbl 0x20(%esp),%esi
addb   $0x1,0x2c(%esp)
test   %al,%al
mov    $0x0,%eax
cmovne %eax,%esi
mov    %esi,%eax
mov    %al,0x20(%esp)
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804c152 <__sprintf_chk@plt+0x2e72>
mov    %eax,(%esp)
call   8049120 <strlen@plt>
mov    %eax,%esi
mov    0x18(%esp),%edx
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
cmp    %eax,%esi
mov    %eax,%ebx
cmovae %esi,%ebx
not    %edx
cmp    %edx,%ebx
mov    %ebx,0x38(%esp)
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%ebx
test   %ebx,%ebx
je     804b062 <__sprintf_chk@plt+0x1d82>
cmp    %esi,%eax
jbe    804b03d <__sprintf_chk@plt+0x1d5d>
mov    %ebp,%ebx
sub    %esi,%ebx
cmpl   $0x30,0x28(%esp)
je     804c17e <__sprintf_chk@plt+0x2e9e>
xor    %ebp,%ebp
test   %ebx,%ebx
je     804b03d <__sprintf_chk@plt+0x1d5d>
mov    %esi,0x28(%esp)
mov    0x1c(%esp),%esi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804b020 <__sprintf_chk@plt+0x1d40>
mov    0x28(%esp),%esi
mov    %ebp,%edi
cmpb   $0x0,0x2c(%esp)
jne    804bee5 <__sprintf_chk@plt+0x2c05>
cmpb   $0x0,0x20(%esp)
je     804be71 <__sprintf_chk@plt+0x2b91>
mov    0x3c(%esp),%edx
mov    %esi,%ecx
mov    0x1c(%esp),%eax
call   804a880 <__sprintf_chk@plt+0x15a0>
mov    0x38(%esp),%eax
mov    %edi,%ebx
add    %eax,0x18(%esp)
jmp    804a93f <__sprintf_chk@plt+0x165f>
cmpl   $0x45,0x2c(%esp)
je     804be15 <__sprintf_chk@plt+0x2b35>
mov    0x34(%esp),%eax
mov    $0x51eb851f,%esi
movl   $0x2,0x50(%esp)
mov    0x14(%eax),%ecx
mov    %ecx,%eax
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %edx,%esi
sar    $0x5,%esi
sub    %eax,%esi
mov    %ecx,%eax
imul   $0x64,%esi,%esi
sub    %esi,%eax
mov    %eax,%esi
js     804c0b1 <__sprintf_chk@plt+0x2dd1>
nop
mov    %esi,%eax
xor    %ebx,%ebx
shr    $0x1f,%eax
mov    %eax,0x40(%esp)
movb   $0x0,0x54(%esp)
cmpb   $0x0,0x40(%esp)
jne    804ad60 <__sprintf_chk@plt+0x1a80>
cmpl   $0x4f,0x2c(%esp)
jne    804ad60 <__sprintf_chk@plt+0x1a80>
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
movb   $0x0,0x40(%esp)
movzbl 0x2c(%esp),%eax
mov    %edi,%ebx
movzbl 0x38(%esp),%ecx
mov    %al,0x99(%esp)
lea    0x9a(%esp),%eax
jmp    804aaf5 <__sprintf_chk@plt+0x1815>
movzbl 0x20(%esp),%esi
test   %al,%al
mov    $0x1,%eax
mov    0x2c(%esp),%ebx
cmovne %eax,%esi
mov    %esi,%eax
test   %ebx,%ebx
mov    %al,0x20(%esp)
jne    804abd8 <__sprintf_chk@plt+0x18f8>
jmp    804acf1 <__sprintf_chk@plt+0x1a11>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x24(%esp),%esi
movl   $0x2,0x50(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
mov    0x2c(%esp),%eax
cmp    $0x4f,%eax
je     804abd8 <__sprintf_chk@plt+0x18f8>
cmp    $0x45,%eax
je     804bf73 <__sprintf_chk@plt+0x2c93>
mov    0x34(%esp),%eax
mov    $0x51eb851f,%edx
mov    0x14(%eax),%ecx
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
xor    %eax,%eax
lea    0x13(%edx),%esi
imul   $0x64,%edx,%edx
cmp    %edx,%ecx
js     804c161 <__sprintf_chk@plt+0x2e81>
cmp    $0xfffff894,%ecx
setl   0x40(%esp)
sub    %eax,%esi
movl   $0x2,0x50(%esp)
jmp    804ad52 <__sprintf_chk@plt+0x1a72>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    804abd8 <__sprintf_chk@plt+0x18f8>
movl   $0x80529a6,0x2c(%esp)
lea    0x0(%esi),%esi
mov    0x4c8(%esp),%ebx
xor    %edx,%edx
movzbl 0x20(%esp),%eax
mov    0x2c(%esp),%ecx
mov    %ebx,0x8(%esp)
mov    0x4c4(%esp),%ebx
mov    %eax,0x20(%esp)
mov    %ebx,0x4(%esp)
mov    0x34(%esp),%ebx
mov    %ebx,(%esp)
call   804a8c0 <__sprintf_chk@plt+0x15e0>
mov    0x18(%esp),%ecx
xor    %edx,%edx
test   %ebp,%ebp
cmovns %ebp,%edx
mov    %edx,%ebx
not    %ecx
cmp    %edx,%eax
cmovae %eax,%ebx
cmp    %ecx,%ebx
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%esi
test   %esi,%esi
je     804b281 <__sprintf_chk@plt+0x1fa1>
cmp    %edx,%eax
jae    804b253 <__sprintf_chk@plt+0x1f73>
mov    %ebp,%esi
sub    %eax,%esi
cmpl   $0x30,0x28(%esp)
je     804be30 <__sprintf_chk@plt+0x2b50>
xor    %ebp,%ebp
test   %esi,%esi
je     804b253 <__sprintf_chk@plt+0x1f73>
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %esi,%ebx
jne    804b238 <__sprintf_chk@plt+0x1f58>
mov    0x28(%esp),%ebx
mov    0x4c8(%esp),%eax
mov    0x2c(%esp),%ecx
mov    0x1c(%esp),%edx
mov    %eax,0x8(%esp)
mov    0x4c4(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
mov    0x20(%esp),%eax
call   804a8c0 <__sprintf_chk@plt+0x15e0>
add    %ebx,0x18(%esp)
mov    %edi,%ebx
jmp    804a93f <__sprintf_chk@plt+0x165f>
mov    0x34(%esp),%eax
mov    $0x92492493,%edx
movl   $0x1,0x50(%esp)
mov    0x18(%eax),%eax
lea    0x6(%eax),%esi
mov    %eax,0x40(%esp)
mov    %esi,%eax
imul   %edx
lea    (%edx,%esi,1),%eax
mov    %esi,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
sub    %edx,%esi
add    $0x1,%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movl   $0x1,0x50(%esp)
mov    0x18(%eax),%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
mov    0x8(%eax),%esi
cmpl   $0x2d,0x28(%esp)
je     804b39c <__sprintf_chk@plt+0x20bc>
cmpl   $0x30,0x28(%esp)
je     804b39c <__sprintf_chk@plt+0x20bc>
movl   $0x2,0x50(%esp)
movl   $0x5f,0x28(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x24(%esp),%esi
jmp    804b2fc <__sprintf_chk@plt+0x201c>
movl   $0x80529b8,0x2c(%esp)
jmp    804b1c0 <__sprintf_chk@plt+0x1ee0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movl   $0x2,0x50(%esp)
mov    (%eax),%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
movl   $0x80529be,0x2c(%esp)
jmp    804b1c0 <__sprintf_chk@plt+0x1ee0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
mov    $0x92492493,%edx
mov    0x1c(%eax),%ecx
sub    0x18(%eax),%ecx
add    $0x7,%ecx
mov    %ecx,%eax
imul   %edx
lea    (%edx,%ecx,1),%esi
sar    $0x2,%esi
sar    $0x1f,%ecx
sub    %ecx,%esi
movl   $0x2,0x50(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%esi
mov    $0x92492493,%ebx
mov    0x18(%esi),%eax
lea    0x6(%eax),%ecx
mov    %eax,0x40(%esp)
mov    %ecx,%eax
imul   %ebx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    0x1c(%esi),%eax
sub    %ecx,%edx
lea    0x7(%edx,%eax,1),%ecx
mov    %ecx,%eax
imul   %ebx
jmp    804b391 <__sprintf_chk@plt+0x20b1>
mov    0x2c(%esp),%ebx
test   %ebx,%ebx
jne    804abd8 <__sprintf_chk@plt+0x18f8>
movl   $0x80529af,0x2c(%esp)
jmp    804b1c0 <__sprintf_chk@plt+0x1ee0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%ebx
mov    0x14(%ebx),%eax
mov    %eax,%esi
mov    %eax,0x54(%esp)
sar    $0x1f,%eax
and    $0x190,%eax
lea    -0x64(%eax,%esi,1),%eax
mov    0x18(%ebx),%esi
mov    %eax,0x40(%esp)
mov    %esi,%edx
mov    %esi,0x50(%esp)
mov    0x1c(%ebx),%esi
mov    %esi,%ebx
sub    %edx,%ebx
mov    $0x92492493,%edx
add    $0x17e,%ebx
mov    %ebx,%eax
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    %esi,%eax
sub    %ebx,%eax
lea    0x3(%eax,%edx,1),%eax
test   %eax,%eax
mov    %eax,0x58(%esp)
js     804bfae <__sprintf_chk@plt+0x2cce>
testb  $0x3,0x40(%esp)
mov    $0xfffffe93,%eax
jne    804b4ce <__sprintf_chk@plt+0x21ee>
mov    0x40(%esp),%eax
mov    $0x51eb851f,%ebx
imul   %ebx
mov    0x40(%esp),%eax
mov    %edx,%ebx
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
imul   $0x64,%edx,%edx
cmp    %edx,0x40(%esp)
mov    %eax,0x5c(%esp)
mov    $0xfffffe92,%eax
jne    804b4ce <__sprintf_chk@plt+0x21ee>
sar    $0x7,%ebx
mov    0x40(%esp),%eax
sub    0x5c(%esp),%ebx
imul   $0x190,%ebx,%ebx
sub    %ebx,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
sub    $0x16d,%eax
add    %eax,%esi
mov    $0x92492493,%edx
mov    %esi,%ebx
sub    0x50(%esp),%ebx
movl   $0x1,0x40(%esp)
add    $0x17e,%ebx
mov    %ebx,%eax
sub    %ebx,%esi
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
lea    0x3(%esi,%edx,1),%ebx
test   %ebx,%ebx
js     804c16d <__sprintf_chk@plt+0x2e8d>
cmp    $0x47,%cl
je     804bf1c <__sprintf_chk@plt+0x2c3c>
cmp    $0x67,%cl
jne    804bf4f <__sprintf_chk@plt+0x2c6f>
mov    0x54(%esp),%eax
mov    $0x51eb851f,%esi
mov    0x54(%esp),%ebx
mov    0x40(%esp),%ecx
movl   $0x2,0x50(%esp)
imul   %esi
mov    %ebx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
mov    %ebx,%eax
imul   $0x64,%edx,%edx
sub    %edx,%eax
add    %eax,%ecx
mov    %ecx,%eax
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %edx,%esi
sar    $0x5,%esi
sub    %eax,%esi
imul   $0x64,%esi,%esi
sub    %esi,%ecx
mov    %ecx,%esi
jns    804b0b0 <__sprintf_chk@plt+0x1dd0>
mov    $0xfffff894,%eax
mov    %ecx,%edx
sub    0x40(%esp),%eax
neg    %edx
add    $0x64,%esi
cmp    %eax,%ebx
cmovl  %edx,%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
mov    0x8(%eax),%esi
jmp    804b39c <__sprintf_chk@plt+0x20bc>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movb   $0x0,0x54(%esp)
movl   $0x3,0x50(%esp)
mov    0x1c(%eax),%esi
cmp    $0xffffffff,%esi
setl   0x40(%esp)
add    $0x1,%esi
xor    %ebx,%ebx
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movl   $0x2,0x50(%esp)
mov    0x4(%eax),%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
cmp    $0xffffffff,%ebp
je     804bf95 <__sprintf_chk@plt+0x2cb5>
cmp    $0x8,%ebp
jg     804c21e <__sprintf_chk@plt+0x2f3e>
mov    0x4c8(%esp),%esi
mov    %ebp,%ecx
mov    $0x66666667,%ebx
lea    0x0(%esi),%esi
mov    %esi,%eax
add    $0x1,%ecx
imul   %ebx
sar    $0x1f,%esi
sar    $0x2,%edx
sub    %esi,%edx
cmp    $0x9,%ecx
mov    %edx,%esi
jne    804b620 <__sprintf_chk@plt+0x2340>
mov    %ebp,0x50(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
mov    $0x70,%ecx
movl   $0x70,0x38(%esp)
movb   $0x1,0x40(%esp)
movzbl 0x40(%esp),%esi
test   %al,%al
mov    $0x1,%eax
movzbl 0x20(%esp),%ebx
mov    $0x0,%edx
cmovne %eax,%esi
cmovne %edx,%ebx
mov    %esi,%eax
mov    %bl,0x20(%esp)
mov    %al,0x40(%esp)
jmp    804aac8 <__sprintf_chk@plt+0x17e8>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movl   $0x2,0x50(%esp)
mov    0xc(%eax),%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
mov    0xc(%eax),%esi
jmp    804b2fc <__sprintf_chk@plt+0x201c>
movl   $0x0,0x40(%esp)
mov    0x34(%esp),%eax
mov    0x20(%eax),%ecx
test   %ecx,%ecx
js     804be6a <__sprintf_chk@plt+0x2b8a>
mov    0x24(%eax),%ebx
mov    $0x91a2b3c5,%edx
mov    %ebx,%eax
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,0x50(%esp)
lea    (%edx,%ebx,1),%esi
sar    $0xb,%esi
sub    %eax,%esi
mov    $0x88888889,%eax
imul   %ebx
mov    $0x88888889,%eax
lea    (%edx,%ebx,1),%ecx
sar    $0x5,%ecx
sub    0x50(%esp),%ecx
imul   %ecx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x5,%eax
sub    %edx,%eax
mov    %ecx,%edx
imul   $0x3c,%eax,%eax
imul   $0x3c,%ecx,%ecx
sub    %eax,%edx
mov    %edx,%eax
mov    %ebx,%edx
sub    %ecx,%edx
mov    %edx,%ecx
mov    0x40(%esp),%edx
cmp    $0x1,%edx
je     804bef9 <__sprintf_chk@plt+0x2c19>
jb     804c0c4 <__sprintf_chk@plt+0x2de4>
cmp    $0x2,%edx
je     804be96 <__sprintf_chk@plt+0x2bb6>
cmp    $0x3,%edx
lea    0x0(%esi,%eiz,1),%esi
je     804c07f <__sprintf_chk@plt+0x2d9f>
movzbl (%edi),%ecx
mov    %edi,%ebx
cmp    $0x25,%cl
jne    804abd5 <__sprintf_chk@plt+0x18f5>
mov    %ebx,%esi
movl   $0x1,0x2c(%esp)
jmp    804abf4 <__sprintf_chk@plt+0x1914>
mov    0x18(%esp),%edx
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
mov    $0x1,%esi
test   %eax,%eax
cmovne %eax,%esi
not    %edx
cmp    %edx,%esi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
je     804b7e9 <__sprintf_chk@plt+0x2509>
cmp    $0x1,%eax
jbe    804b7d5 <__sprintf_chk@plt+0x24f5>
cmpl   $0x30,0x28(%esp)
lea    -0x1(%ebp),%ebx
je     804c0e4 <__sprintf_chk@plt+0x2e04>
xor    %ebp,%ebp
test   %ebx,%ebx
je     804b7d5 <__sprintf_chk@plt+0x24f5>
mov    %esi,0x20(%esp)
mov    0x1c(%esp),%esi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804b7b8 <__sprintf_chk@plt+0x24d8>
mov    0x20(%esp),%esi
mov    %ebp,%edi
mov    0x1c(%esp),%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <fputc@plt>
add    %esi,0x18(%esp)
mov    %edi,%ebx
jmp    804a93f <__sprintf_chk@plt+0x165f>
mov    0x34(%esp),%esi
mov    (%esi),%eax
mov    %eax,0x68(%esp)
mov    0x4(%esi),%eax
mov    %eax,0x6c(%esp)
mov    0x8(%esi),%eax
mov    %eax,0x70(%esp)
mov    0xc(%esi),%eax
mov    %eax,0x74(%esp)
mov    0x10(%esi),%eax
mov    %eax,0x78(%esp)
mov    0x14(%esi),%eax
mov    %eax,0x7c(%esp)
mov    0x18(%esi),%eax
mov    %eax,0x80(%esp)
mov    0x1c(%esi),%eax
mov    %eax,0x84(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x88(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x8c(%esp)
mov    0x28(%esi),%eax
mov    $0x66666667,%esi
mov    %eax,0x90(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <mktime@plt>
mov    %ebp,0x38(%esp)
mov    %eax,%ecx
shr    $0x1f,%eax
mov    %eax,0x40(%esp)
mov    %eax,%ebx
lea    0xaa(%esp),%eax
mov    %eax,%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,%eax
sub    $0x1,%ebp
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x2,%edx
sub    %eax,%edx
lea    (%edx,%edx,4),%eax
add    %eax,%eax
sub    %eax,%ecx
mov    %ecx,%eax
mov    %edx,%ecx
mov    $0x30,%edx
sub    %eax,%edx
add    $0x30,%eax
test   %bl,%bl
cmove  %eax,%edx
test   %ecx,%ecx
mov    %dl,0x0(%ebp)
jne    804b880 <__sprintf_chk@plt+0x25a0>
mov    %ebp,0x2c(%esp)
mov    0x38(%esp),%ebp
mov    $0x1,%eax
test   %ebp,%ebp
cmovg  %ebp,%eax
cmpb   $0x0,0x40(%esp)
mov    %eax,0x38(%esp)
je     804add7 <__sprintf_chk@plt+0x1af7>
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x2d,0x40(%esp)
cmpl   $0x2d,0x28(%esp)
je     804bc77 <__sprintf_chk@plt+0x2997>
mov    0x2c(%esp),%eax
lea    0xaa(%esp),%esi
sub    %esi,%eax
mov    0x38(%esp),%esi
lea    -0x1(%esi,%eax,1),%esi
test   %esi,%esi
jle    804bd54 <__sprintf_chk@plt+0x2a74>
mov    %edi,%ebx
movb   $0x1,0x50(%esp)
jmp    804ae07 <__sprintf_chk@plt+0x1b27>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x45,0x2c(%esp)
je     804abd8 <__sprintf_chk@plt+0x18f8>
mov    0x34(%esp),%eax
movb   $0x0,0x54(%esp)
movl   $0x2,0x50(%esp)
mov    0x10(%eax),%esi
cmp    $0xffffffff,%esi
setl   0x40(%esp)
add    $0x1,%esi
xor    %ebx,%ebx
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
lea    -0x1(%edi),%ebx
movzbl -0x1(%edi),%ecx
jmp    804b74b <__sprintf_chk@plt+0x246b>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
jne    804be22 <__sprintf_chk@plt+0x2b42>
mov    0x2c(%esp),%eax
test   %ebp,%ebp
mov    $0x1,%esi
mov    0x18(%esp),%edx
cmovns %ebp,%eax
test   %eax,%eax
not    %edx
cmovne %eax,%esi
cmp    %edx,%esi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804b7e9 <__sprintf_chk@plt+0x2509>
cmp    $0x1,%eax
mov    0x38(%esp),%edx
jbe    804b9da <__sprintf_chk@plt+0x26fa>
cmpl   $0x30,0x28(%esp)
lea    -0x1(%ebp),%ebx
je     804c1b2 <__sprintf_chk@plt+0x2ed2>
xor    %ebp,%ebp
test   %ebx,%ebx
je     804b9da <__sprintf_chk@plt+0x26fa>
mov    %esi,0x20(%esp)
mov    0x1c(%esp),%esi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804b9b9 <__sprintf_chk@plt+0x26d9>
mov    0x20(%esp),%esi
mov    %ebp,%edi
movsbl 0x0(%ebp),%edx
mov    0x1c(%esp),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <fputc@plt>
jmp    804b7e9 <__sprintf_chk@plt+0x2509>
movzbl 0x1(%edi),%eax
cmp    $0x3a,%al
je     804bec2 <__sprintf_chk@plt+0x2be2>
lea    0x1(%edi),%edx
movl   $0x1,0x40(%esp)
cmp    $0x7a,%al
jne    804abd8 <__sprintf_chk@plt+0x18f8>
mov    %edx,%edi
jmp    804b6ba <__sprintf_chk@plt+0x23da>
mov    0x2c(%esp),%esi
test   %esi,%esi
jne    804abd8 <__sprintf_chk@plt+0x18f8>
movzbl 0x20(%esp),%esi
test   %al,%al
mov    $0x1,%eax
cmovne %eax,%esi
mov    %esi,%eax
mov    %al,0x20(%esp)
jmp    804acf1 <__sprintf_chk@plt+0x1a11>
mov    0x18(%esp),%edx
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
mov    $0x1,%esi
test   %eax,%eax
cmovne %eax,%esi
not    %edx
cmp    %edx,%esi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804b7e9 <__sprintf_chk@plt+0x2509>
cmp    $0x1,%eax
jbe    804baad <__sprintf_chk@plt+0x27cd>
cmpl   $0x30,0x28(%esp)
lea    -0x1(%ebp),%ebx
je     804c118 <__sprintf_chk@plt+0x2e38>
xor    %ebp,%ebp
test   %ebx,%ebx
je     804baad <__sprintf_chk@plt+0x27cd>
mov    %esi,0x20(%esp)
mov    0x1c(%esp),%esi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
lea    0x0(%esi),%esi
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804ba90 <__sprintf_chk@plt+0x27b0>
mov    0x20(%esp),%esi
mov    %ebp,%edi
mov    0x1c(%esp),%eax
movl   $0x9,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <fputc@plt>
jmp    804b7e9 <__sprintf_chk@plt+0x2509>
movb   $0x0,0x40(%esp)
jmp    804b651 <__sprintf_chk@plt+0x2371>
test   %edi,%edi
je     804ab64 <__sprintf_chk@plt+0x1884>
xor    %ebp,%ebp
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804bae8 <__sprintf_chk@plt+0x2808>
jmp    804abcf <__sprintf_chk@plt+0x18ef>
mov    %edi,%ebx
jmp    804b74b <__sprintf_chk@plt+0x246b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048fe0 <fwrite@plt>
jmp    804af85 <__sprintf_chk@plt+0x1ca5>
movb   $0x2b,0x40(%esp)
jmp    804b8dd <__sprintf_chk@plt+0x25fd>
mov    0x1c(%esp),%eax
mov    %esi,%ecx
lea    0x9d(%esp),%edx
call   804a840 <__sprintf_chk@plt+0x1560>
jmp    804ab8c <__sprintf_chk@plt+0x18ac>
test   %edi,%edi
je     804ac63 <__sprintf_chk@plt+0x1983>
xor    %ebp,%ebp
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
lea    0x0(%esi),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804bb70 <__sprintf_chk@plt+0x2890>
jmp    804ac5f <__sprintf_chk@plt+0x197f>
mov    0x18(%esp),%eax
not    %eax
cmp    %eax,%esi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%eax
xor    %edi,%edi
test   %eax,%eax
je     804bbcb <__sprintf_chk@plt+0x28eb>
mov    %ebx,0x54(%esp)
mov    %edi,%ebx
mov    0x1c(%esp),%edi
xchg   %ax,%ax
mov    %edi,0x4(%esp)
add    $0x1,%ebx
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%esi
jne    804bbb0 <__sprintf_chk@plt+0x28d0>
mov    0x54(%esp),%ebx
add    %esi,0x18(%esp)
xor    %edx,%edx
cmp    %ebp,%esi
jl     804be0b <__sprintf_chk@plt+0x2b2b>
xor    %ebp,%ebp
cmpb   $0x0,0x50(%esp)
je     804aef7 <__sprintf_chk@plt+0x1c17>
mov    0x18(%esp),%eax
test   %edx,%edx
mov    $0x1,%edi
cmovne %edx,%edi
not    %eax
cmp    %eax,%edi
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%esi
test   %esi,%esi
je     804bc6e <__sprintf_chk@plt+0x298e>
cmp    $0x1,%edx
jbe    804bc51 <__sprintf_chk@plt+0x2971>
mov    0x38(%esp),%ecx
test   %ecx,%ecx
jne    804bc51 <__sprintf_chk@plt+0x2971>
mov    %ebp,%eax
sub    $0x1,%eax
je     804bc51 <__sprintf_chk@plt+0x2971>
mov    %ebx,0x50(%esp)
mov    0x1c(%esp),%ebx
xor    %esi,%esi
mov    %edi,0x54(%esp)
mov    %eax,%edi
mov    %edx,0x58(%esp)
mov    %ebx,0x4(%esp)
add    $0x1,%esi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%esi
jne    804bc2e <__sprintf_chk@plt+0x294e>
mov    0x50(%esp),%ebx
mov    0x54(%esp),%edi
mov    0x58(%esp),%edx
mov    0x1c(%esp),%eax
mov    %edx,0x50(%esp)
mov    %eax,0x4(%esp)
movsbl 0x40(%esp),%eax
mov    %eax,(%esp)
call   8049220 <fputc@plt>
mov    0x50(%esp),%edx
add    %edi,0x18(%esp)
jmp    804aef7 <__sprintf_chk@plt+0x1c17>
xor    %esi,%esi
test   %ebp,%ebp
cmovns %ebp,%esi
mov    $0x1,%eax
test   %esi,%esi
cmovne %esi,%eax
mov    %eax,%ebx
mov    %eax,0x28(%esp)
mov    0x18(%esp),%eax
not    %eax
cmp    %eax,%ebx
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804bd04 <__sprintf_chk@plt+0x2a24>
cmp    $0x1,%esi
jbe    804bcef <__sprintf_chk@plt+0x2a0f>
mov    0x38(%esp),%eax
test   %eax,%eax
jne    804bcef <__sprintf_chk@plt+0x2a0f>
mov    %ebp,%eax
sub    $0x1,%eax
je     804bcef <__sprintf_chk@plt+0x2a0f>
mov    %ebp,0x50(%esp)
mov    0x1c(%esp),%ebp
xor    %ebx,%ebx
mov    %esi,0x54(%esp)
mov    %ebx,%esi
mov    %eax,%ebx
lea    0x0(%esi),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%esi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%esi
jne    804bcd0 <__sprintf_chk@plt+0x29f0>
mov    0x50(%esp),%ebp
mov    0x54(%esp),%esi
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
movsbl 0x40(%esp),%eax
mov    %eax,(%esp)
call   8049220 <fputc@plt>
mov    0x28(%esp),%eax
mov    %esi,%edx
mov    %edi,%ebx
add    %eax,0x18(%esp)
movl   $0x2d,0x28(%esp)
jmp    804aef7 <__sprintf_chk@plt+0x1c17>
test   %edi,%edi
je     804af6b <__sprintf_chk@plt+0x1c8b>
xor    %ebp,%ebp
mov    %ebx,0x28(%esp)
mov    %ebp,%ebx
mov    0x1c(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %edi,%ebx
jne    804bd38 <__sprintf_chk@plt+0x2a58>
jmp    804af67 <__sprintf_chk@plt+0x1c87>
xor    %esi,%esi
test   %ebp,%ebp
cmovns %ebp,%esi
mov    $0x1,%eax
test   %esi,%esi
cmovne %esi,%eax
mov    %eax,%ebx
mov    %eax,0x54(%esp)
mov    0x18(%esp),%eax
not    %eax
cmp    %eax,%ebx
jae    804a950 <__sprintf_chk@plt+0x1670>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804bdec <__sprintf_chk@plt+0x2b0c>
cmp    $0x1,%esi
jbe    804bdd7 <__sprintf_chk@plt+0x2af7>
mov    0x38(%esp),%eax
test   %eax,%eax
jne    804bdd7 <__sprintf_chk@plt+0x2af7>
cmpl   $0x30,0x28(%esp)
lea    -0x1(%ebp),%eax
mov    %eax,0x50(%esp)
je     804c1ec <__sprintf_chk@plt+0x2f0c>
xor    %ebx,%ebx
test   %eax,%eax
je     804bdd7 <__sprintf_chk@plt+0x2af7>
mov    %esi,0x58(%esp)
mov    0x50(%esp),%esi
mov    %edi,0x50(%esp)
mov    %ebx,%edi
mov    0x1c(%esp),%ebx
mov    %ebx,0x4(%esp)
add    $0x1,%edi
movl   $0x20,(%esp)
call   8049220 <fputc@plt>
cmp    %esi,%edi
jne    804bdb8 <__sprintf_chk@plt+0x2ad8>
mov    0x58(%esp),%esi
mov    0x50(%esp),%edi
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
movsbl 0x40(%esp),%eax
mov    %eax,(%esp)
call   8049220 <fputc@plt>
mov    0x54(%esp),%eax
mov    %esi,%edx
mov    %edi,%ebx
add    %eax,0x18(%esp)
jmp    804aef7 <__sprintf_chk@plt+0x1c17>
xor    %edx,%edx
test   %ebp,%ebp
cmovns %ebp,%edx
mov    %edi,%ebx
jmp    804aef7 <__sprintf_chk@plt+0x1c17>
sub    %esi,%ebp
cmovns %ebp,%edx
jmp    804bbdb <__sprintf_chk@plt+0x28fb>
movl   $0x0,0x50(%esp)
jmp    804b0d6 <__sprintf_chk@plt+0x1df6>
mov    %edi,%ebx
jmp    804b754 <__sprintf_chk@plt+0x2474>
mov    %esi,%edi
jmp    804aeef <__sprintf_chk@plt+0x1c0f>
test   %esi,%esi
je     804b253 <__sprintf_chk@plt+0x1f73>
mov    %ebx,0x28(%esp)
mov    0x1c(%esp),%ebx
xor    %ebp,%ebp
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
mov    %ebx,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %esi,%edi
jne    804be48 <__sprintf_chk@plt+0x2b68>
mov    0x28(%esp),%ebx
mov    %ebp,%edi
jmp    804b253 <__sprintf_chk@plt+0x1f73>
mov    %edi,%ebx
jmp    804a93f <__sprintf_chk@plt+0x165f>
mov    0x1c(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8048fe0 <fwrite@plt>
jmp    804b062 <__sprintf_chk@plt+0x1d82>
imul   $0x2710,%esi,%edx
imul   $0x64,%eax,%eax
shr    $0x1f,%ebx
mov    %ebx,0x40(%esp)
mov    $0x14,%ebx
movb   $0x1,0x54(%esp)
add    %edx,%eax
lea    (%eax,%ecx,1),%esi
movl   $0x9,0x50(%esp)
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
lea    0x2(%edi),%ecx
movl   $0x1,0x40(%esp)
mov    %ecx,%edx
add    $0x1,%ecx
movzbl -0x1(%ecx),%eax
addl   $0x1,0x40(%esp)
cmp    $0x3a,%al
jne    804ba06 <__sprintf_chk@plt+0x2726>
jmp    804becd <__sprintf_chk@plt+0x2bed>
mov    0x3c(%esp),%edx
mov    %esi,%ecx
mov    0x1c(%esp),%eax
call   804a840 <__sprintf_chk@plt+0x1560>
jmp    804b062 <__sprintf_chk@plt+0x1d82>
imul   $0x64,%esi,%esi
shr    $0x1f,%ebx
mov    %ebx,0x40(%esp)
mov    $0x4,%ebx
movb   $0x1,0x54(%esp)
add    %eax,%esi
movl   $0x6,0x50(%esp)
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
mov    0x40(%esp),%esi
mov    $0xfffff894,%eax
mov    0x54(%esp),%ebx
movl   $0x4,0x50(%esp)
movb   $0x0,0x54(%esp)
sub    %esi,%eax
cmp    %eax,%ebx
mov    %esi,%eax
setl   0x40(%esp)
lea    0x76c(%eax,%ebx,1),%esi
xor    %ebx,%ebx
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
mov    %ebx,%eax
mov    $0x92492493,%edx
imul   %edx
movl   $0x2,0x50(%esp)
lea    (%edx,%ebx,1),%esi
sar    $0x2,%esi
sar    $0x1f,%ebx
sub    %ebx,%esi
add    $0x1,%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
movb   $0x0,0x40(%esp)
movl   $0x0,0x50(%esp)
jmp    804b0eb <__sprintf_chk@plt+0x1e0b>
mov    0x4c8(%esp),%esi
mov    $0x9,%ebp
movl   $0x9,0x50(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
mov    0x40(%esp),%ebx
mov    $0x16d,%eax
sub    $0x1,%ebx
test   $0x3,%bl
jne    804c005 <__sprintf_chk@plt+0x2d25>
mov    %ebx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,0x58(%esp)
mov    %edx,0x40(%esp)
sar    $0x5,%edx
sub    %eax,%edx
mov    $0x16e,%eax
imul   $0x64,%edx,%edx
cmp    %edx,%ebx
jne    804c005 <__sprintf_chk@plt+0x2d25>
mov    0x40(%esp),%eax
sar    $0x7,%eax
sub    0x58(%esp),%eax
imul   $0x190,%eax,%eax
sub    %eax,%ebx
cmp    $0x1,%ebx
sbb    %eax,%eax
not    %eax
add    $0x16e,%eax
add    %eax,%esi
mov    $0x92492493,%edx
mov    %esi,%ebx
sub    0x50(%esp),%ebx
movl   $0xffffffff,0x40(%esp)
add    $0x17e,%ebx
mov    %ebx,%eax
sub    %ebx,%esi
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
lea    0x3(%esi,%edx,1),%ebx
jmp    804b511 <__sprintf_chk@plt+0x2231>
test   %eax,%eax
je     804aea9 <__sprintf_chk@plt+0x1bc9>
mov    %ebx,0x50(%esp)
mov    0x1c(%esp),%ebx
xor    %ebp,%ebp
mov    %esi,0x54(%esp)
mov    %eax,%esi
mov    %ebp,%eax
mov    %edi,%ebp
mov    %eax,%edi
mov    %ebx,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %esi,%edi
jne    804c063 <__sprintf_chk@plt+0x2d83>
jmp    804ae9f <__sprintf_chk@plt+0x1bbf>
test   %ecx,%ecx
jne    804be96 <__sprintf_chk@plt+0x2bb6>
test   %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
jne    804bef9 <__sprintf_chk@plt+0x2c19>
shr    $0x1f,%ebx
mov    %ebx,0x40(%esp)
xor    %ebx,%ebx
movb   $0x1,0x54(%esp)
movl   $0x3,0x50(%esp)
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
neg    %eax
add    $0x64,%esi
cmp    $0xfffff893,%ecx
cmovle %eax,%esi
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
imul   $0x64,%esi,%esi
shr    $0x1f,%ebx
mov    %ebx,0x40(%esp)
xor    %ebx,%ebx
movb   $0x1,0x54(%esp)
add    %eax,%esi
movl   $0x5,0x50(%esp)
jmp    804b0c0 <__sprintf_chk@plt+0x1de0>
test   %ebx,%ebx
je     804b7d5 <__sprintf_chk@plt+0x24f5>
mov    %esi,0x20(%esp)
mov    0x1c(%esp),%esi
xor    %ebp,%ebp
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804c0fc <__sprintf_chk@plt+0x2e1c>
jmp    804b7cf <__sprintf_chk@plt+0x24ef>
test   %ebx,%ebx
lea    0x0(%esi),%esi
je     804baad <__sprintf_chk@plt+0x27cd>
mov    %esi,0x20(%esp)
mov    0x1c(%esp),%esi
xor    %ebp,%ebp
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804c136 <__sprintf_chk@plt+0x2e56>
jmp    804baa7 <__sprintf_chk@plt+0x27c7>
xor    %esi,%esi
movl   $0x8053e7d,0x3c(%esp)
jmp    804afca <__sprintf_chk@plt+0x1cea>
xor    %eax,%eax
test   %esi,%esi
setg   %al
jmp    804b18c <__sprintf_chk@plt+0x1eac>
mov    0x58(%esp),%ebx
movl   $0x0,0x40(%esp)
jmp    804b511 <__sprintf_chk@plt+0x2231>
test   %ebx,%ebx
je     804b03d <__sprintf_chk@plt+0x1d5d>
mov    %esi,0x28(%esp)
mov    0x1c(%esp),%esi
xor    %ebp,%ebp
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
mov    %esi,0x4(%esp)
add    $0x1,%edi
movl   $0x30,(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%edi
jne    804c196 <__sprintf_chk@plt+0x2eb6>
jmp    804b037 <__sprintf_chk@plt+0x1d57>
test   %ebx,%ebx
je     804b9da <__sprintf_chk@plt+0x26fa>
xor    %ebp,%ebp
mov    %edi,%eax
mov    %esi,%edi
mov    %ebp,%esi
mov    %eax,%ebp
mov    0x1c(%esp),%eax
add    $0x1,%esi
movl   $0x30,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <fputc@plt>
cmp    %ebx,%esi
jne    804c1c4 <__sprintf_chk@plt+0x2ee4>
mov    %edi,%esi
movsbl 0x0(%ebp),%edx
mov    %ebp,%edi
jmp    804b9da <__sprintf_chk@plt+0x26fa>
mov    0x50(%esp),%eax
test   %eax,%eax
je     804bdd7 <__sprintf_chk@plt+0x2af7>
xor    %edx,%edx
mov    %edx,%ebx
mov    0x1c(%esp),%eax
add    $0x1,%ebx
movl   $0x30,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <fputc@plt>
cmp    0x50(%esp),%ebx
jne    804c1fc <__sprintf_chk@plt+0x2f1c>
jmp    804bdd7 <__sprintf_chk@plt+0x2af7>
mov    0x4c8(%esp),%esi
mov    %ebp,0x50(%esp)
jmp    804b0b0 <__sprintf_chk@plt+0x1dd0>
call   8048f90 <__stack_chk_fail@plt>
movl   $0x0,0x50(%esp)
jmp    804b0eb <__sprintf_chk@plt+0x1e0b>
push   %ebx
mov    0x18(%esp),%ebx
mov    0x10(%esp),%eax
mov    0x8(%esp),%edx
mov    0xc(%esp),%ecx
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%ebx
mov    %eax,0x8(%esp)
xor    %eax,%eax
mov    %ebx,0xc(%esp)
pop    %ebx
jmp    804a8c0 <__sprintf_chk@plt+0x15e0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%ebx
movl   $0x0,(%esp)
mov    %ebx,0x4(%esp)
call   8048f10 <clock_gettime@plt>
test   %eax,%eax
je     804c2b1 <__sprintf_chk@plt+0x2fd1>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f60 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    %eax,(%ebx)
imul   $0x3e8,0x1c(%esp),%eax
mov    %eax,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebx
mov    0x38(%esp),%eax
mov    0x30(%esp),%esi
test   %ebx,%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
js     804c338 <__sprintf_chk@plt+0x3058>
xchg   %ax,%ax
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8050fa0 <__sprintf_chk@plt+0x7cc0>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8050e20 <__sprintf_chk@plt+0x7b40>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    804c2e0 <__sprintf_chk@plt+0x3000>
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x30,%ebp
lea    0x0(%esi),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8050fa0 <__sprintf_chk@plt+0x7cc0>
mov    %ebp,%ecx
sub    %eax,%ecx
mov    %cl,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8050e20 <__sprintf_chk@plt+0x7b40>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    804c340 <__sprintf_chk@plt+0x3060>
mov    %edi,%eax
sub    $0x1,%edi
movb   $0x2d,-0x1(%eax)
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
push   %ebp
mov    %eax,%ecx
push   %edi
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x5c(%eax),%eax
mov    0x1c(%esp),%ebx
mov    0x20(%esp),%edi
test   %eax,%eax
je     804c3bf <__sprintf_chk@plt+0x30df>
mov    0x20(%ecx),%edx
test   %edx,%edx
je     804c408 <__sprintf_chk@plt+0x3128>
cmp    $0x4,%edi
ja     804c438 <__sprintf_chk@plt+0x3158>
addl   $0x1,0x6c(%ecx)
cmp    $0x2,%edi
jbe    804c428 <__sprintf_chk@plt+0x3148>
mov    %ebx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
mov    %edx,0x2c(%ecx)
imul   $0x64,%edx,%edx
sub    %edx,%ebx
mov    %ebx,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
movl   $0x2,0x14(%ecx)
add    $0x4,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x59(%ecx)
jne    804c3bf <__sprintf_chk@plt+0x30df>
mov    0x6c(%ecx),%eax
test   %eax,%eax
jne    804c498 <__sprintf_chk@plt+0x31b8>
cmp    $0x2,%edi
ja     804c498 <__sprintf_chk@plt+0x31b8>
movl   $0x1,0x6c(%ecx)
lea    0x0(%esi),%esi
mov    %ebx,0x2c(%ecx)
movl   $0x0,0x30(%ecx)
jmp    804c3eb <__sprintf_chk@plt+0x310b>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
mov    $0x51eb851f,%ebp
mov    %eax,0x5c(%ecx)
mov    %ebx,%eax
sub    $0x4,%edi
imul   %ebp
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,(%esp)
mov    %edi,0x20(%ecx)
mov    %edx,%esi
mov    %ebx,%edx
sar    $0x5,%esi
sub    %eax,%esi
imul   $0x64,%esi,%eax
sub    %eax,%edx
mov    %esi,%eax
mov    %edx,0x28(%ecx)
imul   %ebp
mov    %esi,%ebp
sar    $0x1f,%ebp
mov    %ebx,%eax
sar    $0x5,%edx
sub    %ebp,%edx
imul   $0x64,%edx,%edx
sub    %edx,%esi
mov    $0x68db8bad,%edx
imul   %edx
mov    %esi,0x24(%ecx)
sar    $0xc,%edx
sub    (%esp),%edx
mov    %edx,0x1c(%ecx)
add    $0x4,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%esp),%eax
mov    %eax,0x18(%ecx)
mov    0x1c(%esp),%eax
mov    %eax,0x1c(%ecx)
mov    0x20(%esp),%eax
mov    %eax,0x20(%ecx)
jmp    804c400 <__sprintf_chk@plt+0x3120>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x20(%esp),%edx
mov    0x1c(%esp),%ecx
movb   $0x1,0x59(%eax)
imul   %edx,%ecx
add    %ecx,0x54(%eax)
mov    0x18(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x50(%eax)
mov    0x14(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x4c(%eax)
mov    0x10(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x48(%eax)
mov    0xc(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x44(%eax)
mov    0x8(%esp),%ecx
imul   %edx,%ecx
imul   0x4(%esp),%edx
add    %ecx,0x40(%eax)
add    %edx,0x3c(%eax)
ret
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
cmp    $0xffffffff,%ecx
mov    %ecx,0xc(%esp)
je     804c558 <__sprintf_chk@plt+0x3278>
mov    0x4(%edx),%ecx
mov    (%edx),%eax
xor    (%ebx),%eax
xor    0x4(%ebx),%ecx
or     %eax,%ecx
mov    0x8(%edx),%eax
xor    0x8(%ebx),%eax
or     %eax,%ecx
mov    0xc(%edx),%eax
xor    0xc(%ebx),%eax
or     %eax,%ecx
mov    0x10(%edx),%eax
xor    0x10(%ebx),%eax
or     %eax,%ecx
mov    0x14(%edx),%eax
xor    0x14(%ebx),%eax
or     %eax,%ecx
sete   %al
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0xc(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
mov    %eax,%edx
jne    804c51f <__sprintf_chk@plt+0x323f>
xor    %eax,%eax
jmp    804c54e <__sprintf_chk@plt+0x326e>
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x14,%esp
movl   $0x8052bb4,(%esp)
call   8049050 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c5ab <__sprintf_chk@plt+0x32cb>
mov    %eax,(%esp)
call   8049120 <strlen@plt>
lea    0x1(%eax),%edx
cmp    $0x64,%edx
ja     804c5b8 <__sprintf_chk@plt+0x32d8>
mov    %ebx,0x4(%esp)
mov    %edx,0x8(%esp)
mov    %esi,(%esp)
call   8048ef0 <memcpy@plt>
mov    %eax,%ebx
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
mov    %edx,0x4(%esp)
call   80507a0 <__sprintf_chk@plt+0x74c0>
add    $0x14,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
mov    0x10(%esp),%ebx
cmpl   $0x2,0xc(%esp)
ja     804c610 <__sprintf_chk@plt+0x3330>
test   %ebx,%ebx
js     804c630 <__sprintf_chk@plt+0x3350>
imul   $0x3c,%ecx,%ecx
mov    %ebx,%eax
neg    %eax
test   %dl,%dl
cmovne %eax,%ebx
add    %ebx,%ecx
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %eax,%edx
xor    %ecx,%edx
sub    %eax,%edx
cmp    $0x5a0,%edx
jle    804c607 <__sprintf_chk@plt+0x3327>
addl   $0x1,(%esi)
mov    %ecx,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
jns    804c5e3 <__sprintf_chk@plt+0x3303>
mov    %ecx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
imul   $0xffffffd8,%edx,%edx
add    %edx,%ecx
jmp    804c5f1 <__sprintf_chk@plt+0x3311>
xchg   %ax,%ax
imul   $0x64,%ecx,%ecx
jmp    804c614 <__sprintf_chk@plt+0x3334>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x8052bb7,%ecx
push   %esi
mov    %eax,%edi
push   %ebx
mov    %edx,%esi
sub    $0x10,%esp
mov    $0x8053300,%ebx
jmp    804c661 <__sprintf_chk@plt+0x3381>
xchg   %ax,%ax
add    $0xc,%ebx
mov    (%ebx),%ecx
test   %ecx,%ecx
je     804c680 <__sprintf_chk@plt+0x33a0>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804c658 <__sprintf_chk@plt+0x3378>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x74(%edi),%edx
lea    0x74(%edi),%ebx
test   %edx,%edx
jne    804c6c9 <__sprintf_chk@plt+0x33e9>
lea    0x0(%esi),%esi
mov    $0x80530c0,%ebx
mov    $0x8052bbb,%eax
jmp    804c6a9 <__sprintf_chk@plt+0x33c9>
lea    0x0(%esi,%eiz,1),%esi
add    $0xc,%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     804c6e0 <__sprintf_chk@plt+0x3400>
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804c6a0 <__sprintf_chk@plt+0x33c0>
jmp    804c671 <__sprintf_chk@plt+0x3391>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0xc,%ebx
mov    (%ebx),%edx
test   %edx,%edx
je     804c690 <__sprintf_chk@plt+0x33b0>
mov    %edx,0x4(%esp)
mov    %esi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804c6c0 <__sprintf_chk@plt+0x33e0>
jmp    804c671 <__sprintf_chk@plt+0x3391>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
xor    %edx,%edx
push   %edi
mov    $0xfffffffe,%edi
push   %esi
push   %ebx
sub    $0x2fc,%esp
mov    0x310(%esp),%eax
lea    0x80(%esp),%ebp
mov    %gs:0x14,%esi
mov    %esi,0x2ec(%esp)
xor    %esi,%esi
lea    0xa8(%esp),%esi
mov    %ebp,%ebx
mov    %dx,0x80(%esp)
mov    %esi,0x28(%esp)
mov    %eax,0x44(%esp)
add    $0x70,%eax
movl   $0x0,0x40(%esp)
movl   $0x0,0x24(%esp)
mov    %eax,0x48(%esp)
mov    %edi,0x20(%esp)
mov    0x24(%esp),%eax
movsbl 0x80538e0(%eax),%ebp
cmp    $0xffffffa3,%ebp
je     804c7aa <__sprintf_chk@plt+0x34ca>
cmpl   $0xfffffffe,0x20(%esp)
je     804ca10 <__sprintf_chk@plt+0x3730>
mov    0x20(%esp),%edi
test   %edi,%edi
jle    804c9e8 <__sprintf_chk@plt+0x3708>
cmp    $0x115,%edi
mov    $0x2,%eax
ja     804c792 <__sprintf_chk@plt+0x34b2>
mov    0x20(%esp),%eax
movzbl 0x8053960(%eax),%eax
lea    0x0(%ebp,%eax,1),%edx
cmp    $0x70,%edx
ja     804c7aa <__sprintf_chk@plt+0x34ca>
movsbl 0x8053720(%edx),%ecx
cmp    %eax,%ecx
je     804c868 <__sprintf_chk@plt+0x3588>
mov    0x24(%esp),%eax
movzbl 0x8053860(%eax),%esi
test   %esi,%esi
jne    804c880 <__sprintf_chk@plt+0x35a0>
cmpl   $0x3,0x40(%esp)
je     804c9f8 <__sprintf_chk@plt+0x3718>
mov    0x28(%esp),%edx
jmp    804c7ef <__sprintf_chk@plt+0x350f>
xchg   %ax,%ax
lea    0x80(%esp),%eax
cmp    %eax,%ebx
je     804c9b8 <__sprintf_chk@plt+0x36d8>
sub    $0x2,%ebx
movswl (%ebx),%eax
sub    $0x1c,%edx
movsbl 0x80538e0(%eax),%ebp
cmp    $0xffffffa3,%ebp
je     804c7d0 <__sprintf_chk@plt+0x34f0>
add    $0x1,%ebp
cmp    $0x70,%ebp
ja     804c7d0 <__sprintf_chk@plt+0x34f0>
cmpb   $0x1,0x8053720(%ebp)
jne    804c7d0 <__sprintf_chk@plt+0x34f0>
movzbl 0x80537a0(%ebp),%eax
test   %eax,%eax
je     804c7d0 <__sprintf_chk@plt+0x34f0>
mov    %edx,0x28(%esp)
mov    0x4c(%esp),%esi
mov    %eax,0x24(%esp)
mov    %edx,%eax
mov    0x64(%esp),%edx
mov    0x50(%esp),%edi
addl   $0x1c,0x28(%esp)
mov    %edx,0x1c(%eax)
mov    0x70(%esp),%edx
mov    %esi,0x20(%eax)
mov    %edi,0x24(%eax)
mov    %esi,0x68(%esp)
mov    %edx,0x28(%eax)
mov    0x74(%esp),%edx
mov    %edi,0x6c(%esp)
movl   $0x3,0x40(%esp)
mov    %edx,0x2c(%eax)
mov    0x78(%esp),%edx
mov    %edx,0x30(%eax)
mov    0x7c(%esp),%edx
mov    %edx,0x34(%eax)
mov    %ebx,%eax
jmp    804c985 <__sprintf_chk@plt+0x36a5>
nop
movzbl 0x80537a0(%edx),%eax
test   %eax,%eax
mov    %eax,0x24(%esp)
jne    804cb44 <__sprintf_chk@plt+0x3864>
xor    %esi,%esi
lea    0x0(%esi),%esi
movzbl 0x8053660(%esi),%edi
mov    $0x1,%eax
sub    %edi,%eax
imul   $0x1c,%eax,%eax
add    0x28(%esp),%eax
mov    (%eax),%ecx
mov    0x8(%eax),%ebp
mov    %ecx,0x24(%esp)
mov    0x4(%eax),%ecx
mov    %ecx,0x2c(%esp)
mov    0xc(%eax),%ecx
mov    %ecx,0x3c(%esp)
mov    0x10(%eax),%ecx
mov    %ecx,0x38(%esp)
mov    0x14(%eax),%ecx
mov    0x18(%eax),%eax
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
lea    -0x4(%esi),%eax
cmp    $0x57,%eax
ja     804c908 <__sprintf_chk@plt+0x3628>
jmp    *0x8052e20(,%eax,4)
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x34(%esp)
movl   $0x0,0x30(%esp)
movl   $0x0,0x38(%esp)
xor    %ebp,%ebp
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
lea    0x0(%esi),%esi
imul   $0x1c,%edi,%eax
mov    0x28(%esp),%edx
add    %edi,%edi
sub    %eax,%edx
mov    %ebx,%eax
sub    %edi,%eax
lea    0x1c(%edx),%edi
mov    %edi,0x28(%esp)
mov    0x24(%esp),%edi
mov    %ebp,0x24(%edx)
mov    %edi,0x1c(%edx)
mov    0x2c(%esp),%edi
mov    %edi,0x20(%edx)
mov    0x3c(%esp),%edi
mov    %edi,0x28(%edx)
mov    0x38(%esp),%edi
mov    %edi,0x2c(%edx)
mov    0x34(%esp),%edi
mov    %edi,0x30(%edx)
mov    0x30(%esp),%edi
mov    %edi,0x34(%edx)
movzbl 0x80536c0(%esi),%edx
movzwl (%eax),%esi
sub    $0x1c,%edx
movsbl 0x805382b(%edx),%edi
movswl %si,%ecx
add    %edi,%ecx
cmp    $0x70,%ecx
ja     804c97a <__sprintf_chk@plt+0x369a>
movsbw 0x8053720(%ecx),%di
cmp    %di,%si
je     804cba1 <__sprintf_chk@plt+0x38c1>
movsbl 0x8053811(%edx),%esi
mov    %esi,0x24(%esp)
mov    0x24(%esp),%esi
lea    0x2(%eax),%ebx
mov    %si,0x2(%eax)
lea    0xa6(%esp),%eax
cmp    %eax,%ebx
jae    804d5b0 <__sprintf_chk@plt+0x42d0>
cmp    $0xc,%esi
jne    804c753 <__sprintf_chk@plt+0x3473>
xor    %eax,%eax
jmp    804c9bd <__sprintf_chk@plt+0x36dd>
lea    0x0(%esi,%eiz,1),%esi
jne    804c7c8 <__sprintf_chk@plt+0x34e8>
xchg   %ax,%ax
mov    $0x1,%eax
mov    0x2ec(%esp),%esi
xor    %gs:0x14,%esi
jne    804d888 <__sprintf_chk@plt+0x45a8>
add    $0x2fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x30(%esp),%ebx
mov    0x34(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
movl   $0x0,0x20(%esp)
jmp    804c792 <__sprintf_chk@plt+0x34b2>
nop
cmpl   $0x0,0x20(%esp)
jle    804c9ac <__sprintf_chk@plt+0x36cc>
movl   $0xfffffffe,0x20(%esp)
mov    0x28(%esp),%edx
jmp    804c7ef <__sprintf_chk@plt+0x350f>
mov    0x44(%esp),%edi
mov    %ebx,0x30(%esp)
mov    %ebp,0x34(%esp)
mov    (%edi),%eax
movzbl (%eax),%esi
mov    %esi,%ecx
mov    %edi,%esi
mov    %cl,0x20(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x20(%esp),%edx
lea    -0x9(%edx),%ecx
cmp    $0x4,%cl
jbe    804cb30 <__sprintf_chk@plt+0x3850>
cmp    $0x20,%dl
je     804cb30 <__sprintf_chk@plt+0x3850>
movzbl %dl,%ebp
cmp    $0x2d,%dl
lea    -0x30(%ebp),%edi
sete   %cl
cmp    $0x9,%edi
setbe  %bl
or     %cl,%bl
mov    %bl,0x2c(%esp)
jne    804cac0 <__sprintf_chk@plt+0x37e0>
cmp    $0x2b,%dl
je     804cad3 <__sprintf_chk@plt+0x37f3>
mov    %ebp,%ecx
and    $0xffffffdf,%ecx
sub    $0x41,%ecx
cmp    $0x19,%ecx
jbe    804d660 <__sprintf_chk@plt+0x4380>
cmpb   $0x28,0x20(%esp)
jne    804d7d9 <__sprintf_chk@plt+0x44f9>
xor    %ebx,%ebx
jmp    804caa5 <__sprintf_chk@plt+0x37c5>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x29,%cl
sete   %cl
movzbl %cl,%ecx
sub    %ecx,%ebx
test   %ebx,%ebx
je     804cb35 <__sprintf_chk@plt+0x3855>
mov    %edx,%eax
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl -0x1(%edx),%ecx
test   %cl,%cl
je     804c9dc <__sprintf_chk@plt+0x36fc>
cmp    $0x28,%cl
jne    804ca90 <__sprintf_chk@plt+0x37b0>
add    $0x1,%ebx
jmp    804ca9b <__sprintf_chk@plt+0x37bb>
cmpb   $0x2b,0x20(%esp)
jne    804d5f7 <__sprintf_chk@plt+0x4317>
test   %cl,%cl
jne    804cbf7 <__sprintf_chk@plt+0x3917>
mov    $0x1,%ecx
mov    %eax,%edx
add    $0x1,%edx
mov    %edx,(%esi)
movzbl (%edx),%ebx
lea    -0x9(%ebx),%eax
cmp    $0x4,%al
jbe    804cada <__sprintf_chk@plt+0x37fa>
cmp    $0x20,%bl
je     804cada <__sprintf_chk@plt+0x37fa>
movzbl %bl,%edi
sub    $0x30,%edi
cmp    $0x9,%edi
ja     804cbb1 <__sprintf_chk@plt+0x38d1>
movzbl 0x1(%edx),%eax
mov    0x30(%esp),%ebx
mov    %ecx,0x2c(%esp)
mov    0x34(%esp),%ebp
mov    %edi,%ecx
lea    0x1(%edx),%edi
movzbl %al,%esi
mov    %al,0x30(%esp)
lea    -0x30(%esi),%eax
cmp    $0x9,%eax
mov    %edx,%eax
ja     804d471 <__sprintf_chk@plt+0x4191>
mov    %edx,0x20(%esp)
jmp    804cbdd <__sprintf_chk@plt+0x38fd>
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl 0x1(%eax),%eax
mov    %al,0x20(%esp)
mov    %edx,%eax
jmp    804ca30 <__sprintf_chk@plt+0x3750>
mov    0x28(%esp),%esi
mov    0x64(%esp),%eax
mov    0x4c(%esp),%edi
mov    0x50(%esp),%ecx
cmpl   $0x1,0x40(%esp)
mov    %eax,0x1c(%esi)
mov    0x70(%esp),%eax
adcl   $0xffffffff,0x40(%esp)
mov    %edi,0x68(%esp)
mov    %eax,0x28(%esi)
mov    0x74(%esp),%eax
mov    %ecx,0x6c(%esp)
mov    %edi,0x20(%esi)
mov    %ecx,0x24(%esi)
mov    %eax,0x2c(%esi)
mov    0x78(%esp),%eax
movl   $0xfffffffe,0x20(%esp)
mov    %eax,0x30(%esi)
mov    0x7c(%esp),%eax
mov    %eax,0x34(%esi)
lea    0x1c(%esi),%eax
mov    %eax,0x28(%esp)
mov    %ebx,%eax
jmp    804c985 <__sprintf_chk@plt+0x36a5>
movzbl 0x80537a0(%ecx),%esi
mov    %esi,0x24(%esp)
jmp    804c985 <__sprintf_chk@plt+0x36a5>
mov    %bl,0x20(%esp)
mov    %edx,%eax
jmp    804ca30 <__sprintf_chk@plt+0x3750>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edi
movzbl (%edi),%eax
movzbl %al,%esi
lea    -0x30(%esi),%edx
cmp    $0x9,%edx
ja     804d469 <__sprintf_chk@plt+0x4189>
cmp    $0x19999999,%ecx
ja     804cbea <__sprintf_chk@plt+0x390a>
lea    (%ecx,%ecx,4),%eax
add    %eax,%eax
lea    -0x30(%eax,%esi,1),%ecx
cmp    %eax,%ecx
jae    804cbc0 <__sprintf_chk@plt+0x38e0>
movl   $0x3f,0x20(%esp)
jmp    804c787 <__sprintf_chk@plt+0x34a7>
mov    $0xffffffff,%ecx
jmp    804cad8 <__sprintf_chk@plt+0x37f8>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
mov    %eax,(%esp)
mov    -0x18(%ecx),%eax
mov    %eax,0x4(%esp)
mov    -0x14(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
call   804c3a0 <__sprintf_chk@plt+0x30c0>
mov    0x28(%esp),%ecx
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    0x44(%esp),%eax
call   804c4c0 <__sprintf_chk@plt+0x31e0>
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x24(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ebp
imul   (%eax),%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x3c(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
movl   $0x0,0x2c(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x38(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x2c(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    (%eax),%ebp
jmp    804ccaf <__sprintf_chk@plt+0x39cf>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%ecx
mov    -0x18(%eax),%eax
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
jmp    804c8e3 <__sprintf_chk@plt+0x3603>
mov    0x28(%esp),%edx
mov    -0x18(%edx),%ecx
mov    -0x88(%edx),%eax
mov    %ecx,0x54(%esp)
mov    -0x1c(%edx),%ecx
mov    %ecx,0x58(%esp)
mov    -0x50(%edx),%ecx
mov    %ecx,0x5c(%esp)
mov    %eax,%ecx
mov    0x44(%esp),%eax
mov    %ecx,0x2c(%eax)
mov    0x5c(%esp),%ecx
mov    %ecx,0x30(%eax)
mov    0x58(%esp),%ecx
mov    %ecx,0x34(%eax)
mov    0x54(%esp),%ecx
mov    %ecx,0x38(%eax)
mov    0x44(%esp),%ecx
mov    (%edx),%eax
mov    %eax,0x14(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    -0x50(%ecx),%edx
mov    0x44(%esp),%ecx
mov    %eax,0x30(%ecx)
mov    0x28(%esp),%eax
mov    %edx,0x2c(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    (%eax),%eax
mov    %eax,0x14(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x70(%eax)
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ecx
movzbl -0x1c(%eax),%edx
mov    (%eax),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    -0x14(%eax),%eax
mov    %eax,(%esp)
mov    0x48(%esp),%eax
call   804c5d0 <__sprintf_chk@plt+0x32f0>
mov    0x44(%esp),%ecx
mov    %eax,0x10(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ecx
mov    %ecx,0x54(%esp)
mov    -0x1c(%eax),%ecx
mov    %ecx,0x58(%esp)
mov    -0x50(%eax),%ecx
mov    -0x88(%eax),%eax
mov    %eax,%edx
mov    0x44(%esp),%eax
mov    %ecx,0x30(%eax)
mov    0x58(%esp),%ecx
mov    %edx,0x2c(%eax)
movl   $0x2,0x14(%eax)
mov    %ecx,0x34(%eax)
mov    0x54(%esp),%ecx
mov    %ecx,0x38(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    -0x50(%ecx),%edx
mov    0x44(%esp),%ecx
mov    %edx,0x2c(%ecx)
mov    %eax,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
movl   $0x2,0x14(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    -0x18(%eax),%eax
movl   $0x0,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    %eax,0x2c(%ecx)
movl   $0x2,0x14(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
movl   $0x1a4,0x10(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
mov    %eax,0x10(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804cd3d <__sprintf_chk@plt+0x3a5d>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x1,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804cceb <__sprintf_chk@plt+0x3a0b>
mov    0x28(%esp),%ecx
mov    (%ecx),%eax
mov    %eax,0x1c(%esp)
mov    -0x1c(%ecx),%eax
mov    %eax,(%esp)
mov    -0x18(%ecx),%eax
mov    %eax,0x4(%esp)
mov    -0x14(%ecx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ecx),%eax
mov    %eax,0xc(%esp)
mov    -0xc(%ecx),%eax
mov    %eax,0x10(%esp)
mov    -0x8(%ecx),%eax
mov    %eax,0x14(%esp)
mov    -0x4(%ecx),%eax
mov    %eax,0x18(%esp)
mov    0x44(%esp),%eax
call   804c4c0 <__sprintf_chk@plt+0x31e0>
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804cc72 <__sprintf_chk@plt+0x3992>
mov    0x28(%esp),%eax
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x38(%ecx),%eax
mov    %eax,0x18(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    -0x30(%ecx),%eax
mov    %eax,0x20(%edx)
mov    -0x18(%ecx),%eax
neg    %eax
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
neg    %eax
mov    %eax,0x28(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
movl   $0x0,0x30(%esp)
movl   $0x1,0x34(%esp)
jmp    804c8e3 <__sprintf_chk@plt+0x3603>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804c8d7 <__sprintf_chk@plt+0x35f7>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x1,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
call   804c3a0 <__sprintf_chk@plt+0x30c0>
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x1,0xc(%ecx)
mov    -0x1c(%eax),%eax
test   %eax,%eax
setg   %al
movzbl %al,%eax
add    $0x1,%eax
add    %eax,0x68(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
test   %eax,%eax
mov    %eax,0xc(%ecx)
setg   %al
movzbl %al,%eax
add    %eax,0x68(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
mov    -0x1c(%ecx),%eax
mov    %eax,0x24(%edx)
mov    (%ecx),%eax
mov    %eax,0x18(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    0x8(%ecx),%eax
mov    %eax,0x20(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x18(%ecx),%eax
mov    %eax,0x28(%edx)
mov    (%ecx),%eax
mov    %eax,0x24(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x54(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x24(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804d0f4 <__sprintf_chk@plt+0x3e14>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x38(%ecx),%eax
mov    %eax,0x24(%edx)
mov    -0x18(%ecx),%eax
neg    %eax
mov    %eax,0x28(%edx)
mov    0x4(%ecx),%eax
neg    %eax
mov    %eax,0x1c(%edx)
mov    0x8(%ecx),%eax
mov    %eax,0x20(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
mov    -0x1c(%ecx),%eax
mov    %eax,0x24(%edx)
jmp    804d167 <__sprintf_chk@plt+0x3e87>
mov    0x28(%esp),%eax
cmpl   $0x3,-0x68(%eax)
jbe    804d5eb <__sprintf_chk@plt+0x430b>
mov    %eax,%ecx
mov    0x44(%esp),%edx
mov    -0x70(%eax),%eax
mov    %eax,0x18(%edx)
mov    -0x6c(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    -0x68(%ecx),%eax
mov    %eax,0x20(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x34(%ecx),%eax
jmp    804d13f <__sprintf_chk@plt+0x3e5f>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x0,0x4(%ecx)
mov    -0x1c(%eax),%eax
mov    %eax,0x8(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x1,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%ebp
imul   (%eax),%ebp
jmp    804ccaf <__sprintf_chk@plt+0x39cf>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x1,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x4(%edx)
mov    (%ecx),%eax
mov    %eax,0x8(%edx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
jmp    804d271 <__sprintf_chk@plt+0x3f91>
movl   $0xffffffff,0x24(%esp)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804cd77 <__sprintf_chk@plt+0x3a97>
mov    0x28(%esp),%edx
mov    0x44(%esp),%ecx
mov    -0x18(%edx),%eax
movl   $0x0,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    %eax,0x2c(%ecx)
mov    (%edx),%eax
mov    %eax,0x14(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x60(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x5c(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x70(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x64(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x6c(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%eax
addl   $0x1,0x6c(%eax)
addl   $0x1,0x5c(%eax)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
movb   $0x1,0x58(%ecx)
mov    %edx,0x38(%ecx)
mov    %eax,0x34(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x0,0x4(%ecx)
mov    (%eax),%eax
mov    %eax,0x8(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    -0x1c(%eax),%eax
mov    %eax,0x54(%esp)
add    $0x3c,%eax
mov    %eax,0x10(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
mov    %eax,0x54(%esp)
add    $0x3c,%eax
mov    %eax,0x10(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%eax
mov    -0x38(%eax),%ecx
movzbl -0x1c(%eax),%edx
mov    %ecx,0x54(%esp)
mov    -0x18(%eax),%ecx
mov    (%eax),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    -0x14(%eax),%eax
mov    %eax,(%esp)
mov    0x48(%esp),%eax
call   804c5d0 <__sprintf_chk@plt+0x32f0>
mov    0x44(%esp),%ecx
add    0x54(%esp),%eax
mov    %eax,0x10(%ecx)
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
movl   $0x1a4,0x10(%edx)
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    %edx,%eax
call   804c4c0 <__sprintf_chk@plt+0x31e0>
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x1c(%ecx),%eax
mov    %eax,0x10(%edx)
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    %edx,%eax
call   804c4c0 <__sprintf_chk@plt+0x31e0>
jmp    804c908 <__sprintf_chk@plt+0x3628>
mov    %al,0x30(%esp)
mov    0x20(%esp),%eax
movzbl 0x30(%esp),%edx
and    $0xfffffffd,%edx
cmp    $0x2c,%dl
jne    804d560 <__sprintf_chk@plt+0x4280>
movsbl 0x1(%edi),%edx
lea    -0x30(%edx),%esi
cmp    $0x9,%esi
ja     804d560 <__sprintf_chk@plt+0x4280>
cmpl   $0xffffffff,0x2c(%esp)
mov    %ecx,%esi
je     804d640 <__sprintf_chk@plt+0x4360>
test   %ecx,%ecx
movl   $0x3f,0x20(%esp)
js     804c787 <__sprintf_chk@plt+0x34a7>
movzbl 0x2(%edi),%ecx
lea    0x2(%edi),%eax
sub    $0x30,%edx
movl   $0x8,0x30(%esp)
mov    %cl,0x20(%esp)
movsbl %cl,%edi
lea    (%edx,%edx,4),%edx
lea    -0x30(%edi),%ecx
add    %edx,%edx
cmp    $0x9,%ecx
ja     804d4e8 <__sprintf_chk@plt+0x4208>
add    %ecx,%edx
movzbl 0x1(%eax),%ecx
add    $0x1,%eax
movsbl %cl,%edi
mov    %cl,0x20(%esp)
lea    -0x30(%edi),%ecx
subl   $0x1,0x30(%esp)
jne    804d4c8 <__sprintf_chk@plt+0x41e8>
cmpl   $0xffffffff,0x2c(%esp)
jne    804d509 <__sprintf_chk@plt+0x4229>
jmp    804d88d <__sprintf_chk@plt+0x45ad>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movsbl (%eax),%ecx
sub    $0x30,%ecx
cmp    $0x9,%ecx
jbe    804d500 <__sprintf_chk@plt+0x4220>
test   %edx,%edx
je     804d8c3 <__sprintf_chk@plt+0x45e3>
mov    0x2c(%esp),%ecx
shr    $0x1f,%ecx
test   %cl,%cl
je     804d8c3 <__sprintf_chk@plt+0x45e3>
sub    $0x1,%esi
movl   $0x3f,0x20(%esp)
jns    804c787 <__sprintf_chk@plt+0x34a7>
mov    %esi,0x64(%esp)
mov    0x44(%esp),%esi
movl   $0x3b9aca00,0x4c(%esp)
movl   $0x114,0x20(%esp)
sub    %edx,0x4c(%esp)
mov    %eax,(%esi)
jmp    804c787 <__sprintf_chk@plt+0x34a7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%esi
mov    %esi,%edx
shr    $0x1f,%edx
cmp    $0xffffffff,%esi
mov    %dl,0x64(%esp)
je     804d5ba <__sprintf_chk@plt+0x42da>
test   %ecx,%ecx
mov    %ecx,0x4c(%esp)
movl   $0x3f,0x20(%esp)
js     804c787 <__sprintf_chk@plt+0x34a7>
mov    %edi,%esi
sub    %eax,%esi
mov    0x44(%esp),%eax
cmpl   $0x1,0x2c(%esp)
mov    %esi,0x50(%esp)
mov    %edi,(%eax)
sbb    %eax,%eax
mov    %eax,0x20(%esp)
notl   0x20(%esp)
addl   $0x113,0x20(%esp)
jmp    804c787 <__sprintf_chk@plt+0x34a7>
mov    $0x2,%eax
jmp    804c9bd <__sprintf_chk@plt+0x36dd>
neg    %ecx
test   %ecx,%ecx
mov    %ecx,0x4c(%esp)
movl   $0x3f,0x20(%esp)
jg     804c787 <__sprintf_chk@plt+0x34a7>
mov    %edi,%esi
sub    %eax,%esi
mov    0x44(%esp),%eax
mov    %esi,0x50(%esp)
movl   $0x112,0x20(%esp)
mov    %edi,(%eax)
jmp    804c787 <__sprintf_chk@plt+0x34a7>
mov    0x28(%esp),%ecx
mov    -0x6c(%ecx),%eax
jmp    804d129 <__sprintf_chk@plt+0x3e49>
test   %cl,%cl
jne    804cbf7 <__sprintf_chk@plt+0x3917>
movzbl 0x1(%eax),%edx
mov    %edi,%ecx
mov    0x30(%esp),%ebx
lea    0x1(%eax),%edi
mov    0x34(%esp),%ebp
movzbl %dl,%esi
mov    %dl,0x30(%esp)
lea    -0x30(%esi),%edx
cmp    $0x9,%edx
ja     804d87b <__sprintf_chk@plt+0x459b>
cmp    $0x19999999,%ecx
ja     804cbea <__sprintf_chk@plt+0x390a>
movl   $0x0,0x2c(%esp)
mov    %eax,0x20(%esp)
jmp    804cbdd <__sprintf_chk@plt+0x38fd>
neg    %esi
test   %esi,%esi
movl   $0x3f,0x20(%esp)
jg     804c787 <__sprintf_chk@plt+0x34a7>
add    %esi,%ecx
jne    804c787 <__sprintf_chk@plt+0x34a7>
jmp    804d4af <__sprintf_chk@plt+0x41cf>
nop
mov    0x30(%esp),%ebx
lea    0x2d8(%esp),%ecx
mov    0x34(%esp),%ebp
mov    0x44(%esp),%esi
mov    %ecx,%eax
lea    0x2d8(%esp),%edi
sub    %edi,%eax
cmp    $0x12,%eax
ja     804d688 <__sprintf_chk@plt+0x43a8>
mov    %dl,(%ecx)
add    $0x1,%ecx
mov    (%esi),%eax
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl 0x1(%eax),%edx
mov    %edx,%eax
and    $0xdf,%eax
sub    $0x41,%eax
cmp    $0x19,%eax
jbe    804d673 <__sprintf_chk@plt+0x4393>
cmp    $0x2e,%dl
je     804d673 <__sprintf_chk@plt+0x4393>
movb   $0x0,(%ecx)
movzbl 0x2d8(%esp),%eax
lea    0x2d8(%esp),%edx
test   %al,%al
je     804d6d6 <__sprintf_chk@plt+0x43f6>
lea    -0x61(%eax),%esi
cmp    $0x19,%esi
lea    -0x20(%eax),%ecx
cmovbe %ecx,%eax
add    $0x1,%edx
mov    %al,-0x1(%edx)
movzbl (%edx),%eax
test   %al,%al
jne    804d6bd <__sprintf_chk@plt+0x43dd>
mov    $0x8053620,%esi
mov    $0x8052bbf,%eax
jmp    804d6f1 <__sprintf_chk@plt+0x4411>
lea    0x0(%esi),%esi
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804d71d <__sprintf_chk@plt+0x443d>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804d6e8 <__sprintf_chk@plt+0x4408>
mov    %esi,%eax
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0x64(%esp)
mov    %eax,0x20(%esp)
jmp    804c76e <__sprintf_chk@plt+0x348e>
lea    0x2d8(%esp),%eax
mov    %eax,%ecx
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     804d726 <__sprintf_chk@plt+0x4446>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmovne %ecx,%edx
add    %al,%al
mov    %edx,0x20(%esp)
lea    0x2d8(%esp),%eax
sbbl   $0x3,0x20(%esp)
sub    %eax,0x20(%esp)
mov    0x20(%esp),%eax
cmp    $0x3,%eax
je     804d7f6 <__sprintf_chk@plt+0x4516>
cmp    $0x4,%eax
je     804d869 <__sprintf_chk@plt+0x4589>
mov    $0x80534e0,%esi
mov    $0x8052bc2,%eax
jmp    804d7b8 <__sprintf_chk@plt+0x44d8>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
movl   $0x3,0x8(%esp)
mov    %eax,(%esp)
call   8049260 <strncmp@plt>
test   %eax,%eax
sete   %al
test   %al,%al
jne    804d708 <__sprintf_chk@plt+0x4428>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804d800 <__sprintf_chk@plt+0x4520>
cmpb   $0x0,0x2c(%esp)
jne    804d787 <__sprintf_chk@plt+0x44a7>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
sete   %al
jmp    804d7a7 <__sprintf_chk@plt+0x44c7>
mov    0x44(%esp),%esi
lea    0x1(%eax),%edx
mov    0x30(%esp),%ebx
mov    0x34(%esp),%ebp
mov    %edx,(%esi)
movzbl (%eax),%eax
mov    %eax,0x20(%esp)
jmp    804c76e <__sprintf_chk@plt+0x348e>
movb   $0x1,0x2c(%esp)
jmp    804d77b <__sprintf_chk@plt+0x449b>
mov    0x44(%esp),%eax
lea    0x2d8(%esp),%edx
call   804c640 <__sprintf_chk@plt+0x3360>
test   %eax,%eax
jne    804d70a <__sprintf_chk@plt+0x442a>
mov    $0x8052bd8,%edi
mov    $0x4,%ecx
lea    0x2d8(%esp),%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804d972 <__sprintf_chk@plt+0x4692>
mov    $0x8053440,%esi
mov    $0x8052bca,%eax
jmp    804d84d <__sprintf_chk@plt+0x456d>
lea    0x0(%esi),%esi
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804d8f5 <__sprintf_chk@plt+0x4615>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804d840 <__sprintf_chk@plt+0x4560>
jmp    804d708 <__sprintf_chk@plt+0x4428>
cmpb   $0x2e,0x2db(%esp)
sete   0x2c(%esp)
jmp    804d77b <__sprintf_chk@plt+0x449b>
movl   $0x0,0x2c(%esp)
jmp    804d471 <__sprintf_chk@plt+0x4191>
call   8048f90 <__stack_chk_fail@plt>
cmp    $0x9,%ecx
ja     804d50e <__sprintf_chk@plt+0x422e>
cmpb   $0x30,0x20(%esp)
je     804d8ad <__sprintf_chk@plt+0x45cd>
lea    0x0(%esi),%esi
jmp    804d8ed <__sprintf_chk@plt+0x460d>
lea    0x0(%esi),%esi
cmp    $0x30,%cl
jne    804d8ed <__sprintf_chk@plt+0x460d>
add    $0x1,%eax
movzbl (%eax),%ecx
movsbl %cl,%edi
sub    $0x30,%edi
cmp    $0x9,%edi
jbe    804d8a8 <__sprintf_chk@plt+0x45c8>
jmp    804d50e <__sprintf_chk@plt+0x422e>
mov    %esi,0x64(%esp)
mov    0x44(%esp),%esi
cmpl   $0x1,0x2c(%esp)
mov    %edx,0x4c(%esp)
mov    %eax,(%esi)
sbb    %eax,%eax
mov    %eax,0x20(%esp)
notl   0x20(%esp)
addl   $0x115,0x20(%esp)
jmp    804c787 <__sprintf_chk@plt+0x34a7>
add    $0x1,%edx
jmp    804d500 <__sprintf_chk@plt+0x4220>
mov    0x20(%esp),%eax
lea    0x2d7(%esp,%eax,1),%edi
cmpb   $0x53,(%edi)
je     804d97c <__sprintf_chk@plt+0x469c>
mov    $0x8053340,%esi
mov    $0x8052bcf,%eax
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
je     804d708 <__sprintf_chk@plt+0x4428>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
jne    804d90f <__sprintf_chk@plt+0x462f>
cmpl   $0x1,0x20(%esp)
movzbl 0x2d8(%esp),%edx
je     804d9e6 <__sprintf_chk@plt+0x4706>
xor    %esi,%esi
test   %dl,%dl
lea    0x2d8(%esp),%ecx
mov    %ecx,%eax
je     804cbea <__sprintf_chk@plt+0x390a>
cmp    $0x2e,%dl
je     804d9dc <__sprintf_chk@plt+0x46fc>
add    $0x1,%ecx
add    $0x1,%eax
movzbl (%eax),%edx
test   %dl,%dl
mov    %dl,(%ecx)
je     804d9b5 <__sprintf_chk@plt+0x46d5>
movzbl (%eax),%edx
jmp    804d959 <__sprintf_chk@plt+0x4679>
mov    $0x805360c,%eax
jmp    804d70a <__sprintf_chk@plt+0x442a>
movb   $0x0,(%edi)
mov    $0x8053440,%esi
mov    $0x8052bca,%eax
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
je     804d708 <__sprintf_chk@plt+0x4428>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
jne    804d989 <__sprintf_chk@plt+0x46a9>
movb   $0x53,(%edi)
jmp    804d905 <__sprintf_chk@plt+0x4625>
mov    %esi,%eax
test   %al,%al
je     804cbea <__sprintf_chk@plt+0x390a>
mov    0x44(%esp),%eax
lea    0x2d8(%esp),%edx
call   804c640 <__sprintf_chk@plt+0x3360>
test   %eax,%eax
jne    804d70a <__sprintf_chk@plt+0x442a>
jmp    804cbea <__sprintf_chk@plt+0x390a>
mov    $0x1,%esi
jmp    804d961 <__sprintf_chk@plt+0x4681>
cmp    $0x41,%dl
mov    $0x8052f80,%eax
je     804d70a <__sprintf_chk@plt+0x442a>
add    $0xc,%eax
mov    (%eax),%ecx
test   %ecx,%ecx
je     804d946 <__sprintf_chk@plt+0x4666>
cmp    %dl,(%ecx)
jne    804d9f4 <__sprintf_chk@plt+0x4714>
jmp    804d70a <__sprintf_chk@plt+0x442a>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x21c,%esp
mov    0x230(%esp),%eax
mov    %gs:0x14,%esi
mov    %esi,0x20c(%esp)
xor    %esi,%esi
mov    0x234(%esp),%ebx
mov    %eax,0x28(%esp)
mov    0x238(%esp),%eax
test   %eax,%eax
je     804e0b4 <__sprintf_chk@plt+0x4dd4>
mov    (%eax),%esi
mov    %esi,0x2c(%esp)
mov    0x4(%eax),%esi
mov    %eax,(%esp)
mov    %esi,0x24(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804e080 <__sprintf_chk@plt+0x4da0>
lea    0x0(%esi),%esi
movzbl (%ebx),%eax
lea    -0x9(%eax),%edx
cmp    $0x4,%dl
jbe    804dd48 <__sprintf_chk@plt+0x4a68>
cmp    $0x20,%al
je     804dd48 <__sprintf_chk@plt+0x4a68>
mov    $0x8052bdc,%edi
mov    $0x4,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804daf0 <__sprintf_chk@plt+0x4810>
movzbl 0x4(%ebx),%edx
lea    0x4(%ebx),%esi
mov    %esi,0x30(%esp)
test   %dl,%dl
je     804daf0 <__sprintf_chk@plt+0x4810>
mov    %esi,%ecx
mov    $0x1,%esi
jmp    804dac9 <__sprintf_chk@plt+0x47e9>
nop
cmp    $0x22,%dl
je     804dfc0 <__sprintf_chk@plt+0x4ce0>
movzbl 0x1(%ecx),%edx
add    $0x1,%esi
lea    0x1(%ecx),%edi
test   %dl,%dl
je     804daf0 <__sprintf_chk@plt+0x4810>
mov    %edi,%ecx
cmp    $0x5c,%dl
jne    804dab0 <__sprintf_chk@plt+0x47d0>
movzbl 0x1(%ecx),%edx
lea    0x1(%ecx),%edi
cmp    $0x22,%dl
jne    804dd50 <__sprintf_chk@plt+0x4a70>
mov    %edi,%ecx
movzbl 0x1(%ecx),%edx
add    $0x1,%esi
lea    0x1(%ecx),%edi
test   %dl,%dl
jne    804dac7 <__sprintf_chk@plt+0x47e7>
xchg   %ax,%ax
lea    0x144(%esp),%ecx
xor    %edi,%edi
xor    %esi,%esi
mov    %ecx,0x20(%esp)
test   %al,%al
mov    $0x80512f9,%eax
cmove  %eax,%ebx
mov    0x14(%ebp),%eax
mov    %ebx,0xac(%esp)
movl   $0x0,0xcc(%esp)
00
add    $0x76c,%eax
mov    %eax,0xc8(%esp)
mov    0x10(%ebp),%eax
add    $0x1,%eax
mov    %eax,0xd0(%esp)
mov    0xc(%ebp),%eax
mov    %eax,0xd4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,0xd8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0xdc(%esp)
mov    0x0(%ebp),%eax
movl   $0x2,0xc0(%esp)
00
mov    %eax,0xe0(%esp)
mov    0x24(%esp),%eax
mov    %eax,0xe4(%esp)
mov    0x20(%ebp),%eax
mov    %eax,0x74(%esp)
xor    %eax,%eax
movl   $0x0,0xe8(%esp,%eax,1)
00
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804db7e <__sprintf_chk@plt+0x489e>
mov    0x28(%ebp),%eax
lea    0x80(%esp),%ebx
mov    %edi,0x24(%esp)
movb   $0x0,0x104(%esp)
movb   $0x0,0x105(%esp)
mov    %eax,0x120(%esp)
mov    0x20(%ebp),%eax
xor    %ebp,%ebp
mov    %ebp,%edi
movl   $0x0,0x108(%esp)
00
movl   $0x0,0x10c(%esp)
00
mov    %eax,0x128(%esp)
mov    0x2c(%esp),%eax
movl   $0x0,0x118(%esp)
00
movl   $0x0,0x110(%esp)
00
movl   $0x0,0x114(%esp)
00
add    $0x76a700,%eax
movl   $0x0,0x11c(%esp)
00
mov    %eax,%ebp
movl   $0x10d,0x124(%esp)
00
movl   $0x0,0x12c(%esp)
00
nop
lea    0x0(%ebp,%edi,1),%eax
mov    %ebx,(%esp)
mov    %eax,0x80(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
je     804dc56 <__sprintf_chk@plt+0x4976>
mov    0x28(%eax),%ecx
test   %ecx,%ecx
je     804dc56 <__sprintf_chk@plt+0x4976>
mov    0x20(%eax),%eax
cmp    0x128(%esp),%eax
jne    804e087 <__sprintf_chk@plt+0x4da7>
add    $0x76a700,%edi
cmp    $0x163f500,%edi
jne    804dc28 <__sprintf_chk@plt+0x4948>
mov    0x24(%esp),%edi
mov    0x120(%esp),%eax
test   %eax,%eax
je     804dca4 <__sprintf_chk@plt+0x49c4>
mov    0x12c(%esp),%edx
test   %edx,%edx
je     804dca4 <__sprintf_chk@plt+0x49c4>
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804dca4 <__sprintf_chk@plt+0x49c4>
movl   $0xffffffff,0x128(%esp)
ff
movl   $0x0,0x12c(%esp)
00
lea    0xac(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <__sprintf_chk@plt+0x3410>
xor    %edx,%edx
test   %eax,%eax
jne    804dce3 <__sprintf_chk@plt+0x4a03>
cmpb   $0x0,0x104(%esp)
je     804dd60 <__sprintf_chk@plt+0x4a80>
mov    0xe4(%esp),%edx
mov    0x28(%esp),%ebx
mov    0xe0(%esp),%eax
mov    %edx,0x4(%ebx)
mov    $0x1,%edx
mov    %eax,(%ebx)
mov    %esi,%eax
test   %al,%al
je     804dd15 <__sprintf_chk@plt+0x4a35>
test   %edi,%edi
movzbl %dl,%ebx
je     804e0c7 <__sprintf_chk@plt+0x4de7>
movl   $0x1,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x8052bb4,(%esp)
call   8049140 <setenv@plt>
xor    %edx,%edx
test   %eax,%eax
sete   %dl
and    %ebx,%edx
cmp    0x20(%esp),%edi
mov    %edx,%ebx
je     804dd25 <__sprintf_chk@plt+0x4a45>
mov    %edi,(%esp)
call   8048ee0 <free@plt>
mov    0x20c(%esp),%esi
xor    %gs:0x14,%esi
mov    %ebx,%eax
jne    804e503 <__sprintf_chk@plt+0x5223>
add    $0x21c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x1,%ebx
jmp    804da70 <__sprintf_chk@plt+0x4790>
cmp    $0x5c,%dl
jne    804daf0 <__sprintf_chk@plt+0x4810>
mov    %edi,%ecx
jmp    804dae0 <__sprintf_chk@plt+0x4800>
mov    0x118(%esp),%eax
mov    0x10c(%esp),%ecx
mov    %eax,0x24(%esp)
mov    0x108(%esp),%eax
mov    0x24(%esp),%ebp
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
or     %eax,%ebp
mov    0x110(%esp),%eax
or     %ecx,%ebp
mov    %eax,0x2c(%esp)
mov    %eax,%ecx
mov    0x114(%esp),%eax
add    0x11c(%esp),%ecx
or     %ebp,%eax
or     %ecx,%eax
cmp    $0x1,%eax
ja     804dce3 <__sprintf_chk@plt+0x4a03>
mov    0xc8(%esp),%eax
mov    0xcc(%esp),%edx
test   %eax,%eax
js     804e0df <__sprintf_chk@plt+0x4dff>
cmp    $0x2,%edx
je     804e4c2 <__sprintf_chk@plt+0x51e2>
sub    $0x76c,%eax
mov    %eax,0x68(%esp)
mov    0xd0(%esp),%eax
sub    $0x1,%eax
mov    %eax,0x64(%esp)
mov    0xd4(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x24(%esp),%eax
test   %eax,%eax
jne    804e469 <__sprintf_chk@plt+0x5189>
cmpb   $0x0,0x105(%esp)
je     804de1c <__sprintf_chk@plt+0x4b3c>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    804de1c <__sprintf_chk@plt+0x4b3c>
mov    0x34(%esp),%eax
test   %eax,%eax
je     804e469 <__sprintf_chk@plt+0x5189>
movl   $0x0,0x54(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0xe4(%esp)
00
test   %ebp,%ebp
je     804de4b <__sprintf_chk@plt+0x4b6b>
movl   $0xffffffff,0x74(%esp)
mov    0x2c(%esp),%ebp
test   %ebp,%ebp
je     804de5e <__sprintf_chk@plt+0x4b7e>
mov    0xb8(%esp),%eax
mov    %eax,0x74(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x80(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x84(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x88(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x8c(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x90(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x94(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x98(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x9c(%esp)
mov    0x74(%esp),%eax
mov    %eax,0xa0(%esp)
mov    0x78(%esp),%eax
mov    %eax,0xa4(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0xa8(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <mktime@plt>
lea    0x54(%esp),%edx
mov    %eax,%ecx
mov    %eax,%ebp
mov    %ebx,%eax
call   804c510 <__sprintf_chk@plt+0x3230>
test   %al,%al
jne    804e187 <__sprintf_chk@plt+0x4ea7>
mov    0x11c(%esp),%ecx
xor    %edx,%edx
test   %ecx,%ecx
je     804dce3 <__sprintf_chk@plt+0x4a03>
mov    0xbc(%esp),%eax
mov    $0x88888889,%edx
mov    %eax,%ecx
mov    %eax,0x24(%esp)
sar    $0x1f,%eax
xor    %eax,%ecx
sub    %eax,%ecx
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
lea    (%edx,%ecx,1),%ebp
sar    $0x5,%ebp
sub    %eax,%ebp
imul   $0x3c,%ebp,%eax
sub    %eax,%ecx
mov    %esi,%eax
test   %al,%al
mov    %ecx,0x2c(%esp)
je     804e4f3 <__sprintf_chk@plt+0x5213>
mov    0x24(%esp),%edx
mov    $0x8053abb,%eax
mov    0x2c(%esp),%ecx
mov    %ebp,0x14(%esp)
lea    0x1a8(%esp),%ebp
movl   $0x8052be1,0xc(%esp)
test   %edx,%edx
mov    $0x8053aba,%edx
cmovns %edx,%eax
mov    %ecx,0x18(%esp)
mov    %eax,0x10(%esp)
movl   $0x13,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   80492e0 <__sprintf_chk@plt>
movl   $0x1,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x8052bb4,(%esp)
call   8049140 <setenv@plt>
test   %eax,%eax
je     804e0e6 <__sprintf_chk@plt+0x4e06>
xor    %edx,%edx
jmp    804dce3 <__sprintf_chk@plt+0x4a03>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x64,%esi
lea    0x144(%esp),%eax
seta   0x34(%esp)
mov    %eax,0x20(%esp)
call   804c570 <__sprintf_chk@plt+0x3290>
lea    0x1a8(%esp),%edx
cmpb   $0x0,0x34(%esp)
mov    %eax,%edi
jne    804e45a <__sprintf_chk@plt+0x517a>
movzbl 0x4(%ebx),%eax
mov    %edx,%ecx
cmp    $0x22,%al
je     804e022 <__sprintf_chk@plt+0x4d42>
mov    0x30(%esp),%ebx
lea    0x0(%esi),%esi
add    $0x1,%ecx
cmp    $0x5c,%al
sete   %al
movzbl %al,%eax
add    %ebx,%eax
movzbl (%eax),%ebx
mov    %bl,-0x1(%ecx)
lea    0x1(%eax),%ebx
movzbl 0x1(%eax),%eax
cmp    $0x22,%al
jne    804e000 <__sprintf_chk@plt+0x4d20>
mov    %ebx,0x30(%esp)
movb   $0x0,(%ecx)
mov    %edx,0x4(%esp)
movl   $0x1,0x8(%esp)
movl   $0x8052bb4,(%esp)
mov    %edx,0x38(%esp)
call   8049140 <setenv@plt>
mov    0x38(%esp),%edx
cmpb   $0x0,0x34(%esp)
jne    804e445 <__sprintf_chk@plt+0x5165>
xor    %edx,%edx
test   %eax,%eax
jne    804dd15 <__sprintf_chk@plt+0x4a35>
mov    0x30(%esp),%ebx
xchg   %ax,%ax
add    $0x1,%ebx
movzbl (%ebx),%eax
lea    -0x9(%eax),%edx
cmp    $0x4,%dl
jbe    804e060 <__sprintf_chk@plt+0x4d80>
cmp    $0x20,%al
je     804e060 <__sprintf_chk@plt+0x4d80>
mov    $0x1,%esi
jmp    804daff <__sprintf_chk@plt+0x481f>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
jmp    804dd25 <__sprintf_chk@plt+0x4a45>
mov    0x24(%esp),%edi
mov    %ecx,0x12c(%esp)
movl   $0x10d,0x130(%esp)
00
mov    %eax,0x134(%esp)
movl   $0x0,0x138(%esp)
00
jmp    804dc68 <__sprintf_chk@plt+0x4988>
lea    0x4c(%esp),%esi
mov    %esi,(%esp)
call   804c270 <__sprintf_chk@plt+0x2f90>
mov    %esi,%eax
jmp    804da4b <__sprintf_chk@plt+0x476b>
movl   $0x8052bb4,(%esp)
call   8048e90 <unsetenv@plt>
xor    %edx,%edx
test   %eax,%eax
sete   %dl
jmp    804dd13 <__sprintf_chk@plt+0x4a33>
neg    %eax
jmp    804ddd0 <__sprintf_chk@plt+0x4af0>
mov    0x80(%esp),%eax
mov    $0x1,%esi
mov    %eax,0x54(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x58(%esp)
mov    0x88(%esp),%eax
mov    %eax,0x5c(%esp)
mov    0x8c(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x90(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x68(%esp)
mov    0x98(%esp),%eax
mov    %eax,0x6c(%esp)
mov    0x9c(%esp),%eax
mov    %eax,0x70(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x74(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x78(%esp)
mov    0xa8(%esp),%eax
mov    %eax,0x7c(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <mktime@plt>
lea    0x54(%esp),%edx
mov    %eax,%ecx
mov    %eax,%ebp
mov    %ebx,%eax
call   804c510 <__sprintf_chk@plt+0x3230>
test   %al,%al
je     804dfb2 <__sprintf_chk@plt+0x4cd2>
mov    0x10c(%esp),%ecx
test   %ecx,%ecx
je     804e226 <__sprintf_chk@plt+0x4f46>
mov    0x108(%esp),%edx
test   %edx,%edx
jne    804e226 <__sprintf_chk@plt+0x4f46>
mov    0xb4(%esp),%ebx
mov    $0x92492493,%edx
mov    0x6c(%esp),%ebp
mov    0x60(%esp),%eax
mov    %ebx,%ecx
sub    %ebp,%ecx
add    $0x7,%ecx
mov    %eax,0x24(%esp)
mov    %ecx,%eax
imul   %edx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    %ecx,%eax
mov    0xb0(%esp),%ecx
sub    %edx,%eax
xor    %edx,%edx
test   %ecx,%ecx
jle    804e1f6 <__sprintf_chk@plt+0x4f16>
xor    %edx,%edx
cmp    %ebp,%ebx
setne  %dl
sub    %edx,%ecx
lea    (%eax,%ecx,8),%eax
sub    %ecx,%eax
add    0x24(%esp),%eax
movl   $0xffffffff,0x74(%esp)
mov    %eax,0x60(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <mktime@plt>
xor    %edx,%edx
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804dce3 <__sprintf_chk@plt+0x4a03>
mov    0xec(%esp),%edx
mov    0xe8(%esp),%ebx
mov    0xf0(%esp),%ecx
mov    %edx,%eax
or     %ebx,%eax
or     %ecx,%eax
je     804e2fe <__sprintf_chk@plt+0x501e>
mov    0x68(%esp),%eax
mov    %eax,0x34(%esp)
add    %ebx,%eax
mov    %eax,0x24(%esp)
mov    0x64(%esp),%eax
lea    (%edx,%eax,1),%ebp
mov    %ebp,0x2c(%esp)
mov    0x60(%esp),%ebp
add    %ecx,%ebp
cmp    0x2c(%esp),%eax
setg   0x30(%esp)
shr    $0x1f,%edx
xor    %dl,0x30(%esp)
cmp    %ebp,0x60(%esp)
setg   %al
shr    $0x1f,%ecx
xor    %ecx,%eax
movzbl 0x30(%esp),%ecx
or     %al,%cl
jne    804dfb2 <__sprintf_chk@plt+0x4cd2>
mov    0x24(%esp),%eax
cmp    %eax,0x34(%esp)
setg   %al
shr    $0x1f,%ebx
cmp    %bl,%al
jne    804dfb2 <__sprintf_chk@plt+0x4cd2>
mov    0x24(%esp),%eax
mov    %ebp,0x60(%esp)
mov    %eax,0x68(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x88(%esp),%eax
mov    %eax,0x5c(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x58(%esp)
mov    0x80(%esp),%eax
mov    %eax,0x54(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x74(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <mktime@plt>
xor    %edx,%edx
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804dce3 <__sprintf_chk@plt+0x4a03>
mov    0x11c(%esp),%eax
test   %eax,%eax
je     804e32d <__sprintf_chk@plt+0x504d>
imul   $0x3c,0xbc(%esp),%ecx
mov    %ebp,%eax
sub    0x78(%esp),%ecx
sub    %ecx,%eax
cmp    %eax,%ebp
setl   %bl
xor    %edx,%edx
shr    $0x1f,%ecx
cmp    %cl,%bl
jne    804dce3 <__sprintf_chk@plt+0x4a03>
mov    %eax,%ebp
mov    0xe4(%esp),%ecx
mov    $0x44b82fa1,%eax
add    0x100(%esp),%ecx
imul   %ecx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x1c,%edx
sub    %eax,%edx
mov    %ecx,%eax
imul   $0x3b9aca00,%edx,%edx
sub    %edx,%eax
add    $0x3b9aca00,%eax
mov    %eax,%edx
mov    $0x44b82fa1,%eax
mov    %edx,0x24(%esp)
imul   %edx
mov    %edx,%ebx
mov    0x24(%esp),%edx
sar    $0x1c,%ebx
mov    %edx,%eax
sar    $0x1f,%eax
sub    %eax,%ebx
mov    %edx,%eax
imul   $0x3b9aca00,%ebx,%ebx
imul   $0x3c,0xf8(%esp),%edx
sub    %ebx,%eax
mov    %eax,%ebx
imul   $0xe10,0xf4(%esp),%eax
00
sub    %ebx,%ecx
mov    %edx,0x38(%esp)
mov    %eax,0x3c(%esp)
add    %ebp,%eax
mov    %eax,0x2c(%esp)
add    %edx,%eax
mov    0xfc(%esp),%edx
mov    %eax,0x30(%esp)
add    %eax,%edx
mov    $0x44b82fa1,%eax
mov    %edx,0x24(%esp)
imul   %ecx
mov    0x38(%esp),%eax
sar    $0x1f,%ecx
sar    $0x1c,%edx
sub    %ecx,%edx
mov    0x24(%esp),%ecx
add    %edx,%ecx
mov    %ecx,0x34(%esp)
mov    0x30(%esp),%ecx
cmp    0x2c(%esp),%ecx
setl   %cl
shr    $0x1f,%eax
xor    %eax,%ecx
cmp    0x2c(%esp),%ebp
mov    0x3c(%esp),%ebp
setg   %al
shr    $0x1f,%ebp
xor    %ebp,%eax
mov    0xfc(%esp),%ebp
or     %eax,%ecx
mov    0x30(%esp),%eax
cmp    %eax,0x24(%esp)
setl   %al
shr    $0x1f,%ebp
xor    %ebp,%eax
or     %al,%cl
jne    804dfb2 <__sprintf_chk@plt+0x4cd2>
mov    0x24(%esp),%eax
cmp    %eax,0x34(%esp)
setl   %al
shr    $0x1f,%edx
cmp    %dl,%al
jne    804dfb2 <__sprintf_chk@plt+0x4cd2>
mov    0x28(%esp),%eax
mov    $0x1,%edx
mov    0x34(%esp),%ecx
mov    %ebx,0x4(%eax)
mov    %ecx,(%eax)
jmp    804dce3 <__sprintf_chk@plt+0x4a03>
mov    %edx,(%esp)
mov    %eax,0x34(%esp)
call   8048ee0 <free@plt>
mov    0x34(%esp),%eax
jmp    804e050 <__sprintf_chk@plt+0x4d70>
mov    %esi,(%esp)
call   8050590 <__sprintf_chk@plt+0x72b0>
mov    %eax,%edx
jmp    804dfec <__sprintf_chk@plt+0x4d0c>
mov    0xc0(%esp),%edx
mov    0xd8(%esp),%ecx
test   %edx,%edx
je     804e4a6 <__sprintf_chk@plt+0x51c6>
cmp    $0x1,%edx
je     804e4d8 <__sprintf_chk@plt+0x51f8>
cmp    $0x17,%ecx
mov    %ecx,%edx
ja     804e4b3 <__sprintf_chk@plt+0x51d3>
mov    0xdc(%esp),%eax
mov    %edx,0x5c(%esp)
mov    %eax,0x58(%esp)
mov    0xe0(%esp),%eax
mov    %eax,0x54(%esp)
jmp    804de3f <__sprintf_chk@plt+0x4b5f>
lea    -0x1(%ecx),%eax
cmp    $0xa,%eax
jbe    804e4ef <__sprintf_chk@plt+0x520f>
cmp    $0xc,%ecx
je     804e487 <__sprintf_chk@plt+0x51a7>
movl   $0xffffffff,0x5c(%esp)
xor    %edx,%edx
jmp    804dce3 <__sprintf_chk@plt+0x4a03>
cmp    $0x44,%eax
mov    $0x7d0,%dx
mov    $0x76c,%ecx
cmovg  %ecx,%edx
add    %edx,%eax
jmp    804ddd0 <__sprintf_chk@plt+0x4af0>
lea    -0x1(%ecx),%eax
cmp    $0xa,%eax
lea    0xc(%ecx),%edx
jbe    804e487 <__sprintf_chk@plt+0x51a7>
cmp    $0xc,%ecx
jne    804e4b3 <__sprintf_chk@plt+0x51d3>
mov    $0xc,%edx
jmp    804e487 <__sprintf_chk@plt+0x51a7>
mov    %ecx,%edx
jmp    804e487 <__sprintf_chk@plt+0x51a7>
mov    0x20(%esp),%eax
call   804c570 <__sprintf_chk@plt+0x3290>
mov    %eax,%edi
jmp    804df48 <__sprintf_chk@plt+0x4c68>
call   8048f90 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x24,%esp
cmp    $0x1,%ecx
je     804e568 <__sprintf_chk@plt+0x5288>
jb     804e540 <__sprintf_chk@plt+0x5260>
cmp    $0x2,%ecx
jne    804e538 <__sprintf_chk@plt+0x5258>
testb  $0x4,0x30(%esp)
jne    804e588 <__sprintf_chk@plt+0x52a8>
mov    $0x1,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
call   8049270 <abort@plt>
lea    0x0(%esi),%esi
lea    0x1c(%esp),%esi
mov    %esi,(%esp)
call   8048f30 <time@plt>
mov    %esi,(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
je     804e5a0 <__sprintf_chk@plt+0x52c0>
mov    0x14(%eax),%eax
mov    %eax,(%ebx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    (%edx),%ecx
mov    %ecx,(%eax)
xor    %eax,%eax
cmpl   $0x44,(%edx)
jg     804e52f <__sprintf_chk@plt+0x524f>
testb  $0x10,0x30(%esp)
jne    804e52a <__sprintf_chk@plt+0x524a>
add    $0x64,%ecx
mov    %ecx,(%ebx)
jmp    804e52f <__sprintf_chk@plt+0x524f>
lea    0x0(%esi,%eiz,1),%esi
imul   $0x64,(%edx),%eax
add    0x4(%edx),%eax
sub    $0x76c,%eax
mov    %eax,(%ebx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    $0x1,%al
jmp    804e52f <__sprintf_chk@plt+0x524f>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc4(%esp),%ebx
mov    0xc0(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x18(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x9c(%esp)
xor    %eax,%eax
call   8049120 <strlen@plt>
mov    0xc8(%esp),%edx
and    $0x8,%edx
mov    %eax,%ebp
je     804e848 <__sprintf_chk@plt+0x5568>
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x1c(%esp)
call   8049100 <strchr@plt>
mov    0x1c(%esp),%edx
mov    %eax,%esi
mov    %eax,%edi
sub    %ebx,%esi
test   %eax,%eax
cmove  %ebp,%esi
mov    %esi,%eax
and    $0xfffffffd,%eax
cmp    $0x8,%eax
je     804e648 <__sprintf_chk@plt+0x5368>
cmp    $0xc,%esi
je     804e648 <__sprintf_chk@plt+0x5368>
xor    %eax,%eax
mov    0x9c(%esp),%edi
xor    %gs:0x14,%edi
jne    804e8d2 <__sprintf_chk@plt+0x55f2>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   %edi,%edi
je     804e657 <__sprintf_chk@plt+0x5377>
test   %edx,%edx
je     804e627 <__sprintf_chk@plt+0x5347>
sub    %esi,%ebp
cmp    $0x3,%ebp
jne    804e627 <__sprintf_chk@plt+0x5347>
test   %esi,%esi
je     804e8bb <__sprintf_chk@plt+0x55db>
movsbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%eax
ja     804e627 <__sprintf_chk@plt+0x5347>
lea    0x1(%ebx),%eax
lea    (%ebx,%esi,1),%ecx
jmp    804e686 <__sprintf_chk@plt+0x53a6>
lea    0x0(%esi),%esi
movsbl (%eax),%edx
add    $0x1,%eax
sub    $0x30,%edx
cmp    $0x9,%edx
ja     804e627 <__sprintf_chk@plt+0x5347>
cmp    %ecx,%eax
jne    804e678 <__sprintf_chk@plt+0x5398>
shr    %esi
je     804e8bb <__sprintf_chk@plt+0x55db>
xor    %eax,%eax
lea    0x60(%esp),%ebp
movsbl (%ebx,%eax,2),%edx
lea    -0xf0(%edx,%edx,4),%ecx
movsbl 0x1(%ebx,%eax,2),%edx
lea    -0x30(%edx,%ecx,2),%edx
mov    %edx,0x0(%ebp,%eax,4)
add    $0x1,%eax
cmp    %esi,%eax
jne    804e698 <__sprintf_chk@plt+0x53b8>
testb  $0x1,0xc8(%esp)
mov    %ebp,%eax
lea    -0x4(%esi),%ecx
jne    804e870 <__sprintf_chk@plt+0x5590>
mov    (%eax),%esi
testb  $0x2,0xc8(%esp)
lea    -0x1(%esi),%edx
mov    %edx,0x44(%esp)
mov    0x4(%eax),%edx
mov    %edx,0x40(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x3c(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x38(%esp)
jne    804e898 <__sprintf_chk@plt+0x55b8>
test   %edi,%edi
je     804e8c5 <__sprintf_chk@plt+0x55e5>
movsbl 0x1(%edi),%eax
sub    $0x30,%eax
cmp    $0x9,%eax
ja     804e627 <__sprintf_chk@plt+0x5347>
movsbl 0x2(%edi),%edx
lea    -0x30(%edx),%ecx
cmp    $0x9,%ecx
ja     804e627 <__sprintf_chk@plt+0x5347>
lea    (%eax,%eax,4),%eax
lea    -0x30(%edx,%eax,2),%eax
mov    %eax,0x34(%esp)
mov    0x34(%esp),%eax
mov    %ebp,(%esp)
movl   $0xffffffff,0x80(%esp)
ff
mov    %eax,0x60(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x68(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x6c(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x70(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x74(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x78(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x7c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x84(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x88(%esp)
call   8048f80 <mktime@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x2c(%esp)
je     804e851 <__sprintf_chk@plt+0x5571>
mov    0x10(%ebp),%edx
mov    0x14(%ebp),%eax
xor    0x48(%esp),%eax
xor    0x44(%esp),%edx
mov    0x34(%esp),%ecx
or     %eax,%edx
mov    0xc(%ebp),%eax
xor    0x40(%esp),%eax
or     %eax,%edx
mov    0x8(%ebp),%eax
xor    0x3c(%esp),%eax
or     %eax,%edx
mov    0x4(%ebp),%eax
xor    0x38(%esp),%eax
or     %eax,%edx
mov    0x0(%ebp),%eax
xor    %ecx,%eax
or     %eax,%edx
je     804e830 <__sprintf_chk@plt+0x5550>
cmp    $0x3c,%ecx
jne    804e627 <__sprintf_chk@plt+0x5347>
mov    %ebx,0x4(%esp)
lea    0x8c(%esp),%ebx
movl   $0x10,0x8(%esp)
mov    %ebx,(%esp)
call   8049130 <__stpcpy_chk@plt>
mov    $0x3935,%edx
mov    %dx,-0x2(%eax)
movb   $0x0,(%eax)
mov    0xc8(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   804e5b0 <__sprintf_chk@plt+0x52d0>
test   %al,%al
je     804e629 <__sprintf_chk@plt+0x5349>
lea    0x0(%esi),%esi
mov    0x2c(%esp),%eax
mov    0x18(%esp),%edi
mov    %eax,(%edi)
mov    $0x1,%eax
jmp    804e629 <__sprintf_chk@plt+0x5349>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%esi
xor    %edi,%edi
jmp    804e618 <__sprintf_chk@plt+0x5338>
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <localtime@plt>
test   %eax,%eax
mov    %eax,%ebp
jne    804e79f <__sprintf_chk@plt+0x54bf>
jmp    804e627 <__sprintf_chk@plt+0x5347>
lea    0x0(%esi,%eiz,1),%esi
mov    0xc8(%esp),%eax
mov    %ebp,%edx
mov    %eax,(%esp)
lea    0x48(%esp),%eax
call   804e510 <__sprintf_chk@plt+0x5230>
test   %eax,%eax
jne    804e627 <__sprintf_chk@plt+0x5347>
lea    -0x10(%ebp,%esi,4),%eax
xor    %ecx,%ecx
jmp    804e6ca <__sprintf_chk@plt+0x53ea>
lea    0x10(%eax),%edx
mov    0xc8(%esp),%eax
mov    %eax,(%esp)
lea    0x48(%esp),%eax
call   804e510 <__sprintf_chk@plt+0x5230>
test   %eax,%eax
je     804e6f6 <__sprintf_chk@plt+0x5416>
jmp    804e627 <__sprintf_chk@plt+0x5347>
lea    0x60(%esp),%ebp
nop
jmp    804e6b7 <__sprintf_chk@plt+0x53d7>
movl   $0x0,0x34(%esp)
jmp    804e729 <__sprintf_chk@plt+0x5449>
call   8048f90 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804e963 <__sprintf_chk@plt+0x5683>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049200 <strrchr@plt>
test   %eax,%eax
je     804e94f <__sprintf_chk@plt+0x566f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804e94f <__sprintf_chk@plt+0x566f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8053ab0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804e94f <__sprintf_chk@plt+0x566f>
mov    $0x3,%ecx
mov    $0x8053ab8,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804e94f <__sprintf_chk@plt+0x566f>
lea    0x4(%eax),%ebx
mov    %ebx,0x80571a0
mov    %ebx,0x8057214
mov    %ebx,0x80571c0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80571a4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8053a78,(%esp)
mov    %eax,0xc(%esp)
call   8048fe0 <fwrite@plt>
call   8049270 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804e9b1 <__sprintf_chk@plt+0x56d1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049270 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804e9f0 <__sprintf_chk@plt+0x5710>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8050a60 <__sprintf_chk@plt+0x7780>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804ea58 <__sprintf_chk@plt+0x5778>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804ea40 <__sprintf_chk@plt+0x5760>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x2d,0x3(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x38,0x4(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x0,0x5(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x60,(%esi)
mov    $0x8053ac9,%eax
mov    $0x8053abc,%edx
cmovne %edx,%eax
jmp    804e9e8 <__sprintf_chk@plt+0x5708>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8052bdf,%eax
cmp    $0x7,%edi
mov    $0x8053ac3,%edx
cmovne %edx,%eax
jmp    804e9e8 <__sprintf_chk@plt+0x5708>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804ea40 <__sprintf_chk@plt+0x5760>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x31,0x2(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x38,0x3(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x30,0x4(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x33,0x5(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x30,0x6(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x0,0x7(%eax)
jne    804ea40 <__sprintf_chk@plt+0x5760>
cmpb   $0x60,(%esi)
mov    $0x8053ac5,%eax
mov    $0x8053ac0,%edx
cmovne %edx,%eax
jmp    804e9e8 <__sprintf_chk@plt+0x5708>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048ff0 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804f388 <__sprintf_chk@plt+0x60a8>
mov    0x94(%esp),%eax
jmp    *0x8053b20(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804f190 <__sprintf_chk@plt+0x5eb0>
test   %al,%al
je     804f1a3 <__sprintf_chk@plt+0x5ec3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804f178 <__sprintf_chk@plt+0x5e98>
cmpb   $0x0,0x58(%esp)
je     804f178 <__sprintf_chk@plt+0x5e98>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804f178 <__sprintf_chk@plt+0x5e98>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048f50 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804f210 <__sprintf_chk@plt+0x5f30>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804ef28 <__sprintf_chk@plt+0x5c48>
movzbl %bl,%eax
jmp    *0x8053b44(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804ed68 <__sprintf_chk@plt+0x5a88>
cmpl   $0x3,0x94(%esp)
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
testb  $0x4,0x98(%esp)
je     804ecc8 <__sprintf_chk@plt+0x59e8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804ecc8 <__sprintf_chk@plt+0x59e8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804ecc8 <__sprintf_chk@plt+0x59e8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804ecc8 <__sprintf_chk@plt+0x59e8>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmp    %edi,%ebp
jae    804ec8e <__sprintf_chk@plt+0x59ae>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804ec9e <__sprintf_chk@plt+0x59be>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804ecae <__sprintf_chk@plt+0x59ce>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804ecbe <__sprintf_chk@plt+0x59de>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804ecd6 <__sprintf_chk@plt+0x59f6>
cmpb   $0x0,0x5a(%esp)
jne    804ecfb <__sprintf_chk@plt+0x5a1b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804ecfb <__sprintf_chk@plt+0x5a1b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804ed02 <__sprintf_chk@plt+0x5a22>
cmpb   $0x0,0x24(%esp)
je     804ed18 <__sprintf_chk@plt+0x5a38>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmp    %edi,%ebp
jae    804ed15 <__sprintf_chk@plt+0x5a35>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804ed26 <__sprintf_chk@plt+0x5a46>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804eb68 <__sprintf_chk@plt+0x5888>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804f378 <__sprintf_chk@plt+0x6098>
test   %al,%al
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
test   %esi,%esi
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
cmpl   $0x2,0x94(%esp)
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
nop
cmpb   $0x0,0x2f(%esp)
je     804ecc8 <__sprintf_chk@plt+0x59e8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804f4a2 <__sprintf_chk@plt+0x61c2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804f3eb <__sprintf_chk@plt+0x610b>
cmpb   $0x0,0x58(%esp)
je     804ecc8 <__sprintf_chk@plt+0x59e8>
mov    %eax,%ebx
jmp    804ed02 <__sprintf_chk@plt+0x5a22>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804edf3 <__sprintf_chk@plt+0x5b13>
nop
mov    $0x66,%eax
jmp    804edf3 <__sprintf_chk@plt+0x5b13>
nop
mov    $0x76,%eax
jmp    804edf3 <__sprintf_chk@plt+0x5b13>
nop
mov    $0x6e,%eax
jmp    804ede5 <__sprintf_chk@plt+0x5b05>
nop
mov    $0x74,%eax
jmp    804ede5 <__sprintf_chk@plt+0x5b05>
nop
cmpb   $0x0,0x58(%esp)
je     804f360 <__sprintf_chk@plt+0x6080>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmp    %edi,%ebp
jae    804ee52 <__sprintf_chk@plt+0x5b72>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804ee98 <__sprintf_chk@plt+0x5bb8>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804ee98 <__sprintf_chk@plt+0x5bb8>
cmp    %eax,%edi
ja     804f400 <__sprintf_chk@plt+0x6120>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804ee8e <__sprintf_chk@plt+0x5bae>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804ecd6 <__sprintf_chk@plt+0x59f6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804edf3 <__sprintf_chk@plt+0x5b13>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804eece <__sprintf_chk@plt+0x5bee>
cmpb   $0x0,0x2f(%esp)
je     804eece <__sprintf_chk@plt+0x5bee>
test   %dl,%dl
jne    804ed18 <__sprintf_chk@plt+0x5a38>
mov    %ebx,%eax
jmp    804ede5 <__sprintf_chk@plt+0x5b05>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804ecc8 <__sprintf_chk@plt+0x59e8>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmp    %edi,%ebp
jae    804eefd <__sprintf_chk@plt+0x5c1d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804ef0d <__sprintf_chk@plt+0x5c2d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804ef1d <__sprintf_chk@plt+0x5c3d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804ecc8 <__sprintf_chk@plt+0x59e8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804f220 <__sprintf_chk@plt+0x5f40>
call   80492c0 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804ecc8 <__sprintf_chk@plt+0x59e8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804efd4 <__sprintf_chk@plt+0x5cf4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmp    %edi,%ebp
jae    804ef83 <__sprintf_chk@plt+0x5ca3>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804ef96 <__sprintf_chk@plt+0x5cb6>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804efac <__sprintf_chk@plt+0x5ccc>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804ed1b <__sprintf_chk@plt+0x5a3b>
cmp    %edi,%ebp
jae    804efc9 <__sprintf_chk@plt+0x5ce9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804ef70 <__sprintf_chk@plt+0x5c90>
cmpb   $0x0,0x24(%esp)
je     804efb5 <__sprintf_chk@plt+0x5cd5>
cmp    %edi,%ebp
jae    804efe7 <__sprintf_chk@plt+0x5d07>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804efb5 <__sprintf_chk@plt+0x5cd5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804f4a7 <__sprintf_chk@plt+0x61c7>
test   %edi,%edi
je     804f3ad <__sprintf_chk@plt+0x60cd>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052bdf,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052bdf,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804eb48 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi,%eiz,1),%esi
je     804f0bc <__sprintf_chk@plt+0x5ddc>
mov    0x94(%esp),%edx
mov    $0x8053acd,%eax
call   804e9c0 <__sprintf_chk@plt+0x56e0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x8053ac3,%eax
call   804e9c0 <__sprintf_chk@plt+0x56e0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804f0ea <__sprintf_chk@plt+0x5e0a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804f0ea <__sprintf_chk@plt+0x5e0a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804f0df <__sprintf_chk@plt+0x5dff>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804f0d8 <__sprintf_chk@plt+0x5df8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049120 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8053ac3,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804eb48 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804f4c3 <__sprintf_chk@plt+0x61e3>
test   %edi,%edi
je     804f3cc <__sprintf_chk@plt+0x60ec>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8053ac3,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804ec00 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804eb88 <__sprintf_chk@plt+0x58a8>
test   %ebp,%ebp
jne    804f1bc <__sprintf_chk@plt+0x5edc>
cmpl   $0x2,0x94(%esp)
jne    804f1bc <__sprintf_chk@plt+0x5edc>
cmpb   $0x0,0x2f(%esp)
jne    804ed78 <__sprintf_chk@plt+0x5a98>
cmpb   $0x0,0x2f(%esp)
jne    804f1f2 <__sprintf_chk@plt+0x5f12>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804f1f2 <__sprintf_chk@plt+0x5f12>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804f1f2 <__sprintf_chk@plt+0x5f12>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804f1e7 <__sprintf_chk@plt+0x5f07>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804f1e0 <__sprintf_chk@plt+0x5f00>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804edc2 <__sprintf_chk@plt+0x5ae2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804edc2 <__sprintf_chk@plt+0x5ae2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804ec00 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804f38d <__sprintf_chk@plt+0x60ad>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049020 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804f40d <__sprintf_chk@plt+0x612d>
cmp    $0xffffffff,%eax
je     804f428 <__sprintf_chk@plt+0x6148>
cmp    $0xfffffffe,%eax
je     804f443 <__sprintf_chk@plt+0x6163>
cmpb   $0x0,0x2f(%esp)
je     804f2ef <__sprintf_chk@plt+0x600f>
cmpl   $0x2,0x94(%esp)
jne    804f2ef <__sprintf_chk@plt+0x600f>
cmp    $0x1,%eax
je     804f2ef <__sprintf_chk@plt+0x600f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804f2e8 <__sprintf_chk@plt+0x6008>
movzbl %al,%eax
jmp    *0x8053d40(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804f2d0 <__sprintf_chk@plt+0x5ff0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048f00 <mbsinit@plt>
test   %eax,%eax
je     804f261 <__sprintf_chk@plt+0x5f81>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804ef53 <__sprintf_chk@plt+0x5c73>
and    0x58(%esp),%dl
jmp    804ef5d <__sprintf_chk@plt+0x5c7d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804ed78 <__sprintf_chk@plt+0x5a98>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804ecc8 <__sprintf_chk@plt+0x59e8>
add    $0x1,%esi
jmp    804eb68 <__sprintf_chk@plt+0x5888>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804ed49 <__sprintf_chk@plt+0x5a69>
call   8049270 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049120 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804f23e <__sprintf_chk@plt+0x5f5e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052bdf,0x3c(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8053ac3,0x3c(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
cmpb   $0x0,0x2f(%esp)
je     804edf3 <__sprintf_chk@plt+0x5b13>
jmp    804ed78 <__sprintf_chk@plt+0x5a98>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804ee7e <__sprintf_chk@plt+0x5b9e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804f335 <__sprintf_chk@plt+0x6055>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804f335 <__sprintf_chk@plt+0x6055>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804f498 <__sprintf_chk@plt+0x61b8>
cmpb   $0x0,(%eax)
je     804f498 <__sprintf_chk@plt+0x61b8>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804f486 <__sprintf_chk@plt+0x61a6>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804f490 <__sprintf_chk@plt+0x61b0>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804f480 <__sprintf_chk@plt+0x61a0>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804f335 <__sprintf_chk@plt+0x6055>
call   8048f90 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052bdf,0x3c(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8053ac3,0x3c(%esp)
jmp    804eb48 <__sprintf_chk@plt+0x5868>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049180 <__errno_location@plt>
test   %edi,%edi
mov    0x8057190,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804f66c <__sprintf_chk@plt+0x638c>
cmp    0x805719c,%edi
jb     804f578 <__sprintf_chk@plt+0x6298>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804f671 <__sprintf_chk@plt+0x6391>
cmp    $0x8057194,%esi
lea    0x0(,%ebp,8),%eax
je     804f640 <__sprintf_chk@plt+0x6360>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8050600 <__sprintf_chk@plt+0x7320>
mov    %eax,%esi
mov    %eax,0x8057190
mov    0x805719c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049160 <memset@plt>
mov    %ebp,0x805719c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
cmp    %eax,%ebp
ja     804f627 <__sprintf_chk@plt+0x6347>
lea    0x1(%eax),%ebp
cmp    $0x8057220,%esi
mov    %ebp,(%edi)
je     804f5e2 <__sprintf_chk@plt+0x6302>
mov    %esi,(%esp)
call   8048ee0 <free@plt>
mov    %ebp,(%esp)
call   8050590 <__sprintf_chk@plt+0x72b0>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8050600 <__sprintf_chk@plt+0x7320>
mov    0x8057198,%edx
mov    %eax,%esi
mov    %eax,0x8057190
mov    0x8057194,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804f54f <__sprintf_chk@plt+0x626f>
call   8049270 <abort@plt>
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049180 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8057320,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   80507a0 <__sprintf_chk@plt+0x74c0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8057320,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804f6e0 <__sprintf_chk@plt+0x6400>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8057320,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8057320,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8057320,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8057320,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804f793 <__sprintf_chk@plt+0x64b3>
test   %ecx,%ecx
je     804f793 <__sprintf_chk@plt+0x64b3>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049270 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8057320,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049180 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8057320,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049180 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   8050590 <__sprintf_chk@plt+0x72b0>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804eab0 <__sprintf_chk@plt+0x57d0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804f8c8 <__sprintf_chk@plt+0x65e8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804f800 <__sprintf_chk@plt+0x6520>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x805719c,%edi
mov    0x8057190,%esi
cmp    $0x1,%edi
jbe    804f943 <__sprintf_chk@plt+0x6663>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048ee0 <free@plt>
cmp    %edi,%ebx
jne    804f930 <__sprintf_chk@plt+0x6650>
mov    0x4(%esi),%eax
cmp    $0x8057220,%eax
je     804f969 <__sprintf_chk@plt+0x6689>
mov    %eax,(%esp)
call   8048ee0 <free@plt>
movl   $0x100,0x8057194
00
movl   $0x8057220,0x8057198
08
cmp    $0x8057194,%esi
je     804f983 <__sprintf_chk@plt+0x66a3>
mov    %esi,(%esp)
call   8048ee0 <free@plt>
movl   $0x8057194,0x8057190
08
movl   $0x1,0x805719c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8057320,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8057320,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8057320,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8057320,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804e990 <__sprintf_chk@plt+0x56b0>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f4e0 <__sprintf_chk@plt+0x6200>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804e990 <__sprintf_chk@plt+0x56b0>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f4e0 <__sprintf_chk@plt+0x6200>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804fa20 <__sprintf_chk@plt+0x6740>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804fa50 <__sprintf_chk@plt+0x6770>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8057320,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8057324,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8057328,%eax
mov    %eax,0x18(%esp)
mov    0x805732c,%eax
mov    %eax,0x1c(%esp)
mov    0x8057330,%eax
mov    %eax,0x20(%esp)
mov    0x8057334,%eax
mov    %eax,0x24(%esp)
mov    0x8057338,%eax
mov    %eax,0x28(%esp)
mov    0x805733c,%eax
mov    %eax,0x2c(%esp)
mov    0x8057340,%eax
mov    %eax,0x30(%esp)
mov    0x8057344,%eax
mov    %eax,0x34(%esp)
mov    0x8057348,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805734c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804f4e0 <__sprintf_chk@plt+0x6200>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x6800>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x6800>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x6800>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8057320,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8057324,%eax
mov    %eax,0x14(%esp)
mov    0x8057328,%eax
mov    %eax,0x18(%esp)
mov    0x805732c,%eax
mov    %eax,0x1c(%esp)
mov    0x8057330,%eax
mov    %eax,0x20(%esp)
mov    0x8057334,%eax
mov    %eax,0x24(%esp)
mov    0x8057338,%eax
mov    %eax,0x28(%esp)
mov    0x805733c,%eax
mov    %eax,0x2c(%esp)
mov    0x8057340,%eax
mov    %eax,0x30(%esp)
mov    0x8057344,%eax
mov    %eax,0x34(%esp)
mov    0x8057348,%eax
mov    %eax,0x38(%esp)
mov    0x805734c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804f760 <__sprintf_chk@plt+0x6480>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804f4e0 <__sprintf_chk@plt+0x6200>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804fc20 <__sprintf_chk@plt+0x6940>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804fc20 <__sprintf_chk@plt+0x6940>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804fc20 <__sprintf_chk@plt+0x6940>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8057160,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8057160,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8057160,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8057160,0x4(%esp)
jmp    804f4e0 <__sprintf_chk@plt+0x6200>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
movl   $0x0,(%esp)
mov    %ebx,0x4(%esp)
call   8049190 <clock_settime@plt>
xor    %edx,%edx
test   %eax,%eax
mov    %eax,%esi
je     804fe71 <__sprintf_chk@plt+0x6b91>
call   8049180 <__errno_location@plt>
mov    %esi,%edx
cmpl   $0x1,(%eax)
je     804fe71 <__sprintf_chk@plt+0x6b91>
mov    (%ebx),%eax
mov    $0x10624dd3,%edx
mov    0x4(%ebx),%ecx
movl   $0x0,0x4(%esp)
mov    %eax,0x18(%esp)
mov    %ecx,%eax
imul   %edx
sar    $0x1f,%ecx
lea    0x18(%esp),%eax
mov    %eax,(%esp)
sar    $0x6,%edx
sub    %ecx,%edx
mov    %edx,0x1c(%esp)
call   80492a0 <settimeofday@plt>
mov    %eax,%edx
add    $0x24,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     8050338 <__sprintf_chk@plt+0x7058>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8053e24,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8053e37,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x80540c0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8049240 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8053e94,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     8050360 <__sprintf_chk@plt+0x7080>
jmp    *0x8054098(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053ff8,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048f70 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8049240 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054028,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048f70 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049240 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049270 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053e3b,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049240 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053e4b,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049240 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053e62,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049240 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053f60,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048f70 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804ffdf <__sprintf_chk@plt+0x6cff>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053f80,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048f70 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804ffdf <__sprintf_chk@plt+0x6cff>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053fa4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048f70 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804ffdf <__sprintf_chk@plt+0x6cff>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053fcc,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048f70 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804ffdf <__sprintf_chk@plt+0x6cff>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8053e30,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049240 <__fprintf_chk@plt>
jmp    804fed1 <__sprintf_chk@plt+0x6bf1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805405c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048f70 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    805006a <__sprintf_chk@plt+0x6d8a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     805040a <__sprintf_chk@plt+0x712a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    8050400 <__sprintf_chk@plt+0x7120>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804fe80 <__sprintf_chk@plt+0x6ba0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     8050462 <__sprintf_chk@plt+0x7182>
add    $0x1,%eax
cmp    $0xa,%eax
jne    8050450 <__sprintf_chk@plt+0x7170>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804fe80 <__sprintf_chk@plt+0x6ba0>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8050440 <__sprintf_chk@plt+0x7160>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x8053e7e,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x8051277,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805128d,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
movl   $0x80524b8,0xc(%esp)
movl   $0x80512a1,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <__printf_chk@plt>
mov    0x8057200,%ebx
movl   $0x5,0x8(%esp)
movl   $0x80524e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049070 <malloc@plt>
test   %eax,%eax
je     80505a9 <__sprintf_chk@plt+0x72c9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     80505a4 <__sprintf_chk@plt+0x72c4>
lea    0x0(%esi),%esi
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     80505e9 <__sprintf_chk@plt+0x7309>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    8050590 <__sprintf_chk@plt+0x72b0>
call   8050800 <__sprintf_chk@plt+0x7520>
xchg   %ax,%ax
jmp    8050590 <__sprintf_chk@plt+0x72b0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     8050628 <__sprintf_chk@plt+0x7348>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <realloc@plt>
test   %eax,%eax
je     805063b <__sprintf_chk@plt+0x735b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     8050610 <__sprintf_chk@plt+0x7330>
mov    %eax,(%esp)
call   8048ee0 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     8050620 <__sprintf_chk@plt+0x7340>
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     8050683 <__sprintf_chk@plt+0x73a3>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    8050600 <__sprintf_chk@plt+0x7320>
call   8050800 <__sprintf_chk@plt+0x7520>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     80506d0 <__sprintf_chk@plt+0x73f0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    80506e8 <__sprintf_chk@plt+0x7408>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8050600 <__sprintf_chk@plt+0x7320>
xchg   %ax,%ax
test   %ecx,%ecx
jne    80506b9 <__sprintf_chk@plt+0x73d9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    80506b9 <__sprintf_chk@plt+0x73d9>
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     8050728 <__sprintf_chk@plt+0x7448>
cmp    $0xaaaaaaa9,%eax
ja     8050734 <__sprintf_chk@plt+0x7454>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    8050600 <__sprintf_chk@plt+0x7320>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    8050710 <__sprintf_chk@plt+0x7430>
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8050590 <__sprintf_chk@plt+0x72b0>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80492d0 <calloc@plt>
test   %eax,%eax
je     805078f <__sprintf_chk@plt+0x74af>
add    $0x1c,%esp
ret
nop
call   8050800 <__sprintf_chk@plt+0x7520>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   8050590 <__sprintf_chk@plt+0x72b0>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048ef0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049120 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   80507a0 <__sprintf_chk@plt+0x74c0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x80540ef,0x4(%esp)
movl   $0x0,(%esp)
call   8048f70 <dcgettext@plt>
mov    0x8057150,%edx
movl   $0x8052990,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8049040 <error@plt>
call   8049270 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80491a0 <fileno@plt>
test   %eax,%eax
js     80508d8 <__sprintf_chk@plt+0x75f8>
mov    %ebx,(%esp)
call   8049080 <__freading@plt>
test   %eax,%eax
jne    80508a8 <__sprintf_chk@plt+0x75c8>
mov    %ebx,(%esp)
call   80508f0 <__sprintf_chk@plt+0x7610>
test   %eax,%eax
je     80508d8 <__sprintf_chk@plt+0x75f8>
call   8049180 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048f20 <fclose@plt>
test   %edi,%edi
je     805089a <__sprintf_chk@plt+0x75ba>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   80491a0 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049230 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8050872 <__sprintf_chk@plt+0x7592>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048f20 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8050908 <__sprintf_chk@plt+0x7628>
mov    %ebx,(%esp)
call   8049080 <__freading@plt>
test   %eax,%eax
jne    8050918 <__sprintf_chk@plt+0x7638>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048ec0 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8050908 <__sprintf_chk@plt+0x7628>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   8050950 <__sprintf_chk@plt+0x7670>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048ec0 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     8050990 <__sprintf_chk@plt+0x76b0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048f40 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    805096f <__sprintf_chk@plt+0x768f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    805096f <__sprintf_chk@plt+0x768f>
mov    %ebx,(%esp)
call   80491a0 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8049230 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     80509d7 <__sprintf_chk@plt+0x76f7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    80509cf <__sprintf_chk@plt+0x76ef>
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8049010 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8050850 <__sprintf_chk@plt+0x7570>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    8050a20 <__sprintf_chk@plt+0x7740>
test   %dl,%dl
je     8050a17 <__sprintf_chk@plt+0x7737>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     8050a40 <__sprintf_chk@plt+0x7760>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    8050a17 <__sprintf_chk@plt+0x7737>
call   8049180 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049180 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   80491e0 <nl_langinfo@plt>
mov    0x8057350,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x8053e7d,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     8050b2c <__sprintf_chk@plt+0x784c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8050af7 <__sprintf_chk@plt+0x7817>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8050ad0 <__sprintf_chk@plt+0x77f0>
nop
mov    %ebp,(%esp)
call   8049120 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049120 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8050b28 <__sprintf_chk@plt+0x7848>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
je     8050aeb <__sprintf_chk@plt+0x780b>
cmp    $0x2a,%bl
jne    8050ab0 <__sprintf_chk@plt+0x77d0>
cmpb   $0x0,0x1(%ebp)
jne    8050ab0 <__sprintf_chk@plt+0x77d0>
mov    %ebp,(%esp)
call   8049120 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8054109,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8050ded <__sprintf_chk@plt+0x7b0d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8050af7 <__sprintf_chk@plt+0x7817>
movl   $0x805410f,(%esp)
call   8049050 <getenv@plt>
test   %eax,%eax
je     8050b45 <__sprintf_chk@plt+0x7865>
cmpb   $0x0,(%eax)
jne    8050d53 <__sprintf_chk@plt+0x7a73>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8054100,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8050d44 <__sprintf_chk@plt+0x7a64>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049070 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8050de3 <__sprintf_chk@plt+0x7b03>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048ef0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050bac <__sprintf_chk@plt+0x78cc>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048eb0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050d28 <__sprintf_chk@plt+0x7a48>
movl   $0x805299d,0x4(%esp)
mov    %eax,(%esp)
call   80490b0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8050d20 <__sprintf_chk@plt+0x7a40>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050d06 <__sprintf_chk@plt+0x7a26>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8050c10 <__sprintf_chk@plt+0x7930>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8050c10 <__sprintf_chk@plt+0x7930>
cmp    $0x23,%eax
je     8050d7d <__sprintf_chk@plt+0x7a9d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049170 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805411f,0x4(%esp)
mov    %esi,(%esp)
call   8049110 <fscanf@plt>
cmp    $0x1,%eax
jle    8050da0 <__sprintf_chk@plt+0x7ac0>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049120 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049120 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    8050dbe <__sprintf_chk@plt+0x7ade>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049070 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8050df2 <__sprintf_chk@plt+0x7b12>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049000 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049000 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     8050c1c <__sprintf_chk@plt+0x793c>
mov    %esi,(%esp)
call   80491c0 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8050da0 <__sprintf_chk@plt+0x7ac0>
jmp    8050c25 <__sprintf_chk@plt+0x7945>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049290 <close@plt>
mov    $0x8053e7d,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048ee0 <free@plt>
mov    %ebp,0x8057350
jmp    8050a9f <__sprintf_chk@plt+0x77bf>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    8050b6b <__sprintf_chk@plt+0x788b>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049120 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8050d44 <__sprintf_chk@plt+0x7a64>
lea    -0x1(%eax),%eax
jmp    8050b54 <__sprintf_chk@plt+0x7874>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8050d97 <__sprintf_chk@plt+0x7ab7>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050e0c <__sprintf_chk@plt+0x7b2c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    8050d78 <__sprintf_chk@plt+0x7a98>
cmp    $0xffffffff,%eax
jne    8050c10 <__sprintf_chk@plt+0x7930>
mov    %esi,(%esp)
call   8050850 <__sprintf_chk@plt+0x7570>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050d28 <__sprintf_chk@plt+0x7a48>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    8050d2d <__sprintf_chk@plt+0x7a4d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8049060 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    8050cbc <__sprintf_chk@plt+0x79dc>
mov    $0x8053e7d,%ebp
jmp    8050d39 <__sprintf_chk@plt+0x7a59>
call   8048f90 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x8053e7d,%ebp
call   8048ee0 <free@plt>
mov    %esi,(%esp)
call   8050850 <__sprintf_chk@plt+0x7570>
jmp    8050d2d <__sprintf_chk@plt+0x7a4d>
mov    %esi,(%esp)
call   80491c0 <__uflow@plt>
jmp    8050d92 <__sprintf_chk@plt+0x7ab2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%edi
mov    0x20(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
test   %edi,%edi
mov    %edi,%ecx
mov    %eax,%ebp
js     8050ee8 <__sprintf_chk@plt+0x7c08>
test   %ebp,%ebp
mov    0x4(%esp),%esi
mov    %eax,%edi
js     8050f04 <__sprintf_chk@plt+0x7c24>
test   %edi,%edi
mov    %ecx,%ebp
mov    %edx,0x8(%esp)
mov    %edi,%eax
mov    %edx,%ecx
mov    %esi,0x4(%esp)
jne    8050e80 <__sprintf_chk@plt+0x7ba0>
cmp    %ebp,%esi
jbe    8050ea8 <__sprintf_chk@plt+0x7bc8>
mov    %ebp,%edx
mov    %ecx,%eax
xor    %ebp,%ebp
div    %esi
mov    %eax,%ecx
jmp    8050e88 <__sprintf_chk@plt+0x7ba8>
lea    0x0(%esi),%esi
cmp    %ebp,%edi
jbe    8050ec8 <__sprintf_chk@plt+0x7be8>
xor    %ebp,%ebp
xor    %ecx,%ecx
mov    %ecx,%eax
mov    (%esp),%ecx
mov    %ebp,%edx
test   %ecx,%ecx
je     8050e9a <__sprintf_chk@plt+0x7bba>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x10,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
jne    8050eb7 <__sprintf_chk@plt+0x7bd7>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%esi
mov    %ebp,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    %ecx,%eax
div    %esi
mov    %eax,%ecx
jmp    8050e88 <__sprintf_chk@plt+0x7ba8>
nop
bsr    %edi,%edi
xor    $0x1f,%edi
jne    8050f18 <__sprintf_chk@plt+0x7c38>
mov    0x8(%esp),%edi
cmp    %edi,0x4(%esp)
jbe    8050ede <__sprintf_chk@plt+0x7bfe>
cmp    %ebp,%eax
jae    8050e84 <__sprintf_chk@plt+0x7ba4>
xor    %ebp,%ebp
mov    $0x1,%ecx
jmp    8050e88 <__sprintf_chk@plt+0x7ba8>
nop
neg    %edx
mov    0x4(%esp),%esi
mov    %eax,%edi
adc    $0x0,%ecx
neg    %ecx
test   %ebp,%ebp
movl   $0xffffffff,(%esp)
jns    8050e5b <__sprintf_chk@plt+0x7b7b>
neg    %esi
adc    $0x0,%edi
notl   (%esp)
neg    %edi
jmp    8050e5b <__sprintf_chk@plt+0x7b7b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ecx
mov    0x4(%esp),%esi
shl    %cl,%eax
mov    %eax,%edx
mov    $0x20,%eax
sub    %edi,%eax
mov    %eax,%ecx
shr    %cl,%esi
mov    %edi,%ecx
mov    %esi,0xc(%esp)
mov    0x4(%esp),%esi
or     %edx,0xc(%esp)
mov    %ebp,%edx
shl    %cl,%esi
mov    %eax,%ecx
mov    %esi,0x4(%esp)
mov    0x8(%esp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%ebp
mov    %eax,%ecx
shr    %cl,%esi
or     %ebp,%esi
mov    %esi,%eax
divl   0xc(%esp)
mov    %edx,%ebp
mov    %eax,%esi
mull   0x4(%esp)
cmp    %edx,%ebp
mov    %edx,0x4(%esp)
jb     8050f88 <__sprintf_chk@plt+0x7ca8>
mov    0x8(%esp),%edx
mov    %edi,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8050f7d <__sprintf_chk@plt+0x7c9d>
cmp    0x4(%esp),%ebp
je     8050f88 <__sprintf_chk@plt+0x7ca8>
mov    %esi,%ecx
xor    %ebp,%ebp
jmp    8050e88 <__sprintf_chk@plt+0x7ba8>
xchg   %ax,%ax
lea    -0x1(%esi),%ecx
xor    %ebp,%ebp
jmp    8050e88 <__sprintf_chk@plt+0x7ba8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x20,%esp
mov    0x34(%esp),%edx
mov    0x3c(%esp),%eax
mov    0x30(%esp),%ebp
mov    0x38(%esp),%edi
test   %edx,%edx
mov    %eax,%esi
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
movl   $0x0,0xc(%esp)
js     8051088 <__sprintf_chk@plt+0x7da8>
test   %esi,%esi
mov    %edi,%edx
mov    %eax,%ecx
js     8051078 <__sprintf_chk@plt+0x7d98>
mov    0x4(%esp),%edi
mov    %ecx,%eax
mov    %edx,%ecx
mov    (%esp),%esi
test   %eax,%eax
mov    %edx,0x10(%esp)
mov    %edi,%ebp
mov    %esi,0x14(%esp)
mov    %esi,%edi
mov    %ebp,%esi
jne    8051010 <__sprintf_chk@plt+0x7d30>
cmp    %esi,%edx
jbe    8051058 <__sprintf_chk@plt+0x7d78>
mov    %esi,%edx
mov    0x14(%esp),%eax
div    %ecx
mov    %edx,%esi
mov    %esi,%eax
xor    %edx,%edx
jmp    8051019 <__sprintf_chk@plt+0x7d39>
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%eax
jbe    8051030 <__sprintf_chk@plt+0x7d50>
mov    (%esp),%eax
mov    %esi,%edx
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     8051028 <__sprintf_chk@plt+0x7d48>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x20,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
bsr    %eax,%edx
mov    %edx,(%esp)
xorl   $0x1f,(%esp)
jne    80510a8 <__sprintf_chk@plt+0x7dc8>
cmp    %edi,%ecx
jbe    8051140 <__sprintf_chk@plt+0x7e60>
cmp    %esi,%eax
jb     8051140 <__sprintf_chk@plt+0x7e60>
mov    %edi,%eax
mov    %ebp,%edx
jmp    8051019 <__sprintf_chk@plt+0x7d39>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    8051067 <__sprintf_chk@plt+0x7d87>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%ecx
mov    %esi,%eax
xor    %edx,%edx
div    %ecx
mov    %edi,%eax
div    %ecx
mov    %edx,%esi
jmp    8051006 <__sprintf_chk@plt+0x7d26>
lea    0x0(%esi),%esi
neg    %edx
adc    $0x0,%ecx
neg    %ecx
jmp    8050fdb <__sprintf_chk@plt+0x7cfb>
lea    0x0(%esi,%eiz,1),%esi
negl   (%esp)
adcl   $0x0,0x4(%esp)
negl   0x4(%esp)
movl   $0xffffffff,0xc(%esp)
jmp    8050fcf <__sprintf_chk@plt+0x7cef>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%edx
movl   $0x20,0x18(%esp)
mov    0x10(%esp),%ebp
sub    %edx,0x18(%esp)
mov    %edx,%ecx
shl    %cl,%eax
movzbl 0x18(%esp),%ecx
mov    %ebp,%edi
shr    %cl,%edi
mov    %edx,%ecx
shl    %cl,%ebp
movzbl 0x18(%esp),%ecx
or     %eax,%edi
mov    %edx,%eax
mov    %esi,%edx
mov    %ebp,0x1c(%esp)
shr    %cl,%edx
mov    %eax,%ecx
mov    0x14(%esp),%eax
shl    %cl,%esi
movzbl 0x18(%esp),%ecx
shr    %cl,%eax
movzbl (%esp),%ecx
or     %esi,%eax
mov    0x14(%esp),%esi
div    %edi
shl    %cl,%esi
mov    %esi,0x14(%esp)
mov    %edx,%esi
mul    %ebp
mov    %edx,0x10(%esp)
mov    0x10(%esp),%ebp
mov    %eax,%edx
cmp    %ebp,%esi
mov    %ebp,%ecx
jb     8051154 <__sprintf_chk@plt+0x7e74>
cmp    %eax,0x14(%esp)
jb     8051150 <__sprintf_chk@plt+0x7e70>
mov    (%esp),%ebp
mov    0x14(%esp),%edi
sub    %edx,%edi
sbb    %ecx,%esi
mov    %esi,%eax
mov    %ebp,%ecx
shr    %cl,%edi
movzbl 0x18(%esp),%ecx
shl    %cl,%eax
mov    %ebp,%ecx
or     %eax,%edi
shr    %cl,%esi
mov    %edi,%eax
mov    %esi,%edx
jmp    8051019 <__sprintf_chk@plt+0x7d39>
nop
sub    %ecx,%edi
sbb    %eax,%esi
mov    %esi,%ebp
jmp    805104c <__sprintf_chk@plt+0x7d6c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%esi
jne    8051118 <__sprintf_chk@plt+0x7e38>
mov    0x10(%esp),%ecx
mov    %eax,%edx
sub    0x1c(%esp),%edx
sbb    %edi,%ecx
jmp    8051118 <__sprintf_chk@plt+0x7e38>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049b30 <__sprintf_chk@plt+0x850>
add    $0x5e85,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048e40 <__ctype_toupper_loc@plt-0x40>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80511c9 <__sprintf_chk@plt+0x7ee9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80511a8 <__sprintf_chk@plt+0x7ec8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80511e0 <__sprintf_chk@plt+0x7f00>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049b30 <__sprintf_chk@plt+0x850>
add    $0x5e0a,%ebx
sub    $0x18,%esp
lea    0x144(%ebx),%eax
test   %eax,%eax
je     8051228 <__sprintf_chk@plt+0x7f48>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049030 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    805120b <__sprintf_chk@plt+0x7f2b>
push   %ebx
sub    $0x8,%esp
call   8049b30 <__sprintf_chk@plt+0x850>
add    $0x5dcb,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
je     80512b3 <_IO_stdin_used+0x6f>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73692073
and    %ch,0x75(%edi)
je     8051277 <_IO_stdin_used+0x33>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
add    %cl,%gs:(%bp,%si)
push   %edx
gs
jo     80512d4 <_IO_stdin_used+0x90>
jb     80512db <_IO_stdin_used+0x97>
and    %ah,0x75622073
addr16 jae 8051290 <_IO_stdin_used+0x4c>
je     80512e1 <_IO_stdin_used+0x9d>
and    %ah,0x62000a73
jne    80512e1 <_IO_stdin_used+0x9d>
sub    $0x65726f63,%eax
jne    80512f5 <_IO_stdin_used+0xb1>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     80512f3 <_IO_stdin_used+0xaf>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    80512dd <_IO_stdin_used+0x99>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     805130e <_IO_stdin_used+0xca>
jne    805131f <_IO_stdin_used+0xdb>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
and    $0x62252061,%eax
and    %ah,0x48252065
cmp    0x53253a4d,%ah
and    %ah,0x5925205a
add    %ch,(%edi)
jne    8051341 <_IO_stdin_used+0xfd>
jb     80512ff <_IO_stdin_used+0xbb>
jae    805133a <_IO_stdin_used+0xf6>
popa
jb     805133a <_IO_stdin_used+0xf6>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x6366722d
sub    $0x39333333,%eax
add    %ch,0x6f73692d
sub    $0x31303638,%eax
add    %dl,0x3d(%edx,%ebx,2)
push   %ebp
push   %esp
inc    %ebx
xor    %al,(%eax)
inc    %esp
popa
jbe    8051368 <_IO_stdin_used+0x124>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     8051372 <_IO_stdin_used+0x12e>
add    %ah,%gs:0x78(%ebp)
je     8051381 <_IO_stdin_used+0x13d>
popa
and    %ch,0x70(%edi)
gs
jb     8051377 <_IO_stdin_used+0x133>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x74730073
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8051388 <_IO_stdin_used+0x144>
and    %ch,0x6e(%ecx)
jo     805139e <_IO_stdin_used+0x15a>
je     805132b <_IO_stdin_used+0xe7>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x74(%ecx,%eiz,2)
and    %ah,%gs:0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051362 <_IO_stdin_used+0x11e>
jae    80513a9 <_IO_stdin_used+0x165>
je     8051366 <_IO_stdin_used+0x122>
fs
popa
je     80513af <_IO_stdin_used+0x16b>
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %dh,%gs:0x65(%edx)
data16
gs
jb     80513bb <_IO_stdin_used+0x177>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
jb     80513c2 <_IO_stdin_used+0x17e>
arpl   %bp,0x323238
jb     80513ca <_IO_stdin_used+0x186>
arpl   %bp,0x32323832
add    %dh,0x65(%ebx)
je     805136f <_IO_stdin_used+0x12b>
jne    80513d4 <_IO_stdin_used+0x190>
je     8051373 <_IO_stdin_used+0x12f>
jne    80513e9 <_IO_stdin_used+0x1a5>
arpl   %ax,(%eax)
jne    80513e7 <_IO_stdin_used+0x1a3>
imul   $0x6c617372,0x65(%esi),%esi
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051386 <_IO_stdin_used+0x142>
jbe    80513ed <_IO_stdin_used+0x1a9>
jb     80513fd <_IO_stdin_used+0x1b9>
imul   $0x756f6800,0x6e(%edi),%ebp
jb     8051406 <_IO_stdin_used+0x1c2>
add    %ch,0x69(%ebp)
outsb  %ds:(%esi),(%dx)
jne    805140d <_IO_stdin_used+0x1c9>
gs
jae    805139c <_IO_stdin_used+0x158>
jae    8051403 <_IO_stdin_used+0x1bf>
arpl   %bp,0x6e(%edi)
fs
jae    80513a4 <_IO_stdin_used+0x160>
outsb  %ds:(%esi),(%dx)
jae    80513a7 <_IO_stdin_used+0x163>
add    %dl,0x79(%edx,%esi,2)
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     80513dc <_IO_stdin_used+0x198>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8051425 <_IO_stdin_used+0x1e1>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8051434 <_IO_stdin_used+0x1f0>
popa
je     8051433 <_IO_stdin_used+0x1ef>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %bl,%cs:0x2b(%ebx)
inc    %esi
dec    %edi
push   %edx
dec    %ebp
inc    %ecx
push   %esp
pop    %ebp
or     (%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x2d5b2073
jne    805147a <_IO_stdin_used+0x236>
sub    $0x6374752d,%eax
jl     8051432 <_IO_stdin_used+0x1ee>
sub    $0x76696e75,%eax
gs
jb     8051480 <_IO_stdin_used+0x23c>
popa
insb   (%dx),%es:(%edi)
pop    %ebp
and    %bl,0x4d(%ebx)
dec    %ebp
inc    %esp
inc    %esp
push   $0x5b6d6d68
pop    %ebx
inc    %ebx
inc    %ebx
pop    %ebp
pop    %ecx
pop    %ecx
pop    %ebp
pop    %ebx
jae,pn 8051499 <_IO_stdin_used+0x255>
pop    %ebp
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
inc    %esp
imul   $0x2079616c,0x70(%ebx),%esi
je     805149e <_IO_stdin_used+0x25a>
and    %ah,%gs:0x75(%ebx)
jb     80514ae <_IO_stdin_used+0x26a>
outsb  %gs:(%esi),(%dx)
je     8051460 <_IO_stdin_used+0x21c>
je     80514ab <_IO_stdin_used+0x267>
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x6e(%ecx)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x69(%edi)
jbe    80514b5 <_IO_stdin_used+0x271>
outsb  %ds:(%esi),(%dx)
and    %al,0x4f(%esi)
push   %edx
dec    %ebp
inc    %ecx
push   %esp
sub    $0x20,%al
outsl  %ds:(%esi),(%dx)
jb     805147d <_IO_stdin_used+0x239>
jae    80514c4 <_IO_stdin_used+0x280>
je     8051481 <_IO_stdin_used+0x23d>
je     80514cb <_IO_stdin_used+0x287>
and    %dh,%gs:0x79(%ebx)
jae    80514dd <_IO_stdin_used+0x299>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x74(%ecx,%eiz,2)
gs or  %cs:%gs:(%eax),%al
add    %cl,(%edx)
dec    %ebp
popa
outsb  %ds:(%esi),(%dx)
fs
popa
je     80514eb <_IO_stdin_used+0x2a7>
jb     80514f7 <_IO_stdin_used+0x2b3>
and    %ah,0x72(%ecx)
addr16 jne 80514f1 <_IO_stdin_used+0x2ad>
outsb  %gs:(%esi),(%dx)
je     80514fb <_IO_stdin_used+0x2b7>
and    %dh,0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     80514fe <_IO_stdin_used+0x2ba>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80514b9 <_IO_stdin_used+0x275>
popa
jb     8051501 <_IO_stdin_used+0x2bd>
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
je     8051513 <_IO_stdin_used+0x2cf>
jb     805151f <_IO_stdin_used+0x2db>
and    %ah,0x6f(%esi)
jb     80514cb <_IO_stdin_used+0x287>
jae    8051515 <_IO_stdin_used+0x2d1>
outsl  %ds:(%esi),(%dx)
jb     8051524 <_IO_stdin_used+0x2e0>
and    %ch,0x70(%edi)
je     805151e <_IO_stdin_used+0x2da>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80514d9 <_IO_stdin_used+0x295>
je     805152a <_IO_stdin_used+0x2e6>
outsl  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %ah,(%eax)
and    %ch,0x2d202c64
sub    $0x65746164,%eax
cmp    $0x49525453,%eax
dec    %esi
inc    %edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x73(%ecx,%ebp,2)
jo     805154d <_IO_stdin_used+0x309>
popa
jns    8051504 <_IO_stdin_used+0x2c0>
je     805154f <_IO_stdin_used+0x30b>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ebp,%eiz,2)
arpl   %si,0x69(%edx)
bound  %esp,0x64(%ebp)
and    %ah,0x79(%edx)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
sub    $0x20,%al
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051522 <_IO_stdin_used+0x2de>
daa
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
ja     805152e <_IO_stdin_used+0x2ea>
or     (%eax),%ah
and    %ch,0x2d202c66
sub    $0x656c6966,%eax
cmp    $0x45544144,%eax
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6b(%ecx,%ebp,2)
and    %ch,%gs:0x7461642d
and    %ch,%gs:0x6e(%edi)
arpl   %sp,0x20(%ebp)
outsw  %ds:(%esi),(%dx)
jb     8051559 <_IO_stdin_used+0x315>
gs
popa
arpl   %bp,0x20(%eax)
insb   (%dx),%es:(%edi)
imul   $0x20666f20,0x65(%esi),%ebp
inc    %esp
inc    %ecx
push   %esp
inc    %ebp
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
or     (%eax),%ah
and    %ch,0x49545b49
dec    %ebp
inc    %ebp
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
pop    %ebp
sub    $0x20,%al
sub    $0x6f73692d,%eax
sub    $0x31303638,%eax
pop    %ebx
cmp    $0x454d4954,%eax
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
pop    %ebp
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80515ed <_IO_stdin_used+0x3a9>
jo     80515f0 <_IO_stdin_used+0x3ac>
je     805159d <_IO_stdin_used+0x359>
fs
popa
je     80515e6 <_IO_stdin_used+0x3a2>
das
je     80515ed <_IO_stdin_used+0x3a9>
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x6e(%ecx)
and    %cl,0x53(%ecx)
dec    %edi
and    %bh,(%eax)
xor    %dh,%ss:(%ecx)
and    %ah,0x6f(%esi)
jb     8051604 <_IO_stdin_used+0x3c0>
popa
je     80515c8 <_IO_stdin_used+0x384>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4d(%ecx,%ecx,2)
inc    %ebp
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
cmp    $0x74616427,%eax
gs
daa
and    %ah,0x6f(%esi)
jb     80515eb <_IO_stdin_used+0x3a7>
fs
popa
je     8051634 <_IO_stdin_used+0x3f0>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    80515f5 <_IO_stdin_used+0x3b1>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    805164c <_IO_stdin_used+0x408>
je     805160b <_IO_stdin_used+0x3c7>
sub    $0xa,%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
daa
push   $0x7372756f
daa
sub    $0x20,%al
daa
insl   (%dx),%es:(%edi)
imul   $0x27736574,0x75(%esi),%ebp
sub    $0x20,%al
daa
jae    805167c <_IO_stdin_used+0x438>
arpl   %bp,0x6e(%edi)
fs
jae    8051644 <_IO_stdin_used+0x400>
sub    $0x20,%al
outsl  %ds:(%esi),(%dx)
jb     8051642 <_IO_stdin_used+0x3fe>
daa
outsb  %ds:(%esi),(%dx)
jae    805164d <_IO_stdin_used+0x409>
and    %ah,0x6f(%esi)
jb     805164b <_IO_stdin_used+0x407>
fs
popa
je     8051694 <_IO_stdin_used+0x450>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %dh,%gs:0x20(%edi,%ebp,2)
je     80516c2 <_IO_stdin_used+0x47e>
and    %ch,%gs:0x6e(%ecx)
imul   $0x20646574,%fs:0x61(%ebx),%esp
jo     80516da <_IO_stdin_used+0x496>
arpl   %bp,%gs:0x73(%ecx)
imul   $0xa2e,0x6e(%edi),%ebp
add    %ah,(%eax)
and    %ch,0x2d202c72
sub    $0x65666572,%eax
jb     80516e7 <_IO_stdin_used+0x4a3>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     8051702 <_IO_stdin_used+0x4be>
and    %ch,%gs:0x73(%ecx,%eiz,2)
je     80516c1 <_IO_stdin_used+0x47d>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6d(%ecx,%ebp,2)
and    %ch,%gs:0x66(%edi)
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
or     (%eax),%ah
and    %ch,0x2d202c52
sub    $0x2d636672,%eax
xor    (%eax),%bh
xor    (%edx),%dh
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    805174e <_IO_stdin_used+0x50a>
jo     8051751 <_IO_stdin_used+0x50d>
je     80516fe <_IO_stdin_used+0x4ba>
fs
popa
je     8051747 <_IO_stdin_used+0x503>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %ch,%gs:0x6e(%ecx)
and    %dl,0x46(%edx)
inc    %ebx
and    %dh,(%edx)
cmp    %dh,(%edx)
xor    (%eax),%ah
outsw  %ds:(%esi),(%dx)
jb     8051769 <_IO_stdin_used+0x525>
popa
je     805172d <_IO_stdin_used+0x4e9>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x78(%ebp)
popa
insl   (%dx),%es:(%edi)
jo     805178e <_IO_stdin_used+0x54a>
cmp    %gs:(%eax),%ah
dec    %ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
xor    %dh,(%edi)
and    %al,0x75(%ecx)
and    %dh,(%bp,%si)
xor    %dh,(%eax)
and    %dh,%ss:(%ecx)
xor    (%edx),%bh
xor    (%edx,%edi,1),%esi
xor    $0x302d2036,%eax
xor    %dh,%ss:(%eax)
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6366722d,%eax
sub    $0x39333333,%eax
cmp    $0x454d4954,%eax
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %ah,(%eax)
and    %ch,0x75(%edi)
je     80517d8 <_IO_stdin_used+0x594>
jne    80517de <_IO_stdin_used+0x59a>
and    %ah,0x74(%ecx,%eiz,2)
and    %ah,%gs:0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %ch,%gs:0x6e(%ecx)
and    %dl,0x46(%edx)
inc    %ebx
and    %dh,(%ebx)
xor    (%ebx),%esi
cmp    %esp,(%eax)
outsw  %ds:(%esi),(%dx)
jb     80517f6 <_IO_stdin_used+0x5b2>
popa
je     80517ba <_IO_stdin_used+0x576>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4d(%ecx,%ecx,2)
inc    %ebp
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
cmp    $0x74616427,%eax
gs
daa
sub    $0x20,%al
daa
jae    8051822 <_IO_stdin_used+0x5de>
arpl   %bp,0x6e(%edi)
fs
jae    80517ea <_IO_stdin_used+0x5a6>
sub    $0x20,%al
outsl  %ds:(%esi),(%dx)
jb     80517e8 <_IO_stdin_used+0x5a4>
daa
outsb  %ds:(%esi),(%dx)
jae    80517f3 <_IO_stdin_used+0x5af>
and    %ah,0x6f(%esi)
jb     80517db <_IO_stdin_used+0x597>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
fs
popa
je     8051856 <_IO_stdin_used+0x612>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %dh,%gs:0x20(%edi,%ebp,2)
je     8051868 <_IO_stdin_used+0x624>
and    %ch,%gs:0x6e(%ecx)
imul   $0x20646574,%fs:0x61(%ebx),%esp
jo     8051880 <_IO_stdin_used+0x63c>
arpl   %bp,%gs:0x73(%ecx)
imul   $0x20200a2e,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esp
popa
je     805189c <_IO_stdin_used+0x658>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %ah,%gs:0x6f(%ebx)
insl   (%dx),%es:(%edi)
jo     80518b5 <_IO_stdin_used+0x671>
outsb  %ds:(%esi),(%dx)
outsb  %gs:(%esi),(%dx)
je     80518be <_IO_stdin_used+0x67a>
and    %ah,0x72(%ecx)
and    %dh,%gs:0x65(%ebx)
jo     80518b5 <_IO_stdin_used+0x671>
jb     80518b7 <_IO_stdin_used+0x673>
je     80518bd <_IO_stdin_used+0x679>
and    %ah,%fs:0x79(%edx)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x20(%ecx)
jae    80518e6 <_IO_stdin_used+0x6a2>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%di)
and    %dh,%gs:0x70(%ebx)
popa
arpl   %sp,0x3a(%ebp)
and    %dh,(%edx)
xor    %dh,(%eax)
ss
sub    $0x302d3830,%eax
aaa
and    %dh,(%ecx)
xor    (%edx),%bh
xor    (%edx,%edi,1),%esi
xor    $0x36302d36,%eax
cmp    (%eax),%dh
xor    %cl,(%edx)
and    %ah,(%eax)
sub    $0x2d202c73,%eax
sub    $0x3d746573,%eax
push   %ebx
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8051926 <_IO_stdin_used+0x6e2>
je     80518e3 <_IO_stdin_used+0x69f>
je     805192e <_IO_stdin_used+0x6ea>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ebp,%eiz,2)
arpl   %si,0x69(%edx)
bound  %esp,0x64(%ebp)
and    %ah,0x79(%edx)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%ah
and    %ch,0x2d202c75
sub    $0x2c637475,%eax
and    %ch,0x696e752d
jbe    8051955 <_IO_stdin_used+0x711>
jb     8051965 <_IO_stdin_used+0x721>
popa
insb   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
jo     805196c <_IO_stdin_used+0x728>
imul   $0x20726f20,0x74(%esi),%ebp
jae    8051968 <_IO_stdin_used+0x724>
je     8051925 <_IO_stdin_used+0x6e1>
inc    %ebx
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     805196e <_IO_stdin_used+0x72a>
imul   $0x20646574,0x61(%esi),%ebp
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x6c617372,0x65(%esi),%esi
and    %dl,0x6d(%ecx,%ebp,2)
or     %gs:(%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c65682d
jo     8051951 <_IO_stdin_used+0x70d>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     80519a7 <_IO_stdin_used+0x763>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    80519ca <_IO_stdin_used+0x786>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80519dc <_IO_stdin_used+0x798>
jo     80519df <_IO_stdin_used+0x79b>
je     805198c <_IO_stdin_used+0x748>
jbe    80519d3 <_IO_stdin_used+0x78f>
jb     80519e3 <_IO_stdin_used+0x79f>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     80519e7 <_IO_stdin_used+0x7a3>
popa
je     80519e6 <_IO_stdin_used+0x7a2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x460a0000,0x0(%edx,%ecx,1),%esi
dec    %edi
push   %edx
dec    %ebp
inc    %ecx
push   %esp
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     8051a0b <_IO_stdin_used+0x7c7>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jae    80519bd <_IO_stdin_used+0x779>
je     8051a07 <_IO_stdin_used+0x7c3>
and    %ch,%gs:0x75(%edi)
je     8051a15 <_IO_stdin_used+0x7d1>
jne    8051a1b <_IO_stdin_used+0x7d7>
and    %ah,%cs:(%eax)
dec    %ecx
outsb  %ds:(%esi),(%dx)
je     8051a13 <_IO_stdin_used+0x7cf>
jb     8051a20 <_IO_stdin_used+0x7dc>
jb     8051a17 <_IO_stdin_used+0x7d3>
je     8051a19 <_IO_stdin_used+0x7d5>
and    %dh,%fs:0x65(%ebx)
jno    8051a2f <_IO_stdin_used+0x7eb>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
and    %ah,0x72(%ecx)
cmp    %gs:(%edx),%cl
or     (%eax),%ah
and    %ah,0x20202025
popa
and    %ch,0x74(%ecx,%ebp,2)
gs
jb     8051a36 <_IO_stdin_used+0x7f2>
insb   (%dx),%es:(%edi)
and    %ah,0x2520200a
popa
and    %ah,(%eax)
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
gs
daa
jae    8051a09 <_IO_stdin_used+0x7c5>
popa
bound  %esp,0x72(%edx)
gs
jbe    8051a59 <_IO_stdin_used+0x815>
popa
je     8051a58 <_IO_stdin_used+0x814>
and    %dh,%fs:0x65(%edi)
imul   $0x20,%gs:0x79(%ecx,%eiz,2),%esp
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
push   %ebx
jne    8051a7a <_IO_stdin_used+0x836>
sub    %ecx,(%edx)
add    %al,(%eax)
and    %ah,(%eax)
and    $0x20202041,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051a40 <_IO_stdin_used+0x7fc>
data16
jne    8051a8f <_IO_stdin_used+0x84b>
insb   (%dx),%es:(%edi)
and    %dh,0x65(%edi)
imul   $0x20,%gs:0x79(%ecx,%eiz,2),%esp
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
push   %ebx
jne    8051aaa <_IO_stdin_used+0x866>
fs
popa
jns    8051a69 <_IO_stdin_used+0x825>
or     (%eax),%ah
and    %ah,0x20202062
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051a71 <_IO_stdin_used+0x82d>
popa
bound  %esp,0x72(%edx)
gs
jbe    8051ac1 <_IO_stdin_used+0x87d>
popa
je     8051ac0 <_IO_stdin_used+0x87c>
and    %ch,%fs:0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
je     8051aca <_IO_stdin_used+0x886>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
dec    %edx
popa
outsb  %ds:(%esi),(%dx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202042,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051aa4 <_IO_stdin_used+0x860>
data16
jne    8051af3 <_IO_stdin_used+0x8af>
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
je     8051af6 <_IO_stdin_used+0x8b2>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
dec    %edx
popa
outsb  %ds:(%esi),(%dx)
jne    8051b01 <_IO_stdin_used+0x8bd>
jb     8051b1b <_IO_stdin_used+0x8d7>
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202063,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051ad4 <_IO_stdin_used+0x890>
fs
popa
je     8051b1d <_IO_stdin_used+0x8d9>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
push   %esp
push   $0x614d2075
jb     8051af1 <_IO_stdin_used+0x8ad>
and    %dh,(%ebx)
and    %dh,(%edx)
xor    (%edx),%edi
xor    %dh,0x2035323a
xor    (%eax),%dh
xor    %dh,0x20000a29
and    %ah,0x20202043
arpl   %sp,0x6e(%ebp)
je     8051b65 <_IO_stdin_used+0x921>
jb     8051b6b <_IO_stdin_used+0x927>
cmp    (%eax),%esp
insb   (%dx),%es:(%edi)
imul   $0x2c592520,0x65(%ebx),%ebp
and    %ah,0x78(%ebp)
arpl   %sp,0x70(%ebp)
je     8051b24 <_IO_stdin_used+0x8e0>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
imul   $0x20747361,0x6c(%eax,%eiz,1),%esi
je     8051b87 <_IO_stdin_used+0x943>
outsl  %ds:(%esi),(%dx)
and    %ah,0x67(%ecx,%ebp,2)
imul   $0x672e6528,0x20(%ebx,%esi,2),%esi
cs
sub    $0x20,%al
xor    (%eax),%dh
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202064,%eax
fs
popa
jns    8051b4f <_IO_stdin_used+0x90b>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
je     8051b9f <_IO_stdin_used+0x95b>
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
xor    %dh,(%ecx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202044,%eax
fs
popa
je     8051bb3 <_IO_stdin_used+0x96f>
cmp    (%eax),%esp
jae    8051bb3 <_IO_stdin_used+0x96f>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x64252f6d
das
and    $0x20200a79,%eax
and    $0x20202065,%eax
fs
popa
jns    8051b8c <_IO_stdin_used+0x948>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
je     8051bdc <_IO_stdin_used+0x998>
sub    $0x20,%al
jae    8051be8 <_IO_stdin_used+0x9a4>
popa
arpl   %sp,0x20(%ebp)
jo     8051bdf <_IO_stdin_used+0x99b>
fs fs gs cmp %fs:%gs:(%eax),%esp
jae    8051be7 <_IO_stdin_used+0x9a3>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0xa645f
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x20202046
data16
jne    8051c0a <_IO_stdin_used+0x9c6>
insb   (%dx),%es:(%edi)
and    %ah,0x74(%ecx,%eiz,2)
cmp    %gs:(%eax),%esp
jae    8051c09 <_IO_stdin_used+0x9c5>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x6d252d59
sub    $0x200a6425,%eax
and    %ah,0x20202067
insb   (%dx),%es:(%edi)
popa
jae    8051c36 <_IO_stdin_used+0x9f2>
and    %dh,0x6f(%edi,%esi,2)
and    %ah,0x67(%ecx,%ebp,2)
imul   $0x7920666f,0x20(%ebx,%esi,2),%esi
gs
popa
jb     8051bf6 <_IO_stdin_used+0x9b2>
outsl  %ds:(%esi),(%dx)
data16
and    %cl,0x53(%ecx)
dec    %edi
and    %dh,0x65(%edi)
imul   $0x6e,%gs:(%eax),%esp
jne    8051c52 <_IO_stdin_used+0xa0e>
bound  %esp,0x72(%ebp)
and    %ch,(%eax)
jae    8051c51 <_IO_stdin_used+0xa0d>
and    %ah,%gs:0x200a2947
and    %ah,0x20202047
jns    8051c60 <_IO_stdin_used+0xa1c>
popa
jb     8051c1e <_IO_stdin_used+0x9da>
outsl  %ds:(%esi),(%dx)
data16
and    %cl,0x53(%ecx)
dec    %edi
and    %dh,0x65(%edi)
imul   $0x6e,%gs:(%eax),%esp
jne    8051c7a <_IO_stdin_used+0xa36>
bound  %esp,0x72(%ebp)
and    %ch,(%eax)
jae    8051c79 <_IO_stdin_used+0xa35>
and    %ah,%gs:0x203b2956
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     8051c8c <_IO_stdin_used+0xa48>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8051c44 <_IO_stdin_used+0xa00>
jne    8051c99 <_IO_stdin_used+0xa55>
gs
data16
jne    8051c96 <_IO_stdin_used+0xa52>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8051c50 <_IO_stdin_used+0xa0c>
ja     8051c9b <_IO_stdin_used+0xa57>
je     8051c9c <_IO_stdin_used+0xa58>
and    %ah,0xa56
add    %al,(%eax)
and    %ah,(%eax)
and    $0x20202068,%eax
jae    8051ca6 <_IO_stdin_used+0xa62>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x20200a62
and    $0x20202048,%eax
push   $0x2072756f
sub    %dh,(%eax)
xor    %ch,(%esi)
xor    %cs:(%ebx),%dh
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202049,%eax
push   $0x2072756f
sub    %dh,(%eax)
xor    %ebp,(%esi)
xor    %esi,%cs:(%edx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x2020206a,%eax
fs
popa
jns    8051ca3 <_IO_stdin_used+0xa5f>
outsl  %ds:(%esi),(%dx)
data16
and    %bh,0x65(%ecx)
popa
jb     8051cab <_IO_stdin_used+0xa67>
sub    %dh,(%eax)
xor    %dh,(%ecx)
cs xor %cs:(%esi),%esi
sub    %ecx,%ss:(%edx)
add    %al,(%eax)
and    %ah,(%eax)
and    $0x2020206b,%eax
push   $0x2c72756f
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x20(%ebp)
jo     8051d0e <_IO_stdin_used+0xaca>
fs fs gs and %ch,%fs:%gs:(%eax)
and    %dh,(%eax)
cs xor %cs:(%ebx),%dh
sub    %edi,(%ebx)
and    %dh,0x61(%ebx)
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x200a485f
and    %ah,0x2020206c
push   $0x2c72756f
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x20(%ebp)
jo     8051d3e <_IO_stdin_used+0xafa>
fs fs gs and %ch,%fs:%gs:(%eax)
and    %dh,(%ecx)
cs xor %esi,%cs:(%edx)
sub    %edi,(%ebx)
and    %dh,0x61(%ebx)
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x200a495f
and    %ah,0x2020206d
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     8051d6c <_IO_stdin_used+0xb28>
and    %ch,(%eax)
xor    %dh,(%ecx)
cs xor %esi,%cs:(%edx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x2020204d,%eax
insl   (%dx),%es:(%edi)
imul   $0x28206574,0x75(%esi),%ebp
xor    %dh,(%eax)
cs
cs
xor    $0xa2939,%eax
add    %al,(%eax)
and    %ah,(%eax)
and    $0x2020206e,%eax
popa
and    %ch,0x65(%esi)
ja     8051da1 <_IO_stdin_used+0xb5d>
imul   $0x2520200a,0x65(%esi),%ebp
dec    %esi
and    %ah,(%eax)
and    %ch,0x61(%esi)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jae    8051dab <_IO_stdin_used+0xb67>
arpl   %bp,0x6e(%edi)
fs
jae    8051d6c <_IO_stdin_used+0xb28>
sub    %dh,(%eax)
xor    %dh,(%eax)
xor    %dh,(%eax)
xor    %dh,(%eax)
xor    %dh,(%eax)
cs cmp %edi,%cs:(%ecx)
cmp    %edi,(%ecx)
cmp    %edi,(%ecx)
cmp    %edi,(%ecx)
cmp    %ebp,(%ecx)
or     (%eax),%ah
and    %ah,0x20202070
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051d93 <_IO_stdin_used+0xb4f>
gs
jno    8051deb <_IO_stdin_used+0xba7>
imul   $0x746e656c,0x61(%esi),%esi
and    %ch,0x66(%edi)
and    %ah,0x69(%ebp)
je     8051ded <_IO_stdin_used+0xba9>
gs
jb     8051da8 <_IO_stdin_used+0xb64>
inc    %ecx
dec    %ebp
and    %ch,0x72(%edi)
and    %dl,0x4d(%eax)
cmp    (%eax),%esp
bound  %ebp,0x6e(%ecx,%eiz,2)
imul   $0x69,(%eax),%esp
data16
and    %ch,0x6f(%esi)
je     8051dbf <_IO_stdin_used+0xb7b>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,0x20202050
insb   (%dx),%es:(%edi)
imul   $0x2c702520,0x65(%ebx),%ebp
and    %ah,0x75(%edx)
je     8051dd9 <_IO_stdin_used+0xb95>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8051e22 <_IO_stdin_used+0xbde>
jb     8051ddf <_IO_stdin_used+0xb9b>
arpl   %sp,0x73(%ecx)
or     %gs:(%eax),%ah
and    %ah,0x20202072
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051df4 <_IO_stdin_used+0xbb0>
xor    %esi,(%edx)
sub    $0x72756f68,%eax
and    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
je     8051e4d <_IO_stdin_used+0xc09>
insl   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
xor    %esi,(%ecx)
cmp    (%ecx),%dh
xor    %edi,(%edx)
xor    %dh,(%eax,%eiz,1)
push   %eax
dec    %ebp
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202052,%eax
xor    0x72756f68(,%ebp,1),%dh
and    %ch,0x6f(%eax)
jne    8051e80 <_IO_stdin_used+0xc3c>
and    %ah,0x6e(%ecx)
and    %ch,%fs:0x69(%ebp)
outsb  %ds:(%esi),(%dx)
jne    8051e8c <_IO_stdin_used+0xc48>
cmp    %gs:(%eax),%esp
jae    8051e7e <_IO_stdin_used+0xc3a>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x4d253a48
or     (%eax),%ah
and    %ah,0x20202073
jae    8051e97 <_IO_stdin_used+0xc53>
arpl   %bp,0x6e(%edi)
fs
jae    8051e58 <_IO_stdin_used+0xc14>
jae    8051ea3 <_IO_stdin_used+0xc5f>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
xor    %edi,(%ecx)
aaa
xor    %ch,0x302d3130
xor    %esp,(%eax)
xor    %dh,(%eax)
cmp    (%eax),%dh
xor    %bh,(%edx)
xor    %dh,(%eax)
and    %dl,0x54(%ebp)
inc    %ebx
or     (%eax),%al
add    %ah,(%eax)
and    %ah,0x20202053
jae    8051ec6 <_IO_stdin_used+0xc82>
arpl   %bp,0x6e(%edi)
and    %ch,%fs:(%eax)
xor    %dh,(%eax)
cs cs xor %ch,%cs:%ss:(%ecx)
or     (%eax),%ah
and    %ah,0x20202074
popa
and    %dh,0x62(%ecx,%eiz,2)
or     (%eax),%ah
and    %ah,0x20202054
je     8051eee <_IO_stdin_used+0xcaa>
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%esp
jae    8051eec <_IO_stdin_used+0xca8>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x4d253a48
cmp    0x20200a53,%ah
and    $0x20202075,%eax
fs
popa
jns    8051ec5 <_IO_stdin_used+0xc81>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%edi)
imul   $0x28,%gs:(%eax),%esp
xor    %ebp,(%esi)
cs
aaa
sub    %edi,(%ebx)
and    %dh,(%ecx)
and    %ch,0x73(%ecx)
and    %cl,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8051ecb <_IO_stdin_used+0xc87>
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x20202055
ja     8051f32 <_IO_stdin_used+0xcee>
imul   $0x6e,%gs:(%eax),%esp
jne    8051f40 <_IO_stdin_used+0xcfc>
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %bh,0x65(%ecx)
popa
jb     8051f0b <_IO_stdin_used+0xcc7>
and    %dh,0x69(%edi)
je     8051f4c <_IO_stdin_used+0xd08>
and    %dl,0x75(%ebx)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8051f0c <_IO_stdin_used+0xcc8>
popa
jae    8051f0f <_IO_stdin_used+0xccb>
imul   $0x2074,0x73(%edx),%si
fs
popa
jns    8051f19 <_IO_stdin_used+0xcd5>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%edi)
imul   $0x28,%gs:(%eax),%esp
xor    %dh,(%eax)
cs
cs
xor    $0x200a2933,%eax
and    %ah,0x20202056
dec    %ecx
push   %ebx
dec    %edi
and    %dh,0x65(%edi)
imul   $0x6e,%gs:(%eax),%esp
jne    8051f8a <_IO_stdin_used+0xd46>
bound  %esp,0x72(%ebp)
sub    $0x20,%al
ja     8051f8d <_IO_stdin_used+0xd49>
je     8051f8e <_IO_stdin_used+0xd4a>
and    %cl,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8051f4e <_IO_stdin_used+0xd0a>
popa
jae    8051f51 <_IO_stdin_used+0xd0d>
imul   $0x2074,0x73(%edx),%si
fs
popa
jns    8051f5b <_IO_stdin_used+0xd17>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%edi)
imul   $0x28,%gs:(%eax),%esp
xor    %dh,(%ecx)
cs
cs
xor    $0x200a2933,%eax
and    %ah,0x20202077
fs
popa
jns    8051f77 <_IO_stdin_used+0xd33>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%edi)
imul   $0x28,%gs:(%eax),%esp
xor    %ch,(%esi)
cs sub %edi,%cs:%ss:(%ebx)
and    %dh,(%eax)
and    %ch,0x73(%ecx)
and    %dl,0x75(%ebx)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8051f7d <_IO_stdin_used+0xd39>
and    %ah,(%eax)
and    $0x20202057,%eax
ja     8051fe1 <_IO_stdin_used+0xd9d>
imul   $0x6e,%gs:(%eax),%esp
jne    8051fef <_IO_stdin_used+0xdab>
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %bh,0x65(%ecx)
popa
jb     8051fba <_IO_stdin_used+0xd76>
and    %dh,0x69(%edi)
je     8051ffb <_IO_stdin_used+0xdb7>
and    %cl,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8051fbb <_IO_stdin_used+0xd77>
popa
jae    8051fbe <_IO_stdin_used+0xd7a>
imul   $0x2074,0x73(%edx),%si
fs
popa
jns    8051fc8 <_IO_stdin_used+0xd84>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%edi)
imul   $0x28,%gs:(%eax),%esp
xor    %dh,(%eax)
cs
cs
xor    $0xa2933,%eax
add    %al,(%eax)
and    %ah,(%eax)
and    $0x20202078,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8051fec <_IO_stdin_used+0xda8>
fs
popa
je     8052035 <_IO_stdin_used+0xdf1>
and    %dh,0x65(%edx)
jo     8052047 <_IO_stdin_used+0xe03>
gs
jae    805203d <_IO_stdin_used+0xdf9>
outsb  %ds:(%esi),(%dx)
je     805203c <_IO_stdin_used+0xdf8>
je     8052046 <_IO_stdin_used+0xe02>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
xor    %esi,(%edx)
das
xor    (%ecx),%esi
das
cmp    %edi,(%ecx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202058,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
daa
jae    8052021 <_IO_stdin_used+0xddd>
je     805206c <_IO_stdin_used+0xe28>
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x65(%edx)
jo     805207c <_IO_stdin_used+0xe38>
gs
jae    8052072 <_IO_stdin_used+0xe2e>
outsb  %ds:(%esi),(%dx)
je     8052071 <_IO_stdin_used+0xe2d>
je     805207b <_IO_stdin_used+0xe37>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
xor    (%ebx),%dh
cmp    (%ecx),%dh
xor    (%edx),%edi
xor    $0x38,%al
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202079,%eax
insb   (%dx),%es:(%edi)
popa
jae    80520a5 <_IO_stdin_used+0xe61>
and    %dh,0x6f(%edi,%esi,2)
and    %ah,0x67(%ecx,%ebp,2)
imul   $0x7920666f,0x20(%ebx,%esi,2),%esi
gs
popa
jb     8052065 <_IO_stdin_used+0xe21>
sub    %dh,(%eax)
xor    %ch,(%esi)
cmp    %edi,%cs:(%ecx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20202059,%eax
jns    80520bc <_IO_stdin_used+0xe78>
popa
jb     8052064 <_IO_stdin_used+0xe20>
add    %al,(%eax)
and    %ah,(%eax)
and    $0x2020207a,%eax
sub    0x68(%eax),%ebp
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
gs
jb     80520d8 <_IO_stdin_used+0xe94>
arpl   %sp,(%eax)
je     80520dc <_IO_stdin_used+0xe98>
insl   (%dx),%es:(%edi)
and    %bh,%gs:0x6f(%edx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
sub    $0x30303430,%eax
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x20207a3a,%eax
sub    0x68(%eax),%ebp
cmp    0x6d(%ebp),%ch
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
gs
jb     8052106 <_IO_stdin_used+0xec2>
arpl   %sp,(%eax)
je     805210a <_IO_stdin_used+0xec6>
insl   (%dx),%es:(%edi)
and    %bh,%gs:0x6f(%edx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
sub    $0x303a3430,%eax
xor    %ch,(%ecx)
or     (%eax),%ah
and    %ah,0x207a3a3a
and    %ch,(%ebx)
push   $0x6d6d3a68
cmp    0x73(%ebx),%dh
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
gs
jb     8052139 <_IO_stdin_used+0xef5>
arpl   %sp,(%eax)
je     805213d <_IO_stdin_used+0xef9>
insl   (%dx),%es:(%edi)
and    %bh,%gs:0x6f(%edx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
sub    $0x303a3430,%eax
xor    %bh,(%edx)
xor    %dh,(%eax)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    $0x7a3a3a3a,%eax
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
jne    8052167 <_IO_stdin_used+0xf23>
gs
jb     8052166 <_IO_stdin_used+0xf22>
arpl   %sp,(%eax)
je     805216a <_IO_stdin_used+0xf26>
insl   (%dx),%es:(%edi)
and    %bh,%gs:0x6f(%edx)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x69(%edi)
je     8052175 <_IO_stdin_used+0xf31>
and    %bh,(%edx)
and    %dh,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,%gs:0x73(%ebp)
jae    805217b <_IO_stdin_used+0xf37>
jb     8052195 <_IO_stdin_used+0xf51>
and    %dh,0x72(%eax)
arpl   %bp,%gs:0x73(%ecx)
imul   $0x2e652820,0x6e(%edi),%ebp
addr16
cs
sub    $0x20,%al
sub    $0x202c3430,%eax
sub    (%eax),%esi
xor    $0x2930333a,%eax
or     (%eax),%ah
and    %ah,0x2020205a
popa
insb   (%dx),%es:(%edi)
jo     80521ae <_IO_stdin_used+0xf6a>
popa
bound  %esp,0x74(%ebp)
imul   $0x656d6974,0x20(%ebx),%esp
and    %bh,0x6f(%edx)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x62(%ecx)
bound  %esi,0x65(%edx)
jbe    80521c7 <_IO_stdin_used+0xf83>
popa
je     80521ca <_IO_stdin_used+0xf86>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
inc    %ebp
inc    %esp
push   %esp
sub    %ecx,(%edx)
or     0x79(%edx),%al
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    80521e6 <_IO_stdin_used+0xfa2>
je     80521a8 <_IO_stdin_used+0xf64>
and    %ah,0x74(%ecx,%eiz,2)
and    %dh,%gs:0x61(%eax)
fs
jae    80521a7 <_IO_stdin_used+0xf63>
outsb  %ds:(%esi),(%dx)
jne    80521f7 <_IO_stdin_used+0xfb3>
gs
jb     80521f6 <_IO_stdin_used+0xfb2>
arpl   %sp,(%eax)
imul   $0x7364,0x6c(%ebp),%sp
and    %dh,0x69(%edi)
je     8052202 <_IO_stdin_used+0xfbe>
and    %bh,0x65(%edx)
jb     805220e <_IO_stdin_used+0xfca>
gs
jae    80521d0 <_IO_stdin_used+0xf8c>
or     (%eax),%al
push   %esp
push   $0x6f662065
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8052218 <_IO_stdin_used+0xfd4>
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     805221f <_IO_stdin_used+0xfdb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x6c(%esi)
popa
addr16 jae 80521e1 <_IO_stdin_used+0xf9d>
insl   (%dx),%es:(%edi)
popa
jns    80521e5 <_IO_stdin_used+0xfa1>
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80521ec <_IO_stdin_used+0xfa8>
daa
and    $0xa0a3a27,%eax
and    %ah,(%eax)
sub    $0x68282020,%eax
jns    805224b <_IO_stdin_used+0x1007>
push   $0x20296e65
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8052207 <_IO_stdin_used+0xfc3>
jo     805224a <_IO_stdin_used+0x1006>
and    %dh,%fs:0x65(%eax,%ebp,2)
and    %ah,0x69(%esi)
gs
insb   (%dx),%es:(%edi)
or     %fs:(%eax),%ah
and    %bl,0x20(%edi)
and    %ch,(%eax)
jne    805226b <_IO_stdin_used+0x1027>
fs
gs
jb     8052274 <_IO_stdin_used+0x1030>
arpl   %bp,0x72(%edi)
sub    %esp,%gs:(%eax)
jo     805226a <_IO_stdin_used+0x1026>
and    %dh,%fs:0x69(%edi)
je     8052277 <_IO_stdin_used+0x1033>
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x73(%ebp)
or     (%eax),%ah
and    %dh,(%eax)
and    %ah,(%eax)
sub    %bh,0x65(%edx)
jb     8052290 <_IO_stdin_used+0x104c>
sub    %esp,(%eax)
jo     8052286 <_IO_stdin_used+0x1042>
and    %dh,%fs:0x69(%edi)
je     8052293 <_IO_stdin_used+0x104f>
and    %bh,0x65(%edx)
jb     805229f <_IO_stdin_used+0x105b>
jae    805223c <_IO_stdin_used+0xff8>
and    %ah,(%eax)
pop    %esi
and    %ah,(%eax)
jne    80522ac <_IO_stdin_used+0x1068>
and    %dh,%gs:0x70(%ebp)
jo     80522a4 <_IO_stdin_used+0x1060>
jb     8052261 <_IO_stdin_used+0x101d>
arpl   %sp,0x73(%ecx)
and    %ch,%gs:0x66(%ecx)
and    %dh,0x6f(%eax)
jae    80522c0 <_IO_stdin_used+0x107c>
imul   $0x20200a65,0x6c(%edx),%esp
and    (%eax),%esp
and    %dh,0x73(%ebp)
and    %ch,%gs:0x70(%edi)
jo     80522ce <_IO_stdin_used+0x108a>
jae    80522ca <_IO_stdin_used+0x1086>
je     80522c8 <_IO_stdin_used+0x1084>
and    %ah,0x61(%ebx)
jae    80522cd <_IO_stdin_used+0x1089>
and    %ch,0x66(%ecx)
and    %dh,0x6f(%eax)
jae    80522e3 <_IO_stdin_used+0x109f>
imul   $0xa65,0x6c(%edx),%esp
add    %cl,(%edx)
inc    %ecx
data16
je     80522e2 <_IO_stdin_used+0x109e>
jb     805229f <_IO_stdin_used+0x105b>
popa
outsb  %ds:(%esi),(%dx)
jns    80522a3 <_IO_stdin_used+0x105f>
data16
insb   (%dx),%es:(%edi)
popa
addr16 jae 80522a9 <_IO_stdin_used+0x1065>
arpl   %bp,0x6d(%edi)
gs
jae    80522af <_IO_stdin_used+0x106b>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     80522ff <_IO_stdin_used+0x10bb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
gs
insb   (%dx),%es:(%edi)
and    %dh,%fs:0x69(%edi)
fs
je     805230e <_IO_stdin_used+0x10ca>
sub    $0x20,%al
popa
jae    80522cb <_IO_stdin_used+0x1087>
popa
and    %ah,0x63(%ebp,%eiz,2)
imul   $0x756e206c,0x61(%ebp),%ebp
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
cmp    (%edx),%ecx
je     8052327 <_IO_stdin_used+0x10e3>
outsb  %gs:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ch,0x70(%edi)
je     8052332 <_IO_stdin_used+0x10ee>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
imul   $0x202c7265,%fs:0x69(%esi),%esp
ja     8052342 <_IO_stdin_used+0x10fe>
imul   $0x20736920,0x68(%ebx),%esp
imul   $0x20450a72,%gs:0x65(%eax,%ebp,2),%esi
20
je     805235b <_IO_stdin_used+0x1117>
and    %dh,0x73(%ebp)
and    %dh,%gs:0x65(%eax,%ebp,2)
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
gs
daa
jae    805231e <_IO_stdin_used+0x10da>
popa
insb   (%dx),%es:(%edi)
je     8052367 <_IO_stdin_used+0x1123>
jb     8052372 <_IO_stdin_used+0x112e>
popa
je     805236c <_IO_stdin_used+0x1128>
and    %dh,0x65(%edx)
jo     805237e <_IO_stdin_used+0x113a>
gs
jae    8052374 <_IO_stdin_used+0x1130>
outsb  %ds:(%esi),(%dx)
je     8052373 <_IO_stdin_used+0x112f>
je     805237d <_IO_stdin_used+0x1139>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8052338 <_IO_stdin_used+0x10f4>
imul   $0x69617661,0x20(%esi),%esp
insb   (%dx),%es:(%edi)
popa
bound  %ebp,0x2c(%ebp,%eiz,2)
and    %ch,0x72(%edi)
or     0x20(%edi),%cl
je     805239c <_IO_stdin_used+0x1158>
and    %dh,0x73(%ebp)
and    %dh,%gs:0x65(%eax,%ebp,2)
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
gs
daa
jae    805235f <_IO_stdin_used+0x111b>
popa
insb   (%dx),%es:(%edi)
je     80523a8 <_IO_stdin_used+0x1164>
jb     80523b3 <_IO_stdin_used+0x116f>
popa
je     80523ad <_IO_stdin_used+0x1169>
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
gs
jb     80523b8 <_IO_stdin_used+0x1174>
arpl   %sp,(%eax)
jae    80523cc <_IO_stdin_used+0x1188>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
jae    8052379 <_IO_stdin_used+0x1135>
imul   $0x69617661,0x20(%esi),%esp
insb   (%dx),%es:(%edi)
popa
bound  %ebp,0x2e(%ebp,%eiz,2)
or     (%eax),%al
or     0x78(%ebp),%al
popa
insl   (%dx),%es:(%edi)
jo     80523db <_IO_stdin_used+0x1197>
gs
jae    80523ac <_IO_stdin_used+0x1168>
or     0x6f(%ebx),%al
outsb  %ds:(%esi),(%dx)
jbe    80523dd <_IO_stdin_used+0x1199>
jb     80523ee <_IO_stdin_used+0x11aa>
and    %dh,0x65(%ebx)
arpl   %bp,0x6e(%edi)
fs
jae    80523a3 <_IO_stdin_used+0x115f>
jae    80523ee <_IO_stdin_used+0x11aa>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
je     80523f3 <_IO_stdin_used+0x11af>
and    %ah,%gs:0x70(%ebp)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%eax)
sub    %dh,(%ecx)
cmp    %esi,(%edi)
xor    %ch,0x302d3130
xor    %esp,(%eax)
push   %ebp
push   %esp
inc    %ebx
sub    %esp,(%eax)
je     8052415 <_IO_stdin_used+0x11d1>
and    %ah,0x20(%ecx)
fs
popa
je     8052412 <_IO_stdin_used+0x11ce>
or     (%eax),%ah
and    %ah,(%eax,%eiz,1)
fs
popa
je     805241b <_IO_stdin_used+0x11d7>
and    %ch,0x7461642d
gs
cmp    $0x31324027,%eax
xor    $0x37,%al
xor    $0x38,%al
xor    (%esi),%esi
xor    $0x37,%al
daa
or     (%edx),%cl
push   %ebx
push   $0x7420776f
push   $0x69742065
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x6e(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x65(%edi)
jae    805245a <_IO_stdin_used+0x1216>
and    %ah,0x6f(%ebx)
popa
jae    8052460 <_IO_stdin_used+0x121c>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dl,0x53(%ebp)
and    %ch,(%eax)
jne    805246d <_IO_stdin_used+0x1229>
and    %dh,%gs:0x73(%edx,%edi,2)
gs
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x31(%eax,%ebp,1)
sub    %esp,(%eax)
je     8052479 <_IO_stdin_used+0x1235>
and    %ah,0x69(%esi)
outsb  %ds:(%esi),(%dx)
and    %dl,%fs:0x29(%edx,%ebx,2)
or     (%eax),%ah
and    %ah,(%eax,%eiz,1)
push   %esp
pop    %edx
cmp    $0x656d4127,%eax
jb     805248a <_IO_stdin_used+0x1246>
arpl   %sp,0x2f(%ecx)
dec    %esp
outsl  %ds:(%esi),(%dx)
jae    8052487 <_IO_stdin_used+0x1243>
inc    %ecx
outsb  %ds:(%esi),(%dx)
addr16
gs
insb   (%dx),%es:(%edi)
gs
jae    8052457 <_IO_stdin_used+0x1213>
and    %ah,0x74(%ecx,%eiz,2)
or     %gs:(%edx),%cl
push   %ebx
push   $0x7420776f
push   $0x6f6c2065
arpl   %sp,0x6c(%ecx)
and    %dh,0x6d(%ecx,%ebp,2)
and    %ah,%gs:0x6f(%esi)
jb     805246f <_IO_stdin_used+0x122b>
cmp    %eax,0x4d(%ecx)
and    %ch,0x65(%esi)
js     80524cb <_IO_stdin_used+0x1287>
and    %al,0x72(%esi)
imul   $0x206e6f20,0x79(%ecx,%eiz,2),%esp
je     80524cc <_IO_stdin_used+0x1288>
and    %dh,%gs:0x65(%edi)
jae    80524de <_IO_stdin_used+0x129a>
and    %ah,0x6f(%ebx)
popa
jae    80524e4 <_IO_stdin_used+0x12a0>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dl,0x53(%ebp)
or     (%eax),%ah
and    %ah,(%eax,%eiz,1)
fs
popa
je     80524e8 <_IO_stdin_used+0x12a4>
and    %ch,0x7461642d
gs
cmp    $0x3d5a5427,%eax
and    0x6d(%ecx),%al
gs
jb     80524fe <_IO_stdin_used+0x12ba>
arpl   %sp,0x2f(%ecx)
dec    %esp
outsl  %ds:(%esi),(%dx)
jae    80524fb <_IO_stdin_used+0x12b7>
inc    %ecx
outsb  %ds:(%esi),(%dx)
addr16
gs
insb   (%dx),%es:(%edi)
gs
jae    80524c6 <_IO_stdin_used+0x1282>
and    %dh,(%eax)
cmp    %edi,(%edx)
xor    %dh,(%eax)
and    %ch,0x65(%esi)
js     8052523 <_IO_stdin_used+0x12df>
and    %al,0x72(%esi)
imul   $0xa,(%edi),%esp
push   $0x3a707474
das
das
ja     8052538 <_IO_stdin_used+0x12f4>
ja     80524f1 <_IO_stdin_used+0x12ad>
outsb  %ds:(%si),(%dx)
jne    80524f5 <_IO_stdin_used+0x12b1>
outsl  %ds:(%esi),(%dx)
jb     8052531 <_IO_stdin_used+0x12ed>
das
jae    805253c <_IO_stdin_used+0x12f8>
data16
je     8052547 <_IO_stdin_used+0x1303>
popa
jb     8052538 <_IO_stdin_used+0x12f4>
das
arpl   %bp,0x72(%edi)
gs
jne    805254e <_IO_stdin_used+0x130a>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     8052547 <_IO_stdin_used+0x1303>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     805250d <_IO_stdin_used+0x12c9>
jne    8052562 <_IO_stdin_used+0x131e>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8052573 <_IO_stdin_used+0x132f>
popa
jb     8052564 <_IO_stdin_used+0x1320>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8052579 <_IO_stdin_used+0x1335>
jo     8052541 <_IO_stdin_used+0x12fd>
das
das
ja     8052582 <_IO_stdin_used+0x133e>
ja     805253b <_IO_stdin_used+0x12f7>
outsb  %ds:(%si),(%dx)
jne    805253f <_IO_stdin_used+0x12fb>
outsl  %ds:(%esi),(%dx)
jb     805257b <_IO_stdin_used+0x1337>
das
addr16
gs
je     8052581 <_IO_stdin_used+0x133d>
gs
insb   (%dx),%es:(%edi)
jo     805254c <_IO_stdin_used+0x1308>
or     %ds:(%eax),%al
push   %edx
gs
jo     8052593 <_IO_stdin_used+0x134f>
jb     805259a <_IO_stdin_used+0x1356>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    805259c <_IO_stdin_used+0x1358>
popa
je     805259c <_IO_stdin_used+0x1358>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 805255b <_IO_stdin_used+0x1317>
je     80525ac <_IO_stdin_used+0x1368>
and    %bh,(%eax,%ebp,2)
je     80525b6 <_IO_stdin_used+0x1372>
jo     805257e <_IO_stdin_used+0x133a>
das
das
je     80525ba <_IO_stdin_used+0x1376>
popa
outsb  %ds:(%esi),(%dx)
jae    80525b8 <_IO_stdin_used+0x1374>
popa
je     80525b8 <_IO_stdin_used+0x1374>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     80525c5 <_IO_stdin_used+0x1381>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     80525c3 <_IO_stdin_used+0x137f>
das
je     80525c4 <_IO_stdin_used+0x1380>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     805258c <_IO_stdin_used+0x1348>
arpl   %bp,0x6d(%edi)
jo     80525dd <_IO_stdin_used+0x1399>
gs
je     80525d9 <_IO_stdin_used+0x1395>
and    %ah,0x63(%edi,%ebp,2)
jne    80525e7 <_IO_stdin_used+0x13a3>
outsb  %gs:(%esi),(%dx)
je     80525df <_IO_stdin_used+0x139b>
je     80525e9 <_IO_stdin_used+0x13a5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     80525fb <_IO_stdin_used+0x13b7>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     80525f7 <_IO_stdin_used+0x13b3>
jne    8052608 <_IO_stdin_used+0x13c4>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
insl   (%dx),%es:(%edi)
jne    805261b <_IO_stdin_used+0x13d7>
je     805261a <_IO_stdin_used+0x13d6>
jo     805261f <_IO_stdin_used+0x13db>
and    %ch,%gs:0x75(%edi)
je     8052629 <_IO_stdin_used+0x13e5>
jne    805262f <_IO_stdin_used+0x13eb>
and    %ah,0x6f(%esi)
jb     805262d <_IO_stdin_used+0x13e9>
popa
je     8052636 <_IO_stdin_used+0x13f2>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x74000000,0x64(%ebp),%esp
push   $0x706f2065
je     8052641 <_IO_stdin_used+0x13fd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80525fc <_IO_stdin_used+0x13b8>
je     805264d <_IO_stdin_used+0x1409>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
jns    8052607 <_IO_stdin_used+0x13c3>
fs
popa
je     8052650 <_IO_stdin_used+0x140c>
jae    805260d <_IO_stdin_used+0x13c9>
outsw  %ds:(%esi),(%dx)
jb     8052611 <_IO_stdin_used+0x13cd>
jo     8052665 <_IO_stdin_used+0x1421>
imul   $0x20676e69,0x74(%esi),%ebp
popa
jb     8052662 <_IO_stdin_used+0x141e>
and    %ch,0x75(%ebp)
je     8052677 <_IO_stdin_used+0x1433>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8052627 <_IO_stdin_used+0x13e3>
gs
js     805266d <_IO_stdin_used+0x1429>
insb   (%dx),%es:(%edi)
jne    8052680 <_IO_stdin_used+0x143c>
imul   $0x0,0x65(%esi),%esi
je     805267e <_IO_stdin_used+0x143a>
and    %ch,%gs:0x70(%edi)
je     8052685 <_IO_stdin_used+0x1441>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8052640 <_IO_stdin_used+0x13fc>
je     8052691 <_IO_stdin_used+0x144d>
and    %dh,0x72(%eax)
imul   $0x646e6120,0x74(%esi),%ebp
and    %dh,0x65(%ebx)
je     8052651 <_IO_stdin_used+0x140d>
je     805269b <_IO_stdin_used+0x1457>
and    %dh,%gs:0x6d(%ecx,%ebp,2)
and    %ch,%gs:0x61(%ebp)
jns    805265e <_IO_stdin_used+0x141a>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8052662 <_IO_stdin_used+0x141e>
bound  %esp,0x20(%ebp)
jne    80526ba <_IO_stdin_used+0x1476>
gs and %dh,%fs:%gs:0x67(%edi,%ebp,2)
gs
je     80526b8 <_IO_stdin_used+0x1474>
gs
jb     8052653 <_IO_stdin_used+0x140f>
add    %dh,0x65(%eax,%ebp,2)
and    %ah,0x72(%ecx)
addr16 jne 80526ca <_IO_stdin_used+0x1486>
outsb  %gs:(%esi),(%dx)
je     8052681 <_IO_stdin_used+0x143d>
and    $0x616c2073,%eax
arpl   %bp,0x73(%ebx)
and    %ah,0x20(%ecx)
insb   (%dx),%es:(%edi)
gs
popa
imul   $0x272b2720,%fs:0x67(%esi),%ebp
cmp    (%edx),%ecx
ja     80526e3 <_IO_stdin_used+0x149f>
outsb  %gs:(%esi),(%dx)
and    %dh,0x73(%ebp)
imul   $0x206e6120,0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jo     80526fe <_IO_stdin_used+0x14ba>
imul   $0x206f7420,0x6e(%edi),%ebp
jae    8052703 <_IO_stdin_used+0x14bf>
arpl   %bp,%gs:0x66(%ecx)
jns    80526b9 <_IO_stdin_used+0x1475>
fs
popa
je     8052702 <_IO_stdin_used+0x14be>
sub    %dh,0x29(%ebx)
sub    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
jns    80526c6 <_IO_stdin_used+0x1482>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x6974706f,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     0x72(%ecx),%ah
addr16 jne 8052723 <_IO_stdin_used+0x14df>
outsb  %gs:(%esi),(%dx)
je     80526da <_IO_stdin_used+0x1496>
insl   (%dx),%es:(%edi)
jne    8052730 <_IO_stdin_used+0x14ec>
je     80526df <_IO_stdin_used+0x149b>
bound  %esp,0x20(%ebp)
popa
and    %ah,0x6f(%esi)
jb     8052735 <_IO_stdin_used+0x14f1>
popa
je     80526eb <_IO_stdin_used+0x14a7>
jae    8052741 <_IO_stdin_used+0x14fd>
jb     8052738 <_IO_stdin_used+0x14f4>
outsb  %ds:(%esi),(%dx)
and    %ah,0x65(%bp,%si)
imul   $0x20676e69,0x6e(%bp),%ebp
ja     8052747 <_IO_stdin_used+0x1503>
je     8052748 <_IO_stdin_used+0x1504>
and    %ah,(%edi)
sub    (%edi),%esp
and    $0x6d252d59,%eax
sub    $0x6425,%eax
add    %al,(%eax)
and    $0x6d252d59,%eax
sub    $0x25546425,%eax
dec    %eax
cmp    0x53253a4d,%ah
and    $0x7a,%eax
add    %al,(%eax)
and    $0x6d252d59,%eax
sub    $0x25546425,%eax
dec    %eax
cmp    0x53253a4d,%ah
sub    $0x25,%al
dec    %esi
and    $0x7a,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x6d252d59
sub    $0x25546425,%eax
dec    %eax
and    $0x7a,%eax
and    $0x6d252d59,%eax
sub    $0x25546425,%eax
dec    %eax
cmp    0x7a254d,%ah
add    %al,(%eax)
add    %ah,0x6d252d59
sub    $0x6425,%eax
add    %al,(%eax)
and    $0x6d252d59,%eax
sub    $0x25206425,%eax
dec    %eax
cmp    0x53253a4d,%ah
and    $0x7a3a,%eax
add    %al,(%eax)
and    $0x6d252d59,%eax
sub    $0x25206425,%eax
dec    %eax
cmp    0x53253a4d,%ah
cs
and    $0x7a3a254e,%eax
add    %al,0x13(%esi)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %cl,0x13(%ebx)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
ljmp   $0x0,$0x2080512
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
push   %eax
adc    0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
pop    %edx
adc    0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
bound  %edx,(%ebx)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
fist   (%edx)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x6b000000(%eax)
adc    0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
adc    0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
jae    80528a5 <_IO_stdin_used+0x1661>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
ja     80528b5 <_IO_stdin_used+0x1671>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
adcl   $0x805,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jle    80528bd <_IO_stdin_used+0x1679>
(bad)
incl   0x80513(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %ah,0x66(%edx,%edi,1)
cmp    0x3a(%ecx),%cl
cmp    0x3a(%edx),%dh
push   %edx
jae    8052926 <_IO_stdin_used+0x16e2>
jne    80528ee <_IO_stdin_used+0x16aa>
and    $0x25202c61,%eax
and    %ah,%fs:0x59252062
and    %ah,0x4d253a48
cmp    0x7a252053,%ah
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
mov    (%ebx),%ss
add    $0x5139408,%eax
or     %al,0x13(%esi)
add    $0x5139c08,%eax
or     %ah,0x805(%ebx,%edx,1)
add    %al,(%eax)
cmp    %ch,(%esi)
xor    (%ecx),%dh
add    %ch,0x6e(%ecx)
jbe    805299e <_IO_stdin_used+0x175a>
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     805296a <_IO_stdin_used+0x1726>
and    $0x6f662073,%eax
jb     8052971 <_IO_stdin_used+0x172d>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    80529ca <_IO_stdin_used+0x1786>
jne    80529d0 <_IO_stdin_used+0x178c>
and    %ah,0x72(%ecx)
addr16 jne 80529d0 <_IO_stdin_used+0x178c>
outsb  %gs:(%esi),(%dx)
je     8052987 <_IO_stdin_used+0x1743>
and    $0x6f662073,%eax
jb     805298e <_IO_stdin_used+0x174a>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     80529f3 <_IO_stdin_used+0x17af>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x732520
sub    $0x20,%al
and    $0x72770073,%eax
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     805299f <_IO_stdin_used+0x175b>
and    $0x25203a73,%eax
jae    80529a6 <_IO_stdin_used+0x1762>
and    $0x64252f6d,%eax
das
and    $0x59250079,%eax
sub    $0x252d6d25,%eax
add    %ah,%fs:0x4d253a48
add    %ah,0x4d253a48
cmp    0x49000053,%ah
mov    $0xbb040804,%ecx
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
push   %ebp
mov    $0xbb040804,%ecx
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
out    %eax,(%dx)
mov    $0xbb040804,%ecx
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
adc    $0xd20804ba,%eax
lods   %ds:(%esi),%al
add    $0x8,%al
dec    %esp
mov    $0x4,%cl
or     %ah,0x40804b1(%esi)
mov    $0xb3f00804,%ebx
add    $0x8,%al
or     %esi,0x4b58808(%esp,%eax,1)
or     %dh,(%eax)
mov    $0x4,%cl
or     %al,(%ebx,%edi,4)
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
(bad)
mov    $0x4,%ch
or     %ch,%bh
mov    $0x4,%ch
or     %al,(%ebx,%edi,4)
add    $0x8,%al
aas
mov    $0x4,%dh
or     %al,(%ebx,%edi,4)
add    $0x8,%al
cmp    %dh,-0x4cbaf7fc(%ebx)
add    $0x8,%al
arpl   %si,-0x4c8ff7fc(%ebx)
add    $0x8,%al
or     %esi,0x4b3a908(%esp,%eax,1)
or     %bh,0x1c0804aa(%eax)
lods   %ds:(%esi),%eax
add    $0x8,%al
xchg   %eax,%edx
scas   %es:(%edi),%eax
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
shrb   %cl,0x4b10a08(%esp,%eax,1)
or     %bh,0x7c0804aa(%eax)
mov    $0x4,%dh
or     %bl,0x40804b6(%ebx)
mov    $0xb4090804,%ebx
add    $0x8,%al
or     -0x44fbf7fc(%ecx),%dh
add    $0x8,%al
lahf
mov    $0x4,%ch
or     %ch,%dl
mov    $0x4,%dl
or     %ah,(%edi)
mov    $0x4,%bl
or     %bl,(%eax)
mov    $0xb7630804,%ecx
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
(bad)
mov    $0xbb040804,%edx
add    $0x8,%al
ret
stos   %al,%es:(%edi)
add    $0x8,%al
hlt
mov    $0x4,%bh
or     %bh,(%ebx)
mov    $0xb28c0804,%edx
add    $0x8,%al
add    $0xbb,%al
add    $0x8,%al
lret
mov    $0x4,%dl
or     %bh,0x710804aa(%eax)
mov    $0x4,%al
or     %dh,0x540804b6(%edx)
pop    %edx
add    %al,0x4d(%edi)
push   %esp
add    %dl,0x45(%edi)
push   %esp
add    %al,0x4d(%ecx)
add    %cl,0x41(%edx)
dec    %esi
push   %ebp
inc    %ecx
push   %edx
pop    %ecx
add    %bl,0x45(%ecx)
inc    %ecx
push   %edx
add    %dl,0x4d(%edi,%ecx,2)
dec    %edi
push   %edx
push   %edx
dec    %edi
push   %edi
add    %al,0x54(%ebx,%edx,2)
add    %dl,0x3d(%edx,%ebx,2)
and    (%eax),%al
pop    %eax
pop    %eax
pop    %eax
and    $0x646c2573,%eax
cmp    0x643230,%ah
inc    %ecx
add    %al,0x0(%edx)
inc    %esi
add    %al,0x0(%edi)
push   %eax
add    %dl,0x0(%ecx)
push   %ebp
add    %dl,0x0(%esi)
pop    %eax
add    %dl,0x45(%edi)
push   %ebx
push   %esp
add    %al,0x53(%edx)
push   %esp
add    %al,0x52(%ecx)
push   %esp
add    %al,0x52(%edx)
push   %esp
add    %al,0x52(%edx)
push   %ebx
push   %esp
add    %cl,0x53(%esi)
push   %esp
add    %cl,0x44(%esi)
push   %esp
add    %al,0x4c(%ebx)
push   %esp
add    %al,0x4c(%ebx)
push   %ebx
push   %esp
add    %al,0x44(%ebp)
push   %esp
add    %al,0x53(%ebx)
push   %esp
add    %al,0x44(%ebx)
push   %esp
add    %cl,0x53(%ebp)
push   %esp
add    %cl,0x44(%ebp)
push   %esp
add    %dl,0x53(%eax)
push   %esp
add    %dl,0x44(%eax)
push   %esp
add    %al,0x4b(%ecx)
push   %ebx
push   %esp
add    %al,0x4b(%ecx)
inc    %esp
push   %esp
add    %cl,0x53(%eax)
push   %esp
add    %cl,0x41(%eax)
push   %ebx
push   %esp
add    %cl,0x41(%eax)
inc    %esp
push   %esp
add    %dl,0x53(%ebx)
push   %esp
add    %dl,0x41(%edi)
push   %esp
add    %al,0x45(%ebx)
push   %esp
add    %al,0x45(%ebx)
push   %ebx
push   %esp
add    %cl,0x45(%ebp)
push   %esp
add    %cl,0x45(%ebp)
pop    %edx
add    %cl,0x45(%ebp)
push   %ebx
push   %esp
add    %cl,0x45(%ebp)
push   %ebx
pop    %edx
add    %al,0x45(%ebp)
push   %esp
add    %al,0x45(%ebp)
push   %ebx
push   %esp
add    %al,0x41(%ebx)
push   %esp
add    %dl,0x41(%ebx)
push   %ebx
push   %esp
add    %al,0x41(%ebp)
push   %esp
add    %cl,0x53(%ebp)
dec    %ebx
add    %cl,0x53(%ebp)
inc    %esp
add    %cl,0x53(%ecx)
push   %esp
add    %dl,0x47(%ebx)
push   %esp
add    %cl,0x53(%edx)
push   %esp
add    %al,0x53(%edi)
push   %esp
add    %cl,0x5a(%esi)
push   %ebx
push   %esp
add    %cl,0x5a(%esi)
inc    %esp
push   %esp
add    %dl,0x54(%ebp)
add    %dl,0x54(%ebp)
inc    %ebx
add    %bl,0x45(%ecx)
push   %ebx
push   %esp
inc    %ebp
push   %edx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x44(%edi,%ecx,2)
inc    %ecx
pop    %ecx
add    %cl,0x4f(%esi)
push   %edi
add    %cl,0x53(%ecx,%eax,2)
push   %esp
add    %dl,0x49(%eax,%ecx,2)
push   %ebx
add    %cl,0x45(%esi)
pop    %eax
push   %esp
add    %al,0x49(%esi)
push   %edx
push   %ebx
push   %esp
add    %dl,0x49(%eax,%ecx,2)
push   %edx
inc    %esp
add    %al,0x4f(%esi)
push   %ebp
push   %edx
push   %esp
dec    %eax
add    %al,0x49(%esi)
inc    %esi
push   %esp
dec    %eax
add    %dl,0x49(%ebx)
pop    %eax
push   %esp
dec    %eax
add    %dl,0x45(%ebx)
push   %esi
inc    %ebp
dec    %esi
push   %esp
dec    %eax
add    %al,0x49(%ebp)
inc    %edi
dec    %eax
push   %esp
dec    %eax
add    %cl,0x49(%esi)
dec    %esi
push   %esp
dec    %eax
add    %dl,0x4e(%ebp,%eax,2)
push   %esp
dec    %eax
add    %al,0x4c(%ebp)
inc    %ebp
push   %esi
inc    %ebp
dec    %esi
push   %esp
dec    %eax
add    %dl,0x45(%edi,%edx,2)
dec    %esp
inc    %esi
push   %esp
dec    %eax
add    %al,0x47(%ecx)
dec    %edi
add    %cl,0x45(%eax)
dec    %esi
inc    %ebx
inc    %ebp
add    %cl,0x4f(%ebp)
dec    %esi
push   %esp
dec    %eax
add    %al,0x4f(%esi)
push   %edx
push   %esp
dec    %esi
dec    %ecx
inc    %edi
dec    %eax
push   %esp
add    %dl,0x45(%edi)
inc    %ebp
dec    %ebx
add    %cl,0x4f(%eax)
push   %ebp
push   %edx
add    %cl,0x49(%ebp)
dec    %esi
push   %ebp
push   %esp
inc    %ebp
add    %cl,0x49(%ebp)
dec    %esi
add    %dl,0x45(%ebx)
inc    %ebx
dec    %edi
dec    %esi
inc    %esp
add    %dl,0x45(%ebx)
inc    %ebx
add    %al,0x45(%esi)
inc    %edx
push   %edx
push   %ebp
inc    %ecx
push   %edx
pop    %ecx
add    %cl,0x41(%ebp)
push   %edx
inc    %ebx
dec    %eax
add    %al,0x50(%ecx)
push   %edx
dec    %ecx
dec    %esp
add    %cl,0x41(%ebp)
pop    %ecx
add    %cl,0x55(%edx)
dec    %esi
inc    %ebp
add    %cl,0x55(%edx)
dec    %esp
pop    %ecx
add    %al,0x55(%ecx)
inc    %edi
push   %ebp
push   %ebx
push   %esp
add    %dl,0x45(%ebx)
push   %eax
push   %esp
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %dl,0x45(%ebx)
push   %eax
push   %esp
add    %cl,0x43(%edi)
push   %esp
dec    %edi
inc    %edx
inc    %ebp
push   %edx
add    %cl,0x4f(%esi)
push   %esi
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %al,0x43(%ebp,%eax,2)
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %dl,0x55(%ebx)
dec    %esi
inc    %esp
inc    %ecx
pop    %ecx
add    %cl,0x4f(%ebp)
dec    %esi
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%ebp,%edx,2)
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%ebp,%edx,2)
push   %ebx
add    %dl,0x45(%edi)
inc    %esp
dec    %esi
inc    %ebp
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%edi)
inc    %esp
dec    %esi
inc    %ebp
push   %ebx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
push   %ebx
add    %al,0x52(%esi)
dec    %ecx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x41(%ebx)
push   %esp
push   %ebp
push   %edx
inc    %esp
inc    %ecx
pop    %ecx
add    %al,0x2e(%ecx)
dec    %ebp
add    %dl,%cs:0x4d(%eax)
add    %dl,0x2e(%eax)
dec    %ebp
add    %al,%cs:(%eax)
add    %ah,(%ebx)
roll   %cl,(%eax,%ecx,1)
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
adc    %bl,%dl
add    $0x8,%al
add    $0xf80804d3,%eax
rolb   %cl,(%eax,%ecx,1)
jmp    8052e0c <_IO_stdin_used+0x1bc8>
add    $0x8,%al
(bad)
add    $0x8,%al
rcl    %edx
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
movsb  %ds:(%esi),%es:(%edi)
rolb   %cl,(%eax,%ecx,1)
pop    %ss
into
add    $0x8,%al
int3
int    $0x4
or     %cl,(%eax)
leave
add    $0x8,%al
out    %al,(%dx)
into
add    $0x8,%al
ror    $0x4,%dh
or     %bh,-0x32(%edi)
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
inc    %edi
into
add    $0x8,%al
ret
rolb   (%eax,%ecx,1)
sahf
rolb   (%eax,%ecx,1)
sub    $0x1d0804cf,%eax
iret
add    $0x8,%al
sbb    %dl,%ah
add    $0x8,%al
(bad)
roll   %cl,(%eax,%ecx,1)
mov    %ebx,%edx
add    $0x8,%al
jb     8052e71 <_IO_stdin_used+0x1c2d>
add    $0x8,%al
pop    %eax
roll   %cl,(%eax,%ecx,1)
aas
roll   %cl,(%eax,%ecx,1)
rcl    %cl,%ecx
add    $0x8,%al
(bad)
rolb   %cl,(%eax,%ecx,1)
push   $0xffffffd2
add    $0x8,%al
(bad)
roll   (%eax,%ecx,1)
nop
roll   (%eax,%ecx,1)
jp     8052e8f <_IO_stdin_used+0x1c4b>
add    $0x8,%al
push   %ecx
roll   (%eax,%ecx,1)
cmp    %dl,%cl
add    $0x8,%al
and    %cl,%dl
add    $0x8,%al
or     %cl,%dl
add    $0x8,%al
loopne 8052ea2 <_IO_stdin_used+0x1c5e>
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
repnz iret
add    $0x8,%al
mov    %edi,%cs
add    $0x8,%al
and    %ah,%cl
add    $0x8,%al
and    %ah,%cl
add    $0x8,%al
(bad)
iret
add    $0x8,%al
imul   $0x4,%esp,%ecx
or     %ch,%ch
roll   (%eax,%ecx,1)
cwtl
rolb   %cl,(%eax,%ecx,1)
jo     8052ec7 <_IO_stdin_used+0x1c83>
add    $0x8,%al
xor    %edx,%edx
add    $0x8,%al
and    $0xd2,%al
add    $0x8,%al
movsl  %ds:(%esi),%es:(%edi)
int3
add    $0x8,%al
stos   %al,%es:(%edi)
int    $0x4
or     %al,-0x1bf7fb31(%edx)
int3
add    $0x8,%al
dec    %ebx
iret
add    $0x8,%al
aas
iret
add    $0x8,%al
ss
int    $0x4
or     %al,-0x30(%edx)
add    $0x8,%al
rolb   %ss:(%eax,%ecx,1)
ror    %al
add    $0x8,%al
mov    $0xcd,%ch
add    $0x8,%al
mov    $0xcd,%ch
add    $0x8,%al
and    %edx,%eax
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
imul   $0x4,%esp,%ecx
or     %dh,-0x33(%eax)
add    $0x8,%al
movsl  %ds:(%esi),%es:(%edi)
int3
add    $0x8,%al
in     $0xcc,%al
add    $0x8,%al
ss
int    $0x4
or     %dl,%al
enter  $0x804,$0xaa
int    $0x4
or     %cl,(%eax)
leave
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
or     %cl,%cl
add    $0x8,%al
push   %ds
int    $0x4
or     %cl,(%eax)
leave
add    $0x8,%al
push   %ds
int    $0x4
or     %bh,-0x30(%ecx)
add    $0x8,%al
add    %ecx,%esp
add    $0x8,%al
mov    %edx,%edx
add    $0x8,%al
loop   8052f4d <_IO_stdin_used+0x1d09>
add    $0x8,%al
out    %eax,(%dx)
sub    0x11108,%eax
add    %al,%ah
(bad)
(bad)
push   %ecx
sub    0x11108,%eax
add    %cl,0x64ffffff(%eax)
sub    $0x1110805,%eax
add    %al,(%eax)
dec    %esp
(bad)
(bad)
jmp    *0x2d(%eax)
add    $0x11108,%eax
add    %dl,(%eax)
(bad)
(bad)
pushl  0x1110805(,%ebp,1)
add    %al,(%eax)
aam    $0xfe
(bad)
push   %ebx
sub    0x11108,%eax
add    %bl,-0xa000002(%eax)
sub    0x11108,%eax
add    %bl,-0x1(%esi,%edi,8)
pushl  0x2d(%ebx)
add    $0x11108,%eax
add    %ah,(%eax)
(bad)
(bad)
decl   0x11080541
add    %eax,(%eax)
add    %ah,%ah
std
(bad)
decl   0x2d(%ecx)
add    $0x11108,%eax
add    %ch,0x79fffffd(%eax)
sub    $0x1110805,%eax
add    %al,(%eax)
insb   (%dx),%es:(%edi)
std
(bad)
(bad)
mov    $0x11080529,%esp
add    %eax,(%eax)
add    %dh,(%eax)
std
(bad)
lcall  *0x2d(%ecx)
add    $0x11108,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cs
sub    $0x1110805,%eax
add    %al,(%eax)
js     8053026 <_IO_stdin_used+0x1de2>
add    %al,(%eax)
imull  (%ebx)
add    $0x11108,%eax
add    %dh,0x2bf90000(%eax,%eax,1)
add    $0x11108,%eax
add    %dh,%al
add    %al,(%eax)
add    %cl,%ch
sub    0x11108,%eax
add    %ch,(%ecx,%eax,1)
add    %al,(%eax)
lds    (%ecx),%ebp
add    $0x11108,%eax
add    %ch,0x1(%eax)
add    %al,(%eax)
mov    0x5408(,%eax,1),%ch
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%bl
sub    0x11108,%eax
add    %ah,%al
add    %eax,(%eax)
add    %bh,%ch
sub    0x11108,%eax
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
shrb   0x11108(,%eax,1)
add    %bl,0x2(%eax)
add    %al,(%eax)
ljmp   *(%ebx)
add    $0x11108,%eax
add    %dl,0x12c90000(%edx,%eax,1)
add    $0x11108,%eax
add    %dl,%al
add    (%eax),%al
add    %dh,0x2c(%ebx)
add    $0x11108,%eax
add    %bh,0x1108052b(%ebx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %es
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
or     0x11108(,%eax,1),%ch
add    %cl,-0x1(%edi,%edi,8)
decl   (%esi)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %cl,-0x1(%edi,%edi,8)
call   *(%edx)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
dec    %esp
(bad)
(bad)
call   *(%edi)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ch,(%esi)
(bad)
(bad)
lcall  *(%ebx)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
cs
(bad)
(bad)
call   *0x2c(%ebx)
add    $0x11108,%eax
add    %dl,(%eax)
(bad)
(bad)
lcall  *0x2c(%eax)
add    $0x10c08,%eax
add    %dl,(%eax)
(bad)
(bad)
lcall  *(%edi)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dl,(%eax)
(bad)
(bad)
jmp    *(%ebx)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
adc    %bh,%bh
(bad)
ljmp   *0x2c(%ecx)
add    $0x11108,%eax
add    %dl,%ah
(bad)
(bad)
ljmp   *(%eax)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
aam    $0xfe
(bad)
ljmp   *(%esp,%ebp,1)
add    $0x11108,%eax
add    %bl,0x30fffffe(%eax)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
cwtl
(bad)
(bad)
pushl  (%esp,%ebp,1)
add    $0x11108,%eax
add    %bl,-0x1(%esi,%edi,8)
(bad)
cmp    %ch,0x10c08(,%eax,1)
add    %bl,-0x1(%esi,%edi,8)
(bad)
cmp    $0x2c,%al
add    $0x11108,%eax
add    %ah,(%eax)
(bad)
(bad)
incl   0x2c(%eax)
add    $0x10c08,%eax
add    %ah,(%eax)
(bad)
(bad)
incl   0x5(%esp,%ebp,1)
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ah,%ah
std
(bad)
decl   0x2c(%ecx)
add    $0x10c08,%eax
add    %ah,%ah
std
(bad)
decl   0x2c(%esi)
add    $0x11108,%eax
add    %ch,0x52fffffd(%eax)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ch,0x57fffffd(%eax)
sub    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
test   $0xfd,%al
(bad)
lcall  *0x5(%esp,%ebp,1)
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dh,(%eax)
std
(bad)
jmp    *0x2c(%eax)
add    $0x11108,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
fs
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
push   $0xc08052c
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
insl   (%dx),%es:(%edi)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
jno    8053256 <_IO_stdin_used+0x2012>
add    $0x11108,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
jne    8053262 <_IO_stdin_used+0x201e>
add    $0x10c08,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
jp     805326e <_IO_stdin_used+0x202a>
add    $0x10c08,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
jg     805327a <_IO_stdin_used+0x2036>
add    $0x11108,%eax
add    %bh,0x0(%eax)
add    %al,(%eax)
subl   $0x0,0x10c08(,%eax,1)
js     8053262 <_IO_stdin_used+0x201e>
add    %al,(%eax)
mov    %ch,0x11108(,%eax,1)
add    %bh,0x0(%eax)
add    %al,(%eax)
mov    %gs,0x11108(,%eax,1)
add    %bh,0x0(%eax)
add    %al,(%eax)
xchg   %eax,%ecx
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dh,0x2c950000(%eax,%eax,1)
add    $0x11108,%eax
add    %dh,0x2c990000(%eax,%eax,1)
add    $0x10c08,%eax
add    %dh,0x2c9d0000(%eax,%eax,1)
add    $0x11108,%eax
add    %cl,0x1(%edx)
add    %al,(%eax)
mov    0x1108052c,%eax
add    %eax,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %al,0x2c(%ebp)
add    $0x11108,%eax
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
movsl  %ds:(%esi),%es:(%edi)
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
test   $0x1108052c,%eax
add    %eax,(%eax)
add    %bl,0x2(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%eax
sub    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dl,%al
add    (%eax),%al
add    %dh,0xc08052c(%edx)
add    %eax,(%eax)
add    %dl,%al
add    (%eax),%al
add    %dh,0x1108052b(%edi)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x1108052c(%edi)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,0x1108052c(%edx)
add    %eax,(%eax)
add    %cl,%bh
sub    0x10a08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %bh,0xa08052c(%esi)
add    %eax,(%eax)
add    %bh,%bh
(bad)
(bad)
dec    %eax
sub    $0x5,%al
or     %cl,(%edx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,%dh
sub    $0x5,%al
or     %cl,(%edx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,%dl
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %bh,%bh
(bad)
(bad)
call   *%edi
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,%ah
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,%cl
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,%bh
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %ch,%ch
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
hlt
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,0xfa000000
sub    $0x5,%al
or     %dl,(%eax)
add    %eax,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
sub    $0x1100805,%eax
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %cl,(%eax)
sub    $0x1100805,%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
cvtps2pi 0x11008,%mm0
add    %cl,(%ecx)
add    %al,(%eax)
add    %dl,0x1008052d
add    %eax,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
add    %bl,(%ebx)
sub    $0x1100805,%eax
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
and    $0x2d,%al
add    $0x11008,%eax
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
sub    $0x2d,%al
add    $0x10208,%eax
add    %bh,%bh
(bad)
(bad)
pushl  (%eax)
sub    $0x1020805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
lret   $0x52b
or     %al,(%ecx,%eax,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
ss
sub    $0x1050805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
cmp    $0x2d,%al
add    $0x10908,%eax
add    %cl,(%esi)
add    %al,(%eax)
add    %al,0x2d(%esi)
add    $0x10908,%eax
add    %al,(%edi)
add    %al,(%eax)
add    %bh,%ah
sub    $0x1090805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
dec    %ebx
sub    $0x1060805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
push   %eax
sub    $0x1070805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
push   %edi
sub    $0x1070805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
pop    %ebx
sub    $0x1080805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
bound  %ebp,0x1080805
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
ret    $0x52b
or     %cl,(%edi)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,0x2d(%esi)
add    $0x10f08,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %ch,0x2d(%edi)
add    $0x10f08,%eax
add    %al,(%ebx)
add    %al,(%eax)
add    %dh,0x2d(%ebp)
add    $0x10f08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
jnp    805353f <_IO_stdin_used+0x22fb>
add    $0x10f08,%eax
add    %al,0x7f000000
sub    $0x10f0805,%eax
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,0x10f0805(%ebp,%ebp,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %cl,0xf08052d(%ecx)
add    %eax,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %dl,0xf08052d(%eax)
add    %eax,(%eax)
add    %cl,(%ecx)
add    %al,(%eax)
add    %bl,0xf08052d(%edx)
add    %eax,(%eax)
add    %cl,(%ecx)
add    %al,(%eax)
add    %bl,0xf08052d(%edi)
add    %eax,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
add    %ah,0xf08052d(%edi)
add    %eax,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dh,0xf08052d(%eax)
add    %eax,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xb08052d,%ecx
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,%al
sub    $0x10b0805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
(bad)
sub    $0x10b0805,%eax
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
iret
sub    $0x10b0805,%eax
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
aam    $0x2d
add    $0x10b08,%eax
add    %al,(%ebx)
add    %al,(%eax)
add    %bl,%dh
sub    $0x10b0805,%eax
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
in     $0x2d,%eax
add    $0x10b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
out    %al,(%dx)
sub    $0x10b0805,%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
repz sub $0x10b0805,%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
stc
sub    $0x10b0805,%eax
add    %al,(%eax)
add    $0x0,%eax
cs
add    $0x10b08,%eax
add    %al,(%esi)
add    %al,(%eax)
add    %bl,%al
sub    0x10308,%eax
add    %bh,0xe08052b(%edi)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ecx)
cs
add    $0x10e08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%esi)
cs
add    $0x10e08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%ecx)
cs
add    $0x10e08,%eax
add    %al,(%ecx)
add    (%ecx),%al
add    %eax,(%edx)
add    %al,(%edx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    (%edx),%eax
add    $0x6,%al
add    %eax,(%edx)
add    $0x6,%al
add    %al,(%ecx)
add    (%ecx),%al
add    (%ecx),%al
add    %eax,(%edx)
add    (%ebx),%al
add    %eax,(%edx)
add    %eax,(%edx)
add    (%edx),%al
add    0x4020303,%eax
add    (%ebx),%al
add    %eax,(%ebx)
add    (%ecx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    (%edx),%al
add    %eax,(%ecx)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x1d,%al
sbb    $0x201f1f1e,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %esp,(%edx)
and    (%ebx),%esp
and    (%ebx),%esp
and    $0x24,%al
and    $0x25,%al
and    $0x28272726,%eax
sub    %ch,(%eax)
sub    %ch,(%eax)
sub    %ch,(%eax)
sub    %ebp,(%ecx)
sub    %ebp,(%ecx)
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%ebx),%ch
sub    $0x2c,%al
sub    $0x2d,%al
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
cs
cs
cs
cs
cs
cs
das
xor    %dh,(%eax)
xor    %esi,(%ecx)
xor    (%edx),%dh
xor    0x35(,%esi,1),%esi
add    %bl,(%ebx)
add    $0x9080706,%eax
or     (%esp,%ecx,1),%al
pcmpgtd (%edi),%mm1
adc    %dl,(%ebx)
movlps %xmm2,(%ebx)
adc    $0x13,%al
sbb    %esi,0x19(%eax)
adc    (%ebx),%ebx
add    $0x9080706,%eax
or     0x9080706,%al
or     (%ebx),%dl
adc    (%ebx),%edx
imul   $0x14,(%ebx),%edx
sbb    %ebx,(%ecx)
sbb    %esi,0x13(%ecx)
adc    $0x15,%al
push   %ss
sbb    %eax,0x9080706
or     (%ebx),%cl
or     $0xd,%al
push   %cs
pop    %ss
adc    %dl,(%ecx)
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
pusha
sbb    %al,0x9080706
or     (%eax),%al
or     $0x5,%al
push   %es
pop    %es
or     %cl,(%ecx)
or     (%ecx),%bl
add    $0x1b,%al
sbb    (%esi,%ebx,1),%dl
push   %ss
or     %ecx,(%ecx)
adc    (%eax),%ebx
add    (%ebx),%edx
sbb    (%esp,%edx,1),%dl
adc    $0x3b,%al
sbb    0x14(%esp,%edx,1),%edx
call   *(%esp,%edx,1)
adc    %edi,%edi
sbb    %eax,(%eax)
add    %al,(%eax)
dec    %edi
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
cmp    0x64(%ecx),%cl
imul   $0x65,0x4b(%edx),%ecx
outsb  %ds:(%esi),(%dx)
dec    %esp
xor    %esi,(%edx)
gs
data16
jno    8053803 <_IO_stdin_used+0x25bf>
cmp    0x3d(%esi),%ecx
ds
aas
inc    %eax
inc    %ecx
inc    %edx
cmp    $0x41403f3e,%eax
inc    %edx
gs
gs
pop    %esp
outsl  %ds:(%esi),(%dx)
pop    %edx
pop    %ebx
push   $0x70
pop    %eax
outsl  %ds:(%esi),(%dx)
add    $0x58080706,%eax
or     $0x11100f0e,%eax
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
add    %edx,(%edi)
sbb    %bl,(%ecx)
sbb    (%ebx),%bl
sbb    $0x1d,%al
dec    %edi
push   %ds
xor    0xc383736(,%esi,1),%esi
cmp    %edi,0x41403f3e
inc    %edx
cmp    $0x30,%al
push   %eax
das
push   %es
push   %ebx
or     %dl,0x52(%ecx)
sbb    0x56(%ebp,%edx,2),%dl
push   %edi
pop    %esi
pop    %edi
pusha
pop    %ecx
imul   $0x6d6c0063,0x62(%ecx),%esp
add    %bl,%gs:-0x1(%eax)
add    (%ebx),%al
add    $0x1f,%al
and    %ah,(%ecx)
and    (%ebx),%ah
addr16 push $0x27262524
sub    %ch,(%ecx)
sub    (%ebx),%ch
sub    $0x9,%al
or     (%ebx),%cl
sub    $0xa3a35d2e,%eax
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3e5bc14
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a33c
movsb  %ds:(%esi),%es:(%edi)
mov    %eax,0x2ba3
add    %al,0x3020000
push   %ebp
push   %edi
push   %esp
push   %esi
add    $0x52,%al
push   %ebx
add    %edi,(%eax)
cmp    0x44(%ecx),%eax
dec    %ecx
ds
push   %ecx
and    $0x1c23,%eax
push   %ds
add    %bl,0x0(%eax)
add    %bl,(%edi)
push   %es
pop    %es
adc    %cl,(%eax)
adc    $0xb0c0a09,%eax
xor    %ecx,0xe354a34
(bad)
sbb    $0x39362d00,%eax
aas
inc    %edx
inc    %ebp
cmp    $0x27,%al
and    $0x5a,%al
and    %cl,0x4c(%ebx)
dec    %esi
dec    %edi
push   %eax
dec    %ebp
aaa
cmp    0x43(%eax),%al
inc    %esi
cmp    $0x5a2f1228,%eax
add    %al,(%eax)
push   %ss
pop    %ecx
inc    %edi
dec    %eax
and    %eax,(%eax)
xor    (%eax,%eax,1),%ebp
add    %ah,(%edx)
sub    (%eax),%esi
xor    (%ebx),%bl
sbb    %ebp,(%ecx)
add    %dl,(%ecx)
cs
pop    %ebx
adc    0x0(%edx),%ebx
pop    %ss
sbb    (%eax),%al
add    %bl,(%ecx)
sub    (%ecx),%bl
adc    $0x18,%al
add    %bl,(%ecx)
add    %al,(%eax)
sbb    %es:-0x5d(%ebp),%ecx
mov    %eax,%cs:0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,%ds:0x342fd52
dec    %edx
cld
push   %ebx
push   %esp
dec    %ebx
mov    %eax,0xa3a3a3a3
mov    %eax,0x47a3a3a3
mov    %eax,0xa3a3a35d
mov    %eax,0x484ea3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa319a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0x15a3a3a3
adc    0x50(%edi),%ecx
mov    %eax,0xa3a3a3a3
push   %ecx
mov    %eax,0xa35655a3
mov    %eax,0xfaa3a3a3
dec    %esp
adc    %esp,0x57a3a3a3(%ebx)
inc    %ebp
mov    %eax,0xff5958a3
mov    %eax,0x45a3a312
pop    %ebx
add    %al,(%eax)
add    %al,(%edx)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
sbb    (%edx),%al
add    (%ebx),%bl
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
sbb    %eax,(%edx)
add    (%edx),%al
add    (%edx),%al
pop    %ss
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%eax),%bl
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%ecx),%al
add    (%ebx),%al
add    $0x5,%al
push   %es
pop    %es
or     %cl,(%ecx)
or     (%ebx),%cl
or     $0xd,%al
push   %cs
movups (%ecx),%xmm2
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8053adf <_IO_stdin_used+0x289b>
xor    %bl,0x20(%ebp)
ja     8053aea <_IO_stdin_used+0x28a6>
jae    8053aab <_IO_stdin_used+0x2867>
jo     8053aee <_IO_stdin_used+0x28aa>
jae    8053b02 <_IO_stdin_used+0x28be>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    8053aff <_IO_stdin_used+0x28bb>
push   $0x206e6120
gs
js     8053b05 <_IO_stdin_used+0x28c1>
arpl   %sp,(%eax)
jae    8053b1d <_IO_stdin_used+0x28d9>
jae    8053b1a <_IO_stdin_used+0x28d6>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     8053b38 <_IO_stdin_used+0x28f4>
jb     8053b36 <_IO_stdin_used+0x28f2>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8053b5c <_IO_stdin_used+0x2918>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    8053b52 <_IO_stdin_used+0x290e>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
sub    %ch,%bl
add    $0x8,%al
or     %dh,%cl
add    $0x8,%al
cmp    %dh,%cl
add    $0x8,%al
clc
out    %eax,(%dx)
add    $0x8,%al
cmp    %dh,%al
add    $0x8,%al
push   $0x900804f0
lock add $0x8,%al
nop
lock add $0x8,%al
nop
lock add $0x8,%al
xor    %ch,%dh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
test   $0xee,%al
add    $0x8,%al
or     %ch,%dh
add    $0x8,%al
sub    %ch,%dh
add    $0x8,%al
and    %ch,%dh
add    $0x8,%al
sbb    %ch,%dh
add    $0x8,%al
adc    %ch,%dh
add    $0x8,%al
loopne 8053b67 <_IO_stdin_used+0x2923>
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
push   %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
enter  $0x4ec,$0x8
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
fsubr  %st(6),%st
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
sbb    %ch,%ah
add    $0x8,%al
sub    %ch,%bh
add    $0x8,%al
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
mov    $0xc80804ee,%eax
in     (%dx),%al
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
enter  $0x4ec,$0x8
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
enter  $0x4ec,$0x8
xor    %ch,%ch
add    $0x8,%al
pop    %ecx
in     (%dx),%eax
add    $0x8,%al
xor    %ch,%ch
add    $0x8,%al
push   %ecx
in     (%dx),%eax
add    $0x8,%al
push   %eax
repz add $0x8,%al
push   %eax
repz add $0x8,%al
call   580d423f <optarg+0x5007d03b>
repz add $0x8,%al
call   580d4247 <optarg+0x5007d043>
repz add $0x8,%al
call   f00d424f <optarg+0xe807d04b>
repnz add $0x8,%al
call   f00d4257 <optarg+0xe807d053>
repnz add $0x8,%al
call   f00d425f <optarg+0xe807d05b>
repnz add $0x8,%al
call   f00d4267 <optarg+0xe807d063>
repnz add $0x8,%al
call   f00d426f <optarg+0xe807d06b>
repnz add $0x8,%al
call   f00d4277 <optarg+0xe807d073>
repnz add $0x8,%al
call   f00d427f <optarg+0xe807d07b>
repnz add $0x8,%al
call   f00d4287 <optarg+0xe807d083>
repnz add $0x8,%al
call   f00d428f <optarg+0xe807d08b>
repnz add $0x8,%al
call   f00d4297 <optarg+0xe807d093>
repnz add $0x8,%al
call   f00d429f <optarg+0xe807d09b>
repnz add $0x8,%al
call   f00d42a7 <optarg+0xe807d0a3>
repnz add $0x8,%al
call   f00d42af <optarg+0xe807d0ab>
repnz add $0x8,%al
call   580d42b7 <optarg+0x5007d0b3>
repz add $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %cl,%bh
cmp    0x53ad708,%al
or     %bl,%ch
cmp    0x5137508,%al
or     %ch,%dl
cmp    0x53af208,%al
or     %dl,%dh
adc    0x53af908,%al
or     %al,(%eax)
add    %al,(%eax)
add    %ah,0x25282073
jae    8053e54 <_IO_stdin_used+0x2c10>
and    %ah,0x25000a73
jae    8053e53 <_IO_stdin_used+0x2c0f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8053ea7 <_IO_stdin_used+0x2c63>
je     8053eb4 <_IO_stdin_used+0x2c70>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8053eb7 <_IO_stdin_used+0x2c73>
je     8053ec4 <_IO_stdin_used+0x2c80>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     8053ece <_IO_stdin_used+0x2c8a>
je     8053edb <_IO_stdin_used+0x2c97>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8053ea0 <_IO_stdin_used+0x2c5c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8053ef2 <_IO_stdin_used+0x2cae>
jb     8053ef9 <_IO_stdin_used+0x2cb5>
and    %ah,0x75(%edx)
addr16 jae 8053eab <_IO_stdin_used+0x2c67>
je     8053efc <_IO_stdin_used+0x2cb8>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8053f01 <_IO_stdin_used+0x2cbd>
and    %al,0x50(%edi)
dec    %esp
jbe    8053ed5 <_IO_stdin_used+0x2c91>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8053f24 <_IO_stdin_used+0x2ce0>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     8053eda <_IO_stdin_used+0x2c96>
insb   (%dx),%es:(%edi)
popa
je     8053f23 <_IO_stdin_used+0x2cdf>
jb     8053ee0 <_IO_stdin_used+0x2c9c>
cmp    $0x68,%al
je     8053f38 <_IO_stdin_used+0x2cf4>
jo     8053f00 <_IO_stdin_used+0x2cbc>
das
das
outsb  %ds:(%si),(%dx)
jne    8053efa <_IO_stdin_used+0x2cb6>
outsl  %ds:(%esi),(%dx)
jb     8053f36 <_IO_stdin_used+0x2cf2>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8053f48 <_IO_stdin_used+0x2d04>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8053f09 <_IO_stdin_used+0x2cc5>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     8053f6d <_IO_stdin_used+0x2d29>
popa
jb     8053f5e <_IO_stdin_used+0x2d1a>
cmp    (%eax),%ah
jns    8053f6c <_IO_stdin_used+0x2d28>
jne    8053f1f <_IO_stdin_used+0x2cdb>
popa
jb     8053f67 <_IO_stdin_used+0x2d23>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8053f87 <_IO_stdin_used+0x2d43>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8053f91 <_IO_stdin_used+0x2d4d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     8053fae <_IO_stdin_used+0x2d6a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     8053fad <_IO_stdin_used+0x2d69>
outsb  %ds:(%esi),(%dx)
je     8053f6b <_IO_stdin_used+0x2d27>
jo     8053fb2 <_IO_stdin_used+0x2d6e>
jb     8053fbc <_IO_stdin_used+0x2d78>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     8053fcc <_IO_stdin_used+0x2d88>
je     8053fd9 <_IO_stdin_used+0x2d95>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8053f9e <_IO_stdin_used+0x2d5a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8053fec <_IO_stdin_used+0x2da8>
je     8053ff9 <_IO_stdin_used+0x2db5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8053fbe <_IO_stdin_used+0x2d7a>
and    %ah,0x250a2c73
jae    8053fc6 <_IO_stdin_used+0x2d82>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054010 <_IO_stdin_used+0x2dcc>
je     805401d <_IO_stdin_used+0x2dd9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8053fe2 <_IO_stdin_used+0x2d9e>
and    %ah,0x250a2c73
jae    8053fea <_IO_stdin_used+0x2da6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054038 <_IO_stdin_used+0x2df4>
je     8054045 <_IO_stdin_used+0x2e01>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805400a <_IO_stdin_used+0x2dc6>
and    %ah,0x250a2c73
jae    8054012 <_IO_stdin_used+0x2dce>
and    %ah,0x25202c73
jae    805401a <_IO_stdin_used+0x2dd6>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054064 <_IO_stdin_used+0x2e20>
je     8054071 <_IO_stdin_used+0x2e2d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054036 <_IO_stdin_used+0x2df2>
and    %ah,0x250a2c73
jae    805403e <_IO_stdin_used+0x2dfa>
and    %ah,0x25202c73
jae    8054046 <_IO_stdin_used+0x2e02>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054094 <_IO_stdin_used+0x2e50>
je     80540a1 <_IO_stdin_used+0x2e5d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054066 <_IO_stdin_used+0x2e22>
and    %ah,0x250a2c73
jae    805406e <_IO_stdin_used+0x2e2a>
and    %ah,0x25202c73
jae    8054076 <_IO_stdin_used+0x2e32>
and    %ah,0x250a2c73
jae    805407e <_IO_stdin_used+0x2e3a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80540c8 <_IO_stdin_used+0x2e84>
je     80540d5 <_IO_stdin_used+0x2e91>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805409a <_IO_stdin_used+0x2e56>
and    %ah,0x250a2c73
jae    80540a2 <_IO_stdin_used+0x2e5e>
and    %ah,0x25202c73
jae    80540aa <_IO_stdin_used+0x2e66>
and    %ah,0x250a2c73
jae    80540b2 <_IO_stdin_used+0x2e6e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
nop
add    %al,0x5009808
or     %bl,%al
add    %al,0x5012008
or     %bh,0x1(%eax)
add    $0x501d008,%eax
or     %bh,(%eax)
add    0x502b008,%al
or     %dl,-0x1(%eax)
add    $0x8,%al
call   4b0d45c0 <optarg+0x4307d3bc>
outsl  %ds:(%esi),(%dx)
jo     805413d <_IO_stdin_used+0x2ef9>
jb     805412f <_IO_stdin_used+0x2eeb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8054151 <_IO_stdin_used+0x2f0d>
popa
jb     8054142 <_IO_stdin_used+0x2efe>
and    %al,0x6f(%esi)
jne    8054150 <_IO_stdin_used+0x2f0c>
fs
popa
je     805414f <_IO_stdin_used+0x2f0b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805416e <_IO_stdin_used+0x2f2a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    8054176 <_IO_stdin_used+0x2f32>
jb     8054134 <_IO_stdin_used+0x2ef0>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
clc
add    (%eax),%al
add    %bl,0x0(%esi)
add    %al,(%eax)
inc    %esp
dec    %ebp
(bad)
call   *(%ebx,%eax,1)
add    %al,(%eax)
les    -0x1(%ecx),%edx
decl   -0x2bfffffd(%eax)
pop    %edx
(bad)
(bad)
cmp    %al,(%ebx)
add    %al,(%eax)
and    $0x5c,%al
(bad)
ljmp   *0x3(%eax)
add    %al,(%eax)
in     $0x61,%al
(bad)
ljmp   *0x62040000(%ebx,%eax,1)
(bad)
inc    %esp
add    (%eax),%eax
add    %al,(%ebx,%eiz,2)
(bad)
lcall  *(%esp,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
arpl   %di,%di
decl   0x0(%esp,%eax,1)
add    %al,%ah
fs
(bad)
jmp    *0x34000004(%eax)
gs
(bad)
jmp    *%eax
add    $0x0,%al
add    %al,0x51cffff(%ebp,%eiz,2)
add    %al,(%eax)
xchg   %eax,%esp
gs
(bad)
pushl  (%eax)
add    $0x65a40000,%eax
(bad)
incl   0x0(%ebp,%eax,1)
add    %dh,-0x1(%esi,%eiz,2)
pushl  0x5(%eax)
add    %al,(%eax)
aam    $0x66
(bad)
call   *0x14000005(%eax)
addr16 (bad)
pushl  0x67540000(%ebp,%eax,1)
(bad)
push   %eax
add    $0x67940000,%eax
(bad)
ljmp   *(%esi,%eax,1)
add    %al,(%eax)
adc    $0x81,%al
(bad)
ljmp   *0x0(%esi,%eax,1)
add    %al,-0x1(%ecx,%eax,4)
decl   -0x6bfffffa(%eax)
cmp    $0x6acff,%edi
add    %dh,-0x1(%edx,%eax,4)
incl   (%eax)
pop    %es
add    %al,(%eax)
xchg   %eax,%esp
cmp    $0xffffffff,%edi
pop    %eax
pop    %es
add    %al,(%eax)
in     $0x83,%al
(bad)
ljmp   *0x0(%edi,%eax,1)
add    %al,-0x1(%esp,%eax,4)
call   *-0x5bfffff9(%eax)
test   %bh,%bh
dec    %eax
pop    %es
add    %al,(%eax)
adc    $0x85,%al
(bad)
push   %eax
pop    %es
add    %al,(%eax)
les    0x838ffff(%ebp),%eax
add    %al,(%eax)
in     $0x98,%al
(bad)
(bad)
jl     8054226 <_IO_stdin_used+0x2fe2>
add    %al,(%eax)
in     $0xa3,%al
(bad)
inc    %eax
or     %al,(%eax)
add    %al,0x908ffff(%esp,%eiz,4)
add    %al,(%eax)
mov    $0xa7,%ah
(bad)
decl   0x9(%eax)
add    %al,(%eax)
fs
test   $0xff,%al
decl   -0x6bfffff7(%eax)
test   $0xff,%al
pushl  -0x567c0000(%ecx,%ecx,1)
(bad)
(bad)
in     (%dx),%al
or     %eax,(%eax)
add    %dh,0xa30ffff(%ebx,%esi,4)
add    %al,(%eax)
push   %esp
mov    $0xff,%ch
pushl  0xa(%eax)
add    %al,(%eax)
xchg   %eax,%esp
mov    $0xff,%ch
jmp    *-0x4a4c0000(%edx,%ecx,1)
(bad)
(bad)
mov    $0xd400000a,%eax
mov    $0xff,%ch
dec    %esp
or     (%eax),%al
add    %dl,(%esi,%esi,4)
(bad)
push   %eax
or     (%eax),%al
add    %dh,(%esi,%esi,4)
(bad)
incl   (%ebx,%ecx,1)
add    %al,(%eax)
je     8054240 <_IO_stdin_used+0x2ffc>
(bad)
ljmp   *(%eax)
or     (%eax),%eax
add    %dl,%ah
mov    $0xff,%dh
lcall  *0x0(%ebx,%ecx,1)
add    %dh,0xb98ffff(%edi,%esi,4)
add    %al,(%eax)
in     $0xb7,%al
(bad)
pushl  0x7400000b(%eax)
mov    $0xbe4ffff,%eax
add    %al,(%eax)
xchg   %eax,%esp
mov    $0xbf8ffff,%eax
add    %al,(%eax)
mov    $0xb8,%ah
(bad)
decl   (%esp,%ecx,1)
add    %al,(%eax)
aam    $0xb8
(bad)
jmp    *(%eax)
or     $0x0,%al
add    %dh,%ah
mov    $0xc34ffff,%eax
add    %al,(%eax)
and    $0xb9,%al
(bad)
call   *0x0(%esp,%ecx,1)
add    %dl,-0x1(%ecx,%edi,4)
pushl  0x0(%esp,%ecx,1)
add    %al,0xc8cffff(%ecx,%edi,4)
add    %al,(%eax)
mov    $0xb9,%ah
(bad)
jmp    *-0x459c0000(%esp,%ecx,1)
(bad)
dec    %eax
or     $0x0,%al
add    %dl,0xce0ffff(%edx,%edi,4)
add    %al,(%eax)
les    0xcf8ffff(%edx),%edi
add    %al,(%eax)
hlt
mov    $0xd10ffff,%edx
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
mov    $0xd34ffff,%ebx
add    %al,(%eax)
in     $0xbb,%al
(bad)
decl   0x0(%ebp,%ecx,1)
add    %ah,(%esp,%edi,4)
(bad)
jmp    *0x0(%ebp,%ecx,1)
add    %ah,-0x1(%esp,%edi,4)
(bad)
jl     805433b <_IO_stdin_used+0x30f7>
add    %al,(%eax)
test   %bh,0xd90ff(%edi,%edi,8)
add    %ah,0xda4ffff(%esp,%edi,4)
add    %al,(%eax)
les    0xdb8ff(%edi,%edi,8),%edi
add    %ah,%ah
mov    $0xdccffff,%esp
add    %al,(%eax)
push   %esp
mov    $0xdf8ffff,%ebp
add    %al,(%eax)
(bad)
xchg   %eax,%esp
push   %cs
add    %al,(%eax)
adc    $0xc3,%al
(bad)
ljmp   *-0x3c8c0000(%esi,%ecx,1)
(bad)
call   *%eax
push   %cs
add    %al,(%eax)
mov    $0xc3,%ah
(bad)
(bad)
call   6c054387 <optarg+0x63ffd183>
(bad)
(bad)
decl   (%edi,%ecx,1)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
(bad)
pushl  (%eax)
sldt   (%eax)
(bad)
(bad)
(bad)
call   *0x0(%edi,%ecx,1)
add    %dl,%ah
(bad)
(bad)
ljmp   *0xf(%eax)
add    %al,(%eax)
and    $0xc5,%al
(bad)
lcall  *0x6400000f(%eax)
(bad)
les    (%edi),%ecx
add    %al,(%eax)
(bad)
(bad)
hlt
sldt   (%eax)
adc    $0xc6,%al
(bad)
lcall  *(%eax)
adc    %al,(%eax)
add    %al,-0x1(%esi,%eax,8)
(bad)
cmp    %dl,(%eax)
add    %al,(%eax)
je     8054388 <_IO_stdin_used+0x3144>
(bad)
call   *0x0(%eax,%edx,1)
add    %ah,0x1074ffff(%esi,%eax,8)
add    %al,(%eax)
aam    $0xc6
(bad)
call   *-0x38dc0000(%eax,%edx,1)
(bad)
ljmp   *-0x3bfffff0(%eax)
(bad)
(bad)
push   %eax
adc    %al,(%eax)
add    %ah,(%eax,%ecx,8)
(bad)
lcall  *(%ecx,%edx,1)
add    %al,(%eax)
mov    $0xc8,%ah
(bad)
pushl  0x0(%ecx,%edx,1)
add    %dh,(%ecx,%ecx,8)
(bad)
dec    %esp
adc    %eax,(%eax)
add    %dh,%ah
int3
(bad)
decl   (%edx,%edx,1)
add    %al,(%eax)
je     80543d8 <_IO_stdin_used+0x3194>
(bad)
incl   0x0(%edx,%edx,1)
add    %al,-0x1(%eax,%edx,8)
(bad)
jl     8054428 <_IO_stdin_used+0x31e4>
add    %al,(%eax)
mov    $0xd0,%ah
(bad)
(bad)
mov    $0xc4000012,%eax
sar    %bh
dec    %esp
adc    (%eax),%al
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805443f <_IO_stdin_used+0x31fb>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sub    %cl,-0x1(%edx)
incl   0x4(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805445f <_IO_stdin_used+0x321b>
js     805445d <_IO_stdin_used+0x3219>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sub    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x14cffff(%edi,%edx,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
push   %eax
add    -0x3cbef3f2(%edx,%ecx,1),%dl
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
jo     805449a <_IO_stdin_used+0x3256>
add    %al,(%eax)
mov    $0x58,%ah
(bad)
pushl  0x5(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x34000000(%eax)
dec    %esi
(bad)
lcall  *(%eax)
or     %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %edx
xchg   %eax,(%ebx)
xchg   %al,(%esp,%ecx,2)
addl   $0x0,0x14000000
add    %al,(%eax)
mov    $0x0,%ah
add    %al,(%eax)
xor    %bl,-0x1(%esi)
call   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %cl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %cl,%ah
add    %al,(%eax)
add    %bh,(%eax)
pop    %esi
(bad)
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
and    $0x1,%al
add    %al,(%eax)
loopne 80545b0 <_IO_stdin_used+0x336c>
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     8054573 <_IO_stdin_used+0x332f>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %dl,0x0(%ecx,%eax,1)
add    %dl,0x5f(%eax)
(bad)
lcall  *(%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
test   $0x1,%al
add    %al,(%eax)
sbb    $0x60,%al
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,%al
add    %eax,(%eax)
add    %cl,-0x1(%eax,%eiz,2)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
and    $0x2,%al
add    %al,(%eax)
pusha
pusha
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%al
add    %bl,-0x1(%eax,%eiz,2)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,0x0(%edx,%eax,1)
add    %bl,0x60(%eax)
(bad)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
js     80546a4 <_IO_stdin_used+0x3460>
add    %al,(%eax)
cld
pusha
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,0x3c000002(%eax)
popa
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
mov    $0x58000002,%esp
popa
(bad)
(bad)
cmp    $0x0,%eax
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xe,0x6f300e43
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
clc
add    (%eax),%al
add    %bl,-0x1(%ecx,%eiz,2)
(bad)
cmp    $0x0,%eax
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xe,0x6f300e43
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
xor    $0x3,%al
add    %al,(%eax)
pusha
popa
(bad)
incl   0x19(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x9c00e46
mov    0x41140e0a,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %dh,0x0(%ebx,%eax,1)
add    %ah,0x29ffff7a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec36302(%ebx)
add    $0x0,%al
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,-0x4bfffffd(%eax)
jp     80547be <_IO_stdin_used+0x357a>
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%eax),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %dh,0x7ae00000(%ebx,%eax,1)
(bad)
(bad)
fiadd  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x66,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %cl,(%eax)
add    $0x0,%al
add    %ch,-0x1(%ebx,%edi,2)
call   *(%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5a,0x2180e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
mov    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x4(%eax)
add    %al,(%eax)
xor    $0x7c,%al
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
je     80548a2 <_IO_stdin_used+0x365e>
add    %al,(%eax)
jo     805491e <_IO_stdin_used+0x36da>
(bad)
lcall  *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
jnp    80548bd <_IO_stdin_used+0x3679>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
cwtl
add    $0x0,%al
add    %ch,0x5effff(%esp,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%edi)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edi),%ecx
or     $0x45,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
and    $0x0,%al
add    %al,(%eax)
rolb   (%eax,%eax,1)
add    %dl,%ah
jl     80548fe <_IO_stdin_used+0x36ba>
jmp    *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x76,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %bh,%al
add    $0x0,%al
add    %bl,0xa9ffff(,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
or     %gs:(%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
arpl   %cx,(%esi)
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x5(%eax)
add    %al,(%eax)
test   %bh,-0x1(%ebp)
lcall  *(%edx)
adc    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x6900e46
(bad)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,-0x6fa00000(%ebp,%eax,1)
(bad)
(bad)
clc
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x4b00e46
daa
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %cl,%al
add    $0x9b1c0000,%eax
(bad)
call   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
xor    %bl,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%eax),%ebp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%eax),%esi
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
adc    %al,(%esi)
add    %al,(%eax)
je     80549d9 <_IO_stdin_used+0x3795>
(bad)
jmp    *(%edi)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e46
mov    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   %eax
push   %es
add    %al,(%eax)
fs
sahf
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
nop
push   %es
add    %al,(%eax)
aam    $0x9e
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
mov    $0xd8000006,%esp
sahf
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,%ah
push   %es
add    %al,(%eax)
nop
lahf
(bad)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
cmp    %al,(%edi)
add    %al,(%eax)
jl     8054b0f <_IO_stdin_used+0x38cb>
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %bh,0x7(%eax)
add    %al,(%eax)
fsubrl 0x36ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x55180000(%edi,%eax,1)
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,%al
pop    %es
add    %al,(%eax)
hlt
stos   %al,%es:(%edi)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,%ah
pop    %es
add    %al,(%eax)
add    %ch,0x3fffff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
clc
pop    %es
add    %al,(%eax)
sbb    $0xab,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%eax,%ecx,1)
add    %al,(%eax)
sub    %ch,0x38ffff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
xor    %cl,(%eax)
add    %al,(%eax)
inc    %esp
stos   %eax,%es:(%edi)
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
or     %al,%fs:(%eax)
add    %dh,-0x55(%eax)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ah,0x14000008(%eax)
lods   %ds:(%esi),%al
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
mov    $0x2c000008,%eax
lods   %ds:(%esi),%al
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
or     %al,(%eax)
add    %cl,0x1affffac(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
or     %eax,(%eax)
add    %dl,0x19ffff(%esp,%ebp,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x9,%al
add    %al,(%eax)
mov    0x18ffffac,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
or     %eax,(%eax)
add    %ch,0x17ffff(%esp,%ebp,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
cmp    $0x9,%al
add    %al,(%eax)
mov    $0x2dffffac,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,0x0(%ecx,%ecx,1)
add    %cl,%al
lods   %ds:(%esi),%al
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,0x0(%ecx,%ecx,1)
add    %bl,%al
lods   %ds:(%esi),%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
or     %eax,(%eax)
add    %dh,%al
lods   %ds:(%esi),%al
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
or     %eax,(%eax)
add    %cl,(%eax)
lods   %ds:(%esi),%eax
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
rorb   (%ecx)
add    %al,(%eax)
xchg   %eax,%esp
lods   %ds:(%esi),%eax
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
call   b4054e1e <optarg+0xabffdc1a>
lods   %ds:(%esi),%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
les    0x23ffff(%ebp),%ebp
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
sbb    %cl,(%edx)
add    %al,(%eax)
fsubrl 0xa5ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cmp    $0xa,%al
add    %al,(%eax)
push   $0x33ffffae
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %esp
or     (%eax),%al
add    %dl,0x33ffffae(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
or     (%eax),%al
add    %bh,0x33ffffae(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
test   %cl,(%edx)
add    %al,(%eax)
loopne 8054e60 <_IO_stdin_used+0x3c1c>
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x13fffff6(%eax)
scas   %es:(%edi),%al
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x51080000(%edx,%ecx,1)
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,%al
or     (%eax),%al
add    %al,(%edi,%ebp,4)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,%ah
or     (%eax),%al
add    %dl,(%eax)
scas   %es:(%edi),%eax
(bad)
ljmp   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
pop    %edi
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bl,0x0(%eax)
or     (%eax),%eax
add    %dl,-0x1(%edi,%ebp,4)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pushf
or     (%eax),%eax
add    %ch,(%eax)
mov    $0xff,%ah
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dh,-0x4ba00000(%ebx,%ecx,1)
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
fmuls  (%ebx)
add    %al,(%eax)
pushf
mov    $0xff,%ah
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
lock or (%eax),%eax
add    %al,%ah
mov    $0xff,%ah
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
adc    $0xc,%al
add    %al,(%eax)
push   %eax
mov    $0xff,%ch
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
cmp    %cl,(%eax,%eax,1)
add    %bl,-0x1(%ebp,%esi,4)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
pop    %esp
or     $0x0,%al
add    %ch,-0x4b(%eax)
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
jo     80550a6 <_IO_stdin_used+0x3e62>
add    %al,(%eax)
fs
mov    $0xff,%ch
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
mov    0x8400000c,%al
mov    $0xff,%ch
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
int3
or     $0x0,%al
add    %bl,0x5dffffb5(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
cld
or     $0x0,%al
add    %cl,%al
mov    $0xff,%ch
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
and    %cl,0xb5f40000
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,0xd(%eax)
add    %al,(%eax)
add    $0xb6,%al
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
or     $0xb6180000,%eax
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,0x0(%ebp,%ecx,1)
add    %ch,(%eax)
mov    $0xff,%dh
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x49c80000(%ebp,%ecx,1)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,0x0(%eax,%eax,1)
add    %dh,0x7400000d(%eax)
mov    $0xff,%dh
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
clc
or     $0xb6cc0000,%eax
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ah,(%esi,%ecx,1)
add    %al,(%eax)
add    %dh,0x8cffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bh,0x0(%esi,%ecx,1)
add    %bh,(%eax)
mov    $0xff,%bh
(bad)
js     80552ae <_IO_stdin_used+0x406a>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     80552cf <_IO_stdin_used+0x408b>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
aam    $0xe
add    %al,(%eax)
pusha
mov    $0xff,%bh
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
adc    $0xf,%al
add    %al,(%eax)
loopne 80552fc <_IO_stdin_used+0x40b8>
(bad)
pushl  0x1(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%esi)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
dec    %esp
sldt   (%eax)
sub    %bh,0x1c2ff(%edi,%edi,8)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%esi)
add    0x41100e0a(%ebp),%al
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %al,-0x42400000(%edi,%ecx,1)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,%al
sldt   (%eax)
hlt
mov    $0x2ffff,%ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
aam    $0xf
add    %al,(%eax)
lock mov $0x3cffff,%ebp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0xd0
fwait
add    $0x8,%al
mov    $0x9b,%al
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
inc    %eax
mov    (%eax,%ecx,1),%es
or     $0x2c000000,%eax
adc    0x1908,%al
add    %cl,(%eax)
outsl  %ds:(%esi),(%dx)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x6f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
sbb    %al,0x60804(%edi)
add    %al,(%eax)
clc
addl   $0xa,(%eax,%ecx,1)
jnp    8056f6d <_IO_stdin_used+0x5d29>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
jo     8056f88 <_IO_stdin_used+0x5d44>
or     %al,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%eax)
mov    %es,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
enter  $0x48b,$0x8
adc    (%eax),%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x38(%edi)
mov    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x6c(%edi)
mov    (%eax,%ecx,1),%al
add    %al,(%eax)
adc    $0x6f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x69f7fb72(%esi)
mov    (%eax,%ecx,1),%es
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %es
popl   (%eax,%ecx,1)
push   %ss
popl   (%eax,%ecx,1)
popl   %es:(%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8056fd9 <_IO_stdin_used+0x5d95>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    805701a <_IO_stdin_used+0x5dd6>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    805705b <_IO_stdin_used+0x5e17>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    805709c <_IO_stdin_used+0x5e58>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
xor    $0x29,%al
add    $0x4a31008,%eax
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %dl,0x1000805(%ecx,%esi,2)
add    %al,(%eax)
and    %dh,0x5(%edx)
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
fs
popa
je     69 <__ctype_toupper_loc@plt-0x8048e17>
add    %al,(%eax)
add    %al,(%eax)
mov    $0x3b,%bh
int    $0x80
