das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,0x60a0fae8(%eax)
jne    804813c <strcmp@plt-0xe14>
or     %ah,0x6d246b61(%edx)
add    (%ebx),%ebx
popa
icebp
das
.byte 0x32
dec    %eax
add    (%eax),%eax
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,(%edx)
add    %al,%al
add    %dl,(%edx)
and    %eax,-0x37a4ff69(%eax)
sub    (%eax),%ch
add    %al,%al
add    %ecx,0x0(%eax)
add    %al,(%eax)
dec    %ebx
add    %al,(%eax)
add    %dl,0x0(%ebp)
add    %al,(%eax)
enter  $0x8fbe,$0xeb
sub    %bl,0x86531c8c
xor    -0x6189af44(%ecx),%esp
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     80481bb <strcmp@plt-0xd95>
ds
leave
loope  80481a1 <strcmp@plt-0xdaf>
dec    %ebx
jecxz  80481b8 <strcmp@plt-0xd98>
xchg   %eax,%esi
mov    0xdc769789,%al
out    %al,(%dx)
mov    %al,0xf54162e4
dec    %eax
pop    %ebx
int3
fstpt  %ds:(%ebx)
mov    $0x763b96e7,%ecx
dec    %edi
notb   -0x6046df1d(%ecx)
push   %cs
ds
and    $0x3,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
nop
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jno    804825b <strcmp@plt-0xcf5>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
addl   $0x0,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
testb  $0x0,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x3(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
(bad)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jbe    80482cb <strcmp@plt-0xc85>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
into
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    (%ebx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%cl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lea    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sgdtl  (%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aam    $0x0
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     (%dx),%eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x3(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jb     804841c <strcmp@plt-0xb34>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ebx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jns    804848c <strcmp@plt-0xac4>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
loop   80484ba <strcmp@plt-0xa96>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    (%bx,%si),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jge    804853b <strcmp@plt-0xa15>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fwait
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jge    804856a <strcmp@plt-0x9e6>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %esi
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
faddl  (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %ebp
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popa
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x8000001(%ebp)
xchg   %eax,%edx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%eax)
add    %ah,-0x7fffffff(%esi)
xchg   %eax,%ebx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%esi)
add    (%eax),%al
add    %al,%al
xchg   %eax,%edx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%eax)
add    %dh,0x3(%ebp)
add    %al,(%eax)
inc    %eax
xchg   %eax,%ebx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bh,(%eax)
add    (%eax),%al
add    %al,0x5(%ebx,%edx,4)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
addb   $0x0,(%ebx)
add    %ah,-0x6d(%eax)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x0(%eax)
add    %al,(%eax)
cmp    %dl,0x40805(%ebp)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
test   %bh,0x408(,%eax,1)
add    %dl,(%ecx)
add    %cl,(%edi)
add    %ch,%cl
add    %al,(%eax)
add    %ah,-0x6d(%eax)
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %al,0x3(%esi)
add    %al,(%eax)
xor    %ch,%cl
add    $0x8,%al
xchg   %eax,%edi
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x29f00
add    %al,-0x6d(%eax)
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %al,%bl
add    (%eax),%al
add    %al,(%eax)
lock add $0x8,%al
add    0x120000,%ecx
or     $0xba00,%eax
add    %bl,0x4080593(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,-0xfffffff(%ebp)
call   8408f76 <argp_program_version+0x3afa3e>
add    %al,(%eax)
adc    (%eax),%al
or     $0x13700,%eax
add    %al,%al
roll   %cl,(%eax,%ecx,1)
aas
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x28500
add    %dl,%al
jmp    9238f96 <argp_program_version+0x11dfa5e>
add    %al,(%eax)
adc    (%eax),%al
.byte 0xd
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804880f <strcmp@plt-0x741>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    804881d <strcmp@plt-0x733>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x65(%ebx)
je     804882b <strcmp@plt-0x725>
imul   $0x6b636f6c,0x66(%eax,%eax,1),%esp
imul   $0x5f5f,0x0(%ebp,%eiz,2),%bp
jo     8048839 <strcmp@plt-0x717>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x65,(%eax),%eax
js     804883c <strcmp@plt-0x714>
je     80487d5 <strcmp@plt-0x77b>
gs
js     804883d <strcmp@plt-0x713>
arpl   %bp,0x73(%eax,%eax,1)
gs
je     804884b <strcmp@plt-0x705>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804885d <strcmp@plt-0x6f3>
outsl  %ds:(%esi),(%dx)
ja     804884f <strcmp@plt-0x701>
add    %dh,0x74(%ebx)
jb     804885f <strcmp@plt-0x6f1>
arpl   %bp,0x70(%ebp)
add    %ah,0x6e(%ebx,%eiz,2)
addr16
gs
je     8048870 <strcmp@plt-0x6e0>
gs
js     8048873 <strcmp@plt-0x6dd>
add    %ah,0x72(%ecx)
addr16 jo 8048864 <strcmp@plt-0x6ec>
jo     8048879 <strcmp@plt-0x6d7>
outsl  %ds:(%esi),(%dx)
addr16 jb 804886c <strcmp@plt-0x6e4>
insl   (%dx),%es:(%edi)
pop    %edi
jbe    8048874 <strcmp@plt-0x6dc>
jb     8048884 <strcmp@plt-0x6cc>
imul   $0x72747300,0x6e(%edi),%ebp
jb     804887d <strcmp@plt-0x6d3>
push   $0x69700072
jo     8048886 <strcmp@plt-0x6ca>
add    %ah,0x67(%ebx,%eiz,2)
gs
je     804889c <strcmp@plt-0x6b4>
gs
js     804889f <strcmp@plt-0x6b1>
add    %dh,0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %ah,0x6f(%esi)
jb     80488a2 <strcmp@plt-0x6ae>
add    %bl,0x5f(%edi)
jae    80488b0 <strcmp@plt-0x6a0>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x67726100,0x74(%esi),%ebp
jo     80488b6 <strcmp@plt-0x69a>
jo     80488cb <strcmp@plt-0x685>
outsl  %ds:(%esi),(%dx)
addr16 jb 80488be <strcmp@plt-0x692>
insl   (%dx),%es:(%edi)
pop    %edi
jbe    80488c6 <strcmp@plt-0x68a>
jb     80488d6 <strcmp@plt-0x67a>
imul   $0x6f6f685f,0x6e(%edi),%ebp
imul   $0x72,(%eax),%eax
gs
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     804887a <strcmp@plt-0x6d6>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x72(%eax)
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 80488e8 <strcmp@plt-0x668>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    8048911 <strcmp@plt-0x63f>
gs
jb     8048915 <strcmp@plt-0x63b>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     8048913 <strcmp@plt-0x63d>
pop    %edi
addr16
gs
je     8048912 <strcmp@plt-0x63e>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    804892b <strcmp@plt-0x625>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80488be <strcmp@plt-0x692>
jae    8048934 <strcmp@plt-0x61c>
jb     8048936 <strcmp@plt-0x61a>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dh,0x74(%ebx)
jb     804892c <strcmp@plt-0x624>
push   $0x6c756e72
add    %ah,0x72(%ecx)
addr16 jo 8048933 <strcmp@plt-0x61d>
popaw
imul   $0x61630065,0x72(%ebp,%esi,2),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048959 <strcmp@plt-0x5f7>
jb     8048953 <strcmp@plt-0x5fd>
outsb  %gs:(%esi),(%dx)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048954 <strcmp@plt-0x5fc>
je     80488f1 <strcmp@plt-0x65f>
pop    %edi
pop    %edi
gs
jb     8048968 <strcmp@plt-0x5e8>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
jb     8048970 <strcmp@plt-0x5e0>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %dh,0x74(%ebx)
jb     8048987 <strcmp@plt-0x5c9>
fs
jne    804898c <strcmp@plt-0x5c4>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jo     8048985 <strcmp@plt-0x5cb>
jo     804899d <strcmp@plt-0x5b3>
add    %bl,0x5f(%edi)
data16
js     804899d <strcmp@plt-0x5b3>
je     804898d <strcmp@plt-0x5c3>
je     8048964 <strcmp@plt-0x5ec>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     80489a7 <strcmp@plt-0x5a9>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80489a5 <strcmp@plt-0x5ab>
outsl  %ds:(%esi),(%dx)
jne    80489b8 <strcmp@plt-0x598>
add    %ah,0x72(%ecx)
addr16 jo 80489a9 <strcmp@plt-0x5a7>
push   $0x706c65
data16
jo     80489c7 <strcmp@plt-0x589>
je     80489c7 <strcmp@plt-0x589>
add    %ah,0x72(%ecx)
addr16 jo 80489b9 <strcmp@plt-0x597>
jo     80489ce <strcmp@plt-0x582>
outsl  %ds:(%esi),(%dx)
addr16 jb 80489c1 <strcmp@plt-0x58f>
insl   (%dx),%es:(%edi)
pop    %edi
bound  %esi,0x67(%ebp)
pop    %edi
popa
fs
fs
jb     80489d0 <strcmp@plt-0x580>
jae    80489e0 <strcmp@plt-0x570>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jbe    80489ec <strcmp@plt-0x564>
outsb  %ds:(%esi),(%dx)
jo     80489ee <strcmp@plt-0x562>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x6d,(%eax),%eax
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048a02 <strcmp@plt-0x54e>
jb     80489f3 <strcmp@plt-0x55d>
popa
jae    80489f8 <strcmp@plt-0x558>
arpl   %bp,0x70(%ebp)
add    %ch,0x62(%ebp)
jae    8048a04 <strcmp@plt-0x54c>
outsb  %ds:(%esi),(%dx)
imul   $0x69677465,0x67(%eax,%eax,1),%esi
add    %ah,%fs:0x72(%ecx)
addr16 jo 8048a0a <strcmp@plt-0x546>
gs
jb     8048a20 <strcmp@plt-0x530>
pop    %edi
gs
js     8048a1b <strcmp@plt-0x535>
je     8048a13 <strcmp@plt-0x53d>
jae    8048a2a <strcmp@plt-0x526>
popa
je     8048a2e <strcmp@plt-0x522>
jae    80489bb <strcmp@plt-0x595>
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048a32 <strcmp@plt-0x51e>
outsb  %ds:(%esi),(%dx)
jbe    80489d0 <strcmp@plt-0x580>
jae    8048a46 <strcmp@plt-0x50a>
fs
gs
jb     8048a48 <strcmp@plt-0x508>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
addr16
gs
je     8048a49 <strcmp@plt-0x507>
outsl  %ds:(%esi),(%dx)
jae    8048a58 <strcmp@plt-0x4f8>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x65(%edi)
je     8048a64 <strcmp@plt-0x4ec>
imul   $0x74697277,0x66(%eax,%eax,1),%esp
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8048a63 <strcmp@plt-0x4ed>
add    %dh,0x74(%ebx)
jb     8048a68 <strcmp@plt-0x4e8>
jb     8048a77 <strcmp@plt-0x4d9>
outsl  %ds:(%esi),(%dx)
jb     8048a67 <strcmp@plt-0x4e9>
jb     8048a0a <strcmp@plt-0x546>
jae    8048a80 <strcmp@plt-0x4d0>
jb     8048a71 <strcmp@plt-0x4df>
push   $0x75660072
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x66(%ebx)
imul   $0x70677261,0x0(%ebp,%eiz,2),%ebp
pop    %edi
gs
jb     8048a97 <strcmp@plt-0x4b9>
outsl  %ds:(%esi),(%dx)
jb     8048a28 <strcmp@plt-0x528>
pop    %edi
pop    %edi
jbe    8048a92 <strcmp@plt-0x4be>
jo     8048aa0 <strcmp@plt-0x4b0>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x70,(%eax),%eax
jb     8048aa9 <strcmp@plt-0x4a7>
addr16 jb 8048a9e <strcmp@plt-0x4b2>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048ac3 <strcmp@plt-0x48d>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x73(%ecx)
outsl  %ds:(%esi),(%dx)
jb     8048ace <strcmp@plt-0x482>
add    %ah,0x72(%ecx)
addr16 jo 8048abf <strcmp@plt-0x491>
jo     8048ac3 <strcmp@plt-0x48d>
jb     8048ad7 <strcmp@plt-0x479>
add    %dh,%gs:0x6c(%ebx)
gs
gs
jo     8048a6c <strcmp@plt-0x4e4>
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048ae5 <strcmp@plt-0x46b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048adf <strcmp@plt-0x471>
jb     8048adb <strcmp@plt-0x475>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
jae    8048af4 <strcmp@plt-0x45c>
jb     8048aef <strcmp@plt-0x461>
outsb  %ds:(%esi),(%dx)
je     8048aef <strcmp@plt-0x461>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048afa <strcmp@plt-0x456>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048b01 <strcmp@plt-0x44f>
js     8048b12 <strcmp@plt-0x43e>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x67746573,0x0(%esi),%ebp
imul   $0x74697277,0x66(%eax,%eax,1),%esp
gs
pop    %edi
jne    8048b23 <strcmp@plt-0x42d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %dh,%fs:0x74(%ebx)
jb     8048b23 <strcmp@plt-0x42d>
insl   (%dx),%es:(%edi)
jo     8048ac3 <strcmp@plt-0x48d>
jae    8048b39 <strcmp@plt-0x417>
jb     8048b2c <strcmp@plt-0x424>
jb     8048b3b <strcmp@plt-0x415>
outsl  %ds:(%esi),(%dx)
jb     8048acc <strcmp@plt-0x484>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048b4c <strcmp@plt-0x404>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x70677261,0x0(%esi),%ebp
pop    %edi
jae    8048b59 <strcmp@plt-0x3f7>
popa
je     8048b4d <strcmp@plt-0x403>
pop    %edi
push   $0x706c65
pop    %edi
pop    %edi
outsl  %ds:(%esi),(%dx)
jbe    8048b58 <strcmp@plt-0x3f8>
jb     8048b5b <strcmp@plt-0x3f5>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048af9 <strcmp@plt-0x457>
data16
jo     8048b71 <strcmp@plt-0x3df>
je     8048b71 <strcmp@plt-0x3df>
pop    %edi
jne    8048b6f <strcmp@plt-0x3e1>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b83 <strcmp@plt-0x3cd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b8e <strcmp@plt-0x3c2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b92 <strcmp@plt-0x3be>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048ba5 <strcmp@plt-0x3ab>
popa
jb     8048ba8 <strcmp@plt-0x3a8>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
pop    %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
push   %es
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
lahf
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ecx)
imul   $0x70000,(%ecx),%ecx
test   $0x10000003,%eax
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x60000,0xd(%ecx),%ebp
mov    $0x3,%ch
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x3bf,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x40000,%eax
leave
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%ebx)
add    %dl,%bl
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
fild   (%ebx)
add    %al,(%eax)
add    %al,(%eax)
cld
popl   0x1d0608
add    %al,-0x6d(%eax)
add    $0x4b0508,%eax
add    %al,0x5(%ebx,%edx,4)
or     %al,0x6000004c
xchg   %eax,%ebx
add    $0x4d0508,%eax
add    %al,0x5080593(%eax)
dec    %ecx
or     $0x90,%al
add    $0x10708,%eax
add    %dl,(%eax)
nop
add    $0x20708,%eax
add    %dl,(%eax,%edx,4)
add    $0x30708,%eax
add    %bl,(%eax)
nop
add    $0x40708,%eax
add    %bl,(%eax,%edx,4)
add    $0x50708,%eax
add    %ah,(%eax)
nop
add    $0x60708,%eax
add    %ah,(%eax,%edx,4)
add    $0x70708,%eax
add    %ch,(%eax)
nop
add    $0x80708,%eax
add    %ch,(%eax,%edx,4)
add    $0x90708,%eax
add    %dh,(%eax)
nop
add    $0xa0708,%eax
add    %dh,(%eax,%edx,4)
add    $0xb0708,%eax
add    %bh,(%eax)
nop
add    $0xc0708,%eax
add    %bh,(%eax,%edx,4)
add    $0xd0708,%eax
add    %al,-0x70(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%edx,4)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
nop
add    $0x100708,%eax
add    %cl,0x5(%eax,%edx,4)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x70(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%edx,4)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x70(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%edx,4)
or     %al,(%edi)
adc    $0x90600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%edx,4)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080590
sbb    %al,(%eax)
add    %ch,0x5(%eax,%edx,4)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x70(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%edx,4)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x70(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%edx,4)
or     %al,(%edi)
sbb    $0x90800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%edx,4)
add    %al,(%eax)
mov    %dl,0x20070805(%eax)
add    %al,(%eax)
mov    %ss,0x21070805(%eax)
add    %al,(%eax)
nop
nop
add    $0x220708,%eax
add    %dl,0x23070805(%eax,%edx,4)
add    %al,(%eax)
cwtl
nop
add    $0x240708,%eax
add    %bl,0x25070805(%eax,%edx,4)
add    %al,(%eax)
mov    0x7080590,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
nop
add    $0x270708,%eax
add    %ch,0x7080590(%eax)
sub    %al,(%eax)
add    %ch,0x29070805(%eax,%edx,4)
add    %al,(%eax)
mov    $0x90,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%edx,4)
add    %al,(%eax)
mov    $0x7080590,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%edx,4)
add    %al,(%eax)
rclb   $0x0,0x2e070805(%eax)
add    %al,%ah
nop
add    $0x2f0708,%eax
add    %cl,%al
nop
add    $0x300708,%eax
add    %cl,%ah
nop
add    $0x310708,%eax
add    %dl,%al
nop
add    $0x320708,%eax
add    %dl,%ah
nop
add    $0x330708,%eax
add    %bl,%al
nop
add    $0x340708,%eax
add    %bl,%ah
nop
add    $0x350708,%eax
add    %ah,%al
nop
add    $0x360708,%eax
add    %ah,%ah
nop
add    $0x370708,%eax
add    %ch,%al
nop
add    $0x380708,%eax
add    %ch,%ah
nop
add    $0x390708,%eax
add    %dh,%al
nop
add    $0x3a0708,%eax
add    %dh,%ah
nop
add    $0x3b0708,%eax
add    %bh,%al
nop
add    $0x3c0708,%eax
add    %bh,%ah
nop
add    $0x3d0708,%eax
add    %al,(%eax)
xchg   %eax,%ecx
add    $0x3e0708,%eax
add    %al,(%ecx,%edx,4)
add    $0x3f0708,%eax
add    %cl,(%eax)
xchg   %eax,%ecx
add    $0x400708,%eax
add    %cl,(%ecx,%edx,4)
add    $0x410708,%eax
add    %dl,(%eax)
xchg   %eax,%ecx
add    $0x420708,%eax
add    %dl,(%ecx,%edx,4)
add    $0x430708,%eax
add    %bl,(%eax)
xchg   %eax,%ecx
add    $0x440708,%eax
add    %bl,(%ecx,%edx,4)
add    $0x450708,%eax
add    %ah,(%eax)
xchg   %eax,%ecx
add    $0x460708,%eax
add    %ah,(%ecx,%edx,4)
add    $0x470708,%eax
push   %ebx
sub    $0x8,%esp
call   8049730 <__sprintf_chk@plt+0x380>
add    $0x100e3,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048f32 <strcmp@plt-0x1e>
call   8049110 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8059004
jmp    *0x8059008
add    %al,(%eax)
jmp    *0x805900c
push   $0x0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059010
push   $0x8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059014
push   $0x10
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059018
push   $0x18
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805901c
push   $0x20
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059020
push   $0x28
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059024
push   $0x30
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059028
push   $0x38
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805902c
push   $0x40
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059030
push   $0x48
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059034
push   $0x50
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059038
push   $0x58
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805903c
push   $0x60
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059040
push   $0x68
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059044
push   $0x70
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059048
push   $0x78
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805904c
push   $0x80
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059050
push   $0x88
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059054
push   $0x90
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059058
push   $0x98
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805905c
push   $0xa0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059060
push   $0xa8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059064
push   $0xb0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059068
push   $0xb8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805906c
push   $0xc0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059070
push   $0xc8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059074
push   $0xd0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059078
push   $0xd8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805907c
push   $0xe0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059080
push   $0xe8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059084
push   $0xf0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059088
push   $0xf8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805908c
push   $0x100
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059090
push   $0x108
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059094
push   $0x110
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059098
push   $0x118
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805909c
push   $0x120
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590a0
push   $0x128
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590a4
push   $0x130
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590a8
push   $0x138
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590ac
push   $0x140
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590b0
push   $0x148
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590b4
push   $0x150
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590b8
push   $0x158
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590bc
push   $0x160
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590c0
push   $0x168
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590c4
push   $0x170
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590c8
push   $0x178
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590cc
push   $0x180
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590d0
push   $0x188
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590d4
push   $0x190
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590d8
push   $0x198
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590dc
push   $0x1a0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590e0
push   $0x1a8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590e4
push   $0x1b0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590e8
push   $0x1b8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590ec
push   $0x1c0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590f0
push   $0x1c8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590f4
push   $0x1d0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590f8
push   $0x1d8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x80590fc
push   $0x1e0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059100
push   $0x1e8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059104
push   $0x1f0
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059108
push   $0x1f8
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805910c
push   $0x200
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059110
push   $0x208
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059114
push   $0x210
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059118
push   $0x218
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x805911c
push   $0x220
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059120
push   $0x228
jmp    8048f40 <strcmp@plt-0x10>
jmp    *0x8059124
push   $0x230
jmp    8048f40 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x20,%esp
mov    0xc(%ebp),%ebx
movl   $0x8054ffe,0x4(%esp)
movl   $0x6,(%esp)
call   8049280 <setlocale@plt>
movl   $0x8053d3c,0x4(%esp)
movl   $0x8054861,(%esp)
call   80492f0 <bindtextdomain@plt>
movl   $0x8054861,(%esp)
call   8049040 <textdomain@plt>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804fe20 <argp_parse+0xe20>
movl   $0x80591c8,0x4(%esp)
movl   $0x8053f83,(%esp)
call   804fd90 <argp_parse+0xd90>
mov    0x8(%ebp),%eax
movl   $0x0,0x14(%esp)
movl   $0x0,0x10(%esp)
movl   $0x8,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x8059160,(%esp)
movl   $0x8049800,0x8059308
08
movl   $0x1,0x80592c0
00
call   804f000 <argp_parse>
test   %eax,%eax
jne    80495c1 <__sprintf_chk@plt+0x211>
movzwl 0x8059528,%eax
mov    0x805952c,%ebx
cmp    $0x5,%ax
je     80494e5 <__sprintf_chk@plt+0x135>
cmp    $0xd,%ax
je     80494e5 <__sprintf_chk@plt+0x135>
cmpb   $0x0,0x8059530
jne    80494c9 <__sprintf_chk@plt+0x119>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
mov    %eax,0x8059534
je     80494c9 <__sprintf_chk@plt+0x119>
cmp    %eax,%ebx
jae    80494c9 <__sprintf_chk@plt+0x119>
sub    %ebx,%eax
mov    %eax,0x8(%esp)
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80491e0 <memchr@plt>
test   %eax,%eax
je     80496e5 <__sprintf_chk@plt+0x335>
mov    %ebx,(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
call   8048f70 <open64@plt>
mov    %eax,%ebx
jmp    8049529 <__sprintf_chk@plt+0x179>
cmpb   $0x0,0x8059530
jne    804950f <__sprintf_chk@plt+0x15f>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
mov    %eax,0x8059534
je     804950f <__sprintf_chk@plt+0x15f>
cmp    %eax,%ebx
jb     8049612 <__sprintf_chk@plt+0x262>
mov    %ebx,(%esp)
movl   $0x0,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8048f70 <open64@plt>
mov    %eax,%ebx
cmp    $0xffffffff,%ebx
je     804969d <__sprintf_chk@plt+0x2ed>
mov    0x805952c,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80499e0 <__sprintf_chk@plt+0x630>
cmpw   $0x258,0x8059528
02
je     804966e <__sprintf_chk@plt+0x2be>
mov    0x805917c,%eax
mov    %ebx,0x4(%esp)
mov    %eax,0xc(%esp)
movswl 0x8059528,%eax
mov    %eax,0x8(%esp)
mov    0x805952c,%eax
mov    %eax,(%esp)
call   8049a80 <__sprintf_chk@plt+0x6d0>
cmpw   $0x8,0x8059528
je     8049658 <__sprintf_chk@plt+0x2a8>
cmp    $0x3fffffff,%ebx
jle    80495b1 <__sprintf_chk@plt+0x201>
sub    $0x40000000,%ebx
mov    %ebx,(%esp)
call   804a540 <__sprintf_chk@plt+0x1190>
add    $0x1,%eax
sete   %al
test   %al,%al
jne    80495cd <__sprintf_chk@plt+0x21d>
movl   $0x0,(%esp)
call   8049120 <exit@plt>
mov    %ebx,(%esp)
call   8049360 <close@plt>
add    $0x1,%eax
sete   %al
jmp    80495a1 <__sprintf_chk@plt+0x1f1>
movl   $0x1,(%esp)
call   8049120 <exit@plt>
movl   $0x5,0x8(%esp)
mov    0x805952c,%esi
movl   $0x8053d61,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%ebx
call   80491d0 <__errno_location@plt>
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x2,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <error@plt>
jmp    80495a5 <__sprintf_chk@plt+0x1f5>
sub    %ebx,%eax
mov    %eax,0x8(%esp)
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80491e0 <memchr@plt>
test   %eax,%eax
jne    804950f <__sprintf_chk@plt+0x15f>
mov    0x805938c,%eax
mov    %ebx,(%esp)
movl   $0x40000000,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   8049eb0 <__sprintf_chk@plt+0xb00>
mov    %eax,%ebx
jmp    8049529 <__sprintf_chk@plt+0x179>
mov    0x805952c,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049b20 <__sprintf_chk@plt+0x770>
jmp    8049585 <__sprintf_chk@plt+0x1d5>
mov    0x805952c,%eax
movl   $0x1,0xc(%esp)
movl   $0x6,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049a80 <__sprintf_chk@plt+0x6d0>
movw   $0x1,0x8059528
00
jmp    8049552 <__sprintf_chk@plt+0x1a2>
movl   $0x5,0x8(%esp)
mov    0x805952c,%edi
movl   $0x8053d4e,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%esi
call   80491d0 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <error@plt>
jmp    8049532 <__sprintf_chk@plt+0x182>
mov    0x805938c,%eax
mov    %ebx,(%esp)
movl   $0x40000000,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0xc(%esp)
call   8049eb0 <__sprintf_chk@plt+0xb00>
mov    %eax,%ebx
jmp    8049529 <__sprintf_chk@plt+0x179>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8053c50
push   $0x8053be0
push   %ecx
push   %esi
push   $0x80493c0
call   8049160 <__libc_start_main@plt>
hlt
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x805932f,%eax
sub    $0x805932c,%eax
cmp    $0x6,%eax
ja     8049750 <__sprintf_chk@plt+0x3a0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804974f <__sprintf_chk@plt+0x39f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x805932c,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x805932c,%eax
sub    $0x805932c,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049789 <__sprintf_chk@plt+0x3d9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049788 <__sprintf_chk@plt+0x3d8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x805932c,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8059384
jne    80497cc <__sprintf_chk@plt+0x41c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049740 <__sprintf_chk@plt+0x390>
movb   $0x1,0x8059384
leave
repz ret
xchg   %ax,%ax
mov    0x8058f10,%eax
test   %eax,%eax
je     80497f8 <__sprintf_chk@plt+0x448>
mov    $0x0,%eax
test   %eax,%eax
je     80497f8 <__sprintf_chk@plt+0x448>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8058f10,(%esp)
call   *%eax
leave
jmp    8049770 <__sprintf_chk@plt+0x3c0>
nop
jmp    8049770 <__sprintf_chk@plt+0x3c0>
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x2,(%esp)
call   8049120 <exit@plt>
nop
sub    $0x3c,%esp
mov    0x40(%esp),%eax
cmp    $0x74,%eax
je     8049869 <__sprintf_chk@plt+0x4b9>
jle    8049860 <__sprintf_chk@plt+0x4b0>
cmp    $0x100,%eax
je     8049850 <__sprintf_chk@plt+0x4a0>
cmp    $0x1000007,%eax
jne    8049878 <__sprintf_chk@plt+0x4c8>
mov    0x8059388,%edx
test   %edx,%edx
je     8049928 <__sprintf_chk@plt+0x578>
mov    0x805952c,%eax
test   %eax,%eax
je     8049978 <__sprintf_chk@plt+0x5c8>
xor    %eax,%eax
add    $0x3c,%esp
ret
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
mov    %eax,0x805938c
jmp    8049847 <__sprintf_chk@plt+0x497>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     8049888 <__sprintf_chk@plt+0x4d8>
cmp    $0x66,%eax
jne    8049878 <__sprintf_chk@plt+0x4c8>
mov    0x44(%esp),%eax
mov    %eax,0x805952c
xor    %eax,%eax
add    $0x3c,%esp
ret
mov    $0x7,%eax
add    $0x3c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8059388,%eax
lea    0x1(%eax),%edx
test   %eax,%eax
mov    %edx,0x8059388
je     80498d8 <__sprintf_chk@plt+0x528>
cmp    $0x1,%eax
jne    8049950 <__sprintf_chk@plt+0x5a0>
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049330 <strtol@plt>
mov    0x2c(%esp),%edx
cmpb   $0x0,(%edx)
jne    80499a0 <__sprintf_chk@plt+0x5f0>
mov    %eax,0x805917c
jmp    8049847 <__sprintf_chk@plt+0x497>
xchg   %ax,%ax
mov    0x8059308,%eax
movl   $0x2,0x10(%esp)
movl   $0x8059220,0xc(%esp)
movl   $0x8053ec0,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x44(%esp),%eax
movl   $0x8053c88,(%esp)
mov    %eax,0x4(%esp)
call   80508a0 <argp_parse+0x18a0>
movzwl 0x8059220(%eax,%eax,1),%eax
mov    %ax,0x8059528
xor    %eax,%eax
jmp    8049849 <__sprintf_chk@plt+0x499>
lea    0x0(%esi),%esi
mov    0x8059344,%eax
movl   $0x106,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   804e930 <argp_state_help>
jmp    804983a <__sprintf_chk@plt+0x48a>
lea    0x0(%esi),%esi
mov    0x8059344,%eax
movl   $0x106,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   804e930 <argp_state_help>
xor    %eax,%eax
jmp    8049849 <__sprintf_chk@plt+0x499>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8053ca6,(%esp)
call   80490c0 <getenv@plt>
test   %eax,%eax
mov    %eax,0x805952c
jne    8049847 <__sprintf_chk@plt+0x497>
movl   $0x8053cab,0x805952c
08
jmp    8049849 <__sprintf_chk@plt+0x499>
movl   $0x5,0x8(%esp)
movl   $0x8053c92,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
jmp    8049847 <__sprintf_chk@plt+0x497>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x7c,%esp
mov    0x84(%esp),%eax
cmp    $0x3fffffff,%eax
jle    80499f8 <__sprintf_chk@plt+0x648>
add    $0x7c,%esp
ret
lea    0x0(%esi),%esi
lea    0x10(%esp),%edx
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8049080 <__fxstat64@plt>
cmp    $0xffffffff,%eax
je     8049a68 <__sprintf_chk@plt+0x6b8>
mov    0x20(%esp),%eax
and    $0xf000,%eax
cmp    $0x2000,%eax
je     80499f1 <__sprintf_chk@plt+0x641>
movl   $0x5,0x8(%esp)
movl   $0x8053e3c,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x80(%esp),%ecx
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
add    $0x7c,%esp
ret
mov    0x80(%esp),%eax
mov    %eax,(%esp)
call   804b630 <__sprintf_chk@plt+0x2280>
jmp    8049a15 <__sprintf_chk@plt+0x665>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
mov    0x38(%esp),%edx
mov    0x34(%esp),%eax
movl   $0x40086d01,0x4(%esp)
mov    %dx,0x18(%esp)
mov    0x3c(%esp),%edx
cmp    $0x3fffffff,%eax
mov    %edx,0x1c(%esp)
lea    0x18(%esp),%edx
mov    %edx,0x8(%esp)
jle    8049b10 <__sprintf_chk@plt+0x760>
sub    $0x40000000,%eax
mov    %eax,(%esp)
call   804a9e0 <__sprintf_chk@plt+0x1630>
cmp    $0xffffffff,%eax
sete   %al
test   %al,%al
je     8049b08 <__sprintf_chk@plt+0x758>
movl   $0x5,0x8(%esp)
movl   $0x8053cb5,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%ebx
call   80491d0 <__errno_location@plt>
mov    0x30(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0xc(%esp)
mov    (%eax),%eax
movl   $0x2,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <error@plt>
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049060 <ioctl@plt>
cmp    $0xffffffff,%eax
sete   %al
jmp    8049ac3 <__sprintf_chk@plt+0x713>
push   %ebx
sub    $0x38,%esp
mov    0x44(%esp),%eax
lea    0x14(%esp),%edx
mov    %edx,0x8(%esp)
movl   $0x801c6d02,0x4(%esp)
cmp    $0x3fffffff,%eax
jle    8049c48 <__sprintf_chk@plt+0x898>
sub    $0x40000000,%eax
mov    %eax,(%esp)
call   804a9e0 <__sprintf_chk@plt+0x1630>
cmp    $0xffffffff,%eax
sete   %al
test   %al,%al
je     8049b9b <__sprintf_chk@plt+0x7eb>
movl   $0x5,0x8(%esp)
movl   $0x8053cb5,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%ebx
call   80491d0 <__errno_location@plt>
mov    0x40(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0xc(%esp)
mov    (%eax),%eax
movl   $0x2,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <error@plt>
mov    0x14(%esp),%eax
movl   $0x8053cc9,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
mov    0x1c(%esp),%eax
movl   $0x8053cda,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
mov    0x24(%esp),%eax
movl   $0x8053ced,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
mov    0x18(%esp),%eax
movl   $0x8053d03,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
mov    0x28(%esp),%eax
movl   $0x8053d17,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
mov    0x2c(%esp),%eax
movl   $0x8053d29,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049240 <__printf_chk@plt>
add    $0x38,%esp
pop    %ebx
ret
mov    %eax,(%esp)
call   8049060 <ioctl@plt>
cmp    $0xffffffff,%eax
sete   %al
jmp    8049b56 <__sprintf_chk@plt+0x7a6>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x80592a0(,%eax,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
mov    0x8059284(,%ebx,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
movl   $0xffffffff,0x80592a0(,%ebx,8)
ff
movl   $0xffffffff,0x8059284(,%ebx,8)
ff
call   80491d0 <__errno_location@plt>
mov    %esi,(%eax)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x1c,%esp
mov    %edx,(%esp)
call   8049150 <strlen@plt>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
mov    %eax,%ebx
call   8048fe0 <signal@plt>
mov    %esi,0x4(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,%ebp
mov    0x8059284(,%edi,8),%eax
mov    %eax,(%esp)
call   804fdb0 <argp_parse+0xdb0>
mov    %ebp,0x4(%esp)
movl   $0xd,(%esp)
mov    %eax,%esi
call   8048fe0 <signal@plt>
xor    %eax,%eax
cmp    %esi,%ebx
jne    8049d18 <__sprintf_chk@plt+0x968>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edi,%eax
mov    $0x5,%edx
call   8049c60 <__sprintf_chk@plt+0x8b0>
mov    $0xffffffff,%eax
jmp    8049d0a <__sprintf_chk@plt+0x95a>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x2c,%esp
lea    0x40(%edx),%edi
jmp    8049d54 <__sprintf_chk@plt+0x9a4>
lea    0x0(%esi),%esi
cmpb   $0xa,(%ebx)
je     8049d90 <__sprintf_chk@plt+0x9e0>
add    $0x1,%ebx
cmp    %edi,%ebx
je     8049d74 <__sprintf_chk@plt+0x9c4>
mov    0x80592a0(,%ebp,8),%eax
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8051fd0 <argp_parse+0x2fd0>
cmp    $0x1,%eax
je     8049d48 <__sprintf_chk@plt+0x998>
mov    $0x5,%edx
mov    %ebp,%eax
call   8049c60 <__sprintf_chk@plt+0x8b0>
xor    %ebx,%ebx
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,(%ebx)
movzbl (%esi),%eax
test   %al,%al
jne    8049daa <__sprintf_chk@plt+0x9fa>
jmp    8049d74 <__sprintf_chk@plt+0x9c4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%esi
movzbl (%esi),%eax
test   %al,%al
je     8049d74 <__sprintf_chk@plt+0x9c4>
cmp    $0x20,%al
je     8049da0 <__sprintf_chk@plt+0x9f0>
lea    -0x45(%eax),%edx
cmp    $0x1,%dl
ja     8049e24 <__sprintf_chk@plt+0xa74>
lea    0x1f(%esp),%ebx
jmp    8049dc7 <__sprintf_chk@plt+0xa17>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0xa,0x1f(%esp)
je     8049de7 <__sprintf_chk@plt+0xa37>
mov    0x80592a0(,%ebp,8),%eax
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8051fd0 <argp_parse+0x2fd0>
cmp    $0x1,%eax
je     8049dc0 <__sprintf_chk@plt+0xa10>
call   80491d0 <__errno_location@plt>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,%ebx
lea    0x1(%esi),%eax
mov    %eax,(%esp)
call   8049330 <strtol@plt>
mov    %eax,(%ebx)
xor    %ebx,%ebx
cmpb   $0x46,(%esi)
jne    8049d82 <__sprintf_chk@plt+0x9d2>
mov    %eax,%edx
mov    %ebp,%eax
call   8049c60 <__sprintf_chk@plt+0x8b0>
jmp    8049d82 <__sprintf_chk@plt+0x9d2>
cmp    $0x41,%al
jne    8049d74 <__sprintf_chk@plt+0x9c4>
add    $0x2c,%esp
lea    0x1(%esi),%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x6c,%esp
lea    0x1c(%esp),%edx
mov    %gs:0x14,%ecx
mov    %ecx,0x5c(%esp)
xor    %ecx,%ecx
call   8049d30 <__sprintf_chk@plt+0x980>
test   %eax,%eax
je     8049e8a <__sprintf_chk@plt+0xada>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049330 <strtol@plt>
test   %eax,%eax
js     8049e92 <__sprintf_chk@plt+0xae2>
mov    0x5c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8049ea4 <__sprintf_chk@plt+0xaf4>
add    $0x6c,%esp
ret
mov    $0xffffffff,%eax
nop
jmp    8049e79 <__sprintf_chk@plt+0xac9>
call   80491d0 <__errno_location@plt>
movl   $0x5,(%eax)
mov    $0xffffffff,%eax
jmp    8049e79 <__sprintf_chk@plt+0xac9>
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
cmpl   $0xffffffff,0x80592a0(,%edi,8)
je     8049ee8 <__sprintf_chk@plt+0xb38>
add    $0x1,%edi
cmp    $0x4,%edi
jne    8049eb9 <__sprintf_chk@plt+0xb09>
call   80491d0 <__errno_location@plt>
mov    $0xffffffff,%ebx
movl   $0x18,(%eax)
add    $0x3c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x8059284(,%edi,8),%ebx
cmp    $0xffffffff,%ebx
jne    8049ec3 <__sprintf_chk@plt+0xb13>
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   8052250 <argp_parse+0x3250>
mov    %eax,%ecx
mov    %eax,0x20(%esp)
movzbl (%eax),%eax
test   %al,%al
je     804a505 <__sprintf_chk@plt+0x1155>
lea    0x1(%ecx),%edx
xor    %ebp,%ebp
xor    %esi,%esi
cmp    $0x3a,%al
je     804a0c8 <__sprintf_chk@plt+0xd18>
cmp    $0x40,%al
je     804a0b0 <__sprintf_chk@plt+0xd00>
cmp    $0xa,%al
je     804a088 <__sprintf_chk@plt+0xcd8>
movzbl (%edx),%eax
add    $0x1,%edx
test   %al,%al
jne    8049f18 <__sprintf_chk@plt+0xb68>
mov    %ecx,0x24(%esp)
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   8049320 <gethostbyname@plt>
test   %eax,%eax
je     804a44d <__sprintf_chk@plt+0x109d>
test   %ebp,%ebp
je     8049f62 <__sprintf_chk@plt+0xbb2>
cmpb   $0x0,0x0(%ebp)
mov    $0x0,%eax
cmove  %eax,%ebp
mov    0x5c(%esp),%eax
test   %eax,%eax
je     804a516 <__sprintf_chk@plt+0x1166>
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   8050960 <argp_parse+0x1960>
lea    0x0(,%edi,8),%edx
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
lea    0x8059280(%edx),%eax
mov    %eax,(%esp)
call   8049220 <pipe@plt>
mov    0x28(%esp),%edx
cmp    $0xffffffff,%eax
je     804a48e <__sprintf_chk@plt+0x10de>
add    $0x80592a0,%edx
mov    %edx,(%esp)
call   8049220 <pipe@plt>
cmp    $0xffffffff,%eax
je     804a48e <__sprintf_chk@plt+0x10de>
call   8049270 <fork@plt>
cmp    $0xffffffff,%eax
je     804a48e <__sprintf_chk@plt+0x10de>
test   %eax,%eax
je     804a0e0 <__sprintf_chk@plt+0xd30>
mov    0x80592a4(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
mov    0x8059280(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
mov    %eax,%edx
lea    0x3e8(%eax),%eax
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   8052110 <argp_parse+0x3110>
mov    %esi,0x10(%esp)
movl   $0x8053f50,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%ebp
call   80493b0 <__sprintf_chk@plt>
mov    0x24(%esp),%edx
mov    0x54(%esp),%eax
movl   $0x8053f55,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
lea    0x2(%ebp,%edx,1),%esi
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493b0 <__sprintf_chk@plt>
mov    0x54(%esp),%eax
and    $0x3,%eax
cmp    $0x1,%eax
je     804a1eb <__sprintf_chk@plt+0xe3b>
cmp    $0x2,%eax
je     804a30d <__sprintf_chk@plt+0xf5d>
test   %eax,%eax
je     804a2ed <__sprintf_chk@plt+0xf3d>
call   8049310 <abort@plt>
nop
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
call   80491d0 <__errno_location@plt>
movl   $0x2,(%eax)
add    $0x3c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
jne    8049f30 <__sprintf_chk@plt+0xb80>
mov    %ecx,%ebp
mov    %edx,%ecx
movb   $0x0,-0x1(%edx)
jmp    8049f30 <__sprintf_chk@plt+0xb80>
lea    0x0(%esi),%esi
test   %esi,%esi
jne    8049f30 <__sprintf_chk@plt+0xb80>
mov    %edx,%esi
movb   $0x0,-0x1(%edx)
jmp    8049f30 <__sprintf_chk@plt+0xb80>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,(%esp)
call   8049360 <close@plt>
mov    0x8059280(,%edi,8),%eax
mov    %eax,(%esp)
call   8048f90 <dup@plt>
mov    0x8059280(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
mov    0x8059284(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
movl   $0x1,(%esp)
call   8049360 <close@plt>
mov    0x80592a4(,%edi,8),%eax
mov    %eax,(%esp)
call   8048f90 <dup@plt>
mov    0x80592a0(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
mov    0x80592a4(,%edi,8),%eax
mov    %eax,(%esp)
call   8049360 <close@plt>
call   8049030 <getuid@plt>
mov    %eax,(%esp)
call   80492b0 <setuid@plt>
call   8049190 <getgid@plt>
mov    %eax,(%esp)
call   80490f0 <setgid@plt>
test   %ebp,%ebp
je     804a4aa <__sprintf_chk@plt+0x10fa>
mov    0x8059260,%eax
movl   $0x0,0x18(%esp)
mov    %ebp,0x10(%esp)
movl   $0x8053f31,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   8049210 <execl@plt>
movl   $0x5,0x8(%esp)
movl   $0x8053f34,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%ebp
call   80491d0 <__errno_location@plt>
mov    %ebp,0x8(%esp)
mov    (%eax),%eax
movl   $0x80,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <error@plt>
jmp    8049fd1 <__sprintf_chk@plt+0xc21>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x52575f4f,(%eax)
movl   $0x594c4e4f,0x4(%eax)
movb   $0x0,0x8(%eax)
testl  $0x400,0x54(%esp)
jne    804a428 <__sprintf_chk@plt+0x1078>
testb  $0x40,0x54(%esp)
jne    804a3da <__sprintf_chk@plt+0x102a>
testl  $0x1000,0x54(%esp)
jne    804a3ba <__sprintf_chk@plt+0x100a>
testb  $0x80,0x54(%esp)
jne    804a39e <__sprintf_chk@plt+0xfee>
testl  $0x8000,0x54(%esp)
jne    804a377 <__sprintf_chk@plt+0xfc7>
testl  $0x100,0x54(%esp)
jne    804a352 <__sprintf_chk@plt+0xfa2>
testl  $0x800,0x54(%esp)
jne    804a32f <__sprintf_chk@plt+0xf7f>
testl  $0x101000,0x54(%esp)
jne    804a3fa <__sprintf_chk@plt+0x104a>
testl  $0x200,0x54(%esp)
je     804a295 <__sprintf_chk@plt+0xee5>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %eax,%esi
movl   $0x545f4f7c,(%esi)
movl   $0x434e5552,0x4(%esi)
movb   $0x0,0x8(%esi)
mov    %ebp,(%esp)
call   8049150 <strlen@plt>
mov    $0xa,%edx
mov    %dx,0x0(%ebp,%eax,1)
mov    %ebp,%edx
mov    %edi,%eax
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804a4dc <__sprintf_chk@plt+0x112c>
mov    %edi,%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
cmp    $0xffffffff,%eax
je     804a4dc <__sprintf_chk@plt+0x112c>
mov    %ebp,(%esp)
call   8048fb0 <free@plt>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    0x58(%esp),%ebx
add    $0x3c,%esp
add    %edi,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x44525f4f,(%eax)
movl   $0x594c4e4f,0x4(%eax)
movb   $0x0,0x8(%eax)
jmp    804a206 <__sprintf_chk@plt+0xe56>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
mov    $0x5257,%ecx
add    %esi,%eax
movl   $0x44525f4f,(%eax)
mov    %cx,0x4(%eax)
movb   $0x0,0x6(%eax)
jmp    804a206 <__sprintf_chk@plt+0xe56>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x4e5f4f7c,(%eax)
movl   $0x4c424e4f,0x4(%eax)
movl   $0x4b434f,0x8(%eax)
jmp    804a262 <__sprintf_chk@plt+0xeb2>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
mov    $0x59,%ecx
add    %esi,%eax
movl   $0x4e5f4f7c,(%eax)
movl   $0x5454434f,0x4(%eax)
mov    %cx,0x8(%eax)
jmp    804a254 <__sprintf_chk@plt+0xea4>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x4c5f4f7c,(%eax)
movl   $0x45475241,0x4(%eax)
movl   $0x454c4946,0x8(%eax)
movb   $0x0,0xc(%eax)
jmp    804a246 <__sprintf_chk@plt+0xe96>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x455f4f7c,(%eax)
movl   $0x4c4358,0x4(%eax)
jmp    804a238 <__sprintf_chk@plt+0xe88>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x445f4f7c,(%eax)
movl   $0x434e5953,0x4(%eax)
movb   $0x0,0x8(%eax)
jmp    804a22d <__sprintf_chk@plt+0xe7d>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
movl   $0x435f4f7c,(%eax)
movl   $0x54414552,0x4(%eax)
movb   $0x0,0x8(%eax)
jmp    804a21f <__sprintf_chk@plt+0xe6f>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
lea    (%esi,%eax,1),%edx
lea    0x8(%esi,%eax,1),%eax
movl   $0x525f4f7c,(%edx)
movl   $0x434e5953,0x4(%edx)
movl   $0x535f4f7c,(%eax)
movl   $0x434e59,0x4(%eax)
jmp    804a270 <__sprintf_chk@plt+0xec0>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
mov    $0x44,%edx
add    %esi,%eax
movl   $0x415f4f7c,(%eax)
movl   $0x4e455050,0x4(%eax)
mov    %dx,0x8(%eax)
jmp    804a214 <__sprintf_chk@plt+0xe64>
movl   $0x5,0x8(%esp)
movl   $0x8053f0c,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x24(%esp),%ecx
movl   $0x0,0x4(%esp)
movl   $0x80,(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
jmp    8049f52 <__sprintf_chk@plt+0xba2>
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    %ebp,(%esi)
jmp    8049edb <__sprintf_chk@plt+0xb2b>
mov    0x8059260,%eax
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   8049210 <execl@plt>
jmp    804a1ad <__sprintf_chk@plt+0xdfd>
call   80491d0 <__errno_location@plt>
mov    (%eax),%esi
mov    %ebp,(%esp)
call   8048fb0 <free@plt>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    %esi,%edx
mov    %edi,%eax
call   8049c60 <__sprintf_chk@plt+0x8b0>
jmp    8049edb <__sprintf_chk@plt+0xb2b>
mov    0x20(%esp),%eax
xor    %ebp,%ebp
xor    %esi,%esi
mov    %eax,0x24(%esp)
jmp    8049f3e <__sprintf_chk@plt+0xb8e>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
call   80491d0 <__errno_location@plt>
movl   $0x5,(%eax)
jmp    8049edb <__sprintf_chk@plt+0xb2b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8053f59,%edx
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804a573 <__sprintf_chk@plt+0x11c3>
mov    %ebx,%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
mov    %eax,%esi
call   80491d0 <__errno_location@plt>
mov    (%eax),%edx
mov    %ebx,%eax
call   8049c60 <__sprintf_chk@plt+0x8b0>
mov    %esi,%eax
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
mov    0x98(%esp),%eax
lea    0x2c(%esp),%esi
mov    0x90(%esp),%ebx
movl   $0x8053f5c,0xc(%esp)
mov    0x94(%esp),%edi
movl   $0x40,0x8(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493b0 <__sprintf_chk@plt>
mov    %esi,%edx
mov    %ebx,%eax
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
jne    804a5f8 <__sprintf_chk@plt+0x1248>
mov    $0xffffffff,%eax
mov    0x6c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804a662 <__sprintf_chk@plt+0x12b2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %ebx,%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804a5de <__sprintf_chk@plt+0x122e>
cmp    %eax,0x98(%esp)
jb     804a5de <__sprintf_chk@plt+0x122e>
test   %eax,%eax
je     804a65c <__sprintf_chk@plt+0x12ac>
xor    %esi,%esi
jmp    804a620 <__sprintf_chk@plt+0x1270>
nop
add    %edx,%esi
add    %edx,%edi
cmp    %esi,%ebp
jbe    804a658 <__sprintf_chk@plt+0x12a8>
mov    %ebp,%eax
sub    %esi,%eax
mov    %eax,0x8(%esp)
mov    0x80592a0(,%ebx,8),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8051fd0 <argp_parse+0x2fd0>
mov    %eax,%edx
lea    -0x1(%eax),%eax
cmp    $0xfffffffd,%eax
jbe    804a618 <__sprintf_chk@plt+0x1268>
mov    $0x5,%edx
mov    %ebx,%eax
call   8049c60 <__sprintf_chk@plt+0x8b0>
jmp    804a5de <__sprintf_chk@plt+0x122e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%eax
jmp    804a5e3 <__sprintf_chk@plt+0x1233>
xor    %eax,%eax
xchg   %ax,%ax
jmp    804a5e3 <__sprintf_chk@plt+0x1233>
call   8049020 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
mov    0x98(%esp),%eax
lea    0x2c(%esp),%edi
mov    0x90(%esp),%ebx
movl   $0x8053f62,0xc(%esp)
mov    0x94(%esp),%ebp
movl   $0x40,0x8(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   80493b0 <__sprintf_chk@plt>
mov    %edi,%edx
mov    %ebx,%eax
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804a740 <__sprintf_chk@plt+0x1390>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   8048fe0 <signal@plt>
mov    %ebp,0x4(%esp)
mov    %eax,%esi
mov    0x98(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x8059284(,%ebx,8),%eax
mov    %eax,(%esp)
call   804fdb0 <argp_parse+0xdb0>
mov    %esi,0x4(%esp)
movl   $0xd,(%esp)
mov    %eax,%edi
call   8048fe0 <signal@plt>
cmp    0x98(%esp),%edi
je     804a748 <__sprintf_chk@plt+0x1398>
mov    %ebx,%eax
mov    $0x5,%edx
call   8049c60 <__sprintf_chk@plt+0x8b0>
mov    %edi,%eax
mov    0x6c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804a764 <__sprintf_chk@plt+0x13b4>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
jmp    804a72b <__sprintf_chk@plt+0x137b>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
test   %eax,%eax
js     804a740 <__sprintf_chk@plt+0x1390>
cmp    %eax,%edi
je     804a760 <__sprintf_chk@plt+0x13b0>
mov    %eax,%edi
jmp    804a71d <__sprintf_chk@plt+0x136d>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
jmp    804a72b <__sprintf_chk@plt+0x137b>
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xdc,%esp
mov    0xf8(%esp),%edi
mov    0xf4(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0xcc(%esp)
xor    %eax,%eax
mov    0xfc(%esp),%ebp
test   %edi,%edi
mov    %esi,0x20(%esp)
mov    %edi,0x24(%esp)
js     804a9b8 <__sprintf_chk@plt+0x1608>
movb   $0x0,0x4b(%esp)
lea    0x4b(%esp),%ebx
nop
mov    0x20(%esp),%eax
sub    $0x1,%ebx
mov    0x24(%esp),%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8053a80 <argp_parse+0x4a80>
mov    0x24(%esp),%edx
add    $0x30,%eax
mov    %al,(%ebx)
mov    0x20(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053950 <argp_parse+0x4950>
mov    %edx,%ecx
or     %eax,%ecx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
jne    804a7b8 <__sprintf_chk@plt+0x1408>
test   %edi,%edi
mov    %ebx,%eax
js     804a9a0 <__sprintf_chk@plt+0x15f0>
cmp    $0x2,%ebp
ja     804a9b0 <__sprintf_chk@plt+0x1600>
mov    %ebx,0x10(%esp)
lea    0x4c(%esp),%ebx
mov    %ebp,0x14(%esp)
movl   $0x8053f68,0xc(%esp)
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80493b0 <__sprintf_chk@plt>
mov    0xf0(%esp),%eax
mov    %ebx,%edx
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804a90c <__sprintf_chk@plt+0x155c>
mov    0xf0(%esp),%eax
lea    0x8c(%esp),%edx
call   8049d30 <__sprintf_chk@plt+0x980>
test   %eax,%eax
je     804a90c <__sprintf_chk@plt+0x155c>
movzbl (%eax),%edx
cmp    $0x9,%dl
jne    804a89a <__sprintf_chk@plt+0x14ea>
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x9,%dl
je     804a88f <__sprintf_chk@plt+0x14df>
cmp    $0x20,%dl
je     804a88f <__sprintf_chk@plt+0x14df>
xor    %ebx,%ebx
cmp    $0x2d,%dl
sete   %bl
mov    $0x1,%ecx
test   %ebx,%ebx
je     804a990 <__sprintf_chk@plt+0x15e0>
add    %eax,%ecx
xor    %edx,%edx
xor    %eax,%eax
mov    %edx,%ebp
mov    %eax,%edi
xchg   %ax,%ax
add    $0x1,%ecx
movsbl -0x1(%ecx),%esi
sub    $0x30,%esi
cmp    $0x9,%esi
ja     804a970 <__sprintf_chk@plt+0x15c0>
imul   $0xa,%ebp,%eax
mov    %eax,0x2c(%esp)
mov    %edi,%eax
mov    $0xa,%edi
mul    %edi
mov    %eax,0x20(%esp)
mov    0x2c(%esp),%eax
mov    %edx,0x24(%esp)
add    %eax,0x24(%esp)
test   %ebx,%ebx
je     804a938 <__sprintf_chk@plt+0x1588>
mov    0x20(%esp),%edi
mov    %esi,%eax
mov    0x24(%esp),%ebp
cltd
sub    %esi,%edi
sbb    %edx,%ebp
cmp    %ebp,0x24(%esp)
jge    804a978 <__sprintf_chk@plt+0x15c8>
mov    $0xffffffff,%eax
mov    $0xffffffff,%edx
mov    0xcc(%esp),%edi
xor    %gs:0x14,%edi
jne    804a9d0 <__sprintf_chk@plt+0x1620>
add    $0xdc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
mov    %esi,%edi
mov    %esi,%ebp
mov    0x24(%esp),%edx
sar    $0x1f,%ebp
add    %eax,%edi
adc    %edx,%ebp
cmp    %ebp,%edx
jl     804a8c0 <__sprintf_chk@plt+0x1510>
jg     804a90c <__sprintf_chk@plt+0x155c>
cmp    %edi,0x20(%esp)
ja     804a90c <__sprintf_chk@plt+0x155c>
add    $0x1,%ecx
movsbl -0x1(%ecx),%esi
sub    $0x30,%esi
cmp    $0x9,%esi
jbe    804a8d3 <__sprintf_chk@plt+0x1523>
xchg   %ax,%ax
mov    %edi,%eax
mov    %ebp,%edx
jmp    804a916 <__sprintf_chk@plt+0x1566>
xchg   %ax,%ax
jg     804a8c0 <__sprintf_chk@plt+0x1510>
cmp    %edi,0x20(%esp)
jb     804a90c <__sprintf_chk@plt+0x155c>
jmp    804a8c0 <__sprintf_chk@plt+0x1510>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
cmp    $0x2b,%dl
sete   %cl
jmp    804a8b4 <__sprintf_chk@plt+0x1504>
lea    0x0(%esi),%esi
sub    $0x1,%ebx
cmp    $0x2,%ebp
movb   $0x2d,-0x1(%eax)
jbe    804a829 <__sprintf_chk@plt+0x1479>
call   8049310 <abort@plt>
lea    0x0(%esi),%esi
mov    %esi,%eax
mov    %edi,%edx
neg    %eax
adc    $0x0,%edx
neg    %edx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
jmp    804a7ae <__sprintf_chk@plt+0x13fe>
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa4(%esp),%eax
mov    %gs:0x14,%edi
mov    %edi,0x7c(%esp)
xor    %edi,%edi
mov    0xa8(%esp),%ebx
cmp    $0x801c6d02,%eax
je     804ab48 <__sprintf_chk@plt+0x1798>
cmp    $0x40086d01,%eax
je     804aa48 <__sprintf_chk@plt+0x1698>
call   80491d0 <__errno_location@plt>
movl   $0x5f,(%eax)
mov    $0xffffffff,%eax
mov    0x7c(%esp),%edi
xor    %gs:0x14,%edi
jne    804ac29 <__sprintf_chk@plt+0x1879>
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%ebx),%ebp
movb   $0x0,0x3b(%esp)
mov    %ebp,%ecx
sar    $0x1f,%ecx
mov    %ecx,%edi
sar    $0x1f,%edi
mov    %edi,%esi
xor    %ebp,%edi
mov    %edi,0x18(%esp)
mov    %ecx,%edi
xor    %esi,%edi
mov    %edi,0x1c(%esp)
mov    0xa0(%esp),%edi
sub    %esi,0x18(%esp)
sbb    %esi,0x1c(%esp)
lea    0x3b(%esp),%esi
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
sub    $0x1,%esi
mov    0x1c(%esp),%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8053a80 <argp_parse+0x4a80>
mov    0x1c(%esp),%edx
add    $0x30,%eax
mov    %al,(%esi)
mov    0x18(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053950 <argp_parse+0x4950>
mov    %edx,%ecx
or     %eax,%ecx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
jne    804aa80 <__sprintf_chk@plt+0x16d0>
test   %ebp,%ebp
mov    %esi,%eax
mov    %edi,0xa0(%esp)
js     804ac08 <__sprintf_chk@plt+0x1858>
mov    %esi,0x14(%esp)
movswl (%ebx),%eax
lea    0x3c(%esp),%ebx
movl   $0x8053f70,0xc(%esp)
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %ebx,(%esp)
call   80493b0 <__sprintf_chk@plt>
mov    0xa0(%esp),%eax
mov    %ebx,%edx
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804aa27 <__sprintf_chk@plt+0x1677>
mov    0xa0(%esp),%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
jmp    804aa27 <__sprintf_chk@plt+0x1677>
xchg   %ax,%ax
mov    0xa0(%esp),%eax
mov    $0x80546c9,%edx
call   8049cb0 <__sprintf_chk@plt+0x900>
cmp    $0xffffffff,%eax
je     804ac1f <__sprintf_chk@plt+0x186f>
mov    0xa0(%esp),%eax
call   8049e40 <__sprintf_chk@plt+0xa90>
cmp    $0xffffffff,%eax
mov    %eax,%esi
je     804ac1f <__sprintf_chk@plt+0x186f>
cmp    $0x8,%eax
ja     804ac14 <__sprintf_chk@plt+0x1864>
test   %eax,%eax
mov    0xa0(%esp),%edi
jne    804ab98 <__sprintf_chk@plt+0x17e8>
jmp    804abd8 <__sprintf_chk@plt+0x1828>
nop
sub    %eax,%esi
add    %eax,%ebx
test   %esi,%esi
jle    804abd8 <__sprintf_chk@plt+0x1828>
mov    0x80592a0(,%edi,8),%eax
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8051fd0 <argp_parse+0x2fd0>
lea    -0x1(%eax),%edx
cmp    $0xfffffffd,%edx
jbe    804ab90 <__sprintf_chk@plt+0x17e0>
mov    %edi,%eax
mov    $0x5,%edx
mov    %edi,0xa0(%esp)
call   8049c60 <__sprintf_chk@plt+0x8b0>
mov    $0xffffffff,%eax
jmp    804aa27 <__sprintf_chk@plt+0x1677>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xff,(%ebx)
jle    804abff <__sprintf_chk@plt+0x184f>
test   %esi,%esi
je     804abff <__sprintf_chk@plt+0x184f>
xor    %eax,%eax
xchg   %ax,%ax
movzbl (%ebx,%eax,1),%ecx
movzbl 0x1(%ebx,%eax,1),%edx
mov    %cl,0x1(%ebx,%eax,1)
mov    %dl,(%ebx,%eax,1)
add    $0x2,%eax
cmp    %esi,%eax
jb     804abe8 <__sprintf_chk@plt+0x1838>
xor    %eax,%eax
jmp    804aa27 <__sprintf_chk@plt+0x1677>
xchg   %ax,%ax
sub    $0x1,%esi
movb   $0x2d,-0x1(%eax)
jmp    804aaef <__sprintf_chk@plt+0x173f>
call   80491d0 <__errno_location@plt>
movl   $0x4b,(%eax)
mov    $0xffffffff,%eax
jmp    804aa27 <__sprintf_chk@plt+0x1677>
call   8049020 <__stack_chk_fail@plt>
xchg   %ax,%ax
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
mov    %eax,%ecx
and    $0x100,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,(%edx)
mov    %eax,%ecx
and    $0x80,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x1(%edx)
mov    %eax,%ecx
and    $0x40,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x8,%ah
je     804ad00 <__sprintf_chk@plt+0x1950>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x2(%edx)
mov    %eax,%ecx
and    $0x20,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x3(%edx)
mov    %eax,%ecx
and    $0x10,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x4(%edx)
mov    %eax,%ecx
and    $0x8,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x4,%ah
je     804ad28 <__sprintf_chk@plt+0x1978>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x5(%edx)
mov    %eax,%ecx
and    $0x4,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x6(%edx)
mov    %eax,%ecx
and    $0x2,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
test   $0x2,%ah
mov    %cl,0x7(%edx)
je     804ad10 <__sprintf_chk@plt+0x1960>
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffe0,%eax
add    $0x74,%eax
mov    %al,0x8(%edx)
movb   $0x0,0x9(%edx)
ret
xchg   %ax,%ax
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804ac7c <__sprintf_chk@plt+0x18cc>
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffb5,%eax
add    $0x78,%eax
mov    %al,0x8(%edx)
movb   $0x0,0x9(%edx)
ret
xchg   %ax,%ax
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804acba <__sprintf_chk@plt+0x190a>
push   %esi
push   %ebx
sub    $0x24,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8053f86,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    0x30(%esp),%edx
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
movl   $0x2,0x8059390
00
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8053f86,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    0x30(%esp),%edx
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
call   8049800 <__sprintf_chk@plt+0x450>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8053f94,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    0x30(%esp),%edx
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    0x40(%esp),%edi
lea    0x22(%esp),%ebx
call   80491d0 <__errno_location@plt>
mov    (%eax),%esi
mov    0x44(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804ac30 <__sprintf_chk@plt+0x1880>
mov    %edi,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8053fab,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049010 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %esi,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
mov    0x2c(%esp),%eax
xor    %gs:0x14,%eax
movl   $0x2,0x8059390
00
jne    804aef1 <__sprintf_chk@plt+0x1b41>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8054068,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x14(%esp)
mov    0x34(%esp),%edx
mov    %eax,0x8(%esp)
mov    %edx,0x10(%esp)
call   80490b0 <error@plt>
movl   $0x2,0x8059390
00
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053fc8,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053fc8,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053fce,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8050b40 <argp_parse+0x1b40>
mov    %eax,%edi
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8053fd3,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
movl   $0x2,0x8059390
00
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053fee,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053ff4,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053ffb,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054001,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054001,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054001,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054006,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%esi
call   80491d0 <__errno_location@plt>
mov    0x68(%esp),%edi
mov    0x60(%esp),%ebx
mov    (%eax),%ebp
lea    0x27(%esp),%eax
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
call   8052090 <argp_parse+0x3090>
mov    %ebx,(%esp)
mov    %eax,%edi
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x10(%esp)
movl   $0x8054098,0x8(%esp)
movl   $0x80540cc,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
call   8049350 <dcngettext@plt>
mov    0x6c(%esp),%edx
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,0x14(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
mov    0x3c(%esp),%eax
xor    %gs:0x14,%eax
movl   $0x2,0x8059390
00
jne    804b1e5 <__sprintf_chk@plt+0x1e35>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%esi
call   80491d0 <__errno_location@plt>
mov    0x68(%esp),%edi
mov    0x60(%esp),%ebx
mov    (%eax),%ebp
lea    0x27(%esp),%eax
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
call   8052090 <argp_parse+0x3090>
mov    %ebx,(%esp)
mov    %eax,%edi
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x10(%esp)
movl   $0x8054100,0x8(%esp)
movl   $0x805413c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
call   8049350 <dcngettext@plt>
mov    0x6c(%esp),%edx
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,0x14(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
mov    0x3c(%esp),%eax
xor    %gs:0x14,%eax
jne    804b29b <__sprintf_chk@plt+0x1eeb>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049020 <__stack_chk_fail@plt>
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054006,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%esi
call   80491d0 <__errno_location@plt>
mov    0x68(%esp),%edi
mov    0x60(%esp),%ebx
mov    (%eax),%ebp
lea    0x27(%esp),%eax
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
call   8052090 <argp_parse+0x3090>
mov    %ebx,(%esp)
mov    %eax,%edi
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x10(%esp)
movl   $0x8054098,0x8(%esp)
movl   $0x80540cc,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
call   8049350 <dcngettext@plt>
mov    0x6c(%esp),%edx
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,0x14(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
call   8049800 <__sprintf_chk@plt+0x450>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805400b,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805400b,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054014,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805401a,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805401a,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053e37,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%esi
call   80491d0 <__errno_location@plt>
mov    0x68(%esp),%edi
mov    0x60(%esp),%ebp
mov    (%eax),%ebx
lea    0x27(%esp),%eax
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
call   8052090 <argp_parse+0x3090>
mov    %ebp,(%esp)
mov    %eax,%edi
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8054022,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
mov    0x3c(%esp),%eax
xor    %gs:0x14,%eax
movl   $0x2,0x8059390
00
jne    804b4bd <__sprintf_chk@plt+0x210d>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8053e37,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%esi
call   80491d0 <__errno_location@plt>
mov    0x68(%esp),%edi
mov    0x60(%esp),%ebp
mov    (%eax),%ebx
lea    0x27(%esp),%eax
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
call   8052090 <argp_parse+0x3090>
mov    %ebp,(%esp)
mov    %eax,%edi
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8054178,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
mov    0x3c(%esp),%eax
xor    %gs:0x14,%eax
jne    804b583 <__sprintf_chk@plt+0x21d3>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049020 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
call   80491d0 <__errno_location@plt>
mov    (%eax),%ebx
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8050b40 <argp_parse+0x1b40>
mov    %eax,%edi
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8051e00 <argp_parse+0x2e00>
movl   $0x5,0x8(%esp)
movl   $0x8054198,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049010 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
movl   $0x2,0x8059390
00
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054038,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054038,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054038,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805403d,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805403d,(%esp)
mov    %eax,0x4(%esp)
call   804ae00 <__sprintf_chk@plt+0x1a50>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054046,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805404d,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054053,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805405b,(%esp)
mov    %eax,0x4(%esp)
call   804ad30 <__sprintf_chk@plt+0x1980>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%ebx
mov    0x30(%esp),%edi
mov    0x38(%esp),%esi
test   %ebx,%ebx
je     804b7a8 <__sprintf_chk@plt+0x23f8>
mov    %esi,0xc(%esp)
movl   $0x5,0x10(%esp)
movl   $0x80541b8,0x8(%esp)
movl   $0x80541d8,0x4(%esp)
movl   $0x0,(%esp)
call   8049350 <dcngettext@plt>
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490b0 <error@plt>
movl   $0x2,0x8059390
00
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0x34(%esp)
movl   $0x805405b,0x30(%esp)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804ad30 <__sprintf_chk@plt+0x1980>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x805405b,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x8054061,(%esp)
mov    %eax,0x4(%esp)
call   804ada0 <__sprintf_chk@plt+0x19f0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8059390,%eax
mov    %eax,(%esp)
call   8049120 <exit@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x4(%eax),%esi
mov    %edx,0x18(%esp)
mov    (%eax),%edx
mov    %ecx,0x1c(%esp)
mov    0x8(%eax),%ecx
test   %esi,%esi
mov    %edx,0x10(%esp)
mov    %ecx,0x14(%esp)
je     804b8e8 <__sprintf_chk@plt+0x2538>
mov    %edx,%ebx
jmp    804b844 <__sprintf_chk@plt+0x2494>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     804b889 <__sprintf_chk@plt+0x24d9>
mov    0xc(%ebx),%edi
mov    0x4(%ebx),%ebp
test   $0x8,%edi
jne    804b878 <__sprintf_chk@plt+0x24c8>
lea    -0x1(%ebp),%eax
cmp    $0xfe,%eax
ja     804b878 <__sprintf_chk@plt+0x24c8>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%ebp,2)
je     804b878 <__sprintf_chk@plt+0x24c8>
mov    0x14(%esp),%eax
movsbl (%eax),%eax
cmp    %eax,%ebp
je     804b898 <__sprintf_chk@plt+0x24e8>
lea    0x0(%esi),%esi
mov    $0x1,%ecx
xor    %eax,%eax
add    $0x18,%ebx
sub    $0x1,%esi
test   %cl,%cl
jne    804b840 <__sprintf_chk@plt+0x2490>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%esp),%eax
test   $0x4,%edi
mov    $0x1,%ecx
cmove  %ebx,%eax
mov    %eax,0x10(%esp)
xor    %eax,%eax
and    $0x2,%edi
je     804b8c0 <__sprintf_chk@plt+0x2510>
addl   $0x1,0x14(%esp)
jmp    804b87f <__sprintf_chk@plt+0x24cf>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
call   *%eax
test   %eax,%eax
sete   %cl
jmp    804b8b5 <__sprintf_chk@plt+0x2505>
xor    %eax,%eax
jmp    804b889 <__sprintf_chk@plt+0x24d9>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x4,%esp
mov    0x10(%esp),%edx
testb  $0x8,0xc(%edx)
mov    0x4(%edx),%esi
jne    804b91d <__sprintf_chk@plt+0x256d>
lea    -0x1(%esi),%eax
cmp    $0xfe,%eax
ja     804b91d <__sprintf_chk@plt+0x256d>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%esi,2)
cmovne %esi,%ebx
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0xc,%esp
mov    (%eax),%ebx
test   %ebx,%ebx
je     804b9a0 <__sprintf_chk@plt+0x25f0>
call   8049390 <__ctype_b_loc@plt>
mov    %ebx,%edx
mov    %eax,%edi
jmp    804b952 <__sprintf_chk@plt+0x25a2>
lea    0x0(%esi),%esi
mov    %edx,(%esi)
movzbl (%edx),%ecx
add    $0x1,%edx
mov    (%edi),%eax
movzbl %cl,%ebx
movzwl (%eax,%ebx,2),%ebx
test   $0x20,%bh
jne    804b950 <__sprintf_chk@plt+0x25a0>
xor    %eax,%eax
cmp    $0x2d,%cl
setne  %al
test   %cl,%cl
je     804b994 <__sprintf_chk@plt+0x25e4>
and    $0x8,%ebx
je     804b98b <__sprintf_chk@plt+0x25db>
jmp    804b994 <__sprintf_chk@plt+0x25e4>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%ebx
add    $0x1,%edx
testb  $0x8,(%ebx,%ecx,2)
jne    804b994 <__sprintf_chk@plt+0x25e4>
mov    %edx,(%esi)
movzbl (%edx),%ecx
test   %cl,%cl
jne    804b980 <__sprintf_chk@plt+0x25d0>
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0xc,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x4(%edi),%esi
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
mov    %edx,-0x38(%ebp)
test   %esi,%esi
jne    804b9e8 <__sprintf_chk@plt+0x2638>
mov    -0x1c(%ebp),%eax
xor    %gs:0x14,%eax
jne    804bba4 <__sprintf_chk@plt+0x27f4>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8(%edi),%eax
mov    %eax,(%esp)
call   8049150 <strlen@plt>
mov    (%edi),%ebx
add    $0x1f,%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
lea    0x1f(%esp),%eax
mov    %eax,-0x2c(%ebp)
andl   $0xfffffff0,-0x2c(%ebp)
mov    -0x2c(%ebp),%eax
mov    %eax,-0x20(%ebp)
xchg   %ax,%ax
mov    0x14(%ebx),%eax
mov    $0x804cbb0,%edx
mov    0x18(%eax),%ecx
lea    -0x20(%ebp),%eax
mov    %eax,(%esp)
mov    %ebx,%eax
add    $0x1c,%ebx
call   804b810 <__sprintf_chk@plt+0x2460>
sub    $0x1,%esi
jne    804ba10 <__sprintf_chk@plt+0x2660>
mov    -0x20(%ebp),%eax
cmp    %eax,-0x2c(%ebp)
jb     804bb7c <__sprintf_chk@plt+0x27cc>
mov    0x4(%edi),%esi
mov    (%edi),%ebx
test   %esi,%esi
je     804b9d0 <__sprintf_chk@plt+0x2620>
mov    %edi,-0x2c(%ebp)
mov    -0x38(%ebp),%edi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%ebx),%eax
mov    $0x804c8d0,%edx
mov    0x18(%eax),%ecx
mov    %ebx,%eax
add    $0x1c,%ebx
mov    %edi,(%esp)
call   804b810 <__sprintf_chk@plt+0x2460>
sub    $0x1,%esi
jne    804ba50 <__sprintf_chk@plt+0x26a0>
mov    -0x2c(%ebp),%edi
mov    (%edi),%eax
mov    %eax,-0x30(%ebp)
mov    0x4(%edi),%eax
test   %eax,%eax
mov    %eax,-0x3c(%ebp)
je     804b9d0 <__sprintf_chk@plt+0x2620>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x30(%ebp),%ecx
mov    0x14(%ecx),%eax
mov    0x4(%ecx),%edi
mov    (%ecx),%esi
mov    0x18(%eax),%eax
test   %edi,%edi
mov    %esi,%ebx
mov    %eax,-0x34(%ebp)
je     804bb28 <__sprintf_chk@plt+0x2778>
mov    %edi,-0x2c(%ebp)
jmp    804bab1 <__sprintf_chk@plt+0x2701>
add    $0x18,%ebx
subl   $0x1,-0x2c(%ebp)
je     804bb28 <__sprintf_chk@plt+0x2778>
mov    (%ebx),%edx
test   %edx,%edx
je     804baa8 <__sprintf_chk@plt+0x26f8>
mov    0xc(%ebx),%eax
test   $0x4,%al
cmove  %ebx,%esi
test   $0x2,%al
jne    804baa8 <__sprintf_chk@plt+0x26f8>
mov    0x8(%ebx),%ecx
mov    0xc(%esi),%edi
or     %eax,%edi
test   %ecx,%ecx
je     804bb58 <__sprintf_chk@plt+0x27a8>
test   $0x10,%edi
jne    804baa8 <__sprintf_chk@plt+0x26f8>
test   $0x8,%al
jne    804baa8 <__sprintf_chk@plt+0x26f8>
test   %ecx,%ecx
je     804bb60 <__sprintf_chk@plt+0x27b0>
mov    -0x34(%ebp),%eax
movl   $0x5,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
and    $0x1,%edi
mov    %eax,0xc(%esp)
mov    (%ebx),%eax
mov    %eax,0x8(%esp)
je     804bb40 <__sprintf_chk@plt+0x2790>
mov    -0x38(%ebp),%eax
add    $0x18,%ebx
movl   $0x80541fe,0x4(%esp)
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
subl   $0x1,-0x2c(%ebp)
jne    804bab1 <__sprintf_chk@plt+0x2701>
lea    0x0(%esi),%esi
addl   $0x1c,-0x30(%ebp)
subl   $0x1,-0x3c(%ebp)
jne    804ba88 <__sprintf_chk@plt+0x26d8>
jmp    804b9d0 <__sprintf_chk@plt+0x2620>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x38(%ebp),%eax
movl   $0x805420b,0x4(%esp)
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
jmp    804baa8 <__sprintf_chk@plt+0x26f8>
mov    0x8(%esi),%ecx
jmp    804bad3 <__sprintf_chk@plt+0x2723>
mov    -0x38(%ebp),%eax
mov    %edx,0x8(%esp)
movl   $0x8054216,0x4(%esp)
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
jmp    804baa8 <__sprintf_chk@plt+0x26f8>
lea    0x1(%eax),%edx
mov    %edx,-0x20(%ebp)
movb   $0x0,(%eax)
mov    -0x2c(%ebp),%eax
movl   $0x80541f7,0x4(%esp)
mov    %eax,0x8(%esp)
mov    -0x38(%ebp),%eax
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
jmp    804ba3c <__sprintf_chk@plt+0x268c>
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x14,%esp
mov    0xc(%eax),%edx
test   %edx,%edx
jne    804bbc2 <__sprintf_chk@plt+0x2812>
jmp    804bbd1 <__sprintf_chk@plt+0x2821>
mov    %ebx,%edx
mov    0x18(%edx),%ebx
mov    %edx,(%esp)
call   8048fb0 <free@plt>
test   %ebx,%ebx
jne    804bbc0 <__sprintf_chk@plt+0x2810>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804bbed <__sprintf_chk@plt+0x283d>
mov    (%esi),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    %esi,(%esp)
call   8048fb0 <free@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%ebx
mov    0x54(%esp),%esi
mov    0x10(%ebx),%edx
mov    0x10(%esi),%ecx
mov    0xc(%ebx),%eax
mov    0xc(%esi),%edi
cmp    %ecx,%edx
je     804bd60 <__sprintf_chk@plt+0x29b0>
test   %edx,%edx
je     804bcb2 <__sprintf_chk@plt+0x2902>
test   %ecx,%ecx
je     804bc72 <__sprintf_chk@plt+0x28c2>
mov    0x14(%edx),%eax
mov    0x14(%ecx),%edi
cmp    %eax,%edi
jge    804bc4a <__sprintf_chk@plt+0x289a>
lea    0x0(%esi,%eiz,1),%esi
mov    0xc(%edx),%edx
mov    0x14(%edx),%eax
cmp    %eax,%edi
jl     804bc40 <__sprintf_chk@plt+0x2890>
cmp    %eax,%edi
jle    804bce4 <__sprintf_chk@plt+0x2934>
lea    0x0(%esi),%esi
mov    0xc(%ecx),%ecx
cmp    0x14(%ecx),%eax
jge    804bce4 <__sprintf_chk@plt+0x2934>
mov    0xc(%ecx),%ecx
cmp    0x14(%ecx),%eax
jl     804bc58 <__sprintf_chk@plt+0x28a8>
jmp    804bce4 <__sprintf_chk@plt+0x2934>
xchg   %ax,%ax
mov    %eax,%edx
mov    0xc(%edx),%eax
test   %eax,%eax
jne    804bc70 <__sprintf_chk@plt+0x28c0>
mov    0x8(%edx),%eax
cmp    %eax,%edi
je     804be1f <__sprintf_chk@plt+0x2a6f>
mov    %edi,%edx
shr    $0x1f,%edx
test   %dl,%dl
je     804bc96 <__sprintf_chk@plt+0x28e6>
mov    %eax,%edx
shr    $0x1f,%edx
test   %dl,%dl
jne    804bca6 <__sprintf_chk@plt+0x28f6>
test   %edi,%edi
js     804bd38 <__sprintf_chk@plt+0x2988>
test   %eax,%eax
js     804bd38 <__sprintf_chk@plt+0x2988>
sub    %edi,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edx,%ecx
mov    0xc(%ecx),%edx
test   %edx,%edx
jne    804bcb0 <__sprintf_chk@plt+0x2900>
mov    0x8(%ecx),%ebp
cmp    %ebp,%eax
je     804be29 <__sprintf_chk@plt+0x2a79>
mov    %ebp,%edx
shr    $0x1f,%edx
test   %dl,%dl
je     804bd40 <__sprintf_chk@plt+0x2990>
mov    %eax,%edx
shr    $0x1f,%edx
test   %dl,%dl
je     804bd40 <__sprintf_chk@plt+0x2990>
sub    %ebp,%eax
jmp    804bd1e <__sprintf_chk@plt+0x296e>
lea    0x0(%esi),%esi
mov    %edi,%edx
mov    %eax,%ecx
mov    0xc(%edx),%edi
mov    0xc(%ecx),%eax
cmp    %eax,%edi
jne    804bce0 <__sprintf_chk@plt+0x2930>
mov    0x4(%ecx),%ebp
mov    0x8(%edx),%eax
mov    0x8(%ecx),%ecx
mov    0x4(%edx),%edi
cmp    %eax,%ecx
je     804bd28 <__sprintf_chk@plt+0x2978>
mov    %ecx,%edx
shr    $0x1f,%edx
test   %dl,%dl
jne    804bd50 <__sprintf_chk@plt+0x29a0>
test   %ecx,%ecx
jns    804bd30 <__sprintf_chk@plt+0x2980>
sub    %eax,%ecx
mov    %ecx,%eax
test   %eax,%eax
jne    804bd1e <__sprintf_chk@plt+0x296e>
mov    0x18(%esi),%eax
cmp    %eax,0x18(%ebx)
sbb    %eax,%eax
or     $0x1,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    %ebp,%eax
sub    %edi,%eax
jmp    804bd0f <__sprintf_chk@plt+0x295f>
xchg   %ax,%ax
test   %eax,%eax
js     804bd0b <__sprintf_chk@plt+0x295b>
sub    %ecx,%eax
jmp    804bd0f <__sprintf_chk@plt+0x295f>
sub    %eax,%edi
mov    %edi,%eax
jmp    804bd1e <__sprintf_chk@plt+0x296e>
xchg   %ax,%ax
test   %ebp,%ebp
js     804bd48 <__sprintf_chk@plt+0x2998>
test   %eax,%eax
jns    804bcd6 <__sprintf_chk@plt+0x2926>
sub    %eax,%ebp
mov    %ebp,%eax
jmp    804bd1e <__sprintf_chk@plt+0x296e>
xchg   %ax,%ax
mov    %eax,%edx
shr    $0x1f,%edx
test   %dl,%dl
je     804bd07 <__sprintf_chk@plt+0x2957>
sub    %ecx,%eax
jmp    804bd0f <__sprintf_chk@plt+0x295f>
lea    0x0(%esi),%esi
cmp    %edi,%eax
jne    804bc84 <__sprintf_chk@plt+0x28d4>
mov    0x14(%ebx),%eax
mov    $0x804b8f0,%edx
mov    0x18(%eax),%ecx
mov    %ebx,%eax
movl   $0x0,(%esp)
call   804b810 <__sprintf_chk@plt+0x2460>
mov    $0x804b8f0,%edx
mov    %eax,0x18(%esp)
mov    0x14(%esi),%eax
mov    0x18(%eax),%ecx
mov    %esi,%eax
movl   $0x0,(%esp)
call   804b810 <__sprintf_chk@plt+0x2460>
mov    (%ebx),%ecx
mov    (%esi),%edx
mov    0x4(%ebx),%edi
mov    0xc(%ecx),%ebp
mov    %eax,0x1c(%esp)
mov    0xc(%edx),%eax
and    $0x8,%ebp
mov    %eax,0x14(%esp)
andl   $0x8,0x14(%esp)
test   %edi,%edi
je     804bdd4 <__sprintf_chk@plt+0x2a24>
nop
mov    (%ecx),%eax
test   %eax,%eax
je     804bdcc <__sprintf_chk@plt+0x2a1c>
testb  $0x2,0xc(%ecx)
je     804bdd6 <__sprintf_chk@plt+0x2a26>
add    $0x18,%ecx
sub    $0x1,%edi
jne    804bdc0 <__sprintf_chk@plt+0x2a10>
xor    %eax,%eax
mov    %eax,0x28(%esp)
mov    0x4(%esi),%eax
test   %eax,%eax
je     804bdfc <__sprintf_chk@plt+0x2a4c>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edx),%ecx
test   %ecx,%ecx
je     804bdf4 <__sprintf_chk@plt+0x2a44>
testb  $0x2,0xc(%edx)
je     804bdfe <__sprintf_chk@plt+0x2a4e>
add    $0x18,%edx
sub    $0x1,%eax
jne    804bde8 <__sprintf_chk@plt+0x2a38>
xor    %ecx,%ecx
test   %ebp,%ebp
mov    %ecx,0x2c(%esp)
jne    804be42 <__sprintf_chk@plt+0x2a92>
mov    0x14(%esp),%eax
test   %eax,%eax
jne    804be33 <__sprintf_chk@plt+0x2a83>
mov    0x14(%esp),%edi
cmp    %edi,%ebp
je     804be4f <__sprintf_chk@plt+0x2a9f>
mov    %ebp,%eax
sub    %edi,%eax
jmp    804bca8 <__sprintf_chk@plt+0x28f8>
mov    $0x1,%eax
jmp    804bd1e <__sprintf_chk@plt+0x296e>
mov    $0xffffffff,%eax
jmp    804bd1e <__sprintf_chk@plt+0x296e>
lea    0x2c(%esp),%eax
call   804b930 <__sprintf_chk@plt+0x2580>
mov    %eax,0x14(%esp)
jmp    804be0e <__sprintf_chk@plt+0x2a5e>
lea    0x28(%esp),%eax
call   804b930 <__sprintf_chk@plt+0x2580>
mov    %eax,%ebp
jmp    804be06 <__sprintf_chk@plt+0x2a56>
movzbl 0x1c(%esp),%eax
or     0x18(%esp),%al
jne    804be7b <__sprintf_chk@plt+0x2acb>
mov    0x28(%esp),%eax
test   %eax,%eax
je     804bed7 <__sprintf_chk@plt+0x2b27>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     804beca <__sprintf_chk@plt+0x2b1a>
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049180 <strcasecmp@plt>
jmp    804bd0f <__sprintf_chk@plt+0x295f>
cmpb   $0x0,0x18(%esp)
je     804bee8 <__sprintf_chk@plt+0x2b38>
mov    0x18(%esp),%eax
movzbl %al,%ebp
mov    %eax,%edi
shl    $0x2,%ebp
mov    0x1c(%esp),%eax
test   %al,%al
mov    %eax,%edx
je     804bedb <__sprintf_chk@plt+0x2b2b>
mov    %edx,0x14(%esp)
call   8049370 <__ctype_tolower_loc@plt>
mov    0x14(%esp),%edx
movzbl %dl,%edx
mov    (%eax),%ecx
mov    (%ecx,%ebp,1),%eax
sub    (%ecx,%edx,4),%eax
jne    804bd1e <__sprintf_chk@plt+0x296e>
mov    %edi,%eax
movzbl %al,%edi
mov    %edx,%eax
sub    %edi,%eax
je     804bd13 <__sprintf_chk@plt+0x2963>
jmp    804bd1e <__sprintf_chk@plt+0x296e>
movzbl (%eax),%edi
mov    %edi,%eax
movzbl %al,%ebp
shl    $0x2,%ebp
jmp    804be8e <__sprintf_chk@plt+0x2ade>
xor    %ebp,%ebp
xor    %edi,%edi
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804bef6 <__sprintf_chk@plt+0x2b46>
movzbl (%eax),%edx
jmp    804be98 <__sprintf_chk@plt+0x2ae8>
mov    0x28(%esp),%eax
test   %eax,%eax
jne    804beca <__sprintf_chk@plt+0x2b1a>
xor    %ebp,%ebp
xor    %edi,%edi
jmp    804be8e <__sprintf_chk@plt+0x2ade>
xor    %edx,%edx
jmp    804be98 <__sprintf_chk@plt+0x2ae8>
lea    0x0(%esi),%esi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x1c(%eax),%eax
sub    0x18(%ebx),%eax
cmp    0x10(%ebx),%eax
ja     804bf68 <__sprintf_chk@plt+0x2bb8>
mov    0x14(%ebx),%ecx
xor    %eax,%eax
test   %ecx,%ecx
cmovns 0x14(%ebx),%eax
sub    %eax,%edx
mov    %edx,%esi
jmp    804bf34 <__sprintf_chk@plt+0x2b84>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%eax),%edx
mov    %edx,0x1c(%ebx)
movb   $0x20,(%eax)
sub    $0x1,%esi
test   %esi,%esi
jle    804bf60 <__sprintf_chk@plt+0x2bb0>
mov    0x1c(%ebx),%eax
cmp    0x20(%ebx),%eax
jb     804bf28 <__sprintf_chk@plt+0x2b78>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804bf31 <__sprintf_chk@plt+0x2b81>
mov    0x1c(%ebx),%eax
jmp    804bf28 <__sprintf_chk@plt+0x2b78>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0xc(%esp),%edx
jmp    804bf12 <__sprintf_chk@plt+0x2b62>
lea    0x0(%esi),%esi
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
mov    0x14(%ecx),%eax
test   %eax,%eax
je     804bfb8 <__sprintf_chk@plt+0x2c08>
mov    0x20(%esp),%eax
mov    %edx,%edi
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   804fd10 <argp_parse+0xd10>
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   *0x14(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804bfd0 <__sprintf_chk@plt+0x2c20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x2c,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%edx),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,%ecx
mov    $0x2000003,%edx
mov    %eax,%ebp
mov    0x10(%esi),%eax
mov    %eax,(%esp)
mov    %ebp,%eax
call   804bf80 <__sprintf_chk@plt+0x2bd0>
test   %eax,%eax
mov    %eax,%ebx
je     804c0e9 <__sprintf_chk@plt+0x2d39>
cmpb   $0x0,(%eax)
je     804c0df <__sprintf_chk@plt+0x2d2f>
mov    0x8(%esi),%eax
mov    (%eax),%eax
test   %eax,%eax
je     804c03c <__sprintf_chk@plt+0x2c8c>
mov    0x4(%esi),%edi
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804c1e8 <__sprintf_chk@plt+0x2e38>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    0x4(%esi),%eax
mov    0x80592f8,%edx
call   804bf00 <__sprintf_chk@plt+0x2b50>
mov    0x4(%esi),%edx
mov    0x80592f8,%eax
mov    0x1c(%edx),%edi
mov    %eax,0xc(%esp)
mov    %edi,%ecx
sub    0x18(%edx),%ecx
cmp    0x10(%edx),%ecx
ja     804c128 <__sprintf_chk@plt+0x2d78>
mov    %eax,0x4(%edx)
mov    %edx,%ecx
mov    %eax,0xc(%ecx)
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
call   8049150 <strlen@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
je     804c0b6 <__sprintf_chk@plt+0x2d06>
lea    (%edi,%eax,1),%eax
cmp    %eax,0x20(%edx)
jb     804c100 <__sprintf_chk@plt+0x2d50>
mov    %ecx,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x10(%esp)
mov    %ecx,0xc(%esp)
call   8048fc0 <memcpy@plt>
mov    0x10(%esp),%edx
mov    0xc(%esp),%ecx
add    %ecx,0x1c(%edx)
mov    0x4(%esi),%edx
mov    0x1c(%edx),%edi
mov    %edi,%eax
mov    %edx,%ecx
sub    0x18(%edx),%eax
cmp    0x10(%edx),%eax
ja     804c198 <__sprintf_chk@plt+0x2de8>
cmp    %edi,0x20(%ecx)
movl   $0x0,0x4(%edx)
jbe    804c1be <__sprintf_chk@plt+0x2e0e>
lea    0x1(%edi),%eax
mov    %eax,0x1c(%ecx)
movb   $0xa,(%edi)
mov    0x8(%esi),%eax
movl   $0x1,0x4(%eax)
cmp    %ebp,%ebx
je     804c0f5 <__sprintf_chk@plt+0x2d45>
mov    %ebx,(%esp)
call   8048fb0 <free@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ecx,0x4(%esp)
mov    %edx,(%esp)
mov    %ecx,0x10(%esp)
call   8052860 <argp_parse+0x3860>
mov    0xc(%esp),%edx
mov    0x10(%esp),%ecx
test   %eax,%eax
je     804c0b0 <__sprintf_chk@plt+0x2d00>
mov    0x1c(%edx),%edi
jmp    804c08d <__sprintf_chk@plt+0x2cdd>
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%esp)
mov    %edx,0x1c(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x4(%esi),%ecx
mov    0x80592f8,%eax
mov    0x1c(%ecx),%edi
mov    %eax,0x18(%esp)
mov    0xc(%esp),%eax
mov    %edi,%edx
sub    0x18(%ecx),%edx
mov    %edx,0x10(%esp)
mov    0x10(%ecx),%edx
mov    %edx,0x14(%esp)
mov    0x1c(%esp),%edx
mov    %eax,0x4(%edx)
mov    0x14(%esp),%edx
cmp    %edx,0x10(%esp)
mov    0x18(%esp),%eax
jbe    804c208 <__sprintf_chk@plt+0x2e58>
mov    %ecx,(%esp)
mov    %eax,0x10(%esp)
mov    %ecx,0xc(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x4(%esi),%edx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%eax
mov    0x1c(%edx),%edi
jmp    804c06c <__sprintf_chk@plt+0x2cbc>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%esp)
mov    %edx,0xc(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x4(%esi),%ecx
mov    0xc(%esp),%edx
mov    0x1c(%ecx),%edi
cmp    %edi,0x20(%ecx)
movl   $0x0,0x4(%edx)
ja     804c0d6 <__sprintf_chk@plt+0x2d26>
mov    %ecx,(%esp)
movl   $0x1,0x4(%esp)
mov    %ecx,0xc(%esp)
call   8052860 <argp_parse+0x3860>
mov    0xc(%esp),%ecx
test   %eax,%eax
je     804c0df <__sprintf_chk@plt+0x2d2f>
mov    0x1c(%ecx),%edi
jmp    804c0d6 <__sprintf_chk@plt+0x2d26>
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804c03c <__sprintf_chk@plt+0x2c8c>
mov    0x1c(%edi),%eax
jmp    804c033 <__sprintf_chk@plt+0x2c83>
mov    %ecx,%edx
jmp    804c06c <__sprintf_chk@plt+0x2cbc>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x1c,%esp
mov    0xc(%edx),%ebx
test   %ebx,%ebx
je     804c2b8 <__sprintf_chk@plt+0x2f08>
mov    0x8(%edx),%eax
mov    (%edx),%edx
mov    0x4(%eax),%ecx
mov    (%eax),%ebx
mov    0x10(%edx),%ebp
test   %ecx,%ecx
je     804c25b <__sprintf_chk@plt+0x2eab>
test   %ebx,%ebx
je     804c25b <__sprintf_chk@plt+0x2eab>
mov    0xc(%ebx),%eax
cmp    %eax,0xc(%edx)
je     804c25b <__sprintf_chk@plt+0x2eab>
mov    0x4(%esi),%edx
mov    0x1c(%edx),%eax
cmp    0x20(%edx),%eax
jae    804c340 <__sprintf_chk@plt+0x2f90>
lea    0x1(%eax),%ecx
mov    %ecx,0x1c(%edx)
movb   $0xa,(%eax)
test   %ebp,%ebp
je     804c2f8 <__sprintf_chk@plt+0x2f48>
mov    0x0(%ebp),%eax
test   %eax,%eax
je     804c2f8 <__sprintf_chk@plt+0x2f48>
cmpb   $0x0,(%eax)
je     804c2f8 <__sprintf_chk@plt+0x2f48>
test   %ebx,%ebx
je     804c288 <__sprintf_chk@plt+0x2ed8>
mov    0x10(%ebx),%ebx
cmp    %ebp,%ebx
je     804c2f8 <__sprintf_chk@plt+0x2f48>
test   %ebx,%ebx
jne    804c2ec <__sprintf_chk@plt+0x2f3c>
xchg   %ax,%ax
mov    0x4(%esi),%edx
mov    %esi,%ecx
mov    0xc(%edx),%ebx
mov    0x10(%ebp),%edx
call   804bfd0 <__sprintf_chk@plt+0x2c20>
mov    0x4(%esi),%ebp
mov    0x1c(%ebp),%edx
mov    %ebp,%eax
sub    0x18(%ebp),%edx
cmp    0x10(%ebp),%edx
ja     804c330 <__sprintf_chk@plt+0x2f80>
mov    %ebx,0xc(%ebp)
jmp    804c2fb <__sprintf_chk@plt+0x2f4b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edx),%ebx
mov    0x1c(%ebx),%eax
lea    0x2(%eax),%edx
cmp    %edx,0x20(%ebx)
jb     804c310 <__sprintf_chk@plt+0x2f60>
mov    $0x202c,%edx
mov    %dx,(%eax)
addl   $0x2,0x1c(%ebx)
mov    0x4(%esi),%eax
add    $0x1c,%esp
mov    %edi,%edx
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804bf00 <__sprintf_chk@plt+0x2b50>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
je     804c2f3 <__sprintf_chk@plt+0x2f43>
mov    0xc(%ebx),%ebx
cmp    %ebx,%ebp
jne    804c2e8 <__sprintf_chk@plt+0x2f38>
cmp    %ebx,%ebp
jne    804c288 <__sprintf_chk@plt+0x2ed8>
nop
mov    0x4(%esi),%eax
movl   $0x0,0xc(%esi)
add    $0x1c,%esp
mov    %edi,%edx
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804bf00 <__sprintf_chk@plt+0x2b50>
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804c2d2 <__sprintf_chk@plt+0x2f22>
mov    0x1c(%ebx),%eax
jmp    804c2c6 <__sprintf_chk@plt+0x2f16>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x4(%esi),%eax
jmp    804c2ac <__sprintf_chk@plt+0x2efc>
mov    %edx,(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
call   8052860 <argp_parse+0x3860>
mov    0xc(%esp),%edx
test   %eax,%eax
je     804c25b <__sprintf_chk@plt+0x2eab>
mov    0x1c(%edx),%eax
jmp    804c252 <__sprintf_chk@plt+0x2ea2>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x10(%eax),%esi
mov    %eax,0x1c(%esp)
mov    0xc(%eax),%eax
mov    %edx,0x14(%esp)
mov    0x58(%esp),%edi
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804c698 <__sprintf_chk@plt+0x32e8>
movl   $0xb,0x4(%esp)
mov    %eax,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
je     804c718 <__sprintf_chk@plt+0x3368>
test   %ebp,%ebp
je     804c6f0 <__sprintf_chk@plt+0x3340>
add    $0x1,%eax
mov    %eax,0x18(%esp)
movb   $0x0,0x27(%esp)
mov    0x18(%esp),%ecx
test   %ecx,%ecx
je     804c698 <__sprintf_chk@plt+0x32e8>
mov    0x18(%esp),%eax
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,0x20(%esp)
mov    0x1c(%esp),%ebx
mov    0x14(%ebx),%edx
test   %edx,%edx
je     804c6b4 <__sprintf_chk@plt+0x3304>
mov    0x14(%esp),%edx
mov    %ebx,(%esp)
mov    %edx,0x4(%esp)
call   804fd10 <argp_parse+0xd10>
mov    0x14(%ebx),%edx
cmp    $0x1,%ebp
mov    0x20(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %eax,%ecx
mov    %eax,0x2c(%esp)
sbb    %eax,%eax
add    $0x2000002,%eax
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
call   *%edx
mov    %eax,%edx
test   %edx,%edx
je     804c6c8 <__sprintf_chk@plt+0x3318>
mov    0x50(%esp),%eax
test   %eax,%eax
je     804c45c <__sprintf_chk@plt+0x30ac>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804c740 <__sprintf_chk@plt+0x3390>
lea    0x1(%eax),%ecx
mov    %ecx,0x1c(%edi)
movb   $0xa,(%eax)
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
call   8049150 <strlen@plt>
mov    0x28(%esp),%edx
test   %eax,%eax
mov    %eax,%ebx
jne    804c618 <__sprintf_chk@plt+0x3268>
mov    0x1c(%edi),%ebx
sub    0x18(%edi),%ebx
cmp    0x10(%edi),%ebx
ja     804c66c <__sprintf_chk@plt+0x32bc>
mov    0x14(%edi),%ebx
xor    %eax,%eax
test   %ebx,%ebx
cmovns 0x14(%edi),%eax
cmp    %eax,0x4(%edi)
jb     804c5f8 <__sprintf_chk@plt+0x3248>
cmp    0x20(%esp),%edx
mov    $0x1,%ebx
je     804c4ac <__sprintf_chk@plt+0x30fc>
mov    %edx,(%esp)
call   8048fb0 <free@plt>
cmpb   $0x0,0x27(%esp)
jne    804c6d8 <__sprintf_chk@plt+0x3328>
test   %ebp,%ebp
je     804c591 <__sprintf_chk@plt+0x31e1>
mov    0x1c(%esp),%eax
mov    0x14(%eax),%eax
test   %eax,%eax
je     804c591 <__sprintf_chk@plt+0x31e1>
mov    0x2c(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x2000004,(%esp)
mov    %edx,0x8(%esp)
call   *%eax
test   %eax,%eax
mov    %eax,%ecx
je     804c591 <__sprintf_chk@plt+0x31e1>
or     0x50(%esp),%ebx
je     804c50c <__sprintf_chk@plt+0x315c>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804c7e0 <__sprintf_chk@plt+0x3430>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    %ecx,(%esp)
mov    %ecx,0x18(%esp)
call   8049150 <strlen@plt>
mov    0x18(%esp),%ecx
test   %eax,%eax
mov    %eax,%ebx
je     804c550 <__sprintf_chk@plt+0x31a0>
mov    0x1c(%edi),%eax
lea    (%eax,%ebx,1),%edx
cmp    %edx,0x20(%edi)
jae    804c793 <__sprintf_chk@plt+0x33e3>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x18(%esp),%ecx
test   %eax,%eax
jne    804c790 <__sprintf_chk@plt+0x33e0>
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,(%esp)
call   8048fb0 <free@plt>
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
ja     804c7b3 <__sprintf_chk@plt+0x3403>
mov    0x14(%edi),%ecx
xor    %eax,%eax
test   %ecx,%ecx
cmovns 0x14(%edi),%eax
cmp    %eax,0x4(%edi)
jae    804c58c <__sprintf_chk@plt+0x31dc>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804c7c0 <__sprintf_chk@plt+0x3410>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    $0x1,%ebx
test   %esi,%esi
je     804c5e8 <__sprintf_chk@plt+0x3238>
mov    (%esi),%eax
test   %eax,%eax
je     804c5e8 <__sprintf_chk@plt+0x3238>
mov    0x54(%esp),%edx
test   %edx,%edx
sete   0x18(%esp)
test   $0x1,%bl
je     804c5b8 <__sprintf_chk@plt+0x3208>
jmp    804c808 <__sprintf_chk@plt+0x3458>
test   %ebx,%ebx
jne    804c688 <__sprintf_chk@plt+0x32d8>
mov    0x54(%esp),%ecx
add    $0x10,%esi
xor    %edx,%edx
mov    %edi,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %ebx,%ecx
or     0x50(%esp),%ecx
mov    %ebp,%ecx
setne  %dl
mov    %edx,(%esp)
mov    0x14(%esp),%edx
call   804c370 <__sprintf_chk@plt+0x2fc0>
or     %eax,%ebx
mov    (%esi),%eax
test   %eax,%eax
jne    804c5b0 <__sprintf_chk@plt+0x3200>
add    $0x3c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804c768 <__sprintf_chk@plt+0x33b8>
lea    0x1(%eax),%ecx
mov    %ecx,0x1c(%edi)
movb   $0xa,(%eax)
jmp    804c499 <__sprintf_chk@plt+0x30e9>
lea    0x0(%esi),%esi
mov    0x1c(%edi),%eax
lea    (%eax,%ebx,1),%ecx
cmp    %ecx,0x20(%edi)
jae    804c642 <__sprintf_chk@plt+0x3292>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x28(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x28(%esp),%edx
test   %eax,%eax
je     804c476 <__sprintf_chk@plt+0x30c6>
mov    0x1c(%edi),%eax
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x28(%esp)
call   8048fc0 <memcpy@plt>
mov    0x28(%esp),%edx
add    0x1c(%edi),%ebx
mov    %ebx,0x1c(%edi)
sub    0x18(%edi),%ebx
cmp    0x10(%edi),%ebx
jbe    804c485 <__sprintf_chk@plt+0x30d5>
mov    %edi,(%esp)
mov    %edx,0x28(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x28(%esp),%edx
jmp    804c485 <__sprintf_chk@plt+0x30d5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x18(%esp)
jne    804c5b8 <__sprintf_chk@plt+0x3208>
jmp    804c5e8 <__sprintf_chk@plt+0x3238>
mov    0x1c(%esp),%ebx
movl   $0x0,0x20(%esp)
movb   $0x0,0x27(%esp)
mov    0x14(%ebx),%edx
test   %edx,%edx
jne    804c401 <__sprintf_chk@plt+0x3051>
mov    0x20(%esp),%edx
movl   $0x0,0x2c(%esp)
test   %edx,%edx
jne    804c43f <__sprintf_chk@plt+0x308f>
xor    %ebx,%ebx
cmpb   $0x0,0x27(%esp)
je     804c4b7 <__sprintf_chk@plt+0x3107>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
jmp    804c4b7 <__sprintf_chk@plt+0x3107>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%edx
sub    %edx,%eax
mov    %eax,0x4(%esp)
mov    %eax,%ebx
mov    %edx,(%esp)
call   8049260 <strndup@plt>
test   %ebx,%ebx
setne  0x27(%esp)
mov    %eax,0x18(%esp)
jmp    804c3c3 <__sprintf_chk@plt+0x3013>
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
movb   $0x0,0x27(%esp)
je     804c3cf <__sprintf_chk@plt+0x301f>
movl   $0x0,0x20(%esp)
movl   $0x0,0x18(%esp)
jmp    804c3f2 <__sprintf_chk@plt+0x3042>
lea    0x0(%esi),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x28(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x28(%esp),%edx
test   %eax,%eax
je     804c45c <__sprintf_chk@plt+0x30ac>
mov    0x1c(%edi),%eax
jmp    804c453 <__sprintf_chk@plt+0x30a3>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x28(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x28(%esp),%edx
test   %eax,%eax
je     804c499 <__sprintf_chk@plt+0x30e9>
mov    0x1c(%edi),%eax
jmp    804c604 <__sprintf_chk@plt+0x3254>
mov    0x1c(%edi),%eax
mov    %ecx,0x4(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8048fc0 <memcpy@plt>
mov    0x18(%esp),%ecx
add    %ebx,0x1c(%edi)
jmp    804c550 <__sprintf_chk@plt+0x31a0>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
jmp    804c567 <__sprintf_chk@plt+0x31b7>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804c58c <__sprintf_chk@plt+0x31dc>
mov    0x1c(%edi),%eax
jmp    804c583 <__sprintf_chk@plt+0x31d3>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %ecx,0x18(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x18(%esp),%ecx
test   %eax,%eax
je     804c50c <__sprintf_chk@plt+0x315c>
mov    0x1c(%edi),%eax
jmp    804c503 <__sprintf_chk@plt+0x3153>
cmpb   $0x0,0x18(%esp)
jne    804c5b8 <__sprintf_chk@plt+0x3208>
mov    $0x1,%ebx
jmp    804c5e8 <__sprintf_chk@plt+0x3238>
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x1c(%eax),%eax
mov    %eax,%ecx
sub    0x18(%ebx),%ecx
cmp    0x10(%ebx),%ecx
ja     804c870 <__sprintf_chk@plt+0x34c0>
xor    %ecx,%ecx
cmpl   $0x0,0x14(%ebx)
cmovns 0x14(%ebx),%ecx
add    %edx,%ecx
cmp    0x8(%ebx),%ecx
jb     804c858 <__sprintf_chk@plt+0x34a8>
cmp    %eax,0x20(%ebx)
jbe    804c888 <__sprintf_chk@plt+0x34d8>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%ebx)
movb   $0xa,(%eax)
add    $0x18,%esp
pop    %ebx
ret
nop
cmp    %eax,0x20(%ebx)
jbe    804c8a8 <__sprintf_chk@plt+0x34f8>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%ebx)
movb   $0x20,(%eax)
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%ebx),%eax
mov    0xc(%esp),%edx
jmp    804c833 <__sprintf_chk@plt+0x3483>
lea    0x0(%esi),%esi
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804c866 <__sprintf_chk@plt+0x34b6>
mov    0x1c(%ebx),%eax
jmp    804c849 <__sprintf_chk@plt+0x3499>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804c866 <__sprintf_chk@plt+0x34b6>
mov    0x1c(%ebx),%eax
jmp    804c85d <__sprintf_chk@plt+0x34ad>
jmp    804c8d0 <__sprintf_chk@plt+0x3520>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%edx
mov    0x8(%esi),%eax
mov    0xc(%edx),%ebx
or     0xc(%esi),%ebx
test   %eax,%eax
je     804c960 <__sprintf_chk@plt+0x35b0>
test   $0x10,%bl
je     804c900 <__sprintf_chk@plt+0x3550>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
movl   $0x5,0x8(%esp)
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
and    $0x1,%ebx
mov    %eax,%edi
jne    804c970 <__sprintf_chk@plt+0x35c0>
mov    %eax,(%esp)
call   8049150 <strlen@plt>
lea    0x6(%eax),%edx
mov    0x2c(%esp),%eax
call   804c820 <__sprintf_chk@plt+0x3470>
mov    %edi,0xc(%esp)
mov    0x4(%esi),%eax
movl   $0x8054229,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%edx),%eax
test   %eax,%eax
jne    804c8eb <__sprintf_chk@plt+0x353b>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    %eax,0xc(%esp)
mov    0x4(%esi),%eax
movl   $0x805421e,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8052930 <argp_parse+0x3930>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    (%ecx),%eax
mov    0x10(%edi),%ebx
movl   $0x5,0x8(%esp)
mov    0x50(%esp),%esi
mov    %edx,0x14(%esp)
mov    0x54(%esp),%ebp
mov    %eax,0x20(%esp)
mov    0x8(%edi),%eax
mov    %ecx,0x1c(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%edi),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    0x14(%esp),%ecx
mov    $0x2000006,%edx
mov    %ecx,(%esp)
mov    %edi,%ecx
mov    %eax,0x24(%esp)
call   804bf80 <__sprintf_chk@plt+0x2bd0>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804cb88 <__sprintf_chk@plt+0x37d8>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <strchrnul@plt>
cmpb   $0x0,(%eax)
mov    %eax,0x10(%esp)
jne    804cb08 <__sprintf_chk@plt+0x3758>
mov    0x18(%esp),%edi
movb   $0x0,0x28(%esp)
mov    0x10(%esp),%eax
lea    0x1(%eax),%edx
mov    %ebp,%eax
sub    %edi,%edx
call   804c820 <__sprintf_chk@plt+0x3470>
mov    0x10(%esp),%edx
mov    0x1c(%ebp),%eax
sub    %edi,%edx
lea    (%eax,%edx,1),%ecx
cmp    %ecx,0x20(%ebp)
jae    804ca61 <__sprintf_chk@plt+0x36b1>
mov    %edx,0x4(%esp)
mov    %ebp,(%esp)
mov    %edx,0x2c(%esp)
call   8052860 <argp_parse+0x3860>
mov    0x2c(%esp),%edx
test   %eax,%eax
je     804ca7c <__sprintf_chk@plt+0x36cc>
mov    0x1c(%ebp),%eax
mov    %edx,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   8048fc0 <memcpy@plt>
mov    0x2c(%esp),%edx
add    %edx,0x1c(%ebp)
mov    0x18(%esp),%eax
cmp    %eax,0x24(%esp)
je     804ca8e <__sprintf_chk@plt+0x36de>
mov    %eax,(%esp)
call   8048fb0 <free@plt>
test   %ebx,%ebx
je     804caca <__sprintf_chk@plt+0x371a>
mov    (%ebx),%eax
test   %eax,%eax
je     804caca <__sprintf_chk@plt+0x371a>
mov    %esi,%edx
mov    0x14(%esp),%edi
mov    %ebp,%esi
mov    0x1c(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%esp)
mov    %ebp,%ecx
mov    %edi,%edx
mov    %esi,0x4(%esp)
add    $0x10,%ebx
call   804c9a0 <__sprintf_chk@plt+0x35f0>
xor    %edx,%edx
test   %eax,%eax
mov    (%ebx),%eax
sete   %dl
test   %eax,%eax
jne    804caa8 <__sprintf_chk@plt+0x36f8>
mov    %edx,%esi
test   %esi,%esi
je     804cb68 <__sprintf_chk@plt+0x37b8>
cmpb   $0x0,0x28(%esp)
je     804cb68 <__sprintf_chk@plt+0x37b8>
mov    0x10(%esp),%eax
cmpb   $0x0,(%eax)
mov    0x20(%esp),%eax
jne    804cb78 <__sprintf_chk@plt+0x37c8>
cmpb   $0x0,(%eax)
jle    804cb9a <__sprintf_chk@plt+0x37ea>
movb   $0x0,(%eax)
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movsbl (%eax),%eax
test   %eax,%eax
mov    %eax,%ecx
jle    804cba1 <__sprintf_chk@plt+0x37f1>
mov    0x10(%esp),%eax
xor    %edx,%edx
mov    %ebx,0x28(%esp)
mov    %ecx,%ebx
mov    %esi,0x50(%esp)
mov    %edx,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%eax),%edi
add    $0x1,%esi
movl   $0xa,0x4(%esp)
mov    %edi,(%esp)
call   80491c0 <strchrnul@plt>
cmp    %ebx,%esi
jl     804cb30 <__sprintf_chk@plt+0x3780>
mov    0x28(%esp),%ebx
mov    0x50(%esp),%esi
mov    %eax,0x10(%esp)
mov    0x1c(%esp),%eax
movb   $0x1,0x28(%esp)
addl   $0x1,(%eax)
jmp    804ca25 <__sprintf_chk@plt+0x3675>
nop
xor    %eax,%eax
test   %esi,%esi
sete   %al
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
addb   $0x1,(%eax)
add    $0x3c,%esp
pop    %ebx
mov    $0x1,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
movb   $0x0,0x28(%esp)
movl   $0x0,0x10(%esp)
jmp    804ca8e <__sprintf_chk@plt+0x36de>
xor    %eax,%eax
jmp    804cafc <__sprintf_chk@plt+0x374c>
mov    0x18(%esp),%edi
jmp    804cb56 <__sprintf_chk@plt+0x37a6>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    0x8(%esp),%eax
mov    0x8(%eax),%ecx
test   %ecx,%ecx
je     804cbc0 <__sprintf_chk@plt+0x3810>
xor    %eax,%eax
pop    %ebx
ret
mov    0xc(%esp),%ecx
mov    0x8(%ecx),%edx
test   %edx,%edx
jne    804cbbc <__sprintf_chk@plt+0x380c>
mov    0xc(%ecx),%edx
or     0xc(%eax),%edx
and    $0x10,%edx
jne    804cbbc <__sprintf_chk@plt+0x380c>
mov    0x14(%esp),%edx
mov    0x14(%esp),%ebx
mov    0x4(%eax),%eax
mov    (%edx),%edx
lea    0x1(%edx),%ecx
mov    %ecx,(%ebx)
mov    %al,(%edx)
jmp    804cbbc <__sprintf_chk@plt+0x380c>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
test   %eax,%eax
mov    0x30(%esp),%ebp
mov    0x34(%esp),%esi
mov    0x38(%esp),%ebx
je     804cc70 <__sprintf_chk@plt+0x38c0>
testb  $0x1,(%edx)
jne    804cc40 <__sprintf_chk@plt+0x3890>
mov    %esi,(%esp)
mov    %ecx,%edi
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049010 <dcgettext@plt>
mov    %edi,0x34(%esp)
mov    %ebx,0x30(%esp)
mov    %eax,0x38(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8052930 <argp_parse+0x3930>
lea    0x0(%esi),%esi
mov    %esi,(%esp)
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049010 <dcgettext@plt>
mov    %ebp,0x34(%esp)
mov    %ebx,0x30(%esp)
mov    %eax,0x38(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8052930 <argp_parse+0x3930>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x10(%eax),%ecx
mov    (%eax),%esi
movl   $0x10,(%esp)
mov    %eax,0x38(%esp)
mov    %edx,0x3c(%esp)
mov    %ecx,0x24(%esp)
call   80490e0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
je     804d1ba <__sprintf_chk@plt+0x3e0a>
mov    0x2c(%esp),%eax
test   %esi,%esi
movl   $0x0,0x4(%eax)
movl   $0x0,0xc(%eax)
je     804ce6c <__sprintf_chk@plt+0x3abc>
testb  $0x4,0xc(%esi)
jne    804d1de <__sprintf_chk@plt+0x3e2e>
xor    %edx,%edx
mov    %esi,%ebx
mov    %esi,0x18(%esp)
mov    %eax,%edi
mov    %edx,%esi
movl   $0x0,0x14(%esp)
jmp    804cd26 <__sprintf_chk@plt+0x3976>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%eax
test   $0x4,%al
jne    804ccfd <__sprintf_chk@plt+0x394d>
add    $0x1,%esi
mov    %esi,0x4(%edi)
test   $0x8,%al
jne    804cd23 <__sprintf_chk@plt+0x3973>
lea    -0x1(%ebp),%eax
cmp    $0xfe,%eax
ja     804cd23 <__sprintf_chk@plt+0x3973>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
movzwl (%eax,%ebp,2),%eax
and    $0x4000,%ax
cmp    $0x1,%ax
sbbl   $0xffffffff,0x14(%esp)
add    $0x18,%ebx
mov    0x4(%ebx),%ebp
test   %ebp,%ebp
jne    804ccf0 <__sprintf_chk@plt+0x3940>
mov    (%ebx),%eax
test   %eax,%eax
jne    804ccf0 <__sprintf_chk@plt+0x3940>
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    804ccf0 <__sprintf_chk@plt+0x3940>
mov    0x14(%ebx),%eax
test   %eax,%eax
jne    804ccf0 <__sprintf_chk@plt+0x3940>
mov    %esi,%edx
mov    0x18(%esp),%esi
imul   $0x1c,%edx,%eax
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   80490e0 <malloc@plt>
mov    0x2c(%esp),%edi
mov    %eax,%ebp
mov    0x14(%esp),%eax
mov    %ebp,(%edi)
add    $0x1,%eax
mov    %eax,(%esp)
call   80490e0 <malloc@plt>
test   %ebp,%ebp
mov    0x1c(%esp),%edx
mov    %eax,%ecx
mov    %eax,0x18(%esp)
mov    %ecx,0x8(%edi)
je     804d2c6 <__sprintf_chk@plt+0x3f16>
mov    0x18(%esp),%eax
test   %eax,%eax
je     804d2c6 <__sprintf_chk@plt+0x3f16>
cmp    $0x9249249,%edx
ja     804d2a2 <__sprintf_chk@plt+0x3ef2>
mov    0x4(%esi),%edx
mov    0x18(%esp),%ebx
movl   $0x0,0x14(%esp)
mov    %edx,%ecx
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ecx,%ecx
jne    804cdbe <__sprintf_chk@plt+0x3a0e>
mov    (%esi),%eax
test   %eax,%eax
je     804d276 <__sprintf_chk@plt+0x3ec6>
mov    0x14(%esi),%eax
test   %eax,%eax
mov    %esi,0x0(%ebp)
movl   $0x0,0x4(%ebp)
mov    %ebx,0x8(%ebp)
je     804d25f <__sprintf_chk@plt+0x3eaf>
mov    %eax,0x14(%esp)
mov    0x14(%esp),%eax
mov    $0x1,%edi
mov    0xc(%esi),%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0xc(%ebp)
mov    0x3c(%esp),%eax
mov    %eax,0x10(%ebp)
mov    0x38(%esp),%eax
mov    %eax,0x14(%ebp)
mov    %ecx,%ebp
lea    0x0(%esi),%esi
and    $0x8,%edx
jne    804ce40 <__sprintf_chk@plt+0x3a90>
lea    -0x1(%ebp),%eax
cmp    $0xfe,%eax
ja     804ce40 <__sprintf_chk@plt+0x3a90>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%ebp,2)
je     804ce40 <__sprintf_chk@plt+0x3a90>
mov    0x18(%esp),%edx
mov    %ebp,%eax
cmp    %ebx,%edx
jae    804d228 <__sprintf_chk@plt+0x3e78>
cmp    (%edx),%al
je     804ce40 <__sprintf_chk@plt+0x3a90>
nop
add    $0x1,%edx
cmp    %ebx,%edx
je     804d228 <__sprintf_chk@plt+0x3e78>
cmp    (%edx),%al
jne    804ce30 <__sprintf_chk@plt+0x3a80>
nop
add    $0x18,%esi
mov    0x4(%esi),%eax
test   %eax,%eax
jne    804ce54 <__sprintf_chk@plt+0x3aa4>
mov    (%esi),%ebp
test   %ebp,%ebp
je     804d238 <__sprintf_chk@plt+0x3e88>
mov    0xc(%esi),%edx
lea    0x1(%edi),%ecx
test   $0x4,%dl
je     804d24e <__sprintf_chk@plt+0x3e9e>
mov    %ecx,%edi
mov    %eax,%ebp
jmp    804ce00 <__sprintf_chk@plt+0x3a50>
movb   $0x0,(%ebx)
mov    0x24(%esp),%eax
test   %eax,%eax
je     804cf86 <__sprintf_chk@plt+0x3bd6>
mov    (%eax),%ecx
test   %ecx,%ecx
je     804cf86 <__sprintf_chk@plt+0x3bd6>
mov    0x2c(%esp),%eax
add    $0xc,%eax
mov    %eax,0x4c(%esp)
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
mov    0xc(%eax),%edi
test   %edi,%edi
jne    804d175 <__sprintf_chk@plt+0x3dc5>
mov    0x24(%esp),%eax
mov    0x8(%eax),%ebx
test   %ebx,%ebx
je     804d184 <__sprintf_chk@plt+0x3dd4>
mov    0x38(%esp),%ebp
mov    0x24(%esp),%esi
sub    0x10(%ebp),%esi
movl   $0x1c,(%esp)
call   80490e0 <malloc@plt>
sar    $0x4,%esi
test   %eax,%eax
mov    %eax,%edx
je     804cf02 <__sprintf_chk@plt+0x3b52>
mov    %edi,0x8(%eax)
mov    %ebx,(%eax)
mov    %esi,0x4(%eax)
mov    0x3c(%esp),%eax
mov    %ebp,0x10(%edx)
test   %eax,%eax
mov    %eax,0xc(%edx)
je     804d17d <__sprintf_chk@plt+0x3dcd>
mov    0x14(%eax),%eax
mov    %eax,0x14(%esp)
add    $0x1,%eax
mov    0x2c(%esp),%ecx
mov    %eax,0x14(%edx)
mov    0xc(%ecx),%eax
mov    %edx,0xc(%ecx)
mov    %eax,0x18(%edx)
mov    0x24(%esp),%eax
mov    (%eax),%eax
call   804cc80 <__sprintf_chk@plt+0x38d0>
mov    %eax,0x30(%esp)
mov    0x2c(%esp),%eax
mov    0xc(%eax),%edx
test   %edx,%edx
jne    804cf2a <__sprintf_chk@plt+0x3b7a>
jmp    804d18d <__sprintf_chk@plt+0x3ddd>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edx
mov    0x18(%edx),%eax
test   %eax,%eax
jne    804cf28 <__sprintf_chk@plt+0x3b78>
add    $0x18,%edx
mov    0x30(%esp),%ecx
mov    0x4(%ecx),%esi
mov    0xc(%ecx),%eax
test   %esi,%esi
mov    %eax,(%edx)
movl   $0x0,0xc(%ecx)
je     804cf6a <__sprintf_chk@plt+0x3bba>
mov    0x2c(%esp),%edi
mov    0x4(%edi),%ebx
test   %ebx,%ebx
jne    804cf92 <__sprintf_chk@plt+0x3be2>
mov    (%ecx),%eax
mov    %esi,0x4(%edi)
mov    %eax,(%edi)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%edi)
movl   $0x0,0x4(%ecx)
mov    0x30(%esp),%eax
call   804bbb0 <__sprintf_chk@plt+0x2800>
addl   $0x10,0x24(%esp)
mov    0x24(%esp),%eax
mov    (%eax),%eax
test   %eax,%eax
jne    804ce90 <__sprintf_chk@plt+0x3ae0>
mov    0x2c(%esp),%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    (%ebx,%esi,1),%eax
mov    %eax,0x44(%esp)
imul   $0x1c,%eax,%eax
mov    %eax,(%esp)
call   80490e0 <malloc@plt>
mov    0x2c(%esp),%edi
mov    0x8(%edi),%ebp
mov    %eax,0x40(%esp)
mov    %ebp,(%esp)
call   8049150 <strlen@plt>
mov    0x30(%esp),%ecx
mov    %eax,%edi
mov    0x8(%ecx),%eax
mov    %eax,(%esp)
call   8049150 <strlen@plt>
lea    0x1(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   80490e0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     804d196 <__sprintf_chk@plt+0x3de6>
mov    0x40(%esp),%edx
test   %edx,%edx
je     804d196 <__sprintf_chk@plt+0x3de6>
cmpl   $0x9249249,0x44(%esp)
ja     804d202 <__sprintf_chk@plt+0x3e52>
mov    0x30(%esp),%eax
imul   $0x1c,%ebx,%ecx
imul   $0x1c,%esi,%esi
mov    (%eax),%edx
mov    0x2c(%esp),%eax
mov    %ecx,0x14(%esp)
mov    %edx,0x18(%esp)
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
mov    %eax,0x48(%esp)
mov    %eax,0x4(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049250 <mempcpy@plt>
mov    0x18(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <memcpy@plt>
mov    0x28(%esp),%esi
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %esi,(%esp)
call   8048fc0 <memcpy@plt>
mov    0x40(%esp),%eax
mov    %esi,%edx
mov    0x14(%esp),%ecx
sub    %ebp,%edx
add    %edx,0x8(%eax)
add    $0x1c,%eax
sub    $0x1,%ebx
jne    804d060 <__sprintf_chk@plt+0x3cb0>
mov    0x28(%esp),%eax
add    0x40(%esp),%ecx
lea    (%eax,%edi,1),%ebp
mov    0x30(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %ebp,0x1c(%esp)
mov    0x8(%eax),%ecx
mov    0x4(%eax),%eax
test   %eax,%eax
mov    %eax,0x34(%esp)
je     804d0fc <__sprintf_chk@plt+0x3d4c>
mov    0x20(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x4(%eax),%esi
mov    %edi,0x8(%eax)
mov    (%eax),%ebx
test   %esi,%esi
je     804d0f0 <__sprintf_chk@plt+0x3d40>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x8,0xc(%ebx)
movzbl (%ecx),%edx
mov    0x4(%ebx),%edi
jne    804d0e8 <__sprintf_chk@plt+0x3d38>
lea    -0x1(%edi),%eax
cmp    $0xfe,%eax
ja     804d0e8 <__sprintf_chk@plt+0x3d38>
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
call   8049390 <__ctype_b_loc@plt>
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%edi,2)
je     804d0e8 <__sprintf_chk@plt+0x3d38>
movsbl %dl,%eax
cmp    %edi,%eax
je     804d140 <__sprintf_chk@plt+0x3d90>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x18,%ebx
sub    $0x1,%esi
jne    804d0a8 <__sprintf_chk@plt+0x3cf8>
addl   $0x1c,0x20(%esp)
subl   $0x1,0x34(%esp)
jne    804d090 <__sprintf_chk@plt+0x3ce0>
mov    0x1c(%esp),%eax
movb   $0x0,(%eax)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    0x2c(%esp),%edi
mov    0x8(%edi),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    %edi,%eax
mov    0x40(%esp),%edi
mov    0x44(%esp),%ecx
mov    %edi,(%eax)
mov    0x28(%esp),%edi
mov    %ecx,0x4(%eax)
mov    %edi,0x8(%eax)
jmp    804cf6a <__sprintf_chk@plt+0x3bba>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
cmp    %ebp,%eax
jb     804d157 <__sprintf_chk@plt+0x3da7>
jmp    804d160 <__sprintf_chk@plt+0x3db0>
lea    0x0(%esi),%esi
add    $0x1,%eax
cmp    %ebp,%eax
je     804d160 <__sprintf_chk@plt+0x3db0>
cmp    (%eax),%dl
jne    804d150 <__sprintf_chk@plt+0x3da0>
add    $0x1,%ecx
jmp    804d0e8 <__sprintf_chk@plt+0x3d38>
mov    0x1c(%esp),%eax
add    $0x1,%ecx
mov    %dl,(%eax)
add    $0x1,%eax
mov    %eax,0x1c(%esp)
jmp    804d0e8 <__sprintf_chk@plt+0x3d38>
mov    0x8(%eax),%ebx
jmp    804ceae <__sprintf_chk@plt+0x3afe>
xor    %eax,%eax
jmp    804cef2 <__sprintf_chk@plt+0x3b42>
mov    0x3c(%esp),%edx
jmp    804cf02 <__sprintf_chk@plt+0x3b52>
mov    0x4c(%esp),%edx
jmp    804cf34 <__sprintf_chk@plt+0x3b84>
movl   $0x8054580,0xc(%esp)
movl   $0x371,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x8054264,(%esp)
call   8049380 <__assert_fail@plt>
movl   $0x805458b,0xc(%esp)
movl   $0x1bb,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x8054248,(%esp)
call   8049380 <__assert_fail@plt>
movl   $0x805458b,0xc(%esp)
movl   $0x1c5,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x805424c,(%esp)
call   8049380 <__assert_fail@plt>
movl   $0x8054580,0xc(%esp)
movl   $0x373,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x80543dc,(%esp)
call   8049380 <__assert_fail@plt>
xchg   %ax,%ax
mov    %al,(%ebx)
add    $0x1,%ebx
jmp    804ce40 <__sprintf_chk@plt+0x3a90>
lea    0x0(%esi),%esi
mov    0x10(%esi),%ecx
test   %ecx,%ecx
jne    804ce54 <__sprintf_chk@plt+0x3aa4>
mov    0x14(%esi),%edx
test   %edx,%edx
jne    804ce54 <__sprintf_chk@plt+0x3aa4>
mov    0x1c(%esp),%ebp
mov    %eax,%ecx
mov    %edi,0x4(%ebp)
add    $0x1c,%ebp
jmp    804cdb0 <__sprintf_chk@plt+0x3a00>
mov    (%esi),%eax
test   %eax,%eax
jne    804cdda <__sprintf_chk@plt+0x3a2a>
cmp    $0x1,%ecx
adcl   $0x0,0x14(%esp)
jmp    804cdda <__sprintf_chk@plt+0x3a2a>
mov    0x10(%esi),%edi
mov    0x14(%esi),%eax
test   %edi,%edi
jne    804cdc1 <__sprintf_chk@plt+0x3a11>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804ce69 <__sprintf_chk@plt+0x3ab9>
mov    %esi,0x0(%ebp)
movl   $0x0,0x4(%ebp)
mov    %ebx,0x8(%ebp)
jmp    804cdda <__sprintf_chk@plt+0x3a2a>
movl   $0x805458b,0xc(%esp)
movl   $0x1d5,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x805439c,(%esp)
call   8049380 <__assert_fail@plt>
movl   $0x805458b,0xc(%esp)
movl   $0x1d3,0x8(%esp)
movl   $0x8054232,0x4(%esp)
movl   $0x8054378,(%esp)
call   8049380 <__assert_fail@plt>
lea    0x0(%esi),%esi
test   %edx,%edx
je     804d352 <__sprintf_chk@plt+0x3fa2>
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
mov    %edx,0xc(%esp)
mov    0x4(%edi),%edx
mov    (%edi),%ebx
test   %edx,%edx
je     804d334 <__sprintf_chk@plt+0x3f84>
mov    %edx,%ebp
xchg   %ax,%ax
mov    (%ebx),%eax
test   %eax,%eax
je     804d32c <__sprintf_chk@plt+0x3f7c>
testb  $0x2,0xc(%ebx)
jne    804d32c <__sprintf_chk@plt+0x3f7c>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048f50 <strcmp@plt>
test   %eax,%eax
je     804d348 <__sprintf_chk@plt+0x3f98>
add    $0x18,%ebx
sub    $0x1,%ebp
jne    804d310 <__sprintf_chk@plt+0x3f60>
add    $0x1c,%edi
subl   $0x1,0xc(%esp)
jne    804d303 <__sprintf_chk@plt+0x3f53>
xor    %eax,%eax
jmp    804d34a <__sprintf_chk@plt+0x3f9a>
lea    0x0(%esi),%esi
mov    %edi,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x14,%esp
test   %eax,%eax
je     804d3b8 <__sprintf_chk@plt+0x4008>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,%esi
test   %ebx,%ebx
je     804d3af <__sprintf_chk@plt+0x3fff>
mov    (%ebx),%ecx
test   %ecx,%ecx
je     804d3af <__sprintf_chk@plt+0x3fff>
add    $0x10,%ebx
lea    0x0(%esi),%esi
mov    0x10(%ecx),%edx
add    $0x10,%ebx
mov    0x8(%ecx),%eax
call   804d360 <__sprintf_chk@plt+0x3fb0>
mov    -0x10(%ebx),%ecx
add    %eax,%esi
test   %ecx,%ecx
jne    804d398 <__sprintf_chk@plt+0x3fe8>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
xor    %esi,%esi
jmp    804d385 <__sprintf_chk@plt+0x3fd5>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xec,%esp
mov    0x100(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0xdc(%esp)
xor    %eax,%eax
mov    0x10c(%esp),%edi
test   %esi,%esi
je     804d538 <argp_failure+0x178>
testb  $0x2,0x10(%esi)
jne    804d50a <argp_failure+0x14a>
mov    0x2c(%esi),%ebx
test   %ebx,%ebx
je     804d50a <argp_failure+0x14a>
mov    %ebx,(%esp)
call   80492c0 <flockfile@plt>
test   %esi,%esi
je     804d528 <argp_failure+0x168>
mov    0x28(%esi),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <fputs_unlocked@plt>
test   %edi,%edi
je     804d470 <argp_failure+0xb0>
mov    0x14(%ebx),%eax
lea    0x110(%esp),%ebp
cmp    0x18(%ebx),%eax
jae    804d5ea <argp_failure+0x22a>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x3a,(%eax)
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804d5c0 <argp_failure+0x200>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x20,(%eax)
mov    %ebp,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8048f60 <__vfprintf_chk@plt>
mov    0x108(%esp),%edx
test   %edx,%edx
je     804d4d8 <argp_failure+0x118>
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804d5ab <argp_failure+0x1eb>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x3a,(%eax)
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804d5d5 <argp_failure+0x215>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x20,(%eax)
lea    0x14(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x108(%esp),%eax
movl   $0xc8,0x8(%esp)
mov    %eax,(%esp)
call   80491f0 <strerror_r@plt>
test   %eax,%eax
je     804d558 <argp_failure+0x198>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049340 <fputs@plt>
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804d596 <argp_failure+0x1d6>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0xa,(%eax)
mov    %ebx,(%esp)
call   80491b0 <funlockfile@plt>
mov    0x104(%esp),%eax
test   %eax,%eax
je     804d50a <argp_failure+0x14a>
test   %esi,%esi
je     804d543 <argp_failure+0x183>
testb  $0x20,0x10(%esi)
je     804d543 <argp_failure+0x183>
mov    0xdc(%esp),%eax
xor    %gs:0x14,%eax
jne    804d591 <argp_failure+0x1d1>
add    $0xec,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x8059340,%eax
jmp    804d417 <argp_failure+0x57>
lea    0x0(%esi),%esi
mov    0x8059344,%ebx
jmp    804d3fc <argp_failure+0x3c>
mov    0x104(%esp),%eax
mov    %eax,(%esp)
call   8049120 <exit@plt>
lea    0x0(%esi),%esi
mov    0x108(%esp),%eax
mov    %eax,(%esp)
call   8049100 <strerror@plt>
test   %eax,%eax
jne    804d4cc <argp_failure+0x10c>
movl   $0x5,0x8(%esp)
movl   $0x805427d,0x4(%esp)
mov    (%esi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
jmp    804d4cc <argp_failure+0x10c>
call   8049020 <__stack_chk_fail@plt>
movl   $0xa,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804d4ed <argp_failure+0x12d>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804d490 <argp_failure+0xd0>
movl   $0x20,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804d458 <argp_failure+0x98>
movl   $0x20,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804d4a5 <argp_failure+0xe5>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804d443 <argp_failure+0x83>
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xc(%ebp),%esi
mov    %eax,-0x88(%ebp)
mov    %edx,-0x64(%ebp)
mov    %ecx,-0x84(%ebp)
mov    %esi,-0x6c(%ebp)
mov    %gs:0x14,%esi
mov    %esi,-0x1c(%ebp)
xor    %esi,%esi
test   %ecx,%ecx
je     804d6e8 <argp_failure+0x328>
mov    %ecx,(%esp)
call   80492c0 <flockfile@plt>
mov    0x8059304,%eax
test   %eax,%eax
je     804da7e <argp_failure+0x6be>
mov    0x8059300,%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x8(%esp)
mov    -0x84(%ebp),%eax
mov    %eax,(%esp)
call   8052280 <argp_parse+0x3280>
test   %eax,%eax
mov    %eax,%edi
je     804e850 <argp_failure+0x1490>
testb  $0xb,0x8(%ebp)
movl   $0x0,-0x74(%ebp)
jne    804dd78 <argp_failure+0x9b8>
xor    %ebx,%ebx
testb  $0x3,0x8(%ebp)
jne    804de05 <argp_failure+0xa45>
testb  $0x10,0x8(%ebp)
jne    804df84 <argp_failure+0xbc4>
testb  $0x4,0x8(%ebp)
jne    804df42 <argp_failure+0xb82>
testb  $0x8,0x8(%ebp)
jne    804d760 <argp_failure+0x3a0>
testb  $0x20,0x8(%ebp)
jne    804da55 <argp_failure+0x695>
testb  $0x40,0x8(%ebp)
jne    804d700 <argp_failure+0x340>
mov    -0x84(%ebp),%eax
mov    %eax,(%esp)
call   80491b0 <funlockfile@plt>
mov    -0x74(%ebp),%eax
test   %eax,%eax
je     804d6e0 <argp_failure+0x320>
call   804bbb0 <__sprintf_chk@plt+0x2800>
mov    %edi,(%esp)
call   8052810 <argp_parse+0x3810>
mov    -0x1c(%ebp),%eax
xor    %gs:0x14,%eax
jne    804e8e5 <argp_failure+0x1525>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8059208,%eax
test   %eax,%eax
je     804d6c6 <argp_failure+0x306>
test   %ebx,%ebx
mov    %eax,%esi
je     804d72a <argp_failure+0x36a>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e756 <argp_failure+0x1396>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    0x8059208,%esi
mov    -0x88(%ebp),%eax
movl   $0x5,0x8(%esp)
movl   $0x8054308,0x4(%esp)
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8052930 <argp_parse+0x3930>
jmp    804d6c6 <argp_failure+0x306>
mov    -0x74(%ebp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
je     804d6b6 <argp_failure+0x2f6>
test   %ebx,%ebx
je     804e670 <argp_failure+0x12b0>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e87c <argp_failure+0x14bc>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    -0x74(%ebp),%eax
mov    -0x74(%ebp),%esi
mov    0x4(%eax),%eax
mov    (%esi),%esi
movl   $0x0,-0x50(%ebp)
movl   $0x0,-0x4c(%ebp)
test   %eax,%eax
mov    %esi,-0x60(%ebp)
movl   $0x0,-0x48(%ebp)
mov    %eax,-0x90(%ebp)
je     804da46 <argp_failure+0x686>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x60(%ebp),%eax
mov    0x1c(%edi),%ebx
sub    0x18(%edi),%ebx
mov    (%eax),%esi
mov    0x8(%eax),%eax
mov    %esi,-0x5c(%ebp)
mov    0x10(%edi),%esi
mov    %eax,-0x6c(%ebp)
cmp    %esi,%ebx
ja     804e478 <argp_failure+0x10b8>
mov    0x4(%edi),%eax
movl   $0x0,0x4(%edi)
movl   $0x0,-0x80(%ebp)
mov    %eax,-0x78(%ebp)
mov    0xc(%edi),%eax
movl   $0x1,-0x38(%ebp)
mov    %edi,-0x40(%ebp)
mov    %eax,-0x7c(%ebp)
mov    -0x60(%ebp),%eax
mov    %eax,-0x44(%ebp)
lea    -0x50(%ebp),%eax
mov    %eax,-0x3c(%ebp)
mov    -0x64(%ebp),%eax
mov    %eax,-0x34(%ebp)
mov    -0x5c(%ebp),%eax
mov    0xc(%eax),%ecx
mov    %ecx,%eax
and    $0x8,%eax
mov    %eax,-0x68(%ebp)
jne    804d856 <argp_failure+0x496>
mov    -0x60(%ebp),%eax
mov    0x4(%eax),%edx
test   %edx,%edx
je     804d856 <argp_failure+0x496>
mov    -0x5c(%ebp),%eax
lea    0x0(%esi),%esi
cmpl   $0x0,(%eax)
je     804d847 <argp_failure+0x487>
testb  $0x2,0xc(%eax)
je     804e4fa <argp_failure+0x113a>
add    $0x18,%eax
sub    $0x1,%edx
jne    804d838 <argp_failure+0x478>
movl   $0x0,-0x80(%ebp)
cmp    %esi,%ebx
mov    0x80592e8,%eax
ja     804e4a0 <argp_failure+0x10e0>
mov    %eax,0xc(%edi)
mov    -0x60(%ebp),%eax
mov    0x4(%eax),%esi
test   %esi,%esi
je     804d8e0 <argp_failure+0x520>
mov    -0x5c(%ebp),%eax
mov    %edi,-0x70(%ebp)
mov    %ecx,%edi
mov    %eax,%ebx
add    $0xc,%eax
mov    %eax,-0x8c(%ebp)
jmp    804d88b <argp_failure+0x4cb>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edi
test   $0x8,%edi
mov    0x4(%ebx),%edx
jne    804d8c8 <argp_failure+0x508>
lea    -0x1(%edx),%eax
cmp    $0xfe,%eax
ja     804d8c8 <argp_failure+0x508>
mov    %edx,-0x68(%ebp)
call   8049390 <__ctype_b_loc@plt>
mov    -0x68(%ebp),%edx
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%edx,2)
je     804d8c8 <argp_failure+0x508>
mov    -0x6c(%ebp),%eax
movsbl (%eax),%eax
cmp    %eax,%edx
je     804e1e0 <argp_failure+0xe20>
lea    0x0(%esi),%esi
add    $0x18,%ebx
sub    $0x1,%esi
jne    804d888 <argp_failure+0x4c8>
mov    -0x5c(%ebp),%eax
mov    -0x70(%ebp),%edi
mov    0xc(%eax),%eax
mov    %eax,-0x68(%ebp)
andl   $0x8,-0x68(%ebp)
mov    -0x68(%ebp),%eax
test   %eax,%eax
je     804e360 <argp_failure+0xfa0>
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    0x80592f0,%ebx
ja     804e539 <argp_failure+0x1179>
mov    -0x60(%ebp),%eax
mov    %ebx,0xc(%edi)
mov    -0x5c(%ebp),%ebx
mov    0x4(%eax),%esi
test   %esi,%esi
jne    804d924 <argp_failure+0x564>
jmp    804d9b0 <argp_failure+0x5f0>
lea    0x0(%esi),%esi
add    $0x18,%ebx
sub    $0x1,%esi
je     804d9b0 <argp_failure+0x5f0>
mov    (%ebx),%eax
test   %eax,%eax
je     804d918 <argp_failure+0x558>
cmpb   $0x0,(%eax)
je     804d918 <argp_failure+0x558>
testb  $0x2,0xc(%ebx)
jne    804d918 <argp_failure+0x558>
mov    0x80592f0,%eax
lea    -0x44(%ebp),%edx
call   804c210 <__sprintf_chk@plt+0x2e60>
testb  $0x20,0xc(%ebx)
je     804e506 <argp_failure+0x1146>
mov    (%ebx),%eax
mov    %eax,-0x68(%ebp)
mov    -0x68(%ebp),%eax
mov    %eax,(%esp)
call   8049150 <strlen@plt>
test   %eax,%eax
mov    %eax,%edx
je     804d918 <argp_failure+0x558>
mov    0x1c(%edi),%eax
lea    (%eax,%edx,1),%ecx
cmp    %ecx,0x20(%edi)
jae    804d986 <argp_failure+0x5c6>
mov    %edx,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,-0x6c(%ebp)
call   8052860 <argp_parse+0x3860>
mov    -0x6c(%ebp),%edx
test   %eax,%eax
je     804d918 <argp_failure+0x558>
mov    0x1c(%edi),%eax
mov    -0x68(%ebp),%ecx
add    $0x18,%ebx
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,-0x6c(%ebp)
mov    %ecx,0x4(%esp)
call   8048fc0 <memcpy@plt>
mov    -0x6c(%ebp),%edx
add    %edx,0x1c(%edi)
sub    $0x1,%esi
jne    804d924 <argp_failure+0x564>
xchg   %ax,%ax
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
ja     804e490 <argp_failure+0x10d0>
movl   $0x0,0x4(%edi)
mov    -0x38(%ebp),%ebx
mov    -0x5c(%ebp),%eax
test   %ebx,%ebx
je     804e1f8 <argp_failure+0xe38>
testb  $0x8,0xc(%eax)
mov    0x4(%eax),%ebx
jne    804d9f8 <argp_failure+0x638>
lea    -0x1(%ebx),%eax
cmp    $0xfe,%eax
ja     804d9f8 <argp_failure+0x638>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%ebx,2)
jne    804da05 <argp_failure+0x645>
lea    0x0(%esi),%esi
mov    -0x5c(%ebp),%eax
mov    (%eax),%ecx
test   %ecx,%ecx
je     804e863 <argp_failure+0x14a3>
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
ja     804e333 <argp_failure+0xf73>
mov    -0x78(%ebp),%eax
mov    %eax,0x4(%edi)
mov    -0x7c(%ebp),%eax
addl   $0x1c,-0x60(%ebp)
subl   $0x1,-0x90(%ebp)
mov    %eax,0xc(%edi)
jne    804d7c0 <argp_failure+0x400>
mov    -0x48(%ebp),%esi
test   %esi,%esi
je     804da46 <argp_failure+0x686>
mov    0x80592e4,%ebx
test   %ebx,%ebx
jne    804e776 <argp_failure+0x13b6>
testb  $0x20,0x8(%ebp)
mov    $0x1,%ebx
je     804d6c0 <argp_failure+0x300>
mov    -0x64(%ebp),%edx
mov    $0x1,%ecx
mov    -0x88(%ebp),%eax
mov    %ebx,(%esp)
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
call   804c370 <__sprintf_chk@plt+0x2fc0>
or     %eax,%ebx
jmp    804d6c0 <argp_failure+0x300>
movl   $0x805429b,(%esp)
call   80490c0 <getenv@plt>
mov    %eax,%esi
mov    0x80592e0,%eax
test   %esi,%esi
mov    %eax,-0x44(%ebp)
mov    0x80592e4,%eax
mov    %eax,-0x40(%ebp)
mov    0x80592e8,%eax
mov    %eax,-0x3c(%ebp)
mov    0x80592ec,%eax
mov    %eax,-0x38(%ebp)
mov    0x80592f0,%eax
mov    %eax,-0x34(%ebp)
mov    0x80592f4,%eax
mov    %eax,-0x30(%ebp)
mov    0x80592f8,%eax
mov    %eax,-0x2c(%ebp)
mov    0x80592fc,%eax
mov    %eax,-0x28(%ebp)
mov    0x8059300,%eax
mov    %eax,-0x24(%ebp)
mov    0x8059304,%eax
mov    %eax,-0x20(%ebp)
je     804d64a <argp_failure+0x28a>
movzbl (%esi),%ecx
nop
test   %cl,%cl
mov    %ecx,-0x5c(%ebp)
je     804dc50 <argp_failure+0x890>
call   8049390 <__ctype_b_loc@plt>
mov    -0x5c(%ebp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
jmp    804db0e <argp_failure+0x74e>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%esi
movzbl (%esi),%ecx
movzbl %cl,%edx
movzwl (%eax,%edx,2),%edx
test   $0x20,%dh
jne    804db08 <argp_failure+0x748>
test   $0x4,%dh
mov    %cl,-0x68(%ebp)
je     804dc48 <argp_failure+0x888>
mov    %dx,-0x5c(%ebp)
mov    %esi,%ebx
jmp    804db3d <argp_failure+0x77d>
xchg   %ax,%ax
add    $0x1,%ebx
movzbl (%ebx),%ecx
movzbl %cl,%edx
movzwl (%eax,%edx,2),%edx
test   $0x8,%dl
jne    804db30 <argp_failure+0x770>
cmp    $0x2d,%cl
je     804db30 <argp_failure+0x770>
cmp    $0x5f,%cl
je     804db30 <argp_failure+0x770>
mov    %dx,-0x5c(%ebp)
mov    %ebx,%edx
sub    %esi,%edx
testw  $0x2000,-0x5c(%ebp)
mov    %edx,-0x60(%ebp)
je     804db70 <argp_failure+0x7b0>
nop
add    $0x1,%ebx
movzbl (%ebx),%ecx
movzbl %cl,%edx
testb  $0x20,0x1(%eax,%edx,2)
jne    804db60 <argp_failure+0x7a0>
cmp    $0x2c,%cl
je     804dd38 <argp_failure+0x978>
test   %cl,%cl
je     804dd38 <argp_failure+0x978>
cmp    $0x3d,%cl
je     804e141 <argp_failure+0xd81>
movzbl (%ebx),%edx
movzwl (%eax,%edx,2),%edx
and    $0x8,%dh
jne    804e0e3 <argp_failure+0xd23>
movl   $0x0,-0x74(%ebp)
movl   $0x0,-0x70(%ebp)
mov    $0x8054292,%edi
mov    $0x80545a0,%ecx
mov    %esi,-0x5c(%ebp)
mov    $0x8,%eax
mov    %ecx,%esi
mov    %ebx,-0x68(%ebp)
mov    %edi,%ebx
mov    -0x60(%ebp),%edi
jmp    804dbdd <argp_failure+0x81d>
xchg   %ax,%ax
add    $0xc,%esi
mov    (%esi),%ebx
test   %ebx,%ebx
je     804dce0 <argp_failure+0x920>
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
cmp    %eax,%edi
jne    804dbc8 <argp_failure+0x808>
mov    -0x5c(%ebp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    804dbc8 <argp_failure+0x808>
mov    -0x74(%ebp),%eax
mov    %esi,%ecx
mov    -0x68(%ebp),%ebx
mov    -0x5c(%ebp),%esi
test   %eax,%eax
jne    804e17f <argp_failure+0xdbf>
mov    -0x70(%ebp),%edi
test   %edi,%edi
js     804e838 <argp_failure+0x1478>
mov    0x8(%ecx),%eax
mov    -0x70(%ebp),%edi
mov    %edi,-0x44(%ebp,%eax,1)
mov    (%ecx),%ecx
test   %ecx,%ecx
je     804dce6 <argp_failure+0x926>
movzbl (%ebx),%ecx
mov    %ebx,%esi
cmp    $0x2c,%cl
jne    804dae8 <argp_failure+0x728>
add    $0x1,%esi
movzbl 0x1(%ebx),%ecx
jmp    804dae8 <argp_failure+0x728>
lea    0x0(%esi,%eiz,1),%esi
test   %cl,%cl
jne    804e698 <argp_failure+0x12d8>
mov    -0x24(%ebp),%ecx
mov    $0x8054292,%ebx
mov    $0x80545a0,%eax
lea    0x0(%esi),%esi
mov    0x4(%eax),%edx
test   %edx,%edx
jne    804dc79 <argp_failure+0x8b9>
mov    0x8(%eax),%edx
cmp    $0x20,%edx
je     804dc79 <argp_failure+0x8b9>
cmp    %ecx,-0x44(%ebp,%edx,1)
jge    804e709 <argp_failure+0x1349>
add    $0xc,%eax
mov    (%eax),%ebx
test   %ebx,%ebx
jne    804dc60 <argp_failure+0x8a0>
mov    -0x44(%ebp),%eax
movl   $0x1,0x8059304
00
mov    %eax,0x80592e0
mov    -0x40(%ebp),%eax
mov    %eax,0x80592e4
mov    -0x3c(%ebp),%eax
mov    %eax,0x80592e8
mov    -0x38(%ebp),%eax
mov    %eax,0x80592ec
mov    -0x34(%ebp),%eax
mov    %eax,0x80592f0
mov    -0x30(%ebp),%eax
mov    %eax,0x80592f4
mov    -0x2c(%ebp),%eax
mov    %eax,0x80592f8
mov    -0x28(%ebp),%eax
mov    %eax,0x80592fc
mov    -0x24(%ebp),%eax
mov    %eax,0x8059300
jmp    804d64a <argp_failure+0x28a>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x5c(%ebp),%esi
mov    -0x68(%ebp),%ebx
mov    -0x64(%ebp),%edi
movl   $0x5,0x8(%esp)
movl   $0x8054478,0x4(%esp)
mov    (%edi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x14(%esp)
mov    -0x60(%ebp),%esi
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
mov    %esi,0x10(%esp)
mov    %eax,0xc(%esp)
call   804d3c0 <argp_failure>
jmp    804dc2a <argp_failure+0x86a>
lea    0x0(%esi),%esi
cmpb   $0x6e,-0x68(%ebp)
movl   $0x1,-0x74(%ebp)
movl   $0x1,-0x70(%ebp)
jne    804dba8 <argp_failure+0x7e8>
cmpb   $0x6f,0x1(%esi)
jne    804dba8 <argp_failure+0x7e8>
cmpb   $0x2d,0x2(%esi)
jne    804dba8 <argp_failure+0x7e8>
add    $0x3,%esi
subl   $0x3,-0x60(%ebp)
movl   $0x0,-0x70(%ebp)
jmp    804dba8 <argp_failure+0x7e8>
nop
mov    -0x88(%ebp),%eax
xor    %edx,%edx
call   804cc80 <__sprintf_chk@plt+0x38d0>
mov    $0x80542ce,%ecx
mov    0x4(%eax),%ebx
mov    (%eax),%esi
mov    %eax,-0x74(%ebp)
mov    %ebx,%edx
mov    %esi,%eax
call   804d2f0 <__sprintf_chk@plt+0x3f40>
test   %eax,%eax
je     804dda6 <argp_failure+0x9e6>
movl   $0xffffffff,0xc(%eax)
mov    $0x805465d,%ecx
mov    %ebx,%edx
mov    %esi,%eax
call   804d2f0 <__sprintf_chk@plt+0x3f40>
test   %eax,%eax
je     804ddbf <argp_failure+0x9ff>
movl   $0xffffffff,0xc(%eax)
test   %ebx,%ebx
je     804d68c <argp_failure+0x2cc>
mov    %esi,%edx
xor    %eax,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x18(%edx)
add    $0x1,%eax
add    $0x1c,%edx
cmp    %ebx,%eax
jne    804ddd0 <argp_failure+0xa10>
movl   $0x804bc00,0xc(%esp)
xor    %ebx,%ebx
movl   $0x1c,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   80492d0 <qsort@plt>
testb  $0x3,0x8(%ebp)
je     804d698 <argp_failure+0x2d8>
mov    -0x88(%ebp),%ebx
mov    0x10(%ebx),%edx
mov    0x8(%ebx),%eax
call   804d360 <__sprintf_chk@plt+0x3fb0>
lea    0x1e(%eax),%edx
and    $0xfffffff0,%edx
sub    %edx,%esp
lea    0x27(%esp),%esi
mov    %esi,-0x60(%ebp)
andl   $0xfffffff0,-0x60(%ebp)
mov    %eax,0x8(%esp)
mov    -0x60(%ebp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80491a0 <memset@plt>
mov    $0x1,%edx
jmp    804df01 <argp_failure+0xb41>
lea    0x0(%esi),%esi
movl   $0x80542d3,0x4(%esp)
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    -0x6c(%ebp),%esi
movl   $0x80542da,0x4(%esp)
mov    %edi,(%esp)
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
call   8052930 <argp_parse+0x3930>
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    0x80592fc,%edx
ja     804e048 <argp_failure+0xc88>
testb  $0x2,0x8(%ebp)
mov    0x4(%edi),%esi
mov    %edx,0x4(%edi)
je     804e030 <argp_failure+0xc70>
mov    -0x74(%ebp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
jne    804e060 <argp_failure+0xca0>
mov    -0x64(%ebp),%edx
lea    -0x44(%ebp),%ecx
mov    %ebx,%eax
mov    %edi,0x4(%esp)
movl   $0x1,(%esp)
call   804c9a0 <__sprintf_chk@plt+0x35f0>
mov    0x1c(%edi),%edx
mov    %eax,%ecx
mov    %edx,%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
ja     804dff0 <argp_failure+0xc30>
mov    -0x5c(%ebp),%eax
mov    %eax,0xc(%edi)
cmp    %edx,0x20(%edi)
mov    %esi,0x4(%edi)
jbe    804dfc8 <argp_failure+0xc08>
lea    0x1(%edx),%eax
mov    %eax,0x1c(%edi)
movb   $0xa,(%edx)
test   %ecx,%ecx
je     804e0d9 <argp_failure+0xd19>
xor    %edx,%edx
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    0x80592fc,%esi
ja     804dfb0 <argp_failure+0xbf0>
mov    0xc(%edi),%eax
test   %edx,%edx
mov    %esi,0xc(%edi)
movl   $0x5,0x8(%esp)
mov    %eax,-0x5c(%ebp)
mov    -0x60(%ebp),%eax
mov    %eax,-0x44(%ebp)
jne    804de50 <argp_failure+0xa90>
movl   $0x80542e0,0x4(%esp)
jmp    804de58 <argp_failure+0xa98>
mov    -0x88(%ebp),%eax
mov    $0x1,%ebx
movl   $0x5,0x8(%esp)
movl   $0x80544d4,0x4(%esp)
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    -0x6c(%ebp),%esi
mov    %edi,(%esp)
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
call   8052930 <argp_parse+0x3930>
jmp    804d6ac <argp_failure+0x2ec>
mov    -0x64(%ebp),%edx
xor    %ecx,%ecx
mov    -0x88(%ebp),%eax
mov    %edi,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x0,(%esp)
call   804c370 <__sprintf_chk@plt+0x2fc0>
or     %eax,%ebx
jmp    804d6a2 <argp_failure+0x2e2>
xchg   %ax,%ax
mov    %edi,(%esp)
mov    %edx,-0x5c(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    -0x5c(%ebp),%edx
jmp    804df16 <argp_failure+0xb56>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %ecx,-0x5c(%ebp)
call   8052860 <argp_parse+0x3860>
mov    -0x5c(%ebp),%ecx
test   %eax,%eax
je     804def7 <argp_failure+0xb37>
mov    0x1c(%edi),%edx
jmp    804deee <argp_failure+0xb2e>
xchg   %ax,%ax
mov    %edi,(%esp)
mov    %ecx,-0x68(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%edx
mov    -0x5c(%ebp),%ecx
mov    %edx,%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    %ecx,0xc(%edi)
mov    -0x68(%ebp),%ecx
jbe    804dee2 <argp_failure+0xb22>
mov    %edi,(%esp)
mov    %ecx,-0x5c(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%edx
mov    -0x5c(%ebp),%ecx
jmp    804dee2 <argp_failure+0xb22>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x74(%ebp),%eax
mov    %edi,%edx
call   804b9b0 <__sprintf_chk@plt+0x2600>
orl    $0x2,0x8(%ebp)
jmp    804deb1 <argp_failure+0xaf1>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
mov    %edx,-0x68(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    -0x68(%ebp),%edx
jmp    804de93 <argp_failure+0xad3>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
movl   $0x80542e7,0x4(%esp)
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,(%esp)
mov    %eax,-0x68(%ebp)
call   8049150 <strlen@plt>
test   %eax,%eax
mov    %eax,%edx
je     804deb1 <argp_failure+0xaf1>
mov    0x1c(%edi),%eax
lea    (%eax,%edx,1),%ecx
cmp    %ecx,0x20(%edi)
jae    804e0b8 <argp_failure+0xcf8>
mov    %edx,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,-0x70(%ebp)
call   8052860 <argp_parse+0x3860>
mov    -0x70(%ebp),%edx
test   %eax,%eax
je     804deb1 <argp_failure+0xaf1>
mov    0x1c(%edi),%eax
mov    -0x68(%ebp),%ecx
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,-0x70(%ebp)
mov    %ecx,0x4(%esp)
call   8048fc0 <memcpy@plt>
mov    -0x70(%ebp),%edx
add    %edx,0x1c(%edi)
jmp    804deb1 <argp_failure+0xaf1>
mov    $0x1,%ebx
jmp    804d698 <argp_failure+0x2d8>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   8049330 <strtol@plt>
mov    %eax,-0x70(%ebp)
mov    (%edi),%eax
movzbl (%ebx),%edx
movzwl (%eax,%edx,2),%edx
test   $0x8,%dh
je     804e11f <argp_failure+0xd5f>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
movzbl (%ebx),%edx
movzwl (%eax,%edx,2),%edx
test   $0x8,%dh
jne    804e110 <argp_failure+0xd50>
and    $0x20,%dh
je     804e135 <argp_failure+0xd75>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
movzbl (%ebx),%edx
testb  $0x20,0x1(%eax,%edx,2)
jne    804e128 <argp_failure+0xd68>
movl   $0x0,-0x74(%ebp)
jmp    804dba8 <argp_failure+0x7e8>
movzbl 0x1(%ebx),%edx
lea    0x1(%ebx),%ecx
mov    %ecx,%ebx
movzwl (%eax,%edx,2),%edx
test   $0x20,%dh
je     804db91 <argp_failure+0x7d1>
nop
add    $0x1,%ebx
movzbl (%ebx),%edx
movzwl (%eax,%edx,2),%edx
test   $0x20,%dh
je     804db91 <argp_failure+0x7d1>
add    $0x1,%ebx
movzbl (%ebx),%edx
movzwl (%eax,%edx,2),%edx
test   $0x20,%dh
jne    804e158 <argp_failure+0xd98>
jmp    804db91 <argp_failure+0x7d1>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    804dc0b <argp_failure+0x84b>
mov    %ecx,-0x5c(%ebp)
movl   $0x5,0x8(%esp)
movl   $0x8054418,0x4(%esp)
mov    -0x64(%ebp),%edi
mov    (%edi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    -0x60(%ebp),%ecx
mov    %esi,0x14(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ecx,0x10(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804d3c0 <argp_failure>
mov    -0x5c(%ebp),%ecx
jmp    804dc20 <argp_failure+0x860>
lea    0x0(%esi,%eiz,1),%esi
and    $0x2,%edi
je     804e400 <argp_failure+0x1040>
addl   $0x1,-0x6c(%ebp)
jmp    804d8c8 <argp_failure+0x508>
lea    0x0(%esi),%esi
mov    0x10(%eax),%eax
xor    %esi,%esi
test   %eax,%eax
je     804e21f <argp_failure+0xe5f>
mov    %eax,0x4(%esp)
mov    -0x64(%ebp),%eax
movl   $0x5,0x8(%esp)
mov    (%eax),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%esi
mov    -0x60(%ebp),%eax
mov    0x14(%eax),%ecx
mov    -0x5c(%ebp),%eax
mov    0x4(%eax),%edx
mov    -0x64(%ebp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804bf80 <__sprintf_chk@plt+0x2bd0>
test   %eax,%eax
mov    %eax,%ebx
je     804e2f4 <argp_failure+0xf34>
cmpb   $0x0,(%eax)
je     804e2e8 <argp_failure+0xf28>
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
ja     804e606 <argp_failure+0x1246>
mov    0x14(%edi),%edx
xor    %eax,%eax
mov    0x80592f4,%ecx
test   %edx,%edx
cmovns 0x14(%edi),%eax
mov    %eax,-0x5c(%ebp)
mov    %ecx,0x4(%edi)
mov    %ecx,%edx
lea    0x3(%edx),%eax
cmp    %eax,-0x5c(%ebp)
mov    %ecx,0xc(%edi)
jbe    804e5c2 <argp_failure+0x1202>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e6dd <argp_failure+0x131d>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
test   %eax,%eax
mov    %eax,%ecx
je     804e2e8 <argp_failure+0xf28>
mov    0x1c(%edi),%eax
lea    (%eax,%ecx,1),%edx
cmp    %edx,0x20(%edi)
jae    804e2c9 <argp_failure+0xf09>
mov    %ecx,0x4(%esp)
mov    %edi,(%esp)
mov    %ecx,-0x5c(%ebp)
call   8052860 <argp_parse+0x3860>
mov    -0x5c(%ebp),%ecx
test   %eax,%eax
je     804e2e8 <argp_failure+0xf28>
mov    0x1c(%edi),%eax
mov    %ecx,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,-0x5c(%ebp)
call   8048fc0 <memcpy@plt>
mov    -0x5c(%ebp),%ecx
add    %ecx,0x1c(%edi)
lea    0x0(%esi),%esi
cmp    %ebx,%esi
je     804e2f4 <argp_failure+0xf34>
mov    %ebx,(%esp)
call   8048fb0 <free@plt>
mov    0x1c(%edi),%eax
mov    %eax,%edx
sub    0x18(%edi),%edx
cmp    0x10(%edi),%edx
ja     804e566 <argp_failure+0x11a6>
cmp    %eax,0x20(%edi)
movl   $0x0,0x4(%edi)
jbe    804e546 <argp_failure+0x1186>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    -0x60(%ebp),%eax
mov    %eax,-0x50(%ebp)
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
jbe    804da14 <argp_failure+0x654>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%eax
mov    -0x78(%ebp),%esi
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    %esi,0x4(%edi)
jbe    804da1a <argp_failure+0x65a>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
jmp    804da1a <argp_failure+0x65a>
lea    0x0(%esi),%esi
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    0x80592ec,%ebx
ja     804e52c <argp_failure+0x116c>
mov    -0x60(%ebp),%eax
mov    %ebx,0xc(%edi)
mov    0x4(%eax),%esi
test   %esi,%esi
je     804d9b0 <argp_failure+0x5f0>
mov    -0x5c(%ebp),%eax
mov    %eax,%ebx
add    $0xc,%eax
mov    %eax,-0x68(%ebp)
jmp    804e3a4 <argp_failure+0xfe4>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x18,%ebx
sub    $0x1,%esi
je     804d9b0 <argp_failure+0x5f0>
mov    (%ebx),%eax
test   %eax,%eax
je     804e398 <argp_failure+0xfd8>
testb  $0x2,0xc(%ebx)
jne    804e398 <argp_failure+0xfd8>
mov    0x80592ec,%eax
lea    -0x44(%ebp),%edx
call   804c210 <__sprintf_chk@plt+0x2e60>
mov    (%ebx),%eax
movl   $0x80542f9,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8052930 <argp_parse+0x3930>
mov    -0x64(%ebp),%ecx
mov    -0x5c(%ebp),%eax
mov    0x8(%eax),%eax
mov    %edi,0x8(%esp)
mov    (%ecx),%edx
mov    $0x80542fe,%ecx
mov    0x18(%edx),%edx
movl   $0x8054302,(%esp)
mov    %edx,0x4(%esp)
mov    -0x68(%ebp),%edx
call   804cbf0 <__sprintf_chk@plt+0x3840>
jmp    804e398 <argp_failure+0xfd8>
nop
mov    0x80592e8,%eax
lea    -0x44(%ebp),%edx
call   804c210 <__sprintf_chk@plt+0x2e60>
mov    -0x70(%ebp),%edi
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e59f <argp_failure+0x11df>
mov    -0x70(%ebp),%edi
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0x2d,(%eax)
mov    -0x6c(%ebp),%eax
mov    -0x70(%ebp),%edi
movzbl (%eax),%edx
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e576 <argp_failure+0x11b6>
mov    -0x70(%ebp),%edi
lea    0x1(%eax),%ecx
mov    %ecx,0x1c(%edi)
mov    %dl,(%eax)
mov    -0x80(%ebp),%ecx
mov    -0x5c(%ebp),%eax
test   %ecx,%ecx
je     804e4c8 <argp_failure+0x1108>
mov    0x80592e0,%edx
test   %edx,%edx
jne    804e4c8 <argp_failure+0x1108>
mov    0x8(%eax),%eax
test   %eax,%eax
je     804e1e9 <argp_failure+0xe29>
movl   $0x1,-0x48(%ebp)
jmp    804e1e9 <argp_failure+0xe29>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%ebx
sub    0x18(%edi),%ebx
mov    0x10(%edi),%esi
jmp    804d7df <argp_failure+0x41f>
xchg   %ax,%ax
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
jmp    804d9bf <argp_failure+0x5ff>
lea    0x0(%esi),%esi
mov    %edi,(%esp)
mov    %eax,-0x70(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    -0x5c(%ebp),%eax
mov    0xc(%eax),%ecx
mov    %ecx,%eax
and    $0x8,%eax
mov    %eax,-0x68(%ebp)
mov    -0x70(%ebp),%eax
jmp    804d863 <argp_failure+0x4a3>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x70(%ebp),%edi
mov    $0x80542c2,%ecx
mov    0x8(%eax),%eax
mov    %edi,0x8(%esp)
mov    -0x64(%ebp),%edi
mov    (%edi),%edx
mov    0x18(%edx),%edx
movl   $0x80542f4,(%esp)
mov    %edx,0x4(%esp)
mov    -0x8c(%ebp),%edx
call   804cbf0 <__sprintf_chk@plt+0x3840>
jmp    804e1e9 <argp_failure+0xe29>
movl   $0x1,-0x80(%ebp)
jmp    804d856 <argp_failure+0x496>
movl   $0x5,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    -0x64(%ebp),%eax
mov    (%eax),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,-0x68(%ebp)
jmp    804d951 <argp_failure+0x591>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
jmp    804e375 <argp_failure+0xfb5>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
jmp    804d900 <argp_failure+0x540>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e31e <argp_failure+0xf5e>
mov    0x1c(%edi),%eax
jmp    804e315 <argp_failure+0xf55>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%eax
jmp    804e305 <argp_failure+0xf45>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,-0x68(%ebp)
call   8052860 <argp_parse+0x3860>
mov    -0x68(%ebp),%edx
test   %eax,%eax
je     804e448 <argp_failure+0x1088>
mov    -0x70(%ebp),%eax
mov    0x1c(%eax),%eax
jmp    804e43d <argp_failure+0x107d>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e428 <argp_failure+0x1068>
mov    -0x70(%ebp),%eax
mov    0x1c(%eax),%eax
jmp    804e41c <argp_failure+0x105c>
cmp    %edx,-0x5c(%ebp)
jb     804e6fd <argp_failure+0x133d>
mov    0x1c(%edi),%eax
lea    0x3(%eax),%edx
cmp    %edx,0x20(%edi)
jae    804e5f1 <argp_failure+0x1231>
movl   $0x3,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e297 <argp_failure+0xed7>
mov    0x1c(%edi),%eax
mov    $0x2020,%edx
mov    %dx,(%eax)
movb   $0x20,0x2(%eax)
addl   $0x3,0x1c(%edi)
jmp    804e297 <argp_failure+0xed7>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x14(%edi),%ecx
xor    %eax,%eax
test   %ecx,%ecx
mov    0x80592f4,%ecx
cmovns 0x14(%edi),%eax
mov    %eax,-0x5c(%ebp)
mov    0x1c(%edi),%eax
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    %ecx,-0x68(%ebp)
jbe    804e26e <argp_failure+0xeae>
mov    %edi,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%edi),%eax
mov    -0x68(%ebp),%edx
sub    0x18(%edi),%eax
cmp    0x10(%edi),%eax
mov    0x80592f4,%ecx
mov    %edx,0x4(%edi)
jbe    804e8dc <argp_failure+0x151c>
mov    %edi,(%esp)
mov    %ecx,-0x68(%ebp)
call   80522f0 <argp_parse+0x32f0>
mov    0x80592f4,%edx
mov    -0x68(%ebp),%ecx
jmp    804e273 <argp_failure+0xeb3>
mov    -0x74(%ebp),%esi
mov    %eax,-0x90(%ebp)
mov    (%esi),%esi
movl   $0x0,-0x50(%ebp)
movl   $0x0,-0x4c(%ebp)
movl   $0x0,-0x48(%ebp)
mov    %esi,-0x60(%ebp)
jmp    804d7c0 <argp_failure+0x400>
mov    -0x64(%ebp),%edi
movl   $0x5,0x8(%esp)
movl   $0x80542a9,0x4(%esp)
mov    (%edi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804d3c0 <argp_failure>
jmp    804dc50 <argp_failure+0x890>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e297 <argp_failure+0xed7>
mov    0x1c(%edi),%eax
jmp    804e28e <argp_failure+0xece>
mov    %edi,%eax
call   804bf00 <__sprintf_chk@plt+0x2b50>
jmp    804e297 <argp_failure+0xed7>
mov    -0x64(%ebp),%esi
movl   $0x5,0x8(%esp)
movl   $0x80544a0,0x4(%esp)
mov    (%esi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x14(%esp)
movl   $0x80542c6,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804d3c0 <argp_failure>
jmp    804d64a <argp_failure+0x28a>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804d724 <argp_failure+0x364>
mov    0x1c(%edi),%eax
jmp    804d71b <argp_failure+0x35b>
mov    -0x64(%ebp),%esi
movl   $0x5,0x8(%esp)
movl   $0x805450c,0x4(%esp)
mov    (%esi),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    $0x2000005,%edx
mov    %esi,(%esp)
mov    (%esi),%ecx
mov    %eax,-0x5c(%ebp)
call   804bf80 <__sprintf_chk@plt+0x2bd0>
test   %eax,%eax
mov    %eax,%ebx
je     804da46 <argp_failure+0x686>
cmpb   $0x0,(%eax)
je     804e822 <argp_failure+0x1462>
mov    0x1c(%edi),%eax
cmp    0x20(%edi),%eax
jae    804e89c <argp_failure+0x14dc>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
mov    %eax,%esi
mov    0x1c(%edi),%eax
test   %esi,%esi
je     804e810 <argp_failure+0x1450>
lea    (%eax,%esi,1),%edx
cmp    %edx,0x20(%edi)
jae    804e7f8 <argp_failure+0x1438>
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
mov    0x1c(%edi),%eax
je     804e810 <argp_failure+0x1450>
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <memcpy@plt>
mov    0x1c(%edi),%eax
add    %esi,%eax
mov    %eax,0x1c(%edi)
cmp    %eax,0x20(%edi)
jbe    804e8bc <argp_failure+0x14fc>
lea    0x1(%eax),%edx
mov    %edx,0x1c(%edi)
movb   $0xa,(%eax)
cmp    %ebx,-0x5c(%ebp)
je     804da46 <argp_failure+0x686>
mov    %ebx,(%esp)
call   8048fb0 <free@plt>
jmp    804da46 <argp_failure+0x686>
mov    %ecx,-0x5c(%ebp)
movl   $0x5,0x8(%esp)
movl   $0x8054448,0x4(%esp)
jmp    804e19d <argp_failure+0xddd>
mov    -0x84(%ebp),%eax
mov    %eax,(%esp)
call   80491b0 <funlockfile@plt>
jmp    804d6e8 <argp_failure+0x328>
mov    -0x60(%ebp),%eax
lea    -0x44(%ebp),%ecx
mov    0x14(%eax),%edx
mov    -0x5c(%ebp),%eax
mov    0x10(%eax),%eax
call   804bfd0 <__sprintf_chk@plt+0x2c20>
jmp    804e31e <argp_failure+0xf5e>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804d78b <argp_failure+0x3cb>
mov    0x1c(%edi),%eax
jmp    804d782 <argp_failure+0x3c2>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e7cc <argp_failure+0x140c>
mov    0x1c(%edi),%eax
jmp    804e7c3 <argp_failure+0x1403>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     804e822 <argp_failure+0x1462>
mov    0x1c(%edi),%eax
jmp    804e819 <argp_failure+0x1459>
mov    %ecx,%edx
xchg   %ax,%ax
jmp    804e273 <argp_failure+0xeb3>
call   8049020 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %edi
xor    %eax,%eax
push   %ebx
mov    $0xe,%ecx
sub    $0x54,%esp
lea    0x18(%esp),%edx
mov    0x60(%esp),%ebx
mov    %edx,%edi
rep stos %eax,%es:(%edi)
mov    0x6c(%esp),%eax
mov    0x64(%esp),%ecx
mov    %ebx,0x18(%esp)
mov    %eax,0x4(%esp)
mov    0x68(%esp),%eax
mov    %eax,(%esp)
mov    %ebx,%eax
call   804d600 <argp_failure+0x240>
add    $0x54,%esp
pop    %ebx
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%ebx
mov    0x28(%esp),%esi
test   %ebx,%ebx
je     804e9a5 <argp_state_help+0x75>
mov    0x10(%ebx),%eax
test   $0x2,%al
jne    804e986 <argp_state_help+0x56>
cmpl   $0x0,0x24(%esp)
je     804e986 <argp_state_help+0x56>
mov    %esi,%edx
mov    0x24(%esp),%ecx
or     $0x80,%dl
test   $0x40,%al
mov    0x28(%ebx),%eax
cmovne %edx,%esi
mov    %ebx,%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    (%ebx),%eax
call   804d600 <argp_failure+0x240>
testb  $0x20,0x10(%ebx)
jne    804e986 <argp_state_help+0x56>
test   $0x100,%esi
jne    804e998 <argp_state_help+0x68>
and    $0x200,%esi
jne    804e98c <argp_state_help+0x5c>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
movl   $0x0,(%esp)
call   8049120 <exit@plt>
mov    0x80592c0,%eax
mov    %eax,(%esp)
call   8049120 <exit@plt>
cmpl   $0x0,0x24(%esp)
je     804e986 <argp_state_help+0x56>
mov    0x8059340,%eax
xor    %edx,%edx
mov    0x24(%esp),%ecx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804d600 <argp_failure+0x240>
jmp    804e976 <argp_state_help+0x46>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
test   %esi,%esi
je     804eaa8 <argp_error+0xd8>
testb  $0x2,0x10(%esi)
jne    804ea8d <argp_error+0xbd>
mov    0x2c(%esi),%ebx
test   %ebx,%ebx
je     804ea8d <argp_error+0xbd>
mov    %ebx,(%esp)
lea    0x28(%esp),%edi
call   80492c0 <flockfile@plt>
test   %esi,%esi
je     804ea98 <argp_error+0xc8>
mov    0x28(%esi),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <fputs_unlocked@plt>
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804eab3 <argp_error+0xe3>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x3a,(%eax)
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804eac8 <argp_error+0xf8>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0x20,(%eax)
mov    0x24(%esp),%eax
mov    %edi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   8048f60 <__vfprintf_chk@plt>
mov    0x14(%ebx),%eax
cmp    0x18(%ebx),%eax
jae    804eadd <argp_error+0x10d>
lea    0x1(%eax),%edx
mov    %edx,0x14(%ebx)
movb   $0xa,(%eax)
movl   $0x104,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804e930 <argp_state_help>
mov    %ebx,(%esp)
call   80491b0 <funlockfile@plt>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8059340,%eax
jmp    804ea0e <argp_error+0x3e>
lea    0x0(%esi),%esi
mov    0x8059344,%ebx
jmp    804e9ef <argp_error+0x1f>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804ea2f <argp_error+0x5f>
movl   $0x20,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804ea44 <argp_error+0x74>
movl   $0xa,0x4(%esp)
mov    %ebx,(%esp)
call   80492a0 <__overflow@plt>
jmp    804ea71 <argp_error+0xa1>
nop
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x4,%esp
mov    (%eax),%ecx
mov    0x10(%eax),%esi
test   %ecx,%ecx
je     804eb38 <argp_error+0x168>
addl   $0x1,0x8(%edx)
xor    %eax,%eax
jmp    804eb0b <argp_error+0x13b>
add    $0x1,%eax
add    $0x18,%ecx
mov    -0x14(%ecx),%edx
test   %edx,%edx
jne    804eb08 <argp_error+0x138>
mov    -0x18(%ecx),%edx
test   %edx,%edx
jne    804eb08 <argp_error+0x138>
mov    -0x8(%ecx),%edx
test   %edx,%edx
jne    804eb08 <argp_error+0x138>
mov    -0x4(%ecx),%edx
test   %edx,%edx
jne    804eb08 <argp_error+0x138>
lea    (%eax,%eax,2),%edx
add    %eax,0x4(%ebx)
add    %edx,(%ebx)
jmp    804eb43 <argp_error+0x173>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%ecx
test   %ecx,%ecx
je     804eb43 <argp_error+0x173>
addl   $0x1,0x8(%edx)
test   %esi,%esi
je     804eb64 <argp_error+0x194>
mov    (%esi),%eax
test   %eax,%eax
je     804eb64 <argp_error+0x194>
lea    0x0(%esi),%esi
mov    %ebx,%edx
add    $0x10,%esi
call   804eaf0 <argp_error+0x120>
addl   $0x1,0xc(%ebx)
mov    (%esi),%eax
test   %eax,%eax
jne    804eb50 <argp_error+0x180>
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    (%eax),%edi
mov    %eax,0x20(%esp)
mov    0x10(%eax),%ebp
mov    %edx,0x24(%esp)
mov    %ecx,0x28(%esp)
test   %edi,%edi
mov    %edi,0x14(%esp)
je     804ed44 <argp_error+0x374>
mov    %edi,%ebx
mov    0x54(%esp),%edi
mov    %ebp,0x2c(%esp)
xchg   %ax,%ax
mov    0x4(%ebx),%esi
test   %esi,%esi
jne    804ebb1 <argp_error+0x1e1>
mov    (%ebx),%eax
test   %eax,%eax
je     804ed10 <argp_error+0x340>
mov    0xc(%ebx),%eax
test   $0x4,%al
jne    804ecd8 <argp_error+0x308>
mov    %eax,%edx
mov    %ebx,0x14(%esp)
and    $0x8,%edx
jne    804ecd0 <argp_error+0x300>
test   $0x8,%al
jne    804ec27 <argp_error+0x257>
lea    -0x1(%esi),%eax
cmp    $0xfe,%eax
ja     804ec27 <argp_error+0x257>
call   8049390 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%esi,2)
je     804ec27 <argp_error+0x257>
mov    0x4(%edi),%eax
mov    %esi,%ecx
lea    0x1(%eax),%edx
mov    %edx,0x4(%edi)
mov    %cl,(%eax)
mov    0x14(%esp),%eax
mov    0x8(%eax),%eax
test   %eax,%eax
je     804ec21 <argp_error+0x251>
mov    0x4(%edi),%eax
lea    0x1(%eax),%edx
mov    %edx,0x4(%edi)
movb   $0x3a,(%eax)
mov    0x14(%esp),%eax
testb  $0x1,0xc(%eax)
je     804ec21 <argp_error+0x251>
mov    0x4(%edi),%eax
lea    0x1(%eax),%edx
mov    %edx,0x4(%edi)
movb   $0x3a,(%eax)
mov    0x4(%edi),%eax
movb   $0x0,(%eax)
mov    (%ebx),%esi
test   %esi,%esi
je     804ecd0 <argp_error+0x300>
mov    (%edi),%eax
mov    %eax,0x1c(%esp)
mov    0x8(%eax),%eax
mov    %eax,%ebp
mov    %eax,0x18(%esp)
mov    (%eax),%eax
test   %eax,%eax
je     804ec66 <argp_error+0x296>
xchg   %ax,%ax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048f50 <strcmp@plt>
test   %eax,%eax
je     804ece8 <argp_error+0x318>
add    $0x10,%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    804ec48 <argp_error+0x278>
mov    0x14(%esp),%ecx
mov    0x8(%edi),%eax
mov    0x8(%ecx),%edx
mov    %esi,(%eax)
test   %edx,%edx
je     804ed07 <argp_error+0x337>
mov    0xc(%ecx),%edx
and    $0x1,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
add    $0x2,%edx
mov    0x4(%ebx),%ecx
mov    %edx,0x4(%eax)
movl   $0x0,0x8(%eax)
test   %ecx,%ecx
je     804ed38 <argp_error+0x368>
mov    0x1c(%esp),%esi
and    $0xffffff,%ecx
mov    0x50(%esp),%edx
sub    0x34(%esi),%edx
sar    $0x2,%edx
imul   $0x38e38e39,%edx,%edx
add    $0x1,%edx
shl    $0x18,%edx
add    %ecx,%edx
mov    %edx,0xc(%eax)
lea    0x10(%eax),%edx
mov    %edx,0x8(%edi)
movl   $0x0,0x10(%eax)
nop
add    $0x18,%ebx
jmp    804eba0 <argp_error+0x1d0>
mov    0x14(%esp),%ecx
mov    0xc(%ecx),%edx
jmp    804ebc2 <argp_error+0x1f2>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%edx
sub    0x18(%esp),%edx
cmp    $0xfffffff1,%edx
jge    804ecd0 <argp_error+0x300>
mov    0x14(%esp),%ecx
mov    0x8(%edi),%eax
mov    0x8(%ecx),%edx
mov    %esi,(%eax)
test   %edx,%edx
jne    804ec7a <argp_error+0x2aa>
xor    %edx,%edx
jmp    804ec88 <argp_error+0x2b8>
xchg   %ax,%ax
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    804ebb1 <argp_error+0x1e1>
mov    0x14(%ebx),%ebp
test   %ebp,%ebp
jne    804ebb1 <argp_error+0x1e1>
mov    0x20(%esp),%eax
mov    0x2c(%esp),%ebp
mov    0x4(%eax),%eax
jmp    804ed57 <argp_error+0x387>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%ecx
mov    0x4(%ecx),%ecx
jmp    804ec9d <argp_error+0x2cd>
mov    0x20(%esp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804ee29 <argp_error+0x459>
mov    0x50(%esp),%edi
test   %ebp,%ebp
mov    %eax,(%edi)
mov    %edi,%eax
mov    0x20(%esp),%edi
mov    %edi,0x4(%eax)
mov    0x54(%esp),%eax
mov    0x50(%esp),%edi
mov    0x4(%eax),%eax
movl   $0x0,0xc(%edi)
mov    %eax,0x8(%edi)
mov    %edi,%eax
mov    0x24(%esp),%edi
movl   $0x0,0x18(%eax)
movl   $0x0,0x20(%eax)
movl   $0x0,0x1c(%eax)
mov    %edi,0x10(%eax)
mov    0x28(%esp),%edi
mov    %edi,0x14(%eax)
je     804edda <argp_error+0x40a>
mov    0x0(%ebp),%ecx
xor    %eax,%eax
test   %ecx,%ecx
je     804edc3 <argp_error+0x3f3>
lea    0x0(%esi),%esi
add    $0x1,%eax
mov    %eax,%edx
shl    $0x4,%edx
mov    0x0(%ebp,%edx,1),%edx
test   %edx,%edx
jne    804edb0 <argp_error+0x3e0>
shl    $0x2,%eax
mov    0x54(%esp),%edi
mov    0xc(%edi),%edx
mov    0x50(%esp),%edi
mov    %edx,0x1c(%edi)
add    %eax,%edx
mov    0x54(%esp),%eax
mov    %edx,0xc(%eax)
mov    0x50(%esp),%eax
mov    0x50(%esp),%esi
add    $0x24,%eax
test   %ebp,%ebp
je     804ee21 <argp_error+0x451>
mov    0x0(%ebp),%edi
test   %edi,%edi
je     804ee21 <argp_error+0x451>
mov    %eax,%edx
xor    %ecx,%ecx
mov    %edi,%eax
mov    0x54(%esp),%edi
jmp    804ee02 <argp_error+0x432>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%ecx
mov    %edx,(%esp)
mov    %esi,%edx
add    $0x10,%ebp
mov    %edi,0x4(%esp)
lea    0x1(%ecx),%ebx
call   804eb70 <argp_error+0x1a0>
mov    %eax,%edx
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    804ee00 <argp_error+0x430>
mov    %edx,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x50(%esp),%eax
xor    %esi,%esi
jmp    804ede5 <argp_error+0x415>
jmp    804ee40 <argp_error+0x470>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebx
mov    $0x7,%eax
sub    $0x18,%esp
cmpl   $0x56,0x20(%esp)
mov    0x28(%esp),%ebx
je     804ee60 <argp_error+0x490>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8059398,%eax
test   %eax,%eax
je     804ee88 <argp_error+0x4b8>
mov    %ebx,0x4(%esp)
mov    0x30(%ebx),%edx
mov    %edx,(%esp)
call   *%eax
testb  $0x20,0x10(%ebx)
je     804eee3 <argp_error+0x513>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    0x8059538,%eax
test   %eax,%eax
je     804eeb8 <argp_error+0x4e8>
mov    %eax,0xc(%esp)
movl   $0x8053f74,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    0x30(%ebx),%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804ee75 <argp_error+0x4a5>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x80546cc,0x4(%esp)
mov    (%ebx),%eax
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804e9d0 <argp_error>
jmp    804ee75 <argp_error+0x4a5>
movl   $0x0,(%esp)
call   8049120 <exit@plt>
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x28(%esp),%ebx
cmp    $0xfffffffd,%eax
je     804efd8 <argp_error+0x608>
jle    804ef68 <argp_error+0x598>
cmp    $0xfffffffe,%eax
je     804ef38 <argp_error+0x568>
cmp    $0x3f,%eax
nop
jne    804efc8 <argp_error+0x5f8>
movl   $0x27a,0x8(%esp)
mov    0x30(%ebx),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804e930 <argp_state_help>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
mov    %eax,0x8059360
call   8050960 <argp_parse+0x1960>
mov    %eax,0x28(%ebx)
mov    %eax,0x8059340
mov    0x10(%ebx),%eax
and    $0x3,%eax
cmp    $0x1,%eax
je     804efe8 <argp_error+0x618>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
cmp    $0xfffffffc,%eax
jne    804efc8 <argp_error+0x5f8>
mov    0x24(%esp),%edx
mov    $0x8054618,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
test   %edx,%edx
cmovne 0x24(%esp),%eax
mov    %eax,(%esp)
call   8049330 <strtol@plt>
mov    %eax,0x8059394
jmp    804efac <argp_error+0x5dc>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,(%esp)
call   8049000 <sleep@plt>
mov    0x8059394,%eax
lea    -0x1(%eax),%edx
test   %eax,%eax
mov    %edx,0x8059394
jg     804efa0 <argp_error+0x5d0>
xor    %eax,%eax
jmp    804ef62 <argp_error+0x592>
lea    0x0(%esi),%esi
add    $0x18,%esp
mov    $0x7,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x201,0x8(%esp)
jmp    804ef1e <argp_error+0x54e>
lea    0x0(%esi),%esi
mov    0x8(%ebx),%eax
mov    0x24(%esp),%ecx
mov    %ecx,(%eax)
xor    %eax,%eax
jmp    804ef62 <argp_error+0x592>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xec,%esp
mov    0x8(%ebp),%eax
mov    %eax,-0xcc(%ebp)
mov    0x10(%ebp),%eax
mov    %eax,-0xd0(%ebp)
mov    0x18(%ebp),%eax
mov    %eax,-0xd8(%ebp)
mov    0x1c(%ebp),%eax
mov    %eax,-0xe0(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
testb  $0x1,0x14(%ebp)
jne    804f05d <argp_parse+0x5d>
mov    0x8059360,%ebx
test   %ebx,%ebx
je     804f60b <argp_parse+0x60b>
mov    0x8059340,%ecx
test   %ecx,%ecx
je     804fb7b <argp_parse+0xb7b>
testb  $0x10,0x14(%ebp)
je     804f478 <argp_parse+0x478>
mov    0x14(%ebp),%eax
mov    -0xcc(%ebp),%esi
movl   $0x0,-0xb8(%ebp)
00
movl   $0x0,-0xb4(%ebp)
00
and    $0x4,%eax
mov    %eax,-0xdc(%ebp)
sete   %al
test   %esi,%esi
movzbl %al,%eax
mov    %eax,-0xbc(%ebp)
movl   $0x0,-0xb0(%ebp)
00
je     804f438 <argp_parse+0x438>
mov    -0xcc(%ebp),%eax
lea    -0xbc(%ebp),%edx
call   804eaf0 <argp_error+0x120>
mov    -0xb4(%ebp),%eax
mov    -0xb8(%ebp),%edi
lea    0x9(%eax,%eax,8),%esi
mov    -0xb0(%ebp),%eax
shl    $0x2,%esi
add    $0x1,%edi
shl    $0x4,%edi
lea    0x0(,%eax,4),%ecx
mov    -0xbc(%ebp),%eax
lea    (%ecx,%esi,1),%ebx
add    %ebx,%edi
lea    0x1(%eax,%edi,1),%eax
mov    %eax,(%esp)
mov    %ecx,-0xd4(%ebp)
call   80490e0 <malloc@plt>
mov    $0xc,%edx
test   %eax,%eax
mov    %eax,-0x20(%ebp)
je     804f418 <argp_parse+0x418>
mov    -0xd4(%ebp),%ecx
add    %eax,%esi
add    %eax,%ebx
add    %eax,%edi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,-0x68(%ebp)
mov    %esi,-0x60(%ebp)
mov    %ebx,-0x94(%ebp)
mov    %edi,-0x98(%ebp)
movl   $0x1,-0x90(%ebp)
00
movl   $0x1,-0x8c(%ebp)
00
movl   $0x0,-0x88(%ebp)
00
movl   $0x0,-0x84(%ebp)
00
movl   $0x0,-0x80(%ebp)
movl   $0x0,-0x7c(%ebp)
movl   $0x0,-0x78(%ebp)
movl   $0x0,-0x74(%ebp)
movl   $0x0,-0x70(%ebp)
movl   $0x0,-0x6c(%ebp)
call   80491a0 <memset@plt>
lea    -0x9c(%ebp),%eax
testb  $0x8,0x14(%ebp)
mov    %eax,-0xac(%ebp)
mov    %edi,-0xa8(%ebp)
mov    %ebx,-0xa4(%ebp)
mov    %esi,-0xa0(%ebp)
je     804f450 <argp_parse+0x450>
lea    0x1(%edi),%eax
movb   $0x2d,(%edi)
mov    %eax,%edi
mov    %eax,-0xa8(%ebp)
mov    -0xcc(%ebp),%esi
movb   $0x0,(%edi)
mov    -0xa4(%ebp),%eax
test   %esi,%esi
movl   $0x0,(%eax)
mov    %esi,-0x9c(%ebp)
je     804f5d0 <argp_parse+0x5d0>
lea    -0xac(%ebp),%eax
xor    %edx,%edx
mov    %eax,0x4(%esp)
mov    -0x68(%ebp),%eax
xor    %ecx,%ecx
mov    %eax,(%esp)
mov    %esi,%eax
call   804eb70 <argp_error+0x1a0>
mov    -0x68(%ebp),%ebx
mov    %eax,%edx
mov    %eax,-0x64(%ebp)
mov    -0x9c(%ebp),%eax
mov    %eax,-0xcc(%ebp)
lea    -0x58(%ebp),%esi
xor    %eax,%eax
mov    $0xe,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    -0xcc(%ebp),%eax
cmp    %edx,%ebx
movl   $0x1,-0x5c(%ebp)
mov    %eax,-0x58(%ebp)
mov    0xc(%ebp),%eax
mov    %eax,-0x54(%ebp)
mov    -0xd0(%ebp),%eax
mov    %eax,-0x50(%ebp)
mov    0x14(%ebp),%eax
mov    %eax,-0x48(%ebp)
mov    0x8059344,%eax
mov    %eax,-0x2c(%ebp)
mov    0x8059380,%eax
mov    %eax,-0x28(%ebp)
lea    -0x9c(%ebp),%eax
mov    %eax,-0x24(%ebp)
jb     804f528 <argp_parse+0x528>
mov    -0x48(%ebp),%eax
test   $0x2,%al
jne    804f5e7 <argp_parse+0x5e7>
mov    -0x50(%ebp),%eax
movl   $0x1,-0x8c(%ebp)
00
cmp    %eax,-0xd0(%ebp)
je     804fb5b <argp_parse+0xb5b>
mov    0x8059340,%eax
mov    %eax,-0x30(%ebp)
mov    -0x40(%ebp),%edx
mov    -0x4c(%ebp),%eax
test   %edx,%edx
je     804f2b0 <argp_parse+0x2b0>
cmp    %eax,%edx
jle    804f2b0 <argp_parse+0x2b0>
movl   $0x0,-0x40(%ebp)
mov    -0x5c(%ebp),%edx
test   %edx,%edx
je     804f648 <argp_parse+0x648>
mov    -0x40(%ebp),%edi
test   %edi,%edi
jne    804f648 <argp_parse+0x648>
mov    %eax,-0x90(%ebp)
lea    -0x90(%ebp),%eax
mov    %eax,0x14(%esp)
mov    -0x94(%ebp),%eax
testb  $0x40,-0x48(%ebp)
movl   $0xffffffff,-0x88(%ebp)
ff
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    -0x98(%ebp),%eax
mov    %eax,0x8(%esp)
mov    -0x50(%ebp),%eax
mov    %eax,0x4(%esp)
mov    -0x54(%ebp),%eax
mov    %eax,(%esp)
je     804f8b0 <argp_parse+0x8b0>
call   8050af0 <argp_parse+0x1af0>
mov    %eax,%ecx
mov    -0x90(%ebp),%eax
cmp    $0xffffffff,%ecx
mov    %eax,-0x4c(%ebp)
je     804f620 <argp_parse+0x620>
cmp    $0x3f,%ecx
je     804f9f8 <argp_parse+0x9f8>
cmp    $0x1,%ecx
je     804fa20 <argp_parse+0xa20>
mov    %ecx,%edi
sar    $0x18,%edi
test   %edi,%edi
jne    804f768 <argp_parse+0x768>
mov    -0x98(%ebp),%eax
mov    %ecx,0x4(%esp)
mov    %ecx,-0xcc(%ebp)
mov    %eax,(%esp)
call   8049140 <strchr@plt>
mov    -0xcc(%ebp),%ecx
test   %eax,%eax
je     804f7d8 <argp_parse+0x7d8>
mov    -0x68(%ebp),%ebx
mov    -0x64(%ebp),%edx
cmp    %edx,%ebx
jb     804f38b <argp_parse+0x38b>
jmp    804f7d8 <argp_parse+0x7d8>
add    $0x24,%ebx
cmp    %edx,%ebx
jae    804f7d8 <argp_parse+0x7d8>
cmp    0x8(%ebx),%eax
xchg   %ax,%ax
jae    804f380 <argp_parse+0x380>
mov    (%ebx),%eax
mov    -0x84(%ebp),%edx
test   %eax,%eax
mov    %edx,-0xcc(%ebp)
je     804f7d8 <argp_parse+0x7d8>
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
mov    %edx,-0x38(%ebp)
mov    0xc(%ebx),%edx
mov    %ecx,(%esp)
mov    %esi,0x8(%esp)
mov    %edx,-0x44(%ebp)
mov    -0xcc(%ebp),%edx
mov    %ecx,-0xcc(%ebp)
mov    %edx,0x4(%esp)
call   *%eax
mov    -0x34(%ebp),%edx
mov    -0xcc(%ebp),%ecx
mov    %edx,0x20(%ebx)
cmp    $0x7,%eax
je     804fc7a <argp_parse+0xc7a>
test   %eax,%eax
je     804f29b <argp_parse+0x29b>
mov    %eax,%edx
jmp    804fb43 <argp_parse+0xb43>
lea    0x0(%esi),%esi
cmp    $0x7,%eax
mov    %eax,%edx
je     804f26f <argp_parse+0x26f>
test   %eax,%eax
je     804f26f <argp_parse+0x26f>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x1c(%ebp),%esi
xor    %gs:0x14,%esi
mov    %edx,%eax
jne    804fc75 <argp_parse+0xc75>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    $0x34,%edi
mov    $0x24,%ebx
xor    %ecx,%ecx
mov    $0x24,%esi
jmp    804f0ed <argp_parse+0xed>
xchg   %ax,%ax
mov    -0xdc(%ebp),%ebx
test   %ebx,%ebx
je     804f1c9 <argp_parse+0x1c9>
lea    0x1(%edi),%eax
movb   $0x2b,(%edi)
mov    %eax,%edi
mov    %eax,-0xa8(%ebp)
jmp    804f1c9 <argp_parse+0x1c9>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x50,%esp
xor    %eax,%eax
lea    0x27(%esp),%edx
sub    $0x30,%esp
lea    0x27(%esp),%ebx
and    $0xfffffff0,%edx
and    $0xfffffff0,%ebx
movl   $0x0,(%ebx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804f48e <argp_parse+0x48e>
mov    -0xcc(%ebp),%esi
xor    %eax,%eax
mov    $0x10,%ecx
mov    %edx,%edi
mov    %edx,0x10(%ebx)
rep stos %eax,%es:(%edi)
test   %esi,%esi
je     804fbab <argp_parse+0xbab>
lea    0x10(%edx),%eax
mov    %esi,(%edx)
mov    0x8059538,%edx
movl   $0x80547b0,(%eax)
test   %edx,%edx
je     804fb95 <argp_parse+0xb95>
lea    0x20(%eax),%edx
movl   $0x8054758,0x10(%eax)
mov    0x14(%ebp),%eax
movl   $0x0,(%edx)
movl   $0x0,-0xb8(%ebp)
00
movl   $0x0,-0xb4(%ebp)
00
and    $0x4,%eax
mov    %eax,-0xdc(%ebp)
sete   %al
movzbl %al,%eax
mov    %eax,-0xbc(%ebp)
movl   $0x0,-0xb0(%ebp)
00
mov    %ebx,-0xcc(%ebp)
jmp    804f0ab <argp_parse+0xab>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0xe0(%ebp),%eax
mov    %eax,0x18(%ebx)
jmp    804f57c <argp_parse+0x57c>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
mov    %edx,-0x38(%ebp)
mov    0xc(%ebx),%edx
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000003,(%esp)
mov    %edx,-0x44(%ebp)
call   *%eax
mov    -0x34(%ebp),%edx
mov    %edx,0x20(%ebx)
add    $0x24,%ebx
cmp    -0x64(%ebp),%ebx
jae    804f400 <argp_parse+0x400>
cmp    $0x7,%eax
jne    804f5c0 <argp_parse+0x5c0>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     804f58f <argp_parse+0x58f>
mov    0x1c(%eax),%eax
mov    0x14(%ebx),%edx
mov    (%eax,%edx,4),%eax
mov    %eax,0x18(%ebx)
mov    (%ebx),%eax
test   %eax,%eax
jne    804f538 <argp_parse+0x538>
mov    0x4(%ebx),%eax
mov    0x10(%eax),%eax
test   %eax,%eax
je     804f5b3 <argp_parse+0x5b3>
mov    (%eax),%ecx
test   %ecx,%ecx
je     804f5b3 <argp_parse+0x5b3>
mov    0x1c(%ebx),%eax
mov    0x18(%ebx),%edx
mov    %edx,(%eax)
mov    (%ebx),%eax
test   %eax,%eax
jne    804f538 <argp_parse+0x538>
mov    $0x7,%eax
jmp    804f56b <argp_parse+0x56b>
lea    0x0(%esi),%esi
test   %eax,%eax
je     804f57c <argp_parse+0x57c>
mov    %eax,%edx
jmp    804f418 <argp_parse+0x418>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x68(%ebp),%edx
movl   $0x0,-0xcc(%ebp)
00
mov    %edx,-0x64(%ebp)
mov    %edx,%ebx
jmp    804f21b <argp_parse+0x21b>
test   $0x1,%al
mov    -0x50(%ebp),%eax
movl   $0x0,-0x8c(%ebp)
00
je     804f287 <argp_parse+0x287>
sub    $0x4,%eax
mov    %eax,-0x50(%ebp)
addl   $0x1,-0x54(%ebp)
jmp    804f287 <argp_parse+0x287>
mov    -0xd0(%ebp),%eax
mov    (%eax),%eax
mov    %eax,0x8059360
jmp    804f04f <argp_parse+0x4f>
lea    0x0(%esi),%esi
cmp    $0x1,%eax
movl   $0x0,-0x5c(%ebp)
jle    804f648 <argp_parse+0x648>
mov    -0x50(%ebp),%edx
mov    -0x4(%edx,%eax,4),%edx
cmpb   $0x2d,(%edx)
jne    804f648 <argp_parse+0x648>
cmpb   $0x2d,0x1(%edx)
jne    804f648 <argp_parse+0x648>
cmpb   $0x0,0x2(%edx)
jne    804f648 <argp_parse+0x648>
mov    %eax,-0x40(%ebp)
nop
cmp    %eax,-0x54(%ebp)
jg     804f8c0 <argp_parse+0x8c0>
mov    -0x4c(%ebp),%eax
cmp    -0x54(%ebp),%eax
je     804fa47 <argp_parse+0xa47>
mov    -0xd8(%ebp),%ecx
test   %ecx,%ecx
je     804fbe0 <argp_parse+0xbe0>
mov    %eax,(%ecx)
mov    -0x64(%ebp),%eax
lea    -0x24(%eax),%ebx
mov    -0x68(%ebp),%eax
cmp    %eax,%ebx
mov    %eax,%ecx
jae    804f691 <argp_parse+0x691>
jmp    804fc54 <argp_parse+0xc54>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x7,%eax
jne    804fa30 <argp_parse+0xa30>
mov    (%ebx),%edi
mov    $0x7,%eax
test   %edi,%edi
je     804f6d2 <argp_parse+0x6d2>
mov    0x20(%ebx),%eax
mov    %eax,-0x34(%ebp)
mov    0x18(%ebx),%eax
mov    %eax,-0x3c(%ebp)
mov    0x1c(%ebx),%eax
mov    %eax,-0x38(%ebp)
mov    0xc(%ebx),%eax
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000004,(%esp)
mov    %eax,-0x44(%ebp)
call   *%edi
mov    -0x34(%ebp),%edx
mov    -0x68(%ebp),%ecx
mov    %edx,0x20(%ebx)
sub    $0x24,%ebx
cmp    %ecx,%ebx
jae    804f688 <argp_parse+0x688>
mov    %eax,%edx
mov    %ecx,%eax
mov    -0x64(%ebp),%ecx
cmp    $0x7,%edx
lea    -0x24(%ecx),%ebx
jne    804f6f0 <argp_parse+0x6f0>
xor    %dl,%dl
lea    0x0(%esi),%esi
cmp    %ebx,%eax
mov    %edx,%edi
ja     804f73b <argp_parse+0x73b>
xchg   %ax,%ax
mov    (%ebx),%eax
test   %eax,%eax
je     804f731 <argp_parse+0x731>
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
mov    %edx,-0x38(%ebp)
mov    0xc(%ebx),%edx
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000007,(%esp)
mov    %edx,-0x44(%ebp)
call   *%eax
mov    -0x34(%ebp),%eax
mov    %eax,0x20(%ebx)
sub    $0x24,%ebx
cmp    -0x68(%ebp),%ebx
jae    804f6f8 <argp_parse+0x6f8>
mov    %edi,%edx
cmp    $0x7,%edx
mov    $0x16,%eax
cmove  %eax,%edx
mov    -0x20(%ebp),%eax
mov    %edx,-0xcc(%ebp)
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    -0xcc(%ebp),%edx
jmp    804f418 <argp_parse+0x418>
lea    0x0(%esi),%esi
mov    -0x68(%ebp),%eax
lea    (%edi,%edi,8),%ebx
mov    -0x84(%ebp),%edx
lea    -0x24(%eax,%ebx,4),%ebx
mov    (%ebx),%eax
mov    %edx,-0xcc(%ebp)
test   %eax,%eax
je     804f990 <argp_parse+0x990>
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
mov    %edx,-0x38(%ebp)
mov    0xc(%ebx),%edx
mov    %esi,0x8(%esp)
mov    %edx,-0x44(%ebp)
mov    -0xcc(%ebp),%edx
mov    %ecx,-0xcc(%ebp)
mov    %edx,0x4(%esp)
mov    %ecx,%edx
shl    $0x8,%edx
sar    $0x8,%edx
mov    %edx,(%esp)
call   *%eax
mov    -0x34(%ebp),%edx
mov    -0xcc(%ebp),%ecx
mov    %edx,0x20(%ebx)
jmp    804f3e5 <argp_parse+0x3e5>
lea    0x0(%esi),%esi
mov    %ecx,%edi
mov    -0x9c(%ebp),%eax
movl   $0x5,0x8(%esp)
movl   $0x8054720,0x4(%esp)
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %edi,0x8(%esp)
movl   $0x8054621,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804e9d0 <argp_error>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edi
je     804f651 <argp_parse+0x651>
mov    $0x7,%edx
mov    -0x2c(%ebp),%eax
movl   $0x104,0x8(%esp)
mov    %esi,(%esp)
mov    %edx,-0xcc(%ebp)
mov    %eax,0x4(%esp)
call   804e930 <argp_state_help>
mov    -0xcc(%ebp),%edx
lea    0x0(%esi,%eiz,1),%esi
mov    -0x68(%ebp),%ebx
mov    %edx,%edi
mov    -0x64(%ebp),%ecx
cmp    %ecx,%ebx
jae    804fc4a <argp_parse+0xc4a>
mov    (%ebx),%eax
test   %eax,%eax
je     804f89c <argp_parse+0x89c>
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
mov    %edx,-0x38(%ebp)
mov    0xc(%ebx),%edx
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000005,(%esp)
mov    %edx,-0x44(%ebp)
call   *%eax
mov    -0x34(%ebp),%eax
mov    -0x64(%ebp),%ecx
mov    %eax,0x20(%ebx)
add    $0x24,%ebx
cmp    %ecx,%ebx
jb     804f860 <argp_parse+0x860>
mov    %edi,%edx
mov    -0x68(%ebp),%eax
lea    -0x24(%ecx),%ebx
jmp    804f6f0 <argp_parse+0x6f0>
call   8050a50 <argp_parse+0x1a50>
mov    %eax,%ecx
jmp    804f31a <argp_parse+0x31a>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x4,-0x48(%ebp)
jne    804f651 <argp_parse+0x651>
mov    -0x50(%ebp),%edx
mov    (%edx,%eax,4),%ebx
add    $0x1,%eax
mov    %ebx,-0x84(%ebp)
mov    -0x68(%ebp),%ecx
sub    $0x1,%eax
cmp    -0x64(%ebp),%ecx
mov    %eax,-0xcc(%ebp)
mov    %eax,-0x4c(%ebp)
jae    804fb51 <argp_parse+0xb51>
lea    0x24(%ecx),%edi
mov    %eax,%edx
xchg   %ax,%ax
lea    0x1(%edx),%eax
mov    %eax,-0x4c(%ebp)
mov    -0x24(%edi),%eax
test   %eax,%eax
je     804f978 <argp_parse+0x978>
mov    -0x4(%edi),%edx
mov    %edx,-0x34(%ebp)
mov    -0xc(%edi),%edx
mov    %edx,-0x3c(%ebp)
mov    -0x8(%edi),%edx
mov    %edx,-0x38(%ebp)
mov    -0x18(%edi),%edx
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,-0x44(%ebp)
call   *%eax
mov    -0x34(%ebp),%edx
mov    %edx,-0x4(%edi)
cmp    $0x7,%eax
je     804fc8d <argp_parse+0xc8d>
test   %eax,%eax
mov    -0x4c(%ebp),%edx
jne    804f95d <argp_parse+0x95d>
lea    0x0(%esi,%eiz,1),%esi
cmp    -0xcc(%ebp),%edx
jg     804fa10 <argp_parse+0xa10>
movl   $0x1,-0x5c(%ebp)
xor    %eax,%eax
cmp    $0x7,%eax
mov    $0x1,%ecx
jne    804f3ee <argp_parse+0x3ee>
mov    %ecx,%edi
jmp    804f818 <argp_parse+0x818>
lea    0x0(%esi),%esi
mov    %edx,-0x4c(%ebp)
cmp    %edi,-0x64(%ebp)
jbe    804fb51 <argp_parse+0xb51>
add    $0x24,%edi
jmp    804f8f8 <argp_parse+0x8f8>
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,%edi
mov    -0x94(%ebp),%ebx
cmp    %edi,0xc(%ebx)
jne    804f9a8 <argp_parse+0x9a8>
jmp    804f9ae <argp_parse+0x9ae>
nop
add    $0x10,%ebx
cmp    %edi,0xc(%ebx)
je     804f9ae <argp_parse+0x9ae>
mov    (%ebx),%eax
test   %eax,%eax
jne    804f9a0 <argp_parse+0x9a0>
mov    -0x9c(%ebp),%eax
movl   $0x5,0x8(%esp)
movl   $0x8054720,0x4(%esp)
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    (%ebx),%ecx
mov    $0x805461d,%edx
movl   $0x8054629,0x4(%esp)
mov    %esi,(%esp)
test   %ecx,%ecx
cmovne %ecx,%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
call   804e9d0 <argp_error>
jmp    804f818 <argp_parse+0x818>
cmpl   $0xffffffff,-0x88(%ebp)
jne    804f821 <argp_parse+0x821>
jmp    804f34b <argp_parse+0x34b>
lea    0x0(%esi),%esi
sub    -0xcc(%ebp),%edx
xor    %eax,%eax
add    %edx,-0x18(%edi)
jmp    804f95d <argp_parse+0x95d>
mov    -0x84(%ebp),%ebx
jmp    804f8d9 <argp_parse+0x8d9>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     804f691 <argp_parse+0x691>
mov    %eax,%edx
mov    %ecx,%eax
mov    -0x64(%ebp),%ecx
lea    -0x24(%ecx),%ebx
jmp    804f6f0 <argp_parse+0x6f0>
mov    -0x68(%ebp),%ebx
mov    -0x64(%ebp),%ecx
cmp    %ebx,%ecx
jbe    804fc68 <argp_parse+0xc68>
xor    %edx,%edx
jmp    804fa69 <argp_parse+0xa69>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x7,%edx
jne    804fbb2 <argp_parse+0xbb2>
mov    0xc(%ebx),%edi
test   %edi,%edi
jne    804fab4 <argp_parse+0xab4>
mov    (%ebx),%eax
mov    $0x7,%edx
test   %eax,%eax
je     804fab4 <argp_parse+0xab4>
mov    0x20(%ebx),%edx
mov    %edx,-0x34(%ebp)
mov    0x18(%ebx),%edx
mov    %edx,-0x3c(%ebp)
mov    0x1c(%ebx),%edx
movl   $0x0,-0x44(%ebp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,-0x38(%ebp)
movl   $0x1000002,(%esp)
call   *%eax
mov    -0x64(%ebp),%ecx
mov    %eax,%edx
mov    -0x34(%ebp),%eax
mov    %eax,0x20(%ebx)
add    $0x24,%ebx
cmp    %ecx,%ebx
jb     804fa60 <argp_parse+0xa60>
mov    -0x68(%ebp),%eax
lea    -0x24(%ecx),%ebx
cmp    %eax,%ebx
jb     804fb21 <argp_parse+0xb21>
cmp    $0x7,%edx
je     804fad9 <argp_parse+0xad9>
jmp    804fc5b <argp_parse+0xc5b>
nop
cmp    $0x7,%eax
jne    804fbc8 <argp_parse+0xbc8>
mov    (%ebx),%ecx
mov    $0x7,%eax
test   %ecx,%ecx
je     804fb17 <argp_parse+0xb17>
mov    0x20(%ebx),%eax
mov    %eax,-0x34(%ebp)
mov    0x18(%ebx),%eax
mov    %eax,-0x3c(%ebp)
mov    0x1c(%ebx),%eax
mov    %eax,-0x38(%ebp)
mov    0xc(%ebx),%eax
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000001,(%esp)
mov    %eax,-0x44(%ebp)
call   *%ecx
mov    -0x34(%ebp),%edx
mov    %edx,0x20(%ebx)
sub    $0x24,%ebx
cmp    -0x68(%ebp),%ebx
jae    804fad0 <argp_parse+0xad0>
mov    %eax,%edx
cmp    $0x7,%edx
mov    $0x0,%eax
cmove  %eax,%edx
mov    -0xd8(%ebp),%ecx
test   %ecx,%ecx
je     804fb3b <argp_parse+0xb3b>
mov    -0x4c(%ebp),%eax
mov    %eax,(%ecx)
test   %edx,%edx
je     804f66d <argp_parse+0x66d>
cmp    $0x7,%edx
jne    804f850 <argp_parse+0x850>
jmp    804f826 <argp_parse+0x826>
mov    $0x7,%eax
jmp    804f95d <argp_parse+0x95d>
mov    -0xd0(%ebp),%eax
mov    (%eax),%eax
test   %eax,%eax
je     804f293 <argp_parse+0x293>
mov    %eax,(%esp)
call   8050960 <argp_parse+0x1960>
mov    %eax,-0x30(%ebp)
jmp    804f29b <argp_parse+0x29b>
mov    -0xd0(%ebp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8050960 <argp_parse+0x1960>
mov    %eax,0x8059340
jmp    804f05d <argp_parse+0x5d>
mov    0x8059398,%edi
lea    0x10(%eax),%edx
test   %edi,%edi
jne    804f4d2 <argp_parse+0x4d2>
jmp    804f4dc <argp_parse+0x4dc>
mov    %edx,%eax
jmp    804f4be <argp_parse+0x4be>
test   %edx,%edx
je     804fa69 <argp_parse+0xa69>
lea    0x0(%esi),%esi
jmp    804fabb <argp_parse+0xabb>
lea    0x0(%esi),%esi
test   %eax,%eax
lea    0x0(%esi),%esi
je     804fad9 <argp_parse+0xad9>
mov    %eax,%edx
jmp    804fb2c <argp_parse+0xb2c>
lea    0x0(%esi),%esi
testb  $0x2,-0x48(%ebp)
mov    $0x7,%edx
jne    804f826 <argp_parse+0x826>
mov    -0x2c(%ebp),%eax
test   %eax,%eax
je     804f826 <argp_parse+0x826>
mov    -0x9c(%ebp),%eax
movl   $0x5,0x8(%esp)
mov    -0x30(%ebp),%ebx
movl   $0x8054632,0x4(%esp)
mov    %edx,-0xcc(%ebp)
mov    0x18(%eax),%eax
mov    %eax,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    -0x2c(%ebp),%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    -0xcc(%ebp),%edx
jmp    804f826 <argp_parse+0x826>
mov    %ebx,%eax
lea    -0x24(%ecx),%ebx
jmp    804f6f0 <argp_parse+0x6f0>
xor    %edx,%edx
jmp    804f6f0 <argp_parse+0x6f0>
test   %edx,%edx
je     804fad9 <argp_parse+0xad9>
jmp    804fb2c <argp_parse+0xb2c>
mov    %ebx,%eax
xor    %edx,%edx
lea    0x0(%esi,%eiz,1),%esi
jmp    804fabe <argp_parse+0xabe>
call   8049020 <__stack_chk_fail@plt>
mov    %ecx,%eax
mov    %edi,%ecx
test   %ecx,%ecx
mov    %eax,%edi
je     804f7da <argp_parse+0x7da>
jmp    804f992 <argp_parse+0x992>
mov    -0x24(%edi),%ecx
mov    -0x4c(%ebp),%eax
test   %ecx,%ecx
lea    -0x1(%eax),%edx
mov    %edx,-0x4c(%ebp)
je     804f97b <argp_parse+0x97b>
mov    -0x4(%edi),%eax
mov    %eax,-0x34(%ebp)
mov    -0xc(%edi),%eax
mov    %eax,-0x3c(%ebp)
mov    -0x8(%edi),%eax
mov    %eax,-0x38(%ebp)
mov    -0x18(%edi),%eax
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1000006,(%esp)
mov    %eax,-0x44(%ebp)
call   *%ecx
mov    -0x34(%ebp),%edx
cmp    %edi,-0x64(%ebp)
mov    %edx,-0x4(%edi)
jbe    804fcf0 <argp_parse+0xcf0>
cmp    $0x7,%eax
jne    804fcf0 <argp_parse+0xcf0>
mov    -0x4c(%ebp),%edx
add    $0x24,%edi
jmp    804f8f8 <argp_parse+0x8f8>
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
jne    804f95d <argp_parse+0x95d>
mov    -0x54(%ebp),%edx
mov    %edx,-0x4c(%ebp)
jmp    804f948 <argp_parse+0x948>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x8(%esp),%eax
mov    0x4(%esp),%ecx
test   %eax,%eax
je     804fd40 <argp_parse+0xd40>
mov    0x34(%eax),%edx
mov    0x34(%edx),%eax
mov    0x38(%edx),%edx
cmp    %edx,%eax
jb     804fd37 <argp_parse+0xd37>
jmp    804fd40 <argp_parse+0xd40>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x24,%eax
cmp    %edx,%eax
jae    804fd40 <argp_parse+0xd40>
cmp    %ecx,0x4(%eax)
jne    804fd30 <argp_parse+0xd30>
mov    0x18(%eax),%eax
ret
xor    %eax,%eax
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x2c,%esp
mov    0x805939c,%eax
movl   $0x8054858,0xc(%esp)
movl   $0x805485d,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x80593a0,%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8050440 <argp_parse+0x1440>
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x804fd50,0x8059398
08
mov    %eax,0x80593a0
mov    0x8(%esp),%eax
mov    %eax,0x805939c
ret
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%ebx
mov    0x30(%esp),%edi
mov    0x34(%esp),%ebp
test   %ebx,%ebx
jne    804fddc <argp_parse+0xddc>
jmp    804fdf1 <argp_parse+0xdf1>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     804fe00 <argp_parse+0xe00>
add    %eax,%esi
add    %eax,%ebp
sub    %eax,%ebx
je     804fdf1 <argp_parse+0xdf1>
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8052030 <argp_parse+0x3030>
cmp    $0xffffffff,%eax
jne    804fdd0 <argp_parse+0xdd0>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   80491d0 <__errno_location@plt>
movl   $0x1c,(%eax)
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804fea3 <argp_parse+0xea3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049290 <strrchr@plt>
test   %eax,%eax
je     804fe8f <argp_parse+0xe8f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804fe8f <argp_parse+0xe8f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x80548a0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804fe8f <argp_parse+0xe8f>
mov    $0x3,%ecx
mov    $0x80548a8,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804fe8f <argp_parse+0xe8f>
lea    0x4(%eax),%ebx
mov    %ebx,0x8059340
mov    %ebx,0x80593a4
mov    %ebx,0x8059360
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8059344,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8054868,(%esp)
mov    %eax,0xc(%esp)
call   8049070 <fwrite@plt>
call   8049310 <abort@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     8050388 <argp_parse+0x1388>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x80548ac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80548bf,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
movl   $0x7da,0x10(%esp)
movl   $0x8054be0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80492e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805492c,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     80503b0 <argp_parse+0x13b0>
jmp    *0x8054ba4(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054a90,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8049010 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80492e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054ac0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8049010 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80492e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049310 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80548c3,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80548d3,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80548ea,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80549f8,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8049010 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    805002f <argp_parse+0x102f>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054a18,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049010 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    805002f <argp_parse+0x102f>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054a3c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049010 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    805002f <argp_parse+0x102f>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054a64,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049010 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    805002f <argp_parse+0x102f>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80548b8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804ff21 <argp_parse+0xf21>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054af4,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8049010 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    80500ba <argp_parse+0x10ba>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     805045a <argp_parse+0x145a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    8050450 <argp_parse+0x1450>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804fed0 <argp_parse+0xed0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     80504b2 <argp_parse+0x14b2>
add    $0x1,%eax
cmp    $0xa,%eax
jne    80504a0 <argp_parse+0x14a0>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804fed0 <argp_parse+0xed0>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8050490 <argp_parse+0x1490>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x8054906,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
movl   $0x805491b,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049240 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8054b30,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
movl   $0x8054861,0xc(%esp)
movl   $0x805485d,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049240 <__printf_chk@plt>
mov    0x8059380,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054b64,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x805931c,%eax
mov    %eax,(%esp)
call   8049120 <exit@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049150 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     80506d2 <argp_parse+0x16d2>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    8050676 <argp_parse+0x1676>
mov    0x48(%esp),%eax
test   %eax,%eax
je     80506a8 <argp_parse+0x16a8>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048ff0 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     80506b0 <argp_parse+0x16b0>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    8050664 <argp_parse+0x1664>
mov    %edi,(%esp)
call   8049150 <strlen@plt>
cmp    %ebp,%eax
je     80506c8 <argp_parse+0x16c8>
cmpl   $0xffffffff,0x18(%esp)
jne    8050628 <argp_parse+0x1628>
mov    %ebx,0x18(%esp)
jmp    8050664 <argp_parse+0x1664>
nop
movb   $0x1,0x1f(%esp)
jmp    8050664 <argp_parse+0x1664>
nop
cmpb   $0x0,0x1f(%esp)
jne    80506dc <argp_parse+0x16dc>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    80506b7 <argp_parse+0x16b7>
mov    $0xfffffffe,%eax
jmp    80506bb <argp_parse+0x16bb>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     8050778 <argp_parse+0x1778>
movl   $0x8054c2a,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8050b40 <argp_parse+0x1b40>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   8051b60 <argp_parse+0x2b60>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   80490b0 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x8054c0f,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %eax,%esi
jmp    805071a <argp_parse+0x171a>
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x8054c47,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   8049010 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    (%edi),%ebp
xor    %edi,%edi
test   %ebp,%ebp
jne    8050825 <argp_parse+0x1825>
jmp    8050868 <argp_parse+0x1868>
xchg   %ax,%ax
mov    0x8059344,%eax
mov    %ebx,%edi
mov    %ebp,0xc(%esp)
movl   $0x8054c5c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     8050868 <argp_parse+0x1868>
test   %esi,%esi
je     80507f0 <argp_parse+0x17f0>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8048ff0 <memcmp@plt>
test   %eax,%eax
jne    80507f0 <argp_parse+0x17f0>
mov    0x8059344,%eax
mov    %ebp,0xc(%esp)
movl   $0x8054c66,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    8050813 <argp_parse+0x1813>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8059344,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8050886 <argp_parse+0x1886>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492a0 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   80505f0 <argp_parse+0x15f0>
test   %eax,%eax
js     80508d7 <argp_parse+0x18d7>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80506f0 <argp_parse+0x16f0>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   8050790 <argp_parse+0x1790>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    80508cf <argp_parse+0x18cf>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     8050953 <argp_parse+0x1953>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    805093b <argp_parse+0x193b>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     8050953 <argp_parse+0x1953>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <memcmp@plt>
test   %eax,%eax
jne    8050930 <argp_parse+0x1930>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    805097b <argp_parse+0x197b>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     8050970 <argp_parse+0x1970>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     80509a9 <argp_parse+0x19a9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     80509a9 <argp_parse+0x19a9>
cmp    $0x2f,%cl
je     80509b0 <argp_parse+0x19b0>
test   %bl,%bl
je     8050988 <argp_parse+0x1988>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    8050992 <argp_parse+0x1992>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    8050988 <argp_parse+0x1988>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
cmp    $0x1,%eax
jbe    80509df <argp_parse+0x19df>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     80509e8 <argp_parse+0x19e8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    80509d5 <argp_parse+0x19d5>
nop
jmp    80509df <argp_parse+0x19df>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x2c,%esp
mov    0x40(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8053870 <argp_parse+0x4870>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x44(%esp),%eax
movl   $0x0,0x1c(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052af0 <argp_parse+0x3af0>
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x2c,%esp
mov    0x40(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x1,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8053870 <argp_parse+0x4870>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x44(%esp),%eax
movl   $0x0,0x1c(%esp)
movl   $0x1,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052af0 <argp_parse+0x3af0>
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x6,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <argp_parse+0x2b60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8051b60 <argp_parse+0x2b60>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049090 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     80514c8 <argp_parse+0x24c8>
mov    0x94(%esp),%eax
jmp    *0x8054ca0(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     80512d0 <argp_parse+0x22d0>
test   %al,%al
je     80512e3 <argp_parse+0x22e3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     80512b8 <argp_parse+0x22b8>
cmpb   $0x0,0x58(%esp)
je     80512b8 <argp_parse+0x22b8>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     80512b8 <argp_parse+0x22b8>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048ff0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    8051350 <argp_parse+0x2350>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     8051018 <argp_parse+0x2018>
movzbl %bl,%eax
jmp    *0x8054cc4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     8050e58 <argp_parse+0x1e58>
cmpl   $0x3,0x94(%esp)
jne    8050db8 <argp_parse+0x1db8>
testb  $0x4,0x98(%esp)
je     8050db8 <argp_parse+0x1db8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8050db8 <argp_parse+0x1db8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8050db8 <argp_parse+0x1db8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8050db8 <argp_parse+0x1db8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8050db8 <argp_parse+0x1db8>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmp    %edi,%ebp
jae    8050d7e <argp_parse+0x1d7e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8050d8e <argp_parse+0x1d8e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8050d9e <argp_parse+0x1d9e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    8050dae <argp_parse+0x1dae>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8050dc6 <argp_parse+0x1dc6>
cmpb   $0x0,0x5a(%esp)
jne    8050deb <argp_parse+0x1deb>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8050deb <argp_parse+0x1deb>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8050df2 <argp_parse+0x1df2>
cmpb   $0x0,0x24(%esp)
je     8050e08 <argp_parse+0x1e08>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmp    %edi,%ebp
jae    8050e05 <argp_parse+0x1e05>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    8050e16 <argp_parse+0x1e16>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    8050c58 <argp_parse+0x1c58>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     80514b8 <argp_parse+0x24b8>
test   %al,%al
jne    8050db8 <argp_parse+0x1db8>
test   %esi,%esi
jne    8050db8 <argp_parse+0x1db8>
cmpl   $0x2,0x94(%esp)
jne    8050db8 <argp_parse+0x1db8>
nop
cmpb   $0x0,0x2f(%esp)
je     8050db8 <argp_parse+0x1db8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8050ba0 <argp_parse+0x1ba0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    80515dd <argp_parse+0x25dd>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     805152b <argp_parse+0x252b>
cmpb   $0x0,0x58(%esp)
je     8050db8 <argp_parse+0x1db8>
mov    %eax,%ebx
jmp    8050df2 <argp_parse+0x1df2>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8050ee3 <argp_parse+0x1ee3>
nop
mov    $0x66,%eax
jmp    8050ee3 <argp_parse+0x1ee3>
nop
mov    $0x76,%eax
jmp    8050ee3 <argp_parse+0x1ee3>
nop
mov    $0x6e,%eax
jmp    8050ed5 <argp_parse+0x1ed5>
nop
mov    $0x74,%eax
jmp    8050ed5 <argp_parse+0x1ed5>
nop
cmpb   $0x0,0x58(%esp)
je     80514a0 <argp_parse+0x24a0>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmp    %edi,%ebp
jae    8050f42 <argp_parse+0x1f42>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8050f88 <argp_parse+0x1f88>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8050f88 <argp_parse+0x1f88>
cmp    %eax,%edi
ja     8051540 <argp_parse+0x2540>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8050f7e <argp_parse+0x1f7e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8050dc6 <argp_parse+0x1dc6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8050ee3 <argp_parse+0x1ee3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     8050fbe <argp_parse+0x1fbe>
cmpb   $0x0,0x2f(%esp)
je     8050fbe <argp_parse+0x1fbe>
test   %dl,%dl
jne    8050e08 <argp_parse+0x1e08>
mov    %ebx,%eax
jmp    8050ed5 <argp_parse+0x1ed5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8050db8 <argp_parse+0x1db8>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmp    %edi,%ebp
jae    8050fed <argp_parse+0x1fed>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8050ffd <argp_parse+0x1ffd>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    805100d <argp_parse+0x200d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8050db8 <argp_parse+0x1db8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    8051360 <argp_parse+0x2360>
call   8049390 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8050db8 <argp_parse+0x1db8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    80510c4 <argp_parse+0x20c4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmp    %edi,%ebp
jae    8051073 <argp_parse+0x2073>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    8051086 <argp_parse+0x2086>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    805109c <argp_parse+0x209c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    8050e0b <argp_parse+0x1e0b>
cmp    %edi,%ebp
jae    80510b9 <argp_parse+0x20b9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    8051060 <argp_parse+0x2060>
cmpb   $0x0,0x24(%esp)
je     80510a5 <argp_parse+0x20a5>
cmp    %edi,%ebp
jae    80510d7 <argp_parse+0x20d7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    80510a5 <argp_parse+0x20a5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    80515fe <argp_parse+0x25fe>
test   %edi,%edi
je     80514ed <argp_parse+0x24ed>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8054c6d,0x3c(%esp)
movb   $0x22,(%eax)
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8054c6d,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi,%eiz,1),%esi
je     80511fb <argp_parse+0x21fb>
movl   $0x5,0x8(%esp)
movl   $0x8054c6f,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
cmpl   $0x7,0x94(%esp)
sete   %bl
cmp    $0x8054c6f,%eax
mov    %eax,%edx
mov    %eax,0x48(%esp)
jne    80511c4 <argp_parse+0x21c4>
test   %bl,%bl
mov    $0x8054c6d,%eax
cmove  %edx,%eax
mov    %eax,0x48(%esp)
movl   $0x5,0x8(%esp)
movl   $0x8054c6b,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
cmp    $0x8054c6b,%eax
mov    %eax,%edx
mov    %eax,0x44(%esp)
jne    80511fb <argp_parse+0x21fb>
test   %bl,%bl
mov    $0x8054c6d,%eax
cmove  %edx,%eax
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    805122a <argp_parse+0x222a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     805122a <argp_parse+0x222a>
mov    0x30(%esp),%ecx
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    805121f <argp_parse+0x221f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8051218 <argp_parse+0x2218>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    8050c38 <argp_parse+0x1c38>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8054c6b,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    80515e2 <argp_parse+0x25e2>
test   %edi,%edi
je     805150c <argp_parse+0x250c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8054c6b,0x3c(%esp)
movb   $0x27,(%eax)
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8050cf0 <argp_parse+0x1cf0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8050c78 <argp_parse+0x1c78>
test   %ebp,%ebp
jne    80512fc <argp_parse+0x22fc>
cmpl   $0x2,0x94(%esp)
jne    80512fc <argp_parse+0x22fc>
cmpb   $0x0,0x2f(%esp)
jne    8050e68 <argp_parse+0x1e68>
cmpb   $0x0,0x2f(%esp)
jne    8051332 <argp_parse+0x2332>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8051332 <argp_parse+0x2332>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8051332 <argp_parse+0x2332>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    8051327 <argp_parse+0x2327>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8051320 <argp_parse+0x2320>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8050eb2 <argp_parse+0x1eb2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8050eb2 <argp_parse+0x1eb2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8050cf0 <argp_parse+0x1cf0>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     80514cd <argp_parse+0x24cd>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     805154d <argp_parse+0x254d>
cmp    $0xffffffff,%eax
je     80515c2 <argp_parse+0x25c2>
cmp    $0xfffffffe,%eax
je     8051568 <argp_parse+0x2568>
cmpb   $0x0,0x2f(%esp)
je     805142f <argp_parse+0x242f>
cmpl   $0x2,0x94(%esp)
jne    805142f <argp_parse+0x242f>
cmp    $0x1,%eax
je     805142f <argp_parse+0x242f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     8051428 <argp_parse+0x2428>
movzbl %al,%eax
jmp    *0x8054ec0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    8051410 <argp_parse+0x2410>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049050 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048fd0 <mbsinit@plt>
test   %eax,%eax
je     80513a1 <argp_parse+0x23a1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    8051043 <argp_parse+0x2043>
and    0x58(%esp),%dl
jmp    805104d <argp_parse+0x204d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8050e68 <argp_parse+0x1e68>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8050db8 <argp_parse+0x1db8>
add    $0x1,%esi
jmp    8050c58 <argp_parse+0x1c58>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    8050e39 <argp_parse+0x1e39>
call   8049310 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049150 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    805137e <argp_parse+0x237e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8054c6d,0x3c(%esp)
jmp    8050c38 <argp_parse+0x1c38>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8054c6b,0x3c(%esp)
jmp    8050c38 <argp_parse+0x1c38>
cmpb   $0x0,0x2f(%esp)
je     8050ee3 <argp_parse+0x1ee3>
jmp    8050e68 <argp_parse+0x1e68>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    8050f6e <argp_parse+0x1f6e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8051475 <argp_parse+0x2475>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    80515b8 <argp_parse+0x25b8>
cmpb   $0x0,(%eax)
je     80515b8 <argp_parse+0x25b8>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    80515a6 <argp_parse+0x25a6>
cmpb   $0x0,(%ecx,%eax,1)
je     80515b0 <argp_parse+0x25b0>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     80515a0 <argp_parse+0x25a0>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    8051475 <argp_parse+0x2475>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8051475 <argp_parse+0x2475>
call   8049020 <__stack_chk_fail@plt>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8054c6b,0x3c(%esp)
jmp    8050c38 <argp_parse+0x1c38>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8054c6d,0x3c(%esp)
jmp    8050c38 <argp_parse+0x1c38>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   80491d0 <__errno_location@plt>
test   %edi,%edi
mov    0x805930c,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     80517ac <argp_parse+0x27ac>
cmp    0x8059318,%edi
jb     80516b8 <argp_parse+0x26b8>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     80517b1 <argp_parse+0x27b1>
cmp    $0x8059310,%esi
lea    0x0(,%ebp,8),%eax
je     8051780 <argp_parse+0x2780>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8052140 <argp_parse+0x3140>
mov    %eax,%esi
mov    %eax,0x805930c
mov    0x8059318,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   80491a0 <memset@plt>
mov    %ebp,0x8059318
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8050ba0 <argp_parse+0x1ba0>
cmp    %eax,%ebp
ja     8051767 <argp_parse+0x2767>
lea    0x1(%eax),%ebp
cmp    $0x80593c0,%esi
mov    %ebp,(%edi)
je     8051722 <argp_parse+0x2722>
mov    %esi,(%esp)
call   8048fb0 <free@plt>
mov    %ebp,(%esp)
call   8052110 <argp_parse+0x3110>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8050ba0 <argp_parse+0x1ba0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8052140 <argp_parse+0x3140>
mov    0x8059314,%edx
mov    %eax,%esi
mov    %eax,0x805930c
mov    0x8059310,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    805168f <argp_parse+0x268f>
call   8049310 <abort@plt>
call   80529c0 <argp_parse+0x39c0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   80491d0 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x80594c0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   8052220 <argp_parse+0x3220>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x80594c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    8051820 <argp_parse+0x2820>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x80594c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x80594c0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x80594c0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x80594c0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     80518d3 <argp_parse+0x28d3>
test   %ecx,%ecx
je     80518d3 <argp_parse+0x28d3>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049310 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x80594c0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80491d0 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8050ba0 <argp_parse+0x1ba0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x80594c0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80491d0 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   8050ba0 <argp_parse+0x1ba0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   8052110 <argp_parse+0x3110>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   8050ba0 <argp_parse+0x1ba0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     8051a08 <argp_parse+0x2a08>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051940 <argp_parse+0x2940>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x8059318,%edi
mov    0x805930c,%esi
cmp    $0x1,%edi
jbe    8051a83 <argp_parse+0x2a83>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048fb0 <free@plt>
cmp    %edi,%ebx
jne    8051a70 <argp_parse+0x2a70>
mov    0x4(%esi),%eax
cmp    $0x80593c0,%eax
je     8051aa9 <argp_parse+0x2aa9>
mov    %eax,(%esp)
call   8048fb0 <free@plt>
movl   $0x100,0x8059310
00
movl   $0x80593c0,0x8059314
08
cmp    $0x8059310,%esi
je     8051ac3 <argp_parse+0x2ac3>
mov    %esi,(%esp)
call   8048fb0 <free@plt>
movl   $0x8059310,0x805930c
08
movl   $0x1,0x8059318
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x80594c0,0x4(%esp)
jmp    8051620 <argp_parse+0x2620>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x80594c0,0x4(%esp)
jmp    8051620 <argp_parse+0x2620>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x80594c0,0x4(%esp)
jmp    8051620 <argp_parse+0x2620>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x80594c0,0x4(%esp)
jmp    8051620 <argp_parse+0x2620>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x7c,%esp
mov    0x84(%esp),%eax
movl   $0x0,0x44(%esp)
mov    %eax,0x40(%esp)
xor    %eax,%eax
movl   $0x0,0x48(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     8051b78 <argp_parse+0x2b78>
mov    0x40(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x88(%esp),%edx
mov    %eax,0x10(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x24(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x28(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x30(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x34(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x38(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0x10(%esp),%eax
mov    %eax,(%esp)
mov    0x80(%esp),%eax
call   8051620 <argp_parse+0x2620>
add    $0x7c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x7c,%esp
mov    0x84(%esp),%eax
movl   $0x0,0x44(%esp)
mov    %eax,0x40(%esp)
xor    %eax,%eax
movl   $0x0,0x48(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     8051c28 <argp_parse+0x2c28>
mov    0x40(%esp),%eax
mov    0x8c(%esp),%ecx
mov    0x88(%esp),%edx
mov    %eax,0x10(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x24(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x28(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x30(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x34(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x38(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0x10(%esp),%eax
mov    %eax,(%esp)
mov    0x80(%esp),%eax
call   8051620 <argp_parse+0x2620>
add    $0x7c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   8051b60 <argp_parse+0x2b60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   8051c10 <argp_parse+0x2c10>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x80594c0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x80594c4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x80594c8,%eax
mov    %eax,0x18(%esp)
mov    0x80594cc,%eax
mov    %eax,0x1c(%esp)
mov    0x80594d0,%eax
mov    %eax,0x20(%esp)
mov    0x80594d4,%eax
mov    %eax,0x24(%esp)
mov    0x80594d8,%eax
mov    %eax,0x28(%esp)
mov    0x80594dc,%eax
mov    %eax,0x2c(%esp)
mov    0x80594e0,%eax
mov    %eax,0x30(%esp)
mov    0x80594e4,%eax
mov    %eax,0x34(%esp)
mov    0x80594e8,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x80594ec,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   8051620 <argp_parse+0x2620>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051d20 <argp_parse+0x2d20>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   8051d20 <argp_parse+0x2d20>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051d20 <argp_parse+0x2d20>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x80594c0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x80594c4,%eax
mov    %eax,0x14(%esp)
mov    0x80594c8,%eax
mov    %eax,0x18(%esp)
mov    0x80594cc,%eax
mov    %eax,0x1c(%esp)
mov    0x80594d0,%eax
mov    %eax,0x20(%esp)
mov    0x80594d4,%eax
mov    %eax,0x24(%esp)
mov    0x80594d8,%eax
mov    %eax,0x28(%esp)
mov    0x80594dc,%eax
mov    %eax,0x2c(%esp)
mov    0x80594e0,%eax
mov    %eax,0x30(%esp)
mov    0x80594e4,%eax
mov    %eax,0x34(%esp)
mov    0x80594e8,%eax
mov    %eax,0x38(%esp)
mov    0x80594ec,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   80518a0 <argp_parse+0x28a0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   8051620 <argp_parse+0x2620>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8051e60 <argp_parse+0x2e60>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   8051e60 <argp_parse+0x2e60>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   8051e60 <argp_parse+0x2e60>
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    0x38(%esp),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8048f80 <read@plt>
test   %eax,%eax
mov    %eax,%ebp
jns    8052020 <argp_parse+0x3020>
call   80491d0 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x4,%edx
je     8051fe8 <argp_parse+0x2fe8>
cmp    $0x16,%edx
jne    8052020 <argp_parse+0x3020>
cmp    $0x7fffe000,%ebx
jbe    8052020 <argp_parse+0x3020>
mov    $0x7fffe000,%ebx
jmp    8051fe8 <argp_parse+0x2fe8>
xchg   %ax,%ax
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    0x38(%esp),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8049170 <write@plt>
test   %eax,%eax
mov    %eax,%ebp
jns    8052080 <argp_parse+0x3080>
call   80491d0 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x4,%edx
je     8052048 <argp_parse+0x3048>
cmp    $0x16,%edx
jne    8052080 <argp_parse+0x3080>
cmp    $0x7fffe000,%ebx
jbe    8052080 <argp_parse+0x3080>
mov    $0x7fffe000,%ebx
jmp    8052048 <argp_parse+0x3048>
xchg   %ax,%ax
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8053a80 <argp_parse+0x4a80>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8053950 <argp_parse+0x4950>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    80520b0 <argp_parse+0x30b0>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80490e0 <malloc@plt>
test   %eax,%eax
je     8052129 <argp_parse+0x3129>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     8052124 <argp_parse+0x3124>
lea    0x0(%esi),%esi
call   80529c0 <argp_parse+0x39c0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <realloc@plt>
test   %eax,%eax
je     8052161 <argp_parse+0x3161>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     805215c <argp_parse+0x315c>
call   80529c0 <argp_parse+0x39c0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     80521a8 <argp_parse+0x31a8>
cmp    $0xaaaaaaa9,%eax
ja     80521b4 <argp_parse+0x31b4>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    8052140 <argp_parse+0x3140>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    8052190 <argp_parse+0x3190>
call   80529c0 <argp_parse+0x39c0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8052110 <argp_parse+0x3110>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80491a0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80493a0 <calloc@plt>
test   %eax,%eax
je     805220f <argp_parse+0x320f>
add    $0x1c,%esp
ret
nop
call   80529c0 <argp_parse+0x39c0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   8052110 <argp_parse+0x3110>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   8052220 <argp_parse+0x3220>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
movl   $0x24,(%esp)
call   80490e0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     80522dd <argp_parse+0x32dd>
mov    0x20(%esp),%eax
movl   $0x0,0x14(%ebx)
movl   $0x0,0x10(%ebx)
mov    %eax,(%ebx)
mov    0x24(%esp),%eax
mov    %eax,0x4(%ebx)
mov    0x28(%esp),%eax
mov    %eax,0x8(%ebx)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%ebx)
movl   $0xc8,(%esp)
call   80490e0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%ebx)
je     80522e4 <argp_parse+0x32e4>
mov    %eax,0x1c(%ebx)
add    $0xc8,%eax
mov    %eax,0x20(%ebx)
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
mov    %ebx,(%esp)
xor    %ebx,%ebx
call   8048fb0 <free@plt>
jmp    80522dd <argp_parse+0x32dd>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%ebp
mov    0x1c(%ebp),%eax
mov    0x18(%ebp),%esi
add    0x10(%ebp),%esi
mov    %eax,0x10(%esp)
cmp    0x10(%esp),%esi
jae    80523c6 <argp_parse+0x33c6>
lea    0x0(%esi),%esi
mov    0x14(%ebp),%ebx
test   %ebx,%ebx
jne    8052369 <argp_parse+0x3369>
mov    0x4(%ebp),%ebx
mov    0x10(%esp),%eax
test   %ebx,%ebx
je     80525c8 <argp_parse+0x35c8>
add    %ebx,%eax
xor    %edi,%edi
cmp    %eax,0x20(%ebp)
ja     8052708 <argp_parse+0x3708>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    80527d6 <argp_parse+0x37d6>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0x20,(%edx)
add    $0x1,%edi
cmp    %ebx,%edi
jne    8052340 <argp_parse+0x3340>
mov    0x1c(%ebp),%eax
mov    %ebx,0x14(%ebp)
mov    %eax,0x10(%esp)
mov    0x10(%esp),%eax
movl   $0xa,0x4(%esp)
mov    %esi,(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
mov    %eax,0x14(%esp)
call   80491e0 <memchr@plt>
test   %ebx,%ebx
mov    %eax,%ecx
jns    8052396 <argp_parse+0x3396>
movl   $0x0,0x14(%ebp)
xor    %ebx,%ebx
test   %ecx,%ecx
je     80525ee <argp_parse+0x35ee>
mov    0x8(%ebp),%edi
mov    %ecx,%eax
sub    %esi,%eax
add    %ebx,%eax
cmp    %edi,%eax
jge    80523d8 <argp_parse+0x33d8>
lea    0x1(%ecx),%esi
mov    0x1c(%ebp),%ecx
movl   $0x0,0x14(%ebp)
mov    %ecx,0x10(%esp)
cmp    0x10(%esp),%esi
jb     8052318 <argp_parse+0x3318>
mov    0x10(%esp),%eax
sub    0x18(%ebp),%eax
mov    %eax,0x10(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xc(%ebp),%eax
lea    -0x1(%edi),%edx
test   %eax,%eax
mov    %eax,0x18(%esp)
js     8052698 <argp_parse+0x3698>
lea    0x1(%edx),%edi
sub    %ebx,%edi
add    %esi,%edi
jb     8052620 <argp_parse+0x3620>
mov    %ecx,0x1c(%esp)
call   8049390 <__ctype_b_loc@plt>
mov    %edi,%edx
mov    0x1c(%esp),%ecx
mov    (%eax),%eax
jmp    805241b <argp_parse+0x341b>
lea    0x0(%esi),%esi
sub    $0x1,%edx
cmp    %esi,%edx
jb     8052628 <argp_parse+0x3628>
movzbl (%edx),%ebx
testb  $0x1,(%eax,%ebx,2)
je     8052410 <argp_parse+0x3410>
lea    0x1(%edx),%ebx
cmp    %esi,%ebx
jbe    8052638 <argp_parse+0x3638>
cmp    %edx,%esi
mov    %ebx,%edi
jbe    8052529 <argp_parse+0x3529>
mov    0x14(%esp),%eax
lea    0x1(%esi,%eax,1),%eax
cmp    %ebx,%eax
je     8052543 <argp_parse+0x3543>
lea    0x1(%edi),%edx
mov    %ebx,%eax
sub    %edx,%eax
cmp    0x18(%esp),%eax
jge    8052559 <argp_parse+0x3559>
cmp    0x10(%esp),%ebx
jae    8052552 <argp_parse+0x3552>
mov    0x18(%esp),%edx
mov    0x20(%ebp),%eax
sub    0x10(%esp),%eax
add    $0x1,%edx
cmp    %edx,%eax
jg     8052755 <argp_parse+0x3755>
mov    0x18(%ebp),%eax
cmp    %eax,%edi
jbe    805249e <argp_parse+0x349e>
mov    0x0(%ebp),%edx
sub    %eax,%edi
mov    %edi,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0xc(%esp)
call   8049230 <fwrite_unlocked@plt>
mov    0x0(%ebp),%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    80527eb <argp_parse+0x37eb>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
mov    0x18(%ebp),%eax
mov    %eax,%ecx
sub    %eax,%esi
mov    %eax,0x18(%esp)
mov    %eax,0x10(%esp)
mov    %ebx,%eax
add    %esi,0x14(%esp)
sub    %ecx,%eax
mov    %ecx,%esi
mov    0xc(%ebp),%edx
cmp    %eax,%edx
jg     8052571 <argp_parse+0x3571>
test   %edx,%edx
mov    %esi,%eax
jle    80524f2 <argp_parse+0x34f2>
add    $0x1,%eax
mov    %eax,%edx
movb   $0x20,-0x1(%eax)
sub    %esi,%edx
cmp    %edx,0xc(%ebp)
jg     80524e0 <argp_parse+0x34e0>
mov    %eax,%esi
cmp    %ebx,%esi
jb     80526e8 <argp_parse+0x36e8>
mov    0x10(%esp),%ecx
mov    $0xffffffff,%edi
mov    0xc(%ebp),%eax
sub    %ebx,%ecx
add    0x14(%esp),%ecx
add    %esi,%ecx
test   %eax,%eax
cmove  %edi,%eax
mov    %ecx,0x1c(%ebp)
mov    %eax,0x14(%ebp)
jmp    80523b8 <argp_parse+0x33b8>
xchg   %ax,%ax
movzbl (%edx),%ecx
testb  $0x1,(%eax,%ecx,2)
je     8052530 <argp_parse+0x3530>
sub    $0x1,%edx
cmp    %esi,%edx
jae    8052520 <argp_parse+0x3520>
mov    0x14(%esp),%eax
lea    0x1(%edx),%edi
lea    0x1(%esi,%eax,1),%eax
cmp    %ebx,%eax
jne    8052449 <argp_parse+0x3449>
mov    0x20(%ebp),%eax
sub    %edi,%eax
cmp    0x18(%esp),%eax
jle    805245a <argp_parse+0x345a>
lea    0x1(%edi),%edx
mov    %ebx,%eax
sub    %edx,%eax
movb   $0xa,(%edi)
mov    %esi,0x10(%esp)
mov    %esi,0x18(%esp)
mov    %edx,%esi
mov    0xc(%ebp),%edx
cmp    %eax,%edx
jle    80524da <argp_parse+0x34da>
mov    0x18(%esp),%eax
mov    0x14(%esp),%ecx
lea    0x1(%eax,%ecx,1),%eax
cmp    %eax,%ebx
je     805273f <argp_parse+0x373f>
xor    %edi,%edi
test   %edx,%edx
jg     80525a5 <argp_parse+0x35a5>
jmp    80524f2 <argp_parse+0x34f2>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0x20,(%edx)
add    $0x1,%edi
cmp    %edi,0xc(%ebp)
jle    80524f2 <argp_parse+0x34f2>
mov    0x0(%ebp),%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jb     8052590 <argp_parse+0x3590>
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   80492a0 <__overflow@plt>
jmp    8052599 <argp_parse+0x3599>
lea    0x0(%esi),%esi
sub    %esi,%eax
xor    %ebx,%ebx
mov    %eax,0x8(%esp)
movl   $0xa,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x14(%esp)
call   80491e0 <memchr@plt>
mov    %eax,%ecx
test   %ecx,%ecx
jne    805239e <argp_parse+0x339e>
mov    0x14(%esp),%eax
mov    0x8(%ebp),%edx
add    %ebx,%eax
cmp    %edx,%eax
jb     80527c2 <argp_parse+0x37c2>
mov    0xc(%ebp),%edi
sub    $0x1,%edx
test   %edi,%edi
mov    %edi,0x18(%esp)
js     80527a6 <argp_parse+0x37a6>
mov    0x10(%esp),%ecx
jmp    80523ea <argp_parse+0x33ea>
lea    0x0(%esi),%esi
mov    %edi,%edx
lea    0x0(%esi),%esi
lea    0x1(%edx),%ebx
cmp    %esi,%ebx
ja     8052800 <argp_parse+0x3800>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,%edi
jae    8052670 <argp_parse+0x3670>
mov    %ecx,%ebx
jmp    8052650 <argp_parse+0x3650>
call   8049390 <__ctype_b_loc@plt>
movzbl (%edi),%edx
mov    (%eax),%eax
testb  $0x1,(%eax,%edx,2)
jne    8052672 <argp_parse+0x3672>
add    $0x1,%edi
cmp    %ebx,%edi
jne    8052640 <argp_parse+0x3640>
movl   $0x0,0x14(%ebp)
lea    0x1(%edi),%esi
mov    0x1c(%ebp),%ecx
jmp    80523b8 <argp_parse+0x33b8>
lea    0x0(%esi,%eiz,1),%esi
je     8052657 <argp_parse+0x3657>
call   8049390 <__ctype_b_loc@plt>
mov    %edi,%ebx
mov    (%eax),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
movzbl (%ebx),%eax
testb  $0x1,(%edx,%eax,2)
jne    8052680 <argp_parse+0x3680>
jmp    8052439 <argp_parse+0x3439>
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%esp),%eax
cmp    %ecx,%eax
jbe    80527a0 <argp_parse+0x37a0>
sub    %ecx,%eax
mov    %eax,0x8(%esp)
mov    %edx,%eax
sub    %ebx,%eax
add    %esi,%eax
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
call   8048fa0 <memmove@plt>
mov    0x10(%esp),%edx
sub    0x14(%ebp),%edx
mov    0x14(%esp),%ecx
add    0x1c(%ebp),%ecx
add    %esi,%edx
add    %edi,%esi
movl   $0x0,0x14(%ebp)
sub    %edx,%ecx
mov    %ecx,0x1c(%ebp)
jmp    80523b8 <argp_parse+0x33b8>
nop
mov    0x18(%esp),%eax
add    0x14(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
sub    %ebx,%eax
mov    %eax,0x8(%esp)
call   8048fa0 <memmove@plt>
jmp    80524fa <argp_parse+0x34fa>
nop
mov    0x10(%esp),%ecx
lea    (%esi,%ebx,1),%edi
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
sub    %esi,%ecx
mov    %ecx,0x8(%esp)
call   8048fa0 <memmove@plt>
add    %ebx,0x1c(%ebp)
mov    %esi,(%esp)
mov    %edi,%esi
mov    %ebx,0x8(%esp)
movl   $0x20,0x4(%esp)
call   80491a0 <memset@plt>
jmp    805235f <argp_parse+0x335f>
mov    0x20(%ebp),%eax
sub    %ebx,%eax
cmp    %eax,%edx
jle    80524da <argp_parse+0x34da>
lea    0x0(%esi,%eiz,1),%esi
jmp    8052585 <argp_parse+0x3585>
mov    0x10(%esp),%ecx
add    %edi,%edx
mov    %ebx,0x4(%esp)
mov    %edx,(%esp)
sub    %ebx,%ecx
mov    %ecx,0x8(%esp)
mov    %ecx,0x10(%esp)
call   8048fa0 <memmove@plt>
mov    0xc(%ebp),%eax
lea    0x1(%edi),%edx
mov    0x10(%esp),%ecx
mov    %esi,0x18(%esp)
mov    %esi,0x10(%esp)
lea    0x1(%edi,%eax,1),%ebx
lea    (%ebx,%ecx,1),%eax
mov    %eax,0x14(%esp)
mov    %ebx,%eax
sub    %esi,0x14(%esp)
sub    %edx,%eax
mov    %edx,%esi
movb   $0xa,(%edi)
jmp    80524cf <argp_parse+0x34cf>
mov    0x14(%esp),%eax
add    %ebx,%eax
mov    %eax,0x14(%ebp)
sub    %eax,%edx
mov    0x10(%esp),%eax
add    %edx,%eax
mov    %eax,0x1c(%ebp)
sub    0x18(%ebp),%eax
mov    %eax,0x10(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x14(%ebp)
mov    0x1c(%ebp),%eax
sub    0x18(%ebp),%eax
mov    %eax,0x10(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   80492a0 <__overflow@plt>
jmp    8052358 <argp_parse+0x3358>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   80492a0 <__overflow@plt>
jmp    80524b6 <argp_parse+0x34b6>
mov    %ebx,%edi
jmp    8052439 <argp_parse+0x3439>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    0x1c(%ebx),%edx
mov    0x18(%ebx),%eax
cmp    %eax,%edx
jbe    8052849 <argp_parse+0x3849>
mov    (%ebx),%ecx
sub    %eax,%edx
mov    %edx,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0xc(%esp)
call   8049230 <fwrite_unlocked@plt>
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8048fb0 <free@plt>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fb0 <free@plt>
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    0x24(%esp),%esi
mov    0x20(%ebx),%eax
sub    0x1c(%ebx),%eax
cmp    %esi,%eax
jb     8052888 <argp_parse+0x3888>
mov    $0x1,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   80522f0 <argp_parse+0x32f0>
mov    (%ebx),%eax
mov    0x18(%ebx),%edx
mov    %eax,0xc(%esp)
mov    0x1c(%ebx),%eax
mov    %edx,(%esp)
movl   $0x1,0x4(%esp)
sub    %edx,%eax
mov    %eax,0x8(%esp)
call   8049230 <fwrite_unlocked@plt>
mov    0x1c(%ebx),%ecx
mov    0x18(%ebx),%edx
mov    %ecx,%edi
sub    %edx,%edi
cmp    %edi,%eax
jne    80528e8 <argp_parse+0x38e8>
mov    0x20(%ebx),%eax
mov    %edx,0x1c(%ebx)
movl   $0x0,0x10(%ebx)
sub    %edx,%eax
cmp    %eax,%esi
jbe    8052878 <argp_parse+0x3878>
add    %eax,%esi
jae    8052910 <argp_parse+0x3910>
call   80491d0 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    805287d <argp_parse+0x387d>
xchg   %ax,%ax
sub    %eax,0x10(%ebx)
sub    %eax,%ecx
add    %edx,%eax
mov    %ecx,0x1c(%ebx)
sub    %edx,%ecx
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   8048fa0 <memmove@plt>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %esi,0x4(%esp)
mov    %edx,(%esp)
call   80490d0 <realloc@plt>
test   %eax,%eax
je     80528d7 <argp_parse+0x38d7>
add    %eax,%esi
mov    %eax,0x18(%ebx)
mov    %esi,0x20(%ebx)
mov    %eax,0x1c(%ebx)
jmp    8052878 <argp_parse+0x3878>
push   %ebp
mov    $0x96,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
lea    0x48(%esp),%edi
mov    %eax,0x4(%esp)
mov    0x44(%esp),%ebp
mov    %esi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
je     805299b <argp_parse+0x399b>
mov    0x1c(%esi),%eax
mov    0x20(%esi),%ebx
mov    %edi,0x14(%esp)
mov    %ebp,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
sub    %eax,%ebx
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049200 <__vsnprintf_chk@plt>
cmp    %eax,%ebx
ja     80529a8 <argp_parse+0x39a8>
add    $0x1,%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8052860 <argp_parse+0x3860>
test   %eax,%eax
jne    8052958 <argp_parse+0x3958>
add    $0x2c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    %eax,0x1c(%esi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x8054fa4,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x805931c,%edx
movl   $0x80542c3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   80490b0 <error@plt>
call   8049310 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%edx),%edi
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    0x24(%edx),%esi
mov    %edx,0x14(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x10(%esp)
mov    %eax,(%esp)
lea    0x0(%esi),%esi
cmp    %edi,%esi
jle    8052a7d <argp_parse+0x3a7d>
cmp    %esi,(%esp)
jle    8052a7d <argp_parse+0x3a7d>
mov    (%esp),%edx
mov    %esi,%ebp
sub    %edi,%ebp
sub    %esi,%edx
cmp    %ebp,%edx
jg     8052aa0 <argp_parse+0x3aa0>
test   %edx,%edx
jle    8052add <argp_parse+0x3add>
mov    0x4(%esp),%ebx
lea    (%ebx,%edi,4),%eax
add    %edx,%edi
lea    (%ebx,%edi,4),%edx
lea    0x0(%esi),%esi
mov    (%eax),%ecx
mov    (%eax,%ebp,4),%ebx
mov    %ebx,(%eax)
mov    %ecx,(%eax,%ebp,4)
add    $0x4,%eax
cmp    %edx,%eax
jne    8052a68 <argp_parse+0x3a68>
cmp    %edi,%esi
jg     8052a3c <argp_parse+0x3a3c>
mov    0x10(%esp),%edi
mov    %edi,%eax
sub    %esi,%eax
mov    0x14(%esp),%esi
add    0xc(%esp),%eax
mov    %edi,0x24(%esi)
mov    %eax,0x20(%esi)
add    $0x18,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
jle    8052ad5 <argp_parse+0x3ad5>
mov    0x4(%esp),%ebx
lea    0x0(%ebp,%edi,1),%edx
mov    %esi,0x8(%esp)
lea    (%ebx,%edi,4),%eax
lea    (%ebx,%edx,4),%ebx
mov    (%esp),%edx
sub    %esi,%edx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%ecx
mov    (%eax,%edx,4),%esi
mov    %esi,(%eax)
mov    %ecx,(%eax,%edx,4)
add    $0x4,%eax
cmp    %ebx,%eax
jne    8052ac0 <argp_parse+0x3ac0>
mov    0x8(%esp),%esi
sub    %ebp,(%esp)
jmp    8052a38 <argp_parse+0x3a38>
add    %edx,%edi
jmp    8052a38 <argp_parse+0x3a38>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x88(%esp),%ebp
mov    0x4(%ebp),%eax
mov    %eax,%ecx
mov    0x78(%esp),%eax
cmpb   $0x3a,(%eax)
mov    $0x0,%eax
cmovne %ecx,%eax
mov    0x70(%esp),%ecx
mov    %eax,0x30(%esp)
test   %ecx,%ecx
jle    8052d38 <argp_parse+0x3d38>
mov    0x0(%ebp),%eax
movl   $0x0,0xc(%ebp)
test   %eax,%eax
je     8052ca0 <argp_parse+0x3ca0>
mov    0x10(%ebp),%edx
test   %edx,%edx
jne    8052b85 <argp_parse+0x3b85>
mov    0x8c(%esp),%edi
mov    %eax,0x24(%ebp)
mov    %eax,0x20(%ebp)
mov    $0x1,%eax
movl   $0x0,0x14(%ebp)
test   %edi,%edi
je     8052d68 <argp_parse+0x3d68>
mov    0x78(%esp),%ecx
mov    %eax,0x1c(%ebp)
movzbl (%ecx),%edx
cmp    $0x2d,%dl
je     8052d8f <argp_parse+0x3d8f>
cmp    $0x2b,%dl
je     8053068 <argp_parse+0x4068>
xor    $0x1,%eax
mov    %eax,0x18(%ebp)
movl   $0x1,0x10(%ebp)
mov    0x14(%ebp),%eax
test   %eax,%eax
je     8052cb8 <argp_parse+0x3cb8>
cmpb   $0x0,(%eax)
je     8052cb8 <argp_parse+0x3cb8>
mov    %eax,0x24(%esp)
mov    0x7c(%esp),%edx
test   %edx,%edx
je     8052c08 <argp_parse+0x3c08>
mov    0x0(%ebp),%eax
lea    0x0(,%eax,4),%ecx
mov    %ecx,0x48(%esp)
mov    0x74(%esp),%ecx
mov    %eax,0x34(%esp)
mov    (%ecx,%eax,4),%eax
mov    %eax,0x38(%esp)
movzbl 0x1(%eax),%eax
cmp    $0x2d,%al
mov    %al,0x3c(%esp)
je     8052e30 <argp_parse+0x3e30>
mov    0x84(%esp),%eax
test   %eax,%eax
je     8052c08 <argp_parse+0x3c08>
mov    0x38(%esp),%eax
cmpb   $0x0,0x2(%eax)
jne    8052e30 <argp_parse+0x3e30>
movsbl 0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x78(%esp),%eax
mov    %eax,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
je     8052e30 <argp_parse+0x3e30>
mov    0x24(%esp),%eax
lea    0x1(%eax),%esi
mov    %esi,0x14(%ebp)
movzbl (%eax),%edi
mov    %edi,%eax
movsbl %al,%ebx
mov    0x78(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049140 <strchr@plt>
cmpb   $0x0,(%esi)
jne    8052c33 <argp_parse+0x3c33>
addl   $0x1,0x0(%ebp)
mov    %edi,%ecx
cmp    $0x3a,%cl
jne    8052dd0 <argp_parse+0x3dd0>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8052c89 <argp_parse+0x3c89>
mov    0x74(%esp),%eax
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x8054fe3,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    %ebx,0x8(%ebp)
add    $0x5c,%esp
mov    $0x3f,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x0(%ebp)
mov    $0x1,%eax
jmp    8052b3b <argp_parse+0x3b3b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%edx
cmp    %edx,0x24(%ebp)
jle    8052cc3 <argp_parse+0x3cc3>
mov    %edx,0x24(%ebp)
cmp    0x20(%ebp),%edx
jge    8052ccb <argp_parse+0x3ccb>
mov    %edx,0x20(%ebp)
cmpl   $0x1,0x18(%ebp)
je     8052ff0 <argp_parse+0x3ff0>
cmp    %edx,0x70(%esp)
je     8053050 <argp_parse+0x4050>
mov    0x74(%esp),%eax
mov    (%eax,%edx,4),%eax
cmpb   $0x2d,(%eax)
jne    8052d48 <argp_parse+0x3d48>
cmpb   $0x2d,0x1(%eax)
jne    8052da0 <argp_parse+0x3da0>
cmpb   $0x0,0x2(%eax)
jne    8052da0 <argp_parse+0x3da0>
mov    0x20(%ebp),%eax
add    $0x1,%edx
mov    0x24(%ebp),%ecx
mov    %edx,0x0(%ebp)
cmp    %ecx,%eax
je     80531c0 <argp_parse+0x41c0>
cmp    %ecx,%edx
je     8052d25 <argp_parse+0x3d25>
mov    0x74(%esp),%eax
mov    %ebp,%edx
call   8052a10 <argp_parse+0x3a10>
mov    0x20(%ebp),%eax
mov    0x70(%esp),%ecx
mov    %ecx,0x24(%ebp)
mov    %ecx,%edx
mov    %ecx,0x0(%ebp)
cmp    %eax,%edx
je     8052d38 <argp_parse+0x3d38>
mov    %eax,0x0(%ebp)
add    $0x5c,%esp
mov    $0xffffffff,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x18(%ebp),%esi
test   %esi,%esi
je     8052d38 <argp_parse+0x3d38>
add    $0x1,%edx
mov    $0x1,%ebx
mov    %edx,0x0(%ebp)
mov    %eax,0xc(%ebp)
add    $0x5c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
movl   $0x8054fb5,(%esp)
call   80490c0 <getenv@plt>
mov    0x78(%esp),%ecx
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,0x1c(%ebp)
movzbl (%ecx),%edx
cmp    $0x2d,%dl
jne    8052b6f <argp_parse+0x3b6f>
movl   $0x2,0x18(%ebp)
addl   $0x1,0x78(%esp)
jmp    8052b7e <argp_parse+0x3b7e>
movzbl 0x1(%eax),%ecx
test   %cl,%cl
je     8052d48 <argp_parse+0x3d48>
mov    0x7c(%esp),%ebx
test   %ebx,%ebx
je     80531a0 <argp_parse+0x41a0>
xor    %edx,%edx
cmp    $0x2d,%cl
sete   %dl
add    $0x1,%edx
add    %edx,%eax
mov    %eax,0x14(%ebp)
mov    %eax,0x24(%esp)
jmp    8052b9d <argp_parse+0x3b9d>
lea    0x0(%esi),%esi
test   %eax,%eax
je     8052c3e <argp_parse+0x3c3e>
cmpb   $0x57,(%eax)
movzbl 0x1(%eax),%edx
je     80531ca <argp_parse+0x41ca>
cmp    $0x3a,%dl
jne    8052d5d <argp_parse+0x3d5d>
cmpb   $0x3a,0x2(%eax)
je     8053387 <argp_parse+0x4387>
cmpb   $0x0,(%esi)
jne    80532c1 <argp_parse+0x42c1>
mov    0x0(%ebp),%eax
cmp    0x70(%esp),%eax
je     805351b <argp_parse+0x451b>
mov    0x74(%esp),%esi
lea    0x1(%eax),%edx
mov    %edx,0x0(%ebp)
mov    (%esi,%eax,4),%eax
mov    %eax,0xc(%ebp)
movl   $0x0,0x14(%ebp)
jmp    8052d5d <argp_parse+0x3d5d>
lea    0x0(%esi),%esi
mov    0x24(%esp),%esi
movzbl (%esi),%eax
test   %al,%al
mov    %al,0x4f(%esp)
je     80532b8 <argp_parse+0x42b8>
cmp    $0x3d,%al
jne    8052e54 <argp_parse+0x3e54>
jmp    80532b8 <argp_parse+0x42b8>
lea    0x0(%esi,%eiz,1),%esi
test   %al,%al
je     8052e5e <argp_parse+0x3e5e>
add    $0x1,%esi
movzbl (%esi),%eax
cmp    $0x3d,%al
jne    8052e50 <argp_parse+0x3e50>
mov    0x7c(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     80532cd <argp_parse+0x42cd>
mov    %esi,%eax
xor    %ecx,%ecx
mov    0x7c(%esp),%ebx
sub    0x24(%esp),%eax
mov    %esi,0x40(%esp)
mov    %ecx,%esi
mov    %ebp,0x88(%esp)
movl   $0xffffffff,0x44(%esp)
mov    %eax,%ebp
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
jmp    8052ed7 <argp_parse+0x3ed7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x84(%esp),%eax
test   %eax,%eax
jne    8052ec3 <argp_parse+0x3ec3>
mov    0x28(%esp),%eax
mov    0x4(%ebx),%ecx
cmp    %ecx,0x4(%eax)
je     8052fc8 <argp_parse+0x3fc8>
movl   $0x1,0x2c(%esp)
add    $0x10,%ebx
mov    (%ebx),%edi
add    $0x1,%esi
test   %edi,%edi
je     8052f20 <argp_parse+0x3f20>
mov    0x24(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    8052ecb <argp_parse+0x3ecb>
mov    %edi,(%esp)
call   8049150 <strlen@plt>
cmp    %ebp,%eax
je     8053148 <argp_parse+0x4148>
mov    0x28(%esp),%eax
test   %eax,%eax
jne    8052ea8 <argp_parse+0x3ea8>
mov    %ebx,0x28(%esp)
add    $0x10,%ebx
mov    (%ebx),%edi
mov    %esi,0x44(%esp)
add    $0x1,%esi
test   %edi,%edi
jne    8052ed7 <argp_parse+0x3ed7>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
mov    0x40(%esp),%esi
mov    0x88(%esp),%ebp
test   %eax,%eax
je     8053080 <argp_parse+0x4080>
mov    0x30(%esp),%eax
mov    0x24(%esp),%ebx
test   %eax,%eax
je     8052f94 <argp_parse+0x3f94>
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8054fc5,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x38(%esp),%esi
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x0(%ebp),%eax
mov    0x14(%ebp),%ebx
mov    %eax,0x34(%esp)
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
add    %eax,%ebx
mov    %ebx,0x14(%ebp)
mov    0x34(%esp),%eax
mov    $0x3f,%ebx
movl   $0x0,0x8(%ebp)
add    $0x1,%eax
mov    %eax,0x0(%ebp)
add    $0x5c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%ecx
cmp    %ecx,0x8(%eax)
jne    8052ec3 <argp_parse+0x3ec3>
mov    0xc(%ebx),%edi
cmp    %edi,0xc(%eax)
mov    $0x1,%eax
cmove  0x2c(%esp),%eax
mov    %eax,0x2c(%esp)
jmp    8052ecb <argp_parse+0x3ecb>
lea    0x0(%esi),%esi
mov    0x20(%ebp),%ecx
mov    0x24(%ebp),%eax
cmp    %eax,%ecx
je     80531b0 <argp_parse+0x41b0>
cmp    %eax,%edx
je     8053010 <argp_parse+0x4010>
mov    0x74(%esp),%eax
mov    %ebp,%edx
call   8052a10 <argp_parse+0x3a10>
mov    0x0(%ebp),%edx
cmp    %edx,0x70(%esp)
mov    %edx,%eax
jle    8053043 <argp_parse+0x4043>
mov    0x70(%esp),%ebx
mov    0x74(%esp),%ecx
jmp    8053032 <argp_parse+0x4032>
lea    0x0(%esi),%esi
add    $0x1,%eax
cmp    %ebx,%eax
mov    %eax,0x0(%ebp)
je     8053060 <argp_parse+0x4060>
mov    (%ecx,%eax,4),%edx
cmpb   $0x2d,(%edx)
jne    8053028 <argp_parse+0x4028>
cmpb   $0x0,0x1(%edx)
je     8053028 <argp_parse+0x4028>
mov    0x0(%ebp),%edx
mov    %eax,0x24(%ebp)
cmp    %edx,0x70(%esp)
jne    8052cdf <argp_parse+0x3cdf>
mov    0x24(%ebp),%edx
mov    0x20(%ebp),%eax
jmp    8052d31 <argp_parse+0x3d31>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edx
mov    %eax,0x24(%ebp)
jmp    8053046 <argp_parse+0x4046>
nop
movl   $0x0,0x18(%ebp)
addl   $0x1,0x78(%esp)
jmp    8052b7e <argp_parse+0x3b7e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%ebx
test   %ebx,%ebx
je     80532cd <argp_parse+0x42cd>
mov    0x44(%esp),%eax
mov    %eax,%edi
mov    0x34(%esp),%eax
add    $0x1,%eax
mov    %eax,0x0(%ebp)
cmpb   $0x0,(%esi)
je     805315a <argp_parse+0x415a>
mov    0x4(%ebx),%eax
test   %eax,%eax
jne    8053354 <argp_parse+0x4354>
mov    0x30(%esp),%ecx
mov    0x24(%esp),%esi
test   %ecx,%ecx
je     8053128 <argp_parse+0x4128>
mov    0x74(%esp),%eax
mov    0x48(%esp),%esi
mov    (%ebx),%edi
mov    (%eax,%esi,1),%eax
cmpb   $0x2d,0x1(%eax)
je     80534d0 <argp_parse+0x44d0>
movsbl (%eax),%edx
mov    0x74(%esp),%eax
mov    %edx,0x24(%esp)
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x8055030,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x24(%esp),%edx
mov    %esi,0xc(%esp)
mov    %edi,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%esi
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %eax,%esi
mov    0xc(%ebx),%eax
mov    $0x3f,%ebx
mov    %esi,0x14(%ebp)
mov    %eax,0x8(%ebp)
jmp    8052d5d <argp_parse+0x3d5d>
lea    0x0(%esi),%esi
mov    %esi,%edi
mov    0x88(%esp),%ebp
mov    0x40(%esp),%esi
jmp    8053092 <argp_parse+0x4092>
cmpl   $0x1,0x4(%ebx)
je     805335f <argp_parse+0x435f>
mov    0x24(%esp),%esi
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %esi,%eax
mov    %eax,0x14(%ebp)
mov    0x80(%esp),%eax
test   %eax,%eax
je     8053189 <argp_parse+0x4189>
mov    0x80(%esp),%eax
mov    %edi,(%eax)
mov    0x8(%ebx),%eax
test   %eax,%eax
je     805342f <argp_parse+0x442f>
mov    0xc(%ebx),%edx
xor    %ebx,%ebx
mov    %edx,(%eax)
jmp    8052d5d <argp_parse+0x3d5d>
mov    $0x1,%edx
jmp    8052dbf <argp_parse+0x3dbf>
lea    0x0(%esi),%esi
cmp    %ecx,%edx
je     8053010 <argp_parse+0x4010>
mov    %edx,0x20(%ebp)
jmp    8053010 <argp_parse+0x4010>
mov    %edx,0x20(%ebp)
mov    %edx,%eax
jmp    8052d25 <argp_parse+0x3d25>
cmp    $0x3b,%dl
jne    8052de5 <argp_parse+0x3de5>
cmpb   $0x0,(%esi)
je     8053471 <argp_parse+0x4471>
addl   $0x1,0x0(%ebp)
mov    %esi,0xc(%ebp)
mov    %esi,0x24(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x14(%ebp)
movzbl (%eax),%ebx
cmp    $0x3d,%bl
je     80537ae <argp_parse+0x47ae>
test   %bl,%bl
je     80537ae <argp_parse+0x47ae>
mov    %eax,%esi
jmp    805320c <argp_parse+0x420c>
xchg   %ax,%ax
test   %bl,%bl
je     8053217 <argp_parse+0x4217>
add    $0x1,%esi
movzbl (%esi),%ebx
cmp    $0x3d,%bl
jne    8053208 <argp_parse+0x4208>
mov    0x7c(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     805379d <argp_parse+0x479d>
mov    %esi,%eax
xor    %ecx,%ecx
sub    0x24(%esp),%eax
mov    %bl,0x38(%esp)
mov    0x7c(%esp),%ebx
mov    %esi,0x3c(%esp)
mov    %ecx,%esi
mov    %ebp,0x88(%esp)
mov    %eax,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
jmp    8053278 <argp_parse+0x4278>
xchg   %ax,%ax
movl   $0x1,0x2c(%esp)
add    $0x10,%ebx
mov    (%ebx),%edi
add    $0x1,%esi
test   %edi,%edi
je     805339c <argp_parse+0x439c>
mov    0x24(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    8053268 <argp_parse+0x4268>
mov    %edi,(%esp)
call   8049150 <strlen@plt>
cmp    %eax,%ebp
je     80535d9 <argp_parse+0x45d9>
mov    0x28(%esp),%eax
test   %eax,%eax
jne    8053260 <argp_parse+0x4260>
mov    %esi,0x34(%esp)
mov    %ebx,0x28(%esp)
jmp    8053268 <argp_parse+0x4268>
lea    0x0(%esi),%esi
mov    0x24(%esp),%esi
jmp    8052e5e <argp_parse+0x3e5e>
mov    %esi,0xc(%ebp)
addl   $0x1,0x0(%ebp)
jmp    8052e1e <argp_parse+0x3e1e>
mov    0x84(%esp),%eax
test   %eax,%eax
jne    8053497 <argp_parse+0x4497>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8053348 <argp_parse+0x4348>
cmpb   $0x2d,0x3c(%esp)
je     80535ff <argp_parse+0x45ff>
mov    0x38(%esp),%eax
movsbl (%eax),%esi
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80550a8,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x24(%esp),%edi
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,0x14(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x0(%ebp),%eax
mov    %eax,0x34(%esp)
movl   $0x8054ffe,0x14(%ebp)
jmp    8052fa1 <argp_parse+0x3fa1>
add    $0x1,%esi
mov    %esi,0xc(%ebp)
jmp    8053164 <argp_parse+0x4164>
cmp    %eax,0x70(%esp)
jle    8053437 <argp_parse+0x4437>
mov    0x34(%esp),%eax
mov    0x48(%esp),%esi
add    $0x2,%eax
mov    %eax,0x0(%ebp)
mov    0x74(%esp),%eax
mov    0x4(%eax,%esi,1),%eax
mov    %eax,0xc(%ebp)
jmp    8053164 <argp_parse+0x4164>
cmpb   $0x0,(%esi)
jne    80532c1 <argp_parse+0x42c1>
movl   $0x0,0xc(%ebp)
jmp    8052e1e <argp_parse+0x3e1e>
mov    0x2c(%esp),%edi
movzbl 0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x88(%esp),%ebp
test   %edi,%edi
je     805353f <argp_parse+0x453f>
mov    0x30(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
je     8053414 <argp_parse+0x4414>
mov    0x0(%ebp),%eax
mov    0x74(%esp),%esi
mov    (%esi,%eax,4),%esi
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80550f4,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%ebx
mov    %ebx,(%esp)
call   8049150 <strlen@plt>
addl   $0x1,0x0(%ebp)
add    %eax,%ebx
mov    %ebx,0x14(%ebp)
mov    $0x3f,%ebx
jmp    8052d5d <argp_parse+0x3d5d>
mov    0xc(%ebx),%ebx
jmp    8052d5d <argp_parse+0x3d5d>
mov    0x30(%esp),%edx
mov    0x24(%esp),%esi
test   %edx,%edx
jne    8053652 <argp_parse+0x4652>
mov    %esi,(%esp)
call   8049150 <strlen@plt>
add    %eax,%esi
mov    0xc(%ebx),%eax
mov    %esi,0x14(%ebp)
mov    %eax,0x8(%ebp)
mov    0x78(%esp),%eax
cmpb   $0x3a,(%eax)
jne    8052c8c <argp_parse+0x3c8c>
mov    $0x3a,%ebx
jmp    8052d5d <argp_parse+0x3d5d>
mov    0x0(%ebp),%eax
cmp    0x70(%esp),%eax
je     80536f2 <argp_parse+0x46f2>
mov    0x74(%esp),%esi
lea    0x1(%eax),%edx
mov    %edx,0x0(%ebp)
mov    (%esi,%eax,4),%eax
mov    %eax,0xc(%ebp)
mov    %eax,0x24(%esp)
jmp    80531e7 <argp_parse+0x41e7>
cmpb   $0x2d,0x3c(%esp)
je     80535f4 <argp_parse+0x45f4>
movsbl 0x4f(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x78(%esp),%eax
mov    %eax,(%esp)
call   8049140 <strchr@plt>
test   %eax,%eax
jne    8052c08 <argp_parse+0x3c08>
cmpl   $0x0,0x30(%esp)
jne    80532ef <argp_parse+0x42ef>
jmp    8053348 <argp_parse+0x4348>
nop
mov    0x74(%esp),%eax
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x8055000,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %edi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%esi
jmp    8053128 <argp_parse+0x4128>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    8053755 <argp_parse+0x4755>
mov    0x78(%esp),%eax
mov    %ebx,0x8(%ebp)
xor    %ebx,%ebx
cmpb   $0x3a,(%eax)
setne  %bl
lea    0x3a(%ebx,%ebx,4),%ebx
jmp    8052e1e <argp_parse+0x3e1e>
mov    0x28(%esp),%eax
test   %eax,%eax
je     805379d <argp_parse+0x479d>
mov    0x34(%esp),%edi
mov    %eax,0x7c(%esp)
test   %bl,%bl
mov    0x7c(%esp),%eax
je     80536a4 <argp_parse+0x46a4>
mov    0x4(%eax),%ecx
test   %ecx,%ecx
jne    80537d5 <argp_parse+0x47d5>
cmpl   $0x0,0x30(%esp)
je     80535ba <argp_parse+0x45ba>
mov    0x7c(%esp),%eax
mov    (%eax),%esi
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8055118,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%edx
xor    %eax,%eax
or     $0xffffffff,%ecx
mov    $0x3f,%ebx
mov    %edx,%edi
repnz scas %es:(%edi),%al
not    %ecx
lea    -0x1(%edx,%ecx,1),%eax
mov    %eax,0x14(%ebp)
jmp    8052d5d <argp_parse+0x3d5d>
mov    %esi,%edi
mov    0x88(%esp),%ebp
mov    %ebx,0x7c(%esp)
mov    0x3c(%esp),%esi
movzbl 0x38(%esp),%ebx
jmp    8053553 <argp_parse+0x4553>
cmpl   $0x0,0x30(%esp)
je     8053348 <argp_parse+0x4348>
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8055088,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    0x24(%esp),%esi
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x0(%ebp),%eax
mov    %eax,0x34(%esp)
jmp    8053348 <argp_parse+0x4348>
mov    0x74(%esp),%eax
mov    0x48(%esp),%esi
mov    (%eax,%esi,1),%edi
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x8055060,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %edi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%esi
jmp    8053447 <argp_parse+0x4447>
cmpl   $0x1,0x4(%eax)
je     80537b7 <argp_parse+0x47b7>
mov    0x24(%esp),%esi
mov    %esi,(%esp)
call   8049150 <strlen@plt>
mov    0x80(%esp),%edx
add    %esi,%eax
test   %edx,%edx
mov    %eax,0x14(%ebp)
je     80536d3 <argp_parse+0x46d3>
mov    0x80(%esp),%eax
mov    %edi,(%eax)
mov    0x7c(%esp),%eax
mov    0x8(%eax),%eax
test   %eax,%eax
je     8053859 <argp_parse+0x4859>
mov    0x7c(%esp),%esi
xor    %ebx,%ebx
mov    0xc(%esi),%edx
mov    %edx,(%eax)
jmp    8052d5d <argp_parse+0x3d5d>
mov    0x30(%esp),%eax
test   %eax,%eax
je     805373d <argp_parse+0x473d>
mov    0x74(%esp),%eax
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x80550c8,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x78(%esp),%eax
mov    %ebx,0x8(%ebp)
xor    %ebx,%ebx
cmpb   $0x3a,(%eax)
setne  %bl
lea    0x3a(%ebx,%ebx,4),%ebx
jmp    8052d5d <argp_parse+0x3d5d>
mov    0x74(%esp),%eax
mov    (%eax),%esi
movl   $0x5,0x8(%esp)
movl   $0x80550c8,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    8053527 <argp_parse+0x4527>
movl   $0x0,0x14(%ebp)
mov    $0x57,%ebx
jmp    8052d5d <argp_parse+0x3d5d>
mov    0x24(%esp),%esi
jmp    8053217 <argp_parse+0x4217>
mov    0x0(%ebp),%eax
cmp    %eax,0x70(%esp)
jle    80537e0 <argp_parse+0x47e0>
mov    0x74(%esp),%esi
lea    0x1(%eax),%edx
mov    %edx,0x0(%ebp)
mov    (%esi,%eax,4),%eax
mov    %eax,0xc(%ebp)
jmp    80536ae <argp_parse+0x46ae>
add    $0x1,%esi
mov    %esi,0xc(%ebp)
jmp    80536ae <argp_parse+0x46ae>
cmpl   $0x0,0x30(%esp)
je     8053832 <argp_parse+0x4832>
mov    0x74(%esp),%esi
mov    -0x4(%esi,%eax,4),%esi
mov    0x74(%esp),%eax
mov    (%eax),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8055060,0x4(%esp)
movl   $0x0,(%esp)
call   8049010 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8059344,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x14(%ebp),%edx
xor    %eax,%eax
or     $0xffffffff,%ecx
mov    %edx,%edi
repnz scas %es:(%edi),%al
not    %ecx
lea    -0x1(%edx,%ecx,1),%eax
mov    %eax,0x14(%ebp)
mov    0x78(%esp),%eax
cmpb   $0x3a,(%eax)
jne    8052c8c <argp_parse+0x3c8c>
jmp    8053467 <argp_parse+0x4467>
mov    0x7c(%esp),%eax
mov    0xc(%eax),%ebx
jmp    8052d5d <argp_parse+0x3d5d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x8059328,%eax
movl   $0x8059500,0x18(%esp)
mov    %eax,0x8059500
mov    0x8059324,%eax
mov    %eax,0x8059504
mov    0x48(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052af0 <argp_parse+0x3af0>
mov    0x8059500,%edx
mov    %edx,0x8059328
mov    0x805950c,%edx
mov    %edx,0x805953c
mov    0x8059508,%edx
mov    %edx,0x8059320
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0x1,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x0,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8053870 <argp_parse+0x4870>
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    80539a0 <argp_parse+0x49a0>
cmp    %ebp,%ecx
ja     80539d8 <argp_parse+0x49d8>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8053988 <argp_parse+0x4988>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     80539c8 <argp_parse+0x49c8>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    80539e8 <argp_parse+0x49e8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8053a58 <argp_parse+0x4a58>
cmp    %edx,%eax
jb     8053a58 <argp_parse+0x4a58>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8053a68 <argp_parse+0x4a68>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8053a49 <argp_parse+0x4a49>
cmp    (%esp),%esi
je     8053a68 <argp_parse+0x4a68>
mov    %edi,%eax
xor    %edx,%edx
jmp    80539cc <argp_parse+0x49cc>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    80539cc <argp_parse+0x49cc>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    8053ac8 <argp_parse+0x4ac8>
cmp    %edi,%esi
jbe    8053b00 <argp_parse+0x4b00>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8053b20 <argp_parse+0x4b20>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8053b30 <argp_parse+0x4b30>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     8053bc8 <argp_parse+0x4bc8>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8053b11 <argp_parse+0x4b11>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    8053abb <argp_parse+0x4abb>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     8053bb4 <argp_parse+0x4bb4>
cmp    %eax,0xc(%esp)
jb     8053bb0 <argp_parse+0x4bb0>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    8053b8e <argp_parse+0x4b8e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    8053b8e <argp_parse+0x4b8e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     8053ae1 <argp_parse+0x4ae1>
jmp    8053af1 <argp_parse+0x4af1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049730 <__sprintf_chk@plt+0x380>
add    $0x5415,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048f14 <strcmp@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8053c39 <argp_parse+0x4c39>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8053c18 <argp_parse+0x4c18>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8053c50 <argp_parse+0x4c50>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8049730 <__sprintf_chk@plt+0x380>
add    $0x53a3,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
outsl  %ds:(%esi),(%dx)
jo     8053cf0 <_IO_stdin_used+0x6c>
jb     8053cee <_IO_stdin_used+0x6a>
je     8053cf8 <_IO_stdin_used+0x74>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ch,0x6e(%ecx)
jbe    8053cf7 <_IO_stdin_used+0x73>
insb   (%dx),%es:(%edi)
imul   $0x746e756f,0x63(%eax,%eiz,1),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8053d0a <_IO_stdin_used+0x86>
add    %dl,0x50(%ecx,%eax,2)
inc    %ebp
add    %ch,(%edi)
fs
gs
jbe    8053cdf <_IO_stdin_used+0x5b>
je     8053d13 <_IO_stdin_used+0x8f>
jo     8053d19 <_IO_stdin_used+0x95>
add    %ah,0x72203a73
insl   (%dx),%es:(%edi)
je     8053d26 <_IO_stdin_used+0xa2>
outsl  %ds:(%esi),(%dx)
arpl   %si,0x20(%esp,%ebp,2)
popaw
imul   $0x69726400,0x64(%ebp,%eiz,2),%ebp
jbe    8053d33 <_IO_stdin_used+0xaf>
and    %dh,0x70(%ecx,%edi,2)
and    %bh,%gs:0xa642520
add    %ah,0x69(%edx,%esi,2)
jbe    8053d44 <_IO_stdin_used+0xc0>
and    %dh,0x74(%ebx)
popa
je     8053d5a <_IO_stdin_used+0xd6>
jae    8053d07 <_IO_stdin_used+0x83>
cmp    $0xa642520,%eax
add    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jae    8053d57 <_IO_stdin_used+0xd3>
and    %ch,0x65(%ebx)
jns    8053d17 <_IO_stdin_used+0x93>
gs
jb     8053d6c <_IO_stdin_used+0xe8>
outsl  %ds:(%esi),(%dx)
jb     8053d1d <_IO_stdin_used+0x99>
cmp    $0xa642520,%eax
add    %dh,0x65(%edx)
jae    8053d70 <_IO_stdin_used+0xec>
fs
jne    8053d6f <_IO_stdin_used+0xeb>
and    %ah,0x6f(%ebx)
jne    8053d7d <_IO_stdin_used+0xf9>
je     8053d31 <_IO_stdin_used+0xad>
cmp    $0xa642520,%eax
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x75(%esi)
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
and    %bh,0xa642520
add    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
outsb  %ds:(%esi),(%dx)
jne    8053d9f <_IO_stdin_used+0x11b>
bound  %esp,0x72(%ebp)
and    %bh,0xa642520
add    %ch,(%edi)
jne    8053db2 <_IO_stdin_used+0x12e>
jb     8053d70 <_IO_stdin_used+0xec>
jae    8053dab <_IO_stdin_used+0x127>
popa
jb     8053dab <_IO_stdin_used+0x127>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ah,%gs:0x72203a73
insl   (%dx),%es:(%edi)
je     8053dc5 <_IO_stdin_used+0x141>
jo     8053dbd <_IO_stdin_used+0x139>
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%esi)
imul   $0x3a732500,0x64(%ebp,%eiz,2),%ebp
and    %dh,0x6d(%edx)
je     8053dcc <_IO_stdin_used+0x148>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8053dd2 <_IO_stdin_used+0x14e>
and    %ah,0x61(%esi)
imul   $0x65706f00,0x64(%ebp,%eiz,2),%ebp
jb     8053ddb <_IO_stdin_used+0x157>
je     8053de5 <_IO_stdin_used+0x161>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bl,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jne    8053df2 <_IO_stdin_used+0x16e>
je     8053de3 <_IO_stdin_used+0x15f>
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %al,%gs:0x56(%ebp,%eax,2)
dec    %ecx
inc    %ebx
inc    %ebp
add    %dh,0x73(%edx)
push   $0x6d6f632d
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %al,%fs:0x4f(%ebx)
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
add    %al,0x76(%ecx,%eiz,2)
imul   $0x654b6361,0x4d(%eax,%eiz,1),%esp
outsb  %ds:(%esi),(%dx)
jp     8053e1e <_IO_stdin_used+0x19a>
add    %dl,%gs:0x65(%ebx)
jb     8053e22 <_IO_stdin_used+0x19e>
gs
jns    8053dde <_IO_stdin_used+0x15a>
push   %eax
outsl  %ds:(%esi),(%dx)
jp     8053e30 <_IO_stdin_used+0x1ac>
jns    8053e25 <_IO_stdin_used+0x1a1>
imul   $0x66,0x66(%edi),%ebp
add    %bh,(%edx,%eiz,2)
jne    8053e34 <_IO_stdin_used+0x1b0>
sub    $0x6f697063,%eax
inc    %eax
outsb  %ds:(%si),(%dx)
jne    8053e05 <_IO_stdin_used+0x181>
outsl  %ds:(%esi),(%dx)
jb     8053e41 <_IO_stdin_used+0x1bd>
add    %dh,%ds:0x65(%edi)
outsl  %ds:(%esi),(%dx)
data16
add    %ah,0x73(%esi)
data16
add    %ah,0x73(%edx)
data16
add    %ah,0x73(%esi)
jb     8053ded <_IO_stdin_used+0x169>
bound  %esi,0x72(%ebx)
add    %dh,0x65(%edx)
ja     8053e5e <_IO_stdin_used+0x1da>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x66(%edi)
data16
insb   (%dx),%es:(%edi)
imul   $0x77657200,0x65(%esi),%ebp
outsl  %ds:(%esi),(%dx)
data16
data16
insb   (%dx),%es:(%edi)
add    %ah,0x6a(%ebp)
arpl   %si,%gs:0x73(%eax,%eax,1)
je     8053e72 <_IO_stdin_used+0x1ee>
je     8053e88 <_IO_stdin_used+0x204>
jae    8053e15 <_IO_stdin_used+0x191>
bound  %esi,0x66(%ebx)
insl   (%dx),%es:(%edi)
add    %ah,0x6f(%ebp)
insl   (%dx),%es:(%edi)
add    %dh,0x65(%edx)
je     8053e87 <_IO_stdin_used+0x203>
outsb  %ds:(%esi),(%dx)
jae    8053e8e <_IO_stdin_used+0x20a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x72(%ebp)
popa
jae    8053e92 <_IO_stdin_used+0x20e>
add    %ah,0x73(%ecx)
data16
add    %ah,0x73(%esi)
insw   (%dx),%es:(%edi)
add    %dh,0x65(%ebx)
imul   $0x25,%gs:(%eax),%eax
jae    8053e5f <_IO_stdin_used+0x1db>
imul   $0x20746f6e,0x20(%ebx),%esi
popa
and    %ah,0x68(%ebx)
popa
jb     8053eae <_IO_stdin_used+0x22a>
arpl   %si,0x72(%ebp,%eiz,2)
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %al,%gs:(%eax)
jne    8053ed5 <_IO_stdin_used+0x251>
and    %ah,%gs:0x76(%ebp,%eiz,2)
imul   $0x20736120,0x65(%ebx),%esp
je     8053ed8 <_IO_stdin_used+0x254>
and    %ah,%gs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x61(%esi)
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x70(%ecx,%eiz,2)
and    %ah,%gs:0x69(%edx,%esi,2)
jbe    8053ef2 <_IO_stdin_used+0x26e>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     8053ef9 <_IO_stdin_used+0x275>
jb     8053ef7 <_IO_stdin_used+0x273>
je     8053efd <_IO_stdin_used+0x279>
and    %ch,0x6e(%edi)
add    %dh,0x73(%ebp)
and    %dh,%gs:0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8053f0b <_IO_stdin_used+0x287>
and    %al,0x4f(%ebx)
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
and    %ch,0x6e(%ecx)
jae    8053f27 <_IO_stdin_used+0x2a3>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %dh,0x73(%edx)
push   $0xdd000000
cmp    $0x3ddc0805,%eax
add    $0x53de108,%eax
or     %ah,%ch
cmp    $0x3de90805,%eax
add    $0x53ded08,%eax
or     %dh,%cl
cmp    $0x3df80805,%eax
add    $0x53e0008,%eax
or     %cl,(%eax)
ds
add    $0x53e0e08,%eax
or     %dl,0x1a08053e
ds
add    $0x53e1e08,%eax
or     %ch,(%eax)
ds
add    $0x53e2e08,%eax
or     %dh,(%edx)
ds
add    $0x53e3708,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053f33 <_IO_stdin_used+0x2af>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x74(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
and    %ah,0x72203a73
gs
jae    8053f95 <_IO_stdin_used+0x311>
insb   (%dx),%es:(%edi)
jbe    8053f8e <_IO_stdin_used+0x30a>
and    %ah,0x61(%esi)
imul   $0x6c2d00,0x64(%ebp,%eiz,2),%ebp
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053f5b <_IO_stdin_used+0x2d7>
gs
js     8053fa3 <_IO_stdin_used+0x31f>
arpl   %si,0x74(%ebp)
and    %dh,%gs:0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8053fae <_IO_stdin_used+0x32a>
and    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %cl,0x25(%edi)
jae    8053f5e <_IO_stdin_used+0x2da>
add    %ah,0x43002064
or     (%eax),%al
push   %edx
and    $0xa756c,%eax
push   %edi
and    $0xa756c,%eax
dec    %esp
and    $0x64250a73,%eax
or     (%eax),%al
dec    %ecx
and    $0x73250a64,%eax
or     (%eax),%al
das
jne    8053fee <_IO_stdin_used+0x36a>
jb     8053fac <_IO_stdin_used+0x328>
jae    8053fe1 <_IO_stdin_used+0x35d>
imul   $0x746d72,0x2f(%esi),%ebp
and    $0x43203a73,%eax
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053fb1 <_IO_stdin_used+0x32d>
and    $0x73250073,%eax
cmp    (%eax),%ah
push   %edi
popa
jb     805400a <_IO_stdin_used+0x386>
imul   $0x6143203a,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053fc8 <_IO_stdin_used+0x344>
and    $0x73250073,%eax
cmp    (%eax),%ah
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053fd6 <_IO_stdin_used+0x352>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6f(%di)
fs and %dh,%fs:%gs:0x20(%edi,%ebp,2)
and    $0x6c630073,%eax
outsl  %ds:(%esi),(%dx)
jae    8054032 <_IO_stdin_used+0x3ae>
add    %ah,0x78(%ebp)
arpl   %ax,%gs:(%eax)
and    $0x43203a73,%eax
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8053ffe <_IO_stdin_used+0x37a>
push   $0x20647261
insb   (%dx),%es:(%edi)
imul   $0x206f7420,0x6b(%esi),%ebp
and    $0x6b6d0073,%eax
imul   $0x69666b6d,%fs:0x0(%edx),%esi
outsw  %ds:(%esi),(%dx)
add    %ch,0x6b(%ebp)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ch,%fs:0x70(%edi)
outsb  %gs:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
add    %dh,%fs:0x65(%edx)
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x646d7200,0x6b(%esi),%ebp
imul   $0x65766173,0x0(%edx),%esi
imul   $0x203a7325,%fs:0x0(%edx),%esi
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805404d <_IO_stdin_used+0x3c9>
jae    8054094 <_IO_stdin_used+0x410>
imul   $0x74,%gs:(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %ah,0x74730073
popa
je     805403d <_IO_stdin_used+0x3b9>
je     80540b1 <_IO_stdin_used+0x42d>
jne    80540af <_IO_stdin_used+0x42b>
arpl   %sp,0x74(%ecx)
add    %dh,%gs:0x6e(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x69747500,0x6b(%esi),%ebp
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x61(%edi)
imul   $0x72770064,0x69(%eax,%esi,2),%esi
imul   $0x69646863,0x0(%ebp,%eiz,2),%esi
jb     8054067 <_IO_stdin_used+0x3e3>
add    %ah,0x43203a73
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8054093 <_IO_stdin_used+0x40f>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     80540f3 <_IO_stdin_used+0x46f>
push   $0x74207069
outsl  %ds:(%esi),(%dx)
and    %dh,0x69(%ebp)
and    %ah,%fs:0x202c756c
imul   $0x756c25,0x20(%si),%esp
and    $0x52203a73,%eax
gs
popa
and    %ah,%fs:0x72(%ebp)
jb     8054114 <_IO_stdin_used+0x490>
jb     80540c7 <_IO_stdin_used+0x443>
popa
je     80540ca <_IO_stdin_used+0x446>
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x77202c73
push   $0x20656c69
jb     8054120 <_IO_stdin_used+0x49c>
popa
imul   $0x756c2520,%fs:0x67(%esi),%ebp
and    %ah,0x79(%edx)
je     805412e <_IO_stdin_used+0x4aa>
jae    80540cb <_IO_stdin_used+0x447>
add    %ah,0x52203a73
gs
popa
and    %ah,%fs:0x72(%ebp)
jb     8054148 <_IO_stdin_used+0x4c4>
jb     80540fb <_IO_stdin_used+0x477>
popa
je     80540fe <_IO_stdin_used+0x47a>
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x77202c73
push   $0x20656c69
jb     8054154 <_IO_stdin_used+0x4d0>
popa
imul   $0x756c2520,%fs:0x67(%esi),%ebp
and    %ah,0x79(%edx)
je     8054162 <_IO_stdin_used+0x4de>
add    %al,(%eax)
add    %ah,0x57203a73
popa
jb     8054176 <_IO_stdin_used+0x4f2>
imul   $0x6552203a,0x67(%esi),%ebp
popa
and    %ah,%fs:0x72(%ebp)
jb     8054185 <_IO_stdin_used+0x501>
jb     8054138 <_IO_stdin_used+0x4b4>
popa
je     805413b <_IO_stdin_used+0x4b7>
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x77202c73
push   $0x20656c69
jb     8054191 <_IO_stdin_used+0x50d>
popa
imul   $0x756c2520,%fs:0x67(%esi),%ebp
and    %ah,0x79(%edx)
je     805419f <_IO_stdin_used+0x51b>
jae    805413c <_IO_stdin_used+0x4b8>
and    $0x57203a73,%eax
popa
jb     80541b2 <_IO_stdin_used+0x52e>
imul   $0x6552203a,0x67(%esi),%ebp
popa
and    %ah,%fs:0x72(%ebp)
jb     80541c1 <_IO_stdin_used+0x53d>
jb     8054174 <_IO_stdin_used+0x4f0>
popa
je     8054177 <_IO_stdin_used+0x4f3>
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x77202c73
push   $0x20656c69
jb     80541cd <_IO_stdin_used+0x549>
popa
imul   $0x756c2520,%fs:0x67(%esi),%ebp
and    %ah,0x79(%edx)
je     80541db <_IO_stdin_used+0x557>
add    %al,(%eax)
and    $0x57203a73,%eax
popa
jb     80541ee <_IO_stdin_used+0x56a>
imul   $0x6143203a,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80541ac <_IO_stdin_used+0x528>
jae    80541f3 <_IO_stdin_used+0x56f>
imul   $0x74,%gs:(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %ah,0x25000073
jae    80541d5 <_IO_stdin_used+0x551>
and    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80541c3 <_IO_stdin_used+0x53f>
arpl   %si,0x65(%edx)
popa
je     805420e <_IO_stdin_used+0x58a>
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x206f7420,0x6b(%esi),%ebp
and    $0x73250073,%eax
cmp    (%eax),%ah
push   %edi
jb     805422e <_IO_stdin_used+0x5aa>
je     8054226 <_IO_stdin_used+0x5a2>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    80541e7 <_IO_stdin_used+0x563>
and    $0x6f20756c,%eax
data16
and    %ah,0x6220756c
jns    8054249 <_IO_stdin_used+0x5c5>
gs
jae    80541d8 <_IO_stdin_used+0x554>
and    $0x57203a73,%eax
jb     805424e <_IO_stdin_used+0x5ca>
je     8054246 <_IO_stdin_used+0x5c2>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8054207 <_IO_stdin_used+0x583>
and    $0x6f20756c,%eax
data16
and    %ah,0x6220756c
jns    8054269 <_IO_stdin_used+0x5e5>
add    %ah,%gs:(%eax)
pop    %ebx
sub    $0x5d7325,%eax
and    %bl,0x2d(%ebx)
sub    $0x3d5b7325,%eax
and    $0x5d5d73,%eax
and    %bl,0x2d(%ebx)
sub    $0x253d7325,%eax
jae    8054272 <_IO_stdin_used+0x5ee>
add    %ah,(%eax)
pop    %ebx
sub    $0x5d73252d,%eax
add    %ah,(%eax)
pop    %ebx
sub    $0x255b6325,%eax
jae    8054284 <_IO_stdin_used+0x600>
pop    %ebp
add    %bl,0x2d(%ebx)
and    $0x73252063,%eax
pop    %ebp
add    %ch,(%esi)
cs
das
cs
cs
das
outsb  %ds:(%si),(%dx)
jne    805426b <_IO_stdin_used+0x5e7>
popa
jb     80542a6 <_IO_stdin_used+0x622>
jo     805426e <_IO_stdin_used+0x5ea>
push   $0x2e706c65
arpl   %ax,(%eax)
push   $0x21006c6f
and    %ch,(%eax)
sub    %ch,0x70(%edi)
je     80542c7 <_IO_stdin_used+0x643>
sub    %ebp,0x616c663e
addr16 jae 805427d <_IO_stdin_used+0x5f9>
and    %dh,%es:(%eax)
js     8054296 <_IO_stdin_used+0x612>
sub    %eax,(%eax)
outsb  %gs:(%esi),(%dx)
je     80542da <_IO_stdin_used+0x656>
imul   $0x20262620,0x73(%ebp),%esp
jae    80542d9 <_IO_stdin_used+0x655>
outsl  %ds:(%esi),(%dx)
jb     80542e8 <_IO_stdin_used+0x664>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     80542ec <_IO_stdin_used+0x668>
imul   $0x6e550073,0x6e(%edi),%ebp
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x79(%ebx)
jae    80542fd <_IO_stdin_used+0x679>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x72(%ebp)
jb     80542ff <_IO_stdin_used+0x67b>
jb     8054292 <_IO_stdin_used+0x60e>
fs
jne    8054305 <_IO_stdin_used+0x681>
sub    $0x73677261,%eax
add    %al,0x52(%ecx)
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
add    %al,0x61(%edi)
jb     805430f <_IO_stdin_used+0x68b>
popa
and    %ch,%gs:0x6e(%bx,%di)
and    %al,0x52(%ecx)
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
cmp    (%eax),%ah
and    $0x6d720073,%eax
popa
jb     8054332 <_IO_stdin_used+0x6ae>
imul   $0x706c6568,0x0(%esi),%ebp
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%al
and    $0x73252073,%eax
add    %ah,(%eax)
and    %ch,0x72(%edi)
cmp    (%eax),%ah
add    %ah,(%eax)
pop    %ebx
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
cs
cs
cs
pop    %ebp
add    %bl,0x25(%ebx)
jae    8054355 <_IO_stdin_used+0x6d1>
add    %ch,0x73252d
cmp    $0x5b007325,%eax
cmp    $0x5d7325,%eax
push   %edx
gs
jo     805437b <_IO_stdin_used+0x6f7>
jb     8054382 <_IO_stdin_used+0x6fe>
and    %ah,0x75(%edx)
addr16 jae 8054334 <_IO_stdin_used+0x6b0>
je     8054385 <_IO_stdin_used+0x701>
and    %ah,0xa2e73
fs
jne    805438f <_IO_stdin_used+0x70b>
sub    $0x73677261,%eax
sub    $0x65746f6e,%eax
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     80543a3 <_IO_stdin_used+0x71f>
sub    $0x2d74706f,%eax
arpl   %bp,0x6c(%edi)
add    %ch,0x6e(%edi,%ebp,2)
addr16 sub $0x2d74706f,%eax
arpl   %bp,0x6c(%edi)
add    %ah,0x63(%edi,%ebp,2)
sub    $0x2d74706f,%eax
arpl   %bp,0x6c(%edi)
add    %ch,0x70(%edi)
je     8054382 <_IO_stdin_used+0x6fe>
outsl  %fs:(%esi),(%dx)
arpl   %bp,0x6c6f63
push   $0x65646165
jb     8054391 <_IO_stdin_used+0x70d>
arpl   %bp,0x6c(%edi)
add    %dh,0x73(%ebp)
popa
addr16
gs
sub    $0x65646e69,%eax
outsb  %ds:(%esi),(%dx)
je     8054375 <_IO_stdin_used+0x6f1>
add    %al,(%eax)
add    %ch,0x6f(%eax)
insb   (%dx),%es:(%edi)
sub    $0x746e653e,%eax
jb     80543eb <_IO_stdin_used+0x767>
gs
jae    80543a5 <_IO_stdin_used+0x721>
es and %ch,%es:0x6f(%eax)
insb   (%dx),%es:(%edi)
sub    $0x6f68733e,%eax
jb     8054406 <_IO_stdin_used+0x782>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     805440a <_IO_stdin_used+0x786>
imul   $0x68000073,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    $0x6d756e3e,%eax
pop    %edi
outsb  %gs:(%esi),(%dx)
je     805441b <_IO_stdin_used+0x797>
imul   $0x203d3c20,0x73(%ebp),%esp
sub    %ch,(%eax)
jae    805441d <_IO_stdin_used+0x799>
jp     805441b <_IO_stdin_used+0x797>
pop    %edi
je     80543e2 <_IO_stdin_used+0x75e>
and    %ch,0x2f202931
and    %dh,0x69(%ebx)
jp     8054429 <_IO_stdin_used+0x7a5>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%eax)
jae    805443e <_IO_stdin_used+0x7ba>
jb     8054441 <_IO_stdin_used+0x7bd>
arpl   %si,0x68(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
outsb  %gs:(%esi),(%dx)
je     8054449 <_IO_stdin_used+0x7c5>
jns    8054402 <_IO_stdin_used+0x77e>
add    %al,(%eax)
add    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
pop    %edi
outsb  %gs:(%esi),(%dx)
je     8054456 <_IO_stdin_used+0x7d2>
imul   $0x203d3c20,0x73(%ebp),%esp
sub    %ch,(%eax)
jae    8054458 <_IO_stdin_used+0x7d4>
jp     8054456 <_IO_stdin_used+0x7d2>
pop    %edi
je     805441d <_IO_stdin_used+0x799>
and    %ch,0x2f202931
and    %dh,0x69(%ebx)
jp     8054464 <_IO_stdin_used+0x7e0>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%eax)
jae    8054479 <_IO_stdin_used+0x7f5>
jb     805447c <_IO_stdin_used+0x7f8>
arpl   %si,0x68(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
outsb  %gs:(%esi),(%dx)
je     8054484 <_IO_stdin_used+0x800>
jns    805443d <_IO_stdin_used+0x7b9>
add    %al,(%eax)
add    %al,(%eax)
and    $0x3a732a2e,%eax
and    %al,0x52(%ecx)
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
and    %dh,0x61(%eax)
jb     8054491 <_IO_stdin_used+0x80d>
insl   (%dx),%es:(%edi)
gs
je     8054499 <_IO_stdin_used+0x815>
jb     8054456 <_IO_stdin_used+0x7d2>
jb     805449d <_IO_stdin_used+0x819>
jno    80544af <_IO_stdin_used+0x82b>
imul   $0x20612073,0x65(%edx),%esi
jbe    80544a4 <_IO_stdin_used+0x820>
insb   (%dx),%es:(%edi)
jne    80544ab <_IO_stdin_used+0x827>
add    %al,(%eax)
and    $0x3a732a2e,%eax
and    %al,0x52(%ecx)
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
and    %dh,0x61(%eax)
jb     80544c1 <_IO_stdin_used+0x83d>
insl   (%dx),%es:(%edi)
gs
je     80544c9 <_IO_stdin_used+0x845>
jb     8054486 <_IO_stdin_used+0x802>
insl   (%dx),%es:(%edi)
jne    80544dc <_IO_stdin_used+0x858>
je     805448b <_IO_stdin_used+0x807>
bound  %esp,0x20(%ebp)
jo     80544df <_IO_stdin_used+0x85b>
jae    80544db <_IO_stdin_used+0x857>
je     80544dd <_IO_stdin_used+0x859>
jbe    80544db <_IO_stdin_used+0x857>
add    %al,(%eax)
and    $0x3a732a2e,%eax
and    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %al,0x52(%ecx)
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
and    %dh,0x61(%eax)
jb     80544f9 <_IO_stdin_used+0x875>
insl   (%dx),%es:(%edi)
gs
je     8054501 <_IO_stdin_used+0x87d>
jb     805449e <_IO_stdin_used+0x81a>
add    %al,(%eax)
inc    %ecx
push   %edx
inc    %edi
push   %eax
pop    %edi
dec    %eax
inc    %ebp
dec    %esp
push   %eax
pop    %edi
inc    %esi
dec    %ebp
push   %esp
cmp    (%eax),%ah
and    $0x61762073,%eax
insb   (%dx),%es:(%edi)
jne    805451c <_IO_stdin_used+0x898>
and    %ch,0x73(%ecx)
and    %ch,0x73(%ebp,%eiz,2)
jae    80544e0 <_IO_stdin_used+0x85c>
je     805452a <_IO_stdin_used+0x8a6>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,0x72(%edi)
and    %ah,0x71(%ebp)
jne    805452d <_IO_stdin_used+0x8a9>
insb   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
and    $0x72540073,%eax
jns    80544f8 <_IO_stdin_used+0x874>
pusha
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ch,0x72(%edi)
and    %ah,0x25(%eax)
jae    805450b <_IO_stdin_used+0x887>
sub    $0x6173752d,%eax
addr16
gs
daa
and    %ah,0x6f(%esi)
jb     8054518 <_IO_stdin_used+0x894>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8054561 <_IO_stdin_used+0x8dd>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8054570 <_IO_stdin_used+0x8ec>
popa
je     805456f <_IO_stdin_used+0x8eb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %cl,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
je     8054582 <_IO_stdin_used+0x8fe>
jb     805458e <_IO_stdin_used+0x90a>
and    %ch,0x72(%edi)
and    %ch,0x70(%edi)
je     8054586 <_IO_stdin_used+0x902>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x72(%ecx)
addr16 jne 8054594 <_IO_stdin_used+0x910>
outsb  %gs:(%esi),(%dx)
je     805459e <_IO_stdin_used+0x91a>
and    %dh,0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     80545a1 <_IO_stdin_used+0x91d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    805455c <_IO_stdin_used+0x8d8>
popa
jb     80545a4 <_IO_stdin_used+0x920>
and    %ah,0x6c(%ecx)
jae    80545b3 <_IO_stdin_used+0x92f>
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
je     80545bb <_IO_stdin_used+0x937>
jb     80545c7 <_IO_stdin_used+0x943>
and    %ch,0x72(%edi)
and    %ch,0x70(%edi)
je     80545bf <_IO_stdin_used+0x93b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%esi)
jb     805457f <_IO_stdin_used+0x8fb>
popa
outsb  %ds:(%esi),(%dx)
jns    8054583 <_IO_stdin_used+0x8ff>
arpl   %bp,0x72(%edi)
jb     80545cd <_IO_stdin_used+0x949>
jae    80545da <_IO_stdin_used+0x956>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6f687320,%fs:0x67(%esi),%ebp
jb     80545ea <_IO_stdin_used+0x966>
and    %ch,0x70(%edi)
je     80545e4 <_IO_stdin_used+0x960>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80545ad <_IO_stdin_used+0x929>
add    %ch,0x6f(%eax)
insb   (%dx),%es:(%edi)
pop    %edi
popa
jo     80545f7 <_IO_stdin_used+0x973>
outsb  %gs:(%esi),(%dx)
add    %ch,%fs:0x61(%ebp)
imul   $0x68,0x5f(%ebp),%esp
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dl,0x1080542(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%ebx,%eax,2)
add    $0x108,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sub    0x5(%ebx),%al
or     %al,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
inc    %ebx
add    $0x8,%eax
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
inc    %ebp
inc    %ebx
add    $0x8,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x43(%ecx)
add    $0x8,%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pop    %ebp
inc    %ebx
add    $0x8,%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %ch,0x43(%eax)
add    $0x8,%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
movb   $0x8,0x5(%edx)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
xor    (%esi),%esi
xor    %dh,(%eax)
add    %bh,(%edi)
aas
aas
add    %ch,0x203a6325
and    $0x2d2d0073,%eax
and    $0x25203a73,%eax
jae    8054632 <_IO_stdin_used+0x9ae>
and    $0x54203a73,%eax
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    805465f <_IO_stdin_used+0x9db>
popa
jb     80546a9 <_IO_stdin_used+0xa25>
jne    80546b1 <_IO_stdin_used+0xa2d>
outsb  %gs:(%esi),(%dx)
je     80546bb <_IO_stdin_used+0xa37>
or     (%eax),%al
insb   (%dx),%es:(%edi)
imul   $0x69727000,0x63(%edx),%esp
outsb  %ds:(%esi),(%dx)
je     8054675 <_IO_stdin_used+0x9f1>
jo     80546c9 <_IO_stdin_used+0xa45>
outsl  %ds:(%esi),(%dx)
addr16 jb 80546bc <_IO_stdin_used+0xa38>
insl   (%dx),%es:(%edi)
and    %dh,0x65(%esi)
jb     80546d4 <_IO_stdin_used+0xa50>
imul   $0x76696700,0x6e(%edi),%ebp
and    %dh,%gs:0x69(%eax,%ebp,2)
jae    805468f <_IO_stdin_used+0xa0b>
push   $0x20706c65
insb   (%dx),%es:(%edi)
imul   $0x61737500,0x74(%ebx),%esi
add    %ah,%gs:0x69(%bx)
jbe    80546e8 <_IO_stdin_used+0xa64>
and    %ah,0x20(%ecx)
jae    80546f0 <_IO_stdin_used+0xa6c>
outsl  %ds:(%esi),(%dx)
jb     80546ff <_IO_stdin_used+0xa7b>
and    %dh,0x73(%ebp)
popa
and    %ch,%gs:0x65(%di)
jae    8054709 <_IO_stdin_used+0xa85>
popa
add    %dh,%gs:0x72(%bx,%si)
outsl  %ds:(%esi),(%dx)
addr16 jb 8054701 <_IO_stdin_used+0xa7d>
insl   (%dx),%es:(%edi)
sub    $0x656d616e,%eax
add    %cl,0x41(%esi)
dec    %ebp
inc    %ebp
add    %dh,0x65(%ebx)
je     80546d0 <_IO_stdin_used+0xa4c>
je     805471a <_IO_stdin_used+0xa96>
and    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 805471b <_IO_stdin_used+0xa97>
insl   (%dx),%es:(%edi)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
add    %cl,%gs:0x41(%eax)
dec    %esi
inc    %edi
add    %dl,0x45(%ebx)
inc    %ebx
push   %ebx
add    %al,(%eax)
sub    %dl,0x52(%eax)
dec    %edi
inc    %edi
push   %edx
inc    %ecx
dec    %ebp
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
sub    %esp,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
and    %dh,0x65(%esi)
jb     8054756 <_IO_stdin_used+0xad2>
imul   $0x6f6e6b20,0x6e(%edi),%ebp
ja     805475a <_IO_stdin_used+0xad6>
and    %edi,(%edi)
add    %al,(%eax)
push   $0x20676e61
outsw  %ds:(%esi),(%dx)
jb     8054719 <_IO_stdin_used+0xa95>
push   %ebx
inc    %ebp
inc    %ebx
push   %ebx
and    %dh,0x65(%ebx)
arpl   %bp,0x6e(%edi)
fs
jae    8054726 <_IO_stdin_used+0xaa2>
sub    %ah,0x66(%ebp,%eiz,2)
popa
jne    8054779 <_IO_stdin_used+0xaf5>
je     805472f <_IO_stdin_used+0xaab>
xor    (%esi),%esi
xor    %dh,(%eax)
sub    %eax,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
push   %eax
push   %edx
dec    %edi
inc    %edi
push   %edx
inc    %ecx
dec    %ebp
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
sub    %esp,(%eax)
dec    %edi
jo     80547a7 <_IO_stdin_used+0xb23>
imul   $0x6f687320,0x6e(%edi),%ebp
jne    80547a8 <_IO_stdin_used+0xb24>
and    %ch,%fs:0x61(%eax)
jbe    80547a7 <_IO_stdin_used+0xb23>
and    %ah,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %dh,0x65(%edx)
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x3f2164,0x65(%edx),%edi
add    %al,(%eax)
add    %al,0x40080547(%eax)
out    %al,(%dx)
add    $0x8,%al
dec    %edx
inc    %esi
add    $0x8,%eax
add    %bl,0x46(%ebp)
add    $0x5608,%eax
add    %cl,0x46(%edi)
add    $0xffffff08,%eax
incl   (%eax)
add    %al,(%eax)
add    %ah,%al
inc    %edi
add    $0x4eef008,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %cl,0x46(%edx)
add    $0x8,%eax
add    %cl,%dh
inc    %edx
add    $0x3f08,%eax
add    %ah,0x46(%ebp)
add    $0xffffff08,%eax
(bad)
jns    8054840 <_IO_stdin_used+0xbbc>
add    $0xfffffd08,%eax
incl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,0x46(%edi)
add    $0x8,%eax
add    %bl,-0x1f7faba(%edx)
(bad)
(bad)
jmp    *0x2080546(%edi)
add    %al,(%eax)
add    %ch,0x805(%esi,%eax,2)
add    %al,(%eax)
roll   $0x8,0x5(%esi)
cld
(bad)
(bad)
inc    %esi
inc    %esi
add    $0x308,%eax
add    %dh,%al
inc    %esi
add    $0x8,%eax
add    %dh,(%edx)
xor    %esi,%cs:(%ecx)
add    %al,0x4e(%edi)
push   %ebp
and    %ah,0x70(%ebx)
imul   $0x20410000,0x0(%edi),%ebp
dec    %esi
push   %ebp
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 80548cf <_IO_stdin_used+0xc4b>
xor    %bl,0x20(%ebp)
ja     80548da <_IO_stdin_used+0xc56>
jae    805489b <_IO_stdin_used+0xc17>
jo     80548de <_IO_stdin_used+0xc5a>
jae    80548f2 <_IO_stdin_used+0xc6e>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    80548ef <_IO_stdin_used+0xc6b>
push   $0x206e6120
gs
js     80548f5 <_IO_stdin_used+0xc71>
arpl   %sp,(%eax)
jae    805490d <_IO_stdin_used+0xc89>
jae    805490a <_IO_stdin_used+0xc86>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x20732500,%eax
sub    %ah,0x25202973
jae    80548c1 <_IO_stdin_used+0xc3d>
add    %ah,0x73252073
or     (%eax),%al
sub    %al,0x29(%ebx)
add    %dl,0x72(%edi)
imul   $0x7962206e,0x65(%esp,%esi,2),%esi
and    %ah,0xa2e73
push   %edi
jb     805493f <_IO_stdin_used+0xcbb>
je     805494c <_IO_stdin_used+0xcc8>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     8054956 <_IO_stdin_used+0xcd2>
je     8054963 <_IO_stdin_used+0xcdf>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054928 <_IO_stdin_used+0xca4>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     805497a <_IO_stdin_used+0xcf6>
jb     8054981 <_IO_stdin_used+0xcfd>
and    %ah,0x75(%edx)
addr16 jae 8054933 <_IO_stdin_used+0xcaf>
je     8054984 <_IO_stdin_used+0xd00>
cmp    (%eax),%ah
and    $0x62000a73,%eax
jne    8054985 <_IO_stdin_used+0xd01>
sub    $0x6f697063,%eax
inc    %eax
outsb  %ds:(%si),(%dx)
jne    8054956 <_IO_stdin_used+0xcd2>
outsl  %ds:(%esi),(%dx)
jb     8054992 <_IO_stdin_used+0xd0e>
add    %cl,(%edx)
dec    %esp
imul   $0x2065736e,0x65(%ebx),%esp
inc    %edi
push   %eax
dec    %esp
jbe    805496d <_IO_stdin_used+0xce9>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     80549bc <_IO_stdin_used+0xd38>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     8054972 <_IO_stdin_used+0xcee>
insb   (%dx),%es:(%edi)
popa
je     80549bb <_IO_stdin_used+0xd37>
jb     8054978 <_IO_stdin_used+0xcf4>
cmp    $0x68,%al
je     80549d0 <_IO_stdin_used+0xd4c>
jo     8054998 <_IO_stdin_used+0xd14>
das
das
outsb  %ds:(%si),(%dx)
jne    8054992 <_IO_stdin_used+0xd0e>
outsl  %ds:(%esi),(%dx)
jb     80549ce <_IO_stdin_used+0xd4a>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 80549e0 <_IO_stdin_used+0xd5c>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    80549a1 <_IO_stdin_used+0xd1d>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     8054a05 <_IO_stdin_used+0xd81>
popa
jb     80549f6 <_IO_stdin_used+0xd72>
cmp    (%eax),%ah
jns    8054a04 <_IO_stdin_used+0xd80>
jne    80549b7 <_IO_stdin_used+0xd33>
popa
jb     80549ff <_IO_stdin_used+0xd7b>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8054a1f <_IO_stdin_used+0xd9b>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8054a29 <_IO_stdin_used+0xda5>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     8054a46 <_IO_stdin_used+0xdc2>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     8054a45 <_IO_stdin_used+0xdc1>
outsb  %ds:(%esi),(%dx)
je     8054a03 <_IO_stdin_used+0xd7f>
jo     8054a4a <_IO_stdin_used+0xdc6>
jb     8054a54 <_IO_stdin_used+0xdd0>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     8054a64 <_IO_stdin_used+0xde0>
je     8054a71 <_IO_stdin_used+0xded>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054a36 <_IO_stdin_used+0xdb2>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054a84 <_IO_stdin_used+0xe00>
je     8054a91 <_IO_stdin_used+0xe0d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054a56 <_IO_stdin_used+0xdd2>
and    %ah,0x250a2c73
jae    8054a5e <_IO_stdin_used+0xdda>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054aa8 <_IO_stdin_used+0xe24>
je     8054ab5 <_IO_stdin_used+0xe31>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054a7a <_IO_stdin_used+0xdf6>
and    %ah,0x250a2c73
jae    8054a82 <_IO_stdin_used+0xdfe>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054ad0 <_IO_stdin_used+0xe4c>
je     8054add <_IO_stdin_used+0xe59>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054aa2 <_IO_stdin_used+0xe1e>
and    %ah,0x250a2c73
jae    8054aaa <_IO_stdin_used+0xe26>
and    %ah,0x25202c73
jae    8054ab2 <_IO_stdin_used+0xe2e>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054afc <_IO_stdin_used+0xe78>
je     8054b09 <_IO_stdin_used+0xe85>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054ace <_IO_stdin_used+0xe4a>
and    %ah,0x250a2c73
jae    8054ad6 <_IO_stdin_used+0xe52>
and    %ah,0x25202c73
jae    8054ade <_IO_stdin_used+0xe5a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054b2c <_IO_stdin_used+0xea8>
je     8054b39 <_IO_stdin_used+0xeb5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054afe <_IO_stdin_used+0xe7a>
and    %ah,0x250a2c73
jae    8054b06 <_IO_stdin_used+0xe82>
and    %ah,0x25202c73
jae    8054b0e <_IO_stdin_used+0xe8a>
and    %ah,0x250a2c73
jae    8054b16 <_IO_stdin_used+0xe92>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8054b60 <_IO_stdin_used+0xedc>
je     8054b6d <_IO_stdin_used+0xee9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8054b32 <_IO_stdin_used+0xeae>
and    %ah,0x250a2c73
jae    8054b3a <_IO_stdin_used+0xeb6>
and    %ah,0x25202c73
jae    8054b42 <_IO_stdin_used+0xebe>
and    %ah,0x250a2c73
jae    8054b4a <_IO_stdin_used+0xec6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
and    $0x6f682073,%eax
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x68,%al
je     8054bb6 <_IO_stdin_used+0xf32>
jo     8054b7e <_IO_stdin_used+0xefa>
das
das
ja     8054bbf <_IO_stdin_used+0xf3b>
ja     8054b78 <_IO_stdin_used+0xef4>
outsb  %ds:(%si),(%dx)
jne    8054b7c <_IO_stdin_used+0xef8>
outsl  %ds:(%esi),(%dx)
jb     8054bb8 <_IO_stdin_used+0xf34>
das
jae    8054bc3 <_IO_stdin_used+0xf3f>
data16
je     8054bce <_IO_stdin_used+0xf4a>
popa
jb     8054bbf <_IO_stdin_used+0xf3b>
das
and    $0xa3e2f73,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %edi
outsb  %gs:(%esi),(%dx)
gs
jb     8054bcb <_IO_stdin_used+0xf47>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8054b91 <_IO_stdin_used+0xf0d>
jne    8054be6 <_IO_stdin_used+0xf62>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8054bf7 <_IO_stdin_used+0xf73>
popa
jb     8054be8 <_IO_stdin_used+0xf64>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8054bfd <_IO_stdin_used+0xf79>
jo     8054bc5 <_IO_stdin_used+0xf41>
das
das
ja     8054c06 <_IO_stdin_used+0xf82>
ja     8054bbf <_IO_stdin_used+0xf3b>
outsb  %ds:(%si),(%dx)
jne    8054bc3 <_IO_stdin_used+0xf3f>
outsl  %ds:(%esi),(%dx)
jb     8054bff <_IO_stdin_used+0xf7b>
das
addr16
gs
je     8054c05 <_IO_stdin_used+0xf81>
gs
insb   (%dx),%es:(%edi)
jo     8054bd0 <_IO_stdin_used+0xf4c>
or     %ds:(%eax),%al
loopne 8054ba6 <_IO_stdin_used+0xf22>
add    $0x500e808,%eax
or     %ch,(%eax)
add    %eax,0x5017008
or     %cl,%al
add    %eax,0x5022008
or     %cl,0x80502(%eax)
add    0x4ffa008,%eax
or     %bh,(%eax)
add    %al,0x8
add    %al,0x6f(%ebx)
jo     8054c5d <_IO_stdin_used+0xfd9>
jb     8054c4f <_IO_stdin_used+0xfcb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8054c71 <_IO_stdin_used+0xfed>
popa
jb     8054c62 <_IO_stdin_used+0xfde>
and    %al,0x6f(%esi)
jne    8054c70 <_IO_stdin_used+0xfec>
fs
popa
je     8054c6f <_IO_stdin_used+0xfeb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x6e(%ecx)
jbe    8054c74 <_IO_stdin_used+0xff0>
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     8054c40 <_IO_stdin_used+0xfbc>
and    $0x6f662073,%eax
jb     8054c47 <_IO_stdin_used+0xfc3>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    8054ca0 <_IO_stdin_used+0x101c>
jne    8054ca6 <_IO_stdin_used+0x1022>
and    %ah,0x72(%ecx)
addr16 jne 8054ca6 <_IO_stdin_used+0x1022>
outsb  %gs:(%esi),(%dx)
je     8054c5d <_IO_stdin_used+0xfd9>
and    $0x6f662073,%eax
jb     8054c64 <_IO_stdin_used+0xfe0>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     8054cc9 <_IO_stdin_used+0x1045>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x73256020
daa
add    %ch,(%eax,%eiz,1)
pusha
and    $0x22002773,%eax
add    %ah,0x0(%eax)
insb   (%dx),%es:(%edi)
imul   $0x73006c61,0x72(%ebp,%eiz,2),%esi
push   $0x2d6c6c65
popa
insb   (%dx),%es:(%edi)
ja     8054ce4 <_IO_stdin_used+0x1060>
jns    8054cf8 <_IO_stdin_used+0x1074>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    8054cee <_IO_stdin_used+0x106a>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
sbb    %cl,0x5124808(,%eax,1)
or     %bh,0x12(%eax)
add    $0x510e808,%eax
or     %ch,(%eax)
adc    %eax,0x5115808
or     %al,-0x7ff7faef(%eax)
adc    %eax,0x5118008
or     %ah,(%eax)
syscall
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,-0x7f7faf1(%eax)
push   %cs
add    $0x50f1808,%eax
or     %dl,(%eax)
syscall
or     %cl,(%eax)
syscall
or     %al,(%eax)
syscall
or     %dl,%al
push   %cs
add    $0x5101808,%eax
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x5101808
or     %bl,(%eax)
adc    %al,0x50e4908
or     %cl,0xe(%ecx)
add    $0x50e4908,%eax
or     %al,0xe(%ecx)
add    $0x50e4908,%eax
or     %bh,0x4908050d(%eax)
push   %cs
add    $0x50fc808,%eax
or     %cl,0xe(%ecx)
add    $0x50e4908,%eax
or     %cl,0xe(%ecx)
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50e4908,%eax
or     %cl,0xe(%ecx)
add    $0x50e4908,%eax
or     %cl,0xe(%ecx)
add    $0x50d0808,%eax
or     %bl,(%eax)
adc    %al,0x50db808
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,0x4908050d(%eax)
push   %cs
add    $0x50fa808,%eax
or     %bh,0x4908050d(%eax)
push   %cs
add    $0x50db808,%eax
or     %cl,0xe(%ecx)
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,-0x47f7faf3(%eax)
or     $0xdb80805,%eax
add    $0x50db808,%eax
or     %bh,0x2008050d(%eax)
push   %cs
add    $0x50e4908,%eax
or     %ah,(%eax)
push   %cs
add    $0x50e4108,%eax
or     %dl,-0x6ff7faec(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %dl,0x28080514(%eax)
adc    $0x5,%al
or     %dl,0x28080514(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %ch,(%eax)
adc    $0x5,%al
or     %dl,0x80514(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dh,0x4c(%ecx)
add    $0x53f4a08,%eax
or     %bh,0x4c(%ecx)
add    $0x5424608,%eax
or     %al,-0x71f7fab4(%esi)
dec    %esp
add    $0x53d4708,%eax
or     %dl,0x8054c(%ebp)
add    %al,(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8055023 <_IO_stdin_used+0x139f>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %dl,%fs:%gs:0x4f(%eax)
push   %ebx
dec    %ecx
pop    %eax
dec    %esp
pop    %ecx
pop    %edi
inc    %ebx
dec    %edi
push   %edx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
add    %ah,0x6f203a73
jo     8055040 <_IO_stdin_used+0x13bc>
imul   $0x73252720,0x6e(%edi),%ebp
daa
and    %ch,0x73(%ecx)
and    %ah,0x6d(%ecx)
bound  %ebp,0x67(%ecx)
jne    805504e <_IO_stdin_used+0x13ca>
jne    8055054 <_IO_stdin_used+0x13d0>
or     (%eax),%al
and    $0x69203a73,%eax
outsb  %ds:(%esi),(%dx)
jbe    805504c <_IO_stdin_used+0x13c8>
insb   (%dx),%es:(%edi)
imul   $0x6f697470,0x6f(%eax,%eiz,1),%esp
outsb  %ds:(%esi),(%dx)
and    %ch,0x2527202d
arpl   %sp,(%edi)
or     (%eax),%al
add    %ah,0x6f203a73
jo     805507b <_IO_stdin_used+0x13f7>
imul   $0x2d2d2720,0x6e(%edi),%ebp
and    $0x64202773,%eax
outsl  %ds:(%esi),(%dx)
gs
jae    8055085 <_IO_stdin_used+0x1401>
daa
je     805503a <_IO_stdin_used+0x13b6>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8055040 <_IO_stdin_used+0x13bc>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
addr16 jne 8055095 <_IO_stdin_used+0x1411>
outsb  %gs:(%esi),(%dx)
je     8055036 <_IO_stdin_used+0x13b2>
add    %al,(%eax)
add    %al,(%eax)
and    $0x6f203a73,%eax
jo     80550ab <_IO_stdin_used+0x1427>
imul   $0x63252720,0x6e(%edi),%ebp
and    $0x64202773,%eax
outsl  %ds:(%esi),(%dx)
gs
jae    80550b5 <_IO_stdin_used+0x1431>
daa
je     805506a <_IO_stdin_used+0x13e6>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8055070 <_IO_stdin_used+0x13ec>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
addr16 jne 80550c5 <_IO_stdin_used+0x1441>
outsb  %gs:(%esi),(%dx)
je     8055066 <_IO_stdin_used+0x13e2>
add    %al,(%eax)
add    %al,(%eax)
and    $0x6f203a73,%eax
jo     80550db <_IO_stdin_used+0x1457>
imul   $0x73252720,0x6e(%edi),%ebp
daa
and    %dh,0x65(%edx)
jno    80550e9 <_IO_stdin_used+0x1465>
imul   $0x6e612073,0x65(%edx),%esi
and    %ah,0x72(%ecx)
addr16 jne 80550ee <_IO_stdin_used+0x146a>
outsb  %gs:(%esi),(%dx)
je     805508f <_IO_stdin_used+0x140b>
add    %al,(%eax)
add    %ah,0x75203a73
outsb  %ds:(%esi),(%dx)
jb     80550f5 <_IO_stdin_used+0x1471>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x706f2064,0x65(%edx),%edi
je     8055106 <_IO_stdin_used+0x1482>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edi)
sub    $0x2773252d,%eax
or     (%eax),%al
and    $0x75203a73,%eax
outsb  %ds:(%esi),(%dx)
jb     8055115 <_IO_stdin_used+0x1491>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x706f2064,0x65(%edx),%edi
je     8055126 <_IO_stdin_used+0x14a2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edi)
and    $0x27732563,%eax
or     (%eax),%al
and    $0x6f203a73,%eax
jo     8055143 <_IO_stdin_used+0x14bf>
imul   $0x71657220,0x6e(%edi),%ebp
jne    8055141 <_IO_stdin_used+0x14bd>
jb     805513f <_IO_stdin_used+0x14bb>
jae    80550fc <_IO_stdin_used+0x1478>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
addr16 jne 8055151 <_IO_stdin_used+0x14cd>
outsb  %gs:(%esi),(%dx)
je     8055108 <_IO_stdin_used+0x1484>
sub    $0x2527202d,%eax
arpl   %sp,(%edi)
or     (%eax),%al
add    %al,(%eax)
add    %ah,0x6f203a73
jo     805516f <_IO_stdin_used+0x14eb>
imul   $0x572d2720,0x6e(%edi),%ebp
and    %ah,0x69202773
jae    805512a <_IO_stdin_used+0x14a6>
popa
insl   (%dx),%es:(%edi)
bound  %ebp,0x67(%ecx)
jne    8055180 <_IO_stdin_used+0x14fc>
jne    8055186 <_IO_stdin_used+0x1502>
or     (%eax),%al
add    %al,(%eax)
add    %ah,0x6f203a73
jo     8055193 <_IO_stdin_used+0x150f>
imul   $0x572d2720,0x6e(%edi),%ebp
and    %ah,0x64202773
outsl  %ds:(%esi),(%dx)
gs
jae    805519e <_IO_stdin_used+0x151a>
daa
je     8055153 <_IO_stdin_used+0x14cf>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8055159 <_IO_stdin_used+0x14d5>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
addr16 jne 80551ae <_IO_stdin_used+0x152a>
outsb  %gs:(%esi),(%dx)
je     805514f <_IO_stdin_used+0x14cb>
add    %al,(%eax)
add    %ebx,(%ebx)
add    (%ebx),%edi
cmp    %al,0xa60000
add    %al,(%eax)
clc
cmp    $0x554ffff,%eax
add    %al,(%eax)
js     80551a0 <_IO_stdin_used+0x151c>
(bad)
jmp    *(%esi,%eax,1)
add    %al,(%eax)
mov    $0x78ffff46,%eax
add    $0x46c80000,%eax
(bad)
decl   0x48980000(%ebp,%eax,1)
(bad)
pushl  0x49380000(%ebp,%eax,1)
(bad)
(bad)
fadds  0x49d80000
(bad)
(bad)
cld
add    $0x4b180000,%eax
(bad)
incl   0x0(%esi,%eax,1)
add    %ch,0x4b(%eax)
(bad)
pushl  0x6(%eax)
add    %al,(%eax)
call   b90550ec <argp_program_version+0xb0ffbbb4>
push   %es
add    %al,(%eax)
clc
dec    %esp
(bad)
incl   (%edi,%eax,1)
add    %al,(%eax)
push   $0x20ffff4d
pop    %es
add    %al,(%eax)
clc
push   %ebx
(bad)
call   *0x38000007(%eax)
push   %esp
(bad)
(bad)
mov    $0x28000007,%esp
push   %ebp
(bad)
(bad)
cld
pop    %es
add    %al,(%eax)
sub    %dl,-0x1(%esi)
(bad)
cmp    $0x8,%al
add    %al,(%eax)
cwtl
pop    %eax
(bad)
incl   -0x17fffff8(%eax)
pop    %edx
(bad)
inc    %eax
or     %al,(%eax)
add    %ch,%al
pop    %ebx
(bad)
call   *%esp
or     %al,(%eax)
add    %bl,0x5c(%eax)
(bad)
incl   (%eax)
or     %eax,(%eax)
add    %bh,0x20ffff5c(%eax)
or     %eax,(%eax)
add    %bl,(%eax)
pop    %ebp
(bad)
decl   0x0(%ecx,%ecx,1)
add    %bh,-0x7b0000a3(%eax)
or     %eax,(%eax)
add    %ch,(%eax)
pop    %esi
(bad)
pushl  0x48000009(%eax)
pop    %esi
(bad)
dec    %eax
or     %eax,(%eax)
add    %ch,0x5e(%eax)
(bad)
jmp    *%eax
or     %eax,(%eax)
add    %cl,-0xb0000a2(%eax)
or     %eax,(%eax)
add    %cl,(%eax)
pop    %edi
(bad)
ljmp   *(%eax)
or     (%eax),%al
add    %ch,(%eax)
pop    %edi
(bad)
incl   0xa(%eax)
add    %al,(%eax)
dec    %eax
pop    %edi
(bad)
lcall  *0xa(%eax)
add    %al,(%eax)
push   $0x70ffff5f
or     (%eax),%al
add    %cl,-0x770000a1(%eax)
or     (%eax),%al
add    %ch,-0x630000a1(%eax)
or     (%eax),%al
add    %cl,%al
pop    %edi
(bad)
pushl  0x5fe80000(%edx,%ecx,1)
(bad)
dec    %esp
or     (%eax),%al
add    %ch,0xcffff60(%eax)
or     (%eax),%eax
add    %bl,0x61(%eax)
(bad)
decl   0x0(%ebx,%ecx,1)
add    %bh,0x61(%eax)
(bad)
jmp    *0xb(%eax)
add    %al,(%eax)
sbb    %ah,-0x1(%edx)
decl   0x3800000b(%eax)
(bad)
(bad)
jmp    *0x5800000b(%eax)
(bad)
(bad)
(bad)
mov    $0x7800000b,%eax
(bad)
(bad)
call   *%eax
or     (%eax),%eax
add    %bl,-0x1700009e(%eax)
or     (%eax),%eax
add    %bh,0xffff62(%eax)
or     $0x0,%al
add    %bl,%al
(bad)
(bad)
lcall  *(%eax)
or     $0x0,%al
add    %cl,0x58ffff63(%eax)
or     $0x0,%al
add    %ch,0x70ffff63(%eax)
or     $0x0,%al
add    %cl,0x64(%eax)
(bad)
pushl  -0x37fffff4(%eax)
fs
(bad)
jmp    *%esp
or     $0x0,%al
add    %ch,%al
fs
(bad)
(bad)
clc
or     $0x0,%al
add    %cl,(%eax)
gs
(bad)
call   *(%eax)
or     $0x65280000,%eax
(bad)
ljmp   *(%eax)
or     $0x65480000,%eax
(bad)
incl   0xd(%eax)
add    %al,(%eax)
push   $0x58ffff65
or     $0x65880000,%eax
(bad)
pushl  0xd(%eax)
add    %al,(%eax)
test   $0x65,%al
(bad)
decl   -0x37fffff3(%eax)
gs
(bad)
jmp    *-0x17fffff3(%eax)
gs
(bad)
(bad)
mov    $0x7800000d,%eax
data16
(bad)
incl   (%eax)
push   %cs
add    %al,(%eax)
cwtl
data16
(bad)
call   *(%esi,%ecx,1)
add    %al,(%eax)
mov    $0x28ffff66,%eax
push   %cs
add    %al,(%eax)
enter  $0xff66,$0xff
cmp    $0xe,%al
add    %al,(%eax)
test   $0x67,%al
(bad)
(bad)
jl     8055358 <_IO_stdin_used+0x16d4>
add    %al,(%eax)
call   b10552b8 <argp_program_version+0xa8ffbd80>
push   %cs
add    %al,(%eax)
push   $0xfcffff68
push   %cs
add    %al,(%eax)
push   $0x2cffff6a
sldt   (%eax)
mov    $0x58ffff6a,%eax
sldt   (%eax)
mov    $0xb0ffff6d,%eax
sldt   (%eax)
cmp    %ch,-0x1(%esi)
jmp    *%eax
sldt   (%eax)
mov    %ch,-0x1(%esi)
jmp    *(%eax,%edx,1)
add    %al,(%eax)
enter  $0xff70,$0xff
adc    %al,%fs:(%eax)
add    %ch,(%eax)
jb     805538e <_IO_stdin_used+0x170a>
(bad)
mov    $0xd8000010,%esp
jbe    8055396 <_IO_stdin_used+0x1712>
(bad)
cld
adc    %al,(%eax)
add    %cl,0x2cffff77(%eax)
adc    %eax,(%eax)
add    %bl,0x78(%eax)
(bad)
lcall  *0x68000011(%eax)
jp     80553ae <_IO_stdin_used+0x172a>
decl   (%eax)
adc    (%eax),%al
add    %ch,0x28ffff7a(%eax)
adc    (%eax),%al
add    %bh,(%eax)
jnp    80553be <_IO_stdin_used+0x173a>
call   *-0x57ffffee(%eax)
cmp    $0x12d0ff,%edi
add    %bl,(%eax)
(bad)
(bad)
decl   (%ebx,%edx,1)
add    %al,(%eax)
js     8055358 <_IO_stdin_used+0x16d4>
(bad)
(bad)
cmp    $0x13,%al
add    %al,(%eax)
mov    $0x80ffff84,%eax
adc    (%eax),%eax
add    %ch,-0x4f000069(%eax)
adc    (%eax),%eax
add    %ch,%al
xchg   %eax,%edi
(bad)
(bad)
fcoml  (%ebx)
add    %al,(%eax)
mov    %bl,0x140cffff(%eax)
add    %al,(%eax)
test   $0x99,%al
(bad)
incl   0x0(%esp,%edx,1)
add    %ch,(%eax)
lcall  $0x0,$0x1470ffff
clc
pushf
(bad)
pushl  -0x57ffffec(%eax)
popf
(bad)
jmp    *%eax
adc    $0x0,%al
add    %bh,0x18ffff9e(%eax)
adc    $0xabc80000,%eax
(bad)
decl   0x15(%eax)
add    %al,(%eax)
or     %ch,0x155cff(%edi,%edi,8)
add    %cl,-0x54(%eax)
(bad)
pushl  0x0(%ebp,%edx,1)
add    %ch,-0x54(%eax)
(bad)
decl   -0x27ffffeb(%eax)
lods   %ds:(%esi),%al
(bad)
(bad)
fcoml  0xad880000
(bad)
lcall  *(%esi,%edx,1)
add    %al,(%eax)
clc
mov    $0xff,%dl
(bad)
mov    $0x48000016,%eax
mov    $0xff,%bl
call   *%eax
push   %ss
add    %al,(%eax)
test   $0xb3,%al
(bad)
push   %esp
push   %ss
add    %al,(%eax)
call   15055424 <argp_program_version+0xcffbeec>
pop    %ss
add    %al,(%eax)
cwtl
mov    $0xff,%ah
pushl  (%eax)
pop    %ss
add    %al,(%eax)
test   $0xb4,%al
(bad)
incl   0x0(%edi,%edx,1)
add    %ch,-0x6300004b(%eax)
pop    %ss
add    %al,(%eax)
dec    %eax
mov    $0xff,%dh
dec    %esp
pop    %ss
add    %al,(%eax)
pop    %eax
mov    $0xff,%bh
jmp    *(%eax)
sbb    %al,(%eax)
add    %cl,%al
mov    $0xff,%bh
jmp    *0x18(%eax)
add    %al,(%eax)
sbb    %bh,0x189cffff(%eax)
add    %al,(%eax)
js     8055466 <_IO_stdin_used+0x17e2>
(bad)
(bad)
mov    $0xb8000018,%esp
mov    $0x18e0ffff,%eax
add    %al,(%eax)
or     %bh,0x18f8ffff(%ecx)
add    %al,(%eax)
pop    %eax
mov    $0x1910ffff,%ecx
add    %al,(%eax)
test   $0xb9,%al
(bad)
ljmp   *(%eax)
sbb    %eax,(%eax)
add    %bh,%al
mov    $0x1940ffff,%ecx
add    %al,(%eax)
sub    %bh,0x1958ffff(%edx)
add    %al,(%eax)
pop    %eax
mov    $0x1970ffff,%edx
add    %al,(%eax)
fadd   %st(4),%st
(bad)
pushl  -0x39880000(%ecx,%ebx,1)
(bad)
push   %esp
sbb    %eax,(%eax)
add    %bh,0x28ffffc6(%eax)
sbb    (%eax),%al
add    %bl,%al
(bad)
(bad)
(bad)
cmp    $0x1a,%al
add    %al,(%eax)
clc
(bad)
(bad)
call   *0x1a(%eax)
add    %al,(%eax)
cmp    %al,%bh
(bad)
pushl  0x0(%edx,%ebx,1)
add    %bl,-0x39(%eax)
(bad)
decl   -0x67ffffe6(%eax)
(bad)
(bad)
ljmp   *-0x38080000(%edx,%ebx,1)
(bad)
jmp    *%eax
sbb    (%eax),%al
add    %bl,%al
enter  $0xffff,$0x1c
sbb    (%eax),%eax
add    %cl,(%eax)
leave
(bad)
pushl  (%ebx,%ebx,1)
add    %al,(%eax)
cwtl
leave
(bad)
ljmp   *0x1b(%eax)
add    %al,(%eax)
mov    $0x7cffffc9,%eax
sbb    (%eax),%eax
add    %bl,%al
leave
(bad)
call   *-0x7ffffe5(%eax)
leave
(bad)
jmp    *-0x35e80000(%ebx,%ebx,1)
(bad)
(bad)
mov    $0xc800001b,%eax
lret   $0xffff
aam    $0x1b
add    %al,(%eax)
js     8055541 <_IO_stdin_used+0x18bd>
(bad)
push   %eax
sbb    (%eax),%eax
add    %ch,0x8ffffcb(%eax)
sbb    $0x0,%al
add    %bl,%al
lret
(bad)
jmp    *(%eax)
sbb    $0x0,%al
add    %cl,0x44ffffcc(%eax)
sbb    $0x0,%al
add    %bh,0x5cffffcc(%eax)
sbb    $0x0,%al
add    %ch,%al
int3
(bad)
pushl  0x0(%esp,%ebx,1)
add    %bl,(%eax)
int    $0xff
decl   -0x32380000(%esp,%ebx,1)
(bad)
pushl  0x800001c(%eax)
into
(bad)
dec    %eax
sbb    $0x0,%al
add    %cl,-0x32(%eax)
(bad)
jmp    *%eax
sbb    $0x0,%al
add    %cl,-0x7000032(%eax)
sbb    $0x0,%al
add    %ch,%al
into
(bad)
pushl  -0x30b80000(,%ebx,1)
(bad)
pushl  0x1d(%eax)
add    %al,(%eax)
enter  $0xffcf,$0xff
movsb  %ds:(%esi),%es:(%edi)
sbb    $0xcff80000,%eax
(bad)
dec    %eax
sbb    $0xd0280000,%eax
(bad)
(bad)
in     (%dx),%al
sbb    $0xd0780000,%eax
(bad)
call   *(%eax)
push   %ds
add    %al,(%eax)
test   $0xd0,%al
(bad)
pushl  (%eax)
push   %ds
add    %al,(%eax)
fcom   %st(0)
(bad)
decl   0x0(%esi,%ebx,1)
add    %cl,(%eax)
sar    %edi
ljmp   *0x0(%esi,%ebx,1)
add    %bh,(%eax)
sar    %edi
decl   -0x2e580000(%esi,%ebx,1)
(bad)
pushl  -0x37ffffe2(%eax)
(bad)
(bad)
jmp    *(%eax)
pop    %ds
add    %al,(%eax)
sbb    %dl,%bh
(bad)
incl   0x0(%edi,%ebx,1)
add    %ch,%al
xlat   %ds:(%ebx)
(bad)
decl   -0x27880000(%edi,%ebx,1)
(bad)
jmp    *%eax
pop    %ds
add    %al,(%eax)
enter  $0xffd8,$0xff
hlt
pop    %ds
add    %al,(%eax)
test   $0xd9,%al
(bad)
pushl  (%eax,%eiz,1)
add    %al,(%eax)
sub    %ah,%bh
(bad)
(bad)
mov    $0xb8000020,%esp
out    %eax,$0xff
call   *%esp
and    %al,(%eax)
add    %cl,(%eax)
call   28f25669 <argp_program_version+0x20ecc131>
add    %al,(%eax)
cmp    %ch,%cl
(bad)
lcall  *0x21(%eax)
add    %al,(%eax)
cwtl
ljmp   $0x0,$0x21c4ffff
or     %ch,%bl
(bad)
incl   (%eax)
and    (%eax),%al
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805569b <_IO_stdin_used+0x1a17>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pushf
cmp    %bh,%bh
incl   0x4(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     80556bb <_IO_stdin_used+0x1a37>
js     80556b9 <_IO_stdin_used+0x1a35>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,(%eax)
inc    %ecx
(bad)
decl   (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,(%ecx,%eax,2)
(bad)
dec    %ecx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
inc    %eax
jns    80556f4 <_IO_stdin_used+0x1a70>
push   %cs
add    $0x44,%al
or     0xa(%edi),%esp
push   %cs
add    $0x41,%al
or     0xa(%eax),%ecx
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,0x0(%eax,%eax,1)
add    %bl,%ah
inc    %edx
(bad)
lcall  *0x0(%ecx)
inc    %ebx
push   %cs
addb   $0x51,(%ecx)
or     (%esi),%cl
add    $0x44,%al
or     (%edx),%eax
outsl  %ds:(%esi),(%dx)
or     (%esi),%cl
add    $0x41,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x58000000(%eax)
inc    %ebx
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0x41080e0a(%edi),%al
ret
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%esp
add    %al,(%eax)
les    (%eax),%eax
add    %al,(%eax)
aam    $0x43
(bad)
(bad)
cmp    (%ecx),%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
add    (%edx),%esp
add    %ecx,(%edx)
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
add    %al,(%eax)
add    %cl,-0x1(%esp,%edi,1)
decl   0x3(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x28,%eax
or     $0x1,%al
add    %al,(%eax)
int3
inc    %esp
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %bh,0xe(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
cmp    %al,(%ecx)
add    %al,(%eax)
lock inc %esp
(bad)
(bad)
jnp    80557c6 <_IO_stdin_used+0x1b42>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x52,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %bh,0x1(%eax)
add    %al,(%eax)
xor    %al,-0x1(%ebp)
decl   (%ecx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x48,0x2400e45
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
lahf
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
sbb    %al,(%eax)
add    %al,(%eax)
int3
add    %eax,(%eax)
add    %ch,%ah
inc    %ebp
(bad)
ljmp   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
jo     8055863 <_IO_stdin_used+0x1bdf>
inc    %esi
or     (%esi),%cl
add    $0x41,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %ch,%al
add    %eax,(%eax)
add    %al,0x46(%eax)
(bad)
incl   0x6(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x65500e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%ebx),%eax
mov    $0x140e0a01,%edx
inc    %ebx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
xor    $0x2,%al
or     (%esi),%cl
adc    $0x45,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,0x2(%eax)
add    %al,(%eax)
pusha
dec    %esp
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ch,0xc(%esi,%ecx,1)
inc    %ecx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
test   %al,(%edx)
add    %al,(%eax)
je     805595a <_IO_stdin_used+0x1cd6>
(bad)
jmp    *%edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1900e43
insb   (%dx),%es:(%edi)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
les    (%edx),%eax
add    %al,(%eax)
and    $0x4d,%al
(bad)
(bad)
stc
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1900e43
les    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
add    $0x3,%al
add    %al,(%eax)
in     $0x4d,%al
(bad)
jmp    *0x2(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1f00e46
mov    $0x1,%dh
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
dec    %eax
add    (%eax),%eax
add    %dl,(%eax)
push   %eax
(bad)
decl   0x2(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
push   %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%edx
add    %al,(%eax)
add    %cl,0x20000003(%eax)
push   %edx
(bad)
incl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,0x530c0000(%ebx,%eax,1)
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
pop    %esi
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x3,$0x0
push   %eax
push   %ebx
(bad)
lcall  *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,%al
add    (%eax),%eax
add    %dl,0x5cffff53(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
push   %esp
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
adc    $0x4,%al
add    %al,(%eax)
les    -0x1(%ebx),%edx
call   *0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x41100e0a(%edi),%al
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,0x0(%esp,%eax,1)
add    %ch,(%esp,%edx,2)
(bad)
ljmp   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
pushw  %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
js     8055b02 <_IO_stdin_used+0x1e7e>
add    %al,(%eax)
jo     8055b56 <_IO_stdin_used+0x1ed2>
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
nop
add    $0x0,%al
add    %bh,0x54(%eax)
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
test   $0x4,%al
add    %al,(%eax)
adcb   $0x17,-0x1(%edi,%edi,8)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dh,(%eax)
add    %al,(%eax)
add    %bh,0x548c0000(%esp,%eax,1)
(bad)
(bad)
jp     8055b4a <_IO_stdin_used+0x1ec6>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%eax),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
lock add $0x0,%al
add    %bl,%al
push   %esp
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
or     %al,0x54e00000
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
and    %al,0x54e80000
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cmp    %al,0x54f00000
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
push   %eax
add    $0x54f80000,%eax
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,(%eax,%eax,1)
add    %al,(%eax)
fs
add    $0x55040000,%eax
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
jl     8055c07 <_IO_stdin_used+0x1f83>
add    %al,(%eax)
or     $0x55,%al
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
add    $0x55140000,%eax
(bad)
(bad)
mov    $0x0,%edx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa9,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
aam    $0x5
add    %al,(%eax)
xchg   %eax,%esp
push   %ebp
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff9f,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x6,%al
add    %al,(%eax)
add    $0x56,%al
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,(%eax,%eax,1)
add    %al,(%eax)
sub    %al,(%esi)
add    %al,(%eax)
adc    %dl,-0x1(%esi)
lcall  *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x14600e43
add    %al,(%eax)
push   %eax
push   %es
add    %al,(%eax)
mov    %dl,-0x1(%esi)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0x90000006
push   %esi
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%esi)
add    %bl,0x1bffff56(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cwtl
push   %es
add    %al,(%eax)
mov    0x1bffff56,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
mov    $0x6,%al
add    %al,(%eax)
test   $0x56,%al
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
enter  $0x6,$0x0
mov    $0x56,%al
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
loopne 8055d6c <_IO_stdin_used+0x20e8>
add    %al,(%eax)
mov    $0xa2ffff56,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff91,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
and    %al,(%edi)
add    %al,(%eax)
sub    %dl,-0x1(%edi)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
cmp    %al,(%edi)
add    %al,(%eax)
xor    %dl,-0x1(%edi)
lcall  *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff87,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
js     8055e05 <_IO_stdin_used+0x2181>
add    %al,(%eax)
nop
push   %edi
(bad)
(bad)
jp     8055e06 <_IO_stdin_used+0x2182>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%eax),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
pop    %es
add    %al,(%eax)
fcoml  -0x1(%edi)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,(%eax,%eax,1)
add    %al,(%eax)
rolb   $0x0,(%edi)
add    %ch,%al
push   %edi
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
fadds  (%edi)
add    %al,(%eax)
lock push %edi
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
lock pop %es
add    %al,(%eax)
clc
push   %edi
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
or     %cl,(%eax)
add    %al,(%eax)
add    %bl,-0x1(%eax)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
and    %cl,(%eax)
add    %al,(%eax)
or     %bl,-0x1(%eax)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cmp    %cl,(%eax)
add    %al,(%eax)
adc    %bl,-0x1(%eax)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %eax
or     %al,(%eax)
add    %bl,(%eax)
pop    %eax
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0x20000008
pop    %eax
(bad)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %al,0x28000008(%eax)
pop    %eax
(bad)
decl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edi),%ecx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
enter  $0x8,$0x0
jo     8055faa <_IO_stdin_used+0x2326>
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,(%eax)
add    %al,(%eax)
add    %bl,%ah
or     %al,(%eax)
add    %bh,-0x1(%eax,%ebx,2)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,(%eax)
add    %al,(%eax)
add    %dh,%al
or     %al,(%eax)
add    %cl,0x10ffff58(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
add    $0x9,%al
add    %al,(%eax)
test   %bl,-0x1(%eax)
(bad)
faddl  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x75,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
inc    %esp
or     %eax,(%eax)
add    %ah,(%ecx,%ebx,2)
(bad)
pushl  0x0
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
adc    %ch,0xe(%ecx)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %dh,0x9(%eax)
add    %al,(%eax)
cmp    %bl,-0x1(%ecx)
(bad)
jge    8055ffe <_IO_stdin_used+0x237a>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x5e,0x2200e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
les    (%ecx),%ecx
add    %al,(%eax)
fs
pop    %ecx
(bad)
(bad)
stc
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
inc    %edi
xchg   %al,(%ebx,%eax,4)
add    $0x41c30a69,%eax
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
hlt
or     %eax,(%eax)
add    %dh,(%ebx,%ebx,2)
(bad)
decl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
inc    %ecx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ah,(%eax)
or     (%eax),%al
add    %bl,0x5b(%eax)
(bad)
(bad)
cli
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa4,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
jno    80560ec <_IO_stdin_used+0x2468>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
js     8056108 <_IO_stdin_used+0x2484>
add    %al,(%eax)
add    %bl,-0x1(%esi)
(bad)
jp     8056106 <_IO_stdin_used+0x2482>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %al,(%edx)
pop    %esp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,0x5000000a(%eax)
pop    %esi
(bad)
incl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
push   $0xa
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ch,%ah
or     (%eax),%al
add    %bl,-0x1(%esi,%ebx,2)
(bad)
aas
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x1d,0x3400e45
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax,%eax,1),%edx
add    %ch,(%ebx,%ecx,1)
add    %al,(%eax)
pop    %esp
pusha
(bad)
lcall  *0x1(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffbd,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     0xa(%ebp),%ebx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
test   %cl,(%ebx)
add    %al,(%eax)
fs
popa
(bad)
ljmp   *0x4(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x72,0x3500e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
les    (%ebx),%ecx
add    %al,(%eax)
aam    $0x65
(bad)
jmp    *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
outsl  %ds:(%esi),(%dx)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%edx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
push   $0xf4000000
or     (%eax),%eax
add    %dl,-0x1(%esi,%eiz,2)
dec    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
pop    %ebp
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
push   %ebp
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edx),%ecx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx),%esp
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %ah,0xc(%eax)
add    %al,(%eax)
mov    $0x7ffff66,%eax
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
push   $0xa
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
rorb   (%eax,%eax,1)
add    %bl,0x68(%eax)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x3cf5b1fe(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %dh,%al
or     $0x0,%al
add    %bh,0x68(%eax)
(bad)
decl   0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7a300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x49,%al
or     0xe(%ebx),%eax
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
pop    %eax
or     $0x68a00000,%eax
(bad)
ljmp   *0x6(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x6,0x3700e43
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bl,-0x2ffffff3(%eax)
outsb  %ds:(%esi),(%dx)
(bad)
jmp    *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ebp)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x4e,0x2300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x2c,%al
add    %al,(%eax)
add    %dl,%ah
or     $0x6f040000,%eax
(bad)
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %al,(%edx)
dec    %ebx
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%esi,%ecx,1)
add    %al,(%eax)
xor    $0x6f,%al
(bad)
(bad)
aas
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2800e46
push   %esi
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
dec    %eax
push   %cs
add    %al,(%eax)
xor    %dh,-0x1(%ecx)
(bad)
ljmp   $0xe41,$0x12
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30af002,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
js     805650c <_IO_stdin_used+0x2888>
add    %al,(%eax)
lock cmp $0xffffffff,%edi
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
addl   $0x48,(%ebx)
push   %cs
pusha
insl   (%dx),%es:(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
push   %cs
add    %al,(%eax)
add    $0x84,%al
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
push   %esp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
aam    $0xe
add    %al,(%eax)
je     80564e2 <_IO_stdin_used+0x285e>
(bad)
lcall  *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0x41100e0a(%edx),%bh
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,(%edi,%ecx,1)
add    %al,(%eax)
pop    %esp
test   %edi,%edi
(bad)
jp     805659a <_IO_stdin_used+0x2916>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
adc    %al,(%edx)
jo     80565bb <_IO_stdin_used+0x2937>
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cmp    %cl,(%edi)
add    %al,(%eax)
mov    $0x85,%al
(bad)
inc    %ecx
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffad,0x3500e43
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
js     805660d <_IO_stdin_used+0x2989>
add    %al,(%eax)
inc    %eax
mov    %bh,%bh
ljmp   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4802(%ebx)
dec    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%esi),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
test   $0xf,%al
add    %al,(%eax)
rorb   $0x0,0x108ffff(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
jl     805664d <_IO_stdin_used+0x29c9>
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x45,%al
or     0xa(%ebp),%ebp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
arpl   %cx,(%edx)
push   %cs
or     %al,-0x3d(%esi)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
loopne 8056675 <_IO_stdin_used+0x29f1>
add    %al,(%eax)
cwtl
mov    %edi,%edi
incl   (%ebx)
or     $0x41000000,%eax
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa042203,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x47,%al
or     (%eax),%edx
add    %al,(%eax)
add    %dl,(%eax)
adc    %al,(%eax)
add    %bh,-0x6a(%eax)
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
and    $0x10,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xchg   %eax,%esi
(bad)
pushl  0x0
inc    %ebx
push   %cs
xor    %dh,0xe(%ecx)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
cmp    $0x10,%al
add    %al,(%eax)
int3
xchg   %eax,%esi
(bad)
lcall  *0x0
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
push   %eax
adc    %al,(%eax)
add    %bl,%al
xchg   %eax,%esi
(bad)
jmp    *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xa,0x7b300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%esi),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
adc    %al,(%eax)
add    %dh,%ah
xchg   %eax,%esi
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cwtl
add    %al,(%eax)
add    %ah,%ah
adc    %al,(%eax)
add    %ah,-0x1(%edi,%edx,4)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adcb   $0x0,(%ecx)
add    %bh,(%eax)
pushf
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %bl,0x70000011(%eax)
pushf
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    $0xac000011,%esp
pushf
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
aam    $0x11
add    %al,(%eax)
aam    $0x9c
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
clc
adc    %eax,(%eax)
add    %ah,-0x63(%eax)
(bad)
call   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0x0(%eax,%eax,1)
add    %cl,(%edx,%edx,1)
add    %al,(%eax)
pop    %esp
popf
(bad)
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
adc    %fs:(%eax),%al
add    %al,(%esi,%ebx,4)
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     805690f <_IO_stdin_used+0x2c8b>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %dl,-0x618c0000(%edx,%edx,1)
(bad)
decl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffe8,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
call   38056983 <argp_program_version+0x2fffd44b>
lahf
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
adc    (%eax),%eax
add    %ah,-0x61(%eax)
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
sbb    $0x0,%al
add    %al,(%eax)
adc    %fs:(%eax),%eax
add    %dh,-0x1(%edi,%ebx,4)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %al,-0x604c0000(%ebx,%edx,1)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
test   $0x13,%al
add    %al,(%eax)
rcrb   0x43ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
rclb   $0x0,(%ebx)
add    %cl,(%eax)
mov    0x4bffff,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %edi
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bl,%al
adc    (%eax),%eax
add    %al,-0x60(%eax)
(bad)
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
lock adc (%eax),%eax
add    %bh,-0x60(%eax)
(bad)
decl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %edi
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %cl,(%eax)
adc    $0x0,%al
add    %dh,0x23ffffa0(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
and    %dl,(%eax,%eax,1)
add    %cl,%al
mov    0x23ffff,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %bh,(%eax)
adc    $0x0,%al
add    %ah,%al
mov    0xa7affff,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
jl     8056b16 <_IO_stdin_used+0x2e92>
add    %al,(%eax)
sbb    $0xab,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %bh,-0x53840000(%esp,%edx,1)
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,%al
adc    $0x0,%al
add    %cl,0x11ffffac(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,-0x536c0000(,%edx,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
adc    $0xaca00000,%eax
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
cmp    $0x15,%al
add    %al,(%eax)
mov    $0x19ffffac,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x15(%eax)
add    %al,(%eax)
enter  $0xffac,$0xff
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
je     8056c0f <_IO_stdin_used+0x2f8b>
add    %al,(%eax)
in     $0xac,%al
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
test   $0x15,%al
add    %al,(%eax)
adc    %ch,0xd4ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ah,%ah
adc    $0xadb40000,%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
cld
adc    $0xadcc0000,%eax
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
xor    %dl,(%esi)
add    %al,(%eax)
sub    %ch,0x1affff(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
inc    %esp
push   %ss
add    %al,(%eax)
xor    $0xae,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,0x16(%eax)
add    %al,(%eax)
inc    %eax
scas   %es:(%edi),%al
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x0(%esi,%edx,1)
add    %cl,-0x1(%esi,%ebp,4)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %al,0x58000016(%eax)
scas   %es:(%edi),%al
(bad)
ljmp   *0x0(%ebx)
inc    %ebx
push   %cs
addb   $0x2,(%ecx)
cmpsl  %es:(%edi),%ds:(%esi)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
pushf
push   %ss
add    %al,(%eax)
in     (%dx),%al
scas   %es:(%edi),%al
(bad)
ljmp   *0x0(%ebp)
inc    %ebx
push   %cs
addb   $0x2,(%ecx)
test   $0x40e,%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x80000016,%eax
scas   %es:(%edi),%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
rclb   (%esi)
add    %al,(%eax)
cwtl
scas   %es:(%edi),%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
call   b8056d87 <argp_program_version+0xafffd84f>
scas   %es:(%edi),%eax
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
or     $0x17,%al
add    %al,(%eax)
cmp    $0xb0,%al
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
and    $0x17,%al
add    %al,(%eax)
push   %esp
mov    $0xff,%al
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cmp    $0x17,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    $0xff,%al
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
push   %esp
pop    %ss
add    %al,(%eax)
test   %dh,0xa5ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
js     8056e15 <_IO_stdin_used+0x3191>
add    %al,(%eax)
adc    %dh,0x33ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
nop
pop    %ss
add    %al,(%eax)
cmp    %dh,0x33ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
test   $0x17,%al
add    %al,(%eax)
pusha
mov    $0xff,%cl
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
rclb   $0x0,(%edi)
add    %cl,0x5affffb1(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %bh,%ah
pop    %ss
add    %al,(%eax)
lods   %ds:(%esi),%al
mov    $0xff,%cl
lcall  *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x30,%al
add    %al,(%eax)
add    %bh,(%eax)
sbb    %al,(%eax)
add    %dl,%al
mov    $0xff,%cl
pushl  0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edi),%ah
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sbb    %al,(%eax)
add    %bl,(%edx,%esi,4)
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
nop
sbb    %al,(%eax)
add    %ch,(%eax)
mov    $0xff,%dl
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x18,%ah
add    %al,(%eax)
xor    $0xb2,%al
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
fcomps (%eax)
add    %al,(%eax)
pusha
mov    $0xff,%dl
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bh,%al
sbb    %al,(%eax)
add    %dh,-0x4e(%eax)
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
adc    $0x19,%al
add    %al,(%eax)
test   %dh,0x29ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,(%ecx,%ebx,1)
add    %al,(%eax)
xchg   %eax,%esp
mov    $0xff,%dl
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,0x0(%ecx,%ebx,1)
add    %ah,0x70ffff(%edx,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xe(%edx,%ecx,1),%bl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%ebp
add    %bh,0x19(%eax)
add    %al,(%eax)
lock mov $0xff,%dl
call   *(%edi)
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffdc,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
in     $0x3,%eax
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
call   a805708a <argp_program_version+0x9fffdb52>
mov    $0xff,%bh
decl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0x8(%esi,%ecx,1),%al
inc    %ecx
ret
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %cl,(%edx,%ebx,1)
add    %al,(%eax)
int3
mov    $0xff,%bh
call   *%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
pop    %edx
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
jg     80570ce <_IO_stdin_used+0x344a>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax),%edx
add    %al,(%eax)
push   %esp
sbb    (%eax),%al
add    %dl,-0x1(%eax,%edi,4)
incl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2400e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%esi),%eax
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x6fffffe6(%eax)
mov    $0x46ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xcc00001a,%esp
mov    $0xd4ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7f,0x22c0e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
test   %al,(%eax)
add    %al,(%eax)
cld
sbb    (%eax),%al
add    %ch,-0x1(%ecx,%edi,4)
pushl  0xd(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff98,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x48,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
fwait
or     (%esi),%cl
adc    $0x48,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%eax),%ebx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%ebx),%eax
push   %edx
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
test   %bl,(%ebx)
add    %al,(%eax)
fs
(bad)
(bad)
incl   0x0(%ebx)
inc    %ebx
push   %cs
xor    %al,(%edx)
jg     8057229 <_IO_stdin_used+0x35a5>
add    $0x14,%al
add    %al,(%eax)
add    %bl,-0x39240000(%ebx,%ebx,1)
(bad)
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xe(%edi)
add    $0x0,%al
push   $0xb4000000
sbb    (%eax),%eax
add    %dl,(%edi,%eax,8)
(bad)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
and    %bl,(%eax,%eax,1)
add    %bl,%al
(bad)
(bad)
call   *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     80572cf <_IO_stdin_used+0x364b>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8057306 <_IO_stdin_used+0x3682>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %cl,-0x37340000(%esp,%ebx,1)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %cl,%al
sbb    $0x0,%al
add    %al,(%eax)
leave
(bad)
incl   (%edx)
.byte 0xd0
xchg   %eax,%edi
add    $0x8,%al
mov    $0x97,%al
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
adc    $0x8f,%al
add    $0x8,%al
or     $0x54000000,%eax
cmp    $0x5,%al
or     %bl,(%ecx)
add    %al,(%eax)
add    %cl,(%eax)
popl   0x1b08
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x8f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cwtl
xchg   %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %bl,(%eax)
(bad)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
jmp    13058f70 <argp_program_version+0xafffa38>
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
nop
add    $0x208,%eax
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,%ah
mov    %es,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
mov    $0x8c,%ah
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x34(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x7e(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x8f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,-0x71(%esi)
add    $0x8,%al
popw   (%eax,%ecx,1)
jbe    8058fa5 <_IO_stdin_used+0x5321>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8058fe6 <_IO_stdin_used+0x5362>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8059027 <_IO_stdin_used+0x53a3>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8059068 <_IO_stdin_used+0x53e4>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    80590a9 <_IO_stdin_used+0x5425>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
adcb   $0x4,-0x67eff7fb(%ecx)
or     %dh,0x3d(%ebp)
add    $0x591e008,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x6608053d(%edi)
add    %al,(%eax)
add    %cl,0x805(%ebp,%edi,1)
add    %al,(%eax)
pusha
ds
add    $0x8,%eax
add    %dl,0x8053d(%ebx)
add    %eax,(%eax)
add    %bl,0x8053d(%edi)
add    %al,(%eax)
add    %bl,0x805(%esi,%edi,1)
add    %al,(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
cmp    $0x3db70805,%eax
add    $0x8,%eax
add    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     8059257 <argp_program_bug_address+0x4f>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %ch,0x61(%ebp)
outsb  %ds:(%si),(%dx)
gs
je     8059258 <argp_program_bug_address+0x50>
arpl   %sp,(%eax)
je     8059254 <argp_program_bug_address+0x4c>
jo     805925a <argp_program_bug_address+0x52>
and    %ah,0x69(%edx,%esi,2)
jbe    8059260 <argp_program_bug_address+0x58>
and    %ch,0x70(%edi)
gs
jb     8059262 <argp_program_bug_address+0x5a>
je     805926c <argp_program_bug_address+0x64>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
leave
cmp    $0x805,%eax
add    %al,(%eax)
add    $0x1000500,%eax
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
push   %es
add    %al,(%edi)
add    %al,(%edi)
add    %al,(%edi)
add    %cl,(%eax)
add    %cl,(%edx)
add    %cl,(%eax,%eax,1)
or     %eax,(%eax)
or     $0xb025800,%eax
add    %dl,(%esi)
add    %bh,0x3f(%eax)
add    $0x8,%eax
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
incl   0x0(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %bl,0x1000000
add    %al,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
dec    %edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,%al
add    $0x93100805,%eax
add    $0x10008,%eax
add    %al,%al
xchg   %eax,%ebx
add    $0x108,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
