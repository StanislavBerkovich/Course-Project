das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %dl,%bh
stc
orl    $0x8b6217e6,-0x53bcbaf8(%edi)
8b
insl   (%dx),%es:(%edi)
fmul   %st,%st(4)
xchg   %eax,%ecx
shr    %edi
repz
.byte 0xbd
add    (%eax),%eax
add    %al,(%eax)
popf
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%esp,%ebp,8)
dec    %ebp
adc    %eax,(%eax)
add    %al,(%eax)
add    %bl,-0x5f000000(%ebp)
add    %al,(%eax)
add    %bh,0x4bac9e76(%eax,%edx,2)
jecxz  80481b8 <_init-0x1bfc>
in     $0x62,%al
inc    %ecx
cmc
mov    $0xea0ef18d,%ecx
shr    %cl,%edi
push   %cs
xor    %ah,%al
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
sbb    $0x9,%al
add    %al,(%eax)
sub    %dh,%al
add    $0x8,%eax
add    %al,(%eax)
add    %bl,(%ecx)
add    %ch,(%edi)
or     %eax,(%eax)
add    %bh,0x805f8(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%edx)
add    %ah,(%ebx)
or     %eax,(%eax)
add    %ch,(%eax)
lock add $0x8,%eax
add    %al,(%eax)
add    %bl,(%edx)
add    %al,0x7(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stos   %eax,%es:(%edi)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,$0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     %eax,(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stos   %eax,%es:(%edi)
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edx
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cwtl
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x8(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edi)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%bl
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
faddl  (%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fiadd  (%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x8,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    0x5,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%esi,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x4(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ebx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%cl
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%edi),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%dl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
iret
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x6(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%cl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx,%ecx,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    $0x4,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
testl  $0x0,(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
iret
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%bx,%si)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
(bad)
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%esi)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sahf
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
js     80484d4 <_init-0x18e0>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %ecx,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
repz pop %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
daa
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     8048514 <_init-0x18a0>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebp
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
incb   (%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x2,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsl  %ds:(%esi),%es:(%edi)
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jp     804855e <_init-0x1856>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
orl    $0x0,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%ebx),%es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %cs
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ebx
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %esi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x8(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edi
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ch
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jecxz  8048615 <_init-0x179f>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esp
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
rolb   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lods   %ds:(%esi),%al
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx)
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%cl
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   $0x8,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ss
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cli
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x7(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x4(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x6
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x8(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
arpl   %ax,(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x4(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x6(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx)
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,(%edi)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x7(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%bl
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fisttpll (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x8,%bh
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     $0x8,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edx
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%ebx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x5,%ebx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ljmp   $0x0,$0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cld
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bh
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cs
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,$0x6
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
je     80488b2 <_init-0x1502>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lret   $0x6
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x5,%ch
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fiaddl 0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    (%edi),%eax
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x5(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%esi),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jb     8048995 <_init-0x141f>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %al,(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ch
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%esi,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%ecx),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x8(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x8(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lcall  $0x0,$0x5
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x5(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fiadd  (%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
clc
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x6(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%esi)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %al,(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
insl   (%dx),%es:(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x6(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x7(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ecx
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%cl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ah
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   $0x6
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x7(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
nop
pop    %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %eax,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
push   %es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x6,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x8(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
repz or %al,(%eax)
add    %al,-0x10(%eax)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%edx)
add    %cl,-0x5ffffffb(%ebx)
jbe    8048bf8 <_init-0x11bc>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
ltr    (%edx)
or     %al,(%eax)
add    %al,-0x10(%eax)
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%edx)
add    %cl,(%ecx)
add    %eax,(%eax)
add    %dh,0x804(%ebp,%ebx,4)
add    %al,(%eax)
adc    (%eax),%al
or     (%eax),%eax
sgdtl  (%eax)
add    %al,0x805(%esi,%esi,2)
add    %al,(%eax)
adc    (%eax),%al
push   %cs
add    %cl,%bl
add    $0xf0600000,%eax
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%edx)
add    %bl,0x64000007(%esi)
lock add $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%edx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     8048c88 <_init-0x112c>
jae    8048ccb <_init-0x10e9>
xor    %al,%cs:(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048cdb <_init-0x10d9>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
bound  %esp,0x73(%ecx)
imul   $0x4d54495f,0x0(%ebx),%esp
pop    %edi
fs
gs
jb     8048ce9 <_init-0x10cb>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
gs
jb     8048d11 <_init-0x10a3>
outsl  %ds:(%esi),(%dx)
jb     8048d01 <_init-0x10b3>
imul   $0x62640074,0x69(%esi),%ebp
jne    8048d1e <_init-0x1096>
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048d23 <_init-0x1091>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     8048d27 <_init-0x108d>
pop    %edi
je     8048d3c <_init-0x1078>
jo     8048d2a <_init-0x108a>
add    %ah,0x75(%edx,%eiz,2)
jae    8048d2a <_init-0x108a>
insl   (%dx),%es:(%edi)
gs
jae    8048d42 <_init-0x1072>
popa
addr16
gs
pop    %edi
imul   $0x6365725f,0x72(%ebp,%eiz,2),%esi
jne    8048d4f <_init-0x1065>
jae    8048d44 <_init-0x1070>
add    %ah,0x75(%edx,%eiz,2)
jae    8048d44 <_init-0x1070>
gs
jb     8048d5a <_init-0x105a>
outsl  %ds:(%esi),(%dx)
jb     8048d4a <_init-0x106a>
data16
jb     8048d53 <_init-0x1061>
add    %bl,%gs:0x5f(%edi)
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048d6d <_init-0x1047>
popa
jb     8048d70 <_init-0x1044>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    8048d62 <_init-0x1052>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    8048d83 <_init-0x1031>
gs
jae    8048d13 <_init-0x10a1>
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048d8f <_init-0x1025>
popa
addr16
gs
pop    %edi
imul   $0x78656e5f,0x72(%ebp,%eiz,2),%esi
je     8048d2a <_init-0x108a>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     8048d96 <_init-0x101e>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048dc0 <_init-0xff4>
popa
addr16
gs
pop    %edi
imul   $0x696e695f,0x72(%ebp,%eiz,2),%esi
je     8048d5b <_init-0x1059>
pop    %edi
imul   $0x6300,0x69(%esi),%bp
insl   (%dx),%es:(%di)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     8048dca <_init-0xfea>
jo     8048dd6 <_init-0xfde>
outsb  %ds:(%esi),(%dx)
addr16 pop %edi
jae    8048deb <_init-0xfc9>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     8048dde <_init-0xfd6>
insb   (%dx),%es:(%edi)
imul   $0x6968635f,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
fs
jb     8048df0 <_init-0xfc4>
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048e08 <_init-0xfac>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     8048dfb <_init-0xfb9>
addr16
gs
je     8048dff <_init-0xfb5>
jbe    8048e03 <_init-0xfb1>
insb   (%dx),%es:(%edi)
jne    8048e0a <_init-0xfaa>
pop    %edi
jae    8048e21 <_init-0xf93>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x732e6869,0x6e(%edx),%esp
outsl  %ds:(%esi),(%dx)
xor    %eax,%cs:(%eax)
outsb  %ds:(%esi),(%dx)
imul   $0x6f727265,0x5f(%eax),%ebp
jb     8048e20 <_init-0xf94>
addr16
gs
je     8048dc5 <_init-0xfef>
outsb  %ds:(%esi),(%dx)
imul   $0x65657266,0x5f(%eax),%ebp
add    %ch,0x62(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
imul   $0x73756264,0x2d(%eax),%ebp
jae,pn 8048e4b <_init-0xf69>
xor    %eax,%cs:(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048e56 <_init-0xf5e>
je     8048e52 <_init-0xf62>
gs
js     8048e5f <_init-0xf55>
je     8048e57 <_init-0xf5d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
imul   $0x656e6e6f,%fs:0x63(%ebx),%esi
arpl   %si,0x64(%eax,%eax,1)
bound  %esi,0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048e82 <_init-0xf32>
popa
addr16
gs
pop    %edi
addr16
gs
je     8048e76 <_init-0xf3e>
popa
jb     8048e81 <_init-0xf33>
jae    8048e1c <_init-0xf98>
bound  %esi,%fs:0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
jne    8048e9c <_init-0xf18>
jb     8048e95 <_init-0xf1f>
data16
add    %ch,0x69(%esi)
push   $0x7562645f
jae    8048e9a <_init-0xf1a>
jo     8048eaf <_init-0xf05>
outsl  %ds:(%esi),(%dx)
js     8048eb9 <_init-0xefb>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
ja     8048e45 <_init-0xf6f>
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048ec1 <_init-0xef3>
popa
addr16
gs
pop    %edi
jne    8048ec2 <_init-0xef2>
jb     8048ebb <_init-0xef9>
data16
add    %ah,0x75(%edx,%eiz,2)
jae    8048ebc <_init-0xef8>
gs
jb     8048ed2 <_init-0xee2>
outsl  %ds:(%esi),(%dx)
jb     8048ec2 <_init-0xef2>
push   $0x6e5f7361
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x75(%edx,%eiz,2)
jae    8048ed0 <_init-0xee4>
gs
jb     8048ee6 <_init-0xece>
outsl  %ds:(%esi),(%dx)
jb     8048ed6 <_init-0xede>
imul   $0x746573,0x5f(%ebx),%esi
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    8048efa <_init-0xeba>
popa
addr16
gs
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
ja     8048eee <_init-0xec6>
insl   (%dx),%es:(%edi)
gs
je     8048efb <_init-0xeb9>
outsl  %ds:(%esi),(%dx)
fs
pop    %edi
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
add    %ah,0x75(%edx,%eiz,2)
jae    8048eff <_init-0xeb5>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048f12 <_init-0xea2>
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
ja     8048f1b <_init-0xe99>
je     8048f1c <_init-0xe98>
pop    %edi
jb     8048f1c <_init-0xe98>
jo     8048f25 <_init-0xe8f>
jns    8048f1a <_init-0xe9a>
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x6c,(%eax),%eax
imul   $0x2d737562,0x64(%edx),%esp
xor    %ebp,(%esi)
jae    8048f40 <_init-0xe74>
xor    %cs:(%eax),%eax
bound  %esi,%fs:0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
addr16
gs
je     8048f47 <_init-0xe6d>
jne    8048f58 <_init-0xe5c>
imul   $0x64006466,0x5f(%eax),%edi
bound  %esi,0x73(%ebp)
pop    %edi
jae    8048f5f <_init-0xe55>
jne    8048f6d <_init-0xe47>
outsl  %fs:(%esi),(%dx)
ja     8048f6b <_init-0xe49>
add    %ah,0x75(%edx,%eiz,2)
jae    8048f62 <_init-0xe52>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
addr16
gs
je     8048f71 <_init-0xe43>
imul   $0x68747561,0x5f(%ebx),%esi
outsb  %gs:(%esi),(%dx)
je     8048f86 <_init-0xe2e>
arpl   %sp,0x74(%ecx)
gs add %ah,%fs:%gs:0x75(%edx,%eiz,2)
jae    8048f87 <_init-0xe2d>
insl   (%dx),%es:(%edi)
gs
jae    8048f9f <_init-0xe15>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
gs
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     8048fa0 <_init-0xe14>
je     8048fbc <_init-0xdf8>
jo     8048faa <_init-0xe0a>
add    %ah,0x75(%edx,%eiz,2)
jae    8048faa <_init-0xe0a>
insl   (%dx),%es:(%edi)
gs
jae    8048fc2 <_init-0xdf2>
popa
addr16
gs
pop    %edi
popa
jo     8048fc6 <_init-0xdee>
outsb  %gs:(%esi),(%dx)
fs
pop    %edi
popa
jb     8048fc4 <_init-0xdf0>
jae    8048fbe <_init-0xdf6>
jbe    8048fc2 <_init-0xdf2>
insb   (%dx),%es:(%edi)
imul   $0x75626400,0x74(%ebx),%esi
jae    8048fca <_init-0xdea>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8048fde <_init-0xdd6>
outsb  %ds:(%esi),(%dx)
pop    %edi
jo     8048fef <_init-0xdc5>
imul   $0x64006574,0x61(%esi),%esi
bound  %esi,0x73(%ebp)
pop    %edi
bound  %esi,0x73(%ebp)
pop    %edi
jb     8048ff3 <_init-0xdc1>
imul   $0x64007265,0x74(%bp,%di),%esi
bound  %esi,0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
jb     804900c <_init-0xda8>
popa
fs
pop    %edi
ja     804901e <_init-0xd96>
imul   $0x70736964,0x5f(%ebp,%eiz,2),%esi
popa
je     804901a <_init-0xd9a>
push   $0x75626400
jae    804901d <_init-0xd97>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
addr16
gs
je     804902c <_init-0xd88>
imul   $0x6e6e6f63,0x5f(%ebx),%esi
arpl   %si,%gs:0x64(%ebp,%eiz,2)
add    %ah,0x75(%edx,%eiz,2)
jae    804903e <_init-0xd76>
jae    8049046 <_init-0xd6e>
je     8049042 <_init-0xd72>
gs
jb     8049058 <_init-0xd5c>
outsl  %ds:(%esi),(%dx)
jb     8049048 <_init-0xd6c>
arpl   %bp,0x6e(%edi)
jae    8049062 <_init-0xd52>
add    %ah,0x75(%edx,%eiz,2)
jae    8049053 <_init-0xd61>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
data16
insb   (%dx),%es:(%edi)
jne    8049076 <_init-0xd3e>
push   $0x75626400
jae    8049069 <_init-0xd4b>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %ah,%gs:0x75(%edx,%eiz,2)
jae    804907f <_init-0xd35>
bound  %esi,0x73(%ebp)
pop    %edi
addr16
gs
je     8049087 <_init-0xd2d>
jo     804909c <_init-0xd18>
imul   $0x6c006574,0x61(%esi),%esi
imul   $0x2e766564,0x75(%edx),%esp
jae    80490a9 <_init-0xd0b>
xor    %eax,%cs:(%eax)
jne    80490a3 <_init-0xd11>
gs
jbe    80490a1 <_init-0xd13>
fs
gs
jbe    80490af <_init-0xd05>
arpl   %sp,0x5f(%ebp)
addr16
gs
je     80490ac <_init-0xd08>
jae    80490c4 <_init-0xcf0>
bound  %esi,0x79(%ebx)
jae    80490c8 <_init-0xcec>
gs
insl   (%dx),%es:(%edi)
add    %dh,0x64(%ebp)
gs
jbe    80490bb <_init-0xcf9>
fs
gs
jbe    80490c9 <_init-0xceb>
arpl   %sp,0x5f(%ebp)
jne    80490d3 <_init-0xce1>
jb     80490cc <_init-0xce8>
data16
add    %dh,0x64(%ebp)
gs
jbe    80490cd <_init-0xce7>
outsb  %gs:(%esi),(%dx)
jne    80490df <_init-0xcd5>
gs
jb     80490d6 <_init-0xcde>
je     80490dc <_init-0xcd8>
pop    %edi
jne    80490e8 <_init-0xccc>
jb     80490e1 <_init-0xcd3>
data16
add    %dh,0x64(%ebp)
gs
jbe    80490e2 <_init-0xcd2>
outsb  %gs:(%esi),(%dx)
jne    80490f4 <_init-0xcc0>
gs
jb     80490eb <_init-0xcc9>
je     80490f1 <_init-0xcc3>
pop    %edi
popa
fs
fs
pop    %edi
insl   (%dx),%es:(%edi)
popa
je     80490f8 <_init-0xcbc>
push   $0x6761745f
add    %dh,0x64(%ebp)
gs
jbe    80490ff <_init-0xcb5>
outsb  %ds:(%esi),(%dx)
gs
ja     80490a4 <_init-0xd10>
jne    804910a <_init-0xcaa>
gs
jbe    8049108 <_init-0xcac>
outsb  %gs:(%esi),(%dx)
jne    804911a <_init-0xc9a>
gs
jb     8049111 <_init-0xca3>
je     8049117 <_init-0xc9d>
pop    %edi
jae    8049118 <_init-0xc9c>
popa
outsb  %ds:(%esi),(%dx)
pop    %edi
fs
gs
jbe    8049125 <_init-0xc8f>
arpl   %sp,0x73(%ebp)
add    %dh,0x64(%ebp)
gs
jbe    8049124 <_init-0xc90>
fs
gs
jbe    8049132 <_init-0xc82>
arpl   %sp,0x5f(%ebp)
push   $0x745f7361
popa
add    %dh,0x64(%di)
gs
jbe    8049138 <_init-0xc7c>
insb   (%dx),%es:(%edi)
imul   $0x746e655f,0x74(%ebx),%esi
jb     804915c <_init-0xc58>
pop    %edi
addr16
gs
je     8049147 <_init-0xc6d>
outsb  %ds:(%esi),(%dx)
gs
js     8049160 <_init-0xc54>
add    %dh,0x64(%ebp)
gs
jbe    8049151 <_init-0xc63>
jne    8049162 <_init-0xc52>
jb     804915b <_init-0xc59>
data16
add    %dh,0x64(%ebp)
gs
jbe    804915c <_init-0xc58>
outsb  %gs:(%esi),(%dx)
jne    804916e <_init-0xc46>
gs
jb     8049165 <_init-0xc4f>
je     804916b <_init-0xc49>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
ja     804910b <_init-0xca9>
jne    8049171 <_init-0xc43>
gs
jbe    804916f <_init-0xc45>
outsb  %gs:(%esi),(%dx)
jne    8049181 <_init-0xc33>
gs
jb     8049178 <_init-0xc3c>
je     804917e <_init-0xc36>
pop    %edi
addr16
gs
je     804917d <_init-0xc37>
insb   (%dx),%es:(%edi)
imul   $0x746e655f,0x74(%ebx),%esi
jb     80491a1 <_init-0xc13>
add    %dh,0x64(%ebp)
gs
jbe    804918d <_init-0xc27>
fs
gs
jbe    804919b <_init-0xc19>
arpl   %sp,0x5f(%ebp)
addr16
gs
je     8049198 <_init-0xc1c>
jo     80491ad <_init-0xc07>
outsl  %ds:(%esi),(%dx)
jo     80491a3 <_init-0xc11>
jb     80491b4 <_init-0xc00>
jns    80491a1 <_init-0xc13>
jbe    80491a5 <_init-0xc0f>
insb   (%dx),%es:(%edi)
jne    80491ac <_init-0xc08>
add    %dh,0x64(%ebp)
gs
jbe    80491ac <_init-0xc08>
fs
gs
jbe    80491ba <_init-0xbfa>
arpl   %sp,0x5f(%ebp)
addr16
gs
je     80491b7 <_init-0xbfd>
jae    80491d3 <_init-0xbe1>
jae    80491bd <_init-0xbf7>
je     80491d2 <_init-0xbe2>
jb     80491bf <_init-0xbf5>
jbe    80491c3 <_init-0xbf1>
insb   (%dx),%es:(%edi)
jne    80491ca <_init-0xbea>
add    %dh,0x64(%ebp)
gs
jbe    80491ca <_init-0xbea>
insb   (%dx),%es:(%edi)
imul   $0x746e655f,0x74(%ebx),%esi
jb     80491ee <_init-0xbc6>
pop    %edi
addr16
gs
je     80491d9 <_init-0xbdb>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x64(%ebp)
gs
jbe    80491e3 <_init-0xbd1>
fs
gs
jbe    80491f1 <_init-0xbc3>
arpl   %sp,0x5f(%ebp)
addr16
gs
je     80491ee <_init-0xbc6>
jae    804920a <_init-0xbaa>
jae    8049201 <_init-0xbb3>
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x64(%ebp)
gs
jbe    80491fb <_init-0xbb9>
fs
gs
jbe    8049209 <_init-0xbab>
arpl   %sp,0x5f(%ebp)
outsb  %ds:(%esi),(%dx)
gs
ja     8049206 <_init-0xbae>
data16
jb     8049219 <_init-0xb9b>
insl   (%dx),%es:(%edi)
pop    %edi
jae    8049227 <_init-0xb8d>
jae    8049220 <_init-0xb94>
popa
je     804921b <_init-0xb99>
add    %ch,0x62(%ecx,%ebp,2)
jb     804922d <_init-0xb87>
jae,pn 804922b <_init-0xb89>
xor    %eax,%cs:(%eax)
arpl   %bp,0x63(%edi,%ebp,2)
imul   $0x65,0x67(%edi),%ebx
je     804923d <_init-0xb77>
imul   $0x62696c00,0x65(%ebp),%ebp
arpl   %bp,(%esi)
jae    8049243 <_init-0xb71>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8049251 <_init-0xb63>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     80491ed <_init-0xbc7>
data16
data16
insb   (%dx),%es:(%edi)
jne    8049265 <_init-0xb4f>
push   $0x705f5f00
jb     8049262 <_init-0xb52>
outsb  %ds:(%esi),(%dx)
je     8049262 <_init-0xb52>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
arpl   %bp,%gs:0x65(%eax,%eax,1)
js     804926f <_init-0xb45>
arpl   %si,0x0(%esi)
jae    8049274 <_init-0xb40>
je     804927d <_init-0xb37>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x70(%edi)
je     8049284 <_init-0xb30>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8049294 <_init-0xb20>
arpl   %bp,0x72(%eax)
add    %dh,0x69(%eax)
jo     804928f <_init-0xb25>
add    %bl,0x5f(%edi)
jae    80492a3 <_init-0xb11>
jb     8049295 <_init-0xb1f>
jne    80492a3 <_init-0xb11>
add    %bl,0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jo     804929e <_init-0xb16>
outsb  %ds:(%esi),(%dx)
ss
xor    $0x5f,%al
xor    (%eax),%al
addr16
gs
je     80492b3 <_init-0xb01>
ja     80492ba <_init-0xafa>
imul   $0x65736f6c,0x63(%eax,%eax,1),%esp
imul   $0x73747570,%fs:0x0(%edx),%esi
add    %ah,0x6f(%esi)
jb     80492c5 <_init-0xaef>
add    %dh,0x61(%edi)
imul   $0x735f5f00,0x64(%ecx,%ebp,2),%esi
je     80492c8 <_init-0xaec>
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x6e696c6e,0x75(%eax,%eax,1),%ebp
imul   $0x70,(%eax),%eax
jne    80492f1 <_init-0xac3>
arpl   %bp,0x61(%eax)
jb     8049282 <_init-0xb32>
jb     80492e9 <_init-0xacb>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8049290 <_init-0xb24>
pop    %edi
gs
js     80492fd <_init-0xab7>
je     8049296 <_init-0xb1e>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
je     804930c <_init-0xaa8>
pop    %edi
push   $0x6c646e61
gs
pop    %edi
popa
je     80492a8 <_init-0xb0c>
addr16
gs
je     804931c <_init-0xa98>
imul   $0x6c6c69,0x6b(%eax,%eax,1),%esp
jae    804932a <_init-0xa8a>
jb     804932b <_init-0xa89>
jo     8049328 <_init-0xa8c>
add    %dh,0x74(%ebx)
jb     8049325 <_init-0xa8f>
je     804932a <_init-0xa8a>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x65(%edx)
ja     8049331 <_init-0xa83>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
je     804933b <_init-0xa79>
insl   (%dx),%es:(%edi)
gs
pop    %edi
jb     80492d7 <_init-0xadd>
jae    804934d <_init-0xa67>
jb     804934f <_init-0xa65>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     8049357 <_init-0xa5d>
jns    80492e5 <_init-0xacf>
outsw  %gs:(%esi),(%dx)
data16
add    %ah,0x78(%ebp)
arpl   %bp,%gs:0x0(%eax,%esi,2)
data16
addr16
gs
je     8049369 <_init-0xa4b>
add    %ah,0x65(%edi)
je     804936b <_init-0xa49>
ja     804936b <_init-0xa49>
popa
insl   (%dx),%es:(%edi)
add    %ah,0x65(%edi)
je     8049374 <_init-0xa40>
jo     804936f <_init-0xa45>
add    %ah,%fs:0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8049385 <_init-0xa2f>
jb     804937f <_init-0xa35>
outsb  %gs:(%esi),(%dx)
add    %dh,0x72(%eax)
arpl   %si,0x0(%esp,%ebp,2)
ja     8049390 <_init-0xa24>
imul   $0x72747300,0x76(%ebp,%eiz,2),%esi
jae    804939c <_init-0xa18>
jb     804932a <_init-0xa8a>
jae    80493a0 <_init-0xa14>
jb     8049391 <_init-0xa23>
jae    80493a0 <_init-0xa14>
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
gs
jb     80493a9 <_init-0xa0b>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6d656d00,0x6e(%edi),%ebp
arpl   %bp,0x70(%ebp)
add    %ah,0x65(%edi)
je     80493c1 <_init-0x9f3>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     80493c8 <_init-0x9ec>
add    %ah,0x70(%ebp,%esi,2)
xor    (%eax),%al
jo     80493cb <_init-0x9e9>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x74(%ebx)
outsl  %fs:(%esi),(%dx)
jne    80493d9 <_init-0x9db>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80493d8 <_init-0x9dc>
add    %bl,0x5f(%edi)
jbe    80493eb <_init-0x9c9>
outsb  %ds:(%esi),(%dx)
jo     80493ed <_init-0x9c7>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80493f9 <_init-0x9bb>
je     80493f8 <_init-0x9bc>
jne    80493f7 <_init-0x9bd>
add    %dh,0x65(%ebx)
je     8049403 <_init-0x9b1>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804940a <_init-0x9aa>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8049414 <_init-0x9a0>
jb     8049405 <_init-0x9af>
popa
jae    804940a <_init-0x9aa>
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
jae    8049421 <_init-0x993>
jb     804941d <_init-0x997>
fs
jne    8049422 <_init-0x992>
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
js     804942b <_init-0x989>
je     804941b <_init-0x999>
je     80493f2 <_init-0x9c2>
xor    $0x0,%al
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x706f006f,0x66(%bp),%ebp
outsb  %gs:(%esi),(%dx)
imul   $0x73785f5f,%fs:0x0(%edx),%esi
je     8049439 <_init-0x97b>
je     8049410 <_init-0x9a4>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsl  %ds:(%esi),(%dx)
jo     8049461 <_init-0x953>
popa
jb     8049457 <_init-0x95d>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
pop    %edi
jae    8049469 <_init-0x94b>
jo     804946f <_init-0x945>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x66,(%eax),%eax
jae    804946c <_init-0x948>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8049480 <_init-0x934>
jo     8049487 <_init-0x92d>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%bp,%di)
outsb  %ds:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    8049487 <_init-0x92d>
add    %dh,0x73(%ebp)
insb   (%dx),%es:(%edi)
gs
gs
jo     8049428 <_init-0x98c>
jae    804949a <_init-0x91a>
insb   (%dx),%es:(%edi)
imul   $0x65726600,0x65(%ebx),%esp
popa
add    %ch,%fs:0x6b(%ebp)
jae    80494ad <_init-0x907>
gs
insl   (%dx),%es:(%edi)
jo     8049473 <_init-0x941>
xor    $0x0,%al
addr16
gs
je     80494a8 <_init-0x90c>
jne    80494ae <_init-0x906>
add    %ch,%fs:0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
je     80494b7 <_init-0x8fd>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
jb     80494b8 <_init-0x8fc>
push   $0x65730072
arpl   %si,0x72(%ebp)
gs
pop    %edi
addr16
gs
je     80494c8 <_init-0x8ec>
outsb  %ds:(%esi),(%dx)
jbe    8049466 <_init-0x94e>
jo     80494da <_init-0x8da>
outsl  %ds:(%esi),(%dx)
addr16 jb 80494cd <_init-0x8e7>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     80494f2 <_init-0x8c2>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80494ee <_init-0x8c6>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x73710034,%fs:0x36(%edx),%esi
73
outsl  %ds:(%esi),(%dx)
jb     804950e <_init-0x8a6>
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x7275635f,0x63(%edx),%esp
jb     804950c <_init-0x8a8>
outsb  %ds:(%esi),(%dx)
je     8049509 <_init-0x8ab>
jae    8049515 <_init-0x89f>
addr16 jb 8049523 <_init-0x891>
insl   (%dx),%es:(%edi)
imul   $0x72746567,0x0(%esi),%ebp
insb   (%dx),%es:(%edi)
imul   $0x343674,0x69(%ebp),%ebp
pop    %edi
pop    %edi
jae    8049533 <_init-0x881>
jb     804952e <_init-0x886>
outsb  %ds:(%esi),(%dx)
je     804952e <_init-0x886>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x6f(%esi)
jo     8049536 <_init-0x87e>
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
pop    %edi
dec    %ecx
dec    %edi
pop    %edi
addr16
gs
je     8049540 <_init-0x874>
add    %dh,0x69(%eax)
jo     8049547 <_init-0x86d>
xor    (%eax),%al
jae    804955a <_init-0x85a>
jb     804954b <_init-0x869>
insl   (%dx),%es:(%edi)
jo     80494eb <_init-0x8c9>
jae    8049561 <_init-0x853>
jb     8049554 <_init-0x860>
jb     8049563 <_init-0x851>
outsl  %ds:(%esi),(%dx)
jb     80494f4 <_init-0x8c0>
pop    %edi
pop    %edi
popa
jae    8049569 <_init-0x84b>
jb     8049564 <_init-0x850>
outsb  %ds:(%esi),(%dx)
je     8049564 <_init-0x850>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8049583 <_init-0x831>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %ah,%fs:0x65(%esi)
jb     8049591 <_init-0x823>
outsl  %ds:(%esi),(%dx)
jb     8049522 <_init-0x892>
jae    8049598 <_init-0x81c>
jo     8049589 <_init-0x82b>
jo     80495a1 <_init-0x813>
add    %dh,0x65(%ebx)
je     8049592 <_init-0x822>
outsb  %ds:(%esi),(%dx)
jbe    8049530 <_init-0x884>
ja     80495a4 <_init-0x810>
imul   $0x72706e73,0x0(%ebp,%eiz,2),%esi
imul   $0x5f5f0066,0x74(%esi),%ebp
jo     80495b5 <_init-0x7ff>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x2d(%esp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
pop    %edi
pop    %edi
pop    %edi
je     80495c9 <_init-0x7eb>
jae    80495be <_init-0x7f6>
addr16
gs
je     80495c2 <_init-0x7f2>
popa
fs
fs
jb     8049568 <_init-0x84c>
pop    %edi
gs
fs
popa
je     80495cf <_init-0x7e5>
add    %bl,0x5f(%edi)
bound  %esi,0x73(%ebx)
pop    %edi
jae    80495eb <_init-0x7c9>
popa
jb     80495ee <_init-0x7c6>
add    %bl,0x65(%edi)
outsb  %ds:(%esi),(%dx)
add    %al,%fs:0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
dec    %esp
dec    %ecx
inc    %edx
dec    %esi
dec    %ecx
dec    %eax
pop    %edi
xor    %ebx,0x30(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
dec    %esp
dec    %ecx
inc    %edx
push   %ebp
inc    %esp
inc    %ebp
push   %esi
pop    %edi
xor    %edi,(%eax)
xor    (%eax),%eax
dec    %esp
dec    %ecx
inc    %edx
dec    %esi
dec    %ecx
dec    %eax
pop    %edi
inc    %esp
inc    %edx
push   %ebp
push   %ebx
pop    %edi
xor    %ebx,0x30(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
cmp    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
cmp    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x494c4700,%eax
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%eax,%eax,1)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    $0x2000000,%eax
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %cl,(%edx)
add    %cl,(%ecx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %al,(%edx)
add    %cl,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
or     (%eax),%eax
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    %al,(%edx)
add    %cl,(%ebx)
add    %cl,0x200
add    %al,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %cl,(%ecx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %cl,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
str    (%ecx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %cl,(%edi)
add    %al,(%eax)
add    %cl,(%ecx)
add    %dl,(%eax)
add    %cl,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %dl,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ebx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ebx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %eax,(%eax)
add    %eax,(%eax)
push   $0x10000005
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x110000,0xd(%ecx),%ebp
xor    $0x9,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
pop    %edi
add    %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x2c(%eax)
flds   (%edx)
add    %al,(%eax)
(bad)
or     %eax,%ds:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%ecx)
add    %bh,%dh
or     %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0xa0000,0xd(%ecx),%ebp
dec    %ecx
or     %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%ecx)
add    %ah,%ah
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,(%ebx)
repz cld
or     %al,(%eax)
add    %cl,(%ecx)
add    %dl,0x9(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %eax,(%eax)
(bad)
add    %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,-0x4a(%eax)
xchg   %al,(%eax)
add    %al,(%eax)
add    (%eax),%eax
pop    %edi
or     %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %cl,(%eax,%eax,1)
addl   $0x0,0x100000
00
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x120000,%eax
dec    %ecx
or     %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%ecx)
imul   $0x100000,0xd(%ecx),%ebp
outsl  %ds:(%esi),(%dx)
or     %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edi)
imul   $0xe0000,0xd(%ecx),%ebp
jns    804984f <_init-0x565>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
sbb    %ch,0x69(%ecx)
or     $0xd0000,%eax
orl    $0x0,(%ecx)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x98d,0xc0000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0xb0000,%eax
xor    $0x9,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%edi
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
or     %al,(%eax)
xchg   %eax,%edi
or     %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0xd6969
add    %al,(%edi)
add    %ah,0x10000009(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x60000,0xd(%ecx),%ebp
lods   %ds:(%esi),%al
or     %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x696(%ecx,%edx,4)
add    $0x9b600,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%eax,%eax,1)
rorl   $0x0,(%ecx)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
int    $0x9
add    %al,(%eax)
add    %al,(%eax)
hlt
out    %eax,(%dx)
add    $0x4e0608,%eax
add    %bh,%al
out    %eax,(%dx)
add    $0x6f0608,%eax
add    %bh,%ah
out    %eax,(%dx)
add    $0x9f0608,%eax
add    %al,-0x10(%eax)
add    $0x9d0508,%eax
add    %ah,-0x10(%eax)
add    $0xa20508,%eax
add    %ah,0x5(%eax,%esi,8)
.byte 0x8
.byte 0x5
.byte 0xa3
mov    0x70805ed,%al
add    $0x0,%al
add    %ah,0x5070805(%ebp,%ebp,8)
add    %al,(%eax)
test   $0xed,%al
add    $0x60708,%eax
add    %ch,0x7070805(%ebp,%ebp,8)
add    %al,(%eax)
mov    $0xed,%al
add    $0x80708,%eax
add    %dh,0x9070805(%ebp,%ebp,8)
add    %al,(%eax)
mov    $0x70805ed,%eax
or     (%eax),%al
add    %bh,0xb070805(%ebp,%ebp,8)
add    %al,(%eax)
shr    $0x5,%ch
or     %al,(%edi)
or     $0x0,%al
add    %al,%ah
in     (%dx),%eax
add    $0xd0708,%eax
add    %cl,%al
in     (%dx),%eax
add    $0xe0708,%eax
add    %cl,%ah
in     (%dx),%eax
add    $0xf0708,%eax
add    %dl,%al
in     (%dx),%eax
add    $0x100708,%eax
add    %dl,%ah
in     (%dx),%eax
add    $0x120708,%eax
add    %bl,%al
in     (%dx),%eax
add    $0x130708,%eax
add    %bl,%ah
in     (%dx),%eax
add    $0x140708,%eax
add    %ah,%al
in     (%dx),%eax
add    $0x150708,%eax
add    %ah,%ah
in     (%dx),%eax
add    $0x160708,%eax
add    %ch,%al
in     (%dx),%eax
add    $0x170708,%eax
add    %ch,%ah
in     (%dx),%eax
add    $0x180708,%eax
add    %dh,%al
in     (%dx),%eax
add    $0x190708,%eax
add    %dh,%ah
in     (%dx),%eax
add    $0x1a0708,%eax
add    %bh,%al
in     (%dx),%eax
add    $0x1b0708,%eax
add    %bh,%ah
in     (%dx),%eax
add    $0x1c0708,%eax
add    %al,(%eax)
out    %al,(%dx)
add    $0x1d0708,%eax
add    %al,(%esi,%ebp,8)
add    $0x1e0708,%eax
add    %cl,(%eax)
out    %al,(%dx)
add    $0x1f0708,%eax
add    %cl,(%esi,%ebp,8)
add    $0x200708,%eax
add    %dl,(%eax)
out    %al,(%dx)
add    $0x210708,%eax
add    %dl,(%esi,%ebp,8)
add    $0x220708,%eax
add    %bl,(%eax)
out    %al,(%dx)
add    $0x230708,%eax
add    %bl,(%esi,%ebp,8)
add    $0x240708,%eax
add    %ah,(%eax)
out    %al,(%dx)
add    $0x250708,%eax
add    %ah,(%esi,%ebp,8)
add    $0x260708,%eax
add    %ch,(%eax)
out    %al,(%dx)
add    $0x270708,%eax
add    %ch,(%esi,%ebp,8)
add    $0x280708,%eax
add    %dh,(%eax)
out    %al,(%dx)
add    $0x290708,%eax
add    %dh,(%esi,%ebp,8)
add    $0x2a0708,%eax
add    %bh,(%eax)
out    %al,(%dx)
add    $0x2b0708,%eax
add    %bh,(%esi,%ebp,8)
add    $0x2c0708,%eax
add    %al,-0x12(%eax)
add    $0x2d0708,%eax
add    %al,0x5(%esi,%ebp,8)
or     %al,(%edi)
add    %al,%cs:(%eax)
dec    %eax
out    %al,(%dx)
add    $0x2f0708,%eax
add    %cl,0x5(%esi,%ebp,8)
or     %al,(%edi)
xor    %al,(%eax)
add    %dl,-0x12(%eax)
add    $0x310708,%eax
add    %dl,0x5(%esi,%ebp,8)
or     %al,(%edi)
xor    (%eax),%al
add    %bl,-0x12(%eax)
add    $0x330708,%eax
add    %bl,0x5(%esi,%ebp,8)
or     %al,(%edi)
xor    $0x0,%al
add    %ah,-0x12(%eax)
add    $0x350708,%eax
add    %ah,0x5(%esi,%ebp,8)
or     %al,(%edi)
add    %al,%ss:(%eax)
push   $0x70805ee
aaa
add    %al,(%eax)
insb   (%dx),%es:(%edi)
out    %al,(%dx)
add    $0x380708,%eax
add    %dh,-0x12(%eax)
add    $0x390708,%eax
add    %dh,0x5(%esi,%ebp,8)
or     %al,(%edi)
cmp    (%eax),%al
add    %bh,-0x12(%eax)
add    $0x3b0708,%eax
add    %bh,0x5(%esi,%ebp,8)
or     %al,(%edi)
cmp    $0x0,%al
add    %al,0x70805ee(%eax)
cmp    $0xee840000,%eax
add    $0x3e0708,%eax
add    %cl,0x70805ee(%eax)
aas
add    %al,(%eax)
mov    %gs,%esi
add    $0x400708,%eax
add    %dl,0x70805ee(%eax)
inc    %ecx
add    %al,(%eax)
xchg   %eax,%esp
out    %al,(%dx)
add    $0x420708,%eax
add    %bl,0x70805ee(%eax)
inc    %ebx
add    %al,(%eax)
pushf
out    %al,(%dx)
add    $0x440708,%eax
add    %ah,0x70805ee(%eax)
inc    %ebp
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
out    %al,(%dx)
add    $0x460708,%eax
add    %ch,0x70805ee(%eax)
inc    %edi
add    %al,(%eax)
lods   %ds:(%esi),%al
out    %al,(%dx)
add    $0x480708,%eax
add    %dh,0x70805ee(%eax)
dec    %ecx
add    %al,(%eax)
mov    $0xee,%ah
add    $0x4a0708,%eax
add    %bh,0x70805ee(%eax)
dec    %ebx
add    %al,(%eax)
mov    $0x70805ee,%esp
dec    %esp
add    %al,(%eax)
shr    $0x5,%dh
or     %al,(%edi)
dec    %ebp
add    %al,(%eax)
(bad)
out    %al,(%dx)
add    $0x4e0708,%eax
add    %cl,%al
out    %al,(%dx)
add    $0x4f0708,%eax
add    %cl,%ah
out    %al,(%dx)
add    $0x500708,%eax
add    %dl,%al
out    %al,(%dx)
add    $0x510708,%eax
add    %dl,%ah
out    %al,(%dx)
add    $0x520708,%eax
add    %bl,%al
out    %al,(%dx)
add    $0x530708,%eax
add    %bl,%ah
out    %al,(%dx)
add    $0x540708,%eax
add    %ah,%al
out    %al,(%dx)
add    $0x550708,%eax
add    %ah,%ah
out    %al,(%dx)
add    $0x560708,%eax
add    %ch,%al
out    %al,(%dx)
add    $0x570708,%eax
add    %ch,%ah
out    %al,(%dx)
add    $0x580708,%eax
add    %dh,%al
out    %al,(%dx)
add    $0x590708,%eax
add    %dh,%ah
out    %al,(%dx)
add    $0x5a0708,%eax
add    %bh,%al
out    %al,(%dx)
add    $0x5b0708,%eax
add    %bh,%ah
out    %al,(%dx)
add    $0x5c0708,%eax
add    %al,(%eax)
out    %eax,(%dx)
add    $0x5d0708,%eax
add    %al,(%edi,%ebp,8)
add    $0x5e0708,%eax
add    %cl,(%eax)
out    %eax,(%dx)
add    $0x5f0708,%eax
add    %cl,(%edi,%ebp,8)
add    $0x600708,%eax
add    %dl,(%eax)
out    %eax,(%dx)
add    $0x610708,%eax
add    %dl,(%edi,%ebp,8)
add    $0x620708,%eax
add    %bl,(%eax)
out    %eax,(%dx)
add    $0x630708,%eax
add    %bl,(%edi,%ebp,8)
add    $0x640708,%eax
add    %ah,(%eax)
out    %eax,(%dx)
add    $0x650708,%eax
add    %ah,(%edi,%ebp,8)
add    $0x660708,%eax
add    %ch,(%eax)
out    %eax,(%dx)
add    $0x670708,%eax
add    %ch,(%edi,%ebp,8)
add    $0x680708,%eax
add    %dh,(%eax)
out    %eax,(%dx)
add    $0x690708,%eax
add    %dh,(%edi,%ebp,8)
add    $0x6a0708,%eax
add    %bh,(%eax)
out    %eax,(%dx)
add    $0x6b0708,%eax
add    %bh,(%edi,%ebp,8)
add    $0x6c0708,%eax
add    %al,-0x11(%eax)
add    $0x6d0708,%eax
add    %al,0x5(%edi,%ebp,8)
or     %al,(%edi)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
dec    %eax
out    %eax,(%dx)
add    $0x700708,%eax
add    %cl,0x5(%edi,%ebp,8)
or     %al,(%edi)
jno    8049c6b <_init-0x149>
add    %dl,-0x11(%eax)
add    $0x720708,%eax
add    %dl,0x5(%edi,%ebp,8)
or     %al,(%edi)
jae    8049c7b <_init-0x139>
add    %bl,-0x11(%eax)
add    $0x740708,%eax
add    %bl,0x5(%edi,%ebp,8)
or     %al,(%edi)
jne    8049c8b <_init-0x129>
add    %ah,-0x11(%eax)
add    $0x760708,%eax
add    %ah,0x5(%edi,%ebp,8)
or     %al,(%edi)
ja     8049c9b <_init-0x119>
add    %ch,-0x11(%eax)
add    $0x780708,%eax
add    %ch,0x5(%edi,%ebp,8)
or     %al,(%edi)
jns    8049cab <_init-0x109>
add    %dh,-0x11(%eax)
add    $0x7a0708,%eax
add    %dh,0x5(%edi,%ebp,8)
or     %al,(%edi)
jnp    8049cbb <_init-0xf9>
add    %bh,-0x11(%eax)
add    $0x7c0708,%eax
add    %bh,0x5(%edi,%ebp,8)
or     %al,(%edi)
jle    8049ccb <_init-0xe9>
add    %al,0x70805ef(%eax)
jg     8049cd3 <_init-0xe1>
add    %al,-0x7ff8f7fb(%edi,%ebp,8)
add    %al,(%eax)
mov    %ch,%bh
add    $0x810708,%eax
add    %cl,-0x7df8f7fb(%edi,%ebp,8)
add    %al,(%eax)
nop
out    %eax,(%dx)
add    $0x830708,%eax
add    %dl,-0x7bf8f7fb(%edi,%ebp,8)
add    %al,(%eax)
cwtl
out    %eax,(%dx)
add    $0x850708,%eax
add    %bl,-0x79f8f7fb(%edi,%ebp,8)
add    %al,(%eax)
mov    0x70805ef,%al
xchg   %eax,(%eax)
add    %ah,-0x77f8f7fb(%edi,%ebp,8)
add    %al,(%eax)
test   $0xef,%al
add    $0x890708,%eax
add    %ch,-0x74f8f7fb(%edi,%ebp,8)
add    %al,(%eax)
mov    $0xef,%al
add    $0x8c0708,%eax
add    %dh,-0x72f8f7fb(%edi,%ebp,8)
add    %al,(%eax)
mov    $0x70805ef,%eax
mov    (%eax),%es
add    %bh,-0x70f8f7fb(%edi,%ebp,8)
add    %al,(%eax)
shr    $0x5,%bh
or     %al,(%edi)
nop
add    %al,(%eax)
(bad)
out    %eax,(%dx)
add    $0x910708,%eax
add    %cl,%al
out    %eax,(%dx)
add    $0x920708,%eax
add    %cl,%ah
out    %eax,(%dx)
add    $0x930708,%eax
add    %dl,%al
out    %eax,(%dx)
add    $0x940708,%eax
add    %dl,%ah
out    %eax,(%dx)
add    $0x950708,%eax
add    %bl,%al
out    %eax,(%dx)
add    $0x960708,%eax
add    %bl,%ah
out    %eax,(%dx)
add    $0x970708,%eax
add    %ah,%al
out    %eax,(%dx)
add    $0x980708,%eax
add    %ah,%ah
out    %eax,(%dx)
add    $0x990708,%eax
add    %ch,%al
out    %eax,(%dx)
add    $0x9a0708,%eax
add    %ch,%ah
out    %eax,(%dx)
add    $0x9b0708,%eax
add    %dh,%al
out    %eax,(%dx)
add    $0x9c0708,%eax
push   %ebx
sub    $0x8,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x14fd7,%ebx
mov    0x260(%ebx),%eax
test   %eax,%eax
je     8049dd2 <_init+0x1e>
call   804a280 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x805ed98
jmp    *0x805ed9c
add    %al,(%eax)
jmp    *0x805eda0
push   $0x0
jmp    8049de0 <_init+0x2c>
jmp    *0x805eda4
push   $0x8
jmp    8049de0 <_init+0x2c>
jmp    *0x805eda8
push   $0x10
jmp    8049de0 <_init+0x2c>
jmp    *0x805edac
push   $0x18
jmp    8049de0 <_init+0x2c>
jmp    *0x805edb0
push   $0x20
jmp    8049de0 <_init+0x2c>
jmp    *0x805edb4
push   $0x28
jmp    8049de0 <_init+0x2c>
jmp    *0x805edb8
push   $0x30
jmp    8049de0 <_init+0x2c>
jmp    *0x805edbc
push   $0x38
jmp    8049de0 <_init+0x2c>
jmp    *0x805edc0
push   $0x40
jmp    8049de0 <_init+0x2c>
jmp    *0x805edc4
push   $0x48
jmp    8049de0 <_init+0x2c>
jmp    *0x805edc8
push   $0x50
jmp    8049de0 <_init+0x2c>
jmp    *0x805edcc
push   $0x58
jmp    8049de0 <_init+0x2c>
jmp    *0x805edd0
push   $0x60
jmp    8049de0 <_init+0x2c>
jmp    *0x805edd4
push   $0x68
jmp    8049de0 <_init+0x2c>
jmp    *0x805edd8
push   $0x70
jmp    8049de0 <_init+0x2c>
jmp    *0x805eddc
push   $0x78
jmp    8049de0 <_init+0x2c>
jmp    *0x805ede0
push   $0x80
jmp    8049de0 <_init+0x2c>
jmp    *0x805ede4
push   $0x88
jmp    8049de0 <_init+0x2c>
jmp    *0x805ede8
push   $0x90
jmp    8049de0 <_init+0x2c>
jmp    *0x805edec
push   $0x98
jmp    8049de0 <_init+0x2c>
jmp    *0x805edf0
push   $0xa0
jmp    8049de0 <_init+0x2c>
jmp    *0x805edf4
push   $0xa8
jmp    8049de0 <_init+0x2c>
jmp    *0x805edf8
push   $0xb0
jmp    8049de0 <_init+0x2c>
jmp    *0x805edfc
push   $0xb8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee00
push   $0xc0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee04
push   $0xc8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee08
push   $0xd0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee0c
push   $0xd8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee10
push   $0xe0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee14
push   $0xe8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee18
push   $0xf0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee1c
push   $0xf8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee20
push   $0x100
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee24
push   $0x108
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee28
push   $0x110
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee2c
push   $0x118
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee30
push   $0x120
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee34
push   $0x128
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee38
push   $0x130
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee3c
push   $0x138
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee40
push   $0x140
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee44
push   $0x148
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee48
push   $0x150
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee4c
push   $0x158
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee50
push   $0x160
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee54
push   $0x168
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee58
push   $0x170
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee5c
push   $0x178
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee60
push   $0x180
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee64
push   $0x188
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee68
push   $0x190
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee6c
push   $0x198
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee70
push   $0x1a0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee74
push   $0x1a8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee78
push   $0x1b0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee7c
push   $0x1b8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee80
push   $0x1c0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee84
push   $0x1c8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee88
push   $0x1d0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee8c
push   $0x1d8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee90
push   $0x1e0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee94
push   $0x1e8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee98
push   $0x1f0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ee9c
push   $0x1f8
jmp    8049de0 <_init+0x2c>
jmp    *0x805eea0
push   $0x200
jmp    8049de0 <_init+0x2c>
jmp    *0x805eea4
push   $0x208
jmp    8049de0 <_init+0x2c>
jmp    *0x805eea8
push   $0x210
jmp    8049de0 <_init+0x2c>
jmp    *0x805eeac
push   $0x218
jmp    8049de0 <_init+0x2c>
jmp    *0x805eeb0
push   $0x220
jmp    8049de0 <_init+0x2c>
jmp    *0x805eeb4
push   $0x228
jmp    8049de0 <_init+0x2c>
jmp    *0x805eeb8
push   $0x230
jmp    8049de0 <_init+0x2c>
jmp    *0x805eebc
push   $0x238
jmp    8049de0 <_init+0x2c>
jmp    *0x805eec0
push   $0x240
jmp    8049de0 <_init+0x2c>
jmp    *0x805eec4
push   $0x248
jmp    8049de0 <_init+0x2c>
jmp    *0x805eec8
push   $0x250
jmp    8049de0 <_init+0x2c>
jmp    *0x805eecc
push   $0x258
jmp    8049de0 <_init+0x2c>
jmp    *0x805eed0
push   $0x260
jmp    8049de0 <_init+0x2c>
jmp    *0x805eed4
push   $0x268
jmp    8049de0 <_init+0x2c>
jmp    *0x805eed8
push   $0x270
jmp    8049de0 <_init+0x2c>
jmp    *0x805eedc
push   $0x278
jmp    8049de0 <_init+0x2c>
jmp    *0x805eee0
push   $0x280
jmp    8049de0 <_init+0x2c>
jmp    *0x805eee4
push   $0x288
jmp    8049de0 <_init+0x2c>
jmp    *0x805eee8
push   $0x290
jmp    8049de0 <_init+0x2c>
jmp    *0x805eeec
push   $0x298
jmp    8049de0 <_init+0x2c>
jmp    *0x805eef0
push   $0x2a0
jmp    8049de0 <_init+0x2c>
jmp    *0x805eef4
push   $0x2a8
jmp    8049de0 <_init+0x2c>
jmp    *0x805eef8
push   $0x2b0
jmp    8049de0 <_init+0x2c>
jmp    *0x805eefc
push   $0x2b8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef00
push   $0x2c0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef04
push   $0x2c8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef08
push   $0x2d0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef0c
push   $0x2d8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef10
push   $0x2e0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef14
push   $0x2e8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef18
push   $0x2f0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef1c
push   $0x2f8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef20
push   $0x300
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef24
push   $0x308
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef28
push   $0x310
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef2c
push   $0x318
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef30
push   $0x320
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef34
push   $0x328
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef38
push   $0x330
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef3c
push   $0x338
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef40
push   $0x340
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef44
push   $0x348
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef48
push   $0x350
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef4c
push   $0x358
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef50
push   $0x360
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef54
push   $0x368
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef58
push   $0x370
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef5c
push   $0x378
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef60
push   $0x380
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef64
push   $0x388
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef68
push   $0x390
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef6c
push   $0x398
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef70
push   $0x3a0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef74
push   $0x3a8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef78
push   $0x3b0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef7c
push   $0x3b8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef80
push   $0x3c0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef84
push   $0x3c8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef88
push   $0x3d0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef8c
push   $0x3d8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef90
push   $0x3e0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef94
push   $0x3e8
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef98
push   $0x3f0
jmp    8049de0 <_init+0x2c>
jmp    *0x805ef9c
push   $0x3f8
jmp    8049de0 <_init+0x2c>
jmp    *0x805efa0
push   $0x400
jmp    8049de0 <_init+0x2c>
jmp    *0x805efa4
push   $0x408
jmp    8049de0 <_init+0x2c>
jmp    *0x805efa8
push   $0x410
jmp    8049de0 <_init+0x2c>
jmp    *0x805efac
push   $0x418
jmp    8049de0 <_init+0x2c>
jmp    *0x805efb0
push   $0x420
jmp    8049de0 <_init+0x2c>
jmp    *0x805efb4
push   $0x428
jmp    8049de0 <_init+0x2c>
jmp    *0x805efb8
push   $0x430
jmp    8049de0 <_init+0x2c>
jmp    *0x805efbc
push   $0x438
jmp    8049de0 <_init+0x2c>
jmp    *0x805efc0
push   $0x440
jmp    8049de0 <_init+0x2c>
jmp    *0x805efc4
push   $0x448
jmp    8049de0 <_init+0x2c>
jmp    *0x805efc8
push   $0x450
jmp    8049de0 <_init+0x2c>
jmp    *0x805efcc
push   $0x458
jmp    8049de0 <_init+0x2c>
jmp    *0x805efd0
push   $0x460
jmp    8049de0 <_init+0x2c>
jmp    *0x805efd4
push   $0x468
jmp    8049de0 <_init+0x2c>
jmp    *0x805efd8
push   $0x470
jmp    8049de0 <_init+0x2c>
jmp    *0x805efdc
push   $0x478
jmp    8049de0 <_init+0x2c>
jmp    *0x805efe0
push   $0x480
jmp    8049de0 <_init+0x2c>
jmp    *0x805efe4
push   $0x488
jmp    8049de0 <_init+0x2c>
jmp    *0x805efe8
push   $0x490
jmp    8049de0 <_init+0x2c>
jmp    *0x805efec
push   $0x498
jmp    8049de0 <_init+0x2c>
jmp    *0x805eff0
push   $0x4a0
jmp    8049de0 <_init+0x2c>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x50,%esp
mov    0x8(%ebp),%esi
lea    0x40(%esp),%edi
mov    0xc(%ebp),%ebx
mov    %edi,(%esp)
movl   $0x0,0x3c(%esp)
call   8049f30 <dbus_error_init@plt>
movl   $0x8058e13,0x4(%esp)
movl   $0x6,(%esp)
call   804a520 <setlocale@plt>
call   8053560 <__sprintf_chk@plt+0x8e30>
call   8052d70 <__sprintf_chk@plt+0x8640>
test   %esi,%esi
js     804acea <__sprintf_chk@plt+0x5ba>
test   %ebx,%ebx
xchg   %ax,%ax
je     804acc6 <__sprintf_chk@plt+0x596>
movl   $0x0,0x10(%esp)
movl   $0x80589a0,0xc(%esp)
movl   $0x8057b3b,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a310 <getopt_long@plt>
test   %eax,%eax
js     804aa3e <__sprintf_chk@plt+0x30e>
cmp    $0x70,%eax
je     804a9f9 <__sprintf_chk@plt+0x2c9>
nop
lea    0x0(%esi,%eiz,1),%esi
jle    804a810 <__sprintf_chk@plt+0xe0>
cmp    $0x101,%eax
je     804a9ed <__sprintf_chk@plt+0x2bd>
lea    0x0(%esi),%esi
jle    804a8ff <__sprintf_chk@plt+0x1cf>
cmp    $0x103,%eax
je     804a9e1 <__sprintf_chk@plt+0x2b1>
jl     804a98e <__sprintf_chk@plt+0x25e>
cmp    $0x104,%eax
jne    804a99d <__sprintf_chk@plt+0x26d>
movb   $0x1,0x805f079
jmp    804a796 <__sprintf_chk@plt+0x66>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x50,%eax
je     804a9d2 <__sprintf_chk@plt+0x2a2>
jg     804a8d0 <__sprintf_chk@plt+0x1a0>
cmp    $0x3f,%eax
je     804a87a <__sprintf_chk@plt+0x14a>
cmp    $0x48,%eax
jne    804a99d <__sprintf_chk@plt+0x26d>
mov    0x805f064,%eax
movl   $0x1,0x805f070
00
mov    %eax,0x805f06c
jmp    804a796 <__sprintf_chk@plt+0x66>
mov    0x44(%esp),%eax
movl   $0x8058620,0x10(%esp)
movl   $0x805880f,0xc(%esp)
movl   $0x603,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0x1,%ebx
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804a8a7 <__sprintf_chk@plt+0x177>
mov    %eax,(%esp)
call   804a700 <dbus_connection_flush@plt>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804a550 <dbus_connection_close@plt>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804a1c0 <dbus_connection_unref@plt>
mov    %edi,(%esp)
call   804a240 <dbus_error_free@plt>
call   804a490 <dbus_shutdown@plt>
mov    0x805f07c,%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
call   8053a80 <__sprintf_chk@plt+0x9350>
lea    -0xc(%ebp),%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x61,%eax
je     804a92e <__sprintf_chk@plt+0x1fe>
cmp    $0x68,%eax
jne    804a99d <__sprintf_chk@plt+0x26d>
mov    0x805f040,%eax
xor    %ebx,%ebx
movl   $0x8057d38,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804a87f <__sprintf_chk@plt+0x14f>
cmp    $0x73,%eax
je     804a93a <__sprintf_chk@plt+0x20a>
cmp    $0x100,%eax
jne    804a99d <__sprintf_chk@plt+0x26d>
movl   $0x8057b18,(%esp)
xor    %ebx,%ebx
call   804a260 <puts@plt>
movl   $0x80585ac,(%esp)
call   804a260 <puts@plt>
jmp    804a87f <__sprintf_chk@plt+0x14f>
movb   $0x1,0x805f07a
jmp    804a796 <__sprintf_chk@plt+0x66>
mov    0x805f064,%eax
mov    %eax,(%esp)
call   804fd50 <__sprintf_chk@plt+0x5620>
test   %eax,%eax
mov    %eax,0x805f004
jns    804a796 <__sprintf_chk@plt+0x66>
mov    0x805f064,%eax
movl   $0x80585fc,0x10(%esp)
movl   $0x8058a60,0xc(%esp)
movl   $0x585,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
mov    0x805f064,%eax
mov    %eax,0x805f074
jmp    804a796 <__sprintf_chk@plt+0x66>
mov    %eax,0x14(%esp)
movl   $0x8057b24,0x10(%esp)
movl   $0x8058a60,0xc(%esp)
movl   $0x59b,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
movl   $0x2,0x805f070
00
jmp    804a796 <__sprintf_chk@plt+0x66>
movb   $0x0,0x805f000
jmp    804a796 <__sprintf_chk@plt+0x66>
movb   $0x1,0x805f078
jmp    804a796 <__sprintf_chk@plt+0x66>
mov    0x805f064,%eax
mov    %eax,0x4(%esp)
mov    0x805f07c,%eax
mov    %eax,(%esp)
call   8051dc0 <__sprintf_chk@plt+0x7690>
test   %eax,%eax
mov    %eax,0x2c(%esp)
je     804a87a <__sprintf_chk@plt+0x14a>
mov    0x805f07c,%edx
mov    %edx,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
mov    0x2c(%esp),%eax
movb   $0x1,0x805f07a
mov    %eax,0x805f07c
jmp    804a796 <__sprintf_chk@plt+0x66>
mov    0x805f070,%eax
test   %eax,%eax
je     804ab63 <__sprintf_chk@plt+0x433>
cmp    $0x2,%eax
je     804ac80 <__sprintf_chk@plt+0x550>
sub    $0x1,%eax
jne    804ad0e <__sprintf_chk@plt+0x5de>
lea    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x805f06c,%eax
mov    %edi,0xc(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80565e0 <__sprintf_chk@plt+0xbeb0>
mov    0x3c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x805f060,%eax
sub    %eax,%esi
test   %esi,%esi
mov    %eax,0x24(%esp)
mov    %esi,0x28(%esp)
jle    804abb5 <__sprintf_chk@plt+0x485>
mov    (%ebx,%eax,4),%eax
xor    %esi,%esi
movl   $0x8057b5e,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x20(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
je     804ac5c <__sprintf_chk@plt+0x52c>
mov    %ebx,0xc(%ebp)
mov    0x20(%esp),%ebx
jmp    804aad4 <__sprintf_chk@plt+0x3a4>
nop
add    $0x1,%esi
cmp    $0x17,%esi
je     804ab7c <__sprintf_chk@plt+0x44c>
mov    %esi,%eax
shl    $0x4,%eax
mov    0x8058820(%eax),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
jne    804aac8 <__sprintf_chk@plt+0x398>
mov    0xc(%ebp),%ebx
mov    %esi,%eax
shl    $0x4,%eax
add    $0x8058820,%eax
mov    0x4(%eax),%ecx
cmp    $0x1,%ecx
je     804abfa <__sprintf_chk@plt+0x4ca>
jb     804abbc <__sprintf_chk@plt+0x48c>
cmp    $0x2,%ecx
jne    804ac38 <__sprintf_chk@plt+0x508>
mov    0x28(%esp),%ecx
cmp    0x8(%eax),%ecx
jne    804ac95 <__sprintf_chk@plt+0x565>
cmpl   $0x0,0x2c(%esp)
je     804a846 <__sprintf_chk@plt+0x116>
mov    0x28(%esp),%eax
mov    %esi,%edx
shl    $0x4,%edx
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
lea    (%ebx,%eax,4),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   *0x805882c(%edx)
test   %eax,%eax
mov    %eax,%ebx
jns    804a87f <__sprintf_chk@plt+0x14f>
jmp    804a87a <__sprintf_chk@plt+0x14a>
mov    %edi,0x4(%esp)
movl   $0x1,(%esp)
call   8049ff0 <dbus_bus_get_private@plt>
mov    %eax,0x3c(%esp)
jmp    804aa7e <__sprintf_chk@plt+0x34e>
mov    0x20(%esp),%eax
movl   $0x8057bc4,0x10(%esp)
movl   $0x805880f,0xc(%esp)
movl   $0x5df,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
xor    %esi,%esi
jmp    804aaf2 <__sprintf_chk@plt+0x3c2>
mov    0x28(%esp),%ecx
cmp    0x8(%eax),%ecx
jge    804ab24 <__sprintf_chk@plt+0x3f4>
movl   $0x8057b80,0x10(%esp)
movl   $0x805880f,0xc(%esp)
movl   $0x5f0,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
mov    0x28(%esp),%ecx
cmp    0x8(%eax),%ecx
jle    804ab24 <__sprintf_chk@plt+0x3f4>
movl   $0x8057b93,0x10(%esp)
movl   $0x805880f,0xc(%esp)
movl   $0x5f8,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
movl   $0x8058990,0xc(%esp)
movl   $0x5ff,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8057ba7,(%esp)
call   80533e0 <__sprintf_chk@plt+0x8cb0>
mov    0x805f040,%eax
xor    %ebx,%ebx
movl   $0x8057d38,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804a87f <__sprintf_chk@plt+0x14f>
lea    0x3c(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   80567b0 <__sprintf_chk@plt+0xc080>
jmp    804aa7e <__sprintf_chk@plt+0x34e>
movl   $0x8057b63,0x10(%esp)
movl   $0x805880f,0xc(%esp)
movl   $0x5e8,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804a87a <__sprintf_chk@plt+0x14a>
movl   $0x8058a6b,0xc(%esp)
movl   $0x552,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8057b13,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058a6b,0xc(%esp)
movl   $0x551,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8057b09,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058a76,0xc(%esp)
movl   $0x624,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8057b45,(%esp)
call   80533e0 <__sprintf_chk@plt+0x8cb0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
pushf
pushf
pop    %eax
mov    %eax,%edx
xor    $0x200000,%eax
push   %eax
popf
pushf
pop    %eax
popf
xor    %edx,%eax
test   $0x200000,%eax
je     804ada1 <__sprintf_chk@plt+0x671>
push   %ebp
xor    %eax,%eax
mov    %esp,%ebp
push   %esi
and    $0xfffffff0,%esp
sub    $0x204,%esp
xchg   %ebx,%esi
cpuid
xchg   %ebx,%esi
test   %eax,%eax
je     804ad9d <__sprintf_chk@plt+0x66d>
mov    $0x1,%eax
xchg   %ebx,%esi
cpuid
xchg   %ebx,%esi
test   $0x2000000,%edx
je     804ad9d <__sprintf_chk@plt+0x66d>
and    $0x1000000,%edx
jne    804ada2 <__sprintf_chk@plt+0x672>
stmxcsr (%esp)
mov    (%esp),%eax
or     $0x80,%ah
mov    %eax,(%esp)
ldmxcsr (%esp)
mov    -0x4(%ebp),%esi
leave
ret
movl   $0x0,0x20(%esp)
fxsave 0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,%edx
or     $0x40,%edx
testb  $0x40,0x20(%esp)
cmovne %edx,%eax
jmp    804ad93 <__sprintf_chk@plt+0x663>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8057660
push   $0x80575f0
push   %ecx
push   %esi
push   $0x804a740
call   804a380 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x805f02b,%eax
sub    $0x805f028,%eax
cmp    $0x6,%eax
ja     804ae10 <__sprintf_chk@plt+0x6e0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804ae0f <__sprintf_chk@plt+0x6df>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x805f028,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x805f028,%eax
sub    $0x805f028,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804ae49 <__sprintf_chk@plt+0x719>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804ae48 <__sprintf_chk@plt+0x718>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x805f028,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x805f068
jne    804ae8c <__sprintf_chk@plt+0x75c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804ae00 <__sprintf_chk@plt+0x6d0>
movb   $0x1,0x805f068
leave
repz ret
xchg   %ax,%ax
mov    0x805eac0,%eax
test   %eax,%eax
je     804aeb8 <__sprintf_chk@plt+0x788>
mov    $0x0,%eax
test   %eax,%eax
je     804aeb8 <__sprintf_chk@plt+0x788>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x805eac0,(%esp)
call   *%eax
leave
jmp    804ae30 <__sprintf_chk@plt+0x700>
nop
jmp    804ae30 <__sprintf_chk@plt+0x700>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%eax
test   %eax,%eax
je     804afda <__sprintf_chk@plt+0x8aa>
mov    0x54(%esp),%eax
mov    $0x1,%ebp
cmpl   $0x1,0x58(%esp)
lea    0x4(%eax),%ebx
jbe    804afd0 <__sprintf_chk@plt+0x8a0>
mov    %ebx,0x2c(%esp)
jmp    804af02 <__sprintf_chk@plt+0x7d2>
add    $0x1,%ebp
addl   $0x4,0x2c(%esp)
cmp    0x58(%esp),%ebp
je     804afd0 <__sprintf_chk@plt+0x8a0>
mov    0x54(%esp),%eax
mov    $0xd,%ecx
mov    $0x80576fe,%edi
mov    (%eax),%eax
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
mov    %edx,%esi
mov    $0x80576b2,%edx
mov    %esi,%ebx
cmp    %cl,%bl
je     804af69 <__sprintf_chk@plt+0x839>
mov    $0xf,%ecx
mov    $0x80576fc,%edi
mov    %eax,%esi
mov    $0x80576a4,%edx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %bl
setb   %cl
cmp    %cl,%bl
je     804af69 <__sprintf_chk@plt+0x839>
mov    $0x12,%ecx
mov    %eax,%esi
mov    $0x805770b,%edi
mov    $0x80576ce,%edx
repz cmpsb %es:(%edi),%ds:(%esi)
setb   %al
seta   %cl
cmp    %al,%cl
mov    $0x80576be,%eax
cmovne %eax,%edx
mov    0x2c(%esp),%eax
movl   $0x0,0x24(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x20(%esp)
mov    0x50(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
je     804aef0 <__sprintf_chk@plt+0x7c0>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8058763,0xc(%esp)
movl   $0x408,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xfc,%esp
cmpb   $0x0,0x805f078
movl   $0x0,0x3c(%esp)
je     804b1e0 <__sprintf_chk@plt+0xab0>
mov    0x110(%esp),%eax
lea    0x3c(%esp),%ebp
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %ebp,0x14(%esp)
movl   $0x805774c,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
mov    %eax,%edx
je     804b090 <__sprintf_chk@plt+0x960>
mov    %ebp,(%esp)
mov    %edx,0x2c(%esp)
call   8057330 <__sprintf_chk@plt+0xcc00>
mov    0x2c(%esp),%edx
add    $0xfc,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %edx,%eax
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x3c(%esp),%eax
lea    0x48(%esp),%esi
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a620 <dbus_message_iter_init@plt>
test   %eax,%eax
je     804b220 <__sprintf_chk@plt+0xaf0>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x61,%eax
jne    804b220 <__sprintf_chk@plt+0xaf0>
mov    %esi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804b220 <__sprintf_chk@plt+0xaf0>
lea    0x80(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
call   804f530 <__sprintf_chk@plt+0x4e00>
test   %al,%al
jne    804b1f8 <__sprintf_chk@plt+0xac8>
xor    %edi,%edi
lea    0xb8(%esp),%esi
jmp    804b194 <__sprintf_chk@plt+0xa64>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
jne    804b290 <__sprintf_chk@plt+0xb60>
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
lea    0x40(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %esi,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b258 <__sprintf_chk@plt+0xb28>
lea    0x44(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %esi,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b258 <__sprintf_chk@plt+0xb28>
mov    0x40(%esp),%eax
add    $0x1,%edi
movl   $0x8057798,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebx,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    804b100 <__sprintf_chk@plt+0x9d0>
mov    %eax,0x2c(%esp)
call   804f530 <__sprintf_chk@plt+0x4e00>
mov    0x2c(%esp),%edx
test   %al,%al
je     804b06c <__sprintf_chk@plt+0x93c>
mov    %edi,0x8(%esp)
movl   $0x805776d,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x2c(%esp),%edx
jmp    804b06c <__sprintf_chk@plt+0x93c>
lea    0x0(%esi),%esi
movl   $0x0,(%esp)
call   8053710 <__sprintf_chk@plt+0x8fe0>
jmp    804b01f <__sprintf_chk@plt+0x8ef>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8058abc,0x8(%esp)
movl   $0x8057798,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804b0ee <__sprintf_chk@plt+0x9be>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8057756,0x10(%esp)
movl   $0x80587e0,0xc(%esp)
movl   $0xe1,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b06c <__sprintf_chk@plt+0x93c>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x80587e0,0xc(%esp)
movl   $0xf6,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b06c <__sprintf_chk@plt+0x93c>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x80587e0,0xc(%esp)
movl   $0xee,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804b284 <__sprintf_chk@plt+0xb54>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xfc,%esp
cmpb   $0x0,0x805f078
movl   $0x0,0x38(%esp)
je     804b4d0 <__sprintf_chk@plt+0xda0>
mov    0x110(%esp),%eax
lea    0x38(%esp),%ebp
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %ebp,0x14(%esp)
movl   $0x8057780,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
mov    %eax,%edx
je     804b350 <__sprintf_chk@plt+0xc20>
mov    %ebp,(%esp)
mov    %edx,0x2c(%esp)
call   8057330 <__sprintf_chk@plt+0xcc00>
mov    0x2c(%esp),%edx
add    $0xfc,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %edx,%eax
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
lea    0x48(%esp),%esi
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a620 <dbus_message_iter_init@plt>
test   %eax,%eax
je     804b518 <__sprintf_chk@plt+0xde8>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x61,%eax
jne    804b518 <__sprintf_chk@plt+0xde8>
mov    %esi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804b518 <__sprintf_chk@plt+0xde8>
lea    0x80(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
call   804f530 <__sprintf_chk@plt+0x4e00>
test   %al,%al
jne    804b4e8 <__sprintf_chk@plt+0xdb8>
xor    %edi,%edi
lea    0xb8(%esp),%esi
jmp    804b484 <__sprintf_chk@plt+0xd54>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
jne    804b588 <__sprintf_chk@plt+0xe58>
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
lea    0x44(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x75,0x4(%esp)
mov    %esi,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b550 <__sprintf_chk@plt+0xe20>
lea    0x3c(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %esi,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b550 <__sprintf_chk@plt+0xe20>
lea    0x40(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %esi,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b550 <__sprintf_chk@plt+0xe20>
mov    0x3c(%esp),%eax
add    $0x1,%edi
movl   $0x805779f,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebx,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    804b3c0 <__sprintf_chk@plt+0xc90>
mov    %eax,0x2c(%esp)
call   804f530 <__sprintf_chk@plt+0x4e00>
mov    0x2c(%esp),%edx
test   %al,%al
je     804b32c <__sprintf_chk@plt+0xbfc>
mov    %edi,0x8(%esp)
movl   $0x80577ab,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x2c(%esp),%edx
jmp    804b32c <__sprintf_chk@plt+0xbfc>
lea    0x0(%esi),%esi
movl   $0x0,(%esp)
call   8053710 <__sprintf_chk@plt+0x8fe0>
jmp    804b2df <__sprintf_chk@plt+0xbaf>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805778a,0xc(%esp)
movl   $0x805778f,0x8(%esp)
movl   $0x8057793,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804b3ae <__sprintf_chk@plt+0xc7e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8057756,0x10(%esp)
movl   $0x8058787,0xc(%esp)
movl   $0xa2,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b32c <__sprintf_chk@plt+0xbfc>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x8058787,0xc(%esp)
movl   $0xb9,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b32c <__sprintf_chk@plt+0xbfc>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x8058787,0xc(%esp)
movl   $0xb0,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804b57c <__sprintf_chk@plt+0xe4c>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xfc,%esp
cmpb   $0x0,0x805f078
movl   $0x0,0x30(%esp)
je     804b830 <__sprintf_chk@plt+0x1100>
mov    0x110(%esp),%eax
lea    0x30(%esp),%ebp
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %ebp,0x14(%esp)
movl   $0x80577be,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
mov    %eax,%edx
je     804b650 <__sprintf_chk@plt+0xf20>
mov    %ebp,(%esp)
mov    %edx,0x2c(%esp)
call   8057330 <__sprintf_chk@plt+0xcc00>
mov    0x2c(%esp),%edx
add    $0xfc,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %edx,%eax
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%eax
lea    0x48(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804a620 <dbus_message_iter_init@plt>
test   %eax,%eax
je     804b8c0 <__sprintf_chk@plt+0x1190>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x61,%eax
jne    804b8c0 <__sprintf_chk@plt+0x1190>
mov    %ebx,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804b8c0 <__sprintf_chk@plt+0x1190>
lea    0x80(%esp),%esi
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
call   804f530 <__sprintf_chk@plt+0x4e00>
test   %al,%al
jne    804b848 <__sprintf_chk@plt+0x1118>
xor    %edi,%edi
lea    0xb8(%esp),%ebx
jmp    804b7e4 <__sprintf_chk@plt+0x10b4>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
jne    804b8f8 <__sprintf_chk@plt+0x11c8>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
lea    0x34(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b888 <__sprintf_chk@plt+0x1158>
lea    0x44(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x75,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b888 <__sprintf_chk@plt+0x1158>
lea    0x38(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b888 <__sprintf_chk@plt+0x1158>
lea    0x3c(%esp),%eax
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b888 <__sprintf_chk@plt+0x1158>
lea    0x40(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804b888 <__sprintf_chk@plt+0x1158>
mov    0x3c(%esp),%eax
add    $0x1,%edi
movl   $0x80577ea,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x14(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x44(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %esi,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    804b6c0 <__sprintf_chk@plt+0xf90>
mov    %eax,0x2c(%esp)
call   804f530 <__sprintf_chk@plt+0x4e00>
mov    0x2c(%esp),%edx
test   %al,%al
je     804b62c <__sprintf_chk@plt+0xefc>
mov    %edi,0x8(%esp)
movl   $0x8057801,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x2c(%esp),%edx
jmp    804b62c <__sprintf_chk@plt+0xefc>
lea    0x0(%esi),%esi
movl   $0x0,(%esp)
call   8053710 <__sprintf_chk@plt+0x8fe0>
jmp    804b5df <__sprintf_chk@plt+0xeaf>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8058abc,0x14(%esp)
movl   $0x805778a,0x10(%esp)
movl   $0x805778f,0xc(%esp)
movl   $0x80577cb,0x8(%esp)
movl   $0x80577d3,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804b6ae <__sprintf_chk@plt+0xf7e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8057756,0x10(%esp)
movl   $0x80586e8,0xc(%esp)
movl   $0x7a,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b62c <__sprintf_chk@plt+0xefc>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x80586e8,0xc(%esp)
movl   $0x61,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804b62c <__sprintf_chk@plt+0xefc>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
movl   $0x80586e8,0xc(%esp)
movl   $0x6f,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804b8b4 <__sprintf_chk@plt+0x1184>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%ebx
test   %ebx,%ebx
je     804ba8f <__sprintf_chk@plt+0x135f>
mov    0x805f074,%eax
test   %eax,%eax
je     804ba80 <__sprintf_chk@plt+0x1350>
add    $0x4,%ebx
mov    $0x1,%esi
cmpl   $0x1,0x78(%esp)
lea    0x48(%esp),%edi
lea    0x4c(%esp),%ebp
ja     804b9f0 <__sprintf_chk@plt+0x12c0>
jmp    804ba70 <__sprintf_chk@plt+0x1340>
mov    0x48(%esp),%eax
movl   $0x0,0x2c(%esp)
movl   $0x805f004,0x28(%esp)
movl   $0x69,0x24(%esp)
mov    %eax,0x4c(%esp)
mov    0x70(%esp),%eax
mov    %ebp,0x20(%esp)
movl   $0x75,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057839,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
jne    804ba68 <__sprintf_chk@plt+0x1338>
add    $0x1,%esi
add    $0x4,%ebx
cmp    0x78(%esp),%esi
je     804ba70 <__sprintf_chk@plt+0x1340>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   804f8f0 <__sprintf_chk@plt+0x51c0>
test   %eax,%eax
mov    %eax,%edx
jns    804b970 <__sprintf_chk@plt+0x1240>
neg    %eax
mov    %eax,(%esp)
mov    %edx,0x3c(%esp)
call   804a270 <strerror@plt>
mov    %eax,0x18(%esp)
mov    (%ebx),%eax
movl   $0x805781b,0x10(%esp)
movl   $0x80587cc,0xc(%esp)
movl   $0x499,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    0x3c(%esp),%edx
mov    %edx,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x5c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8057817,0x805f074
08
jmp    804b950 <__sprintf_chk@plt+0x1220>
movl   $0x80587d6,0xc(%esp)
movl   $0x48d,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x64(%esp),%ebx
test   %ebx,%ebx
je     804bbea <__sprintf_chk@plt+0x14ba>
add    $0x4,%ebx
mov    $0x1,%esi
cmpl   $0x1,0x68(%esp)
lea    0x3c(%esp),%edi
lea    0x38(%esp),%ebp
ja     804bb60 <__sprintf_chk@plt+0x1430>
jmp    804bbe0 <__sprintf_chk@plt+0x14b0>
nop
mov    0x3c(%esp),%eax
movl   $0x0,0x24(%esp)
mov    %ebp,0x20(%esp)
movl   $0x75,0x1c(%esp)
mov    %eax,0x38(%esp)
mov    0x60(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057842,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
jne    804bbd8 <__sprintf_chk@plt+0x14a8>
add    $0x1,%esi
add    $0x4,%ebx
cmp    0x68(%esp),%esi
je     804bbe0 <__sprintf_chk@plt+0x14b0>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   804f8f0 <__sprintf_chk@plt+0x51c0>
test   %eax,%eax
mov    %eax,%edx
jns    804baf0 <__sprintf_chk@plt+0x13c0>
neg    %eax
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   804a270 <strerror@plt>
mov    %eax,0x18(%esp)
mov    (%ebx),%eax
movl   $0x805781b,0x10(%esp)
movl   $0x80587ae,0xc(%esp)
movl   $0x474,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    0x2c(%esp),%edx
mov    %edx,%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x80587bd,0xc(%esp)
movl   $0x46b,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%ebx
movl   $0x1,0x44(%esp)
test   %ebx,%ebx
je     804bd9a <__sprintf_chk@plt+0x166a>
cmpb   $0x0,0x805f000
jne    804bd90 <__sprintf_chk@plt+0x1660>
mov    (%ebx),%esi
mov    $0x8057850,%edi
mov    $0xe,%ecx
lea    0x44(%esp),%ebp
repz cmpsb %es:(%edi),%ds:(%esi)
mov    $0x1,%esi
lea    0x4c(%esp),%edi
sete   %al
add    $0x4,%ebx
cmpl   $0x1,0x78(%esp)
movzbl %al,%eax
mov    %eax,0x40(%esp)
ja     804bd00 <__sprintf_chk@plt+0x15d0>
jmp    804bd80 <__sprintf_chk@plt+0x1650>
mov    0x4c(%esp),%eax
movl   $0x0,0x34(%esp)
mov    %ebp,0x30(%esp)
movl   $0x62,0x2c(%esp)
mov    %eax,0x48(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x28(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x70(%esp),%eax
movl   $0x62,0x24(%esp)
movl   $0x75,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x805787c,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
jne    804bd76 <__sprintf_chk@plt+0x1646>
add    $0x1,%esi
add    $0x4,%ebx
cmp    0x78(%esp),%esi
je     804bd80 <__sprintf_chk@plt+0x1650>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   804f8f0 <__sprintf_chk@plt+0x51c0>
test   %eax,%eax
jns    804bc70 <__sprintf_chk@plt+0x1540>
mov    %eax,0x3c(%esp)
neg    %eax
mov    %eax,(%esp)
call   804a270 <strerror@plt>
mov    %eax,0x18(%esp)
mov    (%ebx),%eax
movl   $0x805785e,0x10(%esp)
movl   $0x8058792,0xc(%esp)
movl   $0x450,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    0x3c(%esp),%edx
mov    %edx,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x5c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8054700 <__sprintf_chk@plt+0x9fd0>
jmp    804bc38 <__sprintf_chk@plt+0x1508>
movl   $0x80587a0,0xc(%esp)
movl   $0x443,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    $0x12,%ecx
push   %esi
push   %ebx
sub    $0x35c,%esp
mov    %eax,0x34(%esp)
mov    0x370(%esp),%eax
lea    0x1d8(%esp),%edi
mov    0x374(%esp),%ebx
movl   $0x0,0x74(%esp)
movl   $0x8058e13,0x78(%esp)
mov    %eax,0x44(%esp)
mov    %al,0x33(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x34c(%esp)
xor    %eax,%eax
test   %ebp,%ebp
rep stos %eax,%es:(%edi)
je     804d4fe <__sprintf_chk@plt+0x2dce>
test   %ebx,%ebx
je     804d4b6 <__sprintf_chk@plt+0x2d86>
lea    0x78(%esp),%eax
mov    %eax,0x20(%esp)
lea    0x74(%esp),%eax
movl   $0x0,0x24(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x14(%esp)
movl   $0x8057897,0x10(%esp)
movl   $0x8057d18,0xc(%esp)
mov    %ebp,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %edx,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
mov    %eax,%esi
js     804c3a8 <__sprintf_chk@plt+0x1c78>
mov    0x74(%esp),%eax
lea    0x88(%esp),%esi
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a620 <dbus_message_iter_init@plt>
test   %eax,%eax
je     804c208 <__sprintf_chk@plt+0x1ad8>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x61,%eax
jne    804c208 <__sprintf_chk@plt+0x1ad8>
mov    %esi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x65,%eax
jne    804c208 <__sprintf_chk@plt+0x1ad8>
lea    0xc0(%esp),%ebp
mov    %ebp,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
cmpb   $0x0,(%ebx)
jne    804c8e8 <__sprintf_chk@plt+0x21b8>
movb   $0x1,(%ebx)
movl   $0x0,0x40(%esp)
movl   $0x0,0x6c(%esp)
movl   $0x0,0x68(%esp)
movl   $0x0,0x60(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x50(%esp)
movl   $0x0,0x54(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0x4c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
je     804c988 <__sprintf_chk@plt+0x2258>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x65,%eax
jne    804cd08 <__sprintf_chk@plt+0x25d8>
lea    0xf8(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
lea    0x7c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0xf8(%esp),%eax
movl   $0x1,0xc(%esp)
movl   $0x73,0x4(%esp)
mov    %eax,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804cd40 <__sprintf_chk@plt+0x2610>
lea    0xf8(%esp),%eax
mov    %eax,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x76,%eax
jne    804cd78 <__sprintf_chk@plt+0x2648>
lea    0xf8(%esp),%eax
lea    0x130(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
cmpb   $0x0,0x33(%esp)
jne    804c290 <__sprintf_chk@plt+0x1b60>
mov    0x34(%esp),%eax
movl   $0x8057715,0x4(%esp)
mov    %eax,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     804c360 <__sprintf_chk@plt+0x1c30>
mov    0x7c(%esp),%eax
test   %eax,%eax
mov    %eax,0x38(%esp)
je     804d470 <__sprintf_chk@plt+0x2d40>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
sub    $0x62,%eax
cmp    $0x13,%eax
ja     804c070 <__sprintf_chk@plt+0x1940>
jmp    *0x8058644(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1a0(%esp),%eax
mov    $0x805791b,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x38(%esp),%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     804c4d0 <__sprintf_chk@plt+0x1da0>
mov    0x38(%esp),%esi
mov    $0x8057920,%edi
mov    $0x7,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x1a0(%esp),%eax
mov    %eax,0x210(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   804a580 <dbus_message_iter_next@plt>
jmp    804bf38 <__sprintf_chk@plt+0x1808>
lea    0x0(%esi),%esi
lea    0x1a0(%esp),%eax
mov    $0x805792e,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x38(%esp),%esi
mov    $0xa,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x1a0(%esp),%eax
mov    0x1a4(%esp),%edx
mov    %ebp,(%esp)
mov    %eax,0x1e4(%esp)
mov    %edx,0x1e8(%esp)
call   804a580 <dbus_message_iter_next@plt>
jmp    804bf38 <__sprintf_chk@plt+0x1808>
xchg   %ax,%ax
lea    0x1a0(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x1a0(%esp),%ebx
test   %ebx,%ebx
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%ebx)
je     804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%eax
movzbl (%eax),%eax
cmp    $0x49,%eax
jne    804c790 <__sprintf_chk@plt+0x2060>
mov    0x38(%esp),%ecx
cmpb   $0x64,0x1(%ecx)
jne    804c790 <__sprintf_chk@plt+0x2060>
cmpb   $0x0,0x2(%ecx)
jne    804c790 <__sprintf_chk@plt+0x2060>
mov    %ebx,0x1d8(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1a0(%esp),%eax
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x48(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
mov    %edi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x75,%eax
je     804c4f0 <__sprintf_chk@plt+0x1dc0>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x73,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x8057ac2,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
lea    0x168(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x168(%esp),%eax
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
je     804c070 <__sprintf_chk@plt+0x1940>
mov    %eax,0x1f4(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x1a0(%esp),%eax
mov    $0x8057927,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x38(%esp),%esi
mov    $0x7,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x1a0(%esp),%ebx
mov    %ebp,(%esp)
test   %ebx,%ebx
setne  0x200(%esp)
call   804a580 <dbus_message_iter_next@plt>
jmp    804bf38 <__sprintf_chk@plt+0x1808>
nop
movl   $0x8057756,0x10(%esp)
mov    $0xfffffffb,%esi
movl   $0x8058747,0xc(%esp)
movl   $0x35c,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
movl   $0x0,0x40(%esp)
movl   $0x0,0x3c(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
lea    0x74(%esp),%eax
mov    %eax,(%esp)
call   8057330 <__sprintf_chk@plt+0xcc00>
mov    %esi,%eax
mov    0x34c(%esp),%edx
xor    %gs:0x14,%edx
jne    804d46b <__sprintf_chk@plt+0x2d3b>
add    $0x35c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x7c(%esp),%eax
test   %eax,%eax
mov    %eax,0x38(%esp)
je     804d4da <__sprintf_chk@plt+0x2daa>
mov    0x805f07c,%eax
test   %eax,%eax
je     804c2c1 <__sprintf_chk@plt+0x1b91>
mov    0x38(%esp),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8051ad0 <__sprintf_chk@plt+0x73a0>
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x61,%eax
je     804c3c0 <__sprintf_chk@plt+0x1c90>
cmp    $0x72,%eax
jne    804c301 <__sprintf_chk@plt+0x1bd1>
lea    0x1a0(%esp),%eax
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x48(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
mov    %edi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x73,%eax
je     804c900 <__sprintf_chk@plt+0x21d0>
movzbl 0x805f07a,%eax
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   80569e0 <__sprintf_chk@plt+0xc2b0>
test   %eax,%eax
jg     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x805f07a
je     804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%eax
movl   $0x80578c6,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebp,(%esp)
call   804a580 <dbus_message_iter_next@plt>
jmp    804bf38 <__sprintf_chk@plt+0x1808>
lea    0x0(%esi),%esi
mov    0x34(%esp),%eax
movl   $0x8057c63,0x4(%esp)
mov    %eax,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     804c7c8 <__sprintf_chk@plt+0x2098>
mov    0x7c(%esp),%eax
test   %eax,%eax
mov    %eax,0x38(%esp)
je     804d522 <__sprintf_chk@plt+0x2df2>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
sub    $0x61,%eax
cmp    $0x14,%eax
ja     804c070 <__sprintf_chk@plt+0x1940>
jmp    *0x8058694(,%eax,4)
nop
movl   $0x0,0x40(%esp)
movl   $0x0,0x3c(%esp)
jmp    804c249 <__sprintf_chk@plt+0x1b19>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804c301 <__sprintf_chk@plt+0x1bd1>
mov    0x38(%esp),%esi
mov    $0x8057af1,%edi
mov    $0x9,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c301 <__sprintf_chk@plt+0x1bd1>
lea    0x168(%esp),%esi
mov    %ebx,(%esp)
lea    0x80(%esp),%edi
mov    %esi,0x4(%esp)
lea    0x1a0(%esp),%ebx
call   804a0f0 <dbus_message_iter_recurse@plt>
movb   $0x0,0x48(%esp)
jmp    804c430 <__sprintf_chk@plt+0x1d00>
nop
mov    %eax,0x8(%esp)
movl   $0x80579fe,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %esi,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
jne    804ceb3 <__sprintf_chk@plt+0x2783>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
movl   $0x1,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c428 <__sprintf_chk@plt+0x1cf8>
lea    0x84(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c428 <__sprintf_chk@plt+0x1cf8>
cmpb   $0x0,0x48(%esp)
mov    0x80(%esp),%eax
jne    804c410 <__sprintf_chk@plt+0x1ce0>
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
movl   $0x80578bb,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
movb   $0x1,0x48(%esp)
jmp    804c428 <__sprintf_chk@plt+0x1cf8>
mov    0x1a0(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x1f0(%esp)
call   804a580 <dbus_message_iter_next@plt>
jmp    804bf38 <__sprintf_chk@plt+0x1808>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%esi
mov    $0x805784b,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c15a <__sprintf_chk@plt+0x1a2a>
lea    0x168(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x168(%esp),%eax
mov    %eax,0x1dc(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x1a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x38(%esp),%eax
cmpb   $0x55,(%eax)
jne    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x49,0x1(%eax)
jne    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x44,0x2(%eax)
jne    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x3(%eax)
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x1a0(%esp),%eax
mov    %eax,0x4c(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
xchg   %ax,%ax
lea    0x1a0(%esp),%eax
mov    $0x805792e,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x38(%esp),%esi
mov    $0xa,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x1a0(%esp),%eax
mov    0x1a4(%esp),%edx
mov    %eax,0x50(%esp)
mov    %edx,0x54(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x0(%esi,%eiz,1),%esi
lea    0x1a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x1a0(%esp),%eax
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
je     804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x805a968,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804cdbc <__sprintf_chk@plt+0x268c>
mov    %eax,0x5c(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x0(%esi),%esi
lea    0x1a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
lea    0x1a0(%esp),%eax
mov    %eax,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x73,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x805789e,%edi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
lea    0x168(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x1a0(%esp),%eax
mov    %eax,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x168(%esp),%eax
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
cmove  0x60(%esp),%eax
mov    %eax,0x60(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x8057af1,%edi
mov    $0x9,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
lea    0x168(%esp),%esi
mov    %ebx,(%esp)
lea    0x80(%esp),%edi
mov    %esi,0x4(%esp)
lea    0x1a0(%esp),%ebx
call   804a0f0 <dbus_message_iter_recurse@plt>
jmp    804c77a <__sprintf_chk@plt+0x204a>
lea    0x0(%esi),%esi
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
movl   $0x1,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c772 <__sprintf_chk@plt+0x2042>
lea    0x84(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c772 <__sprintf_chk@plt+0x2042>
mov    0x80(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8051dc0 <__sprintf_chk@plt+0x7690>
test   %eax,%eax
je     804d231 <__sprintf_chk@plt+0x2b01>
mov    %eax,0x38(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
mov    0x38(%esp),%eax
mov    %eax,0x3c(%esp)
mov    %esi,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
je     804c6e8 <__sprintf_chk@plt+0x1fb8>
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x805a968,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     804cdb0 <__sprintf_chk@plt+0x2680>
mov    0x38(%esp),%esi
mov    $0x80578d8,%edi
mov    $0x14,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804cecf <__sprintf_chk@plt+0x279f>
mov    %ebx,0x1ec(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x7c(%esp),%esi
test   %esi,%esi
je     804d56a <__sprintf_chk@plt+0x2e3a>
mov    %ebx,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
je     804cdf0 <__sprintf_chk@plt+0x26c0>
cmp    $0x73,%eax
je     804ce63 <__sprintf_chk@plt+0x2733>
cmp    $0x61,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    %ebx,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x72,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    $0x8057af1,%edi
mov    $0x9,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
lea    0x168(%esp),%esi
mov    %ebx,(%esp)
lea    0x80(%esp),%edi
mov    %esi,0x4(%esp)
lea    0x1a0(%esp),%ebx
call   804a0f0 <dbus_message_iter_recurse@plt>
jmp    804c8d2 <__sprintf_chk@plt+0x21a2>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
movl   $0x1,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x73,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c8ca <__sprintf_chk@plt+0x219a>
lea    0x84(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x6f,0x4(%esp)
mov    %ebx,(%esp)
call   8056910 <__sprintf_chk@plt+0xc1e0>
test   %eax,%eax
js     804c8ca <__sprintf_chk@plt+0x219a>
mov    0x80(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8051dc0 <__sprintf_chk@plt+0x7690>
test   %eax,%eax
je     804d231 <__sprintf_chk@plt+0x2b01>
mov    %eax,0x38(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
mov    0x38(%esp),%eax
mov    %eax,0x40(%esp)
mov    %esi,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x72,%eax
je     804c840 <__sprintf_chk@plt+0x2110>
jmp    804c070 <__sprintf_chk@plt+0x1940>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
jmp    804bed6 <__sprintf_chk@plt+0x17a6>
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%esi
mov    $0x805789e,%edi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     804c928 <__sprintf_chk@plt+0x21f8>
mov    0x38(%esp),%esi
mov    $0x80578a6,%edi
mov    $0xe,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c301 <__sprintf_chk@plt+0x1bd1>
lea    0x168(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x168(%esp),%eax
cmpb   $0x0,0x805f07a
jne    804c960 <__sprintf_chk@plt+0x2230>
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
je     804c070 <__sprintf_chk@plt+0x1940>
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
movl   $0x80578b4,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x0(%esi),%esi
xor    %esi,%esi
cmpb   $0x0,0x44(%esp)
jne    804c249 <__sprintf_chk@plt+0x1b19>
mov    0x34(%esp),%eax
movl   $0x8057715,0x4(%esp)
mov    %eax,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     804cf06 <__sprintf_chk@plt+0x27d6>
mov    0x1d8(%esp),%edx
mov    $0x805788a,%eax
movl   $0x8057938,0x4(%esp)
movl   $0x1,(%esp)
test   %edx,%edx
cmovne %edx,%eax
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x1e0(%esp),%eax
test   %eax,%eax
je     804d28c <__sprintf_chk@plt+0x2b5c>
mov    0x1dc(%esp),%edx
mov    %eax,0x8(%esp)
movl   $0x805793e,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x1e4(%esp),%eax
mov    0x1e8(%esp),%edx
movl   $0x100,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x24c(%esp),%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8051170 <__sprintf_chk@plt+0x6a40>
mov    0x1e4(%esp),%ecx
mov    0x1e8(%esp),%ebx
movl   $0x2a,0x4(%esp)
mov    %ecx,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,%esi
lea    0x222(%esp),%eax
mov    %eax,(%esp)
call   8051080 <__sprintf_chk@plt+0x6950>
test   %esi,%esi
je     804d1cd <__sprintf_chk@plt+0x2a9d>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8057947,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x210(%esp),%eax
test   %eax,%eax
jle    804cb12 <__sprintf_chk@plt+0x23e2>
mov    %eax,0x8(%esp)
movl   $0x8057969,0x4(%esp)
movl   $0x1,(%esp)
movl   $0x0,0x1a0(%esp)
00
call   804a4a0 <__printf_chk@plt>
lea    0x1a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x210(%esp),%eax
mov    %eax,(%esp)
call   804ed70 <__sprintf_chk@plt+0x4640>
mov    0x1a0(%esp),%eax
test   %eax,%eax
je     804cb06 <__sprintf_chk@plt+0x23d6>
mov    %eax,0x8(%esp)
movl   $0x8057977,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x1a0(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
mov    0x1f4(%esp),%eax
test   %eax,%eax
je     804cb64 <__sprintf_chk@plt+0x2434>
mov    %eax,0x8(%esp)
movl   $0x805797d,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x1f0(%esp),%eax
test   %eax,%eax
jle    804cb58 <__sprintf_chk@plt+0x2428>
mov    %eax,0x8(%esp)
movl   $0x805798b,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
mov    0x1f8(%esp),%eax
test   %eax,%eax
je     804d1a1 <__sprintf_chk@plt+0x2a71>
mov    %eax,0x8(%esp)
movl   $0x8057992,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x204(%esp),%eax
test   %eax,%eax
je     804d397 <__sprintf_chk@plt+0x2c67>
mov    0x208(%esp),%edx
test   %edx,%edx
je     804d1f2 <__sprintf_chk@plt+0x2ac2>
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
movl   $0x80579b0,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x20c(%esp),%eax
test   %eax,%eax
je     804d14e <__sprintf_chk@plt+0x2a1e>
mov    %eax,0x8(%esp)
movl   $0x80579f4,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x214(%esp),%eax
test   %eax,%eax
je     804cc0f <__sprintf_chk@plt+0x24df>
mov    %eax,0x8(%esp)
movl   $0x8057a02,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x218(%esp),%eax
test   %eax,%eax
je     804cc32 <__sprintf_chk@plt+0x2502>
mov    %eax,0x8(%esp)
movl   $0x8057a0c,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
mov    0x21c(%esp),%eax
test   %eax,%eax
je     804cc61 <__sprintf_chk@plt+0x2531>
mov    %eax,0x8(%esp)
movl   $0x8057a35,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x1ec(%esp),%eax
test   %eax,%eax
je     804ccfd <__sprintf_chk@plt+0x25cd>
mov    %eax,0x8(%esp)
movzbl 0x805f07a,%ebx
movl   $0x8057a44,0x4(%esp)
movzbl 0x805f079,%esi
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
cmpl   $0x1,0x805f070
je     804ccfd <__sprintf_chk@plt+0x25cd>
call   804f4b0 <__sprintf_chk@plt+0x4d80>
xor    %edx,%edx
movl   $0x0,0xc(%esp)
movl   $0x8057a53,0x4(%esp)
cmp    $0x13,%eax
lea    -0x12(%eax),%ecx
mov    %esi,%eax
cmovae %ecx,%edx
mov    0x210(%esp),%ecx
movzbl %al,%eax
shl    $0x3,%eax
or     %ebx,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
test   %ecx,%ecx
setg   %al
mov    %eax,0x14(%esp)
lea    0x210(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x1ec(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8054610 <__sprintf_chk@plt+0x9ee0>
xor    %esi,%esi
jmp    804c249 <__sprintf_chk@plt+0x1b19>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8057756,0x10(%esp)
mov    $0xfffffffb,%esi
movl   $0x8058747,0xc(%esp)
movl   $0x36c,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
mov    $0xfffffffb,%esi
movl   $0x8058747,0xc(%esp)
movl   $0x374,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
xchg   %ax,%ax
movl   $0x8057756,0x10(%esp)
mov    $0xfffffffb,%esi
movl   $0x8058747,0xc(%esp)
movl   $0x37a,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
xchg   %ax,%ax
mov    %ebx,0x1e0(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x80578d8,%edi
mov    $0x14,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     804d0f5 <__sprintf_chk@plt+0x29c5>
mov    0x38(%esp),%esi
mov    $0x8057915,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
cmovne 0x58(%esp),%eax
mov    %eax,0x58(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x1a0(%esp),%eax
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x48(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
mov    %edi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x73,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    $0x80578a6,%edi
mov    $0xe,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
lea    0x168(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x168(%esp),%eax
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
cmove  0x6c(%esp),%eax
mov    %eax,0x6c(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
lea    0x1a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x1a0(%esp),%eax
test   %eax,%eax
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,(%eax)
je     804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x49,(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x64,0x1(%esi)
jne    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x2(%esi)
cmovne 0x68(%esp),%eax
mov    %eax,0x68(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x48(%esp)
je     804d0fe <__sprintf_chk@plt+0x29ce>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
jmp    804c070 <__sprintf_chk@plt+0x1940>
cmp    $0x54,%eax
jne    804d12c <__sprintf_chk@plt+0x29fc>
mov    0x38(%esp),%eax
cmpb   $0x54,0x1(%eax)
jne    804d12c <__sprintf_chk@plt+0x29fc>
cmpb   $0x59,0x2(%eax)
jne    804d12c <__sprintf_chk@plt+0x29fc>
cmpb   $0x0,0x3(%eax)
jne    804d12c <__sprintf_chk@plt+0x29fc>
mov    %ebx,0x1f8(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x34(%esp),%eax
movl   $0x8057c63,0x4(%esp)
mov    %eax,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     804d2b0 <__sprintf_chk@plt+0x2b80>
mov    0x5c(%esp),%eax
test   %eax,%eax
je     804d40d <__sprintf_chk@plt+0x2cdd>
mov    0x4c(%esp),%ecx
mov    %eax,0x8(%esp)
movl   $0x805793e,0x4(%esp)
movl   $0x1,(%esp)
mov    %ecx,0xc(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x50(%esp),%edi
lea    0x24c(%esp),%eax
mov    0x54(%esp),%ebp
movl   $0x100,0x4(%esp)
mov    %eax,(%esp)
mov    %edi,0x8(%esp)
mov    %ebp,0xc(%esp)
call   8051170 <__sprintf_chk@plt+0x6a40>
mov    %edi,0x8(%esp)
mov    %ebp,0xc(%esp)
movl   $0x2a,0x4(%esp)
mov    %eax,%ebx
lea    0x222(%esp),%eax
mov    %eax,(%esp)
call   8051080 <__sprintf_chk@plt+0x6950>
test   %ebx,%ebx
je     804d267 <__sprintf_chk@plt+0x2b37>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8057947,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x58(%esp),%eax
test   %eax,%eax
je     804cfe3 <__sprintf_chk@plt+0x28b3>
cmpb   $0x0,(%eax)
je     804cfe3 <__sprintf_chk@plt+0x28b3>
mov    0x58(%esp),%eax
movl   $0x8057a35,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804d05c <__sprintf_chk@plt+0x292c>
mov    (%eax),%edx
test   %edx,%edx
je     804d05c <__sprintf_chk@plt+0x292c>
movl   $0x8057a68,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x3c(%esp),%eax
mov    (%eax),%ebx
test   %ebx,%ebx
je     804d050 <__sprintf_chk@plt+0x2920>
mov    0x60(%esp),%edi
lea    0x4(%eax),%esi
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   804e500 <__sprintf_chk@plt+0x3dd0>
mov    %ebx,0x8(%esp)
test   %al,%al
je     804d0dc <__sprintf_chk@plt+0x29ac>
movl   $0x8057a58,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
test   %esi,%esi
je     804d050 <__sprintf_chk@plt+0x2920>
add    $0x4,%esi
mov    -0x4(%esi),%ebx
test   %ebx,%ebx
jne    804d016 <__sprintf_chk@plt+0x28e6>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
mov    0x64(%esp),%edi
test   %edi,%edi
je     804ccfd <__sprintf_chk@plt+0x25cd>
mov    %edi,0x8(%esp)
movzbl 0x805f07a,%ebx
movl   $0x8057a44,0x4(%esp)
movzbl 0x805f079,%esi
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
cmpl   $0x1,0x805f070
je     804ccfd <__sprintf_chk@plt+0x25cd>
call   804f4b0 <__sprintf_chk@plt+0x4d80>
xor    %edx,%edx
movl   $0x0,0xc(%esp)
movl   $0x8057a53,0x4(%esp)
mov    %edi,(%esp)
cmp    $0x13,%eax
lea    -0x12(%eax),%ecx
mov    %esi,%eax
movzbl %al,%eax
cmovae %ecx,%edx
shl    $0x3,%eax
xor    %esi,%esi
or     %ebx,%eax
mov    %eax,0x10(%esp)
mov    %edx,0x8(%esp)
call   8053f00 <__sprintf_chk@plt+0x97d0>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
movl   $0x80579fe,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804d042 <__sprintf_chk@plt+0x2912>
mov    %eax,0x64(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x805f07a
je     804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%eax
movl   $0x80578c1,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x38(%esp),%esi
mov    $0x805789e,%edi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d20f <__sprintf_chk@plt+0x2adf>
mov    %ebx,0x1fc(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x214(%esp),%eax
test   %eax,%eax
je     804d3c3 <__sprintf_chk@plt+0x2c93>
mov    %eax,0x8(%esp)
movl   $0x8057a17,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x218(%esp),%eax
test   %eax,%eax
je     804cc3e <__sprintf_chk@plt+0x250e>
mov    %eax,0x8(%esp)
movl   $0x8057a0c,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cc3e <__sprintf_chk@plt+0x250e>
mov    0x1fc(%esp),%eax
test   %eax,%eax
je     804cb8b <__sprintf_chk@plt+0x245b>
mov    %eax,0x8(%esp)
movl   $0x80579a1,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cb8b <__sprintf_chk@plt+0x245b>
test   %eax,%eax
je     804ca8c <__sprintf_chk@plt+0x235c>
mov    %eax,0x8(%esp)
movl   $0x805795a,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804ca8c <__sprintf_chk@plt+0x235c>
mov    %eax,0x8(%esp)
movl   $0x80579c2,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cbc5 <__sprintf_chk@plt+0x2495>
mov    0x38(%esp),%esi
mov    $0x80578ec,%edi
mov    $0xb,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d3ef <__sprintf_chk@plt+0x2cbf>
mov    %ebx,0x204(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
movl   $0x8057756,0x10(%esp)
mov    $0xfffffff4,%esi
movl   $0x8058747,0xc(%esp)
movl   $0x38b,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
test   %eax,%eax
je     804cfba <__sprintf_chk@plt+0x288a>
mov    %eax,0x8(%esp)
movl   $0x805795a,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cfba <__sprintf_chk@plt+0x288a>
mov    0x1dc(%esp),%eax
movl   $0x805a941,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804ca0c <__sprintf_chk@plt+0x22dc>
mov    0x68(%esp),%ecx
mov    $0x805788a,%eax
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %eax,(%esp)
call   804a260 <puts@plt>
mov    0x40(%esp),%eax
test   %eax,%eax
je     804d33b <__sprintf_chk@plt+0x2c0b>
mov    (%eax),%eax
test   %eax,%eax
je     804d33b <__sprintf_chk@plt+0x2c0b>
movl   $0x8057a68,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x40(%esp),%eax
mov    (%eax),%ebx
test   %ebx,%ebx
je     804d32f <__sprintf_chk@plt+0x2bff>
mov    0x6c(%esp),%edi
lea    0x4(%eax),%esi
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   804e500 <__sprintf_chk@plt+0x3dd0>
mov    %ebx,0x8(%esp)
test   %al,%al
je     804d381 <__sprintf_chk@plt+0x2c51>
movl   $0x8057a58,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
test   %esi,%esi
je     804d32f <__sprintf_chk@plt+0x2bff>
add    $0x4,%esi
mov    -0x4(%esi),%ebx
test   %ebx,%ebx
jne    804d2f9 <__sprintf_chk@plt+0x2bc9>
movl   $0xa,(%esp)
call   804a420 <putchar@plt>
xor    %esi,%esi
cmpl   $0x1,0x805f070
je     804c249 <__sprintf_chk@plt+0x1b19>
call   804f4b0 <__sprintf_chk@plt+0x4d80>
movl   $0x8057a5d,(%esp)
cmp    $0x16,%eax
lea    -0x15(%eax),%ebx
cmovb  %esi,%ebx
call   804a260 <puts@plt>
mov    0x68(%esp),%eax
mov    %ebx,0x8(%esp)
movl   $0x8057a53,0x4(%esp)
mov    %eax,(%esp)
call   804e330 <__sprintf_chk@plt+0x3c00>
jmp    804c249 <__sprintf_chk@plt+0x1b19>
movl   $0x80579fe,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804d321 <__sprintf_chk@plt+0x2bf1>
mov    0x208(%esp),%eax
test   %eax,%eax
je     804d44c <__sprintf_chk@plt+0x2d1c>
mov    %eax,0x8(%esp)
movl   $0x80579d1,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cbc5 <__sprintf_chk@plt+0x2495>
mov    0x218(%esp),%eax
test   %eax,%eax
je     804cc3e <__sprintf_chk@plt+0x250e>
mov    %eax,0x8(%esp)
movl   $0x8057a26,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cc3e <__sprintf_chk@plt+0x250e>
mov    0x38(%esp),%esi
mov    $0x80578f7,%edi
mov    $0xb,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d42e <__sprintf_chk@plt+0x2cfe>
mov    %ebx,0x208(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
mov    0x4c(%esp),%eax
movl   $0x805a941,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    804cf4e <__sprintf_chk@plt+0x281e>
mov    0x38(%esp),%esi
mov    $0x8057902,%edi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d494 <__sprintf_chk@plt+0x2d64>
mov    %ebx,0x20c(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
cmpb   $0x0,0x200(%esp)
je     804cbc5 <__sprintf_chk@plt+0x2495>
movl   $0x80579e5,(%esp)
call   804a260 <puts@plt>
jmp    804cbc5 <__sprintf_chk@plt+0x2495>
call   804a040 <__stack_chk_fail@plt>
movl   $0x8058720,0xc(%esp)
movl   $0x1eb,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8059224,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
mov    0x38(%esp),%esi
mov    $0x805790a,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d546 <__sprintf_chk@plt+0x2e16>
mov    %ebx,0x214(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
movl   $0x8058750,0xc(%esp)
movl   $0x34a,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x805788e,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058738,0xc(%esp)
movl   $0x2f8,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8059224,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058750,0xc(%esp)
movl   $0x349,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8058f29,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x805870b,0xc(%esp)
movl   $0x250,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8059224,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
mov    0x38(%esp),%eax
movl   $0x805790f,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
jne    804d58e <__sprintf_chk@plt+0x2e5e>
mov    %ebx,0x218(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
movl   $0x80586f6,0xc(%esp)
movl   $0x2b1,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x8059224,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
mov    0x38(%esp),%eax
movl   $0x8057915,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
jne    804c070 <__sprintf_chk@plt+0x1940>
mov    %ebx,0x21c(%esp)
jmp    804c070 <__sprintf_chk@plt+0x1940>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x6c,%esp
mov    0x80(%esp),%eax
mov    0x84(%esp),%edi
movl   $0x0,0x40(%esp)
movb   $0x0,0x3f(%esp)
test   %eax,%eax
je     804d90e <__sprintf_chk@plt+0x31de>
test   %edi,%edi
je     804d932 <__sprintf_chk@plt+0x3202>
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   8049f30 <dbus_error_init@plt>
movl   $0x8057bef,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
sete   0x2c(%esp)
cmpb   $0x0,0x805f078
je     804d870 <__sprintf_chk@plt+0x3140>
cmpb   $0x0,0x2c(%esp)
jne    804d887 <__sprintf_chk@plt+0x3157>
xor    %edx,%edx
mov    $0x1,%esi
cmpl   $0x1,0x88(%esp)
lea    0x40(%esp),%eax
lea    0x4(%edi),%ebx
mov    %eax,0x28(%esp)
ja     804d71c <__sprintf_chk@plt+0x2fec>
jmp    804d800 <__sprintf_chk@plt+0x30d0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
movl   $0x0,0x24(%esp)
mov    %ebx,0x20(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x14(%esp)
movl   $0x8057a73,0x10(%esp)
mov    0x80(%esp),%eax
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
jne    804d868 <__sprintf_chk@plt+0x3138>
lea    0x44(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x40(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x6f,0x8(%esp)
mov    %eax,(%esp)
call   804a150 <dbus_message_get_args@plt>
test   %eax,%eax
je     804d8c8 <__sprintf_chk@plt+0x3198>
lea    0x3f(%esp),%eax
mov    0x44(%esp),%ecx
add    $0x1,%esi
mov    %eax,0x4(%esp)
movzbl 0x2c(%esp),%eax
add    $0x4,%ebx
mov    0x80(%esp),%edx
mov    %eax,(%esp)
mov    (%edi),%eax
call   804bdc0 <__sprintf_chk@plt+0x1690>
cmp    0x88(%esp),%esi
je     804d868 <__sprintf_chk@plt+0x3138>
mov    (%edi),%ebp
movl   $0x8057715,0x4(%esp)
movl   $0x0,0x44(%esp)
mov    %ebp,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
jne    804d658 <__sprintf_chk@plt+0x2f28>
movl   $0x8057c63,0x4(%esp)
mov    %ebp,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     804d830 <__sprintf_chk@plt+0x3100>
lea    0x48(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804f8f0 <__sprintf_chk@plt+0x51c0>
test   %eax,%eax
js     804d7bf <__sprintf_chk@plt+0x308f>
mov    0x48(%esp),%eax
movl   $0x0,0x24(%esp)
movl   $0x75,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x4c(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x28(%esp),%eax
movl   $0x8057a8f,0x10(%esp)
mov    %eax,0x14(%esp)
jmp    804d684 <__sprintf_chk@plt+0x2f54>
mov    %eax,0x2c(%esp)
mov    (%ebx),%eax
movl   $0x8057a7e,0x10(%esp)
movl   $0x8058759,0xc(%esp)
movl   $0x3d2,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    0x2c(%esp),%edx
lea    0x0(%esi,%eiz,1),%esi
lea    0x50(%esp),%eax
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   804a240 <dbus_error_free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8057330 <__sprintf_chk@plt+0xcc00>
mov    0x2c(%esp),%edx
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %edx,%eax
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
movl   $0x0,0x24(%esp)
mov    %ebx,0x20(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x14(%esp)
movl   $0x8057a97,0x10(%esp)
jmp    804d684 <__sprintf_chk@plt+0x2f54>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edx
jmp    804d800 <__sprintf_chk@plt+0x30d0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,(%esp)
call   8053710 <__sprintf_chk@plt+0x8fe0>
cmpb   $0x0,0x2c(%esp)
je     804d62f <__sprintf_chk@plt+0x2eff>
cmpl   $0x1,0x88(%esp)
ja     804d62f <__sprintf_chk@plt+0x2eff>
lea    0x3f(%esp),%eax
mov    0x80(%esp),%edx
mov    $0x805771d,%ecx
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
mov    (%edi),%eax
call   804bdc0 <__sprintf_chk@plt+0x1690>
mov    %eax,%edx
lea    0x40(%esp),%eax
mov    %eax,0x28(%esp)
jmp    804d800 <__sprintf_chk@plt+0x30d0>
xchg   %ax,%ax
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   80568c0 <__sprintf_chk@plt+0xc190>
movl   $0x8057a9f,0x10(%esp)
movl   $0x8058759,0xc(%esp)
movl   $0x3f4,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x3,(%esp)
mov    %eax,0x14(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffffb,%edx
jmp    804d800 <__sprintf_chk@plt+0x30d0>
movl   $0x805875e,0xc(%esp)
movl   $0x3ab,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x805a82f,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x805875e,0xc(%esp)
movl   $0x3ac,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%ebx
mov    0x50(%esp),%ebp
mov    0x58(%esp),%edi
test   %ebx,%ebx
je     804da02 <__sprintf_chk@plt+0x32d2>
add    $0x4,%ebx
cmp    $0x1,%edi
mov    $0x1,%esi
ja     804d99a <__sprintf_chk@plt+0x326a>
jmp    804d9f8 <__sprintf_chk@plt+0x32c8>
lea    0x0(%esi),%esi
add    $0x1,%esi
add    $0x4,%ebx
cmp    %edi,%esi
je     804d9f8 <__sprintf_chk@plt+0x32c8>
movl   $0x0,0x24(%esp)
mov    %ebx,0x20(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057ab9,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %ebp,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
je     804d990 <__sprintf_chk@plt+0x3260>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8058800,0xc(%esp)
movl   $0x4f4,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x64(%esp),%ebx
mov    0x60(%esp),%ebp
mov    0x68(%esp),%edi
test   %ebx,%ebx
je     804db17 <__sprintf_chk@plt+0x33e7>
mov    0x805f074,%eax
test   %eax,%eax
je     804db08 <__sprintf_chk@plt+0x33d8>
add    $0x4,%ebx
cmp    $0x1,%edi
mov    $0x1,%esi
ja     804da7a <__sprintf_chk@plt+0x334a>
jmp    804daf8 <__sprintf_chk@plt+0x33c8>
lea    0x0(%esi),%esi
add    $0x1,%esi
add    $0x4,%ebx
cmp    %edi,%esi
je     804daf8 <__sprintf_chk@plt+0x33c8>
movl   $0x0,0x34(%esp)
movl   $0x805f004,0x30(%esp)
movl   $0x69,0x2c(%esp)
movl   $0x805f074,0x28(%esp)
movl   $0x73,0x24(%esp)
mov    %ebx,0x20(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057ac7,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %ebp,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
je     804da70 <__sprintf_chk@plt+0x3340>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8057817,0x805f074
08
jmp    804da58 <__sprintf_chk@plt+0x3328>
movl   $0x805877a,0xc(%esp)
movl   $0x424,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x4c,%esp
mov    0x54(%esp),%eax
movl   $0x1,0x3c(%esp)
test   %eax,%eax
je     804dbb9 <__sprintf_chk@plt+0x3489>
cmpb   $0x0,0x805f000
je     804db61 <__sprintf_chk@plt+0x3431>
call   8054700 <__sprintf_chk@plt+0x9fd0>
lea    0x3c(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x50(%esp),%eax
movl   $0x0,0x24(%esp)
movl   $0x62,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057ad3,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
add    $0x4c,%esp
ret
movl   $0x80587f2,0xc(%esp)
movl   $0x4d1,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%edi
movl   $0x1,0x4c(%esp)
test   %edi,%edi
je     804dcc2 <__sprintf_chk@plt+0x3592>
cmpb   $0x0,0x805f000
jne    804dcb8 <__sprintf_chk@plt+0x3588>
cmpl   $0x2,0x78(%esp)
jbe    804dca8 <__sprintf_chk@plt+0x3578>
lea    0x4(%edi),%ebp
mov    $0x2,%ebx
lea    0x8(%edi),%esi
lea    0x4c(%esp),%edi
jmp    804dc34 <__sprintf_chk@plt+0x3504>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
add    $0x4,%esi
cmp    0x78(%esp),%ebx
je     804dca8 <__sprintf_chk@plt+0x3578>
mov    0x70(%esp),%eax
movl   $0x0,0x34(%esp)
mov    %edi,0x30(%esp)
movl   $0x62,0x2c(%esp)
mov    %esi,0x28(%esp)
movl   $0x73,0x24(%esp)
mov    %ebp,0x20(%esp)
movl   $0x73,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057ae0,0x10(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
test   %eax,%eax
je     804dc28 <__sprintf_chk@plt+0x34f8>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x5c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8054700 <__sprintf_chk@plt+0x9fd0>
jmp    804dc08 <__sprintf_chk@plt+0x34d8>
movl   $0x80587eb,0xc(%esp)
movl   $0x4b4,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%ebx
test   %ebx,%ebx
je     804dd82 <__sprintf_chk@plt+0x3652>
cmpb   $0x0,0x805f000
jne    804dd78 <__sprintf_chk@plt+0x3648>
mov    (%ebx),%esi
mov    $0x8057c0e,%edi
mov    $0xe,%ecx
mov    $0x8057aed,%eax
repz cmpsb %es:(%edi),%ds:(%esi)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
movl   $0x8057cf8,0xc(%esp)
movl   $0x805771d,0x8(%esp)
seta   %cl
setb   %dl
cmp    %dl,%cl
mov    $0x8057afa,%edx
cmovne %edx,%eax
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
movl   $0x8057735,0x4(%esp)
mov    %eax,(%esp)
call   80570f0 <__sprintf_chk@plt+0xc9c0>
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8054700 <__sprintf_chk@plt+0x9fd0>
lea    0x0(%esi),%esi
jmp    804dd0b <__sprintf_chk@plt+0x35db>
movl   $0x805876c,0xc(%esp)
movl   $0x4e2,0x8(%esp)
movl   $0x80576df,0x4(%esp)
movl   $0x80576f7,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x6c,%esp
test   %eax,%eax
mov    %eax,0x2c(%esp)
mov    %edx,0x30(%esp)
mov    %ecx,0x28(%esp)
je     804e2ff <__sprintf_chk@plt+0x3bcf>
mov    0x30(%esp),%ecx
test   %ecx,%ecx
je     804e2db <__sprintf_chk@plt+0x3bab>
mov    0x28(%esp),%edx
test   %edx,%edx
je     804e2b7 <__sprintf_chk@plt+0x3b87>
mov    0x84(%esp),%eax
test   %eax,%eax
je     804e293 <__sprintf_chk@plt+0x3b63>
mov    0x88(%esp),%ecx
mov    0x28(%esp),%eax
sub    $0x2,%ecx
mov    (%eax),%eax
mov    %ecx,0x4c(%esp)
jmp    804de57 <__sprintf_chk@plt+0x3727>
cmpb   $0x0,(%eax)
mov    $0x8058a7b,%edx
cmove  %edx,%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
jne    804de3f <__sprintf_chk@plt+0x370f>
movl   $0x8057cb2,0x4(%esp)
mov    %ebp,(%esp)
call   804a440 <udev_device_has_tag@plt>
test   %eax,%eax
jne    804dec8 <__sprintf_chk@plt+0x3798>
mov    %ebp,(%esp)
call   804a5c0 <udev_device_unref@plt>
mov    0x28(%esp),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   804a540 <udev_list_entry_get_next@plt>
mov    %eax,(%esi)
test   %eax,%eax
je     804deba <__sprintf_chk@plt+0x378a>
mov    %eax,(%esp)
call   804a4d0 <udev_list_entry_get_name@plt>
mov    %eax,%esi
mov    0x80(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8050900 <__sprintf_chk@plt+0x61d0>
test   %eax,%eax
je     804deb8 <__sprintf_chk@plt+0x3788>
mov    0x2c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a130 <udev_device_new_from_syspath@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804de47 <__sprintf_chk@plt+0x3717>
movl   $0x8058ab9,0x4(%esp)
mov    %eax,(%esp)
call   804a570 <udev_device_get_property_value@plt>
test   %eax,%eax
jne    804de08 <__sprintf_chk@plt+0x36d8>
mov    $0x8058a7b,%eax
jmp    804de13 <__sprintf_chk@plt+0x36e3>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8058ac1,0x4(%esp)
mov    %ebp,(%esp)
call   804a440 <udev_device_has_tag@plt>
movl   $0x8059224,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x3c(%esp)
call   804a400 <udev_device_get_sysattr_value@plt>
test   %eax,%eax
mov    %eax,0x38(%esp)
je     804e20b <__sprintf_chk@plt+0x3adb>
mov    %ebp,(%esp)
call   8049fa0 <udev_device_get_subsystem@plt>
mov    %ebp,(%esp)
mov    %eax,0x40(%esp)
call   804a2f0 <udev_device_get_sysname@plt>
mov    %eax,0x44(%esp)
mov    0x28(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804a540 <udev_list_entry_get_next@plt>
test   %eax,%eax
mov    %eax,%ebx
mov    %eax,0x48(%esp)
je     804dff4 <__sprintf_chk@plt+0x38c4>
mov    %ebp,0x34(%esp)
mov    0x80(%esp),%ebp
jmp    804df52 <__sprintf_chk@plt+0x3822>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804a540 <udev_list_entry_get_next@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804dff0 <__sprintf_chk@plt+0x38c0>
mov    %ebx,(%esp)
call   804a4d0 <udev_list_entry_get_name@plt>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   8050900 <__sprintf_chk@plt+0x61d0>
test   %eax,%eax
je     804df40 <__sprintf_chk@plt+0x3810>
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8050900 <__sprintf_chk@plt+0x61d0>
test   %eax,%eax
jne    804df40 <__sprintf_chk@plt+0x3810>
mov    0x2c(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804a130 <udev_device_new_from_syspath@plt>
test   %eax,%eax
mov    %eax,%edi
je     804df40 <__sprintf_chk@plt+0x3810>
mov    0x34(%esp),%eax
movl   $0x8058ab9,0x4(%esp)
mov    %eax,(%esp)
call   804a570 <udev_device_get_property_value@plt>
test   %eax,%eax
je     804e201 <__sprintf_chk@plt+0x3ad1>
cmpb   $0x0,(%eax)
mov    $0x8058a7b,%edx
cmove  %edx,%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
je     804e1d8 <__sprintf_chk@plt+0x3aa8>
mov    %edi,(%esp)
call   804a5c0 <udev_device_unref@plt>
mov    %ebx,(%esp)
call   804a540 <udev_list_entry_get_next@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804df52 <__sprintf_chk@plt+0x3822>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%ebp
xor    %ebx,%ebx
mov    0x88(%esp),%eax
movl   $0x14,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804f700 <__sprintf_chk@plt+0x4fd0>
test   %eax,%eax
mov    %eax,%edx
cmove  %esi,%edx
cmp    $0x1,%ebx
mov    %eax,%edi
sbb    %eax,%eax
not    %eax
add    $0x2,%eax
mov    %eax,(%esp)
mov    %edx,0x34(%esp)
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    0x34(%esp),%edx
movl   $0x8058ad0,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %edi,(%esp)
mov    $0x8058a82,%edi
call   8049f50 <free@plt>
mov    0x38(%esp),%edx
mov    $0x8058e13,%eax
movl   $0x8058ad8,0x8(%esp)
movl   $0x1,0x4(%esp)
test   %edx,%edx
mov    %edx,%ecx
cmove  %eax,%ecx
cmove  %eax,%edi
mov    %ecx,0x34(%esp)
mov    $0x8058a81,%ecx
mov    $0x8058a84,%edx
cmove  %eax,%ecx
cmpl   $0x0,0x3c(%esp)
mov    %edi,0x20(%esp)
mov    %ecx,0x18(%esp)
cmove  %eax,%edx
mov    0x34(%esp),%eax
mov    %edx,0xc(%esp)
mov    %eax,0x1c(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   804a200 <__asprintf_chk@plt>
test   %eax,%eax
js     804e224 <__sprintf_chk@plt+0x3af4>
mov    0x88(%esp),%eax
movl   $0x46,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   804f700 <__sprintf_chk@plt+0x4fd0>
test   %eax,%eax
mov    %eax,%edx
cmove  0x5c(%esp),%edx
test   %ebx,%ebx
mov    %eax,%edi
je     804e238 <__sprintf_chk@plt+0x3b08>
movl   $0x0,(%esp)
mov    %edx,0x34(%esp)
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    0x34(%esp),%edx
movl   $0x8058ad0,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %edi,(%esp)
call   8049f50 <free@plt>
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
mov    0x48(%esp),%eax
mov    0x28(%esp),%ecx
test   %eax,%eax
mov    %eax,(%ecx)
je     804e1be <__sprintf_chk@plt+0x3a8e>
movl   $0x0,(%esp)
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    %eax,0x4(%esp)
mov    0x84(%esp),%eax
mov    %eax,(%esp)
call   804f080 <__sprintf_chk@plt+0x4950>
mov    0x4c(%esp),%ecx
mov    0x30(%esp),%edx
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
mov    0x28(%esp),%ecx
mov    %eax,%ebx
test   %eax,%eax
cmove  0x84(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
call   804ddb0 <__sprintf_chk@plt+0x3680>
mov    %ebx,(%esp)
call   8049f50 <free@plt>
mov    %ebp,(%esp)
call   804a5c0 <udev_device_unref@plt>
mov    0x28(%esp),%eax
mov    (%eax),%eax
jmp    804de57 <__sprintf_chk@plt+0x3727>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8057cb2,0x4(%esp)
mov    %edi,(%esp)
call   804a440 <udev_device_has_tag@plt>
test   %eax,%eax
je     804dfd1 <__sprintf_chk@plt+0x38a1>
mov    %edi,(%esp)
mov    0x34(%esp),%ebp
call   804a5c0 <udev_device_unref@plt>
jmp    804dff6 <__sprintf_chk@plt+0x38c6>
mov    $0x8058a7b,%eax
jmp    804dfb9 <__sprintf_chk@plt+0x3889>
movl   $0x8058ea6,0x4(%esp)
mov    %ebp,(%esp)
call   804a400 <udev_device_get_sysattr_value@plt>
mov    %eax,0x38(%esp)
jmp    804def8 <__sprintf_chk@plt+0x37c8>
mov    %ebp,(%esp)
call   804a5c0 <udev_device_unref@plt>
mov    $0xfffffff4,%eax
jmp    804deba <__sprintf_chk@plt+0x378a>
xchg   %ax,%ax
mov    0x84(%esp),%eax
mov    %edx,0x10(%esp)
movl   $0x8057a55,0xc(%esp)
movl   $0x8058ad0,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %edi,(%esp)
call   8049f50 <free@plt>
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
mov    0x48(%esp),%ecx
mov    $0x8057a55,%eax
mov    0x28(%esp),%edx
test   %ecx,%ecx
mov    %ecx,(%edx)
jne    804e177 <__sprintf_chk@plt+0x3a47>
jmp    804e1be <__sprintf_chk@plt+0x3a8e>
movl   $0x8058ae6,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x8058a8e,0x4(%esp)
movl   $0x8058ab2,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058ae6,0xc(%esp)
movl   $0x28,0x8(%esp)
movl   $0x8058a8e,0x4(%esp)
movl   $0x8058aad,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058ae6,0xc(%esp)
movl   $0x27,0x8(%esp)
movl   $0x8058a8e,0x4(%esp)
movl   $0x8057cb2,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x8058ae6,0xc(%esp)
movl   $0x26,0x8(%esp)
movl   $0x8058a8e,0x4(%esp)
movl   $0x8058aa8,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%ecx
movl   $0x0,0x1c(%esp)
test   %ecx,%ecx
je     804e448 <__sprintf_chk@plt+0x3d18>
mov    0x44(%esp),%eax
mov    0x40(%esp),%edx
test   %eax,%eax
mov    $0x8058e13,%eax
cmovne 0x44(%esp),%eax
test   %edx,%edx
mov    %eax,0x44(%esp)
je     804e458 <__sprintf_chk@plt+0x3d28>
mov    0x40(%esp),%eax
cmpb   $0x0,(%eax)
mov    $0x8058a7b,%eax
cmovne 0x40(%esp),%eax
mov    %eax,0x40(%esp)
call   804a170 <udev_new@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804e46f <__sprintf_chk@plt+0x3d3f>
mov    %eax,(%esp)
call   804a1d0 <udev_enumerate_new@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804e468 <__sprintf_chk@plt+0x3d38>
mov    0x40(%esp),%esi
mov    $0x8058a7b,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e430 <__sprintf_chk@plt+0x3d00>
movl   $0x8057cb2,0x4(%esp)
mov    %eax,(%esp)
call   804a2d0 <udev_enumerate_add_match_tag@plt>
mov    %eax,%esi
test   %esi,%esi
js     804e410 <__sprintf_chk@plt+0x3ce0>
mov    %ebx,(%esp)
call   8049f20 <udev_enumerate_scan_devices@plt>
test   %eax,%eax
mov    %eax,%esi
js     804e410 <__sprintf_chk@plt+0x3ce0>
mov    %ebx,(%esp)
call   804a250 <udev_enumerate_get_list_entry@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     804e410 <__sprintf_chk@plt+0x3ce0>
mov    0x48(%esp),%eax
lea    0x1c(%esp),%ecx
mov    0x40(%esp),%edx
movl   $0x80591c1,(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,%eax
call   804ddb0 <__sprintf_chk@plt+0x3680>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8049fc0 <udev_enumerate_unref@plt>
mov    %ebp,(%esp)
call   804a2c0 <udev_unref@plt>
mov    %esi,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x40(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804a2d0 <udev_enumerate_add_match_tag@plt>
mov    %eax,%esi
jmp    804e3c5 <__sprintf_chk@plt+0x3c95>
lea    0x0(%esi,%eiz,1),%esi
call   804f4b0 <__sprintf_chk@plt+0x4d80>
mov    %eax,0x48(%esp)
jmp    804e34b <__sprintf_chk@plt+0x3c1b>
xchg   %ax,%ax
movl   $0x8058a7b,0x40(%esp)
jmp    804e380 <__sprintf_chk@plt+0x3c50>
lea    0x0(%esi),%esi
mov    $0xfffffff4,%esi
jmp    804e418 <__sprintf_chk@plt+0x3ce8>
mov    $0xfffffff4,%eax
jmp    804e422 <__sprintf_chk@plt+0x3cf2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10903,%ebx
test   %esi,%esi
setne  %al
test   %edx,%edx
sete   %cl
test   %cl,%al
jne    804e4cd <__sprintf_chk@plt+0x3d9d>
test   %al,%al
je     804e4c6 <__sprintf_chk@plt+0x3d96>
cmp    %edi,(%edx)
je     804e4c6 <__sprintf_chk@plt+0x3d96>
xor    %ecx,%ecx
nop
jmp    804e4bd <__sprintf_chk@plt+0x3d8d>
lea    0x0(%esi),%esi
cmp    %edi,(%edx,%ecx,4)
je     804e4c6 <__sprintf_chk@plt+0x3d96>
add    $0x1,%ecx
cmp    %ecx,%esi
ja     804e4b8 <__sprintf_chk@plt+0x3d88>
xor    %eax,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x5523(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x628a(%ebx),%eax
movl   $0x5ee,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10887,%ebx
mov    0x24(%esp),%edx
test   %eax,%eax
jne    804e530 <__sprintf_chk@plt+0x3e00>
test   %eax,%eax
sete   %al
test   %edx,%edx
sete   %dl
add    $0x18,%esp
and    %edx,%eax
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
je     804e51b <__sprintf_chk@plt+0x3deb>
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
sete   %al
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10834,%ebx
mov    0x34(%esp),%edi
test   %esi,%esi
je     804e5cc <__sprintf_chk@plt+0x3e9c>
test   %edi,%edi
je     804e5f6 <__sprintf_chk@plt+0x3ec6>
mov    %esi,(%esp)
call   804a360 <strlen@plt>
mov    %edi,(%esp)
mov    %eax,%ebp
call   804a360 <strlen@plt>
test   %eax,%eax
je     804e5b8 <__sprintf_chk@plt+0x3e88>
cmp    %eax,%ebp
jb     804e5c8 <__sprintf_chk@plt+0x3e98>
sub    %eax,%ebp
add    %ebp,%esi
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8049fe0 <memcmp@plt>
mov    %eax,%edx
xor    %eax,%eax
test   %edx,%edx
cmove  %esi,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
lea    (%esi,%ebp,1),%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804e5ad <__sprintf_chk@plt+0x3e7d>
lea    -0x544c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x71,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x544c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x626e(%ebx),%eax
movl   $0x72,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10766,%ebx
test   %eax,%eax
je     804e748 <__sprintf_chk@plt+0x4018>
cmpb   $0x2e,(%eax)
je     804e6b0 <__sprintf_chk@plt+0x3f80>
mov    $0xb,%ecx
mov    %eax,%esi
lea    -0x625d(%ebx),%edi
mov    $0x1,%edx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
setb   %al
cmp    %al,%cl
je     804e6a0 <__sprintf_chk@plt+0x3f70>
mov    $0xc,%ecx
mov    %ebp,%esi
lea    -0x6252(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804e6a0 <__sprintf_chk@plt+0x3f70>
mov    $0xd,%ecx
mov    %ebp,%esi
lea    -0x6246(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x6239(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
mov    %edx,0x1c(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804e6c0 <__sprintf_chk@plt+0x3f90>
nop
add    $0x2c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x2c,%esp
mov    $0x1,%edx
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    -0x6231(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x6228(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x621f(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x6215(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x620b(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
test   %eax,%eax
setne  %dl
jmp    804e6a0 <__sprintf_chk@plt+0x3f70>
lea    -0x550b(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x6266(%ebx),%eax
movl   $0x5ad,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10607,%ebx
mov    0x24(%esp),%edx
test   %eax,%eax
je     804e7f9 <__sprintf_chk@plt+0x40c9>
test   %edx,%edx
jne    804e7b8 <__sprintf_chk@plt+0x4088>
jmp    804e7cf <__sprintf_chk@plt+0x409f>
lea    0x0(%esi,%eiz,1),%esi
cmp    (%eax),%cl
lea    0x0(%esi),%esi
jne    804e7c8 <__sprintf_chk@plt+0x4098>
add    $0x1,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
jne    804e7a8 <__sprintf_chk@plt+0x4078>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    -0x5457(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x62e2(%ebx),%eax
movl   $0x87,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x5457(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x86,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10557,%ebx
test   %eax,%eax
js     804e858 <__sprintf_chk@plt+0x4128>
mov    %eax,(%esp)
call   804a6b0 <close@plt>
test   %eax,%eax
js     804e882 <__sprintf_chk@plt+0x4152>
add    $0x18,%esp
pop    %ebx
ret
lea    -0x5464(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x6201(%ebx),%eax
movl   $0xbe,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
call   804a430 <__errno_location@plt>
mov    (%eax),%edx
xor    %eax,%eax
mov    %edx,%ecx
neg    %ecx
cmp    $0x4,%edx
cmovne %ecx,%eax
jmp    804e853 <__sprintf_chk@plt+0x4123>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x104ec,%ebx
sub    $0x10,%esp
call   804a430 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804e830 <__sprintf_chk@plt+0x4100>
test   %eax,%eax
jne    804e8d3 <__sprintf_chk@plt+0x41a3>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x5478(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x61f9(%ebx),%eax
movl   $0xd7,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10485,%ebx
test   %esi,%esi
je     804e9be <__sprintf_chk@plt+0x428e>
movzbl (%esi),%edx
movzbl %dl,%edi
cmp    $0x31,%edi
je     804e988 <__sprintf_chk@plt+0x4258>
mov    %edx,%eax
and    $0xffffffdf,%eax
cmp    $0x59,%al
mov    %edx,0x1c(%esp)
je     804e9a0 <__sprintf_chk@plt+0x4270>
cmp    $0x54,%al
je     804e9a0 <__sprintf_chk@plt+0x4270>
lea    -0x51e1(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a3a0 <strcasecmp@plt>
mov    %eax,%ecx
mov    $0x1,%eax
test   %ecx,%ecx
je     804e993 <__sprintf_chk@plt+0x4263>
cmp    $0x30,%edi
mov    0x1c(%esp),%edx
je     804e9b0 <__sprintf_chk@plt+0x4280>
and    $0xffffffd7,%edx
cmp    $0x46,%dl
je     804e9ba <__sprintf_chk@plt+0x428a>
lea    -0x61d2(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a3a0 <strcasecmp@plt>
mov    $0xffffffea,%edx
test   %eax,%eax
cmovne %edx,%eax
jmp    804e993 <__sprintf_chk@plt+0x4263>
lea    0x0(%esi),%esi
cmpb   $0x0,0x1(%esi)
mov    $0x1,%eax
jne    804e928 <__sprintf_chk@plt+0x41f8>
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
xor    %al,%al
cmpb   $0x0,0x1(%esi)
je     804e993 <__sprintf_chk@plt+0x4263>
jmp    804e95f <__sprintf_chk@plt+0x422f>
xor    %eax,%eax
jmp    804e993 <__sprintf_chk@plt+0x4263>
lea    -0x5486(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5dc3(%ebx),%eax
movl   $0xef,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10394,%ebx
mov    0x44(%esp),%edi
movl   $0x0,0x1c(%esp)
test   %esi,%esi
je     804ea85 <__sprintf_chk@plt+0x4355>
test   %edi,%edi
je     804eaaf <__sprintf_chk@plt+0x437f>
call   804a430 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebp
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a330 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804ea80 <__sprintf_chk@plt+0x4350>
cmp    %edx,%esi
je     804ea80 <__sprintf_chk@plt+0x4350>
cmpb   $0x0,(%edx)
mov    0x0(%ebp),%edx
je     804ea70 <__sprintf_chk@plt+0x4340>
mov    %edx,%eax
neg    %eax
test   %edx,%edx
mov    $0xffffffea,%edx
cmovg  %eax,%edx
add    $0x2c,%esp
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
test   %edx,%edx
jne    804ea57 <__sprintf_chk@plt+0x4327>
mov    %eax,(%edi)
add    $0x2c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x0(%ebp),%edx
jmp    804ea57 <__sprintf_chk@plt+0x4327>
lea    -0x549a(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x12a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x549a(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x61ce(%ebx),%eax
movl   $0x12b,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x102a6,%ebx
mov    0x34(%esp),%esi
movl   $0x0,0x1c(%esp)
test   %eax,%eax
je     804eb2a <__sprintf_chk@plt+0x43fa>
test   %esi,%esi
je     804eb54 <__sprintf_chk@plt+0x4424>
lea    0x1c(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804e9f0 <__sprintf_chk@plt+0x42c0>
test   %eax,%eax
js     804eb24 <__sprintf_chk@plt+0x43f4>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
xor    %eax,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    -0x5490(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x116,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x5490(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x61c0(%ebx),%eax
movl   $0x117,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10204,%ebx
mov    0x44(%esp),%edi
movl   $0x0,0x1c(%esp)
test   %esi,%esi
je     804ec15 <__sprintf_chk@plt+0x44e5>
test   %edi,%edi
je     804ec3f <__sprintf_chk@plt+0x450f>
call   804a430 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebp
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a670 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     804ec10 <__sprintf_chk@plt+0x44e0>
cmp    %edx,%esi
je     804ec10 <__sprintf_chk@plt+0x44e0>
cmpb   $0x0,(%edx)
mov    0x0(%ebp),%edx
je     804ec00 <__sprintf_chk@plt+0x44d0>
mov    %edx,%eax
neg    %eax
test   %edx,%edx
mov    $0xffffffea,%edx
cmovg  %eax,%edx
add    $0x2c,%esp
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
test   %edx,%edx
jne    804ebe7 <__sprintf_chk@plt+0x44b7>
mov    %eax,(%edi)
add    $0x2c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x0(%ebp),%edx
jmp    804ebe7 <__sprintf_chk@plt+0x44b7>
lea    -0x54a4(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x13e,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x54a4(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x61b8(%ebx),%eax
movl   $0x13f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x3c(%esp),%edi
mov    0x30(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10110,%ebx
mov    0x38(%esp),%ebp
mov    (%edi),%esi
test   %esi,%esi
cmove  %eax,%esi
cmpb   $0x0,(%esi)
je     804ecd0 <__sprintf_chk@plt+0x45a0>
cmpb   $0x0,(%eax)
je     804ecd0 <__sprintf_chk@plt+0x45a0>
mov    %ebp,0x4(%esp)
mov    %esi,(%esp)
call   804a6d0 <strspn@plt>
mov    %ebp,0x4(%esp)
add    %eax,%esi
mov    %esi,(%esp)
call   8049ee0 <strcspn@plt>
mov    0x34(%esp),%edx
mov    %eax,(%edx)
add    %esi,%eax
mov    %eax,(%edi)
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x100a6,%ebx
test   %eax,%eax
je     804ed3b <__sprintf_chk@plt+0x460b>
movzbl (%eax),%edx
test   %dl,%dl
je     804ed37 <__sprintf_chk@plt+0x4607>
movsbl %dl,%ecx
cmp    $0xa,%ecx
je     804ed37 <__sprintf_chk@plt+0x4607>
cmp    $0xd,%ecx
lea    0x1(%eax),%edx
jne    804ed25 <__sprintf_chk@plt+0x45f5>
jmp    804ed37 <__sprintf_chk@plt+0x4607>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xa,%ecx
je     804ed2e <__sprintf_chk@plt+0x45fe>
add    $0x1,%edx
cmp    $0xd,%ecx
je     804ed2e <__sprintf_chk@plt+0x45fe>
movsbl (%edx),%ecx
mov    %edx,%esi
test   %cl,%cl
jne    804ed18 <__sprintf_chk@plt+0x45e8>
movb   $0x0,(%esi)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
mov    %eax,%esi
jmp    804ed2e <__sprintf_chk@plt+0x45fe>
lea    -0x54b0(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x246,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0xc(%ebp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x10013,%ebx
mov    0x8(%ebp),%eax
mov    %gs:0x14,%edx
mov    %edx,-0x1c(%ebp)
xor    %edx,%edx
test   %edi,%edi
je     804ee29 <__sprintf_chk@plt+0x46f9>
test   %eax,%eax
js     804edff <__sprintf_chk@plt+0x46cf>
lea    -0x6164(%ebx),%esi
je     804edda <__sprintf_chk@plt+0x46aa>
sub    $0x30,%esp
lea    0x23(%esp),%esi
and    $0xfffffff0,%esi
mov    %eax,0x10(%esp)
lea    -0x6154(%ebx),%eax
mov    %eax,0xc(%esp)
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804a730 <__sprintf_chk@plt>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   80548a0 <__sprintf_chk@plt+0xa170>
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
jne    804edfa <__sprintf_chk@plt+0x46ca>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8057670 <__sprintf_chk@plt+0xcf40>
lea    -0x54c1(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x619c(%ebx),%eax
movl   $0x250,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x54c1(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5b70(%ebx),%eax
movl   $0x24f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x8(%ebp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xff23,%ebx
mov    %gs:0x14,%edx
mov    %edx,-0x1c(%ebp)
xor    %edx,%edx
cmp    $0x0,%eax
je     804ef30 <__sprintf_chk@plt+0x4800>
jle    804ef4b <__sprintf_chk@plt+0x481b>
sub    $0x30,%esp
lea    0x23(%esp),%esi
and    $0xfffffff0,%esi
mov    %eax,0x10(%esp)
lea    -0x613d(%ebx),%eax
mov    %eax,0xc(%esp)
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804a730 <__sprintf_chk@plt>
lea    -0x4d63(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a100 <fopen64@plt>
test   %eax,%eax
mov    %eax,%edi
je     804ef1e <__sprintf_chk@plt+0x47ee>
mov    %eax,0xc(%esp)
lea    -0x1d(%ebp),%eax
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a1a0 <fread@plt>
mov    %edi,(%esp)
mov    %eax,%esi
call   804a2e0 <feof@plt>
mov    %edi,(%esp)
mov    %eax,-0x2c(%ebp)
call   8049fd0 <fclose@plt>
test   %esi,%esi
jne    804ef30 <__sprintf_chk@plt+0x4800>
mov    -0x2c(%ebp),%edx
mov    $0x1,%eax
test   %edx,%edx
jne    804ef32 <__sprintf_chk@plt+0x4802>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    804ef32 <__sprintf_chk@plt+0x4802>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
jne    804ef46 <__sprintf_chk@plt+0x4816>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8057670 <__sprintf_chk@plt+0xcf40>
lea    -0x54e6(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x6145(%ebx),%eax
movl   $0x2c6,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x34(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xfe00,%ebx
test   %eax,%eax
sete   %al
test   %edx,%edx
sete   %dl
test   %al,%al
jne    804f030 <__sprintf_chk@plt+0x4900>
mov    0x30(%esp),%eax
test   %dl,%dl
mov    %eax,(%esp)
jne    804f070 <__sprintf_chk@plt+0x4940>
call   804a360 <strlen@plt>
xor    %ecx,%ecx
mov    %eax,%edi
not    %eax
cmp    %eax,0x38(%esp)
ja     804f024 <__sprintf_chk@plt+0x48f4>
mov    0x38(%esp),%ebp
add    %edi,%ebp
mov    %ebp,%eax
add    $0x1,%eax
je     804f024 <__sprintf_chk@plt+0x48f4>
mov    %eax,(%esp)
mov    %ecx,0xc(%esp)
call   804a230 <malloc@plt>
mov    0xc(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804f024 <__sprintf_chk@plt+0x48f4>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049f60 <memcpy@plt>
mov    0x38(%esp),%eax
lea    (%esi,%edi,1),%edx
mov    %edx,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   8049f60 <memcpy@plt>
mov    %esi,%ecx
movb   $0x0,(%esi,%ebp,1)
add    $0x1c,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
test   %dl,%dl
jne    804f050 <__sprintf_chk@plt+0x4920>
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804a0b0 <__strndup@plt>
mov    %eax,%ecx
jmp    804f024 <__sprintf_chk@plt+0x48f4>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x4(%esp)
movl   $0x1,(%esp)
call   804a720 <calloc@plt>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
mov    %eax,%ecx
mov    %ecx,%eax
ret
call   804a410 <__strdup@plt>
mov    %eax,%ecx
jmp    804f024 <__sprintf_chk@plt+0x48f4>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xfd06,%ebx
test   %esi,%esi
je     804f0c0 <__sprintf_chk@plt+0x4990>
mov    %esi,(%esp)
call   804a360 <strlen@plt>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804ef80 <__sprintf_chk@plt+0x4850>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804f0a0 <__sprintf_chk@plt+0x4970>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xfcb6,%ebx
test   %esi,%esi
je     804f114 <__sprintf_chk@plt+0x49e4>
lea    -0x60e0(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
test   %eax,%eax
je     804f108 <__sprintf_chk@plt+0x49d8>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
jmp    804e620 <__sprintf_chk@plt+0x3ef0>
lea    -0x54f2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x6266(%ebx),%eax
movl   $0x5bd,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xfc44,%ebx
test   %edx,%edx
jne    804f2ce <__sprintf_chk@plt+0x4b9e>
lea    -0x60c6(%ebx),%eax
mov    %eax,(%esp)
call   804a6e0 <opendir@plt>
test   %eax,%eax
mov    %eax,%esi
je     804f22c <__sprintf_chk@plt+0x4afc>
movl   $0x0,0x1c(%esp)
lea    0x20(%esp),%edi
lea    0x0(%esi),%esi
mov    %esi,(%esp)
call   804a5e0 <readdir64@plt>
test   %eax,%eax
je     804f218 <__sprintf_chk@plt+0x4ae8>
lea    0x13(%eax),%ebp
mov    %ebp,(%esp)
movl   $0xffffffff,0x20(%esp)
call   804f0d0 <__sprintf_chk@plt+0x49a0>
test   %al,%al
jne    804f188 <__sprintf_chk@plt+0x4a58>
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   804eb80 <__sprintf_chk@plt+0x4450>
test   %eax,%eax
js     804f188 <__sprintf_chk@plt+0x4a58>
cmpl   $0x2,0x20(%esp)
jle    804f188 <__sprintf_chk@plt+0x4a58>
mov    %esi,(%esp)
call   8049f40 <dirfd@plt>
mov    0x20(%esp),%ebp
cmp    %ebp,%eax
je     804f188 <__sprintf_chk@plt+0x4a58>
mov    0x54(%esp),%eax
mov    0x50(%esp),%edx
mov    %eax,(%esp)
mov    %ebp,%eax
call   804e480 <__sprintf_chk@plt+0x3d50>
test   %al,%al
jne    804f188 <__sprintf_chk@plt+0x4a58>
mov    %ebp,(%esp)
call   804e830 <__sprintf_chk@plt+0x4100>
test   %eax,%eax
jns    804f188 <__sprintf_chk@plt+0x4a58>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x9,%eax
je     804f188 <__sprintf_chk@plt+0x4a58>
mov    0x1c(%esp),%ecx
neg    %eax
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %eax,0x1c(%esp)
jmp    804f188 <__sprintf_chk@plt+0x4a58>
mov    %esi,(%esp)
call   804a6c0 <closedir@plt>
mov    0x1c(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
movl   $0x7,(%esp)
call   804a010 <getrlimit64@plt>
test   %eax,%eax
js     804f2a4 <__sprintf_chk@plt+0x4b74>
cmpl   $0x3,0x28(%esp)
mov    $0x3,%esi
movl   $0x0,0x1c(%esp)
mov    0x54(%esp),%edi
jg     804f269 <__sprintf_chk@plt+0x4b39>
jmp    804f220 <__sprintf_chk@plt+0x4af0>
xchg   %ax,%ax
add    $0x1,%esi
cmp    %esi,0x28(%esp)
jle    804f220 <__sprintf_chk@plt+0x4af0>
mov    0x50(%esp),%edx
mov    %esi,%eax
mov    %edi,(%esp)
call   804e480 <__sprintf_chk@plt+0x3d50>
test   %al,%al
jne    804f260 <__sprintf_chk@plt+0x4b30>
mov    %esi,(%esp)
call   804e830 <__sprintf_chk@plt+0x4100>
test   %eax,%eax
jns    804f260 <__sprintf_chk@plt+0x4b30>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x9,%eax
je     804f260 <__sprintf_chk@plt+0x4b30>
mov    0x1c(%esp),%ecx
neg    %eax
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %eax,0x1c(%esp)
jmp    804f260 <__sprintf_chk@plt+0x4b30>
lea    -0x5519(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5824(%ebx),%eax
movl   $0x607,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
mov    0x50(%esp),%eax
test   %eax,%eax
jne    804f15e <__sprintf_chk@plt+0x4a2e>
lea    -0x5519(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x60de(%ebx),%eax
movl   $0x5fc,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
mov    $0x15,%esi
push   %ebx
sub    $0x1c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xfa73,%ebx
mov    0x30(%esp),%ebp
mov    0x34(%esp),%edi
jmp    804f344 <__sprintf_chk@plt+0x4c14>
lea    0x0(%esi,%eiz,1),%esi
movl   $0xc350,(%esp)
call   804a190 <usleep@plt>
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   804a3d0 <__open64_2@plt>
test   %eax,%eax
jns    804f398 <__sprintf_chk@plt+0x4c68>
call   804a430 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x5,%edx
jne    804f388 <__sprintf_chk@plt+0x4c58>
sub    $0x1,%esi
jne    804f338 <__sprintf_chk@plt+0x4c08>
mov    $0xfffffffb,%edx
add    $0x1c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edx,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
call   804a430 <__errno_location@plt>
mov    (%eax),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
neg    %edx
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
mov    %eax,0xc(%esp)
call   804a630 <isatty@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
js     804f374 <__sprintf_chk@plt+0x4c44>
jne    804f36a <__sprintf_chk@plt+0x4c3a>
mov    %edx,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
mov    $0xffffffe7,%edx
jmp    804f36a <__sprintf_chk@plt+0x4c3a>
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf9c5,%ebx
test   %esi,%esi
je     804f415 <__sprintf_chk@plt+0x4ce5>
mov    (%esi),%eax
xor    %edi,%edi
test   %eax,%eax
js     804f3f1 <__sprintf_chk@plt+0x4cc1>
mov    %eax,(%esp)
call   804e830 <__sprintf_chk@plt+0x4100>
movl   $0xffffffff,(%esi)
mov    %eax,%edi
mov    0x4(%esi),%edx
xor    %eax,%eax
test   %edx,%edx
js     804f409 <__sprintf_chk@plt+0x4cd9>
mov    %edx,(%esp)
call   804e830 <__sprintf_chk@plt+0x4100>
movl   $0xffffffff,0x4(%esi)
test   %edi,%edi
cmovs  %edi,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x552e(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x590e(%ebx),%eax
movl   $0x867,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
nop
push   %ebx
sub    $0x28,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf94b,%ebx
lea    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
movl   $0x5413,0x4(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,(%esp)
call   804a0e0 <ioctl@plt>
test   %eax,%eax
js     804f498 <__sprintf_chk@plt+0x4d68>
movzwl 0x1a(%esp),%edx
mov    $0xfffffffb,%eax
test   %dx,%dx
movzwl %dx,%ecx
cmovne %ecx,%eax
add    $0x28,%esp
pop    %ebx
ret
nop
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
add    $0x28,%esp
pop    %ebx
neg    %eax
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf8de,%ebx
sub    $0x28,%esp
mov    0x2ec(%ebx),%eax
test   %eax,%eax
je     804f4d4 <__sprintf_chk@plt+0x4da4>
mov    0x2ec(%ebx),%eax
add    $0x28,%esp
pop    %ebx
ret
lea    -0x6015(%ebx),%eax
mov    %eax,(%esp)
movl   $0x0,0x1c(%esp)
call   804a1e0 <getenv@plt>
test   %eax,%eax
je     804f4fe <__sprintf_chk@plt+0x4dce>
lea    0x1c(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804eb80 <__sprintf_chk@plt+0x4450>
cmpl   $0x0,0x1c(%esp)
jle    804f511 <__sprintf_chk@plt+0x4de1>
mov    0x1c(%esp),%eax
mov    %eax,0x2ec(%ebx)
jmp    804f4cf <__sprintf_chk@plt+0x4d9f>
movl   $0x1,(%esp)
call   804f440 <__sprintf_chk@plt+0x4d10>
mov    $0x50,%edx
test   %eax,%eax
cmovg  %eax,%edx
mov    %edx,0x1c(%esp)
jmp    804f505 <__sprintf_chk@plt+0x4dd5>
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf85e,%ebx
sub    $0x18,%esp
mov    0x278(%ebx),%eax
test   %eax,%eax
js     804f553 <__sprintf_chk@plt+0x4e23>
test   %eax,%eax
setne  %al
add    $0x18,%esp
pop    %ebx
ret
movl   $0x1,(%esp)
call   804a630 <isatty@plt>
test   %eax,%eax
setg   %al
movzbl %al,%eax
mov    %eax,0x278(%ebx)
jmp    804f549 <__sprintf_chk@plt+0x4e19>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf814,%ebx
mov    0x48(%esp),%esi
mov    0x4c(%esp),%ebp
test   %edi,%edi
je     804f69e <__sprintf_chk@plt+0x4f6e>
cmp    $0x64,%ebp
ja     804f674 <__sprintf_chk@plt+0x4f44>
cmp    $0x2,%esi
jbe    804f6c8 <__sprintf_chk@plt+0x4f98>
cmp    %esi,0x44(%esp)
jbe    804f658 <__sprintf_chk@plt+0x4f28>
cmpl   $0x3,0x44(%esp)
jbe    804f658 <__sprintf_chk@plt+0x4f28>
lea    0x1(%esi),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a720 <calloc@plt>
test   %eax,%eax
mov    %eax,%ecx
je     804f670 <__sprintf_chk@plt+0x4f40>
imul   %esi,%ebp
mov    $0x51eb851f,%edx
mov    %edi,0x4(%esp)
mov    %ecx,(%esp)
mov    %ecx,0x18(%esp)
mov    %ebp,%eax
mul    %edx
mov    %edx,%ebp
shr    $0x5,%ebp
lea    -0x3(%esi),%edx
cmp    %edx,%ebp
cmova  %edx,%ebp
mov    %ebp,0x8(%esp)
mov    %edx,0x1c(%esp)
call   8049f60 <memcpy@plt>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%edx
lea    0x3(%ecx,%ebp,1),%eax
movb   $0x2e,(%ecx,%ebp,1)
sub    %ebp,%edx
movb   $0x2e,0x1(%ecx,%ebp,1)
movb   $0x2e,0x2(%ecx,%ebp,1)
mov    %eax,%ecx
mov    0x44(%esp),%eax
mov    %ecx,(%esp)
mov    %edx,0x8(%esp)
add    $0x3,%eax
sub    %esi,%eax
add    %eax,%ebp
add    %ebp,%edi
mov    %edi,0x4(%esp)
call   8049f60 <memcpy@plt>
mov    0x18(%esp),%ecx
mov    %ecx,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804a0b0 <__strndup@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
jmp    804f64c <__sprintf_chk@plt+0x4f1c>
lea    -0x553c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5ffa(%ebx),%eax
movl   $0xcc6,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x553c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0xcc5,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x553c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5feb(%ebx),%eax
movl   $0xcc7,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf68a,%ebx
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   804a360 <strlen@plt>
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %edx,0xc(%esp)
mov    0x24(%esp),%edx
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   804f570 <__sprintf_chk@plt+0x4e40>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb0(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf63e,%ebx
mov    0xb4(%esp),%esi
test   %edi,%edi
jle    804f81c <__sprintf_chk@plt+0x50ec>
test   %esi,%esi
lea    0x10(%esp),%eax
cmove  %eax,%esi
mov    %esi,%ebp
and    $0x1,%ebp
test   %ebp,%ebp
mov    %esi,%edi
mov    $0x80,%edx
jne    804f7f0 <__sprintf_chk@plt+0x50c0>
test   $0x2,%edi
jne    804f800 <__sprintf_chk@plt+0x50d0>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     804f7a3 <__sprintf_chk@plt+0x5073>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804f7ab <__sprintf_chk@plt+0x507b>
movb   $0x0,(%edi)
mov    0xb0(%esp),%eax
movl   $0x4,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804a710 <waitid@plt>
test   %eax,%eax
jns    804f818 <__sprintf_chk@plt+0x50e8>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x4,%eax
je     804f779 <__sprintf_chk@plt+0x5049>
neg    %eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%esi),%edi
mov    $0x7f,%dl
test   $0x2,%edi
movb   $0x0,(%esi)
je     804f78c <__sprintf_chk@plt+0x505c>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804f78c <__sprintf_chk@plt+0x505c>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804f7e0 <__sprintf_chk@plt+0x50b0>
lea    -0x554f(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5f6a(%ebx),%eax
movl   $0xd31,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%eax
mov    0x38(%esp),%ecx
mov    0x3c(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf52e,%ebx
mov    %eax,0x18(%esp)
mov    0x34(%esp),%eax
mov    %ecx,%esi
and    %edx,%esi
cmp    $0xffffffff,%esi
movl   $0x0,0x1c(%esp)
mov    %ax,0x1c(%esp)
mov    $0xffffffff,%eax
je     804f8ab <__sprintf_chk@plt+0x517b>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %ecx,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x8(%esp)
lea    0x18(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a120 <poll@plt>
test   %eax,%eax
js     804f8d8 <__sprintf_chk@plt+0x51a8>
movswl 0x1e(%esp),%edx
cmovne %edx,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
neg    %eax
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%ebp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf494,%ebx
test   %ebp,%ebp
je     804faa7 <__sprintf_chk@plt+0x5377>
mov    0x0(%ebp),%eax
test   %eax,%eax
je     804fa7d <__sprintf_chk@plt+0x534d>
lea    -0x5fff(%ebx),%edi
mov    $0x5,%ecx
mov    %eax,%esi
mov    %edi,0x1c(%esp)
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804f9a0 <__sprintf_chk@plt+0x5270>
mov    0x1c(%esp),%eax
mov    %eax,0x0(%ebp)
mov    0x54(%esp),%eax
test   %eax,%eax
je     804f953 <__sprintf_chk@plt+0x5223>
mov    0x54(%esp),%eax
movl   $0x0,(%eax)
mov    0x58(%esp),%eax
test   %eax,%eax
je     804f965 <__sprintf_chk@plt+0x5235>
mov    0x58(%esp),%eax
movl   $0x0,(%eax)
mov    0x5c(%esp),%eax
test   %eax,%eax
je     804f979 <__sprintf_chk@plt+0x5249>
mov    0x5c(%esp),%edi
lea    -0x6000(%ebx),%eax
mov    %eax,(%edi)
mov    0x60(%esp),%ebp
test   %ebp,%ebp
je     804fa2b <__sprintf_chk@plt+0x52fb>
mov    0x60(%esp),%edx
lea    -0x5e30(%ebx),%eax
mov    %eax,(%edx)
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x30,(%eax)
je     804fa38 <__sprintf_chk@plt+0x5308>
lea    0x2c(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804eae0 <__sprintf_chk@plt+0x43b0>
test   %eax,%eax
js     804fa48 <__sprintf_chk@plt+0x5318>
call   804a430 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049ec0 <getpwuid@plt>
test   %eax,%eax
je     804fa68 <__sprintf_chk@plt+0x5338>
mov    (%eax),%edx
mov    %edx,0x0(%ebp)
mov    0x54(%esp),%edi
test   %edi,%edi
je     804f9f8 <__sprintf_chk@plt+0x52c8>
mov    0x8(%eax),%edx
mov    0x54(%esp),%edi
mov    %edx,(%edi)
mov    0x58(%esp),%esi
test   %esi,%esi
je     804fa09 <__sprintf_chk@plt+0x52d9>
mov    0xc(%eax),%edx
mov    0x58(%esp),%edi
mov    %edx,(%edi)
mov    0x5c(%esp),%ecx
test   %ecx,%ecx
je     804fa1a <__sprintf_chk@plt+0x52ea>
mov    0x14(%eax),%edx
mov    0x5c(%esp),%edi
mov    %edx,(%edi)
mov    0x60(%esp),%edx
test   %edx,%edx
je     804fa2b <__sprintf_chk@plt+0x52fb>
mov    0x18(%eax),%eax
mov    0x60(%esp),%edi
mov    %eax,(%edi)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x0,0x1(%eax)
je     804f93a <__sprintf_chk@plt+0x520a>
jmp    804f9a9 <__sprintf_chk@plt+0x5279>
nop
call   804a430 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%esi
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   8049e00 <getpwnam@plt>
test   %eax,%eax
jne    804f9e7 <__sprintf_chk@plt+0x52b7>
mov    (%esi),%edx
mov    $0xfffffffd,%eax
mov    %edx,%ecx
neg    %ecx
test   %edx,%edx
cmovg  %ecx,%eax
jmp    804f993 <__sprintf_chk@plt+0x5263>
lea    -0x557c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e3a(%ebx),%eax
movl   $0x1052,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x557c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e39(%ebx),%eax
movl   $0x1051,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf2a4,%ebx
test   %edi,%edi
je     804fb90 <__sprintf_chk@plt+0x5460>
mov    %edi,(%esp)
lea    0x38(%esp),%ebp
call   804a360 <strlen@plt>
mov    %eax,%esi
mov    0x34(%esp),%eax
test   %eax,%eax
jne    804fb26 <__sprintf_chk@plt+0x53f6>
jmp    804fb40 <__sprintf_chk@plt+0x5410>
xchg   %ax,%ax
add    %eax,%esi
mov    0x0(%ebp),%eax
lea    0x4(%ebp),%edx
test   %eax,%eax
je     804fb40 <__sprintf_chk@plt+0x5410>
mov    %edx,%ebp
mov    %eax,(%esp)
call   804a360 <strlen@plt>
mov    %esi,%edx
not    %edx
cmp    %edx,%eax
jbe    804fb18 <__sprintf_chk@plt+0x53e8>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1,%esi
je     804fb36 <__sprintf_chk@plt+0x5406>
mov    %esi,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804fb36 <__sprintf_chk@plt+0x5406>
mov    %edi,0x4(%esp)
lea    0x3c(%esp),%edi
mov    %esi,(%esp)
call   804a030 <stpcpy@plt>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804fb86 <__sprintf_chk@plt+0x5456>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0x4(%esp)
add    $0x4,%edi
mov    %eax,(%esp)
call   804a030 <stpcpy@plt>
mov    -0x8(%edi),%edx
test   %edx,%edx
jne    804fb70 <__sprintf_chk@plt+0x5440>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x1,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
je     804fb36 <__sprintf_chk@plt+0x5406>
movb   $0x0,(%eax)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf1d5,%ebx
movl   $0x0,0x1c(%esp)
test   %edi,%edi
je     804fc38 <__sprintf_chk@plt+0x5508>
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x1f4(%ebx,%esi,4),%eax
test   %eax,%eax
je     804fbf3 <__sprintf_chk@plt+0x54c3>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
je     804fc28 <__sprintf_chk@plt+0x54f8>
add    $0x1,%esi
cmp    $0x8,%esi
jne    804fbd8 <__sprintf_chk@plt+0x54a8>
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804e9f0 <__sprintf_chk@plt+0x42c0>
test   %eax,%eax
js     804fc31 <__sprintf_chk@plt+0x5501>
mov    0x1c(%esp),%edx
mov    $0xffffffff,%eax
cmp    $0x7,%edx
cmovbe %edx,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    $0xffffffff,%eax
jmp    804fc1e <__sprintf_chk@plt+0x54ee>
lea    -0x5592(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x124a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf115,%ebx
test   %edi,%edi
je     804fd20 <__sprintf_chk@plt+0x55f0>
xor    %esi,%esi
jmp    804fca0 <__sprintf_chk@plt+0x5570>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%esi
cmp    $0x20,%esi
je     804fcc8 <__sprintf_chk@plt+0x5598>
mov    -0x274(%ebx,%esi,4),%eax
test   %eax,%eax
je     804fc98 <__sprintf_chk@plt+0x5568>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
jne    804fc98 <__sprintf_chk@plt+0x5568>
test   %esi,%esi
je     804fcc8 <__sprintf_chk@plt+0x5598>
mov    %esi,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x5ca5(%ebx),%eax
xor    %esi,%esi
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
je     804fcea <__sprintf_chk@plt+0x55ba>
call   804a160 <__libc_current_sigrtmin@plt>
add    $0x6,%edi
mov    %eax,%esi
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804e9f0 <__sprintf_chk@plt+0x42c0>
test   %eax,%eax
js     804fd19 <__sprintf_chk@plt+0x55e9>
mov    0x1c(%esp),%edx
mov    $0xffffffff,%eax
add    %esi,%edx
lea    -0x1(%edx),%ecx
cmp    $0x40,%ecx
cmovb  %edx,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
mov    $0xffffffff,%eax
jmp    804fcc1 <__sprintf_chk@plt+0x5591>
lea    -0x55a7(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x1298,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xf035,%ebx
test   %esi,%esi
je     804fda8 <__sprintf_chk@plt+0x5678>
mov    %esi,(%esp)
call   804fc70 <__sprintf_chk@plt+0x5540>
test   %eax,%eax
mov    %eax,%edi
jle    804fd80 <__sprintf_chk@plt+0x5650>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x5c9e(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
je     804fd77 <__sprintf_chk@plt+0x5647>
add    $0x3,%esi
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804fc70 <__sprintf_chk@plt+0x5540>
lea    -0x556d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0xd9b,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xefa8,%ebx
mov    0x50(%esp),%esi
lea    0x2c(%esp),%eax
lea    0x28(%esp),%ebp
mov    0x54(%esp),%edi
mov    %eax,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
movl   $0x4,0x2c(%esp)
call   804a0c0 <getsockopt@plt>
test   %eax,%eax
js     804fe35 <__sprintf_chk@plt+0x5705>
cmpl   $0x4,0x2c(%esp)
je     804fe80 <__sprintf_chk@plt+0x5750>
movl   $0x4,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %edi,0x28(%esp)
call   8049df0 <setsockopt@plt>
mov    $0x1,%edx
test   %eax,%eax
jns    804fe6f <__sprintf_chk@plt+0x573f>
call   804a430 <__errno_location@plt>
mov    (%eax),%edx
neg    %edx
add    $0x3c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    (%edi,%edi,1),%eax
xor    %edx,%edx
cmp    %eax,0x28(%esp)
jb     804fe35 <__sprintf_chk@plt+0x5705>
jmp    804fe6f <__sprintf_chk@plt+0x573f>
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0xc(%ebp),%eax
mov    0x8(%ebp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xeef0,%ebx
mov    %eax,-0x30(%ebp)
mov    0x14(%ebp),%eax
mov    %eax,-0x2c(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
test   %edi,%edi
je     80500e1 <__sprintf_chk@plt+0x59b1>
mov    -0x2c(%ebp),%eax
test   %eax,%eax
je     80500b7 <__sprintf_chk@plt+0x5987>
call   804a1b0 <getpid@plt>
mov    %eax,%esi
call   804a4e0 <fork@plt>
test   %eax,%eax
js     8050058 <__sprintf_chk@plt+0x5928>
je     804ff08 <__sprintf_chk@plt+0x57d8>
mov    %eax,(%edi)
xor    %eax,%eax
mov    -0x1c(%ebp),%esi
xor    %gs:0x14,%esi
jne    80500b2 <__sprintf_chk@plt+0x5982>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0xf,0x4(%esp)
movl   $0x1,(%esp)
call   804a450 <prctl@plt>
test   %eax,%eax
js     805009a <__sprintf_chk@plt+0x596a>
call   804a590 <getppid@plt>
cmp    %esi,%eax
jne    805010b <__sprintf_chk@plt+0x59db>
mov    0x10(%ebp),%eax
mov    %eax,0x4(%esp)
mov    -0x30(%ebp),%eax
mov    %eax,(%esp)
call   804f140 <__sprintf_chk@plt+0x4a10>
movl   $0x1,(%esp)
call   804a630 <isatty@plt>
movl   $0x2,(%esp)
test   %eax,%eax
setne  %al
mov    %eax,%esi
call   804a630 <isatty@plt>
test   %eax,%eax
setne  -0x30(%ebp)
jne    8050117 <__sprintf_chk@plt+0x59e7>
lea    -0x60ae(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049e80 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050068 <__sprintf_chk@plt+0x5938>
mov    %esi,%eax
test   %al,%al
je     8050040 <__sprintf_chk@plt+0x5910>
cmpb   $0x0,-0x30(%ebp)
je     8050028 <__sprintf_chk@plt+0x58f8>
cmp    $0x2,%edi
jg     8050018 <__sprintf_chk@plt+0x58e8>
mov    0x18(%ebp),%edi
lea    0x1c(%ebp),%ecx
test   %edi,%edi
je     80500a6 <__sprintf_chk@plt+0x5976>
mov    %ecx,%eax
xor    %edx,%edx
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%eax
mov    -0x4(%eax),%esi
add    $0x1,%edx
test   %esi,%esi
jne    804ffc0 <__sprintf_chk@plt+0x5890>
lea    0x4(,%edx,4),%eax
add    $0x1e,%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
xor    %eax,%eax
lea    0x23(%esp),%edi
and    $0xfffffff0,%edi
lea    0x0(%esi),%esi
mov    -0x4(%ecx),%esi
add    $0x4,%ecx
mov    %esi,(%edi,%eax,4)
add    $0x1,%eax
cmp    %eax,%edx
jae    804ffe8 <__sprintf_chk@plt+0x58b8>
mov    -0x2c(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804a3c0 <execv@plt>
movl   $0x1,(%esp)
call   8049f10 <_exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   804a6b0 <close@plt>
jmp    804ffa7 <__sprintf_chk@plt+0x5877>
lea    0x0(%esi),%esi
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   8049e20 <dup2@plt>
jmp    804ffa2 <__sprintf_chk@plt+0x5872>
lea    0x0(%esi),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8049e20 <dup2@plt>
jmp    804ff98 <__sprintf_chk@plt+0x5868>
lea    0x0(%esi),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    804feeb <__sprintf_chk@plt+0x57bb>
xchg   %ax,%ax
lea    -0x5c6d(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x55bd(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
movl   $0x1378,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
movl   $0x1,(%esp)
call   8049f10 <_exit@plt>
mov    $0x4,%eax
xor    %edx,%edx
jmp    804ffd4 <__sprintf_chk@plt+0x58a4>
call   8057670 <__sprintf_chk@plt+0xcf40>
lea    -0x55b2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x134d,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x55b2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5eef(%ebx),%eax
movl   $0x134c,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
movl   $0x0,(%esp)
call   8049f10 <_exit@plt>
mov    %esi,%eax
test   %al,%al
je     804ff6e <__sprintf_chk@plt+0x583e>
jmp    804ffa7 <__sprintf_chk@plt+0x5877>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xec52,%ebx
test   %esi,%esi
je     8050170 <__sprintf_chk@plt+0x5a40>
cmpb   $0x0,(%esi)
je     8050170 <__sprintf_chk@plt+0x5a40>
movzbl (%esi),%eax
mov    $0x2e,%edx
sub    %eax,%edx
mov    %edx,%ebp
jne    8050180 <__sprintf_chk@plt+0x5a50>
cmpb   $0x2e,0x1(%esi)
jne    8050180 <__sprintf_chk@plt+0x5a50>
cmpb   $0x0,0x2(%esi)
jne    8050180 <__sprintf_chk@plt+0x5a50>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x5bd5(%ebx),%eax
xor    %edi,%edi
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5bda(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5bd6(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
mov    %esi,(%esp)
call   804a360 <strlen@plt>
cmp    $0x1000,%eax
ja     8050170 <__sprintf_chk@plt+0x5a40>
test   %ebp,%ebp
jne    80501dd <__sprintf_chk@plt+0x5aad>
cmpb   $0x0,0x1(%esi)
je     8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5bd4(%ebx),%eax
xor    %edi,%edi
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5bd1(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5bce(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
jne    8050170 <__sprintf_chk@plt+0x5a40>
lea    -0x5c17(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
sete   %al
mov    %eax,%edi
jmp    8050170 <__sprintf_chk@plt+0x5a40>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xeb3c,%ebx
sub    $0x10,%esp
mov    0x274(%ebx),%eax
test   %eax,%eax
js     8050278 <__sprintf_chk@plt+0x5b48>
setne  %al
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    -0x5f81(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x6,(%esp)
call   804a520 <setlocale@plt>
test   %eax,%eax
je     80502b3 <__sprintf_chk@plt+0x5b83>
movl   $0xe,(%esp)
call   804a510 <nl_langinfo@plt>
test   %eax,%eax
je     80502b3 <__sprintf_chk@plt+0x5b83>
mov    $0x6,%ecx
mov    %eax,%esi
lea    -0x5bca(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80502d0 <__sprintf_chk@plt+0x5ba0>
movl   $0x1,0x274(%ebx)
00
add    $0x10,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   804a520 <setlocale@plt>
test   %eax,%eax
je     80502b3 <__sprintf_chk@plt+0x5b83>
movzbl (%eax),%ecx
mov    $0x43,%edx
sub    %ecx,%edx
jne    80502fa <__sprintf_chk@plt+0x5bca>
movzbl 0x1(%eax),%edx
neg    %edx
test   %edx,%edx
sete   %al
movzbl %al,%edx
mov    %edx,0x274(%ebx)
jmp    805026e <__sprintf_chk@plt+0x5b3e>
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xea7e,%ebx
sub    $0x8,%esp
call   8050250 <__sprintf_chk@plt+0x5b20>
xor    $0x1,%eax
movzbl %al,%eax
lea    (%eax,%eax,4),%eax
add    0x10(%esp),%eax
mov    -0x2b4(%ebx,%eax,4),%eax
add    $0x8,%esp
pop    %ebx
ret
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x38(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xea40,%ebx
mov    0x30(%esp),%edi
cmp    %eax,(%esi)
jb     8050370 <__sprintf_chk@plt+0x5c40>
mov    (%edi),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    (%eax,%eax,1),%ebp
mov    $0x40,%eax
cmp    $0x40,%ebp
cmovb  %eax,%ebp
mov    %ebp,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   804a210 <realloc@plt>
test   %eax,%eax
je     805039c <__sprintf_chk@plt+0x5c6c>
mov    %eax,(%edi)
mov    %ebp,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
jmp    8050364 <__sprintf_chk@plt+0x5c34>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x10(%ebp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe9e3,%ebx
mov    %gs:0x14,%ecx
mov    %ecx,-0x1c(%ebp)
xor    %ecx,%ecx
movl   $0x0,-0x24(%ebp)
mov    %eax,-0x38(%ebp)
mov    0x14(%ebp),%eax
test   %eax,%eax
mov    %eax,-0x3c(%ebp)
je     8050686 <__sprintf_chk@plt+0x5f56>
mov    0x8(%ebp),%edx
test   %edx,%edx
js     80506b0 <__sprintf_chk@plt+0x5f80>
lea    -0x5b1c(%ebx),%esi
jne    8050500 <__sprintf_chk@plt+0x5dd0>
lea    -0x4d63(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a100 <fopen64@plt>
test   %eax,%eax
mov    %eax,-0x2c(%ebp)
je     8050610 <__sprintf_chk@plt+0x5ee0>
mov    0xc(%ebp),%eax
test   %eax,%eax
jne    8050538 <__sprintf_chk@plt+0x5e08>
lea    -0x20(%ebp),%eax
xor    %edi,%edi
movl   $0x0,-0x20(%ebp)
mov    %eax,-0x34(%ebp)
jmp    8050473 <__sprintf_chk@plt+0x5d43>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x2(%edi),%eax
mov    %eax,0x8(%esp)
mov    -0x34(%ebp),%eax
mov    %eax,0x4(%esp)
lea    -0x24(%ebp),%eax
mov    %eax,(%esp)
call   8050340 <__sprintf_chk@plt+0x5c10>
test   %eax,%eax
je     80504e8 <__sprintf_chk@plt+0x5db8>
lea    0x1(%edi),%eax
mov    %eax,-0x30(%ebp)
call   804a6f0 <__ctype_b_loc@plt>
add    -0x24(%ebp),%edi
mov    (%eax),%edx
mov    $0x20,%eax
testb  $0x40,0x1(%edx,%esi,2)
cmovne %esi,%eax
mov    %al,(%edi)
mov    -0x30(%ebp),%edi
mov    -0x2c(%ebp),%eax
mov    %eax,(%esp)
call   804a070 <_IO_getc@plt>
cmp    $0xffffffff,%eax
mov    %eax,%esi
jne    8050430 <__sprintf_chk@plt+0x5d00>
test   %edi,%edi
jne    80505c8 <__sprintf_chk@plt+0x5e98>
mov    -0x24(%ebp),%eax
test   %eax,%eax
je     8050499 <__sprintf_chk@plt+0x5d69>
cmpb   $0x0,(%eax)
jne    80504d8 <__sprintf_chk@plt+0x5da8>
mov    %eax,(%esp)
mov    $0xfffffffe,%esi
call   8049f50 <free@plt>
cmpb   $0x0,-0x38(%ebp)
jne    8050620 <__sprintf_chk@plt+0x5ef0>
mov    -0x2c(%ebp),%eax
mov    %eax,(%esp)
call   8049fd0 <fclose@plt>
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    80506da <__sprintf_chk@plt+0x5faa>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    -0x3c(%ebp),%ecx
xor    %esi,%esi
mov    %eax,(%ecx)
jmp    80504b0 <__sprintf_chk@plt+0x5d80>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x24(%ebp),%eax
mov    $0xfffffff4,%esi
mov    %eax,(%esp)
call   8049f50 <free@plt>
jmp    80504b0 <__sprintf_chk@plt+0x5d80>
lea    0x0(%esi),%esi
mov    0x8(%ebp),%eax
sub    $0x30,%esp
lea    0x23(%esp),%esi
and    $0xfffffff0,%esi
movl   $0x1a,0x8(%esp)
mov    %eax,0x10(%esp)
lea    -0x613d(%ebx),%eax
mov    %eax,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804a730 <__sprintf_chk@plt>
jmp    80503f2 <__sprintf_chk@plt+0x5cc2>
mov    0xc(%ebp),%eax
mov    %eax,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,-0x30(%ebp)
mov    %eax,-0x24(%ebp)
je     805067c <__sprintf_chk@plt+0x5f4c>
xor    %esi,%esi
jmp    805056b <__sprintf_chk@plt+0x5e3b>
lea    0x0(%esi),%esi
call   804a6f0 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%edi,2)
jne    8050590 <__sprintf_chk@plt+0x5e60>
mov    $0x1,%esi
mov    -0x2c(%ebp),%eax
mov    %eax,(%esp)
call   804a070 <_IO_getc@plt>
cmp    $0xffffffff,%eax
mov    %eax,%edi
jne    8050558 <__sprintf_chk@plt+0x5e28>
cmpl   $0x4,0xc(%ebp)
jbe    80505d8 <__sprintf_chk@plt+0x5ea8>
mov    -0x30(%ebp),%eax
movb   $0x0,(%eax)
jmp    805048d <__sprintf_chk@plt+0x5d5d>
xchg   %ax,%ax
mov    %esi,%eax
test   %al,%al
je     80505ac <__sprintf_chk@plt+0x5e7c>
cmpl   $0x4,0xc(%ebp)
jbe    80505d8 <__sprintf_chk@plt+0x5ea8>
mov    -0x30(%ebp),%eax
subl   $0x1,0xc(%ebp)
movb   $0x20,(%eax)
add    $0x1,%eax
mov    %eax,-0x30(%ebp)
cmpl   $0x4,0xc(%ebp)
jbe    80505d8 <__sprintf_chk@plt+0x5ea8>
mov    -0x30(%ebp),%ecx
mov    %edi,%eax
subl   $0x1,0xc(%ebp)
mov    %al,(%ecx)
lea    0x1(%ecx),%eax
mov    %eax,-0x30(%ebp)
jmp    8050551 <__sprintf_chk@plt+0x5e21>
lea    0x0(%esi),%esi
mov    -0x24(%ebp),%eax
movb   $0x0,-0x1(%eax,%edi,1)
jmp    805048d <__sprintf_chk@plt+0x5d5d>
lea    0x0(%esi),%esi
mov    0xc(%ebp),%eax
mov    -0x30(%ebp),%edi
lea    -0x1(%eax),%esi
mov    $0x3,%eax
cmp    $0x3,%esi
cmova  %eax,%esi
lea    -0x723a(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049f60 <memcpy@plt>
movb   $0x0,(%edi,%esi,1)
jmp    805048d <__sprintf_chk@plt+0x5d5d>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
neg    %esi
jmp    80504bb <__sprintf_chk@plt+0x5d8b>
xchg   %ax,%ax
lea    -0x20(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   804ed70 <__sprintf_chk@plt+0x4640>
test   %eax,%eax
mov    %eax,%esi
js     80504b0 <__sprintf_chk@plt+0x5d80>
lea    -0x5b09(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x20(%ebp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
lea    -0x5fc9(%ebx),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,-0x24(%ebp)
mov    -0x20(%ebp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
mov    -0x24(%ebp),%eax
test   %eax,%eax
jne    80504d8 <__sprintf_chk@plt+0x5da8>
mov    $0xfffffff4,%esi
jmp    80504b0 <__sprintf_chk@plt+0x5d80>
lea    -0x54d5(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7502(%ebx),%eax
movl   $0x260,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x54d5(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x629f(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x619c(%ebx),%eax
movl   $0x261,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
call   8057670 <__sprintf_chk@plt+0xcf40>
nop
mov    0x4(%esp),%eax
cmpb   $0x2f,(%eax)
sete   %al
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe696,%ebx
test   %esi,%esi
je     8050728 <__sprintf_chk@plt+0x5ff8>
mov    %esi,(%esp)
movl   $0x2f,0x4(%esp)
call   804a530 <strrchr@plt>
test   %eax,%eax
lea    0x1(%eax),%edx
cmove  %esi,%edx
add    $0x14,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
lea    -0x53fb(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x590e(%ebx),%eax
movl   $0x33,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe624,%ebx
test   %edi,%edi
je     805085a <__sprintf_chk@plt+0x612a>
mov    0x34(%esp),%ecx
test   %ecx,%ecx
je     8050830 <__sprintf_chk@plt+0x6100>
movzbl (%edi),%edx
test   %dl,%dl
je     8050822 <__sprintf_chk@plt+0x60f2>
mov    %edi,%eax
xor    %ecx,%ecx
xor    %esi,%esi
xor    %ebp,%ebp
jmp    80507b0 <__sprintf_chk@plt+0x6080>
nop
cmp    $0x2f,%dl
sete   %cl
add    $0x1,%eax
movzbl (%eax),%edx
test   %dl,%dl
je     80507d0 <__sprintf_chk@plt+0x60a0>
test   %cl,%cl
jne    80507a0 <__sprintf_chk@plt+0x6070>
cmp    $0x2f,%dl
jne    80507a6 <__sprintf_chk@plt+0x6076>
mov    %esi,%ebp
mov    %eax,%esi
movzbl 0x1(%eax),%edx
add    $0x1,%eax
mov    $0x1,%ecx
test   %dl,%dl
jne    80507b0 <__sprintf_chk@plt+0x6080>
lea    0x0(%esi),%esi
cmpb   $0x2f,-0x1(%eax)
cmove  %ebp,%esi
test   %esi,%esi
je     8050822 <__sprintf_chk@plt+0x60f2>
cmp    %edi,%esi
je     8050808 <__sprintf_chk@plt+0x60d8>
sub    %edi,%esi
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   804a0b0 <__strndup@plt>
test   %eax,%eax
je     8050829 <__sprintf_chk@plt+0x60f9>
mov    0x34(%esp),%edi
mov    %eax,(%edi)
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x2,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
je     8050829 <__sprintf_chk@plt+0x60f9>
mov    $0x2f,%edx
mov    %dx,(%eax)
jmp    80507ed <__sprintf_chk@plt+0x60bd>
mov    $0xffffffea,%eax
jmp    80507f9 <__sprintf_chk@plt+0x60c9>
mov    $0xfffffff4,%eax
jmp    80507f9 <__sprintf_chk@plt+0x60c9>
lea    -0x540b(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5429(%ebx),%eax
movl   $0x42,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x540b(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x41,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
mov    0xc(%esp),%edi
movzbl (%edi),%eax
mov    %edi,%ecx
test   %al,%al
je     80508ee <__sprintf_chk@plt+0x61be>
mov    %edi,%edx
xor    %esi,%esi
jmp    80508c9 <__sprintf_chk@plt+0x6199>
lea    0x0(%esi),%esi
mov    %esi,%eax
test   %al,%al
je     80508b4 <__sprintf_chk@plt+0x6184>
movb   $0x2f,(%ecx)
add    $0x1,%ecx
movzbl (%edx),%eax
add    $0x1,%edx
add    $0x1,%ecx
xor    %esi,%esi
mov    %al,-0x1(%ecx)
movzbl (%edx),%eax
test   %al,%al
je     80508dc <__sprintf_chk@plt+0x61ac>
cmp    $0x2f,%al
jne    80508a8 <__sprintf_chk@plt+0x6178>
add    $0x1,%edx
movzbl (%edx),%eax
mov    $0x1,%esi
test   %al,%al
jne    80508c9 <__sprintf_chk@plt+0x6199>
cmp    %edi,%ecx
mov    %ecx,%eax
jne    80508ee <__sprintf_chk@plt+0x61be>
mov    %esi,%edx
test   %dl,%dl
je     80508ee <__sprintf_chk@plt+0x61be>
add    $0x1,%ecx
movb   $0x2f,(%eax)
movb   $0x0,(%ecx)
mov    %edi,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe484,%ebx
mov    0x44(%esp),%edi
test   %eax,%eax
je     8050aa6 <__sprintf_chk@plt+0x6376>
test   %edi,%edi
je     8050a7c <__sprintf_chk@plt+0x634c>
mov    0x40(%esp),%eax
movzbl (%edi),%ecx
movzbl (%eax),%ebp
mov    %ebp,%eax
cmp    $0x2f,%al
sete   %dl
cmp    $0x2f,%cl
mov    %edx,%esi
sete   %dl
mov    %esi,%eax
cmp    %dl,%al
jne    8050a63 <__sprintf_chk@plt+0x6333>
mov    %ebp,%eax
cmp    $0x2f,%al
jne    8050a32 <__sprintf_chk@plt+0x6302>
nop
mov    0x40(%esp),%eax
lea    0x1(%eax),%edx
nop
mov    %edx,%esi
add    $0x1,%edx
movzbl -0x1(%edx),%eax
cmp    $0x2f,%al
je     8050960 <__sprintf_chk@plt+0x6230>
cmp    $0x2f,%cl
mov    %esi,0x1c(%esp)
jne    8050a43 <__sprintf_chk@plt+0x6313>
add    $0x1,%edi
lea    0x0(%esi),%esi
mov    %edi,%ebp
add    $0x1,%edi
movzbl -0x1(%edi),%edx
cmp    $0x2f,%dl
je     8050980 <__sprintf_chk@plt+0x6250>
test   %dl,%dl
je     8050a4f <__sprintf_chk@plt+0x631f>
test   %al,%al
je     8050a63 <__sprintf_chk@plt+0x6333>
mov    0x1c(%esp),%ecx
movzbl (%ecx),%eax
test   %al,%al
je     8050a6d <__sprintf_chk@plt+0x633d>
cmp    $0x2f,%al
je     8050a6d <__sprintf_chk@plt+0x633d>
mov    %ecx,%eax
xor    %ecx,%ecx
add    $0x1,%eax
jmp    80509c8 <__sprintf_chk@plt+0x6298>
xchg   %ax,%ax
add    $0x1,%eax
cmp    $0x2f,%dl
je     80509d4 <__sprintf_chk@plt+0x62a4>
movzbl (%eax),%edx
add    $0x1,%ecx
mov    %eax,%esi
test   %dl,%dl
jne    80509c0 <__sprintf_chk@plt+0x6290>
mov    %esi,0x40(%esp)
movzbl 0x0(%ebp),%eax
test   %al,%al
je     8050a5b <__sprintf_chk@plt+0x632b>
cmp    $0x2f,%al
je     8050a5b <__sprintf_chk@plt+0x632b>
lea    0x1(%ebp),%eax
xor    %esi,%esi
jmp    80509f8 <__sprintf_chk@plt+0x62c8>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
cmp    $0x2f,%dl
je     8050a04 <__sprintf_chk@plt+0x62d4>
movzbl (%eax),%edx
add    $0x1,%esi
mov    %eax,%edi
test   %dl,%dl
jne    80509f0 <__sprintf_chk@plt+0x62c0>
cmp    %esi,%ecx
jne    8050a63 <__sprintf_chk@plt+0x6333>
mov    0x1c(%esp),%eax
mov    %ecx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049fe0 <memcmp@plt>
test   %eax,%eax
jne    8050a63 <__sprintf_chk@plt+0x6333>
mov    0x40(%esp),%eax
movzbl (%edi),%ecx
movzbl (%eax),%eax
cmp    $0x2f,%al
je     8050958 <__sprintf_chk@plt+0x6228>
mov    0x40(%esp),%esi
cmp    $0x2f,%cl
mov    %esi,0x1c(%esp)
je     805097a <__sprintf_chk@plt+0x624a>
mov    %ecx,%edx
mov    %edi,%ebp
test   %dl,%dl
jne    8050996 <__sprintf_chk@plt+0x6266>
mov    0x1c(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %esi,%esi
mov    %ebp,%edi
cmp    %esi,%ecx
je     8050a08 <__sprintf_chk@plt+0x62d8>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x1c(%esp),%eax
xor    %ecx,%ecx
mov    %eax,0x40(%esp)
jmp    80509d8 <__sprintf_chk@plt+0x62a8>
lea    -0x541b(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x62e2(%ebx),%eax
movl   $0x10a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x541b(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x109,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%ebp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe2b4,%ebx
test   %ebp,%ebp
je     8050c97 <__sprintf_chk@plt+0x6567>
mov    0x44(%esp),%eax
test   %eax,%eax
je     8050c6d <__sprintf_chk@plt+0x653d>
mov    0x44(%esp),%eax
movzbl 0x0(%ebp),%edi
movzbl (%eax),%edx
mov    %edi,%eax
cmp    $0x2f,%al
sete   %al
cmp    $0x2f,%dl
sete   %cl
xor    %cl,%al
mov    %al,0x1f(%esp)
jne    8050c5b <__sprintf_chk@plt+0x652b>
mov    %edi,%eax
mov    %ebp,%edi
cmp    $0x2f,%al
jne    8050c32 <__sprintf_chk@plt+0x6502>
lea    0x0(%esi),%esi
lea    0x1(%edi),%ecx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,%esi
add    $0x1,%ecx
movzbl -0x1(%ecx),%eax
cmp    $0x2f,%al
je     8050b38 <__sprintf_chk@plt+0x6408>
cmp    $0x2f,%dl
mov    %esi,0x14(%esp)
jne    8050c3f <__sprintf_chk@plt+0x650f>
mov    0x44(%esp),%esi
lea    0x1(%esi),%edi
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebp
add    $0x1,%edi
movzbl -0x1(%edi),%edx
cmp    $0x2f,%dl
je     8050b60 <__sprintf_chk@plt+0x6430>
test   %al,%al
jne    8050b88 <__sprintf_chk@plt+0x6458>
test   %dl,%dl
sete   0x1f(%esp)
movzbl 0x1f(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
test   %dl,%dl
je     8050b79 <__sprintf_chk@plt+0x6449>
mov    0x14(%esp),%esi
movzbl (%esi),%eax
test   %al,%al
je     8050c50 <__sprintf_chk@plt+0x6520>
cmp    $0x2f,%al
je     8050c50 <__sprintf_chk@plt+0x6520>
mov    %esi,%eax
xor    %ecx,%ecx
add    $0x1,%eax
jmp    8050bb8 <__sprintf_chk@plt+0x6488>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
cmp    $0x2f,%dl
je     8050bc4 <__sprintf_chk@plt+0x6494>
movzbl (%eax),%edx
add    $0x1,%ecx
mov    %eax,%edi
test   %dl,%dl
jne    8050bb0 <__sprintf_chk@plt+0x6480>
movzbl 0x0(%ebp),%eax
test   %al,%al
je     8050c48 <__sprintf_chk@plt+0x6518>
cmp    $0x2f,%al
je     8050c48 <__sprintf_chk@plt+0x6518>
lea    0x1(%ebp),%eax
xor    %esi,%esi
mov    %ebp,0x18(%esp)
jmp    8050be8 <__sprintf_chk@plt+0x64b8>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
cmp    $0x2f,%dl
je     8050bf4 <__sprintf_chk@plt+0x64c4>
movzbl (%eax),%edx
add    $0x1,%esi
mov    %eax,%ebp
test   %dl,%dl
jne    8050be0 <__sprintf_chk@plt+0x64b0>
mov    %ebp,0x44(%esp)
mov    0x18(%esp),%ebp
cmp    %esi,%ecx
jne    8050b79 <__sprintf_chk@plt+0x6449>
mov    0x14(%esp),%eax
mov    %ecx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049fe0 <memcmp@plt>
test   %eax,%eax
jne    8050b79 <__sprintf_chk@plt+0x6449>
mov    0x44(%esp),%eax
movzbl (%eax),%edx
movzbl (%edi),%eax
cmp    $0x2f,%al
je     8050b30 <__sprintf_chk@plt+0x6400>
cmp    $0x2f,%dl
mov    %edi,0x14(%esp)
je     8050b52 <__sprintf_chk@plt+0x6422>
mov    0x44(%esp),%ebp
jmp    8050b6e <__sprintf_chk@plt+0x643e>
mov    %ebp,0x44(%esp)
xor    %esi,%esi
jmp    8050bfc <__sprintf_chk@plt+0x64cc>
mov    0x14(%esp),%edi
xor    %ecx,%ecx
jmp    8050bc4 <__sprintf_chk@plt+0x6494>
movb   $0x0,0x1f(%esp)
movzbl 0x1f(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x5426(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5c81(%ebx),%eax
movl   $0x12b,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x5426(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5443(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7508(%ebx),%eax
movl   $0x12a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xe0b9,%ebx
sub    $0xfc,%esp
mov    0xc(%ebp),%eax
mov    0x8(%ebp),%esi
mov    %eax,-0xec(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
lea    -0x5bd3(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8050ad0 <__sprintf_chk@plt+0x63a0>
test   %al,%al
je     8050d38 <__sprintf_chk@plt+0x6608>
mov    $0x1,%eax
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
jne    8050f17 <__sprintf_chk@plt+0x67e7>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x90,%esp
lea    0x23(%esp),%edi
and    $0xfffffff0,%edi
cmpb   $0x1,-0xec(%ebp)
movl   $0x80,(%edi)
mov    %edi,0x8(%esp)
sbb    %eax,%eax
not    %eax
and    $0x400,%eax
mov    %eax,0x10(%esp)
lea    -0xe0(%ebp),%eax
mov    %eax,0xc(%esp)
mov    %esi,0x4(%esp)
movl   $0xffffff9c,(%esp)
call   8049e50 <name_to_handle_at@plt>
test   %eax,%eax
js     8050df8 <__sprintf_chk@plt+0x66c8>
lea    -0xe4(%ebp),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8050760 <__sprintf_chk@plt+0x6030>
test   %eax,%eax
js     8050d19 <__sprintf_chk@plt+0x65e9>
lea    -0x7c(%ebp),%eax
movl   $0x80,(%edi)
mov    %eax,0xc(%esp)
mov    -0xe4(%ebp),%eax
movl   $0x0,0x10(%esp)
mov    %edi,0x8(%esp)
movl   $0xffffff9c,(%esp)
mov    %eax,0x4(%esp)
call   8049e50 <name_to_handle_at@plt>
mov    %eax,%esi
mov    -0xe4(%ebp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %esi,%esi
js     8050ee8 <__sprintf_chk@plt+0x67b8>
mov    -0x7c(%ebp),%eax
cmp    %eax,-0xe0(%ebp)
setne  %al
movzbl %al,%eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
lea    0x0(%esi),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%ecx
mov    %eax,%edx
cmp    $0x5f,%ecx
je     8050e0f <__sprintf_chk@plt+0x66df>
cmp    $0x26,%ecx
jne    8050ec0 <__sprintf_chk@plt+0x6790>
cmpb   $0x0,-0xec(%ebp)
lea    -0xdc(%ebp),%eax
mov    %edx,-0xec(%ebp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
jne    8050ed8 <__sprintf_chk@plt+0x67a8>
call   804a690 <__lxstat64@plt>
mov    -0xec(%ebp),%edx
test   %eax,%eax
js     8050f00 <__sprintf_chk@plt+0x67d0>
lea    -0xe4(%ebp),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
mov    %edx,-0xec(%ebp)
call   8050760 <__sprintf_chk@plt+0x6030>
test   %eax,%eax
js     8050d19 <__sprintf_chk@plt+0x65e9>
lea    -0x7c(%ebp),%eax
mov    %eax,0x8(%esp)
mov    -0xe4(%ebp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   804a690 <__lxstat64@plt>
mov    %eax,%esi
mov    -0xe4(%ebp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %esi,%esi
mov    -0xec(%ebp),%edx
js     8050f0e <__sprintf_chk@plt+0x67de>
mov    -0xdc(%ebp),%edx
mov    -0xd8(%ebp),%eax
xor    -0x78(%ebp),%eax
xor    -0x7c(%ebp),%edx
or     %eax,%edx
setne  %al
movzbl %al,%eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
mov    %ecx,%eax
neg    %eax
cmp    $0x2,%ecx
jne    8050d19 <__sprintf_chk@plt+0x65e9>
xor    %eax,%eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
lea    0x0(%esi,%eiz,1),%esi
call   804a650 <__xstat64@plt>
mov    -0xec(%ebp),%edx
jmp    8050e42 <__sprintf_chk@plt+0x6712>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x5f,%eax
je     8050d14 <__sprintf_chk@plt+0x65e4>
neg    %eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
nop
mov    (%edx),%eax
cmp    $0x2,%eax
je     8050ecd <__sprintf_chk@plt+0x679d>
neg    %eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
mov    (%edx),%eax
neg    %eax
jmp    8050d19 <__sprintf_chk@plt+0x65e9>
call   8057670 <__sprintf_chk@plt+0xcf40>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xde64,%ebx
test   %eax,%eax
je     8050ff1 <__sprintf_chk@plt+0x68c1>
mov    (%eax),%esi
cmp    $0xffffffff,%esi
je     8050fd8 <__sprintf_chk@plt+0x68a8>
mov    0x4(%eax),%eax
mov    %eax,(%esp)
sar    $0x1f,%eax
mov    %esi,%ebp
movl   $0x3e8,0x8(%esp)
sar    $0x1f,%ebp
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,%edx
mov    %eax,0x18(%esp)
mov    0x1c(%esp),%eax
not    %edx
mov    %edx,(%esp)
not    %eax
mov    %eax,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
cmp    %edx,%ebp
jbe    8050fb8 <__sprintf_chk@plt+0x6888>
mov    $0xffffffff,%eax
mov    $0xffffffff,%edx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
jb     8050fbe <__sprintf_chk@plt+0x688e>
cmp    %eax,%esi
ja     8050fa2 <__sprintf_chk@plt+0x6872>
mov    $0xf4240,%eax
imul   %esi
add    0x18(%esp),%eax
adc    0x1c(%esp),%edx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x4(%eax),%ecx
mov    $0xffffffff,%edx
mov    $0xffffffff,%eax
cmp    $0xffffffff,%ecx
je     8050fac <__sprintf_chk@plt+0x687c>
mov    %ecx,%eax
jmp    8050f4c <__sprintf_chk@plt+0x681c>
lea    -0x512d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7641(%ebx),%eax
movl   $0x5e,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x24,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xdd6a,%ebx
mov    0x30(%esp),%eax
lea    0x18(%esp),%esi
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a610 <clock_gettime@plt>
test   %eax,%eax
jne    8051056 <__sprintf_chk@plt+0x6926>
mov    %esi,(%esp)
call   8050f20 <__sprintf_chk@plt+0x67f0>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    -0x511f(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x519c(%ebx),%eax
movl   $0x1f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
push   %edi
push   %esi
push   %ebx
sub    $0x40,%esp
mov    0x50(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xdd05,%ebx
mov    0x54(%esp),%edi
mov    0x58(%esp),%edx
mov    0x5c(%esp),%eax
test   %esi,%esi
je     8051143 <__sprintf_chk@plt+0x6a13>
test   %edi,%edi
je     8051119 <__sprintf_chk@plt+0x69e9>
mov    %eax,%ecx
or     %edx,%ecx
je     8051110 <__sprintf_chk@plt+0x69e0>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x10(%esp)
lea    0x14(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x10(%esp),%eax
mov    %eax,(%esp)
call   804a0a0 <localtime_r@plt>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
lea    -0x53c5(%ebx),%eax
mov    %eax,0x8(%esp)
call   804a300 <strftime@plt>
test   %eax,%eax
je     8051110 <__sprintf_chk@plt+0x69e0>
add    $0x40,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
add    $0x40,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x513e(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x53cb(%ebx),%eax
movl   $0x9e,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x513e(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5bac(%ebx),%eax
movl   $0x9d,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xdc1b,%ebx
sub    $0x3c,%esp
movl   $0x0,(%esp)
mov    0x58(%esp),%esi
mov    0x5c(%esp),%edi
mov    0x50(%esp),%ebp
call   8051020 <__sprintf_chk@plt+0x68f0>
mov    %eax,0x28(%esp)
mov    %esi,%eax
or     %edi,%eax
mov    %edx,0x2c(%esp)
je     80511b8 <__sprintf_chk@plt+0x6a88>
cmp    0x2c(%esp),%edi
ja     80511b8 <__sprintf_chk@plt+0x6a88>
jb     80511c8 <__sprintf_chk@plt+0x6a98>
cmp    0x28(%esp),%esi
jbe    80511c8 <__sprintf_chk@plt+0x6a98>
xchg   %ax,%ax
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %esi,%eax
mov    %edi,%edx
add    $0xd0e3a000,%eax
adc    $0x8c,%edx
cmp    %edx,%edi
ja     80511b8 <__sprintf_chk@plt+0x6a88>
jb     80511e1 <__sprintf_chk@plt+0x6ab1>
cmp    %eax,%esi
jae    80511b8 <__sprintf_chk@plt+0x6a88>
mov    0x28(%esp),%eax
mov    0x2c(%esp),%edx
sub    %esi,%eax
sbb    %edi,%edx
mov    %eax,%esi
cmp    $0x1cb3,%edx
mov    %edx,%edi
jb     80512b0 <__sprintf_chk@plt+0x6b80>
ja     805120a <__sprintf_chk@plt+0x6ada>
cmp    $0x9389b7ff,%eax
jbe    80512b0 <__sprintf_chk@plt+0x6b80>
movl   $0x9389b800,0x8(%esp)
movl   $0x1cb3,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
movl   $0x4c4b7a00,0x8(%esp)
movl   $0x264,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0x9389b800,0x8(%esp)
movl   $0x1cb3,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x53ad(%ebx),%eax
mov    %edx,0x18(%esp)
mov    %eax,0x10(%esp)
mov    0x54(%esp),%eax
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8049e30 <__snprintf_chk@plt>
mov    0x54(%esp),%eax
movb   $0x0,-0x1(%ebp,%eax,1)
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x264,%edi
jb     8051338 <__sprintf_chk@plt+0x6c08>
jbe    8051330 <__sprintf_chk@plt+0x6c00>
movl   $0x4c4b7a00,0x8(%esp)
movl   $0x264,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
movl   $0x1dd76000,0x8(%esp)
movl   $0x14,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0x4c4b7a00,0x8(%esp)
movl   $0x264,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5392(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    8051274 <__sprintf_chk@plt+0x6b44>
lea    0x0(%esi),%esi
cmp    $0x4c4b79ff,%esi
ja     80512be <__sprintf_chk@plt+0x6b8e>
cmp    $0x8c,%edi
jb     80513c0 <__sprintf_chk@plt+0x6c90>
jbe    80513b8 <__sprintf_chk@plt+0x6c88>
movl   $0xd0e3a000,0x8(%esp)
movl   $0x8c,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
movl   $0x1dd76000,0x8(%esp)
movl   $0x14,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0xd0e3a000,0x8(%esp)
movl   $0x8c,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5378(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    8051274 <__sprintf_chk@plt+0x6b44>
lea    0x0(%esi),%esi
cmp    $0xd0e39fff,%esi
ja     8051346 <__sprintf_chk@plt+0x6c16>
cmp    $0x28,%edi
jb     8051428 <__sprintf_chk@plt+0x6cf8>
ja     80513cf <__sprintf_chk@plt+0x6c9f>
cmp    $0x3baebfff,%esi
jbe    8051428 <__sprintf_chk@plt+0x6cf8>
movl   $0x1dd76000,0x8(%esp)
movl   $0x14,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5386(%ebx),%eax
mov    %edx,0x18(%esp)
mov    %eax,0x10(%esp)
mov    0x54(%esp),%eax
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8049e30 <__snprintf_chk@plt>
jmp    8051298 <__sprintf_chk@plt+0x6b68>
lea    0x0(%esi),%esi
cmp    $0x14,%edi
jae    8051460 <__sprintf_chk@plt+0x6d30>
cmp    $0x5,%edi
jb     80514b0 <__sprintf_chk@plt+0x6d80>
jbe    80514a8 <__sprintf_chk@plt+0x6d78>
movl   $0xd693a400,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5359(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
ja     805146a <__sprintf_chk@plt+0x6d3a>
cmp    $0xf46b03ff,%esi
jbe    805142d <__sprintf_chk@plt+0x6cfd>
add    $0xe228a000,%esi
adc    $0xffffffeb,%edi
movl   $0xd693a400,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x535f(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
lea    0x0(%esi),%esi
cmp    $0x775d7ff,%esi
ja     8051434 <__sprintf_chk@plt+0x6d04>
cmp    $0x0,%edi
ja     8051540 <__sprintf_chk@plt+0x6e10>
cmp    $0xd693a3ff,%esi
ja     8051540 <__sprintf_chk@plt+0x6e10>
cmp    $0x0,%edi
ja     80515b0 <__sprintf_chk@plt+0x6e80>
cmp    $0x11e1a2ff,%esi
ja     80515b0 <__sprintf_chk@plt+0x6e80>
cmp    $0x0,%edi
ja     80515fc <__sprintf_chk@plt+0x6ecc>
cmp    $0x39386ff,%esi
ja     80515fc <__sprintf_chk@plt+0x6ecc>
cmp    $0x0,%edi
ja     805166b <__sprintf_chk@plt+0x6f3b>
cmp    $0xf423f,%esi
ja     805166b <__sprintf_chk@plt+0x6f3b>
cmp    $0x0,%edi
ja     8051511 <__sprintf_chk@plt+0x6de1>
cmp    $0x3e7,%esi
jbe    80515df <__sprintf_chk@plt+0x6eaf>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x532b(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
movl   $0xd693a400,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
movl   $0x3938700,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0xd693a400,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x534f(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    8051274 <__sprintf_chk@plt+0x6b44>
nop
movl   $0x3938700,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5349(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
mov    %edi,%eax
or     %esi,%eax
je     805169a <__sprintf_chk@plt+0x6f6a>
mov    %esi,0x14(%esp)
lea    -0x5320(%ebx),%eax
mov    %edi,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
movl   $0x3938700,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
movl   $0x3938700,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x533d(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    8051274 <__sprintf_chk@plt+0x6b44>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x14(%esp)
lea    -0x5335(%ebx),%eax
mov    %edx,0x18(%esp)
jmp    80513f9 <__sprintf_chk@plt+0x6cc9>
lea    -0x5315(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   804a3e0 <snprintf@plt>
jmp    8051298 <__sprintf_chk@plt+0x6b68>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x6c,%esp
mov    0x88(%esp),%eax
mov    0x80(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xd6ba,%ebx
mov    0x8c(%esp),%esi
mov    %eax,0x38(%esp)
mov    0x90(%esp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x40(%esp)
je     8051aa0 <__sprintf_chk@plt+0x7370>
mov    0x84(%esp),%eax
test   %eax,%eax
je     8051a76 <__sprintf_chk@plt+0x7346>
mov    0x38(%esp),%edx
mov    %edx,%eax
and    %esi,%eax
cmp    $0xffffffff,%eax
je     8051a6f <__sprintf_chk@plt+0x733f>
mov    %edx,%eax
or     %esi,%eax
je     8051a30 <__sprintf_chk@plt+0x7300>
lea    -0x1d0(%ebx),%eax
mov    %eax,0x3c(%esp)
add    $0x60,%eax
mov    %eax,0x48(%esp)
mov    0x80(%esp),%eax
lea    -0x5f81(%ebx),%edx
mov    %edx,0x5c(%esp)
mov    %eax,0x44(%esp)
xor    %eax,%eax
mov    0x3c(%esp),%edi
mov    (%edi),%ecx
mov    0x4(%edi),%edi
cmp    %esi,%edi
ja     8051879 <__sprintf_chk@plt+0x7149>
jb     8051778 <__sprintf_chk@plt+0x7048>
cmp    0x38(%esp),%ecx
ja     8051879 <__sprintf_chk@plt+0x7149>
cmpl   $0x1,0x84(%esp)
jbe    80518a0 <__sprintf_chk@plt+0x7170>
mov    0x38(%esp),%ebp
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
mov    %ecx,0x34(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    0x34(%esp),%ecx
mov    %ebp,(%esp)
mov    %edi,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %ecx,0x8(%esp)
mov    %ecx,0x4c(%esp)
mov    %eax,0x50(%esp)
mov    %edx,0x54(%esp)
call   8057490 <__sprintf_chk@plt+0xcd60>
mov    0x4c(%esp),%ecx
mov    %eax,%ebp
mov    %edx,%eax
or     %ebp,%eax
mov    %edx,0x34(%esp)
je     80517f0 <__sprintf_chk@plt+0x70c0>
cmp    $0x0,%esi
ja     80517f0 <__sprintf_chk@plt+0x70c0>
cmpl   $0x39386ff,0x38(%esp)
jbe    80518d0 <__sprintf_chk@plt+0x71a0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x3c(%esp),%eax
mov    0x44(%esp),%esi
cmp    %esi,0x80(%esp)
mov    0x54(%esp),%ecx
mov    -0x4(%eax),%edx
lea    -0x733e(%ebx),%eax
cmovae 0x5c(%esp),%eax
mov    %esi,(%esp)
mov    %ecx,0x1c(%esp)
mov    %eax,0x14(%esp)
lea    -0x5301(%ebx),%eax
mov    %edx,0x20(%esp)
mov    0x50(%esp),%edx
mov    %eax,0x10(%esp)
mov    0x84(%esp),%eax
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edx,0x18(%esp)
mov    %eax,0x4(%esp)
call   8049e30 <__snprintf_chk@plt>
mov    0x34(%esp),%esi
mov    %ebp,0x38(%esp)
cmp    0x84(%esp),%eax
cmova  0x84(%esp),%eax
sub    %eax,0x84(%esp)
add    %eax,0x44(%esp)
mov    $0x1,%eax
mov    0x48(%esp),%ecx
cmp    %ecx,0x3c(%esp)
je     80518a0 <__sprintf_chk@plt+0x7170>
mov    0x38(%esp),%ecx
or     %esi,%ecx
je     80518a0 <__sprintf_chk@plt+0x7170>
addl   $0xc,0x3c(%esp)
cmp    0x40(%esp),%esi
jae    80518b8 <__sprintf_chk@plt+0x7188>
test   %al,%al
je     805175b <__sprintf_chk@plt+0x702b>
xchg   %ax,%ax
mov    0x44(%esp),%eax
movb   $0x0,(%eax)
mov    0x80(%esp),%eax
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
ja     805175b <__sprintf_chk@plt+0x702b>
mov    0x58(%esp),%edx
cmp    %edx,0x38(%esp)
jae    805175b <__sprintf_chk@plt+0x702b>
jmp    8051896 <__sprintf_chk@plt+0x7166>
xchg   %ax,%ax
cmp    $0x0,%edi
ja     80519f0 <__sprintf_chk@plt+0x72c0>
xor    %esi,%esi
cmp    $0x1,%ecx
xchg   %ax,%ax
ja     80519f0 <__sprintf_chk@plt+0x72c0>
xchg   %ax,%ax
cmpl   $0x0,0x40(%esp)
ja     80518f6 <__sprintf_chk@plt+0x71c6>
cmpl   $0x1,0x58(%esp)
jbe    8051965 <__sprintf_chk@plt+0x7235>
mov    0x58(%esp),%ecx
mov    %ebp,%eax
mov    %esi,%ebp
mov    0x40(%esp),%edi
mov    %ecx,%esi
mov    %eax,%ecx
xchg   %ax,%ax
mov    0x34(%esp),%eax
sub    $0x1,%ebp
mov    %ecx,(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x38(%esp)
mov    %edx,0x34(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    0x38(%esp),%ecx
cmp    $0x0,%edx
mov    %eax,%esi
mov    %edx,%edi
ja     8051908 <__sprintf_chk@plt+0x71d8>
cmp    $0x1,%eax
ja     8051908 <__sprintf_chk@plt+0x71d8>
mov    %ebp,%esi
mov    %ecx,%ebp
test   %esi,%esi
jle    80517f0 <__sprintf_chk@plt+0x70c0>
mov    0x3c(%esp),%eax
mov    0x44(%esp),%ecx
cmp    %ecx,0x80(%esp)
mov    0x34(%esp),%edi
mov    -0x4(%eax),%edx
lea    -0x733e(%ebx),%eax
cmovae 0x5c(%esp),%eax
mov    %esi,0x20(%esp)
mov    0x50(%esp),%esi
mov    %edi,0x28(%esp)
mov    0x54(%esp),%edi
mov    %eax,0x14(%esp)
lea    -0x5311(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x84(%esp),%eax
mov    %esi,0x18(%esp)
xor    %esi,%esi
mov    %edx,0x2c(%esp)
mov    %ebp,0x24(%esp)
mov    %edi,0x1c(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,(%esp)
call   8049e30 <__snprintf_chk@plt>
movl   $0x0,0x38(%esp)
jmp    805185a <__sprintf_chk@plt+0x712a>
xchg   %ax,%ax
xor    %esi,%esi
lea    0x0(%esi),%esi
mov    %ecx,(%esp)
add    $0x1,%esi
mov    %edi,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
cmp    $0x0,%edx
mov    %eax,%ecx
mov    %edx,%edi
ja     80519f8 <__sprintf_chk@plt+0x72c8>
cmp    $0x1,%eax
ja     80519f8 <__sprintf_chk@plt+0x72c8>
jmp    80518e8 <__sprintf_chk@plt+0x71b8>
lea    0x0(%esi),%esi
lea    -0x61d4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %eax,(%esp)
call   804a3e0 <snprintf@plt>
mov    0x80(%esp),%eax
mov    0x84(%esp),%esi
movb   $0x0,-0x1(%eax,%esi,1)
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
jmp    80518ae <__sprintf_chk@plt+0x717e>
lea    -0x514e(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x53cb(%ebx),%eax
movl   $0xf9,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x514e(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x53e8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5bac(%ebx),%eax
movl   $0xf8,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xd2b4,%ebx
mov    0x30(%esp),%esi
test   %ebp,%ebp
je     8051b2c <__sprintf_chk@plt+0x73fc>
test   %esi,%esi
jne    8051b0d <__sprintf_chk@plt+0x73dd>
jmp    8051b20 <__sprintf_chk@plt+0x73f0>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
je     8051b13 <__sprintf_chk@plt+0x73e3>
add    $0x4,%esi
je     8051b20 <__sprintf_chk@plt+0x73f0>
mov    (%esi),%edi
test   %edi,%edi
jne    8051af8 <__sprintf_chk@plt+0x73c8>
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
xor    %edi,%edi
pop    %ebx
mov    %edi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x50f3(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x511b(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5b70(%ebx),%eax
movl   $0x22,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xd225,%ebx
test   %edi,%edi
je     8051ba1 <__sprintf_chk@plt+0x7471>
mov    (%edi),%eax
mov    %edi,%esi
test   %eax,%eax
je     8051b99 <__sprintf_chk@plt+0x7469>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
add    $0x4,%esi
call   8049f50 <free@plt>
mov    (%esi),%eax
test   %eax,%eax
jne    8051b88 <__sprintf_chk@plt+0x7458>
mov    %edi,(%esp)
call   8049f50 <free@plt>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xd1d4,%ebx
test   %esi,%esi
je     8051c45 <__sprintf_chk@plt+0x7515>
mov    (%esi),%edi
test   %edi,%edi
je     8051c71 <__sprintf_chk@plt+0x7541>
xor    %edx,%edx
jmp    8051bda <__sprintf_chk@plt+0x74aa>
mov    %eax,%edx
lea    0x1(%edx),%eax
mov    (%esi,%eax,4),%ecx
test   %ecx,%ecx
jne    8051bd8 <__sprintf_chk@plt+0x74a8>
mov    %edx,%ecx
add    $0x2,%ecx
je     8051c3b <__sprintf_chk@plt+0x750b>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    $0x3,%eax
jbe    8051c3b <__sprintf_chk@plt+0x750b>
shl    $0x2,%ecx
mov    %ecx,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,%edi
je     8051c3b <__sprintf_chk@plt+0x750b>
mov    (%esi),%edx
mov    %eax,%ebp
test   %edx,%edx
jne    8051c24 <__sprintf_chk@plt+0x74f4>
jmp    8051c60 <__sprintf_chk@plt+0x7530>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%esi
mov    (%esi),%edx
add    $0x4,%ebp
test   %edx,%edx
je     8051c60 <__sprintf_chk@plt+0x7530>
mov    %edx,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
jne    8051c18 <__sprintf_chk@plt+0x74e8>
mov    %edi,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x4,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8051c3b <__sprintf_chk@plt+0x750b>
mov    %eax,%edi
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x0(%ebp)
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x1,%ecx
jmp    8051bf9 <__sprintf_chk@plt+0x74c9>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xd104,%ebx
mov    0x34(%esp),%ebp
test   %esi,%esi
je     8051d80 <__sprintf_chk@plt+0x7650>
xor    %ecx,%ecx
cmp    $0xffffffff,%esi
setne  %cl
mov    %ebp,%edx
jmp    8051cbb <__sprintf_chk@plt+0x758b>
xchg   %ax,%ax
cmp    $0xffffffff,%eax
setne  %al
movzbl %al,%eax
add    %eax,%ecx
add    $0x4,%edx
mov    -0x4(%edx),%eax
test   %eax,%eax
jne    8051cb0 <__sprintf_chk@plt+0x7580>
add    $0x1,%ecx
je     8051d74 <__sprintf_chk@plt+0x7644>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    $0x3,%eax
jbe    8051d74 <__sprintf_chk@plt+0x7644>
shl    $0x2,%ecx
mov    %ecx,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     8051d74 <__sprintf_chk@plt+0x7644>
xor    %edi,%edi
cmp    $0xffffffff,%esi
je     8051d18 <__sprintf_chk@plt+0x75e8>
mov    %esi,(%esp)
call   804a410 <__strdup@plt>
mov    0xc(%esp),%ecx
test   %eax,%eax
mov    %eax,(%ecx)
je     8051d68 <__sprintf_chk@plt+0x7638>
mov    $0x1,%edi
lea    0x0(%esi),%esi
add    $0x4,%ebp
mov    -0x4(%ebp),%edx
test   %edx,%edx
je     8051d49 <__sprintf_chk@plt+0x7619>
cmp    $0xffffffff,%edx
je     8051d18 <__sprintf_chk@plt+0x75e8>
mov    0xc(%esp),%eax
mov    %edx,(%esp)
lea    (%eax,%edi,4),%esi
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,(%esi)
je     8051d68 <__sprintf_chk@plt+0x7638>
add    $0x4,%ebp
mov    -0x4(%ebp),%edx
add    $0x1,%edi
test   %edx,%edx
jne    8051d22 <__sprintf_chk@plt+0x75f2>
lea    0x0(,%edi,4),%ecx
mov    0xc(%esp),%eax
movl   $0x0,(%eax,%ecx,1)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x4,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     8051d74 <__sprintf_chk@plt+0x7644>
xor    %ecx,%ecx
jmp    8051d50 <__sprintf_chk@plt+0x7620>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
lea    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051c80 <__sprintf_chk@plt+0x7550>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xcfc4,%ebx
mov    0x34(%esp),%edi
test   %esi,%esi
je     8051eaa <__sprintf_chk@plt+0x777a>
test   %edi,%edi
je     8051ec2 <__sprintf_chk@plt+0x7792>
mov    (%esi),%ecx
xor    %edx,%edx
test   %ecx,%ecx
jne    8051dfa <__sprintf_chk@plt+0x76ca>
jmp    8051e71 <__sprintf_chk@plt+0x7741>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edx
lea    0x1(%edx),%eax
mov    (%esi,%eax,4),%ebp
test   %ebp,%ebp
jne    8051df8 <__sprintf_chk@plt+0x76c8>
add    $0x3,%edx
mov    %edx,%ebp
je     8051e67 <__sprintf_chk@plt+0x7737>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ebp
cmp    $0x3,%eax
jbe    8051e67 <__sprintf_chk@plt+0x7737>
shl    $0x2,%ebp
mov    %ebp,(%esp)
mov    %ecx,0xc(%esp)
call   804a230 <malloc@plt>
mov    0xc(%esp),%ecx
test   %eax,%eax
mov    %eax,0x8(%esp)
je     8051e67 <__sprintf_chk@plt+0x7737>
mov    0x8(%esp),%ebp
jmp    8051e4c <__sprintf_chk@plt+0x771c>
lea    0x0(%esi),%esi
add    $0x4,%esi
mov    (%esi),%ecx
add    $0x4,%ebp
test   %ecx,%ecx
je     8051e88 <__sprintf_chk@plt+0x7758>
mov    %ecx,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
jne    8051e40 <__sprintf_chk@plt+0x7710>
mov    0x8(%esp),%eax
mov    %eax,(%esp)
call   8051b60 <__sprintf_chk@plt+0x7430>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
mov    %eax,0x8(%esp)
je     8051e67 <__sprintf_chk@plt+0x7737>
nop
mov    %edi,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     8051e5b <__sprintf_chk@plt+0x772b>
movl   $0x0,0x4(%ebp)
mov    0x8(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,0x30(%esp)
movl   $0x0,0x34(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8051da0 <__sprintf_chk@plt+0x7670>
mov    %esi,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8051bb0 <__sprintf_chk@plt+0x7480>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xceae,%ebx
sub    $0x18,%esp
mov    0x280(%ebx),%eax
test   %eax,%eax
js     8051f00 <__sprintf_chk@plt+0x77d0>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
lea    -0x50e9(%ebx),%eax
movl   $0x80101,0x4(%esp)
mov    %eax,(%esp)
call   8049e80 <open64@plt>
test   %eax,%eax
mov    %eax,0x280(%ebx)
jns    8051ef9 <__sprintf_chk@plt+0x77c9>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    8051efb <__sprintf_chk@plt+0x77cb>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
or     $0x80800,%eax
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xce58,%ebx
sub    $0x14,%esp
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a600 <socket@plt>
test   %eax,%eax
mov    %eax,%esi
js     8051f80 <__sprintf_chk@plt+0x7850>
movl   $0x800000,0x4(%esp)
mov    %eax,(%esp)
call   804fde0 <__sprintf_chk@plt+0x56b0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
neg    %eax
ret
nop
push   %esi
xor    %esi,%esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xcdfb,%ebx
sub    $0x14,%esp
mov    0x288(%ebx),%eax
test   %eax,%eax
js     8051fb8 <__sprintf_chk@plt+0x7888>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
call   804a1b0 <getpid@plt>
cmp    $0x1,%eax
je     8051fd8 <__sprintf_chk@plt+0x78a8>
movl   $0x2,0x288(%ebx)
00
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x5fdb(%ebx),%eax
movl   $0x80101,0x4(%esp)
mov    %eax,(%esp)
call   804f310 <__sprintf_chk@plt+0x4be0>
test   %eax,%eax
mov    %eax,0x288(%ebx)
cmovle %eax,%esi
jmp    8051fac <__sprintf_chk@plt+0x787c>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xcd89,%ebx
sub    $0x9c,%esp
mov    0x268(%ebx),%eax
mov    (%eax),%eax
mov    %eax,0x68(%esp)
mov    0xc0(%esp),%eax
test   %eax,%eax
je     8052200 <__sprintf_chk@plt+0x7ad0>
mov    0xbc(%esp),%eax
movl   $0x800,0x88(%esp)
00
mov    %eax,0x78(%esp)
lea    -0x5f82(%ebx),%eax
mov    %eax,0x8c(%esp)
mov    0xb8(%esp),%eax
test   %eax,%eax
je     8052230 <__sprintf_chk@plt+0x7b00>
lea    -0x50df(%ebx),%eax
lea    -0x5f82(%ebx),%edi
movl   $0x800,0x84(%esp)
00
mov    %eax,0x74(%esp)
mov    0xb4(%esp),%ebp
test   %ebp,%ebp
je     80521c0 <__sprintf_chk@plt+0x7a90>
lea    -0x50d0(%ebx),%ecx
mov    %ecx,0x70(%esp)
mov    0xb0(%esp),%ecx
lea    -0x5f82(%ebx),%eax
movl   $0x1,0x80(%esp)
00
test   %ecx,%ecx
je     80521e4 <__sprintf_chk@plt+0x7ab4>
lea    -0x50c5(%ebx),%ebp
lea    -0x5f82(%ebx),%ecx
movl   $0x800,0x7c(%esp)
mov    %ebp,0x6c(%esp)
mov    %eax,0x38(%esp)
mov    0xb4(%esp),%eax
mov    0x68(%esp),%ebp
mov    %edi,0x48(%esp)
mov    0xb8(%esp),%edi
mov    %ecx,0x28(%esp)
mov    %eax,0x34(%esp)
mov    0x80(%esp),%eax
mov    %ebp,0x5c(%esp)
mov    0x8c(%esp),%ebp
mov    %edi,0x44(%esp)
mov    0x84(%esp),%edi
mov    %eax,0x30(%esp)
mov    0x70(%esp),%eax
mov    %ebp,0x58(%esp)
mov    0xc0(%esp),%ebp
mov    %edi,0x40(%esp)
mov    0x74(%esp),%edi
mov    %eax,0x2c(%esp)
mov    0xb0(%esp),%eax
mov    %ebp,0x54(%esp)
mov    0x88(%esp),%ebp
mov    %edi,0x3c(%esp)
mov    %eax,0x24(%esp)
mov    0x7c(%esp),%eax
mov    %ebp,0x50(%esp)
mov    0x78(%esp),%ebp
mov    %eax,0x20(%esp)
mov    0x6c(%esp),%eax
mov    %ebp,0x4c(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%eax
and    $0x3f8,%eax
sar    $0x3,%eax
mov    %eax,0x18(%esp)
mov    %edx,%eax
and    $0x7,%eax
mov    %eax,0x14(%esp)
lea    -0x4fac(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %esi,(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x800,0x4(%esp)
call   8049e30 <__snprintf_chk@plt>
xor    %eax,%eax
movb   $0x0,0x7ff(%esi)
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0xb0(%esp),%ecx
lea    -0x5f81(%ebx),%eax
movl   $0x0,0x80(%esp)
00
mov    %eax,0x70(%esp)
test   %ecx,%ecx
jne    80520b8 <__sprintf_chk@plt+0x7988>
lea    -0x5f81(%ebx),%ecx
movl   $0x0,0x7c(%esp)
mov    %ecx,0x6c(%esp)
jmp    80520d0 <__sprintf_chk@plt+0x79a0>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x5f81(%ebx),%eax
mov    %eax,0x8c(%esp)
mov    %eax,0x78(%esp)
mov    0xb8(%esp),%eax
movl   $0x0,0x88(%esp)
00
test   %eax,%eax
jne    8052064 <__sprintf_chk@plt+0x7934>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x5f81(%ebx),%edi
movl   $0x0,0x84(%esp)
00
mov    %edi,0x74(%esp)
jmp    805207f <__sprintf_chk@plt+0x794f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x87c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xcb33,%ebx
mov    0x8a0(%esp),%edi
mov    %eax,0x20(%esp)
mov    0x894(%esp),%ecx
mov    0x898(%esp),%ebp
mov    0x89c(%esp),%eax
mov    %edi,0x24(%esp)
mov    %gs:0x14,%edi
mov    %edi,0x86c(%esp)
xor    %edi,%edi
lea    0x4c(%esp),%edi
movl   $0x0,(%edi,%esi,1)
add    $0x4,%esi
cmp    $0x20,%esi
jb     805229f <__sprintf_chk@plt+0x7b6f>
lea    0x30(%esp),%esi
mov    %esi,0x28(%esp)
xor    %esi,%esi
mov    %eax,0x2c(%esp)
mov    0x28(%esp),%eax
movl   $0x0,(%eax,%esi,1)
add    $0x4,%esi
cmp    $0x1c,%esi
jb     80522bc <__sprintf_chk@plt+0x7b8c>
xor    %esi,%esi
mov    0x2c(%esp),%eax
cmpl   $0x0,0x27c(%ebx)
js     80523b9 <__sprintf_chk@plt+0x7c89>
mov    %eax,0x10(%esp)
mov    0x890(%esp),%eax
lea    0x6c(%esp),%esi
mov    %edx,(%esp)
mov    0x20(%esp),%edx
mov    %ebp,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,%eax
call   8052000 <__sprintf_chk@plt+0x78d0>
mov    %esi,%edx
mov    %esi,0x4c(%esp)
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8052311 <__sprintf_chk@plt+0x7be1>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
lea    -0x50ba(%ebx),%eax
sbb    $0x3,%edx
mov    %eax,0x54(%esp)
mov    0x24(%esp),%eax
sub    %esi,%edx
mov    %edx,0x50(%esp)
mov    $0x1,%esi
movl   $0x8,0x58(%esp)
mov    %eax,(%esp)
mov    %eax,0x5c(%esp)
call   804a360 <strlen@plt>
movl   $0x4000,0x8(%esp)
movl   $0x1,0x68(%esp)
mov    %edi,0x38(%esp)
movl   $0x4,0x3c(%esp)
mov    %eax,0x60(%esp)
lea    -0x5f82(%ebx),%eax
mov    %eax,0x64(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x27c(%ebx),%eax
mov    %eax,(%esp)
call   804a500 <sendmsg@plt>
test   %eax,%eax
jns    80523b9 <__sprintf_chk@plt+0x7c89>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
neg    %esi
mov    0x86c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    80523d6 <__sprintf_chk@plt+0x7ca6>
add    $0x87c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8057670 <__sprintf_chk@plt+0xcf40>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x10c,%esp
mov    0x124(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xc99e,%ebx
mov    %eax,0x34(%esp)
mov    %edx,0x38(%esp)
mov    %edi,0x3c(%esp)
mov    0x128(%esp),%edi
mov    %edi,0x40(%esp)
mov    0x12c(%esp),%edi
mov    %edi,0x44(%esp)
mov    0x130(%esp),%edi
mov    %edi,0x28(%esp)
mov    %gs:0x14,%edi
mov    %edi,0xfc(%esp)
xor    %edi,%edi
cmpl   $0x8,0xb14(%ebx)
je     8052c4d <__sprintf_chk@plt+0x851d>
test   $0x3f8,%eax
je     8052b42 <__sprintf_chk@plt+0x8412>
movl   $0x0,0x48(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%esi
jmp    805246b <__sprintf_chk@plt+0x7d3b>
xchg   %ax,%ax
add    $0x1,%esi
movzbl (%esi),%ecx
mov    %esi,%eax
movsbl %cl,%edx
cmp    $0xa,%edx
je     8052468 <__sprintf_chk@plt+0x7d38>
cmp    $0xd,%edx
je     8052468 <__sprintf_chk@plt+0x7d38>
test   %cl,%cl
jne    80524a0 <__sprintf_chk@plt+0x7d70>
jmp    805263c <__sprintf_chk@plt+0x7f0c>
xchg   %ax,%ax
cmp    $0xd,%edx
nop
lea    0x0(%esi,%eiz,1),%esi
je     80524a5 <__sprintf_chk@plt+0x7d75>
add    $0x1,%eax
movsbl (%eax),%edx
test   %dl,%dl
je     8052660 <__sprintf_chk@plt+0x7f30>
cmp    $0xa,%edx
jne    8052488 <__sprintf_chk@plt+0x7d58>
lea    0x1(%eax),%edi
mov    %edi,0x28(%esp)
movb   $0x0,(%eax)
mov    0xb14(%ebx),%edx
cmp    $0x6,%edx
je     80525d0 <__sprintf_chk@plt+0x7ea0>
lea    -0x2(%edx),%eax
cmp    $0x1,%eax
jbe    80525d0 <__sprintf_chk@plt+0x7ea0>
lea    -0x4(%edx),%eax
cmp    $0x1,%eax
jbe    80527fe <__sprintf_chk@plt+0x80ce>
xchg   %ax,%ax
lea    0x74(%esp),%eax
mov    %eax,0x2c(%esp)
lea    -0x5(%edx),%eax
cmp    $0x2,%eax
jbe    805266d <__sprintf_chk@plt+0x7f3d>
and    $0xfffffffd,%edx
cmp    $0x1,%edx
je     805266d <__sprintf_chk@plt+0x7f3d>
mov    0x2c(%esp),%edi
xor    %eax,%eax
mov    $0xa,%ecx
rep stos %eax,%es:(%edi)
mov    0x288(%ebx),%eax
test   %eax,%eax
js     8052630 <__sprintf_chk@plt+0x7f00>
mov    0x34(%esp),%eax
xor    %edx,%edx
mov    $0x1,%edi
and    $0x7,%eax
cmp    $0x3,%eax
movzbl 0xb11(%ebx),%eax
cmovle %eax,%edx
xor    %ebp,%ebp
cmpb   $0x0,0xb10(%ebx)
jne    8052b99 <__sprintf_chk@plt+0x8469>
test   %dl,%dl
je     8052b28 <__sprintf_chk@plt+0x83f8>
mov    0x2c(%esp),%ecx
lea    -0x5091(%ebx),%edx
lea    (%ecx,%ebp,8),%eax
lea    (%ecx,%edi,8),%edi
mov    %edx,(%eax)
movl   $0x7,0x4(%eax)
mov    %esi,(%edi)
mov    %esi,(%esp)
call   804a360 <strlen@plt>
lea    -0x5ed2(%ebx),%edx
mov    %eax,0x4(%edi)
mov    0x2c(%esp),%eax
lea    0x3(%ebp),%edi
add    $0x2,%ebp
lea    (%eax,%ebp,8),%eax
mov    %edx,(%eax)
movl   $0x4,0x4(%eax)
mov    0x2c(%esp),%esi
lea    -0x5f82(%ebx),%edx
lea    (%esi,%edi,8),%eax
add    $0x1,%edi
mov    %edx,(%eax)
movl   $0x1,0x4(%eax)
mov    0x288(%ebx),%eax
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804a3f0 <writev@plt>
test   %eax,%eax
jns    8052630 <__sprintf_chk@plt+0x7f00>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
test   %eax,%eax
jns    8052630 <__sprintf_chk@plt+0x7f00>
jmp    8052640 <__sprintf_chk@plt+0x7f10>
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    0x38(%esp),%edx
mov    %esi,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x120(%esp),%eax
mov    %eax,(%esp)
mov    0x34(%esp),%eax
call   8052250 <__sprintf_chk@plt+0x7b20>
test   %eax,%eax
js     8052aec <__sprintf_chk@plt+0x83bc>
je     8052b1d <__sprintf_chk@plt+0x83ed>
mov    0xb14(%ebx),%edx
addl   $0x1,0x48(%esp)
lea    -0x4(%edx),%ecx
cmp    $0x1,%ecx
jbe    80527fe <__sprintf_chk@plt+0x80ce>
test   %eax,%eax
jle    80524d8 <__sprintf_chk@plt+0x7da8>
mov    0x28(%esp),%edx
test   %edx,%edx
jne    8052460 <__sprintf_chk@plt+0x7d30>
mov    0x48(%esp),%eax
mov    0xfc(%esp),%edi
xor    %gs:0x14,%edi
jne    8052c65 <__sprintf_chk@plt+0x8535>
add    $0x10c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
movl   $0x0,0x28(%esp)
jmp    80524af <__sprintf_chk@plt+0x7d7f>
mov    0x2c(%esp),%edi
xor    %eax,%eax
mov    $0xa,%ecx
rep stos %eax,%es:(%edi)
mov    0x280(%ebx),%ecx
test   %ecx,%ecx
js     80524f8 <__sprintf_chk@plt+0x7dc8>
mov    0x34(%esp),%eax
lea    0xac(%esp),%ebp
movl   $0x10,0xc(%esp)
lea    0xbc(%esp),%edi
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,0x14(%esp)
lea    -0x50b1(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %ebp,(%esp)
call   8049e30 <__snprintf_chk@plt>
movb   $0x0,0xbb(%esp)
call   804a1b0 <getpid@plt>
movl   $0x10,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x14(%esp)
lea    -0x50a2(%ebx),%eax
mov    %eax,0x10(%esp)
call   8049e30 <__snprintf_chk@plt>
mov    %ebp,%edx
movb   $0x0,0xcb(%esp)
mov    %ebp,0x74(%esp)
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8052711 <__sprintf_chk@plt+0x7fe1>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
mov    0x268(%ebx),%eax
sbb    $0x3,%edx
sub    %ebp,%edx
mov    %edx,0x78(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
mov    %eax,0x7c(%esp)
call   804a360 <strlen@plt>
mov    %edi,%ecx
mov    %edi,0x84(%esp)
mov    %eax,0x80(%esp)
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     8052769 <__sprintf_chk@plt+0x8039>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmove  %edx,%ecx
add    %al,%al
sbb    $0x3,%ecx
sub    %edi,%ecx
mov    %esi,(%esp)
mov    %ecx,0x88(%esp)
mov    %esi,0x8c(%esp)
call   804a360 <strlen@plt>
movl   $0x5,0x8(%esp)
movl   $0x1,0x98(%esp)
00
mov    %eax,0x90(%esp)
lea    -0x5f82(%ebx),%eax
mov    %eax,0x94(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x280(%ebx),%eax
mov    %eax,(%esp)
call   804a3f0 <writev@plt>
test   %eax,%eax
js     8052b56 <__sprintf_chk@plt+0x8426>
addl   $0x1,0x48(%esp)
jmp    8052630 <__sprintf_chk@plt+0x7f00>
lea    0x74(%esp),%edi
xor    %eax,%eax
mov    $0xa,%ecx
mov    %edi,0x2c(%esp)
rep stos %eax,%es:(%edi)
lea    0x58(%esp),%eax
mov    %eax,0x30(%esp)
xor    %eax,%eax
mov    0x30(%esp),%edi
movl   $0x0,(%edi,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8052819 <__sprintf_chk@plt+0x80e9>
mov    0x2c(%esp),%eax
cmpl   $0x0,0x284(%ebx)
movl   $0x5,0x64(%esp)
mov    %eax,0x60(%esp)
js     80524e0 <__sprintf_chk@plt+0x7db0>
mov    0x34(%esp),%eax
lea    0x9c(%esp),%ebp
movl   $0x10,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,0x14(%esp)
lea    -0x50b1(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %ebp,(%esp)
call   8049e30 <__snprintf_chk@plt>
movl   $0x0,(%esp)
movb   $0x0,0xab(%esp)
call   8051020 <__sprintf_chk@plt+0x68f0>
movl   $0xf4240,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %eax,0x54(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   804a320 <localtime@plt>
test   %eax,%eax
je     8052c21 <__sprintf_chk@plt+0x84f1>
mov    %eax,0xc(%esp)
lea    0xbc(%esp),%edi
lea    -0x50ac(%ebx),%eax
mov    %eax,0x8(%esp)
movl   $0x40,0x4(%esp)
mov    %edi,(%esp)
call   804a300 <strftime@plt>
test   %eax,%eax
je     8052c21 <__sprintf_chk@plt+0x84f1>
call   804a1b0 <getpid@plt>
movl   $0x10,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,0x14(%esp)
lea    -0x50a2(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0xac(%esp),%eax
mov    %eax,(%esp)
mov    %eax,0x4c(%esp)
call   8049e30 <__snprintf_chk@plt>
mov    %ebp,%edx
movb   $0x0,0xbb(%esp)
mov    %ebp,0x74(%esp)
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8052943 <__sprintf_chk@plt+0x8213>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
mov    %edi,%ecx
sub    %ebp,%edx
mov    %edx,0x78(%esp)
mov    %edi,0x7c(%esp)
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     805297d <__sprintf_chk@plt+0x824d>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmove  %edx,%ecx
add    %al,%al
mov    0x268(%ebx),%eax
sbb    $0x3,%ecx
sub    %edi,%ecx
mov    %ecx,0x80(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
mov    %eax,0x84(%esp)
call   804a360 <strlen@plt>
mov    %eax,0x88(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x8c(%esp)
mov    %eax,%edx
mov    (%edx),%eax
add    $0x4,%edx
lea    -0x1010101(%eax),%ecx
not    %eax
and    %eax,%ecx
and    $0x80808080,%ecx
je     80529df <__sprintf_chk@plt+0x82af>
mov    %ecx,%eax
shr    $0x10,%eax
test   $0x8080,%ecx
cmove  %eax,%ecx
lea    0x2(%edx),%eax
cmove  %eax,%edx
add    %cl,%cl
sbb    $0x3,%edx
sub    0x4c(%esp),%edx
mov    %esi,(%esp)
mov    %esi,0x94(%esp)
mov    %edx,0x90(%esp)
call   804a360 <strlen@plt>
cmpb   $0x0,0xb12(%ebx)
mov    %eax,0x98(%esp)
je     8052a43 <__sprintf_chk@plt+0x8313>
add    $0x1,%eax
mov    %eax,0x98(%esp)
lea    0x94(%esp),%edi
lea    0x0(%esi),%esi
mov    0x30(%esp),%eax
movl   $0x4000,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x284(%ebx),%eax
mov    %eax,(%esp)
call   804a500 <sendmsg@plt>
test   %eax,%eax
js     8052c0f <__sprintf_chk@plt+0x84df>
cmpb   $0x0,0xb12(%ebx)
je     80527f4 <__sprintf_chk@plt+0x80c4>
mov    0x78(%esp),%ecx
mov    0x80(%esp),%edx
add    %ecx,%edx
add    0x88(%esp),%edx
add    0x90(%esp),%edx
add    0x98(%esp),%edx
cmp    %edx,%eax
jae    80527f4 <__sprintf_chk@plt+0x80c4>
test   %eax,%eax
je     8052a50 <__sprintf_chk@plt+0x8320>
cmp    %ecx,%eax
mov    %ecx,%edx
cmovbe %eax,%edx
sub    %edx,%ecx
sub    %edx,%eax
add    %edx,0x74(%esp)
mov    0x2c(%esp),%edx
mov    %ecx,0x78(%esp)
test   %eax,%eax
je     8052a50 <__sprintf_chk@plt+0x8320>
mov    0xc(%edx),%ebp
mov    %eax,%ecx
cmp    %eax,%ebp
cmovbe %ebp,%ecx
sub    %ecx,%ebp
sub    %ecx,%eax
mov    %ebp,0xc(%edx)
add    %ecx,0x8(%edx)
add    $0x8,%edx
cmp    %edi,%edx
jne    8052ac8 <__sprintf_chk@plt+0x8398>
jmp    8052a50 <__sprintf_chk@plt+0x8320>
cmp    $0xfffffff5,%eax
je     8052b0d <__sprintf_chk@plt+0x83dd>
mov    0x27c(%ebx),%eax
test   %eax,%eax
js     8052b0d <__sprintf_chk@plt+0x83dd>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x27c(%ebx)
ff
call   8051ee0 <__sprintf_chk@plt+0x77b0>
mov    0xb14(%ebx),%edx
jmp    80524ca <__sprintf_chk@plt+0x7d9a>
mov    0xb14(%ebx),%edx
jmp    80524ca <__sprintf_chk@plt+0x7d9a>
mov    0x2c(%esp),%eax
lea    (%eax,%ebp,8),%ebp
mov    %esi,0x0(%ebp)
mov    %esi,(%esp)
call   804a360 <strlen@plt>
mov    %eax,0x4(%ebp)
jmp    8052587 <__sprintf_chk@plt+0x7e57>
andl   $0x7,0x34(%esp)
mov    0x28c(%ebx),%eax
or     %eax,0x34(%esp)
jmp    8052451 <__sprintf_chk@plt+0x7d21>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
test   %eax,%eax
jns    8052b89 <__sprintf_chk@plt+0x8459>
mov    0x280(%ebx),%eax
test   %eax,%eax
js     8052b7f <__sprintf_chk@plt+0x844f>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x280(%ebx)
ff
call   8051f90 <__sprintf_chk@plt+0x7860>
jmp    80524f8 <__sprintf_chk@plt+0x7dc8>
je     80524f8 <__sprintf_chk@plt+0x7dc8>
addl   $0x1,0x48(%esp)
jmp    8052630 <__sprintf_chk@plt+0x7f00>
mov    0x120(%esp),%eax
lea    0xbc(%esp),%edi
mov    $0x1,%bp
mov    %edi,(%esp)
movl   $0x40,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x18(%esp)
mov    0x38(%esp),%eax
movl   $0x40,0x4(%esp)
mov    %edx,0x30(%esp)
mov    %eax,0x14(%esp)
lea    -0x509a(%ebx),%eax
mov    %eax,0x10(%esp)
call   8049e30 <__snprintf_chk@plt>
xor    %eax,%eax
or     $0xffffffff,%ecx
mov    %edi,0x74(%esp)
mov    0x30(%esp),%edx
movb   $0x0,0xfb(%esp)
repnz scas %es:(%edi),%al
mov    $0x2,%edi
not    %ecx
sub    $0x1,%ecx
mov    %ecx,0x78(%esp)
jmp    805253d <__sprintf_chk@plt+0x7e0d>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
test   %eax,%eax
jns    8052c54 <__sprintf_chk@plt+0x8524>
cmp    $0xfffffff5,%eax
je     8052c3d <__sprintf_chk@plt+0x850d>
mov    0x284(%ebx),%eax
test   %eax,%eax
js     8052c3d <__sprintf_chk@plt+0x850d>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x284(%ebx)
ff
call   8051ee0 <__sprintf_chk@plt+0x77b0>
mov    0xb14(%ebx),%edx
jmp    80524e0 <__sprintf_chk@plt+0x7db0>
xor    %eax,%eax
jmp    8052640 <__sprintf_chk@plt+0x7f10>
jne    80527f4 <__sprintf_chk@plt+0x80c4>
mov    0xb14(%ebx),%edx
jmp    80524e0 <__sprintf_chk@plt+0x7db0>
call   8057670 <__sprintf_chk@plt+0xcf40>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xc11b,%ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edi
mov    0x54(%esp),%ebp
mov    %eax,0x14(%esp)
mov    0x58(%esp),%eax
mov    %edx,0x18(%esp)
mov    %edi,0x1c(%esp)
lea    0x30c(%ebx),%esi
mov    %ebp,0x20(%esp)
mov    %eax,0x10(%esp)
movl   $0x800,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %esi,(%esp)
mov    %edx,0x2c(%esp)
call   8049e30 <__snprintf_chk@plt>
mov    0x2c(%esp),%edx
mov    $0x2,%eax
mov    %esi,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
movb   $0x0,0xb0b(%ebx)
mov    %esi,0xb0c(%ebx)
call   80523e0 <__sprintf_chk@plt+0x7cb0>
call   804a640 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xc07d,%ebx
sub    $0x14,%esp
mov    0x288(%ebx),%esi
test   %esi,%esi
js     8052d34 <__sprintf_chk@plt+0x8604>
call   804a1b0 <getpid@plt>
cmp    $0x1,%eax
je     8052d40 <__sprintf_chk@plt+0x8610>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
cmp    $0x2,%esi
jg     8052d58 <__sprintf_chk@plt+0x8628>
movl   $0xffffffff,0x288(%ebx)
ff
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    %esi,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
jmp    8052d45 <__sprintf_chk@plt+0x8615>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xc01b,%ebx
sub    $0xac,%esp
mov    %gs:0x14,%eax
mov    %eax,0x9c(%esp)
xor    %eax,%eax
mov    0xb14(%ebx),%esi
cmp    $0x8,%esi
je     8052f58 <__sprintf_chk@plt+0x8828>
lea    -0x6(%esi),%eax
cmp    $0x1,%eax
jbe    8052e48 <__sprintf_chk@plt+0x8718>
lea    -0x2(%esi),%eax
mov    %esi,%edx
cmp    $0x1,%eax
jbe    8052e5f <__sprintf_chk@plt+0x872f>
lea    -0x4(%esi),%eax
cmp    $0x1,%eax
jbe    8053018 <__sprintf_chk@plt+0x88e8>
sub    $0x5,%esi
cmp    $0x2,%esi
jbe    8052f00 <__sprintf_chk@plt+0x87d0>
and    $0xfffffffd,%edx
cmp    $0x1,%edx
je     8052f00 <__sprintf_chk@plt+0x87d0>
mov    0x27c(%ebx),%eax
test   %eax,%eax
js     8052dfd <__sprintf_chk@plt+0x86cd>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x27c(%ebx)
ff
mov    0x284(%ebx),%eax
test   %eax,%eax
js     8052e19 <__sprintf_chk@plt+0x86e9>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x284(%ebx)
ff
call   8052d10 <__sprintf_chk@plt+0x85e0>
call   8051f90 <__sprintf_chk@plt+0x7860>
mov    0x9c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805313f <__sprintf_chk@plt+0x8a0f>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   804a1b0 <getpid@plt>
cmp    $0x1,%eax
jne    8053088 <__sprintf_chk@plt+0x8958>
cmp    $0x6,%esi
jne    8052daf <__sprintf_chk@plt+0x867f>
lea    0x1c(%esp),%esi
xor    %eax,%eax
mov    0x27c(%ebx),%ebp
mov    $0x20,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    $0x1,%edi
mov    %di,0x1c(%esp)
lea    0x3c(%esp),%edi
test   %ebp,%ebp
movl   $0x6e75722f,0x1e(%esp)
movl   $0x7379732f,0x22(%esp)
movl   $0x646d6574,0x26(%esp)
mov    $0x13,%cl
movl   $0x756f6a2f,0x2a(%esp)
movl   $0x6c616e72,0x2e(%esp)
movl   $0x636f732f,0x32(%esp)
movl   $0x74656b,0x36(%esp)
rep stos %eax,%es:(%edi)
js     8052fa0 <__sprintf_chk@plt+0x8870>
xor    %eax,%eax
mov    0x284(%ebx),%edx
test   %edx,%edx
js     8052eec <__sprintf_chk@plt+0x87bc>
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
mov    0xc(%esp),%eax
movl   $0xffffffff,0x284(%ebx)
ff
mov    %eax,0xc(%esp)
call   8052d10 <__sprintf_chk@plt+0x85e0>
mov    0xc(%esp),%eax
jmp    8052e23 <__sprintf_chk@plt+0x86f3>
xchg   %ax,%ax
call   8051ee0 <__sprintf_chk@plt+0x77b0>
test   %eax,%eax
mov    %eax,%esi
js     8052de1 <__sprintf_chk@plt+0x86b1>
mov    0x27c(%ebx),%eax
test   %eax,%eax
js     8052f2b <__sprintf_chk@plt+0x87fb>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x27c(%ebx)
ff
mov    0x284(%ebx),%eax
test   %eax,%eax
js     8052f47 <__sprintf_chk@plt+0x8817>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x284(%ebx)
ff
call   8052d10 <__sprintf_chk@plt+0x85e0>
mov    %esi,%eax
jmp    8052e23 <__sprintf_chk@plt+0x86f3>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x27c(%ebx),%eax
test   %eax,%eax
js     8052f74 <__sprintf_chk@plt+0x8844>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x27c(%ebx)
ff
mov    0x284(%ebx),%eax
test   %eax,%eax
js     8052f90 <__sprintf_chk@plt+0x8860>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x284(%ebx)
ff
call   8052d10 <__sprintf_chk@plt+0x85e0>
xor    %eax,%eax
jmp    8052e23 <__sprintf_chk@plt+0x86f3>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x2,%al
call   8051f30 <__sprintf_chk@plt+0x7800>
test   %eax,%eax
mov    %eax,%edi
mov    %eax,0x27c(%ebx)
js     8053007 <__sprintf_chk@plt+0x88d7>
lea    0x1e(%esp),%eax
mov    %eax,(%esp)
call   804a360 <strlen@plt>
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
add    $0x2,%eax
mov    %eax,0x8(%esp)
call   804a680 <connect@plt>
test   %eax,%eax
jns    8052ec6 <__sprintf_chk@plt+0x8796>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
mov    0x27c(%ebx),%eax
neg    %esi
test   %eax,%eax
js     8052fff <__sprintf_chk@plt+0x88cf>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x27c(%ebx)
ff
test   %esi,%esi
jns    8053178 <__sprintf_chk@plt+0x8a48>
mov    0xb14(%ebx),%edx
mov    %edx,%esi
jmp    8052dbd <__sprintf_chk@plt+0x868d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x1c(%esp),%esi
xor    %eax,%eax
mov    $0x20,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
lea    0x2c(%esp),%edi
mov    $0x1,%edx
mov    %dx,0x1c(%esp)
movl   $0x7665642f,0x1e(%esp)
movl   $0x676f6c2f,0x22(%esp)
mov    $0x17,%cl
rep stos %eax,%es:(%edi)
mov    0x284(%ebx),%ecx
test   %ecx,%ecx
js     80530a1 <__sprintf_chk@plt+0x8971>
xor    %eax,%eax
mov    0x27c(%ebx),%edx
test   %edx,%edx
js     8052eec <__sprintf_chk@plt+0x87bc>
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
mov    0xc(%esp),%eax
movl   $0xffffffff,0x27c(%ebx)
ff
jmp    8052eec <__sprintf_chk@plt+0x87bc>
lea    0x0(%esi),%esi
movl   $0x2,(%esp)
call   804a630 <isatty@plt>
test   %eax,%eax
jg     8052de1 <__sprintf_chk@plt+0x86b1>
jmp    8052e56 <__sprintf_chk@plt+0x8726>
mov    $0x2,%al
call   8051f30 <__sprintf_chk@plt+0x7800>
test   %eax,%eax
mov    %eax,%edi
mov    %eax,0x284(%ebx)
js     80530e3 <__sprintf_chk@plt+0x89b3>
lea    0x1e(%esp),%ebp
mov    %ebp,(%esp)
call   804a360 <strlen@plt>
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
add    $0x2,%eax
mov    %eax,0x8(%esp)
call   804a680 <connect@plt>
test   %eax,%eax
js     80530f0 <__sprintf_chk@plt+0x89c0>
movb   $0x0,0xb12(%ebx)
jmp    8053053 <__sprintf_chk@plt+0x8923>
mov    0xb14(%ebx),%edx
mov    %edx,%esi
jmp    8052dc9 <__sprintf_chk@plt+0x8699>
mov    0x284(%ebx),%eax
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
mov    $0x1,%eax
call   8051f30 <__sprintf_chk@plt+0x7800>
test   %eax,%eax
mov    %eax,%edx
mov    %eax,0x284(%ebx)
js     80530e3 <__sprintf_chk@plt+0x89b3>
xor    %eax,%eax
or     $0xffffffff,%ecx
mov    %ebp,%edi
repnz scas %es:(%edi),%al
mov    %esi,0x4(%esp)
mov    %edx,(%esp)
neg    %ecx
mov    %ecx,0x8(%esp)
call   804a680 <connect@plt>
test   %eax,%eax
js     8053144 <__sprintf_chk@plt+0x8a14>
movb   $0x1,0xb12(%ebx)
jmp    8053053 <__sprintf_chk@plt+0x8923>
call   8057670 <__sprintf_chk@plt+0xcf40>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
mov    0x284(%ebx),%eax
neg    %esi
test   %eax,%eax
js     8053169 <__sprintf_chk@plt+0x8a39>
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
movl   $0xffffffff,0x284(%ebx)
ff
test   %esi,%esi
js     80530e3 <__sprintf_chk@plt+0x89b3>
mov    %esi,%eax
jmp    8053055 <__sprintf_chk@plt+0x8925>
mov    %esi,%eax
jmp    8052ec8 <__sprintf_chk@plt+0x8798>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x84c,%esp
mov    0x864(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xbbfe,%ebx
mov    0x870(%esp),%edi
mov    0x874(%esp),%ebp
mov    %eax,0x24(%esp)
mov    0x86c(%esp),%eax
mov    %eax,0x28(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x83c(%esp)
xor    %eax,%eax
call   804a430 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%ecx
mov    0x860(%esp),%eax
and    $0x7,%eax
cmp    0x290(%ebx),%eax
jle    8053207 <__sprintf_chk@plt+0x8ad7>
xor    %eax,%eax
mov    0x83c(%esp),%edx
xor    %gs:0x14,%edx
mov    %ecx,(%esi)
jne    8053202 <__sprintf_chk@plt+0x8ad2>
add    $0x84c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8057670 <__sprintf_chk@plt+0xcf40>
mov    %edi,0x10(%esp)
lea    0x3c(%esp),%edi
mov    %ebp,0x14(%esp)
movl   $0x800,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %edi,(%esp)
mov    %ecx,0x2c(%esp)
call   804a460 <__vsnprintf_chk@plt>
mov    0x28(%esp),%eax
mov    0x24(%esp),%edx
mov    %edi,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
mov    0x868(%esp),%eax
movl   $0x0,0x8(%esp)
movb   $0x0,0x83b(%esp)
mov    %eax,(%esp)
mov    0x860(%esp),%eax
call   80523e0 <__sprintf_chk@plt+0x7cb0>
mov    0x2c(%esp),%ecx
jmp    80531e5 <__sprintf_chk@plt+0x8ab5>
xchg   %ax,%ax
sub    $0x2c,%esp
lea    0x44(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8053180 <__sprintf_chk@plt+0x8a50>
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xbace,%ebx
sub    $0x18,%esp
mov    0x24(%esp),%edx
lea    -0x4f54(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
mov    0x20(%esp),%eax
call   8052c70 <__sprintf_chk@plt+0x8540>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xba87,%ebx
test   %eax,%eax
js     8053327 <__sprintf_chk@plt+0x8bf7>
cmp    $0x8,%eax
jg     8053351 <__sprintf_chk@plt+0x8c21>
mov    %eax,0xb14(%ebx)
add    $0x18,%esp
pop    %ebx
ret
lea    -0x4dce(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5075(%ebx),%eax
movl   $0x115,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x4dce(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5069(%ebx),%eax
movl   $0x116,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xba07,%ebx
mov    %eax,%edx
and    $0x7,%edx
cmp    %edx,%eax
jne    80533a7 <__sprintf_chk@plt+0x8c77>
mov    %eax,0x290(%ebx)
add    $0x18,%esp
pop    %ebx
ret
lea    -0x4de0(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5050(%ebx),%eax
movl   $0x127,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb9ae,%ebx
sub    $0x18,%esp
mov    0x24(%esp),%edx
lea    -0x4f18(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
mov    0x20(%esp),%eax
call   8052c70 <__sprintf_chk@plt+0x8540>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb96e,%ebx
sub    $0x28,%esp
movl   $0x3,(%esp)
lea    -0x5038(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
add    $0x28,%esp
mov    $0xfffffff4,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb91b,%ebx
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fbb0 <__sprintf_chk@plt+0x5480>
test   %eax,%eax
js     8053499 <__sprintf_chk@plt+0x8d69>
mov    %eax,(%esp)
call   8053380 <__sprintf_chk@plt+0x8c50>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb8e5,%ebx
test   %edi,%edi
je     80534f9 <__sprintf_chk@plt+0x8dc9>
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x154(%ebx,%esi,4),%eax
test   %eax,%eax
je     80534db <__sprintf_chk@plt+0x8dab>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049e70 <strcmp@plt>
test   %eax,%eax
je     80534f0 <__sprintf_chk@plt+0x8dc0>
add    $0x1,%esi
cmp    $0x9,%esi
jne    80534c0 <__sprintf_chk@plt+0x8d90>
add    $0x10,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x4e0d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7394(%ebx),%eax
movl   $0x39f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80534a0 <__sprintf_chk@plt+0x8d70>
test   %eax,%eax
js     8053558 <__sprintf_chk@plt+0x8e28>
mov    %eax,(%esp)
call   8053300 <__sprintf_chk@plt+0x8bd0>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffea,%eax
jmp    805354d <__sprintf_chk@plt+0x8e1d>
nop
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb82d,%ebx
sub    $0x24,%esp
lea    -0x5029(%ebx),%eax
mov    %eax,(%esp)
call   8049ef0 <secure_getenv@plt>
test   %eax,%eax
mov    %eax,%esi
je     8053594 <__sprintf_chk@plt+0x8e64>
mov    %eax,(%esp)
call   8053530 <__sprintf_chk@plt+0x8e00>
test   %eax,%eax
js     80536d0 <__sprintf_chk@plt+0x8fa0>
lea    -0x5016(%ebx),%eax
mov    %eax,(%esp)
call   8049ef0 <secure_getenv@plt>
test   %eax,%eax
mov    %eax,%esi
je     80535b8 <__sprintf_chk@plt+0x8e88>
mov    %eax,(%esp)
call   8053470 <__sprintf_chk@plt+0x8d40>
test   %eax,%eax
js     8053690 <__sprintf_chk@plt+0x8f60>
lea    -0x5004(%ebx),%eax
mov    %eax,(%esp)
call   8049ef0 <secure_getenv@plt>
test   %eax,%eax
mov    %eax,%esi
je     80535df <__sprintf_chk@plt+0x8eaf>
mov    %eax,(%esp)
call   804e900 <__sprintf_chk@plt+0x41d0>
test   %eax,%eax
js     8053650 <__sprintf_chk@plt+0x8f20>
setne  0xb11(%ebx)
lea    -0x4ff2(%ebx),%eax
mov    %eax,(%esp)
call   8049ef0 <secure_getenv@plt>
test   %eax,%eax
mov    %eax,%esi
je     8053606 <__sprintf_chk@plt+0x8ed6>
mov    %eax,(%esp)
call   804e900 <__sprintf_chk@plt+0x41d0>
test   %eax,%eax
js     8053610 <__sprintf_chk@plt+0x8ee0>
setne  0xb10(%ebx)
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4e30(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4df6(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %esi,0x14(%esp)
movl   $0x363,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x4,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4e30(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4df6(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %esi,0x14(%esp)
movl   $0x35f,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x4,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    80535df <__sprintf_chk@plt+0x8eaf>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4e58(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4df6(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %esi,0x14(%esp)
movl   $0x35b,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x4,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    80535b8 <__sprintf_chk@plt+0x8e88>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4e84(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4df6(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x5089(%ebx),%eax
mov    %esi,0x14(%esp)
movl   $0x357,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x4,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    8053594 <__sprintf_chk@plt+0x8e64>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    $0x1,%eax
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb676,%ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
mov    0xb18(%ebx),%edx
test   %edx,%edx
jle    8053740 <__sprintf_chk@plt+0x9010>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x4dbf(%ebx),%eax
mov    %eax,(%esp)
call   804a1e0 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8053788 <__sprintf_chk@plt+0x9058>
movzbl 0x0(%ebp),%eax
test   %al,%al
je     8053778 <__sprintf_chk@plt+0x9048>
cmp    $0x63,%al
jne    80537a0 <__sprintf_chk@plt+0x9070>
cmpb   $0x61,0x1(%ebp)
jne    80537a0 <__sprintf_chk@plt+0x9070>
cmpb   $0x74,0x2(%ebp)
jne    80537a0 <__sprintf_chk@plt+0x9070>
cmpb   $0x0,0x3(%ebp)
jne    80537a0 <__sprintf_chk@plt+0x9070>
lea    0x0(%esi),%esi
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x4db7(%ebx),%eax
mov    %eax,(%esp)
call   804a1e0 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebp
jne    8053754 <__sprintf_chk@plt+0x9024>
lea    0x0(%esi,%eiz,1),%esi
call   804f530 <__sprintf_chk@plt+0x4e00>
test   %al,%al
je     8053778 <__sprintf_chk@plt+0x9048>
lea    0x28(%esp),%edi
call   804f4b0 <__sprintf_chk@plt+0x4d80>
mov    %edi,(%esp)
call   804a480 <pipe@plt>
test   %eax,%eax
js     805396e <__sprintf_chk@plt+0x923e>
call   804a1b0 <getpid@plt>
mov    %eax,0x1c(%esp)
call   804a4e0 <fork@plt>
test   %eax,%eax
mov    %eax,0xb18(%ebx)
js     80539cb <__sprintf_chk@plt+0x929b>
jne    8053940 <__sprintf_chk@plt+0x9210>
mov    0x28(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049e20 <dup2@plt>
mov    %edi,(%esp)
call   804f3c0 <__sprintf_chk@plt+0x4c90>
mov    %esi,%eax
test   %al,%al
movl   $0x1,0x8(%esp)
je     80539ae <__sprintf_chk@plt+0x927e>
lea    -0x4d82(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4d79(%ebx),%eax
mov    %eax,(%esp)
call   804a370 <setenv@plt>
movl   $0xf,0x4(%esp)
movl   $0x1,(%esp)
call   804a450 <prctl@plt>
test   %eax,%eax
js     8053a68 <__sprintf_chk@plt+0x9338>
call   804a590 <getppid@plt>
cmp    0x1c(%esp),%eax
nop
jne    805392f <__sprintf_chk@plt+0x91ff>
test   %ebp,%ebp
je     805389c <__sprintf_chk@plt+0x916c>
movl   $0x0,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %ebp,(%esp)
call   804a050 <execlp@plt>
lea    -0x4d6d(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x5e2b(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e30(%ebx),%eax
movl   $0x0,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,(%esp)
call   804a470 <execl@plt>
lea    -0x70d2(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %eax,(%esp)
call   804a050 <execlp@plt>
lea    -0x4d6a(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %eax,(%esp)
call   804a050 <execlp@plt>
lea    -0x4d65(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %eax,(%esp)
call   804a050 <execlp@plt>
lea    0x0(%esi),%esi
movl   $0x0,0x14(%esp)
movl   $0x10000,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   8049ed0 <splice@plt>
cmp    $0x0,%eax
jg     80538f0 <__sprintf_chk@plt+0x91c0>
jne    8053a36 <__sprintf_chk@plt+0x9306>
movl   $0x0,(%esp)
call   8049f10 <_exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049e20 <dup2@plt>
test   %eax,%eax
js     8053a15 <__sprintf_chk@plt+0x92e5>
mov    %edi,(%esp)
call   804f3c0 <__sprintf_chk@plt+0x4c90>
mov    $0x1,%eax
jmp    8053735 <__sprintf_chk@plt+0x9005>
lea    -0x4d44(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4cf2(%ebx),%eax
mov    %eax,0xc(%esp)
movl   $0x44,0x8(%esp)
lea    -0x4db1(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    8053735 <__sprintf_chk@plt+0x9005>
lea    -0x4d74(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4d79(%ebx),%eax
mov    %eax,(%esp)
call   804a370 <setenv@plt>
jmp    805382a <__sprintf_chk@plt+0x90fa>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
lea    -0x4d9b(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4cf2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4db1(%ebx),%eax
movl   $0x4d,0x8(%esp)
mov    %eax,0x4(%esp)
neg    %esi
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    %edi,(%esp)
call   804f3c0 <__sprintf_chk@plt+0x4c90>
mov    %esi,%eax
jmp    8053735 <__sprintf_chk@plt+0x9005>
lea    -0x4d24(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4cf2(%ebx),%eax
mov    %eax,0xc(%esp)
movl   $0x7c,0x8(%esp)
jmp    805398a <__sprintf_chk@plt+0x925a>
lea    -0x4d60(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4d01(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4db1(%ebx),%eax
movl   $0x29,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
movl   $0x1,(%esp)
call   8049f10 <_exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb30d,%ebx
sub    $0x14,%esp
mov    0xb18(%ebx),%eax
test   %eax,%eax
jle    8053ada <__sprintf_chk@plt+0x93aa>
mov    0x264(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049fd0 <fclose@plt>
mov    0xb18(%ebx),%esi
movl   $0x12,0x4(%esp)
mov    %esi,(%esp)
call   804a290 <kill@plt>
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   804f740 <__sprintf_chk@plt+0x5010>
movl   $0x0,0xb18(%ebx)
00
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
push   %esi
mov    0xc(%esp),%edx
mov    0x8(%esp),%ecx
mov    (%edx),%eax
cmp    %eax,(%ecx)
setg   %al
movzbl %al,%eax
mov    %eax,%esi
mov    $0xffffffff,%eax
cmovge %esi,%eax
pop    %esi
ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x5c,%esp
movzbl 0x78(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb281,%ebx
test   %edx,%edx
movl   $0x0,0x20(%esp)
mov    %al,0x3e(%esp)
movzbl 0x7c(%esp),%eax
mov    %al,0x3f(%esp)
je     8053d01 <__sprintf_chk@plt+0x95d1>
xor    %ebp,%ebp
xor    %eax,%eax
lea    0x0(%esi),%esi
mov    (%esi,%eax,4),%edi
cmp    %edi,%ebp
cmovl  %edi,%ebp
add    $0x1,%eax
cmp    %edx,%eax
jae    8053b64 <__sprintf_chk@plt+0x9434>
cmp    (%esi,%eax,4),%edi
je     8053b40 <__sprintf_chk@plt+0x9410>
mov    %eax,%ecx
jmp    8053b5d <__sprintf_chk@plt+0x942d>
cmp    (%esi,%ecx,4),%edi
je     8053b40 <__sprintf_chk@plt+0x9410>
add    $0x1,%ecx
cmp    %edx,%ecx
jb     8053b58 <__sprintf_chk@plt+0x9428>
mov    0x20(%esp),%ecx
mov    %ecx,0x24(%esp)
add    $0x1,%ecx
cmp    %edx,%eax
mov    %ecx,0x20(%esp)
mov    0x24(%esp),%ecx
mov    %edi,(%esi,%ecx,4)
jne    8053b40 <__sprintf_chk@plt+0x9410>
mov    %ebp,%eax
mov    $0x66666667,%edx
imul   %edx
sar    $0x1f,%ebp
sar    $0x2,%edx
sub    %ebp,%edx
mov    $0x1,%ebp
mov    %edx,%ecx
je     8053bb3 <__sprintf_chk@plt+0x9483>
mov    $0x66666667,%edi
lea    0x0(%esi),%esi
mov    %ecx,%eax
add    $0x1,%ebp
imul   %edi
sar    $0x1f,%ecx
sar    $0x2,%edx
sub    %ecx,%edx
mov    %edx,%ecx
jne    8053ba0 <__sprintf_chk@plt+0x9470>
lea    -0xb2b4(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x4,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804a5f0 <qsort@plt>
testb  $0x8,0x80(%esp)
movl   $0x0,0x28(%esp)
jne    8053bfc <__sprintf_chk@plt+0x94cc>
lea    0x2(%ebp),%eax
cmp    0x74(%esp),%eax
movl   $0x14,0x28(%esp)
jb     8053ced <__sprintf_chk@plt+0x95bd>
mov    0x20(%esp),%eax
test   %eax,%eax
je     8053ce5 <__sprintf_chk@plt+0x95b5>
lea    0x4c(%esp),%eax
xor    %edi,%edi
mov    %eax,0x2c(%esp)
lea    -0x4ce7(%ebx),%eax
mov    %eax,0x30(%esp)
lea    -0x750a(%ebx),%eax
mov    %eax,0x34(%esp)
mov    %ebp,0x38(%esp)
lea    0x0(%esi),%esi
mov    0x2c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x0,0x4c(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x4(%esp)
mov    (%esi,%edi,4),%eax
mov    %eax,(%esp)
call   80503a0 <__sprintf_chk@plt+0x5c70>
mov    0x4c(%esp),%ecx
mov    $0x4,%eax
mov    (%esi,%edi,4),%ebp
test   %ecx,%ecx
cmove  0x34(%esp),%ecx
cmpb   $0x0,0x3e(%esp)
jne    8053c8c <__sprintf_chk@plt+0x955c>
cmpb   $0x0,0x3f(%esp)
mov    $0x1,%al
jne    8053c8c <__sprintf_chk@plt+0x955c>
mov    0x20(%esp),%eax
sub    $0x1,%eax
cmp    %eax,%edi
sbb    %eax,%eax
add    $0x2,%eax
mov    %eax,(%esp)
add    $0x1,%edi
mov    %ecx,0x24(%esp)
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
movl   $0x1,(%esp)
mov    %ecx,0x18(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x4c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
cmp    0x20(%esp),%edi
jne    8053c30 <__sprintf_chk@plt+0x9500>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x74(%esp),%eax
sub    $0x2,%eax
mov    %eax,0x28(%esp)
sub    %ebp,0x28(%esp)
jmp    8053bfc <__sprintf_chk@plt+0x94cc>
mov    $0x1,%ebp
jmp    8053bb3 <__sprintf_chk@plt+0x9483>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x64(%esp),%ecx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xb074,%ebx
mov    %edx,0x28(%esp)
lea    0x38(%esp),%edx
mov    %edx,0x4(%esp)
mov    %ecx,0x2c(%esp)
movzbl 0x68(%esp),%ecx
mov    %eax,(%esp)
movl   $0x0,0x38(%esp)
mov    %cl,0x27(%esp)
call   8055c00 <__sprintf_chk@plt+0xb4d0>
test   %eax,%eax
js     8053e68 <__sprintf_chk@plt+0x9738>
lea    -0x4cda(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804f080 <__sprintf_chk@plt+0x4950>
mov    %eax,%esi
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %esi,%esi
je     8053ec1 <__sprintf_chk@plt+0x9791>
lea    -0x4d63(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a100 <fopen64@plt>
mov    %esi,(%esp)
mov    %eax,%edi
mov    %eax,0x1c(%esp)
call   8049f50 <free@plt>
test   %edi,%edi
je     8053e7b <__sprintf_chk@plt+0x974b>
lea    0x3c(%esp),%eax
xor    %edi,%edi
xor    %esi,%esi
xor    %ebp,%ebp
mov    %eax,0x20(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8054b40 <__sprintf_chk@plt+0xa410>
test   %eax,%eax
jle    8053e40 <__sprintf_chk@plt+0x9710>
cmpb   $0x0,0x27(%esp)
je     8053df0 <__sprintf_chk@plt+0x96c0>
cmp    %esi,%ebp
jae    8053e08 <__sprintf_chk@plt+0x96d8>
mov    0x3c(%esp),%eax
mov    %eax,(%edi,%ebp,4)
add    $0x1,%ebp
jmp    8053dc0 <__sprintf_chk@plt+0x9690>
nop
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804ee60 <__sprintf_chk@plt+0x4730>
test   %eax,%eax
jg     8053dc0 <__sprintf_chk@plt+0x9690>
jmp    8053ddf <__sprintf_chk@plt+0x96af>
lea    0x0(%esi),%esi
lea    0x0(%ebp,%ebp,1),%esi
mov    $0x10,%eax
cmp    $0x10,%esi
cmovb  %eax,%esi
lea    0x0(,%esi,4),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804a210 <realloc@plt>
test   %eax,%eax
je     8053e74 <__sprintf_chk@plt+0x9744>
cmp    %esi,%ebp
jae    8053ec8 <__sprintf_chk@plt+0x9798>
mov    %eax,%edi
jmp    8053de3 <__sprintf_chk@plt+0x96b3>
lea    0x0(%esi),%esi
test   %eax,%eax
mov    %eax,%esi
jne    8053e4a <__sprintf_chk@plt+0x971a>
test   %ebp,%ebp
jne    8053e8e <__sprintf_chk@plt+0x975e>
mov    %edi,(%esp)
call   8049f50 <free@plt>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049fd0 <fclose@plt>
add    $0x4c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x4c,%esp
mov    %eax,%esi
pop    %ebx
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xfffffff4,%esi
jmp    8053e4a <__sprintf_chk@plt+0x971a>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
add    $0x4c,%esp
pop    %ebx
neg    %esi
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x6c(%esp),%eax
mov    %ebp,%edx
movl   $0x0,0x8(%esp)
mov    %eax,0x10(%esp)
movzbl 0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
mov    %edi,%eax
call   8053b00 <__sprintf_chk@plt+0x93d0>
jmp    8053e4a <__sprintf_chk@plt+0x971a>
mov    $0xfffffff4,%esi
jmp    8053e5e <__sprintf_chk@plt+0x972e>
lea    -0x4c40(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4cb0(%ebx),%eax
movl   $0x86,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%esi
mov    0x6c(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xae80,%ebx
movl   $0x0,0x38(%esp)
test   %esi,%esi
mov    %eax,0x2c(%esp)
mov    %al,0x2b(%esp)
movl   $0x0,0x3c(%esp)
je     80542c7 <__sprintf_chk@plt+0x9b97>
mov    0x68(%esp),%ecx
test   %ecx,%ecx
je     80541b0 <__sprintf_chk@plt+0x9a80>
mov    0x64(%esp),%edx
lea    -0x5f81(%ebx),%eax
test   %edx,%edx
cmovne 0x64(%esp),%eax
mov    %eax,0x64(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8055c00 <__sprintf_chk@plt+0xb4d0>
test   %eax,%eax
js     80541a0 <__sprintf_chk@plt+0x9a70>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804a6e0 <opendir@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     8054268 <__sprintf_chk@plt+0x9b38>
lea    0x3c(%esp),%eax
xor    %esi,%esi
mov    %eax,0x20(%esp)
lea    -0x5bd3(%ebx),%eax
xor    %ebp,%ebp
movl   $0x0,0x18(%esp)
mov    %eax,0x24(%esp)
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8054c40 <__sprintf_chk@plt+0xa510>
cmp    $0x0,%eax
jle    80541c0 <__sprintf_chk@plt+0x9a90>
mov    0x3c(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,%edi
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %edi,%edi
je     8054150 <__sprintf_chk@plt+0x9a20>
testb  $0x1,0x70(%esp)
je     80540b0 <__sprintf_chk@plt+0x9980>
mov    %ebp,%eax
test   %al,%al
je     80540f0 <__sprintf_chk@plt+0x99c0>
test   %esi,%esi
je     80540e0 <__sprintf_chk@plt+0x99b0>
mov    %esi,(%esp)
call   80506f0 <__sprintf_chk@plt+0x5fc0>
movl   $0x1,(%esp)
mov    %eax,%ebp
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    %ebp,0x10(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x62c4(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
mov    0x18(%esp),%eax
test   %eax,%eax
je     8054128 <__sprintf_chk@plt+0x99f8>
mov    0x70(%esp),%eax
mov    $0x1,%ebp
mov    %esi,(%esp)
mov    %eax,0x10(%esp)
movzbl 0x2b(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
sub    $0x2,%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x4(%esp)
call   8053f00 <__sprintf_chk@plt+0x97d0>
mov    %esi,(%esp)
mov    %edi,%esi
call   8049f50 <free@plt>
jmp    8053fb0 <__sprintf_chk@plt+0x9880>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x0,(%esp)
call   8055360 <__sprintf_chk@plt+0xac30>
test   %eax,%eax
jle    8054012 <__sprintf_chk@plt+0x98e2>
mov    %edi,(%esp)
call   8049f50 <free@plt>
jmp    8053fb0 <__sprintf_chk@plt+0x9880>
lea    0x0(%esi),%esi
mov    %edi,%esi
mov    $0x1,%ebp
jmp    8053fb0 <__sprintf_chk@plt+0x9880>
lea    0x0(%esi,%eiz,1),%esi
mov    0x70(%esp),%eax
mov    0x64(%esp),%edx
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
movzbl 0x2b(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x68(%esp),%eax
mov    %eax,(%esp)
mov    0x60(%esp),%eax
call   8053d10 <__sprintf_chk@plt+0x95e0>
jmp    805401c <__sprintf_chk@plt+0x98ec>
lea    0x0(%esi),%esi
movl   $0x0,(%esp)
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    %eax,0x4(%esp)
mov    0x64(%esp),%eax
mov    %eax,(%esp)
call   804f080 <__sprintf_chk@plt+0x4950>
test   %eax,%eax
mov    %eax,0x18(%esp)
jne    805406c <__sprintf_chk@plt+0x993c>
mov    %edi,(%esp)
xor    %ebp,%ebp
mov    $0xfffffff4,%edi
call   8049f50 <free@plt>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804a6c0 <closedir@plt>
mov    %ebp,(%esp)
call   8049f50 <free@plt>
mov    %esi,(%esp)
call   8049f50 <free@plt>
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x4c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %eax,%edi
movl   $0x0,0x18(%esp)
xor    %esi,%esi
xor    %ebp,%ebp
jmp    805416b <__sprintf_chk@plt+0x9a3b>
call   804f4b0 <__sprintf_chk@plt+0x4d80>
mov    %eax,0x68(%esp)
jmp    8053f46 <__sprintf_chk@plt+0x9816>
xchg   %ax,%ax
jne    8054276 <__sprintf_chk@plt+0x9b46>
mov    %ebp,%eax
test   %al,%al
je     8054288 <__sprintf_chk@plt+0x9b58>
test   %esi,%esi
je     805427f <__sprintf_chk@plt+0x9b4f>
mov    %esi,(%esp)
call   80506f0 <__sprintf_chk@plt+0x5fc0>
movl   $0x2,(%esp)
mov    %eax,%edi
call   8050310 <__sprintf_chk@plt+0x5be0>
mov    %edi,0x10(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x62c4(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
lea    -0x733f(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x64(%esp),%eax
mov    %eax,(%esp)
call   804f080 <__sprintf_chk@plt+0x4950>
test   %eax,%eax
mov    %eax,%ebp
je     80542bd <__sprintf_chk@plt+0x9b8d>
mov    0x70(%esp),%eax
xor    %edi,%edi
mov    %ebp,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x10(%esp)
movzbl 0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
sub    $0x2,%eax
mov    %eax,0x8(%esp)
call   8053f00 <__sprintf_chk@plt+0x97d0>
jmp    805415f <__sprintf_chk@plt+0x9a2f>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%edi
neg    %edi
jmp    80541a2 <__sprintf_chk@plt+0x9a72>
mov    %eax,%edi
xor    %ebp,%ebp
jmp    805415f <__sprintf_chk@plt+0x9a2f>
xor    %ebp,%ebp
xor    %edi,%edi
jmp    805415f <__sprintf_chk@plt+0x9a2f>
mov    0x70(%esp),%eax
mov    0x64(%esp),%edx
mov    %eax,0xc(%esp)
movzbl 0x2c(%esp),%eax
mov    %eax,0x8(%esp)
xor    %eax,%eax
test   %esi,%esi
setne  %al
mov    %eax,0x4(%esp)
mov    0x68(%esp),%eax
mov    %eax,(%esp)
mov    0x60(%esp),%eax
call   8053d10 <__sprintf_chk@plt+0x95e0>
jmp    80541d0 <__sprintf_chk@plt+0x9aa0>
mov    $0xfffffff4,%edi
jmp    805415f <__sprintf_chk@plt+0x9a2f>
lea    -0x4c28(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x9a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xaa85,%ebx
mov    0x50(%esp),%edi
movl   $0x0,0x2c(%esp)
test   %eax,%eax
je     805438f <__sprintf_chk@plt+0x9c5f>
mov    %eax,0x4(%esp)
mov    0x40(%esp),%eax
lea    0x2c(%esp),%edx
mov    %edx,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8054ec0 <__sprintf_chk@plt+0xa790>
test   %eax,%eax
mov    %eax,%esi
js     805437a <__sprintf_chk@plt+0x9c4a>
mov    0x54(%esp),%eax
mov    %eax,0x10(%esp)
mov    %edi,%eax
movzbl %al,%edi
mov    0x4c(%esp),%eax
mov    %edi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8053f00 <__sprintf_chk@plt+0x97d0>
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x30,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x4c4c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0xe6,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x64(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa9c4,%ebx
mov    0x68(%esp),%esi
mov    0x70(%esp),%eax
mov    0x74(%esp),%ebp
test   %edi,%edi
je     80545df <__sprintf_chk@plt+0x9eaf>
movzbl %al,%eax
mov    0x7c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x6c(%esp),%eax
mov    %esi,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %eax,0xc(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8054300 <__sprintf_chk@plt+0x9bd0>
test   %eax,%eax
js     8054570 <__sprintf_chk@plt+0x9e40>
mov    0x60(%esp),%ecx
test   %ecx,%ecx
je     80545b5 <__sprintf_chk@plt+0x9e85>
mov    0x78(%esp),%edx
test   %edx,%edx
je     8054550 <__sprintf_chk@plt+0x9e20>
mov    0x6c(%esp),%eax
test   %eax,%eax
je     8054598 <__sprintf_chk@plt+0x9e68>
test   %esi,%esi
lea    -0x5f81(%ebx),%eax
cmove  %eax,%esi
xor    %edx,%edx
mov    $0xffffffff,%eax
divl   0x78(%esp)
mov    %esi,0x2c(%esp)
cmp    $0x3,%eax
jbe    80545a6 <__sprintf_chk@plt+0x9e76>
mov    0x78(%esp),%eax
shl    $0x2,%eax
mov    %eax,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,0x24(%esp)
je     80545a6 <__sprintf_chk@plt+0x9e76>
lea    0x3c(%esp),%eax
xor    %esi,%esi
movl   $0x0,0x28(%esp)
mov    %eax,0x20(%esp)
jmp    80544a9 <__sprintf_chk@plt+0x9d79>
nop
mov    %edi,(%esp)
add    $0x1,%esi
call   8049f50 <free@plt>
cmp    0x78(%esp),%esi
je     8054518 <__sprintf_chk@plt+0x9de8>
mov    0x20(%esp),%eax
movl   $0x0,0x3c(%esp)
mov    %eax,0x8(%esp)
mov    0x0(%ebp,%esi,4),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8055600 <__sprintf_chk@plt+0xaed0>
test   %eax,%eax
js     8054580 <__sprintf_chk@plt+0x9e50>
mov    0x64(%esp),%eax
mov    0x3c(%esp),%edi
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8050900 <__sprintf_chk@plt+0x61d0>
test   %eax,%eax
jne    8054498 <__sprintf_chk@plt+0x9d68>
mov    0x28(%esp),%edx
mov    0x24(%esp),%ecx
mov    %edx,%eax
add    $0x1,%eax
mov    %eax,0x28(%esp)
mov    0x0(%ebp,%esi,4),%eax
add    $0x1,%esi
mov    %eax,(%ecx,%edx,4)
mov    %edi,(%esp)
call   8049f50 <free@plt>
cmp    0x78(%esp),%esi
jne    80544a9 <__sprintf_chk@plt+0x9d79>
xchg   %ax,%ax
mov    0x7c(%esp),%eax
xor    %esi,%esi
mov    0x28(%esp),%edx
movl   $0x0,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
mov    0x24(%esp),%eax
call   8053b00 <__sprintf_chk@plt+0x93d0>
jmp    805455a <__sprintf_chk@plt+0x9e2a>
movl   $0x0,0x24(%esp)
xor    %esi,%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x4c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x4c,%esp
mov    %eax,%esi
pop    %ebx
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x3c(%esp),%edx
mov    %eax,0x20(%esp)
mov    %edx,(%esp)
call   8049f50 <free@plt>
mov    0x20(%esp),%eax
mov    %eax,%esi
jmp    805455a <__sprintf_chk@plt+0x9e2a>
call   804f4b0 <__sprintf_chk@plt+0x4d80>
mov    %eax,0x6c(%esp)
jmp    8054445 <__sprintf_chk@plt+0x9d15>
movl   $0x0,0x24(%esp)
mov    $0xfffffff4,%esi
jmp    805455a <__sprintf_chk@plt+0x9e2a>
lea    -0x4c72(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4ca0(%ebx),%eax
movl   $0xf4,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x4c62(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x118,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x40(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa775,%ebx
mov    0x4c(%esp),%edi
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
test   %eax,%eax
je     80546c7 <__sprintf_chk@plt+0x9f97>
lea    0x2c(%esp),%edx
mov    %edx,0x8(%esp)
lea    0x28(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8055990 <__sprintf_chk@plt+0xb260>
test   %eax,%eax
mov    %eax,%esi
js     80546a6 <__sprintf_chk@plt+0x9f76>
mov    0x58(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x14(%esp)
mov    %edi,%eax
movzbl %al,%edi
mov    0x48(%esp),%eax
mov    %edi,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   80543c0 <__sprintf_chk@plt+0x9c90>
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x30,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    -0x4c90(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4ccc(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4c95(%ebx),%eax
movl   $0x125,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa68d,%ebx
sub    $0x54,%esp
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
mov    0xb1c(%ebx),%eax
test   %eax,%eax
jle    8054740 <__sprintf_chk@plt+0xa010>
xor    %eax,%eax
mov    0x4c(%esp),%edx
xor    %gs:0x14,%edx
jne    8054892 <__sprintf_chk@plt+0xa162>
add    $0x54,%esp
pop    %ebx
pop    %esi
ret
nop
movl   $0x0,(%esp)
call   804a630 <isatty@plt>
test   %eax,%eax
je     8054726 <__sprintf_chk@plt+0x9ff6>
lea    0x38(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   804a5d0 <pipe2@plt>
test   %eax,%eax
js     8054840 <__sprintf_chk@plt+0xa110>
mov    0x3c(%esp),%eax
lea    0x41(%esp),%esi
mov    %esi,(%esp)
movl   $0xb,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
lea    -0x7405(%ebx),%eax
mov    %eax,0x10(%esp)
movl   $0xb,0x4(%esp)
call   8049e30 <__snprintf_chk@plt>
lea    -0x4c14(%ebx),%eax
mov    %eax,0x1c(%esp)
lea    -0x4c09(%ebx),%eax
mov    %eax,0x14(%esp)
lea    -0x4bfd(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %eax,0xc(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0xb1c(%ebx),%eax
mov    %esi,0x18(%esp)
movl   $0x0,0x20(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,(%esp)
movb   $0x0,0x4b(%esp)
call   804fe90 <__sprintf_chk@plt+0x5760>
mov    %eax,%esi
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
test   %esi,%esi
js     805484e <__sprintf_chk@plt+0xa11e>
mov    0x38(%esp),%eax
movl   $0xffffffff,0x8(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   804f850 <__sprintf_chk@plt+0x5120>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804e8a0 <__sprintf_chk@plt+0x4170>
mov    %esi,%eax
jmp    8054728 <__sprintf_chk@plt+0x9ff8>
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    8054728 <__sprintf_chk@plt+0x9ff8>
mov    %esi,%eax
neg    %eax
mov    %eax,(%esp)
call   804a270 <strerror@plt>
movl   $0x43,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x14(%esp)
lea    -0x4be8(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x4b99(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4bbc(%ebx),%eax
mov    %eax,0x4(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    8054829 <__sprintf_chk@plt+0xa0f9>
call   8057670 <__sprintf_chk@plt+0xcf40>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x82c,%esp
mov    0x840(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa4de,%ebx
mov    0x844(%esp),%edi
mov    %gs:0x14,%ecx
mov    %ecx,0x81c(%esp)
xor    %ecx,%ecx
test   %eax,%eax
je     80549cd <__sprintf_chk@plt+0xa29d>
test   %edi,%edi
je     80549a3 <__sprintf_chk@plt+0xa273>
lea    -0x4d63(%ebx),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804a100 <fopen64@plt>
test   %eax,%eax
mov    %eax,%esi
je     8054958 <__sprintf_chk@plt+0xa228>
lea    0x1c(%esp),%ebp
mov    %eax,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %ebp,(%esp)
call   8049f90 <fgets@plt>
test   %eax,%eax
je     8054968 <__sprintf_chk@plt+0xa238>
mov    %ebp,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8054997 <__sprintf_chk@plt+0xa267>
mov    %eax,(%esp)
call   804ece0 <__sprintf_chk@plt+0x45b0>
mov    %ebp,(%edi)
xor    %edi,%edi
mov    %esi,(%esp)
call   8049fd0 <fclose@plt>
mov    0x81c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %edi,%eax
jne    805499e <__sprintf_chk@plt+0xa26e>
add    $0x82c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   804a430 <__errno_location@plt>
mov    (%eax),%edi
neg    %edi
jmp    8054939 <__sprintf_chk@plt+0xa209>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   8049f80 <ferror@plt>
test   %eax,%eax
je     8054990 <__sprintf_chk@plt+0xa260>
call   804a430 <__errno_location@plt>
mov    $0xfffffffb,%edi
mov    (%eax),%eax
mov    %eax,%edx
neg    %edx
test   %eax,%eax
cmovne %edx,%edi
jmp    8054931 <__sprintf_chk@plt+0xa201>
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x1c(%esp)
jmp    8054917 <__sprintf_chk@plt+0xa1e7>
mov    $0xfffffff4,%edi
jmp    8054931 <__sprintf_chk@plt+0xa201>
call   8057670 <__sprintf_chk@plt+0xcf40>
lea    -0x4b4c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b87(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x7502(%ebx),%eax
movl   $0x60,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x4b4c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b87(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5f61(%ebx),%eax
movl   $0x5f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa388,%ebx
test   %eax,%eax
mov    0x40(%esp),%edi
je     8054ad0 <__sprintf_chk@plt+0xa3a0>
test   %edx,%edx
setne  %cl
test   %edi,%edi
mov    %ecx,%esi
setne  %cl
mov    %ecx,%ebp
mov    %esi,%ecx
test   %cl,%cl
jne    8054a68 <__sprintf_chk@plt+0xa338>
mov    %ebp,%edx
test   %dl,%dl
je     8054af0 <__sprintf_chk@plt+0xa3c0>
movl   $0x0,0x10(%esp)
mov    %edi,0xc(%esp)
lea    -0x5bd3(%ebx),%edx
mov    %eax,0x4(%esp)
lea    -0x4b39(%ebx),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,%esi
jmp    8054ab2 <__sprintf_chk@plt+0xa382>
mov    %ebp,%ecx
test   %cl,%cl
jne    8054a80 <__sprintf_chk@plt+0xa350>
movl   $0x0,0x10(%esp)
mov    %edx,0xc(%esp)
jmp    8054a48 <__sprintf_chk@plt+0xa318>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x5bd3(%ebx),%ecx
mov    %eax,0x4(%esp)
lea    -0x4b39(%ebx),%eax
movl   $0x0,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,%esi
test   %esi,%esi
je     8054b30 <__sprintf_chk@plt+0xa400>
mov    %esi,(%esp)
call   8050890 <__sprintf_chk@plt+0x6160>
mov    0x44(%esp),%eax
mov    %esi,(%eax)
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
test   %edx,%edx
mov    $0xffffffea,%eax
je     8054ac6 <__sprintf_chk@plt+0xa396>
test   %edi,%edi
jne    8054b08 <__sprintf_chk@plt+0xa3d8>
mov    %edx,(%esp)
call   804a410 <__strdup@plt>
mov    %eax,%esi
jmp    8054ab2 <__sprintf_chk@plt+0xa382>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
lea    -0x4b39(%ebx),%eax
mov    %eax,(%esp)
call   804f080 <__sprintf_chk@plt+0x4950>
mov    %eax,%esi
jmp    8054ab2 <__sprintf_chk@plt+0xa382>
xchg   %ax,%ax
lea    -0x5bd3(%ebx),%eax
movl   $0x0,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,%esi
jmp    8054ab2 <__sprintf_chk@plt+0xa382>
lea    0x0(%esi),%esi
mov    $0xfffffff4,%eax
jmp    8054ac6 <__sprintf_chk@plt+0xa396>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa244,%ebx
mov    0x44(%esp),%edi
test   %esi,%esi
je     8054bdd <__sprintf_chk@plt+0xa4ad>
test   %edi,%edi
je     8054c07 <__sprintf_chk@plt+0xa4d7>
call   804a430 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebp
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x5cf2(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a350 <fscanf@plt>
cmp    $0x1,%eax
je     8054bb8 <__sprintf_chk@plt+0xa488>
mov    %esi,(%esp)
call   804a2e0 <feof@plt>
mov    %eax,%edx
xor    %eax,%eax
test   %edx,%edx
jne    8054bad <__sprintf_chk@plt+0xa47d>
mov    0x0(%ebp),%edx
mov    %edx,%eax
neg    %eax
test   %edx,%edx
je     8054bd0 <__sprintf_chk@plt+0xa4a0>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%esp),%edx
test   %edx,%edx
je     8054bd0 <__sprintf_chk@plt+0xa4a0>
mov    %edx,(%edi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x2c,%esp
mov    $0xfffffffb,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x48d4(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e73(%ebx),%eax
movl   $0xb6,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x48d4(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x61c5(%ebx),%eax
movl   $0xb7,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa144,%ebx
test   %edx,%edx
je     8054d29 <__sprintf_chk@plt+0xa5f9>
mov    0x34(%esp),%eax
test   %eax,%eax
je     8054cff <__sprintf_chk@plt+0xa5cf>
call   804a430 <__errno_location@plt>
mov    %eax,%edi
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%eax
movl   $0x0,(%edi)
mov    %eax,(%esp)
call   804a5e0 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     8054cd8 <__sprintf_chk@plt+0xa5a8>
lea    0x13(%eax),%ebp
mov    %ebp,(%esp)
call   804f0d0 <__sprintf_chk@plt+0x49a0>
test   %al,%al
jne    8054c78 <__sprintf_chk@plt+0xa548>
cmpb   $0x4,0x12(%esi)
jne    8054c78 <__sprintf_chk@plt+0xa548>
cmpb   $0x2e,0x13(%esi)
jne    8054cb8 <__sprintf_chk@plt+0xa588>
movzbl 0x14(%esi),%eax
test   %al,%al
je     8054c78 <__sprintf_chk@plt+0xa548>
cmp    $0x2e,%al
je     8054cf0 <__sprintf_chk@plt+0xa5c0>
nop
mov    %ebp,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
je     8054cf8 <__sprintf_chk@plt+0xa5c8>
mov    0x34(%esp),%edx
mov    %eax,(%edx)
mov    $0x1,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    (%edi),%edx
xor    %eax,%eax
mov    %edx,%ecx
neg    %ecx
test   %edx,%edx
cmovg  %ecx,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x0,0x15(%esi)
je     8054c78 <__sprintf_chk@plt+0xa548>
jmp    8054cb8 <__sprintf_chk@plt+0xa588>
mov    $0xfffffff4,%eax
jmp    8054ccf <__sprintf_chk@plt+0xa59f>
lea    -0x48fc(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5f61(%ebx),%eax
movl   $0xe2,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x48fc(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5dba(%ebx),%eax
movl   $0xe1,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0xa024,%ebx
test   %ebp,%ebp
je     8054dbd <__sprintf_chk@plt+0xa68d>
mov    $0xd,%ecx
mov    %ebp,%esi
lea    -0x4b06(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
lea    -0x4b01(%ebx),%edx
seta   %cl
setb   %al
cmp    %al,%cl
je     8054db3 <__sprintf_chk@plt+0xa683>
lea    -0x4af9(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
lea    0x5(%ebp),%edx
test   %eax,%eax
cmove  %ebp,%edx
add    $0x1c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x4911(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4ca0(%ebx),%eax
movl   $0x247,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9f94,%ebx
mov    0x34(%esp),%eax
test   %edi,%edi
je     8054e80 <__sprintf_chk@plt+0xa750>
test   %al,%al
jne    8054e60 <__sprintf_chk@plt+0xa730>
movsbl (%edi),%eax
cmp    $0x5f,%al
sete   %cl
test   %al,%al
sete   %dl
or     %dl,%cl
mov    %cl,0xf(%esp)
jne    8054e80 <__sprintf_chk@plt+0xa750>
mov    %edi,%ebp
lea    -0x4a28(%ebx),%esi
jmp    8054e43 <__sprintf_chk@plt+0xa713>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebp
movsbl 0x0(%ebp),%eax
test   %al,%al
je     8054e98 <__sprintf_chk@plt+0xa768>
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a340 <strchr@plt>
test   %eax,%eax
jne    8054e38 <__sprintf_chk@plt+0xa708>
movzbl 0xf(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x4af9(%ebx),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
cmovne %eax,%edi
jmp    8054e12 <__sprintf_chk@plt+0xa6e2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0xf(%esp)
movzbl 0xf(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%edx
sub    %edi,%edx
cmp    $0x1000,%edx
setle  0xf(%esp)
movzbl 0xf(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x4c(%esp),%edi
mov    0x44(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9ec0,%ebx
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebp
test   %edi,%edi
mov    %eax,0x18(%esp)
je     8054f4d <__sprintf_chk@plt+0xa81d>
test   %esi,%esi
je     8054f02 <__sprintf_chk@plt+0xa7d2>
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8054df0 <__sprintf_chk@plt+0xa6c0>
test   %al,%al
je     8054f40 <__sprintf_chk@plt+0xa810>
mov    %gs:0x0,%eax
sub    $0x1,%eax
cmpb   $0x0,(%eax)
mov    %eax,0x1c(%esp)
je     8054f77 <__sprintf_chk@plt+0xa847>
xor    %eax,%eax
test   %esi,%esi
je     8054f25 <__sprintf_chk@plt+0xa7f5>
mov    %esi,(%esp)
call   8054d60 <__sprintf_chk@plt+0xa630>
mov    %edi,0x44(%esp)
mov    0x18(%esp),%edx
mov    %ebp,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8054a00 <__sprintf_chk@plt+0xa2d0>
lea    0x0(%esi),%esi
mov    $0xffffffea,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x491d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4aa9(%ebx),%eax
movl   $0x273,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x4aa6(%ebx),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8050cd0 <__sprintf_chk@plt+0x65a0>
cmp    $0x0,%eax
mov    %eax,%edx
jle    8054fa0 <__sprintf_chk@plt+0xa870>
mov    0x1c(%esp),%eax
movb   $0x1,(%eax)
jmp    8054f17 <__sprintf_chk@plt+0xa7e7>
mov    $0xfffffffe,%eax
cmovne %edx,%eax
jmp    8054f45 <__sprintf_chk@plt+0xa815>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9dd4,%ebx
mov    0x50(%esp),%esi
movl   $0x0,0x2c(%esp)
test   %edx,%edx
je     805519b <__sprintf_chk@plt+0xaa6b>
call   8055d50 <__sprintf_chk@plt+0xb620>
test   %al,%al
je     8055110 <__sprintf_chk@plt+0xa9e0>
test   %esi,%esi
je     805516e <__sprintf_chk@plt+0xaa3e>
mov    %esi,(%esp)
call   8054d60 <__sprintf_chk@plt+0xa630>
mov    0x54(%esp),%ecx
lea    -0x4b0c(%ebx),%edx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8055f50 <__sprintf_chk@plt+0xb820>
mov    %eax,%edi
call   8055f00 <__sprintf_chk@plt+0xb7d0>
test   %edi,%edi
je     8055108 <__sprintf_chk@plt+0xa9d8>
movl   $0x1e,(%esp)
call   804a230 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8055108 <__sprintf_chk@plt+0xa9d8>
movl   $0x706d742f,(%eax)
movl   $0x67632e2f,0x4(%eax)
movl   $0x616e616d,0x8(%eax)
movl   $0x2d726567,0xc(%eax)
movl   $0x69676f6c,0x10(%eax)
movl   $0x582e646e,0x14(%eax)
movl   $0x58585858,0x18(%eax)
mov    $0x58,%eax
mov    %ax,0x1c(%ebp)
mov    %ebp,(%esp)
call   804a1f0 <mkstemp64@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     80550f9 <__sprintf_chk@plt+0xa9c9>
lea    -0x4a97(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804a2b0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     805517d <__sprintf_chk@plt+0xaa4d>
mov    %ebp,(%esp)
call   804a090 <unlink@plt>
mov    %ebp,(%esp)
call   8049f50 <free@plt>
mov    %edi,(%esp)
call   804a360 <strlen@plt>
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804a390 <write@plt>
mov    %esi,(%esp)
call   8049f00 <fflush@plt>
mov    %esi,(%esp)
call   804a060 <rewind@plt>
mov    0x58(%esp),%eax
mov    %esi,(%eax)
xor    %esi,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %ebp,(%esp)
call   8049f50 <free@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%esi
jmp    80550e3 <__sprintf_chk@plt+0xa9b3>
nop
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x4b0c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8054ec0 <__sprintf_chk@plt+0xa790>
test   %eax,%eax
mov    %eax,%esi
js     80550e3 <__sprintf_chk@plt+0xa9b3>
lea    -0x4d63(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804a100 <fopen64@plt>
test   %eax,%eax
je     8055160 <__sprintf_chk@plt+0xaa30>
mov    0x58(%esp),%edx
xor    %esi,%esi
mov    %eax,(%edx)
jmp    80550e3 <__sprintf_chk@plt+0xa9b3>
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
neg    %esi
jmp    80550e3 <__sprintf_chk@plt+0xa9b3>
call   8055f00 <__sprintf_chk@plt+0xb7d0>
mov    $0xffffffff,%esi
jmp    80550e3 <__sprintf_chk@plt+0xa9b3>
mov    0x1c(%esp),%eax
mov    $0xffffffff,%esi
mov    %eax,(%esp)
call   804a6b0 <close@plt>
mov    %ebp,(%esp)
call   8049f50 <free@plt>
jmp    80550e3 <__sprintf_chk@plt+0xa9b3>
lea    -0x48c8(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e74(%ebx),%eax
movl   $0x76,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9bb4,%ebx
movzbl 0x48(%esp),%esi
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
test   %eax,%eax
je     8055282 <__sprintf_chk@plt+0xab52>
mov    %eax,0x4(%esp)
mov    0x40(%esp),%eax
lea    0x18(%esp),%edx
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8054fb0 <__sprintf_chk@plt+0xa880>
test   %eax,%eax
js     8055268 <__sprintf_chk@plt+0xab38>
call   804a1b0 <getpid@plt>
lea    0x1c(%esp),%edi
mov    %eax,%ebp
mov    0x18(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8054b40 <__sprintf_chk@plt+0xa410>
cmp    $0x0,%eax
jle    8055278 <__sprintf_chk@plt+0xab48>
mov    %esi,%eax
test   %al,%al
je     805524b <__sprintf_chk@plt+0xab1b>
cmp    %ebp,0x1c(%esp)
je     805522a <__sprintf_chk@plt+0xaafa>
xor    %esi,%esi
mov    0x18(%esp),%eax
test   %eax,%eax
je     805525d <__sprintf_chk@plt+0xab2d>
mov    %eax,(%esp)
call   8049fd0 <fclose@plt>
add    $0x2c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    $0x1,%esi
cmp    $0xfffffffe,%eax
cmovne %eax,%esi
jmp    805524d <__sprintf_chk@plt+0xab1d>
lea    0x0(%esi),%esi
mov    $0x1,%esi
cmovne %eax,%esi
jmp    805524d <__sprintf_chk@plt+0xab1d>
lea    -0x4939(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x463,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x38(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9ad5,%ebx
movl   $0x0,0x1c(%esp)
test   %edi,%edi
je     8055333 <__sprintf_chk@plt+0xac03>
lea    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8054ec0 <__sprintf_chk@plt+0xa790>
test   %eax,%eax
mov    %eax,%esi
js     805530f <__sprintf_chk@plt+0xabdf>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804a6e0 <opendir@plt>
test   %eax,%eax
je     8055328 <__sprintf_chk@plt+0xabf8>
mov    %eax,(%edi)
xor    %esi,%esi
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
add    $0x20,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
neg    %esi
jmp    805530f <__sprintf_chk@plt+0xabdf>
lea    -0x48eb(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x619f(%ebx),%eax
movl   $0xce,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9a24,%ebx
mov    0x58(%esp),%eax
movl   $0x0,0x24(%esp)
movl   $0x0,0x2c(%esp)
test   %edx,%edx
je     80555d5 <__sprintf_chk@plt+0xaea5>
movzbl %al,%edi
mov    0x54(%esp),%eax
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   80551d0 <__sprintf_chk@plt+0xaaa0>
test   %eax,%eax
mov    %eax,%esi
jle    80554a0 <__sprintf_chk@plt+0xad70>
call   8055d50 <__sprintf_chk@plt+0xb620>
test   %al,%al
xchg   %ax,%ax
je     80554c0 <__sprintf_chk@plt+0xad90>
mov    0x50(%esp),%eax
test   %eax,%eax
je     80555c6 <__sprintf_chk@plt+0xae96>
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   8054d60 <__sprintf_chk@plt+0xa630>
mov    0x54(%esp),%ecx
lea    0x2c(%esp),%edx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8056040 <__sprintf_chk@plt+0xb910>
mov    %eax,%esi
call   8055f00 <__sprintf_chk@plt+0xb7d0>
mov    %esi,%eax
test   %al,%al
je     80555bc <__sprintf_chk@plt+0xae8c>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     8055590 <__sprintf_chk@plt+0xae60>
mov    (%edx),%eax
test   %eax,%eax
je     8055570 <__sprintf_chk@plt+0xae40>
lea    -0x5bd3(%ebx),%ecx
mov    $0x4,%esi
mov    %ecx,0x1c(%esp)
jmp    8055447 <__sprintf_chk@plt+0xad17>
xchg   %ax,%ax
call   8049f50 <free@plt>
mov    0x2c(%esp),%edx
mov    (%edx,%esi,1),%eax
add    $0x4,%esi
test   %eax,%eax
je     8055570 <__sprintf_chk@plt+0xae40>
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x4(%esp)
mov    0x54(%esp),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %edi,0x8(%esp)
mov    %eax,%ebp
mov    %eax,0x4(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   8055360 <__sprintf_chk@plt+0xac30>
mov    %ebp,(%esp)
test   %eax,%eax
je     8055430 <__sprintf_chk@plt+0xad00>
call   8049f50 <free@plt>
mov    0x2c(%esp),%eax
mov    $0xffffffff,%esi
mov    %eax,(%esp)
call   804a4c0 <nih_free@plt>
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
test   %eax,%eax
je     80554b0 <__sprintf_chk@plt+0xad80>
mov    %eax,(%esp)
call   804a6c0 <closedir@plt>
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
lea    0x28(%esp),%esi
mov    %eax,0x4(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   80552b0 <__sprintf_chk@plt+0xab80>
lea    -0x5bd3(%ebx),%ecx
mov    %ecx,0x1c(%esp)
test   %eax,%eax
jns    805554e <__sprintf_chk@plt+0xae1e>
jmp    8055582 <__sprintf_chk@plt+0xae52>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x54(%esp),%eax
mov    %eax,(%esp)
call   804fae0 <__sprintf_chk@plt+0x53b0>
mov    %eax,%ebp
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %ebp,%ebp
je     80555a0 <__sprintf_chk@plt+0xae70>
mov    0x50(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8055360 <__sprintf_chk@plt+0xac30>
test   %eax,%eax
jle    80555b8 <__sprintf_chk@plt+0xae88>
mov    %ebp,(%esp)
call   8049f50 <free@plt>
mov    0x24(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8054c40 <__sprintf_chk@plt+0xa510>
cmp    $0x0,%eax
jg     80554f8 <__sprintf_chk@plt+0xadc8>
je     8055590 <__sprintf_chk@plt+0xae60>
mov    %eax,%esi
jmp    80554a0 <__sprintf_chk@plt+0xad70>
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%esp)
mov    $0x1,%esi
call   804a4c0 <nih_free@plt>
jmp    80554a0 <__sprintf_chk@plt+0xad70>
cmp    $0xfffffffe,%eax
mov    %eax,%esi
jne    80554a0 <__sprintf_chk@plt+0xad70>
lea    0x0(%esi),%esi
mov    $0x1,%esi
jmp    80554a0 <__sprintf_chk@plt+0xad70>
lea    0x0(%esi),%esi
mov    $0xfffffff4,%esi
mov    %ebp,(%esp)
call   8049f50 <free@plt>
jmp    80554a0 <__sprintf_chk@plt+0xad70>
lea    0x0(%esi),%esi
mov    %eax,%esi
jmp    80555a5 <__sprintf_chk@plt+0xae75>
mov    $0xffffffff,%esi
jmp    80554a0 <__sprintf_chk@plt+0xad70>
call   8055f00 <__sprintf_chk@plt+0xb7d0>
mov    $0xffffffff,%esi
jmp    80554a0 <__sprintf_chk@plt+0xad70>
lea    -0x494f(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x491,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x85c,%esp
mov    0x10(%ebp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9780,%ebx
mov    0x8(%ebp),%edi
mov    %gs:0x14,%ecx
mov    %ecx,-0x1c(%ebp)
xor    %ecx,%ecx
mov    0xc(%ebp),%esi
test   %eax,%eax
mov    %eax,-0x854(%ebp)
je     805595d <__sprintf_chk@plt+0xb22d>
test   %esi,%esi
js     8055933 <__sprintf_chk@plt+0xb203>
test   %edi,%edi
je     805588b <__sprintf_chk@plt+0xb15b>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8054df0 <__sprintf_chk@plt+0xa6c0>
test   %al,%al
je     805591f <__sprintf_chk@plt+0xb1ef>
mov    %edi,(%esp)
lea    -0x4a72(%ebx),%edi
call   8054d60 <__sprintf_chk@plt+0xa630>
test   %esi,%esi
mov    %eax,-0x840(%ebp)
jne    80558a5 <__sprintf_chk@plt+0xb175>
lea    -0x4d63(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804a100 <fopen64@plt>
test   %eax,%eax
mov    %eax,-0x84c(%ebp)
je     80558fa <__sprintf_chk@plt+0xb1ca>
mov    -0x840(%ebp),%eax
mov    %eax,(%esp)
call   804a360 <strlen@plt>
mov    %eax,%edi
lea    -0x81c(%ebp),%eax
mov    %eax,-0x848(%ebp)
lea    -0x4a4f(%ebx),%eax
mov    %eax,-0x830(%ebp)
mov    -0x84c(%ebp),%eax
movl   $0x800,0x4(%esp)
mov    %eax,0x8(%esp)
mov    -0x848(%ebp),%eax
mov    %eax,(%esp)
call   8049f90 <fgets@plt>
test   %eax,%eax
je     80558da <__sprintf_chk@plt+0xb1aa>
mov    -0x848(%ebp),%esi
mov    %esi,(%esp)
call   804ece0 <__sprintf_chk@plt+0x45b0>
movl   $0x3a,0x4(%esp)
mov    %esi,(%esp)
call   804a340 <strchr@plt>
test   %eax,%eax
je     80556c6 <__sprintf_chk@plt+0xaf96>
add    $0x1,%eax
movl   $0x3a,0x4(%esp)
mov    %eax,%esi
mov    %eax,(%esp)
mov    %eax,-0x82c(%ebp)
call   804a340 <strchr@plt>
test   %eax,%eax
mov    %eax,-0x850(%ebp)
je     80556c6 <__sprintf_chk@plt+0xaf96>
movb   $0x0,(%eax)
lea    -0x820(%ebp),%eax
mov    %eax,-0x838(%ebp)
mov    %eax,0xc(%esp)
mov    -0x830(%ebp),%eax
mov    %esi,(%esp)
movl   $0x0,-0x820(%ebp)
00
mov    %eax,0x8(%esp)
lea    -0x824(%ebp),%eax
mov    %eax,0x4(%esp)
mov    %eax,-0x834(%ebp)
call   804ec70 <__sprintf_chk@plt+0x4540>
test   %eax,%eax
mov    %eax,%esi
je     80556c6 <__sprintf_chk@plt+0xaf96>
lea    -0x4af9(%ebx),%eax
mov    %eax,-0x844(%ebp)
jmp    8055808 <__sprintf_chk@plt+0xb0d8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x5(%edi),%eax
cmp    %eax,%edx
jne    80557d2 <__sprintf_chk@plt+0xb0a2>
mov    -0x844(%ebp),%eax
movl   $0x5,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049fe0 <memcmp@plt>
test   %eax,%eax
jne    80557d2 <__sprintf_chk@plt+0xb0a2>
mov    -0x840(%ebp),%eax
lea    0x5(%esi),%ecx
mov    %edi,0x8(%esp)
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   8049fe0 <memcmp@plt>
test   %eax,%eax
je     8055840 <__sprintf_chk@plt+0xb110>
mov    -0x838(%ebp),%eax
mov    %eax,0xc(%esp)
mov    -0x830(%ebp),%eax
mov    %eax,0x8(%esp)
mov    -0x834(%ebp),%eax
mov    %eax,0x4(%esp)
mov    -0x82c(%ebp),%eax
mov    %eax,(%esp)
call   804ec70 <__sprintf_chk@plt+0x4540>
test   %eax,%eax
mov    %eax,%esi
je     80556c6 <__sprintf_chk@plt+0xaf96>
mov    -0x824(%ebp),%edx
cmp    %edi,%edx
jne    8055790 <__sprintf_chk@plt+0xb060>
mov    -0x840(%ebp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %edx,-0x83c(%ebp)
mov    %eax,0x4(%esp)
call   8049fe0 <memcmp@plt>
mov    -0x83c(%ebp),%edx
test   %eax,%eax
jne    8055790 <__sprintf_chk@plt+0xb060>
mov    -0x850(%ebp),%eax
add    $0x1,%eax
mov    %eax,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
je     8055915 <__sprintf_chk@plt+0xb1e5>
mov    -0x854(%ebp),%ecx
xor    %esi,%esi
mov    %eax,(%ecx)
mov    -0x84c(%ebp),%eax
mov    %eax,(%esp)
call   8049fd0 <fclose@plt>
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    8055987 <__sprintf_chk@plt+0xb257>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x4b06(%ebx),%eax
test   %esi,%esi
mov    %eax,-0x840(%ebp)
lea    -0x4a72(%ebx),%edi
je     805567e <__sprintf_chk@plt+0xaf4e>
sub    $0x30,%esp
lea    0x23(%esp),%edi
and    $0xfffffff0,%edi
lea    -0x4a60(%ebx),%eax
mov    %esi,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804a730 <__sprintf_chk@plt>
jmp    805567e <__sprintf_chk@plt+0xaf4e>
mov    -0x84c(%ebp),%eax
mov    %eax,(%esp)
call   8049f80 <ferror@plt>
test   %eax,%eax
je     8055929 <__sprintf_chk@plt+0xb1f9>
call   804a430 <__errno_location@plt>
mov    (%eax),%esi
neg    %esi
jmp    8055863 <__sprintf_chk@plt+0xb133>
call   804a430 <__errno_location@plt>
mov    $0xfffffffd,%esi
mov    (%eax),%eax
mov    %eax,%edx
neg    %edx
cmp    $0x2,%eax
cmovne %edx,%esi
jmp    8055871 <__sprintf_chk@plt+0xb141>
mov    $0xfffffff4,%esi
jmp    8055863 <__sprintf_chk@plt+0xb133>
mov    $0xffffffea,%esi
jmp    8055871 <__sprintf_chk@plt+0xb141>
mov    $0xfffffffe,%esi
jmp    8055863 <__sprintf_chk@plt+0xb133>
lea    -0x492d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x619c(%ebx),%eax
movl   $0x3e6,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x492d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x3e5,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
call   8057670 <__sprintf_chk@plt+0xcf40>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x93f4,%ebx
test   %edi,%edi
je     8055bd4 <__sprintf_chk@plt+0xb4a4>
cmpb   $0x2f,(%edi)
je     8055a90 <__sprintf_chk@plt+0xb360>
movl   $0x3a,0x4(%esp)
mov    %edi,(%esp)
call   804a340 <strchr@plt>
test   %eax,%eax
mov    %eax,%esi
je     8055ae0 <__sprintf_chk@plt+0xb3b0>
sub    %edi,%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804a0b0 <__strndup@plt>
test   %eax,%eax
mov    %eax,%edi
je     8055ba8 <__sprintf_chk@plt+0xb478>
mov    %eax,(%esp)
call   8054d60 <__sprintf_chk@plt+0xa630>
mov    %eax,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8055bb8 <__sprintf_chk@plt+0xb488>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8054df0 <__sprintf_chk@plt+0xa6c0>
test   %al,%al
je     8055b80 <__sprintf_chk@plt+0xb450>
add    $0x1,%esi
mov    %esi,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     8055bc2 <__sprintf_chk@plt+0xb492>
mov    %eax,(%esp)
call   8050130 <__sprintf_chk@plt+0x5a00>
test   %al,%al
je     8055b40 <__sprintf_chk@plt+0xb410>
mov    %esi,(%esp)
call   80506e0 <__sprintf_chk@plt+0x5fb0>
test   %al,%al
je     8055b40 <__sprintf_chk@plt+0xb410>
mov    %esi,(%esp)
call   8050890 <__sprintf_chk@plt+0x6160>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8055b70 <__sprintf_chk@plt+0xb440>
mov    0x34(%esp),%eax
mov    %ebp,(%eax)
mov    0x38(%esp),%eax
test   %eax,%eax
je     8055b60 <__sprintf_chk@plt+0xb430>
mov    0x38(%esp),%eax
mov    %esi,(%eax)
xor    %esi,%esi
mov    %edi,(%esp)
call   8049f50 <free@plt>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,(%esp)
call   8050130 <__sprintf_chk@plt+0x5a00>
test   %al,%al
je     8055b98 <__sprintf_chk@plt+0xb468>
mov    0x38(%esp),%ebp
test   %ebp,%ebp
je     8055ac8 <__sprintf_chk@plt+0xb398>
mov    %edi,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     8055ba8 <__sprintf_chk@plt+0xb478>
mov    %eax,(%esp)
call   8050890 <__sprintf_chk@plt+0x6160>
mov    0x38(%esp),%eax
mov    %esi,(%eax)
mov    0x34(%esp),%edi
test   %edi,%edi
je     8055ada <__sprintf_chk@plt+0xb3aa>
mov    0x34(%esp),%eax
movl   $0x0,(%eax)
xor    %edi,%edi
xor    %esi,%esi
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8054df0 <__sprintf_chk@plt+0xa6c0>
test   %al,%al
je     8055b98 <__sprintf_chk@plt+0xb468>
mov    0x34(%esp),%esi
test   %esi,%esi
je     8055b1e <__sprintf_chk@plt+0xb3ee>
mov    %edi,(%esp)
call   8054d60 <__sprintf_chk@plt+0xa630>
mov    %eax,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
je     8055ba8 <__sprintf_chk@plt+0xb478>
mov    0x34(%esp),%edx
mov    %eax,(%edx)
mov    0x38(%esp),%ecx
test   %ecx,%ecx
je     8055ada <__sprintf_chk@plt+0xb3aa>
mov    0x38(%esp),%eax
xor    %edi,%edi
xor    %esi,%esi
movl   $0x0,(%eax)
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   8049f50 <free@plt>
mov    %esi,(%esp)
mov    $0xffffffea,%esi
call   8049f50 <free@plt>
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    0x0(%esi),%esi
mov    %esi,(%esp)
xor    %esi,%esi
call   8049f50 <free@plt>
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
nop
mov    %ebp,(%esp)
call   8049f50 <free@plt>
jmp    8055a6a <__sprintf_chk@plt+0xb33a>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    $0xffffffea,%esi
call   8049f50 <free@plt>
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    0x0(%esi),%esi
xor    %edi,%edi
mov    $0xffffffea,%esi
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    0x0(%esi,%eiz,1),%esi
xor    %edi,%edi
mov    $0xfffffff4,%esi
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xfffffff4,%esi
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
mov    %ebp,(%esp)
mov    $0xfffffff4,%esi
call   8049f50 <free@plt>
jmp    8055a7e <__sprintf_chk@plt+0xb34e>
lea    -0x495d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4c95(%ebx),%eax
movl   $0x4db,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x9185,%ebx
mov    0x34(%esp),%edi
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
test   %esi,%esi
je     8055d24 <__sprintf_chk@plt+0xb5f4>
test   %edi,%edi
je     8055cfa <__sprintf_chk@plt+0xb5ca>
lea    -0x4aa6(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8050900 <__sprintf_chk@plt+0x61d0>
test   %eax,%eax
je     8055c90 <__sprintf_chk@plt+0xb560>
mov    %esi,(%esp)
call   804a410 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     8055cf0 <__sprintf_chk@plt+0xb5c0>
mov    %eax,(%esp)
call   8050890 <__sprintf_chk@plt+0x6160>
mov    %esi,(%edi)
xor    %esi,%esi
mov    0x1c(%esp),%edx
mov    %edx,(%esp)
call   8049f50 <free@plt>
mov    0x18(%esp),%edx
mov    %edx,(%esp)
call   8049f50 <free@plt>
add    $0x20,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x18(%esp),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8055990 <__sprintf_chk@plt+0xb260>
test   %eax,%eax
js     8055ce8 <__sprintf_chk@plt+0xb5b8>
mov    0x1c(%esp),%eax
lea    -0x5bd3(%ebx),%edx
mov    0x18(%esp),%ecx
mov    %edi,0xc(%esp)
movl   $0x0,0x8(%esp)
test   %eax,%eax
cmovne %eax,%edx
test   %ecx,%ecx
lea    -0x4b06(%ebx),%eax
cmovne %ecx,%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8054ec0 <__sprintf_chk@plt+0xa790>
mov    %eax,%esi
jmp    8055c6d <__sprintf_chk@plt+0xb53d>
xchg   %ax,%ax
mov    %eax,%esi
jmp    8055c6d <__sprintf_chk@plt+0xb53d>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xfffffff4,%esi
jmp    8055c6d <__sprintf_chk@plt+0xb53d>
lea    -0x496c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4a36(%ebx),%eax
movl   $0x54a,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x496c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4b29(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5e6b(%ebx),%eax
movl   $0x549,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x903c,%ebx
sub    $0x30,%esp
lea    0x20(%esp),%edi
mov    %edi,(%esp)
call   8049f30 <dbus_error_init@plt>
lea    -0x48b4(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804a3b0 <dbus_connection_open_private@plt>
test   %eax,%eax
mov    %eax,%esi
je     8055e90 <__sprintf_chk@plt+0xb760>
mov    %eax,(%esp)
movl   $0x0,0x4(%esp)
call   8049ea0 <dbus_connection_set_exit_on_disconnect@plt>
mov    %edi,(%esp)
call   804a240 <dbus_error_free@plt>
lea    -0x488c(%ebx),%eax
movl   $0x0,0x14(%esp)
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x0,(%esp)
call   8049e10 <nih_dbus_proxy_new@plt>
mov    %esi,(%esp)
mov    %eax,0xb20(%ebx)
call   804a1c0 <dbus_connection_unref@plt>
mov    0xb20(%ebx),%eax
test   %eax,%eax
je     8055ea8 <__sprintf_chk@plt+0xb778>
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804a180 <cgmanager_ping_sync@plt>
mov    $0x1,%edx
test   %eax,%eax
jne    8055e20 <__sprintf_chk@plt+0xb6f0>
add    $0x30,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
call   804a5a0 <nih_error_get@plt>
mov    %eax,%esi
mov    0x10(%eax),%eax
movl   $0x44,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x14(%esp)
lea    -0x4848(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x45aa(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x45de(%ebx),%eax
mov    %eax,0x4(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    %esi,(%esp)
call   804a4c0 <nih_free@plt>
mov    0xb20(%ebx),%eax
mov    %eax,(%esp)
call   804a4c0 <nih_free@plt>
xor    %edx,%edx
movl   $0x0,0xb20(%ebx)
00
add    $0x30,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   804a240 <dbus_error_free@plt>
add    $0x30,%esp
xor    %edx,%edx
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804a5a0 <nih_error_get@plt>
mov    %eax,%esi
mov    0x10(%eax),%eax
movl   $0x3b,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x14(%esp)
lea    -0x486c(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x45aa(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x45de(%ebx),%eax
mov    %eax,0x4(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    %esi,(%esp)
call   804a4c0 <nih_free@plt>
xor    %edx,%edx
jmp    8055e10 <__sprintf_chk@plt+0xb6e0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8e8e,%ebx
sub    $0x18,%esp
mov    0xb20(%ebx),%eax
test   %eax,%eax
je     8055f4b <__sprintf_chk@plt+0xb81b>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804a700 <dbus_connection_flush@plt>
mov    0xb20(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804a550 <dbus_connection_close@plt>
mov    0xb20(%ebx),%eax
mov    %eax,(%esp)
call   804a4c0 <nih_free@plt>
movl   $0x0,0xb20(%ebx)
00
add    $0x18,%esp
pop    %ebx
ret
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8e32,%ebx
mov    0x50(%esp),%edi
movl   $0x0,0x2c(%esp)
cmpb   $0x2f,(%esi)
mov    %edi,0x8(%esp)
movl   $0x0,(%esp)
sete   %al
add    %eax,%esi
lea    0x2c(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x58(%esp),%eax
mov    %esi,0xc(%esp)
mov    %eax,0x10(%esp)
mov    0xb20(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a140 <cgmanager_get_value_sync@plt>
test   %eax,%eax
jne    8055fd8 <__sprintf_chk@plt+0xb8a8>
mov    0x2c(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
je     8055fd0 <__sprintf_chk@plt+0xb8a0>
mov    %edx,(%esp)
call   804a410 <__strdup@plt>
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804a4c0 <nih_free@plt>
mov    %esi,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804a5a0 <nih_error_get@plt>
mov    %eax,%ebp
mov    0x10(%eax),%eax
mov    %esi,0x18(%esp)
mov    %edi,0x14(%esp)
movl   $0x8d,0x8(%esp)
mov    %eax,0x1c(%esp)
lea    -0x4754(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x45b2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x45de(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    %ebp,(%esp)
call   804a4c0 <nih_free@plt>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804a4c0 <nih_free@plt>
xor    %eax,%eax
jmp    8055fd0 <__sprintf_chk@plt+0xb8a0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8d42,%ebx
mov    0x40(%esp),%edi
cmpb   $0x2f,(%esi)
mov    %edi,0x8(%esp)
movl   $0x0,(%esp)
sete   %al
add    %eax,%esi
mov    0x48(%esp),%eax
mov    %esi,0xc(%esp)
mov    %eax,0x10(%esp)
mov    0xb20(%ebx),%eax
mov    %eax,0x4(%esp)
call   8049e60 <cgmanager_list_children_sync@plt>
mov    $0x1,%edx
test   %eax,%eax
je     80560e5 <__sprintf_chk@plt+0xb9b5>
call   804a5a0 <nih_error_get@plt>
mov    %eax,%ebp
mov    0x10(%eax),%eax
mov    %esi,0x18(%esp)
mov    %edi,0x14(%esp)
movl   $0xcf,0x8(%esp)
mov    %eax,0x1c(%esp)
lea    -0x4674(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x45c4(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x45de(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    %ebp,(%esp)
call   804a4c0 <nih_free@plt>
xor    %edx,%edx
add    $0x2c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x3c,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8c96,%ebx
test   %eax,%eax
mov    %edx,0x2c(%esp)
je     805626a <__sprintf_chk@plt+0xbb3a>
movl   $0x1,(%esp)
call   8051020 <__sprintf_chk@plt+0x68f0>
mov    %eax,0x20(%esp)
add    $0x55d4a80,%eax
mov    %edx,%ebp
mov    %edx,0x24(%esp)
adc    $0x0,%edx
cmp    %ebp,%edx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
ja     805617a <__sprintf_chk@plt+0xba4a>
jae    8056170 <__sprintf_chk@plt+0xba40>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   804a660 <dbus_connection_get_is_connected@plt>
test   %eax,%eax
je     8056216 <__sprintf_chk@plt+0xbae6>
mov    %esi,(%esp)
call   8049f70 <dbus_connection_get_is_authenticated@plt>
test   %eax,%eax
je     8056240 <__sprintf_chk@plt+0xbb10>
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
cmp    %eax,0x18(%esp)
jb     8056140 <__sprintf_chk@plt+0xba10>
mov    0x20(%esp),%edx
mov    0x24(%esp),%ecx
lea    0x0(%esi),%esi
mov    %esi,(%esp)
mov    %edx,0x10(%esp)
mov    %ecx,0x14(%esp)
call   8049f70 <dbus_connection_get_is_authenticated@plt>
test   %eax,%eax
jne    8056140 <__sprintf_chk@plt+0xba10>
mov    0x10(%esp),%edx
mov    $0x55d4e67,%edi
xor    %ebp,%ebp
mov    0x14(%esp),%ecx
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
sub    %edx,%edi
sbb    %ecx,%ebp
mov    %edi,%eax
mov    %ebp,%edx
add    0x20(%esp),%eax
adc    0x24(%esp),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8057360 <__sprintf_chk@plt+0xcc30>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804a6a0 <dbus_connection_read_write_dispatch@plt>
test   %eax,%eax
je     8056140 <__sprintf_chk@plt+0xba10>
movl   $0x1,(%esp)
call   8051020 <__sprintf_chk@plt+0x68f0>
mov    %edx,%ecx
mov    %eax,%edx
cmp    %ecx,0x1c(%esp)
jb     8056140 <__sprintf_chk@plt+0xba10>
ja     8056188 <__sprintf_chk@plt+0xba58>
cmp    %eax,0x18(%esp)
jb     8056140 <__sprintf_chk@plt+0xba10>
jmp    8056188 <__sprintf_chk@plt+0xba58>
lea    -0x4398(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x4368(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804a110 <dbus_set_error_const@plt>
mov    $0xffffff91,%eax
jmp    8056162 <__sprintf_chk@plt+0xba32>
lea    -0x4344(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x4324(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804a110 <dbus_set_error_const@plt>
mov    $0xfffffff3,%eax
jmp    8056162 <__sprintf_chk@plt+0xba32>
lea    -0x3c56(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4565(%ebx),%eax
movl   $0x44,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x44,%esp
mov    0x50(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8ae6,%ebx
test   %eax,%eax
je     80563db <__sprintf_chk@plt+0xbcab>
lea    0x2c(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049e90 <dbus_connection_get_unix_fd@plt>
test   %eax,%eax
je     80563b1 <__sprintf_chk@plt+0xbc81>
lea    0x30(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x34(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0xc,0x30(%esp)
mov    %eax,(%esp)
call   804a0c0 <getsockopt@plt>
test   %eax,%eax
js     8056338 <__sprintf_chk@plt+0xbc08>
cmpl   $0xc,0x30(%esp)
jne    8056378 <__sprintf_chk@plt+0xbc48>
mov    0x38(%esp),%esi
mov    $0x1,%eax
test   %esi,%esi
je     8056331 <__sprintf_chk@plt+0xbc01>
call   804a080 <geteuid@plt>
cmp    %eax,%esi
sete   %al
movzbl %al,%eax
lea    -0x1(%eax,%eax,1),%eax
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
nop
lea    -0x457d(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x3c40(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
movl   $0x32,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
call   804a430 <__errno_location@plt>
mov    (%eax),%eax
neg    %eax
jmp    8056331 <__sprintf_chk@plt+0xbc01>
lea    0x0(%esi),%esi
lea    -0x42ac(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x3c40(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
movl   $0x37,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
mov    $0xfffffff9,%eax
jmp    8056331 <__sprintf_chk@plt+0xbc01>
lea    -0x3c2d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x42d0(%ebx),%eax
movl   $0x2e,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3c2d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x50f5(%ebx),%eax
movl   $0x2c,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%edi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8974,%ebx
mov    0x50(%esp),%ebp
test   %edi,%edi
je     80565b0 <__sprintf_chk@plt+0xbe80>
call   804a080 <geteuid@plt>
test   %eax,%eax
je     8056470 <__sprintf_chk@plt+0xbd40>
test   %ebp,%ebp
lea    0x0(%esi),%esi
je     80564a0 <__sprintf_chk@plt+0xbd70>
mov    0x5c(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8049ff0 <dbus_bus_get_private@plt>
test   %eax,%eax
mov    %eax,%esi
je     8056491 <__sprintf_chk@plt+0xbd61>
movl   $0x0,0x4(%esp)
xor    %ebp,%ebp
mov    %eax,(%esp)
call   8049ea0 <dbus_connection_set_exit_on_disconnect@plt>
jmp    8056527 <__sprintf_chk@plt+0xbdf7>
nop
cmp    $0x1,%ebp
jne    805643b <__sprintf_chk@plt+0xbd0b>
mov    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x4288(%ebx),%eax
mov    %eax,(%esp)
call   804a3b0 <dbus_connection_open_private@plt>
test   %eax,%eax
mov    %eax,%esi
jne    8056506 <__sprintf_chk@plt+0xbdd6>
mov    $0xfffffffb,%eax
jmp    805654a <__sprintf_chk@plt+0xbe1a>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4561(%ebx),%eax
mov    %eax,(%esp)
call   8049ef0 <secure_getenv@plt>
test   %eax,%eax
je     8056442 <__sprintf_chk@plt+0xbd12>
mov    %eax,0xc(%esp)
lea    -0x4551(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a200 <__asprintf_chk@plt>
test   %eax,%eax
js     8056572 <__sprintf_chk@plt+0xbe42>
mov    0x2c(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   804a3b0 <dbus_connection_open_private@plt>
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %esi,%esi
je     8056442 <__sprintf_chk@plt+0xbd12>
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8049ea0 <dbus_connection_set_exit_on_disconnect@plt>
mov    %esi,(%esp)
call   80562a0 <__sprintf_chk@plt+0xbb70>
test   %eax,%eax
js     8056579 <__sprintf_chk@plt+0xbe49>
mov    $0x1,%ebp
mov    0x5c(%esp),%edx
mov    %esi,%eax
call   80560f0 <__sprintf_chk@plt+0xb9c0>
test   %eax,%eax
js     8056558 <__sprintf_chk@plt+0xbe28>
mov    0x58(%esp),%eax
test   %eax,%eax
je     8056546 <__sprintf_chk@plt+0xbe16>
mov    0x58(%esp),%ecx
mov    %ebp,%eax
mov    %al,(%ecx)
mov    %esi,(%edi)
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %esi,(%esp)
mov    %eax,0x1c(%esp)
call   804a550 <dbus_connection_close@plt>
mov    %esi,(%esp)
call   804a1c0 <dbus_connection_unref@plt>
mov    0x1c(%esp),%eax
jmp    805654a <__sprintf_chk@plt+0xbe1a>
mov    $0xfffffff4,%eax
jmp    805654a <__sprintf_chk@plt+0xbe1a>
mov    %esi,(%esp)
call   804a550 <dbus_connection_close@plt>
mov    %esi,(%esp)
call   804a1c0 <dbus_connection_unref@plt>
lea    -0x4268(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x4248(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x5c(%esp),%eax
mov    %eax,(%esp)
call   804a110 <dbus_set_error_const@plt>
mov    $0xfffffff3,%eax
jmp    805654a <__sprintf_chk@plt+0xbe1a>
lea    -0x3c4c(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4566(%ebx),%eax
movl   $0x6b,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%edx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x87a4,%ebx
mov    0x50(%esp),%eax
mov    0x54(%esp),%esi
mov    0x5c(%esp),%edi
test   %edx,%edx
movl   $0x0,0x2c(%esp)
je     805674f <__sprintf_chk@plt+0xc01f>
test   %eax,%eax
je     8056779 <__sprintf_chk@plt+0xc049>
test   %eax,%eax
setne  %cl
test   %esi,%esi
setne  %dl
test   %cl,%cl
jne    8056658 <__sprintf_chk@plt+0xbf28>
test   %dl,%dl
je     8056720 <__sprintf_chk@plt+0xbff0>
mov    %esi,0xc(%esp)
lea    -0x416c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a200 <__asprintf_chk@plt>
jmp    805668e <__sprintf_chk@plt+0xbf5e>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    8056668 <__sprintf_chk@plt+0xbf38>
mov    %eax,0xc(%esp)
lea    -0x41dc(%ebx),%eax
jmp    805663a <__sprintf_chk@plt+0xbf0a>
mov    %eax,0xc(%esp)
lea    -0x4220(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804a200 <__asprintf_chk@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8056720 <__sprintf_chk@plt+0xbff0>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804a3b0 <dbus_connection_open_private@plt>
mov    %eax,%esi
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049f50 <free@plt>
test   %esi,%esi
je     8056748 <__sprintf_chk@plt+0xc018>
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8049ea0 <dbus_connection_set_exit_on_disconnect@plt>
mov    %edi,%edx
mov    %esi,%eax
call   80560f0 <__sprintf_chk@plt+0xb9c0>
test   %eax,%eax
mov    %eax,%ebp
js     8056700 <__sprintf_chk@plt+0xbfd0>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   804a4f0 <dbus_bus_register@plt>
test   %eax,%eax
je     8056700 <__sprintf_chk@plt+0xbfd0>
mov    0x58(%esp),%eax
mov    %esi,(%eax)
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   804a550 <dbus_connection_close@plt>
mov    %esi,(%esp)
call   804a1c0 <dbus_connection_unref@plt>
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x4190(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,(%esp)
call   804a110 <dbus_set_error_const@plt>
mov    $0xfffffff4,%eax
jmp    80566f3 <__sprintf_chk@plt+0xbfc3>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xfffffffb,%eax
jmp    80566f3 <__sprintf_chk@plt+0xbfc3>
lea    -0x3c6d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4566(%ebx),%eax
movl   $0xb1,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
test   %esi,%esi
jne    805661a <__sprintf_chk@plt+0xbeea>
lea    -0x3c6d(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4534(%ebx),%eax
movl   $0xb2,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x85d4,%ebx
mov    0x34(%esp),%edi
test   %eax,%eax
je     8056887 <__sprintf_chk@plt+0xc157>
call   804a080 <geteuid@plt>
test   %eax,%eax
je     8056858 <__sprintf_chk@plt+0xc128>
lea    -0x412c(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804a3b0 <dbus_connection_open_private@plt>
test   %eax,%eax
mov    %eax,%esi
je     8056880 <__sprintf_chk@plt+0xc150>
mov    %eax,(%esp)
movl   $0x0,0x4(%esp)
call   8049ea0 <dbus_connection_set_exit_on_disconnect@plt>
mov    %edi,%edx
mov    %esi,%eax
call   80560f0 <__sprintf_chk@plt+0xb9c0>
test   %eax,%eax
mov    %eax,%ebp
js     8056838 <__sprintf_chk@plt+0xc108>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   804a4f0 <dbus_bus_register@plt>
test   %eax,%eax
je     8056838 <__sprintf_chk@plt+0xc108>
mov    0x30(%esp),%eax
mov    %esi,(%eax)
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    %esi,(%esp)
call   804a550 <dbus_connection_close@plt>
mov    %esi,(%esp)
call   804a1c0 <dbus_connection_unref@plt>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x30(%esp),%eax
mov    %edi,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8056410 <__sprintf_chk@plt+0xbce0>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xfffffffb,%eax
jmp    805682e <__sprintf_chk@plt+0xc0fe>
lea    -0x3c87(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4566(%ebx),%eax
movl   $0xdc,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x84c6,%ebx
test   %esi,%esi
je     8056900 <__sprintf_chk@plt+0xc1d0>
lea    -0x4248(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a0d0 <dbus_error_has_name@plt>
lea    -0x4527(%ebx),%edx
test   %eax,%eax
jne    80568f7 <__sprintf_chk@plt+0xc1c7>
mov    0x4(%esi),%edx
add    $0x14,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
nop
xor    %edx,%edx
jmp    80568f7 <__sprintf_chk@plt+0xc1c7>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8474,%ebx
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
test   %esi,%esi
je     80569a7 <__sprintf_chk@plt+0xc277>
test   %edi,%edi
je     805697d <__sprintf_chk@plt+0xc24d>
mov    %esi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    0x34(%esp),%eax
jne    8056970 <__sprintf_chk@plt+0xc240>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    %esi,(%esp)
call   804a580 <dbus_message_iter_next@plt>
test   %eax,%eax
mov    %ebp,%eax
sete   %dl
xor    $0x1,%eax
cmp    %al,%dl
jne    8056970 <__sprintf_chk@plt+0xc240>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1c,%esp
mov    $0xfffffffb,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x3ca3(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4519(%ebx),%eax
movl   $0x414,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3ca3(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4497(%ebx),%eax
movl   $0x413,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xd8(%esp),%eax
mov    0xd0(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x8397,%ebx
mov    0xd4(%esp),%edi
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0xac(%esp)
xor    %eax,%eax
test   %esi,%esi
je     8056f79 <__sprintf_chk@plt+0xc849>
test   %edi,%edi
je     8056f4f <__sprintf_chk@plt+0xc81f>
mov    %edi,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
sub    $0x61,%eax
cmp    $0x14,%eax
ja     8056d10 <__sprintf_chk@plt+0xc5e0>
mov    -0x3d5c(%ebx,%eax,4),%eax
add    %ebx,%eax
jmp    *%eax
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
lea    -0x446a(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     8056d18 <__sprintf_chk@plt+0xc5e8>
mov    0x30(%esp),%eax
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
lea    -0x445f(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
mov    $0x1,%eax
mov    0xac(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8056f4a <__sprintf_chk@plt+0xc81a>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x73,%eax
je     8056db8 <__sprintf_chk@plt+0xc688>
mov    %edi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
cmp    $0x79,%eax
je     8056e78 <__sprintf_chk@plt+0xc748>
mov    %edi,(%esp)
call   804a2a0 <dbus_message_iter_get_element_type@plt>
mov    %eax,%ecx
xor    %eax,%eax
cmp    $0x75,%ecx
jne    8056aa1 <__sprintf_chk@plt+0xc371>
lea    0x30(%esp),%ebp
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
cmpb   $0x0,0x1c(%esp)
jne    8056b16 <__sprintf_chk@plt+0xc3e6>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
je     8056a9c <__sprintf_chk@plt+0xc36c>
lea    -0x4441(%ebx),%eax
mov    %esi,0x8(%esp)
lea    -0x4438(%ebx),%esi
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056b79 <__sprintf_chk@plt+0xc449>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x75,%eax
jne    8056ff7 <__sprintf_chk@plt+0xc8c7>
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x2c(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebp,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    8056b38 <__sprintf_chk@plt+0xc408>
lea    0x0(%esi),%esi
lea    -0x5f81(%ebx),%eax
mov    %eax,(%esp)
call   804a260 <puts@plt>
jmp    8056a9c <__sprintf_chk@plt+0xc36c>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x30(%esp),%edx
lea    -0x447f(%ebx),%eax
test   %edx,%edx
lea    -0x447b(%ebx),%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
lea    -0x74e0(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056a9c <__sprintf_chk@plt+0xc36c>
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
lea    -0x4448(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
fldl   0x30(%esp)
fstpl  0xc(%esp)
call   804a4a0 <__printf_chk@plt>
mov    $0x1,%eax
jmp    8056aa1 <__sprintf_chk@plt+0xc371>
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x30(%esp),%eax
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
lea    -0x444f(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
mov    $0x1,%eax
jmp    8056aa1 <__sprintf_chk@plt+0xc371>
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    0x30(%esp),%eax
cmpb   $0x0,0x1c(%esp)
jne    8056bc5 <__sprintf_chk@plt+0xc495>
test   %eax,%eax
je     8056a9c <__sprintf_chk@plt+0xc36c>
cmpb   $0x0,(%eax)
je     8056a9c <__sprintf_chk@plt+0xc36c>
jmp    8056bc5 <__sprintf_chk@plt+0xc495>
lea    0x0(%esi),%esi
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
lea    -0x7466(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804e550 <__sprintf_chk@plt+0x3e20>
test   %eax,%eax
je     8056d60 <__sprintf_chk@plt+0xc630>
mov    0x30(%esp),%eax
mov    0x34(%esp),%edx
movl   $0x2a,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x6c(%esp),%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8051080 <__sprintf_chk@plt+0x6950>
test   %eax,%eax
jne    8056bc5 <__sprintf_chk@plt+0xc495>
cmpb   $0x0,0x1c(%esp)
lea    -0x5f81(%ebx),%eax
jne    8056bc5 <__sprintf_chk@plt+0xc495>
jmp    8056a9c <__sprintf_chk@plt+0xc36c>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    8056aa1 <__sprintf_chk@plt+0xc371>
nop
lea    -0x4464(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
jne    8056a7a <__sprintf_chk@plt+0xc34a>
mov    0x30(%esp),%eax
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
lea    -0x4456(%ebx),%eax
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056a9c <__sprintf_chk@plt+0xc36c>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4478(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049e40 <strstr@plt>
test   %eax,%eax
je     8056f1b <__sprintf_chk@plt+0xc7eb>
mov    0x30(%esp),%eax
mov    0x34(%esp),%edx
movl   $0x0,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x8(%esp)
lea    0x6c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x40,0x4(%esp)
mov    %eax,(%esp)
call   80516c0 <__sprintf_chk@plt+0x6f90>
jmp    8056bc5 <__sprintf_chk@plt+0xc495>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%ebp
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
cmpb   $0x0,0x1c(%esp)
jne    8056ddf <__sprintf_chk@plt+0xc6af>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
je     8056a9c <__sprintf_chk@plt+0xc36c>
lea    -0x4441(%ebx),%eax
mov    %esi,0x8(%esp)
lea    -0x733e(%ebx),%edi
xor    %esi,%esi
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056e65 <__sprintf_chk@plt+0xc735>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x73,%eax
jne    8056fa3 <__sprintf_chk@plt+0xc873>
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
mov    %esi,%eax
mov    0x2c(%esp),%edx
test   %al,%al
mov    $0x1,%esi
lea    -0x5f81(%ebx),%eax
cmovne %edi,%eax
mov    %eax,0x8(%esp)
lea    -0x62b3(%ebx),%eax
mov    %edx,0xc(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebp,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    8056e08 <__sprintf_chk@plt+0xc6d8>
jmp    8056b88 <__sprintf_chk@plt+0xc458>
xchg   %ax,%ax
lea    0x30(%esp),%ebp
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804a0f0 <dbus_message_iter_recurse@plt>
cmpb   $0x0,0x1c(%esp)
jne    8056e9f <__sprintf_chk@plt+0xc76f>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
je     8056a9c <__sprintf_chk@plt+0xc36c>
lea    -0x4441(%ebx),%eax
mov    %esi,0x8(%esp)
lea    -0x443d(%ebx),%esi
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056f0a <__sprintf_chk@plt+0xc7da>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
cmp    $0x79,%eax
jne    8056fcd <__sprintf_chk@plt+0xc89d>
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049eb0 <dbus_message_iter_get_basic@plt>
movzbl 0x2c(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804a4a0 <__printf_chk@plt>
mov    %ebp,(%esp)
call   804a580 <dbus_message_iter_next@plt>
mov    %ebp,(%esp)
call   804a000 <dbus_message_iter_get_arg_type@plt>
test   %eax,%eax
jne    8056ec8 <__sprintf_chk@plt+0xc798>
jmp    8056b88 <__sprintf_chk@plt+0xc458>
mov    0x30(%esp),%eax
mov    0x34(%esp),%edx
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
lea    -0x4473(%ebx),%eax
mov    %edx,0x10(%esp)
mov    %eax,0x4(%esp)
call   804a4a0 <__printf_chk@plt>
jmp    8056a9c <__sprintf_chk@plt+0xc36c>
call   8057670 <__sprintf_chk@plt+0xcf40>
lea    -0x3cba(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4497(%ebx),%eax
movl   $0x423,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3cba(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x5b70(%ebx),%eax
movl   $0x422,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3cba(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x3eb8(%ebx),%eax
movl   $0x47c,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3cba(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x3e84(%ebx),%eax
movl   $0x494,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
lea    -0x3cba(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x3e50(%ebx),%eax
movl   $0x4ab,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x7d56,%ebx
test   %esi,%esi
je     80570b9 <__sprintf_chk@plt+0xc989>
mov    %esi,(%esp)
call   804a560 <dbus_error_is_set@plt>
xor    %edx,%edx
test   %eax,%eax
jne    8057060 <__sprintf_chk@plt+0xc930>
add    $0x14,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
lea    -0x3e1c(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a0d0 <dbus_error_has_name@plt>
test   %eax,%eax
je     8057088 <__sprintf_chk@plt+0xc958>
add    $0x14,%esp
mov    $0x1,%edx
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x3df0(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804a0d0 <dbus_error_has_name@plt>
test   %eax,%eax
jne    8057076 <__sprintf_chk@plt+0xc946>
lea    -0x3dc4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   804e780 <__sprintf_chk@plt+0x4050>
test   %eax,%eax
setne  %dl
jmp    8057056 <__sprintf_chk@plt+0xc926>
lea    -0x3cd2(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x43ac(%ebx),%eax
movl   $0x530,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x7c9b,%ebx
sub    $0x3c,%esp
lea    0x20(%esp),%edi
mov    0x68(%esp),%esi
mov    %edi,(%esp)
call   8049f30 <dbus_error_init@plt>
mov    0x50(%esp),%ecx
test   %ecx,%ecx
je     80572fe <__sprintf_chk@plt+0xcbce>
mov    0x60(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x54(%esp),%eax
mov    %eax,(%esp)
call   804a4b0 <dbus_message_new_method_call@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8057210 <__sprintf_chk@plt+0xcae0>
lea    0x70(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x6c(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   804a220 <dbus_message_append_args_valist@plt>
test   %eax,%eax
je     80571e8 <__sprintf_chk@plt+0xcab8>
mov    0x50(%esp),%eax
mov    %edi,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804a020 <dbus_connection_send_with_reply_and_block@plt>
test   %eax,%eax
je     8057250 <__sprintf_chk@plt+0xcb20>
mov    0x64(%esp),%edx
test   %edx,%edx
je     8057298 <__sprintf_chk@plt+0xcb68>
mov    0x64(%esp),%ecx
xor    %edx,%edx
mov    %eax,(%ecx)
test   %esi,%esi
je     8057238 <__sprintf_chk@plt+0xcb08>
mov    0x20(%esp),%eax
mov    %eax,(%esi)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esi)
test   %ebp,%ebp
je     80571db <__sprintf_chk@plt+0xcaab>
mov    %ebp,(%esp)
mov    %edx,0x1c(%esp)
call   804a5b0 <dbus_message_unref@plt>
mov    0x1c(%esp),%edx
add    $0x3c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x3d08(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x4599(%ebx),%eax
movl   $0x55a,0x4(%esp)
mov    %eax,(%esp)
call   8053420 <__sprintf_chk@plt+0x8cf0>
mov    %eax,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x3d08(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x4599(%ebx),%eax
movl   $0x553,0x4(%esp)
mov    %eax,(%esp)
call   8053420 <__sprintf_chk@plt+0x8cf0>
mov    %eax,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
nop
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
call   804a240 <dbus_error_free@plt>
mov    0x1c(%esp),%edx
jmp    80571c7 <__sprintf_chk@plt+0xca97>
lea    0x0(%esi),%esi
test   %esi,%esi
je     80572bb <__sprintf_chk@plt+0xcb8b>
mov    %edi,(%esp)
call   8057030 <__sprintf_chk@plt+0xc900>
test   %al,%al
jne    80572a7 <__sprintf_chk@plt+0xcb77>
lea    -0x4248(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804a0d0 <dbus_error_has_name@plt>
test   %eax,%eax
jne    80572b1 <__sprintf_chk@plt+0xcb81>
lea    -0x3d80(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804a0d0 <dbus_error_has_name@plt>
cmp    $0x1,%eax
sbb    %edx,%edx
and    $0x69,%edx
sub    $0x6e,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
mov    %eax,(%esp)
call   804a5b0 <dbus_message_unref@plt>
xor    %edx,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
mov    $0xfffffffe,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
mov    $0xfffffff3,%edx
jmp    80571a4 <__sprintf_chk@plt+0xca74>
mov    %edi,(%esp)
call   80568c0 <__sprintf_chk@plt+0xc190>
movl   $0x562,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x14(%esp)
lea    -0x3da0(%ebx),%eax
mov    %eax,0x10(%esp)
lea    -0x3d08(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
call   8053280 <__sprintf_chk@plt+0x8b50>
jmp    8057254 <__sprintf_chk@plt+0xcb24>
lea    -0x3ced(%ebx),%eax
mov    %eax,0xc(%esp)
lea    -0x4599(%ebx),%eax
mov    %eax,0x4(%esp)
lea    -0x4565(%ebx),%eax
movl   $0x54f,0x8(%esp)
mov    %eax,(%esp)
call   80532c0 <__sprintf_chk@plt+0x8b90>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x7a57,%ebx
test   %eax,%eax
je     8057355 <__sprintf_chk@plt+0xcc25>
mov    (%eax),%eax
test   %eax,%eax
je     8057355 <__sprintf_chk@plt+0xcc25>
mov    %eax,(%esp)
call   804a5b0 <dbus_message_unref@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    80573b0 <__sprintf_chk@plt+0xcc80>
cmp    %ebp,%ecx
ja     80573e8 <__sprintf_chk@plt+0xccb8>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8057398 <__sprintf_chk@plt+0xcc68>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     80573d8 <__sprintf_chk@plt+0xcca8>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    80573f8 <__sprintf_chk@plt+0xccc8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8057468 <__sprintf_chk@plt+0xcd38>
cmp    %edx,%eax
jb     8057468 <__sprintf_chk@plt+0xcd38>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8057478 <__sprintf_chk@plt+0xcd48>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8057459 <__sprintf_chk@plt+0xcd29>
cmp    (%esp),%esi
je     8057478 <__sprintf_chk@plt+0xcd48>
mov    %edi,%eax
xor    %edx,%edx
jmp    80573dc <__sprintf_chk@plt+0xccac>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    80573dc <__sprintf_chk@plt+0xccac>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    80574d8 <__sprintf_chk@plt+0xcda8>
cmp    %edi,%esi
jbe    8057510 <__sprintf_chk@plt+0xcde0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8057530 <__sprintf_chk@plt+0xce00>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8057540 <__sprintf_chk@plt+0xce10>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     80575d8 <__sprintf_chk@plt+0xcea8>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8057521 <__sprintf_chk@plt+0xcdf1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    80574cb <__sprintf_chk@plt+0xcd9b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     80575c4 <__sprintf_chk@plt+0xce94>
cmp    %eax,0xc(%esp)
jb     80575c0 <__sprintf_chk@plt+0xce90>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    805759e <__sprintf_chk@plt+0xce6e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    805759e <__sprintf_chk@plt+0xce6e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     80574f1 <__sprintf_chk@plt+0xcdc1>
jmp    8057501 <__sprintf_chk@plt+0xcdd1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x7799,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0x2d8(%ebx),%esi
call   8049db4 <_init>
lea    -0x2e0(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8057649 <__sprintf_chk@plt+0xcf19>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x2e0(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8057628 <__sprintf_chk@plt+0xcef8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8057660 <__sprintf_chk@plt+0xcf30>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x771e,%ebx
sub    $0x8,%esp
call   804a040 <__stack_chk_fail@plt>
push   %ebx
sub    $0x8,%esp
call   804adf0 <__sprintf_chk@plt+0x6c0>
add    $0x7707,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    %eax,(%eax)
add    (%eax),%al
push   %ebp
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x53(%ebx)
gs
jae    8057721 <_IO_stdin_used+0x81>
imul   $0x636f4c00,0x6e(%edi),%ebp
imul   $0x73,0x65(%ebx),%edx
jae    8057724 <_IO_stdin_used+0x84>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,0x63(%ecx)
je     805772b <_IO_stdin_used+0x8b>
jbe    8057725 <_IO_stdin_used+0x85>
je     805772b <_IO_stdin_used+0x8b>
push   %ebx
gs
jae    805773d <_IO_stdin_used+0x9d>
imul   $0x72655400,0x6e(%edi),%ebp
insl   (%dx),%es:(%edi)
imul   $0x65536574,0x61(%esi),%ebp
jae    805774e <_IO_stdin_used+0xae>
imul   $0x2f2e2e00,0x6e(%edi),%ebp
jae    8057756 <_IO_stdin_used+0xb6>
arpl   %bp,(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x69676f6c,0x2f(%bp),%ebp
outsb  %ds:(%esi),(%dx)
arpl   %si,0x2e(%esp,%ebp,2)
arpl   %ax,(%eax)
popa
jb     8057761 <_IO_stdin_used+0xc1>
jae    80576fc <_IO_stdin_used+0x5c>
jne    805776c <_IO_stdin_used+0xcc>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    805776a <_IO_stdin_used+0xca>
jae    805777a <_IO_stdin_used+0xda>
imul   $0x72657400,0x6e(%edi),%ebp
insl   (%dx),%es:(%edi)
imul   $0x732d6574,0x61(%esi),%ebp
gs
jae    805778c <_IO_stdin_used+0xec>
imul   $0x726f2f00,0x6e(%edi),%ebp
addr16 das
data16
jb     805778a <_IO_stdin_used+0xea>
gs
fs
gs
jae    8057795 <_IO_stdin_used+0xf5>
je     805779b <_IO_stdin_used+0xfb>
jo     805775d <_IO_stdin_used+0xbd>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x67726f00,0x31(%bp),%ebp
cs
data16
jb     80577a1 <_IO_stdin_used+0x101>
gs
fs
gs
jae    80577ac <_IO_stdin_used+0x10c>
je     80577b2 <_IO_stdin_used+0x112>
jo     8057773 <_IO_stdin_used+0xd3>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x73694c00,0x31(%bp),%ebp
je     80577a4 <_IO_stdin_used+0x104>
gs
popa
je     80577c8 <_IO_stdin_used+0x128>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     80577c3 <_IO_stdin_used+0x123>
jb     80577d7 <_IO_stdin_used+0x137>
and    %dh,%gs:0x65(%edx)
jo     80577d6 <_IO_stdin_used+0x136>
jns    805779a <_IO_stdin_used+0xfa>
add    %cl,(%edx)
and    $0x65732075,%eax
popa
je     80577e9 <_IO_stdin_used+0x149>
and    %ch,0x73(%ecx,%ebp,2)
je     80577e1 <_IO_stdin_used+0x141>
fs or  %cs:%fs:(%eax),%al
dec    %esp
imul   $0x72657355,0x74(%ebx),%esi
jae    805778a <_IO_stdin_used+0xea>
push   %ebp
push   %ebx
inc    %ebp
push   %edx
add    %dl,0x49(%ebp)
inc    %esp
add    %ah,0x20733031
and    $0x7336312d,%eax
or     (%eax),%al
and    $0x20753031,%eax
and    $0x7336312d,%eax
or     (%eax),%al
or     0x73752075,%ah
gs
jb     8057827 <_IO_stdin_used+0x187>
and    %ch,0x73(%ecx,%ebp,2)
je     805781f <_IO_stdin_used+0x17f>
fs or  %cs:%fs:(%eax),%al
dec    %esp
imul   $0x73736553,0x74(%ebx),%esi
imul   $0x45530073,0x6e(%edi),%ebp
push   %ebx
push   %ebx
dec    %ecx
dec    %edi
dec    %esi
add    %ah,0x20733031
and    $0x20733031,%eax
and    $0x7336312d,%eax
and    %ah,0x7336312d
or     (%eax),%al
and    $0x20733031,%eax
and    $0x20753031,%eax
and    $0x7336312d,%eax
and    %ah,0x7336312d
or     (%eax),%al
or     0x65732075,%ah
jae    805787c <_IO_stdin_used+0x1dc>
imul   $0x696c2073,0x6e(%edi),%ebp
jae    8057886 <_IO_stdin_used+0x1e6>
gs fs or %cs:%fs:%gs:(%eax),%al
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x75,(%eax),%esp
jo     805784d <_IO_stdin_used+0x1ad>
jne    80578a2 <_IO_stdin_used+0x202>
gs
jb     8057852 <_IO_stdin_used+0x1b2>
and    $0x25203a73,%eax
jae    8057839 <_IO_stdin_used+0x199>
dec    %ebx
imul   $0x726573,0x55(%esp,%ebp,2),%ebp
push   %esp
gs
jb     80578b3 <_IO_stdin_used+0x213>
imul   $0x73556574,0x61(%esi),%ebp
gs
jb     8057850 <_IO_stdin_used+0x1b0>
outsb  %gs:(%esi),(%dx)
popa
bound  %ebp,0x2d(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x46007265,0x67(%esi),%ebp
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jb     80578cf <_IO_stdin_used+0x22f>
jae    80578db <_IO_stdin_used+0x23b>
insb   (%dx),%es:(%edi)
jbe    80578d4 <_IO_stdin_used+0x234>
and    %dh,0x73(%ebp)
gs
jb     8057895 <_IO_stdin_used+0x1f5>
and    $0x25203a73,%eax
jae    805787c <_IO_stdin_used+0x1dc>
push   %ebx
gs
je     80578d5 <_IO_stdin_used+0x235>
jae    80578e7 <_IO_stdin_used+0x247>
jb     80578d0 <_IO_stdin_used+0x230>
imul   $0x6e007265,0x67(%esi),%ebp
das
popa
add    %ch,0x65(%esi)
ja     80578f1 <_IO_stdin_used+0x251>
insb   (%dx),%es:(%edi)
imul   $0x74654700,0x65(%esi),%ebp
inc    %ecx
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %al,0x73(%ecx,%ebp,2)
jo     805790f <_IO_stdin_used+0x26f>
popa
jns    80578a6 <_IO_stdin_used+0x206>
inc    %ecx
arpl   %si,0x76(%ecx,%ebp,2)
gs
push   %ebx
gs
jae    8057923 <_IO_stdin_used+0x283>
imul   $0x3d732500,0x6e(%edi),%ebp
and    $0x25000a73,%eax
jae    80578fb <_IO_stdin_used+0x25b>
and    $0x73250073,%eax
cmp    $0x7325000a,%eax
cmp    $0x706e755b,%eax
jb     8057938 <_IO_stdin_used+0x298>
outsb  %ds:(%esi),(%dx)
je     8057933 <_IO_stdin_used+0x293>
bound  %ebp,0x5d(%ebp,%eiz,2)
or     (%eax),%al
inc    %esp
gs
popaw
jne    805794a <_IO_stdin_used+0x2aa>
je     8057923 <_IO_stdin_used+0x283>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     8057956 <_IO_stdin_used+0x2b6>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
inc    %edi
jb     8057958 <_IO_stdin_used+0x2b8>
jne    805795b <_IO_stdin_used+0x2bb>
add    %dl,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057957 <_IO_stdin_used+0x2b7>
dec    %eax
outsl  %ds:(%esi),(%dx)
jae    805796a <_IO_stdin_used+0x2ca>
add    %dl,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057962 <_IO_stdin_used+0x2c2>
push   %ebp
jae    8057965 <_IO_stdin_used+0x2c5>
jb     8057902 <_IO_stdin_used+0x262>
push   %ebx
gs
jb     805797c <_IO_stdin_used+0x2dc>
imul   $0x70795400,0x65(%ebx),%esp
add    %al,%gs:0x6c(%ebx)
popa
jae    8057987 <_IO_stdin_used+0x2e7>
add    %dl,0x74(%ebx)
popa
je     805797f <_IO_stdin_used+0x2df>
add    %dl,0x54(%esi)
dec    %esi
jb     8057920 <_IO_stdin_used+0x280>
dec    %esp
gs
popa
fs
gs
jb     8057927 <_IO_stdin_used+0x287>
push   %edx
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057992 <_IO_stdin_used+0x2f2>
add    %dl,0x6d(%ecx,%ebp,2)
gs
jae    80579a8 <_IO_stdin_used+0x308>
popa
insl   (%dx),%es:(%edi)
jo     8057938 <_IO_stdin_used+0x298>
and    $0x202d2073,%eax
add    %ah,0x25282073
jne    805796e <_IO_stdin_used+0x2ce>
or     (%eax),%al
or     %esp,(%eax)
and    %ah,(%eax)
push   %ebx
imul   $0x25203a65,0x63(%esi),%ebp
jae    8057990 <_IO_stdin_used+0x2f0>
and    %ah,0x9000a73
and    %ah,(%eax)
and    %dl,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3a(%ebp)
and    %ah,0x9000a73
and    %ah,(%eax)
dec    %esp
gs
popa
fs
gs
jb     80579ad <_IO_stdin_used+0x30d>
and    %ah,0x28200075
and    $0x9002973,%eax
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
gs
popa
je     80579c1 <_IO_stdin_used+0x321>
and    %ah,0x203b0073
jbe    80579f2 <_IO_stdin_used+0x352>
and    $0x20090069,%eax
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
push   %esp
pop    %ecx
cmp    (%eax),%ah
and    $0x9000a73,%eax
and    %al,0x73(%ecx,%ebp,2)
jo     8057a14 <_IO_stdin_used+0x374>
popa
jns    80579e5 <_IO_stdin_used+0x345>
and    %ah,0x9000a73
and    %ah,(%eax)
push   %edx
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057a1e <_IO_stdin_used+0x37e>
cmp    (%eax),%ah
and    $0x73254073,%eax
or     (%eax),%al
or     %esp,(%eax)
and    %dl,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057a30 <_IO_stdin_used+0x390>
cmp    (%eax),%ah
and    $0x9000a73,%eax
and    %ah,(%eax)
push   %edx
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057a3f <_IO_stdin_used+0x39f>
cmp    (%eax),%ah
jne    8057a51 <_IO_stdin_used+0x3b1>
gs
jb     8057a01 <_IO_stdin_used+0x361>
and    $0x9000a73,%eax
and    %ah,(%eax)
push   %edx
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057a53 <_IO_stdin_used+0x3b3>
cmp    (%eax),%ah
pop    %ecx
gs
jae    80579f4 <_IO_stdin_used+0x354>
or     %esp,(%eax)
push   %ebx
gs
jb     8057a70 <_IO_stdin_used+0x3d0>
imul   $0x7325203a,0x65(%ebx),%esp
add    %bh,(%ebx)
and    %dh,0x70(%ecx,%edi,2)
and    %ah,%gs:0x203b0073
arpl   %bp,0x73(%ecx,%eiz,2)
jae    8057a34 <_IO_stdin_used+0x394>
and    $0x20090073,%eax
and    %ah,(%eax)
and    %dl,0x70(%ecx,%edi,2)
cmp    %gs:(%eax),%ah
and    $0x9000a73,%eax
and    %ah,(%eax)
and    %al,0x6c(%ebx)
popa
jae    8057aa2 <_IO_stdin_used+0x402>
cmp    (%eax),%ah
and    $0x9000a73,%eax
and    %ah,(%eax)
and    %dl,0x74(%ebx)
popa
je     8057aa3 <_IO_stdin_used+0x403>
cmp    (%eax),%ah
and    $0x9000a73,%eax
and    %ah,(%eax)
inc    %ebx
inc    %edi
jb     8057aba <_IO_stdin_used+0x41a>
jne    8057abd <_IO_stdin_used+0x41d>
cmp    (%eax),%ah
and    $0x9000a73,%eax
or     %esp,(%eax)
and    %al,(%eax)
and    %ch,(%edx)
and    $0x20090073,%eax
inc    %esp
gs
jbe    8057acc <_IO_stdin_used+0x42c>
arpl   %sp,0x73(%ebp)
cmp    (%eax),%al
or     %edx,0x65(%ebx)
jae    8057ae0 <_IO_stdin_used+0x440>
imul   $0x47003a73,0x6e(%edi),%ebp
gs
je     8057aca <_IO_stdin_used+0x42a>
gs
jae    8057aed <_IO_stdin_used+0x44d>
imul   $0x65735500,0x6e(%edi),%ebp
jb     8057aa3 <_IO_stdin_used+0x403>
and    $0x6e752073,%eax
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %al,%cs:0x65(%edi)
je     8057ae8 <_IO_stdin_used+0x448>
jae    8057afa <_IO_stdin_used+0x45a>
jb     8057a97 <_IO_stdin_used+0x3f7>
inc    %edi
gs
je     8057aee <_IO_stdin_used+0x44e>
gs
popa
je     8057a9f <_IO_stdin_used+0x3ff>
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8057b0c <_IO_stdin_used+0x46c>
jb     8057b20 <_IO_stdin_used+0x480>
and    %dh,%gs:0x65(%edx)
jo     8057b1f <_IO_stdin_used+0x47f>
jns    8057aef <_IO_stdin_used+0x44f>
and    %ah,0x65540073
jb     8057b2a <_IO_stdin_used+0x48a>
imul   $0x65536574,0x61(%esi),%ebp
popa
je     8057ac7 <_IO_stdin_used+0x427>
dec    %ebx
imul   $0x69737365,0x53(%esp,%ebp,2),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,0x6c(%esi)
jne    8057b4a <_IO_stdin_used+0x4aa>
push   $0x69766544
arpl   %sp,0x73(%ebp)
add    %al,0x74(%ecx)
je     8057b45 <_IO_stdin_used+0x4a5>
arpl   %bp,0x44(%eax)
gs
jbe    8057b53 <_IO_stdin_used+0x4b3>
arpl   %sp,0x0(%ebp)
dec    %esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x53(%ebx)
gs
jae    8057b68 <_IO_stdin_used+0x4c8>
imul   $0x6e550073,0x6e(%edi),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x53(%ebx)
gs
jae    8057b77 <_IO_stdin_used+0x4d7>
imul   $0x72610073,0x6e(%edi),%ebp
arpl   %sp,(%bx,%si)
ds
cmp    $0x61003020,%eax
jb     8057b7d <_IO_stdin_used+0x4dd>
jbe    8057b18 <_IO_stdin_used+0x478>
jae    8057b93 <_IO_stdin_used+0x4f3>
jae    8057b90 <_IO_stdin_used+0x4f0>
gs
insl   (%dx),%es:(%edi)
and    %dh,%fs:(%edx)
xor    %dh,(%eax,%eax,1)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     8057b99 <_IO_stdin_used+0x4f9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
fs and %ah,%fs:%gs:0x70680063
cmp    0x73(%ecx),%ah
cmp    0x3a(%eax),%cl
push   %eax
add    %dl,0x68(%ebp)
sub    $0x20,%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x61(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
jae    8057bc7 <_IO_stdin_used+0x527>
outsl  %ds:(%esi),(%dx)
jb     8057bce <_IO_stdin_used+0x52e>
cs cs add %ch,%cs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8057b63 <_IO_stdin_used+0x4c3>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    8057bc8 <_IO_stdin_used+0x528>
insb   (%dx),%es:(%edi)
imul   $0x65626d75,0x6e(%eax,%eiz,1),%esp
jb     8057b92 <_IO_stdin_used+0x4f2>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x72(%ecx)
addr16 jne 8057be7 <_IO_stdin_used+0x547>
outsb  %gs:(%esi),(%dx)
je     8057bf1 <_IO_stdin_used+0x551>
add    %dl,%cs:0x6f(%edi,%ebp,2)
and    %ah,0x65(%esi)
ja     8057ba8 <_IO_stdin_used+0x508>
popa
jb     8057bf2 <_IO_stdin_used+0x552>
jne    8057bfa <_IO_stdin_used+0x55a>
outsb  %gs:(%esi),(%dx)
je     8057c04 <_IO_stdin_used+0x564>
add    %dl,%cs:0x6f(%edi,%ebp,2)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    8057bbc <_IO_stdin_used+0x51c>
popa
jb     8057c06 <_IO_stdin_used+0x566>
jne    8057c0e <_IO_stdin_used+0x56e>
outsb  %gs:(%esi),(%dx)
je     8057c18 <_IO_stdin_used+0x578>
add    %dl,%cs:0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
jo     8057c15 <_IO_stdin_used+0x575>
jb     8057c1f <_IO_stdin_used+0x57f>
jae    8057c27 <_IO_stdin_used+0x587>
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
gs
jb     8057c20 <_IO_stdin_used+0x580>
je     8057c30 <_IO_stdin_used+0x590>
jb     8057bf1 <_IO_stdin_used+0x551>
add    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
gs
jb     8057c32 <_IO_stdin_used+0x592>
je     8057c3c <_IO_stdin_used+0x59c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x696c0073
jae    8057c51 <_IO_stdin_used+0x5b1>
sub    $0x73736573,%eax
imul   $0x65730073,0x6e(%edi),%ebp
jae    8057c5e <_IO_stdin_used+0x5be>
imul   $0x6174732d,0x6e(%edi),%ebp
je     8057c69 <_IO_stdin_used+0x5c9>
jae    8057bf6 <_IO_stdin_used+0x556>
jae    8057c60 <_IO_stdin_used+0x5c0>
outsl  %ds:(%esi),(%dx)
ja     8057c28 <_IO_stdin_used+0x588>
jae    8057c62 <_IO_stdin_used+0x5c2>
jae    8057c72 <_IO_stdin_used+0x5d2>
imul   $0x74636100,0x6e(%edi),%ebp
imul   $0x75006574,0x61(%esi),%esi
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    8057c7a <_IO_stdin_used+0x5da>
jae    8057c8a <_IO_stdin_used+0x5ea>
imul   $0x696b0073,0x6e(%edi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x73736573,%eax
imul   $0x73696c00,0x6e(%edi),%ebp
je     8057c5b <_IO_stdin_used+0x5bb>
jne    8057ca3 <_IO_stdin_used+0x603>
gs
jb     8057ca6 <_IO_stdin_used+0x606>
add    %dh,0x73(%ebp)
gs
jb     8057c66 <_IO_stdin_used+0x5c6>
jae    8057caf <_IO_stdin_used+0x60f>
popa
je     8057cb3 <_IO_stdin_used+0x613>
jae    8057c40 <_IO_stdin_used+0x5a0>
jae    8057caa <_IO_stdin_used+0x60a>
outsl  %ds:(%esi),(%dx)
ja     8057c72 <_IO_stdin_used+0x5d2>
jne    8057cba <_IO_stdin_used+0x61a>
gs
jb     8057c4a <_IO_stdin_used+0x5aa>
imul   $0x2d656c62,%fs:0x61(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x74007265,0x67(%esi),%ebp
gs
jb     8057cca <_IO_stdin_used+0x62a>
imul   $0x752d6574,0x61(%esi),%ebp
jae    8057ccb <_IO_stdin_used+0x62b>
jb     8057c68 <_IO_stdin_used+0x5c8>
imul   $0x6c,0x6c(%ecx),%ebp
sub    $0x72657375,%eax
add    %ch,0x73(%ecx,%ebp,2)
je     8057ca4 <_IO_stdin_used+0x604>
jae    8057cde <_IO_stdin_used+0x63e>
popa
je     8057cef <_IO_stdin_used+0x64f>
add    %dh,0x65(%ebx)
popa
je     8057caf <_IO_stdin_used+0x60f>
jae    8057cf8 <_IO_stdin_used+0x658>
popa
je     8057cfc <_IO_stdin_used+0x65c>
jae    8057c89 <_IO_stdin_used+0x5e9>
jae    8057cf3 <_IO_stdin_used+0x653>
outsl  %ds:(%esi),(%dx)
ja     8057cbb <_IO_stdin_used+0x61b>
jae    8057cf5 <_IO_stdin_used+0x655>
popa
je     8057c93 <_IO_stdin_used+0x5f3>
popa
je     8057d0a <_IO_stdin_used+0x66a>
popa
arpl   %bp,0x0(%eax)
data16
insb   (%dx),%es:(%edi)
jne    8057d11 <_IO_stdin_used+0x671>
push   $0x7665642d
imul   $0x65740073,0x65(%ebx),%esp
jb     8057d19 <_IO_stdin_used+0x679>
imul   $0x732d6574,0x61(%esi),%ebp
gs
popa
je     8057cb7 <_IO_stdin_used+0x617>
jbe    8057d1e <_IO_stdin_used+0x67e>
jb     8057d2e <_IO_stdin_used+0x68e>
imul   $0x2d6f6e00,0x6e(%edi),%ebp
jo     8057d25 <_IO_stdin_used+0x685>
addr16
gs
jb     8057cc8 <_IO_stdin_used+0x628>
imul   $0x6c,0x6c(%ecx),%ebp
sub    $0x6f6877,%eax
jae    8057d3c <_IO_stdin_used+0x69c>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %dh,0x72(%eax)
imul   $0x6567656c,0x69(%esi),%esi
add    %ch,%fs:0x6f(%esi)
sub    $0x2d6b7361,%eax
jo     8057d4d <_IO_stdin_used+0x6ad>
jae    8057d61 <_IO_stdin_used+0x6c1>
ja     8057d5f <_IO_stdin_used+0x6bf>
jb     8057d56 <_IO_stdin_used+0x6b6>
add    %ah,0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     8057d64 <_IO_stdin_used+0x6c4>
gs
fs
gs
jae    8057d6f <_IO_stdin_used+0x6cf>
je     8057d75 <_IO_stdin_used+0x6d5>
jo     8057d36 <_IO_stdin_used+0x696>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x6e614d2e,0x31(%bp),%ebp
popa
addr16
gs
jb     8057d17 <_IO_stdin_used+0x677>
add    %ch,0x72(%edi)
addr16
cs
data16
jb     8057d84 <_IO_stdin_used+0x6e4>
gs
fs
gs
jae    8057d8f <_IO_stdin_used+0x6ef>
je     8057d95 <_IO_stdin_used+0x6f5>
jo     8057d56 <_IO_stdin_used+0x6b6>
inc    %esp
inc    %edx
jne    8057d9f <_IO_stdin_used+0x6ff>
cs
push   %eax
jb     8057d9f <_IO_stdin_used+0x6ff>
jo     8057d97 <_IO_stdin_used+0x6f7>
jb     8057da8 <_IO_stdin_used+0x708>
imul   $0x20732500,0x73(%ebp),%esp
pop    %ebx
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
cs
cs
cs
pop    %ebp
and    %bh,0x43(%ebx)
dec    %edi
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
jge    8057d72 <_IO_stdin_used+0x6d2>
cs cs or %cs:(%edx),%cl
push   %ebx
outsb  %gs:(%esi),(%dx)
and    %ah,%fs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     8057dd3 <_IO_stdin_used+0x733>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
jae    8057d8d <_IO_stdin_used+0x6ed>
je     8057dde <_IO_stdin_used+0x73e>
and    %ch,0x72(%edi)
and    %dh,0x75(%ecx)
gs
jb     8057df1 <_IO_stdin_used+0x751>
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x67(%edi,%ebp,2)
imul   $0x616e616d,0x20(%esi),%ebp
addr16
gs
jb     8057db9 <_IO_stdin_used+0x719>
or     (%edx),%cl
and    %ah,(%eax)
sub    $0x2d2d2068,%eax
push   $0x20706c65
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8057dcb <_IO_stdin_used+0x72b>
je     8057e15 <_IO_stdin_used+0x775>
imul   $0x706c6568,0x20(%ebx),%esi
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x7265762d,%eax
jae    8057e2a <_IO_stdin_used+0x78a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8057df3 <_IO_stdin_used+0x753>
jo     8057e36 <_IO_stdin_used+0x796>
arpl   %bp,0x61(%ebx)
and    %dh,%gs:0x65(%bp)
jb     8057e52 <_IO_stdin_used+0x7b2>
imul   $0x2d20200a,0x6e(%edi),%ebp
jo     8057e08 <_IO_stdin_used+0x768>
sub    $0x6f72702d,%eax
jo     8057e54 <_IO_stdin_used+0x7b4>
jb     8057e65 <_IO_stdin_used+0x7c5>
jns    8057e30 <_IO_stdin_used+0x790>
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8057e21 <_IO_stdin_used+0x781>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8057e26 <_IO_stdin_used+0x786>
jo     8057e7a <_IO_stdin_used+0x7da>
outsl  %ds:(%esi),(%dx)
jo     8057e70 <_IO_stdin_used+0x7d0>
jb     8057e81 <_IO_stdin_used+0x7e1>
imul   $0x20796220,0x73(%ebp),%esp
je     8057e7e <_IO_stdin_used+0x7de>
imul   $0x656d616e,0x20(%ebx),%esi
or     (%eax),%ah
and    %ch,0x2d2d2061
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8057e5c <_IO_stdin_used+0x7bc>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
jo     8057eaa <_IO_stdin_used+0x80a>
jb     8057ebb <_IO_stdin_used+0x81b>
imul   $0x6e69202c,0x73(%ebp),%esp
arpl   %bp,0x64(%ebp,%esi,2)
imul   $0x706d6520,0x67(%esi),%ebp
je     8057ed4 <_IO_stdin_used+0x834>
and    %ch,0x6e(%edi)
gs
jae    8057e6b <_IO_stdin_used+0x7cb>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c696b2d
insb   (%dx),%es:(%edi)
sub    $0x3d6f6877,%eax
push   %edi
dec    %eax
dec    %edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %edi
push   $0x6f74206f
and    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0xa(%edi,%ebp,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c75662d
insb   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esp
outsl  %ds:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8057ed0 <_IO_stdin_used+0x830>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x20657a69,0x73(%eax),%esi
outsl  %ds:(%esi),(%dx)
jne    8057f31 <_IO_stdin_used+0x891>
jo     8057f34 <_IO_stdin_used+0x894>
je     8057ecb <_IO_stdin_used+0x82b>
and    %ah,(%eax)
sub    $0x2d2d2073,%eax
jae    8057f33 <_IO_stdin_used+0x893>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
cmp    $0x4e474953,%eax
inc    %ecx
dec    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%edi)
imul   $0x67697320,0x68(%ebx),%esp
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
jae    8057f51 <_IO_stdin_used+0x8b1>
outsb  %ds:(%esi),(%dx)
or     %fs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x2d6f6e2d,%eax
popa
jae    8057f67 <_IO_stdin_used+0x8c7>
sub    $0x73736170,%eax
ja     8057f72 <_IO_stdin_used+0x8d2>
jb     8057f69 <_IO_stdin_used+0x8c9>
and    %ah,(%eax)
and    %al,0x6e(%edi,%ebp,2)
daa
je     8057f2e <_IO_stdin_used+0x88e>
jo     8057f82 <_IO_stdin_used+0x8e2>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     8057f88 <_IO_stdin_used+0x8e8>
and    %ah,0x6f(%esi)
jb     8057f39 <_IO_stdin_used+0x899>
jo     8057f7c <_IO_stdin_used+0x8dc>
jae    8057f90 <_IO_stdin_used+0x8f0>
ja     8057f8e <_IO_stdin_used+0x8ee>
jb     8057f85 <_IO_stdin_used+0x8e5>
or     (%eax),%ah
and    %ch,0x2d2d2048
push   $0x3d74736f
pop    %ebx
push   %ebp
push   %ebx
inc    %ebp
push   %edx
inc    %eax
pop    %ebp
dec    %eax
dec    %edi
push   %ebx
push   %esp
and    %ah,(%eax)
push   %ebx
push   $0x6920776f
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
jb     8057fb3 <_IO_stdin_used+0x913>
popa
je     8057fb2 <_IO_stdin_used+0x912>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     8057f70 <_IO_stdin_used+0x8d0>
jb     8057fb7 <_IO_stdin_used+0x917>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8057fbb <_IO_stdin_used+0x91b>
and    %ch,0x6f(%eax)
jae    8057fcf <_IO_stdin_used+0x92f>
or     (%eax),%ah
and    %ch,0x2d2d2050
jo     8057fd7 <_IO_stdin_used+0x937>
imul   $0x6567656c,0x69(%esi),%esi
and    %ah,%fs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %ecx
arpl   %si,0x75(%ecx)
imul   $0x69727020,0x65(%edx),%esi
jbe    8057feb <_IO_stdin_used+0x94b>
insb   (%dx),%es:(%edi)
gs
addr16
gs
jae    8057fa8 <_IO_stdin_used+0x908>
bound  %esp,0x66(%ebp)
outsl  %ds:(%esi),(%dx)
jb     8057ff3 <_IO_stdin_used+0x953>
and    %ah,0x78(%ebp)
arpl   %si,%gs:0x74(%ebp)
imul   $0x2020200a,0x6e(%edi),%ebp
and    %ah,(%eax)
sub    $0x2d6f6e2d,%eax
jo     8058006 <_IO_stdin_used+0x966>
addr16
gs
jb     8057fc9 <_IO_stdin_used+0x929>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8057fd9 <_IO_stdin_used+0x939>
jo     8058024 <_IO_stdin_used+0x984>
jo     8058022 <_IO_stdin_used+0x982>
and    %ch,0x75(%edi)
je     8058032 <_IO_stdin_used+0x992>
jne    8058038 <_IO_stdin_used+0x998>
and    %ch,0x6e(%ecx)
je     8058038 <_IO_stdin_used+0x998>
and    %ah,0x20(%ecx)
jo     805802f <_IO_stdin_used+0x98f>
addr16
gs
jb     8057fdc <_IO_stdin_used+0x93c>
or     0x6f(%ebx),%al
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
jae    8058016 <_IO_stdin_used+0x976>
or     (%eax),%ah
and    %ch,0x73(%ecx,%ebp,2)
je     8058011 <_IO_stdin_used+0x971>
jae    805804b <_IO_stdin_used+0x9ab>
jae    805805b <_IO_stdin_used+0x9bb>
imul   $0x20202073,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %esp
imul   $0x73657320,0x74(%ebx),%esi
jae    8058072 <_IO_stdin_used+0x9d2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8058017 <_IO_stdin_used+0x977>
and    %ah,(%eax)
jae    8058076 <_IO_stdin_used+0x9d6>
jae    8058086 <_IO_stdin_used+0x9e6>
imul   $0x6174732d,0x6e(%edi),%ebp
je     8058091 <_IO_stdin_used+0x9f1>
jae    805803e <_IO_stdin_used+0x99e>
pop    %ebx
dec    %ecx
inc    %esp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
push   $0x7320776f
gs
jae    80580ab <_IO_stdin_used+0xa0b>
imul   $0x61747320,0x6e(%edi),%ebp
je     80580b6 <_IO_stdin_used+0xa16>
jae    805804d <_IO_stdin_used+0x9ad>
and    %ah,(%eax)
jae    80580af <_IO_stdin_used+0xa0f>
outsl  %ds:(%esi),(%dx)
ja     8058077 <_IO_stdin_used+0x9d7>
jae    80580b1 <_IO_stdin_used+0xa11>
jae    80580c1 <_IO_stdin_used+0xa21>
imul   $0x44495b20,0x6e(%edi),%ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
push   $0x7020776f
jb     80580dc <_IO_stdin_used+0xa3c>
jo     80580d4 <_IO_stdin_used+0xa34>
jb     80580e5 <_IO_stdin_used+0xa45>
imul   $0x20666f20,0x73(%ebp),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     80580e8 <_IO_stdin_used+0xa48>
and    %dh,0x65(%ebx)
jae    80580fb <_IO_stdin_used+0xa5b>
imul   $0x20200a73,0x6e(%edi),%ebp
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     80580fc <_IO_stdin_used+0xa5c>
and    %bl,0x49(%ebx)
inc    %esp
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x63(%ecx)
je     805811c <_IO_stdin_used+0xa7c>
jbe    8058116 <_IO_stdin_used+0xa76>
je     805811c <_IO_stdin_used+0xa7c>
and    %ah,0x20(%ecx)
jae    8058121 <_IO_stdin_used+0xa81>
jae    8058131 <_IO_stdin_used+0xa91>
imul   $0x6c20200a,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    8058130 <_IO_stdin_used+0xa90>
jae    8058140 <_IO_stdin_used+0xaa0>
imul   $0x44495b20,0x6e(%edi),%ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
arpl   %si,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %ch,0x63(%edi,%ebp,2)
imul   $0x6f,(%eax),%esp
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     8058160 <_IO_stdin_used+0xac0>
and    %dh,0x65(%ebx)
jae    8058173 <_IO_stdin_used+0xad3>
imul   $0x20200a73,0x6e(%edi),%ebp
jne    8058177 <_IO_stdin_used+0xad7>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    8058175 <_IO_stdin_used+0xad5>
jae    8058185 <_IO_stdin_used+0xae5>
imul   $0x44495b20,0x6e(%edi),%ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
arpl   %si,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %dh,0x6e(%ebp)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     80581a5 <_IO_stdin_used+0xb05>
and    %dh,0x65(%ebx)
jae    80581b8 <_IO_stdin_used+0xb18>
imul   $0x20200a73,0x6e(%edi),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    80581b8 <_IO_stdin_used+0xb18>
jae    80581c8 <_IO_stdin_used+0xb28>
imul   $0x20202073,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
arpl   %si,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %ch,0x63(%edi,%ebp,2)
imul   $0x61,(%eax),%esp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x75(%ebx)
jb     80581f2 <_IO_stdin_used+0xb52>
outsb  %gs:(%esi),(%dx)
je     80581a4 <_IO_stdin_used+0xb04>
jae    80581eb <_IO_stdin_used+0xb4b>
jae    80581fb <_IO_stdin_used+0xb5b>
imul   $0x20200a73,0x6e(%edi),%ebp
jne    80581ff <_IO_stdin_used+0xb5f>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    80581fd <_IO_stdin_used+0xb5d>
jae    805820d <_IO_stdin_used+0xb6d>
imul   $0x20202073,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
arpl   %si,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %dh,0x6e(%ebp)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x75(%ebx)
jb     8058237 <_IO_stdin_used+0xb97>
outsb  %gs:(%esi),(%dx)
je     80581e9 <_IO_stdin_used+0xb49>
jae    8058230 <_IO_stdin_used+0xb90>
jae    8058240 <_IO_stdin_used+0xba0>
imul   $0x20200a73,0x6e(%edi),%ebp
je     805823b <_IO_stdin_used+0xb9b>
jb     8058245 <_IO_stdin_used+0xba5>
imul   $0x732d6574,0x61(%esi),%ebp
gs
jae    8058255 <_IO_stdin_used+0xbb5>
imul   $0x44495b20,0x6e(%edi),%ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x72(%ebp,%eiz,2)
insl   (%dx),%es:(%edi)
imul   $0x6f206574,0x61(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     805826e <_IO_stdin_used+0xbce>
and    %dh,0x65(%ebx)
jae    8058281 <_IO_stdin_used+0xbe1>
imul   $0x20200a73,0x6e(%edi),%ebp
imul   $0x6c,0x6c(%ecx),%ebp
sub    $0x73736573,%eax
imul   $0x44495b20,0x6e(%edi),%ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
outsb  %gs:(%esi),(%dx)
and    %dh,%fs:0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
jo     80582b8 <_IO_stdin_used+0xc18>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    80582b1 <_IO_stdin_used+0xc11>
jae    805826e <_IO_stdin_used+0xbce>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x20(%ecx)
jae    80582ba <_IO_stdin_used+0xc1a>
jae    80582ca <_IO_stdin_used+0xc2a>
imul   $0x6c20200a,0x6e(%edi),%ebp
imul   $0x6573752d,0x74(%ebx),%esi
jb     80582da <_IO_stdin_used+0xc3a>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %esp
imul   $0x65737520,0x74(%ebx),%esi
jb     80582fa <_IO_stdin_used+0xc5a>
or     (%eax),%ah
and    %dh,0x73(%ebp)
gs
jb     80582bc <_IO_stdin_used+0xc1c>
jae    8058305 <_IO_stdin_used+0xc65>
popa
je     8058309 <_IO_stdin_used+0xc69>
jae    80582b6 <_IO_stdin_used+0xc16>
pop    %ebx
push   %ebp
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80582cf <_IO_stdin_used+0xc2f>
jne    8058324 <_IO_stdin_used+0xc84>
gs
jb     80582d4 <_IO_stdin_used+0xc34>
jae    805832a <_IO_stdin_used+0xc8a>
popa
je     805832e <_IO_stdin_used+0xc8e>
jae    80582c5 <_IO_stdin_used+0xc25>
and    %ah,(%eax)
jae    8058327 <_IO_stdin_used+0xc87>
outsl  %ds:(%esi),(%dx)
ja     80582ef <_IO_stdin_used+0xc4f>
jne    8058337 <_IO_stdin_used+0xc97>
gs
jb     80582e7 <_IO_stdin_used+0xc47>
pop    %ebx
push   %ebp
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8058302 <_IO_stdin_used+0xc62>
jo     8058356 <_IO_stdin_used+0xcb6>
outsl  %ds:(%esi),(%dx)
jo     805834c <_IO_stdin_used+0xcac>
jb     805835d <_IO_stdin_used+0xcbd>
imul   $0x20666f20,0x73(%ebp),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     8058360 <_IO_stdin_used+0xcc0>
and    %dh,0x73(%ebp)
gs
jb     8058374 <_IO_stdin_used+0xcd4>
or     (%eax),%ah
and    %ah,0x6e(%ebp)
popa
bound  %ebp,0x2d(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x5b207265,0x67(%esi),%ebp
push   %ebp
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x6e(%ebp)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x73207265,0x67(%esi),%ebp
je     8058396 <_IO_stdin_used+0xcf6>
je     805839c <_IO_stdin_used+0xcfc>
and    %ch,0x66(%edi)
and    %ch,0x6e(%edi)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     80583ab <_IO_stdin_used+0xd0b>
and    %dh,0x73(%ebp)
gs
jb     80583bf <_IO_stdin_used+0xd1f>
or     (%eax),%ah
and    %ah,0x73(%ecx,%ebp,2)
popa
bound  %ebp,0x2d(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x5b207265,0x67(%esi),%ebp
push   %ebp
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esp
imul   $0x20656c62,0x61(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x73207265,0x67(%esi),%ebp
je     80583e2 <_IO_stdin_used+0xd42>
je     80583e8 <_IO_stdin_used+0xd48>
and    %ch,0x66(%edi)
and    %ch,0x6e(%edi)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     80583f7 <_IO_stdin_used+0xd57>
and    %dh,0x73(%ebp)
gs
jb     805840b <_IO_stdin_used+0xd6b>
or     (%eax),%ah
and    %dh,0x72(%ebp,%eiz,2)
insl   (%dx),%es:(%edi)
imul   $0x752d6574,0x61(%esi),%ebp
jae    805840d <_IO_stdin_used+0xd6d>
jb     80583ca <_IO_stdin_used+0xd2a>
pop    %ebx
push   %ebp
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
gs
jb     805842c <_IO_stdin_used+0xd8c>
imul   $0x61206574,0x61(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x65(%ebx)
jae    8058440 <_IO_stdin_used+0xda0>
imul   $0x666f2073,0x6e(%edi),%ebp
and    %ch,0x6e(%edi)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     8058445 <_IO_stdin_used+0xda5>
and    %dh,0x73(%ebp)
gs
jb     8058459 <_IO_stdin_used+0xdb9>
or     (%eax),%ah
and    %ch,0x69(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x72657375,%eax
and    %bl,0x55(%ebx)
push   %ebx
inc    %ebp
push   %edx
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
jo     805848c <_IO_stdin_used+0xdec>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8058485 <_IO_stdin_used+0xde5>
jae    8058442 <_IO_stdin_used+0xda2>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x20(%ecx)
jne    805849c <_IO_stdin_used+0xdfc>
gs
jb     8058436 <_IO_stdin_used+0xd96>
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6165732d,0x74(%ebx),%esi
je     80584ab <_IO_stdin_used+0xe0b>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %esp
imul   $0x61657320,0x74(%ebx),%esi
je     80584cb <_IO_stdin_used+0xe2b>
or     (%eax),%ah
and    %dh,0x65(%ebx)
popa
je     805848d <_IO_stdin_used+0xded>
jae    80584d6 <_IO_stdin_used+0xe36>
popa
je     80584da <_IO_stdin_used+0xe3a>
jae    8058487 <_IO_stdin_used+0xde7>
pop    %ebx
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80584a0 <_IO_stdin_used+0xe00>
jae    80584e7 <_IO_stdin_used+0xe47>
popa
je     80584a5 <_IO_stdin_used+0xe05>
jae    80584fb <_IO_stdin_used+0xe5b>
popa
je     80584ff <_IO_stdin_used+0xe5f>
jae    8058496 <_IO_stdin_used+0xdf6>
and    %ah,(%eax)
jae    80584f8 <_IO_stdin_used+0xe58>
outsl  %ds:(%esi),(%dx)
ja     80584c0 <_IO_stdin_used+0xe20>
jae    80584fa <_IO_stdin_used+0xe5a>
popa
je     80584b8 <_IO_stdin_used+0xe18>
pop    %ebx
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80584d3 <_IO_stdin_used+0xe33>
jo     8058527 <_IO_stdin_used+0xe87>
outsl  %ds:(%esi),(%dx)
jo     805851d <_IO_stdin_used+0xe7d>
jb     805852e <_IO_stdin_used+0xe8e>
imul   $0x20666f20,0x73(%ebp),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     8058531 <_IO_stdin_used+0xe91>
and    %dh,0x65(%ebx)
popa
je     8058545 <_IO_stdin_used+0xea5>
or     (%eax),%ah
and    %ah,0x74(%ecx)
je     805853a <_IO_stdin_used+0xe9a>
arpl   %bp,0x20(%eax)
pop    %ebx
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
pop    %ebp
and    %bl,0x44(%ebx)
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x74(%ecx)
je     805855a <_IO_stdin_used+0xeba>
arpl   %bp,0x20(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     805856c <_IO_stdin_used+0xecc>
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x6f742073,0x65(%ebx),%esp
and    %ah,0x20(%ecx)
jae    805857c <_IO_stdin_used+0xedc>
popa
je     8058524 <_IO_stdin_used+0xe84>
and    %ah,(%eax)
data16
insb   (%dx),%es:(%edi)
jne    8058593 <_IO_stdin_used+0xef3>
push   $0x7665642d
imul   $0x20202073,0x65(%ebx),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esi
insb   (%dx),%es:(%edi)
jne    80585b3 <_IO_stdin_used+0xf13>
push   $0x6c6c6120
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x73736120,0x65(%ebx),%esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x61(%ecx)
je     80585bf <_IO_stdin_used+0xf1f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8058564 <_IO_stdin_used+0xec4>
and    %ah,(%eax)
je     80585c3 <_IO_stdin_used+0xf23>
jb     80585cd <_IO_stdin_used+0xf2d>
imul   $0x732d6574,0x61(%esi),%ebp
gs
popa
je     805858b <_IO_stdin_used+0xeeb>
pop    %ebx
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
cs
cs
cs
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
gs
jb     80585ed <_IO_stdin_used+0xf4d>
imul   $0x61206574,0x61(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x65(%ebx)
jae    8058601 <_IO_stdin_used+0xf61>
imul   $0x6e6f2073,0x6e(%edi),%ebp
and    %ch,0x6e(%edi)
and    %ch,%gs:0x72(%edi)
and    %ch,0x6f(%ebp)
jb     8058606 <_IO_stdin_used+0xf66>
and    %dh,0x65(%ebx)
popa
je     805861a <_IO_stdin_used+0xf7a>
or     (%eax),%al
add    %al,(%eax)
add    %ch,(%ebx)
push   %eax
inc    %ecx
dec    %ebp
and    %ch,(%ebx)
dec    %esp
dec    %ecx
inc    %edx
push   %edi
push   %edx
inc    %ecx
push   %eax
and    %ch,(%ebx)
inc    %ecx
push   %ebp
inc    %esp
dec    %ecx
push   %esp
and    %ch,(%ebx)
push   %ebx
inc    %ebp
dec    %esp
dec    %ecx
dec    %esi
push   %ebp
pop    %eax
and    %ch,(%ebx)
dec    %ecx
dec    %ebp
inc    %ecx
and    %ch,(%ebx)
push   %ebx
pop    %ecx
push   %ebx
push   %esi
dec    %ecx
dec    %esi
dec    %ecx
push   %esp
and    %ch,(%ebx)
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
push   %edx
pop    %ecx
push   %eax
push   %esp
push   %ebx
inc    %ebp
push   %esp
push   %ebp
push   %eax
and    %ch,(%ebx)
inc    %edi
inc    %ebx
push   %edx
pop    %ecx
push   %eax
push   %esp
and    %ch,(%ebx)
inc    %ecx
inc    %ebx
dec    %esp
and    %ch,(%ebx)
pop    %eax
pop    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8058669 <_IO_stdin_used+0xfc9>
jb     805867d <_IO_stdin_used+0xfdd>
and    %dh,%gs:0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x74(%ebx)
jb     8058680 <_IO_stdin_used+0xfe0>
outsb  %ds:(%esi),(%dx)
and    %ah,(%di)
jae    805864b <_IO_stdin_used+0xfab>
add    %al,(%eax)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     805864e <_IO_stdin_used+0xfae>
inc    %esp
sub    $0x20737542,%eax
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    $0xc0000073,%eax
roll   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x30,(%eax,%ecx,1)
roll   $0xd0,(%eax,%ecx,1)
rolb   $0x80,(%eax,%ecx,1)
rolb   $0x20,(%eax,%ecx,1)
rolb   $0x98,(%eax,%ecx,1)
movb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x70,(%eax,%ecx,1)
rolb   $0x18,(%eax,%ecx,1)
movb   $0xc8,(%eax,%ecx,1)
lds    (%eax,%ecx,1),%eax
add    $0x4,%ch
or     %dh,(%eax)
lds    (%eax,%ecx,1),%eax
insb   (%dx),%es:(%edi)
imul   $0x7365735f,0x74(%ebx),%esi
jae    805875b <_IO_stdin_used+0x10bb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80586f6 <_IO_stdin_used+0x1056>
jae    805876c <_IO_stdin_used+0x10cc>
popa
je     8058770 <_IO_stdin_used+0x10d0>
jae    805875c <_IO_stdin_used+0x10bc>
jo     8058771 <_IO_stdin_used+0x10d1>
outsl  %ds:(%esi),(%dx)
jo     8058767 <_IO_stdin_used+0x10c7>
jb     8058778 <_IO_stdin_used+0x10d8>
jns    8058765 <_IO_stdin_used+0x10c5>
jae    805876d <_IO_stdin_used+0x10cd>
popa
je     805870b <_IO_stdin_used+0x106b>
jae    8058781 <_IO_stdin_used+0x10e1>
popa
je     8058785 <_IO_stdin_used+0x10e5>
jae    8058771 <_IO_stdin_used+0x10d1>
jo     8058786 <_IO_stdin_used+0x10e6>
outsl  %ds:(%esi),(%dx)
jo     805877c <_IO_stdin_used+0x10dc>
jb     805878d <_IO_stdin_used+0x10ed>
jns    805877a <_IO_stdin_used+0x10da>
jne    8058790 <_IO_stdin_used+0x10f0>
gs
jb     8058720 <_IO_stdin_used+0x1080>
jae    8058796 <_IO_stdin_used+0x10f6>
popa
je     805879a <_IO_stdin_used+0x10fa>
jae    8058786 <_IO_stdin_used+0x10e6>
jo     805879b <_IO_stdin_used+0x10fb>
outsl  %ds:(%esi),(%dx)
jo     8058791 <_IO_stdin_used+0x10f1>
jb     80587a2 <_IO_stdin_used+0x1102>
jns    805878f <_IO_stdin_used+0x10ef>
jae    8058797 <_IO_stdin_used+0x10f7>
jae    80587a7 <_IO_stdin_used+0x1107>
imul   $0x69727000,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
je     805879d <_IO_stdin_used+0x10fd>
jo     80587b2 <_IO_stdin_used+0x1112>
outsl  %ds:(%esi),(%dx)
jo     80587a8 <_IO_stdin_used+0x1108>
jb     80587b9 <_IO_stdin_used+0x1119>
jns    8058747 <_IO_stdin_used+0x10a7>
jae    80587b1 <_IO_stdin_used+0x1111>
outsl  %ds:(%esi),(%dx)
ja     80587ab <_IO_stdin_used+0x110b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80587b4 <_IO_stdin_used+0x1114>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805875e <_IO_stdin_used+0x10be>
jae    80587c8 <_IO_stdin_used+0x1128>
outsl  %ds:(%esi),(%dx)
ja     8058763 <_IO_stdin_used+0x10c3>
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     80587d0 <_IO_stdin_used+0x1130>
add    %ch,0x63(%edi,%ebp,2)
imul   $0x65,0x73(%edi),%ebx
jae    80587e8 <_IO_stdin_used+0x1148>
imul   $0x696b0073,0x6e(%edi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
jae    80587e6 <_IO_stdin_used+0x1146>
jae    80587f6 <_IO_stdin_used+0x1156>
imul   $0x73696c00,0x6e(%edi),%ebp
je     80587eb <_IO_stdin_used+0x114b>
jne    8058801 <_IO_stdin_used+0x1161>
gs
jb     8058804 <_IO_stdin_used+0x1164>
add    %ah,0x6e(%ebp)
popa
bound  %ebp,0x5f(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x65007265,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
popa
bound  %ebp,0x5f(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
imul   $0x74007265,0x67(%esi),%ebp
gs
jb     805881f <_IO_stdin_used+0x117f>
imul   $0x755f6574,0x61(%esi),%ebp
jae    8058820 <_IO_stdin_used+0x1180>
jb     80587bd <_IO_stdin_used+0x111d>
je     8058824 <_IO_stdin_used+0x1184>
jb     805882e <_IO_stdin_used+0x118e>
imul   $0x755f6574,0x61(%esi),%ebp
jae    805882f <_IO_stdin_used+0x118f>
jb     80587cc <_IO_stdin_used+0x112c>
imul   $0x6c,0x6c(%ecx),%ebp
pop    %edi
jne    8058846 <_IO_stdin_used+0x11a6>
gs
jb     80587d6 <_IO_stdin_used+0x1136>
imul   $0x6c,0x6c(%ecx),%ebp
pop    %edi
jne    8058850 <_IO_stdin_used+0x11b0>
gs
jb     80587e0 <_IO_stdin_used+0x1140>
insb   (%dx),%es:(%edi)
imul   $0x6165735f,0x74(%ebx),%esi
je     805885d <_IO_stdin_used+0x11bd>
add    %ah,0x74(%ecx)
je     8058850 <_IO_stdin_used+0x11b0>
arpl   %bp,0x0(%eax)
data16
insb   (%dx),%es:(%edi)
jne    8058869 <_IO_stdin_used+0x11c9>
push   $0x7665645f
imul   $0x65740073,0x65(%ebx),%esp
jb     8058871 <_IO_stdin_used+0x11d1>
imul   $0x735f6574,0x61(%esi),%ebp
gs
popa
je     805880f <_IO_stdin_used+0x116f>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x6d5f6c74,0x63(%bp),%ebp
popa
imul   $0xd9000000,0x0(%esi),%ebp
jnp    8058828 <_IO_stdin_used+0x1188>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,%al
mov    $0x4,%ch
or     %ah,%bh
jnp    8058838 <_IO_stdin_used+0x1198>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %dh,%dh
jnp    8058848 <_IO_stdin_used+0x11a8>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %al,(%ebx)
jl     8058858 <_IO_stdin_used+0x11b8>
or     %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
scas   %es:(%edi),%al
add    $0x8,%al
(bad)
jbe    8058868 <_IO_stdin_used+0x11c8>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
scas   %es:(%edi),%al
add    $0x8,%al
cld
jbe    8058878 <_IO_stdin_used+0x11d8>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
scas   %es:(%edi),%al
add    $0x8,%al
push   %cs
jl     8058888 <_IO_stdin_used+0x11e8>
or     %al,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %dh,%al
faddl  (%eax,%ecx,1)
or     $0x7c,%al
add    $0x208,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %dh,%al
faddl  (%eax,%ecx,1)
or     0x5(%edi),%esi
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
scas   %es:(%edi),%al
add    $0x8,%al
sbb    $0x7c,%al
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
fiaddl (%eax,%ecx,1)
sub    %edi,0x8(%ebp,%eax,1)
add    (%eax),%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
(bad)
mov    $0x4,%dl
or     %dh,(%esp,%edi,2)
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %al,0x7c(%eax)
add    $0x8,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %dl,0x78(%eax)
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %dl,(%eax)
mov    $0x7c4a0804,%esp
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %dl,(%eax)
mov    $0x7c590804,%esp
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
mov    $0x7c680804,%edx
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
mov    $0x7c720804,%ecx
add    $0x208,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
mov    $0x4,%al
or     %bh,0x7c(%ebp)
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %cl,0x8057c(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,%al
aad    $0x4
or     %dl,0x8057c(%ebx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %ah,%al
fildl  (%eax,%ecx,1)
lcall  $0x0,$0x208057c
add    %al,(%ecx)
add    %al,(%eax)
add    %al,-0x25(%eax)
add    $0x8,%al
test   $0x7c,%al
add    $0x8,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %ah,-0x27(%eax)
add    $0x8,%al
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x6d5f6c74,0x63(%bp),%ebp
popa
imul   $0x7b5e0000,0x0(%esi),%ebp
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
mov    $0x7c,%bh
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %dl,%bl
test   $0x5,%al
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%eax)
add    %al,(%eax)
pop    %ss
js     80589d8 <_IO_stdin_used+0x1338>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
mov    $0x8057c,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %eax,(%eax)
add    %cl,%al
jl     80589f8 <_IO_stdin_used+0x1358>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %eax,(%eax)
add    %dl,%cl
jl     8058a08 <_IO_stdin_used+0x1368>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
push   $0x10805a8
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%eax)
add    %al,(%eax)
fdivrs 0x8(%ebp,%eax,1)
push   %eax
add    %al,(%eax)
add    %ah,%bl
jl     8058a38 <_IO_stdin_used+0x1398>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ebx)
add    %eax,(%eax)
add    %dh,%bl
jl     8058a48 <_IO_stdin_used+0x13a8>
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx,%eax,1)
add    %al,(%eax)
jo     8058ac3 <_IO_stdin_used+0x1423>
jb     8058ad7 <_IO_stdin_used+0x1437>
gs
pop    %edi
popa
jb     8058ad0 <_IO_stdin_used+0x1430>
jbe    8058a6b <_IO_stdin_used+0x13cb>
jo     8058ace <_IO_stdin_used+0x142e>
jb     8058ae2 <_IO_stdin_used+0x1442>
gs
pop    %edi
popa
jb     8058adb <_IO_stdin_used+0x143b>
jbe    8058a76 <_IO_stdin_used+0x13d6>
insl   (%dx),%es:(%edi)
popa
imul   $0x74616573,0x0(%esi),%ebp
xor    %al,(%eax)
and    %ah,(%edx)
add    %bl,0x4d(%ebx)
inc    %ecx
push   %ebx
push   %esp
inc    %ebp
push   %edx
pop    %ebp
and    %al,(%eax)
cs
cs
das
jae    8058b05 <_IO_stdin_used+0x1465>
arpl   %bp,(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x66737973,0x2f(%bp),%ebp
jae    8058ace <_IO_stdin_used+0x142e>
jae    8058b0b <_IO_stdin_used+0x146b>
outsl  %ds:(%esi),(%dx)
ja     8058ad4 <_IO_stdin_used+0x1434>
arpl   %ax,(%eax)
jne    8058b0e <_IO_stdin_used+0x146e>
gs
jbe    8058aad <_IO_stdin_used+0x140d>
imul   $0x65727000,0x6d(%ebp,%eiz,2),%esi
imul   $0x4449,0x0(%eax),%di
pop    %edi
push   %ebx
inc    %ebp
inc    %ecx
push   %esp
add    %ch,0x61(%ebp)
jae    8058b39 <_IO_stdin_used+0x1499>
gs
jb     8058af5 <_IO_stdin_used+0x1455>
outsl  %ds:(%esi),(%dx)
sub    $0x6573,%ax
popa
je     8058ad0 <_IO_stdin_used+0x1430>
and    $0x25732573,%eax
jae    8058ae1 <_IO_stdin_used+0x1441>
add    %ah,0x3a732573
and    $0x25732573,%eax
jae    8058b09 <_IO_stdin_used+0x1469>
jae    8058ae6 <_IO_stdin_used+0x1446>
jae    8058b50 <_IO_stdin_used+0x14b0>
outsl  %ds:(%esi),(%dx)
ja     8058b4a <_IO_stdin_used+0x14aa>
jae    8058b66 <_IO_stdin_used+0x14c6>
jae    8058b55 <_IO_stdin_used+0x14b5>
jae    8058b50 <_IO_stdin_used+0x14b0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ch,%gs:(%esi)
cs
das
jae    8058b6c <_IO_stdin_used+0x14cc>
arpl   %bp,(%edi)
jae    8058b66 <_IO_stdin_used+0x14c6>
popa
jb     8058b66 <_IO_stdin_used+0x14c6>
fs
das
jne    8058b79 <_IO_stdin_used+0x14d9>
imul   $0x665f6e00,0x63(%esi,%ebp,1),%ebp
fs
jae    8058b75 <_IO_stdin_used+0x14d5>
je     8058b32 <_IO_stdin_used+0x1492>
cmp    $0x2030203d,%eax
jl     8058b95 <_IO_stdin_used+0x14f5>
and    %ah,0x64(%esi)
jae    8058b83 <_IO_stdin_used+0x14e3>
je     8058b20 <_IO_stdin_used+0x1480>
jb     8058b42 <_IO_stdin_used+0x14a2>
and    %dh,%ds:(%eax)
add    %dh,0x6f(%eax)
jae    8058b9e <_IO_stdin_used+0x14fe>
imul   $0x6966,0x0(%eax),%di
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x73(%edi,%ebp,2)
je     8058b67 <_IO_stdin_used+0x14c7>
outsw  %ds:(%esi),(%dx)
jne    8058bae <_IO_stdin_used+0x150e>
add    %ah,%fs:0x71(%ecx)
jne    8058bb5 <_IO_stdin_used+0x1515>
je     8058ba9 <_IO_stdin_used+0x1509>
jne,pn 8058bbe <_IO_stdin_used+0x151e>
gs
jb     8058b4e <_IO_stdin_used+0x14ae>
popa
jno    8058bc6 <_IO_stdin_used+0x1526>
outsl  %ds:(%esi),(%dx)
je     8058bb5 <_IO_stdin_used+0x1515>
addr16 jb,pn 8058bc7 <_IO_stdin_used+0x1527>
jne    8058bca <_IO_stdin_used+0x152a>
add    %ch,(%esi)
jb     8058bce <_IO_stdin_used+0x152e>
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
gs
ja     8058b63 <_IO_stdin_used+0x14c3>
jb,pn  8058bd6 <_IO_stdin_used+0x1536>
insl   (%dx),%es:(%edi)
jae    8058bca <_IO_stdin_used+0x152a>
jbe    8058bd0 <_IO_stdin_used+0x1530>
add    %ch,(%esi)
jb     8058bdf <_IO_stdin_used+0x153f>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8058bdc <_IO_stdin_used+0x153c>
add    %ch,0x7064
imul   $0x6f,0x2d(%edi),%esp
insb   (%dx),%es:(%edi)
add    %ch,%fs:(%esi)
fs
jo     8058bee <_IO_stdin_used+0x154e>
addr16 sub $0x77656e,%eax
jae,pn 8058c03 <_IO_stdin_used+0x1563>
jo     8058b8e <_IO_stdin_used+0x14ee>
and    %cl,(%ecx)
or     0x20646600,%cl
ds
cmp    $0x63003020,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8058c05 <_IO_stdin_used+0x1565>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x64662872,0x74(%esi),%ebp
sub    %esp,(%eax)
cmp    $0x30203d,%eax
data16
fs
jae    8058bd5 <_IO_stdin_used+0x1535>
jl     8058c33 <_IO_stdin_used+0x1593>
and    %ch,0x5f(%esi)
data16
and    %bh,%fs:0x6f003020(,%edi,1)
data16
data16
add    %dh,0x65(%edx)
je     8058c29 <_IO_stdin_used+0x1589>
jne    8058bcc <_IO_stdin_used+0x152c>
jb     8058c33 <_IO_stdin_used+0x1593>
je     8058c2f <_IO_stdin_used+0x158f>
jo     8058c3b <_IO_stdin_used+0x159b>
add    %dh,%fs:0x65(%edx)
je     8058c37 <_IO_stdin_used+0x1597>
jne    8058c43 <_IO_stdin_used+0x15a3>
add    %dh,%fs:0x65(%edx)
je     8058c3f <_IO_stdin_used+0x159f>
imul   $0x5f746572,(%eax),%eax
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jne    8058bea <_IO_stdin_used+0x154a>
jb     8058c51 <_IO_stdin_used+0x15b1>
je     8058c4d <_IO_stdin_used+0x15ad>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x5f746572,(%eax),%eax
add    %dh,%fs:0x69(%eax)
and    %bh,%fs:(%esi)
cmp    $0x5f003020,%eax
jo     8058c74 <_IO_stdin_used+0x15d4>
imul   $0x636f7270,0x2f(%eax,%eax,1),%esp
das
and    $0x732f756c,%eax
je     8058c75 <_IO_stdin_used+0x15d5>
je     8058c16 <_IO_stdin_used+0x1576>
and    %ah,0x2520632a
insb   (%dx),%es:(%edi)
jne    8058c3f <_IO_stdin_used+0x159f>
add    %ch,(%edi)
jo     8058c95 <_IO_stdin_used+0x15f5>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8058c8d <_IO_stdin_used+0x15ed>
insb   (%dx),%es:(%edi)
data16
das
jae    8058ca1 <_IO_stdin_used+0x1601>
popa
je     8058c30 <_IO_stdin_used+0x1590>
das
jo     8058ca5 <_IO_stdin_used+0x1605>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8058c9d <_IO_stdin_used+0x15fd>
insb   (%dx),%es:(%edi)
data16
das
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
add    %ch,(%edi)
jo     8058cb5 <_IO_stdin_used+0x1615>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x632f756c,%eax
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
add    %dh,0x69(%eax)
and    %bh,%fs:(%esi)
and    %dh,(%eax)
add    %ch,(%edi)
jo     8058ccc <_IO_stdin_used+0x162c>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x632f756c,%eax
insl   (%dx),%es:(%edi)
fs
insb   (%dx),%es:(%edi)
imul   $0x72702f00,0x65(%esi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8058cd6 <_IO_stdin_used+0x1636>
insb   (%dx),%es:(%edi)
data16
das
gs
js     8058cdc <_IO_stdin_used+0x163c>
add    %ch,(%edi)
jo     8058ced <_IO_stdin_used+0x164d>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x652f756c,%eax
js     8058cea <_IO_stdin_used+0x164a>
add    %ah,0x69(%esi)
gs
insb   (%dx),%es:(%edi)
add    %ch,%fs:(%edi)
jo     8058d01 <_IO_stdin_used+0x1661>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x732f756c,%eax
je     8058cfa <_IO_stdin_used+0x165a>
je     8058d10 <_IO_stdin_used+0x1670>
jae    8058c9d <_IO_stdin_used+0x15fd>
push   %ebp
imul   $0x3a646947,0x0(%edx,%edi,1),%esp
add    %ah,0x68(%ebx)
popa
jb     8058d1f <_IO_stdin_used+0x167f>
gs
je     8058caf <_IO_stdin_used+0x160f>
jae    8058d25 <_IO_stdin_used+0x1685>
outsl  %ds:(%esi),(%dx)
jo     8058cb4 <_IO_stdin_used+0x1614>
jle    8058cb6 <_IO_stdin_used+0x1616>
outsb  %ds:(%esi),(%dx)
pop    %edi
gs
js     8058d1e <_IO_stdin_used+0x167e>
gs
jo     8058d32 <_IO_stdin_used+0x1692>
and    %bh,0x2030203d
jl     8058d42 <_IO_stdin_used+0x16a2>
and    %ah,0x78(%ebp)
arpl   %sp,0x70(%ebp)
je     8058cce <_IO_stdin_used+0x162e>
das
jo     8058d43 <_IO_stdin_used+0x16a3>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8058d3b <_IO_stdin_used+0x169b>
insb   (%dx),%es:(%edi)
data16
das
data16
add    %ch,%fs:(%edi)
fs
gs
jbe    8058d10 <_IO_stdin_used+0x1670>
je     8058d57 <_IO_stdin_used+0x16b7>
jns    8058d15 <_IO_stdin_used+0x1675>
add    %ch,(%edi)
fs
gs
jbe    8058d1a <_IO_stdin_used+0x167a>
je     8058d61 <_IO_stdin_used+0x16c1>
jns    8058cef <_IO_stdin_used+0x164f>
bound  %edi,0x74(%ecx)
gs
jae    8058cf5 <_IO_stdin_used+0x1655>
das
fs
gs
jbe    8058d29 <_IO_stdin_used+0x1689>
outsb  %ds:(%esi),(%dx)
jne    8058d69 <_IO_stdin_used+0x16c9>
insb   (%dx),%es:(%edi)
add    %ch,(%edi)
fs
gs
jbe    8058d33 <_IO_stdin_used+0x1693>
add    %ch,(%edi)
jae    8058d81 <_IO_stdin_used+0x16e1>
jae    8058d39 <_IO_stdin_used+0x1699>
add    %ah,0x72(%ecx,%ebp,2)
add    %ch,(%edi)
fs
gs
jbe    8058d43 <_IO_stdin_used+0x16a3>
jne    8058d88 <_IO_stdin_used+0x16e8>
popa
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
add    %dh,0x69(%ebx)
addr16 popa
fs
fs
jae    8058d89 <_IO_stdin_used+0x16e9>
je     8058d4e <_IO_stdin_used+0x16ae>
jae    8058d9b <_IO_stdin_used+0x16fb>
sub    $0x20,%al
jae    8058d95 <_IO_stdin_used+0x16f5>
sub    %esp,(%bx,%si)
cmp    $0x30203d,%eax
jne    8058da4 <_IO_stdin_used+0x1704>
popa
insl   (%dx),%es:(%edi)
sub    %ah,%gs:(%esi)
jne    8058d66 <_IO_stdin_used+0x16c6>
and    %bh,(%esi)
cmp    $0x28003020,%eax
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    %eax,%gs:(%eax)
and    %ah,0x2520632a
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
insb   (%dx),%es:(%edi)
jne    8058d7f <_IO_stdin_used+0x16df>
add    %ch,(%edi)
fs
gs
jbe    8058d94 <_IO_stdin_used+0x16f4>
arpl   %bp,0x61(%eax)
jb     8058d99 <_IO_stdin_used+0x16f9>
and    $0x75253a75,%eax
add    %dh,0x74(%eax)
jae    8058da3 <_IO_stdin_used+0x1703>
and    $0x6600756c,%eax
outsl  %ds:(%esi),(%dx)
jb     8058de9 <_IO_stdin_used+0x1749>
popa
je     8058d7f <_IO_stdin_used+0x16df>
inc    %ebx
dec    %edi
dec    %esp
push   %ebp
dec    %ebp
dec    %esi
push   %ebx
add    %cl,0x4e(%ecx,%ecx,2)
inc    %ebp
push   %ebx
add    %ch,(%edi)
jo     8058e02 <_IO_stdin_used+0x1762>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
xor    %ebp,(%edi)
jb     8058e06 <_IO_stdin_used+0x1766>
outsl  %ds:(%esi),(%dx)
je     8058d9a <_IO_stdin_used+0x16fa>
jo     8058e01 <_IO_stdin_used+0x1761>
jb     8058e01 <_IO_stdin_used+0x1761>
outsb  %gs:(%esi),(%dx)
je     8058dc2 <_IO_stdin_used+0x1722>
cmp    $0x3d,%al
and    %dh,(%ecx)
xor    %dh,(%eax)
add    %ch,0x65(%esi)
ja     8058e0c <_IO_stdin_used+0x176c>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8058e1b <_IO_stdin_used+0x177b>
and    %bh,(%esi)
cmp    $0x2f003320,%eax
fs
gs
jbe    8058ded <_IO_stdin_used+0x174d>
arpl   %bp,0x6e(%edi)
jae    8058e32 <_IO_stdin_used+0x1792>
insb   (%dx),%es:(%edi)
add    %cl,%gs:0x4b5b1b
pop    %ebx
add    %cl,0x6e(%ecx,%ebp,2)
jne    8058e4a <_IO_stdin_used+0x17aa>
add    %al,0x4e(%ecx)
push   %ebx
dec    %ecx
pop    %edi
inc    %ebx
dec    %edi
dec    %esp
dec    %edi
push   %edx
add    %dl,0x52(%eax)
inc    %ebp
push   %esp
push   %esp
pop    %ecx
pop    %edi
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
add    %ch,(%edi)
gs
je     8058e51 <_IO_stdin_used+0x17b1>
das
outsl  %ds:(%esi),(%dx)
jae    8058e1f <_IO_stdin_used+0x177f>
jb     8058e59 <_IO_stdin_used+0x17b9>
insb   (%dx),%es:(%edi)
gs
popa
jae    8058e5e <_IO_stdin_used+0x17be>
add    %cl,(%edx)
push   %edi
gs
insb   (%dx),%es:(%edi)
arpl   %bp,0x6d(%edi)
and    %dh,%gs:0x20(%edi,%ebp,2)
sbb    0x25(%ebx),%ebx
jae    8058e78 <_IO_stdin_used+0x17d8>
and    $0x305b1b73,%eax
insl   (%dx),%es:(%edi)
and    %ecx,(%edx)
add    %ch,(%edi)
and    %al,(%eax)
das
fs
gs
jbe    8058e4b <_IO_stdin_used+0x17ab>
imul   $0x2d79622f,%fs:0x6b(%ebx),%esi
and    $0x73252f73,%eax
add    %dh,0x69(%eax)
and    %bh,%fs:(%esi)
cmp    $0x66003120,%eax
outsb  %ds:(%esi),(%dx)
add    %dl,0x41(%eax)
push   %edx
push   %esp
push   %ebp
push   %ebp
dec    %ecx
inc    %esp
cmp    $0x72617000,%eax
je     8058eba <_IO_stdin_used+0x181a>
jne    8058eb0 <_IO_stdin_used+0x1810>
add    %dl,%fs:0x41(%eax)
push   %edx
push   %esp
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
cmp    $0x72617000,%eax
je     8058ec5 <_IO_stdin_used+0x1825>
popa
bound  %esp,0x6c(%ebp)
add    %ch,(%edi)
jae    8058eda <_IO_stdin_used+0x183a>
jae    8058e63 <_IO_stdin_used+0x17c3>
das
jae    8058edf <_IO_stdin_used+0x183f>
jae    8058e97 <_IO_stdin_used+0x17f7>
arpl   %bp,0x73(%ecx,%eiz,2)
jae    8058e9d <_IO_stdin_used+0x17fd>
je     8058ee4 <_IO_stdin_used+0x1844>
jns    8058ea1 <_IO_stdin_used+0x1801>
arpl   %bp,0x6e(%edi)
jae    8058ee6 <_IO_stdin_used+0x1846>
insb   (%dx),%es:(%edi)
gs
das
popa
arpl   %si,0x76(%ecx,%ebp,2)
add    %dl,%gs:0x52(%ebp,%eax,2)
dec    %ebp
cmp    $0x756e696c,%eax
js     8058e8c <_IO_stdin_used+0x17ec>
push   %esp
inc    %ebp
push   %edx
dec    %ebp
cmp    $0x30317476,%eax
xor    (%eax),%al
das
jb     8058f0f <_IO_stdin_used+0x186f>
outsb  %ds:(%esi),(%dx)
das
jo     8058f0a <_IO_stdin_used+0x186a>
jns    8058f0d <_IO_stdin_used+0x186d>
outsl  %ds:(%esi),(%dx)
jne    8058f17 <_IO_stdin_used+0x1877>
push   $0x6469702f
add    %dh,0x65(%edx)
je     8058ead <_IO_stdin_used+0x180d>
jb     8058f14 <_IO_stdin_used+0x1874>
jo     8058f1d <_IO_stdin_used+0x187d>
imul   $0x78657400,0x73(%ebp),%esp
je     8058eba <_IO_stdin_used+0x181a>
sbb    0x31(%ebx),%ebx
cmp    (%ebx),%esi
cmp    %ebp,0x0(%ebp)
sbb    0x30(%ebx),%ebx
insl   (%dx),%es:(%edi)
add    %al,0x61(%edx)
and    %ch,%fs:0x6e(%ecx)
jo     8058f44 <_IO_stdin_used+0x18a4>
je     8058efd <_IO_stdin_used+0x185d>
and    %dh,0x6c(%eax)
gs
popa
jae    8058f3d <_IO_stdin_used+0x189d>
and    %dh,0x79(%edx,%esi,2)
and    %ah,0x67(%ecx)
popa
imul   $0x746f6e00,0x2e(%esi),%ebp
imul   $0x203d3e20,0x79(%esi),%esp
xor    %al,(%eax)
jae    8058f66 <_IO_stdin_used+0x18c6>
gs
jo     8058f15 <_IO_stdin_used+0x1875>
cmp    $0x3d,%al
and    %ch,(%eax)
jae    8058f64 <_IO_stdin_used+0x18c4>
jp     8058f62 <_IO_stdin_used+0x18c2>
pop    %edi
je     8058f29 <_IO_stdin_used+0x1889>
and    %ch,0x46(%eax,%eax,1)
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jb     8058f74 <_IO_stdin_used+0x18d4>
jae    8058f76 <_IO_stdin_used+0x18d6>
je     8058f33 <_IO_stdin_used+0x1893>
je     8058f7a <_IO_stdin_used+0x18da>
jb     8058f84 <_IO_stdin_used+0x18e4>
imul   $0x25203a6c,0x61(%esi),%ebp
jae    8058f20 <_IO_stdin_used+0x1880>
pop    %edi
data16
add    %bl,0x74(%edi)
gs
insl   (%dx),%es:(%edi)
jo     8058f88 <_IO_stdin_used+0x18e8>
jo     8058f8c <_IO_stdin_used+0x18ec>
je     8058f95 <_IO_stdin_used+0x18f5>
add    %dh,0x65(%edi)
add    %bl,(%ebx)
pop    %ebx
jb     8058f50 <_IO_stdin_used+0x18b0>
pop    %ebx
dec    %eax
sbb    0x32(%ebx),%ebx
dec    %edx
add    %bl,(%ebx)
pop    %ebx
jb     8058f5b <_IO_stdin_used+0x18bb>
pop    %ebx
dec    %eax
sbb    0x33(%ebx),%ebx
dec    %edx
add    %ah,0x73(%ecx,%ebp,2)
jo     8058fb8 <_IO_stdin_used+0x1918>
popa
jns    8058f4f <_IO_stdin_used+0x18af>
xor    %dh,(%ecx)
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
cmp    %bh,(%ecx)
add    %ch,(%edx)
jne    8058fd0 <_IO_stdin_used+0x1930>
gs
jb     8058fce <_IO_stdin_used+0x192e>
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:(%edi)
bound  %ebp,0x6e(%ecx)
das
jae    8058fd3 <_IO_stdin_used+0x1933>
add    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8058fe1 <_IO_stdin_used+0x1941>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x67(%esi)
jb     8058fe9 <_IO_stdin_used+0x1949>
jne    8058fec <_IO_stdin_used+0x194c>
jae    8058fdd <_IO_stdin_used+0x193d>
insl   (%dx),%es:(%edi)
popa
js     8058fa2 <_IO_stdin_used+0x1902>
and    %dh,%ds:(%eax)
add    %ch,(%eax)
jne    8058ff7 <_IO_stdin_used+0x1957>
jae    8058ff4 <_IO_stdin_used+0x1954>
outsb  %ds:(%si),(%dx)
gs sub %esp,%fs:%gs:(%eax)
jb     8058fb3 <_IO_stdin_used+0x1913>
cmp    $0x20,%al
outsb  %ds:(%esi),(%dx)
add    %ch,0x6f(%ebp)
fs add %ch,%fs:%gs:(%edi)
jae    8059018 <_IO_stdin_used+0x1978>
jae    8058fd0 <_IO_stdin_used+0x1930>
fs
gs
jbe    8058fd4 <_IO_stdin_used+0x1934>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jne    8058fe8 <_IO_stdin_used+0x1948>
and    $0x75712f75,%eax
gs
jne    805901b <_IO_stdin_used+0x197b>
add    %ch,(%edi)
jae    8059033 <_IO_stdin_used+0x1993>
jae    8058feb <_IO_stdin_used+0x194b>
fs
gs
jbe    8058fef <_IO_stdin_used+0x194f>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jne    8059003 <_IO_stdin_used+0x1963>
and    $0x2e2e2f75,%eax
das
fs
gs
jbe    8058fd3 <_IO_stdin_used+0x1933>
push   %edx
push   %esp
dec    %ebp
dec    %ecx
dec    %esi
sub    0x69700064,%esp
and    %bh,%fs:(%esi)
and    %dh,(%ecx)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
ja     8059051 <_IO_stdin_used+0x19b1>
imul   $0x2520726f,0x66(%eax,%eiz,1),%esi
jae    8059034 <_IO_stdin_used+0x1994>
and    %ah,0x73250073
and    %ah,0x61(%esi)
imul   $0x74697720,0x64(%ebp,%eiz,2),%ebp
push   $0x72726520
outsl  %ds:(%esi),(%dx)
jb     8059033 <_IO_stdin_used+0x1993>
arpl   %bp,0x64(%edi)
and    %ah,%gs:0x25002e69
jae    805903f <_IO_stdin_used+0x199f>
jae    8059096 <_IO_stdin_used+0x19f6>
arpl   %sp,0x65(%ebx)
gs fs gs fs add %ah,%cs:%fs:%gs:0x65742073
65
jb     805909e <_IO_stdin_used+0x19fe>
imul   $0x20646574,0x61(%esi),%ebp
bound  %edi,0x20(%ecx)
jae    80590a6 <_IO_stdin_used+0x1a06>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x64002e73
imul   $0x726f7463,0x65(%edx),%esi
jns    8059050 <_IO_stdin_used+0x19b0>
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
and    %dh,%gs:0x65(%ebx)
je     8059095 <_IO_stdin_used+0x19f5>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsw  %ds:(%esi),(%dx)
jb     80590e1 <_IO_stdin_used+0x1a41>
cmp    (%eax),%ah
and    $0x6146006d,%eax
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
gs
js     80590ed <_IO_stdin_used+0x1a4d>
arpl   %si,0x74(%ebp)
and    %ah,%gs:0x25203a73
insl   (%dx),%es:(%edi)
add    %dl,0x70(%ebx)
popa
ja     8059107 <_IO_stdin_used+0x1a67>
gs and %ah,%fs:%gs:0x73612073
and    %ah,0x4600756c
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
popa
fs and %dl,%fs:0x49(%eax)
inc    %esp
and    %dh,0x20(%edi,%ebp,2)
jae    8059122 <_IO_stdin_used+0x1a82>
je     80590f9 <_IO_stdin_used+0x1a59>
and    %ah,0x61770073
imul   $0x66202928,0x64(%ecx,%ebp,2),%esi
popa
imul   $0x6d25203a,0x64(%ebp,%eiz,2),%ebp
add    %ah,0x78652073
imul   $0x63757320,0x64(%ebp,%eiz,2),%esi
arpl   %sp,0x73(%ebp)
jae    805914f <_IO_stdin_used+0x1aaf>
jne    8059157 <_IO_stdin_used+0x1ab7>
insb   (%dx),%es:(%edi)
jns    805911c <_IO_stdin_used+0x1a7c>
add    %dl,0x54(%edx)
dec    %ebp
dec    %ecx
dec    %esi
sub    (%eax),%eax
push   %ebx
dec    %ecx
inc    %edi
add    %ch,(%edi)
jae    8059176 <_IO_stdin_used+0x1ad6>
jae    805912e <_IO_stdin_used+0x1a8e>
imul   $0x6e,0x72(%ebp),%esp
gs
insb   (%dx),%es:(%edi)
das
imul   $0x65,0x78(%ebp),%esp
arpl   %bx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs gs add %ah,%fs:%gs:0x0(%edx)
and    $0x2e756c6c,%eax
and    $0x25756c6c,%eax
jae    8059121 <_IO_stdin_used+0x1a81>
and    $0x42756c6c,%eax
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
jo     8059199 <_IO_stdin_used+0x1af9>
outsb  %ds:(%esi),(%dx)
and    %ch,(%edi)
fs
gs
jbe    805916a <_IO_stdin_used+0x1aca>
je     80591b1 <_IO_stdin_used+0x1b11>
jns    8059179 <_IO_stdin_used+0x1ad9>
and    %ah,0x6c72006d
imul   $0x6f72702f,0x0(%ebp),%ebp
arpl   %bp,(%edi)
jae    80591b5 <_IO_stdin_used+0x1b15>
insb   (%dx),%es:(%edi)
data16
das
outsb  %gs:(%esi),(%dx)
jbe    80591c0 <_IO_stdin_used+0x1b20>
jb     80591c8 <_IO_stdin_used+0x1b28>
outsb  %ds:(%esi),(%dx)
add    %bl,0x76(%edi)
popa
insb   (%dx),%es:(%edi)
jne    80591c6 <_IO_stdin_used+0x1b26>
add    %ch,(%edi)
jo     80591d7 <_IO_stdin_used+0x1b37>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x652f756c,%eax
outsb  %ds:(%esi),(%dx)
jbe    80591d9 <_IO_stdin_used+0x1b39>
jb     80591e1 <_IO_stdin_used+0x1b41>
outsb  %ds:(%esi),(%dx)
add    %dh,0x72(%ebp)
insb   (%dx),%es:(%edi)
add    %ch,0x74(%eax)
je     80591ec <_IO_stdin_used+0x1b4c>
cmp    (%edi),%ch
das
add    %ch,0x74(%eax)
je     80591f4 <_IO_stdin_used+0x1b54>
jae    80591c0 <_IO_stdin_used+0x1b20>
das
das
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
cmp    %gs:(%eax),%al
imul   $0x6d003a6f,0x66(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%al
das
gs
je     8059201 <_IO_stdin_used+0x1b61>
das
imul   $0x2d647274,0x69(%esi),%ebp
jb     805920d <_IO_stdin_used+0x1b6d>
insb   (%dx),%es:(%edi)
gs
popa
jae    8059212 <_IO_stdin_used+0x1b72>
add    %bl,0x68(%edi)
add    %cl,0x4f(%eax)
dec    %ebp
inc    %ebp
add    %bl,0x27(%edx,%eiz,1)
add    %ch,(%edi)
cs add %ch,%cs:(%edi)
cs
cs
das
add    %ch,(%edi)
add    %ch,%cs:(%edi)
cs
das
add    %dl,0x54(%ebp)
inc    %esi
sub    $0x6c6f0038,%eax
fs
pop    %edi
jae    805924a <_IO_stdin_used+0x1baa>
jb     8059241 <_IO_stdin_used+0x1ba1>
outsb  %ds:(%esi),(%dx)
add    %ch,0x65(%bp)
ja     805923e <_IO_stdin_used+0x1b9e>
jae    8059255 <_IO_stdin_used+0x1bb5>
jb     805924c <_IO_stdin_used+0x1bac>
outsb  %ds:(%esi),(%dx)
add    %ch,(%bp,%si)
imul   $0x20200066,0x75(%edx),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
add    %ch,(%edi)
jae    8059271 <_IO_stdin_used+0x1bd1>
jae    8059229 <_IO_stdin_used+0x1b89>
arpl   %bp,0x73(%ecx,%eiz,2)
jae    805922f <_IO_stdin_used+0x1b8f>
jo     8059271 <_IO_stdin_used+0x1bd1>
ja     8059269 <_IO_stdin_used+0x1bc9>
jb     8059265 <_IO_stdin_used+0x1bc5>
jae    805927d <_IO_stdin_used+0x1bdd>
jo     805927a <_IO_stdin_used+0x1bda>
insb   (%dx),%es:(%edi)
jns    805920d <_IO_stdin_used+0x1b6d>
je     8059288 <_IO_stdin_used+0x1be8>
jo     8059276 <_IO_stdin_used+0x1bd6>
add    %cl,0x61(%ebp)
imul   $0x6e6f000a,0x73(%esi),%ebp
insb   (%dx),%es:(%edi)
imul   $0x72696400,0x65(%esi),%ebp
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %al,%gs:0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     805924f <_IO_stdin_used+0x1baf>
arpl   %si,0x65(%edx)
popa
je     805929a <_IO_stdin_used+0x1bfa>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8059260 <_IO_stdin_used+0x1bc0>
and    $0x25203a73,%eax
insl   (%dx),%es:(%edi)
add    %ch,(%edi)
je     80592b7 <_IO_stdin_used+0x1c17>
jo     805924c <_IO_stdin_used+0x1bac>
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x6d(%eax)
outsl  %ds:(%esi),(%dx)
and    %ah,%fs:0x25203a73
insl   (%dx),%es:(%edi)
add    %dl,0x65(%ebx)
je     8059287 <_IO_stdin_used+0x1be7>
jae    80592dd <_IO_stdin_used+0x1c3d>
imul   $0x69622079,0x6b(%ebx),%esp
je     8059292 <_IO_stdin_used+0x1bf2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x702f0073
jb     80592eb <_IO_stdin_used+0x1c4b>
arpl   %bp,(%edi)
jae    80592e5 <_IO_stdin_used+0x1c45>
insb   (%dx),%es:(%edi)
data16
das
arpl   %bp,0x64(%ebp)
insb   (%dx),%es:(%edi)
imul   $0xe2005d00,0x65(%esi),%ebp
xchg   %eax,%esp
(bad)
and    %al,(%eax)
loop   8059228 <_IO_stdin_used+0x1b88>
pushf
loop   805922b <_IO_stdin_used+0x1b8b>
addb   $0xe2,(%eax)
xchg   %eax,%esp
xchg   %eax,%esp
loop   8059232 <_IO_stdin_used+0x1b92>
addb   $0xe2,(%eax)
andb   $0x0,0x207c0020(%ebx)
jl     80592d7 <_IO_stdin_used+0x1c37>
add    %ah,0x2d(%eax)
add    %bh,(%esi)
and    %al,(%eax)
dec    %eax
push   %ebp
push   %eax
add    %cl,0x4e(%ecx)
push   %esp
add    %dl,0x55(%ecx)
dec    %ecx
push   %esp
add    %dl,0x41(%edx,%edx,2)
push   %eax
add    %al,0x42(%ecx)
push   %edx
push   %esp
add    %al,0x55(%edx)
push   %ebx
add    %al,0x50(%esi)
inc    %ebp
add    %cl,0x49(%ebx)
dec    %esp
dec    %esp
add    %dl,0x53(%ebp)
push   %edx
xor    %eax,(%eax)
push   %ebx
inc    %ebp
inc    %edi
push   %esi
add    %dl,0x53(%ebp)
push   %edx
xor    (%eax),%al
push   %eax
dec    %ecx
push   %eax
inc    %ebp
add    %dl,0x52(%ebp,%eax,2)
dec    %ebp
add    %dl,0x54(%ebx)
dec    %ebx
inc    %esi
dec    %esp
push   %esp
add    %al,0x48(%ebx)
dec    %esp
inc    %esp
add    %al,0x4f(%ebx)
dec    %esi
push   %esp
add    %dl,0x54(%ebx)
dec    %edi
push   %eax
add    %dl,0x54(%ebx,%edx,2)
push   %eax
add    %dl,0x49(%esp,%edx,2)
dec    %esi
add    %dl,0x4f(%esp,%edx,2)
push   %ebp
add    %dl,0x52(%ebp)
inc    %edi
add    %bl,0x43(%eax)
push   %eax
push   %ebp
add    %bl,0x46(%eax)
push   %ebx
pop    %edx
add    %dl,0x54(%esi)
inc    %ecx
dec    %esp
push   %edx
dec    %ebp
add    %dl,0x52(%eax)
dec    %edi
inc    %esi
add    %dl,0x49(%edi)
dec    %esi
inc    %ebx
dec    %eax
add    %dl,0x57(%eax)
push   %edx
add    %dl,0x59(%ebx)
push   %ebx
add    %ch,0x77(%edi,%ebp,2)
sub    $0x74736f63,%eax
add    %dh,0x65(%edx)
insb   (%dx),%es:(%edi)
imul   $0x74696c69,0x62(%ecx),%esp
jns    8059350 <_IO_stdin_used+0x1cb0>
je     80593ba <_IO_stdin_used+0x1d1a>
jb     80593c3 <_IO_stdin_used+0x1d23>
jne    80593bd <_IO_stdin_used+0x1d1d>
push   $0x747570
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805938c <_IO_stdin_used+0x1cec>
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8059365 <_IO_stdin_used+0x1cc5>
dec    %esp
imul   $0x55504374,0x69(%ebp),%ebp
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x455a49,0x53(%esi,%eax,2),%esi
dec    %esp
imul   $0x54414474,0x69(%ebp),%ebp
inc    %ecx
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x4b4341,0x54(%ebx,%edx,2),%esi
dec    %esp
imul   $0x524f4374,0x69(%ebp),%ebp
inc    %ebp
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x694c0053,0x53(%edx,%edx,2),%esi
insl   (%dx),%es:(%edi)
imul   $0x434f52,0x50(%esi,%ecx,2),%esi
dec    %esp
imul   $0x464f4e74,0x69(%ebp),%ebp
dec    %ecx
dec    %esp
inc    %ebp
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x434f4c4d,0x45(%ebp,%ecx,2),%esi
dec    %ebx
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x6d694c00,0x53(%ecx,%eax,2),%esi
imul   $0x534b43,0x4f(%esp,%ecx,2),%esi
dec    %esp
imul   $0x47495374,0x69(%ebp),%ebp
push   %eax
inc    %ebp
dec    %esi
inc    %esp
dec    %ecx
dec    %esi
inc    %edi
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x45555147,0x53(%ebp,%ecx,2),%esi
push   %ebp
inc    %ebp
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x4c004543,0x49(%esi,%ecx,2),%esi
imul   $0x50545274,0x69(%ebp),%ebp
push   %edx
dec    %ecx
dec    %edi
add    %cl,0x6d(%ecx,%ebp,2)
imul   $0x454d4954,0x54(%edx,%edx,2),%esi
add    %ch,0x74(%edi)
push   $0x66007265
imul   $0x74616200,0x6f(%esi),%esp
arpl   %bp,0x0(%eax)
imul   $0x656d6500,0x65(%esp,%ebp,2),%esp
jb     805949a <_IO_stdin_used+0x1dfa>
add    %ah,0x6c(%ecx)
gs
jb     80594ad <_IO_stdin_used+0x1e0d>
add    %ah,0x72(%ebx)
imul   $0x77007272,0x65(%eax,%eax,1),%esi
popa
jb     80594b5 <_IO_stdin_used+0x1e15>
imul   $0x746f6e00,0x67(%esi),%ebp
imul   $0x666e6900,0x65(%ebx),%esp
outsl  %ds:(%esi),(%dx)
add    %ah,0x62(%ebp,%eiz,2)
jne    80594c3 <_IO_stdin_used+0x1e23>
add    %ch,0x65(%ebx)
jb     80594cf <_IO_stdin_used+0x1e2f>
add    %ch,0x61(%ebp)
imul   $0x6f6d6561,0x64(%eax,%eax,1),%ebp
outsb  %ds:(%esi),(%dx)
add    %ah,0x75(%ecx)
je     80594da <_IO_stdin_used+0x1e3a>
add    %dh,0x79(%ebx)
jae    80594e3 <_IO_stdin_used+0x1e43>
outsl  %ds:(%esi),(%dx)
add    %ch,0x70(%si)
jb     805947e <_IO_stdin_used+0x1dde>
outsb  %ds:(%esi),(%dx)
gs
ja     80594f5 <_IO_stdin_used+0x1e55>
add    %dh,0x75(%ebp)
arpl   %si,0x0(%eax)
arpl   %si,0x6f(%edx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x75(%ecx)
je     80594f9 <_IO_stdin_used+0x1e59>
jo     8059505 <_IO_stdin_used+0x1e65>
imul   $0x707466,0x0(%esi),%esi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    %al,(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    %eax,(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    (%eax),%al
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    (%eax),%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    $0x0,%al
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
xor    $0x636f6c00,%eax
popa
insb   (%dx),%es:(%edi)
add    %ch,%ss:0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
aaa
add    %ah,0x78(%ebp)
imul   $0x6c696b00,0x64(%ebp,%eiz,2),%esi
insb   (%dx),%es:(%edi)
gs add %ah,%fs:%gs:0x6d(%ebp,%esi,2)
jo     805954a <_IO_stdin_used+0x1eaa>
add    %dh,%fs:0x61(%edx,%esi,2)
jo     805955c <_IO_stdin_used+0x1ebc>
gs add %dh,%fs:%gs:0x74(%ebx)
outsl  %ds:(%esi),(%dx)
jo     8059564 <_IO_stdin_used+0x1ec4>
gs add %ah,%fs:%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     8059565 <_IO_stdin_used+0x1ec5>
outsb  %ds:(%esi),(%dx)
jne    8059564 <_IO_stdin_used+0x1ec4>
add    %ch,%fs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x65(%edx)
popa
insb   (%dx),%es:(%edi)
je     8059575 <_IO_stdin_used+0x1ed5>
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x65(%edx)
jae    8059587 <_IO_stdin_used+0x1ee7>
sub    $0x6f666665,%eax
jb     805958e <_IO_stdin_used+0x1eee>
add    %al,(%eax)
and    %ah,0x2520632a
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x20(%ebp),%dh
and    $0x2520752a,%eax
sub    0x20(%ebp),%dh
and    $0x2520752a,%eax
sub    0x20(%ebp),%dh
and    $0x2520752a,%eax
sub    0x20(%ebp),%dh
and    $0x2520642a,%eax
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
sub    0x25(%eax,%eiz,1),%ah
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jne    805958e <_IO_stdin_used+0x1eee>
add    %al,(%eax)
addr16
gs
je     80595e6 <_IO_stdin_used+0x1f46>
insb   (%dx),%es:(%edi)
imul   $0x4c522874,0x69(%ebp),%ebp
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
pop    %edi
dec    %esi
dec    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
sub    $0x20,%al
es
jb     80595f8 <_IO_stdin_used+0x1f58>
sub    %esp,(%eax)
ds
cmp    $0x3020,%eax
jae    80595ff <_IO_stdin_used+0x1f5f>
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
sub    %dl,0x49(%ebx)
inc    %edi
dec    %eax
push   %ebp
push   %eax
sub    $0x20,%al
es
jae    805960a <_IO_stdin_used+0x1f6a>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
ja     80595da <_IO_stdin_used+0x1f3a>
and    %ah,(%esi)
jae    8059613 <_IO_stdin_used+0x1f73>
pop    %edi
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    %esp,%fs:(%eax)
cmp    $0x30203d,%eax
add    %al,(%eax)
add    %dh,0x69(%ebx)
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
sub    %dl,0x49(%ebx)
inc    %edi
dec    %eax
push   %ebp
push   %eax
sub    $0x20,%al
es
jae    8059636 <_IO_stdin_used+0x1f96>
pop    %edi
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
fs
sub    $0x20,%al
dec    %esi
push   %ebp
dec    %esp
dec    %esp
sub    %esp,(%eax)
cmp    $0x30203d,%eax
add    %al,(%eax)
inc    %ecx
je     805965f <_IO_stdin_used+0x1fbf>
gs
insl   (%dx),%es:(%edi)
jo     8059663 <_IO_stdin_used+0x1fc3>
gs and %dh,%fs:%gs:0x20(%edi,%ebp,2)
jb     805965c <_IO_stdin_used+0x1fbc>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8059660 <_IO_stdin_used+0x1fc0>
and    %ah,0x73(%ecx,%ebp,2)
imul   $0x66,(%eax),%esp
imul   $0x74737973,0x20(%ebp,%eiz,2),%ebp
gs
insl   (%dx),%es:(%edi)
sub    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x65(%edi)
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     805963b <_IO_stdin_used+0x1f9b>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8059641 <_IO_stdin_used+0x1fa1>
je     805968b <_IO_stdin_used+0x1feb>
popa
je     8059654 <_IO_stdin_used+0x1fb4>
add    %al,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jb     8059699 <_IO_stdin_used+0x1ff9>
popa
and    %ch,%fs:(%edi)
gs
je     805969e <_IO_stdin_used+0x1ffe>
das
outsl  %ds:(%esi),(%dx)
jae    805966c <_IO_stdin_used+0x1fcc>
jb     80596a6 <_IO_stdin_used+0x2006>
insb   (%dx),%es:(%edi)
gs
popa
jae    80596ab <_IO_stdin_used+0x200b>
cmp    (%eax),%ah
and    $0x52000073,%eax
gs
popa
and    %dh,%fs:0x6e(%ebp)
gs
js     80596c6 <_IO_stdin_used+0x2026>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x68(%ebx)
popa
jb     80596c2 <_IO_stdin_used+0x2022>
arpl   %si,0x72(%ebp,%eiz,2)
sub    $0x20,%al
jo     80596d5 <_IO_stdin_used+0x2035>
gs
popa
jae    80596d2 <_IO_stdin_used+0x2032>
and    %dh,0x79(%edx,%esi,2)
and    %ah,0x67(%ecx)
popa
imul   $0x0,0x2e(%esi),%ebp
das
jae    80596f8 <_IO_stdin_used+0x2058>
jae    80596b0 <_IO_stdin_used+0x2010>
fs
gs
jbe    80596b4 <_IO_stdin_used+0x2014>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jne    80596c8 <_IO_stdin_used+0x2028>
and    $0x61702f75,%eax
jb     8059709 <_IO_stdin_used+0x2069>
imul   $0x4100006e,0x6f(%ecx,%ebp,2),%esi
je     8059713 <_IO_stdin_used+0x2073>
gs
insl   (%dx),%es:(%edi)
jo     8059717 <_IO_stdin_used+0x2077>
gs and %dh,%fs:%gs:0x20(%edi,%ebp,2)
jb     8059710 <_IO_stdin_used+0x2070>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8059714 <_IO_stdin_used+0x2074>
and    %ah,0x6e(%ebp)
je     805971d <_IO_stdin_used+0x207d>
jb     805971b <_IO_stdin_used+0x207b>
and    %dh,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     80596dc <_IO_stdin_used+0x203c>
imul   $0x7973,0x20(%ebp,%eiz,2),%bp
jae    8059739 <_IO_stdin_used+0x2099>
gs
insl   (%dx),%es:(%edi)
sub    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x65(%edi)
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     80596f6 <_IO_stdin_used+0x2056>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80596fc <_IO_stdin_used+0x205c>
je     8059746 <_IO_stdin_used+0x20a6>
popa
je     805970f <_IO_stdin_used+0x206f>
add    %al,(%eax)
add    %ah,0x61662073
imul   $0x65756420,0x64(%ebp,%eiz,2),%ebp
and    %dh,0x20(%edi,%ebp,2)
jne    8059765 <_IO_stdin_used+0x20c5>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
popa
jae    8059771 <_IO_stdin_used+0x20d1>
outsb  %ds:(%esi),(%dx)
add    %al,%cs:(%eax)
add    %al,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsb  %gs:(%esi),(%dx)
jne    8059783 <_IO_stdin_used+0x20e3>
gs
jb     805977a <_IO_stdin_used+0x20da>
je     8059780 <_IO_stdin_used+0x20e0>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8059746 <_IO_stdin_used+0x20a6>
and    $0x25203a73,%eax
insl   (%dx),%es:(%edi)
add    %al,(%eax)
add    %al,(%eax)
and    $0x78652073,%eax
imul   $0x74697720,0x64(%ebp,%eiz,2),%esi
push   $0x69786520
je     8059764 <_IO_stdin_used+0x20c4>
jae    80597ba <_IO_stdin_used+0x211a>
popa
je     80597be <_IO_stdin_used+0x211e>
jae    805976b <_IO_stdin_used+0x20cb>
and    $0x2e69,%eax
addr16
gs
je     80597c6 <_IO_stdin_used+0x2126>
insb   (%dx),%es:(%edi)
imul   $0x65722874,0x69(%ebp),%ebp
jae    80597cd <_IO_stdin_used+0x212d>
jne    80597d2 <_IO_stdin_used+0x2132>
arpl   %sp,0x2c(%ebp)
and    %ah,(%esi)
push   $0x65686769
jae    80597e0 <_IO_stdin_used+0x2140>
sub    %esp,(%eax)
cmp    $0x30203d,%eax
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
popa
arpl   %si,0x75(%ecx)
imul   $0x72657420,0x65(%edx),%esi
insl   (%dx),%es:(%edi)
imul   $0x25203a6c,0x61(%esi),%ebp
jae    8059793 <_IO_stdin_used+0x20f3>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
fs
jne    8059811 <_IO_stdin_used+0x2171>
insb   (%dx),%es:(%edi)
imul   $0x74206574,0x61(%ebx),%esp
gs
jb     8059819 <_IO_stdin_used+0x2179>
imul   $0x6466206c,0x61(%esi),%ebp
cmp    (%eax),%ah
and    $0x72430073,%eax
gs
popa
je     8059823 <_IO_stdin_used+0x2183>
and    %dh,%fs:0x6d(%ebp,%eiz,2)
jo     8059834 <_IO_stdin_used+0x2194>
jb     8059828 <_IO_stdin_used+0x2188>
jb     8059842 <_IO_stdin_used+0x21a2>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80597f4 <_IO_stdin_used+0x2154>
and    $0x6f660073,%eax
jb     8059846 <_IO_stdin_used+0x21a6>
pop    %edi
popa
outsb  %gs:(%si),(%dx)
je     80597e2 <_IO_stdin_used+0x2142>
outsw  %ds:(%esi),(%dx)
jb     8059851 <_IO_stdin_used+0x21b1>
pop    %edi
popa
outsb  %gs:(%si),(%dx)
je     80597ed <_IO_stdin_used+0x214d>
pop    %edi
pop    %edi
jae    805985a <_IO_stdin_used+0x21ba>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     8059868 <_IO_stdin_used+0x21c8>
insl   (%dx),%es:(%edi)
pop    %edi
jae    8059871 <_IO_stdin_used+0x21d1>
jb     8059868 <_IO_stdin_used+0x21c8>
outsb  %ds:(%esi),(%dx)
add    %ch,0x6f(%si)
addr16 pop %edi
insb   (%dx),%es:(%edi)
gs
jbe    805986f <_IO_stdin_used+0x21cf>
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     805987e <_IO_stdin_used+0x21de>
insl   (%dx),%es:(%edi)
pop    %edi
jae    8059887 <_IO_stdin_used+0x21e7>
jb     805987e <_IO_stdin_used+0x21de>
outsb  %ds:(%esi),(%dx)
add    %ah,0x65(%bx)
je     805987b <_IO_stdin_used+0x21db>
jne    8059891 <_IO_stdin_used+0x21f1>
gs
jb     8059880 <_IO_stdin_used+0x21e0>
arpl   %si,0x65(%edx)
fs
jae    8059827 <_IO_stdin_used+0x2187>
jae    8059892 <_IO_stdin_used+0x21f2>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     80598a0 <_IO_stdin_used+0x2200>
insl   (%dx),%es:(%edi)
pop    %edi
jae    80598a9 <_IO_stdin_used+0x2209>
jb     80598a0 <_IO_stdin_used+0x2200>
outsb  %ds:(%esi),(%dx)
addr16 pop %edi
je     80598ae <_IO_stdin_used+0x220e>
jns    805989d <_IO_stdin_used+0x21fd>
push   $0x65647261
jb     8059845 <_IO_stdin_used+0x21a5>
ja     80598a8 <_IO_stdin_used+0x2208>
imul   $0x745f726f,0x66(%edi,%ebx,2),%esi
gs
jb     80598bf <_IO_stdin_used+0x221f>
imul   $0x65006574,0x61(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x5f657a69,0x73(%eax),%esi
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    80598d0 <_IO_stdin_used+0x2230>
pop    %edi
jo     80598d7 <_IO_stdin_used+0x2237>
jo     80598d5 <_IO_stdin_used+0x2235>
add    %ah,0x64(%esi)
pop    %edi
imul   $0x746573,0x5f(%esi),%ebp
arpl   %bp,0x73(%edi,%ebp,2)
gs
pop    %edi
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
data16
fs
jae    8059889 <_IO_stdin_used+0x21e9>
imul   $0x5f65726f,0x6e(%edi),%esp
imul   $0x6c61,0x5f(%ebp,%eiz,2),%bp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80598fa <_IO_stdin_used+0x225a>
bound  %esp,0x63(%ecx)
imul   $0x0,0x70(%ebp),%esi
imul   $0x5f65726f,0x6e(%edi),%esp
imul   $0x7369,0x0(%ebp,%eiz,2),%bp
pop    %edi
imul   $0x6e,0x72(%ebp),%esp
gs
insb   (%dx),%es:(%edi)
pop    %edi
je     8059922 <_IO_stdin_used+0x2282>
jb     8059921 <_IO_stdin_used+0x2281>
popa
add    %ah,%fs:0x65(%edi)
je     8059922 <_IO_stdin_used+0x2282>
jo     8059937 <_IO_stdin_used+0x2297>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    805992a <_IO_stdin_used+0x228a>
arpl   %bp,0x64(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x74656700,0x65(%esi),%ebp
pop    %edi
jo     805994b <_IO_stdin_used+0x22ab>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    805993e <_IO_stdin_used+0x229e>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
add    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs
pop    %edi
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dh,0x61(%ebx)
data16
gs
pop    %edi
popa
je     8059967 <_IO_stdin_used+0x22c7>
imul   $0x65666173,(%eax),%eax
pop    %edi
popa
je     8059971 <_IO_stdin_used+0x22d1>
jne    8059904 <_IO_stdin_used+0x2264>
jo     8059967 <_IO_stdin_used+0x22c7>
jb     805997b <_IO_stdin_used+0x22db>
gs
pop    %edi
jne    8059975 <_IO_stdin_used+0x22d5>
add    %dh,%fs:0x61(%eax)
jb     8059985 <_IO_stdin_used+0x22e5>
gs
pop    %edi
bound  %ebp,0x6f(%edi)
insb   (%dx),%es:(%edi)
gs
popa
outsb  %ds:(%esi),(%dx)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8059986 <_IO_stdin_used+0x22e6>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x6f6e5f72,0x74(%esi),%ebp
popaw
imul   $0x65736f6c,0x63(%eax,%eax,1),%ebp
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x74730072,0x74(%esi),%ebp
popa
jb     80599b6 <_IO_stdin_used+0x2316>
jae    80599bb <_IO_stdin_used+0x231b>
imul   $0x73646e65,0x0(%eax,%ebp,2),%esi
ja     80599b7 <_IO_stdin_used+0x2317>
je     80599b8 <_IO_stdin_used+0x2318>
add    %ch,(%esi)
cs
das
jae    80599c8 <_IO_stdin_used+0x2328>
arpl   %bp,(%edi)
jae    80599c2 <_IO_stdin_used+0x2322>
popa
jb     80599c2 <_IO_stdin_used+0x2322>
fs
das
jo     80599c2 <_IO_stdin_used+0x2322>
je     80599cb <_IO_stdin_used+0x232b>
sub    $0x6c697475,%eax
arpl   %ax,%cs:(%eax)
pop    %edi
jb     805996e <_IO_stdin_used+0x22ce>
jo     80599d1 <_IO_stdin_used+0x2331>
je     80599da <_IO_stdin_used+0x233a>
pop    %edi
gs
jno    80599eb <_IO_stdin_used+0x234b>
popa
insb   (%dx),%es:(%edi)
add    %dh,0x61(%eax)
je     80599e5 <_IO_stdin_used+0x2345>
pop    %edi
jae    80599f4 <_IO_stdin_used+0x2354>
popa
jb     80599f7 <_IO_stdin_used+0x2357>
jae    80599fc <_IO_stdin_used+0x235c>
imul   $0x68746170,0x0(%eax,%ebp,2),%esi
pop    %edi
addr16
gs
je     80599f1 <_IO_stdin_used+0x2351>
jo     80599f5 <_IO_stdin_used+0x2355>
jb     80599fb <_IO_stdin_used+0x235b>
outsb  %ds:(%esi),(%dx)
je     8059999 <_IO_stdin_used+0x22f9>
jo     80599fc <_IO_stdin_used+0x235c>
je     8059a05 <_IO_stdin_used+0x2365>
pop    %edi
addr16
gs
je     8059a01 <_IO_stdin_used+0x2361>
imul   $0x616e,0x5f(%ebp,%eiz,2),%bp
insl   (%dx),%es:(%edi)
add    %ch,%gs:(%esi)
cs
das
jae    8059a23 <_IO_stdin_used+0x2383>
arpl   %bp,(%edi)
jae    8059a1d <_IO_stdin_used+0x237d>
popa
jb     8059a1d <_IO_stdin_used+0x237d>
fs
das
je     8059a25 <_IO_stdin_used+0x2385>
insl   (%dx),%es:(%edi)
gs
sub    $0x6c697475,%eax
arpl   %ax,%cs:(%eax)
je     8059a3e <_IO_stdin_used+0x239e>
add    %ch,0x3e(%eax,%eiz,1)
and    %dh,(%eax)
add    %ah,0x59252061
sub    $0x252d6d25,%eax
and    %ah,%fs:0x4d253a48
cmp    0x5a252053,%ah
add    %ah,0x20756c6c
jns    8059a53 <_IO_stdin_used+0x23b3>
popa
jb     8059a64 <_IO_stdin_used+0x23c4>
and    %ah,0x20756c6c
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     8059a64 <_IO_stdin_used+0x23c4>
jae    8059a1e <_IO_stdin_used+0x237e>
popa
outsl  %ds:(%si),(%dx)
add    %ah,0x20756c6c
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     8059a74 <_IO_stdin_used+0x23d4>
jae    8059a2e <_IO_stdin_used+0x238e>
and    $0x20756c6c,%eax
fs
popa
jns    8059a8a <_IO_stdin_used+0x23ea>
and    %ah,0x67(%ecx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x20756c6c
ja     8059a88 <_IO_stdin_used+0x23e8>
imul   $0x25,%gs:0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jne    8059a4c <_IO_stdin_used+0x23ac>
fs
popa
jns    8059aa3 <_IO_stdin_used+0x2403>
and    %ah,0x67(%ecx)
outsl  %ds:(%esi),(%dx)
add    %dh,(%ecx)
and    %ah,0x79(%ecx,%eiz,2)
and    %ah,0x68756c6c
and    %ah,0x67(%ecx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x68756c6c
and    %ah,0x6d756c6c
imul   $0x6f6761,0x20(%esi),%ebp
and    $0x6d756c6c,%eax
imul   $0x756c6c25,0x20(%esi),%ebp
jae    8059a85 <_IO_stdin_used+0x23e5>
popa
outsl  %ds:(%si),(%dx)
add    %ah,0x6d756c6c
jae    8059a90 <_IO_stdin_used+0x23f0>
popa
outsl  %ds:(%si),(%dx)
add    %ah,0x75756c6c
jae    8059a9b <_IO_stdin_used+0x23fb>
popa
outsl  %ds:(%si),(%dx)
add    %ch,0x6f(%esi)
ja     8059a83 <_IO_stdin_used+0x23e3>
and    $0x6c6c2573,%eax
jne    8059ab8 <_IO_stdin_used+0x2418>
and    $0x6c6c2a30,%eax
jne    8059ab6 <_IO_stdin_used+0x2416>
jae    8059a93 <_IO_stdin_used+0x23f3>
and    $0x6c6c2573,%eax
jne    8059abf <_IO_stdin_used+0x241f>
jae    8059a9c <_IO_stdin_used+0x23fc>
and    $0x6c253d73,%eax
insb   (%dx),%es:(%edi)
jne    8059ac4 <_IO_stdin_used+0x2424>
and    $0xa756c6c,%eax
add    %ah,0x20696c6c
and    $0x756c6c,%eax
jne    8059b29 <_IO_stdin_used+0x2489>
arpl   %ax,%gs:(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
je     8059b29 <_IO_stdin_used+0x2489>
insl   (%dx),%es:(%edi)
gs
pop    %edi
jb     8059aed <_IO_stdin_used+0x244d>
es
js     8059af4 <_IO_stdin_used+0x2454>
and    %ah,(%esi)
je     8059b39 <_IO_stdin_used+0x2499>
sub    %eax,(%eax)
je     8059b3f <_IO_stdin_used+0x249f>
fs
popa
jns    8059ad4 <_IO_stdin_used+0x2434>
jns    8059b3b <_IO_stdin_used+0x249b>
jae    8059b4c <_IO_stdin_used+0x24ac>
gs
jb     8059b3f <_IO_stdin_used+0x249f>
popa
jns    8059ade <_IO_stdin_used+0x243e>
je     8059b4f <_IO_stdin_used+0x24af>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8059b56 <_IO_stdin_used+0x24b6>
outsl  %ds:(%esi),(%dx)
ja     8059ae7 <_IO_stdin_used+0x2447>
and    $0x6d252d79,%eax
sub    $0x25206425,%eax
dec    %eax
cmp    0x53253a4d,%ah
add    %ah,0x6d252d59
sub    $0x25206425,%eax
dec    %eax
cmp    0x53253a4d,%ah
add    %ah,0x6d252d79
sub    $0x25206425,%eax
dec    %eax
cmp    0x5925004d,%ah
sub    $0x252d6d25,%eax
and    %ah,%fs:0x4d253a48
add    %ah,0x6d252d79
sub    $0x25006425,%eax
pop    %ecx
sub    $0x252d6d25,%eax
add    %ch,%fs:0x73(%esi)
arpl   %ax,%gs:(%eax)
jae    8059ba7 <_IO_stdin_used+0x2507>
arpl   %bp,0x6e(%edi)
fs
jae    8059b48 <_IO_stdin_used+0x24a8>
jae    8059baf <_IO_stdin_used+0x250f>
arpl   %bp,0x6e(%edi)
add    %ch,%fs:0x69(%ebp)
outsb  %ds:(%esi),(%dx)
jne    8059bc8 <_IO_stdin_used+0x2528>
gs
jae    8059b57 <_IO_stdin_used+0x24b7>
insl   (%dx),%es:(%edi)
imul   $0x6d006574,0x75(%esi),%ebp
imul   $0x746e6f6d,0x0(%esi),%ebp
push   $0x6f6d0073
outsb  %ds:(%esi),(%dx)
je     8059bd6 <_IO_stdin_used+0x2536>
add    %ch,0x73(%ebp)
arpl   %ax,%gs:(%eax)
insl   (%dx),%es:(%edi)
jae    8059b77 <_IO_stdin_used+0x24d7>
push   $0x7372756f
add    %ch,0x6f(%eax)
jne    8059bf3 <_IO_stdin_used+0x2553>
add    %ch,0x72(%eax)
add    %ah,0x79(%ecx,%eiz,2)
jae    8059b8a <_IO_stdin_used+0x24ea>
ja     8059bf1 <_IO_stdin_used+0x2551>
imul   $0x77,%gs:0x0(%ebx),%esi
gs imul $0x79,%gs:(%eax),%eax
gs
popa
jb     8059c0d <_IO_stdin_used+0x256d>
add    %bh,0x65(%ecx)
popa
jb     8059ba0 <_IO_stdin_used+0x2500>
push   %ebx
jne    8059c11 <_IO_stdin_used+0x2571>
fs
popa
jns    8059ba7 <_IO_stdin_used+0x2507>
push   %ebx
jne    8059c18 <_IO_stdin_used+0x2578>
add    %cl,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
jns    8059bb2 <_IO_stdin_used+0x2512>
dec    %ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dl,0x65(%ebp,%esi,2)
jae    8059c1f <_IO_stdin_used+0x257f>
popa
jns    8059bbe <_IO_stdin_used+0x251e>
push   %esp
jne    8059c26 <_IO_stdin_used+0x2586>
add    %dl,0x65(%edi)
outsb  %fs:(%esi),(%dx)
gs
jae    8059c2d <_IO_stdin_used+0x258d>
popa
jns    8059bcc <_IO_stdin_used+0x252c>
push   %edi
gs add %dl,%fs:%gs:0x75(%eax,%ebp,2)
jb     8059c48 <_IO_stdin_used+0x25a8>
fs
popa
jns    8059bd9 <_IO_stdin_used+0x2539>
push   %esp
push   $0x72460075
imul   $0x69724600,0x79(%ecx,%eiz,2),%esp
add    %dl,0x61(%ebx)
je     8059c61 <_IO_stdin_used+0x25c1>
jb     8059c52 <_IO_stdin_used+0x25b2>
popa
jns    8059bf1 <_IO_stdin_used+0x2551>
push   %ebx
popa
je     8059bf5 <_IO_stdin_used+0x2555>
add    %al,(%eax)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x5f(%ebx)
addr16
gs
je     8059c76 <_IO_stdin_used+0x25d6>
imul   $0x6f6c6328,0x65(%ebp),%ebp
arpl   %bp,0x5f(%ebx)
imul   $0x29737426,0x20(%esp,%ebp,1),%esp
and    %bh,0x30203d
add    %al,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8059c89 <_IO_stdin_used+0x25e9>
jb     8059c9d <_IO_stdin_used+0x25fd>
and    %ah,%gs:0x69(%esi)
outsb  %ds:(%esi),(%dx)
imul   $0x6d697420,0x68(%ebx),%esi
gs
jae    8059cad <_IO_stdin_used+0x260d>
popa
insl   (%dx),%es:(%edi)
jo     8059c5d <_IO_stdin_used+0x25bd>
jbe    8059ca0 <_IO_stdin_used+0x2600>
insb   (%dx),%es:(%edi)
jne    8059ca7 <_IO_stdin_used+0x2607>
and    %ah,0x6f660073
jb     8059cb7 <_IO_stdin_used+0x2617>
popa
je     8059cac <_IO_stdin_used+0x260c>
je     8059cb8 <_IO_stdin_used+0x2618>
insl   (%dx),%es:(%edi)
gs
jae    8059cc3 <_IO_stdin_used+0x2623>
popa
outsb  %ds:(%esi),(%dx)
add    %ah,0x6f(%esi)
jb     8059cc7 <_IO_stdin_used+0x2627>
popa
je     8059cbc <_IO_stdin_used+0x261c>
je     8059cc8 <_IO_stdin_used+0x2628>
insl   (%dx),%es:(%edi)
gs
jae    8059cd7 <_IO_stdin_used+0x2637>
popa
insl   (%dx),%es:(%edi)
jo     8059c67 <_IO_stdin_used+0x25c7>
je     8059cd2 <_IO_stdin_used+0x2632>
insl   (%dx),%es:(%edi)
gs
jae    8059cdd <_IO_stdin_used+0x263d>
arpl   %bx,%gs:0x6c(%edi)
outsl  %ds:(%esi),(%dx)
popa
add    %ch,%fs:0x6f(%esi)
ja     8059c79 <_IO_stdin_used+0x25d9>
cs
cs
das
jae    8059cf0 <_IO_stdin_used+0x2650>
arpl   %bp,(%edi)
jae    8059cea <_IO_stdin_used+0x264a>
popa
jb     8059cea <_IO_stdin_used+0x264a>
fs
das
jae    8059cfd <_IO_stdin_used+0x265d>
jb     8059d01 <_IO_stdin_used+0x2661>
arpl   %ax,%cs:(%eax)
jae    8059cb0 <_IO_stdin_used+0x2610>
jl     8059d0e <_IO_stdin_used+0x266e>
and    %ch,0x3c(%eax,%eiz,1)
cmp    $0x69003020,%eax
and    %bh,0x63203d
jae    8059d17 <_IO_stdin_used+0x2677>
jb     8059d1b <_IO_stdin_used+0x267b>
pop    %edi
imul   $0x2f00,0x64(%esi),%bp
fs
gs
jbe    8059cdf <_IO_stdin_used+0x263f>
imul   $0x67,0x73(%ebp),%ebp
add    %al,0x4f(%ebx)
inc    %esp
inc    %ebp
pop    %edi
inc    %esi
push   %ebp
dec    %esi
inc    %ebx
push   %esp
dec    %ecx
dec    %edi
dec    %esi
cmp    $0x444f4300,%eax
inc    %ebp
pop    %edi
dec    %esp
dec    %ecx
dec    %esi
inc    %ebp
cmp    $0x444f4300,%eax
inc    %ebp
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
cmp    $0x53454d00,%eax
push   %ebx
inc    %ecx
inc    %edi
inc    %ebp
cmp    $0x69253c00,%eax
add    %ah,%ds:0x65252068
and    %ah,0x5b002054
and    $0x3a5d756c,%eax
and    %al,(%eax)
sub    %ah,0x75253a73
sub    %esp,(%eax)
add    %bl,(%ebx)
pop    %ebx
xor    %edi,(%ebx)
xor    (%ecx),%esi
insl   (%dx),%es:(%edi)
add    %ch,(%esi)
cs
das
jae    8059d82 <_IO_stdin_used+0x26e2>
arpl   %bp,(%edi)
jae    8059d7c <_IO_stdin_used+0x26dc>
popa
jb     8059d7c <_IO_stdin_used+0x26dc>
fs
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,%cs:(%bx,%si)
je     8059d82 <_IO_stdin_used+0x26e2>
jb     8059d8a <_IO_stdin_used+0x26ea>
gs
je     8059d46 <_IO_stdin_used+0x26a6>
ds
cmp    $0x74003020,%eax
popa
jb     8059d96 <_IO_stdin_used+0x26f6>
gs
je     8059d52 <_IO_stdin_used+0x26b2>
cmp    $0x20,%al
pop    %edi
dec    %esp
dec    %edi
inc    %edi
pop    %edi
push   %esp
inc    %ecx
push   %edx
inc    %edi
inc    %ebp
push   %esp
pop    %edi
dec    %ebp
inc    %ecx
pop    %eax
add    %ch,(%eax)
insb   (%dx),%es:(%edi)
gs
jbe    8059dae <_IO_stdin_used+0x270e>
insb   (%dx),%es:(%edi)
and    %ah,(%esi)
and    %dh,(%eax)
js     8059d80 <_IO_stdin_used+0x26e0>
aaa
sub    %esp,(%eax)
cmp    $0x656c203d,%eax
jbe    8059dbf <_IO_stdin_used+0x271f>
insb   (%dx),%es:(%edi)
add    %cl,0x75(%edi)
je     8059d80 <_IO_stdin_used+0x26e0>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8059de2 <_IO_stdin_used+0x2742>
add    %dl,%cs:0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
inc    %esp
pop    %edi
dec    %esp
dec    %edi
inc    %edi
pop    %edi
push   %esp
inc    %ecx
push   %edx
inc    %edi
inc    %ebp
push   %esp
add    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
inc    %esp
pop    %edi
dec    %esp
dec    %edi
inc    %edi
pop    %edi
dec    %esp
inc    %ebp
push   %esi
inc    %ebp
dec    %esp
add    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
inc    %esp
pop    %edi
dec    %esp
dec    %edi
inc    %edi
pop    %edi
inc    %ebx
dec    %edi
dec    %esp
dec    %edi
push   %edx
add    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
inc    %esp
pop    %edi
dec    %esp
dec    %edi
inc    %edi
pop    %edi
dec    %esp
dec    %edi
inc    %ebx
inc    %ecx
push   %esp
dec    %ecx
dec    %edi
dec    %esi
add    %ch,0x6f(%edx)
jne    8059e2d <_IO_stdin_used+0x278d>
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %ch,0x6f(%edx)
jne    8059e35 <_IO_stdin_used+0x2795>
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
sub    $0x6b2d726f,%eax
insl   (%dx),%es:(%edi)
jae    8059e35 <_IO_stdin_used+0x2795>
add    %dh,0x79(%ebx)
jae    8059e3f <_IO_stdin_used+0x279f>
outsl  %ds:(%esi),(%dx)
addr16 sub $0x6b2d726f,%eax
insl   (%dx),%es:(%edi)
jae    8059e44 <_IO_stdin_used+0x27a4>
add    %ah,0x75(%ecx)
je     8059e51 <_IO_stdin_used+0x27b1>
add    %dh,0x61(%ebx)
data16
add    %dl,%gs:0x52(%eax)
dec    %ecx
dec    %edi
push   %edx
dec    %ecx
push   %esp
pop    %ecx
cmp    $0x530a6925,%eax
pop    %ecx
push   %ebx
dec    %esp
dec    %edi
inc    %edi
pop    %edi
inc    %esi
inc    %ecx
inc    %ebx
dec    %ecx
dec    %esp
dec    %ecx
push   %esp
pop    %ecx
cmp    $0x250a6925,%eax
jae    8059e2f <_IO_stdin_used+0x278f>
sub    %cs:0x25(%ebx),%dh
jae    8059e35 <_IO_stdin_used+0x2795>
jae    8059e37 <_IO_stdin_used+0x2797>
sub    %cs:0x25(%ecx),%ch
jae    8059e3d <_IO_stdin_used+0x279d>
jae    8059e3f <_IO_stdin_used+0x279f>
sub    %cs:0x25(%ebx),%dh
jae    8059e45 <_IO_stdin_used+0x27a5>
jae    8059e47 <_IO_stdin_used+0x27a7>
sub    %cs:0x25(%ebx),%dh
jae    8059e7b <_IO_stdin_used+0x27db>
pop    %ecx
push   %ebx
dec    %esp
dec    %edi
inc    %edi
pop    %edi
dec    %ecx
inc    %esp
inc    %ebp
dec    %esi
push   %esp
dec    %ecx
inc    %esi
dec    %ecx
inc    %ebp
push   %edx
cmp    $0xa7325,%eax
add    %al,(%eax)
add    %al,0x73(%ecx)
jae    8059ea9 <_IO_stdin_used+0x2809>
jb     8059eba <_IO_stdin_used+0x281a>
imul   $0x73252720,0x6e(%edi),%ebp
daa
and    %ah,0x61(%esi)
imul   $0x20746120,0x64(%ebp,%eiz,2),%ebp
and    $0x75253a73,%eax
sub    $0x20,%al
data16
jne    8059ed1 <_IO_stdin_used+0x2831>
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ah,0x2e292873
and    %al,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jb     8059ee8 <_IO_stdin_used+0x2848>
imul   $0x2e,0x67(%esi),%ebp
add    %al,0x6f(%ebx)
fs and %dh,%fs:%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jne    8059ef2 <_IO_stdin_used+0x2852>
and    %ch,%fs:0x6f(%esi)
je     8059eac <_IO_stdin_used+0x280c>
bound  %esp,0x20(%ebp)
jb     8059ef6 <_IO_stdin_used+0x2856>
popa
arpl   %bp,0x65(%eax)
and    %ah,%fs:(%edi)
and    $0x61202773,%eax
je     8059ebf <_IO_stdin_used+0x281f>
and    $0x75253a73,%eax
sub    $0x20,%al
data16
jne    8059f17 <_IO_stdin_used+0x2877>
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ah,0x2e292873
and    %al,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jb     8059f2e <_IO_stdin_used+0x288e>
imul   $0x5f00002e,0x67(%esi),%ebp
imul   $0x3c,(%eax),%esp
and    %ch,(%eax)
jae    8059f31 <_IO_stdin_used+0x2891>
jp     8059f2f <_IO_stdin_used+0x288f>
outsl  %ds:(%esi),(%dx)
data16
sub    %bl,0x61(%edi)
jb     8059f38 <_IO_stdin_used+0x2898>
je     8059f4c <_IO_stdin_used+0x28ac>
jo     8059f3a <_IO_stdin_used+0x289a>
jae    8059f00 <_IO_stdin_used+0x2860>
das
jae    8059f43 <_IO_stdin_used+0x28a3>
jp     8059f41 <_IO_stdin_used+0x28a1>
outsl  %ds:(%esi),(%dx)
data16
sub    %ch,(%eax)
pop    %edi
popa
jb     8059f4b <_IO_stdin_used+0x28ab>
je     8059f5f <_IO_stdin_used+0x28bf>
jo     8059f4d <_IO_stdin_used+0x28ad>
jae    8059f13 <_IO_stdin_used+0x2873>
pop    %ebx
xor    %bl,0x29(%ebp)
sub    %eax,(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     8059f69 <_IO_stdin_used+0x28c9>
popa
je     8059f1f <_IO_stdin_used+0x287f>
jae    8059f75 <_IO_stdin_used+0x28d5>
jb     8059f6c <_IO_stdin_used+0x28cc>
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%bx,%di)
addr16 jne 8059f78 <_IO_stdin_used+0x28d8>
outsb  %gs:(%esi),(%dx)
je     8059f3d <_IO_stdin_used+0x289d>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8059f7d <_IO_stdin_used+0x28dd>
jb     8059f91 <_IO_stdin_used+0x28f1>
and    %ch,%gs:0x67(%edi,%ebp,2)
and    %dh,0x72(%ecx,%eiz,2)
addr16
gs
je     8059f4b <_IO_stdin_used+0x28ab>
and    $0x49202e73,%eax
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jb     8059f9e <_IO_stdin_used+0x28fe>
outsb  %ds:(%esi),(%dx)
add    %al,%cs:(%bx,%si)
add    %al,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8059fa9 <_IO_stdin_used+0x2909>
jb     8059fbd <_IO_stdin_used+0x291d>
and    %ch,%gs:0x67(%edi,%ebp,2)
and    %ch,0x76(%ebp,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x49202e73
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jb     8059fc9 <_IO_stdin_used+0x2929>
outsb  %ds:(%esi),(%dx)
add    %al,%cs:0x61(%bp)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8059fd1 <_IO_stdin_used+0x2931>
jb     8059fe5 <_IO_stdin_used+0x2945>
and    %ah,%gs:0x6f(%edx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %ah,0x49202e73
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jb     8059fec <_IO_stdin_used+0x294c>
outsb  %ds:(%esi),(%dx)
add    %ch,%cs:0x6f(%si)
addr16 pop %edi
je     8059fee <_IO_stdin_used+0x294e>
jb     8059ff6 <_IO_stdin_used+0x2956>
gs
je     8059ff1 <_IO_stdin_used+0x2951>
data16
jb     805a004 <_IO_stdin_used+0x2964>
insl   (%dx),%es:(%edi)
pop    %edi
jae    805a00d <_IO_stdin_used+0x296d>
jb     805a004 <_IO_stdin_used+0x2964>
outsb  %ds:(%esi),(%dx)
add    %ch,0x6f(%si)
addr16 pop %edi
jo     805a005 <_IO_stdin_used+0x2965>
jb     805a019 <_IO_stdin_used+0x2979>
gs
pop    %edi
outsb  %gs:(%esi),(%dx)
jbe    805a015 <_IO_stdin_used+0x2975>
jb     805a01d <_IO_stdin_used+0x297d>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     8059fb4 <_IO_stdin_used+0x2914>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16 pop %edi
jae    805a01f <_IO_stdin_used+0x297f>
je     805a01b <_IO_stdin_used+0x297b>
insl   (%dx),%es:(%edi)
popa
js     805a01f <_IO_stdin_used+0x297f>
insb   (%dx),%es:(%edi)
gs
jbe    805a029 <_IO_stdin_used+0x2989>
insb   (%dx),%es:(%edi)
add    %ch,0x67(%edi,%ebp,2)
pop    %edi
jae    805a031 <_IO_stdin_used+0x2991>
je     805a02d <_IO_stdin_used+0x298d>
je     805a031 <_IO_stdin_used+0x2991>
jb     805a039 <_IO_stdin_used+0x2999>
gs
je     8059fd5 <_IO_stdin_used+0x2935>
push   %ebx
pop    %ecx
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
inc    %esp
pop    %edi
push   %eax
inc    %ecx
inc    %edi
inc    %ebp
push   %edx
add    %ch,(%esi)
cs
das
jae    805a05a <_IO_stdin_used+0x29ba>
arpl   %bp,(%edi)
jae    805a054 <_IO_stdin_used+0x29b4>
popa
jb     805a054 <_IO_stdin_used+0x29b4>
fs
das
jo     805a054 <_IO_stdin_used+0x29b4>
addr16
gs
jb     805a025 <_IO_stdin_used+0x2985>
arpl   %ax,(%eax)
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsw  %ds:(%esi),(%dx)
jb     805a072 <_IO_stdin_used+0x29d2>
and    %dh,0x61(%eax)
addr16
gs
jb     805a048 <_IO_stdin_used+0x29a8>
and    %ah,0x5246006d
push   %ebx
pop    %eax
dec    %ebp
dec    %ebx
sub    0x0(%edi),%eax
dec    %esp
inc    %ebp
push   %ebx
push   %ebx
add    %al,0x52(%esi)
push   %ebx
pop    %eax
dec    %ebp
dec    %ebx
add    %ch,0x656c0063
jae    805a0a1 <_IO_stdin_used+0x2a01>
add    %ch,0x6f(%ebp)
jb     805a098 <_IO_stdin_used+0x29f8>
add    %cl,0x6e(%ecx)
je     805a09d <_IO_stdin_used+0x29fd>
jb     805a0a8 <_IO_stdin_used+0x2a08>
popa
insb   (%dx),%es:(%edi)
and    %dh,0x61(%eax)
addr16
gs
jb     805a063 <_IO_stdin_used+0x29c3>
popaw
imul   $0x6d25203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %si,0x65(%edx)
popa
je     805a0c5 <_IO_stdin_used+0x2a25>
and    %dh,0x61(%eax)
addr16
gs
jb     805a087 <_IO_stdin_used+0x29e7>
jo     805a0d2 <_IO_stdin_used+0x2a32>
jo     805a0d0 <_IO_stdin_used+0x2a30>
cmp    (%eax),%ah
and    $0x6146006d,%eax
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
fs
jne    805a0ed <_IO_stdin_used+0x2a4d>
insb   (%dx),%es:(%edi)
imul   $0x70206574,0x61(%ebx),%esp
popa
addr16
gs
jb     805a0aa <_IO_stdin_used+0x2a0a>
jo     805a0f5 <_IO_stdin_used+0x2a55>
jo     805a0f3 <_IO_stdin_used+0x2a53>
cmp    (%eax),%ah
and    $0x6170006d,%eax
addr16
gs
jb     805a0f8 <_IO_stdin_used+0x2a58>
popaw
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
bound  %esp,0x63(%ecx)
imul   $0x70,(%eax),%eax
popa
addr16
gs
jb     805a107 <_IO_stdin_used+0x2a67>
outsl  %ds:(%esi),(%dx)
jo     805a110 <_IO_stdin_used+0x2a70>
outsb  %ds:(%esi),(%dx)
add    %ah,0x25732573
sub    0x20(%ebp,%esi,2),%ch
and    $0x2f000a73,%eax
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a131 <_IO_stdin_used+0x2a91>
jo,pn  805a136 <_IO_stdin_used+0x2a96>
outsl  %ds:(%esi),(%dx)
arpl   %si,0x0(%ebx)
cs
cs
das
jae    805a13f <_IO_stdin_used+0x2a9f>
arpl   %bp,(%edi)
jae    805a139 <_IO_stdin_used+0x2a99>
popa
jb     805a139 <_IO_stdin_used+0x2a99>
fs
das
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a14c <_IO_stdin_used+0x2aac>
sub    $0x776f6873,%eax
arpl   %ax,%cs:(%eax)
outsb  %ds:(%esi),(%dx)
and    %bh,(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
pop    %edi
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs add %ah,%fs:%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805a16b <_IO_stdin_used+0x2acb>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a0ff <_IO_stdin_used+0x2a5f>
jae    805a171 <_IO_stdin_used+0x2ad1>
arpl   %ax,%gs:(%eax)
jae    805a16e <_IO_stdin_used+0x2ace>
outsl  %ds:(%esi),(%dx)
ja     805a168 <_IO_stdin_used+0x2ac8>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a17f <_IO_stdin_used+0x2adf>
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
gs
js     805a18b <_IO_stdin_used+0x2aeb>
jb     805a17a <_IO_stdin_used+0x2ada>
pop    %edi
bound  %edi,0x5f(%ecx)
jae    805a18f <_IO_stdin_used+0x2aef>
arpl   %ax,%gs:(%eax)
jae    805a18c <_IO_stdin_used+0x2aec>
outsl  %ds:(%esi),(%dx)
ja     805a186 <_IO_stdin_used+0x2ae6>
gs
js     805a19e <_IO_stdin_used+0x2afe>
jb     805a18d <_IO_stdin_used+0x2aed>
pop    %edi
jo     805a198 <_IO_stdin_used+0x2af8>
fs
jae    805a132 <_IO_stdin_used+0x2a92>
jae    805a19c <_IO_stdin_used+0x2afc>
outsl  %ds:(%esi),(%dx)
ja     805a196 <_IO_stdin_used+0x2af6>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a1ad <_IO_stdin_used+0x2b0d>
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
gs
js     805a1b9 <_IO_stdin_used+0x2b19>
jb     805a1a8 <_IO_stdin_used+0x2b08>
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805a1ac <_IO_stdin_used+0x2b0c>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a1c3 <_IO_stdin_used+0x2b23>
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805a1b8 <_IO_stdin_used+0x2b18>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a1cf <_IO_stdin_used+0x2b2f>
pop    %edi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
pop    %edi
bound  %edi,0x5f(%ecx)
jo     805a1ca <_IO_stdin_used+0x2b2a>
je     805a1d3 <_IO_stdin_used+0x2b33>
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805a1d0 <_IO_stdin_used+0x2b30>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a1e7 <_IO_stdin_used+0x2b47>
pop    %edi
bound  %edi,0x5f(%ecx)
jo     805a1de <_IO_stdin_used+0x2b3e>
je     805a1e7 <_IO_stdin_used+0x2b47>
add    %ch,0x6c61662d
insb   (%dx),%es:(%edi)
bound  %esp,0x63(%ecx)
imul   $0x2d,(%eax),%eax
sub    $0x69746f6e,%eax
data16
jns    805a1c1 <_IO_stdin_used+0x2b21>
data16
add    %ch,%fs:(%edi)
jne    805a20d <_IO_stdin_used+0x2b6d>
jb     805a1cb <_IO_stdin_used+0x2b2b>
bound  %ebp,0x6e(%ecx)
das
jo     805a20d <_IO_stdin_used+0x2b6d>
je     805a218 <_IO_stdin_used+0x2b78>
jns    805a207 <_IO_stdin_used+0x2b67>
outsb  %gs:(%si),(%dx)
je     805a1ab <_IO_stdin_used+0x2b0b>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsw  %ds:(%esi),(%dx)
jb     805a225 <_IO_stdin_used+0x2b85>
and    %dl,0x59(%esp,%edx,2)
and    %ah,0x73(%ecx)
imul   $0x70,(%eax),%esp
popa
jae    805a23a <_IO_stdin_used+0x2b9a>
ja     805a238 <_IO_stdin_used+0x2b98>
jb     805a22f <_IO_stdin_used+0x2b8f>
and    %ah,0x67(%ecx)
outsb  %gs:(%esi),(%dx)
je     805a20c <_IO_stdin_used+0x2b6c>
and    %ah,0x73
cs
cs
das
jae    805a24f <_IO_stdin_used+0x2baf>
arpl   %bp,(%edi)
jae    805a249 <_IO_stdin_used+0x2ba9>
popa
jb     805a249 <_IO_stdin_used+0x2ba9>
fs
das
jae    805a258 <_IO_stdin_used+0x2bb8>
popa
ja     805a259 <_IO_stdin_used+0x2bb9>
sub    $0x6b6c6f70,%eax
imul   $0x746e6567,0x61(%ebp,%ebp,1),%esi
arpl   %ax,%cs:(%eax)
jo     805a26c <_IO_stdin_used+0x2bcc>
insb   (%dx),%es:(%edi)
imul   $0x5f,0x74(%ecx),%ebp
popa
outsb  %gs:(%si),(%dx)
je     805a267 <_IO_stdin_used+0x2bc7>
outsl  %ds:(%esi),(%dx)
jo     805a270 <_IO_stdin_used+0x2bd0>
outsb  %ds:(%esi),(%dx)
add    %ch,(%esi)
cs
das
jae    805a284 <_IO_stdin_used+0x2be4>
arpl   %bp,(%edi)
jae    805a27e <_IO_stdin_used+0x2bde>
popa
jb     805a27e <_IO_stdin_used+0x2bde>
fs
das
imul   $0x2e6f,0x69(%ebp,%eiz,2),%bp
arpl   %ax,(%eax)
arpl   %bp,0x6e(%edi)
je     805a28e <_IO_stdin_used+0x2bee>
outsb  %ds:(%esi),(%dx)
je     805a29f <_IO_stdin_used+0x2bff>
add    %ah,0x6e(%esi)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x65(%esi)
ja     805a2a3 <_IO_stdin_used+0x2c03>
imul   $0x3b2300,0x65(%esi),%ebp
and    %cl,(%ecx)
or     0x605c2227,%cl
and    $0x0,%al
jb     805a2af <_IO_stdin_used+0x2c0f>
popa
fs
pop    %edi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6c69665f,0x65(%esi),%ebp
add    %ch,%gs:(%edi)
jae    805a2d7 <_IO_stdin_used+0x2c37>
jae    805a28f <_IO_stdin_used+0x2bef>
data16
jae    805a292 <_IO_stdin_used+0x2bf2>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a2d9 <_IO_stdin_used+0x2c39>
das
add    %ch,(%esi)
cs
das
jae    805a2e2 <_IO_stdin_used+0x2c42>
arpl   %bp,(%edi)
jae    805a2dc <_IO_stdin_used+0x2c3c>
popa
jb     805a2dc <_IO_stdin_used+0x2c3c>
fs
das
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a2ef <_IO_stdin_used+0x2c4f>
sub    $0x6c697475,%eax
arpl   %ax,%cs:(%eax)
das
je     805a2eb <_IO_stdin_used+0x2c4b>
jae    805a2f7 <_IO_stdin_used+0x2c57>
jae    805a28e <_IO_stdin_used+0x2bee>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
cmp    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
add    %ch,%fs:0x61(%esi)
insl   (%dx),%es:(%edi)
gs
cmp    $0x696e7500,%eax
je     805a2a6 <_IO_stdin_used+0x2c06>
das
jae    805a322 <_IO_stdin_used+0x2c82>
jae    805a31f <_IO_stdin_used+0x2c7f>
gs
insl   (%dx),%es:(%edi)
das
add    %ch,(%edi)
jne    805a325 <_IO_stdin_used+0x2c85>
gs
jb     805a2e4 <_IO_stdin_used+0x2c44>
add    %ch,(%edi)
insl   (%dx),%es:(%edi)
popa
arpl   %bp,0x69(%eax)
outsb  %ds:(%esi),(%dx)
gs
das
add    %ch,(%esi)
jae    805a328 <_IO_stdin_used+0x2c88>
jae    805a338 <_IO_stdin_used+0x2c98>
imul   $0x746f6e00,0x6e(%edi),%ebp
imul   $0x5f6e6f5f,0x79(%esi),%esp
jb     805a33a <_IO_stdin_used+0x2c9a>
insb   (%dx),%es:(%edi)
gs
popa
jae    805a33f <_IO_stdin_used+0x2c9f>
add    %dh,0x65(%edx)
insb   (%dx),%es:(%edi)
gs
popa
jae    805a347 <_IO_stdin_used+0x2ca7>
pop    %edi
popa
outsb  %gs:(%si),(%dx)
je     805a2e9 <_IO_stdin_used+0x2c49>
pop    %edi
add    %ah,0x73(%esi)
add    %ch,(%edi)
jae    805a36a <_IO_stdin_used+0x2cca>
jae    805a322 <_IO_stdin_used+0x2c82>
data16
jae    805a325 <_IO_stdin_used+0x2c85>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a36c <_IO_stdin_used+0x2ccc>
add    %dh,0x2b(%edi)
add    %dh,0x69(%ebx)
and    %bh,0x203d
xor    %al,(%eax)
and    $0xa756c,%eax
arpl   %sp,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
add    %dh,0x66(%eax)
jb     805a387 <_IO_stdin_used+0x2ce7>
insl   (%dx),%es:(%edi)
add    %ah,0x74(%ebx)
outsl  %ds:(%esi),(%dx)
add    %dh,0x74(%eax)
outsl  %ds:(%esi),(%dx)
add    %ch,(%edi)
jo     805a397 <_IO_stdin_used+0x2cf7>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    805a38f <_IO_stdin_used+0x2cef>
insb   (%dx),%es:(%edi)
data16
das
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a3a3 <_IO_stdin_used+0x2d03>
add    %ch,(%edi)
jo     805a3a9 <_IO_stdin_used+0x2d09>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
and    $0x632f756c,%eax
addr16 jb 805a3b1 <_IO_stdin_used+0x2d11>
jne    805a3b4 <_IO_stdin_used+0x2d14>
add    %ch,(%eax,%eax,1)
das
jae    805a3c3 <_IO_stdin_used+0x2d23>
jae    805a3c0 <_IO_stdin_used+0x2d20>
gs
insl   (%dx),%es:(%edi)
add    %ch,(%edi)
jne    805a3c5 <_IO_stdin_used+0x2d25>
gs
jb     805a355 <_IO_stdin_used+0x2cb5>
das
insl   (%dx),%es:(%edi)
popa
arpl   %bp,0x69(%eax)
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x65(%edx)
jae    805a3d7 <_IO_stdin_used+0x2d37>
insb   (%dx),%es:(%edi)
je     805a365 <_IO_stdin_used+0x2cc5>
popa
je     805a3dc <_IO_stdin_used+0x2d3c>
jb     805a36a <_IO_stdin_used+0x2cca>
add    %al,(%eax)
xor    %dh,(%ecx)
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
cmp    %bh,(%ecx)
popa
bound  %esp,0x64(%ebx)
gs
addr16 pushw $0x6a69
imul   $0x6f,0x6e(%ebp,%ebp,2),%ebp
jo     805a3f8 <_IO_stdin_used+0x2d58>
jb     805a3fc <_IO_stdin_used+0x2d5c>
je     805a400 <_IO_stdin_used+0x2d60>
jbe    805a404 <_IO_stdin_used+0x2d64>
js     805a408 <_IO_stdin_used+0x2d68>
jp     805a3d2 <_IO_stdin_used+0x2d32>
inc    %edx
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
dec    %ecx
dec    %edx
dec    %ebx
dec    %esp
dec    %ebp
dec    %esi
dec    %edi
push   %eax
push   %ecx
push   %edx
push   %ebx
push   %esp
push   %ebp
push   %esi
push   %edi
pop    %eax
pop    %ecx
pop    %edx
pop    %edi
add    %al,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805a423 <_IO_stdin_used+0x2d83>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a3d7 <_IO_stdin_used+0x2d37>
and    $0x73692073,%eax
and    %ch,0x6f(%esi)
je     805a3e1 <_IO_stdin_used+0x2d41>
jbe    805a424 <_IO_stdin_used+0x2d84>
insb   (%dx),%es:(%edi)
imul   $0x6f6d6572,0x20(%esp,%ebp,1),%esp
jbe    805a437 <_IO_stdin_used+0x2d97>
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%bp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805a44d <_IO_stdin_used+0x2dad>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a454 <_IO_stdin_used+0x2db4>
and    %ch,0x73(%ecx,%ebp,2)
je     805a415 <_IO_stdin_used+0x2d75>
add    %al,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805a45f <_IO_stdin_used+0x2dbf>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a413 <_IO_stdin_used+0x2d73>
and    $0x73692073,%eax
and    %ch,0x6f(%esi)
je     805a41d <_IO_stdin_used+0x2d7d>
popa
jbe    805a461 <_IO_stdin_used+0x2dc1>
imul   $0x202c656c,0x62(%ecx,%eiz,2),%ebp
jb     805a46f <_IO_stdin_used+0x2dcf>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805a477 <_IO_stdin_used+0x2dd7>
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%bp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805a48d <_IO_stdin_used+0x2ded>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a494 <_IO_stdin_used+0x2df4>
and    %ch,0x73(%ecx,%ebp,2)
je     805a455 <_IO_stdin_used+0x2db5>
add    %ah,0x67(%ebx)
pop    %edi
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%di)
gs
pop    %edi
jo     805a495 <_IO_stdin_used+0x2df5>
je     805a49e <_IO_stdin_used+0x2dfe>
add    %ah,0x67(%ebx)
pop    %edi
jae    805a4ac <_IO_stdin_used+0x2e0c>
insb   (%dx),%es:(%edi)
imul   $0x636570,0x73(%edi,%ebx,2),%esi
arpl   %sp,0x5f(%edi)
imul   $0x74706d65,0x5f(%ebx),%esi
jns    805a4b0 <_IO_stdin_used+0x2e10>
jb     805a4b8 <_IO_stdin_used+0x2e18>
arpl   %si,0x72(%ebp)
jae    805a4c1 <_IO_stdin_used+0x2e21>
jbe    805a4bf <_IO_stdin_used+0x2e1f>
add    %ah,0x67(%ebx)
pop    %edi
imul   $0x74706d65,0x5f(%ebx),%esi
jns    805a467 <_IO_stdin_used+0x2dc7>
arpl   %sp,0x5f(%edi)
jo     805a4d5 <_IO_stdin_used+0x2e35>
fs
pop    %edi
addr16
gs
je     805a4d1 <_IO_stdin_used+0x2e31>
jo     805a4d5 <_IO_stdin_used+0x2e35>
je     805a4de <_IO_stdin_used+0x2e3e>
add    %ah,0x67(%ebx)
pop    %edi
addr16
gs
je     805a4dd <_IO_stdin_used+0x2e3d>
jo     805a4e1 <_IO_stdin_used+0x2e41>
je     805a4ea <_IO_stdin_used+0x2e4a>
add    %ch,0x6f(%esi)
jb     805a4f4 <_IO_stdin_used+0x2e54>
popa
insb   (%dx),%es:(%edi)
imul   $0x6e6f635f,0x65(%edx),%edi
je     805a504 <_IO_stdin_used+0x2e64>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a498 <_IO_stdin_used+0x2df8>
arpl   %sp,0x5f(%edi)
jb     805a502 <_IO_stdin_used+0x2e62>
popa
fs
pop    %edi
jae    805a517 <_IO_stdin_used+0x2e77>
bound  %esp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a518 <_IO_stdin_used+0x2e78>
add    %ah,0x67(%ebx)
pop    %edi
outsb  %gs:(%esi),(%dx)
jne    805a51d <_IO_stdin_used+0x2e7d>
gs
jb     805a514 <_IO_stdin_used+0x2e74>
je     805a51a <_IO_stdin_used+0x2e7a>
pop    %edi
jae    805a52d <_IO_stdin_used+0x2e8d>
bound  %esp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a52e <_IO_stdin_used+0x2e8e>
jae    805a4c0 <_IO_stdin_used+0x2e20>
arpl   %sp,0x5f(%edi)
jb     805a52a <_IO_stdin_used+0x2e8a>
popa
fs
pop    %edi
jo     805a533 <_IO_stdin_used+0x2e93>
add    %ah,%fs:0x67(%ebx)
pop    %edi
outsb  %gs:(%esi),(%dx)
jne    805a540 <_IO_stdin_used+0x2ea0>
gs
jb     805a537 <_IO_stdin_used+0x2e97>
je     805a53d <_IO_stdin_used+0x2e9d>
pop    %edi
je     805a53c <_IO_stdin_used+0x2e9c>
jae    805a548 <_IO_stdin_used+0x2ea8>
jae    805a4df <_IO_stdin_used+0x2e3f>
add    %dh,0x6e(%ebp)
imul   $0x68746170,0x3a(%eax),%edi
cmp    $0x7379732f,%eax
das
data16
jae    805a521 <_IO_stdin_used+0x2e81>
arpl   %sp,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805a568 <_IO_stdin_used+0x2ec8>
das
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a532 <_IO_stdin_used+0x2e92>
jae    805a574 <_IO_stdin_used+0x2ed4>
arpl   %bp,0x0(%ebx)
das
outsl  %ds:(%esi),(%dx)
jb     805a573 <_IO_stdin_used+0x2ed3>
das
insb   (%dx),%es:(%edi)
imul   $0x6e6f6378,0x75(%esi),%ebp
je     805a578 <_IO_stdin_used+0x2ed8>
imul   $0x632f7372,0x65(%esi),%ebp
insl   (%dx),%es:(%di)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a527 <_IO_stdin_used+0x2e87>
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a56c <_IO_stdin_used+0x2ecc>
and    %al,0x72(%ebp)
jb     805a5a6 <_IO_stdin_used+0x2f06>
jb     805a559 <_IO_stdin_used+0x2eb9>
outsl  %ds:(%esi),(%dx)
jo     805a5a1 <_IO_stdin_used+0x2f01>
outsb  %ds:(%esi),(%dx)
imul   $0x6f727020,0x67(%esi),%ebp
js     805a5bf <_IO_stdin_used+0x2f1f>
cmp    (%eax),%ah
and    $0x63000073,%eax
insl   (%dx),%es:(%di)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a590 <_IO_stdin_used+0x2ef0>
and    %al,0x72(%ebp)
jb     805a5ca <_IO_stdin_used+0x2f2a>
jb     805a57d <_IO_stdin_used+0x2edd>
jo     805a5c8 <_IO_stdin_used+0x2f28>
outsb  %ds:(%esi),(%dx)
imul   $0x6e616d20,0x67(%bp),%ebp
popa
addr16
gs
jb     805a5a7 <_IO_stdin_used+0x2f07>
and    %ah,0x73
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a5b8 <_IO_stdin_used+0x2f18>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
arpl   %si,0x65(%edx)
popa
je     805a5ee <_IO_stdin_used+0x2f4e>
and    %ah,0x6f(%esi)
jb     805a5ae <_IO_stdin_used+0x2f0e>
arpl   %bp,0x6e(%edi)
je     805a605 <_IO_stdin_used+0x2f65>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a5d6 <_IO_stdin_used+0x2f36>
and    $0x63202c73,%eax
addr16 jb 805a610 <_IO_stdin_used+0x2f70>
jne    805a613 <_IO_stdin_used+0x2f73>
pop    %edi
jo     805a607 <_IO_stdin_used+0x2f67>
je     805a610 <_IO_stdin_used+0x2f70>
cmp    $0x66207325,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a5fc <_IO_stdin_used+0x2f5c>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
jb     805a62e <_IO_stdin_used+0x2f8e>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805a632 <_IO_stdin_used+0x2f92>
and    %ah,0x6f(%esi)
jb     805a5f2 <_IO_stdin_used+0x2f52>
arpl   %bp,0x6e(%edi)
je     805a649 <_IO_stdin_used+0x2fa9>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a61a <_IO_stdin_used+0x2f7a>
and    $0x63202c73,%eax
addr16 jb 805a654 <_IO_stdin_used+0x2fb4>
jne    805a657 <_IO_stdin_used+0x2fb7>
pop    %edi
jo     805a64b <_IO_stdin_used+0x2fab>
je     805a654 <_IO_stdin_used+0x2fb4>
cmp    $0x202c7325,%eax
jb     805a658 <_IO_stdin_used+0x2fb8>
arpl   %si,0x72(%ebp)
jae    805a661 <_IO_stdin_used+0x2fc1>
jbe    805a65f <_IO_stdin_used+0x2fbf>
cmp    $0x66206425,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
add    %al,(%eax)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a650 <_IO_stdin_used+0x2fb0>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
jb     805a682 <_IO_stdin_used+0x2fe2>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805a686 <_IO_stdin_used+0x2fe6>
and    %ah,0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
cmp    0x69642073,%ah
and    %ch,%fs:0x6f(%esi)
je     805a658 <_IO_stdin_used+0x2fb8>
gs
js     805a6a4 <_IO_stdin_used+0x3004>
jae    805a6b1 <_IO_stdin_used+0x3011>
add    %al,(%eax)
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a684 <_IO_stdin_used+0x2fe4>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
addr16
gs
je     805a673 <_IO_stdin_used+0x2fd3>
outsw  %ds:(%esi),(%dx)
jb     805a677 <_IO_stdin_used+0x2fd7>
arpl   %bp,0x6e(%edi)
je     805a6ce <_IO_stdin_used+0x302e>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a69f <_IO_stdin_used+0x2fff>
and    $0x63202c73,%eax
addr16 jb 805a6d9 <_IO_stdin_used+0x3039>
jne    805a6dc <_IO_stdin_used+0x303c>
pop    %edi
jo     805a6d0 <_IO_stdin_used+0x3030>
je     805a6d9 <_IO_stdin_used+0x3039>
cmp    $0x66207325,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a6c4 <_IO_stdin_used+0x3024>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
arpl   %bp,0x6d(%eax)
outsl  %ds:(%esi),(%dx)
and    %ah,%fs:0x6f(%esi)
jb     805a6b9 <_IO_stdin_used+0x3019>
arpl   %bp,0x6e(%edi)
je     805a710 <_IO_stdin_used+0x3070>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a6e1 <_IO_stdin_used+0x3041>
and    $0x63202c73,%eax
addr16 jb 805a71b <_IO_stdin_used+0x307b>
jne    805a71e <_IO_stdin_used+0x307e>
pop    %edi
jo     805a712 <_IO_stdin_used+0x3072>
je     805a71b <_IO_stdin_used+0x307b>
cmp    $0x202c7325,%eax
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs
gs
cmp    $0x66206425,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a710 <_IO_stdin_used+0x3070>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
arpl   %bp,0x6f(%eax)
ja     805a74e <_IO_stdin_used+0x30ae>
and    %ah,0x6f(%esi)
jb     805a705 <_IO_stdin_used+0x3065>
arpl   %bp,0x6e(%edi)
je     805a75c <_IO_stdin_used+0x30bc>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a72d <_IO_stdin_used+0x308d>
and    $0x63202c73,%eax
addr16 jb 805a767 <_IO_stdin_used+0x30c7>
jne    805a76a <_IO_stdin_used+0x30ca>
pop    %edi
jo     805a75e <_IO_stdin_used+0x30be>
je     805a767 <_IO_stdin_used+0x30c7>
cmp    $0x202c7325,%eax
jne    805a76f <_IO_stdin_used+0x30cf>
fs
cmp    $0x202c6425,%eax
imul   $0x66206425,0x3d(%si),%esp
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a764 <_IO_stdin_used+0x30c4>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6968635f,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
fs
jb     805a7a0 <_IO_stdin_used+0x3100>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     805a761 <_IO_stdin_used+0x30c1>
arpl   %bp,0x6e(%edi)
je     805a7b8 <_IO_stdin_used+0x3118>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a789 <_IO_stdin_used+0x30e9>
and    $0x63202c73,%eax
addr16 jb 805a7c3 <_IO_stdin_used+0x3123>
jne    805a7c6 <_IO_stdin_used+0x3126>
pop    %edi
jo     805a7ba <_IO_stdin_used+0x311a>
je     805a7c3 <_IO_stdin_used+0x3123>
cmp    $0x66207325,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a7b0 <_IO_stdin_used+0x3110>
and    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
outsb  %gs:(%esi),(%dx)
je     805a7e4 <_IO_stdin_used+0x3144>
jb     805a7a1 <_IO_stdin_used+0x3101>
outsw  %ds:(%esi),(%dx)
jb     805a7a5 <_IO_stdin_used+0x3105>
arpl   %bp,0x6e(%edi)
je     805a7fc <_IO_stdin_used+0x315c>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     805a7cd <_IO_stdin_used+0x312d>
and    $0x63202c73,%eax
addr16 jb 805a807 <_IO_stdin_used+0x3167>
jne    805a80a <_IO_stdin_used+0x316a>
pop    %edi
jo     805a7fe <_IO_stdin_used+0x315e>
je     805a807 <_IO_stdin_used+0x3167>
cmp    $0x202c7325,%eax
jo     805a80f <_IO_stdin_used+0x316f>
fs
cmp    $0x66206425,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %ch,(%esi)
cs
das
jae    805a82d <_IO_stdin_used+0x318d>
arpl   %bp,(%edi)
jae    805a827 <_IO_stdin_used+0x3187>
popa
jb     805a827 <_IO_stdin_used+0x3187>
fs
das
arpl   %sp,0x6d(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
addr16
gs
jb     805a7fc <_IO_stdin_used+0x315c>
arpl   %ax,(%eax)
arpl   %sp,0x6d(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6968635f,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
fs
jb     805a845 <_IO_stdin_used+0x31a5>
outsb  %ds:(%esi),(%dx)
add    %ah,0x67(%ebx)
insl   (%dx),%es:(%edi)
pop    %edi
addr16
gs
je     805a7ea <_IO_stdin_used+0x314a>
arpl   %sp,0x6d(%edi)
pop    %edi
bound  %esi,%fs:0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x2e(%eax,%eax,1)
cs
das
jae    805a872 <_IO_stdin_used+0x31d2>
arpl   %bp,(%edi)
jae    805a86c <_IO_stdin_used+0x31cc>
popa
jb     805a86c <_IO_stdin_used+0x31cc>
fs
das
bound  %esi,%fs:0x73(%ebp)
sub    $0x6d6d6f63,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %ax,%cs:(%eax)
push   %ebx
dec    %edi
pop    %edi
push   %eax
inc    %ebp
inc    %ebp
push   %edx
inc    %ebx
push   %edx
inc    %ebp
inc    %esp
and    %ah,0x61(%esi)
imul   $0x6d25203a,0x64(%ebp,%eiz,2),%ebp
add    %bl,0x62(%edi)
jne    805a8a5 <_IO_stdin_used+0x3205>
add    %bl,0x44(%eax)
inc    %edi
pop    %edi
push   %edx
push   %ebp
dec    %esi
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
pop    %edi
inc    %esp
dec    %ecx
push   %edx
add    %dh,0x6e(%ebp)
imul   $0x68746170,0x3a(%eax),%edi
cmp    $0x732f7325,%eax
jns    805a8c6 <_IO_stdin_used+0x3226>
je     805a8ba <_IO_stdin_used+0x321a>
insl   (%dx),%es:(%edi)
fs
das
jo     805a8cc <_IO_stdin_used+0x322c>
imul   $0x75006574,0x61(%esi),%esi
jae    805a8c8 <_IO_stdin_used+0x3228>
jb     805a885 <_IO_stdin_used+0x31e5>
jl     805a8e3 <_IO_stdin_used+0x3243>
and    %ch,0x6f(%eax)
jae    805a8e0 <_IO_stdin_used+0x3240>
add    %al,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    805a894 <_IO_stdin_used+0x31f4>
fs outsb %fs:%gs:(%esi),(%dx)
imul   $0x74616400,0x64(%ebp),%esp
popa
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
jo     805a8ea <_IO_stdin_used+0x324a>
jb     805a8fb <_IO_stdin_used+0x325b>
imul   $0x6f725000,0x73(%ebp),%esp
jo     805a8f5 <_IO_stdin_used+0x3255>
jb     805a906 <_IO_stdin_used+0x3266>
imul   $0x6e616843,0x73(%ebp),%esp
gs add %bh,%fs:%gs:0x73(%bp,%di)
jbe    805a91e <_IO_stdin_used+0x327e>
add    %ch,0x65(%ebp)
jae    805a919 <_IO_stdin_used+0x3279>
popa
add    %cl,%gs:0x6e(%bx,%di)
je     805a920 <_IO_stdin_used+0x3280>
outsl  %ds:(%esi),(%dx)
jae    805a921 <_IO_stdin_used+0x3281>
arpl   %si,%gs:0x47(%eax,%eax,1)
gs
je     805a8b9 <_IO_stdin_used+0x3219>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%ecx)
je     805a92a <_IO_stdin_used+0x328a>
jb     805a92d <_IO_stdin_used+0x328d>
popa
arpl   %sp,0x0(%ebp)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
jo     805a93d <_IO_stdin_used+0x329d>
jb     805a94e <_IO_stdin_used+0x32ae>
jns    805a8dc <_IO_stdin_used+0x323c>
push   %ebx
gs
je     805a8e0 <_IO_stdin_used+0x3240>
push   %eax
jb     805a952 <_IO_stdin_used+0x32b2>
jo     805a94a <_IO_stdin_used+0x32aa>
jb     805a95b <_IO_stdin_used+0x32bb>
jns    805a909 <_IO_stdin_used+0x3269>
jb     805a950 <_IO_stdin_used+0x32b0>
popa
fs
sub    $0x796c6e6f,%eax
add    %ah,0x75(%edx)
jae    805a956 <_IO_stdin_used+0x32b6>
ja     805a95a <_IO_stdin_used+0x32ba>
je     805a95e <_IO_stdin_used+0x32be>
push   $0x65746900
jb     805a902 <_IO_stdin_used+0x3262>
pop    %edi
insb   (%dx),%es:(%edi)
add    %ch,0x20(%ecx)
cmp    $0x6e203d,%eax
imul   $0x6e203d3d,(%eax),%esp
sub    (%edx),%dh
add    %bh,0x65(%ecx)
jae    805a919 <_IO_stdin_used+0x3279>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %dl,0x53(%ebp)
arpl   %ax,%gs:(%eax)
and    $0x6c253d73,%eax
insb   (%dx),%es:(%edi)
jne    805a933 <_IO_stdin_used+0x3293>
add    %dl,0x4d(%ebp)
popa
jae    805a99a <_IO_stdin_used+0x32fa>
add    %cl,0x6f(%ebp)
fs add %ah,%fs:%gs:0x30253d73
xor    $0x6f,%al
or     (%eax),%al
and    $0x75253d73,%eax
or     (%eax),%al
and    $0x69253d73,%eax
or     (%eax),%al
and    $0x67253d73,%eax
or     (%eax),%al
and    $0x25003d73,%eax
xor    %dh,(%edx)
js     805a95c <_IO_stdin_used+0x32bc>
and    $0x783830,%eax
push   %edx
gs
insb   (%dx),%es:(%edi)
gs
popa
jae    805a9cd <_IO_stdin_used+0x332d>
dec    %esi
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x72(%edi)
addr16
cs
data16
jb     805a9d9 <_IO_stdin_used+0x3339>
gs
fs
gs
jae    805a9e4 <_IO_stdin_used+0x3344>
je     805a9ea <_IO_stdin_used+0x334a>
jo     805a9ab <_IO_stdin_used+0x330b>
inc    %esp
inc    %edx
jne    805a9f4 <_IO_stdin_used+0x3354>
add    %ch,(%edi)
outsl  %ds:(%esi),(%dx)
jb     805a9ed <_IO_stdin_used+0x334d>
das
data16
jb     805a9ef <_IO_stdin_used+0x334f>
gs
fs
gs
jae    805a9fa <_IO_stdin_used+0x335a>
je     805aa00 <_IO_stdin_used+0x3360>
jo     805a9c2 <_IO_stdin_used+0x3322>
inc    %esp
inc    %edx
jne    805aa0a <_IO_stdin_used+0x336a>
add    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
popa
imul   $0x69746e75,0x5f(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %al,0x73(%ecx,%ebp,2)
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805aa1e <_IO_stdin_used+0x337e>
gs
fs
gs
jae    805aa29 <_IO_stdin_used+0x3389>
je     805aa2f <_IO_stdin_used+0x338f>
jo     805a9f0 <_IO_stdin_used+0x3350>
inc    %esp
inc    %edx
jne    805aa39 <_IO_stdin_used+0x3399>
cs
dec    %esp
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,0x65(%edi)
je     805aa14 <_IO_stdin_used+0x3374>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x65636f72,0x50(%eax),%edi
jae    805aa58 <_IO_stdin_used+0x33b8>
dec    %ecx
inc    %esp
add    %ah,0x72(%ebp)
jb     805aa5b <_IO_stdin_used+0x33bb>
jb     805a9ee <_IO_stdin_used+0x334e>
cmp    0x6f(%esi),%ch
sub    $0x646e6573,%eax
gs
jb     805a9f9 <_IO_stdin_used+0x3359>
add    %al,(%eax)
add    %al,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %dh,0x72(%ebp,%eiz,2)
insl   (%dx),%es:(%edi)
imul   $0x20646574,0x61(%esi),%ebp
fs
jne    805aa87 <_IO_stdin_used+0x33e7>
imul   $0x74756120,0x67(%esi),%ebp
push   $0x69746e65
arpl   %sp,0x74(%ecx)
imul   $0x2e,0x6e(%edi),%ebp
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805aa98 <_IO_stdin_used+0x33f8>
gs
fs
gs
jae    805aaa3 <_IO_stdin_used+0x3403>
je     805aaa9 <_IO_stdin_used+0x3409>
jo     805aa6a <_IO_stdin_used+0x33ca>
inc    %esp
inc    %edx
jne    805aab3 <_IO_stdin_used+0x3413>
cs
inc    %ebp
jb     805aab6 <_IO_stdin_used+0x3416>
outsl  %ds:(%esi),(%dx)
jb     805aa75 <_IO_stdin_used+0x33d5>
dec    %esi
outsl  %ds:(%esi),(%dx)
push   %ebx
gs
jb     805aac3 <_IO_stdin_used+0x3423>
gs
jb     805aa50 <_IO_stdin_used+0x33b0>
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
popa
jne    805aad1 <_IO_stdin_used+0x3431>
push   $0x69746e65
arpl   %sp,0x74(%ecx)
and    %ch,%gs:0x6e(%ecx)
and    %dh,0x6d(%ecx,%ebp,2)
gs add %ch,%cs:%gs:0x72(%edi)
addr16
cs
data16
jb     805aadc <_IO_stdin_used+0x343c>
gs
fs
gs
jae    805aae7 <_IO_stdin_used+0x3447>
je     805aaed <_IO_stdin_used+0x344d>
jo     805aaae <_IO_stdin_used+0x340e>
inc    %esp
inc    %edx
jne    805aaf7 <_IO_stdin_used+0x3457>
cs
inc    %ebp
jb     805aafa <_IO_stdin_used+0x345a>
outsl  %ds:(%esi),(%dx)
jb     805aab9 <_IO_stdin_used+0x3419>
push   %esp
imul   $0x74756f,0x65(%ebp),%ebp
add    %dh,0x65(%edx)
jo     805ab04 <_IO_stdin_used+0x3464>
jns    805aaba <_IO_stdin_used+0x341a>
cmp    $0x75626420,%eax
jae    805ab00 <_IO_stdin_used+0x3460>
jo     805ab08 <_IO_stdin_used+0x3468>
outsb  %ds:(%esi),(%dx)
imul   $0x6c61635f,%fs:0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
pop    %edi
jae    805ab24 <_IO_stdin_used+0x3484>
gs
popa
insb   (%dx),%es:(%edi)
pop    %edi
jb     805ab1b <_IO_stdin_used+0x347b>
jo     805ab24 <_IO_stdin_used+0x3484>
jns    805aae2 <_IO_stdin_used+0x3442>
jo     805ab21 <_IO_stdin_used+0x3481>
outsb  %ds:(%esi),(%dx)
imul   $0x64000029,%fs:0x67(%esi),%ebp
bound  %esi,0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
pop    %edi
addr16
gs
je     805ab37 <_IO_stdin_used+0x3497>
jne    805ab48 <_IO_stdin_used+0x34a8>
imul   $0x63286466,0x5f(%eax),%edi
sub    $0x20,%al
es sub %ax,%es:%fs:(%eax)
push   %ebx
dec    %edi
pop    %edi
push   %eax
inc    %ebp
inc    %ebp
push   %edx
inc    %ebx
push   %edx
inc    %ebp
inc    %esp
and    %dh,0x65(%edx)
je     805ab6d <_IO_stdin_used+0x34cd>
jb     805ab68 <_IO_stdin_used+0x34c8>
gs and %dh,%fs:%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x69(%bp,%di)
jp     805ab6c <_IO_stdin_used+0x34cc>
add    %al,%cs:(%eax)
add    %al,(%eax)
jne    805ab7c <_IO_stdin_used+0x34dc>
imul   $0x68746170,0x3a(%eax),%edi
cmp    $0x6e75722f,%eax
das
jae    805ab96 <_IO_stdin_used+0x34f6>
jae    805ab93 <_IO_stdin_used+0x34f3>
gs
insl   (%dx),%es:(%edi)
fs
das
jo     805ab97 <_IO_stdin_used+0x34f7>
imul   $0x6574,0x61(%esi),%esi
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jbe    805ab9d <_IO_stdin_used+0x34fd>
jb     805aba3 <_IO_stdin_used+0x3503>
data16
jns    805ab5d <_IO_stdin_used+0x34bd>
outsl  %ds:(%esi),(%dx)
ja     805abae <_IO_stdin_used+0x350e>
gs
jb     805ab63 <_IO_stdin_used+0x34c3>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x75(%edx)
jae    805ab78 <_IO_stdin_used+0x34d8>
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805abb6 <_IO_stdin_used+0x3516>
cs
data16
jb     805abb8 <_IO_stdin_used+0x3518>
gs
fs
gs
jae    805abc3 <_IO_stdin_used+0x3523>
je     805abc9 <_IO_stdin_used+0x3529>
jo     805ab8a <_IO_stdin_used+0x34ea>
inc    %esp
inc    %edx
jne    805abd3 <_IO_stdin_used+0x3533>
cs
inc    %ebp
jb     805abd6 <_IO_stdin_used+0x3536>
outsl  %ds:(%esi),(%dx)
jb     805ab95 <_IO_stdin_used+0x34f5>
inc    %ecx
arpl   %sp,0x65(%ebx)
jae    805abe0 <_IO_stdin_used+0x3540>
inc    %esp
outsb  %gs:(%esi),(%dx)
imul   $0x696e7500,0x64(%ebp),%esp
js     805abde <_IO_stdin_used+0x353e>
js     805abe0 <_IO_stdin_used+0x3540>
arpl   %di,(%edx)
jo     805abe0 <_IO_stdin_used+0x3540>
je     805abe9 <_IO_stdin_used+0x3549>
cmp    $0x2c687373,%eax
popa
jb     805abf0 <_IO_stdin_used+0x3550>
jbe    805abbc <_IO_stdin_used+0x351c>
cmp    $0x2c54782d,%eax
popa
jb     805abfa <_IO_stdin_used+0x355a>
jbe    805abc7 <_IO_stdin_used+0x3527>
cmp    $0x25407325,%eax
jae    805abc8 <_IO_stdin_used+0x3528>
popa
jb     805ac06 <_IO_stdin_used+0x3566>
jbe    805abd4 <_IO_stdin_used+0x3534>
cmp    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
fs
sub    $0x69647473,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x64697262,%eax
add    %al,%gs:(%bx,%si)
jne    805ac28 <_IO_stdin_used+0x3588>
imul   $0x3a636578,0x65(%eax),%edi
jo     805ac24 <_IO_stdin_used+0x3584>
je     805ac2d <_IO_stdin_used+0x358d>
cmp    $0x2c687373,%eax
popa
jb     805ac34 <_IO_stdin_used+0x3594>
jbe    805ac00 <_IO_stdin_used+0x3560>
cmp    $0x2c54782d,%eax
popa
jb     805ac3e <_IO_stdin_used+0x359e>
jbe    805ac0b <_IO_stdin_used+0x356b>
cmp    $0x6c407325,%eax
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
push   $0x2c74736f
popa
jb     805ac51 <_IO_stdin_used+0x35b1>
jbe    805ac1f <_IO_stdin_used+0x357f>
cmp    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
fs
sub    $0x69647473,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x64697262,%eax
add    %al,%gs:(%bx,%si)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805ac70 <_IO_stdin_used+0x35d0>
gs
fs
gs
jae    805ac7b <_IO_stdin_used+0x35db>
je     805ac81 <_IO_stdin_used+0x35e1>
jo     805ac42 <_IO_stdin_used+0x35a2>
inc    %esp
inc    %edx
jne    805ac8b <_IO_stdin_used+0x35eb>
cs
inc    %ebp
jb     805ac8e <_IO_stdin_used+0x35ee>
outsl  %ds:(%esi),(%dx)
jb     805ac4d <_IO_stdin_used+0x35ad>
dec    %esi
outsl  %ds:(%esi),(%dx)
dec    %ebp
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805aca0 <_IO_stdin_used+0x3600>
add    %dh,0x6e(%ebp)
imul   $0x3a636578,0x65(%eax),%edi
jo     805ac94 <_IO_stdin_used+0x35f4>
je     805ac9d <_IO_stdin_used+0x35fd>
cmp    $0x2c687373,%eax
popa
jb     805aca4 <_IO_stdin_used+0x3604>
jbe    805ac70 <_IO_stdin_used+0x35d0>
cmp    $0x2c54782d,%eax
popa
jb     805acae <_IO_stdin_used+0x360e>
jbe    805ac7b <_IO_stdin_used+0x35db>
cmp    $0x612c7325,%eax
jb     805acb7 <_IO_stdin_used+0x3617>
jbe    805ac85 <_IO_stdin_used+0x35e5>
cmp    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
fs
sub    $0x69647473,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x64697262,%eax
add    %dh,%gs:0x6e(%di)
imul   $0x3a636578,0x65(%eax),%edi
jo     805acd4 <_IO_stdin_used+0x3634>
je     805acdd <_IO_stdin_used+0x363d>
cmp    $0x78656b70,%eax
arpl   %bp,%gs:(%ecx,%eiz,2)
jb     805ace7 <_IO_stdin_used+0x3647>
jbe    805acb3 <_IO_stdin_used+0x3613>
cmp    $0x7273752f,%eax
das
bound  %ebp,0x6e(%ecx)
das
jae    805ad07 <_IO_stdin_used+0x3667>
jae    805ad04 <_IO_stdin_used+0x3664>
gs
insl   (%dx),%es:(%edi)
fs
sub    $0x69647473,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x64697262,%eax
add    %al,%gs:(%bx,%si)
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805ad0e <_IO_stdin_used+0x366e>
cs
data16
jb     805ad10 <_IO_stdin_used+0x3670>
gs
fs
gs
jae    805ad1b <_IO_stdin_used+0x367b>
je     805ad21 <_IO_stdin_used+0x3681>
jo     805ace2 <_IO_stdin_used+0x3642>
inc    %esp
inc    %edx
jne    805ad2b <_IO_stdin_used+0x368b>
cs
inc    %ebp
jb     805ad2e <_IO_stdin_used+0x368e>
outsl  %ds:(%esi),(%dx)
jb     805aced <_IO_stdin_used+0x364d>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    805ad24 <_IO_stdin_used+0x3684>
insb   (%dx),%es:(%edi)
imul   $0x7367,0x72(%ecx,%eax,2),%esp
outsl  %ds:(%esi),(%dx)
jb     805ad36 <_IO_stdin_used+0x3696>
cs
data16
jb     805ad38 <_IO_stdin_used+0x3698>
gs
fs
gs
jae    805ad43 <_IO_stdin_used+0x36a3>
je     805ad49 <_IO_stdin_used+0x36a9>
jo     805ad0a <_IO_stdin_used+0x366a>
inc    %esp
inc    %edx
jne    805ad53 <_IO_stdin_used+0x36b3>
cs
inc    %ebp
jb     805ad56 <_IO_stdin_used+0x36b6>
outsl  %ds:(%esi),(%dx)
jb     805ad15 <_IO_stdin_used+0x3675>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x65636f72,0x50(%eax),%edi
jae    805ad65 <_IO_stdin_used+0x36c5>
dec    %ecx
fs
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805ad68 <_IO_stdin_used+0x36c8>
gs
fs
gs
jae    805ad73 <_IO_stdin_used+0x36d3>
je     805ad79 <_IO_stdin_used+0x36d9>
jo     805ad3a <_IO_stdin_used+0x369a>
inc    %esp
inc    %edx
jne    805ad83 <_IO_stdin_used+0x36e3>
cs
inc    %ebp
jb     805ad86 <_IO_stdin_used+0x36e6>
outsl  %ds:(%esi),(%dx)
jb     805ad45 <_IO_stdin_used+0x36a5>
inc    %esi
imul   $0x6f46746f,0x4e(%ebp,%eiz,2),%ebp
jne    805ad90 <_IO_stdin_used+0x36f0>
add    %ch,%fs:0x72(%edi)
addr16
cs
data16
jb     805ad90 <_IO_stdin_used+0x36f0>
gs
fs
gs
jae    805ad9b <_IO_stdin_used+0x36fb>
je     805ada1 <_IO_stdin_used+0x3701>
jo     805ad62 <_IO_stdin_used+0x36c2>
inc    %esp
inc    %edx
jne    805adab <_IO_stdin_used+0x370b>
cs
inc    %ebp
jb     805adae <_IO_stdin_used+0x370e>
outsl  %ds:(%esi),(%dx)
jb     805ad6d <_IO_stdin_used+0x36cd>
inc    %esi
imul   $0x74736978,0x45(%ebp,%eiz,2),%ebp
jae    805ad4a <_IO_stdin_used+0x36aa>
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805adb6 <_IO_stdin_used+0x3716>
cs
data16
jb     805adb8 <_IO_stdin_used+0x3718>
gs
fs
gs
jae    805adc3 <_IO_stdin_used+0x3723>
je     805adc9 <_IO_stdin_used+0x3729>
jo     805ad8a <_IO_stdin_used+0x36ea>
inc    %esp
inc    %edx
jne    805add3 <_IO_stdin_used+0x3733>
cs
inc    %ebp
jb     805add6 <_IO_stdin_used+0x3736>
outsl  %ds:(%esi),(%dx)
jb     805ad95 <_IO_stdin_used+0x36f5>
dec    %ecx
dec    %edi
inc    %ebp
jb     805adde <_IO_stdin_used+0x373e>
outsl  %ds:(%esi),(%dx)
jb     805ad6f <_IO_stdin_used+0x36cf>
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805addc <_IO_stdin_used+0x373c>
gs
fs
gs
jae    805ade7 <_IO_stdin_used+0x3747>
je     805aded <_IO_stdin_used+0x374d>
jo     805adae <_IO_stdin_used+0x370e>
inc    %esp
inc    %edx
jne    805adf7 <_IO_stdin_used+0x3757>
cs
inc    %ebp
jb     805adfa <_IO_stdin_used+0x375a>
outsl  %ds:(%esi),(%dx)
jb     805adb9 <_IO_stdin_used+0x3719>
inc    %esp
imul   $0x656e6e6f,0x63(%ebx),%esi
arpl   %si,0x64(%ebp,%eiz,2)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805ae04 <_IO_stdin_used+0x3764>
gs
fs
gs
jae    805ae0f <_IO_stdin_used+0x376f>
je     805ae15 <_IO_stdin_used+0x3775>
jo     805add6 <_IO_stdin_used+0x3736>
inc    %esp
inc    %edx
jne    805ae1f <_IO_stdin_used+0x377f>
cs
inc    %ebp
jb     805ae22 <_IO_stdin_used+0x3782>
outsl  %ds:(%esi),(%dx)
jb     805ade1 <_IO_stdin_used+0x3741>
inc    %esi
popa
imul   $0x6f000000,0x64(%ebp,%eiz,2),%ebp
jb     805ae26 <_IO_stdin_used+0x3786>
cs
data16
jb     805ae28 <_IO_stdin_used+0x3788>
gs
fs
gs
jae    805ae33 <_IO_stdin_used+0x3793>
je     805ae39 <_IO_stdin_used+0x3799>
jo     805adfa <_IO_stdin_used+0x375a>
inc    %esp
inc    %edx
jne    805ae43 <_IO_stdin_used+0x37a3>
cs
dec    %ecx
outsb  %ds:(%esi),(%dx)
je     805ae47 <_IO_stdin_used+0x37a7>
outsl  %ds:(%esi),(%dx)
jae    805ae48 <_IO_stdin_used+0x37a8>
arpl   %si,%gs:0x62(%ecx,%eiz,2)
insb   (%dx),%es:(%edi)
add    %ch,%gs:0x72(%edi)
addr16
cs
data16
jb     805ae4c <_IO_stdin_used+0x37ac>
gs
fs
gs
jae    805ae57 <_IO_stdin_used+0x37b7>
je     805ae5d <_IO_stdin_used+0x37bd>
jo     805ae1e <_IO_stdin_used+0x377e>
inc    %esp
inc    %edx
jne    805ae67 <_IO_stdin_used+0x37c7>
cs
inc    %ebp
jb     805ae6a <_IO_stdin_used+0x37ca>
outsl  %ds:(%esi),(%dx)
jb     805ae29 <_IO_stdin_used+0x3789>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
dec    %ecx
outsb  %ds:(%esi),(%dx)
je     805ae6b <_IO_stdin_used+0x37cb>
jb     805ae6e <_IO_stdin_used+0x37ce>
popa
arpl   %sp,0x0(%ebp)
outsl  %ds:(%esi),(%dx)
jb     805ae76 <_IO_stdin_used+0x37d6>
cs
data16
jb     805ae78 <_IO_stdin_used+0x37d8>
gs
fs
gs
jae    805ae83 <_IO_stdin_used+0x37e3>
je     805ae89 <_IO_stdin_used+0x37e9>
jo     805ae4a <_IO_stdin_used+0x37aa>
inc    %esp
inc    %edx
jne    805ae93 <_IO_stdin_used+0x37f3>
cs
inc    %ebp
jb     805ae96 <_IO_stdin_used+0x37f6>
outsl  %ds:(%esi),(%dx)
jb     805ae55 <_IO_stdin_used+0x37b5>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
push   %eax
jb     805aea0 <_IO_stdin_used+0x3800>
jo     805ae98 <_IO_stdin_used+0x37f8>
jb     805aea9 <_IO_stdin_used+0x3809>
jns    805ae37 <_IO_stdin_used+0x3797>
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805aea4 <_IO_stdin_used+0x3804>
gs
fs
gs
jae    805aeaf <_IO_stdin_used+0x380f>
je     805aeb5 <_IO_stdin_used+0x3815>
jo     805ae76 <_IO_stdin_used+0x37d6>
inc    %esp
inc    %edx
jne    805aebf <_IO_stdin_used+0x381f>
cs
inc    %ebp
jb     805aec2 <_IO_stdin_used+0x3822>
outsl  %ds:(%esi),(%dx)
jb     805ae81 <_IO_stdin_used+0x37e1>
push   %eax
jb     805aec5 <_IO_stdin_used+0x3825>
jo     805aebd <_IO_stdin_used+0x381d>
jb     805aece <_IO_stdin_used+0x382e>
jns    805aeae <_IO_stdin_used+0x380e>
gs
popa
fs
dec    %edi
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    805ae64 <_IO_stdin_used+0x37c4>
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    805aee0 <_IO_stdin_used+0x3840>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     805aee4 <_IO_stdin_used+0x3844>
pop    %edi
je     805aef9 <_IO_stdin_used+0x3859>
jo     805aee7 <_IO_stdin_used+0x3847>
sub    %ah,(%esi)
jae    805aefb <_IO_stdin_used+0x385b>
bound  %ebp,(%ecx)
and    %bh,0x4244203d
push   %ebp
push   %ebx
pop    %edi
push   %esp
pop    %ecx
push   %eax
inc    %ebp
pop    %edi
push   %ebx
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
add    %al,(%eax)
add    %al,(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    805af1c <_IO_stdin_used+0x387c>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     805af20 <_IO_stdin_used+0x3880>
pop    %edi
je     805af35 <_IO_stdin_used+0x3895>
jo     805af23 <_IO_stdin_used+0x3883>
sub    %ah,(%esi)
jae    805af37 <_IO_stdin_used+0x3897>
bound  %ebp,(%ecx)
and    %bh,0x4244203d
push   %ebp
push   %ebx
pop    %edi
push   %esp
pop    %ecx
push   %eax
inc    %ebp
pop    %edi
push   %ebx
push   %esp
push   %edx
push   %ebp
inc    %ebx
push   %esp
add    %al,(%eax)
add    %al,(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    805af58 <_IO_stdin_used+0x38b8>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     805af5c <_IO_stdin_used+0x38bc>
pop    %edi
je     805af71 <_IO_stdin_used+0x38d1>
jo     805af5f <_IO_stdin_used+0x38bf>
sub    %ah,(%esi)
jae    805af73 <_IO_stdin_used+0x38d3>
bound  %ebp,(%ecx)
and    %bh,0x2828203d
imul   $0x73272029,0x74(%esi),%ebp
daa
sub    %eax,(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    805af8c <_IO_stdin_used+0x38ec>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     805af90 <_IO_stdin_used+0x38f0>
pop    %edi
je     805afa5 <_IO_stdin_used+0x3905>
jo     805af93 <_IO_stdin_used+0x38f3>
sub    %ah,(%esi)
jae    805afa7 <_IO_stdin_used+0x3907>
bound  %ebp,(%ecx)
and    %bh,0x2828203d
imul   $0x79272029,0x74(%esi),%ebp
daa
sub    %eax,(%eax)
bound  %esi,%fs:0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
jae    805afc0 <_IO_stdin_used+0x3920>
popa
addr16
gs
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
popa
jb     805afc4 <_IO_stdin_used+0x3924>
pop    %edi
je     805afd9 <_IO_stdin_used+0x3939>
jo     805afc7 <_IO_stdin_used+0x3927>
sub    %ah,(%esi)
jae    805afdb <_IO_stdin_used+0x393b>
bound  %ebp,(%ecx)
and    %bh,0x2828203d
imul   $0x75272029,0x74(%esi),%ebp
daa
sub    %eax,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805afe2 <_IO_stdin_used+0x3942>
cs
data16
jb     805afe4 <_IO_stdin_used+0x3944>
gs
fs
gs
jae    805afef <_IO_stdin_used+0x394f>
je     805aff5 <_IO_stdin_used+0x3955>
jo     805afb6 <_IO_stdin_used+0x3916>
inc    %esp
inc    %edx
jne    805afff <_IO_stdin_used+0x395f>
cs
inc    %ebp
jb     805b002 <_IO_stdin_used+0x3962>
outsl  %ds:(%esi),(%dx)
jb     805afc1 <_IO_stdin_used+0x3921>
dec    %esi
popa
insl   (%dx),%es:(%edi)
gs
dec    %eax
popa
jae    805afe9 <_IO_stdin_used+0x3949>
outsl  %ds:(%esi),(%dx)
dec    %edi
ja     805b00d <_IO_stdin_used+0x396d>
gs
jb     805afa2 <_IO_stdin_used+0x3902>
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805b00e <_IO_stdin_used+0x396e>
cs
data16
jb     805b010 <_IO_stdin_used+0x3970>
gs
fs
gs
jae    805b01b <_IO_stdin_used+0x397b>
je     805b021 <_IO_stdin_used+0x3981>
jo     805afe2 <_IO_stdin_used+0x3942>
inc    %esp
inc    %edx
jne    805b02b <_IO_stdin_used+0x398b>
cs
inc    %ebp
jb     805b02e <_IO_stdin_used+0x398e>
outsl  %ds:(%esi),(%dx)
jb     805afed <_IO_stdin_used+0x394d>
push   %ebx
gs
jb     805b039 <_IO_stdin_used+0x3999>
imul   $0x6e6b6e55,0x65(%ebx),%esp
outsl  %ds:(%esi),(%dx)
ja     805b03b <_IO_stdin_used+0x399b>
add    %al,(%eax)
add    %ch,0x72(%edi)
addr16
cs
data16
jb     805b03c <_IO_stdin_used+0x399c>
gs
fs
gs
jae    805b047 <_IO_stdin_used+0x39a7>
je     805b04d <_IO_stdin_used+0x39ad>
jo     805b00e <_IO_stdin_used+0x396e>
inc    %esp
inc    %edx
jne    805b057 <_IO_stdin_used+0x39b7>
cs
inc    %ebp
jb     805b05a <_IO_stdin_used+0x39ba>
outsl  %ds:(%esi),(%dx)
jb     805b019 <_IO_stdin_used+0x3979>
push   %ebx
jo     805b04f <_IO_stdin_used+0x39af>
ja     805b05e <_IO_stdin_used+0x39be>
add    %al,%cs:(%eax)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6d206575,0x73(%ebx),%esi
gs
je     805b070 <_IO_stdin_used+0x39d0>
outsl  %ds:(%esi),(%dx)
and    %ah,%fs:0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
cmp    (%eax),%ah
and    $0x726f0073,%eax
addr16
cs
data16
jb     805b080 <_IO_stdin_used+0x39e0>
gs
fs
gs
jae    805b08b <_IO_stdin_used+0x39eb>
je     805b091 <_IO_stdin_used+0x39f1>
jo     805b052 <_IO_stdin_used+0x39b2>
inc    %esp
inc    %edx
jne    805b09b <_IO_stdin_used+0x39fb>
cs
inc    %ebp
jb     805b09e <_IO_stdin_used+0x39fe>
outsl  %ds:(%esi),(%dx)
jb     805b05d <_IO_stdin_used+0x39bd>
dec    %esi
outsl  %ds:(%esi),(%dx)
push   %edx
gs
jo     805b0a1 <_IO_stdin_used+0x3a01>
jns    805b037 <_IO_stdin_used+0x3997>
add    %ch,0x7e0cffff(,%edi,2)
(bad)
(bad)
jl     805b0c1 <_IO_stdin_used+0x3a21>
(bad)
call   *-0x1(%esi,%edi,2)
(bad)
jl     805b0c9 <_IO_stdin_used+0x3a29>
(bad)
(bad)
jl     805b0cd <_IO_stdin_used+0x3a2d>
(bad)
(bad)
jl     805b0d1 <_IO_stdin_used+0x3a31>
(bad)
(bad)
jl     805b0d5 <_IO_stdin_used+0x3a35>
(bad)
call   *0x7f7cffff(%esi,%edi,2)
(bad)
(bad)
jl     805b0e1 <_IO_stdin_used+0x3a41>
(bad)
(bad)
jl     805b0e5 <_IO_stdin_used+0x3a45>
(bad)
(bad)
jl     805b0e9 <_IO_stdin_used+0x3a49>
(bad)
(bad)
jl     805b0ed <_IO_stdin_used+0x3a4d>
(bad)
(bad)
jl     805b0f1 <_IO_stdin_used+0x3a51>
(bad)
(bad)
jl     805b0f5 <_IO_stdin_used+0x3a55>
(bad)
(bad)
jl     805b0f9 <_IO_stdin_used+0x3a59>
(bad)
(bad)
jl     805b0fd <_IO_stdin_used+0x3a5d>
(bad)
call   *%esp
jle    805b082 <_IO_stdin_used+0x39e2>
decl   (%edi,%edi,2)
(bad)
(bad)
mov    $0x62ffff7c,%esp
jne    805b102 <_IO_stdin_used+0x3a62>
pop    %edi
insl   (%dx),%es:(%edi)
gs
je     805b0fc <_IO_stdin_used+0x3a5c>
outsl  %ds:(%esi),(%dx)
fs
pop    %edi
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
pop    %edi
ja     805b107 <_IO_stdin_used+0x3a67>
je     805b108 <_IO_stdin_used+0x3a68>
pop    %edi
jb     805b108 <_IO_stdin_used+0x3a68>
jo     805b111 <_IO_stdin_used+0x3a71>
jns    805b0a7 <_IO_stdin_used+0x3a07>
bound  %esi,0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
gs
je     805b117 <_IO_stdin_used+0x3a77>
outsl  %ds:(%esi),(%dx)
fs
pop    %edi
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
pop    %edi
ja     805b122 <_IO_stdin_used+0x3a82>
je     805b123 <_IO_stdin_used+0x3a83>
pop    %edi
jb     805b123 <_IO_stdin_used+0x3a83>
jo     805b12c <_IO_stdin_used+0x3a8c>
jns    805b0c2 <_IO_stdin_used+0x3a22>
bound  %esi,0x73(%ebp)
pop    %edi
gs
jb     805b13b <_IO_stdin_used+0x3a9b>
outsl  %ds:(%esi),(%dx)
jb     805b12b <_IO_stdin_used+0x3a8b>
imul   $0x735f6f6e,0x5f(%ebx),%esi
gs
jb     805b14c <_IO_stdin_used+0x3aac>
imul   $0x6e656700,0x65(%ebx),%esp
gs
jb     805b149 <_IO_stdin_used+0x3aa9>
arpl   %bx,0x70(%edi)
jb     805b14e <_IO_stdin_used+0x3aae>
outsb  %ds:(%esi),(%dx)
je     805b147 <_IO_stdin_used+0x3aa7>
jo     805b15c <_IO_stdin_used+0x3abc>
outsl  %ds:(%esi),(%dx)
jo     805b152 <_IO_stdin_used+0x3ab2>
jb     805b163 <_IO_stdin_used+0x3ac3>
jns    805b0f1 <_IO_stdin_used+0x3a51>
bound  %esi,0x73(%ebp)
pop    %edi
imul   $0x7465675f,0x72(%ebp,%eiz,2),%esi
pop    %edi
bound  %esp,0x73(%ecx)
imul   $0x5f646e61,0x5f(%ebx),%esp
outsb  %ds:(%esi),(%dx)
gs
js     805b180 <_IO_stdin_used+0x3ae0>
add    %ah,0x75(%edx)
jae    805b170 <_IO_stdin_used+0x3ad0>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x73(%edi,%ebx,2)
jns    805b18f <_IO_stdin_used+0x3aef>
je     805b183 <_IO_stdin_used+0x3ae3>
insl   (%dx),%es:(%edi)
pop    %edi
jo     805b191 <_IO_stdin_used+0x3af1>
insb   (%dx),%es:(%edi)
imul   $0x0,0x74(%ecx),%ebp
bound  %esi,0x73(%ebp)
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x73(%edi,%ebx,2)
jns    805b1a9 <_IO_stdin_used+0x3b09>
je     805b19d <_IO_stdin_used+0x3afd>
insl   (%dx),%es:(%edi)
pop    %edi
jae    805b1af <_IO_stdin_used+0x3b0f>
push   $0x6e797300
arpl   %bx,0x61(%edi)
jne    805b1ba <_IO_stdin_used+0x3b1a>
push   $0x73756200
pop    %edi
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x62(%eax,%eax,1)
jne    805b1ca <_IO_stdin_used+0x3b2a>
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x5f(%ebx)
jo     805b1c5 <_IO_stdin_used+0x3b25>
gs
jb     805b1c6 <_IO_stdin_used+0x3b26>
jb     805b1ca <_IO_stdin_used+0x3b2a>
add    %ah,%fs:0x75(%edx)
jae    805b1ca <_IO_stdin_used+0x3b2a>
arpl   %bp,0x65(%eax)
arpl   %bp,0x5f(%ebx)
jo     805b1d8 <_IO_stdin_used+0x3b38>
gs
jb     805b1d9 <_IO_stdin_used+0x3b39>
jb     805b1dd <_IO_stdin_used+0x3b3d>
fs
add    %ebx,(%ebx)
add    (%ebx),%edi
push   $0x8c000004
add    %al,(%eax)
add    %al,%ah
cmc
(bad)
dec    %eax
or     %al,(%eax)
add    %al,%ah
sti
(bad)
ljmp   *0x27(%eax)
add    %al,(%eax)
inc    %esp
std
(bad)
inc    %esp
add    $0x0,%al
add    %al,0x51cfffe(%esi,%edi,8)
add    %al,(%eax)
inc    %esp
add    %edi,%edi
lcall  *0x0(%ebp,%eax,1)
add    %al,-0x1(%esp,%eax,1)
lcall  *0x7b40000(%ebp,%eax,1)
(bad)
(bad)
faddl  0x9440000
(bad)
pushl  (%esi,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
or     %bh,%bh
decl   0xc440000(%esi,%eax,1)
(bad)
jmp    *%esp
push   %es
add    %al,(%eax)
inc    %esp
and    $0xff,%al
ljmp   *(%eax)
pop    %es
add    %al,(%eax)
in     $0x27,%al
(bad)
ljmp   *0x0(%edi,%eax,1)
add    %dh,0x7c4ffff(%eax,%ebp,1)
add    %al,(%eax)
les    (%ecx),%ebp
(bad)
lcall  *(%eax,%ecx,1)
add    %al,(%eax)
fs
sub    %bh,%bh
(bad)
cmp    %cl,(%eax)
add    %al,(%eax)
je     805b22d <_IO_stdin_used+0x3b8d>
(bad)
call   *0x34000008(%eax)
sub    $0xff,%al
(bad)
clc
or     %al,(%eax)
add    %dh,0x93cffff(%ecx,%esi,1)
add    %al,(%eax)
add    $0x33,%al
(bad)
(bad)
jl     805b227 <_IO_stdin_used+0x3b87>
add    %al,(%eax)
test   %dh,(%ebx)
(bad)
pushl  0x33d40000(%ecx,%ecx,1)
(bad)
jmp    *%eax
or     %eax,(%eax)
add    %ah,0xa38ffff(%esp,%esi,1)
add    %al,(%eax)
add    $0x36,%al
(bad)
call   *-0x4bfffff6(%eax)
ss
(bad)
inc    %eax
or     (%eax),%al
add    %ah,(%edi,%esi,1)
(bad)
jmp    *%esp
or     (%eax),%al
add    %al,0xb1cffff(%edi,%esi,1)
add    %al,(%eax)
je     805b292 <_IO_stdin_used+0x3bf2>
(bad)
jmp    *0x0(%ebx,%ecx,1)
add    %ah,-0x1(%ecx,%edi,1)
(bad)
mov    $0x400000b,%esp
cmp    %bh,%bh
(bad)
in     (%dx),%al
or     (%eax),%eax
add    %dh,%ah
cmp    %bh,%bh
incl   0x0(%esp,%ecx,1)
add    %ah,-0x1(%ebx,%edi,1)
lcall  *-0xbfffff4(%eax)
cmp    %edi,%edi
dec    %eax
or     $0x0,%al
add    %ah,%ah
cmp    $0xff,%al
(bad)
clc
or     $0x0,%al
add    %al,(%esi,%edi,1)
(bad)
ljmp   *(%eax)
or     $0x3f040000,%eax
(bad)
incl   0x5400000d(%eax)
aas
(bad)
ljmp   *0x3fc40000(%ebp,%ecx,1)
(bad)
(bad)
call   9c05b2be <_end+0x93ffba06>
inc    %ecx
(bad)
ljmp   *(%eax)
push   %cs
add    %al,(%eax)
inc    %esp
inc    %edx
(bad)
incl   -0x3bfffff2(%eax)
inc    %edx
(bad)
(bad)
mov    $0x3400000e,%eax
inc    %ebx
(bad)
jmp    *%esp
push   %cs
add    %al,(%eax)
mov    $0x43,%ah
(bad)
decl   (%eax)
sldt   (%eax)
hlt
inc    %ebx
(bad)
ljmp   *(%edi,%ecx,1)
add    %al,(%eax)
test   %al,-0x1(%ebp)
incl   0x45c40000(%edi,%ecx,1)
(bad)
pushl  -0x2bfffff1(%eax)
inc    %esi
(bad)
push   %eax
sldt   (%eax)
je     805b341 <_IO_stdin_used+0x3ca1>
(bad)
ljmp   *(%eax)
adc    %al,(%eax)
add    %ah,-0x1(%ecx,%ecx,2)
incl   0x34000010(%eax)
dec    %edx
(bad)
(bad)
in     (%dx),%al
adc    %al,(%eax)
add    %dh,%ah
dec    %edx
(bad)
pushl  (%ecx,%edx,1)
add    %al,(%eax)
aam    $0x4b
(bad)
incl   0x64000011(%eax)
dec    %esp
(bad)
dec    %eax
adc    %eax,(%eax)
add    %dl,0x1208ffff(,%ecx,2)
add    %al,(%eax)
mov    $0x4f,%ah
(bad)
(bad)
cmp    %dl,(%edx)
add    %al,(%eax)
aam    $0x50
(bad)
(bad)
js     805b350 <_IO_stdin_used+0x3cb0>
add    %al,(%eax)
xchg   %eax,%esp
push   %ecx
(bad)
inc    %eax
adc    (%eax),%al
add    %al,%ah
push   %ecx
(bad)
jmp    *%eax
adc    (%eax),%al
add    %ah,(%edx,%edx,2)
(bad)
pushl  (%ebx,%edx,1)
add    %al,(%eax)
fs
push   %ebp
(bad)
jmp    *0x0(%ebx,%edx,1)
add    %dh,-0x1(%ebp,%edx,2)
(bad)
js     805b379 <_IO_stdin_used+0x3cd9>
add    %al,(%eax)
in     $0x55,%al
(bad)
jmp    *0x57140000(%ebx,%edx,1)
(bad)
jmp    *%esp
adc    (%eax),%eax
add    %al,0x1408ffff(%edi,%edx,2)
add    %al,(%eax)
push   %esp
pop    %ecx
(bad)
jmp    *0x14(%eax)
add    %al,(%eax)
push   %esp
pop    %ebx
(bad)
(bad)
mov    $0xa4000014,%eax
pop    %ebp
(bad)
(bad)
call   ac05b3ad <_end+0xa3ffbaf5>
pop    %esi
(bad)
incl   0x15(%eax)
add    %al,(%eax)
add    $0x5f,%al
(bad)
ljmp   *0x0(%ebp,%edx,1)
add    %dh,%ah
pop    %edi
(bad)
pushl  0x65440000(%ebp,%edx,1)
(bad)
decl   (%esi,%edx,1)
add    %al,(%eax)
push   %esp
imul   $0x1668ff,%edi,%edi
add    %ah,%ah
imul   $0x16bcff,%edi,%edi
add    %dh,(%edx,%ebp,2)
(bad)
push   %eax
push   %ss
add    %al,(%eax)
add    $0x6b,%al
(bad)
decl   0x17(%eax)
add    %al,(%eax)
and    $0x6c,%al
(bad)
jmp    *0x44000017(%eax)
insb   (%dx),%es:(%edi)
(bad)
(bad)
mov    $0x64000017,%eax
insl   (%dx),%es:(%edi)
(bad)
(bad)
cmp    %bl,(%eax)
add    %al,(%eax)
mov    $0x6d,%ah
(bad)
lcall  *0x0(%eax,%ebx,1)
add    %dl,(%esi,%ebp,2)
(bad)
call   *0x6e840000(%eax,%ebx,1)
(bad)
call   *%eax
sbb    %al,(%eax)
add    %dl,%ah
jo     805b40a <_IO_stdin_used+0x3d6a>
call   *(%ecx,%ebx,1)
add    %al,(%eax)
fs
jb     805b412 <_IO_stdin_used+0x3d72>
lcall  *0x19(%eax)
add    %al,(%eax)
hlt
jp     805b41a <_IO_stdin_used+0x3d7a>
lcall  *0x7b940000(%ecx,%ebx,1)
(bad)
inc    %esp
sbb    %eax,(%eax)
add    %dh,%ah
jnp    805b42a <_IO_stdin_used+0x3d8a>
incl   (%eax)
sbb    (%eax),%al
add    %al,(%eax,%eax,4)
(bad)
incl   0x1a(%eax)
add    %al,(%eax)
add    $0x81,%al
(bad)
incl   0x4400001a(%eax)
cmp    $0x1a98ff,%edi
add    %al,0x1ab4ffff(%ecx,%eax,4)
add    %al,(%eax)
add    $0x82,%al
(bad)
(bad)
fcomps (%edx)
add    %al,(%eax)
fs
(bad)
(bad)
(bad)
cld
sbb    (%eax),%al
add    %ah,0x1b18ffff(%edx,%eax,4)
add    %al,(%eax)
hlt
(bad)
(bad)
(bad)
cmp    %bl,(%ebx)
add    %al,(%eax)
and    $0x83,%al
(bad)
lcall  *0x1b(%eax)
add    %al,(%eax)
mov    $0x83,%ah
(bad)
jmp    *-0x1bffffe5(%eax)
cmp    $0xffffffff,%edi
mov    $0x9400001b,%esp
test   %edi,%edi
(bad)
clc
sbb    (%eax),%eax
add    %al,(%ecx,%ecx,4)
(bad)
decl   0x0(%esp,%ebx,1)
add    %ah,-0x1(%ecx,%ecx,4)
(bad)
js     805b4ba <_IO_stdin_used+0x3e1a>
add    %al,(%eax)
test   %cl,0x1c94ffff(%ecx)
add    %al,(%eax)
xchg   %eax,%esp
mov    %edi,%edi
call   *%esp
sbb    $0x0,%al
add    %al,0x1d40ffff(%ebp,%ecx,4)
add    %al,(%eax)
test   %dl,0x1d80ffff(%ecx)
add    %al,(%eax)
inc    %esp
xchg   %eax,%edx
(bad)
(bad)
mov    $0x9400001d,%eax
xchg   %eax,%esp
(bad)
call   *(%eax)
push   %ds
add    %al,(%eax)
test   %dl,0x1e48ffff(%ebp)
add    %al,(%eax)
and    $0x97,%al
(bad)
pushl  0x0(%esi,%ebx,1)
add    %al,0x1eb4ffff(%eax,%ebx,4)
add    %al,(%eax)
les    0x1ef4ffff(%ecx),%ebx
add    %al,(%eax)
les    0x1f60ffff(%edx),%ebx
add    %al,(%eax)
in     $0x9b,%al
(bad)
(bad)
mov    $0x7400001f,%eax
pushf
(bad)
(bad)
clc
pop    %ds
add    %al,(%eax)
inc    %esp
popf
(bad)
jmp    *0x20(%eax)
add    %al,(%eax)
xor    $0x9e,%al
(bad)
(bad)
mov    $0x54000020,%eax
mov    0x20f8ffff,%al
add    %al,(%eax)
xor    $0xa1,%al
(bad)
(bad)
cmp    %ah,(%ecx)
add    %al,(%eax)
in     $0xa1,%al
(bad)
pushl  0x21(%eax)
add    %al,(%eax)
test   %ah,0x21b0ff(%edi,%edi,8)
add    %dl,(%eax,%ebp,4)
(bad)
jmp    *%eax
and    %eax,(%eax)
add    %al,0x2220ffff(%edx,%ebp,4)
add    %al,(%eax)
aam    $0xab
(bad)
lcall  *0x22(%eax)
add    %al,(%eax)
test   %ch,0x22b4ffff(%ebp)
add    %al,(%eax)
aam    $0xad
(bad)
call   *%esp
and    (%eax),%al
add    %al,%ah
scas   %es:(%edi),%al
(bad)
call   *(%ebx,%eiz,1)
add    %al,(%eax)
je     805b519 <_IO_stdin_used+0x3e79>
(bad)
call   *0x23(%eax)
add    %al,(%eax)
and    $0xb1,%al
(bad)
call   *-0x6bffffdd(%eax)
mov    $0xff,%dl
inc    %eax
and    (%eax),%eax
add    %ah,-0x1(%esp,%esi,4)
incl   (%eax)
and    $0x0,%al
add    %dh,(%esi,%esi,4)
(bad)
lcall  *0x24(%eax)
add    %al,(%eax)
inc    %esp
mov    $0xff,%bh
inc    %esp
and    $0x0,%al
add    %dl,0x24f0ffff(%edi,%esi,4)
add    %al,(%eax)
fs
mov    $0x2548ffff,%eax
add    %al,(%eax)
mov    $0xbe,%ah
(bad)
decl   0x74000025(%eax)
mov    $0x25c4ffff,%edi
add    %al,(%eax)
mov    $0xc1,%ah
(bad)
incl   (%esi,%eiz,1)
add    %al,(%eax)
in     $0xc1,%al
(bad)
jmp    *(%esi,%eiz,1)
add    %al,(%eax)
adc    $0xc3,%al
(bad)
call   *0x74000026(%eax)
(bad)
(bad)
(bad)
cld
add    %al,%es:(%eax)
in     $0xc4,%al
(bad)
(bad)
cmp    %ah,(%edi)
add    %al,(%eax)
hlt
(bad)
(bad)
decl   0x0(%edi,%eiz,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805b5ff <_IO_stdin_used+0x3f5f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
fsub   %st(7),%st
(bad)
jmp    *0x9(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805b61f <_IO_stdin_used+0x3f7f>
js     805b61d <_IO_stdin_used+0x3f7d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
add    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805b63f <_IO_stdin_used+0x3f9f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
js     805b642 <_IO_stdin_used+0x3fa2>
(bad)
(bad)
add    %eax,%ds:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffd,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
je     805b69e <_IO_stdin_used+0x3ffe>
add    %al,(%eax)
pusha
stc
(bad)
(bad)
mov    $0x2,%esi
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x2900e46
js     805b6ce <_IO_stdin_used+0x402e>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x48,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
mov    $0x0,%ah
add    %al,(%eax)
loopne 805b6dd <_IO_stdin_used+0x403d>
(bad)
push   %esi
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x2900e46
js     805b70e <_IO_stdin_used+0x406e>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x48,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
hlt
add    %al,(%eax)
add    %ah,0x66fffefe(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x2900e46
js     805b74e <_IO_stdin_used+0x40ae>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x48,%al
or     0x0(%eax,%eax,1),%edx
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
rolb   (%ecx)
(bad)
incl   0x1(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x34,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %cl,0x3080000(%ecx,%eax,1)
(bad)
decl   0x1(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x14,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %ah,%ah
add    %eax,(%eax)
add    %al,(%eax)
add    $0xff,%al
ljmp   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
cmp    $0x2,%al
add    %al,(%eax)
pop    %eax
add    $0x17f6ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x6f00e46
mov    $0x140e0a04,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x14000002(%eax)
sbb    $0x396ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1800e43
pop    %esp
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %al,%ah
add    (%eax),%al
add    %dh,0x20(%eax)
(bad)
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff86,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,(%ebx,%eax,1)
add    %al,(%eax)
call   1405b86d <_end+0xbffbfb5>
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffb6,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
je     805b9a1 <_IO_stdin_used+0x4301>
add    %al,(%eax)
mov    0x9dffff21,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
push   %eax
add    0xa(%ebp),%dh
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %dl,0x24000003(%eax)
and    %bh,%bh
incl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffbc,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
call   e405ba18 <_end+0xdbffc160>
and    %bh,%bh
pushl  0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ebx),%bh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
and    %al,(%eax,%eax,1)
add    %dh,%ah
in     (%dx),%al
(bad)
push   %edx
add    $0x41000000,%eax
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa018003,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
push   %eax
add    $0x0,%al
add    %dh,(%ebx,%eiz,1)
(bad)
pushl  0x5(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1800e43
push   %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
add    $0x0,%al
add    %dh,0x28(%eax)
(bad)
incl   0x1(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffee,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
aam    $0x4
add    %al,(%eax)
subb   $0xff,(%ecx)
pushl  0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ecx),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,0x29c80000(,%eax,1)
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %fs:(%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x45,%al
or     0xe(%eax),%ebx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %bh,(%eax)
add    $0x29ec0000,%eax
(bad)
call   *%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x59,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x44,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dl,0x64000005(%eax)
sub    %bh,%bh
call   *0x1(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7a,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
call   7405bc1a <_end+0x6bffc362>
sub    %edi,%edi
jmp    *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
jle    805bc31 <_IO_stdin_used+0x4591>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%esi)
add    %al,(%eax)
in     (%dx),%al
sub    %edi,%edi
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
bound  %ecx,(%edx)
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
cmp    $0x6,%al
add    %al,(%eax)
cmp    %ch,(%edi,%edi,8)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4e04(%ebx)
pop    %esi
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dh,0x0(%esi,%eax,1)
add    %ah,0x2c(%eax)
(bad)
(bad)
call   805bca9 <_IO_stdin_used+0x4609>
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0x41100e0a(%eax),%dl
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0x0(%eax,%eax,1),%edx
add    %bh,0x2d080000(%esi,%eax,1)
(bad)
(bad)
jmp    805bcf1 <_IO_stdin_used+0x4651>
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x71,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
adc    $0x7,%al
add    %al,(%eax)
mov    0x9effff2d,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %edx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %al,0x0(%edi,%eax,1)
add    %dl,(%eax)
cs
(bad)
(bad)
jmp    805bd79 <_IO_stdin_used+0x46d9>
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x71,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %bl,0x2ea80000(%edi,%eax,1)
(bad)
ljmp   *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4f,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
lock pop %es
add    %al,(%eax)
les    (%esi),%ebp
(bad)
incl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
dec    %edi
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
and    %cl,(%eax)
add    %al,(%eax)
and    $0x2f,%al
(bad)
jmp    *%ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %esi
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30a7d02,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
push   %eax
or     %al,(%eax)
add    %ah,%ah
das
(bad)
call   *0x1
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30ad602,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %al,-0x2bfffff8(%eax)
xor    %bh,%bh
(bad)
stc
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa0,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%edi),%esi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
fmuls  (%eax)
add    %al,(%eax)
jl     805bf37 <_IO_stdin_used+0x4897>
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,(%ecx,%ecx,1)
add    %al,(%eax)
mov    0x6effff31,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xe(%edx,%ecx,1)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
inc    %eax
or     %eax,(%eax)
add    %dl,%ah
xor    %edi,%edi
inc    %esp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffe0,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %al,0x64000009(%eax)
xor    %edi,%edi
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x51,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
fmuls  (%ecx)
add    %al,(%eax)
mov    $0x7fffff33,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebx),%cl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
or     (%eax),%al
add    %al,(%esp,%esi,1)
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xa(%ecx),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x42,%al
or     0xe(%edx),%ecx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
cmp    $0xa,%al
add    %al,(%eax)
dec    %eax
xor    $0xff,%al
(bad)
jge    805c06e <_IO_stdin_used+0x49ce>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4e02(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
pusha
or     (%eax),%al
add    %ah,0x3fffff(%esp,%esi,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
push   %edx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %al,0x34c00000(%edx,%ecx,1)
(bad)
incl   0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffd8,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
fmull  (%edx)
add    %al,(%eax)
clc
xor    $0x3effff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xe(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
or     %cl,(%ebx)
add    %al,(%eax)
or     $0x36,%al
(bad)
incl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
pushf
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
dec    %eax
or     (%eax),%eax
add    %bl,%ah
ss
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jge    805c197 <_IO_stdin_used+0x4af7>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%edx),%ecx
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %al,0x4400000b(%eax)
aaa
(bad)
jmp    *%ecx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff9f,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
mov    (%edx),%cs
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
fmuls  (%ebx)
add    %al,(%eax)
fdivrl (%eax)
(bad)
dec    %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x52,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%esi),%edx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %al,0x0(%esp,%ecx,1)
add    %al,0x39(%eax)
(bad)
pushl  0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ebx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ecx
add    %al,(%eax)
mov    %cs,(%eax,%eax,1)
add    %bh,-0x250000c7(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%esi),%cl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
dec    %ebp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bl,%al
or     $0x0,%al
add    %cl,-0x1(%edx,%edi,1)
incl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
or     %fs:(%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%eax),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
and    %cl,0x3a940000
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
pusha
or     $0x3b040000,%eax
(bad)
call   *0x2(%esi)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30a6302,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
nop
or     $0x3d740000,%eax
(bad)
lcall  *(%ebx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7a300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %dl,%al
or     $0x3e540000,%eax
(bad)
(bad)
mov    $0x0,%ebp
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4e04(%ebx)
push   %eax
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
dec    %eax
or     (%esi),%cl
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
sbb    %cl,(%esi)
add    %al,(%eax)
int3
ds
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x100e4e02(%ebx)
pop    %esp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x50,%al
add    %al,(%eax)
add    %bh,(%eax)
push   %cs
add    %al,(%eax)
fdivrl (%esi)
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x60300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%edi),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    %cs,(%esi)
add    %al,(%eax)
call   4805c3fb <_end+0x3fffcb43>
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa012503,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x44,%al
or     (%eax),%edx
add    %al,(%eax)
add    %bh,0x41f80000(%esi,%ecx,1)
(bad)
decl   (%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,%al
push   %cs
add    %al,(%eax)
hlt
inc    %ecx
(bad)
jmp    *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xa(%esi)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
cld
push   %cs
add    %al,(%eax)
cmp    %al,-0x1(%edx)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff95,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
cmp    $0xf,%al
add    %al,(%eax)
sub    %al,-0x1(%ebx)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
add    -0x3a(%edx),%ah
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %ah,0xf(%eax)
add    %al,(%eax)
je     805c5d1 <_IO_stdin_used+0x4f31>
(bad)
call   *%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4f,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %bh,-0x13fffff1(%eax)
inc    %esp
(bad)
push   %ecx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffaa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
loopne 805c628 <_IO_stdin_used+0x4f88>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
adc    %dl,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
inc    %esi
(bad)
decl   0x0(%edx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ebx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30a5702,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x48,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %al,0x10(%eax)
add    %al,(%eax)
mov    $0x48,%ah
(bad)
(bad)
sti
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff88,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%eax),%ebx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
cwtl
adc    %al,(%eax)
add    %bl,-0x1(%ecx,%ecx,2)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %ch,0xa(%esi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%eax
add    %al,%ah
adc    %al,(%eax)
add    %dl,-0x120000b7(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x500e4304(%ebx)
add    0x43100e0a(%edx),%al
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%edx
add    %cl,(%ecx,%edx,1)
add    %al,(%eax)
cmp    %cl,-0x1(%edx)
decl   0x5(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x79500e4e
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
fmull  (%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %ah,0x0(%ecx,%edx,1)
add    %dh,(%eax)
dec    %edi
(bad)
decl   (%edx)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1800e43
ljmp   $0xc341,$0x140e0a01
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%ebx),%eax
mov    $0x1,%dl
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %al,%al
adc    %eax,(%eax)
add    %ah,%ah
push   %edx
(bad)
incl   0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7f300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%esi
add    %al,(%eax)
add    %dl,(%edx,%edx,1)
add    %al,(%eax)
and    %dl,-0x1(%ebx)
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jle    805c86b <_IO_stdin_used+0x51cb>
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %cl,0x12(%eax)
add    %al,(%eax)
cmp    $0x53,%al
(bad)
dec    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff87,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ah,-0x4bffffee(%eax)
push   %ebx
(bad)
lcall  *(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffd7,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
clc
adc    (%eax),%al
add    %bh,-0x1(%esp,%edx,2)
lcall  *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%edi)
add    $0x0,%al
jl     805c936 <_IO_stdin_used+0x5296>
add    %al,(%eax)
adc    %dl,(%ebx)
add    %al,(%eax)
test   %dl,-0x1(%edi,%edi,8)
adc    (%ecx),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa3,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%esi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edi),%eax
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x24000013(%eax)
push   %ebp
(bad)
decl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
dec    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
mov    $0x13,%ah
add    %al,(%eax)
push   %eax
push   %ebp
(bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%esi)
addl   $0x4e,(%ebx)
push   %cs
and    %dh,0xa(%ecx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edx),%ecx
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
adc    (%eax),%eax
add    %bh,0x55(%eax)
(bad)
ljmp   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x4e,(%ebx)
push   %cs
and    %cl,0xa(%ebp)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%edi),%edx
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
sub    %dl,(%eax,%eax,1)
add    %ch,0x24affff(%ebp,%edx,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1b00e51
popf
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,0x0(%esp,%edx,1)
add    %bh,-0x740000a9(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x11900e46
jne    805cabd <_IO_stdin_used+0x541d>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x4000014(%eax)
pop    %ecx
(bad)
decl   0x8(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2a00e46
jo     805cb02 <_IO_stdin_used+0x5462>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
and    $0x0,%al
add    %al,(%eax)
hlt
adc    $0x0,%al
add    %dl,0x61(%eax)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x38500e4e
add    %al,(%eax)
sbb    $0x15,%al
add    %al,(%eax)
enter  $0xff61,$0xff
push   %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
and    %dl,0xa(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edx),%edx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
pop    %eax
adc    $0x61ec0000,%eax
(bad)
decl   (%edi)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e51
mov    $0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
cwtl
adc    $0x65bc0000,%eax
(bad)
(bad)
incb   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x10e00e46
jae    805cbf2 <_IO_stdin_used+0x5552>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
fcoms  0x667c0000
(bad)
(bad)
cmp    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %dh,0xe(%edi)
add    $0x0,%al
sbb    %al,(%eax)
add    %al,(%eax)
lock adc $0x66a40000,%eax
(bad)
pushl  0x0
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%esi,%edx,1)
add    %al,(%eax)
enter  $0xff66,$0xff
jnp    805cc3e <_IO_stdin_used+0x559e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
popa
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    %dl,(%esi)
add    %al,(%eax)
and    $0x67,%al
(bad)
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
popa
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
push   %esp
push   %ss
add    %al,(%eax)
pusha
addr16 (bad)
pushl  0x0
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
jo     805ccb0 <_IO_stdin_used+0x5610>
add    %al,(%eax)
test   %ah,-0x1(%edi)
incl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4e02(%ebx)
jno    805ccbd <_IO_stdin_used+0x561d>
or     %al,-0x3d(%esi)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dl,-0x4bffffea(%eax)
addr16 (bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   $0xc341080e
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %dh,-0x3bffffea(%eax)
addr16 (bad)
incl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %bh,%al
push   %ss
add    %al,(%eax)
or     $0x68,%al
(bad)
ljmp   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,(%edi,%edx,1)
add    %al,(%eax)
and    %ch,-0x1(%eax)
ljmp   *0x1(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
xor    %al,(%edx)
cltd
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%edi
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %dl,0x17(%eax)
add    %al,(%eax)
xchg   %eax,%esp
imul   $0x364ff,%edi,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x51500e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,0x6cb00000(%edi,%edx,1)
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
and    %al,(%edx)
dec    %ebp
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %dl,%al
pop    %ss
add    %al,(%eax)
in     $0x6c,%al
(bad)
lcall  *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec65d02(%esi)
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
in     (%dx),%al
pop    %ss
add    %al,(%eax)
call   1405cd89 <_end+0xbffd4d1>
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffdf,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
sub    $0x18,%al
add    %al,(%eax)
mov    $0xe2ffff6e,%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4a,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%edx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
cwtl
sbb    %al,(%eax)
add    %bh,(%eax,%esi,2)
(bad)
push   %ecx
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8f,0x3600e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
fcomps (%eax)
add    %al,(%eax)
cld
jae    805cf06 <_IO_stdin_used+0x5866>
(bad)
mov    $0x0,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x43100e0a(%ebx),%al
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %dl,(%eax)
sbb    %eax,(%eax)
add    %al,0x249ffff(%esp,%esi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa2,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
push   $0x7c000019
jbe    805cf96 <_IO_stdin_used+0x58f6>
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x43100e0a(%ebx),%ch
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %ah,0x34000019(%eax)
ja     805cfce <_IO_stdin_used+0x592e>
call   *0x1(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
pusha
insb   (%dx),%es:(%edi)
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
int3
sbb    %eax,(%eax)
add    %ch,0x57ffff78(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x10c00e46
cmpsl  %es:(%edi),%ds:(%esi)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
or     $0x1a,%al
add    %al,(%eax)
enter  $0xff79,$0xff
aaa
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc2,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
push   $0x4c000000
sbb    (%eax),%al
add    %cl,%al
jp     805d07a <_IO_stdin_used+0x59da>
push   %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebp),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %bh,0x5c00001a(%eax)
jnp    805d0e6 <_IO_stdin_used+0x5a46>
call   *(%ebx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%eax),%edx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
adc    %bl,(%ebx)
add    %al,(%eax)
and    $0x7c,%al
(bad)
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4f,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,%fs:(%eax)
add    %dl,0x1b(%eax)
add    %al,(%eax)
je     805d1fa <_IO_stdin_used+0x5b5a>
(bad)
inc    %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x64,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ebp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edi),%edx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %bh,-0x23ffffe5(%eax)
jl     805d1e6 <_IO_stdin_used+0x5b46>
(bad)
ljmp   $0xe41,$0x0
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x6d,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%eax),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
adc    %bl,(%eax,%eax,1)
add    %dh,-0x1(%ebp,%edi,2)
call   *0x2
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   %eax
sbb    $0x0,%al
add    %dl,-0x1(%edi,%edi,2)
(bad)
faddl  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff89,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
nop
sbb    $0x0,%al
add    %dh,%ah
jg     805d2be <_IO_stdin_used+0x5c1e>
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%eax),%ch
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x1c,$0x0
insb   (%dx),%es:(%edi)
cmp    $0xff,%bh
lahf
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4c,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
or     %bl,0x82cc0000
(bad)
decl   0x41000000(%ebx,%eax,1)
push   %cs
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa027803,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
cmp    %bl,0x862c0000
(bad)
ljmp   *0x2(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffff2,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
js     805d3bf <_IO_stdin_used+0x5d1f>
add    %al,(%eax)
pop    %esp
mov    %bh,%bh
decl   0x1(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0x43100e0a(%edx),%al
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %bl,0x0(%eax)
add    %al,(%eax)
mov    $0x1d,%al
add    %al,(%eax)
je     805d367 <_IO_stdin_used+0x5cc7>
(bad)
jmp    *0x1(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4e04(%ebx)
add    0x43100e0a(%edx),%dh
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
or     %gs:(%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%ecx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
or     $0x1e,%al
add    %al,(%eax)
enter  $0xff8a,$0xff
push   %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
jg     805d459 <_IO_stdin_used+0x5db9>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ch,(%esi,%ebx,1)
add    %al,(%eax)
clc
mov    %bh,%bh
(bad)
call   805d461 <_IO_stdin_used+0x5dc1>
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7a,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %ds
add    %al,(%eax)
test   $0x8b,%al
(bad)
ljmp   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff9f,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ch,0x1c00001e(%eax)
mov    %?,%edi
jmp    *0x41000000(%ecx,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6c,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
call   9405d533 <_end+0x8bffdc7b>
(bad)
(bad)
jmp    *0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
push   %eax
add    0x410c0e0a(%edi),%cl
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
sbb    %bl,(%edi)
add    %al,(%eax)
int3
mov    %edi,%?
dec    %edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x36,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%edx
add    %bl,0x1f(%eax)
add    %al,(%eax)
pop    %esp
nop
(bad)
dec    %ebx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xf,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
mov    $0x1f,%al
add    %al,(%eax)
aam    $0x91
(bad)
incl   (%ecx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7a,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
sbb    $0x20,%al
add    %al,(%eax)
js     805d5dc <_IO_stdin_used+0x5f3c>
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%ebp)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0x0(%eax,%eax,1),%edx
add    %cl,0x20(%eax)
add    %al,(%eax)
pushf
xchg   %eax,%edx
(bad)
inc    %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x52,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    0x14000020,%al
xchg   %eax,%ebx
(bad)
incl   0x6(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1d00e46
rorl   (%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ah,%al
and    %al,(%eax)
add    %ah,(%ecx,%ebx,4)
(bad)
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xe(%edx,%ecx,1)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ecx),%ebx
push   %cs
or     $0x48,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x21,%al
add    %al,(%eax)
test   $0x99,%al
(bad)
(bad)
cmp    %al,(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffdc,0x2500e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
pop    %esp
and    %eax,(%eax)
add    %ch,0x2affff9b(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
fs
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x68,%al
add    %al,(%eax)
add    %bh,0x0(%ecx,%eiz,1)
add    %bh,0x24ffff9b(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
call   8405d836 <_end+0x7bffdf7e>
pushf
(bad)
call   *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     805d83b <_IO_stdin_used+0x619b>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    805d872 <_IO_stdin_used+0x61d2>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dl,0x0(%edx,%eiz,1)
add    %dh,-0x63(%eax)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,-0x5bffffde(%eax)
popf
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ah,-0x62600000(%edx,%eiz,1)
(bad)
call   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4e02(%ebx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %al,%al
and    (%eax),%al
add    %dl,-0x2(%esp,%edx,8)
incl   0x0(%edx)
pop    %ecx
push   %cs
or     %al,0x50d4402(%ebp)
dec    %edx
xchg   %al,(%ebx)
jp     805d8c7 <_IO_stdin_used+0x6227>
(bad)
or     $0x4,%al
add    $0x41,%al
or     $0x5,%al
or     %al,0x38602(%ebp)
add    %al,(%eax)
add    %al,(%eax)
nop
scas   %es:(%edi),%al
add    $0x8,%al
inc    %eax
lods   %ds:(%esi),%eax
add    $0x8,%al
jo     805ea6c <_IO_stdin_used+0x73cc>
add    $0x8,%al
add    %al,(%eax)
lea    -0x6d6df7fb(%edx),%edx
add    $0x5929908,%eax
or     %dl,0x7a(%ebp)
add    $0x592a008,%eax
or     %ah,-0x57f7fa6e(%ebp)
xchg   %eax,%edx
add    $0x592ab08,%eax
or     %dl,0x7a(%ebp)
add    $0x592ae08,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %dh,-0x4af7fa6e(%ecx)
xchg   %eax,%edx
add    $0x592b908,%eax
or     %dl,%cl
xchg   %eax,%edx
add    $0x592be08,%eax
or     %al,%bl
xchg   %eax,%edx
add    $0x592c808,%eax
or     %cl,%ah
xchg   %eax,%edx
add    $0x592d008,%eax
or     %dl,%ch
xchg   %eax,%edx
add    $0x592da08,%eax
or     %bl,%bh
xchg   %eax,%edx
add    $0x592e408,%eax
or     %ah,(%ebx)
xchg   %eax,%ebx
add    $0x592e908,%eax
or     %ch,%dh
xchg   %eax,%edx
add    $0x592f508,%eax
or     %bh,%dl
xchg   %eax,%edx
add    $0x592ff08,%eax
or     %al,(%ebx,%edx,4)
add    $0x5930908,%eax
or     %cl,(%esi)
xchg   %eax,%ebx
add    $0x5931308,%eax
or     %dl,(%edi)
xchg   %eax,%ebx
add    $0x5931c08,%eax
or     %ah,(%ecx)
xchg   %eax,%ebx
add    $0x5932808,%eax
or     %ch,0x9080593
xchg   %eax,%esp
add    $0x5933308,%eax
or     %dh,(%edi)
xchg   %eax,%ebx
add    $0x5942e08,%eax
or     %dh,(%esp,%edx,4)
add    $0x5943a08,%eax
or     %bh,(%edi)
xchg   %eax,%esp
add    $0x5944308,%eax
or     %cl,-0x6c(%ebx)
add    $0x5945208,%eax
or     %dl,-0x6c(%edi)
add    $0x59be208,%eax
or     %al,(%eax)
mov    $0x1cb39389,%eax
add    %al,(%eax)
imul   $0x2644c4b,0x7a000805(%ebx),%ebx
02
add    %al,(%eax)
xchg   %ecx,-0x5ffff7fb(%ebx)
jecxz  805ebb0 <_IO_stdin_used+0x7510>
mov    %es,(%eax)
add    %al,(%eax)
fimull 0x60000805(%edi)
xlat   %ds:(%ebx)
sbb    $0x14,%eax
scas   %es:(%edi),%eax
xchg   %eax,%ecx
add    $0x93a40008,%eax
(bad)
add    %al,(%eax)
add    %al,(%eax)
pop    %esi
fwait
add    $0x93870008,%eax
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
jp     805ec10 <_IO_stdin_used+0x7570>
or     %al,0x42(%eax)
sldt   (%eax)
add    %al,(%eax)
add    %dh,0x5(%ebx,%ebx,4)
or     %ch,%al
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x57(%edi)
add    $0x108,%eax
add    %bh,-0x26f7fa73(%esi)
popf
add    $0x59db708,%eax
or     %bh,0x7308059d(%edi)
xchg   %eax,%esp
add    $0x59dcf08,%eax
or     %bl,%dh
popf
add    $0x59de308,%eax
or     %bh,%dl
.byte 0x8c
.byte 0x5
.byte 0x8
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
pop    %edi
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x1000001(%edx)
add    %al,(%eax)
add    %bh,0x2(%ecx)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
in     $0x3,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
push   $0x1000005
add    %al,(%eax)
add    %al,0x1000005(%ecx)
add    %al,(%eax)
add    %bh,%dh
or     %al,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x9d,%ah
add    $0x8,%al
or     $0x84000000,%eax
jbe    805ecb8 <_IO_stdin_used+0x7618>
or     %bl,(%ecx)
add    %al,(%eax)
add    %dh,0x1b0805(%edx,%ebp,8)
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
mov    $0x1c0805ea,%esp
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x34(%edi)
addl   $0x5,(%eax,%ecx,1)
dec    %esp
mov    %es,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %cl,(%edx,%eax,4)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
or     %eax,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %dl,0x20805(%ebp,%ebp,8)
add    %al,(%eax)
test   $0x4,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%ecx,%ebx,4)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
fcompl 0x120804(%eax)
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sti
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x6c(%edi)
xchg   %eax,%edi
add    $0x8,%al
(bad)
(bad)
ljmp   *0x6(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x24(%edi)
xchg   %eax,%esi
add    $0x8,%al
fs
in     (%dx),%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,%dh
popf
add    $0x8,%al
push   %es
sahf
add    $0x8,%al
push   %ss
sahf
add    $0x8,%al
es
sahf
add    $0x8,%al
ss
sahf
add    $0x8,%al
inc    %esi
sahf
add    $0x8,%al
push   %esi
sahf
add    $0x8,%al
data16
sahf
add    $0x8,%al
jbe    805ed60 <_IO_stdin_used+0x76c0>
add    $0x8,%al
xchg   %bl,-0x6169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
sahf
add    $0x8,%al
mov    $0x9e,%dh
add    $0x8,%al
(bad)
sahf
add    $0x8,%al
(bad)
sahf
add    $0x8,%al
out    %al,$0x9e
add    $0x8,%al
negb   -0x60f9f7fc(%esi)
add    $0x8,%al
push   %ss
lahf
add    $0x8,%al
es
lahf
add    $0x8,%al
ss
lahf
add    $0x8,%al
inc    %esi
lahf
add    $0x8,%al
push   %esi
lahf
add    $0x8,%al
data16
lahf
add    $0x8,%al
jbe    805eda1 <_IO_stdin_used+0x7701>
add    $0x8,%al
xchg   %bl,-0x6069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lahf
add    $0x8,%al
mov    $0x9f,%dh
add    $0x8,%al
(bad)
lahf
add    $0x8,%al
(bad)
lahf
add    $0x8,%al
out    %al,$0x9f
add    $0x8,%al
negb   -0x5ff9f7fc(%edi)
add    $0x8,%al
push   %ss
mov    0xa0260804,%al
add    $0x8,%al
mov    %ss:0xa0460804,%al
add    $0x8,%al
push   %esi
mov    0xa0660804,%al
add    $0x8,%al
jbe    805ede2 <_IO_stdin_used+0x7742>
add    $0x8,%al
xchg   %ah,-0x5f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    0xa0b60804,%al
add    $0x8,%al
(bad)
mov    0xa0d60804,%al
add    $0x8,%al
out    %al,$0xa0
add    $0x8,%al
mulb   -0x5ef9f7fc(%eax)
add    $0x8,%al
push   %ss
mov    0xa1260804,%eax
add    $0x8,%al
mov    %ss:0xa1460804,%eax
add    $0x8,%al
push   %esi
mov    0xa1660804,%eax
add    $0x8,%al
jbe    805ee23 <_IO_stdin_used+0x7783>
add    $0x8,%al
xchg   %ah,-0x5e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    0xa1b60804,%eax
add    $0x8,%al
(bad)
mov    0xa1d60804,%eax
add    $0x8,%al
out    %al,$0xa1
add    $0x8,%al
mulb   -0x5df9f7fc(%ecx)
add    $0x8,%al
push   %ss
mov    %al,0xa2260804
add    $0x8,%al
mov    %al,%ss:0xa2460804
add    $0x8,%al
push   %esi
mov    %al,0xa2660804
add    $0x8,%al
jbe    805ee64 <_IO_stdin_used+0x77c4>
add    $0x8,%al
xchg   %ah,-0x5d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    %al,0xa2b60804
add    $0x8,%al
(bad)
mov    %al,0xa2d60804
add    $0x8,%al
out    %al,$0xa2
add    $0x8,%al
mulb   -0x5cf9f7fc(%edx)
add    $0x8,%al
push   %ss
mov    %eax,0xa3260804
add    $0x8,%al
mov    %eax,%ss:0xa3460804
add    $0x8,%al
push   %esi
mov    %eax,0xa3660804
add    $0x8,%al
jbe    805eea5 <_IO_stdin_used+0x7805>
add    $0x8,%al
xchg   %ah,-0x5c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    %eax,0xa3b60804
add    $0x8,%al
(bad)
mov    %eax,0xa3d60804
add    $0x8,%al
out    %al,$0xa3
add    $0x8,%al
mulb   -0x5bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
movsb  %es:(%esi),%es:(%edi)
add    $0x8,%al
movsb  %ss:(%esi),%es:(%edi)
add    $0x8,%al
inc    %esi
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
push   %esi
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
data16
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
jbe    805eee6 <_IO_stdin_used+0x7846>
add    $0x8,%al
xchg   %ah,0x4a49608(%esp,%eax,1)
or     %ah,-0x49f7fb5c(%esi)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
(bad)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
(bad)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
out    %al,$0xa4
add    $0x8,%al
mulb   0x4a50608(%esp,%eax,1)
or     %dl,(%esi)
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
movsl  %es:(%esi),%es:(%edi)
add    $0x8,%al
movsl  %ss:(%esi),%es:(%edi)
add    $0x8,%al
inc    %esi
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
push   %esi
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
movsw  %ds:(%esi),%es:(%edi)
add    $0x8,%al
jbe    805ef27 <_IO_stdin_used+0x7887>
add    $0x8,%al
xchg   %ah,-0x5a69f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
mov    $0xa5,%dh
add    $0x8,%al
(bad)
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
(bad)
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
out    %al,$0xa5
add    $0x8,%al
mulb   -0x59f9f7fc(%ebp)
add    $0x8,%al
push   %ss
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%es:(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ss:(%esi)
add    $0x8,%al
inc    %esi
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %esi
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
data16
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
jbe    805ef68 <_IO_stdin_used+0x78c8>
add    $0x8,%al
xchg   %ah,-0x5969f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
mov    $0xa6,%dh
add    $0x8,%al
(bad)
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
(bad)
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
out    %al,$0xa6
add    $0x8,%al
mulb   -0x58f9f7fc(%esi)
add    $0x8,%al
push   %ss
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
cmpsl  %es:(%edi),%es:(%esi)
add    $0x8,%al
cmpsl  %es:(%edi),%ss:(%esi)
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
sldt   (%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
cmp    %di,(%eax)
xor    %edi,(%eax)
data16
xor    %bh,(%eax)
xor    $0x35,%al
xor    $0x33,%al
popa
arpl   %sp,0x36(%ebp)
xor    %esi,(%edi)
xor    %ss:(%eax),%bh
bound  %esi,(%esi)
fs arpl %sp,%fs:0x63(%ebx)
cmp    %esi,(%ecx)
xor    %esp,%fs:0x66(%ebp)
xor    0x64(%edx),%sp
cs fs bound %esi,%cs:%fs:%gs:0x67(%ebp)
add    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
sub    -0x5(%edx),%cl
