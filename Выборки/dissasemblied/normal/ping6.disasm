das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,%al
pop    %ss
(bad)
enter  $0xcecd,$0x20
fnsave (%edi)
aam    $0x45
jg     8048200 <_init-0xe38>
push   $0xffffffde
or     %ah,%dh
sbb    %esi,(%edi)
add    (%eax),%eax
add    %al,(%eax)
push   %esi
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %cl,0x12000(%eax)
in     $0x5d,%eax
or     0x0(%esi),%edx
add    %al,(%eax)
pop    %ecx
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
inc    %edx
inc    %ebp
aad    $0xec
mov    $0x297c92e3,%edx
sbb    $0xf2381c8c,%eax
mov    (%esp,%ebp,4),%ebx
dec    %ebx
jecxz  80481a4 <_init-0xe94>
fdivs  0x58(%ecx)
sbb    $0xb9,%al
(bad)
icebp
push   %cs
ljmp   $0xf7c4,$0x320eefd3
.byte 0x12
mov    $0xa2,%bl
notl   (%edx)
mov    0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x3(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lcall  $0x0,$0x1
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   %cl,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    %al,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jle    80482ec <_init-0xd4c>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popl   (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cltd
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pushf
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x3(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %ds:(%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%bh
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,%gs:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %es,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ecx
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsl  %ds:(%esi),%es:(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    $0x3,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jmp    80486cb <_init-0x96d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ebx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ah
add    (%eax),%eax
add    %cl,%dl
xor    0x8,%eax
add    %dl,(%eax)
add    %bl,(%eax)
add    %dl,%bh
add    (%eax),%eax
add    %dh,%ah
pop    %edx
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%ecx)
add    %dh,0x2(%edi)
add    %al,(%eax)
and    %dh,0x408(,%eax,1)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,%bh
add    (%eax),%al
add    %ah,%al
xor    0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,(%edi)
add    %eax,(%eax)
add    %cl,%ah
testb  $0x4,(%eax,%ecx,1)
add    %al,(%eax)
add    %dl,(%ecx)
add    %cl,(%edi)
add    %cl,%bl
add    (%eax),%eax
add    %cl,%dl
xor    0x8,%eax
add    %dl,(%eax)
add    %bl,(%ecx)
add    %bl,0x38000000(%edi)
nop
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     (%eax),%eax
data16
add    %al,(%eax)
add    %dh,0x804(%esi,%esi,8)
add    %al,(%eax)
adc    (%eax),%al
push   %cs
add    %bl,0x1(%esi)
add    %al,(%eax)
add    %dh,0x408(,%eax,1)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,%al
add    (%eax),%al
add    %ah,(%esp,%esi,1)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %sp,0x70(%ecx)
jae,pn 8048871 <_init-0x7c7>
xor    %cs:(%eax),%al
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     8048873 <_init-0x7c5>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    804889e <_init-0x79a>
popa
jb     80488a1 <_init-0x797>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    8048893 <_init-0x7a5>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    80488b4 <_init-0x784>
gs
jae    8048844 <_init-0x7f4>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     80488b0 <_init-0x788>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
imul   $0x6300,0x69(%esi),%bp
popa
jo     80488c7 <_init-0x771>
addr16
gs
je     80488cb <_init-0x76d>
jo     80488e0 <_init-0x758>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x70(%ecx)
pop    %edi
data16
jb     80488dd <_init-0x75b>
add    %ah,%gs:0x61(%ebx)
jo     80488dd <_init-0x75b>
addr16
gs
je     80488e1 <_init-0x757>
data16
insb   (%dx),%es:(%edi)
popa
add    %ah,0x61(%bp,%di)
jo     80488ea <_init-0x74e>
jae    80488f2 <_init-0x746>
je     80488ee <_init-0x74a>
jo     8048903 <_init-0x735>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x70(%ecx)
pop    %edi
imul   $0x61630074,0x69(%esi),%ebp
jo     8048900 <_init-0x738>
jae    8048908 <_init-0x730>
je     8048904 <_init-0x734>
data16
insb   (%dx),%es:(%edi)
popa
add    %ch,0x69(%si)
bound  %esi,0x65(%edx)
jae    8048920 <_init-0x718>
insb   (%dx),%es:(%edi)
jbe    80488e2 <_init-0x756>
jae    8048925 <_init-0x713>
xor    %cs:(%eax),%al
pop    %edi
pop    %edi
outsb  %fs:(%esi),(%dx)
pop    %edi
arpl   %bp,0x6d(%edi)
jo     80488c3 <_init-0x775>
pop    %edi
pop    %edi
outsb  %fs:(%esi),(%dx)
pop    %edi
gs
js     804893b <_init-0x6fd>
popa
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x62(%ecx,%ebp,2)
outsb  %ds:(%si),(%dx)
jne    804894a <_init-0x6ee>
insb   (%dx),%es:(%edi)
jae    8048906 <_init-0x732>
outsl  %ds:(%esi),(%dx)
jo     8048941 <_init-0x6f7>
outsb  %ds:(%esi),(%dx)
jae    8048952 <_init-0x6e6>
insb   (%dx),%es:(%edi)
jae,pn 8048952 <_init-0x6e6>
xor    %cs:(%edi),%dh
add    %cl,0x44(%ebp)
xor    $0x6e69465f,%eax
popa
insb   (%dx),%es:(%edi)
add    %cl,0x44(%ebp)
xor    $0x6470555f,%eax
popa
je     8048960 <_init-0x6d8>
add    %cl,0x44(%ebp)
xor    $0x696e495f,%eax
je     8048905 <_init-0x733>
insb   (%dx),%es:(%edi)
imul   $0x2e6f732e,0x63(%edx),%esp
add    %bl,%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048989 <_init-0x6af>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x65(%ebx)
je     8048997 <_init-0x6a1>
imul   $0x656b636f,0x73(%eax,%eax,1),%esp
je     804892c <_init-0x70c>
data16
data16
insb   (%dx),%es:(%edi)
jne    80489a4 <_init-0x694>
push   $0x705f5f00
jb     80489a1 <_init-0x697>
outsb  %ds:(%esi),(%dx)
je     80489a1 <_init-0x697>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
imul   $0x705f4f49,0x5f(%eax,%eax,1),%esi
jne    80489c0 <_init-0x678>
arpl   %ax,(%eax)
jae    80489c4 <_init-0x674>
jb     80489c0 <_init-0x678>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80489c3 <_init-0x675>
outsb  %ds:(%esi),(%dx)
add    %bl,%fs:0x5f(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
addr16 push $0x6d
jo     80489c6 <_init-0x672>
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
jae    80489e3 <_init-0x655>
jb     80489d5 <_init-0x663>
jne    80489e3 <_init-0x655>
add    %dh,0x65(%eax)
jb     80489ea <_init-0x64e>
outsl  %ds:(%esi),(%dx)
jb     804897b <_init-0x6bd>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x69(%eax,%eax,1)
outsb  %ds:(%esi),(%dx)
gs
je     80489e7 <_init-0x651>
outsb  %ds:(%esi),(%dx)
je     80489fa <_init-0x63e>
jo     804898d <_init-0x6ab>
jo     8048a04 <_init-0x634>
je     8048a04 <_init-0x634>
add    %dh,0x69(%ebx)
addr16 jo 8048a09 <_init-0x62f>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x61(%ebp)
jae    8048a08 <_init-0x630>
add    %bl,0x5f(%edi)
jae    8048a16 <_init-0x622>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x68637475,0x70(%eax,%eax,1),%ebp
popa
jb     80489b7 <_init-0x681>
popa
bound  %ebp,0x72(%edi)
je     80489bd <_init-0x67b>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x72(%eax)
add    %ah,0x65(%edi)
je     8048a38 <_init-0x600>
imul   $0x5f74656e,0x69(%eax,%eax,1),%esp
jo     8048a46 <_init-0x5f2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8048a4d <_init-0x5eb>
outsl  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048a54 <_init-0x5e4>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     8048a5c <_init-0x5dc>
jns    80489ea <_init-0x64e>
jae    8048a4f <_init-0x5e9>
push   $0x795f6465
imul   $0x74730064,0x6c(%ebp),%esp
jb     8048a66 <_init-0x5d2>
outsb  %gs:(%esi),(%dx)
add    %dh,0x72(%eax)
arpl   %si,0x0(%esp,%ebp,2)
jae    8048a6a <_init-0x5ce>
je     8048a70 <_init-0x5c8>
je     8048a72 <_init-0x5c6>
insl   (%dx),%es:(%edi)
gs
jb     8048a0d <_init-0x62b>
jae    8048a78 <_init-0x5c0>
addr16
gs
insl   (%dx),%es:(%edi)
jo     8048a88 <_init-0x5b0>
jns    8048a89 <_init-0x5af>
gs
je     8048a19 <_init-0x61f>
addr16
gs
je     8048a7e <_init-0x5ba>
fs
fs
jb     8048a8a <_init-0x5ae>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
gs
jb     8048a9c <_init-0x59c>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6e696200,0x6e(%edi),%ebp
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x65(%edi)
je     8048ab9 <_init-0x57f>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     8048ac0 <_init-0x578>
add    %ah,0x65(%edi)
je     8048ac0 <_init-0x578>
jo     8048ac7 <_init-0x571>
add    %bl,0x73(%edi)
gs
je     8048ac3 <_init-0x575>
insl   (%dx),%es:(%edi)
jo     8048a5c <_init-0x5dc>
jo     8048acd <_init-0x56b>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
data16
jo     8048ad8 <_init-0x560>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048ad6 <_init-0x562>
outsl  %ds:(%esi),(%dx)
jne    8048ae9 <_init-0x54f>
add    %ah,0x65(%edi)
je     8048ae2 <_init-0x556>
outsl  %ds:(%esi),(%dx)
jae    8048af1 <_init-0x547>
bound  %edi,0x61(%ecx)
fs
fs
jb     8048a84 <_init-0x5b4>
data16
jo     8048afc <_init-0x53c>
je     8048aec <_init-0x54c>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %dh,0x74(%ebx)
jb     8048b09 <_init-0x52f>
outsl  %ds:(%esi),(%dx)
jne    8048b04 <_init-0x534>
add    %dh,0x65(%ebx)
je     8048b10 <_init-0x528>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     8048b17 <_init-0x521>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048b2e <_init-0x50a>
arpl   %sp,0x6e(%ecx)
data16
add    %ch,0x70(%edi)
je     8048b25 <_init-0x513>
jb     8048b2d <_init-0x50b>
add    %dh,0x74(%ebx)
fs
gs
jb     8048b3f <_init-0x4f9>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
addr16
gs
je     8048b4d <_init-0x4eb>
imul   $0x69656572,0x66(%eax,%eax,1),%esp
popaw
fs
fs
jb     8048b59 <_init-0x4df>
add    %ah,0x65(%edi)
je     8048b54 <_init-0x4e4>
popaw
fs
fs
jb     8048b64 <_init-0x4d4>
add    %ch,0x66(%ecx)
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
je     8048b6a <_init-0x4ce>
imul   $0x73007865,0x64(%esi),%ebp
outsb  %gs:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    8048b6f <_init-0x4c9>
add    %ah,0x77(%esi)
jb     8048b76 <_init-0x4c2>
je     8048b74 <_init-0x4c4>
add    %ah,0x65(%edi)
je     8048b88 <_init-0x4b0>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    8048b1d <_init-0x51b>
jae    8048b88 <_init-0x4b0>
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
add    %ah,0x65(%edi)
je     8048b90 <_init-0x4a8>
jne    8048b96 <_init-0x4a2>
add    %bl,%fs:0x5f(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8048ba6 <_init-0x492>
add    %dh,0x74(%ebx)
jb     8048ba9 <_init-0x48f>
push   $0x65670072
je     8048bc0 <_init-0x478>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x65(%ebx)
outsb  %ds:(%esi),(%dx)
fs
je     8048bca <_init-0x46e>
add    %bl,0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048bd5 <_init-0x463>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048bcf <_init-0x469>
jb     8048bcb <_init-0x46d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
data16
jb     8048bd8 <_init-0x460>
gs
popa
fs
fs
jb     8048be2 <_init-0x456>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
jae    8048bf1 <_init-0x447>
jb     8048bec <_init-0x44c>
outsb  %ds:(%esi),(%dx)
je     8048bec <_init-0x44c>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x65(%ebx)
je     8048bf1 <_init-0x447>
jne    8048bf7 <_init-0x441>
add    %dh,0x74(%ebx)
jb     8048bf9 <_init-0x43f>
insl   (%dx),%es:(%edi)
jo     8048b99 <_init-0x49f>
jb     8048c00 <_init-0x438>
arpl   %si,0x6d(%esi)
jae    8048c07 <_init-0x431>
add    %dh,0x74(%ebx)
jb     8048c0a <_init-0x42e>
jb     8048c19 <_init-0x41f>
outsl  %ds:(%esi),(%dx)
jb     8048baa <_init-0x48e>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048c2a <_init-0x40e>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6164655f,0x0(%esi),%ebp
je     8048c23 <_init-0x415>
add    %bl,0x5f(%edi)
bound  %esi,0x73(%ebx)
pop    %edi
jae    8048c3f <_init-0x3f9>
popa
jb     8048c42 <_init-0x3f6>
add    %bl,0x65(%edi)
outsb  %ds:(%esi),(%dx)
add    %al,%fs:0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%ecx)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    $0x0,%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    $0x2000000,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000600
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%esi)
add    %al,0x1000100
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
add    (%eax),%al
mov    $0x0,%dl
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x90000,%eax
faddl  (%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x70000,%eax
out    %al,$0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
push   %es
add    %cl,0x10000001
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x69691(%ecx)
add    %cl,(%eax)
add    %dh,%al
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x60000,0xd(%ecx),%ebp
sti
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,0x40500
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x40000,0xd(%ecx),%ebp
adc    %eax,(%eax,%eax,1)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x41b,0x30000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
faddl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
cld
das
add    $0x220608,%eax
add    %ah,%al
xor    0x590508,%eax
add    %al,(%eax)
xor    $0x5,%al
or     %al,0x2000005e
xor    $0x5,%al
or     %al,0x24000058
xor    $0x5,%al
.byte 0x8
.byte 0x5
pop    %edi
or     $0x30,%al
add    $0x10708,%eax
add    %dl,(%eax)
xor    %al,0x20708
add    %dl,(%eax,%esi,1)
add    $0x30708,%eax
add    %bl,(%eax)
xor    %al,0x40708
add    %bl,(%eax,%esi,1)
add    $0x60708,%eax
add    %ah,(%eax)
xor    %al,0x70708
add    %ah,(%eax,%esi,1)
add    $0x80708,%eax
add    %ch,(%eax)
xor    %al,0x90708
add    %ch,(%eax,%esi,1)
add    $0xa0708,%eax
add    %dh,(%eax)
xor    %al,0xb0708
add    %dh,(%eax,%esi,1)
add    $0xc0708,%eax
add    %bh,(%eax)
xor    %al,0xd0708
add    %bh,(%eax,%esi,1)
add    $0xe0708,%eax
add    %al,0x30(%eax)
add    $0xf0708,%eax
add    %al,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x30(%eax)
add    $0x110708,%eax
add    %cl,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x30(%eax)
add    $0x130708,%eax
add    %dl,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x30(%eax)
add    $0x150708,%eax
add    %bl,0x5(%eax,%esi,1)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
pusha
xor    %al,0x170708
add    %ah,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    %al,(%eax)
add    %ch,0x30(%eax)
add    $0x190708,%eax
add    %ch,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x30(%eax)
add    $0x1b0708,%eax
add    %dh,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x30(%eax)
add    $0x1d0708,%eax
add    %bh,0x5(%eax,%esi,1)
or     %al,(%edi)
push   %ds
add    %al,(%eax)
xorb   $0x5,(%eax)
or     %al,(%edi)
pop    %ds
add    %al,(%eax)
test   %dh,(%eax)
add    $0x200708,%eax
add    %cl,0x7080530(%eax)
and    %eax,(%eax)
add    %cl,0x22070805(%eax,%esi,1)
add    %al,(%eax)
nop
xor    %al,0x230708
add    %dl,0x24070805(%eax,%esi,1)
add    %al,(%eax)
cwtl
xor    %al,0x250708
add    %bl,0x26070805(%eax,%esi,1)
add    %al,(%eax)
mov    0x7080530,%al
daa
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xor    %al,0x280708
add    %ch,0x7080530(%eax)
sub    %eax,(%eax)
add    %ch,0x2a070805(%eax,%esi,1)
add    %al,(%eax)
mov    $0x30,%al
add    $0x2b0708,%eax
add    %dh,0x2c070805(%eax,%esi,1)
add    %al,(%eax)
mov    $0x7080530,%eax
sub    $0x30bc0000,%eax
add    $0x2e0708,%eax
add    %al,%al
xor    %al,0x2f0708
add    %al,%ah
xor    %al,0x300708
add    %cl,%al
xor    %al,0x310708
add    %cl,%ah
xor    %al,0x320708
add    %dl,%al
xor    %al,0x330708
add    %dl,%ah
xor    %al,0x340708
add    %bl,%al
xor    %al,0x350708
add    %bl,%ah
xor    %al,0x360708
add    %ah,%al
xor    %al,0x370708
add    %ah,%ah
xor    %al,0x380708
add    %ch,%al
xor    %al,0x390708
add    %ch,%ah
xor    %al,0x3a0708
add    %dh,%al
xor    %al,0x3b0708
add    %dh,%ah
xor    %al,0x3c0708
add    %bh,%al
xor    %al,0x3d0708
add    %bh,%ah
xor    %al,0x3e0708
add    %al,(%eax)
xor    %eax,0x3f0708
add    %al,(%ecx,%esi,1)
add    $0x410708,%eax
add    %cl,(%eax)
xor    %eax,0x420708
add    %cl,(%ecx,%esi,1)
add    $0x430708,%eax
add    %dl,(%eax)
xor    %eax,0x440708
add    %dl,(%ecx,%esi,1)
add    $0x450708,%eax
add    %bl,(%eax)
xor    %eax,0x460708
add    %bl,(%ecx,%esi,1)
add    $0x470708,%eax
add    %ah,(%eax)
xor    %eax,0x480708
add    %ah,(%ecx,%esi,1)
add    $0x490708,%eax
add    %ch,(%eax)
xor    %eax,0x4a0708
add    %ch,(%ecx,%esi,1)
add    $0x4c0708,%eax
add    %dh,(%eax)
xor    %eax,0x4d0708
add    %dh,(%ecx,%esi,1)
add    $0x4e0708,%eax
add    %bh,(%eax)
xor    %eax,0x4f0708
add    %bh,(%ecx,%esi,1)
add    $0x500708,%eax
add    %al,0x31(%eax)
add    $0x510708,%eax
add    %al,0x5(%ecx,%esi,1)
or     %al,(%edi)
push   %edx
add    %al,(%eax)
dec    %eax
xor    %eax,0x530708
add    %cl,0x5(%ecx,%esi,1)
or     %al,(%edi)
push   %esp
add    %al,(%eax)
push   %eax
xor    %eax,0x550708
push   %ebx
sub    $0x8,%esp
call   804a7b0 <__sprintf_chk@plt+0x1230>
add    $0x9fbf,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8049056 <_init+0x1e>
call   8049270 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8053004
jmp    *0x8053008
add    %al,(%eax)
jmp    *0x805300c
push   $0x0
jmp    8049060 <_init+0x28>
jmp    *0x8053010
push   $0x8
jmp    8049060 <_init+0x28>
jmp    *0x8053014
push   $0x10
jmp    8049060 <_init+0x28>
jmp    *0x8053018
push   $0x18
jmp    8049060 <_init+0x28>
jmp    *0x805301c
push   $0x20
jmp    8049060 <_init+0x28>
jmp    *0x8053020
push   $0x28
jmp    8049060 <_init+0x28>
jmp    *0x8053024
push   $0x30
jmp    8049060 <_init+0x28>
jmp    *0x8053028
push   $0x38
jmp    8049060 <_init+0x28>
jmp    *0x805302c
push   $0x40
jmp    8049060 <_init+0x28>
jmp    *0x8053030
push   $0x48
jmp    8049060 <_init+0x28>
jmp    *0x8053034
push   $0x50
jmp    8049060 <_init+0x28>
jmp    *0x8053038
push   $0x58
jmp    8049060 <_init+0x28>
jmp    *0x805303c
push   $0x60
jmp    8049060 <_init+0x28>
jmp    *0x8053040
push   $0x68
jmp    8049060 <_init+0x28>
jmp    *0x8053044
push   $0x70
jmp    8049060 <_init+0x28>
jmp    *0x8053048
push   $0x78
jmp    8049060 <_init+0x28>
jmp    *0x805304c
push   $0x80
jmp    8049060 <_init+0x28>
jmp    *0x8053050
push   $0x88
jmp    8049060 <_init+0x28>
jmp    *0x8053054
push   $0x90
jmp    8049060 <_init+0x28>
jmp    *0x8053058
push   $0x98
jmp    8049060 <_init+0x28>
jmp    *0x805305c
push   $0xa0
jmp    8049060 <_init+0x28>
jmp    *0x8053060
push   $0xa8
jmp    8049060 <_init+0x28>
jmp    *0x8053064
push   $0xb0
jmp    8049060 <_init+0x28>
jmp    *0x8053068
push   $0xb8
jmp    8049060 <_init+0x28>
jmp    *0x805306c
push   $0xc0
jmp    8049060 <_init+0x28>
jmp    *0x8053070
push   $0xc8
jmp    8049060 <_init+0x28>
jmp    *0x8053074
push   $0xd0
jmp    8049060 <_init+0x28>
jmp    *0x8053078
push   $0xd8
jmp    8049060 <_init+0x28>
jmp    *0x805307c
push   $0xe0
jmp    8049060 <_init+0x28>
jmp    *0x8053080
push   $0xe8
jmp    8049060 <_init+0x28>
jmp    *0x8053084
push   $0xf0
jmp    8049060 <_init+0x28>
jmp    *0x8053088
push   $0xf8
jmp    8049060 <_init+0x28>
jmp    *0x805308c
push   $0x100
jmp    8049060 <_init+0x28>
jmp    *0x8053090
push   $0x108
jmp    8049060 <_init+0x28>
jmp    *0x8053094
push   $0x110
jmp    8049060 <_init+0x28>
jmp    *0x8053098
push   $0x118
jmp    8049060 <_init+0x28>
jmp    *0x805309c
push   $0x120
jmp    8049060 <_init+0x28>
jmp    *0x80530a0
push   $0x128
jmp    8049060 <_init+0x28>
jmp    *0x80530a4
push   $0x130
jmp    8049060 <_init+0x28>
jmp    *0x80530a8
push   $0x138
jmp    8049060 <_init+0x28>
jmp    *0x80530ac
push   $0x140
jmp    8049060 <_init+0x28>
jmp    *0x80530b0
push   $0x148
jmp    8049060 <_init+0x28>
jmp    *0x80530b4
push   $0x150
jmp    8049060 <_init+0x28>
jmp    *0x80530b8
push   $0x158
jmp    8049060 <_init+0x28>
jmp    *0x80530bc
push   $0x160
jmp    8049060 <_init+0x28>
jmp    *0x80530c0
push   $0x168
jmp    8049060 <_init+0x28>
jmp    *0x80530c4
push   $0x170
jmp    8049060 <_init+0x28>
jmp    *0x80530c8
push   $0x178
jmp    8049060 <_init+0x28>
jmp    *0x80530cc
push   $0x180
jmp    8049060 <_init+0x28>
jmp    *0x80530d0
push   $0x188
jmp    8049060 <_init+0x28>
jmp    *0x80530d4
push   $0x190
jmp    8049060 <_init+0x28>
jmp    *0x80530d8
push   $0x198
jmp    8049060 <_init+0x28>
jmp    *0x80530dc
push   $0x1a0
jmp    8049060 <_init+0x28>
jmp    *0x80530e0
push   $0x1a8
jmp    8049060 <_init+0x28>
jmp    *0x80530e4
push   $0x1b0
jmp    8049060 <_init+0x28>
jmp    *0x80530e8
push   $0x1b8
jmp    8049060 <_init+0x28>
jmp    *0x80530ec
push   $0x1c0
jmp    8049060 <_init+0x28>
jmp    *0x80530f0
push   $0x1c8
jmp    8049060 <_init+0x28>
jmp    *0x80530f4
push   $0x1d0
jmp    8049060 <_init+0x28>
jmp    *0x80530f8
push   $0x1d8
jmp    8049060 <_init+0x28>
jmp    *0x80530fc
push   $0x1e0
jmp    8049060 <_init+0x28>
jmp    *0x8053100
push   $0x1e8
jmp    8049060 <_init+0x28>
jmp    *0x8053104
push   $0x1f0
jmp    8049060 <_init+0x28>
jmp    *0x8053108
push   $0x1f8
jmp    8049060 <_init+0x28>
jmp    *0x805310c
push   $0x200
jmp    8049060 <_init+0x28>
jmp    *0x8053110
push   $0x208
jmp    8049060 <_init+0x28>
jmp    *0x8053114
push   $0x210
jmp    8049060 <_init+0x28>
jmp    *0x8053118
push   $0x218
jmp    8049060 <_init+0x28>
jmp    *0x805311c
push   $0x220
jmp    8049060 <_init+0x28>
jmp    *0x8053120
push   $0x228
jmp    8049060 <_init+0x28>
jmp    *0x8053124
push   $0x230
jmp    8049060 <_init+0x28>
jmp    *0x8053128
push   $0x238
jmp    8049060 <_init+0x28>
jmp    *0x805312c
push   $0x240
jmp    8049060 <_init+0x28>
jmp    *0x8053130
push   $0x248
jmp    8049060 <_init+0x28>
jmp    *0x8053134
push   $0x250
jmp    8049060 <_init+0x28>
jmp    *0x8053138
push   $0x258
jmp    8049060 <_init+0x28>
jmp    *0x805313c
push   $0x260
jmp    8049060 <_init+0x28>
jmp    *0x8053140
push   $0x268
jmp    8049060 <_init+0x28>
jmp    *0x8053144
push   $0x270
jmp    8049060 <_init+0x28>
jmp    *0x8053148
push   $0x278
jmp    8049060 <_init+0x28>
jmp    *0x805314c
push   $0x280
jmp    8049060 <_init+0x28>
jmp    *0x8053150
push   $0x288
jmp    8049060 <_init+0x28>
lea    0x4(%esp),%ecx
and    $0xfffffff0,%esp
pushl  -0x4(%ecx)
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
push   %ecx
sub    $0xc8,%esp
mov    (%ecx),%esi
mov    0x4(%ecx),%edi
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
call   804c760 <__sprintf_chk@plt+0x31e0>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   804c950 <__sprintf_chk@plt+0x33d0>
movl   $0x3a,0x8(%esp)
movl   $0x3,0x4(%esp)
movl   $0xa,(%esp)
call   80494b0 <socket@plt>
mov    %eax,0x8053500
call   8049350 <__errno_location@plt>
mov    %eax,%ebx
mov    (%eax),%eax
mov    %eax,-0xac(%ebp)
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
call   804c950 <__sprintf_chk@plt+0x33d0>
mov    $0xa,%eax
mov    %ax,0x8073994
xor    %eax,%eax
movl   $0x0,-0x38(%ebp,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8049621 <__sprintf_chk@plt+0xa1>
movw   $0xa,-0x38(%ebp)
movl   $0x1,0x8075ad8
00
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f9c4,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   80492f0 <getopt@plt>
cmp    $0xffffffff,%eax
je     804986b <__sprintf_chk@plt+0x2eb>
lea    -0x41(%eax),%edx
cmp    $0x36,%edx
ja     80496e3 <__sprintf_chk@plt+0x163>
jmp    *0x80501a4(,%edx,4)
movl   $0x8053330,0x8(%esp)
movl   $0x804fe94,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
movl   $0x0,(%esp)
call   8049280 <exit@plt>
mov    0x8053424,%eax
call   804ace0 <__sprintf_chk@plt+0x1760>
mov    %eax,0x8073960
cmpl   $0x0,(%ebx)
jne    8049997 <__sprintf_chk@plt+0x417>
test   $0xffffff00,%eax
jne    8049997 <__sprintf_chk@plt+0x417>
orl    $0x400,0x80759f0
00
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    0x8053424,%eax
mov    %eax,(%esp)
call   804b5d0 <__sprintf_chk@plt+0x2050>
test   %eax,%eax
jns    8049648 <__sprintf_chk@plt+0xc8>
call   804a8c0 <__sprintf_chk@plt+0x1340>
mov    0x8053424,%edx
cmpb   $0x64,(%edx)
jne    804980a <__sprintf_chk@plt+0x28a>
cmpb   $0x6f,0x1(%edx)
jne    804980a <__sprintf_chk@plt+0x28a>
cmpb   $0x0,0x2(%edx)
jne    804980a <__sprintf_chk@plt+0x28a>
movl   $0x2,0x8053328
00
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    0x8053424,%edx
movl   $0x3a,0x4(%esp)
mov    %edx,(%esp)
mov    %edx,-0xb0(%ebp)
call   80492a0 <strchr@plt>
mov    -0xb0(%ebp),%edx
test   %eax,%eax
je     8049839 <__sprintf_chk@plt+0x2b9>
mov    %edx,(%esp)
call   8049330 <__strdup@plt>
test   %eax,%eax
je     804a26f <__sprintf_chk@plt+0xcef>
movl   $0x25,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,-0xb0(%ebp)
call   80492a0 <strchr@plt>
mov    -0xb0(%ebp),%edx
test   %eax,%eax
je     8049788 <__sprintf_chk@plt+0x208>
movb   $0x0,(%eax)
mov    0x8053424,%ecx
sub    %edx,%eax
lea    0x1(%ecx,%eax,1),%eax
mov    %eax,0x8054540
mov    %edx,0x4(%esp)
movl   $0x807399c,0x8(%esp)
mov    %edx,-0xb0(%ebp)
movl   $0xa,(%esp)
call   8049100 <inet_pton@plt>
mov    -0xb0(%ebp),%edx
test   %eax,%eax
jle    804a259 <__sprintf_chk@plt+0xcd9>
orl    $0x8000,0x80759f0
00
mov    %edx,(%esp)
call   80490f0 <free@plt>
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    0x8053424,%eax
call   804ace0 <__sprintf_chk@plt+0x1760>
mov    %eax,0x8073984
cmpl   $0x0,(%ebx)
jne    80499c9 <__sprintf_chk@plt+0x449>
test   $0xfff00000,%eax
jne    80499c9 <__sprintf_chk@plt+0x449>
orl    $0x200,0x80759f0
00
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    %eax,(%esp)
call   804ca60 <__sprintf_chk@plt+0x34e0>
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    %edx,(%esp)
movl   $0x804fe8a,0x4(%esp)
mov    %edx,-0xb0(%ebp)
call   80490a0 <strcmp@plt>
mov    -0xb0(%ebp),%edx
test   %eax,%eax
jne    8049844 <__sprintf_chk@plt+0x2c4>
movl   $0x0,0x8053328
00
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    %edx,0x8054540
jmp    8049648 <__sprintf_chk@plt+0xc8>
movl   $0x804fe8f,0x4(%esp)
mov    %edx,(%esp)
call   80490a0 <strcmp@plt>
test   %eax,%eax
jne    804a390 <__sprintf_chk@plt+0xe10>
movl   $0x1,0x8053328
00
jmp    8049648 <__sprintf_chk@plt+0xc8>
mov    0x8053400,%edx
sub    %edx,%esi
cmpl   $0x0,0x8053324
js     80498d6 <__sprintf_chk@plt+0x356>
mov    %edx,-0xb0(%ebp)
movl   $0x0,0x4(%esp)
movl   $0x8073988,(%esp)
call   8049130 <gettimeofday@plt>
call   80491e0 <getpid@plt>
mov    -0xb0(%ebp),%edx
cmpl   $0x0,0x8053320
mov    %eax,0x8073990
js     80498b8 <__sprintf_chk@plt+0x338>
cmpl   $0x0,0x8053444
jne    80498d6 <__sprintf_chk@plt+0x356>
movl   $0x807396c,0x8053444
08
movl   $0x10,0x8053440
00
movl   $0x0,0x8053320
00
sub    $0x1,%esi
jle    8049905 <__sprintf_chk@plt+0x385>
mov    0x80533e0,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f9f4,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
jmp    80496e3 <__sprintf_chk@plt+0x163>
je     804a239 <__sprintf_chk@plt+0xcb9>
cmpl   $0x0,0x8053324
js     804a247 <__sprintf_chk@plt+0xcc7>
mov    0x8073980,%eax
mov    %eax,-0xb0(%ebp)
lea    -0x8c(%ebp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x8,%ecx
rep stos %eax,%es:(%edi)
lea    -0x98(%ebp),%eax
movl   $0xa,-0x88(%ebp)
00
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    -0xb0(%ebp),%eax
mov    %eax,(%esp)
call   80494c0 <getaddrinfo@plt>
test   %eax,%eax
je     80499dc <__sprintf_chk@plt+0x45c>
mov    0x80533e0,%eax
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804feaf,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x8053424,%eax
movl   $0x804fe5c,0x8(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x8053424,%eax
movl   $0x804fe41,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80499a8 <__sprintf_chk@plt+0x428>
mov    -0x98(%ebp),%edx
mov    $0x8073964,%eax
mov    $0x7,%ecx
mov    %eax,%edi
xor    %eax,%eax
mov    0x14(%edx),%esi
rep movsl %ds:(%esi),%es:(%edi)
mov    -0xb0(%ebp),%edi
or     $0xffffffff,%ecx
mov    %edx,-0xb4(%ebp)
movw   $0x3a00,0x8073966
3a
repnz scas %es:(%edi),%al
movl   $0x3a,0x4(%esp)
not    %ecx
sub    $0x1,%ecx
mov    %ecx,0x8(%esp)
mov    -0xb0(%ebp),%edi
mov    %edi,(%esp)
call   8049360 <memchr@plt>
mov    -0xb4(%ebp),%edx
test   %eax,%eax
je     8049a3f <__sprintf_chk@plt+0x4bf>
orl    $0x4,0x80759f0
mov    %edx,(%esp)
call   8049400 <freeaddrinfo@plt>
cmpl   $0x0,-0x30(%ebp)
jne    8049ac4 <__sprintf_chk@plt+0x544>
cmpl   $0x0,-0x2c(%ebp)
jne    8049ac4 <__sprintf_chk@plt+0x544>
cmpl   $0x0,-0x28(%ebp)
jne    8049ac4 <__sprintf_chk@plt+0x544>
cmpl   $0x0,-0x24(%ebp)
jne    8049ac4 <__sprintf_chk@plt+0x544>
lea    -0x30(%ebp),%edi
mov    $0x807396c,%esi
mov    $0x4,%ecx
rep movsl %ds:(%esi),%es:(%edi)
mov    (%esi),%eax
test   %eax,%eax
mov    %eax,-0x20(%ebp)
je     8049ab6 <__sprintf_chk@plt+0x536>
mov    0x80534a8,%edx
test   %edx,%edx
je     8049abf <__sprintf_chk@plt+0x53f>
cmp    %edx,%eax
je     8049ac4 <__sprintf_chk@plt+0x544>
mov    0x80533e0,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fa28,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
cmpl   $0x0,0x80534a8
jne    8049ac4 <__sprintf_chk@plt+0x544>
mov    %eax,0x80534a8
mov    0x807399c,%edx
mov    -0xb0(%ebp),%eax
test   %edx,%edx
mov    %eax,0x8075acc
jne    804a1ec <__sprintf_chk@plt+0xc6c>
cmpl   $0x0,0x80739a0
jne    804a1ec <__sprintf_chk@plt+0xc6c>
cmpl   $0x0,0x80739a4
jne    804a1ec <__sprintf_chk@plt+0xc6c>
cmpl   $0x0,0x80739a8
jne    804a1ec <__sprintf_chk@plt+0xc6c>
mov    %edx,-0xb0(%ebp)
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0xa,(%esp)
call   80494b0 <socket@plt>
mov    -0xb0(%ebp),%edx
test   %eax,%eax
mov    %eax,%esi
js     804a581 <__sprintf_chk@plt+0x1001>
mov    0x8054540,%eax
mov    %edx,-0xb4(%ebp)
test   %eax,%eax
je     8049be9 <__sprintf_chk@plt+0x669>
mov    %eax,(%esp)
lea    -0x4c(%ebp),%edi
call   804b580 <__sprintf_chk@plt+0x2000>
mov    -0xb4(%ebp),%edx
mov    $0x5,%ecx
mov    %eax,-0xb0(%ebp)
mov    %edx,%eax
rep stos %eax,%es:(%edi)
mov    -0xb0(%ebp),%eax
mov    %eax,-0x3c(%ebp)
mov    -0x30(%ebp),%eax
and    $0xc0ff,%eax
cmp    $0x80fe,%eax
je     804a53c <__sprintf_chk@plt+0xfbc>
cmpb   $0xff,-0x30(%ebp)
je     804a52d <__sprintf_chk@plt+0xfad>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   804c950 <__sprintf_chk@plt+0x33d0>
lea    -0x4c(%ebp),%eax
movl   $0x14,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x32,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
cmp    $0xffffffff,%eax
mov    %eax,%ecx
je     804a599 <__sprintf_chk@plt+0x1019>
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
call   804c950 <__sprintf_chk@plt+0x33d0>
lea    -0x38(%ebp),%eax
movw   $0x104,-0x36(%ebp)
movl   $0x1c,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049540 <connect@plt>
add    $0x1,%eax
je     804a4eb <__sprintf_chk@plt+0xf6b>
lea    -0x90(%ebp),%eax
movl   $0x1c,-0x90(%ebp)
00
mov    %eax,0x8(%esp)
movl   $0x8073994,0x4(%esp)
mov    %esi,(%esp)
call   8049470 <getsockname@plt>
add    $0x1,%eax
je     804a64b <__sprintf_chk@plt+0x10cb>
movw   $0x0,0x8073996
00
mov    %esi,(%esp)
call   8049550 <close@plt>
cmpl   $0x0,0x8054540
je     8049d1a <__sprintf_chk@plt+0x79a>
lea    -0x6c(%ebp),%eax
mov    %eax,(%esp)
call   8049320 <getifaddrs@plt>
test   %eax,%eax
jne    804a69b <__sprintf_chk@plt+0x111b>
mov    0x80739a0,%eax
mov    -0x6c(%ebp),%esi
mov    0x8054540,%edx
mov    0x807399c,%ecx
mov    %eax,-0xb0(%ebp)
mov    0x80739a4,%eax
mov    %eax,-0xb4(%ebp)
mov    0x80739a8,%eax
mov    %eax,-0xb8(%ebp)
test   %esi,%esi
je     804a663 <__sprintf_chk@plt+0x10e3>
mov    0xc(%esi),%edi
test   %edi,%edi
je     8049cb2 <__sprintf_chk@plt+0x732>
cmpw   $0xa,(%edi)
je     8049cb6 <__sprintf_chk@plt+0x736>
mov    (%esi),%esi
jmp    8049c9d <__sprintf_chk@plt+0x71d>
mov    %ecx,-0xc0(%ebp)
mov    %edx,0x4(%esp)
movl   $0x3,0x8(%esp)
mov    0x4(%esi),%eax
mov    %edx,-0xbc(%ebp)
mov    %eax,(%esp)
call   80494f0 <strncmp@plt>
mov    -0xbc(%ebp),%edx
mov    -0xc0(%ebp),%ecx
test   %eax,%eax
jne    8049cb2 <__sprintf_chk@plt+0x732>
cmp    %ecx,0x8(%edi)
jne    8049cb2 <__sprintf_chk@plt+0x732>
mov    -0xb0(%ebp),%eax
cmp    %eax,0xc(%edi)
jne    8049cb2 <__sprintf_chk@plt+0x732>
mov    -0xb4(%ebp),%eax
cmp    %eax,0x10(%edi)
jne    8049cb2 <__sprintf_chk@plt+0x732>
mov    -0xb8(%ebp),%eax
cmp    %eax,0x14(%edi)
jne    8049cb2 <__sprintf_chk@plt+0x732>
mov    -0x6c(%ebp),%eax
mov    %eax,(%esp)
call   80493b0 <freeifaddrs@plt>
mov    0x8053500,%esi
test   %esi,%esi
js     804a4a4 <__sprintf_chk@plt+0xf24>
cmpl   $0x0,0x8054540
je     8049da3 <__sprintf_chk@plt+0x823>
mov    0x8053504,%eax
lea    0x8053520(%eax),%ebx
lea    0xc(%ebx),%edi
lea    0x20(%eax),%edx
movl   $0x20,0x8053520(%eax)
00
xor    %eax,%eax
test   $0x1,%edi
mov    %edx,0x8053504
mov    $0x14,%edx
movl   $0x29,0x4(%ebx)
movl   $0x32,0x8(%ebx)
jne    804a693 <__sprintf_chk@plt+0x1113>
test   $0x2,%edi
jne    804a689 <__sprintf_chk@plt+0x1109>
mov    %edx,%ecx
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     8049d8d <__sprintf_chk@plt+0x80d>
stos   %ax,%es:(%edi)
and    $0x1,%dl
je     8049d93 <__sprintf_chk@plt+0x813>
stos   %al,%es:(%edi)
mov    0x8054540,%eax
mov    %eax,(%esp)
call   804b580 <__sprintf_chk@plt+0x2000>
mov    %eax,0x1c(%ebx)
cmpb   $0xff,0x807396c
je     804a2a0 <__sprintf_chk@plt+0xd20>
cmpl   $0x0,0x8053328
jns    804a2da <__sprintf_chk@plt+0xd5a>
testb  $0x80,0x80759f1
jne    804a323 <__sprintf_chk@plt+0xda3>
mov    0x80533a8,%eax
cmp    $0x7,%eax
jbe    8049de1 <__sprintf_chk@plt+0x861>
cmpl   $0x0,0x8053324
js     804a4c4 <__sprintf_chk@plt+0xf44>
add    $0x1038,%eax
mov    %eax,-0xac(%ebp)
mov    %eax,(%esp)
call   8049220 <malloc@plt>
test   %eax,%eax
mov    %eax,-0xb0(%ebp)
je     804a424 <__sprintf_chk@plt+0xea4>
lea    -0x9c(%ebp),%eax
movl   $0x1,0x8075ac0
00
movl   $0x1,-0x9c(%ebp)
00
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x19,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
test   %eax,%eax
jne    804a35c <__sprintf_chk@plt+0xddc>
mov    0x80533a8,%ecx
mov    $0x200,%ebx
lea    0x207(%ecx),%eax
cltd
idiv   %ebx
imul   $0x118,%eax,%eax
lea    0x8(%ecx,%eax,1),%eax
mov    %eax,-0x9c(%ebp)
mov    %eax,0x4(%esp)
mov    0x8053500,%eax
mov    %eax,(%esp)
call   804da30 <__sprintf_chk@plt+0x44b0>
lea    -0x94(%ebp),%eax
movl   $0x2,-0x94(%ebp)
00
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0xff,0x4(%esp)
mov    0x8053500,%eax
mov    %eax,(%esp)
call   8049070 <setsockopt@plt>
test   %eax,%eax
js     804a503 <__sprintf_chk@plt+0xf83>
or     $0xffffffff,%eax
mov    $0x8,%ecx
cmpl   $0x0,0x8075ac0
lea    -0x6c(%ebp),%edx
mov    %edx,%edi
rep stos %eax,%es:(%edi)
jne    8049eda <__sprintf_chk@plt+0x95a>
andl   $0xffffffe1,-0x6c(%ebp)
cmpl   $0x0,0x8053324
mov    -0x5c(%ebp),%eax
js     804a41c <__sprintf_chk@plt+0xe9c>
and    $0xef,%ah
mov    0x8053500,%ebx
mov    %eax,-0x5c(%ebp)
movl   $0x20,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
test   %eax,%eax
js     804a4d3 <__sprintf_chk@plt+0xf53>
mov    0x80759f0,%edx
test   $0x10000,%edx
jne    804a3c1 <__sprintf_chk@plt+0xe41>
and    $0x20000,%edx
je     8049f9e <__sprintf_chk@plt+0xa1e>
movl   $0x4,0x10(%esp)
movl   $0x8075ac8,0xc(%esp)
movl   $0x12,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
je     804a5e8 <__sprintf_chk@plt+0x1068>
movl   $0x4,0x10(%esp)
movl   $0x8075ac8,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
je     804a6bd <__sprintf_chk@plt+0x113d>
lea    -0x90(%ebp),%eax
movl   $0x1,-0x90(%ebp)
00
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x33,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
je     804a600 <__sprintf_chk@plt+0x1080>
mov    0x80759f0,%edx
test   $0x4,%dh
jne    804a455 <__sprintf_chk@plt+0xed5>
and    $0x2,%dh
je     804a112 <__sprintf_chk@plt+0xb92>
mov    0x8053504,%eax
mov    $0x20,%esi
mov    %esp,-0xb4(%ebp)
movl   $0x1,-0x90(%ebp)
00
add    $0x2f,%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
xor    %eax,%eax
lea    0x14(%esp),%edx
test   $0x2,%dl
mov    %edx,%edi
jne    804a776 <__sprintf_chk@plt+0x11f6>
mov    %esi,%ecx
shr    $0x2,%ecx
and    $0x2,%esi
rep stos %eax,%es:(%edi)
je     804a034 <__sprintf_chk@plt+0xab4>
stos   %ax,%es:(%edi)
mov    0x8073984,%eax
mov    %edx,%edi
mov    $0x807396c,%esi
movb   $0x0,0x14(%edx)
movw   $0x1,0x16(%edx)
movb   $0x1,0x15(%edx)
and    $0xfffff,%eax
test   $0x1,%dl
bswap  %eax
mov    %eax,0x10(%edx)
mov    $0x10,%eax
jne    804a76e <__sprintf_chk@plt+0x11ee>
test   $0x2,%edi
jne    804a6b3 <__sprintf_chk@plt+0x1133>
mov    %eax,%ecx
shr    $0x2,%ecx
test   $0x2,%al
rep movsl %ds:(%esi),%es:(%edi)
je     804a088 <__sprintf_chk@plt+0xb08>
movzwl (%esi),%ecx
mov    %cx,(%edi)
mov    $0x2,%ecx
test   $0x1,%al
je     804a093 <__sprintf_chk@plt+0xb13>
movzbl (%esi,%ecx,1),%eax
mov    %al,(%edi,%ecx,1)
mov    %edx,0xc(%esp)
movl   $0x20,0x10(%esp)
mov    %edx,-0xb8(%ebp)
movl   $0x20,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
mov    -0xb8(%ebp),%edx
add    $0x1,%eax
je     804a569 <__sprintf_chk@plt+0xfe9>
mov    0x10(%edx),%eax
mov    %eax,0x8073984
mov    %eax,0x8073968
lea    -0x90(%ebp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x21,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
je     804a756 <__sprintf_chk@plt+0x11d6>
mov    -0xb4(%ebp),%esp
mov    $0x807396c,%eax
call   804ad30 <__sprintf_chk@plt+0x17b0>
mov    %eax,0xc(%esp)
mov    0x8075acc,%eax
movl   $0x804ffff,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8073984,%eax
test   %eax,%eax
jne    804a54a <__sprintf_chk@plt+0xfca>
mov    0x8054540,%ebx
test   %ebx,%ebx
je     804a73f <__sprintf_chk@plt+0x11bf>
movl   $0x40,0xc(%esp)
movl   $0x8053460,0x8(%esp)
movl   $0x807399c,0x4(%esp)
movl   $0xa,(%esp)
call   80494a0 <inet_ntop@plt>
mov    %ebx,0xc(%esp)
movl   $0x8053460,0x8(%esp)
movl   $0x805001c,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x80533a8,%eax
movl   $0x8050029,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8053500,%eax
mov    %eax,(%esp)
call   804db30 <__sprintf_chk@plt+0x45b0>
call   804ca20 <__sprintf_chk@plt+0x34a0>
mov    -0xac(%ebp),%eax
mov    %eax,0x8(%esp)
mov    -0xb0(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x8053500,%eax
mov    %eax,(%esp)
call   804eec0 <__sprintf_chk@plt+0x5940>
mov    0x8054540,%eax
test   %eax,%eax
je     8049d1a <__sprintf_chk@plt+0x79a>
and    $0xc0ff,%edx
cmp    $0x80fe,%edx
je     804a227 <__sprintf_chk@plt+0xca7>
cmpb   $0xff,0x807399c
jne    8049d1a <__sprintf_chk@plt+0x79a>
movzbl 0x807399d,%edx
and    $0xf,%edx
cmp    $0x2,%dl
jne    8049d1a <__sprintf_chk@plt+0x79a>
mov    %eax,(%esp)
call   804b580 <__sprintf_chk@plt+0x2000>
mov    %eax,0x80739ac
jmp    8049d1a <__sprintf_chk@plt+0x79a>
mov    (%edi,%edx,4),%eax
mov    %eax,-0xb0(%ebp)
jmp    8049923 <__sprintf_chk@plt+0x3a3>
cmpl   $0x1,0x8053320
jne    80496e3 <__sprintf_chk@plt+0x163>
jmp    8049918 <__sprintf_chk@plt+0x398>
mov    0x8053424,%eax
movl   $0x804f964,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80499a8 <__sprintf_chk@plt+0x428>
mov    0x80533e0,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fe75,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
cmpl   $0x0,0x8075aa8
je     804a2c7 <__sprintf_chk@plt+0xd47>
cmpl   $0x3e7,0x80533bc
00
jle    804a70e <__sprintf_chk@plt+0x118e>
mov    0x8053328,%eax
cmp    $0x2,%eax
jne    804a6d5 <__sprintf_chk@plt+0x1155>
cmpl   $0x0,0x8053328
jns    804a2da <__sprintf_chk@plt+0xd5a>
movl   $0x2,0x8053328
00
movl   $0x4,0x10(%esp)
movl   $0x8053328,0xc(%esp)
movl   $0x17,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
jne    8049dbd <__sprintf_chk@plt+0x83d>
movl   $0x804ff0f,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x1c,0x8(%esp)
movl   $0x8073994,0x4(%esp)
mov    %esi,(%esp)
call   8049300 <bind@plt>
add    $0x1,%eax
jne    8049dca <__sprintf_chk@plt+0x84a>
movl   $0x804ff27,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804faa8,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x0,0x8075ac0
00
jmp    8049e48 <__sprintf_chk@plt+0x8c8>
mov    0x80533e0,%eax
movl   $0x39,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f988,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    -0x90(%ebp),%eax
movl   $0x0,-0x90(%ebp)
00
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x13,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
mov    0x80759f0,%edx
add    $0x1,%eax
jne    8049f34 <__sprintf_chk@plt+0x9b4>
movl   $0x804fb10,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
and    $0xfffffffd,%eax
jmp    8049eed <__sprintf_chk@plt+0x96d>
mov    0x80533e0,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ff3e,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x4,0x10(%esp)
movl   $0x8073960,0xc(%esp)
movl   $0x43,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
mov    0x80759f0,%edx
add    $0x1,%eax
jne    8049fea <__sprintf_chk@plt+0xa6a>
movl   $0x804ffbf,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    -0xac(%ebp),%eax
mov    %eax,(%ebx)
movl   $0x804fef8,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x1,0x80759ec
00
jmp    8049de1 <__sprintf_chk@plt+0x861>
movl   $0x804ff54,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x804fed9,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fadc,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
jmp    8049ebe <__sprintf_chk@plt+0x93e>
movzbl -0x2f(%ebp),%eax
and    $0xf,%eax
cmp    $0x2,%al
jne    8049b8f <__sprintf_chk@plt+0x60f>
mov    -0xb0(%ebp),%eax
mov    %eax,-0x20(%ebp)
jmp    8049b8f <__sprintf_chk@plt+0x60f>
bswap  %eax
movl   $0x805000c,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a14a <__sprintf_chk@plt+0xbca>
movl   $0x804ffd7,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x804ff08,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x8054540,%edx
xor    %eax,%eax
mov    %edx,%edi
repnz scas %es:(%edi),%al
mov    %edx,0xc(%esp)
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
not    %ecx
mov    %ecx,0x10(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
jne    8049bd5 <__sprintf_chk@plt+0x655>
movl   $0x804febd,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x804ff6d,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    -0x90(%ebp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x29,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
add    $0x1,%eax
jne    8049fdb <__sprintf_chk@plt+0xa5b>
movl   $0x804ffa7,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x804fee1,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    %edx,0xc(%esp)
movl   $0x804fb34,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    8049d0f <__sprintf_chk@plt+0x78f>
stos   %ax,%es:(%edi)
sub    $0x2,%edx
jmp    8049d7f <__sprintf_chk@plt+0x7ff>
stos   %al,%es:(%edi)
mov    $0x13,%dl
jmp    8049d73 <__sprintf_chk@plt+0x7f3>
movl   $0x804feed,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movsw  %ds:(%esi),%es:(%edi)
sub    $0x2,%eax
jmp    804a072 <__sprintf_chk@plt+0xaf2>
movl   $0x804ff8b,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
test   %eax,%eax
js     804a2c7 <__sprintf_chk@plt+0xd47>
mov    0x80533e0,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fa7c,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fa4c,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
testb  $0x80,0x80759f1
je     804a19c <__sprintf_chk@plt+0xc1c>
mov    $0x80503a9,%ebx
jmp    804a158 <__sprintf_chk@plt+0xbd8>
movl   $0x804ffeb,(%esp)
call   80491b0 <perror@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movsb  %ds:(%esi),%es:(%edi)
mov    $0xf,%al
jmp    804a066 <__sprintf_chk@plt+0xae6>
stos   %ax,%es:(%edi)
mov    $0x1e,%si
jmp    804a026 <__sprintf_chk@plt+0xaa6>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804f6b0
push   $0x804f640
push   %ecx
push   %esi
push   $0x8049590
call   80492d0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80533cf,%eax
sub    $0x80533cc,%eax
cmp    $0x6,%eax
ja     804a7d0 <__sprintf_chk@plt+0x1250>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804a7cf <__sprintf_chk@plt+0x124f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80533cc,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80533cc,%eax
sub    $0x80533cc,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804a809 <__sprintf_chk@plt+0x1289>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804a808 <__sprintf_chk@plt+0x1288>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80533cc,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8053428
jne    804a84c <__sprintf_chk@plt+0x12cc>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804a7c0 <__sprintf_chk@plt+0x1240>
movb   $0x1,0x8053428
leave
repz ret
xchg   %ax,%ax
mov    0x8052ef8,%eax
test   %eax,%eax
je     804a878 <__sprintf_chk@plt+0x12f8>
mov    $0x0,%eax
test   %eax,%eax
je     804a878 <__sprintf_chk@plt+0x12f8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8052ef8,(%esp)
call   *%eax
leave
jmp    804a7f0 <__sprintf_chk@plt+0x1270>
nop
jmp    804a7f0 <__sprintf_chk@plt+0x1270>
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x80533e0,%eax
movl   $0xe3,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f6d0,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x80533e0,%eax
movl   $0x13a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f7b4,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x18,%esp
cmp    $0x80,%al
je     804aae8 <__sprintf_chk@plt+0x1568>
jbe    804a950 <__sprintf_chk@plt+0x13d0>
cmp    $0x82,%al
je     804ab08 <__sprintf_chk@plt+0x1588>
jb     804aa88 <__sprintf_chk@plt+0x1508>
cmp    $0x83,%al
xchg   %ax,%ax
je     804aa38 <__sprintf_chk@plt+0x14b8>
cmp    $0x84,%al
jne    804ab28 <__sprintf_chk@plt+0x15a8>
movl   $0x804fd6d,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x2,%al
mov    %edx,%ebx
je     804aaa8 <__sprintf_chk@plt+0x1528>
jbe    804aa58 <__sprintf_chk@plt+0x14d8>
cmp    $0x3,%al
je     804a9f0 <__sprintf_chk@plt+0x1470>
cmp    $0x4,%al
lea    0x0(%esi),%esi
jne    804ab28 <__sprintf_chk@plt+0x15a8>
movl   $0x804fce9,0x4(%esp)
movl   $0x1,(%esp)
mov    %ecx,0xc(%esp)
call   80493a0 <__printf_chk@plt>
test   %bl,%bl
mov    0xc(%esp),%ecx
je     804ac08 <__sprintf_chk@plt+0x1688>
cmp    $0x1,%bl
mov    %ecx,0xc(%esp)
je     804ac85 <__sprintf_chk@plt+0x1705>
cmp    $0x2,%bl
je     804ab48 <__sprintf_chk@plt+0x15c8>
mov    %ebx,0x8(%esp)
movl   $0x804fd31,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0xc(%esp),%ecx
mov    %ecx,0x8(%esp)
movl   $0x804fd3a,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fcb7,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
test   %bl,%bl
je     804ac48 <__sprintf_chk@plt+0x16c8>
cmp    $0x1,%bl
je     804ac28 <__sprintf_chk@plt+0x16a8>
mov    %ebx,0x8(%esp)
movl   $0x804fc8e,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi),%esi
movl   $0x804fd62,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%al
jne    804ab28 <__sprintf_chk@plt+0x15a8>
movl   $0x804fc22,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
cmp    $0x4,%bl
ja     804ac68 <__sprintf_chk@plt+0x16e8>
jmp    *0x8050190(,%ebx,4)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fd4d,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,0x8(%esp)
movl   $0x804fc96,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
test   %bl,%bl
je     804a942 <__sprintf_chk@plt+0x13c2>
mov    %ebx,0x8(%esp)
movl   $0x804fcad,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi),%esi
movl   $0x804fd40,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fd58,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x804fd7b,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
movl   $0x804fd21,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0xc(%esp),%ecx
jmp    804a9cc <__sprintf_chk@plt+0x144c>
lea    0x0(%esi),%esi
movl   $0x804fc61,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f8f0,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fc45,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fc3c,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fc75,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fcfd,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0xc(%esp),%ecx
jmp    804a9cc <__sprintf_chk@plt+0x144c>
lea    0x0(%esi),%esi
movl   $0x804fcd1,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fcc7,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
movl   $0x804fc86,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804a942 <__sprintf_chk@plt+0x13c2>
movl   $0x804fd11,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0xc(%esp),%ecx
jmp    804a9cc <__sprintf_chk@plt+0x144c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movzwl 0x6(%eax),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x8(%esp)
movl   $0x804fd91,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x1c,%esp
ret
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x24,%esp
call   8049350 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebx
lea    0x1c(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049290 <strtoul@plt>
mov    0x1c(%esp),%edx
cmpb   $0x0,(%edx)
je     804ad26 <__sprintf_chk@plt+0x17a6>
mov    (%ebx),%edx
mov    $0xffffffff,%eax
test   %edx,%edx
jne    804ad26 <__sprintf_chk@plt+0x17a6>
movl   $0x16,(%ebx)
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x2c,%esp
movl   $0x8075a00,(%esp)
mov    %eax,0x1c(%esp)
call   80490e0 <_setjmp@plt>
test   %eax,%eax
sete   %al
movzbl %al,%eax
mov    %eax,0x8054520
mov    0x80534a4,%eax
test   %eax,%eax
je     804ad80 <__sprintf_chk@plt+0x1800>
movl   $0x0,0x8054520
00
mov    0x80534a0,%edx
test   %edx,%edx
je     804ad78 <__sprintf_chk@plt+0x17f8>
mov    %edx,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%eax
add    $0x2c,%esp
ret
xchg   %ax,%ax
mov    0x8075abc,%eax
test   %eax,%eax
jne    804ad92 <__sprintf_chk@plt+0x1812>
testb  $0x4,0x80759f0
je     804add8 <__sprintf_chk@plt+0x1858>
movl   $0x0,0x8054520
00
mov    0x1c(%esp),%eax
movl   $0x40,0xc(%esp)
movl   $0x8053460,0x8(%esp)
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0x80534a0
00
call   80494a0 <inet_ntop@plt>
mov    $0x8053460,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   8049140 <gethostbyaddr@plt>
movl   $0x0,0x8054520
00
test   %eax,%eax
mov    %eax,0x80534a4
je     804ad9c <__sprintf_chk@plt+0x181c>
jmp    804ad63 <__sprintf_chk@plt+0x17e3>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
xor    %ebx,%ebx
sub    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    (%edi,%ebx,1),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
cmp    %ebx,%esi
ja     804ae20 <__sprintf_chk@plt+0x18a0>
shr    $0x1f,%eax
test   %al,%al
jne    804ae20 <__sprintf_chk@plt+0x18a0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
sub    $0x1c,%esp
mov    0x8053324,%eax
mov    0x20(%esp),%edx
test   %eax,%eax
js     804ae80 <__sprintf_chk@plt+0x1900>
cmp    $0x4,%eax
je     804ae80 <__sprintf_chk@plt+0x1900>
movl   $0x804fd9e,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    (%edx,%edx,4),%eax
mov    0x80531ec(,%eax,4),%eax
or     %eax,0x8053448
xor    %eax,%eax
movl   $0x4,0x8053324
00
add    $0x1c,%esp
ret
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    0x90(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x6c(%esp)
xor    %ecx,%ecx
mov    0x94(%esp),%edx
lea    (%eax,%eax,4),%eax
mov    0x80531ec(,%eax,4),%eax
mov    %eax,0x40(%esp)
mov    0x8053320,%eax
test   %eax,%eax
js     804aeec <__sprintf_chk@plt+0x196c>
mov    0x8053444,%ebx
test   %ebx,%ebx
je     804aeec <__sprintf_chk@plt+0x196c>
cmp    $0x1,%eax
jne    804b184 <__sprintf_chk@plt+0x1c04>
mov    %edx,(%esp)
movl   $0x1,0x8053320
00
call   8049330 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x44(%esp)
je     804b19c <__sprintf_chk@plt+0x1c1c>
movl   $0x25,0x4(%esp)
mov    %eax,(%esp)
call   80492a0 <strchr@plt>
test   %eax,%eax
mov    %eax,0x4c(%esp)
je     804af39 <__sprintf_chk@plt+0x19b9>
movb   $0x0,(%eax)
add    $0x1,%eax
mov    %eax,(%esp)
call   80492c0 <strlen@plt>
cmp    $0xf,%eax
ja     804b25c <__sprintf_chk@plt+0x1cdc>
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8049330 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x30(%esp)
je     804b19c <__sprintf_chk@plt+0x1c1c>
mov    %eax,(%esp)
call   80492c0 <strlen@plt>
mov    %eax,0x48(%esp)
add    $0x1,%eax
mov    %eax,(%esp)
mov    %eax,%ebx
mov    %eax,0x34(%esp)
call   8049220 <malloc@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
je     804b1a4 <__sprintf_chk@plt+0x1c24>
test   %ebx,%ebx
je     804b28d <__sprintf_chk@plt+0x1d0d>
call   8049570 <__ctype_b_loc@plt>
xor    %ebx,%ebx
xor    %ecx,%ecx
mov    %eax,%ebp
xor    %eax,%eax
nop
mov    0x2c(%esp),%edi
lea    (%edi,%eax,1),%esi
mov    0x0(%ebp),%edi
mov    %esi,0x28(%esp)
mov    0x30(%esp),%esi
movzbl (%esi,%eax,1),%edx
movsbl %dl,%esi
mov    %edx,%eax
testb  $0x1,0x1(%edi,%esi,2)
je     804afcd <__sprintf_chk@plt+0x1a4d>
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049560 <__ctype_tolower_loc@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    (%eax),%eax
movzbl (%eax,%esi,4),%eax
mov    0x28(%esp),%edi
mov    %al,(%edi)
xor    %eax,%eax
cmp    $0x2e,%dl
sete   %al
add    $0x1,%ebx
add    %eax,%ecx
mov    %ebx,%eax
cmp    0x34(%esp),%ebx
jne    804af90 <__sprintf_chk@plt+0x1a10>
mov    %ecx,%eax
mov    0x40(%esp),%ecx
test   %ecx,%ecx
je     804b158 <__sprintf_chk@plt+0x1bd8>
mov    0x48(%esp),%esi
add    $0x4,%esi
mov    %esi,(%esp)
call   8049220 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b232 <__sprintf_chk@plt+0x1cb2>
mov    %eax,0x54(%esp)
lea    0x54(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
lea    0x5c(%esp),%ebp
mov    %ebp,0x10(%esp)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x58(%esp)
call   8049430 <__dn_comp@plt>
test   %eax,%eax
mov    %eax,%edi
js     804b29e <__sprintf_chk@plt+0x1d1e>
cmp    %eax,%esi
jbe    804b20b <__sprintf_chk@plt+0x1c8b>
lea    0x50(%esp),%esi
mov    %esi,(%esp)
call   8049480 <MD5_Init@plt>
movzbl (%ebx),%eax
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049520 <MD5_Update@plt>
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
call   80490d0 <MD5_Final@plt>
mov    0x4c(%esp),%edx
test   %edx,%edx
je     804b178 <__sprintf_chk@plt+0x1bf8>
add    $0x1,%edx
mov    $0x804fdad,%eax
mov    %eax,0x20(%esp)
movzbl 0x5f(%esp),%eax
mov    %edx,0x24(%esp)
movl   $0x804fdf9,0xc(%esp)
movl   $0x3f,0x8(%esp)
mov    %eax,0x1c(%esp)
movzbl 0x5e(%esp),%eax
movl   $0x1,0x4(%esp)
movl   $0x80534c0,(%esp)
mov    %eax,0x18(%esp)
movzbl 0x5d(%esp),%eax
mov    %eax,0x14(%esp)
movzbl 0x5c(%esp),%eax
mov    %eax,0x10(%esp)
call   8049580 <__sprintf_chk@plt>
mov    0x40(%esp),%edx
test   %edx,%edx
jns    804b0ec <__sprintf_chk@plt+0x1b6c>
movb   $0x0,(%ebx,%edi,1)
mov    0x8053444,%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x40(%esp),%eax
movl   $0x80534c0,0x8073980
08
mov    %ebx,0x8053444
shr    $0x1f,%eax
add    %eax,%edi
mov    0x2c(%esp),%eax
mov    %edi,0x8053440
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
xor    %eax,%eax
mov    0x6c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804b197 <__sprintf_chk@plt+0x1c17>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
movl   $0x1,0x40(%esp)
jne    804aff6 <__sprintf_chk@plt+0x1a76>
movl   $0xffffffff,0x40(%esp)
jmp    804aff6 <__sprintf_chk@plt+0x1a76>
lea    0x0(%esi),%esi
mov    $0x80503a9,%edx
mov    %edx,%eax
jmp    804b090 <__sprintf_chk@plt+0x1b10>
movl   $0x804fdaf,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
jmp    804b13e <__sprintf_chk@plt+0x1bbe>
call   8049150 <__stack_chk_fail@plt>
movl   $0x0,0x30(%esp)
mov    0x80533e0,%eax
xor    %ebx,%ebx
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fde2,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x0,0x2c(%esp)
mov    %ebx,(%esp)
call   80490f0 <free@plt>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
movl   $0x1,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f938,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
jmp    804b1d3 <__sprintf_chk@plt+0x1c53>
mov    0x80533e0,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fde2,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
jmp    804b1d3 <__sprintf_chk@plt+0x1c53>
mov    0x80533e0,%eax
movl   $0x1c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fdc5,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x1,(%esp)
call   8049280 <exit@plt>
mov    0x40(%esp),%eax
test   %eax,%eax
je     804b168 <__sprintf_chk@plt+0x1be8>
jmp    804aff6 <__sprintf_chk@plt+0x1a76>
mov    0x2c(%esp),%eax
movl   $0x804f910,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    804b1d3 <__sprintf_chk@plt+0x1c53>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053324,%eax
test   %eax,%eax
js     804b2f8 <__sprintf_chk@plt+0x1d78>
cmp    $0x2,%eax
je     804b2f8 <__sprintf_chk@plt+0x1d78>
sub    $0x1c,%esp
movl   $0x804fd9e,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
add    $0x1c,%esp
ret
xchg   %ax,%ax
movl   $0x2,0x8053324
00
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x8053324,%eax
test   %eax,%eax
js     804b338 <__sprintf_chk@plt+0x1db8>
cmp    $0x3,%eax
je     804b338 <__sprintf_chk@plt+0x1db8>
sub    $0x1c,%esp
movl   $0x804fd9e,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
add    $0x1c,%esp
ret
xchg   %ax,%ax
movl   $0x3,0x8053324
00
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x8053324,%eax
mov    0x20(%esp),%edx
test   %eax,%eax
js     804b380 <__sprintf_chk@plt+0x1e00>
cmp    $0x3,%eax
je     804b380 <__sprintf_chk@plt+0x1e00>
movl   $0x804fd9e,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    (%edx,%edx,4),%eax
mov    0x80531ec(,%eax,4),%eax
or     %eax,0x8053448
xor    %eax,%eax
movl   $0x3,0x8053324
00
add    $0x1c,%esp
ret
mov    0x8053324,%eax
test   %eax,%eax
js     804b3c8 <__sprintf_chk@plt+0x1e48>
cmp    $0x4,%eax
je     804b3c8 <__sprintf_chk@plt+0x1e48>
sub    $0x1c,%esp
movl   $0x804fd9e,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
add    $0x1c,%esp
ret
xchg   %ax,%ax
movl   $0x4,0x8053324
00
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x70(%esp),%eax
lea    (%eax,%eax,4),%eax
mov    0x80531ec(,%eax,4),%edx
mov    0x8053320,%eax
test   %eax,%eax
js     804b410 <__sprintf_chk@plt+0x1e90>
mov    0x8053444,%ecx
test   %ecx,%ecx
je     804b410 <__sprintf_chk@plt+0x1e90>
cmp    %eax,%edx
jne    804b530 <__sprintf_chk@plt+0x1fb0>
mov    %edx,0x8053320
xor    %eax,%eax
movl   $0x0,0x30(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     804b418 <__sprintf_chk@plt+0x1e98>
test   %edx,%edx
je     804b508 <__sprintf_chk@plt+0x1f88>
cmp    $0x2,%edx
je     804b4d8 <__sprintf_chk@plt+0x1f58>
movl   $0xffffffff,0x1c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x74(%esp),%eax
movl   $0x0,0x4(%esp)
movl   $0x2,0x38(%esp)
mov    %eax,(%esp)
call   80494c0 <getaddrinfo@plt>
test   %eax,%eax
jne    804b543 <__sprintf_chk@plt+0x1fc3>
mov    0x2c(%esp),%ebp
test   %ebp,%ebp
je     804b528 <__sprintf_chk@plt+0x1fa8>
mov    0x8053440,%esi
mov    %ebp,%edi
mov    %esi,(%esp)
call   8049220 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b4f8 <__sprintf_chk@plt+0x1f78>
mov    0x1c(%esp),%ebp
add    0x14(%edi),%ebp
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ebp,0x4(%esp)
call   8049110 <memcpy@plt>
mov    0x8053444,%eax
mov    %eax,(%esp)
call   80490f0 <free@plt>
mov    0x2c(%esp),%edx
mov    %ebx,0x8053444
mov    %edx,(%esp)
call   8049400 <freeaddrinfo@plt>
xor    %eax,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
movl   $0x4,0x8053440
00
movl   $0x2,0x34(%esp)
movl   $0x4,0x1c(%esp)
jmp    804b441 <__sprintf_chk@plt+0x1ec1>
nop
mov    0x1c(%edi),%edi
test   %edi,%edi
jne    804b489 <__sprintf_chk@plt+0x1f09>
mov    %ebp,%edx
jmp    804b4c5 <__sprintf_chk@plt+0x1f45>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x10,0x8053440
00
movl   $0xa,0x34(%esp)
movl   $0x8,0x1c(%esp)
jmp    804b441 <__sprintf_chk@plt+0x1ec1>
nop
xor    %edx,%edx
jmp    804b4c5 <__sprintf_chk@plt+0x1f45>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fdaf,(%esp)
call   8049240 <puts@plt>
mov    $0xffffffff,%eax
jmp    804b4cf <__sprintf_chk@plt+0x1f4f>
mov    0x74(%esp),%eax
movl   $0x804fe17,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    804b4cf <__sprintf_chk@plt+0x1f4f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049210 <if_nametoindex@plt>
test   %eax,%eax
je     804b599 <__sprintf_chk@plt+0x2019>
add    $0x18,%esp
pop    %ebx
ret
mov    0x80533e0,%eax
mov    %ebx,0xc(%esp)
movl   $0x804fe29,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x80531e0,%eax
mov    0x30(%esp),%edi
test   %eax,%eax
je     804b670 <__sprintf_chk@plt+0x20f0>
xor    %esi,%esi
mov    $0x80531e0,%ebx
jmp    804b60c <__sprintf_chk@plt+0x208c>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%edi,%ebp,1)
je     804b650 <__sprintf_chk@plt+0x20d0>
xchg   %ax,%ax
add    $0x14,%ebx
mov    (%ebx),%eax
add    $0x1,%esi
test   %eax,%eax
je     804b670 <__sprintf_chk@plt+0x20f0>
mov    0x4(%ebx),%ebp
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
mov    %ebp,0x8(%esp)
call   80494f0 <strncmp@plt>
test   %eax,%eax
jne    804b600 <__sprintf_chk@plt+0x2080>
mov    0x8(%ebx),%ecx
test   %ecx,%ecx
je     804b5f8 <__sprintf_chk@plt+0x2078>
cmpb   $0x3d,(%edi,%ebp,1)
jne    804b600 <__sprintf_chk@plt+0x2080>
lea    0x1(%edi,%ebp,1),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   *0x10(%ebx)
test   %eax,%eax
js     804b600 <__sprintf_chk@plt+0x2080>
mov    (%ebx),%edx
test   %edx,%edx
je     804b670 <__sprintf_chk@plt+0x20f0>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   *0x10(%ebx)
test   %eax,%eax
jns    804b642 <__sprintf_chk@plt+0x20c2>
add    $0x14,%ebx
mov    (%ebx),%eax
add    $0x1,%esi
test   %eax,%eax
jne    804b60c <__sprintf_chk@plt+0x208c>
xchg   %ax,%ax
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   804a880 <__sprintf_chk@plt+0x1300>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x27c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x26c(%esp)
xor    %eax,%eax
call   8049350 <__errno_location@plt>
movl   $0x8,0x28(%esp)
movl   $0x1c,0x30(%esp)
movl   $0x1,0x38(%esp)
movl   $0x0,0x44(%esp)
movl   $0x200,0x40(%esp)
mov    %eax,%esi
mov    (%eax),%eax
movl   $0x2040,0x8(%esp)
mov    %eax,0x1c(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x24(%esp)
lea    0x50(%esp),%eax
mov    %eax,0x2c(%esp)
lea    0x24(%esp),%eax
mov    %eax,0x34(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8053500,%eax
mov    %eax,(%esp)
call   8049450 <recvmsg@plt>
test   %eax,%eax
js     804b7c8 <__sprintf_chk@plt+0x2248>
mov    0x40(%esp),%ebp
cmp    $0xb,%ebp
jbe    804b8ad <__sprintf_chk@plt+0x232d>
mov    0x3c(%esp),%edx
test   %edx,%edx
je     804b8ad <__sprintf_chk@plt+0x232d>
mov    (%edx),%ecx
xor    %ebx,%ebx
add    %edx,%ebp
cmpl   $0x29,0x4(%edx)
je     804b7b8 <__sprintf_chk@plt+0x2238>
cmp    $0xb,%ecx
jbe    804b770 <__sprintf_chk@plt+0x21f0>
add    $0x3,%ecx
and    $0xfffffffc,%ecx
add    %ecx,%edx
lea    0xc(%edx),%ecx
cmp    %ecx,%ebp
jb     804b770 <__sprintf_chk@plt+0x21f0>
mov    (%edx),%ecx
lea    0x3(%ecx),%edi
and    $0xfffffffc,%edi
add    %edx,%edi
cmp    %edi,%ebp
jae    804b742 <__sprintf_chk@plt+0x21c2>
lea    0x0(%esi),%esi
test   %ebx,%ebx
je     804b8ad <__sprintf_chk@plt+0x232d>
movzbl 0x4(%ebx),%ecx
cmp    $0x1,%cl
je     804b7d0 <__sprintf_chk@plt+0x2250>
xor    %edx,%edx
cmp    $0x3,%cl
je     804b830 <__sprintf_chk@plt+0x22b0>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
mov    %edx,%eax
mov    0x26c(%esp),%edi
xor    %gs:0x14,%edi
jne    804b927 <__sprintf_chk@plt+0x23a7>
add    $0x27c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x19,0x8(%edx)
lea    0xc(%edx),%edi
cmove  %edi,%ebx
jmp    804b748 <__sprintf_chk@plt+0x21c8>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
jmp    804b78c <__sprintf_chk@plt+0x220c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80759f0,%eax
mov    $0xffffffff,%edx
test   $0x10,%al
jne    804b78c <__sprintf_chk@plt+0x220c>
test   $0x1,%al
jne    804b8c7 <__sprintf_chk@plt+0x2347>
mov    (%ebx),%eax
cmp    $0x5a,%eax
je     804b8fe <__sprintf_chk@plt+0x237e>
mov    %eax,(%esp)
call   8049250 <strerror@plt>
movl   $0x8050038,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
addl   $0x1,0x8075ad0
mov    $0xffffffff,%edx
jmp    804b78c <__sprintf_chk@plt+0x220c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x7,%eax
jbe    804b8a0 <__sprintf_chk@plt+0x2320>
lea    0x58(%esp),%eax
movl   $0x10,0x8(%esp)
movl   $0x807396c,0x4(%esp)
mov    %eax,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
mov    %eax,%edx
jne    804b8b8 <__sprintf_chk@plt+0x2338>
cmpb   $0x80,0x48(%esp)
jne    804b8a0 <__sprintf_chk@plt+0x2320>
movzwl 0x4c(%esp),%eax
cmp    0x8075adc,%eax
jne    804b8a0 <__sprintf_chk@plt+0x2320>
mov    0x80759f0,%eax
addl   $0x1,0x8075ad0
test   $0x10,%al
jne    804b88f <__sprintf_chk@plt+0x230f>
test   $0x1,%al
je     804b92c <__sprintf_chk@plt+0x23ac>
mov    $0x2,%dl
mov    $0x805004f,%eax
call   804ae10 <__sprintf_chk@plt+0x1890>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
mov    $0x1,%eax
jmp    804b794 <__sprintf_chk@plt+0x2214>
nop
movl   $0x0,0x1c(%esp)
jmp    804b78c <__sprintf_chk@plt+0x220c>
call   8049510 <abort@plt>
lea    0x0(%esi),%esi
xor    %edx,%edx
movl   $0x0,0x1c(%esp)
jmp    804b78c <__sprintf_chk@plt+0x220c>
xor    %ebx,%ebx
mov    $0x1,%edi
xchg   %ax,%ax
mov    %edi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x8050050(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
je     804b8d0 <__sprintf_chk@plt+0x2350>
shr    $0x1f,%eax
test   %al,%al
jne    804b8d0 <__sprintf_chk@plt+0x2350>
jmp    804b81a <__sprintf_chk@plt+0x229a>
mov    0x8(%ebx),%eax
movl   $0x804fb80,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    804b81a <__sprintf_chk@plt+0x229a>
call   8049150 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
call   804d4b0 <__sprintf_chk@plt+0x3f30>
lea    0x18(%ebx),%eax
movzwl 0x4e(%esp),%edi
call   804ad30 <__sprintf_chk@plt+0x17b0>
ror    $0x8,%di
movzwl %di,%edi
mov    %edi,0xc(%esp)
movl   $0x8050052,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8(%ebx),%ecx
movzbl 0x6(%ebx),%edx
movzbl 0x5(%ebx),%eax
call   804a900 <__sprintf_chk@plt+0x1380>
mov    0x8053420,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x8053420,%eax
mov    %eax,(%esp)
call   80490b0 <fflush@plt>
jmp    804b88f <__sprintf_chk@plt+0x230f>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
xor    %edx,%edx
mov    0x20(%esp),%eax
movb   $0x80,(%eax)
movb   $0x0,0x1(%eax)
movzwl 0x8075a9c,%ecx
mov    %dx,0x2(%eax)
lea    0x1(%ecx),%edx
mov    0x80759ec,%ecx
ror    $0x8,%dx
mov    %dx,0x6(%eax)
mov    0x8075adc,%edx
test   %ecx,%ecx
mov    %dx,0x4(%eax)
je     804b9ee <__sprintf_chk@plt+0x246e>
movl   $0x0,0x4(%esp)
movl   $0x8054568,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x80533a8,%eax
add    $0x1c,%esp
add    $0x8,%eax
ret
lea    0x0(%esi),%esi
push   %esi
xor    %eax,%eax
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
lea    0x1c(%esp),%esi
mov    %ax,0x2(%ebx)
movb   $0x8b,(%ebx)
movzwl 0x8075a9c,%eax
movl   $0x0,0x80533a8
00
add    $0x1,%eax
ror    $0x8,%ax
mov    %ax,0x8(%ebx)
mov    %esi,(%esp)
call   8049480 <MD5_Init@plt>
mov    %esi,(%esp)
movl   $0xc,0x8(%esp)
movl   $0x8073988,0x4(%esp)
call   8049520 <MD5_Update@plt>
lea    0x8(%ebx),%eax
add    $0x10,%ebx
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
movl   $0x2,0x8(%esp)
call   8049520 <MD5_Update@plt>
mov    %esi,0x4(%esp)
movl   $0x8053450,(%esp)
call   80490d0 <MD5_Final@plt>
movzwl -0x8(%ebx),%eax
mov    %eax,0x80531d8
mov    0x8053450,%eax
mov    %eax,-0x6(%ebx)
movzwl 0x8053454,%eax
mov    %ax,-0x2(%ebx)
mov    0x8053320,%eax
mov    %al,-0xf(%ebx)
movzwl 0x8053324,%eax
ror    $0x8,%ax
mov    %ax,-0xc(%ebx)
mov    0x8053448,%eax
mov    %ax,-0xa(%ebx)
mov    0x8053440,%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    0x8053444,%eax
mov    %eax,0x4(%esp)
call   8049110 <memcpy@plt>
mov    0x8053440,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
add    $0x10,%eax
ret
push   %ebx
sub    $0x58,%esp
movzwl 0x8075a9c,%eax
lea    0x1(%eax),%ecx
mov    $0x1,%eax
movzwl %cx,%edx
shr    $0x5,%edx
shl    %cl,%eax
not    %eax
and    %eax,0x80739e0(,%edx,4)
mov    0x8053324,%eax
test   %eax,%eax
js     804bcc0 <__sprintf_chk@plt+0x2740>
xor    %ebx,%ebx
mov    %bx,0x8054562
lea    0x34(%esp),%ebx
mov    %ebx,(%esp)
ror    $0x8,%cx
movb   $0x8b,0x8054560
mov    %cx,0x8054568
movl   $0x0,0x80533a8
00
call   8049480 <MD5_Init@plt>
mov    %ebx,(%esp)
movl   $0xc,0x8(%esp)
movl   $0x8073988,0x4(%esp)
call   8049520 <MD5_Update@plt>
mov    %ebx,(%esp)
movl   $0x2,0x8(%esp)
movl   $0x8054568,0x4(%esp)
call   8049520 <MD5_Update@plt>
mov    %ebx,0x4(%esp)
movl   $0x8053450,(%esp)
call   80490d0 <MD5_Final@plt>
movzwl 0x8054568,%eax
mov    0x8053440,%ebx
movl   $0x1f3f0,0xc(%esp)
movl   $0x8054570,(%esp)
mov    %eax,0x80531d8
mov    0x8053450,%eax
mov    %ebx,0x8(%esp)
add    $0x10,%ebx
mov    %eax,0x805456a
movzwl 0x8053454,%eax
mov    %ax,0x805456e
mov    0x8053320,%eax
mov    %al,0x8054561
movzwl 0x8053324,%eax
ror    $0x8,%ax
mov    %ax,0x8054564
mov    0x8053448,%eax
mov    %ax,0x8054566
mov    0x8053444,%eax
mov    %eax,0x4(%esp)
call   8049260 <__memcpy_chk@plt>
mov    0x8053504,%edx
test   %edx,%edx
jne    804bc50 <__sprintf_chk@plt+0x26d0>
mov    0x8054524,%eax
movl   $0x1c,0x14(%esp)
movl   $0x8073964,0x10(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8053500,%eax
movl   $0x8054560,0x4(%esp)
mov    %eax,(%esp)
call   80493c0 <sendto@plt>
mov    %eax,%edx
xor    %eax,%eax
cmp    %ebx,%edx
cmovne %edx,%eax
movl   $0x0,0x8054524
00
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %ebx,0x30(%esp)
xor    %eax,%eax
movl   $0x8054560,0x2c(%esp)
movl   $0x0,0x34(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804bc5e <__sprintf_chk@plt+0x26de>
lea    0x2c(%esp),%eax
mov    %eax,0x3c(%esp)
mov    0x8054524,%eax
mov    %edx,0x48(%esp)
movl   $0x8073964,0x34(%esp)
movl   $0x1c,0x38(%esp)
mov    %eax,0x8(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8053500,%eax
movl   $0x1,0x40(%esp)
movl   $0x8053520,0x44(%esp)
mov    %eax,(%esp)
call   80493f0 <sendmsg@plt>
mov    %eax,%edx
jmp    804bc37 <__sprintf_chk@plt+0x26b7>
nop
xor    %eax,%eax
mov    0x80759ec,%edx
mov    %ax,0x8054562
mov    0x8075adc,%eax
ror    $0x8,%cx
movb   $0x80,0x8054560
test   %edx,%edx
movb   $0x0,0x8054561
mov    %cx,0x8054566
mov    %ax,0x8054564
jne    804bd08 <__sprintf_chk@plt+0x2788>
mov    0x80533a8,%eax
lea    0x8(%eax),%ebx
jmp    804bbf5 <__sprintf_chk@plt+0x2675>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
movl   $0x8054568,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x80533a8,%eax
lea    0x8(%eax),%ebx
jmp    804bbf5 <__sprintf_chk@plt+0x2675>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x44c,%esp
mov    0x460(%esp),%eax
mov    0x464(%esp),%edx
mov    %gs:0x14,%edi
mov    %edi,0x43c(%esp)
xor    %edi,%edi
lea    0x10(%eax),%edi
mov    %edi,0x2c(%esp)
lea    0x14(%eax),%edi
add    %edx,%eax
sub    $0x14,%edx
mov    %eax,0x1c(%esp)
js     804bf2a <__sprintf_chk@plt+0x29aa>
xor    %edx,%edx
cmp    %eax,%edi
lea    0x3c(%esp),%ebp
mov    %edi,%esi
jae    804bef9 <__sprintf_chk@plt+0x2979>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%edi
mov    $0x100,%ecx
mov    $0xffffffff,%eax
test   %edx,%edx
rep stos %eax,%es:(%edi)
jne    804beba <__sprintf_chk@plt+0x293a>
mov    0x1c(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049370 <__dn_expand@plt>
test   %eax,%eax
mov    %eax,0x20(%esp)
js     804bf14 <__sprintf_chk@plt+0x2994>
add    %esi,%eax
cmp    %eax,0x1c(%esp)
jbe    804bea5 <__sprintf_chk@plt+0x2925>
cmpb   $0x0,(%eax)
setne  %al
movzbl %al,%edi
xor    $0x1,%eax
movzbl %al,%eax
mov    %edi,0x28(%esp)
mov    %eax,0x24(%esp)
mov    0x8053420,%eax
xor    %ebx,%ebx
movl   $0x20,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    %ebp,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     804be0a <__sprintf_chk@plt+0x288a>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
sub    %ebp,%edx
cmp    %edx,%ebx
jae    804be83 <__sprintf_chk@plt+0x2903>
call   8049570 <__ctype_b_loc@plt>
movsbl 0x0(%ebp,%ebx,1),%edi
mov    (%eax),%eax
testb  $0x40,0x1(%eax,%edi,2)
jne    804be70 <__sprintf_chk@plt+0x28f0>
mov    %edi,0x8(%esp)
movl   $0x8050099,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x1,%ebx
jmp    804be08 <__sprintf_chk@plt+0x2888>
xchg   %ax,%ax
mov    0x8053420,%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
jmp    804be69 <__sprintf_chk@plt+0x28e9>
mov    0x28(%esp),%eax
test   %eax,%eax
jne    804bed4 <__sprintf_chk@plt+0x2954>
mov    0x24(%esp),%eax
add    0x20(%esp),%eax
add    %eax,%esi
cmp    %esi,0x1c(%esp)
jbe    804bef9 <__sprintf_chk@plt+0x2979>
mov    $0x1,%edx
jmp    804bd88 <__sprintf_chk@plt+0x2808>
movl   $0x0,0x24(%esp)
movl   $0x1,0x28(%esp)
jmp    804bdf1 <__sprintf_chk@plt+0x2871>
mov    0x8053420,%eax
movl   $0x2c,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
jmp    804bd9e <__sprintf_chk@plt+0x281e>
mov    0x8053420,%eax
movl   $0x2e,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x24(%esp),%eax
add    0x20(%esp),%eax
add    %eax,%esi
cmp    %esi,0x1c(%esp)
ja     804be9b <__sprintf_chk@plt+0x291b>
mov    0x43c(%esp),%eax
xor    %gs:0x14,%eax
jne    804bf40 <__sprintf_chk@plt+0x29c0>
add    $0x44c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8050080,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804bef9 <__sprintf_chk@plt+0x2979>
movl   $0x8050067,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804bef9 <__sprintf_chk@plt+0x2979>
call   8049150 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x43c,%esp
mov    0x450(%esp),%ebx
mov    0x454(%esp),%edx
mov    %gs:0x14,%eax
mov    %eax,0x42c(%esp)
xor    %eax,%eax
movzwl 0x4(%ebx),%eax
ror    $0x8,%ax
cmp    $0x3,%ax
lea    (%ebx,%edx,1),%esi
je     804c0e8 <__sprintf_chk@plt+0x2b68>
cmp    $0x4,%ax
je     804c088 <__sprintf_chk@plt+0x2b08>
movl   $0x4,0x14(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
add    $0x10,%ebx
test   %edx,%edx
js     804c10c <__sprintf_chk@plt+0x2b8c>
mov    $0x4,%edi
sub    0x14(%esp),%edi
cmp    %ebx,%esi
ja     804c001 <__sprintf_chk@plt+0x2a81>
jmp    804c060 <__sprintf_chk@plt+0x2ae0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x8(%esp)
movl   $0x805009f,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
cmp    %ebx,%esi
jbe    804c060 <__sprintf_chk@plt+0x2ae0>
mov    0x8053420,%eax
movl   $0x2c,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
add    0x14(%esp),%ebx
cmp    %ebx,%esi
jb     804c0b0 <__sprintf_chk@plt+0x2b30>
lea    (%ebx,%edi,1),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
lea    0x2c(%esp),%ebp
movl   $0x400,0xc(%esp)
mov    %ebp,0x8(%esp)
mov    %eax,(%esp)
call   80494a0 <inet_ntop@plt>
test   %eax,%eax
jne    804bfd0 <__sprintf_chk@plt+0x2a50>
call   8049350 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049250 <strerror@plt>
movl   $0x804fbb0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
cmp    %ebx,%esi
ja     804bfec <__sprintf_chk@plt+0x2a6c>
nop
mov    0x1c(%esp),%eax
test   %eax,%eax
jne    804c0cc <__sprintf_chk@plt+0x2b4c>
mov    0x42c(%esp),%eax
xor    %gs:0x14,%eax
jne    804c125 <__sprintf_chk@plt+0x2ba5>
add    $0x43c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
movzwl 0x6(%ebx),%eax
movl   $0x8,0x14(%esp)
movl   $0x2,0x18(%esp)
and    $0x100,%ax
movzwl %ax,%eax
mov    %eax,0x1c(%esp)
jmp    804bfae <__sprintf_chk@plt+0x2a2e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8050080,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804c068 <__sprintf_chk@plt+0x2ae8>
movl   $0x805008c,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c068 <__sprintf_chk@plt+0x2ae8>
lea    0x0(%esi),%esi
movzwl 0x6(%ebx),%eax
movl   $0x14,0x14(%esp)
movl   $0xa,0x18(%esp)
and    $0x100,%ax
movzwl %ax,%eax
mov    %eax,0x1c(%esp)
jmp    804bfae <__sprintf_chk@plt+0x2a2e>
movl   $0x8050067,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c068 <__sprintf_chk@plt+0x2ae8>
call   8049150 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
movzbl 0x1(%ebx),%eax
cmp    $0x1,%al
je     804c1e0 <__sprintf_chk@plt+0x2c60>
jb     804c1b0 <__sprintf_chk@plt+0x2c30>
cmp    $0x2,%al
je     804c198 <__sprintf_chk@plt+0x2c18>
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x8(%esp)
movl   $0x80500cc,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
movzwl 0x8(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x8(%esp)
movl   $0x80500e0,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80500c3,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c169 <__sprintf_chk@plt+0x2be9>
xchg   %ax,%ax
movzwl 0x4(%ebx),%edx
mov    %edx,%eax
ror    $0x8,%ax
cmp    $0x2,%ax
je     804c200 <__sprintf_chk@plt+0x2c80>
jb     804c218 <__sprintf_chk@plt+0x2c98>
cmp    $0x4,%ax
ja     804c218 <__sprintf_chk@plt+0x2c98>
mov    0x24(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804bf50 <__sprintf_chk@plt+0x29d0>
jmp    804c169 <__sprintf_chk@plt+0x2be9>
lea    0x0(%esi),%esi
movl   $0x80500ba,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c169 <__sprintf_chk@plt+0x2be9>
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804bd30 <__sprintf_chk@plt+0x27b0>
jmp    804c169 <__sprintf_chk@plt+0x2be9>
lea    0x0(%esi),%esi
ror    $0x8,%dx
movzwl %dx,%edx
mov    %edx,0x8(%esp)
movl   $0x80500a3,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c169 <__sprintf_chk@plt+0x2be9>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
mov    $0xffffffff,%edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%eax
mov    0x64(%esp),%ebx
mov    0x14(%eax),%ecx
mov    0x8(%eax),%edx
cmp    $0xb,%ecx
mov    (%edx),%esi
jbe    804c277 <__sprintf_chk@plt+0x2cf7>
mov    0x10(%eax),%eax
test   %eax,%eax
je     804c277 <__sprintf_chk@plt+0x2cf7>
mov    (%eax),%edx
add    %eax,%ecx
cmpl   $0x29,0x4(%eax)
je     804c2a0 <__sprintf_chk@plt+0x2d20>
cmp    $0xb,%edx
ja     804c2b8 <__sprintf_chk@plt+0x2d38>
cmp    $0x7,%ebx
jg     804c2da <__sprintf_chk@plt+0x2d5a>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x80759f1
jne    804c390 <__sprintf_chk@plt+0x2e10>
mov    $0x1,%ebx
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%ebp
cmp    $0x8,%ebp
je     804c2ad <__sprintf_chk@plt+0x2d2d>
cmp    $0x34,%ebp
jne    804c272 <__sprintf_chk@plt+0x2cf2>
cmp    $0xf,%edx
jbe    804c272 <__sprintf_chk@plt+0x2cf2>
mov    0xc(%eax),%edi
lea    0x0(%esi),%esi
add    $0x3,%edx
and    $0xfffffffc,%edx
add    %edx,%eax
lea    0xc(%eax),%edx
cmp    %edx,%ecx
jb     804c277 <__sprintf_chk@plt+0x2cf7>
mov    (%eax),%edx
lea    0x3(%edx),%ebp
and    $0xfffffffc,%ebp
add    %eax,%ebp
cmp    %ebp,%ecx
jae    804c26c <__sprintf_chk@plt+0x2cec>
cmp    $0x7,%ebx
jle    804c280 <__sprintf_chk@plt+0x2d00>
movzbl (%esi),%eax
cmp    $0x81,%al
je     804c3b8 <__sprintf_chk@plt+0x2e38>
cmp    $0x8c,%al
je     804c45d <__sprintf_chk@plt+0x2edd>
cmp    $0x37,%ebx
jbe    804c28d <__sprintf_chk@plt+0x2d0d>
lea    0x20(%esi),%eax
movl   $0x10,0x8(%esp)
movl   $0x807396c,0x4(%esp)
mov    %eax,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804c28d <__sprintf_chk@plt+0x2d0d>
movzbl 0xe(%esi),%eax
lea    0x30(%esi),%edi
cmp    $0x2c,%eax
je     804c548 <__sprintf_chk@plt+0x2fc8>
cmp    $0x3a,%eax
je     804c554 <__sprintf_chk@plt+0x2fd4>
testb  $0x1,0x80759f1
je     804c28d <__sprintf_chk@plt+0x2d0d>
mov    0x8075aa8,%eax
test   %eax,%eax
jne    804c28d <__sprintf_chk@plt+0x2d0d>
call   804d4b0 <__sprintf_chk@plt+0x3f30>
mov    0x68(%esp),%eax
add    $0x8,%eax
call   804ad30 <__sprintf_chk@plt+0x17b0>
movl   $0x8050100,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x4(%esi),%ecx
movzbl 0x1(%esi),%edx
movzbl (%esi),%eax
bswap  %ecx
call   804a900 <__sprintf_chk@plt+0x1380>
jmp    804c41b <__sprintf_chk@plt+0x2e9b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80533e0,%eax
mov    %ebx,0xc(%esp)
movl   $0x804fbd4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    804c28d <__sprintf_chk@plt+0x2d0d>
xchg   %ax,%ax
movzwl 0x4(%esi),%eax
cmp    0x8075adc,%eax
jne    804c28d <__sprintf_chk@plt+0x2d0d>
mov    0x68(%esp),%eax
add    $0x8,%eax
call   804ad30 <__sprintf_chk@plt+0x17b0>
movzwl 0x6(%esi),%edx
ror    $0x8,%dx
movzwl %dx,%edx
movl   $0x804acb0,0x20(%esp)
movl   $0x0,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %eax,0x1c(%esp)
mov    0x6c(%esp),%eax
mov    %edx,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8,0x4(%esp)
mov    %eax,0x18(%esp)
mov    %esi,(%esp)
call   804e180 <__sprintf_chk@plt+0x4c00>
test   %eax,%eax
jne    804c449 <__sprintf_chk@plt+0x2ec9>
mov    0x80759f0,%eax
test   $0x20,%ah
jne    804c60f <__sprintf_chk@plt+0x308f>
test   $0x1,%al
je     804c434 <__sprintf_chk@plt+0x2eb4>
xor    %ebx,%ebx
jmp    804c292 <__sprintf_chk@plt+0x2d12>
mov    0x8053420,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x8053420,%eax
xor    %ebx,%ebx
mov    %eax,(%esp)
call   80490b0 <fflush@plt>
jmp    804c292 <__sprintf_chk@plt+0x2d12>
movzwl 0x8(%esi),%ebp
lea    0x8(%esi),%eax
mov    %eax,0x2c(%esp)
movzwl %bp,%edx
cmp    0x80531d8,%edx
je     804c4cb <__sprintf_chk@plt+0x2f4b>
lea    0x3c(%esp),%ebp
mov    %ebp,(%esp)
call   8049480 <MD5_Init@plt>
mov    %ebp,(%esp)
movl   $0xc,0x8(%esp)
movl   $0x8073988,0x4(%esp)
call   8049520 <MD5_Update@plt>
mov    0x2c(%esp),%eax
mov    %ebp,(%esp)
movl   $0x2,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049520 <MD5_Update@plt>
mov    %ebp,0x4(%esp)
movl   $0x8053450,(%esp)
call   80490d0 <MD5_Final@plt>
movzwl 0x8(%esi),%ebp
movzwl %bp,%eax
mov    %eax,0x80531d8
lea    0xa(%esi),%eax
movl   $0x6,0x8(%esp)
movl   $0x8053450,0x4(%esp)
mov    %eax,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
jne    804c28d <__sprintf_chk@plt+0x2d0d>
mov    0x68(%esp),%eax
ror    $0x8,%bp
movzwl %bp,%ebp
add    $0x8,%eax
call   804ad30 <__sprintf_chk@plt+0x17b0>
movl   $0x804c130,0x20(%esp)
movl   $0x0,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x1c(%esp)
mov    0x6c(%esp),%eax
movl   $0x8,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x18(%esp)
call   804e180 <__sprintf_chk@plt+0x4c00>
test   %eax,%eax
je     804c41b <__sprintf_chk@plt+0x2e9b>
xor    %ebx,%ebx
jmp    804c292 <__sprintf_chk@plt+0x2d12>
movzbl 0x30(%esi),%eax
lea    0x38(%esi),%edi
jmp    804c327 <__sprintf_chk@plt+0x2da7>
cmpb   $0x80,(%edi)
jne    804c28d <__sprintf_chk@plt+0x2d0d>
movzwl 0x4(%edi),%eax
cmp    0x8075adc,%eax
jne    804c28d <__sprintf_chk@plt+0x2d0d>
mov    0x8075a9c,%edx
movzwl 0x6(%edi),%eax
ror    $0x8,%ax
mov    %edx,%ecx
sub    %ax,%cx
js     804c5b0 <__sprintf_chk@plt+0x3030>
movzwl %cx,%ecx
cmp    0x80533ac,%ecx
jl     804c596 <__sprintf_chk@plt+0x3016>
add    $0x1,%ecx
mov    %ecx,0x80533ac
movzwl 0x80759f4,%ecx
mov    %eax,%ebp
sub    %ecx,%ebp
test   %bp,%bp
jle    804c648 <__sprintf_chk@plt+0x30c8>
mov    %ax,0x80759f4
mov    0x8075ac0,%edx
test   %edx,%edx
jne    804c42d <__sprintf_chk@plt+0x2ead>
addl   $0x1,0x8075ad0
testb  $0x1,0x80759f0
jne    804c660 <__sprintf_chk@plt+0x30e0>
call   804d4b0 <__sprintf_chk@plt+0x3f30>
mov    0x68(%esp),%eax
movzwl 0x6(%edi),%ebx
ror    $0x8,%bx
movzwl %bx,%ebx
add    $0x8,%eax
call   804ad30 <__sprintf_chk@plt+0x17b0>
mov    %ebx,0xc(%esp)
movl   $0x80500ea,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804c373 <__sprintf_chk@plt+0x2df3>
mov    0x8053420,%eax
movl   $0x7,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
testb  $0x1,0x80759f0
je     804c434 <__sprintf_chk@plt+0x2eb4>
mov    0x8053420,%eax
mov    %eax,(%esp)
call   80490b0 <fflush@plt>
mov    0x80759f0,%eax
jmp    804c429 <__sprintf_chk@plt+0x2ea9>
movzwl %dx,%edx
sub    %ecx,%edx
cmp    $0x7fff,%edx
jg     804c5aa <__sprintf_chk@plt+0x302a>
jmp    804c5b0 <__sprintf_chk@plt+0x3030>
xchg   %ax,%ax
mov    $0x2,%edx
mov    $0x805004f,%eax
call   804ae10 <__sprintf_chk@plt+0x1890>
jmp    804c292 <__sprintf_chk@plt+0x2d12>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x805344c,%ecx
test   %ecx,%ecx
jne    804c6f8 <__sprintf_chk@plt+0x3178>
sub    $0x2c,%esp
movzwl 0x8075adc,%eax
mov    $0x15,%edx
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x80531ac
mov    0x8053500,%eax
movl   $0x8,0x10(%esp)
movl   $0x8053180,0xc(%esp)
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
movl   $0x1,0x805344c
00
mov    %dx,0x80531a8
movb   $0x0,0x80531aa
movb   $0x1,0x80531ab
call   8049070 <setsockopt@plt>
test   %eax,%eax
jne    804c700 <__sprintf_chk@plt+0x3180>
add    $0x2c,%esp
repz ret
lea    0x0(%esi),%esi
movl   $0x804fbf8,(%esp)
call   80491b0 <perror@plt>
add    $0x2c,%esp
jmp    804c6f8 <__sprintf_chk@plt+0x3178>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
movl   $0x1,0x8075af0
00
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x8075abc
00
mov    0x8054520,%eax
test   %eax,%eax
jne    804c745 <__sprintf_chk@plt+0x31c5>
repz ret
sub    $0x1c,%esp
movl   $0x0,0x4(%esp)
movl   $0x8075a00,(%esp)
call   80493d0 <__longjmp_chk@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
call   8049310 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c92d <__sprintf_chk@plt+0x33ad>
call   80492b0 <cap_init@plt>
test   %eax,%eax
mov    %eax,%esi
je     804c915 <__sprintf_chk@plt+0x3395>
lea    0x2c(%esp),%edi
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0xc,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
call   8049200 <cap_get_flag@plt>
mov    0x2c(%esp),%edx
test   %edx,%edx
jne    804c870 <__sprintf_chk@plt+0x32f0>
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0xd,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
call   8049200 <cap_get_flag@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    804c8a0 <__sprintf_chk@plt+0x3320>
mov    %esi,(%esp)
call   8049230 <cap_set_proc@plt>
test   %eax,%eax
js     804c8e5 <__sprintf_chk@plt+0x3365>
movl   $0x1,0x4(%esp)
movl   $0x8,(%esp)
call   8049380 <prctl@plt>
test   %eax,%eax
js     804c8cd <__sprintf_chk@plt+0x334d>
call   8049160 <getuid@plt>
mov    %eax,(%esp)
call   8049440 <setuid@plt>
test   %eax,%eax
js     804c8fd <__sprintf_chk@plt+0x337d>
movl   $0x0,0x4(%esp)
movl   $0x8,(%esp)
call   8049380 <prctl@plt>
test   %eax,%eax
js     804c8cd <__sprintf_chk@plt+0x334d>
mov    %esi,(%esp)
call   8049460 <cap_free@plt>
mov    %ebx,(%esp)
call   8049460 <cap_free@plt>
call   8049160 <getuid@plt>
mov    %eax,0x8075aa8
call   8049170 <geteuid@plt>
mov    %eax,0x80739c4
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0x1,0x10(%esp)
movl   $0x805339c,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049490 <cap_set_flag@plt>
jmp    804c7b8 <__sprintf_chk@plt+0x3238>
lea    0x0(%esi),%esi
movl   $0x1,0x10(%esp)
movl   $0x80533a0,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049490 <cap_set_flag@plt>
jmp    804c7e8 <__sprintf_chk@plt+0x3268>
movl   $0x80502b5,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
movl   $0x80502a2,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
movl   $0x80502c1,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
movl   $0x8050293,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
movl   $0x8050280,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x34,%esp
call   8049310 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c9f8 <__sprintf_chk@plt+0x3478>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x40(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
call   8049200 <cap_get_flag@plt>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
jne    804c9b8 <__sprintf_chk@plt+0x3438>
mov    0x44(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
setne  %al
mov    %eax,%esi
neg    %esi
mov    %ebx,(%esp)
call   8049460 <cap_free@plt>
add    $0x34,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
call   8049490 <cap_set_flag@plt>
mov    %ebx,(%esp)
call   8049230 <cap_set_proc@plt>
test   %eax,%eax
js     804ca0b <__sprintf_chk@plt+0x348b>
mov    %ebx,(%esp)
xor    %esi,%esi
call   8049460 <cap_free@plt>
jmp    804c9a3 <__sprintf_chk@plt+0x3423>
movl   $0x8050280,(%esp)
mov    $0xffffffff,%esi
call   80491b0 <perror@plt>
jmp    804c9ab <__sprintf_chk@plt+0x342b>
movl   $0x80502a2,(%esp)
mov    $0xffffffff,%esi
call   80491b0 <perror@plt>
jmp    804c9a3 <__sprintf_chk@plt+0x3423>
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
call   80492b0 <cap_init@plt>
mov    %eax,(%esp)
mov    %eax,%ebx
call   8049230 <cap_set_proc@plt>
test   %eax,%eax
js     804ca44 <__sprintf_chk@plt+0x34c4>
mov    %ebx,(%esp)
call   8049460 <cap_free@plt>
add    $0x18,%esp
pop    %ebx
ret
movl   $0x80502a2,(%esp)
call   80491b0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc0(%esp),%eax
sub    $0x41,%eax
cmp    $0x36,%eax
ja     804d240 <__sprintf_chk@plt+0x3cc0>
jmp    *0x805086c(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053420,%eax
movl   $0x0,0x4(%esp)
orl    $0x1,0x80759f0
mov    %eax,(%esp)
call   8049080 <setbuf@plt>
orl    $0x4,0x80759f0
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053424,%esi
orl    $0x8,0x80759f0
movsbl (%esi),%ebx
test   %bl,%bl
je     804caf5 <__sprintf_chk@plt+0x3575>
call   8049570 <__ctype_b_loc@plt>
mov    (%eax),%edx
mov    %esi,%eax
lea    0x0(%esi),%esi
testb  $0x10,0x1(%edx,%ebx,2)
je     804d2f2 <__sprintf_chk@plt+0x3d72>
add    $0x1,%eax
movsbl (%eax),%ebx
test   %bl,%bl
jne    804cae0 <__sprintf_chk@plt+0x3560>
lea    0x9c(%esp),%edx
mov    %edx,0x44(%esp)
lea    0x98(%esp),%edx
mov    %edx,0x40(%esp)
lea    0x94(%esp),%edx
mov    %edx,0x3c(%esp)
lea    0x90(%esp),%edx
mov    %edx,0x38(%esp)
lea    0x8c(%esp),%edx
mov    %edx,0x34(%esp)
lea    0x88(%esp),%edx
mov    %edx,0x30(%esp)
lea    0x84(%esp),%edx
mov    %edx,0x2c(%esp)
lea    0x80(%esp),%edx
mov    %edx,0x28(%esp)
lea    0x7c(%esp),%edx
mov    %edx,0x24(%esp)
lea    0x78(%esp),%edx
mov    %edx,0x20(%esp)
lea    0x74(%esp),%edx
mov    %edx,0x1c(%esp)
lea    0x70(%esp),%edx
mov    %edx,0x18(%esp)
lea    0x6c(%esp),%edx
mov    %edx,0x14(%esp)
lea    0x68(%esp),%edx
lea    0x60(%esp),%eax
mov    %edx,0x10(%esp)
lea    0x64(%esp),%edx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x80505cc,0x4(%esp)
mov    %esi,(%esp)
call   8049420 <sscanf@plt>
test   %eax,%eax
mov    %eax,%ebx
jle    804cd82 <__sprintf_chk@plt+0x3802>
mov    $0xfffffff8,%eax
sub    %ebx,%eax
add    0x805332c,%eax
mov    %eax,%ebp
js     804cd82 <__sprintf_chk@plt+0x3802>
movzbl 0x70(%esp),%edx
movzbl 0x60(%esp),%eax
movzbl 0x64(%esp),%ecx
movzbl 0x68(%esp),%esi
mov    %dl,0x48(%esp)
movzbl 0x74(%esp),%edx
movzbl 0x6c(%esp),%edi
mov    %dl,0x50(%esp)
movzbl 0x78(%esp),%edx
mov    %dl,0x51(%esp)
movzbl 0x7c(%esp),%edx
mov    %dl,0x52(%esp)
movzbl 0x80(%esp),%edx
mov    %dl,0x53(%esp)
movzbl 0x84(%esp),%edx
mov    %dl,0x54(%esp)
movzbl 0x88(%esp),%edx
mov    %dl,0x55(%esp)
movzbl 0x8c(%esp),%edx
mov    %dl,0x56(%esp)
movzbl 0x90(%esp),%edx
mov    %dl,0x57(%esp)
movzbl 0x94(%esp),%edx
mov    %dl,0x58(%esp)
movzbl 0x98(%esp),%edx
mov    %dl,0x59(%esp)
movzbl 0x9c(%esp),%edx
mov    %dl,0x5a(%esp)
xor    %edx,%edx
cmp    $0x1,%ebx
je     804d248 <__sprintf_chk@plt+0x3cc8>
cmp    $0x2,%ebx
je     804d260 <__sprintf_chk@plt+0x3ce0>
cmp    $0x3,%ebx
je     804d2cc <__sprintf_chk@plt+0x3d4c>
cmp    $0x4,%ebx
je     804d298 <__sprintf_chk@plt+0x3d18>
mov    %al,0x5b(%esp)
mov    %esi,%eax
movzbl 0x5b(%esp),%esi
mov    %al,0x4f(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
cmp    $0x5,%ebx
mov    %al,0x8054568(%edx)
movzbl 0x4f(%esp),%eax
mov    %cl,0x8054569(%edx)
mov    %al,0x805456a(%edx)
mov    %edi,%eax
mov    %al,0x805456b(%edx)
movzbl 0x48(%esp),%eax
mov    %al,0x805456c(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x50(%esp),%eax
cmp    $0x6,%ebx
mov    %al,0x805456d(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x51(%esp),%eax
cmp    $0x7,%ebx
mov    %al,0x805456e(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x52(%esp),%eax
cmp    $0x8,%ebx
mov    %al,0x805456f(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x53(%esp),%eax
cmp    $0x9,%ebx
mov    %al,0x8054570(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x54(%esp),%eax
cmp    $0xa,%ebx
mov    %al,0x8054571(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x55(%esp),%eax
cmp    $0xb,%ebx
mov    %al,0x8054572(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x56(%esp),%eax
cmp    $0xc,%ebx
mov    %al,0x8054573(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x57(%esp),%eax
cmp    $0xd,%ebx
mov    %al,0x8054574(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x58(%esp),%eax
cmp    $0xe,%ebx
mov    %al,0x8054575(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x59(%esp),%eax
cmp    $0xf,%ebx
mov    %al,0x8054576(%edx)
je     804cd78 <__sprintf_chk@plt+0x37f8>
movzbl 0x5a(%esp),%eax
mov    %al,0x8054577(%edx)
add    %ebx,%edx
cmp    %ebp,%edx
jle    804cc90 <__sprintf_chk@plt+0x3710>
testb  $0x10,0x80759f0
jne    804cab0 <__sprintf_chk@plt+0x3530>
movl   $0x805032b,0x4(%esp)
xor    %esi,%esi
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
test   %ebx,%ebx
jle    804cdd6 <__sprintf_chk@plt+0x3856>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x8054568(%esi),%eax
add    $0x1,%esi
movl   $0x8050337,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
cmp    %ebx,%esi
jne    804cdb0 <__sprintf_chk@plt+0x3830>
movl   $0xa,(%esp)
call   8049340 <putchar@plt>
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
lea    0x60(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
mov    %eax,(%esp)
call   8049290 <strtoul@plt>
test   %eax,%eax
mov    %eax,0x8075aa4
js     804d354 <__sprintf_chk@plt+0x3dd4>
mov    0x60(%esp),%eax
cmpb   $0x0,(%eax)
jne    804d354 <__sprintf_chk@plt+0x3dd4>
orl    $0x40000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
xchg   %ax,%ax
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8075ad8
jle    804d385 <__sprintf_chk@plt+0x3e05>
cmp    $0x10000,%eax
jle    804d278 <__sprintf_chk@plt+0x3cf8>
mov    0x8075aa8,%ecx
movl   $0x10000,0x8075ad8
00
test   %ecx,%ecx
je     804cab0 <__sprintf_chk@plt+0x3530>
mov    0x80533e0,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050570,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
xchg   %ax,%ax
call   8049350 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebx
lea    0x60(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8053424,%eax
mov    %eax,(%esp)
call   8049390 <strtod@plt>
mov    (%ebx),%ebx
test   %ebx,%ebx
jne    804d39a <__sprintf_chk@plt+0x3e1a>
mov    0x60(%esp),%eax
cmpb   $0x0,(%eax)
jne    804d39e <__sprintf_chk@plt+0x3e1e>
fld    %st(0)
fabs
fldl   0x8050948
fucomip %st(1),%st
fstp   %st(0)
jb     804d3a2 <__sprintf_chk@plt+0x3e22>
fldz
fucomip %st(1),%st
ja     804d3a6 <__sprintf_chk@plt+0x3e26>
fldl   0x8050950
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    804d3aa <__sprintf_chk@plt+0x3e2a>
fnstcw 0x5e(%esp)
fmuls  0x8050958
orl    $0x2,0x80759f0
movzwl 0x5e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x5c(%esp)
fldcw  0x5c(%esp)
fistpl 0x80533bc
fldcw  0x5e(%esp)
jmp    804cab0 <__sprintf_chk@plt+0x3530>
lea    0x0(%esi,%eiz,1),%esi
orl    $0x40,0x80759f0
jmp    804cab0 <__sprintf_chk@plt+0x3530>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8075aa0
jg     804cab0 <__sprintf_chk@plt+0x3530>
mov    0x80533e0,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050518,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x2000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
cmp    $0x863,%eax
mov    %eax,0x80533b8
ja     804d323 <__sprintf_chk@plt+0x3da3>
imul   $0x3e8,%eax,%eax
mov    %eax,0x80533b8
jmp    804cab0 <__sprintf_chk@plt+0x3530>
lea    0x0(%esi),%esi
movl   $0x80533c0,0x8(%esp)
movl   $0x805036f,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
movl   $0x0,(%esp)
call   8049280 <exit@plt>
orl    $0x8000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
orl    $0x4000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8054528
jns    804cab0 <__sprintf_chk@plt+0x3530>
mov    0x80533e0,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80502fc,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x100,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
orl    $0x20000,0x80759f0
00
mov    %eax,(%esp)
call   8049530 <strtol@plt>
cmp    $0xff,%eax
mov    %eax,0x8075ac8
jbe    804cab0 <__sprintf_chk@plt+0x3530>
mov    %eax,0xc(%esp)
movl   $0x805033c,0x8(%esp)
mov    0x80533e0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
test   %eax,%eax
mov    %eax,0x80533a8
js     804d3dd <__sprintf_chk@plt+0x3e5d>
mov    0x805332c,%edi
lea    -0x7(%edi),%edx
cmp    %eax,%edx
jg     804cab0 <__sprintf_chk@plt+0x3530>
mov    %eax,0xc(%esp)
movl   $0x8050628,0x8(%esp)
jmp    804d10b <__sprintf_chk@plt+0x3b8b>
lea    0x0(%esi,%eiz,1),%esi
orl    $0x80,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
orl    $0x10,0x80759f0
jmp    804cab0 <__sprintf_chk@plt+0x3530>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053424,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049530 <strtol@plt>
test   %eax,%eax
mov    %eax,0x80759e8
jg     804cab0 <__sprintf_chk@plt+0x3530>
mov    0x80533e0,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050312,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x100000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
orl    $0x10000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
orl    $0x80000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
orl    $0x1000,0x80759f0
00
jmp    804cab0 <__sprintf_chk@plt+0x3530>
nop
call   8049510 <abort@plt>
lea    0x0(%esi),%esi
mov    %al,0x8054568(%edx)
add    $0x1,%edx
cmp    %ebp,%edx
jle    804d248 <__sprintf_chk@plt+0x3cc8>
jmp    804cd82 <__sprintf_chk@plt+0x3802>
lea    0x0(%esi),%esi
mov    %al,0x8054568(%edx)
add    $0x2,%edx
mov    %cl,0x8054567(%edx)
cmp    %ebp,%edx
jle    804d260 <__sprintf_chk@plt+0x3ce0>
jmp    804cd82 <__sprintf_chk@plt+0x3802>
mov    0x8075aa8,%edx
test   %edx,%edx
je     804cab0 <__sprintf_chk@plt+0x3530>
cmp    $0x3,%eax
jle    804cab0 <__sprintf_chk@plt+0x3530>
jmp    804ce7d <__sprintf_chk@plt+0x38fd>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x48(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%ebx
add    $0x4,%edx
mov    %bl,0x8054566(%edx)
mov    %edi,%ebx
mov    %al,0x8054564(%edx)
mov    %cl,0x8054565(%edx)
mov    %bl,0x8054567(%edx)
cmp    %ebp,%edx
jle    804d2a0 <__sprintf_chk@plt+0x3d20>
mov    0x48(%esp),%ebx
jmp    804cd82 <__sprintf_chk@plt+0x3802>
mov    %ebx,%edi
xchg   %ax,%ax
mov    %esi,%ebx
add    $0x3,%edx
mov    %al,0x8054565(%edx)
mov    %cl,0x8054566(%edx)
mov    %bl,0x8054567(%edx)
cmp    %ebp,%edx
jle    804d2d0 <__sprintf_chk@plt+0x3d50>
mov    %edi,%ebx
jmp    804cd82 <__sprintf_chk@plt+0x3802>
mov    0x80533e0,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050598,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050357,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    0x80533e0,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80502e3,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
movl   $0x10000,0xc(%esp)
movl   $0x8050544,0x8(%esp)
jmp    804d10b <__sprintf_chk@plt+0x3b8b>
fstp   %st(0)
jmp    804d3ac <__sprintf_chk@plt+0x3e2c>
fstp   %st(0)
jmp    804d3ac <__sprintf_chk@plt+0x3e2c>
fstp   %st(0)
jmp    804d3ac <__sprintf_chk@plt+0x3e2c>
fstp   %st(0)
jmp    804d3ac <__sprintf_chk@plt+0x3e2c>
fstp   %st(0)
mov    0x80533e0,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80502c8,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
mov    %eax,0xc(%esp)
movl   $0x8050600,0x8(%esp)
jmp    804d10b <__sprintf_chk@plt+0x3b8b>
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x8054534,%edx
mov    0x30(%esp),%ebx
test   %edx,%edx
jne    804d479 <__sprintf_chk@plt+0x3ef9>
mov    0x8075ae0,%eax
test   %eax,%eax
jne    804d480 <__sprintf_chk@plt+0x3f00>
imul   $0x3e8,0x80533b8,%ecx
00
mov    %ecx,0x8054534
mov    $0x10624dd3,%edx
mov    %ecx,%eax
mul    %edx
shr    $0x6,%edx
test   %ebx,%ebx
js     804d42f <__sprintf_chk@plt+0x3eaf>
cmp    %edx,%ebx
jae    804d431 <__sprintf_chk@plt+0x3eb1>
mov    %edx,%ebx
mov    %ecx,%eax
mov    $0x431bde83,%edx
mul    %edx
lea    0x10(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
shr    $0x12,%edx
mov    %edx,0x18(%esp)
imul   $0xf4240,%edx,%edx
movl   $0x0,(%esp)
movl   $0x0,0x10(%esp)
movl   $0x0,0x14(%esp)
sub    %edx,%ecx
mov    %ecx,0x1c(%esp)
call   8049090 <setitimer@plt>
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
mov    0x80759fc,%eax
lea    (%eax,%eax,1),%ecx
imul   $0x3e8,0x80533bc,%eax
00
mov    %ecx,0x8054534
cmp    %eax,%ecx
jae    804d41b <__sprintf_chk@plt+0x3e9b>
mov    %eax,0x8054534
mov    %eax,%ecx
jmp    804d41b <__sprintf_chk@plt+0x3e9b>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x8,0x80759f2
jne    804d4c0 <__sprintf_chk@plt+0x3f40>
ret
lea    0x0(%esi),%esi
sub    $0x2c,%esp
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x1c(%esp),%eax
movl   $0x8050389,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
add    $0x2c,%esp
ret
nop
push   %esi
mov    $0x3e8,%eax
push   %ebx
sub    $0x24,%esp
mov    0x8075abc,%edx
test   %edx,%edx
je     804d520 <__sprintf_chk@plt+0x3fa0>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x8075aa0,%edx
test   %edx,%edx
je     804d540 <__sprintf_chk@plt+0x3fc0>
cmp    0x8075a9c,%edx
jg     804d540 <__sprintf_chk@plt+0x3fc0>
mov    0x8054528,%edx
test   %edx,%edx
je     804d514 <__sprintf_chk@plt+0x3f94>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8075aac,%esi
movl   $0x0,0x4(%esp)
test   %esi,%esi
jne    804d5f8 <__sprintf_chk@plt+0x4078>
movl   $0x8075aac,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x8075ad8,%eax
sub    $0x1,%eax
imul   0x80533bc,%eax
mov    %eax,0x8054530
mov    0x80759f0,%eax
test   $0x100000,%eax
je     804d680 <__sprintf_chk@plt+0x4100>
mov    0x8075a9c,%edx
test   %edx,%edx
jle    804d680 <__sprintf_chk@plt+0x4100>
movzwl %dx,%ecx
mov    $0x1,%ebx
shl    %cl,%ebx
shr    $0x5,%ecx
test   %ebx,0x80739e0(,%ecx,4)
jne    804d680 <__sprintf_chk@plt+0x4100>
test   $0x80000,%eax
jne    804d996 <__sprintf_chk@plt+0x4416>
mov    %edx,%eax
sar    $0x1f,%eax
shr    $0x10,%eax
add    %eax,%edx
movzwl %dx,%edx
sub    %eax,%edx
mov    %edx,0x8(%esp)
movl   $0x805064c,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8053420,%eax
mov    %eax,(%esp)
call   80490b0 <fflush@plt>
jmp    804d680 <__sprintf_chk@plt+0x4100>
lea    0x0(%esi),%esi
lea    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x18(%esp),%edx
mov    0x1c(%esp),%ecx
sub    0x8075aac,%edx
sub    0x8075ab0,%ecx
imul   $0x3e8,%edx,%ebx
mov    $0x10624dd3,%edx
mov    %ecx,%eax
imul   %edx
mov    0x80533bc,%eax
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
add    %ebx,%edx
test   %eax,%eax
jne    804d6e0 <__sprintf_chk@plt+0x4160>
cmp    $0x9,%edx
jg     804d6e0 <__sprintf_chk@plt+0x4160>
mov    0x8075a9c,%ecx
mov    %ecx,%ebx
sub    0x80759f4,%bx
js     804d9d9 <__sprintf_chk@plt+0x4459>
movzwl %bx,%ebx
mov    0x8075ad8,%ecx
cmp    %ebx,%ecx
jg     804d6e6 <__sprintf_chk@plt+0x4166>
mov    $0xa,%eax
sub    %edx,%eax
jmp    804d514 <__sprintf_chk@plt+0x3f94>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    804d793 <__sprintf_chk@plt+0x4213>
call   804bae0 <__sprintf_chk@plt+0x2560>
cmp    $0x0,%eax
je     804d860 <__sprintf_chk@plt+0x42e0>
xchg   %ax,%ax
jg     804da20 <__sprintf_chk@plt+0x44a0>
call   8049350 <__errno_location@plt>
mov    (%eax),%edx
mov    %eax,%ebx
cmp    $0xc,%edx
je     804d720 <__sprintf_chk@plt+0x41a0>
cmp    $0x69,%edx
je     804d720 <__sprintf_chk@plt+0x41a0>
cmp    $0xb,%edx
je     804d708 <__sprintf_chk@plt+0x4188>
xchg   %ax,%ax
call   804b690 <__sprintf_chk@plt+0x2110>
cmp    $0x0,%eax
jg     804d708 <__sprintf_chk@plt+0x4188>
mov    (%ebx),%edx
jne    804d678 <__sprintf_chk@plt+0x40f8>
mov    0x80533b4,%ecx
test   %ecx,%ecx
je     804d678 <__sprintf_chk@plt+0x40f8>
cmp    $0x16,%edx
jne    804d678 <__sprintf_chk@plt+0x40f8>
movl   $0x0,0x80533b4
00
movl   $0x0,(%ebx)
jmp    804d680 <__sprintf_chk@plt+0x4100>
nop
mov    0x8075ad8,%ecx
imul   %eax,%ecx
add    0x8054530,%edx
cmp    %edx,%ecx
cmovle %ecx,%edx
cmp    %eax,%edx
jge    804d838 <__sprintf_chk@plt+0x42b8>
sub    %edx,%eax
jmp    804d514 <__sprintf_chk@plt+0x3f94>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x80533bc,%eax
add    %eax,0x8054530
mov    $0xa,%eax
jmp    804d514 <__sprintf_chk@plt+0x3f94>
lea    0x0(%esi),%esi
mov    0x8075ac4,%eax
mov    $0xc350,%edx
movl   $0x0,0x8054530
00
cmp    $0x61a7f,%eax
jg     804d746 <__sprintf_chk@plt+0x41c6>
test   %eax,%eax
lea    0x7(%eax),%edx
cmovns %eax,%edx
sar    $0x3,%edx
add    0x8075ad4,%edx
testb  $0x40,0x80759f1
mov    0x80533bc,%ecx
mov    %edx,0x8075ad4
jne    804d937 <__sprintf_chk@plt+0x43b7>
cmp    $0x15,%ecx
mov    $0xa,%eax
jg     804d8b8 <__sprintf_chk@plt+0x4338>
mov    0x805452c,%esi
lea    0x1(%esi),%edx
mov    %edx,0x805452c
imul   %eax,%edx
cmp    0x80533b8,%edx
jl     804d514 <__sprintf_chk@plt+0x3f94>
xor    %eax,%eax
mov    0x8075a9c,%esi
movzwl 0x80759f4,%ebx
lea    0x1(%esi),%ecx
movzwl %cx,%edx
sub    %ebx,%edx
cmp    $0x7fff,%edx
mov    %ecx,0x8075a9c
jle    804d7c0 <__sprintf_chk@plt+0x4240>
add    $0x1,%ecx
mov    %cx,0x80759f4
test   %eax,%eax
jne    804d810 <__sprintf_chk@plt+0x4290>
mov    0x80759f0,%eax
test   $0x10,%al
jne    804d810 <__sprintf_chk@plt+0x4290>
test   $0x1,%al
je     804d9ec <__sprintf_chk@plt+0x446c>
xor    %ebx,%ebx
mov    $0x1,%esi
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x8050050(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
je     804d7e0 <__sprintf_chk@plt+0x4260>
shr    $0x1f,%eax
test   %al,%al
jne    804d7e0 <__sprintf_chk@plt+0x4260>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xa,%eax
cmpl   $0xa,0x80533bc
movl   $0x0,0x8054530
00
cmovge 0x80533bc,%eax
jmp    804d514 <__sprintf_chk@plt+0x3f94>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
sub    %eax,%edx
mov    0x1c(%esp),%ebx
mov    %edx,0x8054530
mov    %ecx,0x8075aac
mov    %ebx,0x8075ab0
jmp    804d576 <__sprintf_chk@plt+0x3ff6>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8075a9c,%eax
movzwl 0x80759f4,%ecx
movl   $0x0,0x805452c
00
add    $0x1,%eax
movzwl %ax,%edx
movzwl %cx,%ebx
sub    %ebx,%edx
cmp    $0x7fff,%edx
mov    %eax,0x8075a9c
jle    804d898 <__sprintf_chk@plt+0x4318>
lea    0x1(%eax),%ecx
mov    %cx,0x80759f4
mov    0x80759f0,%edx
and    $0x11,%edx
cmp    $0x1,%edx
je     804d8ce <__sprintf_chk@plt+0x434e>
mov    0x80533bc,%eax
sub    0x8054530,%eax
jmp    804d514 <__sprintf_chk@plt+0x3f94>
mov    %edx,%ecx
mov    %ecx,%eax
mov    $0x1f4,%edx
sar    %eax
cmp    $0x1f5,%eax
cmovge %edx,%eax
jmp    804d773 <__sprintf_chk@plt+0x41f3>
mov    0x80533a4,%edx
cmp    %edx,0x8075ad8
jge    804d920 <__sprintf_chk@plt+0x43a0>
cmp    0x80533ac,%edx
jle    804d920 <__sprintf_chk@plt+0x43a0>
xor    %ebx,%ebx
mov    $0x1,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x8050396(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
je     804d8f0 <__sprintf_chk@plt+0x4370>
shr    $0x1f,%eax
test   %al,%al
jne    804d8f0 <__sprintf_chk@plt+0x4370>
jmp    804d8a6 <__sprintf_chk@plt+0x4326>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%esi
sub    %cx,%si
js     804da0f <__sprintf_chk@plt+0x448f>
movzwl %si,%eax
cmp    %eax,%edx
jg     804d8e4 <__sprintf_chk@plt+0x4364>
jmp    804d8a6 <__sprintf_chk@plt+0x4326>
test   %eax,%eax
je     804d9fd <__sprintf_chk@plt+0x447d>
test   %eax,%eax
lea    0x7(%eax),%ecx
cmovs  %ecx,%eax
sar    $0x3,%eax
lea    0x1f4(%edx,%eax,1),%ecx
mov    $0x10624dd3,%edx
mov    0x8075aa8,%ebx
mov    %ecx,%eax
imul   %edx
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
test   %ebx,%ebx
mov    %edx,0x80533bc
je     804da08 <__sprintf_chk@plt+0x4488>
cmp    $0xc7,%edx
jg     804d8b6 <__sprintf_chk@plt+0x4336>
movl   $0xc8,0x80533bc
00
mov    $0x64,%eax
jmp    804d773 <__sprintf_chk@plt+0x41f3>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x1c(%esp),%eax
movl   $0x8050389,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8075a9c,%edx
jmp    804d5b9 <__sprintf_chk@plt+0x4039>
sub    0x8075ae0,%ecx
mov    %ecx,%ebx
sub    0x8075ad0,%ebx
jmp    804d65f <__sprintf_chk@plt+0x40df>
movl   $0x8050398,(%esp)
call   80491b0 <perror@plt>
jmp    804d810 <__sprintf_chk@plt+0x4290>
imul   $0x3e8,%ecx,%eax
jmp    804d94a <__sprintf_chk@plt+0x43ca>
mov    %edx,%ecx
jmp    804d765 <__sprintf_chk@plt+0x41e5>
sub    0x8075ae0,%eax
sub    0x8075ad0,%eax
jmp    804d92e <__sprintf_chk@plt+0x43ae>
call   8049510 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x80759e8,%eax
mov    0x40(%esp),%ebx
mov    0x44(%esp),%esi
movl   $0x4,0x2c(%esp)
test   %eax,%eax
jne    804da55 <__sprintf_chk@plt+0x44d5>
mov    %esi,0x80759e8
movl   $0x4,0x10(%esp)
lea    0x28(%esp),%edi
movl   $0x80759e8,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049070 <setsockopt@plt>
mov    $0x10000,%eax
imul   0x8075ad8,%esi
movl   $0x4,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
cmp    $0x10000,%esi
cmovge %esi,%eax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x28(%esp)
call   8049070 <setsockopt@plt>
lea    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049190 <getsockopt@plt>
test   %eax,%eax
jne    804daec <__sprintf_chk@plt+0x456c>
cmp    0x28(%esp),%esi
jg     804daf8 <__sprintf_chk@plt+0x4578>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x80533e0,%eax
movl   $0x39,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805066c,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xdc,%esp
mov    0x80759f0,%ecx
mov    0xf0(%esp),%esi
mov    %ecx,%eax
and    $0x3,%eax
cmp    $0x1,%eax
je     804e028 <__sprintf_chk@plt+0x4aa8>
mov    0x8075aa8,%edi
mov    0x80533bc,%ebx
test   %edi,%edi
jne    804ddb8 <__sprintf_chk@plt+0x4838>
mov    $0x7fffffff,%eax
cltd
idivl  0x8075ad8
cmp    %eax,%ebx
jge    804e145 <__sprintf_chk@plt+0x4bc5>
mov    %ecx,%eax
test   $0x40,%al
movl   $0x1,0x20(%esp)
jne    804dff0 <__sprintf_chk@plt+0x4a70>
test   $0x80,%al
jne    804dfb8 <__sprintf_chk@plt+0x4a38>
test   $0x10,%ah
lea    0x44(%esp),%ebx
je     804df78 <__sprintf_chk@plt+0x49f8>
test   $0x40000,%eax
jne    804de78 <__sprintf_chk@plt+0x48f8>
mov    0x80533bc,%eax
movl   $0x1,0x2c(%esp)
movl   $0x0,0x30(%esp)
cmp    $0x3e7,%eax
jg     804dbe8 <__sprintf_chk@plt+0x4668>
cmp    $0xa,%eax
mov    $0xa,%edx
cmovge %eax,%edx
imul   $0x3e8,%edx,%edx
movl   $0x0,0x2c(%esp)
mov    %edx,0x30(%esp)
lea    0x2c(%esp),%edi
movl   $0x8,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
mov    $0xa,%ecx
mov    $0x10624dd3,%edx
cmpl   $0xa,0x80533bc
cmovge 0x80533bc,%ecx
movl   $0x8,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
sar    $0x6,%edx
sub    %eax,%edx
mov    %edx,0x2c(%esp)
imul   $0x3e8,%edx,%edx
mov    %esi,(%esp)
sub    %edx,%ecx
imul   $0x3e8,%ecx,%ecx
mov    %ecx,0x30(%esp)
call   8049070 <setsockopt@plt>
test   %eax,%eax
mov    0x80759f0,%eax
je     804dc81 <__sprintf_chk@plt+0x4701>
or     $0x8,%ah
mov    %eax,0x80759f0
test   $0x8,%al
jne    804dca5 <__sprintf_chk@plt+0x4725>
mov    0x80533a8,%edx
xor    %eax,%eax
test   %edx,%edx
jle    804dca5 <__sprintf_chk@plt+0x4725>
lea    0x0(%esi,%eiz,1),%esi
mov    %al,0x8054568(%eax)
add    $0x1,%eax
cmp    %edx,%eax
jne    804dc98 <__sprintf_chk@plt+0x4718>
call   80491e0 <getpid@plt>
xor    %esi,%esi
mov    $0x23,%ecx
ror    $0x8,%ax
movzwl %ax,%eax
mov    %ebx,%edi
mov    %eax,0x8075adc
mov    %esi,%eax
rep stos %eax,%es:(%edi)
mov    %ebx,%edi
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x2,(%esp)
movl   $0x804c730,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   80494e0 <sigaction@plt>
mov    %esi,%eax
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
mov    %ebx,%edi
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0xe,(%esp)
movl   $0x804c730,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   80494e0 <sigaction@plt>
mov    %esi,%eax
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
movl   $0x804c720,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   80494e0 <sigaction@plt>
mov    %ebx,(%esp)
call   80493e0 <sigemptyset@plt>
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x2,(%esp)
call   80490c0 <sigprocmask@plt>
movl   $0x0,0x4(%esp)
movl   $0x8075ab4,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x8054528,%eax
test   %eax,%eax
jne    804de38 <__sprintf_chk@plt+0x48b8>
movl   $0x1,(%esp)
call   8049500 <isatty@plt>
test   %eax,%eax
jne    804ddf8 <__sprintf_chk@plt+0x4878>
add    $0xdc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    $0xc7,%ebx
jg     804db69 <__sprintf_chk@plt+0x45e9>
mov    0x80533e0,%eax
movl   $0xc8,0xc(%esp)
movl   $0x80506a8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi),%esi
lea    0x34(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x5413,0x4(%esp)
movl   $0x1,(%esp)
call   80491a0 <ioctl@plt>
cmp    $0xffffffff,%eax
je     804ddab <__sprintf_chk@plt+0x482b>
movzwl 0x36(%esp),%eax
test   %ax,%ax
je     804ddab <__sprintf_chk@plt+0x482b>
mov    %eax,0x80533a4
add    $0xdc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x3c(%esp)
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x40(%esp)
call   8049090 <setitimer@plt>
jmp    804dd9b <__sprintf_chk@plt+0x481b>
lea    0x0(%esi),%esi
movl   $0xc,0x24(%esp)
call   8049310 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804e112 <__sprintf_chk@plt+0x4b92>
mov    0x24(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0x44(%esp)
call   8049200 <cap_get_flag@plt>
mov    0x44(%esp),%edx
test   %edx,%edx
jne    804e0c0 <__sprintf_chk@plt+0x4b40>
mov    %edi,(%esp)
call   8049460 <cap_free@plt>
movl   $0x4,0x10(%esp)
movl   $0x8075aa4,0xc(%esp)
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
movl   $0xc,0x28(%esp)
mov    %eax,%ebp
call   8049310 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804e101 <__sprintf_chk@plt+0x4b81>
mov    0x28(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0x44(%esp)
call   8049200 <cap_get_flag@plt>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    804e078 <__sprintf_chk@plt+0x4af8>
mov    %edi,(%esp)
call   8049460 <cap_free@plt>
cmp    $0xffffffff,%ebp
jne    804dbaf <__sprintf_chk@plt+0x462f>
mov    0x8075aa4,%eax
movl   $0x8050750,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    804dbaf <__sprintf_chk@plt+0x462f>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
movl   $0x1,0x44(%esp)
call   8049070 <setsockopt@plt>
test   %eax,%eax
jne    804e048 <__sprintf_chk@plt+0x4ac8>
mov    0x80759f0,%eax
jmp    804dba4 <__sprintf_chk@plt+0x4624>
xchg   %ax,%ax
lea    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
mov    0x80759f0,%eax
jmp    804db97 <__sprintf_chk@plt+0x4617>
lea    0x0(%esi),%esi
lea    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049070 <setsockopt@plt>
mov    0x80759f0,%eax
jmp    804db8f <__sprintf_chk@plt+0x460f>
lea    0x0(%esi),%esi
mov    0x8075aa8,%ebx
movl   $0x0,0x80533bc
00
test   %ebx,%ebx
jne    804ddc4 <__sprintf_chk@plt+0x4844>
xor    %ebx,%ebx
jmp    804db69 <__sprintf_chk@plt+0x45e9>
nop
mov    0x80533e0,%eax
movl   $0x3d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050710,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
jmp    804dfac <__sprintf_chk@plt+0x4a2c>
lea    0x0(%esi),%esi
lea    0x28(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8049490 <cap_set_flag@plt>
mov    %edi,(%esp)
call   8049230 <cap_set_proc@plt>
test   %eax,%eax
js     804e134 <__sprintf_chk@plt+0x4bb4>
mov    %edi,(%esp)
call   8049460 <cap_free@plt>
jmp    804df38 <__sprintf_chk@plt+0x49b8>
lea    0x0(%esi),%esi
lea    0x24(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8049490 <cap_set_flag@plt>
mov    %edi,(%esp)
call   8049230 <cap_set_proc@plt>
test   %eax,%eax
js     804e123 <__sprintf_chk@plt+0x4ba3>
mov    %edi,(%esp)
call   8049460 <cap_free@plt>
jmp    804debf <__sprintf_chk@plt+0x493f>
movl   $0x8050280,(%esp)
call   80491b0 <perror@plt>
jmp    804df40 <__sprintf_chk@plt+0x49c0>
movl   $0x8050280,(%esp)
call   80491b0 <perror@plt>
jmp    804dec7 <__sprintf_chk@plt+0x4947>
movl   $0x80502a2,(%esp)
call   80491b0 <perror@plt>
jmp    804debf <__sprintf_chk@plt+0x493f>
movl   $0x80502a2,(%esp)
call   80491b0 <perror@plt>
jmp    804df38 <__sprintf_chk@plt+0x49b8>
mov    0x80533e0,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80506e8,(%esp)
mov    %eax,0xc(%esp)
call   80491d0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049280 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x64(%esp),%edx
mov    0x5c(%esp),%eax
mov    0x50(%esp),%ebp
add    0x54(%esp),%ebp
addl   $0x1,0x8075ae0
test   %edx,%edx
mov    0x68(%esp),%edi
mov    %eax,0x1c(%esp)
je     804e518 <__sprintf_chk@plt+0x4f98>
mov    0x80759ec,%eax
test   %eax,%eax
je     804e300 <__sprintf_chk@plt+0x4d80>
cmpl   $0xf,0x58(%esp)
jbe    804e300 <__sprintf_chk@plt+0x4d80>
mov    0x4(%ebp),%esi
mov    0x0(%ebp),%eax
mov    %esi,%ebx
mov    %eax,%esi
jmp    804e22f <__sprintf_chk@plt+0x4caf>
lea    0x0(%esi),%esi
sub    %esi,%edx
mov    %edx,(%edi)
imul   $0xf4240,%edx,%edx
add    %edx,%eax
jns    804e256 <__sprintf_chk@plt+0x4cd6>
mov    %eax,0xc(%esp)
mov    0x80533e0,%eax
movl   $0x8050770,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
mov    0x80759f0,%eax
test   $0x10,%ah
jne    804e600 <__sprintf_chk@plt+0x5080>
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8049130 <gettimeofday@plt>
orl    $0x1000,0x80759f0
00
mov    0x4(%edi),%eax
mov    (%edi),%edx
sub    %ebx,%eax
test   %eax,%eax
mov    %eax,0x4(%edi)
jns    804e1d8 <__sprintf_chk@plt+0x4c58>
sub    $0x1,%edx
add    $0xf4240,%eax
sub    %esi,%edx
mov    %edx,(%edi)
imul   $0xf4240,%edx,%edx
mov    %eax,0x4(%edi)
add    %edx,%eax
js     804e1e6 <__sprintf_chk@plt+0x4c66>
mov    0x80759f0,%ebx
mov    %eax,%esi
mov    0x64(%esp),%eax
test   %eax,%eax
jne    804e310 <__sprintf_chk@plt+0x4d90>
mov    %esi,%eax
cltd
mov    %esi,%eax
add    %esi,0x80759e0
adc    %edx,0x80759e4
imul   %esi
add    %eax,0x8075ae8
adc    %edx,0x8075aec
cmp    0x80533b0,%esi
jge    804e297 <__sprintf_chk@plt+0x4d17>
mov    %esi,0x80533b0
cmp    0x80759fc,%esi
jle    804e2a5 <__sprintf_chk@plt+0x4d25>
mov    %esi,0x80759fc
mov    0x8075ac4,%eax
test   %eax,%eax
jne    804e6f0 <__sprintf_chk@plt+0x5170>
lea    0x0(,%esi,8),%eax
test   $0x40,%bh
mov    %eax,0x8075ac4
jne    804e708 <__sprintf_chk@plt+0x5188>
nop
mov    0x1c(%esp),%ecx
mov    $0x1,%edx
movzwl %cx,%eax
shr    $0x5,%eax
mov    0x80739e0(,%eax,4),%edi
shl    %cl,%edx
test   %edi,%edx
je     804e4f0 <__sprintf_chk@plt+0x4f70>
addl   $0x1,0x80739c0
subl   $0x1,0x8075ae0
movl   $0x1,0x1c(%esp)
jmp    804e326 <__sprintf_chk@plt+0x4da6>
mov    0x64(%esp),%eax
xor    %esi,%esi
mov    0x80759f0,%ebx
test   %eax,%eax
je     804e2c8 <__sprintf_chk@plt+0x4d48>
addl   $0x1,0x80759f8
subl   $0x1,0x8075ae0
movl   $0x0,0x1c(%esp)
mov    0x80533b4,%eax
mov    %ebx,%edi
and    $0x10,%edi
mov    %eax,0x8054524
jne    804e508 <__sprintf_chk@plt+0x4f88>
test   $0x1,%bl
jne    804e4a8 <__sprintf_chk@plt+0x4f28>
and    $0x80000,%ebx
jne    804e698 <__sprintf_chk@plt+0x5118>
mov    0x6c(%esp),%eax
movl   $0x80503ad,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x70(%esp),%eax
test   %eax,%eax
je     804e38f <__sprintf_chk@plt+0x4e0f>
mov    0x58(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   *0x70(%esp)
mov    0x60(%esp),%ebx
test   %ebx,%ebx
js     804e3b3 <__sprintf_chk@plt+0x4e33>
mov    0x60(%esp),%eax
movl   $0x80503bf,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x80533a8,%eax
add    $0x7,%eax
cmp    %eax,0x58(%esp)
jle    804e6d8 <__sprintf_chk@plt+0x5158>
mov    0x80759ec,%ecx
test   %ecx,%ecx
je     804e440 <__sprintf_chk@plt+0x4ec0>
cmp    $0x1869f,%esi
jg     804e7a8 <__sprintf_chk@plt+0x5228>
cmp    $0x270f,%esi
jg     804e7d6 <__sprintf_chk@plt+0x5256>
cmp    $0x3e7,%esi
jle    804e768 <__sprintf_chk@plt+0x51e8>
mov    %esi,%eax
mov    $0x10624dd3,%ecx
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x80503e7,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,%ecx
mov    $0x66666667,%edx
sar    $0x6,%ecx
sub    %eax,%ecx
imul   $0x3e8,%ecx,%eax
mov    %ecx,0x8(%esp)
sub    %eax,%esi
mov    %esi,%eax
imul   %edx
sar    $0x1f,%esi
sar    $0x2,%edx
sub    %esi,%edx
mov    %edx,0xc(%esp)
call   80493a0 <__printf_chk@plt>
lea    0x0(%esi),%esi
mov    0x1c(%esp),%edx
test   %edx,%edx
jne    804e5c8 <__sprintf_chk@plt+0x5048>
mov    0x64(%esp),%eax
test   %eax,%eax
jne    804e5a8 <__sprintf_chk@plt+0x5028>
mov    0x80533a8,%ebx
cmp    $0x8,%ebx
jle    804e49b <__sprintf_chk@plt+0x4f1b>
movzbl 0x8(%ebp),%ecx
mov    $0x8,%eax
movzbl 0x8054570,%edx
cmp    %dl,%cl
je     804e494 <__sprintf_chk@plt+0x4f14>
jmp    804e609 <__sprintf_chk@plt+0x5089>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x0(%ebp,%eax,1),%ecx
movzbl 0x8054568(%eax),%edx
cmp    %dl,%cl
jne    804e610 <__sprintf_chk@plt+0x5090>
add    $0x1,%eax
cmp    %ebx,%eax
jne    804e480 <__sprintf_chk@plt+0x4f00>
add    $0x3c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x64(%esp),%eax
xor    %ebx,%ebx
test   %eax,%eax
jne    804e568 <__sprintf_chk@plt+0x4fe8>
mov    $0x3,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x80503a6(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
cmp    $0x2,%ebx
jbe    804e4c0 <__sprintf_chk@plt+0x4f40>
shr    $0x1f,%eax
test   %al,%al
jne    804e4c0 <__sprintf_chk@plt+0x4f40>
jmp    804e49b <__sprintf_chk@plt+0x4f1b>
xchg   %ax,%ax
or     %edi,%edx
mov    %edx,0x80739e0(,%eax,4)
movl   $0x0,0x1c(%esp)
jmp    804e326 <__sprintf_chk@plt+0x4da6>
xchg   %ax,%ax
add    $0x3c,%esp
mov    $0x1,%edi
pop    %ebx
mov    %edi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8075a9c,%eax
mov    %eax,%ecx
sub    0x1c(%esp),%cx
js     804e1ae <__sprintf_chk@plt+0x4c2e>
movzwl %cx,%ecx
cmp    0x80533ac,%ecx
jl     804e53e <__sprintf_chk@plt+0x4fbe>
add    $0x1,%ecx
mov    %ecx,0x80533ac
movzwl 0x80759f4,%ecx
movzwl 0x1c(%esp),%ebx
sub    %ecx,%ebx
test   %bx,%bx
jle    804e5e8 <__sprintf_chk@plt+0x5068>
movzwl 0x1c(%esp),%eax
mov    %ax,0x80759f4
jmp    804e1ae <__sprintf_chk@plt+0x4c2e>
lea    0x0(%esi),%esi
mov    $0x2,%esi
lea    0x0(%esi),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x80503aa(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80492e0 <write@plt>
add    %eax,%ebx
cmp    $0x1,%ebx
jbe    804e570 <__sprintf_chk@plt+0x4ff0>
shr    $0x1f,%eax
test   %al,%al
jne    804e570 <__sprintf_chk@plt+0x4ff0>
jmp    804e49b <__sprintf_chk@plt+0x4f1b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8050415,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e458 <__sprintf_chk@plt+0x4ed8>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805040d,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e44c <__sprintf_chk@plt+0x4ecc>
lea    0x0(%esi,%eiz,1),%esi
movzwl %ax,%eax
sub    %ecx,%eax
cmp    $0x7fff,%eax
jg     804e555 <__sprintf_chk@plt+0x4fd5>
jmp    804e1ae <__sprintf_chk@plt+0x4c2e>
lea    0x0(%esi),%esi
mov    %eax,%ebx
xor    %esi,%esi
jmp    804e25e <__sprintf_chk@plt+0x4cde>
mov    $0x8,%eax
xchg   %ax,%ax
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x80507b4,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
cmpl   $0x8,0x80533a8
jle    804e49b <__sprintf_chk@plt+0x4f1b>
mov    $0x8,%ebx
jmp    804e674 <__sprintf_chk@plt+0x50f4>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x0(%ebp,%ebx,1),%eax
add    $0x1,%ebx
movl   $0x805042c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
cmp    %ebx,0x80533a8
jle    804e49b <__sprintf_chk@plt+0x4f1b>
mov    %ebx,%eax
and    $0x1f,%eax
cmp    $0x8,%eax
jne    804e648 <__sprintf_chk@plt+0x50c8>
mov    %ebx,0x8(%esp)
movl   $0x8050426,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e648 <__sprintf_chk@plt+0x50c8>
lea    0x28(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <gettimeofday@plt>
mov    0x2c(%esp),%eax
movl   $0x8050389,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e350 <__sprintf_chk@plt+0x4dd0>
lea    0x0(%esi),%esi
movl   $0x805008c,(%esp)
mov    $0x1,%edi
call   8049240 <puts@plt>
jmp    804e49b <__sprintf_chk@plt+0x4f1b>
xchg   %ax,%ax
test   %eax,%eax
mov    %esi,%ecx
lea    0x7(%eax),%edx
cmovns %eax,%edx
sar    $0x3,%edx
sub    %edx,%ecx
add    %ecx,%eax
jmp    804e2b9 <__sprintf_chk@plt+0x4d39>
xchg   %ax,%ax
test   %eax,%eax
je     804e825 <__sprintf_chk@plt+0x52a5>
test   %eax,%eax
lea    0x7(%eax),%edx
cmovs  %edx,%eax
sar    $0x3,%eax
add    0x8075ad4,%eax
mov    $0x10624dd3,%edx
lea    0x1f4(%eax),%ecx
mov    %ecx,%eax
imul   %edx
mov    0x8075aa8,%eax
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
test   %eax,%eax
mov    %edx,0x80533bc
je     804e2c8 <__sprintf_chk@plt+0x4d48>
cmp    $0xc7,%edx
jg     804e2c8 <__sprintf_chk@plt+0x4d48>
movl   $0xc8,0x80533bc
00
jmp    804e2c8 <__sprintf_chk@plt+0x4d48>
xchg   %ax,%ax
mov    %esi,%eax
mov    $0x10624dd3,%edx
imul   %edx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x0,0x8(%esp)
movl   $0x80503fa,0x4(%esp)
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%edx
movl   $0x1,(%esp)
sub    %edx,%esi
mov    %esi,0xc(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e440 <__sprintf_chk@plt+0x4ec0>
mov    %esi,%eax
mov    $0x10624dd3,%edx
imul   %edx
sar    $0x1f,%esi
movl   $0x80503c7,0x4(%esp)
movl   $0x1,(%esp)
sar    $0x6,%edx
sub    %esi,%edx
mov    %edx,0x8(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e440 <__sprintf_chk@plt+0x4ec0>
mov    %esi,%eax
mov    $0x10624dd3,%ecx
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x80503d4,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,%ecx
mov    $0x51eb851f,%edx
sar    $0x6,%ecx
sub    %eax,%ecx
imul   $0x3e8,%ecx,%eax
mov    %ecx,0x8(%esp)
sub    %eax,%esi
mov    %esi,%eax
imul   %edx
sar    $0x1f,%esi
sar    $0x5,%edx
sub    %esi,%edx
mov    %edx,0xc(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e440 <__sprintf_chk@plt+0x4ec0>
imul   $0x3e8,0x80533bc,%eax
00
jmp    804e71b <__sprintf_chk@plt+0x519b>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x8075ab0,%ebp
sub    0x8075ab8,%ebp
mov    0x8075aac,%eax
js     804eccd <__sprintf_chk@plt+0x574d>
sub    0x8075ab4,%eax
movl   $0xa,(%esp)
mov    %eax,0x34(%esp)
mov    0x8053420,%eax
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x8053420,%eax
mov    %eax,(%esp)
call   80490b0 <fflush@plt>
mov    0x8075acc,%eax
movl   $0x8050430,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8075a9c,%eax
movl   $0x805044c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8075ae0,%eax
movl   $0x8050466,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x80739c0,%eax
test   %eax,%eax
jne    804ecb0 <__sprintf_chk@plt+0x5730>
mov    0x80759f8,%eax
test   %eax,%eax
jne    804ec93 <__sprintf_chk@plt+0x5713>
mov    0x8075ad0,%eax
test   %eax,%eax
jne    804ec76 <__sprintf_chk@plt+0x56f6>
mov    0x8075a9c,%ecx
test   %ecx,%ecx
jne    804ec07 <__sprintf_chk@plt+0x5687>
mov    0x8053420,%eax
mov    $0x80503a9,%esi
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x8075ae0,%eax
test   %eax,%eax
je     804e946 <__sprintf_chk@plt+0x53c6>
cmpl   $0x0,0x80759ec
jne    804ea5a <__sprintf_chk@plt+0x54da>
mov    0x80533ac,%eax
cmp    $0x1,%eax
jle    804e971 <__sprintf_chk@plt+0x53f1>
mov    %esi,0x8(%esp)
mov    $0x8050463,%esi
mov    %eax,0xc(%esp)
movl   $0x80504c4,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
mov    0x8075ae0,%eax
test   %eax,%eax
je     804ea18 <__sprintf_chk@plt+0x5498>
cmpl   $0x0,0x80533bc
jne    804ebf2 <__sprintf_chk@plt+0x5672>
mov    0x8075a9c,%edi
cmp    $0x1,%edi
jle    804ea18 <__sprintf_chk@plt+0x5498>
mov    $0xf4240,%eax
mov    %ebp,%ebx
imull  0x34(%esp)
sar    $0x1f,%ebx
add    %ebp,%eax
mov    $0x1f40,%ebp
adc    %ebx,%edx
sub    $0x1,%edi
mov    %edi,0x8(%esp)
sar    $0x1f,%edi
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
mov    0x8075ac4,%ebx
mov    $0x8,%ecx
mov    %esi,0x8(%esp)
movl   $0x80504ce,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,%edi
mov    %ebx,%eax
cltd
idiv   %ecx
mov    $0x3e8,%cx
cltd
idiv   %ecx
mov    %ebx,%eax
mov    %edx,0x18(%esp)
cltd
idiv   %ebp
mov    %eax,0x14(%esp)
mov    %edi,%eax
cltd
idiv   %ecx
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
call   80493a0 <__printf_chk@plt>
xchg   %ax,%ax
mov    0x8053420,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <_IO_putc@plt>
mov    0x8075ae0,%edx
mov    $0x1,%eax
test   %edx,%edx
je     804ea52 <__sprintf_chk@plt+0x54d2>
xor    %al,%al
cmpl   $0x0,0x8054528
je     804ea52 <__sprintf_chk@plt+0x54d2>
xor    %eax,%eax
cmp    0x8075aa0,%edx
setl   %al
mov    %eax,(%esp)
call   8049280 <exit@plt>
add    0x80739c0,%eax
mov    0x80759e4,%edx
mov    %eax,%esi
mov    %eax,%edi
mov    %eax,0x8(%esp)
mov    0x80759e0,%eax
sar    $0x1f,%edi
mov    %edi,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %edx,%ebx
mov    %eax,0x38(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x80759e0
mov    0x8075ae8,%eax
mov    %edx,0x80759e4
mov    0x8075aec,%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
mov    0x38(%esp),%edi
mov    %ebx,%ecx
imul   %edi,%ecx
mov    %eax,0x28(%esp)
mov    %eax,0x8075ae8
mov    %edi,%eax
mov    %edx,0x2c(%esp)
add    %ecx,%ecx
mov    %edx,0x8075aec
mul    %edi
mov    %eax,%ebx
mov    0x28(%esp),%eax
mov    %edx,%esi
mov    0x2c(%esp),%edx
add    %ecx,%esi
sub    %ebx,%eax
sbb    %esi,%edx
mov    %eax,0x28(%esp)
add    $0xffffffff,%eax
mov    %edx,0x2c(%esp)
adc    $0xffffffff,%edx
cmp    $0x7fffffff,%edx
ja     804eb51 <__sprintf_chk@plt+0x55d1>
jb     804eb0b <__sprintf_chk@plt+0x558b>
cmp    $0xfffffffd,%eax
ja     804eb51 <__sprintf_chk@plt+0x55d1>
mov    0x28(%esp),%esi
mov    0x2c(%esp),%edi
mov    %esi,%eax
mov    %edi,%edx
nop
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
add    %esi,%eax
adc    %edi,%edx
xor    %ebx,%ebx
mov    %edx,%ecx
shr    $0x1f,%ecx
add    %eax,%ecx
adc    %edx,%ebx
shrd   $0x1,%ebx,%ecx
sar    %ebx
mov    %ecx,%eax
cmp    %edi,%ebx
mov    %ebx,%edx
jle    804ece0 <__sprintf_chk@plt+0x5760>
mov    %eax,0x28(%esp)
mov    0x28(%esp),%eax
mov    $0x3e8,%ebx
mov    0x38(%esp),%edi
movl   $0x3e8,0x8(%esp)
mov    0x80533b0,%esi
movl   $0x0,0xc(%esp)
cltd
idiv   %ebx
mov    %edi,(%esp)
mov    %eax,0x20(%esp)
mov    0x80759fc,%eax
mov    %edx,0x24(%esp)
cltd
idiv   %ebx
mov    %eax,0x18(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x1c(%esp)
mov    %eax,0x4(%esp)
call   804f470 <__sprintf_chk@plt+0x5ef0>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edi,(%esp)
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
movl   $0x80507e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x10(%esp)
mov    %esi,%eax
mov    $0x8050463,%esi
cltd
idiv   %ebx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e946 <__sprintf_chk@plt+0x53c6>
testl  $0x4001,0x80759f0
00
je     804ea18 <__sprintf_chk@plt+0x5498>
jmp    804e98b <__sprintf_chk@plt+0x540b>
mov    %ecx,%edx
mov    $0x64,%eax
sub    0x8075ae0,%edx
mov    %ecx,0x8(%esp)
sar    $0x1f,%ecx
mov    %ecx,0xc(%esp)
imul   %edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
movl   $0x80504a4,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80493a0 <__printf_chk@plt>
mov    %ebp,%eax
mov    $0x3e8,%ecx
cltd
idiv   %ecx
movl   $0x80504b7,0x4(%esp)
movl   $0x1,(%esp)
imul   $0x3e8,0x34(%esp),%ebx
add    %eax,%ebx
mov    %ebx,0x8(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e916 <__sprintf_chk@plt+0x5396>
mov    %eax,0x8(%esp)
movl   $0x8050496,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e908 <__sprintf_chk@plt+0x5388>
mov    %eax,0x8(%esp)
movl   $0x8050485,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e8fb <__sprintf_chk@plt+0x537b>
mov    %eax,0x8(%esp)
movl   $0x8050473,0x4(%esp)
movl   $0x1,(%esp)
call   80493a0 <__printf_chk@plt>
jmp    804e8ee <__sprintf_chk@plt+0x536e>
sub    $0x1,%eax
add    $0xf4240,%ebp
jmp    804e85e <__sprintf_chk@plt+0x52de>
nop
lea    0x0(%esi,%eiz,1),%esi
jl     804ecea <__sprintf_chk@plt+0x576a>
cmp    %esi,%ecx
jae    804eb4d <__sprintf_chk@plt+0x55cd>
mov    %eax,%esi
mov    %edx,%edi
mov    0x28(%esp),%eax
mov    0x2c(%esp),%edx
jmp    804eb18 <__sprintf_chk@plt+0x5598>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x8075a9c,%ebx
movl   $0x0,0x8075af0
00
test   %ebx,%ebx
jne    804ed80 <__sprintf_chk@plt+0x5800>
mov    0x8075ae0,%edx
xor    %eax,%eax
mov    %eax,0x14(%esp)
mov    0x80533e0,%eax
mov    %edx,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x80504ec,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
mov    0x8075ae0,%eax
test   %eax,%eax
je     804ed5f <__sprintf_chk@plt+0x57df>
mov    0x80759ec,%edx
test   %edx,%edx
jne    804edb8 <__sprintf_chk@plt+0x5838>
mov    0x80533e0,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049410 <fputc@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8075ae0,%esi
mov    %ebx,%edx
mov    $0x64,%eax
mov    %ebx,%ecx
sar    $0x1f,%ecx
mov    %ebx,0x8(%esp)
sub    %esi,%edx
imul   %edx
mov    %ecx,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
mov    %esi,%edx
jmp    804ed23 <__sprintf_chk@plt+0x57a3>
lea    0x0(%esi,%eiz,1),%esi
add    0x80739c0,%eax
mov    0x80759e4,%edx
mov    %eax,0x8(%esp)
sar    $0x1f,%eax
mov    %eax,0xc(%esp)
mov    0x80759e0,%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804f2f0 <__sprintf_chk@plt+0x5d70>
mov    0x80759fc,%edi
mov    $0x10624dd3,%ecx
mov    0x8075ac4,%ebx
movl   $0x805082c,0x8(%esp)
movl   $0x1,0x4(%esp)
lea    0x7(%ebx),%ebp
mov    %eax,%esi
mov    %edi,%eax
imul   %ecx
mov    %edi,%eax
sar    $0x1f,%eax
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0x24(%esp)
sub    %eax,%edi
test   %ebx,%ebx
cmovns %ebx,%ebp
mov    %edi,0x28(%esp)
mov    %ebp,%edi
sar    $0x3,%edi
mov    %edi,%eax
imul   %ecx
mov    %ebx,%eax
sar    $0x1f,%ebp
sar    $0x1f,%ebx
sar    $0x6,%edx
sub    %ebp,%edx
imul   $0x3e8,%edx,%edx
sub    %edx,%edi
imul   %ecx
mov    %esi,%eax
mov    %edi,0x20(%esp)
sar    $0x9,%edx
sub    %ebx,%edx
mov    %edx,0x1c(%esp)
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0x14(%esp)
sub    %eax,%esi
mov    %ecx,%eax
mov    0x80533b0,%ecx
imull  0x80533b0
mov    0x80533b0,%eax
mov    %esi,0x18(%esp)
sar    $0x6,%edx
sar    $0x1f,%eax
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0xc(%esp)
sub    %eax,%ecx
mov    0x80533e0,%eax
mov    %ecx,0x10(%esp)
mov    %eax,(%esp)
call   80494d0 <__fprintf_chk@plt>
jmp    804ed5f <__sprintf_chk@plt+0x57df>
jmp    804eec0 <__sprintf_chk@plt+0x5940>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x10dc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x10cc(%esp)
xor    %eax,%eax
mov    0x10f4(%esp),%eax
lea    0x30(%esp),%esi
mov    %eax,0x18(%esp)
mov    0x8075abc,%eax
test   %eax,%eax
jne    804f1a4 <__sprintf_chk@plt+0x5c24>
mov    0x8075aa0,%eax
test   %eax,%eax
je     804ef12 <__sprintf_chk@plt+0x5992>
mov    0x8075ae0,%edx
add    0x8075ad0,%edx
cmp    %edx,%eax
jle    804f1a4 <__sprintf_chk@plt+0x5c24>
mov    0x8054528,%eax
test   %eax,%eax
je     804ef28 <__sprintf_chk@plt+0x59a8>
mov    0x8075ad0,%eax
test   %eax,%eax
jne    804f1a4 <__sprintf_chk@plt+0x5c24>
mov    0x8075af0,%eax
test   %eax,%eax
jne    804f2c6 <__sprintf_chk@plt+0x5d46>
mov    $0x431bde83,%edi
jmp    804ef48 <__sprintf_chk@plt+0x59c8>
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
jg     804f005 <__sprintf_chk@plt+0x5a85>
call   804d500 <__sprintf_chk@plt+0x3f80>
mov    0x8075aa0,%edx
test   %edx,%edx
mov    %eax,%ebx
je     804ef40 <__sprintf_chk@plt+0x59c0>
cmp    0x8075a9c,%edx
jg     804ef40 <__sprintf_chk@plt+0x59c0>
mov    0x8054528,%eax
test   %eax,%eax
jne    804ef40 <__sprintf_chk@plt+0x59c0>
mov    0x8054534,%eax
test   %eax,%eax
jne    804ef40 <__sprintf_chk@plt+0x59c0>
mov    0x8075ae0,%ebp
test   %ebp,%ebp
je     804f2b1 <__sprintf_chk@plt+0x5d31>
mov    0x80759fc,%eax
lea    (%eax,%eax,1),%ecx
imul   $0x3e8,0x80533bc,%eax
00
mov    %ecx,0x8054534
cmp    %eax,%ecx
jae    804efa4 <__sprintf_chk@plt+0x5a24>
mov    %eax,0x8054534
mov    %eax,%ecx
mov    $0x10624dd3,%edx
mov    %ecx,%eax
mul    %edx
shr    $0x6,%edx
test   %ebx,%ebx
js     804efb8 <__sprintf_chk@plt+0x5a38>
cmp    %edx,%ebx
jae    804efba <__sprintf_chk@plt+0x5a3a>
mov    %edx,%ebx
mov    %ecx,%eax
mul    %edi
lea    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
shr    $0x12,%edx
mov    %edx,0x28(%esp)
imul   $0xf4240,%edx,%edx
movl   $0x0,(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
sub    %edx,%ecx
mov    %ecx,0x2c(%esp)
call   8049090 <setitimer@plt>
test   %ebx,%ebx
jle    804ef48 <__sprintf_chk@plt+0x59c8>
mov    0x80759f0,%edx
and    $0x4800,%edx
jne    804f02e <__sprintf_chk@plt+0x5aae>
cmpl   $0xa,0x80533bc
mov    $0xa,%eax
cmovge 0x80533bc,%eax
cmp    %ebx,%eax
jle    804f1a9 <__sprintf_chk@plt+0x5c29>
mov    0x8075a9c,%eax
mov    %eax,%ecx
sub    0x80759f4,%cx
js     804f2d0 <__sprintf_chk@plt+0x5d50>
movzwl %cx,%eax
cmp    $0xa,%ebx
jg     804f057 <__sprintf_chk@plt+0x5ad7>
test   %eax,%eax
mov    $0xa,%ebx
je     804f2e1 <__sprintf_chk@plt+0x5d61>
test   %edx,%edx
jne    804f069 <__sprintf_chk@plt+0x5ae9>
mov    0x80533bc,%edi
test   %edi,%edi
je     804f1a9 <__sprintf_chk@plt+0x5c29>
mov    0x10f0(%esp),%eax
xor    %ecx,%ecx
mov    $0x9,%edx
mov    %ebx,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %dx,0x24(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %cx,0x26(%esp)
call   80491c0 <poll@plt>
test   %eax,%eax
jle    804eee8 <__sprintf_chk@plt+0x5968>
testb  $0x9,0x26(%esp)
je     804eee8 <__sprintf_chk@plt+0x5968>
mov    $0x40,%edx
mov    0x10f8(%esp),%eax
mov    %eax,0x1c(%esp)
xor    %eax,%eax
movl   $0x0,(%esi,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804f0c2 <__sprintf_chk@plt+0x5b42>
lea    0x4c(%esp),%eax
mov    %eax,0x30(%esp)
lea    0x18(%esp),%eax
mov    %eax,0x38(%esp)
lea    0xcc(%esp),%eax
mov    %eax,0x40(%esp)
mov    0x10f0(%esp),%eax
mov    %edx,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x80,0x34(%esp)
mov    %eax,(%esp)
movl   $0x1,0x3c(%esp)
movl   $0x1000,0x44(%esp)
call   8049450 <recvmsg@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804f248 <__sprintf_chk@plt+0x5cc8>
mov    0x44(%esp),%eax
cmp    $0xb,%eax
ja     804f1b0 <__sprintf_chk@plt+0x5c30>
testb  $0x10,0x80759f1
je     804f205 <__sprintf_chk@plt+0x5c85>
nop
lea    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
lea    0x20(%esp),%ebp
mov    %eax,(%esp)
call   8049130 <gettimeofday@plt>
lea    0x4c(%esp),%eax
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804c240 <__sprintf_chk@plt+0x2cc0>
test   %eax,%eax
jne    804f276 <__sprintf_chk@plt+0x5cf6>
mov    0x8075a9c,%eax
mov    %eax,%edx
sub    0x80759f4,%dx
js     804f28f <__sprintf_chk@plt+0x5d0f>
movzwl %dx,%eax
test   %eax,%eax
jne    804f0b0 <__sprintf_chk@plt+0x5b30>
mov    0x8075abc,%eax
test   %eax,%eax
je     804eef5 <__sprintf_chk@plt+0x5975>
call   804e840 <__sprintf_chk@plt+0x52c0>
xor    %edx,%edx
jmp    804f0b5 <__sprintf_chk@plt+0x5b35>
mov    0x40(%esp),%edx
test   %edx,%edx
je     804f132 <__sprintf_chk@plt+0x5bb2>
mov    (%edx),%edi
xor    %ebp,%ebp
add    %edx,%eax
mov    %edi,%ecx
cmpl   $0x1,0x4(%edx)
je     804f238 <__sprintf_chk@plt+0x5cb8>
cmp    $0xb,%ecx
jbe    804f1f0 <__sprintf_chk@plt+0x5c70>
add    $0x3,%ecx
and    $0xfffffffc,%ecx
add    %ecx,%edx
lea    0xc(%edx),%ecx
cmp    %ecx,%eax
jb     804f1f0 <__sprintf_chk@plt+0x5c70>
mov    (%edx),%ecx
lea    0x3(%ecx),%edi
and    $0xfffffffc,%edi
add    %edx,%edi
cmp    %edi,%eax
jae    804f1c4 <__sprintf_chk@plt+0x5c44>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x10,0x80759f1
jne    804f140 <__sprintf_chk@plt+0x5bc0>
test   %ebp,%ebp
jne    804f158 <__sprintf_chk@plt+0x5bd8>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x10f0(%esp),%eax
movl   $0x8906,0x4(%esp)
mov    %eax,(%esp)
call   80491a0 <ioctl@plt>
test   %eax,%eax
jne    804f140 <__sprintf_chk@plt+0x5bc0>
lea    0x20(%esp),%ebp
jmp    804f158 <__sprintf_chk@plt+0x5bd8>
lea    0x0(%esi),%esi
cmpl   $0x1d,0x8(%edx)
jne    804f1ca <__sprintf_chk@plt+0x5c4a>
cmp    $0x13,%ecx
jbe    804f1ca <__sprintf_chk@plt+0x5c4a>
lea    0xc(%edx),%ebp
jmp    804f1cf <__sprintf_chk@plt+0x5c4f>
call   8049350 <__errno_location@plt>
mov    (%eax),%edx
mov    %eax,%ebx
cmp    $0x4,%edx
je     804eee8 <__sprintf_chk@plt+0x5968>
cmp    $0xb,%edx
je     804eee8 <__sprintf_chk@plt+0x5968>
call   804b690 <__sprintf_chk@plt+0x2110>
test   %eax,%eax
jne    804f178 <__sprintf_chk@plt+0x5bf8>
mov    (%ebx),%eax
test   %eax,%eax
jne    804f2a0 <__sprintf_chk@plt+0x5d20>
call   804c680 <__sprintf_chk@plt+0x3100>
mov    0x8075a9c,%eax
mov    %eax,%edx
sub    0x80759f4,%dx
jns    804f18c <__sprintf_chk@plt+0x5c0c>
sub    0x8075ae0,%eax
sub    0x8075ad0,%eax
jmp    804f18f <__sprintf_chk@plt+0x5c0f>
movl   $0x8050508,(%esp)
call   80491b0 <perror@plt>
jmp    804eee8 <__sprintf_chk@plt+0x5968>
imul   $0x3e8,0x80533b8,%ecx
00
mov    %ecx,0x8054534
jmp    804efa4 <__sprintf_chk@plt+0x5a24>
call   804ed00 <__sprintf_chk@plt+0x5780>
jmp    804ef35 <__sprintf_chk@plt+0x59b5>
sub    0x8075ae0,%eax
sub    0x8075ad0,%eax
jmp    804f045 <__sprintf_chk@plt+0x5ac5>
call   80491f0 <sched_yield@plt>
mov    $0x40,%edx
jmp    804f0b5 <__sprintf_chk@plt+0x5b35>
push   %ebp
push   %edi
push   %esi
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%edi
mov    0x20(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
test   %edi,%edi
mov    %edi,%ecx
mov    %eax,%ebp
js     804f3b8 <__sprintf_chk@plt+0x5e38>
test   %ebp,%ebp
mov    0x4(%esp),%esi
mov    %eax,%edi
js     804f3d4 <__sprintf_chk@plt+0x5e54>
test   %edi,%edi
mov    %ecx,%ebp
mov    %edx,0x8(%esp)
mov    %edi,%eax
mov    %edx,%ecx
mov    %esi,0x4(%esp)
jne    804f350 <__sprintf_chk@plt+0x5dd0>
cmp    %ebp,%esi
jbe    804f378 <__sprintf_chk@plt+0x5df8>
mov    %ebp,%edx
mov    %ecx,%eax
xor    %ebp,%ebp
div    %esi
mov    %eax,%ecx
jmp    804f358 <__sprintf_chk@plt+0x5dd8>
lea    0x0(%esi),%esi
cmp    %ebp,%edi
jbe    804f398 <__sprintf_chk@plt+0x5e18>
xor    %ebp,%ebp
xor    %ecx,%ecx
mov    %ecx,%eax
mov    (%esp),%ecx
mov    %ebp,%edx
test   %ecx,%ecx
je     804f36a <__sprintf_chk@plt+0x5dea>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x10,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
jne    804f387 <__sprintf_chk@plt+0x5e07>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%esi
mov    %ebp,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    %ecx,%eax
div    %esi
mov    %eax,%ecx
jmp    804f358 <__sprintf_chk@plt+0x5dd8>
nop
bsr    %edi,%edi
xor    $0x1f,%edi
jne    804f3e8 <__sprintf_chk@plt+0x5e68>
mov    0x8(%esp),%edi
cmp    %edi,0x4(%esp)
jbe    804f3ae <__sprintf_chk@plt+0x5e2e>
cmp    %ebp,%eax
jae    804f354 <__sprintf_chk@plt+0x5dd4>
xor    %ebp,%ebp
mov    $0x1,%ecx
jmp    804f358 <__sprintf_chk@plt+0x5dd8>
nop
neg    %edx
mov    0x4(%esp),%esi
mov    %eax,%edi
adc    $0x0,%ecx
neg    %ecx
test   %ebp,%ebp
movl   $0xffffffff,(%esp)
jns    804f32b <__sprintf_chk@plt+0x5dab>
neg    %esi
adc    $0x0,%edi
notl   (%esp)
neg    %edi
jmp    804f32b <__sprintf_chk@plt+0x5dab>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ecx
mov    0x4(%esp),%esi
shl    %cl,%eax
mov    %eax,%edx
mov    $0x20,%eax
sub    %edi,%eax
mov    %eax,%ecx
shr    %cl,%esi
mov    %edi,%ecx
mov    %esi,0xc(%esp)
mov    0x4(%esp),%esi
or     %edx,0xc(%esp)
mov    %ebp,%edx
shl    %cl,%esi
mov    %eax,%ecx
mov    %esi,0x4(%esp)
mov    0x8(%esp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%ebp
mov    %eax,%ecx
shr    %cl,%esi
or     %ebp,%esi
mov    %esi,%eax
divl   0xc(%esp)
mov    %edx,%ebp
mov    %eax,%esi
mull   0x4(%esp)
cmp    %edx,%ebp
mov    %edx,0x4(%esp)
jb     804f458 <__sprintf_chk@plt+0x5ed8>
mov    0x8(%esp),%edx
mov    %edi,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    804f44d <__sprintf_chk@plt+0x5ecd>
cmp    0x4(%esp),%ebp
je     804f458 <__sprintf_chk@plt+0x5ed8>
mov    %esi,%ecx
xor    %ebp,%ebp
jmp    804f358 <__sprintf_chk@plt+0x5dd8>
xchg   %ax,%ax
lea    -0x1(%esi),%ecx
xor    %ebp,%ebp
jmp    804f358 <__sprintf_chk@plt+0x5dd8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x20,%esp
mov    0x34(%esp),%edx
mov    0x3c(%esp),%eax
mov    0x30(%esp),%ebp
mov    0x38(%esp),%edi
test   %edx,%edx
mov    %eax,%esi
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
movl   $0x0,0xc(%esp)
js     804f558 <__sprintf_chk@plt+0x5fd8>
test   %esi,%esi
mov    %edi,%edx
mov    %eax,%ecx
js     804f548 <__sprintf_chk@plt+0x5fc8>
mov    0x4(%esp),%edi
mov    %ecx,%eax
mov    %edx,%ecx
mov    (%esp),%esi
test   %eax,%eax
mov    %edx,0x10(%esp)
mov    %edi,%ebp
mov    %esi,0x14(%esp)
mov    %esi,%edi
mov    %ebp,%esi
jne    804f4e0 <__sprintf_chk@plt+0x5f60>
cmp    %esi,%edx
jbe    804f528 <__sprintf_chk@plt+0x5fa8>
mov    %esi,%edx
mov    0x14(%esp),%eax
div    %ecx
mov    %edx,%esi
mov    %esi,%eax
xor    %edx,%edx
jmp    804f4e9 <__sprintf_chk@plt+0x5f69>
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%eax
jbe    804f500 <__sprintf_chk@plt+0x5f80>
mov    (%esp),%eax
mov    %esi,%edx
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     804f4f8 <__sprintf_chk@plt+0x5f78>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x20,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
bsr    %eax,%edx
mov    %edx,(%esp)
xorl   $0x1f,(%esp)
jne    804f578 <__sprintf_chk@plt+0x5ff8>
cmp    %edi,%ecx
jbe    804f610 <__sprintf_chk@plt+0x6090>
cmp    %esi,%eax
jb     804f610 <__sprintf_chk@plt+0x6090>
mov    %edi,%eax
mov    %ebp,%edx
jmp    804f4e9 <__sprintf_chk@plt+0x5f69>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    804f537 <__sprintf_chk@plt+0x5fb7>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%ecx
mov    %esi,%eax
xor    %edx,%edx
div    %ecx
mov    %edi,%eax
div    %ecx
mov    %edx,%esi
jmp    804f4d6 <__sprintf_chk@plt+0x5f56>
lea    0x0(%esi),%esi
neg    %edx
adc    $0x0,%ecx
neg    %ecx
jmp    804f4ab <__sprintf_chk@plt+0x5f2b>
lea    0x0(%esi,%eiz,1),%esi
negl   (%esp)
adcl   $0x0,0x4(%esp)
negl   0x4(%esp)
movl   $0xffffffff,0xc(%esp)
jmp    804f49f <__sprintf_chk@plt+0x5f1f>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%edx
movl   $0x20,0x18(%esp)
mov    0x10(%esp),%ebp
sub    %edx,0x18(%esp)
mov    %edx,%ecx
shl    %cl,%eax
movzbl 0x18(%esp),%ecx
mov    %ebp,%edi
shr    %cl,%edi
mov    %edx,%ecx
shl    %cl,%ebp
movzbl 0x18(%esp),%ecx
or     %eax,%edi
mov    %edx,%eax
mov    %esi,%edx
mov    %ebp,0x1c(%esp)
shr    %cl,%edx
mov    %eax,%ecx
mov    0x14(%esp),%eax
shl    %cl,%esi
movzbl 0x18(%esp),%ecx
shr    %cl,%eax
movzbl (%esp),%ecx
or     %esi,%eax
mov    0x14(%esp),%esi
div    %edi
shl    %cl,%esi
mov    %esi,0x14(%esp)
mov    %edx,%esi
mul    %ebp
mov    %edx,0x10(%esp)
mov    0x10(%esp),%ebp
mov    %eax,%edx
cmp    %ebp,%esi
mov    %ebp,%ecx
jb     804f624 <__sprintf_chk@plt+0x60a4>
cmp    %eax,0x14(%esp)
jb     804f620 <__sprintf_chk@plt+0x60a0>
mov    (%esp),%ebp
mov    0x14(%esp),%edi
sub    %edx,%edi
sbb    %ecx,%esi
mov    %esi,%eax
mov    %ebp,%ecx
shr    %cl,%edi
movzbl 0x18(%esp),%ecx
shl    %cl,%eax
mov    %ebp,%ecx
or     %eax,%edi
shr    %cl,%esi
mov    %edi,%eax
mov    %esi,%edx
jmp    804f4e9 <__sprintf_chk@plt+0x5f69>
nop
sub    %ecx,%edi
sbb    %eax,%esi
mov    %esi,%ebp
jmp    804f51c <__sprintf_chk@plt+0x5f9c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%esi
jne    804f5e8 <__sprintf_chk@plt+0x6068>
mov    0x10(%esp),%ecx
mov    %eax,%edx
sub    0x1c(%esp),%edx
sbb    %edi,%ecx
jmp    804f5e8 <__sprintf_chk@plt+0x6068>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a7b0 <__sprintf_chk@plt+0x1230>
add    $0x39b5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0x10c(%ebx),%esi
call   8049038 <_init>
lea    -0x110(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804f699 <__sprintf_chk@plt+0x6119>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x110(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804f678 <__sprintf_chk@plt+0x60f8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804f6b0 <__sprintf_chk@plt+0x6130>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   804a7b0 <__sprintf_chk@plt+0x1230>
add    $0x3943,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
jo     804f73b <_IO_stdin_used+0x6f>
outsb  %ds:(%esi),(%dx)
and    %ch,%ss:(%di)
dec    %esi
and    %dh,0x75(%ebx)
bound  %ebp,0x70(%edi)
je     804f749 <_IO_stdin_used+0x7d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804f6ee <_IO_stdin_used+0x22>
or     %ecx,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804f724 <_IO_stdin_used+0x58>
or     (%ecx),%cl
or     %ebp,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804f6fc <_IO_stdin_used+0x30>
or     %edx,0x75(%ecx)
gs
jb     804f771 <_IO_stdin_used+0xa5>
cmp    (%edx),%cl
or     %ecx,(%ecx)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
sub    $0xa,%al
or     %ecx,(%ecx)
imul   $0x70692c36,0x76(%eax),%esi
jbe    804f743 <_IO_stdin_used+0x77>
sub    $0x2c6c6c61,%eax
imul   $0x6f632d36,0x76(%eax),%esi
insl   (%dx),%es:(%edi)
jo     804f77d <_IO_stdin_used+0xb1>
je     804f787 <_IO_stdin_used+0xbb>
bound  %ebp,0x2c(%ebp,%eiz,2)
imul   $0x696c2d36,0x76(%eax),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x61,0x63(%edi,%ebp,2),%ebp
insb   (%dx),%es:(%edi)
sub    $0x69,%al
jo     804f7aa <_IO_stdin_used+0xde>
ss
sub    $0x65746973,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
sub    $0x69,%al
jo     804f7b9 <_IO_stdin_used+0xed>
ss
sub    $0x626f6c67,%eax
popa
insb   (%dx),%es:(%edi)
sub    $0xa,%al
or     %ecx,(%ecx)
imul   $0x70692c34,0x76(%eax),%esi
jbe    804f78c <_IO_stdin_used+0xc0>
sub    $0x2c6c6c61,%eax
or     (%ecx),%cl
push   %ebx
jne    804f7c4 <_IO_stdin_used+0xf8>
push   $0x65
arpl   %si,0xa(%edx,%edi,1)
or     %ecx,(%ecx)
jae    804f7e1 <_IO_stdin_used+0x115>
bound  %ebp,0x65(%edx)
arpl   %si,0x69(%ebp,%ebp,1)
jo     804f7eb <_IO_stdin_used+0x11f>
ss
cmp    $0x72646461,%eax
sub    $0x73,%al
jne    804f7e1 <_IO_stdin_used+0x115>
push   $0x65
arpl   %si,0x69(%ebp,%ebp,1)
jo     804f7fd <_IO_stdin_used+0x131>
xor    $0x3d,%al
popa
fs
fs
jb     804f7ba <_IO_stdin_used+0xee>
jae    804f805 <_IO_stdin_used+0x139>
bound  %ebp,0x65(%edx)
arpl   %si,0x6e(%ebp,%ebp,1)
popa
insl   (%dx),%es:(%edi)
gs
cmp    $0x656d616e,%eax
sub    $0x73,%al
jne    804f805 <_IO_stdin_used+0x139>
push   $0x65
arpl   %si,0x66(%ebp,%ebp,1)
jno    804f80f <_IO_stdin_used+0x143>
outsb  %ds:(%esi),(%dx)
cmp    $0x656d616e,%eax
sub    $0xa,%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
jo     804f826 <_IO_stdin_used+0x15a>
outsb  %ds:(%esi),(%dx)
and    %bl,%ss:0x2d(%bp,%di)
popa
inc    %ecx
bound  %eax,0x64(%edx)
inc    %esp
pushw  $0x6e4c
dec    %edi
jno    804f842 <_IO_stdin_used+0x176>
push   %edx
push   %ebp
jbe    804f82a <_IO_stdin_used+0x15e>
pop    %ebp
and    %bl,0x2d(%ebx)
arpl   %sp,(%eax)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     804f83d <_IO_stdin_used+0x171>
and    %bl,0x2d(%ebx)
imul   $0x65746e69,(%eax),%esp
jb     804f861 <_IO_stdin_used+0x195>
popa
insb   (%dx),%es:(%edi)
pop    %ebp
and    %bl,0x2d(%ebx)
dec    %ecx
and    %ch,0x6e(%ecx)
je     804f85c <_IO_stdin_used+0x190>
jb     804f85f <_IO_stdin_used+0x193>
popa
arpl   %sp,0x5d(%ebp)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
sub    $0x7270206c,%eax
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs
pop    %ebp
and    %bl,0x2d(%ebx)
insl   (%dx),%es:(%edi)
and    %ch,0x61(%ebp)
jb     804f88b <_IO_stdin_used+0x1bf>
pop    %ebp
and    %bl,0x2d(%ebx)
dec    %ebp
and    %dh,0x6d(%eax)
je     804f89f <_IO_stdin_used+0x1d3>
imul   $0x74706f5f,%fs:0x63(%ebx),%esi
imul   $0x20200a5d,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x2d(%ebx)
dec    %esi
and    %ch,0x6f(%esi)
fs imul $0x706f5f6f,%fs:%gs:0x66(%esi),%ebp
70
je     804f8be <_IO_stdin_used+0x1f2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %ebp
and    %bl,0x2d(%ebx)
jo     804f87d <_IO_stdin_used+0x1b1>
jo     804f8c0 <_IO_stdin_used+0x1f4>
je     804f8d5 <_IO_stdin_used+0x209>
gs
jb     804f8d2 <_IO_stdin_used+0x206>
pop    %ebp
and    %bl,0x2d(%ebx)
push   %ecx
and    %dh,0x6c(%ebx,%eiz,2)
popa
jae    804f8e3 <_IO_stdin_used+0x217>
pop    %ebp
and    %bl,0x2d(%ebx)
jae    804f896 <_IO_stdin_used+0x1ca>
jo     804f8d9 <_IO_stdin_used+0x20d>
arpl   %bp,0x65(%ebx)
je     804f8f0 <_IO_stdin_used+0x224>
imul   $0x20200a5d,0x65(%edx),%edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x2d(%ebx)
push   %ebx
and    %dh,0x6e(%ebx)
bound  %esi,%fs:0x66(%ebp)
pop    %ebp
and    %bl,0x2d(%ebx)
je     804f8bf <_IO_stdin_used+0x1f3>
je     804f915 <_IO_stdin_used+0x249>
insb   (%dx),%es:(%edi)
pop    %ebp
and    %bl,0x2d(%ebx)
push   %esp
and    %dh,0x6d(%ecx,%ebp,2)
gs
jae    804f922 <_IO_stdin_used+0x256>
popa
insl   (%dx),%es:(%edi)
jo     804f911 <_IO_stdin_used+0x245>
outsl  %ds:(%esi),(%dx)
jo     804f929 <_IO_stdin_used+0x25d>
imul   $0x2d5b205d,0x6e(%edi),%ebp
ja     804f8de <_IO_stdin_used+0x212>
fs
gs
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x20200a5d,0x65(%esi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x2d(%ebx)
push   %edi
and    %dh,0x6d(%ecx,%ebp,2)
outsl  %gs:(%esi),(%dx)
jne    804f954 <_IO_stdin_used+0x288>
pop    %ebp
and    %ah,0x73(%ebp,%eiz,2)
je     804f950 <_IO_stdin_used+0x284>
outsb  %ds:(%esi),(%dx)
popa
je     804f954 <_IO_stdin_used+0x288>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%al
add    %al,0x65(%edx)
jns    804f963 <_IO_stdin_used+0x297>
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     804f961 <_IO_stdin_used+0x295>
and    %ch,0x66(%edi)
and    %dh,0x6f(%ebx)
jne    804f976 <_IO_stdin_used+0x2aa>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     804f971 <_IO_stdin_used+0x2a5>
jae    804f981 <_IO_stdin_used+0x2b5>
add    %al,(%eax)
jo     804f97b <_IO_stdin_used+0x2af>
outsb  %ds:(%esi),(%dx)
cmp    %ss:(%bx,%si),%ah
dec    %ecx
outsb  %ds:(%esi),(%dx)
popa
jo     804f98c <_IO_stdin_used+0x2c0>
jb     804f98d <_IO_stdin_used+0x2c1>
jo     804f992 <_IO_stdin_used+0x2c6>
imul   $0x75732065,0x74(%ecx),%esp
bound  %ebp,0x65(%edx)
arpl   %si,0x6e(%eax,%eiz,1)
popa
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%ah
and    $0xa73,%eax
jo     804f9a3 <_IO_stdin_used+0x2d7>
outsb  %ds:(%esi),(%dx)
cmp    %ss:(%bx,%si),%ah
outsb  %fs:(%esi),(%dx)
pop    %edi
arpl   %bp,0x6d(%edi)
jo     804f96f <_IO_stdin_used+0x2a3>
sub    %esp,(%eax)
jb     804f9b0 <_IO_stdin_used+0x2e4>
je     804f9c2 <_IO_stdin_used+0x2f6>
jb     804f9bd <_IO_stdin_used+0x2f1>
gs and %dh,%fs:%gs:0x6f(%edi,%ebp,2)
and    %ch,0x6e(%edi,%ebp,2)
and    %dh,0x65(%bp,%si)
jae    804f9d4 <_IO_stdin_used+0x308>
insb   (%dx),%es:(%edi)
je     804f990 <_IO_stdin_used+0x2c4>
or     (%eax),%al
jo     804f9cf <_IO_stdin_used+0x303>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x6f(%ebx)
jne    804f9e8 <_IO_stdin_used+0x31c>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     804f9e3 <_IO_stdin_used+0x317>
jae    804f9f3 <_IO_stdin_used+0x327>
and    %ah,0xa73
add    %al,(%eax)
jo     804f9f3 <_IO_stdin_used+0x327>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
ja     804fa02 <_IO_stdin_used+0x336>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%bp)
insb   (%dx),%es:(%edi)
jne    804f9fe <_IO_stdin_used+0x332>
and    %ah,0x6f(%esi)
jb     804f9be <_IO_stdin_used+0x2f2>
sub    $0x64203a4d,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x20,%al
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f9d7 <_IO_stdin_used+0x30b>
and    %dh,0x61(%edi)
outsb  %ds:(%esi),(%dx)
je     804f9d1 <_IO_stdin_used+0x305>
popa
jb     804fa19 <_IO_stdin_used+0x34d>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0x2e73656e,0x6f(%eax,%eiz,1),%esp
or     (%eax),%al
add    %al,(%eax)
push   $0x3a51563f
dec    %ecx
cmp    0x3a(%ebp),%cl
popa
push   %ebp
arpl   %di,(%edx)
imul   $0x3a77,%fs:(%edx),%di
insb   (%dx),%es:(%edi)
cmp    0x3a(%ebx),%dl
outsb  %ds:(%esi),(%dx)
jo     804fa18 <_IO_stdin_used+0x34c>
jno    804fa52 <_IO_stdin_used+0x386>
jae    804fa1c <_IO_stdin_used+0x350>
jbe    804fa30 <_IO_stdin_used+0x364>
je     804fa20 <_IO_stdin_used+0x354>
inc    %ecx
push   %edi
cmp    0x6d(%edx),%al
cmp    0x46(%edi,%ecx,2),%al
cmp    0x3a(%esi),%cl
add    %al,(%eax)
jo     804fa5f <_IO_stdin_used+0x393>
outsb  %ds:(%esi),(%dx)
cmp    %ss:(%bx,%si),%ah
push   %ebx
outsl  %ds:(%esi),(%dx)
jne    804fa71 <_IO_stdin_used+0x3a5>
arpl   %sp,0x20(%ebp)
jb     804fa73 <_IO_stdin_used+0x3a7>
jne    804fa7a <_IO_stdin_used+0x3ae>
imul   $0x20736920,0x67(%esi),%ebp
fs
gs
jo     804fa83 <_IO_stdin_used+0x3b7>
arpl   %sp,%gs:0x74(%ecx)
gs and %ah,%fs:%gs:0x79(%edx)
and    %dl,0x46(%edx)
inc    %ebx
xor    $0x2e353930,%eax
or     (%eax),%al
add    %al,(%eax)
add    %dh,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     804fa92 <_IO_stdin_used+0x3c6>
and    %ah,0x73(%ecx,%ebp,2)
arpl   %si,0x65(%edx)
jo     804fa97 <_IO_stdin_used+0x3cb>
outsb  %ds:(%esi),(%dx)
arpl   %di,0x20(%ecx)
popa
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x68(%si)
and    %ch,%gs:0x6f(%esi)
fs
gs
jae    804fa54 <_IO_stdin_used+0x388>
add    %al,(%eax)
jo     804fab7 <_IO_stdin_used+0x3eb>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insl   (%dx),%es:(%edi)
jne    804fac1 <_IO_stdin_used+0x3f5>
je     804fac0 <_IO_stdin_used+0x3f4>
arpl   %sp,0x73(%ecx)
je     804fa7c <_IO_stdin_used+0x3b0>
jo     804fac7 <_IO_stdin_used+0x3fb>
outsb  %ds:(%esi),(%dx)
and    %dh,0x69(%bx)
je     804facd <_IO_stdin_used+0x401>
and    %dh,0x6f(%edi,%ebp,2)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     804fae3 <_IO_stdin_used+0x417>
and    %ch,0x6e(%ecx)
je     804fad9 <_IO_stdin_used+0x40d>
jb     804faec <_IO_stdin_used+0x420>
popa
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insl   (%dx),%es:(%edi)
jne    804faf1 <_IO_stdin_used+0x425>
je     804faf0 <_IO_stdin_used+0x424>
arpl   %sp,0x73(%ecx)
je     804faac <_IO_stdin_used+0x3e0>
jo     804faf7 <_IO_stdin_used+0x42b>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%si)
gs
jae    804fab6 <_IO_stdin_used+0x3ea>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804faba <_IO_stdin_used+0x3ee>
data16
jb     804fafe <_IO_stdin_used+0x432>
insl   (%dx),%es:(%di)
outsb  %gs:(%esi),(%dx)
je     804fad1 <_IO_stdin_used+0x405>
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x41(%edi)
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jns    804fb22 <_IO_stdin_used+0x456>
jne    804fb27 <_IO_stdin_used+0x45b>
and    %ch,0x65(%ebx)
jb     804fb28 <_IO_stdin_used+0x45c>
gs
insb   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %dh,0x65(%esi)
gs
gs
jb     804fb3f <_IO_stdin_used+0x473>
and    %ch,0x6c(%edi)
fs and %cl,%cs:%fs:0x6f(%esi)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
bound  %ebp,0x6d(%ebp,%eiz,2)
jae    804fb06 <_IO_stdin_used+0x43a>
or     (%eax),%al
add    %al,(%eax)
jae    804fb43 <_IO_stdin_used+0x477>
je     804fb53 <_IO_stdin_used+0x487>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804fb5a <_IO_stdin_used+0x48e>
sub    %dl,0x41(%edx)
push   %edi
pop    %edi
inc    %ebx
dec    %eax
inc    %ebp
inc    %ebx
dec    %ebx
push   %ebx
push   %ebp
dec    %ebp
sub    %esp,(%eax)
popaw
imul   $0x74202d20,0x64(%ebp,%eiz,2),%ebp
jb     804fb7a <_IO_stdin_used+0x4ae>
and    %dh,0x20(%edi,%ebp,2)
arpl   %bp,0x6e(%edi)
je     804fb73 <_IO_stdin_used+0x4a7>
outsb  %ds:(%esi),(%dx)
jne    804fb72 <_IO_stdin_used+0x4a6>
add    %al,%cs:(%eax)
arpl   %sp,0x6e(%ecx)
daa
je     804fb36 <_IO_stdin_used+0x46a>
imul   $0x20656c62,%fs:0x61(%ebx),%esi
insl   (%dx),%es:(%edi)
jne    804fb8d <_IO_stdin_used+0x4c1>
je     804fb8c <_IO_stdin_used+0x4c0>
arpl   %sp,0x73(%ecx)
je     804fb48 <_IO_stdin_used+0x47c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804fb8f <_IO_stdin_used+0x4c3>
popa
arpl   %bp,0x0(%ebx)
add    %al,(%eax)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    %ss:(%bx,%si),%ah
push   %edi
popa
jb     804fbad <_IO_stdin_used+0x4e1>
imul   $0x6f73203a,0x67(%esi),%ebp
jne    804fbba <_IO_stdin_used+0x4ee>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     804fbb5 <_IO_stdin_used+0x4e9>
jae    804fbc5 <_IO_stdin_used+0x4f9>
and    %ch,0x69(%ebp)
addr16 push $0x65622074
and    %dh,0x65(%ebx)
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ch,0x6e(%edi)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x68746f20,0x65(%ebx),%esp
gs
jb     804fb95 <_IO_stdin_used+0x4c9>
je     804fbdf <_IO_stdin_used+0x513>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0xa2e73
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x72(%ebp)
jb     804fbff <_IO_stdin_used+0x533>
jb     804fbcc <_IO_stdin_used+0x500>
and    %cl,0x65(%ebp)
jae    804fc0a <_IO_stdin_used+0x53e>
popa
and    %dh,%gs:0x6f(%si)
outsl  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi,%ebp,2)
addr16 sub $0x20,%al
insl   (%dx),%es:(%edi)
je     804fc1d <_IO_stdin_used+0x551>
cmp    $0xa7525,%eax
add    %al,(%eax)
add    %ah,(%eax)
jne    804fc21 <_IO_stdin_used+0x555>
gs
js     804fc26 <_IO_stdin_used+0x55a>
arpl   %sp,%gs:0x64(%ebp)
and    %ah,0x72(%ebp)
jb     804fc2e <_IO_stdin_used+0x562>
jb     804fbe1 <_IO_stdin_used+0x515>
imul   $0x74656e69,0x20(%esi),%ebp
pop    %edi
outsb  %ds:(%esi),(%dx)
je     804fc3b <_IO_stdin_used+0x56f>
jo     804fbf6 <_IO_stdin_used+0x52a>
and    $0x2973,%eax
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     804fc3d <_IO_stdin_used+0x571>
arpl   %bp,0x65(%ebx)
je     804fc01 <_IO_stdin_used+0x535>
je     804fc52 <_IO_stdin_used+0x586>
outsl  %ds:(%esi),(%dx)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     804fc5e <_IO_stdin_used+0x592>
and    %ch,(%eax)
and    $0x79622064,%eax
je     804fc58 <_IO_stdin_used+0x58c>
jae    804fc1e <_IO_stdin_used+0x552>
or     (%eax),%al
add    %dl,0x41(%edi)
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6c6c6174,0x73(%esi),%ebp
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     804fc3a <_IO_stdin_used+0x56e>
imul   $0xa72,0x65(%esp,%esi,2),%bp
add    %al,0x73(%ebp,%eiz,2)
je     804fc90 <_IO_stdin_used+0x5c4>
outsb  %ds:(%esi),(%dx)
popa
je     804fc94 <_IO_stdin_used+0x5c8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp)
jb     804fc97 <_IO_stdin_used+0x5cb>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x3a(%ebp,%eiz,2)
and    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
and    %dh,0x6f(%edx)
jne    804fcb7 <_IO_stdin_used+0x5eb>
add    %al,%gs:0x64(%ecx)
insl   (%dx),%es:(%edi)
imul   $0x61727473,0x69(%esi),%ebp
je     804fcba <_IO_stdin_used+0x5ee>
jbe    804fcb8 <_IO_stdin_used+0x5ec>
insb   (%dx),%es:(%edi)
jns    804fc76 <_IO_stdin_used+0x5aa>
jo     804fcca <_IO_stdin_used+0x5fe>
outsl  %ds:(%esi),(%dx)
push   $0x74696269
gs add %al,%fs:%gs:0x64(%ecx)
fs
jb     804fccb <_IO_stdin_used+0x5ff>
jae    804fcdb <_IO_stdin_used+0x60f>
and    %dh,0x6e(%ebp)
jb     804fcd2 <_IO_stdin_used+0x606>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
push   %eax
outsl  %ds:(%esi),(%dx)
jb     804fced <_IO_stdin_used+0x621>
and    %dh,0x6e(%ebp)
jb     804fce3 <_IO_stdin_used+0x617>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
fs and %ah,%fs:%gs:0x61500064
arpl   %bp,0x65(%ebx)
je     804fcbd <_IO_stdin_used+0x5f1>
je     804fd0e <_IO_stdin_used+0x642>
outsl  %ds:(%esi),(%dx)
and    %ah,0x69(%edx)
cmp    (%bx,%si),%ah
insl   (%dx),%es:(%edi)
je     804fd1e <_IO_stdin_used+0x652>
cmp    $0x2c007525,%eax
and    %ah,0x6f(%ebx)
fs
gs
cmp    $0x54006425,%eax
imul   $0x63786520,0x65(%ebp),%ebp
gs gs fs gs cmp %fs:%gs:(%eax),%ah
add    %cl,0x6f(%eax)
jo     804fceb <_IO_stdin_used+0x61f>
insb   (%dx),%es:(%edi)
imul   $0x65440074,0x69(%ebp),%ebp
data16
jb     804fd37 <_IO_stdin_used+0x66b>
insl   (%dx),%es:(%di)
outsb  %gs:(%esi),(%dx)
je     804fd3d <_IO_stdin_used+0x671>
je     804fd47 <_IO_stdin_used+0x67b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%esi)
imul   $0x61500065,0x72(%ebp,%esi,2),%ebp
jb     804fd4e <_IO_stdin_used+0x682>
insl   (%dx),%es:(%edi)
gs
je     804fd56 <_IO_stdin_used+0x68a>
jb     804fd13 <_IO_stdin_used+0x647>
jo     804fd67 <_IO_stdin_used+0x69b>
outsl  %ds:(%esi),(%dx)
bound  %ebp,0x6d(%ebp,%eiz,2)
cmp    (%eax),%ah
add    %dl,0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%bx,%si)
popa
fs
gs
jb     804fd2a <_IO_stdin_used+0x65e>
imul   $0x2064,0x6c(%ebp),%sp
add    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%eax)
popa
fs
gs
jb     804fd40 <_IO_stdin_used+0x674>
add    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     804fd96 <_IO_stdin_used+0x6ca>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %al,(%eax)
arpl   %bp,0x64(%edi)
and    %ah,%gs:0x61002064
je     804fd5d <_IO_stdin_used+0x691>
and    $0x63450075,%eax
push   $0x6572206f
jno    804fdbe <_IO_stdin_used+0x6f2>
gs
jae    804fdc0 <_IO_stdin_used+0x6f4>
add    %al,0x63(%ebp)
push   $0x6572206f
jo     804fdc2 <_IO_stdin_used+0x6f6>
jns    804fd58 <_IO_stdin_used+0x68c>
dec    %ebp
dec    %esp
inc    %esp
and    %dl,0x75(%ecx)
gs
jb     804fdda <_IO_stdin_used+0x70e>
add    %cl,0x4c(%ebp)
inc    %esp
and    %dl,0x65(%edx)
jo     804fdd9 <_IO_stdin_used+0x70d>
jb     804fde0 <_IO_stdin_used+0x714>
add    %cl,0x4c(%ebp)
inc    %esp
and    %dl,0x65(%edx)
fs
jne    804fdd9 <_IO_stdin_used+0x70d>
je     804fde1 <_IO_stdin_used+0x715>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x63(%ecx)
insl   (%dx),%es:(%edi)
jo     804fda8 <_IO_stdin_used+0x6dc>
je     804fe03 <_IO_stdin_used+0x737>
jo     804fdf1 <_IO_stdin_used+0x725>
cmp    (%eax),%ah
and    $0x69200075,%eax
arpl   %bp,0x70(%ebp)
pop    %edi
jae    804fdfe <_IO_stdin_used+0x732>
jno    804fdd8 <_IO_stdin_used+0x70c>
and    $0x74510075,%eax
jns    804fe12 <_IO_stdin_used+0x746>
and    %ah,%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
data16
insb   (%dx),%es:(%edi)
imul   $0x53002500,0x74(%ebx),%esp
jne    804fe14 <_IO_stdin_used+0x748>
push   $0x65
arpl   %si,0x74(%eax,%eiz,1)
jns    804fe2a <_IO_stdin_used+0x75e>
and    %ah,%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
data16
insb   (%dx),%es:(%edi)
imul   $0x6e697000,0x74(%ebx),%esp
cmp    %ss:(%bx,%si),%ah
je     804fe3d <_IO_stdin_used+0x771>
outsl  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi,%ebp,2)
and    %dh,0x63(%bp,%di)
outsl  %ds:(%esi),(%dx)
jo     804fe3f <_IO_stdin_used+0x773>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs or  %cs:%gs:(%eax),%al
jo     804fe4d <_IO_stdin_used+0x781>
outsb  %ds:(%esi),(%dx)
cmp    %ss:(%bx,%si),%ah
outsl  %ds:(%esi),(%dx)
jne    804fe60 <_IO_stdin_used+0x794>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804fe6f <_IO_stdin_used+0x7a3>
or     %cs:(%eax),%al
data16
data16
xor    %dh,(%edx)
cmp    (%edx),%bh
xor    (%edx),%bh
and    $0x25783230,%eax
xor    %dh,(%edx)
js     804fe44 <_IO_stdin_used+0x778>
and    $0x25783230,%eax
xor    %dh,(%edx)
js     804fe38 <_IO_stdin_used+0x76c>
jae    804fe3a <_IO_stdin_used+0x76e>
jae    804fe17 <_IO_stdin_used+0x74b>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%eax)
jae    804fe97 <_IO_stdin_used+0x7cb>
cmp    (%eax),%ah
and    $0x70000a73,%eax
imul   $0x6e75203a,0x67(%esi),%ebp
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%ecx)
popa
arpl   %sp,0x20(%ebp)
and    $0x70000a73,%eax
imul   $0x6e49203a,0x67(%esi),%ebp
jbe    804feac <_IO_stdin_used+0x7e0>
insb   (%dx),%es:(%edi)
imul   $0x69776f6c,0x66(%eax,%eiz,1),%esp
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
and    %ah,0x70000a73
imul   $0x6e49203a,0x67(%esi),%ebp
jbe    804fec7 <_IO_stdin_used+0x7fb>
insb   (%dx),%es:(%edi)
imul   $0x73616c63,0x74(%eax,%eiz,1),%esp
jae    804fe91 <_IO_stdin_used+0x7c5>
and    $0x70000a73,%eax
imul   $0x756f203a,0x67(%esi),%ebp
je     804fe9f <_IO_stdin_used+0x7d3>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804ff01 <_IO_stdin_used+0x835>
or     (%eax),%al
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804fe8f <_IO_stdin_used+0x7c3>
ja     804fef2 <_IO_stdin_used+0x826>
outsb  %ds:(%esi),(%dx)
je     804fe94 <_IO_stdin_used+0x7c8>
jo     804feff <_IO_stdin_used+0x833>
outsb  %ds:(%esi),(%dx)
and    %dh,%ss:0x74(%di)
imul   $0x69202c79,0x74(%ecx,%ebp,2),%ebp
jo     804ff1b <_IO_stdin_used+0x84f>
je     804ff11 <_IO_stdin_used+0x845>
insb   (%dx),%es:(%edi)
jae    804fed8 <_IO_stdin_used+0x80c>
and    $0x75000a73,%eax
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%eax)
jae    804ff2f <_IO_stdin_used+0x863>
or     (%eax),%al
jae    804ff24 <_IO_stdin_used+0x858>
je     804ff34 <_IO_stdin_used+0x868>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804ff3b <_IO_stdin_used+0x86f>
sub    %dl,0x4f(%ebx)
pop    %edi
inc    %edx
dec    %ecx
dec    %esi
inc    %esp
push   %esp
dec    %edi
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
sub    %eax,(%eax)
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x67(%eax,%eax,1)
gs
je     804ff58 <_IO_stdin_used+0x88c>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x65(%edi)
je     804ff5a <_IO_stdin_used+0x88e>
popaw
fs
fs
jb     804ff6a <_IO_stdin_used+0x89e>
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x706f2070,0x6d(%ebx),%esp
outsb  %gs:(%esi),(%dx)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     804ff0f <_IO_stdin_used+0x843>
jo     804ff7a <_IO_stdin_used+0x8ae>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
dec    %ecx
push   %eax
push   %esi
ss
pop    %edi
dec    %ebp
push   %esp
push   %ebp
pop    %edi
inc    %esp
dec    %ecx
push   %ebx
inc    %ebx
dec    %edi
push   %esi
inc    %ebp
push   %edx
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %ebp,0x6e(%ecx)
and    %ch,%fs:0x63(%ecx)
insl   (%dx),%es:(%edi)
jo     804ff57 <_IO_stdin_used+0x88b>
jae    804ffa8 <_IO_stdin_used+0x8dc>
arpl   %bp,0x65(%ebx)
je     804ff3e <_IO_stdin_used+0x872>
jo     804ffa9 <_IO_stdin_used+0x8dd>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
outsl  %ds:(%esi),(%dx)
jne    804ffbb <_IO_stdin_used+0x8ef>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804ffca <_IO_stdin_used+0x8fe>
or     %cs:(%eax),%al
jae    804ffbb <_IO_stdin_used+0x8ef>
je     804ffcb <_IO_stdin_used+0x8ff>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804ffd2 <_IO_stdin_used+0x906>
sub    %cl,0x43(%ecx)
dec    %ebp
push   %eax
ss
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
push   %esp
inc    %ebp
push   %edx
sub    %eax,(%eax)
arpl   %sp,0x6e(%ecx)
daa
je     804ff93 <_IO_stdin_used+0x8c7>
jae    804ffda <_IO_stdin_used+0x90e>
je     804ff97 <_IO_stdin_used+0x8cb>
insl   (%dx),%es:(%edi)
jne    804ffe6 <_IO_stdin_used+0x91a>
je     804ffe5 <_IO_stdin_used+0x919>
arpl   %sp,0x73(%ecx)
je     804ffa1 <_IO_stdin_used+0x8d5>
push   $0x6c20706f
imul   $0x61630074,0x69(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
daa
je     804ffb1 <_IO_stdin_used+0x8e5>
jae    804fff8 <_IO_stdin_used+0x92c>
je     804ffb5 <_IO_stdin_used+0x8e9>
jne    8050005 <_IO_stdin_used+0x939>
imul   $0x68207473,0x61(%ebx),%esp
outsl  %ds:(%esi),(%dx)
jo     804ffc1 <_IO_stdin_used+0x8f5>
insb   (%dx),%es:(%edi)
imul   $0x61630074,0x69(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
daa
je     804ffcd <_IO_stdin_used+0x901>
jb     8050014 <_IO_stdin_used+0x948>
arpl   %sp,0x69(%ebp)
jbe    8050019 <_IO_stdin_used+0x94d>
and    %ch,0x6f(%eax)
jo     804ffd9 <_IO_stdin_used+0x90d>
insb   (%dx),%es:(%edi)
imul   $0x65730074,0x69(%ebp),%ebp
je     8050036 <_IO_stdin_used+0x96a>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     805003d <_IO_stdin_used+0x971>
sub    %cl,0x50(%ecx)
push   %esi
ss
pop    %edi
push   %esp
inc    %ebx
dec    %esp
inc    %ecx
push   %ebx
push   %ebx
sub    %eax,(%eax)
arpl   %sp,0x6e(%ecx)
daa
je     804fffd <_IO_stdin_used+0x931>
jae    8050044 <_IO_stdin_used+0x978>
je     8050001 <_IO_stdin_used+0x935>
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8050052 <_IO_stdin_used+0x986>
popa
bound  %esp,0x6c(%ebp)
add    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     8050011 <_IO_stdin_used+0x945>
jae    8050058 <_IO_stdin_used+0x98c>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     8050064 <_IO_stdin_used+0x998>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
add    %dl,0x49(%eax)
dec    %esi
inc    %edi
and    %ah,0x73252873
sub    %esp,(%eax)
add    %ch,(%eax,%eiz,1)
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8050033 <_IO_stdin_used+0x967>
xor    %bh,0x25(%eax)
xor    %dh,0x202c78
data16
jb     805008e <_IO_stdin_used+0x9c2>
insl   (%dx),%es:(%edi)
and    %ah,0x73252073
cmp    (%eax),%ah
add    %ah,0x61642064
je     8050091 <_IO_stdin_used+0x9c5>
and    %ah,0x79(%edx)
je     805009a <_IO_stdin_used+0x9ce>
jae    8050041 <_IO_stdin_used+0x975>
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x72(%ebp)
jb     80500b7 <_IO_stdin_used+0x9eb>
jb     8050084 <_IO_stdin_used+0x9b8>
and    %ah,0x8000a73
inc    %ebp
add    %al,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x63692073
insl   (%dx),%es:(%edi)
jo     80500be <_IO_stdin_used+0x9f2>
jae    80500c6 <_IO_stdin_used+0x9fa>
jno    80500a0 <_IO_stdin_used+0x9d4>
and    $0x20002075,%eax
jo     80500cb <_IO_stdin_used+0x9ff>
jb     80500df <_IO_stdin_used+0xa13>
and    %ah,%gs:0x72(%ebp)
jb     80500e1 <_IO_stdin_used+0xa15>
jb     8050094 <_IO_stdin_used+0x9c8>
sub    %dh,0x6f(%edi,%ebp,2)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     80500f2 <_IO_stdin_used+0xa26>
sub    %eax,(%eax)
and    %dh,0x61(%eax)
jb     80500f8 <_IO_stdin_used+0xa2c>
and    %ah,%gs:0x72(%ebp)
jb     80500fa <_IO_stdin_used+0xa2e>
jb     80500ad <_IO_stdin_used+0x9e1>
sub    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs sub %eax,%fs:%gs:(%eax)
pop    %esp
and    $0x6f3330,%eax
and    %ah,0x75200073
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%ecx)
jns    8050120 <_IO_stdin_used+0xa54>
sub    %dh,%gs:(%eax)
js     80500da <_IO_stdin_used+0xa0e>
xor    %dh,(%edx)
js     80500e2 <_IO_stdin_used+0xa16>
add    %ah,(%eax)
jb     8050122 <_IO_stdin_used+0xa56>
data16
jne    8050133 <_IO_stdin_used+0xa67>
gs add %ah,%fs:%gs:(%eax)
jne    8050134 <_IO_stdin_used+0xa68>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %ah,(%eax)
jne    805013d <_IO_stdin_used+0xa71>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
fs sub %ah,%fs:%gs:0x29783230
add    %bh,(%ebx)
and    %dh,0x65(%ebx)
jno    8050123 <_IO_stdin_used+0xa57>
and    $0x46003b75,%eax
jb     805015c <_IO_stdin_used+0xa90>
insl   (%dx),%es:(%edi)
and    %ah,0x69203a73
arpl   %bp,0x70(%ebp)
pop    %edi
jae    805015f <_IO_stdin_used+0xa93>
jno    8050139 <_IO_stdin_used+0xa6d>
and    $0x46002075,%eax
jb     8050172 <_IO_stdin_used+0xaa6>
insl   (%dx),%es:(%edi)
and    %ah,0x203a73
imul   $0x6c612d36,0x76(%eax),%esi
insb   (%dx),%es:(%edi)
add    %ch,0x70(%ecx)
jbe    805014d <_IO_stdin_used+0xa81>
sub    $0x706d6f63,%eax
popa
je     8050188 <_IO_stdin_used+0xabc>
bound  %ebp,0x0(%ebp,%eiz,2)
imul   $0x696c2d36,0x76(%eax),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x61,0x63(%edi,%ebp,2),%ebp
insb   (%dx),%es:(%edi)
add    %ch,0x70(%ecx)
jbe    805016c <_IO_stdin_used+0xaa0>
sub    $0x65746973,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,0x70(%ecx)
jbe    805017b <_IO_stdin_used+0xaaf>
sub    $0x626f6c67,%eax
popa
insb   (%dx),%es:(%edi)
add    %ch,0x70(%ecx)
jbe    8050185 <_IO_stdin_used+0xab9>
sub    $0x6c6c61,%eax
jae    80501cd <_IO_stdin_used+0xb01>
bound  %ebp,0x65(%edx)
arpl   %si,0x69(%ebp,%ebp,1)
jo     80501d7 <_IO_stdin_used+0xb0b>
add    %dh,%ss:0x75(%ebx)
bound  %ebp,0x65(%edx)
arpl   %si,0x69(%ebp,%ebp,1)
jo     80501e4 <_IO_stdin_used+0xb18>
xor    $0x0,%al
jae    80501e7 <_IO_stdin_used+0xb1b>
bound  %ebp,0x65(%edx)
arpl   %si,0x6e(%ebp,%ebp,1)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x75(%ebx)
bound  %ebp,0x65(%edx)
arpl   %si,0x66(%ebp,%ebp,1)
jno    80501ec <_IO_stdin_used+0xb20>
outsb  %ds:(%esi),(%dx)
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     805018f <_IO_stdin_used+0xac3>
add    %cl,%al
stos   %eax,%es:(%edi)
add    $0x8,%al
test   $0xab,%al
add    $0x8,%al
mov    %ch,-0x5497f7fc(%ebx)
add    $0x8,%al
call   50d0650 <_init-0x2f789e8>
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  8050144 <_IO_stdin_used+0xa78>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  805014c <_IO_stdin_used+0xa80>
add    $0x8,%al
lret
xchg   %eax,%edi
add    $0x8,%al
jecxz  8050154 <_IO_stdin_used+0xa88>
add    $0x8,%al
jecxz  8050158 <_IO_stdin_used+0xa8c>
add    $0x8,%al
sbb    -0x691cf7fc(%edi),%dl
add    $0x8,%al
jecxz  8050164 <_IO_stdin_used+0xa98>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
call   d60d066f <_end+0xce05ab7b>
xchg   %eax,%esi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  8050178 <_IO_stdin_used+0xaac>
add    $0x8,%al
pushf
xchg   %eax,%esi
add    $0x8,%al
jecxz  8050180 <_IO_stdin_used+0xab4>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  8050188 <_IO_stdin_used+0xabc>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
je     8050190 <_IO_stdin_used+0xac4>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  8050198 <_IO_stdin_used+0xacc>
add    $0x8,%al
jecxz  805019c <_IO_stdin_used+0xad0>
add    $0x8,%al
jecxz  80501a0 <_IO_stdin_used+0xad4>
add    $0x8,%al
jecxz  80501a4 <_IO_stdin_used+0xad8>
add    $0x8,%al
jecxz  80501a8 <_IO_stdin_used+0xadc>
add    $0x8,%al
jecxz  80501ac <_IO_stdin_used+0xae0>
add    $0x8,%al
jecxz  80501b0 <_IO_stdin_used+0xae4>
add    $0x8,%al
jecxz  80501b4 <_IO_stdin_used+0xae8>
add    $0x8,%al
jecxz  80501b8 <_IO_stdin_used+0xaec>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  80501c0 <_IO_stdin_used+0xaf4>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  80501cc <_IO_stdin_used+0xb00>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  80501d4 <_IO_stdin_used+0xb08>
add    $0x8,%al
jecxz  80501d8 <_IO_stdin_used+0xb0c>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  80501e0 <_IO_stdin_used+0xb14>
add    $0x8,%al
jecxz  80501e4 <_IO_stdin_used+0xb18>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  80501f4 <_IO_stdin_used+0xb28>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jecxz  805020c <_IO_stdin_used+0xb40>
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
std
xchg   %eax,%edi
add    $0x8,%al
jo     80502eb <_IO_stdin_used+0xc1f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
addr16
gs
je     80502ed <_IO_stdin_used+0xc21>
jo     8050302 <_IO_stdin_used+0xc36>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jo     80502fe <_IO_stdin_used+0xc32>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
imul   $0x69700074,0x69(%esi),%ebp
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
jae    8050313 <_IO_stdin_used+0xc47>
je     805030f <_IO_stdin_used+0xc43>
jo     8050324 <_IO_stdin_used+0xc58>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jo     8050320 <_IO_stdin_used+0xc54>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     805032f <_IO_stdin_used+0xc63>
arpl   %si,0x0(%esp,%ebp,2)
jae    8050328 <_IO_stdin_used+0xc5c>
je     805033a <_IO_stdin_used+0xc6e>
imul   $0x3a676e69,0x70(%eax,%eax,1),%esp
and    %ah,0x61(%edx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
imul   $0x746e6920,0x67(%esi),%ebp
gs
jb     8050355 <_IO_stdin_used+0xc89>
popa
insb   (%dx),%es:(%edi)
or     (%eax),%al
insl   (%dx),%es:(%edi)
popa
jb     8050352 <_IO_stdin_used+0xc86>
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805030f <_IO_stdin_used+0xc43>
bound  %esp,0x20(%ebp)
outsb  %ds:(%esi),(%dx)
gs
addr16 popa
je     8050361 <_IO_stdin_used+0xc95>
jbe    805035f <_IO_stdin_used+0xc93>
or     (%eax),%al
jo     8050367 <_IO_stdin_used+0xc9b>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %dh,0x61(%edi)
imul   $0x2e656d69,0x74(%eax,%eiz,1),%esi
or     (%eax),%al
jo     805037d <_IO_stdin_used+0xcb1>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %dh,0x6e(%ebx)
bound  %esi,%fs:0x66(%ebp)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    805038d <_IO_stdin_used+0xcc1>
or     %cs:(%eax),%al
push   %eax
inc    %ecx
push   %esp
push   %esp
inc    %ebp
push   %edx
dec    %esi
cmp    (%eax),%ah
xor    %bh,0x0(%eax)
and    $0x783230,%eax
jo     80503a7 <_IO_stdin_used+0xcdb>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
je     80503b8 <_IO_stdin_used+0xcec>
insb   (%dx),%es:(%edi)
and    %ah,0x756f2075
je     805036d <_IO_stdin_used+0xca1>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
or     %gs:(%bx,%si),%al
jo     80503c2 <_IO_stdin_used+0xcf6>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %ch,0x6e(%ecx,%ebp,2)
addr16
gs
jb     8050388 <_IO_stdin_used+0xcbc>
je     80503d3 <_IO_stdin_used+0xd07>
insl   (%dx),%es:(%edi)
gs or  %cs:%gs:(%eax),%al
jo     80503da <_IO_stdin_used+0xd0e>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%di)
imul   $0x69202c79,0x74(%ecx,%ebp,2),%ebp
jo     80503f5 <_IO_stdin_used+0xd29>
je     80503eb <_IO_stdin_used+0xd1f>
insb   (%dx),%es:(%edi)
jae    80503b2 <_IO_stdin_used+0xce6>
and    $0x5b000a73,%eax
and    $0x252e756c,%eax
xor    %dh,(%esi)
insb   (%dx),%es:(%edi)
jne    80503f1 <_IO_stdin_used+0xd25>
and    %al,(%eax)
add    %dh,%cs:0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jae    8050405 <_IO_stdin_used+0xd39>
outsb  %ds:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    805040c <_IO_stdin_used+0xd40>
add    %cl,(%eax)
and    %cl,(%eax)
add    %cl,(%eax)
inc    %ebx
add    %ah,0x79622064
je     8050419 <_IO_stdin_used+0xd4d>
jae    80503d6 <_IO_stdin_used+0xd0a>
data16
jb     8050428 <_IO_stdin_used+0xd5c>
insl   (%dx),%es:(%edi)
and    %ah,0x20003a73
je     8050436 <_IO_stdin_used+0xd6a>
insb   (%dx),%es:(%edi)
cmp    $0x20006425,%eax
je     8050433 <_IO_stdin_used+0xd67>
insl   (%dx),%es:(%edi)
gs
cmp    $0x20646c25,%eax
insl   (%dx),%es:(%edi)
jae    80503d4 <_IO_stdin_used+0xd08>
and    %dh,0x6d(%ecx,%ebp,2)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3130,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
je     8050453 <_IO_stdin_used+0xd87>
insl   (%dx),%es:(%edi)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3230,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
je     8050466 <_IO_stdin_used+0xd9a>
insl   (%dx),%es:(%edi)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3330,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
sub    %al,0x50(%ebp,%edx,2)
and    %ebp,(%ecx)
add    %ah,(%eax)
sub    %al,0x41(%edx)
inc    %esp
and    %al,0x48(%ebx)
inc    %ebp
inc    %ebx
dec    %ebx
push   %ebx
push   %ebp
dec    %ebp
and    %ebp,(%ecx)
add    %cl,(%edx)
and    0x25000964,%esp
js     805044f <_IO_stdin_used+0xd83>
add    %ch,0x25202d2d
jae    8050457 <_IO_stdin_used+0xd8b>
jo     80504a2 <_IO_stdin_used+0xdd6>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%bp,%di)
popa
je     80504aa <_IO_stdin_used+0xdde>
jae    80504b7 <_IO_stdin_used+0xdeb>
imul   $0x2d2d2d20,0x73(%ebx),%esp
or     (%eax),%al
and    $0x7020646c,%eax
popa
arpl   %bp,0x65(%ebx)
je     80504ca <_IO_stdin_used+0xdfe>
and    %dh,0x61(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
jae    80504cb <_IO_stdin_used+0xdff>
imul   $0x202c64,0x65(%esp,%esi,2),%esi
and    $0x7220646c,%eax
arpl   %sp,%gs:0x69(%ebp)
jbe    80504d6 <_IO_stdin_used+0xe0a>
add    %ch,%fs:(%eax,%eiz,1)
sub    0x6420646c,%esp
jne    80504ed <_IO_stdin_used+0xe21>
insb   (%dx),%es:(%edi)
imul   $0x736574,0x61(%ebx),%esp
sub    $0x20,%al
sub    0x6320646c,%esp
outsl  %ds:(%esi),(%dx)
jb     8050502 <_IO_stdin_used+0xe36>
jne    8050502 <_IO_stdin_used+0xe36>
je     80504f9 <_IO_stdin_used+0xe2d>
add    %ch,%fs:(%eax,%eiz,1)
sub    0x6520646c,%esp
jb     8050512 <_IO_stdin_used+0xe46>
outsl  %ds:(%esi),(%dx)
jb     8050516 <_IO_stdin_used+0xe4a>
add    %ch,(%eax,%eiz,1)
and    $0x20252564,%eax
jo     805050e <_IO_stdin_used+0xe42>
arpl   %bp,0x65(%ebx)
je     80504d2 <_IO_stdin_used+0xe06>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8050529 <_IO_stdin_used+0xe5d>
add    %ch,(%eax,%eiz,1)
je     8050524 <_IO_stdin_used+0xe58>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x736d646c
add    %ah,0x70697073
and    %ah,%gs:0x73250064
imul   $0x6d77652f,0x67(%eax),%esi
popa
and    %ah,0x30252e64
xor    0x25(%edi,%ebp,1),%esp
fs
cs
and    $0x20643330,%eax
insl   (%dx),%es:(%edi)
jae    80504ec <_IO_stdin_used+0xe20>
or     $0x2f646c25,%eax
and    $0x7020646c,%eax
popa
arpl   %bp,0x65(%ebx)
je     805056f <_IO_stdin_used+0xea3>
sub    $0x20,%al
and    $0x20252564,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    805057a <_IO_stdin_used+0xeae>
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jb     8050575 <_IO_stdin_used+0xea9>
arpl   %si,0x6d(%esi)
jae    805057c <_IO_stdin_used+0xeb0>
add    %al,(%eax)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     80505a6 <_IO_stdin_used+0xeda>
and    %dh,0x20(%edi,%ebp,2)
je     80505ab <_IO_stdin_used+0xedf>
popa
outsb  %ds:(%esi),(%dx)
jae    80505aa <_IO_stdin_used+0xede>
imul   $0x70000000,0xa(%esi,%ebp,1),%esi
imul   $0x6162203a,0x67(%esi),%ebp
and    %dh,%fs:0x72(%eax)
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %dh,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80505c0 <_IO_stdin_used+0xef4>
sub    $0x20,%al
jae    80505c7 <_IO_stdin_used+0xefb>
outsl  %ds:(%esi),(%dx)
jne    80505ce <_IO_stdin_used+0xf02>
and    %ah,%fs:0x65(%edx)
and    %dh,(%ecx)
cs
cs
and    $0xa64,%eax
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805059d <_IO_stdin_used+0xed1>
jae    80505e4 <_IO_stdin_used+0xf18>
je     80505a1 <_IO_stdin_used+0xed5>
jo     80505f5 <_IO_stdin_used+0xf29>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %dh,%fs:0x20(%edi,%ebp,2)
jbe    80505ef <_IO_stdin_used+0xf23>
insb   (%dx),%es:(%edi)
jne    80505f6 <_IO_stdin_used+0xf2a>
and    %bh,(%esi)
and    %dh,(%ebx)
or     (%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     8050601 <_IO_stdin_used+0xf35>
je     8050616 <_IO_stdin_used+0xf4a>
gs
jb     8050613 <_IO_stdin_used+0xf47>
jae    80505c7 <_IO_stdin_used+0xefb>
insl   (%dx),%es:(%edi)
jne    805061d <_IO_stdin_used+0xf51>
je     80505cc <_IO_stdin_used+0xf00>
bound  %esp,0x20(%ebp)
jae    8050621 <_IO_stdin_used+0xf55>
arpl   %bp,%gs:0x66(%ecx)
imul   $0x20736120,0x64(%ebp),%esp
push   $0x64207865
imul   $0xa2e7374,0x69(%edi),%esp
add    %al,(%eax)
add    %al,(%eax)
and    $0x32257832,%eax
js     80505f8 <_IO_stdin_used+0xf2c>
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x0(%eax),%bh
add    %al,(%eax)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
addr16 popa
je     805067d <_IO_stdin_used+0xfb1>
jbe    805067b <_IO_stdin_used+0xfaf>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     805063e <_IO_stdin_used+0xf72>
jae    8050689 <_IO_stdin_used+0xfbd>
jp     8050687 <_IO_stdin_used+0xfbb>
and    %ah,0xa2e64
jo     8050693 <_IO_stdin_used+0xfc7>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     8050691 <_IO_stdin_used+0xfc5>
arpl   %bp,0x65(%ebx)
je     8050655 <_IO_stdin_used+0xf89>
jae    80506a0 <_IO_stdin_used+0xfd4>
jp     805069e <_IO_stdin_used+0xfd2>
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
cmp    %gs:(%bx,%si),%ah
and    $0xa64,%eax
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
jae    80506ca <_IO_stdin_used+0xffe>
gs
jb     8050676 <_IO_stdin_used+0xfaa>
jns    80506bd <_IO_stdin_used+0xff1>
je     805067a <_IO_stdin_used+0xfae>
outsw  %ds:(%esi),(%dx)
jb     805067e <_IO_stdin_used+0xfb2>
imul   $0x65735f70,0x6d(%ebx),%esp
jno    80506a4 <_IO_stdin_used+0xfd8>
and    $0xa756c,%eax
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jo     80506e9 <_IO_stdin_used+0x101d>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x62(%ecx)
insb   (%dx),%es:(%edi)
jns    80506aa <_IO_stdin_used+0xfde>
and    %dh,0x63(%edx)
jbe    80506e5 <_IO_stdin_used+0x1019>
jne    80506eb <_IO_stdin_used+0x101f>
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     80506ad <_IO_stdin_used+0xfe1>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    80506f9 <_IO_stdin_used+0x102d>
push   $0x206f7420
push   $0x20646c6f
jo     8050710 <_IO_stdin_used+0x1044>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs or  %cs:%fs:(%eax),%al
add    %al,(%eax)
jo     8050713 <_IO_stdin_used+0x1047>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80506d5 <_IO_stdin_used+0x1009>
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
cmp    %fs:(%eax),%esp
insl   (%dx),%es:(%edi)
imul   $0x206c616d,0x69(%esi),%ebp
imul   $0x61767265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8050738 <_IO_stdin_used+0x106c>
and    %ah,%fs:0x6f(%esi)
jb     80506f9 <_IO_stdin_used+0x102d>
jne    805074e <_IO_stdin_used+0x1082>
gs
jb     80506fe <_IO_stdin_used+0x1032>
imul   $0x736d6425,0x20(%ebx),%esi
or     (%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
jo     805076a <_IO_stdin_used+0x109e>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x6e(%ecx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     8050725 <_IO_stdin_used+0x1059>
imul   $0x61767265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
or     (%eax),%al
add    %dl,0x61(%edi)
jb     8050782 <_IO_stdin_used+0x10b6>
imul   $0x6f6e203a,0x67(%esi),%ebp
and    %dl,0x4f(%ebx)
pop    %edi
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
push   %ebx
push   %esp
inc    %ecx
dec    %ebp
push   %eax
and    %dh,0x75(%ebx)
jo     805079d <_IO_stdin_used+0x10d1>
outsl  %ds:(%esi),(%dx)
jb     80507a4 <_IO_stdin_used+0x10d8>
sub    $0x20,%al
popaw
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x63616220,0x67(%esi),%ebp
imul   $0x74,(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
inc    %edi
push   %ebx
push   %esp
inc    %ecx
dec    %ebp
push   %eax
or     (%eax),%al
add    %al,(%eax)
push   %edi
popa
jb     80507c2 <_IO_stdin_used+0x10f6>
imul   $0x6146203a,0x67(%esi),%ebp
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    80507ca <_IO_stdin_used+0x10fe>
je     8050787 <_IO_stdin_used+0x10bb>
insl   (%dx),%es:(%edi)
popa
jb     80507d6 <_IO_stdin_used+0x110a>
and    %ah,0x57000a64
popa
jb     80507e2 <_IO_stdin_used+0x1116>
imul   $0x6974203a,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x66(%edi)
and    %ah,0x79(%ecx,%eiz,2)
and    %ah,0x6f(%edi)
gs
jae    80507aa <_IO_stdin_used+0x10de>
bound  %esp,0x63(%ecx)
imul   $0x28,(%eax),%esp
and    $0x7375646c,%eax
sub    %ebp,(%eax,%eiz,1)
je     80507fb <_IO_stdin_used+0x112f>
imul   $0x67,0x6e(%ecx),%ebp
and    %ah,0x6f(%ebx)
jne    8050811 <_IO_stdin_used+0x1145>
je     805080a <_IO_stdin_used+0x113e>
jb     8050814 <_IO_stdin_used+0x1148>
gs
popa
jae    8050820 <_IO_stdin_used+0x1154>
jb     8050812 <_IO_stdin_used+0x1146>
jae    80507dd <_IO_stdin_used+0x1111>
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%edx)
ja     8050829 <_IO_stdin_used+0x115d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%si)
je     8050820 <_IO_stdin_used+0x1154>
and    %ah,0x79(%edx)
je     8050829 <_IO_stdin_used+0x115d>
and    %ah,(%ebx)
and    $0x68732064,%eax
outsl  %ds:(%esi),(%dx)
jne    805083a <_IO_stdin_used+0x116e>
and    %ah,%fs:0x65(%edx)
and    %dh,(%eax)
js     80507fb <_IO_stdin_used+0x112f>
js     80507f8 <_IO_stdin_used+0x112c>
bound  %esi,0x74(%ebp)
and    %dh,0x61(%edi)
jae    8050800 <_IO_stdin_used+0x1134>
xor    %bh,0x25(%eax)
js     80507e5 <_IO_stdin_used+0x1119>
add    %al,(%eax)
add    %dh,0x74(%edx)
je     805080c <_IO_stdin_used+0x1140>
insl   (%dx),%es:(%edi)
imul   $0x2f677661,0x2f(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
js     8050827 <_IO_stdin_used+0x115b>
insl   (%dx),%es:(%edi)
fs
gs
jbe    805081d <_IO_stdin_used+0x1151>
cmp    $0x646c2520,%eax
cs
and    $0x646c3330,%eax
das
and    $0x252e756c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x252e646c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x252e646c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
and    %ch,%fs:0x73(%ebp)
add    %al,(%eax)
add    %ch,(%eax,%eiz,1)
insl   (%dx),%es:(%edi)
imul   $0x2f677661,0x2f(%esi),%ebp
gs
ja     80508a6 <_IO_stdin_used+0x11da>
popa
das
insl   (%dx),%es:(%edi)
popa
js     805085f <_IO_stdin_used+0x1193>
cmp    $0x646c2520,%eax
cs
and    $0x646c3330,%eax
das
and    $0x252e756c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x30252e64,%eax
xor    0x25(%edi,%ebp,1),%esp
insb   (%dx),%es:(%edi)
fs
cs
and    $0x646c3330,%eax
and    %ch,0x73(%ebp)
add    %al,(%eax)
add    %cl,-0x30(%eax)
add    $0x8,%al
cmp    %dl,%al
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
and    %dl,%dl
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
adc    %dl,%dl
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
add    %dl,%dl
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
mov    0x400804d1,%al
rolb   %cl,(%eax,%ecx,1)
xor    %dl,%dl
add    $0x8,%al
adc    %dl,%al
add    $0x8,%al
ror    %bh
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
ror    $0x4,%bh
or     %al,-0x2e(%eax)
add    $0x8,%al
pusha
iret
add    $0x8,%al
push   %eax
iret
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
mov    %cl,%dl
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
mov    $0xce,%al
add    $0x8,%al
inc    %eax
rolb   %cl,(%eax,%ecx,1)
inc    %eax
rolb   %cl,(%eax,%ecx,1)
xor    %cl,%dh
add    $0x8,%al
call   ac0d0dee <_end+0xa405b2fa>
lret   $0x804
inc    %eax
rolb   %cl,(%eax,%ecx,1)
ror    $0x4,%dl
or     %dl,-0x7ff7fb2f(%eax)
roll   (%eax,%ecx,1)
xor    %dl,%cl
add    $0x8,%al
enter  $0x4d0,$0x8
inc    %eax
rolb   %cl,(%eax,%ecx,1)
mov    $0x580804d0,%eax
rolb   (%eax,%ecx,1)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
out    %eax,(%dx)
jg     80509b1 <_IO_stdin_used+0x12e5>
in     $0xd0,%eax
push   %edx
dec    %ebp
bound  %eax,0x41(%eax)
add    %al,(%eax)
jp     80509a0 <_IO_stdin_used+0x12d4>
add    %ebx,(%ebx)
add    (%ebx),%edi
js     8050963 <_IO_stdin_used+0x1297>
add    %al,(%eax)
add    %al,%cs:(%eax)
add    %al,(%edi,%eax,4)
(bad)
call   *-0x73cc0000(%ecx,%eax,1)
(bad)
call   *0x0(%esp,%eax,1)
add    %ah,(%edi,%ebx,4)
(bad)
(bad)
mov    $0x64000001,%eax
lahf
(bad)
dec    %esp
add    %eax,(%eax)
add    %ah,0x1e0ffff(%edi,%ebx,4)
add    %al,(%eax)
push   %esp
mov    %eax,0x244ffff
add    %al,(%eax)
test   %ah,0x25cffff(%ebx)
add    %al,(%eax)
aam    $0xa3
(bad)
decl   -0x4bfffffe(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
pushl  -0xbfffffe(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
jmp    *%esp
add    (%eax),%al
add    %al,-0x1(%ebp,%eiz,4)
incl   (%ebx,%eax,1)
add    %al,(%eax)
je     805096b <_IO_stdin_used+0x129f>
(bad)
decl   0x3(%eax)
add    %al,(%eax)
mov    $0xa9,%ah
(bad)
jmp    *0x3(%eax)
add    %al,(%eax)
hlt
test   $0x378ffff,%eax
add    %al,(%eax)
inc    %esp
stos   %al,%es:(%edi)
(bad)
lcall  *-0x7bfffffd(%eax)
stos   %al,%es:(%edi)
(bad)
pushl  0x24000003(%eax)
lods   %ds:(%esi),%al
(bad)
push   %eax
add    (%eax),%eax
add    %dh,-0x1(%esp,%ebp,4)
call   *(%esp,%eax,1)
add    %al,(%eax)
xor    $0xad,%al
(bad)
incl   -0x4fbc0000(%esp,%eax,1)
(bad)
dec    %eax
add    $0x0,%al
add    %ah,0x4e0ffff(%eax,%esi,4)
add    %al,(%eax)
test   %dh,0x50cffff(%ecx)
add    %al,(%eax)
aam    $0xb3
(bad)
pushl  -0x4a0c0000(,%eax,1)
(bad)
(bad)
js     8050a2b <_IO_stdin_used+0x135f>
add    %al,(%eax)
aam    $0xb7
(bad)
(bad)
mov    $0xe4000005,%esp
mov    $0x5e0ffff,%eax
add    %al,(%eax)
and    $0xbd,%al
(bad)
jmp    *(%eax)
push   %es
add    %al,(%eax)
les    0x640ffff(%ebp),%edi
add    %al,(%eax)
aam    $0xbd
(bad)
call   *0x0(%esi,%eax,1)
add    %al,(%esi,%edi,4)
(bad)
ljmp   *0x6(%eax)
add    %al,(%eax)
hlt
mov    $0x6a0ffff,%edi
add    %al,(%eax)
(bad)
sar    $0xff,%bh
rolb   (%esi)
add    %al,(%eax)
add    $0xc1,%al
(bad)
push   %esp
push   %es
add    %al,(%eax)
xchg   %eax,%esp
lret   $0xffff
xor    $0x7,%al
add    %al,(%eax)
push   %esp
lret
(bad)
lcall  *0x7(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
lret
(bad)
pushl  0x7(%eax)
add    %al,(%eax)
aam    $0xd0
(bad)
lcall  *-0x2e2c0000(%edi,%eax,1)
(bad)
jmp    *%esp
pop    %es
add    %al,(%eax)
and    $0xd8,%al
(bad)
(bad)
cmp    $0x8,%al
add    %al,(%eax)
in     $0xde,%al
(bad)
call   *-0x1c5c0000(%eax,%ecx,1)
(bad)
(bad)
mov    $0x64000008,%esp
in     $0xff,%eax
(bad)
cld
or     %al,(%eax)
add    %dl,0x928ffff(%ecx,%ebp,8)
add    %al,(%eax)
adc    $0xeb,%al
(bad)
jmp    *0x9(%eax)
add    %al,(%eax)
in     $0xec,%al
(bad)
lcall  *0x54000009(%eax)
in     (%dx),%eax
(bad)
call   *%esp
or     %eax,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8050aef <_IO_stdin_used+0x1423>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
push   $0x30ffff85
add    $0xe000000,%eax
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8050b0f <_IO_stdin_used+0x1443>
js     8050b0d <_IO_stdin_used+0x1441>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,-0x1(%ebp,%ebx,4)
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %dl,0x34ffff9d(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0x0(%eax)
add    %al,(%eax)
push   $0xbc000000
popf
(bad)
jmp    *0x3(%edx)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    0xa(%ecx),%al
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
xchg   %eax,%edi
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     0xa(%edi),%edx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
int3
add    %al,(%eax)
add    %cl,(%eax)
mov    0x2effff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%edx)
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
in     $0x0,%al
add    %al,(%eax)
and    %ah,0x4cffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %edx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ah,(%eax,%eax,1)
add    %al,(%eax)
adc    %al,(%ecx)
add    %al,(%eax)
inc    %esp
mov    0xdcffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xa(%edi)
push   %cs
add    $0x46,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %edx
or     (%esi),%cl
add    $0x46,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
cmp    %al,(%ecx)
add    %al,(%eax)
cld
mov    0x3fffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
outsl  %ds:(%esi),(%dx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %cl,(%eax)
mov    %al,0x50ffff
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%edi),%ebx
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,-0x5dc80000(%ecx,%eax,1)
(bad)
ljmp   *(%eax)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
cmpsl  %es:(%edi),%ds:(%esi)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
rolb   (%ecx)
add    %al,(%eax)
and    $0xa6,%al
(bad)
pushl  0x0
push   %ecx
push   %cs
and    %dl,0x4(%esi,%ecx,1)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
call   54050cc6 <_end+0x4bfdb1d2>
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
pushl  0x0
push   %ecx
push   %cs
and    %dl,0x4(%esi,%ecx,1)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
je     8050c84 <_IO_stdin_used+0x15b8>
(bad)
call   *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%edi),%ebx
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
and    %al,(%edx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
pushl  0x0
push   %ecx
push   %cs
and    %dl,0x4(%esi,%ecx,1)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cmp    %al,(%edx)
add    %al,(%eax)
int3
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
call   *0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffeb,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
js     8050d54 <_IO_stdin_used+0x1688>
add    %al,(%eax)
sub    $0xa8,%al
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
pushf
add    (%eax),%al
add    %bl,-0x58(%eax)
(bad)
pushl  0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x74,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
faddl  (%edx)
add    %al,(%eax)
fadds  0x11f1ffff(%edi)
add    %al,(%eax)
add    %al,0x1(%esp,%ecx,1)
add    %al,0x10(%edi)
add    $0x46007502,%eax
lsl    0x70(%ebp),%esi
push   %es
adc    %al,(%edi)
add    0x7c(%ebp),%dh
adc    %al,(%esi)
add    0x78(%ebp),%dh
adc    %al,(%ebx)
add    0x74(%ebp),%dh
inc    %eax
add    %al,(%eax)
add    %cl,(%ebx,%eax,1)
add    %al,(%eax)
test   $0xa8,%al
(bad)
decl   (%ebx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x5900e46
adc    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
push   %eax
add    (%eax),%eax
add    %dh,-0x1(%ebx,%ebp,4)
lcall  *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
push   %ebx
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %ch,0x3(%eax)
add    %al,(%eax)
mov    $0xe0ffffab,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
rorl   %cl,(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ah,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
add    (%eax),%eax
add    %dh,-0x54(%eax)
(bad)
decl   0x2(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4302(%ebx)
add    0x1(%edi),%esp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,-0x51680000(%ebx,%eax,1)
(bad)
call   *0x2
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8e00e46
aad    $0x1
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %dh,-0x1(%eax,%esi,4)
(bad)
fiaddl (%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8d00e46
sub    %al,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
inc    %esp
add    $0x0,%al
add    %dl,(%eax)
mov    $0xff,%dl
decl   (%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xa(%ebx),%bl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   $0xfc000004
mov    $0xff,%dl
pushl  (%esp,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x49,0x2600e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
test   $0x4,%al
add    %al,(%eax)
cld
mov    $0xff,%dh
call   *0x0(%ecx)
dec    %ebp
push   %cs
xor    %al,(%edx)
imul   $0x4,(%esi),%ecx
dec    %eax
push   %cs
xor    %cl,0xe(%edi)
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,%al
add    $0x0,%al
add    %bh,-0x1(%edi,%esi,4)
decl   (%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    $0x0,%al
add    %bh,-0x49(%eax)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %bl,0xe(%eax)
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
lock add $0x0,%al
add    %dl,0x1e5ffff(%edi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    (%esi),%eax
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
sub    %al,0xb94c0000
(bad)
dec    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
add    0xa(%ecx),%bl
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pop    %eax
add    $0xb9ec0000,%eax
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
jl     805105b <_IO_stdin_used+0x198f>
add    %al,(%eax)
or     %bh,0x98effff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e46
dec    %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esp
add    %al,(%eax)
add    %bh,-0x3ca80000(%ebp,%eax,1)
(bad)
(bad)
mov    $0x0,%esp
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0x43080e0a(%eax),%cl
ret
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
loopne 80510bf <_IO_stdin_used+0x19f3>
add    %al,(%eax)
hlt
ret
(bad)
decl   0x0(%edi)
add    %al,(%eax)
add    %dl,0xe(%ebx)
xor    %bh,0xe(%ebx)
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
clc
add    $0xc42c0000,%eax
(bad)
jmp    *0x5
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %cl,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%eax
add    %ah,(%esi,%eax,1)
add    %al,(%eax)
xor    %cl,%cl
(bad)
push   %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x41100e0a(%ecx),%bh
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%eax),%ebp
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ch,0x0(%esi,%eax,1)
add    %ch,%al
leave
(bad)
incl   0x6(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1f00e46
ja     805116e <_IO_stdin_used+0x1aa2>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
jbe    805118e <_IO_stdin_used+0x1ac2>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%edx
add    %al,%ah
push   %es
add    %al,(%eax)
loopne 8051171 <_IO_stdin_used+0x1aa5>
(bad)
pushl  0x41000000(%esi,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x17,0x3500e43
add    (%edx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
arpl   %cx,(%edx)
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
sbb    $0x7,%al
add    %al,(%eax)
dec    %eax
(bad)
(bad)
(bad)
mov    $0x4,%ebx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x3c600e43
add    %al,(%eax)
inc    %esp
pop    %es
add    %al,(%eax)
loopne 80511fc <_IO_stdin_used+0x1b30>
(bad)
pushl  0x1(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x70,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
test   %al,(%edi)
add    %al,(%eax)
pusha
fdivr  %st,%st(7)
pushl  (%eax)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x21f00e46
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
mov    $0x7,%al
add    %al,(%eax)
fs
loopne 805128e <_IO_stdin_used+0x1bc2>
pushl  0x1(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%esi)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
call   b40512cc <_end+0xabfdb7d8>
loope  80512c6 <_IO_stdin_used+0x1bfa>
inc    %edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%esi)
add    0x41100e0a(%ebp),%al
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
or     %al,(%eax)
add    %al,-0x1(%ebx,%eiz,8)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,0x0(%eax,%ecx,1)
add    %bh,-0x1d(%eax)
(bad)
incl   (%edx)
push   %eax
test   $0x4,%al
.byte 0x8
.byte 0x30
test   $0x4,%al
.byte 0x8
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
mov    $0x0,%dl
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
xlat   %ds:(%ebx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %cl,0xc000001
add    %al,(%eax)
add    %bh,(%eax)
nop
add    $0x8,%al
or     $0xb4000000,%eax
testb  $0x19,(%eax,%ecx,1)
add    %al,(%eax)
add    %dh,%al
cs
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
hlt
cs
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
clc
xchg   %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %bh,%al
addl   $0xa,(%eax,%ecx,1)
and    $0xb000004,%eax
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
xor    %al,0x208
add    %dl,0x14000002(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%edi)
add    %al,(%eax)
add    %ch,0x1108048d(%eax)
add    %al,(%eax)
add    %al,0x1208048d(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x20(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x1e(%edi)
mov    %es,(%eax,%ecx,1)
add    %al,(%eax)
cld
cs
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,-0x70(%esi)
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8052fdf <_IO_stdin_used+0x3913>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8053020 <_IO_stdin_used+0x3954>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    8053061 <_IO_stdin_used+0x3995>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    80530a2 <_IO_stdin_used+0x39d6>
add    $0x8,%al
xchg   %dl,0x4949608(%esp,%eax,1)
or     %ah,-0x49f7fb6c(%esi)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
out    %al,$0x94
add    $0x8,%al
notb   0x4950608(%esp,%eax,1)
or     %dl,(%esi)
xchg   %eax,%ebp
add    $0x8,%al
es
xchg   %eax,%ebp
add    $0x8,%al
ss
xchg   %eax,%ebp
add    $0x8,%al
inc    %esi
xchg   %eax,%ebp
add    $0x8,%al
push   %esi
xchg   %eax,%ebp
add    $0x8,%al
xchg   %ax,%bp
add    $0x8,%al
jbe    80530e3 <_IO_stdin_used+0x3a17>
add    $0x8,%al
.byte 0x86
xchg   %eax,%ebp
add    $0x8,%al
pop    %es
add    %al,(%eax)
add    %ah,0x80531(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
adc    $0xaa010000,%eax
stos   %al,%es:(%edi)
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
pushl  (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x81000100
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
incl   (%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,0x1(%eax)
add    $0x408,%eax
add    %dl,%al
mov    $0x4,%dl
or     %al,0x4080501(%ebp)
add    %al,(%eax)
add    %dl,%al
mov    $0x4,%dl
or     %bl,0x1(%esi)
add    $0x408,%eax
add    %dl,(%eax)
mov    $0x4,%bl
or     %cl,(%edx)
add    %eax,0x808
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %dl,-0x4d(%eax)
add    $0x8,%al
adc    (%ecx),%eax
add    $0xf08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %dl,-0x4d(%eax)
add    $0x8,%al
and    (%ecx),%eax
add    $0xe08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
or     %al,(%eax)
add    %dl,-0x4d(%eax)
add    $0x8,%al
xor    (%ecx),%al
add    $0xe08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %dl,-0x4d(%eax)
add    $0x8,%al
inc    %ecx
add    %eax,0xb08
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %dl,-0x4d(%eax)
add    $0x8,%al
imul   $0x5,(%ecx),%eax
or     %al,(%eax,%eax,1)
add    %al,(%eax)
mov    0x4d0804b3,%al
add    %eax,0x808
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %dl,-0x52(%eax)
add    $0x8,%al
push   %esi
add    %eax,0xc08
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,%al
mov    $0x4,%bl
or     %ah,0x1(%ebx)
add    $0xc08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %ah,%al
mov    $0x4,%bl
or     %dh,0x1(%eax)
add    $0xc08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x7d0804ae(%eax)
add    %eax,0xc08
add    %al,(%ecx)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
jmp    *-0x75f7fb52(%eax)
add    %eax,0x408
add    %al,0x804a8(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
incl   (%eax)
hlt
add    %eax,(%eax)
jae    8053364 <_IO_stdin_used+0x3c98>
xor    %dh,(%ecx)
xor    (%ecx),%dh
xor    (%edx),%dh
xor    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
sub    %ah,(%ebx)
sub    %esp,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     80533c2 <_IO_stdin_used+0x3cf6>
jb     80533b4 <_IO_stdin_used+0x3ce8>
addr16 push $0x63282074
sub    %esp,(%eax)
xor    %edi,(%ecx)
cmp    %bh,(%ecx)
and    %dl,0x65(%eax,%ebp,2)
and    %dl,0x65(%edx)
outsb  %gs:(%si),(%dx)
je     80533d6 <_edata+0xc>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dl,0x6e(%ebp)
imul   $0x74697372,0x65(%esi),%esi
jns    8053396 <_IO_stdin_used+0x3cca>
outsl  %ds:(%esi),(%dx)
data16
and    %al,0x61(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x61696e72,0x6f(%esi),%esp
or     %cs:(%eax),%ah
inc    %ecx
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x69(%edx)
addr16 push $0x72207374
gs
jae    80533fa <stderr+0x1a>
jb     805340d <optind+0xd>
gs fs or %cs:%fs:%gs:(%eax),%al
or     $0x0,%al
add    %al,(%eax)
or     $0xff000000,%eax
(bad)
(bad)
jg     80533e1 <stderr+0x1>
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
jg     80533b5 <_IO_stdin_used+0x3ce9>
or     %al,(%eax)
add    %dl,(%eax)
daa
add    %al,(%eax)
call   7b0533c4 <_end+0x72fdd8d0>
xor    (%eax),%dh
xor    %esi,(%edx)
xor    %esi,(%edx)
xor    (%ecx),%dh
add    %al,(%eax)
jo     6b <_init-0x8048fcd>
outsb  %ds:(%esi),(%dx)
add    %al,%ss:(%bx,%si)
.byte 0x0
lea    -0x76(%ebp,%edx,1),%esp
