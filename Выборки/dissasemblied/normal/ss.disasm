das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %dh,(%ebx)
xlat   %ds:(%ebx)
sbb    $0xe8,%al
adc    %cl,0x2e677b20(%edi)
(bad)
in     $0xc9,%al
cmp    $0xb0877070,%eax
push   %ds
lods   %ds:(%esi),%al
add    (%eax),%eax
add    %al,(%eax)
pop    %esp
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x5c023d65(%eax)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0xf2381c8c,%eax
mov    (%esp,%ebp,4),%ebx
dec    %ebx
jecxz  804819c <setsockopt@plt-0xeb4>
addr16 push %ebp
popa
adc    %dh,(%edx)
(bad)
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
mov    $0x1,%bl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    %al,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popf
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %ax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fild   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cltd
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
daa
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   $0x2
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fild   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jmp    804842d <setsockopt@plt-0xc23>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%ebp)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
inc    %edx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%bl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edi
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ret
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,(%dx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ja     804868a <setsockopt@plt-0x9c6>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,$0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ds
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebx)
mov    $0x5,%dl
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
or     (%edx),%eax
add    %al,(%eax)
(bad)
mov    $0x5,%cl
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
or     (%eax),%eax
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
pop    %edx
add    $0x408,%eax
add    %dl,(%ecx)
add    %cl,(%edi)
add    %dh,%bh
add    %al,(%eax)
add    %ah,%ah
mov    $0x5,%cl
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
add    %al,%gs:(%eax)
add    %ah,%al
mov    $0x5,%cl
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
testb  $0x0,(%ecx)
add    %al,(%edx,%esi,4)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%edx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804887f <setsockopt@plt-0x7d1>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    804888d <setsockopt@plt-0x7c3>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8048829 <setsockopt@plt-0x827>
pop    %edi
pop    %edi
jae    80488a1 <setsockopt@plt-0x7af>
jo     8048892 <setsockopt@plt-0x7be>
jo     80488aa <setsockopt@plt-0x7a6>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    80488ae <setsockopt@plt-0x7a2>
push   $0x705f5f00
jb     80488ab <setsockopt@plt-0x7a5>
outsb  %ds:(%esi),(%dx)
je     80488ab <setsockopt@plt-0x7a5>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
imul   $0x74616d6e,0x66(%eax,%eax,1),%esi
arpl   %bp,0x0(%eax)
jb     80488be <setsockopt@plt-0x792>
popa
fs imul $0x65706f66,%fs:0x0(%edx),%esi
65
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     80488d7 <setsockopt@plt-0x779>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80488da <setsockopt@plt-0x776>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x65(%ebx)
je     80488eb <setsockopt@plt-0x765>
gs
jb     80488f1 <setsockopt@plt-0x75f>
outsb  %gs:(%esi),(%dx)
je     804887f <setsockopt@plt-0x7d1>
jae    80488f5 <setsockopt@plt-0x75b>
jb     80488f5 <setsockopt@plt-0x75b>
arpl   %bp,0x72(%eax)
add    %dh,0x65(%ebx)
je     80488ed <setsockopt@plt-0x763>
jne    80488f3 <setsockopt@plt-0x75d>
data16
gs
jb     8048891 <setsockopt@plt-0x7bf>
pop    %edi
pop    %edi
jae    8048909 <setsockopt@plt-0x747>
jb     80488fb <setsockopt@plt-0x755>
jne    8048909 <setsockopt@plt-0x747>
add    %dh,0x65(%eax)
jb     8048910 <setsockopt@plt-0x740>
outsl  %ds:(%esi),(%dx)
jb     80488a1 <setsockopt@plt-0x7af>
addr16
gs
je     8048915 <setsockopt@plt-0x73b>
jb     8048916 <setsockopt@plt-0x73a>
je     8048918 <setsockopt@plt-0x738>
bound  %edi,0x6e(%ecx)
jne    804891b <setsockopt@plt-0x735>
bound  %esp,0x72(%ebp)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    804891c <setsockopt@plt-0x734>
imul   $0x6c657466,%fs:0x0(%edx),%esi
insb   (%dx),%es:(%edi)
add    %ch,0x6e(%ecx)
gs
je     8048925 <setsockopt@plt-0x72b>
outsb  %ds:(%esi),(%dx)
je     8048938 <setsockopt@plt-0x718>
jo     80488cb <setsockopt@plt-0x785>
jae    8048941 <setsockopt@plt-0x70f>
jb     804893d <setsockopt@plt-0x713>
arpl   %si,0x79(%eax)
add    %dh,0x75(%eax)
je     804894a <setsockopt@plt-0x706>
add    %bl,0x5f(%edi)
jae    8048950 <setsockopt@plt-0x700>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x68637475,0x70(%eax,%eax,1),%ebp
popa
jb     80488f1 <setsockopt@plt-0x75f>
jb     8048958 <setsockopt@plt-0x6f8>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     80488ff <setsockopt@plt-0x751>
jae    8048975 <setsockopt@plt-0x6db>
imul   $0x65706f70,%fs:0x0(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8048982 <setsockopt@plt-0x6ce>
jo     804897f <setsockopt@plt-0x6d1>
add    %ch,0x6e(%ecx)
gs
je     8048976 <setsockopt@plt-0x6da>
jo     804898d <setsockopt@plt-0x6c3>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8048994 <setsockopt@plt-0x6bc>
outsl  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     804899b <setsockopt@plt-0x6b5>
outsl  %ds:(%esi),(%dx)
imul   $0x73,(%eax),%eax
je     804899f <setsockopt@plt-0x6b1>
je     804899e <setsockopt@plt-0x6b2>
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     80489aa <setsockopt@plt-0x6a6>
jns    8048938 <setsockopt@plt-0x718>
data16
addr16
gs
je     80489b0 <setsockopt@plt-0x6a0>
add    %dh,0x74(%ebx)
jb     80489ae <setsockopt@plt-0x6a2>
outsb  %gs:(%esi),(%dx)
add    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    80489b4 <setsockopt@plt-0x69c>
je     8048951 <setsockopt@plt-0x6ff>
jae    80489c7 <setsockopt@plt-0x689>
jb     80489c8 <setsockopt@plt-0x688>
je     80489c9 <setsockopt@plt-0x687>
add    %bl,0x5f(%edi)
gs
jb     80489cf <setsockopt@plt-0x681>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6e696200,0x6e(%edi),%ebp
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x73(%ecx)
arpl   %si,0x6d(%ecx,%ebp,2)
add    %bl,%gs:0x5f(%edi)
data16
jo     80489f4 <setsockopt@plt-0x65c>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80489f2 <setsockopt@plt-0x65e>
outsl  %ds:(%esi),(%dx)
jne    8048a05 <setsockopt@plt-0x64b>
add    %ah,0x65(%edi)
je     80489fe <setsockopt@plt-0x652>
outsl  %ds:(%esi),(%dx)
jae    8048a0d <setsockopt@plt-0x643>
bound  %edi,0x61(%ecx)
fs
fs
jb     80489a0 <setsockopt@plt-0x6b0>
jb     8048a07 <setsockopt@plt-0x649>
arpl   %si,0x0(%esi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048a17 <setsockopt@plt-0x639>
add    %dh,0x74(%ebx)
jb     8048a2b <setsockopt@plt-0x625>
outsl  %ds:(%esi),(%dx)
jne    8048a26 <setsockopt@plt-0x62a>
add    %dh,0x65(%ebx)
je     8048a32 <setsockopt@plt-0x61e>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     8048a39 <setsockopt@plt-0x617>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048a43 <setsockopt@plt-0x60d>
jb     8048a34 <setsockopt@plt-0x61c>
popa
je     80489d4 <setsockopt@plt-0x67c>
jae    8048a4a <setsockopt@plt-0x606>
jb     8048a3b <setsockopt@plt-0x615>
popa
jae    8048a40 <setsockopt@plt-0x610>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
imul   $0x65746567,%fs:0x0(%edx),%esi
outsb  %ds:(%esi),(%dx)
jbe    80489ee <setsockopt@plt-0x662>
jae    8048a63 <setsockopt@plt-0x5ed>
arpl   %sp,0x6e(%ecx)
data16
add    %dh,0x65(%edx)
arpl   %si,0x66(%esi)
jb     8048a6b <setsockopt@plt-0x5e5>
insl   (%dx),%es:(%edi)
add    %ch,0x70(%edi)
je     8048a63 <setsockopt@plt-0x5ed>
jb     8048a6b <setsockopt@plt-0x5e5>
add    %ah,0x65(%edi)
je     8048a7c <setsockopt@plt-0x5d4>
gs
jb     8048a82 <setsockopt@plt-0x5ce>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
fs
gs
jb     8048a8b <setsockopt@plt-0x5c5>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
pop    %edi
jae    8048a92 <setsockopt@plt-0x5be>
jo     8048a98 <setsockopt@plt-0x5b8>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x72,(%eax),%eax
gs
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x63736600,0x6b(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048ab2 <setsockopt@plt-0x59e>
jo     8048ab9 <setsockopt@plt-0x597>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ch,0x66(%bx,%di)
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
je     8048ac3 <setsockopt@plt-0x58d>
imul   $0x73007865,0x64(%esi),%ebp
outsb  %gs:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    8048ac8 <setsockopt@plt-0x588>
add    %dh,0x74(%ebx)
jb     8048ada <setsockopt@plt-0x576>
outsl  %ds:(%esi),(%dx)
jne    8048ad5 <setsockopt@plt-0x57b>
insb   (%dx),%es:(%edi)
add    %dh,0x63(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048ad6 <setsockopt@plt-0x57a>
add    %dh,0x65(%ebx)
je     8048ade <setsockopt@plt-0x572>
outsl  %ds:(%esi),(%dx)
jae    8048aed <setsockopt@plt-0x563>
outsb  %gs:(%esi),(%dx)
je     8048a7d <setsockopt@plt-0x5d3>
pop    %edi
pop    %edi
addr16
gs
je     8048ae7 <setsockopt@plt-0x569>
gs
insb   (%dx),%es:(%edi)
imul   $0x695f6669,0x0(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
fs
gs
js     8048b05 <setsockopt@plt-0x54b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x77(%esi)
jb     8048b04 <setsockopt@plt-0x54c>
je     8048b02 <setsockopt@plt-0x54e>
add    %ah,0x72(%esi)
gs
popa
add    %ah,%fs:0x65(%edi)
je     8048b1c <setsockopt@plt-0x534>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    8048ab1 <setsockopt@plt-0x59f>
pop    %edi
pop    %edi
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
data16
jb     8048b28 <setsockopt@plt-0x528>
popa
fs
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
je     8048b3a <setsockopt@plt-0x516>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
jb     8048b3b <setsockopt@plt-0x515>
push   $0x65670072
je     8048b52 <setsockopt@plt-0x4fe>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x65(%edi)
je     8048b53 <setsockopt@plt-0x4fd>
outsl  %ds:(%esi),(%dx)
jae    8048b62 <setsockopt@plt-0x4ee>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
xor    %gs:(%eax),%al
pop    %edi
pop    %edi
jae    8048b6e <setsockopt@plt-0x4e2>
jb     8048b5f <setsockopt@plt-0x4f1>
jo     8048b77 <setsockopt@plt-0x4d9>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
jae    8048b77 <setsockopt@plt-0x4d9>
jb     8048b72 <setsockopt@plt-0x4de>
outsb  %ds:(%esi),(%dx)
je     8048b72 <setsockopt@plt-0x4de>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x65(%edi)
je     8048b85 <setsockopt@plt-0x4cb>
jb     8048b86 <setsockopt@plt-0x4ca>
je     8048b88 <setsockopt@plt-0x4c8>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
jb     8048b87 <setsockopt@plt-0x4c9>
insl   (%dx),%es:(%edi)
jo     8048b27 <setsockopt@plt-0x529>
jb     8048b8e <setsockopt@plt-0x4c2>
arpl   %si,0x6d(%esi)
jae    8048b95 <setsockopt@plt-0x4bb>
add    %dh,0x74(%ebx)
jb     8048b98 <setsockopt@plt-0x4b8>
jb     8048ba7 <setsockopt@plt-0x4a9>
outsl  %ds:(%esi),(%dx)
jb     8048b38 <setsockopt@plt-0x518>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048bb8 <setsockopt@plt-0x498>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x72726566,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8048b51 <setsockopt@plt-0x4ff>
addr16
gs
je     8048bc8 <setsockopt@plt-0x488>
gs
jb     8048bce <setsockopt@plt-0x482>
bound  %edi,0x70(%ecx)
outsl  %ds:(%esi),(%dx)
jb     8048bd2 <setsockopt@plt-0x47e>
add    %dh,0x6e(%ebx)
jo     8048bd5 <setsockopt@plt-0x47b>
imul   $0x79730066,0x74(%esi),%ebp
jae    8048bcf <setsockopt@plt-0x481>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048bf2 <setsockopt@plt-0x45e>
popa
jb     8048bf5 <setsockopt@plt-0x45b>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    $0x2000200,%eax
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
push   %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edi)
imul   $0x70000,0xd(%ecx),%ebp
jl     8048ca5 <setsockopt@plt-0x3ab>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    8048cc4 <setsockopt@plt-0x38c>
imul   $0x60000,(%ecx),%ecx
xchg   %al,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x392,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x40000,%eax
pushf
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%ebx)
add    %ah,0x10000003(%esi)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
mov    $0x3,%dl
add    %al,(%eax)
add    %al,(%eax)
lock scas %es:(%edi),%eax
add    $0x5d0608,%eax
add    %dh,%ah
scas   %es:(%edi),%eax
add    $0x290608,%eax
add    %bh,%al
scas   %es:(%edi),%eax
add    $0x5c0608,%eax
add    %al,%al
mov    $0x5,%cl
or     %al,0x5d
mov    $0x5,%dl
or     %al,0xe000005c
mov    $0x5,%cl
or     %al,0xe4000060
mov    $0x5,%cl
or     %al,0x400005f
mov    $0x5,%dl
.byte 0x8
.byte 0x5
popa
or     $0xb0,%al
add    $0x10708,%eax
add    %dl,(%eax)
mov    $0x5,%al
or     %al,(%edi)
add    (%eax),%al
add    %dl,(%eax,%esi,4)
add    $0x30708,%eax
add    %bl,(%eax)
mov    $0x5,%al
or     %al,(%edi)
add    $0x0,%al
add    %bl,(%eax,%esi,4)
add    $0x50708,%eax
add    %ah,(%eax)
mov    $0x5,%al
or     %al,(%edi)
push   %es
add    %al,(%eax)
and    $0xb0,%al
add    $0x70708,%eax
add    %ch,(%eax)
mov    $0x5,%al
or     %al,(%edi)
or     %al,(%eax)
add    %ch,(%eax,%esi,4)
add    $0x90708,%eax
add    %dh,(%eax)
mov    $0x5,%al
or     %al,(%edi)
or     (%eax),%al
add    %dh,(%eax,%esi,4)
add    $0xb0708,%eax
add    %bh,(%eax)
mov    $0x5,%al
or     %al,(%edi)
or     $0x0,%al
add    %bh,(%eax,%esi,4)
add    $0xd0708,%eax
add    %al,-0x50(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%esi,4)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
mov    $0x5,%al
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x5(%eax,%esi,4)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x50(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%esi,4)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x50(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%esi,4)
or     %al,(%edi)
adc    $0xb0600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%esi,4)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x70805b0
sbb    %al,(%eax)
add    %ch,0x5(%eax,%esi,4)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x50(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%esi,4)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x50(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%esi,4)
or     %al,(%edi)
sbb    $0xb0800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%esi,4)
add    %al,(%eax)
mov    %dh,0x20070805(%eax)
add    %al,(%eax)
mov    %?,0x21070805(%eax)
add    %al,(%eax)
nop
mov    $0x5,%al
or     %al,(%edi)
and    (%eax),%al
add    %dl,0x23070805(%eax,%esi,4)
add    %al,(%eax)
cwtl
mov    $0x5,%al
or     %al,(%edi)
and    $0x0,%al
add    %bl,0x25070805(%eax,%esi,4)
add    %al,(%eax)
mov    0x70805b0,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
mov    $0x5,%al
or     %al,(%edi)
daa
add    %al,(%eax)
test   $0xb0,%al
add    $0x280708,%eax
add    %ch,0x29070805(%eax,%esi,4)
add    %al,(%eax)
mov    $0xb0,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%esi,4)
add    %al,(%eax)
mov    $0x70805b0,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%esi,4)
add    %al,(%eax)
(bad)
mov    $0x5,%al
or     %al,(%edi)
add    %al,%cs:(%eax)
les    0x2f070805(%eax),%esi
add    %al,(%eax)
enter  $0x5b0,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
mov    $0x5,%al
or     %al,(%edi)
xor    %eax,(%eax)
add    %dl,%al
mov    $0x5,%al
or     %al,(%edi)
xor    (%eax),%al
add    %dl,%ah
mov    $0x5,%al
or     %al,(%edi)
xor    (%eax),%eax
add    %bl,%al
mov    $0x5,%al
or     %al,(%edi)
xor    $0x0,%al
add    %bl,%ah
mov    $0x5,%al
or     %al,(%edi)
xor    $0xb0e00000,%eax
add    $0x360708,%eax
add    %ah,%ah
mov    $0x5,%al
or     %al,(%edi)
aaa
add    %al,(%eax)
call   f0c94a5 <optarg+0x706e2a1>
cmp    %al,(%eax)
add    %ch,%ah
mov    $0x5,%al
or     %al,(%edi)
cmp    %eax,(%eax)
add    %dh,%al
mov    $0x5,%al
or     %al,(%edi)
cmp    (%eax),%al
add    %dh,%ah
mov    $0x5,%al
or     %al,(%edi)
cmp    (%eax),%eax
add    %bh,%al
mov    $0x5,%al
or     %al,(%edi)
cmp    $0x0,%al
add    %bh,%ah
mov    $0x5,%al
or     %al,(%edi)
cmp    $0xb1000000,%eax
add    $0x3e0708,%eax
add    %al,(%ecx,%esi,4)
add    $0x3f0708,%eax
add    %cl,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
inc    %eax
add    %al,(%eax)
or     $0xb1,%al
add    $0x410708,%eax
add    %dl,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
inc    %edx
add    %al,(%eax)
adc    $0xb1,%al
add    $0x430708,%eax
add    %bl,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
inc    %esp
add    %al,(%eax)
sbb    $0xb1,%al
add    $0x450708,%eax
add    %ah,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
inc    %esi
add    %al,(%eax)
and    $0xb1,%al
add    $0x470708,%eax
add    %ch,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
dec    %eax
add    %al,(%eax)
sub    $0xb1,%al
add    $0x490708,%eax
add    %dh,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
dec    %edx
add    %al,(%eax)
xor    $0xb1,%al
add    $0x4b0708,%eax
add    %bh,(%eax)
mov    $0x5,%cl
or     %al,(%edi)
dec    %esp
add    %al,(%eax)
cmp    $0xb1,%al
add    $0x4d0708,%eax
add    %al,-0x4f(%eax)
add    $0x4e0708,%eax
add    %al,0x5(%ecx,%esi,4)
or     %al,(%edi)
dec    %edi
add    %al,(%eax)
dec    %eax
mov    $0x5,%cl
or     %al,(%edi)
push   %eax
add    %al,(%eax)
dec    %esp
mov    $0x5,%cl
or     %al,(%edi)
push   %ecx
add    %al,(%eax)
push   %eax
mov    $0x5,%cl
or     %al,(%edi)
push   %edx
add    %al,(%eax)
push   %esp
mov    $0x5,%cl
or     %al,(%edi)
push   %ebx
add    %al,(%eax)
pop    %eax
mov    $0x5,%cl
or     %al,(%edi)
push   %esp
add    %al,(%eax)
pop    %esp
mov    $0x5,%cl
or     %al,(%edi)
push   %ebp
add    %al,(%eax)
pusha
mov    $0x5,%cl
or     %al,(%edi)
push   %esi
add    %al,(%eax)
fs
mov    $0x5,%cl
or     %al,(%edi)
push   %edi
add    %al,(%eax)
push   $0x70805b1
pop    %eax
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    $0x5,%cl
or     %al,(%edi)
pop    %ecx
add    %al,(%eax)
jo     8048fb3 <setsockopt@plt-0x9d>
add    $0x5a0708,%eax
add    %dh,0x5(%ecx,%esi,4)
or     %al,(%edi)
pop    %ebx
push   %ebx
sub    $0x8,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x11fe7,%ebx
mov    -0xc(%ebx),%eax
test   %eax,%eax
je     804902e <setsockopt@plt-0x22>
call   80492d0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x805b004
jmp    *0x805b008
add    %al,(%eax)
jmp    *0x805b00c
push   $0x0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b010
push   $0x8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b014
push   $0x10
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b018
push   $0x18
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b01c
push   $0x20
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b020
push   $0x28
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b024
push   $0x30
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b028
push   $0x38
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b02c
push   $0x40
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b030
push   $0x48
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b034
push   $0x50
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b038
push   $0x58
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b03c
push   $0x60
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b040
push   $0x68
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b044
push   $0x70
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b048
push   $0x78
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b04c
push   $0x80
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b050
push   $0x88
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b054
push   $0x90
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b058
push   $0x98
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b05c
push   $0xa0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b060
push   $0xa8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b064
push   $0xb0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b068
push   $0xb8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b06c
push   $0xc0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b070
push   $0xc8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b074
push   $0xd0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b078
push   $0xd8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b07c
push   $0xe0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b080
push   $0xe8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b084
push   $0xf0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b088
push   $0xf8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b08c
push   $0x100
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b090
push   $0x108
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b094
push   $0x110
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b098
push   $0x118
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b09c
push   $0x120
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0a0
push   $0x128
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0a4
push   $0x130
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0a8
push   $0x138
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0ac
push   $0x140
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0b0
push   $0x148
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0b4
push   $0x150
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0b8
push   $0x158
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0bc
push   $0x160
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0c0
push   $0x168
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0c4
push   $0x170
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0c8
push   $0x178
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0cc
push   $0x180
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0d0
push   $0x188
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0d4
push   $0x190
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0d8
push   $0x198
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0dc
push   $0x1a0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0e0
push   $0x1a8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0e4
push   $0x1b0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0e8
push   $0x1b8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0ec
push   $0x1c0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0f0
push   $0x1c8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0f4
push   $0x1d0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0f8
push   $0x1d8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b0fc
push   $0x1e0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b100
push   $0x1e8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b104
push   $0x1f0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b108
push   $0x1f8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b10c
push   $0x200
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b110
push   $0x208
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b114
push   $0x210
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b118
push   $0x218
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b11c
push   $0x220
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b120
push   $0x228
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b124
push   $0x230
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b128
push   $0x238
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b12c
push   $0x240
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b130
push   $0x248
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b134
push   $0x250
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b138
push   $0x258
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b13c
push   $0x260
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b140
push   $0x268
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b144
push   $0x270
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b148
push   $0x278
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b14c
push   $0x280
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b150
push   $0x288
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b154
push   $0x290
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b158
push   $0x298
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b15c
push   $0x2a0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b160
push   $0x2a8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b164
push   $0x2b0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b168
push   $0x2b8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b16c
push   $0x2c0
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b170
push   $0x2c8
jmp    8049040 <setsockopt@plt-0x10>
jmp    *0x805b174
push   $0x2d0
jmp    8049040 <setsockopt@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x60,%esp
mov    0x805b198,%eax
movl   $0x0,0x805ebe4
00
movl   $0x0,0x805ebec
00
movl   $0x0,0x805ebf0
00
mov    %eax,0x805ebe8
movl   $0x0,0x3c(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x40(%esp)
movl   $0x1,0x48(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0xc(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x8056600,0xc(%esp)
movl   $0x8056fec,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   8049300 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8049ab6 <__sprintf_chk@plt+0x4c6>
sub    $0x30,%eax
cmp    $0x48,%eax
ja     8049963 <__sprintf_chk@plt+0x373>
nop
jmp    *0x80564d0(,%eax,4)
mov    0x805b204,%ebx
movl   $0x8056175,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    80496d9 <__sprintf_chk@plt+0xe9>
movl   $0x2,0x805b238
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0xa,0x805b238
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x805617a,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
je     80496cd <__sprintf_chk@plt+0xdd>
movl   $0x8055ec5,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    8049d87 <__sprintf_chk@plt+0x797>
movl   $0x11,0x805b238
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x44(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x1,0x805ebe4
movl   $0x0,0x48(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x805b23c
00
jmp    8049660 <__sprintf_chk@plt+0x70>
addl   $0x1,0x805b22c
call   804ab90 <__sprintf_chk@plt+0x15a0>
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x30,0x805ebe4
movl   $0x0,0x48(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x8,0x805ebe4
movl   $0x0,0x48(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x4,0x805ebe4
movl   $0x0,0x48(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
call   804bb10 <__sprintf_chk@plt+0x2520>
mov    0x805b204,%eax
mov    %eax,0x38(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
cmpl   $0x0,0x40(%esp)
je     8049a89 <__sprintf_chk@plt+0x499>
mov    0x805b204,%edx
mov    %edx,%ebx
nop
movl   $0x2c,0x4(%esp)
mov    %ebx,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%edx
je     80497d1 <__sprintf_chk@plt+0x1e1>
movb   $0x0,(%eax)
movzbl (%ebx),%eax
cmp    $0x61,%eax
mov    %eax,0x4c(%esp)
jne    8049968 <__sprintf_chk@plt+0x378>
cmpb   $0x6c,0x1(%ebx)
je     80499f0 <__sprintf_chk@plt+0x400>
movl   $0x8056175,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x34(%esp)
call   8049080 <strcmp@plt>
mov    0x34(%esp),%edx
test   %eax,%eax
je     8049978 <__sprintf_chk@plt+0x388>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80561a1,%edi
mov    %ebx,%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8049a2b <__sprintf_chk@plt+0x43b>
orl    $0x2,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
movl   $0x1,0x805b234
00
addl   $0x1,0x805b220
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x8056864,0x8(%esp)
movl   $0x8056202,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
cmpl   $0x0,0x3c(%esp)
jne    804a43d <__sprintf_chk@plt+0xe4d>
mov    0x805b204,%eax
cmpb   $0x2d,(%eax)
je     8049aa8 <__sprintf_chk@plt+0x4b8>
movl   $0x805606f,0x4(%esp)
mov    %eax,(%esp)
call   80493b0 <fopen@plt>
mov    %eax,0x3c(%esp)
cmpl   $0x0,0x3c(%esp)
jne    8049660 <__sprintf_chk@plt+0x70>
movl   $0x80561f0,(%esp)
call   8049200 <perror@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
movl   $0xfff,0x805ebe8
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x805b234
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x0,0x805b1a4
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x805b228
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x480,0x805ebe8
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x805b224
00
jmp    8049660 <__sprintf_chk@plt+0x70>
movl   $0x1,0x805b234
00
addl   $0x1,0x805b230
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x2,0x805ebe4
movl   $0x0,0x48(%esp)
jmp    8049660 <__sprintf_chk@plt+0x70>
mov    %ebx,0xc(%esp)
movl   $0x8056fc4,0x8(%esp)
mov    0x805b1c0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
call   804bb50 <__sprintf_chk@plt+0x2560>
mov    $0x8056175,%edi
mov    %ebx,%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8049990 <__sprintf_chk@plt+0x3a0>
orl    $0xf,0x805ebe4
test   %edx,%edx
lea    0x1(%edx),%ebx
jne    80497b8 <__sprintf_chk@plt+0x1c8>
jmp    8049660 <__sprintf_chk@plt+0x70>
nop
cmpl   $0x75,0x4c(%esp)
jne    8049810 <__sprintf_chk@plt+0x220>
cmpb   $0x64,0x1(%ebx)
nop
je     8049a13 <__sprintf_chk@plt+0x423>
movl   $0x80561a1,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     8049824 <__sprintf_chk@plt+0x234>
movl   $0x8056067,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
jne    8049cbd <__sprintf_chk@plt+0x6cd>
orl    $0x30,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x6c,0x2(%ebx)
jne    80497eb <__sprintf_chk@plt+0x1fb>
cmpb   $0x0,0x3(%ebx)
jne    80497eb <__sprintf_chk@plt+0x1fb>
movl   $0x1ff,0x805ebe4
00
jmp    804997f <__sprintf_chk@plt+0x38f>
cmpb   $0x70,0x2(%ebx)
jne    80499a2 <__sprintf_chk@plt+0x3b2>
cmpb   $0x0,0x3(%ebx)
jne    80499a2 <__sprintf_chk@plt+0x3b2>
orl    $0x4,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
cmpl   $0x74,0x4c(%esp)
je     8049a5f <__sprintf_chk@plt+0x46f>
cmpl   $0x72,0x4c(%esp)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
cmpb   $0x61,0x1(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
cmpb   $0x77,0x2(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
cmpb   $0x0,0x3(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
orl    $0x8,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
cmpb   $0x63,0x1(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
cmpb   $0x70,0x2(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
cmpb   $0x0,0x3(%ebx)
jne    80499c2 <__sprintf_chk@plt+0x3d2>
orl    $0x1,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
movl   $0x0,0x805ebe4
00
movl   $0x1,0x40(%esp)
movl   $0x0,0x48(%esp)
jmp    80497af <__sprintf_chk@plt+0x1bf>
mov    0x805b1e4,%eax
mov    %eax,0x3c(%esp)
jmp    804989b <__sprintf_chk@plt+0x2ab>
mov    0x805b1e0,%ebx
mov    0x8(%ebp),%eax
sub    %ebx,%eax
mov    %eax,0x4c(%esp)
call   804d520 <__sprintf_chk@plt+0x3f30>
cmpl   $0x0,0x44(%esp)
jne    8049e76 <__sprintf_chk@plt+0x886>
cmpl   $0x0,0x48(%esp)
je     8049ae6 <__sprintf_chk@plt+0x4f6>
mov    0x805b194,%eax
mov    %eax,0x805ebe4
cmpl   $0x0,0x805b238
jne    8049c7d <__sprintf_chk@plt+0x68d>
mov    0x805ebe4,%edx
test   $0xffffffcf,%edx
je     8049d6e <__sprintf_chk@plt+0x77e>
test   $0xffffff3f,%edx
jne    804a078 <__sprintf_chk@plt+0xa88>
movl   $0x11,0x805b238
00
mov    $0x11,%ecx
mov    $0xc0,%eax
cmpl   $0x0,0x48(%esp)
jne    8049d64 <__sprintf_chk@plt+0x774>
and    %eax,0x805ebe4
mov    0x805ebe4,%edx
mov    $0x1,%eax
shl    %cl,%eax
mov    %eax,0x805ebec
test   %edx,%edx
je     804a540 <__sprintf_chk@plt+0xf50>
cmpl   $0x0,0x805ebec
je     804a50f <__sprintf_chk@plt+0xf1f>
cmpl   $0x0,0x805b1a4
je     8049b78 <__sprintf_chk@plt+0x588>
cmpl   $0x0,0x805b23c
je     8049b78 <__sprintf_chk@plt+0x588>
and    $0x37,%dl
jne    804a0bb <__sprintf_chk@plt+0xacb>
cmpl   $0x0,0x3c(%esp)
jne    8049dd9 <__sprintf_chk@plt+0x7e9>
cmpl   $0x0,0x4c(%esp)
jle    8049e10 <__sprintf_chk@plt+0x820>
mov    0x4c(%esp),%eax
xor    %edx,%edx
mov    %edx,0x44(%esp)
sub    $0x1,%eax
mov    %eax,0x48(%esp)
mov    0xc(%ebp),%eax
lea    0x4(%eax,%ebx,4),%ebx
jmp    8049bf5 <__sprintf_chk@plt+0x605>
mov    0x48(%esp),%edi
test   %edi,%edi
je     804a324 <__sprintf_chk@plt+0xd34>
mov    0x44(%esp),%esi
test   %esi,%esi
je     8049dc8 <__sprintf_chk@plt+0x7d8>
mov    0x805ebe8,%esi
mov    (%ebx),%eax
call   804b9c0 <__sprintf_chk@plt+0x23d0>
or     %esi,%eax
mov    %eax,0x805ebe8
subl   $0x2,0x4c(%esp)
add    $0x8,%ebx
mov    0x4c(%esp),%eax
subl   $0x2,0x48(%esp)
test   %eax,%eax
jle    8049e10 <__sprintf_chk@plt+0x820>
movl   $0x1,0x44(%esp)
lea    -0x4(%ebx),%eax
mov    $0x6,%ecx
mov    %eax,0x40(%esp)
mov    -0x4(%ebx),%eax
mov    $0x805621d,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     8049ba8 <__sprintf_chk@plt+0x5b8>
mov    $0x8056223,%edi
mov    %eax,%esi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     8049c3f <__sprintf_chk@plt+0x64f>
mov    $0x805622b,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8049e93 <__sprintf_chk@plt+0x8a3>
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804a324 <__sprintf_chk@plt+0xd34>
mov    0x44(%esp),%edx
mov    0x805ebe8,%esi
test   %edx,%edx
jne    8049c68 <__sprintf_chk@plt+0x678>
movl   $0xfff,0x805ebe8
00
mov    $0xfff,%esi
mov    (%ebx),%eax
call   804b9c0 <__sprintf_chk@plt+0x23d0>
not    %eax
and    %esi,%eax
mov    %eax,0x805ebe8
jmp    8049bd4 <__sprintf_chk@plt+0x5e4>
mov    0x805b238,%ecx
mov    0x805ebe4,%eax
mov    %ecx,%edx
and    $0xfffffff7,%edx
cmp    $0x2,%edx
je     8049b25 <__sprintf_chk@plt+0x535>
cmp    $0x11,%ecx
je     8049dba <__sprintf_chk@plt+0x7ca>
cmp    $0x1,%ecx
je     804a0f6 <__sprintf_chk@plt+0xb06>
xor    %eax,%eax
cmp    $0x10,%ecx
jne    8049b25 <__sprintf_chk@plt+0x535>
mov    $0x100,%eax
jmp    8049b25 <__sprintf_chk@plt+0x535>
movl   $0x80561a6,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049380 <strcasecmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     8049dae <__sprintf_chk@plt+0x7be>
movl   $0x8056037,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     8049dae <__sprintf_chk@plt+0x7be>
movl   $0x80561b2,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049380 <strcasecmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     804a0ea <__sprintf_chk@plt+0xafa>
movl   $0x805603d,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     804a0ea <__sprintf_chk@plt+0xafa>
movl   $0x8056125,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
jne    804a385 <__sprintf_chk@plt+0xd95>
orl    $0xc0,0x805ebe4
00
jmp    804997f <__sprintf_chk@plt+0x38f>
mov    %eax,0x805ebe4
jmp    8049b36 <__sprintf_chk@plt+0x546>
movl   $0x1,0x805b238
00
mov    $0x1,%ecx
mov    $0x30,%eax
jmp    8049b25 <__sprintf_chk@plt+0x535>
movl   $0x8056067,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    804a094 <__sprintf_chk@plt+0xaa4>
movl   $0x1,0x805b238
00
jmp    8049660 <__sprintf_chk@plt+0x70>
orl    $0x20,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
mov    $0xc0,%eax
jmp    8049b25 <__sprintf_chk@plt+0x535>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x805ebe8
00
xor    %esi,%esi
jmp    8049bc6 <__sprintf_chk@plt+0x5d6>
cmpl   $0x0,0x4c(%esp)
jne    8049b83 <__sprintf_chk@plt+0x593>
mov    0x3c(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x805ebf0,(%esp)
mov    %eax,0xc(%esp)
call   80515f0 <__sprintf_chk@plt+0x8000>
test   %eax,%eax
jne    8049963 <__sprintf_chk@plt+0x373>
mov    0x805ebe8,%eax
test   %eax,%eax
je     804a4de <__sprintf_chk@plt+0xeee>
cmpl   $0x0,0x38(%esp)
je     8049ec4 <__sprintf_chk@plt+0x8d4>
testb  $0x1,0x805ebe4
mov    0x805b200,%ebx
je     804a46e <__sprintf_chk@plt+0xe7e>
mov    0x38(%esp),%eax
cmpb   $0x2d,(%eax)
je     8049e56 <__sprintf_chk@plt+0x866>
movl   $0x805628e,0x4(%esp)
mov    %eax,(%esp)
call   80493b0 <fopen@plt>
mov    %eax,%ebx
mov    $0x6,%edx
mov    %ebx,%eax
call   804e490 <__sprintf_chk@plt+0x4ea0>
mov    %ebx,(%esp)
call   80490a0 <fflush@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
call   804cde0 <__sprintf_chk@plt+0x37f0>
cmpl   $0x0,0x48(%esp)
je     8049ad5 <__sprintf_chk@plt+0x4e5>
cmpl   $0x0,0x4c(%esp)
jne    8049ad5 <__sprintf_chk@plt+0x4e5>
jmp    8049e6a <__sprintf_chk@plt+0x87a>
mov    0x3c(%esp),%eax
movl   $0x805ebf0,(%esp)
mov    %eax,0xc(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x4(%esp)
call   80515f0 <__sprintf_chk@plt+0x8000>
test   %eax,%eax
je     8049e10 <__sprintf_chk@plt+0x820>
jmp    8049963 <__sprintf_chk@plt+0x373>
mov    0x805ebe4,%edx
movl   $0x0,0x805ec04
00
lea    -0x1(%edx),%ecx
test   %edx,%ecx
je     8049ee5 <__sprintf_chk@plt+0x8f5>
movl   $0x5,0x805ec04
00
lea    -0x1(%eax),%edx
and    %eax,%edx
cmp    $0x1,%edx
sbb    %eax,%eax
not    %eax
and    $0xa,%eax
movl   $0x1,(%esp)
mov    %eax,0x805ebf4
movl   $0x50,0x805ec00
00
call   8049560 <isatty@plt>
test   %eax,%eax
jne    804a275 <__sprintf_chk@plt+0xc85>
mov    0x805ec04,%ecx
mov    0x805ebf4,%edx
mov    %ecx,%eax
not    %eax
mov    %edx,%ebx
add    0x805ec00,%eax
not    %ebx
lea    -0xe(%eax,%ebx,1),%eax
test   $0x1,%al
je     8049f4a <__sprintf_chk@plt+0x95a>
test   %ecx,%ecx
je     804a2b2 <__sprintf_chk@plt+0xcc2>
add    $0x1,%ecx
mov    %ecx,0x805ec04
mov    $0x2,%ebx
cltd
idiv   %ebx
cmpl   $0x1,0x805b1a4
lea    -0x1(%eax),%edx
sbb    %eax,%eax
and    $0xfffffffe,%eax
add    $0x7,%eax
lea    0xf(%eax),%ebx
cmp    %ebx,%edx
mov    %edx,0x805ebe0
mov    %eax,0x805ebf8
jg     8049f7f <__sprintf_chk@plt+0x98f>
lea    0x10(%eax),%edx
mov    %edx,0x805ebe0
not    %eax
add    0x805ebe0,%eax
test   %ecx,%ecx
mov    %eax,0x805ebfc
jne    804a250 <__sprintf_chk@plt+0xc60>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804a130 <__sprintf_chk@plt+0xb40>
movl   $0x805623c,0xc(%esp)
movl   $0x8056243,0x8(%esp)
movl   $0x805624a,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf8,%edx
mov    0x805ebfc,%eax
movl   $0x8056255,0x24(%esp)
movl   $0x805625a,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x18(%esp)
movl   $0x8056255,0x14(%esp)
movl   $0x8056267,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8056275,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b200,%eax
mov    %eax,(%esp)
call   80490a0 <fflush@plt>
mov    0x805ebe4,%edx
test   $0x1,%dh
jne    804a120 <__sprintf_chk@plt+0xb30>
test   $0xc0,%dl
jne    804a110 <__sprintf_chk@plt+0xb20>
test   $0x30,%dl
jne    804a100 <__sprintf_chk@plt+0xb10>
test   $0x8,%dl
jne    804a1e7 <__sprintf_chk@plt+0xbf7>
test   $0x4,%dl
xchg   %ax,%ax
jne    804a16a <__sprintf_chk@plt+0xb7a>
test   $0x1,%dl
jne    804a155 <__sprintf_chk@plt+0xb65>
and    $0x2,%dl
je     804a06e <__sprintf_chk@plt+0xa7e>
mov    $0x21,%eax
call   804eb70 <__sprintf_chk@plt+0x5580>
lea    -0xc(%ebp),%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   $0xfffffeff,%edx
jne    804a0c5 <__sprintf_chk@plt+0xad5>
movl   $0x10,0x805b238
00
mov    $0x10,%ecx
jmp    8049cb3 <__sprintf_chk@plt+0x6c3>
movl   $0x8055ec2,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    804a571 <__sprintf_chk@plt+0xf81>
movl   $0x10,0x805b238
00
jmp    8049660 <__sprintf_chk@plt+0x70>
call   804bb90 <__sprintf_chk@plt+0x25a0>
jmp    8049b78 <__sprintf_chk@plt+0x588>
cmpl   $0x0,0x48(%esp)
jne    804a0db <__sprintf_chk@plt+0xaeb>
movl   $0xffffffff,0x805ebec
ff
jmp    8049b48 <__sprintf_chk@plt+0x558>
mov    0x805b19c,%eax
mov    %eax,0x805ebec
jmp    8049b48 <__sprintf_chk@plt+0x558>
orl    $0x10,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
mov    $0x30,%eax
jmp    8049b25 <__sprintf_chk@plt+0x535>
call   804f3f0 <__sprintf_chk@plt+0x5e00>
mov    0x805ebe4,%edx
jmp    804a042 <__sprintf_chk@plt+0xa52>
call   804fa10 <__sprintf_chk@plt+0x6420>
mov    0x805ebe4,%edx
jmp    804a039 <__sprintf_chk@plt+0xa49>
call   804d330 <__sprintf_chk@plt+0x3d40>
mov    0x805ebe4,%edx
jmp    804a030 <__sprintf_chk@plt+0xa40>
movl   $0x8056236,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    8049fa1 <__sprintf_chk@plt+0x9b1>
mov    $0x6,%eax
call   804eb70 <__sprintf_chk@plt+0x5580>
mov    0x805ebe4,%edx
jmp    804a05f <__sprintf_chk@plt+0xa6f>
movl   $0x80562b4,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     804a40c <__sprintf_chk@plt+0xe1c>
mov    0x805ebec,%eax
movl   $0x80562c5,0x805c334
08
test   $0x4,%al
jne    804a347 <__sprintf_chk@plt+0xd57>
test   $0x4,%ah
mov    0x805ebe4,%edx
je     804a056 <__sprintf_chk@plt+0xa66>
mov    $0x80562c9,%edx
mov    $0x80562d2,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%ebx
je     804a33c <__sprintf_chk@plt+0xd4c>
mov    $0xa,%ecx
mov    $0x804ed40,%edx
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804a329 <__sprintf_chk@plt+0xd39>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebe4,%edx
jmp    804a056 <__sprintf_chk@plt+0xa66>
mov    0x805ebec,%eax
movl   $0x805628c,0x805c334
08
test   $0x4,%al
jne    804a2e6 <__sprintf_chk@plt+0xcf6>
test   $0x4,%ah
mov    0x805ebe4,%edx
je     804a04b <__sprintf_chk@plt+0xa5b>
mov    $0x805629d,%edx
mov    $0x80562a6,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%ebx
je     804a2db <__sprintf_chk@plt+0xceb>
mov    $0xa,%ecx
mov    $0x804ed40,%edx
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804a2c8 <__sprintf_chk@plt+0xcd8>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebe4,%edx
jmp    804a04b <__sprintf_chk@plt+0xa5b>
movl   $0x8056230,0xc(%esp)
mov    %ecx,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    8049f94 <__sprintf_chk@plt+0x9a4>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x5413,0x4(%esp)
movl   $0x1,(%esp)
call   80491f0 <ioctl@plt>
add    $0x1,%eax
je     8049f17 <__sprintf_chk@plt+0x927>
movzwl 0x5a(%esp),%eax
test   %ax,%ax
je     8049f17 <__sprintf_chk@plt+0x927>
mov    %eax,0x805ec00
jmp    8049f17 <__sprintf_chk@plt+0x927>
test   %edx,%edx
je     8049f4a <__sprintf_chk@plt+0x95a>
add    $0x1,%edx
mov    %edx,0x805ebf4
jmp    8049f4a <__sprintf_chk@plt+0x95a>
call   8049430 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    %edi,(%esi)
mov    0x805ebe4,%edx
jmp    804a04b <__sprintf_chk@plt+0xa5b>
mov    $0x8056288,%edx
mov    $0x8056290,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%ebx
je     804a49f <__sprintf_chk@plt+0xeaf>
mov    $0x2,%ecx
mov    $0x804ed40,%edx
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804a2c8 <__sprintf_chk@plt+0xcd8>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebec,%eax
jmp    804a1fe <__sprintf_chk@plt+0xc0e>
call   8054580 <__sprintf_chk@plt+0xaf90>
call   8049430 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    %edi,(%esi)
mov    0x805ebe4,%edx
jmp    804a056 <__sprintf_chk@plt+0xa66>
mov    $0x80562c1,%edx
mov    $0x80562b4,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%ebx
je     804a59a <__sprintf_chk@plt+0xfaa>
mov    $0x2,%ecx
mov    $0x804ed40,%edx
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804a329 <__sprintf_chk@plt+0xd39>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebec,%eax
jmp    804a195 <__sprintf_chk@plt+0xba5>
movl   $0x80561bd,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     804a3fd <__sprintf_chk@plt+0xe0d>
movl   $0x8056095,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     804a3fd <__sprintf_chk@plt+0xe0d>
movl   $0x80561c8,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
je     804a3f1 <__sprintf_chk@plt+0xe01>
movl   $0x805609b,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
jne    804a4af <__sprintf_chk@plt+0xebf>
orl    $0x40,0x805ebe4
jmp    804997f <__sprintf_chk@plt+0x38f>
orl    $0x80,0x805ebe4
00
jmp    804997f <__sprintf_chk@plt+0x38f>
movl   $0x8055b20,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
jne    804a17e <__sprintf_chk@plt+0xb8e>
mov    $0x11,%edx
call   804e490 <__sprintf_chk@plt+0x4ea0>
mov    0x805ebe4,%edx
test   %eax,%eax
jne    804a17e <__sprintf_chk@plt+0xb8e>
jmp    804a056 <__sprintf_chk@plt+0xa66>
mov    0x805b1c0,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80561d5,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
mov    0x805b1c0,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8057098,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
call   8049430 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %edi,(%esi)
jmp    804a2db <__sprintf_chk@plt+0xceb>
movl   $0x8055ec2,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x4c(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    8049942 <__sprintf_chk@plt+0x352>
orl    $0x100,0x805ebe4
00
mov    0x4c(%esp),%edx
jmp    804997f <__sprintf_chk@plt+0x38f>
mov    0x805b1c0,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8057068,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
mov    0x805b1c0,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805703c,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
mov    0x805b1c0,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805700c,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
movl   $0x8056180,0x4(%esp)
mov    %ebx,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
je     8049791 <__sprintf_chk@plt+0x1a1>
mov    %ebx,0xc(%esp)
movl   $0x8056185,0x8(%esp)
jmp    804994e <__sprintf_chk@plt+0x35e>
call   8049430 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %edi,(%esi)
jmp    804a33c <__sprintf_chk@plt+0xd4c>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8055a50
push   $0x80559e0
push   %ecx
push   %esi
push   $0x8049600
call   8049370 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x805b1bb,%eax
sub    $0x805b1b8,%eax
cmp    $0x6,%eax
ja     804a5f0 <__sprintf_chk@plt+0x1000>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804a5ef <__sprintf_chk@plt+0xfff>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x805b1b8,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x805b1b8,%eax
sub    $0x805b1b8,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804a629 <__sprintf_chk@plt+0x1039>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804a628 <__sprintf_chk@plt+0x1038>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x805b1b8,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x805b208
jne    804a66c <__sprintf_chk@plt+0x107c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804a5e0 <__sprintf_chk@plt+0xff0>
movb   $0x1,0x805b208
leave
repz ret
xchg   %ax,%ax
mov    0x805ad60,%eax
test   %eax,%eax
je     804a698 <__sprintf_chk@plt+0x10a8>
mov    $0x0,%eax
test   %eax,%eax
je     804a698 <__sprintf_chk@plt+0x10a8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x805ad60,(%esp)
call   *%eax
leave
jmp    804a610 <__sprintf_chk@plt+0x1020>
nop
jmp    804a610 <__sprintf_chk@plt+0x1020>
xchg   %ax,%ax
nop
push   %ebx
sub    $0x48,%esp
lea    0x1c(%esp),%ebx
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   8051e80 <__sprintf_chk@plt+0x8890>
mov    %ebx,(%esp)
call   8051b10 <__sprintf_chk@plt+0x8520>
mov    %ebx,(%esp)
call   8051be0 <__sprintf_chk@plt+0x85f0>
movl   $0x1,0x805c328
00
add    $0x48,%esp
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x23c,%esp
lea    0x12c(%esp),%ebp
lea    0x2c(%esp),%ebx
mov    %ebp,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8055aa8,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x1c(%esp)
mov    %gs:0x14,%esi
mov    %esi,0x22c(%esp)
xor    %esi,%esi
call   80494f0 <sscanf@plt>
mov    0x1c(%esp),%edx
cmp    $0x2,%eax
je     804a750 <__sprintf_chk@plt+0x1160>
mov    0x22c(%esp),%eax
xor    %gs:0x14,%eax
jne    804a926 <__sprintf_chk@plt+0x1336>
add    $0x23c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8055ab5,%edi
mov    $0x9,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a843 <__sprintf_chk@plt+0x1253>
mov    $0x8055abe,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a840 <__sprintf_chk@plt+0x1250>
mov    $0x8055ac3,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a880 <__sprintf_chk@plt+0x1290>
mov    $0x8055ac9,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a8a0 <__sprintf_chk@plt+0x12b0>
mov    $0x8055ace,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a8c0 <__sprintf_chk@plt+0x12d0>
mov    $0x8055ad4,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a860 <__sprintf_chk@plt+0x1270>
mov    $0x8055ada,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a8e0 <__sprintf_chk@plt+0x12f0>
mov    $0x8055ae0,%edi
mov    $0x7,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a903 <__sprintf_chk@plt+0x1313>
mov    $0x8055ae7,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804a72a <__sprintf_chk@plt+0x113a>
lea    0x4(%edx),%eax
mov    %eax,0x18(%esp)
lea    0x8(%edx),%eax
mov    %eax,0x14(%esp)
lea    0x10(%edx),%eax
mov    %eax,0x10(%esp)
lea    0xc(%edx),%eax
add    $0x14,%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
movl   $0x8055aec,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x18,%edx
mov    %edx,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x28,%edx
mov    %edx,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%edx
mov    %edx,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%edx
mov    %edx,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
add    $0x30,%edx
mov    %edx,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x24(%edx),%eax
add    $0x20,%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
movl   $0x8055afb,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
lea    0x38(%edx),%eax
add    $0x34,%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
movl   $0x8055afb,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
jmp    804a72a <__sprintf_chk@plt+0x113a>
call   8049190 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x20,%esp
test   %eax,%eax
js     804aab0 <__sprintf_chk@plt+0x14c0>
mov    $0x10624dd3,%ecx
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
movb   $0x0,0x805b240
mov    %edx,%ecx
mov    $0x88888889,%edx
sar    $0x6,%ecx
sub    %eax,%ecx
mov    %ecx,%eax
mov    %ecx,%edi
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
lea    (%edx,%ecx,1),%ebx
sar    $0x5,%ebx
sub    %eax,%ebx
imul   $0x3c,%ebx,%eax
sub    %eax,%edi
test   %ebx,%ebx
jne    804aa70 <__sprintf_chk@plt+0x1480>
imul   $0x3e8,%ecx,%ecx
sub    %ecx,%esi
test   %edi,%edi
je     804aa00 <__sprintf_chk@plt+0x1410>
cmp    $0x9,%edi
jg     804aac8 <__sprintf_chk@plt+0x14d8>
mov    $0x8055b06,%ebx
test   %esi,%esi
mov    $0x80577aa,%eax
cmove  %eax,%ebx
mov    $0x805b240,%eax
mov    (%eax),%ecx
add    $0x4,%eax
lea    -0x1010101(%ecx),%edx
not    %ecx
and    %ecx,%edx
and    $0x80808080,%edx
je     804a9a8 <__sprintf_chk@plt+0x13b8>
mov    %edx,%ecx
shr    $0x10,%ecx
test   $0x8080,%edx
cmove  %ecx,%edx
lea    0x2(%eax),%ecx
cmove  %ecx,%eax
add    %dl,%dl
sbb    $0x3,%eax
mov    %ebx,0x14(%esp)
mov    %edi,0x10(%esp)
movl   $0x8055b0e,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80495f0 <__sprintf_chk@plt>
test   %esi,%esi
je     804aa5d <__sprintf_chk@plt+0x146d>
mov    $0x805b240,%eax
mov    (%eax),%ecx
add    $0x4,%eax
lea    -0x1010101(%ecx),%edx
not    %ecx
and    %ecx,%edx
and    $0x80808080,%edx
je     804aa09 <__sprintf_chk@plt+0x1419>
mov    %edx,%ecx
shr    $0x10,%ecx
test   $0x8080,%edx
cmove  %ecx,%edx
lea    0x2(%eax),%ecx
cmove  %ecx,%eax
add    %dl,%dl
sbb    $0x3,%eax
mov    %esi,0x10(%esp)
movl   $0x8055b13,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80495f0 <__sprintf_chk@plt>
add    $0x20,%esp
mov    $0x805b240,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x14(%esp)
movl   $0x8055b08,0x10(%esp)
movl   $0x40,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x30,0x4(%esp)
movl   $0x805b240,(%esp)
call   8049060 <__snprintf_chk@plt>
cmp    $0x9,%ebx
jg     804aa5d <__sprintf_chk@plt+0x146d>
xor    %esi,%esi
jmp    804a987 <__sprintf_chk@plt+0x1397>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x805b240
add    $0x20,%esp
mov    $0x805b240,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %esi,%esi
mov    $0x80577aa,%ebx
jmp    804a9a3 <__sprintf_chk@plt+0x13b3>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
mov    %edx,%ebx
sub    $0xb8,%esp
mov    %eax,(%esp)
mov    %gs:0x14,%ecx
mov    %ecx,0xac(%esp)
xor    %ecx,%ecx
call   8049270 <getenv@plt>
test   %eax,%eax
je     804ab30 <__sprintf_chk@plt+0x1540>
movl   $0x805606f,0x4(%esp)
mov    %eax,(%esp)
call   80493b0 <fopen@plt>
mov    0xac(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804ab7e <__sprintf_chk@plt+0x158e>
add    $0xb8,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x8055b20,(%esp)
call   8049270 <getenv@plt>
mov    $0x8055b1a,%edx
mov    %ebx,0x18(%esp)
lea    0x2c(%esp),%ebx
movl   $0x8055b2a,0x10(%esp)
movl   $0x80,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x7f,0x4(%esp)
test   %eax,%eax
cmove  %edx,%eax
mov    %eax,0x14(%esp)
mov    %ebx,(%esp)
call   8049060 <__snprintf_chk@plt>
mov    %ebx,%eax
jmp    804ab05 <__sprintf_chk@plt+0x1515>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8bc,%esp
movl   $0x8055b20,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8ac(%esp)
xor    %eax,%eax
call   8049270 <getenv@plt>
movl   $0x400,0x8(%esp)
test   %eax,%eax
mov    %eax,%ecx
mov    $0x8055b30,%eax
cmovne %ecx,%eax
mov    %eax,0x34(%esp)
mov    %eax,0x4(%esp)
lea    0xac(%esp),%eax
mov    %eax,(%esp)
call   8049360 <__stpcpy_chk@plt>
cmpb   $0x0,0xac(%esp)
je     804ac07 <__sprintf_chk@plt+0x1617>
lea    0x8b0(%esp),%ecx
lea    (%ecx,%eax,1),%edx
lea    0xac(%esp),%ecx
not    %ecx
cmpb   $0x2f,-0x804(%ecx,%edx,1)
je     804ac0f <__sprintf_chk@plt+0x161f>
mov    $0x2f,%edx
mov    %dx,(%eax)
lea    0xac(%esp),%eax
mov    %eax,%ecx
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     804ac18 <__sprintf_chk@plt+0x1628>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmovne %ecx,%edx
add    %al,%al
lea    0xac(%esp),%eax
mov    %edx,0x2c(%esp)
mov    %eax,(%esp)
sbbl   $0x3,0x2c(%esp)
sub    %eax,0x2c(%esp)
call   80495d0 <opendir@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     804af04 <__sprintf_chk@plt+0x1914>
lea    0x4f(%esp),%ebp
nop
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   80494c0 <readdir@plt>
test   %eax,%eax
je     804aef8 <__sprintf_chk@plt+0x1908>
add    $0xb,%eax
lea    0x50(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x8055b37,0x4(%esp)
mov    %eax,(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x1,%eax
jne    804ac70 <__sprintf_chk@plt+0x1680>
mov    0x50(%esp),%eax
lea    0xac(%esp),%ebx
movl   $0x8055b3c,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0xac(%esp),%eax
add    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80495f0 <__sprintf_chk@plt>
mov    (%ebx),%edx
add    $0x4,%ebx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     804ace2 <__sprintf_chk@plt+0x16f2>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ebx),%edx
cmove  %edx,%ebx
add    %al,%al
lea    0xac(%esp),%eax
sbb    $0x3,%ebx
mov    %eax,(%esp)
sub    %eax,%ebx
call   80495d0 <opendir@plt>
test   %eax,%eax
mov    %eax,0x24(%esp)
je     804ac70 <__sprintf_chk@plt+0x1680>
lea    0xac(%esp),%eax
add    %ebx,%eax
movb   $0x0,0x5c(%esp)
mov    %eax,0x30(%esp)
nop
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   80494c0 <readdir@plt>
test   %eax,%eax
je     804aed8 <__sprintf_chk@plt+0x18e8>
add    $0xb,%eax
lea    0x58(%esp),%edi
mov    %ebp,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x8055b37,0x4(%esp)
mov    %eax,(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x1,%eax
jne    804ad40 <__sprintf_chk@plt+0x1750>
mov    0x58(%esp),%eax
lea    0x6c(%esp),%ebx
movl   $0x8055b91,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80495f0 <__sprintf_chk@plt>
lea    0xac(%esp),%eax
movl   $0x3f,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491b0 <readlink@plt>
cmp    $0xffffffff,%eax
je     804ad40 <__sprintf_chk@plt+0x1750>
movb   $0x0,0x6c(%esp,%eax,1)
mov    $0x8055b43,%edi
mov    $0x8,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804ad40 <__sprintf_chk@plt+0x1750>
lea    0x54(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%edi
movl   $0x8055b4c,0x4(%esp)
mov    %ebx,(%esp)
call   80494f0 <sscanf@plt>
cmpb   $0x0,0x5c(%esp)
je     804af23 <__sprintf_chk@plt+0x1933>
mov    0x58(%esp),%eax
mov    %edi,%ebx
mov    0x50(%esp),%edx
mov    0x54(%esp),%esi
mov    %eax,0x38(%esp)
mov    (%ebx),%ecx
add    $0x4,%ebx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     804ae1e <__sprintf_chk@plt+0x182e>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%ebx),%ecx
cmove  %ecx,%ebx
add    %al,%al
sbb    $0x3,%ebx
sub    %edi,%ebx
lea    0x11(%ebx),%eax
mov    %eax,(%esp)
mov    %edx,0x3c(%esp)
call   8049290 <malloc@plt>
mov    0x3c(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
je     804af9d <__sprintf_chk@plt+0x19ad>
mov    %esi,0x4(%eax)
add    $0x1,%ebx
mov    %edx,0x8(%eax)
movl   $0x0,(%eax)
mov    0x38(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,0xc(%ecx)
lea    0x10(%ecx),%eax
mov    %ebx,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
mov    %esi,%eax
mov    %esi,%edx
shr    $0x10,%edx
mov    0x38(%esp),%ecx
shr    $0x18,%eax
xor    %edx,%eax
xor    %esi,%eax
shr    $0x8,%esi
xor    %esi,%eax
movzbl %al,%eax
mov    0x805ec20(,%eax,4),%edx
mov    %ecx,0x805ec20(,%eax,4)
mov    0x24(%esp),%eax
mov    %edx,(%ecx)
mov    %eax,(%esp)
call   80494c0 <readdir@plt>
test   %eax,%eax
jne    804ad54 <__sprintf_chk@plt+0x1764>
xchg   %ax,%ax
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   80495b0 <closedir@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   80494c0 <readdir@plt>
test   %eax,%eax
jne    804ac84 <__sprintf_chk@plt+0x1694>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   80495b0 <closedir@plt>
mov    0x8ac(%esp),%eax
xor    %gs:0x14,%eax
jne    804afa5 <__sprintf_chk@plt+0x19b5>
add    $0x8bc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x50(%esp),%eax
lea    0x4ac(%esp),%ebx
mov    %ebx,(%esp)
movl   $0x8055b58,0x10(%esp)
movl   $0x400,0xc(%esp)
mov    %eax,0x18(%esp)
mov    0x34(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0x14(%esp)
call   8049060 <__snprintf_chk@plt>
mov    %ebx,(%esp)
movl   $0x805606f,0x4(%esp)
call   80493b0 <fopen@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804ae0c <__sprintf_chk@plt+0x181c>
mov    %edi,0x8(%esp)
movl   $0x8055b63,0x4(%esp)
mov    %eax,(%esp)
call   8049340 <fscanf@plt>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
jmp    804ae0c <__sprintf_chk@plt+0x181c>
lea    0x0(%esi),%esi
call   8049570 <abort@plt>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    (%eax),%ebx
mov    %edx,0xc(%esp)
cmp    $0x9,%ebx
ja     804b3d0 <__sprintf_chk@plt+0x1de0>
jmp    *0x8056480(,%ebx,4)
nop
mov    0x8(%eax),%esi
movl   $0x8,(%esp)
call   8049290 <malloc@plt>
mov    0xc(%esp),%edi
test   %eax,%eax
mov    %eax,(%edi)
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    $0xc,%edx
movb   $0x3,(%eax)
movb   $0x8,0x1(%eax)
mov    %dx,0x2(%eax)
mov    0x28(%esi),%edx
movb   $0x0,0x4(%eax)
movb   $0x0,0x5(%eax)
mov    %dx,0x6(%eax)
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x4,(%esp)
call   8049290 <malloc@plt>
mov    0xc(%esp),%edi
test   %eax,%eax
mov    %eax,(%edi)
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    $0x8,%ebp
mov    $0x4,%ebx
movb   $0x6,(%eax)
movb   $0x4,0x1(%eax)
mov    %bp,0x2(%eax)
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%esi
cmp    $0x1,%ebx
sbb    %edi,%edi
not    %edi
add    $0x8,%edi
test   %esi,%esi
je     804b3d5 <__sprintf_chk@plt+0x1de5>
movzbl (%esi),%ecx
mov    %esi,%eax
xor    %edx,%edx
jmp    804b07b <__sprintf_chk@plt+0x1a8b>
xchg   %ax,%ax
lea    0x4(%ebp),%edx
mov    0x2c(%eax),%eax
lea    0x1c(%edx),%ebp
add    $0x10,%edx
cmp    $0xa,%cl
cmovne %edx,%ebp
test   %eax,%eax
jne    804b078 <__sprintf_chk@plt+0x1a88>
mov    %ebp,%eax
mov    %eax,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    0xc(%esp),%eax
test   %esi,%esi
mov    %ebx,(%eax)
je     804b3de <__sprintf_chk@plt+0x1dee>
mov    %edi,%eax
mov    %al,0x17(%esp)
lea    0x8(%esi),%eax
mov    %ebp,0x1c(%esp)
mov    %esi,%ebp
mov    %eax,0x18(%esp)
jmp    804b0ea <__sprintf_chk@plt+0x1afa>
lea    0x0(%esi),%esi
mov    (%eax),%eax
movb   $0x1,(%ebx)
movb   $0x4,0x1(%ebx)
mov    0x2c(%ebp),%ebp
sub    %ebx,%eax
add    $0x4,%ebx
add    0x1c(%esp),%ax
mov    %ax,-0x2(%ebx)
test   %ebp,%ebp
je     804b3e5 <__sprintf_chk@plt+0x1df5>
cmpb   $0xa,(%esi)
mov    $0x14,%eax
mov    $0x20,%ecx
mov    $0x10,%edx
mov    $0x1c,%edi
cmovne %eax,%ecx
mov    $0x1c,%eax
cmovne %edx,%eax
mov    $0x10,%edx
mov    %cx,0x10(%esp)
mov    $0x4,%ecx
cmovne %edx,%edi
mov    %al,0x1(%ebx)
cmovne %ecx,%edx
movzwl 0x10(%esp),%eax
movzbl 0x17(%esp),%ecx
mov    %ax,0x2(%ebx)
mov    %cl,(%ebx)
movzbl (%esi),%eax
mov    0x18(%esp),%ecx
mov    %al,0x4(%ebx)
mov    0x28(%esi),%eax
mov    %eax,0x8(%ebx)
movzwl 0x2(%esi),%eax
mov    %al,0x5(%ebx)
lea    0xc(%ebx),%eax
add    %edi,%ebx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
mov    0x2c(%ebp),%edi
mov    0xc(%esp),%eax
test   %edi,%edi
jne    804b0c8 <__sprintf_chk@plt+0x1ad8>
sub    (%eax),%ebx
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%eax
lea    0x34(%esp),%edx
call   804afb0 <__sprintf_chk@plt+0x19c0>
lea    0x38(%esp),%edx
mov    %eax,%esi
mov    0x4(%edi),%eax
call   804afb0 <__sprintf_chk@plt+0x19c0>
lea    0x4(%esi,%eax,1),%ebx
mov    %eax,%edi
mov    %ebx,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    0x34(%esp),%edx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
mov    %edx,0x10(%esp)
call   80490d0 <memcpy@plt>
mov    0x38(%esp),%ecx
lea    0x4(%ebp,%esi,1),%eax
mov    %edi,0x8(%esp)
add    %ebp,%esi
add    $0x4,%edi
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    0x10(%esp),%edx
mov    %edx,(%esp)
call   80490b0 <free@plt>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <free@plt>
movb   $0x1,(%esi)
movb   $0x4,0x1(%esi)
mov    %di,0x2(%esi)
mov    0xc(%esp),%eax
mov    %ebp,(%eax)
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x8(%eax),%eax
lea    0x2c(%esp),%edx
call   804afb0 <__sprintf_chk@plt+0x19c0>
lea    0x30(%esp),%edx
mov    %eax,%esi
mov    0x4(%edi),%eax
call   804afb0 <__sprintf_chk@plt+0x19c0>
lea    (%esi,%eax,1),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    0x2c(%esp),%edi
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %edi,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    0x10(%esp),%ecx
lea    0x0(%ebp,%esi,1),%eax
mov    0x30(%esp),%edx
mov    %eax,(%esp)
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    %edi,(%esp)
call   80490b0 <free@plt>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <free@plt>
test   %esi,%esi
jle    804b3c8 <__sprintf_chk@plt+0x1dd8>
mov    %ebp,%edx
jmp    804b2b8 <__sprintf_chk@plt+0x1cc8>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x1(%edx),%eax
sub    %eax,%esi
add    %eax,%edx
test   %esi,%esi
jle    804b3c8 <__sprintf_chk@plt+0x1dd8>
movzwl 0x2(%edx),%eax
lea    0x4(%esi),%ecx
movzwl %ax,%edi
cmp    %ecx,%edi
jne    804b2a8 <__sprintf_chk@plt+0x1cb8>
add    0x10(%esp),%ax
mov    %ax,0x2(%edx)
jmp    804b2a8 <__sprintf_chk@plt+0x1cb8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%eax
lea    0x3c(%esp),%edx
call   804afb0 <__sprintf_chk@plt+0x19c0>
lea    0x4(%eax),%ebx
mov    %eax,%edi
mov    %ebx,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804b3d0 <__sprintf_chk@plt+0x1de0>
mov    0x3c(%esp),%ebp
mov    %edi,0x8(%esp)
add    %esi,%edi
mov    %eax,(%esp)
mov    %ebp,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    %ebp,(%esp)
call   80490b0 <free@plt>
mov    $0x8,%eax
mov    %ax,0x2(%edi)
mov    0xc(%esp),%eax
movb   $0x1,(%edi)
movb   $0x4,0x1(%edi)
mov    %esi,(%eax)
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%ebx
movl   $0x8,(%esp)
call   8049290 <malloc@plt>
mov    0xc(%esp),%edi
test   %eax,%eax
mov    %eax,(%edi)
je     804b3d0 <__sprintf_chk@plt+0x1de0>
movb   $0x4,(%eax)
movb   $0x8,0x1(%eax)
mov    0x28(%ebx),%edx
mov    $0xc,%ecx
mov    %cx,0x2(%eax)
mov    $0x8,%ebx
movb   $0x0,0x4(%eax)
movb   $0x0,0x5(%eax)
mov    %dx,0x6(%eax)
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8(%eax),%ebx
movl   $0x8,(%esp)
call   8049290 <malloc@plt>
mov    0xc(%esp),%edi
test   %eax,%eax
mov    %eax,(%edi)
je     804b3d0 <__sprintf_chk@plt+0x1de0>
movb   $0x5,(%eax)
jmp    804b35c <__sprintf_chk@plt+0x1d6c>
xchg   %ax,%ax
mov    0x8(%eax),%ebx
movl   $0x8,(%esp)
call   8049290 <malloc@plt>
mov    0xc(%esp),%edi
test   %eax,%eax
mov    %eax,(%edi)
je     804b3d0 <__sprintf_chk@plt+0x1de0>
movb   $0x2,(%eax)
jmp    804b35c <__sprintf_chk@plt+0x1d6c>
xchg   %ax,%ax
test   %esi,%esi
je     804b20a <__sprintf_chk@plt+0x1c1a>
call   8049570 <abort@plt>
xor    %eax,%eax
xor    %ebp,%ebp
jmp    804b090 <__sprintf_chk@plt+0x1aa0>
xor    %ebx,%ebx
jmp    804b00c <__sprintf_chk@plt+0x1a1c>
mov    0xc(%esp),%eax
sub    (%eax),%ebx
jmp    804b171 <__sprintf_chk@plt+0x1b81>
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
test   %eax,%eax
jne    804b402 <__sprintf_chk@plt+0x1e12>
jmp    804b41f <__sprintf_chk@plt+0x1e2f>
lea    0x0(%esi),%esi
mov    %esi,%ebx
mov    0x1c(%ebx),%eax
mov    (%ebx),%esi
test   %eax,%eax
je     804b413 <__sprintf_chk@plt+0x1e23>
mov    %eax,(%esp)
call   80490b0 <free@plt>
mov    %ebx,(%esp)
call   80490b0 <free@plt>
test   %esi,%esi
jne    804b400 <__sprintf_chk@plt+0x1e10>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
lea    (%eax,%edx,4),%esi
sub    $0x34,%esp
mov    (%esi),%ebx
test   %ebx,%ebx
je     804b49c <__sprintf_chk@plt+0x1eac>
mov    0x1c(%ebx),%eax
mov    %eax,0x20(%esp)
mov    0x18(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    0x14(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x10(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0xc(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
movl   $0x805686c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    (%esi),%eax
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    $0x1f,%eax
ja     804b4a8 <__sprintf_chk@plt+0x1eb8>
movl   $0x29,(%esp)
call   8049420 <putchar@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x20(%ebx),%eax
movl   $0x8055b6f,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804b490 <__sprintf_chk@plt+0x1ea0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x43c,%esp
movzbl (%eax),%edx
mov    %gs:0x14,%edi
mov    %edi,0x42c(%esp)
xor    %edi,%edi
mov    0x805ebfc,%esi
cmp    $0x2,%dl
je     804b620 <__sprintf_chk@plt+0x2030>
lea    0x2c(%esp),%ecx
add    $0x8,%eax
mov    %ecx,0xc(%esp)
mov    %edx,(%esp)
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x10,0x4(%esp)
call   8054b20 <__sprintf_chk@plt+0xb530>
mov    %eax,(%esp)
mov    %eax,%edi
call   8049350 <strlen@plt>
mov    0x805ebfc,%esi
cmp    %esi,%eax
jle    804b549 <__sprintf_chk@plt+0x1f59>
sub    %esi,%eax
lea    0x6(%eax),%edx
add    $0x3,%eax
cmovs  %edx,%eax
and    $0xfffffffc,%eax
add    %eax,%esi
test   %ebx,%ebx
je     804b641 <__sprintf_chk@plt+0x2051>
mov    0x805b1a4,%edx
test   %edx,%edx
je     804b5a8 <__sprintf_chk@plt+0x1fb8>
mov    0x805c334,%edx
cmp    $0x805628c,%edx
je     804b850 <__sprintf_chk@plt+0x2260>
mov    %edx,%eax
shr    $0x2,%eax
xor    %ebx,%eax
movzbl %al,%ebp
mov    %ebp,%ecx
shl    $0x4,%ecx
add    $0x805b2a0,%ecx
mov    %ecx,%eax
jmp    804b592 <__sprintf_chk@plt+0x1fa2>
xchg   %ax,%ax
mov    (%eax),%eax
test   %eax,%eax
je     804b660 <__sprintf_chk@plt+0x2070>
cmp    0x4(%eax),%ebx
jne    804b588 <__sprintf_chk@plt+0x1f98>
cmp    0xc(%eax),%edx
jne    804b588 <__sprintf_chk@plt+0x1f98>
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804b5d5 <__sprintf_chk@plt+0x1fe5>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x10(%esp)
movl   $0x8056107,0xc(%esp)
movl   $0x80,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805c2a0,(%esp)
call   80495f0 <__sprintf_chk@plt>
mov    $0x805c2a0,%eax
mov    %eax,0x14(%esp)
mov    0x805ebf8,%eax
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x8055b94,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x42c(%esp),%eax
xor    %gs:0x14,%eax
jne    804b86d <__sprintf_chk@plt+0x227d>
add    $0x43c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x8(%eax),%ecx
test   %ecx,%ecx
jne    804b800 <__sprintf_chk@plt+0x2210>
test   %ebx,%ebx
movb   $0x2a,0x2c(%esp)
lea    0x2c(%esp),%edi
movb   $0x0,0x2d(%esp)
jne    804b551 <__sprintf_chk@plt+0x1f61>
movb   $0x2a,0x805c2a0
mov    $0x805c2a0,%eax
movb   $0x0,0x805c2a1
jmp    804b5d5 <__sprintf_chk@plt+0x1fe5>
lea    0x0(%esi,%eiz,1),%esi
mov    0x805f020,%eax
test   %eax,%eax
jne    804b676 <__sprintf_chk@plt+0x2086>
jmp    804b688 <__sprintf_chk@plt+0x2098>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%eax
test   %eax,%eax
je     804b688 <__sprintf_chk@plt+0x2098>
cmp    0x4(%eax),%ebx
jne    804b670 <__sprintf_chk@plt+0x2080>
cmp    0xc(%eax),%edx
jne    804b670 <__sprintf_chk@plt+0x2080>
mov    0x8(%eax),%edx
jmp    804b706 <__sprintf_chk@plt+0x2116>
mov    0x805c330,%eax
test   %eax,%eax
je     804b770 <__sprintf_chk@plt+0x2180>
cmp    %eax,%ebx
jl     804b6d0 <__sprintf_chk@plt+0x20e0>
cmp    0x805c32c,%ebx
jg     804b6d0 <__sprintf_chk@plt+0x20e0>
mov    0x8(%ecx),%eax
test   %eax,%eax
je     804b6b8 <__sprintf_chk@plt+0x20c8>
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   80490b0 <free@plt>
mov    0x18(%esp),%ecx
mov    0x805c334,%eax
mov    %ebx,0x4(%ecx)
movl   $0x0,0x8(%ecx)
mov    %eax,0xc(%ecx)
jmp    804b5a8 <__sprintf_chk@plt+0x1fb8>
nop
mov    0x805b280,%eax
test   %eax,%eax
je     804b7d1 <__sprintf_chk@plt+0x21e1>
mov    0x805c334,%edx
mov    %ebx,%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049220 <getservbyport@plt>
mov    0x18(%esp),%ecx
test   %eax,%eax
je     804b6a1 <__sprintf_chk@plt+0x20b1>
mov    (%eax),%edx
test   %edx,%edx
mov    %edx,0x18(%esp)
je     804b6a1 <__sprintf_chk@plt+0x20b1>
movl   $0x10,(%esp)
call   8049290 <malloc@plt>
mov    0x18(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
je     804b5a8 <__sprintf_chk@plt+0x1fb8>
mov    %ebx,0x4(%eax)
shl    $0x4,%ebp
movl   $0x0,0x8(%eax)
mov    0x805c334,%eax
mov    %ecx,0x18(%esp)
mov    %eax,0xc(%ecx)
mov    %edx,(%esp)
call   8049400 <__strdup@plt>
mov    0x18(%esp),%ecx
mov    0x805b2a0(%ebp),%edx
mov    %ecx,0x805b2a0(%ebp)
mov    %edx,(%ecx)
test   %eax,%eax
mov    %eax,0x8(%ecx)
jne    804b5d5 <__sprintf_chk@plt+0x1fe5>
jmp    804b5a8 <__sprintf_chk@plt+0x1fb8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8056894,%edx
mov    $0x8055b75,%eax
mov    %ecx,0x18(%esp)
call   804aae0 <__sprintf_chk@plt+0x14f0>
mov    0x18(%esp),%ecx
test   %eax,%eax
je     804b832 <__sprintf_chk@plt+0x2242>
movl   $0x805c32c,0xc(%esp)
movl   $0x805c330,0x8(%esp)
movl   $0x8055b8e,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
call   8049340 <fscanf@plt>
mov    0x18(%esp),%edx
mov    %edx,(%esp)
call   8049100 <fclose@plt>
mov    0x805c330,%eax
mov    0x1c(%esp),%ecx
jmp    804b695 <__sprintf_chk@plt+0x20a5>
movl   $0x1,(%esp)
mov    %ecx,0x18(%esp)
call   80493c0 <setservent@plt>
mov    0x805c334,%edx
mov    %ebx,%eax
movl   $0x1,0x805b280
00
mov    0x18(%esp),%ecx
jmp    804b6e5 <__sprintf_chk@plt+0x20f5>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%edx
add    $0x8,%eax
movl   $0x400,0x10(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   8054b20 <__sprintf_chk@plt+0xb530>
mov    %eax,%edi
jmp    804b549 <__sprintf_chk@plt+0x1f59>
movl   $0x400,0x805c330
00
mov    $0x400,%eax
movl   $0x1387,0x805c32c
00
jmp    804b695 <__sprintf_chk@plt+0x20a5>
movl   $0x80,0x8(%esp)
movl   $0x805c2a0,0x4(%esp)
mov    %ebx,(%esp)
call   8055450 <__sprintf_chk@plt+0xbe60>
jmp    804b5d5 <__sprintf_chk@plt+0x1fe5>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x2c,%esp
mov    (%edx),%ebx
mov    %edx,0x18(%esp)
cmp    $0x2,%ebx
je     804b9a8 <__sprintf_chk@plt+0x23b8>
xor    %eax,%eax
cmp    $0xa,%ebx
je     804b8b0 <__sprintf_chk@plt+0x22c0>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x10,0x14(%esp)
mov    0x0(%ebp),%edx
test   %edx,%edx
je     804b9b5 <__sprintf_chk@plt+0x23c5>
movzwl 0x14(%esp),%eax
xor    %edi,%edi
shl    $0x3,%eax
mov    %ax,0x1e(%esp)
mov    %ebp,%eax
mov    %edi,%ebp
mov    %eax,%edi
jmp    804b982 <__sprintf_chk@plt+0x2392>
lea    0x0(%esi),%esi
movl   $0x30,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b998 <__sprintf_chk@plt+0x23a8>
mov    (%esi),%eax
mov    %eax,(%ebx)
mov    0x4(%esi),%eax
mov    %eax,0x4(%ebx)
mov    0x8(%esi),%eax
mov    %eax,0x8(%ebx)
mov    0xc(%esi),%eax
mov    %eax,0xc(%ebx)
mov    0x10(%esi),%eax
mov    %eax,0x10(%ebx)
mov    0x14(%esi),%eax
mov    %eax,0x14(%ebx)
mov    0x18(%esi),%eax
mov    %eax,0x18(%ebx)
mov    0x1c(%esi),%eax
mov    %eax,0x1c(%ebx)
mov    0x20(%esi),%eax
mov    %eax,0x20(%ebx)
mov    0x24(%esi),%eax
mov    %eax,0x24(%ebx)
mov    0x28(%esi),%eax
mov    %eax,0x28(%ebx)
mov    0x2c(%esi),%eax
mov    %eax,0x2c(%ebx)
mov    0x2c(%esi),%eax
mov    %eax,0x2c(%ebx)
mov    %ebx,0x2c(%esi)
mov    0x14(%esp),%edx
lea    0x8(%ebx),%eax
mov    %edx,0x8(%esp)
mov    (%edi,%ebp,4),%ecx
add    $0x1,%ebp
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   80490d0 <memcpy@plt>
movzbl 0x14(%esp),%eax
mov    %al,0x1(%ebx)
movzwl 0x1e(%esp),%eax
mov    %ax,0x2(%ebx)
mov    0x18(%esp),%eax
mov    (%eax),%eax
mov    %al,(%ebx)
mov    (%edi,%ebp,4),%eax
test   %eax,%eax
je     804b998 <__sprintf_chk@plt+0x23a8>
cmpw   $0x0,0x2(%esi)
jne    804b8e0 <__sprintf_chk@plt+0x22f0>
mov    %esi,%ebx
jmp    804b945 <__sprintf_chk@plt+0x2355>
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x4,0x14(%esp)
jmp    804b8b8 <__sprintf_chk@plt+0x22c8>
xor    %eax,%eax
jmp    804b8a1 <__sprintf_chk@plt+0x22b1>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
movl   $0x8055b9e,0x4(%esp)
mov    %eax,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
jne    804b9e8 <__sprintf_chk@plt+0x23f8>
mov    $0x80,%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
movl   $0x8055ba4,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0x80,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8055bab,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0x8,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8055bb3,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0x2,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8055bbf,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0xfff,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x80563aa,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0xb7f,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8055bc3,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0xb7b,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8056439,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0x48,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
movl   $0x8055bd0,0x4(%esp)
mov    %ebx,(%esp)
call   8049380 <strcasecmp@plt>
mov    %eax,%edx
mov    $0xfb7,%eax
test   %edx,%edx
je     804b9e0 <__sprintf_chk@plt+0x23f0>
xor    %esi,%esi
mov    0x80567e0(,%esi,4),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
je     804baf8 <__sprintf_chk@plt+0x2508>
add    $0x1,%esi
cmp    $0xc,%esi
jne    804bad2 <__sprintf_chk@plt+0x24e2>
xor    %eax,%eax
jmp    804b9e0 <__sprintf_chk@plt+0x23f0>
mov    $0x1,%al
mov    %esi,%ecx
shl    %cl,%eax
jmp    804b9e0 <__sprintf_chk@plt+0x23f0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x805b200,%eax
movl   $0x535,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80568b8,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x0,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x805b1c0,%eax
movl   $0x535,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80568b8,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1bc,%esp
movl   $0x805606f,0x4(%esp)
movl   $0x8056df0,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x1ac(%esp)
xor    %eax,%eax
call   8049180 <popen@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804bcdc <__sprintf_chk@plt+0x26ec>
lea    0x2c(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x80,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
movl   $0x80,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804bcd0 <__sprintf_chk@plt+0x26e0>
lea    0x130(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x10(%esp)
lea    0xac(%esp),%ebp
lea    0x24(%esp),%eax
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055bd4,0x4(%esp)
mov    %ebx,(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x4,%eax
jne    804bbe8 <__sprintf_chk@plt+0x25f8>
movl   $0x10,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%edx
je     804bbe8 <__sprintf_chk@plt+0x25f8>
mov    0x28(%esp),%eax
mov    $0x805600c,%edi
mov    %ebp,%esi
mov    %edx,0x1c(%esp)
movl   $0x2e637072,0x12c(%esp)
2e
mov    %eax,0x4(%edx)
lea    0x12c(%esp),%eax
mov    %eax,(%esp)
call   8049400 <__strdup@plt>
mov    0x1c(%esp),%edx
mov    $0x4,%ecx
mov    %eax,0x8(%edx)
repz cmpsb %es:(%edi),%ds:(%esi)
je     804bcf7 <__sprintf_chk@plt+0x2707>
movl   $0x80562c5,0x4(%esp)
mov    %ebp,(%esp)
mov    %edx,0x1c(%esp)
call   8049080 <strcmp@plt>
mov    0x1c(%esp),%edx
xor    %ecx,%ecx
test   %eax,%eax
mov    $0x80562c5,%eax
cmove  %eax,%ecx
mov    %ecx,0xc(%edx)
mov    0x805f020,%eax
mov    %edx,0x805f020
mov    %eax,(%edx)
jmp    804bbe8 <__sprintf_chk@plt+0x25f8>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   80492f0 <pclose@plt>
mov    0x1ac(%esp),%eax
xor    %gs:0x14,%eax
jne    804bd00 <__sprintf_chk@plt+0x2710>
add    $0x1bc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x805600c,0xc(%edx)
jmp    804bcb8 <__sprintf_chk@plt+0x26c8>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x8(%eax),%ecx
mov    0x8(%edx),%eax
mov    %ecx,0x18(%esp)
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     804bd50 <__sprintf_chk@plt+0x2760>
test   %ecx,%ecx
mov    $0x8055f84,%edx
cmovne %ecx,%edx
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80491d0 <fnmatch@plt>
test   %eax,%eax
sete   %al
add    $0x2c,%esp
movzbl %al,%eax
ret
nop
mov    $0x1,%eax
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x40,%esp
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8054760 <__sprintf_chk@plt+0xb170>
test   %eax,%eax
je     804bd8a <__sprintf_chk@plt+0x279a>
cmpb   $0x2,(%ebx)
mov    $0x1,%eax
je     804bd98 <__sprintf_chk@plt+0x27a8>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0xa,(%esi)
jne    804bd8a <__sprintf_chk@plt+0x279a>
mov    0x8(%esi),%ecx
test   %ecx,%ecx
jne    804bd8a <__sprintf_chk@plt+0x279a>
mov    0xc(%esi),%edx
test   %edx,%edx
jne    804bd8a <__sprintf_chk@plt+0x279a>
cmpl   $0xffff0000,0x10(%esi)
jne    804bd8a <__sprintf_chk@plt+0x279a>
mov    0x18(%esi),%edx
mov    (%esi),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edx,0x30(%esp)
mov    0x1c(%esi),%edx
mov    %eax,0x18(%esp)
mov    0x4(%esi),%eax
movl   $0x0,0x24(%esp)
movl   $0xffff0000,0x28(%esp)
mov    %edx,0x34(%esp)
mov    0x20(%esi),%edx
mov    %eax,0x1c(%esp)
mov    0x14(%esi),%eax
mov    %edx,0x38(%esp)
mov    0x24(%esi),%edx
mov    %eax,0x2c(%esp)
mov    %eax,0x20(%esp)
lea    0x18(%esp),%eax
mov    %eax,(%esp)
mov    %edx,0x3c(%esp)
call   8054760 <__sprintf_chk@plt+0xb170>
jmp    804bd8a <__sprintf_chk@plt+0x279a>
jmp    804be20 <__sprintf_chk@plt+0x2830>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x24,%esp
cmpl   $0x9,(%eax)
ja     804bfb0 <__sprintf_chk@plt+0x29c0>
mov    (%eax),%eax
mov    %edx,%esi
jmp    *0x80564a8(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%eax
mov    0x28(%eax),%eax
cmp    %eax,0x50(%edx)
setle  %al
movzbl %al,%eax
nop
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
movzbl (%edx),%eax
cmp    $0x1,%al
je     804c050 <__sprintf_chk@plt+0x2a60>
cmp    $0x11,%al
je     804beb9 <__sprintf_chk@plt+0x28c9>
cmp    $0x10,%al
je     804bff8 <__sprintf_chk@plt+0x2a08>
mov    0x805c320,%edx
test   %edx,%edx
je     804c008 <__sprintf_chk@plt+0x2a18>
mov    0x50(%esi),%ecx
xor    %eax,%eax
cmp    %edx,%ecx
jl     804be50 <__sprintf_chk@plt+0x2860>
cmp    0x805b180,%ecx
jg     804be50 <__sprintf_chk@plt+0x2860>
jmp    804bf34 <__sprintf_chk@plt+0x2944>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%ebx
cmpb   $0x1,(%ebx)
je     804c0a9 <__sprintf_chk@plt+0x2ab9>
mov    0x28(%ebx),%eax
cmp    $0xffffffff,%eax
je     804bfb8 <__sprintf_chk@plt+0x29c8>
cmp    0x54(%edx),%eax
je     804bfb8 <__sprintf_chk@plt+0x29c8>
xor    %eax,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%eax
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
sete   %al
movzbl %al,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
lea    0x0(%esi),%esi
mov    0x8(%ebx),%eax
mov    0x28(%eax),%eax
cmp    %eax,0x54(%edx)
setge  %al
movzbl %al,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%eax
mov    0x28(%eax),%eax
cmp    %eax,0x54(%edx)
setle  %al
movzbl %al,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%eax
mov    0x28(%eax),%eax
cmp    %eax,0x50(%edx)
setge  %al
movzbl %al,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%eax
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804bf50 <__sprintf_chk@plt+0x2960>
add    $0x24,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
nop
mov    0x8(%ebx),%eax
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804beb9 <__sprintf_chk@plt+0x28c9>
mov    0x4(%ebx),%eax
mov    %esi,%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
setne  %al
movzbl %al,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
nop
mov    0x8(%ebx),%ebx
cmpb   $0x1,(%ebx)
je     804c09b <__sprintf_chk@plt+0x2aab>
mov    0x28(%ebx),%eax
cmp    $0xffffffff,%eax
je     804bf85 <__sprintf_chk@plt+0x2995>
cmp    0x50(%edx),%eax
jne    804beb9 <__sprintf_chk@plt+0x28c9>
movswl 0x2(%ebx),%ecx
test   %cx,%cx
jne    804bf94 <__sprintf_chk@plt+0x29a4>
jmp    804bf34 <__sprintf_chk@plt+0x2944>
movswl 0x2(%ebx),%ecx
mov    %ebx,%edx
mov    %esi,%eax
call   804bd60 <__sprintf_chk@plt+0x2770>
test   %eax,%eax
je     804bf34 <__sprintf_chk@plt+0x2944>
mov    0x2c(%ebx),%ebx
test   %ebx,%ebx
jne    804bf90 <__sprintf_chk@plt+0x29a0>
xor    %eax,%eax
jmp    804bebb <__sprintf_chk@plt+0x28cb>
nop
call   8049570 <abort@plt>
lea    0x0(%esi),%esi
movswl 0x2(%ebx),%ecx
test   %cx,%cx
je     804bf34 <__sprintf_chk@plt+0x2944>
add    $0x28,%esi
jmp    804bfd4 <__sprintf_chk@plt+0x29e4>
lea    0x0(%esi),%esi
movswl 0x2(%ebx),%ecx
mov    %ebx,%edx
mov    %esi,%eax
call   804bd60 <__sprintf_chk@plt+0x2770>
test   %eax,%eax
je     804bf34 <__sprintf_chk@plt+0x2944>
mov    0x2c(%ebx),%ebx
test   %ebx,%ebx
jne    804bfd0 <__sprintf_chk@plt+0x29e0>
xor    %eax,%eax
xchg   %ax,%ax
jmp    804bebb <__sprintf_chk@plt+0x28cb>
lea    0x0(%esi),%esi
mov    0x50(%edx),%eax
shr    $0x1f,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8056894,%edx
mov    $0x8055b75,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%ebx
je     804c045 <__sprintf_chk@plt+0x2a55>
movl   $0x805b180,0xc(%esp)
movl   $0x805c320,0x8(%esp)
movl   $0x8055bf5,0x4(%esp)
mov    %eax,(%esp)
call   8049340 <fscanf@plt>
mov    %ebx,(%esp)
call   8049100 <fclose@plt>
mov    0x805c320,%edx
jmp    804be7d <__sprintf_chk@plt+0x288d>
mov    0x8(%edx),%ebx
test   %ebx,%ebx
mov    %ebx,0x1c(%esp)
je     804c0b8 <__sprintf_chk@plt+0x2ac8>
xor    %esi,%esi
cmpb   $0x40,(%ebx)
je     804c069 <__sprintf_chk@plt+0x2a79>
mov    %esi,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
mov    %ebx,(%esp)
call   8049350 <strlen@plt>
cmp    $0x6,%eax
jne    804c062 <__sprintf_chk@plt+0x2a72>
add    $0x1,%ebx
movl   $0x8055be4,0x4(%esp)
mov    %ebx,(%esp)
call   80495c0 <strspn@plt>
cmp    $0x5,%eax
sete   %al
movzbl %al,%eax
mov    %eax,%esi
mov    %esi,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
add    $0x24,%esp
mov    %ebx,%edx
mov    %esi,%eax
pop    %ebx
pop    %esi
jmp    804bd10 <__sprintf_chk@plt+0x2720>
add    $0x24,%esp
lea    0x28(%edx),%eax
mov    %ebx,%edx
pop    %ebx
pop    %esi
jmp    804bd10 <__sprintf_chk@plt+0x2720>
mov    $0x1,%esi
mov    %esi,%eax
jmp    804be50 <__sprintf_chk@plt+0x2860>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x11c,%esp
mov    0x148(%esp),%esi
mov    0x14c(%esp),%edi
mov    %gs:0x14,%ecx
mov    %ecx,0x10c(%esp)
xor    %ecx,%ecx
test   %eax,%eax
mov    %esi,0x20(%esp)
mov    0x150(%esp),%esi
mov    %edi,0x24(%esp)
mov    0x154(%esp),%edi
je     804c14f <__sprintf_chk@plt+0x2b5f>
mov    %edx,0x38(%esp)
lea    0x30(%esp),%edx
movb   $0x10,0x30(%esp)
movb   $0x10,0x58(%esp)
movl   $0xffffffff,0x84(%esp)
ff
mov    %ebx,0x80(%esp)
movl   $0x0,0x60(%esp)
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804c2fe <__sprintf_chk@plt+0x2d0e>
mov    0x805ec04,%eax
test   %eax,%eax
jne    804c348 <__sprintf_chk@plt+0x2d58>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804c320 <__sprintf_chk@plt+0x2d30>
mov    0x144(%esp),%eax
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x140(%esp),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b1a4,%ecx
test   %ecx,%ecx
je     804c1b7 <__sprintf_chk@plt+0x2bc7>
test   %ebp,%ebp
je     804c458 <__sprintf_chk@plt+0x2e68>
cmp    $0x3,%ebp
je     804c478 <__sprintf_chk@plt+0x2e88>
cmp    $0x4,%ebp
je     804c3f8 <__sprintf_chk@plt+0x2e08>
mov    0x805ebfc,%eax
mov    %ebp,0xc(%esp)
movl   $0x8055c21,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
cmp    $0xffffffff,%ebx
je     804c468 <__sprintf_chk@plt+0x2e78>
mov    0x805b1a4,%edx
test   %edx,%edx
je     804c284 <__sprintf_chk@plt+0x2c94>
cmp    $0x0,%ebx
je     804c428 <__sprintf_chk@plt+0x2e38>
jle    804c284 <__sprintf_chk@plt+0x2c94>
movl   $0x8055b20,(%esp)
lea    0xcc(%esp),%ebp
call   8049270 <getenv@plt>
mov    $0x8055b1a,%edx
mov    %ebx,0x14(%esp)
movl   $0x8055b58,0xc(%esp)
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
test   %eax,%eax
cmovne %eax,%edx
mov    %edx,0x10(%esp)
call   80495f0 <__sprintf_chk@plt>
movl   $0x805606f,0x4(%esp)
mov    %ebp,(%esp)
call   80493b0 <fopen@plt>
test   %eax,%eax
je     804c284 <__sprintf_chk@plt+0x2c94>
mov    %ebp,0x8(%esp)
movl   $0x8055b63,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x28(%esp)
call   8049340 <fscanf@plt>
mov    0x28(%esp),%edx
cmp    $0x1,%eax
je     804c488 <__sprintf_chk@plt+0x2e98>
mov    %edx,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebf8,%eax
mov    %ebx,0xc(%esp)
movl   $0x8055c33,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
cmpl   $0x1,0x134(%esp)
je     804c3b0 <__sprintf_chk@plt+0x2dc0>
mov    0x805ebf8,%eax
movl   $0x8055f84,0x14(%esp)
movl   $0x8055f84,0xc(%esp)
movl   $0x8055c42,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x805ebfc,%eax
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b230,%eax
test   %eax,%eax
jne    804c370 <__sprintf_chk@plt+0x2d80>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
mov    0x10c(%esp),%eax
xor    %gs:0x14,%eax
jne    804c522 <__sprintf_chk@plt+0x2f32>
add    $0x11c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8055bfa,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c169 <__sprintf_chk@plt+0x2b79>
lea    0x0(%esi),%esi
movl   $0x8055c0e,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c15c <__sprintf_chk@plt+0x2b6c>
lea    0x0(%esi),%esi
mov    0x130(%esp),%eax
mov    0x24(%esp),%edx
mov    %esi,0x10(%esp)
mov    %edi,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x20(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x8056e14,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c2f2 <__sprintf_chk@plt+0x2d02>
lea    0x0(%esi,%eiz,1),%esi
mov    0x138(%esp),%eax
movl   $0x8055c39,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x14(%esp)
mov    0x805ebf8,%eax
mov    %eax,0x10(%esp)
mov    0x13c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x805ebfc,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c2e9 <__sprintf_chk@plt+0x2cf9>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8055c19,0xc(%esp)
mov    0x805ebfc,%eax
movl   $0x8055c11,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c1d8 <__sprintf_chk@plt+0x2be8>
lea    0x0(%esi),%esi
movl   $0x8055c28,0xc(%esp)
mov    0x805ebf8,%eax
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c2a5 <__sprintf_chk@plt+0x2cb5>
lea    0x0(%esi),%esi
movl   $0x8055c0c,0xc(%esp)
jmp    804c400 <__sprintf_chk@plt+0x2e10>
lea    0x0(%esi),%esi
movl   $0x8055c26,0xc(%esp)
jmp    804c430 <__sprintf_chk@plt+0x2e40>
lea    0x0(%esi),%esi
movl   $0x8055c16,0xc(%esp)
jmp    804c400 <__sprintf_chk@plt+0x2e10>
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    %ebp,0x28(%esp)
mov    %edi,%ebp
mov    %esi,%edi
mov    (%ecx),%esi
add    $0x4,%ecx
lea    -0x1010101(%esi),%eax
not    %esi
and    %esi,%eax
and    $0x80808080,%eax
je     804c492 <__sprintf_chk@plt+0x2ea2>
mov    %edx,0x2c(%esp)
mov    %eax,%edx
mov    %edi,%esi
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
mov    %ebp,%edi
mov    0x28(%esp),%ebp
lea    0x2(%ecx),%edx
cmove  %edx,%ecx
add    %al,%al
sbb    $0x3,%ecx
mov    %ecx,(%esp)
mov    %ebx,0x10(%esp)
movl   $0x8055c2f,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80495f0 <__sprintf_chk@plt>
mov    0x805ebf8,%eax
mov    %ebp,0xc(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x2c(%esp),%edx
mov    %edx,(%esp)
call   8049100 <fclose@plt>
jmp    804c2a5 <__sprintf_chk@plt+0x2cb5>
call   8049190 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ebx
lea    0x30(%esp),%edi
mov    (%ebx),%eax
movl   $0x3,0x4(%esp)
mov    %edi,(%esp)
sub    $0x2c,%eax
mov    %eax,0xc(%esp)
lea    0x2c(%ebx),%eax
mov    %eax,0x8(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
mov    0x34(%esp),%eax
test   %eax,%eax
je     804c572 <__sprintf_chk@plt+0x2f82>
cmpw   $0x4,(%eax)
je     804c572 <__sprintf_chk@plt+0x2f82>
mov    0x4(%eax),%esi
mov    0x30(%esp),%eax
test   %eax,%eax
je     804c618 <__sprintf_chk@plt+0x3028>
mov    0x4(%eax),%ecx
mov    0xc(%eax),%ebp
mov    %ecx,0x2c(%esp)
mov    0x64(%esp),%eax
mov    0x14(%ebx),%ecx
movzbl 0x12(%ebx),%edx
mov    0xc(%eax),%eax
mov    %ebp,0x14(%esp)
mov    0x2c(%esp),%ebp
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %ebp,0x10(%esp)
mov    0x1c(%ebx),%ebp
mov    %ebp,0xc(%esp)
mov    0x18(%ebx),%ebp
mov    %ebp,0x8(%esp)
movzbl 0x13(%ebx),%ebx
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
call   804c0d0 <__sprintf_chk@plt+0x2ae0>
mov    0x805b228,%eax
test   %eax,%eax
je     804c60a <__sprintf_chk@plt+0x301a>
movl   $0x9,(%esp)
call   8049420 <putchar@plt>
xor    %edx,%edx
mov    %edi,%eax
call   804b430 <__sprintf_chk@plt+0x1e40>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
xor    %ebp,%ebp
movl   $0x0,0x2c(%esp)
jmp    804c588 <__sprintf_chk@plt+0x2f98>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x8c,%esp
mov    0x1c(%edx),%ebx
mov    %eax,-0x74(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
test   %ebx,%ebx
je     804c978 <__sprintf_chk@plt+0x3388>
mov    $0x7,%edx
mov    %esi,%eax
call   804b430 <__sprintf_chk@plt+0x1e40>
mov    0x8(%esi),%edx
test   %edx,%edx
je     804c80a <__sprintf_chk@plt+0x321a>
movzwl (%edx),%eax
lea    0x4(%edx),%ebx
sub    $0x4,%eax
cmp    $0x67,%eax
mov    %eax,-0x78(%ebp)
jbe    804cac0 <__sprintf_chk@plt+0x34d0>
mov    0x805b234,%ecx
test   %ecx,%ecx
jne    804c870 <__sprintf_chk@plt+0x3280>
mov    0x10(%esi),%eax
test   %eax,%eax
je     804c6b3 <__sprintf_chk@plt+0x30c3>
add    $0x4,%eax
mov    %eax,0x8(%esp)
movl   $0x8056086,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
testb  $0x4,0x5(%ebx)
jne    804ca88 <__sprintf_chk@plt+0x3498>
mov    0x8(%ebx),%eax
cmp    $0x2dc6c0,%eax
jne    804ca50 <__sprintf_chk@plt+0x3460>
mov    0x44(%ebx),%eax
test   %eax,%eax
jne    804ca08 <__sprintf_chk@plt+0x3418>
mov    0xc(%ebx),%eax
test   %eax,%eax
jne    804c9d8 <__sprintf_chk@plt+0x33e8>
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    804c9b8 <__sprintf_chk@plt+0x33c8>
mov    0x50(%ebx),%eax
cmp    $0x2,%eax
je     804c70c <__sprintf_chk@plt+0x311c>
mov    %eax,0x8(%esp)
movl   $0x8055cb5,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x4c(%ebx),%eax
cmp    $0xfffe,%eax
jbe    804cb28 <__sprintf_chk@plt+0x3538>
mov    0x44(%ebx),%eax
xor    %edx,%edx
mov    %edx,-0x6c(%ebp)
mov    %eax,-0x70(%ebp)
mov    0xc(%esi),%eax
fildll -0x70(%ebp)
test   %eax,%eax
je     804c73a <__sprintf_chk@plt+0x314a>
mov    0x4(%eax),%edx
test   %edx,%edx
jne    804c8b8 <__sprintf_chk@plt+0x32c8>
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jbe    804c758 <__sprintf_chk@plt+0x3168>
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    804c8e0 <__sprintf_chk@plt+0x32f0>
fstp   %st(0)
jmp    804c762 <__sprintf_chk@plt+0x3172>
nop
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
jmp    804c762 <__sprintf_chk@plt+0x3172>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
mov    0x18(%ebx),%eax
test   %eax,%eax
jne    804cb68 <__sprintf_chk@plt+0x3578>
mov    0x24(%ebx),%eax
mov    0x64(%ebx),%edx
test   %eax,%eax
jne    804c828 <__sprintf_chk@plt+0x3238>
test   %edx,%edx
jne    804c828 <__sprintf_chk@plt+0x3238>
mov    0x20(%ebx),%eax
test   %eax,%eax
jne    804c84f <__sprintf_chk@plt+0x325f>
mov    0x1c(%ebx),%eax
test   %eax,%eax
je     804c7b5 <__sprintf_chk@plt+0x31c5>
mov    -0x74(%ebp),%ecx
cmpb   $0xa,(%ecx)
je     804c7b5 <__sprintf_chk@plt+0x31c5>
mov    %eax,0x8(%esp)
movl   $0x8055d07,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x28(%ebx),%eax
test   %eax,%eax
jne    804cb48 <__sprintf_chk@plt+0x3558>
mov    0x58(%ebx),%eax
cmp    $0x3,%eax
je     804c7e0 <__sprintf_chk@plt+0x31f0>
mov    %eax,0x8(%esp)
movl   $0x8055d1e,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x5c(%ebx),%eax
test   %eax,%eax
jne    804caf8 <__sprintf_chk@plt+0x3508>
mov    0x60(%ebx),%eax
test   %eax,%eax
je     804c80a <__sprintf_chk@plt+0x321a>
mov    %eax,0x8(%esp)
movl   $0x8055d39,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    -0x1c(%ebp),%eax
xor    %gs:0x14,%eax
jne    804cc33 <__sprintf_chk@plt+0x3643>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055cef,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     804c78e <__sprintf_chk@plt+0x319e>
mov    %eax,0x8(%esp)
movl   $0x8055cfe,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c78e <__sprintf_chk@plt+0x319e>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x5(%ebx),%eax
test   $0x1,%al
jne    804cbe8 <__sprintf_chk@plt+0x35f8>
test   $0x2,%al
xchg   %ax,%ax
jne    804cbc8 <__sprintf_chk@plt+0x35d8>
test   $0x8,%al
jne    804cba8 <__sprintf_chk@plt+0x35b8>
test   $0x10,%al
jne    804cb88 <__sprintf_chk@plt+0x3598>
test   $0x20,%al
je     804c691 <__sprintf_chk@plt+0x30a1>
movl   $0x8055c7a,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c691 <__sprintf_chk@plt+0x30a1>
nop
mov    0xc(%eax),%eax
test   %eax,%eax
je     804c73a <__sprintf_chk@plt+0x314a>
cmp    $0x7fffffff,%eax
je     804c73a <__sprintf_chk@plt+0x314a>
fstp   %st(0)
xor    %edx,%edx
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fildll -0x70(%ebp)
jmp    804c73a <__sprintf_chk@plt+0x314a>
mov    0x50(%ebx),%esi
test   %esi,%esi
je     804c760 <__sprintf_chk@plt+0x3170>
xor    %edi,%edi
xor    %edx,%edx
mov    %esi,-0x70(%ebp)
mov    %edi,-0x6c(%ebp)
fildll -0x70(%ebp)
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fildll -0x70(%ebp)
fmulp  %st,%st(1)
fmuls  0x80570d0
fdivp  %st,%st(1)
flds   0x80570d4
fxch   %st(1)
fucomi %st(1),%st
ja     804cc20 <__sprintf_chk@plt+0x3630>
fstp   %st(1)
flds   0x80570cc
fxch   %st(1)
fucomi %st(1),%st
ja     804cc08 <__sprintf_chk@plt+0x3618>
fstp   %st(1)
fstpl  0x10(%esp)
movl   $0x8055ca2,0xc(%esp)
lea    -0x5c(%ebp),%esi
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80495f0 <__sprintf_chk@plt>
mov    %esi,0x8(%esp)
movl   $0x8055cd7,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c762 <__sprintf_chk@plt+0x3172>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edx),%eax
test   %eax,%eax
je     804c663 <__sprintf_chk@plt+0x3073>
mov    0x10(%eax),%edx
mov    %edx,0x14(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x10(%esp)
mov    0x8(%eax),%edx
mov    %edx,0xc(%esp)
mov    0x4(%eax),%eax
movl   $0x8055c4b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c663 <__sprintf_chk@plt+0x3073>
mov    %eax,0x8(%esp)
movl   $0x8055cad,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c6ec <__sprintf_chk@plt+0x30fc>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fildll -0x70(%ebp)
fdivs  0x80570cc
movl   $0x8055ca5,0x4(%esp)
movl   $0x1,(%esp)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c6e1 <__sprintf_chk@plt+0x30f1>
xchg   %ax,%ax
mov    0x48(%ebx),%edx
xor    %ecx,%ecx
mov    %ecx,-0x6c(%ebp)
movl   $0x8055c9a,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,-0x70(%ebp)
xor    %edx,%edx
fildll -0x70(%ebp)
flds   0x80570cc
fdivr  %st,%st(1)
fxch   %st(1)
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fstpl  0x10(%esp)
fildll -0x70(%ebp)
fdivp  %st,%st(1)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c6d6 <__sprintf_chk@plt+0x30e6>
xchg   %ax,%ax
test   %eax,%eax
je     804c6cb <__sprintf_chk@plt+0x30db>
xor    %edx,%edx
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fildll -0x70(%ebp)
fdivs  0x80570cc
movl   $0x8055c92,0x4(%esp)
movl   $0x1,(%esp)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c6cb <__sprintf_chk@plt+0x30db>
xchg   %ax,%ax
movzbl 0x6(%ebx),%eax
shr    $0x4,%al
movzbl %al,%eax
mov    %eax,0xc(%esp)
movzbl 0x6(%ebx),%eax
movl   $0x8055c84,0x4(%esp)
movl   $0x1,(%esp)
and    $0xf,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c6bd <__sprintf_chk@plt+0x30cd>
lea    0x0(%esi),%esi
add    $0xffffff80,%esp
xor    %eax,%eax
lea    0x27(%esp),%ebx
mov    $0x1a,%ecx
and    $0xfffffff0,%ebx
add    $0x4,%edx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
mov    -0x78(%ebp),%eax
movl   $0x68,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   80492c0 <__memcpy_chk@plt>
jmp    804c683 <__sprintf_chk@plt+0x3093>
xor    %edx,%edx
mov    %eax,-0x70(%ebp)
mov    %edx,-0x6c(%ebp)
fildll -0x70(%ebp)
fdivs  0x80570cc
movl   $0x8055d2d,0x4(%esp)
movl   $0x1,(%esp)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c7eb <__sprintf_chk@plt+0x31fb>
xchg   %ax,%ax
mov    %eax,0x8(%esp)
movl   $0x8055cbe,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c71a <__sprintf_chk@plt+0x312a>
lea    0x0(%esi),%esi
mov    %eax,0x8(%esp)
movl   $0x8055d12,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c7c0 <__sprintf_chk@plt+0x31d0>
lea    0x0(%esi),%esi
mov    %eax,0x8(%esp)
movl   $0x8055ce3,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804c76d <__sprintf_chk@plt+0x317d>
lea    0x0(%esi),%esi
movl   $0x8055c71,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movzbl 0x5(%ebx),%eax
jmp    804c896 <__sprintf_chk@plt+0x32a6>
lea    0x0(%esi),%esi
movl   $0x8055c6c,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movzbl 0x5(%ebx),%eax
jmp    804c88e <__sprintf_chk@plt+0x329e>
lea    0x0(%esi),%esi
movl   $0x8055c66,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movzbl 0x5(%ebx),%eax
jmp    804c886 <__sprintf_chk@plt+0x3296>
lea    0x0(%esi),%esi
movl   $0x8055c62,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movzbl 0x5(%ebx),%eax
jmp    804c87c <__sprintf_chk@plt+0x328c>
lea    0x0(%esi),%esi
fdivp  %st,%st(1)
movl   $0x8055cd1,0xc(%esp)
fstpl  0x10(%esp)
jmp    804c93b <__sprintf_chk@plt+0x334b>
nop
lea    0x0(%esi,%eiz,1),%esi
fdivp  %st,%st(1)
movl   $0x8055ccb,0xc(%esp)
fstpl  0x10(%esp)
jmp    804c93b <__sprintf_chk@plt+0x334b>
call   8049190 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x43c,%esp
mov    %gs:0x14,%edx
mov    %edx,0x42c(%esp)
xor    %edx,%edx
mov    $0x8055d47,%edx
mov    %eax,0x1c(%esp)
movl   $0x0,(%eax)
mov    $0x8055d50,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804cdcd <__sprintf_chk@plt+0x37dd>
lea    0x2c(%esp),%esi
mov    0x18(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804cdb1 <__sprintf_chk@plt+0x37c1>
movl   $0x4,0x8(%esp)
movl   $0x8055d5e,0x4(%esp)
mov    %esi,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
jne    804cc83 <__sprintf_chk@plt+0x3693>
xor    %ebx,%ebx
mov    %esi,%edi
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x20,0x4(%esp)
mov    %edi,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804cd0c <__sprintf_chk@plt+0x371c>
lea    0x1(%ebp),%edi
add    $0x1,%ebx
movl   $0x9,0x8(%esp)
movl   $0x8055d63,0x4(%esp)
mov    %edi,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
jne    804ccc8 <__sprintf_chk@plt+0x36d8>
movzbl 0xa(%ebp),%eax
cmp    $0xa,%al
je     804cd0c <__sprintf_chk@plt+0x371c>
cmp    $0x20,%al
jne    804ccc8 <__sprintf_chk@plt+0x36d8>
mov    0x18(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804cdb1 <__sprintf_chk@plt+0x37c1>
movl   $0x4,0x8(%esp)
movl   $0x8055d5e,0x4(%esp)
mov    %esi,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
mov    %eax,%ebp
jne    804cdb1 <__sprintf_chk@plt+0x37c1>
mov    %esi,%eax
lea    0x0(%esi,%eiz,1),%esi
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     804cc83 <__sprintf_chk@plt+0x3693>
add    $0x1,%eax
sub    $0x1,%ebx
jne    804cd50 <__sprintf_chk@plt+0x3760>
mov    0x1c(%esp),%ecx
movl   $0x8055b91,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0x8(%esp)
call   80494f0 <sscanf@plt>
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049100 <fclose@plt>
mov    0x42c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebp,%eax
jne    804cdd2 <__sprintf_chk@plt+0x37e2>
add    $0x43c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x18(%esp),%eax
or     $0xffffffff,%ebp
mov    %eax,(%esp)
call   8049100 <fclose@plt>
call   8049430 <__errno_location@plt>
movl   $0x3,(%eax)
jmp    804cd94 <__sprintf_chk@plt+0x37a4>
or     $0xffffffff,%ebp
jmp    804cd94 <__sprintf_chk@plt+0x37a4>
call   8049190 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0xf,%ecx
push   %esi
mov    $0x8055d6d,%edx
push   %ebx
sub    $0x180,%esp
mov    %gs:0x14,%eax
mov    %eax,0x17c(%esp)
xor    %eax,%eax
lea    0x40(%esp),%esi
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    $0x8055d7a,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%edi
je     804d096 <__sprintf_chk@plt+0x3aa6>
lea    0x7c(%esp),%ebx
jmp    804ce31 <__sprintf_chk@plt+0x3841>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%edx
mov    %ebx,%eax
call   804a6e0 <__sprintf_chk@plt+0x10f0>
mov    %edi,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
jne    804ce28 <__sprintf_chk@plt+0x3838>
mov    %edi,(%esp)
call   8049100 <fclose@plt>
mov    $0x8055d8c,%edx
mov    $0x8055d9a,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%edi
jne    804ce71 <__sprintf_chk@plt+0x3881>
jmp    804ce91 <__sprintf_chk@plt+0x38a1>
mov    %esi,%edx
mov    %ebx,%eax
call   804a6e0 <__sprintf_chk@plt+0x10f0>
mov    %edi,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
jne    804ce68 <__sprintf_chk@plt+0x3878>
mov    %edi,(%esp)
call   8049100 <fclose@plt>
lea    0x3c(%esp),%eax
call   804cc40 <__sprintf_chk@plt+0x3650>
test   %eax,%eax
js     804d085 <__sprintf_chk@plt+0x3a95>
mov    0x805f024,%eax
movl   $0x8055dbe,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805f028,%edx
mov    0x50(%esp),%eax
mov    0x48(%esp),%ebx
mov    0x805f030,%ecx
mov    %edx,0x24(%esp)
mov    0x805f02c,%edx
mov    %eax,0x1c(%esp)
movl   $0x8056e34,0x4(%esp)
mov    %ecx,0x18(%esp)
add    %ebx,%ecx
mov    %edx,0x20(%esp)
mov    0x4c(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x14(%esp)
mov    %eax,%edx
add    %ecx,%eax
sub    0x54(%esp),%edx
sub    0x68(%esp),%edx
mov    %eax,0x8(%esp)
add    %ebx,%edx
mov    %edx,0x10(%esp)
mov    0x3c(%esp),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
movl   $0x8056e88,(%esp)
call   80492a0 <puts@plt>
mov    0x805f024,%eax
movl   $0x8055dd5,0x10(%esp)
movl   $0x8055dd5,0xc(%esp)
movl   $0x8055dd7,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x5c(%esp),%edx
mov    0x70(%esp),%eax
movl   $0x8055deb,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
add    %edx,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x58(%esp),%edx
mov    0x6c(%esp),%eax
movl   $0x8055e01,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
add    %edx,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x54(%esp),%edx
mov    0x68(%esp),%eax
movl   $0x8055e17,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
add    %edx,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x70(%esp),%ebx
mov    0x5c(%esp),%eax
mov    0x6c(%esp),%ecx
add    0x58(%esp),%eax
add    0x54(%esp),%eax
mov    0x68(%esp),%edx
lea    (%ebx,%ecx,1),%esi
mov    %eax,0xc(%esp)
add    %ebx,%eax
add    %eax,%ecx
add    %edx,%esi
add    %ecx,%edx
mov    %edx,0x8(%esp)
mov    %esi,0x10(%esp)
movl   $0x8055e2d,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x60(%esp),%edx
mov    0x74(%esp),%eax
movl   $0x8055e44,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
add    %edx,%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
xor    %eax,%eax
mov    0x17c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804d0a7 <__sprintf_chk@plt+0x3ab7>
add    $0x180,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0x8055dad,(%esp)
call   8049200 <perror@plt>
jmp    804cea2 <__sprintf_chk@plt+0x38b2>
movl   $0x8055e5b,(%esp)
call   8049200 <perror@plt>
jmp    804ce91 <__sprintf_chk@plt+0x38a1>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x204c,%esp
movl   $0x4,0x8(%esp)
movl   $0x3,0x4(%esp)
movl   $0x10,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x203c(%esp)
xor    %eax,%eax
mov    %ecx,0x1c(%esp)
call   8049530 <socket@plt>
test   %eax,%eax
mov    %eax,%edi
js     804d312 <__sprintf_chk@plt+0x3d22>
movl   $0x0,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80495e0 <send@plt>
test   %eax,%eax
js     804d2de <__sprintf_chk@plt+0x3cee>
lea    0x30(%esp),%ebp
lea    0x3c(%esp),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x14(%esp)
mov    %ebp,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x2000,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
movl   $0xc,0x2c(%esp)
call   8049160 <recvfrom@plt>
test   %eax,%eax
js     804d208 <__sprintf_chk@plt+0x3c18>
je     804d25d <__sprintf_chk@plt+0x3c6d>
cmp    $0xf,%eax
jle    804d230 <__sprintf_chk@plt+0x3c40>
mov    0x3c(%esp),%ecx
cmp    $0xf,%ecx
jbe    804d230 <__sprintf_chk@plt+0x3c40>
cmp    %ecx,%eax
mov    %eax,%edx
jb     804d230 <__sprintf_chk@plt+0x3c40>
mov    %esi,%ebx
jmp    804d1b2 <__sprintf_chk@plt+0x3bc2>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
lea    0x3(%eax),%ecx
and    $0xfffffffc,%ecx
sub    %ecx,%edx
add    %ecx,%ebx
cmp    $0xf,%edx
mov    %edx,%eax
jle    804d228 <__sprintf_chk@plt+0x3c38>
mov    (%ebx),%ecx
cmp    $0xf,%ecx
jbe    804d230 <__sprintf_chk@plt+0x3c40>
cmp    %edx,%ecx
ja     804d230 <__sprintf_chk@plt+0x3c40>
cmpl   $0x1e240,0x8(%ebx)
jne    804d188 <__sprintf_chk@plt+0x3b98>
movzwl 0x4(%ebx),%eax
cmp    $0x3,%ax
je     804d282 <__sprintf_chk@plt+0x3c92>
cmp    $0x2,%ax
je     804d2a7 <__sprintf_chk@plt+0x3cb7>
mov    0x1c(%esp),%eax
mov    %edx,0x18(%esp)
movl   $0x805ebe4,0x4(%esp)
mov    %ebx,(%esp)
call   *%eax
mov    0x18(%esp),%edx
test   %eax,%eax
jns    804d188 <__sprintf_chk@plt+0x3b98>
mov    %edi,(%esp)
mov    %eax,0x18(%esp)
call   80495a0 <close@plt>
mov    0x18(%esp),%ecx
mov    %ecx,%eax
jmp    804d28c <__sprintf_chk@plt+0x3c9c>
nop
call   8049430 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     804d11f <__sprintf_chk@plt+0x3b2f>
movl   $0x8055e6c,(%esp)
call   8049200 <perror@plt>
jmp    804d11f <__sprintf_chk@plt+0x3b2f>
nop
test   %edx,%edx
je     804d11f <__sprintf_chk@plt+0x3b2f>
mov    %eax,0xc(%esp)
mov    0x805b1c0,%eax
movl   $0x8055e95,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
mov    0x805b1c0,%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e74,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
mov    %edi,(%esp)
call   80495a0 <close@plt>
xor    %eax,%eax
mov    0x203c(%esp),%esi
xor    %gs:0x14,%esi
jne    804d31a <__sprintf_chk@plt+0x3d2a>
add    $0x204c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x23,%ecx
jbe    804d2eb <__sprintf_chk@plt+0x3cfb>
call   8049430 <__errno_location@plt>
mov    0x10(%ebx),%edx
neg    %edx
cmp    $0x2,%edx
mov    %edx,(%eax)
je     804d2de <__sprintf_chk@plt+0x3cee>
mov    0x805b1c0,%eax
mov    %edx,0xc(%esp)
movl   $0x80560a2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   80495a0 <close@plt>
or     $0xffffffff,%eax
jmp    804d28c <__sprintf_chk@plt+0x3c9c>
mov    0x805b1c0,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e84,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
jmp    804d2de <__sprintf_chk@plt+0x3cee>
or     $0xffffffff,%eax
jmp    804d28c <__sprintf_chk@plt+0x3c9c>
lea    0x0(%esi),%esi
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x18c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x17c(%esp)
xor    %eax,%eax
testb  $0x80,0x805ebe8
jne    804d373 <__sprintf_chk@plt+0x3d83>
xor    %eax,%eax
mov    0x17c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804d509 <__sprintf_chk@plt+0x3f19>
add    $0x18c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8055ead,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     804d492 <__sprintf_chk@plt+0x3ea2>
mov    $0x8055ebe,%edx
mov    $0x8055ead,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%esi
je     804d501 <__sprintf_chk@plt+0x3f11>
lea    0x7c(%esp),%ebx
mov    %eax,0x8(%esp)
lea    0x4c(%esp),%ebp
movl   $0xff,0x4(%esp)
lea    0x58(%esp),%edi
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
jmp    804d471 <__sprintf_chk@plt+0x3e81>
lea    0x0(%esi),%esi
lea    0x48(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x44(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x38(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %ebp,0x24(%esp)
mov    %edi,0x20(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055eca,0x4(%esp)
mov    %ebx,(%esp)
call   80494f0 <sscanf@plt>
mov    0x58(%esp),%eax
mov    0x5c(%esp),%edx
mov    0x3c(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x20(%esp)
mov    0x50(%esp),%eax
mov    %edx,0x24(%esp)
mov    0x54(%esp),%edx
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x18(%esp)
mov    0x48(%esp),%eax
mov    %edx,0x1c(%esp)
mov    0x38(%esp),%edx
mov    %eax,0x14(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
mov    0x805ebf0,%eax
call   804c0d0 <__sprintf_chk@plt+0x2ae0>
mov    %esi,0x8(%esp)
movl   $0xff,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
jne    804d3c8 <__sprintf_chk@plt+0x3dd8>
jmp    804d352 <__sprintf_chk@plt+0x3d62>
movl   $0x8055b20,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
jne    804d387 <__sprintf_chk@plt+0x3d97>
lea    0x58(%esp),%ebx
mov    $0x9,%ecx
mov    %ebx,%edi
mov    $0x24,%edx
rep stos %eax,%es:(%edi)
mov    $0x804c530,%ecx
mov    %ebx,%eax
movl   $0x24,0x58(%esp)
movw   $0x14,0x5c(%esp)
movw   $0x301,0x5e(%esp)
movl   $0x1e240,0x60(%esp)
movb   $0x10,0x68(%esp)
movb   $0xff,0x69(%esp)
movl   $0x3,0x70(%esp)
call   804d0b0 <__sprintf_chk@plt+0x3ac0>
test   %eax,%eax
jne    804d387 <__sprintf_chk@plt+0x3d97>
jmp    804d352 <__sprintf_chk@plt+0x3d62>
or     $0xffffffff,%eax
jmp    804d354 <__sprintf_chk@plt+0x3d64>
lea    0x0(%esi,%eiz,1),%esi
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0x8055ee6,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x13c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
mov    $0x8055eef,%eax
movl   $0x0,0x805f024
00
movl   $0x0,0x805f028
00
movl   $0x0,0x805f02c
00
movl   $0x0,0x805f030
00
movl   $0x0,0x805f034
00
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     804d656 <__sprintf_chk@plt+0x4066>
lea    0x2c(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
movl   $0x5,0x18(%esp)
xchg   %ax,%ax
mov    0x1c(%esp),%eax
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804d5fd <__sprintf_chk@plt+0x400d>
xor    %esi,%esi
xor    %edi,%edi
mov    0x8056850(,%edi,4),%ebp
mov    %ebp,(%esp)
call   8049350 <strlen@plt>
mov    %ebp,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
je     804d628 <__sprintf_chk@plt+0x4038>
add    $0x1,%edi
cmp    $0x5,%edi
mov    %edi,%esi
jne    804d5c8 <__sprintf_chk@plt+0x3fd8>
mov    0x18(%esp),%eax
test   %eax,%eax
jg     804d5a8 <__sprintf_chk@plt+0x3fb8>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049100 <fclose@plt>
xor    %eax,%eax
mov    0x12c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804d65b <__sprintf_chk@plt+0x406b>
add    $0x13c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
lea    0x805f024(,%esi,4),%eax
mov    %eax,0x8(%esp)
movl   $0x8055b00,0x4(%esp)
mov    %ebx,(%esp)
call   80494f0 <sscanf@plt>
subl   $0x1,0x18(%esp)
mov    0x18(%esp),%eax
test   %eax,%eax
jg     804d5a8 <__sprintf_chk@plt+0x3fb8>
jmp    804d5fd <__sprintf_chk@plt+0x400d>
or     $0xffffffff,%eax
jmp    804d60b <__sprintf_chk@plt+0x401b>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x12c,%esp
lea    0x1c(%esp),%ebx
mov    %esi,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x11c(%esp)
xor    %eax,%eax
call   80490f0 <fgets@plt>
test   %eax,%eax
jne    804d708 <__sprintf_chk@plt+0x4118>
jmp    804d720 <__sprintf_chk@plt+0x4130>
lea    0x0(%esi),%esi
mov    %ebx,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     804d6b2 <__sprintf_chk@plt+0x40c2>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
sub    %ebx,%edx
je     804d74d <__sprintf_chk@plt+0x415d>
sub    $0x1,%edx
cmpb   $0xa,0x1c(%esp,%edx,1)
jne    804d74d <__sprintf_chk@plt+0x415d>
movb   $0x0,0x1c(%esp,%edx,1)
mov    %edi,0x8(%esp)
movl   $0x805ebe4,0x4(%esp)
mov    %ebx,(%esp)
call   *%ebp
test   %eax,%eax
js     804d75d <__sprintf_chk@plt+0x416d>
mov    %esi,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
jne    804d6b0 <__sprintf_chk@plt+0x40c0>
mov    %esi,(%esp)
call   80490e0 <ferror@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
neg    %eax
mov    0x11c(%esp),%edi
xor    %gs:0x14,%edi
jne    804d761 <__sprintf_chk@plt+0x4171>
add    $0x12c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049430 <__errno_location@plt>
movl   $0xffffffea,(%eax)
or     $0xffffffff,%eax
jmp    804d732 <__sprintf_chk@plt+0x4142>
xor    %eax,%eax
jmp    804d732 <__sprintf_chk@plt+0x4142>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %eax,%edi
mov    %edi,%ecx
shr    $0x10,%ecx
shr    $0x18,%eax
xor    %ecx,%eax
mov    %edi,%ecx
xor    %edi,%eax
shr    $0x8,%ecx
push   %esi
xor    %ecx,%eax
push   %ebx
movzbl %al,%eax
sub    $0x3c,%esp
mov    0x805ec20(,%eax,4),%ebx
test   %ebx,%ebx
je     804d82d <__sprintf_chk@plt+0x423d>
mov    %edx,%esi
xor    %ebp,%ebp
jmp    804d7ae <__sprintf_chk@plt+0x41be>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ebx
test   %ebx,%ebx
je     804d81b <__sprintf_chk@plt+0x422b>
cmp    0x4(%ebx),%edi
jne    804d7a8 <__sprintf_chk@plt+0x41b8>
mov    %esi,%eax
sub    %edx,%eax
cmp    $0xffe,%eax
jg     804d81b <__sprintf_chk@plt+0x422b>
mov    0xc(%ebx),%eax
add    $0x1,%ebp
mov    %edx,0x2c(%esp)
mov    %eax,0x1c(%esp)
mov    0x8(%ebx),%eax
mov    %esi,(%esp)
movl   $0x8055efd,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
mov    %eax,0x18(%esp)
lea    0x10(%ebx),%eax
mov    %eax,0x14(%esp)
mov    %edx,%eax
sub    %esi,%eax
add    $0x1000,%eax
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049060 <__snprintf_chk@plt>
mov    %esi,(%esp)
call   8049350 <strlen@plt>
mov    (%ebx),%ebx
mov    0x2c(%esp),%edx
add    %eax,%esi
test   %ebx,%ebx
jne    804d7ae <__sprintf_chk@plt+0x41be>
cmp    %edx,%esi
je     804d823 <__sprintf_chk@plt+0x4233>
movb   $0x0,-0x1(%esi)
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %ebp,%ebp
jmp    804d823 <__sprintf_chk@plt+0x4233>
jmp    804d840 <__sprintf_chk@plt+0x4250>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x11fc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x11ec(%esp)
xor    %eax,%eax
mov    0x1210(%esp),%eax
movl   $0x3a,0x4(%esp)
mov    0x1214(%esp),%edi
mov    %eax,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     804df10 <__sprintf_chk@plt+0x4920>
lea    0x2(%eax),%esi
movl   $0x3a,0x4(%esp)
mov    %esi,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     804df10 <__sprintf_chk@plt+0x4920>
lea    0x6(%eax),%ebp
movb   $0x0,0x5(%eax)
movl   $0x3a,0x4(%esp)
mov    %ebp,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804df10 <__sprintf_chk@plt+0x4920>
movb   $0x0,0x5(%eax)
movsbl 0x7(%eax),%eax
cmp    $0x40,%al
jg     804dd48 <__sprintf_chk@plt+0x4758>
sub    $0x30,%eax
mov    0x4(%edi),%edx
bt     %eax,%edx
jae    804dd24 <__sprintf_chk@plt+0x4734>
movzbl 0x1218(%esp),%eax
cmpl   $0x2,0x1218(%esp)
mov    %al,0x78(%esp)
mov    %al,0x50(%esp)
lea    0xa0(%esp),%eax
je     804de08 <__sprintf_chk@plt+0x4818>
mov    %eax,0x18(%esp)
lea    0x64(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f11,0x4(%esp)
mov    %esi,(%esp)
call   80494f0 <sscanf@plt>
lea    0xa4(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x8c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x88(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x84(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f11,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
movb   $0x10,0x79(%esp)
movb   $0x10,0x51(%esp)
mov    0xc(%edi),%eax
lea    0x50(%esp),%esi
test   %eax,%eax
je     804d99e <__sprintf_chk@plt+0x43ae>
mov    %esi,%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804dd24 <__sprintf_chk@plt+0x4734>
lea    0xe8(%esp),%eax
mov    %eax,0x44(%esp)
lea    0xe4(%esp),%eax
mov    %eax,0x40(%esp)
lea    0xe0(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0xdc(%esp),%eax
mov    %eax,0x38(%esp)
lea    0xd8(%esp),%eax
mov    %eax,0x34(%esp)
lea    0xd0(%esp),%eax
mov    %eax,0x30(%esp)
lea    0xcc(%esp),%eax
mov    %eax,0x2c(%esp)
lea    0xc0(%esp),%eax
mov    %eax,0x28(%esp)
lea    0xc4(%esp),%eax
mov    %eax,0x24(%esp)
lea    0xc8(%esp),%eax
mov    %eax,0x20(%esp)
lea    0xbc(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0xb8(%esp),%eax
mov    %eax,0x18(%esp)
lea    0xb4(%esp),%eax
mov    %eax,0x14(%esp)
lea    0xac(%esp),%eax
mov    %eax,0x10(%esp)
lea    0xb0(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x6(%ebx),%ecx
lea    0xa8(%esp),%eax
lea    0xec(%esp),%ebp
mov    %ebp,0x48(%esp)
mov    %eax,0x8(%esp)
movl   $0x8056eac,0x4(%esp)
mov    %ecx,(%esp)
movb   $0x0,0xec(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x10,%eax
jle    804dd50 <__sprintf_chk@plt+0x4760>
mov    0x805ec04,%eax
test   %eax,%eax
jne    804dda5 <__sprintf_chk@plt+0x47b5>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804ddd2 <__sprintf_chk@plt+0x47e2>
mov    0xb0(%esp),%eax
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0xac(%esp),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0xa0(%esp),%edx
mov    %esi,%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0xa4(%esp),%edx
lea    0x78(%esp),%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0x805b234,%ebx
test   %ebx,%ebx
je     804db70 <__sprintf_chk@plt+0x4580>
mov    0xb4(%esp),%eax
test   %eax,%eax
je     804db70 <__sprintf_chk@plt+0x4580>
cmp    $0x4,%eax
jle    804def8 <__sprintf_chk@plt+0x4908>
movl   $0x5,0xb4(%esp)
00
mov    0xc4(%esp),%esi
mov    0x805f04c,%ecx
mov    0xb8(%esp),%edi
test   %ecx,%ecx
jne    804db30 <__sprintf_chk@plt+0x4540>
call   80549c0 <__sprintf_chk@plt+0xb3d0>
mov    %eax,0x805f04c
mov    %eax,%ecx
imul   $0x3e8,%edi,%edi
lea    -0x1(%ecx,%edi,1),%eax
cltd
idiv   %ecx
call   804a930 <__sprintf_chk@plt+0x1340>
mov    %esi,0x10(%esp)
movl   $0x8055f25,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0xb4(%esp),%eax
mov    0x80567b0(,%eax,4),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b224,%ecx
test   %ecx,%ecx
je     804dc50 <__sprintf_chk@plt+0x4660>
mov    0x805f04c,%esi
test   %esi,%esi
je     804dee0 <__sprintf_chk@plt+0x48f0>
mov    0xd8(%esp),%eax
test   %eax,%eax
je     804dbc8 <__sprintf_chk@plt+0x45d8>
lea    (%esi,%esi,2),%edx
cmp    %edx,%eax
je     804dbc8 <__sprintf_chk@plt+0x45d8>
mov    %eax,0x4c(%esp)
fildl  0x4c(%esp)
mov    %esi,0x4c(%esp)
fildl  0x4c(%esp)
fdivrp %st,%st(1)
movl   $0x8055c92,0x4(%esp)
movl   $0x1,(%esp)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0xdc(%esp),%eax
test   %eax,%eax
jne    804deb0 <__sprintf_chk@plt+0x48c0>
mov    0xe4(%esp),%eax
cmp    $0x2,%eax
je     804dbfb <__sprintf_chk@plt+0x460b>
mov    %eax,0x8(%esp)
movl   $0x8055cb5,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0xe8(%esp),%eax
cmp    $0xffffffff,%eax
je     804dc1f <__sprintf_chk@plt+0x462f>
mov    %eax,0x8(%esp)
movl   $0x8055cbe,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0xe0(%esp),%eax
lea    0x1(%eax),%edx
cmp    $0x2,%edx
ja     804de80 <__sprintf_chk@plt+0x4890>
test   $0x1,%al
je     804dc50 <__sprintf_chk@plt+0x4660>
movl   $0x8055f40,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
lea    0x0(%esi),%esi
mov    0x805b22c,%edx
test   %edx,%edx
je     804dc8f <__sprintf_chk@plt+0x469f>
mov    0xc0(%esp),%eax
test   %eax,%eax
je     804dc8f <__sprintf_chk@plt+0x469f>
lea    0x1ec(%esp),%esi
mov    %esi,%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804dc8f <__sprintf_chk@plt+0x469f>
mov    %esi,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b230,%eax
test   %eax,%eax
je     804dd18 <__sprintf_chk@plt+0x4728>
mov    0xc8(%esp),%eax
test   %eax,%eax
jne    804de60 <__sprintf_chk@plt+0x4870>
mov    0xc0(%esp),%eax
movl   $0x8055f5b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0xd0(%esp),%eax
mov    0xd4(%esp),%edx
movl   $0x8055f63,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
cmpb   $0x0,0xec(%esp)
je     804dd18 <__sprintf_chk@plt+0x4728>
mov    %ebp,0x8(%esp)
movl   $0x8055f6c,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
xchg   %ax,%ax
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
xor    %eax,%eax
mov    0x11ec(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804df1a <__sprintf_chk@plt+0x492a>
add    $0x11fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
sub    $0x37,%eax
jmp    804d8ce <__sprintf_chk@plt+0x42de>
cmp    $0xb,%eax
movb   $0x0,0xec(%esp)
jg     804da7d <__sprintf_chk@plt+0x448d>
mov    0x805ec04,%eax
movl   $0x0,0xd8(%esp)
00
movl   $0x2,0xe4(%esp)
00
movl   $0xffffffff,0xe8(%esp)
ff
test   %eax,%eax
movl   $0x0,0xe0(%esp)
00
movl   $0x0,0xdc(%esp)
00
je     804da8a <__sprintf_chk@plt+0x449a>
movl   $0x805600c,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
je     804da97 <__sprintf_chk@plt+0x44a7>
mov    0xa8(%esp),%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    0x8056820(,%edx,4),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
jmp    804da97 <__sprintf_chk@plt+0x44a7>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f0b,0x4(%esp)
mov    %esi,(%esp)
call   80494f0 <sscanf@plt>
lea    0xa4(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f0b,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
movb   $0x4,0x79(%esp)
movb   $0x4,0x51(%esp)
jmp    804d984 <__sprintf_chk@plt+0x4394>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x8055f53,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804dcab <__sprintf_chk@plt+0x46bb>
lea    0x0(%esi),%esi
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
mov    %eax,0x8(%esp)
movl   $0x8055f37,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0xe0(%esp),%eax
jmp    804dc32 <__sprintf_chk@plt+0x4642>
lea    0x0(%esi),%esi
mov    %eax,0x4c(%esp)
fildl  0x4c(%esp)
mov    %esi,0x4c(%esp)
fildl  0x4c(%esp)
fdivrp %st,%st(1)
movl   $0x8055ca5,0x4(%esp)
movl   $0x1,(%esp)
fstpl  0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    804dbd7 <__sprintf_chk@plt+0x45e7>
nop
call   80549c0 <__sprintf_chk@plt+0xb3d0>
mov    %eax,0x805f04c
mov    %eax,%esi
jmp    804db8c <__sprintf_chk@plt+0x459c>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%eax
mov    0xbc(%esp),%esi
je     804db13 <__sprintf_chk@plt+0x4523>
jmp    804db0c <__sprintf_chk@plt+0x451c>
lea    0x0(%esi),%esi
mov    $0xffffffff,%eax
jmp    804dd26 <__sprintf_chk@plt+0x4736>
lea    0x0(%esi),%esi
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x10fc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x10ec(%esp)
xor    %eax,%eax
mov    (%ebx),%eax
lea    0x2c(%esp),%edi
movl   $0x8,0x4(%esp)
mov    %edi,(%esp)
sub    $0x58,%eax
mov    %eax,0xc(%esp)
lea    0x58(%ebx),%eax
mov    %eax,0x8(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
movzbl 0x11(%ebx),%eax
movzwl 0x14(%ebx),%edx
ror    $0x8,%dx
movzwl %dx,%edx
mov    %eax,0xa8(%esp)
movzbl 0x10(%ebx),%eax
mov    %edx,0xa0(%esp)
movzwl 0x16(%ebx),%edx
ror    $0x8,%dx
movzwl %dx,%edx
cmp    $0x2,%al
mov    %al,0x78(%esp)
mov    %al,0x50(%esp)
mov    %edx,0xa4(%esp)
je     804e1e8 <__sprintf_chk@plt+0x4bf8>
movb   $0x10,0x79(%esp)
mov    $0x10,%ebp
movb   $0x10,0x51(%esp)
lea    0x18(%ebx),%edx
lea    0x58(%esp),%eax
mov    %edx,0x4(%esp)
mov    %ebp,0x8(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
lea    0x80(%esp),%eax
lea    0x28(%ebx),%edx
mov    %ebp,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
test   %esi,%esi
je     804e010 <__sprintf_chk@plt+0x4a20>
mov    0xc(%esi),%eax
test   %eax,%eax
je     804e010 <__sprintf_chk@plt+0x4a20>
lea    0x50(%esp),%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804e1a4 <__sprintf_chk@plt+0x4bb4>
mov    0x805ec04,%eax
test   %eax,%eax
jne    804e200 <__sprintf_chk@plt+0x4c10>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804e22d <__sprintf_chk@plt+0x4c3d>
mov    0x4c(%ebx),%eax
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x48(%ebx),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0xa0(%esp),%edx
lea    0x50(%esp),%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0xa4(%esp),%edx
lea    0x78(%esp),%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0x805b234,%ebp
test   %ebp,%ebp
je     804e0bd <__sprintf_chk@plt+0x4acd>
movzbl 0x12(%ebx),%eax
test   %al,%al
je     804e0bd <__sprintf_chk@plt+0x4acd>
cmp    $0x4,%al
jbe    804e086 <__sprintf_chk@plt+0x4a96>
movb   $0x5,0x12(%ebx)
mov    0x44(%ebx),%eax
movzbl 0x13(%ebx),%esi
call   804a930 <__sprintf_chk@plt+0x1340>
mov    %esi,0x10(%esp)
movl   $0x8055f25,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
movzbl 0x12(%ebx),%eax
mov    0x80567b0(,%eax,4),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b22c,%esi
test   %esi,%esi
je     804e0d2 <__sprintf_chk@plt+0x4ae2>
mov    0x54(%ebx),%eax
test   %eax,%eax
jne    804e260 <__sprintf_chk@plt+0x4c70>
mov    0x805b230,%ecx
test   %ecx,%ecx
je     804e185 <__sprintf_chk@plt+0x4b95>
mov    0x50(%ebx),%eax
test   %eax,%eax
jne    804e2c8 <__sprintf_chk@plt+0x4cd8>
mov    0x54(%ebx),%eax
movl   $0x8055f5b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
movl   $0x8055f76,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x40(%ebx),%eax
test   %eax,%eax
jne    804e2a8 <__sprintf_chk@plt+0x4cb8>
mov    0x3c(%ebx),%eax
movl   $0x80577eb,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x4c(%esp),%eax
test   %eax,%eax
je     804e185 <__sprintf_chk@plt+0x4b95>
movzbl 0x4(%eax),%eax
movl   $0x8055f7b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,%edx
and    $0x2,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
and    $0x1,%eax
and    $0x11,%edx
add    $0x2d,%edx
cmp    $0x1,%al
sbb    %eax,%eax
and    $0xf,%eax
add    $0x2d,%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b228,%edx
test   %edx,%edx
jne    804e1c8 <__sprintf_chk@plt+0x4bd8>
mov    0x805b224,%eax
test   %eax,%eax
jne    804e1c8 <__sprintf_chk@plt+0x4bd8>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
xor    %eax,%eax
mov    0x10ec(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804e2e5 <__sprintf_chk@plt+0x4cf5>
add    $0x10fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8055f82,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
lea    0x11(%ebx),%eax
mov    %edi,%edx
call   804c630 <__sprintf_chk@plt+0x3040>
jmp    804e198 <__sprintf_chk@plt+0x4ba8>
movb   $0x4,0x79(%esp)
mov    $0x4,%ebp
movb   $0x4,0x51(%esp)
jmp    804dfc3 <__sprintf_chk@plt+0x49d3>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805600c,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
je     804e02a <__sprintf_chk@plt+0x4a3a>
mov    0xa8(%esp),%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    0x8056820(,%edx,4),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
jmp    804e02a <__sprintf_chk@plt+0x4a3a>
lea    0x0(%esi,%eiz,1),%esi
lea    0xec(%esp),%esi
mov    %esi,%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804e0d2 <__sprintf_chk@plt+0x4ae2>
mov    %esi,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b230,%ecx
test   %ecx,%ecx
je     804e185 <__sprintf_chk@plt+0x4b95>
jmp    804e0e0 <__sprintf_chk@plt+0x4af0>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x80577eb,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804e125 <__sprintf_chk@plt+0x4b35>
lea    0x0(%esi),%esi
mov    %eax,0x8(%esp)
movl   $0x8055f53,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804e0eb <__sprintf_chk@plt+0x4afb>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x2030,%esp
movl   $0x8055fa3,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x202c(%esp)
xor    %eax,%eax
call   8049270 <getenv@plt>
movl   $0x805606f,0x4(%esp)
mov    %eax,(%esp)
call   80493b0 <fopen@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804e474 <__sprintf_chk@plt+0x4e84>
lea    0x2c(%esp),%esi
lea    0x3c(%esp),%edi
jmp    804e3ab <__sprintf_chk@plt+0x4dbb>
cmp    $0x10,%eax
jne    804e3fe <__sprintf_chk@plt+0x4e0e>
mov    0x2c(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1ff0,0x4(%esp)
lea    -0xd(%eax),%edx
and    $0xfffffffc,%edx
mov    %edx,0xc(%esp)
mov    %edi,(%esp)
call   8049490 <__fread_chk@plt>
test   %eax,%eax
js     804e40f <__sprintf_chk@plt+0x4e1f>
mov    0x2c(%esp),%edx
add    $0x10,%eax
cmp    %edx,%eax
jb     804e3fe <__sprintf_chk@plt+0x4e0e>
movzwl 0x30(%esp),%eax
cmp    $0x3,%ax
je     804e420 <__sprintf_chk@plt+0x4e30>
cmp    $0x2,%ax
je     804e424 <__sprintf_chk@plt+0x4e34>
mov    $0x805ebe4,%edx
mov    %esi,%eax
call   804df30 <__sprintf_chk@plt+0x4940>
test   %eax,%eax
js     804e3e0 <__sprintf_chk@plt+0x4df0>
mov    %ebx,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049250 <fread@plt>
test   %eax,%eax
jns    804e338 <__sprintf_chk@plt+0x4d48>
movl   $0x8056ee8,(%esp)
call   8049200 <perror@plt>
or     $0xffffffff,%eax
xchg   %ax,%ax
mov    0x202c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804e488 <__sprintf_chk@plt+0x4e98>
add    $0x2030,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0x8056f0c,(%esp)
call   8049200 <perror@plt>
or     $0xffffffff,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
movl   $0x8055f9a,(%esp)
call   8049200 <perror@plt>
or     $0xffffffff,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
xor    %eax,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
cmp    $0x23,%edx
ja     804e453 <__sprintf_chk@plt+0x4e63>
mov    0x805b1c0,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e84,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
or     $0xffffffff,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
call   8049430 <__errno_location@plt>
mov    0x3c(%esp),%edx
neg    %edx
mov    %edx,(%eax)
movl   $0x8055fb0,(%esp)
call   8049200 <perror@plt>
or     $0xffffffff,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
movl   $0x8055f85,(%esp)
call   8049200 <perror@plt>
or     $0xffffffff,%eax
jmp    804e3e0 <__sprintf_chk@plt+0x4df0>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x210c,%esp
movl   $0x4,0x8(%esp)
movl   $0x3,0x4(%esp)
movl   $0x10,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x20fc(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
call   8049530 <socket@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
js     804eaa0 <__sprintf_chk@plt+0x54b0>
movl   $0x2,0x18(%esp)
mov    0x18(%esp),%eax
movl   $0x0,0x24(%esp)
test   %eax,%eax
je     804e8f6 <__sprintf_chk@plt+0x5306>
mov    $0x14,%eax
mov    $0x10,%edi
mov    %ax,0xb4(%esp)
mov    $0x301,%eax
mov    $0xe,%ecx
mov    %ax,0xb6(%esp)
xor    %eax,%eax
movl   $0x0,0x3c(%esp)
mov    %di,0x3c(%esp)
lea    0xc0(%esp),%edi
movl   $0x48,0xb0(%esp)
00
movl   $0x0,0xbc(%esp)
00
movl   $0x1e240,0xb8(%esp)
00
rep stos %eax,%es:(%edi)
movzbl 0x18(%esp),%eax
movl   $0x0,0x40(%esp)
movl   $0x0,0x44(%esp)
mov    %al,0xc0(%esp)
movzbl 0x1c(%esp),%eax
mov    %al,0xc1(%esp)
mov    0x805ebe8,%eax
mov    %eax,0xc4(%esp)
mov    0x805b228,%eax
test   %eax,%eax
je     804e595 <__sprintf_chk@plt+0x4fa5>
movb   $0x41,0xc2(%esp)
mov    0x805b224,%esi
test   %esi,%esi
je     804e5a7 <__sprintf_chk@plt+0x4fb7>
orb    $0xe,0xc2(%esp)
lea    0xb0(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x805ebf0,%eax
movl   $0x48,0x64(%esp)
test   %eax,%eax
je     804eaf8 <__sprintf_chk@plt+0x5508>
lea    0x24(%esp),%edx
call   804afb0 <__sprintf_chk@plt+0x19c0>
mov    0x805ebf0,%ebx
mov    $0x1,%ecx
mov    %cx,0x2e(%esp)
movl   $0x4,0x6c(%esp)
test   %ebx,%ebx
lea    0x4(%eax),%edx
mov    %dx,0x2c(%esp)
lea    0x2c(%esp),%edx
mov    %edx,0x68(%esp)
mov    0x24(%esp),%edx
mov    %eax,0x74(%esp)
mov    %edx,0x70(%esp)
mov    0xb0(%esp),%edx
lea    0x4(%eax,%edx,1),%eax
mov    %eax,0xb0(%esp)
je     804eaf8 <__sprintf_chk@plt+0x5508>
mov    $0x3,%ecx
lea    0x94(%esp),%edx
xor    %eax,%eax
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804e62c <__sprintf_chk@plt+0x503c>
lea    0x3c(%esp),%eax
mov    %eax,0x94(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x9c(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0xc,0x98(%esp)
00
mov    %eax,(%esp)
mov    %ecx,0xa0(%esp)
call   80494d0 <sendmsg@plt>
test   %eax,%eax
js     804eb56 <__sprintf_chk@plt+0x5566>
mov    $0x10,%edx
lea    0xfc(%esp),%edi
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %dx,0x30(%esp)
mov    %edi,0x48(%esp)
movl   $0x2000,0x4c(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x78(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x80(%esp)
lea    0x78(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0xc,0x7c(%esp)
movl   $0x1,0x84(%esp)
00
mov    %eax,(%esp)
movl   $0x0,0x88(%esp)
00
movl   $0x0,0x8c(%esp)
00
movl   $0x0,0x90(%esp)
00
call   8049500 <recvmsg@plt>
test   %eax,%eax
mov    %eax,%esi
js     804e860 <__sprintf_chk@plt+0x5270>
je     804eb19 <__sprintf_chk@plt+0x5529>
test   %ebp,%ebp
lea    0x0(%esi),%esi
je     804e750 <__sprintf_chk@plt+0x5160>
lea    0x3(%eax),%eax
and    $0xfffffffc,%eax
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8049210 <fwrite@plt>
cmp    $0xf,%esi
jle    804e791 <__sprintf_chk@plt+0x51a1>
mov    0xfc(%esp),%eax
cmp    $0xf,%eax
jbe    804e791 <__sprintf_chk@plt+0x51a1>
cmp    %eax,%esi
jb     804e791 <__sprintf_chk@plt+0x51a1>
mov    %edi,%ebx
nop
cmpl   $0x1e240,0x8(%ebx)
je     804e7d0 <__sprintf_chk@plt+0x51e0>
mov    (%ebx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
add    %eax,%ebx
cmp    $0xf,%esi
jle    804e848 <__sprintf_chk@plt+0x5258>
mov    (%ebx),%eax
cmp    $0xf,%eax
jbe    804e791 <__sprintf_chk@plt+0x51a1>
cmp    %esi,%eax
jbe    804e768 <__sprintf_chk@plt+0x5178>
testb  $0x20,0x90(%esp)
jne    804e880 <__sprintf_chk@plt+0x5290>
mov    0x805b1c0,%eax
mov    %esi,0xc(%esp)
movl   $0x8055fe4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movzwl 0x4(%ebx),%edx
cmp    $0x3,%dx
je     804e8cf <__sprintf_chk@plt+0x52df>
cmp    $0x2,%dx
je     804eaa8 <__sprintf_chk@plt+0x54b8>
test   %ebp,%ebp
jne    804e771 <__sprintf_chk@plt+0x5181>
movzbl 0x10(%ebx),%edx
mov    0x805ebec,%ecx
bt     %edx,%ecx
jae    804e773 <__sprintf_chk@plt+0x5183>
xor    %edx,%edx
mov    %ebx,%eax
call   804df30 <__sprintf_chk@plt+0x4940>
test   %eax,%eax
jns    804e771 <__sprintf_chk@plt+0x5181>
mov    %eax,0x18(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
mov    0x18(%esp),%edx
mov    %edx,%eax
mov    0x20fc(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804eb51 <__sprintf_chk@plt+0x5561>
add    $0x210c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
testb  $0x20,0x90(%esp)
jne    804e880 <__sprintf_chk@plt+0x5290>
test   %esi,%esi
je     804e6b8 <__sprintf_chk@plt+0x50c8>
jmp    804e79f <__sprintf_chk@plt+0x51af>
nop
call   8049430 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     804e6b8 <__sprintf_chk@plt+0x50c8>
movl   $0x8055e6c,(%esp)
call   8049200 <perror@plt>
jmp    804e6b8 <__sprintf_chk@plt+0x50c8>
nop
mov    0x805b1c0,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055fd1,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
jmp    804e6b8 <__sprintf_chk@plt+0x50c8>
mov    0x805b1c0,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e84,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
cmpl   $0x2,0x18(%esp)
jne    804eae2 <__sprintf_chk@plt+0x54f2>
movl   $0xa,0x18(%esp)
mov    0x18(%esp),%eax
movl   $0x0,0x24(%esp)
test   %eax,%eax
jne    804e4f3 <__sprintf_chk@plt+0x4f03>
mov    0x1c(%esp),%eax
movl   $0x0,0x28(%esp)
cmp    $0x11,%eax
je     804eaa0 <__sprintf_chk@plt+0x54b0>
cmp    $0x6,%eax
mov    $0x301,%edi
setne  %al
mov    $0xf,%ecx
movzbl %al,%eax
mov    $0x10,%esi
add    $0x12,%eax
mov    %ax,0xb4(%esp)
mov    0x18(%esp),%eax
mov    %di,0xb6(%esp)
lea    0xc0(%esp),%edi
movl   $0x4c,0xb0(%esp)
00
movl   $0x0,0xbc(%esp)
00
movl   $0x1e240,0xb8(%esp)
00
rep stos %eax,%es:(%edi)
mov    0x805ebe8,%eax
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x44(%esp)
mov    %eax,0xf4(%esp)
mov    0x805b228,%eax
mov    %si,0x3c(%esp)
movb   $0x2,0xc0(%esp)
test   %eax,%eax
je     804e9a6 <__sprintf_chk@plt+0x53b6>
movb   $0x41,0xc3(%esp)
mov    0x805b224,%ebx
test   %ebx,%ebx
je     804e9b8 <__sprintf_chk@plt+0x53c8>
orb    $0xe,0xc3(%esp)
lea    0xb0(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x805ebf0,%eax
movl   $0x4c,0x64(%esp)
test   %eax,%eax
je     804eb0f <__sprintf_chk@plt+0x551f>
lea    0x28(%esp),%edx
call   804afb0 <__sprintf_chk@plt+0x19c0>
mov    $0x1,%edx
mov    0x805ebf0,%ecx
mov    %dx,0x2e(%esp)
movl   $0x4,0x6c(%esp)
test   %ecx,%ecx
lea    0x4(%eax),%edx
mov    %dx,0x2c(%esp)
lea    0x2c(%esp),%edx
mov    %edx,0x68(%esp)
mov    0x28(%esp),%edx
mov    %eax,0x74(%esp)
mov    %edx,0x70(%esp)
mov    0xb0(%esp),%edx
lea    0x4(%eax,%edx,1),%eax
mov    %eax,0xb0(%esp)
je     804eb0f <__sprintf_chk@plt+0x551f>
mov    $0x3,%ecx
lea    0x94(%esp),%edx
xor    %eax,%eax
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804ea3d <__sprintf_chk@plt+0x544d>
lea    0x3c(%esp),%eax
mov    %eax,0x94(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x9c(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0xc,0x98(%esp)
00
mov    %eax,(%esp)
mov    %ecx,0xa0(%esp)
call   80494d0 <sendmsg@plt>
test   %eax,%eax
jns    804e683 <__sprintf_chk@plt+0x5093>
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
or     $0xffffffff,%eax
jmp    804e826 <__sprintf_chk@plt+0x5236>
cmp    $0x23,%eax
jbe    804e8aa <__sprintf_chk@plt+0x52ba>
mov    0x18(%esp),%eax
test   %eax,%eax
jne    804eb02 <__sprintf_chk@plt+0x5512>
mov    %ebx,0x18(%esp)
call   8049430 <__errno_location@plt>
mov    0x18(%esp),%ecx
mov    0x10(%ecx),%edx
neg    %edx
cmp    $0x5f,%edx
mov    %edx,(%eax)
je     804eb56 <__sprintf_chk@plt+0x5566>
movl   $0x8055fc1,(%esp)
call   8049200 <perror@plt>
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
xor    %eax,%eax
jmp    804e826 <__sprintf_chk@plt+0x5236>
lea    0x0(%esi),%esi
mov    $0x1,%ecx
jmp    804e623 <__sprintf_chk@plt+0x5033>
movl   $0x0,0x18(%esp)
jmp    804e4df <__sprintf_chk@plt+0x4eef>
mov    $0x1,%ecx
jmp    804ea34 <__sprintf_chk@plt+0x5444>
mov    0x805b1c0,%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e74,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
xor    %eax,%eax
jmp    804e826 <__sprintf_chk@plt+0x5236>
call   8049190 <__stack_chk_fail@plt>
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
or     $0xffffffff,%eax
jmp    804e826 <__sprintf_chk@plt+0x5236>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x1c,%esp
movl   $0x8055fa3,(%esp)
movl   $0x805600c,0x805c334
08
call   8049270 <getenv@plt>
test   %eax,%eax
je     804eb9f <__sprintf_chk@plt+0x55af>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804e2f0 <__sprintf_chk@plt+0x4d00>
movl   $0x8055ffb,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     804ecef <__sprintf_chk@plt+0x56ff>
mov    0x805f024,%eax
add    0x805f030,%eax
testb  $0x40,0x805ebe8
je     804ebcd <__sprintf_chk@plt+0x55dd>
add    0x805f02c,%eax
cmp    $0x20000,%eax
mov    $0x1000000,%ebx
jle    804ec0e <__sprintf_chk@plt+0x561e>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804ec20 <__sprintf_chk@plt+0x5630>
sar    %ebx
cmp    $0xffff,%ebx
jg     804ebe0 <__sprintf_chk@plt+0x55f0>
call   8049430 <__errno_location@plt>
movl   $0xc,(%eax)
or     $0xffffffff,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
shl    $0x7,%eax
mov    $0x10000,%ebx
cmp    $0x10000,%eax
cmovge %eax,%ebx
jmp    804ebe0 <__sprintf_chk@plt+0x55f0>
mov    0x805ebec,%eax
test   $0x4,%al
jne    804ec7c <__sprintf_chk@plt+0x568c>
test   $0x4,%ah
je     804ec70 <__sprintf_chk@plt+0x5680>
mov    $0x8056010,%edx
mov    $0x8056019,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%edi
je     804ec70 <__sprintf_chk@plt+0x5680>
mov    %eax,(%esp)
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
call   80494b0 <setbuffer@plt>
mov    $0xa,%ecx
mov    $0x804d840,%edx
mov    %edi,%eax
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804eccc <__sprintf_chk@plt+0x56dc>
mov    %edi,(%esp)
call   8049100 <fclose@plt>
mov    %esi,(%esp)
call   80490b0 <free@plt>
xor    %eax,%eax
jmp    804ec06 <__sprintf_chk@plt+0x5616>
mov    $0x8056008,%edx
mov    $0x8055ffb,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%edi
je     804ed17 <__sprintf_chk@plt+0x5727>
mov    %eax,(%esp)
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
call   80494b0 <setbuffer@plt>
mov    $0x2,%ecx
mov    $0x804d840,%edx
mov    %edi,%eax
call   804d670 <__sprintf_chk@plt+0x4080>
test   %eax,%eax
jne    804eccc <__sprintf_chk@plt+0x56dc>
mov    %edi,(%esp)
call   8049100 <fclose@plt>
mov    0x805ebec,%eax
jmp    804ec29 <__sprintf_chk@plt+0x5639>
call   8049430 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%ebx
mov    %esi,(%esp)
call   80490b0 <free@plt>
mov    %edi,(%esp)
call   8049100 <fclose@plt>
mov    %ebp,(%ebx)
or     $0xffffffff,%eax
jmp    804ec06 <__sprintf_chk@plt+0x5616>
movl   $0x8055b20,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
jne    804ebb3 <__sprintf_chk@plt+0x55c3>
mov    %ebx,%edx
call   804e490 <__sprintf_chk@plt+0x4ea0>
test   %eax,%eax
jne    804ebb3 <__sprintf_chk@plt+0x55c3>
jmp    804ec06 <__sprintf_chk@plt+0x5616>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
call   8049430 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%ebx
mov    %esi,(%esp)
call   80490b0 <free@plt>
jmp    804ece5 <__sprintf_chk@plt+0x56f5>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x11dc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x11cc(%esp)
xor    %eax,%eax
mov    0x11f0(%esp),%eax
movl   $0x3a,0x4(%esp)
mov    0x11f4(%esp),%edi
mov    %eax,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     804f158 <__sprintf_chk@plt+0x5b68>
lea    0x2(%eax),%esi
movl   $0x3a,0x4(%esp)
mov    %esi,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     804f158 <__sprintf_chk@plt+0x5b68>
lea    0x6(%eax),%ebp
movb   $0x0,0x5(%eax)
movl   $0x3a,0x4(%esp)
mov    %ebp,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804f158 <__sprintf_chk@plt+0x5b68>
movb   $0x0,0x5(%eax)
movsbl 0x7(%eax),%eax
cmp    $0x40,%al
jg     804f068 <__sprintf_chk@plt+0x5a78>
sub    $0x30,%eax
mov    0x4(%edi),%edx
bt     %eax,%edx
jae    804f044 <__sprintf_chk@plt+0x5a54>
movzbl 0x11f8(%esp),%eax
cmpl   $0x2,0x11f8(%esp)
mov    %al,0x58(%esp)
mov    %al,0x30(%esp)
lea    0x80(%esp),%eax
je     804f0e8 <__sprintf_chk@plt+0x5af8>
mov    %eax,0x18(%esp)
lea    0x44(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f11,0x4(%esp)
mov    %esi,(%esp)
call   80494f0 <sscanf@plt>
lea    0x84(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f11,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
movb   $0x10,0x59(%esp)
movb   $0x10,0x31(%esp)
mov    0xc(%edi),%eax
lea    0x30(%esp),%esi
test   %eax,%eax
je     804ee92 <__sprintf_chk@plt+0x58a2>
mov    %esi,%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804f044 <__sprintf_chk@plt+0x5a54>
lea    0xb0(%esp),%eax
mov    %eax,0x20(%esp)
lea    0xac(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0xa0(%esp),%eax
mov    %eax,0x18(%esp)
lea    0xa8(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x8c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x90(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x6(%ebx),%ecx
lea    0x88(%esp),%eax
lea    0xcc(%esp),%edi
mov    %edi,0x24(%esp)
mov    %eax,0x8(%esp)
movl   $0x8056f34,0x4(%esp)
mov    %ecx,(%esp)
movb   $0x0,0xcc(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x8,%eax
jle    804f070 <__sprintf_chk@plt+0x5a80>
mov    0x805ec04,%eax
test   %eax,%eax
jne    804f085 <__sprintf_chk@plt+0x5a95>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804f0b4 <__sprintf_chk@plt+0x5ac4>
mov    0x90(%esp),%eax
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x8c(%esp),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x80(%esp),%edx
mov    %esi,%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0x84(%esp),%edx
lea    0x58(%esp),%eax
call   804b4d0 <__sprintf_chk@plt+0x1ee0>
mov    0x805b22c,%edx
test   %edx,%edx
je     804efaf <__sprintf_chk@plt+0x59bf>
mov    0xa0(%esp),%eax
test   %eax,%eax
je     804efaf <__sprintf_chk@plt+0x59bf>
lea    0x1cc(%esp),%esi
mov    %esi,%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804efaf <__sprintf_chk@plt+0x59bf>
mov    %esi,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b230,%eax
test   %eax,%eax
je     804f038 <__sprintf_chk@plt+0x5a48>
mov    0xa8(%esp),%eax
test   %eax,%eax
jne    804f138 <__sprintf_chk@plt+0x5b48>
mov    0xa0(%esp),%eax
movl   $0x805602f,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0xb0(%esp),%eax
mov    0xb4(%esp),%edx
movl   $0x8056118,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
cmpb   $0x0,0xcc(%esp)
je     804f038 <__sprintf_chk@plt+0x5a48>
mov    %edi,0x8(%esp)
movl   $0x8055f6c,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
xchg   %ax,%ax
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
xor    %eax,%eax
mov    0x11cc(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804f162 <__sprintf_chk@plt+0x5b72>
add    $0x11dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
sub    $0x37,%eax
jmp    804edce <__sprintf_chk@plt+0x57de>
mov    0x805ec04,%eax
movb   $0x0,0xcc(%esp)
test   %eax,%eax
je     804ef1b <__sprintf_chk@plt+0x592b>
mov    0x805c334,%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
je     804ef28 <__sprintf_chk@plt+0x5938>
mov    0x88(%esp),%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    0x8056820(,%edx,4),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
jmp    804ef28 <__sprintf_chk@plt+0x5938>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f0b,0x4(%esp)
mov    %esi,(%esp)
call   80494f0 <sscanf@plt>
lea    0x84(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f0b,0x4(%esp)
mov    %ebp,(%esp)
call   80494f0 <sscanf@plt>
movb   $0x4,0x59(%esp)
movb   $0x4,0x31(%esp)
jmp    804ee78 <__sprintf_chk@plt+0x5888>
xchg   %ax,%ax
mov    %eax,0x8(%esp)
movl   $0x8056027,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804efcb <__sprintf_chk@plt+0x59db>
lea    0x0(%esi),%esi
mov    $0xffffffff,%eax
jmp    804f046 <__sprintf_chk@plt+0x5a56>
call   8049190 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ebp,%ebx
sub    $0x10dc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x10cc(%esp)
xor    %eax,%eax
test   %ebp,%ebp
je     804f312 <__sprintf_chk@plt+0x5d22>
nop
mov    0x14(%ebx),%eax
mov    0x4(%esi),%edx
bt     %eax,%edx
jae    804f308 <__sprintf_chk@plt+0x5d18>
mov    0x18(%ebx),%eax
cmp    $0x1,%eax
je     804f338 <__sprintf_chk@plt+0x5d48>
cmp    $0x2,%eax
je     804f358 <__sprintf_chk@plt+0x5d68>
mov    0x8(%ebx),%edx
mov    $0x8055c26,%edi
test   %edx,%edx
je     804f1ec <__sprintf_chk@plt+0x5bfc>
cmp    0x4(%ebp),%edx
mov    %ebp,%eax
jne    804f1e1 <__sprintf_chk@plt+0x5bf1>
jmp    804f368 <__sprintf_chk@plt+0x5d78>
lea    0x0(%esi,%eiz,1),%esi
cmp    0x4(%eax),%edx
je     804f368 <__sprintf_chk@plt+0x5d78>
mov    (%eax),%eax
test   %eax,%eax
jne    804f1d8 <__sprintf_chk@plt+0x5be8>
mov    $0x80577f2,%edi
mov    0xc(%esi),%eax
test   %eax,%eax
je     804f230 <__sprintf_chk@plt+0x5c40>
movb   $0x1,0x58(%esp)
mov    0x1c(%ebx),%edx
movb   $0x1,0x30(%esp)
mov    %edx,0x38(%esp)
cmpb   $0x2a,(%edi)
jne    804f348 <__sprintf_chk@plt+0x5d58>
cmpb   $0x0,0x1(%edi)
jne    804f348 <__sprintf_chk@plt+0x5d58>
movl   $0x0,0x60(%esp)
lea    0x30(%esp),%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804f308 <__sprintf_chk@plt+0x5d18>
mov    0x805ec04,%eax
test   %eax,%eax
je     804f266 <__sprintf_chk@plt+0x5c76>
cmpl   $0x1,0x18(%ebx)
mov    $0x8056037,%edx
mov    $0x805603d,%ecx
mov    %eax,0x8(%esp)
cmovne %ecx,%edx
mov    %edx,0xc(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804f380 <__sprintf_chk@plt+0x5d90>
mov    0x10(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0xc(%ebx),%eax
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x1c(%ebx),%edx
mov    $0x8055c26,%eax
mov    0x4(%ebx),%ecx
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%ebx),%edx
mov    %edi,0x1c(%esp)
mov    0x805ebfc,%edi
mov    %ecx,0x14(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x24(%esp)
mov    0x805ebf8,%edx
mov    %edi,0x18(%esp)
mov    %edi,0x8(%esp)
movl   $0x8056043,0x4(%esp)
mov    %edx,0x20(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b22c,%eax
test   %eax,%eax
je     804f2fc <__sprintf_chk@plt+0x5d0c>
mov    0x4(%ebx),%eax
test   %eax,%eax
jne    804f3b0 <__sprintf_chk@plt+0x5dc0>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
mov    (%ebx),%ebx
test   %ebx,%ebx
jne    804f198 <__sprintf_chk@plt+0x5ba8>
mov    0x10cc(%esp),%eax
xor    %gs:0x14,%eax
jne    804f3e8 <__sprintf_chk@plt+0x5df8>
add    $0x10dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
testb  $0x20,(%esi)
je     804f308 <__sprintf_chk@plt+0x5d18>
jmp    804f1bc <__sprintf_chk@plt+0x5bcc>
lea    0x0(%esi),%esi
mov    %edi,0x60(%esp)
lea    0x0(%esi,%eiz,1),%esi
jmp    804f21f <__sprintf_chk@plt+0x5c2f>
lea    0x0(%esi),%esi
testb  $0x10,(%esi)
je     804f308 <__sprintf_chk@plt+0x5d18>
lea    0x0(%esi),%esi
jmp    804f1bc <__sprintf_chk@plt+0x5bcc>
lea    0x0(%esi),%esi
mov    0x1c(%eax),%edi
mov    $0x8055c26,%eax
test   %edi,%edi
cmove  %eax,%edi
jmp    804f1ec <__sprintf_chk@plt+0x5bfc>
lea    0x0(%esi),%esi
mov    0x14(%ebx),%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    0x8056820(,%edx,4),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
jmp    804f273 <__sprintf_chk@plt+0x5c83>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0xcc(%esp),%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804f2fc <__sprintf_chk@plt+0x5d0c>
lea    0xcc(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804f2fc <__sprintf_chk@plt+0x5d0c>
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1ec,%esp
movl   $0x8056055,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x1dc(%esp)
xor    %eax,%eax
movl   $0x0,0x30(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     804f6ac <__sprintf_chk@plt+0x60bc>
mov    $0x8056063,%edx
mov    $0x8056055,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     804f730 <__sprintf_chk@plt+0x6140>
mov    0x28(%esp),%eax
lea    0xdc(%esp),%edi
xor    %ebx,%ebx
movl   $0xff,0x4(%esp)
xor    %esi,%esi
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
movl   $0x4,0x8(%esp)
movl   $0x805606c,0x4(%esp)
mov    %edi,(%esp)
call   8049120 <memcmp@plt>
mov    %eax,0x2c(%esp)
nop
mov    0x28(%esp),%eax
movl   $0xff,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804f65b <__sprintf_chk@plt+0x606b>
movl   $0x20,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804f65b <__sprintf_chk@plt+0x606b>
movl   $0x0,0x1c(%eax)
lea    0x5c(%esp),%eax
mov    %eax,0x24(%esp)
lea    0x4(%ebp),%eax
mov    %eax,0x20(%esp)
lea    0x14(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    0x18(%ebp),%eax
mov    %eax,0x18(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x10(%ebp),%eax
mov    %eax,0x10(%esp)
lea    0xc(%ebp),%eax
mov    %eax,0xc(%esp)
lea    0x8(%ebp),%eax
mov    %eax,0x8(%esp)
movl   $0x8056071,0x4(%esp)
mov    %edi,(%esp)
call   80494f0 <sscanf@plt>
cmp    $0x7,%eax
jg     804f511 <__sprintf_chk@plt+0x5f21>
movb   $0x0,0x5c(%esp)
testb  $0x1,0x36(%esp)
je     804f5c0 <__sprintf_chk@plt+0x5fd0>
movl   $0xa,0x14(%ebp)
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804f540 <__sprintf_chk@plt+0x5f50>
movl   $0x0,0x8(%ebp)
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
test   %ebx,%ebx
je     804f6a3 <__sprintf_chk@plt+0x60b3>
mov    0x18(%ebp),%ecx
lea    0x30(%esp),%eax
mov    0x18(%ebx),%edx
cmp    %ecx,%edx
jle    804f567 <__sprintf_chk@plt+0x5f77>
jmp    804f578 <__sprintf_chk@plt+0x5f88>
mov    %ebx,%eax
mov    (%ebx),%ebx
test   %ebx,%ebx
je     804f578 <__sprintf_chk@plt+0x5f88>
mov    0x18(%ebx),%edx
cmp    %ecx,%edx
jg     804f578 <__sprintf_chk@plt+0x5f88>
cmp    %ecx,%edx
jne    804f558 <__sprintf_chk@plt+0x5f68>
mov    0x4(%ebx),%edx
cmp    %edx,0x4(%ebp)
jge    804f558 <__sprintf_chk@plt+0x5f68>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x0(%ebp)
mov    %ebp,(%eax)
cmpb   $0x0,0x5c(%esp)
jne    804f5f8 <__sprintf_chk@plt+0x6008>
add    $0x1,%esi
mov    0x30(%esp),%ebx
cmp    $0x8000,%esi
jbe    804f480 <__sprintf_chk@plt+0x5e90>
mov    %ebx,%eax
mov    $0x805ebe4,%edx
call   804f170 <__sprintf_chk@plt+0x5b80>
mov    %ebx,%eax
xor    %esi,%esi
call   804b3f0 <__sprintf_chk@plt+0x1e00>
xor    %ebx,%ebx
movl   $0x0,0x30(%esp)
jmp    804f480 <__sprintf_chk@plt+0x5e90>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%ebp),%eax
cmpl   $0x2,0x18(%ebp)
mov    0x805b180(,%eax,4),%eax
mov    %eax,0x14(%ebp)
jne    804f523 <__sprintf_chk@plt+0x5f33>
cmp    $0x7,%eax
jne    804f523 <__sprintf_chk@plt+0x5f33>
cmpl   $0x0,0x8(%ebp)
je     804f523 <__sprintf_chk@plt+0x5f33>
movl   $0x1,0x14(%ebp)
jmp    804f523 <__sprintf_chk@plt+0x5f33>
xchg   %ax,%ax
lea    0x5c(%esp),%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     804f5fc <__sprintf_chk@plt+0x600c>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
lea    0x5c(%esp),%eax
sub    %eax,%edx
lea    0x1(%edx),%ebx
mov    %ebx,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,0x1c(%ebp)
je     804f65b <__sprintf_chk@plt+0x606b>
lea    0x5c(%esp),%ecx
mov    %ebx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
jmp    804f584 <__sprintf_chk@plt+0x5f94>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049100 <fclose@plt>
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804f682 <__sprintf_chk@plt+0x6092>
mov    %ebx,%eax
mov    $0x805ebe4,%edx
call   804f170 <__sprintf_chk@plt+0x5b80>
mov    %ebx,%eax
call   804b3f0 <__sprintf_chk@plt+0x1e00>
xor    %eax,%eax
mov    0x1dc(%esp),%edi
xor    %gs:0x14,%edi
jne    804f738 <__sprintf_chk@plt+0x6148>
add    $0x1ec,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x30(%esp),%eax
jmp    804f578 <__sprintf_chk@plt+0x5f88>
movl   $0x8055b20,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
jne    804f425 <__sprintf_chk@plt+0x5e35>
lea    0x34(%esp),%ebx
mov    $0xa,%ecx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
mov    0x805ebe8,%eax
cmpl   $0x0,0x805b228
movl   $0x28,0x34(%esp)
movw   $0x14,0x38(%esp)
movw   $0x301,0x3a(%esp)
movl   $0x1e240,0x3c(%esp)
movb   $0x1,0x44(%esp)
mov    %eax,0x48(%esp)
movl   $0x15,0x50(%esp)
je     804f712 <__sprintf_chk@plt+0x6122>
movl   $0x35,0x50(%esp)
mov    $0x804f750,%ecx
mov    $0x28,%edx
mov    %ebx,%eax
call   804d0b0 <__sprintf_chk@plt+0x3ac0>
test   %eax,%eax
jne    804f425 <__sprintf_chk@plt+0x5e35>
jmp    804f682 <__sprintf_chk@plt+0x6092>
or     $0xffffffff,%eax
jmp    804f684 <__sprintf_chk@plt+0x6094>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x10dc,%esp
mov    0x10f0(%esp),%ebx
lea    0x30(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x10cc(%esp)
xor    %eax,%eax
mov    (%ebx),%eax
movl   $0x6,0x4(%esp)
mov    %esi,(%esp)
sub    $0x20,%eax
mov    %eax,0xc(%esp)
lea    0x20(%ebx),%eax
mov    %eax,0x8(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
mov    0x805ec04,%eax
test   %eax,%eax
je     804f7ca <__sprintf_chk@plt+0x61da>
cmpb   $0x1,0x11(%ebx)
mov    $0x8056037,%edx
mov    $0x805603d,%ecx
mov    %eax,0x8(%esp)
cmovne %ecx,%edx
mov    %edx,0xc(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804f958 <__sprintf_chk@plt+0x6368>
mov    0x40(%esp),%edx
test   %edx,%edx
je     804f98b <__sprintf_chk@plt+0x639b>
mov    0x4(%edx),%eax
mov    0x8(%edx),%edx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x805608a,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x30(%esp),%edx
test   %edx,%edx
je     804f9f8 <__sprintf_chk@plt+0x6408>
movzwl (%edx),%ebp
lea    0x4c(%esp),%edi
add    $0x4,%edx
movl   $0x80,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %edi,(%esp)
sub    $0x4,%ebp
mov    %ebp,0x8(%esp)
call   80492c0 <__memcpy_chk@plt>
movb   $0x0,0x4c(%esp,%ebp,1)
cmpb   $0x0,0x4c(%esp)
je     804f940 <__sprintf_chk@plt+0x6350>
mov    0x38(%esp),%eax
test   %eax,%eax
je     804f951 <__sprintf_chk@plt+0x6361>
mov    0x4(%eax),%ecx
mov    0x805ebf8,%edx
mov    0x805ebfc,%eax
mov    %ecx,0x24(%esp)
movl   $0x8055c26,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x18(%esp)
mov    0x14(%ebx),%ecx
mov    %edx,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x8056043,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b22c,%ecx
test   %ecx,%ecx
je     804f8b0 <__sprintf_chk@plt+0x62c0>
mov    0x14(%ebx),%eax
test   %eax,%eax
jne    804f9c0 <__sprintf_chk@plt+0x63d0>
mov    0x805b228,%edx
test   %edx,%edx
jne    804f998 <__sprintf_chk@plt+0x63a8>
mov    0x805b230,%eax
test   %eax,%eax
je     804f90c <__sprintf_chk@plt+0x631c>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804f90c <__sprintf_chk@plt+0x631c>
movzbl 0x4(%eax),%eax
movl   $0x8055f7b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,%edx
and    $0x2,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
and    $0x1,%eax
and    $0x11,%edx
add    $0x2d,%edx
cmp    $0x1,%al
sbb    %eax,%eax
and    $0xf,%eax
add    $0x2d,%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
xor    %eax,%eax
mov    0x10cc(%esp),%esi
xor    %gs:0x14,%esi
jne    804fa0b <__sprintf_chk@plt+0x641b>
add    $0x10dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
movb   $0x40,0x4c(%esp)
test   %eax,%eax
jne    804f852 <__sprintf_chk@plt+0x6262>
xor    %ecx,%ecx
jmp    804f855 <__sprintf_chk@plt+0x6265>
movzbl 0x12(%ebx),%edx
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    0x8056820(,%edx,4),%edx
mov    %edx,0xc(%esp)
call   8049480 <__printf_chk@plt>
mov    0x40(%esp),%edx
test   %edx,%edx
jne    804f7e3 <__sprintf_chk@plt+0x61f3>
xor    %edx,%edx
xor    %eax,%eax
jmp    804f7e9 <__sprintf_chk@plt+0x61f9>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8055f82,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    $0x5,%edx
mov    %esi,%eax
call   804b430 <__sprintf_chk@plt+0x1e40>
jmp    804f8be <__sprintf_chk@plt+0x62ce>
lea    0x0(%esi),%esi
lea    0xcc(%esp),%ebx
mov    %ebx,%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804f8b0 <__sprintf_chk@plt+0x62c0>
mov    %ebx,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804f8b0 <__sprintf_chk@plt+0x62c0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x2a,%edi
mov    %di,0x4c(%esp)
lea    0x4c(%esp),%edi
jmp    804f846 <__sprintf_chk@plt+0x6256>
call   8049190 <__stack_chk_fail@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x312c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x311c(%esp)
xor    %eax,%eax
testb  $0x80,0x805ebe8
jne    804fa53 <__sprintf_chk@plt+0x6463>
xor    %eax,%eax
mov    0x311c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805033f <__sprintf_chk@plt+0x6d4f>
add    $0x312c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x4,0x8(%esp)
movl   $0x3,0x4(%esp)
movl   $0x10,(%esp)
call   8049530 <socket@plt>
test   %eax,%eax
mov    %eax,%ebx
mov    %eax,0x2c(%esp)
js     804ff7f <__sprintf_chk@plt+0x698f>
lea    0x80(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x9,%ecx
rep stos %eax,%es:(%edi)
movl   $0x0,0xc(%esp)
movl   $0x24,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x24,0x80(%esp)
00
movw   $0x14,0x84(%esp)
00
movw   $0x301,0x86(%esp)
03
movl   $0x1e240,0x88(%esp)
00
movb   $0x11,0x90(%esp)
movl   $0x31,0x98(%esp)
00
call   80495e0 <send@plt>
test   %eax,%eax
js     804ff73 <__sprintf_chk@plt+0x6983>
lea    0x50(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x54(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x111c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x2000,0x8(%esp)
movl   $0xc,0x50(%esp)
mov    %eax,(%esp)
call   8049160 <recvfrom@plt>
test   %eax,%eax
js     804fedd <__sprintf_chk@plt+0x68ed>
je     805028f <__sprintf_chk@plt+0x6c9f>
cmp    $0xf,%eax
jle    804ff0b <__sprintf_chk@plt+0x691b>
mov    0x111c(%esp),%edx
cmp    $0xf,%edx
jbe    804ff0b <__sprintf_chk@plt+0x691b>
cmp    %eax,%edx
mov    %eax,%esi
ja     804ff0b <__sprintf_chk@plt+0x691b>
lea    0x111c(%esp),%ebp
jmp    804fb9c <__sprintf_chk@plt+0x65ac>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
lea    0x3(%eax),%edx
and    $0xfffffffc,%edx
sub    %edx,%esi
add    %edx,%ebp
cmp    $0xf,%esi
mov    %esi,%eax
jle    804ff03 <__sprintf_chk@plt+0x6913>
mov    0x0(%ebp),%edx
cmp    $0xf,%edx
jbe    804ff0b <__sprintf_chk@plt+0x691b>
cmp    %esi,%edx
ja     804ff0b <__sprintf_chk@plt+0x691b>
cmpl   $0x1e240,0x8(%ebp)
jne    804fb70 <__sprintf_chk@plt+0x6580>
movzwl 0x4(%ebp),%eax
cmp    $0x3,%ax
je     80502b4 <__sprintf_chk@plt+0x6cc4>
cmp    $0x2,%ax
je     804ff38 <__sprintf_chk@plt+0x6948>
lea    0x20(%ebp),%eax
sub    $0x20,%edx
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x7,0x4(%esp)
mov    %eax,(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
mov    0x78(%esp),%eax
test   %eax,%eax
je     804ff73 <__sprintf_chk@plt+0x6983>
mov    0x805ec04,%eax
test   %eax,%eax
je     804fc21 <__sprintf_chk@plt+0x6631>
cmpb   $0x3,0x11(%ebp)
mov    $0x8056095,%edx
mov    $0x805609b,%ecx
mov    %eax,0x8(%esp)
cmovne %ecx,%edx
mov    %edx,0xc(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    804fe40 <__sprintf_chk@plt+0x6850>
mov    0x78(%esp),%eax
test   %eax,%eax
je     804fe6c <__sprintf_chk@plt+0x687c>
mov    0x4(%eax),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
movzwl 0x12(%ebp),%eax
cmp    $0x3,%ax
je     804fed0 <__sprintf_chk@plt+0x68e0>
lea    0x11c(%esp),%ecx
ror    $0x8,%ax
movzwl %ax,%eax
movl   $0x10,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8055330 <__sprintf_chk@plt+0xbd40>
mov    %eax,0xc(%esp)
mov    0x805ebfc,%eax
movl   $0x8055c11,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x60(%esp),%eax
test   %eax,%eax
je     804fe30 <__sprintf_chk@plt+0x6840>
mov    0x4(%eax),%ebx
test   %ebx,%ebx
je     804fe30 <__sprintf_chk@plt+0x6840>
mov    0x805c328,%eax
test   %eax,%eax
jne    804fcd3 <__sprintf_chk@plt+0x66e3>
call   804a6a0 <__sprintf_chk@plt+0x10b0>
mov    %ebx,(%esp)
call   8051990 <__sprintf_chk@plt+0x83a0>
mov    %eax,0xc(%esp)
mov    0x805ebf8,%eax
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf8,%eax
movl   $0x8055f84,0x14(%esp)
movl   $0x8055f84,0xc(%esp)
movl   $0x8055c42,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x805ebfc,%eax
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b22c,%edi
test   %edi,%edi
je     804fd47 <__sprintf_chk@plt+0x6757>
mov    0x14(%ebp),%eax
test   %eax,%eax
jne    804fe98 <__sprintf_chk@plt+0x68a8>
mov    0x805b230,%ebx
test   %ebx,%ebx
je     804fda5 <__sprintf_chk@plt+0x67b5>
mov    0x74(%esp),%eax
test   %eax,%eax
je     804fefc <__sprintf_chk@plt+0x690c>
mov    0x4(%eax),%eax
mov    %eax,0xc(%esp)
mov    0x14(%ebp),%eax
movl   $0x80560b3,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x1c(%ebp),%eax
test   %eax,%eax
jne    804fe78 <__sprintf_chk@plt+0x6888>
mov    0x18(%ebp),%eax
movl   $0x80577eb,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b220,%ecx
test   %ecx,%ecx
je     804fe1b <__sprintf_chk@plt+0x682b>
mov    0x7c(%esp),%eax
test   %eax,%eax
je     804fe1b <__sprintf_chk@plt+0x682b>
movzwl (%eax),%edi
lea    0x4(%eax),%ebx
movl   $0x80560c6,0x4(%esp)
movl   $0x1,(%esp)
sub    $0x4,%edi
shr    $0x3,%edi
mov    %edi,0x8(%esp)
call   8049480 <__printf_chk@plt>
test   %edi,%edi
je     804fe1b <__sprintf_chk@plt+0x682b>
nop
mov    0x4(%ebx),%eax
add    $0x8,%ebx
mov    %eax,0x14(%esp)
movzbl -0x5(%ebx),%eax
mov    %eax,0x10(%esp)
movzbl -0x6(%ebx),%eax
mov    %eax,0xc(%esp)
movzwl -0x8(%ebx),%eax
movl   $0x80560da,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
sub    $0x1,%edi
jne    804fde0 <__sprintf_chk@plt+0x67f0>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
jmp    804fb70 <__sprintf_chk@plt+0x6580>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8055c26,0xc(%esp)
jmp    804fcdf <__sprintf_chk@plt+0x66ef>
lea    0x0(%esi),%esi
movl   $0x8055bfa,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x78(%esp),%eax
test   %eax,%eax
jne    804fc3a <__sprintf_chk@plt+0x664a>
xor    %eax,%eax
jmp    804fc3d <__sprintf_chk@plt+0x664d>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x80577eb,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804fd8a <__sprintf_chk@plt+0x679a>
lea    0x0(%esi),%esi
lea    0x11c(%esp),%edx
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    804fd47 <__sprintf_chk@plt+0x6757>
lea    0x11c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    804fd47 <__sprintf_chk@plt+0x6757>
movl   $0x8055c26,0xc(%esp)
jmp    804fc91 <__sprintf_chk@plt+0x66a1>
call   8049430 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     804faf0 <__sprintf_chk@plt+0x6500>
movl   $0x8055e6c,(%esp)
call   8049200 <perror@plt>
jmp    804faf0 <__sprintf_chk@plt+0x6500>
xor    %eax,%eax
jmp    804fd60 <__sprintf_chk@plt+0x6770>
test   %esi,%esi
je     804faf0 <__sprintf_chk@plt+0x6500>
mov    %eax,0xc(%esp)
mov    0x805b1c0,%eax
movl   $0x8055e95,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
cmp    $0x23,%edx
jbe    805030d <__sprintf_chk@plt+0x6d1d>
call   8049430 <__errno_location@plt>
mov    0x10(%ebp),%edx
neg    %edx
cmp    $0x2,%edx
mov    %edx,(%eax)
je     804ff73 <__sprintf_chk@plt+0x6983>
mov    0x805b1c0,%eax
mov    %edx,0xc(%esp)
movl   $0x80560a1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
mov    $0x8056121,%edx
mov    $0x805612c,%eax
call   804aae0 <__sprintf_chk@plt+0x14f0>
test   %eax,%eax
mov    %eax,%esi
je     8050337 <__sprintf_chk@plt+0x6d47>
lea    0x11c(%esp),%ebx
mov    %esi,0x8(%esp)
lea    0x54(%esp),%ebp
movl   $0xff,0x4(%esp)
lea    0x50(%esp),%edi
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x8(%esp)
movl   $0xff,0x4(%esp)
mov    %ebx,(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     804fa32 <__sprintf_chk@plt+0x6442>
lea    0x4c(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x44(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x60(%esp),%eax
mov    %ebp,0x24(%esp)
mov    %edi,0x20(%esp)
mov    %eax,0x8(%esp)
movl   $0x80560ec,0x4(%esp)
mov    %ebx,(%esp)
call   80494f0 <sscanf@plt>
mov    0x3c(%esp),%eax
cmp    $0x3,%eax
je     80501e6 <__sprintf_chk@plt+0x6bf6>
cmp    $0x2,%eax
je     805021f <__sprintf_chk@plt+0x6c2f>
mov    0x805ebf0,%eax
test   %eax,%eax
je     8050093 <__sprintf_chk@plt+0x6aa3>
mov    0x44(%esp),%edx
movb   $0x11,0x80(%esp)
movb   $0x11,0xa8(%esp)
movl   $0x0,0xd4(%esp)
00
mov    %edx,0xd0(%esp)
mov    0x40(%esp),%edx
movl   $0x0,0xb0(%esp)
00
mov    %edx,0x88(%esp)
lea    0x80(%esp),%edx
call   804be20 <__sprintf_chk@plt+0x2830>
test   %eax,%eax
je     804ffc0 <__sprintf_chk@plt+0x69d0>
mov    0x805ec04,%eax
test   %eax,%eax
je     80500ca <__sprintf_chk@plt+0x6ada>
cmpl   $0x3,0x3c(%esp)
mov    $0x8056095,%edx
mov    $0x805609b,%ecx
mov    %eax,0x8(%esp)
cmovne %ecx,%edx
mov    %edx,0xc(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf4,%eax
test   %eax,%eax
jne    8050231 <__sprintf_chk@plt+0x6c41>
mov    0x4c(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x8055c01,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x40(%esp),%eax
cmp    $0x3,%eax
je     8050300 <__sprintf_chk@plt+0x6d10>
lea    0x111c(%esp),%edx
ror    $0x8,%ax
movzwl %ax,%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8055330 <__sprintf_chk@plt+0xbd40>
mov    %eax,0xc(%esp)
mov    0x805ebfc,%eax
movl   $0x8055c11,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    80501f8 <__sprintf_chk@plt+0x6c08>
movl   $0x8055c26,0xc(%esp)
mov    0x805ebf8,%eax
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805ebf8,%eax
movl   $0x8055f84,0x14(%esp)
movl   $0x8055f84,0xc(%esp)
movl   $0x8055c42,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x805ebfc,%eax
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
mov    0x805b22c,%edx
test   %edx,%edx
je     80501c8 <__sprintf_chk@plt+0x6bd8>
mov    0x54(%esp),%eax
test   %eax,%eax
jne    80502c5 <__sprintf_chk@plt+0x6cd5>
mov    0x805b230,%eax
test   %eax,%eax
jne    8050256 <__sprintf_chk@plt+0x6c66>
movl   $0xa,(%esp)
call   8049420 <putchar@plt>
jmp    804ffc0 <__sprintf_chk@plt+0x69d0>
testb  $0x80,0x805ebe4
je     804ffc0 <__sprintf_chk@plt+0x69d0>
jmp    805003a <__sprintf_chk@plt+0x6a4a>
cmpl   $0x0,0x805c328
jne    805020e <__sprintf_chk@plt+0x6c1e>
mov    %eax,0x2c(%esp)
call   804a6a0 <__sprintf_chk@plt+0x10b0>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8051990 <__sprintf_chk@plt+0x83a0>
mov    %eax,0xc(%esp)
jmp    805015f <__sprintf_chk@plt+0x6b6f>
testb  $0x40,0x805ebe4
je     804ffc0 <__sprintf_chk@plt+0x69d0>
jmp    805003a <__sprintf_chk@plt+0x6a4a>
movl   $0x8055bfa,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8055b98,0x4(%esp)
movl   $0x1,(%esp)
call   8049480 <__printf_chk@plt>
jmp    80500d7 <__sprintf_chk@plt+0x6ae7>
mov    0x60(%esp),%eax
mov    0x64(%esp),%edx
movl   $0x805610a,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x10(%esp)
mov    0x50(%esp),%eax
mov    %edx,0x14(%esp)
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    80501d5 <__sprintf_chk@plt+0x6be5>
mov    0x805b1c0,%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e74,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80495a0 <close@plt>
jmp    804fa32 <__sprintf_chk@plt+0x6442>
lea    0x111c(%esp),%ecx
mov    %ecx,%edx
mov    %ecx,0x2c(%esp)
call   804d770 <__sprintf_chk@plt+0x4180>
test   %eax,%eax
jle    80501c8 <__sprintf_chk@plt+0x6bd8>
mov    0x2c(%esp),%ecx
movl   $0x8055f47,0x4(%esp)
movl   $0x1,(%esp)
mov    %ecx,0x8(%esp)
call   8049480 <__printf_chk@plt>
jmp    80501c8 <__sprintf_chk@plt+0x6bd8>
movl   $0x8055c26,0xc(%esp)
jmp    805012e <__sprintf_chk@plt+0x6b3e>
mov    0x805b1c0,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8055e84,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
jmp    804ff73 <__sprintf_chk@plt+0x6983>
or     $0xffffffff,%eax
jmp    804fa34 <__sprintf_chk@plt+0x6444>
nop
call   8049190 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
xor    %eax,%eax
push   %edi
mov    $0xc,%ecx
push   %esi
push   %ebx
sub    $0x6c,%esp
mov    0x805b238,%ebp
lea    0x30(%esp),%edi
mov    0x80(%esp),%ebx
rep stos %eax,%es:(%edi)
mov    $0x805613c,%eax
movl   $0xffffffff,0x58(%esp)
cmp    $0x1,%ebp
je     8050394 <__sprintf_chk@plt+0x6da4>
mov    $0x5,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8050448 <__sprintf_chk@plt+0x6e58>
mov    $0x5,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
lea    0x5(%ebx),%eax
movb   $0x1,0x30(%esp)
seta   %cl
setb   %dl
cmp    %dl,%cl
cmove  %eax,%ebx
mov    %ebx,(%esp)
call   8049400 <__strdup@plt>
mov    %eax,(%esp)
mov    %eax,%ebx
call   8049350 <strlen@plt>
mov    %ebx,0x38(%esp)
shl    $0x3,%eax
mov    %ax,0x32(%esp)
movl   $0x30,(%esp)
call   8049290 <malloc@plt>
mov    %eax,%edx
xor    %eax,%eax
test   %edx,%edx
je     8050439 <__sprintf_chk@plt+0x6e49>
mov    0x30(%esp),%eax
mov    %eax,(%edx)
mov    0x34(%esp),%eax
mov    %eax,0x4(%edx)
mov    0x38(%esp),%eax
mov    %eax,0x8(%edx)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%edx)
mov    0x40(%esp),%eax
mov    %eax,0x10(%edx)
mov    0x44(%esp),%eax
mov    %eax,0x14(%edx)
mov    0x48(%esp),%eax
mov    %eax,0x18(%edx)
mov    0x4c(%esp),%eax
mov    %eax,0x1c(%edx)
mov    0x50(%esp),%eax
mov    %eax,0x20(%edx)
mov    0x54(%esp),%eax
mov    %eax,0x24(%edx)
mov    0x58(%esp),%eax
mov    %eax,0x28(%edx)
mov    0x5c(%esp),%eax
mov    %eax,0x2c(%edx)
mov    %edx,%eax
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x11,%ebp
mov    $0x8056145,%eax
je     80505b0 <__sprintf_chk@plt+0x6fc0>
mov    $0x5,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80505b0 <__sprintf_chk@plt+0x6fc0>
cmp    $0x10,%ebp
mov    $0x8056142,%eax
je     8050690 <__sprintf_chk@plt+0x70a0>
mov    $0x8,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8050690 <__sprintf_chk@plt+0x70a0>
mov    $0x805614b,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8050780 <__sprintf_chk@plt+0x7190>
add    $0x5,%ebx
mov    $0x2,%ebp
movzbl (%ebx),%eax
cmp    $0x5b,%al
je     80507c8 <__sprintf_chk@plt+0x71d8>
cmp    $0x2a,%al
je     80507f0 <__sprintf_chk@plt+0x7200>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049330 <strchr@plt>
movl   $0x3a,0x4(%esp)
test   %eax,%eax
cmove  %ebx,%eax
mov    %eax,(%esp)
call   80494e0 <strrchr@plt>
test   %eax,%eax
je     80504fe <__sprintf_chk@plt+0x6f0e>
movzbl (%eax),%edx
test   %dl,%dl
je     80504fe <__sprintf_chk@plt+0x6f0e>
cmp    $0x3a,%dl
jne    80505a8 <__sprintf_chk@plt+0x6fb8>
movzbl 0x1(%eax),%edx
movb   $0x0,(%eax)
cmp    $0x2a,%dl
jne    80507f8 <__sprintf_chk@plt+0x7208>
test   %ebx,%ebx
je     80503d0 <__sprintf_chk@plt+0x6de0>
movzbl (%ebx),%eax
test   %al,%al
je     80503d0 <__sprintf_chk@plt+0x6de0>
cmp    $0x2a,%al
je     80503d0 <__sprintf_chk@plt+0x6de0>
lea    0x30(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80541d0 <__sprintf_chk@plt+0xabe0>
test   %eax,%eax
je     80503d0 <__sprintf_chk@plt+0x6de0>
mov    0x805c324,%edx
xor    %eax,%eax
mov    %ax,0x32(%esp)
test   %edx,%edx
je     80508c2 <__sprintf_chk@plt+0x72d2>
test   %ebp,%ebp
mov    $0x2,%eax
cmovne %ebp,%eax
xor    %esi,%esi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049140 <gethostbyname2@plt>
test   %eax,%eax
je     8050577 <__sprintf_chk@plt+0x6f87>
mov    0x10(%eax),%ecx
lea    0x8(%eax),%edx
lea    0x30(%esp),%eax
call   804b880 <__sprintf_chk@plt+0x2290>
mov    %eax,%esi
test   %ebp,%ebp
je     8050894 <__sprintf_chk@plt+0x72a4>
test   %esi,%esi
jne    80503d0 <__sprintf_chk@plt+0x6de0>
mov    %ebx,0xc(%esp)
movl   $0x8056f8c,0x8(%esp)
mov    0x805b1c0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8050439 <__sprintf_chk@plt+0x6e49>
nop
mov    $0x5,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
lea    0x5(%ebx),%eax
movl   $0x3a,0x4(%esp)
movb   $0x11,0x30(%esp)
seta   %cl
setb   %dl
cmp    %dl,%cl
cmove  %eax,%ebx
mov    %ebx,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     8050640 <__sprintf_chk@plt+0x7050>
movzbl 0x1(%eax),%edx
movb   $0x0,(%eax)
test   %dl,%dl
je     8050640 <__sprintf_chk@plt+0x7050>
cmp    $0x2a,%dl
jne    80505f8 <__sprintf_chk@plt+0x7008>
cmpb   $0x0,0x2(%eax)
je     8050640 <__sprintf_chk@plt+0x7050>
lea    0x1(%eax),%esi
lea    0x58(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80537d0 <__sprintf_chk@plt+0xa1e0>
test   %eax,%eax
je     8050640 <__sprintf_chk@plt+0x7050>
mov    0x805c328,%ebp
test   %ebp,%ebp
jne    8050626 <__sprintf_chk@plt+0x7036>
call   804a6a0 <__sprintf_chk@plt+0x10b0>
mov    %esi,(%esp)
call   8051a50 <__sprintf_chk@plt+0x8460>
test   %eax,%eax
mov    %eax,0x58(%esp)
jle    80505a8 <__sprintf_chk@plt+0x6fb8>
lea    0x0(%esi),%esi
movzbl (%ebx),%eax
test   %al,%al
je     80503d0 <__sprintf_chk@plt+0x6de0>
cmp    $0x2a,%al
je     8050770 <__sprintf_chk@plt+0x7180>
lea    0x2e(%esp),%eax
mov    $0x20,%edi
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %di,0x32(%esp)
call   80553c0 <__sprintf_chk@plt+0xbdd0>
test   %eax,%eax
jne    80505a8 <__sprintf_chk@plt+0x6fb8>
movzwl 0x2e(%esp),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x38(%esp)
jmp    80503d0 <__sprintf_chk@plt+0x6de0>
lea    0x0(%esi),%esi
mov    $0x8,%ecx
mov    %ebx,%esi
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
lea    0x8(%ebx),%eax
movl   $0x3a,0x4(%esp)
movb   $0x10,0x30(%esp)
seta   %cl
setb   %dl
cmp    %dl,%cl
cmove  %eax,%ebx
mov    %ebx,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     8050710 <__sprintf_chk@plt+0x7120>
movzbl 0x1(%eax),%edx
movb   $0x0,(%eax)
test   %dl,%dl
je     8050710 <__sprintf_chk@plt+0x7120>
cmp    $0x2a,%dl
je     80507b8 <__sprintf_chk@plt+0x71c8>
lea    0x1(%eax),%esi
lea    0x58(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80537d0 <__sprintf_chk@plt+0xa1e0>
test   %eax,%eax
je     8050710 <__sprintf_chk@plt+0x7120>
mov    $0x8055c28,%edi
mov    $0x7,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80505a8 <__sprintf_chk@plt+0x6fb8>
movl   $0x0,0x58(%esp)
nop
movzbl (%ebx),%eax
test   %al,%al
je     80503d0 <__sprintf_chk@plt+0x6de0>
cmp    $0x2a,%al
je     80507a8 <__sprintf_chk@plt+0x71b8>
lea    0x38(%esp),%eax
mov    $0x20,%esi
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %si,0x32(%esp)
call   8053c10 <__sprintf_chk@plt+0xa620>
test   %eax,%eax
je     80503d0 <__sprintf_chk@plt+0x6de0>
mov    $0x8055c0c,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8050855 <__sprintf_chk@plt+0x7265>
movl   $0x0,0x38(%esp)
jmp    80503d0 <__sprintf_chk@plt+0x6de0>
xchg   %ax,%ax
cmpb   $0x0,0x1(%ebx)
je     80503d0 <__sprintf_chk@plt+0x6de0>
jmp    8050653 <__sprintf_chk@plt+0x7063>
nop
mov    $0x8056151,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80504a2 <__sprintf_chk@plt+0x6eb2>
add    $0x6,%ebx
mov    $0xa,%ebp
jmp    80504a2 <__sprintf_chk@plt+0x6eb2>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x1(%ebx)
je     80503d0 <__sprintf_chk@plt+0x6de0>
jmp    8050723 <__sprintf_chk@plt+0x7133>
nop
cmpb   $0x0,0x2(%eax)
je     8050710 <__sprintf_chk@plt+0x7120>
jmp    80506d6 <__sprintf_chk@plt+0x70e6>
nop
add    $0x1,%ebx
movl   $0x5d,0x4(%esp)
mov    %ebx,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%edx
je     80505a8 <__sprintf_chk@plt+0x6fb8>
lea    0x1(%eax),%eax
movb   $0x0,(%edx)
jmp    80504da <__sprintf_chk@plt+0x6eea>
lea    0x1(%ebx),%eax
jmp    80504da <__sprintf_chk@plt+0x6eea>
test   %dl,%dl
je     80504fe <__sprintf_chk@plt+0x6f0e>
lea    0x1(%eax),%esi
lea    0x58(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80537d0 <__sprintf_chk@plt+0xa1e0>
test   %eax,%eax
je     80504fe <__sprintf_chk@plt+0x6f0e>
mov    0x805ebe4,%eax
xor    %edi,%edi
test   $0x4,%al
jne    80509a9 <__sprintf_chk@plt+0x73b9>
test   $0x1,%al
jne    80508dd <__sprintf_chk@plt+0x72ed>
test   %edi,%edi
je     8050928 <__sprintf_chk@plt+0x7338>
mov    0x8(%edi),%edx
ror    $0x8,%dx
movzwl %dx,%edx
mov    %edx,0x58(%esp)
jmp    80504fe <__sprintf_chk@plt+0x6f0e>
cmpb   $0x66,(%ebx)
jne    8050873 <__sprintf_chk@plt+0x7283>
cmpb   $0x77,0x1(%ebx)
jne    8050873 <__sprintf_chk@plt+0x7283>
cmpb   $0x0,0x2(%ebx)
jne    8050873 <__sprintf_chk@plt+0x7283>
movl   $0x3,0x38(%esp)
jmp    80503d0 <__sprintf_chk@plt+0x6de0>
mov    $0x8055c19,%edi
mov    $0x8,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80505a8 <__sprintf_chk@plt+0x6fb8>
movl   $0x4,0x38(%esp)
jmp    80503d0 <__sprintf_chk@plt+0x6de0>
movl   $0xa,0x4(%esp)
mov    %ebx,(%esp)
call   8049140 <gethostbyname2@plt>
test   %eax,%eax
je     805057f <__sprintf_chk@plt+0x6f8f>
mov    0x10(%eax),%ecx
lea    0x8(%eax),%edx
lea    0x30(%esp),%eax
call   804b880 <__sprintf_chk@plt+0x2290>
add    %eax,%esi
jmp    805057f <__sprintf_chk@plt+0x6f8f>
movl   $0x1,(%esp)
call   8049240 <sethostent@plt>
movl   $0x1,0x805c324
00
jmp    805054a <__sprintf_chk@plt+0x6f5a>
movl   $0x805600c,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <getservbyname@plt>
test   %eax,%eax
setne  %dl
je     8050918 <__sprintf_chk@plt+0x7328>
test   %edi,%edi
je     8050918 <__sprintf_chk@plt+0x7328>
mov    0x8(%edi),%edx
cmp    0x8(%eax),%edx
je     8050845 <__sprintf_chk@plt+0x7255>
mov    %esi,0xc(%esp)
movl   $0x8056158,0x8(%esp)
jmp    8050593 <__sprintf_chk@plt+0x6fa3>
lea    0x0(%esi),%esi
test   %edi,%edi
jne    8050842 <__sprintf_chk@plt+0x7252>
test   %dl,%dl
jne    80509e1 <__sprintf_chk@plt+0x73f1>
mov    0x805f020,%edi
test   %edi,%edi
je     80509c5 <__sprintf_chk@plt+0x73d5>
mov    0x805ebe4,%eax
mov    %eax,%ecx
and    $0x1,%eax
and    $0x4,%ecx
mov    %ecx,0x18(%esp)
mov    %eax,0x1c(%esp)
jmp    805095d <__sprintf_chk@plt+0x736d>
lea    0x0(%esi),%esi
cmp    $0x805600c,%eax
je     80509a0 <__sprintf_chk@plt+0x73b0>
mov    (%edi),%edi
test   %edi,%edi
je     80509c5 <__sprintf_chk@plt+0x73d5>
mov    0xc(%edi),%eax
cmp    $0x80562c5,%eax
jne    8050950 <__sprintf_chk@plt+0x7360>
mov    0x18(%esp),%ecx
test   %ecx,%ecx
je     8050957 <__sprintf_chk@plt+0x7367>
mov    0x8(%edi),%eax
test   %eax,%eax
je     8050957 <__sprintf_chk@plt+0x7367>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
jne    8050957 <__sprintf_chk@plt+0x7367>
mov    0x58(%esp),%eax
test   %eax,%eax
jle    8050997 <__sprintf_chk@plt+0x73a7>
cmp    0x4(%edi),%eax
jne    8050904 <__sprintf_chk@plt+0x7314>
mov    0x4(%edi),%eax
mov    %eax,0x58(%esp)
jmp    8050957 <__sprintf_chk@plt+0x7367>
cmpl   $0x0,0x1c(%esp)
je     8050957 <__sprintf_chk@plt+0x7367>
jmp    805096f <__sprintf_chk@plt+0x737f>
movl   $0x80562c5,0x4(%esp)
mov    %esi,(%esp)
call   80493f0 <getservbyname@plt>
mov    %eax,%edi
mov    0x805ebe4,%eax
jmp    8050832 <__sprintf_chk@plt+0x7242>
cmpl   $0x0,0x58(%esp)
jg     80504fe <__sprintf_chk@plt+0x6f0e>
mov    %esi,0xc(%esp)
movl   $0x8056f64,0x8(%esp)
jmp    8050593 <__sprintf_chk@plt+0x6fa3>
mov    0x8(%eax),%edx
jmp    8050845 <__sprintf_chk@plt+0x7255>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
movl   $0xc,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
je     8050a1b <__sprintf_chk@plt+0x742b>
mov    %ebx,(%eax)
mov    %esi,0x8(%eax)
movl   $0x0,0x4(%eax)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
call   8049570 <abort@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4fc,%esp
lea    0x1d0(%esp),%eax
lea    0x40(%esp),%ebp
movl   $0x0,0x805f038
00
movl   $0xfffffffe,0x805f03c
ff
movl   $0xc8,0x24(%esp)
mov    %eax,0x20(%esp)
mov    %eax,0x28(%esp)
mov    %ebp,0x18(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x1c(%esp)
movzwl 0x1c(%esp),%eax
mov    0x18(%esp),%edi
mov    %ax,0x0(%ebp)
mov    0x24(%esp),%eax
lea    -0x2(%eax,%eax,1),%eax
lea    (%edi,%eax,1),%edx
cmp    %edx,%ebp
jb     8050b46 <__sprintf_chk@plt+0x7556>
sub    %edi,%ebp
sar    %ebp
cmpl   $0x270f,0x24(%esp)
lea    0x1(%ebp),%edi
ja     8051165 <__sprintf_chk@plt+0x7b75>
add    $0x2,%eax
mov    $0x2710,%esi
cmp    $0x2710,%eax
cmova  %esi,%eax
lea    (%eax,%eax,1),%esi
mov    %eax,0x24(%esp)
add    %esi,%eax
lea    0x3(%eax,%eax,1),%eax
mov    %eax,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8051165 <__sprintf_chk@plt+0x7b75>
mov    0x18(%esp),%eax
lea    (%edi,%edi,1),%ebp
mov    %ebp,0x8(%esp)
shl    $0x2,%edi
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    %edi,%ecx
mov    %ecx,0x8(%esp)
mov    0x28(%esp),%ecx
lea    0x3(%esi),%edx
and    $0xfffffffc,%edx
mov    %edi,0x20(%esp)
lea    (%ebx,%edx,1),%edi
mov    %edi,(%esp)
mov    %ecx,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    0x18(%esp),%eax
lea    0x40(%esp),%ecx
cmp    %ecx,%eax
je     8050b22 <__sprintf_chk@plt+0x7532>
mov    %eax,(%esp)
call   80490b0 <free@plt>
mov    0x20(%esp),%eax
lea    -0x2(%ebx,%ebp,1),%ebp
lea    -0x4(%edi,%eax,1),%eax
mov    %eax,0x20(%esp)
lea    -0x2(%ebx,%esi,1),%eax
cmp    %eax,%ebp
jae    8051194 <__sprintf_chk@plt+0x7ba4>
mov    %edi,0x28(%esp)
mov    %ebx,0x18(%esp)
mov    0x1c(%esp),%eax
cmp    $0x3,%eax
je     8051157 <__sprintf_chk@plt+0x7b67>
movsbl 0x8057340(%eax),%ebx
cmp    $0xfffffffd,%ebx
je     8050b9f <__sprintf_chk@plt+0x75af>
mov    0x805f03c,%eax
cmp    $0xfffffffe,%eax
je     8050d78 <__sprintf_chk@plt+0x7788>
test   %eax,%eax
jle    8050d20 <__sprintf_chk@plt+0x7730>
cmp    $0x10a,%eax
mov    $0x2,%edx
ja     8050b88 <__sprintf_chk@plt+0x7598>
movzbl 0x8057380(%eax),%edx
lea    (%ebx,%edx,1),%eax
cmp    $0x5a,%eax
ja     8050b9f <__sprintf_chk@plt+0x75af>
movsbl 0x8057220(%eax),%ecx
cmp    %edx,%ecx
je     8050c38 <__sprintf_chk@plt+0x7648>
mov    0x1c(%esp),%eax
movzbl 0x8057300(%eax),%esi
test   %esi,%esi
je     8050c50 <__sprintf_chk@plt+0x7660>
movzbl 0x80571e4(%esi),%ebx
mov    $0x1,%eax
mov    0x20(%esp),%edi
sub    %ebx,%eax
cmp    $0x18,%esi
mov    (%edi,%eax,4),%eax
ja     8050bd8 <__sprintf_chk@plt+0x75e8>
jmp    *0x8057180(,%esi,4)
xor    %eax,%eax
lea    0x0(%esi),%esi
mov    0x20(%esp),%edi
lea    0x0(,%ebx,4),%edx
add    %ebx,%ebx
sub    %ebx,%ebp
movzwl 0x0(%ebp),%ecx
sub    %edx,%edi
mov    %edi,%edx
mov    %eax,0x4(%edx)
movzbl 0x80571fd(%esi),%eax
movswl %cx,%edx
lea    0x4(%edi),%edi
mov    %edi,0x20(%esp)
sub    $0x14,%eax
movsbl 0x80572df(%eax),%ebx
add    %ebx,%edx
cmp    $0x5a,%edx
ja     8050c25 <__sprintf_chk@plt+0x7635>
movsbw 0x8057220(%edx),%bx
cmp    %bx,%cx
je     8050f6c <__sprintf_chk@plt+0x797c>
movsbl 0x80572db(%eax),%eax
mov    %eax,0x1c(%esp)
add    $0x2,%ebp
jmp    8050a6d <__sprintf_chk@plt+0x747d>
movsbl 0x8057280(%eax),%esi
test   %esi,%esi
jg     8050f3c <__sprintf_chk@plt+0x794c>
cmp    $0xffffffff,%esi
jne    8051150 <__sprintf_chk@plt+0x7b60>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8050d38 <__sprintf_chk@plt+0x7748>
cmpl   $0x3,0x2c(%esp)
je     8050cd0 <__sprintf_chk@plt+0x76e0>
mov    0x18(%esp),%ecx
mov    0x20(%esp),%edx
jmp    8050c89 <__sprintf_chk@plt+0x7699>
lea    0x0(%esi),%esi
cmp    %ecx,%ebp
je     8050cf8 <__sprintf_chk@plt+0x7708>
sub    $0x2,%ebp
movswl 0x0(%ebp),%eax
sub    $0x4,%edx
movsbl 0x8057340(%eax),%ebx
cmp    $0xfffffffd,%ebx
je     8050c70 <__sprintf_chk@plt+0x7680>
add    $0x1,%ebx
cmp    $0x5a,%ebx
ja     8050c70 <__sprintf_chk@plt+0x7680>
cmpb   $0x1,0x8057220(%ebx)
jne    8050c70 <__sprintf_chk@plt+0x7680>
movsbl 0x8057280(%ebx),%eax
test   %eax,%eax
jle    8050c70 <__sprintf_chk@plt+0x7680>
mov    %edx,0x20(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%eax
mov    0x805f040,%edx
addl   $0x4,0x20(%esp)
movl   $0x3,0x2c(%esp)
mov    %edx,0x4(%eax)
jmp    8050c30 <__sprintf_chk@plt+0x7640>
nop
cmpl   $0x0,0x805f03c
jle    8050ced <__sprintf_chk@plt+0x76fd>
movl   $0xfffffffe,0x805f03c
ff
mov    0x18(%esp),%ecx
mov    0x20(%esp),%edx
jmp    8050c89 <__sprintf_chk@plt+0x7699>
jne    8050c63 <__sprintf_chk@plt+0x7673>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
mov    0x18(%esp),%eax
lea    0x40(%esp),%esi
cmp    %esi,%eax
je     8050d11 <__sprintf_chk@plt+0x7721>
mov    %eax,(%esp)
call   80490b0 <free@plt>
add    $0x4fc,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x0,0x805f03c
00
xor    %edx,%edx
jmp    8050b88 <__sprintf_chk@plt+0x7598>
lea    0x0(%esi,%eiz,1),%esi
mov    0x805b1c0,%eax
movl   $0x8057106,0xc(%esp)
movl   $0x8057150,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
addl   $0x1,0x805f038
call   8049540 <__fprintf_chk@plt>
mov    0x18(%esp),%ecx
mov    0x20(%esp),%edx
jmp    8050c89 <__sprintf_chk@plt+0x7699>
lea    0x0(%esi,%eiz,1),%esi
mov    0x805b1a8,%eax
lea    0x0(%esi),%esi
movzbl (%eax),%ecx
test   %cl,%cl
jne    8050dc0 <__sprintf_chk@plt+0x77d0>
mov    0x805c740,%edx
cmp    0x805c74c,%edx
movl   $0x0,0x805b1a8
00
jge    8050e50 <__sprintf_chk@plt+0x7860>
mov    0x805c750,%eax
mov    (%eax,%edx,4),%eax
add    $0x1,%edx
mov    %edx,0x805c740
mov    %eax,0x805b1a8
movzbl (%eax),%ecx
test   %cl,%cl
je     8050d87 <__sprintf_chk@plt+0x7797>
cmp    $0x9,%cl
jne    80511c1 <__sprintf_chk@plt+0x7bd1>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%ecx
cmp    $0x9,%cl
je     8050dd0 <__sprintf_chk@plt+0x77e0>
cmp    $0x20,%cl
je     8050dd0 <__sprintf_chk@plt+0x77e0>
test   %cl,%cl
je     8051209 <__sprintf_chk@plt+0x7c19>
test   $0xdf,%cl
je     80511a2 <__sprintf_chk@plt+0x7bb2>
cmp    $0x9,%cl
mov    %eax,%edx
mov    %eax,%esi
jne    8050e1b <__sprintf_chk@plt+0x782b>
jmp    80511aa <__sprintf_chk@plt+0x7bba>
nop
movzbl 0x1(%eax),%ecx
lea    0x1(%eax),%esi
test   $0xdf,%cl
je     80511a6 <__sprintf_chk@plt+0x7bb6>
cmp    $0x9,%cl
je     80511aa <__sprintf_chk@plt+0x7bba>
mov    %esi,%eax
cmp    $0x5c,%cl
jne    8050e00 <__sprintf_chk@plt+0x7810>
cmp    %edx,%eax
mov    %eax,%ecx
mov    %eax,%esi
je     8050e38 <__sprintf_chk@plt+0x7848>
movzbl -0x1(%ecx),%eax
sub    $0x1,%ecx
mov    %al,0x1(%ecx)
cmp    %edx,%ecx
jne    8050e28 <__sprintf_chk@plt+0x7838>
mov    %esi,%eax
add    $0x1,%edx
cmpb   $0x0,0x1(%eax)
lea    0x1(%eax),%esi
je     80511b0 <__sprintf_chk@plt+0x7bc0>
mov    %esi,%eax
jmp    8050e00 <__sprintf_chk@plt+0x7810>
lea    0x0(%esi,%eiz,1),%esi
mov    0x805c748,%esi
test   %esi,%esi
je     8050f30 <__sprintf_chk@plt+0x7940>
xor    %eax,%eax
test   %eax,%eax
jne    8050d80 <__sprintf_chk@plt+0x7790>
mov    0x805c748,%eax
movl   $0x3ff,0x4(%esp)
movl   $0x805c340,(%esp)
mov    %eax,0x8(%esp)
call   80490f0 <fgets@plt>
test   %eax,%eax
je     8050f30 <__sprintf_chk@plt+0x7940>
movb   $0x0,0x805c73f
mov    $0x805c340,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8050e99 <__sprintf_chk@plt+0x78a9>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
sub    $0x805c340,%edx
cmp    $0x3ff,%edx
je     80511d8 <__sprintf_chk@plt+0x7be8>
sub    $0x1,%edx
cmpb   $0xa,0x805c340(%edx)
je     8050f20 <__sprintf_chk@plt+0x7930>
movzbl 0x805c340,%eax
cmp    $0x30,%al
je     8050ef4 <__sprintf_chk@plt+0x7904>
cmp    $0x23,%al
jne    8050f08 <__sprintf_chk@plt+0x7918>
mov    0x805b1a8,%eax
test   %eax,%eax
je     8050e68 <__sprintf_chk@plt+0x7878>
jmp    8050d80 <__sprintf_chk@plt+0x7790>
xchg   %ax,%ax
movl   $0x805c340,0x805b1a8
08
mov    $0x805c340,%eax
jmp    8050d80 <__sprintf_chk@plt+0x7790>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x805c340(%edx)
jmp    8050ee5 <__sprintf_chk@plt+0x78f5>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
mov    %eax,0x805f03c
jmp    8050b6d <__sprintf_chk@plt+0x757d>
mov    0x20(%esp),%edi
mov    0x805f040,%eax
cmpl   $0x1,0x2c(%esp)
movl   $0xfffffffe,0x805f03c
ff
adcl   $0xffffffff,0x2c(%esp)
mov    %eax,0x4(%edi)
lea    0x4(%edi),%eax
mov    %eax,0x20(%esp)
mov    %esi,0x1c(%esp)
jmp    8050c30 <__sprintf_chk@plt+0x7640>
movsbl 0x8057280(%edx),%eax
mov    %eax,0x1c(%esp)
jmp    8050c30 <__sprintf_chk@plt+0x7640>
mov    0x20(%esp),%eax
mov    (%eax),%edx
xor    %eax,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x1,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x5,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    -0x4(%eax),%eax
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    0x805c744,%edx
mov    (%eax),%eax
mov    %eax,(%edx)
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%edi
mov    $0x3,%eax
mov    -0x8(%edi),%edx
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    (%edi),%edx
mov    %edx,0x4(%eax)
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%edi
mov    $0x3,%eax
mov    -0x4(%edi),%edx
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    (%edi),%edx
mov    %edx,0x4(%eax)
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x7,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x8,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%edi
mov    $0x2,%eax
mov    -0x8(%edi),%edx
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    (%edi),%edx
mov    %edx,0x4(%eax)
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
xor    %edx,%edx
mov    $0x9,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x8,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x7,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x1,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
xor    %eax,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x5,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x6,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
mov    %eax,%edx
mov    $0x4,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    $0x6,%eax
call   80509f0 <__sprintf_chk@plt+0x7400>
jmp    8050bd8 <__sprintf_chk@plt+0x75e8>
neg    %esi
jmp    8050bb2 <__sprintf_chk@plt+0x75c2>
xor    %ebx,%ebx
lea    0x0(%esi,%eiz,1),%esi
jmp    8050cfd <__sprintf_chk@plt+0x770d>
mov    0x805b1c0,%eax
mov    $0x2,%ebx
movl   $0x8057113,0xc(%esp)
movl   $0x8057150,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
jmp    8050cfd <__sprintf_chk@plt+0x770d>
mov    %ebx,0x18(%esp)
mov    $0x1,%ebx
jmp    8050cfd <__sprintf_chk@plt+0x770d>
mov    %eax,%esi
mov    %eax,%edx
test   %cl,%cl
je     80511b0 <__sprintf_chk@plt+0x7bc0>
movb   $0x0,(%esi)
add    $0x1,%esi
test   %edx,%edx
mov    %esi,0x805b1a8
jne    8051213 <__sprintf_chk@plt+0x7c23>
mov    %esi,%eax
jmp    8050d80 <__sprintf_chk@plt+0x7790>
cmp    $0x20,%cl
je     8050dd0 <__sprintf_chk@plt+0x77e0>
lea    0x0(%esi),%esi
jmp    8050de8 <__sprintf_chk@plt+0x77f8>
lea    0x0(%esi),%esi
mov    0x805b1c0,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80570d8,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
mov    %eax,0x805b1a8
jmp    8050d80 <__sprintf_chk@plt+0x7790>
movzbl (%edx),%eax
mov    $0x21,%esi
mov    %edx,0x30(%esp)
sub    %eax,%esi
mov    %esi,0x34(%esp)
jne    8051237 <__sprintf_chk@plt+0x7c47>
cmpb   $0x0,0x1(%edx)
jne    8051237 <__sprintf_chk@plt+0x7c47>
mov    $0x21,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
mov    $0x6e,%ecx
sub    %eax,%ecx
mov    %ecx,0x38(%esp)
jne    805125a <__sprintf_chk@plt+0x7c6a>
mov    0x30(%esp),%esi
cmpb   $0x6f,0x1(%esi)
jne    805125a <__sprintf_chk@plt+0x7c6a>
cmpb   $0x74,0x2(%esi)
jne    805125a <__sprintf_chk@plt+0x7c6a>
cmpb   $0x0,0x3(%esi)
je     805122d <__sprintf_chk@plt+0x7c3d>
cmp    $0x26,%eax
jne    80512a6 <__sprintf_chk@plt+0x7cb6>
mov    0x30(%esp),%esi
movzbl 0x1(%esi),%ecx
test   %cl,%cl
je     8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x26,%cl
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x0,0x2(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
mov    0x30(%esp),%esi
mov    $0x6,%ecx
mov    $0x80570f0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80512cb <__sprintf_chk@plt+0x7cdb>
mov    $0x105,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x61,%eax
jne    80512f3 <__sprintf_chk@plt+0x7d03>
mov    0x30(%esp),%esi
cmpb   $0x6e,0x1(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x64,0x2(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x0,0x3(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
mov    $0x26,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
mov    0x30(%esp),%esi
mov    $0x6,%ecx
mov    $0x80570f6,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8051316 <__sprintf_chk@plt+0x7d26>
mov    $0x106,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x7c,%eax
jne    805133b <__sprintf_chk@plt+0x7d4b>
mov    0x30(%esp),%esi
movzbl 0x1(%esi),%ecx
test   %cl,%cl
je     8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x7c,%cl
jne    805127e <__sprintf_chk@plt+0x7c8e>
jmp    8051274 <__sprintf_chk@plt+0x7c84>
mov    $0x3e,%ecx
mov    %ecx,%esi
sub    %eax,%esi
jne    8051362 <__sprintf_chk@plt+0x7d72>
mov    0x30(%esp),%edi
cmpb   $0x3d,0x1(%edi)
jne    8051362 <__sprintf_chk@plt+0x7d72>
cmpb   $0x0,0x2(%edi)
jne    8051362 <__sprintf_chk@plt+0x7d72>
mov    $0x108,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x6f,%eax
jne    80513b3 <__sprintf_chk@plt+0x7dc3>
mov    0x30(%esp),%esi
cmpb   $0x72,0x1(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x0,0x2(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
mov    $0x7c,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
mov    $0x67,%ecx
mov    %ecx,%edi
sub    %eax,%edi
jne    805138e <__sprintf_chk@plt+0x7d9e>
mov    0x30(%esp),%ecx
cmpb   $0x65,0x1(%ecx)
jne    805138e <__sprintf_chk@plt+0x7d9e>
movzbl 0x2(%ecx),%ecx
test   %cl,%cl
je     8051331 <__sprintf_chk@plt+0x7d41>
cmp    $0x71,%cl
jne    805138e <__sprintf_chk@plt+0x7d9e>
mov    0x30(%esp),%ecx
cmpb   $0x0,0x3(%ecx)
je     8051331 <__sprintf_chk@plt+0x7d41>
mov    $0x3c,%ecx
sub    %eax,%ecx
mov    %ecx,%edx
jne    80513d0 <__sprintf_chk@plt+0x7de0>
mov    0x30(%esp),%ecx
cmpb   $0x3d,0x1(%ecx)
jne    80513d0 <__sprintf_chk@plt+0x7de0>
cmpb   $0x0,0x2(%ecx)
jne    80513d0 <__sprintf_chk@plt+0x7de0>
mov    $0x107,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x28,%eax
je     80513bd <__sprintf_chk@plt+0x7dcd>
cmp    $0x29,%eax
jne    8051420 <__sprintf_chk@plt+0x7e30>
mov    0x30(%esp),%esi
cmpb   $0x0,0x1(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
jmp    805127e <__sprintf_chk@plt+0x7c8e>
mov    $0x6c,%ecx
sub    %eax,%ecx
mov    %ecx,0x3c(%esp)
jne    80513fe <__sprintf_chk@plt+0x7e0e>
mov    0x30(%esp),%ecx
cmpb   $0x65,0x1(%ecx)
jne    80513fe <__sprintf_chk@plt+0x7e0e>
movzbl 0x2(%ecx),%ecx
test   %cl,%cl
je     80513a9 <__sprintf_chk@plt+0x7db9>
cmp    $0x71,%cl
jne    80513fe <__sprintf_chk@plt+0x7e0e>
mov    0x30(%esp),%ecx
cmpb   $0x0,0x3(%ecx)
je     80513a9 <__sprintf_chk@plt+0x7db9>
mov    0x34(%esp),%ecx
test   %ecx,%ecx
jne    8051455 <__sprintf_chk@plt+0x7e65>
mov    0x30(%esp),%ecx
cmpb   $0x3d,0x1(%ecx)
jne    8051455 <__sprintf_chk@plt+0x7e65>
cmpb   $0x0,0x2(%ecx)
jne    8051455 <__sprintf_chk@plt+0x7e65>
mov    $0x109,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x64,%eax
jne    8051585 <__sprintf_chk@plt+0x7f95>
mov    0x30(%esp),%esi
cmpb   $0x73,0x1(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x74,0x2(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x0,0x3(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
mov    $0x103,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
mov    0x38(%esp),%ecx
test   %ecx,%ecx
jne    805147e <__sprintf_chk@plt+0x7e8e>
mov    0x30(%esp),%ecx
cmpb   $0x65,0x1(%ecx)
jne    805147e <__sprintf_chk@plt+0x7e8e>
movzbl 0x2(%ecx),%ecx
test   %cl,%cl
je     8051416 <__sprintf_chk@plt+0x7e26>
cmp    $0x71,%cl
jne    805147e <__sprintf_chk@plt+0x7e8e>
mov    0x30(%esp),%ecx
cmpb   $0x0,0x3(%ecx)
je     8051416 <__sprintf_chk@plt+0x7e26>
cmp    $0x3d,%eax
jne    8051564 <__sprintf_chk@plt+0x7f74>
mov    0x30(%esp),%ecx
movzbl 0x1(%ecx),%ecx
test   %cl,%cl
je     8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x3d,%cl
jne    80514aa <__sprintf_chk@plt+0x7eba>
mov    0x30(%esp),%ecx
cmpb   $0x0,0x2(%ecx)
je     8050f32 <__sprintf_chk@plt+0x7942>
test   %esi,%esi
jne    80514c1 <__sprintf_chk@plt+0x7ed1>
mov    0x30(%esp),%esi
mov    $0x3e,%eax
cmpb   $0x0,0x1(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
test   %edi,%edi
jne    80514e2 <__sprintf_chk@plt+0x7ef2>
mov    0x30(%esp),%eax
cmpb   $0x74,0x1(%eax)
jne    80514e2 <__sprintf_chk@plt+0x7ef2>
mov    0x30(%esp),%esi
mov    $0x3e,%eax
cmpb   $0x0,0x2(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
test   %edx,%edx
jne    80514f9 <__sprintf_chk@plt+0x7f09>
mov    0x30(%esp),%esi
mov    $0x3c,%eax
cmpb   $0x0,0x1(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
mov    0x3c(%esp),%edx
test   %edx,%edx
jne    805151e <__sprintf_chk@plt+0x7f2e>
mov    0x30(%esp),%eax
cmpb   $0x74,0x1(%eax)
jne    805151e <__sprintf_chk@plt+0x7f2e>
mov    0x30(%esp),%esi
mov    $0x3c,%eax
cmpb   $0x0,0x2(%esi)
je     8050f32 <__sprintf_chk@plt+0x7942>
mov    0x30(%esp),%esi
mov    $0xa,%ecx
mov    $0x80570fc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %al
setb   %cl
mov    %eax,%esi
mov    $0x10a,%eax
mov    %esi,%edx
cmp    %cl,%dl
je     8050f32 <__sprintf_chk@plt+0x7942>
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8050350 <__sprintf_chk@plt+0x6d60>
test   %eax,%eax
mov    %eax,0x805f040
je     80515ba <__sprintf_chk@plt+0x7fca>
mov    $0x102,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
cmp    $0x65,%eax
jne    80514aa <__sprintf_chk@plt+0x7eba>
mov    0x30(%esp),%eax
cmpb   $0x71,0x1(%eax)
jne    80514aa <__sprintf_chk@plt+0x7eba>
mov    $0x3d,%eax
jmp    805149c <__sprintf_chk@plt+0x7eac>
cmp    $0x73,%eax
jne    805127e <__sprintf_chk@plt+0x7c8e>
mov    0x30(%esp),%esi
cmpb   $0x72,0x1(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x63,0x2(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
cmpb   $0x0,0x3(%esi)
jne    805127e <__sprintf_chk@plt+0x7c8e>
mov    $0x104,%eax
jmp    8050f32 <__sprintf_chk@plt+0x7942>
mov    0x805b1c0,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8057130,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x805c74c
mov    0x28(%esp),%eax
mov    %eax,0x805c750
mov    0x2c(%esp),%eax
mov    %eax,0x805c748
mov    0x20(%esp),%eax
mov    %eax,0x805c744
call   8050a20 <__sprintf_chk@plt+0x7430>
test   %eax,%eax
jne    8051628 <__sprintf_chk@plt+0x8038>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x805b1c0,%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8057124,(%esp)
mov    %eax,0xc(%esp)
call   8049210 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8051620 <__sprintf_chk@plt+0x8030>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xd4(%esp),%ebp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x998a,%ebx
movzwl 0x4(%ebp),%ecx
lea    -0x10(%ecx),%eax
cmp    $0x1,%ax
jbe    8051698 <__sprintf_chk@plt+0x80a8>
xor    %eax,%eax
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x0(%ebp),%edx
cmp    $0x13,%edx
jbe    80517cf <__sprintf_chk@plt+0x81df>
mov    0x14(%ebp),%eax
mov    %eax,%esi
and    $0x3ff,%esi
mov    0x2780(%ebx,%esi,4),%esi
test   %esi,%esi
jne    80516ca <__sprintf_chk@plt+0x80da>
jmp    80517e0 <__sprintf_chk@plt+0x81f0>
nop
mov    (%esi),%esi
test   %esi,%esi
je     80517e0 <__sprintf_chk@plt+0x81f0>
cmp    0x14(%esi),%eax
lea    0x0(%esi),%esi
jne    80516c0 <__sprintf_chk@plt+0x80d0>
cmp    $0x11,%cx
jne    805170a <__sprintf_chk@plt+0x811a>
mov    0x8(%esi),%eax
mov    0xc(%esi),%edx
test   %eax,%eax
mov    %eax,(%edx)
je     80516e7 <__sprintf_chk@plt+0x80f7>
mov    %edx,0x4(%eax)
mov    (%esi),%eax
mov    0x4(%esi),%edx
test   %eax,%eax
mov    %eax,(%edx)
je     80516f5 <__sprintf_chk@plt+0x8105>
mov    %edx,0x4(%eax)
mov    %esi,(%esp)
call   80490b0 <free@plt>
add    $0xbc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
mov    $0x23,%ecx
lea    0x24(%esp),%edi
sub    $0x20,%edx
mov    %edi,0x1c(%esp)
rep stos %eax,%es:(%edi)
mov    0x1c(%esp),%edi
lea    0x20(%ebp),%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x22,0x4(%esp)
mov    %edi,(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
mov    0x30(%esp),%edx
mov    %edx,%edi
add    $0x4,%edi
mov    %edx,0x1c(%esp)
je     8051689 <__sprintf_chk@plt+0x8099>
lea    0x1a(%esi),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049080 <strcmp@plt>
test   %eax,%eax
je     80517bc <__sprintf_chk@plt+0x81cc>
mov    0x8(%esi),%eax
mov    0xc(%esi),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
mov    %eax,(%ecx)
je     8051776 <__sprintf_chk@plt+0x8186>
mov    %ecx,0x4(%eax)
movsbl 0x4(%edx),%eax
test   %al,%al
je     80517d9 <__sprintf_chk@plt+0x81e9>
mov    $0x1505,%edx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,%ecx
add    $0x1,%edi
shl    $0x5,%ecx
add    %ecx,%eax
add    %eax,%edx
movsbl (%edi),%eax
test   %al,%al
jne    8051788 <__sprintf_chk@plt+0x8198>
and    $0x3ff,%edx
lea    0x1780(%ebx,%edx,4),%eax
mov    (%eax),%edx
lea    0x8(%esi),%ecx
test   %edx,%edx
mov    %edx,0x8(%esi)
je     80517b7 <__sprintf_chk@plt+0x81c7>
mov    %ecx,0x4(%edx)
mov    %ecx,(%eax)
mov    %eax,0xc(%esi)
mov    0x18(%ebp),%eax
mov    %eax,0x10(%esi)
add    $0xbc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    805168b <__sprintf_chk@plt+0x809b>
mov    $0x105,%edx
jmp    80517a1 <__sprintf_chk@plt+0x81b1>
cmp    $0x11,%cx
je     8051689 <__sprintf_chk@plt+0x8099>
lea    0x24(%esp),%esi
xor    %eax,%eax
mov    %esi,%edi
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
sub    $0x20,%edx
lea    0x20(%ebp),%eax
mov    %esi,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x22,0x4(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
mov    0x30(%esp),%edi
mov    %edi,%esi
add    $0x4,%esi
je     8051689 <__sprintf_chk@plt+0x8099>
movl   $0x2c,(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ecx
je     8051689 <__sprintf_chk@plt+0x8099>
mov    0x14(%ebp),%eax
mov    %ecx,0x1c(%esp)
mov    %eax,0x14(%ecx)
lea    0x1a(%ecx),%eax
movl   $0x12,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049470 <__strcpy_chk@plt>
movzwl 0x12(%ebp),%eax
mov    0x1c(%esp),%ecx
mov    %ax,0x18(%ecx)
mov    0x18(%ebp),%eax
mov    %eax,0x10(%ecx)
mov    0x14(%ebp),%eax
and    $0x3ff,%eax
lea    0x2780(%ebx,%eax,4),%eax
mov    (%eax),%edx
test   %edx,%edx
mov    %edx,(%ecx)
je     8051889 <__sprintf_chk@plt+0x8299>
mov    %ecx,0x4(%edx)
mov    %ecx,(%eax)
mov    %eax,0x4(%ecx)
movsbl 0x4(%edi),%edx
test   %dl,%dl
je     80518d8 <__sprintf_chk@plt+0x82e8>
mov    $0x1505,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edi
add    $0x1,%esi
shl    $0x5,%edi
add    %edi,%edx
add    %edx,%eax
movsbl (%esi),%edx
test   %dl,%dl
jne    80518a0 <__sprintf_chk@plt+0x82b0>
and    $0x3ff,%eax
lea    0x1780(%ebx,%eax,4),%eax
mov    (%eax),%edx
lea    0x8(%ecx),%esi
test   %edx,%edx
mov    %edx,0x8(%ecx)
je     80518ce <__sprintf_chk@plt+0x82de>
mov    %esi,0x4(%edx)
mov    %esi,(%eax)
mov    %eax,0xc(%ecx)
jmp    8051689 <__sprintf_chk@plt+0x8099>
mov    $0x105,%eax
jmp    80518b8 <__sprintf_chk@plt+0x82c8>
nop
push   %esi
push   %ebx
sub    $0x24,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9716,%ebx
mov    0x30(%esp),%esi
test   %esi,%esi
lea    -0x53da(%ebx),%eax
je     8051926 <__sprintf_chk@plt+0x8336>
mov    %esi,%eax
and    $0x3ff,%eax
mov    0x2780(%ebx,%eax,4),%eax
test   %eax,%eax
jne    805191e <__sprintf_chk@plt+0x832e>
jmp    8051930 <__sprintf_chk@plt+0x8340>
lea    0x0(%esi),%esi
mov    (%eax),%eax
test   %eax,%eax
je     8051930 <__sprintf_chk@plt+0x8340>
cmp    0x14(%eax),%esi
jne    8051918 <__sprintf_chk@plt+0x8328>
add    $0x1a,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049410 <if_indextoname@plt>
test   %eax,%eax
je     805194e <__sprintf_chk@plt+0x835e>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    -0x3b75(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x34(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
jmp    8051926 <__sprintf_chk@plt+0x8336>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x966a,%ebx
sub    $0x18,%esp
lea    0x1764(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80518e0 <__sprintf_chk@plt+0x82f0>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
call   8051bd1 <__sprintf_chk@plt+0x85e1>
add    $0x9637,%ecx
test   %edx,%edx
je     80519f8 <__sprintf_chk@plt+0x8408>
mov    %edx,%eax
and    $0x3ff,%eax
mov    0x2780(%ecx,%eax,4),%eax
test   %eax,%eax
jne    80519ee <__sprintf_chk@plt+0x83fe>
jmp    80519f8 <__sprintf_chk@plt+0x8408>
nop
mov    (%eax),%eax
test   %eax,%eax
je     80519f8 <__sprintf_chk@plt+0x8408>
cmp    0x14(%eax),%edx
jne    80519e8 <__sprintf_chk@plt+0x83f8>
movzwl 0x18(%eax),%eax
ret
mov    $0xffffffff,%eax
ret
xchg   %ax,%ax
mov    0x4(%esp),%edx
xor    %eax,%eax
call   8051bd1 <__sprintf_chk@plt+0x85e1>
add    $0x95f5,%ecx
test   %edx,%edx
je     8051a3e <__sprintf_chk@plt+0x844e>
mov    %edx,%eax
and    $0x3ff,%eax
mov    0x2780(%ecx,%eax,4),%eax
test   %eax,%eax
jne    8051a36 <__sprintf_chk@plt+0x8446>
jmp    8051a40 <__sprintf_chk@plt+0x8450>
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%eax
test   %eax,%eax
je     8051a40 <__sprintf_chk@plt+0x8450>
cmp    0x14(%eax),%edx
jne    8051a30 <__sprintf_chk@plt+0x8440>
mov    0x10(%eax),%eax
repz ret
mov    $0xffffffff,%eax
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
xor    %eax,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%edi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x959f,%ebx
test   %edi,%edi
je     8051acc <__sprintf_chk@plt+0x84dc>
movsbl (%edi),%eax
test   %al,%al
je     8051b08 <__sprintf_chk@plt+0x8518>
mov    %edi,%ecx
mov    $0x1505,%edx
lea    0x0(%esi),%esi
mov    %edx,%esi
add    $0x1,%ecx
shl    $0x5,%esi
add    %esi,%eax
add    %eax,%edx
movsbl (%ecx),%eax
test   %al,%al
jne    8051a80 <__sprintf_chk@plt+0x8490>
and    $0x3ff,%edx
mov    0x1780(%ebx,%edx,4),%esi
test   %esi,%esi
jne    8051aae <__sprintf_chk@plt+0x84be>
jmp    8051ad8 <__sprintf_chk@plt+0x84e8>
xchg   %ax,%ax
mov    (%esi),%esi
test   %esi,%esi
je     8051ad8 <__sprintf_chk@plt+0x84e8>
lea    0x12(%esi),%eax
movl   $0x10,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049550 <strncmp@plt>
test   %eax,%eax
jne    8051aa8 <__sprintf_chk@plt+0x84b8>
mov    0xc(%esi),%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049260 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
jne    8051acc <__sprintf_chk@plt+0x84dc>
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x3b70(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   80494f0 <sscanf@plt>
mov    0x1c(%esp),%eax
jmp    8051acc <__sprintf_chk@plt+0x84dc>
mov    $0x105,%edx
jmp    8051a99 <__sprintf_chk@plt+0x84a9>
nop
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x94ea,%ebx
sub    $0x18,%esp
mov    0x1760(%ebx),%eax
test   %eax,%eax
je     8051b30 <__sprintf_chk@plt+0x8540>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
mov    0x20(%esp),%eax
movl   $0x12,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8051f50 <__sprintf_chk@plt+0x8960>
test   %eax,%eax
js     8051b81 <__sprintf_chk@plt+0x8591>
lea    -0x99a0(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80525b0 <__sprintf_chk@plt+0x8fc0>
test   %eax,%eax
js     8051b9b <__sprintf_chk@plt+0x85ab>
movl   $0x1,0x1760(%ebx)
00
add    $0x18,%esp
pop    %ebx
ret
lea    -0x3b6b(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3b52(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
mov    (%esp),%ecx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9412,%ebx
mov    (%esi),%eax
test   %eax,%eax
js     8051c08 <__sprintf_chk@plt+0x8618>
mov    %eax,(%esp)
call   80495a0 <close@plt>
movl   $0xffffffff,(%esi)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
push   %edi
mov    $0x24,%edx
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x40(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x93dc,%ebx
movl   $0x8000,0x2c(%esp)
test   $0x1,%esi
mov    %esi,%edi
jne    8051d90 <__sprintf_chk@plt+0x87a0>
test   $0x2,%edi
jne    8051da8 <__sprintf_chk@plt+0x87b8>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     8051c63 <__sprintf_chk@plt+0x8673>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
and    $0x1,%edx
je     8051c6b <__sprintf_chk@plt+0x867b>
movb   $0x0,(%edi)
mov    0x48(%esp),%eax
movl   $0x80003,0x4(%esp)
movl   $0x10,(%esp)
mov    %eax,0x8(%esp)
call   8049530 <socket@plt>
test   %eax,%eax
mov    %eax,(%esi)
js     8051e08 <__sprintf_chk@plt+0x8818>
lea    0x2c(%esp),%edx
movl   $0x4,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <setsockopt@plt>
test   %eax,%eax
js     8051e20 <__sprintf_chk@plt+0x8830>
lea    0x1ac(%ebx),%eax
movl   $0x4,0x10(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049050 <setsockopt@plt>
test   %eax,%eax
js     8051e38 <__sprintf_chk@plt+0x8848>
lea    0x4(%esi),%edi
mov    $0x10,%eax
movl   $0x0,0x4(%esi)
movl   $0x0,0x4(%edi)
mov    %ax,0x4(%esi)
mov    0x44(%esp),%eax
mov    %eax,0xc(%esi)
movl   $0xc,0x8(%esp)
mov    %edi,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049390 <bind@plt>
test   %eax,%eax
js     8051e50 <__sprintf_chk@plt+0x8860>
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    (%esi),%eax
movl   $0xc,0x28(%esp)
mov    %eax,(%esp)
call   8049510 <getsockname@plt>
test   %eax,%eax
js     8051e68 <__sprintf_chk@plt+0x8878>
mov    0x28(%esp),%eax
cmp    $0xc,%eax
jne    8051df8 <__sprintf_chk@plt+0x8808>
movzwl 0x4(%esi),%eax
cmp    $0x10,%ax
jne    8051dc0 <__sprintf_chk@plt+0x87d0>
movl   $0x0,(%esp)
call   8049110 <time@plt>
mov    %eax,0x1c(%esi)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%esi),%edi
mov    $0x23,%dl
test   $0x2,%edi
movb   $0x0,(%esi)
je     8051c4c <__sprintf_chk@plt+0x865c>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
sub    $0x2,%edx
jmp    8051c4c <__sprintf_chk@plt+0x865c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
lea    -0x3acb(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
add    $0x30,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
lea    -0x3ae4(%ebx),%eax
jmp    8051dca <__sprintf_chk@plt+0x87da>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x3b41(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8051d82 <__sprintf_chk@plt+0x8792>
lea    -0x3b26(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8051d82 <__sprintf_chk@plt+0x8792>
lea    -0x3b1c(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8051d82 <__sprintf_chk@plt+0x8792>
lea    -0x3b12(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8051d82 <__sprintf_chk@plt+0x8792>
lea    -0x3af7(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8051d82 <__sprintf_chk@plt+0x8792>
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9173,%ebx
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051c10 <__sprintf_chk@plt+0x8620>
add    $0x18,%esp
pop    %ebx
ret
push   %edi
xor    %eax,%eax
push   %esi
mov    $0xa,%ecx
push   %ebx
sub    $0x40,%esp
lea    0x18(%esp),%esi
mov    0x50(%esp),%edx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    0x58(%esp),%eax
mov    $0x1d,%ecx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9129,%ebx
mov    $0x8,%edi
mov    %di,0x38(%esp)
movl   $0x28,0x18(%esp)
mov    %ax,0x1c(%esp)
mov    $0x301,%eax
mov    %ax,0x1e(%esp)
mov    0x1c(%edx),%eax
mov    %cx,0x3a(%esp)
add    $0x1,%eax
mov    %eax,0x1c(%edx)
mov    %eax,0x20(%edx)
mov    %eax,0x20(%esp)
mov    0x54(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x0,0xc(%esp)
movl   $0x28,0x8(%esp)
mov    %al,0x28(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x3c(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   80495e0 <send@plt>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x90a3,%ebx
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8051eb0 <__sprintf_chk@plt+0x88c0>
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9063,%ebx
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   80495e0 <send@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x420,%esp
mov    %gs:0x14,%eax
mov    %eax,0x41c(%esp)
xor    %eax,%eax
mov    0x438(%esp),%eax
mov    0x430(%esp),%edi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x9005,%ebx
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x434(%esp),%eax
mov    %eax,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80495e0 <send@plt>
test   %eax,%eax
js     805208b <__sprintf_chk@plt+0x8a9b>
lea    0x1c(%esp),%esi
movl   $0x42,0xc(%esp)
movl   $0x400,0x8(%esp)
mov    %esi,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049590 <recv@plt>
test   %eax,%eax
js     80520a8 <__sprintf_chk@plt+0x8ab8>
cmp    $0xf,%eax
jle    8052089 <__sprintf_chk@plt+0x8a99>
mov    0x1c(%esp),%edx
cmp    $0xf,%edx
jbe    8052089 <__sprintf_chk@plt+0x8a99>
cmp    %edx,%eax
jb     8052089 <__sprintf_chk@plt+0x8a99>
cmpw   $0x2,0x20(%esp)
jne    805207a <__sprintf_chk@plt+0x8a8a>
jmp    80520c0 <__sprintf_chk@plt+0x8ad0>
mov    (%esi),%edx
cmp    $0xf,%edx
jbe    8052089 <__sprintf_chk@plt+0x8a99>
cmp    %eax,%edx
ja     8052089 <__sprintf_chk@plt+0x8a99>
cmpw   $0x2,0x4(%esi)
je     80520c0 <__sprintf_chk@plt+0x8ad0>
add    $0x3,%edx
and    $0xfffffffc,%edx
sub    %edx,%eax
add    %edx,%esi
cmp    $0xf,%eax
jg     8052068 <__sprintf_chk@plt+0x8a78>
xor    %eax,%eax
mov    0x41c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8052109 <__sprintf_chk@plt+0x8b19>
add    $0x420,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049430 <__errno_location@plt>
cmpl   $0xb,(%eax)
setne  %al
movzbl %al,%eax
neg    %eax
jmp    805208b <__sprintf_chk@plt+0x8a9b>
lea    0x0(%esi),%esi
cmp    $0x23,%edx
jbe    80520d8 <__sprintf_chk@plt+0x8ae8>
call   8049430 <__errno_location@plt>
mov    0x10(%esi),%edx
neg    %edx
mov    %edx,(%eax)
mov    $0xffffffff,%eax
jmp    805208b <__sprintf_chk@plt+0x8a9b>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x517c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805208b <__sprintf_chk@plt+0x8a9b>
call   8055a60 <__sprintf_chk@plt+0xc470>
xchg   %ax,%ax
push   %ebx
mov    $0x10,%edx
sub    $0x68,%esp
lea    0x24(%esp),%eax
mov    0x7c(%esp),%ecx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x8eda,%ebx
mov    %eax,0x34(%esp)
mov    0x78(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %dx,0x18(%esp)
lea    0x44(%esp),%edx
mov    %eax,0x3c(%esp)
xor    %eax,%eax
movl   $0x0,0x20(%esp)
movl   $0x10,0x38(%esp)
mov    %ecx,0x40(%esp)
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8052167 <__sprintf_chk@plt+0x8b77>
lea    0x18(%esp),%eax
add    $0x10,%ecx
mov    %eax,0x44(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x4c(%esp)
mov    0x74(%esp),%eax
mov    %ecx,0x24(%esp)
mov    0x70(%esp),%ecx
movl   $0xc,0x48(%esp)
movl   $0x2,0x50(%esp)
mov    %ax,0x28(%esp)
mov    $0x301,%eax
mov    %ax,0x2a(%esp)
mov    0x70(%esp),%eax
movl   $0x0,0x30(%esp)
mov    0x1c(%eax),%eax
mov    %eax,0xc(%esp)
add    $0x1,%eax
mov    %eax,0x1c(%ecx)
mov    %eax,0x20(%ecx)
mov    %eax,0x2c(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
call   80494d0 <sendmsg@plt>
add    $0x68,%esp
pop    %ebx
ret
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x408c,%esp
mov    0x40a4(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x8dfa,%ebx
mov    0x40a0(%esp),%ebp
mov    %eax,0x3c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x407c(%esp)
xor    %eax,%eax
lea    0x60(%esp),%eax
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    0x34(%esp),%edx
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8052230 <__sprintf_chk@plt+0x8c40>
lea    0x54(%esp),%eax
mov    %eax,0x30(%esp)
mov    %eax,0x60(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x68(%esp)
lea    0x7c(%esp),%eax
movl   $0xc,0x64(%esp)
movl   $0x1,0x6c(%esp)
mov    %eax,0x2c(%esp)
mov    %eax,0x4c(%esp)
movl   $0x0,0x24(%esp)
mov    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x4000,0x50(%esp)
mov    %eax,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   8049500 <recvmsg@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
js     8052420 <__sprintf_chk@plt+0x8e30>
je     8052533 <__sprintf_chk@plt+0x8f43>
mov    0x3c(%esp),%eax
mov    (%eax),%edx
test   %edx,%edx
je     80524d5 <__sprintf_chk@plt+0x8ee5>
mov    %eax,0x20(%esp)
movl   $0x0,0x38(%esp)
lea    0x0(%esi),%esi
mov    0x28(%esp),%ecx
cmp    $0xf,%ecx
jle    80523b1 <__sprintf_chk@plt+0x8dc1>
mov    0x7c(%esp),%edx
cmp    $0xf,%edx
jbe    80523b1 <__sprintf_chk@plt+0x8dc1>
cmp    %edx,%ecx
mov    %ecx,%edi
jb     80523b1 <__sprintf_chk@plt+0x8dc1>
mov    0x2c(%esp),%esi
jmp    805232c <__sprintf_chk@plt+0x8d3c>
lea    0x0(%esi),%esi
mov    (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%edi
add    %eax,%esi
cmp    $0xf,%edi
mov    %edi,%ecx
jle    80523b8 <__sprintf_chk@plt+0x8dc8>
mov    (%esi),%edx
cmp    $0xf,%edx
jbe    80523b8 <__sprintf_chk@plt+0x8dc8>
cmp    %edi,%edx
ja     80523b8 <__sprintf_chk@plt+0x8dc8>
mov    %ecx,%edi
mov    0x58(%esp),%eax
test   %eax,%eax
jne    8052300 <__sprintf_chk@plt+0x8d10>
mov    0x8(%ebp),%eax
cmp    %eax,0xc(%esi)
jne    8052300 <__sprintf_chk@plt+0x8d10>
mov    0x20(%ebp),%eax
cmp    %eax,0x8(%esi)
jne    8052300 <__sprintf_chk@plt+0x8d10>
testb  $0x10,0x6(%esi)
mov    $0x1,%eax
cmove  0x24(%esp),%eax
mov    %eax,0x24(%esp)
movzwl 0x4(%esi),%eax
cmp    $0x3,%ax
je     80524b5 <__sprintf_chk@plt+0x8ec5>
cmp    $0x2,%ax
je     8052478 <__sprintf_chk@plt+0x8e88>
mov    0x20(%esp),%edx
mov    0x4(%edx),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   *(%edx)
test   %eax,%eax
jns    8052300 <__sprintf_chk@plt+0x8d10>
mov    %eax,%esi
mov    0x407c(%esp),%edx
xor    %gs:0x14,%edx
mov    %esi,%eax
jne    80525a4 <__sprintf_chk@plt+0x8fb4>
add    $0x408c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x28(%esp),%ecx
lea    0x0(%esi),%esi
addl   $0x8,0x20(%esp)
mov    0x20(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
jne    80522d0 <__sprintf_chk@plt+0x8ce0>
mov    0x38(%esp),%edx
test   %edx,%edx
jne    8052567 <__sprintf_chk@plt+0x8f77>
testb  $0x20,0x78(%esp)
jne    80524e0 <__sprintf_chk@plt+0x8ef0>
test   %ecx,%ecx
je     805227b <__sprintf_chk@plt+0x8c8b>
lea    -0x501c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    %ecx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
call   8049430 <__errno_location@plt>
mov    (%eax),%esi
cmp    $0xb,%esi
je     805227b <__sprintf_chk@plt+0x8c8b>
cmp    $0x4,%esi
je     805227b <__sprintf_chk@plt+0x8c8b>
mov    %esi,(%esp)
call   80492b0 <strerror@plt>
mov    %esi,0x10(%esp)
mov    $0xffffffff,%esi
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x39bc(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
jmp    8052390 <__sprintf_chk@plt+0x8da0>
lea    0x0(%esi),%esi
cmp    $0x23,%edx
ja     805250f <__sprintf_chk@plt+0x8f1f>
mov    -0x10(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x517c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    8052390 <__sprintf_chk@plt+0x8da0>
addl   $0x8,0x20(%esp)
mov    0x20(%esp),%eax
movl   $0x1,0x38(%esp)
mov    (%eax),%esi
test   %esi,%esi
jne    80522d0 <__sprintf_chk@plt+0x8ce0>
jmp    80523cb <__sprintf_chk@plt+0x8ddb>
testb  $0x20,0x78(%esp)
je     805227b <__sprintf_chk@plt+0x8c8b>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x502f(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    805227b <__sprintf_chk@plt+0x8c8b>
call   8049430 <__errno_location@plt>
mov    0x10(%esi),%edx
mov    $0xffffffff,%esi
neg    %edx
mov    %edx,(%eax)
lea    -0x3ab2(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
jmp    8052390 <__sprintf_chk@plt+0x8da0>
mov    -0x10(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x518c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    8052390 <__sprintf_chk@plt+0x8da0>
mov    0x24(%esp),%eax
xor    %esi,%esi
test   %eax,%eax
je     8052390 <__sprintf_chk@plt+0x8da0>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x399c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    8052390 <__sprintf_chk@plt+0x8da0>
call   8055a60 <__sprintf_chk@plt+0xc470>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x8a43,%ebx
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80521f0 <__sprintf_chk@plt+0x8c00>
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x407c,%esp
mov    0x4090(%esp),%eax
mov    0x40a0(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x89e3,%ebx
mov    0x4098(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x4094(%esp),%eax
mov    %esi,0x2c(%esp)
mov    %gs:0x14,%esi
mov    %esi,0x406c(%esp)
xor    %esi,%esi
lea    0x50(%esp),%esi
mov    %esi,0x1c(%esp)
mov    (%eax),%ecx
mov    %eax,0x3c(%esp)
mov    %ecx,0x40(%esp)
xor    %ecx,%ecx
mov    0x1c(%esp),%esi
movl   $0x0,(%esi,%ecx,1)
add    $0x4,%ecx
cmp    $0x1c,%ecx
jb     805265d <__sprintf_chk@plt+0x906d>
mov    0x18(%esp),%edi
lea    0x44(%esp),%ecx
mov    %ecx,0x50(%esp)
lea    0x3c(%esp),%ecx
mov    %ecx,0x58(%esp)
mov    $0x10,%ecx
movl   $0x0,0x44(%esp)
mov    0x1c(%edi),%esi
mov    %cx,0x44(%esp)
mov    0x409c(%esp),%ecx
movl   $0xc,0x54(%esp)
movl   $0x1,0x5c(%esp)
mov    %esi,0x20(%esp)
add    $0x1,%esi
mov    %esi,0x1c(%edi)
mov    %esi,0x24(%esp)
mov    %esi,0x8(%eax)
mov    0x2c(%esp),%esi
mov    %edx,0x48(%esp)
mov    %ecx,0x4c(%esp)
test   %esi,%esi
jne    80526d6 <__sprintf_chk@plt+0x90e6>
orw    $0x4,0x6(%eax)
mov    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   80494d0 <sendmsg@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
js     80529e7 <__sprintf_chk@plt+0x93f7>
lea    0x6c(%esp),%eax
movl   $0x4000,0x8(%esp)
mov    %eax,%esi
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x28(%esp)
call   80493d0 <memset@plt>
mov    0x20(%esp),%edx
mov    %esi,0x3c(%esp)
mov    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x20(%esp)
movl   $0x4000,0x40(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049500 <recvmsg@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
mov    %eax,%esi
js     80528d8 <__sprintf_chk@plt+0x92e8>
je     8052967 <__sprintf_chk@plt+0x9377>
mov    0x54(%esp),%eax
cmp    $0xc,%eax
jne    80529ff <__sprintf_chk@plt+0x940f>
mov    0x28(%esp),%ebp
jmp    8052792 <__sprintf_chk@plt+0x91a2>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x3(%edi),%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
add    %eax,%ebp
cmp    $0xf,%esi
jbe    8052830 <__sprintf_chk@plt+0x9240>
mov    0x0(%ebp),%edi
cmp    %esi,%edi
lea    -0x10(%edi),%eax
jg     8052878 <__sprintf_chk@plt+0x9288>
mov    %eax,%ecx
shr    $0x1f,%ecx
test   %cl,%cl
jne    8052878 <__sprintf_chk@plt+0x9288>
cmp    0x48(%esp),%edx
jne    8052788 <__sprintf_chk@plt+0x9198>
mov    0x18(%esp),%ecx
mov    0x8(%ecx),%ecx
cmp    %ecx,0xc(%ebp)
jne    8052788 <__sprintf_chk@plt+0x9198>
mov    0x24(%esp),%ecx
cmp    0x8(%ebp),%ecx
jne    8052788 <__sprintf_chk@plt+0x9198>
cmpw   $0x2,0x4(%ebp)
je     805299b <__sprintf_chk@plt+0x93ab>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    80529cc <__sprintf_chk@plt+0x93dc>
mov    -0x10(%ebx),%eax
add    $0x3,%edi
and    $0xfffffffc,%edi
sub    %edi,%esi
add    %edi,%ebp
mov    %edx,0x20(%esp)
mov    (%eax),%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3a22(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
cmp    $0xf,%esi
mov    0x20(%esp),%edx
ja     805279b <__sprintf_chk@plt+0x91ab>
lea    0x0(%esi),%esi
testb  $0x20,0x68(%esp)
jne    8052930 <__sprintf_chk@plt+0x9340>
test   %esi,%esi
je     8052732 <__sprintf_chk@plt+0x9142>
mov    %esi,0xc(%esp)
lea    -0x501c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
testb  $0x20,0x68(%esp)
je     8052a13 <__sprintf_chk@plt+0x9423>
mov    -0x10(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3a6a(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    0x406c(%esp),%edx
xor    %gs:0x14,%edx
mov    %esi,%eax
jne    8052a0e <__sprintf_chk@plt+0x941e>
add    $0x407c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049430 <__errno_location@plt>
mov    0x20(%esp),%edx
mov    (%eax),%esi
cmp    $0xb,%esi
je     8052732 <__sprintf_chk@plt+0x9142>
cmp    $0x4,%esi
je     8052732 <__sprintf_chk@plt+0x9142>
mov    %esi,(%esp)
call   80492b0 <strerror@plt>
mov    %esi,0x10(%esp)
mov    $0xffffffff,%esi
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x39bc(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
xchg   %ax,%ax
mov    -0x10(%ebx),%eax
mov    %edx,0x20(%esp)
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x502f(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    0x20(%esp),%edx
jmp    8052732 <__sprintf_chk@plt+0x9142>
mov    -0x10(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x518c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
cmp    $0x13,%eax
jbe    8052a68 <__sprintf_chk@plt+0x9478>
mov    0x10(%ebp),%esi
test   %esi,%esi
jne    8052a22 <__sprintf_chk@plt+0x9432>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     80528b2 <__sprintf_chk@plt+0x92c2>
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
mov    0x2c(%esp),%eax
xor    %esi,%esi
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <memcpy@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
lea    -0x3aa0(%ebx),%eax
mov    $0xffffffff,%esi
mov    %eax,(%esp)
call   8049200 <perror@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
mov    %eax,0xc(%esp)
lea    -0x3a87(%ebx),%eax
jmp    805284d <__sprintf_chk@plt+0x925d>
call   8055a60 <__sprintf_chk@plt+0xc470>
mov    %edi,0xc(%esp)
lea    -0x3a57(%ebx),%eax
jmp    805284d <__sprintf_chk@plt+0x925d>
neg    %esi
mov    %esi,(%esp)
mov    $0xffffffff,%esi
call   80492b0 <strerror@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3a39(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
call   8049430 <__errno_location@plt>
mov    0x10(%ebp),%edx
neg    %edx
mov    %edx,(%eax)
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
mov    -0x10(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x517c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    80528b2 <__sprintf_chk@plt+0x92c2>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x207c,%esp
mov    0x2090(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x854a,%ebx
mov    %eax,0x28(%esp)
mov    0x2094(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x2098(%esp),%eax
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x206c(%esp)
xor    %eax,%eax
lea    0x50(%esp),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
mov    0x24(%esp),%ecx
movl   $0x0,(%ecx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8052aef <__sprintf_chk@plt+0x94ff>
lea    0x44(%esp),%eax
mov    %eax,0x20(%esp)
mov    %eax,0x50(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x58(%esp)
mov    $0x10,%eax
movl   $0x0,0x44(%esp)
mov    %ax,0x44(%esp)
lea    0x6c(%esp),%eax
movl   $0xc,0x54(%esp)
movl   $0x1,0x5c(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
mov    %eax,0x2c(%esp)
mov    %eax,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x2000,0x40(%esp)
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049500 <recvmsg@plt>
test   %eax,%eax
js     8052c60 <__sprintf_chk@plt+0x9670>
je     8052d3f <__sprintf_chk@plt+0x974f>
mov    0x54(%esp),%edx
cmp    $0xc,%edx
jne    8052d82 <__sprintf_chk@plt+0x9792>
cmp    $0xf,%eax
mov    %eax,%esi
jbe    8052d09 <__sprintf_chk@plt+0x9719>
mov    0x6c(%esp),%ebp
cmp    %ebp,%eax
jl     8052c22 <__sprintf_chk@plt+0x9632>
mov    %ebp,%eax
sub    $0x10,%eax
js     8052c22 <__sprintf_chk@plt+0x9632>
mov    0x2c(%esp),%edi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
jmp    8052be3 <__sprintf_chk@plt+0x95f3>
nop
lea    0x3(%edi),%edx
and    $0xfffffffc,%edx
sub    %edx,%esi
add    %edx,%ebp
cmp    $0xf,%esi
mov    %esi,%eax
jbe    8052cc8 <__sprintf_chk@plt+0x96d8>
mov    0x0(%ebp),%edi
cmp    %esi,%edi
jg     8052c20 <__sprintf_chk@plt+0x9630>
mov    %edi,%eax
sub    $0x10,%eax
js     8052c20 <__sprintf_chk@plt+0x9630>
mov    0x1c(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    0x18(%esp),%eax
call   *%eax
test   %eax,%eax
jns    8052bc0 <__sprintf_chk@plt+0x95d0>
mov    0x206c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8052d7d <__sprintf_chk@plt+0x978d>
add    $0x207c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    %edi,%ebp
testb  $0x20,0x68(%esp)
je     8052d6e <__sprintf_chk@plt+0x977e>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3a6a(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8052c00 <__sprintf_chk@plt+0x9610>
xchg   %ax,%ax
call   8049430 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0xb,%esi
je     8052b58 <__sprintf_chk@plt+0x9568>
cmp    $0x4,%esi
je     8052b58 <__sprintf_chk@plt+0x9568>
mov    %esi,(%esp)
call   80492b0 <strerror@plt>
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x39bc(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
cmpl   $0x69,0x0(%ebp)
je     8052b58 <__sprintf_chk@plt+0x9568>
mov    $0xffffffff,%eax
jmp    8052c00 <__sprintf_chk@plt+0x9610>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x20,0x68(%esp)
jne    8052d10 <__sprintf_chk@plt+0x9720>
test   %esi,%esi
je     8052b58 <__sprintf_chk@plt+0x9568>
mov    %eax,0xc(%esp)
lea    -0x501c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
testb  $0x20,0x68(%esp)
je     8052cd7 <__sprintf_chk@plt+0x96e7>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x502f(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    8052b58 <__sprintf_chk@plt+0x9568>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x518c(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
jmp    8052cb7 <__sprintf_chk@plt+0x96c7>
mov    %ebp,0xc(%esp)
lea    -0x3a57(%ebx),%eax
jmp    8052ce1 <__sprintf_chk@plt+0x96f1>
call   8055a60 <__sprintf_chk@plt+0xc470>
mov    %edx,0xc(%esp)
lea    -0x3a0d(%ebx),%eax
jmp    8052ce1 <__sprintf_chk@plt+0x96f1>
jmp    8052da0 <__sprintf_chk@plt+0x97b0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x203c,%esp
mov    0x2054(%esp),%eax
lea    0x2c(%esp),%edi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x8246,%ebx
mov    0x2050(%esp),%esi
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
mov    %eax,0x18(%esp)
mov    0x2058(%esp),%eax
movl   $0x0,0x28(%esp)
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x202c(%esp)
xor    %eax,%eax
mov    $0x10,%eax
mov    %ax,0x20(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x14(%esp)
nop
mov    %esi,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8049250 <fread@plt>
test   %eax,%eax
js     8052ec8 <__sprintf_chk@plt+0x98d8>
je     8052ef0 <__sprintf_chk@plt+0x9900>
mov    0x2c(%esp),%eax
lea    -0x10(%eax),%ebp
cmp    $0x1ff0,%ebp
ja     8052ef8 <__sprintf_chk@plt+0x9908>
sub    $0xd,%eax
and    $0xfffffffc,%eax
mov    %eax,0xc(%esp)
mov    0x14(%esp),%eax
mov    %esi,0x10(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1ff0,0x4(%esp)
mov    %eax,(%esp)
call   8049490 <__fread_chk@plt>
test   %eax,%eax
js     8052ed6 <__sprintf_chk@plt+0x98e6>
cmp    %eax,%ebp
jg     8052f40 <__sprintf_chk@plt+0x9950>
mov    0x1c(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
mov    0x18(%esp),%eax
call   *%eax
test   %eax,%eax
jns    8052e10 <__sprintf_chk@plt+0x9820>
lea    0x0(%esi,%eiz,1),%esi
mov    0x202c(%esp),%edx
xor    %gs:0x14,%edx
jne    8052f74 <__sprintf_chk@plt+0x9984>
add    $0x203c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
call   8049430 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     8052e10 <__sprintf_chk@plt+0x9820>
lea    -0x39f0(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <perror@plt>
mov    $0xffffffff,%eax
jmp    8052ea8 <__sprintf_chk@plt+0x98b8>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    8052ea8 <__sprintf_chk@plt+0x98b8>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
mov    %eax,0x14(%esp)
call   80493a0 <ftell@plt>
mov    0x14(%esp),%ecx
movl   $0x1,0x4(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x10(%esp)
lea    -0x396c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8052ea8 <__sprintf_chk@plt+0x98b8>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3948(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8052ea8 <__sprintf_chk@plt+0x98b8>
call   8055a60 <__sprintf_chk@plt+0xc470>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x40(%esp),%edx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x806c,%ebx
mov    (%edi),%eax
lea    0x7(%edx),%esi
and    $0xfffffffc,%esi
lea    0x4(%edx),%ecx
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%esi,%eax,1),%ebp
cmp    0x34(%esp),%ebp
ja     8052ff0 <__sprintf_chk@plt+0x9a00>
mov    0x38(%esp),%ebp
add    %edi,%eax
mov    %cx,(%eax)
add    $0x4,%eax
mov    %bp,-0x2(%eax)
mov    %edx,0x8(%esp)
mov    0x3c(%esp),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    (%edi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%esi
xor    %eax,%eax
mov    %esi,(%edi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x34(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x3924(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8052fe6 <__sprintf_chk@plt+0x99f6>
jmp    8053030 <__sprintf_chk@plt+0x9a40>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebx
sub    $0x28,%esp
mov    0x38(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7fc3,%ebx
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x28,%esp
pop    %ebx
ret
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7f83,%ebx
movl   $0x1,0x10(%esp)
mov    %al,0x1c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7f33,%ebx
movl   $0x2,0x10(%esp)
mov    %ax,0x1c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7edb,%ebx
movl   $0x4,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x28,%esp
pop    %ebx
ret
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7ea3,%ebx
movl   $0x8,0x10(%esp)
mov    %eax,0x18(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x18(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x28,%esp
pop    %ebx
ret
push   %esi
push   %ebx
sub    $0x24,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7e56,%ebx
mov    0x3c(%esp),%esi
mov    %esi,(%esp)
call   8049350 <strlen@plt>
mov    %esi,0xc(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
mov    0x3c(%esp),%ebp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7dfc,%ebx
mov    (%esi),%eax
lea    0x3(%ebp),%edi
and    $0xfffffffc,%edi
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%edi,%eax,1),%edx
cmp    0x34(%esp),%edx
ja     8053278 <__sprintf_chk@plt+0x9c88>
mov    0x38(%esp),%edx
add    %esi,%eax
mov    %ebp,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   80490d0 <memcpy@plt>
mov    (%esi),%eax
mov    %edi,%edx
sub    %ebp,%edx
mov    %edx,0x8(%esp)
movl   $0x0,0x4(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%ebp
add    %esi,%ebp
mov    %ebp,(%esp)
call   80493d0 <memset@plt>
mov    (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%edi
xor    %eax,%eax
mov    %edi,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x38f4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8053269 <__sprintf_chk@plt+0x9c79>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%edx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7d42,%ebx
mov    (%edx),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%edx,%eax,1),%esi
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
add    $0x24,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
push   %esi
mov    0x8(%esp),%esi
mov    0xc(%esp),%ecx
mov    (%esi),%eax
lea    0x3(%eax),%edx
and    $0xfffffffc,%edx
add    %esi,%edx
sub    %ecx,%edx
mov    %dx,(%ecx)
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7cd0,%ebx
mov    0x48(%esp),%edi
mov    (%esi),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
lea    0x3(%eax),%ebp
mov    0x50(%esp),%eax
and    $0xfffffffc,%ebp
add    %esi,%ebp
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x4(%esp)
call   8052f80 <__sprintf_chk@plt+0x9990>
mov    0x44(%esp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80532b0 <__sprintf_chk@plt+0x9cc0>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7c5e,%ebx
movzwl (%eax),%edx
add    $0x3,%edx
and    $0xfffffffc,%edx
lea    (%eax,%edx,1),%ecx
mov    (%esi),%edx
add    $0x3,%edx
and    $0xfffffffc,%edx
add    %esi,%edx
sub    %eax,%edx
mov    %dx,(%eax)
mov    %esi,(%esp)
mov    %ecx,0x4(%esp)
call   8053300 <__sprintf_chk@plt+0x9d10>
mov    (%esi),%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%edx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7c13,%ebx
movzwl (%edx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    0x8(%eax),%ecx
cmp    0x24(%esp),%ecx
jg     8053438 <__sprintf_chk@plt+0x9e48>
mov    0x28(%esp),%ecx
add    %edx,%eax
mov    %cx,0x2(%eax)
mov    $0x8,%ecx
mov    %cx,(%eax)
mov    0x2c(%esp),%ecx
mov    %ecx,0x4(%eax)
movzwl (%edx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    $0x8,%eax
mov    %ax,(%edx)
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x38c4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    805342f <__sprintf_chk@plt+0x9e3f>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x30(%esp),%ecx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7b7d,%ebx
movzwl (%esi),%eax
lea    0x7(%ecx),%edx
and    $0xfffffffc,%edx
lea    0x4(%ecx),%edi
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%edx
cmp    0x24(%esp),%edx
jg     80534e8 <__sprintf_chk@plt+0x9ef8>
mov    0x28(%esp),%edx
add    %esi,%eax
mov    %di,(%eax)
add    $0x4,%eax
mov    %dx,-0x2(%eax)
mov    0x2c(%esp),%edx
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   80490d0 <memcpy@plt>
movzwl (%esi),%eax
lea    0x3(%edi),%edx
and    $0xfffffffc,%edx
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %edx,%eax
mov    %ax,(%esi)
xor    %eax,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x388c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80534dd <__sprintf_chk@plt+0x9eed>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%edx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7ad0,%ebx
mov    0x4c(%esp),%esi
movl   $0x0,0x4(%esp)
mov    0x48(%esp),%edi
mov    0x50(%esp),%ebp
lea    0x4(,%edx,4),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   80493d0 <memset@plt>
cmp    $0x3,%esi
jle    80535d8 <__sprintf_chk@plt+0x9fe8>
movzwl (%edi),%eax
cmp    $0x3,%ax
jbe    80535e0 <__sprintf_chk@plt+0x9ff0>
cmp    %eax,%esi
jl     80535e0 <__sprintf_chk@plt+0x9ff0>
mov    0x1c(%esp),%edx
not    %ebp
mov    %edx,0x44(%esp)
jmp    80535a4 <__sprintf_chk@plt+0x9fb4>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
add    %eax,%edi
cmp    $0x3,%esi
jle    80535d8 <__sprintf_chk@plt+0x9fe8>
movzwl (%edi),%eax
cmp    $0x3,%ax
jbe    80535e0 <__sprintf_chk@plt+0x9ff0>
cmp    %esi,%eax
jg     80535e0 <__sprintf_chk@plt+0x9ff0>
mov    %ebp,%ecx
and    0x2(%edi),%cx
movzwl %cx,%ecx
cmp    %ecx,0x44(%esp)
jl     8053588 <__sprintf_chk@plt+0x9f98>
mov    0x40(%esp),%edx
lea    (%edx,%ecx,4),%ecx
mov    (%ecx),%edx
test   %edx,%edx
jne    8053588 <__sprintf_chk@plt+0x9f98>
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
mov    %edi,(%ecx)
add    %eax,%edi
cmp    $0x3,%esi
jg     8053597 <__sprintf_chk@plt+0x9fa7>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     805360a <__sprintf_chk@plt+0xa01a>
movzwl (%edi),%eax
nop
mov    %eax,0x10(%esp)
lea    -0x39da(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x79d3,%ebx
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8053520 <__sprintf_chk@plt+0x9f30>
add    $0x28,%esp
pop    %ebx
ret
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7990,%ebx
mov    0x4c(%esp),%edi
movl   $0x0,0x4(%esp)
mov    0x48(%esp),%esi
lea    0x0(,%ebp,4),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   80493d0 <memset@plt>
cmp    $0x3,%edi
jle    805373c <__sprintf_chk@plt+0xa14c>
movzwl (%esi),%edx
xor    %ecx,%ecx
cmp    $0x3,%dx
jbe    8053700 <__sprintf_chk@plt+0xa110>
cmp    %edx,%edi
jge    80536c6 <__sprintf_chk@plt+0xa0d6>
jmp    8053700 <__sprintf_chk@plt+0xa110>
nop
movzwl (%esi),%edx
cmp    $0x3,%dx
nop
jbe    8053700 <__sprintf_chk@plt+0xa110>
cmp    %edi,%edx
jg     8053700 <__sprintf_chk@plt+0xa110>
movzwl 0x2(%esi),%eax
cmp    %eax,%ebp
jl     80536dc <__sprintf_chk@plt+0xa0ec>
cmp    %ecx,%ebp
jle    80536dc <__sprintf_chk@plt+0xa0ec>
mov    0x40(%esp),%eax
mov    %esi,(%eax,%ecx,4)
add    $0x1,%ecx
add    $0x3,%edx
and    $0xfffffffc,%edx
sub    %edx,%edi
add    %edx,%esi
cmp    $0x3,%edi
jg     80536b8 <__sprintf_chk@plt+0xa0c8>
test   %edi,%edi
jne    80536f9 <__sprintf_chk@plt+0xa109>
add    $0x2c,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzwl (%esi),%edx
lea    0x0(%esi,%eiz,1),%esi
lea    -0x39da(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    %edi,0xc(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %ecx,0x1c(%esp)
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
mov    0x1c(%esp),%ecx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %ecx,%eax
pop    %ebp
ret
xor    %ecx,%ecx
jmp    80536eb <__sprintf_chk@plt+0xa0fb>
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x78af,%ebx
movzwl (%ecx),%edx
sub    $0x4,%edx
cmp    %eax,%edx
jb     80537c8 <__sprintf_chk@plt+0xa1d8>
add    $0x3,%eax
and    $0xfffffffc,%eax
add    $0x4,%eax
cmp    %eax,%edx
jae    8053798 <__sprintf_chk@plt+0xa1a8>
mov    0x24(%esp),%eax
movl   $0x0,0x4(%esp)
lea    0x4(,%eax,4),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80493d0 <memset@plt>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
add    %ecx,%eax
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
sub    $0x4,%edx
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8053620 <__sprintf_chk@plt+0xa030>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    8053793 <__sprintf_chk@plt+0xa1a3>
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7821,%ebx
test   %esi,%esi
je     8053848 <__sprintf_chk@plt+0xa258>
cmpb   $0x0,(%esi)
je     8053848 <__sprintf_chk@plt+0xa258>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049580 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     8053848 <__sprintf_chk@plt+0xa258>
cmp    %edx,%esi
je     8053848 <__sprintf_chk@plt+0xa258>
cmpb   $0x0,(%edx)
jne    8053848 <__sprintf_chk@plt+0xa258>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     8053838 <__sprintf_chk@plt+0xa248>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    8053824 <__sprintf_chk@plt+0xa234>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%edx
bswap  %edx
mov    %edx,%eax
not    %eax
lea    0x1(%eax),%ecx
test   %eax,%ecx
jne    8053884 <__sprintf_chk@plt+0xa294>
xor    %eax,%eax
test   %edx,%edx
je     8053882 <__sprintf_chk@plt+0xa292>
nop
add    $0x1,%eax
add    %edx,%edx
jne    8053878 <__sprintf_chk@plt+0xa288>
nop
repz ret
repz ret
mov    $0xffffffff,%eax
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7761,%ebx
test   %esi,%esi
je     8053900 <__sprintf_chk@plt+0xa310>
cmpb   $0x0,(%esi)
je     8053900 <__sprintf_chk@plt+0xa310>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049320 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     8053900 <__sprintf_chk@plt+0xa310>
cmp    %edx,%esi
je     8053900 <__sprintf_chk@plt+0xa310>
cmpb   $0x0,(%edx)
jne    8053900 <__sprintf_chk@plt+0xa310>
cmp    $0xffffffff,%eax
je     80538f0 <__sprintf_chk@plt+0xa300>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    80538de <__sprintf_chk@plt+0xa2ee>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x76e4,%ebx
mov    0x64(%esp),%ebp
movl   $0x2e,0x4(%esp)
mov    0x68(%esp),%esi
mov    %ebp,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     8053b10 <__sprintf_chk@plt+0xa520>
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049460 <strtod@plt>
fldz
fucomip %st(1),%st
ja     8053ad0 <__sprintf_chk@plt+0xa4e0>
mov    0x3c(%esp),%edi
test   %edi,%edi
je     8053ad4 <__sprintf_chk@plt+0xa4e4>
cmp    %edi,%ebp
je     8053ad8 <__sprintf_chk@plt+0xa4e8>
cmpb   $0x0,(%edi)
jne    8053ae0 <__sprintf_chk@plt+0xa4f0>
fldl   -0x35b0(%ebx)
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jbe    805399d <__sprintf_chk@plt+0xa3ad>
fstpl  0x18(%esp)
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
je     8053ae2 <__sprintf_chk@plt+0xa4f2>
fldl   0x18(%esp)
movl   $0x1,(%esi)
cmpb   $0x0,(%edi)
jne    8053a00 <__sprintf_chk@plt+0xa410>
fnstcw 0x2e(%esp)
xor    %edi,%edi
movzwl 0x2e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x2c(%esp)
fld    %st(0)
fldcw  0x2c(%esp)
fistpll 0x20(%esp)
fldcw  0x2e(%esp)
mov    %edi,0x24(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x20(%esp)
mov    %eax,%ecx
fildll 0x20(%esp)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8053b00 <__sprintf_chk@plt+0xa510>
mov    0x60(%esp),%eax
add    $0x1,%ecx
mov    %ecx,(%eax)
xor    %eax,%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x4f78(%ebx),%eax
movl   $0x0,(%esi)
fstpl  0x18(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     8053af0 <__sprintf_chk@plt+0xa500>
fstp   %st(0)
lea    -0x3856(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     8053af0 <__sprintf_chk@plt+0xa500>
fstp   %st(0)
lea    -0x3851(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     8053af0 <__sprintf_chk@plt+0xa500>
lea    -0x54e9(%ebx),%eax
mov    %eax,0x4(%esp)
fstpl  0x18(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     80539a8 <__sprintf_chk@plt+0xa3b8>
fstp   %st(0)
lea    -0x3857(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     80539a8 <__sprintf_chk@plt+0xa3b8>
fstp   %st(0)
lea    -0x3852(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     80539a8 <__sprintf_chk@plt+0xa3b8>
fstp   %st(0)
jmp    8053ae2 <__sprintf_chk@plt+0xa4f2>
xchg   %ax,%ax
fstp   %st(0)
jmp    8053ae2 <__sprintf_chk@plt+0xa4f2>
fstp   %st(0)
jmp    8053ae2 <__sprintf_chk@plt+0xa4f2>
fstp   %st(0)
jmp    8053ae2 <__sprintf_chk@plt+0xa4f2>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    80539f1 <__sprintf_chk@plt+0xa401>
lea    0x0(%esi,%eiz,1),%esi
fmuls  -0x3f34(%ebx)
jmp    80539a8 <__sprintf_chk@plt+0xa3b8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x60(%esp),%ecx
mov    %eax,(%ecx)
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x3c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049320 <strtoul@plt>
mov    0x3c(%esp),%edi
test   %edi,%edi
mov    %eax,%edx
je     8053ae2 <__sprintf_chk@plt+0xa4f2>
cmp    %edi,%ebp
je     8053ae2 <__sprintf_chk@plt+0xa4f2>
cmpb   $0x0,(%edi)
jne    8053ae2 <__sprintf_chk@plt+0xa4f2>
cmp    $0xffffffff,%eax
xchg   %ax,%ax
je     8053b68 <__sprintf_chk@plt+0xa578>
mov    %edx,%eax
xor    %edx,%edx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
fildll 0x20(%esp)
movl   $0x1,(%esi)
cmpb   $0x0,(%edi)
jne    8053a00 <__sprintf_chk@plt+0xa410>
jmp    80539a8 <__sprintf_chk@plt+0xa3b8>
xchg   %ax,%ax
mov    %eax,0x18(%esp)
call   8049430 <__errno_location@plt>
mov    0x18(%esp),%edx
cmpl   $0x22,(%eax)
jne    8053b42 <__sprintf_chk@plt+0xa552>
jmp    8053ae2 <__sprintf_chk@plt+0xa4f2>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7470,%ebx
mov    0x40(%esp),%edi
test   %esi,%esi
je     8053c00 <__sprintf_chk@plt+0xa610>
cmpb   $0x0,(%esi)
je     8053c00 <__sprintf_chk@plt+0xa610>
mov    0x48(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049450 <strtoull@plt>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
mov    %eax,%ebp
je     8053c00 <__sprintf_chk@plt+0xa610>
cmp    %ecx,%esi
je     8053c00 <__sprintf_chk@plt+0xa610>
cmpb   $0x0,(%ecx)
jne    8053c00 <__sprintf_chk@plt+0xa610>
and    %edx,%eax
cmp    $0xffffffff,%eax
je     8053be8 <__sprintf_chk@plt+0xa5f8>
mov    %ebp,(%edi)
xor    %eax,%eax
mov    %edx,0x4(%edi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
call   8049430 <__errno_location@plt>
mov    0xc(%esp),%edx
cmpl   $0x22,(%eax)
jne    8053bd5 <__sprintf_chk@plt+0xa5e5>
lea    0x0(%esi),%esi
add    $0x2c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x73e1,%ebx
test   %esi,%esi
je     8053c80 <__sprintf_chk@plt+0xa690>
cmpb   $0x0,(%esi)
je     8053c80 <__sprintf_chk@plt+0xa690>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049320 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     8053c80 <__sprintf_chk@plt+0xa690>
cmp    %edx,%esi
je     8053c80 <__sprintf_chk@plt+0xa690>
cmpb   $0x0,(%edx)
jne    8053c80 <__sprintf_chk@plt+0xa690>
cmp    $0xffffffff,%eax
je     8053c70 <__sprintf_chk@plt+0xa680>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    8053c5e <__sprintf_chk@plt+0xa66e>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7362,%ebx
test   %esi,%esi
je     8053cf0 <__sprintf_chk@plt+0xa700>
cmpb   $0x0,(%esi)
je     8053cf0 <__sprintf_chk@plt+0xa700>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049320 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     8053cf0 <__sprintf_chk@plt+0xa700>
cmp    %edx,%esi
je     8053cf0 <__sprintf_chk@plt+0xa700>
cmpb   $0x0,(%edx)
jne    8053cf0 <__sprintf_chk@plt+0xa700>
cmp    $0xffff,%eax
ja     8053cf0 <__sprintf_chk@plt+0xa700>
mov    0x30(%esp),%edx
mov    %ax,(%edx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x24,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x72f2,%ebx
test   %esi,%esi
je     8053d60 <__sprintf_chk@plt+0xa770>
cmpb   $0x0,(%esi)
je     8053d60 <__sprintf_chk@plt+0xa770>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049320 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     8053d60 <__sprintf_chk@plt+0xa770>
cmp    %edx,%esi
je     8053d60 <__sprintf_chk@plt+0xa770>
cmpb   $0x0,(%edx)
jne    8053d60 <__sprintf_chk@plt+0xa770>
cmp    $0xff,%eax
ja     8053d60 <__sprintf_chk@plt+0xa770>
mov    0x30(%esp),%edx
mov    %al,(%edx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x24,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7288,%ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   8049430 <__errno_location@plt>
test   %esi,%esi
mov    %eax,%edi
movl   $0x0,(%eax)
je     8053de8 <__sprintf_chk@plt+0xa7f8>
cmpb   $0x0,(%esi)
je     8053de8 <__sprintf_chk@plt+0xa7f8>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049580 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%ecx
je     8053de8 <__sprintf_chk@plt+0xa7f8>
cmp    %edx,%esi
je     8053de8 <__sprintf_chk@plt+0xa7f8>
cmpb   $0x0,(%edx)
jne    8053de8 <__sprintf_chk@plt+0xa7f8>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     8053de0 <__sprintf_chk@plt+0xa7f0>
mov    0x30(%esp),%eax
mov    %ecx,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
cmpl   $0x22,(%edi)
jne    8053dd1 <__sprintf_chk@plt+0xa7e1>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x71f1,%ebx
test   %esi,%esi
je     8053e88 <__sprintf_chk@plt+0xa898>
cmpb   $0x0,(%esi)
je     8053e88 <__sprintf_chk@plt+0xa898>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049580 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     8053e88 <__sprintf_chk@plt+0xa898>
cmp    %edx,%esi
je     8053e88 <__sprintf_chk@plt+0xa898>
cmpb   $0x0,(%edx)
jne    8053e88 <__sprintf_chk@plt+0xa898>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     8053e78 <__sprintf_chk@plt+0xa888>
lea    0x8000(%edi),%eax
cmp    $0xffff,%eax
ja     8053e88 <__sprintf_chk@plt+0xa898>
mov    0x30(%esp),%eax
mov    %di,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    8053e54 <__sprintf_chk@plt+0xa864>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x7151,%ebx
test   %esi,%esi
je     8053f28 <__sprintf_chk@plt+0xa938>
cmpb   $0x0,(%esi)
je     8053f28 <__sprintf_chk@plt+0xa938>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049580 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     8053f28 <__sprintf_chk@plt+0xa938>
cmp    %edx,%esi
je     8053f28 <__sprintf_chk@plt+0xa938>
cmpb   $0x0,(%edx)
jne    8053f28 <__sprintf_chk@plt+0xa938>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     8053f18 <__sprintf_chk@plt+0xa928>
lea    0x80(%edi),%eax
cmp    $0xff,%eax
ja     8053f28 <__sprintf_chk@plt+0xa938>
mov    0x30(%esp),%eax
mov    %edi,%ecx
mov    %cl,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049430 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    8053ef4 <__sprintf_chk@plt+0xa904>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x28,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ebp
mov    0x64(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x70a7,%ebx
mov    %ebp,%edi
mov    %eax,0x10(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
test   $0x1,%ebp
jne    8054098 <__sprintf_chk@plt+0xaaa8>
test   $0x2,%edi
jne    80540b0 <__sprintf_chk@plt+0xaac0>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     8053fa0 <__sprintf_chk@plt+0xa9b0>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     8053fa8 <__sprintf_chk@plt+0xa9b8>
movb   $0x0,(%edi)
mov    0x10(%esp),%esi
mov    $0x8,%ecx
lea    -0x384c(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8054048 <__sprintf_chk@plt+0xaa58>
mov    0x10(%esp),%eax
cmpb   $0x61,(%eax)
je     8054028 <__sprintf_chk@plt+0xaa38>
mov    0x10(%esp),%eax
movl   $0x3a,0x4(%esp)
mov    %eax,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     80540f7 <__sprintf_chk@plt+0xab07>
cmpl   $0xa,0x68(%esp)
movb   $0xa,0x0(%ebp)
jne    80540e3 <__sprintf_chk@plt+0xaaf3>
lea    0x8(%ebp),%eax
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   80490c0 <inet_pton@plt>
test   %eax,%eax
jle    80540f0 <__sprintf_chk@plt+0xab00>
mov    $0xffffffff,%edx
xor    %ecx,%ecx
movb   $0x10,0x1(%ebp)
mov    %dx,0x2(%ebp)
jmp    805407b <__sprintf_chk@plt+0xaa8b>
nop
movzbl 0x1(%eax),%eax
cmp    $0x6c,%al
jne    80540c8 <__sprintf_chk@plt+0xaad8>
mov    0x10(%esp),%eax
cmpb   $0x6c,0x2(%eax)
jne    8053fc8 <__sprintf_chk@plt+0xa9d8>
cmpb   $0x0,0x3(%eax)
jne    8053fc8 <__sprintf_chk@plt+0xa9d8>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xc,0x68(%esp)
je     80540f0 <__sprintf_chk@plt+0xab00>
movzbl 0x68(%esp),%eax
mov    $0x4,%edx
mov    $0xffffffff,%esi
cmpl   $0xa,0x68(%esp)
mov    %si,0x2(%ebp)
mov    %al,0x0(%ebp)
mov    $0x10,%eax
cmovne %edx,%eax
xor    %ecx,%ecx
mov    %al,0x1(%ebp)
mov    0x3c(%esp),%esi
xor    %gs:0x14,%esi
mov    %ecx,%eax
jne    80541b2 <__sprintf_chk@plt+0xabc2>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
lea    0x1(%ebp),%edi
mov    $0x27,%dl
test   $0x2,%edi
movb   $0x0,0x0(%ebp)
je     8053f89 <__sprintf_chk@plt+0xa999>
lea    0x0(%esi),%esi
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
sub    $0x2,%edx
jmp    8053f89 <__sprintf_chk@plt+0xa999>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6e,%al
jne    8053fc8 <__sprintf_chk@plt+0xa9d8>
mov    0x10(%esp),%eax
cmpb   $0x79,0x2(%eax)
jne    8053fc8 <__sprintf_chk@plt+0xa9d8>
jmp    805403e <__sprintf_chk@plt+0xaa4e>
mov    0x68(%esp),%ecx
test   %ecx,%ecx
je     8053ff3 <__sprintf_chk@plt+0xaa03>
nop
mov    $0xffffffff,%ecx
jmp    805407b <__sprintf_chk@plt+0xaa8b>
cmpl   $0xc,0x68(%esp)
je     8054168 <__sprintf_chk@plt+0xab78>
mov    0x68(%esp),%ecx
movb   $0x2,0x0(%ebp)
and    $0xfffffffd,%ecx
jne    80540f0 <__sprintf_chk@plt+0xab00>
xor    %esi,%esi
lea    0x8(%ebp),%eax
mov    %ebp,0x1c(%esp)
mov    %esi,%ebp
mov    0x10(%esp),%esi
mov    %eax,0x14(%esp)
lea    0x20(%esp),%edi
mov    %ecx,0x18(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8049320 <strtoul@plt>
cmp    $0xff,%eax
ja     80540f0 <__sprintf_chk@plt+0xab00>
mov    0x20(%esp),%edx
cmp    %edx,%esi
je     80540f0 <__sprintf_chk@plt+0xab00>
mov    0x14(%esp),%esi
mov    %al,(%esi,%ebp,1)
movzbl (%edx),%eax
test   %al,%al
je     80541b7 <__sprintf_chk@plt+0xabc7>
cmp    $0x3,%ebp
je     80540f0 <__sprintf_chk@plt+0xab00>
cmp    $0x2e,%al
jne    80540f0 <__sprintf_chk@plt+0xab00>
lea    0x1(%edx),%esi
add    $0x1,%ebp
jmp    8054126 <__sprintf_chk@plt+0xab36>
lea    0x26(%esp),%eax
movb   $0xc,0x0(%ebp)
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
movl   $0xc,(%esp)
mov    %eax,0x4(%esp)
call   80557a0 <__sprintf_chk@plt+0xc1b0>
mov    $0xffffffff,%ecx
test   %eax,%eax
jle    805407b <__sprintf_chk@plt+0xaa8b>
movzwl 0x28(%esp),%eax
xor    %ecx,%ecx
movb   $0x2,0x1(%ebp)
mov    %ax,0x8(%ebp)
mov    $0xffffffff,%eax
mov    %ax,0x2(%ebp)
jmp    805407b <__sprintf_chk@plt+0xaa8b>
call   8055a60 <__sprintf_chk@plt+0xc470>
mov    0x1c(%esp),%ebp
mov    0x18(%esp),%ecx
movb   $0x4,0x1(%ebp)
movw   $0xffff,0x2(%ebp)
jmp    805407b <__sprintf_chk@plt+0xaa8b>
xchg   %ax,%ax
push   %ebp
mov    $0x28,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ebp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6e1b,%ebx
test   $0x1,%ebp
mov    %ebp,%edi
jne    8054348 <__sprintf_chk@plt+0xad58>
test   $0x2,%edi
jne    8054360 <__sprintf_chk@plt+0xad70>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     805421c <__sprintf_chk@plt+0xac2c>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
and    $0x1,%edx
je     8054224 <__sprintf_chk@plt+0xac34>
movb   $0x0,(%edi)
mov    0x64(%esp),%esi
mov    $0x8,%ecx
lea    -0x384c(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8054320 <__sprintf_chk@plt+0xad30>
mov    0x64(%esp),%eax
cmpb   $0x61,(%eax)
je     80542f8 <__sprintf_chk@plt+0xad08>
mov    0x64(%esp),%eax
movl   $0x2f,0x4(%esp)
mov    %eax,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
mov    %eax,%esi
je     8054265 <__sprintf_chk@plt+0xac75>
movb   $0x0,(%eax)
mov    0x68(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
call   8053f40 <__sprintf_chk@plt+0xa950>
test   %eax,%eax
mov    %eax,%edi
jne    8054378 <__sprintf_chk@plt+0xad88>
movzbl 0x0(%ebp),%eax
cmp    $0xa,%al
je     80543b0 <__sprintf_chk@plt+0xadc0>
cmp    $0xc,%al
mov    $0x20,%edx
mov    $0x10,%eax
cmove  %eax,%edx
mov    %dx,0x2(%ebp)
xor    %eax,%eax
test   %esi,%esi
je     805433f <__sprintf_chk@plt+0xad4f>
lea    0x1(%esi),%ecx
lea    0x14(%esp),%eax
mov    %ecx,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0xc(%esp)
call   8053890 <__sprintf_chk@plt+0xa2a0>
mov    0x14(%esp),%edx
mov    0xc(%esp),%ecx
test   %eax,%eax
jne    80543c7 <__sprintf_chk@plt+0xadd7>
movswl 0x2(%ebp),%eax
cmp    %eax,%edx
ja     80543c0 <__sprintf_chk@plt+0xadd0>
orl    $0x1,0x4(%ebp)
mov    %dx,0x2(%ebp)
jmp    805437c <__sprintf_chk@plt+0xad8c>
movzbl 0x1(%eax),%eax
cmp    $0x6e,%al
jne    8054390 <__sprintf_chk@plt+0xada0>
mov    0x64(%esp),%eax
cmpb   $0x79,0x2(%eax)
jne    8054248 <__sprintf_chk@plt+0xac58>
cmpb   $0x0,0x3(%eax)
jne    8054248 <__sprintf_chk@plt+0xac58>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xc,0x68(%esp)
je     8054401 <__sprintf_chk@plt+0xae11>
movzbl 0x68(%esp),%eax
xor    %edx,%edx
movb   $0x0,0x1(%ebp)
mov    %dx,0x2(%ebp)
mov    %al,0x0(%ebp)
xor    %eax,%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x1(%ebp),%edi
mov    $0x27,%dl
test   $0x2,%edi
movb   $0x0,0x0(%ebp)
je     8054205 <__sprintf_chk@plt+0xac15>
lea    0x0(%esi),%esi
xor    %esi,%esi
add    $0x2,%edi
mov    %si,-0x2(%edi)
sub    $0x2,%edx
jmp    8054205 <__sprintf_chk@plt+0xac15>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     805433f <__sprintf_chk@plt+0xad4f>
movb   $0x2f,(%esi)
add    $0x4c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6c,%al
jne    8054248 <__sprintf_chk@plt+0xac58>
mov    0x64(%esp),%eax
cmpb   $0x6c,0x2(%eax)
jne    8054248 <__sprintf_chk@plt+0xac58>
jmp    8054312 <__sprintf_chk@plt+0xad22>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80,%eax
mov    %ax,0x2(%ebp)
jmp    80542a6 <__sprintf_chk@plt+0xacb6>
xchg   %ax,%ax
mov    $0xffffffff,%edi
jmp    805437c <__sprintf_chk@plt+0xad8c>
lea    0x18(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8053f40 <__sprintf_chk@plt+0xa950>
test   %eax,%eax
jne    80543c0 <__sprintf_chk@plt+0xadd0>
cmpb   $0x2,0x18(%esp)
jne    80543c0 <__sprintf_chk@plt+0xadd0>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8053860 <__sprintf_chk@plt+0xa270>
test   %eax,%eax
js     80543c0 <__sprintf_chk@plt+0xadd0>
mov    %eax,%edx
jmp    80542df <__sprintf_chk@plt+0xacef>
mov    $0xffffffff,%eax
jmp    805433f <__sprintf_chk@plt+0xad4f>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6be2,%ebx
mov    0x24(%esp),%esi
cmp    $0x11,%eax
je     805444d <__sprintf_chk@plt+0xae5d>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8053f40 <__sprintf_chk@plt+0xa950>
test   %eax,%eax
jne    805447f <__sprintf_chk@plt+0xae8f>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,0xc(%esp)
lea    -0x37c0(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
mov    %esi,0xc(%esp)
lea    -0x3774(%ebx),%eax
jmp    8054457 <__sprintf_chk@plt+0xae67>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6b62,%ebx
mov    0x24(%esp),%esi
cmp    $0x11,%eax
je     80544cd <__sprintf_chk@plt+0xaedd>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80541d0 <__sprintf_chk@plt+0xabe0>
test   %eax,%eax
jne    80544ff <__sprintf_chk@plt+0xaf0f>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,0xc(%esp)
lea    -0x373c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
mov    %esi,0xc(%esp)
lea    -0x4074(%ebx),%eax
jmp    80544d7 <__sprintf_chk@plt+0xaee7>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x44,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6ae6,%ebx
mov    0x50(%esp),%esi
lea    0x18(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %eax,(%esp)
mov    %esi,0x4(%esp)
call   8053f40 <__sprintf_chk@plt+0xa950>
test   %eax,%eax
jne    805454a <__sprintf_chk@plt+0xaf5a>
mov    0x20(%esp),%eax
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
lea    -0x36f4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6a7a,%ebx
sub    $0x18,%esp
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x36c0(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6a2a,%ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x368c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x69d3,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x3668(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6983,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x3644(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6933,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x3610(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x68e4,%ebx
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    %edi,(%esp)
call   8049350 <strlen@plt>
mov    %esi,(%esp)
mov    %eax,%ebp
call   8049350 <strlen@plt>
cmp    %eax,%ebp
ja     8054758 <__sprintf_chk@plt+0xb168>
mov    %ebp,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8049120 <memcmp@plt>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8054750 <__sprintf_chk@plt+0xb160>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%ebp
mov    0x30(%esp),%eax
mov    0x34(%esp),%edi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6888,%ebx
mov    %ebp,%esi
and    $0x1f,%ebp
sar    $0x5,%esi
add    $0x8,%eax
test   %esi,%esi
lea    0x8(%edi),%edx
je     80547ab <__sprintf_chk@plt+0xb1bb>
lea    0x0(,%esi,4),%ecx
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
jne    80547e0 <__sprintf_chk@plt+0xb1f0>
xor    %eax,%eax
test   %ebp,%ebp
je     80547d5 <__sprintf_chk@plt+0xb1e5>
mov    $0x20,%ecx
mov    $0xffffffff,%eax
mov    0x8(%edi,%esi,4),%edx
sub    %ebp,%ecx
shl    %cl,%eax
mov    0x30(%esp),%ecx
bswap  %eax
xor    0x8(%ecx,%esi,4),%edx
test   %edx,%eax
setne  %al
movzbl %al,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    $0xffffffff,%eax
jmp    80547d5 <__sprintf_chk@plt+0xb1e5>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6808,%ebx
sub    $0x430,%esp
mov    %gs:0x14,%eax
mov    %eax,0x42c(%esp)
xor    %eax,%eax
lea    -0x3844(%ebx),%esi
mov    %esi,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     8054870 <__sprintf_chk@plt+0xb280>
mov    %esi,(%esp)
call   8049270 <getenv@plt>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049580 <strtol@plt>
test   %eax,%eax
je     80548f7 <__sprintf_chk@plt+0xb307>
mov    0x42c(%esp),%edx
xor    %gs:0x14,%edx
jne    80549af <__sprintf_chk@plt+0xb3bf>
add    $0x430,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x3841(%ebx),%esi
mov    %esi,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     8054930 <__sprintf_chk@plt+0xb340>
mov    %esi,(%esp)
lea    0x2c(%esp),%esi
call   8049270 <getenv@plt>
movl   $0x3ff,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
lea    -0x4f79(%ebx),%eax
mov    %eax,0x8(%esp)
call   80493e0 <snprintf@plt>
lea    -0x4f91(%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80493b0 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     80548f7 <__sprintf_chk@plt+0xb307>
lea    0x28(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x3823(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049340 <fscanf@plt>
cmp    $0x2,%eax
je     8054908 <__sprintf_chk@plt+0xb318>
mov    %esi,(%esp)
call   8049100 <fclose@plt>
mov    $0x64,%eax
jmp    805484d <__sprintf_chk@plt+0xb25d>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xf4240,0x24(%esp)
jne    80548ef <__sprintf_chk@plt+0xb2ff>
mov    0x28(%esp),%edi
mov    %esi,(%esp)
call   8049100 <fclose@plt>
test   %edi,%edi
je     80548f7 <__sprintf_chk@plt+0xb307>
mov    %edi,%eax
jmp    805484d <__sprintf_chk@plt+0xb25d>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x54e0(%ebx),%esi
mov    %esi,(%esp)
call   8049270 <getenv@plt>
test   %eax,%eax
je     8054981 <__sprintf_chk@plt+0xb391>
mov    %esi,(%esp)
lea    0x2c(%esp),%esi
call   8049270 <getenv@plt>
movl   $0x400,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x3ff,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x14(%esp)
lea    -0x3831(%ebx),%eax
mov    %eax,0x10(%esp)
call   8049060 <__snprintf_chk@plt>
jmp    80548b0 <__sprintf_chk@plt+0xb2c0>
movl   $0x6f72702f,0x2c(%esp)
lea    0x2c(%esp),%esi
movl   $0x656e2f63,0x30(%esp)
movl   $0x73702f74,0x34(%esp)
movl   $0x64656863,0x38(%esp)
movb   $0x0,0x3c(%esp)
jmp    80548b0 <__sprintf_chk@plt+0xb2c0>
call   8055a60 <__sprintf_chk@plt+0xc470>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x663a,%ebx
sub    $0x18,%esp
movl   $0x2,(%esp)
call   80491a0 <sysconf@plt>
add    $0x18,%esp
pop    %ebx
ret
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ecx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6610,%ebx
mov    0x68(%esp),%edx
mov    %gs:0x14,%edi
mov    %edi,0x3c(%esp)
xor    %edi,%edi
mov    0x6c(%esp),%eax
cmp    $0x4,%ecx
je     8054ad8 <__sprintf_chk@plt+0xb4e8>
jle    8054a98 <__sprintf_chk@plt+0xb4a8>
cmp    $0xa,%ecx
je     8054a9d <__sprintf_chk@plt+0xb4ad>
cmp    $0xc,%ecx
jne    8054ad0 <__sprintf_chk@plt+0xb4e0>
lea    0x26(%esp),%esi
mov    $0x16,%ebp
test   $0x2,%esi
mov    %esi,%edi
jne    8054b08 <__sprintf_chk@plt+0xb518>
mov    %ebp,%ecx
and    $0xfffffffc,%ecx
mov    %ecx,0x1c(%esp)
xor    %ecx,%ecx
movl   $0x0,(%edi,%ecx,1)
add    $0x4,%ecx
cmp    0x1c(%esp),%ecx
jb     8054a4a <__sprintf_chk@plt+0xb45a>
add    %ecx,%edi
and    $0x2,%ebp
jne    8054af8 <__sprintf_chk@plt+0xb508>
movzwl (%edx),%edx
mov    $0x2,%ecx
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0xc,(%esp)
mov    %dx,0x28(%esp)
mov    0x70(%esp),%edx
mov    %cx,0x26(%esp)
mov    %edx,0xc(%esp)
call   80555d0 <__sprintf_chk@plt+0xbfe0>
jmp    8054ab5 <__sprintf_chk@plt+0xb4c5>
lea    0x0(%esi),%esi
cmp    $0x2,%ecx
jne    8054ad0 <__sprintf_chk@plt+0xb4e0>
mov    0x70(%esp),%edi
mov    %eax,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ecx,(%esp)
mov    %edi,0xc(%esp)
call   8049520 <inet_ntop@plt>
mov    0x3c(%esp),%esi
xor    %gs:0x14,%esi
jne    8054b15 <__sprintf_chk@plt+0xb525>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x3810(%ebx),%eax
jmp    8054ab5 <__sprintf_chk@plt+0xb4c5>
mov    0x70(%esp),%esi
mov    %eax,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x4,(%esp)
mov    %esi,0xc(%esp)
call   80558b0 <__sprintf_chk@plt+0xc2c0>
jmp    8054ab5 <__sprintf_chk@plt+0xb4c5>
xchg   %ax,%ax
xor    %ebp,%ebp
mov    %bp,(%edi)
jmp    8054a65 <__sprintf_chk@plt+0xb475>
lea    0x0(%esi),%esi
lea    0x28(%esp),%edi
mov    $0x14,%bp
jmp    8054a3f <__sprintf_chk@plt+0xb44f>
call   8055a60 <__sprintf_chk@plt+0xc470>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x64d7,%ebx
sub    $0x3c,%esp
mov    0x54(%esp),%ecx
lea    0x23c(%ebx),%eax
mov    (%eax),%esi
test   %esi,%esi
je     8054cb8 <__sprintf_chk@plt+0xb6c8>
test   %ecx,%ecx
jle    8054d58 <__sprintf_chk@plt+0xb768>
cmpl   $0xa,0x50(%esp)
je     8054ced <__sprintf_chk@plt+0xb6fd>
mov    0x58(%esp),%edx
lea    -0x4(%ecx),%eax
mov    0x50(%esp),%esi
mov    %ecx,0x20(%esp)
mov    %ecx,0x2c(%esp)
mov    %edx,0x1c(%esp)
mov    0x1c(%esp),%edx
mov    $0xff00ff01,%edi
mov    (%edx,%eax,1),%ebp
mov    %ebp,%eax
mul    %edi
mov    %edx,%edi
shr    $0x8,%edi
mov    %edi,%eax
shl    $0x8,%eax
add    %eax,%edi
sub    %edi,%ebp
mov    0x37a0(%ebx,%ebp,4),%eax
mov    %ebp,%edi
test   %eax,%eax
mov    %eax,0x24(%esp)
je     8054bf6 <__sprintf_chk@plt+0xb606>
mov    %edi,0x28(%esp)
mov    %eax,%ebp
mov    %ecx,%edi
jmp    8054bb7 <__sprintf_chk@plt+0xb5c7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%ebp
test   %ebp,%ebp
je     8054bf0 <__sprintf_chk@plt+0xb600>
movzbl 0x8(%ebp),%eax
cmp    %esi,%eax
jne    8054bb0 <__sprintf_chk@plt+0xb5c0>
movzbl 0x9(%ebp),%eax
cmp    %eax,%edi
jne    8054bb0 <__sprintf_chk@plt+0xb5c0>
mov    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x10(%ebp),%eax
mov    %eax,(%esp)
call   8049120 <memcmp@plt>
test   %eax,%eax
jne    8054bb0 <__sprintf_chk@plt+0xb5c0>
mov    0x4(%ebp),%eax
jmp    8054ca9 <__sprintf_chk@plt+0xb6b9>
xchg   %ax,%ax
mov    %edi,%ecx
mov    0x28(%esp),%edi
movl   $0x30,(%esp)
mov    %ecx,0x28(%esp)
call   8049290 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8054cad <__sprintf_chk@plt+0xb6bd>
mov    %esi,%eax
mov    0x28(%esp),%ecx
mov    %al,0x8(%ebp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%ebp)
mov    %cl,0x9(%ebp)
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x20,0xc(%esp)
mov    %eax,0x4(%esp)
lea    0x10(%ebp),%eax
mov    %eax,(%esp)
call   80492c0 <__memcpy_chk@plt>
mov    0x24(%esp),%eax
mov    %ebp,0x37a0(%ebx,%edi,4)
mov    %eax,0x0(%ebp)
mov    0x3780(%ebx),%eax
add    $0x1,%eax
cmp    $0x1,%eax
mov    %eax,0x3780(%ebx)
je     8054daf <__sprintf_chk@plt+0xb7bf>
mov    -0x8(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   80490a0 <fflush@plt>
mov    0x20(%esp),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049170 <gethostbyaddr@plt>
test   %eax,%eax
je     8054be6 <__sprintf_chk@plt+0xb5f6>
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049400 <__strdup@plt>
mov    %eax,0x4(%ebp)
test   %eax,%eax
jne    8054ce0 <__sprintf_chk@plt+0xb6f0>
mov    0x2c(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
mov    0x60(%esp),%eax
mov    %ecx,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   80549e0 <__sprintf_chk@plt+0xb3f0>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x10,%ecx
mov    0x58(%esp),%eax
mov    (%eax),%edx
test   %edx,%edx
jne    8054d38 <__sprintf_chk@plt+0xb748>
mov    0x58(%esp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
jne    8054d38 <__sprintf_chk@plt+0xb748>
mov    0x58(%esp),%eax
cmpl   $0xffff0000,0x8(%eax)
jne    8054d38 <__sprintf_chk@plt+0xb748>
mov    0x58(%esp),%eax
mov    $0x2,%esi
mov    %ecx,0x2c(%esp)
mov    $0x4,%ecx
movl   $0x4,0x20(%esp)
add    $0xc,%eax
mov    %eax,0x1c(%esp)
xor    %eax,%eax
jmp    8054b70 <__sprintf_chk@plt+0xb580>
nop
mov    0x58(%esp),%edx
lea    -0x4(%ecx),%eax
mov    $0xa,%esi
mov    %ecx,0x20(%esp)
mov    %ecx,0x2c(%esp)
mov    %edx,0x1c(%esp)
jmp    8054b70 <__sprintf_chk@plt+0xb580>
lea    0x0(%esi),%esi
cmpl   $0x4,0x50(%esp)
je     8054dc0 <__sprintf_chk@plt+0xb7d0>
jle    8054d9a <__sprintf_chk@plt+0xb7aa>
cmpl   $0xa,0x50(%esp)
je     8054ce8 <__sprintf_chk@plt+0xb6f8>
cmpl   $0xc,0x50(%esp)
jne    8054cb8 <__sprintf_chk@plt+0xb6c8>
mov    $0xfffffffe,%eax
mov    $0x2,%ecx
movl   $0x2,0x20(%esp)
mov    0x58(%esp),%edx
mov    %ecx,0x2c(%esp)
mov    0x50(%esp),%esi
mov    %edx,0x1c(%esp)
jmp    8054b70 <__sprintf_chk@plt+0xb580>
cmpl   $0x2,0x50(%esp)
jne    8054cb8 <__sprintf_chk@plt+0xb6c8>
mov    $0x4,%ecx
jmp    8054b59 <__sprintf_chk@plt+0xb569>
movl   $0x1,(%esp)
call   8049240 <sethostent@plt>
jmp    8054c6c <__sprintf_chk@plt+0xb67c>
mov    $0x6,%eax
mov    $0xa,%ecx
movl   $0xa,0x20(%esp)
jmp    8054d85 <__sprintf_chk@plt+0xb795>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6210,%ebx
mov    0x4c(%esp),%ebp
test   %eax,%eax
jle    8054e72 <__sprintf_chk@plt+0xb882>
cmp    $0x2,%ebp
jle    8054e72 <__sprintf_chk@plt+0xb882>
mov    0x44(%esp),%eax
xor    %esi,%esi
mov    0x48(%esp),%edi
sub    $0x1,%eax
mov    %eax,0x18(%esp)
lea    -0x380c(%ebx),%eax
mov    %eax,0x1c(%esp)
jmp    8054e38 <__sprintf_chk@plt+0xb848>
movb   $0x3a,0x2(%edi)
sub    $0x3,%ebp
add    $0x3,%edi
add    $0x1,%esi
cmp    0x44(%esp),%esi
je     8054e72 <__sprintf_chk@plt+0xb882>
cmp    $0x2,%ebp
jle    8054e72 <__sprintf_chk@plt+0xb882>
mov    0x40(%esp),%eax
movzbl (%eax,%esi,1),%eax
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x10(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
call   80495f0 <__sprintf_chk@plt>
lea    -0x2(%ebp),%eax
cmp    0x18(%esp),%esi
je     8054e7e <__sprintf_chk@plt+0xb88e>
cmp    $0x1,%eax
jne    8054e20 <__sprintf_chk@plt+0xb830>
mov    0x48(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x2,%edi
mov    %eax,%ebp
jmp    8054e2a <__sprintf_chk@plt+0xb83a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6165,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edx
movzbl (%edx),%eax
xor    %esi,%esi
cmp    $0x3a,%al
je     8054f04 <__sprintf_chk@plt+0xb914>
test   %al,%al
je     8054f04 <__sprintf_chk@plt+0xb914>
mov    0x38(%esp),%ebp
jmp    8054ed9 <__sprintf_chk@plt+0xb8e9>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x57(%eax),%ecx
add    $0x1,%edx
movzbl (%edx),%eax
movsbl %cl,%ecx
shl    $0x4,%esi
add    %ecx,%esi
cmp    $0x3a,%al
je     8054ef8 <__sprintf_chk@plt+0xb908>
test   %al,%al
je     8054ef8 <__sprintf_chk@plt+0xb908>
lea    -0x30(%eax),%ecx
cmp    $0x9,%cl
jbe    8054ec3 <__sprintf_chk@plt+0xb8d3>
lea    -0x61(%eax),%ecx
cmp    $0x5,%cl
jbe    8054ec0 <__sprintf_chk@plt+0xb8d0>
lea    -0x41(%eax),%ecx
cmp    $0x5,%cl
ja     8054f20 <__sprintf_chk@plt+0xb930>
lea    -0x37(%eax),%ecx
jmp    8054ec3 <__sprintf_chk@plt+0xb8d3>
xchg   %ax,%ax
cmp    $0xff,%esi
mov    %ebp,0x38(%esp)
ja     8054f20 <__sprintf_chk@plt+0xb930>
cmp    0x38(%esp),%edi
jge    8054f17 <__sprintf_chk@plt+0xb927>
mov    0x34(%esp),%ebp
mov    %esi,%ecx
mov    %cl,0x0(%ebp,%edi,1)
add    $0x1,%edi
test   %al,%al
je     8054f2c <__sprintf_chk@plt+0xb93c>
add    $0x1,%edx
jmp    8054ea8 <__sprintf_chk@plt+0xb8b8>
xor    %esi,%esi
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x38(%esp),%ebp
mov    0x34(%esp),%esi
cmp    %edi,%ebp
jle    8054f22 <__sprintf_chk@plt+0xb932>
sub    %edi,%ebp
add    %esi,%edi
mov    %ebp,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   80493d0 <memset@plt>
jmp    8054f22 <__sprintf_chk@plt+0xb932>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6099,%ebx
sub    $0x34,%esp
lea    0x28(%esp),%esi
mov    %esi,(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
call   8049130 <gettimeofday@plt>
mov    %esi,(%esp)
call   8049310 <localtime@plt>
mov    %eax,(%esp)
call   80491c0 <asctime@plt>
mov    %eax,(%esp)
mov    %eax,%esi
call   8049350 <strlen@plt>
movb   $0x0,-0x1(%esi,%eax,1)
mov    0x2c(%esp),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
lea    -0x3807(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049540 <__fprintf_chk@plt>
add    $0x34,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x68(%esp),%eax
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x6000,%ebx
mov    0x60(%esp),%esi
movl   $0xa,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x64(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80491e0 <__getdelim@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     8055168 <__sprintf_chk@plt+0xbb78>
lea    0x4044(%ebx),%eax
mov    (%esi),%edi
addl   $0x1,(%eax)
movl   $0x23,0x4(%esp)
mov    %edi,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     8055056 <__sprintf_chk@plt+0xba66>
movb   $0x0,(%eax)
mov    (%esi),%edi
lea    -0x37c5(%ebx),%eax
mov    %eax,0x28(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x2c(%esp)
jmp    80550e3 <__sprintf_chk@plt+0xbaf3>
lea    0x0(%esi),%esi
movb   $0x0,(%eax)
mov    0x38(%esp),%ecx
mov    (%esi),%ebp
mov    %ecx,0x24(%esp)
mov    %ebp,(%esp)
call   8049350 <strlen@plt>
mov    0x24(%esp),%ecx
mov    %ecx,(%esp)
mov    %eax,0x20(%esp)
call   8049350 <strlen@plt>
mov    0x20(%esp),%edx
mov    0x64(%esp),%ecx
lea    0x1(%edx,%eax,1),%eax
mov    %eax,(%ecx)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049280 <realloc@plt>
test   %eax,%eax
mov    %eax,(%esi)
je     80551b0 <__sprintf_chk@plt+0xbbc0>
mov    0x1c(%esp),%edx
mov    %eax,(%esp)
lea    -0x2(%edx,%edi,1),%edi
mov    0x38(%esp),%edx
mov    %edi,0x1c(%esp)
mov    %edx,0x4(%esp)
call   8049230 <strcat@plt>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <free@plt>
mov    (%esi),%edi
mov    0x28(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049070 <strstr@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8055168 <__sprintf_chk@plt+0xbb78>
mov    0x68(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   80491e0 <__getdelim@plt>
test   %eax,%eax
mov    %eax,%edi
js     8055178 <__sprintf_chk@plt+0xbb88>
lea    0x4044(%ebx),%eax
addl   $0x1,(%eax)
movb   $0x0,0x0(%ebp)
mov    0x38(%esp),%ebp
movl   $0x23,0x4(%esp)
mov    %ebp,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
jne    8055070 <__sprintf_chk@plt+0xba80>
mov    %ebp,%ecx
jmp    8055077 <__sprintf_chk@plt+0xba87>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x37ef(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
add    $0x4c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x37d4(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
mov    0x64(%esp),%eax
movl   $0x0,(%eax)
add    $0x4c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8055200 <__sprintf_chk@plt+0xbc10>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5df7,%ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    0x44(%esp),%esi
mov    %eax,(%esp)
lea    -0x35b8(%ebx),%edi
mov    %edi,0x4(%esp)
call   80494a0 <strtok@plt>
test   %eax,%eax
je     8055281 <__sprintf_chk@plt+0xbc91>
mov    0x48(%esp),%ecx
lea    -0x1(%ecx),%edx
test   %edx,%edx
mov    %edx,0x1c(%esp)
jle    8055287 <__sprintf_chk@plt+0xbc97>
xor    %ebp,%ebp
jmp    805524e <__sprintf_chk@plt+0xbc5e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0x1c(%esp),%ebp
je     8055287 <__sprintf_chk@plt+0xbc97>
add    $0x1,%ebp
mov    %eax,-0x4(%esi,%ebp,4)
mov    %edi,0x4(%esp)
movl   $0x0,(%esp)
call   80494a0 <strtok@plt>
test   %eax,%eax
jne    8055248 <__sprintf_chk@plt+0xbc58>
lea    0x0(,%ebp,4),%eax
movl   $0x0,(%esi,%eax,1)
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
xor    %ebp,%ebp
jmp    8055270 <__sprintf_chk@plt+0xbc80>
mov    -0x10(%ebx),%eax
mov    (%eax),%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x35d8(%ebx),%eax
mov    %eax,(%esp)
call   8049210 <fwrite@plt>
movl   $0x1,(%esp)
call   80492e0 <exit@plt>
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5d36,%ebx
mov    0x20(%esp),%esi
movl   $0x3a,0x4(%esp)
mov    %esi,(%esp)
call   8049330 <strchr@plt>
test   %eax,%eax
je     8055308 <__sprintf_chk@plt+0xbd18>
mov    0x28(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
mov    %eax,0x8(%esp)
call   80490c0 <inet_pton@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x24(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x2,(%esp)
mov    %eax,0x8(%esp)
call   80490c0 <inet_pton@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
movzwl 0x30(%esp),%edx
ror    $0x8,%dx
movzwl %dx,%edx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5cbb,%ebx
cmp    $0x60,%edx
je     80553b3 <__sprintf_chk@plt+0xbdc3>
mov    $0x1,%eax
jmp    8055360 <__sprintf_chk@plt+0xbd70>
nop
add    $0x1,%eax
cmp    $0x31,%eax
je     8055378 <__sprintf_chk@plt+0xbd88>
cmp    %edx,-0x280(%ebx,%eax,8)
jne    8055358 <__sprintf_chk@plt+0xbd68>
mov    -0x27c(%ebx,%eax,8),%eax
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    -0x35a8(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %edx,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8049060 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    8055369 <__sprintf_chk@plt+0xbd79>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x1c,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5c32,%ebx
mov    0x30(%esp),%ebp
mov    0x34(%esp),%edi
jmp    80553e8 <__sprintf_chk@plt+0xbdf8>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x31,%esi
je     8055418 <__sprintf_chk@plt+0xbe28>
mov    -0x27c(%ebx,%esi,8),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049380 <strcasecmp@plt>
test   %eax,%eax
jne    80553e0 <__sprintf_chk@plt+0xbdf0>
mov    -0x280(%ebx,%esi,8),%edx
ror    $0x8,%dx
mov    %dx,0x0(%ebp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   8053c90 <__sprintf_chk@plt+0xa6a0>
test   %eax,%eax
jne    8055444 <__sprintf_chk@plt+0xbe54>
movzwl 0x0(%ebp),%edx
ror    $0x8,%dx
mov    %dx,0x0(%ebp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    805540e <__sprintf_chk@plt+0xbe1e>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5ba7,%ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
cmp    0x1b4(%ebx),%esi
lea    0x3bb4(%ebx),%edi
je     80554bd <__sprintf_chk@plt+0xbecd>
mov    %esi,(%esp)
call   8049150 <getprotobynumber@plt>
test   %eax,%eax
mov    %eax,%ebp
je     80554c8 <__sprintf_chk@plt+0xbed8>
movl   $0x10,0x8(%esp)
mov    (%eax),%eax
mov    %edi,(%esp)
mov    %esi,0x1b4(%ebx)
mov    %eax,0x4(%esp)
call   8049440 <strncpy@plt>
mov    0x48(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x0(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8049440 <strncpy@plt>
mov    0x44(%esp),%edi
add    $0x2c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    -0x34ad(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x48(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8049060 <__snprintf_chk@plt>
mov    0x44(%esp),%edi
add    $0x2c,%esp
pop    %ebx
pop    %esi
mov    %edi,%eax
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5ae8,%ebx
sub    $0x20,%esp
mov    0x30(%esp),%esi
mov    0x1b0(%ebx),%edi
test   %edi,%edi
js     8055547 <__sprintf_chk@plt+0xbf57>
lea    0x3ba4(%ebx),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049080 <strcmp@plt>
mov    %edi,%edx
test   %eax,%eax
je     8055587 <__sprintf_chk@plt+0xbf97>
movzbl (%esi),%eax
sub    $0x30,%eax
cmp    $0x9,%al
jbe    8055590 <__sprintf_chk@plt+0xbfa0>
mov    %esi,(%esp)
call   8049090 <getprotobyname@plt>
test   %eax,%eax
mov    %eax,%esi
je     80555c0 <__sprintf_chk@plt+0xbfd0>
mov    0x8(%eax),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x1b0(%ebx)
mov    (%esi),%eax
mov    %eax,0x4(%esp)
lea    0x3ba4(%ebx),%eax
mov    %eax,(%esp)
call   8049440 <strncpy@plt>
mov    0x8(%esi),%edx
add    $0x20,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x1f(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0xa,0x8(%esp)
mov    %eax,(%esp)
call   8053d00 <__sprintf_chk@plt+0xa710>
movzbl 0x1f(%esp),%ecx
mov    $0xffffffff,%edx
test   %eax,%eax
cmove  %ecx,%edx
add    $0x20,%esp
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
ret
mov    $0xffffffff,%edx
jmp    8055587 <__sprintf_chk@plt+0xbf97>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5a24,%ebx
mov    0x24(%esp),%esi
cmpl   $0xc,0x20(%esp)
jne    8055730 <__sprintf_chk@plt+0xc140>
call   8049430 <__errno_location@plt>
movl   $0x0,(%eax)
movzwl 0x2(%esi),%edx
xor    %eax,%eax
cmpw   $0x2,(%esi)
movzbl %dh,%ecx
jne    8055700 <__sprintf_chk@plt+0xc110>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8055720 <__sprintf_chk@plt+0xc130>
mov    %ecx,%eax
movzbl %dl,%edx
shl    $0x8,%eax
or     %edx,%eax
mov    %eax,%edx
shr    $0xa,%dx
movzwl %dx,%ecx
imul   $0xcccd,%ecx,%ecx
shr    $0x13,%ecx
test   %cx,%cx
mov    %ecx,%ebp
jne    8055708 <__sprintf_chk@plt+0xc118>
mov    0x28(%esp),%esi
mov    $0x1,%ecx
xor    %edi,%edi
add    $0x30,%edx
cmp    %ecx,0x2c(%esp)
mov    %dl,(%esi)
je     8055720 <__sprintf_chk@plt+0xc130>
mov    0x28(%esp),%esi
lea    0x2(%edi),%edx
cmp    %edx,0x2c(%esp)
movb   $0x2e,(%esi,%ecx,1)
je     8055720 <__sprintf_chk@plt+0xc130>
and    $0x3ff,%ax
mov    %edx,%ecx
add    %esi,%ecx
cmp    $0x3e7,%ax
mov    %eax,%ebp
ja     8055768 <__sprintf_chk@plt+0xc178>
mov    %eax,%esi
shr    $0x2,%si
movzwl %si,%esi
imul   $0x147b,%esi,%esi
shr    $0x11,%esi
test   %si,%si
je     8055784 <__sprintf_chk@plt+0xc194>
add    $0x1,%edx
cmp    %edx,0x2c(%esp)
lea    0x30(%esi),%edi
mov    %edi,%eax
mov    %al,(%ecx)
je     8055720 <__sprintf_chk@plt+0xc130>
lea    (%esi,%esi,4),%esi
mov    0x28(%esp),%edi
lea    (%esi,%esi,4),%esi
shl    $0x2,%esi
sub    %esi,%ebp
movzwl %bp,%esi
add    %edx,%edi
imul   $0xcccd,%esi,%esi
shr    $0x13,%esi
add    $0x1,%edx
cmp    %edx,0x2c(%esp)
lea    0x30(%esi),%ecx
mov    %cl,(%edi)
je     8055720 <__sprintf_chk@plt+0xc130>
lea    (%esi,%esi,4),%esi
lea    (%esi,%esi,1),%ecx
sub    %ecx,%ebp
mov    0x28(%esp),%ecx
add    %edx,%ecx
lea    0x30(%ebp),%eax
mov    %al,(%ecx)
lea    0x1(%edx),%eax
cmp    %eax,0x2c(%esp)
je     8055720 <__sprintf_chk@plt+0xc130>
mov    0x28(%esp),%eax
movb   $0x0,0x1(%eax,%edx,1)
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x28(%esp),%edi
lea    0x30(%ecx),%esi
cmpl   $0x1,0x2c(%esp)
mov    %esi,%ecx
mov    %cl,(%edi)
jne    8055748 <__sprintf_chk@plt+0xc158>
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   8049430 <__errno_location@plt>
movl   $0x61,(%eax)
add    $0xc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%ebp,%ebp,4),%ecx
add    %ecx,%ecx
sub    %ecx,%edx
mov    $0x2,%ecx
lea    0x1(%edi),%esi
mov    $0x1,%edi
jmp    805564d <__sprintf_chk@plt+0xc05d>
lea    0x0(%esi),%esi
lea    0x3(%edi),%edx
cmp    %edx,0x2c(%esp)
movb   $0x31,(%ecx)
je     8055720 <__sprintf_chk@plt+0xc130>
mov    %edx,%ecx
sub    $0x3e8,%bp
add    %esi,%ecx
xor    %esi,%esi
jmp    80556a0 <__sprintf_chk@plt+0xc0b0>
movzwl %ax,%esi
mov    %ecx,%edi
imul   $0xcccd,%esi,%esi
shr    $0x13,%esi
test   %si,%si
jne    80556cd <__sprintf_chk@plt+0xc0dd>
jmp    80556e9 <__sprintf_chk@plt+0xc0f9>
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%esi
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5854,%ebx
cmpl   $0xc,0x10(%esp)
jne    8055886 <__sprintf_chk@plt+0xc296>
call   8049430 <__errno_location@plt>
movl   $0x0,(%eax)
movsbl (%esi),%eax
test   %eax,%eax
je     805589b <__sprintf_chk@plt+0xc2ab>
sub    $0x30,%eax
cmp    $0x9,%eax
ja     805589b <__sprintf_chk@plt+0xc2ab>
xor    %edx,%edx
xor    %ecx,%ecx
jmp    80557f0 <__sprintf_chk@plt+0xc200>
lea    0x0(%esi),%esi
sub    $0x30,%eax
cmp    $0x9,%eax
ja     8055801 <__sprintf_chk@plt+0xc211>
add    $0x1,%ecx
lea    (%edx,%edx,4),%edx
lea    (%eax,%edx,2),%edx
movsbl (%esi,%ecx,1),%eax
test   %eax,%eax
jne    80557e8 <__sprintf_chk@plt+0xc1f8>
xor    %eax,%eax
cmp    $0x3f,%dx
ja     805580f <__sprintf_chk@plt+0xc21f>
cmpb   $0x2e,(%esi,%ecx,1)
je     8055818 <__sprintf_chk@plt+0xc228>
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%esi,%ecx,1),%edi
movsbl (%edi),%esi
test   %esi,%esi
je     805580f <__sprintf_chk@plt+0xc21f>
sub    $0x30,%esi
cmp    $0x9,%esi
ja     805580f <__sprintf_chk@plt+0xc21f>
xor    %ecx,%ecx
xor    %eax,%eax
jmp    8055840 <__sprintf_chk@plt+0xc250>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x30,%esi
cmp    $0x9,%esi
ja     8055851 <__sprintf_chk@plt+0xc261>
add    $0x1,%eax
lea    (%ecx,%ecx,4),%ecx
lea    (%esi,%ecx,2),%ecx
movsbl (%edi,%eax,1),%esi
test   %esi,%esi
jne    8055838 <__sprintf_chk@plt+0xc248>
xor    %eax,%eax
cmp    $0x3ff,%cx
ja     805580f <__sprintf_chk@plt+0xc21f>
mov    0x18(%esp),%eax
shl    $0xa,%edx
mov    $0x2,%esi
or     %ecx,%edx
mov    %si,(%eax)
mov    %edx,%eax
movzbl %dl,%edx
and    $0xff00,%eax
or     %eax,%edx
mov    0x18(%esp),%eax
mov    %dx,0x2(%eax)
mov    $0x1,%eax
jmp    805580f <__sprintf_chk@plt+0xc21f>
call   8049430 <__errno_location@plt>
movl   $0x61,(%eax)
mov    $0xffffffff,%eax
jmp    805580f <__sprintf_chk@plt+0xc21f>
xor    %eax,%eax
jmp    805580f <__sprintf_chk@plt+0xc21f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5744,%ebx
mov    0x34(%esp),%edi
cmpl   $0x4,0x30(%esp)
mov    0x3c(%esp),%esi
jne    80559c8 <__sprintf_chk@plt+0xc3d8>
call   8049430 <__errno_location@plt>
test   %esi,%esi
movl   $0x0,(%eax)
je     80559a8 <__sprintf_chk@plt+0xc3b8>
mov    (%edi),%eax
xor    %ecx,%ecx
mov    0x38(%esp),%ebp
bswap  %eax
shr    $0x1c,%eax
jmp    8055927 <__sprintf_chk@plt+0xc337>
nop
lea    0x1(%ecx),%edx
add    $0x37,%eax
cmp    $0x8,%edx
mov    %al,0x0(%ebp)
je     805593d <__sprintf_chk@plt+0xc34d>
mov    (%edi),%eax
mov    %edx,%ecx
mov    0x38(%esp),%ebp
neg    %ecx
lea    0x1c(,%ecx,4),%ecx
bswap  %eax
shr    %cl,%eax
add    %edx,%ebp
cmp    %esi,%edx
je     80559a8 <__sprintf_chk@plt+0xc3b8>
mov    %edx,%ecx
and    $0xf,%eax
cmp    $0x9,%eax
ja     80558f8 <__sprintf_chk@plt+0xc308>
lea    0x1(%ecx),%edx
add    $0x30,%eax
cmp    $0x8,%edx
mov    %al,0x0(%ebp)
jne    8055906 <__sprintf_chk@plt+0xc316>
cmp    $0x8,%esi
je     80559a8 <__sprintf_chk@plt+0xc3b8>
mov    0x38(%esp),%eax
mov    0x38(%esp),%edx
movb   $0x2e,0x8(%eax)
lea    0x2(%ecx),%eax
add    %ecx,%edx
add    $0xe,%ecx
mov    %ecx,0xc(%esp)
movzbl 0x4(%edi),%ecx
shr    $0x4,%ecx
cmp    %eax,%esi
je     80559a8 <__sprintf_chk@plt+0xc3b8>
cmp    $0x9,%ecx
jbe    80559b8 <__sprintf_chk@plt+0xc3c8>
add    $0x37,%ecx
mov    %cl,0x2(%edx)
lea    0x1(%eax),%ecx
movzbl 0x4(%edi),%ebp
cmp    %ecx,%esi
je     80559a8 <__sprintf_chk@plt+0xc3b8>
mov    %ebp,%ecx
and    $0xf,%ecx
cmp    $0x9,%cl
jbe    80559c0 <__sprintf_chk@plt+0xc3d0>
add    $0x37,%ecx
mov    %cl,0x3(%edx)
add    $0x2,%eax
add    $0x1,%edi
add    $0x2,%edx
cmp    0xc(%esp),%eax
jne    805595a <__sprintf_chk@plt+0xc36a>
cmp    %eax,%esi
je     80559a8 <__sprintf_chk@plt+0xc3b8>
mov    0x38(%esp),%esi
movb   $0x0,(%esi,%eax,1)
xchg   %ax,%ax
mov    0x38(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x30,%ecx
mov    %cl,0x2(%edx)
jmp    8055970 <__sprintf_chk@plt+0xc380>
add    $0x30,%ecx
mov    %cl,0x3(%edx)
jmp    805598b <__sprintf_chk@plt+0xc39b>
call   8049430 <__errno_location@plt>
movl   $0x61,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5615,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0x2a4(%ebx),%esi
call   8049010 <setsockopt@plt-0x40>
lea    -0x2a8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8055a39 <__sprintf_chk@plt+0xc449>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x2a8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8055a18 <__sprintf_chk@plt+0xc428>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8055a50 <__sprintf_chk@plt+0xc460>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x559a,%ebx
sub    $0x8,%esp
call   8049190 <__stack_chk_fail@plt>
push   %ebx
sub    $0x8,%esp
call   804a5d0 <__sprintf_chk@plt+0xfe0>
add    $0x5583,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
and    $0x5d205e5b,%eax
and    %ah,0x5d0a5e5b
or     (%eax),%al
jae    8055b26 <_IO_stdin_used+0x82>
arpl   %bp,0x65(%ebx)
je     8055b2f <_IO_stdin_used+0x8b>
cmp    (%eax),%al
push   %ebp
inc    %esp
push   %eax
cmp    (%eax),%al
push   %ebp
inc    %esp
push   %eax
cmp    %ss:(%eax),%al
push   %edx
inc    %ecx
push   %edi
cmp    (%eax),%al
push   %edx
inc    %ecx
push   %edi
cmp    %ss:(%eax),%al
push   %esp
inc    %ebx
push   %eax
cmp    %ss:(%eax),%al
inc    %esi
push   %edx
inc    %ecx
inc    %edi
cmp    (%eax),%al
inc    %esi
push   %edx
inc    %ecx
inc    %edi
cmp    %ss:(%eax),%al
push   %esp
inc    %ebx
push   %eax
cmp    (%eax),%al
and    $0x6425732a,%eax
and    $0x6425732a,%eax
and    $0x6425732a,%eax
and    $0x6425732a,%eax
and    $0x6425732a,%eax
add    %ch,(%esi)
add    %ah,0x6e696d64
add    %ah,0x732564
and    $0x6d643330,%eax
jae    8055b1a <_IO_stdin_used+0x76>
das
jo     8055b8f <_IO_stdin_used+0xeb>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
push   %edx
dec    %edi
dec    %edi
push   %esp
add    %ah,0x73252f73
add    %ch,(%edi)
jo     8055ba5 <_IO_stdin_used+0x101>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
add    %ah,0x632564
and    $0x64662f64,%eax
das
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8055b84 <_IO_stdin_used+0xe0>
pop    %ebx
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8055b8d <_IO_stdin_used+0xe9>
pop    %ebx
and    $0x25005d75,%eax
jae    8055b8a <_IO_stdin_used+0xe6>
and    $0x74732f64,%eax
popa
je     8055b63 <_IO_stdin_used+0xbf>
and    $0x2820642a,%eax
and    $0x5d295e5b,%eax
sub    %eax,(%eax)
sub    $0x62,%al
insb   (%dx),%es:(%edi)
and    $0x52500075,%eax
dec    %edi
inc    %ebx
pop    %edi
dec    %ecx
push   %eax
pop    %edi
dec    %esp
dec    %edi
inc    %ebx
inc    %ecx
dec    %esp
pop    %edi
push   %eax
dec    %edi
push   %edx
push   %esp
pop    %edi
push   %edx
inc    %ecx
dec    %esi
inc    %edi
inc    %ebp
add    %ah,0x64252064
add    %ah,0x253a732a
sub    $0x20732a,%eax
arpl   %bp,0x73(%edi,%ebp,2)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8055c0e <_IO_stdin_used+0x16a>
add    %dh,%fs:0x79(%ebx)
outsb  %ds:(%esi),(%dx)
sub    $0x766372,%eax
gs
jae    8055c2a <_IO_stdin_used+0x186>
popa
bound  %ebp,0x73(%ecx,%ebp,2)
push   $0x61006465
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x79(%ebx)
outsb  %ds:(%esi),(%dx)
arpl   %bp,0x72(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x69620064,0x65(%edx),%edi
add    %ah,(%di)
jne    8055bf7 <_IO_stdin_used+0x153>
and    $0x2520642a,%eax
jae    8055bfe <_IO_stdin_used+0x15a>
and    $0x73252075,%eax
add    %dh,(%eax)
xor    %esi,(%edx)
xor    0x39383736(,%esi,1),%esi
popa
bound  %esp,0x64(%ebx)
gs
data16
add    %ah,0x642564
push   %ebp
dec    %esi
inc    %ebx
dec    %edi
dec    %esi
dec    %esi
add    %ah,0x2064362d
and    $0x2064362d,%eax
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ah,0x3a732a
data16
ja     8055c19 <_IO_stdin_used+0x175>
je     8055c7e <_IO_stdin_used+0x1da>
jo     8055c81 <_IO_stdin_used+0x1dd>
imul   $0x642a2500,0x67(%ecx),%esp
cmp    (%eax),%al
sub    (%eax),%al
imul   $0x6e,0x72(%ebp),%esp
gs
insb   (%dx),%es:(%edi)
add    %ch,(%edi)
and    $0x2d250064,%eax
sub    0x0(%eax,%eiz,1),%ah
and    $0x253a642a,%eax
sub    $0x2500642a,%eax
sub    0x2a(%ebx),%dh
and    $0x732a2d,%eax
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
cmp    (%eax),%ch
jb     8055c78 <_IO_stdin_used+0x1d4>
jne    8055c81 <_IO_stdin_used+0x1dd>
ja     8055c7c <_IO_stdin_used+0x1d8>
jne    8055c85 <_IO_stdin_used+0x1e1>
and    $0x2c75,%ax
je     8055c84 <_IO_stdin_used+0x1e0>
jne    8055c8a <_IO_stdin_used+0x1e6>
add    %ah,(%eax)
je     8055cd8 <_IO_stdin_used+0x234>
add    %ah,(%eax)
jae    8055cca <_IO_stdin_used+0x226>
arpl   %bp,0x0(%ebx)
and    %ah,0x63(%ebp)
outsb  %ds:(%esi),(%dx)
add    %ah,(%eax)
arpl   %bp,%gs:0x73(%esi)
gs outsb %gs:(%esi),(%dx)
add    %ah,(%eax)
popaw
jae    8055cf3 <_IO_stdin_used+0x24f>
outsl  %ds:(%esi),(%dx)
jo     8055ce7 <_IO_stdin_used+0x243>
outsb  %ds:(%esi),(%dx)
add    %ah,(%eax)
ja     8055cfa <_IO_stdin_used+0x256>
arpl   %sp,0x6c(%ecx)
cmp    %gs:0x64252c64,%ah
add    %ah,(%eax)
jb     8055d09 <_IO_stdin_used+0x265>
outsl  %ds:(%esi),(%dx)
cmp    0x72200067,%ah
je     8055d12 <_IO_stdin_used+0x26e>
cmp    0x67252f67,%ah
add    %ah,(%eax)
popa
je     8055d18 <_IO_stdin_used+0x274>
cmp    0x6d200067,%ah
jae    8055d24 <_IO_stdin_used+0x280>
cmp    0x63200064,%ah
ja     8055d27 <_IO_stdin_used+0x283>
cmp    %fs:0x73200064,%ah
jae    8055d36 <_IO_stdin_used+0x292>
push   $0x68736572
cmp    0x2e250064,%ah
xor    %esp,0x4d(%esi)
add    %ah,0x4b66312e
add    %ah,(%eax)
jae    8055d3f <_IO_stdin_used+0x29b>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x73706273
add    %ah,(%eax)
jne    8055d54 <_IO_stdin_used+0x2b0>
popa
arpl   %bp,0x65(%ebx)
cmp    %fs:0x72200075,%ah
gs
je     8055d66 <_IO_stdin_used+0x2c2>
popa
outsb  %ds:(%esi),(%dx)
jae    8055d32 <_IO_stdin_used+0x28e>
and    $0x75252f75,%eax
add    %ah,(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8055d77 <_IO_stdin_used+0x2d3>
cmp    0x73200075,%ah
popa
arpl   %bp,0x65(%ebx)
cmp    %fs:0x66200075,%ah
popa
arpl   %bp,0x65(%ebx)
je     8055d8d <_IO_stdin_used+0x2e9>
cmp    0x72200075,%ah
outsl  %gs:(%esi),(%dx)
jb     8055d88 <_IO_stdin_used+0x2e4>
gs
jb     8055d90 <_IO_stdin_used+0x2ec>
outsb  %ds:(%esi),(%dx)
cmp    (%di),%ah
add    %ah,%fs:(%eax)
jb     8055d93 <_IO_stdin_used+0x2ef>
jbe    8055d91 <_IO_stdin_used+0x2ed>
jb     8055da8 <_IO_stdin_used+0x304>
je     8055d70 <_IO_stdin_used+0x2cc>
and    $0x72200067,%eax
arpl   %si,0x5f(%esi)
jae    8055db0 <_IO_stdin_used+0x30c>
popa
arpl   %sp,0x3a(%ebp)
and    $0x656e0064,%eax
je     8055d7a <_IO_stdin_used+0x2d6>
jae    8055dbb <_IO_stdin_used+0x317>
insl   (%dx),%es:(%edi)
jo     8055d50 <_IO_stdin_used+0x2ac>
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebx
dec    %esi
dec    %ebp
push   %eax
add    %dl,0x70(%ebx,%eiz,2)
cmp    (%eax),%al
inc    %ebx
jne    8055dd8 <_IO_stdin_used+0x334>
jb     8055dad <_IO_stdin_used+0x309>
jae    8055dde <_IO_stdin_used+0x33a>
popa
bound  %eax,(%eax)
outsb  %ds:(%esi),(%dx)
gs
je     8055da0 <_IO_stdin_used+0x2fc>
jae    8055de2 <_IO_stdin_used+0x33e>
arpl   %bp,0x73(%ebx)
je     8055dd9 <_IO_stdin_used+0x335>
je     8055d7a <_IO_stdin_used+0x2d6>
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebx
dec    %edi
inc    %ebx
dec    %ebx
push   %ebx
push   %esp
inc    %ecx
push   %esp
add    %ch,0x65(%esi)
je     8055dbf <_IO_stdin_used+0x31b>
jae    8055e01 <_IO_stdin_used+0x35d>
arpl   %bp,0x73(%ebx)
je     8055df8 <_IO_stdin_used+0x354>
je     8055dcf <_IO_stdin_used+0x32b>
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebx
dec    %edi
inc    %ebx
dec    %ebx
push   %ebx
push   %esp
inc    %ecx
push   %esp
add    %dh,%ss:0x73(%ebx)
cmp    (%eax),%ah
addr16
gs
je     8055e14 <_IO_stdin_used+0x370>
jae    8055e25 <_IO_stdin_used+0x381>
insl   (%dx),%es:(%edi)
jo     8055e2d <_IO_stdin_used+0x389>
je     8055e1d <_IO_stdin_used+0x379>
je     8055dbe <_IO_stdin_used+0x31a>
push   %esp
outsl  %ds:(%esi),(%dx)
je     8055e23 <_IO_stdin_used+0x37f>
insb   (%dx),%es:(%edi)
cmp    (%eax),%ah
and    $0x6b282064,%eax
gs
jb     8055e3b <_IO_stdin_used+0x397>
gs
insb   (%dx),%es:(%edi)
and    %ah,0xa2964
sub    $0x20092a00,%eax
and    %ah,0x2064392d
and    $0x2073392d,%eax
and    $0xa73392d,%eax
add    %dl,0x41(%edx)
push   %edi
or     %esp,(%eax)
and    %ah,0x2064392d
and    $0x2064392d,%eax
and    $0xa64392d,%eax
add    %dl,0x44(%ebp)
push   %eax
or     %esp,(%eax)
and    %ah,0x2064392d
and    $0x2064392d,%eax
and    $0xa64392d,%eax
add    %dl,0x50(%ebx,%eax,2)
or     %esp,(%eax)
and    %ah,0x2064392d
and    $0x2064392d,%eax
and    $0xa64392d,%eax
add    %cl,0x4e(%ecx)
inc    %ebp
push   %esp
or     %esp,(%eax)
and    %ah,0x2064392d
and    $0x2064392d,%eax
and    $0xa64392d,%eax
add    %al,0x52(%esi)
inc    %ecx
inc    %edi
or     %esp,(%eax)
and    %ah,0x2064392d
and    $0x2064392d,%eax
and    $0xa64392d,%eax
add    %dh,0x73(%ebx)
cmp    (%eax),%ah
addr16
gs
je     8055ec2 <_IO_stdin_used+0x41e>
jae    8055ed4 <_IO_stdin_used+0x430>
arpl   %bp,0x73(%ebx)
je     8055ecb <_IO_stdin_used+0x427>
je     8055e6c <_IO_stdin_used+0x3c8>
dec    %edi
push   %esi
inc    %ebp
push   %edx
push   %edx
push   %ebp
dec    %esi
add    %al,0x4f(%ebp)
inc    %esi
and    %ch,0x6e(%edi)
and    %ch,0x65(%esi)
je     8055eeb <_IO_stdin_used+0x447>
imul   $0x5245000a,0x6b(%esi),%ebp
push   %edx
dec    %edi
push   %edx
and    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs or  %fs:%gs:(%eax),%al
and    %esp,(%ecx)
and    %edx,0x65(%edx)
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
popa
outsb  %ds:(%esi),(%dx)
je     8055ec0 <_IO_stdin_used+0x41c>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x69(%ebx)
jp     8055f0c <_IO_stdin_used+0x468>
and    %ah,0xa647a
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
dec    %esi
inc    %ebp
push   %esp
dec    %esp
dec    %ecx
dec    %esi
dec    %ebx
add    %ch,0x65(%esi)
je     8055ef1 <_IO_stdin_used+0x44d>
outsb  %ds:(%esi),(%dx)
gs
je     8055f32 <_IO_stdin_used+0x48e>
imul   $0x6c6c2500,0x6b(%esi),%ebp
js     8055eef <_IO_stdin_used+0x44b>
and    $0x64252064,%eax
and    %ah,0x64252078
and    %ah,0x6c252064
insb   (%dx),%es:(%edi)
js     8055f03 <_IO_stdin_used+0x45f>
and    $0x6c730064,%eax
popa
bound  %ebp,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
push   %ebx
dec    %esp
inc    %ecx
inc    %edx
dec    %ecx
dec    %esi
inc    %esi
dec    %edi
add    %ch,(%eax)
and    0x252c2273,%ah
fs
sub    $0x25,%al
sub    %ebp,%fs:(%eax,%eax,1)
and    $0x78253a78,%eax
add    %ah,0x25783830
xor    %bh,(%eax)
js     8055f3f <_IO_stdin_used+0x49b>
xor    %bh,(%eax)
js     8055f43 <_IO_stdin_used+0x49f>
xor    %bh,(%eax)
js     8055f5c <_IO_stdin_used+0x4b8>
and    $0x74200078,%eax
imul   $0x25283a72,0x65(%ebp),%ebp
jae    8055f5c <_IO_stdin_used+0x4b8>
and    $0x64252c73,%eax
sub    %eax,(%eax)
and    %dh,0x61(%ecx)
arpl   %bp,0x3a(%ebx)
and    $0x62200064,%eax
imul   $0x73752000,0x72(%ecx,%ebp,2),%esp
gs
jb     8055fc0 <_IO_stdin_used+0x51c>
cmp    (%eax),%ch
and    $0x20002973,%eax
jne    8055fbf <_IO_stdin_used+0x51b>
cmp    %fs:0x69200075,%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
cmp    0x73200075,%ah
imul   $0x25,(%edx),%edi
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
js     8055f6c <_IO_stdin_used+0x4c8>
and    %ch,0x70(%edi)
je     8055fab <_IO_stdin_used+0x507>
and    0x20002273,%ah
jae    8055fe4 <_IO_stdin_used+0x540>
cmp    (%eax),%al
and    %ah,0x63252d63
add    %cl,(%edx)
or     %eax,(%eax)
outsw  %ds:(%esi),(%dx)
jo     8055fee <_IO_stdin_used+0x54a>
outsb  %ds:(%esi),(%dx)
sub    %ah,(%esp,%edx,2)
inc    %ebx
push   %eax
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
sub    %eax,(%eax)
push   %edx
gs
popa
imul   $0x43542420,%fs:0x67(%esi),%ebp
push   %eax
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
add    %dl,0x50(%ebx,%eax,2)
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
and    %ah,0x6e(%ecx)
jae    8056033 <_IO_stdin_used+0x58f>
gs
jb     8056024 <_IO_stdin_used+0x580>
add    %dl,%fs:0x50(%ebx,%eax,2)
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
and    %ah,0x6e(%ecx)
jae    8056044 <_IO_stdin_used+0x5a0>
gs
jb     8056043 <_IO_stdin_used+0x59f>
add    %cl,0x65(%ebp)
jae    8056048 <_IO_stdin_used+0x5a4>
popa
and    %dh,%gs:0x72(%si)
jne    805604b <_IO_stdin_used+0x5a7>
arpl   %sp,0x74(%ecx)
gs or  %fs:%gs:(%eax),%al
and    %esp,(%ecx)
and    %edx,0x65(%edx)
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
popa
outsb  %ds:(%esi),(%dx)
je     805600f <_IO_stdin_used+0x56b>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x69(%ebx)
jp     805605b <_IO_stdin_used+0x5b7>
and    %ah,0x50000a64
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %esp
inc    %ebx
push   %eax
add    %ch,0x65(%esi)
je     805603b <_IO_stdin_used+0x597>
je     8056071 <_IO_stdin_used+0x5cd>
jo     8056010 <_IO_stdin_used+0x56c>
outsb  %ds:(%esi),(%dx)
gs
je     8056043 <_IO_stdin_used+0x59f>
je     8056079 <_IO_stdin_used+0x5d5>
jo     805604e <_IO_stdin_used+0x5aa>
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %esp
inc    %ebx
push   %eax
add    %ah,%ss:(%eax)
jne    8056093 <_IO_stdin_used+0x5ef>
fs
cmp    $0x20007525,%eax
imul   $0x75253d,0x6f(%esi),%ebp
jne    8056098 <_IO_stdin_used+0x5f4>
jae    80560af <_IO_stdin_used+0x60b>
jb     805603d <_IO_stdin_used+0x599>
jne    805609e <_IO_stdin_used+0x5fa>
fs
addr16 jb 8056043 <_IO_stdin_used+0x59f>
and    $0x2520732a,%eax
sub    $0x2520642a,%eax
sub    0x20(%ebx),%dh
and    $0x642a2d,%eax
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
pop    %eax
add    %ch,0x65(%esi)
je     8056096 <_IO_stdin_used+0x5f2>
jne    80560d7 <_IO_stdin_used+0x633>
imul   $0x72656550,0x0(%eax),%edi
add    %ah,0x25203a78
js     8056098 <_IO_stdin_used+0x5f4>
and    $0x78252078,%eax
and    %ah,0x78252078
and    %ah,0x73252064
add    %ah,0x2075362d
and    $0x2075362d,%eax
add    %dh,0x5f(%eax)
jb     80560fa <_IO_stdin_used+0x656>
ja     805609b <_IO_stdin_used+0x5f7>
jo     80560fc <_IO_stdin_used+0x658>
fs
addr16 jb 80560a1 <_IO_stdin_used+0x5fd>
push   %ebp
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
and    %ah,0x6e(%ecx)
jae    8056122 <_IO_stdin_used+0x67e>
gs
jb     8056121 <_IO_stdin_used+0x67d>
and    %ah,0x20000a64
imul   $0x2075253d,0x6f(%esi),%ebp
jne    8056126 <_IO_stdin_used+0x682>
fs
cmp    $0x73207525,%eax
imul   $0x70,0x62090a00,%edi
data16
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
je     8056136 <_IO_stdin_used+0x692>
jb     80560f3 <_IO_stdin_used+0x64f>
sub    %ah,0x203a2964
add    %ah,(%eax)
xor    %bh,0x25(%eax)
xor    %dh,(%edx)
js     8056102 <_IO_stdin_used+0x65e>
and    $0x75252075,%eax
and    %ah,0x25002c75
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
js     8056111 <_IO_stdin_used+0x66d>
and    $0x2520642a,%eax
and    %ah,%fs:0x64252078
and    %ah,0x75252064
and    %ah,0x75252075
add    %ah,(%eax)
imul   $0x2075253d,0x6f(%esi),%ebp
jne    805617d <_IO_stdin_used+0x6d9>
fs
cmp    $0x73207525,%eax
imul   $0x0,0x786c6c25,%edi
outsb  %ds:(%esi),(%dx)
gs
je     8056154 <_IO_stdin_used+0x6b0>
jo     8056188 <_IO_stdin_used+0x6e4>
arpl   %bp,0x65(%ebx)
je     805612c <_IO_stdin_used+0x688>
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %eax
inc    %ecx
inc    %ebx
dec    %ebx
inc    %ebp
push   %esp
add    %dh,0x6e(%ebp)
imul   $0x74656e00,0x3a(%eax),%edi
insb   (%dx),%es:(%edi)
imul   $0x6e69003a,0x6b(%esi),%ebp
gs
je     805618a <_IO_stdin_used+0x6e6>
add    %ch,0x6e(%ecx)
gs
je     805618c <_IO_stdin_used+0x6e8>
cmp    (%eax),%al
inc    %ebp
jb     80561cd <_IO_stdin_used+0x729>
outsl  %ds:(%esi),(%dx)
jb     8056198 <_IO_stdin_used+0x6f4>
and    %ah,0x6d(%ecx)
bound  %ebp,0x67(%ecx)
jne    80561d5 <_IO_stdin_used+0x731>
jne    80561db <_IO_stdin_used+0x737>
and    %dh,0x6f(%eax)
jb     80561e1 <_IO_stdin_used+0x73d>
and    %ah,(%edx)
and    $0xa2e2273,%eax
add    %ch,0x6e(%ecx)
gs
je     805617a <_IO_stdin_used+0x6d6>
imul   $0x68003674,0x65(%esi),%ebp
gs
insb   (%dx),%es:(%edi)
jo     8056185 <_IO_stdin_used+0x6e1>
jae    80561fa <_IO_stdin_used+0x756>
cmp    (%eax),%ah
and    0x69202273,%ah
jae    80561b1 <_IO_stdin_used+0x70d>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x63636400,0xa(%ecx,%edi,2),%ebp
jo     80561a6 <_IO_stdin_used+0x702>
jne    8056216 <_IO_stdin_used+0x772>
imul   $0x65727473,0x5f(%eax),%edi
popa
insl   (%dx),%es:(%edi)
add    %dh,0x6e(%ebp)
imul   $0x61726764,0x5f(%eax),%edi
insl   (%dx),%es:(%edi)
add    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8056223 <_IO_stdin_used+0x77f>
jb     8056227 <_IO_stdin_used+0x783>
ja     80561c8 <_IO_stdin_used+0x724>
jo     805622b <_IO_stdin_used+0x787>
arpl   %bp,0x65(%ebx)
je     805622e <_IO_stdin_used+0x78a>
fs
addr16 jb 8056234 <_IO_stdin_used+0x790>
insl   (%dx),%es:(%edi)
add    %cl,0x6f(%ebp)
jb     805623e <_IO_stdin_used+0x79a>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi)
and    %ah,%gs:0x69(%esi)
insb   (%dx),%es:(%edi)
je     805624d <_IO_stdin_used+0x7a9>
jb     805620a <_IO_stdin_used+0x766>
imul   $0x6600,0xa(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
jo     8056259 <_IO_stdin_used+0x7b5>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
je     8056260 <_IO_stdin_used+0x7bc>
jb     805621d <_IO_stdin_used+0x779>
imul   $0x7373,0x0(%ebp,%eiz,2),%bp
and    %dh,0x74(%ebp)
imul   $0x69202c79,0x74(%ecx,%ebp,2),%ebp
jo     8056283 <_IO_stdin_used+0x7df>
outsl  %ds:(%esi),(%dx)
jne    8056288 <_IO_stdin_used+0x7e4>
xor    %gs:0x73257373,%ch
or     (%eax),%al
jae    8056293 <_IO_stdin_used+0x7ef>
popa
je     8056287 <_IO_stdin_used+0x7e3>
add    %ah,0x78(%ebp)
arpl   %bp,0x64(%ebp,%esi,2)
add    %ah,%gs:0x78(%ebp)
arpl   %bp,0x4e(%eax,%eax,1)
gs
je     805629d <_IO_stdin_used+0x7f9>
add    %dl,%fs:0x74(%ebx)
popa
je     80562a0 <_IO_stdin_used+0x7fc>
add    %dl,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
fs
sub    $0x65520051,%eax
arpl   %si,0x2d(%esi)
push   %ecx
add    %ah,0x2073362d
and    $0x2073362d,%eax
add    %dl,0x6f(%eax)
jb     80562cd <_IO_stdin_used+0x829>
add    %dl,0x65(%eax)
gs
jb     805627f <_IO_stdin_used+0x7db>
inc    %ecx
fs
fs
jb     80562c9 <_IO_stdin_used+0x825>
jae    80562d9 <_IO_stdin_used+0x835>
add    %cl,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x64(%ecx)
fs
jb     80562d7 <_IO_stdin_used+0x833>
jae    80562e7 <_IO_stdin_used+0x843>
add    %ah,0x253a732a
sub    $0x2520732a,%eax
sub    0x3a(%ebx),%dh
and    $0xa732a2d,%eax
add    %ch,0x65(%esi)
je     80562bb <_IO_stdin_used+0x817>
jb     80562ef <_IO_stdin_used+0x84b>
ja     8056290 <_IO_stdin_used+0x7ec>
push   %eax
push   %edx
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %edx
inc    %ecx
push   %edi
add    %ch,0x65(%esi)
je     80562d0 <_IO_stdin_used+0x82c>
jb     8056304 <_IO_stdin_used+0x860>
ja     80562db <_IO_stdin_used+0x837>
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %edx
inc    %ecx
push   %edi
add    %dl,%ss:0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebp
inc    %esp
push   %eax
add    %ch,0x65(%esi)
je     80562f4 <_IO_stdin_used+0x850>
jne    805632b <_IO_stdin_used+0x887>
jo     80562c9 <_IO_stdin_used+0x825>
outsb  %ds:(%esi),(%dx)
gs
je     80562fc <_IO_stdin_used+0x858>
jne    8056333 <_IO_stdin_used+0x88f>
jo     8056307 <_IO_stdin_used+0x863>
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %ebp
inc    %esp
push   %eax
add    %ch,%ss:0x75(%esi)
insl   (%dx),%es:(%edi)
gs
jb     805634f <_IO_stdin_used+0x8ab>
arpl   %ax,(%eax)
jb     805634f <_IO_stdin_used+0x8ab>
jae    805635b <_IO_stdin_used+0x8b7>
insb   (%dx),%es:(%edi)
jbe    8056354 <_IO_stdin_used+0x8b0>
add    %ch,0x70(%edi)
je     805635d <_IO_stdin_used+0x8b9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    80562f8 <_IO_stdin_used+0x854>
gs
js     805636f <_IO_stdin_used+0x8cb>
outsb  %gs:(%esi),(%dx)
fs gs add %ch,%fs:%gs:0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8056380 <_IO_stdin_used+0x8dc>
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8056375 <_IO_stdin_used+0x8d1>
jae    8056312 <_IO_stdin_used+0x86e>
bound  %esi,0x66(%eax)
add    %ch,0x73(%ecx,%ebp,2)
je     8056380 <_IO_stdin_used+0x8dc>
outsb  %ds:(%esi),(%dx)
imul   $0x76706900,0x67(%esi),%ebp
xor    $0x0,%al
imul   $0x61660036,0x76(%eax),%esi
insl   (%dx),%es:(%edi)
imul   $0x72657571,0x0(%ecx,%edi,2),%ebp
jns    8056337 <_IO_stdin_used+0x893>
jae    80563ae <_IO_stdin_used+0x90a>
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
jb     80563b7 <_IO_stdin_used+0x913>
add    %dh,0x65(%esi)
jb     80563b6 <_IO_stdin_used+0x912>
imul   $0x66666f00,0x6e(%edi),%ebp
add    %ch,0x65(%ebx)
gs
jo     80563b1 <_IO_stdin_used+0x90d>
insb   (%dx),%es:(%edi)
imul   $0x6d697400,0x65(%esi),%esi
gs
ja     80563bc <_IO_stdin_used+0x918>
imul   $0x69737265,0x70(%eax,%eax,1),%esi
jae    80563d9 <_IO_stdin_used+0x935>
add    %dh,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %dl,0x4e(%ebp)
dec    %ebx
dec    %esi
dec    %edi
push   %edi
dec    %esi
add    %dh,0x79(%ebx)
outsb  %ds:(%esi),(%dx)
sub    $0x746e6573,%eax
add    %dh,0x79(%ebx)
outsb  %ds:(%esi),(%dx)
sub    $0x76636572,%eax
add    %ah,0x69(%esi)
outsb  %ds:(%esi),(%dx)
sub    $0x74696177,%eax
sub    $0x69660031,%eax
outsb  %ds:(%esi),(%dx)
sub    $0x74696177,%eax
sub    $0x69740032,%eax
insl   (%dx),%es:(%edi)
gs
sub    $0x74696177,%eax
add    %dh,0x6e(%ebp)
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    805641e <_IO_stdin_used+0x97a>
sub    $0x74696177,%eax
add    %ch,0x73(%ecx,%eiz,2)
je     80563f1 <_IO_stdin_used+0x94d>
popa
arpl   %bp,0x0(%ebx)
arpl   %bp,0x73(%edi,%ebp,2)
imul   $0x54534500,0x67(%esi),%ebp
inc    %ecx
inc    %edx
add    %dl,0x59(%ebx)
dec    %esi
sub    $0x544e4553,%eax
add    %dl,0x59(%ebx)
dec    %esi
sub    $0x56434552,%eax
add    %al,0x49(%esi)
dec    %esi
sub    $0x54494157,%eax
sub    $0x49460031,%eax
dec    %esi
sub    $0x54494157,%eax
sub    $0x49540032,%eax
dec    %ebp
inc    %ebp
sub    $0x54494157,%eax
add    %al,0x4c(%ebx)
dec    %edi
push   %ebx
inc    %ebp
sub    $0x54494157,%eax
add    %cl,0x53(%ecx,%eax,2)
push   %esp
sub    $0x4b4341,%eax
dec    %esp
dec    %ecx
push   %ebx
push   %esp
inc    %ebp
dec    %esi
add    %al,0x4c(%ebx)
dec    %edi
push   %ebx
dec    %ecx
dec    %esi
inc    %edi
add    %dh,0x6f(%ebx)
arpl   %bp,0x0(%ebx)
je     8056495 <_IO_stdin_used+0x9f1>
jo     8056493 <_IO_stdin_used+0x9ef>
bound  %ebp,0x6e(%ecx)
fs
pop    %edi
bound  %esi,0x63(%ebp)
imul   $0x0,0x74(%ebp),%esp
je     80564a5 <_IO_stdin_used+0xa01>
jo     80564a3 <_IO_stdin_used+0x9ff>
je     80564bd <_IO_stdin_used+0xa19>
pop    %edi
bound  %esi,0x63(%ebp)
imul   $0x0,0x74(%ebp),%esp
je     80564b3 <_IO_stdin_used+0xa0f>
jo     80564b1 <_IO_stdin_used+0xa0d>
outsl  %ds:(%esi),(%dx)
jo     80564ba <_IO_stdin_used+0xa16>
outsb  %ds:(%esi),(%dx)
pop    %edi
jb     80564be <_IO_stdin_used+0xa1a>
jno    80564d0 <_IO_stdin_used+0xa2c>
gs
jae    80564d2 <_IO_stdin_used+0xa2e>
add    %dh,0x6b(%ebx)
bound  %esi,0x66(%ebp)
pop    %di
push   $0x5f646165
arpl   %sp,0x63(%ecx)
push   $0x65
add    %bl,-0x50(%eax)
add    $0x8,%al
pop    %eax
mov    $0x4,%al
or     %al,0x200804b1(%eax)
mov    $0x4,%dl
or     %bl,%al
mov    $0x4,%dl
or     %al,-0x4d(%eax)
add    $0x8,%al
mov    %dh,-0x4c57f7fc(%ebx)
add    $0x8,%al
shrb   -0x4fe7f7fc(%edi)
add    $0x8,%al
cwtl
mov    $0xbf680804,%esi
add    $0x8,%al
sub    %bh,-0x40bff7fc(%edi)
add    $0x8,%al
enter  $0x4be,$0x8
loopne 805647c <_IO_stdin_used+0x9d8>
add    $0x8,%al
clc
mov    $0xbf100804,%esi
add    $0x8,%al
inc    %eax
mov    $0xbe580804,%esi
add    $0x8,%al
add    $0x63080497,%eax
cltd
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
rcll   $0x4,-0x669cf7fc(%esi)
or     %cl,%ch
xchg   %eax,%esi
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
xchg   %eax,%ecx
xchg   %eax,%edi
add    $0x8,%al
arpl   %bx,-0x685bf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
xchg   %eax,%esi
xchg   %eax,%edi
add    $0x8,%al
arpl   %bx,-0x6791f7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x67b9f7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x669cf7fc(%ecx)
add    $0x8,%al
mov    $0x30080498,%esi
cwtl
add    $0x8,%al
arpl   %bx,-0x66d1f7fc(%ecx)
add    $0x8,%al
sbb    %bl,-0x6958f7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x686ef7fc(%ecx)
add    $0x8,%al
or     %ebx,-0x669cf7fc(%ecx)
add    $0x8,%al
arpl   %bx,-0x6705f7fc(%ecx)
add    $0x8,%al
jmp    805655e <_IO_stdin_used+0xaba>
add    $0x8,%al
fcompl -0x6732f7fc(%eax)
add    $0x8,%al
inc    %esp
xchg   %eax,%edi
add    $0x8,%al
arpl   %bx,-0x68caf7fc(%ecx)
add    $0x8,%al
adc    $0x97,%al
add    $0x8,%al
and    %edx,-0x6882f7fc(%edi)
add    $0x8,%al
inc    %esi
cwtl
add    $0x8,%al
imul   $0x804,-0x68aaf7fc(%edi),%edx
00
add    %al,(%eax)
loopne 8056664 <_IO_stdin_used+0xbc0>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%esi)
add    %al,(%eax)
call   80d6b77 <optarg+0x7b973>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
lock bound %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%edi)
add    %al,(%eax)
clc
bound  %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebp)
add    %al,(%eax)
add    %esp,0x5(%ebx)
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ebp)
add    %al,(%eax)
ljmp   $0x0,$0x8055e
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ecx)
add    %al,(%eax)
or     %ah,0x5(%ebx)
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%eax)
add    %al,(%eax)
adc    0x5(%ebx),%ah
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
mov    0x80561,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %cl,(%eax,%eiz,2)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%eax,%eax,1)
add    %al,%ch
bound  %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
mov    %fs,0x5(%edx)
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
addr16 pusha
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,0x0(%eax)
add    %al,(%eax)
mov    $0x8055b,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
push   %ss
arpl   %ax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %ah,(%eax)
arpl   %ax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
and    $0x80563,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%esi)
add    %al,(%eax)
add    %ah,0x80561
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %ch,(%edx)
arpl   %ax,0x108
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
add    0x5(%ebp),%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
xor    %esp,0x5(%ebx)
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
aaa
arpl   %ax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
sbb    $0x5c,%al
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax,%eax,1)
add    %ch,%cl
jo     8056778 <_IO_stdin_used+0xcd4>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%esi)
add    %al,(%eax)
aas
arpl   %ax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
andb   $0x8,0x5(%ecx)
push   $0x0
add    %al,(%eax)
add    %al,0x63(%edi)
add    $0x5634408,%eax
or     %cl,0x63(%ebx)
add    $0x5635508,%eax
or     %bl,0x63(%esi)
add    $0x5636608,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %ch,0x63(%esi)
add    $0x55bb308,%eax
or     %dh,0x63(%esi)
add    $0x5637f08,%eax
or     %cl,-0x6cf7fa9d(%eax)
arpl   %ax,0x5639e08
or     %ch,-0x4bf7fa9d(%eax)
arpl   %ax,0x563bf08
or     %dl,(%esi)
arpl   %ax,0x563c808
or     %al,(%eax)
add    %al,(%eax)
add    %ch,0x63(%esi)
add    $0x563d008,%eax
or     %dl,%dh
arpl   %ax,0x563df08
or     %ch,%al
arpl   %ax,0x563f308
or     %bh,%dh
arpl   %ax,0x55bfa08
or     %cl,(%eax)
fs
add    $0x5641308,%eax
or     %bl,(%esp,%eiz,2)
add    $0x5642308,%eax
or     %ch,(%ebx)
fs
add    $0x5643008,%eax
or     %al,0x64(%eax)
add    $0x5644e08,%eax
or     %bl,0x64(%edi)
add    $0x31333108,%eax
xor    %esi,(%edx)
xor    (%eax),%al
add    %ah,(%eax)
jae    80568da <_IO_stdin_used+0xe36>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
cmp    (%eax),%ch
jb     805689b <_IO_stdin_used+0xdf7>
jne    80568a4 <_IO_stdin_used+0xe00>
jb     80568dc <_IO_stdin_used+0xe38>
and    $0x25742c75,%eax
jne    80568ad <_IO_stdin_used+0xe09>
je     80568e5 <_IO_stdin_used+0xe41>
and    $0x25662c75,%eax
jne    80568b6 <_IO_stdin_used+0xe12>
ja     80568b1 <_IO_stdin_used+0xe0d>
jne    80568ba <_IO_stdin_used+0xe16>
outsl  %ds:(%esi),(%dx)
and    $0x75,%eax
jae    805690f <_IO_stdin_used+0xe6b>
jae    80568c7 <_IO_stdin_used+0xe23>
outsb  %ds:(%esi),(%dx)
gs
je     80568cb <_IO_stdin_used+0xe27>
imul   $0x70692f34,0x76(%eax),%esi
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
pop    %edi
jo     805691b <_IO_stdin_used+0xe77>
jb     8056922 <_IO_stdin_used+0xe7e>
pop    %edi
jb     8056912 <_IO_stdin_used+0xe6e>
outsb  %ds:(%esi),(%dx)
add    %al,%gs:(%bx,%si)
add    %al,(%eax)
push   %ebp
jae    805691c <_IO_stdin_used+0xe78>
cmp    %gs:(%bx,%si),%ah
jae    8056934 <_IO_stdin_used+0xe90>
and    %bl,0x20(%ebx)
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebx)
and    %bl,0x20(%ebx)
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %al,0x49(%esi)
dec    %esp
push   %esp
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ch,0x2d202c68
sub    $0x706c6568,%eax
or     %ecx,(%ecx)
je     8056968 <_IO_stdin_used+0xec4>
imul   $0x7373656d,0x20(%ebx),%esi
popa
or     %gs:(%bx,%si),%ah
and    %ah,(%eax)
sub    $0x2d202c56,%eax
sub    $0x73726576,%eax
imul   $0x74756f09,0x6e(%edi),%ebp
jo     8056996 <_IO_stdin_used+0xef2>
je     8056943 <_IO_stdin_used+0xe9f>
jbe    805698a <_IO_stdin_used+0xee6>
jb     805699a <_IO_stdin_used+0xef6>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     805699e <_IO_stdin_used+0xefa>
popa
je     805699d <_IO_stdin_used+0xef9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c6e,%eax
sub    $0x656d756e,%eax
jb     80569af <_IO_stdin_used+0xf0b>
arpl   %cx,(%ecx)
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
daa
je     805696e <_IO_stdin_used+0xeca>
jb     80569b5 <_IO_stdin_used+0xf11>
jae    80569c1 <_IO_stdin_used+0xf1d>
insb   (%dx),%es:(%edi)
jbe    80569ba <_IO_stdin_used+0xf16>
and    %dh,0x65(%ebx)
jb     80569d0 <_IO_stdin_used+0xf2c>
imul   $0x6d616e20,0x65(%ebx),%esp
gs
jae    805696e <_IO_stdin_used+0xeca>
and    %ah,(%eax)
and    %ch,0x2d202c72
sub    $0x6f736572,%eax
insb   (%dx),%es:(%edi)
jbe    80569d9 <_IO_stdin_used+0xf35>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%edx)
jae    80569ee <_IO_stdin_used+0xf4a>
insb   (%dx),%es:(%edi)
jbe    80569e7 <_IO_stdin_used+0xf43>
and    %ch,0x6f(%eax)
jae    80569fb <_IO_stdin_used+0xf57>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    8056998 <_IO_stdin_used+0xef4>
and    %ah,(%eax)
and    %ch,0x2d202c61
sub    $0x96c6c61,%eax
or     %esp,0x73(%ecx,%ebp,2)
jo     8056a0d <_IO_stdin_used+0xf69>
popa
jns    80569c4 <_IO_stdin_used+0xf20>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056a22 <_IO_stdin_used+0xf7e>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c6c,%eax
sub    $0x7473696c,%eax
outsb  %gs:(%esi),(%dx)
imul   $0x73696409,0x67(%esi),%ebp
jo     8056a34 <_IO_stdin_used+0xf90>
popa
jns    80569eb <_IO_stdin_used+0xf47>
insb   (%dx),%es:(%edi)
imul   $0x6e696e65,0x74(%ebx),%esi
and    %dh,0x6f(%bp,%di)
arpl   %bp,0x65(%ebx)
je     8056a4f <_IO_stdin_used+0xfab>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c6f,%eax
sub    $0x6974706f,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8056a0e <_IO_stdin_used+0xf6a>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8056a5e <_IO_stdin_used+0xfba>
outsl  %ds:(%esi),(%dx)
ja     8056a19 <_IO_stdin_used+0xf75>
je     8056a64 <_IO_stdin_used+0xfc0>
insl   (%dx),%es:(%edi)
gs
jb     8056a1f <_IO_stdin_used+0xf7b>
imul   $0x616d726f,0x66(%esi),%ebp
je     8056a71 <_IO_stdin_used+0xfcd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c65,%eax
sub    $0x65747865,%eax
outsb  %ds:(%esi),(%dx)
fs gs and %ah,%fs:%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8056a8c <_IO_stdin_used+0xfe8>
outsl  %ds:(%esi),(%dx)
ja     8056a47 <_IO_stdin_used+0xfa3>
fs
gs
je     8056a8c <_IO_stdin_used+0xfe8>
imul   $0x636f7320,0x64(%ebp,%eiz,2),%ebp
imul   $0x20,0x74(%ebp),%esp
imul   $0x616d726f,0x66(%esi),%ebp
je     8056aa9 <_IO_stdin_used+0x1005>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c6d,%eax
sub    $0x6f6d656d,%eax
jb     8056acb <_IO_stdin_used+0x1027>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8056ac4 <_IO_stdin_used+0x1020>
outsl  %ds:(%esi),(%dx)
ja     8056a7f <_IO_stdin_used+0xfdb>
jae    8056ad0 <_IO_stdin_used+0x102c>
arpl   %bp,0x65(%ebx)
je     8056a86 <_IO_stdin_used+0xfe2>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8056ae5 <_IO_stdin_used+0x1041>
and    %dh,0x73(%ebp)
popa
or     %gs:(%bx,%si),%ah
and    %ah,(%eax)
sub    $0x2d202c70,%eax
sub    $0x636f7270,%eax
gs
jae    8056af6 <_IO_stdin_used+0x1052>
gs
jae    8056a8f <_IO_stdin_used+0xfeb>
jae    8056af0 <_IO_stdin_used+0x104c>
outsl  %ds:(%esi),(%dx)
ja     8056aab <_IO_stdin_used+0x1007>
jo     8056aff <_IO_stdin_used+0x105b>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8056ab3 <_IO_stdin_used+0x100f>
jne    8056b08 <_IO_stdin_used+0x1064>
imul   $0x636f7320,0x67(%esi),%ebp
imul   $0xa,0x74(%ebp),%esp
and    %ah,(%eax)
and    %ch,0x2d202c69
sub    $0x6f666e69,%eax
or     %ecx,(%ecx)
jae    8056b19 <_IO_stdin_used+0x1075>
outsl  %ds:(%esi),(%dx)
ja     8056ad4 <_IO_stdin_used+0x1030>
imul   $0x616e7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %dl,0x50(%ebx,%eax,2)
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8056b34 <_IO_stdin_used+0x1090>
popa
je     8056b33 <_IO_stdin_used+0x108f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c73,%eax
sub    $0x6d6d7573,%eax
popa
jb     8056b56 <_IO_stdin_used+0x10b2>
or     %esi,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8056b03 <_IO_stdin_used+0x105f>
jae    8056b54 <_IO_stdin_used+0x10b0>
arpl   %bp,0x65(%ebx)
je     8056b0a <_IO_stdin_used+0x1066>
jne    8056b5f <_IO_stdin_used+0x10bb>
popa
and    %dh,%gs:0x75(%bp,%di)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
jb     8056b70 <_IO_stdin_used+0x10cc>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c62,%eax
sub    $0x20667062,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8056b79 <_IO_stdin_used+0x10d5>
outsl  %ds:(%esi),(%dx)
ja     8056b34 <_IO_stdin_used+0x1090>
bound  %esi,0x66(%eax)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
je     8056b82 <_IO_stdin_used+0x10de>
jb     8056b3f <_IO_stdin_used+0x109b>
jae    8056b90 <_IO_stdin_used+0x10ec>
arpl   %bp,0x65(%ebx)
je     8056b46 <_IO_stdin_used+0x10a2>
imul   $0x616d726f,0x66(%esi),%ebp
je     8056b98 <_IO_stdin_used+0x10f4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%edx),%cl
and    %ah,(%eax)
and    %ch,0x2d202c34
sub    $0x34767069,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056b77 <_IO_stdin_used+0x10d3>
dec    %ecx
push   %eax
and    %dh,0x65(%esi)
jb     8056bd1 <_IO_stdin_used+0x112d>
imul   $0x73203420,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
je     8056bde <_IO_stdin_used+0x113a>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c36,%eax
sub    $0x36767069,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056bb0 <_IO_stdin_used+0x110c>
dec    %ecx
push   %eax
and    %dh,0x65(%esi)
jb     8056c0a <_IO_stdin_used+0x1166>
imul   $0x73203620,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
je     8056c17 <_IO_stdin_used+0x1173>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c30,%eax
sub    $0x6b636170,%eax
gs
je     8056bbe <_IO_stdin_used+0x111a>
imul   $0x2079616c,%fs:0x70(%ebx),%esi
push   %eax
inc    %ecx
inc    %ebx
dec    %ebx
inc    %ebp
push   %esp
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056c3e <_IO_stdin_used+0x119a>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c74,%eax
sub    $0x9706374,%eax
or     %esp,0x73(%ecx,%ebp,2)
jo     8056c4b <_IO_stdin_used+0x11a7>
popa
jns    8056c02 <_IO_stdin_used+0x115e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056c07 <_IO_stdin_used+0x1163>
push   %esp
inc    %ebx
push   %eax
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056c65 <_IO_stdin_used+0x11c1>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c75,%eax
sub    $0x9706475,%eax
or     %esp,0x73(%ecx,%ebp,2)
jo     8056c72 <_IO_stdin_used+0x11ce>
popa
jns    8056c29 <_IO_stdin_used+0x1185>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056c2e <_IO_stdin_used+0x118a>
push   %ebp
inc    %esp
push   %eax
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056c8c <_IO_stdin_used+0x11e8>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c64,%eax
sub    $0x70636364,%eax
or     %ecx,(%ecx)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056c56 <_IO_stdin_used+0x11b2>
inc    %esp
inc    %ebx
inc    %ebx
push   %eax
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056cb5 <_IO_stdin_used+0x1211>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c77,%eax
sub    $0x9776172,%eax
or     %esp,0x73(%ecx,%ebp,2)
jo     8056cc2 <_IO_stdin_used+0x121e>
popa
jns    8056c79 <_IO_stdin_used+0x11d5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056c7e <_IO_stdin_used+0x11da>
push   %edx
inc    %ecx
push   %edi
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056cdc <_IO_stdin_used+0x1238>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c78,%eax
sub    $0x78696e75,%eax
or     %ecx,(%ecx)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8056ca6 <_IO_stdin_used+0x1202>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x616d6f64,0x20(%eax),%edi
imul   $0x6b636f73,0x20(%esi),%ebp
gs
je     8056d0c <_IO_stdin_used+0x1268>
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c66,%eax
sub    $0x696d6166,%eax
insb   (%dx),%es:(%edi)
jns    8056ce7 <_IO_stdin_used+0x1243>
inc    %esi
inc    %ecx
dec    %ebp
dec    %ecx
dec    %esp
pop    %ecx
and    %ah,0x73(%ecx,%ebp,2)
jo     8056d22 <_IO_stdin_used+0x127e>
popa
jns    8056cd9 <_IO_stdin_used+0x1235>
jae    8056d2a <_IO_stdin_used+0x1286>
arpl   %bp,0x65(%ebx)
je     8056d33 <_IO_stdin_used+0x128f>
and    %ch,0x66(%edi)
and    %dh,0x70(%ecx,%edi,2)
and    %al,%gs:0x41(%esi)
dec    %ebp
dec    %ecx
dec    %esp
pop    %ecx
or     (%edx),%cl
and    %ah,(%eax)
and    %ch,0x2d202c41
sub    $0x72657571,%eax
jns    8056d1d <_IO_stdin_used+0x1279>
push   %ecx
push   %ebp
inc    %ebp
push   %edx
pop    %ecx
sub    $0x20,%al
sub    $0x636f732d,%eax
imul   $0x3d,0x74(%ebp),%esp
push   %ecx
push   %ebp
inc    %ebp
push   %edx
pop    %ecx
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ecx
push   %ebp
inc    %ebp
push   %edx
pop    %ecx
and    %bh,(%edx)
cmp    $0x6c617b20,%eax
insb   (%dx),%es:(%edi)
jl     8056d75 <_IO_stdin_used+0x12d1>
outsb  %ds:(%esi),(%dx)
gs
je     8056d8c <_IO_stdin_used+0x12e8>
je     8056d75 <_IO_stdin_used+0x12d1>
jo     8056d90 <_IO_stdin_used+0x12ec>
jne    8056d7a <_IO_stdin_used+0x12d6>
jo     8056d94 <_IO_stdin_used+0x12f0>
jb     8056d7b <_IO_stdin_used+0x12d7>
ja     8056d98 <_IO_stdin_used+0x12f4>
jne    8056d8c <_IO_stdin_used+0x12e8>
imul   $0x6b636170,0x7c(%eax),%edi
gs
je     8056da4 <_IO_stdin_used+0x1300>
outsb  %ds:(%esi),(%dx)
gs
je     8056d98 <_IO_stdin_used+0x12f4>
imul   $0x512c5b7d,0x6b(%esi),%ebp
push   %ebp
inc    %ebp
push   %edx
pop    %ecx
pop    %ebp
or     (%edx),%cl
and    %ah,(%eax)
and    %ch,0x2d202c44
sub    $0x67616964,%eax
cmp    $0x454c4946,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x6d(%ebp,%esi,2)
jo     8056d76 <_IO_stdin_used+0x12d2>
jb     8056db9 <_IO_stdin_used+0x1315>
ja     8056d7a <_IO_stdin_used+0x12d6>
imul   $0x616d726f,0x66(%esi),%ebp
je     8056dcc <_IO_stdin_used+0x1328>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    8056ddf <_IO_stdin_used+0x133b>
and    %dl,0x50(%ebx,%eax,2)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8056dea <_IO_stdin_used+0x1346>
and    %dh,0x20(%edi,%ebp,2)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
or     (%eax),%ah
and    %ah,(%eax)
sub    $0x2d202c46,%eax
sub    $0x746c6966,%eax
gs
jb     8056dcd <_IO_stdin_used+0x1329>
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
and    %dh,0x65(%edx)
popa
and    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
je     8056e06 <_IO_stdin_used+0x1362>
jb     8056dc3 <_IO_stdin_used+0x131f>
imul   $0x616d726f,0x66(%esi),%ebp
je     8056e15 <_IO_stdin_used+0x1371>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esi
dec    %ecx
dec    %esp
push   %esp
inc    %ebp
push   %edx
and    %bh,(%edx)
cmp    $0x73205b20,%eax
je     8056e30 <_IO_stdin_used+0x138c>
je     8056e36 <_IO_stdin_used+0x1392>
and    %dl,0x50(%ebx,%eax,2)
sub    $0x54415453,%eax
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %al,0x58(%ebp)
push   %eax
push   %edx
inc    %ebp
push   %ebx
push   %ebx
dec    %ecx
dec    %edi
dec    %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ch,(%edi)
jne    8056e66 <_IO_stdin_used+0x13c2>
jb     8056e24 <_IO_stdin_used+0x1380>
jae    8056e59 <_IO_stdin_used+0x13b5>
imul   $0x69637072,0x2f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
and    %ch,0x3e322070
das
fs
gs
jbe    8056e3b <_IO_stdin_used+0x1397>
outsb  %ds:(%esi),(%dx)
jne    8056e7b <_IO_stdin_used+0x13d7>
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %al,(%eax)
and    %dh,0x6b(%ebx)
cmp    $0x786c6c25,%eax
and    %ah,0x62(%ebx)
cmp    $0x786c6c25,%eax
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8056e9a <_IO_stdin_used+0x13f6>
jae    8056e69 <_IO_stdin_used+0x13c5>
xor    %bh,0x25(%eax)
xor    %bh,(%eax)
js     8056e33 <_IO_stdin_used+0x138f>
add    %dl,0x50(%ebx,%eax,2)
cmp    (%eax),%ah
and    %ah,(%eax)
and    $0x65282064,%eax
jae    8056eb6 <_IO_stdin_used+0x1412>
popa
bound  %esp,(%eax)
and    $0x63202c64,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8056eb3 <_IO_stdin_used+0x140f>
and    %ah,%fs:0x6f202c64
jb     8056ec7 <_IO_stdin_used+0x1423>
push   $0x64656e61
and    %ah,0x73202c64
jns    8056ed2 <_IO_stdin_used+0x142e>
jb     8056ecb <_IO_stdin_used+0x1427>
arpl   %si,0x20(%esi)
and    $0x74202c64,%eax
imul   $0x74696177,0x65(%ebp),%ebp
and    %ah,0x64252f64
sub    %ebp,(%eax,%eiz,1)
jo     8056eef <_IO_stdin_used+0x144b>
jb     8056ef6 <_IO_stdin_used+0x1452>
jae    8056ea4 <_IO_stdin_used+0x1400>
and    $0x54000a64,%eax
jb     8056eec <_IO_stdin_used+0x1448>
outsb  %ds:(%esi),(%dx)
jae    8056efe <_IO_stdin_used+0x145a>
outsl  %ds:(%esi),(%dx)
jb     8056f05 <_IO_stdin_used+0x1461>
and    %dl,0x74(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x50(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %ecx
push   %eax
jbe    8056ee0 <_IO_stdin_used+0x143c>
add    %al,(%eax)
and    $0x78252078,%eax
cmp    0x78252078,%ah
cmp    0x78252078,%ah
and    %ah,0x64252064
and    %ah,0x64252075
and    %ah,0x20786c6c
and    $0x64252064,%eax
and    %ah,0x64252064
and    %ah,0x5b252064
pop    %esi
or     0xa(%ebp),%bl
add    %al,(%eax)
add    %al,(%eax)
push   %edx
gs
popa
imul   $0x61656820,%fs:0x67(%esi),%ebp
fs
gs
jb     8056f17 <_IO_stdin_used+0x1473>
data16
jb     8056f69 <_IO_stdin_used+0x14c5>
insl   (%dx),%es:(%edi)
and    %ah,(%esp,%edx,2)
inc    %ebx
push   %eax
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
add    %al,(%eax)
add    %dl,0x6e(%ebp)
gs
js     8056f81 <_IO_stdin_used+0x14dd>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %al,0x4f(%ebp)
inc    %esi
and    %dh,0x65(%edx)
popa
imul   $0x43542420,%fs:0x67(%esi),%ebp
push   %eax
inc    %esp
dec    %ecx
inc    %ecx
inc    %edi
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
add    %al,(%eax)
add    %al,(%eax)
and    $0x78252078,%eax
cmp    0x2a252078,%ah
js     8056f7b <_IO_stdin_used+0x14d7>
and    $0x2520782a,%eax
sub    0x20(%eax),%bh
and    $0x2a252064,%eax
and    %ah,%fs:0x64252075
and    %ah,0x20786c6c
and    $0x5d0a5e5b,%eax
or     (%eax),%al
add    %al,(%eax)
inc    %ebp
jb     8056fd9 <_IO_stdin_used+0x1535>
outsl  %ds:(%esi),(%dx)
jb     8056fa4 <_IO_stdin_used+0x1500>
and    %ah,(%edx)
and    $0x64202273,%eax
outsl  %ds:(%esi),(%dx)
gs
jae    8056f95 <_IO_stdin_used+0x14f1>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8056f99 <_IO_stdin_used+0x14f5>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x6c,(%eax),%esp
imul   $0x70206120,0x65(%ebx),%ebp
outsl  %ds:(%esi),(%dx)
jb     8056ffd <_IO_stdin_used+0x1559>
or     %cs:(%eax),%al
inc    %ebp
jb     8057001 <_IO_stdin_used+0x155d>
outsl  %ds:(%esi),(%dx)
jb     8056fcc <_IO_stdin_used+0x1528>
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
gs
je     8056fbb <_IO_stdin_used+0x1517>
jo     805700f <_IO_stdin_used+0x156b>
imul   $0x7369,%gs:0x20(%eax),%di
and    %ah,0x78(%ebp)
jo     805700e <_IO_stdin_used+0x156a>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     805701a <_IO_stdin_used+0x1576>
gs
jb     8056fd5 <_IO_stdin_used+0x1531>
je     805701f <_IO_stdin_used+0x157b>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2e2273,%eax
add    %al,(%eax)
add    %al,(%eax)
jae    8057039 <_IO_stdin_used+0x1595>
cmp    (%eax),%ah
and    0x69202273,%ah
jae    8056ff0 <_IO_stdin_used+0x154c>
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
jae    8057049 <_IO_stdin_used+0x15a5>
arpl   %bp,0x65(%ebx)
je     8056fff <_IO_stdin_used+0x155b>
je     8057042 <_IO_stdin_used+0x159e>
bound  %ebp,0x20(%ebp,%eiz,2)
imul   $0x64000000,0x0(%edx,%ecx,1),%esp
push   $0x74656c61
jne    805706b <_IO_stdin_used+0x15c7>
js     8057064 <_IO_stdin_used+0x15c0>
jb     8057067 <_IO_stdin_used+0x15c3>
xor    $0x36,%al
xor    %dh,0x70(%ebx)
bound  %esp,0x3a(%esi)
insl   (%dx),%es:(%edi)
imul   $0x3a463a44,0x3a(%ecx),%eax
jbe    8057060 <_IO_stdin_used+0x15bc>
add    %al,(%eax)
jae    8057081 <_IO_stdin_used+0x15dd>
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     805703a <_IO_stdin_used+0x1596>
je     805707d <_IO_stdin_used+0x15d9>
bound  %ebp,0x73(%ebp,%eiz,2)
and    %dh,0x20(%edi,%ebp,2)
jae    805708e <_IO_stdin_used+0x15ea>
outsl  %ds:(%esi),(%dx)
ja     8057049 <_IO_stdin_used+0x15a5>
ja     8057094 <_IO_stdin_used+0x15f0>
je     8057095 <_IO_stdin_used+0x15f1>
and    %dh,0x75(%ebx)
arpl   %bp,0x20(%eax)
imul   $0x2e72,0x65(%esp,%esi,2),%bp
or     (%eax),%al
jae    80570b1 <_IO_stdin_used+0x160d>
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x6f742073,0x65(%ecx,%ebp,2),%ebp
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8057074 <_IO_stdin_used+0x15d0>
ja     80570bf <_IO_stdin_used+0x161b>
je     80570c0 <_IO_stdin_used+0x161c>
and    %dh,0x75(%ebx)
arpl   %bp,0x20(%eax)
imul   $0x2e72,0x65(%esp,%esi,2),%bp
or     (%eax),%al
add    %dh,0x73(%ebx)
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8057096 <_IO_stdin_used+0x15f2>
jae    80570ec <_IO_stdin_used+0x1648>
popa
je     80570e0 <_IO_stdin_used+0x163c>
jae    805709d <_IO_stdin_used+0x15f9>
je     80570ee <_IO_stdin_used+0x164a>
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80570a5 <_IO_stdin_used+0x1601>
ja     80570f0 <_IO_stdin_used+0x164c>
je     80570f1 <_IO_stdin_used+0x164d>
and    %dh,0x75(%ebx)
arpl   %bp,0x20(%eax)
imul   $0x2e72,0x65(%esp,%esi,2),%bp
or     (%eax),%al
jae    805710d <_IO_stdin_used+0x1669>
cmp    (%eax),%ah
je     8057101 <_IO_stdin_used+0x165d>
jo     8057104 <_IO_stdin_used+0x1660>
imul   $0x6d756420,0x67(%ecx),%esp
jo     80570c9 <_IO_stdin_used+0x1625>
jb     8057110 <_IO_stdin_used+0x166c>
jno    8057122 <_IO_stdin_used+0x167e>
gs
jae    8057124 <_IO_stdin_used+0x1680>
gs and %ah,%fs:%gs:0x6e(%ecx)
and    %ch,%fs:0x6f(%esi)
and    %dh,0x70(%ebx,%eiz,2)
and    %ch,0x6e(%ecx)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
je     805712b <_IO_stdin_used+0x1687>
jb     80570f6 <_IO_stdin_used+0x1652>
or     (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
jp     8057114 <_IO_stdin_used+0x1670>
add    %ah,(%esp,%esi,8)
dec    %edx
add    %ah,(%esp,%esi,2)
dec    %ecx
push   %esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi,%ebp,2)
and    %ch,0x69(%si)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6e(%ecx)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
je     8057153 <_IO_stdin_used+0x16af>
jb     80570f0 <_IO_stdin_used+0x164c>
fs
jo     8057162 <_IO_stdin_used+0x16be>
jb     8057169 <_IO_stdin_used+0x16c5>
add    %dh,0x70(%ebx)
outsl  %ds:(%esi),(%dx)
jb     805716f <_IO_stdin_used+0x16cb>
add    %ah,0x75(%ecx)
je     805716f <_IO_stdin_used+0x16cb>
bound  %ebp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x79(%ebx)
outsb  %ds:(%esi),(%dx)
je     805716c <_IO_stdin_used+0x16c8>
js     805712d <_IO_stdin_used+0x1689>
gs
jb     8057182 <_IO_stdin_used+0x16de>
outsl  %ds:(%esi),(%dx)
jb     8057113 <_IO_stdin_used+0x166f>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8057192 <_IO_stdin_used+0x16ee>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ah,%fs:%gs:(%eax)
push   %ebx
outsl  %ds:(%esi),(%dx)
jb     805719b <_IO_stdin_used+0x16f7>
jns    8057159 <_IO_stdin_used+0x16b5>
or     (%eax),%al
add    %al,(%eax)
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8057157 <_IO_stdin_used+0x16b3>
jo     805719a <_IO_stdin_used+0x16f6>
jb     80571ae <_IO_stdin_used+0x170a>
and    %ah,%gs:0x74(%ebx,%esi,2)
das
jae    80571b5 <_IO_stdin_used+0x1711>
arpl   %sp,(%eax)
popa
fs
fs
jb     80571af <_IO_stdin_used+0x170b>
jae    80571bf <_IO_stdin_used+0x171b>
or     %cs:(%eax),%al
add    %dh,0x73(%ebx)
cmp    (%eax),%ah
bound  %ebp,0x73(%ecx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x65(%edx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80571d4 <_IO_stdin_used+0x1730>
and    %ch,(%eax)
ja     80571cd <_IO_stdin_used+0x1729>
imul   $0x73726170,0x20(%ebp,%eiz,2),%ebp
imul   $0x6c696620,0x67(%esi),%ebp
je     80571db <_IO_stdin_used+0x1737>
jb     80571a1 <_IO_stdin_used+0x16fd>
cmp    (%eax),%ah
and    0x222173,%ah
fmuls  (%ebx)
add    $0x50bd808,%eax
or     %bl,%cl
syscall
or     %bl,%al
or     0x50bd308,%eax
or     %bh,0x5(%edi,%ecx,1)
or     %cl,-0x5cf7faf1(%esi)
syscall
or     %bh,(%ebx)
adc    %eax,0x5111a08
or     %bh,%cl
adc    %al,0x50f7c08
or     %bl,%bl
adc    %al,0x510a508
or     %dl,0x43080510(%eax)
adc    %al,0x5102208
or     %cl,-0x45f7faf1(%esi)
adc    %al,0x5107f08
or     %ah,0x5(%eax,%edx,1)
or     %al,(%edi)
adc    %al,0x50fec08
or     %bh,-0x32f7faf1(%eax)
syscall
or     %al,(%eax)
add    (%edx),%al
add    %eax,(%eax)
add    (%edx),%al
add    (%ebx),%eax
add    (%ebx),%eax
add    (%ebx),%eax
add    (%ebx),%eax
add    (%ebx),%eax
add    (%ebx),%eax
add    %eax,(%ebx)
add    (%ebx),%al
add    (%ebx),%al
add    %dl,0x17171615(,%edx,1)
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
pop    %ss
add    %al,(%eax)
add    (%eax),%al
incl   0xa090706(,%eax,1)
add    (%ebx),%ecx
or     $0xd,%al
push   %cs
add    (%ebx),%eax
add    (%edx),%edx
adc    (%ebx),%eax
incl   0x1c030706(,%eax,1)
sbb    $0xe0d0c0b,%eax
add    (%ebx),%eax
add    (%edx),%edx
add    $0x5,%al
push   %es
pop    %es
add    (%ebx),%eax
add    (%ebx),%ecx
add    0xffff030e,%ecx
adc    -0xf8fa(,%eax,1),%al
decl   (%ebx)
(bad)
decl   (%esi)
(bad)
(bad)
call   *(%edx)
add    $0x5,%al
push   %es
pop    %es
(bad)
(bad)
decl   (%ebx)
(bad)
decl   (%esi)
or     %cl,(%ecx)
or     (%edx),%dl
or     %cl,(%ecx)
or     (%edi),%cl
adc    %dl,(%ecx)
decl   (%edi)
adc    %dl,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ebx)
add    (%eax),%eax
add    $0x5,%al
push   %es
pop    %es
sbb    (%ebx),%bl
or     $0x8,%al
sbb    $0x1d,%al
or     %ecx,0x2b0a201f
and    %eax,(%eax)
add    $0x5,%al
push   %es
pop    %es
and    0x91d1c08(,%ebp,1),%ch
and    0x605040a(,%eiz,1),%esp
pop    %es
es
daa
sub    %cl,(%eax)
sub    %ebx,0x2a09
or     0x706(,%eax,1),%al
add    %cl,(%eax)
add    %al,(%eax)
or     %eax,(%eax)
add    %al,(%eax)
or     0x706(,%eax,1),%al
add    %cl,(%eax)
add    %al,(%eax)
decl   (%esi)
movups (%edx),%xmm1
adc    $0x15,%al
push   %ss
adc    %edx,(%edx)
adc    (%eax),%eax
pop    %ss
sbb    %bl,(%ecx)
incl   (%ecx)
add    (%esi),%bl
std
std
std
incb   (%eax)
add    $0x0,%al
add    (%ecx),%eax
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%edx)
add    $0x6,%eax
add    %dl,(%edi)
add    %al,(%eax)
add    %dl,0x90c0708
or     (%ebx),%cl
push   %cs
or     $0x11100f12,%eax
sbb    %dl,(%esi,%edx,1)
add    %al,(%eax)
std
add    %ebp,(%edi)
std
push   %es
or     0x49(%ebp),%eax
std
das
das
adc    %edi,%ebp
std
or     $0xd,%al
adc    %dl,(%esi)
sbb    $0x26251f1e,%eax
daa
sub    %ebp,(%esi,%edi,1)
ljmp   *(%edi)
das
adc    %edi,%ebp
std
std
std
std
std
std
std
std
std
std
std
std
and    %ch,(%edi)
add    %al,(%eax)
add    %al,(%edx)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%esi),%cl
add    (%edx),%al
add    (%edx),%al
or     $0x2131202,%eax
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%eax),%dl
adc    %ecx,(%edi)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx,%eax,1),%cl
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    %eax,(%edx)
add    0x9080706(,%eax,1),%eax
or     (%ebx),%cl
imul   $0x66690064,0x25(%esi),%esp
and    $0x61430075,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80574bc <_IO_stdin_used+0x1a18>
jae    8057503 <_IO_stdin_used+0x1a5f>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6d(%ebp,%esi,2)
jo     80574c6 <_IO_stdin_used+0x1a22>
jb     805750d <_IO_stdin_used+0x1a69>
jno    805751f <_IO_stdin_used+0x1a7b>
gs
jae    8057521 <_IO_stdin_used+0x1a7d>
add    %al,0x6d(%ebp,%esi,2)
jo     80574d3 <_IO_stdin_used+0x1a2f>
je     805751a <_IO_stdin_used+0x1a76>
jb     8057524 <_IO_stdin_used+0x1a80>
imul   $0xa646574,0x61(%esi),%ebp
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80574e6 <_IO_stdin_used+0x1a42>
outsl  %ds:(%esi),(%dx)
jo     805752e <_IO_stdin_used+0x1a8a>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
je     805753b <_IO_stdin_used+0x1a97>
imul   $0x636f7320,0x6b(%esi),%ebp
imul   $0x0,0x74(%ebp),%esp
push   %ebx
dec    %edi
pop    %edi
push   %ebx
dec    %esi
inc    %esp
inc    %edx
push   %ebp
inc    %esi
add    %dl,0x4f(%ebx)
pop    %edi
push   %edx
inc    %ebx
push   %esi
inc    %edx
push   %ebp
inc    %esi
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8057515 <_IO_stdin_used+0x1a71>
bound  %ebp,0x6e(%ecx)
and    %ch,%fs:0x65(%esi)
je     805756a <_IO_stdin_used+0x1ac6>
imul   $0x636f7320,0x6b(%esi),%ebp
imul   $0x0,0x74(%ebp),%esp
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8057530 <_IO_stdin_used+0x1a8c>
addr16
gs
je     8057587 <_IO_stdin_used+0x1ae3>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %dl,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x64(%bx,%di)
fs
jb     805758c <_IO_stdin_used+0x1ae8>
jae    805759c <_IO_stdin_used+0x1af8>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 8057598 <_IO_stdin_used+0x1af4>
and    %ah,0x57000a64
jb     80575a7 <_IO_stdin_used+0x1b03>
outsb  %ds:(%esi),(%dx)
and    %ah,0x64(%bx,%di)
fs
jb     80575a5 <_IO_stdin_used+0x1b01>
jae    80575b5 <_IO_stdin_used+0x1b11>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0xa6425,0x20(%ecx,%edi,2),%ebp
push   %edx
push   %esp
dec    %esi
inc    %ebp
push   %esp
dec    %esp
dec    %ecx
dec    %esi
dec    %ebx
and    %ah,0x6e(%ecx)
jae    80575d3 <_IO_stdin_used+0x1b2f>
gs
jb     80575d2 <_IO_stdin_used+0x1b2e>
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8057587 <_IO_stdin_used+0x1ae3>
je     80575ca <_IO_stdin_used+0x1b26>
insb   (%dx),%es:(%edi)
imul   $0x74,(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
gs
je     80575e1 <_IO_stdin_used+0x1b3d>
imul   $0x6e657300,0x6b(%esi),%ebp
fs
gs
jb     80575a0 <_IO_stdin_used+0x1afc>
popa
fs
fs
jb     80575ea <_IO_stdin_used+0x1b46>
jae    80575fa <_IO_stdin_used+0x1b56>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 80575f6 <_IO_stdin_used+0x1b52>
and    %bh,0x6425203d
or     (%eax),%al
push   %esp
jb     805760e <_IO_stdin_used+0x1b6a>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs and %ch,%fs:%gs:0x65(%ebp)
jae    8057617 <_IO_stdin_used+0x1b73>
popa
or     %gs:(%bx,%si),%al
and    %esp,(%ecx)
and    %ebp,0x61(%ebp)
insb   (%dx),%es:(%edi)
outsw  %ds:(%esi),(%dx)
jb     8057620 <_IO_stdin_used+0x1b7c>
gs and %ch,%fs:%gs:0x65(%ebp)
jae    805762d <_IO_stdin_used+0x1b89>
popa
cmp    %gs:(%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0xa6425,%eax
push   %edx
push   %esp
dec    %esi
inc    %ebp
push   %esp
dec    %esp
dec    %ecx
dec    %esi
dec    %ebx
and    %ah,0x6e(%ecx)
jae    805764c <_IO_stdin_used+0x1ba8>
gs
jb     805764b <_IO_stdin_used+0x1ba7>
cmp    (%eax),%ah
and    $0x55000a73,%eax
outsb  %ds:(%esi),(%dx)
gs
js     8057653 <_IO_stdin_used+0x1baf>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %dh,0x65(%edx)
jo     8057659 <_IO_stdin_used+0x1bb5>
jns    8057610 <_IO_stdin_used+0x1b6c>
and    %esp,(%ecx)
or     (%eax),%al
push   %ebx
outsb  %gs:(%esi),(%dx)
fs
gs
jb     805761a <_IO_stdin_used+0x1b76>
popa
fs
fs
jb     8057664 <_IO_stdin_used+0x1bc0>
jae    8057674 <_IO_stdin_used+0x1bd0>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 8057670 <_IO_stdin_used+0x1bcc>
and    %bh,0x6425203d
or     (%eax),%al
jb     8057686 <_IO_stdin_used+0x1be2>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     8057687 <_IO_stdin_used+0x1be3>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x6620,0x3a(%ebp,%eiz,2),%bp
jb     8057688 <_IO_stdin_used+0x1be4>
popa
add    %ah,%fs:(%ecx)
and    %esp,(%ecx)
inc    %esp
imul   $0x2074,%gs:0x69(%ebx),%sp
and    $0x72202c64,%eax
je     8057699 <_IO_stdin_used+0x1bf5>
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0xa6425,%eax
add    %al,(%eax)
add    %ch,0x65(%esi)
je     80576b4 <_IO_stdin_used+0x1c10>
imul   $0x63657220,0x6b(%esi),%ebp
imul   $0x72726520,%gs:0x65(%esi),%esi
outsl  %ds:(%esi),(%dx)
jb     805767a <_IO_stdin_used+0x1bd6>
and    $0x25282073,%eax
sub    %ecx,%fs:(%edx)
add    %al,(%eax)
inc    %esp
jne    80576d4 <_IO_stdin_used+0x1c30>
jo     8057689 <_IO_stdin_used+0x1be5>
ja     80576cc <_IO_stdin_used+0x1c28>
jae    805768d <_IO_stdin_used+0x1be9>
imul   $0x75727265,0x74(%esi),%ebp
jo     80576ea <_IO_stdin_used+0x1c46>
gs and %ah,%fs:%gs:0x6e(%ecx)
and    %ch,%fs:0x61(%ebp)
jns    80576a1 <_IO_stdin_used+0x1bfd>
bound  %esp,0x20(%ebp)
imul   $0x69736e6f,0x63(%esi),%ebp
jae    8057701 <_IO_stdin_used+0x1c5d>
outsb  %gs:(%esi),(%dx)
je     80576bf <_IO_stdin_used+0x1c1b>
or     (%eax),%al
add    %ah,(%ecx)
and    %esp,(%ecx)
insl   (%dx),%es:(%edi)
popa
insb   (%dx),%es:(%edi)
outsw  %ds:(%esi),(%dx)
jb     805770b <_IO_stdin_used+0x1c67>
gs and %ch,%fs:%gs:0x65(%ebp)
jae    8057718 <_IO_stdin_used+0x1c74>
popa
cmp    %gs:(%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0x40206425,%eax
and    $0xa756c,%eax
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    $0x6d6f7266,%eax
pop    %edi
imul   $0x7420,0x3a(%ebp,%eiz,2),%bp
jb     8057740 <_IO_stdin_used+0x1c9c>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs and %ch,%fs:%gs:0x65(%ebp)
jae    8057749 <_IO_stdin_used+0x1ca5>
popa
or     %gs:(%bx,%si),%al
add    %ah,0x64(%ecx)
fs
popa
je     8057756 <_IO_stdin_used+0x1cb2>
jb     8057743 <_IO_stdin_used+0x1c9f>
insb   (%dx),%es:(%edi)
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
cmp    (%eax),%ah
insl   (%dx),%es:(%edi)
gs
jae    8057764 <_IO_stdin_used+0x1cc0>
popa
and    %ah,%gs:0x78(%di)
arpl   %sp,0x65(%ebp)
fs gs and %ah,%fs:%gs:0x6f(%edx)
jne    8057770 <_IO_stdin_used+0x1ccc>
and    %ch,%fs:0x66(%edi)
and    %ah,0xa64
popa
fs
fs
jb     8057772 <_IO_stdin_used+0x1cce>
ja     8057772 <_IO_stdin_used+0x1cce>
insb   (%dx),%es:(%edi)
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
cmp    (%eax),%ah
insl   (%dx),%es:(%edi)
gs
jae    8057793 <_IO_stdin_used+0x1cef>
popa
and    %ah,%gs:0x78(%di)
arpl   %sp,0x65(%ebp)
fs gs and %ah,%fs:%gs:0x6f(%edx)
jne    805779f <_IO_stdin_used+0x1cfb>
and    %ch,%fs:0x66(%edi)
and    %ah,0xa64
add    %dh,0x74(%edx)
popa
pop    %edi
popa
fs
fs
popa
je     80577ba <_IO_stdin_used+0x1d16>
jb     805777b <_IO_stdin_used+0x1cd7>
xor    (%edx),%bh
and    %al,0x72(%ebp)
jb     80577be <_IO_stdin_used+0x1d1a>
jb     8057772 <_IO_stdin_used+0x1cce>
and    %ch,0x61(%ebp)
js     8057776 <_IO_stdin_used+0x1cd2>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80577c1 <_IO_stdin_used+0x1d1d>
and    %ah,%fs:0x6f(%edx)
jne    80577d0 <_IO_stdin_used+0x1d2c>
and    %ah,%fs:0x78652064
arpl   %sp,0x65(%ebp)
fs gs or %fs:%gs:(%eax),%al
add    %al,(%eax)
add    %dh,0x74(%edx)
popa
pop    %edi
popa
fs
fs
popa
je     80577f2 <_IO_stdin_used+0x1d4e>
jb     80577df <_IO_stdin_used+0x1d3b>
insb   (%dx),%es:(%edi)
cmp    (%eax),%ah
inc    %ebp
jb     80577f8 <_IO_stdin_used+0x1d54>
outsl  %ds:(%esi),(%dx)
jb     80577aa <_IO_stdin_used+0x1d06>
and    %ch,0x61(%ebp)
js     80577ae <_IO_stdin_used+0x1d0a>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80577f9 <_IO_stdin_used+0x1d55>
and    %ah,%fs:0x6f(%edx)
jne    8057808 <_IO_stdin_used+0x1d64>
and    %ah,%fs:0x78652064
arpl   %sp,0x65(%ebp)
fs gs or %fs:%gs:(%eax),%al
insl   (%dx),%es:(%edi)
jae    8057811 <_IO_stdin_used+0x1d6d>
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
jae    8057816 <_IO_stdin_used+0x1d72>
arpl   %si,0x0(%ebx)
fs
gs
popaw
jne    8057826 <_IO_stdin_used+0x1d82>
je     80577bc <_IO_stdin_used+0x1d18>
dec    %eax
pop    %edx
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %eax
push   %ebx
inc    %ebx
dec    %eax
inc    %ebp
inc    %esp
add    %ah,0x656e2f73
je     8057805 <_IO_stdin_used+0x1d61>
jo     805784b <_IO_stdin_used+0x1da7>
arpl   %bp,0x65(%eax)
add    %ah,%fs:0x7838302a
and    $0x7838302a,%eax
and    $0x25783830,%eax
xor    %bh,(%eax)
js     80577f0 <_IO_stdin_used+0x1d4c>
aas
aas
aas
add    %ah,0x783230
push   %esp
imul   $0x6d617473,0x65(%ebp),%ebp
jo     805783d <_IO_stdin_used+0x1d99>
and    %ah,0x6c252073
and    %dh,%fs:0x73(%ebp)
arpl   %cx,%gs:(%edx)
add    %cl,0x69(%ebp)
jae    8057888 <_IO_stdin_used+0x1de4>
imul   $0x6e6f6320,0x67(%esi),%ebp
je     8057887 <_IO_stdin_used+0x1de3>
outsb  %ds:(%esi),(%dx)
jne    8057882 <_IO_stdin_used+0x1dde>
je     805788c <_IO_stdin_used+0x1de8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%ecx,%ebp,2)
or     %gs:(%eax),%al
dec    %edi
jne    80578a3 <_IO_stdin_used+0x1dff>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80578b2 <_IO_stdin_used+0x1e0e>
or     (%eax),%al
pop    %esp
or     (%eax),%al
add    %al,(%eax)
inc    %ebp
jb     80578b5 <_IO_stdin_used+0x1e11>
outsl  %ds:(%esi),(%dx)
jb     8057880 <_IO_stdin_used+0x1ddc>
and    %ah,(%edx)
and    $0x6d202273,%eax
popa
jns    8057870 <_IO_stdin_used+0x1dcc>
bound  %esp,0x20(%ebp)
imul   $0x64612074,0x65(%esi),%ebp
fs
jb     80578c2 <_IO_stdin_used+0x1e1e>
jae    80578d2 <_IO_stdin_used+0x1e2e>
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     805788f <_IO_stdin_used+0x1deb>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80578da <_IO_stdin_used+0x1e36>
and    %ch,%fs:0x6e(%ecx)
and    %dh,0x69(%eax,%ebp,2)
jae    805789f <_IO_stdin_used+0x1dfb>
arpl   %bp,0x6e(%edi)
je     80578e9 <_IO_stdin_used+0x1e45>
js     80578fa <_IO_stdin_used+0x1e56>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     80578ff <_IO_stdin_used+0x1e5b>
jb     80578cc <_IO_stdin_used+0x1e28>
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
gs
je     80578bb <_IO_stdin_used+0x1e17>
popa
fs
fs
jb     8057905 <_IO_stdin_used+0x1e61>
jae    8057915 <_IO_stdin_used+0x1e71>
and    %ch,0x73(%ecx)
and    %ah,0x78(%ebp)
jo     805790f <_IO_stdin_used+0x1e6b>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     805791b <_IO_stdin_used+0x1e77>
gs
jb     80578d6 <_IO_stdin_used+0x1e32>
je     8057920 <_IO_stdin_used+0x1e7c>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2e2273,%eax
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     8057937 <_IO_stdin_used+0x1e93>
jb     8057904 <_IO_stdin_used+0x1e60>
and    %ah,(%edx)
and    $0x6d202273,%eax
popa
jns    80578f4 <_IO_stdin_used+0x1e50>
bound  %esp,0x20(%ebp)
imul   $0x72702074,0x65(%esi),%ebp
imul   $0x6220,%gs:0x2c(%eax),%di
jne    805795b <_IO_stdin_used+0x1eb7>
and    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     8057912 <_IO_stdin_used+0x1e6e>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805795d <_IO_stdin_used+0x1eb9>
and    %ch,%fs:0x6e(%ecx)
and    %dh,0x69(%eax,%ebp,2)
jae    8057922 <_IO_stdin_used+0x1e7e>
arpl   %bp,0x6e(%edi)
je     805796c <_IO_stdin_used+0x1ec8>
js     805797d <_IO_stdin_used+0x1ed9>
or     %cs:(%eax),%al
inc    %ebp
jb     8057981 <_IO_stdin_used+0x1edd>
outsl  %ds:(%esi),(%dx)
jb     805794c <_IO_stdin_used+0x1ea8>
and    %ah,0x6e(%ecx)
and    %cl,0x50(%ecx)
and    %ah,0x64(%ecx)
fs
jb     8057983 <_IO_stdin_used+0x1edf>
jae    8057993 <_IO_stdin_used+0x1eef>
and    %ch,0x73(%ecx)
and    %ah,0x78(%ebp)
jo     805798d <_IO_stdin_used+0x1ee9>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     8057999 <_IO_stdin_used+0x1ef5>
gs
jb     8057954 <_IO_stdin_used+0x1eb0>
je     805799e <_IO_stdin_used+0x1efa>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ch,%gs:0x73(%ecx)
and    %ch,0x6f(%esi)
je     8057974 <_IO_stdin_used+0x1ed0>
arpl   %bp,0x6d(%edi)
jo     80579c5 <_IO_stdin_used+0x1f21>
gs
je     80579c1 <_IO_stdin_used+0x1f1d>
and    %dl,%cs:0x79(%edx,%esi,2)
and    %ch,0x70(%edi)
je     80579cf <_IO_stdin_used+0x1f2b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
push   $0x22706c65
or     (%eax),%al
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     80579e7 <_IO_stdin_used+0x1f43>
jb     80579b4 <_IO_stdin_used+0x1f10>
and    %ah,0x72(%ecx)
addr16 jne 80579ed <_IO_stdin_used+0x1f49>
outsb  %gs:(%esi),(%dx)
je     80579a4 <_IO_stdin_used+0x1f00>
and    0x69202273,%ah
jae    80579ac <_IO_stdin_used+0x1f08>
jb     80579f3 <_IO_stdin_used+0x1f4f>
jno    8057a05 <_IO_stdin_used+0x1f61>
imul   $0xa64,0x65(%edx),%esi
add    %al,0x72(%ebp)
jb     8057a0b <_IO_stdin_used+0x1f67>
jb     80579d8 <_IO_stdin_used+0x1f34>
and    %ah,0x72(%ecx)
addr16 jne 8057a11 <_IO_stdin_used+0x1f6d>
outsb  %gs:(%esi),(%dx)
je     80579c8 <_IO_stdin_used+0x1f24>
and    0x69202273,%ah
jae    80579d0 <_IO_stdin_used+0x1f2c>
ja     8057a24 <_IO_stdin_used+0x1f80>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
and    $0xa73,%eax
inc    %ebp
jb     8057a31 <_IO_stdin_used+0x1f8d>
outsl  %ds:(%esi),(%dx)
jb     80579fc <_IO_stdin_used+0x1f58>
and    %ah,0x70(%ebp,%esi,2)
insb   (%dx),%es:(%edi)
imul   $0x22206574,0x61(%ebx),%esp
and    $0x203a2273,%eax
and    0x69202273,%ah
jae    80579fb <_IO_stdin_used+0x1f57>
je     8057a45 <_IO_stdin_used+0x1fa1>
and    %dh,%gs:0x65(%ebx)
arpl   %bp,0x6e(%edi)
and    %dh,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8057a50 <_IO_stdin_used+0x1fac>
or     %cs:(%eax),%al
add    %al,(%eax)
inc    %ebp
jb     8057a65 <_IO_stdin_used+0x1fc1>
outsl  %ds:(%esi),(%dx)
jb     8057a30 <_IO_stdin_used+0x1f8c>
and    %ah,0x69(%ebp)
je     8057a63 <_IO_stdin_used+0x1fbf>
gs
jb     8057a1e <_IO_stdin_used+0x1f7a>
and    0x69202273,%ah
jae    8057a26 <_IO_stdin_used+0x1f82>
fs
jne    8057a79 <_IO_stdin_used+0x1fd5>
insb   (%dx),%es:(%edi)
imul   $0x202c6574,0x61(%ebx),%esp
outsl  %ds:(%esi),(%dx)
jb     8057a34 <_IO_stdin_used+0x1f90>
and    0x69202273,%ah
jae    8057a3c <_IO_stdin_used+0x1f98>
popa
and    %ah,0x61(%edi)
jb     8057a84 <_IO_stdin_used+0x1fe0>
popa
gs or  %cs:%gs:(%bx,%si),%al
push   %esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    8057a51 <_IO_stdin_used+0x1fad>
popa
jb     8057a9b <_IO_stdin_used+0x1ff7>
jne    8057aa3 <_IO_stdin_used+0x1fff>
outsb  %gs:(%esi),(%dx)
je     8057aad <_IO_stdin_used+0x2009>
and    %dh,0x20(%edi,%ebp,2)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
or     %fs:(%eax),%al
add    %ah,(%eax)
or     %ecx,0xa
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
out    %eax,(%dx)
jg     8057ab4 <_IO_stdin_used+0x2010>
and    $0x6c005d64,%eax
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8057a62 <_IO_stdin_used+0x1fbe>
imul   $0x717062,0x0(%eax),%esi
imul   $0x70757065,0x65(%ebp),%esp
add    %ch,0x65(%ecx)
gs
gs
jo     8057aec <_IO_stdin_used+0x2048>
jo     8057ada <_IO_stdin_used+0x2036>
je     8057a7b <_IO_stdin_used+0x1fd7>
fs arpl %ax,%fs:%gs:(%eax)
outsb  %fs:(%esi),(%dx)
popa
pop    %edi
fs
insb   (%dx),%es:(%edi)
add    %ah,0x61(%esi,%ebp,2)
pop    %edi
jb     8057aef <_IO_stdin_used+0x204b>
add    %ah,0x61(%esi,%ebp,2)
pop    %edi
jb     8057b07 <_IO_stdin_used+0x2063>
add    %ch,0x74(%ecx,%eiz,2)
add    %ah,0x75(%ebx)
jae    8057b10 <_IO_stdin_used+0x206c>
add    %dh,0x63(%ebx)
popa
add    %dh,0x61(%edx)
jb     8057b15 <_IO_stdin_used+0x2071>
add    %ah,0x74(%ecx)
popa
insb   (%dx),%es:(%edi)
imul   $0x61,(%eax),%eax
popa
jb     8057b20 <_IO_stdin_used+0x207c>
add    %ch,0x70(%ecx)
js     8057ab5 <_IO_stdin_used+0x2011>
jo     8057b27 <_IO_stdin_used+0x2083>
jo     8057b18 <_IO_stdin_used+0x2074>
imul   $0x70707000,%fs:0x63(%ebx),%esi
pop    %edi
jae    8057b29 <_IO_stdin_used+0x2085>
jae    8057ac6 <_IO_stdin_used+0x2022>
popa
je     8057b36 <_IO_stdin_used+0x2092>
insl   (%dx),%es:(%edi)
jo     8057b3b <_IO_stdin_used+0x2097>
popa
add    %ah,0x74(%ecx)
insl   (%dx),%es:(%edi)
popaw
je     8057b3a <_IO_stdin_used+0x2096>
add    %bh,(%eax)
xor    %dh,(%edx)
pop    %edi
xor    (%eax),%eax
popa
js     8057b11 <_IO_stdin_used+0x206d>
xor    $0x616e7300,%eax
jo     8057ae6 <_IO_stdin_used+0x2042>
fs arpl %bp,%fs:0x70(%ebp)
add    %dh,0x61(%edi)
outsb  %ds:(%esi),(%dx)
pop    %edi
jo     8057b62 <_IO_stdin_used+0x20be>
jo     8057af4 <_IO_stdin_used+0x2050>
jo     8057b66 <_IO_stdin_used+0x20c2>
jo     8057b57 <_IO_stdin_used+0x20b3>
insl   (%dx),%es:(%edi)
jo     8057afb <_IO_stdin_used+0x2057>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
je     8057b63 <_IO_stdin_used+0x20bf>
insb   (%dx),%es:(%edi)
imul   $0x63,(%eax),%eax
popa
outsb  %ds:(%esi),(%dx)
add    %dh,0x70(%eax)
jo     8057b81 <_IO_stdin_used+0x20dd>
popa
insb   (%dx),%es:(%edi)
imul   $0x74,(%eax),%eax
jb     8057b73 <_IO_stdin_used+0x20cf>
cmp    %dh,(%eax)
xor    0x32(%edi),%bl
add    %ch,0x6f(%ebp)
bound  %ebp,0x74(%ecx)
gs
js     8057b22 <_IO_stdin_used+0x207e>
arpl   %bp,0x6e(%edi)
je     8057b99 <_IO_stdin_used+0x20f5>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ch,0x72(%ecx)
fs
popa
add    %ah,0x63(%ebp)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
je     8057b36 <_IO_stdin_used+0x2092>
je     8057ba1 <_IO_stdin_used+0x20fd>
jo     8057b9d <_IO_stdin_used+0x20f9>
add    %ah,0x6f(%ecx)
add    %bh,%gs:(%eax)
xor    %dh,(%edx)
xor    %edx,%cs:0x0(%ecx)
cmp    %dh,(%eax)
xor    (%esi),%ch
xor    %esp,0x64(%ecx)
add    %cl,0x44(%esp,%ecx,2)
push   %eax
add    %ch,0x70(%ecx)
jo     8057bc9 <_IO_stdin_used+0x2125>
outsl  %ds:(%esi),(%dx)
je     8057bc9 <_IO_stdin_used+0x2125>
.byte 0x2d
.byte 0x25
fs
add    %ebx,(%ebx)
add    (%ebx),%edi
lock add (%eax),%eax
add    %bh,0x0(%ebp)
add    %al,(%eax)
loopne 8057b82 <_IO_stdin_used+0x20de>
(bad)
decl   (%esp,%eax,1)
add    %al,(%eax)
mov    0xb0ffff1a,%al
or     $0x2b400000,%eax
(bad)
pushl  (%eax)
add    $0x0,%al
add    %al,0x50ffff2b(%eax)
add    $0x0,%al
add    %dl,%al
sub    $0x490ffff,%eax
add    %al,(%eax)
subb   $0xff,(%edi)
(bad)
faddl  (%eax,%eax,1)
add    %dh,(%eax)
xor    %bh,%bh
incl   0x34500000(,%eax,1)
(bad)
decl   0x5(%eax)
add    %al,(%eax)
nop
cmp    %bh,%bh
(bad)
cld
add    $0x38d00000,%eax
(bad)
ljmp   *(%eax)
push   %es
add    %al,(%eax)
jo     8057bf7 <_IO_stdin_used+0x2153>
(bad)
lcall  *0x6(%eax)
add    %al,(%eax)
and    %bh,0x69cffff
add    %al,(%eax)
pusha
ds
(bad)
push   %esp
push   %es
add    %al,(%eax)
mov    $0x3f,%al
(bad)
jmp    *(%eax)
pop    %es
add    %al,(%eax)
lock aas
(bad)
pushl  (%edi,%eax,1)
add    %al,(%eax)
xor    %al,-0x1(%eax)
decl   0x7(%eax)
add    %al,(%eax)
mov    $0x41,%al
(bad)
decl   0x42000000(%edi,%eax,1)
(bad)
ljmp   *0x42c00000(%edi,%eax,1)
(bad)
jmp    *%esp
pop    %es
add    %al,(%eax)
jo     8057c4b <_IO_stdin_used+0x21a7>
(bad)
decl   0x0(%eax,%ecx,1)
add    %dl,%al
dec    %ecx
(bad)
call   *-0x2ffffff8(%eax)
dec    %edx
(bad)
call   *%eax
or     %al,(%eax)
add    %ah,%al
push   %eax
(bad)
incl   (%ecx,%ecx,1)
add    %al,(%eax)
adcb   $0xff,-0x1(%edx)
dec    %eax
or     %eax,(%eax)
add    %dl,0x55(%eax)
(bad)
incl   -0x2ffffff7(%eax)
push   %edi
(bad)
inc    %esp
or     %eax,(%eax)
add    %al,%al
pop    %ecx
(bad)
incl   (%edx,%ecx,1)
add    %al,(%eax)
adc    %bl,-0x1(%ebx)
incl   0x0(%edx,%ecx,1)
add    %dl,(%eax)
pop    %esp
(bad)
incl   0x5ce00000(%edx,%ecx,1)
(bad)
inc    %esp
or     (%eax),%al
add    %dl,%al
arpl   %di,%di
decl   (%eax)
or     (%eax),%eax
add    %dl,0x4cffff67(%eax)
or     (%eax),%eax
add    %dh,(%eax)
imul   $0xb84ff,%edi,%edi
add    %dl,(%eax)
jo     8057c76 <_IO_stdin_used+0x21d2>
dec    %eax
or     (%eax),%eax
add    %ah,%al
jno    8057c7e <_IO_stdin_used+0x21da>
jmp    *(%eax)
or     $0x0,%al
add    %dl,(%eax)
jbe    8057c86 <_IO_stdin_used+0x21e2>
jmp    *0x0(%esp,%ecx,1)
add    %dl,-0x57000088(%eax)
or     $0x0,%al
add    %dh,%al
jnp    8057c96 <_IO_stdin_used+0x21f2>
(bad)
in     (%dx),%al
or     $0x0,%al
add    %dh,0x30ffff7e(%eax)
or     $0x87f00000,%eax
(bad)
pushl  0xd(%eax)
add    %al,(%eax)
nop
mov    %edi,%?
jmp    *%eax
or     $0x8ec00000,%eax
(bad)
decl   (%esi,%ecx,1)
add    %al,(%eax)
nop
lcall  $0x0,$0xe50ffff
add    %bl,0xe6cffff(%ebx)
add    %al,(%eax)
sbbb   $0x0,0xedcffff(%ebp)
add    %dh,(%eax)
sahf
(bad)
lcall  *(%eax)
sldt   (%eax)
pusha
sahf
(bad)
(bad)
cmp    %cl,(%edi)
add    %al,(%eax)
mov    0x4cffff9e,%al
sldt   (%eax)
lock sahf
(bad)
jmp    *0xf(%eax)
add    %al,(%eax)
mov    $0x9f,%al
(bad)
lcall  *0x7100000f(%eax)
mov    0xfc8ffff,%al
add    %al,(%eax)
andb   $0x0,0xfdcffff(%eax)
add    %dh,0x8ffffa0(%eax)
adc    %al,(%eax)
add    %ah,(%eax)
mov    %eax,0x1054ffff
add    %al,(%eax)
push   %eax
mov    %eax,0x1074ffff
add    %al,(%eax)
lock mov %eax,0x10a8ffff
add    %al,(%eax)
xor    %ah,0x10c8ff(%edi,%edi,8)
add    %dh,-0x5c(%eax)
(bad)
(bad)
call   b8057d4d <optarg+0xafffcb49>
movsl  %ds:(%esi),%es:(%edi)
(bad)
jmp    *(%eax)
adc    %eax,(%eax)
add    %dl,0x44ffffa6(%eax)
adc    %eax,(%eax)
add    %dl,-0x56(%eax)
(bad)
decl   -0x5fffffef(%eax)
stos   %al,%es:(%edi)
(bad)
ljmp   *-0x50c00000(%ecx,%edx,1)
(bad)
push   %eax
adc    %eax,(%eax)
add    %al,-0x4e(%eax)
(bad)
pushl  (%edx,%edx,1)
add    %al,(%eax)
and    %dh,0x1278ff(%edi,%edi,8)
add    %dl,%al
mov    $0xff,%ah
(bad)
mov    $0x10000012,%eax
mov    $0xff,%ch
(bad)
fcoms  (%edx)
add    %al,(%eax)
pusha
mov    $0xff,%ch
(bad)
cld
adc    (%eax),%al
add    %dh,0x20ffffb5(%eax)
adc    (%eax),%eax
add    %dh,%al
mov    $0xff,%ch
incl   0x13(%eax)
add    %al,(%eax)
inc    %eax
mov    $0xff,%dh
jmp    *0x0(%ebx,%edx,1)
add    %dl,-0x6f00004a(%eax)
adc    (%eax),%eax
add    %dl,-0x49(%eax)
(bad)
call   *%eax
adc    (%eax),%eax
add    %ah,-0x3000049(%eax)
adc    (%eax),%eax
add    %al,%al
mov    $0xff,%bh
lcall  *(%eax)
adc    $0x0,%al
add    %dh,(%eax)
mov    $0x1454ffff,%eax
add    %al,(%eax)
cmpb   $0x0,0x1480ffff(%eax)
add    %dl,(%eax)
mov    $0x14a4ffff,%ecx
add    %al,(%eax)
sarb   $0x0,0x14dcffff(%ecx)
add    %al,%al
mov    $0x1518ffff,%edx
add    %al,(%eax)
add    %bh,0x1538ffff(%ebx)
add    %al,(%eax)
loopne 8057db1 <_IO_stdin_used+0x230d>
(bad)
call   *0x70000015(%eax)
mov    $0x15c0ffff,%esp
add    %al,(%eax)
add    %bh,0x1608ffff(%ebp)
add    %al,(%eax)
xor    %bh,0x161cffff(%ebp)
add    %al,(%eax)
mov    $0xbd,%al
(bad)
jmp    *0x0(%esi,%edx,1)
add    %ah,(%eax)
sar    $0xff,%bh
mov    $0xb0000016,%esp
sar    $0xff,%bh
adc    %dl,(%edi)
add    %al,(%eax)
xor    %al,%cl
(bad)
lcall  *0x17(%eax)
add    %al,(%eax)
mov    0x90ffffc1,%al
pop    %ss
add    %al,(%eax)
adc    %al,%dl
(bad)
dec    %eax
pop    %ss
add    %al,(%eax)
mov    0x10ffffc2,%al
sbb    %al,(%eax)
add    %al,-0x3d(%eax)
(bad)
lcall  *0x18(%eax)
add    %al,(%eax)
loopne 8057e19 <_IO_stdin_used+0x2375>
(bad)
jmp    *0x70000018(%eax)
(bad)
(bad)
jmp    *%eax
sbb    %al,(%eax)
add    %dh,0x38ffffc8(%eax)
sbb    %eax,(%eax)
add    %dh,(%eax)
leave
(bad)
jmp    *0x0(%ecx,%ebx,1)
add    %dh,-0x6f000037(%eax)
sbb    %eax,(%eax)
add    %ah,(%eax)
lret   $0xffff
mov    $0x70000019,%esp
lret   $0xffff
fcomps (%ecx)
add    %al,(%eax)
ror    $0xff,%dl
push   %esp
sbb    %eax,(%eax)
add    %dl,(%eax)
lret
(bad)
call   *(%eax)
sbb    (%eax),%al
add    %ah,-0x35(%eax)
(bad)
ljmp   *(%edx,%ebx,1)
add    %al,(%eax)
mov    $0xcb,%al
(bad)
decl   0x1a(%eax)
add    %al,(%eax)
add    %cl,%ah
(bad)
decl   -0x6fffffe6(%eax)
int3
(bad)
dec    %eax
sbb    (%eax),%al
add    %ah,-0x32(%eax)
(bad)
incl   (%eax)
sbb    (%eax),%eax
add    %al,0x20ffffce(%eax)
sbb    (%eax),%eax
add    %al,%al
iret
(bad)
jmp    *0x1b(%eax)
add    %al,(%eax)
adc    $0xff,%dl
jmp    *0x3000001b(%eax)
sar    %cl,%edi
jmp    *%eax
sbb    (%eax),%eax
add    %al,(%eax)
aam    $0xff
jmp    *(%eax)
sbb    $0x0,%al
add    %dl,0x4cffffd4(%eax)
sbb    $0x0,%al
add    %ah,-0x4700002a(%eax)
sbb    $0x0,%al
add    %ah,-0x29(%eax)
(bad)
(bad)
clc
sbb    $0x0,%al
add    %dl,%al
xlat   %ds:(%ebx)
(bad)
pushl  (%eax)
sbb    $0xd8600000,%eax
(bad)
jmp    *0x1d(%eax)
add    %al,(%eax)
lock fdivr %st(7),%st
(bad)
mov    $0xb000001d,%eax
fcos
decl   (%esi,%ebx,1)
add    %al,(%eax)
jo     8057f00 <_IO_stdin_used+0x245c>
(bad)
call   *0x0(%esi,%ebx,1)
add    %al,-0x24(%eax)
(bad)
inc    %eax
push   %ds
add    %al,(%eax)
push   %eax
(bad)
push   %eax
push   %ds
add    %al,(%eax)
sbb    $0xff,%dh
incl   0x0(%edi,%ebx,1)
add    %dh,%al
fdivrp %st,%st(7)
incl   0x1f(%eax)
(bad)
.byte 0xff
xchg   %eax,%esp
pop    %ds
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8057f6b <_IO_stdin_used+0x24c7>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
int3
adc    %bh,%bh
inc    %eax
add    $0xe000000,%eax
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8057f8b <_IO_stdin_used+0x24e7>
js     8057f89 <_IO_stdin_used+0x24e5>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,(%eax)
daa
(bad)
pushl  (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
jno    8057fb9 <_IO_stdin_used+0x2515>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
sub    %ah,(%edi)
(bad)
decl   0x2(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x4d00e46
pop    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0x0(%eax),%ecx
add    %al,(%eax)
mov    0x38000000,%al
sub    %edi,%edi
jmp    *0x41000000(%ecx,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x300e4304(%ebx)
add    (%eax),%ebp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
dec    %edx
or     (%esi),%cl
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax,%eax,1)
add    %al,(%eax)
in     (%dx),%al
add    %al,(%eax)
add    %bl,0xa3ffff(%edx,%ebp,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x3ff1b7fe(%ebx)
add    %eax,(%edx)
inc    %edx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ecx,%eax,1)
add    %al,(%eax)
and    $0x2b,%al
(bad)
lcall  *(%edx)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x11d00e46
test   %al,(%ebx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
mov    $0x0,%al
add    %al,(%eax)
pop    %eax
add    %eax,(%eax)
add    %al,(%eax)
das
(bad)
incl   0x4(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2600e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%edx),%esi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
sbb    $0x1,%al
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
xchg   %eax,%ebx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%ebx),%eax
adc    (%ecx),%al
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
inc    %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
or     $0x2,%al
add    %al,(%eax)
mov    %?,(%edx)
(bad)
pushl  0x0
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xe(%ebx)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
cmp    %al,(%edx)
add    %al,(%eax)
mov    0x95ffff32,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x46,(%ebx)
push   %cs
inc    %eax
add    0xa(%edi),%ah
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,0x2(%eax)
add    %al,(%eax)
adc    %dh,(%ebx)
(bad)
jmp    *0x3(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8d00e48
cmp    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ch,0x367c0000(%edx,%eax,1)
(bad)
(bad)
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xa,0x59400e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
jmp    8058247 <_IO_stdin_used+0x27a3>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
add    $0x3,%al
add    %al,(%eax)
fs
aaa
(bad)
incl   0x1(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %bl,0xe(%edx,%ecx,1)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%edx
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%eax
add    %cl,0x34ffff38(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,(%eax)
add    %al,(%eax)
add    %al,0x0(%ebx,%eax,1)
add    %dh,0x34ffff(%eax,%edi,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,0x0(%eax)
add    %al,(%eax)
pop    %eax
add    (%eax),%eax
add    %ah,%al
cmp    %bh,%bh
pushl  0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3d00e46
pop    %eax
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
pushf
add    (%eax),%eax
add    %bl,(%edx,%edi,1)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xa(%eax)
push   %cs
add    $0x45,%al
or     0xe(%eax),%ecx
add    $0x0,%al
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
mov    $0x4c000003,%esp
cmp    %bh,%bh
pushl  0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x500e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %dh,%ah
add    (%eax),%eax
add    %dl,%ah
cmp    %bh,%bh
jmp    *0x41000000(%edx,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
xor    %ch,0xe(%edx,%ecx,1)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
data16
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
outsl  %ds:(%esi),(%dx)
or     (%esi),%cl
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     (%ebx),%eax
pop    %esi
add    %ecx,(%edx)
push   %cs
or     $0x45,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0x0(%eax),%eax
add    %al,(%eax)
pop    %esp
add    $0x0,%al
add    %bl,0x457ffff(,%edi,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2b00e48
cmp    (%edx),%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    0x38000004,%al
inc    %ecx
(bad)
push   %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffd4,0x2600e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
loopne 805843a <_IO_stdin_used+0x2996>
add    %al,(%eax)
clc
inc    %ecx
(bad)
decl   (%eax)
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
inc    %edx
xchg   %eax,(%ebx)
xchg   %al,(%ecx,%ecx,2)
addl   $0xffffffc3,0xa01e003
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x47d40000(,%eax,1)
(bad)
call   *0x1(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8d00e46
bound  %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
pop    %eax
add    $0x49300000,%eax
(bad)
dec    %esp
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,-0x6ff1b9fc(%ebx)
add    (%ebx),%eax
mov    (%edx),%es
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
nop
add    $0x4bc80000,%eax
(bad)
pushl  0x2(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x40e00e48
in     $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
aam    $0x5
add    %al,(%eax)
add    $0x4e,%al
(bad)
jmp    *%ebp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x74,0x3a00e46
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
adc    $0x6,%al
add    %al,(%eax)
mov    $0x4f,%ah
(bad)
incl   0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x2d00e46
repnz or (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   %esp
push   %es
add    %al,(%eax)
les    -0x1(%eax),%edx
push   %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2,0x2c00e46
enter  $0xe0a,$0x14
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
xchg   %eax,%esp
push   %es
add    %al,(%eax)
test   %dl,-0x1(%ecx)
inc    %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
push   %esp
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffff97,0x2500e46
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dl,%ah
push   %es
add    %al,(%eax)
adc    $0x52,%al
(bad)
jmp    *%ebp
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x24900e46
testb  $0xe,(%edx,%ecx,1)
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,(%eax)
pop    %es
add    %al,(%eax)
rcrb   $0xff,-0x1(%eax)
mov    $0x3,%edx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x22900e48
(bad)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
pop    %esp
pop    %es
add    %al,(%eax)
cmp    $0x5c,%al
(bad)
lcall  *0x1(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1b9fc(%ebx)
inc    %eax
add    (%ecx),%eax
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
xchg   %eax,%esp
pop    %es
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
pop    %ebp
(bad)
(bad)
fiaddl (%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x42a00e46
movsb  %ds:(%esi),%es:(%edi)
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,%al
pop    %es
add    %al,(%eax)
inc    %eax
fs
(bad)
inc    %ebx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x5d300e45
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
push   $0xa
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,(%eax)
or     %al,(%eax)
add    %bh,0x27ffff65(%eax)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x23f00e46
push   %ss
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x0(%eax,%ecx,1)
add    %ah,0x27dffff(%ecx,%ebp,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x21f00e48
lods   %ds:(%esi),%al
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,-0x1ffffff8(%eax)
imul   $0xffffffff,%edi,%edi
push   %ebp
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x4800e46
movsb  %ds:(%esi),%es:(%edi)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,%ah
or     %al,(%eax)
add    %bh,%ah
outsb  %ds:(%esi),(%dx)
(bad)
inc    %eax
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x21f00e46
fiaddl (%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
inc    %eax
or     %eax,(%eax)
add    %bh,0x71(%eax)
(bad)
pushl  0x9
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x74,0x62c00e46
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
orb    $0x0,(%ecx)
add    %bh,0x7a(%eax)
(bad)
lcall  *0x6(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1800e43
fimul  (%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
rorb   $0x0,(%ecx)
add    %ch,%al
or     $0xff,%al
ljmp   *0xf(%edx)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa0a6803,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %dh,%al
or     %eax,(%eax)
add    %ch,0x30ffff80(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %bl,0xa(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
sbb    $0xa,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
cmp    $0xff,%bh
lret
or     (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0xa900e46
in     (%dx),%eax
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
pusha
or     (%eax),%al
add    %bh,(%eax)
mov    %?,%edi
jmp    *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dh,0xa(%eax)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %bh,0x0(%edx,%ecx,1)
add    %cl,0x27fffff(%esp,%ecx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x67,0x1d00e46
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
imul   $0xe,(%edx),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
mov    $0x43140e0a,%esi
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
or     (%eax),%al
add    %bl,0xa6ffff(%esi,%ecx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %esp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
sub    %cl,(%ebx)
add    %al,(%eax)
adc    %cl,0x2affff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
pop    %ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %cl,0xb(%eax)
add    %al,(%eax)
and    %cl,0x3effff(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
pop    %esp
or     (%eax),%eax
add    %cl,-0x1(%edi,%ecx,4)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
jo     8058ad1 <_IO_stdin_used+0x302d>
add    %al,(%eax)
mov    %cl,0xbfffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
test   $0xb,%al
add    %al,(%eax)
adc    %dl,0xc1ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
dec    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,%al
or     (%eax),%eax
add    %ah,0x4ffff90(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,%ah
or     (%eax),%eax
add    %bl,0x2effff(%eax,%edx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xe(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %bl,(%eax)
or     $0x0,%al
add    %ah,0x70ffff90(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x1(%edx),%ebp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
pop    %ecx
or     (%esi),%cl
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
fs
or     $0x0,%al
add    %al,%ah
xchg   %eax,%edx
(bad)
pushl  (%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   $0xe
or     %al,-0x3d(%ecx)
push   %cs
add    $0x30,%al
add    %al,(%eax)
add    %al,-0x6d2c0000(%esp,%ecx,1)
(bad)
lcall  *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x500e4304(%ebx)
add    -0x3cbeeff2(%edi),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
sbb    $0x0,%al
add    %al,(%eax)
mov    $0x4000000c,%eax
xchg   %eax,%ebx
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
jb     8058c31 <_IO_stdin_used+0x318d>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,%al
or     $0x0,%al
add    %ah,-0x6d(%eax)
(bad)
(bad)
cmp    (%eax),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
je     8058c51 <_IO_stdin_used+0x31ad>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %bh,%al
or     $0x0,%al
add    %al,0x3effff93(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x4ff1b9fc(%ebx)
or     %al,(%edx)
enter  $0xe0a,$0x10
inc    %ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    %cl,0x94880000
(bad)
(bad)
fild   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x700e4802(%ebx)
add    %ah,%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x0(%ebp,%ecx,1)
add    %al,-0x1(%ebp,%edx,4)
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1,0x81a00e46
add    0x140e0a01(%edx),%esi
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,-0x3ffffff3(%eax)
cwtl
(bad)
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,-0x67140000(%ebp,%ecx,1)
(bad)
lcall  *0x41000000(%esp,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1,0x81900e46
add    %esp,%eax
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
add    %cl,(%esi)
add    %al,(%eax)
dec    %eax
popf
(bad)
push   %ecx
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x41900e46
jo     8058d7d <_IO_stdin_used+0x32d9>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x0(%esi,%ecx,1)
add    %al,(%eax,%eiz,4)
(bad)
(bad)
flds   (%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x40d00e46
sbb    %al,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    %cl,(%esi)
add    %al,(%eax)
mov    0xa1ffffa1,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
enter  $0xe,$0x0
adc    %ah,0x40ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jp     8058e41 <_IO_stdin_used+0x339d>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,%al
push   %cs
add    %al,(%eax)
xor    %ah,0x48ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     $0xf,%al
add    %al,(%eax)
pop    %esp
mov    %al,0x49ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%ebx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
xor    %cl,(%edi)
add    %al,(%eax)
mov    %ah,0x40ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jp     8058ea9 <_IO_stdin_used+0x3405>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,0xf(%eax)
add    %al,(%eax)
test   $0xa2,%al
(bad)
call   *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
je     8058ed9 <_IO_stdin_used+0x3435>
add    %al,(%eax)
aam    $0xa2
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %ecx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    0xf800000f,%al
mov    %al,0xb9ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x75,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
loopne 8058f45 <_IO_stdin_used+0x34a1>
add    %al,(%eax)
js     8058edd <_IO_stdin_used+0x3439>
(bad)
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %ebp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %cl,(%eax,%edx,1)
add    %al,(%eax)
pushf
mov    %eax,0x1affff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xec65802(%esi)
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
adc    %al,(%eax)
add    %ah,0x66ffffa3(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x58,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %ah,0x0(%eax,%edx,1)
add    %dl,%ah
mov    %eax,0x47ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xe(%edi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
nop
adc    %al,(%eax)
add    %bh,%al
mov    %eax,0x89ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xa(%esi),%cl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
mov    $0x10,%ah
add    %al,(%eax)
movsb  %fs:(%esi),%es:(%edi)
(bad)
ljmp   *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,%ah
adc    %al,(%eax)
add    %bl,%ah
movsb  %ds:(%esi),%es:(%edi)
(bad)
push   %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffe6,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %ch,(%eax)
adc    %eax,(%eax)
add    %ah,0x40ffffa5(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
jp     80590a1 <_IO_stdin_used+0x35fd>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %cl,0x11(%eax)
add    %al,(%eax)
shlb   $0x0,0xe0ffff(%ebp)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%edi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
mov    0x48000011,%al
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
decl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    0xa(%edx),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edx),%ebp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %dl,%al
adc    %eax,(%eax)
add    %ch,-0x7b00005a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%edi),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
sbb    %dl,(%edx)
add    %al,(%eax)
lock cmpsb %es:(%edi),%ds:(%esi)
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax,%eax,1)
add    %ch,(%edx,%edx,1)
add    %al,(%eax)
or     $0xa7,%al
(bad)
(bad)
jl     805918a <_IO_stdin_used+0x36e6>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,0x0(%edx,%edx,1)
add    %al,-0x1(%edi,%eiz,4)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffdd,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
or     %eax,(%ecx)
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %cl,%ah
adc    (%eax),%al
add    %bl,-0x1(%ecx,%ebp,4)
decl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x58,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%ebx
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax,%eax,1)
add    %ah,(%eax)
adc    (%eax),%eax
add    %bl,0x7cffffa9(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
push   $0xd0000013
test   $0x6bffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
push   %edx
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %ah,0x8000013(%eax)
stos   %al,%es:(%edi)
(bad)
ljmp   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
push   %ecx
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%eax
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %bl,%al
adc    (%eax),%eax
add    %al,-0x56(%eax)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4e04(%ebx)
add    0xa(%ecx),%bl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%ecx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %ah,(%eax)
adc    $0x0,%al
add    %cl,-0x6b000056(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ebp),%ah
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %ch,0x14(%eax)
add    %al,(%eax)
loopne 805936c <_IO_stdin_used+0x38c8>
(bad)
call   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%esi),%ah
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x14,%al
add    %al,(%eax)
cmp    %ch,0x28effff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x45,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0x0(%eax,%eax,1),%edx
add    %dh,%al
adc    $0x0,%al
add    %cl,0x3bffffad(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x66,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%edx),%edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,0x15(%eax)
add    %al,(%eax)
jo     8059451 <_IO_stdin_used+0x39ad>
(bad)
(bad)
jnp    80594a6 <_IO_stdin_used+0x3a02>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%ebx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %dh,0x0(%ebp,%edx,1)
add    %al,%ah
scas   %es:(%edi),%eax
(bad)
(bad)
jnp    80594d2 <_IO_stdin_used+0x3a2e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%ebx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,0x18000015(%eax)
mov    $0xff,%al
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
push   %eax
jb     805951a <_IO_stdin_used+0x3a76>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %cl,%ah
adc    $0xb05c0000,%eax
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ch,%al
adc    $0xb0900000,%eax
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %al,(%esi,%edx,1)
add    %al,(%eax)
les    0x4dffff(%eax),%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
push   %ss
add    %al,(%eax)
clc
mov    $0xff,%al
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %bh,(%esi,%edx,1)
add    %al,(%eax)
sub    $0xb1,%al
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
pop    %eax
push   %ss
add    %al,(%eax)
pusha
mov    $0xff,%cl
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7c300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cwtl
push   %ss
add    %al,(%eax)
jo     80595a3 <_IO_stdin_used+0x3aff>
(bad)
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x71,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
fcoms  (%esi)
add    %al,(%eax)
(bad)
mov    $0xff,%cl
inc    %esp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1aefc(%ebx)
or     %al,(%edx)
arpl   %cx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
adc    %dl,(%edi)
add    %al,(%eax)
pop    %eax
mov    $0xff,%bl
jmp    *(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
dec    %edi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %dh,(%eax)
pop    %ss
add    %al,(%eax)
pop    %eax
mov    $0xff,%bl
(bad)
cmp    (%ecx),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffde,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
jo     80596dd <_IO_stdin_used+0x3c39>
add    %al,(%eax)
pop    %eax
mov    $0xff,%ah
pushl  0x41000000(%edx,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffb1,0x3500e4e
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
mov    $0x17,%al
add    %al,(%eax)
fdivs  0xa5ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
lock pop %ss
add    %al,(%eax)
dec    %eax
mov    $0xff,%bh
inc    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff81,0x2300e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
xor    %bl,(%eax)
add    %al,(%eax)
fdivs  0x85ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
inc    %eax
add    0xe(%eax),%dh
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
pop    %esp
sbb    %al,(%eax)
add    %bh,(%eax,%edi,4)
(bad)
incl   (%ecx)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x78,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebp),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edi),%esi
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
enter  $0x18,$0x0
loopne 80597db <_IO_stdin_used+0x3d37>
(bad)
(bad)
mov    $0x0,%ebp
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x68,0x2400e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
or     %bl,(%ecx)
add    %al,(%eax)
pusha
mov    $0x66ffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%esi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%ebx),%ebx
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
inc    %eax
sbb    %eax,(%eax)
add    %bl,-0x78000046(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
jg     80598b5 <_IO_stdin_used+0x3e11>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,0x19(%eax)
add    %al,(%eax)
clc
mov    $0x8bffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x48,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%edi),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %cl,%al
sbb    %eax,(%eax)
add    %dh,(%eax)
mov    $0xb8ffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5e,0x2400e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xe(%ecx),%edi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax,%eax,1)
add    %bl,(%edx,%ebx,1)
add    %al,(%eax)
pushf
mov    $0xb7ffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4e04(%ebx)
add    0xa(%ecx),%ch
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edx),%ebp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
sbb    %fs:(%eax),%al
add    %dl,(%esp,%edi,4)
(bad)
call   *%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2c,0x3200e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
rcrb   (%edx)
add    %al,(%eax)
js     80599e7 <_IO_stdin_used+0x3f43>
(bad)
incl   (%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa6d0204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax),%edx
add    %al,(%eax)
add    %bl,(%ebx)
add    %al,(%eax)
pop    %eax
mov    $0x12dffff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffff8,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%esi),%ebx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,0x0(%ebx,%ebx,1)
add    %dh,(%edi,%edi,4)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,0x6800001b(%eax)
mov    $0x2ffff,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
sbb    (%eax),%eax
add    %ah,-0x1(%edi,%edi,4)
call   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4e02(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jo     805ad00 <_IO_stdin_used+0x525c>
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %bl,0x7a(%ebp)
add    $0x20008,%eax
add    %ch,0x7a(%ebp)
add    $0x20108,%eax
add    %dh,0x7a(%ebp)
add    $0x80008,%eax
add    %ah,0x7a(%edx)
add    $0x80508,%eax
add    %bl,%ch
jp     805adac <_IO_stdin_used+0x5308>
or     %al,(%esi)
or     %al,(%eax)
add    %ch,-0xf7fa86(%ebp)
or     %al,(%eax)
add    %ah,0x7a(%ebp)
add    $0xa0008,%eax
add    %ch,0x7a(%ecx)
add    $0xa0108,%eax
add    %dh,0x7a(%ecx)
add    $0x600008,%eax
add    %bh,0x7a(%ebx)
add    $0x600108,%eax
add    %bh,0x7a(%edi)
add    $0x600208,%eax
add    %al,0x308057a(%esi)
pusha
add    %al,(%eax)
lea    0x5(%edx),%edi
or     %al,(%eax,%eiz,2)
add    %al,(%eax)
xchg   %eax,%esp
jp     805adf4 <_IO_stdin_used+0x5350>
or     %al,0x1c000060
pop    %esp
add    $0x600608,%eax
add    %bl,0x708057a(%eax)
pusha
add    %al,(%eax)
popf
jp     805ae0c <_IO_stdin_used+0x5368>
or     %dh,0xa1000080
jp     805ae14 <_IO_stdin_used+0x5370>
or     %bl,-0x59ffff80(%ebx)
jp     805ae1c <_IO_stdin_used+0x5378>
or     %dh,%bl
addb   $0x0,(%eax)
lods   %ds:(%esi),%al
jp     805ae24 <_IO_stdin_used+0x5380>
or     %dh,(%edi)
addl   $0x57ab100,(%eax)
or     %bl,%ch
xchg   %al,(%eax)
add    %ah,0x63080563
mov    %al,(%eax)
add    %dh,0x6408057a(%ebp)
mov    %al,(%eax)
add    %bh,0x4c08057a(%esi)
mov    %al,(%eax)
add    %al,%dh
jp     805ae4c <_IO_stdin_used+0x53a8>
or     %al,0x7ace0000(%eax,%ecx,4)
add    $0x108,%eax
add    %dl,%dh
jp     805ae5c <_IO_stdin_used+0x53b8>
or     %al,(%edx)
add    %al,(%eax)
add    %bl,%ah
jp     805ae64 <_IO_stdin_used+0x53c0>
or     %al,(%ebx)
add    %al,(%eax)
add    %bh,0x408055b(%edi)
add    %al,(%eax)
add    %dl,(%ebx,%edi,2)
add    $0x508,%eax
add    %ah,%cl
jp     805ae7c <_IO_stdin_used+0x53d8>
or     %al,(%esi)
add    %al,(%eax)
add    %ah,%dh
jp     805ae84 <_IO_stdin_used+0x53e0>
or     %al,(%edi)
add    %al,(%eax)
add    %ch,%ah
jp     805ae8c <_IO_stdin_used+0x53e8>
or     %cl,(%eax)
add    %al,(%eax)
add    %dh,%ah
jp     805ae94 <_IO_stdin_used+0x53f0>
or     %cl,(%ecx)
add    %al,(%eax)
add    %bh,%bl
jp     805ae9c <_IO_stdin_used+0x53f8>
or     %cl,(%eax,%eax,1)
add    %al,(%eax)
add    $0x1008057b,%eax
add    %al,(%eax)
add    %cl,(%ecx)
jnp    805aeac <_IO_stdin_used+0x5408>
or     %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%ecx)
jnp    805aeb4 <_IO_stdin_used+0x5410>
or     %dl,0x1a000000
jnp    805aebc <_IO_stdin_used+0x5418>
or     %dl,(%esi)
add    %al,(%eax)
add    %ah,(%edx)
jnp    805aec4 <_IO_stdin_used+0x5420>
or     %dl,(%edi)
add    %al,(%eax)
add    %ch,(%edx)
jnp    805aecc <_IO_stdin_used+0x5428>
or     %bl,(%eax)
add    %al,(%eax)
add    %ch,(%edi)
jnp    805aed4 <_IO_stdin_used+0x5430>
or     %cl,%dl
mov    %al,(%eax)
add    %dh,(%esi)
jnp    805aedc <_IO_stdin_used+0x5438>
or     %ah,0x3b000088(%edx)
jnp    805aee4 <_IO_stdin_used+0x5440>
or     %al,(%eax)
addl   $0x57b3f00,(%eax)
or     %ch,0x46000088(%eax)
jnp    805aef4 <_IO_stdin_used+0x5450>
or     %al,(%eax)
addl   $0x57b3f00,(%eax)
or     %cl,%ah
mov    %al,(%eax)
add    %cl,0x7b(%esi)
add    $0x80008,%eax
add    %ah,(%eax)
.byte 0x63
.byte 0x5
.byte 0x8
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
adc    %dl,0xd0804(%eax)
add    %al,(%eax)
je     805af78 <_IO_stdin_used+0x54d4>
add    $0x1908,%eax
add    %bl,-0x53(%eax)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
pop    %esp
lods   %ds:(%esi),%eax
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
or     %cl,0x60804(%eax)
add    %al,(%eax)
call   120db3da <optarg+0xa0801d6>
add    %al,(%eax)
add    %bh,0xb0000(%ebx,%eax,1)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
mov    $0x5,%al
or     %al,(%edx)
add    %al,(%eax)
add    %bl,%al
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bh,(%eax)
lea    (%eax,%ecx,1),%eax
adc    %eax,(%eax)
add    %al,(%eax)
clc
mov    %es,(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x78(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x3c(%edi)
mov    (%eax,%ecx,1),%eax
or     %ch,0x805(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    805afa6 <_IO_stdin_used+0x5502>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    805afe7 <_IO_stdin_used+0x5543>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    805b028 <_IO_stdin_used+0x5584>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    805b069 <_IO_stdin_used+0x55c5>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    805b0aa <_IO_stdin_used+0x5606>
add    $0x8,%al
xchg   %dl,0x4949608(%esp,%eax,1)
or     %ah,-0x49f7fb6c(%esi)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
out    %al,$0x94
add    $0x8,%al
notb   0x4950608(%esp,%eax,1)
or     %dl,(%esi)
xchg   %eax,%ebp
add    $0x8,%al
es
xchg   %eax,%ebp
add    $0x8,%al
ss
xchg   %eax,%ebp
add    $0x8,%al
inc    %esi
xchg   %eax,%ebp
add    $0x8,%al
push   %esi
xchg   %eax,%ebp
add    $0x8,%al
xchg   %ax,%bp
add    $0x8,%al
jbe    805b0eb <_IO_stdin_used+0x5647>
add    $0x8,%al
xchg   %dl,-0x6a69f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebp
add    $0x8,%al
mov    $0x95,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebp
add    $0x8,%al
(bad)
xchg   %eax,%ebp
add    $0x8,%al
out    %al,$0x95
add    $0x8,%al
.byte 0xf6
xchg   %eax,%ebp
add    $0x8,%al
(bad)
incl   (%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
pushl  (%edi)
or     (%eax),%eax
add    %al,(%esp,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %eax
ret
add    $0x10000008,%eax
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
.byte 0xff
add    %al,(%eax)
add    %al,(%eax)
