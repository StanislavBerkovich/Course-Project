das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ah,%ah
xchg   %eax,%ebx
dec    %esp
mov    %esp,%fs
cmpxchg %edx,(%edi)
sub    0x8e5efe53,%dl
cmp    $0x9,%al
pop    %edi
add    (%eax),%bh
cli
add    (%eax),%al
add    %al,(%eax)
cmp    (%eax),%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    $0x0,%eax
and    %al,(%edx)
and    (%eax),%al
add    %al,(%eax)
add    %bh,(%ebx)
add    %al,(%eax)
add    %bh,(%eax)
repnz
.byte 0x8b
sbb    $0xad,%al
dec    %ebx
jecxz  8048190 <__snprintf_chk@plt-0x950>
insl   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%esi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
addl   $0x0,(%ecx)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     $0x0,%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jl     8048393 <__snprintf_chk@plt-0x74d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
loopne 80483a2 <__snprintf_chk@plt-0x73e>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
das
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
flds   (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
rolb   %cl,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
les    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stos   %eax,%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%eax)
add    %al,(%eax)
mov    0x4080521,%al
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,(%edx)
add    %al,(%eax)
add    %cl,0x4(%eax,%ebp,8)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %bl,0x5f(%edi)
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    804861e <__snprintf_chk@plt-0x4c2>
popa
jb     8048621 <__snprintf_chk@plt-0x4bf>
pop    %edi
pop    %edi
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048626 <__snprintf_chk@plt-0x4ba>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048634 <__snprintf_chk@plt-0x4ac>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048641 <__snprintf_chk@plt-0x49f>
push   $0x705f5f00
jb     804863e <__snprintf_chk@plt-0x4a2>
outsb  %ds:(%esi),(%dx)
je     804863e <__snprintf_chk@plt-0x4a2>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
imul   $0x64646165,0x72(%eax,%eax,1),%esi
imul   $0x6c746573,0x0(%edx),%esi
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ah,%gs:0x6f(%esi)
jo     804865d <__snprintf_chk@plt-0x483>
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     804866c <__snprintf_chk@plt-0x474>
arpl   %bp,0x70(%ebp)
add    %dh,0x74(%ebx)
jb     8048678 <__snprintf_chk@plt-0x468>
arpl   %bp,0x72(%eax)
add    %bl,0x5f(%edi)
jae    8048682 <__snprintf_chk@plt-0x45e>
jb     8048674 <__snprintf_chk@plt-0x46c>
jne    8048682 <__snprintf_chk@plt-0x45e>
add    %dh,0x65(%eax)
jb     8048689 <__snprintf_chk@plt-0x457>
outsl  %ds:(%esi),(%dx)
jb     804861a <__snprintf_chk@plt-0x4c6>
pop    %edi
pop    %edi
imul   $0x5f393963,0x6f(%ebx),%esi
jae    8048698 <__snprintf_chk@plt-0x448>
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80486a4 <__snprintf_chk@plt-0x43c>
gs
js     80486a7 <__snprintf_chk@plt-0x439>
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    804869e <__snprintf_chk@plt-0x442>
imul   $0x74735f5f,%fs:0x0(%edx),%esi
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x68637475,0x70(%eax,%eax,1),%ebp
popa
jb     8048656 <__snprintf_chk@plt-0x48a>
jb     80486bd <__snprintf_chk@plt-0x423>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jo     80486cf <__snprintf_chk@plt-0x411>
jo     80486c7 <__snprintf_chk@plt-0x419>
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     80486db <__snprintf_chk@plt-0x405>
jo     80486d8 <__snprintf_chk@plt-0x408>
add    %dh,0x74(%ebx)
jb     80486e3 <__snprintf_chk@plt-0x3fd>
outsl  %ds:(%esi),(%dx)
imul   $0x73,(%eax),%eax
je     80486e7 <__snprintf_chk@plt-0x3f9>
je     80486e6 <__snprintf_chk@plt-0x3fa>
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     80486f2 <__snprintf_chk@plt-0x3ee>
jns    8048680 <__snprintf_chk@plt-0x460>
outsw  %gs:(%esi),(%dx)
data16
add    %dh,0x65(%ebx)
imul   $0x0,%gs:0x72(%ecx,%ebp,2),%esp
data16
addr16
gs
je     8048705 <__snprintf_chk@plt-0x3db>
add    %dh,0x74(%ebx)
jb     8048703 <__snprintf_chk@plt-0x3dd>
outsb  %gs:(%esi),(%dx)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048704 <__snprintf_chk@plt-0x3dc>
je     80486a1 <__snprintf_chk@plt-0x43f>
jae    8048717 <__snprintf_chk@plt-0x3c9>
jb     8048718 <__snprintf_chk@plt-0x3c8>
je     8048719 <__snprintf_chk@plt-0x3c7>
add    %bl,0x5f(%edi)
gs
jb     804871f <__snprintf_chk@plt-0x3c1>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x72747300,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
fs
jne    8048730 <__snprintf_chk@plt-0x3b0>
add    %bl,0x5f(%edi)
data16
jo     8048738 <__snprintf_chk@plt-0x3a8>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x66,(%eax),%eax
jo     8048747 <__snprintf_chk@plt-0x399>
je     8048737 <__snprintf_chk@plt-0x3a9>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048747 <__snprintf_chk@plt-0x399>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsl  %ds:(%esi),(%dx)
jo     8048752 <__snprintf_chk@plt-0x38e>
outsb  %ds:(%esi),(%dx)
imul   $0x74635f5f,%fs:0x0(%edx),%esi
jns    8048768 <__snprintf_chk@plt-0x378>
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048776 <__snprintf_chk@plt-0x36a>
fs
gs
jb     8048778 <__snprintf_chk@plt-0x368>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
pop    %edi
jae    804877f <__snprintf_chk@plt-0x361>
jo     8048785 <__snprintf_chk@plt-0x35b>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x70,(%eax),%eax
arpl   %bp,0x73(%edi,%ebp,2)
add    %dh,%gs:0x73(%ebp)
insb   (%dx),%es:(%edi)
gs
gs
jo     804872a <__snprintf_chk@plt-0x3b6>
data16
ja     804879f <__snprintf_chk@plt-0x341>
imul   $0x61657266,0x0(%ebp,%eiz,2),%esi
add    %bl,%fs:0x5f(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x74(%ebx)
jb     80487ab <__snprintf_chk@plt-0x335>
push   $0x5f5f0072
jae    80487bf <__snprintf_chk@plt-0x321>
jb     80487ba <__snprintf_chk@plt-0x326>
outsb  %ds:(%esi),(%dx)
je     80487ba <__snprintf_chk@plt-0x326>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
js     80487d0 <__snprintf_chk@plt-0x310>
je     80487c0 <__snprintf_chk@plt-0x320>
je     8048761 <__snprintf_chk@plt-0x37f>
bound  %ebp,0x6e(%ecx)
fs
je     80487cc <__snprintf_chk@plt-0x314>
js     80487dd <__snprintf_chk@plt-0x303>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x65636361,0x0(%esi),%ebp
jae    80487e9 <__snprintf_chk@plt-0x2f7>
add    %dh,0x74(%ebx)
jb     80487de <__snprintf_chk@plt-0x302>
insl   (%dx),%es:(%edi)
jo     804877e <__snprintf_chk@plt-0x362>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80487fe <__snprintf_chk@plt-0x2e2>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x72726566,0x0(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8048797 <__snprintf_chk@plt-0x349>
data16
jb     80487ff <__snprintf_chk@plt-0x2e1>
add    %al,%gs:0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    $0x0,%al
add    $0x3000300,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
push   %es
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %eax,(%eax)
push   %es
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x70000,0xd(%ecx),%ebp
cld
add    %eax,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edi)
imul   $0x60000,0xd(%ecx),%ebp
push   %es
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x210,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x40000,%eax
sbb    (%edx),%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x30000,%eax
and    $0x2,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     80488cf <__snprintf_chk@plt-0x211>
imul   $0x20000,(%ecx),%ecx
add    %cs:(%eax),%al
add    %al,(%eax)
add    %al,(%eax)
cld
pop    %ds
add    $0x190608,%eax
add    %ah,0x5080521(%eax)
cmp    (%eax),%eax
or     $0x20,%al
add    $0x10708,%eax
add    %dl,(%eax)
and    %al,0x20708
add    %dl,(%eax,%eiz,1)
add    $0x30708,%eax
add    %bl,(%eax)
and    %al,0x40708
add    %bl,(%eax,%eiz,1)
add    $0x50708,%eax
add    %ah,(%eax)
and    %al,0x60708
add    %ah,(%eax,%eiz,1)
add    $0x70708,%eax
add    %ch,(%eax)
and    %al,0x80708
add    %ch,(%eax,%eiz,1)
add    $0x90708,%eax
add    %dh,(%eax)
and    %al,0xa0708
add    %dh,(%eax,%eiz,1)
add    $0xb0708,%eax
add    %bh,(%eax)
and    %al,0xc0708
add    %bh,(%eax,%eiz,1)
add    $0xd0708,%eax
add    %al,0x20(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%eiz,1)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
and    %al,0x100708
add    %cl,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x20(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x20(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    $0x20600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%eiz,1)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080520
sbb    %al,(%eax)
add    %ch,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x20(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x20(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    $0x20800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%eiz,1)
add    %al,(%eax)
mov    %ah,(%eax)
add    $0x200708,%eax
add    %cl,0x21070805(%eax,%eiz,1)
add    %al,(%eax)
nop
and    %al,0x220708
add    %dl,0x23070805(%eax,%eiz,1)
add    %al,(%eax)
cwtl
and    %al,0x240708
add    %bl,0x25070805(%eax,%eiz,1)
add    %al,(%eax)
mov    0x7080520,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
and    %al,0x270708
add    %ch,0x7080520(%eax)
sub    %al,(%eax)
add    %ch,0x29070805(%eax,%eiz,1)
add    %al,(%eax)
mov    $0x20,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%eiz,1)
add    %al,(%eax)
mov    $0x7080520,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%eiz,1)
add    %al,(%eax)
shlb   $0x5,(%eax)
or     %al,(%edi)
add    %al,%cs:(%eax)
les    (%eax),%esp
add    $0x2f0708,%eax
add    %cl,%al
and    %al,0x300708
add    %cl,%ah
and    %al,0x310708
add    %dl,%al
and    %al,0x320708
add    %dl,%ah
and    %al,0x330708
add    %bl,%al
and    %al,0x340708
add    %bl,%ah
and    %al,0x350708
add    %ah,%al
and    %al,0x360708
add    %ah,%ah
and    %al,0x370708
add    %ch,%al
and    %al,0x380708
add    %ch,%ah
and    %al,0x390708
add    %dh,%al
and    %al,0x3a0708
push   %ebx
sub    $0x8,%esp
call   80496e0 <__sprintf_chk@plt+0x870>
add    $0x9553,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048ac2 <__snprintf_chk@plt-0x1e>
call   8048c60 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8052004
jmp    *0x8052008
add    %al,(%eax)
jmp    *0x805200c
push   $0x0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052010
push   $0x8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052014
push   $0x10
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052018
push   $0x18
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805201c
push   $0x20
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052020
push   $0x28
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052024
push   $0x30
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052028
push   $0x38
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805202c
push   $0x40
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052030
push   $0x48
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052034
push   $0x50
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052038
push   $0x58
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805203c
push   $0x60
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052040
push   $0x68
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052044
push   $0x70
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052048
push   $0x78
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805204c
push   $0x80
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052050
push   $0x88
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052054
push   $0x90
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052058
push   $0x98
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805205c
push   $0xa0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052060
push   $0xa8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052064
push   $0xb0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052068
push   $0xb8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805206c
push   $0xc0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052070
push   $0xc8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052074
push   $0xd0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052078
push   $0xd8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805207c
push   $0xe0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052080
push   $0xe8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052084
push   $0xf0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052088
push   $0xf8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805208c
push   $0x100
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052090
push   $0x108
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052094
push   $0x110
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x8052098
push   $0x118
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x805209c
push   $0x120
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520a0
push   $0x128
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520a4
push   $0x130
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520a8
push   $0x138
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520ac
push   $0x140
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520b0
push   $0x148
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520b4
push   $0x150
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520b8
push   $0x158
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520bc
push   $0x160
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520c0
push   $0x168
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520c4
push   $0x170
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520c8
push   $0x178
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520cc
push   $0x180
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520d0
push   $0x188
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520d4
push   $0x190
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520d8
push   $0x198
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520dc
push   $0x1a0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520e0
push   $0x1a8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520e4
push   $0x1b0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520e8
push   $0x1b8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520ec
push   $0x1c0
jmp    8048ad0 <__snprintf_chk@plt-0x10>
jmp    *0x80520f0
push   $0x1c8
jmp    8048ad0 <__snprintf_chk@plt-0x10>
push   %ebx
sub    $0x18,%esp
mov    0x80521c8,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804f373,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x47,(%esp)
call   8048c70 <exit@plt>
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x460,%esp
mov    0xc(%ebp),%esi
mov    0x8(%ebp),%edi
mov    (%esi),%ebx
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8048db0 <strrchr@plt>
movl   $0x804f487,0x4(%esp)
movl   $0x6,(%esp)
test   %eax,%eax
lea    0x1(%eax),%edx
cmovne %edx,%ebx
mov    %ebx,0x80521c8
call   8048da0 <setlocale@plt>
movl   $0x804f2a0,0x4(%esp)
movl   $0x804f2b2,(%esp)
call   8048de0 <bindtextdomain@plt>
movl   $0x804f2b2,(%esp)
call   8048bb0 <textdomain@plt>
cmp    $0x1,%edi
movl   $0x0,0x60(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
jle    80493b8 <__sprintf_chk@plt+0x548>
mov    $0x1,%ebx
xor    %ecx,%ecx
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    (%esi,%ebx,4),%edx
cmpb   $0x2d,(%edx)
je     8049018 <__sprintf_chk@plt+0x1a8>
mov    %edx,(%esp)
movl   $0x2,0x8(%esp)
movl   $0x804f2d4,0x4(%esp)
mov    %edx,0x18(%esp)
mov    %ecx,0x14(%esp)
call   8048df0 <strncmp@plt>
mov    0x18(%esp),%edx
mov    0x14(%esp),%ecx
test   %eax,%eax
je     80493f7 <__sprintf_chk@plt+0x587>
cmpl   $0x100,0x30(%esp)
je     804942f <__sprintf_chk@plt+0x5bf>
mov    0x30(%esp),%eax
mov    %edx,0x60(%esp,%eax,4)
add    $0x1,%eax
mov    %eax,0x30(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
lea    0x0(%esi),%esi
movzbl 0x1(%edx),%eax
cmp    $0x56,%al
jne    8049090 <__sprintf_chk@plt+0x220>
cmpb   $0x0,0x2(%edx)
je     804936e <__sprintf_chk@plt+0x4fe>
mov    %edx,(%esp)
movl   $0x2,0x8(%esp)
movl   $0x804f2d4,0x4(%esp)
mov    %edx,0x18(%esp)
mov    %ecx,0x14(%esp)
call   8048df0 <strncmp@plt>
mov    0x18(%esp),%edx
mov    0x14(%esp),%ecx
test   %eax,%eax
je     80493f7 <__sprintf_chk@plt+0x587>
add    $0x1,%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %ecx,0x14(%esp)
call   8048e10 <strtol@plt>
mov    0x14(%esp),%ecx
mov    %eax,0x24(%esp)
sub    $0x1,%eax
cmp    $0x1f,%eax
jbe    80490a9 <__sprintf_chk@plt+0x239>
jmp    804942a <__sprintf_chk@plt+0x5ba>
xchg   %ax,%ax
cmp    $0x76,%al
jne    80494bd <__sprintf_chk@plt+0x64d>
cmpb   $0x0,0x2(%edx)
lea    0x0(%esi,%eiz,1),%esi
jne    804902a <__sprintf_chk@plt+0x1ba>
addl   $0x1,0x80521b0
add    $0x1,%ebx
cmp    %ebx,%edi
jg     8048fb8 <__sprintf_chk@plt+0x148>
mov    0x44(%esp),%ebx
test   %ebx,%ebx
jne    8049488 <__sprintf_chk@plt+0x618>
mov    %ecx,(%esp)
mov    %ecx,0x14(%esp)
call   804b7a0 <__sprintf_chk@plt+0x2930>
movl   $0x4b3b,0x4(%esp)
movl   $0xffffffff,0x54(%esp)
mov    %eax,%ebx
lea    0x54(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
call   8048bc0 <ioctl@plt>
mov    0x14(%esp),%ecx
test   %eax,%eax
jne    8049101 <__sprintf_chk@plt+0x291>
cmpl   $0x1,0x54(%esp)
je     8049329 <__sprintf_chk@plt+0x4b9>
mov    0x3c(%esp),%edx
test   %edx,%edx
je     8049282 <__sprintf_chk@plt+0x412>
cmpl   $0x0,0x4c(%esp)
je     804918a <__sprintf_chk@plt+0x31a>
mov    0x4c(%esp),%eax
movl   $0x804f2d2,0x4(%esp)
movl   $0x0,0x5c(%esp)
mov    %eax,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     80494a5 <__sprintf_chk@plt+0x635>
mov    0x4c(%esp),%edx
lea    0x5c(%esp),%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,%eax
movl   $0x1,(%esp)
movl   $0x0,0x58(%esp)
call   8049800 <__sprintf_chk@plt+0x990>
mov    0x5c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
call   804e620 <__sprintf_chk@plt+0x57b0>
mov    %esi,(%esp)
call   8048b60 <fclose@plt>
mov    0x48(%esp),%eax
test   %eax,%eax
je     80491dc <__sprintf_chk@plt+0x36c>
mov    0x48(%esp),%eax
movl   $0x804f2d2,0x4(%esp)
mov    %eax,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8049470 <__sprintf_chk@plt+0x600>
mov    0x48(%esp),%edx
mov    %eax,%ecx
mov    %ebx,%eax
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   8049800 <__sprintf_chk@plt+0x990>
mov    %esi,(%esp)
call   8048b60 <fclose@plt>
mov    0x40(%esp),%eax
test   %eax,%eax
je     80491f4 <__sprintf_chk@plt+0x384>
mov    0x40(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c120 <__sprintf_chk@plt+0x32b0>
mov    0x34(%esp),%eax
test   %eax,%eax
je     804920c <__sprintf_chk@plt+0x39c>
mov    0x34(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804e540 <__sprintf_chk@plt+0x56d0>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8049234 <__sprintf_chk@plt+0x3c4>
mov    0x3c(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804bc70 <__sprintf_chk@plt+0x2e00>
mov    %ebx,(%esp)
call   804ac10 <__sprintf_chk@plt+0x1da0>
movl   $0x1,0x28(%esp)
mov    0x38(%esp),%eax
test   %eax,%eax
mov    $0x1,%eax
cmove  0x2c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x44(%esp),%eax
test   %eax,%eax
jne    80492e9 <__sprintf_chk@plt+0x479>
mov    0x30(%esp),%edi
test   %edi,%edi
jne    80492f6 <__sprintf_chk@plt+0x486>
mov    0x38(%esp),%esi
test   %esi,%esi
je     8049278 <__sprintf_chk@plt+0x408>
mov    0x38(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804de90 <__sprintf_chk@plt+0x5020>
lea    -0xc(%ebp),%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpl   $0x0,0x30(%esp)
jne    804910d <__sprintf_chk@plt+0x29d>
cmpl   $0x0,0x4c(%esp)
jne    80492dc <__sprintf_chk@plt+0x46c>
cmpl   $0x0,0x38(%esp)
jne    80492dc <__sprintf_chk@plt+0x46c>
cmpl   $0x0,0x40(%esp)
jne    8049361 <__sprintf_chk@plt+0x4f1>
cmpl   $0x0,0x48(%esp)
jne    8049361 <__sprintf_chk@plt+0x4f1>
cmpl   $0x0,0x44(%esp)
jne    8049361 <__sprintf_chk@plt+0x4f1>
cmpl   $0x0,0x34(%esp)
jne    8049361 <__sprintf_chk@plt+0x4f1>
movl   $0x804f487,0x60(%esp)
movl   $0x1,0x30(%esp)
jmp    804918a <__sprintf_chk@plt+0x31a>
movl   $0x0,0x30(%esp)
jmp    804910d <__sprintf_chk@plt+0x29d>
mov    %ebx,(%esp)
call   804d600 <__sprintf_chk@plt+0x4790>
jmp    8049254 <__sprintf_chk@plt+0x3e4>
mov    0x2c(%esp),%eax
lea    0x60(%esp),%edx
mov    0x30(%esp),%ecx
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x24(%esp),%eax
mov    %eax,(%esp)
mov    %ebx,%eax
call   804a800 <__sprintf_chk@plt+0x1990>
jmp    8049260 <__sprintf_chk@plt+0x3f0>
cmpl   $0x0,0x80521b0
je     8049354 <__sprintf_chk@plt+0x4e4>
test   %ecx,%ecx
mov    $0x804f487,%eax
cmove  %eax,%ecx
mov    %ecx,0x8(%esp)
movl   $0x804f0ac,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
mov    %ebx,(%esp)
call   8048e20 <close@plt>
jmp    8049278 <__sprintf_chk@plt+0x408>
movl   $0x0,0x30(%esp)
jmp    804918a <__sprintf_chk@plt+0x31a>
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804f2b6,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x804f2c2,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
movl   $0x0,(%esp)
call   8048c70 <exit@plt>
movl   $0x0,0x30(%esp)
xor    %ecx,%ecx
movl   $0x0,0x34(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
jmp    80490b4 <__sprintf_chk@plt+0x244>
add    $0x2,%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %ecx,0x14(%esp)
call   8048e10 <strtol@plt>
mov    0x14(%esp),%ecx
mov    %eax,0x20(%esp)
sub    $0x1,%eax
cmp    $0x1f,%eax
jbe    80490a9 <__sprintf_chk@plt+0x239>
call   80497b0 <__sprintf_chk@plt+0x940>
movl   $0x5,0x8(%esp)
movl   $0x804f03c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x40,(%esp)
call   8048c70 <exit@plt>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048be0 <perror@plt>
movl   $0x49,(%esp)
call   8048c70 <exit@plt>
cmpl   $0x0,0x30(%esp)
je     80490c0 <__sprintf_chk@plt+0x250>
movl   $0x5,0x8(%esp)
movl   $0x804f05c,0x4(%esp)
jmp    804943f <__sprintf_chk@plt+0x5cf>
mov    0x4c(%esp),%eax
mov    %eax,(%esp)
call   8048be0 <perror@plt>
movl   $0x49,(%esp)
call   8048c70 <exit@plt>
cmp    $0x52,%al
jne    80494d8 <__sprintf_chk@plt+0x668>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
movl   $0x1,0x44(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x43,%al
jne    8049501 <__sprintf_chk@plt+0x691>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
test   %ecx,%ecx
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%ecx
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x4f,%al
jne    8049532 <__sprintf_chk@plt+0x6c2>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
mov    0x4c(%esp),%eax
test   %eax,%eax
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
mov    %eax,0x4c(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x6f,%al
jne    80495ca <__sprintf_chk@plt+0x75a>
movzbl 0x2(%edx),%eax
test   %al,%al
je     804957a <__sprintf_chk@plt+0x70a>
cmp    $0x6d,%al
je     804959d <__sprintf_chk@plt+0x72d>
cmp    $0x75,%al
jne    804902a <__sprintf_chk@plt+0x1ba>
cmpb   $0x0,0x3(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
cmpl   $0x0,0x34(%esp)
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
mov    %eax,0x34(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
mov    %eax,0x48(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmpb   $0x0,0x3(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
mov    0x40(%esp),%eax
test   %eax,%eax
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
mov    %eax,0x40(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x6d,%al
jne    804962f <__sprintf_chk@plt+0x7bf>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
cmpl   $0x0,0x3c(%esp)
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
movl   $0x804f2cd,0x4(%esp)
mov    %ecx,0x14(%esp)
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   8048b00 <strcmp@plt>
mov    $0x1,%edx
mov    0x14(%esp),%ecx
test   %eax,%eax
mov    0x3c(%esp),%eax
cmovne 0x28(%esp),%edx
cmovne 0x1c(%esp),%eax
mov    %edx,0x28(%esp)
mov    %eax,0x3c(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x75,%al
jne    8049694 <__sprintf_chk@plt+0x824>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
add    $0x1,%ebx
cmp    %edi,%ebx
je     804942a <__sprintf_chk@plt+0x5ba>
cmpl   $0x0,0x38(%esp)
jne    804942a <__sprintf_chk@plt+0x5ba>
mov    (%esi,%ebx,4),%eax
movl   $0x804f2cd,0x4(%esp)
mov    %ecx,0x14(%esp)
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   8048b00 <strcmp@plt>
mov    $0x1,%edx
mov    0x14(%esp),%ecx
test   %eax,%eax
mov    0x38(%esp),%eax
cmovne 0x2c(%esp),%edx
cmovne 0x1c(%esp),%eax
mov    %edx,0x2c(%esp)
mov    %eax,0x38(%esp)
jmp    80490a9 <__sprintf_chk@plt+0x239>
cmp    $0x66,%al
jne    804902a <__sprintf_chk@plt+0x1ba>
cmpb   $0x0,0x2(%edx)
jne    804902a <__sprintf_chk@plt+0x1ba>
movl   $0x1,0x80521ac
00
jmp    80490a9 <__sprintf_chk@plt+0x239>
xchg   %ax,%ax
nop
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804e830
push   $0x804e7c0
push   %ecx
push   %esi
push   $0x8048ed0
call   8048cd0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x805218b,%eax
sub    $0x8052188,%eax
cmp    $0x6,%eax
ja     8049701 <__sprintf_chk@plt+0x891>
repz ret
mov    $0x0,%eax
test   %eax,%eax
je     80496ff <__sprintf_chk@plt+0x88f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8052188,(%esp)
call   *%eax
leave
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8052188,%eax
sub    $0x8052188,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804973a <__sprintf_chk@plt+0x8ca>
repz ret
mov    $0x0,%edx
test   %edx,%edx
je     8049738 <__sprintf_chk@plt+0x8c8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x8052188,(%esp)
call   *%edx
leave
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x80521a4
jne    804977c <__sprintf_chk@plt+0x90c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   80496f0 <__sprintf_chk@plt+0x880>
movb   $0x1,0x80521a4
leave
repz ret
xchg   %ax,%ax
mov    0x8051f10,%eax
test   %eax,%eax
je     80497a7 <__sprintf_chk@plt+0x937>
mov    $0x0,%eax
test   %eax,%eax
je     80497a7 <__sprintf_chk@plt+0x937>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8051f10,(%esp)
call   *%eax
leave
jmp    8049720 <__sprintf_chk@plt+0x8b0>
jmp    8049720 <__sprintf_chk@plt+0x8b0>
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x804e850,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x804f0fa,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x40,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1005c,%esp
mov    %edx,0x2c(%esp)
mov    0x10074(%esp),%edx
lea    0x4c(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    0x10078(%esp),%ebp
mov    %eax,(%esp)
mov    %gs:0x14,%ecx
mov    %ecx,0x1004c(%esp)
xor    %ecx,%ecx
mov    %edx,0x28(%esp)
lea    0x44(%esp),%edx
mov    %edx,0x10(%esp)
lea    0x40(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x3c(%esp),%edx
mov    %edx,0x8(%esp)
movl   $0x200,0x3c(%esp)
call   804d6e0 <__sprintf_chk@plt+0x4870>
test   %eax,%eax
jne    8049a48 <__sprintf_chk@plt+0xbd8>
mov    0x40(%esp),%edi
mov    0x3c(%esp),%eax
mov    %ebx,(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
call   804d650 <__sprintf_chk@plt+0x47e0>
mov    0x10070(%esp),%ecx
xor    %edx,%edx
mov    %esi,(%esp)
movl   $0x1,0x48(%esp)
test   %ecx,%ecx
setne  %dl
mov    %edx,0x14(%esp)
lea    0x48(%esp),%edx
mov    %edx,0x10(%esp)
mov    0x3c(%esp),%edx
mov    %eax,0x8(%esp)
mov    %eax,0x44(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0xc(%esp)
mov    0x40(%esp),%edx
mov    %edx,0x4(%esp)
call   804d110 <__sprintf_chk@plt+0x42a0>
test   %ebp,%ebp
mov    0x20(%esp),%eax
je     80498dd <__sprintf_chk@plt+0xa6d>
xor    %edx,%edx
cmpl   $0x2,0x48(%esp)
sete   %dl
mov    %edx,0x0(%ebp)
mov    0x44(%esp),%ebp
test   %ebp,%ebp
je     804997b <__sprintf_chk@plt+0xb0b>
mov    0x3c(%esp),%edx
test   %edx,%edx
jle    8049940 <__sprintf_chk@plt+0xad0>
mov    %edi,%ebp
add    $0x7,%ebp
lea    0xe(%edi),%edx
cmovs  %edx,%ebp
sar    $0x3,%ebp
mov    %ebp,%edi
imul   %eax,%edi
shl    $0x5,%ebp
mov    %ebp,0x24(%esp)
xor    %ebp,%ebp
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
jne    8049a07 <__sprintf_chk@plt+0xb97>
mov    0x3c(%esp),%edx
add    $0x1,%ebp
add    0x24(%esp),%ebx
cmp    %ebp,%edx
jg     8049910 <__sprintf_chk@plt+0xaa0>
mov    0x80521b0,%ecx
test   %ecx,%ecx
jne    80499b2 <__sprintf_chk@plt+0xb42>
mov    0x28(%esp),%eax
test   %eax,%eax
je     804995c <__sprintf_chk@plt+0xaec>
mov    0x3c(%esp),%eax
mov    0x28(%esp),%edx
mov    %eax,(%edx)
mov    0x1004c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8049a54 <__sprintf_chk@plt+0xbe4>
add    $0x1005c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x5,0x8(%esp)
movl   $0x804f105,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
jmp    804994a <__sprintf_chk@plt+0xada>
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%esi
movl   $0x804ed2c,0x4(%esp)
mov    0x40(%esp),%ebx
movl   $0x0,(%esp)
mov    %edx,0x20(%esp)
call   8048b80 <dcgettext@plt>
mov    0x2c(%esp),%ecx
mov    0x20(%esp),%edx
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804994a <__sprintf_chk@plt+0xada>
movl   $0x5,0x8(%esp)
movl   $0x804f11c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x4a,(%esp)
call   8048c70 <exit@plt>
movl   $0x47,(%esp)
call   8048c70 <exit@plt>
call   8048ba0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
add    $0xe,%ebp
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %eax,0x2c(%esp)
mov    %ecx,%eax
mov    0x50(%esp),%esi
add    $0x7,%eax
cmovns %eax,%ebp
mov    0x50(%esp),%eax
sar    $0x3,%ebp
imul   %ebp,%esi
shl    $0x5,%ebp
sub    $0x1,%eax
cmp    $0x1f,%eax
mov    %ecx,0x24(%esp)
mov    %ebp,0x20(%esp)
ja     8049dd4 <__sprintf_chk@plt+0xf64>
mov    0x24(%esp),%eax
sub    $0x1,%eax
cmp    $0x1f,%eax
ja     8049d8b <__sprintf_chk@plt+0xf1b>
mov    0x54(%esp),%ebp
mov    %edx,%ebx
mov    $0x80,%edi
mov    0x50(%esp),%edx
test   %ebp,%ebp
cmovne 0x54(%esp),%edx
cmpl   $0x80,0x58(%esp)
cmovge 0x58(%esp),%edi
imul   0x20(%esp),%edi
mov    %edx,0x54(%esp)
mov    %edi,(%esp)
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    %edi,0x8(%esp)
mov    %ebx,%edi
xor    %ebx,%ebx
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x28(%esp)
call   8048d10 <memset@plt>
mov    0x58(%esp),%eax
mov    0x28(%esp),%ebp
test   %eax,%eax
jle    8049b2f <__sprintf_chk@plt+0xcbf>
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
nop
mov    %ebp,0x4(%esp)
add    $0x1,%ebx
add    %esi,%ebp
mov    %edi,(%esp)
mov    %esi,0x8(%esp)
call   8048b30 <memcpy@plt>
add    0x20(%esp),%edi
cmp    0x58(%esp),%ebx
jne    8049b10 <__sprintf_chk@plt+0xca0>
mov    0x20(%esp),%edi
test   %edi,%edi
jle    8049b6d <__sprintf_chk@plt+0xcfd>
mov    0x20(%esp),%edx
mov    $0x1,%ecx
mov    0x20(%esp),%ebp
mov    0x28(%esp),%eax
shl    $0x5,%edx
add    %edx,%ebp
add    0x28(%esp),%ebp
add    %edx,%eax
xor    %edx,%edx
lea    0x0(%esi),%esi
cmpb   $0x0,(%eax)
cmovne %ecx,%edx
add    $0x1,%eax
cmp    %ebp,%eax
jne    8049b58 <__sprintf_chk@plt+0xce8>
test   %edx,%edx
jne    8049c30 <__sprintf_chk@plt+0xdc0>
mov    0x80521b0,%esi
test   %esi,%esi
je     8049bef <__sprintf_chk@plt+0xd7f>
mov    0x54(%esp),%edx
mov    0x5c(%esp),%ebx
cmp    %edx,0x50(%esp)
movl   $0x5,0x8(%esp)
sete   %al
test   %ebx,%ebx
setne  %dl
test   %al,%al
jne    8049ce0 <__sprintf_chk@plt+0xe70>
test   %dl,%dl
je     8049d71 <__sprintf_chk@plt+0xf01>
movl   $0x804edc4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x5c(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x18(%esp)
mov    0x54(%esp),%edx
mov    %eax,0x4(%esp)
mov    %edx,0x14(%esp)
mov    0x50(%esp),%edx
mov    %edx,0x10(%esp)
mov    0x24(%esp),%edx
mov    %edx,0xc(%esp)
mov    0x58(%esp),%edx
mov    %edx,0x8(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x24(%esp),%eax
mov    0x54(%esp),%edx
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %edx,0x10(%esp)
mov    0x58(%esp),%edx
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804d940 <__sprintf_chk@plt+0x4ad0>
test   %eax,%eax
jne    8049df6 <__sprintf_chk@plt+0xf86>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804ed54,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    0x80521c8,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ed78,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048b10 <fflush@plt>
movl   $0x2,(%esp)
call   8048b70 <sleep@plt>
mov    0x80521b0,%esi
test   %esi,%esi
je     8049bef <__sprintf_chk@plt+0xd7f>
jmp    8049b77 <__sprintf_chk@plt+0xd07>
lea    0x0(%esi),%esi
test   %dl,%dl
jne    8049d28 <__sprintf_chk@plt+0xeb8>
movl   $0x804f164,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x50(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x10(%esp)
mov    0x24(%esp),%edx
mov    %eax,0x4(%esp)
mov    %edx,0xc(%esp)
mov    0x58(%esp),%edx
mov    %edx,0x8(%esp)
call   8048d60 <__printf_chk@plt>
jmp    8049bef <__sprintf_chk@plt+0xd7f>
lea    0x0(%esi),%esi
movl   $0x804ed98,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x5c(%esp),%edx
mov    %edx,0x14(%esp)
mov    0x50(%esp),%edx
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0x10(%esp)
mov    0x24(%esp),%edx
mov    %edx,0xc(%esp)
mov    0x58(%esp),%edx
mov    %edx,0x8(%esp)
call   8048d60 <__printf_chk@plt>
jmp    8049bef <__sprintf_chk@plt+0xd7f>
movl   $0x804edf4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x54(%esp),%edx
jmp    8049d40 <__sprintf_chk@plt+0xed0>
movl   $0x5,0x8(%esp)
movl   $0x804f14c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x24(%esp),%edx
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %edx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f133,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x50(%esp),%edx
jmp    8049dab <__sprintf_chk@plt+0xf3b>
movl   $0x47,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
test   %ecx,%ecx
mov    %eax,0x28(%esp)
mov    %ecx,0x24(%esp)
jle    804a03b <__sprintf_chk@plt+0x11cb>
lea    (%ecx,%ecx,2),%eax
xor    %esi,%esi
mov    %edx,0x1c(%esp)
lea    (%edx,%eax,4),%ebx
mov    %edx,%ecx
lea    0x0(%esi),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     8049e53 <__sprintf_chk@plt+0xfe3>
xchg   %ax,%ax
mov    0x8(%eax),%edx
test   %edx,%edx
je     8049e4d <__sprintf_chk@plt+0xfdd>
cmpl   $0x1,(%edx)
adc    $0x0,%esi
mov    (%eax),%eax
test   %eax,%eax
jne    8049e40 <__sprintf_chk@plt+0xfd0>
add    $0xc,%ecx
cmp    %ebx,%ecx
jne    8049e38 <__sprintf_chk@plt+0xfc8>
lea    0x0(,%esi,4),%eax
xor    %ebx,%ebx
mov    %eax,(%esp)
xor    %edi,%edi
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    %esi,0x2c(%esp)
mov    %ebx,%esi
mov    %eax,0x20(%esp)
nop
mov    0x80521a8,%ecx
xor    %eax,%eax
mov    0x1c(%esp),%edx
test   %ecx,%ecx
mov    (%edx),%ebx
jne    8049fe8 <__sprintf_chk@plt+0x1178>
xchg   %ax,%ax
test   %ebx,%ebx
je     8049eb0 <__sprintf_chk@plt+0x1040>
mov    0x8(%ebx),%ebp
test   %ebp,%ebp
je     8049ea6 <__sprintf_chk@plt+0x1036>
mov    0x0(%ebp),%edx
test   %edx,%edx
je     8049f98 <__sprintf_chk@plt+0x1128>
test   %eax,%eax
jne    8049f20 <__sprintf_chk@plt+0x10b0>
mov    (%ebx),%ebx
test   %ebx,%ebx
jne    8049e94 <__sprintf_chk@plt+0x1024>
test   %eax,%eax
jne    8049fd0 <__sprintf_chk@plt+0x1160>
add    $0x1,%edi
addl   $0xc,0x1c(%esp)
cmp    0x24(%esp),%edi
jne    8049e78 <__sprintf_chk@plt+0x1008>
mov    %esi,%ebx
mov    0x2c(%esp),%esi
cmp    %esi,%ebx
jne    804a059 <__sprintf_chk@plt+0x11e9>
mov    0x80521b0,%eax
test   %eax,%eax
jne    804a00a <__sprintf_chk@plt+0x119a>
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %bx,0x38(%esp)
mov    %eax,0x3c(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   804c5a0 <__sprintf_chk@plt+0x3730>
test   %eax,%eax
jne    804a0a4 <__sprintf_chk@plt+0x1234>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x804f191,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
test   %ebp,%ebp
je     8049f5a <__sprintf_chk@plt+0x10ea>
mov    0x8(%ebp),%eax
movl   $0x804f18b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x0(%ebp),%ebp
test   %ebp,%ebp
jne    8049f38 <__sprintf_chk@plt+0x10c8>
movl   $0x804f199,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x80521a8,%eax
mov    (%ebx),%ebx
test   %eax,%eax
je     804a052 <__sprintf_chk@plt+0x11e2>
movl   $0x2c,(%esp)
call   8048d30 <putchar@plt>
mov    0x80521a8,%eax
jmp    8049e90 <__sprintf_chk@plt+0x1020>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%ecx
lea    (%ecx,%esi,4),%edx
mov    0x8(%ebp),%ecx
add    $0x1,%esi
test   %eax,%eax
mov    %di,0x2(%edx)
mov    %cx,(%edx)
je     8049eaa <__sprintf_chk@plt+0x103a>
mov    %ecx,0x8(%esp)
movl   $0x804f18b,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
jmp    8049f6e <__sprintf_chk@plt+0x10fe>
xchg   %ax,%ax
movl   $0xa,(%esp)
call   8048d30 <putchar@plt>
jmp    8049eb8 <__sprintf_chk@plt+0x1048>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0x8(%esp)
movl   $0x804f180,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x80521a8,%eax
jmp    8049e90 <__sprintf_chk@plt+0x1020>
movl   $0x5,0x8(%esp)
movl   $0x804ee18,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
jmp    8049ee1 <__sprintf_chk@plt+0x1071>
movl   $0x0,(%esp)
xor    %ebx,%ebx
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    %eax,0x20(%esp)
jmp    8049ed4 <__sprintf_chk@plt+0x1064>
xor    %eax,%eax
jmp    8049e90 <__sprintf_chk@plt+0x1020>
movl   $0x5,0x8(%esp)
movl   $0x804f19c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x80521c8,%edx
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x46,(%esp)
call   8048c70 <exit@plt>
movl   $0x47,(%esp)
call   8048c70 <exit@plt>
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x48c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x47c(%esp)
xor    %eax,%eax
cmpb   $0x0,(%edx)
jne    804a413 <__sprintf_chk@plt+0x15a3>
cmp    $0x20,%ecx
ja     804a298 <__sprintf_chk@plt+0x1428>
test   %ecx,%ecx
je     804a298 <__sprintf_chk@plt+0x1428>
lea    0x468(%esp),%esi
mov    %ecx,0x10(%esp)
movl   $0x804f1fa,0xc(%esp)
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e70 <__sprintf_chk@plt>
movl   $0x8052110,0x8(%esp)
movl   $0x8052128,0x4(%esp)
mov    %esi,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
movl   $0x1,0x3c(%esp)
test   %eax,%eax
mov    %eax,%edi
je     804a6ab <__sprintf_chk@plt+0x183b>
cmpl   $0x1,0x80521b0
jle    804a177 <__sprintf_chk@plt+0x1307>
movl   $0x5,0x8(%esp)
movl   $0x804f235,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x4a8(%esp),%ecx
lea    0x64(%esp),%edx
xor    %eax,%eax
movl   $0x0,0x1c(%esp)
mov    %edi,(%esp)
movl   $0x0,0x54(%esp)
test   %ecx,%ecx
cmove  %edx,%eax
mov    %eax,0x20(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x54(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x50(%esp),%eax
mov    %eax,0x4(%esp)
movl   $0x0,0x50(%esp)
movl   $0x0,0x60(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0x58(%esp)
movl   $0x8,0x4c(%esp)
movl   $0x0,0x64(%esp)
call   804c690 <__sprintf_chk@plt+0x3820>
mov    %edi,(%esp)
test   %eax,%eax
jne    804a358 <__sprintf_chk@plt+0x14e8>
call   804b2f0 <__sprintf_chk@plt+0x2480>
mov    0x4c(%esp),%ecx
mov    0x4a0(%esp),%edx
mov    0x60(%esp),%eax
movl   $0x8052200,0xc(%esp)
lea    0xe(%ecx),%ebx
mov    %edx,0x4(%esp)
mov    %ecx,%edx
add    $0x7,%edx
cmovns %edx,%ebx
sar    $0x3,%ebx
imul   %eax,%ebx
mov    %eax,0x8(%esp)
mov    0x5c(%esp),%eax
mov    %eax,%edx
sar    $0x1f,%edx
idiv   %ebx
mov    0x54(%esp),%edx
mov    %eax,(%esp)
mov    %ebp,%eax
call   8049a60 <__sprintf_chk@plt+0xbf0>
mov    0x64(%esp),%edx
test   %edx,%edx
je     804a527 <__sprintf_chk@plt+0x16b7>
mov    0x4a8(%esp),%edi
test   %edi,%edi
je     804a510 <__sprintf_chk@plt+0x16a0>
mov    0x47c(%esp),%eax
xor    %gs:0x14,%eax
jne    804a747 <__sprintf_chk@plt+0x18d7>
add    $0x48c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8052110,0x8(%esp)
xor    %ebx,%ebx
mov    $0x804f1d8,%esi
movl   $0x8052128,0x4(%esp)
movl   $0x804f1d8,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
movl   $0x1,0x3c(%esp)
test   %eax,%eax
mov    %eax,%edi
jne    804a13e <__sprintf_chk@plt+0x12ce>
movl   $0x8052110,0x8(%esp)
mov    $0x804f1b5,%esi
movl   $0x8052128,0x4(%esp)
movl   $0x804f1b5,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%edi
jne    804a13e <__sprintf_chk@plt+0x12ce>
movl   $0x8052110,0x8(%esp)
mov    $0x804f1c1,%esi
movl   $0x8052128,0x4(%esp)
movl   $0x804f1c1,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%edi
jne    804a13e <__sprintf_chk@plt+0x12ce>
movl   $0x8052110,0x8(%esp)
movl   $0x8052128,0x4(%esp)
movl   $0x804f1cd,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%edi
je     804a7b3 <__sprintf_chk@plt+0x1943>
mov    $0x804f1cd,%esi
jmp    804a13e <__sprintf_chk@plt+0x12ce>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804b2f0 <__sprintf_chk@plt+0x2480>
mov    0x58(%esp),%eax
cmp    $0x17,%eax
jle    804a458 <__sprintf_chk@plt+0x15e8>
mov    0x50(%esp),%ecx
mov    $0x804f253,%edi
mov    %ecx,0x3c(%esp)
mov    0x3c(%esp),%esi
mov    $0x18,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804a442 <__sprintf_chk@plt+0x15d2>
mov    0x3c(%esp),%edi
xor    %ecx,%ecx
add    0x3c(%esp),%eax
lea    0x68(%esp),%edx
add    $0x18,%edi
cmp    %edi,%eax
jbe    804a559 <__sprintf_chk@plt+0x16e9>
lea    0x0(%esi,%eiz,1),%esi
cmp    %eax,%edi
jae    804a4d0 <__sprintf_chk@plt+0x1660>
cmpb   $0xa,(%edi)
mov    %edi,%edx
jne    804a3c9 <__sprintf_chk@plt+0x1559>
jmp    804a4d0 <__sprintf_chk@plt+0x1660>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0xa,(%edx)
je     804a4e0 <__sprintf_chk@plt+0x1670>
add    $0x1,%edx
cmp    %eax,%edx
xchg   %ax,%ax
jne    804a3c0 <__sprintf_chk@plt+0x1550>
movl   $0x5,0x8(%esp)
movl   $0x804ee3c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x8052110,0x8(%esp)
movl   $0x8052128,0x4(%esp)
mov    %edx,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%edi
je     804a6e5 <__sprintf_chk@plt+0x1875>
movl   $0x0,0x3c(%esp)
jmp    804a13e <__sprintf_chk@plt+0x12ce>
cmp    $0x2634,%eax
je     804a589 <__sprintf_chk@plt+0x1719>
cmp    $0x8000,%eax
je     804a5f4 <__sprintf_chk@plt+0x1784>
mov    %eax,%edx
sar    $0x1f,%edx
shr    $0x18,%edx
lea    (%eax,%edx,1),%ecx
and    $0xff,%ecx
sub    %edx,%ecx
cmp    $0x28,%ecx
jne    804a72a <__sprintf_chk@plt+0x18ba>
test   %eax,%eax
lea    0xff(%eax),%ebx
cmovns %eax,%ebx
mov    0x50(%esp),%eax
movl   $0x100,0x60(%esp)
sar    $0x8,%ebx
movl   $0x8,0x4c(%esp)
mov    %eax,0x3c(%esp)
mov    $0x100,%eax
mov    0x3c(%esp),%edx
mov    %eax,0x8(%esp)
mov    %ebp,%eax
movl   $0x8052200,0xc(%esp)
mov    %ebx,(%esp)
add    %ecx,%edx
mov    0x4a0(%esp),%ecx
mov    %ecx,0x4(%esp)
mov    $0x8,%ecx
call   8049a60 <__sprintf_chk@plt+0xbf0>
jmp    804a279 <__sprintf_chk@plt+0x1409>
cmp    %eax,%edi
je     804a3d2 <__sprintf_chk@plt+0x1562>
mov    %edi,%edx
lea    0x0(%esi),%esi
movb   $0x0,(%edx)
add    $0x1,%edx
cmp    $0x100,%ecx
je     804a696 <__sprintf_chk@plt+0x1826>
mov    0x50(%esp),%eax
lea    0x68(%esp),%esi
add    0x58(%esp),%eax
mov    %edi,0x68(%esp,%ecx,4)
add    $0x1,%ecx
cmp    %edx,%eax
jbe    804a557 <__sprintf_chk@plt+0x16e7>
mov    %edx,%edi
jmp    804a3a8 <__sprintf_chk@plt+0x1538>
mov    0x60(%esp),%ecx
mov    %ebp,%eax
call   8049e10 <__sprintf_chk@plt+0xfa0>
mov    0x64(%esp),%esi
test   %esi,%esi
jne    804a279 <__sprintf_chk@plt+0x1409>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804a279 <__sprintf_chk@plt+0x1409>
mov    0x4a8(%esp),%eax
test   %eax,%eax
jne    804a279 <__sprintf_chk@plt+0x1409>
movl   $0x804f24b,0x4(%esp)
mov    %ebp,(%esp)
call   804de90 <__sprintf_chk@plt+0x5020>
jmp    804a279 <__sprintf_chk@plt+0x1409>
mov    %esi,%edx
mov    0x4a8(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
mov    0x4a4(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4a0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,%eax
call   804a800 <__sprintf_chk@plt+0x1990>
jmp    804a279 <__sprintf_chk@plt+0x1409>
test   %ebx,%ebx
je     804a772 <__sprintf_chk@plt+0x1902>
cmp    $0xe,%ebx
je     804a677 <__sprintf_chk@plt+0x1807>
cmp    $0x10,%ebx
lea    0x0(%esi),%esi
je     804a6de <__sprintf_chk@plt+0x186e>
cmp    $0x8,%ebx
je     804a6d7 <__sprintf_chk@plt+0x1867>
movl   $0x5,0x8(%esp)
movl   $0x804eee0,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x40,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804ef24,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    0x4a0(%esp),%ebx
mov    $0x0,%ecx
mov    0x50(%esp),%edx
mov    $0x200,%eax
movl   $0x4000,0x58(%esp)
movl   $0x200,0x60(%esp)
test   %ebx,%ebx
mov    $0x20,%ebx
movl   $0x8,0x4c(%esp)
mov    %edx,0x3c(%esp)
jne    804a49f <__sprintf_chk@plt+0x162f>
movl   $0x10,0x4a0(%esp)
00
jmp    804a49f <__sprintf_chk@plt+0x162f>
mov    $0x102e,%ecx
movl   $0x100,0x60(%esp)
mov    $0x100,%eax
movl   $0x8,0x4c(%esp)
jmp    804a49f <__sprintf_chk@plt+0x162f>
movl   $0x5,0x8(%esp)
movl   $0x804f26c,0x4(%esp)
jmp    804a3e2 <__sprintf_chk@plt+0x1572>
movl   $0x8052110,0x8(%esp)
movl   $0x8052128,0x4(%esp)
movl   $0x804f1d8,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%edi
je     804a74c <__sprintf_chk@plt+0x18dc>
mov    $0x804f1d8,%esi
jmp    804a13e <__sprintf_chk@plt+0x12ce>
mov    $0x1e34,%ecx
jmp    804a67c <__sprintf_chk@plt+0x180c>
mov    $0x28,%ecx
jmp    804a67c <__sprintf_chk@plt+0x180c>
movl   $0x5,0x8(%esp)
movl   $0x804f21b,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x42,(%esp)
call   8048c70 <exit@plt>
test   %ecx,%ecx
je     804a474 <__sprintf_chk@plt+0x1604>
movl   $0x5,0x8(%esp)
movl   $0x804f287,0x4(%esp)
jmp    804a3e2 <__sprintf_chk@plt+0x1572>
call   8048ba0 <__stack_chk_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f206,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x804f1d8,0xc(%esp)
jmp    804a705 <__sprintf_chk@plt+0x1895>
movl   $0x5,0x8(%esp)
movl   $0x804ee60,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x40,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f1e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x42,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
cmp    $0x1,%ecx
mov    %eax,0x5c(%esp)
mov    %edx,0x58(%esp)
mov    %ecx,0x54(%esp)
je     804ab71 <__sprintf_chk@plt+0x1d01>
mov    0x54(%esp),%ecx
movl   $0x0,0x7c(%esp)
test   %ecx,%ecx
jle    804aae8 <__sprintf_chk@plt+0x1c78>
lea    0x7c(%esp),%eax
xor    %esi,%esi
movl   $0x0,0x50(%esp)
xor    %edi,%edi
movl   $0x0,0x4c(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x48(%esp)
mov    %eax,0x40(%esp)
jmp    804a8d3 <__sprintf_chk@plt+0x1a63>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,0x4c(%esp)
jne    804abf6 <__sprintf_chk@plt+0x1d86>
mov    0x50(%esp),%ebp
test   %ebp,%ebp
jne    804a9d3 <__sprintf_chk@plt+0x1b63>
mov    0x78(%esp),%eax
mov    %eax,0x50(%esp)
mov    0x74(%esp),%eax
add    $0x1,%esi
add    %eax,0x44(%esp)
mov    0x48(%esp),%eax
add    0x70(%esp),%edi
mov    %eax,(%esp)
mov    %edi,0x4(%esp)
call   804b640 <__sprintf_chk@plt+0x27d0>
mov    %edi,%edx
mov    %eax,0x48(%esp)
mov    0x70(%esp),%eax
sub    %eax,%edx
mov    %eax,0x8(%esp)
mov    0x68(%esp),%eax
add    0x48(%esp),%edx
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   8048b30 <memcpy@plt>
cmp    0x54(%esp),%esi
je     804ab08 <__sprintf_chk@plt+0x1c98>
mov    0x58(%esp),%eax
mov    (%eax,%esi,4),%ebx
movl   $0x8052110,0x8(%esp)
movl   $0x8052128,0x4(%esp)
mov    %ebx,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%ebp
je     804aa80 <__sprintf_chk@plt+0x1c10>
mov    0xac(%esp),%edx
xor    %eax,%eax
mov    %ebp,(%esp)
movl   $0x0,0x68(%esp)
movl   $0x0,0x64(%esp)
test   %edx,%edx
cmove  0x40(%esp),%eax
movl   $0x0,0x70(%esp)
movl   $0x0,0x6c(%esp)
mov    %eax,0x20(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x74(%esp)
mov    %eax,0x1c(%esp)
lea    0x74(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x78(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x70(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x68(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x64(%esp),%eax
mov    %eax,0x4(%esp)
call   804c690 <__sprintf_chk@plt+0x3820>
test   %eax,%eax
jne    804aba5 <__sprintf_chk@plt+0x1d35>
mov    %ebp,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
mov    0x78(%esp),%ebx
mov    0x74(%esp),%ebp
mov    %ebx,%eax
add    $0x7,%eax
lea    0xe(%ebx),%ecx
cmovns %eax,%ecx
mov    0x70(%esp),%eax
sar    $0x3,%ecx
imul   %ebp,%ecx
mov    %eax,%edx
sar    $0x1f,%edx
idiv   %ecx
mov    %eax,%ecx
mov    0x80521b0,%eax
test   %eax,%eax
jne    804aa28 <__sprintf_chk@plt+0x1bb8>
mov    0x4c(%esp),%eax
test   %eax,%eax
jne    804a868 <__sprintf_chk@plt+0x19f8>
mov    0x50(%esp),%ebp
mov    %ecx,0x4c(%esp)
test   %ebp,%ebp
je     804a87e <__sprintf_chk@plt+0x1a0e>
mov    0x50(%esp),%eax
cmp    0x78(%esp),%eax
je     804a886 <__sprintf_chk@plt+0x1a16>
movl   $0x5,0x8(%esp)
movl   $0x804f000,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x804ef9c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
call   8048b80 <dcgettext@plt>
mov    0x3c(%esp),%ecx
movl   $0x8052200,0x14(%esp)
mov    %ebx,0xc(%esp)
mov    %ebp,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x3c(%esp),%ecx
jmp    804a9b7 <__sprintf_chk@plt+0x1b47>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80520fc,0x8(%esp)
movl   $0x8052104,0x4(%esp)
mov    %ebx,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%ebp
jne    804a8fc <__sprintf_chk@plt+0x1a8c>
movl   $0x5,0x8(%esp)
movl   $0x804f21b,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x42,(%esp)
call   8048c70 <exit@plt>
nop
movl   $0x0,0x50(%esp)
movl   $0x0,0x4c(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x48(%esp)
mov    0x44(%esp),%eax
mov    0x48(%esp),%edx
mov    0x50(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x4c(%esp),%eax
mov    %eax,(%esp)
mov    0x5c(%esp),%eax
call   8049a60 <__sprintf_chk@plt+0xbf0>
mov    0x7c(%esp),%edx
test   %edx,%edx
je     804ab4e <__sprintf_chk@plt+0x1cde>
mov    0xac(%esp),%ebx
test   %ebx,%ebx
je     804ab59 <__sprintf_chk@plt+0x1ce9>
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x44(%esp),%ecx
mov    0x5c(%esp),%eax
call   8049e10 <__sprintf_chk@plt+0xfa0>
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xac(%esp),%eax
mov    0xa0(%esp),%ecx
mov    %eax,0x8(%esp)
mov    0xa8(%esp),%eax
mov    %eax,0x4(%esp)
mov    0xa4(%esp),%eax
mov    %eax,(%esp)
mov    0x5c(%esp),%eax
mov    (%edx),%edx
call   804a0b0 <__sprintf_chk@plt+0x1240>
jmp    804ab4e <__sprintf_chk@plt+0x1cde>
movl   $0x5,0x8(%esp)
movl   $0x804ef5c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    %ebp,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804efc4,0x4(%esp)
jmp    804a9f1 <__sprintf_chk@plt+0x1b81>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x804f29c,0x4(%esp)
mov    %eax,(%esp)
call   8048ce0 <write@plt>
cmp    $0x3,%eax
je     804ac50 <__sprintf_chk@plt+0x1de0>
movl   $0x804f29c,0x8(%esp)
movl   $0x804f30b,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x804f2d7,0x4(%esp)
mov    %eax,(%esp)
call   8048ce0 <write@plt>
cmp    $0x3,%eax
je     804aca0 <__sprintf_chk@plt+0x1e30>
movl   $0x804f2d7,0x8(%esp)
movl   $0x804f30b,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x24,%esp
mov    (%eax),%eax
movl   $0x1,0x80521e0
00
mov    %eax,(%esp)
call   8048cc0 <strlen@plt>
mov    $0x8052200,%ecx
mov    (%ecx),%ebx
add    $0x4,%ecx
lea    -0x1010101(%ebx),%edx
not    %ebx
and    %ebx,%edx
and    $0x80808080,%edx
je     804acd0 <__sprintf_chk@plt+0x1e60>
mov    %edx,%ebx
shr    $0x10,%ebx
test   $0x8080,%edx
cmove  %ebx,%edx
lea    0x2(%ecx),%ebx
cmove  %ebx,%ecx
add    %dl,%dl
sbb    $0x3,%ecx
sub    $0x8052200,%ecx
lea    0x2(%ecx,%eax,1),%eax
mov    %eax,(%esp)
call   804b620 <__sprintf_chk@plt+0x27b0>
movl   $0x8052200,0x14(%esp)
mov    %eax,%ebx
mov    (%esi),%eax
movl   $0x804f308,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %ebx,(%esp)
call   8048e70 <__sprintf_chk@plt>
movl   $0x804f7b2,0x4(%esp)
mov    %ebx,(%esp)
call   8048b90 <popen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804ad68 <__sprintf_chk@plt+0x1ef8>
mov    %ebx,(%esp)
call   804b6c0 <__sprintf_chk@plt+0x2850>
add    $0x24,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x804f30e,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   804b6c0 <__sprintf_chk@plt+0x2850>
add    $0x24,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
jmp    804adc0 <__sprintf_chk@plt+0x1f50>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
movl   $0x804f7b2,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
mov    %eax,%edi
je     804ae48 <__sprintf_chk@plt+0x1fd8>
movl   $0x2e,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048db0 <strrchr@plt>
test   %eax,%eax
mov    %eax,%esi
je     804ae48 <__sprintf_chk@plt+0x1fd8>
mov    0x8052138,%edx
test   %edx,%edx
je     804ae48 <__sprintf_chk@plt+0x1fd8>
mov    $0x8052134,%ebx
jmp    804ae1a <__sprintf_chk@plt+0x1faa>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%ebx
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804ae48 <__sprintf_chk@plt+0x1fd8>
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
jne    804ae10 <__sprintf_chk@plt+0x1fa0>
mov    %edi,(%esp)
call   8048b60 <fclose@plt>
add    $0x10,%esp
lea    0x4(%ebx),%eax
pop    %ebx
pop    %esi
pop    %edi
jmp    804acb0 <__sprintf_chk@plt+0x1e40>
lea    0x0(%esi),%esi
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804ae60 <__sprintf_chk@plt+0x1ff0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    %edx,(%esp)
mov    %eax,0x44(%esp)
mov    %edx,0x38(%esp)
mov    %ecx,0x40(%esp)
movl   $0x0,0x80521e0
00
call   8048e50 <opendir@plt>
test   %eax,%eax
mov    %eax,%edi
je     804b2b9 <__sprintf_chk@plt+0x2449>
mov    0x38(%esp),%edx
mov    %edx,(%esp)
call   8048cc0 <strlen@plt>
movl   $0x2f,0x4(%esp)
mov    %eax,%ebx
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8048cb0 <strchr@plt>
movl   $0x0,0x3c(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
je     804aedc <__sprintf_chk@plt+0x206c>
sub    0x44(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   804b690 <__sprintf_chk@plt+0x2820>
mov    %eax,0x3c(%esp)
add    $0x2,%ebx
movl   $0x0,0x2c(%esp)
mov    %ebx,0x34(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048d90 <readdir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b1b0 <__sprintf_chk@plt+0x2340>
lea    0xb(%ebx),%esi
mov    %esi,(%esp)
call   8048cc0 <strlen@plt>
cmp    $0x2,%eax
ja     804af30 <__sprintf_chk@plt+0x20c0>
cmpb   $0x2e,0xb(%ebx)
jne    804af30 <__sprintf_chk@plt+0x20c0>
movzbl 0xc(%ebx),%edx
test   %dl,%dl
je     804aef0 <__sprintf_chk@plt+0x2080>
cmp    $0x2e,%dl
jne    804af30 <__sprintf_chk@plt+0x20c0>
cmpb   $0x0,0xd(%ebx)
je     804aef0 <__sprintf_chk@plt+0x2080>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%ebp
add    %eax,%ebp
cmp    $0x1000,%ebp
ja     804b158 <__sprintf_chk@plt+0x22e8>
mov    0x30(%esp),%ecx
test   %ecx,%ecx
je     804b2c0 <__sprintf_chk@plt+0x2450>
mov    0x3c(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
jne    804b2c0 <__sprintf_chk@plt+0x2450>
mov    0x40(%esp),%ecx
movl   $0x1,0x48(%esp)
test   %ecx,%ecx
setne  0x4c(%esp)
mov    %ebp,(%esp)
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    0x38(%esp),%edx
mov    %esi,0x14(%esp)
movl   $0x804f323,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%ebp
call   8048e70 <__sprintf_chk@plt>
lea    0x58(%esp),%ecx
mov    %ecx,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x3,(%esp)
call   8048bd0 <__xstat@plt>
test   %eax,%eax
jne    804afdf <__sprintf_chk@plt+0x216f>
mov    0x68(%esp),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
je     804b1e8 <__sprintf_chk@plt+0x2378>
mov    %ebp,(%esp)
call   804b6c0 <__sprintf_chk@plt+0x2850>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
jne    804aef0 <__sprintf_chk@plt+0x2080>
mov    0x30(%esp),%edx
test   %edx,%edx
jne    804aef0 <__sprintf_chk@plt+0x2080>
movzbl 0xb(%ebx),%eax
mov    %esi,%edx
test   %al,%al
je     804b298 <__sprintf_chk@plt+0x2428>
mov    0x44(%esp),%ecx
movzbl (%ecx),%ebx
cmp    %bl,%al
jne    804b037 <__sprintf_chk@plt+0x21c7>
mov    %ecx,%eax
jmp    804b026 <__sprintf_chk@plt+0x21b6>
lea    0x0(%esi,%eiz,1),%esi
cmp    %bl,%cl
mov    %ebp,%eax
jne    804b037 <__sprintf_chk@plt+0x21c7>
add    $0x1,%edx
movzbl 0x1(%eax),%ebx
movzbl (%edx),%ecx
lea    0x1(%eax),%ebp
test   %cl,%cl
jne    804b020 <__sprintf_chk@plt+0x21b0>
test   %bl,%bl
jne    804aef0 <__sprintf_chk@plt+0x2080>
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0x804f323,0xc(%esp)
movl   $0x1000,0x8(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052200,(%esp)
mov    %edx,0x28(%esp)
call   8048e70 <__sprintf_chk@plt>
lea    0x58(%esp),%ecx
mov    %ecx,0x8(%esp)
movl   $0x8052200,0x4(%esp)
movl   $0x3,(%esp)
call   8048bd0 <__xstat@plt>
mov    0x28(%esp),%edx
test   %eax,%eax
jne    804aef0 <__sprintf_chk@plt+0x2080>
mov    0x68(%esp),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
jne    804aef0 <__sprintf_chk@plt+0x2080>
mov    0xd0(%esp),%eax
mov    (%eax),%ebx
test   %ebx,%ebx
je     804aef0 <__sprintf_chk@plt+0x2080>
mov    0x8052138,%ecx
mov    %eax,%ebp
mov    %edx,%esi
mov    %edi,0x48(%esp)
mov    %ecx,0x4c(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
je     804b2ac <__sprintf_chk@plt+0x243c>
mov    %ebx,(%esp)
call   8048cc0 <strlen@plt>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
mov    %eax,%edi
call   8048df0 <strncmp@plt>
test   %eax,%eax
jne    804b27b <__sprintf_chk@plt+0x240b>
mov    0x4c(%esp),%eax
test   %eax,%eax
je     804b27b <__sprintf_chk@plt+0x240b>
lea    (%esi,%edi,1),%ebx
mov    $0x8052134,%edi
jmp    804b12e <__sprintf_chk@plt+0x22be>
xchg   %ax,%ax
add    $0x8,%edi
mov    0x4(%edi),%eax
test   %eax,%eax
je     804b27b <__sprintf_chk@plt+0x240b>
mov    (%edi),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
jne    804b120 <__sprintf_chk@plt+0x22b0>
mov    %edi,%esi
mov    0x48(%esp),%edi
lea    0x4(%esi),%eax
call   804acb0 <__sprintf_chk@plt+0x1e40>
mov    %eax,%edx
jmp    804b252 <__sprintf_chk@plt+0x23e2>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x804f354,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   8048d90 <readdir@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804af02 <__sprintf_chk@plt+0x2092>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    804b250 <__sprintf_chk@plt+0x23e0>
mov    0x40(%esp),%eax
test   %eax,%eax
jle    804b250 <__sprintf_chk@plt+0x23e0>
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8048c40 <seekdir@plt>
movl   $0x1,0x2c(%esp)
jmp    804aef0 <__sprintf_chk@plt+0x2080>
lea    0x0(%esi),%esi
mov    0x48(%esp),%edx
xor    %ax,%ax
test   %edx,%edx
jne    804b230 <__sprintf_chk@plt+0x23c0>
cmpb   $0x0,0x4c(%esp)
je     804b216 <__sprintf_chk@plt+0x23a6>
mov    0xd0(%esp),%eax
mov    %ebp,%edx
mov    0x40(%esp),%ecx
mov    %eax,(%esp)
mov    0x44(%esp),%eax
sub    $0x1,%ecx
call   804ae60 <__sprintf_chk@plt+0x1ff0>
test   %eax,%eax
je     804afdf <__sprintf_chk@plt+0x216f>
mov    %ebp,(%esp)
mov    %eax,0x28(%esp)
call   804b6c0 <__sprintf_chk@plt+0x2850>
mov    0x28(%esp),%edx
jmp    804b252 <__sprintf_chk@plt+0x23e2>
mov    0xd0(%esp),%edx
xor    %ecx,%ecx
mov    0x30(%esp),%eax
mov    %edx,(%esp)
mov    %ebp,%edx
add    $0x1,%eax
call   804ae60 <__sprintf_chk@plt+0x1ff0>
test   %eax,%eax
jne    804b216 <__sprintf_chk@plt+0x23a6>
jmp    804b1f3 <__sprintf_chk@plt+0x2383>
xor    %edx,%edx
mov    0x3c(%esp),%eax
mov    %edx,0x28(%esp)
mov    %eax,(%esp)
call   804b6c0 <__sprintf_chk@plt+0x2850>
mov    %edi,(%esp)
call   8048e30 <closedir@plt>
mov    0x28(%esp),%edx
add    $0xbc,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x4,%ebp
mov    0x0(%ebp),%ebx
test   %ebx,%ebx
jne    804b0d2 <__sprintf_chk@plt+0x2262>
mov    0x48(%esp),%edi
jmp    804aef0 <__sprintf_chk@plt+0x2080>
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
movzbl (%eax),%ebx
test   %bl,%bl
jne    804aef0 <__sprintf_chk@plt+0x2080>
jmp    804b03f <__sprintf_chk@plt+0x21cf>
mov    0x48(%esp),%edi
call   804adc0 <__sprintf_chk@plt+0x1f50>
mov    %eax,%edx
jmp    804b252 <__sprintf_chk@plt+0x23e2>
xor    %edx,%edx
jmp    804b26e <__sprintf_chk@plt+0x23fe>
lea    0x0(%esi),%esi
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804afe7 <__sprintf_chk@plt+0x2177>
mov    0x40(%esp),%eax
test   %eax,%eax
je     804afe7 <__sprintf_chk@plt+0x2177>
movb   $0x1,0x4c(%esp)
movl   $0x0,0x48(%esp)
jmp    804af79 <__sprintf_chk@plt+0x2109>
lea    0x0(%esi),%esi
mov    0x80521e0,%edx
mov    0x4(%esp),%eax
test   %edx,%edx
jne    804b308 <__sprintf_chk@plt+0x2498>
mov    %eax,0x4(%esp)
jmp    8048b60 <fclose@plt>
nop
jmp    8048c90 <pclose@plt>
lea    0x0(%esi),%esi
mov    0x8(%esp),%ecx
mov    0x4(%esp),%eax
test   %ecx,%ecx
jne    804b328 <__sprintf_chk@plt+0x24b8>
mov    %eax,0x4(%esp)
jmp    8048b60 <fclose@plt>
lea    0x0(%esi),%esi
jmp    8048c90 <pclose@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb0(%esp),%edi
mov    0xb4(%esp),%esi
mov    %edi,(%esp)
call   8048cc0 <strlen@plt>
cmp    $0xfff,%eax
ja     804b390 <__sprintf_chk@plt+0x2520>
add    $0x1,%eax
movl   $0x1000,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048c50 <__memcpy_chk@plt>
call   804adc0 <__sprintf_chk@plt+0x1f50>
test   %eax,%eax
mov    %eax,%ebp
je     804b3a0 <__sprintf_chk@plt+0x2530>
add    $0x9c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x9c,%esp
xor    %ebp,%ebp
pop    %ebx
mov    %ebp,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmpb   $0x2f,(%edi)
je     804b46c <__sprintf_chk@plt+0x25fc>
mov    (%esi),%ebx
test   %ebx,%ebx
je     804b390 <__sprintf_chk@plt+0x2520>
mov    %edi,0x24(%esp)
mov    0xb8(%esp),%edi
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8048cc0 <strlen@plt>
test   %eax,%eax
mov    %eax,%edx
je     804b468 <__sprintf_chk@plt+0x25f8>
cmpb   $0x2a,-0x1(%ebx,%eax,1)
jne    804b435 <__sprintf_chk@plt+0x25c5>
xor    %ebp,%ebp
jmp    804b3ec <__sprintf_chk@plt+0x257c>
lea    0x0(%esi),%esi
movzbl -0x1(%ebx,%edx,1),%ecx
mov    %edx,%eax
cmp    $0x2a,%cl
jne    804b440 <__sprintf_chk@plt+0x25d0>
add    $0x1,%ebp
sub    $0x1,%edx
jne    804b3e0 <__sprintf_chk@plt+0x2570>
movl   $0x804f330,(%esp)
call   804b670 <__sprintf_chk@plt+0x2800>
mov    %eax,%ebx
mov    0x24(%esp),%eax
mov    %ebp,%ecx
mov    %ebx,%edx
mov    %edi,(%esp)
add    $0x4,%esi
call   804ae60 <__sprintf_chk@plt+0x1ff0>
mov    %ebx,(%esp)
mov    %eax,%ebp
call   804b6c0 <__sprintf_chk@plt+0x2850>
mov    (%esi),%ebx
test   %ebx,%ebx
je     804b381 <__sprintf_chk@plt+0x2511>
test   %ebp,%ebp
je     804b3c0 <__sprintf_chk@plt+0x2550>
lea    0x0(%esi),%esi
jmp    804b381 <__sprintf_chk@plt+0x2511>
movzbl -0x1(%ebx,%eax,1),%ecx
xor    %ebp,%ebp
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x2f,%cl
je     804b451 <__sprintf_chk@plt+0x25e1>
jmp    804b458 <__sprintf_chk@plt+0x25e8>
nop
cmpb   $0x2f,-0x1(%ebx,%edx,1)
mov    %edx,%eax
jne    804b458 <__sprintf_chk@plt+0x25e8>
sub    $0x1,%edx
jne    804b448 <__sprintf_chk@plt+0x25d8>
jmp    804b3f4 <__sprintf_chk@plt+0x2584>
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804b690 <__sprintf_chk@plt+0x2820>
mov    %eax,%ebx
jmp    804b402 <__sprintf_chk@plt+0x2592>
xor    %ebp,%ebp
jmp    804b3f4 <__sprintf_chk@plt+0x2584>
mov    %edi,(%esp)
call   8048cc0 <strlen@plt>
mov    0xb8(%esp),%edx
mov    (%edx),%esi
add    $0x1,%eax
mov    %eax,0x28(%esp)
test   %esi,%esi
je     804b381 <__sprintf_chk@plt+0x2511>
mov    %ebp,0x2c(%esp)
mov    %edx,%ebp
mov    %edi,0x24(%esp)
jmp    804b4a6 <__sprintf_chk@plt+0x2636>
add    $0x4,%ebp
mov    0x0(%ebp),%esi
test   %esi,%esi
je     804b5ef <__sprintf_chk@plt+0x277f>
mov    %esi,(%esp)
call   8048cc0 <strlen@plt>
mov    0x28(%esp),%ebx
add    %eax,%ebx
cmp    $0x1000,%ebx
ja     804b498 <__sprintf_chk@plt+0x2628>
mov    0x24(%esp),%edx
mov    %esi,0x14(%esp)
movl   $0x804f32b,0xc(%esp)
movl   $0x1000,0x8(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048e70 <__sprintf_chk@plt>
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8052200,0x4(%esp)
movl   $0x3,(%esp)
call   8048bd0 <__xstat@plt>
test   %eax,%eax
jne    804b520 <__sprintf_chk@plt+0x26b0>
mov    0x48(%esp),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804b5f8 <__sprintf_chk@plt+0x2788>
mov    0x8052138,%eax
mov    $0x8052134,%esi
test   %eax,%eax
jne    804b546 <__sprintf_chk@plt+0x26d6>
jmp    804b498 <__sprintf_chk@plt+0x2628>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%esi
mov    0x4(%esi),%edi
test   %edi,%edi
je     804b498 <__sprintf_chk@plt+0x2628>
mov    (%esi),%edi
mov    %edi,(%esp)
call   8048cc0 <strlen@plt>
add    %ebx,%eax
cmp    $0x1000,%eax
ja     804b538 <__sprintf_chk@plt+0x26c8>
mov    0x24(%esp),%edx
mov    %edi,0x18(%esp)
mov    0x0(%ebp),%eax
movl   $0x804f329,0xc(%esp)
movl   $0x1000,0x8(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x14(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048e70 <__sprintf_chk@plt>
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8052200,0x4(%esp)
movl   $0x3,(%esp)
call   8048bd0 <__xstat@plt>
test   %eax,%eax
jne    804b538 <__sprintf_chk@plt+0x26c8>
mov    0x48(%esp),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
jne    804b538 <__sprintf_chk@plt+0x26c8>
movl   $0x4,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048d50 <access@plt>
test   %eax,%eax
jne    804b538 <__sprintf_chk@plt+0x26c8>
lea    0x4(%esi),%eax
call   804acb0 <__sprintf_chk@plt+0x1e40>
mov    %eax,%ebp
jmp    804b381 <__sprintf_chk@plt+0x2511>
mov    0x2c(%esp),%ebp
jmp    804b381 <__sprintf_chk@plt+0x2511>
movl   $0x804f7b2,0x4(%esp)
movl   $0x8052200,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
je     804b520 <__sprintf_chk@plt+0x26b0>
mov    %eax,%ebp
jmp    804b381 <__sprintf_chk@plt+0x2511>
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048c30 <malloc@plt>
test   %eax,%eax
je     804b637 <__sprintf_chk@plt+0x27c7>
add    $0x1c,%esp
ret
call   8048e80 <__sprintf_chk@plt+0x10>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048c20 <realloc@plt>
test   %eax,%eax
je     804b65f <__sprintf_chk@plt+0x27ef>
add    $0x1c,%esp
ret
nop
call   8048e80 <__sprintf_chk@plt+0x10>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048d20 <__strdup@plt>
test   %eax,%eax
je     804b687 <__sprintf_chk@plt+0x2817>
add    $0x1c,%esp
ret
call   8048e80 <__sprintf_chk@plt+0x10>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048d80 <strndup@plt>
test   %eax,%eax
je     804b6af <__sprintf_chk@plt+0x283f>
add    $0x1c,%esp
ret
nop
call   8048e80 <__sprintf_chk@plt+0x10>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
test   %eax,%eax
je     804b6d3 <__sprintf_chk@plt+0x2863>
mov    %eax,(%esp)
call   8048b20 <free@plt>
xor    %eax,%eax
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
movl   $0x2,0x4(%esp)
mov    %eax,(%esp)
call   8048c80 <open@plt>
test   %eax,%eax
js     804b700 <__sprintf_chk@plt+0x2890>
add    $0x18,%esp
pop    %ebx
ret
nop
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8048c80 <open@plt>
test   %eax,%eax
jns    804b6fa <__sprintf_chk@plt+0x288a>
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   8048c80 <open@plt>
mov    $0xffffffff,%edx
test   %eax,%eax
cmovs  %edx,%eax
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x28,%esp
mov    %eax,(%esp)
movb   $0x0,0x1f(%esp)
call   8048e00 <isatty@plt>
test   %eax,%eax
jne    804b760 <__sprintf_chk@plt+0x28f0>
add    $0x28,%esp
xor    %eax,%eax
pop    %ebx
ret
xchg   %ax,%ax
lea    0x1f(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x4b33,0x4(%esp)
mov    %ebx,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804b757 <__sprintf_chk@plt+0x28e7>
movzbl 0x1f(%esp),%eax
sub    $0x1,%eax
cmp    $0x1,%al
setbe  %al
add    $0x28,%esp
movzbl %al,%eax
pop    %ebx
ret
jmp    804b7a0 <__sprintf_chk@plt+0x2930>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
test   %esi,%esi
je     804b7d8 <__sprintf_chk@plt+0x2968>
mov    %esi,%eax
call   804b6e0 <__sprintf_chk@plt+0x2870>
test   %eax,%eax
mov    %eax,%ebx
js     804b868 <__sprintf_chk@plt+0x29f8>
call   804b740 <__sprintf_chk@plt+0x28d0>
test   %eax,%eax
je     804b860 <__sprintf_chk@plt+0x29f0>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x804f386,%eax
xor    %esi,%esi
nop
call   804b6e0 <__sprintf_chk@plt+0x2870>
test   %eax,%eax
mov    %eax,%ebx
js     804b7fc <__sprintf_chk@plt+0x298c>
call   804b740 <__sprintf_chk@plt+0x28d0>
test   %eax,%eax
jne    804b7cb <__sprintf_chk@plt+0x295b>
mov    %ebx,(%esp)
call   8048e20 <close@plt>
add    $0x1,%esi
mov    0x804f41c(,%esi,4),%eax
test   %eax,%eax
jne    804b7e0 <__sprintf_chk@plt+0x2970>
xor    %ebx,%ebx
mov    %ebx,%eax
call   804b740 <__sprintf_chk@plt+0x28d0>
test   %eax,%eax
jne    804b7cb <__sprintf_chk@plt+0x295b>
add    $0x1,%ebx
cmp    $0x3,%ebx
jne    804b80c <__sprintf_chk@plt+0x299c>
movl   $0x5,0x8(%esp)
movl   $0x804f3e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
mov    %ebx,(%esp)
call   8048e20 <close@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f396,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    $0xffffffff,%esi
push   %ebx
xor    %ebx,%ebx
sub    $0x4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
lea    0x2c(%esp),%edi
mov    $0x804f386,%eax
movl   $0x7665642f,0x31(%esp)
movl   $0x7974742f,0x35(%esp)
movw   $0x0,0x39(%esp)
movb   $0x0,0x3b(%esp)
jmp    804b937 <__sprintf_chk@plt+0x2ac7>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0x8(%esp)
movl   $0x4b44,0x4(%esp)
mov    %ebp,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
js     804b94b <__sprintf_chk@plt+0x2adb>
mov    0x2c(%esp),%eax
cmp    $0x3,%eax
je     804ba48 <__sprintf_chk@plt+0x2bd8>
cmp    $0xffffffff,%esi
jne    804b94b <__sprintf_chk@plt+0x2adb>
cmp    $0x1,%eax
jne    804b94b <__sprintf_chk@plt+0x2adb>
mov    %ebp,%esi
add    $0x1,%ebx
mov    0x804f41c(,%ebx,4),%eax
test   %eax,%eax
je     804b961 <__sprintf_chk@plt+0x2af1>
call   804b6e0 <__sprintf_chk@plt+0x2870>
test   %eax,%eax
mov    %eax,%ebp
js     804b929 <__sprintf_chk@plt+0x2ab9>
call   804b740 <__sprintf_chk@plt+0x28d0>
test   %eax,%eax
jne    804b8f8 <__sprintf_chk@plt+0x2a88>
add    $0x1,%ebx
mov    %ebp,(%esp)
call   8048e20 <close@plt>
mov    0x804f41c(,%ebx,4),%eax
test   %eax,%eax
jne    804b937 <__sprintf_chk@plt+0x2ac7>
mov    $0x1,%ebx
lea    0x39(%esp),%edi
jmp    804b9ad <__sprintf_chk@plt+0x2b3d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%edx
mov    %edx,0x8(%esp)
movl   $0x4b44,0x4(%esp)
mov    %ebp,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
js     804b9f6 <__sprintf_chk@plt+0x2b86>
mov    0x2c(%esp),%eax
cmp    $0x3,%eax
je     804ba48 <__sprintf_chk@plt+0x2bd8>
cmp    $0xffffffff,%esi
jne    804b9f6 <__sprintf_chk@plt+0x2b86>
cmp    $0x1,%eax
jne    804b9f6 <__sprintf_chk@plt+0x2b86>
mov    %ebp,%esi
add    $0x1,%ebx
cmp    $0xd,%ebx
je     804ba06 <__sprintf_chk@plt+0x2b96>
mov    %ebx,0x14(%esp)
movl   $0x804f203,0x10(%esp)
movl   $0x3,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x3,0x4(%esp)
mov    %edi,(%esp)
call   8048ae0 <__snprintf_chk@plt>
lea    0x31(%esp),%eax
call   804b6e0 <__sprintf_chk@plt+0x2870>
test   %eax,%eax
mov    %eax,%ebp
js     804b9a5 <__sprintf_chk@plt+0x2b35>
call   804b740 <__sprintf_chk@plt+0x28d0>
test   %eax,%eax
nop
jne    804b970 <__sprintf_chk@plt+0x2b00>
mov    %ebp,(%esp)
add    $0x1,%ebx
call   8048e20 <close@plt>
cmp    $0xd,%ebx
jne    804b9ad <__sprintf_chk@plt+0x2b3d>
movl   $0x5,0x8(%esp)
movl   $0x804f3e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
nop
cmp    $0xffffffff,%esi
je     804ba55 <__sprintf_chk@plt+0x2be5>
mov    %esi,(%esp)
call   8048e20 <close@plt>
mov    0x3c(%esp),%edx
xor    %gs:0x14,%edx
mov    %ebp,%eax
jne    804ba6c <__sprintf_chk@plt+0x2bfc>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8048ba0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x4c,%esp
mov    $0x2,%ecx
mov    %ebx,0x3c(%esp)
mov    %eax,%ebx
mov    %esi,0x40(%esp)
mov    %eax,%esi
mov    %edi,0x44(%esp)
mov    $0x804f438,%edi
mov    %ebp,0x48(%esp)
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804baca <__sprintf_chk@plt+0x2c5a>
lea    0x2(%eax),%esi
movl   $0x804f43b,0x4(%esp)
mov    %esi,(%esp)
call   8048e40 <strspn@plt>
mov    %esi,(%esp)
mov    %eax,%edi
call   8048cc0 <strlen@plt>
cmp    %eax,%edi
je     804bc08 <__sprintf_chk@plt+0x2d98>
movzbl (%ebx),%eax
cmp    $0x30,%al
mov    %al,0x1f(%esp)
je     804bba0 <__sprintf_chk@plt+0x2d30>
mov    %ebx,(%esp)
call   8048cc0 <strlen@plt>
mov    %eax,%ebp
movl   $0x804f461,0x4(%esp)
mov    %ebx,(%esp)
call   8048e40 <strspn@plt>
cmp    %ebp,%eax
je     804bc40 <__sprintf_chk@plt+0x2dd0>
mov    $0x804f46c,%edi
mov    $0x2,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804bb14 <__sprintf_chk@plt+0x2ca4>
cmp    $0x6,%ebp
je     804bbe8 <__sprintf_chk@plt+0x2d78>
cmp    $0x3,%ebp
je     804bb88 <__sprintf_chk@plt+0x2d18>
cmpb   $0x27,0x1f(%esp)
jne    804bc30 <__sprintf_chk@plt+0x2dc0>
lea    0x28(%esp),%eax
add    $0x1,%ebx
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %ebx,0x2c(%esp)
call   804d520 <__sprintf_chk@plt+0x46b0>
mov    0x28(%esp),%edx
test   %edx,%edx
mov    %eax,0x24(%esp)
jne    804bc30 <__sprintf_chk@plt+0x2dc0>
mov    0x2c(%esp),%edx
cmpb   $0x27,(%edx)
jne    804bc30 <__sprintf_chk@plt+0x2dc0>
cmpb   $0x0,0x1(%edx)
jne    804bc30 <__sprintf_chk@plt+0x2dc0>
mov    0x3c(%esp),%ebx
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
mov    0x48(%esp),%ebp
add    $0x4c,%esp
ret
lea    0x0(%esi),%esi
cmpb   $0x27,0x1f(%esp)
mov    $0xffffffff,%eax
jne    804bb6e <__sprintf_chk@plt+0x2cfe>
cmpb   $0x27,0x2(%ebx)
jne    804bb24 <__sprintf_chk@plt+0x2cb4>
movsbl 0x1(%ebx),%eax
jmp    804bb6e <__sprintf_chk@plt+0x2cfe>
movl   $0x804f455,0x4(%esp)
mov    %ebx,(%esp)
call   8048e40 <strspn@plt>
mov    %ebx,(%esp)
mov    %eax,%esi
call   8048cc0 <strlen@plt>
cmp    %eax,%esi
mov    %eax,%ebp
jne    804bae3 <__sprintf_chk@plt+0x2c73>
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804f45e,0x4(%esp)
mov    %ebx,(%esp)
call   8048cf0 <__isoc99_sscanf@plt>
mov    0x24(%esp),%eax
jmp    804bb6e <__sprintf_chk@plt+0x2cfe>
lea    0x0(%esi),%esi
lea    0x2(%ebx),%esi
movl   $0x804f43b,0x4(%esp)
mov    %esi,(%esp)
call   8048e40 <strspn@plt>
cmp    $0x4,%eax
jne    804bb19 <__sprintf_chk@plt+0x2ca9>
lea    0x0(%esi,%eiz,1),%esi
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804f452,0x4(%esp)
mov    %esi,(%esp)
call   8048cf0 <__isoc99_sscanf@plt>
mov    0x24(%esp),%eax
jmp    804bb6e <__sprintf_chk@plt+0x2cfe>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    804bb6e <__sprintf_chk@plt+0x2cfe>
lea    0x0(%esi),%esi
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804f203,0x4(%esp)
mov    %ebx,(%esp)
call   8048cf0 <__isoc99_sscanf@plt>
mov    0x24(%esp),%eax
jmp    804bb6e <__sprintf_chk@plt+0x2cfe>
jmp    804bc70 <__sprintf_chk@plt+0x2e00>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x49c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x48c(%esp)
xor    %eax,%eax
mov    0x4b4(%esp),%ebx
lea    -0x1000(%eax),%edx
mov    %al,0x28c(%esp,%eax,1)
mov    %dx,0x8c(%esp,%eax,2)
add    $0x1,%eax
cmp    $0x100,%eax
jne    804bc90 <__sprintf_chk@plt+0x2e20>
test   %ebx,%ebx
je     804be8a <__sprintf_chk@plt+0x301a>
movl   $0x8052158,0x8(%esp)
movl   $0x805214c,0x4(%esp)
mov    %ebx,(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,%ebp
je     804c058 <__sprintf_chk@plt+0x31e8>
lea    0x34(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8052200,0x4(%esp)
movl   $0x3,(%esp)
call   8048bd0 <__xstat@plt>
test   %eax,%eax
jne    804c00b <__sprintf_chk@plt+0x319b>
mov    0x60(%esp),%eax
cmp    $0x100,%eax
je     804be19 <__sprintf_chk@plt+0x2fa9>
cmp    $0x200,%eax
je     804bf5a <__sprintf_chk@plt+0x30ea>
mov    0x80521b0,%eax
test   %eax,%eax
jne    804bf99 <__sprintf_chk@plt+0x3129>
movl   $0x0,0x2c(%esp)
xor    %esi,%esi
xor    %edi,%edi
movl   $0x0,0x28(%esp)
lea    0x38c(%esp),%ebx
nop
mov    %ebp,0x8(%esp)
movl   $0xff,0x4(%esp)
mov    %ebx,(%esp)
call   8048b50 <fgets@plt>
test   %eax,%eax
je     804bf06 <__sprintf_chk@plt+0x3096>
add    $0x1,%edi
test   %esi,%esi
jne    804bed0 <__sprintf_chk@plt+0x3060>
movl   $0x804f46c,0x4(%esp)
mov    %ebx,(%esp)
call   8048af0 <strstr@plt>
xor    %edx,%edx
test   %eax,%eax
setne  %dl
mov    %edx,%esi
movl   $0x804f484,0x4(%esp)
mov    %ebx,(%esp)
call   8048d70 <strtok@plt>
test   %eax,%eax
je     804bd40 <__sprintf_chk@plt+0x2ed0>
cmpb   $0x23,(%eax)
je     804bd40 <__sprintf_chk@plt+0x2ed0>
movl   $0x804f488,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x24(%esp)
call   8048d70 <strtok@plt>
mov    0x24(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
je     804bd40 <__sprintf_chk@plt+0x2ed0>
mov    %edx,%eax
mov    %ecx,0x24(%esp)
call   804ba80 <__sprintf_chk@plt+0x2c10>
mov    0x24(%esp),%ecx
mov    %eax,%edx
mov    %ecx,%eax
mov    %edx,0x24(%esp)
call   804ba80 <__sprintf_chk@plt+0x2c10>
mov    0x24(%esp),%edx
cmp    $0xff,%edx
ja     804bee0 <__sprintf_chk@plt+0x3070>
test   %eax,%eax
js     804bee0 <__sprintf_chk@plt+0x3070>
cmp    $0xffff,%eax
jg     804bee0 <__sprintf_chk@plt+0x3070>
cmp    $0xff,%eax
mov    %ax,0x8c(%esp,%edx,2)
jg     804bf50 <__sprintf_chk@plt+0x30e0>
mov    %al,0x28c(%esp,%edx,1)
jmp    804bd40 <__sprintf_chk@plt+0x2ed0>
mov    0x80521b0,%eax
test   %eax,%eax
je     804be56 <__sprintf_chk@plt+0x2fe6>
movl   $0x5,0x8(%esp)
movl   $0x804f52c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
lea    0x28c(%esp),%edx
mov    %ebp,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %edx,(%esp)
call   8048c10 <fread@plt>
cmp    $0x1,%eax
jne    804c0f3 <__sprintf_chk@plt+0x3283>
mov    %ebp,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
mov    0x4b0(%esp),%edx
lea    0x28c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804c340 <__sprintf_chk@plt+0x34d0>
test   %eax,%eax
jne    804c091 <__sprintf_chk@plt+0x3221>
mov    0x48c(%esp),%eax
xor    %gs:0x14,%eax
jne    804c09d <__sprintf_chk@plt+0x322d>
add    $0x49c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%esi
jmp    804bd80 <__sprintf_chk@plt+0x2f10>
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
test   %eax,%eax
jne    804bef9 <__sprintf_chk@plt+0x3089>
mov    %edi,0x2c(%esp)
movl   $0xffffffff,0x28(%esp)
jmp    804bd40 <__sprintf_chk@plt+0x2ed0>
movl   $0xffffffff,0x28(%esp)
jmp    804bd40 <__sprintf_chk@plt+0x2ed0>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
jne    804c0a2 <__sprintf_chk@plt+0x3232>
mov    %ebp,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
test   %esi,%esi
je     804be8a <__sprintf_chk@plt+0x301a>
mov    0x4b0(%esp),%edx
lea    0x8c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804c3e0 <__sprintf_chk@plt+0x3570>
test   %eax,%eax
je     804beac <__sprintf_chk@plt+0x303c>
jmp    804c091 <__sprintf_chk@plt+0x3221>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%esi
jmp    804bd40 <__sprintf_chk@plt+0x2ed0>
mov    0x80521b0,%eax
test   %eax,%eax
jne    804bfd2 <__sprintf_chk@plt+0x3162>
lea    0x8c(%esp),%eax
mov    %ebp,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %eax,(%esp)
call   8048c10 <fread@plt>
cmp    $0x1,%eax
jne    804c0f3 <__sprintf_chk@plt+0x3283>
mov    %ebp,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
jmp    804bf22 <__sprintf_chk@plt+0x30b2>
movl   $0x5,0x8(%esp)
movl   $0x804f5b8,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804bd24 <__sprintf_chk@plt+0x2eb4>
movl   $0x5,0x8(%esp)
movl   $0x804f588,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804bf63 <__sprintf_chk@plt+0x30f3>
movl   $0x8052200,(%esp)
call   8048be0 <perror@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f46f,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f508,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
call   8048ba0 <__stack_chk_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f5e4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x2c(%esp),%edx
movl   $0x8052200,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f564,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0xc(%esp)
jmp    804c078 <__sprintf_chk@plt+0x3208>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x33c,%esp
mov    0x354(%esp),%edi
movl   $0x804f2d2,0x4(%esp)
mov    0x350(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x32c(%esp)
xor    %eax,%eax
mov    %edi,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804c2ce <__sprintf_chk@plt+0x345e>
lea    0x22c(%esp),%ebx
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804c2f0 <__sprintf_chk@plt+0x3480>
lea    0x2c(%esp),%ecx
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
test   %eax,%eax
sete   0x1f(%esp)
call   804c390 <__sprintf_chk@plt+0x3520>
mov    0x18(%esp),%ecx
test   %eax,%eax
je     804c1b8 <__sprintf_chk@plt+0x3348>
cmpb   $0x0,0x1f(%esp)
jne    804c268 <__sprintf_chk@plt+0x33f8>
movl   $0x5,0x8(%esp)
movl   $0x804f4a8,0x4(%esp)
jmp    804c29d <__sprintf_chk@plt+0x342d>
nop
cmpb   $0x0,0x1f(%esp)
je     804c1df <__sprintf_chk@plt+0x336f>
mov    %ecx,%esi
jmp    804c1d3 <__sprintf_chk@plt+0x3363>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2,%esi
cmp    %ebx,%esi
je     804c268 <__sprintf_chk@plt+0x33f8>
movzwl (%esi),%eax
xor    %al,%al
cmp    $0xf000,%eax
je     804c1c8 <__sprintf_chk@plt+0x3358>
mov    %ebp,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ecx,(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
jne    804c28d <__sprintf_chk@plt+0x341d>
mov    %ebp,(%esp)
call   8048b60 <fclose@plt>
mov    0x80521b0,%eax
test   %eax,%eax
je     804c245 <__sprintf_chk@plt+0x33d5>
movl   $0x5,0x8(%esp)
movl   $0x804f4c1,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %edi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
mov    0x32c(%esp),%eax
xor    %gs:0x14,%eax
jne    804c2e2 <__sprintf_chk@plt+0x3472>
add    $0x33c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
je     804c204 <__sprintf_chk@plt+0x3394>
movl   $0x5,0x8(%esp)
movl   $0x804f48d,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
mov    %edi,(%esp)
call   8048be0 <perror@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
call   8048ba0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x4b40,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804c320 <__sprintf_chk@plt+0x34b0>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f613,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c315 <__sprintf_chk@plt+0x34a5>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x4b41,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804c370 <__sprintf_chk@plt+0x3500>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f61f,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c365 <__sprintf_chk@plt+0x34f5>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x4b69,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804c3c0 <__sprintf_chk@plt+0x3550>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f62b,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c3b5 <__sprintf_chk@plt+0x3545>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x4b6a,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804c410 <__sprintf_chk@plt+0x35a0>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f63a,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c405 <__sprintf_chk@plt+0x3595>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x3c,%esp
mov    %ebx,0x30(%esp)
mov    0x40(%esp),%ebx
mov    %esi,0x34(%esp)
lea    0x28(%esp),%esi
mov    %esi,0x8(%esp)
movl   $0x4b66,0x4(%esp)
mov    %ebx,(%esp)
mov    %edi,0x38(%esp)
movw   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
je     804c50b <__sprintf_chk@plt+0x369b>
call   8048d40 <__errno_location@plt>
cmpl   $0xc,(%eax)
jne    804c530 <__sprintf_chk@plt+0x36c0>
movzwl 0x28(%esp),%edi
test   %di,%di
je     804c530 <__sprintf_chk@plt+0x36c0>
lea    0x0(,%edi,4),%eax
mov    %eax,(%esp)
call   8048c30 <malloc@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
je     804c556 <__sprintf_chk@plt+0x36e6>
mov    %esi,0x8(%esp)
movl   $0x4b66,0x4(%esp)
mov    %ebx,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804c543 <__sprintf_chk@plt+0x36d3>
movzwl 0x28(%esp),%ebx
cmp    %edi,%ebx
je     804c50b <__sprintf_chk@plt+0x369b>
movl   $0x5,0x8(%esp)
movl   $0x804f67c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    0x2c(%esp),%edx
mov    %eax,(%ecx)
xor    %eax,%eax
mov    %edx,0x4(%ecx)
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
add    $0x3c,%esp
ret
xchg   %ax,%ax
movl   $0x804f649,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c51e <__sprintf_chk@plt+0x36ae>
movl   $0x804f657,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804c51e <__sprintf_chk@plt+0x36ae>
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804f373,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    804c51e <__sprintf_chk@plt+0x36ae>
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%eax
mov    0x30(%esp),%ebx
mov    0x38(%esp),%esi
test   %eax,%eax
je     804c668 <__sprintf_chk@plt+0x37f8>
mov    (%eax),%edx
lea    0x1a(%esp),%edi
movzwl 0x4(%eax),%eax
mov    %edx,0x1a(%esp)
mov    %ax,0x1e(%esp)
jmp    804c609 <__sprintf_chk@plt+0x3799>
nop
test   %esi,%esi
je     804c640 <__sprintf_chk@plt+0x37d0>
mov    %esi,0x8(%esp)
movl   $0x4b67,0x4(%esp)
mov    %ebx,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
je     804c640 <__sprintf_chk@plt+0x37d0>
call   8048d40 <__errno_location@plt>
cmpl   $0xc,(%eax)
jne    804c650 <__sprintf_chk@plt+0x37e0>
movzwl 0x1e(%esp),%eax
cmp    $0x63,%ax
ja     804c650 <__sprintf_chk@plt+0x37e0>
add    $0x1,%eax
mov    %ax,0x1e(%esp)
mov    %edi,0x8(%esp)
movl   $0x4b68,0x4(%esp)
mov    %ebx,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
je     804c5d0 <__sprintf_chk@plt+0x3760>
movl   $0x804f662,(%esp)
call   8048be0 <perror@plt>
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f670,(%esp)
call   8048be0 <perror@plt>
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
movw   $0x0,0x1a(%esp)
lea    0x1a(%esp),%edi
movw   $0x0,0x1c(%esp)
movw   $0x0,0x1e(%esp)
jmp    804c609 <__sprintf_chk@plt+0x3799>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb0(%esp),%edi
test   %edi,%edi
je     804cb97 <__sprintf_chk@plt+0x3d27>
movl   $0x4000,(%esp)
xor    %ebx,%ebx
mov    $0x4000,%ebp
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    %eax,%esi
xchg   %ax,%ax
mov    %ebp,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    (%esi,%ebx,1),%eax
mov    %edi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8048c10 <fread@plt>
mov    %edi,(%esp)
add    %eax,%ebx
call   8048b40 <ferror@plt>
test   %eax,%eax
jne    804cdd7 <__sprintf_chk@plt+0x3f67>
mov    %edi,(%esp)
call   8048ca0 <feof@plt>
test   %eax,%eax
jne    804c713 <__sprintf_chk@plt+0x38a3>
cmp    %ebx,%ebp
ja     804c6c0 <__sprintf_chk@plt+0x3850>
add    %ebp,%ebp
mov    %esi,(%esp)
mov    %ebp,0x4(%esp)
call   804b640 <__sprintf_chk@plt+0x27d0>
mov    %eax,%esi
jmp    804c6c0 <__sprintf_chk@plt+0x3850>
mov    0xb4(%esp),%eax
test   %eax,%eax
je     804c727 <__sprintf_chk@plt+0x38b7>
mov    0xb4(%esp),%edx
mov    %esi,(%edx)
mov    0xb8(%esp),%eax
test   %eax,%eax
je     804c73b <__sprintf_chk@plt+0x38cb>
mov    0xb8(%esp),%ecx
mov    %ebx,(%ecx)
cmp    $0x3,%ebx
jbe    804ca81 <__sprintf_chk@plt+0x3c11>
movzbl (%esi),%eax
cmp    $0x36,%al
je     804cc0a <__sprintf_chk@plt+0x3d9a>
cmp    $0x1f,%ebx
jbe    804ca81 <__sprintf_chk@plt+0x3c11>
cmp    $0x72,%al
jne    804ca81 <__sprintf_chk@plt+0x3c11>
cmpb   $0xb5,0x1(%esi)
jne    804ca81 <__sprintf_chk@plt+0x3c11>
cmpb   $0x4a,0x2(%esi)
jne    804ca81 <__sprintf_chk@plt+0x3c11>
cmpb   $0x86,0x3(%esi)
jne    804ca81 <__sprintf_chk@plt+0x3c11>
movzbl 0x8(%esi),%eax
movzbl 0x9(%esi),%edx
mov    0x4(%esi),%edi
movzbl 0xa(%esi),%ecx
mov    %al,0x7f(%esp)
movzbl 0xb(%esi),%eax
mov    %dl,0x79(%esp)
movzbl 0xc(%esi),%edx
test   %edi,%edi
movzbl 0x13(%esi),%ebp
mov    %cl,0x78(%esp)
movzbl 0x10(%esi),%ecx
mov    %al,0x40(%esp)
movzbl 0x12(%esi),%eax
mov    %dl,0x30(%esp)
movzbl 0x11(%esi),%edx
mov    %al,0x28(%esp)
movzbl 0x14(%esi),%eax
mov    %al,0x74(%esp)
movzbl 0x15(%esi),%eax
mov    %al,0x7c(%esp)
movzbl 0x16(%esi),%eax
mov    %al,0x7a(%esp)
movzbl 0x17(%esi),%eax
mov    %al,0x50(%esp)
movzbl 0x1c(%esi),%eax
mov    %al,0x7b(%esp)
movzbl 0x1d(%esi),%eax
mov    %al,0x7e(%esp)
movzbl 0x1e(%esi),%eax
mov    %al,0x7d(%esp)
movzbl 0x1f(%esi),%eax
mov    %al,0x60(%esp)
jne    804cd0f <__sprintf_chk@plt+0x3e9f>
movzbl 0x28(%esp),%eax
shl    $0x8,%edx
add    %ecx,%edx
movzbl 0x30(%esp),%ecx
movzbl 0x7b(%esp),%edi
shl    $0x18,%ebp
shl    $0x10,%eax
add    %edx,%eax
movzbl 0x7c(%esp),%edx
and    $0x1,%ecx
mov    %eax,0x28(%esp)
movzbl 0x74(%esp),%eax
mov    %ecx,0x74(%esp)
movzbl 0x79(%esp),%ecx
shl    $0x8,%edx
add    %edx,%eax
movzbl 0x7a(%esp),%edx
shl    $0x8,%ecx
shl    $0x10,%edx
add    %edx,%eax
movzbl 0x50(%esp),%edx
shl    $0x18,%edx
add    %eax,%edx
movzbl 0x7f(%esp),%eax
add    %ecx,%eax
movzbl 0x78(%esp),%ecx
shl    $0x10,%ecx
add    %ecx,%eax
movzbl 0x40(%esp),%ecx
shl    $0x18,%ecx
add    %ecx,%eax
movzbl 0x7e(%esp),%ecx
shl    $0x8,%ecx
add    %ecx,%edi
movzbl 0x7d(%esp),%ecx
shl    $0x10,%ecx
add    %edi,%ecx
mov    %ecx,0x2c(%esp)
movzbl 0x60(%esp),%ecx
shl    $0x18,%ecx
mov    %ecx,%edi
mov    0x2c(%esp),%ecx
add    %edi,%ecx
add    0x28(%esp),%ebp
mov    %ebp,0x30(%esp)
je     804cd31 <__sprintf_chk@plt+0x3ec1>
movl   $0x1,0x28(%esp)
test   %edx,%edx
je     804cd46 <__sprintf_chk@plt+0x3ed6>
imul   0x30(%esp),%edx
lea    (%edx,%eax,1),%ebp
cmp    %ebp,%ebx
jb     804cd67 <__sprintf_chk@plt+0x3ef7>
cmp    %ebx,%ebp
jne    804cd5b <__sprintf_chk@plt+0x3eeb>
mov    0xbc(%esp),%edi
test   %edi,%edi
je     804c8ea <__sprintf_chk@plt+0x3a7a>
mov    0xb4(%esp),%edi
test   %edi,%edi
jne    804ca91 <__sprintf_chk@plt+0x3c21>
mov    0xc0(%esp),%eax
test   %eax,%eax
je     804c8fe <__sprintf_chk@plt+0x3a8e>
mov    0xc0(%esp),%edi
mov    %edx,(%edi)
mov    0xc8(%esp),%eax
test   %eax,%eax
je     804c916 <__sprintf_chk@plt+0x3aa6>
mov    0x30(%esp),%edi
mov    0xc8(%esp),%edx
mov    %edi,(%edx)
mov    0xc4(%esp),%edi
test   %edi,%edi
je     804c92a <__sprintf_chk@plt+0x3aba>
mov    0xc4(%esp),%edx
mov    %ecx,(%edx)
mov    0xd0(%esp),%ecx
test   %ecx,%ecx
je     804cb8a <__sprintf_chk@plt+0x3d1a>
mov    0x30(%esp),%eax
add    0xcc(%esp),%eax
mov    0xd0(%esp),%ecx
lea    (%eax,%eax,2),%eax
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
call   804b640 <__sprintf_chk@plt+0x27d0>
mov    0x74(%esp),%edx
mov    0xd0(%esp),%edi
test   %edx,%edx
mov    %eax,(%edi)
je     804cbcc <__sprintf_chk@plt+0x3d5c>
lea    (%esi,%ebp,1),%edx
add    %ebx,%esi
mov    0xcc(%esp),%ebx
mov    %edx,0x88(%esp)
movl   $0x0,0x2c(%esp)
lea    (%ebx,%ebx,2),%ecx
shl    $0x2,%ecx
mov    %ecx,0x70(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x70(%esp),%ebp
xor    %ebx,%ebx
add    %eax,%ebp
movl   $0x0,0x0(%ebp)
mov    %ebp,%ecx
movl   $0x0,0x8(%ebp)
mov    %ebp,0x4(%ebp)
mov    %ebx,%ebp
lea    0x0(%esi),%esi
cmp    %edx,%esi
je     804cc5f <__sprintf_chk@plt+0x3def>
mov    0x28(%esp),%eax
test   %eax,%eax
je     804cab8 <__sprintf_chk@plt+0x3c48>
movzbl (%edx),%eax
lea    0x1(%edx),%ebx
mov    %ebx,0x88(%esp)
cmp    $0xff,%al
je     804cb58 <__sprintf_chk@plt+0x3ce8>
cmp    $0xfe,%al
je     804caa8 <__sprintf_chk@plt+0x3c38>
mov    %esi,%eax
sub    %edx,%eax
mov    %eax,0x4(%esp)
lea    0x8c(%esp),%edi
lea    0x88(%esp),%eax
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x24(%esp)
mov    %edx,0x88(%esp)
call   804d520 <__sprintf_chk@plt+0x46b0>
mov    0x24(%esp),%ecx
mov    %eax,%ebx
mov    0x8c(%esp),%eax
test   %eax,%eax
jne    804ce01 <__sprintf_chk@plt+0x3f91>
cmp    $0x1,%ebp
jle    804cb08 <__sprintf_chk@plt+0x3c98>
mov    0x4(%ecx),%eax
mov    0x8(%eax),%edi
jmp    804ca4a <__sprintf_chk@plt+0x3bda>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edi
mov    (%edi),%eax
test   %eax,%eax
jne    804ca48 <__sprintf_chk@plt+0x3bd8>
movl   $0xc,(%esp)
mov    %ecx,0x24(%esp)
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    0x24(%esp),%ecx
movl   $0x0,(%eax)
mov    %ebx,0x8(%eax)
mov    %edi,0x4(%eax)
mov    %eax,(%edi)
add    $0x1,%ebp
mov    0x88(%esp),%edx
jmp    804c9c0 <__sprintf_chk@plt+0x3b50>
mov    $0xffffffff,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xb4(%esp),%edi
add    (%edi),%eax
mov    0xbc(%esp),%edi
mov    %eax,(%edi)
jmp    804c8ea <__sprintf_chk@plt+0x3a7a>
mov    %ebx,%edx
mov    $0x1,%ebp
jmp    804c9c0 <__sprintf_chk@plt+0x3b50>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %edx,%eax
cmp    $0x1,%eax
jle    804cdec <__sprintf_chk@plt+0x3f7c>
lea    0x1(%edx),%ebx
movzbl (%edx),%eax
mov    %ebx,0x88(%esp)
movzbl 0x1(%edx),%ebx
add    $0x2,%edx
mov    %edx,0x88(%esp)
shl    $0x8,%ebx
or     %eax,%ebx
cmp    $0xffff,%ebx
je     804cb7e <__sprintf_chk@plt+0x3d0e>
cmp    $0xfffe,%ebx
jne    804ca33 <__sprintf_chk@plt+0x3bc3>
mov    $0x1,%ebp
jmp    804c9c0 <__sprintf_chk@plt+0x3b50>
nop
movl   $0xc,(%esp)
mov    %ecx,0x24(%esp)
call   804b620 <__sprintf_chk@plt+0x27b0>
movl   $0xc,(%esp)
mov    %eax,%edi
call   804b620 <__sprintf_chk@plt+0x27b0>
mov    0x24(%esp),%ecx
test   %ebp,%ebp
movl   $0x0,(%eax)
mov    %ebx,0x8(%eax)
mov    %eax,0x4(%eax)
mov    %eax,0x8(%edi)
mov    0x4(%ecx),%eax
mov    %edi,(%eax)
mov    %eax,0x4(%edi)
movl   $0x0,(%edi)
mov    %edi,0x4(%ecx)
je     804ca75 <__sprintf_chk@plt+0x3c05>
jmp    804ca72 <__sprintf_chk@plt+0x3c02>
nop
mov    %ebx,%ecx
addl   $0x1,0x2c(%esp)
mov    0x30(%esp),%edx
addl   $0xc,0x70(%esp)
cmp    %edx,0x2c(%esp)
je     804cb82 <__sprintf_chk@plt+0x3d12>
mov    0xd0(%esp),%ebx
mov    %ecx,%edx
mov    (%ebx),%eax
jmp    804c9a0 <__sprintf_chk@plt+0x3b30>
mov    %edx,%ecx
jmp    804cb5a <__sprintf_chk@plt+0x3cea>
cmp    %ecx,%esi
jne    804ccaa <__sprintf_chk@plt+0x3e3a>
xor    %eax,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xb8(%esp),%eax
test   %eax,%eax
je     804cd8c <__sprintf_chk@plt+0x3f1c>
mov    0xb4(%esp),%ebp
test   %ebp,%ebp
je     804cd8c <__sprintf_chk@plt+0x3f1c>
mov    0xb4(%esp),%ebx
mov    0xb8(%esp),%edi
mov    (%ebx),%esi
mov    (%edi),%ebx
jmp    804c73b <__sprintf_chk@plt+0x38cb>
mov    0xcc(%esp),%edi
xor    %edx,%edx
mov    0x30(%esp),%ebx
mov    0xd0(%esp),%esi
lea    (%edi,%edi,2),%ecx
shl    $0x2,%ecx
jmp    804cbea <__sprintf_chk@plt+0x3d7a>
mov    (%esi),%eax
add    $0x1,%edx
add    %ecx,%eax
add    $0xc,%ecx
cmp    %ebx,%edx
movl   $0x0,(%eax)
movl   $0x0,0x8(%eax)
mov    %eax,0x4(%eax)
jne    804cbe8 <__sprintf_chk@plt+0x3d78>
xor    %eax,%eax
jmp    804cb8c <__sprintf_chk@plt+0x3d1c>
cmpb   $0x4,0x1(%esi)
mov    $0xffffffff,%eax
jne    804ca86 <__sprintf_chk@plt+0x3c16>
movzbl 0x2(%esi),%eax
cmp    $0x5,%al
ja     804ccbc <__sprintf_chk@plt+0x3e4c>
mov    %eax,%edx
mov    %eax,%ecx
and    $0x1,%edx
mov    $0x4,%eax
cmp    $0x1,%dl
sbb    %edx,%edx
and    $0x6,%ecx
xor    %dl,%dl
add    $0x200,%edx
mov    %edx,0x30(%esp)
movzbl 0x3(%esi),%edx
mov    %ecx,0x74(%esp)
mov    $0x8,%ecx
movl   $0x0,0x28(%esp)
jmp    804c8b0 <__sprintf_chk@plt+0x3a40>
movl   $0x5,0x8(%esp)
movl   $0x804f6f8,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x80521c8,%edx
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f844,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
movl   $0x5,0x8(%esp)
movl   $0x804f7b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movzbl 0x2(%esi),%edx
mov    %edx,0x10(%esp)
mov    0x80521c8,%edx
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f7d8,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %edi,0x10(%esp)
jmp    804cce0 <__sprintf_chk@plt+0x3e70>
movl   $0x5,0x8(%esp)
movl   $0x804f6db,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
movl   $0x5,0x8(%esp)
movl   $0x804f7fc,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
mov    0x74(%esp),%edi
test   %edi,%edi
jne    804c8d0 <__sprintf_chk@plt+0x3a60>
movl   $0x5,0x8(%esp)
movl   $0x804f81c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0x10(%esp)
jmp    804cce0 <__sprintf_chk@plt+0x3e70>
movl   $0x5,0x8(%esp)
movl   $0x804f6be,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x80521c8,%edx
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x46,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f6a1,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
movl   $0x5,0x8(%esp)
movl   $0x804f755,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
cmp    $0xfffffffe,%eax
je     804ce41 <__sprintf_chk@plt+0x3fd1>
cmp    $0xffffffff,%eax
je     804ce20 <__sprintf_chk@plt+0x3fb0>
movl   $0x5,0x8(%esp)
movl   $0x804f73d,0x4(%esp)
jmp    804cc6f <__sprintf_chk@plt+0x3dff>
movl   $0x5,0x8(%esp)
movl   $0x804f72f,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
jmp    804cc7b <__sprintf_chk@plt+0x3e0b>
movl   $0x5,0x8(%esp)
movl   $0x804f711,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
jmp    804cc7b <__sprintf_chk@plt+0x3e0b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%edx
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    0x50(%esp),%ebp
test   %edx,%edx
js     804d032 <__sprintf_chk@plt+0x41c2>
mov    0x58(%esp),%eax
test   %eax,%eax
jne    804cf08 <__sprintf_chk@plt+0x4098>
mov    %edx,%eax
mov    $0x2,%ecx
shr    $0x8,%eax
mov    $0x4,%ebx
mov    %al,0x2b(%esp)
lea    0x26(%esp),%esi
mov    $0x4,%eax
mov    %dl,0x2a(%esp)
add    %esi,%eax
mov    %ebp,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
jne    804d01a <__sprintf_chk@plt+0x41aa>
mov    0x80521a8,%eax
test   %eax,%eax
jne    804cf90 <__sprintf_chk@plt+0x4120>
mov    0x2c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804d015 <__sprintf_chk@plt+0x41a5>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x7f,%edx
jbe    804cf70 <__sprintf_chk@plt+0x4100>
test   $0xffffffc0,%edx
je     804cff8 <__sprintf_chk@plt+0x4188>
mov    0x58(%esp),%edi
mov    $0x3f,%ecx
mov    $0x6,%eax
lea    0x26(%esp),%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,%ebx
sub    $0x1,%eax
and    $0x3f,%ebx
add    $0xffffff80,%ebx
sar    %ecx
mov    %bl,(%esi,%eax,1)
mov    %ecx,%ebx
shr    $0x6,%edx
not    %ebx
test   %ebx,%edx
jne    804cf30 <__sprintf_chk@plt+0x40c0>
not    %ecx
add    %ecx,%ecx
lea    -0x1(%eax),%ebx
mov    %cl,0x1f(%esp)
mov    $0x7,%ecx
sub    %eax,%ecx
mov    %ebx,%eax
mov    %edi,0x58(%esp)
add    0x1f(%esp),%dl
mov    %dl,0x26(%esp,%ebx,1)
jmp    804cebb <__sprintf_chk@plt+0x404b>
mov    %dl,0x2b(%esp)
mov    $0x5,%eax
mov    $0x1,%ecx
mov    $0x5,%ebx
lea    0x26(%esp),%esi
jmp    804cebb <__sprintf_chk@plt+0x404b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x28,(%esp)
call   8048d30 <putchar@plt>
mov    0x58(%esp),%eax
test   %eax,%eax
je     804cfe0 <__sprintf_chk@plt+0x4170>
lea    0x0(%esi,%eiz,1),%esi
movzbl (%esi,%ebx,1),%eax
add    $0x1,%ebx
movl   $0x804f780,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8048d60 <__printf_chk@plt>
cmp    $0x6,%ebx
jne    804cfa8 <__sprintf_chk@plt+0x4138>
movl   $0x29,(%esp)
call   8048d30 <putchar@plt>
jmp    804ceeb <__sprintf_chk@plt+0x407b>
lea    0x0(%esi),%esi
movl   $0x804f46c,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804cfa8 <__sprintf_chk@plt+0x4138>
xchg   %ax,%ax
mov    $0x5,%eax
mov    $0x1,%ecx
movb   $0x80,0x1f(%esp)
mov    $0x5,%ebx
lea    0x26(%esp),%esi
jmp    804cf63 <__sprintf_chk@plt+0x40f3>
call   8048ba0 <__stack_chk_fail@plt>
movl   $0x804f773,(%esp)
call   8048be0 <perror@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f868,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x18(%esp)
call   8048b80 <dcgettext@plt>
mov    0x18(%esp),%edx
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
nop
sub    $0x2c,%esp
cmpl   $0x1,0x34(%esp)
mov    0x38(%esp),%ecx
mov    0x30(%esp),%eax
sbb    %edx,%edx
or     $0xfffffffe,%edx
test   %ecx,%ecx
je     804d0c8 <__sprintf_chk@plt+0x4258>
mov    %eax,0xc(%esp)
lea    0x1e(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
mov    %dl,0x1e(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
jne    804d0ef <__sprintf_chk@plt+0x427f>
add    $0x2c,%esp
ret
xchg   %ax,%ax
mov    %eax,0xc(%esp)
lea    0x1e(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %eax,(%esp)
mov    %dx,0x1e(%esp)
call   8048bf0 <fwrite@plt>
jmp    804d0bd <__sprintf_chk@plt+0x424d>
movl   $0x804f786,(%esp)
call   8048be0 <perror@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x5c,%esp
mov    0x64(%esp),%eax
mov    0x6c(%esp),%edx
mov    %edi,0x54(%esp)
mov    0x74(%esp),%ecx
mov    %gs:0x14,%edi
mov    %edi,0x3c(%esp)
xor    %edi,%edi
mov    %eax,%edi
add    $0x7,%edi
mov    %ebp,0x58(%esp)
lea    0xe(%eax),%ebp
cmovs  %ebp,%edi
sar    $0x3,%edi
imul   0x68(%esp),%edi
cmp    $0x200,%edx
mov    %ebx,0x4c(%esp)
mov    0x60(%esp),%ebx
mov    %esi,0x50(%esp)
mov    0x70(%esp),%esi
je     804d2a8 <__sprintf_chk@plt+0x4438>
cmp    $0x100,%edx
je     804d2a8 <__sprintf_chk@plt+0x4438>
movl   $0x2,(%esi)
mov    %ecx,%esi
and    $0x1,%esi
mov    %esi,%ecx
mov    %edx,%esi
sar    $0x8,%esi
mov    %cl,0x28(%esp)
mov    %esi,%ecx
mov    %edx,%esi
mov    %dl,0x2c(%esp)
shr    $0x18,%edx
mov    %dl,0x2f(%esp)
mov    %edi,%edx
mov    %dl,0x30(%esp)
mov    %edi,%edx
sar    $0x8,%edx
mov    %dl,0x31(%esp)
mov    %edi,%edx
sar    $0x10,%edx
mov    %dl,0x32(%esp)
mov    %edi,%edx
shr    $0x18,%edx
mov    %dl,0x33(%esp)
mov    %eax,%edx
sar    $0x8,%edx
mov    %al,0x38(%esp)
sar    $0x10,%esi
mov    %dl,0x39(%esp)
mov    %eax,%edx
shr    $0x18,%eax
mov    %al,0x3b(%esp)
mov    0x68(%esp),%eax
sar    $0x10,%edx
mov    %cl,0x2d(%esp)
mov    %esi,%ecx
mov    %cl,0x2e(%esp)
movzbl 0x68(%esp),%ecx
movb   $0x72,0x1c(%esp)
sar    $0x8,%eax
mov    %al,0x35(%esp)
mov    0x68(%esp),%eax
mov    %cl,0x34(%esp)
movb   $0xb5,0x1d(%esp)
movb   $0x4a,0x1e(%esp)
sar    $0x10,%eax
movb   $0x86,0x1f(%esp)
movb   $0x0,0x20(%esp)
movb   $0x0,0x21(%esp)
movb   $0x0,0x22(%esp)
movb   $0x0,0x23(%esp)
movb   $0x20,0x24(%esp)
movb   $0x0,0x25(%esp)
movb   $0x0,0x26(%esp)
movb   $0x0,0x27(%esp)
movb   $0x0,0x29(%esp)
movb   $0x0,0x2a(%esp)
movb   $0x0,0x2b(%esp)
mov    %dl,0x3a(%esp)
mov    %al,0x36(%esp)
mov    0x68(%esp),%ecx
lea    0x1c(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x20,0x4(%esp)
shr    $0x18,%ecx
mov    %eax,(%esp)
mov    %cl,0x37(%esp)
call   8048bf0 <fwrite@plt>
cmp    $0x1,%eax
jne    804d314 <__sprintf_chk@plt+0x44a4>
mov    0x3c(%esp),%edx
xor    %gs:0x14,%edx
jne    804d355 <__sprintf_chk@plt+0x44e5>
mov    0x4c(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x54(%esp),%edi
mov    0x58(%esp),%ebp
add    $0x5c,%esp
ret
lea    0x0(%esi),%esi
cmp    $0x8,%eax
jne    804d16f <__sprintf_chk@plt+0x42ff>
cmpl   $0x2,(%esi)
je     804d175 <__sprintf_chk@plt+0x4305>
cmp    $0x200,%edx
sete   0x1a(%esp)
test   $0x2,%cl
movb   $0x36,0x18(%esp)
movb   $0x4,0x19(%esp)
je     804d308 <__sprintf_chk@plt+0x4498>
orb    $0x4,0x1a(%esp)
mov    %edi,%eax
mov    %al,0x1b(%esp)
lea    0x18(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x4,0x4(%esp)
mov    %eax,(%esp)
call   8048bf0 <fwrite@plt>
jmp    804d274 <__sprintf_chk@plt+0x4404>
lea    0x0(%esi,%eiz,1),%esi
and    $0x1,%ecx
je     804d2d9 <__sprintf_chk@plt+0x4469>
orb    $0x2,0x1a(%esp)
jmp    804d2d9 <__sprintf_chk@plt+0x4469>
movl   $0x5,0x8(%esp)
movl   $0x804f796,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x4a,(%esp)
call   8048c70 <exit@plt>
call   8048ba0 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%ebp
mov    0x58(%esp),%eax
mov    0x68(%esp),%ecx
mov    0x50(%esp),%esi
add    $0xe,%ebp
mov    0x60(%esp),%edi
add    $0x7,%eax
cmovns %eax,%ebp
xor    %eax,%eax
sar    $0x3,%ebp
imul   0x5c(%esp),%ebp
test   %ecx,%ecx
je     804d3ce <__sprintf_chk@plt+0x455e>
test   %edi,%edi
jle    804d3c9 <__sprintf_chk@plt+0x4559>
mov    0x68(%esp),%ecx
xor    %ebx,%ebx
mov    (%ecx),%eax
test   %eax,%eax
je     804d3bf <__sprintf_chk@plt+0x454f>
lea    0x0(%esi),%esi
mov    0x8(%eax),%edx
test   %edx,%edx
je     804d3b9 <__sprintf_chk@plt+0x4549>
mov    (%edx),%edx
test   %edx,%edx
jne    804d4d2 <__sprintf_chk@plt+0x4662>
mov    (%eax),%eax
test   %eax,%eax
jne    804d3a8 <__sprintf_chk@plt+0x4538>
add    $0x1,%ebx
add    $0xc,%ecx
cmp    %ebx,%edi
jne    804d39c <__sprintf_chk@plt+0x452c>
mov    $0x1,%eax
mov    %eax,0x14(%esp)
lea    0x64(%esp),%eax
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    0x5c(%esp),%eax
mov    %edi,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x4(%esp)
call   804d110 <__sprintf_chk@plt+0x42a0>
mov    0x54(%esp),%eax
cmpl   $0x2,0x64(%esp)
mov    %esi,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
sete   %bl
mov    %eax,(%esp)
call   8048bf0 <fwrite@plt>
cmp    %edi,%eax
mov    %eax,0x2c(%esp)
jne    804d4dc <__sprintf_chk@plt+0x466c>
mov    0x68(%esp),%eax
sub    $0x1,%eax
cmp    $0xfffffffd,%eax
ja     804d4c8 <__sprintf_chk@plt+0x4658>
test   %edi,%edi
je     804d4c8 <__sprintf_chk@plt+0x4658>
mov    0x68(%esp),%eax
movl   $0x0,0x28(%esp)
mov    %eax,0x24(%esp)
mov    0x24(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     804d4a0 <__sprintf_chk@plt+0x4630>
xchg   %ax,%ax
mov    0x8(%edi),%ebp
test   %ebp,%ebp
je     804d49a <__sprintf_chk@plt+0x462a>
mov    0x0(%ebp),%eax
test   %eax,%eax
je     804d480 <__sprintf_chk@plt+0x4610>
mov    %ebx,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804d080 <__sprintf_chk@plt+0x4210>
lea    0x0(%esi),%esi
mov    %ebx,0x8(%esp)
mov    0x8(%ebp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804ce70 <__sprintf_chk@plt+0x4000>
mov    0x0(%ebp),%ebp
test   %ebp,%ebp
jne    804d480 <__sprintf_chk@plt+0x4610>
mov    (%edi),%edi
test   %edi,%edi
jne    804d458 <__sprintf_chk@plt+0x45e8>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   804d080 <__sprintf_chk@plt+0x4210>
mov    0x2c(%esp),%eax
addl   $0x1,0x28(%esp)
addl   $0xc,0x24(%esp)
cmp    %eax,0x28(%esp)
jne    804d44c <__sprintf_chk@plt+0x45dc>
add    $0x3c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%eax
jmp    804d3ce <__sprintf_chk@plt+0x455e>
movl   $0x5,0x8(%esp)
movl   $0x804f11c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x4a,(%esp)
call   8048c70 <exit@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x0(%ebp),%edi
movzbl (%edi),%eax
lea    0x1(%edi),%esi
test   %al,%al
movzbl %al,%ebx
jns    804d5e8 <__sprintf_chk@plt+0x4778>
mov    $0x80,%eax
xor    %ecx,%ecx
jmp    804d54a <__sprintf_chk@plt+0x46da>
lea    0x0(%esi),%esi
mov    %edx,%ecx
sar    %eax
test   %eax,%ebx
lea    0x1(%ecx),%edx
jne    804d548 <__sprintf_chk@plt+0x46d8>
cmp    0x18(%esp),%edx
jg     804d5d0 <__sprintf_chk@plt+0x4760>
cmp    $0x1,%edx
je     804d5b8 <__sprintf_chk@plt+0x4748>
sub    $0x1,%eax
and    %ebx,%eax
test   %ecx,%ecx
je     804d5a0 <__sprintf_chk@plt+0x4730>
movzbl 0x1(%edi),%edx
lea    0x2(%edi),%esi
mov    %edx,%ebx
and    $0xffffffc0,%ebx
cmp    $0x80,%bl
jne    804d5b8 <__sprintf_chk@plt+0x4748>
lea    -0x1(%esi,%ecx,1),%ebx
jmp    804d590 <__sprintf_chk@plt+0x4720>
xchg   %ax,%ax
movzbl (%esi),%edx
add    $0x1,%esi
mov    %edx,%ecx
and    $0xffffffc0,%ecx
cmp    $0x80,%cl
jne    804d5b8 <__sprintf_chk@plt+0x4748>
mov    %eax,%ecx
mov    %edx,%eax
shl    $0x6,%ecx
and    $0x3f,%eax
or     %ecx,%eax
cmp    %ebx,%esi
jne    804d580 <__sprintf_chk@plt+0x4710>
mov    0x1c(%esp),%edx
mov    %esi,0x0(%ebp)
movl   $0x0,(%edx)
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%esp),%edx
xor    %eax,%eax
movl   $0xffffffff,(%edx)
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,0x18(%esp)
je     804d559 <__sprintf_chk@plt+0x46e9>
mov    0x1c(%esp),%eax
movl   $0xfffffffe,(%eax)
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x18(%esp),%edx
and    $0x7f,%eax
test   %edx,%edx
jns    804d5a0 <__sprintf_chk@plt+0x4730>
jmp    804d5d7 <__sprintf_chk@plt+0x4767>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x4b6d,0x4(%esp)
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804d630 <__sprintf_chk@plt+0x47c0>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f88b,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804d625 <__sprintf_chk@plt+0x47b5>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8,%esp
mov    0x24(%esp),%eax
movl   $0x20,(%esp)
lea    0xe(%eax),%ecx
add    $0x7,%eax
cmovns %eax,%ecx
sar    $0x3,%ecx
mov    %ecx,%ebp
mov    %ecx,%eax
shl    $0x5,%ebp
neg    %eax
mov    %ebp,%esi
sub    %ecx,%esi
add    0x1c(%esp),%esi
mov    %eax,0x4(%esp)
mov    0x20(%esp),%edx
xor    %edi,%edi
mov    %esi,%ebx
mov    (%esp),%eax
test   %edx,%edx
jle    804d6c0 <__sprintf_chk@plt+0x4850>
test   %ecx,%ecx
jle    804d6b5 <__sprintf_chk@plt+0x4845>
cmpb   $0x0,(%ebx)
jne    804d6d0 <__sprintf_chk@plt+0x4860>
xor    %edx,%edx
lea    0x0(%esi),%esi
jmp    804d6ae <__sprintf_chk@plt+0x483e>
lea    0x0(%esi),%esi
cmpb   $0x0,(%ebx,%edx,1)
jne    804d6d0 <__sprintf_chk@plt+0x4860>
add    $0x1,%edx
cmp    %ecx,%edx
jne    804d6a8 <__sprintf_chk@plt+0x4838>
add    $0x1,%edi
add    %ebp,%ebx
cmp    0x20(%esp),%edi
jne    804d692 <__sprintf_chk@plt+0x4822>
add    0x4(%esp),%esi
subl   $0x1,(%esp)
jne    804d683 <__sprintf_chk@plt+0x4813>
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x4c,%esp
mov    %ebx,0x3c(%esp)
mov    0x58(%esp),%ebx
mov    0x50(%esp),%edx
mov    %esi,0x40(%esp)
mov    0x54(%esp),%esi
mov    %edi,0x44(%esp)
mov    0x5c(%esp),%edi
mov    (%ebx),%eax
movl   $0x4b72,0x4(%esp)
mov    %edx,(%esp)
mov    %ebp,0x48(%esp)
mov    %eax,0x28(%esp)
lea    0x18(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x1,0x18(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x20,0x24(%esp)
movl   $0x20,0x20(%esp)
mov    %esi,0x2c(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804d778 <__sprintf_chk@plt+0x4908>
mov    0x60(%esp),%esi
mov    0x28(%esp),%eax
test   %esi,%esi
mov    %eax,(%ebx)
je     804d761 <__sprintf_chk@plt+0x48f1>
mov    0x24(%esp),%eax
mov    0x60(%esp),%edx
mov    %eax,(%edx)
test   %edi,%edi
je     804d848 <__sprintf_chk@plt+0x49d8>
mov    0x20(%esp),%eax
mov    %eax,(%edi)
xor    %eax,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8048d40 <__errno_location@plt>
mov    %eax,%ebp
mov    (%eax),%eax
cmp    $0x16,%eax
jne    804d84c <__sprintf_chk@plt+0x49dc>
test   %edi,%edi
je     804d794 <__sprintf_chk@plt+0x4924>
movl   $0x8,(%edi)
mov    (%ebx),%eax
mov    0x50(%esp),%edx
movl   $0x4b6b,0x4(%esp)
movw   $0x0,0x12(%esp)
mov    %ax,0x10(%esp)
lea    0x10(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edx,(%esp)
mov    %esi,0x14(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804d7f8 <__sprintf_chk@plt+0x4988>
movzwl 0x10(%esp),%eax
mov    %eax,(%ebx)
mov    0x60(%esp),%ebx
test   %ebx,%ebx
je     804d848 <__sprintf_chk@plt+0x49d8>
movzwl 0x12(%esp),%eax
mov    0x60(%esp),%edx
mov    %eax,(%edx)
xor    %eax,%eax
mov    0x3c(%esp),%ebx
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
mov    0x48(%esp),%ebp
add    $0x4c,%esp
ret
xchg   %ax,%ax
mov    0x0(%ebp),%eax
cmp    $0x16,%eax
jne    804d86b <__sprintf_chk@plt+0x49fb>
cmpl   $0xff,(%ebx)
jle    804d886 <__sprintf_chk@plt+0x4a16>
test   %esi,%esi
je     804d8db <__sprintf_chk@plt+0x4a6b>
mov    0x50(%esp),%edx
mov    %esi,0x8(%esp)
movl   $0x4b60,0x4(%esp)
mov    %edx,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
jne    804d8c5 <__sprintf_chk@plt+0x4a55>
mov    0x60(%esp),%ecx
movl   $0x100,(%ebx)
test   %ecx,%ecx
je     804d848 <__sprintf_chk@plt+0x49d8>
mov    0x60(%esp),%edx
movl   $0x0,(%edx)
xor    %eax,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
cmp    $0x26,%eax
je     804d78a <__sprintf_chk@plt+0x491a>
movl   $0x804f899,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
cmp    $0x26,%eax
je     804d800 <__sprintf_chk@plt+0x4990>
movl   $0x804f8ab,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
movl   $0x5,0x8(%esp)
movl   $0x804f928,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
movl   $0x804f8be,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804d7e2 <__sprintf_chk@plt+0x4972>
movl   $0x5,0x8(%esp)
movl   $0x804f94c,0x4(%esp)
jmp    804d896 <__sprintf_chk@plt+0x4a26>
lea    0x0(%esi),%esi
sub    $0x3c,%esp
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x2c(%esp)
call   804d6e0 <__sprintf_chk@plt+0x4870>
mov    $0x100,%edx
test   %eax,%eax
cmove  0x2c(%esp),%edx
add    $0x3c,%esp
mov    %edx,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x7c(%esp),%edi
mov    0x74(%esp),%ebx
test   %edi,%edi
mov    %edi,%ebp
jne    804d95f <__sprintf_chk@plt+0x4aef>
mov    $0x8,%ebp
mov    $0x8,%edi
mov    0x80(%esp),%eax
test   %eax,%eax
jne    804d985 <__sprintf_chk@plt+0x4b15>
mov    0x78(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804d650 <__sprintf_chk@plt+0x47e0>
mov    %eax,0x80(%esp)
mov    0x80(%esp),%eax
mov    %ebp,0x40(%esp)
lea    0x38(%esp),%ebp
mov    %ebp,0x8(%esp)
movl   $0x4b72,0x4(%esp)
mov    %eax,0x44(%esp)
mov    0x78(%esp),%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
mov    %ebx,0x4c(%esp)
mov    %eax,0x48(%esp)
mov    0x70(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
je     804daf0 <__sprintf_chk@plt+0x4c80>
cmp    $0x8,%edi
jne    804dc44 <__sprintf_chk@plt+0x4dd4>
lea    0x0(%esi),%esi
call   8048d40 <__errno_location@plt>
mov    %eax,%edi
mov    (%eax),%eax
cmp    $0x16,%eax
jne    804dc3b <__sprintf_chk@plt+0x4dcb>
cmp    $0x16,%eax
je     804db00 <__sprintf_chk@plt+0x4c90>
movzwl 0x78(%esp),%eax
movl   $0x4b6c,0x4(%esp)
mov    %ebx,0x34(%esp)
mov    %ax,0x30(%esp)
movzwl 0x80(%esp),%eax
mov    %ax,0x32(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x70(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
je     804daf0 <__sprintf_chk@plt+0x4c80>
mov    (%edi),%edx
cmp    $0x16,%edx
jne    804dc5a <__sprintf_chk@plt+0x4dea>
mov    $0x2,%edi
jmp    804da78 <__sprintf_chk@plt+0x4c08>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x2e,(%esp)
call   8048dc0 <fputc@plt>
movl   $0x3d090,(%esp)
call   8048c00 <usleep@plt>
cmp    $0x14,%ebp
je     804dbc8 <__sprintf_chk@plt+0x4d58>
add    $0x1,%edi
mov    0x70(%esp),%eax
mov    %ebx,0x8(%esp)
movl   $0x4b61,0x4(%esp)
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%esi
je     804dad8 <__sprintf_chk@plt+0x4c68>
lea    -0x1(%edi),%ebp
mov    0x80521a0,%eax
cmp    $0x1,%ebp
jne    804da50 <__sprintf_chk@plt+0x4be0>
mov    %eax,0xc(%esp)
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f8f5,(%esp)
call   8048bf0 <fwrite@plt>
movl   $0x3d090,(%esp)
call   8048c00 <usleep@plt>
jmp    804da75 <__sprintf_chk@plt+0x4c05>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80521a0,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048dc0 <fputc@plt>
lea    0x0(%esi),%esi
xor    %eax,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpl   $0x100,0x78(%esp)
je     804d9fb <__sprintf_chk@plt+0x4b8b>
cmpl   $0x1ff,0x78(%esp)
jg     804d9fb <__sprintf_chk@plt+0x4b8b>
cmpl   $0x101,0x78(%esp)
mov    $0x2000,%eax
mov    $0x4000,%ecx
movl   $0x200,0x2c(%esp)
cmovl  %eax,%ecx
mov    $0x100,%ax
cmovge 0x2c(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   8048c30 <malloc@plt>
mov    0x28(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804dcbe <__sprintf_chk@plt+0x4e4e>
mov    %ecx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048d10 <memset@plt>
mov    0x78(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
shl    $0x5,%eax
mov    %eax,0x8(%esp)
call   8048b30 <memcpy@plt>
mov    0x2c(%esp),%eax
mov    %ebp,0x8(%esp)
movl   $0x4b72,0x4(%esp)
mov    %esi,0x4c(%esp)
mov    %eax,0x48(%esp)
mov    0x70(%esp),%eax
mov    %eax,(%esp)
call   8048bc0 <ioctl@plt>
mov    %esi,(%esp)
mov    %eax,%ebp
call   8048b20 <free@plt>
test   %ebp,%ebp
jne    804d9fb <__sprintf_chk@plt+0x4b8b>
jmp    804daf0 <__sprintf_chk@plt+0x4c80>
xchg   %ax,%ax
mov    0x80521a0,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048dc0 <fputc@plt>
mov    0x80(%esp),%eax
mov    %esi,0x1c(%esp)
movl   $0x8,0x14(%esp)
movl   $0x804f998,0x8(%esp)
mov    %eax,0x18(%esp)
mov    0x78(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x80521c8,%eax
mov    %eax,0xc(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x804f913,(%esp)
call   8048be0 <perror@plt>
add    $0x5c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x26,%eax
je     804d9f2 <__sprintf_chk@plt+0x4b82>
movl   $0x804f8d0,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804daf2 <__sprintf_chk@plt+0x4c82>
cmp    $0x26,%edx
je     804da45 <__sprintf_chk@plt+0x4bd5>
mov    %eax,0x1c(%esp)
mov    0x80(%esp),%eax
movl   $0x8,0x14(%esp)
movl   $0x804f974,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x18(%esp)
mov    0x78(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x80521c8,%eax
mov    %eax,0xc(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x804f8e2,(%esp)
call   8048be0 <perror@plt>
mov    $0xffffffff,%eax
jmp    804daf2 <__sprintf_chk@plt+0x4c82>
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804f373,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
or     $0xffffffff,%eax
jmp    804daf2 <__sprintf_chk@plt+0x4c82>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
mov    %eax,%ebx
sub    $0x28,%esp
lea    0x18(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804c430 <__sprintf_chk@plt+0x35c0>
test   %eax,%eax
jne    804dd3e <__sprintf_chk@plt+0x4ece>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%ebx)
mov    %ebx,%eax
mov    %edx,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
lea    0x0(%esi),%esi
sub    $0x2c,%esp
mov    0x80521b4,%ecx
cmp    0x80521c4,%ecx
mov    %esi,0x28(%esp)
mov    %eax,%esi
mov    %ebx,0x24(%esp)
je     804dd90 <__sprintf_chk@plt+0x4f20>
mov    0x80521c0,%eax
lea    (%eax,%ecx,4),%ebx
add    $0x1,%ecx
mov    %si,0x2(%ebx)
mov    0x28(%esp),%esi
mov    %dx,(%ebx)
mov    0x24(%esp),%ebx
mov    %ecx,0x80521b4
add    $0x2c,%esp
ret
nop
mov    0x80521c0,%eax
add    $0x1000,%ecx
mov    %ecx,0x4(%esp)
mov    %ecx,0x80521c4
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804b640 <__sprintf_chk@plt+0x27d0>
mov    0x80521b4,%ecx
mov    0x1c(%esp),%edx
mov    %eax,0x80521c0
jmp    804dd70 <__sprintf_chk@plt+0x4f00>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x14,%esp
mov    (%eax),%ebx
movzbl (%ebx),%edx
cmp    $0x20,%dl
jne    804de73 <__sprintf_chk@plt+0x5003>
lea    0x0(%esi),%esi
add    $0x1,%ebx
movzbl (%ebx),%edx
cmp    $0x9,%dl
je     804dde8 <__sprintf_chk@plt+0x4f78>
cmp    $0x20,%dl
je     804dde8 <__sprintf_chk@plt+0x4f78>
cmp    $0x55,%dl
jne    804de68 <__sprintf_chk@plt+0x4ff8>
cmpb   $0x2b,0x1(%ebx)
jne    804de68 <__sprintf_chk@plt+0x4ff8>
call   8048e60 <__ctype_b_loc@plt>
mov    (%eax),%edx
movsbl 0x2(%ebx),%eax
testb  $0x10,0x1(%edx,%eax,2)
je     804de68 <__sprintf_chk@plt+0x4ff8>
movsbl 0x3(%ebx),%eax
testb  $0x10,0x1(%edx,%eax,2)
je     804de68 <__sprintf_chk@plt+0x4ff8>
movsbl 0x4(%ebx),%eax
testb  $0x10,0x1(%edx,%eax,2)
je     804de68 <__sprintf_chk@plt+0x4ff8>
movsbl 0x5(%ebx),%eax
testb  $0x10,0x1(%edx,%eax,2)
je     804de68 <__sprintf_chk@plt+0x4ff8>
movsbl 0x6(%ebx),%eax
testb  $0x10,0x1(%edx,%eax,2)
jne    804de68 <__sprintf_chk@plt+0x4ff8>
lea    0x6(%ebx),%eax
add    $0x2,%ebx
mov    %ebx,(%esp)
mov    %eax,(%esi)
movl   $0x10,0x8(%esp)
movl   $0x0,0x4(%esp)
call   8048e10 <strtol@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
add    $0x14,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
cmp    $0x9,%dl
je     804dde8 <__sprintf_chk@plt+0x4f78>
jmp    804ddf8 <__sprintf_chk@plt+0x4f88>
jmp    804de90 <__sprintf_chk@plt+0x5020>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1004c,%esp
mov    0x10064(%esp),%eax
movl   $0x8052178,0x8(%esp)
movl   $0x805216c,0x4(%esp)
mov    %gs:0x14,%edx
mov    %edx,0x1003c(%esp)
xor    %edx,%edx
mov    %eax,(%esp)
mov    %eax,0x2c(%esp)
call   804b330 <__sprintf_chk@plt+0x24c0>
test   %eax,%eax
mov    %eax,0x24(%esp)
je     804e463 <__sprintf_chk@plt+0x55f3>
mov    0x80521b0,%ebx
test   %ebx,%ebx
jne    804e285 <__sprintf_chk@plt+0x5415>
lea    0x3c(%esp),%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x10000,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   8048b50 <fgets@plt>
test   %eax,%eax
je     804e075 <__sprintf_chk@plt+0x5205>
movl   $0xa,0x4(%esp)
mov    %ebp,(%esp)
call   8048cb0 <strchr@plt>
test   %eax,%eax
je     804e108 <__sprintf_chk@plt+0x5298>
movb   $0x0,(%eax)
movzbl 0x3c(%esp),%edx
mov    %ebp,0x34(%esp)
cmp    $0x9,%dl
jne    804e0f8 <__sprintf_chk@plt+0x5288>
lea    0x3d(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%edx
mov    %ecx,%eax
lea    0x1(%ecx),%ecx
cmp    $0x9,%dl
je     804df48 <__sprintf_chk@plt+0x50d8>
cmp    $0x20,%dl
je     804df48 <__sprintf_chk@plt+0x50d8>
mov    %eax,0x34(%esp)
cmp    $0x23,%dl
je     804def0 <__sprintf_chk@plt+0x5080>
test   %dl,%dl
je     804def0 <__sprintf_chk@plt+0x5080>
lea    0x38(%esp),%edx
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048e10 <strtol@plt>
mov    0x38(%esp),%ecx
cmp    0x34(%esp),%ecx
mov    %eax,%ebx
je     804e480 <__sprintf_chk@plt+0x5610>
mov    %ecx,0x34(%esp)
movzbl (%ecx),%edx
cmp    $0x9,%dl
jne    804e2be <__sprintf_chk@plt+0x544e>
lea    0x1(%ecx),%eax
lea    0x0(%esi),%esi
mov    %eax,0x34(%esp)
movzbl (%eax),%edx
mov    %eax,%ecx
add    $0x1,%eax
cmp    $0x9,%dl
je     804dfa8 <__sprintf_chk@plt+0x5138>
cmp    $0x20,%dl
je     804dfa8 <__sprintf_chk@plt+0x5138>
cmp    $0x2d,%dl
je     804e154 <__sprintf_chk@plt+0x52e4>
cmp    $0x1ff,%ebx
ja     804e4c5 <__sprintf_chk@plt+0x5655>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x34(%esp),%esi
jmp    804dfe9 <__sprintf_chk@plt+0x5179>
xchg   %ax,%ax
mov    %eax,%edx
mov    %ebx,%eax
call   804dd50 <__sprintf_chk@plt+0x4ee0>
mov    %esi,%eax
call   804ddd0 <__sprintf_chk@plt+0x4f60>
test   %eax,%eax
jns    804dfe0 <__sprintf_chk@plt+0x5170>
mov    0x34(%esp),%esi
movzbl (%esi),%ecx
cmp    $0x20,%cl
jne    804e2d0 <__sprintf_chk@plt+0x5460>
lea    0x1(%esi),%edx
nop
mov    %edx,0x34(%esp)
movzbl (%edx),%ecx
mov    %edx,%esi
add    $0x1,%edx
cmp    $0x9,%cl
je     804e008 <__sprintf_chk@plt+0x5198>
cmp    $0x20,%cl
je     804e008 <__sprintf_chk@plt+0x5198>
cmp    $0x23,%cl
je     804def0 <__sprintf_chk@plt+0x5080>
test   %cl,%cl
je     804def0 <__sprintf_chk@plt+0x5080>
movl   $0x5,0x8(%esp)
movl   $0x804fad4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x2c(%esp),%edx
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
jmp    804def0 <__sprintf_chk@plt+0x5080>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804b2f0 <__sprintf_chk@plt+0x2480>
mov    0x80521b4,%eax
test   %eax,%eax
jne    804e098 <__sprintf_chk@plt+0x5228>
mov    0x80521ac,%edx
test   %edx,%edx
je     804e2e5 <__sprintf_chk@plt+0x5475>
mov    %ax,0x80521b8
mov    0x80521c0,%eax
movl   $0x80521b8,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x80521bc
mov    0x10060(%esp),%eax
mov    %eax,(%esp)
call   804c5a0 <__sprintf_chk@plt+0x3730>
test   %eax,%eax
jne    804e457 <__sprintf_chk@plt+0x55e7>
movl   $0x0,0x80521b4
00
mov    0x1003c(%esp),%edx
xor    %gs:0x14,%edx
jne    804e47b <__sprintf_chk@plt+0x560b>
add    $0x1004c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x20,%dl
je     804df3d <__sprintf_chk@plt+0x50cd>
mov    %ebp,%eax
jmp    804df5e <__sprintf_chk@plt+0x50ee>
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804f9e0,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x2c(%esp),%edx
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
jmp    804df2b <__sprintf_chk@plt+0x50bb>
add    $0x1,%ecx
lea    0x38(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,(%esp)
mov    %ecx,0x34(%esp)
call   8048e10 <strtol@plt>
mov    %eax,0x28(%esp)
mov    0x38(%esp),%eax
cmp    0x34(%esp),%eax
je     804e480 <__sprintf_chk@plt+0x5610>
cmp    $0x1ff,%ebx
mov    %eax,0x34(%esp)
ja     804e4c5 <__sprintf_chk@plt+0x5655>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
je     804dfd8 <__sprintf_chk@plt+0x5168>
cmpl   $0x1ff,0x28(%esp)
jg     804e512 <__sprintf_chk@plt+0x56a2>
cmp    0x28(%esp),%ebx
jg     804e512 <__sprintf_chk@plt+0x56a2>
movzbl (%eax),%edx
cmp    $0x9,%dl
jne    804e329 <__sprintf_chk@plt+0x54b9>
lea    0x1(%eax),%edx
mov    %edx,0x34(%esp)
movzbl (%edx),%ecx
mov    %edx,%eax
add    $0x1,%edx
cmp    $0x9,%cl
je     804e1c8 <__sprintf_chk@plt+0x5358>
cmp    $0x20,%cl
je     804e1c8 <__sprintf_chk@plt+0x5358>
mov    $0x804fb71,%edi
mov    %eax,%esi
mov    $0x4,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e21d <__sprintf_chk@plt+0x53ad>
cmp    0x28(%esp),%ebx
lea    0x4(%eax),%esi
mov    %esi,0x34(%esp)
jg     804dff8 <__sprintf_chk@plt+0x5188>
mov    0x28(%esp),%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %ebx,%eax
add    $0x1,%ebx
call   804dd50 <__sprintf_chk@plt+0x4ee0>
cmp    %ebx,%esi
jge    804e208 <__sprintf_chk@plt+0x5398>
jmp    804dff4 <__sprintf_chk@plt+0x5184>
lea    0x34(%esp),%esi
mov    %esi,%eax
call   804ddd0 <__sprintf_chk@plt+0x4f60>
mov    0x34(%esp),%ecx
movzbl (%ecx),%edx
mov    %eax,%edi
cmp    $0x20,%dl
jne    804e393 <__sprintf_chk@plt+0x5523>
lea    0x1(%ecx),%eax
lea    0x0(%esi),%esi
mov    %eax,0x34(%esp)
movzbl (%eax),%edx
mov    %eax,%ecx
add    $0x1,%eax
cmp    $0x9,%dl
je     804e240 <__sprintf_chk@plt+0x53d0>
cmp    $0x20,%dl
je     804e240 <__sprintf_chk@plt+0x53d0>
cmp    $0x2d,%dl
je     804e337 <__sprintf_chk@plt+0x54c7>
cmp    0x28(%esp),%ebx
mov    0x28(%esp),%esi
jg     804dff4 <__sprintf_chk@plt+0x5184>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    %edi,%edx
add    $0x1,%ebx
call   804dd50 <__sprintf_chk@plt+0x4ee0>
cmp    %ebx,%esi
jge    804e270 <__sprintf_chk@plt+0x5400>
jmp    804dff4 <__sprintf_chk@plt+0x5184>
movl   $0x5,0x8(%esp)
movl   $0x804f9bc,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x8052200,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804dee7 <__sprintf_chk@plt+0x5077>
cmp    $0x20,%dl
je     804df9f <__sprintf_chk@plt+0x512f>
jmp    804dfbe <__sprintf_chk@plt+0x514e>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%cl
je     804e004 <__sprintf_chk@plt+0x5194>
lea    0x0(%esi,%eiz,1),%esi
jmp    804e01e <__sprintf_chk@plt+0x51ae>
movl   $0x5,0x8(%esp)
mov    0x80521c8,%ebx
movl   $0x804faf4,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
jmp    804e0d9 <__sprintf_chk@plt+0x5269>
cmp    $0x20,%dl
je     804e1c5 <__sprintf_chk@plt+0x5355>
jmp    804e1de <__sprintf_chk@plt+0x536e>
add    $0x1,%ecx
mov    %esi,%eax
mov    %ecx,0x34(%esp)
call   804ddd0 <__sprintf_chk@plt+0x4f60>
mov    %eax,%esi
shr    $0x1f,%eax
test   %al,%al
jne    804e402 <__sprintf_chk@plt+0x5592>
mov    %edi,%eax
shr    $0x1f,%eax
test   %al,%al
jne    804e402 <__sprintf_chk@plt+0x5592>
mov    0x28(%esp),%eax
mov    %esi,%edx
sub    %edi,%edx
sub    %ebx,%eax
cmp    %eax,%edx
jne    804e3a5 <__sprintf_chk@plt+0x5535>
sub    %ebx,%edi
mov    0x28(%esp),%esi
cmp    0x28(%esp),%ebx
jg     804dff4 <__sprintf_chk@plt+0x5184>
lea    (%ebx,%edi,1),%edx
mov    %ebx,%eax
add    $0x1,%ebx
call   804dd50 <__sprintf_chk@plt+0x4ee0>
cmp    %ebx,%esi
jge    804e37d <__sprintf_chk@plt+0x550d>
jmp    804dff4 <__sprintf_chk@plt+0x5184>
cmp    $0x9,%dl
je     804e23a <__sprintf_chk@plt+0x53ca>
lea    0x0(%esi,%eiz,1),%esi
jmp    804e256 <__sprintf_chk@plt+0x53e6>
movl   $0x5,0x8(%esp)
movl   $0x804fa7c,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x28(%esp),%edx
mov    %ebx,0x18(%esp)
mov    %esi,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %edx,0x1c(%esp)
mov    0x2c(%esp),%edx
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804fa34,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x28(%esp),%edx
mov    %ebx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x14(%esp)
mov    0x2c(%esp),%edx
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048be0 <perror@plt>
movl   $0x42,(%esp)
call   8048c70 <exit@plt>
call   8048ba0 <__stack_chk_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x804fb40,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebp,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804fa00,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    %ebx,0x10(%esp)
mov    0x2c(%esp),%edx
mov    %eax,0x8(%esp)
mov    0x80521a0,%eax
movl   $0x1,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   8048dd0 <__fprintf_chk@plt>
movl   $0x41,(%esp)
call   8048c70 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804fb54,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x28(%esp),%edx
mov    %edx,0x10(%esp)
jmp    804e4e5 <__sprintf_chk@plt+0x5675>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%eax
movl   $0x804f2d2,0x4(%esp)
mov    %eax,(%esp)
call   8048d00 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e607 <__sprintf_chk@plt+0x5797>
mov    0x50(%esp),%edx
lea    0x28(%esp),%eax
xor    %ebp,%ebp
call   804dd10 <__sprintf_chk@plt+0x4ea0>
movzwl 0x28(%esp),%edi
mov    0x2c(%esp),%ebx
test   %edi,%edi
je     804e5b9 <__sprintf_chk@plt+0x5749>
lea    0x0(%esi,%eiz,1),%esi
movzwl (%ebx),%eax
add    $0x1,%ebp
mov    %eax,0x10(%esp)
movzwl 0x2(%ebx),%eax
add    $0x4,%ebx
movl   $0x804fb76,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048dd0 <__fprintf_chk@plt>
cmp    %edi,%ebp
jl     804e588 <__sprintf_chk@plt+0x5718>
mov    %esi,(%esp)
call   8048b60 <fclose@plt>
mov    0x80521b0,%esi
test   %esi,%esi
je     804e5ff <__sprintf_chk@plt+0x578f>
movl   $0x5,0x8(%esp)
movl   $0x804fb85,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   8048d60 <__printf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x54(%esp),%edx
mov    %edx,(%esp)
call   8048be0 <perror@plt>
movl   $0x1,(%esp)
call   8048c70 <exit@plt>
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%eax
mov    0x50(%esp),%edx
mov    %eax,0x14(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x28(%esp),%eax
call   804dd10 <__sprintf_chk@plt+0x4ea0>
mov    0x2c(%esp),%eax
mov    %eax,0x24(%esp)
movzwl 0x28(%esp),%eax
movzwl %ax,%esi
mov    %ax,0x1e(%esp)
mov    0x20(%esp),%eax
add    $0x1,%esi
test   %eax,%eax
jle    804e70f <__sprintf_chk@plt+0x589f>
lea    0x0(%esi),%esi
mov    0x80521a8,%eax
test   %eax,%eax
jne    804e750 <__sprintf_chk@plt+0x58e0>
cmpw   $0x0,0x1e(%esp)
mov    $0x1,%ebp
mov    0x24(%esp),%ebx
je     804e6e6 <__sprintf_chk@plt+0x5876>
mov    %esi,%eax
mov    %edi,%esi
mov    %eax,%edi
jmp    804e6aa <__sprintf_chk@plt+0x583a>
xchg   %ax,%ax
add    $0x1,%ebp
add    $0x4,%ebx
cmp    %edi,%ebp
je     804e6e0 <__sprintf_chk@plt+0x5870>
movzwl 0x2(%ebx),%eax
cmp    %esi,%eax
jne    804e6a0 <__sprintf_chk@plt+0x5830>
mov    0x80521a8,%eax
test   %eax,%eax
jne    804e730 <__sprintf_chk@plt+0x58c0>
mov    0x18(%esp),%eax
add    $0x1,%ebp
mov    %eax,0x8(%esp)
movzwl (%ebx),%eax
add    $0x4,%ebx
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   804ce70 <__sprintf_chk@plt+0x4000>
cmp    %edi,%ebp
jne    804e6aa <__sprintf_chk@plt+0x583a>
mov    %edi,%eax
mov    %esi,%edi
mov    %eax,%esi
mov    0x18(%esp),%eax
add    $0x1,%edi
movl   $0x0,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   804d080 <__sprintf_chk@plt+0x4210>
cmp    0x20(%esp),%edi
jne    804e678 <__sprintf_chk@plt+0x5808>
mov    0x80521a8,%eax
test   %eax,%eax
jne    804e7a1 <__sprintf_chk@plt+0x5931>
mov    0x80521b0,%edi
test   %edi,%edi
jne    804e76d <__sprintf_chk@plt+0x58fd>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movzwl (%ebx),%eax
movl   $0x804fbad,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804e6bb <__sprintf_chk@plt+0x584b>
mov    %edi,0x8(%esp)
movl   $0x804fba0,0x4(%esp)
movl   $0x1,(%esp)
call   8048d60 <__printf_chk@plt>
jmp    804e685 <__sprintf_chk@plt+0x5815>
movl   $0x5,0x8(%esp)
movl   $0x804fbb3,0x4(%esp)
movl   $0x0,(%esp)
call   8048b80 <dcgettext@plt>
movl   $0x1,0x50(%esp)
mov    %eax,0x54(%esp)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048d60 <__printf_chk@plt>
movl   $0xa,(%esp)
call   8048d30 <putchar@plt>
jmp    804e71c <__sprintf_chk@plt+0x58ac>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80496e0 <__sprintf_chk@plt+0x870>
add    $0x3835,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048aa4 <__snprintf_chk@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804e819 <__sprintf_chk@plt+0x59a9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804e7f8 <__sprintf_chk@plt+0x5988>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804e830 <__sprintf_chk@plt+0x59c0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
push   %ebx
sub    $0x8,%esp
call   80496e0 <__sprintf_chk@plt+0x870>
add    $0x37c3,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %ebp
jae    804e8b4 <_IO_stdin_used+0x68>
cmp    %gs:(%bx,%si),%ah
jae    804e8be <_IO_stdin_used+0x72>
je     804e8c1 <_IO_stdin_used+0x75>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804e87f <_IO_stdin_used+0x33>
pop    %ebx
ja     804e8d4 <_IO_stdin_used+0x88>
imul   $0x6974706f,0x2d(%ebp,%eiz,2),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804e8cb <_IO_stdin_used+0x7f>
and    %bl,0x2d(%ebx)
cmp    $0x4e,%al
ds
pop    %ebp
and    %bl,0x6e(%ebx)
gs
ja     804e8e1 <_IO_stdin_used+0x95>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804e8ad <_IO_stdin_used+0x61>
cs
pop    %ebp
and    %bl,0x2d(%ebx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804e8fa <_IO_stdin_used+0xae>
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
popa
jo     804e8ee <_IO_stdin_used+0xa2>
and    %bl,0x2d(%ebx)
jne    804e8b6 <_IO_stdin_used+0x6a>
jne    804e906 <_IO_stdin_used+0xba>
imul   $0x616d6564,0x6f(%ebx),%esp
jo     804e8fe <_IO_stdin_used+0xb2>
or     (%eax),%ah
and    %dh,0x72(%edi)
imul   $0x6974706f,0x2d(%ebp,%eiz,2),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804e8d2 <_IO_stdin_used+0x86>
sub    %dh,0x6b(%ecx,%eiz,2)
and    %dh,%gs:0x6c(%eax)
popa
arpl   %sp,0x20(%ebp)
bound  %esp,0x66(%ebp)
outsl  %ds:(%esi),(%dx)
jb     804e929 <_IO_stdin_used+0xdd>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x61(%edi,%ebp,2)
imul   $0x200a3a29,%fs:0x67(%esi),%ebp
and    %ah,(%eax)
and    %ch,0x3c20206f
imul   $0x6d61,0x6e(%ebp,%eiz,2),%bp
gs and %ah,%ds:%gs:(%eax)
push   %edi
jb     804e954 <_IO_stdin_used+0x108>
je     804e952 <_IO_stdin_used+0x106>
and    %ah,0x75(%ebx)
jb     804e964 <_IO_stdin_used+0x118>
outsb  %gs:(%esi),(%dx)
je     804e916 <_IO_stdin_used+0xca>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804e91b <_IO_stdin_used+0xcf>
je     804e96c <_IO_stdin_used+0x120>
and    %bh,(%esi,%eiz,2)
imul   $0x3e656d61,0x6e(%ebp,%eiz,2),%ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x3c20204f
imul   $0x6d61,0x6e(%ebp,%eiz,2),%bp
gs and %ah,%ds:%gs:(%eax)
push   %edi
jb     804e989 <_IO_stdin_used+0x13d>
je     804e987 <_IO_stdin_used+0x13b>
and    %ah,0x75(%ebx)
jb     804e999 <_IO_stdin_used+0x14d>
outsb  %gs:(%esi),(%dx)
je     804e94b <_IO_stdin_used+0xff>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804e950 <_IO_stdin_used+0x104>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x6e(%ebp)
imul   $0x6d206564,0x6f(%ebx),%esp
popa
jo     804e960 <_IO_stdin_used+0x114>
je     804e9b1 <_IO_stdin_used+0x165>
and    %bh,(%esi,%eiz,2)
imul   $0x3e656d61,0x6e(%ebp,%eiz,2),%ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x3c206d6f
imul   $0x6d61,0x6e(%ebp,%eiz,2),%bp
gs and %ah,%ds:%gs:(%eax)
push   %edi
jb     804e9ce <_IO_stdin_used+0x182>
je     804e9cc <_IO_stdin_used+0x180>
and    %ah,0x75(%ebx)
jb     804e9de <_IO_stdin_used+0x192>
outsb  %gs:(%esi),(%dx)
je     804e990 <_IO_stdin_used+0x144>
arpl   %bp,0x6e(%edi)
jae    804e9e4 <_IO_stdin_used+0x198>
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
popa
jo     804e99b <_IO_stdin_used+0x14f>
je     804e9ec <_IO_stdin_used+0x1a0>
and    %bh,(%esi,%eiz,2)
imul   $0x3e656d61,0x6e(%ebp,%eiz,2),%ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x3c20756f
imul   $0x6d61,0x6e(%ebp,%eiz,2),%bp
gs and %ah,%ds:%gs:(%eax)
push   %edi
jb     804ea09 <_IO_stdin_used+0x1bd>
je     804ea07 <_IO_stdin_used+0x1bb>
and    %ah,0x75(%ebx)
jb     804ea19 <_IO_stdin_used+0x1cd>
outsb  %gs:(%esi),(%dx)
je     804e9cb <_IO_stdin_used+0x17f>
jne    804ea1b <_IO_stdin_used+0x1cf>
imul   $0x616d6564,0x6f(%ebx),%esp
jo     804e9d6 <_IO_stdin_used+0x18a>
je     804ea27 <_IO_stdin_used+0x1db>
and    %bh,(%esi,%eiz,2)
imul   $0x3e656d61,0x6e(%ebp,%eiz,2),%ebp
or     0x66(%ecx),%cl
and    %ch,0x6f(%esi)
and    %ch,0x65(%esi)
ja     804ea34 <_IO_stdin_used+0x1e8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804e9f2 <_IO_stdin_used+0x1a6>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6f(%esi)
and    %ch,0x4f7c6f5b
jl     804ea4f <_IO_stdin_used+0x203>
insl   (%dx),%es:(%edi)
jl     804ea52 <_IO_stdin_used+0x206>
jne    804ea61 <_IO_stdin_used+0x215>
insl   (%dx),%es:(%edi)
jl     804ea5d <_IO_stdin_used+0x211>
pop    %ebp
and    %ch,0x70(%edi)
je     804ea57 <_IO_stdin_used+0x20b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x73(%ecx)
and    %ah,0x69(%edi)
jbe    804ea5d <_IO_stdin_used+0x211>
outsb  %ds:(%esi),(%dx)
sub    $0xa,%al
popa
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    804ea6f <_IO_stdin_used+0x223>
je     804ea25 <_IO_stdin_used+0x1d9>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ea2a <_IO_stdin_used+0x1de>
imul   $0x64616f6c,0x20(%ebx),%esi
gs cmp %fs:%gs:(%edx),%cl
and    %ah,(%eax)
and    %ah,(%eax)
jae    804ea80 <_IO_stdin_used+0x234>
je     804ea83 <_IO_stdin_used+0x237>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ea41 <_IO_stdin_used+0x1f5>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804ea53 <_IO_stdin_used+0x207>
and    0x66(%ebp,%eiz,2),%ah
popa
jne    804eaa6 <_IO_stdin_used+0x25a>
je     804ea97 <_IO_stdin_used+0x24b>
addr16 jp,pn 804ea9d <_IO_stdin_used+0x251>
and    (%edx),%cl
and    %ah,(%eax)
and    %ah,(%eax)
jae    804eaad <_IO_stdin_used+0x261>
je     804eab0 <_IO_stdin_used+0x264>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ea6e <_IO_stdin_used+0x222>
sub    $0x203e4e3c,%eax
and    %ah,(%eax)
and    %cl,0x61(%edi,%ebp,2)
and    %ah,%fs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804ea80 <_IO_stdin_used+0x234>
and    0x66(%ebp,%eiz,2),%ah
popa
jne    804ead3 <_IO_stdin_used+0x287>
je     804eaa1 <_IO_stdin_used+0x255>
js     804eaa7 <_IO_stdin_used+0x25b>
dec    %esi
ds
pop    %ebx
addr16 jp,pn 804eacf <_IO_stdin_used+0x283>
and    (%edx),%cl
push   %esp
push   $0x3c2d2065
dec    %esi
and    %ch,%ds:0x70(%edi)
je     804eaea <_IO_stdin_used+0x29e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%ebx)
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x20(%ebx,%esi,2)
popa
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804eab3 <_IO_stdin_used+0x267>
data16
jb     804eb05 <_IO_stdin_used+0x2b9>
insl   (%dx),%es:(%edi)
and    %ah,0x20(%ecx)
arpl   %bp,0x64(%edi)
gs
jo     804eb01 <_IO_stdin_used+0x2b5>
and    %dh,%gs:0x68(%si)
popa
je     804eac8 <_IO_stdin_used+0x27c>
arpl   %bp,0x6e(%edi)
je     804eb0e <_IO_stdin_used+0x2c2>
imul   $0x72687420,0x73(%esi),%ebp
gs and %ah,%gs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804eb2f <_IO_stdin_used+0x2e3>
cmp    (%edx),%cl
and    %ah,(%eax)
and    %ah,(%eax)
jae    804eb29 <_IO_stdin_used+0x2dd>
je     804eb2c <_IO_stdin_used+0x2e0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804eaea <_IO_stdin_used+0x29e>
sub    $0x317c387b,%eax
xor    $0x7c,%al
xor    %esi,(%esi)
jge    804eaf5 <_IO_stdin_used+0x2a9>
arpl   %bp,0x64(%edi)
gs
jo     804eb3c <_IO_stdin_used+0x2f0>
gs arpl %si,%cs:%gs:0x5b(%bx,%si)
addr16 jp,pn 804eb42 <_IO_stdin_used+0x2f6>
and    %ah,(%eax)
and    %cl,0x61(%edi,%ebp,2)
and    %bh,%fs:(%eax)
js     804eb2c <_IO_stdin_used+0x2e0>
dec    %esi
and    %ah,%ds:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804eb18 <_IO_stdin_used+0x2cc>
data16
jb     804eb6a <_IO_stdin_used+0x31e>
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
fs
gs
jo     804eb64 <_IO_stdin_used+0x318>
gs arpl %si,%cs:%gs:0xa(%bx,%si)
inc    %ebp
js     804eb7c <_IO_stdin_used+0x330>
insb   (%dx),%es:(%edi)
imul   $0x20796c74,0x69(%ebx),%esp
sub    %dh,0x69(%edi)
je     804eb81 <_IO_stdin_used+0x335>
and    %ch,0x726f206d
and    %ch,0x6f202975
jb     804eb47 <_IO_stdin_used+0x2fb>
imul   $0x6963696c,0x70(%ebp),%ebp
je     804eb9c <_IO_stdin_used+0x350>
jns    804eb52 <_IO_stdin_used+0x306>
sub    %ch,0x6e(%ecx)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804eba5 <_IO_stdin_used+0x359>
imul   $0x76696720,0x29(%ebp,%eiz,2),%ebp
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804ebbe <_IO_stdin_used+0x372>
imul   $0x69770a73,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%edx)
and    %ch,0x61(%edi,%ebp,2)
fs gs and %ah,%fs:%gs:0x6e(%ecx)
fs
sub    $0x20,%al
imul   $0x20656874,0x20(%esi),%ebp
arpl   %sp,0x73(%ecx)
and    %ch,%gs:0x66(%edi)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804ebea <_IO_stdin_used+0x39e>
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
popa
jo     804ebf4 <_IO_stdin_used+0x3a8>
sub    $0x20,%al
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804ebf0 <_IO_stdin_used+0x3a4>
fs or  %cs:%fs:(%eax),%ah
and    %ah,(%eax)
and    %ch,0x3e4e3c68
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %ch,0x6f(%esi)
and    %dh,0x70(%ebx)
popa
arpl   %sp,0x29(%ebp)
and    %cl,0x76(%edi)
gs
jb     804ec1f <_IO_stdin_used+0x3d3>
imul   $0x746e6f66,0x20(%ebp,%eiz,2),%esp
and    %ch,0x65(%eax)
imul   $0x200a2e74,0x68(%edi),%esp
and    %ah,(%eax)
and    %ch,0x663c206d
outsb  %ds:(%esi),(%dx)
and    %ah,%ds:(%eax)
and    %ah,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804ec46 <_IO_stdin_used+0x3fa>
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x63(%ebx)
jb     804ec43 <_IO_stdin_used+0x3f7>
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804ec13 <_IO_stdin_used+0x3c7>
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x663c2075
outsb  %ds:(%esi),(%dx)
and    %ah,%ds:(%eax)
and    %ah,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804ec1f <_IO_stdin_used+0x3d3>
jne    804ec6f <_IO_stdin_used+0x423>
imul   $0x6d206564,0x6f(%ebx),%esp
popa
jo     804ec39 <_IO_stdin_used+0x3ed>
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x6f6e206d
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:(%eax)
and    %ah,(%eax)
push   %ebx
jne    804ec8e <_IO_stdin_used+0x442>
jo     804ec92 <_IO_stdin_used+0x446>
gs
jae    804ec96 <_IO_stdin_used+0x44a>
and    %ch,0x61(%edi,%ebp,2)
imul   $0x646e6120,%fs:0x67(%esi),%ebp
and    %ah,0x63(%ecx)
je     804ec9d <_IO_stdin_used+0x451>
jbe    804ec97 <_IO_stdin_used+0x44b>
je     804eca1 <_IO_stdin_used+0x455>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %ah,0x20(%ecx)
jae    804eca5 <_IO_stdin_used+0x459>
jb     804eca9 <_IO_stdin_used+0x45d>
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804ec79 <_IO_stdin_used+0x42d>
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x6f6e2075
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:(%eax)
and    %ah,(%eax)
push   %ebx
jne    804ecce <_IO_stdin_used+0x482>
jo     804ecd2 <_IO_stdin_used+0x486>
gs
jae    804ecd6 <_IO_stdin_used+0x48a>
and    %ch,0x61(%edi,%ebp,2)
imul   $0x20666f20,%fs:0x67(%esi),%ebp
popa
and    %dh,0x6e(%ebp)
imul   $0x6d206564,0x6f(%ebx),%esp
popa
jo     804ecab <_IO_stdin_used+0x45f>
or     (%eax),%ah
and    %ah,(%eax)
and    %ch,0x20202076
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %edx
and    %dh,%gs:0x65(%esi)
jb     804ecf6 <_IO_stdin_used+0x4aa>
outsl  %ds:(%esi),(%dx)
jae    804ecfc <_IO_stdin_used+0x4b0>
or     %cs:(%eax),%ah
and    %ah,(%eax)
and    %ch,0x633c2043
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804ece4 <_IO_stdin_used+0x498>
and    %ah,(%eax)
dec    %ecx
outsb  %ds:(%esi),(%dx)
imul   $0x63206574,%fs:0x61(%ebx),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804ed25 <_IO_stdin_used+0x4d9>
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x76(%ebp,%eiz,2)
imul   $0x206f7420,0x65(%ebx),%esp
bound  %esp,0x20(%ebp)
jne    804ed3b <_IO_stdin_used+0x4ef>
gs fs or %cs:%fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ch,0x20202056
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %eax
jb     804ed47 <_IO_stdin_used+0x4fb>
outsb  %ds:(%esi),(%dx)
je     804ed01 <_IO_stdin_used+0x4b5>
jbe    804ed48 <_IO_stdin_used+0x4fc>
jb     804ed58 <_IO_stdin_used+0x50c>
imul   $0x646e6120,0x6e(%edi),%ebp
and    %ah,0x78(%ebp)
imul   $0x656c6946,0xa(%esi,%ebp,1),%esi
jae    804ed19 <_IO_stdin_used+0x4cd>
popa
jb     804ed61 <_IO_stdin_used+0x515>
and    %ch,0x61(%edi,%ebp,2)
fs gs and %ah,%fs:%gs:0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x75(%ebx)
jb     804ed83 <_IO_stdin_used+0x537>
outsb  %gs:(%esi),(%dx)
je     804ed35 <_IO_stdin_used+0x4e9>
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    804ed3f <_IO_stdin_used+0x4f3>
outsl  %ds:(%esi),(%dx)
jb     804ed42 <_IO_stdin_used+0x4f6>
and    $0x2f2a2f73,%eax
or     %cs:(%eax),%al
add    %al,(%eax)
push   %ebx
popa
jbe    804ed95 <_IO_stdin_used+0x549>
and    %ah,%fs:0x68632d64
popa
jb     804ed5a <_IO_stdin_used+0x50e>
and    $0x64257864,%eax
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804ed65 <_IO_stdin_used+0x519>
imul   $0x6e6f,0x20(%ebp,%eiz,2),%bp
and    %ah,0xa73
add    %al,(%eax)
and    $0x66203a73,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ed7d <_IO_stdin_used+0x531>
jo     804edce <_IO_stdin_used+0x582>
jae    804edca <_IO_stdin_used+0x57e>
je     804edcc <_IO_stdin_used+0x580>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,(%ebx)
xor    (%eax),%ah
imul   $0x626e6f6e,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x0,(%edx),%ecx
add    %al,(%eax)
and    $0x62203a73,%eax
popa
arpl   %bp,0x67(%ebx)
jb     804edf2 <_IO_stdin_used+0x5a6>
jne    804edf3 <_IO_stdin_used+0x5a7>
and    %dh,%fs:0x69(%edi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%edi,%ebp,2)
imul   $0x66,(%eax),%esp
jne    804ee02 <_IO_stdin_used+0x5b6>
outsb  %ds:(%esi),(%dx)
jns    804eda1 <_IO_stdin_used+0x555>
add    %cl,0x61(%edi,%ebp,2)
imul   $0x2d642520,%fs:0x67(%esi),%ebp
arpl   %bp,0x61(%eax)
jb     804edc8 <_IO_stdin_used+0x57c>
and    $0x64257864,%eax
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804edd3 <_IO_stdin_used+0x587>
data16
jb     804ee25 <_IO_stdin_used+0x5d9>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
add    %al,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
imul   $0x2d642520,%fs:0x67(%esi),%ebp
arpl   %bp,0x61(%eax)
jb     804edf4 <_IO_stdin_used+0x5a8>
and    $0x64257864,%eax
and    %ch,(%eax)
and    $0x66202964,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ee04 <_IO_stdin_used+0x5b8>
data16
jb     804ee56 <_IO_stdin_used+0x60a>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
add    %cl,0x61(%edi,%ebp,2)
imul   $0x2d642520,%fs:0x67(%esi),%ebp
arpl   %bp,0x61(%eax)
jb     804ee24 <_IO_stdin_used+0x5d8>
and    $0x64257864,%eax
and    %ch,(%eax)
and    $0x66202964,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ee1e <_IO_stdin_used+0x5d2>
add    %al,(%eax)
add    %al,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
imul   $0x696e5520,%fs:0x67(%esi),%ebp
arpl   %bp,0x64(%edi)
and    %ch,%gs:0x61(%ebp)
jo     804ee9c <_IO_stdin_used+0x650>
imul   $0x62617420,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
gs cs cs or %cs:%gs:(%eax),%al
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
and    %ah,0x69(%esi)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ch,0x65(%esi)
ja     804eeb5 <_IO_stdin_used+0x669>
imul   $0x206e6920,0x65(%esi),%ebp
arpl   %bp,0x6d(%edi)
bound  %ebp,0x6e(%ecx)
and    %ah,%gs:0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %al,(%eax)
push   %esp
push   $0x66207369
imul   $0x746e6f63,0x20(%ebp,%eiz,2),%ebp
popa
imul   $0x66203320,0x73(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804eeed <_IO_stdin_used+0x6a1>
cmp    (%eax),%ah
cmp    %bh,0x38(%eax)
sub    $0x20,%al
cmp    %bh,0x31(%eax)
xor    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
and    %bh,%fs:(%eax)
js     804eebe <_IO_stdin_used+0x672>
ss and %dl,%cs:%ss:0x6c(%eax)
gs
popa
jae    804eefb <_IO_stdin_used+0x6af>
and    %ch,0x6e(%ecx)
imul   $0x750a6574,%fs:0x61(%ebx),%esp
jae    804ef0c <_IO_stdin_used+0x6c0>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%bx,%di)
and    %ch,0x70(%edi)
je     804ef16 <_IO_stdin_used+0x6ca>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x726f2038
and    %ch,0x6f203431
jb     804eedd <_IO_stdin_used+0x691>
sub    $0x77203631,%eax
push   $0x20686369
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,%gs:0x6f(%ecx)
jne    804eeef <_IO_stdin_used+0x6a3>
ja     804ef32 <_IO_stdin_used+0x6e6>
outsb  %ds:(%esi),(%dx)
je     804eef4 <_IO_stdin_used+0x6a8>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs gs fs or %cs:%fs:%gs:(%eax),%al
add    %al,(%eax)
add    %bl,0x6f(%ecx)
jne    804ef04 <_IO_stdin_used+0x6b8>
popa
jae    804ef52 <_IO_stdin_used+0x706>
gs and %ah,%fs:%gs:0x6f(%esi)
jb     804ef0e <_IO_stdin_used+0x6c2>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ef13 <_IO_stdin_used+0x6c7>
jae    804ef5e <_IO_stdin_used+0x712>
jp     804ef5c <_IO_stdin_used+0x710>
and    %ah,0x62202c64
jne    804ef73 <_IO_stdin_used+0x727>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    804ef25 <_IO_stdin_used+0x6d9>
cmp    %ch,(%eax,%eiz,1)
xor    %esi,(%esp,%ebp,1)
and    %dh,(%ecx)
and    %ah,%ss:0x72(%ecx)
and    %dh,%gs:0x6f(%eax)
jae    804ef8a <_IO_stdin_used+0x73e>
imul   $0x65682065,0x6c(%edx),%esp
jb     804ef85 <_IO_stdin_used+0x739>
or     %cs:(%eax),%al
add    %cl,0x6d(%eax)
insl   (%dx),%es:(%edi)
and    %ch,0x66206120
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ef51 <_IO_stdin_used+0x705>
data16
jb     804efa3 <_IO_stdin_used+0x757>
insl   (%dx),%es:(%edi)
and    %dh,0x65(%edx)
jae    804efae <_IO_stdin_used+0x762>
outsl  %ds:(%esi),(%dx)
jb     804efa2 <_IO_stdin_used+0x756>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804ef81 <_IO_stdin_used+0x735>
and    %dl,0x73(%ebp)
imul   $0x65687420,0x67(%esi),%ebp
and    %ah,0x69(%esi)
jb     804efc4 <_IO_stdin_used+0x778>
je     804ef73 <_IO_stdin_used+0x727>
push   $0x2e666c61
or     (%eax),%al
add    %al,(%eax)
push   %edi
push   $0x6c206e65
outsl  %ds:(%esi),(%dx)
popa
imul   $0x76657320,%fs:0x67(%esi),%ebp
gs
jb     804efd0 <_IO_stdin_used+0x784>
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804efe9 <_IO_stdin_used+0x79d>
sub    $0x20,%al
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x75(%ebp)
jae    804eff4 <_IO_stdin_used+0x7a8>
and    %ah,0x65(%edx)
and    %dh,0x73(%eax)
data16
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f000 <_IO_stdin_used+0x7b4>
and    %ch,0x20732520
imul   $0xa7427,0x6e(%ebx),%esi
add    %al,(%eax)
push   %edx
gs
popa
and    %ah,%fs:0x68632d64
popa
jb     804efc9 <_IO_stdin_used+0x77d>
and    $0x64257864,%eax
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804efd4 <_IO_stdin_used+0x788>
data16
jb     804f026 <_IO_stdin_used+0x7da>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
add    %dl,0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%edi,%ebp,2)
imul   $0x76657320,%fs:0x67(%esi),%ebp
gs
jb     804f038 <_IO_stdin_used+0x7ec>
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f051 <_IO_stdin_used+0x805>
sub    $0x20,%al
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x75(%ebp)
jae    804f05c <_IO_stdin_used+0x810>
and    %ch,0x61(%eax)
jbe    804f052 <_IO_stdin_used+0x806>
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x61(%ebx)
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x65(%eax)
imul   $0xa74,0x68(%edi),%esp
push   %edi
push   $0x6c206e65
outsl  %ds:(%esi),(%dx)
popa
imul   $0x76657320,%fs:0x67(%esi),%ebp
gs
jb     804f074 <_IO_stdin_used+0x828>
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f08d <_IO_stdin_used+0x841>
sub    $0x20,%al
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x75(%ebp)
jae    804f098 <_IO_stdin_used+0x84c>
and    %ch,0x61(%eax)
jbe    804f08e <_IO_stdin_used+0x842>
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x61(%ebx)
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x69(%edi)
fs
je     804f0a0 <_IO_stdin_used+0x854>
or     (%eax),%al
add    %al,(%eax)
jae    804f0a3 <_IO_stdin_used+0x857>
je     804f0a6 <_IO_stdin_used+0x85a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f07e <_IO_stdin_used+0x832>
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    804f06e <_IO_stdin_used+0x822>
imul   $0x66207475,0x70(%esi),%ebp
imul   $0x7300000a,0x73(%ebp,%eiz,2),%ebp
gs
je     804f0c6 <_IO_stdin_used+0x87a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f09e <_IO_stdin_used+0x852>
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f08c <_IO_stdin_used+0x840>
bound  %ebp,0x74(%edi)
push   $0x73657220
je     804f0e5 <_IO_stdin_used+0x899>
jb     804f0dd <_IO_stdin_used+0x891>
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x68(%ebx)
popa
jb     804f0e4 <_IO_stdin_used+0x898>
arpl   %si,0x72(%ebp,%eiz,2)
and    %dl,0x4f(%edx)
dec    %ebp
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs and %al,%cs:%gs:0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f0c0 <_IO_stdin_used+0x874>
jne    804f110 <_IO_stdin_used+0x8c4>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs fs or %cs:%fs:%gs:(%bx,%si),%al
jae    804f113 <_IO_stdin_used+0x8c7>
je     804f116 <_IO_stdin_used+0x8ca>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f0ee <_IO_stdin_used+0x8a2>
and    %ah,0x72(%edi)
popa
jo     804f122 <_IO_stdin_used+0x8d6>
imul   $0x6e6f6320,0x73(%ebx),%esp
jae    804f132 <_IO_stdin_used+0x8e6>
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x6b732073
imul   $0xa6465,0x70(%eax),%esi
add    %al,(%eax)
das
jne    804f14a <_IO_stdin_used+0x8fe>
jb     804f108 <_IO_stdin_used+0x8bc>
jae    804f143 <_IO_stdin_used+0x8f7>
popa
jb     804f143 <_IO_stdin_used+0x8f7>
das
arpl   %bp,0x6e(%edi)
jae    804f153 <_IO_stdin_used+0x907>
insb   (%dx),%es:(%edi)
outsw  %gs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f15e <_IO_stdin_used+0x912>
das
jo     804f14f <_IO_stdin_used+0x903>
jb     804f164 <_IO_stdin_used+0x918>
imul   $0x746e6f66,0x6c(%ecx),%esp
jae    804f128 <_IO_stdin_used+0x8dc>
add    %ch,(%edi)
jne    804f170 <_IO_stdin_used+0x924>
jb     804f12e <_IO_stdin_used+0x8e2>
jae    804f169 <_IO_stdin_used+0x91d>
popa
jb     804f169 <_IO_stdin_used+0x91d>
add    %al,0x6f(%esi)
jne    804f177 <_IO_stdin_used+0x92b>
and    %ch,%fs:0x6f(%esi)
je     804f177 <_IO_stdin_used+0x92b>
imul   $0x206f7420,0x67(%esi),%ebp
jae    804f179 <_IO_stdin_used+0x92d>
jbe    804f17f <_IO_stdin_used+0x933>
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f143 <_IO_stdin_used+0x8f7>
ja     804f197 <_IO_stdin_used+0x94b>
imul   $0x746e6f66,0x20(%ebp,%eiz,2),%esi
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %al,%gs:0x61(%edx)
and    %ah,%fs:0x68(%ebx)
popa
jb     804f19d <_IO_stdin_used+0x951>
arpl   %si,0x72(%ebp,%eiz,2)
and    %ch,0x65(%eax)
imul   $0x64252074,0x68(%edi),%esp
or     (%eax),%al
inc    %edx
popa
and    %ah,%fs:0x68(%ebx)
popa
jb     804f1b6 <_IO_stdin_used+0x96a>
arpl   %si,0x72(%ebp,%eiz,2)
and    %dh,0x69(%edi)
fs
je     804f1c7 <_IO_stdin_used+0x97b>
and    %ah,0x4c000a64
outsl  %ds:(%esi),(%dx)
popa
imul   $0x2d642520,%fs:0x67(%esi),%ebp
arpl   %bp,0x61(%eax)
jb     804f194 <_IO_stdin_used+0x948>
and    $0x64257864,%eax
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f189 <_IO_stdin_used+0x93d>
add    %ah,0x68(%ebx)
popa
jb     804f1a5 <_IO_stdin_used+0x959>
and    $0x3a783330,%eax
add    %ah,(%eax)
and    $0x783430,%eax
and    %dh,0x65(%ebx)
jno    804f1d0 <_IO_stdin_used+0x984>
and    %bh,(%eax,%eax,1)
and    %bh,(%esi)
add    %ah,0x62203a73
jne    804f20a <_IO_stdin_used+0x9be>
and    %ch,0x6e(%ecx)
and    %ah,0x5f(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs
je     804f211 <_IO_stdin_used+0x9c5>
bound  %ebp,0xa(%ebp,%eiz,2)
add    %ah,0x66(%ebp,%eiz,2)
popa
jne    804f227 <_IO_stdin_used+0x9db>
je     804f1f5 <_IO_stdin_used+0x9a9>
js     804f1f0 <_IO_stdin_used+0x9a4>
add    %ah,%ss:0x66(%ebp,%eiz,2)
popa
jne    804f233 <_IO_stdin_used+0x9e7>
je     804f201 <_IO_stdin_used+0x9b5>
js     804f1fc <_IO_stdin_used+0x9b0>
xor    $0x0,%al
fs
gs
popaw
jne    804f23f <_IO_stdin_used+0x9f3>
je     804f20d <_IO_stdin_used+0x9c1>
js     804f20f <_IO_stdin_used+0x9c3>
add    %ah,0x66(%ebp,%eiz,2)
popa
jne    804f24a <_IO_stdin_used+0x9fe>
je     804f1e0 <_IO_stdin_used+0x994>
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f207 <_IO_stdin_used+0x9bb>
imul   $0x6420,0x64(%esi),%bp
gs
popaw
jne    804f25e <_IO_stdin_used+0xa12>
je     804f214 <_IO_stdin_used+0x9c8>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f203 <_IO_stdin_used+0x9b7>
add    %ah,0x66(%ebp,%eiz,2)
popa
jne    804f26c <_IO_stdin_used+0xa20>
je     804f23a <_IO_stdin_used+0x9ee>
js     804f229 <_IO_stdin_used+0x9dd>
add    %al,%fs:0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f22d <_IO_stdin_used+0x9e1>
imul   $0x2520,0x64(%esi),%bp
jae    804f235 <_IO_stdin_used+0x9e9>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f224 <_IO_stdin_used+0x9d8>
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f242 <_IO_stdin_used+0x9f6>
outsl  %ds:(%esi),(%dx)
jo     804f28a <_IO_stdin_used+0xa3e>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f24c <_IO_stdin_used+0xa00>
imul   $0x7325,0x20(%ebp,%eiz,2),%bp
or     (%eax),%al
push   %edx
gs
popa
imul   $0x6e6f6620,%fs:0x67(%esi),%ebp
je     804f262 <_IO_stdin_used+0xa16>
imul   $0x7325,0x20(%ebp,%eiz,2),%bp
or     (%eax),%al
fs
gs
data16
jne,pn 804f2bf <_IO_stdin_used+0xa73>
imul   $0x6f632023,(%eax),%eax
insl   (%dx),%es:(%edi)
bound  %ebp,0x6e(%ecx)
and    %dh,%gs:0x61(%eax)
jb     804f2d5 <_IO_stdin_used+0xa89>
imul   $0x6e6f6620,0x6c(%ecx),%esp
je     804f2dd <_IO_stdin_used+0xa91>
or     (%eax),%al
push   %esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    804f295 <_IO_stdin_used+0xa49>
imul   $0x7420,0x73(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6e(%ecx)
or     %gs:(%eax),%al
inc    %edx
popa
and    %ch,%fs:0x6e(%ecx)
jo     804f304 <_IO_stdin_used+0xab8>
je     804f2b1 <_IO_stdin_used+0xa65>
imul   $0x6973,0x20(%ebp,%eiz,2),%bp
jp     804f2ff <_IO_stdin_used+0xab3>
or     (%eax),%al
sbb    (%eax),%ebp
dec    %ebx
add    %ch,(%edi)
jne    804f316 <_IO_stdin_used+0xaca>
jb     804f2d4 <_IO_stdin_used+0xa88>
jae    804f30f <_IO_stdin_used+0xac3>
popa
jb     804f30f <_IO_stdin_used+0xac3>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebx)
add    %ah,%fs:0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6b000a73
bound  %esp,0x31(%eax,%eiz,1)
xor    %esi,%cs:0x6e00352e
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x0(%edi)
sub    $0x281b0068,%eax
inc    %edx
add    %ch,(%esi)
jo     804f351 <_IO_stdin_used+0xb05>
data16
jne    804f2e1 <_IO_stdin_used+0xa95>
jo,pn  804f357 <_IO_stdin_used+0xb0b>
data16
add    %ch,(%esi)
arpl   %si,0x0(%eax)
cs
data16
outsb  %ds:(%esi),(%dx)
je     804f2ef <_IO_stdin_used+0xaa3>
das
jne    804f365 <_IO_stdin_used+0xb19>
jb     804f323 <_IO_stdin_used+0xad7>
jae    804f35e <_IO_stdin_used+0xb12>
popa
jb     804f35e <_IO_stdin_used+0xb12>
das
arpl   %bp,0x6e(%edi)
jae    804f36e <_IO_stdin_used+0xb22>
insb   (%dx),%es:(%edi)
outsw  %gs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f379 <_IO_stdin_used+0xb2d>
das
add    %ah,0x73252073
add    %ah,0x72(%ebp)
jb     804f381 <_IO_stdin_used+0xb35>
jb     804f334 <_IO_stdin_used+0xae8>
gs
js     804f37c <_IO_stdin_used+0xb30>
arpl   %si,0x74(%ebp)
imul   $0x73252020,0x67(%esi),%ebp
or     (%eax),%al
and    $0x73252f73,%eax
add    %ah,0x25732573
jae    804f330 <_IO_stdin_used+0xae4>
add    %ch,%cs:(%esi)
addr16 jp 804f336 <_IO_stdin_used+0xaea>
addr16 jp 804f3a2 <_IO_stdin_used+0xb56>
jo     804f35b <_IO_stdin_used+0xb0f>
sub    $0x632d2064,%eax
add    %ch,(%esi)
bound  %edi,0x32(%edx)
add    %ah,0x7a(%edx)
imul   $0x20642d20,0x32(%eax),%esi
sub    $0x63,%eax
push   %edi
popa
jb     804f3c6 <_IO_stdin_used+0xb7a>
imul   $0x6170203a,0x67(%esi),%ebp
je     804f3c9 <_IO_stdin_used+0xb7d>
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x6e(%edi,%ebp,2)
cmp    (%bx,%si),%ah
and    $0x73252f73,%eax
or     (%eax),%al
and    $0x6f203a73,%eax
jne    804f3ee <_IO_stdin_used+0xba2>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804f3fd <_IO_stdin_used+0xbb1>
or     (%eax),%al
das
jo     804f3fb <_IO_stdin_used+0xbaf>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    804f3f3 <_IO_stdin_used+0xba7>
insb   (%dx),%es:(%edi)
data16
das
data16
fs
das
xor    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
jne    804f406 <_IO_stdin_used+0xbba>
outsb  %fs:(%esi),(%dx)
daa
je     804f3bf <_IO_stdin_used+0xb73>
outsl  %ds:(%esi),(%dx)
jo     804f407 <_IO_stdin_used+0xbbb>
outsb  %ds:(%esi),(%dx)
and    %ah,0x2f000a73
fs
gs
jbe    804f3dc <_IO_stdin_used+0xb90>
je     804f423 <_IO_stdin_used+0xbd7>
jns    804f3b1 <_IO_stdin_used+0xb65>
das
fs
gs
jbe    804f3e5 <_IO_stdin_used+0xb99>
je     804f42c <_IO_stdin_used+0xbe0>
jns    804f3ea <_IO_stdin_used+0xb9e>
add    %ch,(%edi)
fs
gs
jbe    804f3ef <_IO_stdin_used+0xba3>
jbe    804f425 <_IO_stdin_used+0xbd9>
das
xor    %al,(%eax)
das
fs
gs
jbe    804f3f9 <_IO_stdin_used+0xbad>
jae    804f445 <_IO_stdin_used+0xbf9>
jae    804f442 <_IO_stdin_used+0xbf6>
je     804f449 <_IO_stdin_used+0xbfd>
add    %ch,(%edi)
fs
gs
jbe    804f405 <_IO_stdin_used+0xbb9>
arpl   %bp,0x6e(%edi)
jae    804f44a <_IO_stdin_used+0xbfe>
insb   (%dx),%es:(%edi)
add    %al,%gs:(%eax)
add    %al,0x6f(%ebx)
jne    804f450 <_IO_stdin_used+0xc04>
outsb  %fs:(%esi),(%dx)
daa
je     804f409 <_IO_stdin_used+0xbbd>
addr16
gs
je     804f40d <_IO_stdin_used+0xbc1>
popa
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ebp,%eiz,2)
arpl   %si,0x69(%edx)
jo     804f470 <_IO_stdin_used+0xc24>
outsl  %ds:(%esi),(%dx)
jb     804f41f <_IO_stdin_used+0xbd3>
jb     804f466 <_IO_stdin_used+0xc1a>
data16
gs
jb     804f477 <_IO_stdin_used+0xc2b>
imul   $0x206f7420,0x67(%esi),%ebp
je     804f476 <_IO_stdin_used+0xc2a>
and    %ah,%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804f484 <_IO_stdin_used+0xc38>
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %al,(%eax)
add    %al,-0x57f7fb0d(%esi)
repz add $0x8,%al
mov    $0xf3,%cl
add    $0x8,%al
mov    $0xc50804f3,%ebx
repz add $0x8,%al
(bad)
repz add $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xor    %bh,0x0(%eax)
xor    %dh,(%ecx)
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
cmp    %bh,(%ecx)
popa
bound  %esp,0x64(%ebx)
gs
inc    %cx
inc    %edx
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
add    %ah,0x31300078
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
add    %ah,0x3130006f
xor    (%ebx),%dh
xor    $0x35,%al
ss
aaa
cmp    %bh,(%ecx)
add    %dl,0x2b(%ebp)
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f496 <_IO_stdin_used+0xc4a>
jae    804f4ec <_IO_stdin_used+0xca0>
popa
je     804f49b <_IO_stdin_used+0xc4f>
insl   (%dx),%es:(%edi)
popa
jo     804f49f <_IO_stdin_used+0xc53>
imul   $0x920,0x0(%ebp,%eiz,2),%bp
or     (%eax),%al
and    %cl,(%ecx)
or     (%ebx),%ah
add    %al,0x72(%ebp)
jb     804f500 <_IO_stdin_used+0xcb4>
jb     804f4b3 <_IO_stdin_used+0xc67>
ja     804f507 <_IO_stdin_used+0xcbb>
imul   $0x616d2067,0x6e(%ecx,%ebp,2),%esi
jo     804f4bf <_IO_stdin_used+0xc73>
je     804f510 <_IO_stdin_used+0xcc4>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f4cf <_IO_stdin_used+0xc83>
jb     804f516 <_IO_stdin_used+0xcca>
popa
and    %ah,%fs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804f528 <_IO_stdin_used+0xcdc>
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x61(%ebp)
jo     804f4ca <_IO_stdin_used+0xc7e>
add    %dl,0x61(%ebx)
jbe    804f52a <_IO_stdin_used+0xcde>
and    %dh,%fs:0x63(%ebx)
jb     804f530 <_IO_stdin_used+0xce4>
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804f4f2 <_IO_stdin_used+0xca6>
imul   $0x27732560,0x20(%esi),%ebp
or     (%eax),%al
das
jne    804f551 <_IO_stdin_used+0xd05>
jb     804f50f <_IO_stdin_used+0xcc3>
jae    804f54a <_IO_stdin_used+0xcfe>
popa
jb     804f54a <_IO_stdin_used+0xcfe>
das
arpl   %bp,0x6e(%edi)
jae    804f55a <_IO_stdin_used+0xd0e>
insb   (%dx),%es:(%edi)
gs
je     804f561 <_IO_stdin_used+0xd15>
popa
outsb  %ds:(%esi),(%dx)
jae    804f522 <_IO_stdin_used+0xcd6>
add    %bl,0x74(%edi)
outsl  %ds:(%esi),(%dx)
pop    %edi
jne    804f568 <_IO_stdin_used+0xd1c>
imul   $0x6e617274,(%esi),%ebp
jae    804f502 <_IO_stdin_used+0xcb6>
cs
popa
arpl   %bp,0x0(%ebp)
add    %ch,0x61(%ebp)
jo     804f57f <_IO_stdin_used+0xd33>
arpl   %si,0x6e(%edx)
cmp    (%eax),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f538 <_IO_stdin_used+0xcec>
outsl  %ds:(%esi),(%dx)
jo     804f580 <_IO_stdin_used+0xd34>
outsb  %ds:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804f541 <_IO_stdin_used+0xcf5>
imul   $0x255f,0x20(%ebp,%eiz,2),%bp
jae    804f589 <_IO_stdin_used+0xd3d>
or     (%eax),%al
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
imul   $0x6e696220,%fs:0x67(%esi),%ebp
popa
jb     804f5b3 <_IO_stdin_used+0xd67>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x74(%ebp,%ebp,1)
outsl  %ds:(%esi),(%dx)
sub    $0x746e6f66,%eax
and    %dh,0x63(%ebx)
jb     804f5b3 <_IO_stdin_used+0xd67>
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804f575 <_IO_stdin_used+0xd29>
data16
jb     804f5c7 <_IO_stdin_used+0xd7b>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
inc    %ebp
jb     804f5d9 <_IO_stdin_used+0xd8d>
outsl  %ds:(%esi),(%dx)
jb     804f58a <_IO_stdin_used+0xd3e>
jb     804f5d1 <_IO_stdin_used+0xd85>
popa
imul   $0x70616d20,%fs:0x67(%esi),%ebp
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x25(%eax)
jae    804f5ab <_IO_stdin_used+0xd5f>
or     (%eax),%al
add    %al,(%eax)
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
imul   $0x6e696220,%fs:0x67(%esi),%ebp
popa
jb     804f60f <_IO_stdin_used+0xdc3>
and    %dh,0x6e(%ebp)
imul   $0x73206564,0x6f(%ebx),%esp
arpl   %si,0x65(%edx)
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804f5ca <_IO_stdin_used+0xd7e>
data16
jb     804f61c <_IO_stdin_used+0xdd0>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x4c000a73
outsl  %ds:(%esi),(%dx)
popa
imul   $0x6d797320,%fs:0x67(%esi),%ebp
bound  %ebp,0x6c(%edi)
imul   $0x65726373,0x20(%ebx),%esp
outsb  %gs:(%esi),(%dx)
and    %ch,0x61(%ebp)
jo     804f5f4 <_IO_stdin_used+0xda8>
data16
jb     804f646 <_IO_stdin_used+0xdfa>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
add    %al,0x72(%ebp)
jb     804f657 <_IO_stdin_used+0xe0b>
jb     804f60a <_IO_stdin_used+0xdbe>
jo     804f64d <_IO_stdin_used+0xe01>
jb     804f661 <_IO_stdin_used+0xe15>
imul   $0x6d797320,0x67(%esi),%ebp
bound  %ebp,0x6c(%edi)
imul   $0x2070616d,0x20(%ebx),%esp
data16
jb     804f671 <_IO_stdin_used+0xe25>
insl   (%dx),%es:(%edi)
and    %ah,0x25(%eax)
jae    804f62f <_IO_stdin_used+0xde3>
sub    $0x20,%al
insb   (%dx),%es:(%edi)
imul   $0xa642520,0x65(%esi),%ebp
add    %al,0x49(%edi)
dec    %edi
pop    %edi
push   %ebx
inc    %ebx
push   %edx
dec    %esi
dec    %ebp
inc    %ecx
push   %eax
add    %dl,0x49(%eax)
dec    %edi
pop    %edi
push   %ebx
inc    %ebx
push   %edx
dec    %esi
dec    %ebp
inc    %ecx
push   %eax
add    %al,0x49(%edi)
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
push   %ebx
inc    %ebx
push   %edx
dec    %esi
dec    %ebp
inc    %ecx
push   %eax
add    %dl,0x49(%eax)
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
push   %ebx
inc    %ebx
push   %edx
dec    %esi
dec    %ebp
inc    %ecx
push   %eax
add    %al,0x49(%edi)
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
dec    %ebp
inc    %ecx
push   %eax
sub    %dh,(%eax)
sub    %eax,(%eax)
inc    %edi
dec    %ecx
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
dec    %ebp
inc    %ecx
push   %eax
add    %dl,0x49(%eax)
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
dec    %ebp
inc    %ecx
push   %eax
inc    %ebx
dec    %esp
push   %edx
add    %dl,0x49(%eax)
dec    %edi
pop    %edi
push   %ebp
dec    %esi
dec    %ecx
dec    %ebp
inc    %ecx
push   %eax
add    %al,(%eax)
jae    804f6f2 <_IO_stdin_used+0xea6>
jb     804f6e1 <_IO_stdin_used+0xe95>
outsb  %ds:(%esi),(%dx)
gs cs cs and %ah,%cs:%gs:0x74(%bp,%di)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
gs and %ah,%fs:%gs:0x72(%bp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742064
and    %ah,0x25000a64
jae    804f6de <_IO_stdin_used+0xe92>
and    %al,0x72(%ebp)
jb     804f718 <_IO_stdin_used+0xecc>
jb     804f6cb <_IO_stdin_used+0xe7f>
jb     804f712 <_IO_stdin_used+0xec6>
popa
imul   $0x706e6920,%fs:0x67(%esi),%ebp
jne    804f72c <_IO_stdin_used+0xee0>
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804f6be <_IO_stdin_used+0xe72>
and    $0x42203a73,%eax
popa
and    %ah,%fs:0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x66(%edi)
and    %dh,0x65(%edx)
popa
fs
jo     804f747 <_IO_stdin_used+0xefb>
data32 outsw %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f6e4 <_IO_stdin_used+0xe98>
add    %ah,0x7a203a73
gs
jb     804f752 <_IO_stdin_used+0xf06>
and    %ch,0x6e(%ecx)
jo     804f75d <_IO_stdin_used+0xf11>
je     804f70a <_IO_stdin_used+0xebe>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f70f <_IO_stdin_used+0xec3>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804f75d <_IO_stdin_used+0xf11>
aas
or     (%eax),%al
and    $0x73203a73,%eax
push   $0x2074726f
jne    804f772 <_IO_stdin_used+0xf26>
imul   $0x74206564,0x6f(%ebx),%esp
popa
bound  %ebp,0xa(%ebp,%eiz,2)
add    %ah,0x73203a73
push   $0x2074726f
jne    804f791 <_IO_stdin_used+0xf45>
data16
cmp    %ah,(%eax)
jne    804f790 <_IO_stdin_used+0xf44>
imul   $0x74206564,0x6f(%ebx),%esp
popa
bound  %ebp,0xa(%ebp,%eiz,2)
add    %ah,0x62203a73
popa
and    %dh,%fs:0x74(%ebp)
data16
cmp    %cl,(%edx)
add    %ah,0x75203a73
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%ebp)
data16
cmp    %ah,(%eax)
gs
jb     804f7c3 <_IO_stdin_used+0xf77>
outsl  %ds:(%esi),(%dx)
jb     804f75e <_IO_stdin_used+0xf12>
add    %ah,0x73203a73
push   $0x2074726f
jne    804f7c4 <_IO_stdin_used+0xf78>
jae    804f795 <_IO_stdin_used+0xf49>
and    %dh,0x6e(%ebp)
imul   $0x74206564,0x6f(%ebx),%esp
popa
bound  %ebp,0xa(%ebp,%eiz,2)
add    %ah,0x70(%ecx)
jo     804f7dc <_IO_stdin_used+0xf90>
outsb  %ds:(%esi),(%dx)
fs
jne    804f7e9 <_IO_stdin_used+0xf9d>
imul   $0x30250070,0x61(%ebp),%ebp
xor    0x20(%eax),%bh
add    %ah,0x70(%ecx)
jo     804f7ef <_IO_stdin_used+0xfa3>
outsb  %ds:(%esi),(%dx)
fs
jae    804f7f3 <_IO_stdin_used+0xfa7>
jo     804f7f1 <_IO_stdin_used+0xfa5>
jb     804f7f3 <_IO_stdin_used+0xfa7>
je     804f803 <_IO_stdin_used+0xfb7>
jb     804f796 <_IO_stdin_used+0xf4a>
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f7bd <_IO_stdin_used+0xf71>
ja     804f811 <_IO_stdin_used+0xfc5>
imul   $0x746e6f66,0x20(%ebp,%eiz,2),%esi
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x65(%eax)
popa
fs
gs
jb     804f7b4 <_IO_stdin_used+0xf68>
and    $0x55203a73,%eax
outsb  %ds:(%esi),(%dx)
jae    804f831 <_IO_stdin_used+0xfe5>
jo     804f82e <_IO_stdin_used+0xfe2>
outsl  %ds:(%esi),(%dx)
jb     804f835 <_IO_stdin_used+0xfe9>
gs and %dh,%fs:%gs:0x73(%eax)
data16
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x6f(%ebp)
fs and %ch,%fs:%gs:(%eax)
and    $0xa2964,%eax
and    $0x55203a73,%eax
outsb  %ds:(%esi),(%dx)
jae    804f855 <_IO_stdin_used+0x1009>
jo     804f852 <_IO_stdin_used+0x1006>
outsl  %ds:(%esi),(%dx)
jb     804f859 <_IO_stdin_used+0x100d>
gs and %dh,%fs:%gs:0x73(%eax)
data16
and    %dh,0x65(%esi)
jb     804f863 <_IO_stdin_used+0x1017>
imul   $0x64252820,0x6e(%edi),%ebp
sub    %ecx,(%edx)
add    %al,(%eax)
add    %ah,0x7a203a73
gs
jb     804f873 <_IO_stdin_used+0x1027>
and    %ch,0x6e(%ecx)
jo     804f87e <_IO_stdin_used+0x1032>
je     804f82b <_IO_stdin_used+0xfdf>
arpl   %bp,0x61(%eax)
jb     804f871 <_IO_stdin_used+0x1025>
arpl   %si,0x72(%ebp,%eiz,2)
and    %dh,0x69(%ebx)
jp     804f87e <_IO_stdin_used+0x1032>
aas
or     (%eax),%al
and    $0x49203a73,%eax
outsb  %ds:(%esi),(%dx)
jo     804f899 <_IO_stdin_used+0x104d>
je     804f846 <_IO_stdin_used+0xffa>
imul   $0x6220,0x3a(%ebp,%eiz,2),%bp
popa
and    %ch,%fs:0x6e(%ecx)
jo     804f8a9 <_IO_stdin_used+0x105d>
je     804f856 <_IO_stdin_used+0x100a>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804f8a4 <_IO_stdin_used+0x1058>
and    %ch,(%eax)
and    $0xa2964,%eax
add    %ah,0x49203a73
outsb  %ds:(%esi),(%dx)
jo     804f8c1 <_IO_stdin_used+0x1075>
je     804f86e <_IO_stdin_used+0x1022>
imul   $0x7420,0x3a(%ebp,%eiz,2),%bp
jb     804f8b8 <_IO_stdin_used+0x106c>
imul   $0x61672067,0x6e(%ecx,%ebp,2),%ebp
jb     804f8c3 <_IO_stdin_used+0x1077>
popa
or     %gs:(%bx,%si),%al
add    %al,(%eax)
popa
jo     804f8db <_IO_stdin_used+0x108f>
outsb  %gs:(%esi),(%dx)
fs
jne    804f8de <_IO_stdin_used+0x1092>
imul   $0x203a6564,0x6f(%ebx),%esp
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
jne    804f8ef <_IO_stdin_used+0x10a3>
imul   $0x25206564,0x6f(%ebx),%esp
jne    804f894 <_IO_stdin_used+0x1048>
add    %dl,0x49(%eax)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
push   %edx
inc    %ebp
push   %ebx
inc    %ebp
push   %esp
add    %ah,0x65(%edi)
je     804f903 <_IO_stdin_used+0x10b7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f8db <_IO_stdin_used+0x108f>
and    %cl,0x44(%ebx)
inc    %esi
dec    %edi
dec    %esi
push   %esp
dec    %edi
push   %eax
add    %ah,0x65(%edi)
je     804f915 <_IO_stdin_used+0x10c9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f8ed <_IO_stdin_used+0x10a1>
and    %al,0x49(%edi)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
pop    %eax
add    %ah,0x65(%edi)
je     804f928 <_IO_stdin_used+0x10dc>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f900 <_IO_stdin_used+0x10b4>
and    %al,0x49(%edi)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
add    %dh,0x75(%eax)
je     804f93a <_IO_stdin_used+0x10ee>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f912 <_IO_stdin_used+0x10c6>
and    %cl,0x44(%ebx)
inc    %esi
dec    %edi
dec    %esi
push   %esp
dec    %edi
push   %eax
add    %dh,0x75(%eax)
je     804f94c <_IO_stdin_used+0x1100>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f924 <_IO_stdin_used+0x10d8>
and    %dl,0x49(%eax)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
pop    %eax
add    %dh,0x75(%eax)
je     804f95f <_IO_stdin_used+0x1113>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f937 <_IO_stdin_used+0x10eb>
and    %dl,0x49(%eax)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
and    %dh,0x79(%edx,%esi,2)
imul   $0x2e2e2e20,0x67(%esi),%ebp
or     (%eax),%al
jo     804f98a <_IO_stdin_used+0x113e>
je     804f97d <_IO_stdin_used+0x1131>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f955 <_IO_stdin_used+0x1109>
and    %dl,0x49(%eax)
dec    %edi
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
add    %al,(%eax)
add    %al,(%eax)
bound  %esi,0x67(%ebp)
cmp    (%eax),%ah
addr16
gs
je     804f997 <_IO_stdin_used+0x114b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f955 <_IO_stdin_used+0x1109>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
gs and %dh,%fs:%gs:0x69(%edi)
je     804f9a8 <_IO_stdin_used+0x115c>
and    %ah,0x6f(%ebx)
jne    804f9b3 <_IO_stdin_used+0x1167>
je     804f983 <_IO_stdin_used+0x1137>
xor    0x62000a36,%dh
jne    804f9b6 <_IO_stdin_used+0x116a>
cmp    (%eax),%ah
addr16
gs
je     804f9bb <_IO_stdin_used+0x116f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f979 <_IO_stdin_used+0x112d>
jne    804f9ce <_IO_stdin_used+0x1182>
imul   $0x4f494720,0x67(%esi),%ebp
pop    %edi
inc    %esi
dec    %edi
dec    %esi
push   %esp
and    %ch,0x65(%esi)
gs
fs
jae    804f98e <_IO_stdin_used+0x1142>
bound  %esi,0x66(%ebp)
or     %cs:(%eax),%al
and    $0x70203a73,%eax
jne    804f9ef <_IO_stdin_used+0x11a3>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f9ba <_IO_stdin_used+0x116e>
and    %ah,0x64252c64
js     804f9ad <_IO_stdin_used+0x1161>
cmp    %fs:0x61(%esi),%ah
imul   $0x6425203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %al,(%eax)
and    $0x70203a73,%eax
jne    804fa13 <_IO_stdin_used+0x11c7>
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f9de <_IO_stdin_used+0x1192>
and    %ah,0x64252c64
js     804f9d1 <_IO_stdin_used+0x1185>
cmp    %fs:(%eax),%ah
and    %ah,0x61(%esi)
imul   $0x6425203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
dec    %esp
outsl  %ds:(%esi),(%dx)
popa
imul   $0x696e7520,%fs:0x67(%esi),%ebp
arpl   %bp,0x64(%edi)
and    %ch,%gs:0x61(%ebp)
jo     804f9f0 <_IO_stdin_used+0x11a4>
data16
jb     804fa42 <_IO_stdin_used+0x11f6>
insl   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa73
add    %ah,0x25203a73
jae    804fa21 <_IO_stdin_used+0x11d5>
and    %dl,0x61(%edi)
jb     804fa5a <_IO_stdin_used+0x120e>
imul   $0x696c203a,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x6f(%edi,%ebp,2)
and    %ch,0x6e(%edi,%ebp,2)
or     (%bx,%si),%al
and    $0x47203a73,%eax
insb   (%dx),%es:(%edi)
jns    804fa78 <_IO_stdin_used+0x122c>
push   $0x6d756e20
bound  %esp,0x72(%ebp)
and    %ch,(%eax)
xor    %bh,0x25(%eax)
js     804fa40 <_IO_stdin_used+0x11f4>
and    %ch,0x72(%ecx,%eiz,2)
addr16
gs
jb     804fa3f <_IO_stdin_used+0x11f3>
je     804fa89 <_IO_stdin_used+0x123d>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804fa49 <_IO_stdin_used+0x11fd>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804fa97 <_IO_stdin_used+0x124b>
or     (%eax),%al
add    %al,(%eax)
add    %ah,0x42203a73
popa
and    %dl,%fs:0x6e(%ebp)
imul   $0x72206564,0x6f(%ebx),%esp
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6f(%bp,%di)
jb     804fac0 <_IO_stdin_used+0x1274>
gs
jae    804fac1 <_IO_stdin_used+0x1275>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x206f7420,%fs:0x67(%esi),%ebp
outsw  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804fa80 <_IO_stdin_used+0x1234>
jo     804fad1 <_IO_stdin_used+0x1285>
jae    804facd <_IO_stdin_used+0x1281>
je     804facf <_IO_stdin_used+0x1283>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:(%bx,%si)
js     804fa97 <_IO_stdin_used+0x124b>
js     804faa1 <_IO_stdin_used+0x1255>
xor    %bh,0x25(%eax)
js     804fa83 <_IO_stdin_used+0x1237>
add    %al,(%eax)
add    %ah,0x55203a73
outsb  %ds:(%esi),(%dx)
imul   $0x72206564,0x6f(%ebx),%esp
popa
outsb  %ds:(%esi),(%dx)
and    %dl,%gs:0x2b(%di)
and    $0x2b552d78,%eax
and    $0x6f6e2078,%eax
je     804fabc <_IO_stdin_used+0x1270>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x61(%ebx)
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x6e(%ebp,%eiz,2)
addr16 je 804fb16 <_IO_stdin_used+0x12ca>
and    %ah,0x73(%ecx)
and    %ah,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
je     804fad7 <_IO_stdin_used+0x128b>
jo     804fb28 <_IO_stdin_used+0x12dc>
jae    804fb24 <_IO_stdin_used+0x12d8>
je     804fb26 <_IO_stdin_used+0x12da>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:(%bx,%si)
js     804faee <_IO_stdin_used+0x12a2>
js     804faf8 <_IO_stdin_used+0x12ac>
xor    %bh,0x25(%eax)
js     804fada <_IO_stdin_used+0x128e>
add    %al,(%eax)
add    %al,(%eax)
and    $0x74203a73,%eax
jb     804fb3c <_IO_stdin_used+0x12f0>
imul   $0x756a2067,0x6e(%ecx,%ebp,2),%ebp
outsb  %ds:(%esi),(%dx)
imul   $0x28,(%eax),%esp
and    $0x69202973,%eax
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jb     804fb56 <_IO_stdin_used+0x130a>
or     %fs:(%eax),%al
and    $0x6e203a73,%eax
outsl  %ds:(%esi),(%dx)
je     804fb1c <_IO_stdin_used+0x12d0>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
imul   $0x706d6520,%fs:0x67(%esi),%ebp
je     804fb82 <_IO_stdin_used+0x1336>
and    %dh,0x6e(%ebp)
imul   $0x69280a70,0x61(%ebp),%ebp
data16
and    %bh,0x6f(%ecx)
jne    804fb39 <_IO_stdin_used+0x12ed>
imul   $0x3a747369,0x73(%esi),%ebp
and    %dh,0x73(%ebp)
and    %ch,%gs:0x70(%edi)
je     804fb92 <_IO_stdin_used+0x1346>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f742066
and    %ch,0x76(%edi)
gs
jb     804fba9 <_IO_stdin_used+0x135d>
imul   $0xa,0x29(%ebp,%eiz,2),%esp
add    %al,0x61(%edx)
and    %ch,%fs:0x6e(%ecx)
jo     804fbbd <_IO_stdin_used+0x1371>
je     804fb6a <_IO_stdin_used+0x131e>
insb   (%dx),%es:(%edi)
imul   $0x7325203a,0x65(%esi),%ebp
or     (%eax),%al
and    $0x42203a73,%eax
popa
and    %ah,%fs:0x6e(%ebp)
and    %ch,%fs:0x66(%edi)
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%bx,%si)
xor    %bh,0x25(%eax)
js     804fb98 <_IO_stdin_used+0x134c>
or     (%eax),%al
imul   $0x25783000,0x6d(%ebp,%eiz,2),%esp
xor    %dh,(%edx)
js     804fb86 <_IO_stdin_used+0x133a>
push   %ebp
sub    0xa783430,%esp
add    %dl,0x61(%ebx)
jbe    804fbee <_IO_stdin_used+0x13a2>
and    %dh,%fs:0x6e(%ebp)
imul   $0x6d206564,0x6f(%ebx),%esp
popa
jo     804fbb7 <_IO_stdin_used+0x136b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x25(%eax)
jae    804fbc5 <_IO_stdin_used+0x1379>
or     (%eax),%al
or     0x68(%ebx),%ah
popa
jb     804fbc6 <_IO_stdin_used+0x137a>
and    $0x3a783330,%eax
and    %al,(%eax)
and    $0x20783430,%eax
add    %al,0x70(%ecx)
jo     804fc1c <_IO_stdin_used+0x13d0>
outsb  %ds:(%esi),(%dx)
fs gs and %dl,%fs:%gs:0x6e(%ebp)
imul   $0x6d206564,0x6f(%ebx),%esp
popa
jo     804fbd2 <_IO_stdin_used+0x1386>
add    %ch,(%edi)
jne    804fc3f <_IO_stdin_used+0x13f3>
jb     804fbfd <_IO_stdin_used+0x13b1>
jae    804fc38 <_IO_stdin_used+0x13ec>
popa
jb     804fc38 <_IO_stdin_used+0x13ec>
das
jne    804fc44 <_IO_stdin_used+0x13f8>
imul   $0x2f7370,0x61(%ebp),%ebp
jae,pn 804fc46 <_IO_stdin_used+0x13fa>
insl   (%dx),%es:(%edi)
add    %ebx,(%ebx)
add    (%ebx),%edi
mov    $0x36000001,%eax
add    %al,(%eax)
add    %ch,%ah
mov    %edi,%?
call   *%esp
add    %eax,(%eax)
add    %bl,0x514ffff(%edx,%edx,4)
add    %al,(%eax)
in     (%dx),%al
xchg   %eax,%edx
(bad)
incl   -0x64340000(%ebx,%eax,1)
(bad)
(bad)
clc
add    %eax,(%eax)
add    %bl,(%esp,%ebx,4)
(bad)
decl   (%edx,%eax,1)
add    %al,(%eax)
jl     804fbb8 <_IO_stdin_used+0x136c>
(bad)
call   *0x2(%eax)
add    %al,(%eax)
sub    $0xa2,%al
(bad)
call   *-0x33fffffe(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
call   *%eax
add    (%eax),%al
add    %bl,(%esp,%ebp,4)
(bad)
call   *(%ebx,%eax,1)
add    %al,(%eax)
sub    $0xb0,%al
(bad)
ljmp   *0x0(%ebx,%eax,1)
add    %bh,-0x1(%eax,%esi,4)
pushl  -0x4f340000(%ebx,%eax,1)
(bad)
dec    %esp
add    (%eax),%eax
add    %bl,%ah
mov    $0xff,%cl
decl   (%eax)
add    $0x0,%al
add    %bh,-0x1(%edx,%esi,4)
call   *0x4(%eax)
add    %al,(%eax)
or     $0xb7,%al
(bad)
call   *-0x48d40000(%esp,%eax,1)
(bad)
ljmp   *0x4c000004(%eax)
mov    $0xff,%bh
(bad)
mov    $0x3c000004,%esp
mov    $0x530ffff,%edx
add    %al,(%eax)
pop    %esp
mov    $0x54cffff,%edx
add    %al,(%eax)
mov    %?,0x568ffff(%edx)
add    %al,(%eax)
lods   %ds:(%esi),%al
mov    $0x584ffff,%edx
add    %al,(%eax)
fdivrl 0x5a0ffff(%edx)
add    %al,(%eax)
cld
mov    $0x5b8ffff,%edx
add    %al,(%eax)
pop    %esp
mov    $0x5e4ffff,%ebx
add    %al,(%eax)
mov    $0x10ffffbb,%esp
push   %es
add    %al,(%eax)
int3
mov    $0x63cffff,%esp
add    %al,(%eax)
pushf
mov    $0x67cffff,%esi
add    %al,(%eax)
mov    %es,%eax
(bad)
ljmp   *0x3c000006(%eax)
(bad)
in     (%dx),%al
push   %es
add    %al,(%eax)
or     $0xc7,%al
(bad)
pushl  (%eax)
pop    %es
add    %al,(%eax)
pop    %esp
(bad)
(bad)
decl   0x0(%edi,%eax,1)
add    %ch,0x768ffff(%edi,%eax,8)
add    %al,(%eax)
cld
(bad)
(bad)
incl   -0x37b40000(%edi,%eax,1)
(bad)
jmp    *-0x43fffff9(%eax)
leave
(bad)
dec    %eax
pop    %es
add    %al,(%eax)
lods   %ds:(%esi),%al
lret   $0xffff
and    $0x8,%al
add    %al,(%eax)
mov    %ss,%edx
(bad)
incl   -0x63fffff8(%eax)
aam    $0xff
inc    %eax
or     %al,(%eax)
add    %ch,0x8dcffff(,%edx,8)
add    %al,(%eax)
jl     804fd01 <_IO_stdin_used+0x14b5>
(bad)
decl   (%eax)
or     %eax,(%eax)
add    %bh,(%ecx,%ebx,8)
(bad)
decl   0x9(%eax)
add    %al,(%eax)
sbb    $0xda,%al
(bad)
ljmp   *0x6c000009(%eax)
(bad)
inc    %esp
or     %eax,(%eax)
add    %bh,%ah
(bad)
incl   (%eax)
or     (%eax),%al
add    %cl,0xa2cffff(,%ebx,8)
add    %al,(%eax)
pop    %esp
(bad)
incl   0x0(%edx,%ecx,1)
add    %ch,(%ecx,%eiz,8)
(bad)
lcall  *-0x1e940000(%edx,%ecx,1)
(bad)
inc    %eax
or     (%eax),%al
add    %ch,%ah
loope  804fd72 <_IO_stdin_used+0x1526>
jmp    *%esp
or     (%eax),%al
add    %ch,0xb20ffff(%edx,%eiz,8)
add    %al,(%eax)
pop    %esp
jmp    1369fd85 <stderr+0xb64dbe5>
add    %al,(%eax)
cmp    $0xea,%al
(bad)
jmp    *-0x14240000(%ebx,%ecx,1)
(bad)
(bad)
cld
or     (%eax),%eax
add    %cl,-0x1(%esp,%ebp,8)
(bad)
cmp    %cl,(%eax,%eax,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804fdb7 <_IO_stdin_used+0x156b>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
adc    %cl,0x3b0ffff(%ebp)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804fdd7 <_IO_stdin_used+0x158b>
js     804fdd5 <_IO_stdin_used+0x1589>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,%ah
cltd
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,0x0(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,(%eax)
lcall  $0x0,$0x259ffff
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x4,0x80f00e46
add    0x1(%edx),%ebp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cwtl
add    %al,(%eax)
add    %ah,(%esp,%ebx,4)
(bad)
jmp    *0x3(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esp
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffba,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
fadds  (%eax)
add    %al,(%eax)
xchg   %eax,%esp
lahf
(bad)
jmp    *0x2(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffe,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %bl,(%eax)
add    %eax,(%eax)
add    %dh,%ah
mov    0x744ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x9a00e48
roll   %cl,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,0x0(%ecx,%eax,1)
add    %al,(%eax)
test   $0x40bffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
dec    %edx
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
mov    $0x1,%ah
add    %al,(%eax)
mov    $0x44ffffac,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,(%edx)
inc    %eax
push   %cs
add    $0x2c,%al
add    %al,(%eax)
add    %cl,%ah
add    %eax,(%eax)
add    %ah,-0x71(%eax)
(bad)
jmp    *%ebp
pop    %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa039f03,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
cld
add    %eax,(%eax)
add    %al,%al
lods   %ds:(%esi),%al
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,(%edx)
inc    %eax
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %dl,(%edx,%eax,1)
add    %al,(%eax)
clc
lods   %ds:(%esi),%al
(bad)
incl   (%ecx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
lods   %ds:(%esi),%al
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
inc    %esp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,0x2(%eax)
add    %al,(%eax)
int3
lods   %ds:(%esi),%eax
(bad)
call   *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ecx),%dh
push   %cs
adc    %al,0xe(%ebx,%eax,8)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4b,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x24000002(%eax)
scas   %es:(%edi),%al
(bad)
decl   0x4(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1d00e46
or     (%edx,%ecx,1),%al
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
faddl  (%edx)
add    %al,(%eax)
jo     8050034 <_IO_stdin_used+0x17e8>
(bad)
lcall  *0x0
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,%al
add    (%eax),%al
add    %bh,-0x1(%edx,%esi,4)
lcall  *0x0
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %al,(%ebx,%eax,1)
add    %al,(%eax)
mov    %dh,0x2ebffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
dec    %ebp
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %bl,0x0(%ebx,%eax,1)
add    %al,0x4fffff8d(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %bh,0x3(%eax)
add    %al,(%eax)
add    $0xb5,%al
(bad)
lcall  *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %dl,-0x4af80000(%ebx,%eax,1)
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %dh,0x1c000003(%eax)
mov    $0xff,%ch
lcall  *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %cl,%ah
add    (%eax),%eax
add    %ah,(%eax)
mov    $0xff,%ch
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
call   3c050190 <stderr+0x33ffdff0>
mov    $0xff,%ch
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xe(%ebp)
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %bh,0x53ffff(,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x42,%al
or     0xe(%ecx),%esi
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,(%esp,%eax,1)
add    %al,(%eax)
jo     8050187 <_IO_stdin_used+0x193b>
(bad)
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4502(%ebx)
push   %esp
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x43,%al
or     0x8(%esi,%ecx,1),%ebp
inc    %esp
ret
push   %cs
add    $0x0,%al
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,0x4(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
mov    $0xff,%ch
decl   0x1
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xa(%ecx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
test   %al,(%eax,%eax,1)
add    %cl,-0x3e00004a(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0xffffffa9,0x3600e45
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %al,%ah
add    $0x0,%al
add    %bl,(%eax)
mov    $0x1e1ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
push   %eax
dec    %ecx
addl   $0xffffff87,0x46048646
add    -0x7b(%ecx),%ecx
add    (%edx),%al
loopne 805028d <_IO_stdin_used+0x1a41>
vshufps $0xe,%ymm3,%ymm7,%ymm0
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dh,%al
add    $0x0,%al
add    %bl,%ah
mov    $0x4acffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9b00e46
dec    %esp
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,-0x41b80000(,%eax,1)
(bad)
inc    %edi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x6d00e46
xor    $0x140e0a01,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
js     805031f <_IO_stdin_used+0x1ad3>
add    %al,(%eax)
aam    $0xbf
(bad)
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %dl,-0x3ff80000(%ebp,%eax,1)
(bad)
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %dh,0x3c000005(%eax)
sar    $0xff,%bh
inc    %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %cl,%ah
add    $0xc0700000,%eax
(bad)
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %ah,(%eax,%eax,1)
add    %al,(%eax)
call   ac050392 <stderr+0xa3ffe1f2>
sar    $0xff,%bh
outsl  %ds:(%esi),(%dx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
inc    %eax
inc    %esp
addl   $0xffffff86,(%eax,%ecx,2)
add    -0x79(%edi),%edx
add    (%edx),%al
xlat   %ds:(%ebx)
or     %bh,%al
mov    $0xe,%bl
add    $0x43,%al
or     (%eax),%eax
pop    %eax
add    %al,(%eax)
add    %dl,(%eax)
push   %es
add    %al,(%eax)
in     (%dx),%al
sar    $0xff,%edi
jecxz  80503ba <_IO_stdin_used+0x1b6e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0x46100e0a(%edx),%cl
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ecx
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,0x0(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %es
add    %al,(%eax)
add    $0xff,%dl
call   *%edx
pop    %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
repnz add (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
add    %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
enter  $0x6,$0x0
add    $0xca,%al
(bad)
decl   (%edi)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff88,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
or     %al,(%edi)
add    %al,(%eax)
aam    $0xcb
(bad)
incl   0x0(%edi)
inc    %ebx
push   %cs
xor    %al,(%edx)
inc    %edx
or     (%esi),%cl
add    $0x43,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
and    $0x7,%al
add    %al,(%eax)
dec    %eax
int3
(bad)
decl   0x2(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
pusha
push   %eax
xchg   %eax,(%ebx)
push   %esi
test   %eax,(%edx)
pop    %eax
addl   $0x48,0x3048648
add    %ecx,(%edx)
vshufps $0xe,%ymm3,%ymm7,%ymm0
add    $0x47,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   %eax
pop    %es
add    %al,(%eax)
insb   (%dx),%es:(%edi)
into
(bad)
(bad)
mov    $0x1,%ebp
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x64,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%ebx
add    %dl,-0x13fffff9(%eax)
iret
(bad)
call   *%ebp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a8a02
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebp),%ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     -0x3d(%edx,%ecx,1),%edx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
lock pop %es
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sar    %bh
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%ebp)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %cl,(%eax,%ecx,1)
add    %al,(%eax)
mov    0x88ffffd0,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7c,0x21c0e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %cl,0x8(%eax)
add    %al,(%eax)
hlt
sar    %bh
decl   0x2
inc    %ebx
push   %cs
push   %eax
inc    %esp
addl   $0xffffff87,0x4804864c
add    -0x7b(%ebp),%edx
add    (%edx),%al
in     $0xa,%eax
vshufps $0xe,%ymm3,%ymm7,%ymm0
add    $0x43,%al
or     (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
je     805061e <_IO_stdin_used+0x1dd2>
add    %al,(%eax)
fcom   %st(2)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
inc    %eax
add    0xe(%ebx),%al
add    $0x54,%al
add    %al,(%eax)
add    %cl,-0x2cf00000(%eax,%ecx,1)
(bad)
inc    %ebp
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffae,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%ebx),%eax
xor    %eax,(%ecx)
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%esp
add    %al,(%eax)
add    %ah,%ah
or     %al,(%eax)
add    %cl,0x3affffd6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4502(%ebx)
data16
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
or     %cl,(%ecx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %dl,-0x7a(%eax)
add    -0x7d(%esi),%al
add    0xa(%ebp),%esp
mov    $0xe,%bl
add    $0x42,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,(%ecx,%ecx,1)
add    %al,(%eax)
add    %dl,%bh
(bad)
pushl  0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
lea    (%edx),%ecx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,0x9(%eax)
add    %al,(%eax)
test   %dl,%bh
(bad)
ljmp   *0x6(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4,0x80e00e46
add    0x2(%ecx),%ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
or     %eax,(%eax)
add    %dh,%al
(bad)
(bad)
fild   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffbb,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %ch,%ah
or     %eax,(%eax)
add    %dl,-0x6d000022(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   $0x41140e0a
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
inc    %esp
or     (%eax),%al
add    %bl,%al
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,0xc00000a(%eax)
loopne 8050826 <_IO_stdin_used+0x1fda>
incl   (%edx)
.byte 0x80
xchg   %eax,%edi
add    $0x8,%al
pusha
xchg   %eax,%edi
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
mov    (%eax,%ecx,1),%al
or     $0x34000000,%eax
call   81e2732 <stderr+0x190592>
add    %al,(%eax)
or     %bl,(%edi)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x1f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
mov    0x6080485,%al
add    %al,(%eax)
add    %dl,%al
addl   $0xa,(%eax,%ecx,1)
cmp    (%edx),%al
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
and    %al,0x208
add    %dl,%al
add    %eax,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dl,%ah
mov    %al,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
les    0x120804(%eax),%ecx
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x54(%edi)
mov    %al,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x26(%edi)
xchg   %eax,(%eax,%ecx,1)
add    %al,(%eax)
adc    $0x1f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,%dh
mov    (%eax,%ecx,1),%al
(bad)
mov    (%eax,%ecx,1),%al
push   %es
mov    (%eax,%ecx,1),%eax
push   %ss
mov    (%eax,%ecx,1),%eax
mov    %es:(%eax,%ecx,1),%eax
mov    %ss:(%eax,%ecx,1),%eax
inc    %esi
mov    (%eax,%ecx,1),%eax
push   %esi
mov    (%eax,%ecx,1),%eax
mov    (%eax,%ecx,1),%ax
jbe    8051fbd <_IO_stdin_used+0x3771>
add    $0x8,%al
xchg   %cl,-0x7469f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%eax
mov    $0x8b,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
(bad)
mov    (%eax,%ecx,1),%eax
out    %al,$0x8b
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
push   %es
mov    %es,(%eax,%ecx,1)
push   %ss
mov    %es,(%eax,%ecx,1)
mov    %es,%es:(%eax,%ecx,1)
mov    %es,%ss:(%eax,%ecx,1)
inc    %esi
mov    %es,(%eax,%ecx,1)
push   %esi
mov    %es,(%eax,%ecx,1)
data16
mov    %es,(%eax,%ecx,1)
jbe    8051ffe <_IO_stdin_used+0x37b2>
add    $0x8,%al
xchg   %cl,0x48c9608(%esp,%eax,1)
or     %ah,-0x49f7fb74(%esi)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
out    %al,$0x8c
add    $0x8,%al
(bad)
mov    %es,(%eax,%ecx,1)
push   %es
lea    (%eax,%ecx,1),%eax
push   %ss
lea    (%eax,%ecx,1),%eax
lea    %es:(%eax,%ecx,1),%eax
lea    %ss:(%eax,%ecx,1),%eax
inc    %esi
lea    (%eax,%ecx,1),%eax
push   %esi
lea    (%eax,%ecx,1),%eax
lea    (%eax,%ecx,1),%ax
jbe    805203f <_IO_stdin_used+0x37f3>
add    $0x8,%al
xchg   %cl,-0x7269f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lea    (%eax,%ecx,1),%eax
mov    $0x8d,%dh
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
(bad)
lea    (%eax,%ecx,1),%eax
out    %al,$0x8d
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
push   %es
mov    (%eax,%ecx,1),%es
push   %ss
mov    (%eax,%ecx,1),%es
mov    %es:(%eax,%ecx,1),%es
mov    %ss:(%eax,%ecx,1),%es
inc    %esi
mov    (%eax,%ecx,1),%es
push   %esi
mov    (%eax,%ecx,1),%es
data16
mov    (%eax,%ecx,1),%es
jbe    8052080 <_IO_stdin_used+0x3834>
add    $0x8,%al
xchg   %esi,%esp
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xchg   %esi,%esp
add    $0x8,%al
aam    $0xf0
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xchg   %esi,%esp
add    $0x8,%al
fcomi  %st(2),%st
add    $0x8,%al
loope  805210c <_IO_stdin_used+0x38c0>
add    $0x8,%al
out    %al,$0xf2
add    $0x8,%al
ljmp   $0x0,$0x804f2
add    %al,-0x10f7fb0c(%edi)
repnz add $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xor    %bl,%dh
add    $0x8,%al
ss
repz add $0x8,%al
inc    %ecx
repz add $0x8,%al
inc    %esi
repz add $0x8,%al
xchg   %esi,%esp
add    $0x8,%al
fcomi  %st(4),%st
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xchg   %esi,%esp
add    $0x8,%al
sti
hlt
add    $0x8,%al
hlt
hlt
add    $0x8,%al
add    %ch,%dh
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xchg   %esi,%esp
add    $0x8,%al
leave
sti
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
xchg   %esi,%esp
add    $0x8,%al
dec    %esi
repnz add $0x8,%al
(bad)
add    $0x8,%al
add    %al,(%eax)
cmp    %esi,(%ebx)
xor    $0x63,%al
cmp    %ah,0x65(%ebp)
xor    $0x30,%al
bound  %si,(%ecx)
xor    %esi,(%edi)
xor    0x31(%ecx),%ah
xor    $0x65663335,%eax
xor    $0x33653865,%eax
arpl   %si,(%eax)
cmp    %esi,0x33323066
cmp    %ah,0x61(%esi)
cs fs bound %esi,%cs:%fs:%gs:0x67(%ebp)
add    %al,(%eax)
add    %al,(%eax)
cs
and    $0x8b,%al
.byte 0x39
