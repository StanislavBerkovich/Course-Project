das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %dh,%bl
jmp    8147719 <optarg+0xf14f5>
mov    $0x25,%al
adc    $0x5f,%al
or     -0xa94(%bx,%si),%dl
and    %esi,0x41(%edi)
.byte 0xfe
insb   (%dx),%es:(%edi)
add    (%eax),%eax
add    %al,(%eax)
push   %ecx
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax,%eax,2)
dec    %eax
add    %ah,0x51121d(,%ebp,2)
add    %al,(%eax)
push   %edx
add    %al,(%eax)
add    %bl,0x0(%eax)
add    %al,(%eax)
sub    %ebx,0x50bc1c8c
jbe    8048176 <unsetenv@plt-0xe1a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <unsetenv@plt-0xe03>
dec    %ebx
jecxz  80481a4 <unsetenv@plt-0xdec>
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %ah,%al
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
arpl   %ax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
daa
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pushf
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %es,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ja     8048328 <unsetenv@plt-0xc68>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popl   (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%edx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jne    8048356 <unsetenv@plt-0xc3a>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    $0x3,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    %al,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
les    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,%gs:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
rolb   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stc
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ja     8048637 <unsetenv@plt-0x959>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x20000001(%ebp)
bound  %eax,0x408
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,(%eax)
add    (%eax),%eax
add    %al,%al
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %al,(%edx)
add    (%eax),%al
add    %al,%ah
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ah,(%ebx)
add    (%eax),%eax
add    %ah,%al
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%ebx)
add    %al,(%eax)
add    %ah,%ah
or     %eax,0x408
add    %dl,(%ecx)
add    %cl,(%edi)
add    %cl,%ah
add    %al,(%eax)
add    %ah,%al
popa
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %bh,0x2(%esi)
add    %al,(%eax)
shlb   $0x8,0x5(%ecx)
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
pop    %esp
add    %al,(%eax)
add    %al,(%eax)
bound  %eax,0x408
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,%al
add    %eax,(%eax)
add    %ah,(%edx,%eiz,2)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804880b <unsetenv@plt-0x785>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048819 <unsetenv@plt-0x777>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
jae    8048826 <unsetenv@plt-0x76a>
jo     8048817 <unsetenv@plt-0x779>
jo     804882f <unsetenv@plt-0x761>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048833 <unsetenv@plt-0x75d>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     804883f <unsetenv@plt-0x751>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048846 <unsetenv@plt-0x74a>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     8048858 <unsetenv@plt-0x738>
outsl  %ds:(%esi),(%dx)
ja     804884a <unsetenv@plt-0x746>
add    %dh,0x74(%ebx)
jb     804885a <unsetenv@plt-0x736>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     804885d <unsetenv@plt-0x733>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     804886d <unsetenv@plt-0x723>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     8048879 <unsetenv@plt-0x717>
gs
js     804887c <unsetenv@plt-0x714>
add    %bl,0x5f(%edi)
data16
js     8048881 <unsetenv@plt-0x70f>
je     8048871 <unsetenv@plt-0x71f>
je     8048873 <unsetenv@plt-0x71d>
je     804884a <unsetenv@plt-0x746>
xor    $0x0,%al
data16
arpl   %bp,0x64(%eax)
imul   $0x6f727265,0x0(%edx),%esi
jb     8048823 <unsetenv@plt-0x76d>
pop    %edi
pop    %edi
jae    804889b <unsetenv@plt-0x6f5>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     804884b <unsetenv@plt-0x745>
pop    %edi
gs
js     80488b8 <unsetenv@plt-0x6d8>
je     8048851 <unsetenv@plt-0x73f>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x72(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jb     80488c0 <unsetenv@plt-0x6d0>
push   $0x72700072
outsl  %ds:(%esi),(%dx)
addr16 jb 80488c7 <unsetenv@plt-0x6c9>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    80488f0 <unsetenv@plt-0x6a0>
gs
jb     80488f4 <unsetenv@plt-0x69c>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     80488f2 <unsetenv@plt-0x69e>
pop    %edi
addr16
gs
je     80488f1 <unsetenv@plt-0x69f>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    804890a <unsetenv@plt-0x686>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     804889d <unsetenv@plt-0x6f3>
jae    8048913 <unsetenv@plt-0x67d>
jb     8048915 <unsetenv@plt-0x67b>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
data16
jne    8048922 <unsetenv@plt-0x66e>
imul   $0x7300736e,0x65(%ebp),%ebp
je     8048929 <unsetenv@plt-0x667>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048924 <unsetenv@plt-0x66c>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    804892c <unsetenv@plt-0x664>
je     80488c9 <unsetenv@plt-0x6c7>
jne    804893f <unsetenv@plt-0x651>
imul   $0x7461736e,0x65(%ebp),%ebp
add    %bl,0x5f(%edi)
gs
jb     804894a <unsetenv@plt-0x646>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x70(%ebp,%esi,2)
xor    (%eax),%al
jne    8048967 <unsetenv@plt-0x629>
jae    8048960 <unsetenv@plt-0x630>
je     8048962 <unsetenv@plt-0x62e>
outsb  %ds:(%esi),(%dx)
jbe    8048900 <unsetenv@plt-0x690>
pop    %edi
pop    %edi
data16
js     8048978 <unsetenv@plt-0x618>
je     8048968 <unsetenv@plt-0x628>
je     804893f <unsetenv@plt-0x651>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     8048982 <unsetenv@plt-0x60e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048980 <unsetenv@plt-0x610>
outsl  %ds:(%esi),(%dx)
jne    8048993 <unsetenv@plt-0x5fd>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804899b <unsetenv@plt-0x5f5>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x73786c5f,0x5f(%eax,%eax,1),%esi
je     80489ae <unsetenv@plt-0x5e2>
je     8048985 <unsetenv@plt-0x60b>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    80489bb <unsetenv@plt-0x5d5>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048959 <unsetenv@plt-0x637>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     80489dc <unsetenv@plt-0x5b4>
je     80489cc <unsetenv@plt-0x5c4>
je     80489a3 <unsetenv@plt-0x5ed>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     80489e6 <unsetenv@plt-0x5aa>
outsb  %ds:(%esi),(%dx)
jbe    8048984 <unsetenv@plt-0x60c>
outsl  %ds:(%esi),(%dx)
jo     80489fb <unsetenv@plt-0x595>
popa
jb     80489f1 <unsetenv@plt-0x59f>
add    %bl,0x5f(%edi)
data16
jb     80489f5 <unsetenv@plt-0x59b>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048a0e <unsetenv@plt-0x582>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     8048a17 <unsetenv@plt-0x579>
jo     8048a1e <unsetenv@plt-0x572>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %dh,0x74(%ebp)
imul   $0x65670073,0x65(%ebp),%ebp
je     8048a25 <unsetenv@plt-0x56b>
ja     8048a28 <unsetenv@plt-0x568>
add    %ah,0x77(%esi)
jb     8048a32 <unsetenv@plt-0x55e>
je     8048a30 <unsetenv@plt-0x560>
add    %ah,0x65(%edi)
je     8048a44 <unsetenv@plt-0x54c>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    80489d9 <unsetenv@plt-0x5b7>
arpl   %bp,0x63(%edi,%ebp,2)
imul   $0x65,0x67(%edi),%ebx
je     8048a57 <unsetenv@plt-0x539>
imul   $0x665f5f00,0x65(%ebp),%ebp
jo     8048a51 <unsetenv@plt-0x53f>
outsb  %ds:(%esi),(%dx)
imul   $0x636f6c00,%fs:0x67(%esi),%ebp
popa
insb   (%dx),%es:(%edi)
je     8048a62 <unsetenv@plt-0x52e>
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x65(%ebx,%esi,2)
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048a6b <unsetenv@plt-0x525>
push   $0x6b6d0072
je     8048a78 <unsetenv@plt-0x518>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 8048a79 <unsetenv@plt-0x517>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048a9e <unsetenv@plt-0x4f2>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048a9a <unsetenv@plt-0x4f6>
outsb  %ds:(%esi),(%dx)
add    %ah,0x63(%esi)
outsb  %ds:(%esi),(%dx)
je     8048aa8 <unsetenv@plt-0x4e8>
add    %bl,0x5f(%edi)
jae    8048ab1 <unsetenv@plt-0x4df>
jb     8048aac <unsetenv@plt-0x4e4>
outsb  %ds:(%esi),(%dx)
je     8048aac <unsetenv@plt-0x4e4>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x75(%esi)
je     8048ab8 <unsetenv@plt-0x4d8>
insl   (%dx),%es:(%edi)
gs
jae    8048ab4 <unsetenv@plt-0x4dc>
je     8048a55 <unsetenv@plt-0x53b>
bound  %ebp,0x6e(%ecx)
fs
je     8048ac0 <unsetenv@plt-0x4d0>
js     8048ad1 <unsetenv@plt-0x4bf>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x65636361,0x0(%esi),%ebp
jae    8048add <unsetenv@plt-0x4b3>
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
popa
je     8048aa8 <unsetenv@plt-0x4e8>
xor    $0x0,%al
jae    8048aea <unsetenv@plt-0x4a6>
jb     8048adb <unsetenv@plt-0x4b5>
insl   (%dx),%es:(%edi)
jo     8048a7b <unsetenv@plt-0x515>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048afb <unsetenv@plt-0x495>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x766f5f5f,0x0(%esi),%ebp
gs
jb     8048afa <unsetenv@plt-0x496>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048a98 <unsetenv@plt-0x4f8>
data16
jo     8048b10 <unsetenv@plt-0x480>
je     8048b10 <unsetenv@plt-0x480>
pop    %edi
jne    8048b0e <unsetenv@plt-0x482>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b22 <unsetenv@plt-0x46e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b2d <unsetenv@plt-0x463>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b31 <unsetenv@plt-0x45f>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048b35 <unsetenv@plt-0x45b>
js     8048b3b <unsetenv@plt-0x455>
je     8048ad4 <unsetenv@plt-0x4bc>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048b51 <unsetenv@plt-0x43f>
popa
jb     8048b54 <unsetenv@plt-0x43c>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
add    %al,%ss:0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000400,%eax
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
push   %es
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
pop    %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
or     %eax,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
pop    %es
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %cl,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
or     %eax,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0xa0000,%eax
dec    %edi
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %cl,(%ecx)
add    %bl,0x3(%ecx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    8048c49 <unsetenv@plt-0x347>
imul   $0x80000,(%ecx),%ecx
add    %gs:(%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x70000,0xd(%ecx),%ebp
jno    8048c45 <unsetenv@plt-0x34b>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x37b,0x60000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%edi
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
add    $0x38500,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x40000,0xd(%ecx),%ebp
nop
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%esi)
imul   $0x30000,0xd(%ecx),%ebp
lcall  $0x0,$0x10000003
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
pop    %edi
add    $0x240608,%eax
add    %al,%al
popa
add    $0x520508,%eax
add    %al,%ah
popa
add    $0x530508,%eax
add    %ah,%al
popa
add    $0x540508,%eax
add    %al,(%eax)
bound  %eax,0x580508
add    %ah,(%eax)
bound  %eax,0x510508
add    %ah,(%edx,%eiz,2)
add    $0x590508,%eax
or     $0x60,%al
add    $0x10708,%eax
add    %dl,(%eax)
pusha
add    $0x20708,%eax
add    %dl,(%eax,%eiz,2)
add    $0x30708,%eax
add    %bl,(%eax)
pusha
add    $0x40708,%eax
add    %bl,(%eax,%eiz,2)
add    $0x50708,%eax
add    %ah,(%eax)
pusha
add    $0x60708,%eax
add    %ah,(%eax,%eiz,2)
add    $0x70708,%eax
add    %ch,(%eax)
pusha
add    $0x80708,%eax
add    %ch,(%eax,%eiz,2)
add    $0x90708,%eax
add    %dh,(%eax)
pusha
add    $0xa0708,%eax
add    %dh,(%eax,%eiz,2)
add    $0xb0708,%eax
add    %bh,(%eax)
pusha
add    $0xc0708,%eax
add    %bh,(%eax,%eiz,2)
add    $0xd0708,%eax
add    %al,0x60(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%eiz,2)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
pusha
add    $0x100708,%eax
add    %cl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x60(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x60(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    $0x60600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%eiz,2)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080560
sbb    %al,(%eax)
add    %ch,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x60(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x60(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    $0x60800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%eiz,2)
add    %al,(%eax)
mov    %ah,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x21070805(%eax,%eiz,2)
add    %al,(%eax)
nop
pusha
add    $0x220708,%eax
add    %dl,0x23070805(%eax,%eiz,2)
add    %al,(%eax)
cwtl
pusha
add    $0x240708,%eax
add    %bl,0x25070805(%eax,%eiz,2)
add    %al,(%eax)
mov    0x7080560,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
pusha
add    $0x270708,%eax
add    %ch,0x7080560(%eax)
sub    %al,(%eax)
add    %ch,0x29070805(%eax,%eiz,2)
add    %al,(%eax)
mov    $0x60,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%eiz,2)
add    %al,(%eax)
mov    $0x7080560,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%eiz,2)
add    %al,(%eax)
shlb   $0x8,0x5(%eax)
pop    %es
add    %al,%cs:(%eax)
les    0x5(%eax),%esp
or     %al,(%edi)
das
add    %al,(%eax)
enter  $0x560,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
pusha
add    $0x310708,%eax
add    %dl,%al
pusha
add    $0x320708,%eax
add    %dl,%ah
pusha
add    $0x330708,%eax
add    %bl,%al
pusha
add    $0x340708,%eax
add    %bl,%ah
pusha
add    $0x350708,%eax
add    %ah,%al
pusha
add    $0x360708,%eax
add    %ah,%ah
pusha
add    $0x370708,%eax
add    %ch,%al
pusha
add    $0x380708,%eax
add    %ch,%ah
pusha
add    $0x390708,%eax
add    %dh,%al
pusha
add    $0x3a0708,%eax
add    %dh,%ah
pusha
add    $0x3b0708,%eax
add    %bh,%al
pusha
add    $0x3c0708,%eax
add    %bh,%ah
pusha
add    $0x3d0708,%eax
add    %al,(%eax)
popa
add    $0x3e0708,%eax
add    %al,(%ecx,%eiz,2)
add    $0x3f0708,%eax
add    %cl,(%eax)
popa
add    $0x400708,%eax
add    %cl,(%ecx,%eiz,2)
add    $0x410708,%eax
add    %dl,(%eax)
popa
add    $0x420708,%eax
add    %dl,(%ecx,%eiz,2)
add    $0x430708,%eax
add    %bl,(%eax)
popa
add    $0x440708,%eax
add    %bl,(%ecx,%eiz,2)
add    $0x450708,%eax
add    %ah,(%eax)
popa
add    $0x460708,%eax
add    %ah,(%ecx,%eiz,2)
add    $0x470708,%eax
add    %ch,(%eax)
popa
add    $0x480708,%eax
add    %ch,(%ecx,%eiz,2)
add    $0x490708,%eax
add    %dh,(%eax)
popa
add    $0x4a0708,%eax
add    %dh,(%ecx,%eiz,2)
add    $0x4b0708,%eax
add    %bh,(%eax)
popa
add    $0x4c0708,%eax
add    %bh,(%ecx,%eiz,2)
add    $0x4d0708,%eax
add    %al,0x61(%eax)
add    $0x4e0708,%eax
add    %al,0x5(%ecx,%eiz,2)
or     %al,(%edi)
dec    %edi
add    %al,(%eax)
dec    %eax
popa
add    $0x500708,%eax
push   %ebx
sub    $0x8,%esp
call   8049e30 <__sprintf_chk@plt+0x9b0>
add    $0xd0a7,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048f6e <unsetenv@plt-0x22>
call   80491c0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8056004
jmp    *0x8056008
add    %al,(%eax)
jmp    *0x805600c
push   $0x0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056010
push   $0x8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056014
push   $0x10
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056018
push   $0x18
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805601c
push   $0x20
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056020
push   $0x28
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056024
push   $0x30
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056028
push   $0x38
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805602c
push   $0x40
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056030
push   $0x48
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056034
push   $0x50
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056038
push   $0x58
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805603c
push   $0x60
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056040
push   $0x68
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056044
push   $0x70
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056048
push   $0x78
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805604c
push   $0x80
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056050
push   $0x88
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056054
push   $0x90
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056058
push   $0x98
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805605c
push   $0xa0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056060
push   $0xa8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056064
push   $0xb0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056068
push   $0xb8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805606c
push   $0xc0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056070
push   $0xc8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056074
push   $0xd0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056078
push   $0xd8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805607c
push   $0xe0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056080
push   $0xe8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056084
push   $0xf0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056088
push   $0xf8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805608c
push   $0x100
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056090
push   $0x108
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056094
push   $0x110
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056098
push   $0x118
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805609c
push   $0x120
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560a0
push   $0x128
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560a4
push   $0x130
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560a8
push   $0x138
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560ac
push   $0x140
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560b0
push   $0x148
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560b4
push   $0x150
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560b8
push   $0x158
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560bc
push   $0x160
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560c0
push   $0x168
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560c4
push   $0x170
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560c8
push   $0x178
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560cc
push   $0x180
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560d0
push   $0x188
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560d4
push   $0x190
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560d8
push   $0x198
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560dc
push   $0x1a0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560e0
push   $0x1a8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560e4
push   $0x1b0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560e8
push   $0x1b8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560ec
push   $0x1c0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560f0
push   $0x1c8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560f4
push   $0x1d0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560f8
push   $0x1d8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x80560fc
push   $0x1e0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056100
push   $0x1e8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056104
push   $0x1f0
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056108
push   $0x1f8
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805610c
push   $0x200
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056110
push   $0x208
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056114
push   $0x210
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056118
push   $0x218
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805611c
push   $0x220
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056120
push   $0x228
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056124
push   $0x230
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056128
push   $0x238
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805612c
push   $0x240
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056130
push   $0x248
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056134
push   $0x250
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056138
push   $0x258
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x805613c
push   $0x260
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056140
push   $0x268
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056144
push   $0x270
jmp    8048f80 <unsetenv@plt-0x10>
jmp    *0x8056148
push   $0x278
jmp    8048f80 <unsetenv@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xb0,%esp
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%edi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804cef0 <__sprintf_chk@plt+0x3a70>
movl   $0x80526bd,0x4(%esp)
movl   $0x6,(%esp)
call   8049360 <setlocale@plt>
movl   $0x8050a52,0x4(%esp)
movl   $0x8050a44,(%esp)
call   80493d0 <bindtextdomain@plt>
movl   $0x8050a44,(%esp)
call   80490d0 <textdomain@plt>
movl   $0x804a690,(%esp)
call   8050990 <__sprintf_chk@plt+0x7510>
movl   $0x0,0x8056244
00
movb   $0x0,0x8056242
movb   $0x0,0x8056243
movb   $0x0,0x3c(%esp)
movl   $0x0,0x10(%esp)
movl   $0x8051300,0xc(%esp)
movl   $0x8050ab3,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   8049200 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     80496eb <__sprintf_chk@plt+0x26b>
cmp    $0x66,%eax
je     804950e <__sprintf_chk@plt+0x8e>
jg     8049578 <__sprintf_chk@plt+0xf8>
cmp    $0x61,%eax
je     8049770 <__sprintf_chk@plt+0x2f0>
nop
lea    0x0(%esi,%eiz,1),%esi
jg     80495a8 <__sprintf_chk@plt+0x128>
cmp    $0xffffff7d,%eax
je     804962e <__sprintf_chk@plt+0x1ae>
cmp    $0xffffff7e,%eax
jne    804974e <__sprintf_chk@plt+0x2ce>
movl   $0x0,(%esp)
call   8049f70 <__sprintf_chk@plt+0xaf0>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x72,%eax
je     804975a <__sprintf_chk@plt+0x2da>
jg     80495c8 <__sprintf_chk@plt+0x148>
cmp    $0x68,%eax
je     80496df <__sprintf_chk@plt+0x25f>
cmp    $0x6d,%eax
nop
jne    804974e <__sprintf_chk@plt+0x2ce>
orl    $0x2,0x8056244
jmp    804950e <__sprintf_chk@plt+0x8e>
lea    0x0(%esi),%esi
cmp    $0x63,%eax
je     8049622 <__sprintf_chk@plt+0x1a2>
cmp    $0x64,%eax
jne    804974e <__sprintf_chk@plt+0x2ce>
mov    0x8056224,%esi
jmp    804950e <__sprintf_chk@plt+0x8e>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x74,%eax
je     8049690 <__sprintf_chk@plt+0x210>
add    $0xffffff80,%eax
jne    804974e <__sprintf_chk@plt+0x2ce>
mov    0x805616c,%eax
movl   $0x4,0x10(%esp)
movl   $0x80512c8,0xc(%esp)
movl   $0x80512dc,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x8056224,%eax
movl   $0x8050a64,(%esp)
mov    %eax,0x4(%esp)
call   804a5b0 <__sprintf_chk@plt+0x1130>
mov    0x80512c8(,%eax,4),%eax
or     %eax,0x8056244
jmp    804950e <__sprintf_chk@plt+0x8e>
movb   $0x1,0x8056243
jmp    804950e <__sprintf_chk@plt+0x8e>
mov    0x8056168,%eax
movl   $0x0,0x24(%esp)
movl   $0x8050a6b,0x20(%esp)
movl   $0x8050a77,0x1c(%esp)
mov    %eax,0xc(%esp)
mov    0x8056220,%eax
movl   $0x8050a87,0x18(%esp)
movl   $0x8050a93,0x14(%esp)
movl   $0x8050aa2,0x10(%esp)
movl   $0x8050a40,0x8(%esp)
movl   $0x8050aad,0x4(%esp)
mov    %eax,(%esp)
call   804ea40 <__sprintf_chk@plt+0x55c0>
movl   $0x0,(%esp)
call   80491d0 <exit@plt>
mov    0x8056224,%eax
movl   $0xd,0x8(%esp)
movl   $0x8056230,(%esp)
mov    %eax,0x4(%esp)
call   804cb60 <__sprintf_chk@plt+0x36e0>
test   %al,%al
je     804977c <__sprintf_chk@plt+0x2fc>
movl   $0x0,0x8056234
00
mov    0x8056230,%eax
mov    0x8056234,%edx
movb   $0x1,0x3c(%esp)
mov    %eax,0x8056238
mov    %edx,0x805623c
jmp    804950e <__sprintf_chk@plt+0x8e>
movb   $0x1,0x8056241
jmp    804950e <__sprintf_chk@plt+0x8e>
cmpl   $0x0,0x8056244
jne    80496fe <__sprintf_chk@plt+0x27e>
movl   $0x3,0x8056244
00
cmpb   $0x0,0x3c(%esp)
je     80497ce <__sprintf_chk@plt+0x34e>
cmpb   $0x0,0x8056242
jne    804971a <__sprintf_chk@plt+0x29a>
test   %esi,%esi
je     804985b <__sprintf_chk@plt+0x3db>
movl   $0x5,0x8(%esp)
movl   $0x8051214,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049170 <error@plt>
movl   $0x1,(%esp)
call   8049f70 <__sprintf_chk@plt+0xaf0>
mov    0x8056224,%eax
movb   $0x1,0x8056242
mov    %eax,0x805622c
jmp    804950e <__sprintf_chk@plt+0x8e>
orl    $0x1,0x8056244
jmp    804950e <__sprintf_chk@plt+0x8e>
mov    0x8056224,%eax
mov    %eax,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x80509e8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x3c(%esp)
call   80490a0 <dcgettext@plt>
mov    0x3c(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049170 <error@plt>
jmp    80496b5 <__sprintf_chk@plt+0x235>
cmpb   $0x0,0x8056242
je     8049b2c <__sprintf_chk@plt+0x6ac>
lea    0x50(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x805622c,%eax
cmpb   $0x0,0x8056241
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
je     8049c0f <__sprintf_chk@plt+0x78f>
call   8049420 <__lxstat64@plt>
test   %eax,%eax
setne  %al
test   %al,%al
jne    8049c1e <__sprintf_chk@plt+0x79e>
mov    0x90(%esp),%eax
test   %esi,%esi
mov    %eax,0x8056230
mov    0x94(%esp),%eax
mov    %eax,0x8056234
mov    0x98(%esp),%eax
mov    %eax,0x8056238
mov    0x9c(%esp),%eax
mov    %eax,0x805623c
je     804985b <__sprintf_chk@plt+0x3db>
mov    0x8056244,%eax
test   $0x1,%al
jne    8049caf <__sprintf_chk@plt+0x82f>
test   $0x2,%al
jne    8049c9c <__sprintf_chk@plt+0x81c>
cmp    %edi,0x8056200
je     8049c87 <__sprintf_chk@plt+0x807>
mov    $0x1,%eax
mov    %ebx,0xc(%ebp)
mov    %eax,%ebx
mov    %edi,0x8(%ebp)
jmp    80499a2 <__sprintf_chk@plt+0x522>
xor    %edi,%edi
mov    $0x1,%edx
cmpb   $0x0,0x1(%esi)
jne    80499bf <__sprintf_chk@plt+0x53f>
mov    0x8056244,%eax
cmp    $0x3,%eax
je     80498b0 <__sprintf_chk@plt+0x430>
cmp    $0x2,%eax
je     8049a24 <__sprintf_chk@plt+0x5a4>
sub    $0x1,%eax
jne    8049d2b <__sprintf_chk@plt+0x8ab>
movl   $0x3ffffffe,0x805623c
3f
xor    %eax,%eax
mov    $0x8056230,%ecx
cmpb   $0x0,0x8056240
cmove  %ecx,%eax
cmpb   $0x0,0x8056241
je     80498d3 <__sprintf_chk@plt+0x453>
cmp    $0xffffffff,%edx
je     8049a33 <__sprintf_chk@plt+0x5b3>
cmp    $0x1,%edx
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
je     80499df <__sprintf_chk@plt+0x55f>
mov    %edx,(%esp)
mov    %esi,0x8(%esp)
movl   $0xffffff9c,0x4(%esp)
mov    %edx,0x3c(%esp)
call   804a870 <__sprintf_chk@plt+0x13f0>
mov    0x3c(%esp),%edx
test   %eax,%eax
sete   %cl
test   %edx,%edx
jne    8049929 <__sprintf_chk@plt+0x4a9>
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
call   8049430 <close@plt>
mov    0x3c(%esp),%ecx
test   %eax,%eax
jne    8049b0d <__sprintf_chk@plt+0x68d>
test   %cl,%cl
jne    8049a1a <__sprintf_chk@plt+0x59a>
test   %edi,%edi
jne    8049a61 <__sprintf_chk@plt+0x5e1>
cmpb   $0x0,0x8056243
je     8049950 <__sprintf_chk@plt+0x4d0>
call   80492f0 <__errno_location@plt>
cmpl   $0x2,(%eax)
je     8049a1a <__sprintf_chk@plt+0x59a>
mov    %esi,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x8050b25,0x4(%esp)
mov    %eax,%edi
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,%esi
call   80492f0 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
xor    %eax,%eax
addl   $0x1,0x8056200
and    %eax,%ebx
mov    0x8056200,%eax
cmp    %eax,0x8(%ebp)
jle    8049aa6 <__sprintf_chk@plt+0x626>
mov    0xc(%ebp),%ecx
mov    (%ecx,%eax,4),%esi
cmpb   $0x2d,(%esi)
je     8049879 <__sprintf_chk@plt+0x3f9>
cmpb   $0x0,0x8056243
jne    80499d5 <__sprintf_chk@plt+0x555>
cmpb   $0x0,0x8056241
je     8049ab5 <__sprintf_chk@plt+0x635>
xor    %edi,%edi
or     $0xffffffff,%edx
jmp    804988a <__sprintf_chk@plt+0x40a>
movl   $0x0,0x8(%esp)
movl   $0xffffff9c,0x4(%esp)
movl   $0x1,(%esp)
call   804a870 <__sprintf_chk@plt+0x13f0>
test   %eax,%eax
je     8049a1a <__sprintf_chk@plt+0x59a>
call   80492f0 <__errno_location@plt>
cmpl   $0x9,(%eax)
jne    8049931 <__sprintf_chk@plt+0x4b1>
cmpb   $0x0,0x8056243
je     8049931 <__sprintf_chk@plt+0x4b1>
mov    $0x1,%eax
jmp    8049999 <__sprintf_chk@plt+0x519>
movl   $0x3ffffffe,0x8056234
3f
jmp    80498b0 <__sprintf_chk@plt+0x430>
movl   $0x100,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0xffffff9c,0x4(%esp)
movl   $0xffffffff,(%esp)
call   804a870 <__sprintf_chk@plt+0x13f0>
test   %eax,%eax
sete   %cl
jmp    8049929 <__sprintf_chk@plt+0x4a9>
mov    %esi,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x8050b15,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490a0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %edi,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049170 <error@plt>
xor    %eax,%eax
jmp    8049999 <__sprintf_chk@plt+0x519>
xor    %eax,%eax
test   %bl,%bl
sete   %al
mov    %eax,(%esp)
call   80491d0 <exit@plt>
movl   $0x1b6,0xc(%esp)
xor    %edi,%edi
movl   $0x941,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x0,(%esp)
call   804a800 <__sprintf_chk@plt+0x1380>
cmp    $0xffffffff,%eax
mov    %eax,%edx
jne    804988a <__sprintf_chk@plt+0x40a>
mov    %eax,0x3c(%esp)
call   80492f0 <__errno_location@plt>
mov    (%eax),%edi
lea    -0x15(%edi),%eax
cmp    $0x1,%eax
jbe    80499d5 <__sprintf_chk@plt+0x555>
cmp    $0x1,%edi
mov    $0x0,%eax
mov    0x3c(%esp),%edx
cmove  %eax,%edi
jmp    804988a <__sprintf_chk@plt+0x40a>
mov    %esi,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x8050b02,0x4(%esp)
mov    %eax,%edi
jmp    804996a <__sprintf_chk@plt+0x4ea>
test   %esi,%esi
je     8049bcc <__sprintf_chk@plt+0x74c>
lea    0x40(%esp),%ecx
mov    %ecx,(%esp)
mov    %ecx,0x3c(%esp)
call   804a900 <__sprintf_chk@plt+0x1480>
mov    0x3c(%esp),%ecx
mov    %esi,%edx
mov    $0x8056230,%eax
call   8049f00 <__sprintf_chk@plt+0xa80>
mov    0x8056230,%eax
mov    0x8056234,%edx
cmpl   $0x3,0x8056244
mov    %eax,0x8056238
mov    %edx,0x805623c
jne    804985b <__sprintf_chk@plt+0x3db>
mov    0x8056230,%edx
cmp    0x40(%esp),%edx
jne    804985b <__sprintf_chk@plt+0x3db>
mov    0x8056234,%eax
cmp    0x44(%esp),%eax
jne    804985b <__sprintf_chk@plt+0x3db>
xor    $0x1,%edx
mov    %edx,0x48(%esp)
lea    0x48(%esp),%ecx
mov    %esi,%edx
mov    %eax,0x4c(%esp)
lea    0x50(%esp),%eax
call   8049f00 <__sprintf_chk@plt+0xa80>
mov    0x48(%esp),%eax
cmp    %eax,0x50(%esp)
jne    804985b <__sprintf_chk@plt+0x3db>
mov    0x4c(%esp),%eax
cmp    %eax,0x54(%esp)
jne    804985b <__sprintf_chk@plt+0x3db>
mov    %edi,%eax
sub    0x8056200,%eax
sub    $0x1,%eax
jle    8049be9 <__sprintf_chk@plt+0x769>
call   804ce90 <__sprintf_chk@plt+0x3a10>
cmp    $0x30daf,%eax
jle    8049cc7 <__sprintf_chk@plt+0x847>
cmpl   $0x3,0x8056244
je     8049c7b <__sprintf_chk@plt+0x7fb>
movl   $0x3fffffff,0x8056234
3f
movl   $0x3fffffff,0x805623c
3f
jmp    804985b <__sprintf_chk@plt+0x3db>
call   8049400 <__xstat64@plt>
test   %eax,%eax
setne  %al
jmp    804980a <__sprintf_chk@plt+0x38a>
mov    0x805622c,%eax
mov    %eax,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x8051244,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,0x3c(%esp)
call   80492f0 <__errno_location@plt>
mov    0x38(%esp),%edx
mov    0x3c(%esp),%ecx
mov    %edx,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
jmp    8049812 <__sprintf_chk@plt+0x392>
movb   $0x1,0x8056240
jmp    804985b <__sprintf_chk@plt+0x3db>
movl   $0x5,0x8(%esp)
movl   $0x8050acf,0x4(%esp)
jmp    804972a <__sprintf_chk@plt+0x2aa>
mov    $0x8056238,%ecx
mov    %esi,%edx
mov    %ecx,%eax
call   8049f00 <__sprintf_chk@plt+0xa80>
jmp    804985b <__sprintf_chk@plt+0x3db>
mov    $0x8056230,%ecx
mov    %esi,%edx
mov    %ecx,%eax
call   8049f00 <__sprintf_chk@plt+0xa80>
mov    0x8056244,%eax
jmp    8049853 <__sprintf_chk@plt+0x3d3>
mov    0x8056200,%eax
movl   $0x12,0x8(%esp)
mov    (%ebx,%eax,4),%eax
movl   $0x8056230,(%esp)
mov    %eax,0x4(%esp)
call   804cb60 <__sprintf_chk@plt+0x36e0>
test   %al,%al
je     8049be9 <__sprintf_chk@plt+0x769>
movl   $0x0,0x8056234
00
mov    0x8056230,%eax
mov    0x8056234,%edx
movl   $0x8050abf,(%esp)
mov    %eax,0x8056238
mov    %edx,0x805623c
call   8049180 <getenv@plt>
test   %eax,%eax
je     8049d4f <__sprintf_chk@plt+0x8cf>
addl   $0x1,0x8056200
jmp    804985b <__sprintf_chk@plt+0x3db>
movl   $0x80512c0,0xc(%esp)
movl   $0x98,0x8(%esp)
movl   $0x8050ae4,0x4(%esp)
movl   $0x8050af0,(%esp)
call   8049450 <__assert_fail@plt>
movl   $0x8056230,(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
je     8049d1f <__sprintf_chk@plt+0x89f>
mov    (%eax),%edx
mov    0xc(%eax),%ecx
mov    0x8(%eax),%esi
mov    %edx,0x28(%esp)
mov    0x4(%eax),%edx
mov    %ecx,0x2c(%esp)
mov    0x10(%eax),%ecx
mov    0x14(%eax),%eax
mov    %edx,0x3c(%esp)
add    $0x1,%ecx
add    $0x76c,%eax
mov    %eax,0x34(%esp)
mov    0x8056200,%eax
mov    %ecx,0x38(%esp)
mov    (%ebx,%eax,4),%eax
movl   $0x5,0x8(%esp)
movl   $0x8051264,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x30(%esp)
call   80490a0 <dcgettext@plt>
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ecx
mov    %esi,0x1c(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,0x24(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x18(%esp)
mov    0x38(%esp),%ecx
mov    %eax,0x8(%esp)
movl   $0x0,(%esp)
mov    %edx,0x20(%esp)
mov    0x34(%esp),%edx
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    0x30(%esp),%edx
mov    %edx,0xc(%esp)
call   8049170 <error@plt>
jmp    8049d1f <__sprintf_chk@plt+0x89f>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8050980
push   $0x8050910
push   %ecx
push   %esi
push   $0x8049490
call   80492a0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80561c3,%eax
sub    $0x80561c0,%eax
cmp    $0x6,%eax
ja     8049e50 <__sprintf_chk@plt+0x9d0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049e4f <__sprintf_chk@plt+0x9cf>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80561c0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80561c0,%eax
sub    $0x80561c0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049e89 <__sprintf_chk@plt+0xa09>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049e88 <__sprintf_chk@plt+0xa08>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80561c0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8056228
jne    8049ecc <__sprintf_chk@plt+0xa4c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049e40 <__sprintf_chk@plt+0x9c0>
movb   $0x1,0x8056228
leave
repz ret
xchg   %ax,%ax
mov    0x8055f10,%eax
test   %eax,%eax
je     8049ef8 <__sprintf_chk@plt+0xa78>
mov    $0x0,%eax
test   %eax,%eax
je     8049ef8 <__sprintf_chk@plt+0xa78>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8055f10,(%esp)
call   *%eax
leave
jmp    8049e70 <__sprintf_chk@plt+0x9f0>
nop
jmp    8049e70 <__sprintf_chk@plt+0x9f0>
xchg   %ax,%ax
nop
push   %ebx
mov    %edx,%ebx
sub    $0x18,%esp
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bfc0 <__sprintf_chk@plt+0x2b40>
test   %al,%al
jne    8049f5c <__sprintf_chk@plt+0xadc>
mov    %ebx,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x5,0x8(%esp)
movl   $0x80509e8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   80490a0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049170 <error@plt>
add    $0x18,%esp
pop    %ebx
ret
jmp    8049f70 <__sprintf_chk@plt+0xaf0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x8056250,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049fc4 <__sprintf_chk@plt+0xb44>
movl   $0x8050b84,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80561c4,%eax
mov    %eax,(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   80491d0 <exit@plt>
movl   $0x8050bac,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050bcc,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050cf0,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050d3c,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050e10,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050f18,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051070,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x80510a0,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x80510d8,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    0x8056250,%eax
mov    %eax,(%esp)
call   804a760 <__sprintf_chk@plt+0x12e0>
movl   $0x5,0x8(%esp)
movl   $0x80509ff,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490a0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8050a16,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8050a2c,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
movl   $0x8051120,0xc(%esp)
movl   $0x8050a40,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
mov    0x8056220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051148,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8049360 <setlocale@plt>
test   %eax,%eax
je     804a241 <__sprintf_chk@plt+0xdc1>
movl   $0x3,0x8(%esp)
movl   $0x8050a4e,0x4(%esp)
mov    %eax,(%esp)
call   80493e0 <strncmp@plt>
test   %eax,%eax
jne    804a285 <__sprintf_chk@plt+0xe05>
mov    0x8056250,%eax
mov    %eax,(%esp)
call   804a760 <__sprintf_chk@plt+0x12e0>
movl   $0x5,0x8(%esp)
movl   $0x80511d0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490a0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
jmp    8049fbc <__sprintf_chk@plt+0xb3c>
mov    0x8056250,%eax
mov    %eax,(%esp)
call   804a760 <__sprintf_chk@plt+0x12e0>
movl   $0x5,0x8(%esp)
movl   $0x8051188,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490a0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
jmp    804a241 <__sprintf_chk@plt+0xdc1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x1,(%esp)
call   8049f70 <__sprintf_chk@plt+0xaf0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049260 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     804a3d2 <__sprintf_chk@plt+0xf52>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    804a376 <__sprintf_chk@plt+0xef6>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804a3a8 <__sprintf_chk@plt+0xf28>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049070 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     804a3b0 <__sprintf_chk@plt+0xf30>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   80493e0 <strncmp@plt>
test   %eax,%eax
jne    804a364 <__sprintf_chk@plt+0xee4>
mov    %edi,(%esp)
call   8049260 <strlen@plt>
cmp    %ebp,%eax
je     804a3c8 <__sprintf_chk@plt+0xf48>
cmpl   $0xffffffff,0x18(%esp)
jne    804a328 <__sprintf_chk@plt+0xea8>
mov    %ebx,0x18(%esp)
jmp    804a364 <__sprintf_chk@plt+0xee4>
nop
movb   $0x1,0x1f(%esp)
jmp    804a364 <__sprintf_chk@plt+0xee4>
nop
cmpb   $0x0,0x1f(%esp)
jne    804a3dc <__sprintf_chk@plt+0xf5c>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    804a3b7 <__sprintf_chk@plt+0xf37>
mov    $0xfffffffe,%eax
jmp    804a3bb <__sprintf_chk@plt+0xf3b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     804a478 <__sprintf_chk@plt+0xff8>
movl   $0x80513a0,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804e3e0 <__sprintf_chk@plt+0x4f60>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   804e030 <__sprintf_chk@plt+0x4bb0>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   8049170 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x8051385,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a41a <__sprintf_chk@plt+0xf9a>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x80561c4,%edi
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x80513bd,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   80490a0 <dcgettext@plt>
mov    %edi,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
mov    (%esi),%ebp
xor    %esi,%esi
test   %ebp,%ebp
jne    804a52d <__sprintf_chk@plt+0x10ad>
jmp    804a578 <__sprintf_chk@plt+0x10f8>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    %ebx,%edi
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x80513d2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80561c4,%eax
mov    %eax,(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     804a578 <__sprintf_chk@plt+0x10f8>
test   %esi,%esi
je     804a4f0 <__sprintf_chk@plt+0x1070>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8049070 <memcmp@plt>
test   %eax,%eax
jne    804a4f0 <__sprintf_chk@plt+0x1070>
mov    %ebp,(%esp)
call   804e400 <__sprintf_chk@plt+0x4f80>
movl   $0x80513da,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80561c4,%eax
mov    %eax,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804a51b <__sprintf_chk@plt+0x109b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80561c4,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804a596 <__sprintf_chk@plt+0x1116>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049380 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   804a2f0 <__sprintf_chk@plt+0xe70>
test   %eax,%eax
js     804a5e7 <__sprintf_chk@plt+0x1167>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804a3f0 <__sprintf_chk@plt+0xf70>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804a490 <__sprintf_chk@plt+0x1010>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    804a5df <__sprintf_chk@plt+0x115f>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     804a663 <__sprintf_chk@plt+0x11e3>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    804a64b <__sprintf_chk@plt+0x11cb>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     804a663 <__sprintf_chk@plt+0x11e3>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049070 <memcmp@plt>
test   %eax,%eax
jne    804a640 <__sprintf_chk@plt+0x11c0>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x805624c
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8056248
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8056220,%eax
mov    %eax,(%esp)
call   804f250 <__sprintf_chk@plt+0x5dd0>
test   %eax,%eax
je     804a6b9 <__sprintf_chk@plt+0x1239>
cmpb   $0x0,0x8056248
je     804a6d0 <__sprintf_chk@plt+0x1250>
call   80492f0 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804a6d0 <__sprintf_chk@plt+0x1250>
mov    0x80561c4,%eax
mov    %eax,(%esp)
call   804f250 <__sprintf_chk@plt+0x5dd0>
test   %eax,%eax
jne    804a728 <__sprintf_chk@plt+0x12a8>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x80513df,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,%ebx
mov    0x805624c,%eax
test   %eax,%eax
je     804a735 <__sprintf_chk@plt+0x12b5>
mov    %eax,(%esp)
call   804e1d0 <__sprintf_chk@plt+0x4d50>
mov    %eax,%esi
call   80492f0 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x80513eb,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
mov    0x8056170,%eax
mov    %eax,(%esp)
call   8048ff0 <_exit@plt>
call   80492f0 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x80513dc,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
jmp    804a728 <__sprintf_chk@plt+0x12a8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804a77b <__sprintf_chk@plt+0x12fb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804a770 <__sprintf_chk@plt+0x12f0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804a7a9 <__sprintf_chk@plt+0x1329>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804a7a9 <__sprintf_chk@plt+0x1329>
cmp    $0x2f,%cl
je     804a7b0 <__sprintf_chk@plt+0x1330>
test   %bl,%bl
je     804a788 <__sprintf_chk@plt+0x1308>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804a792 <__sprintf_chk@plt+0x1312>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804a788 <__sprintf_chk@plt+0x1308>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049260 <strlen@plt>
cmp    $0x1,%eax
jbe    804a7df <__sprintf_chk@plt+0x135f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804a7e8 <__sprintf_chk@plt+0x1368>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804a7d5 <__sprintf_chk@plt+0x1355>
nop
jmp    804a7df <__sprintf_chk@plt+0x135f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   8048fd0 <open64@plt>
mov    %eax,%ebx
shr    $0x1f,%eax
test   %al,%al
je     804a838 <__sprintf_chk@plt+0x13b8>
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %ebx,0x30(%esp)
je     804a82c <__sprintf_chk@plt+0x13ac>
mov    0x30(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8048fa0 <dup2@plt>
mov    %eax,%edi
call   80492f0 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049430 <close@plt>
mov    %ebx,%eax
mov    %ebp,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
test   %eax,%eax
js     804a8da <__sprintf_chk@plt+0x145a>
mov    0x2c(%esp),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804edf0 <__sprintf_chk@plt+0x5970>
mov    %eax,%ebx
mov    0x28(%esp),%eax
test   %eax,%eax
je     804a89b <__sprintf_chk@plt+0x141b>
cmp    $0xffffffff,%ebx
je     804a8a8 <__sprintf_chk@plt+0x1428>
cmp    $0x1,%ebx
je     804a8e1 <__sprintf_chk@plt+0x1461>
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
nop
call   80492f0 <__errno_location@plt>
cmpl   $0x26,(%eax)
jne    804a8a0 <__sprintf_chk@plt+0x1420>
mov    0x30(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804f090 <__sprintf_chk@plt+0x5c10>
mov    %eax,%ebx
jmp    804a89b <__sprintf_chk@plt+0x141b>
cmpl   $0x0,0x28(%esp)
jne    804a8b2 <__sprintf_chk@plt+0x1432>
call   80492f0 <__errno_location@plt>
mov    $0xffffffff,%ebx
movl   $0x9,(%eax)
jmp    804a8a0 <__sprintf_chk@plt+0x1420>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%ebx
movl   $0x0,(%esp)
mov    %ebx,0x4(%esp)
call   8049030 <clock_gettime@plt>
test   %eax,%eax
je     804a941 <__sprintf_chk@plt+0x14c1>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049080 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    %eax,(%ebx)
imul   $0x3e8,0x1c(%esp),%eax
mov    %eax,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %eax,%ecx
push   %edi
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x5c(%eax),%eax
mov    0x1c(%esp),%ebx
mov    0x20(%esp),%edi
test   %eax,%eax
je     804a96f <__sprintf_chk@plt+0x14ef>
mov    0x20(%ecx),%edx
test   %edx,%edx
je     804a9b8 <__sprintf_chk@plt+0x1538>
cmp    $0x4,%edi
ja     804a9e8 <__sprintf_chk@plt+0x1568>
addl   $0x1,0x6c(%ecx)
cmp    $0x2,%edi
jbe    804a9d8 <__sprintf_chk@plt+0x1558>
mov    %ebx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
mov    %edx,0x2c(%ecx)
imul   $0x64,%edx,%edx
sub    %edx,%ebx
mov    %ebx,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
movl   $0x2,0x14(%ecx)
add    $0x4,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x59(%ecx)
jne    804a96f <__sprintf_chk@plt+0x14ef>
mov    0x6c(%ecx),%eax
test   %eax,%eax
jne    804aa48 <__sprintf_chk@plt+0x15c8>
cmp    $0x2,%edi
ja     804aa48 <__sprintf_chk@plt+0x15c8>
movl   $0x1,0x6c(%ecx)
lea    0x0(%esi),%esi
mov    %ebx,0x2c(%ecx)
movl   $0x0,0x30(%ecx)
jmp    804a99b <__sprintf_chk@plt+0x151b>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
mov    $0x51eb851f,%ebp
mov    %eax,0x5c(%ecx)
mov    %ebx,%eax
sub    $0x4,%edi
imul   %ebp
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,(%esp)
mov    %edi,0x20(%ecx)
mov    %edx,%esi
mov    %ebx,%edx
sar    $0x5,%esi
sub    %eax,%esi
imul   $0x64,%esi,%eax
sub    %eax,%edx
mov    %esi,%eax
mov    %edx,0x28(%ecx)
imul   %ebp
mov    %esi,%ebp
sar    $0x1f,%ebp
mov    %ebx,%eax
sar    $0x5,%edx
sub    %ebp,%edx
imul   $0x64,%edx,%edx
sub    %edx,%esi
mov    $0x68db8bad,%edx
imul   %edx
mov    %esi,0x24(%ecx)
sar    $0xc,%edx
sub    (%esp),%edx
mov    %edx,0x1c(%ecx)
add    $0x4,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%esp),%eax
mov    %eax,0x18(%ecx)
mov    0x1c(%esp),%eax
mov    %eax,0x1c(%ecx)
mov    0x20(%esp),%eax
mov    %eax,0x20(%ecx)
jmp    804a9b0 <__sprintf_chk@plt+0x1530>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x20(%esp),%edx
mov    0x1c(%esp),%ecx
movb   $0x1,0x59(%eax)
imul   %edx,%ecx
add    %ecx,0x54(%eax)
mov    0x18(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x50(%eax)
mov    0x14(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x4c(%eax)
mov    0x10(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x48(%eax)
mov    0xc(%esp),%ecx
imul   %edx,%ecx
add    %ecx,0x44(%eax)
mov    0x8(%esp),%ecx
imul   %edx,%ecx
imul   0x4(%esp),%edx
add    %ecx,0x40(%eax)
add    %edx,0x3c(%eax)
ret
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
cmp    $0xffffffff,%ecx
mov    %ecx,0xc(%esp)
je     804ab08 <__sprintf_chk@plt+0x1688>
mov    0x4(%edx),%ecx
mov    (%edx),%eax
xor    (%ebx),%eax
xor    0x4(%ebx),%ecx
or     %eax,%ecx
mov    0x8(%edx),%eax
xor    0x8(%ebx),%eax
or     %eax,%ecx
mov    0xc(%edx),%eax
xor    0xc(%ebx),%eax
or     %eax,%ecx
mov    0x10(%edx),%eax
xor    0x10(%ebx),%eax
or     %eax,%ecx
mov    0x14(%edx),%eax
xor    0x14(%ebx),%eax
or     %eax,%ecx
sete   %al
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
mov    %eax,%edx
jne    804aacf <__sprintf_chk@plt+0x164f>
xor    %eax,%eax
jmp    804aafe <__sprintf_chk@plt+0x167e>
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x14,%esp
movl   $0x80513f2,(%esp)
call   8049180 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804ab5b <__sprintf_chk@plt+0x16db>
mov    %eax,(%esp)
call   8049260 <strlen@plt>
lea    0x1(%eax),%edx
cmp    $0x64,%edx
ja     804ab68 <__sprintf_chk@plt+0x16e8>
mov    %ebx,0x4(%esp)
mov    %edx,0x8(%esp)
mov    %esi,(%esp)
call   8049010 <memcpy@plt>
mov    %eax,%ebx
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
mov    %edx,0x4(%esp)
call   804ed40 <__sprintf_chk@plt+0x58c0>
add    $0x14,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
mov    0x10(%esp),%ebx
cmpl   $0x2,0xc(%esp)
ja     804abc0 <__sprintf_chk@plt+0x1740>
test   %ebx,%ebx
js     804abe0 <__sprintf_chk@plt+0x1760>
imul   $0x3c,%ecx,%ecx
mov    %ebx,%eax
neg    %eax
test   %dl,%dl
cmovne %eax,%ebx
add    %ebx,%ecx
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %eax,%edx
xor    %ecx,%edx
sub    %eax,%edx
cmp    $0x5a0,%edx
jle    804abb7 <__sprintf_chk@plt+0x1737>
addl   $0x1,(%esi)
mov    %ecx,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
jns    804ab93 <__sprintf_chk@plt+0x1713>
mov    %ecx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
imul   $0xffffffd8,%edx,%edx
add    %edx,%ecx
jmp    804aba1 <__sprintf_chk@plt+0x1721>
xchg   %ax,%ax
imul   $0x64,%ecx,%ecx
jmp    804abc4 <__sprintf_chk@plt+0x1744>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x80513f5,%ecx
push   %esi
mov    %eax,%edi
push   %ebx
mov    %edx,%esi
sub    $0x10,%esp
mov    $0x8051b40,%ebx
jmp    804ac11 <__sprintf_chk@plt+0x1791>
xchg   %ax,%ax
add    $0xc,%ebx
mov    (%ebx),%ecx
test   %ecx,%ecx
je     804ac30 <__sprintf_chk@plt+0x17b0>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804ac08 <__sprintf_chk@plt+0x1788>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x74(%edi),%edx
lea    0x74(%edi),%ebx
test   %edx,%edx
jne    804ac79 <__sprintf_chk@plt+0x17f9>
lea    0x0(%esi),%esi
mov    $0x8051900,%ebx
mov    $0x80513f9,%eax
jmp    804ac59 <__sprintf_chk@plt+0x17d9>
lea    0x0(%esi,%eiz,1),%esi
add    $0xc,%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     804ac90 <__sprintf_chk@plt+0x1810>
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804ac50 <__sprintf_chk@plt+0x17d0>
jmp    804ac21 <__sprintf_chk@plt+0x17a1>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0xc,%ebx
mov    (%ebx),%edx
test   %edx,%edx
je     804ac40 <__sprintf_chk@plt+0x17c0>
mov    %edx,0x4(%esp)
mov    %esi,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804ac70 <__sprintf_chk@plt+0x17f0>
jmp    804ac21 <__sprintf_chk@plt+0x17a1>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
xor    %edx,%edx
push   %edi
mov    $0xfffffffe,%edi
push   %esi
push   %ebx
sub    $0x2fc,%esp
mov    0x310(%esp),%eax
lea    0x80(%esp),%ebp
mov    %gs:0x14,%esi
mov    %esi,0x2ec(%esp)
xor    %esi,%esi
lea    0xa8(%esp),%esi
mov    %ebp,%ebx
mov    %dx,0x80(%esp)
mov    %esi,0x28(%esp)
mov    %eax,0x44(%esp)
add    $0x70,%eax
movl   $0x0,0x40(%esp)
movl   $0x0,0x24(%esp)
mov    %eax,0x48(%esp)
mov    %edi,0x20(%esp)
mov    0x24(%esp),%eax
movsbl 0x8052120(%eax),%ebp
cmp    $0xffffffa3,%ebp
je     804ad5a <__sprintf_chk@plt+0x18da>
cmpl   $0xfffffffe,0x20(%esp)
je     804afc0 <__sprintf_chk@plt+0x1b40>
mov    0x20(%esp),%edi
test   %edi,%edi
jle    804af98 <__sprintf_chk@plt+0x1b18>
cmp    $0x115,%edi
mov    $0x2,%eax
ja     804ad42 <__sprintf_chk@plt+0x18c2>
mov    0x20(%esp),%eax
movzbl 0x80521a0(%eax),%eax
lea    0x0(%ebp,%eax,1),%edx
cmp    $0x70,%edx
ja     804ad5a <__sprintf_chk@plt+0x18da>
movsbl 0x8051f60(%edx),%ecx
cmp    %eax,%ecx
je     804ae18 <__sprintf_chk@plt+0x1998>
mov    0x24(%esp),%eax
movzbl 0x80520a0(%eax),%esi
test   %esi,%esi
jne    804ae30 <__sprintf_chk@plt+0x19b0>
cmpl   $0x3,0x40(%esp)
je     804afa8 <__sprintf_chk@plt+0x1b28>
mov    0x28(%esp),%edx
jmp    804ad9f <__sprintf_chk@plt+0x191f>
xchg   %ax,%ax
lea    0x80(%esp),%eax
cmp    %eax,%ebx
je     804af68 <__sprintf_chk@plt+0x1ae8>
sub    $0x2,%ebx
movswl (%ebx),%eax
sub    $0x1c,%edx
movsbl 0x8052120(%eax),%ebp
cmp    $0xffffffa3,%ebp
je     804ad80 <__sprintf_chk@plt+0x1900>
add    $0x1,%ebp
cmp    $0x70,%ebp
ja     804ad80 <__sprintf_chk@plt+0x1900>
cmpb   $0x1,0x8051f60(%ebp)
jne    804ad80 <__sprintf_chk@plt+0x1900>
movzbl 0x8051fe0(%ebp),%eax
test   %eax,%eax
je     804ad80 <__sprintf_chk@plt+0x1900>
mov    %edx,0x28(%esp)
mov    0x4c(%esp),%esi
mov    %eax,0x24(%esp)
mov    %edx,%eax
mov    0x64(%esp),%edx
mov    0x50(%esp),%edi
addl   $0x1c,0x28(%esp)
mov    %edx,0x1c(%eax)
mov    0x70(%esp),%edx
mov    %esi,0x20(%eax)
mov    %edi,0x24(%eax)
mov    %esi,0x68(%esp)
mov    %edx,0x28(%eax)
mov    0x74(%esp),%edx
mov    %edi,0x6c(%esp)
movl   $0x3,0x40(%esp)
mov    %edx,0x2c(%eax)
mov    0x78(%esp),%edx
mov    %edx,0x30(%eax)
mov    0x7c(%esp),%edx
mov    %edx,0x34(%eax)
mov    %ebx,%eax
jmp    804af35 <__sprintf_chk@plt+0x1ab5>
nop
movzbl 0x8051fe0(%edx),%eax
test   %eax,%eax
mov    %eax,0x24(%esp)
jne    804b0f4 <__sprintf_chk@plt+0x1c74>
xor    %esi,%esi
lea    0x0(%esi),%esi
movzbl 0x8051ea0(%esi),%edi
mov    $0x1,%eax
sub    %edi,%eax
imul   $0x1c,%eax,%eax
add    0x28(%esp),%eax
mov    (%eax),%ecx
mov    0x8(%eax),%ebp
mov    %ecx,0x24(%esp)
mov    0x4(%eax),%ecx
mov    %ecx,0x2c(%esp)
mov    0xc(%eax),%ecx
mov    %ecx,0x3c(%esp)
mov    0x10(%eax),%ecx
mov    %ecx,0x38(%esp)
mov    0x14(%eax),%ecx
mov    0x18(%eax),%eax
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
lea    -0x4(%esi),%eax
cmp    $0x57,%eax
ja     804aeb8 <__sprintf_chk@plt+0x1a38>
jmp    *0x8051660(,%eax,4)
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x34(%esp)
movl   $0x0,0x30(%esp)
movl   $0x0,0x38(%esp)
xor    %ebp,%ebp
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
lea    0x0(%esi),%esi
imul   $0x1c,%edi,%eax
mov    0x28(%esp),%edx
add    %edi,%edi
sub    %eax,%edx
mov    %ebx,%eax
sub    %edi,%eax
lea    0x1c(%edx),%edi
mov    %edi,0x28(%esp)
mov    0x24(%esp),%edi
mov    %ebp,0x24(%edx)
mov    %edi,0x1c(%edx)
mov    0x2c(%esp),%edi
mov    %edi,0x20(%edx)
mov    0x3c(%esp),%edi
mov    %edi,0x28(%edx)
mov    0x38(%esp),%edi
mov    %edi,0x2c(%edx)
mov    0x34(%esp),%edi
mov    %edi,0x30(%edx)
mov    0x30(%esp),%edi
mov    %edi,0x34(%edx)
movzbl 0x8051f00(%esi),%edx
movzwl (%eax),%esi
sub    $0x1c,%edx
movsbl 0x805206b(%edx),%edi
movswl %si,%ecx
add    %edi,%ecx
cmp    $0x70,%ecx
ja     804af2a <__sprintf_chk@plt+0x1aaa>
movsbw 0x8051f60(%ecx),%di
cmp    %di,%si
je     804b151 <__sprintf_chk@plt+0x1cd1>
movsbl 0x8052051(%edx),%esi
mov    %esi,0x24(%esp)
mov    0x24(%esp),%esi
lea    0x2(%eax),%ebx
mov    %si,0x2(%eax)
lea    0xa6(%esp),%eax
cmp    %eax,%ebx
jae    804bb60 <__sprintf_chk@plt+0x26e0>
cmp    $0xc,%esi
jne    804ad03 <__sprintf_chk@plt+0x1883>
xor    %eax,%eax
jmp    804af6d <__sprintf_chk@plt+0x1aed>
lea    0x0(%esi,%eiz,1),%esi
jne    804ad78 <__sprintf_chk@plt+0x18f8>
xchg   %ax,%ax
mov    $0x1,%eax
mov    0x2ec(%esp),%esi
xor    %gs:0x14,%esi
jne    804be38 <__sprintf_chk@plt+0x29b8>
add    $0x2fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x30(%esp),%ebx
mov    0x34(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
movl   $0x0,0x20(%esp)
jmp    804ad42 <__sprintf_chk@plt+0x18c2>
nop
cmpl   $0x0,0x20(%esp)
jle    804af5c <__sprintf_chk@plt+0x1adc>
movl   $0xfffffffe,0x20(%esp)
mov    0x28(%esp),%edx
jmp    804ad9f <__sprintf_chk@plt+0x191f>
mov    0x44(%esp),%edi
mov    %ebx,0x30(%esp)
mov    %ebp,0x34(%esp)
mov    (%edi),%eax
movzbl (%eax),%esi
mov    %esi,%ecx
mov    %edi,%esi
mov    %cl,0x20(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x20(%esp),%edx
lea    -0x9(%edx),%ecx
cmp    $0x4,%cl
jbe    804b0e0 <__sprintf_chk@plt+0x1c60>
cmp    $0x20,%dl
je     804b0e0 <__sprintf_chk@plt+0x1c60>
movzbl %dl,%ebp
cmp    $0x2d,%dl
lea    -0x30(%ebp),%edi
sete   %cl
cmp    $0x9,%edi
setbe  %bl
or     %cl,%bl
mov    %bl,0x2c(%esp)
jne    804b070 <__sprintf_chk@plt+0x1bf0>
cmp    $0x2b,%dl
je     804b083 <__sprintf_chk@plt+0x1c03>
mov    %ebp,%ecx
and    $0xffffffdf,%ecx
sub    $0x41,%ecx
cmp    $0x19,%ecx
jbe    804bc10 <__sprintf_chk@plt+0x2790>
cmpb   $0x28,0x20(%esp)
jne    804bd89 <__sprintf_chk@plt+0x2909>
xor    %ebx,%ebx
jmp    804b055 <__sprintf_chk@plt+0x1bd5>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x29,%cl
sete   %cl
movzbl %cl,%ecx
sub    %ecx,%ebx
test   %ebx,%ebx
je     804b0e5 <__sprintf_chk@plt+0x1c65>
mov    %edx,%eax
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl -0x1(%edx),%ecx
test   %cl,%cl
je     804af8c <__sprintf_chk@plt+0x1b0c>
cmp    $0x28,%cl
jne    804b040 <__sprintf_chk@plt+0x1bc0>
add    $0x1,%ebx
jmp    804b04b <__sprintf_chk@plt+0x1bcb>
cmpb   $0x2b,0x20(%esp)
jne    804bba7 <__sprintf_chk@plt+0x2727>
test   %cl,%cl
jne    804b1a7 <__sprintf_chk@plt+0x1d27>
mov    $0x1,%ecx
mov    %eax,%edx
add    $0x1,%edx
mov    %edx,(%esi)
movzbl (%edx),%ebx
lea    -0x9(%ebx),%eax
cmp    $0x4,%al
jbe    804b08a <__sprintf_chk@plt+0x1c0a>
cmp    $0x20,%bl
je     804b08a <__sprintf_chk@plt+0x1c0a>
movzbl %bl,%edi
sub    $0x30,%edi
cmp    $0x9,%edi
ja     804b161 <__sprintf_chk@plt+0x1ce1>
movzbl 0x1(%edx),%eax
mov    0x30(%esp),%ebx
mov    %ecx,0x2c(%esp)
mov    0x34(%esp),%ebp
mov    %edi,%ecx
lea    0x1(%edx),%edi
movzbl %al,%esi
mov    %al,0x30(%esp)
lea    -0x30(%esi),%eax
cmp    $0x9,%eax
mov    %edx,%eax
ja     804ba21 <__sprintf_chk@plt+0x25a1>
mov    %edx,0x20(%esp)
jmp    804b18d <__sprintf_chk@plt+0x1d0d>
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl 0x1(%eax),%eax
mov    %al,0x20(%esp)
mov    %edx,%eax
jmp    804afe0 <__sprintf_chk@plt+0x1b60>
mov    0x28(%esp),%esi
mov    0x64(%esp),%eax
mov    0x4c(%esp),%edi
mov    0x50(%esp),%ecx
cmpl   $0x1,0x40(%esp)
mov    %eax,0x1c(%esi)
mov    0x70(%esp),%eax
adcl   $0xffffffff,0x40(%esp)
mov    %edi,0x68(%esp)
mov    %eax,0x28(%esi)
mov    0x74(%esp),%eax
mov    %ecx,0x6c(%esp)
mov    %edi,0x20(%esi)
mov    %ecx,0x24(%esi)
mov    %eax,0x2c(%esi)
mov    0x78(%esp),%eax
movl   $0xfffffffe,0x20(%esp)
mov    %eax,0x30(%esi)
mov    0x7c(%esp),%eax
mov    %eax,0x34(%esi)
lea    0x1c(%esi),%eax
mov    %eax,0x28(%esp)
mov    %ebx,%eax
jmp    804af35 <__sprintf_chk@plt+0x1ab5>
movzbl 0x8051fe0(%ecx),%esi
mov    %esi,0x24(%esp)
jmp    804af35 <__sprintf_chk@plt+0x1ab5>
mov    %bl,0x20(%esp)
mov    %edx,%eax
jmp    804afe0 <__sprintf_chk@plt+0x1b60>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edi
movzbl (%edi),%eax
movzbl %al,%esi
lea    -0x30(%esi),%edx
cmp    $0x9,%edx
ja     804ba19 <__sprintf_chk@plt+0x2599>
cmp    $0x19999999,%ecx
ja     804b19a <__sprintf_chk@plt+0x1d1a>
lea    (%ecx,%ecx,4),%eax
add    %eax,%eax
lea    -0x30(%eax,%esi,1),%ecx
cmp    %eax,%ecx
jae    804b170 <__sprintf_chk@plt+0x1cf0>
movl   $0x3f,0x20(%esp)
jmp    804ad37 <__sprintf_chk@plt+0x18b7>
mov    $0xffffffff,%ecx
jmp    804b088 <__sprintf_chk@plt+0x1c08>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
mov    %eax,(%esp)
mov    -0x18(%ecx),%eax
mov    %eax,0x4(%esp)
mov    -0x14(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
call   804a950 <__sprintf_chk@plt+0x14d0>
mov    0x28(%esp),%ecx
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    0x44(%esp),%eax
call   804aa70 <__sprintf_chk@plt+0x15f0>
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x24(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ebp
imul   (%eax),%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x3c(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
movl   $0x0,0x2c(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x38(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%eax
mov    %eax,0x2c(%esp)
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    (%eax),%ebp
jmp    804b25f <__sprintf_chk@plt+0x1ddf>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%ecx
mov    -0x18(%eax),%eax
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
jmp    804ae93 <__sprintf_chk@plt+0x1a13>
mov    0x28(%esp),%edx
mov    -0x18(%edx),%ecx
mov    -0x88(%edx),%eax
mov    %ecx,0x54(%esp)
mov    -0x1c(%edx),%ecx
mov    %ecx,0x58(%esp)
mov    -0x50(%edx),%ecx
mov    %ecx,0x5c(%esp)
mov    %eax,%ecx
mov    0x44(%esp),%eax
mov    %ecx,0x2c(%eax)
mov    0x5c(%esp),%ecx
mov    %ecx,0x30(%eax)
mov    0x58(%esp),%ecx
mov    %ecx,0x34(%eax)
mov    0x54(%esp),%ecx
mov    %ecx,0x38(%eax)
mov    0x44(%esp),%ecx
mov    (%edx),%eax
mov    %eax,0x14(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    -0x50(%ecx),%edx
mov    0x44(%esp),%ecx
mov    %eax,0x30(%ecx)
mov    0x28(%esp),%eax
mov    %edx,0x2c(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    (%eax),%eax
mov    %eax,0x14(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x70(%eax)
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ecx
movzbl -0x1c(%eax),%edx
mov    (%eax),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    -0x14(%eax),%eax
mov    %eax,(%esp)
mov    0x48(%esp),%eax
call   804ab80 <__sprintf_chk@plt+0x1700>
mov    0x44(%esp),%ecx
mov    %eax,0x10(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x18(%eax),%ecx
mov    %ecx,0x54(%esp)
mov    -0x1c(%eax),%ecx
mov    %ecx,0x58(%esp)
mov    -0x50(%eax),%ecx
mov    -0x88(%eax),%eax
mov    %eax,%edx
mov    0x44(%esp),%eax
mov    %ecx,0x30(%eax)
mov    0x58(%esp),%ecx
mov    %edx,0x2c(%eax)
movl   $0x2,0x14(%eax)
mov    %ecx,0x34(%eax)
mov    0x54(%esp),%ecx
mov    %ecx,0x38(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    -0x50(%ecx),%edx
mov    0x44(%esp),%ecx
mov    %edx,0x2c(%ecx)
mov    %eax,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
movl   $0x2,0x14(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    -0x18(%eax),%eax
movl   $0x0,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    %eax,0x2c(%ecx)
movl   $0x2,0x14(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
movl   $0x1a4,0x10(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
mov    %eax,0x10(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804b2ed <__sprintf_chk@plt+0x1e6d>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x1,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804b29b <__sprintf_chk@plt+0x1e1b>
mov    0x28(%esp),%ecx
mov    (%ecx),%eax
mov    %eax,0x1c(%esp)
mov    -0x1c(%ecx),%eax
mov    %eax,(%esp)
mov    -0x18(%ecx),%eax
mov    %eax,0x4(%esp)
mov    -0x14(%ecx),%eax
mov    %eax,0x8(%esp)
mov    -0x10(%ecx),%eax
mov    %eax,0xc(%esp)
mov    -0xc(%ecx),%eax
mov    %eax,0x10(%esp)
mov    -0x8(%ecx),%eax
mov    %eax,0x14(%esp)
mov    -0x4(%ecx),%eax
mov    %eax,0x18(%esp)
mov    0x44(%esp),%eax
call   804aa70 <__sprintf_chk@plt+0x15f0>
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804b222 <__sprintf_chk@plt+0x1da2>
mov    0x28(%esp),%eax
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x38(%ecx),%eax
mov    %eax,0x18(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    -0x30(%ecx),%eax
mov    %eax,0x20(%edx)
mov    -0x18(%ecx),%eax
neg    %eax
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
neg    %eax
mov    %eax,0x28(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
movl   $0x0,0x30(%esp)
movl   $0x1,0x34(%esp)
jmp    804ae93 <__sprintf_chk@plt+0x1a13>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804ae87 <__sprintf_chk@plt+0x1a07>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x1,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
call   804a950 <__sprintf_chk@plt+0x14d0>
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x1,0xc(%ecx)
mov    -0x1c(%eax),%eax
test   %eax,%eax
setg   %al
movzbl %al,%eax
add    $0x1,%eax
add    %eax,0x68(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
test   %eax,%eax
mov    %eax,0xc(%ecx)
setg   %al
movzbl %al,%eax
add    %eax,0x68(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
mov    -0x1c(%ecx),%eax
mov    %eax,0x24(%edx)
mov    (%ecx),%eax
mov    %eax,0x18(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    0x8(%ecx),%eax
mov    %eax,0x20(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x18(%ecx),%eax
mov    %eax,0x28(%edx)
mov    (%ecx),%eax
mov    %eax,0x24(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x54(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x24(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804b6a4 <__sprintf_chk@plt+0x2224>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x38(%ecx),%eax
mov    %eax,0x24(%edx)
mov    -0x18(%ecx),%eax
neg    %eax
mov    %eax,0x28(%edx)
mov    0x4(%ecx),%eax
neg    %eax
mov    %eax,0x1c(%edx)
mov    0x8(%ecx),%eax
mov    %eax,0x20(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x34(%ecx),%eax
mov    %eax,0x28(%edx)
mov    -0x1c(%ecx),%eax
mov    %eax,0x24(%edx)
jmp    804b717 <__sprintf_chk@plt+0x2297>
mov    0x28(%esp),%eax
cmpl   $0x3,-0x68(%eax)
jbe    804bb9b <__sprintf_chk@plt+0x271b>
mov    %eax,%ecx
mov    0x44(%esp),%edx
mov    -0x70(%eax),%eax
mov    %eax,0x18(%edx)
mov    -0x6c(%ecx),%eax
mov    %eax,0x1c(%edx)
mov    -0x68(%ecx),%eax
mov    %eax,0x20(%edx)
mov    -0x34(%ecx),%eax
mov    %eax,0x24(%edx)
mov    0x4(%ecx),%eax
mov    %eax,0x28(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x34(%ecx),%eax
jmp    804b6ef <__sprintf_chk@plt+0x226f>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x0,0x4(%ecx)
mov    -0x1c(%eax),%eax
mov    %eax,0x8(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x1,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%ebp
imul   (%eax),%ebp
jmp    804b25f <__sprintf_chk@plt+0x1ddf>
movl   $0x0,0x30(%esp)
xor    %ebp,%ebp
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x1,0x2c(%esp)
movl   $0x0,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x18(%ecx),%eax
mov    0x44(%esp),%edx
mov    %eax,0x4(%edx)
mov    (%ecx),%eax
mov    %eax,0x8(%edx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    -0x1c(%ecx),%eax
jmp    804b821 <__sprintf_chk@plt+0x23a1>
movl   $0xffffffff,0x24(%esp)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x1c(%eax),%eax
jmp    804b327 <__sprintf_chk@plt+0x1ea7>
mov    0x28(%esp),%edx
mov    0x44(%esp),%ecx
mov    -0x18(%edx),%eax
movl   $0x0,0x30(%ecx)
movl   $0x0,0x34(%ecx)
movl   $0x0,0x38(%ecx)
mov    %eax,0x2c(%ecx)
mov    (%edx),%eax
mov    %eax,0x14(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x60(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x5c(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x70(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x64(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x6c(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%eax
addl   $0x1,0x6c(%eax)
addl   $0x1,0x5c(%eax)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
movb   $0x1,0x58(%ecx)
mov    %edx,0x38(%ecx)
mov    %eax,0x34(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x44(%esp),%ecx
mov    0x28(%esp),%eax
movl   $0x0,0x4(%ecx)
mov    (%eax),%eax
mov    %eax,0x8(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    -0x1c(%eax),%eax
mov    %eax,0x54(%esp)
add    $0x3c,%eax
mov    %eax,0x10(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    0x44(%esp),%ecx
mov    (%eax),%eax
mov    %eax,0x54(%esp)
add    $0x3c,%eax
mov    %eax,0x10(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%eax
mov    -0x38(%eax),%ecx
movzbl -0x1c(%eax),%edx
mov    %ecx,0x54(%esp)
mov    -0x18(%eax),%ecx
mov    (%eax),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    -0x14(%eax),%eax
mov    %eax,(%esp)
mov    0x48(%esp),%eax
call   804ab80 <__sprintf_chk@plt+0x1700>
mov    0x44(%esp),%ecx
add    0x54(%esp),%eax
mov    %eax,0x10(%ecx)
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
movl   $0x1a4,0x10(%edx)
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    %edx,%eax
call   804aa70 <__sprintf_chk@plt+0x15f0>
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    0x28(%esp),%ecx
mov    0x44(%esp),%edx
mov    -0x1c(%ecx),%eax
mov    %eax,0x10(%edx)
movl   $0x1,0x1c(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
mov    0x4(%ecx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ecx),%eax
mov    %eax,0x8(%esp)
mov    0xc(%ecx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ecx),%eax
mov    %eax,0x10(%esp)
mov    0x14(%ecx),%eax
mov    %eax,0x14(%esp)
mov    0x18(%ecx),%eax
mov    %eax,0x18(%esp)
mov    %edx,%eax
call   804aa70 <__sprintf_chk@plt+0x15f0>
jmp    804aeb8 <__sprintf_chk@plt+0x1a38>
mov    %al,0x30(%esp)
mov    0x20(%esp),%eax
movzbl 0x30(%esp),%edx
and    $0xfffffffd,%edx
cmp    $0x2c,%dl
jne    804bb10 <__sprintf_chk@plt+0x2690>
movsbl 0x1(%edi),%edx
lea    -0x30(%edx),%esi
cmp    $0x9,%esi
ja     804bb10 <__sprintf_chk@plt+0x2690>
cmpl   $0xffffffff,0x2c(%esp)
mov    %ecx,%esi
je     804bbf0 <__sprintf_chk@plt+0x2770>
test   %ecx,%ecx
movl   $0x3f,0x20(%esp)
js     804ad37 <__sprintf_chk@plt+0x18b7>
movzbl 0x2(%edi),%ecx
lea    0x2(%edi),%eax
sub    $0x30,%edx
movl   $0x8,0x30(%esp)
mov    %cl,0x20(%esp)
movsbl %cl,%edi
lea    (%edx,%edx,4),%edx
lea    -0x30(%edi),%ecx
add    %edx,%edx
cmp    $0x9,%ecx
ja     804ba98 <__sprintf_chk@plt+0x2618>
add    %ecx,%edx
movzbl 0x1(%eax),%ecx
add    $0x1,%eax
movsbl %cl,%edi
mov    %cl,0x20(%esp)
lea    -0x30(%edi),%ecx
subl   $0x1,0x30(%esp)
jne    804ba78 <__sprintf_chk@plt+0x25f8>
cmpl   $0xffffffff,0x2c(%esp)
jne    804bab9 <__sprintf_chk@plt+0x2639>
jmp    804be3d <__sprintf_chk@plt+0x29bd>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movsbl (%eax),%ecx
sub    $0x30,%ecx
cmp    $0x9,%ecx
jbe    804bab0 <__sprintf_chk@plt+0x2630>
test   %edx,%edx
je     804be73 <__sprintf_chk@plt+0x29f3>
mov    0x2c(%esp),%ecx
shr    $0x1f,%ecx
test   %cl,%cl
je     804be73 <__sprintf_chk@plt+0x29f3>
sub    $0x1,%esi
movl   $0x3f,0x20(%esp)
jns    804ad37 <__sprintf_chk@plt+0x18b7>
mov    %esi,0x64(%esp)
mov    0x44(%esp),%esi
movl   $0x3b9aca00,0x4c(%esp)
movl   $0x114,0x20(%esp)
sub    %edx,0x4c(%esp)
mov    %eax,(%esi)
jmp    804ad37 <__sprintf_chk@plt+0x18b7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%esi
mov    %esi,%edx
shr    $0x1f,%edx
cmp    $0xffffffff,%esi
mov    %dl,0x64(%esp)
je     804bb6a <__sprintf_chk@plt+0x26ea>
test   %ecx,%ecx
mov    %ecx,0x4c(%esp)
movl   $0x3f,0x20(%esp)
js     804ad37 <__sprintf_chk@plt+0x18b7>
mov    %edi,%esi
sub    %eax,%esi
mov    0x44(%esp),%eax
cmpl   $0x1,0x2c(%esp)
mov    %esi,0x50(%esp)
mov    %edi,(%eax)
sbb    %eax,%eax
mov    %eax,0x20(%esp)
notl   0x20(%esp)
addl   $0x113,0x20(%esp)
jmp    804ad37 <__sprintf_chk@plt+0x18b7>
mov    $0x2,%eax
jmp    804af6d <__sprintf_chk@plt+0x1aed>
neg    %ecx
test   %ecx,%ecx
mov    %ecx,0x4c(%esp)
movl   $0x3f,0x20(%esp)
jg     804ad37 <__sprintf_chk@plt+0x18b7>
mov    %edi,%esi
sub    %eax,%esi
mov    0x44(%esp),%eax
mov    %esi,0x50(%esp)
movl   $0x112,0x20(%esp)
mov    %edi,(%eax)
jmp    804ad37 <__sprintf_chk@plt+0x18b7>
mov    0x28(%esp),%ecx
mov    -0x6c(%ecx),%eax
jmp    804b6d9 <__sprintf_chk@plt+0x2259>
test   %cl,%cl
jne    804b1a7 <__sprintf_chk@plt+0x1d27>
movzbl 0x1(%eax),%edx
mov    %edi,%ecx
mov    0x30(%esp),%ebx
lea    0x1(%eax),%edi
mov    0x34(%esp),%ebp
movzbl %dl,%esi
mov    %dl,0x30(%esp)
lea    -0x30(%esi),%edx
cmp    $0x9,%edx
ja     804be2b <__sprintf_chk@plt+0x29ab>
cmp    $0x19999999,%ecx
ja     804b19a <__sprintf_chk@plt+0x1d1a>
movl   $0x0,0x2c(%esp)
mov    %eax,0x20(%esp)
jmp    804b18d <__sprintf_chk@plt+0x1d0d>
neg    %esi
test   %esi,%esi
movl   $0x3f,0x20(%esp)
jg     804ad37 <__sprintf_chk@plt+0x18b7>
add    %esi,%ecx
jne    804ad37 <__sprintf_chk@plt+0x18b7>
jmp    804ba5f <__sprintf_chk@plt+0x25df>
nop
mov    0x30(%esp),%ebx
lea    0x2d8(%esp),%ecx
mov    0x34(%esp),%ebp
mov    0x44(%esp),%esi
mov    %ecx,%eax
lea    0x2d8(%esp),%edi
sub    %edi,%eax
cmp    $0x12,%eax
ja     804bc38 <__sprintf_chk@plt+0x27b8>
mov    %dl,(%ecx)
add    $0x1,%ecx
mov    (%esi),%eax
lea    0x1(%eax),%edx
mov    %edx,(%esi)
movzbl 0x1(%eax),%edx
mov    %edx,%eax
and    $0xdf,%eax
sub    $0x41,%eax
cmp    $0x19,%eax
jbe    804bc23 <__sprintf_chk@plt+0x27a3>
cmp    $0x2e,%dl
je     804bc23 <__sprintf_chk@plt+0x27a3>
movb   $0x0,(%ecx)
movzbl 0x2d8(%esp),%eax
lea    0x2d8(%esp),%edx
test   %al,%al
je     804bc86 <__sprintf_chk@plt+0x2806>
lea    -0x61(%eax),%esi
cmp    $0x19,%esi
lea    -0x20(%eax),%ecx
cmovbe %ecx,%eax
add    $0x1,%edx
mov    %al,-0x1(%edx)
movzbl (%edx),%eax
test   %al,%al
jne    804bc6d <__sprintf_chk@plt+0x27ed>
mov    $0x8051e60,%esi
mov    $0x80513fd,%eax
jmp    804bca1 <__sprintf_chk@plt+0x2821>
lea    0x0(%esi),%esi
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804bccd <__sprintf_chk@plt+0x284d>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804bc98 <__sprintf_chk@plt+0x2818>
mov    %esi,%eax
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0x64(%esp)
mov    %eax,0x20(%esp)
jmp    804ad1e <__sprintf_chk@plt+0x189e>
lea    0x2d8(%esp),%eax
mov    %eax,%ecx
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     804bcd6 <__sprintf_chk@plt+0x2856>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmovne %ecx,%edx
add    %al,%al
mov    %edx,0x20(%esp)
lea    0x2d8(%esp),%eax
sbbl   $0x3,0x20(%esp)
sub    %eax,0x20(%esp)
mov    0x20(%esp),%eax
cmp    $0x3,%eax
je     804bda6 <__sprintf_chk@plt+0x2926>
cmp    $0x4,%eax
je     804be19 <__sprintf_chk@plt+0x2999>
mov    $0x8051d20,%esi
mov    $0x8051400,%eax
jmp    804bd68 <__sprintf_chk@plt+0x28e8>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
movl   $0x3,0x8(%esp)
mov    %eax,(%esp)
call   80493e0 <strncmp@plt>
test   %eax,%eax
sete   %al
test   %al,%al
jne    804bcb8 <__sprintf_chk@plt+0x2838>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804bdb0 <__sprintf_chk@plt+0x2930>
cmpb   $0x0,0x2c(%esp)
jne    804bd37 <__sprintf_chk@plt+0x28b7>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
sete   %al
jmp    804bd57 <__sprintf_chk@plt+0x28d7>
mov    0x44(%esp),%esi
lea    0x1(%eax),%edx
mov    0x30(%esp),%ebx
mov    0x34(%esp),%ebp
mov    %edx,(%esi)
movzbl (%eax),%eax
mov    %eax,0x20(%esp)
jmp    804ad1e <__sprintf_chk@plt+0x189e>
movb   $0x1,0x2c(%esp)
jmp    804bd2b <__sprintf_chk@plt+0x28ab>
mov    0x44(%esp),%eax
lea    0x2d8(%esp),%edx
call   804abf0 <__sprintf_chk@plt+0x1770>
test   %eax,%eax
jne    804bcba <__sprintf_chk@plt+0x283a>
mov    $0x8051416,%edi
mov    $0x4,%ecx
lea    0x2d8(%esp),%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804bf22 <__sprintf_chk@plt+0x2aa2>
mov    $0x8051c80,%esi
mov    $0x8051408,%eax
jmp    804bdfd <__sprintf_chk@plt+0x297d>
lea    0x0(%esi),%esi
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
je     804bea5 <__sprintf_chk@plt+0x2a25>
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804bdf0 <__sprintf_chk@plt+0x2970>
jmp    804bcb8 <__sprintf_chk@plt+0x2838>
cmpb   $0x2e,0x2db(%esp)
sete   0x2c(%esp)
jmp    804bd2b <__sprintf_chk@plt+0x28ab>
movl   $0x0,0x2c(%esp)
jmp    804ba21 <__sprintf_chk@plt+0x25a1>
call   80490c0 <__stack_chk_fail@plt>
cmp    $0x9,%ecx
ja     804babe <__sprintf_chk@plt+0x263e>
cmpb   $0x30,0x20(%esp)
je     804be5d <__sprintf_chk@plt+0x29dd>
lea    0x0(%esi),%esi
jmp    804be9d <__sprintf_chk@plt+0x2a1d>
lea    0x0(%esi),%esi
cmp    $0x30,%cl
jne    804be9d <__sprintf_chk@plt+0x2a1d>
add    $0x1,%eax
movzbl (%eax),%ecx
movsbl %cl,%edi
sub    $0x30,%edi
cmp    $0x9,%edi
jbe    804be58 <__sprintf_chk@plt+0x29d8>
jmp    804babe <__sprintf_chk@plt+0x263e>
mov    %esi,0x64(%esp)
mov    0x44(%esp),%esi
cmpl   $0x1,0x2c(%esp)
mov    %edx,0x4c(%esp)
mov    %eax,(%esi)
sbb    %eax,%eax
mov    %eax,0x20(%esp)
notl   0x20(%esp)
addl   $0x115,0x20(%esp)
jmp    804ad37 <__sprintf_chk@plt+0x18b7>
add    $0x1,%edx
jmp    804bab0 <__sprintf_chk@plt+0x2630>
mov    0x20(%esp),%eax
lea    0x2d7(%esp,%eax,1),%edi
cmpb   $0x53,(%edi)
je     804bf2c <__sprintf_chk@plt+0x2aac>
mov    $0x8051b80,%esi
mov    $0x805140d,%eax
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
je     804bcb8 <__sprintf_chk@plt+0x2838>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
jne    804bebf <__sprintf_chk@plt+0x2a3f>
cmpl   $0x1,0x20(%esp)
movzbl 0x2d8(%esp),%edx
je     804bf96 <__sprintf_chk@plt+0x2b16>
xor    %esi,%esi
test   %dl,%dl
lea    0x2d8(%esp),%ecx
mov    %ecx,%eax
je     804b19a <__sprintf_chk@plt+0x1d1a>
cmp    $0x2e,%dl
je     804bf8c <__sprintf_chk@plt+0x2b0c>
add    $0x1,%ecx
add    $0x1,%eax
movzbl (%eax),%edx
test   %dl,%dl
mov    %dl,(%ecx)
je     804bf65 <__sprintf_chk@plt+0x2ae5>
movzbl (%eax),%edx
jmp    804bf09 <__sprintf_chk@plt+0x2a89>
mov    $0x8051e4c,%eax
jmp    804bcba <__sprintf_chk@plt+0x283a>
movb   $0x0,(%edi)
mov    $0x8051c80,%esi
mov    $0x8051408,%eax
mov    %eax,0x4(%esp)
lea    0x2d8(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
je     804bcb8 <__sprintf_chk@plt+0x2838>
add    $0xc,%esi
mov    (%esi),%eax
test   %eax,%eax
jne    804bf39 <__sprintf_chk@plt+0x2ab9>
movb   $0x53,(%edi)
jmp    804beb5 <__sprintf_chk@plt+0x2a35>
mov    %esi,%eax
test   %al,%al
je     804b19a <__sprintf_chk@plt+0x1d1a>
mov    0x44(%esp),%eax
lea    0x2d8(%esp),%edx
call   804abf0 <__sprintf_chk@plt+0x1770>
test   %eax,%eax
jne    804bcba <__sprintf_chk@plt+0x283a>
jmp    804b19a <__sprintf_chk@plt+0x1d1a>
mov    $0x1,%esi
jmp    804bf11 <__sprintf_chk@plt+0x2a91>
cmp    $0x41,%dl
mov    $0x80517c0,%eax
je     804bcba <__sprintf_chk@plt+0x283a>
add    $0xc,%eax
mov    (%eax),%ecx
test   %ecx,%ecx
je     804bef6 <__sprintf_chk@plt+0x2a76>
cmp    %dl,(%ecx)
jne    804bfa4 <__sprintf_chk@plt+0x2b24>
jmp    804bcba <__sprintf_chk@plt+0x283a>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x21c,%esp
mov    0x230(%esp),%eax
mov    %gs:0x14,%esi
mov    %esi,0x20c(%esp)
xor    %esi,%esi
mov    0x234(%esp),%ebx
mov    %eax,0x28(%esp)
mov    0x238(%esp),%eax
test   %eax,%eax
je     804c664 <__sprintf_chk@plt+0x31e4>
mov    (%eax),%esi
mov    %esi,0x2c(%esp)
mov    0x4(%eax),%esi
mov    %eax,(%esp)
mov    %esi,0x24(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804c630 <__sprintf_chk@plt+0x31b0>
lea    0x0(%esi),%esi
movzbl (%ebx),%eax
lea    -0x9(%eax),%edx
cmp    $0x4,%dl
jbe    804c2f8 <__sprintf_chk@plt+0x2e78>
cmp    $0x20,%al
je     804c2f8 <__sprintf_chk@plt+0x2e78>
mov    $0x805141c,%edi
mov    $0x4,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c0a0 <__sprintf_chk@plt+0x2c20>
movzbl 0x4(%ebx),%edx
lea    0x4(%ebx),%esi
mov    %esi,0x30(%esp)
test   %dl,%dl
je     804c0a0 <__sprintf_chk@plt+0x2c20>
mov    %esi,%ecx
mov    $0x1,%esi
jmp    804c079 <__sprintf_chk@plt+0x2bf9>
nop
cmp    $0x22,%dl
je     804c570 <__sprintf_chk@plt+0x30f0>
movzbl 0x1(%ecx),%edx
add    $0x1,%esi
lea    0x1(%ecx),%edi
test   %dl,%dl
je     804c0a0 <__sprintf_chk@plt+0x2c20>
mov    %edi,%ecx
cmp    $0x5c,%dl
jne    804c060 <__sprintf_chk@plt+0x2be0>
movzbl 0x1(%ecx),%edx
lea    0x1(%ecx),%edi
cmp    $0x22,%dl
jne    804c300 <__sprintf_chk@plt+0x2e80>
mov    %edi,%ecx
movzbl 0x1(%ecx),%edx
add    $0x1,%esi
lea    0x1(%ecx),%edi
test   %dl,%dl
jne    804c077 <__sprintf_chk@plt+0x2bf7>
xchg   %ax,%ax
lea    0x144(%esp),%ecx
xor    %edi,%edi
xor    %esi,%esi
mov    %ecx,0x20(%esp)
test   %al,%al
mov    $0x805141a,%eax
cmove  %eax,%ebx
mov    0x14(%ebp),%eax
mov    %ebx,0xac(%esp)
movl   $0x0,0xcc(%esp)
00
add    $0x76c,%eax
mov    %eax,0xc8(%esp)
mov    0x10(%ebp),%eax
add    $0x1,%eax
mov    %eax,0xd0(%esp)
mov    0xc(%ebp),%eax
mov    %eax,0xd4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,0xd8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0xdc(%esp)
mov    0x0(%ebp),%eax
movl   $0x2,0xc0(%esp)
00
mov    %eax,0xe0(%esp)
mov    0x24(%esp),%eax
mov    %eax,0xe4(%esp)
mov    0x20(%ebp),%eax
mov    %eax,0x74(%esp)
xor    %eax,%eax
movl   $0x0,0xe8(%esp,%eax,1)
00
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804c12e <__sprintf_chk@plt+0x2cae>
mov    0x28(%ebp),%eax
lea    0x80(%esp),%ebx
mov    %edi,0x24(%esp)
movb   $0x0,0x104(%esp)
movb   $0x0,0x105(%esp)
mov    %eax,0x120(%esp)
mov    0x20(%ebp),%eax
xor    %ebp,%ebp
mov    %ebp,%edi
movl   $0x0,0x108(%esp)
00
movl   $0x0,0x10c(%esp)
00
mov    %eax,0x128(%esp)
mov    0x2c(%esp),%eax
movl   $0x0,0x118(%esp)
00
movl   $0x0,0x110(%esp)
00
movl   $0x0,0x114(%esp)
00
add    $0x76a700,%eax
movl   $0x0,0x11c(%esp)
00
mov    %eax,%ebp
movl   $0x10d,0x124(%esp)
00
movl   $0x0,0x12c(%esp)
00
nop
lea    0x0(%ebp,%edi,1),%eax
mov    %ebx,(%esp)
mov    %eax,0x80(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
je     804c206 <__sprintf_chk@plt+0x2d86>
mov    0x28(%eax),%ecx
test   %ecx,%ecx
je     804c206 <__sprintf_chk@plt+0x2d86>
mov    0x20(%eax),%eax
cmp    0x128(%esp),%eax
jne    804c637 <__sprintf_chk@plt+0x31b7>
add    $0x76a700,%edi
cmp    $0x163f500,%edi
jne    804c1d8 <__sprintf_chk@plt+0x2d58>
mov    0x24(%esp),%edi
mov    0x120(%esp),%eax
test   %eax,%eax
je     804c254 <__sprintf_chk@plt+0x2dd4>
mov    0x12c(%esp),%edx
test   %edx,%edx
je     804c254 <__sprintf_chk@plt+0x2dd4>
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
jne    804c254 <__sprintf_chk@plt+0x2dd4>
movl   $0xffffffff,0x128(%esp)
ff
movl   $0x0,0x12c(%esp)
00
lea    0xac(%esp),%eax
mov    %eax,(%esp)
call   804aca0 <__sprintf_chk@plt+0x1820>
xor    %edx,%edx
test   %eax,%eax
jne    804c293 <__sprintf_chk@plt+0x2e13>
cmpb   $0x0,0x104(%esp)
je     804c310 <__sprintf_chk@plt+0x2e90>
mov    0xe4(%esp),%edx
mov    0x28(%esp),%ebx
mov    0xe0(%esp),%eax
mov    %edx,0x4(%ebx)
mov    $0x1,%edx
mov    %eax,(%ebx)
mov    %esi,%eax
test   %al,%al
je     804c2c5 <__sprintf_chk@plt+0x2e45>
test   %edi,%edi
movzbl %dl,%ebx
je     804c677 <__sprintf_chk@plt+0x31f7>
movl   $0x1,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x80513f2,(%esp)
call   8049280 <setenv@plt>
xor    %edx,%edx
test   %eax,%eax
sete   %dl
and    %ebx,%edx
cmp    0x20(%esp),%edi
mov    %edx,%ebx
je     804c2d5 <__sprintf_chk@plt+0x2e55>
mov    %edi,(%esp)
call   8049000 <free@plt>
mov    0x20c(%esp),%esi
xor    %gs:0x14,%esi
mov    %ebx,%eax
jne    804cab3 <__sprintf_chk@plt+0x3633>
add    $0x21c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x1,%ebx
jmp    804c020 <__sprintf_chk@plt+0x2ba0>
cmp    $0x5c,%dl
jne    804c0a0 <__sprintf_chk@plt+0x2c20>
mov    %edi,%ecx
jmp    804c090 <__sprintf_chk@plt+0x2c10>
mov    0x118(%esp),%eax
mov    0x10c(%esp),%ecx
mov    %eax,0x24(%esp)
mov    0x108(%esp),%eax
mov    0x24(%esp),%ebp
mov    %ecx,0x34(%esp)
mov    %eax,0x30(%esp)
or     %eax,%ebp
mov    0x110(%esp),%eax
or     %ecx,%ebp
mov    %eax,0x2c(%esp)
mov    %eax,%ecx
mov    0x114(%esp),%eax
add    0x11c(%esp),%ecx
or     %ebp,%eax
or     %ecx,%eax
cmp    $0x1,%eax
ja     804c293 <__sprintf_chk@plt+0x2e13>
mov    0xc8(%esp),%eax
mov    0xcc(%esp),%edx
test   %eax,%eax
js     804c68f <__sprintf_chk@plt+0x320f>
cmp    $0x2,%edx
je     804ca72 <__sprintf_chk@plt+0x35f2>
sub    $0x76c,%eax
mov    %eax,0x68(%esp)
mov    0xd0(%esp),%eax
sub    $0x1,%eax
mov    %eax,0x64(%esp)
mov    0xd4(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x24(%esp),%eax
test   %eax,%eax
jne    804ca19 <__sprintf_chk@plt+0x3599>
cmpb   $0x0,0x105(%esp)
je     804c3cc <__sprintf_chk@plt+0x2f4c>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    804c3cc <__sprintf_chk@plt+0x2f4c>
mov    0x34(%esp),%eax
test   %eax,%eax
je     804ca19 <__sprintf_chk@plt+0x3599>
movl   $0x0,0x54(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0xe4(%esp)
00
test   %ebp,%ebp
je     804c3fb <__sprintf_chk@plt+0x2f7b>
movl   $0xffffffff,0x74(%esp)
mov    0x2c(%esp),%ebp
test   %ebp,%ebp
je     804c40e <__sprintf_chk@plt+0x2f8e>
mov    0xb8(%esp),%eax
mov    %eax,0x74(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x80(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x84(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x88(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x8c(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x90(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x94(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x98(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x9c(%esp)
mov    0x74(%esp),%eax
mov    %eax,0xa0(%esp)
mov    0x78(%esp),%eax
mov    %eax,0xa4(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0xa8(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <mktime@plt>
lea    0x54(%esp),%edx
mov    %eax,%ecx
mov    %eax,%ebp
mov    %ebx,%eax
call   804aac0 <__sprintf_chk@plt+0x1640>
test   %al,%al
jne    804c737 <__sprintf_chk@plt+0x32b7>
mov    0x11c(%esp),%ecx
xor    %edx,%edx
test   %ecx,%ecx
je     804c293 <__sprintf_chk@plt+0x2e13>
mov    0xbc(%esp),%eax
mov    $0x88888889,%edx
mov    %eax,%ecx
mov    %eax,0x24(%esp)
sar    $0x1f,%eax
xor    %eax,%ecx
sub    %eax,%ecx
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
lea    (%edx,%ecx,1),%ebp
sar    $0x5,%ebp
sub    %eax,%ebp
imul   $0x3c,%ebp,%eax
sub    %eax,%ecx
mov    %esi,%eax
test   %al,%al
mov    %ecx,0x2c(%esp)
je     804caa3 <__sprintf_chk@plt+0x3623>
mov    0x24(%esp),%edx
mov    $0x805230b,%eax
mov    0x2c(%esp),%ecx
mov    %ebp,0x14(%esp)
lea    0x1a8(%esp),%ebp
movl   $0x8051421,0xc(%esp)
test   %edx,%edx
mov    $0x805230a,%edx
cmovns %edx,%eax
mov    %ecx,0x18(%esp)
mov    %eax,0x10(%esp)
movl   $0x13,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   8049480 <__sprintf_chk@plt>
movl   $0x1,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x80513f2,(%esp)
call   8049280 <setenv@plt>
test   %eax,%eax
je     804c696 <__sprintf_chk@plt+0x3216>
xor    %edx,%edx
jmp    804c293 <__sprintf_chk@plt+0x2e13>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x64,%esi
lea    0x144(%esp),%eax
seta   0x34(%esp)
mov    %eax,0x20(%esp)
call   804ab20 <__sprintf_chk@plt+0x16a0>
lea    0x1a8(%esp),%edx
cmpb   $0x0,0x34(%esp)
mov    %eax,%edi
jne    804ca0a <__sprintf_chk@plt+0x358a>
movzbl 0x4(%ebx),%eax
mov    %edx,%ecx
cmp    $0x22,%al
je     804c5d2 <__sprintf_chk@plt+0x3152>
mov    0x30(%esp),%ebx
lea    0x0(%esi),%esi
add    $0x1,%ecx
cmp    $0x5c,%al
sete   %al
movzbl %al,%eax
add    %ebx,%eax
movzbl (%eax),%ebx
mov    %bl,-0x1(%ecx)
lea    0x1(%eax),%ebx
movzbl 0x1(%eax),%eax
cmp    $0x22,%al
jne    804c5b0 <__sprintf_chk@plt+0x3130>
mov    %ebx,0x30(%esp)
movb   $0x0,(%ecx)
mov    %edx,0x4(%esp)
movl   $0x1,0x8(%esp)
movl   $0x80513f2,(%esp)
mov    %edx,0x38(%esp)
call   8049280 <setenv@plt>
mov    0x38(%esp),%edx
cmpb   $0x0,0x34(%esp)
jne    804c9f5 <__sprintf_chk@plt+0x3575>
xor    %edx,%edx
test   %eax,%eax
jne    804c2c5 <__sprintf_chk@plt+0x2e45>
mov    0x30(%esp),%ebx
xchg   %ax,%ax
add    $0x1,%ebx
movzbl (%ebx),%eax
lea    -0x9(%eax),%edx
cmp    $0x4,%dl
jbe    804c610 <__sprintf_chk@plt+0x3190>
cmp    $0x20,%al
je     804c610 <__sprintf_chk@plt+0x3190>
mov    $0x1,%esi
jmp    804c0af <__sprintf_chk@plt+0x2c2f>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
jmp    804c2d5 <__sprintf_chk@plt+0x2e55>
mov    0x24(%esp),%edi
mov    %ecx,0x12c(%esp)
movl   $0x10d,0x130(%esp)
00
mov    %eax,0x134(%esp)
movl   $0x0,0x138(%esp)
00
jmp    804c218 <__sprintf_chk@plt+0x2d98>
lea    0x4c(%esp),%esi
mov    %esi,(%esp)
call   804a900 <__sprintf_chk@plt+0x1480>
mov    %esi,%eax
jmp    804bffb <__sprintf_chk@plt+0x2b7b>
movl   $0x80513f2,(%esp)
call   8048f90 <unsetenv@plt>
xor    %edx,%edx
test   %eax,%eax
sete   %dl
jmp    804c2c3 <__sprintf_chk@plt+0x2e43>
neg    %eax
jmp    804c380 <__sprintf_chk@plt+0x2f00>
mov    0x80(%esp),%eax
mov    $0x1,%esi
mov    %eax,0x54(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x58(%esp)
mov    0x88(%esp),%eax
mov    %eax,0x5c(%esp)
mov    0x8c(%esp),%eax
mov    %eax,0x60(%esp)
mov    0x90(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x68(%esp)
mov    0x98(%esp),%eax
mov    %eax,0x6c(%esp)
mov    0x9c(%esp),%eax
mov    %eax,0x70(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x74(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x78(%esp)
mov    0xa8(%esp),%eax
mov    %eax,0x7c(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <mktime@plt>
lea    0x54(%esp),%edx
mov    %eax,%ecx
mov    %eax,%ebp
mov    %ebx,%eax
call   804aac0 <__sprintf_chk@plt+0x1640>
test   %al,%al
je     804c562 <__sprintf_chk@plt+0x30e2>
mov    0x10c(%esp),%ecx
test   %ecx,%ecx
je     804c7d6 <__sprintf_chk@plt+0x3356>
mov    0x108(%esp),%edx
test   %edx,%edx
jne    804c7d6 <__sprintf_chk@plt+0x3356>
mov    0xb4(%esp),%ebx
mov    $0x92492493,%edx
mov    0x6c(%esp),%ebp
mov    0x60(%esp),%eax
mov    %ebx,%ecx
sub    %ebp,%ecx
add    $0x7,%ecx
mov    %eax,0x24(%esp)
mov    %ecx,%eax
imul   %edx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    %ecx,%eax
mov    0xb0(%esp),%ecx
sub    %edx,%eax
xor    %edx,%edx
test   %ecx,%ecx
jle    804c7a6 <__sprintf_chk@plt+0x3326>
xor    %edx,%edx
cmp    %ebp,%ebx
setne  %dl
sub    %edx,%ecx
lea    (%eax,%ecx,8),%eax
sub    %ecx,%eax
add    0x24(%esp),%eax
movl   $0xffffffff,0x74(%esp)
mov    %eax,0x60(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <mktime@plt>
xor    %edx,%edx
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804c293 <__sprintf_chk@plt+0x2e13>
mov    0xec(%esp),%edx
mov    0xe8(%esp),%ebx
mov    0xf0(%esp),%ecx
mov    %edx,%eax
or     %ebx,%eax
or     %ecx,%eax
je     804c8ae <__sprintf_chk@plt+0x342e>
mov    0x68(%esp),%eax
mov    %eax,0x34(%esp)
add    %ebx,%eax
mov    %eax,0x24(%esp)
mov    0x64(%esp),%eax
lea    (%edx,%eax,1),%ebp
mov    %ebp,0x2c(%esp)
mov    0x60(%esp),%ebp
add    %ecx,%ebp
cmp    0x2c(%esp),%eax
setg   0x30(%esp)
shr    $0x1f,%edx
xor    %dl,0x30(%esp)
cmp    %ebp,0x60(%esp)
setg   %al
shr    $0x1f,%ecx
xor    %ecx,%eax
movzbl 0x30(%esp),%ecx
or     %al,%cl
jne    804c562 <__sprintf_chk@plt+0x30e2>
mov    0x24(%esp),%eax
cmp    %eax,0x34(%esp)
setg   %al
shr    $0x1f,%ebx
cmp    %bl,%al
jne    804c562 <__sprintf_chk@plt+0x30e2>
mov    0x24(%esp),%eax
mov    %ebp,0x60(%esp)
mov    %eax,0x68(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x88(%esp),%eax
mov    %eax,0x5c(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x58(%esp)
mov    0x80(%esp),%eax
mov    %eax,0x54(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x74(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <mktime@plt>
xor    %edx,%edx
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804c293 <__sprintf_chk@plt+0x2e13>
mov    0x11c(%esp),%eax
test   %eax,%eax
je     804c8dd <__sprintf_chk@plt+0x345d>
imul   $0x3c,0xbc(%esp),%ecx
mov    %ebp,%eax
sub    0x78(%esp),%ecx
sub    %ecx,%eax
cmp    %eax,%ebp
setl   %bl
xor    %edx,%edx
shr    $0x1f,%ecx
cmp    %cl,%bl
jne    804c293 <__sprintf_chk@plt+0x2e13>
mov    %eax,%ebp
mov    0xe4(%esp),%ecx
mov    $0x44b82fa1,%eax
add    0x100(%esp),%ecx
imul   %ecx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x1c,%edx
sub    %eax,%edx
mov    %ecx,%eax
imul   $0x3b9aca00,%edx,%edx
sub    %edx,%eax
add    $0x3b9aca00,%eax
mov    %eax,%edx
mov    $0x44b82fa1,%eax
mov    %edx,0x24(%esp)
imul   %edx
mov    %edx,%ebx
mov    0x24(%esp),%edx
sar    $0x1c,%ebx
mov    %edx,%eax
sar    $0x1f,%eax
sub    %eax,%ebx
mov    %edx,%eax
imul   $0x3b9aca00,%ebx,%ebx
imul   $0x3c,0xf8(%esp),%edx
sub    %ebx,%eax
mov    %eax,%ebx
imul   $0xe10,0xf4(%esp),%eax
00
sub    %ebx,%ecx
mov    %edx,0x38(%esp)
mov    %eax,0x3c(%esp)
add    %ebp,%eax
mov    %eax,0x2c(%esp)
add    %edx,%eax
mov    0xfc(%esp),%edx
mov    %eax,0x30(%esp)
add    %eax,%edx
mov    $0x44b82fa1,%eax
mov    %edx,0x24(%esp)
imul   %ecx
mov    0x38(%esp),%eax
sar    $0x1f,%ecx
sar    $0x1c,%edx
sub    %ecx,%edx
mov    0x24(%esp),%ecx
add    %edx,%ecx
mov    %ecx,0x34(%esp)
mov    0x30(%esp),%ecx
cmp    0x2c(%esp),%ecx
setl   %cl
shr    $0x1f,%eax
xor    %eax,%ecx
cmp    0x2c(%esp),%ebp
mov    0x3c(%esp),%ebp
setg   %al
shr    $0x1f,%ebp
xor    %ebp,%eax
mov    0xfc(%esp),%ebp
or     %eax,%ecx
mov    0x30(%esp),%eax
cmp    %eax,0x24(%esp)
setl   %al
shr    $0x1f,%ebp
xor    %ebp,%eax
or     %al,%cl
jne    804c562 <__sprintf_chk@plt+0x30e2>
mov    0x24(%esp),%eax
cmp    %eax,0x34(%esp)
setl   %al
shr    $0x1f,%edx
cmp    %dl,%al
jne    804c562 <__sprintf_chk@plt+0x30e2>
mov    0x28(%esp),%eax
mov    $0x1,%edx
mov    0x34(%esp),%ecx
mov    %ebx,0x4(%eax)
mov    %ecx,(%eax)
jmp    804c293 <__sprintf_chk@plt+0x2e13>
mov    %edx,(%esp)
mov    %eax,0x34(%esp)
call   8049000 <free@plt>
mov    0x34(%esp),%eax
jmp    804c600 <__sprintf_chk@plt+0x3180>
mov    %esi,(%esp)
call   804eb30 <__sprintf_chk@plt+0x56b0>
mov    %eax,%edx
jmp    804c59c <__sprintf_chk@plt+0x311c>
mov    0xc0(%esp),%edx
mov    0xd8(%esp),%ecx
test   %edx,%edx
je     804ca56 <__sprintf_chk@plt+0x35d6>
cmp    $0x1,%edx
je     804ca88 <__sprintf_chk@plt+0x3608>
cmp    $0x17,%ecx
mov    %ecx,%edx
ja     804ca63 <__sprintf_chk@plt+0x35e3>
mov    0xdc(%esp),%eax
mov    %edx,0x5c(%esp)
mov    %eax,0x58(%esp)
mov    0xe0(%esp),%eax
mov    %eax,0x54(%esp)
jmp    804c3ef <__sprintf_chk@plt+0x2f6f>
lea    -0x1(%ecx),%eax
cmp    $0xa,%eax
jbe    804ca9f <__sprintf_chk@plt+0x361f>
cmp    $0xc,%ecx
je     804ca37 <__sprintf_chk@plt+0x35b7>
movl   $0xffffffff,0x5c(%esp)
xor    %edx,%edx
jmp    804c293 <__sprintf_chk@plt+0x2e13>
cmp    $0x44,%eax
mov    $0x7d0,%dx
mov    $0x76c,%ecx
cmovg  %ecx,%edx
add    %edx,%eax
jmp    804c380 <__sprintf_chk@plt+0x2f00>
lea    -0x1(%ecx),%eax
cmp    $0xa,%eax
lea    0xc(%ecx),%edx
jbe    804ca37 <__sprintf_chk@plt+0x35b7>
cmp    $0xc,%ecx
jne    804ca63 <__sprintf_chk@plt+0x35e3>
mov    $0xc,%edx
jmp    804ca37 <__sprintf_chk@plt+0x35b7>
mov    %ecx,%edx
jmp    804ca37 <__sprintf_chk@plt+0x35b7>
mov    0x20(%esp),%eax
call   804ab20 <__sprintf_chk@plt+0x16a0>
mov    %eax,%edi
jmp    804c4f8 <__sprintf_chk@plt+0x3078>
call   80490c0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x24,%esp
cmp    $0x1,%ecx
je     804cb18 <__sprintf_chk@plt+0x3698>
jb     804caf0 <__sprintf_chk@plt+0x3670>
cmp    $0x2,%ecx
jne    804cae8 <__sprintf_chk@plt+0x3668>
testb  $0x4,0x30(%esp)
jne    804cb38 <__sprintf_chk@plt+0x36b8>
mov    $0x1,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x1c(%esp),%esi
mov    %esi,(%esp)
call   8049050 <time@plt>
mov    %esi,(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
je     804cb50 <__sprintf_chk@plt+0x36d0>
mov    0x14(%eax),%eax
mov    %eax,(%ebx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    (%edx),%ecx
mov    %ecx,(%eax)
xor    %eax,%eax
cmpl   $0x44,(%edx)
jg     804cadf <__sprintf_chk@plt+0x365f>
testb  $0x10,0x30(%esp)
jne    804cada <__sprintf_chk@plt+0x365a>
add    $0x64,%ecx
mov    %ecx,(%ebx)
jmp    804cadf <__sprintf_chk@plt+0x365f>
lea    0x0(%esi,%eiz,1),%esi
imul   $0x64,(%edx),%eax
add    0x4(%edx),%eax
sub    $0x76c,%eax
mov    %eax,(%ebx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    $0x1,%al
jmp    804cadf <__sprintf_chk@plt+0x365f>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc4(%esp),%ebx
mov    0xc0(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x18(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x9c(%esp)
xor    %eax,%eax
call   8049260 <strlen@plt>
mov    0xc8(%esp),%edx
and    $0x8,%edx
mov    %eax,%ebp
je     804cdf8 <__sprintf_chk@plt+0x3978>
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x1c(%esp)
call   8049220 <strchr@plt>
mov    0x1c(%esp),%edx
mov    %eax,%esi
mov    %eax,%edi
sub    %ebx,%esi
test   %eax,%eax
cmove  %ebp,%esi
mov    %esi,%eax
and    $0xfffffffd,%eax
cmp    $0x8,%eax
je     804cbf8 <__sprintf_chk@plt+0x3778>
cmp    $0xc,%esi
je     804cbf8 <__sprintf_chk@plt+0x3778>
xor    %eax,%eax
mov    0x9c(%esp),%edi
xor    %gs:0x14,%edi
jne    804ce82 <__sprintf_chk@plt+0x3a02>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   %edi,%edi
je     804cc07 <__sprintf_chk@plt+0x3787>
test   %edx,%edx
je     804cbd7 <__sprintf_chk@plt+0x3757>
sub    %esi,%ebp
cmp    $0x3,%ebp
jne    804cbd7 <__sprintf_chk@plt+0x3757>
test   %esi,%esi
je     804ce6b <__sprintf_chk@plt+0x39eb>
movsbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%eax
ja     804cbd7 <__sprintf_chk@plt+0x3757>
lea    0x1(%ebx),%eax
lea    (%ebx,%esi,1),%ecx
jmp    804cc36 <__sprintf_chk@plt+0x37b6>
lea    0x0(%esi),%esi
movsbl (%eax),%edx
add    $0x1,%eax
sub    $0x30,%edx
cmp    $0x9,%edx
ja     804cbd7 <__sprintf_chk@plt+0x3757>
cmp    %ecx,%eax
jne    804cc28 <__sprintf_chk@plt+0x37a8>
shr    %esi
je     804ce6b <__sprintf_chk@plt+0x39eb>
xor    %eax,%eax
lea    0x60(%esp),%ebp
movsbl (%ebx,%eax,2),%edx
lea    -0xf0(%edx,%edx,4),%ecx
movsbl 0x1(%ebx,%eax,2),%edx
lea    -0x30(%edx,%ecx,2),%edx
mov    %edx,0x0(%ebp,%eax,4)
add    $0x1,%eax
cmp    %esi,%eax
jne    804cc48 <__sprintf_chk@plt+0x37c8>
testb  $0x1,0xc8(%esp)
mov    %ebp,%eax
lea    -0x4(%esi),%ecx
jne    804ce20 <__sprintf_chk@plt+0x39a0>
mov    (%eax),%esi
testb  $0x2,0xc8(%esp)
lea    -0x1(%esi),%edx
mov    %edx,0x44(%esp)
mov    0x4(%eax),%edx
mov    %edx,0x40(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x3c(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x38(%esp)
jne    804ce48 <__sprintf_chk@plt+0x39c8>
test   %edi,%edi
je     804ce75 <__sprintf_chk@plt+0x39f5>
movsbl 0x1(%edi),%eax
sub    $0x30,%eax
cmp    $0x9,%eax
ja     804cbd7 <__sprintf_chk@plt+0x3757>
movsbl 0x2(%edi),%edx
lea    -0x30(%edx),%ecx
cmp    $0x9,%ecx
ja     804cbd7 <__sprintf_chk@plt+0x3757>
lea    (%eax,%eax,4),%eax
lea    -0x30(%edx,%eax,2),%eax
mov    %eax,0x34(%esp)
mov    0x34(%esp),%eax
mov    %ebp,(%esp)
movl   $0xffffffff,0x80(%esp)
ff
mov    %eax,0x60(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x64(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x68(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x6c(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x70(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x74(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0x78(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x7c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x84(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x88(%esp)
call   80490b0 <mktime@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x2c(%esp)
je     804ce01 <__sprintf_chk@plt+0x3981>
mov    0x10(%ebp),%edx
mov    0x14(%ebp),%eax
xor    0x48(%esp),%eax
xor    0x44(%esp),%edx
mov    0x34(%esp),%ecx
or     %eax,%edx
mov    0xc(%ebp),%eax
xor    0x40(%esp),%eax
or     %eax,%edx
mov    0x8(%ebp),%eax
xor    0x3c(%esp),%eax
or     %eax,%edx
mov    0x4(%ebp),%eax
xor    0x38(%esp),%eax
or     %eax,%edx
mov    0x0(%ebp),%eax
xor    %ecx,%eax
or     %eax,%edx
je     804cde0 <__sprintf_chk@plt+0x3960>
cmp    $0x3c,%ecx
jne    804cbd7 <__sprintf_chk@plt+0x3757>
mov    %ebx,0x4(%esp)
lea    0x8c(%esp),%ebx
movl   $0x10,0x8(%esp)
mov    %ebx,(%esp)
call   8049270 <__stpcpy_chk@plt>
mov    $0x3935,%edx
mov    %dx,-0x2(%eax)
movb   $0x0,(%eax)
mov    0xc8(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   804cb60 <__sprintf_chk@plt+0x36e0>
test   %al,%al
je     804cbd9 <__sprintf_chk@plt+0x3759>
lea    0x0(%esi),%esi
mov    0x2c(%esp),%eax
mov    0x18(%esp),%edi
mov    %eax,(%edi)
mov    $0x1,%eax
jmp    804cbd9 <__sprintf_chk@plt+0x3759>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%esi
xor    %edi,%edi
jmp    804cbc8 <__sprintf_chk@plt+0x3748>
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049210 <localtime@plt>
test   %eax,%eax
mov    %eax,%ebp
jne    804cd4f <__sprintf_chk@plt+0x38cf>
jmp    804cbd7 <__sprintf_chk@plt+0x3757>
lea    0x0(%esi,%eiz,1),%esi
mov    0xc8(%esp),%eax
mov    %ebp,%edx
mov    %eax,(%esp)
lea    0x48(%esp),%eax
call   804cac0 <__sprintf_chk@plt+0x3640>
test   %eax,%eax
jne    804cbd7 <__sprintf_chk@plt+0x3757>
lea    -0x10(%ebp,%esi,4),%eax
xor    %ecx,%ecx
jmp    804cc7a <__sprintf_chk@plt+0x37fa>
lea    0x10(%eax),%edx
mov    0xc8(%esp),%eax
mov    %eax,(%esp)
lea    0x48(%esp),%eax
call   804cac0 <__sprintf_chk@plt+0x3640>
test   %eax,%eax
je     804cca6 <__sprintf_chk@plt+0x3826>
jmp    804cbd7 <__sprintf_chk@plt+0x3757>
lea    0x60(%esp),%ebp
nop
jmp    804cc67 <__sprintf_chk@plt+0x37e7>
movl   $0x0,0x34(%esp)
jmp    804ccd9 <__sprintf_chk@plt+0x3859>
call   80490c0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x2c,%esp
movl   $0x80522b6,(%esp)
call   8049180 <getenv@plt>
mov    %eax,%edx
mov    $0x31069,%eax
test   %edx,%edx
je     804ceaf <__sprintf_chk@plt+0x3a2f>
cmpb   $0x0,(%edx)
jne    804ceb8 <__sprintf_chk@plt+0x3a38>
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1c(%esp),%eax
mov    %edx,(%esp)
movl   $0xa,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049410 <strtol@plt>
mov    0x1c(%esp),%edx
cmpb   $0x0,(%edx)
mov    $0x31069,%edx
cmovne %edx,%eax
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804cf73 <__sprintf_chk@plt+0x3af3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049370 <strrchr@plt>
test   %eax,%eax
je     804cf5f <__sprintf_chk@plt+0x3adf>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804cf5f <__sprintf_chk@plt+0x3adf>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8052300,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804cf5f <__sprintf_chk@plt+0x3adf>
mov    $0x3,%ecx
mov    $0x8052308,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804cf5f <__sprintf_chk@plt+0x3adf>
lea    0x4(%eax),%ebx
mov    %ebx,0x80561c0
mov    %ebx,0x8056250
mov    %ebx,0x80561e0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80561c4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80522c8,(%esp)
mov    %eax,0xc(%esp)
call   8049100 <fwrite@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804cfc1 <__sprintf_chk@plt+0x3b41>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804d000 <__sprintf_chk@plt+0x3b80>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804f2d0 <__sprintf_chk@plt+0x5e50>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804d068 <__sprintf_chk@plt+0x3be8>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804d050 <__sprintf_chk@plt+0x3bd0>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x2d,0x3(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x38,0x4(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x0,0x5(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x60,(%esi)
mov    $0x8052317,%eax
mov    $0x805230c,%edx
cmovne %edx,%eax
jmp    804cff8 <__sprintf_chk@plt+0x3b78>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x805141f,%eax
cmp    $0x7,%edi
mov    $0x8052a2d,%edx
cmovne %edx,%eax
jmp    804cff8 <__sprintf_chk@plt+0x3b78>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804d050 <__sprintf_chk@plt+0x3bd0>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x31,0x2(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x38,0x3(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x30,0x4(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x33,0x5(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x30,0x6(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x0,0x7(%eax)
jne    804d050 <__sprintf_chk@plt+0x3bd0>
cmpb   $0x60,(%esi)
mov    $0x8052313,%eax
mov    $0x8052310,%edx
cmovne %edx,%eax
jmp    804cff8 <__sprintf_chk@plt+0x3b78>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049120 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804d998 <__sprintf_chk@plt+0x4518>
mov    0x94(%esp),%eax
jmp    *0x8052360(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804d7a0 <__sprintf_chk@plt+0x4320>
test   %al,%al
je     804d7b3 <__sprintf_chk@plt+0x4333>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804d788 <__sprintf_chk@plt+0x4308>
cmpb   $0x0,0x58(%esp)
je     804d788 <__sprintf_chk@plt+0x4308>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804d788 <__sprintf_chk@plt+0x4308>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049070 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804d820 <__sprintf_chk@plt+0x43a0>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804d538 <__sprintf_chk@plt+0x40b8>
movzbl %bl,%eax
jmp    *0x8052384(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804d378 <__sprintf_chk@plt+0x3ef8>
cmpl   $0x3,0x94(%esp)
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
testb  $0x4,0x98(%esp)
je     804d2d8 <__sprintf_chk@plt+0x3e58>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804d2d8 <__sprintf_chk@plt+0x3e58>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804d2d8 <__sprintf_chk@plt+0x3e58>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804d2d8 <__sprintf_chk@plt+0x3e58>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmp    %edi,%ebp
jae    804d29e <__sprintf_chk@plt+0x3e1e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804d2ae <__sprintf_chk@plt+0x3e2e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804d2be <__sprintf_chk@plt+0x3e3e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804d2ce <__sprintf_chk@plt+0x3e4e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804d2e6 <__sprintf_chk@plt+0x3e66>
cmpb   $0x0,0x5a(%esp)
jne    804d30b <__sprintf_chk@plt+0x3e8b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804d30b <__sprintf_chk@plt+0x3e8b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804d312 <__sprintf_chk@plt+0x3e92>
cmpb   $0x0,0x24(%esp)
je     804d328 <__sprintf_chk@plt+0x3ea8>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmp    %edi,%ebp
jae    804d325 <__sprintf_chk@plt+0x3ea5>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804d336 <__sprintf_chk@plt+0x3eb6>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804d178 <__sprintf_chk@plt+0x3cf8>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804d988 <__sprintf_chk@plt+0x4508>
test   %al,%al
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
test   %esi,%esi
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
cmpl   $0x2,0x94(%esp)
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
nop
cmpb   $0x0,0x2f(%esp)
je     804d2d8 <__sprintf_chk@plt+0x3e58>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804dab2 <__sprintf_chk@plt+0x4632>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804d9fb <__sprintf_chk@plt+0x457b>
cmpb   $0x0,0x58(%esp)
je     804d2d8 <__sprintf_chk@plt+0x3e58>
mov    %eax,%ebx
jmp    804d312 <__sprintf_chk@plt+0x3e92>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804d403 <__sprintf_chk@plt+0x3f83>
nop
mov    $0x66,%eax
jmp    804d403 <__sprintf_chk@plt+0x3f83>
nop
mov    $0x76,%eax
jmp    804d403 <__sprintf_chk@plt+0x3f83>
nop
mov    $0x6e,%eax
jmp    804d3f5 <__sprintf_chk@plt+0x3f75>
nop
mov    $0x74,%eax
jmp    804d3f5 <__sprintf_chk@plt+0x3f75>
nop
cmpb   $0x0,0x58(%esp)
je     804d970 <__sprintf_chk@plt+0x44f0>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmp    %edi,%ebp
jae    804d462 <__sprintf_chk@plt+0x3fe2>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804d4a8 <__sprintf_chk@plt+0x4028>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804d4a8 <__sprintf_chk@plt+0x4028>
cmp    %eax,%edi
ja     804da10 <__sprintf_chk@plt+0x4590>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804d49e <__sprintf_chk@plt+0x401e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804d2e6 <__sprintf_chk@plt+0x3e66>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804d403 <__sprintf_chk@plt+0x3f83>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804d4de <__sprintf_chk@plt+0x405e>
cmpb   $0x0,0x2f(%esp)
je     804d4de <__sprintf_chk@plt+0x405e>
test   %dl,%dl
jne    804d328 <__sprintf_chk@plt+0x3ea8>
mov    %ebx,%eax
jmp    804d3f5 <__sprintf_chk@plt+0x3f75>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804d2d8 <__sprintf_chk@plt+0x3e58>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmp    %edi,%ebp
jae    804d50d <__sprintf_chk@plt+0x408d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804d51d <__sprintf_chk@plt+0x409d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804d52d <__sprintf_chk@plt+0x40ad>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804d2d8 <__sprintf_chk@plt+0x3e58>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804d830 <__sprintf_chk@plt+0x43b0>
call   8049460 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804d2d8 <__sprintf_chk@plt+0x3e58>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804d5e4 <__sprintf_chk@plt+0x4164>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmp    %edi,%ebp
jae    804d593 <__sprintf_chk@plt+0x4113>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804d5a6 <__sprintf_chk@plt+0x4126>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804d5bc <__sprintf_chk@plt+0x413c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804d32b <__sprintf_chk@plt+0x3eab>
cmp    %edi,%ebp
jae    804d5d9 <__sprintf_chk@plt+0x4159>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804d580 <__sprintf_chk@plt+0x4100>
cmpb   $0x0,0x24(%esp)
je     804d5c5 <__sprintf_chk@plt+0x4145>
cmp    %edi,%ebp
jae    804d5f7 <__sprintf_chk@plt+0x4177>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804d5c5 <__sprintf_chk@plt+0x4145>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804dab7 <__sprintf_chk@plt+0x4637>
test   %edi,%edi
je     804d9bd <__sprintf_chk@plt+0x453d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805141f,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805141f,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
lea    0x0(%esi,%eiz,1),%esi
je     804d6cc <__sprintf_chk@plt+0x424c>
mov    0x94(%esp),%edx
mov    $0x805231b,%eax
call   804cfd0 <__sprintf_chk@plt+0x3b50>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x8052a2d,%eax
call   804cfd0 <__sprintf_chk@plt+0x3b50>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804d6fa <__sprintf_chk@plt+0x427a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804d6fa <__sprintf_chk@plt+0x427a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804d6ef <__sprintf_chk@plt+0x426f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804d6e8 <__sprintf_chk@plt+0x4268>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049260 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a2d,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804dad3 <__sprintf_chk@plt+0x4653>
test   %edi,%edi
je     804d9dc <__sprintf_chk@plt+0x455c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a2d,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804d210 <__sprintf_chk@plt+0x3d90>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804d198 <__sprintf_chk@plt+0x3d18>
test   %ebp,%ebp
jne    804d7cc <__sprintf_chk@plt+0x434c>
cmpl   $0x2,0x94(%esp)
jne    804d7cc <__sprintf_chk@plt+0x434c>
cmpb   $0x0,0x2f(%esp)
jne    804d388 <__sprintf_chk@plt+0x3f08>
cmpb   $0x0,0x2f(%esp)
jne    804d802 <__sprintf_chk@plt+0x4382>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804d802 <__sprintf_chk@plt+0x4382>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804d802 <__sprintf_chk@plt+0x4382>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804d7f7 <__sprintf_chk@plt+0x4377>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804d7f0 <__sprintf_chk@plt+0x4370>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804d3d2 <__sprintf_chk@plt+0x3f52>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804d3d2 <__sprintf_chk@plt+0x3f52>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804d210 <__sprintf_chk@plt+0x3d90>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804d99d <__sprintf_chk@plt+0x451d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049150 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804da1d <__sprintf_chk@plt+0x459d>
cmp    $0xffffffff,%eax
je     804da38 <__sprintf_chk@plt+0x45b8>
cmp    $0xfffffffe,%eax
je     804da53 <__sprintf_chk@plt+0x45d3>
cmpb   $0x0,0x2f(%esp)
je     804d8ff <__sprintf_chk@plt+0x447f>
cmpl   $0x2,0x94(%esp)
jne    804d8ff <__sprintf_chk@plt+0x447f>
cmp    $0x1,%eax
je     804d8ff <__sprintf_chk@plt+0x447f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804d8f8 <__sprintf_chk@plt+0x4478>
movzbl %al,%eax
jmp    *0x8052580(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804d8e0 <__sprintf_chk@plt+0x4460>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   80490f0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8049020 <mbsinit@plt>
test   %eax,%eax
je     804d871 <__sprintf_chk@plt+0x43f1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804d563 <__sprintf_chk@plt+0x40e3>
and    0x58(%esp),%dl
jmp    804d56d <__sprintf_chk@plt+0x40ed>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804d388 <__sprintf_chk@plt+0x3f08>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804d2d8 <__sprintf_chk@plt+0x3e58>
add    $0x1,%esi
jmp    804d178 <__sprintf_chk@plt+0x3cf8>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804d359 <__sprintf_chk@plt+0x3ed9>
call   80493f0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049260 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804d84e <__sprintf_chk@plt+0x43ce>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805141f,0x3c(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a2d,0x3c(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
cmpb   $0x0,0x2f(%esp)
je     804d403 <__sprintf_chk@plt+0x3f83>
jmp    804d388 <__sprintf_chk@plt+0x3f08>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804d48e <__sprintf_chk@plt+0x400e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804d945 <__sprintf_chk@plt+0x44c5>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804d945 <__sprintf_chk@plt+0x44c5>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804daa8 <__sprintf_chk@plt+0x4628>
cmpb   $0x0,(%eax)
je     804daa8 <__sprintf_chk@plt+0x4628>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804da96 <__sprintf_chk@plt+0x4616>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804daa0 <__sprintf_chk@plt+0x4620>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804da90 <__sprintf_chk@plt+0x4610>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804d945 <__sprintf_chk@plt+0x44c5>
call   80490c0 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805141f,0x3c(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a2d,0x3c(%esp)
jmp    804d158 <__sprintf_chk@plt+0x3cd8>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   80492f0 <__errno_location@plt>
test   %edi,%edi
mov    0x80561b0,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804dc7c <__sprintf_chk@plt+0x47fc>
cmp    0x80561bc,%edi
jb     804db88 <__sprintf_chk@plt+0x4708>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804dc81 <__sprintf_chk@plt+0x4801>
cmp    $0x80561b4,%esi
lea    0x0(,%ebp,8),%eax
je     804dc50 <__sprintf_chk@plt+0x47d0>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804eba0 <__sprintf_chk@plt+0x5720>
mov    %eax,%esi
mov    %eax,0x80561b0
mov    0x80561bc,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   80492d0 <memset@plt>
mov    %ebp,0x80561bc
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
cmp    %eax,%ebp
ja     804dc37 <__sprintf_chk@plt+0x47b7>
lea    0x1(%eax),%ebp
cmp    $0x8056260,%esi
mov    %ebp,(%edi)
je     804dbf2 <__sprintf_chk@plt+0x4772>
mov    %esi,(%esp)
call   8049000 <free@plt>
mov    %ebp,(%esp)
call   804eb30 <__sprintf_chk@plt+0x56b0>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804eba0 <__sprintf_chk@plt+0x5720>
mov    0x80561b8,%edx
mov    %eax,%esi
mov    %eax,0x80561b0
mov    0x80561b4,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804db5f <__sprintf_chk@plt+0x46df>
call   80493f0 <abort@plt>
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   80492f0 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8056360,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804ed40 <__sprintf_chk@plt+0x58c0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8056360,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804dcf0 <__sprintf_chk@plt+0x4870>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8056360,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8056360,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8056360,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8056360,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804dda3 <__sprintf_chk@plt+0x4923>
test   %ecx,%ecx
je     804dda3 <__sprintf_chk@plt+0x4923>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   80493f0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8056360,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80492f0 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8056360,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80492f0 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804eb30 <__sprintf_chk@plt+0x56b0>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804d0c0 <__sprintf_chk@plt+0x3c40>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804ded8 <__sprintf_chk@plt+0x4a58>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804de10 <__sprintf_chk@plt+0x4990>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x80561bc,%edi
mov    0x80561b0,%esi
cmp    $0x1,%edi
jbe    804df53 <__sprintf_chk@plt+0x4ad3>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
cmp    %edi,%ebx
jne    804df40 <__sprintf_chk@plt+0x4ac0>
mov    0x4(%esi),%eax
cmp    $0x8056260,%eax
je     804df79 <__sprintf_chk@plt+0x4af9>
mov    %eax,(%esp)
call   8049000 <free@plt>
movl   $0x100,0x80561b4
00
movl   $0x8056260,0x80561b8
08
cmp    $0x80561b4,%esi
je     804df93 <__sprintf_chk@plt+0x4b13>
mov    %esi,(%esp)
call   8049000 <free@plt>
movl   $0x80561b4,0x80561b0
08
movl   $0x1,0x80561bc
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056360,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056360,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056360,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056360,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804cfa0 <__sprintf_chk@plt+0x3b20>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804daf0 <__sprintf_chk@plt+0x4670>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804cfa0 <__sprintf_chk@plt+0x3b20>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804daf0 <__sprintf_chk@plt+0x4670>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804e030 <__sprintf_chk@plt+0x4bb0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804e060 <__sprintf_chk@plt+0x4be0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8056360,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8056364,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8056368,%eax
mov    %eax,0x18(%esp)
mov    0x805636c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056370,%eax
mov    %eax,0x20(%esp)
mov    0x8056374,%eax
mov    %eax,0x24(%esp)
mov    0x8056378,%eax
mov    %eax,0x28(%esp)
mov    0x805637c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056380,%eax
mov    %eax,0x30(%esp)
mov    0x8056384,%eax
mov    %eax,0x34(%esp)
mov    0x8056388,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805638c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804daf0 <__sprintf_chk@plt+0x4670>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804e0f0 <__sprintf_chk@plt+0x4c70>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804e0f0 <__sprintf_chk@plt+0x4c70>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804e0f0 <__sprintf_chk@plt+0x4c70>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8056360,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8056364,%eax
mov    %eax,0x14(%esp)
mov    0x8056368,%eax
mov    %eax,0x18(%esp)
mov    0x805636c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056370,%eax
mov    %eax,0x20(%esp)
mov    0x8056374,%eax
mov    %eax,0x24(%esp)
mov    0x8056378,%eax
mov    %eax,0x28(%esp)
mov    0x805637c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056380,%eax
mov    %eax,0x30(%esp)
mov    0x8056384,%eax
mov    %eax,0x34(%esp)
mov    0x8056388,%eax
mov    %eax,0x38(%esp)
mov    0x805638c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804dd70 <__sprintf_chk@plt+0x48f0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804daf0 <__sprintf_chk@plt+0x4670>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804e230 <__sprintf_chk@plt+0x4db0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804e230 <__sprintf_chk@plt+0x4db0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804e230 <__sprintf_chk@plt+0x4db0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056180,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056180,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056180,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056180,0x4(%esp)
jmp    804daf0 <__sprintf_chk@plt+0x4670>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804e8d8 <__sprintf_chk@plt+0x5458>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8052664,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052677,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8052900,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80493c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80526d4,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804e900 <__sprintf_chk@plt+0x5480>
jmp    *0x80528d8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052838,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80493c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052868,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   80490a0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80493c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805267b,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805268b,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526a2,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80527a0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804e57f <__sprintf_chk@plt+0x50ff>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80527c0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804e57f <__sprintf_chk@plt+0x50ff>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80527e4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804e57f <__sprintf_chk@plt+0x50ff>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805280c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   80490a0 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804e57f <__sprintf_chk@plt+0x50ff>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8052670,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804e471 <__sprintf_chk@plt+0x4ff1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805289c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   80490a0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804e60a <__sprintf_chk@plt+0x518a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804e9aa <__sprintf_chk@plt+0x552a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804e9a0 <__sprintf_chk@plt+0x5520>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804e420 <__sprintf_chk@plt+0x4fa0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804ea02 <__sprintf_chk@plt+0x5582>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804e9f0 <__sprintf_chk@plt+0x5570>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804e420 <__sprintf_chk@plt+0x4fa0>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804e9e0 <__sprintf_chk@plt+0x5560>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x80526be,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
movl   $0x8050a16,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8050a2c,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
movl   $0x8051120,0xc(%esp)
movl   $0x8050a40,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__printf_chk@plt>
mov    0x8056220,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051148,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80491a0 <malloc@plt>
test   %eax,%eax
je     804eb49 <__sprintf_chk@plt+0x56c9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804eb44 <__sprintf_chk@plt+0x56c4>
lea    0x0(%esi),%esi
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804eb89 <__sprintf_chk@plt+0x5709>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804eb30 <__sprintf_chk@plt+0x56b0>
call   804eda0 <__sprintf_chk@plt+0x5920>
xchg   %ax,%ax
jmp    804eb30 <__sprintf_chk@plt+0x56b0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804ebc8 <__sprintf_chk@plt+0x5748>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <realloc@plt>
test   %eax,%eax
je     804ebdb <__sprintf_chk@plt+0x575b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804ebb0 <__sprintf_chk@plt+0x5730>
mov    %eax,(%esp)
call   8049000 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804ebc0 <__sprintf_chk@plt+0x5740>
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804ec23 <__sprintf_chk@plt+0x57a3>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804eba0 <__sprintf_chk@plt+0x5720>
call   804eda0 <__sprintf_chk@plt+0x5920>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804ec70 <__sprintf_chk@plt+0x57f0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804ec88 <__sprintf_chk@plt+0x5808>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804eba0 <__sprintf_chk@plt+0x5720>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804ec59 <__sprintf_chk@plt+0x57d9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804ec59 <__sprintf_chk@plt+0x57d9>
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804ecc8 <__sprintf_chk@plt+0x5848>
cmp    $0xaaaaaaa9,%eax
ja     804ecd4 <__sprintf_chk@plt+0x5854>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804eba0 <__sprintf_chk@plt+0x5720>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804ecb0 <__sprintf_chk@plt+0x5830>
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804eb30 <__sprintf_chk@plt+0x56b0>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80492d0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049470 <calloc@plt>
test   %eax,%eax
je     804ed2f <__sprintf_chk@plt+0x58af>
add    $0x1c,%esp
ret
nop
call   804eda0 <__sprintf_chk@plt+0x5920>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804eb30 <__sprintf_chk@plt+0x56b0>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049010 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049260 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804ed40 <__sprintf_chk@plt+0x58c0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805292f,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    0x8056170,%edx
movl   $0x80513dc,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8049170 <error@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804f9c0 <__sprintf_chk@plt+0x6540>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xffc,%esp
mov    %gs:0x14,%eax
mov    %eax,0xfec(%esp)
xor    %eax,%eax
testl  $0xfffffeff,0x1010(%esp)
ff
jne    804f000 <__sprintf_chk@plt+0x5b80>
cmp    $0xffffff9c,%ebx
mov    %edx,%ebp
mov    %ecx,%esi
je     804eed0 <__sprintf_chk@plt+0x5a50>
cmpb   $0x2f,(%edx)
je     804eed0 <__sprintf_chk@plt+0x5a50>
lea    0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8050550 <__sprintf_chk@plt+0x70d0>
test   %eax,%eax
mov    %eax,%edi
je     804ef29 <__sprintf_chk@plt+0x5aa9>
cmpl   $0x100,0x1010(%esp)
00
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
je     804efb0 <__sprintf_chk@plt+0x5b30>
call   804fe50 <__sprintf_chk@plt+0x69d0>
mov    %eax,0x14(%esp)
call   80492f0 <__errno_location@plt>
lea    0x2c(%esp),%ecx
cmp    %ecx,%edi
mov    (%eax),%edx
je     804eec0 <__sprintf_chk@plt+0x5a40>
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,0x18(%esp)
call   8049000 <free@plt>
mov    0x1c(%esp),%edx
mov    0x18(%esp),%eax
cmpl   $0xffffffff,0x14(%esp)
je     804ef20 <__sprintf_chk@plt+0x5aa0>
mov    0x14(%esp),%ebp
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
lea    0x0(%esi),%esi
cmpl   $0x100,0x1010(%esp)
00
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
je     804ef10 <__sprintf_chk@plt+0x5a90>
call   804fe50 <__sprintf_chk@plt+0x69d0>
mov    %eax,%ebp
mov    0xfec(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebp,%eax
jne    804f062 <__sprintf_chk@plt+0x5be2>
add    $0xffc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   804fe80 <__sprintf_chk@plt+0x6a00>
mov    %eax,%ebp
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x14,%edx
jne    804efc0 <__sprintf_chk@plt+0x5b40>
lea    0x24(%esp),%edi
mov    %edi,(%esp)
call   804f710 <__sprintf_chk@plt+0x6290>
test   %eax,%eax
jne    804f076 <__sprintf_chk@plt+0x5bf6>
test   %ebx,%ebx
js     804ef4b <__sprintf_chk@plt+0x5acb>
cmp    %ebx,0x24(%esp)
je     804f045 <__sprintf_chk@plt+0x5bc5>
mov    %ebx,(%esp)
call   80493a0 <fchdir@plt>
test   %eax,%eax
jne    804f018 <__sprintf_chk@plt+0x5b98>
cmpl   $0x100,0x1010(%esp)
00
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
je     804efee <__sprintf_chk@plt+0x5b6e>
call   804fe50 <__sprintf_chk@plt+0x69d0>
mov    %eax,%ebp
xor    %ebx,%ebx
cmp    $0xffffffff,%ebp
je     804f035 <__sprintf_chk@plt+0x5bb5>
mov    %edi,(%esp)
call   804f780 <__sprintf_chk@plt+0x6300>
test   %eax,%eax
jne    804f067 <__sprintf_chk@plt+0x5be7>
mov    %edi,(%esp)
call   804f7b0 <__sprintf_chk@plt+0x6330>
test   %ebx,%ebx
je     804eeeb <__sprintf_chk@plt+0x5a6b>
call   80492f0 <__errno_location@plt>
mov    %ebx,(%eax)
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
lea    0x0(%esi),%esi
call   804fe80 <__sprintf_chk@plt+0x6a00>
mov    %eax,0x14(%esp)
jmp    804ee99 <__sprintf_chk@plt+0x5a19>
xchg   %ax,%ax
lea    -0x1(%edx),%ecx
cmp    $0x1,%ecx
jbe    804ef29 <__sprintf_chk@plt+0x5aa9>
cmp    $0xd,%edx
je     804ef29 <__sprintf_chk@plt+0x5aa9>
cmp    $0x26,%edx
je     804ef29 <__sprintf_chk@plt+0x5aa9>
cmp    $0x5f,%edx
je     804ef29 <__sprintf_chk@plt+0x5aa9>
mov    %edx,(%eax)
jmp    804eec7 <__sprintf_chk@plt+0x5a47>
xchg   %ax,%ax
call   804fe80 <__sprintf_chk@plt+0x6a00>
mov    %eax,%ebp
jmp    804ef76 <__sprintf_chk@plt+0x5af6>
lea    0x0(%esi,%eiz,1),%esi
call   80492f0 <__errno_location@plt>
mov    $0xffffffff,%ebp
movl   $0x16,(%eax)
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
lea    0x0(%esi),%esi
call   80492f0 <__errno_location@plt>
mov    $0xffffffff,%ebp
mov    (%eax),%esi
mov    %eax,%ebx
mov    %edi,(%esp)
call   804f7b0 <__sprintf_chk@plt+0x6330>
mov    %esi,(%ebx)
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
call   80492f0 <__errno_location@plt>
mov    (%eax),%ebx
lea    0x0(%esi,%eiz,1),%esi
jmp    804ef81 <__sprintf_chk@plt+0x5b01>
mov    %edi,(%esp)
mov    $0xffffffff,%ebp
call   804f7b0 <__sprintf_chk@plt+0x6330>
call   80492f0 <__errno_location@plt>
movl   $0x9,(%eax)
jmp    804eeeb <__sprintf_chk@plt+0x5a6b>
call   80490c0 <__stack_chk_fail@plt>
call   80492f0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804f6d0 <__sprintf_chk@plt+0x6250>
call   80492f0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804f690 <__sprintf_chk@plt+0x6210>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0x8056390,%edx
mov    0xb4(%esp),%ebp
mov    0xb8(%esp),%ebx
mov    0xbc(%esp),%esi
test   %edx,%edx
js     804f1c0 <__sprintf_chk@plt+0x5d40>
test   %ebx,%ebx
je     804f0d3 <__sprintf_chk@plt+0x5c53>
cmpl   $0x3ffffffe,0x4(%ebx)
je     804f118 <__sprintf_chk@plt+0x5c98>
cmpl   $0x3ffffffe,0xc(%ebx)
je     804f118 <__sprintf_chk@plt+0x5c98>
mov    0xb0(%esp),%eax
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8048fb0 <utimensat@plt>
cmp    $0xffffffff,%eax
mov    %eax,%edi
je     804f188 <__sprintf_chk@plt+0x5d08>
test   %eax,%eax
jne    804f1f8 <__sprintf_chk@plt+0x5d78>
movl   $0x1,0x8056390
00
mov    %edi,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
mov    0xb0(%esp),%eax
mov    %esi,0x10(%esp)
mov    %ebp,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <__fxstatat64@plt>
test   %eax,%eax
jne    804f1e8 <__sprintf_chk@plt+0x5d68>
cmpl   $0x3ffffffe,0x4(%ebx)
je     804f208 <__sprintf_chk@plt+0x5d88>
mov    (%ebx),%eax
mov    0x4(%ebx),%edx
cmpl   $0x3ffffffe,0xc(%ebx)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
je     804f230 <__sprintf_chk@plt+0x5db0>
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
lea    0x20(%esp),%ebx
mov    %eax,0x28(%esp)
mov    %edx,0x2c(%esp)
jmp    804f0d3 <__sprintf_chk@plt+0x5c53>
lea    0x0(%esi),%esi
call   80492f0 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x16,%eax
je     804f1e0 <__sprintf_chk@plt+0x5d60>
cmp    $0x16,%eax
je     804f1a2 <__sprintf_chk@plt+0x5d22>
cmp    $0x26,%eax
jne    804f101 <__sprintf_chk@plt+0x5c81>
mov    0x8056390,%eax
test   %eax,%eax
js     804f1c0 <__sprintf_chk@plt+0x5d40>
call   80492f0 <__errno_location@plt>
cmpl   $0x26,(%eax)
jne    804f1c0 <__sprintf_chk@plt+0x5d40>
movl   $0xffffffff,0x8056390
ff
nop
mov    0xb0(%esp),%eax
mov    %ebx,%ecx
mov    %ebp,%edx
mov    %esi,(%esp)
call   804ee20 <__sprintf_chk@plt+0x59a0>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
test   $0xfffffeff,%esi
je     804f1a2 <__sprintf_chk@plt+0x5d22>
add    $0x9c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   80492f0 <__errno_location@plt>
mov    (%eax),%eax
jmp    804f194 <__sprintf_chk@plt+0x5d14>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x3ffffffe,0xc(%ebx)
je     804f10d <__sprintf_chk@plt+0x5c8d>
mov    0x70(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x74(%esp),%eax
mov    %eax,0x24(%esp)
jmp    804f16e <__sprintf_chk@plt+0x5cee>
lea    0x0(%esi),%esi
mov    0x78(%esp),%eax
lea    0x20(%esp),%ebx
mov    %eax,0x28(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0x2c(%esp)
jmp    804f0d3 <__sprintf_chk@plt+0x5c53>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8049140 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   80503c0 <__sprintf_chk@plt+0x6f40>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804f290 <__sprintf_chk@plt+0x5e10>
test   %dl,%dl
je     804f287 <__sprintf_chk@plt+0x5e07>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804f2b0 <__sprintf_chk@plt+0x5e30>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804f287 <__sprintf_chk@plt+0x5e07>
call   80492f0 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   80492f0 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049350 <nl_langinfo@plt>
mov    0x8056394,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x80526bd,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804f39c <__sprintf_chk@plt+0x5f1c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804f367 <__sprintf_chk@plt+0x5ee7>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804f340 <__sprintf_chk@plt+0x5ec0>
nop
mov    %ebp,(%esp)
call   8049260 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049260 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804f398 <__sprintf_chk@plt+0x5f18>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048fc0 <strcmp@plt>
test   %eax,%eax
je     804f35b <__sprintf_chk@plt+0x5edb>
cmp    $0x2a,%bl
jne    804f320 <__sprintf_chk@plt+0x5ea0>
cmpb   $0x0,0x1(%ebp)
jne    804f320 <__sprintf_chk@plt+0x5ea0>
mov    %ebp,(%esp)
call   8049260 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8052949,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804f65d <__sprintf_chk@plt+0x61dd>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804f367 <__sprintf_chk@plt+0x5ee7>
movl   $0x805294f,(%esp)
call   8049180 <getenv@plt>
test   %eax,%eax
je     804f3b5 <__sprintf_chk@plt+0x5f35>
cmpb   $0x0,(%eax)
jne    804f5c3 <__sprintf_chk@plt+0x6143>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8052940,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804f5b4 <__sprintf_chk@plt+0x6134>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   80491a0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804f653 <__sprintf_chk@plt+0x61d3>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8049010 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804f41c <__sprintf_chk@plt+0x5f9c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048fd0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804f598 <__sprintf_chk@plt+0x6118>
movl   $0x80513e9,0x4(%esp)
mov    %eax,(%esp)
call   80491e0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804f590 <__sprintf_chk@plt+0x6110>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804f576 <__sprintf_chk@plt+0x60f6>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804f480 <__sprintf_chk@plt+0x6000>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804f480 <__sprintf_chk@plt+0x6000>
cmp    $0x23,%eax
je     804f5ed <__sprintf_chk@plt+0x616d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805295f,0x4(%esp)
mov    %esi,(%esp)
call   8049250 <fscanf@plt>
cmp    $0x1,%eax
jle    804f610 <__sprintf_chk@plt+0x6190>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049260 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049260 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804f62e <__sprintf_chk@plt+0x61ae>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   80491a0 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804f662 <__sprintf_chk@plt+0x61e2>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049130 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049130 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804f48c <__sprintf_chk@plt+0x600c>
mov    %esi,(%esp)
call   8049340 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804f610 <__sprintf_chk@plt+0x6190>
jmp    804f495 <__sprintf_chk@plt+0x6015>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049430 <close@plt>
mov    $0x80526bd,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    %ebp,0x8056394
jmp    804f30f <__sprintf_chk@plt+0x5e8f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804f3db <__sprintf_chk@plt+0x5f5b>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049260 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804f5b4 <__sprintf_chk@plt+0x6134>
lea    -0x1(%eax),%eax
jmp    804f3c4 <__sprintf_chk@plt+0x5f44>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804f607 <__sprintf_chk@plt+0x6187>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804f67c <__sprintf_chk@plt+0x61fc>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804f5e8 <__sprintf_chk@plt+0x6168>
cmp    $0xffffffff,%eax
jne    804f480 <__sprintf_chk@plt+0x6000>
mov    %esi,(%esp)
call   80503c0 <__sprintf_chk@plt+0x6f40>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804f598 <__sprintf_chk@plt+0x6118>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804f59d <__sprintf_chk@plt+0x611d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8049190 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804f52c <__sprintf_chk@plt+0x60ac>
mov    $0x80526bd,%ebp
jmp    804f5a9 <__sprintf_chk@plt+0x6129>
call   80490c0 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x80526bd,%ebp
call   8049000 <free@plt>
mov    %esi,(%esp)
call   80503c0 <__sprintf_chk@plt+0x6f40>
jmp    804f59d <__sprintf_chk@plt+0x611d>
mov    %esi,(%esp)
call   8049340 <__uflow@plt>
jmp    804f602 <__sprintf_chk@plt+0x6182>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805296c,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    0x8056170,%edx
mov    %edx,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x8052998,0x4(%esp)
movl   $0x0,(%esp)
call   80490a0 <dcgettext@plt>
mov    0x8056170,%edx
mov    %edx,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   8049170 <error@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
movl   $0x0,0x4(%ebx)
movl   $0x0,0x4(%esp)
movl   $0x805164c,(%esp)
call   8050740 <__sprintf_chk@plt+0x72c0>
test   %eax,%eax
mov    %eax,(%ebx)
js     804f750 <__sprintf_chk@plt+0x62d0>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80506a0 <__sprintf_chk@plt+0x7220>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   8049240 <getcwd@plt>
test   %eax,%eax
mov    %eax,0x4(%ebx)
sete   %al
add    $0x18,%esp
movzbl %al,%eax
neg    %eax
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    (%edx),%eax
test   %eax,%eax
js     804f798 <__sprintf_chk@plt+0x6318>
mov    %eax,0x4(%esp)
jmp    80493a0 <fchdir@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edx),%eax
mov    %eax,0x4(%esp)
jmp    8050110 <__sprintf_chk@plt+0x6c90>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
js     804f7c6 <__sprintf_chk@plt+0x6346>
mov    %eax,(%esp)
call   8049430 <close@plt>
mov    0x4(%ebx),%eax
mov    %eax,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049000 <free@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    (%edx),%ebx
mov    0x4(%ebx),%ecx
cmp    $0x3ffffffe,%ecx
je     804f838 <__sprintf_chk@plt+0x63b8>
cmp    $0x3fffffff,%ecx
je     804f818 <__sprintf_chk@plt+0x6398>
mov    0xc(%ebx),%edx
cmp    $0x3ffffffe,%edx
je     804f870 <__sprintf_chk@plt+0x63f0>
xor    %eax,%eax
cmp    $0x3fffffff,%edx
je     804f858 <__sprintf_chk@plt+0x63d8>
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x3fffffff,0xc(%ebx)
je     804f898 <__sprintf_chk@plt+0x6418>
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804a900 <__sprintf_chk@plt+0x1480>
mov    0xc(%ebx),%edx
mov    0xc(%esp),%eax
jmp    804f7fc <__sprintf_chk@plt+0x637c>
xchg   %ax,%ax
mov    0xc(%ebx),%edx
cmp    $0x3ffffffe,%edx
je     804f888 <__sprintf_chk@plt+0x6408>
mov    0x40(%eax),%ecx
mov    0x44(%eax),%eax
mov    %ecx,(%ebx)
mov    %eax,0x4(%ebx)
xor    %eax,%eax
cmp    $0x3fffffff,%edx
jne    804f80e <__sprintf_chk@plt+0x638e>
add    $0x8,%ebx
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804a900 <__sprintf_chk@plt+0x1480>
mov    0xc(%esp),%eax
add    $0x18,%esp
pop    %ebx
ret
mov    0x48(%eax),%edx
mov    0x4c(%eax),%eax
mov    %edx,0x8(%ebx)
mov    %eax,0xc(%ebx)
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    804f80e <__sprintf_chk@plt+0x638e>
lea    0x0(%esi),%esi
movl   $0x0,(%edx)
xor    %eax,%eax
jmp    804f80e <__sprintf_chk@plt+0x638e>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
test   %eax,%eax
je     804f966 <__sprintf_chk@plt+0x64e6>
mov    0x4(%eax),%ebp
lea    -0x3ffffffe(%ebp),%edx
cmp    $0x1,%edx
ja     804f938 <__sprintf_chk@plt+0x64b8>
mov    0xc(%eax),%esi
lea    -0x3ffffffe(%esi),%ecx
cmp    $0x1,%ecx
ja     804f958 <__sprintf_chk@plt+0x64d8>
xor    %ebx,%ebx
xor    %edi,%edi
cmp    $0x1,%edx
jbe    804f900 <__sprintf_chk@plt+0x6480>
cmp    $0x1,%ecx
jbe    804f91a <__sprintf_chk@plt+0x649a>
xor    %eax,%eax
cmp    $0x1,%ebx
sete   %al
add    %edi,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
cmp    $0x3ffffffe,%ebp
sete   %bl
cmp    $0x1,%ecx
movl   $0x0,(%eax)
mov    $0x1,%di
ja     804f8e9 <__sprintf_chk@plt+0x6469>
movl   $0x0,0x8(%eax)
xor    %eax,%eax
cmp    $0x3ffffffe,%esi
sete   %al
mov    $0x1,%edi
add    %eax,%ebx
jmp    804f8e9 <__sprintf_chk@plt+0x6469>
lea    0x0(%esi),%esi
cmp    $0x3b9ac9ff,%ebp
jbe    804f8cd <__sprintf_chk@plt+0x644d>
call   80492f0 <__errno_location@plt>
movl   $0x16,(%eax)
mov    $0xffffffff,%eax
jmp    804f8f3 <__sprintf_chk@plt+0x6473>
lea    0x0(%esi),%esi
cmp    $0x3b9ac9ff,%esi
jbe    804f8db <__sprintf_chk@plt+0x645b>
jmp    804f940 <__sprintf_chk@plt+0x64c0>
movl   $0x80529df,0xc(%esp)
movl   $0x5a,0x8(%esp)
movl   $0x80529c8,0x4(%esp)
movl   $0x80529d6,(%esp)
call   8049450 <__assert_fail@plt>
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x100,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804f090 <__sprintf_chk@plt+0x5c10>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xcc,%esp
mov    0xe8(%esp),%edx
mov    0xe0(%esp),%edi
test   %edx,%edx
je     804fc38 <__sprintf_chk@plt+0x67b8>
mov    (%edx),%ecx
lea    0x30(%esp),%eax
mov    0x4(%edx),%ebx
mov    %eax,0x2c(%esp)
mov    %ecx,0x30(%esp)
mov    0x8(%edx),%ecx
mov    %ebx,0x34(%esp)
mov    0xc(%edx),%ebx
mov    %ecx,0x38(%esp)
mov    %ebx,0x3c(%esp)
call   804f8b0 <__sprintf_chk@plt+0x6430>
test   %eax,%eax
mov    %eax,%ebp
js     804fdd0 <__sprintf_chk@plt+0x6950>
mov    0xe4(%esp),%eax
mov    %edi,%ebx
shr    $0x1f,%ebx
test   %eax,%eax
sete   0x1c(%esp)
test   %bl,%bl
jne    804fde0 <__sprintf_chk@plt+0x6960>
mov    0x805639c,%eax
test   %eax,%eax
js     804fa6d <__sprintf_chk@plt+0x65ed>
cmp    $0x2,%ebp
je     804fbb8 <__sprintf_chk@plt+0x6738>
mov    0x2c(%esp),%eax
test   %bl,%bl
jne    804fc70 <__sprintf_chk@plt+0x67f0>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049390 <futimens@plt>
cmp    $0x0,%eax
mov    %eax,%esi
jle    804fca0 <__sprintf_chk@plt+0x6820>
call   80492f0 <__errno_location@plt>
movl   $0x26,(%eax)
test   %ebp,%ebp
movl   $0xffffffff,0x805639c
ff
movl   $0xffffffff,0x8056398
ff
jne    804fb30 <__sprintf_chk@plt+0x66b0>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
je     804fcc0 <__sprintf_chk@plt+0x6840>
mov    (%ecx),%eax
mov    $0x10624dd3,%esi
mov    0x4(%ecx),%ebp
mov    %eax,0x40(%esp)
mov    %ebp,%eax
imul   %esi
mov    0x8(%ecx),%eax
mov    0xc(%ecx),%ecx
sar    $0x1f,%ebp
sar    $0x6,%edx
sub    %ebp,%edx
mov    %eax,0x48(%esp)
mov    %ecx,%eax
mov    %edx,0x44(%esp)
imul   %esi
sar    $0x1f,%ecx
lea    0x40(%esp),%ebp
sar    $0x6,%edx
sub    %ecx,%edx
mov    %edx,0x4c(%esp)
test   %bl,%bl
mov    %ebp,0x8(%esp)
jne    804fc48 <__sprintf_chk@plt+0x67c8>
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8049440 <futimesat@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804fb88 <__sprintf_chk@plt+0x6708>
test   %ebp,%ebp
je     804fb1d <__sprintf_chk@plt+0x669d>
cmpl   $0x7a11f,0x4(%ebp)
setg   %bl
cmpl   $0x7a11f,0xc(%ebp)
setg   %cl
jg     804fd08 <__sprintf_chk@plt+0x6888>
test   %bl,%bl
jne    804fd08 <__sprintf_chk@plt+0x6888>
add    $0xcc,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x3,%ebp
je     804fb62 <__sprintf_chk@plt+0x66e2>
lea    0x60(%esp),%eax
test   %bl,%bl
mov    %eax,0x8(%esp)
jne    804fc10 <__sprintf_chk@plt+0x6790>
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
call   8049110 <__fxstat64@plt>
test   %eax,%eax
setne  %al
test   %al,%al
jne    804fdd0 <__sprintf_chk@plt+0x6950>
mov    0x2c(%esp),%esi
test   %esi,%esi
je     804fcc0 <__sprintf_chk@plt+0x6840>
lea    0x2c(%esp),%edx
xor    %esi,%esi
lea    0x60(%esp),%eax
call   804f7e0 <__sprintf_chk@plt+0x6360>
test   %al,%al
je     804fa89 <__sprintf_chk@plt+0x6609>
jmp    804fb1d <__sprintf_chk@plt+0x669d>
nop
cmpb   $0x0,0x1c(%esp)
mov    $0xffffffff,%esi
jne    804fb1d <__sprintf_chk@plt+0x669d>
mov    0xe4(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80492b0 <utimes@plt>
add    $0xcc,%esp
pop    %ebx
mov    %eax,%esi
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
lea    0x60(%esp),%eax
test   %bl,%bl
mov    %eax,0x8(%esp)
jne    804fcc8 <__sprintf_chk@plt+0x6848>
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
call   8049110 <__fxstat64@plt>
test   %eax,%eax
setne  %al
test   %al,%al
jne    804fdd0 <__sprintf_chk@plt+0x6950>
mov    0x2c(%esp),%eax
cmpl   $0x3ffffffe,0x4(%eax)
je     804fcf0 <__sprintf_chk@plt+0x6870>
cmpl   $0x3ffffffe,0xc(%eax)
je     804fe00 <__sprintf_chk@plt+0x6980>
mov    $0x3,%ebp
jmp    804fa43 <__sprintf_chk@plt+0x65c3>
lea    0x0(%esi),%esi
mov    0xe4(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049400 <__xstat64@plt>
test   %eax,%eax
setne  %al
jmp    804fb5a <__sprintf_chk@plt+0x66da>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x2c(%esp)
xor    %ebp,%ebp
jmp    804fa12 <__sprintf_chk@plt+0x6592>
nop
mov    0xe4(%esp),%eax
movl   $0xffffff9c,(%esp)
mov    %eax,0x4(%esp)
call   8049440 <futimesat@plt>
add    $0xcc,%esp
pop    %ebx
mov    %eax,%esi
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    %eax,0x8(%esp)
mov    0xe4(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0xffffff9c,(%esp)
mov    %eax,0x4(%esp)
call   8048fb0 <utimensat@plt>
cmp    $0x0,%eax
mov    %eax,%esi
jg     804fa62 <__sprintf_chk@plt+0x65e2>
xchg   %ax,%ax
jne    804fe2b <__sprintf_chk@plt+0x69ab>
movl   $0x1,0x805639c
00
add    $0xcc,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %ebp,%ebp
jmp    804fad1 <__sprintf_chk@plt+0x6651>
nop
mov    0xe4(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049400 <__xstat64@plt>
test   %eax,%eax
setne  %al
jmp    804fbdd <__sprintf_chk@plt+0x675d>
lea    0x0(%esi,%eiz,1),%esi
mov    0xa4(%esp),%edx
mov    0xa0(%esp),%ecx
mov    %edx,0x4(%eax)
mov    %ecx,(%eax)
jmp    804fc03 <__sprintf_chk@plt+0x6783>
lea    0x60(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x1c(%esp)
call   8049110 <__fxstat64@plt>
mov    0x1c(%esp),%ecx
test   %eax,%eax
jne    804fb1d <__sprintf_chk@plt+0x669d>
mov    0xa8(%esp),%eax
mov    0x4(%ebp),%edx
mov    0xa0(%esp),%esi
sub    0x0(%ebp),%esi
mov    %eax,0x1c(%esp)
mov    0x8(%ebp),%eax
sub    %eax,0x1c(%esp)
mov    0x0(%ebp),%eax
mov    %edx,0x54(%esp)
mov    0xc(%ebp),%edx
mov    %eax,0x50(%esp)
mov    0x8(%ebp),%eax
mov    %edx,0x5c(%esp)
xor    %edx,%edx
test   %bl,%bl
mov    %eax,0x58(%esp)
je     804fd8a <__sprintf_chk@plt+0x690a>
cmp    $0x1,%esi
jne    804fd8a <__sprintf_chk@plt+0x690a>
mov    0xa4(%esp),%ebx
test   %ebx,%ebx
jne    804fd8a <__sprintf_chk@plt+0x690a>
movl   $0x0,0x54(%esp)
lea    0x50(%esp),%edx
test   %cl,%cl
je     804fe20 <__sprintf_chk@plt+0x69a0>
cmpl   $0x1,0x1c(%esp)
jne    804fe20 <__sprintf_chk@plt+0x69a0>
mov    0xac(%esp),%eax
test   %eax,%eax
jne    804fe20 <__sprintf_chk@plt+0x69a0>
movl   $0x0,0x5c(%esp)
lea    0x50(%esp),%edx
mov    %edx,0x8(%esp)
xor    %esi,%esi
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8049440 <futimesat@plt>
jmp    804fb1d <__sprintf_chk@plt+0x669d>
nop
mov    $0xffffffff,%esi
jmp    804fb1d <__sprintf_chk@plt+0x669d>
lea    0x0(%esi),%esi
cmpb   $0x0,0x1c(%esp)
je     804fa2d <__sprintf_chk@plt+0x65ad>
call   80492f0 <__errno_location@plt>
mov    $0xffffffff,%esi
movl   $0x9,(%eax)
jmp    804fb1d <__sprintf_chk@plt+0x669d>
mov    0xac(%esp),%edx
mov    0xa8(%esp),%ecx
mov    %edx,0xc(%eax)
mov    %ecx,0x8(%eax)
jmp    804fc03 <__sprintf_chk@plt+0x6783>
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
jne    804fdb4 <__sprintf_chk@plt+0x6934>
xor    %esi,%esi
jmp    804fb1d <__sprintf_chk@plt+0x669d>
nop
lea    0x0(%esi,%eiz,1),%esi
call   80492f0 <__errno_location@plt>
cmpl   $0x26,(%eax)
jne    804fca6 <__sprintf_chk@plt+0x6826>
xchg   %ax,%ax
jmp    804fa6d <__sprintf_chk@plt+0x65ed>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0xffffffff,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804f9c0 <__sprintf_chk@plt+0x6540>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x90,%esp
mov    0xa4(%esp),%edx
mov    0xa0(%esp),%ebx
test   %edx,%edx
je     804ff70 <__sprintf_chk@plt+0x6af0>
mov    (%edx),%esi
lea    0x20(%esp),%eax
mov    0x4(%edx),%edi
mov    0xc(%edx),%ecx
mov    0x8(%edx),%edx
mov    %esi,0x20(%esp)
mov    %eax,0x1c(%esp)
mov    %edi,0x24(%esp)
mov    %edx,0x28(%esp)
mov    %ecx,0x2c(%esp)
call   804f8b0 <__sprintf_chk@plt+0x6430>
test   %eax,%eax
mov    %eax,%esi
js     805002f <__sprintf_chk@plt+0x6baf>
mov    0x8056398,%edi
test   %edi,%edi
js     804ff1a <__sprintf_chk@plt+0x6a9a>
cmp    $0x2,%esi
je     804ffe8 <__sprintf_chk@plt+0x6b68>
mov    0x1c(%esp),%eax
movl   $0x100,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0xffffff9c,(%esp)
call   8048fb0 <utimensat@plt>
cmp    $0x0,%eax
mov    %eax,%edi
jle    8050038 <__sprintf_chk@plt+0x6bb8>
call   80492f0 <__errno_location@plt>
movl   $0x26,(%eax)
test   %esi,%esi
movl   $0xffffffff,0x8056398
ff
je     804ff98 <__sprintf_chk@plt+0x6b18>
cmp    $0x3,%esi
je     804ff4d <__sprintf_chk@plt+0x6acd>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049420 <__lxstat64@plt>
test   %eax,%eax
jne    805002f <__sprintf_chk@plt+0x6baf>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
je     804ffb4 <__sprintf_chk@plt+0x6b34>
lea    0x1c(%esp),%edx
lea    0x30(%esp),%eax
call   804f7e0 <__sprintf_chk@plt+0x6360>
mov    %eax,%edx
xor    %eax,%eax
test   %dl,%dl
je     804ffb4 <__sprintf_chk@plt+0x6b34>
jmp    804ffdc <__sprintf_chk@plt+0x6b5c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8056398,%edx
xor    %eax,%eax
xor    %esi,%esi
movl   $0x0,0x1c(%esp)
test   %edx,%edx
jns    804fee8 <__sprintf_chk@plt+0x6a68>
movl   $0xffffffff,0x8056398
ff
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049420 <__lxstat64@plt>
test   %eax,%eax
jne    805002f <__sprintf_chk@plt+0x6baf>
mov    0x40(%esp),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     8050024 <__sprintf_chk@plt+0x6ba4>
mov    0x1c(%esp),%eax
mov    %ebx,0x4(%esp)
movl   $0xffffffff,(%esp)
mov    %eax,0x8(%esp)
call   804f9c0 <__sprintf_chk@plt+0x6540>
add    $0x90,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049420 <__lxstat64@plt>
test   %eax,%eax
jne    805002f <__sprintf_chk@plt+0x6baf>
mov    0x1c(%esp),%eax
cmpl   $0x3ffffffe,0x4(%eax)
je     8050060 <__sprintf_chk@plt+0x6be0>
cmpl   $0x3ffffffe,0xc(%eax)
je     8050070 <__sprintf_chk@plt+0x6bf0>
mov    $0x3,%esi
jmp    804fee8 <__sprintf_chk@plt+0x6a68>
call   80492f0 <__errno_location@plt>
movl   $0x26,(%eax)
mov    $0xffffffff,%eax
jmp    804ffdc <__sprintf_chk@plt+0x6b5c>
xchg   %ax,%ax
jne    8050080 <__sprintf_chk@plt+0x6c00>
movl   $0x1,0x805639c
00
mov    %edi,%eax
movl   $0x1,0x8056398
00
add    $0x90,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x74(%esp),%edx
mov    0x70(%esp),%ecx
mov    %edx,0x4(%eax)
mov    %ecx,(%eax)
jmp    805001a <__sprintf_chk@plt+0x6b9a>
nop
mov    0x7c(%esp),%edx
mov    0x78(%esp),%ecx
mov    %edx,0xc(%eax)
mov    %ecx,0x8(%eax)
jmp    805001a <__sprintf_chk@plt+0x6b9a>
call   80492f0 <__errno_location@plt>
cmpl   $0x26,(%eax)
jne    805003a <__sprintf_chk@plt+0x6bba>
jmp    804ff1a <__sprintf_chk@plt+0x6a9a>
nop
mov    (%eax),%eax
test   %eax,%eax
js     80500a8 <__sprintf_chk@plt+0x6c28>
sub    $0x1c,%esp
mov    %eax,(%esp)
call   8049430 <close@plt>
test   %eax,%eax
jne    80500aa <__sprintf_chk@plt+0x6c2a>
add    $0x1c,%esp
repz ret
movl   $0x8052a51,0xc(%esp)
movl   $0x3f,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a02,(%esp)
call   8049450 <__assert_fail@plt>
xchg   %ax,%ax
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
movl   $0x10900,0x8(%esp)
mov    %edx,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049290 <openat64@plt>
test   %eax,%eax
mov    %eax,%esi
js     8050108 <__sprintf_chk@plt+0x6c88>
mov    %ebx,%eax
call   8050090 <__sprintf_chk@plt+0x6c10>
xor    %eax,%eax
mov    %esi,(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    80500fe <__sprintf_chk@plt+0x6c7e>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edi
mov    %edi,(%esp)
call   8049090 <chdir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     80501d8 <__sprintf_chk@plt+0x6d58>
call   80492f0 <__errno_location@plt>
cmpl   $0x24,(%eax)
mov    %eax,0x18(%esp)
je     8050145 <__sprintf_chk@plt+0x6cc5>
add    $0x3c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,(%esp)
call   8049260 <strlen@plt>
movl   $0xffffff9c,0x2c(%esp)
test   %eax,%eax
lea    (%edi,%eax,1),%esi
je     8050322 <__sprintf_chk@plt+0x6ea2>
cmp    $0xfff,%eax
jbe    8050346 <__sprintf_chk@plt+0x6ec6>
xor    %edx,%edx
mov    %edi,%ebx
cmpb   $0x2f,(%edi)
lea    0x1(%edi),%eax
jne    8050241 <__sprintf_chk@plt+0x6dc1>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebx
add    $0x1,%eax
add    $0x1,%edx
cmpb   $0x2f,-0x1(%eax)
je     8050180 <__sprintf_chk@plt+0x6d00>
cmp    $0x2,%edx
je     80501e4 <__sprintf_chk@plt+0x6d64>
lea    0x2c(%esp),%ebp
mov    $0x8052306,%edx
mov    %ebp,%eax
call   80500d0 <__sprintf_chk@plt+0x6c50>
test   %eax,%eax
jne    80502d2 <__sprintf_chk@plt+0x6e52>
cmpb   $0x2f,(%ebx)
jne    8050241 <__sprintf_chk@plt+0x6dc1>
movl   $0x8052a5a,0xc(%esp)
movl   $0xa1,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a23,(%esp)
call   8049450 <__assert_fail@plt>
add    $0x3c,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x3(%edi),%eax
mov    %esi,%edx
sub    %eax,%edx
mov    %edx,0x8(%esp)
movl   $0x2f,0x4(%esp)
mov    %eax,(%esp)
call   8049300 <memchr@plt>
test   %eax,%eax
je     80502f0 <__sprintf_chk@plt+0x6e70>
lea    0x2c(%esp),%ebp
mov    %edi,%edx
movb   $0x0,(%eax)
mov    %eax,0x1c(%esp)
mov    %ebp,%eax
call   80500d0 <__sprintf_chk@plt+0x6c50>
mov    0x1c(%esp),%ecx
movb   $0x2f,(%ecx)
test   %eax,%eax
jne    80502d2 <__sprintf_chk@plt+0x6e52>
cmpb   $0x2f,0x1(%ecx)
lea    0x1(%ecx),%ebx
jne    8050241 <__sprintf_chk@plt+0x6dc1>
lea    0x2(%ecx),%eax
mov    %eax,%ebx
add    $0x1,%eax
cmpb   $0x2f,-0x1(%eax)
je     8050236 <__sprintf_chk@plt+0x6db6>
cmp    %ebx,%esi
jb     805038e <__sprintf_chk@plt+0x6f0e>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
cmp    $0xfff,%eax
jle    80502bd <__sprintf_chk@plt+0x6e3d>
movl   $0x1000,0x8(%esp)
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049230 <memrchr@plt>
test   %eax,%eax
mov    %eax,%edi
je     80502f0 <__sprintf_chk@plt+0x6e70>
movb   $0x0,(%eax)
sub    %ebx,%eax
cmp    $0xfff,%eax
jg     805036a <__sprintf_chk@plt+0x6eea>
lea    0x2c(%esp),%ebp
mov    %ebx,%edx
mov    %ebp,%eax
call   80500d0 <__sprintf_chk@plt+0x6c50>
movb   $0x2f,(%edi)
test   %eax,%eax
jne    80502d2 <__sprintf_chk@plt+0x6e52>
cmpb   $0x2f,0x1(%edi)
lea    0x1(%edi),%ebx
jne    8050250 <__sprintf_chk@plt+0x6dd0>
lea    0x2(%edi),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebx
add    $0x1,%eax
cmpb   $0x2f,-0x1(%eax)
je     80502b0 <__sprintf_chk@plt+0x6e30>
jmp    8050250 <__sprintf_chk@plt+0x6dd0>
cmp    %ebx,%esi
lea    0x2c(%esp),%ebp
jbe    8050304 <__sprintf_chk@plt+0x6e84>
mov    %ebx,%edx
mov    %ebp,%eax
call   80500d0 <__sprintf_chk@plt+0x6c50>
test   %eax,%eax
je     8050304 <__sprintf_chk@plt+0x6e84>
mov    0x18(%esp),%esi
mov    %ebp,%eax
mov    (%esi),%ebx
call   8050090 <__sprintf_chk@plt+0x6c10>
mov    %ebx,(%esi)
add    $0x3c,%esp
mov    $0xffffffff,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x18(%esp),%eax
mov    $0xffffffff,%ebx
movl   $0x24,(%eax)
jmp    805013b <__sprintf_chk@plt+0x6cbb>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80493a0 <fchdir@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    80502d2 <__sprintf_chk@plt+0x6e52>
mov    %ebp,%eax
call   8050090 <__sprintf_chk@plt+0x6c10>
jmp    805013b <__sprintf_chk@plt+0x6cbb>
movl   $0x8052a5a,0xc(%esp)
movl   $0x7d,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a0f,(%esp)
call   8049450 <__assert_fail@plt>
movl   $0x8052a5a,0xc(%esp)
movl   $0x7e,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a17,(%esp)
call   8049450 <__assert_fail@plt>
movl   $0x8052a5a,0xc(%esp)
movl   $0xb2,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a3e,(%esp)
call   8049450 <__assert_fail@plt>
movl   $0x8052a5a,0xc(%esp)
movl   $0xa2,0x8(%esp)
movl   $0x80529f1,0x4(%esp)
movl   $0x8052a2f,(%esp)
call   8049450 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049310 <fileno@plt>
test   %eax,%eax
js     8050448 <__sprintf_chk@plt+0x6fc8>
mov    %ebx,(%esp)
call   80491b0 <__freading@plt>
test   %eax,%eax
jne    8050418 <__sprintf_chk@plt+0x6f98>
mov    %ebx,(%esp)
call   8050460 <__sprintf_chk@plt+0x6fe0>
test   %eax,%eax
je     8050448 <__sprintf_chk@plt+0x6fc8>
call   80492f0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049040 <fclose@plt>
test   %edi,%edi
je     805040a <__sprintf_chk@plt+0x6f8a>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049310 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   80493b0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    80503e2 <__sprintf_chk@plt+0x6f62>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049040 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8050478 <__sprintf_chk@plt+0x6ff8>
mov    %ebx,(%esp)
call   80491b0 <__freading@plt>
test   %eax,%eax
jne    8050488 <__sprintf_chk@plt+0x7008>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fe0 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8050478 <__sprintf_chk@plt+0x6ff8>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   80504c0 <__sprintf_chk@plt+0x7040>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fe0 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     8050500 <__sprintf_chk@plt+0x7080>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049060 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    80504df <__sprintf_chk@plt+0x705f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    80504df <__sprintf_chk@plt+0x705f>
mov    %ebx,(%esp)
call   8049310 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   80493b0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     8050547 <__sprintf_chk@plt+0x70c7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    805053f <__sprintf_chk@plt+0x70bf>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x78(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
mov    0x70(%esp),%ebx
cmpb   $0x0,(%esi)
je     80505f8 <__sprintf_chk@plt+0x7178>
mov    0x80563a0,%eax
test   %eax,%eax
je     8050600 <__sprintf_chk@plt+0x7180>
test   %eax,%eax
js     80505ee <__sprintf_chk@plt+0x716e>
mov    %esi,(%esp)
call   8049260 <strlen@plt>
add    $0x1b,%eax
cmp    $0xfc0,%eax
ja     80505e0 <__sprintf_chk@plt+0x7160>
mov    0x74(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0x8052a79,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049480 <__sprintf_chk@plt>
mov    %ebx,%eax
mov    0x4c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8050691 <__sprintf_chk@plt+0x7211>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    %eax,(%esp)
call   80491a0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    8050597 <__sprintf_chk@plt+0x7117>
xor    %eax,%eax
jmp    80505c5 <__sprintf_chk@plt+0x7145>
lea    0x0(%esi),%esi
movb   $0x0,(%ebx)
mov    %ebx,%eax
jmp    80505c5 <__sprintf_chk@plt+0x7145>
nop
movl   $0x10900,0x4(%esp)
movl   $0x8052a65,(%esp)
call   8048fd0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050680 <__sprintf_chk@plt+0x7200>
lea    0x2c(%esp),%ebp
movl   $0x8052a73,0x14(%esp)
mov    %eax,0x10(%esp)
movl   $0x8052a79,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   8049480 <__sprintf_chk@plt>
movl   $0x0,0x4(%esp)
mov    %ebp,(%esp)
call   8049320 <access@plt>
mov    %edi,(%esp)
cmp    $0x1,%eax
sbb    %edx,%edx
and    $0x2,%edx
sub    $0x1,%edx
mov    %edx,0x80563a0
call   8049430 <close@plt>
mov    0x80563a0,%eax
jmp    8050581 <__sprintf_chk@plt+0x7101>
lea    0x0(%esi),%esi
movl   $0xffffffff,0x80563a0
ff
xor    %eax,%eax
jmp    80505c5 <__sprintf_chk@plt+0x7145>
call   80490c0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x0,0x8(%esp)
mov    0x24(%esp),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
test   %eax,%eax
mov    %eax,%edx
js     8050708 <__sprintf_chk@plt+0x7288>
mov    %eax,%ecx
mov    %esi,%ebx
and    $0xfffffffe,%eax
or     $0x1,%ecx
test   %bl,%bl
cmove  %eax,%ecx
xor    %eax,%eax
cmp    %edx,%ecx
je     8050700 <__sprintf_chk@plt+0x7280>
mov    %ecx,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
cmp    $0xffffffff,%eax
sete   %al
movzbl %al,%eax
neg    %eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    $0xffffffff,%eax
jmp    8050700 <__sprintf_chk@plt+0x7280>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x406,0x4(%esp)
mov    %eax,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x24(%esp),%edx
test   $0x40,%dl
cmovne 0x28(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fd0 <open64@plt>
mov    %eax,(%esp)
call   8050780 <__sprintf_chk@plt+0x7300>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
ja     80507af <__sprintf_chk@plt+0x732f>
mov    %ebx,(%esp)
call   80508e0 <__sprintf_chk@plt+0x7460>
mov    %eax,%edi
call   80492f0 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049430 <close@plt>
mov    %ebp,(%esi)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    8050820 <__sprintf_chk@plt+0x73a0>
mov    0x80563a4,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     80508c8 <__sprintf_chk@plt+0x7448>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   80492c0 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8050840 <__sprintf_chk@plt+0x73c0>
movl   $0x1,0x80563a4
00
test   %ebx,%ebx
js     8050817 <__sprintf_chk@plt+0x7397>
cmpl   $0xffffffff,0x80563a4
je     8050870 <__sprintf_chk@plt+0x73f0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   80492c0 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   80492f0 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    8050800 <__sprintf_chk@plt+0x7380>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
test   %eax,%eax
mov    %eax,%ebx
js     8050817 <__sprintf_chk@plt+0x7397>
movl   $0xffffffff,0x80563a4
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80492c0 <fcntl@plt>
test   %eax,%eax
js     80508a4 <__sprintf_chk@plt+0x7424>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   80492c0 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    8050817 <__sprintf_chk@plt+0x7397>
call   80492f0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   8049430 <close@plt>
mov    %edi,(%esi)
jmp    8050817 <__sprintf_chk@plt+0x7397>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
mov    %eax,%ebx
jmp    805080a <__sprintf_chk@plt+0x738a>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80507c0 <__sprintf_chk@plt+0x7340>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049e30 <__sprintf_chk@plt+0x9b0>
add    $0x56e5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048f50 <unsetenv@plt-0x40>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8050969 <__sprintf_chk@plt+0x74e9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8050948 <__sprintf_chk@plt+0x74c8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8050980 <__sprintf_chk@plt+0x7500>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049e30 <__sprintf_chk@plt+0x9b0>
add    $0x566a,%ebx
sub    $0x18,%esp
lea    0x164(%ebx),%eax
test   %eax,%eax
je     80509c8 <__sprintf_chk@plt+0x7548>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    80509ab <__sprintf_chk@plt+0x752b>
push   %ebx
sub    $0x8,%esp
call   8049e30 <__sprintf_chk@plt+0x9b0>
add    $0x562b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x74(%ecx,%eiz,2)
and    %ah,%gs:0x6f(%esi)
jb     8050a66 <_IO_stdin_used+0x82>
popa
je     8050a1c <_IO_stdin_used+0x38>
and    $0x520a0073,%eax
gs
jo     8050a73 <_IO_stdin_used+0x8f>
jb     8050a7a <_IO_stdin_used+0x96>
and    %ah,0x75622073
addr16 jae 8050a2f <_IO_stdin_used+0x4b>
je     8050a80 <_IO_stdin_used+0x9c>
and    %ah,0x62000a73
jne    8050a80 <_IO_stdin_used+0x9c>
sub    $0x65726f63,%eax
jne    8050a94 <_IO_stdin_used+0xb0>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     8050a92 <_IO_stdin_used+0xae>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    8050a7c <_IO_stdin_used+0x98>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     8050aad <_IO_stdin_used+0xc9>
jne    8050abe <_IO_stdin_used+0xda>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    8050ac8 <_IO_stdin_used+0xe4>
jb     8050a86 <_IO_stdin_used+0xa2>
jae    8050ac1 <_IO_stdin_used+0xdd>
popa
jb     8050ac1 <_IO_stdin_used+0xdd>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x6d69742d
add    %dl,%gs:0x61(%edx)
outsb  %ds:(%esi),(%dx)
fs
jns    8050a91 <_IO_stdin_used+0xad>
push   %ebx
insl   (%dx),%es:(%edi)
imul   $0x69766144,0x0(%eax,%ebp,2),%esi
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     8050aee <_IO_stdin_used+0x10a>
add    %cl,%gs:0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%si),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,0x72(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %dl,%fs:0x6f(%edx)
bound  %esp,0x69(%edx)
outsb  %ds:(%esi),(%dx)
jae    8050aa2 <_IO_stdin_used+0xbe>
push   %eax
popa
jne    8050b12 <_IO_stdin_used+0x12e>
and    %dl,0x75(%edx)
bound  %ebp,0x6e(%ecx)
add    %dh,0x75(%edi,%ebp,2)
arpl   %bp,0x0(%eax)
popa
arpl   %sp,0x66(%edx,%edi,1)
push   $0x743a726d
cmp    (%eax),%al
push   %eax
dec    %edi
push   %ebx
dec    %ecx
pop    %eax
dec    %esp
pop    %ecx
pop    %edi
inc    %ebx
dec    %edi
push   %edx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
add    %ch,0x69(%ebp)
jae    8050b46 <_IO_stdin_used+0x162>
imul   $0x6c696620,0x67(%esi),%ebp
and    %ch,%gs:0x70(%edi)
gs
jb     8050b42 <_IO_stdin_used+0x15e>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x72(%ebx)
arpl   %bp,(%edi)
je     8050b59 <_IO_stdin_used+0x175>
jne    8050b4f <_IO_stdin_used+0x16b>
push   $0x6300632e
push   $0x65676e61
pop    %edi
je     8050b62 <_IO_stdin_used+0x17e>
insl   (%dx),%es:(%edi)
gs
jae    8050b1d <_IO_stdin_used+0x139>
cmp    $0x31203d,%eax
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8050b3c <_IO_stdin_used+0x158>
je     8050b8d <_IO_stdin_used+0x1a9>
jne    8050b83 <_IO_stdin_used+0x19f>
push   $0x732520
jae    8050b8c <_IO_stdin_used+0x1a8>
je     8050b9d <_IO_stdin_used+0x1b9>
imul   $0x6d697420,0x67(%esi),%ebp
gs
jae    8050b53 <_IO_stdin_used+0x16f>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x74610073
imul   $0x63636100,0x65(%ebp),%ebp
gs
jae    8050bb8 <_IO_stdin_used+0x1d4>
add    %dh,0x73(%ebp)
add    %ch,%gs:0x74(%ebp)
imul   $0x646f6d00,0x65(%ebp),%ebp
imul   $0x2d6f6e00,0x79(%esi),%esp
arpl   %si,0x65(%edx)
popa
je     8050bc5 <_IO_stdin_used+0x1e1>
add    %ah,0x74(%ecx,%eiz,2)
add    %ch,%gs:0x6f(%esi)
sub    $0x65726564,%eax
data16
gs
jb     8050bd6 <_IO_stdin_used+0x1f2>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
push   $0x706c65
jbe    8050be1 <_IO_stdin_used+0x1fd>
jb     8050bf1 <_IO_stdin_used+0x20d>
imul   $0x54000000,0x6e(%edi),%ebp
jb     8050c00 <_IO_stdin_used+0x21c>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     8050bb8 <_IO_stdin_used+0x1d4>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8050c01 <_IO_stdin_used+0x21d>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8050c10 <_IO_stdin_used+0x22c>
popa
je     8050c0f <_IO_stdin_used+0x22b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %al,%cs:0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%al
add    %dl,0x70(%ebp)
fs
popa
je     8050c37 <_IO_stdin_used+0x253>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    8050bfe <_IO_stdin_used+0x21a>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6f(%ebp)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6d(%ecx,%ebp,2)
gs
jae    8050c15 <_IO_stdin_used+0x231>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
je     8050c6f <_IO_stdin_used+0x28b>
and    %ah,%gs:0x75(%ebx)
jb     8050c7f <_IO_stdin_used+0x29b>
outsb  %gs:(%esi),(%dx)
je     8050c31 <_IO_stdin_used+0x24d>
je     8050c7c <_IO_stdin_used+0x298>
insl   (%dx),%es:(%edi)
gs or  %cs:%gs:(%edx),%cl
inc    %ecx
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
and    %ah,0x72(%ecx)
addr16 jne 8050c91 <_IO_stdin_used+0x2ad>
outsb  %gs:(%esi),(%dx)
je     8050c48 <_IO_stdin_used+0x264>
je     8050c92 <_IO_stdin_used+0x2ae>
popa
je     8050c4d <_IO_stdin_used+0x269>
outsl  %fs:(%esi),(%dx)
gs
jae    8050c52 <_IO_stdin_used+0x26e>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8050c56 <_IO_stdin_used+0x272>
gs
js     8050ca2 <_IO_stdin_used+0x2be>
jae    8050caf <_IO_stdin_used+0x2cb>
and    %ch,0x73(%ecx)
and    %ah,0x72(%ebx)
gs
popa
je     8050caa <_IO_stdin_used+0x2c6>
and    %ah,%fs:0x6d(%ebp)
jo     8050cbf <_IO_stdin_used+0x2db>
jns    8050c79 <_IO_stdin_used+0x295>
and    %dh,0x6e(%ebp)
insb   (%dx),%es:(%edi)
gs
jae    8050cc7 <_IO_stdin_used+0x2e3>
and    %ch,0x726f2063
and    %ch,0x73690a68
and    %dh,0x75(%ebx)
jo     8050cd5 <_IO_stdin_used+0x2f1>
insb   (%dx),%es:(%edi)
imul   $0x410a0a2e,0x64(%ebp),%esp
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
and    %ah,0x72(%ecx)
addr16 jne 8050ce5 <_IO_stdin_used+0x301>
outsb  %gs:(%esi),(%dx)
je     8050c9c <_IO_stdin_used+0x2b8>
jae    8050cf2 <_IO_stdin_used+0x30e>
jb     8050ce9 <_IO_stdin_used+0x305>
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%bx)
and    %ch,0x20736920
push   $0x6c646e61
gs and %dh,%fs:%gs:0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8050cbd <_IO_stdin_used+0x2d9>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x61(%ebx)
jne    8050d18 <_IO_stdin_used+0x334>
gs
jae    8050cc8 <_IO_stdin_used+0x2e4>
je     8050d19 <_IO_stdin_used+0x335>
jne    8050d0f <_IO_stdin_used+0x32b>
push   $0xa6f7420
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %dh,%gs:0x6d(%ecx,%ebp,2)
gs
jae    8050ce2 <_IO_stdin_used+0x2fe>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
jae    8050d41 <_IO_stdin_used+0x35d>
arpl   %bp,0x61(%ecx)
je     8050d3c <_IO_stdin_used+0x358>
and    %dh,%fs:0x69(%edi)
je     8050d45 <_IO_stdin_used+0x361>
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8050d4a <_IO_stdin_used+0x366>
and    %ch,0x75(%edi)
je     8050d5b <_IO_stdin_used+0x377>
jne    8050d61 <_IO_stdin_used+0x37d>
or     %cs:(%eax),%al
or     0x61(%ebp),%cl
outsb  %ds:(%esi),(%dx)
fs
popa
je     8050d67 <_IO_stdin_used+0x383>
jb     8050d73 <_IO_stdin_used+0x38f>
and    %ah,0x72(%ecx)
addr16 jne 8050d6d <_IO_stdin_used+0x389>
outsb  %gs:(%esi),(%dx)
je     8050d77 <_IO_stdin_used+0x393>
and    %dh,0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     8050d7a <_IO_stdin_used+0x396>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8050d35 <_IO_stdin_used+0x351>
popa
jb     8050d7d <_IO_stdin_used+0x399>
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
je     8050d8f <_IO_stdin_used+0x3ab>
jb     8050d9b <_IO_stdin_used+0x3b7>
and    %ah,0x6f(%esi)
jb     8050d47 <_IO_stdin_used+0x363>
jae    8050d91 <_IO_stdin_used+0x3ad>
outsl  %ds:(%esi),(%dx)
jb     8050da0 <_IO_stdin_used+0x3bc>
and    %ch,0x70(%edi)
je     8050d9a <_IO_stdin_used+0x3b6>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8050d55 <_IO_stdin_used+0x371>
je     8050da6 <_IO_stdin_used+0x3c2>
outsl  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %ah,(%eax)
and    %ch,0x20202061
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8050d81 <_IO_stdin_used+0x39d>
je     8050dcb <_IO_stdin_used+0x3e7>
and    %ah,%gs:0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    8050d8c <_IO_stdin_used+0x3a8>
je     8050dd7 <_IO_stdin_used+0x3f3>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x2d202c63
sub    $0x632d6f6e,%eax
jb     8050de4 <_IO_stdin_used+0x400>
popa
je     8050de7 <_IO_stdin_used+0x403>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8050db1 <_IO_stdin_used+0x3cd>
arpl   %si,0x65(%edx)
popa
je     8050dfc <_IO_stdin_used+0x418>
and    %ah,0x6e(%ecx)
jns    8050dbc <_IO_stdin_used+0x3d8>
imul   $0x200a,0x73(%ebp,%eiz,2),%bp
and    %ch,0x2d202c64
sub    $0x65746164,%eax
cmp    $0x49525453,%eax
dec    %esi
inc    %edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     8050e1e <_IO_stdin_used+0x43a>
jb     8050e32 <_IO_stdin_used+0x44e>
and    %dl,%gs:0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x73(%ebp)
and    %ch,%gs:0x74(%ecx)
and    %ch,0x6e(%ecx)
jae    8050e4b <_IO_stdin_used+0x467>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x75(%ebx)
jb     8050e54 <_IO_stdin_used+0x470>
outsb  %gs:(%esi),(%dx)
je     8050e06 <_IO_stdin_used+0x422>
je     8050e51 <_IO_stdin_used+0x46d>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x20202066
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %ch,0x67(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     8050e70 <_IO_stdin_used+0x48c>
sub    %ecx,%fs:(%edx)
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c68,%eax
sub    $0x642d6f6e,%eax
gs
jb     8050e84 <_IO_stdin_used+0x4a0>
data16
gs
jb     8050e88 <_IO_stdin_used+0x4a4>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
popa
data16
data16
arpl   %si,%gs:0x65(%eax,%eiz,1)
popa
arpl   %bp,0x20(%eax)
jae    8050eb0 <_IO_stdin_used+0x4cc>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ch,0x6e(%ecx)
jae    8050ebb <_IO_stdin_used+0x4d7>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x6e(%ecx)
jns    8050e72 <_IO_stdin_used+0x48e>
jb     8050eb9 <_IO_stdin_used+0x4d5>
data16
gs
jb     8050ebd <_IO_stdin_used+0x4d9>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x64(%ebp)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x7528,0x20(%ebp,%eiz,2),%bp
jae    8050ee4 <_IO_stdin_used+0x500>
data16
jne    8050eee <_IO_stdin_used+0x50a>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8050ea8 <_IO_stdin_used+0x4c4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x79(%ebx)
jae    8050f03 <_IO_stdin_used+0x51f>
gs
insl   (%dx),%es:(%edi)
jae    8050eb3 <_IO_stdin_used+0x4cf>
je     8050efd <_IO_stdin_used+0x519>
popa
je     8050eb8 <_IO_stdin_used+0x4d4>
arpl   %sp,0x6e(%ecx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     8050f2b <_IO_stdin_used+0x547>
insl   (%dx),%es:(%edi)
gs
jae    8050f3a <_IO_stdin_used+0x556>
popa
insl   (%dx),%es:(%edi)
jo     8050f3d <_IO_stdin_used+0x559>
and    %ch,0x66(%edi)
and    %ah,0x20(%ecx)
jae    8050f4b <_IO_stdin_used+0x567>
insl   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x20200a29,0x6b(%esi),%ebp
sub    $0x2020206d,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x6e(%bx)
insb   (%dx),%es:(%edi)
jns    8050f1e <_IO_stdin_used+0x53a>
je     8050f68 <_IO_stdin_used+0x584>
and    %ch,%gs:0x6f(%ebp)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6d(%ecx,%ebp,2)
or     %gs:(%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ch,0x2d202c72
sub    $0x65666572,%eax
jb     8050f8b <_IO_stdin_used+0x5a7>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %dh,%gs:0x69(%eax,%ebp,2)
jae    8050f5a <_IO_stdin_used+0x576>
imul   $0x2073,0x27(%ebp,%eiz,2),%bp
je     8050fac <_IO_stdin_used+0x5c8>
insl   (%dx),%es:(%edi)
gs
jae    8050f67 <_IO_stdin_used+0x583>
imul   $0x64616574,0x73(%esi),%ebp
and    %ch,0x66(%edi)
and    %ah,0x75(%ebx)
jb     8050fc8 <_IO_stdin_used+0x5e4>
outsb  %gs:(%esi),(%dx)
je     8050f7a <_IO_stdin_used+0x596>
je     8050fc5 <_IO_stdin_used+0x5e1>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x54532074
inc    %ecx
dec    %ebp
push   %eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %bl,%gs:0x5b(%ebx)
inc    %ebx
inc    %ebx
pop    %ebp
pop    %ecx
pop    %ecx
pop    %ebp
dec    %ebp
dec    %ebp
inc    %esp
inc    %esp
push   $0x5b6d6d68
jae,pn 8051003 <_IO_stdin_used+0x61f>
pop    %ebp
and    %ch,0x6e(%ecx)
jae    805100a <_IO_stdin_used+0x626>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x75(%ebx)
jb     8051013 <_IO_stdin_used+0x62f>
outsb  %gs:(%esi),(%dx)
je     8050fc5 <_IO_stdin_used+0x5e1>
je     8051010 <_IO_stdin_used+0x62c>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6d69742d
gs
cmp    $0x44524f57,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %dh,%gs:0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6d697420,0x64(%ebp),%esp
cmp    %gs:(%edx),%cl
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4f(%edi)
push   %edx
inc    %esp
and    %ch,0x73(%ecx)
and    %ah,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    8051034 <_IO_stdin_used+0x650>
and    %ah,0x74(%ecx)
imul   $0x726f202c,0x65(%ebp),%ebp
and    %dh,0x73(%ebp)
cmp    %gs:(%eax),%ah
gs
jno    8051090 <_IO_stdin_used+0x6ac>
imul   $0x746e656c,0x61(%esi),%esi
and    %dh,0x20(%edi,%ebp,2)
sub    $0x20200a61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4f(%edi)
push   %edx
inc    %esp
and    %ch,0x73(%ecx)
and    %ch,0x6f(%ebp)
imul   $0x20726f20,%fs:0x79(%esi),%esp
insl   (%dx),%es:(%edi)
je     80510c2 <_IO_stdin_used+0x6de>
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%ah
gs
jno    80510d5 <_IO_stdin_used+0x6f1>
imul   $0x746e656c,0x61(%esi),%esi
and    %dh,0x20(%edi,%ebp,2)
sub    $0xa6d,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     805109d <_IO_stdin_used+0x6b9>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     80510f3 <_IO_stdin_used+0x70f>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    8051116 <_IO_stdin_used+0x732>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8051128 <_IO_stdin_used+0x744>
jo     805112b <_IO_stdin_used+0x747>
je     80510d8 <_IO_stdin_used+0x6f4>
jbe    805111f <_IO_stdin_used+0x73b>
jb     805112f <_IO_stdin_used+0x74b>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051133 <_IO_stdin_used+0x74f>
popa
je     8051132 <_IO_stdin_used+0x74e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x4e0a0000,0x0(%edx,%ecx,1),%esi
outsl  %ds:(%esi),(%dx)
je     8051142 <_IO_stdin_used+0x75e>
and    %dh,0x61(%eax,%ebp,2)
je     8051103 <_IO_stdin_used+0x71f>
je     805114d <_IO_stdin_used+0x769>
and    %ch,%gs:0x6e612064
and    %ch,%fs:0x706f2074
je     805115e <_IO_stdin_used+0x77a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8051119 <_IO_stdin_used+0x735>
popa
arpl   %sp,0x65(%ebx)
jo     8051173 <_IO_stdin_used+0x78f>
and    %ah,0x66(%ecx,%ebp,2)
data16
gs
jb     805116c <_IO_stdin_used+0x788>
outsb  %ds:(%esi),(%dx)
je     805112a <_IO_stdin_used+0x746>
je     8051175 <_IO_stdin_used+0x791>
insl   (%dx),%es:(%edi)
gs
sub    $0x65746164,%eax
and    %ah,0x6f(%esi)
jb     8051185 <_IO_stdin_used+0x7a1>
popa
je     805118e <_IO_stdin_used+0x7aa>
or     %cs:(%eax),%al
add    %al,(%eax)
push   $0x3a707474
das
das
ja     80511a0 <_IO_stdin_used+0x7bc>
ja     8051159 <_IO_stdin_used+0x775>
outsb  %ds:(%si),(%dx)
jne    805115d <_IO_stdin_used+0x779>
outsl  %ds:(%esi),(%dx)
jb     8051199 <_IO_stdin_used+0x7b5>
das
jae    80511a4 <_IO_stdin_used+0x7c0>
data16
je     80511af <_IO_stdin_used+0x7cb>
popa
jb     80511a0 <_IO_stdin_used+0x7bc>
das
arpl   %bp,0x72(%edi)
gs
jne    80511b6 <_IO_stdin_used+0x7d2>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     80511af <_IO_stdin_used+0x7cb>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051175 <_IO_stdin_used+0x791>
jne    80511ca <_IO_stdin_used+0x7e6>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     80511db <_IO_stdin_used+0x7f7>
popa
jb     80511cc <_IO_stdin_used+0x7e8>
cmp    (%eax),%ah
cmp    $0x68,%al
je     80511e1 <_IO_stdin_used+0x7fd>
jo     80511a9 <_IO_stdin_used+0x7c5>
das
das
ja     80511ea <_IO_stdin_used+0x806>
ja     80511a3 <_IO_stdin_used+0x7bf>
outsb  %ds:(%si),(%dx)
jne    80511a7 <_IO_stdin_used+0x7c3>
outsl  %ds:(%esi),(%dx)
jb     80511e3 <_IO_stdin_used+0x7ff>
das
addr16
gs
je     80511e9 <_IO_stdin_used+0x805>
gs
insb   (%dx),%es:(%edi)
jo     80511b4 <_IO_stdin_used+0x7d0>
or     %ds:(%eax),%al
push   %edx
gs
jo     80511fb <_IO_stdin_used+0x817>
jb     8051202 <_IO_stdin_used+0x81e>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8051204 <_IO_stdin_used+0x820>
popa
je     8051204 <_IO_stdin_used+0x820>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 80511c3 <_IO_stdin_used+0x7df>
je     8051214 <_IO_stdin_used+0x830>
and    %bh,(%eax,%ebp,2)
je     805121e <_IO_stdin_used+0x83a>
jo     80511e6 <_IO_stdin_used+0x802>
das
das
je     8051222 <_IO_stdin_used+0x83e>
popa
outsb  %ds:(%esi),(%dx)
jae    8051220 <_IO_stdin_used+0x83c>
popa
je     8051220 <_IO_stdin_used+0x83c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     805122d <_IO_stdin_used+0x849>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     805122b <_IO_stdin_used+0x847>
das
je     805122c <_IO_stdin_used+0x848>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     80511f4 <_IO_stdin_used+0x810>
arpl   %bp,0x6d(%edi)
jo     8051245 <_IO_stdin_used+0x861>
gs
je     8051241 <_IO_stdin_used+0x85d>
and    %ah,0x63(%edi,%ebp,2)
jne    805124f <_IO_stdin_used+0x86b>
outsb  %gs:(%esi),(%dx)
je     8051247 <_IO_stdin_used+0x863>
je     8051251 <_IO_stdin_used+0x86d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8051263 <_IO_stdin_used+0x87f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     805125f <_IO_stdin_used+0x87b>
jne    8051270 <_IO_stdin_used+0x88c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805123b <_IO_stdin_used+0x857>
jae    805128d <_IO_stdin_used+0x8a9>
arpl   %bp,%gs:0x66(%ecx)
jns    8051243 <_IO_stdin_used+0x85f>
je     805128e <_IO_stdin_used+0x8aa>
insl   (%dx),%es:(%edi)
gs
jae    8051249 <_IO_stdin_used+0x865>
data16
jb     805129b <_IO_stdin_used+0x8b7>
insl   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
jb     8051297 <_IO_stdin_used+0x8b3>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi)
and    %dh,%gs:0x6f(%ebx)
jne    80512b2 <_IO_stdin_used+0x8ce>
arpl   %sp,0x0(%ebp)
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     8051272 <_IO_stdin_used+0x88e>
popa
je     80512c9 <_IO_stdin_used+0x8e5>
jb     80512c0 <_IO_stdin_used+0x8dc>
bound  %esi,0x74(%ebp)
gs
jae    805127d <_IO_stdin_used+0x899>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x77000073
popa
jb     80512d6 <_IO_stdin_used+0x8f2>
imul   $0x7427203a,0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jne    80512d5 <_IO_stdin_used+0x8f1>
push   $0x27732520
and    %ch,0x73(%ecx)
and    %ch,0x62(%edi)
jae    80512ee <_IO_stdin_used+0x90a>
insb   (%dx),%es:(%edi)
gs
je     80512e8 <_IO_stdin_used+0x904>
cmp    (%eax),%esp
jne    80512fa <_IO_stdin_used+0x916>
and    %ah,%gs:(%edi)
je     80512fb <_IO_stdin_used+0x917>
jne    80512f1 <_IO_stdin_used+0x90d>
push   $0x20742d20
and    $0x646c3430,%eax
and    $0x25643230,%eax
xor    %dh,(%edx)
fs
and    $0x25643230,%eax
xor    %dh,(%edx)
fs
cs
and    $0x27643230,%eax
add    %al,(%eax)
je     8051331 <_IO_stdin_used+0x94d>
jne    8051327 <_IO_stdin_used+0x943>
push   $0x1000000
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %bh,(%ecx)
or     0x50b3f08,%eax
or     %al,0xb(%esi)
add    $0x50b4a08,%eax
or     %dl,0xb(%eax)
add    $0x8,%eax
add    %ah,0xa(%esi)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x57000000(%eax)
or     0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebx)
add    %al,(%eax)
popa
or     0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %ch,0xb(%ebx)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
or     0x8,%ax
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
jne    805135d <_IO_stdin_used+0x979>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%esi)
(bad)
(bad)
jp     805136d <_IO_stdin_used+0x989>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %ch,0x6e(%ecx)
jbe    80513ea <_IO_stdin_used+0xa06>
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     80513b6 <_IO_stdin_used+0x9d2>
and    $0x6f662073,%eax
jb     80513bd <_IO_stdin_used+0x9d9>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    8051416 <_IO_stdin_used+0xa32>
jne    805141c <_IO_stdin_used+0xa38>
and    %ah,0x72(%ecx)
addr16 jne 805141c <_IO_stdin_used+0xa38>
outsb  %gs:(%esi),(%dx)
je     80513d3 <_IO_stdin_used+0x9ef>
and    $0x6f662073,%eax
jb     80513da <_IO_stdin_used+0x9f6>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     805143f <_IO_stdin_used+0xa5b>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x732520
sub    $0x20,%al
and    $0x72770073,%eax
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     80513eb <_IO_stdin_used+0xa07>
and    $0x25203a73,%eax
jae    80513f2 <_IO_stdin_used+0xa0e>
push   %esp
pop    %edx
add    %al,0x4d(%edi)
push   %esp
add    %dl,0x45(%edi)
push   %esp
add    %al,0x4d(%ecx)
add    %cl,0x41(%edx)
dec    %esi
push   %ebp
inc    %ecx
push   %edx
pop    %ecx
add    %bl,0x45(%ecx)
inc    %ecx
push   %edx
add    %dl,0x4d(%edi,%ecx,2)
dec    %edi
push   %edx
push   %edx
dec    %edi
push   %edi
add    %al,0x54(%ebx,%edx,2)
add    %dh,(%eax)
add    %dl,0x3d(%edx,%ebx,2)
and    (%eax),%al
pop    %eax
pop    %eax
pop    %eax
and    $0x646c2573,%eax
cmp    0x643230,%ah
inc    %ecx
add    %al,0x0(%edx)
inc    %esi
add    %al,0x0(%edi)
push   %eax
add    %dl,0x0(%ecx)
push   %ebp
add    %dl,0x0(%esi)
pop    %eax
add    %dl,0x45(%edi)
push   %ebx
push   %esp
add    %al,0x53(%edx)
push   %esp
add    %al,0x52(%ecx)
push   %esp
add    %al,0x52(%edx)
push   %esp
add    %al,0x52(%edx)
push   %ebx
push   %esp
add    %cl,0x53(%esi)
push   %esp
add    %cl,0x44(%esi)
push   %esp
add    %al,0x4c(%ebx)
push   %esp
add    %al,0x4c(%ebx)
push   %ebx
push   %esp
add    %al,0x44(%ebp)
push   %esp
add    %al,0x53(%ebx)
push   %esp
add    %al,0x44(%ebx)
push   %esp
add    %cl,0x53(%ebp)
push   %esp
add    %cl,0x44(%ebp)
push   %esp
add    %dl,0x53(%eax)
push   %esp
add    %dl,0x44(%eax)
push   %esp
add    %al,0x4b(%ecx)
push   %ebx
push   %esp
add    %al,0x4b(%ecx)
inc    %esp
push   %esp
add    %cl,0x53(%eax)
push   %esp
add    %cl,0x41(%eax)
push   %ebx
push   %esp
add    %cl,0x41(%eax)
inc    %esp
push   %esp
add    %dl,0x53(%ebx)
push   %esp
add    %dl,0x41(%edi)
push   %esp
add    %al,0x45(%ebx)
push   %esp
add    %al,0x45(%ebx)
push   %ebx
push   %esp
add    %cl,0x45(%ebp)
push   %esp
add    %cl,0x45(%ebp)
pop    %edx
add    %cl,0x45(%ebp)
push   %ebx
push   %esp
add    %cl,0x45(%ebp)
push   %ebx
pop    %edx
add    %al,0x45(%ebp)
push   %esp
add    %al,0x45(%ebp)
push   %ebx
push   %esp
add    %al,0x41(%ebx)
push   %esp
add    %dl,0x41(%ebx)
push   %ebx
push   %esp
add    %al,0x41(%ebp)
push   %esp
add    %cl,0x53(%ebp)
dec    %ebx
add    %cl,0x53(%ebp)
inc    %esp
add    %cl,0x53(%ecx)
push   %esp
add    %dl,0x47(%ebx)
push   %esp
add    %cl,0x53(%edx)
push   %esp
add    %al,0x53(%edi)
push   %esp
add    %cl,0x5a(%esi)
push   %ebx
push   %esp
add    %cl,0x5a(%esi)
inc    %esp
push   %esp
add    %dl,0x54(%ebp)
add    %dl,0x54(%ebp)
inc    %ebx
add    %bl,0x45(%ecx)
push   %ebx
push   %esp
inc    %ebp
push   %edx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x44(%edi,%ecx,2)
inc    %ecx
pop    %ecx
add    %cl,0x4f(%esi)
push   %edi
add    %cl,0x53(%ecx,%eax,2)
push   %esp
add    %dl,0x49(%eax,%ecx,2)
push   %ebx
add    %cl,0x45(%esi)
pop    %eax
push   %esp
add    %al,0x49(%esi)
push   %edx
push   %ebx
push   %esp
add    %dl,0x49(%eax,%ecx,2)
push   %edx
inc    %esp
add    %al,0x4f(%esi)
push   %ebp
push   %edx
push   %esp
dec    %eax
add    %al,0x49(%esi)
inc    %esi
push   %esp
dec    %eax
add    %dl,0x49(%ebx)
pop    %eax
push   %esp
dec    %eax
add    %dl,0x45(%ebx)
push   %esi
inc    %ebp
dec    %esi
push   %esp
dec    %eax
add    %al,0x49(%ebp)
inc    %edi
dec    %eax
push   %esp
dec    %eax
add    %cl,0x49(%esi)
dec    %esi
push   %esp
dec    %eax
add    %dl,0x4e(%ebp,%eax,2)
push   %esp
dec    %eax
add    %al,0x4c(%ebp)
inc    %ebp
push   %esi
inc    %ebp
dec    %esi
push   %esp
dec    %eax
add    %dl,0x45(%edi,%edx,2)
dec    %esp
inc    %esi
push   %esp
dec    %eax
add    %al,0x47(%ecx)
dec    %edi
add    %cl,0x45(%eax)
dec    %esi
inc    %ebx
inc    %ebp
add    %cl,0x4f(%ebp)
dec    %esi
push   %esp
dec    %eax
add    %al,0x4f(%esi)
push   %edx
push   %esp
dec    %esi
dec    %ecx
inc    %edi
dec    %eax
push   %esp
add    %dl,0x45(%edi)
inc    %ebp
dec    %ebx
add    %cl,0x4f(%eax)
push   %ebp
push   %edx
add    %cl,0x49(%ebp)
dec    %esi
push   %ebp
push   %esp
inc    %ebp
add    %cl,0x49(%ebp)
dec    %esi
add    %dl,0x45(%ebx)
inc    %ebx
dec    %edi
dec    %esi
inc    %esp
add    %dl,0x45(%ebx)
inc    %ebx
add    %al,0x45(%esi)
inc    %edx
push   %edx
push   %ebp
inc    %ecx
push   %edx
pop    %ecx
add    %cl,0x41(%ebp)
push   %edx
inc    %ebx
dec    %eax
add    %al,0x50(%ecx)
push   %edx
dec    %ecx
dec    %esp
add    %cl,0x41(%ebp)
pop    %ecx
add    %cl,0x55(%edx)
dec    %esi
inc    %ebp
add    %cl,0x55(%edx)
dec    %esp
pop    %ecx
add    %al,0x55(%ecx)
inc    %edi
push   %ebp
push   %ebx
push   %esp
add    %dl,0x45(%ebx)
push   %eax
push   %esp
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %dl,0x45(%ebx)
push   %eax
push   %esp
add    %cl,0x43(%edi)
push   %esp
dec    %edi
inc    %edx
inc    %ebp
push   %edx
add    %cl,0x4f(%esi)
push   %esi
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %al,0x43(%ebp,%eax,2)
inc    %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
add    %dl,0x55(%ebx)
dec    %esi
inc    %esp
inc    %ecx
pop    %ecx
add    %cl,0x4f(%ebp)
dec    %esi
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%ebp,%edx,2)
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%ebp,%edx,2)
push   %ebx
add    %dl,0x45(%edi)
inc    %esp
dec    %esi
inc    %ebp
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x45(%edi)
inc    %esp
dec    %esi
inc    %ebp
push   %ebx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
push   %ebx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
add    %dl,0x55(%eax,%ecx,2)
push   %edx
push   %ebx
add    %al,0x52(%esi)
dec    %ecx
inc    %esp
inc    %ecx
pop    %ecx
add    %dl,0x41(%ebx)
push   %esp
push   %ebp
push   %edx
inc    %esp
inc    %ecx
pop    %ecx
add    %al,0x2e(%ecx)
dec    %ebp
add    %dl,%cs:0x4d(%eax)
add    %dl,0x2e(%eax)
dec    %ebp
add    %al,%cs:(%eax)
add    %dl,%bl
mov    $0xaeb80804,%eax
add    $0x8,%al
mov    $0xc20804ae,%eax
mov    $0xb8b50804,%eax
add    $0x8,%al
test   $0xb8,%al
add    $0x8,%al
fwait
mov    $0xb88e0804,%eax
add    $0x8,%al
cmpl   $0xaeb80804,-0x5147f7fc(%eax)
ae
add    $0x8,%al
mov    $0xb80804ae,%eax
scas   %es:(%edi),%al
add    $0x8,%al
mov    $0x540804ae,%eax
mov    $0xb3c70804,%eax
add    $0x8,%al
jl     8051655 <_IO_stdin_used+0xc71>
add    $0x8,%al
mov    $0x9e0804ae,%eax
mov    $0x4,%ah
or     %dh,-0x4c(%eax)
add    $0x8,%al
das
mov    $0x4,%ah
or     %bh,-0x47f7fb52(%eax)
scas   %es:(%edi),%al
add    $0x8,%al
divl   -0x498cf7fc(%ebx)
add    $0x8,%al
dec    %esi
mov    $0x4,%dh
or     %bl,%ch
mov    $0x4,%ah
or     %cl,%ch
mov    $0x4,%ah
or     %cl,%al
mov    $0xb9760804,%ecx
add    $0x8,%al
cmp    -0x46ddf7fc(%ecx),%edi
add    $0x8,%al
or     %bh,-0x4710f7fc(%ecx)
add    $0x8,%al
xorl   $0x4,-0x47cdf7fc(%edi)
or     %bl,(%edx)
mov    $0xb7770804,%eax
add    $0x8,%al
inc    %eax
mov    $0x4,%bh
or     %ch,(%edx)
mov    $0x4,%bh
or     %al,(%ecx)
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%dh
or     %dl,%dl
mov    $0x4,%dh
or     %bh,-0x6ff7fb4a(%edx)
mov    $0x4,%dh
or     %bh,-0x5df7fb52(%eax)
mov    $0x4,%ch
or     %bh,(%esi)
mov    $0x4,%ch
or     %dl,%dl
mov    $0x4,%cl
or     %dl,%dl
mov    $0x4,%cl
or     %al,0x1b0804b5(%esi)
mov    $0x4,%dl
or     %bl,0x480804b7(%ebp)
mov    $0xb3200804,%eax
add    $0x8,%al
jecxz  80516f5 <_IO_stdin_used+0xd11>
add    $0x8,%al
aam    $0xb7
add    $0x8,%al
push   %ebp
mov    $0x4,%dl
or     %bl,-0x4d(%edx)
add    $0x8,%al
xor    -0x4d6bf7fc(%ebp),%dh
add    $0x8,%al
sti
mov    $0x4,%ah
or     %ch,%bh
mov    $0x4,%ah
or     %ah,%dh
mov    $0x4,%dl
or     %dh,%dl
mov    $0x4,%ch
or     %ah,%dh
mov    $0x4,%ch
or     %al,0x650804ae(%eax)
mov    $0x4,%bl
or     %ah,-0x4d(%ebp)
add    $0x8,%al
(bad)
mov    $0x4,%ch
or     %bh,0x1b0804ae(%eax)
mov    $0x4,%dl
or     %ah,(%eax)
mov    $0x4,%bl
or     %dl,-0x4e(%ebp)
add    $0x8,%al
xchg   %eax,%esp
mov    $0x4,%dl
or     %ah,%dh
mov    $0x4,%dl
or     %al,0x5a0804ae(%eax)
mov    $0x4,%bl
or     %bh,-0x47f7fb52(%eax)
scas   %es:(%edi),%al
add    $0x8,%al
mov    $0xce0804ae,%eax
mov    $0x4,%dl
or     %bh,-0x31f7fb52(%eax)
mov    $0x4,%dl
or     %ch,(%ecx)
mov    $0x4,%dh
or     %dh,0x3b0804b1(%ecx)
mov    $0xb5920804,%eax
add    $0x8,%al
das
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %al,%ah
(bad)
(bad)
pushl  (%ecx)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %cl,-0x5b000001(%eax)
adc    $0x1110805,%eax
add    %al,(%eax)
dec    %esp
(bad)
(bad)
jmp    *0x11080515(%eax)
add    %eax,(%eax)
add    %dl,(%eax)
(bad)
(bad)
pushl  0x5(%ebp,%edx,1)
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dl,%ah
(bad)
(bad)
pushl  (%ebx)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bl,0x35fffffe(%eax)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bl,-0x1(%esi,%edi,8)
pushl  0x11080515(%ebx)
add    %eax,(%eax)
add    %ah,(%eax)
(bad)
(bad)
decl   0x29(%ebp)
add    $0x11108,%eax
add    %ah,%ah
std
(bad)
decl   0x11080515(%ecx)
add    %eax,(%eax)
add    %ch,-0x46000003(%eax)
adc    $0x1110805,%eax
add    %al,(%eax)
insb   (%dx),%es:(%edi)
std
(bad)
(bad)
(bad)
adc    0x11108,%eax
add    %dh,(%eax)
std
(bad)
lcall  *0x11080515(%ecx)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
adc    $0x1110805,%eax
add    %al,(%eax)
js     8051866 <_IO_stdin_used+0xe82>
add    %al,(%eax)
aaa
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dh,0x14390000(%eax,%eax,1)
add    $0x11108,%eax
add    %dh,%al
add    %al,(%eax)
add    %cl,(%ebx)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ch,(%ecx,%eax,1)
add    %al,(%eax)
and    (%esi),%edx
add    $0x11108,%eax
add    %ch,0x1(%eax)
add    %al,(%eax)
lret   $0x514
or     %dl,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%ebx)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %bh,0x11080514
add    %eax,(%eax)
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
adc    %dl,0x1110805
add    %al,(%eax)
pop    %eax
add    (%eax),%al
add    %bh,(%edi)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dl,0x163e0000(%edx,%eax,1)
add    $0x11108,%eax
add    %dl,%al
add    (%eax),%al
add    %dh,0x11080514(%ebx)
add    %eax,(%eax)
add    %bh,%cl
adc    0x11108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x14(%ecx)
add    $0x10c08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x14(%esi)
add    $0x10c08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x14(%edx)
add    $0x11108,%eax
add    %cl,-0x1(%edi,%edi,8)
decl   0x14(%esi)
add    $0x11108,%eax
add    %cl,-0x1(%edi,%edi,8)
call   *0x14(%edx)
add    $0x10c08,%eax
add    %cl,-0x1(%edi,%edi,8)
call   *0x14(%edi)
add    $0x11108,%eax
add    %ch,(%esi)
(bad)
(bad)
lcall  *0x14(%ebx)
add    $0x10c08,%eax
add    %ch,(%esi)
(bad)
(bad)
call   *0x11080514(%ebx)
add    %eax,(%eax)
add    %dl,(%eax)
(bad)
(bad)
lcall  *0xc080514(%eax)
add    %eax,(%eax)
add    %dl,(%eax)
(bad)
(bad)
lcall  *0x14(%edi)
add    $0x11108,%eax
add    %dl,(%eax)
(bad)
(bad)
jmp    *0x14(%ebx)
add    $0x10c08,%eax
add    %dl,(%eax)
(bad)
(bad)
ljmp   *0x11080514(%ecx)
add    %eax,(%eax)
add    %dl,%ah
(bad)
(bad)
ljmp   *0x14(%eax)
add    $0x10c08,%eax
add    %dl,%ah
(bad)
(bad)
ljmp   *0x5(%esp,%edx,1)
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bl,0x70fffffe(%eax)
adc    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
cwtl
(bad)
(bad)
pushl  0x5(%esp,%edx,1)
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bl,-0x1(%esi,%edi,8)
(bad)
js     80519e2 <_IO_stdin_used+0xffe>
add    $0x10c08,%eax
add    %bl,-0x1(%esi,%edi,8)
(bad)
jl     80519ee <_IO_stdin_used+0x100a>
add    $0x11108,%eax
add    %ah,(%eax)
(bad)
(bad)
incl   0xc080514(%eax)
add    %eax,(%eax)
add    %ah,(%eax)
(bad)
(bad)
incl   0x1110805(%esp,%edx,1)
add    %al,(%eax)
in     $0xfd,%al
(bad)
decl   0xc080514(%ecx)
add    %eax,(%eax)
add    %ah,%ah
std
(bad)
decl   0x11080514(%esi)
add    %eax,(%eax)
add    %ch,-0x6d000003(%eax)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %ch,-0x68000003(%eax)
adc    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
test   $0xfd,%al
(bad)
lcall  *0x1110805(%esp,%edx,1)
add    %al,(%eax)
xor    %bh,%ch
(bad)
jmp    *0x11080514(%eax)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
test   $0x14,%al
add    $0x10c08,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
lods   %ds:(%esi),%eax
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x14,%cl
add    $0x11108,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x14,%ch
add    $0x10c08,%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xc080514,%edx
add    %eax,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x11080514,%edi
add    %eax,(%eax)
add    %bh,0x0(%eax)
add    %al,(%eax)
ret
adc    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
js     8051aa2 <_IO_stdin_used+0x10be>
add    %al,(%eax)
enter  $0x514,$0x8
adc    %eax,(%ecx)
add    %al,(%eax)
js     8051aae <_IO_stdin_used+0x10ca>
add    %al,(%eax)
int3
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %bh,0x0(%eax)
add    %al,(%eax)
rcll   0x11108(,%eax,1)
add    %dh,0x14d50000(%eax,%eax,1)
add    $0x11108,%eax
add    %dh,0x14d90000(%eax,%eax,1)
add    $0x10c08,%eax
add    %dh,0x14dd0000(%eax,%eax,1)
add    $0x11108,%eax
add    %cl,0x1(%edx)
add    %al,(%eax)
loope  8051b02 <_IO_stdin_used+0x111e>
add    $0x11108,%eax
add    %ah,%al
add    %eax,(%eax)
add    %al,0x11080514(%ebp)
add    %eax,(%eax)
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
in     $0x14,%eax
add    $0x11108,%eax
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
jmp    190d2029 <optarg+0x1107be05>
add    %eax,(%eax)
add    %bl,0x2(%eax)
add    %al,(%eax)
in     (%dx),%eax
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %dl,%al
add    (%eax),%al
add    %dh,%dl
adc    $0x5,%al
or     %cl,(%ecx,%eax,1)
add    %al,(%eax)
rolb   (%edx)
add    %al,(%eax)
cmc
adc    0x11108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,%bh
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%dl
adc    $0x5,%al
or     %dl,(%ecx)
add    %eax,(%eax)
add    %cl,0xa080514
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %bh,%dh
adc    $0x5,%al
or     %cl,(%edx)
add    %eax,(%eax)
add    %bh,%bh
(bad)
(bad)
decl   (%eax)
adc    $0x10a0805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %cs
adc    $0x10a0805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x1100805,%dl
add    %al,(%eax)
(bad)
(bad)
(bad)
call   *(%edi)
adc    $0x1100805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x15,%al
add    $0x11008,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,(%ecx)
adc    $0x1100805,%eax
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
daa
adc    $0x1100805,%eax
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
sub    $0x10080515,%eax
add    %eax,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
xor    $0x15,%al
add    $0x11008,%eax
add    %al,0x3a000000
adc    $0x1100805,%eax
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,0x15(%eax)
add    $0x11008,%eax
add    %al,(%edi)
add    %al,(%eax)
add    %cl,0x15(%eax)
add    $0x11008,%eax
add    %cl,(%eax)
add    %al,(%eax)
add    %cl,0x15(%edi)
add    $0x11008,%eax
add    %cl,(%ecx)
add    %al,(%eax)
add    %dl,0x15(%ebp)
add    $0x11008,%eax
add    %cl,(%edx)
add    %al,(%eax)
add    %bl,0x15(%ebx)
add    $0x11008,%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %ah,0x5(%ebp,%edx,1)
or     %dl,(%eax)
add    %eax,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
adc    $0x1020805,%eax
add    %al,(%eax)
(bad)
(bad)
(bad)
pushl  0x15(%eax)
add    $0x10208,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %cl,(%eax)
adc    $0x5,%al
or     %al,(%ecx,%eax,1)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
jbe    8051ca3 <_IO_stdin_used+0x12bf>
add    $0x10508,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %bh,0x5(%ebp,%edx,1)
or     %cl,(%ecx)
add    %eax,(%eax)
add    %cl,(%esi)
add    %al,(%eax)
add    %al,0x9080515(%esi)
add    %eax,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %bh,(%esi,%edx,1)
add    $0x10908,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %cl,0x6080515(%ebx)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,0x7080515(%eax)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,0x7080515(%edi)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %bl,0x8080515(%ebx)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,0x8080515(%edx)
add    %eax,(%eax)
add    %al,(%ecx)
adc    $0x5,%al
or     %cl,(%edi)
add    %eax,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,0xf080515(%esi)
add    %eax,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %ch,0xf080515(%edi)
add    %eax,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %dh,0xf080515(%ebp)
add    %eax,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xf080515,%ebx
add    %eax,(%eax)
add    %al,0xbf000000
adc    $0x10f0805,%eax
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,%ah
adc    $0x10f0805,%eax
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %cl,%cl
adc    $0x10f0805,%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
rclb   0x10f0805
add    %al,(%eax)
or     %eax,(%eax)
add    %al,(%eax)
ficoml 0x10f0805
add    %al,(%eax)
or     %eax,(%eax)
add    %al,(%eax)
fist   0x10f0805
add    %al,(%eax)
or     (%eax),%al
add    %al,(%eax)
out    %eax,$0x15
add    $0x10f08,%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dh,%al
adc    $0x10f0805,%eax
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
stc
adc    $0x10b0805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%esi)
add    $0x10b08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edi)
push   %ss
add    $0x10b08,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
push   %ss
add    $0x10b08,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %dl,(%esi,%edx,1)
add    $0x10b08,%eax
add    %al,(%ebx)
add    %al,(%eax)
add    %bl,(%esi)
push   %ss
add    $0x10b08,%eax
add    %al,(%ebx)
add    %al,(%eax)
add    %ah,0xb080516
add    %eax,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cs
push   %ss
add    $0x10b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
xor    (%esi),%edx
add    $0x10b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmp    %edx,(%esi)
add    $0x10b08,%eax
add    %al,0x40000000
push   %ss
add    $0x10b08,%eax
add    %al,(%esi)
add    %al,(%eax)
add    %dl,(%esi)
adc    $0x5,%al
or     %al,(%ebx)
add    %eax,(%eax)
add    %bh,%ch
adc    0x10e08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x16(%ecx)
add    $0x10e08,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x16(%esi)
add    $0x10e08,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,0x16(%ecx)
add    $0x10e08,%eax
add    %al,(%ecx)
add    (%ecx),%al
add    %eax,(%edx)
add    %al,(%edx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    (%edx),%eax
add    $0x6,%al
add    %eax,(%edx)
add    $0x6,%al
add    %al,(%ecx)
add    (%ecx),%al
add    (%ecx),%al
add    %eax,(%edx)
add    (%ebx),%al
add    %eax,(%edx)
add    %eax,(%edx)
add    (%edx),%al
add    0x4020303,%eax
add    (%ebx),%al
add    %eax,(%ebx)
add    (%ecx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    %eax,(%edx)
add    (%ecx),%al
add    (%edx),%al
add    (%edx),%al
add    %eax,(%ecx)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    %eax,(%ecx)
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x1d,%al
sbb    $0x201f1f1e,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %esp,(%edx)
and    (%ebx),%esp
and    (%ebx),%esp
and    $0x24,%al
and    $0x25,%al
and    $0x28272726,%eax
sub    %ch,(%eax)
sub    %ch,(%eax)
sub    %ch,(%eax)
sub    %ebp,(%ecx)
sub    %ebp,(%ecx)
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%edx),%ch
sub    (%ebx),%ch
sub    $0x2c,%al
sub    $0x2d,%al
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
sub    $0x2d2d2d2d,%eax
cs
cs
cs
cs
cs
cs
das
xor    %dh,(%eax)
xor    %esi,(%ecx)
xor    (%edx),%dh
xor    0x35(,%esi,1),%esi
add    %bl,(%ebx)
add    $0x9080706,%eax
or     (%esp,%ecx,1),%al
pcmpgtd (%edi),%mm1
adc    %dl,(%ebx)
movlps %xmm2,(%ebx)
adc    $0x13,%al
sbb    %esi,0x19(%eax)
adc    (%ebx),%ebx
add    $0x9080706,%eax
or     0x9080706,%al
or     (%ebx),%dl
adc    (%ebx),%edx
imul   $0x14,(%ebx),%edx
sbb    %ebx,(%ecx)
sbb    %esi,0x13(%ecx)
adc    $0x15,%al
push   %ss
sbb    %eax,0x9080706
or     (%ebx),%cl
or     $0xd,%al
push   %cs
pop    %ss
adc    %dl,(%ecx)
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
pusha
sbb    %al,0x9080706
or     (%eax),%al
or     $0x5,%al
push   %es
pop    %es
or     %cl,(%ecx)
or     (%ecx),%bl
add    $0x1b,%al
sbb    (%esi,%ebx,1),%dl
push   %ss
or     %ecx,(%ecx)
adc    (%eax),%ebx
add    (%ebx),%edx
sbb    (%esp,%edx,1),%dl
adc    $0x3b,%al
sbb    0x14(%esp,%edx,1),%edx
call   *(%esp,%edx,1)
adc    %edi,%edi
sbb    %eax,(%eax)
add    %al,(%eax)
dec    %edi
inc    %ebx
inc    %esp
inc    %ebp
inc    %esi
inc    %edi
dec    %eax
cmp    0x64(%ecx),%cl
imul   $0x65,0x4b(%edx),%ecx
outsb  %ds:(%esi),(%dx)
dec    %esp
xor    %esi,(%edx)
gs
data16
jno    8052043 <_IO_stdin_used+0x165f>
cmp    0x3d(%esi),%ecx
ds
aas
inc    %eax
inc    %ecx
inc    %edx
cmp    $0x41403f3e,%eax
inc    %edx
gs
gs
pop    %esp
outsl  %ds:(%esi),(%dx)
pop    %edx
pop    %ebx
push   $0x70
pop    %eax
outsl  %ds:(%esi),(%dx)
add    $0x58080706,%eax
or     $0x11100f0e,%eax
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
add    %edx,(%edi)
sbb    %bl,(%ecx)
sbb    (%ebx),%bl
sbb    $0x1d,%al
dec    %edi
push   %ds
xor    0xc383736(,%esi,1),%esi
cmp    %edi,0x41403f3e
inc    %edx
cmp    $0x30,%al
push   %eax
das
push   %es
push   %ebx
or     %dl,0x52(%ecx)
sbb    0x56(%ebp,%edx,2),%dl
push   %edi
pop    %esi
pop    %edi
pusha
pop    %ecx
imul   $0x6d6c0063,0x62(%ecx),%esp
add    %bl,%gs:-0x1(%eax)
add    (%ebx),%al
add    $0x1f,%al
and    %ah,(%ecx)
and    (%ebx),%ah
addr16 push $0x27262524
sub    %ch,(%ecx)
sub    (%ebx),%ch
sub    $0x9,%al
or     (%ebx),%cl
sub    $0xa3a35d2e,%eax
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3e5bc14
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a33c
movsb  %ds:(%esi),%es:(%edi)
mov    %eax,0x2ba3
add    %al,0x3020000
push   %ebp
push   %edi
push   %esp
push   %esi
add    $0x52,%al
push   %ebx
add    %edi,(%eax)
cmp    0x44(%ecx),%eax
dec    %ecx
ds
push   %ecx
and    $0x1c23,%eax
push   %ds
add    %bl,0x0(%eax)
add    %bl,(%edi)
push   %es
pop    %es
adc    %cl,(%eax)
adc    $0xb0c0a09,%eax
xor    %ecx,0xe354a34
(bad)
sbb    $0x39362d00,%eax
aas
inc    %edx
inc    %ebp
cmp    $0x27,%al
and    $0x5a,%al
and    %cl,0x4c(%ebx)
dec    %esi
dec    %edi
push   %eax
dec    %ebp
aaa
cmp    0x43(%eax),%al
inc    %esi
cmp    $0x5a2f1228,%eax
add    %al,(%eax)
push   %ss
pop    %ecx
inc    %edi
dec    %eax
and    %eax,(%eax)
xor    (%eax,%eax,1),%ebp
add    %ah,(%edx)
sub    (%eax),%esi
xor    (%ebx),%bl
sbb    %ebp,(%ecx)
add    %dl,(%ecx)
cs
pop    %ebx
adc    0x0(%edx),%ebx
pop    %ss
sbb    (%eax),%al
add    %bl,(%ecx)
sub    (%ecx),%bl
adc    $0x18,%al
add    %bl,(%ecx)
add    %al,(%eax)
sbb    %es:-0x5d(%ebp),%ecx
mov    %eax,%cs:0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,%ds:0x342fd52
dec    %edx
cld
push   %ebx
push   %esp
dec    %ebx
mov    %eax,0xa3a3a3a3
mov    %eax,0x47a3a3a3
mov    %eax,0xa3a3a35d
mov    %eax,0x484ea3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa319a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0xa3a3a3a3
mov    %eax,0x15a3a3a3
adc    0x50(%edi),%ecx
mov    %eax,0xa3a3a3a3
push   %ecx
mov    %eax,0xa35655a3
mov    %eax,0xfaa3a3a3
dec    %esp
adc    %esp,0x57a3a3a3(%ebx)
inc    %ebp
mov    %eax,0xff5958a3
mov    %eax,0x45a3a312
pop    %ebx
add    %al,(%eax)
add    %al,(%edx)
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
sbb    (%edx),%al
add    (%ebx),%bl
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
sbb    %eax,(%edx)
add    (%edx),%al
add    (%edx),%al
pop    %ss
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%eax),%bl
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%edx),%al
add    (%ecx),%al
add    (%ebx),%al
add    $0x5,%al
push   %es
pop    %es
or     %cl,(%ecx)
or     (%ebx),%cl
or     $0xd,%al
push   %cs
movups (%ecx),%xmm2
adc    (%ebx),%dl
adc    $0x15,%al
push   %ss
pop    %edi
push   %eax
dec    %edi
push   %ebx
dec    %ecx
pop    %eax
xor    0x56(%edi),%bl
inc    %ebp
push   %edx
push   %ebx
dec    %ecx
dec    %edi
dec    %esi
add    %al,(%eax)
add    %al,0x20(%ecx)
dec    %esi
push   %ebp
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 805232f <_IO_stdin_used+0x194b>
xor    %bl,0x20(%ebp)
ja     805233a <_IO_stdin_used+0x1956>
jae    80522fb <_IO_stdin_used+0x1917>
jo     805233e <_IO_stdin_used+0x195a>
jae    8052352 <_IO_stdin_used+0x196e>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    805234f <_IO_stdin_used+0x196b>
push   $0x206e6120
gs
js     8052355 <_IO_stdin_used+0x1971>
arpl   %sp,(%eax)
jae    805236d <_IO_stdin_used+0x1989>
jae    805236a <_IO_stdin_used+0x1986>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x7a100af(%ecx)
gs
add    %ah,%dl
sbbb   $0x69,0x6c006000(%eax)
je     8052386 <_IO_stdin_used+0x19a2>
jb     8052384 <_IO_stdin_used+0x19a0>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    80523aa <_IO_stdin_used+0x19c6>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    80523a0 <_IO_stdin_used+0x19bc>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
cmp    %dl,%cl
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
dec    %eax
xlat   %ds:(%ebx)
add    $0x8,%al
or     %dl,%dh
add    $0x8,%al
dec    %eax
(bad)
add    $0x8,%al
js     805234c <_IO_stdin_used+0x1968>
add    $0x8,%al
mov    0xa00804d6,%al
(bad)
add    $0x8,%al
mov    0x400804d6,%al
aam    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,(%eax)
aad    $0x4
or     %bh,0x180804d4(%eax)
aam    $0x4
or     %bh,(%eax)
aam    $0x4
or     %dh,(%eax)
aam    $0x4
or     %ch,(%eax)
aam    $0x4
or     %ah,(%eax)
aam    $0x4
or     %dh,%al
roll   %cl,(%eax,%ecx,1)
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
imul   $0xd3690804,%ebx,%edx
add    $0x8,%al
imul   $0xd3610804,%ebx,%edx
add    $0x8,%al
imul   $0xd2d80804,%ebx,%edx
add    $0x8,%al
imul   $0xd4e80804,%ebx,%edx
add    $0x8,%al
imul   $0xd3690804,%ebx,%edx
add    $0x8,%al
imul   $0xd2d80804,%ebx,%edx
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
imul   $0xd3690804,%ebx,%edx
add    $0x8,%al
imul   $0xd3690804,%ebx,%edx
add    $0x8,%al
sub    %dl,%dl
add    $0x8,%al
cmp    %dl,%ch
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
imul   $0xd4c80804,%ebx,%edx
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
imul   $0xd2d80804,%ebx,%edx
add    $0x8,%al
imul   $0xd2d80804,%ebx,%edx
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
fcom   %st(2)
add    $0x8,%al
inc    %eax
roll   %cl,(%eax,%ecx,1)
imul   $0xd3400804,%ebx,%edx
add    $0x8,%al
popa
roll   %cl,(%eax,%ecx,1)
pusha
flds   (%eax,%ecx,1)
pusha
flds   (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
pusha
flds   (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
pusha
flds   (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
clc
fadds  (%eax,%ecx,1)
pusha
flds   (%eax,%ecx,1)
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %bl,0x25080523
and    0x5232b08,%eax
or     %al,(%eax)
sub    0x5233808,%al
or     %al,0x23(%eax)
add    $0x50a5d08,%eax
or     %al,0x23(%edi)
add    $0x8,%eax
add    %ah,0x25282073
jae    8052694 <_IO_stdin_used+0x1cb0>
and    %ah,0x25000a73
jae    8052693 <_IO_stdin_used+0x1caf>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     80526e7 <_IO_stdin_used+0x1d03>
je     80526f4 <_IO_stdin_used+0x1d10>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     80526f7 <_IO_stdin_used+0x1d13>
je     8052704 <_IO_stdin_used+0x1d20>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     805270e <_IO_stdin_used+0x1d2a>
je     805271b <_IO_stdin_used+0x1d37>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80526e0 <_IO_stdin_used+0x1cfc>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8052732 <_IO_stdin_used+0x1d4e>
jb     8052739 <_IO_stdin_used+0x1d55>
and    %ah,0x75(%edx)
addr16 jae 80526eb <_IO_stdin_used+0x1d07>
je     805273c <_IO_stdin_used+0x1d58>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8052741 <_IO_stdin_used+0x1d5d>
and    %al,0x50(%edi)
dec    %esp
jbe    8052715 <_IO_stdin_used+0x1d31>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8052764 <_IO_stdin_used+0x1d80>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     805271a <_IO_stdin_used+0x1d36>
insb   (%dx),%es:(%edi)
popa
je     8052763 <_IO_stdin_used+0x1d7f>
jb     8052720 <_IO_stdin_used+0x1d3c>
cmp    $0x68,%al
je     8052778 <_IO_stdin_used+0x1d94>
jo     8052740 <_IO_stdin_used+0x1d5c>
das
das
outsb  %ds:(%si),(%dx)
jne    805273a <_IO_stdin_used+0x1d56>
outsl  %ds:(%esi),(%dx)
jb     8052776 <_IO_stdin_used+0x1d92>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8052788 <_IO_stdin_used+0x1da4>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8052749 <_IO_stdin_used+0x1d65>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     80527ad <_IO_stdin_used+0x1dc9>
popa
jb     805279e <_IO_stdin_used+0x1dba>
cmp    (%eax),%ah
jns    80527ac <_IO_stdin_used+0x1dc8>
jne    805275f <_IO_stdin_used+0x1d7b>
popa
jb     80527a7 <_IO_stdin_used+0x1dc3>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     80527c7 <_IO_stdin_used+0x1de3>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     80527d1 <_IO_stdin_used+0x1ded>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     80527ee <_IO_stdin_used+0x1e0a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     80527ed <_IO_stdin_used+0x1e09>
outsb  %ds:(%esi),(%dx)
je     80527ab <_IO_stdin_used+0x1dc7>
jo     80527f2 <_IO_stdin_used+0x1e0e>
jb     80527fc <_IO_stdin_used+0x1e18>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805280c <_IO_stdin_used+0x1e28>
je     8052819 <_IO_stdin_used+0x1e35>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80527de <_IO_stdin_used+0x1dfa>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805282c <_IO_stdin_used+0x1e48>
je     8052839 <_IO_stdin_used+0x1e55>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80527fe <_IO_stdin_used+0x1e1a>
and    %ah,0x250a2c73
jae    8052806 <_IO_stdin_used+0x1e22>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052850 <_IO_stdin_used+0x1e6c>
je     805285d <_IO_stdin_used+0x1e79>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052822 <_IO_stdin_used+0x1e3e>
and    %ah,0x250a2c73
jae    805282a <_IO_stdin_used+0x1e46>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052878 <_IO_stdin_used+0x1e94>
je     8052885 <_IO_stdin_used+0x1ea1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805284a <_IO_stdin_used+0x1e66>
and    %ah,0x250a2c73
jae    8052852 <_IO_stdin_used+0x1e6e>
and    %ah,0x25202c73
jae    805285a <_IO_stdin_used+0x1e76>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528a4 <_IO_stdin_used+0x1ec0>
je     80528b1 <_IO_stdin_used+0x1ecd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052876 <_IO_stdin_used+0x1e92>
and    %ah,0x250a2c73
jae    805287e <_IO_stdin_used+0x1e9a>
and    %ah,0x25202c73
jae    8052886 <_IO_stdin_used+0x1ea2>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528d4 <_IO_stdin_used+0x1ef0>
je     80528e1 <_IO_stdin_used+0x1efd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528a6 <_IO_stdin_used+0x1ec2>
and    %ah,0x250a2c73
jae    80528ae <_IO_stdin_used+0x1eca>
and    %ah,0x25202c73
jae    80528b6 <_IO_stdin_used+0x1ed2>
and    %ah,0x250a2c73
jae    80528be <_IO_stdin_used+0x1eda>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052908 <_IO_stdin_used+0x1f24>
je     8052915 <_IO_stdin_used+0x1f31>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528da <_IO_stdin_used+0x1ef6>
and    %ah,0x250a2c73
jae    80528e2 <_IO_stdin_used+0x1efe>
and    %ah,0x25202c73
jae    80528ea <_IO_stdin_used+0x1f06>
and    %ah,0x250a2c73
jae    80528f2 <_IO_stdin_used+0x1f0e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
xor    %ah,%dh
add    $0x8,%al
cmp    %ah,%dh
add    $0x8,%al
js     80528c8 <_IO_stdin_used+0x1ee4>
add    $0x8,%al
shl    $0x4,%dh
or     %bl,(%eax)
out    %eax,$0x4
or     %dh,-0x19(%eax)
add    $0x8,%al
fsub   %st(7),%st
add    $0x8,%al
push   %eax
call   ecf530fe <optarg+0xe4efceda>
add    $0x8,%al
mov    %ah,%ch
add    $0x8,%al
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     805297d <_IO_stdin_used+0x1f99>
jb     805296f <_IO_stdin_used+0x1f8b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8052991 <_IO_stdin_used+0x1fad>
popa
jb     8052982 <_IO_stdin_used+0x1f9e>
and    %al,0x6f(%esi)
jne    8052990 <_IO_stdin_used+0x1fac>
fs
popa
je     805298f <_IO_stdin_used+0x1fab>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80529ae <_IO_stdin_used+0x1fca>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    80529b6 <_IO_stdin_used+0x1fd2>
jb     8052974 <_IO_stdin_used+0x1f90>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %al,(%eax)
add    %dh,0x6e(%ebp)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
je     80529e4 <_IO_stdin_used+0x2000>
and    %dh,0x65(%edx)
arpl   %bp,0x72(%edi)
and    %ah,%fs:0x75(%ebx)
jb     80529f3 <_IO_stdin_used+0x200f>
outsb  %gs:(%esi),(%dx)
je     80529a5 <_IO_stdin_used+0x1fc1>
ja     80529f6 <_IO_stdin_used+0x2012>
jb     80529f4 <_IO_stdin_used+0x2010>
imul   $0x72696420,0x67(%esi),%ebp
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8052997 <_IO_stdin_used+0x1fb3>
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jb     8052a09 <_IO_stdin_used+0x2025>
je     8052a1b <_IO_stdin_used+0x2037>
jb     8052a16 <_IO_stdin_used+0x2032>
and    %dh,0x20(%edi,%ebp,2)
imul   $0x6c616974,0x69(%esi),%ebp
and    %dh,0x6f(%edi)
jb     8052a23 <_IO_stdin_used+0x203f>
imul   $0x72696420,0x67(%esi),%ebp
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80529c6 <_IO_stdin_used+0x1fe2>
add    %al,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6d697475,0x2f(%edx),%esp
outsb  %gs:(%esi),(%dx)
jae    8052a02 <_IO_stdin_used+0x201e>
arpl   %ax,(%eax)
je     8052a41 <_IO_stdin_used+0x205d>
insl   (%dx),%es:(%edi)
gs
jae    8052a4c <_IO_stdin_used+0x2068>
arpl   %ax,%gs:(%eax)
jbe    8052a42 <_IO_stdin_used+0x205e>
insb   (%dx),%es:(%edi)
imul   $0x69745f65,0x74(%ecx,%eiz,2),%esp
insl   (%dx),%es:(%edi)
gs
jae    8052a5e <_IO_stdin_used+0x207a>
arpl   %ax,%gs:(%eax)
insb   (%dx),%es:(%edi)
imul   $0x69646863,0x2f(%edx),%esp
jb     8052a28 <_IO_stdin_used+0x2044>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %ax,%cs:(%bx,%si)
and    %esp,(%eax)
arpl   %bp,0x73(%edi,%ebp,2)
gs
pop    %edi
popaw
imul   $0x6c203c20,0x30(%eax,%eax,1),%ebp
outsb  %gs:(%esi),(%dx)
add    %dh,(%eax,%esi,1)
cmp    %esi,(%esi)
and    %bh,0x6e656c20(,%edi,1)
add    %ch,(%edx)
imul   $0x27203d21,%fs:0x20(%edx),%esi
das
daa
add    %ah,0x72(%ecx,%ebp,2)
and    %bh,0x72696420(,%edi,1)
pop    %edi
outsb  %gs:(%esi),(%dx)
add    %dh,%fs:0x6c(%ebx)
popa
jae    8052aab <_IO_stdin_used+0x20c7>
and    %ch,0x72696420
and    %bh,(%eax,%eiz,1)
xor    $0x30,%al
cmp    %esi,(%esi)
add    %ah,0x64(%ebx)
bound  %ebx,0x66(%edi)
jb     8052abd <_IO_stdin_used+0x20d9>
add    %ah,%gs:0x68(%ebx)
imul   $0x676e6f6c,%fs:0x5f(%edx),%esi
add    %ch,(%edi)
jo     8052ada <_IO_stdin_used+0x20f6>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8052ad2 <_IO_stdin_used+0x20ee>
insb   (%dx),%es:(%edi)
data16
das
data16
add    %ch,%fs:(%esi)
cs
das
data16
add    %ch,%fs:(%edi)
jo     8052aee <_IO_stdin_used+0x210a>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8052ae6 <_IO_stdin_used+0x2102>
insb   (%dx),%es:(%edi)
data16
das
data16
fs
das
and    $0x73252f64,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
nop
add    (%eax),%eax
add    %dh,0x0(%ecx)
add    %al,(%eax)
lock
fs
(bad)
ljmp   *0x6a000000(%ebx,%eax,1)
(bad)
call   *(%esp,%eax,1)
add    %al,(%eax)
jo     8052b22 <_IO_stdin_used+0x213e>
(bad)
call   *%eax
add    (%eax),%eax
add    %ah,%al
je     8052ab6 <_IO_stdin_used+0x20d2>
push   %esp
add    (%eax),%eax
add    %al,0x78(%eax)
(bad)
(bad)
cmp    %al,(%eax,%eax,1)
add    %ah,0x78(%eax)
(bad)
call   *0x4(%eax)
add    %al,(%eax)
pusha
jns    8052ace <_IO_stdin_used+0x20ea>
ljmp   *0x4(%eax)
jp     8052ad6 <_IO_stdin_used+0x20f2>
(bad)
fadds  (%eax,%eax,1)
add    %ah,(%eax)
jnp    8052ade <_IO_stdin_used+0x20fa>
ljmp   *0x7b900000(,%eax,1)
(bad)
ljmp   *0x0(%ebp,%eax,1)
add    %ah,%al
jnp    8052aee <_IO_stdin_used+0x210a>
ljmp   *-0xffffffb(%eax)
jnp    8052af6 <_IO_stdin_used+0x2112>
(bad)
mov    $0x5,%esp
jl     8052afe <_IO_stdin_used+0x211a>
call   *%eax
add    $0x7cd00000,%eax
(bad)
(bad)
cld
add    $0x7d300000,%eax
(bad)
lcall  *(%esi,%eax,1)
add    %al,(%eax)
jo     8052b93 <_IO_stdin_used+0x21af>
(bad)
incl   0x6(%eax)
add    %al,(%eax)
loopne 8052b9b <_IO_stdin_used+0x21b7>
(bad)
call   *0x7e700000(%esi,%eax,1)
(bad)
(bad)
mov    $0xc0000006,%eax
jle    8052b2e <_IO_stdin_used+0x214a>
(bad)
faddl  (%esi)
add    %al,(%eax)
loopne 8052bb5 <_IO_stdin_used+0x21d1>
(bad)
pushl  (%edi,%eax,1)
add    %al,(%eax)
xor    %al,0x748ffff(%eax)
add    %al,(%eax)
nop
cmp    $0xff,%bh
insb   (%dx),%es:(%edi)
pop    %es
add    %al,(%eax)
lock cmp $0xff,%bh
movsb  %ds:(%esi),%es:(%edi)
pop    %es
add    %al,(%eax)
pusha
cmp    $0x7ccff,%edi
add    %dl,(%eax)
(bad)
(bad)
call   *(%eax,%ecx,1)
add    %al,(%eax)
xor    %dl,0x858ffff(%ebp)
add    %al,(%eax)
xor    %ah,0x89cffff(%eax)
add    %al,(%eax)
shlb   0x8e4ffff(%eax)
add    %al,(%eax)
add    %ah,0x924ff(%edi,%edi,8)
add    %ah,-0x5c(%eax)
(bad)
incl   0x0(%ecx,%ecx,1)
add    %dl,(%eax)
movsl  %ds:(%esi),%es:(%edi)
(bad)
incl   -0x5ac00000(%ecx,%ecx,1)
(bad)
pushl  0x30000009(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
(bad)
call   68052bae <optarg+0x5fffc98a>
mov    $0xff,%al
ljmp   *(%edx,%ecx,1)
add    %al,(%eax)
add    %dh,0xa6cffff(%edx)
add    %al,(%eax)
inc    %eax
mov    $0xff,%dl
jmp    *0x6000000a(%eax)
mov    $0xff,%dl
pushl  -0x4d800000(%edx,%ecx,1)
(bad)
dec    %eax
or     (%eax),%al
add    %al,%al
mov    $0xff,%dl
(bad)
in     (%dx),%al
or     (%eax),%al
add    %ah,%al
mov    $0xff,%dl
incl   (%eax)
or     (%eax),%eax
add    %ah,(%eax)
mov    $0xff,%bl
jmp    *(%ebx,%ecx,1)
add    %al,(%eax)
xorb   $0x0,0xb58ffff(%ebx)
add    %ah,-0x4c(%eax)
(bad)
call   *-0x4b700000(%ebx,%ecx,1)
(bad)
ljmp   *-0x4ae00000(%ebx,%ecx,1)
(bad)
jmp    *%eax
or     (%eax),%eax
add    %al,-0x4b(%eax)
(bad)
push   %esp
or     (%eax),%eax
add    %ah,-0x4b(%eax)
(bad)
decl   (%eax)
or     $0x0,%al
add    %al,0x1cffffb5(%eax)
or     $0x0,%al
add    %ah,0x30ffffb5(%eax)
or     $0x0,%al
add    %dl,%al
mov    $0xff,%ch
call   *0xc(%eax)
add    %al,(%eax)
add    %dh,0xc70ffff(%esi)
add    %al,(%eax)
xor    %dh,0xc88ffff(%esi)
add    %al,(%eax)
pusha
mov    $0xff,%dh
jmp    *0x1000000c(%eax)
mov    $0xff,%bh
inc    %esp
or     $0x0,%al
add    %al,-0x49(%eax)
(bad)
(bad)
fmull  (%eax,%eax,1)
add    %dh,-0x49(%eax)
(bad)
push   %esp
or     $0x0,%al
add    %ah,0xcffffb7(%eax)
or     $0xb8500000,%eax
(bad)
pushl  (%eax)
or     $0xb8900000,%eax
(bad)
decl   0xd(%eax)
add    %al,(%eax)
sarb   0xd60ffff(%eax)
add    %al,(%eax)
adc    %bh,0xd78ffff(%ecx)
add    %al,(%eax)
xor    %bh,0xd8cffff(%ecx)
add    %al,(%eax)
push   %eax
mov    $0xda0ffff,%ecx
add    %al,(%eax)
jo     8052c4f <_IO_stdin_used+0x226b>
(bad)
pushl  -0x46700000(%ebp,%ecx,1)
(bad)
dec    %eax
or     $0xbf000000,%eax
(bad)
jmp    *0x0(%esi,%ecx,1)
add    %dl,-0x41(%eax)
(bad)
(bad)
jl     8052cc0 <_IO_stdin_used+0x22dc>
add    %al,(%eax)
mov    $0xbf,%al
(bad)
jmp    *-0xffffff2(%eax)
mov    $0xeb8ffff,%edi
add    %al,(%eax)
mov    0xdcffffc0,%al
push   %cs
add    %al,(%eax)
rol    %al
(bad)
incl   (%eax)
sldt   (%eax)
add    %al,%cl
(bad)
jmp    *(%edi,%ecx,1)
add    %al,(%eax)
adc    %al,%cl
(bad)
(bad)
cmp    %cl,(%edi)
add    %al,(%eax)
pusha
sar    $0xff,%edi
push   $0xa000000f
sar    $0xff,%edi
xchg   %eax,%esp
sldt   (%eax)
add    %al,%dl
(bad)
inc    %esp
sldt   (%eax)
push   %eax
ret    $0xffff
call   88052d14 <optarg+0x7fffcaf0>
ret    $0xffff
or     %dl,(%eax)
add    %al,(%eax)
mov    $0xc2,%al
(bad)
jmp    *(%eax,%edx,1)
add    %al,(%eax)
loopne 8052cd8 <_IO_stdin_used+0x22f4>
(bad)
incl   0x0(%eax,%edx,1)
add    %dl,(%eax)
ret
(bad)
jmp    *0x0(%eax,%edx,1)
add    %ah,-0x3d(%eax)
(bad)
(bad)
js     8052d3a <_IO_stdin_used+0x2356>
add    %al,(%eax)
nop
ret
(bad)
call   *0x10(%eax)
(bad)
(bad)
call   *%eax
adc    %al,(%eax)
add    %al,%al
(bad)
(bad)
incl   0x11(%eax)
add    %al,(%eax)
inc    %eax
enter  $0xffff,$0x98
adc    %eax,(%eax)
add    %al,(%eax)
int3
(bad)
(bad)
fcoms  (%ecx)
add    %al,(%eax)
inc    %eax
int3
(bad)
(bad)
in     (%dx),%al
adc    %eax,(%eax)
add    %al,0xffffcc(%eax)
adc    (%eax),%al
add    %dh,%al
int3
(bad)
ljmp   *(%edx,%edx,1)
add    %al,(%eax)
and    %cl,%ch
(bad)
incl   0x12(%eax)
add    %al,(%eax)
push   %eax
int    $0xff
jmp    *0x12(%eax)
add    %al,(%eax)
and    %cl,%dh
(bad)
lcall  *0x12(%eax)
iret
(bad)
(bad)
fcoms  (%edx)
add    %al,(%eax)
xor    %cl,%bh
(bad)
push   %eax
adc    (%eax),%al
add    %al,%al
sar    %cl,%edi
(bad)
js     8052dad <_IO_stdin_used+0x23c9>
add    %al,(%eax)
lock sar %cl,%edi
call   *0x13(%eax)
(bad)
(bad)
(bad)
fcoml  (%ebx)
add    %al,(%eax)
inc    %eax
(bad)
(bad)
(bad)
clc
adc    (%eax),%eax
add    %al,0x24ffffd6(%eax)
adc    $0x0,%al
add    %dh,(%eax)
fcos
call   *-0x26300000(%esp,%edx,1)
(bad)
(bad)
fcoml  (%eax,%eax,1)
add    %dh,(%eax)
(bad)
decl   (%eax)
adc    $0xdac00000,%eax
(bad)
jmp    *0x15(%eax)
add    %al,(%eax)
adc    %bl,%ah
(bad)
jmp    *-0x7fffffeb(%eax)
fdivr  %st,%st(7)
(bad)
fcoms  0xdcb00000
(bad)
push   %eax
adc    $0xdcf00000,%eax
(bad)
decl   (%eax)
push   %ss
add    %al,(%eax)
xor    %bl,%ch
(bad)
incl   0x0(%esi,%edx,1)
add    %dl,-0x22(%eax)
(bad)
decl   -0x21800000(%esi,%edx,1)
(bad)
jmp    *-0x21100000(%esi,%edx,1)
(bad)
jmp    *%eax
push   %ss
add    %al,(%eax)
add    %bl,%bh
(bad)
push   %esp
push   %ss
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8052e3b <_IO_stdin_used+0x2457>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cmp    $0x61,%al
(bad)
call   *(%eax)
add    $0xe000000,%eax
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8052e5b <_IO_stdin_used+0x2477>
js     8052e59 <_IO_stdin_used+0x2475>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
and    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x61ffff70(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
add    0xe(%ecx),%bl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %ah,%ah
jo     8052e8e <_IO_stdin_used+0x24aa>
lcall  *0x3(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,0x65e40000(%eax,%eax,1)
(bad)
pushl  0x9(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
inc    %edx
xchg   %eax,(%ebx)
xchg   %al,(%esp,%ecx,2)
addl   $0x0,0x14000000
add    %al,(%eax)
test   $0x0,%al
add    %al,(%eax)
add    %dh,-0x1(%edi,%edi,8)
adc    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %cl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %al,%al
add    %al,(%eax)
add    %cl,(%eax)
je     8052eea <_IO_stdin_used+0x2506>
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
mov    $0x74,%al
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     8052f63 <_IO_stdin_used+0x257f>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %cl,0x1(%eax)
add    %al,(%eax)
and    %dh,-0x1(%ebp)
lcall  *(%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
pushf
add    %eax,(%eax)
add    %ch,%ah
jne    8052fc6 <_IO_stdin_used+0x25e2>
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    %eax,(%eax)
add    %bl,(%esi,%esi,2)
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%edx)
add    %al,(%eax)
xor    %dh,-0x1(%esi)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,(%edx,%eax,1)
add    %al,(%eax)
sub    $0x76,%al
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %al,0x2(%eax)
add    %al,(%eax)
sub    %dh,-0x1(%esi)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    (%eax),%al
add    %cl,%ah
jbe    8053096 <_IO_stdin_used+0x26b2>
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,0x770c0000(%edx,%eax,1)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %dh,0x28000002(%eax)
ja     80530da <_IO_stdin_used+0x26f6>
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x68300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx),%esi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    $0x3,%al
add    %al,(%eax)
inc    %esp
ja     805312e <_IO_stdin_used+0x274a>
incl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
outsl  %ds:(%esi),(%dx)
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sub    %al,(%ebx)
add    %al,(%eax)
mov    $0x77,%al
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%eax),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,0x0(%ebx,%eax,1)
add    %bl,%ah
ja     8053176 <_IO_stdin_used+0x2792>
call   *(%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5a,0x2180e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
mov    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x78a40000(%ebx,%eax,1)
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    $0xe0000003,%eax
js     80531e2 <_IO_stdin_used+0x27fe>
lcall  *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
jnp    80531fd <_IO_stdin_used+0x2819>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
faddl  (%ebx)
add    %al,(%eax)
sbb    $0x79,%al
(bad)
lcall  *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%edi)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edi),%ecx
or     $0x45,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
and    $0x0,%al
add    %al,(%eax)
adc    $0x4,%al
add    %al,(%eax)
inc    %esp
jns    805323e <_IO_stdin_used+0x285a>
jmp    *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x76,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %bh,(%esp,%eax,1)
add    %al,(%eax)
mov    %?,-0x1(%ecx)
ljmp   *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
or     %gs:(%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
arpl   %cx,(%esi)
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x79f40000(%esp,%eax,1)
(bad)
lcall  *(%edx)
adc    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x6900e46
(bad)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,%al
add    $0x0,%al
add    %dl,%al
mov    %?,%edi
(bad)
clc
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x4b00e46
daa
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %cl,-0x68740000(,%eax,1)
(bad)
call   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
xor    %bl,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%eax),%ebp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%eax),%esi
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   %esp
add    $0x97e40000,%eax
(bad)
jmp    *(%edi)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e46
mov    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
xchg   %eax,%esp
add    $0x9ad40000,%eax
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bl,0xa(%edi)
push   %cs
add    $0x46,%al
or     0xe(%edx),%ebp
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x5,%ah
add    %al,(%eax)
adc    $0x9b,%al
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
hlt
add    $0x9b840000,%eax
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
and    %al,(%esi)
add    %al,(%eax)
mov    %bl,0xe2ffff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x6(%eax)
add    %al,(%eax)
inc    %eax
pushf
(bad)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
pushf
push   %es
add    %al,(%eax)
sub    $0xa6,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %bl,%ah
push   %es
add    %al,(%eax)
mov    %fs,0x36ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
pop    %es
add    %al,(%eax)
cwtl
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%edi,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
pop    %es
add    %al,(%eax)
mov    $0xa7,%al
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
pop    %esp
pop    %es
add    %al,(%eax)
int3
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,0x7(%eax)
add    %al,(%eax)
fsubs  0x38ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
pop    %es
add    %al,(%eax)
hlt
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
enter  $0x7,$0x0
and    %ch,0xd4ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %al,(%eax,%ecx,1)
add    %al,(%eax)
les    0x2bffff(%eax),%ebp
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
sbb    $0x8,%al
add    %al,(%eax)
fsubrl 0x84ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
push   %eax
or     %al,(%eax)
add    %bh,(%eax)
test   $0x1affff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
or     %al,%fs:(%eax)
add    %al,-0x1(%ecx,%ebp,4)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,0x8(%eax)
add    %al,(%eax)
push   %eax
test   $0x18ffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
mov    %cs,(%eax)
add    %al,(%eax)
pop    %esp
test   $0x17ffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
mov    0x68000008,%al
test   $0x2dffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %al,%al
or     %al,(%eax)
add    %bh,-0x57(%eax)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ah,%al
or     %al,(%eax)
add    %cl,0x23ffffa9(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
clc
or     %al,(%eax)
add    %ah,0x2bffffa9(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
adc    %cl,(%ecx)
add    %al,(%eax)
mov    $0xb0ffffa9,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
xor    $0x9,%al
add    %al,(%eax)
inc    %esp
stos   %al,%es:(%edi)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
dec    %esp
or     %eax,(%eax)
add    %bl,-0x1(%edx,%ebp,4)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
or     %eax,%fs:(%eax)
add    %dh,-0x1(%edx,%ebp,4)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
jl     80537ab <_IO_stdin_used+0x2dc7>
add    %al,(%eax)
mov    %gs,0xa5ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    0x18000009,%al
stos   %eax,%es:(%edi)
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
mov    $0x40000009,%eax
stos   %eax,%es:(%edi)
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
rorb   (%ecx)
add    %al,(%eax)
push   $0x33ffffab
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   9805381a <optarg+0x8fffd5f6>
stos   %eax,%es:(%edi)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
or     %eax,(%eax)
add    %bl,0x17ffff(%ebx,%ebp,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %cl,(%edx)
add    %al,(%eax)
test   $0xab,%al
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%edx,%ecx,1)
add    %al,(%eax)
mov    $0xab,%ah
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,0x38000000(%eax)
or     (%eax),%al
add    %al,%al
stos   %eax,%es:(%edi)
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
aam    $0xa
add    %al,(%eax)
xchg   %eax,%esp
mov    $0xff,%al
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,%ah
or     (%eax),%al
add    %cl,%ah
mov    $0xff,%al
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %cl,(%ebx)
add    %al,(%eax)
or     %dh,0x33ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
sub    %cl,(%ebx)
add    %al,(%eax)
xor    %dh,0xa7ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
dec    %esp
or     (%eax),%eax
add    %bh,0x25ffff(%ecx,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
jo     80539a1 <_IO_stdin_used+0x2fbd>
add    %al,(%eax)
enter  $0xffb1,$0xff
add    %al,%cs:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
or     (%eax),%eax
add    %dl,%ah
mov    $0xff,%cl
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
test   $0xb,%al
add    %al,(%eax)
(bad)
mov    $0xff,%cl
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
fmuls  (%ebx)
add    %al,(%eax)
lock mov $0xff,%cl
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
add    $0xc,%al
add    %al,(%eax)
add    $0xb2,%al
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    $0xc,%al
add    %al,(%eax)
xor    $0xb2,%al
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
pop    %eax
or     $0x0,%al
add    %ah,-0x4e(%eax)
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bh,0xc(%eax)
add    %al,(%eax)
jo     8053a54 <_IO_stdin_used+0x3070>
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
or     $0x0,%al
add    %al,0x29ffff(%edx,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,-0x4d6c0000(%esp,%ecx,1)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,%ah
or     $0x0,%al
add    %ah,0x46ffff(%edx,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax,%eax,1)
add    %al,(%eax)
call   e8053b1d <optarg+0xdfffd8f9>
mov    $0xff,%dl
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
add    %cl,0xb2f80000
(bad)
jmp    *0x2(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x20900e48
fisttpl (%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0x0(%eax,%eax,1),%ebp
add    %al,0xd(%eax)
add    %al,(%eax)
sub    %dh,0x1b9ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
jns    8053b96 <_IO_stdin_used+0x31b2>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
rorl   $0xe,(%edx)
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,0x7800000d(%eax)
mov    $0xff,%dh
(bad)
js     8053bde <_IO_stdin_used+0x31fa>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     8053bff <_IO_stdin_used+0x321b>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
or     %cl,(%esi)
add    %al,(%eax)
mov    0xb9ffffb6,%al
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%edx
add    %al,(%eax)
add    %cl,0xe(%eax)
add    %al,(%eax)
and    %bh,0x3effff(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax)
add    %al,(%eax)
add    %bl,0x0(%esi,%ecx,1)
add    %cl,-0x1(%edx,%edi,4)
(bad)
add    %al,%ds:(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,(%eax)
add    %al,(%eax)
add    %dh,0xe(%eax)
add    %al,(%eax)
js     8053c54 <_IO_stdin_used+0x3270>
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
js     8053cb5 <_IO_stdin_used+0x32d1>
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ebx
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x45440000(%esi,%ecx,1)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
mov    $0xe,%al
add    %al,(%eax)
fdivrs 0x26ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %dl,%al
push   %cs
add    %al,(%eax)
call   ce053cb7 <optarg+0xc5ffda93>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
push   %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
or     %cl,(%edi)
add    %al,(%eax)
cmpb   $0x0,0xdaffff(%ebx)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7f300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
dec    %eax
sldt   (%eax)
and    %bh,0x2bff(%edi,%edi,8)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
test   %al,(%eax)
add    %al,(%eax)
pusha
sldt   (%eax)
cmp    %bh,0x485ff(%edi,%edi,8)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1e00e46
pop    %ecx
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
jge    8053dce <_IO_stdin_used+0x33ea>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
lods   %ds:(%esi),%eax
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
inc    %esi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
call   48053e20 <optarg+0x3fffdbfc>
sar    $0xff,%bh
and    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
dec    %eax
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %bl,-0x40(%eax)
(bad)
decl   (%edi)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x5ff1b9fc(%ebx)
add    %eax,(%ebx)
pop    %ecx
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
outsb  %ds:(%esi),(%dx)
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
dec    %esp
adc    %al,(%eax)
add    %bl,(%edx,%eax,8)
(bad)
(bad)
add    %al,%ds:(%eax)
add    %al,(%eax)
dec    %ecx
push   %cs
and    %cl,0xe(%edi)
add    $0x42,%al
push   %cs
and    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,0x10(%eax)
add    %al,(%eax)
inc    %eax
ret    $0xffff
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0x0(%eax,%eax,1),%ebp
add    %dl,-0x3dac0000(%eax,%edx,1)
(bad)
jmp    *0x2(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x67500e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
xchg   %eax,%esi
or     (%esi),%cl
adc    $0x45,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
add    %al,(%ecx)
or     (%esi),%cl
adc    $0x48,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %al,(%ecx,%edx,1)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
dec    %esp
adc    %eax,(%eax)
add    %ch,%ah
(bad)
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %bh,0x11(%eax)
add    %al,(%eax)
and    %al,%ch
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
rclb   (%ecx)
add    %al,(%eax)
pop    %eax
(bad)
inc    %esi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff82,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
adc    %dl,(%edx)
add    %al,(%eax)
push   $0x6fffffc6
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebp),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
dec    %eax
adc    (%eax),%al
add    %ah,0x23ffffc6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pusha
adc    (%eax),%al
add    %bh,0x31ffffc6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,0xe(%ebp)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
js     80540b0 <_IO_stdin_used+0x36cc>
add    %al,(%eax)
loopne 8054068 <_IO_stdin_used+0x3684>
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6b300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %dh,-0x391c0000(%edx,%edx,1)
(bad)
lcall  *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
cld
adc    (%eax),%al
add    %bh,0x23ffff(%edi,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
adc    $0x13,%al
add    %al,(%eax)
aam    $0xc7
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,0x13(%eax)
add    %al,(%eax)
or     %cl,%al
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebx,%edx,1)
add    %al,(%eax,%ecx,8)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0xd0
sahf
add    $0x8,%al
mov    $0x9e,%al
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
push   %eax
popl   (%eax,%ecx,1)
or     $0xcc000000,%eax
or     %eax,0x1908
add    %cl,(%eax)
pop    %edi
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x5f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
xchg   %eax,%esp
xchg   %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %dh,%ah
addl   $0xa,(%eax,%ecx,1)
scas   %es:(%edi),%al
add    (%eax),%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x208,%eax
add    %al,0x14000002(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%edi)
add    %al,(%eax)
add    %dl,%al
mov    %es,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
cwtl
mov    %es,(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x8(%edi)
mov    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x42(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x5f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,-0x59f7fb71(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8055fd6 <_IO_stdin_used+0x55f2>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8056017 <_IO_stdin_used+0x5633>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8056058 <_IO_stdin_used+0x5674>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    8056099 <_IO_stdin_used+0x56b5>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    80560da <_IO_stdin_used+0x56f6>
add    $0x8,%al
.byte 0x86
xchg   %eax,%esp
add    $0x8,%al
adcb   $0x5,(%ebx)
or     %dl,%al
mov    %al,0x10804
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %dh,0x1000805(%ecx,%eiz,2)
add    %al,(%eax)
pusha
bound  %eax,0x108
add    %al,(%eax)
add    %al,(%eax)
je     71 <unsetenv@plt-0x8048f1f>
jne    67 <unsetenv@plt-0x8048f29>
push   $0x1b000000
.byte 0x25
.byte 0x8b
inc    %esp
