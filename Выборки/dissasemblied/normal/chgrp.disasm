das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ch,0x65(%ecx,%edi,4)
roll   (%edi)
scas   %es:(%edi),%al
insb   (%dx),%es:(%edi)
cmpsb  %es:(%edi),%ds:(%esi)
fsubr  %st,%st(6)
mov    $0x92deaaa2,%edi
mov    %ecx,%eax
pop    %ss
push   %ebx
.byte 0xa2
add    (%eax),%eax
add    %al,(%eax)
dec    %ebx
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,-0x4dffbbe0(%edx)
and    %ecx,0x22804048(%esi,%edx,4)
and    %cl,(%eax)
add    %al,(%ebx,%ecx,2)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
push   %edi
add    %al,(%eax)
add    %bl,%ah
dec    %ebx
popa
(bad)
sub    %bl,0x390c1c8c
mov    -0xd8ffa05(%edx),%dl
mov    $0x389e7650,%esp
repnz mov (%esi,%eax,4),%ebx
lock xchg %eax,%esi
jl     80481c3 <endgrent@plt-0xdbd>
sub    $0x63,%al
jb     804823b <endgrent@plt-0xd45>
ret
mov    %dl,-0x3f1cb454(%edx)
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %ah,%al
notl   (%edx)
cmpsb  %es:(%edi),%ds:(%esi)
inc    %ebp
loop   80481c4 <endgrent@plt-0xdbc>
.byte 0xa2
notl   (%edx)
pop    %edx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%ebx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%edx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsl  %ds:(%esi),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ebx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%ebx,%eax,1)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%dh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%bl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fild   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jp     8048498 <endgrent@plt-0xae8>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %esi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jmp    804855a <endgrent@plt-0xa26>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ret    $0x1
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
int    $0x2
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jle    8048676 <endgrent@plt-0x90a>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%eax),%es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jecxz  8048696 <endgrent@plt-0x8ea>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %es
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx,%eax,1)
add    %al,(%eax)
adc    %dh,%dh
add    $0x8,%al
xor    $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
or     $0x18c00,%eax
add    %al,(%eax)
bound  %eax,0x408
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,-0x12000000(%ecx,%eax,1)
add    $0x8,%al
add    $0x12000008,%eax
add    %cl,0x2dc00
add    %dl,-0xa(%eax)
add    $0x8,%al
push   %ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x32c00
add    %ah,0x4080561(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,(%esi)
add    (%eax),%al
add    %ah,0x40805(%ecx,%eiz,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
daa
add    (%eax),%eax
add    %al,(%eax)
nop
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    (%eax),%eax
add    %al,%al
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,-0xffffffe(%esi)
call   b7f8f52 <optarg+0x37a2d4e>
add    %al,(%eax)
adc    (%eax),%al
or     $0xb00,%eax
add    %al,%ah
adc    $0x5,%al
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
str    %ebx
add    %al,(%eax)
add    %al,%al
popa
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %al,-0x5ffffffe(%ecx)
popa
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %cl,0x0(%edi)
add    %al,(%eax)
loopne 80487eb <endgrent@plt-0x795>
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%eax)
add    %eax,(%eax)
add    %dh,-0x14(%eax)
add    $0x8,%al
xchg   %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x22400,%eax
add    %al,(%edx,%eiz,2)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804882b <endgrent@plt-0x755>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048839 <endgrent@plt-0x747>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048846 <endgrent@plt-0x73a>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048852 <endgrent@plt-0x72e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048859 <endgrent@plt-0x727>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804886b <endgrent@plt-0x715>
outsl  %ds:(%esi),(%dx)
ja     804885d <endgrent@plt-0x723>
add    %dh,0x74(%ebx)
jb     804886d <endgrent@plt-0x713>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     8048870 <endgrent@plt-0x710>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048880 <endgrent@plt-0x700>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     804888c <endgrent@plt-0x6f4>
gs
js     804888f <endgrent@plt-0x6f1>
add    %ah,0x65(%edi)
je     8048890 <endgrent@plt-0x6f0>
ja     8048897 <endgrent@plt-0x6e9>
imul   $0x7378665f,0x5f(%eax,%eax,1),%esp
je     804888d <endgrent@plt-0x6f3>
je     804888f <endgrent@plt-0x6f1>
je     8048866 <endgrent@plt-0x71a>
xor    $0x0,%al
arpl   %bp,0x73(%edi,%ebp,2)
gs imul $0x64686366,%fs:%gs:0x0(%edx),%esi
64
imul   $0x67746567,0x0(%edx),%esi
jb     80488af <endgrent@plt-0x6d1>
imul   $0x726f7272,0x65(%eax,%eax,1),%esp
add    %bl,0x5f(%edi)
jae    80488c9 <endgrent@plt-0x6b7>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048879 <endgrent@plt-0x707>
pop    %edi
gs
js     80488e6 <endgrent@plt-0x69a>
je     804887f <endgrent@plt-0x701>
jo     80488f3 <endgrent@plt-0x68d>
outsl  %ds:(%esi),(%dx)
addr16 jb 80488e6 <endgrent@plt-0x69a>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    804890f <endgrent@plt-0x671>
gs
jb     8048913 <endgrent@plt-0x66d>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     8048911 <endgrent@plt-0x66f>
pop    %edi
addr16
gs
je     8048910 <endgrent@plt-0x670>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048929 <endgrent@plt-0x657>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80488bc <endgrent@plt-0x6c4>
data16
je     8048932 <endgrent@plt-0x64e>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %bl,%gs:0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jo     8048930 <endgrent@plt-0x650>
outsb  %ds:(%esi),(%dx)
popa
je     8048905 <endgrent@plt-0x67b>
xor    $0x5f,%al
xor    (%eax),%al
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048950 <endgrent@plt-0x630>
jb     804894a <endgrent@plt-0x636>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     804894a <endgrent@plt-0x636>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048952 <endgrent@plt-0x62e>
je     80488ef <endgrent@plt-0x691>
pop    %edi
pop    %edi
gs
jb     8048966 <endgrent@plt-0x61a>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x6e(%ebp)
fs
addr16 jb 8048979 <endgrent@plt-0x607>
outsb  %ds:(%esi),(%dx)
je     8048917 <endgrent@plt-0x669>
pop    %edi
pop    %edi
data16
js     804898f <endgrent@plt-0x5f1>
je     804897f <endgrent@plt-0x601>
je     8048956 <endgrent@plt-0x62a>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     8048999 <endgrent@plt-0x5e7>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x67,(%eax),%eax
gs
je     804899b <endgrent@plt-0x5e5>
jb     80489a4 <endgrent@plt-0x5dc>
popa
insl   (%dx),%es:(%edi)
add    %ah,0x63(%esi)
push   $0x6e776f
jae    80489b6 <endgrent@plt-0x5ca>
outsl  %fs:(%esi),(%dx)
jne    80489ba <endgrent@plt-0x5c6>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ah,0x74(%esi)
jae    80489b3 <endgrent@plt-0x5cd>
jb     80489bb <endgrent@plt-0x5c5>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80489cb <endgrent@plt-0x5b5>
add    %dh,0x74(%ebx)
jb     80489df <endgrent@plt-0x5a1>
outsl  %ds:(%esi),(%dx)
jne    80489da <endgrent@plt-0x5a6>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsw  %fs:(%esi),(%dx)
jo     80489e0 <endgrent@plt-0x5a0>
outsb  %ds:(%esi),(%dx)
imul   $0x6973626d,%fs:0x0(%edx),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x73786c5f,0x5f(%eax,%eax,1),%esi
je     80489f0 <endgrent@plt-0x590>
je     80489c7 <endgrent@plt-0x5b9>
xor    $0x0,%al
data16
jae    8048a0a <endgrent@plt-0x576>
popa
je     80489ff <endgrent@plt-0x581>
jae    80489d1 <endgrent@plt-0x5af>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    8048a07 <endgrent@plt-0x579>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80489a5 <endgrent@plt-0x5db>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     8048a28 <endgrent@plt-0x558>
je     8048a18 <endgrent@plt-0x568>
je     80489ef <endgrent@plt-0x591>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048a32 <endgrent@plt-0x54e>
outsb  %ds:(%esi),(%dx)
jbe    80489d0 <endgrent@plt-0x5b0>
data16
je     8048a46 <endgrent@plt-0x53a>
pop    %edi
jae    8048a3b <endgrent@plt-0x545>
je     80489d8 <endgrent@plt-0x5a8>
outsl  %ds:(%esi),(%dx)
jo     8048a4f <endgrent@plt-0x531>
popa
jb     8048a45 <endgrent@plt-0x53b>
add    %bl,0x5f(%edi)
data16
jb     8048a49 <endgrent@plt-0x537>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048a62 <endgrent@plt-0x51e>
add    %ah,0x63(%esi)
push   $0x616e776f
je     80489fa <endgrent@plt-0x586>
data16
jae    8048a60 <endgrent@plt-0x520>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048a74 <endgrent@plt-0x50c>
jo     8048a7b <endgrent@plt-0x505>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048a81 <endgrent@plt-0x4ff>
je     8048a7f <endgrent@plt-0x501>
add    %bl,0x5f(%edi)
data16
jo     8048a85 <endgrent@plt-0x4fb>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048a95 <endgrent@plt-0x4eb>
push   $0x72700072
outsl  %ds:(%esi),(%dx)
addr16 jb 8048a9c <endgrent@plt-0x4e4>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048ac1 <endgrent@plt-0x4bf>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048abd <endgrent@plt-0x4c3>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x73710034,%fs:0x36(%edx),%esi
73
outsl  %ds:(%esi),(%dx)
jb     8048add <endgrent@plt-0x4a3>
add    %ah,0x74(%esi)
jae    8048acd <endgrent@plt-0x4b3>
outsl  %ds:(%esi),(%dx)
jo     8048ad6 <endgrent@plt-0x4aa>
outsb  %ds:(%esi),(%dx)
add    %ah,0x63(%esi)
outsb  %ds:(%esi),(%dx)
je     8048ae4 <endgrent@plt-0x49c>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048ae5 <endgrent@plt-0x49b>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048aec <endgrent@plt-0x494>
js     8048afd <endgrent@plt-0x483>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x5f737466,0x0(%esi),%ebp
arpl   %bp,0x69(%eax)
insb   (%dx),%es:(%edi)
fs
jb     8048b00 <endgrent@plt-0x480>
outsb  %ds:(%esi),(%dx)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
popa
je     8048ada <endgrent@plt-0x4a6>
xor    $0x0,%al
jae    8048b1c <endgrent@plt-0x464>
jb     8048b0d <endgrent@plt-0x473>
insl   (%dx),%es:(%edi)
jo     8048aad <endgrent@plt-0x4d3>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048b2d <endgrent@plt-0x453>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %dh,%fs:0x74(%ebx)
jo     8048b2c <endgrent@plt-0x454>
jo     8048b44 <endgrent@plt-0x43c>
add    %ah,0x70(%esi)
jne    8048b44 <endgrent@plt-0x43c>
jae    8048b31 <endgrent@plt-0x44f>
jne    8048b42 <endgrent@plt-0x43e>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b56 <endgrent@plt-0x42a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b61 <endgrent@plt-0x41f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b65 <endgrent@plt-0x41b>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048b69 <endgrent@plt-0x417>
js     8048b6f <endgrent@plt-0x411>
je     8048b08 <endgrent@plt-0x478>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048b85 <endgrent@plt-0x3fb>
popa
jb     8048b88 <endgrent@plt-0x3f8>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x5000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x5000200
add    %al,(%ebx)
add    %al,(%esi)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %eax,(%eax)
or     %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x90000,%eax
arpl   %ax,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     8048c5b <endgrent@plt-0x325>
imul   $0x80000,(%ecx),%ecx
insl   (%dx),%es:(%edi)
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x70000,(%ecx),%ecx
jns    8048c5d <endgrent@plt-0x323>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x60000,%eax
test   %eax,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x38f,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
pop    %ss
imul   $0x40000,0xd(%ecx),%ebp
cltd
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x30000,0xd(%ecx),%ebp
mov    %eax,0x10000003
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
lods   %ds:(%esi),%eax
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
pop    %edi
add    $0x210608,%eax
add    %ah,0x5080561(%eax)
dec    %edi
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
popa
add    $0x500508,%eax
add    %al,%al
popa
add    $0x520508,%eax
add    %ah,%al
popa
add    $0x570508,%eax
add    %al,(%eax)
bound  %eax,0x4c0508
add    %al,(%edx,%eiz,2)
add    $0x590508,%eax
or     $0x60,%al
add    $0x10708,%eax
add    %dl,(%eax)
pusha
add    $0x20708,%eax
add    %dl,(%eax,%eiz,2)
add    $0x30708,%eax
add    %bl,(%eax)
pusha
add    $0x40708,%eax
add    %bl,(%eax,%eiz,2)
add    $0x50708,%eax
add    %ah,(%eax)
pusha
add    $0x60708,%eax
add    %ah,(%eax,%eiz,2)
add    $0x70708,%eax
add    %ch,(%eax)
pusha
add    $0x80708,%eax
add    %ch,(%eax,%eiz,2)
add    $0x510708,%eax
add    %dh,(%eax)
pusha
add    $0x90708,%eax
add    %dh,(%eax,%eiz,2)
add    $0xa0708,%eax
add    %bh,(%eax)
pusha
add    $0xb0708,%eax
add    %bh,(%eax,%eiz,2)
add    $0xc0708,%eax
add    %al,0x60(%eax)
add    $0xd0708,%eax
add    %al,0x5(%eax,%eiz,2)
or     %al,(%edi)
push   %cs
add    %al,(%eax)
dec    %eax
pusha
add    $0xf0708,%eax
add    %cl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    %al,(%eax)
add    %dl,0x60(%eax)
add    $0x110708,%eax
add    %dl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    (%eax),%al
add    %bl,0x60(%eax)
add    $0x130708,%eax
add    %bl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    $0x0,%al
add    %ah,0x60(%eax)
add    $0x150708,%eax
add    %ah,0x5(%eax,%eiz,2)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
push   $0x7080560
pop    %ss
add    %al,(%eax)
insb   (%dx),%es:(%edi)
pusha
add    $0x180708,%eax
add    %dh,0x60(%eax)
add    $0x190708,%eax
add    %dh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    (%eax),%al
add    %bh,0x60(%eax)
add    $0x1b0708,%eax
add    %bh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    $0x0,%al
add    %al,0x7080560(%eax)
sbb    $0x60840000,%eax
add    $0x1e0708,%eax
add    %cl,0x7080560(%eax)
pop    %ds
add    %al,(%eax)
mov    %fs,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %dl,0x7080560(%eax)
and    %eax,(%eax)
add    %dl,0x22070805(%eax,%eiz,2)
add    %al,(%eax)
cwtl
pusha
add    $0x230708,%eax
add    %bl,0x24070805(%eax,%eiz,2)
add    %al,(%eax)
mov    0x7080560,%al
and    $0x60a40000,%eax
add    $0x260708,%eax
add    %ch,0x7080560(%eax)
daa
add    %al,(%eax)
lods   %ds:(%esi),%al
pusha
add    $0x280708,%eax
add    %dh,0x7080560(%eax)
sub    %eax,(%eax)
add    %dh,0x2a070805(%eax,%eiz,2)
add    %al,(%eax)
mov    $0x7080560,%eax
sub    (%eax),%eax
add    %bh,0x2c070805(%eax,%eiz,2)
add    %al,(%eax)
shlb   $0x8,0x5(%eax)
pop    %es
sub    $0x60c40000,%eax
add    $0x2e0708,%eax
add    %cl,%al
pusha
add    $0x2f0708,%eax
add    %cl,%ah
pusha
add    $0x300708,%eax
add    %dl,%al
pusha
add    $0x310708,%eax
add    %dl,%ah
pusha
add    $0x320708,%eax
add    %bl,%al
pusha
add    $0x330708,%eax
add    %bl,%ah
pusha
add    $0x340708,%eax
add    %ah,%al
pusha
add    $0x350708,%eax
add    %ah,%ah
pusha
add    $0x360708,%eax
add    %ch,%al
pusha
add    $0x370708,%eax
add    %ch,%ah
pusha
add    $0x380708,%eax
add    %dh,%al
pusha
add    $0x390708,%eax
add    %dh,%ah
pusha
add    $0x3a0708,%eax
add    %bh,%al
pusha
add    $0x3b0708,%eax
add    %bh,%ah
pusha
add    $0x3c0708,%eax
add    %al,(%eax)
popa
add    $0x3d0708,%eax
add    %al,(%ecx,%eiz,2)
add    $0x3e0708,%eax
add    %cl,(%eax)
popa
add    $0x3f0708,%eax
add    %cl,(%ecx,%eiz,2)
add    $0x400708,%eax
add    %dl,(%eax)
popa
add    $0x410708,%eax
add    %dl,(%ecx,%eiz,2)
add    $0x420708,%eax
add    %bl,(%eax)
popa
add    $0x430708,%eax
add    %bl,(%ecx,%eiz,2)
add    $0x440708,%eax
add    %ah,(%eax)
popa
add    $0x450708,%eax
add    %ah,(%ecx,%eiz,2)
add    $0x460708,%eax
add    %ch,(%eax)
popa
add    $0x470708,%eax
add    %ch,(%ecx,%eiz,2)
add    $0x480708,%eax
add    %dh,(%eax)
popa
add    $0x490708,%eax
add    %dh,(%ecx,%eiz,2)
add    $0x4a0708,%eax
push   %ebx
sub    $0x8,%esp
call   80499f0 <calloc@plt+0x5d0>
add    $0xd0b7,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048f5e <endgrent@plt-0x22>
call   8049190 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8056004
jmp    *0x8056008
add    %al,(%eax)
jmp    *0x805600c
push   $0x0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056010
push   $0x8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056014
push   $0x10
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056018
push   $0x18
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805601c
push   $0x20
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056020
push   $0x28
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056024
push   $0x30
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056028
push   $0x38
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805602c
push   $0x40
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056030
push   $0x48
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056034
push   $0x50
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056038
push   $0x58
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805603c
push   $0x60
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056040
push   $0x68
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056044
push   $0x70
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056048
push   $0x78
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805604c
push   $0x80
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056050
push   $0x88
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056054
push   $0x90
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056058
push   $0x98
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805605c
push   $0xa0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056060
push   $0xa8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056064
push   $0xb0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056068
push   $0xb8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805606c
push   $0xc0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056070
push   $0xc8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056074
push   $0xd0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056078
push   $0xd8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805607c
push   $0xe0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056080
push   $0xe8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056084
push   $0xf0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056088
push   $0xf8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805608c
push   $0x100
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056090
push   $0x108
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056094
push   $0x110
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056098
push   $0x118
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805609c
push   $0x120
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560a0
push   $0x128
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560a4
push   $0x130
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560a8
push   $0x138
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560ac
push   $0x140
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560b0
push   $0x148
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560b4
push   $0x150
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560b8
push   $0x158
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560bc
push   $0x160
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560c0
push   $0x168
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560c4
push   $0x170
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560c8
push   $0x178
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560cc
push   $0x180
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560d0
push   $0x188
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560d4
push   $0x190
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560d8
push   $0x198
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560dc
push   $0x1a0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560e0
push   $0x1a8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560e4
push   $0x1b0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560e8
push   $0x1b8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560ec
push   $0x1c0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560f0
push   $0x1c8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560f4
push   $0x1d0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560f8
push   $0x1d8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x80560fc
push   $0x1e0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056100
push   $0x1e8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056104
push   $0x1f0
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056108
push   $0x1f8
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805610c
push   $0x200
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056110
push   $0x208
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056114
push   $0x210
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056118
push   $0x218
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805611c
push   $0x220
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056120
push   $0x228
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056124
push   $0x230
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056128
push   $0x238
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x805612c
push   $0x240
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056130
push   $0x248
jmp    8048f70 <endgrent@plt-0x10>
jmp    *0x8056134
push   $0x250
jmp    8048f70 <endgrent@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
mov    $0x10,%esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xb0,%esp
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%edi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804b0e0 <calloc@plt+0x1cc0>
movl   $0x80526fd,0x4(%esp)
movl   $0x6,(%esp)
call   80492e0 <setlocale@plt>
movl   $0x8051d6a,0x4(%esp)
movl   $0x8051d5c,(%esp)
call   8049370 <bindtextdomain@plt>
movl   $0x8051d5c,(%esp)
call   80490a0 <textdomain@plt>
movl   $0x804aef0,(%esp)
call   8051470 <fts_children+0x1e20>
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049f40 <calloc@plt+0xb20>
movl   $0xffffffff,0x2c(%esp)
movb   $0x0,0x28(%esp)
movl   $0x0,0x10(%esp)
movl   $0x8051e40,0xc(%esp)
movl   $0x8051d9f,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   80491d0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804964c <calloc@plt+0x22c>
cmp    $0x63,%eax
je     804963f <calloc@plt+0x21f>
jle    8049518 <calloc@plt+0xf8>
cmp    $0x80,%eax
je     8049632 <calloc@plt+0x212>
jg     8049550 <calloc@plt+0x130>
cmp    $0x68,%eax
je     8049625 <calloc@plt+0x205>
cmp    $0x76,%eax
xchg   %ax,%ax
je     8049592 <calloc@plt+0x172>
cmp    $0x66,%eax
jne    804953f <calloc@plt+0x11f>
movb   $0x1,0x45(%esp)
jmp    80494ad <calloc@plt+0x8d>
lea    0x0(%esi),%esi
cmp    $0x48,%eax
je     804961b <calloc@plt+0x1fb>
jle    8049578 <calloc@plt+0x158>
cmp    $0x50,%eax
je     8049611 <calloc@plt+0x1f1>
cmp    $0x52,%eax
nop
je     80495f3 <calloc@plt+0x1d3>
cmp    $0x4c,%eax
je     80495fd <calloc@plt+0x1dd>
movl   $0x1,(%esp)
call   8049ac0 <calloc@plt+0x6a0>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x82,%eax
je     8049607 <calloc@plt+0x1e7>
jl     80495e9 <calloc@plt+0x1c9>
cmp    $0x83,%eax
jne    804953f <calloc@plt+0x11f>
mov    0x8056204,%eax
mov    %eax,0x805621c
jmp    80494ad <calloc@plt+0x8d>
nop
cmp    $0xffffff7d,%eax
je     804959f <calloc@plt+0x17f>
cmp    $0xffffff7e,%eax
jne    804953f <calloc@plt+0x11f>
movl   $0x0,(%esp)
call   8049ac0 <calloc@plt+0x6a0>
movl   $0x0,0x38(%esp)
jmp    80494ad <calloc@plt+0x8d>
mov    0x8056148,%eax
movl   $0x0,0x18(%esp)
movl   $0x8051d7c,0x14(%esp)
movl   $0x8051d89,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x8056200,%eax
movl   $0x8051d58,0x8(%esp)
movl   $0x8051d99,0x4(%esp)
mov    %eax,(%esp)
call   804cc90 <calloc@plt+0x3870>
movl   $0x0,(%esp)
call   80491a0 <exit@plt>
movb   $0x0,0x28(%esp)
jmp    80494ad <calloc@plt+0x8d>
movb   $0x1,0x3c(%esp)
jmp    80494ad <calloc@plt+0x8d>
mov    $0x2,%esi
jmp    80494ad <calloc@plt+0x8d>
movb   $0x1,0x28(%esp)
jmp    80494ad <calloc@plt+0x8d>
mov    $0x10,%esi
jmp    80494ad <calloc@plt+0x8d>
mov    $0x11,%esi
jmp    80494ad <calloc@plt+0x8d>
movl   $0x0,0x2c(%esp)
jmp    80494ad <calloc@plt+0x8d>
movl   $0x1,0x2c(%esp)
jmp    80494ad <calloc@plt+0x8d>
movl   $0x1,0x38(%esp)
jmp    80494ad <calloc@plt+0x8d>
cmpb   $0x0,0x3c(%esp)
mov    %esi,%ecx
je     8049728 <calloc@plt+0x308>
cmp    $0x10,%esi
je     80497ba <calloc@plt+0x39a>
mov    0x80561e0,%eax
mov    %edi,%edx
mov    0x805621c,%esi
cmpl   $0x0,0x2c(%esp)
setne  0x44(%esp)
sub    %eax,%edx
test   %esi,%esi
je     80498e9 <calloc@plt+0x4c9>
test   %edx,%edx
jle    8049732 <calloc@plt+0x312>
lea    0x50(%esp),%eax
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x2c(%esp)
call   80493a0 <__xstat64@plt>
mov    0x2c(%esp),%ecx
test   %eax,%eax
jne    80497d2 <calloc@plt+0x3b2>
mov    0x6c(%esp),%esi
mov    %ecx,0x2c(%esp)
mov    %esi,(%esp)
call   8049f80 <calloc@plt+0xb60>
mov    0x2c(%esp),%ecx
mov    %eax,0x4c(%esp)
cmpb   $0x0,0x3c(%esp)
je     80496dd <calloc@plt+0x2bd>
cmpb   $0x0,0x28(%esp)
jne    8049822 <calloc@plt+0x402>
lea    0x38(%esp),%eax
or     $0x4,%ch
mov    %eax,0x18(%esp)
mov    0x80561e0,%eax
movl   $0xffffffff,0x14(%esp)
movl   $0xffffffff,0x10(%esp)
mov    %esi,0xc(%esp)
lea    (%ebx,%eax,4),%eax
movl   $0xffffffff,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   804a040 <calloc@plt+0xc20>
test   %al,%al
sete   %al
movzbl %al,%eax
mov    %eax,(%esp)
call   80491a0 <exit@plt>
mov    $0x10,%ecx
jmp    8049662 <calloc@plt+0x242>
cmp    %eax,%edi
jg     804976f <calloc@plt+0x34f>
movl   $0x5,0x8(%esp)
movl   $0x8051da8,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
jmp    804953f <calloc@plt+0x11f>
mov    -0x4(%ebx,%edi,4),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051db8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049070 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
jmp    804953f <calloc@plt+0x11f>
cmpl   $0x1,0x2c(%esp)
je     80498a0 <calloc@plt+0x480>
movl   $0x0,0x2c(%esp)
jmp    8049662 <calloc@plt+0x242>
mov    %esi,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051cf8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049070 <dcgettext@plt>
mov    %eax,%esi
call   8049290 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
mov    0x2c(%esp),%ecx
jmp    80496b3 <calloc@plt+0x293>
movl   $0x805620c,(%esp)
mov    %ecx,0x2c(%esp)
call   804c610 <calloc@plt+0x31f0>
mov    0x2c(%esp),%ecx
test   %eax,%eax
mov    %eax,0x40(%esp)
jne    80496dd <calloc@plt+0x2bd>
movl   $0x8052342,(%esp)
mov    %ecx,0x28(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051cf8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x2c(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%edi
call   8049290 <__errno_location@plt>
mov    0x2c(%esp),%edx
mov    %edi,0x8(%esp)
mov    %edx,0xc(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
mov    0x28(%esp),%ecx
jmp    80496dd <calloc@plt+0x2bd>
movl   $0x5,0x8(%esp)
movl   $0x8051ccc,0x4(%esp)
movl   $0x0,(%esp)
mov    %esi,0x24(%esp)
call   8049070 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
mov    0x24(%esp),%ecx
movl   $0x0,0x2c(%esp)
jmp    8049662 <calloc@plt+0x242>
sub    $0x1,%edx
jle    8049732 <calloc@plt+0x312>
mov    (%ebx,%eax,4),%edi
lea    0x1(%eax),%edx
mov    %edx,0x80561e0
cmpb   $0x0,(%edi)
cmovne %edi,%esi
mov    %esi,0x4c(%esp)
or     $0xffffffff,%esi
cmpb   $0x0,(%edi)
je     80496cb <calloc@plt+0x2ab>
mov    %edi,(%esp)
mov    %ecx,0x2c(%esp)
call   80493c0 <getgrnam@plt>
mov    0x2c(%esp),%ecx
test   %eax,%eax
je     804993d <calloc@plt+0x51d>
mov    0x8(%eax),%esi
mov    %ecx,0x2c(%esp)
call   8048f80 <endgrent@plt>
mov    0x2c(%esp),%ecx
jmp    80496cb <calloc@plt+0x2ab>
lea    0x50(%esp),%eax
movl   $0x80526fd,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
mov    %ecx,0x2c(%esp)
call   804d0e0 <calloc@plt+0x3cc0>
mov    0x2c(%esp),%ecx
test   %eax,%eax
je     80499b7 <calloc@plt+0x597>
mov    %edi,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051dd1,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
mov    0x2c(%esp),%ecx
mov    0x50(%esp),%esi
jmp    804992b <calloc@plt+0x50b>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8051460
push   $0x80513f0
push   %ecx
push   %esi
push   $0x8049430
call   8049250 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80561a3,%eax
sub    $0x80561a0,%eax
cmp    $0x6,%eax
ja     8049a10 <calloc@plt+0x5f0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049a0f <calloc@plt+0x5ef>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80561a0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80561a0,%eax
sub    $0x80561a0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049a49 <calloc@plt+0x629>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049a48 <calloc@plt+0x628>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80561a0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8056208
jne    8049a8c <calloc@plt+0x66c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049a00 <calloc@plt+0x5e0>
movb   $0x1,0x8056208
leave
repz ret
xchg   %ax,%ax
mov    0x8055f10,%eax
test   %eax,%eax
je     8049ab8 <calloc@plt+0x698>
mov    $0x0,%eax
test   %eax,%eax
je     8049ab8 <calloc@plt+0x698>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8055f10,(%esp)
call   *%eax
leave
jmp    8049a30 <calloc@plt+0x610>
nop
jmp    8049a30 <calloc@plt+0x610>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x8056228,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049b14 <calloc@plt+0x6f4>
movl   $0x80514c8,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   8049360 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   80491a0 <exit@plt>
movl   $0x80514f0,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051548,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80515b4,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051680,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051768,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80517e0,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051860,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80518cc,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051914,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051ae8,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051b18,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
mov    0x8056228,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051b50,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804afc0 <calloc@plt+0x1ba0>
movl   $0x5,0x8(%esp)
movl   $0x8051d17,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8051d2e,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051d44,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x8051bd8,0xc(%esp)
movl   $0x8051d58,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051c00,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   80492e0 <setlocale@plt>
test   %eax,%eax
je     8049e2b <calloc@plt+0xa0b>
movl   $0x3,0x8(%esp)
movl   $0x8051d66,0x4(%esp)
mov    %eax,(%esp)
call   8049380 <strncmp@plt>
test   %eax,%eax
jne    8049e6f <calloc@plt+0xa4f>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804afc0 <calloc@plt+0x1ba0>
movl   $0x5,0x8(%esp)
movl   $0x8051c88,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
jmp    8049b0c <calloc@plt+0x6ec>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804afc0 <calloc@plt+0x1ba0>
movl   $0x5,0x8(%esp)
movl   $0x8051c40,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
jmp    8049e2b <calloc@plt+0xa0b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x10,%esp
test   %eax,%eax
je     8049f20 <calloc@plt+0xb00>
test   %edx,%edx
mov    %eax,(%esp)
je     8049f27 <calloc@plt+0xb07>
call   8049220 <strlen@plt>
mov    %ebx,(%esp)
mov    %eax,%edi
call   8049220 <strlen@plt>
lea    0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   804cd80 <calloc@plt+0x3960>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   8049080 <stpcpy@plt>
movb   $0x3a,(%eax)
add    $0x1,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049100 <strcpy@plt>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
je     8049f37 <calloc@plt+0xb17>
mov    %edx,(%esp)
call   804cfc0 <calloc@plt+0x3ba0>
add    $0x10,%esp
pop    %ebx
pop    %esi
mov    %eax,%edi
mov    %edi,%eax
pop    %edi
ret
xor    %edi,%edi
jmp    8049f10 <calloc@plt+0xaf0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movl   $0x2,(%eax)
movl   $0x0,0x8(%eax)
movb   $0x1,0xc(%eax)
movb   $0x0,0x4(%eax)
movb   $0x0,0xd(%eax)
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
repz ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x38,%esp
mov    0x40(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    %ebx,(%esp)
call   80493f0 <getgrgid@plt>
test   %eax,%eax
je     8049fc0 <calloc@plt+0xba0>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804cfc0 <calloc@plt+0x3ba0>
mov    0x2c(%esp),%edx
xor    %gs:0x14,%edx
jne    8049fda <calloc@plt+0xbba>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x17(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   804b060 <calloc@plt+0x1c40>
jmp    8049fa2 <calloc@plt+0xb82>
call   8049090 <__stack_chk_fail@plt>
nop
push   %ebx
sub    $0x38,%esp
mov    0x40(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    %ebx,(%esp)
call   8048fb0 <getpwuid@plt>
test   %eax,%eax
je     804a020 <calloc@plt+0xc00>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804cfc0 <calloc@plt+0x3ba0>
mov    0x2c(%esp),%edx
xor    %gs:0x14,%edx
jne    804a03a <calloc@plt+0xc1a>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x17(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   804b060 <calloc@plt+0x1c40>
jmp    804a002 <calloc@plt+0xbe2>
call   8049090 <__stack_chk_fail@plt>
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x10c,%esp
cmpl   $0xffffffff,0x130(%esp)
mov    0x138(%esp),%edi
jne    804a06b <calloc@plt+0xc4b>
cmpl   $0xffffffff,0x134(%esp)
je     804a580 <calloc@plt+0x1160>
or     0x124(%esp),%eax
mov    %edi,%ebp
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x120(%esp),%eax
mov    %eax,(%esp)
call   804d040 <calloc@plt+0x3c20>
mov    %eax,0x18(%esp)
call   8049290 <__errno_location@plt>
movb   $0x1,0x28(%esp)
mov    %eax,0x38(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804ee00 <fts_read>
test   %eax,%eax
mov    %eax,%ebx
je     804a708 <calloc@plt+0x12e8>
movzwl 0x3c(%ebx),%edx
mov    0x1c(%eax),%eax
mov    0x18(%ebx),%edi
cmp    $0xa,%dx
mov    %eax,0x24(%esp)
ja     804a390 <calloc@plt+0xf70>
movzwl %dx,%eax
jmp    *0x80522c0(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%ebx),%edi
test   %edi,%edi
jne    804a0f2 <calloc@plt+0xcd2>
mov    0x10(%ebx),%esi
test   %esi,%esi
je     804a900 <calloc@plt+0x14e0>
cmpb   $0x0,0xd(%ebp)
je     804a8d8 <calloc@plt+0x14b8>
movb   $0x0,0x1c(%esp)
xor    %esi,%esi
xor    %edx,%edx
movb   $0x1,0x28(%esp)
movb   $0x0,0x20(%esp)
mov    0x0(%ebp),%eax
cmp    $0x2,%eax
je     804a289 <calloc@plt+0xe69>
cmpb   $0x0,0x20(%esp)
je     804a168 <calloc@plt+0xd48>
test   %dl,%dl
je     804a168 <calloc@plt+0xd48>
movzbl 0x28(%esp),%ecx
test   %cl,%cl
je     804a168 <calloc@plt+0xd48>
cmpl   $0xffffffff,0x128(%esp)
je     804a14a <calloc@plt+0xd2a>
mov    0x18(%esi),%edi
mov    $0x2,%ecx
cmp    %edi,0x128(%esp)
jne    804a188 <calloc@plt+0xd68>
cmpl   $0xffffffff,0x12c(%esp)
je     804a168 <calloc@plt+0xd48>
mov    0x1c(%esi),%edi
mov    $0x2,%ecx
cmp    %edi,0x12c(%esp)
jne    804a188 <calloc@plt+0xd68>
lea    0x0(%esi),%esi
test   %eax,%eax
jne    804a289 <calloc@plt+0xe69>
test   %dl,%dl
mov    $0x3,%ecx
je     804a188 <calloc@plt+0xd68>
movzbl 0x28(%esp),%eax
cmp    $0x1,%al
sbb    %ecx,%ecx
and    $0xfffffffd,%ecx
add    $0x4,%ecx
test   %esi,%esi
je     804a830 <calloc@plt+0x1410>
mov    0x18(%esi),%eax
mov    %ecx,0x2c(%esp)
mov    %eax,(%esp)
call   8049fe0 <calloc@plt+0xbc0>
mov    %eax,0x20(%esp)
mov    0x1c(%esi),%eax
mov    %eax,(%esp)
call   8049f80 <calloc@plt+0xb60>
mov    0x2c(%esp),%ecx
mov    %eax,0x28(%esp)
cmp    $0x1,%ecx
mov    0x14(%ebp),%edi
mov    0x10(%ebp),%esi
je     804a7b8 <calloc@plt+0x1398>
mov    %edi,%edx
mov    %esi,%eax
mov    %ecx,0x30(%esp)
call   8049ec0 <calloc@plt+0xaa0>
mov    0x28(%esp),%edx
mov    %eax,0x34(%esp)
xor    %eax,%eax
test   %edi,%edi
cmove  %eax,%edx
test   %esi,%esi
cmovne 0x20(%esp),%eax
call   8049ec0 <calloc@plt+0xaa0>
mov    0x30(%esp),%ecx
cmp    $0x3,%ecx
mov    %eax,0x2c(%esp)
je     804a780 <calloc@plt+0x1360>
cmp    $0x4,%ecx
movl   $0x5,0x8(%esp)
je     804a698 <calloc@plt+0x1278>
test   %esi,%esi
je     804aa40 <calloc@plt+0x1620>
movl   $0x8052188,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
mov    0x34(%esp),%edi
mov    0x2c(%esp),%ecx
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80492b0 <__printf_chk@plt>
mov    0x2c(%esp),%ecx
mov    %ecx,(%esp)
call   8049000 <free@plt>
mov    %edi,(%esp)
call   8049000 <free@plt>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
movzbl 0x1c(%esp),%eax
cmpb   $0x0,0x4(%ebp)
mov    %al,0x28(%esp)
jne    804a0a1 <calloc@plt+0xc81>
mov    0x18(%esp),%eax
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804f610 <fts_set>
jmp    804a0a1 <calloc@plt+0xc81>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0xd(%ebp)
jne    804a0fc <calloc@plt+0xcdc>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x8051de0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
jmp    804a0fc <calloc@plt+0xcdc>
lea    0x0(%esi),%esi
cmpb   $0x0,0x4(%ebp)
jne    804a390 <calloc@plt+0xf70>
lea    0x0(%esi),%esi
jmp    804a0a1 <calloc@plt+0xc81>
lea    0x0(%esi),%esi
cmpb   $0x0,0xd(%ebp)
jne    804a0fc <calloc@plt+0xcdc>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051f31,0x4(%esp)
mov    %eax,%esi
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
jmp    804a0fc <calloc@plt+0xcdc>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804d0b0 <calloc@plt+0x3c90>
mov    0x1c(%esp),%edx
test   %al,%al
jne    804a988 <calloc@plt+0x1568>
cmpl   $0xffffffff,0x130(%esp)
sete   %al
cmpl   $0xffffffff,0x134(%esp)
mov    %al,0x2c(%esp)
sete   %cl
and    %cl,%al
mov    %cl,0x30(%esp)
mov    %al,0x1c(%esp)
je     804a3c0 <calloc@plt+0xfa0>
cmpl   $0x2,0x0(%ebp)
je     804a848 <calloc@plt+0x1428>
cmpb   $0x0,0xc(%ebp)
lea    0x44(%ebx),%esi
je     804a3dc <calloc@plt+0xfbc>
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     804a9d8 <calloc@plt+0x15b8>
cmpb   $0x0,0x2c(%esp)
jne    804a6e0 <calloc@plt+0x12c0>
mov    0x18(%esi),%eax
cmp    %eax,0x130(%esp)
movb   $0x0,0x20(%esp)
je     804a6e0 <calloc@plt+0x12c0>
lea    -0x1(%edx),%eax
cmp    $0x1,%ax
jbe    804a5a0 <calloc@plt+0x1180>
and    $0xfffffffd,%edx
cmp    $0x4,%dx
je     804a5a0 <calloc@plt+0x1180>
cmpb   $0x0,0x20(%esp)
je     804aeb9 <calloc@plt+0x1a99>
cmpb   $0x0,0xc(%ebp)
jne    804a630 <calloc@plt+0x1210>
mov    0x12c(%esp),%eax
movl   $0x100,0x10(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    0x1c(%eax),%eax
mov    %eax,(%esp)
call   8049320 <fchownat@plt>
test   %eax,%eax
jne    804a6c0 <calloc@plt+0x12a0>
movzbl 0x28(%esp),%eax
movb   $0x1,0x28(%esp)
mov    %al,0x1c(%esp)
movzbl 0x20(%esp),%edx
jmp    804a10f <calloc@plt+0xcef>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x4(%ebp)
je     804a390 <calloc@plt+0xf70>
mov    0x8(%ebp),%eax
test   %eax,%eax
je     804a0a1 <calloc@plt+0xc81>
mov    0x9c(%ebx),%edx
mov    0xa0(%ebx),%ecx
xor    0x4(%eax),%ecx
xor    (%eax),%edx
or     %edx,%ecx
jne    804a0a1 <calloc@plt+0xc81>
mov    0x44(%ebx),%edx
mov    0x48(%ebx),%ecx
xor    0xc(%eax),%ecx
xor    0x8(%eax),%edx
or     %edx,%ecx
jne    804a0a1 <calloc@plt+0xc81>
mov    0x24(%esp),%eax
cmpb   $0x2f,(%eax)
jne    804ad4f <calloc@plt+0x192f>
cmpb   $0x0,0x1(%eax)
jne    804ad4f <calloc@plt+0x192f>
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051ff4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052060,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
mov    0x18(%esp),%edi
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804f610 <fts_set>
mov    %edi,(%esp)
call   804ee00 <fts_read>
movb   $0x0,0x28(%esp)
jmp    804a0a1 <calloc@plt+0xc81>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0xc(%edi)
jne    804a06b <calloc@plt+0xc4b>
xor    %eax,%eax
cmpl   $0x2,(%edi)
sete   %al
shl    $0x3,%eax
jmp    804a06b <calloc@plt+0xc4b>
lea    0x0(%esi),%esi
mov    0x8(%ebp),%eax
test   %eax,%eax
je     804a416 <calloc@plt+0xff6>
mov    0x58(%esi),%edx
mov    0x5c(%esi),%ecx
xor    0x4(%eax),%ecx
xor    (%eax),%edx
or     %edx,%ecx
jne    804a416 <calloc@plt+0xff6>
mov    (%esi),%edx
mov    0x4(%esi),%ecx
xor    0xc(%eax),%ecx
xor    0x8(%eax),%edx
or     %edx,%ecx
jne    804a416 <calloc@plt+0xff6>
mov    0x24(%esp),%eax
cmpb   $0x2f,(%eax)
jne    804ac20 <calloc@plt+0x1800>
cmpb   $0x0,0x1(%eax)
jne    804ac20 <calloc@plt+0x1800>
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051ff4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049070 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
jmp    804ac88 <calloc@plt+0x1868>
nop
mov    0x18(%esp),%eax
cmpb   $0x0,0x1c(%esp)
mov    0x1c(%eax),%edx
je     804a800 <calloc@plt+0x13e0>
mov    0x12c(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x8(%esp)
call   8049320 <fchownat@plt>
test   %eax,%eax
je     804ac08 <calloc@plt+0x17e8>
movzbl 0xd(%ebp),%eax
test   %al,%al
mov    %al,0x1c(%esp)
je     804a870 <calloc@plt+0x1450>
movb   $0x0,0x1c(%esp)
xor    %edx,%edx
movb   $0x1,0x28(%esp)
jmp    804a10f <calloc@plt+0xcef>
lea    0x0(%esi),%esi
test   %esi,%esi
je     804aa18 <calloc@plt+0x15f8>
movl   $0x80522a0,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
cmpl   $0x5f,(%eax)
jne    804a674 <calloc@plt+0x1254>
movzbl 0x28(%esp),%eax
movb   $0x0,0x28(%esp)
mov    %al,0x1c(%esp)
jmp    804a472 <calloc@plt+0x1052>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x30(%esp)
movb   $0x1,0x20(%esp)
jne    804a3fc <calloc@plt+0xfdc>
mov    0x1c(%esi),%eax
cmp    %eax,0x134(%esp)
sete   0x20(%esp)
jmp    804a3fc <calloc@plt+0xfdc>
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
mov    %ebp,%edi
mov    (%eax),%ebp
test   %ebp,%ebp
je     804a723 <calloc@plt+0x1303>
cmpb   $0x0,0xd(%edi)
movb   $0x0,0x28(%esp)
je     804a948 <calloc@plt+0x1528>
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804ec70 <fts_close>
test   %eax,%eax
je     804a76e <calloc@plt+0x134e>
movl   $0x5,0x8(%esp)
movl   $0x8051fe2,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
movb   $0x0,0x28(%esp)
movzbl 0x28(%esp),%eax
add    $0x10c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x2c(%esp),%eax
movl   $0x5,0x8(%esp)
test   %eax,%eax
je     804ab80 <calloc@plt+0x1760>
test   %esi,%esi
je     804aa68 <calloc@plt+0x1648>
movl   $0x80521d4,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
nop
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8052150,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
jmp    804a271 <calloc@plt+0xe51>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%esi),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804aa90 <calloc@plt+0x1670>
cmp    $0x4000,%eax
jne    804a642 <calloc@plt+0x1222>
movl   $0x10900,0x34(%esp)
jmp    804aa98 <calloc@plt+0x1678>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x20(%esp)
movl   $0x0,0x28(%esp)
jmp    804a1b6 <calloc@plt+0xd96>
lea    0x0(%esi),%esi
mov    0x8(%ebp),%ecx
test   %ecx,%ecx
jne    804a3c0 <calloc@plt+0xfa0>
cmpb   $0x0,0xc(%ebp)
lea    0x44(%ebx),%esi
jne    804a3c9 <calloc@plt+0xfa9>
movb   $0x1,0x20(%esp)
jmp    804a3fc <calloc@plt+0xfdc>
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
cmpl   $0xffffffff,0x128(%esp)
movl   $0x5,0x8(%esp)
mov    %eax,%edi
je     804a928 <calloc@plt+0x1508>
movl   $0x8051f60,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %edi,0xc(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
xor    %edx,%edx
movb   $0x1,0x28(%esp)
jmp    804a10f <calloc@plt+0xcef>
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051f20,0x4(%esp)
mov    %eax,%esi
jmp    804a340 <calloc@plt+0xf20>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
movl   $0x1,0x10(%ebx)
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804f610 <fts_set>
jmp    804a0a1 <calloc@plt+0xc81>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8051f79,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
jmp    804a8a8 <calloc@plt+0x1488>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
movl   $0x8051f10,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
jmp    804a723 <calloc@plt+0x1303>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8052094,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049070 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
movb   $0x0,0x28(%esp)
jmp    804a0a1 <calloc@plt+0xc81>
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %edi,0x8(%esp)
mov    0x1c(%eax),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   80490b0 <__fxstatat64@plt>
test   %eax,%eax
jne    804ab50 <calloc@plt+0x1730>
movzwl 0x3c(%ebx),%edx
lea    0x40(%esp),%esi
jmp    804a3dc <calloc@plt+0xfbc>
test   %edi,%edi
je     804add7 <calloc@plt+0x19b7>
movl   $0x8051fac,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
je     804adbc <calloc@plt+0x199c>
movl   $0x80521b0,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
je     804adf2 <calloc@plt+0x19d2>
movl   $0x8052204,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x900,0x34(%esp)
mov    0x34(%esp),%eax
mov    %edx,(%esp)
mov    %edi,0x4(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x8(%esp)
call   8049020 <__openat64_2@plt>
mov    0x3c(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
js     804ab24 <calloc@plt+0x1704>
lea    0xa0(%esp),%eax
mov    %ecx,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x34(%esp)
call   80490e0 <__fxstat64@plt>
mov    0x34(%esp),%ecx
test   %eax,%eax
jne    804acc6 <calloc@plt+0x18a6>
mov    0x58(%esi),%eax
mov    0x5c(%esi),%edx
xor    0xfc(%esp),%edx
xor    0xf8(%esp),%eax
or     %eax,%edx
je     804abb3 <calloc@plt+0x1793>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   80493d0 <close@plt>
mov    0x38(%esp),%eax
movb   $0x1,0x28(%esp)
movb   $0x0,0x20(%esp)
mov    %edi,(%eax)
jmp    804a472 <calloc@plt+0x1052>
mov    0x38(%esp),%eax
cmpl   $0xd,(%eax)
jne    804a674 <calloc@plt+0x1254>
mov    0x10(%esi),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804ae0d <calloc@plt+0x19ed>
mov    0x18(%esp),%eax
mov    0x1c(%eax),%edx
jmp    804a642 <calloc@plt+0x1222>
cmpb   $0x0,0xd(%ebp)
je     804acdf <calloc@plt+0x18bf>
xor    %edx,%edx
lea    0x40(%esp),%esi
movzbl 0x28(%esp),%eax
movb   $0x0,0x20(%esp)
movb   $0x1,0x28(%esp)
and    %edx,%eax
mov    %al,0x1c(%esp)
jmp    804a10f <calloc@plt+0xcef>
lea    0x0(%esi),%esi
test   %esi,%esi
je     804ad2c <calloc@plt+0x190c>
movl   $0x8052254,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
mov    0x34(%esp),%eax
movl   $0x0,0x34(%esp)
mov    %eax,0x2c(%esp)
jmp    804a22d <calloc@plt+0xe0d>
mov    (%esi),%eax
mov    0x4(%esi),%edx
xor    0xa4(%esp),%edx
xor    0xa0(%esp),%eax
or     %eax,%edx
jne    804ab01 <calloc@plt+0x16e1>
cmpb   $0x0,0x2c(%esp)
jne    804ae5b <calloc@plt+0x1a3b>
mov    0xb8(%esp),%eax
cmp    %eax,0x130(%esp)
je     804ae5b <calloc@plt+0x1a3b>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   80493d0 <close@plt>
mov    0x38(%esp),%eax
mov    %edi,(%eax)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x28(%esp),%eax
movzbl 0x20(%esp),%edx
movb   $0x1,0x28(%esp)
mov    %al,0x1c(%esp)
jmp    804a10f <calloc@plt+0xcef>
movl   $0x8052342,0x4(%esp)
movl   $0x1,(%esp)
call   804c5d0 <calloc@plt+0x31b0>
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
call   804c5d0 <calloc@plt+0x31b0>
movl   $0x5,0x8(%esp)
movl   $0x8052024,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049070 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052060,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
movb   $0x0,0x28(%esp)
jmp    804a0a1 <calloc@plt+0xc81>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   80493d0 <close@plt>
mov    0x38(%esp),%eax
mov    %edi,(%eax)
jmp    804a674 <calloc@plt+0x1254>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c5f0 <calloc@plt+0x31d0>
movl   $0x5,0x8(%esp)
movl   $0x8051f4a,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
jmp    804ab5a <calloc@plt+0x173a>
test   %edi,%edi
je     804ae40 <calloc@plt+0x1a20>
movl   $0x805227c,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804ab9e <calloc@plt+0x177e>
movl   $0x8052342,0x4(%esp)
movl   $0x1,(%esp)
call   804c5d0 <calloc@plt+0x31b0>
movl   $0x0,(%esp)
mov    %eax,%edi
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
call   804c5d0 <calloc@plt+0x31b0>
movl   $0x5,0x8(%esp)
movl   $0x8052024,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049070 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <error@plt>
jmp    804a51b <calloc@plt+0x10fb>
movl   $0x8051f8e,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
movl   $0x8051fc8,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
movl   $0x8052230,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804a22d <calloc@plt+0xe0d>
mov    0x34(%esp),%ecx
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
or     $0x1,%ecx
mov    %ecx,0x8(%esp)
call   8049020 <__openat64_2@plt>
test   %eax,%eax
mov    %eax,%ecx
jns    804aaba <calloc@plt+0x169a>
mov    0x38(%esp),%eax
cmpl   $0xd,(%eax)
jne    804a674 <calloc@plt+0x1254>
jmp    804ab44 <calloc@plt+0x1724>
movl   $0x8052230,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
jmp    804ab9e <calloc@plt+0x177e>
cmpb   $0x0,0x30(%esp)
jne    804ae76 <calloc@plt+0x1a56>
mov    0xbc(%esp),%eax
cmp    %eax,0x134(%esp)
jne    804abed <calloc@plt+0x17cd>
mov    0x12c(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x1c(%esp)
mov    %eax,0x8(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x4(%esp)
call   8049240 <fchown@plt>
mov    0x1c(%esp),%ecx
test   %eax,%eax
jne    804acc6 <calloc@plt+0x18a6>
mov    %ecx,(%esp)
call   80493d0 <close@plt>
test   %eax,%eax
jne    804a674 <calloc@plt+0x1254>
jmp    804ac08 <calloc@plt+0x17e8>
mov    $0x1,%edx
xchg   %ax,%ax
jmp    804ab60 <calloc@plt+0x1740>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8056224
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8056220
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8056200,%eax
mov    %eax,(%esp)
call   804f850 <fts_children+0x200>
test   %eax,%eax
je     804af19 <calloc@plt+0x1af9>
cmpb   $0x0,0x8056220
je     804af30 <calloc@plt+0x1b10>
call   8049290 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804af30 <calloc@plt+0x1b10>
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   804f850 <fts_children+0x200>
test   %eax,%eax
jne    804af88 <calloc@plt+0x1b68>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x80522f1,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8056224,%eax
test   %eax,%eax
je     804af95 <calloc@plt+0x1b75>
mov    %eax,(%esp)
call   804c3c0 <calloc@plt+0x2fa0>
mov    %eax,%esi
call   8049290 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x80522fd,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
mov    0x805614c,%eax
mov    %eax,(%esp)
call   8048fd0 <_exit@plt>
call   8049290 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8051de0,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049140 <error@plt>
jmp    804af88 <calloc@plt+0x1b68>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804afdb <calloc@plt+0x1bbb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804afd0 <calloc@plt+0x1bb0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804b009 <calloc@plt+0x1be9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804b009 <calloc@plt+0x1be9>
cmp    $0x2f,%cl
je     804b010 <calloc@plt+0x1bf0>
test   %bl,%bl
je     804afe8 <calloc@plt+0x1bc8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804aff2 <calloc@plt+0x1bd2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804afe8 <calloc@plt+0x1bc8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049220 <strlen@plt>
cmp    $0x1,%eax
jbe    804b03f <calloc@plt+0x1c1f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804b048 <calloc@plt+0x1c28>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804b035 <calloc@plt+0x1c15>
nop
jmp    804b03f <calloc@plt+0x1c1f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8051290 <fts_children+0x1c40>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8051160 <fts_children+0x1b10>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    804b080 <calloc@plt+0x1c60>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804b163 <calloc@plt+0x1d43>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80492f0 <strrchr@plt>
test   %eax,%eax
je     804b14f <calloc@plt+0x1d2f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804b14f <calloc@plt+0x1d2f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x805233c,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804b14f <calloc@plt+0x1d2f>
mov    $0x3,%ecx
mov    $0x8052344,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804b14f <calloc@plt+0x1d2f>
lea    0x4(%eax),%ebx
mov    %ebx,0x80561a0
mov    %ebx,0x8056228
mov    %ebx,0x80561c0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80561a4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052304,(%esp)
mov    %eax,0xc(%esp)
call   80490d0 <fwrite@plt>
call   8049390 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804b1b1 <calloc@plt+0x1d91>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049390 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804b1f0 <calloc@plt+0x1dd0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8050a40 <fts_children+0x13f0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804b258 <calloc@plt+0x1e38>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804b240 <calloc@plt+0x1e20>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x2d,0x3(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x38,0x4(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x0,0x5(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x60,(%esi)
mov    $0x8052357,%eax
mov    $0x8052348,%edx
cmovne %edx,%eax
jmp    804b1e8 <calloc@plt+0x1dc8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8052351,%eax
cmp    $0x7,%edi
mov    $0x805234f,%edx
cmovne %edx,%eax
jmp    804b1e8 <calloc@plt+0x1dc8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804b240 <calloc@plt+0x1e20>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x31,0x2(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x38,0x3(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x30,0x4(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x33,0x5(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x30,0x6(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x0,0x7(%eax)
jne    804b240 <calloc@plt+0x1e20>
cmpb   $0x60,(%esi)
mov    $0x8052353,%eax
mov    $0x805234c,%edx
cmovne %edx,%eax
jmp    804b1e8 <calloc@plt+0x1dc8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   80490f0 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804bb88 <calloc@plt+0x2768>
mov    0x94(%esp),%eax
jmp    *0x80523a0(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804b990 <calloc@plt+0x2570>
test   %al,%al
je     804b9a3 <calloc@plt+0x2583>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804b978 <calloc@plt+0x2558>
cmpb   $0x0,0x58(%esp)
je     804b978 <calloc@plt+0x2558>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804b978 <calloc@plt+0x2558>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049060 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804ba10 <calloc@plt+0x25f0>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804b728 <calloc@plt+0x2308>
movzbl %bl,%eax
jmp    *0x80523c4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804b568 <calloc@plt+0x2148>
cmpl   $0x3,0x94(%esp)
jne    804b4c8 <calloc@plt+0x20a8>
testb  $0x4,0x98(%esp)
je     804b4c8 <calloc@plt+0x20a8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804b4c8 <calloc@plt+0x20a8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804b4c8 <calloc@plt+0x20a8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804b4c8 <calloc@plt+0x20a8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804b4c8 <calloc@plt+0x20a8>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmp    %edi,%ebp
jae    804b48e <calloc@plt+0x206e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b49e <calloc@plt+0x207e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b4ae <calloc@plt+0x208e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804b4be <calloc@plt+0x209e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804b4d6 <calloc@plt+0x20b6>
cmpb   $0x0,0x5a(%esp)
jne    804b4fb <calloc@plt+0x20db>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804b4fb <calloc@plt+0x20db>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804b502 <calloc@plt+0x20e2>
cmpb   $0x0,0x24(%esp)
je     804b518 <calloc@plt+0x20f8>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmp    %edi,%ebp
jae    804b515 <calloc@plt+0x20f5>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804b526 <calloc@plt+0x2106>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804b368 <calloc@plt+0x1f48>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804bb78 <calloc@plt+0x2758>
test   %al,%al
jne    804b4c8 <calloc@plt+0x20a8>
test   %esi,%esi
jne    804b4c8 <calloc@plt+0x20a8>
cmpl   $0x2,0x94(%esp)
jne    804b4c8 <calloc@plt+0x20a8>
nop
cmpb   $0x0,0x2f(%esp)
je     804b4c8 <calloc@plt+0x20a8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b2b0 <calloc@plt+0x1e90>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804bca2 <calloc@plt+0x2882>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804bbeb <calloc@plt+0x27cb>
cmpb   $0x0,0x58(%esp)
je     804b4c8 <calloc@plt+0x20a8>
mov    %eax,%ebx
jmp    804b502 <calloc@plt+0x20e2>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804b5f3 <calloc@plt+0x21d3>
nop
mov    $0x66,%eax
jmp    804b5f3 <calloc@plt+0x21d3>
nop
mov    $0x76,%eax
jmp    804b5f3 <calloc@plt+0x21d3>
nop
mov    $0x6e,%eax
jmp    804b5e5 <calloc@plt+0x21c5>
nop
mov    $0x74,%eax
jmp    804b5e5 <calloc@plt+0x21c5>
nop
cmpb   $0x0,0x58(%esp)
je     804bb60 <calloc@plt+0x2740>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmp    %edi,%ebp
jae    804b652 <calloc@plt+0x2232>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804b698 <calloc@plt+0x2278>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804b698 <calloc@plt+0x2278>
cmp    %eax,%edi
ja     804bc00 <calloc@plt+0x27e0>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b68e <calloc@plt+0x226e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804b4d6 <calloc@plt+0x20b6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804b5f3 <calloc@plt+0x21d3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804b6ce <calloc@plt+0x22ae>
cmpb   $0x0,0x2f(%esp)
je     804b6ce <calloc@plt+0x22ae>
test   %dl,%dl
jne    804b518 <calloc@plt+0x20f8>
mov    %ebx,%eax
jmp    804b5e5 <calloc@plt+0x21c5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804b4c8 <calloc@plt+0x20a8>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmp    %edi,%ebp
jae    804b6fd <calloc@plt+0x22dd>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b70d <calloc@plt+0x22ed>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b71d <calloc@plt+0x22fd>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804b4c8 <calloc@plt+0x20a8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804ba20 <calloc@plt+0x2600>
call   8049410 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804b4c8 <calloc@plt+0x20a8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804b7d4 <calloc@plt+0x23b4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmp    %edi,%ebp
jae    804b783 <calloc@plt+0x2363>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b796 <calloc@plt+0x2376>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b7ac <calloc@plt+0x238c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804b51b <calloc@plt+0x20fb>
cmp    %edi,%ebp
jae    804b7c9 <calloc@plt+0x23a9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804b770 <calloc@plt+0x2350>
cmpb   $0x0,0x24(%esp)
je     804b7b5 <calloc@plt+0x2395>
cmp    %edi,%ebp
jae    804b7e7 <calloc@plt+0x23c7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804b7b5 <calloc@plt+0x2395>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bca7 <calloc@plt+0x2887>
test   %edi,%edi
je     804bbad <calloc@plt+0x278d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052351,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804b348 <calloc@plt+0x1f28>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052351,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804b348 <calloc@plt+0x1f28>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804b348 <calloc@plt+0x1f28>
lea    0x0(%esi,%eiz,1),%esi
je     804b8bc <calloc@plt+0x249c>
mov    0x94(%esp),%edx
mov    $0x805235b,%eax
call   804b1c0 <calloc@plt+0x1da0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x805234f,%eax
call   804b1c0 <calloc@plt+0x1da0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804b8ea <calloc@plt+0x24ca>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b8ea <calloc@plt+0x24ca>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804b8df <calloc@plt+0x24bf>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b8d8 <calloc@plt+0x24b8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049220 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804b348 <calloc@plt+0x1f28>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805234f,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804b348 <calloc@plt+0x1f28>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bcc3 <calloc@plt+0x28a3>
test   %edi,%edi
je     804bbcc <calloc@plt+0x27ac>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805234f,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804b348 <calloc@plt+0x1f28>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804b400 <calloc@plt+0x1fe0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804b388 <calloc@plt+0x1f68>
test   %ebp,%ebp
jne    804b9bc <calloc@plt+0x259c>
cmpl   $0x2,0x94(%esp)
jne    804b9bc <calloc@plt+0x259c>
cmpb   $0x0,0x2f(%esp)
jne    804b578 <calloc@plt+0x2158>
cmpb   $0x0,0x2f(%esp)
jne    804b9f2 <calloc@plt+0x25d2>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804b9f2 <calloc@plt+0x25d2>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b9f2 <calloc@plt+0x25d2>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804b9e7 <calloc@plt+0x25c7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b9e0 <calloc@plt+0x25c0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804b5c2 <calloc@plt+0x21a2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804b5c2 <calloc@plt+0x21a2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804b400 <calloc@plt+0x1fe0>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804bb8d <calloc@plt+0x276d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049120 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804bc0d <calloc@plt+0x27ed>
cmp    $0xffffffff,%eax
je     804bc28 <calloc@plt+0x2808>
cmp    $0xfffffffe,%eax
je     804bc43 <calloc@plt+0x2823>
cmpb   $0x0,0x2f(%esp)
je     804baef <calloc@plt+0x26cf>
cmpl   $0x2,0x94(%esp)
jne    804baef <calloc@plt+0x26cf>
cmp    $0x1,%eax
je     804baef <calloc@plt+0x26cf>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804bae8 <calloc@plt+0x26c8>
movzbl %al,%eax
jmp    *0x80525c0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804bad0 <calloc@plt+0x26b0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   80490c0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8049030 <mbsinit@plt>
test   %eax,%eax
je     804ba61 <calloc@plt+0x2641>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804b753 <calloc@plt+0x2333>
and    0x58(%esp),%dl
jmp    804b75d <calloc@plt+0x233d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804b578 <calloc@plt+0x2158>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804b4c8 <calloc@plt+0x20a8>
add    $0x1,%esi
jmp    804b368 <calloc@plt+0x1f48>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804b549 <calloc@plt+0x2129>
call   8049390 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049220 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804ba3e <calloc@plt+0x261e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052351,0x3c(%esp)
jmp    804b348 <calloc@plt+0x1f28>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805234f,0x3c(%esp)
jmp    804b348 <calloc@plt+0x1f28>
cmpb   $0x0,0x2f(%esp)
je     804b5f3 <calloc@plt+0x21d3>
jmp    804b578 <calloc@plt+0x2158>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804b67e <calloc@plt+0x225e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bb35 <calloc@plt+0x2715>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bb35 <calloc@plt+0x2715>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804bc98 <calloc@plt+0x2878>
cmpb   $0x0,(%eax)
je     804bc98 <calloc@plt+0x2878>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804bc86 <calloc@plt+0x2866>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804bc90 <calloc@plt+0x2870>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804bc80 <calloc@plt+0x2860>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804bb35 <calloc@plt+0x2715>
call   8049090 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052351,0x3c(%esp)
jmp    804b348 <calloc@plt+0x1f28>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805234f,0x3c(%esp)
jmp    804b348 <calloc@plt+0x1f28>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049290 <__errno_location@plt>
test   %edi,%edi
mov    0x8056190,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804be6c <calloc@plt+0x2a4c>
cmp    0x805619c,%edi
jb     804bd78 <calloc@plt+0x2958>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804be71 <calloc@plt+0x2a51>
cmp    $0x8056194,%esi
lea    0x0(,%ebp,8),%eax
je     804be40 <calloc@plt+0x2a20>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804cdf0 <calloc@plt+0x39d0>
mov    %eax,%esi
mov    %eax,0x8056190
mov    0x805619c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049270 <memset@plt>
mov    %ebp,0x805619c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b2b0 <calloc@plt+0x1e90>
cmp    %eax,%ebp
ja     804be27 <calloc@plt+0x2a07>
lea    0x1(%eax),%ebp
cmp    $0x8056240,%esi
mov    %ebp,(%edi)
je     804bde2 <calloc@plt+0x29c2>
mov    %esi,(%esp)
call   8049000 <free@plt>
mov    %ebp,(%esp)
call   804cd80 <calloc@plt+0x3960>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b2b0 <calloc@plt+0x1e90>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804cdf0 <calloc@plt+0x39d0>
mov    0x8056198,%edx
mov    %eax,%esi
mov    %eax,0x8056190
mov    0x8056194,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804bd4f <calloc@plt+0x292f>
call   8049390 <abort@plt>
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049290 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8056340,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804cf90 <calloc@plt+0x3b70>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804bee0 <calloc@plt+0x2ac0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8056340,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8056340,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804bf93 <calloc@plt+0x2b73>
test   %ecx,%ecx
je     804bf93 <calloc@plt+0x2b73>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049390 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8056340,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049290 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b2b0 <calloc@plt+0x1e90>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8056340,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049290 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804b2b0 <calloc@plt+0x1e90>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804cd80 <calloc@plt+0x3960>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804b2b0 <calloc@plt+0x1e90>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804c0c8 <calloc@plt+0x2ca8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c000 <calloc@plt+0x2be0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x805619c,%edi
mov    0x8056190,%esi
cmp    $0x1,%edi
jbe    804c143 <calloc@plt+0x2d23>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
cmp    %edi,%ebx
jne    804c130 <calloc@plt+0x2d10>
mov    0x4(%esi),%eax
cmp    $0x8056240,%eax
je     804c169 <calloc@plt+0x2d49>
mov    %eax,(%esp)
call   8049000 <free@plt>
movl   $0x100,0x8056194
00
movl   $0x8056240,0x8056198
08
cmp    $0x8056194,%esi
je     804c183 <calloc@plt+0x2d63>
mov    %esi,(%esp)
call   8049000 <free@plt>
movl   $0x8056194,0x8056190
08
movl   $0x1,0x805619c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056340,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056340,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056340,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056340,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b190 <calloc@plt+0x1d70>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bce0 <calloc@plt+0x28c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b190 <calloc@plt+0x1d70>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bce0 <calloc@plt+0x28c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c220 <calloc@plt+0x2e00>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c250 <calloc@plt+0x2e30>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8056340,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8056344,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8056348,%eax
mov    %eax,0x18(%esp)
mov    0x805634c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056350,%eax
mov    %eax,0x20(%esp)
mov    0x8056354,%eax
mov    %eax,0x24(%esp)
mov    0x8056358,%eax
mov    %eax,0x28(%esp)
mov    0x805635c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056360,%eax
mov    %eax,0x30(%esp)
mov    0x8056364,%eax
mov    %eax,0x34(%esp)
mov    0x8056368,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805636c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804bce0 <calloc@plt+0x28c0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c2e0 <calloc@plt+0x2ec0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804c2e0 <calloc@plt+0x2ec0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c2e0 <calloc@plt+0x2ec0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8056340,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8056344,%eax
mov    %eax,0x14(%esp)
mov    0x8056348,%eax
mov    %eax,0x18(%esp)
mov    0x805634c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056350,%eax
mov    %eax,0x20(%esp)
mov    0x8056354,%eax
mov    %eax,0x24(%esp)
mov    0x8056358,%eax
mov    %eax,0x28(%esp)
mov    0x805635c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056360,%eax
mov    %eax,0x30(%esp)
mov    0x8056364,%eax
mov    %eax,0x34(%esp)
mov    0x8056368,%eax
mov    %eax,0x38(%esp)
mov    0x805636c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804bf60 <calloc@plt+0x2b40>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bce0 <calloc@plt+0x28c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c420 <calloc@plt+0x3000>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c420 <calloc@plt+0x3000>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c420 <calloc@plt+0x3000>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056160,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056160,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056160,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056160,0x4(%esp)
jmp    804bce0 <calloc@plt+0x28c0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x78,%esp
lea    0x10(%esp),%eax
mov    0x80(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x8052342,0x4(%esp)
movl   $0x3,(%esp)
call   80493b0 <__lxstat64@plt>
test   %eax,%eax
jne    804c660 <calloc@plt+0x3240>
mov    0x68(%esp),%eax
mov    0x6c(%esp),%edx
mov    %eax,(%ebx)
mov    0x10(%esp),%eax
mov    %edx,0x4(%ebx)
mov    0x14(%esp),%edx
mov    %eax,0x8(%ebx)
mov    %ebx,%eax
mov    %edx,0xc(%ebx)
add    $0x78,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
add    $0x78,%esp
xor    %eax,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804cb28 <calloc@plt+0x3708>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x80526a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80526b7,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8052940,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8049360 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052714,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804cb50 <calloc@plt+0x3730>
jmp    *0x8052918(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052878,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8049070 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8049360 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80528a8,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8049070 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049360 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049390 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526bb,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049360 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526cb,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049360 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526e2,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049360 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80527e0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8049070 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
jmp    804c7cf <calloc@plt+0x33af>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052800,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049070 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
jmp    804c7cf <calloc@plt+0x33af>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052824,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049070 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
jmp    804c7cf <calloc@plt+0x33af>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805284c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049070 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
jmp    804c7cf <calloc@plt+0x33af>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80526b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049360 <__fprintf_chk@plt>
jmp    804c6c1 <calloc@plt+0x32a1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80528dc,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8049070 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804c85a <calloc@plt+0x343a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804cbfa <calloc@plt+0x37da>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804cbf0 <calloc@plt+0x37d0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c670 <calloc@plt+0x3250>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804cc52 <calloc@plt+0x3832>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804cc40 <calloc@plt+0x3820>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804c670 <calloc@plt+0x3250>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804cc30 <calloc@plt+0x3810>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x80526fe,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x8051d2e,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051d44,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
movl   $0x8051bd8,0xc(%esp)
movl   $0x8051d58,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80492b0 <__printf_chk@plt>
mov    0x8056200,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051c00,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491c0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
je     804cd99 <calloc@plt+0x3979>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804cd94 <calloc@plt+0x3974>
lea    0x0(%esi),%esi
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804cdd9 <calloc@plt+0x39b9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804cd80 <calloc@plt+0x3960>
call   804cff0 <calloc@plt+0x3bd0>
xchg   %ax,%ax
jmp    804cd80 <calloc@plt+0x3960>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804ce18 <calloc@plt+0x39f8>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <realloc@plt>
test   %eax,%eax
je     804ce2b <calloc@plt+0x3a0b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804ce00 <calloc@plt+0x39e0>
mov    %eax,(%esp)
call   8049000 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804ce10 <calloc@plt+0x39f0>
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804ce73 <calloc@plt+0x3a53>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804cdf0 <calloc@plt+0x39d0>
call   804cff0 <calloc@plt+0x3bd0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804cec0 <calloc@plt+0x3aa0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804ced8 <calloc@plt+0x3ab8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804cdf0 <calloc@plt+0x39d0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804cea9 <calloc@plt+0x3a89>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804cea9 <calloc@plt+0x3a89>
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804cf18 <calloc@plt+0x3af8>
cmp    $0xaaaaaaa9,%eax
ja     804cf24 <calloc@plt+0x3b04>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804cdf0 <calloc@plt+0x39d0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804cf00 <calloc@plt+0x3ae0>
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804cd80 <calloc@plt+0x3960>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049270 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049420 <calloc@plt>
test   %eax,%eax
je     804cf7f <calloc@plt+0x3b5f>
add    $0x1c,%esp
ret
nop
call   804cff0 <calloc@plt+0x3bd0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804cd80 <calloc@plt+0x3960>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049010 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049220 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804cf90 <calloc@plt+0x3b70>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805296f,0x4(%esp)
movl   $0x0,(%esp)
call   8049070 <dcgettext@plt>
mov    0x805614c,%edx
movl   $0x8051de0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8049140 <error@plt>
call   8049390 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    0x28(%esp),%edx
or     $0x2,%ah
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804e8f0 <fts_open>
test   %eax,%eax
je     804d070 <calloc@plt+0x3c50>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
cmpl   $0x16,(%eax)
je     804d080 <calloc@plt+0x3c60>
call   804cff0 <calloc@plt+0x3bd0>
nop
movl   $0x80529a8,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x8052980,0x4(%esp)
movl   $0x805298b,(%esp)
call   8049400 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    0x2c(%eax),%edx
and    $0x11,%edx
cmp    $0x10,%edx
je     804d0d8 <calloc@plt+0x3cb8>
xor    %eax,%eax
cmp    $0x11,%edx
je     804d0c8 <calloc@plt+0x3ca8>
repz ret
mov    0x8(%esp),%eax
mov    0x30(%eax),%eax
test   %eax,%eax
setne  %al
ret
lea    0x0(%esi),%esi
mov    $0x1,%eax
ret
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%esi
mov    0x50(%esp),%ebp
mov    0x54(%esp),%ebx
cmp    $0x24,%esi
ja     804d4d0 <calloc@plt+0x40b0>
movzbl 0x0(%ebp),%edx
lea    0x2c(%esp),%eax
test   %ebx,%ebx
cmove  %eax,%ebx
mov    %edx,0x14(%esp)
call   8049410 <__ctype_b_loc@plt>
mov    0x14(%esp),%edx
mov    (%eax),%edi
mov    %ebp,%eax
jmp    804d126 <calloc@plt+0x3d06>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%edx
movzbl %dl,%ecx
testb  $0x20,0x1(%edi,%ecx,2)
jne    804d120 <calloc@plt+0x3d00>
cmp    $0x2d,%dl
jne    804d148 <calloc@plt+0x3d28>
mov    $0x4,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x14(%esp)
call   80491e0 <strtoul@plt>
mov    (%ebx),%edi
mov    0x14(%esp),%edx
cmp    %ebp,%edi
mov    %eax,%esi
je     804d22a <calloc@plt+0x3e0a>
mov    (%edx),%eax
test   %eax,%eax
jne    804d1a0 <calloc@plt+0x3d80>
xor    %ebp,%ebp
mov    0x60(%esp),%eax
test   %eax,%eax
je     804d18e <calloc@plt+0x3d6e>
movzbl (%edi),%edx
test   %dl,%dl
jne    804d1ac <calloc@plt+0x3d8c>
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    $0x22,%eax
mov    $0x1,%ebp
jne    804d135 <calloc@plt+0x3d15>
jmp    804d17f <calloc@plt+0x3d5f>
movsbl %dl,%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049200 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     804d278 <calloc@plt+0x3e58>
mov    0x60(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049200 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     804d20b <calloc@plt+0x3deb>
movzbl 0x1(%edi),%eax
cmp    $0x44,%al
je     804d48b <calloc@plt+0x406b>
cmp    $0x69,%al
je     804d470 <calloc@plt+0x4050>
cmp    $0x42,%al
je     804d48b <calloc@plt+0x406b>
movl   $0x1,0x14(%esp)
mov    $0x400,%ecx
sub    $0x42,%edx
cmp    $0x35,%dl
ja     804d278 <calloc@plt+0x3e58>
movzbl %dl,%edx
jmp    *0x80529e8(,%edx,4)
mov    0x60(%esp),%edx
test   %edx,%edx
je     804d135 <calloc@plt+0x3d15>
movzbl 0x0(%ebp),%edx
test   %dl,%dl
je     804d135 <calloc@plt+0x3d15>
movsbl %dl,%eax
xor    %ebp,%ebp
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    $0x1,%esi
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049200 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    804d1cf <calloc@plt+0x3daf>
jmp    804d135 <calloc@plt+0x3d15>
lea    0x0(%esi,%eiz,1),%esi
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
mov    %ebp,%eax
or     $0x2,%eax
jmp    804d13a <calloc@plt+0x3d1a>
xor    %eax,%eax
add    0x14(%esp),%edi
or     %eax,%ebp
mov    %ebp,%eax
or     $0x2,%eax
mov    %edi,(%ebx)
cmpb   $0x0,(%edi)
cmovne %eax,%ebp
jmp    804d18e <calloc@plt+0x3d6e>
cmp    $0x7fffffff,%esi
ja     804d3e3 <calloc@plt+0x3fc3>
add    %esi,%esi
xor    %eax,%eax
jmp    804d28a <calloc@plt+0x3e6a>
cmp    $0x7fffff,%esi
ja     804d3e3 <calloc@plt+0x3fc3>
shl    $0x9,%esi
xor    %eax,%eax
jmp    804d28a <calloc@plt+0x3e6a>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x7,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d2f1 <calloc@plt+0x3ed1>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d49d <calloc@plt+0x407d>
cmp    %esi,0x18(%esp)
jae    804d2e1 <calloc@plt+0x3ec1>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d2e6 <calloc@plt+0x3ec6>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x8,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d32d <calloc@plt+0x3f0d>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d49d <calloc@plt+0x407d>
cmp    %esi,0x18(%esp)
jae    804d31d <calloc@plt+0x3efd>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d322 <calloc@plt+0x3f02>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x4,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     804d4a6 <calloc@plt+0x4086>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    804d356 <calloc@plt+0x3f36>
jmp    804d28a <calloc@plt+0x3e6a>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x5,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
jmp    804d39e <calloc@plt+0x3f7e>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
je     804d28a <calloc@plt+0x3e6a>
cmp    %esi,0x1c(%esp)
jae    804d38c <calloc@plt+0x3f6c>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d391 <calloc@plt+0x3f71>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
ja     804d4c1 <calloc@plt+0x40a1>
imul   %ecx,%esi
cmp    %esi,%eax
jb     804d4c1 <calloc@plt+0x40a1>
imul   %ecx,%esi
xor    %eax,%eax
jmp    804d28a <calloc@plt+0x3e6a>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
jbe    804d3cc <calloc@plt+0x3fac>
mov    $0xffffffff,%esi
mov    $0x1,%eax
jmp    804d28a <calloc@plt+0x3e6a>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x6,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d41c <calloc@plt+0x3ffc>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d49d <calloc@plt+0x407d>
cmp    %esi,0x18(%esp)
jae    804d40c <calloc@plt+0x3fec>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d411 <calloc@plt+0x3ff1>
cmp    $0x3fffff,%esi
ja     804d3e3 <calloc@plt+0x3fc3>
shl    $0xa,%esi
xor    %eax,%eax
jmp    804d28a <calloc@plt+0x3e6a>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x3,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     804d4b5 <calloc@plt+0x4095>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    804d457 <calloc@plt+0x4037>
jmp    804d28a <calloc@plt+0x3e6a>
xor    %eax,%eax
mov    $0x400,%ecx
cmpb   $0x42,0x2(%edi)
sete   %al
lea    0x1(%eax,%eax,1),%eax
mov    %eax,0x14(%esp)
jmp    804d218 <calloc@plt+0x3df8>
movl   $0x2,0x14(%esp)
mov    $0x3e8,%ecx
jmp    804d218 <calloc@plt+0x3df8>
mov    0x1c(%esp),%ebp
jmp    804d28a <calloc@plt+0x3e6a>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d365 <calloc@plt+0x3f45>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d462 <calloc@plt+0x4042>
mov    $0x1,%eax
mov    $0xffffffff,%esi
jmp    804d28a <calloc@plt+0x3e6a>
movl   $0x8052ac0,0xc(%esp)
movl   $0x60,0x8(%esp)
movl   $0x80529b2,0x4(%esp)
movl   $0x80529c0,(%esp)
call   8049400 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
xor    %eax,%eax
push   %ebx
mov    0xc(%esp),%esi
mov    0x10(%esp),%ebx
mov    0x8(%esi),%edx
mov    0xc(%esi),%ecx
xor    0xc(%ebx),%ecx
xor    0x8(%ebx),%edx
or     %edx,%ecx
je     804d520 <calloc@plt+0x4100>
pop    %ebx
pop    %esi
ret
nop
mov    (%esi),%edx
mov    0x4(%esi),%eax
xor    0x4(%ebx),%eax
xor    (%ebx),%edx
pop    %ebx
pop    %esi
or     %eax,%edx
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0xc(%eax),%edx
mov    0x8(%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051290 <fts_children+0x1c40>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051290 <fts_children+0x1c40>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%esp),%ecx
mov    (%eax),%edx
mov    0x4(%eax),%eax
xor    0x4(%ecx),%eax
xor    (%ecx),%edx
or     %eax,%edx
sete   %al
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%ecx
mov    0x9c(%eax),%ebx
mov    0x10(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%edx
mov    0x9c(%eax),%esi
cmp    %edx,%ecx
jae    804d5f8 <calloc@plt+0x41d8>
mov    $0xffffffff,%eax
nop
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
jbe    804d618 <calloc@plt+0x41f8>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804d5f0 <calloc@plt+0x41d0>
jb     804d609 <calloc@plt+0x41e9>
cmp    %esi,%ebx
ja     804d5f0 <calloc@plt+0x41d0>
xor    %eax,%eax
pop    %ebx
pop    %esi
lea    0x0(%esi),%esi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%ebx
jb     804d5ea <calloc@plt+0x41ca>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804d5f0 <calloc@plt+0x41d0>
jmp    804d603 <calloc@plt+0x41e3>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x1c,%esp
mov    0x28(%eax),%ebp
cmp    %ecx,0x24(%eax)
jb     804d6b8 <calloc@plt+0x4298>
mov    0x8(%eax),%edx
test   %ebx,%ebx
je     804d660 <calloc@plt+0x4240>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%edx
mov    %ebx,-0x4(%edx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804d650 <calloc@plt+0x4230>
mov    0x8(%esi),%edx
mov    %ebp,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   8049350 <qsort@plt>
mov    0x8(%esi),%ebp
mov    %edi,%esi
sub    $0x1,%esi
mov    0x0(%ebp),%eax
je     804d70b <calloc@plt+0x42eb>
mov    %eax,%ecx
mov    %ebp,%edx
jmp    804d692 <calloc@plt+0x4272>
nop
mov    (%edx),%ecx
mov    0x4(%edx),%ebx
add    $0x4,%edx
sub    $0x1,%esi
mov    %ebx,0x8(%ecx)
jne    804d690 <calloc@plt+0x4270>
mov    -0x4(%ebp,%edi,4),%edx
movl   $0x0,0x8(%edx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%ecx),%eax
cmp    $0x3fffffff,%eax
mov    %eax,0x24(%esi)
ja     804d6e8 <calloc@plt+0x42c8>
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049160 <realloc@plt>
test   %eax,%eax
je     804d6e8 <calloc@plt+0x42c8>
mov    %eax,0x8(%esi)
mov    %eax,%edx
jmp    804d648 <calloc@plt+0x4228>
lea    0x0(%esi),%esi
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    %ebx,%eax
movl   $0x0,0x8(%esi)
movl   $0x0,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,%edx
jmp    804d6a4 <calloc@plt+0x4284>
nop
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
lea    0xa8(%ecx),%eax
mov    %eax,(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804d786 <calloc@plt+0x4366>
lea    0xa4(%eax),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049010 <memcpy@plt>
mov    0x14(%edi),%eax
mov    $0x3,%edx
movb   $0x0,0xa4(%ebx,%esi,1)
mov    %esi,0x34(%ebx)
mov    %edi,0x2c(%ebx)
mov    %eax,0x1c(%ebx)
xor    %eax,%eax
movl   $0x0,0x20(%ebx)
movl   $0x0,0xc(%ebx)
mov    %ax,0x3e(%ebx)
mov    %dx,0x40(%ebx)
movl   $0x0,0x10(%ebx)
movl   $0x0,0x14(%ebx)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
test   %eax,%eax
jne    804d7a2 <calloc@plt+0x4382>
jmp    804d7c0 <calloc@plt+0x43a0>
lea    0x0(%esi),%esi
mov    %esi,%ebx
mov    0xc(%ebx),%eax
mov    0x8(%ebx),%esi
test   %eax,%eax
je     804d7b4 <calloc@plt+0x4394>
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
mov    %ebx,(%esp)
call   8049000 <free@plt>
test   %esi,%esi
jne    804d7a0 <calloc@plt+0x4380>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
jmp    804d7e4 <calloc@plt+0x43c4>
mov    %ebx,(%esp)
call   8050a00 <fts_children+0x13b0>
test   %eax,%eax
jns    804d7f8 <calloc@plt+0x43d8>
mov    %ebx,(%esp)
call   80509b0 <fts_children+0x1360>
test   %al,%al
je     804d7d8 <calloc@plt+0x43b8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   80493d0 <close@plt>
jmp    804d7e4 <calloc@plt+0x43c4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x1c(%eax),%eax
cmp    %edx,%eax
je     804d85c <calloc@plt+0x443c>
test   %cl,%cl
jne    804d840 <calloc@plt+0x4420>
testb  $0x4,0x2c(%ebx)
jne    804d836 <calloc@plt+0x4416>
test   %eax,%eax
js     804d836 <calloc@plt+0x4416>
mov    %eax,(%esp)
call   80493d0 <close@plt>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
mov    %eax,0x4(%esp)
lea    0x38(%ebx),%eax
mov    %eax,(%esp)
call   80509c0 <fts_children+0x1370>
test   %eax,%eax
jns    804d82e <calloc@plt+0x440e>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
cmp    $0xffffff9c,%eax
je     804d820 <calloc@plt+0x4400>
call   8049390 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %esi,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x2c(%eax),%eax
test   $0x4,%al
jne    804d898 <calloc@plt+0x4478>
test   $0x2,%ah
je     804d8a8 <calloc@plt+0x4488>
mov    $0x1,%ecx
mov    $0xffffff9c,%edx
mov    %ebx,%eax
xor    %esi,%esi
call   804d810 <calloc@plt+0x43f0>
lea    0x38(%ebx),%eax
call   804d7d0 <calloc@plt+0x43b0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8049310 <fchdir@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,%esi
lea    0x38(%ebx),%eax
call   804d7d0 <calloc@plt+0x43b0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x2c,%esp
mov    0x30(%ecx),%ebp
lea    0x44(%ecx),%edi
mov    0x40(%esp),%edx
mov    (%esi),%ecx
test   %ebp,%ebp
jne    804d8f0 <calloc@plt+0x44d0>
test   $0x1,%cl
jne    804d8f9 <calloc@plt+0x44d9>
and    $0x2,%ecx
jne    804d8f9 <calloc@plt+0x44d9>
test   %dl,%dl
je     804d978 <calloc@plt+0x4558>
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   80493a0 <__xstat64@plt>
test   %eax,%eax
je     804d9a0 <calloc@plt+0x4580>
call   8049290 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0x2,%esi
je     804da70 <calloc@plt+0x4650>
mov    %esi,0x20(%ebx)
test   $0x1,%edi
mov    $0x60,%edx
jne    804da60 <calloc@plt+0x4640>
test   $0x2,%edi
jne    804da48 <calloc@plt+0x4628>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     804d961 <calloc@plt+0x4541>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804d969 <calloc@plt+0x4549>
movb   $0x0,(%edi)
mov    $0xa,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%ebx),%edx
movl   $0x100,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x3,(%esp)
call   80490b0 <__fxstatat64@plt>
test   %eax,%eax
jne    804d9d8 <calloc@plt+0x45b8>
nop
mov    0x54(%ebx),%ecx
and    $0xf000,%ecx
cmp    $0x4000,%ecx
je     804d9e8 <calloc@plt+0x45c8>
cmp    $0xa000,%ecx
mov    $0xc,%eax
je     804d96e <calloc@plt+0x454e>
xor    %eax,%eax
cmp    $0x8000,%ecx
sete   %al
add    $0x2c,%esp
pop    %ebx
lea    0x3(%eax,%eax,4),%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
jmp    804d92d <calloc@plt+0x450d>
nop
mov    (%esi),%edx
mov    0x58(%ebx),%eax
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
and    $0x2,%edx
sub    %edx,%eax
cmpb   $0x2e,0xa4(%ebx)
mov    %eax,0x38(%ebx)
mov    $0x1,%eax
jne    804d96e <calloc@plt+0x454e>
cmpb   $0x0,0xa5(%ebx)
je     804da30 <calloc@plt+0x4610>
mov    0xa4(%ebx),%edx
and    $0xffff00,%edx
cmp    $0x2e00,%edx
jne    804d96e <calloc@plt+0x454e>
cmpl   $0x1,0x30(%ebx)
sbb    %eax,%eax
and    $0xfffffffc,%eax
add    $0x5,%eax
jmp    804d96e <calloc@plt+0x454e>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804d94a <calloc@plt+0x452a>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x44(%ebx)
add    $0x1,%edi
mov    $0x5f,%dl
jmp    804d93e <calloc@plt+0x451e>
xchg   %ax,%ax
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   80493b0 <__lxstat64@plt>
test   %eax,%eax
jne    804d92a <calloc@plt+0x450a>
movl   $0x0,0x0(%ebp)
mov    $0xd,%al
jmp    804d96e <calloc@plt+0x454e>
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    (%edx),%eax
lea    0x100(%eax,%ecx,1),%ecx
cmp    %ecx,%eax
ja     804dad8 <calloc@plt+0x46b8>
mov    (%ebx),%eax
mov    %ecx,(%edx)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <realloc@plt>
test   %eax,%eax
je     804db00 <calloc@plt+0x46e0>
mov    %eax,(%ebx)
mov    $0x1,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
movl   $0x0,(%ebx)
call   8049290 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
xor    %eax,%eax
movl   $0x0,(%ebx)
jmp    804dace <calloc@plt+0x46ae>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
mov    %edx,%ebx
sub    $0x28,%esp
test   $0x102,%eax
je     804db68 <calloc@plt+0x4748>
movl   $0x8049000,0x10(%esp)
movl   $0x804d500,0xc(%esp)
movl   $0x804d540,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1f,(%esp)
call   80501c0 <fts_children+0xb70>
test   %eax,%eax
mov    %eax,(%ebx)
setne  %al
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x1c,(%esp)
call   8049170 <malloc@plt>
mov    %eax,%edx
mov    %eax,(%ebx)
xor    %eax,%eax
test   %edx,%edx
je     804db60 <calloc@plt+0x4740>
mov    %edx,(%esp)
call   804f8d0 <fts_children+0x280>
add    $0x28,%esp
mov    $0x1,%eax
pop    %ebx
ret
push   %esi
push   %ebx
mov    %edx,%ebx
and    $0x10,%ebx
sub    $0x14,%esp
cmp    $0x1,%ebx
mov    %edx,%ebx
sbb    %esi,%esi
and    $0xfffe0000,%esi
shl    $0x7,%ebx
add    $0x30900,%esi
and    $0x40000,%ebx
or     %esi,%ebx
and    $0x2,%dh
je     804dbf0 <calloc@plt+0x47d0>
mov    %ebx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8050e00 <fts_children+0x17b0>
mov    %eax,%ebx
test   %ebx,%ebx
js     804dbe3 <calloc@plt+0x47c3>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804f7b0 <fts_children+0x160>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x4(%esp)
mov    %ecx,(%esp)
call   804f9e0 <fts_children+0x390>
mov    %eax,%ebx
jmp    804dbcf <calloc@plt+0x47af>
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%ebx
mov    %edx,0x18(%esp)
movb   $0x0,0x14(%esp)
test   %ebx,%ebx
je     804dc36 <calloc@plt+0x4816>
cmpb   $0x2e,(%ebx)
jne    804dc36 <calloc@plt+0x4816>
cmpb   $0x2e,0x1(%ebx)
jne    804dc36 <calloc@plt+0x4816>
cmpb   $0x0,0x2(%ebx)
sete   0x14(%esp)
mov    0x2c(%ebp),%edx
mov    %edx,%esi
and    $0x4,%esi
je     804dc68 <calloc@plt+0x4848>
and    $0x200,%edx
mov    %edx,%esi
je     804dc58 <calloc@plt+0x4838>
xor    %esi,%esi
test   %edi,%edi
js     804dc58 <calloc@plt+0x4838>
mov    %edi,(%esp)
call   80493d0 <close@plt>
add    $0x8c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edi,%eax
shr    $0x1f,%eax
cmpb   $0x0,0x14(%esp)
jne    804dd00 <calloc@plt+0x48e0>
test   %al,%al
jne    804dd16 <calloc@plt+0x48f6>
mov    %edi,0x1c(%esp)
test   $0x2,%dl
jne    804dcb0 <calloc@plt+0x4890>
test   %ebx,%ebx
je     804dd58 <calloc@plt+0x4938>
cmpb   $0x2e,(%ebx)
jne    804dd58 <calloc@plt+0x4938>
cmpb   $0x2e,0x1(%ebx)
xchg   %ax,%ax
jne    804dd58 <calloc@plt+0x4938>
cmpb   $0x0,0x2(%ebx)
jne    804dd58 <calloc@plt+0x4938>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <__fxstat64@plt>
test   %eax,%eax
je     804dd78 <calloc@plt+0x4958>
mov    $0xffffffff,%eax
test   %edi,%edi
mov    %eax,%esi
jns    804dc58 <calloc@plt+0x4838>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebx
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
mov    %edi,(%ebx)
jmp    804dc58 <calloc@plt+0x4838>
nop
test   %al,%al
je     804dc80 <calloc@plt+0x4860>
test   $0x2,%dh
jne    804dda0 <calloc@plt+0x4980>
movb   $0x1,0x14(%esp)
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
call   804db90 <calloc@plt+0x4770>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804de13 <calloc@plt+0x49f3>
mov    0x2c(%ebp),%edx
jmp    804dc84 <calloc@plt+0x4864>
lea    0x0(%esi,%eiz,1),%esi
mov    0x9c(%ecx),%eax
mov    0xa0(%ecx),%edx
xor    0x7c(%esp),%edx
xor    0x78(%esp),%eax
or     %eax,%edx
jne    804dd8e <calloc@plt+0x496e>
mov    0x2c(%ebp),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x2,%dh
jne    804ddf8 <calloc@plt+0x49d8>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049310 <fchdir@plt>
jmp    804dcd9 <calloc@plt+0x48b9>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
mov    0x44(%ecx),%eax
mov    0x48(%ecx),%edx
xor    0x24(%esp),%edx
xor    0x20(%esp),%eax
or     %eax,%edx
je     804dd38 <calloc@plt+0x4918>
call   8049290 <__errno_location@plt>
movl   $0x2,(%eax)
jmp    804dcd4 <calloc@plt+0x48b4>
xchg   %ax,%ax
lea    0x38(%ebp),%ecx
mov    %ecx,(%esp)
mov    %edx,0x1c(%esp)
mov    %ecx,0x14(%esp)
call   80509b0 <fts_children+0x1360>
mov    0x1c(%esp),%edx
mov    0x14(%esp),%ecx
test   %al,%al
jne    804dd11 <calloc@plt+0x48f1>
mov    %ecx,(%esp)
call   8050a00 <fts_children+0x13b0>
mov    0x2c(%ebp),%edx
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804dd11 <calloc@plt+0x48f1>
test   $0x2,%dl
mov    0x1c(%esp),%edi
movb   $0x1,0x14(%esp)
je     804dd58 <calloc@plt+0x4938>
jmp    804dcb0 <calloc@plt+0x4890>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x14(%esp),%ecx
mov    %ebp,%eax
mov    0x1c(%esp),%edx
xor    $0x1,%ecx
movzbl %cl,%ecx
call   804d810 <calloc@plt+0x43f0>
jmp    804dc58 <calloc@plt+0x4838>
mov    $0xffffffff,%esi
jmp    804dc58 <calloc@plt+0x4838>
lea    0x0(%esi),%esi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
test   $0x102,%eax
je     804deb0 <calloc@plt+0x4a90>
movl   $0x14,(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804dee8 <calloc@plt+0x4ac8>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %ebx,0x10(%esi)
mov    %esi,0x4(%esp)
mov    %eax,(%esi)
mov    0x9c(%ebx),%eax
mov    %edx,0x4(%esi)
mov    0xa0(%ebx),%edx
mov    %eax,0x8(%esi)
mov    (%edi),%eax
mov    %edx,0xc(%esi)
mov    %eax,(%esp)
call   80507d0 <fts_children+0x1180>
mov    %eax,%edi
mov    $0x1,%eax
cmp    %edi,%esi
je     804dea2 <calloc@plt+0x4a82>
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8049000 <free@plt>
test   %edi,%edi
je     804dee8 <calloc@plt+0x4ac8>
mov    0x10(%edi),%edx
mov    $0x2,%ecx
mov    0xc(%esp),%eax
mov    %cx,0x3c(%ebx)
mov    %edx,(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x44(%ecx),%eax
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   804f8f0 <fts_children+0x2a0>
test   %al,%al
je     804ded8 <calloc@plt+0x4ab8>
mov    $0x2,%edx
mov    %ebx,(%ebx)
mov    %dx,0x3c(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x10,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804df00 <calloc@plt+0x4ae0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x34,%esp
test   $0x102,%eax
jne    804df48 <calloc@plt+0x4b28>
mov    0x4(%ecx),%esi
test   %esi,%esi
je     804df3d <calloc@plt+0x4b1d>
mov    0x30(%esi),%eax
test   %eax,%eax
js     804df3d <calloc@plt+0x4b1d>
mov    (%edx),%ebx
mov    0x14(%ebx),%eax
or     0x10(%ebx),%eax
je     804dfc2 <calloc@plt+0x4ba2>
mov    (%ebx),%eax
mov    0x4(%ebx),%edx
xor    0xa0(%ecx),%edx
xor    0x9c(%ecx),%eax
or     %eax,%edx
je     804df90 <calloc@plt+0x4b70>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%ecx),%ebx
lea    0x1c(%esp),%eax
mov    0x48(%ecx),%esi
mov    %ebx,0x1c(%esp)
mov    0xa0(%ecx),%ebx
mov    0x9c(%ecx),%ecx
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %esi,0x20(%esp)
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,(%esp)
call   8050810 <fts_children+0x11c0>
test   %eax,%eax
je     804dfc2 <calloc@plt+0x4ba2>
mov    %eax,(%esp)
call   8049000 <free@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
xor    0x48(%ecx),%edx
xor    0x44(%ecx),%eax
or     %eax,%edx
jne    804df3d <calloc@plt+0x4b1d>
mov    0x44(%esi),%eax
mov    0x48(%esi),%edx
mov    %eax,0x8(%ebx)
mov    0x9c(%esi),%eax
mov    %edx,0xc(%ebx)
mov    0xa0(%esi),%edx
mov    %eax,(%ebx)
mov    %edx,0x4(%ebx)
jmp    804df3d <calloc@plt+0x4b1d>
call   8049390 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    (%eax),%eax
mov    %edx,0x38(%esp)
mov    %eax,0x14(%esp)
mov    0xc(%eax),%eax
test   %eax,%eax
setne  0x3e(%esp)
jne    804e550 <calloc@plt+0x5130>
mov    0x2c(%ebp),%eax
mov    $0x10900,%ecx
test   $0x10,%al
jne    804e488 <calloc@plt+0x5068>
mov    0x2c(%ebp),%edx
shl    $0x7,%eax
mov    $0xffffff9c,%ebx
mov    0x14(%esp),%edi
and    $0x40000,%eax
and    $0x204,%edx
cmp    $0x200,%edx
mov    0x18(%edi),%esi
je     804e718 <calloc@plt+0x52f8>
or     %ecx,%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
call   8050e00 <fts_children+0x17b0>
test   %eax,%eax
mov    %eax,%ebx
js     804e7b1 <calloc@plt+0x5391>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f7b0 <fts_children+0x160>
mov    %ebx,(%esp)
call   8049300 <fdopendir@plt>
test   %eax,%eax
je     804e79e <calloc@plt+0x537e>
mov    0x14(%esp),%edi
cmpw   $0xb,0x3c(%edi)
mov    %eax,0xc(%edi)
je     804e7d4 <calloc@plt+0x53b4>
mov    0x2c(%ebp),%eax
test   $0x1,%ah
jne    804e5c8 <calloc@plt+0x51a8>
cmpl   $0x1,0x28(%ebp)
sbb    %edi,%edi
xor    %ecx,%ecx
mov    %edi,0x24(%esp)
andl   $0x186a1,0x24(%esp)
subl   $0x1,0x24(%esp)
cmpl   $0x2,0x38(%esp)
je     804e0bd <calloc@plt+0x4c9d>
mov    0x2c(%ebp),%edx
mov    $0xffffffff,%ecx
and    $0x18,%edx
cmp    $0x18,%edx
je     804e598 <calloc@plt+0x5178>
cmpb   $0x0,0x3e(%esp)
movb   $0x1,0x3f(%esp)
jne    804e0f8 <calloc@plt+0x4cd8>
test   %ecx,%ecx
setne  %cl
cmpl   $0x3,0x38(%esp)
mov    %ecx,%esi
sete   %cl
mov    %ecx,%edi
mov    %esi,%ecx
test   %cl,%cl
jne    804e518 <calloc@plt+0x50f8>
mov    %edi,%ecx
test   %cl,%cl
movb   $0x0,0x3f(%esp)
jne    804e518 <calloc@plt+0x50f8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
movl   $0x0,0x2c(%esp)
mov    0x28(%edi),%edx
mov    0x1c(%edi),%ebx
lea    -0x1(%edx),%ecx
cmpb   $0x2f,-0x1(%ebx,%edx,1)
cmove  %ecx,%edx
test   $0x4,%al
jne    804e470 <calloc@plt+0x5050>
mov    0x20(%ebp),%edi
lea    0x1(%edx),%eax
mov    %eax,0x1c(%esp)
movb   $0x0,0x3d(%esp)
movl   $0x0,0x10(%esp)
mov    %edi,0x18(%esp)
sub    %eax,0x18(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x20(%esp)
mov    0x30(%eax),%eax
add    $0x1,%eax
mov    %eax,0x28(%esp)
lea    0x2c(%ebp),%eax
mov    %eax,0x34(%esp)
lea    0x2(%edx),%eax
mov    %eax,0x30(%esp)
jmp    804e23a <calloc@plt+0x4e1a>
lea    0x0(%esi),%esi
add    0x1c(%esp),%edx
jb     804e2fe <calloc@plt+0x4ede>
mov    0x28(%esp),%eax
testb  $0x4,0x2c(%ebp)
mov    %eax,0x30(%ebx)
mov    0x0(%ebp),%eax
mov    %edx,0x28(%ebx)
mov    0x4(%esi),%edx
mov    %eax,0x4(%ebx)
mov    (%esi),%eax
mov    %edx,0xa0(%ebx)
mov    %eax,0x9c(%ebx)
jne    804e350 <calloc@plt+0x4f30>
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804e1bf <calloc@plt+0x4d9f>
testb  $0x4,0x2d(%ebp)
je     804e380 <calloc@plt+0x4f60>
mov    0x2c(%ebp),%eax
xor    %ecx,%ecx
and    $0x18,%eax
cmp    $0x18,%eax
je     804e460 <calloc@plt+0x5040>
mov    $0xb,%edi
xor    %eax,%eax
mov    %di,0x3c(%ebx)
movzbl 0x12(%esi),%edx
sub    $0x1,%edx
cmp    $0xb,%edx
ja     804e1ee <calloc@plt+0x4dce>
mov    0x8052ae0(,%edx,4),%eax
xor    %edx,%edx
test   %ecx,%ecx
mov    %eax,0x54(%ebx)
mov    $0x1,%eax
jne    804e203 <calloc@plt+0x4de3>
mov    $0x2,%eax
xor    %edx,%edx
mov    0x20(%esp),%esi
mov    %eax,0x70(%ebx)
mov    %edx,0x74(%ebx)
movl   $0x0,0x8(%ebx)
test   %esi,%esi
je     804e3ac <calloc@plt+0x4f8c>
mov    0x10(%esp),%eax
addl   $0x1,0xc(%esp)
mov    %ebx,0x8(%eax)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
jbe    804e3c8 <calloc@plt+0x4fa8>
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     804e3c8 <calloc@plt+0x4fa8>
mov    %eax,(%esp)
call   8049340 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e770 <calloc@plt+0x5350>
testb  $0x20,0x2c(%ebp)
jne    804e26b <calloc@plt+0x4e4b>
cmpb   $0x2e,0x13(%eax)
je     804e440 <calloc@plt+0x5020>
lea    0x13(%esi),%edi
mov    %edi,(%esp)
call   8049220 <strlen@plt>
mov    %edi,%edx
mov    %eax,%ecx
mov    %ebp,%eax
call   804d710 <calloc@plt+0x42f0>
test   %eax,%eax
mov    %eax,%ebx
je     804e720 <calloc@plt+0x5300>
mov    %edi,(%esp)
call   8049220 <strlen@plt>
cmp    %eax,0x18(%esp)
mov    %eax,%edx
ja     804e170 <calloc@plt+0x4d50>
mov    0x14(%ebp),%ecx
lea    0x20(%ebp),%edx
mov    %ecx,0x18(%esp)
mov    0x30(%esp),%ecx
add    %eax,%ecx
lea    0x14(%ebp),%eax
call   804daa0 <calloc@plt+0x4680>
test   %al,%al
je     804e720 <calloc@plt+0x5300>
mov    0x14(%ebp),%eax
cmp    0x18(%esp),%eax
je     804e2db <calloc@plt+0x4ebb>
testb  $0x4,0x2c(%ebp)
movb   $0x1,0x3d(%esp)
je     804e2db <calloc@plt+0x4ebb>
add    0x1c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x20(%ebp),%eax
mov    %edi,(%esp)
mov    %eax,0x18(%esp)
mov    0x1c(%esp),%eax
sub    %eax,0x18(%esp)
call   8049220 <strlen@plt>
mov    %eax,%edx
add    0x1c(%esp),%edx
jae    804e17a <calloc@plt+0x4d5a>
mov    %ebx,(%esp)
call   8049000 <free@plt>
mov    0x20(%esp),%eax
call   804d790 <calloc@plt+0x4370>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
mov    $0x7,%edx
movl   $0x0,0xc(%edi)
mov    %dx,0x3c(%edi)
orl    $0x4000,0x2c(%ebp)
call   8049290 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x34(%ebx),%eax
add    $0x1,%eax
mov    %eax,0x8(%esp)
lea    0xa4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048ff0 <memmove@plt>
jmp    804e1ae <calloc@plt+0x4d8e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x34(%esp),%edx
movl   $0x0,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
mov    0x20(%esp),%esi
movl   $0x0,0x8(%ebx)
test   %esi,%esi
mov    %ax,0x3c(%ebx)
jne    804e21c <calloc@plt+0x4dfc>
addl   $0x1,0xc(%esp)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
mov    %ebx,0x20(%esp)
ja     804e236 <calloc@plt+0x4e16>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x3d(%esp)
jne    804e618 <calloc@plt+0x51f8>
testb  $0x4,0x2c(%ebp)
je     804e3f6 <calloc@plt+0x4fd6>
mov    0x1c(%esp),%eax
cmp    %eax,0x20(%ebp)
je     804e3ea <calloc@plt+0x4fca>
mov    0xc(%esp),%eax
test   %eax,%eax
jne    804e3ef <calloc@plt+0x4fcf>
subl   $0x1,0x2c(%esp)
mov    0x2c(%esp),%eax
movb   $0x0,(%eax)
cmpb   $0x0,0x3f(%esp)
jne    804e4b0 <calloc@plt+0x5090>
mov    0xc(%esp),%ebx
test   %ebx,%ebx
je     804e81c <calloc@plt+0x53fc>
cmpl   $0x2710,0xc(%esp)
jbe    804e570 <calloc@plt+0x5150>
mov    0x28(%ebp),%edx
test   %edx,%edx
je     804e837 <calloc@plt+0x5417>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
call   804d630 <calloc@plt+0x4210>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x14(%eax)
je     804e451 <calloc@plt+0x5031>
cmpw   $0x2e,0x14(%eax)
jne    804e26b <calloc@plt+0x4e4b>
mov    0x10(%esp),%ebx
jmp    804e236 <calloc@plt+0x4e16>
lea    0x0(%esi),%esi
xor    %ecx,%ecx
testb  $0xfb,0x12(%esi)
setne  %cl
jmp    804e1d0 <calloc@plt+0x4db0>
xchg   %ax,%ax
mov    0x14(%ebp),%eax
add    %edx,%eax
lea    0x1(%eax),%edi
mov    %edi,0x2c(%esp)
movb   $0x2f,(%eax)
jmp    804e11d <calloc@plt+0x4cfd>
lea    0x0(%esi,%eiz,1),%esi
test   $0x1,%al
mov    $0x30900,%ecx
je     804e006 <calloc@plt+0x4be6>
mov    0x14(%esp),%edi
cmpl   $0x1,0x30(%edi)
sbb    %ecx,%ecx
and    $0xfffe0000,%ecx
add    $0x30900,%ecx
jmp    804e006 <calloc@plt+0x4be6>
cmpb   $0x0,0x3e(%esp)
jne    804e401 <calloc@plt+0x4fe1>
mov    0xc(%esp),%eax
test   %eax,%eax
je     804e4ce <calloc@plt+0x50ae>
cmpl   $0x1,0x38(%esp)
jne    804e40d <calloc@plt+0x4fed>
mov    0x14(%esp),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jne    804e7f8 <calloc@plt+0x53d8>
mov    %ebp,%eax
call   804d870 <calloc@plt+0x4450>
test   %eax,%eax
setne  %al
test   %al,%al
je     804e401 <calloc@plt+0x4fe1>
mov    0x14(%esp),%eax
mov    $0x7,%esi
mov    %si,0x3c(%eax)
mov    0x20(%esp),%eax
orl    $0x4000,0x2c(%ebp)
call   804d790 <calloc@plt+0x4370>
xor    %eax,%eax
jmp    804e586 <calloc@plt+0x5166>
lea    0x0(%esi),%esi
test   $0x2,%ah
jne    804e687 <calloc@plt+0x5267>
mov    0x14(%esp),%edx
mov    %ebx,%ecx
mov    %ebp,%eax
movl   $0x0,(%esp)
call   804dc00 <calloc@plt+0x47e0>
test   %eax,%eax
jne    804e6b0 <calloc@plt+0x5290>
mov    0x2c(%ebp),%eax
movb   $0x1,0x3f(%esp)
jmp    804e0f8 <calloc@plt+0x4cd8>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048fe0 <dirfd@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804e898 <calloc@plt+0x5478>
mov    0x2c(%ebp),%eax
jmp    804e089 <calloc@plt+0x4c69>
lea    0x0(%esi),%esi
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804e582 <calloc@plt+0x5162>
cmpl   $0x1,0xc(%esp)
ja     804e426 <calloc@plt+0x5006>
mov    0x20(%esp),%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%esi
mov    %eax,%edx
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
mov    0x58(%esi),%ecx
and    $0x2,%edx
movb   $0x1,0x3f(%esp)
sub    %edx,%ecx
cmpb   $0x0,0x3e(%esp)
jne    804e0f8 <calloc@plt+0x4cd8>
jmp    804e0c9 <calloc@plt+0x4ca9>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
lea    0x34(%ebp),%esi
mov    %esi,%edx
mov    %edi,%ecx
call   804df00 <calloc@plt+0x4ae0>
mov    0x1c(%ebp),%eax
lea    0x2c(%ebp),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
mov    0x2c(%ebp),%eax
mov    %edi,%ecx
mov    %esi,%edx
call   804de20 <calloc@plt+0x4a00>
test   %al,%al
jne    804e562 <calloc@plt+0x5142>
call   8049290 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804e586 <calloc@plt+0x5166>
lea    0x0(%esi),%esi
mov    0x4(%ebp),%eax
mov    0x14(%ebp),%edx
test   %eax,%eax
je     804e647 <calloc@plt+0x5227>
lea    0x0(%esi),%esi
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804e63d <calloc@plt+0x521d>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    %edx,0x1c(%eax)
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804e628 <calloc@plt+0x5208>
mov    0x20(%esp),%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%eax),%ecx
test   %ecx,%ecx
js     804e3d3 <calloc@plt+0x4fb3>
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804e670 <calloc@plt+0x5250>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    0x8(%eax),%ecx
mov    %edx,0x1c(%eax)
test   %ecx,%ecx
je     804e680 <calloc@plt+0x5260>
mov    %ecx,%eax
jmp    804e650 <calloc@plt+0x5230>
xchg   %ax,%ax
mov    0x4(%eax),%ecx
mov    %ecx,%eax
jmp    804e650 <calloc@plt+0x5230>
mov    %ebx,(%esp)
call   8050e40 <fts_children+0x17f0>
test   %eax,%eax
mov    %eax,%ebx
js     804e6b0 <calloc@plt+0x5290>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f7b0 <fts_children+0x160>
jmp    804e521 <calloc@plt+0x5101>
lea    0x0(%esi),%esi
mov    %esi,%eax
test   %al,%al
je     804e6bc <calloc@plt+0x529c>
mov    %edi,%eax
test   %al,%al
jne    804e703 <calloc@plt+0x52e3>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
orw    $0x1,0x3e(%edi)
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
mov    0x2c(%ebp),%eax
movl   $0x0,0xc(%edi)
test   $0x2,%ah
je     804e6ee <calloc@plt+0x52ce>
test   %ebx,%ebx
js     804e6ee <calloc@plt+0x52ce>
mov    %ebx,(%esp)
call   80493d0 <close@plt>
mov    0x2c(%ebp),%eax
mov    0x14(%esp),%edi
movb   $0x0,0x3f(%esp)
movl   $0x0,0xc(%edi)
jmp    804e0f8 <calloc@plt+0x4cd8>
call   8049290 <__errno_location@plt>
mov    0x14(%esp),%edi
mov    (%eax),%eax
mov    %eax,0x20(%edi)
jmp    804e6bc <calloc@plt+0x529c>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%ebx
jmp    804e02f <calloc@plt+0x4c0f>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049000 <free@plt>
mov    0x20(%esp),%eax
call   804d790 <calloc@plt+0x4370>
mov    0x14(%esp),%ebx
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
mov    $0x7,%ecx
xor    %eax,%eax
movl   $0x0,0xc(%ebx)
mov    %cx,0x3c(%ebx)
orl    $0x4000,0x2c(%ebp)
mov    %edi,(%esi)
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
test   %eax,%eax
je     804e3c8 <calloc@plt+0x4fa8>
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
cmpb   $0x0,0x3d(%esp)
movl   $0x0,0xc(%edi)
je     804e3d3 <calloc@plt+0x4fb3>
jmp    804e618 <calloc@plt+0x51f8>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   80493d0 <close@plt>
mov    %edi,(%esi)
mov    0x14(%esp),%eax
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%eax)
je     804e8b9 <calloc@plt+0x5499>
xor    %eax,%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x14(%esp),%esi
lea    0x2c(%ebp),%edx
mov    0x1c(%ebp),%eax
movl   $0x0,(%esp)
mov    %esi,%ecx
call   804d8d0 <calloc@plt+0x44b0>
mov    %ax,0x3c(%esi)
mov    0x2c(%ebp),%eax
jmp    804e089 <calloc@plt+0x4c69>
mov    0x14(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x4(%eax),%edx
mov    %ebp,%eax
movl   $0x8052ac9,(%esp)
call   804dc00 <calloc@plt+0x47e0>
test   %eax,%eax
setne  %al
jmp    804e4e9 <calloc@plt+0x50c9>
cmpl   $0x3,0x38(%esp)
je     804e8d7 <calloc@plt+0x54b7>
mov    0x20(%esp),%eax
call   804d790 <calloc@plt+0x4370>
xor    %eax,%eax
jmp    804e586 <calloc@plt+0x5166>
testb  $0x2,0x2d(%ebp)
je     804e582 <calloc@plt+0x5162>
lea    0x4c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   80491f0 <fstatfs64@plt>
test   %eax,%eax
jne    804e872 <calloc@plt+0x5452>
mov    0x4c(%esp),%eax
cmp    $0x6969,%eax
je     804e570 <calloc@plt+0x5150>
cmp    $0x1021994,%eax
je     804e570 <calloc@plt+0x5150>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
movl   $0x804d5c0,0x28(%ebp)
call   804d630 <calloc@plt+0x4210>
movl   $0x0,0x28(%ebp)
mov    %eax,0x20(%esp)
jmp    804e582 <calloc@plt+0x5162>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   80493e0 <closedir@plt>
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%edi)
jne    804e7c7 <calloc@plt+0x53a7>
mov    0x14(%esp),%edi
mov    $0x4,%ebx
mov    %bx,0x3c(%edi)
call   8049290 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%edi)
xor    %eax,%eax
jmp    804e7c9 <calloc@plt+0x53a9>
mov    0x14(%esp),%eax
mov    $0x6,%ecx
mov    %cx,0x3c(%eax)
jmp    804e827 <calloc@plt+0x5407>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebx
mov    %ebx,%esi
and    $0xffffe000,%esi
jne    804ebd8 <fts_open+0x2e8>
mov    %ebx,%eax
and    $0x204,%eax
cmp    $0x204,%eax
je     804ebd8 <fts_open+0x2e8>
test   $0x12,%bl
je     804ebd8 <fts_open+0x2e8>
movl   $0x58,(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804ec5d <fts_open+0x36d>
mov    %eax,%edi
mov    $0x16,%ecx
mov    %esi,%eax
test   $0x2,%bl
rep stos %eax,%es:(%edi)
mov    0x48(%esp),%eax
mov    %eax,0x28(%ebp)
jne    804eb98 <fts_open+0x2a8>
mov    %ebx,0x2c(%ebp)
mov    0x40(%esp),%eax
movl   $0xffffff9c,0x1c(%ebp)
mov    (%eax),%eax
test   %eax,%eax
je     804ec53 <fts_open+0x363>
mov    0x40(%esp),%edi
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8049220 <strlen@plt>
cmp    %eax,%esi
cmovb  %eax,%esi
add    $0x4,%edi
mov    (%edi),%eax
test   %eax,%eax
jne    804e978 <fts_open+0x88>
lea    0x1(%esi),%ecx
mov    $0x1000,%ax
cmp    $0x1000,%ecx
cmovb  %eax,%ecx
lea    0x20(%ebp),%edx
lea    0x14(%ebp),%eax
call   804daa0 <calloc@plt+0x4680>
test   %al,%al
mov    %al,0x17(%esp)
je     804ebc6 <fts_open+0x2d6>
mov    0x40(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
je     804ec38 <fts_open+0x348>
xor    %ecx,%ecx
mov    $0x80526fd,%edx
mov    %ebp,%eax
call   804d710 <calloc@plt+0x42f0>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     804ebbb <fts_open+0x2cb>
movl   $0xffffffff,0x30(%eax)
mov    0x40(%esp),%eax
mov    (%eax),%edx
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804e9ff <fts_open+0x10f>
mov    0x2c(%ebp),%eax
shr    $0xa,%eax
and    $0x1,%eax
mov    %al,0x17(%esp)
test   %edx,%edx
je     804ec64 <fts_open+0x374>
and    $0x1000,%ebx
xor    %esi,%esi
lea    0x2c(%ebp),%eax
xor    %edi,%edi
mov    %ebx,0x10(%esp)
mov    %edx,%ebx
movl   $0x0,0x1c(%esp)
mov    %eax,0x18(%esp)
jmp    804ea6d <fts_open+0x17d>
cmpb   $0x0,0x17(%esp)
je     804eac4 <fts_open+0x1d4>
mov    $0xb,%eax
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
movl   $0x2,0x70(%ebx)
movl   $0x0,0x74(%ebx)
test   %eax,%eax
je     804eae9 <fts_open+0x1f9>
mov    %edi,0x8(%ebx)
mov    %ebx,%edi
mov    0x40(%esp),%eax
add    $0x1,%esi
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
je     804eb18 <fts_open+0x228>
mov    %ebx,(%esp)
call   8049220 <strlen@plt>
mov    0x10(%esp),%edx
test   %edx,%edx
jne    804ea90 <fts_open+0x1a0>
cmp    $0x2,%eax
jbe    804ea90 <fts_open+0x1a0>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
je     804eb80 <fts_open+0x290>
lea    0x0(%esi),%esi
mov    %eax,%ecx
mov    %ebx,%edx
mov    %ebp,%eax
call   804d710 <calloc@plt+0x42f0>
test   %eax,%eax
mov    %eax,%ebx
je     804eba8 <fts_open+0x2b8>
movl   $0x0,0x30(%eax)
mov    0xc(%esp),%eax
test   %edi,%edi
mov    %eax,0x4(%ebx)
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
jne    804ea28 <fts_open+0x138>
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x18(%esp),%edx
movl   $0x0,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804ea56 <fts_open+0x166>
test   %edi,%edi
movl   $0x0,0x8(%ebx)
je     804ec48 <fts_open+0x358>
mov    0x1c(%esp),%eax
add    $0x1,%esi
mov    %ebx,0x1c(%esp)
mov    %ebx,0x8(%eax)
mov    0x40(%esp),%eax
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
jne    804ea6d <fts_open+0x17d>
lea    0x0(%esi),%esi
cmp    $0x1,%esi
ja     804ec18 <fts_open+0x328>
xor    %ecx,%ecx
mov    $0x80526fd,%edx
mov    %ebp,%eax
call   804d710 <calloc@plt+0x42f0>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     804eba8 <fts_open+0x2b8>
mov    $0x9,%edx
mov    %dx,0x3c(%eax)
lea    0x34(%ebp),%edx
mov    %edi,0x8(%eax)
mov    0x2c(%ebp),%eax
call   804db20 <calloc@plt+0x4700>
test   %al,%al
je     804eba8 <fts_open+0x2b8>
mov    0x2c(%ebp),%edx
test   $0x204,%edx
je     804ebf0 <fts_open+0x300>
lea    0x38(%ebp),%eax
mov    %eax,(%esp)
movl   $0xffffffff,0x4(%esp)
call   8050980 <fts_children+0x1330>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x2f,-0x2(%ebx,%eax,1)
jne    804ea90 <fts_open+0x1a0>
sub    $0x1,%eax
cmp    $0x1,%eax
jne    804eb80 <fts_open+0x290>
jmp    804ea90 <fts_open+0x1a0>
mov    %ebx,%eax
and    $0xfd,%ah
or     $0x4,%eax
mov    %eax,0x2c(%ebp)
jmp    804e958 <fts_open+0x68>
mov    %edi,%eax
call   804d790 <calloc@plt+0x4370>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x14(%ebp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    %ebp,(%esp)
call   8049000 <free@plt>
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049290 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebp),%eax
mov    $0x8052aca,%ecx
call   804db90 <calloc@plt+0x4770>
test   %eax,%eax
mov    %eax,0x18(%ebp)
jns    804eb60 <fts_open+0x270>
orl    $0x4,0x2c(%ebp)
jmp    804eb60 <fts_open+0x270>
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804eb21 <fts_open+0x231>
mov    %edi,%edx
mov    %esi,%ecx
mov    %ebp,%eax
call   804d630 <calloc@plt+0x4210>
mov    %eax,%edi
jmp    804eb21 <fts_open+0x231>
xchg   %ax,%ax
xor    %edx,%edx
movl   $0x0,0xc(%esp)
jmp    804e9ea <fts_open+0xfa>
nop
mov    %ebx,%edi
mov    %ebx,0x1c(%esp)
jmp    804ea5b <fts_open+0x16b>
mov    $0x1000,%ecx
jmp    804e99e <fts_open+0xae>
xor    %eax,%eax
jmp    804ebd0 <fts_open+0x2e0>
xor    %edi,%edi
jmp    804eb21 <fts_open+0x231>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%eax
test   %eax,%eax
je     804ecc8 <fts_close+0x58>
mov    0x30(%eax),%edx
test   %edx,%edx
jns    804eca1 <fts_close+0x31>
jmp    804edac <fts_close+0x13c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
js     804ecc0 <fts_close+0x50>
mov    %ebx,%eax
mov    0x8(%eax),%ebx
test   %ebx,%ebx
jne    804ec90 <fts_close+0x20>
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
jns    804ec9f <fts_close+0x2f>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8049000 <free@plt>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804ecd4 <fts_close+0x64>
call   804d790 <calloc@plt+0x4370>
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x2c(%esi),%eax
test   $0x2,%ah
je     804ed60 <fts_close+0xf0>
mov    0x1c(%esi),%eax
test   %eax,%eax
js     804ed10 <fts_close+0xa0>
mov    %eax,(%esp)
call   80493d0 <close@plt>
test   %eax,%eax
jne    804eda0 <fts_close+0x130>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
lea    0x38(%esi),%eax
call   804d7d0 <calloc@plt+0x43b0>
mov    0x30(%esi),%eax
test   %eax,%eax
je     804ed29 <fts_close+0xb9>
mov    %eax,(%esp)
call   8050390 <fts_children+0xd40>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804ed90 <fts_close+0x120>
test   %eax,%eax
je     804ed41 <fts_close+0xd1>
mov    %eax,(%esp)
call   8050390 <fts_children+0xd40>
mov    %esi,(%esp)
call   8049000 <free@plt>
xor    %eax,%eax
test   %ebx,%ebx
jne    804ede5 <fts_close+0x175>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   $0x4,%al
jne    804ed10 <fts_close+0xa0>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049310 <fchdir@plt>
test   %eax,%eax
jne    804edb5 <fts_close+0x145>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
test   %eax,%eax
je     804ed10 <fts_close+0xa0>
call   8049290 <__errno_location@plt>
mov    %eax,%edi
mov    (%edi),%ebx
jmp    804ed12 <fts_close+0xa2>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049000 <free@plt>
jmp    804ed41 <fts_close+0xd1>
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
mov    (%eax),%ebx
jmp    804ed12 <fts_close+0xa2>
mov    %eax,%ebx
xchg   %ax,%ax
jmp    804ecc0 <fts_close+0x50>
call   8049290 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%edi
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
test   %eax,%eax
je     804ed12 <fts_close+0xa2>
test   %ebx,%ebx
jne    804ed12 <fts_close+0xa2>
mov    (%edi),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
jmp    804ed12 <fts_close+0xa2>
call   8049290 <__errno_location@plt>
mov    %ebx,(%eax)
mov    $0xffffffff,%eax
jmp    804ed53 <fts_close+0xe3>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%esi
mov    (%esi),%edi
test   %edi,%edi
je     804ef08 <fts_read+0x108>
mov    0x2c(%esi),%edx
test   $0x40,%dh
jne    804ef08 <fts_read+0x108>
movzwl 0x40(%edi),%eax
mov    $0x3,%ecx
mov    %cx,0x40(%edi)
cmp    $0x1,%ax
je     804f1b0 <fts_read+0x3b0>
cmp    $0x2,%ax
je     804ef18 <fts_read+0x118>
cmpw   $0x1,0x3c(%edi)
jne    804ee7d <fts_read+0x7d>
nop
jmp    804ef95 <fts_read+0x195>
lea    0x0(%esi),%esi
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8049000 <free@plt>
mov    0x30(%ebx),%edx
test   %edx,%edx
je     804efd0 <fts_read+0x1d0>
movzwl 0x40(%ebx),%eax
cmp    $0x4,%ax
jne    804f0d8 <fts_read+0x2d8>
mov    %ebx,%edi
mov    0x8(%edi),%ebx
test   %ebx,%ebx
jne    804ee58 <fts_read+0x58>
mov    0x4(%edi),%ebx
mov    0xc(%ebx),%ecx
test   %ecx,%ecx
jne    804f380 <fts_read+0x580>
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8049000 <free@plt>
cmpl   $0xffffffff,0x30(%ebx)
je     804f27d <fts_read+0x47d>
cmpw   $0xb,0x3c(%ebx)
je     804f5ad <fts_read+0x7ad>
mov    0x14(%esi),%edx
mov    0x28(%ebx),%eax
movb   $0x0,(%edx,%eax,1)
mov    0x30(%ebx),%ebp
test   %ebp,%ebp
je     804f20d <fts_read+0x40d>
movzwl 0x3e(%ebx),%eax
test   $0x2,%al
je     804f1cf <fts_read+0x3cf>
mov    0x2c(%esi),%eax
test   $0x4,%al
je     804f21d <fts_read+0x41d>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
mov    0x2c(%esi),%eax
mov    0x20(%ebx),%edi
test   %edi,%edi
je     804f190 <fts_read+0x390>
mov    $0x7,%edx
mov    %dx,0x3c(%ebx)
test   $0x40,%ah
je     804efbe <fts_read+0x1be>
xor    %eax,%eax
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movzwl 0x3c(%edi),%eax
lea    -0xc(%eax),%ecx
cmp    $0x1,%cx
jbe    804f242 <fts_read+0x442>
sub    $0x1,%ax
jne    804ee7d <fts_read+0x7d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x40,%dl
je     804f128 <fts_read+0x328>
mov    0x44(%edi),%eax
mov    0x48(%edi),%ecx
xor    0x10(%esi),%ecx
xor    0xc(%esi),%eax
or     %eax,%ecx
je     804f128 <fts_read+0x328>
testb  $0x2,0x3e(%edi)
jne    804f370 <fts_read+0x570>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804ef72 <fts_read+0x172>
call   804d790 <calloc@plt+0x4370>
movl   $0x0,0x4(%esi)
mov    $0x6,%eax
mov    %edi,%ecx
mov    %ax,0x3c(%edi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
call   804df00 <calloc@plt+0x4ae0>
add    $0x8c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x4,%ax
jne    804ef38 <fts_read+0x138>
jmp    804ef55 <fts_read+0x155>
lea    0x0(%esi),%esi
mov    0x70(%ebx),%edx
mov    0x74(%ebx),%eax
mov    %edx,%ecx
xor    $0x2,%ecx
or     %eax,%ecx
je     804f2fb <fts_read+0x4fb>
xor    $0x1,%edx
or     %eax,%edx
jne    804f5ad <fts_read+0x7ad>
add    $0x8c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
call   804d870 <calloc@plt+0x4450>
test   %eax,%eax
jne    804f2dd <fts_read+0x4dd>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804f2a0 <fts_read+0x4a0>
test   %eax,%eax
je     804effb <fts_read+0x1fb>
mov    %eax,(%esp)
call   8050390 <fts_children+0xd40>
mov    0x34(%ebx),%eax
lea    0xa4(%ebx),%edi
mov    %eax,0x28(%ebx)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8048ff0 <memmove@plt>
movl   $0x2f,0x4(%esp)
mov    %edi,(%esp)
call   80492f0 <strrchr@plt>
test   %eax,%eax
je     804f064 <fts_read+0x264>
cmp    %eax,%edi
je     804f2e9 <fts_read+0x4e9>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x18(%esp)
call   8049220 <strlen@plt>
mov    0x18(%esp),%edx
mov    %edi,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,%ebp
lea    0x1(%eax),%eax
mov    %eax,0x8(%esp)
call   8048ff0 <memmove@plt>
mov    %ebp,0x34(%ebx)
mov    0x14(%esi),%eax
lea    0x34(%esi),%edx
mov    %eax,0x1c(%ebx)
mov    %eax,0x18(%ebx)
mov    0x2c(%esi),%eax
call   804db20 <calloc@plt+0x4700>
movzwl 0x3c(%ebx),%ecx
cmp    $0xb,%cx
mov    %ebx,(%esi)
je     804efa0 <fts_read+0x1a0>
cmp    $0x1,%cx
mov    %ebx,%eax
jne    804ef0a <fts_read+0x10a>
mov    0x30(%ebx),%eax
test   %eax,%eax
jne    804f0a7 <fts_read+0x2a7>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %eax,0xc(%esi)
mov    %edx,0x10(%esi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804de20 <calloc@plt+0x4a00>
mov    %eax,%edx
mov    %ebx,%eax
test   %dl,%dl
jne    804ef0a <fts_read+0x10a>
call   8049290 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804ef0a <fts_read+0x10a>
lea    0x0(%esi),%esi
cmp    $0x2,%ax
je     804f3ab <fts_read+0x5ab>
mov    0x4(%ebx),%ecx
mov    0x28(%ecx),%edx
mov    0x1c(%ecx),%ecx
lea    -0x1(%edx),%eax
cmpb   $0x2f,-0x1(%ecx,%edx,1)
cmovne %edx,%eax
add    0x14(%esi),%eax
movb   $0x2f,(%eax)
mov    0x34(%ebx),%ecx
add    $0x1,%eax
mov    %eax,(%esp)
lea    0x1(%ecx),%edx
mov    %edx,0x8(%esp)
lea    0xa4(%ebx),%edx
mov    %edx,0x4(%esp)
call   8048ff0 <memmove@plt>
movzwl 0x3c(%ebx),%ecx
jmp    804f07c <fts_read+0x27c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f2bf <fts_read+0x4bf>
test   $0x20,%dh
jne    804f2ad <fts_read+0x4ad>
mov    0x18(%edi),%eax
mov    $0xffffffff,%ecx
mov    %edi,%edx
mov    %eax,(%esp)
mov    %esi,%eax
call   804dc00 <calloc@plt+0x47e0>
test   %eax,%eax
je     804f23a <fts_read+0x43a>
call   8049290 <__errno_location@plt>
mov    0x4(%esi),%edx
mov    %edx,%ebx
mov    (%eax),%eax
orw    $0x1,0x3e(%edi)
test   %edx,%edx
mov    %eax,0x20(%edi)
je     804f182 <fts_read+0x382>
mov    0x4(%ebx),%eax
mov    0x18(%eax),%eax
mov    %eax,0x18(%ebx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804f170 <fts_read+0x370>
mov    %edx,%ebx
movl   $0x0,0x4(%esi)
jmp    804f0e2 <fts_read+0x2e2>
xchg   %ax,%ax
mov    $0x6,%ecx
mov    %cx,0x3c(%ebx)
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804df00 <calloc@plt+0x4ae0>
mov    0x2c(%esi),%eax
jmp    804eeff <fts_read+0xff>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
mov    %ax,0x3c(%edi)
mov    %edi,%eax
jmp    804ef0a <fts_read+0x10a>
test   $0x1,%al
jne    804eee8 <fts_read+0xe8>
mov    0x4(%ebx),%edx
mov    $0xffffffff,%ecx
mov    %esi,%eax
movl   $0x8052ac9,(%esp)
call   804dc00 <calloc@plt+0x47e0>
test   %eax,%eax
je     804eee8 <fts_read+0xe8>
call   8049290 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    0x2c(%esi),%eax
or     $0x40,%ah
mov    %eax,0x2c(%esi)
jmp    804eeeb <fts_read+0xeb>
mov    %esi,%eax
call   804d870 <calloc@plt+0x4450>
test   %eax,%eax
jne    804f1f5 <fts_read+0x3f5>
jmp    804eee8 <fts_read+0xe8>
test   $0x2,%ah
je     804f3d7 <fts_read+0x5d7>
mov    0x24(%ebx),%edx
mov    $0x1,%ecx
mov    %esi,%eax
call   804d810 <calloc@plt+0x43f0>
jmp    804eedd <fts_read+0xdd>
mov    0x4(%esi),%ebx
jmp    804f182 <fts_read+0x382>
mov    0x1c(%esi),%eax
mov    %edi,%ecx
mov    %edi,%ebx
lea    0x2c(%esi),%edx
movl   $0x1,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
cmp    $0x1,%ax
mov    %eax,%ecx
mov    %ax,0x3c(%edi)
jne    804f07c <fts_read+0x27c>
mov    0x2c(%esi),%edx
test   $0x4,%dl
je     804f449 <fts_read+0x649>
mov    %edi,(%esi)
mov    %edi,%ebx
jmp    804f088 <fts_read+0x288>
mov    %ebx,(%esp)
call   8049000 <free@plt>
call   8049290 <__errno_location@plt>
movl   $0x0,(%eax)
xor    %eax,%eax
movl   $0x0,(%esi)
jmp    804ef0a <fts_read+0x10a>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049000 <free@plt>
jmp    804effb <fts_read+0x1fb>
and    $0xdf,%dh
mov    %edx,0x2c(%esi)
call   804d790 <calloc@plt+0x4370>
movl   $0x0,0x4(%esi)
mov    $0x3,%edx
mov    %esi,%eax
call   804dfd0 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,0x4(%esi)
je     804f4c6 <fts_read+0x6c6>
mov    %eax,%ebx
jmp    804f182 <fts_read+0x382>
orl    $0x4000,0x2c(%esi)
jmp    804ef08 <fts_read+0x108>
cmpb   $0x0,0xa5(%ebx)
jne    804f039 <fts_read+0x239>
jmp    804f064 <fts_read+0x264>
mov    0x30(%ebx),%eax
mov    0x4(%ebx),%edi
test   %eax,%eax
jle    804f31b <fts_read+0x51b>
mov    0x38(%edi),%eax
test   %eax,%eax
jne    804f31b <fts_read+0x51b>
mov    0x2c(%esi),%eax
and    $0x18,%eax
cmp    $0x18,%eax
je     804f46f <fts_read+0x66f>
mov    0x1c(%esi),%eax
mov    %ebx,%ecx
lea    0x2c(%esi),%edx
movl   $0x0,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
mov    %eax,%ecx
mov    %ax,0x3c(%ebx)
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
jne    804f088 <fts_read+0x288>
mov    0x30(%ebx),%eax
test   %eax,%eax
je     804f088 <fts_read+0x288>
mov    0x38(%edi),%eax
test   %eax,%eax
je     804f088 <fts_read+0x288>
sub    $0x1,%eax
mov    %eax,0x38(%edi)
jmp    804f088 <fts_read+0x288>
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%edi),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
jmp    804ef5f <fts_read+0x15f>
mov    0x28(%ebx),%eax
mov    0x14(%esi),%edx
mov    %ebx,(%esi)
movb   $0x0,(%edx,%eax,1)
mov    $0x3,%edx
mov    %esi,%eax
call   804dfd0 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,%ebx
je     804f410 <fts_read+0x610>
mov    %edi,(%esp)
call   8049000 <free@plt>
jmp    804f0e2 <fts_read+0x2e2>
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %ebx,%ecx
movl   $0x1,(%esp)
call   804d8d0 <calloc@plt+0x44b0>
cmp    $0x1,%ax
mov    %ax,0x3c(%ebx)
je     804f422 <fts_read+0x622>
mov    $0x3,%eax
mov    %ax,0x40(%ebx)
jmp    804f0e2 <fts_read+0x2e2>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049310 <fchdir@plt>
test   %eax,%eax
je     804eedd <fts_read+0xdd>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebp
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   80493d0 <close@plt>
mov    %edi,0x0(%ebp)
mov    %edi,0x20(%ebx)
orl    $0x4000,0x2c(%esi)
jmp    804eedd <fts_read+0xdd>
testb  $0x40,0x2d(%esi)
jne    804ef08 <fts_read+0x108>
mov    0x4(%edi),%ebx
jmp    804ee92 <fts_read+0x92>
mov    0x2c(%esi),%edx
test   $0x4,%dl
jne    804f3c9 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x8052aca,%ecx
call   804db90 <calloc@plt+0x4770>
test   %eax,%eax
mov    %eax,0x24(%ebx)
js     804f4fa <fts_read+0x6fa>
orw    $0x2,0x3e(%ebx)
jmp    804f3c9 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x8052aca,%ecx
call   804db90 <calloc@plt+0x4770>
test   %eax,%eax
mov    %eax,0x24(%edi)
js     804f512 <fts_read+0x712>
orw    $0x2,0x3e(%edi)
movzwl 0x3c(%edi),%ecx
jmp    804f07c <fts_read+0x27c>
mov    0x2c(%edi),%edx
testb  $0x2,0x2d(%edx)
mov    0x30(%edx),%ebp
je     804f31b <fts_read+0x51b>
test   %ebp,%ebp
je     804f5b2 <fts_read+0x7b2>
mov    0x44(%edi),%eax
mov    %edx,0x18(%esp)
mov    0x48(%edi),%edx
mov    %ebp,(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,0x24(%esp)
call   804ff70 <fts_children+0x920>
mov    0x18(%esp),%edx
test   %eax,%eax
je     804f52f <fts_read+0x72f>
movzbl 0x8(%eax),%edx
test   %dl,%dl
je     804f31b <fts_read+0x51b>
movzwl 0x3c(%ebx),%ecx
jmp    804f088 <fts_read+0x288>
mov    0x2c(%esi),%eax
test   $0x40,%ah
jne    804ef08 <fts_read+0x108>
mov    0x20(%edi),%ebp
test   %ebp,%ebp
je     804f4e9 <fts_read+0x6e9>
cmpw   $0x4,0x3c(%edi)
je     804f4e9 <fts_read+0x6e9>
mov    $0x7,%ebx
mov    %bx,0x3c(%edi)
lea    0x34(%esi),%edx
mov    %edi,%ecx
call   804df00 <calloc@plt+0x4ae0>
mov    %edi,%eax
jmp    804ef0a <fts_read+0x10a>
call   8049290 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    $0x7,%eax
mov    %ax,0x3c(%ebx)
jmp    804f3c9 <fts_read+0x5c9>
call   8049290 <__errno_location@plt>
mov    $0x7,%ecx
mov    (%eax),%eax
mov    %eax,0x20(%edi)
mov    $0x7,%eax
mov    %ax,0x3c(%edi)
jmp    804f274 <fts_read+0x474>
movl   $0xc,(%esp)
mov    %edx,0x1c(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804f31b <fts_read+0x51b>
mov    0x1c(%esp),%edx
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%edx),%eax
mov    %eax,(%esp)
call   80491f0 <fstatfs64@plt>
xor    %edx,%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
jne    804f577 <fts_read+0x777>
cmpl   $0x52654973,0x2c(%esp)
sete   %dl
mov    %dl,0x8(%ecx)
mov    0x44(%edi),%eax
mov    %edx,0x1c(%esp)
mov    0x48(%edi),%edx
mov    %ecx,0x18(%esp)
mov    %eax,(%ecx)
mov    %edx,0x4(%ecx)
mov    %ecx,0x4(%esp)
mov    %ebp,(%esp)
call   80507d0 <fts_children+0x1180>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804f5f8 <fts_read+0x7f8>
cmp    %eax,%ecx
je     804f4b5 <fts_read+0x6b5>
call   8049390 <abort@plt>
movl   $0x8049000,0x10(%esp)
movl   $0x804d5a0,0xc(%esp)
movl   $0x804d570,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %edx,0x18(%esp)
call   80501c0 <fts_children+0xb70>
mov    0x18(%esp),%edx
test   %eax,%eax
mov    %eax,%ebp
mov    %eax,0x30(%edx)
jne    804f487 <fts_read+0x687>
jmp    804f31b <fts_read+0x51b>
mov    %ecx,(%esp)
call   8049000 <free@plt>
jmp    804f31b <fts_read+0x51b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0xc,%esp
mov    0x18(%esp),%eax
cmp    $0x4,%eax
ja     804f630 <fts_set+0x20>
mov    0x14(%esp),%edx
mov    %ax,0x40(%edx)
xor    %eax,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
movl   $0x16,(%eax)
mov    $0x1,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
testl  $0xffffdfff,0x34(%esp)
mov    0x30(%esp),%ebx
jne    804f748 <fts_children+0xf8>
call   8049290 <__errno_location@plt>
mov    (%ebx),%esi
movl   $0x0,(%eax)
mov    %eax,%edi
testb  $0x40,0x2d(%ebx)
jne    804f760 <fts_children+0x110>
movzwl 0x3c(%esi),%ecx
cmp    $0x9,%cx
je     804f738 <fts_children+0xe8>
xor    %eax,%eax
cmp    $0x1,%cx
jne    804f6d6 <fts_children+0x86>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804f6a4 <fts_children+0x54>
call   804d790 <calloc@plt+0x4370>
cmpl   $0x2000,0x34(%esp)
mov    $0x1,%ebp
je     804f6e0 <fts_children+0x90>
mov    0x30(%esi),%eax
test   %eax,%eax
jne    804f6ca <fts_children+0x7a>
mov    0x18(%esi),%eax
cmpb   $0x2f,(%eax)
je     804f6ca <fts_children+0x7a>
mov    0x2c(%ebx),%edx
test   $0x4,%dl
je     804f6f8 <fts_children+0xa8>
mov    %ebp,%edx
mov    %ebx,%eax
call   804dfd0 <calloc@plt+0x4bb0>
mov    %eax,0x4(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x30(%esi),%eax
mov    $0x2,%bp
orl    $0x2000,0x2c(%ebx)
test   %eax,%eax
je     804f6ba <fts_children+0x6a>
jmp    804f6ca <fts_children+0x7a>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    $0x8052aca,%ecx
call   804db90 <calloc@plt+0x4770>
test   %eax,%eax
mov    %eax,%esi
js     804f780 <fts_children+0x130>
mov    %ebp,%edx
mov    %ebx,%eax
call   804dfd0 <calloc@plt+0x4bb0>
testb  $0x2,0x2d(%ebx)
mov    %eax,0x4(%ebx)
je     804f768 <fts_children+0x118>
mov    $0x1,%ecx
mov    %esi,%edx
mov    %ebx,%eax
call   804d810 <calloc@plt+0x43f0>
mov    0x4(%ebx),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x8(%esi),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049290 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804f6d6 <fts_children+0x86>
nop
mov    %esi,(%esp)
call   8049310 <fchdir@plt>
test   %eax,%eax
jne    804f78e <fts_children+0x13e>
mov    %esi,(%esp)
call   80493d0 <close@plt>
jmp    804f72b <fts_children+0xdb>
xchg   %ax,%ax
movl   $0x0,0x4(%ebx)
xor    %eax,%eax
jmp    804f6d6 <fts_children+0x86>
mov    (%edi),%ebx
mov    %esi,(%esp)
call   80493d0 <close@plt>
xor    %eax,%eax
mov    %ebx,(%edi)
jmp    804f6d6 <fts_children+0x86>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x0,0x8(%esp)
mov    0x24(%esp),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8050f50 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%edx
js     804f818 <fts_children+0x1c8>
mov    %eax,%ecx
mov    %esi,%ebx
and    $0xfffffffe,%eax
or     $0x1,%ecx
test   %bl,%bl
cmove  %eax,%ecx
xor    %eax,%eax
cmp    %edx,%ecx
je     804f810 <fts_children+0x1c0>
mov    %ecx,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   8050f50 <fts_children+0x1900>
cmp    $0xffffffff,%eax
sete   %al
movzbl %al,%eax
neg    %eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    $0xffffffff,%eax
jmp    804f810 <fts_children+0x1c0>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x406,0x4(%esp)
mov    %eax,(%esp)
call   8050f50 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8049110 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8050eb0 <fts_children+0x1860>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804f890 <fts_children+0x240>
test   %dl,%dl
je     804f887 <fts_children+0x237>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804f8b0 <fts_children+0x260>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804f887 <fts_children+0x237>
call   8049290 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049290 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
movl   $0x95f616,0x18(%eax)
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
cmpl   $0x95f616,0x18(%esi)
jne    804f9ad <fts_children+0x35d>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
mov    %edx,%ebx
or     %eax,%ebx
je     804f960 <fts_children+0x310>
mov    0x58(%edi),%ebx
mov    %ebx,%ecx
mov    %ebx,0x18(%esp)
mov    0x5c(%edi),%ebx
xor    (%esi),%ecx
mov    %ebx,0x1c(%esp)
xor    0x4(%esi),%ebx
or     %ecx,%ebx
je     804f990 <fts_children+0x340>
mov    %eax,%ecx
mov    %edx,%ebx
add    $0x1,%ecx
adc    $0x0,%ebx
mov    %ecx,%ebp
and    %eax,%ebp
and    %ebx,%edx
xor    %eax,%eax
or     %ebp,%edx
mov    %ecx,0x10(%esi)
mov    %ebx,0x14(%esi)
jne    804f986 <fts_children+0x336>
mov    %ebx,%eax
or     %ecx,%eax
je     804f9a0 <fts_children+0x350>
mov    0x18(%esp),%ebx
mov    0x1c(%esp),%ecx
jmp    804f974 <fts_children+0x324>
lea    0x0(%esi),%esi
mov    0x58(%edi),%ebx
mov    0x5c(%edi),%ecx
movl   $0x1,0x10(%esi)
movl   $0x0,0x14(%esi)
mov    (%edi),%eax
mov    0x4(%edi),%edx
mov    %ebx,(%esi)
mov    %ecx,0x4(%esi)
mov    %eax,0x8(%esi)
xor    %eax,%eax
mov    %edx,0xc(%esi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    (%edi),%ecx
mov    0x4(%edi),%ebx
xor    0xc(%esi),%ebx
xor    0x8(%esi),%ecx
or     %ecx,%ebx
jne    804f931 <fts_children+0x2e1>
nop
add    $0x2c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8052b3a,0xc(%esp)
movl   $0x3c,0x8(%esp)
movl   $0x8052b10,0x4(%esp)
movl   $0x8052b22,(%esp)
call   8049400 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x24(%esp),%edx
test   $0x40,%dl
cmovne 0x28(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048fa0 <open64@plt>
mov    %eax,(%esp)
call   8050e70 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
cmp    $0x9,%eax
push   %edi
push   %esi
push   %ebx
ja     804fa96 <fts_children+0x446>
mov    $0xb,%ebx
mov    $0xaaaaaaab,%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%ebx
jbe    804fa8f <fts_children+0x43f>
mov    %ebx,%eax
mul    %ebp
shr    %edx
lea    (%edx,%edx,2),%eax
cmp    %eax,%ebx
je     804fa80 <fts_children+0x430>
mov    $0x10,%edi
mov    $0x9,%esi
mov    $0x3,%ecx
jmp    804fa6d <fts_children+0x41d>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
add    $0x8,%edi
test   %edx,%edx
je     804fa80 <fts_children+0x430>
add    %edi,%esi
add    $0x2,%ecx
cmp    %ebx,%esi
jb     804fa60 <fts_children+0x410>
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
test   %edx,%edx
jne    804fa88 <fts_children+0x438>
add    $0x2,%ebx
cmp    $0xffffffff,%ebx
jne    804fa38 <fts_children+0x3e8>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%ecx
jmp    804fa76 <fts_children+0x426>
or     $0x1,%eax
cmp    $0xffffffff,%eax
mov    %eax,%ebx
jne    804fa2e <fts_children+0x3de>
jmp    804fa88 <fts_children+0x438>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
xor    %edx,%edx
ror    $0x3,%eax
divl   0x8(%esp)
mov    %edx,%eax
ret
mov    0x8(%esp),%eax
cmp    %eax,0x4(%esp)
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x8(%eax),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   *0x18(%ebx)
cmp    0x8(%ebx),%eax
jae    804faf2 <fts_children+0x4a2>
mov    (%ebx),%edx
add    $0x18,%esp
pop    %ebx
lea    (%edx,%eax,8),%eax
ret
call   8049390 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    %ecx,0xc(%esp)
mov    0x30(%esp),%ebp
call   804fad0 <fts_children+0x480>
mov    0xc(%esp),%ecx
mov    %eax,%ebx
mov    %eax,(%ecx)
mov    (%eax),%eax
test   %eax,%eax
je     804fb86 <fts_children+0x536>
cmp    %eax,%edi
je     804fb3a <fts_children+0x4ea>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
je     804fb7f <fts_children+0x52f>
mov    (%ebx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804fb60 <fts_children+0x510>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     804fbb8 <fts_children+0x568>
mov    (%edx),%edi
mov    0x4(%edx),%ebp
mov    %edi,(%ebx)
mov    %ebp,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%edx),%eax
cmp    %edi,%eax
je     804fb95 <fts_children+0x545>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
jne    804fb90 <fts_children+0x540>
mov    0x4(%ebx),%ebx
mov    0x4(%ebx),%edx
test   %edx,%edx
jne    804fb68 <fts_children+0x518>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4(%ebx),%edx
mov    (%edx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804fb60 <fts_children+0x510>
mov    0x4(%edx),%ecx
mov    %ecx,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,(%ebx)
jmp    804fb60 <fts_children+0x510>
mov    (%eax),%edx
mov    %eax,%ecx
cmp    $0x8052bb4,%edx
je     804fc68 <fts_children+0x618>
flds   0x8(%edx)
flds   0x8052bc8
fxch   %st(1)
fucomi %st(1),%st
jbe    804fc28 <fts_children+0x5d8>
flds   0x8052bcc
fucomip %st(1),%st
jbe    804fc30 <fts_children+0x5e0>
flds   0xc(%edx)
flds   0x8052bd0
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804fc38 <fts_children+0x5e8>
flds   (%edx)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     804fc40 <fts_children+0x5f0>
faddp  %st,%st(2)
flds   0x4(%edx)
fucomi %st(2),%st
jbe    804fc48 <fts_children+0x5f8>
fld1
fucomip %st(1),%st
fstp   %st(0)
jb     804fc50 <fts_children+0x600>
fucomip %st(1),%st
fstp   %st(0)
mov    $0x1,%eax
jbe    804fc58 <fts_children+0x608>
jmp    804fc6d <fts_children+0x61d>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
fstp   %st(0)
jmp    804fc58 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804fc58 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804fc58 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804fc58 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804fc58 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8052bb4,(%ecx)
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
repz ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%edx),%edi
cmp    0x4(%edx),%edi
mov    %edx,0x4(%esp)
mov    %cl,0xb(%esp)
jae    804fcf4 <fts_children+0x6a4>
mov    (%edi),%ebx
test   %ebx,%ebx
je     804fce8 <fts_children+0x698>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
jne    804fca7 <fts_children+0x657>
jmp    804fcda <fts_children+0x68a>
nop
mov    0x4(%eax),%ecx
test   %edx,%edx
mov    %ecx,0x4(%ebp)
mov    %ebp,0x4(%eax)
je     804fcd8 <fts_children+0x688>
mov    %edx,%ebp
mov    0x0(%ebp),%ebx
mov    %esi,%eax
mov    %ebx,%edx
call   804fad0 <fts_children+0x480>
mov    0x4(%ebp),%edx
mov    (%eax),%ecx
test   %ecx,%ecx
jne    804fc98 <fts_children+0x648>
mov    %ebx,(%eax)
addl   $0x1,0xc(%esi)
test   %edx,%edx
movl   $0x0,0x0(%ebp)
mov    0x24(%esi),%eax
mov    %eax,0x4(%ebp)
mov    %ebp,0x24(%esi)
jne    804fca5 <fts_children+0x655>
xchg   %ax,%ax
mov    (%edi),%ebx
cmpb   $0x0,0xb(%esp)
movl   $0x0,0x4(%edi)
je     804fd08 <fts_children+0x6b8>
mov    0x4(%esp),%eax
add    $0x8,%edi
cmp    %edi,0x4(%eax)
ja     804fc88 <fts_children+0x638>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %esi,%eax
call   804fad0 <fts_children+0x480>
mov    %eax,%edx
mov    (%eax),%eax
test   %eax,%eax
je     804fd52 <fts_children+0x702>
mov    0x24(%esi),%eax
test   %eax,%eax
je     804fd5a <fts_children+0x70a>
mov    0x4(%eax),%ecx
mov    %ecx,0x24(%esi)
mov    0x4(%edx),%ecx
mov    %ebx,(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x4(%edx)
mov    0x4(%esp),%eax
add    $0x8,%edi
movl   $0x0,-0x8(%edi)
subl   $0x1,0xc(%eax)
mov    0x4(%esp),%eax
cmp    %edi,0x4(%eax)
ja     804fc88 <fts_children+0x638>
jmp    804fcf4 <fts_children+0x6a4>
mov    %ebx,(%edx)
addl   $0x1,0xc(%esi)
jmp    804fd31 <fts_children+0x6e1>
movl   $0x8,(%esp)
mov    %edx,0xc(%esp)
call   8049170 <malloc@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    804fd26 <fts_children+0x6d6>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%ebx
mov    0x4(%eax),%esi
xor    %eax,%eax
cmp    %esi,%ebx
jae    804fdf6 <fts_children+0x7a6>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%edx
test   %edx,%edx
je     804fdef <fts_children+0x79f>
mov    0x4(%ebx),%edx
mov    $0x1,%ecx
test   %edx,%edx
je     804fdea <fts_children+0x79a>
lea    0x0(%esi),%esi
mov    0x4(%edx),%edx
add    $0x1,%ecx
test   %edx,%edx
jne    804fde0 <fts_children+0x790>
cmp    %ecx,%eax
cmovb  %ecx,%eax
add    $0x8,%ebx
cmp    %esi,%ebx
jb     804fdc8 <fts_children+0x778>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
xor    %edx,%edx
push   %esi
push   %ebx
mov    0x10(%esp),%edi
xor    %ebx,%ebx
mov    (%edi),%ecx
mov    0x4(%edi),%esi
cmp    %esi,%ecx
jae    804fe41 <fts_children+0x7f1>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804fe3a <fts_children+0x7ea>
mov    0x4(%ecx),%eax
add    $0x1,%ebx
add    $0x1,%edx
test   %eax,%eax
je     804fe3a <fts_children+0x7ea>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804fe30 <fts_children+0x7e0>
add    $0x8,%ecx
cmp    %esi,%ecx
jb     804fe18 <fts_children+0x7c8>
xor    %eax,%eax
cmp    %ebx,0xc(%edi)
je     804fe4c <fts_children+0x7fc>
pop    %ebx
pop    %esi
pop    %edi
ret
cmp    %edx,0x10(%edi)
pop    %ebx
pop    %esi
sete   %al
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    0x54(%esp),%ebx
mov    0xc(%eax),%edi
mov    (%eax),%ecx
mov    0x4(%eax),%ebp
mov    0x10(%eax),%esi
mov    %edi,0x24(%esp)
xor    %edi,%edi
cmp    %ebp,%ecx
mov    %esi,0x20(%esp)
mov    0x8(%eax),%esi
jae    804febe <fts_children+0x86e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804feb7 <fts_children+0x867>
mov    0x4(%ecx),%eax
mov    $0x1,%edx
test   %eax,%eax
je     804feb2 <fts_children+0x862>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804fea8 <fts_children+0x858>
cmp    %edx,%edi
cmovb  %edx,%edi
add    $0x8,%ecx
cmp    %ebp,%ecx
jb     804fe90 <fts_children+0x840>
mov    0x20(%esp),%eax
mov    %ebx,(%esp)
movl   $0x8052b46,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   8049360 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8052b5e,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049360 <__fprintf_chk@plt>
mov    0x24(%esp),%ecx
xor    %edx,%edx
mov    %edx,0x2c(%esp)
xor    %edx,%edx
mov    %ebx,(%esp)
movl   $0x8052b90,0x8(%esp)
mov    %ecx,0x28(%esp)
mov    %ecx,0xc(%esp)
fildll 0x28(%esp)
fmuls  0x8052bd4
mov    %esi,0x28(%esp)
mov    %edx,0x2c(%esp)
movl   $0x1,0x4(%esp)
fildll 0x28(%esp)
fdivrp %st,%st(1)
fstpl  0x10(%esp)
call   8049360 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8052b76,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049360 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804fad0 <fts_children+0x480>
mov    (%eax),%ecx
mov    %eax,%ebx
test   %ecx,%ecx
jne    804ff9a <fts_children+0x94a>
jmp    804ffb3 <fts_children+0x963>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
cmp    %ecx,%esi
je     804ffc2 <fts_children+0x972>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   *0x1c(%edi)
test   %al,%al
jne    804ffc0 <fts_children+0x970>
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    804ff98 <fts_children+0x948>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
add    $0x10,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    0x10(%esp),%eax
mov    0x10(%eax),%edx
test   %edx,%edx
je     8050001 <fts_children+0x9b1>
mov    (%eax),%edx
mov    0x4(%eax),%ecx
cmp    %ecx,%edx
jb     804fff7 <fts_children+0x9a7>
jmp    8050007 <fts_children+0x9b7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%edx
cmp    %ecx,%edx
jae    8050007 <fts_children+0x9b7>
mov    (%edx),%eax
test   %eax,%eax
je     804fff0 <fts_children+0x9a0>
add    $0xc,%esp
ret
xor    %eax,%eax
add    $0xc,%esp
ret
call   8049390 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804fad0 <fts_children+0x480>
mov    %eax,%ebx
mov    %eax,%ecx
jmp    8050037 <fts_children+0x9e7>
lea    0x0(%esi),%esi
mov    0x4(%ecx),%ecx
test   %ecx,%ecx
je     8050042 <fts_children+0x9f2>
cmp    %esi,(%ecx)
jne    8050030 <fts_children+0x9e0>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    805005b <fts_children+0xa0b>
mov    0x4(%edi),%edx
jmp    805004e <fts_children+0x9fe>
nop
mov    (%ebx),%eax
test   %eax,%eax
jne    8050057 <fts_children+0xa07>
add    $0x8,%ebx
cmp    %edx,%ebx
jb     8050048 <fts_children+0x9f8>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
pop    %ebx
mov    (%eax),%eax
pop    %esi
pop    %edi
ret
jmp    8050070 <fts_children+0xa20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    0x0(%ebp),%edi
cmp    %edi,0x4(%ebp)
jbe    80500c8 <fts_children+0xa78>
mov    (%edi),%edx
test   %edx,%edx
je     80500bc <fts_children+0xa6c>
cmp    %eax,%ebx
jbe    80500c8 <fts_children+0xa78>
mov    %edx,(%esi,%eax,4)
mov    0x4(%edi),%edx
lea    0x1(%eax),%ecx
mov    %ecx,%eax
test   %edx,%edx
je     80500bc <fts_children+0xa6c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,%eax
je     80500c8 <fts_children+0xa78>
mov    (%edx),%ecx
add    $0x1,%eax
mov    %ecx,-0x4(%esi,%eax,4)
mov    0x4(%edx),%edx
test   %edx,%edx
jne    80500a8 <fts_children+0xa58>
add    $0x8,%edi
cmp    %edi,0x4(%ebp)
ja     805008a <fts_children+0xa3a>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x30(%esp),%ecx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%eax),%eax
cmp    %eax,0x4(%ecx)
mov    %eax,0xc(%esp)
jbe    8050138 <fts_children+0xae8>
mov    0xc(%esp),%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    805010b <fts_children+0xabb>
jmp    8050122 <fts_children+0xad2>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   *%esi
test   %al,%al
je     8050138 <fts_children+0xae8>
mov    0x4(%ebp),%ebp
add    $0x1,%ebx
test   %ebp,%ebp
jne    8050108 <fts_children+0xab8>
mov    0x30(%esp),%eax
addl   $0x8,0xc(%esp)
mov    0xc(%esp),%edx
cmp    %edx,0x4(%eax)
ja     80500f4 <fts_children+0xaa4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    0xc(%esp),%ebx
mov    0x10(%esp),%esi
movzbl (%ebx),%ecx
test   %cl,%cl
je     8050182 <fts_children+0xb32>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %cl,%eax
mov    %edx,%ecx
shl    $0x5,%ecx
add    $0x1,%ebx
sub    %edx,%ecx
xor    %edx,%edx
add    %ecx,%eax
movzbl (%ebx),%ecx
div    %esi
test   %cl,%cl
jne    8050168 <fts_children+0xb18>
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x0,(%eax)
movl   $0x3f800000,0x4(%eax)
movl   $0x3f4ccccd,0x8(%eax)
movl   $0x3fb4fdf4,0xc(%eax)
movb   $0x0,0x10(%eax)
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x804fab0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%edi
mov    0x4c(%esp),%esi
movl   $0x28,(%esp)
mov    0x44(%esp),%ebx
test   %edi,%edi
cmove  %eax,%edi
test   %esi,%esi
mov    $0x804fac0,%eax
cmove  %eax,%esi
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     80502f8 <fts_children+0xca8>
test   %ebx,%ebx
mov    $0x8052bb4,%eax
cmove  %eax,%ebx
mov    %ebx,0x14(%ebp)
lea    0x14(%ebp),%eax
call   804fbc0 <fts_children+0x570>
test   %al,%al
je     80502e1 <fts_children+0xc91>
cmpb   $0x0,0x10(%ebx)
flds   0x8(%ebx)
jne    8050270 <fts_children+0xc20>
mov    0x40(%esp),%ecx
xor    %ebx,%ebx
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8052bd8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80502d8 <fts_children+0xc88>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,0x40(%esp)
jmp    8050272 <fts_children+0xc22>
nop
fstp   %st(0)
mov    0x40(%esp),%eax
call   804fa20 <fts_children+0x3d0>
cmp    $0x3fffffff,%eax
mov    %eax,%ebx
ja     80502da <fts_children+0xc8a>
test   %eax,%eax
mov    %eax,0x8(%ebp)
je     80502e1 <fts_children+0xc91>
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   8049420 <calloc@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     80502e1 <fts_children+0xc91>
lea    (%eax,%ebx,8),%eax
mov    %eax,0x4(%ebp)
mov    0x50(%esp),%eax
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
mov    %edi,0x18(%ebp)
mov    %eax,0x20(%ebp)
mov    %ebp,%eax
mov    %esi,0x1c(%ebp)
movl   $0x0,0x24(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
movl   $0x0,0x8(%ebp)
mov    %ebp,(%esp)
call   8049000 <free@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    80502cc <fts_children+0xc7c>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8050376 <fts_children+0xd26>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
test   %eax,%eax
je     805036e <fts_children+0xd1e>
mov    0x4(%edi),%ebx
mov    0x20(%esi),%edx
test   %ebx,%ebx
jne    8050332 <fts_children+0xce2>
jmp    8050356 <fts_children+0xd06>
lea    0x0(%esi),%esi
mov    %eax,%ebx
test   %edx,%edx
je     8050340 <fts_children+0xcf0>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *%edx
mov    0x20(%esi),%edx
mov    0x4(%ebx),%eax
mov    0x24(%esi),%ecx
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %ecx,0x4(%ebx)
mov    %ebx,0x24(%esi)
jne    8050330 <fts_children+0xce0>
test   %edx,%edx
je     8050361 <fts_children+0xd11>
mov    (%edi),%eax
mov    %eax,(%esp)
call   *%edx
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     8050318 <fts_children+0xcc8>
movl   $0x0,0xc(%esi)
movl   $0x0,0x10(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x20(%esi),%edx
test   %edx,%edx
je     80503a8 <fts_children+0xd58>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    805041a <fts_children+0xdca>
mov    0x4(%esi),%eax
mov    (%esi),%edi
cmp    %eax,%edi
jae    80503e1 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edi),%eax
test   %eax,%eax
jne    80503ca <fts_children+0xd7a>
jmp    80503d9 <fts_children+0xd89>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
test   %ebx,%ebx
jne    80503c8 <fts_children+0xd78>
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     80503b8 <fts_children+0xd68>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    80503f2 <fts_children+0xda2>
jmp    8050401 <fts_children+0xdb1>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
test   %ebx,%ebx
jne    80503f0 <fts_children+0xda0>
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049000 <free@plt>
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    80503e1 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
mov    %edi,%ebx
test   %eax,%eax
jne    805043a <fts_children+0xdea>
jmp    8050447 <fts_children+0xdf7>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *0x20(%esi)
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    8050438 <fts_children+0xde8>
mov    0x4(%esi),%eax
add    $0x8,%edi
cmp    %edi,%eax
ja     8050428 <fts_children+0xdd8>
jmp    80503ab <fts_children+0xd5b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    0x64(%esp),%eax
mov    0x14(%esi),%edi
cmpb   $0x0,0x10(%edi)
flds   0x8(%edi)
jne    80504c0 <fts_children+0xe70>
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    %ebx,0x14(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8052bd8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80505a0 <fts_children+0xf50>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,%eax
jmp    80504c2 <fts_children+0xe72>
fstp   %st(0)
call   804fa20 <fts_children+0x3d0>
mov    %eax,%ebx
lea    -0x1(%eax),%eax
cmp    $0x3ffffffe,%eax
ja     80505a2 <fts_children+0xf52>
cmp    %ebx,0x8(%esi)
je     8050590 <fts_children+0xf40>
movl   $0x8,0x4(%esp)
mov    %ebx,(%esp)
call   8049420 <calloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     80505a2 <fts_children+0xf52>
lea    (%eax,%ebx,8),%eax
xor    %ecx,%ecx
mov    %eax,0x2c(%esp)
mov    0x18(%esi),%eax
mov    %esi,%edx
mov    %ebx,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,0x40(%esp)
mov    0x1c(%esi),%eax
mov    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x48(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x4c(%esp)
lea    0x28(%esp),%eax
call   804fc70 <fts_children+0x620>
test   %al,%al
mov    %eax,%ebx
jne    80505b0 <fts_children+0xf60>
mov    0x4c(%esp),%eax
mov    $0x1,%ecx
lea    0x28(%esp),%edx
mov    %eax,0x24(%esi)
mov    %esi,%eax
call   804fc70 <fts_children+0x620>
test   %al,%al
je     80505e5 <fts_children+0xf95>
xor    %ecx,%ecx
mov    %esi,%eax
lea    0x28(%esp),%edx
call   804fc70 <fts_children+0x620>
test   %al,%al
je     80505e5 <fts_children+0xf95>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x50,%esp
mov    $0x1,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
fstp   %st(0)
add    $0x50,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x30(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esi)
mov    0x4c(%esp),%eax
mov    %eax,0x24(%esi)
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
call   8049390 <abort@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%edi
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebx
test   %edi,%edi
je     8050778 <fts_children+0x1128>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804fb00 <fts_children+0x4b0>
test   %eax,%eax
je     8050638 <fts_children+0xfe8>
test   %ebx,%ebx
je     80506b8 <fts_children+0x1068>
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  0x8(%eax)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050678 <fts_children+0x1028>
jmp    80506c8 <fts_children+0x1078>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     8050780 <fts_children+0x1130>
mov    0x24(%esi),%eax
test   %eax,%eax
je     8050794 <fts_children+0x1144>
mov    0x4(%eax),%edx
mov    %edx,0x24(%esi)
mov    0x4(%ebx),%edx
mov    %edi,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x4(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%esi),%eax
call   804fbc0 <fts_children+0x570>
mov    0x14(%esi),%ecx
xor    %edx,%edx
mov    0x8(%esi),%eax
flds   0x8(%ecx)
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
fld    %st(2)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050670 <fts_children+0x1020>
cmpb   $0x0,0x10(%ecx)
fmuls  0xc(%ecx)
jne    8050718 <fts_children+0x10c8>
fmulp  %st,%st(1)
jmp    805071a <fts_children+0x10ca>
lea    0x0(%esi),%esi
fstp   %st(1)
flds   0x8052bd8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80507aa <fts_children+0x115a>
fnstcw 0x1e(%esp)
mov    %esi,(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   8050460 <fts_children+0xe10>
test   %al,%al
je     80507ac <fts_children+0x115c>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804fb00 <fts_children+0x4b0>
test   %eax,%eax
je     8050678 <fts_children+0x1028>
call   8049390 <abort@plt>
lea    0x0(%esi),%esi
mov    %edi,(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
addl   $0x1,0xc(%esi)
jmp    805062e <fts_children+0xfde>
movl   $0x8,(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
jne    8050697 <fts_children+0x1047>
jmp    80507ac <fts_children+0x115c>
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    805062e <fts_children+0xfde>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
jmp    80505f0 <fts_children+0xfa0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x34(%esp),%ebx
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80505f0 <fts_children+0xfa0>
cmp    $0xffffffff,%eax
je     8050808 <fts_children+0x11b8>
test   %eax,%eax
mov    %ebx,%eax
cmove  0x1c(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    80507fe <fts_children+0x11ae>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
lea    0x2c(%esp),%ecx
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %esi,%eax
call   804fb00 <fts_children+0x4b0>
test   %eax,%eax
mov    %eax,%edi
je     8050948 <fts_children+0x12f8>
mov    %eax,%ebp
mov    0x2c(%esp),%eax
subl   $0x1,0x10(%esi)
mov    (%eax),%eax
test   %eax,%eax
jne    8050858 <fts_children+0x1208>
jmp    8050868 <fts_children+0x1218>
lea    0x0(%esi),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
sub    $0x1,%eax
mov    %eax,0xc(%esi)
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  (%eax)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050858 <fts_children+0x1208>
lea    0x14(%esi),%eax
call   804fbc0 <fts_children+0x570>
mov    0x8(%esi),%eax
xor    %edx,%edx
mov    0x14(%esi),%ecx
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
flds   (%ecx)
fmul   %st(2),%st
fucomip %st(1),%st
fstp   %st(0)
jbe    8050850 <fts_children+0x1200>
cmpb   $0x0,0x10(%ecx)
fmuls  0x4(%ecx)
je     8050950 <fts_children+0x1300>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,%ebp
mov    %esi,(%esp)
call   8050460 <fts_children+0xe10>
test   %al,%al
jne    8050858 <fts_children+0x1208>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    805092a <fts_children+0x12da>
lea    0x0(%esi,%eiz,1),%esi
jmp    8050939 <fts_children+0x12e9>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049000 <free@plt>
test   %ebx,%ebx
jne    8050928 <fts_children+0x12d8>
movl   $0x0,0x24(%esi)
mov    %edi,%ebp
jmp    8050858 <fts_children+0x1208>
nop
xor    %ebp,%ebp
jmp    8050858 <fts_children+0x1208>
nop
fmuls  0x8(%ecx)
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
jmp    80508ff <fts_children+0x12af>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
movb   $0x1,0x1c(%eax)
movl   $0x0,0x14(%eax)
movl   $0x0,0x18(%eax)
mov    %edx,(%eax)
mov    %edx,0x4(%eax)
mov    %edx,0x8(%eax)
mov    %edx,0xc(%eax)
mov    %edx,0x10(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movzbl 0x1c(%eax),%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%edi
movzbl 0x1c(%edx),%eax
mov    0x14(%edx),%ecx
xor    $0x1,%eax
movzbl %al,%esi
add    %esi,%ecx
and    $0x3,%ecx
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %edi,(%ebx)
mov    0x18(%edx),%ebx
mov    %ecx,0x14(%edx)
cmp    %ecx,%ebx
jne    80509f6 <fts_children+0x13a6>
add    %esi,%ebx
and    $0x3,%ebx
mov    %ebx,0x18(%edx)
movb   $0x0,0x1c(%edx)
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%edx
cmpb   $0x0,0x1c(%edx)
jne    8050a3a <fts_children+0x13ea>
mov    0x14(%edx),%ecx
mov    0x10(%edx),%esi
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %esi,(%ebx)
cmp    0x18(%edx),%ecx
je     8050a30 <fts_children+0x13e0>
add    $0x3,%ecx
and    $0x3,%ecx
mov    %ecx,0x14(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
movb   $0x1,0x1c(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
call   8049390 <abort@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   80492d0 <nl_langinfo@plt>
mov    0x8056370,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x80526fd,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     8050b0c <fts_children+0x14bc>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8050ad7 <fts_children+0x1487>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8050ab0 <fts_children+0x1460>
nop
mov    %ebp,(%esp)
call   8049220 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049220 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8050b08 <fts_children+0x14b8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048f90 <strcmp@plt>
test   %eax,%eax
je     8050acb <fts_children+0x147b>
cmp    $0x2a,%bl
jne    8050a90 <fts_children+0x1440>
cmpb   $0x0,0x1(%ebp)
jne    8050a90 <fts_children+0x1440>
mov    %ebp,(%esp)
call   8049220 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8052be5,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8050dcd <fts_children+0x177d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8050ad7 <fts_children+0x1487>
movl   $0x8052beb,(%esp)
call   8049150 <getenv@plt>
test   %eax,%eax
je     8050b25 <fts_children+0x14d5>
cmpb   $0x0,(%eax)
jne    8050d33 <fts_children+0x16e3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8052bdc,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8050d24 <fts_children+0x16d4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049170 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8050dc3 <fts_children+0x1773>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8049010 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050b8c <fts_children+0x153c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048fa0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050d08 <fts_children+0x16b8>
movl   $0x80522fb,0x4(%esp)
mov    %eax,(%esp)
call   80491b0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8050d00 <fts_children+0x16b0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050ce6 <fts_children+0x1696>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8050bf0 <fts_children+0x15a0>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8050bf0 <fts_children+0x15a0>
cmp    $0x23,%eax
je     8050d5d <fts_children+0x170d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049280 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8052bfb,0x4(%esp)
mov    %esi,(%esp)
call   8049210 <fscanf@plt>
cmp    $0x1,%eax
jle    8050d80 <fts_children+0x1730>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049220 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049220 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    8050d9e <fts_children+0x174e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049170 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8050dd2 <fts_children+0x1782>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049100 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049100 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     8050bfc <fts_children+0x15ac>
mov    %esi,(%esp)
call   80492c0 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8050d80 <fts_children+0x1730>
jmp    8050c05 <fts_children+0x15b5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   80493d0 <close@plt>
mov    $0x80526fd,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049000 <free@plt>
mov    %ebp,0x8056370
jmp    8050a7f <fts_children+0x142f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    8050b4b <fts_children+0x14fb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049220 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8050d24 <fts_children+0x16d4>
lea    -0x1(%eax),%eax
jmp    8050b34 <fts_children+0x14e4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8050d77 <fts_children+0x1727>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050dec <fts_children+0x179c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    8050d58 <fts_children+0x1708>
cmp    $0xffffffff,%eax
jne    8050bf0 <fts_children+0x15a0>
mov    %esi,(%esp)
call   8050eb0 <fts_children+0x1860>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050d08 <fts_children+0x16b8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    8050d0d <fts_children+0x16bd>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8049160 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    8050c9c <fts_children+0x164c>
mov    $0x80526fd,%ebp
jmp    8050d19 <fts_children+0x16c9>
call   8049090 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x80526fd,%ebp
call   8049000 <free@plt>
mov    %esi,(%esp)
call   8050eb0 <fts_children+0x1860>
jmp    8050d0d <fts_children+0x16bd>
mov    %esi,(%esp)
call   80492c0 <__uflow@plt>
jmp    8050d72 <fts_children+0x1722>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x28(%esp),%edx
test   $0x40,%dl
cmovne 0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049230 <openat64@plt>
mov    %eax,(%esp)
call   8050e70 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8050f50 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
ja     8050e9f <fts_children+0x184f>
mov    %ebx,(%esp)
call   8050e40 <fts_children+0x17f0>
mov    %eax,%edi
call   8049290 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   80493d0 <close@plt>
mov    %ebp,(%esi)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80492a0 <fileno@plt>
test   %eax,%eax
js     8050f38 <fts_children+0x18e8>
mov    %ebx,(%esp)
call   8049180 <__freading@plt>
test   %eax,%eax
jne    8050f08 <fts_children+0x18b8>
mov    %ebx,(%esp)
call   8051070 <fts_children+0x1a20>
test   %eax,%eax
je     8050f38 <fts_children+0x18e8>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049040 <fclose@plt>
test   %edi,%edi
je     8050efa <fts_children+0x18aa>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   80492a0 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049330 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8050ed2 <fts_children+0x1882>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049040 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    8050fb0 <fts_children+0x1960>
mov    0x8056374,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     8051058 <fts_children+0x1a08>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   8049260 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8050fd0 <fts_children+0x1980>
movl   $0x1,0x8056374
00
test   %ebx,%ebx
js     8050fa7 <fts_children+0x1957>
cmpl   $0xffffffff,0x8056374
je     8051000 <fts_children+0x19b0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   8049260 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8049290 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    8050f90 <fts_children+0x1940>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8050f50 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%ebx
js     8050fa7 <fts_children+0x1957>
movl   $0xffffffff,0x8056374
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049260 <fcntl@plt>
test   %eax,%eax
js     8051034 <fts_children+0x19e4>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   8049260 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    8050fa7 <fts_children+0x1957>
call   8049290 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   80493d0 <close@plt>
mov    %edi,(%esi)
jmp    8050fa7 <fts_children+0x1957>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8050f50 <fts_children+0x1900>
mov    %eax,%ebx
jmp    8050f9a <fts_children+0x194a>
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8051088 <fts_children+0x1a38>
mov    %ebx,(%esp)
call   8049180 <__freading@plt>
test   %eax,%eax
jne    8051098 <fts_children+0x1a48>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fc0 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8051088 <fts_children+0x1a38>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   80510d0 <fts_children+0x1a80>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fc0 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     8051110 <fts_children+0x1ac0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049050 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    80510ef <fts_children+0x1a9f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    80510ef <fts_children+0x1a9f>
mov    %ebx,(%esp)
call   80492a0 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8049330 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     8051157 <fts_children+0x1b07>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    805114f <fts_children+0x1aff>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    80511b0 <fts_children+0x1b60>
cmp    %ebp,%ecx
ja     80511e8 <fts_children+0x1b98>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8051198 <fts_children+0x1b48>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     80511d8 <fts_children+0x1b88>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    80511f8 <fts_children+0x1ba8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8051268 <fts_children+0x1c18>
cmp    %edx,%eax
jb     8051268 <fts_children+0x1c18>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8051278 <fts_children+0x1c28>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8051259 <fts_children+0x1c09>
cmp    (%esp),%esi
je     8051278 <fts_children+0x1c28>
mov    %edi,%eax
xor    %edx,%edx
jmp    80511dc <fts_children+0x1b8c>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    80511dc <fts_children+0x1b8c>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    80512d8 <fts_children+0x1c88>
cmp    %edi,%esi
jbe    8051310 <fts_children+0x1cc0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8051330 <fts_children+0x1ce0>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8051340 <fts_children+0x1cf0>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     80513d8 <fts_children+0x1d88>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8051321 <fts_children+0x1cd1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    80512cb <fts_children+0x1c7b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     80513c4 <fts_children+0x1d74>
cmp    %eax,0xc(%esp)
jb     80513c0 <fts_children+0x1d70>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    805139e <fts_children+0x1d4e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    805139e <fts_children+0x1d4e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     80512f1 <fts_children+0x1ca1>
jmp    8051301 <fts_children+0x1cb1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   80499f0 <calloc@plt+0x5d0>
add    $0x4c05,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048f40 <endgrent@plt-0x40>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8051449 <fts_children+0x1df9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8051428 <fts_children+0x1dd8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8051460 <fts_children+0x1e10>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   80499f0 <calloc@plt+0x5d0>
add    $0x4b8a,%ebx
sub    $0x18,%esp
lea    0x144(%ebx),%eax
test   %eax,%eax
je     80514a8 <fts_children+0x1e58>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049130 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    805148b <fts_children+0x1e3b>
push   %ebx
sub    $0x8,%esp
call   80499f0 <calloc@plt+0x5d0>
add    $0x4b4b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     8051544 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     80514fc <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8051545 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8051554 <_IO_stdin_used+0x90>
popa
je     8051553 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %al,%cs:0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x4f5b2073
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %ch,%cs:0x6665722d
66
gs
jb     8051597 <_IO_stdin_used+0xd3>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%al
add    %al,(%eax)
add    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ah,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    80515c8 <_IO_stdin_used+0x104>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
or     %cs:0x69(%edi),%dl
je     80515dc <_IO_stdin_used+0x118>
and    %ch,0x6665722d
gs
jb     80515e2 <_IO_stdin_used+0x11e>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2c(%ebp)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ah,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8051602 <_IO_stdin_used+0x13e>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
je     805160d <_IO_stdin_used+0x149>
popa
je     80515c8 <_IO_stdin_used+0x104>
outsl  %ds:(%esi),(%dx)
data16
and    %dl,0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
or     %cs:(%edx),%cl
add    %ah,(%eax)
and    %ch,0x2d202c63
sub    $0x6e616863,%eax
addr16
gs
jae    80515e4 <_IO_stdin_used+0x120>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6b(%ecx,%ebp,2)
and    %dh,%gs:0x65(%esi)
jb     8051638 <_IO_stdin_used+0x174>
outsl  %ds:(%esi),(%dx)
jae    805163e <_IO_stdin_used+0x17a>
and    %ah,0x75(%edx)
je     80515fe <_IO_stdin_used+0x13a>
jb     8051645 <_IO_stdin_used+0x181>
jo     8051651 <_IO_stdin_used+0x18d>
jb     8051658 <_IO_stdin_used+0x194>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    805160a <_IO_stdin_used+0x146>
ja     8051654 <_IO_stdin_used+0x190>
outsb  %gs:(%esi),(%dx)
and    %ah,0x20(%ecx)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x73(%bx,%di)
and    %ch,0x61(%ebp)
fs or  %fs:%gs:(%eax),%ah
and    %ch,0x2d202c66
sub    $0x656c6973,%eax
outsb  %ds:(%esi),(%dx)
je     805163b <_IO_stdin_used+0x177>
and    %ch,0x6975712d
gs
je     8051638 <_IO_stdin_used+0x174>
and    %dh,0x75(%ebx)
jo     805168d <_IO_stdin_used+0x1c9>
jb     8051684 <_IO_stdin_used+0x1c0>
jae    8051694 <_IO_stdin_used+0x1d0>
and    %ch,0x6f(%ebp)
jae    805169a <_IO_stdin_used+0x1d6>
and    %ah,0x72(%ebp)
jb     805169a <_IO_stdin_used+0x1d6>
jb     805164d <_IO_stdin_used+0x189>
insl   (%dx),%es:(%edi)
gs
jae    80516a4 <_IO_stdin_used+0x1e0>
popa
addr16
gs
jae    8051640 <_IO_stdin_used+0x17c>
and    %ah,(%eax)
sub    $0x2d202c76,%eax
sub    $0x62726576,%eax
outsl  %ds:(%esi),(%dx)
jae    80516aa <_IO_stdin_used+0x1e6>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80516c6 <_IO_stdin_used+0x202>
jo     80516c9 <_IO_stdin_used+0x205>
je     8051676 <_IO_stdin_used+0x1b2>
popa
and    %ah,0x61(%ecx,%ebp,2)
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jae    80516d4 <_IO_stdin_used+0x210>
imul   $0x20726f66,0x20(%ebx),%esp
gs
jbe    80516cf <_IO_stdin_used+0x20b>
jb     80516e5 <_IO_stdin_used+0x221>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    80516df <_IO_stdin_used+0x21b>
or     %fs:(%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265642d
gs
data16
gs
jb     80516f5 <_IO_stdin_used+0x231>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x66(%ecx)
data16
arpl   %si,%gs:0x74(%eax,%eiz,1)
push   $0x65722065
data16
gs
jb     805170f <_IO_stdin_used+0x24b>
outsb  %ds:(%esi),(%dx)
je     80516cd <_IO_stdin_used+0x209>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
jae    8051730 <_IO_stdin_used+0x26c>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ch,(%eax)
je     805172e <_IO_stdin_used+0x26a>
imul   $0x200a7369,0x20(%ebx),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     805174f <_IO_stdin_used+0x28b>
and    %ah,%gs:0x66(%ebp,%eiz,2)
popa
jne    805175b <_IO_stdin_used+0x297>
je     805171a <_IO_stdin_used+0x256>
sub    $0x20,%al
jb     8051756 <_IO_stdin_used+0x292>
je     805175f <_IO_stdin_used+0x29b>
gs
jb     805171a <_IO_stdin_used+0x256>
je     8051764 <_IO_stdin_used+0x2a0>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ch,0x74(%ecx)
jae    805177a <_IO_stdin_used+0x2b6>
insb   (%dx),%es:(%edi)
data16
or     (%eax),%ah
and    %ch,0x2d202c68
sub    $0x642d6f6e,%eax
gs
jb     805178c <_IO_stdin_used+0x2c8>
data16
gs
jb     8051790 <_IO_stdin_used+0x2cc>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
popa
data16
data16
arpl   %si,%gs:0x73(%eax,%eiz,1)
jns    80517a8 <_IO_stdin_used+0x2e4>
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    8051767 <_IO_stdin_used+0x2a3>
imul   $0x64616574,0x73(%esi),%ebp
and    %ch,0x66(%edi)
and    %ah,0x6e(%ecx)
jns    8051776 <_IO_stdin_used+0x2b2>
jb     80517bd <_IO_stdin_used+0x2f9>
data16
gs
jb     80517c1 <_IO_stdin_used+0x2fd>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x64(%ebp)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %dh,0x73(%ebp)
gs
data16
jne    80517f4 <_IO_stdin_used+0x330>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    80517ae <_IO_stdin_used+0x2ea>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x79(%ebx)
jae    8051809 <_IO_stdin_used+0x345>
gs
insl   (%dx),%es:(%edi)
jae    80517b9 <_IO_stdin_used+0x2f5>
je     8051803 <_IO_stdin_used+0x33f>
popa
je     80517be <_IO_stdin_used+0x2fa>
arpl   %sp,0x6e(%ecx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
ja     8051837 <_IO_stdin_used+0x373>
gs
jb     805183f <_IO_stdin_used+0x37b>
push   $0x6f207069
data16
and    %ah,0x20(%ecx)
jae    8051850 <_IO_stdin_used+0x38c>
insl   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0xa29,0x6b(%esi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x2d6f6e2d,%eax
jo     805185f <_IO_stdin_used+0x39b>
gs
jae    8051855 <_IO_stdin_used+0x391>
jb     8051868 <_IO_stdin_used+0x3a4>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8051821 <_IO_stdin_used+0x35d>
je     8051875 <_IO_stdin_used+0x3b1>
gs
popa
je     8051827 <_IO_stdin_used+0x363>
daa
das
daa
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8051835 <_IO_stdin_used+0x371>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    805188c <_IO_stdin_used+0x3c8>
je     805184b <_IO_stdin_used+0x387>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6572702d
jae    8051895 <_IO_stdin_used+0x3d1>
jb     80518a8 <_IO_stdin_used+0x3e4>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
and    %ah,(%eax)
popaw
imul   $0x706f206f,0x74(%eax,%eiz,1),%ebp
gs
jb     80518aa <_IO_stdin_used+0x3e6>
je     80518b0 <_IO_stdin_used+0x3ec>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    80518bc <_IO_stdin_used+0x3f8>
jbe    80518ba <_IO_stdin_used+0x3f6>
insb   (%dx),%es:(%edi)
jns    8051878 <_IO_stdin_used+0x3b4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edi)
das
daa
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6665722d,%eax
gs
jb     80518d3 <_IO_stdin_used+0x40f>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
jne    80518ee <_IO_stdin_used+0x42a>
and    %dl,%gs:0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
daa
jae    80518a5 <_IO_stdin_used+0x3e1>
addr16 jb 80518f7 <_IO_stdin_used+0x433>
jne    80518fa <_IO_stdin_used+0x436>
and    %dh,0x61(%edx)
je     80518f7 <_IO_stdin_used+0x433>
gs
jb     80518b2 <_IO_stdin_used+0x3ee>
je     80518fc <_IO_stdin_used+0x438>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
jns    8051908 <_IO_stdin_used+0x444>
outsb  %ds:(%esi),(%dx)
and    %ah,0xa(%bx,%di)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    805192d <_IO_stdin_used+0x469>
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c52,%eax
sub    $0x75636572,%eax
jb     805194d <_IO_stdin_used+0x489>
imul   $0x20202020,0x65(%esi),%esi
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jo     805194d <_IO_stdin_used+0x489>
jb     805194b <_IO_stdin_used+0x487>
je     8051951 <_IO_stdin_used+0x48d>
and    %ch,0x6e(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    8051916 <_IO_stdin_used+0x452>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x63657220,0x73(%ebp),%esp
jne    805197d <_IO_stdin_used+0x4b9>
jae    8051976 <_IO_stdin_used+0x4b2>
jbe    8051974 <_IO_stdin_used+0x4b0>
insb   (%dx),%es:(%edi)
jns    805191c <_IO_stdin_used+0x458>
add    %al,(%eax)
or     0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8051989 <_IO_stdin_used+0x4c5>
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     8051990 <_IO_stdin_used+0x4cc>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    805194b <_IO_stdin_used+0x487>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x776f6820,%fs:0x79(%esi),%esp
and    %ah,0x20(%ecx)
push   $0x61726569
jb     80519a2 <_IO_stdin_used+0x4de>
push   $0x73692079
and    %dh,0x61(%edx,%esi,2)
jbe    80519af <_IO_stdin_used+0x4eb>
jb     80519bf <_IO_stdin_used+0x4fb>
gs and %dh,%fs:%gs:0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x706f0a52
je     80519c8 <_IO_stdin_used+0x504>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x73(%ecx)
and    %ah,0x6c(%ecx)
jae    80519d8 <_IO_stdin_used+0x514>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x4920202e,0x64(%ebp),%esp
data16
and    %ch,0x6f(%ebp)
jb     80519e2 <_IO_stdin_used+0x51e>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi)
and    %ch,%gs:0x73(%ecx)
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6e6f202c,0x64(%ebp),%esp
insb   (%dx),%es:(%edi)
jns    80519ba <_IO_stdin_used+0x4f6>
je     8051a04 <_IO_stdin_used+0x540>
and    %ah,%gs:0x69(%esi)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
or     0x6e(%edi),%ch
and    %dh,%gs:0x6b(%ecx,%eiz,2)
gs
jae    80519ce <_IO_stdin_used+0x50a>
gs
data16
data16
arpl   %si,%gs:0xa(%esi,%ebp,1)
or     (%eax),%ah
and    %ch,0x20202048
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6f632061,0x20(%esi),%esp
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ah,%gs:0x72(%ecx)
addr16 jne 8051a54 <_IO_stdin_used+0x590>
outsb  %gs:(%esi),(%dx)
je     8051a0b <_IO_stdin_used+0x547>
imul   $0x79732061,0x20(%ebx),%esi
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     8051a88 <_IO_stdin_used+0x5c4>
and    %ah,0x20(%ecx)
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    8051a52 <_IO_stdin_used+0x58e>
and    %dh,0x61(%edx,%esi,2)
jbe    8051a91 <_IO_stdin_used+0x5cd>
jb     8051aa1 <_IO_stdin_used+0x5dd>
and    %ch,%gs:0x74(%ecx)
or     (%eax),%ah
and    %ch,0x2020204c
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     8051ac0 <_IO_stdin_used+0x5fc>
popa
jbe    8051ab6 <_IO_stdin_used+0x5f2>
jb     8051ac6 <_IO_stdin_used+0x602>
and    %ah,%gs:0x76(%ebp)
gs
jb     8051ad3 <_IO_stdin_used+0x60f>
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %dh,0x20(%edi,%ebp,2)
popa
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051a82 <_IO_stdin_used+0x5be>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%ebp)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     8051afe <_IO_stdin_used+0x63a>
jb     8051b00 <_IO_stdin_used+0x63c>
or     %fs:(%eax),%ah
and    %ch,0x20202050
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8051add <_IO_stdin_used+0x619>
je     8051b31 <_IO_stdin_used+0x66d>
popa
jbe    8051b27 <_IO_stdin_used+0x663>
jb     8051b37 <_IO_stdin_used+0x673>
and    %ah,%gs:0x6e(%ecx)
jns    8051aea <_IO_stdin_used+0x626>
jae    8051b45 <_IO_stdin_used+0x681>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    8051af9 <_IO_stdin_used+0x635>
sub    %ah,0x66(%ebp,%eiz,2)
popa
jne    8051b4c <_IO_stdin_used+0x688>
je     8051b0b <_IO_stdin_used+0x647>
or     (%edx),%cl
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     8051b15 <_IO_stdin_used+0x651>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     8051b6b <_IO_stdin_used+0x6a7>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    8051b8e <_IO_stdin_used+0x6ca>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8051ba0 <_IO_stdin_used+0x6dc>
jo     8051ba3 <_IO_stdin_used+0x6df>
je     8051b50 <_IO_stdin_used+0x68c>
jbe    8051b97 <_IO_stdin_used+0x6d3>
jb     8051ba7 <_IO_stdin_used+0x6e3>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051bab <_IO_stdin_used+0x6e7>
popa
je     8051baa <_IO_stdin_used+0x6e6>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x450a0000,0x0(%edx,%ecx,1),%esi
js     8051bb5 <_IO_stdin_used+0x6f1>
insl   (%dx),%es:(%edi)
jo     8051bc3 <_IO_stdin_used+0x6ff>
gs
jae    8051b94 <_IO_stdin_used+0x6d0>
or     (%eax),%ah
and    %ah,0x74732073
popa
data16
data16
and    %ch,(%edi)
jne    8051b89 <_IO_stdin_used+0x6c5>
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ah,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8051bee <_IO_stdin_used+0x72a>
and    %ch,0x66(%edi)
and    %ch,(%edi)
jne    8051ba5 <_IO_stdin_used+0x6e1>
je     8051bf6 <_IO_stdin_used+0x732>
and    %ah,(%edx)
jae    8051bff <_IO_stdin_used+0x73b>
popa
data16
data16
and    (%esi),%ch
or     (%eax),%ah
and    %ah,0x682d2073
push   %edx
and    %dh,0x74(%ebx)
popa
data16
data16
and    %ch,(%edi)
jne    8051bc3 <_IO_stdin_used+0x6ff>
and    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ah,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8051c24 <_IO_stdin_used+0x760>
and    %ch,0x66(%edi)
and    %ch,(%edi)
jne    8051bdb <_IO_stdin_used+0x717>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x75(%ebx)
bound  %esp,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    8051be8 <_IO_stdin_used+0x724>
je     8051c39 <_IO_stdin_used+0x775>
and    %ah,(%edx)
jae    8051c42 <_IO_stdin_used+0x77e>
popa
data16
data16
and    (%esi),%ch
or     (%eax),%al
add    %al,(%eax)
add    %ch,0x74(%eax)
je     8051c4c <_IO_stdin_used+0x788>
cmp    (%edi),%ch
das
ja     8051c58 <_IO_stdin_used+0x794>
ja     8051c11 <_IO_stdin_used+0x74d>
outsb  %ds:(%si),(%dx)
jne    8051c15 <_IO_stdin_used+0x751>
outsl  %ds:(%esi),(%dx)
jb     8051c51 <_IO_stdin_used+0x78d>
das
jae    8051c5c <_IO_stdin_used+0x798>
data16
je     8051c67 <_IO_stdin_used+0x7a3>
popa
jb     8051c58 <_IO_stdin_used+0x794>
das
arpl   %bp,0x72(%edi)
gs
jne    8051c6e <_IO_stdin_used+0x7aa>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     8051c67 <_IO_stdin_used+0x7a3>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051c2d <_IO_stdin_used+0x769>
jne    8051c82 <_IO_stdin_used+0x7be>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8051c93 <_IO_stdin_used+0x7cf>
popa
jb     8051c84 <_IO_stdin_used+0x7c0>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8051c99 <_IO_stdin_used+0x7d5>
jo     8051c61 <_IO_stdin_used+0x79d>
das
das
ja     8051ca2 <_IO_stdin_used+0x7de>
ja     8051c5b <_IO_stdin_used+0x797>
outsb  %ds:(%si),(%dx)
jne    8051c5f <_IO_stdin_used+0x79b>
outsl  %ds:(%esi),(%dx)
jb     8051c9b <_IO_stdin_used+0x7d7>
das
addr16
gs
je     8051ca1 <_IO_stdin_used+0x7dd>
gs
insb   (%dx),%es:(%edi)
jo     8051c6c <_IO_stdin_used+0x7a8>
or     %ds:(%eax),%al
push   %edx
gs
jo     8051cb3 <_IO_stdin_used+0x7ef>
jb     8051cba <_IO_stdin_used+0x7f6>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8051cbc <_IO_stdin_used+0x7f8>
popa
je     8051cbc <_IO_stdin_used+0x7f8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 8051c7b <_IO_stdin_used+0x7b7>
je     8051ccc <_IO_stdin_used+0x808>
and    %bh,(%eax,%ebp,2)
je     8051cd6 <_IO_stdin_used+0x812>
jo     8051c9e <_IO_stdin_used+0x7da>
das
das
je     8051cda <_IO_stdin_used+0x816>
popa
outsb  %ds:(%esi),(%dx)
jae    8051cd8 <_IO_stdin_used+0x814>
popa
je     8051cd8 <_IO_stdin_used+0x814>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     8051ce5 <_IO_stdin_used+0x821>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     8051ce3 <_IO_stdin_used+0x81f>
das
je     8051ce4 <_IO_stdin_used+0x820>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     8051cac <_IO_stdin_used+0x7e8>
arpl   %bp,0x6d(%edi)
jo     8051cfd <_IO_stdin_used+0x839>
gs
je     8051cf9 <_IO_stdin_used+0x835>
and    %ah,0x63(%edi,%ebp,2)
jne    8051d07 <_IO_stdin_used+0x843>
outsb  %gs:(%esi),(%dx)
je     8051cff <_IO_stdin_used+0x83b>
je     8051d09 <_IO_stdin_used+0x845>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8051d1b <_IO_stdin_used+0x857>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     8051d17 <_IO_stdin_used+0x853>
jne    8051d28 <_IO_stdin_used+0x864>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
sub    $0x2d2d2052,%eax
fs
gs
jb     8051d3a <_IO_stdin_used+0x876>
data16
gs
jb     8051d3e <_IO_stdin_used+0x87a>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
jb     8051d44 <_IO_stdin_used+0x880>
jno    8051d56 <_IO_stdin_used+0x892>
imul   $0x69652073,0x65(%edx),%esi
je     8051d52 <_IO_stdin_used+0x88e>
gs
jb     8051d0d <_IO_stdin_used+0x849>
sub    $0x726f2048,%eax
and    %ch,0x4c
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     8051d26 <_IO_stdin_used+0x862>
popa
je     8051d7d <_IO_stdin_used+0x8b9>
jb     8051d74 <_IO_stdin_used+0x8b0>
bound  %esi,0x74(%ebp)
gs
jae    8051d31 <_IO_stdin_used+0x86d>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x520a0073
gs
jo     8051d8b <_IO_stdin_used+0x8c7>
jb     8051d92 <_IO_stdin_used+0x8ce>
and    %ah,0x75622073
addr16 jae 8051d47 <_IO_stdin_used+0x883>
je     8051d98 <_IO_stdin_used+0x8d4>
and    %ah,0x62000a73
jne    8051d98 <_IO_stdin_used+0x8d4>
sub    $0x65726f63,%eax
jne    8051dac <_IO_stdin_used+0x8e8>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051daa <_IO_stdin_used+0x8e6>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    8051d94 <_IO_stdin_used+0x8d0>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     8051dc5 <_IO_stdin_used+0x901>
jne    8051dd6 <_IO_stdin_used+0x912>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    8051de0 <_IO_stdin_used+0x91c>
jb     8051d9e <_IO_stdin_used+0x8da>
jae    8051dd9 <_IO_stdin_used+0x915>
popa
jb     8051dd9 <_IO_stdin_used+0x915>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %cl,%gs:0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x65(%ebp)
jns    8051de9 <_IO_stdin_used+0x925>
jb     8051def <_IO_stdin_used+0x92b>
outsb  %ds:(%esi),(%dx)
add    %al,0x61(%si)
jbe    8051df6 <_IO_stdin_used+0x932>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     8051e00 <_IO_stdin_used+0x93c>
add    %ah,%gs:0x68(%ebx)
addr16 jb 8051e0e <_IO_stdin_used+0x94a>
add    %cl,0x4c(%eax)
push   %eax
push   %edx
arpl   %sp,0x68(%esi)
jbe    8051da8 <_IO_stdin_used+0x8e4>
insl   (%dx),%es:(%edi)
imul   $0x20676e69,0x73(%ebx),%esi
outsl  %ds:(%esi),(%dx)
jo     8051e18 <_IO_stdin_used+0x954>
jb     8051e16 <_IO_stdin_used+0x952>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x69(%ebp)
jae    8051e2f <_IO_stdin_used+0x96b>
imul   $0x65706f20,0x67(%esi),%ebp
jb     8051e26 <_IO_stdin_used+0x962>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x66(%ecx)
je     8051e31 <_IO_stdin_used+0x96d>
jb     8051dee <_IO_stdin_used+0x92a>
and    $0x6e690073,%eax
jbe    8051e36 <_IO_stdin_used+0x972>
insb   (%dx),%es:(%edi)
imul   $0x70756f72,0x67(%eax,%eiz,1),%esp
cmp    (%eax),%ah
and    $0x65720073,%eax
arpl   %si,0x72(%ebp)
jae    8051e53 <_IO_stdin_used+0x98f>
jbe    8051e51 <_IO_stdin_used+0x98d>
add    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
addr16
gs
jae    8051df5 <_IO_stdin_used+0x931>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
sub    $0x65726564,%eax
data16
gs
jb     8051e65 <_IO_stdin_used+0x9a1>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
sub    $0x73657270,%eax
gs
jb     8051e84 <_IO_stdin_used+0x9c0>
gs
sub    $0x746f6f72,%eax
add    %dh,0x75(%ecx)
imul   $0x6c697300,0x74(%ebp),%esp
outsb  %gs:(%esi),(%dx)
je     8051e22 <_IO_stdin_used+0x95e>
jbe    8051e89 <_IO_stdin_used+0x9c5>
jb     8051e88 <_IO_stdin_used+0x9c4>
outsl  %ds:(%esi),(%dx)
jae    8051e8e <_IO_stdin_used+0x9ca>
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051e2f <_IO_stdin_used+0x96b>
jbe    8051e96 <_IO_stdin_used+0x9d2>
jb     8051ea6 <_IO_stdin_used+0x9e2>
imul   $0x0,0x6e(%edi),%ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jecxz  8051e5f <_IO_stdin_used+0x99b>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
in     (%dx),%eax
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
arpl   %ax,(%eax)
add    %al,(%eax)
clc
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %dh,%ch
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   $0x4000000
push   %ds
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x7000000(%ecx)
push   %ds
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x15000000(%edx)
push   %ds
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
sbb    (%esi),%ebx
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
cli
sbb    $0x10805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x0,(%eax)
add    %ah,(%edx)
push   %ds
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
sub    (%esi),%bl
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%esi)
(bad)
ljmp   *(%edi)
push   %ds
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %ah,0x74(%esi)
jae    8051f73 <_IO_stdin_used+0xaaf>
jb     8051f7b <_IO_stdin_used+0xab7>
popa
and    %ah,%fs:0x61(%esi)
imul   $0x6e616300,0x64(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051f47 <_IO_stdin_used+0xa83>
popa
arpl   %sp,0x65(%ebx)
jae    8051fa0 <_IO_stdin_used+0xadc>
and    %ah,0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051f58 <_IO_stdin_used+0xa94>
jb     8051f9f <_IO_stdin_used+0xadb>
popa
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051f67 <_IO_stdin_used+0xaa3>
and    $0x61630073,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051f71 <_IO_stdin_used+0xaad>
fs
gs
jb     8051fba <_IO_stdin_used+0xaf6>
data16
gs
jb     8051fbe <_IO_stdin_used+0xafa>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    $0x68630073,%eax
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6e776f20,0x67(%bp),%ebp
gs
jb     8051fe2 <_IO_stdin_used+0xb1e>
push   $0x6f207069
data16
and    %ah,0x68630073
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6f726720,0x67(%bp),%ebp
jne    8051ff7 <_IO_stdin_used+0xb33>
and    %ch,0x66(%edi)
and    %ah,0x6f6e0073
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x6f(%si)
and    %ch,0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8052014 <_IO_stdin_used+0xb50>
push   $0x6f207069
data16
and    %ah,0x67000a73
jb     805201e <_IO_stdin_used+0xb5a>
jne    8052021 <_IO_stdin_used+0xb5d>
and    %ch,0x66(%edi)
and    %ah,0x65722073
je     805201d <_IO_stdin_used+0xb59>
imul   $0x73612064,0x65(%esi),%ebp
and    %ah,0x6f000a73
ja     8052039 <_IO_stdin_used+0xb75>
gs
jb     8052041 <_IO_stdin_used+0xb7d>
push   $0x6f207069
data16
and    %ah,0x65722073
je     805203d <_IO_stdin_used+0xb79>
imul   $0x66000a64,0x65(%esi),%ebp
je     8052058 <_IO_stdin_used+0xb94>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x61(%esi)
imul   $0x74690000,0x64(%ebp,%eiz,2),%ebp
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     8052070 <_IO_stdin_used+0xbac>
jne    8052076 <_IO_stdin_used+0xbb2>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     805206f <_IO_stdin_used+0xbab>
jb     805206d <_IO_stdin_used+0xba9>
je     8052073 <_IO_stdin_used+0xbaf>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    805207f <_IO_stdin_used+0xbbb>
jbe    805207d <_IO_stdin_used+0xbb9>
insb   (%dx),%es:(%edi)
jns    805203b <_IO_stdin_used+0xb77>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     80520a0 <_IO_stdin_used+0xbdc>
jne    80520a6 <_IO_stdin_used+0xbe2>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     805209f <_IO_stdin_used+0xbdb>
jb     805209d <_IO_stdin_used+0xbd9>
je     80520a3 <_IO_stdin_used+0xbdf>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    80520af <_IO_stdin_used+0xbeb>
jbe    80520ad <_IO_stdin_used+0xbe9>
insb   (%dx),%es:(%edi)
jns    805206b <_IO_stdin_used+0xba7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73282073
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x2973
add    %dh,0x73(%ebp)
and    %ch,%gs:0x2d6f6e2d
jo     80520dd <_IO_stdin_used+0xc19>
gs
jae    80520d3 <_IO_stdin_used+0xc0f>
jb     80520e6 <_IO_stdin_used+0xc22>
gs
sub    $0x746f6f72,%eax
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jbe    80520e2 <_IO_stdin_used+0xc1e>
jb     80520f1 <_IO_stdin_used+0xc2d>
imul   $0x73696874,0x20(%ebp,%eiz,2),%esp
and    %ah,0x61(%esi)
imul   $0x6566,0x61(%ebx,%esi,2),%ebp
add    %al,(%eax)
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
inc    %ebx
imul   $0x72616c75,0x63(%edx),%esi
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80520d0 <_IO_stdin_used+0xc0c>
jae    8052126 <_IO_stdin_used+0xc62>
jb     8052129 <_IO_stdin_used+0xc65>
arpl   %si,0x72(%ebp,%esi,2)
gs or  %cs:%gs:0x69(%eax,%ebp,2),%dl
jae    80520e0 <_IO_stdin_used+0xc1c>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    805213a <_IO_stdin_used+0xc76>
and    %ah,0x65(%ebx)
jb     805213f <_IO_stdin_used+0xc7b>
popa
imul   $0x656d2079,0x6c(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
jae    80520f7 <_IO_stdin_used+0xc33>
je     8052141 <_IO_stdin_used+0xc7d>
popa
je     80520fc <_IO_stdin_used+0xc38>
jns    805214d <_IO_stdin_used+0xc89>
jne    8052100 <_IO_stdin_used+0xc3c>
push   $0x20657661
popa
and    %ah,0x6f(%ebx)
jb     805215d <_IO_stdin_used+0xc99>
jne    805215d <_IO_stdin_used+0xc99>
je     8052154 <_IO_stdin_used+0xc90>
and    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x79(%ebx)
jae    805216e <_IO_stdin_used+0xcaa>
gs
insl   (%dx),%es:(%edi)
or     %cs:0x4f(%esi),%cl
push   %esp
dec    %ecx
inc    %esi
pop    %ecx
and    %bl,0x4f(%ecx)
push   %ebp
push   %edx
and    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
and    %cl,0x41(%ebp)
dec    %esi
inc    %ecx
inc    %edi
inc    %ebp
push   %edx
or     %cs:0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805218e <_IO_stdin_used+0xcca>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%si)
jb     8052191 <_IO_stdin_used+0xccd>
arpl   %si,0x72(%edi,%ebp,2)
jns    8052152 <_IO_stdin_used+0xc8e>
imul   $0x74726170,0x20(%ebx),%esi
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x79(%ebx)
arpl   %bp,0x3a(%ebp,%eiz,2)
or     (%eax),%ah
and    %ah,0xa73
add    %ch,0x65(%esi)
imul   $0x79732072,0x65(%eax,%ebp,2),%esi
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ah,0x6f6e2073
jb     805218d <_IO_stdin_used+0xcc9>
jb     80521d4 <_IO_stdin_used+0xd10>
data16
gs
jb     80521d8 <_IO_stdin_used+0xd14>
outsb  %ds:(%esi),(%dx)
je     8052196 <_IO_stdin_used+0xcd2>
push   $0x62207361
gs outsb %gs:(%esi),(%dx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
gs or  %fs:%gs:(%bx,%si),%al
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs and %ch,%fs:%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     8052209 <_IO_stdin_used+0xd45>
push   $0x6f207069
data16
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0xa73
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs and %ah,%fs:%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    805222d <_IO_stdin_used+0xd69>
and    %ch,0x66(%edi)
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0xa73
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     805225e <_IO_stdin_used+0xd9a>
push   $0x6f207069
data16
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    805228a <_IO_stdin_used+0xdc6>
and    %ch,0x66(%edi)
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     80522ba <_IO_stdin_used+0xdf6>
push   $0x6f207069
data16
and    %ah,0xa73
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     80522de <_IO_stdin_used+0xe1a>
push   $0x6f207069
data16
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    8052302 <_IO_stdin_used+0xe3e>
and    %ch,0x66(%edi)
and    %ah,0x6f742073
and    %ah,0x6f000a73
ja     8052311 <_IO_stdin_used+0xe4d>
gs
jb     8052319 <_IO_stdin_used+0xe55>
push   $0x6f207069
data16
and    %ah,0x65722073
je     8052315 <_IO_stdin_used+0xe51>
imul   $0x73612064,0x65(%esi),%ebp
and    %ah,0x90000a73
mov    %eax,0xa4800804
add    $0x8,%al
jo     805226d <_IO_stdin_used+0xda9>
add    $0x8,%al
nop
mov    %eax,0xa3180804
add    $0x8,%al
nop
mov    %eax,0xa3000804
add    $0x8,%al
shlb   $0x4,-0x5c6ff7fc(%edx)
or     %dl,-0x1ff7fb5d(%eax)
mov    0x2e380804,%al
xor    (%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     80522fd <_IO_stdin_used+0xe39>
and    $0x25203a73,%eax
jae    8052304 <_IO_stdin_used+0xe40>
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 805236b <_IO_stdin_used+0xea7>
xor    %bl,0x20(%ebp)
ja     8052376 <_IO_stdin_used+0xeb2>
jae    8052337 <_IO_stdin_used+0xe73>
jo     805237a <_IO_stdin_used+0xeb6>
jae    805238e <_IO_stdin_used+0xeca>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    805238b <_IO_stdin_used+0xec7>
push   $0x206e6120
gs
js     8052391 <_IO_stdin_used+0xecd>
arpl   %sp,(%eax)
jae    80523a9 <_IO_stdin_used+0xee5>
jae    80523a6 <_IO_stdin_used+0xee2>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     80523c6 <_IO_stdin_used+0xf02>
jb     80523c4 <_IO_stdin_used+0xf00>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    80523ea <_IO_stdin_used+0xf26>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    80523e0 <_IO_stdin_used+0xf1c>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
sub    %dh,-0x46f7f7fc(%ebx)
add    $0x8,%al
cmp    %bh,-0x4807f7fc(%ecx)
add    $0x8,%al
cmp    %bh,-0x4797f7fc(%eax)
add    $0x8,%al
nop
mov    $0xb8900804,%eax
add    $0x8,%al
nop
mov    $0xb6300804,%eax
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
test   $0xb6,%al
add    $0x8,%al
or     %dh,-0x49d7f7fc(%esi)
add    $0x8,%al
and    %dh,-0x49e7f7fc(%esi)
add    $0x8,%al
adc    %dh,-0x4a1ff7fc(%esi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
sub    %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
pop    %ecx
mov    $0x4,%ch
or     %bl,-0x4b(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%ch
or     %dl,-0x4b(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ah
or     %bl,-0x4b(%ecx)
add    $0x8,%al
fdivs  -0x4aa6f7fc(%esi)
add    $0x8,%al
pop    %ecx
mov    $0x4,%ch
or     %bl,-0x4b(%ecx)
add    $0x8,%al
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
enter  $0x4b4,$0x8
pop    %ecx
mov    $0x4,%ch
or     %bl,-0x4b(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%ch
or     %bl,-0x4b(%ecx)
add    $0x8,%al
sbb    %dh,0x4b72808(%esp,%eax,1)
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %bl,-0x4b(%ecx)
add    $0x8,%al
mov    $0xc80804b6,%eax
mov    $0x4,%ah
or     %bl,-0x4b(%ecx)
add    $0x8,%al
enter  $0x4b4,$0x8
pop    %ecx
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %cl,%al
mov    $0x4,%ah
or     %dh,(%eax)
mov    $0x4,%ch
or     %bl,-0x4b(%ecx)
add    $0x8,%al
xor    %dh,-0x4aaef7fc(%ebp)
add    $0x8,%al
push   %eax
mov    $0xbb500804,%ebx
add    $0x8,%al
call   580d2a87 <optarg+0x5007c883>
mov    $0xbae80804,%ebx
add    $0x8,%al
push   %eax
mov    $0xbae80804,%ebx
add    $0x8,%al
call   f00d2a9b <optarg+0xe807c897>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2aa7 <optarg+0xe807c8a3>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2ab3 <optarg+0xe807c8af>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2abf <optarg+0xe807c8bb>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2acb <optarg+0xe807c8c7>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2ad7 <optarg+0xe807c8d3>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2ae3 <optarg+0xe807c8df>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2aef <optarg+0xe807c8eb>
mov    $0xbae80804,%edx
add    $0x8,%al
call   f00d2afb <optarg+0xe807c8f7>
mov    $0xbb500804,%edx
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %bl,0x23(%ebp)
add    $0x5236508,%eax
or     %ch,0x23(%ebx)
add    $0x52b2008,%eax
or     %bh,0x23(%eax)
add    $0x5238008,%eax
or     %dh,0x1d(%ebp)
add    $0x5238708,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %ah,0x25282073
jae    80526d4 <_IO_stdin_used+0x1210>
and    %ah,0x25000a73
jae    80526d3 <_IO_stdin_used+0x120f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8052727 <_IO_stdin_used+0x1263>
je     8052734 <_IO_stdin_used+0x1270>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8052737 <_IO_stdin_used+0x1273>
je     8052744 <_IO_stdin_used+0x1280>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     805274e <_IO_stdin_used+0x128a>
je     805275b <_IO_stdin_used+0x1297>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052720 <_IO_stdin_used+0x125c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8052772 <_IO_stdin_used+0x12ae>
jb     8052779 <_IO_stdin_used+0x12b5>
and    %ah,0x75(%edx)
addr16 jae 805272b <_IO_stdin_used+0x1267>
je     805277c <_IO_stdin_used+0x12b8>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8052781 <_IO_stdin_used+0x12bd>
and    %al,0x50(%edi)
dec    %esp
jbe    8052755 <_IO_stdin_used+0x1291>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     80527a4 <_IO_stdin_used+0x12e0>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     805275a <_IO_stdin_used+0x1296>
insb   (%dx),%es:(%edi)
popa
je     80527a3 <_IO_stdin_used+0x12df>
jb     8052760 <_IO_stdin_used+0x129c>
cmp    $0x68,%al
je     80527b8 <_IO_stdin_used+0x12f4>
jo     8052780 <_IO_stdin_used+0x12bc>
das
das
outsb  %ds:(%si),(%dx)
jne    805277a <_IO_stdin_used+0x12b6>
outsl  %ds:(%esi),(%dx)
jb     80527b6 <_IO_stdin_used+0x12f2>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 80527c8 <_IO_stdin_used+0x1304>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8052789 <_IO_stdin_used+0x12c5>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     80527ed <_IO_stdin_used+0x1329>
popa
jb     80527de <_IO_stdin_used+0x131a>
cmp    (%eax),%ah
jns    80527ec <_IO_stdin_used+0x1328>
jne    805279f <_IO_stdin_used+0x12db>
popa
jb     80527e7 <_IO_stdin_used+0x1323>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8052807 <_IO_stdin_used+0x1343>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8052811 <_IO_stdin_used+0x134d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     805282e <_IO_stdin_used+0x136a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     805282d <_IO_stdin_used+0x1369>
outsb  %ds:(%esi),(%dx)
je     80527eb <_IO_stdin_used+0x1327>
jo     8052832 <_IO_stdin_used+0x136e>
jb     805283c <_IO_stdin_used+0x1378>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805284c <_IO_stdin_used+0x1388>
je     8052859 <_IO_stdin_used+0x1395>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805281e <_IO_stdin_used+0x135a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805286c <_IO_stdin_used+0x13a8>
je     8052879 <_IO_stdin_used+0x13b5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805283e <_IO_stdin_used+0x137a>
and    %ah,0x250a2c73
jae    8052846 <_IO_stdin_used+0x1382>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052890 <_IO_stdin_used+0x13cc>
je     805289d <_IO_stdin_used+0x13d9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052862 <_IO_stdin_used+0x139e>
and    %ah,0x250a2c73
jae    805286a <_IO_stdin_used+0x13a6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528b8 <_IO_stdin_used+0x13f4>
je     80528c5 <_IO_stdin_used+0x1401>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805288a <_IO_stdin_used+0x13c6>
and    %ah,0x250a2c73
jae    8052892 <_IO_stdin_used+0x13ce>
and    %ah,0x25202c73
jae    805289a <_IO_stdin_used+0x13d6>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528e4 <_IO_stdin_used+0x1420>
je     80528f1 <_IO_stdin_used+0x142d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528b6 <_IO_stdin_used+0x13f2>
and    %ah,0x250a2c73
jae    80528be <_IO_stdin_used+0x13fa>
and    %ah,0x25202c73
jae    80528c6 <_IO_stdin_used+0x1402>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052914 <_IO_stdin_used+0x1450>
je     8052921 <_IO_stdin_used+0x145d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528e6 <_IO_stdin_used+0x1422>
and    %ah,0x250a2c73
jae    80528ee <_IO_stdin_used+0x142a>
and    %ah,0x25202c73
jae    80528f6 <_IO_stdin_used+0x1432>
and    %ah,0x250a2c73
jae    80528fe <_IO_stdin_used+0x143a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052948 <_IO_stdin_used+0x1484>
je     8052955 <_IO_stdin_used+0x1491>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805291a <_IO_stdin_used+0x1456>
and    %ah,0x250a2c73
jae    8052922 <_IO_stdin_used+0x145e>
and    %ah,0x25202c73
jae    805292a <_IO_stdin_used+0x1466>
and    %ah,0x250a2c73
jae    8052932 <_IO_stdin_used+0x146e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
or     $0x4,%al
or     %cl,-0x37f7fb38(%eax)
enter  $0x804,$0x10
leave
add    $0x8,%al
push   $0xc00804c9
leave
add    $0x8,%al
sub    %cl,%dl
add    $0x8,%al
mov    0x400804ca,%al
movl   $0x804c7d8,(%eax,%ecx,1)
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     80529bd <_IO_stdin_used+0x14f9>
jb     80529af <_IO_stdin_used+0x14eb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     80529d1 <_IO_stdin_used+0x150d>
popa
jb     80529c2 <_IO_stdin_used+0x14fe>
and    %al,0x6f(%esi)
jne    80529d0 <_IO_stdin_used+0x150c>
fs
popa
je     80529cf <_IO_stdin_used+0x150b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80529ee <_IO_stdin_used+0x152a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     80529ec <_IO_stdin_used+0x1528>
je     80529fb <_IO_stdin_used+0x1537>
arpl   %ax,%cs:(%eax)
sub    %ch,(%edx)
pop    %edi
pop    %edi
gs
jb     8052a04 <_IO_stdin_used+0x1540>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x29292820,0x6e(%edi),%ebp
and    %ah,(%ecx)
cmp    $0x323220,%eax
js     8052a10 <_IO_stdin_used+0x154c>
je     8052a1f <_IO_stdin_used+0x155b>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8052a15 <_IO_stdin_used+0x1551>
outsb  %ds:(%esi),(%dx)
add    %ch,0x62(%ecx,%ebp,2)
das
js     8052a2b <_IO_stdin_used+0x1567>
je     8052a2c <_IO_stdin_used+0x1568>
je     8052a2b <_IO_stdin_used+0x1567>
insb   (%dx),%es:(%edi)
arpl   %ax,%cs:(%eax)
xor    %ah,(%eax)
cmp    $0x3d,%al
and    %dh,0x74(%ebx)
jb     8052a3d <_IO_stdin_used+0x1579>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %ah,%gs:(%esi)
and    %dh,%es:0x74(%ebx)
jb     8052a4c <_IO_stdin_used+0x1588>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %bh,%gs:0x363320(,%edi,1)
add    %al,(%eax)
cs
aam    $0x4
or     %bh,-0x2e(%eax)
add    $0x8,%al
js     80529c4 <_IO_stdin_used+0x1500>
add    $0x8,%al
repnz roll %cl,(%eax,%ecx,1)
js     80529cc <_IO_stdin_used+0x1508>
add    $0x8,%al
inc    %eax
aam    $0x4
or     %bh,-0x2e(%eax)
add    $0x8,%al
js     80529d8 <_IO_stdin_used+0x1514>
add    $0x8,%al
js     80529dc <_IO_stdin_used+0x1518>
add    $0x8,%al
(bad)
roll   %cl,(%eax,%ecx,1)
js     80529e4 <_IO_stdin_used+0x1520>
add    $0x8,%al
mov    $0xd3,%al
add    $0x8,%al
js     80529ec <_IO_stdin_used+0x1528>
add    $0x8,%al
js     80529f0 <_IO_stdin_used+0x152c>
add    $0x8,%al
jae    80529f5 <_IO_stdin_used+0x1531>
add    $0x8,%al
js     80529f8 <_IO_stdin_used+0x1534>
add    $0x8,%al
js     80529fc <_IO_stdin_used+0x1538>
add    $0x8,%al
js     8052a00 <_IO_stdin_used+0x153c>
add    $0x8,%al
aas
roll   %cl,(%eax,%ecx,1)
js     8052a08 <_IO_stdin_used+0x1544>
add    $0x8,%al
js     8052a0c <_IO_stdin_used+0x1548>
add    $0x8,%al
js     8052a10 <_IO_stdin_used+0x154c>
add    $0x8,%al
js     8052a14 <_IO_stdin_used+0x1550>
add    $0x8,%al
add    %ebx,%edx
add    $0x8,%al
(bad)
rolb   %cl,(%eax,%ecx,1)
js     8052a20 <_IO_stdin_used+0x155c>
add    $0x8,%al
js     8052a24 <_IO_stdin_used+0x1560>
add    $0x8,%al
js     8052a28 <_IO_stdin_used+0x1564>
add    $0x8,%al
js     8052a2c <_IO_stdin_used+0x1568>
add    $0x8,%al
js     8052a30 <_IO_stdin_used+0x156c>
add    $0x8,%al
js     8052a34 <_IO_stdin_used+0x1570>
add    $0x8,%al
js     8052a38 <_IO_stdin_used+0x1574>
add    $0x8,%al
mov    $0xd2,%ah
add    $0x8,%al
mov    %dl,%dl
add    $0x8,%al
js     8052a44 <_IO_stdin_used+0x1580>
add    $0x8,%al
js     8052a48 <_IO_stdin_used+0x1584>
add    $0x8,%al
js     8052a4c <_IO_stdin_used+0x1588>
add    $0x8,%al
inc    %eax
aam    $0x4
or     %bh,-0x2e(%eax)
add    $0x8,%al
js     8052a58 <_IO_stdin_used+0x1594>
add    $0x8,%al
js     8052a5c <_IO_stdin_used+0x1598>
add    $0x8,%al
(bad)
roll   %cl,(%eax,%ecx,1)
js     8052a64 <_IO_stdin_used+0x15a0>
add    $0x8,%al
mov    $0xd3,%al
add    $0x8,%al
js     8052a6c <_IO_stdin_used+0x15a8>
add    $0x8,%al
js     8052a70 <_IO_stdin_used+0x15ac>
add    $0x8,%al
js     8052a74 <_IO_stdin_used+0x15b0>
add    $0x8,%al
js     8052a78 <_IO_stdin_used+0x15b4>
add    $0x8,%al
js     8052a7c <_IO_stdin_used+0x15b8>
add    $0x8,%al
js     8052a80 <_IO_stdin_used+0x15bc>
add    $0x8,%al
aas
roll   %cl,(%eax,%ecx,1)
js     8052a88 <_IO_stdin_used+0x15c4>
add    $0x8,%al
js     8052a8c <_IO_stdin_used+0x15c8>
add    $0x8,%al
mov    %al,0x780804d2
jae    8052b37 <_IO_stdin_used+0x1673>
jb     8052b39 <_IO_stdin_used+0x1675>
outsl  %ds:(%esi),(%dx)
jne    8052b34 <_IO_stdin_used+0x1670>
add    %ch,(%esi)
add    %al,%cs:(%eax)
adc    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6c637963,0x2f(%edx),%esp
gs
sub    $0x63656863,%eax
imul   $0x63,(%esi),%ebp
add    %dh,0x74(%ebx)
popa
je     8052b8c <_IO_stdin_used+0x16c8>
sub    $0x67616d3e,%eax
imul   $0x39203d3d,0x20(%ebx),%esp
cmp    %dh,(%edx)
aaa
cmp    %dh,(%esi)
xor    (%eax),%al
arpl   %di,0x63(%ecx)
insb   (%dx),%es:(%edi)
gs
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x0(%ebx)
and    (%eax),%esp
outsb  %gs:(%esi),(%dx)
je     8052bbe <_IO_stdin_used+0x16fa>
imul   $0x2020203a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
cmp    (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
insl   (%dx),%es:(%edi)
popa
js     8052b9a <_IO_stdin_used+0x16d6>
bound  %esi,0x63(%ebp)
imul   $0x20,0x74(%ebp),%esp
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8052bef <_IO_stdin_used+0x172b>
cmp    (%eax),%ah
and    $0xa756c,%eax
add    %al,(%eax)
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %dh,0x73(%ebp)
gs cmp %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,0x2820756c
and    $0x2566322e,%eax
and    $0xa29,%eax
cmpb   $0xcd,(%edi)
int3
dec    %esp
aas
hlt
std
mov    $0x3f,%ah
add    %al,(%eax)
add    %al,(%eax)
int    $0xcc
int3
cmp    $0x3f666666,%eax
int    $0xcc
mov    %?,(%edi)
add    %al,(%eax)
enter  $0x42,$0x0
orb    $0x75,0x2f(%edi)
jae    8052c52 <_IO_stdin_used+0x178e>
das
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
cwtl
add    $0x0,%al
add    %dl,0x68000000(%edx)
arpl   %di,%di
pushl  0x68280000(%esp,%eax,1)
(bad)
(bad)
clc
add    $0x0,%al
add    %bh,-0x27000092(%eax)
add    $0x0,%al
add    %bh,0x1cffff72(%eax)
add    $0x73380000,%eax
(bad)
jmp    *0x0(%ebp,%eax,1)
add    %ch,0x73(%eax)
(bad)
(bad)
js     8052c47 <_IO_stdin_used+0x1783>
add    %al,(%eax)
js     8052cb9 <_IO_stdin_used+0x17f5>
(bad)
decl   0x73d80000(%ebp,%eax,1)
(bad)
pushl  0x38000005(%eax)
je     8052c56 <_IO_stdin_used+0x1792>
call   *%esp
add    $0x82c80000,%eax
(bad)
lcall  *(%eax)
push   %es
add    %al,(%eax)
fadds  0x62cffff(%edx)
add    %al,(%eax)
call   49052bf3 <optarg+0x40ffc9ef>
push   %es
add    %al,(%eax)
mov    $0x6cffff83,%eax
push   %es
add    %al,(%eax)
sbb    %al,0x68cff(%edi,%edi,8)
add    %bl,-0x7c(%eax)
(bad)
pushl  -0x27fffffa(%eax)
test   %bh,%bh
jmp    *%esp
push   %es
add    %al,(%eax)
mov    %al,0x724ffff(%ebp)
add    %al,(%eax)
mov    $0x50ffff85,%eax
pop    %es
add    %al,(%eax)
test   $0x86,%al
(bad)
decl   -0x27fffff9(%eax)
nop
(bad)
dec    %esp
pop    %es
add    %al,(%eax)
js     8052c48 <_IO_stdin_used+0x1784>
(bad)
decl   (%eax,%ecx,1)
add    %al,(%eax)
mov    $0x40ffff92,%eax
or     %al,(%eax)
add    %bl,%al
xchg   %eax,%edx
(bad)
call   *0x0(%eax,%ecx,1)
add    %bh,%al
xchg   %eax,%edx
(bad)
ljmp   *0x8(%eax)
add    %al,(%eax)
cmp    %dl,0x88cffff(%ebx)
add    %al,(%eax)
pop    %eax
xchg   %eax,%ebx
(bad)
jmp    *-0x67fffff8(%eax)
xchg   %eax,%ebx
(bad)
inc    %esp
or     %al,(%eax)
add    %bh,%al
xchg   %eax,%ebx
(bad)
(bad)
clc
or     %al,(%eax)
add    %bl,%al
xchg   %eax,%esp
(bad)
pushl  (%ecx,%ecx,1)
add    %al,(%eax)
or     %dl,0x94cffff(%ebp)
add    %al,(%eax)
cwtl
xchg   %eax,%ebp
(bad)
incl   -0x47fffff7(%eax)
xchg   %eax,%ebp
(bad)
call   *-0x6a280000(%ecx,%ecx,1)
(bad)
ljmp   *-0x7fffff7(%eax)
xchg   %eax,%ebp
(bad)
(bad)
mov    $0x18000009,%esp
xchg   %eax,%esi
(bad)
call   *%eax
or     %eax,(%eax)
add    %cl,-0x6a(%eax)
(bad)
push   %eax
or     %eax,(%eax)
add    %bh,-0x6a(%eax)
(bad)
call   *(%eax)
or     (%eax),%al
add    %ch,0x28ffff96(%eax)
or     (%eax),%al
add    %bl,%al
xchg   %eax,%esi
(bad)
incl   0xa(%eax)
add    %al,(%eax)
mov    %dl,0xa64ffff(%edi)
add    %al,(%eax)
mov    $0x7cffff97,%eax
or     (%eax),%al
add    %ch,%al
xchg   %eax,%edi
(bad)
call   *-0x67e80000(%edx,%ecx,1)
(bad)
ljmp   *-0x67380000(%edx,%ecx,1)
(bad)
call   *%eax
or     (%eax),%al
add    %cl,(%eax)
cltd
(bad)
(bad)
call   50052d87 <optarg+0x47ffcb83>
cltd
(bad)
incl   (%eax)
or     (%eax),%eax
add    %cl,0x18ffff99(%eax)
or     (%eax),%eax
add    %ch,0x2cffff99(%eax)
or     (%eax),%eax
add    %cl,%al
cltd
(bad)
incl   0xb(%eax)
add    %al,(%eax)
call   5d052d3a <optarg+0x54ffcb36>
or     (%eax),%eax
add    %cl,(%eax)
lcall  $0x0,$0xb68ffff
push   $0x94ffff9a
or     (%eax),%eax
add    %bl,%al
lahf
(bad)
pushl  (%eax)
or     $0x0,%al
add    %ch,(%eax)
mov    0xc48ffff,%al
add    %al,(%eax)
mov    %ah,0xc6cffff(%eax)
add    %al,(%eax)
enter  $0xffa0,$0xff
test   %cl,(%eax,%eax,1)
add    %bh,-0x5f(%eax)
(bad)
ljmp   *-0x57fffff4(%eax)
mov    0xcccffff,%eax
add    %al,(%eax)
fsubs  0xcf0ffff(%ecx)
add    %al,(%eax)
call   d052d92 <optarg+0x4ffcb8e>
or     $0xa2380000,%eax
(bad)
pushl  -0x5d880000(,%ecx,1)
(bad)
jmp    *0xd(%eax)
add    %al,(%eax)
fsubs  0xd90ffff(%edx)
add    %al,(%eax)
sub    %ah,0xdb4ffff(%ebx)
add    %al,(%eax)
pop    %eax
mov    %eax,0xdd4ffff
add    %al,(%eax)
mov    %ah,0xdf0ffff(%ebx)
add    %al,(%eax)
mov    $0x10ffffa3,%eax
push   %cs
add    %al,(%eax)
call   39052dd4 <optarg+0x30ffcbd0>
push   %cs
add    %al,(%eax)
cmp    %ah,0xe44ff(%edi,%edi,8)
add    %ch,0x60ffffa4(%eax)
push   %cs
add    %al,(%eax)
fsubs  0xe74ff(%edi,%edi,8)
add    %bh,%al
test   $0xff,%al
dec    %esp
push   %cs
add    %al,(%eax)
cmp    %ch,0xefcffff(%ecx)
add    %al,(%eax)
push   $0x14ffffa9
sldt   (%eax)
cwtl
test   $0xf2cffff,%eax
add    %al,(%eax)
mov    $0x40ffffa9,%eax
sldt   (%eax)
sub    %ch,0xf74ffff(%edx)
add    %al,(%eax)
or     %ch,0xfccffff(%ebx)
add    %al,(%eax)
mov    %ch,0x1008ffff(%ebx)
add    %al,(%eax)
enter  $0xffab,$0xff
xor    $0x10,%al
add    %al,(%eax)
or     %ch,0x1058ff(%edi,%edi,8)
add    %ch,-0x54(%eax)
(bad)
call   *-0x53380000(%eax,%edx,1)
(bad)
dec    %esp
adc    %al,(%eax)
add    %bl,0x24ffffae(%eax)
adc    %eax,(%eax)
add    %bl,(%eax)
scas   %es:(%edi),%eax
(bad)
call   *0x0(%ecx,%edx,1)
add    %cl,-0x7f000051(%eax)
adc    %eax,(%eax)
add    %bh,%al
scas   %es:(%edi),%eax
(bad)
pushl  0x18000011(%eax)
mov    $0xff,%dl
push   %eax
adc    %eax,(%eax)
add    %bh,%al
mov    $0xff,%dl
lcall  *0x0(%edx,%edx,1)
add    %cl,%al
mov    $0xff,%bl
lcall  *-0x17ffffee(%eax)
mov    $0x1338ffff,%esp
add    %al,(%eax)
push   $0xa8ffffc0
adc    (%eax),%eax
add    %bh,%al
sar    $0xff,%edi
loopne 8052f0d <_IO_stdin_used+0x1a49>
add    %al,(%eax)
or     %cl,%dl
(bad)
call   *0x14(%eax)
add    %al,(%eax)
dec    %eax
lret   $0xffff
jo     8052f1e <_IO_stdin_used+0x1a5a>
add    %al,(%eax)
test   $0xcb,%al
(bad)
push   %esp
adc    $0x0,%al
add    %bl,(%eax)
int3
(bad)
ljmp   *-0x33b80000(,%edx,1)
(bad)
incl   0x0(%ebp,%edx,1)
add    %cl,%al
int3
(bad)
lcall  *-0x33180000(%ebp,%edx,1)
(bad)
pushl  -0x27ffffeb(%eax)
int    $0xff
decl   (%eax)
push   %ss
add    %al,(%eax)
sbb    %cl,%dh
(bad)
jmp    *(%eax)
push   %ss
add    %al,(%eax)
test   $0xce,%al
(bad)
lcall  *0x0(%esi,%edx,1)
add    %bh,0x70ffffce(%eax)
push   %ss
add    %al,(%eax)
enter  $0xffce,$0xff
test   %dl,(%esi)
add    %al,(%eax)
clc
into
(bad)
ljmp   *-0x47ffffea(%eax)
iret
(bad)
call   *(%edi,%edx,1)
add    %al,(%eax)
push   $0x28ffffd0
pop    %ss
add    %al,(%eax)
js     8052f47 <_IO_stdin_used+0x1a83>
(bad)
(bad)
jl     8052f91 <_IO_stdin_used+0x1acd>
add    %al,(%eax)
mov    %dl,%cl
(bad)
call   *-0x67ffffe9(%eax)
sar    %edi
jmp    *-0x2e580000(%edi,%edx,1)
(bad)
(bad)
mov    $0xf8000017,%eax
sar    %edi
(bad)
fcoml  (%edi)
add    %al,(%eax)
pop    %eax
sar    %cl,%bh
lcall  *(%eax)
sbb    %al,(%eax)
add    %ch,-0x2d(%eax)
(bad)
call   *0x0(%eax,%ebx,1)
add    %cl,%al
sar    %cl,%edi
lcall  *-0x2bf80000(%eax,%ebx,1)
(bad)
(bad)
mov    $0x68000018,%esp
aam    $0xff
(bad)
clc
sbb    %al,(%eax)
add    %cl,%al
aam    $0xff
pushl  (%eax)
sbb    %eax,(%eax)
add    %cl,-0x2b(%eax)
(bad)
ljmp   *0x0(%ecx,%ebx,1)
add    %cl,-0x6f00002b(%eax)
sbb    %eax,(%eax)
add    %bh,-0x5b00002b(%eax)
sbb    %eax,(%eax)
add    %bh,%al
(bad)
(bad)
(bad)
cld
sbb    %eax,(%eax)
add    %cl,0x30ffffd7(%eax)
sbb    (%eax),%al
add    %bl,-0x28(%eax)
(bad)
ljmp   *0x1a(%eax)
add    %al,(%eax)
call   e1052fda <optarg+0xd8ffcdd6>
sbb    (%eax),%al
add    %bh,0x34ffffdb(%eax)
sbb    (%eax),%eax
add    %cl,%al
(bad)
decl   0x1b(%eax)
add    %al,(%eax)
or     %bl,%ah
(bad)
ljmp   *0x0(%ebx,%ebx,1)
add    %bh,-0x23(%eax)
(bad)
ljmp   *-0x22580000(%ebx,%ebx,1)
(bad)
inc    %eax
sbb    (%eax),%eax
add    %bh,-0x2b000023(%eax)
sbb    (%eax),%eax
add    %bh,%al
(bad)
incl   (%eax)
sbb    $0x0,%al
add    %bh,(%eax)
fdivrp %st,%st(7)
(bad)
cmp    $0x1c,%al
add    %al,(%eax)
clc
loope  8053046 <_IO_stdin_used+0x1b82>
(bad)
jl     8053066 <_IO_stdin_used+0x1ba2>
add    %al,(%eax)
cmp    %ah,%dl
(bad)
call   *-0x1d980000(%esp,%ebx,1)
(bad)
ljmp   *-0x1d580000(%esp,%ebx,1)
(bad)
(bad)
call   50053081 <optarg+0x47ffce7d>
jecxz  8053066 <_IO_stdin_used+0x1ba2>
pushl  (%eax)
sbb    $0xe4680000,%eax
(bad)
(bad)
js     805308f <_IO_stdin_used+0x1bcb>
add    %al,(%eax)
enter  $0xffe4,$0xff
movsb  %ds:(%esi),%es:(%edi)
sbb    $0xe5580000,%eax
(bad)
(bad)
cld
sbb    $0xe6880000,%eax
(bad)
ljmp   *0x1e(%eax)
add    %al,(%eax)
call   dd053078 <optarg+0xd4ffce74>
push   %ds
add    %al,(%eax)
pop    %eax
call   27163099 <optarg+0x1f10ce95>
add    %al,(%eax)
push   $0x24ffffe8
pop    %ds
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     80530bb <_IO_stdin_used+0x1bf7>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
pop    %esi
(bad)
inc    %eax
add    $0x0,%al
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     80530db <_IO_stdin_used+0x1c17>
js     80530d9 <_IO_stdin_used+0x1c15>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,%al
imul   $0x3f3ff,%edi,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
sub    %ah,-0x1(%ebx)
call   *0x5(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %edx
xchg   %eax,(%ebx)
xchg   %al,(%edi,%ecx,2)
addl   $0x0,0x44000000
add    %al,(%eax)
test   %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
insl   (%dx),%es:(%edi)
(bad)
(bad)
jnp    8053132 <_IO_stdin_used+0x1c6e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ecx),%cl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ecx
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ebp)
push   %cs
add    $0x41,%al
or     (%eax),%edx
add    %al,(%eax)
add    %cl,%ah
add    %al,(%eax)
add    %cl,%ah
insl   (%dx),%es:(%edi)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
loopne 8053186 <_IO_stdin_used+0x1cc2>
add    %al,(%eax)
call   b0530fa <optarg+0x2ffcef6>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %al,(%eax)
add    %ah,%ah
insl   (%dx),%es:(%edi)
(bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
jbe    80531b9 <_IO_stdin_used+0x1cf5>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
and    %ch,-0x1(%esi)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
jbe    80531dd <_IO_stdin_used+0x1d19>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %bh,(%ecx,%eax,1)
add    %al,(%eax)
pop    %esp
outsb  %ds:(%esi),(%dx)
(bad)
incl   0xe(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2a00e46
sub    $0x140e0a07,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%ecx)
add    %ch,0xaffff7c(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x7ca40000(%ecx,%eax,1)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,-0x5fffffff(%eax)
jl     8053252 <_IO_stdin_used+0x1d8e>
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
aam    $0x1
add    %al,(%eax)
inc    %esp
jge    805327e <_IO_stdin_used+0x1dba>
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %eax,(%eax)
add    %al,0x32ffff(%ebp,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%edx)
add    %al,(%eax)
mov    0x73ffff7d,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edi),%ah
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
dec    %esp
add    (%eax),%al
add    %ch,%ah
jge    80532f6 <_IO_stdin_used+0x1e32>
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
mov    %es,(%edx)
add    %al,(%eax)
pop    %esp
jle    8053336 <_IO_stdin_used+0x1e72>
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
mov    $0x60000002,%eax
jle    8053362 <_IO_stdin_used+0x1e9e>
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,%al
add    (%eax),%al
add    %bl,(%eax)
jg     805339a <_IO_stdin_used+0x1ed6>
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
xor    $0x3,%al
add    %al,(%eax)
add    $0x89,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %dh,0x0(%ebx,%eax,1)
add    %ah,-0x1(%edx,%ecx,4)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x70000003(%eax)
mov    %bh,%bh
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,-0x75840000(%ebx,%eax,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,%al
add    (%eax),%eax
add    %cl,0x3fffff8a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %ah,0x19ffff(%edx,%ecx,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     %al,(%eax,%eax,1)
add    %dh,0x38ffff8a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sub    $0x4,%al
add    %al,(%eax)
int3
mov    %bh,%bh
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x0,%al
add    %bh,%al
mov    %bh,%bh
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bl,-0x74640000(%esp,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
mov    $0x4,%ah
add    %al,(%eax)
mov    $0x8b,%ah
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   18053595 <optarg+0xfffd391>
mov    %?,%edi
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
add    $0x0,%al
add    %bl,(%esp,%ecx,4)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    $0x8c280000,%eax
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,-0x73cc0000(,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cmp    %al,0x8c400000
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,0x5(%eax)
add    %al,(%eax)
push   %eax
mov    %?,%edi
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,0x5(%eax)
add    %al,(%eax)
pusha
mov    %?,%edi
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
nop
add    $0x8c780000,%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
test   $0x5,%al
add    %al,(%eax)
nop
mov    %?,%edi
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
int3
add    $0x8d1c0000,%eax
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
in     $0x5,%al
add    %al,(%eax)
xor    $0x8d,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cld
add    $0x8d4c0000,%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
adc    $0x6,%al
add    %al,(%eax)
fs
(bad)
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cmp    %al,(%esi)
add    %al,(%eax)
lock (bad)
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %eax
push   %es
add    %al,(%eax)
sbb    %cl,0x33ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0x40000006
mov    %edi,%?
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%esi)
add    %ch,-0x72(%eax)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x718c0000(%esi,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x7ffffffa(%eax)
mov    %edi,%?
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,-0x71740000(%esi,%eax,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,%al
push   %es
add    %al,(%eax)
cwtl
mov    %edi,%?
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x7ff1bcfe(%ebx)
add    %eax,(%edx)
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x98,%al
add    %al,(%eax)
add    %bh,%ah
push   %es
add    %al,(%eax)
int3
mov    %edi,%?
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
cwtl
pop    %es
add    %al,(%eax)
mov    0x4affff93,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dh,-0x27fffff9(%eax)
xchg   %eax,%ebx
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
aam    $0x7
add    %al,(%eax)
adc    $0x94,%al
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
pop    %es
add    %al,(%eax)
cmp    $0x94,%al
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
adc    %cl,(%eax)
add    %al,(%eax)
enter  $0xff94,$0xff
and    $0x0,%eax
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    $0x8,%al
add    %al,(%eax)
aam    $0x94
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
pop    %eax
or     %al,(%eax)
add    %ah,%al
xchg   %eax,%esp
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
or     %al,(%eax)
add    %bl,%ah
xchg   %eax,%esp
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
pushf
or     %al,(%eax)
add    %bh,%ah
xchg   %eax,%esp
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
enter  $0x8,$0x0
adc    %dl,0x5dffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
clc
or     %al,(%eax)
add    %al,-0x6b(%eax)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
sbb    $0x9,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xchg   %eax,%ebp
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bh,(%ecx,%ecx,1)
add    %al,(%eax)
jl     805397b <_IO_stdin_used+0x24b7>
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %eax
or     %eax,(%eax)
add    %dl,0x29ffff95(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,0x9(%eax)
add    %al,(%eax)
mov    0x24ffff95,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,-0x4ffffff7(%eax)
xchg   %eax,%ebp
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,(%eax)
add    %al,(%eax)
add    %ch,-0x6a140000(%ecx,%ecx,1)
(bad)
jmp    *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,%al
or     %eax,(%eax)
add    %al,-0x6a(%eax)
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %bl,%ah
or     %eax,(%eax)
add    %bl,-0x1(%esi,%edx,4)
call   *(%esp,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
xor    $0xa,%al
add    %al,(%eax)
and    $0x9a,%al
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x59,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     -0x3d(%ebx),%ecx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
or     %fs:(%eax),%al
add    %dh,(%edx,%ebx,4)
(bad)
ljmp   *0x0
inc    %ebx
push   %cs
and    %ch,0xe(%ecx)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
jl     8053b2c <_IO_stdin_used+0x2668>
add    %al,(%eax)
dec    %esp
lcall  $0x0,$0x2cffff
add    %al,0xe(%ebx)
and    %ch,0xe(%eax)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
or     (%eax),%al
add    %ah,-0x1(%edx,%ebx,4)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %ch,0x7000000a(%eax)
lcall  $0x0,$0x67ffff
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x6f,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     -0x3d(%edx,%ecx,1),%edx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,%ah
or     (%eax),%al
add    %ch,0xdfffff(%edx,%ebx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x71,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
dec    %esi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %dh,(%ebx,%ecx,1)
add    %al,(%eax)
xor    $0x9b,%al
(bad)
incl   0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %dh,0xb(%eax)
add    %al,(%eax)
js     8053bb5 <_IO_stdin_used+0x26f1>
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xc(%esi,%ecx,1)
inc    %ecx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pushf
or     (%eax),%eax
add    %cl,0x32ffff(%ebx,%ebx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
rorb   $0x0,(%ebx)
add    %ch,0x56ffff9b(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
cld
or     (%eax),%eax
add    %cl,%ah
fwait
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%eax),%esp
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %dh,(%esp,%ecx,1)
add    %al,(%eax)
hlt
fwait
(bad)
dec    %ebp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffff96,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
mov    %cs,(%eax,%eax,1)
add    %ch,-0x1(%ebp,%ebx,4)
pushl  0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
imul   $0xe,(%edx),%ecx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
mov    $0xbc00000c,%esp
popf
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4502(%ebx)
jge    8053d81 <_IO_stdin_used+0x28bd>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ecx),%esp
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
call   8053d9d <_IO_stdin_used+0x28d9>
sahf
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x48,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esp
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
sbb    %cl,0x9e400000
(bad)
lcall  *0x2
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
push   %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
pop    %eax
or     $0xa0200000,%eax
(bad)
call   *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ebx),%bh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
les    0xa0940000,%ecx
(bad)
inc    %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
jnp    8053e8e <_IO_stdin_used+0x29ca>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
pushf
add    %al,(%eax)
add    %al,(%eax)
push   %cs
add    %al,(%eax)
sub    %ah,0x919ffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e46
push   $0x3
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jmp    8053eee <_IO_stdin_used+0x2a2a>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
dec    %esp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
rolb   %cl,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %ah,-0x57fffff2(%eax)
test   $0x37bffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7f,0x3400e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
push   %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
adc    %cl,(%edi)
add    %al,(%eax)
mov    $0x86ffffac,%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    %al,%ah
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %cl,0xf(%eax)
add    %al,(%eax)
adc    %ch,0x805ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
push   %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8054036 <_IO_stdin_used+0x2b72>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xb000000f,%eax
mov    $0xff,%ch
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %dl,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
add    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax)
add    %bl,%al
sldt   (%eax)
(bad)
mov    $0xff,%ch
call   *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff82,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
adc    %al,(%eax)
add    %ch,0x6fffff(%esi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebp),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
adc    %al,(%eax)
add    %ah,%ah
mov    $0xff,%dh
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ch,-0x49040000(%eax,%edx,1)
(bad)
(bad)
js     805415a <_IO_stdin_used+0x2c96>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     805417b <_IO_stdin_used+0x2cb7>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%ecx,%edx,1)
add    %al,(%eax)
and    $0xb7,%al
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %bl,(%eax)
adc    %eax,(%eax)
add    %dh,(%eax)
mov    $0xff,%bh
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
jo     8054227 <_IO_stdin_used+0x2d63>
add    %al,(%eax)
enter  $0xffb7,$0xff
xor    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%ebp)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
mov    %dl,(%ecx)
add    %al,(%eax)
lock mov $0xff,%bh
incl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a6402
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
les    (%ecx),%edx
add    %al,(%eax)
inc    %esp
mov    $0x10ffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
fcoms  (%ecx)
add    %al,(%eax)
inc    %eax
mov    $0xcffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
adc    %eax,(%eax)
add    %bh,(%eax,%edi,4)
(bad)
jmp    *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
push   $0x10000000
adc    (%eax),%al
add    %cl,-0x48(%eax)
(bad)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x58,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
jl     8054334 <_IO_stdin_used+0x2e70>
add    %al,(%eax)
pushf
mov    $0xafffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %dl,0x38000012(%eax)
mov    $0x10cffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
in     $0x12,%al
add    %al,(%eax)
hlt
mov    $0x8ffff,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
clc
adc    (%eax),%al
add    %dh,%al
mov    $0x8ffff,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
or     $0x13,%al
add    %al,(%eax)
in     (%dx),%al
mov    $0x8ffff,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
and    %dl,(%ebx)
add    %al,(%eax)
call   52054386 <optarg+0x49ffe182>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x2,(%ebx)
inc    %ebp
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %al,0x0(%ebx,%edx,1)
add    %dl,(%edx,%edi,4)
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa440204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx,%eax,8),%eax
or     $0x41,%al
(bad)
push   %cs
or     %al,0xe(%edi,%eax,8)
add    $0x38,%al
add    %al,(%eax)
add    %al,0x38000013(%eax)
mov    $0x106ffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %bh,-0x44f40000(%ebx,%edx,1)
(bad)
lcall  *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebp),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
add    $0x14,%al
add    %al,(%eax)
and    $0xbb,%al
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %ch,0xa(%ebp)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ah,(%esp,%edx,1)
add    %al,(%eax)
inc    %esp
mov    $0x51ffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa450204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %ah,0x14(%eax)
add    %al,(%eax)
push   $0x5dffffbb
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x10,0xec35302
inc    %ecx
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %bl,-0x6fffffec(%eax)
mov    $0x72ffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,%ah
adc    $0x0,%al
add    %dl,%ah
mov    $0x37ffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x71,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
clc
adc    $0x0,%al
add    %dh,%al
mov    $0x24ffff,%ebx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,-0x43f40000(,%edx,1)
(bad)
(bad)
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx,%ecx,1),%edx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebp,%edx,1)
add    %dh,%ah
mov    $0x8bffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    -0x3cbeeff2(%ecx),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
cwtl
adc    $0xbd500000,%eax
(bad)
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %dl,%al
adc    $0xbde80000,%eax
(bad)
decl   0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    (%ebx),%esp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %al,0x16(%eax)
add    %al,(%eax)
or     %bh,0x1c6ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
jnp    805470f <_IO_stdin_used+0x324b>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8054722 <_IO_stdin_used+0x325e>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x3f840000(%esi,%edx,1)
(bad)
incl   0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,0x78000016(%eax)
sar    $0xff,%bh
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
aam    $0x16
add    %al,(%eax)
xchg   %eax,%esp
sar    $0xff,%bh
add    %eax,%gs:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x44,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x17,%al
add    %al,(%eax)
(bad)
sub    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
sub    %dl,(%edi)
add    %al,(%eax)
loopne 8054793 <_IO_stdin_used+0x32cf>
(bad)
decl   (%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,(%edi,%edx,1)
add    %al,(%eax)
fadd   %st,%st(1)
(bad)
(bad)
add    %al,%ds:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xec37804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %ch,0x17(%eax)
add    %al,(%eax)
lock sar $0xff,%edi
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ch,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%eax
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
pop    %ss
add    %al,(%eax)
hlt
sar    $0xff,%edi
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
in     $0x17,%al
add    %al,(%eax)
je     8054853 <_IO_stdin_used+0x338f>
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xe(%ebp)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cld
pop    %ss
add    %al,(%eax)
pushf
(bad)
and    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
adc    $0x18,%al
add    %al,(%eax)
mov    $0xc5,%ah
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6b300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %dl,0x18(%eax)
add    %al,(%eax)
mov    $0x97ffffc5,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bl,0x10000018(%eax)
(bad)
(bad)
lcall  *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,%al
sbb    %al,(%eax)
add    %ch,%al
(bad)
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %cl,(%ecx,%ebx,1)
add    %al,(%eax)
sbb    $0xc7,%al
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   $0x64000000
sbb    %eax,(%eax)
add    %dl,-0x1(%edi,%eax,8)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
rcrb   (%ecx)
add    %al,(%eax)
sbb    %cl,%al
(bad)
call   *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     8054a9f <_IO_stdin_used+0x35db>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8054ad6 <_IO_stdin_used+0x3612>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,(%edx,%ebx,1)
add    %al,(%eax)
or     $0xc9,%al
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,0x1a(%eax)
add    %al,(%eax)
inc    %eax
leave
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,-0x36c40000(%edx,%ebx,1)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
nop
.byte 0x9a
add    $0x8,%al
jo     8055ea8 <_IO_stdin_used+0x49e4>
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
inc    %eax
popl   (%eax,%ecx,1)
or     $0xac000000,%eax
adc    $0x5,%al
or     %bl,(%ecx)
add    %al,(%eax)
add    %cl,(%eax)
pop    %edi
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x5f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
mov    $0x87,%ah
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dl,(%edx,%eax,4)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
mov    $0x3,%bh
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x208,%eax
add    %bl,0x2(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %ch,%al
mov    %es,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
mov    $0x8c,%al
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x20(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x6c(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x5f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x69f7fb71(%esi)
popl   (%eax,%ecx,1)
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8055fda <_IO_stdin_used+0x4b16>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    805601b <_IO_stdin_used+0x4b57>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    805605c <_IO_stdin_used+0x4b98>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    805609d <_IO_stdin_used+0x4bd9>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
in     (%dx),%al
and    0x108,%al
add    %al,(%esi)
add    %al,(%eax)
add    %dl,0x1000805(%ecx,%eiz,2)
add    %al,(%eax)
inc    %eax
bound  %eax,0x108
add    %al,(%eax)
add    %al,(%eax)
arpl   %bp,0x67(%eax)
jb     75 <endgrent@plt-0x8048f0b>
add    %al,(%eax)
add    %cl,0x48(%eax)
cmp    %al,(%ebx)
