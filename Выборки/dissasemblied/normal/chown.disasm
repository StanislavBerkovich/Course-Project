das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bh,0xd7e7ae2(%ebp,%ecx,1)
sub    $0x25487fad,%eax
xchg   %eax,%esp
jg     804820c <getpwnam@plt-0xdb4>
adc    %ah,0x47894565(%esi)
add    (%eax),%eax
add    %al,(%eax)
dec    %ebp
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,-0x4dffbbe0(%edx)
and    %ecx,0x22804048(%esi,%edx,4)
and    %cl,(%eax)
add    %al,0x51000000(,%ecx,2)
add    %al,(%eax)
add    %bl,0x0(%ecx)
add    %al,(%eax)
fmull  0x61(%ebx)
(bad)
sub    %bl,0x390c1c8c
mov    -0xd8ffa05(%edx),%dl
mov    $0x389e7650,%esp
repnz mov (%esi,%eax,4),%ebx
lock xchg %eax,%esi
jl     80481c3 <getpwnam@plt-0xdfd>
sub    $0x63,%al
jb     804823b <getpwnam@plt-0xd85>
ret
mov    %dl,-0x3f1cb454(%edx)
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %ah,%al
notl   (%edx)
cmpsb  %es:(%edi),%ds:(%esi)
inc    %ebp
loop   80481c4 <getpwnam@plt-0xdfc>
.byte 0xa2
notl   (%edx)
sub    %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ebx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    $0x3,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jne    8048387 <getpwnam@plt-0xc39>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%esi)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
movb   $0x0,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lds    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %eax
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%edx),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aam    $0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%eax),%es
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jecxz  80486b6 <getpwnam@plt-0x90a>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %cs:(%eax),%al
add    %dh,0x340804fa(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x19e00
add    %al,(%eax)
jb     8048700 <getpwnam@plt-0x8c0>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
scas   %es:(%edi),%al
add    %eax,(%eax)
add    %ah,0x50804f2(%eax)
or     %al,(%eax)
add    %dl,(%edx)
add    %cl,0x2ee00
add    %dh,%al
cli
add    $0x8,%al
push   %ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x33e00
add    %ah,0x4080571(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,0x2(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
jno    8048740 <getpwnam@plt-0x880>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
cmp    %eax,(%ebx)
add    %al,(%eax)
push   %eax
nop
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ecx
add    (%eax),%eax
add    %al,%al
jno    8048760 <getpwnam@plt-0x860>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
enter  $0x2,$0x0
nop
in     (%dx),%eax
add    $0x8,%al
jnp    8048771 <getpwnam@plt-0x84f>
add    %al,(%eax)
adc    (%eax),%al
or     $0xb00,%eax
add    %ah,0x5(%ecx,%ebx,1)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
str    %ebx
add    %al,(%eax)
add    %al,%al
jno    8048790 <getpwnam@plt-0x830>
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
xchg   %eax,%ebx
add    (%eax),%al
add    %ah,0x4080571(%eax)
add    %al,(%eax)
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %cl,0x0(%edi)
add    %al,(%eax)
loopne 804881b <getpwnam@plt-0x7a5>
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,(%ecx)
add    %eax,(%eax)
add    %dl,(%eax)
icebp
add    $0x8,%al
xchg   %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x23600,%eax
add    %al,(%edx,%esi,2)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804884b <getpwnam@plt-0x775>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048859 <getpwnam@plt-0x767>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048866 <getpwnam@plt-0x75a>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048872 <getpwnam@plt-0x74e>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048879 <getpwnam@plt-0x747>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804888b <getpwnam@plt-0x735>
outsl  %ds:(%esi),(%dx)
ja     804887d <getpwnam@plt-0x743>
add    %dh,0x74(%ebx)
jb     804888d <getpwnam@plt-0x733>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     8048890 <getpwnam@plt-0x730>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     80488a0 <getpwnam@plt-0x720>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80488ac <getpwnam@plt-0x714>
gs
js     80488af <getpwnam@plt-0x711>
add    %ah,0x65(%edi)
je     80488b0 <getpwnam@plt-0x710>
ja     80488b7 <getpwnam@plt-0x709>
imul   $0x7378665f,0x5f(%eax,%eax,1),%esp
je     80488ad <getpwnam@plt-0x713>
je     80488af <getpwnam@plt-0x711>
je     8048886 <getpwnam@plt-0x73a>
xor    $0x0,%al
arpl   %bp,0x73(%edi,%ebp,2)
gs imul $0x64686366,%fs:%gs:0x0(%edx),%esi
64
imul   $0x67746567,0x0(%edx),%esi
jb     80488cf <getpwnam@plt-0x6f1>
imul   $0x726f7272,0x65(%eax,%eax,1),%esp
add    %bl,0x5f(%edi)
jae    80488e9 <getpwnam@plt-0x6d7>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048899 <getpwnam@plt-0x727>
pop    %edi
gs
js     8048906 <getpwnam@plt-0x6ba>
je     804889f <getpwnam@plt-0x721>
jo     8048913 <getpwnam@plt-0x6ad>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048906 <getpwnam@plt-0x6ba>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    804892f <getpwnam@plt-0x691>
gs
jb     8048933 <getpwnam@plt-0x68d>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     8048931 <getpwnam@plt-0x68f>
pop    %edi
addr16
gs
je     8048930 <getpwnam@plt-0x690>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048949 <getpwnam@plt-0x677>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80488dc <getpwnam@plt-0x6e4>
outsb  %gs:(%esi),(%dx)
fs
jo     8048958 <getpwnam@plt-0x668>
outsb  %gs:(%esi),(%dx)
je     80488e5 <getpwnam@plt-0x6db>
data16
je     804895b <getpwnam@plt-0x665>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %bl,%gs:0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jo     8048959 <getpwnam@plt-0x667>
outsb  %ds:(%esi),(%dx)
popa
je     804892e <getpwnam@plt-0x692>
xor    $0x5f,%al
xor    (%eax),%al
addr16
gs
je     8048970 <getpwnam@plt-0x650>
ja     8048970 <getpwnam@plt-0x650>
popa
insl   (%dx),%es:(%edi)
add    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048982 <getpwnam@plt-0x63e>
jb     804897c <getpwnam@plt-0x644>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     804897c <getpwnam@plt-0x644>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048984 <getpwnam@plt-0x63c>
je     8048921 <getpwnam@plt-0x69f>
pop    %edi
pop    %edi
gs
jb     8048998 <getpwnam@plt-0x628>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x6e(%ebp)
fs
addr16 jb 80489ab <getpwnam@plt-0x615>
outsb  %ds:(%esi),(%dx)
je     8048949 <getpwnam@plt-0x677>
pop    %edi
pop    %edi
data16
js     80489c1 <getpwnam@plt-0x5ff>
je     80489b1 <getpwnam@plt-0x60f>
je     8048988 <getpwnam@plt-0x638>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     80489cb <getpwnam@plt-0x5f5>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x67,(%eax),%eax
gs
je     80489cd <getpwnam@plt-0x5f3>
jb     80489d6 <getpwnam@plt-0x5ea>
popa
insl   (%dx),%es:(%edi)
add    %ah,0x63(%esi)
push   $0x6e776f
jae    80489e8 <getpwnam@plt-0x5d8>
outsl  %fs:(%esi),(%dx)
jne    80489ec <getpwnam@plt-0x5d4>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ah,0x74(%esi)
jae    80489e5 <getpwnam@plt-0x5db>
jb     80489ed <getpwnam@plt-0x5d3>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80489fd <getpwnam@plt-0x5c3>
add    %dh,0x74(%ebx)
jb     8048a11 <getpwnam@plt-0x5af>
outsl  %ds:(%esi),(%dx)
jne    8048a0c <getpwnam@plt-0x5b4>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsw  %fs:(%esi),(%dx)
jo     8048a12 <getpwnam@plt-0x5ae>
outsb  %ds:(%esi),(%dx)
imul   $0x6973626d,%fs:0x0(%edx),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x73786c5f,0x5f(%eax,%eax,1),%esi
je     8048a22 <getpwnam@plt-0x59e>
je     80489f9 <getpwnam@plt-0x5c7>
xor    $0x0,%al
data16
jae    8048a3c <getpwnam@plt-0x584>
popa
je     8048a31 <getpwnam@plt-0x58f>
jae    8048a03 <getpwnam@plt-0x5bd>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    8048a39 <getpwnam@plt-0x587>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80489d7 <getpwnam@plt-0x5e9>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     8048a5a <getpwnam@plt-0x566>
je     8048a4a <getpwnam@plt-0x576>
je     8048a21 <getpwnam@plt-0x59f>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048a64 <getpwnam@plt-0x55c>
outsb  %ds:(%esi),(%dx)
jbe    8048a02 <getpwnam@plt-0x5be>
data16
je     8048a78 <getpwnam@plt-0x548>
pop    %edi
jae    8048a6d <getpwnam@plt-0x553>
je     8048a0a <getpwnam@plt-0x5b6>
outsl  %ds:(%esi),(%dx)
jo     8048a81 <getpwnam@plt-0x53f>
popa
jb     8048a77 <getpwnam@plt-0x549>
add    %bl,0x5f(%edi)
data16
jb     8048a7b <getpwnam@plt-0x545>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048a94 <getpwnam@plt-0x52c>
add    %ah,0x63(%esi)
push   $0x616e776f
je     8048a2c <getpwnam@plt-0x594>
data16
jae    8048a92 <getpwnam@plt-0x52e>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048aa6 <getpwnam@plt-0x51a>
jo     8048aad <getpwnam@plt-0x513>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048ab3 <getpwnam@plt-0x50d>
je     8048ab1 <getpwnam@plt-0x50f>
add    %bl,0x5f(%edi)
data16
jo     8048ab7 <getpwnam@plt-0x509>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048ac7 <getpwnam@plt-0x4f9>
push   $0x72700072
outsl  %ds:(%esi),(%dx)
addr16 jb 8048ace <getpwnam@plt-0x4f2>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048af3 <getpwnam@plt-0x4cd>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048aef <getpwnam@plt-0x4d1>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x73710034,%fs:0x36(%edx),%esi
73
outsl  %ds:(%esi),(%dx)
jb     8048b0f <getpwnam@plt-0x4b1>
add    %ah,0x74(%esi)
jae    8048aff <getpwnam@plt-0x4c1>
outsl  %ds:(%esi),(%dx)
jo     8048b08 <getpwnam@plt-0x4b8>
outsb  %ds:(%esi),(%dx)
add    %ah,0x63(%esi)
outsb  %ds:(%esi),(%dx)
je     8048b16 <getpwnam@plt-0x4aa>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048b17 <getpwnam@plt-0x4a9>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048b1e <getpwnam@plt-0x4a2>
js     8048b2f <getpwnam@plt-0x491>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x5f737466,0x0(%esi),%ebp
arpl   %bp,0x69(%eax)
insb   (%dx),%es:(%edi)
fs
jb     8048b32 <getpwnam@plt-0x48e>
outsb  %ds:(%esi),(%dx)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
popa
je     8048b0c <getpwnam@plt-0x4b4>
xor    $0x0,%al
jae    8048b4e <getpwnam@plt-0x472>
jb     8048b3f <getpwnam@plt-0x481>
insl   (%dx),%es:(%edi)
jo     8048adf <getpwnam@plt-0x4e1>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048b5f <getpwnam@plt-0x461>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %dh,%fs:0x74(%ebx)
jo     8048b5e <getpwnam@plt-0x462>
jo     8048b76 <getpwnam@plt-0x44a>
add    %ah,0x70(%esi)
jne    8048b76 <getpwnam@plt-0x44a>
jae    8048b63 <getpwnam@plt-0x45d>
jne    8048b74 <getpwnam@plt-0x44c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b88 <getpwnam@plt-0x438>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b93 <getpwnam@plt-0x42d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b97 <getpwnam@plt-0x429>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048b9b <getpwnam@plt-0x425>
js     8048ba1 <getpwnam@plt-0x41f>
je     8048b3a <getpwnam@plt-0x486>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048bb7 <getpwnam@plt-0x409>
popa
jb     8048bba <getpwnam@plt-0x406>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x5000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x5000200
add    %al,(%ebx)
add    %al,(%esi)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%esi)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %eax,(%eax)
or     %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x90000,%eax
jne    8048c75 <getpwnam@plt-0x34b>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     8048c93 <getpwnam@plt-0x32d>
imul   $0x80000,(%ecx),%ecx
jg     8048c85 <getpwnam@plt-0x33b>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    8048ca9 <getpwnam@plt-0x317>
imul   $0x70000,(%ecx),%ecx
mov    (%ebx),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x60000,%eax
xchg   %eax,%edi
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x3a1,0x50000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
pop    %ss
imul   $0x40000,0xd(%ecx),%ebp
stos   %eax,%es:(%edi)
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x30000,0xd(%ecx),%ebp
mov    $0x3,%ch
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
mov    $0x3,%edi
add    %al,(%eax)
cld
outsl  %ds:(%esi),(%dx)
add    $0x220608,%eax
add    %ah,0x5080571(%eax)
push   %ecx
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
jno    8048d00 <getpwnam@plt-0x2c0>
or     %al,0xc0000052
jno    8048d08 <getpwnam@plt-0x2b8>
or     %al,0xe0000054
jno    8048d10 <getpwnam@plt-0x2b0>
or     %al,0x59
jb     8048d18 <getpwnam@plt-0x2a8>
or     %al,0x400004e
jb     8048d20 <getpwnam@plt-0x2a0>
.byte 0x8
.byte 0x5
pop    %ebx
or     $0x70,%al
add    $0x10708,%eax
add    %dl,(%eax)
jo     8048d30 <getpwnam@plt-0x290>
or     %al,(%edi)
add    (%eax),%al
add    %dl,(%eax,%esi,2)
add    $0x30708,%eax
add    %bl,(%eax)
jo     8048d40 <getpwnam@plt-0x280>
or     %al,(%edi)
add    $0x0,%al
add    %bl,(%eax,%esi,2)
add    $0x50708,%eax
add    %ah,(%eax)
jo     8048d50 <getpwnam@plt-0x270>
or     %al,(%edi)
push   %es
add    %al,(%eax)
and    $0x70,%al
add    $0x70708,%eax
add    %ch,(%eax)
jo     8048d60 <getpwnam@plt-0x260>
or     %al,(%edi)
or     %al,(%eax)
add    %ch,(%eax,%esi,2)
add    $0x90708,%eax
add    %dh,(%eax)
jo     8048d70 <getpwnam@plt-0x250>
or     %al,(%edi)
push   %ebx
add    %al,(%eax)
xor    $0x70,%al
add    $0xa0708,%eax
add    %bh,(%eax)
jo     8048d80 <getpwnam@plt-0x240>
or     %al,(%edi)
or     (%eax),%eax
add    %bh,(%eax,%esi,2)
add    $0xc0708,%eax
add    %al,0x70(%eax)
add    $0xd0708,%eax
add    %al,0x5(%eax,%esi,2)
or     %al,(%edi)
push   %cs
add    %al,(%eax)
dec    %eax
jo     8048da0 <getpwnam@plt-0x220>
or     %al,(%edi)
sldt   (%eax)
dec    %esp
jo     8048da8 <getpwnam@plt-0x218>
or     %al,(%edi)
adc    %al,(%eax)
add    %dl,0x70(%eax)
add    $0x110708,%eax
add    %dl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    (%eax),%al
add    %bl,0x70(%eax)
add    $0x130708,%eax
add    %bl,0x5(%eax,%esi,2)
or     %al,(%edi)
adc    $0x0,%al
add    %ah,0x70(%eax)
add    $0x150708,%eax
add    %ah,0x5(%eax,%esi,2)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
push   $0x7080570
pop    %ss
add    %al,(%eax)
insb   (%dx),%es:(%edi)
jo     8048de8 <getpwnam@plt-0x1d8>
or     %al,(%edi)
sbb    %al,(%eax)
add    %dh,0x70(%eax)
add    $0x190708,%eax
add    %dh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    (%eax),%al
add    %bh,0x70(%eax)
add    $0x1b0708,%eax
add    %bh,0x5(%eax,%esi,2)
or     %al,(%edi)
sbb    $0x0,%al
add    %al,0x7080570(%eax)
sbb    $0x70840000,%eax
add    $0x1e0708,%eax
add    %cl,0x7080570(%eax)
pop    %ds
add    %al,(%eax)
mov    %?,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %dl,0x7080570(%eax)
and    %eax,(%eax)
add    %dl,0x22070805(%eax,%esi,2)
add    %al,(%eax)
cwtl
jo     8048e40 <getpwnam@plt-0x180>
or     %al,(%edi)
and    (%eax),%eax
add    %bl,0x24070805(%eax,%esi,2)
add    %al,(%eax)
mov    0x7080570,%al
and    $0x70a40000,%eax
add    $0x260708,%eax
add    %ch,0x7080570(%eax)
daa
add    %al,(%eax)
lods   %ds:(%esi),%al
jo     8048e68 <getpwnam@plt-0x158>
or     %al,(%edi)
sub    %al,(%eax)
add    %dh,0x7080570(%eax)
sub    %eax,(%eax)
add    %dh,0x2a070805(%eax,%esi,2)
add    %al,(%eax)
mov    $0x7080570,%eax
sub    (%eax),%eax
add    %bh,0x2c070805(%eax,%esi,2)
add    %al,(%eax)
(bad)
jo     8048e90 <getpwnam@plt-0x130>
or     %al,(%edi)
sub    $0x70c40000,%eax
add    $0x2e0708,%eax
add    %cl,%al
jo     8048ea0 <getpwnam@plt-0x120>
or     %al,(%edi)
das
add    %al,(%eax)
int3
jo     8048ea8 <getpwnam@plt-0x118>
or     %al,(%edi)
xor    %al,(%eax)
add    %dl,%al
jo     8048eb0 <getpwnam@plt-0x110>
or     %al,(%edi)
xor    %eax,(%eax)
add    %dl,%ah
jo     8048eb8 <getpwnam@plt-0x108>
or     %al,(%edi)
xor    (%eax),%al
add    %bl,%al
jo     8048ec0 <getpwnam@plt-0x100>
or     %al,(%edi)
xor    (%eax),%eax
add    %bl,%ah
jo     8048ec8 <getpwnam@plt-0xf8>
or     %al,(%edi)
xor    $0x0,%al
add    %ah,%al
jo     8048ed0 <getpwnam@plt-0xf0>
or     %al,(%edi)
xor    $0x70e40000,%eax
add    $0x360708,%eax
add    %ch,%al
jo     8048ee0 <getpwnam@plt-0xe0>
or     %al,(%edi)
aaa
add    %al,(%eax)
in     (%dx),%al
jo     8048ee8 <getpwnam@plt-0xd8>
or     %al,(%edi)
cmp    %al,(%eax)
add    %dh,%al
jo     8048ef0 <getpwnam@plt-0xd0>
or     %al,(%edi)
cmp    %eax,(%eax)
add    %dh,%ah
jo     8048ef8 <getpwnam@plt-0xc8>
or     %al,(%edi)
cmp    (%eax),%al
add    %bh,%al
jo     8048f00 <getpwnam@plt-0xc0>
or     %al,(%edi)
cmp    (%eax),%eax
add    %bh,%ah
jo     8048f08 <getpwnam@plt-0xb8>
or     %al,(%edi)
cmp    $0x0,%al
add    %al,(%eax)
jno    8048f10 <getpwnam@plt-0xb0>
or     %al,(%edi)
cmp    $0x71040000,%eax
add    $0x3e0708,%eax
add    %cl,(%eax)
jno    8048f20 <getpwnam@plt-0xa0>
or     %al,(%edi)
aas
add    %al,(%eax)
or     $0x71,%al
add    $0x400708,%eax
add    %dl,(%eax)
jno    8048f30 <getpwnam@plt-0x90>
or     %al,(%edi)
inc    %ecx
add    %al,(%eax)
adc    $0x71,%al
add    $0x420708,%eax
add    %bl,(%eax)
jno    8048f40 <getpwnam@plt-0x80>
or     %al,(%edi)
inc    %ebx
add    %al,(%eax)
sbb    $0x71,%al
add    $0x440708,%eax
add    %ah,(%eax)
jno    8048f50 <getpwnam@plt-0x70>
or     %al,(%edi)
inc    %ebp
add    %al,(%eax)
and    $0x71,%al
add    $0x460708,%eax
add    %ch,(%eax)
jno    8048f60 <getpwnam@plt-0x60>
or     %al,(%edi)
inc    %edi
add    %al,(%eax)
sub    $0x71,%al
add    $0x480708,%eax
add    %dh,(%eax)
jno    8048f70 <getpwnam@plt-0x50>
or     %al,(%edi)
dec    %ecx
add    %al,(%eax)
xor    $0x71,%al
add    $0x4a0708,%eax
add    %bh,(%eax)
jno    8048f80 <getpwnam@plt-0x40>
or     %al,(%edi)
dec    %ebx
add    %al,(%eax)
cmp    $0x71,%al
add    $0x4c0708,%eax
push   %ebx
sub    $0x8,%esp
call   8049a90 <calloc@plt+0x610>
add    $0xe06f,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048fa6 <getpwnam@plt-0x1a>
call   80491e0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8057004
jmp    *0x8057008
add    %al,(%eax)
jmp    *0x805700c
push   $0x0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057010
push   $0x8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057014
push   $0x10
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057018
push   $0x18
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805701c
push   $0x20
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057020
push   $0x28
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057024
push   $0x30
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057028
push   $0x38
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805702c
push   $0x40
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057030
push   $0x48
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057034
push   $0x50
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057038
push   $0x58
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805703c
push   $0x60
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057040
push   $0x68
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057044
push   $0x70
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057048
push   $0x78
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805704c
push   $0x80
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057050
push   $0x88
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057054
push   $0x90
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057058
push   $0x98
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805705c
push   $0xa0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057060
push   $0xa8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057064
push   $0xb0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057068
push   $0xb8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805706c
push   $0xc0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057070
push   $0xc8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057074
push   $0xd0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057078
push   $0xd8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805707c
push   $0xe0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057080
push   $0xe8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057084
push   $0xf0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057088
push   $0xf8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805708c
push   $0x100
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057090
push   $0x108
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057094
push   $0x110
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057098
push   $0x118
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805709c
push   $0x120
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570a0
push   $0x128
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570a4
push   $0x130
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570a8
push   $0x138
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570ac
push   $0x140
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570b0
push   $0x148
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570b4
push   $0x150
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570b8
push   $0x158
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570bc
push   $0x160
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570c0
push   $0x168
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570c4
push   $0x170
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570c8
push   $0x178
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570cc
push   $0x180
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570d0
push   $0x188
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570d4
push   $0x190
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570d8
push   $0x198
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570dc
push   $0x1a0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570e0
push   $0x1a8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570e4
push   $0x1b0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570e8
push   $0x1b8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570ec
push   $0x1c0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570f0
push   $0x1c8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570f4
push   $0x1d0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570f8
push   $0x1d8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x80570fc
push   $0x1e0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057100
push   $0x1e8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057104
push   $0x1f0
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057108
push   $0x1f8
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805710c
push   $0x200
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057110
push   $0x208
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057114
push   $0x210
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057118
push   $0x218
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805711c
push   $0x220
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057120
push   $0x228
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057124
push   $0x230
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057128
push   $0x238
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805712c
push   $0x240
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057130
push   $0x248
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057134
push   $0x250
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x8057138
push   $0x258
jmp    8048fb0 <getpwnam@plt-0x10>
jmp    *0x805713c
push   $0x260
jmp    8048fb0 <getpwnam@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
mov    $0x10,%edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xc0,%esp
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%esi
movl   $0xffffffff,0x34(%esp)
movl   $0xffffffff,0x38(%esp)
mov    (%ebx),%eax
movl   $0xffffffff,0x3c(%esp)
movl   $0xffffffff,0x40(%esp)
mov    %eax,(%esp)
call   804b1e0 <calloc@plt+0x1d60>
movl   $0x8052e65,0x4(%esp)
movl   $0x6,(%esp)
call   8049330 <setlocale@plt>
movl   $0x80524a6,0x4(%esp)
movl   $0x8052498,(%esp)
call   80493d0 <bindtextdomain@plt>
movl   $0x8052498,(%esp)
call   80490f0 <textdomain@plt>
movl   $0x804aff0,(%esp)
call   8051910 <fts_children+0x1e20>
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   804a040 <calloc@plt+0xbc0>
movl   $0xffffffff,0x2c(%esp)
movb   $0x0,0x2b(%esp)
movl   $0x0,0x10(%esp)
movl   $0x8052580,0xc(%esp)
movl   $0x80524e2,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   8049220 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804973b <calloc@plt+0x2bb>
cmp    $0x66,%eax
je     8049731 <calloc@plt+0x2b1>
jg     80495e0 <calloc@plt+0x160>
cmp    $0x4c,%eax
je     8049727 <calloc@plt+0x2a7>
xchg   %ax,%ax
jg     8049610 <calloc@plt+0x190>
cmp    $0xffffff7e,%eax
je     804971b <calloc@plt+0x29b>
cmp    $0x48,%eax
je     8049669 <calloc@plt+0x1e9>
cmp    $0xffffff7d,%eax
jne    8049623 <calloc@plt+0x1a3>
mov    0x8057148,%eax
movl   $0x0,0x18(%esp)
movl   $0x80524bf,0x14(%esp)
movl   $0x80524cc,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x8057200,%eax
movl   $0x8052494,0x8(%esp)
movl   $0x80524dc,0x4(%esp)
mov    %eax,(%esp)
call   804d130 <calloc@plt+0x3cb0>
movl   $0x0,(%esp)
call   80491f0 <exit@plt>
nop
cmp    $0x81,%eax
je     8049691 <calloc@plt+0x211>
jg     8049630 <calloc@plt+0x1b0>
cmp    $0x76,%eax
je     804970e <calloc@plt+0x28e>
cmp    $0x80,%eax
je     804965c <calloc@plt+0x1dc>
cmp    $0x68,%eax
jne    8049623 <calloc@plt+0x1a3>
movl   $0x0,0x2c(%esp)
jmp    804952d <calloc@plt+0xad>
nop
cmp    $0x52,%eax
je     8049687 <calloc@plt+0x207>
cmp    $0x63,%eax
je     804964f <calloc@plt+0x1cf>
cmp    $0x50,%eax
je     8049704 <calloc@plt+0x284>
movl   $0x1,(%esp)
call   8049b60 <calloc@plt+0x6e0>
nop
cmp    $0x83,%eax
je     804967d <calloc@plt+0x1fd>
jl     8049673 <calloc@plt+0x1f3>
cmp    $0x84,%eax
jne    8049623 <calloc@plt+0x1a3>
mov    0x8057204,%eax
mov    %eax,0x805721c
jmp    804952d <calloc@plt+0xad>
movl   $0x1,0x48(%esp)
jmp    804952d <calloc@plt+0xad>
movl   $0x1,0x2c(%esp)
jmp    804952d <calloc@plt+0xad>
mov    $0x11,%edi
jmp    804952d <calloc@plt+0xad>
movb   $0x0,0x2b(%esp)
jmp    804952d <calloc@plt+0xad>
movb   $0x1,0x2b(%esp)
jmp    804952d <calloc@plt+0xad>
movb   $0x1,0x4c(%esp)
jmp    804952d <calloc@plt+0xad>
lea    0x60(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x44(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8057204,%eax
mov    %eax,(%esp)
call   804ca70 <calloc@plt+0x35f0>
test   %eax,%eax
mov    %eax,0x24(%esp)
je     804952d <calloc@plt+0xad>
mov    0x8057204,%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
mov    0x24(%esp),%edx
movl   $0x80524b8,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
call   8049190 <error@plt>
jmp    804952d <calloc@plt+0xad>
mov    $0x10,%edi
jmp    804952d <calloc@plt+0xad>
movl   $0x0,0x48(%esp)
jmp    804952d <calloc@plt+0xad>
movl   $0x0,(%esp)
call   8049b60 <calloc@plt+0x6e0>
mov    $0x2,%edi
jmp    804952d <calloc@plt+0xad>
movb   $0x1,0x55(%esp)
jmp    804952d <calloc@plt+0xad>
cmpb   $0x0,0x4c(%esp)
je     804982c <calloc@plt+0x3ac>
cmp    $0x10,%edi
je     80498be <calloc@plt+0x43e>
mov    0x80571e0,%eax
mov    %esi,%ecx
mov    0x805721c,%edx
cmpl   $0x0,0x2c(%esp)
setne  0x54(%esp)
sub    %eax,%ecx
test   %edx,%edx
je     80499d7 <calloc@plt+0x557>
test   %ecx,%ecx
jle    8049836 <calloc@plt+0x3b6>
lea    0x60(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x3,(%esp)
mov    %edx,0x2c(%esp)
call   8049400 <__xstat64@plt>
mov    0x2c(%esp),%edx
test   %eax,%eax
jne    80498d6 <calloc@plt+0x456>
mov    0x78(%esp),%eax
mov    0x7c(%esp),%esi
mov    %eax,(%esp)
mov    %eax,0x34(%esp)
mov    %esi,0x38(%esp)
call   804a0e0 <calloc@plt+0xc60>
mov    %esi,(%esp)
mov    %eax,0x58(%esp)
call   804a080 <calloc@plt+0xc00>
mov    %eax,0x5c(%esp)
cmpb   $0x0,0x4c(%esp)
je     80497da <calloc@plt+0x35a>
cmpb   $0x0,0x2b(%esp)
jne    8049928 <calloc@plt+0x4a8>
lea    0x48(%esp),%eax
or     $0x400,%edi
mov    %eax,0x18(%esp)
mov    0x40(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x80571e0,%eax
lea    (%ebx,%eax,4),%eax
mov    %eax,(%esp)
call   804a140 <calloc@plt+0xcc0>
test   %al,%al
sete   %al
movzbl %al,%eax
mov    %eax,(%esp)
call   80491f0 <exit@plt>
mov    $0x10,%edi
jmp    804974f <calloc@plt+0x2cf>
cmp    %eax,%esi
jg     8049873 <calloc@plt+0x3f3>
movl   $0x5,0x8(%esp)
movl   $0x80524eb,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
jmp    8049623 <calloc@plt+0x1a3>
mov    -0x4(%ebx,%esi,4),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x80524fb,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   80490c0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
jmp    8049623 <calloc@plt+0x1a3>
cmpl   $0x1,0x2c(%esp)
je     8049996 <calloc@plt+0x516>
movl   $0x0,0x2c(%esp)
jmp    804974f <calloc@plt+0x2cf>
mov    %edx,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052434,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x2c(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
call   80492e0 <__errno_location@plt>
mov    0x2c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edx,0xc(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    80497a0 <calloc@plt+0x320>
movl   $0x805720c,(%esp)
call   804c710 <calloc@plt+0x3290>
test   %eax,%eax
mov    %eax,0x50(%esp)
jne    80497da <calloc@plt+0x35a>
movl   $0x8052a8e,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052434,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x2c(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
call   80492e0 <__errno_location@plt>
mov    0x2c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edx,0xc(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    80497da <calloc@plt+0x35a>
movl   $0x5,0x8(%esp)
movl   $0x8052408,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
movl   $0x0,0x2c(%esp)
jmp    804974f <calloc@plt+0x2cf>
sub    $0x1,%ecx
jle    8049836 <calloc@plt+0x3b6>
lea    0x5c(%esp),%edx
mov    %edx,0x10(%esp)
lea    0x58(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x38(%esp),%edx
mov    %edx,0x8(%esp)
lea    0x34(%esp),%edx
mov    %edx,0x4(%esp)
mov    (%ebx,%eax,4),%eax
mov    %eax,(%esp)
call   804ca70 <calloc@plt+0x35f0>
test   %eax,%eax
mov    %eax,%esi
je     8049a45 <calloc@plt+0x5c5>
mov    0x80571e0,%eax
mov    (%ebx,%eax,4),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
mov    %esi,0xc(%esp)
movl   $0x80524b8,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x10(%esp)
call   8049190 <error@plt>
cmpl   $0x0,0x58(%esp)
je     8049a58 <calloc@plt+0x5d8>
addl   $0x1,0x80571e0
jmp    80497c8 <calloc@plt+0x348>
cmpl   $0x0,0x5c(%esp)
je     8049a4c <calloc@plt+0x5cc>
movl   $0x8052e65,0x58(%esp)
jmp    8049a4c <calloc@plt+0x5cc>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8051900
push   $0x8051890
push   %ecx
push   %esi
push   $0x8049490
call   80492a0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80571a3,%eax
sub    $0x80571a0,%eax
cmp    $0x6,%eax
ja     8049ab0 <calloc@plt+0x630>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049aaf <calloc@plt+0x62f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80571a0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80571a0,%eax
sub    $0x80571a0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049ae9 <calloc@plt+0x669>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049ae8 <calloc@plt+0x668>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80571a0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8057208
jne    8049b2c <calloc@plt+0x6ac>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049aa0 <calloc@plt+0x620>
movb   $0x1,0x8057208
leave
repz ret
xchg   %ax,%ax
mov    0x8056f10,%eax
test   %eax,%eax
je     8049b58 <calloc@plt+0x6d8>
mov    $0x0,%eax
test   %eax,%eax
je     8049b58 <calloc@plt+0x6d8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8056f10,(%esp)
call   *%eax
leave
jmp    8049ad0 <calloc@plt+0x650>
nop
jmp    8049ad0 <calloc@plt+0x650>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8057228,%esi
mov    0x30(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049bb4 <calloc@plt+0x734>
movl   $0x8051968,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   80491f0 <exit@plt>
movl   $0x8051990,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80519f4,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051a88,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051b54,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051c3c,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051cb4,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051e08,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051e88,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051f04,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051f4c,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052120,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052150,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052188,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
mov    0x8057228,%esi
movl   $0x5,0x8(%esp)
movl   $0x8052248,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
mov    0x8057228,%eax
mov    %eax,(%esp)
call   804b0c0 <calloc@plt+0x1c40>
movl   $0x5,0x8(%esp)
movl   $0x8052453,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x805246a,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052480,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x8052314,0xc(%esp)
movl   $0x8052494,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
mov    0x8057200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805233c,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8049330 <setlocale@plt>
test   %eax,%eax
je     8049f2b <calloc@plt+0xaab>
movl   $0x3,0x8(%esp)
movl   $0x80524a2,0x4(%esp)
mov    %eax,(%esp)
call   80493e0 <strncmp@plt>
test   %eax,%eax
jne    8049f6f <calloc@plt+0xaef>
mov    0x8057228,%eax
mov    %eax,(%esp)
call   804b0c0 <calloc@plt+0x1c40>
movl   $0x5,0x8(%esp)
movl   $0x80523c4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
jmp    8049bac <calloc@plt+0x72c>
mov    0x8057228,%eax
mov    %eax,(%esp)
call   804b0c0 <calloc@plt+0x1c40>
movl   $0x5,0x8(%esp)
movl   $0x805237c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
jmp    8049f2b <calloc@plt+0xaab>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x10,%esp
test   %eax,%eax
je     804a020 <calloc@plt+0xba0>
test   %edx,%edx
mov    %eax,(%esp)
je     804a027 <calloc@plt+0xba7>
call   8049270 <strlen@plt>
mov    %ebx,(%esp)
mov    %eax,%edi
call   8049270 <strlen@plt>
lea    0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   804d220 <calloc@plt+0x3da0>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   80490d0 <stpcpy@plt>
movb   $0x3a,(%eax)
add    $0x1,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049150 <strcpy@plt>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
je     804a037 <calloc@plt+0xbb7>
mov    %edx,(%esp)
call   804d460 <calloc@plt+0x3fe0>
add    $0x10,%esp
pop    %ebx
pop    %esi
mov    %eax,%edi
mov    %edi,%eax
pop    %edi
ret
xor    %edi,%edi
jmp    804a010 <calloc@plt+0xb90>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movl   $0x2,(%eax)
movl   $0x0,0x8(%eax)
movb   $0x1,0xc(%eax)
movb   $0x0,0x4(%eax)
movb   $0x0,0xd(%eax)
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
repz ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x38,%esp
mov    0x40(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    %ebx,(%esp)
call   8049450 <getgrgid@plt>
test   %eax,%eax
je     804a0c0 <calloc@plt+0xc40>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804d460 <calloc@plt+0x3fe0>
mov    0x2c(%esp),%edx
xor    %gs:0x14,%edx
jne    804a0da <calloc@plt+0xc5a>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x17(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   804b160 <calloc@plt+0x1ce0>
jmp    804a0a2 <calloc@plt+0xc22>
call   80490e0 <__stack_chk_fail@plt>
nop
push   %ebx
sub    $0x38,%esp
mov    0x40(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    %ebx,(%esp)
call   8049000 <getpwuid@plt>
test   %eax,%eax
je     804a120 <calloc@plt+0xca0>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804d460 <calloc@plt+0x3fe0>
mov    0x2c(%esp),%edx
xor    %gs:0x14,%edx
jne    804a13a <calloc@plt+0xcba>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x17(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x4(%esp)
call   804b160 <calloc@plt+0x1ce0>
jmp    804a102 <calloc@plt+0xc82>
call   80490e0 <__stack_chk_fail@plt>
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x10c,%esp
cmpl   $0xffffffff,0x130(%esp)
mov    0x138(%esp),%edi
jne    804a16b <calloc@plt+0xceb>
cmpl   $0xffffffff,0x134(%esp)
je     804a680 <calloc@plt+0x1200>
or     0x124(%esp),%eax
mov    %edi,%ebp
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x120(%esp),%eax
mov    %eax,(%esp)
call   804d4e0 <calloc@plt+0x4060>
mov    %eax,0x18(%esp)
call   80492e0 <__errno_location@plt>
movb   $0x1,0x28(%esp)
mov    %eax,0x38(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804f2a0 <fts_read>
test   %eax,%eax
mov    %eax,%ebx
je     804a808 <calloc@plt+0x1388>
movzwl 0x3c(%ebx),%edx
mov    0x1c(%eax),%eax
mov    0x18(%ebx),%edi
cmp    $0xa,%dx
mov    %eax,0x24(%esp)
ja     804a490 <calloc@plt+0x1010>
movzwl %dx,%eax
jmp    *0x8052a10(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%ebx),%edi
test   %edi,%edi
jne    804a1f2 <calloc@plt+0xd72>
mov    0x10(%ebx),%esi
test   %esi,%esi
je     804aa00 <calloc@plt+0x1580>
cmpb   $0x0,0xd(%ebp)
je     804a9d8 <calloc@plt+0x1558>
movb   $0x0,0x1c(%esp)
xor    %esi,%esi
xor    %edx,%edx
movb   $0x1,0x28(%esp)
movb   $0x0,0x20(%esp)
mov    0x0(%ebp),%eax
cmp    $0x2,%eax
je     804a389 <calloc@plt+0xf09>
cmpb   $0x0,0x20(%esp)
je     804a268 <calloc@plt+0xde8>
test   %dl,%dl
je     804a268 <calloc@plt+0xde8>
movzbl 0x28(%esp),%ecx
test   %cl,%cl
je     804a268 <calloc@plt+0xde8>
cmpl   $0xffffffff,0x128(%esp)
je     804a24a <calloc@plt+0xdca>
mov    0x18(%esi),%edi
mov    $0x2,%ecx
cmp    %edi,0x128(%esp)
jne    804a288 <calloc@plt+0xe08>
cmpl   $0xffffffff,0x12c(%esp)
je     804a268 <calloc@plt+0xde8>
mov    0x1c(%esi),%edi
mov    $0x2,%ecx
cmp    %edi,0x12c(%esp)
jne    804a288 <calloc@plt+0xe08>
lea    0x0(%esi),%esi
test   %eax,%eax
jne    804a389 <calloc@plt+0xf09>
test   %dl,%dl
mov    $0x3,%ecx
je     804a288 <calloc@plt+0xe08>
movzbl 0x28(%esp),%eax
cmp    $0x1,%al
sbb    %ecx,%ecx
and    $0xfffffffd,%ecx
add    $0x4,%ecx
test   %esi,%esi
je     804a930 <calloc@plt+0x14b0>
mov    0x18(%esi),%eax
mov    %ecx,0x2c(%esp)
mov    %eax,(%esp)
call   804a0e0 <calloc@plt+0xc60>
mov    %eax,0x20(%esp)
mov    0x1c(%esi),%eax
mov    %eax,(%esp)
call   804a080 <calloc@plt+0xc00>
mov    0x2c(%esp),%ecx
mov    %eax,0x28(%esp)
cmp    $0x1,%ecx
mov    0x14(%ebp),%edi
mov    0x10(%ebp),%esi
je     804a8b8 <calloc@plt+0x1438>
mov    %edi,%edx
mov    %esi,%eax
mov    %ecx,0x30(%esp)
call   8049fc0 <calloc@plt+0xb40>
mov    0x28(%esp),%edx
mov    %eax,0x34(%esp)
xor    %eax,%eax
test   %edi,%edi
cmove  %eax,%edx
test   %esi,%esi
cmovne 0x20(%esp),%eax
call   8049fc0 <calloc@plt+0xb40>
mov    0x30(%esp),%ecx
cmp    $0x3,%ecx
mov    %eax,0x2c(%esp)
je     804a880 <calloc@plt+0x1400>
cmp    $0x4,%ecx
movl   $0x5,0x8(%esp)
je     804a798 <calloc@plt+0x1318>
test   %esi,%esi
je     804ab40 <calloc@plt+0x16c0>
movl   $0x80528d8,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
mov    0x34(%esp),%edi
mov    0x2c(%esp),%ecx
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049300 <__printf_chk@plt>
mov    0x2c(%esp),%ecx
mov    %ecx,(%esp)
call   8049050 <free@plt>
mov    %edi,(%esp)
call   8049050 <free@plt>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
movzbl 0x1c(%esp),%eax
cmpb   $0x0,0x4(%ebp)
mov    %al,0x28(%esp)
jne    804a1a1 <calloc@plt+0xd21>
mov    0x18(%esp),%eax
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804fab0 <fts_set>
jmp    804a1a1 <calloc@plt+0xd21>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0xd(%ebp)
jne    804a1fc <calloc@plt+0xd7c>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x80524bc,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    804a1fc <calloc@plt+0xd7c>
lea    0x0(%esi),%esi
cmpb   $0x0,0x4(%ebp)
jne    804a490 <calloc@plt+0x1010>
lea    0x0(%esi),%esi
jmp    804a1a1 <calloc@plt+0xd21>
lea    0x0(%esi),%esi
cmpb   $0x0,0xd(%ebp)
jne    804a1fc <calloc@plt+0xd7c>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052681,0x4(%esp)
mov    %eax,%esi
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    804a1fc <calloc@plt+0xd7c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804d550 <calloc@plt+0x40d0>
mov    0x1c(%esp),%edx
test   %al,%al
jne    804aa88 <calloc@plt+0x1608>
cmpl   $0xffffffff,0x130(%esp)
sete   %al
cmpl   $0xffffffff,0x134(%esp)
mov    %al,0x2c(%esp)
sete   %cl
and    %cl,%al
mov    %cl,0x30(%esp)
mov    %al,0x1c(%esp)
je     804a4c0 <calloc@plt+0x1040>
cmpl   $0x2,0x0(%ebp)
je     804a948 <calloc@plt+0x14c8>
cmpb   $0x0,0xc(%ebp)
lea    0x44(%ebx),%esi
je     804a4dc <calloc@plt+0x105c>
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     804aad8 <calloc@plt+0x1658>
cmpb   $0x0,0x2c(%esp)
jne    804a7e0 <calloc@plt+0x1360>
mov    0x18(%esi),%eax
cmp    %eax,0x130(%esp)
movb   $0x0,0x20(%esp)
je     804a7e0 <calloc@plt+0x1360>
lea    -0x1(%edx),%eax
cmp    $0x1,%ax
jbe    804a6a0 <calloc@plt+0x1220>
and    $0xfffffffd,%edx
cmp    $0x4,%dx
je     804a6a0 <calloc@plt+0x1220>
cmpb   $0x0,0x20(%esp)
je     804afb9 <calloc@plt+0x1b39>
cmpb   $0x0,0xc(%ebp)
jne    804a730 <calloc@plt+0x12b0>
mov    0x12c(%esp),%eax
movl   $0x100,0x10(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    0x1c(%eax),%eax
mov    %eax,(%esp)
call   8049380 <fchownat@plt>
test   %eax,%eax
jne    804a7c0 <calloc@plt+0x1340>
movzbl 0x28(%esp),%eax
movb   $0x1,0x28(%esp)
mov    %al,0x1c(%esp)
movzbl 0x20(%esp),%edx
jmp    804a20f <calloc@plt+0xd8f>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x4(%ebp)
je     804a490 <calloc@plt+0x1010>
mov    0x8(%ebp),%eax
test   %eax,%eax
je     804a1a1 <calloc@plt+0xd21>
mov    0x9c(%ebx),%edx
mov    0xa0(%ebx),%ecx
xor    0x4(%eax),%ecx
xor    (%eax),%edx
or     %edx,%ecx
jne    804a1a1 <calloc@plt+0xd21>
mov    0x44(%ebx),%edx
mov    0x48(%ebx),%ecx
xor    0xc(%eax),%ecx
xor    0x8(%eax),%edx
or     %edx,%ecx
jne    804a1a1 <calloc@plt+0xd21>
mov    0x24(%esp),%eax
cmpb   $0x2f,(%eax)
jne    804ae4f <calloc@plt+0x19cf>
cmpb   $0x0,0x1(%eax)
jne    804ae4f <calloc@plt+0x19cf>
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052744,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
movl   $0x5,0x8(%esp)
movl   $0x80527b0,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
mov    0x18(%esp),%edi
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804fab0 <fts_set>
mov    %edi,(%esp)
call   804f2a0 <fts_read>
movb   $0x0,0x28(%esp)
jmp    804a1a1 <calloc@plt+0xd21>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0xc(%edi)
jne    804a16b <calloc@plt+0xceb>
xor    %eax,%eax
cmpl   $0x2,(%edi)
sete   %al
shl    $0x3,%eax
jmp    804a16b <calloc@plt+0xceb>
lea    0x0(%esi),%esi
mov    0x8(%ebp),%eax
test   %eax,%eax
je     804a516 <calloc@plt+0x1096>
mov    0x58(%esi),%edx
mov    0x5c(%esi),%ecx
xor    0x4(%eax),%ecx
xor    (%eax),%edx
or     %edx,%ecx
jne    804a516 <calloc@plt+0x1096>
mov    (%esi),%edx
mov    0x4(%esi),%ecx
xor    0xc(%eax),%ecx
xor    0x8(%eax),%edx
or     %edx,%ecx
jne    804a516 <calloc@plt+0x1096>
mov    0x24(%esp),%eax
cmpb   $0x2f,(%eax)
jne    804ad20 <calloc@plt+0x18a0>
cmpb   $0x0,0x1(%eax)
jne    804ad20 <calloc@plt+0x18a0>
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052744,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   80490c0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
jmp    804ad88 <calloc@plt+0x1908>
nop
mov    0x18(%esp),%eax
cmpb   $0x0,0x1c(%esp)
mov    0x1c(%eax),%edx
je     804a900 <calloc@plt+0x1480>
mov    0x12c(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x8(%esp)
call   8049380 <fchownat@plt>
test   %eax,%eax
je     804ad08 <calloc@plt+0x1888>
movzbl 0xd(%ebp),%eax
test   %al,%al
mov    %al,0x1c(%esp)
je     804a970 <calloc@plt+0x14f0>
movb   $0x0,0x1c(%esp)
xor    %edx,%edx
movb   $0x1,0x28(%esp)
jmp    804a20f <calloc@plt+0xd8f>
lea    0x0(%esi),%esi
test   %esi,%esi
je     804ab18 <calloc@plt+0x1698>
movl   $0x80529f0,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
cmpl   $0x5f,(%eax)
jne    804a774 <calloc@plt+0x12f4>
movzbl 0x28(%esp),%eax
movb   $0x0,0x28(%esp)
mov    %al,0x1c(%esp)
jmp    804a572 <calloc@plt+0x10f2>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x30(%esp)
movb   $0x1,0x20(%esp)
jne    804a4fc <calloc@plt+0x107c>
mov    0x1c(%esi),%eax
cmp    %eax,0x134(%esp)
sete   0x20(%esp)
jmp    804a4fc <calloc@plt+0x107c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
mov    %ebp,%edi
mov    (%eax),%ebp
test   %ebp,%ebp
je     804a823 <calloc@plt+0x13a3>
cmpb   $0x0,0xd(%edi)
movb   $0x0,0x28(%esp)
je     804aa48 <calloc@plt+0x15c8>
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804f110 <fts_close>
test   %eax,%eax
je     804a86e <calloc@plt+0x13ee>
movl   $0x5,0x8(%esp)
movl   $0x8052732,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
movb   $0x0,0x28(%esp)
movzbl 0x28(%esp),%eax
add    $0x10c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x2c(%esp),%eax
movl   $0x5,0x8(%esp)
test   %eax,%eax
je     804ac80 <calloc@plt+0x1800>
test   %esi,%esi
je     804ab68 <calloc@plt+0x16e8>
movl   $0x8052924,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
nop
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x80528a0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
jmp    804a371 <calloc@plt+0xef1>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%esi),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804ab90 <calloc@plt+0x1710>
cmp    $0x4000,%eax
jne    804a742 <calloc@plt+0x12c2>
movl   $0x10900,0x34(%esp)
jmp    804ab98 <calloc@plt+0x1718>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x20(%esp)
movl   $0x0,0x28(%esp)
jmp    804a2b6 <calloc@plt+0xe36>
lea    0x0(%esi),%esi
mov    0x8(%ebp),%ecx
test   %ecx,%ecx
jne    804a4c0 <calloc@plt+0x1040>
cmpb   $0x0,0xc(%ebp)
lea    0x44(%ebx),%esi
jne    804a4c9 <calloc@plt+0x1049>
movb   $0x1,0x20(%esp)
jmp    804a4fc <calloc@plt+0x107c>
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
cmpl   $0xffffffff,0x128(%esp)
movl   $0x5,0x8(%esp)
mov    %eax,%edi
je     804aa28 <calloc@plt+0x15a8>
movl   $0x80526b0,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %edi,0xc(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
xor    %edx,%edx
movb   $0x1,0x28(%esp)
jmp    804a20f <calloc@plt+0xd8f>
lea    0x0(%esi),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x8052670,0x4(%esp)
mov    %eax,%esi
jmp    804a440 <calloc@plt+0xfc0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
movl   $0x1,0x10(%ebx)
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804fab0 <fts_set>
jmp    804a1a1 <calloc@plt+0xd21>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80526c9,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
jmp    804a9a8 <calloc@plt+0x1528>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
movl   $0x8052660,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    804a823 <calloc@plt+0x13a3>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x80527e4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   80490c0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
movb   $0x0,0x28(%esp)
jmp    804a1a1 <calloc@plt+0xd21>
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %edi,0x8(%esp)
mov    0x1c(%eax),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049100 <__fxstatat64@plt>
test   %eax,%eax
jne    804ac50 <calloc@plt+0x17d0>
movzwl 0x3c(%ebx),%edx
lea    0x40(%esp),%esi
jmp    804a4dc <calloc@plt+0x105c>
test   %edi,%edi
je     804aed7 <calloc@plt+0x1a57>
movl   $0x80526fc,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
je     804aebc <calloc@plt+0x1a3c>
movl   $0x8052900,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
je     804aef2 <calloc@plt+0x1a72>
movl   $0x8052954,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x900,0x34(%esp)
mov    0x34(%esp),%eax
mov    %edx,(%esp)
mov    %edi,0x4(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x8(%esp)
call   8049070 <__openat64_2@plt>
mov    0x3c(%esp),%edx
test   %eax,%eax
mov    %eax,%ecx
js     804ac24 <calloc@plt+0x17a4>
lea    0xa0(%esp),%eax
mov    %ecx,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x34(%esp)
call   8049130 <__fxstat64@plt>
mov    0x34(%esp),%ecx
test   %eax,%eax
jne    804adc6 <calloc@plt+0x1946>
mov    0x58(%esi),%eax
mov    0x5c(%esi),%edx
xor    0xfc(%esp),%edx
xor    0xf8(%esp),%eax
or     %eax,%edx
je     804acb3 <calloc@plt+0x1833>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   8049430 <close@plt>
mov    0x38(%esp),%eax
movb   $0x1,0x28(%esp)
movb   $0x0,0x20(%esp)
mov    %edi,(%eax)
jmp    804a572 <calloc@plt+0x10f2>
mov    0x38(%esp),%eax
cmpl   $0xd,(%eax)
jne    804a774 <calloc@plt+0x12f4>
mov    0x10(%esi),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804af0d <calloc@plt+0x1a8d>
mov    0x18(%esp),%eax
mov    0x1c(%eax),%edx
jmp    804a742 <calloc@plt+0x12c2>
cmpb   $0x0,0xd(%ebp)
je     804addf <calloc@plt+0x195f>
xor    %edx,%edx
lea    0x40(%esp),%esi
movzbl 0x28(%esp),%eax
movb   $0x0,0x20(%esp)
movb   $0x1,0x28(%esp)
and    %edx,%eax
mov    %al,0x1c(%esp)
jmp    804a20f <calloc@plt+0xd8f>
lea    0x0(%esi),%esi
test   %esi,%esi
je     804ae2c <calloc@plt+0x19ac>
movl   $0x80529a4,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
mov    0x34(%esp),%eax
movl   $0x0,0x34(%esp)
mov    %eax,0x2c(%esp)
jmp    804a32d <calloc@plt+0xead>
mov    (%esi),%eax
mov    0x4(%esi),%edx
xor    0xa4(%esp),%edx
xor    0xa0(%esp),%eax
or     %eax,%edx
jne    804ac01 <calloc@plt+0x1781>
cmpb   $0x0,0x2c(%esp)
jne    804af5b <calloc@plt+0x1adb>
mov    0xb8(%esp),%eax
cmp    %eax,0x130(%esp)
je     804af5b <calloc@plt+0x1adb>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   8049430 <close@plt>
mov    0x38(%esp),%eax
mov    %edi,(%eax)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x28(%esp),%eax
movzbl 0x20(%esp),%edx
movb   $0x1,0x28(%esp)
mov    %al,0x1c(%esp)
jmp    804a20f <calloc@plt+0xd8f>
movl   $0x8052a8e,0x4(%esp)
movl   $0x1,(%esp)
call   804c6d0 <calloc@plt+0x3250>
movl   $0x0,(%esp)
mov    %eax,%esi
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
call   804c6d0 <calloc@plt+0x3250>
movl   $0x5,0x8(%esp)
movl   $0x8052774,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   80490c0 <dcgettext@plt>
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
movl   $0x5,0x8(%esp)
movl   $0x80527b0,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
movb   $0x0,0x28(%esp)
jmp    804a1a1 <calloc@plt+0xd21>
mov    0x38(%esp),%eax
mov    (%eax),%edi
mov    %ecx,(%esp)
call   8049430 <close@plt>
mov    0x38(%esp),%eax
mov    %edi,(%eax)
jmp    804a774 <calloc@plt+0x12f4>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804c6f0 <calloc@plt+0x3270>
movl   $0x5,0x8(%esp)
movl   $0x805269a,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    804ac5a <calloc@plt+0x17da>
test   %edi,%edi
je     804af40 <calloc@plt+0x1ac0>
movl   $0x80529cc,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804ac9e <calloc@plt+0x181e>
movl   $0x8052a8e,0x4(%esp)
movl   $0x1,(%esp)
call   804c6d0 <calloc@plt+0x3250>
movl   $0x0,(%esp)
mov    %eax,%edi
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
call   804c6d0 <calloc@plt+0x3250>
movl   $0x5,0x8(%esp)
movl   $0x8052774,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   80490c0 <dcgettext@plt>
mov    %edi,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8049190 <error@plt>
jmp    804a61b <calloc@plt+0x119b>
movl   $0x80526de,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
movl   $0x8052718,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
movl   $0x8052980,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804a32d <calloc@plt+0xead>
mov    0x34(%esp),%ecx
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
or     $0x1,%ecx
mov    %ecx,0x8(%esp)
call   8049070 <__openat64_2@plt>
test   %eax,%eax
mov    %eax,%ecx
jns    804abba <calloc@plt+0x173a>
mov    0x38(%esp),%eax
cmpl   $0xd,(%eax)
jne    804a774 <calloc@plt+0x12f4>
jmp    804ac44 <calloc@plt+0x17c4>
movl   $0x8052980,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
jmp    804ac9e <calloc@plt+0x181e>
cmpb   $0x0,0x30(%esp)
jne    804af76 <calloc@plt+0x1af6>
mov    0xbc(%esp),%eax
cmp    %eax,0x134(%esp)
jne    804aced <calloc@plt+0x186d>
mov    0x12c(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x1c(%esp)
mov    %eax,0x8(%esp)
mov    0x128(%esp),%eax
mov    %eax,0x4(%esp)
call   8049290 <fchown@plt>
mov    0x1c(%esp),%ecx
test   %eax,%eax
jne    804adc6 <calloc@plt+0x1946>
mov    %ecx,(%esp)
call   8049430 <close@plt>
test   %eax,%eax
jne    804a774 <calloc@plt+0x12f4>
jmp    804ad08 <calloc@plt+0x1888>
mov    $0x1,%edx
xchg   %ax,%ax
jmp    804ac60 <calloc@plt+0x17e0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8057224
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8057220
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8057200,%eax
mov    %eax,(%esp)
call   804fcf0 <fts_children+0x200>
test   %eax,%eax
je     804b019 <calloc@plt+0x1b99>
cmpb   $0x0,0x8057220
je     804b030 <calloc@plt+0x1bb0>
call   80492e0 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804b030 <calloc@plt+0x1bb0>
mov    0x80571a4,%eax
mov    %eax,(%esp)
call   804fcf0 <fts_children+0x200>
test   %eax,%eax
jne    804b088 <calloc@plt+0x1c08>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x8052a41,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8057224,%eax
test   %eax,%eax
je     804b095 <calloc@plt+0x1c15>
mov    %eax,(%esp)
call   804c4c0 <calloc@plt+0x3040>
mov    %eax,%esi
call   80492e0 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x80524b8,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
mov    0x805714c,%eax
mov    %eax,(%esp)
call   8049020 <_exit@plt>
call   80492e0 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x80524bc,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <error@plt>
jmp    804b088 <calloc@plt+0x1c08>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804b0db <calloc@plt+0x1c5b>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804b0d0 <calloc@plt+0x1c50>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804b109 <calloc@plt+0x1c89>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804b109 <calloc@plt+0x1c89>
cmp    $0x2f,%cl
je     804b110 <calloc@plt+0x1c90>
test   %bl,%bl
je     804b0e8 <calloc@plt+0x1c68>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804b0f2 <calloc@plt+0x1c72>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804b0e8 <calloc@plt+0x1c68>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049270 <strlen@plt>
cmp    $0x1,%eax
jbe    804b13f <calloc@plt+0x1cbf>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804b148 <calloc@plt+0x1cc8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804b135 <calloc@plt+0x1cb5>
nop
jmp    804b13f <calloc@plt+0x1cbf>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8051730 <fts_children+0x1c40>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8051600 <fts_children+0x1b10>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    804b180 <calloc@plt+0x1d00>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804b263 <calloc@plt+0x1de3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049340 <strrchr@plt>
test   %eax,%eax
je     804b24f <calloc@plt+0x1dcf>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804b24f <calloc@plt+0x1dcf>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8052a88,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804b24f <calloc@plt+0x1dcf>
mov    $0x3,%ecx
mov    $0x8052a90,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804b24f <calloc@plt+0x1dcf>
lea    0x4(%eax),%ebx
mov    %ebx,0x80571a0
mov    %ebx,0x8057228
mov    %ebx,0x80571c0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80571a4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052a50,(%esp)
mov    %eax,0xc(%esp)
call   8049120 <fwrite@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804b2b1 <calloc@plt+0x1e31>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804b2f0 <calloc@plt+0x1e70>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8050ee0 <fts_children+0x13f0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804b358 <calloc@plt+0x1ed8>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804b340 <calloc@plt+0x1ec0>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x2d,0x3(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x38,0x4(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x0,0x5(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x60,(%esi)
mov    $0x8052aa3,%eax
mov    $0x8052a94,%edx
cmovne %edx,%eax
jmp    804b2e8 <calloc@plt+0x1e68>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8052a9d,%eax
cmp    $0x7,%edi
mov    $0x8052a9b,%edx
cmovne %edx,%eax
jmp    804b2e8 <calloc@plt+0x1e68>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804b340 <calloc@plt+0x1ec0>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x31,0x2(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x38,0x3(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x30,0x4(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x33,0x5(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x30,0x6(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x0,0x7(%eax)
jne    804b340 <calloc@plt+0x1ec0>
cmpb   $0x60,(%esi)
mov    $0x8052a9f,%eax
mov    $0x8052a98,%edx
cmovne %edx,%eax
jmp    804b2e8 <calloc@plt+0x1e68>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049140 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804bc88 <calloc@plt+0x2808>
mov    0x94(%esp),%eax
jmp    *0x8052ae0(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804ba90 <calloc@plt+0x2610>
test   %al,%al
je     804baa3 <calloc@plt+0x2623>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804ba78 <calloc@plt+0x25f8>
cmpb   $0x0,0x58(%esp)
je     804ba78 <calloc@plt+0x25f8>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804ba78 <calloc@plt+0x25f8>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   80490b0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804bb10 <calloc@plt+0x2690>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804b828 <calloc@plt+0x23a8>
movzbl %bl,%eax
jmp    *0x8052b04(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804b668 <calloc@plt+0x21e8>
cmpl   $0x3,0x94(%esp)
jne    804b5c8 <calloc@plt+0x2148>
testb  $0x4,0x98(%esp)
je     804b5c8 <calloc@plt+0x2148>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804b5c8 <calloc@plt+0x2148>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804b5c8 <calloc@plt+0x2148>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804b5c8 <calloc@plt+0x2148>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804b5c8 <calloc@plt+0x2148>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmp    %edi,%ebp
jae    804b58e <calloc@plt+0x210e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b59e <calloc@plt+0x211e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b5ae <calloc@plt+0x212e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804b5be <calloc@plt+0x213e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804b5d6 <calloc@plt+0x2156>
cmpb   $0x0,0x5a(%esp)
jne    804b5fb <calloc@plt+0x217b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804b5fb <calloc@plt+0x217b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804b602 <calloc@plt+0x2182>
cmpb   $0x0,0x24(%esp)
je     804b618 <calloc@plt+0x2198>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmp    %edi,%ebp
jae    804b615 <calloc@plt+0x2195>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804b626 <calloc@plt+0x21a6>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804b468 <calloc@plt+0x1fe8>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804bc78 <calloc@plt+0x27f8>
test   %al,%al
jne    804b5c8 <calloc@plt+0x2148>
test   %esi,%esi
jne    804b5c8 <calloc@plt+0x2148>
cmpl   $0x2,0x94(%esp)
jne    804b5c8 <calloc@plt+0x2148>
nop
cmpb   $0x0,0x2f(%esp)
je     804b5c8 <calloc@plt+0x2148>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b3b0 <calloc@plt+0x1f30>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804bda2 <calloc@plt+0x2922>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804bceb <calloc@plt+0x286b>
cmpb   $0x0,0x58(%esp)
je     804b5c8 <calloc@plt+0x2148>
mov    %eax,%ebx
jmp    804b602 <calloc@plt+0x2182>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804b6f3 <calloc@plt+0x2273>
nop
mov    $0x66,%eax
jmp    804b6f3 <calloc@plt+0x2273>
nop
mov    $0x76,%eax
jmp    804b6f3 <calloc@plt+0x2273>
nop
mov    $0x6e,%eax
jmp    804b6e5 <calloc@plt+0x2265>
nop
mov    $0x74,%eax
jmp    804b6e5 <calloc@plt+0x2265>
nop
cmpb   $0x0,0x58(%esp)
je     804bc60 <calloc@plt+0x27e0>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmp    %edi,%ebp
jae    804b752 <calloc@plt+0x22d2>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804b798 <calloc@plt+0x2318>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804b798 <calloc@plt+0x2318>
cmp    %eax,%edi
ja     804bd00 <calloc@plt+0x2880>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b78e <calloc@plt+0x230e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804b5d6 <calloc@plt+0x2156>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804b6f3 <calloc@plt+0x2273>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804b7ce <calloc@plt+0x234e>
cmpb   $0x0,0x2f(%esp)
je     804b7ce <calloc@plt+0x234e>
test   %dl,%dl
jne    804b618 <calloc@plt+0x2198>
mov    %ebx,%eax
jmp    804b6e5 <calloc@plt+0x2265>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804b5c8 <calloc@plt+0x2148>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmp    %edi,%ebp
jae    804b7fd <calloc@plt+0x237d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b80d <calloc@plt+0x238d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b81d <calloc@plt+0x239d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804b5c8 <calloc@plt+0x2148>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804bb20 <calloc@plt+0x26a0>
call   8049470 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804b5c8 <calloc@plt+0x2148>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804b8d4 <calloc@plt+0x2454>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmp    %edi,%ebp
jae    804b883 <calloc@plt+0x2403>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b896 <calloc@plt+0x2416>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b8ac <calloc@plt+0x242c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804b61b <calloc@plt+0x219b>
cmp    %edi,%ebp
jae    804b8c9 <calloc@plt+0x2449>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804b870 <calloc@plt+0x23f0>
cmpb   $0x0,0x24(%esp)
je     804b8b5 <calloc@plt+0x2435>
cmp    %edi,%ebp
jae    804b8e7 <calloc@plt+0x2467>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804b8b5 <calloc@plt+0x2435>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bda7 <calloc@plt+0x2927>
test   %edi,%edi
je     804bcad <calloc@plt+0x282d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a9d,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804b448 <calloc@plt+0x1fc8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a9d,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804b448 <calloc@plt+0x1fc8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
lea    0x0(%esi,%eiz,1),%esi
je     804b9bc <calloc@plt+0x253c>
mov    0x94(%esp),%edx
mov    $0x8052aa7,%eax
call   804b2c0 <calloc@plt+0x1e40>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x8052a9b,%eax
call   804b2c0 <calloc@plt+0x1e40>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804b9ea <calloc@plt+0x256a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b9ea <calloc@plt+0x256a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804b9df <calloc@plt+0x255f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b9d8 <calloc@plt+0x2558>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049270 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a9b,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804b448 <calloc@plt+0x1fc8>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bdc3 <calloc@plt+0x2943>
test   %edi,%edi
je     804bccc <calloc@plt+0x284c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052a9b,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804b448 <calloc@plt+0x1fc8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804b500 <calloc@plt+0x2080>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804b488 <calloc@plt+0x2008>
test   %ebp,%ebp
jne    804babc <calloc@plt+0x263c>
cmpl   $0x2,0x94(%esp)
jne    804babc <calloc@plt+0x263c>
cmpb   $0x0,0x2f(%esp)
jne    804b678 <calloc@plt+0x21f8>
cmpb   $0x0,0x2f(%esp)
jne    804baf2 <calloc@plt+0x2672>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804baf2 <calloc@plt+0x2672>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804baf2 <calloc@plt+0x2672>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804bae7 <calloc@plt+0x2667>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804bae0 <calloc@plt+0x2660>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804b6c2 <calloc@plt+0x2242>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804b6c2 <calloc@plt+0x2242>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804b500 <calloc@plt+0x2080>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804bc8d <calloc@plt+0x280d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049170 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804bd0d <calloc@plt+0x288d>
cmp    $0xffffffff,%eax
je     804bd28 <calloc@plt+0x28a8>
cmp    $0xfffffffe,%eax
je     804bd43 <calloc@plt+0x28c3>
cmpb   $0x0,0x2f(%esp)
je     804bbef <calloc@plt+0x276f>
cmpl   $0x2,0x94(%esp)
jne    804bbef <calloc@plt+0x276f>
cmp    $0x1,%eax
je     804bbef <calloc@plt+0x276f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804bbe8 <calloc@plt+0x2768>
movzbl %al,%eax
jmp    *0x8052d00(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804bbd0 <calloc@plt+0x2750>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049110 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8049080 <mbsinit@plt>
test   %eax,%eax
je     804bb61 <calloc@plt+0x26e1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804b853 <calloc@plt+0x23d3>
and    0x58(%esp),%dl
jmp    804b85d <calloc@plt+0x23dd>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804b678 <calloc@plt+0x21f8>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804b5c8 <calloc@plt+0x2148>
add    $0x1,%esi
jmp    804b468 <calloc@plt+0x1fe8>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804b649 <calloc@plt+0x21c9>
call   80493f0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049270 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804bb3e <calloc@plt+0x26be>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a9d,0x3c(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a9b,0x3c(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
cmpb   $0x0,0x2f(%esp)
je     804b6f3 <calloc@plt+0x2273>
jmp    804b678 <calloc@plt+0x21f8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804b77e <calloc@plt+0x22fe>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bc35 <calloc@plt+0x27b5>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bc35 <calloc@plt+0x27b5>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804bd98 <calloc@plt+0x2918>
cmpb   $0x0,(%eax)
je     804bd98 <calloc@plt+0x2918>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804bd86 <calloc@plt+0x2906>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804bd90 <calloc@plt+0x2910>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804bd80 <calloc@plt+0x2900>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804bc35 <calloc@plt+0x27b5>
call   80490e0 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a9d,0x3c(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052a9b,0x3c(%esp)
jmp    804b448 <calloc@plt+0x1fc8>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   80492e0 <__errno_location@plt>
test   %edi,%edi
mov    0x8057190,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804bf6c <calloc@plt+0x2aec>
cmp    0x805719c,%edi
jb     804be78 <calloc@plt+0x29f8>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804bf71 <calloc@plt+0x2af1>
cmp    $0x8057194,%esi
lea    0x0(,%ebp,8),%eax
je     804bf40 <calloc@plt+0x2ac0>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804d290 <calloc@plt+0x3e10>
mov    %eax,%esi
mov    %eax,0x8057190
mov    0x805719c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   80492c0 <memset@plt>
mov    %ebp,0x805719c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b3b0 <calloc@plt+0x1f30>
cmp    %eax,%ebp
ja     804bf27 <calloc@plt+0x2aa7>
lea    0x1(%eax),%ebp
cmp    $0x8057240,%esi
mov    %ebp,(%edi)
je     804bee2 <calloc@plt+0x2a62>
mov    %esi,(%esp)
call   8049050 <free@plt>
mov    %ebp,(%esp)
call   804d220 <calloc@plt+0x3da0>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b3b0 <calloc@plt+0x1f30>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804d290 <calloc@plt+0x3e10>
mov    0x8057198,%edx
mov    %eax,%esi
mov    %eax,0x8057190
mov    0x8057194,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804be4f <calloc@plt+0x29cf>
call   80493f0 <abort@plt>
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   80492e0 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8057340,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804d430 <calloc@plt+0x3fb0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8057340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804bfe0 <calloc@plt+0x2b60>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8057340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8057340,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8057340,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8057340,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804c093 <calloc@plt+0x2c13>
test   %ecx,%ecx
je     804c093 <calloc@plt+0x2c13>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   80493f0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8057340,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80492e0 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b3b0 <calloc@plt+0x1f30>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8057340,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   80492e0 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804b3b0 <calloc@plt+0x1f30>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804d220 <calloc@plt+0x3da0>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804b3b0 <calloc@plt+0x1f30>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804c1c8 <calloc@plt+0x2d48>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c100 <calloc@plt+0x2c80>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x805719c,%edi
mov    0x8057190,%esi
cmp    $0x1,%edi
jbe    804c243 <calloc@plt+0x2dc3>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8049050 <free@plt>
cmp    %edi,%ebx
jne    804c230 <calloc@plt+0x2db0>
mov    0x4(%esi),%eax
cmp    $0x8057240,%eax
je     804c269 <calloc@plt+0x2de9>
mov    %eax,(%esp)
call   8049050 <free@plt>
movl   $0x100,0x8057194
00
movl   $0x8057240,0x8057198
08
cmp    $0x8057194,%esi
je     804c283 <calloc@plt+0x2e03>
mov    %esi,(%esp)
call   8049050 <free@plt>
movl   $0x8057194,0x8057190
08
movl   $0x1,0x805719c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8057340,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8057340,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8057340,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8057340,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b290 <calloc@plt+0x1e10>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bde0 <calloc@plt+0x2960>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b290 <calloc@plt+0x1e10>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bde0 <calloc@plt+0x2960>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c320 <calloc@plt+0x2ea0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c350 <calloc@plt+0x2ed0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8057340,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8057344,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8057348,%eax
mov    %eax,0x18(%esp)
mov    0x805734c,%eax
mov    %eax,0x1c(%esp)
mov    0x8057350,%eax
mov    %eax,0x20(%esp)
mov    0x8057354,%eax
mov    %eax,0x24(%esp)
mov    0x8057358,%eax
mov    %eax,0x28(%esp)
mov    0x805735c,%eax
mov    %eax,0x2c(%esp)
mov    0x8057360,%eax
mov    %eax,0x30(%esp)
mov    0x8057364,%eax
mov    %eax,0x34(%esp)
mov    0x8057368,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805736c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804bde0 <calloc@plt+0x2960>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c3e0 <calloc@plt+0x2f60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804c3e0 <calloc@plt+0x2f60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c3e0 <calloc@plt+0x2f60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8057340,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8057344,%eax
mov    %eax,0x14(%esp)
mov    0x8057348,%eax
mov    %eax,0x18(%esp)
mov    0x805734c,%eax
mov    %eax,0x1c(%esp)
mov    0x8057350,%eax
mov    %eax,0x20(%esp)
mov    0x8057354,%eax
mov    %eax,0x24(%esp)
mov    0x8057358,%eax
mov    %eax,0x28(%esp)
mov    0x805735c,%eax
mov    %eax,0x2c(%esp)
mov    0x8057360,%eax
mov    %eax,0x30(%esp)
mov    0x8057364,%eax
mov    %eax,0x34(%esp)
mov    0x8057368,%eax
mov    %eax,0x38(%esp)
mov    0x805736c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804c060 <calloc@plt+0x2be0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bde0 <calloc@plt+0x2960>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c520 <calloc@plt+0x30a0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c520 <calloc@plt+0x30a0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c520 <calloc@plt+0x30a0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8057160,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8057160,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8057160,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8057160,0x4(%esp)
jmp    804bde0 <calloc@plt+0x2960>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x78,%esp
lea    0x10(%esp),%eax
mov    0x80(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x8052a8e,0x4(%esp)
movl   $0x3,(%esp)
call   8049410 <__lxstat64@plt>
test   %eax,%eax
jne    804c760 <calloc@plt+0x32e0>
mov    0x68(%esp),%eax
mov    0x6c(%esp),%edx
mov    %eax,(%ebx)
mov    0x10(%esp),%eax
mov    %edx,0x4(%ebx)
mov    0x14(%esp),%edx
mov    %eax,0x8(%ebx)
mov    %ebx,%eax
mov    %edx,0xc(%ebx)
add    $0x78,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
add    $0x78,%esp
xor    %eax,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x5c,%esp
mov    0x70(%esp),%ecx
mov    %gs:0x14,%ebx
mov    %ebx,0x4c(%esp)
xor    %ebx,%ebx
mov    0x0(%ebp),%ebx
mov    0x74(%esp),%edx
mov    0x78(%esp),%edi
mov    %ecx,0x24(%esp)
mov    %ebx,0x18(%esp)
mov    (%ecx),%ebx
mov    %edx,0x28(%esp)
movl   $0x0,(%edi)
mov    %edi,0x2c(%esp)
mov    %ebx,0x1c(%esp)
xor    %ebx,%ebx
test   %esi,%esi
movl   $0x0,(%edx)
je     804c9b0 <calloc@plt+0x3530>
mov    %esi,%edi
sub    %eax,%edi
jne    804c928 <calloc@plt+0x34a8>
cmpb   $0x0,0x1(%esi)
jne    804c8c0 <calloc@plt+0x3440>
xor    %edi,%edi
test   %ebx,%ebx
movb   $0x0,0x17(%esp)
je     804c8d2 <calloc@plt+0x3452>
cmpb   $0x2b,(%ebx)
je     804c8e0 <calloc@plt+0x3460>
mov    %ebx,(%esp)
call   8048fc0 <getpwnam@plt>
test   %eax,%eax
je     804c8e0 <calloc@plt+0x3460>
mov    0x8(%eax),%ecx
test   %edi,%edi
mov    %ecx,0x18(%esp)
je     804c970 <calloc@plt+0x34f0>
xor    %eax,%eax
xor    %esi,%esi
mov    %eax,0x20(%esp)
call   8049350 <endpwent@plt>
mov    0x20(%esp),%eax
cmpb   $0x0,0x17(%esp)
je     804c871 <calloc@plt+0x33f1>
cmpb   $0x2b,(%edi)
jne    804c908 <calloc@plt+0x3488>
lea    0x30(%esp),%eax
mov    $0x8052dfe,%esi
movl   $0x8052e65,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   804d580 <calloc@plt+0x4100>
test   %eax,%eax
je     804c9c8 <calloc@plt+0x3548>
call   8048fd0 <endgrent@plt>
mov    %edi,(%esp)
call   804d460 <calloc@plt+0x3fe0>
test   %esi,%esi
je     804c948 <calloc@plt+0x34c8>
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    %ebx,(%esp)
call   8049050 <free@plt>
mov    %esi,0x4(%esp)
movl   $0x5,0x8(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    0x4c(%esp),%esi
xor    %gs:0x14,%esi
jne    804ca67 <calloc@plt+0x35e7>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %esi,%edi
add    $0x1,%edi
setne  0x17(%esp)
test   %ebx,%ebx
jne    804c7e6 <calloc@plt+0x3366>
xor    %eax,%eax
xor    %esi,%esi
jmp    804c81f <calloc@plt+0x339f>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
sete   %dl
test   %esi,%esi
setne  %al
and    %al,%dl
je     804ca08 <calloc@plt+0x3588>
movb   $0x0,0x17(%esp)
xor    %eax,%eax
mov    $0x8052df1,%esi
jmp    804c812 <calloc@plt+0x3392>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049420 <getgrnam@plt>
test   %eax,%eax
je     804c82f <calloc@plt+0x33af>
mov    0x8(%eax),%eax
xor    %esi,%esi
mov    %eax,0x1c(%esp)
jmp    804c864 <calloc@plt+0x33e4>
xchg   %ax,%ax
lea    0x1(%edi),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804d430 <calloc@plt+0x3fb0>
mov    %eax,%ebx
movb   $0x0,(%eax,%edi,1)
jmp    804c7cd <calloc@plt+0x334d>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
mov    0x24(%esp),%edx
mov    %ecx,0x0(%ebp)
mov    0x1c(%esp),%ecx
mov    %ecx,(%edx)
mov    0x28(%esp),%edx
mov    %ebx,(%edx)
mov    0x2c(%esp),%ebx
mov    %eax,(%ebx)
xor    %ebx,%ebx
jmp    804c881 <calloc@plt+0x3401>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     804c80e <calloc@plt+0x338e>
mov    0xc(%eax),%eax
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   8049450 <getgrgid@plt>
test   %eax,%eax
je     804c9e5 <calloc@plt+0x3565>
mov    (%eax),%eax
mov    %eax,(%esp)
xor    %esi,%esi
call   804d460 <calloc@plt+0x3fe0>
mov    %eax,0x20(%esp)
call   8048fd0 <endgrent@plt>
mov    0x20(%esp),%eax
jmp    804c812 <calloc@plt+0x3392>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%eax)
je     804c7d7 <calloc@plt+0x3357>
mov    %eax,(%esp)
call   804d460 <calloc@plt+0x3fe0>
mov    %eax,%ebx
jmp    804c7d7 <calloc@plt+0x3357>
mov    0x30(%esp),%edx
mov    $0x8052dfe,%esi
cmp    $0xffffffff,%edx
cmove  0x1c(%esp),%edx
cmovne %eax,%esi
mov    %edx,0x1c(%esp)
jmp    804c864 <calloc@plt+0x33e4>
lea    0x37(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   804b160 <calloc@plt+0x1ce0>
jmp    804c98d <calloc@plt+0x350d>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x30(%esp),%eax
mov    $0x8052de4,%esi
movl   $0x8052e65,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x20(%esp)
call   804d580 <calloc@plt+0x4100>
mov    0x20(%esp),%edx
test   %eax,%eax
jne    804ca5c <calloc@plt+0x35dc>
mov    0x30(%esp),%ecx
cmp    $0xffffffff,%ecx
cmovne %eax,%esi
movzbl 0x17(%esp),%eax
cmove  0x18(%esp),%ecx
cmovne %eax,%edx
mov    %ecx,0x18(%esp)
mov    %dl,0x17(%esp)
xor    %eax,%eax
jmp    804c812 <calloc@plt+0x3392>
call   80490e0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
movl   $0x3a,0x4(%esp)
mov    0x40(%esp),%ebp
mov    %ebx,(%esp)
call   8049250 <strchr@plt>
mov    0x34(%esp),%ecx
mov    %ebp,0x8(%esp)
mov    %eax,%edi
mov    0x3c(%esp),%eax
mov    %edi,%edx
mov    %eax,0x4(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
mov    %ebx,%eax
call   804c770 <calloc@plt+0x32f0>
test   %eax,%eax
mov    %eax,%esi
je     804caf9 <calloc@plt+0x3679>
test   %edi,%edi
jne    804caf9 <calloc@plt+0x3679>
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
call   8049250 <strchr@plt>
test   %eax,%eax
je     804caf9 <calloc@plt+0x3679>
mov    0x38(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x8(%esp)
mov    %ecx,(%esp)
mov    0x34(%esp),%ecx
mov    %edx,0x4(%esp)
mov    %eax,%edx
mov    %ebx,%eax
call   804c770 <calloc@plt+0x32f0>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%esi
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804cfc8 <calloc@plt+0x3b48>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8052e0c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052e1f,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x80530c0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80493c0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052e7c,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804cff0 <calloc@plt+0x3b70>
jmp    *0x8053080(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052fe0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   80490c0 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80493c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053010,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   80490c0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80493c0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052e23,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052e33,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052e4a,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80493c0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052f48,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   80490c0 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804cc6f <calloc@plt+0x37ef>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052f68,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   80490c0 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804cc6f <calloc@plt+0x37ef>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052f8c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   80490c0 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804cc6f <calloc@plt+0x37ef>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052fb4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   80490c0 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804cc6f <calloc@plt+0x37ef>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8052e18,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <__fprintf_chk@plt>
jmp    804cb61 <calloc@plt+0x36e1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8053044,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   80490c0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804ccfa <calloc@plt+0x387a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804d09a <calloc@plt+0x3c1a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804d090 <calloc@plt+0x3c10>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804cb10 <calloc@plt+0x3690>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804d0f2 <calloc@plt+0x3c72>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804d0e0 <calloc@plt+0x3c60>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804cb10 <calloc@plt+0x3690>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804d0d0 <calloc@plt+0x3c50>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x8052e66,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x805246a,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052480,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
movl   $0x8052314,0xc(%esp)
movl   $0x8052494,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <__printf_chk@plt>
mov    0x8057200,%ebx
movl   $0x5,0x8(%esp)
movl   $0x805233c,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
je     804d239 <calloc@plt+0x3db9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804d234 <calloc@plt+0x3db4>
lea    0x0(%esi),%esi
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804d279 <calloc@plt+0x3df9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d220 <calloc@plt+0x3da0>
call   804d490 <calloc@plt+0x4010>
xchg   %ax,%ax
jmp    804d220 <calloc@plt+0x3da0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804d2b8 <calloc@plt+0x3e38>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491b0 <realloc@plt>
test   %eax,%eax
je     804d2cb <calloc@plt+0x3e4b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804d2a0 <calloc@plt+0x3e20>
mov    %eax,(%esp)
call   8049050 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804d2b0 <calloc@plt+0x3e30>
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804d313 <calloc@plt+0x3e93>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804d290 <calloc@plt+0x3e10>
call   804d490 <calloc@plt+0x4010>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804d360 <calloc@plt+0x3ee0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804d378 <calloc@plt+0x3ef8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804d290 <calloc@plt+0x3e10>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804d349 <calloc@plt+0x3ec9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804d349 <calloc@plt+0x3ec9>
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804d3b8 <calloc@plt+0x3f38>
cmp    $0xaaaaaaa9,%eax
ja     804d3c4 <calloc@plt+0x3f44>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d290 <calloc@plt+0x3e10>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804d3a0 <calloc@plt+0x3f20>
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804d220 <calloc@plt+0x3da0>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80492c0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049480 <calloc@plt>
test   %eax,%eax
je     804d41f <calloc@plt+0x3f9f>
add    $0x1c,%esp
ret
nop
call   804d490 <calloc@plt+0x4010>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804d220 <calloc@plt+0x3da0>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049270 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804d430 <calloc@plt+0x3fb0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x80530ef,0x4(%esp)
movl   $0x0,(%esp)
call   80490c0 <dcgettext@plt>
mov    0x805714c,%edx
movl   $0x80524bc,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8049190 <error@plt>
call   80493f0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    0x28(%esp),%edx
or     $0x2,%ah
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804ed90 <fts_open>
test   %eax,%eax
je     804d510 <calloc@plt+0x4090>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
cmpl   $0x16,(%eax)
je     804d520 <calloc@plt+0x40a0>
call   804d490 <calloc@plt+0x4010>
nop
movl   $0x8053128,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x8053100,0x4(%esp)
movl   $0x805310b,(%esp)
call   8049460 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    0x2c(%eax),%edx
and    $0x11,%edx
cmp    $0x10,%edx
je     804d578 <calloc@plt+0x40f8>
xor    %eax,%eax
cmp    $0x11,%edx
je     804d568 <calloc@plt+0x40e8>
repz ret
mov    0x8(%esp),%eax
mov    0x30(%eax),%eax
test   %eax,%eax
setne  %al
ret
lea    0x0(%esi),%esi
mov    $0x1,%eax
ret
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%esi
mov    0x50(%esp),%ebp
mov    0x54(%esp),%ebx
cmp    $0x24,%esi
ja     804d970 <calloc@plt+0x44f0>
movzbl 0x0(%ebp),%edx
lea    0x2c(%esp),%eax
test   %ebx,%ebx
cmove  %eax,%ebx
mov    %edx,0x14(%esp)
call   8049470 <__ctype_b_loc@plt>
mov    0x14(%esp),%edx
mov    (%eax),%edi
mov    %ebp,%eax
jmp    804d5c6 <calloc@plt+0x4146>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%edx
movzbl %dl,%ecx
testb  $0x20,0x1(%edi,%ecx,2)
jne    804d5c0 <calloc@plt+0x4140>
cmp    $0x2d,%dl
jne    804d5e8 <calloc@plt+0x4168>
mov    $0x4,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x14(%esp)
call   8049230 <strtoul@plt>
mov    (%ebx),%edi
mov    0x14(%esp),%edx
cmp    %ebp,%edi
mov    %eax,%esi
je     804d6ca <calloc@plt+0x424a>
mov    (%edx),%eax
test   %eax,%eax
jne    804d640 <calloc@plt+0x41c0>
xor    %ebp,%ebp
mov    0x60(%esp),%eax
test   %eax,%eax
je     804d62e <calloc@plt+0x41ae>
movzbl (%edi),%edx
test   %dl,%dl
jne    804d64c <calloc@plt+0x41cc>
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    $0x22,%eax
mov    $0x1,%ebp
jne    804d5d5 <calloc@plt+0x4155>
jmp    804d61f <calloc@plt+0x419f>
movsbl %dl,%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049250 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     804d718 <calloc@plt+0x4298>
mov    0x60(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049250 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     804d6ab <calloc@plt+0x422b>
movzbl 0x1(%edi),%eax
cmp    $0x44,%al
je     804d92b <calloc@plt+0x44ab>
cmp    $0x69,%al
je     804d910 <calloc@plt+0x4490>
cmp    $0x42,%al
je     804d92b <calloc@plt+0x44ab>
movl   $0x1,0x14(%esp)
mov    $0x400,%ecx
sub    $0x42,%edx
cmp    $0x35,%dl
ja     804d718 <calloc@plt+0x4298>
movzbl %dl,%edx
jmp    *0x8053168(,%edx,4)
mov    0x60(%esp),%edx
test   %edx,%edx
je     804d5d5 <calloc@plt+0x4155>
movzbl 0x0(%ebp),%edx
test   %dl,%dl
je     804d5d5 <calloc@plt+0x4155>
movsbl %dl,%eax
xor    %ebp,%ebp
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    $0x1,%esi
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   8049250 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    804d66f <calloc@plt+0x41ef>
jmp    804d5d5 <calloc@plt+0x4155>
lea    0x0(%esi,%eiz,1),%esi
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
mov    %ebp,%eax
or     $0x2,%eax
jmp    804d5da <calloc@plt+0x415a>
xor    %eax,%eax
add    0x14(%esp),%edi
or     %eax,%ebp
mov    %ebp,%eax
or     $0x2,%eax
mov    %edi,(%ebx)
cmpb   $0x0,(%edi)
cmovne %eax,%ebp
jmp    804d62e <calloc@plt+0x41ae>
cmp    $0x7fffffff,%esi
ja     804d883 <calloc@plt+0x4403>
add    %esi,%esi
xor    %eax,%eax
jmp    804d72a <calloc@plt+0x42aa>
cmp    $0x7fffff,%esi
ja     804d883 <calloc@plt+0x4403>
shl    $0x9,%esi
xor    %eax,%eax
jmp    804d72a <calloc@plt+0x42aa>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x7,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d791 <calloc@plt+0x4311>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d93d <calloc@plt+0x44bd>
cmp    %esi,0x18(%esp)
jae    804d781 <calloc@plt+0x4301>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d786 <calloc@plt+0x4306>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x8,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d7cd <calloc@plt+0x434d>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d93d <calloc@plt+0x44bd>
cmp    %esi,0x18(%esp)
jae    804d7bd <calloc@plt+0x433d>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d7c2 <calloc@plt+0x4342>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x4,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     804d946 <calloc@plt+0x44c6>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    804d7f6 <calloc@plt+0x4376>
jmp    804d72a <calloc@plt+0x42aa>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x5,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
jmp    804d83e <calloc@plt+0x43be>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
je     804d72a <calloc@plt+0x42aa>
cmp    %esi,0x1c(%esp)
jae    804d82c <calloc@plt+0x43ac>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d831 <calloc@plt+0x43b1>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
ja     804d961 <calloc@plt+0x44e1>
imul   %ecx,%esi
cmp    %esi,%eax
jb     804d961 <calloc@plt+0x44e1>
imul   %ecx,%esi
xor    %eax,%eax
jmp    804d72a <calloc@plt+0x42aa>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
jbe    804d86c <calloc@plt+0x43ec>
mov    $0xffffffff,%esi
mov    $0x1,%eax
jmp    804d72a <calloc@plt+0x42aa>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x6,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    804d8bc <calloc@plt+0x443c>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     804d93d <calloc@plt+0x44bd>
cmp    %esi,0x18(%esp)
jae    804d8ac <calloc@plt+0x442c>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    804d8b1 <calloc@plt+0x4431>
cmp    $0x3fffff,%esi
ja     804d883 <calloc@plt+0x4403>
shl    $0xa,%esi
xor    %eax,%eax
jmp    804d72a <calloc@plt+0x42aa>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x3,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     804d955 <calloc@plt+0x44d5>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    804d8f7 <calloc@plt+0x4477>
jmp    804d72a <calloc@plt+0x42aa>
xor    %eax,%eax
mov    $0x400,%ecx
cmpb   $0x42,0x2(%edi)
sete   %al
lea    0x1(%eax,%eax,1),%eax
mov    %eax,0x14(%esp)
jmp    804d6b8 <calloc@plt+0x4238>
movl   $0x2,0x14(%esp)
mov    $0x3e8,%ecx
jmp    804d6b8 <calloc@plt+0x4238>
mov    0x1c(%esp),%ebp
jmp    804d72a <calloc@plt+0x42aa>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d805 <calloc@plt+0x4385>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    804d902 <calloc@plt+0x4482>
mov    $0x1,%eax
mov    $0xffffffff,%esi
jmp    804d72a <calloc@plt+0x42aa>
movl   $0x8053240,0xc(%esp)
movl   $0x60,0x8(%esp)
movl   $0x8053132,0x4(%esp)
movl   $0x8053140,(%esp)
call   8049460 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
xor    %eax,%eax
push   %ebx
mov    0xc(%esp),%esi
mov    0x10(%esp),%ebx
mov    0x8(%esi),%edx
mov    0xc(%esi),%ecx
xor    0xc(%ebx),%ecx
xor    0x8(%ebx),%edx
or     %edx,%ecx
je     804d9c0 <calloc@plt+0x4540>
pop    %ebx
pop    %esi
ret
nop
mov    (%esi),%edx
mov    0x4(%esi),%eax
xor    0x4(%ebx),%eax
xor    (%ebx),%edx
pop    %ebx
pop    %esi
or     %eax,%edx
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0xc(%eax),%edx
mov    0x8(%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051730 <fts_children+0x1c40>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8051730 <fts_children+0x1c40>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%esp),%ecx
mov    (%eax),%edx
mov    0x4(%eax),%eax
xor    0x4(%ecx),%eax
xor    (%ecx),%edx
or     %eax,%edx
sete   %al
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%ecx
mov    0x9c(%eax),%ebx
mov    0x10(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%edx
mov    0x9c(%eax),%esi
cmp    %edx,%ecx
jae    804da98 <calloc@plt+0x4618>
mov    $0xffffffff,%eax
nop
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
jbe    804dab8 <calloc@plt+0x4638>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804da90 <calloc@plt+0x4610>
jb     804daa9 <calloc@plt+0x4629>
cmp    %esi,%ebx
ja     804da90 <calloc@plt+0x4610>
xor    %eax,%eax
pop    %ebx
pop    %esi
lea    0x0(%esi),%esi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%ebx
jb     804da8a <calloc@plt+0x460a>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804da90 <calloc@plt+0x4610>
jmp    804daa3 <calloc@plt+0x4623>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x1c,%esp
mov    0x28(%eax),%ebp
cmp    %ecx,0x24(%eax)
jb     804db58 <calloc@plt+0x46d8>
mov    0x8(%eax),%edx
test   %ebx,%ebx
je     804db00 <calloc@plt+0x4680>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%edx
mov    %ebx,-0x4(%edx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804daf0 <calloc@plt+0x4670>
mov    0x8(%esi),%edx
mov    %ebp,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   80493b0 <qsort@plt>
mov    0x8(%esi),%ebp
mov    %edi,%esi
sub    $0x1,%esi
mov    0x0(%ebp),%eax
je     804dbab <calloc@plt+0x472b>
mov    %eax,%ecx
mov    %ebp,%edx
jmp    804db32 <calloc@plt+0x46b2>
nop
mov    (%edx),%ecx
mov    0x4(%edx),%ebx
add    $0x4,%edx
sub    $0x1,%esi
mov    %ebx,0x8(%ecx)
jne    804db30 <calloc@plt+0x46b0>
mov    -0x4(%ebp,%edi,4),%edx
movl   $0x0,0x8(%edx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%ecx),%eax
cmp    $0x3fffffff,%eax
mov    %eax,0x24(%esi)
ja     804db88 <calloc@plt+0x4708>
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   80491b0 <realloc@plt>
test   %eax,%eax
je     804db88 <calloc@plt+0x4708>
mov    %eax,0x8(%esi)
mov    %eax,%edx
jmp    804dae8 <calloc@plt+0x4668>
lea    0x0(%esi),%esi
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    %ebx,%eax
movl   $0x0,0x8(%esi)
movl   $0x0,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,%edx
jmp    804db44 <calloc@plt+0x46c4>
nop
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
lea    0xa8(%ecx),%eax
mov    %eax,(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804dc26 <calloc@plt+0x47a6>
lea    0xa4(%eax),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <memcpy@plt>
mov    0x14(%edi),%eax
mov    $0x3,%edx
movb   $0x0,0xa4(%ebx,%esi,1)
mov    %esi,0x34(%ebx)
mov    %edi,0x2c(%ebx)
mov    %eax,0x1c(%ebx)
xor    %eax,%eax
movl   $0x0,0x20(%ebx)
movl   $0x0,0xc(%ebx)
mov    %ax,0x3e(%ebx)
mov    %dx,0x40(%ebx)
movl   $0x0,0x10(%ebx)
movl   $0x0,0x14(%ebx)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
test   %eax,%eax
jne    804dc42 <calloc@plt+0x47c2>
jmp    804dc60 <calloc@plt+0x47e0>
lea    0x0(%esi),%esi
mov    %esi,%ebx
mov    0xc(%ebx),%eax
mov    0x8(%ebx),%esi
test   %eax,%eax
je     804dc54 <calloc@plt+0x47d4>
mov    %eax,(%esp)
call   8049440 <closedir@plt>
mov    %ebx,(%esp)
call   8049050 <free@plt>
test   %esi,%esi
jne    804dc40 <calloc@plt+0x47c0>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
jmp    804dc84 <calloc@plt+0x4804>
mov    %ebx,(%esp)
call   8050ea0 <fts_children+0x13b0>
test   %eax,%eax
jns    804dc98 <calloc@plt+0x4818>
mov    %ebx,(%esp)
call   8050e50 <fts_children+0x1360>
test   %al,%al
je     804dc78 <calloc@plt+0x47f8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049430 <close@plt>
jmp    804dc84 <calloc@plt+0x4804>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x1c(%eax),%eax
cmp    %edx,%eax
je     804dcfc <calloc@plt+0x487c>
test   %cl,%cl
jne    804dce0 <calloc@plt+0x4860>
testb  $0x4,0x2c(%ebx)
jne    804dcd6 <calloc@plt+0x4856>
test   %eax,%eax
js     804dcd6 <calloc@plt+0x4856>
mov    %eax,(%esp)
call   8049430 <close@plt>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
mov    %eax,0x4(%esp)
lea    0x38(%ebx),%eax
mov    %eax,(%esp)
call   8050e60 <fts_children+0x1370>
test   %eax,%eax
jns    804dcce <calloc@plt+0x484e>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
cmp    $0xffffff9c,%eax
je     804dcc0 <calloc@plt+0x4840>
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %esi,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x2c(%eax),%eax
test   $0x4,%al
jne    804dd38 <calloc@plt+0x48b8>
test   $0x2,%ah
je     804dd48 <calloc@plt+0x48c8>
mov    $0x1,%ecx
mov    $0xffffff9c,%edx
mov    %ebx,%eax
xor    %esi,%esi
call   804dcb0 <calloc@plt+0x4830>
lea    0x38(%ebx),%eax
call   804dc70 <calloc@plt+0x47f0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   8049370 <fchdir@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,%esi
lea    0x38(%ebx),%eax
call   804dc70 <calloc@plt+0x47f0>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x2c,%esp
mov    0x30(%ecx),%ebp
lea    0x44(%ecx),%edi
mov    0x40(%esp),%edx
mov    (%esi),%ecx
test   %ebp,%ebp
jne    804dd90 <calloc@plt+0x4910>
test   $0x1,%cl
jne    804dd99 <calloc@plt+0x4919>
and    $0x2,%ecx
jne    804dd99 <calloc@plt+0x4919>
test   %dl,%dl
je     804de18 <calloc@plt+0x4998>
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049400 <__xstat64@plt>
test   %eax,%eax
je     804de40 <calloc@plt+0x49c0>
call   80492e0 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0x2,%esi
je     804df10 <calloc@plt+0x4a90>
mov    %esi,0x20(%ebx)
test   $0x1,%edi
mov    $0x60,%edx
jne    804df00 <calloc@plt+0x4a80>
test   $0x2,%edi
jne    804dee8 <calloc@plt+0x4a68>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     804de01 <calloc@plt+0x4981>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804de09 <calloc@plt+0x4989>
movb   $0x0,(%edi)
mov    $0xa,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%ebx),%edx
movl   $0x100,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x3,(%esp)
call   8049100 <__fxstatat64@plt>
test   %eax,%eax
jne    804de78 <calloc@plt+0x49f8>
nop
mov    0x54(%ebx),%ecx
and    $0xf000,%ecx
cmp    $0x4000,%ecx
je     804de88 <calloc@plt+0x4a08>
cmp    $0xa000,%ecx
mov    $0xc,%eax
je     804de0e <calloc@plt+0x498e>
xor    %eax,%eax
cmp    $0x8000,%ecx
sete   %al
add    $0x2c,%esp
pop    %ebx
lea    0x3(%eax,%eax,4),%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
jmp    804ddcd <calloc@plt+0x494d>
nop
mov    (%esi),%edx
mov    0x58(%ebx),%eax
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
and    $0x2,%edx
sub    %edx,%eax
cmpb   $0x2e,0xa4(%ebx)
mov    %eax,0x38(%ebx)
mov    $0x1,%eax
jne    804de0e <calloc@plt+0x498e>
cmpb   $0x0,0xa5(%ebx)
je     804ded0 <calloc@plt+0x4a50>
mov    0xa4(%ebx),%edx
and    $0xffff00,%edx
cmp    $0x2e00,%edx
jne    804de0e <calloc@plt+0x498e>
cmpl   $0x1,0x30(%ebx)
sbb    %eax,%eax
and    $0xfffffffc,%eax
add    $0x5,%eax
jmp    804de0e <calloc@plt+0x498e>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804ddea <calloc@plt+0x496a>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x44(%ebx)
add    $0x1,%edi
mov    $0x5f,%dl
jmp    804ddde <calloc@plt+0x495e>
xchg   %ax,%ax
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049410 <__lxstat64@plt>
test   %eax,%eax
jne    804ddca <calloc@plt+0x494a>
movl   $0x0,0x0(%ebp)
mov    $0xd,%al
jmp    804de0e <calloc@plt+0x498e>
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    (%edx),%eax
lea    0x100(%eax,%ecx,1),%ecx
cmp    %ecx,%eax
ja     804df78 <calloc@plt+0x4af8>
mov    (%ebx),%eax
mov    %ecx,(%edx)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   80491b0 <realloc@plt>
test   %eax,%eax
je     804dfa0 <calloc@plt+0x4b20>
mov    %eax,(%ebx)
mov    $0x1,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
movl   $0x0,(%ebx)
call   80492e0 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
xor    %eax,%eax
movl   $0x0,(%ebx)
jmp    804df6e <calloc@plt+0x4aee>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
mov    %edx,%ebx
sub    $0x28,%esp
test   $0x102,%eax
je     804e008 <calloc@plt+0x4b88>
movl   $0x8049050,0x10(%esp)
movl   $0x804d9a0,0xc(%esp)
movl   $0x804d9e0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1f,(%esp)
call   8050660 <fts_children+0xb70>
test   %eax,%eax
mov    %eax,(%ebx)
setne  %al
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x1c,(%esp)
call   80491c0 <malloc@plt>
mov    %eax,%edx
mov    %eax,(%ebx)
xor    %eax,%eax
test   %edx,%edx
je     804e000 <calloc@plt+0x4b80>
mov    %edx,(%esp)
call   804fd70 <fts_children+0x280>
add    $0x28,%esp
mov    $0x1,%eax
pop    %ebx
ret
push   %esi
push   %ebx
mov    %edx,%ebx
and    $0x10,%ebx
sub    $0x14,%esp
cmp    $0x1,%ebx
mov    %edx,%ebx
sbb    %esi,%esi
and    $0xfffe0000,%esi
shl    $0x7,%ebx
add    $0x30900,%esi
and    $0x40000,%ebx
or     %esi,%ebx
and    $0x2,%dh
je     804e090 <calloc@plt+0x4c10>
mov    %ebx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   80512a0 <fts_children+0x17b0>
mov    %eax,%ebx
test   %ebx,%ebx
js     804e083 <calloc@plt+0x4c03>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804fc50 <fts_children+0x160>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x4(%esp)
mov    %ecx,(%esp)
call   804fe80 <fts_children+0x390>
mov    %eax,%ebx
jmp    804e06f <calloc@plt+0x4bef>
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%ebx
mov    %edx,0x18(%esp)
movb   $0x0,0x14(%esp)
test   %ebx,%ebx
je     804e0d6 <calloc@plt+0x4c56>
cmpb   $0x2e,(%ebx)
jne    804e0d6 <calloc@plt+0x4c56>
cmpb   $0x2e,0x1(%ebx)
jne    804e0d6 <calloc@plt+0x4c56>
cmpb   $0x0,0x2(%ebx)
sete   0x14(%esp)
mov    0x2c(%ebp),%edx
mov    %edx,%esi
and    $0x4,%esi
je     804e108 <calloc@plt+0x4c88>
and    $0x200,%edx
mov    %edx,%esi
je     804e0f8 <calloc@plt+0x4c78>
xor    %esi,%esi
test   %edi,%edi
js     804e0f8 <calloc@plt+0x4c78>
mov    %edi,(%esp)
call   8049430 <close@plt>
add    $0x8c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edi,%eax
shr    $0x1f,%eax
cmpb   $0x0,0x14(%esp)
jne    804e1a0 <calloc@plt+0x4d20>
test   %al,%al
jne    804e1b6 <calloc@plt+0x4d36>
mov    %edi,0x1c(%esp)
test   $0x2,%dl
jne    804e150 <calloc@plt+0x4cd0>
test   %ebx,%ebx
je     804e1f8 <calloc@plt+0x4d78>
cmpb   $0x2e,(%ebx)
jne    804e1f8 <calloc@plt+0x4d78>
cmpb   $0x2e,0x1(%ebx)
xchg   %ax,%ax
jne    804e1f8 <calloc@plt+0x4d78>
cmpb   $0x0,0x2(%ebx)
jne    804e1f8 <calloc@plt+0x4d78>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049130 <__fxstat64@plt>
test   %eax,%eax
je     804e218 <calloc@plt+0x4d98>
mov    $0xffffffff,%eax
test   %edi,%edi
mov    %eax,%esi
jns    804e0f8 <calloc@plt+0x4c78>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebx
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
mov    %edi,(%ebx)
jmp    804e0f8 <calloc@plt+0x4c78>
nop
test   %al,%al
je     804e120 <calloc@plt+0x4ca0>
test   $0x2,%dh
jne    804e240 <calloc@plt+0x4dc0>
movb   $0x1,0x14(%esp)
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
call   804e030 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804e2b3 <calloc@plt+0x4e33>
mov    0x2c(%ebp),%edx
jmp    804e124 <calloc@plt+0x4ca4>
lea    0x0(%esi,%eiz,1),%esi
mov    0x9c(%ecx),%eax
mov    0xa0(%ecx),%edx
xor    0x7c(%esp),%edx
xor    0x78(%esp),%eax
or     %eax,%edx
jne    804e22e <calloc@plt+0x4dae>
mov    0x2c(%ebp),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x2,%dh
jne    804e298 <calloc@plt+0x4e18>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049370 <fchdir@plt>
jmp    804e179 <calloc@plt+0x4cf9>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
mov    0x44(%ecx),%eax
mov    0x48(%ecx),%edx
xor    0x24(%esp),%edx
xor    0x20(%esp),%eax
or     %eax,%edx
je     804e1d8 <calloc@plt+0x4d58>
call   80492e0 <__errno_location@plt>
movl   $0x2,(%eax)
jmp    804e174 <calloc@plt+0x4cf4>
xchg   %ax,%ax
lea    0x38(%ebp),%ecx
mov    %ecx,(%esp)
mov    %edx,0x1c(%esp)
mov    %ecx,0x14(%esp)
call   8050e50 <fts_children+0x1360>
mov    0x1c(%esp),%edx
mov    0x14(%esp),%ecx
test   %al,%al
jne    804e1b1 <calloc@plt+0x4d31>
mov    %ecx,(%esp)
call   8050ea0 <fts_children+0x13b0>
mov    0x2c(%ebp),%edx
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804e1b1 <calloc@plt+0x4d31>
test   $0x2,%dl
mov    0x1c(%esp),%edi
movb   $0x1,0x14(%esp)
je     804e1f8 <calloc@plt+0x4d78>
jmp    804e150 <calloc@plt+0x4cd0>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x14(%esp),%ecx
mov    %ebp,%eax
mov    0x1c(%esp),%edx
xor    $0x1,%ecx
movzbl %cl,%ecx
call   804dcb0 <calloc@plt+0x4830>
jmp    804e0f8 <calloc@plt+0x4c78>
mov    $0xffffffff,%esi
jmp    804e0f8 <calloc@plt+0x4c78>
lea    0x0(%esi),%esi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
test   $0x102,%eax
je     804e350 <calloc@plt+0x4ed0>
movl   $0x14,(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e388 <calloc@plt+0x4f08>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %ebx,0x10(%esi)
mov    %esi,0x4(%esp)
mov    %eax,(%esi)
mov    0x9c(%ebx),%eax
mov    %edx,0x4(%esi)
mov    0xa0(%ebx),%edx
mov    %eax,0x8(%esi)
mov    (%edi),%eax
mov    %edx,0xc(%esi)
mov    %eax,(%esp)
call   8050c70 <fts_children+0x1180>
mov    %eax,%edi
mov    $0x1,%eax
cmp    %edi,%esi
je     804e342 <calloc@plt+0x4ec2>
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8049050 <free@plt>
test   %edi,%edi
je     804e388 <calloc@plt+0x4f08>
mov    0x10(%edi),%edx
mov    $0x2,%ecx
mov    0xc(%esp),%eax
mov    %cx,0x3c(%ebx)
mov    %edx,(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x44(%ecx),%eax
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   804fd90 <fts_children+0x2a0>
test   %al,%al
je     804e378 <calloc@plt+0x4ef8>
mov    $0x2,%edx
mov    %ebx,(%ebx)
mov    %dx,0x3c(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x10,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804e3a0 <calloc@plt+0x4f20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x34,%esp
test   $0x102,%eax
jne    804e3e8 <calloc@plt+0x4f68>
mov    0x4(%ecx),%esi
test   %esi,%esi
je     804e3dd <calloc@plt+0x4f5d>
mov    0x30(%esi),%eax
test   %eax,%eax
js     804e3dd <calloc@plt+0x4f5d>
mov    (%edx),%ebx
mov    0x14(%ebx),%eax
or     0x10(%ebx),%eax
je     804e462 <calloc@plt+0x4fe2>
mov    (%ebx),%eax
mov    0x4(%ebx),%edx
xor    0xa0(%ecx),%edx
xor    0x9c(%ecx),%eax
or     %eax,%edx
je     804e430 <calloc@plt+0x4fb0>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%ecx),%ebx
lea    0x1c(%esp),%eax
mov    0x48(%ecx),%esi
mov    %ebx,0x1c(%esp)
mov    0xa0(%ecx),%ebx
mov    0x9c(%ecx),%ecx
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %esi,0x20(%esp)
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,(%esp)
call   8050cb0 <fts_children+0x11c0>
test   %eax,%eax
je     804e462 <calloc@plt+0x4fe2>
mov    %eax,(%esp)
call   8049050 <free@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
xor    0x48(%ecx),%edx
xor    0x44(%ecx),%eax
or     %eax,%edx
jne    804e3dd <calloc@plt+0x4f5d>
mov    0x44(%esi),%eax
mov    0x48(%esi),%edx
mov    %eax,0x8(%ebx)
mov    0x9c(%esi),%eax
mov    %edx,0xc(%ebx)
mov    0xa0(%esi),%edx
mov    %eax,(%ebx)
mov    %edx,0x4(%ebx)
jmp    804e3dd <calloc@plt+0x4f5d>
call   80493f0 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    (%eax),%eax
mov    %edx,0x38(%esp)
mov    %eax,0x14(%esp)
mov    0xc(%eax),%eax
test   %eax,%eax
setne  0x3e(%esp)
jne    804e9f0 <calloc@plt+0x5570>
mov    0x2c(%ebp),%eax
mov    $0x10900,%ecx
test   $0x10,%al
jne    804e928 <calloc@plt+0x54a8>
mov    0x2c(%ebp),%edx
shl    $0x7,%eax
mov    $0xffffff9c,%ebx
mov    0x14(%esp),%edi
and    $0x40000,%eax
and    $0x204,%edx
cmp    $0x200,%edx
mov    0x18(%edi),%esi
je     804ebb8 <calloc@plt+0x5738>
or     %ecx,%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
call   80512a0 <fts_children+0x17b0>
test   %eax,%eax
mov    %eax,%ebx
js     804ec51 <calloc@plt+0x57d1>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804fc50 <fts_children+0x160>
mov    %ebx,(%esp)
call   8049360 <fdopendir@plt>
test   %eax,%eax
je     804ec3e <calloc@plt+0x57be>
mov    0x14(%esp),%edi
cmpw   $0xb,0x3c(%edi)
mov    %eax,0xc(%edi)
je     804ec74 <calloc@plt+0x57f4>
mov    0x2c(%ebp),%eax
test   $0x1,%ah
jne    804ea68 <calloc@plt+0x55e8>
cmpl   $0x1,0x28(%ebp)
sbb    %edi,%edi
xor    %ecx,%ecx
mov    %edi,0x24(%esp)
andl   $0x186a1,0x24(%esp)
subl   $0x1,0x24(%esp)
cmpl   $0x2,0x38(%esp)
je     804e55d <calloc@plt+0x50dd>
mov    0x2c(%ebp),%edx
mov    $0xffffffff,%ecx
and    $0x18,%edx
cmp    $0x18,%edx
je     804ea38 <calloc@plt+0x55b8>
cmpb   $0x0,0x3e(%esp)
movb   $0x1,0x3f(%esp)
jne    804e598 <calloc@plt+0x5118>
test   %ecx,%ecx
setne  %cl
cmpl   $0x3,0x38(%esp)
mov    %ecx,%esi
sete   %cl
mov    %ecx,%edi
mov    %esi,%ecx
test   %cl,%cl
jne    804e9b8 <calloc@plt+0x5538>
mov    %edi,%ecx
test   %cl,%cl
movb   $0x0,0x3f(%esp)
jne    804e9b8 <calloc@plt+0x5538>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
movl   $0x0,0x2c(%esp)
mov    0x28(%edi),%edx
mov    0x1c(%edi),%ebx
lea    -0x1(%edx),%ecx
cmpb   $0x2f,-0x1(%ebx,%edx,1)
cmove  %ecx,%edx
test   $0x4,%al
jne    804e910 <calloc@plt+0x5490>
mov    0x20(%ebp),%edi
lea    0x1(%edx),%eax
mov    %eax,0x1c(%esp)
movb   $0x0,0x3d(%esp)
movl   $0x0,0x10(%esp)
mov    %edi,0x18(%esp)
sub    %eax,0x18(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x20(%esp)
mov    0x30(%eax),%eax
add    $0x1,%eax
mov    %eax,0x28(%esp)
lea    0x2c(%ebp),%eax
mov    %eax,0x34(%esp)
lea    0x2(%edx),%eax
mov    %eax,0x30(%esp)
jmp    804e6da <calloc@plt+0x525a>
lea    0x0(%esi),%esi
add    0x1c(%esp),%edx
jb     804e79e <calloc@plt+0x531e>
mov    0x28(%esp),%eax
testb  $0x4,0x2c(%ebp)
mov    %eax,0x30(%ebx)
mov    0x0(%ebp),%eax
mov    %edx,0x28(%ebx)
mov    0x4(%esi),%edx
mov    %eax,0x4(%ebx)
mov    (%esi),%eax
mov    %edx,0xa0(%ebx)
mov    %eax,0x9c(%ebx)
jne    804e7f0 <calloc@plt+0x5370>
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804e65f <calloc@plt+0x51df>
testb  $0x4,0x2d(%ebp)
je     804e820 <calloc@plt+0x53a0>
mov    0x2c(%ebp),%eax
xor    %ecx,%ecx
and    $0x18,%eax
cmp    $0x18,%eax
je     804e900 <calloc@plt+0x5480>
mov    $0xb,%edi
xor    %eax,%eax
mov    %di,0x3c(%ebx)
movzbl 0x12(%esi),%edx
sub    $0x1,%edx
cmp    $0xb,%edx
ja     804e68e <calloc@plt+0x520e>
mov    0x8053260(,%edx,4),%eax
xor    %edx,%edx
test   %ecx,%ecx
mov    %eax,0x54(%ebx)
mov    $0x1,%eax
jne    804e6a3 <calloc@plt+0x5223>
mov    $0x2,%eax
xor    %edx,%edx
mov    0x20(%esp),%esi
mov    %eax,0x70(%ebx)
mov    %edx,0x74(%ebx)
movl   $0x0,0x8(%ebx)
test   %esi,%esi
je     804e84c <calloc@plt+0x53cc>
mov    0x10(%esp),%eax
addl   $0x1,0xc(%esp)
mov    %ebx,0x8(%eax)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
jbe    804e868 <calloc@plt+0x53e8>
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     804e868 <calloc@plt+0x53e8>
mov    %eax,(%esp)
call   80493a0 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     804ec10 <calloc@plt+0x5790>
testb  $0x20,0x2c(%ebp)
jne    804e70b <calloc@plt+0x528b>
cmpb   $0x2e,0x13(%eax)
je     804e8e0 <calloc@plt+0x5460>
lea    0x13(%esi),%edi
mov    %edi,(%esp)
call   8049270 <strlen@plt>
mov    %edi,%edx
mov    %eax,%ecx
mov    %ebp,%eax
call   804dbb0 <calloc@plt+0x4730>
test   %eax,%eax
mov    %eax,%ebx
je     804ebc0 <calloc@plt+0x5740>
mov    %edi,(%esp)
call   8049270 <strlen@plt>
cmp    %eax,0x18(%esp)
mov    %eax,%edx
ja     804e610 <calloc@plt+0x5190>
mov    0x14(%ebp),%ecx
lea    0x20(%ebp),%edx
mov    %ecx,0x18(%esp)
mov    0x30(%esp),%ecx
add    %eax,%ecx
lea    0x14(%ebp),%eax
call   804df40 <calloc@plt+0x4ac0>
test   %al,%al
je     804ebc0 <calloc@plt+0x5740>
mov    0x14(%ebp),%eax
cmp    0x18(%esp),%eax
je     804e77b <calloc@plt+0x52fb>
testb  $0x4,0x2c(%ebp)
movb   $0x1,0x3d(%esp)
je     804e77b <calloc@plt+0x52fb>
add    0x1c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x20(%ebp),%eax
mov    %edi,(%esp)
mov    %eax,0x18(%esp)
mov    0x1c(%esp),%eax
sub    %eax,0x18(%esp)
call   8049270 <strlen@plt>
mov    %eax,%edx
add    0x1c(%esp),%edx
jae    804e61a <calloc@plt+0x519a>
mov    %ebx,(%esp)
call   8049050 <free@plt>
mov    0x20(%esp),%eax
call   804dc30 <calloc@plt+0x47b0>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049440 <closedir@plt>
mov    $0x7,%edx
movl   $0x0,0xc(%edi)
mov    %dx,0x3c(%edi)
orl    $0x4000,0x2c(%ebp)
call   80492e0 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x34(%ebx),%eax
add    $0x1,%eax
mov    %eax,0x8(%esp)
lea    0xa4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8049040 <memmove@plt>
jmp    804e64e <calloc@plt+0x51ce>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x34(%esp),%edx
movl   $0x0,(%esp)
call   804dd70 <calloc@plt+0x48f0>
mov    0x20(%esp),%esi
movl   $0x0,0x8(%ebx)
test   %esi,%esi
mov    %ax,0x3c(%ebx)
jne    804e6bc <calloc@plt+0x523c>
addl   $0x1,0xc(%esp)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
mov    %ebx,0x20(%esp)
ja     804e6d6 <calloc@plt+0x5256>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x3d(%esp)
jne    804eab8 <calloc@plt+0x5638>
testb  $0x4,0x2c(%ebp)
je     804e896 <calloc@plt+0x5416>
mov    0x1c(%esp),%eax
cmp    %eax,0x20(%ebp)
je     804e88a <calloc@plt+0x540a>
mov    0xc(%esp),%eax
test   %eax,%eax
jne    804e88f <calloc@plt+0x540f>
subl   $0x1,0x2c(%esp)
mov    0x2c(%esp),%eax
movb   $0x0,(%eax)
cmpb   $0x0,0x3f(%esp)
jne    804e950 <calloc@plt+0x54d0>
mov    0xc(%esp),%ebx
test   %ebx,%ebx
je     804ecbc <calloc@plt+0x583c>
cmpl   $0x2710,0xc(%esp)
jbe    804ea10 <calloc@plt+0x5590>
mov    0x28(%ebp),%edx
test   %edx,%edx
je     804ecd7 <calloc@plt+0x5857>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
call   804dad0 <calloc@plt+0x4650>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x14(%eax)
je     804e8f1 <calloc@plt+0x5471>
cmpw   $0x2e,0x14(%eax)
jne    804e70b <calloc@plt+0x528b>
mov    0x10(%esp),%ebx
jmp    804e6d6 <calloc@plt+0x5256>
lea    0x0(%esi),%esi
xor    %ecx,%ecx
testb  $0xfb,0x12(%esi)
setne  %cl
jmp    804e670 <calloc@plt+0x51f0>
xchg   %ax,%ax
mov    0x14(%ebp),%eax
add    %edx,%eax
lea    0x1(%eax),%edi
mov    %edi,0x2c(%esp)
movb   $0x2f,(%eax)
jmp    804e5bd <calloc@plt+0x513d>
lea    0x0(%esi,%eiz,1),%esi
test   $0x1,%al
mov    $0x30900,%ecx
je     804e4a6 <calloc@plt+0x5026>
mov    0x14(%esp),%edi
cmpl   $0x1,0x30(%edi)
sbb    %ecx,%ecx
and    $0xfffe0000,%ecx
add    $0x30900,%ecx
jmp    804e4a6 <calloc@plt+0x5026>
cmpb   $0x0,0x3e(%esp)
jne    804e8a1 <calloc@plt+0x5421>
mov    0xc(%esp),%eax
test   %eax,%eax
je     804e96e <calloc@plt+0x54ee>
cmpl   $0x1,0x38(%esp)
jne    804e8ad <calloc@plt+0x542d>
mov    0x14(%esp),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jne    804ec98 <calloc@plt+0x5818>
mov    %ebp,%eax
call   804dd10 <calloc@plt+0x4890>
test   %eax,%eax
setne  %al
test   %al,%al
je     804e8a1 <calloc@plt+0x5421>
mov    0x14(%esp),%eax
mov    $0x7,%esi
mov    %si,0x3c(%eax)
mov    0x20(%esp),%eax
orl    $0x4000,0x2c(%ebp)
call   804dc30 <calloc@plt+0x47b0>
xor    %eax,%eax
jmp    804ea26 <calloc@plt+0x55a6>
lea    0x0(%esi),%esi
test   $0x2,%ah
jne    804eb27 <calloc@plt+0x56a7>
mov    0x14(%esp),%edx
mov    %ebx,%ecx
mov    %ebp,%eax
movl   $0x0,(%esp)
call   804e0a0 <calloc@plt+0x4c20>
test   %eax,%eax
jne    804eb50 <calloc@plt+0x56d0>
mov    0x2c(%ebp),%eax
movb   $0x1,0x3f(%esp)
jmp    804e598 <calloc@plt+0x5118>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049030 <dirfd@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804ed38 <calloc@plt+0x58b8>
mov    0x2c(%ebp),%eax
jmp    804e529 <calloc@plt+0x50a9>
lea    0x0(%esi),%esi
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804ea22 <calloc@plt+0x55a2>
cmpl   $0x1,0xc(%esp)
ja     804e8c6 <calloc@plt+0x5446>
mov    0x20(%esp),%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%esi
mov    %eax,%edx
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
mov    0x58(%esi),%ecx
and    $0x2,%edx
movb   $0x1,0x3f(%esp)
sub    %edx,%ecx
cmpb   $0x0,0x3e(%esp)
jne    804e598 <calloc@plt+0x5118>
jmp    804e569 <calloc@plt+0x50e9>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
lea    0x34(%ebp),%esi
mov    %esi,%edx
mov    %edi,%ecx
call   804e3a0 <calloc@plt+0x4f20>
mov    0x1c(%ebp),%eax
lea    0x2c(%ebp),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804dd70 <calloc@plt+0x48f0>
mov    0x2c(%ebp),%eax
mov    %edi,%ecx
mov    %esi,%edx
call   804e2c0 <calloc@plt+0x4e40>
test   %al,%al
jne    804ea02 <calloc@plt+0x5582>
call   80492e0 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804ea26 <calloc@plt+0x55a6>
lea    0x0(%esi),%esi
mov    0x4(%ebp),%eax
mov    0x14(%ebp),%edx
test   %eax,%eax
je     804eae7 <calloc@plt+0x5667>
lea    0x0(%esi),%esi
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804eadd <calloc@plt+0x565d>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    %edx,0x1c(%eax)
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804eac8 <calloc@plt+0x5648>
mov    0x20(%esp),%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%eax),%ecx
test   %ecx,%ecx
js     804e873 <calloc@plt+0x53f3>
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804eb10 <calloc@plt+0x5690>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    0x8(%eax),%ecx
mov    %edx,0x1c(%eax)
test   %ecx,%ecx
je     804eb20 <calloc@plt+0x56a0>
mov    %ecx,%eax
jmp    804eaf0 <calloc@plt+0x5670>
xchg   %ax,%ax
mov    0x4(%eax),%ecx
mov    %ecx,%eax
jmp    804eaf0 <calloc@plt+0x5670>
mov    %ebx,(%esp)
call   80512e0 <fts_children+0x17f0>
test   %eax,%eax
mov    %eax,%ebx
js     804eb50 <calloc@plt+0x56d0>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804fc50 <fts_children+0x160>
jmp    804e9c1 <calloc@plt+0x5541>
lea    0x0(%esi),%esi
mov    %esi,%eax
test   %al,%al
je     804eb5c <calloc@plt+0x56dc>
mov    %edi,%eax
test   %al,%al
jne    804eba3 <calloc@plt+0x5723>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
orw    $0x1,0x3e(%edi)
mov    %eax,(%esp)
call   8049440 <closedir@plt>
mov    0x2c(%ebp),%eax
movl   $0x0,0xc(%edi)
test   $0x2,%ah
je     804eb8e <calloc@plt+0x570e>
test   %ebx,%ebx
js     804eb8e <calloc@plt+0x570e>
mov    %ebx,(%esp)
call   8049430 <close@plt>
mov    0x2c(%ebp),%eax
mov    0x14(%esp),%edi
movb   $0x0,0x3f(%esp)
movl   $0x0,0xc(%edi)
jmp    804e598 <calloc@plt+0x5118>
call   80492e0 <__errno_location@plt>
mov    0x14(%esp),%edi
mov    (%eax),%eax
mov    %eax,0x20(%edi)
jmp    804eb5c <calloc@plt+0x56dc>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%ebx
jmp    804e4cf <calloc@plt+0x504f>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049050 <free@plt>
mov    0x20(%esp),%eax
call   804dc30 <calloc@plt+0x47b0>
mov    0x14(%esp),%ebx
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8049440 <closedir@plt>
mov    $0x7,%ecx
xor    %eax,%eax
movl   $0x0,0xc(%ebx)
mov    %cx,0x3c(%ebx)
orl    $0x4000,0x2c(%ebp)
mov    %edi,(%esi)
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
test   %eax,%eax
je     804e868 <calloc@plt+0x53e8>
mov    %eax,(%esp)
call   8049440 <closedir@plt>
cmpb   $0x0,0x3d(%esp)
movl   $0x0,0xc(%edi)
je     804e873 <calloc@plt+0x53f3>
jmp    804eab8 <calloc@plt+0x5638>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049430 <close@plt>
mov    %edi,(%esi)
mov    0x14(%esp),%eax
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%eax)
je     804ed59 <calloc@plt+0x58d9>
xor    %eax,%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x14(%esp),%esi
lea    0x2c(%ebp),%edx
mov    0x1c(%ebp),%eax
movl   $0x0,(%esp)
mov    %esi,%ecx
call   804dd70 <calloc@plt+0x48f0>
mov    %ax,0x3c(%esi)
mov    0x2c(%ebp),%eax
jmp    804e529 <calloc@plt+0x50a9>
mov    0x14(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x4(%eax),%edx
mov    %ebp,%eax
movl   $0x8053249,(%esp)
call   804e0a0 <calloc@plt+0x4c20>
test   %eax,%eax
setne  %al
jmp    804e989 <calloc@plt+0x5509>
cmpl   $0x3,0x38(%esp)
je     804ed77 <calloc@plt+0x58f7>
mov    0x20(%esp),%eax
call   804dc30 <calloc@plt+0x47b0>
xor    %eax,%eax
jmp    804ea26 <calloc@plt+0x55a6>
testb  $0x2,0x2d(%ebp)
je     804ea22 <calloc@plt+0x55a2>
lea    0x4c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   8049240 <fstatfs64@plt>
test   %eax,%eax
jne    804ed12 <calloc@plt+0x5892>
mov    0x4c(%esp),%eax
cmp    $0x6969,%eax
je     804ea10 <calloc@plt+0x5590>
cmp    $0x1021994,%eax
je     804ea10 <calloc@plt+0x5590>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
movl   $0x804da60,0x28(%ebp)
call   804dad0 <calloc@plt+0x4650>
movl   $0x0,0x28(%ebp)
mov    %eax,0x20(%esp)
jmp    804ea22 <calloc@plt+0x55a2>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049440 <closedir@plt>
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%edi)
jne    804ec67 <calloc@plt+0x57e7>
mov    0x14(%esp),%edi
mov    $0x4,%ebx
mov    %bx,0x3c(%edi)
call   80492e0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%edi)
xor    %eax,%eax
jmp    804ec69 <calloc@plt+0x57e9>
mov    0x14(%esp),%eax
mov    $0x6,%ecx
mov    %cx,0x3c(%eax)
jmp    804ecc7 <calloc@plt+0x5847>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebx
mov    %ebx,%esi
and    $0xffffe000,%esi
jne    804f078 <fts_open+0x2e8>
mov    %ebx,%eax
and    $0x204,%eax
cmp    $0x204,%eax
je     804f078 <fts_open+0x2e8>
test   $0x12,%bl
je     804f078 <fts_open+0x2e8>
movl   $0x58,(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804f0fd <fts_open+0x36d>
mov    %eax,%edi
mov    $0x16,%ecx
mov    %esi,%eax
test   $0x2,%bl
rep stos %eax,%es:(%edi)
mov    0x48(%esp),%eax
mov    %eax,0x28(%ebp)
jne    804f038 <fts_open+0x2a8>
mov    %ebx,0x2c(%ebp)
mov    0x40(%esp),%eax
movl   $0xffffff9c,0x1c(%ebp)
mov    (%eax),%eax
test   %eax,%eax
je     804f0f3 <fts_open+0x363>
mov    0x40(%esp),%edi
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8049270 <strlen@plt>
cmp    %eax,%esi
cmovb  %eax,%esi
add    $0x4,%edi
mov    (%edi),%eax
test   %eax,%eax
jne    804ee18 <fts_open+0x88>
lea    0x1(%esi),%ecx
mov    $0x1000,%ax
cmp    $0x1000,%ecx
cmovb  %eax,%ecx
lea    0x20(%ebp),%edx
lea    0x14(%ebp),%eax
call   804df40 <calloc@plt+0x4ac0>
test   %al,%al
mov    %al,0x17(%esp)
je     804f066 <fts_open+0x2d6>
mov    0x40(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
je     804f0d8 <fts_open+0x348>
xor    %ecx,%ecx
mov    $0x8052e65,%edx
mov    %ebp,%eax
call   804dbb0 <calloc@plt+0x4730>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     804f05b <fts_open+0x2cb>
movl   $0xffffffff,0x30(%eax)
mov    0x40(%esp),%eax
mov    (%eax),%edx
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804ee9f <fts_open+0x10f>
mov    0x2c(%ebp),%eax
shr    $0xa,%eax
and    $0x1,%eax
mov    %al,0x17(%esp)
test   %edx,%edx
je     804f104 <fts_open+0x374>
and    $0x1000,%ebx
xor    %esi,%esi
lea    0x2c(%ebp),%eax
xor    %edi,%edi
mov    %ebx,0x10(%esp)
mov    %edx,%ebx
movl   $0x0,0x1c(%esp)
mov    %eax,0x18(%esp)
jmp    804ef0d <fts_open+0x17d>
cmpb   $0x0,0x17(%esp)
je     804ef64 <fts_open+0x1d4>
mov    $0xb,%eax
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
movl   $0x2,0x70(%ebx)
movl   $0x0,0x74(%ebx)
test   %eax,%eax
je     804ef89 <fts_open+0x1f9>
mov    %edi,0x8(%ebx)
mov    %ebx,%edi
mov    0x40(%esp),%eax
add    $0x1,%esi
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
je     804efb8 <fts_open+0x228>
mov    %ebx,(%esp)
call   8049270 <strlen@plt>
mov    0x10(%esp),%edx
test   %edx,%edx
jne    804ef30 <fts_open+0x1a0>
cmp    $0x2,%eax
jbe    804ef30 <fts_open+0x1a0>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
je     804f020 <fts_open+0x290>
lea    0x0(%esi),%esi
mov    %eax,%ecx
mov    %ebx,%edx
mov    %ebp,%eax
call   804dbb0 <calloc@plt+0x4730>
test   %eax,%eax
mov    %eax,%ebx
je     804f048 <fts_open+0x2b8>
movl   $0x0,0x30(%eax)
mov    0xc(%esp),%eax
test   %edi,%edi
mov    %eax,0x4(%ebx)
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
jne    804eec8 <fts_open+0x138>
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x18(%esp),%edx
movl   $0x0,(%esp)
call   804dd70 <calloc@plt+0x48f0>
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804eef6 <fts_open+0x166>
test   %edi,%edi
movl   $0x0,0x8(%ebx)
je     804f0e8 <fts_open+0x358>
mov    0x1c(%esp),%eax
add    $0x1,%esi
mov    %ebx,0x1c(%esp)
mov    %ebx,0x8(%eax)
mov    0x40(%esp),%eax
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
jne    804ef0d <fts_open+0x17d>
lea    0x0(%esi),%esi
cmp    $0x1,%esi
ja     804f0b8 <fts_open+0x328>
xor    %ecx,%ecx
mov    $0x8052e65,%edx
mov    %ebp,%eax
call   804dbb0 <calloc@plt+0x4730>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     804f048 <fts_open+0x2b8>
mov    $0x9,%edx
mov    %dx,0x3c(%eax)
lea    0x34(%ebp),%edx
mov    %edi,0x8(%eax)
mov    0x2c(%ebp),%eax
call   804dfc0 <calloc@plt+0x4b40>
test   %al,%al
je     804f048 <fts_open+0x2b8>
mov    0x2c(%ebp),%edx
test   $0x204,%edx
je     804f090 <fts_open+0x300>
lea    0x38(%ebp),%eax
mov    %eax,(%esp)
movl   $0xffffffff,0x4(%esp)
call   8050e20 <fts_children+0x1330>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x2f,-0x2(%ebx,%eax,1)
jne    804ef30 <fts_open+0x1a0>
sub    $0x1,%eax
cmp    $0x1,%eax
jne    804f020 <fts_open+0x290>
jmp    804ef30 <fts_open+0x1a0>
mov    %ebx,%eax
and    $0xfd,%ah
or     $0x4,%eax
mov    %eax,0x2c(%ebp)
jmp    804edf8 <fts_open+0x68>
mov    %edi,%eax
call   804dc30 <calloc@plt+0x47b0>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x14(%ebp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    %ebp,(%esp)
call   8049050 <free@plt>
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   80492e0 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebp),%eax
mov    $0x805324a,%ecx
call   804e030 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,0x18(%ebp)
jns    804f000 <fts_open+0x270>
orl    $0x4,0x2c(%ebp)
jmp    804f000 <fts_open+0x270>
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804efc1 <fts_open+0x231>
mov    %edi,%edx
mov    %esi,%ecx
mov    %ebp,%eax
call   804dad0 <calloc@plt+0x4650>
mov    %eax,%edi
jmp    804efc1 <fts_open+0x231>
xchg   %ax,%ax
xor    %edx,%edx
movl   $0x0,0xc(%esp)
jmp    804ee8a <fts_open+0xfa>
nop
mov    %ebx,%edi
mov    %ebx,0x1c(%esp)
jmp    804eefb <fts_open+0x16b>
mov    $0x1000,%ecx
jmp    804ee3e <fts_open+0xae>
xor    %eax,%eax
jmp    804f070 <fts_open+0x2e0>
xor    %edi,%edi
jmp    804efc1 <fts_open+0x231>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%eax
test   %eax,%eax
je     804f168 <fts_close+0x58>
mov    0x30(%eax),%edx
test   %edx,%edx
jns    804f141 <fts_close+0x31>
jmp    804f24c <fts_close+0x13c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
js     804f160 <fts_close+0x50>
mov    %ebx,%eax
mov    0x8(%eax),%ebx
test   %ebx,%ebx
jne    804f130 <fts_close+0x20>
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
jns    804f13f <fts_close+0x2f>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8049050 <free@plt>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f174 <fts_close+0x64>
call   804dc30 <calloc@plt+0x47b0>
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x2c(%esi),%eax
test   $0x2,%ah
je     804f200 <fts_close+0xf0>
mov    0x1c(%esi),%eax
test   %eax,%eax
js     804f1b0 <fts_close+0xa0>
mov    %eax,(%esp)
call   8049430 <close@plt>
test   %eax,%eax
jne    804f240 <fts_close+0x130>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
lea    0x38(%esi),%eax
call   804dc70 <calloc@plt+0x47f0>
mov    0x30(%esi),%eax
test   %eax,%eax
je     804f1c9 <fts_close+0xb9>
mov    %eax,(%esp)
call   8050830 <fts_children+0xd40>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804f230 <fts_close+0x120>
test   %eax,%eax
je     804f1e1 <fts_close+0xd1>
mov    %eax,(%esp)
call   8050830 <fts_children+0xd40>
mov    %esi,(%esp)
call   8049050 <free@plt>
xor    %eax,%eax
test   %ebx,%ebx
jne    804f285 <fts_close+0x175>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   $0x4,%al
jne    804f1b0 <fts_close+0xa0>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049370 <fchdir@plt>
test   %eax,%eax
jne    804f255 <fts_close+0x145>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
test   %eax,%eax
je     804f1b0 <fts_close+0xa0>
call   80492e0 <__errno_location@plt>
mov    %eax,%edi
mov    (%edi),%ebx
jmp    804f1b2 <fts_close+0xa2>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049050 <free@plt>
jmp    804f1e1 <fts_close+0xd1>
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
mov    (%eax),%ebx
jmp    804f1b2 <fts_close+0xa2>
mov    %eax,%ebx
xchg   %ax,%ax
jmp    804f160 <fts_close+0x50>
call   80492e0 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%edi
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
test   %eax,%eax
je     804f1b2 <fts_close+0xa2>
test   %ebx,%ebx
jne    804f1b2 <fts_close+0xa2>
mov    (%edi),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
jmp    804f1b2 <fts_close+0xa2>
call   80492e0 <__errno_location@plt>
mov    %ebx,(%eax)
mov    $0xffffffff,%eax
jmp    804f1f3 <fts_close+0xe3>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%esi
mov    (%esi),%edi
test   %edi,%edi
je     804f3a8 <fts_read+0x108>
mov    0x2c(%esi),%edx
test   $0x40,%dh
jne    804f3a8 <fts_read+0x108>
movzwl 0x40(%edi),%eax
mov    $0x3,%ecx
mov    %cx,0x40(%edi)
cmp    $0x1,%ax
je     804f650 <fts_read+0x3b0>
cmp    $0x2,%ax
je     804f3b8 <fts_read+0x118>
cmpw   $0x1,0x3c(%edi)
jne    804f31d <fts_read+0x7d>
nop
jmp    804f435 <fts_read+0x195>
lea    0x0(%esi),%esi
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8049050 <free@plt>
mov    0x30(%ebx),%edx
test   %edx,%edx
je     804f470 <fts_read+0x1d0>
movzwl 0x40(%ebx),%eax
cmp    $0x4,%ax
jne    804f578 <fts_read+0x2d8>
mov    %ebx,%edi
mov    0x8(%edi),%ebx
test   %ebx,%ebx
jne    804f2f8 <fts_read+0x58>
mov    0x4(%edi),%ebx
mov    0xc(%ebx),%ecx
test   %ecx,%ecx
jne    804f820 <fts_read+0x580>
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8049050 <free@plt>
cmpl   $0xffffffff,0x30(%ebx)
je     804f71d <fts_read+0x47d>
cmpw   $0xb,0x3c(%ebx)
je     804fa4d <fts_read+0x7ad>
mov    0x14(%esi),%edx
mov    0x28(%ebx),%eax
movb   $0x0,(%edx,%eax,1)
mov    0x30(%ebx),%ebp
test   %ebp,%ebp
je     804f6ad <fts_read+0x40d>
movzwl 0x3e(%ebx),%eax
test   $0x2,%al
je     804f66f <fts_read+0x3cf>
mov    0x2c(%esi),%eax
test   $0x4,%al
je     804f6bd <fts_read+0x41d>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
mov    0x2c(%esi),%eax
mov    0x20(%ebx),%edi
test   %edi,%edi
je     804f630 <fts_read+0x390>
mov    $0x7,%edx
mov    %dx,0x3c(%ebx)
test   $0x40,%ah
je     804f45e <fts_read+0x1be>
xor    %eax,%eax
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movzwl 0x3c(%edi),%eax
lea    -0xc(%eax),%ecx
cmp    $0x1,%cx
jbe    804f6e2 <fts_read+0x442>
sub    $0x1,%ax
jne    804f31d <fts_read+0x7d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x40,%dl
je     804f5c8 <fts_read+0x328>
mov    0x44(%edi),%eax
mov    0x48(%edi),%ecx
xor    0x10(%esi),%ecx
xor    0xc(%esi),%eax
or     %eax,%ecx
je     804f5c8 <fts_read+0x328>
testb  $0x2,0x3e(%edi)
jne    804f810 <fts_read+0x570>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f412 <fts_read+0x172>
call   804dc30 <calloc@plt+0x47b0>
movl   $0x0,0x4(%esi)
mov    $0x6,%eax
mov    %edi,%ecx
mov    %ax,0x3c(%edi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
call   804e3a0 <calloc@plt+0x4f20>
add    $0x8c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x4,%ax
jne    804f3d8 <fts_read+0x138>
jmp    804f3f5 <fts_read+0x155>
lea    0x0(%esi),%esi
mov    0x70(%ebx),%edx
mov    0x74(%ebx),%eax
mov    %edx,%ecx
xor    $0x2,%ecx
or     %eax,%ecx
je     804f79b <fts_read+0x4fb>
xor    $0x1,%edx
or     %eax,%edx
jne    804fa4d <fts_read+0x7ad>
add    $0x8c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
call   804dd10 <calloc@plt+0x4890>
test   %eax,%eax
jne    804f77d <fts_read+0x4dd>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804f740 <fts_read+0x4a0>
test   %eax,%eax
je     804f49b <fts_read+0x1fb>
mov    %eax,(%esp)
call   8050830 <fts_children+0xd40>
mov    0x34(%ebx),%eax
lea    0xa4(%ebx),%edi
mov    %eax,0x28(%ebx)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8049040 <memmove@plt>
movl   $0x2f,0x4(%esp)
mov    %edi,(%esp)
call   8049340 <strrchr@plt>
test   %eax,%eax
je     804f504 <fts_read+0x264>
cmp    %eax,%edi
je     804f789 <fts_read+0x4e9>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x18(%esp)
call   8049270 <strlen@plt>
mov    0x18(%esp),%edx
mov    %edi,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,%ebp
lea    0x1(%eax),%eax
mov    %eax,0x8(%esp)
call   8049040 <memmove@plt>
mov    %ebp,0x34(%ebx)
mov    0x14(%esi),%eax
lea    0x34(%esi),%edx
mov    %eax,0x1c(%ebx)
mov    %eax,0x18(%ebx)
mov    0x2c(%esi),%eax
call   804dfc0 <calloc@plt+0x4b40>
movzwl 0x3c(%ebx),%ecx
cmp    $0xb,%cx
mov    %ebx,(%esi)
je     804f440 <fts_read+0x1a0>
cmp    $0x1,%cx
mov    %ebx,%eax
jne    804f3aa <fts_read+0x10a>
mov    0x30(%ebx),%eax
test   %eax,%eax
jne    804f547 <fts_read+0x2a7>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %eax,0xc(%esi)
mov    %edx,0x10(%esi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804e2c0 <calloc@plt+0x4e40>
mov    %eax,%edx
mov    %ebx,%eax
test   %dl,%dl
jne    804f3aa <fts_read+0x10a>
call   80492e0 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804f3aa <fts_read+0x10a>
lea    0x0(%esi),%esi
cmp    $0x2,%ax
je     804f84b <fts_read+0x5ab>
mov    0x4(%ebx),%ecx
mov    0x28(%ecx),%edx
mov    0x1c(%ecx),%ecx
lea    -0x1(%edx),%eax
cmpb   $0x2f,-0x1(%ecx,%edx,1)
cmovne %edx,%eax
add    0x14(%esi),%eax
movb   $0x2f,(%eax)
mov    0x34(%ebx),%ecx
add    $0x1,%eax
mov    %eax,(%esp)
lea    0x1(%ecx),%edx
mov    %edx,0x8(%esp)
lea    0xa4(%ebx),%edx
mov    %edx,0x4(%esp)
call   8049040 <memmove@plt>
movzwl 0x3c(%ebx),%ecx
jmp    804f51c <fts_read+0x27c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f75f <fts_read+0x4bf>
test   $0x20,%dh
jne    804f74d <fts_read+0x4ad>
mov    0x18(%edi),%eax
mov    $0xffffffff,%ecx
mov    %edi,%edx
mov    %eax,(%esp)
mov    %esi,%eax
call   804e0a0 <calloc@plt+0x4c20>
test   %eax,%eax
je     804f6da <fts_read+0x43a>
call   80492e0 <__errno_location@plt>
mov    0x4(%esi),%edx
mov    %edx,%ebx
mov    (%eax),%eax
orw    $0x1,0x3e(%edi)
test   %edx,%edx
mov    %eax,0x20(%edi)
je     804f622 <fts_read+0x382>
mov    0x4(%ebx),%eax
mov    0x18(%eax),%eax
mov    %eax,0x18(%ebx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804f610 <fts_read+0x370>
mov    %edx,%ebx
movl   $0x0,0x4(%esi)
jmp    804f582 <fts_read+0x2e2>
xchg   %ax,%ax
mov    $0x6,%ecx
mov    %cx,0x3c(%ebx)
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804e3a0 <calloc@plt+0x4f20>
mov    0x2c(%esi),%eax
jmp    804f39f <fts_read+0xff>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804dd70 <calloc@plt+0x48f0>
mov    %ax,0x3c(%edi)
mov    %edi,%eax
jmp    804f3aa <fts_read+0x10a>
test   $0x1,%al
jne    804f388 <fts_read+0xe8>
mov    0x4(%ebx),%edx
mov    $0xffffffff,%ecx
mov    %esi,%eax
movl   $0x8053249,(%esp)
call   804e0a0 <calloc@plt+0x4c20>
test   %eax,%eax
je     804f388 <fts_read+0xe8>
call   80492e0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    0x2c(%esi),%eax
or     $0x40,%ah
mov    %eax,0x2c(%esi)
jmp    804f38b <fts_read+0xeb>
mov    %esi,%eax
call   804dd10 <calloc@plt+0x4890>
test   %eax,%eax
jne    804f695 <fts_read+0x3f5>
jmp    804f388 <fts_read+0xe8>
test   $0x2,%ah
je     804f877 <fts_read+0x5d7>
mov    0x24(%ebx),%edx
mov    $0x1,%ecx
mov    %esi,%eax
call   804dcb0 <calloc@plt+0x4830>
jmp    804f37d <fts_read+0xdd>
mov    0x4(%esi),%ebx
jmp    804f622 <fts_read+0x382>
mov    0x1c(%esi),%eax
mov    %edi,%ecx
mov    %edi,%ebx
lea    0x2c(%esi),%edx
movl   $0x1,(%esp)
call   804dd70 <calloc@plt+0x48f0>
cmp    $0x1,%ax
mov    %eax,%ecx
mov    %ax,0x3c(%edi)
jne    804f51c <fts_read+0x27c>
mov    0x2c(%esi),%edx
test   $0x4,%dl
je     804f8e9 <fts_read+0x649>
mov    %edi,(%esi)
mov    %edi,%ebx
jmp    804f528 <fts_read+0x288>
mov    %ebx,(%esp)
call   8049050 <free@plt>
call   80492e0 <__errno_location@plt>
movl   $0x0,(%eax)
xor    %eax,%eax
movl   $0x0,(%esi)
jmp    804f3aa <fts_read+0x10a>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049050 <free@plt>
jmp    804f49b <fts_read+0x1fb>
and    $0xdf,%dh
mov    %edx,0x2c(%esi)
call   804dc30 <calloc@plt+0x47b0>
movl   $0x0,0x4(%esi)
mov    $0x3,%edx
mov    %esi,%eax
call   804e470 <calloc@plt+0x4ff0>
test   %eax,%eax
mov    %eax,0x4(%esi)
je     804f966 <fts_read+0x6c6>
mov    %eax,%ebx
jmp    804f622 <fts_read+0x382>
orl    $0x4000,0x2c(%esi)
jmp    804f3a8 <fts_read+0x108>
cmpb   $0x0,0xa5(%ebx)
jne    804f4d9 <fts_read+0x239>
jmp    804f504 <fts_read+0x264>
mov    0x30(%ebx),%eax
mov    0x4(%ebx),%edi
test   %eax,%eax
jle    804f7bb <fts_read+0x51b>
mov    0x38(%edi),%eax
test   %eax,%eax
jne    804f7bb <fts_read+0x51b>
mov    0x2c(%esi),%eax
and    $0x18,%eax
cmp    $0x18,%eax
je     804f90f <fts_read+0x66f>
mov    0x1c(%esi),%eax
mov    %ebx,%ecx
lea    0x2c(%esi),%edx
movl   $0x0,(%esp)
call   804dd70 <calloc@plt+0x48f0>
mov    %eax,%ecx
mov    %ax,0x3c(%ebx)
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
jne    804f528 <fts_read+0x288>
mov    0x30(%ebx),%eax
test   %eax,%eax
je     804f528 <fts_read+0x288>
mov    0x38(%edi),%eax
test   %eax,%eax
je     804f528 <fts_read+0x288>
sub    $0x1,%eax
mov    %eax,0x38(%edi)
jmp    804f528 <fts_read+0x288>
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%edi),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
jmp    804f3ff <fts_read+0x15f>
mov    0x28(%ebx),%eax
mov    0x14(%esi),%edx
mov    %ebx,(%esi)
movb   $0x0,(%edx,%eax,1)
mov    $0x3,%edx
mov    %esi,%eax
call   804e470 <calloc@plt+0x4ff0>
test   %eax,%eax
mov    %eax,%ebx
je     804f8b0 <fts_read+0x610>
mov    %edi,(%esp)
call   8049050 <free@plt>
jmp    804f582 <fts_read+0x2e2>
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %ebx,%ecx
movl   $0x1,(%esp)
call   804dd70 <calloc@plt+0x48f0>
cmp    $0x1,%ax
mov    %ax,0x3c(%ebx)
je     804f8c2 <fts_read+0x622>
mov    $0x3,%eax
mov    %ax,0x40(%ebx)
jmp    804f582 <fts_read+0x2e2>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049370 <fchdir@plt>
test   %eax,%eax
je     804f37d <fts_read+0xdd>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebp
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049430 <close@plt>
mov    %edi,0x0(%ebp)
mov    %edi,0x20(%ebx)
orl    $0x4000,0x2c(%esi)
jmp    804f37d <fts_read+0xdd>
testb  $0x40,0x2d(%esi)
jne    804f3a8 <fts_read+0x108>
mov    0x4(%edi),%ebx
jmp    804f332 <fts_read+0x92>
mov    0x2c(%esi),%edx
test   $0x4,%dl
jne    804f869 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x805324a,%ecx
call   804e030 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,0x24(%ebx)
js     804f99a <fts_read+0x6fa>
orw    $0x2,0x3e(%ebx)
jmp    804f869 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x805324a,%ecx
call   804e030 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,0x24(%edi)
js     804f9b2 <fts_read+0x712>
orw    $0x2,0x3e(%edi)
movzwl 0x3c(%edi),%ecx
jmp    804f51c <fts_read+0x27c>
mov    0x2c(%edi),%edx
testb  $0x2,0x2d(%edx)
mov    0x30(%edx),%ebp
je     804f7bb <fts_read+0x51b>
test   %ebp,%ebp
je     804fa52 <fts_read+0x7b2>
mov    0x44(%edi),%eax
mov    %edx,0x18(%esp)
mov    0x48(%edi),%edx
mov    %ebp,(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,0x24(%esp)
call   8050410 <fts_children+0x920>
mov    0x18(%esp),%edx
test   %eax,%eax
je     804f9cf <fts_read+0x72f>
movzbl 0x8(%eax),%edx
test   %dl,%dl
je     804f7bb <fts_read+0x51b>
movzwl 0x3c(%ebx),%ecx
jmp    804f528 <fts_read+0x288>
mov    0x2c(%esi),%eax
test   $0x40,%ah
jne    804f3a8 <fts_read+0x108>
mov    0x20(%edi),%ebp
test   %ebp,%ebp
je     804f989 <fts_read+0x6e9>
cmpw   $0x4,0x3c(%edi)
je     804f989 <fts_read+0x6e9>
mov    $0x7,%ebx
mov    %bx,0x3c(%edi)
lea    0x34(%esi),%edx
mov    %edi,%ecx
call   804e3a0 <calloc@plt+0x4f20>
mov    %edi,%eax
jmp    804f3aa <fts_read+0x10a>
call   80492e0 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    $0x7,%eax
mov    %ax,0x3c(%ebx)
jmp    804f869 <fts_read+0x5c9>
call   80492e0 <__errno_location@plt>
mov    $0x7,%ecx
mov    (%eax),%eax
mov    %eax,0x20(%edi)
mov    $0x7,%eax
mov    %ax,0x3c(%edi)
jmp    804f714 <fts_read+0x474>
movl   $0xc,(%esp)
mov    %edx,0x1c(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804f7bb <fts_read+0x51b>
mov    0x1c(%esp),%edx
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%edx),%eax
mov    %eax,(%esp)
call   8049240 <fstatfs64@plt>
xor    %edx,%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
jne    804fa17 <fts_read+0x777>
cmpl   $0x52654973,0x2c(%esp)
sete   %dl
mov    %dl,0x8(%ecx)
mov    0x44(%edi),%eax
mov    %edx,0x1c(%esp)
mov    0x48(%edi),%edx
mov    %ecx,0x18(%esp)
mov    %eax,(%ecx)
mov    %edx,0x4(%ecx)
mov    %ecx,0x4(%esp)
mov    %ebp,(%esp)
call   8050c70 <fts_children+0x1180>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804fa98 <fts_read+0x7f8>
cmp    %eax,%ecx
je     804f955 <fts_read+0x6b5>
call   80493f0 <abort@plt>
movl   $0x8049050,0x10(%esp)
movl   $0x804da40,0xc(%esp)
movl   $0x804da10,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %edx,0x18(%esp)
call   8050660 <fts_children+0xb70>
mov    0x18(%esp),%edx
test   %eax,%eax
mov    %eax,%ebp
mov    %eax,0x30(%edx)
jne    804f927 <fts_read+0x687>
jmp    804f7bb <fts_read+0x51b>
mov    %ecx,(%esp)
call   8049050 <free@plt>
jmp    804f7bb <fts_read+0x51b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0xc,%esp
mov    0x18(%esp),%eax
cmp    $0x4,%eax
ja     804fad0 <fts_set+0x20>
mov    0x14(%esp),%edx
mov    %ax,0x40(%edx)
xor    %eax,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
movl   $0x16,(%eax)
mov    $0x1,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
testl  $0xffffdfff,0x34(%esp)
mov    0x30(%esp),%ebx
jne    804fbe8 <fts_children+0xf8>
call   80492e0 <__errno_location@plt>
mov    (%ebx),%esi
movl   $0x0,(%eax)
mov    %eax,%edi
testb  $0x40,0x2d(%ebx)
jne    804fc00 <fts_children+0x110>
movzwl 0x3c(%esi),%ecx
cmp    $0x9,%cx
je     804fbd8 <fts_children+0xe8>
xor    %eax,%eax
cmp    $0x1,%cx
jne    804fb76 <fts_children+0x86>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804fb44 <fts_children+0x54>
call   804dc30 <calloc@plt+0x47b0>
cmpl   $0x2000,0x34(%esp)
mov    $0x1,%ebp
je     804fb80 <fts_children+0x90>
mov    0x30(%esi),%eax
test   %eax,%eax
jne    804fb6a <fts_children+0x7a>
mov    0x18(%esi),%eax
cmpb   $0x2f,(%eax)
je     804fb6a <fts_children+0x7a>
mov    0x2c(%ebx),%edx
test   $0x4,%dl
je     804fb98 <fts_children+0xa8>
mov    %ebp,%edx
mov    %ebx,%eax
call   804e470 <calloc@plt+0x4ff0>
mov    %eax,0x4(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x30(%esi),%eax
mov    $0x2,%bp
orl    $0x2000,0x2c(%ebx)
test   %eax,%eax
je     804fb5a <fts_children+0x6a>
jmp    804fb6a <fts_children+0x7a>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    $0x805324a,%ecx
call   804e030 <calloc@plt+0x4bb0>
test   %eax,%eax
mov    %eax,%esi
js     804fc20 <fts_children+0x130>
mov    %ebp,%edx
mov    %ebx,%eax
call   804e470 <calloc@plt+0x4ff0>
testb  $0x2,0x2d(%ebx)
mov    %eax,0x4(%ebx)
je     804fc08 <fts_children+0x118>
mov    $0x1,%ecx
mov    %esi,%edx
mov    %ebx,%eax
call   804dcb0 <calloc@plt+0x4830>
mov    0x4(%ebx),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x8(%esi),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   80492e0 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804fb76 <fts_children+0x86>
nop
mov    %esi,(%esp)
call   8049370 <fchdir@plt>
test   %eax,%eax
jne    804fc2e <fts_children+0x13e>
mov    %esi,(%esp)
call   8049430 <close@plt>
jmp    804fbcb <fts_children+0xdb>
xchg   %ax,%ax
movl   $0x0,0x4(%ebx)
xor    %eax,%eax
jmp    804fb76 <fts_children+0x86>
mov    (%edi),%ebx
mov    %esi,(%esp)
call   8049430 <close@plt>
xor    %eax,%eax
mov    %ebx,(%edi)
jmp    804fb76 <fts_children+0x86>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x0,0x8(%esp)
mov    0x24(%esp),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   80513f0 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%edx
js     804fcb8 <fts_children+0x1c8>
mov    %eax,%ecx
mov    %esi,%ebx
and    $0xfffffffe,%eax
or     $0x1,%ecx
test   %bl,%bl
cmove  %eax,%ecx
xor    %eax,%eax
cmp    %edx,%ecx
je     804fcb0 <fts_children+0x1c0>
mov    %ecx,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   80513f0 <fts_children+0x1900>
cmp    $0xffffffff,%eax
sete   %al
movzbl %al,%eax
neg    %eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    $0xffffffff,%eax
jmp    804fcb0 <fts_children+0x1c0>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x406,0x4(%esp)
mov    %eax,(%esp)
call   80513f0 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8049160 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8051350 <fts_children+0x1860>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804fd30 <fts_children+0x240>
test   %dl,%dl
je     804fd27 <fts_children+0x237>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804fd50 <fts_children+0x260>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804fd27 <fts_children+0x237>
call   80492e0 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   80492e0 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
movl   $0x95f616,0x18(%eax)
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
cmpl   $0x95f616,0x18(%esi)
jne    804fe4d <fts_children+0x35d>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
mov    %edx,%ebx
or     %eax,%ebx
je     804fe00 <fts_children+0x310>
mov    0x58(%edi),%ebx
mov    %ebx,%ecx
mov    %ebx,0x18(%esp)
mov    0x5c(%edi),%ebx
xor    (%esi),%ecx
mov    %ebx,0x1c(%esp)
xor    0x4(%esi),%ebx
or     %ecx,%ebx
je     804fe30 <fts_children+0x340>
mov    %eax,%ecx
mov    %edx,%ebx
add    $0x1,%ecx
adc    $0x0,%ebx
mov    %ecx,%ebp
and    %eax,%ebp
and    %ebx,%edx
xor    %eax,%eax
or     %ebp,%edx
mov    %ecx,0x10(%esi)
mov    %ebx,0x14(%esi)
jne    804fe26 <fts_children+0x336>
mov    %ebx,%eax
or     %ecx,%eax
je     804fe40 <fts_children+0x350>
mov    0x18(%esp),%ebx
mov    0x1c(%esp),%ecx
jmp    804fe14 <fts_children+0x324>
lea    0x0(%esi),%esi
mov    0x58(%edi),%ebx
mov    0x5c(%edi),%ecx
movl   $0x1,0x10(%esi)
movl   $0x0,0x14(%esi)
mov    (%edi),%eax
mov    0x4(%edi),%edx
mov    %ebx,(%esi)
mov    %ecx,0x4(%esi)
mov    %eax,0x8(%esi)
xor    %eax,%eax
mov    %edx,0xc(%esi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    (%edi),%ecx
mov    0x4(%edi),%ebx
xor    0xc(%esi),%ebx
xor    0x8(%esi),%ecx
or     %ecx,%ebx
jne    804fdd1 <fts_children+0x2e1>
nop
add    $0x2c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x80532ba,0xc(%esp)
movl   $0x3c,0x8(%esp)
movl   $0x8053290,0x4(%esp)
movl   $0x80532a2,(%esp)
call   8049460 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x24(%esp),%edx
test   $0x40,%dl
cmovne 0x28(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048ff0 <open64@plt>
mov    %eax,(%esp)
call   8051310 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
cmp    $0x9,%eax
push   %edi
push   %esi
push   %ebx
ja     804ff36 <fts_children+0x446>
mov    $0xb,%ebx
mov    $0xaaaaaaab,%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%ebx
jbe    804ff2f <fts_children+0x43f>
mov    %ebx,%eax
mul    %ebp
shr    %edx
lea    (%edx,%edx,2),%eax
cmp    %eax,%ebx
je     804ff20 <fts_children+0x430>
mov    $0x10,%edi
mov    $0x9,%esi
mov    $0x3,%ecx
jmp    804ff0d <fts_children+0x41d>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
add    $0x8,%edi
test   %edx,%edx
je     804ff20 <fts_children+0x430>
add    %edi,%esi
add    $0x2,%ecx
cmp    %ebx,%esi
jb     804ff00 <fts_children+0x410>
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
test   %edx,%edx
jne    804ff28 <fts_children+0x438>
add    $0x2,%ebx
cmp    $0xffffffff,%ebx
jne    804fed8 <fts_children+0x3e8>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%ecx
jmp    804ff16 <fts_children+0x426>
or     $0x1,%eax
cmp    $0xffffffff,%eax
mov    %eax,%ebx
jne    804fece <fts_children+0x3de>
jmp    804ff28 <fts_children+0x438>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
xor    %edx,%edx
ror    $0x3,%eax
divl   0x8(%esp)
mov    %edx,%eax
ret
mov    0x8(%esp),%eax
cmp    %eax,0x4(%esp)
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x8(%eax),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   *0x18(%ebx)
cmp    0x8(%ebx),%eax
jae    804ff92 <fts_children+0x4a2>
mov    (%ebx),%edx
add    $0x18,%esp
pop    %ebx
lea    (%edx,%eax,8),%eax
ret
call   80493f0 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    %ecx,0xc(%esp)
mov    0x30(%esp),%ebp
call   804ff70 <fts_children+0x480>
mov    0xc(%esp),%ecx
mov    %eax,%ebx
mov    %eax,(%ecx)
mov    (%eax),%eax
test   %eax,%eax
je     8050026 <fts_children+0x536>
cmp    %eax,%edi
je     804ffda <fts_children+0x4ea>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
je     805001f <fts_children+0x52f>
mov    (%ebx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     8050000 <fts_children+0x510>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     8050058 <fts_children+0x568>
mov    (%edx),%edi
mov    0x4(%edx),%ebp
mov    %edi,(%ebx)
mov    %ebp,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%edx),%eax
cmp    %edi,%eax
je     8050035 <fts_children+0x545>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
jne    8050030 <fts_children+0x540>
mov    0x4(%ebx),%ebx
mov    0x4(%ebx),%edx
test   %edx,%edx
jne    8050008 <fts_children+0x518>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4(%ebx),%edx
mov    (%edx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     8050000 <fts_children+0x510>
mov    0x4(%edx),%ecx
mov    %ecx,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,(%ebx)
jmp    8050000 <fts_children+0x510>
mov    (%eax),%edx
mov    %eax,%ecx
cmp    $0x8053334,%edx
je     8050108 <fts_children+0x618>
flds   0x8(%edx)
flds   0x8053348
fxch   %st(1)
fucomi %st(1),%st
jbe    80500c8 <fts_children+0x5d8>
flds   0x805334c
fucomip %st(1),%st
jbe    80500d0 <fts_children+0x5e0>
flds   0xc(%edx)
flds   0x8053350
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    80500d8 <fts_children+0x5e8>
flds   (%edx)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     80500e0 <fts_children+0x5f0>
faddp  %st,%st(2)
flds   0x4(%edx)
fucomi %st(2),%st
jbe    80500e8 <fts_children+0x5f8>
fld1
fucomip %st(1),%st
fstp   %st(0)
jb     80500f0 <fts_children+0x600>
fucomip %st(1),%st
fstp   %st(0)
mov    $0x1,%eax
jbe    80500f8 <fts_children+0x608>
jmp    805010d <fts_children+0x61d>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
fstp   %st(0)
jmp    80500f8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    80500f8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    80500f8 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    80500f8 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    80500f8 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8053334,(%ecx)
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
repz ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%edx),%edi
cmp    0x4(%edx),%edi
mov    %edx,0x4(%esp)
mov    %cl,0xb(%esp)
jae    8050194 <fts_children+0x6a4>
mov    (%edi),%ebx
test   %ebx,%ebx
je     8050188 <fts_children+0x698>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
jne    8050147 <fts_children+0x657>
jmp    805017a <fts_children+0x68a>
nop
mov    0x4(%eax),%ecx
test   %edx,%edx
mov    %ecx,0x4(%ebp)
mov    %ebp,0x4(%eax)
je     8050178 <fts_children+0x688>
mov    %edx,%ebp
mov    0x0(%ebp),%ebx
mov    %esi,%eax
mov    %ebx,%edx
call   804ff70 <fts_children+0x480>
mov    0x4(%ebp),%edx
mov    (%eax),%ecx
test   %ecx,%ecx
jne    8050138 <fts_children+0x648>
mov    %ebx,(%eax)
addl   $0x1,0xc(%esi)
test   %edx,%edx
movl   $0x0,0x0(%ebp)
mov    0x24(%esi),%eax
mov    %eax,0x4(%ebp)
mov    %ebp,0x24(%esi)
jne    8050145 <fts_children+0x655>
xchg   %ax,%ax
mov    (%edi),%ebx
cmpb   $0x0,0xb(%esp)
movl   $0x0,0x4(%edi)
je     80501a8 <fts_children+0x6b8>
mov    0x4(%esp),%eax
add    $0x8,%edi
cmp    %edi,0x4(%eax)
ja     8050128 <fts_children+0x638>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %esi,%eax
call   804ff70 <fts_children+0x480>
mov    %eax,%edx
mov    (%eax),%eax
test   %eax,%eax
je     80501f2 <fts_children+0x702>
mov    0x24(%esi),%eax
test   %eax,%eax
je     80501fa <fts_children+0x70a>
mov    0x4(%eax),%ecx
mov    %ecx,0x24(%esi)
mov    0x4(%edx),%ecx
mov    %ebx,(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x4(%edx)
mov    0x4(%esp),%eax
add    $0x8,%edi
movl   $0x0,-0x8(%edi)
subl   $0x1,0xc(%eax)
mov    0x4(%esp),%eax
cmp    %edi,0x4(%eax)
ja     8050128 <fts_children+0x638>
jmp    8050194 <fts_children+0x6a4>
mov    %ebx,(%edx)
addl   $0x1,0xc(%esi)
jmp    80501d1 <fts_children+0x6e1>
movl   $0x8,(%esp)
mov    %edx,0xc(%esp)
call   80491c0 <malloc@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    80501c6 <fts_children+0x6d6>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%ebx
mov    0x4(%eax),%esi
xor    %eax,%eax
cmp    %esi,%ebx
jae    8050296 <fts_children+0x7a6>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%edx
test   %edx,%edx
je     805028f <fts_children+0x79f>
mov    0x4(%ebx),%edx
mov    $0x1,%ecx
test   %edx,%edx
je     805028a <fts_children+0x79a>
lea    0x0(%esi),%esi
mov    0x4(%edx),%edx
add    $0x1,%ecx
test   %edx,%edx
jne    8050280 <fts_children+0x790>
cmp    %ecx,%eax
cmovb  %ecx,%eax
add    $0x8,%ebx
cmp    %esi,%ebx
jb     8050268 <fts_children+0x778>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
xor    %edx,%edx
push   %esi
push   %ebx
mov    0x10(%esp),%edi
xor    %ebx,%ebx
mov    (%edi),%ecx
mov    0x4(%edi),%esi
cmp    %esi,%ecx
jae    80502e1 <fts_children+0x7f1>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     80502da <fts_children+0x7ea>
mov    0x4(%ecx),%eax
add    $0x1,%ebx
add    $0x1,%edx
test   %eax,%eax
je     80502da <fts_children+0x7ea>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    80502d0 <fts_children+0x7e0>
add    $0x8,%ecx
cmp    %esi,%ecx
jb     80502b8 <fts_children+0x7c8>
xor    %eax,%eax
cmp    %ebx,0xc(%edi)
je     80502ec <fts_children+0x7fc>
pop    %ebx
pop    %esi
pop    %edi
ret
cmp    %edx,0x10(%edi)
pop    %ebx
pop    %esi
sete   %al
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    0x54(%esp),%ebx
mov    0xc(%eax),%edi
mov    (%eax),%ecx
mov    0x4(%eax),%ebp
mov    0x10(%eax),%esi
mov    %edi,0x24(%esp)
xor    %edi,%edi
cmp    %ebp,%ecx
mov    %esi,0x20(%esp)
mov    0x8(%eax),%esi
jae    805035e <fts_children+0x86e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     8050357 <fts_children+0x867>
mov    0x4(%ecx),%eax
mov    $0x1,%edx
test   %eax,%eax
je     8050352 <fts_children+0x862>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    8050348 <fts_children+0x858>
cmp    %edx,%edi
cmovb  %edx,%edi
add    $0x8,%ecx
cmp    %ebp,%ecx
jb     8050330 <fts_children+0x840>
mov    0x20(%esp),%eax
mov    %ebx,(%esp)
movl   $0x80532c6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x80532de,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    0x24(%esp),%ecx
xor    %edx,%edx
mov    %edx,0x2c(%esp)
xor    %edx,%edx
mov    %ebx,(%esp)
movl   $0x8053310,0x8(%esp)
mov    %ecx,0x28(%esp)
mov    %ecx,0xc(%esp)
fildll 0x28(%esp)
fmuls  0x8053354
mov    %esi,0x28(%esp)
mov    %edx,0x2c(%esp)
movl   $0x1,0x4(%esp)
fildll 0x28(%esp)
fdivrp %st,%st(1)
fstpl  0x10(%esp)
call   80493c0 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x80532f6,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80493c0 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804ff70 <fts_children+0x480>
mov    (%eax),%ecx
mov    %eax,%ebx
test   %ecx,%ecx
jne    805043a <fts_children+0x94a>
jmp    8050453 <fts_children+0x963>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
cmp    %ecx,%esi
je     8050462 <fts_children+0x972>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   *0x1c(%edi)
test   %al,%al
jne    8050460 <fts_children+0x970>
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    8050438 <fts_children+0x948>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
add    $0x10,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    0x10(%esp),%eax
mov    0x10(%eax),%edx
test   %edx,%edx
je     80504a1 <fts_children+0x9b1>
mov    (%eax),%edx
mov    0x4(%eax),%ecx
cmp    %ecx,%edx
jb     8050497 <fts_children+0x9a7>
jmp    80504a7 <fts_children+0x9b7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%edx
cmp    %ecx,%edx
jae    80504a7 <fts_children+0x9b7>
mov    (%edx),%eax
test   %eax,%eax
je     8050490 <fts_children+0x9a0>
add    $0xc,%esp
ret
xor    %eax,%eax
add    $0xc,%esp
ret
call   80493f0 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804ff70 <fts_children+0x480>
mov    %eax,%ebx
mov    %eax,%ecx
jmp    80504d7 <fts_children+0x9e7>
lea    0x0(%esi),%esi
mov    0x4(%ecx),%ecx
test   %ecx,%ecx
je     80504e2 <fts_children+0x9f2>
cmp    %esi,(%ecx)
jne    80504d0 <fts_children+0x9e0>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    80504fb <fts_children+0xa0b>
mov    0x4(%edi),%edx
jmp    80504ee <fts_children+0x9fe>
nop
mov    (%ebx),%eax
test   %eax,%eax
jne    80504f7 <fts_children+0xa07>
add    $0x8,%ebx
cmp    %edx,%ebx
jb     80504e8 <fts_children+0x9f8>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
pop    %ebx
mov    (%eax),%eax
pop    %esi
pop    %edi
ret
jmp    8050510 <fts_children+0xa20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    0x0(%ebp),%edi
cmp    %edi,0x4(%ebp)
jbe    8050568 <fts_children+0xa78>
mov    (%edi),%edx
test   %edx,%edx
je     805055c <fts_children+0xa6c>
cmp    %eax,%ebx
jbe    8050568 <fts_children+0xa78>
mov    %edx,(%esi,%eax,4)
mov    0x4(%edi),%edx
lea    0x1(%eax),%ecx
mov    %ecx,%eax
test   %edx,%edx
je     805055c <fts_children+0xa6c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,%eax
je     8050568 <fts_children+0xa78>
mov    (%edx),%ecx
add    $0x1,%eax
mov    %ecx,-0x4(%esi,%eax,4)
mov    0x4(%edx),%edx
test   %edx,%edx
jne    8050548 <fts_children+0xa58>
add    $0x8,%edi
cmp    %edi,0x4(%ebp)
ja     805052a <fts_children+0xa3a>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x30(%esp),%ecx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%eax),%eax
cmp    %eax,0x4(%ecx)
mov    %eax,0xc(%esp)
jbe    80505d8 <fts_children+0xae8>
mov    0xc(%esp),%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    80505ab <fts_children+0xabb>
jmp    80505c2 <fts_children+0xad2>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   *%esi
test   %al,%al
je     80505d8 <fts_children+0xae8>
mov    0x4(%ebp),%ebp
add    $0x1,%ebx
test   %ebp,%ebp
jne    80505a8 <fts_children+0xab8>
mov    0x30(%esp),%eax
addl   $0x8,0xc(%esp)
mov    0xc(%esp),%edx
cmp    %edx,0x4(%eax)
ja     8050594 <fts_children+0xaa4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    0xc(%esp),%ebx
mov    0x10(%esp),%esi
movzbl (%ebx),%ecx
test   %cl,%cl
je     8050622 <fts_children+0xb32>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %cl,%eax
mov    %edx,%ecx
shl    $0x5,%ecx
add    $0x1,%ebx
sub    %edx,%ecx
xor    %edx,%edx
add    %ecx,%eax
movzbl (%ebx),%ecx
div    %esi
test   %cl,%cl
jne    8050608 <fts_children+0xb18>
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x0,(%eax)
movl   $0x3f800000,0x4(%eax)
movl   $0x3f4ccccd,0x8(%eax)
movl   $0x3fb4fdf4,0xc(%eax)
movb   $0x0,0x10(%eax)
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x804ff50,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%edi
mov    0x4c(%esp),%esi
movl   $0x28,(%esp)
mov    0x44(%esp),%ebx
test   %edi,%edi
cmove  %eax,%edi
test   %esi,%esi
mov    $0x804ff60,%eax
cmove  %eax,%esi
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8050798 <fts_children+0xca8>
test   %ebx,%ebx
mov    $0x8053334,%eax
cmove  %eax,%ebx
mov    %ebx,0x14(%ebp)
lea    0x14(%ebp),%eax
call   8050060 <fts_children+0x570>
test   %al,%al
je     8050781 <fts_children+0xc91>
cmpb   $0x0,0x10(%ebx)
flds   0x8(%ebx)
jne    8050710 <fts_children+0xc20>
mov    0x40(%esp),%ecx
xor    %ebx,%ebx
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8053358
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8050778 <fts_children+0xc88>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,0x40(%esp)
jmp    8050712 <fts_children+0xc22>
nop
fstp   %st(0)
mov    0x40(%esp),%eax
call   804fec0 <fts_children+0x3d0>
cmp    $0x3fffffff,%eax
mov    %eax,%ebx
ja     805077a <fts_children+0xc8a>
test   %eax,%eax
mov    %eax,0x8(%ebp)
je     8050781 <fts_children+0xc91>
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   8049480 <calloc@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     8050781 <fts_children+0xc91>
lea    (%eax,%ebx,8),%eax
mov    %eax,0x4(%ebp)
mov    0x50(%esp),%eax
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
mov    %edi,0x18(%ebp)
mov    %eax,0x20(%ebp)
mov    %ebp,%eax
mov    %esi,0x1c(%ebp)
movl   $0x0,0x24(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
movl   $0x0,0x8(%ebp)
mov    %ebp,(%esp)
call   8049050 <free@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    805076c <fts_children+0xc7c>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8050816 <fts_children+0xd26>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
test   %eax,%eax
je     805080e <fts_children+0xd1e>
mov    0x4(%edi),%ebx
mov    0x20(%esi),%edx
test   %ebx,%ebx
jne    80507d2 <fts_children+0xce2>
jmp    80507f6 <fts_children+0xd06>
lea    0x0(%esi),%esi
mov    %eax,%ebx
test   %edx,%edx
je     80507e0 <fts_children+0xcf0>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *%edx
mov    0x20(%esi),%edx
mov    0x4(%ebx),%eax
mov    0x24(%esi),%ecx
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %ecx,0x4(%ebx)
mov    %ebx,0x24(%esi)
jne    80507d0 <fts_children+0xce0>
test   %edx,%edx
je     8050801 <fts_children+0xd11>
mov    (%edi),%eax
mov    %eax,(%esp)
call   *%edx
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     80507b8 <fts_children+0xcc8>
movl   $0x0,0xc(%esi)
movl   $0x0,0x10(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x20(%esi),%edx
test   %edx,%edx
je     8050848 <fts_children+0xd58>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    80508ba <fts_children+0xdca>
mov    0x4(%esi),%eax
mov    (%esi),%edi
cmp    %eax,%edi
jae    8050881 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edi),%eax
test   %eax,%eax
jne    805086a <fts_children+0xd7a>
jmp    8050879 <fts_children+0xd89>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049050 <free@plt>
test   %ebx,%ebx
jne    8050868 <fts_children+0xd78>
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     8050858 <fts_children+0xd68>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    8050892 <fts_children+0xda2>
jmp    80508a1 <fts_children+0xdb1>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049050 <free@plt>
test   %ebx,%ebx
jne    8050890 <fts_children+0xda0>
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049050 <free@plt>
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8050881 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
mov    %edi,%ebx
test   %eax,%eax
jne    80508da <fts_children+0xdea>
jmp    80508e7 <fts_children+0xdf7>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *0x20(%esi)
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    80508d8 <fts_children+0xde8>
mov    0x4(%esi),%eax
add    $0x8,%edi
cmp    %edi,%eax
ja     80508c8 <fts_children+0xdd8>
jmp    805084b <fts_children+0xd5b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    0x64(%esp),%eax
mov    0x14(%esi),%edi
cmpb   $0x0,0x10(%edi)
flds   0x8(%edi)
jne    8050960 <fts_children+0xe70>
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    %ebx,0x14(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8053358
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8050a40 <fts_children+0xf50>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,%eax
jmp    8050962 <fts_children+0xe72>
fstp   %st(0)
call   804fec0 <fts_children+0x3d0>
mov    %eax,%ebx
lea    -0x1(%eax),%eax
cmp    $0x3ffffffe,%eax
ja     8050a42 <fts_children+0xf52>
cmp    %ebx,0x8(%esi)
je     8050a30 <fts_children+0xf40>
movl   $0x8,0x4(%esp)
mov    %ebx,(%esp)
call   8049480 <calloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     8050a42 <fts_children+0xf52>
lea    (%eax,%ebx,8),%eax
xor    %ecx,%ecx
mov    %eax,0x2c(%esp)
mov    0x18(%esi),%eax
mov    %esi,%edx
mov    %ebx,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,0x40(%esp)
mov    0x1c(%esi),%eax
mov    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x48(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x4c(%esp)
lea    0x28(%esp),%eax
call   8050110 <fts_children+0x620>
test   %al,%al
mov    %eax,%ebx
jne    8050a50 <fts_children+0xf60>
mov    0x4c(%esp),%eax
mov    $0x1,%ecx
lea    0x28(%esp),%edx
mov    %eax,0x24(%esi)
mov    %esi,%eax
call   8050110 <fts_children+0x620>
test   %al,%al
je     8050a85 <fts_children+0xf95>
xor    %ecx,%ecx
mov    %esi,%eax
lea    0x28(%esp),%edx
call   8050110 <fts_children+0x620>
test   %al,%al
je     8050a85 <fts_children+0xf95>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x50,%esp
mov    $0x1,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
fstp   %st(0)
add    $0x50,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x30(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esi)
mov    0x4c(%esp),%eax
mov    %eax,0x24(%esi)
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%edi
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebx
test   %edi,%edi
je     8050c18 <fts_children+0x1128>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804ffa0 <fts_children+0x4b0>
test   %eax,%eax
je     8050ad8 <fts_children+0xfe8>
test   %ebx,%ebx
je     8050b58 <fts_children+0x1068>
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  0x8(%eax)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050b18 <fts_children+0x1028>
jmp    8050b68 <fts_children+0x1078>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     8050c20 <fts_children+0x1130>
mov    0x24(%esi),%eax
test   %eax,%eax
je     8050c34 <fts_children+0x1144>
mov    0x4(%eax),%edx
mov    %edx,0x24(%esi)
mov    0x4(%ebx),%edx
mov    %edi,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x4(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%esi),%eax
call   8050060 <fts_children+0x570>
mov    0x14(%esi),%ecx
xor    %edx,%edx
mov    0x8(%esi),%eax
flds   0x8(%ecx)
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
fld    %st(2)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050b10 <fts_children+0x1020>
cmpb   $0x0,0x10(%ecx)
fmuls  0xc(%ecx)
jne    8050bb8 <fts_children+0x10c8>
fmulp  %st,%st(1)
jmp    8050bba <fts_children+0x10ca>
lea    0x0(%esi),%esi
fstp   %st(1)
flds   0x8053358
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8050c4a <fts_children+0x115a>
fnstcw 0x1e(%esp)
mov    %esi,(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   8050900 <fts_children+0xe10>
test   %al,%al
je     8050c4c <fts_children+0x115c>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804ffa0 <fts_children+0x4b0>
test   %eax,%eax
je     8050b18 <fts_children+0x1028>
call   80493f0 <abort@plt>
lea    0x0(%esi),%esi
mov    %edi,(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
addl   $0x1,0xc(%esi)
jmp    8050ace <fts_children+0xfde>
movl   $0x8,(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
jne    8050b37 <fts_children+0x1047>
jmp    8050c4c <fts_children+0x115c>
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    8050ace <fts_children+0xfde>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
jmp    8050a90 <fts_children+0xfa0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x34(%esp),%ebx
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8050a90 <fts_children+0xfa0>
cmp    $0xffffffff,%eax
je     8050ca8 <fts_children+0x11b8>
test   %eax,%eax
mov    %ebx,%eax
cmove  0x1c(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    8050c9e <fts_children+0x11ae>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
lea    0x2c(%esp),%ecx
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %esi,%eax
call   804ffa0 <fts_children+0x4b0>
test   %eax,%eax
mov    %eax,%edi
je     8050de8 <fts_children+0x12f8>
mov    %eax,%ebp
mov    0x2c(%esp),%eax
subl   $0x1,0x10(%esi)
mov    (%eax),%eax
test   %eax,%eax
jne    8050cf8 <fts_children+0x1208>
jmp    8050d08 <fts_children+0x1218>
lea    0x0(%esi),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
sub    $0x1,%eax
mov    %eax,0xc(%esi)
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  (%eax)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050cf8 <fts_children+0x1208>
lea    0x14(%esi),%eax
call   8050060 <fts_children+0x570>
mov    0x8(%esi),%eax
xor    %edx,%edx
mov    0x14(%esi),%ecx
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
flds   (%ecx)
fmul   %st(2),%st
fucomip %st(1),%st
fstp   %st(0)
jbe    8050cf0 <fts_children+0x1200>
cmpb   $0x0,0x10(%ecx)
fmuls  0x4(%ecx)
je     8050df0 <fts_children+0x1300>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,%ebp
mov    %esi,(%esp)
call   8050900 <fts_children+0xe10>
test   %al,%al
jne    8050cf8 <fts_children+0x1208>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    8050dca <fts_children+0x12da>
lea    0x0(%esi,%eiz,1),%esi
jmp    8050dd9 <fts_children+0x12e9>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8049050 <free@plt>
test   %ebx,%ebx
jne    8050dc8 <fts_children+0x12d8>
movl   $0x0,0x24(%esi)
mov    %edi,%ebp
jmp    8050cf8 <fts_children+0x1208>
nop
xor    %ebp,%ebp
jmp    8050cf8 <fts_children+0x1208>
nop
fmuls  0x8(%ecx)
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
jmp    8050d9f <fts_children+0x12af>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
movb   $0x1,0x1c(%eax)
movl   $0x0,0x14(%eax)
movl   $0x0,0x18(%eax)
mov    %edx,(%eax)
mov    %edx,0x4(%eax)
mov    %edx,0x8(%eax)
mov    %edx,0xc(%eax)
mov    %edx,0x10(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movzbl 0x1c(%eax),%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%edi
movzbl 0x1c(%edx),%eax
mov    0x14(%edx),%ecx
xor    $0x1,%eax
movzbl %al,%esi
add    %esi,%ecx
and    $0x3,%ecx
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %edi,(%ebx)
mov    0x18(%edx),%ebx
mov    %ecx,0x14(%edx)
cmp    %ecx,%ebx
jne    8050e96 <fts_children+0x13a6>
add    %esi,%ebx
and    $0x3,%ebx
mov    %ebx,0x18(%edx)
movb   $0x0,0x1c(%edx)
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%edx
cmpb   $0x0,0x1c(%edx)
jne    8050eda <fts_children+0x13ea>
mov    0x14(%edx),%ecx
mov    0x10(%edx),%esi
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %esi,(%ebx)
cmp    0x18(%edx),%ecx
je     8050ed0 <fts_children+0x13e0>
add    $0x3,%ecx
and    $0x3,%ecx
mov    %ecx,0x14(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
movb   $0x1,0x1c(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
call   80493f0 <abort@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049320 <nl_langinfo@plt>
mov    0x8057370,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x8052e65,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     8050fac <fts_children+0x14bc>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8050f77 <fts_children+0x1487>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8050f50 <fts_children+0x1460>
nop
mov    %ebp,(%esp)
call   8049270 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049270 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8050fa8 <fts_children+0x14b8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048fe0 <strcmp@plt>
test   %eax,%eax
je     8050f6b <fts_children+0x147b>
cmp    $0x2a,%bl
jne    8050f30 <fts_children+0x1440>
cmpb   $0x0,0x1(%ebp)
jne    8050f30 <fts_children+0x1440>
mov    %ebp,(%esp)
call   8049270 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8053365,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    805126d <fts_children+0x177d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8050f77 <fts_children+0x1487>
movl   $0x805336b,(%esp)
call   80491a0 <getenv@plt>
test   %eax,%eax
je     8050fc5 <fts_children+0x14d5>
cmpb   $0x0,(%eax)
jne    80511d3 <fts_children+0x16e3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x805335c,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     80511c4 <fts_children+0x16d4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   80491c0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8051263 <fts_children+0x1773>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8049060 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     805102c <fts_children+0x153c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     80511a8 <fts_children+0x16b8>
movl   $0x8052def,0x4(%esp)
mov    %eax,(%esp)
call   8049200 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     80511a0 <fts_children+0x16b0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8051186 <fts_children+0x1696>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8051090 <fts_children+0x15a0>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8051090 <fts_children+0x15a0>
cmp    $0x23,%eax
je     80511fd <fts_children+0x170d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80492d0 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805337b,0x4(%esp)
mov    %esi,(%esp)
call   8049260 <fscanf@plt>
cmp    $0x1,%eax
jle    8051220 <fts_children+0x1730>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049270 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049270 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    805123e <fts_children+0x174e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   80491c0 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8051272 <fts_children+0x1782>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049150 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049150 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     805109c <fts_children+0x15ac>
mov    %esi,(%esp)
call   8049310 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8051220 <fts_children+0x1730>
jmp    80510a5 <fts_children+0x15b5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049430 <close@plt>
mov    $0x8052e65,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049050 <free@plt>
mov    %ebp,0x8057370
jmp    8050f1f <fts_children+0x142f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    8050feb <fts_children+0x14fb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049270 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     80511c4 <fts_children+0x16d4>
lea    -0x1(%eax),%eax
jmp    8050fd4 <fts_children+0x14e4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8051217 <fts_children+0x1727>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    805128c <fts_children+0x179c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    80511f8 <fts_children+0x1708>
cmp    $0xffffffff,%eax
jne    8051090 <fts_children+0x15a0>
mov    %esi,(%esp)
call   8051350 <fts_children+0x1860>
mov    0x10(%esp),%eax
test   %eax,%eax
je     80511a8 <fts_children+0x16b8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    80511ad <fts_children+0x16bd>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   80491b0 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    805113c <fts_children+0x164c>
mov    $0x8052e65,%ebp
jmp    80511b9 <fts_children+0x16c9>
call   80490e0 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x8052e65,%ebp
call   8049050 <free@plt>
mov    %esi,(%esp)
call   8051350 <fts_children+0x1860>
jmp    80511ad <fts_children+0x16bd>
mov    %esi,(%esp)
call   8049310 <__uflow@plt>
jmp    8051212 <fts_children+0x1722>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x28(%esp),%edx
test   $0x40,%dl
cmovne 0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049280 <openat64@plt>
mov    %eax,(%esp)
call   8051310 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80513f0 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
ja     805133f <fts_children+0x184f>
mov    %ebx,(%esp)
call   80512e0 <fts_children+0x17f0>
mov    %eax,%edi
call   80492e0 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049430 <close@plt>
mov    %ebp,(%esi)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80492f0 <fileno@plt>
test   %eax,%eax
js     80513d8 <fts_children+0x18e8>
mov    %ebx,(%esp)
call   80491d0 <__freading@plt>
test   %eax,%eax
jne    80513a8 <fts_children+0x18b8>
mov    %ebx,(%esp)
call   8051510 <fts_children+0x1a20>
test   %eax,%eax
je     80513d8 <fts_children+0x18e8>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049090 <fclose@plt>
test   %edi,%edi
je     805139a <fts_children+0x18aa>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   80492f0 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049390 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8051372 <fts_children+0x1882>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049090 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    8051450 <fts_children+0x1960>
mov    0x8057374,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     80514f8 <fts_children+0x1a08>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   80492b0 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8051470 <fts_children+0x1980>
movl   $0x1,0x8057374
00
test   %ebx,%ebx
js     8051447 <fts_children+0x1957>
cmpl   $0xffffffff,0x8057374
je     80514a0 <fts_children+0x19b0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   80492b0 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   80492e0 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    8051430 <fts_children+0x1940>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80513f0 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%ebx
js     8051447 <fts_children+0x1957>
movl   $0xffffffff,0x8057374
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80492b0 <fcntl@plt>
test   %eax,%eax
js     80514d4 <fts_children+0x19e4>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   80492b0 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    8051447 <fts_children+0x1957>
call   80492e0 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   8049430 <close@plt>
mov    %edi,(%esi)
jmp    8051447 <fts_children+0x1957>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   80513f0 <fts_children+0x1900>
mov    %eax,%ebx
jmp    805143a <fts_children+0x194a>
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8051528 <fts_children+0x1a38>
mov    %ebx,(%esp)
call   80491d0 <__freading@plt>
test   %eax,%eax
jne    8051538 <fts_children+0x1a48>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049010 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8051528 <fts_children+0x1a38>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   8051570 <fts_children+0x1a80>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049010 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     80515b0 <fts_children+0x1ac0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80490a0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    805158f <fts_children+0x1a9f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    805158f <fts_children+0x1a9f>
mov    %ebx,(%esp)
call   80492f0 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8049390 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     80515f7 <fts_children+0x1b07>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    80515ef <fts_children+0x1aff>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    8051650 <fts_children+0x1b60>
cmp    %ebp,%ecx
ja     8051688 <fts_children+0x1b98>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8051638 <fts_children+0x1b48>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     8051678 <fts_children+0x1b88>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8051698 <fts_children+0x1ba8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8051708 <fts_children+0x1c18>
cmp    %edx,%eax
jb     8051708 <fts_children+0x1c18>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8051718 <fts_children+0x1c28>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    80516f9 <fts_children+0x1c09>
cmp    (%esp),%esi
je     8051718 <fts_children+0x1c28>
mov    %edi,%eax
xor    %edx,%edx
jmp    805167c <fts_children+0x1b8c>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    805167c <fts_children+0x1b8c>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    8051778 <fts_children+0x1c88>
cmp    %edi,%esi
jbe    80517b0 <fts_children+0x1cc0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     80517d0 <fts_children+0x1ce0>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    80517e0 <fts_children+0x1cf0>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     8051878 <fts_children+0x1d88>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    80517c1 <fts_children+0x1cd1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    805176b <fts_children+0x1c7b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     8051864 <fts_children+0x1d74>
cmp    %eax,0xc(%esp)
jb     8051860 <fts_children+0x1d70>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    805183e <fts_children+0x1d4e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    805183e <fts_children+0x1d4e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     8051791 <fts_children+0x1ca1>
jmp    80517a1 <fts_children+0x1cb1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049a90 <calloc@plt+0x610>
add    $0x5765,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048f88 <getpwnam@plt-0x38>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80518e9 <fts_children+0x1df9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80518c8 <fts_children+0x1dd8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8051900 <fts_children+0x1e10>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049a90 <calloc@plt+0x610>
add    $0x56ea,%ebx
sub    $0x18,%esp
lea    0x144(%ebx),%eax
test   %eax,%eax
je     8051948 <fts_children+0x1e58>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049180 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    805192b <fts_children+0x1e3b>
push   %ebx
sub    $0x8,%esp
call   8049a90 <calloc@plt+0x610>
add    $0x56ab,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     80519e4 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     805199c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80519e5 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     80519f4 <_IO_stdin_used+0x90>
popa
je     80519f3 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %bl,%cs:0x4f(%ebx)
push   %edi
dec    %esi
inc    %ebp
push   %edx
pop    %ebp
pop    %ebx
cmp    0x47(%ebx),%bl
push   %edx
dec    %edi
push   %ebp
push   %eax
pop    %ebp
pop    %ebp
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x4f5b2073
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %ch,%cs:0x6665722d
66
gs
jb     8051a43 <_IO_stdin_used+0xdf>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%al
add    %al,(%eax)
add    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8051a25 <_IO_stdin_used+0xc1>
popa
outsb  %ds:(%esi),(%dx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     8051a2c <_IO_stdin_used+0xc8>
addr16 jb 8051a7e <_IO_stdin_used+0x11a>
jne    8051a81 <_IO_stdin_used+0x11d>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
dec    %edi
push   %edi
dec    %esi
inc    %ebp
push   %edx
and    %ah,0x6e(%ecx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     8051a4f <_IO_stdin_used+0xeb>
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
or     %cs:0x69(%edi),%dl
je     8051aa2 <_IO_stdin_used+0x13e>
and    %ch,0x6665722d
gs
jb     8051aa8 <_IO_stdin_used+0x144>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2c(%ebp)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8051a79 <_IO_stdin_used+0x115>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8051ad2 <_IO_stdin_used+0x16e>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %dh,0x20(%edi,%ebp,2)
je     8051add <_IO_stdin_used+0x179>
outsl  %ds:(%esi),(%dx)
jae    8051add <_IO_stdin_used+0x179>
and    %ch,0x66(%edi)
and    %dl,0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
or     %cs:(%edx),%cl
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c63,%eax
sub    $0x6e616863,%eax
addr16
gs
jae    8051ab8 <_IO_stdin_used+0x154>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6b(%ecx,%ebp,2)
and    %dh,%gs:0x65(%esi)
jb     8051b0c <_IO_stdin_used+0x1a8>
outsl  %ds:(%esi),(%dx)
jae    8051b12 <_IO_stdin_used+0x1ae>
and    %ah,0x75(%edx)
je     8051ad2 <_IO_stdin_used+0x16e>
jb     8051b19 <_IO_stdin_used+0x1b5>
jo     8051b25 <_IO_stdin_used+0x1c1>
jb     8051b2c <_IO_stdin_used+0x1c8>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8051ade <_IO_stdin_used+0x17a>
ja     8051b28 <_IO_stdin_used+0x1c4>
outsb  %gs:(%esi),(%dx)
and    %ah,0x20(%ecx)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x73(%bx,%di)
and    %ch,0x61(%ebp)
fs or  %fs:%gs:(%eax),%ah
and    %ch,0x2d202c66
sub    $0x656c6973,%eax
outsb  %ds:(%esi),(%dx)
je     8051b0f <_IO_stdin_used+0x1ab>
and    %ch,0x6975712d
gs
je     8051b0c <_IO_stdin_used+0x1a8>
and    %dh,0x75(%ebx)
jo     8051b61 <_IO_stdin_used+0x1fd>
jb     8051b58 <_IO_stdin_used+0x1f4>
jae    8051b68 <_IO_stdin_used+0x204>
and    %ch,0x6f(%ebp)
jae    8051b6e <_IO_stdin_used+0x20a>
and    %ah,0x72(%ebp)
jb     8051b6e <_IO_stdin_used+0x20a>
jb     8051b21 <_IO_stdin_used+0x1bd>
insl   (%dx),%es:(%edi)
gs
jae    8051b78 <_IO_stdin_used+0x214>
popa
addr16
gs
jae    8051b14 <_IO_stdin_used+0x1b0>
and    %ah,(%eax)
sub    $0x2d202c76,%eax
sub    $0x62726576,%eax
outsl  %ds:(%esi),(%dx)
jae    8051b7e <_IO_stdin_used+0x21a>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    8051b9a <_IO_stdin_used+0x236>
jo     8051b9d <_IO_stdin_used+0x239>
je     8051b4a <_IO_stdin_used+0x1e6>
popa
and    %ah,0x61(%ecx,%ebp,2)
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jae    8051ba8 <_IO_stdin_used+0x244>
imul   $0x20726f66,0x20(%ebx),%esp
gs
jbe    8051ba3 <_IO_stdin_used+0x23f>
jb     8051bb9 <_IO_stdin_used+0x255>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8051bb3 <_IO_stdin_used+0x24f>
or     %fs:(%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265642d
gs
data16
gs
jb     8051bc9 <_IO_stdin_used+0x265>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x66(%ecx)
data16
arpl   %si,%gs:0x74(%eax,%eiz,1)
push   $0x65722065
data16
gs
jb     8051be3 <_IO_stdin_used+0x27f>
outsb  %ds:(%esi),(%dx)
je     8051ba1 <_IO_stdin_used+0x23d>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
jae    8051c04 <_IO_stdin_used+0x2a0>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ch,(%eax)
je     8051c02 <_IO_stdin_used+0x29e>
imul   $0x200a7369,0x20(%ebx),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     8051c23 <_IO_stdin_used+0x2bf>
and    %ah,%gs:0x66(%ebp,%eiz,2)
popa
jne    8051c2f <_IO_stdin_used+0x2cb>
je     8051bee <_IO_stdin_used+0x28a>
sub    $0x20,%al
jb     8051c2a <_IO_stdin_used+0x2c6>
je     8051c33 <_IO_stdin_used+0x2cf>
gs
jb     8051bee <_IO_stdin_used+0x28a>
je     8051c38 <_IO_stdin_used+0x2d4>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ch,0x74(%ecx)
jae    8051c4e <_IO_stdin_used+0x2ea>
insb   (%dx),%es:(%edi)
data16
or     (%eax),%ah
and    %ch,0x2d202c68
sub    $0x642d6f6e,%eax
gs
jb     8051c60 <_IO_stdin_used+0x2fc>
data16
gs
jb     8051c64 <_IO_stdin_used+0x300>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
popa
data16
data16
arpl   %si,%gs:0x73(%eax,%eiz,1)
jns    8051c7c <_IO_stdin_used+0x318>
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    8051c3b <_IO_stdin_used+0x2d7>
imul   $0x64616574,0x73(%esi),%ebp
and    %ch,0x66(%edi)
and    %ah,0x6e(%ecx)
jns    8051c4a <_IO_stdin_used+0x2e6>
jb     8051c91 <_IO_stdin_used+0x32d>
data16
gs
jb     8051c95 <_IO_stdin_used+0x331>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x64(%ebp)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %dh,0x73(%ebp)
gs
data16
jne    8051cc8 <_IO_stdin_used+0x364>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8051c82 <_IO_stdin_used+0x31e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x79(%ebx)
jae    8051cdd <_IO_stdin_used+0x379>
gs
insl   (%dx),%es:(%edi)
jae    8051c8d <_IO_stdin_used+0x329>
je     8051cd7 <_IO_stdin_used+0x373>
popa
je     8051c92 <_IO_stdin_used+0x32e>
arpl   %sp,0x6e(%ecx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
ja     8051d0b <_IO_stdin_used+0x3a7>
gs
jb     8051d13 <_IO_stdin_used+0x3af>
push   $0x6f207069
data16
and    %ah,0x20(%ecx)
jae    8051d24 <_IO_stdin_used+0x3c0>
insl   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0xa29,0x6b(%esi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f72662d,%eax
insl   (%dx),%es:(%edi)
cmp    $0x52525543,%eax
inc    %ebp
dec    %esi
push   %esp
pop    %edi
dec    %edi
push   %edi
dec    %esi
inc    %ebp
push   %edx
cmp    0x55(%ebx),%al
push   %edx
push   %edx
inc    %ebp
dec    %esi
push   %esp
pop    %edi
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8051d27 <_IO_stdin_used+0x3c3>
popa
outsb  %ds:(%esi),(%dx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     8051d2e <_IO_stdin_used+0x3ca>
addr16 jb 8051d80 <_IO_stdin_used+0x41c>
jne    8051d83 <_IO_stdin_used+0x41f>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
imul   $0x6e6f,0x20(%ebp,%eiz,2),%bp
insb   (%dx),%es:(%edi)
jns    8051d46 <_IO_stdin_used+0x3e2>
imul   $0x20202020,0xa(%esi),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x74(%ecx)
jae    8051d66 <_IO_stdin_used+0x402>
arpl   %si,0x72(%ebp)
jb     8051db0 <_IO_stdin_used+0x44c>
outsb  %ds:(%esi),(%dx)
je     8051d6e <_IO_stdin_used+0x40a>
outsl  %ds:(%esi),(%dx)
ja     8051dbf <_IO_stdin_used+0x45b>
gs
jb     8051d74 <_IO_stdin_used+0x410>
popa
outsb  %ds:(%esi),(%dx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     8051d7b <_IO_stdin_used+0x417>
addr16 jb 8051dcd <_IO_stdin_used+0x469>
jne    8051dd0 <_IO_stdin_used+0x46c>
and    %ch,0x61(%ebp)
je     8051dc8 <_IO_stdin_used+0x464>
push   $0x6f687420
jae    8051dd1 <_IO_stdin_used+0x46d>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x2020200a,0x64(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   $0x2e657265
and    %ah,(%eax)
inc    %ebp
imul   $0x616d2072,0x65(%eax,%ebp,2),%esi
jns    8051dc2 <_IO_stdin_used+0x45e>
bound  %esp,0x20(%ebp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
imul   $0x69202c64,0x65(%esp,%esi,2),%esi
outsb  %ds:(%esi),(%dx)
and    %dh,0x68(%edi)
imul   $0x73616320,0x68(%ebx),%esp
and    %ah,%gs:0x20(%ecx)
insl   (%dx),%es:(%edi)
popa
je     8051e25 <_IO_stdin_used+0x4c1>
push   $0x2020200a
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x20746f6e,0x20(%ebx),%esi
jb     8051e4b <_IO_stdin_used+0x4e7>
jno    8051e5d <_IO_stdin_used+0x4f9>
imul   $0x6f662064,0x65(%edx),%esi
jb     8051e11 <_IO_stdin_used+0x4ad>
je     8051e5b <_IO_stdin_used+0x4f7>
and    %ch,%gs:0x6d(%edi)
imul   $0x74612064,0x65(%esp,%esi,2),%esi
je     8051e73 <_IO_stdin_used+0x50f>
imul   $0xa6574,0x75(%edx),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x2d6f6e2d,%eax
jo     8051e87 <_IO_stdin_used+0x523>
gs
jae    8051e7d <_IO_stdin_used+0x519>
jb     8051e90 <_IO_stdin_used+0x52c>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8051e49 <_IO_stdin_used+0x4e5>
je     8051e9d <_IO_stdin_used+0x539>
gs
popa
je     8051e4f <_IO_stdin_used+0x4eb>
daa
das
daa
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    8051e5d <_IO_stdin_used+0x4f9>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    8051eb4 <_IO_stdin_used+0x550>
je     8051e73 <_IO_stdin_used+0x50f>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6572702d
jae    8051ebd <_IO_stdin_used+0x559>
jb     8051ed0 <_IO_stdin_used+0x56c>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
and    %ah,(%eax)
popaw
imul   $0x706f206f,0x74(%eax,%eiz,1),%ebp
gs
jb     8051ed2 <_IO_stdin_used+0x56e>
je     8051ed8 <_IO_stdin_used+0x574>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8051ee4 <_IO_stdin_used+0x580>
jbe    8051ee2 <_IO_stdin_used+0x57e>
insb   (%dx),%es:(%edi)
jns    8051ea0 <_IO_stdin_used+0x53c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edi)
das
daa
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6665722d,%eax
gs
jb     8051efb <_IO_stdin_used+0x597>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x3d(%ebp)
push   %edx
inc    %esi
dec    %ecx
dec    %esp
inc    %ebp
and    %ah,(%eax)
jne    8051f16 <_IO_stdin_used+0x5b2>
and    %dl,%gs:0x46(%edx)
dec    %ecx
dec    %esp
inc    %ebp
daa
jae    8051ecd <_IO_stdin_used+0x569>
outsl  %ds:(%esi),(%dx)
ja     8051f1e <_IO_stdin_used+0x5ba>
gs
jb     8051ed3 <_IO_stdin_used+0x56f>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8051f2c <_IO_stdin_used+0x5c8>
and    %dh,0x61(%edx)
je     8051f29 <_IO_stdin_used+0x5c5>
gs
jb     8051ee4 <_IO_stdin_used+0x580>
je     8051f2e <_IO_stdin_used+0x5ca>
popa
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    8051f54 <_IO_stdin_used+0x5f0>
arpl   %bp,%gs:0x66(%ecx)
jns    8051f53 <_IO_stdin_used+0x5ef>
outsb  %ds:(%esi),(%dx)
and    %cl,0x57(%bx)
dec    %esi
inc    %ebp
push   %edx
cmp    0x52(%edi),%al
dec    %edi
push   %ebp
push   %eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8051f63 <_IO_stdin_used+0x5ff>
jae    8051f0a <_IO_stdin_used+0x5a6>
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c52,%eax
sub    $0x75636572,%eax
jb     8051f85 <_IO_stdin_used+0x621>
imul   $0x20202020,0x65(%esi),%esi
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jo     8051f85 <_IO_stdin_used+0x621>
jb     8051f83 <_IO_stdin_used+0x61f>
je     8051f89 <_IO_stdin_used+0x625>
and    %ch,0x6e(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    8051f4e <_IO_stdin_used+0x5ea>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x63657220,0x73(%ebp),%esp
jne    8051fb5 <_IO_stdin_used+0x651>
jae    8051fae <_IO_stdin_used+0x64a>
jbe    8051fac <_IO_stdin_used+0x648>
insb   (%dx),%es:(%edi)
jns    8051f54 <_IO_stdin_used+0x5f0>
add    %al,(%eax)
or     0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8051fc1 <_IO_stdin_used+0x65d>
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     8051fc8 <_IO_stdin_used+0x664>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    8051f83 <_IO_stdin_used+0x61f>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x776f6820,%fs:0x79(%esi),%esp
and    %ah,0x20(%ecx)
push   $0x61726569
jb     8051fda <_IO_stdin_used+0x676>
push   $0x73692079
and    %dh,0x61(%edx,%esi,2)
jbe    8051fe7 <_IO_stdin_used+0x683>
jb     8051ff7 <_IO_stdin_used+0x693>
gs and %dh,%fs:%gs:0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x706f0a52
je     8052000 <_IO_stdin_used+0x69c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x73(%ecx)
and    %ah,0x6c(%ecx)
jae    8052010 <_IO_stdin_used+0x6ac>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x4920202e,0x64(%ebp),%esp
data16
and    %ch,0x6f(%ebp)
jb     805201a <_IO_stdin_used+0x6b6>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi)
and    %ch,%gs:0x73(%ecx)
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6e6f202c,0x64(%ebp),%esp
insb   (%dx),%es:(%edi)
jns    8051ff2 <_IO_stdin_used+0x68e>
je     805203c <_IO_stdin_used+0x6d8>
and    %ah,%gs:0x69(%esi)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
or     0x6e(%edi),%ch
and    %dh,%gs:0x6b(%ecx,%eiz,2)
gs
jae    8052006 <_IO_stdin_used+0x6a2>
gs
data16
data16
arpl   %si,%gs:0xa(%esi,%ebp,1)
or     (%eax),%ah
and    %ch,0x20202048
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6f632061,0x20(%esi),%esp
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ah,%gs:0x72(%ecx)
addr16 jne 805208c <_IO_stdin_used+0x728>
outsb  %gs:(%esi),(%dx)
je     8052043 <_IO_stdin_used+0x6df>
imul   $0x79732061,0x20(%ebx),%esi
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     80520c0 <_IO_stdin_used+0x75c>
and    %ah,0x20(%ecx)
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    805208a <_IO_stdin_used+0x726>
and    %dh,0x61(%edx,%esi,2)
jbe    80520c9 <_IO_stdin_used+0x765>
jb     80520d9 <_IO_stdin_used+0x775>
and    %ch,%gs:0x74(%ecx)
or     (%eax),%ah
and    %ch,0x2020204c
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     80520f8 <_IO_stdin_used+0x794>
popa
jbe    80520ee <_IO_stdin_used+0x78a>
jb     80520fe <_IO_stdin_used+0x79a>
and    %ah,%gs:0x76(%ebp)
gs
jb     805210b <_IO_stdin_used+0x7a7>
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %dh,0x20(%edi,%ebp,2)
popa
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80520ba <_IO_stdin_used+0x756>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%ebp)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     8052136 <_IO_stdin_used+0x7d2>
jb     8052138 <_IO_stdin_used+0x7d4>
or     %fs:(%eax),%ah
and    %ch,0x20202050
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     8052115 <_IO_stdin_used+0x7b1>
je     8052169 <_IO_stdin_used+0x805>
popa
jbe    805215f <_IO_stdin_used+0x7fb>
jb     805216f <_IO_stdin_used+0x80b>
and    %ah,%gs:0x6e(%ecx)
jns    8052122 <_IO_stdin_used+0x7be>
jae    805217d <_IO_stdin_used+0x819>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    8052131 <_IO_stdin_used+0x7cd>
sub    %ah,0x66(%ebp,%eiz,2)
popa
jne    8052184 <_IO_stdin_used+0x820>
je     8052143 <_IO_stdin_used+0x7df>
or     (%edx),%cl
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     805214d <_IO_stdin_used+0x7e9>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     80521a3 <_IO_stdin_used+0x83f>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    80521c6 <_IO_stdin_used+0x862>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80521d8 <_IO_stdin_used+0x874>
jo     80521db <_IO_stdin_used+0x877>
je     8052188 <_IO_stdin_used+0x824>
jbe    80521cf <_IO_stdin_used+0x86b>
jb     80521df <_IO_stdin_used+0x87b>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     80521e3 <_IO_stdin_used+0x87f>
popa
je     80521e2 <_IO_stdin_used+0x87e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x4f0a0000,0x0(%edx,%ecx,1),%esi
ja     80521fa <_IO_stdin_used+0x896>
gs
jb     80521af <_IO_stdin_used+0x84b>
imul   $0x68636e75,0x20(%ebx),%esi
popa
outsb  %ds:(%esi),(%dx)
gs and %ch,%fs:%gs:0x66(%bx,%di)
and    %ch,0x69(%ebp)
jae    8052216 <_IO_stdin_used+0x8b2>
imul   $0x4720202e,0x67(%esi),%ebp
jb     805221b <_IO_stdin_used+0x8b7>
jne    805221e <_IO_stdin_used+0x8ba>
and    %ch,0x73(%ecx)
and    %dh,0x6e(%ebp)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs and %ch,%fs:%gs:0x66(%bx,%di)
and    %ch,0x69(%ebp)
jae    8052236 <_IO_stdin_used+0x8d2>
imul   $0x7562202c,0x67(%esi),%ebp
je     80521ec <_IO_stdin_used+0x888>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs or  %fs:%gs:0x6f(%si),%dh
and    %ch,0x67(%edi,%ebp,2)
imul   $0x756f7267,0x20(%esi),%ebp
jo     8052203 <_IO_stdin_used+0x89f>
imul   $0x6c706d69,0x20(%esi),%esp
imul   $0x20796220,0x64(%ebp),%esp
popa
and    %ah,(%edi)
cmp    (%edi),%ah
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8052267 <_IO_stdin_used+0x903>
outsb  %ds:(%esi),(%dx)
and    %ah,0x20(%bx,%di)
jae    805227e <_IO_stdin_used+0x91a>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x454e574f,0x20(%ebx),%esp
push   %edx
or     %cs:0x57(%edi),%cl
dec    %esi
inc    %ebp
push   %edx
and    %ah,0x6e(%ecx)
and    %al,%fs:0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %ch,0x61(%ebp)
jns    8052247 <_IO_stdin_used+0x8e3>
bound  %esp,0x20(%ebp)
outsb  %ds:(%esi),(%dx)
jne    805229a <_IO_stdin_used+0x936>
gs
jb     8052299 <_IO_stdin_used+0x935>
arpl   %sp,(%eax)
popa
jae    8052255 <_IO_stdin_used+0x8f1>
ja     805229c <_IO_stdin_used+0x938>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x73(%ecx)
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x450a000a,0x2e(%ebx),%esp
js     80522ad <_IO_stdin_used+0x949>
insl   (%dx),%es:(%edi)
jo     80522bb <_IO_stdin_used+0x957>
gs
jae    805228c <_IO_stdin_used+0x928>
or     (%eax),%ah
and    %ah,0x6f722073
outsl  %ds:(%esi),(%dx)
je     805227d <_IO_stdin_used+0x919>
das
jne    8052280 <_IO_stdin_used+0x91c>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8052298 <_IO_stdin_used+0x934>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%edi)
jne    805229e <_IO_stdin_used+0x93a>
je     80522ef <_IO_stdin_used+0x98b>
and    %ah,(%edx)
jb     80522f3 <_IO_stdin_used+0x98f>
outsl  %ds:(%esi),(%dx)
je     80522a9 <_IO_stdin_used+0x945>
or     %cs:(%eax),%ah
and    %ah,0x6f722073
outsl  %ds:(%esi),(%dx)
je     80522cd <_IO_stdin_used+0x969>
jae    8052309 <_IO_stdin_used+0x9a5>
popa
data16
data16
and    %ch,(%edi)
jne    80522bc <_IO_stdin_used+0x958>
and    %cl,0x6b(%ecx,%ebp,2)
gs
ja     805230c <_IO_stdin_used+0x9a8>
jae    805230a <_IO_stdin_used+0x9a6>
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %ah,0x6c(%ecx)
jae    805231e <_IO_stdin_used+0x9ba>
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x74(%bx,%di)
jae    80522db <_IO_stdin_used+0x977>
addr16 jb 805232d <_IO_stdin_used+0x9c9>
jne    8052330 <_IO_stdin_used+0x9cc>
and    %dh,0x20(%edi,%ebp,2)
and    0x74(%ebx),%dh
popa
data16
data16
and    (%esi),%ch
or     (%eax),%ah
and    %ah,0x682d2073
push   %edx
and    %dh,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     80522fb <_IO_stdin_used+0x997>
das
jne    80522fe <_IO_stdin_used+0x99a>
and    %ah,(%eax)
and    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8052312 <_IO_stdin_used+0x9ae>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%edi)
jne    8052318 <_IO_stdin_used+0x9b4>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x75(%ebx)
bound  %esp,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    8052325 <_IO_stdin_used+0x9c1>
je     8052376 <_IO_stdin_used+0xa12>
and    %ah,(%edx)
jb     805237a <_IO_stdin_used+0xa16>
outsl  %ds:(%esi),(%dx)
je     8052330 <_IO_stdin_used+0x9cc>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %ch,0x74(%eax)
je     8052388 <_IO_stdin_used+0xa24>
cmp    (%edi),%ch
das
ja     8052394 <_IO_stdin_used+0xa30>
ja     805234d <_IO_stdin_used+0x9e9>
outsb  %ds:(%si),(%dx)
jne    8052351 <_IO_stdin_used+0x9ed>
outsl  %ds:(%esi),(%dx)
jb     805238d <_IO_stdin_used+0xa29>
das
jae    8052398 <_IO_stdin_used+0xa34>
data16
je     80523a3 <_IO_stdin_used+0xa3f>
popa
jb     8052394 <_IO_stdin_used+0xa30>
das
arpl   %bp,0x72(%edi)
gs
jne    80523aa <_IO_stdin_used+0xa46>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     80523a3 <_IO_stdin_used+0xa3f>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8052369 <_IO_stdin_used+0xa05>
jne    80523be <_IO_stdin_used+0xa5a>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     80523cf <_IO_stdin_used+0xa6b>
popa
jb     80523c0 <_IO_stdin_used+0xa5c>
cmp    (%eax),%ah
cmp    $0x68,%al
je     80523d5 <_IO_stdin_used+0xa71>
jo     805239d <_IO_stdin_used+0xa39>
das
das
ja     80523de <_IO_stdin_used+0xa7a>
ja     8052397 <_IO_stdin_used+0xa33>
outsb  %ds:(%si),(%dx)
jne    805239b <_IO_stdin_used+0xa37>
outsl  %ds:(%esi),(%dx)
jb     80523d7 <_IO_stdin_used+0xa73>
das
addr16
gs
je     80523dd <_IO_stdin_used+0xa79>
gs
insb   (%dx),%es:(%edi)
jo     80523a8 <_IO_stdin_used+0xa44>
or     %ds:(%eax),%al
push   %edx
gs
jo     80523ef <_IO_stdin_used+0xa8b>
jb     80523f6 <_IO_stdin_used+0xa92>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    80523f8 <_IO_stdin_used+0xa94>
popa
je     80523f8 <_IO_stdin_used+0xa94>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 80523b7 <_IO_stdin_used+0xa53>
je     8052408 <_IO_stdin_used+0xaa4>
and    %bh,(%eax,%ebp,2)
je     8052412 <_IO_stdin_used+0xaae>
jo     80523da <_IO_stdin_used+0xa76>
das
das
je     8052416 <_IO_stdin_used+0xab2>
popa
outsb  %ds:(%esi),(%dx)
jae    8052414 <_IO_stdin_used+0xab0>
popa
je     8052414 <_IO_stdin_used+0xab0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     8052421 <_IO_stdin_used+0xabd>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     805241f <_IO_stdin_used+0xabb>
das
je     8052420 <_IO_stdin_used+0xabc>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     80523e8 <_IO_stdin_used+0xa84>
arpl   %bp,0x6d(%edi)
jo     8052439 <_IO_stdin_used+0xad5>
gs
je     8052435 <_IO_stdin_used+0xad1>
and    %ah,0x63(%edi,%ebp,2)
jne    8052443 <_IO_stdin_used+0xadf>
outsb  %gs:(%esi),(%dx)
je     805243b <_IO_stdin_used+0xad7>
je     8052445 <_IO_stdin_used+0xae1>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8052457 <_IO_stdin_used+0xaf3>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     8052453 <_IO_stdin_used+0xaef>
jne    8052464 <_IO_stdin_used+0xb00>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
sub    $0x2d2d2052,%eax
fs
gs
jb     8052476 <_IO_stdin_used+0xb12>
data16
gs
jb     805247a <_IO_stdin_used+0xb16>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
jb     8052480 <_IO_stdin_used+0xb1c>
jno    8052492 <_IO_stdin_used+0xb2e>
imul   $0x69652073,0x65(%edx),%esi
je     805248e <_IO_stdin_used+0xb2a>
gs
jb     8052449 <_IO_stdin_used+0xae5>
sub    $0x726f2048,%eax
and    %ch,0x4c
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     8052462 <_IO_stdin_used+0xafe>
popa
je     80524b9 <_IO_stdin_used+0xb55>
jb     80524b0 <_IO_stdin_used+0xb4c>
bound  %esi,0x74(%ebp)
gs
jae    805246d <_IO_stdin_used+0xb09>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x520a0073
gs
jo     80524c7 <_IO_stdin_used+0xb63>
jb     80524ce <_IO_stdin_used+0xb6a>
and    %ah,0x75622073
addr16 jae 8052483 <_IO_stdin_used+0xb1f>
je     80524d4 <_IO_stdin_used+0xb70>
and    %ah,0x62000a73
jne    80524d4 <_IO_stdin_used+0xb70>
sub    $0x65726f63,%eax
jne    80524e8 <_IO_stdin_used+0xb84>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     80524e6 <_IO_stdin_used+0xb82>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    80524d0 <_IO_stdin_used+0xb6c>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     8052501 <_IO_stdin_used+0xb9d>
jne    8052512 <_IO_stdin_used+0xbae>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    805251c <_IO_stdin_used+0xbb8>
jb     80524da <_IO_stdin_used+0xb76>
jae    8052515 <_IO_stdin_used+0xbb1>
popa
jb     8052515 <_IO_stdin_used+0xbb1>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ah,%gs:0x25203a73
jae    80524bf <_IO_stdin_used+0xb5b>
dec    %edx
imul   $0x6579654d,0x20(%ebp),%ebp
jb     8052532 <_IO_stdin_used+0xbce>
outsb  %ds:(%esi),(%dx)
add    %al,0x61(%si)
jbe    8052539 <_IO_stdin_used+0xbd5>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     8052543 <_IO_stdin_used+0xbdf>
add    %ah,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805254f <_IO_stdin_used+0xbeb>
add    %cl,0x4c(%eax)
push   %eax
push   %edx
arpl   %sp,0x68(%esi)
jbe    80524eb <_IO_stdin_used+0xb87>
insl   (%dx),%es:(%edi)
imul   $0x20676e69,0x73(%ebx),%esi
outsl  %ds:(%esi),(%dx)
jo     805255b <_IO_stdin_used+0xbf7>
jb     8052559 <_IO_stdin_used+0xbf5>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x69(%ebp)
jae    8052572 <_IO_stdin_used+0xc0e>
imul   $0x65706f20,0x67(%esi),%ebp
jb     8052569 <_IO_stdin_used+0xc05>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x66(%ecx)
je     8052574 <_IO_stdin_used+0xc10>
jb     8052531 <_IO_stdin_used+0xbcd>
and    $0x65720073,%eax
arpl   %si,0x72(%ebp)
jae    8052584 <_IO_stdin_used+0xc20>
jbe    8052582 <_IO_stdin_used+0xc1e>
add    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
addr16
gs
jae    8052526 <_IO_stdin_used+0xbc2>
data16
jb     8052598 <_IO_stdin_used+0xc34>
insl   (%dx),%es:(%edi)
add    %ch,0x6f(%esi)
sub    $0x65726564,%eax
data16
gs
jb     805259b <_IO_stdin_used+0xc37>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
sub    $0x73657270,%eax
gs
jb     80525ba <_IO_stdin_used+0xc56>
gs
sub    $0x746f6f72,%eax
add    %dh,0x75(%ecx)
imul   $0x6c697300,0x74(%ebp),%esp
outsb  %gs:(%esi),(%dx)
je     8052558 <_IO_stdin_used+0xbf4>
jbe    80525bf <_IO_stdin_used+0xc5b>
jb     80525be <_IO_stdin_used+0xc5a>
outsl  %ds:(%esi),(%dx)
jae    80525c4 <_IO_stdin_used+0xc60>
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8052565 <_IO_stdin_used+0xc01>
jbe    80525cc <_IO_stdin_used+0xc68>
jb     80525dc <_IO_stdin_used+0xc78>
imul   $0x0,0x6e(%edi),%ebp
adc    $0x25,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
push   %ds
and    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
arpl   %ax,(%eax)
add    %al,(%eax)
cs
and    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %ah,(%esi)
and    $0x10805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x252b0000,(%eax)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
cmp    0x805,%ah
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
(bad)
add    %al,(%eax)
add    %bh,0x80525
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x4b000000(%ebx)
and    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
data16
add    %al,(%eax)
add    %dl,0x25(%ecx)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
xor    %ah,0x10805
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
test   %al,(%eax)
add    %al,(%eax)
pop    %eax
and    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jbe    805262e <_IO_stdin_used+0xcca>
add    %al,(%eax)
pusha
and    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jle    805263d <_IO_stdin_used+0xcd9>
(bad)
jmp    *0x25(%ebp)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %ah,0x74(%esi)
jae    80526c3 <_IO_stdin_used+0xd5f>
jb     80526cb <_IO_stdin_used+0xd67>
popa
and    %ah,%fs:0x61(%esi)
imul   $0x6e616300,0x64(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8052697 <_IO_stdin_used+0xd33>
popa
arpl   %sp,0x65(%ebx)
jae    80526f0 <_IO_stdin_used+0xd8c>
and    %ah,0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80526a8 <_IO_stdin_used+0xd44>
jb     80526ef <_IO_stdin_used+0xd8b>
popa
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80526b7 <_IO_stdin_used+0xd53>
and    $0x61630073,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80526c1 <_IO_stdin_used+0xd5d>
fs
gs
jb     805270a <_IO_stdin_used+0xda6>
data16
gs
jb     805270e <_IO_stdin_used+0xdaa>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    $0x68630073,%eax
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6e776f20,0x67(%bp),%ebp
gs
jb     8052732 <_IO_stdin_used+0xdce>
push   $0x6f207069
data16
and    %ah,0x68630073
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6f726720,0x67(%bp),%ebp
jne    8052747 <_IO_stdin_used+0xde3>
and    %ch,0x66(%edi)
and    %ah,0x6f6e0073
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x6f(%si)
and    %ch,0x77(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     8052764 <_IO_stdin_used+0xe00>
push   $0x6f207069
data16
and    %ah,0x67000a73
jb     805276e <_IO_stdin_used+0xe0a>
jne    8052771 <_IO_stdin_used+0xe0d>
and    %ch,0x66(%edi)
and    %ah,0x65722073
je     805276d <_IO_stdin_used+0xe09>
imul   $0x73612064,0x65(%esi),%ebp
and    %ah,0x6f000a73
ja     8052789 <_IO_stdin_used+0xe25>
gs
jb     8052791 <_IO_stdin_used+0xe2d>
push   $0x6f207069
data16
and    %ah,0x65722073
je     805278d <_IO_stdin_used+0xe29>
imul   $0x66000a64,0x65(%esi),%ebp
je     80527a8 <_IO_stdin_used+0xe44>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x61(%esi)
imul   $0x74690000,0x64(%ebp,%eiz,2),%ebp
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     80527c0 <_IO_stdin_used+0xe5c>
jne    80527c6 <_IO_stdin_used+0xe62>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     80527bf <_IO_stdin_used+0xe5b>
jb     80527bd <_IO_stdin_used+0xe59>
je     80527c3 <_IO_stdin_used+0xe5f>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    80527cf <_IO_stdin_used+0xe6b>
jbe    80527cd <_IO_stdin_used+0xe69>
insb   (%dx),%es:(%edi)
jns    805278b <_IO_stdin_used+0xe27>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     80527f0 <_IO_stdin_used+0xe8c>
jne    80527f6 <_IO_stdin_used+0xe92>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     80527ef <_IO_stdin_used+0xe8b>
jb     80527ed <_IO_stdin_used+0xe89>
je     80527f3 <_IO_stdin_used+0xe8f>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    80527ff <_IO_stdin_used+0xe9b>
jbe    80527fd <_IO_stdin_used+0xe99>
insb   (%dx),%es:(%edi)
jns    80527bb <_IO_stdin_used+0xe57>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73282073
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x2973
add    %dh,0x73(%ebp)
and    %ch,%gs:0x2d6f6e2d
jo     805282d <_IO_stdin_used+0xec9>
gs
jae    8052823 <_IO_stdin_used+0xebf>
jb     8052836 <_IO_stdin_used+0xed2>
gs
sub    $0x746f6f72,%eax
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jbe    8052832 <_IO_stdin_used+0xece>
jb     8052841 <_IO_stdin_used+0xedd>
imul   $0x73696874,0x20(%ebp,%eiz,2),%esp
and    %ah,0x61(%esi)
imul   $0x6566,0x61(%ebx,%esi,2),%ebp
add    %al,(%eax)
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
inc    %ebx
imul   $0x72616c75,0x63(%edx),%esi
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8052820 <_IO_stdin_used+0xebc>
jae    8052876 <_IO_stdin_used+0xf12>
jb     8052879 <_IO_stdin_used+0xf15>
arpl   %si,0x72(%ebp,%esi,2)
gs or  %cs:%gs:0x69(%eax,%ebp,2),%dl
jae    8052830 <_IO_stdin_used+0xecc>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    805288a <_IO_stdin_used+0xf26>
and    %ah,0x65(%ebx)
jb     805288f <_IO_stdin_used+0xf2b>
popa
imul   $0x656d2079,0x6c(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
jae    8052847 <_IO_stdin_used+0xee3>
je     8052891 <_IO_stdin_used+0xf2d>
popa
je     805284c <_IO_stdin_used+0xee8>
jns    805289d <_IO_stdin_used+0xf39>
jne    8052850 <_IO_stdin_used+0xeec>
push   $0x20657661
popa
and    %ah,0x6f(%ebx)
jb     80528ad <_IO_stdin_used+0xf49>
jne    80528ad <_IO_stdin_used+0xf49>
je     80528a4 <_IO_stdin_used+0xf40>
and    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x79(%ebx)
jae    80528be <_IO_stdin_used+0xf5a>
gs
insl   (%dx),%es:(%edi)
or     %cs:0x4f(%esi),%cl
push   %esp
dec    %ecx
inc    %esi
pop    %ecx
and    %bl,0x4f(%ecx)
push   %ebp
push   %edx
and    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
and    %cl,0x41(%ebp)
dec    %esi
inc    %ecx
inc    %edi
inc    %ebp
push   %edx
or     %cs:0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80528de <_IO_stdin_used+0xf7a>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%si)
jb     80528e1 <_IO_stdin_used+0xf7d>
arpl   %si,0x72(%edi,%ebp,2)
jns    80528a2 <_IO_stdin_used+0xf3e>
imul   $0x74726170,0x20(%ebx),%esi
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x79(%ebx)
arpl   %bp,0x3a(%ebp,%eiz,2)
or     (%eax),%ah
and    %ah,0xa73
add    %ch,0x65(%esi)
imul   $0x79732072,0x65(%eax,%ebp,2),%esi
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ah,0x6f6e2073
jb     80528dd <_IO_stdin_used+0xf79>
jb     8052924 <_IO_stdin_used+0xfc0>
data16
gs
jb     8052928 <_IO_stdin_used+0xfc4>
outsb  %ds:(%esi),(%dx)
je     80528e6 <_IO_stdin_used+0xf82>
push   $0x62207361
gs outsb %gs:(%esi),(%dx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
gs or  %fs:%gs:(%bx,%si),%al
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs and %ch,%fs:%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     8052959 <_IO_stdin_used+0xff5>
push   $0x6f207069
data16
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0xa73
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
gs and %ah,%fs:%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    805297d <_IO_stdin_used+0x1019>
and    %ch,0x66(%edi)
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0xa73
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     80529ae <_IO_stdin_used+0x104a>
push   $0x6f207069
data16
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    80529da <_IO_stdin_used+0x1076>
and    %ch,0x66(%edi)
and    %ah,0x72662073
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     8052a0a <_IO_stdin_used+0x10a6>
push   $0x6f207069
data16
and    %ah,0xa73
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x77(%bx)
outsb  %ds:(%esi),(%dx)
gs
jb     8052a2e <_IO_stdin_used+0x10ca>
push   $0x6f207069
data16
and    %ah,0x6f742073
and    %ah,0x66000a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x72(%bx)
outsl  %ds:(%esi),(%dx)
jne    8052a52 <_IO_stdin_used+0x10ee>
and    %ch,0x66(%edi)
and    %ah,0x6f742073
and    %ah,0x6f000a73
ja     8052a61 <_IO_stdin_used+0x10fd>
gs
jb     8052a69 <_IO_stdin_used+0x1105>
push   $0x6f207069
data16
and    %ah,0x65722073
je     8052a65 <_IO_stdin_used+0x1101>
imul   $0x73612064,0x65(%esi),%ebp
and    %ah,0x90000a73
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
andb   $0x4,-0x5b8ff7fc(%ebp)
or     %dl,0x180804a4(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
nop
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
add    %ah,0x4a3c008(%esp,%eax,1)
or     %dl,-0x6ff7fb5c(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
loopne 80529db <_IO_stdin_used+0x1077>
add    $0x8,%al
cmp    %ch,(%esi)
xor    (%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     8052a4d <_IO_stdin_used+0x10e9>
add    %al,(%eax)
add    %al,0x20(%ecx)
dec    %esi
push   %ebp
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8052ab7 <_IO_stdin_used+0x1153>
xor    %bl,0x20(%ebp)
ja     8052ac2 <_IO_stdin_used+0x115e>
jae    8052a83 <_IO_stdin_used+0x111f>
jo     8052ac6 <_IO_stdin_used+0x1162>
jae    8052ada <_IO_stdin_used+0x1176>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    8052ad7 <_IO_stdin_used+0x1173>
push   $0x206e6120
gs
js     8052add <_IO_stdin_used+0x1179>
arpl   %sp,(%eax)
jae    8052af5 <_IO_stdin_used+0x1191>
jae    8052af2 <_IO_stdin_used+0x118e>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     8052b12 <_IO_stdin_used+0x11ae>
jb     8052b10 <_IO_stdin_used+0x11ac>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8052b36 <_IO_stdin_used+0x11d2>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    8052b2c <_IO_stdin_used+0x11c8>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
sub    %dh,0x4ba0808(%esp,%eax,1)
or     %bh,(%eax)
mov    $0xb8f80804,%edx
add    $0x8,%al
cmp    %bh,-0x4697f7fc(%ecx)
add    $0x8,%al
nop
mov    $0xb9900804,%ecx
add    $0x8,%al
nop
mov    $0xb7300804,%ecx
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
test   $0xb7,%al
add    $0x8,%al
or     %dh,-0x48d7f7fc(%edi)
add    $0x8,%al
and    %dh,-0x48e7f7fc(%edi)
add    $0x8,%al
adc    %dh,-0x491ff7fc(%edi)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
sub    %bh,-0x47d7f7fc(%eax)
add    $0x8,%al
pop    %ecx
mov    $0x4,%dh
or     %bl,-0x4a(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%dh
or     %dl,-0x4a(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%dh
or     %cl,%al
mov    $0x4,%ch
or     %bl,-0x4a(%ecx)
add    $0x8,%al
fdivs  -0x49a6f7fc(%edi)
add    $0x8,%al
pop    %ecx
mov    $0x4,%dh
or     %bl,-0x4a(%ecx)
add    $0x8,%al
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
pop    %ecx
mov    $0x4,%dh
or     %bl,-0x4a(%ecx)
add    $0x8,%al
pop    %ecx
mov    $0x4,%dh
or     %bl,-0x4a(%ecx)
add    $0x8,%al
sbb    %dh,-0x47d7f7fc(%ebp)
add    $0x8,%al
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
enter  $0x4b5,$0x8
pop    %ecx
mov    $0x4,%dh
or     %bh,-0x37f7fb49(%eax)
mov    $0x4,%ch
or     %bl,-0x4a(%ecx)
add    $0x8,%al
enter  $0x4b5,$0x8
pop    %ecx
mov    $0x4,%dh
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %cl,%al
mov    $0x4,%ch
or     %dh,(%eax)
mov    $0x4,%dh
or     %bl,-0x4a(%ecx)
add    $0x8,%al
xor    %dh,-0x49aef7fc(%esi)
add    $0x8,%al
push   %eax
mov    $0xbc500804,%esp
add    $0x8,%al
call   580d31c8 <optarg+0x5007bfc4>
mov    $0xbbe80804,%esp
add    $0x8,%al
push   %eax
mov    $0xbbe80804,%esp
add    $0x8,%al
call   f00d31dc <optarg+0xe807bfd8>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d31e8 <optarg+0xe807bfe4>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d31f4 <optarg+0xe807bff0>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d3200 <optarg+0xe807bffc>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d320c <optarg+0xe807c008>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d3218 <optarg+0xe807c014>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d3224 <optarg+0xe807c020>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d3230 <optarg+0xe807c02c>
mov    $0xbbe80804,%ebx
add    $0x8,%al
call   f00d323c <optarg+0xe807c038>
mov    $0xbc500804,%ebx
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %ch,-0x4ef7fad6(%ecx)
sub    0x52ab708,%al
or     %ah,-0x3bf7face(%eax)
sub    0x52acc08,%al
or     %dh,-0x2cf7fadc(%ecx)
sub    0x8,%al
add    %ch,0x6e(%ecx)
jbe    8052e49 <_IO_stdin_used+0x14e5>
insb   (%dx),%es:(%edi)
imul   $0x726573,0x75(%eax,%eiz,1),%esp
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x70(%ebx)
arpl   %ax,%gs:(%eax)
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8052e7b <_IO_stdin_used+0x1517>
add    %ah,0x25282073
jae    8052e3c <_IO_stdin_used+0x14d8>
and    %ah,0x25000a73
jae    8052e3b <_IO_stdin_used+0x14d7>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8052e8f <_IO_stdin_used+0x152b>
je     8052e9c <_IO_stdin_used+0x1538>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8052e9f <_IO_stdin_used+0x153b>
je     8052eac <_IO_stdin_used+0x1548>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     8052eb6 <_IO_stdin_used+0x1552>
je     8052ec3 <_IO_stdin_used+0x155f>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052e88 <_IO_stdin_used+0x1524>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8052eda <_IO_stdin_used+0x1576>
jb     8052ee1 <_IO_stdin_used+0x157d>
and    %ah,0x75(%edx)
addr16 jae 8052e93 <_IO_stdin_used+0x152f>
je     8052ee4 <_IO_stdin_used+0x1580>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    8052ee9 <_IO_stdin_used+0x1585>
and    %al,0x50(%edi)
dec    %esp
jbe    8052ebd <_IO_stdin_used+0x1559>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8052f0c <_IO_stdin_used+0x15a8>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     8052ec2 <_IO_stdin_used+0x155e>
insb   (%dx),%es:(%edi)
popa
je     8052f0b <_IO_stdin_used+0x15a7>
jb     8052ec8 <_IO_stdin_used+0x1564>
cmp    $0x68,%al
je     8052f20 <_IO_stdin_used+0x15bc>
jo     8052ee8 <_IO_stdin_used+0x1584>
das
das
outsb  %ds:(%si),(%dx)
jne    8052ee2 <_IO_stdin_used+0x157e>
outsl  %ds:(%esi),(%dx)
jb     8052f1e <_IO_stdin_used+0x15ba>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8052f30 <_IO_stdin_used+0x15cc>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8052ef1 <_IO_stdin_used+0x158d>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     8052f55 <_IO_stdin_used+0x15f1>
popa
jb     8052f46 <_IO_stdin_used+0x15e2>
cmp    (%eax),%ah
jns    8052f54 <_IO_stdin_used+0x15f0>
jne    8052f07 <_IO_stdin_used+0x15a3>
popa
jb     8052f4f <_IO_stdin_used+0x15eb>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8052f6f <_IO_stdin_used+0x160b>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8052f79 <_IO_stdin_used+0x1615>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     8052f96 <_IO_stdin_used+0x1632>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     8052f95 <_IO_stdin_used+0x1631>
outsb  %ds:(%esi),(%dx)
je     8052f53 <_IO_stdin_used+0x15ef>
jo     8052f9a <_IO_stdin_used+0x1636>
jb     8052fa4 <_IO_stdin_used+0x1640>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     8052fb4 <_IO_stdin_used+0x1650>
je     8052fc1 <_IO_stdin_used+0x165d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052f86 <_IO_stdin_used+0x1622>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052fd4 <_IO_stdin_used+0x1670>
je     8052fe1 <_IO_stdin_used+0x167d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052fa6 <_IO_stdin_used+0x1642>
and    %ah,0x250a2c73
jae    8052fae <_IO_stdin_used+0x164a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052ff8 <_IO_stdin_used+0x1694>
je     8053005 <_IO_stdin_used+0x16a1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052fca <_IO_stdin_used+0x1666>
and    %ah,0x250a2c73
jae    8052fd2 <_IO_stdin_used+0x166e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8053020 <_IO_stdin_used+0x16bc>
je     805302d <_IO_stdin_used+0x16c9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052ff2 <_IO_stdin_used+0x168e>
and    %ah,0x250a2c73
jae    8052ffa <_IO_stdin_used+0x1696>
and    %ah,0x25202c73
jae    8053002 <_IO_stdin_used+0x169e>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805304c <_IO_stdin_used+0x16e8>
je     8053059 <_IO_stdin_used+0x16f5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805301e <_IO_stdin_used+0x16ba>
and    %ah,0x250a2c73
jae    8053026 <_IO_stdin_used+0x16c2>
and    %ah,0x25202c73
jae    805302e <_IO_stdin_used+0x16ca>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805307c <_IO_stdin_used+0x1718>
je     8053089 <_IO_stdin_used+0x1725>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805304e <_IO_stdin_used+0x16ea>
and    %ah,0x250a2c73
jae    8053056 <_IO_stdin_used+0x16f2>
and    %ah,0x25202c73
jae    805305e <_IO_stdin_used+0x16fa>
and    %ah,0x250a2c73
jae    8053066 <_IO_stdin_used+0x1702>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80530b0 <_IO_stdin_used+0x174c>
je     80530bd <_IO_stdin_used+0x1759>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8053082 <_IO_stdin_used+0x171e>
and    %ah,0x250a2c73
jae    805308a <_IO_stdin_used+0x1726>
and    %ah,0x25202c73
jae    8053092 <_IO_stdin_used+0x172e>
and    %ah,0x250a2c73
jae    805309a <_IO_stdin_used+0x1736>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
and    %cl,%ch
add    $0x8,%al
sub    %cl,%ch
add    $0x8,%al
push   $0xb00804cd
int    $0x4
or     %cl,(%eax)
into
add    $0x8,%al
pusha
into
add    $0x8,%al
enter  $0x4ce,$0x8
inc    %eax
iret
add    $0x8,%al
loopne 805306d <_IO_stdin_used+0x1709>
add    $0x8,%al
js     8053072 <_IO_stdin_used+0x170e>
add    $0x8,%al
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     805313d <_IO_stdin_used+0x17d9>
jb     805312f <_IO_stdin_used+0x17cb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     8053151 <_IO_stdin_used+0x17ed>
popa
jb     8053142 <_IO_stdin_used+0x17de>
and    %al,0x6f(%esi)
jne    8053150 <_IO_stdin_used+0x17ec>
fs
popa
je     805314f <_IO_stdin_used+0x17eb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805316e <_IO_stdin_used+0x180a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     805316c <_IO_stdin_used+0x1808>
je     805317b <_IO_stdin_used+0x1817>
arpl   %ax,%cs:(%eax)
sub    %ch,(%edx)
pop    %edi
pop    %edi
gs
jb     8053184 <_IO_stdin_used+0x1820>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x29292820,0x6e(%edi),%ebp
and    %ah,(%ecx)
cmp    $0x323220,%eax
js     8053190 <_IO_stdin_used+0x182c>
je     805319f <_IO_stdin_used+0x183b>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8053195 <_IO_stdin_used+0x1831>
outsb  %ds:(%esi),(%dx)
add    %ch,0x62(%ecx,%ebp,2)
das
js     80531ab <_IO_stdin_used+0x1847>
je     80531ac <_IO_stdin_used+0x1848>
je     80531ab <_IO_stdin_used+0x1847>
insb   (%dx),%es:(%edi)
arpl   %ax,%cs:(%eax)
xor    %ah,(%eax)
cmp    $0x3d,%al
and    %dh,0x74(%ebx)
jb     80531bd <_IO_stdin_used+0x1859>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %ah,%gs:(%esi)
and    %dh,%es:0x74(%ebx)
jb     80531cc <_IO_stdin_used+0x1868>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %bh,%gs:0x363320(,%edi,1)
add    %al,(%eax)
into
fadds  (%eax,%ecx,1)
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
xchg   %eax,%edx
fadds  (%eax,%ecx,1)
sbb    %dl,%bh
add    $0x8,%al
loopne 8053156 <_IO_stdin_used+0x17f2>
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
jbe    8053166 <_IO_stdin_used+0x1802>
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
push   %eax
fadds  (%eax,%ecx,1)
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
adc    %eax,%ebx
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
(bad)
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
mov    %eax,0x670804d7
xlat   %ds:(%ebx)
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
push   %esp
xlat   %ds:(%ebx)
add    $0x8,%al
sub    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
loopne 80531d6 <_IO_stdin_used+0x1872>
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
jbe    80531e6 <_IO_stdin_used+0x1882>
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
push   %eax
fadds  (%eax,%ecx,1)
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
(bad)
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
sbb    %dl,%bh
add    $0x8,%al
inc    %edx
xlat   %ds:(%ebx)
add    $0x8,%al
js     80532b5 <_IO_stdin_used+0x1951>
je     80532b6 <_IO_stdin_used+0x1952>
je     80532b5 <_IO_stdin_used+0x1951>
jne    80532b4 <_IO_stdin_used+0x1950>
add    %ch,(%esi)
add    %al,%cs:(%eax)
adc    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6c637963,0x2f(%edx),%esp
gs
sub    $0x63656863,%eax
imul   $0x63,(%esi),%ebp
add    %dh,0x74(%ebx)
popa
je     805330c <_IO_stdin_used+0x19a8>
sub    $0x67616d3e,%eax
imul   $0x39203d3d,0x20(%ebx),%esp
cmp    %dh,(%edx)
aaa
cmp    %dh,(%esi)
xor    (%eax),%al
arpl   %di,0x63(%ecx)
insb   (%dx),%es:(%edi)
gs
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x0(%ebx)
and    (%eax),%esp
outsb  %gs:(%esi),(%dx)
je     805333e <_IO_stdin_used+0x19da>
imul   $0x2020203a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
cmp    (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
insl   (%dx),%es:(%edi)
popa
js     805331a <_IO_stdin_used+0x19b6>
bound  %esi,0x63(%ebp)
imul   $0x20,0x74(%ebp),%esp
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 805336f <_IO_stdin_used+0x1a0b>
cmp    (%eax),%ah
and    $0xa756c,%eax
add    %al,(%eax)
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %dh,0x73(%ebp)
gs cmp %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,0x2820756c
and    $0x2566322e,%eax
and    $0xa29,%eax
cmpb   $0xcd,(%edi)
int3
dec    %esp
aas
hlt
std
mov    $0x3f,%ah
add    %al,(%eax)
add    %al,(%eax)
int    $0xcc
int3
cmp    $0x3f666666,%eax
int    $0xcc
mov    %?,(%edi)
add    %al,(%eax)
enter  $0x42,$0x0
orb    $0x75,0x2f(%edi)
jae    80533d2 <_IO_stdin_used+0x1a6e>
das
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
test   $0x4,%al
add    %al,(%eax)
xchg   %eax,%esp
add    %al,(%eax)
add    %ch,(%eax)
pop    %esp
(bad)
inc    %esp
add    $0x0,%al
add    %cl,(%eax)
popa
(bad)
decl   (%eax)
add    $0x67d80000,%eax
(bad)
(bad)
call   400533b1 <optarg+0x37ffc1ad>
insb   (%dx),%es:(%edi)
(bad)
ljmp   *0x6cb80000(,%eax,1)
(bad)
pushl  0x0(%ebp,%eax,1)
add    %ch,%al
insb   (%dx),%es:(%edi)
(bad)
decl   -0x7fffffb(%eax)
insb   (%dx),%es:(%edi)
(bad)
lcall  *0x6d580000(%ebp,%eax,1)
(bad)
inc    %eax
add    $0x6db80000,%eax
(bad)
jmp    *%esp
add    $0x7c480000,%eax
(bad)
ljmp   *(%eax)
push   %es
add    %al,(%eax)
pop    %eax
jl     80533e6 <_IO_stdin_used+0x1a82>
(bad)
cmp    $0x6,%al
add    %al,(%eax)
push   $0x50ffff7c
push   %es
add    %al,(%eax)
cmp    %bh,-0x1(%ebp)
(bad)
jl     8053400 <_IO_stdin_used+0x1a9c>
add    %al,(%eax)
cwtl
jge    80533fe <_IO_stdin_used+0x1a9a>
lcall  *0x7dd80000(%esi,%eax,1)
(bad)
inc    %eax
push   %es
add    %al,(%eax)
pop    %eax
jle    805340e <_IO_stdin_used+0x1aaa>
push   %esp
push   %es
add    %al,(%eax)
or     %bh,-0x1(%edi)
pushl  (%edi,%eax,1)
add    %al,(%eax)
cmp    %bh,-0x1(%edi)
jmp    *0x7(%eax)
add    %al,(%eax)
sub    %al,0x798ffff(%eax)
add    %al,(%eax)
pop    %eax
mov    %bh,%bh
(bad)
faddl  (%edi)
add    %al,(%eax)
clc
mov    %edi,%edi
lcall  *(%eax,%ecx,1)
add    %al,(%eax)
cmp    %cl,0x850ff(%edi,%edi,8)
add    %bl,-0x74(%eax)
(bad)
jmp    *0x0(%eax,%ecx,1)
add    %bh,-0x74(%eax)
(bad)
(bad)
js     805345a <_IO_stdin_used+0x1af6>
add    %al,(%eax)
mov    $0x9cffff8c,%eax
or     %al,(%eax)
add    %bl,%al
mov    %?,%edi
pushl  0x18000008(%eax)
(bad)
(bad)
call   *%esp
or     %al,(%eax)
add    %bh,-0x73(%eax)
(bad)
decl   (%eax)
or     %eax,(%eax)
add    %bl,-0x72(%eax)
(bad)
incl   0x0(%ecx,%ecx,1)
add    %cl,0x5cffff8e(%eax)
or     %eax,(%eax)
add    %bl,(%eax)
(bad)
(bad)
call   *0x38000009(%eax)
(bad)
(bad)
jmp    *-0x70a80000(%ecx,%ecx,1)
(bad)
(bad)
mov    $0x78000009,%eax
(bad)
(bad)
dec    %esp
or     %eax,(%eax)
add    %bl,-0x1f000071(%eax)
or     %eax,(%eax)
add    %cl,%al
(bad)
(bad)
incl   (%eax)
or     (%eax),%al
add    %bh,%al
(bad)
(bad)
jmp    *(%eax)
or     (%eax),%al
add    %ch,(%eax)
nop
(bad)
(bad)
cmp    %cl,(%edx)
add    %al,(%eax)
pop    %eax
nop
(bad)
call   *0xa(%eax)
add    %al,(%eax)
or     %dl,0xa74ffff(%ecx)
add    %al,(%eax)
cmp    %dl,0xa8cffff(%ecx)
add    %al,(%eax)
push   $0xa4ffff91
or     (%eax),%al
add    %bl,-0x4300006f(%eax)
or     (%eax),%al
add    %cl,-0x6e(%eax)
(bad)
jmp    *%eax
or     (%eax),%al
add    %cl,-0x700006e(%eax)
or     (%eax),%al
add    %cl,%al
xchg   %eax,%edx
(bad)
call   *(%eax)
or     (%eax),%eax
add    %cl,(%eax)
xchg   %eax,%ebx
(bad)
ljmp   *(%eax)
or     (%eax),%eax
add    %ch,(%eax)
xchg   %eax,%ebx
(bad)
(bad)
cmp    $0xb,%al
add    %al,(%eax)
dec    %eax
xchg   %eax,%ebx
(bad)
call   *0xb(%eax)
add    %al,(%eax)
push   $0x64ffff93
or     (%eax),%eax
add    %cl,0x78ffff93(%eax)
or     (%eax),%eax
add    %ch,%al
xchg   %eax,%ebx
(bad)
jmp    *-0x69180000(%ebx,%ecx,1)
(bad)
jmp    *%esp
or     (%eax),%eax
add    %cl,0x20ffff97(%eax)
or     $0x0,%al
add    %bh,%al
pushf
(bad)
(bad)
mov    $0x4800000c,%esp
popf
(bad)
call   *%esp
or     $0x0,%al
add    %ch,-0x7000063(%eax)
or     $0x0,%al
add    %ch,%al
popf
(bad)
call   *(%eax)
or     $0x9e980000,%eax
(bad)
pushl  -0x61380000(,%ecx,1)
(bad)
lcall  *0xd(%eax)
add    %al,(%eax)
clc
sahf
(bad)
(bad)
jl     8053587 <_IO_stdin_used+0x1c23>
add    %al,(%eax)
or     %bl,0xd90ffff(%edi)
add    %al,(%eax)
pop    %eax
lahf
(bad)
inc    %eax
or     $0x9f980000,%eax
(bad)
(bad)
in     (%dx),%al
or     $0x9ff80000,%eax
(bad)
lcall  *(%esi,%ecx,1)
add    %al,(%eax)
dec    %eax
mov    0xe40ffff,%al
add    %al,(%eax)
js     8053546 <_IO_stdin_used+0x1be2>
(bad)
jmp    *0xe(%eax)
add    %al,(%eax)
test   $0xa0,%al
(bad)
(bad)
jl     80535c0 <_IO_stdin_used+0x1c5c>
add    %al,(%eax)
fsubs  0xe9cffff(%eax)
add    %al,(%eax)
or     %ah,0xebcffff(%ecx)
add    %al,(%eax)
pop    %eax
mov    0xed0ffff,%eax
add    %al,(%eax)
enter  $0xffa1,$0xff
in     (%dx),%al
push   %cs
add    %al,(%eax)
clc
mov    0xf00ffff,%eax
add    %al,(%eax)
sbb    %ah,0xf58ffff(%esi)
add    %al,(%eax)
pop    %eax
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
decl   -0x77fffff1(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
jmp    *-0x47fffff1(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
(bad)
mov    $0xd800000f,%eax
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
dec    %esp
sldt   (%eax)
dec    %eax
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
incl   (%eax)
adc    %al,(%eax)
add    %ch,(%eax)
test   $0xff,%al
lcall  *0x10(%eax)
add    %al,(%eax)
test   $0xa8,%al
(bad)
call   *-0x57180000(%eax,%edx,1)
(bad)
inc    %eax
adc    %al,(%eax)
add    %ch,(%eax)
test   $0x10e4ffff,%eax
add    %al,(%eax)
mov    %ch,0x1120ffff(%ecx)
add    %al,(%eax)
call   610535e2 <optarg+0x58ffc3de>
adc    %eax,(%eax)
add    %bh,-0x4f000055(%eax)
adc    %eax,(%eax)
add    %bh,(%eax)
lods   %ds:(%esi),%al
(bad)
jmp    *%eax
adc    %eax,(%eax)
add    %ch,0xcffffac(%eax)
adc    (%eax),%al
add    %bl,(%eax)
lods   %ds:(%esi),%eax
(bad)
(bad)
cmp    $0x12,%al
add    %al,(%eax)
cmp    %ch,0x127cffff(%edi)
add    %al,(%eax)
sbb    %dh,0x12e8ffff(%eax)
add    %al,(%eax)
call   2d053621 <optarg+0x24ffc41d>
adc    (%eax),%eax
add    %cl,(%eax)
mov    $0x13c4ffff,%edx
add    %al,(%eax)
mov    %bh,0x1434ffff(%ebp)
add    %al,(%eax)
sbb    %bh,0x146cffff(%edi)
add    %al,(%eax)
sub    %al,%bh
(bad)
(bad)
fcoml  (%eax,%eax,1)
add    %ch,-0x39(%eax)
(bad)
(bad)
cld
adc    $0x0,%al
add    %cl,%al
enter  $0xffff,$0x80
adc    $0xc9380000,%eax
(bad)
(bad)
mov    $0x68000015,%eax
leave
(bad)
call   *%eax
adc    $0xc9e80000,%eax
(bad)
ljmp   *(%eax)
push   %ss
add    %al,(%eax)
or     %cl,%dl
(bad)
(bad)
cmp    $0x16,%al
add    %al,(%eax)
clc
lret   $0xffff
xchg   %eax,%esp
push   %ss
add    %al,(%eax)
cmp    %cl,%bl
(bad)
ljmp   *-0x34380000(%esi,%edx,1)
(bad)
(bad)
call   e00536f3 <optarg+0xd7ffc4ef>
lret
(bad)
(bad)
cld
push   %ss
add    %al,(%eax)
call   190536b4 <optarg+0x10ffc4b0>
pop    %ss
add    %al,(%eax)
sbb    %cl,%ah
(bad)
pushl  (%edi,%edx,1)
add    %al,(%eax)
fmul   %st(4),%st
(bad)
jmp    *-0x77ffffe9(%eax)
int    $0xff
pushl  -0x31680000(%edi,%edx,1)
(bad)
decl   (%eax)
sbb    %al,(%eax)
add    %ch,0x1cffffce(%eax)
sbb    %al,(%eax)
add    %bh,0x30ffffce(%eax)
sbb    %al,(%eax)
add    %cl,%al
into
(bad)
incl   0x0(%eax,%ebx,1)
add    %bl,(%eax)
iret
(bad)
ljmp   *0x18(%eax)
add    %al,(%eax)
js     80536fd <_IO_stdin_used+0x1d99>
(bad)
jmp    *-0x2f780000(%eax,%ebx,1)
(bad)
jmp    *%eax
sbb    %al,(%eax)
add    %ch,%al
sar    %bh
ljmp   *(%eax)
sbb    %eax,(%eax)
add    %ch,(%eax)
sar    %edi
decl   0x19(%eax)
add    %al,(%eax)
mov    %dl,%cl
(bad)
incl   -0x2e180000(%ecx,%ebx,1)
(bad)
(bad)
mov    $0x68000019,%esp
sar    %cl,%bh
(bad)
clc
sbb    %eax,(%eax)
add    %ch,0x1cffffd2(%eax)
sbb    (%eax),%al
add    %bl,%al
sar    %cl,%bh
pushl  (%eax)
sbb    (%eax),%al
add    %bl,(%eax)
aam    $0xff
decl   -0x57ffffe6(%eax)
aam    $0xff
(bad)
mov    $0x7800001a,%esp
aad    $0xff
push   %esp
sbb    (%eax),%al
add    %cl,(%eax)
xlat   %ds:(%ebx)
(bad)
jmp    *0x0(%ebx,%ebx,1)
add    %bl,%al
fdivr  %st(7),%st
inc    %eax
sbb    (%eax),%eax
add    %ch,%al
fdivr  %st(7),%st
call   *%esp
sbb    (%eax),%eax
add    %ch,(%eax)
fcos
(bad)
clc
sbb    (%eax),%eax
add    %bl,0x38ffffda(%eax)
sbb    $0x0,%al
add    %cl,%al
(bad)
decl   0x0(%esp,%ebx,1)
add    %bl,%al
(bad)
jmp    *0x1c(%eax)
add    %al,(%eax)
sbb    %bl,%bl
(bad)
decl   -0x24a80000(%esp,%ebx,1)
(bad)
dec    %eax
sbb    $0x0,%al
add    %bl,(%eax)
(bad)
decl   (%eax)
sbb    $0xdf580000,%eax
(bad)
jmp    *(%eax)
sbb    $0xdf880000,%eax
(bad)
(bad)
cmp    %bl,0xdfc80000
(bad)
pushl  0x0(%ebp,%ebx,1)
add    %ch,-0x20(%eax)
(bad)
(bad)
mov    $0x8800001d,%esp
loope  80537fe <_IO_stdin_used+0x1e9a>
incl   (%esi,%ebx,1)
add    %al,(%eax)
call   390537ea <optarg+0x30ffc5e6>
push   %ds
add    %al,(%eax)
js     80537f0 <_IO_stdin_used+0x1e8c>
(bad)
decl   -0x57ffffe2(%eax)
jecxz  8053816 <_IO_stdin_used+0x1eb2>
push   %esp
push   %ds
add    %al,(%eax)
or     %ah,%ch
(bad)
jmp    *0x1f(%eax)
add    %al,(%eax)
js     805380b <_IO_stdin_used+0x1ea7>
(bad)
lcall  *-0x1a780000(%edi,%ebx,1)
(bad)
.byte 0xff
mov    $0x1f,%al
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805384b <_IO_stdin_used+0x1ee7>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
push   %edi
(bad)
jmp    *%eax
add    $0x0,%al
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805386b <_IO_stdin_used+0x1f07>
js     8053869 <_IO_stdin_used+0x1f05>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,%al
(bad)
(bad)
call   *0x4(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
clc
pop    %ebx
(bad)
(bad)
flds   0x41000000
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
push   %eax
xchg   %al,(%ebx,%eax,4)
add    $0x44000000,%eax
add    %al,(%eax)
add    %al,0x67040000(%eax,%eax,1)
(bad)
(bad)
jnp    80538c2 <_IO_stdin_used+0x1f5e>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ecx),%cl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ecx
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ebp)
push   %cs
add    $0x41,%al
or     (%eax),%edx
add    %al,(%eax)
add    %cl,%ah
add    %al,(%eax)
add    %bh,(%edi,%eiz,2)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
loopne 8053916 <_IO_stdin_used+0x1fb2>
add    %al,(%eax)
pop    %eax
addr16 (bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %al,(%eax)
add    %dl,-0x1(%edi,%eiz,2)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
jbe    8053949 <_IO_stdin_used+0x1fe5>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
nop
addr16 (bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
jbe    805396d <_IO_stdin_used+0x2009>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %bh,(%ecx,%eax,1)
add    %al,(%eax)
int3
addr16 (bad)
incl   0xe(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2a00e46
sub    $0x140e0a07,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%ecx)
add    %bl,(%eax)
jbe    80539ba <_IO_stdin_used+0x2056>
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x76140000(%ecx,%eax,1)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,0x10000001(%eax)
jbe    80539e2 <_IO_stdin_used+0x207e>
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
aam    $0x1
add    %al,(%eax)
mov    $0x76,%ah
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %eax,(%eax)
add    %dh,%ah
jbe    8053a2e <_IO_stdin_used+0x20ca>
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%edx)
add    %al,(%eax)
adc    %dh,-0x1(%edi)
pushl  0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edi),%ah
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
dec    %esp
add    (%eax),%al
add    %bl,-0x1(%edi,%esi,2)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
mov    %es,(%edx)
add    %al,(%eax)
int3
ja     8053ac6 <_IO_stdin_used+0x2162>
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
mov    $0xd0000002,%eax
ja     8053af2 <_IO_stdin_used+0x218e>
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,%al
add    (%eax),%al
add    %cl,0x2fffff78(%eax)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
xor    $0x3,%al
add    %al,(%eax)
je     8053af0 <_IO_stdin_used+0x218c>
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %dh,0x0(%ebx,%eax,1)
add    %dl,%ah
cmp    $0xffffffff,%edi
add    %al,%ss:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x1ffffffd(%eax)
cmp    $0xffffffff,%edi
adc    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
mov    $0xec000003,%esp
cmp    $0xffffffff,%edi
adc    $0x0,%eax
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,%al
add    (%eax),%eax
add    %bh,%al
cmp    $0xffffffff,%edi
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %dl,(%esp,%eax,4)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    $0x0,%al
add    %ah,(%eax)
test   %bh,%bh
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sub    $0x4,%al
add    %al,(%eax)
cmp    $0x84,%al
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x0,%al
add    %ch,-0x7c(%eax)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bl,-0x7af40000(%esp,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
mov    $0x4,%ah
add    %al,(%eax)
and    $0x85,%al
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   88053d25 <optarg+0x7fffcb21>
test   %edi,%edi
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
add    $0x0,%al
add    %cl,0x19ffff(%ebp,%eax,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %al,0x85980000
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,-0x7a5c0000(,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
cmp    %al,0x85b00000
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,0x5(%eax)
add    %al,(%eax)
rolb   $0x0,0x2cffff(%ebp)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,0x5(%eax)
add    %al,(%eax)
rolb   0x23ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
nop
add    $0x85e80000,%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
test   $0x5,%al
add    %al,(%eax)
add    %al,0xb0ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
int3
add    $0x868c0000,%eax
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
in     $0x5,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xchg   %bh,%bh
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cld
add    $0x86bc0000,%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
adc    $0x6,%al
add    %al,(%eax)
aam    $0x86
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cmp    %al,(%esi)
add    %al,(%eax)
pusha
xchg   %edi,%edi
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %eax
push   %es
add    %al,(%eax)
mov    %al,0x33ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0xb0000006
xchg   %edi,%edi
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%esi)
add    %bl,%al
xchg   %edi,%edi
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x781c0000(%esi,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0xffffffa(%eax)
xchg   %edi,%edi
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,-0x78040000(%esi,%eax,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,%al
push   %es
add    %al,(%eax)
or     %cl,0x57ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x7ff1bcfe(%ebx)
add    %eax,(%edx)
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %bh,%ah
push   %es
add    %al,(%eax)
cmp    $0x88,%al
(bad)
(bad)
cld
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3a,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,(%edi,%eax,1)
add    %al,(%eax)
cld
mov    %bh,%bh
call   *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff85,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x98,%al
add    %al,(%eax)
add    %bh,0x7(%eax)
add    %al,(%eax)
pusha
mov    %edi,%edi
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    $0x8,%al
add    %al,(%eax)
xor    $0x90,%al
(bad)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,(%eax,%ecx,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
nop
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
push   %eax
or     %al,(%eax)
add    %ch,0x33ffff90(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
push   $0xd0000008
nop
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    %cs,(%eax)
add    %al,(%eax)
pop    %esp
xchg   %eax,%ecx
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x8,%al
add    %al,(%eax)
push   $0x2effff91
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
aam    $0x8
add    %al,(%eax)
je     805409f <_IO_stdin_used+0x273b>
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
call   78054129 <optarg+0x6fffcf25>
xchg   %eax,%ecx
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
sbb    %cl,(%ecx)
add    %al,(%eax)
nop
xchg   %eax,%ecx
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
inc    %esp
or     %eax,(%eax)
add    %ah,0x5dffff(%ecx,%edx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
je     80541b3 <_IO_stdin_used+0x284f>
add    %al,(%eax)
aam    $0x91
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
cwtl
or     %eax,(%eax)
add    %al,(%eax)
xchg   %eax,%edx
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bh,0x10000009(%eax)
xchg   %eax,%edx
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
aam    $0x9
add    %al,(%eax)
and    $0x92,%al
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,%ah
or     %eax,(%eax)
add    %dh,(%edx,%edx,4)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,(%edx,%ecx,1)
add    %al,(%eax)
inc    %esp
xchg   %eax,%edx
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
or     (%eax),%al
add    %al,0x64ffff92(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %al,0x0(%edx,%ecx,1)
add    %dl,%ah
xchg   %eax,%edx
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %bl,0xa(%eax)
add    %al,(%eax)
lock xchg %eax,%edx
(bad)
call   *(%esp,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xa,%al
add    %al,(%eax)
mov    $0x32ffff96,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x59,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     -0x3d(%ebx),%ecx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
loopne 8054320 <_IO_stdin_used+0x29bc>
add    %al,(%eax)
enter  $0xff96,$0xff
sub    $0x0,%eax
inc    %ebx
push   %cs
and    %ch,0xe(%ecx)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
clc
or     (%eax),%al
add    %ah,%al
xchg   %eax,%esi
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%eax)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
adc    %cl,(%ebx)
add    %al,(%eax)
clc
xchg   %eax,%esi
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %ah,(%ebx,%ecx,1)
add    %al,(%eax)
add    $0x97,%al
(bad)
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x6f,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     -0x3d(%edx,%ecx,1),%edx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,0xb(%eax)
add    %al,(%eax)
inc    %eax
xchg   %eax,%edi
(bad)
(bad)
fild   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x71,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
dec    %esi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %dh,-0x37fffff5(%eax)
xchg   %eax,%edi
(bad)
incl   0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %ch,%ah
or     (%eax),%eax
add    %cl,(%eax,%ebx,4)
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xc(%esi,%ecx,1)
inc    %ecx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sbb    %cl,(%eax,%eax,1)
add    %ah,(%eax)
cwtl
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
cmp    $0xc,%al
add    %al,(%eax)
cmp    $0x98,%al
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
js     80544ba <_IO_stdin_used+0x2b56>
add    %al,(%eax)
pusha
cwtl
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%eax),%esp
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %dh,-0x77fffff4(%eax)
cwtl
(bad)
dec    %ebp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffff96,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
or     %cl,0x9a000000
(bad)
pushl  0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
imul   $0xe,(%edx),%ecx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
cmp    %cl,0x9a500000
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4502(%ebx)
jge    805458d <_IO_stdin_used+0x2c29>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ecx),%esp
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
fs
or     $0x9a940000,%eax
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x48,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esp
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
or     $0x9ad40000,%eax
(bad)
lcall  *0x2
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
push   %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
aam    $0xd
add    %al,(%eax)
mov    $0x9c,%ah
(bad)
call   *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ebx),%bh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
inc    %eax
push   %cs
add    %al,(%eax)
sub    %bl,0xc7ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
jnp    805469a <_IO_stdin_used+0x2d36>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
pushf
add    %al,(%eax)
add    %bh,0x0(%esi,%ecx,1)
add    %bh,0x919ffff(%ebp,%ebx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e46
push   $0x3
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jmp    80546fa <_IO_stdin_used+0x2d96>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
dec    %esp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
rolb   %cl,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %bl,(%edi,%ecx,1)
add    %al,(%eax)
cmp    $0xa6,%al
(bad)
(bad)
jnp    805475d <_IO_stdin_used+0x2df9>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7f,0x3400e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
push   %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
mov    %cs,(%edi)
add    %al,(%eax)
dec    %esp
test   $0x186ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    %al,%ah
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %al,%ah
sldt   (%eax)
movsb  %ds:(%esi),%es:(%edi)
stos   %al,%es:(%edi)
(bad)
incl   0x8
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
push   %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8054842 <_IO_stdin_used+0x2ede>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
xor    $0x10,%al
add    %al,(%eax)
inc    %esp
mov    $0xff,%dl
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %dl,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
add    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax)
add    %dl,0x0(%eax,%edx,1)
add    %ah,-0x1(%edx,%esi,4)
call   *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff82,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
fcoms  (%eax)
add    %al,(%eax)
inc    %eax
mov    $0xff,%bl
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebp),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %dl,(%ecx)
add    %al,(%eax)
js     80548fd <_IO_stdin_used+0x2f99>
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ch,(%eax)
adc    %eax,(%eax)
add    %dl,0x78ffffb3(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     8054987 <_IO_stdin_used+0x3023>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %al,-0x47ffffef(%eax)
mov    $0xff,%bl
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %dl,-0x4c3c0000(%ecx,%edx,1)
(bad)
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
adc    %eax,(%eax)
add    %bl,-0x1(%esp,%esi,4)
pushl  (%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,0xe(%ebp)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
add    $0x12,%al
add    %al,(%eax)
test   %dh,0x82ff(%edi,%edi,8)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a6402
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
adc    (%eax),%al
add    %bl,%al
mov    $0xff,%ah
call   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx,%edx,1)
add    %dl,%ah
mov    $0xff,%ah
decl   (%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
push   $0xd0000012
mov    $0xff,%ah
jmp    *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
push   $0x8c000000
adc    (%eax),%al
add    %bl,%ah
mov    $0xff,%ah
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x58,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
clc
adc    (%eax),%al
add    %dh,(%eax)
mov    $0xff,%ch
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
or     $0x13,%al
add    %al,(%eax)
int3
mov    $0xff,%ch
decl   (%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
pusha
adc    (%eax),%eax
add    %cl,0x8ffffb6(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx,%edx,1)
add    %al,0x8ffff(%esi,%esi,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
mov    %dl,(%ebx)
add    %al,(%eax)
xorb   $0x0,0x8ffff(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,-0x49840000(%ebx,%edx,1)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x2,(%ebx)
inc    %ebp
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %al,%al
adc    (%eax),%eax
add    %ch,0x56ffffb6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa440204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx,%eax,8),%eax
or     $0x41,%al
(bad)
push   %cs
or     %al,0xe(%edi,%eax,8)
add    $0x38,%al
add    %al,(%eax)
add    %bh,%ah
adc    (%eax),%eax
add    %cl,%ah
mov    $0xff,%dh
incl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %bh,(%eax)
adc    $0x0,%al
add    %ah,0x5bffffb7(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebp),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
adcb   $0x0,(%eax,%eax,1)
mov    $0x3cffffb7,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
adc    %ch,0xa(%ebp)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ah,-0x27ffffec(%eax)
mov    $0xff,%bh
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa450204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %bl,%ah
adc    $0x0,%al
add    %bh,%ah
mov    $0xff,%bh
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x10,0xec35302
inc    %ecx
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,-0x47dc0000(,%edx,1)
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,0x15(%eax)
add    %al,(%eax)
push   $0x37ffffb8
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x71,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
je     8054dbf <_IO_stdin_used+0x345b>
add    %al,(%eax)
test   %bh,0x24ffff(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,-0x5fffffeb(%eax)
mov    $0x13cffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx,%ecx,1),%edx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %ah,%al
adc    $0xb9880000,%eax
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    -0x3cbeeff2(%ecx),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
adc    $0x16,%al
add    %al,(%eax)
in     $0xb9,%al
(bad)
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %cl,0x0(%esi,%edx,1)
add    %bh,-0x1(%edx,%edi,4)
decl   0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    (%ebx),%esp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %bh,-0x44640000(%esi,%edx,1)
(bad)
inc    %esi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
jnp    8054f1b <_IO_stdin_used+0x35b7>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8054f2e <_IO_stdin_used+0x35ca>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
pop    %ss
add    %al,(%eax)
adc    %bh,0x5ffff(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sub    $0x17,%al
add    %al,(%eax)
or     $0xbd,%al
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
push   %eax
pop    %ss
add    %al,(%eax)
sub    %bh,0x165ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x44,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
nop
pop    %ss
add    %al,(%eax)
pop    %eax
mov    $0x29ffff,%esi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
pop    %ss
add    %al,(%eax)
je     8054f9c <_IO_stdin_used+0x3638>
(bad)
decl   (%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,0x70000017(%eax)
mov    $0x3effff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xec37804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %ah,%ah
pop    %ss
add    %al,(%eax)
test   %bh,0x3fffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ch,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%eax
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
and    %bl,(%eax)
add    %al,(%eax)
mov    %bh,0x3b9ffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
pusha
sbb    %al,(%eax)
add    %cl,(%eax)
ret    $0xffff
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xe(%ebp)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
js     80550c6 <_IO_stdin_used+0x3762>
add    %al,(%eax)
xor    %al,%dl
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
nop
sbb    %al,(%eax)
add    %cl,-0x3e(%eax)
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6b300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %cl,%ah
sbb    %al,(%eax)
add    %cl,-0x1(%edx,%eax,8)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,(%ecx,%ebx,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
ret    $0xffff
pop    %ds
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %bl,0x0(%ecx,%ebx,1)
add    %bh,-0x1(%ebx,%eax,8)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %cl,-0x4fffffe7(%eax)
ret
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   $0xe0000000
sbb    %eax,(%eax)
add    %ch,%al
ret
(bad)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
dec    %esp
sbb    (%eax),%al
add    %ch,0x157ffff(%esp,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     80552ab <_IO_stdin_used+0x3947>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    80552e2 <_IO_stdin_used+0x397e>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,-0x5fffffe6(%eax)
(bad)
popa
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dh,%ah
sbb    (%eax),%al
add    %dl,%ah
(bad)
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     %bl,(%ebx)
add    %al,(%eax)
rol    %ch
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0x30
fwait
add    $0x8,%al
.byte 0x10
fwait
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
mov    %cl,0xd0804(%edi)
add    %al,(%eax)
dec    %esp
sbb    %eax,0x1908
add    %cl,(%eax)
outsl  %ds:(%esi),(%dx)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x6f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
aam    $0x87
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %dl,(%edx,%eax,4)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
leave
add    (%eax),%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
jo     8056f88 <_IO_stdin_used+0x5624>
or     %al,(%edx)
add    %al,(%eax)
add    %ch,0x2(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %ah,(%eax)
lea    (%eax,%ecx,1),%eax
adc    %eax,(%eax)
add    %al,(%eax)
call   1a0d7431 <optarg+0x1208022d>
add    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x58(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x62(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x6f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,%dh
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8056fca <_IO_stdin_used+0x5666>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    805700b <_IO_stdin_used+0x56a7>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    805704c <_IO_stdin_used+0x56e8>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    805708d <_IO_stdin_used+0x5729>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    80570ce <_IO_stdin_used+0x576a>
add    $0x8,%al
.byte 0x86
xchg   %eax,%esp
add    $0x8,%al
cmp    $0x2a,%al
add    $0x108,%eax
add    %al,(%esi)
add    %al,(%eax)
add    %dl,0x1000805(%ecx,%esi,2)
add    %al,(%eax)
inc    %eax
jb     80571a0 <__progname>
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
arpl   %bp,0x6f(%eax)
ja     73 <getpwnam@plt-0x8048f4d>
add    %al,(%eax)
add    %cl,-0x41(%ecx)
inc    %ebx
.byte 0x1d
