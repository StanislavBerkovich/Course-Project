das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ch,-0x16(%edx)
jp     804814c <strcmp@plt-0x9b4>
in     $0xad,%eax
dec    %ecx
push   %ss
insb   (%dx),%es:(%edi)
mov    $0x3e,%ch
adc    (%edx),%bl
jns    80481bf <strcmp@plt-0x941>
dec    %edx
pop    %ecx
scas   %es:(%edi),%al
push   %eax
add    (%eax),%eax
add    %al,(%eax)
xor    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%eax,%eax,2)
dec    %eax
add    %ah,(%ecx,%ebp,2)
adc    %dl,(%edx)
xor    (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sub    %ebx,0x50bc1c8c
jbe    8048176 <strcmp@plt-0x98a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <strcmp@plt-0x973>
dec    %ebx
jecxz  80481a4 <strcmp@plt-0x95c>
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
roll   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
clc
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %al,(%bx,%si)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
addl   $0x0,(%ecx)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popa
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %eax,(%edx)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
nop
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lret
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ljmp   $0x0,$0x1
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
les    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x80000001,%eax
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     %eax,(%edx)
add    %al,(%eax)
inc    %eax
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
outsb  %ds:(%esi),(%dx)
add    %eax,(%eax)
add    %al,0x4(%ecx,%esi,8)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
adc    $0x2,%al
add    %al,(%eax)
pusha
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
and    $0xbf,%al
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
lldt   0x60000000(%ebp)
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
popf
add    %eax,(%eax)
add    %al,-0xf(%eax)
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048603 <strcmp@plt-0x4fd>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048611 <strcmp@plt-0x4ef>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    804861e <strcmp@plt-0x4e2>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     804862a <strcmp@plt-0x4d6>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048631 <strcmp@plt-0x4cf>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     8048643 <strcmp@plt-0x4bd>
outsl  %ds:(%esi),(%dx)
ja     8048635 <strcmp@plt-0x4cb>
add    %dh,0x74(%ebx)
jb     8048645 <strcmp@plt-0x4bb>
arpl   %bp,0x70(%ebp)
add    %dh,0x74(%ebx)
jb     8048651 <strcmp@plt-0x4af>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     804865d <strcmp@plt-0x4a3>
gs
js     8048660 <strcmp@plt-0x4a0>
add    %ah,0x72(%ebp)
jb     8048660 <strcmp@plt-0x4a0>
jb     80485f3 <strcmp@plt-0x50d>
pop    %edi
pop    %edi
jae    804866b <strcmp@plt-0x495>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     804861b <strcmp@plt-0x4e5>
pop    %edi
gs
js     8048688 <strcmp@plt-0x478>
je     8048621 <strcmp@plt-0x4df>
jo     8048695 <strcmp@plt-0x46b>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048688 <strcmp@plt-0x478>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     80486a4 <strcmp@plt-0x45c>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    80486bd <strcmp@plt-0x443>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     8048650 <strcmp@plt-0x4b0>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    80486cd <strcmp@plt-0x433>
jb     80486c7 <strcmp@plt-0x439>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     80486c7 <strcmp@plt-0x439>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    80486cf <strcmp@plt-0x431>
je     804866c <strcmp@plt-0x494>
pop    %edi
pop    %edi
gs
jb     80486e3 <strcmp@plt-0x41d>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
data16
jo     8048702 <strcmp@plt-0x3fe>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048700 <strcmp@plt-0x400>
outsl  %ds:(%esi),(%dx)
jne    8048713 <strcmp@plt-0x3ed>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804871b <strcmp@plt-0x3e5>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     80486ce <strcmp@plt-0x432>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048751 <strcmp@plt-0x3af>
outsb  %ds:(%esi),(%dx)
jbe    80486ef <strcmp@plt-0x411>
pop    %edi
pop    %edi
data16
jb     8048759 <strcmp@plt-0x3a7>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048772 <strcmp@plt-0x38e>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     804877c <strcmp@plt-0x384>
je     804877a <strcmp@plt-0x386>
add    %bl,0x5f(%edi)
data16
jo     8048780 <strcmp@plt-0x380>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 8048790 <strcmp@plt-0x370>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     80487b5 <strcmp@plt-0x34b>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80487b1 <strcmp@plt-0x34f>
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     80487b9 <strcmp@plt-0x347>
js     80487ca <strcmp@plt-0x336>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x63727473,0x0(%esi),%ebp
insl   (%dx),%es:(%edi)
jo     8048764 <strcmp@plt-0x39c>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     80487e4 <strcmp@plt-0x31c>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x766f5f5f,0x0(%esi),%ebp
gs
jb     80487e3 <strcmp@plt-0x31d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048781 <strcmp@plt-0x37f>
data16
jo     80487f9 <strcmp@plt-0x307>
je     80487f9 <strcmp@plt-0x307>
pop    %edi
jne    80487f7 <strcmp@plt-0x309>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     804880b <strcmp@plt-0x2f5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048816 <strcmp@plt-0x2ea>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    804881a <strcmp@plt-0x2e6>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     804881e <strcmp@plt-0x2e2>
js     8048824 <strcmp@plt-0x2dc>
je     80487bd <strcmp@plt-0x343>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    804883a <strcmp@plt-0x2c6>
popa
jb     804883d <strcmp@plt-0x2c3>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x6000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000000
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
inc    %eax
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edi)
add    %cl,0x2(%edx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    80488dd <strcmp@plt-0x223>
imul   $0x60000,(%ecx),%ecx
push   %esi
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x50000,0xd(%ecx),%ebp
bound  %eax,(%edx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x26c,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
jbe    80488f8 <strcmp@plt-0x208>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
addb   $0x0,(%edx)
add    %al,(%eax)
add    %al,(%eax)
cld
out    %eax,(%dx)
add    $0x8,%al
push   %es
sbb    (%eax),%al
add    %al,-0xf(%eax)
add    $0x8,%al
add    $0x44000034,%eax
icebp
add    $0x8,%al
add    $0x60000035,%eax
icebp
add    $0x8,%al
add    $0x80000036,%eax
icebp
add    $0x8,%al
.byte 0x5
xor    (%eax),%eax
or     $0xf0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
lock add $0x8,%al
pop    %es
add    (%eax),%al
add    %dl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
lock add $0x8,%al
pop    %es
add    $0x0,%al
add    %bl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    $0xf0200000,%eax
add    $0x8,%al
pop    %es
push   %es
add    %al,(%eax)
and    $0xf0,%al
add    $0x8,%al
pop    %es
pop    %es
add    %al,(%eax)
sub    %dh,%al
add    $0x8,%al
pop    %es
or     %al,(%eax)
add    %ch,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     %eax,(%eax)
add    %dh,(%eax)
lock add $0x8,%al
pop    %es
or     (%eax),%al
add    %dh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     (%eax),%eax
add    %bh,(%eax)
lock add $0x8,%al
pop    %es
or     $0x0,%al
add    %bh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     $0xf0400000,%eax
add    $0x8,%al
pop    %es
push   %cs
add    %al,(%eax)
inc    %esp
lock add $0x8,%al
pop    %es
sldt   (%eax)
dec    %eax
lock add $0x8,%al
pop    %es
adc    %al,(%eax)
add    %cl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    (%eax),%al
add    %dl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    $0x0,%al
add    %bl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    $0xf0600000,%eax
add    $0x8,%al
pop    %es
push   %ss
add    %al,(%eax)
fs
lock add $0x8,%al
pop    %es
pop    %ss
add    %al,(%eax)
push   $0x70804f0
sbb    %al,(%eax)
add    %ch,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    (%eax),%al
add    %dh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    $0x0,%al
add    %bh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    $0xf0800000,%eax
add    $0x8,%al
pop    %es
push   %ds
add    %al,(%eax)
test   %dh,%al
add    $0x8,%al
pop    %es
pop    %ds
add    %al,(%eax)
mov    %dh,%al
add    $0x8,%al
pop    %es
and    %al,(%eax)
add    %cl,0x21070804(%eax,%esi,8)
add    %al,(%eax)
nop
lock add $0x8,%al
pop    %es
and    (%eax),%al
add    %dl,0x23070804(%eax,%esi,8)
add    %al,(%eax)
cwtl
lock add $0x8,%al
pop    %es
and    $0x0,%al
add    %bl,0x25070804(%eax,%esi,8)
add    %al,(%eax)
mov    0x70804f0,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
lock add $0x8,%al
pop    %es
daa
add    %al,(%eax)
test   $0xf0,%al
add    $0x8,%al
pop    %es
sub    %al,(%eax)
add    %ch,0x29070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0xf0,%al
add    $0x8,%al
pop    %es
sub    (%eax),%al
add    %dh,0x2b070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0x70804f0,%eax
sub    $0x0,%al
add    %bh,0x2d070804(%eax,%esi,8)
add    %al,(%eax)
(bad)
lock add $0x8,%al
pop    %es
add    %al,%cs:(%eax)
(bad)
lock add $0x8,%al
pop    %es
das
add    %al,(%eax)
enter  $0x4f0,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
lock add $0x8,%al
pop    %es
xor    %eax,(%eax)
add    %dl,%al
lock add $0x8,%al
pop    %es
xor    (%eax),%al
push   %ebx
sub    $0x8,%esp
call   8049350 <calloc@plt+0x540>
add    $0x6533,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048ae2 <strcmp@plt-0x1e>
call   8048c90 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804f004
jmp    *0x804f008
add    %al,(%eax)
jmp    *0x804f00c
push   $0x0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f010
push   $0x8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f014
push   $0x10
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f018
push   $0x18
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f01c
push   $0x20
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f020
push   $0x28
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f024
push   $0x30
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f028
push   $0x38
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f02c
push   $0x40
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f030
push   $0x48
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f034
push   $0x50
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f038
push   $0x58
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f03c
push   $0x60
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f040
push   $0x68
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f044
push   $0x70
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f048
push   $0x78
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f04c
push   $0x80
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f050
push   $0x88
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f054
push   $0x90
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f058
push   $0x98
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f05c
push   $0xa0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f060
push   $0xa8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f064
push   $0xb0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f068
push   $0xb8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f06c
push   $0xc0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f070
push   $0xc8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f074
push   $0xd0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f078
push   $0xd8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f07c
push   $0xe0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f080
push   $0xe8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f084
push   $0xf0
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f088
push   $0xf8
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f08c
push   $0x100
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f090
push   $0x108
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f094
push   $0x110
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f098
push   $0x118
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f09c
push   $0x120
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0a0
push   $0x128
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0a4
push   $0x130
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0a8
push   $0x138
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0ac
push   $0x140
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0b0
push   $0x148
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0b4
push   $0x150
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0b8
push   $0x158
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0bc
push   $0x160
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0c0
push   $0x168
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0c4
push   $0x170
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0c8
push   $0x178
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0cc
push   $0x180
jmp    8048af0 <strcmp@plt-0x10>
jmp    *0x804f0d0
push   $0x188
jmp    8048af0 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x30,%esp
mov    0x8(%ebp),%esi
movl   $0x804c639,(%esp)
mov    0xc(%ebp),%ebx
call   8048c50 <getenv@plt>
test   %eax,%eax
je     8048f37 <calloc@plt+0x127>
cmp    $0x1,%esi
jle    8048e57 <calloc@plt+0x47>
mov    0x4(%ebx),%eax
cmpb   $0x2d,(%eax)
je     8048f23 <calloc@plt+0x113>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049970 <calloc@plt+0xb60>
movl   $0x804ca9d,0x4(%esp)
movl   $0x6,(%esp)
call   8048d70 <setlocale@plt>
movl   $0x804c649,0x4(%esp)
movl   $0x804c62b,(%esp)
call   8048dc0 <bindtextdomain@plt>
movl   $0x804c62b,(%esp)
call   8048bc0 <textdomain@plt>
movl   $0x8049800,(%esp)
call   804bec0 <calloc@plt+0x30b0>
lea    -0x1(%esi),%eax
mov    %eax,0x2c(%esp)
lea    0x4(%ebx),%edx
movb   $0x1,0x2b(%esp)
cmpl   $0x0,0x2c(%esp)
jle    8048ef6 <calloc@plt+0xe6>
mov    %edx,%esi
mov    0x2c(%esp),%ebx
jmp    8048eda <calloc@plt+0xca>
nop
mov    0x804f180,%eax
mov    0x14(%eax),%ecx
cmp    0x18(%eax),%ecx
jae    80492b0 <calloc@plt+0x4a0>
lea    0x1(%ecx),%edx
mov    %edx,0x14(%eax)
movb   $0x20,(%ecx)
mov    0x804f180,%eax
add    $0x4,%esi
mov    %eax,0x4(%esp)
mov    -0x4(%esi),%eax
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
sub    $0x1,%ebx
jne    8048ec0 <calloc@plt+0xb0>
cmpb   $0x0,0x2b(%esp)
je     8048f17 <calloc@plt+0x107>
mov    0x804f180,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8049316 <calloc@plt+0x506>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
movl   $0x0,(%esp)
call   8048ca0 <exit@plt>
cmpb   $0x6e,0x1(%eax)
jne    8048e57 <calloc@plt+0x47>
cmpb   $0x0,0x2(%eax)
jne    8048e57 <calloc@plt+0x47>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049970 <calloc@plt+0xb60>
movl   $0x804ca9d,0x4(%esp)
movl   $0x6,(%esp)
call   8048d70 <setlocale@plt>
movl   $0x804c649,0x4(%esp)
movl   $0x804c62b,(%esp)
call   8048dc0 <bindtextdomain@plt>
movl   $0x804c62b,(%esp)
call   8048bc0 <textdomain@plt>
movl   $0x8049800,(%esp)
call   804bec0 <calloc@plt+0x30b0>
cmp    $0x2,%esi
jne    80492f7 <calloc@plt+0x4e7>
mov    0x4(%ebx),%esi
movl   $0x804c65b,0x4(%esp)
mov    %esi,(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
je     804920c <calloc@plt+0x3fc>
movl   $0x804c662,0x4(%esp)
mov    %esi,(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
je     8049218 <calloc@plt+0x408>
movl   $0x1,0x2c(%esp)
lea    0x4(%ebx),%edx
mov    (%edx),%esi
cmpb   $0x2d,(%esi)
jne    80492a0 <calloc@plt+0x490>
xor    %edi,%edi
movb   $0x1,0x2b(%esp)
movzbl 0x1(%esi),%eax
lea    0x1(%esi),%ebx
test   %al,%al
je     8049000 <calloc@plt+0x1f0>
xor    %ecx,%ecx
nop
cmp    $0x65,%al
je     8049170 <calloc@plt+0x360>
cmp    $0x6e,%al
je     8049170 <calloc@plt+0x360>
cmp    $0x45,%al
je     8049170 <calloc@plt+0x360>
mov    %edi,%eax
mov    %edx,%edi
test   %al,%al
je     8048eb0 <calloc@plt+0xa0>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%esi
movzbl (%esi),%ebx
lea    0x1(%esi),%edx
test   %bl,%bl
je     804904a <calloc@plt+0x23a>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x5c,%bl
je     8049078 <calloc@plt+0x268>
mov    0x804f180,%eax
mov    0x14(%eax),%ecx
cmp    0x18(%eax),%ecx
jae    8049282 <calloc@plt+0x472>
lea    0x1(%ecx),%esi
mov    %esi,0x14(%eax)
mov    %edx,%esi
mov    %bl,(%ecx)
movzbl (%esi),%ebx
lea    0x1(%esi),%edx
test   %bl,%bl
jne    8049020 <calloc@plt+0x210>
add    $0x4,%edi
subl   $0x1,0x2c(%esp)
je     8048ef6 <calloc@plt+0xe6>
mov    0x804f180,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    80492e2 <calloc@plt+0x4d2>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0x20,(%edx)
jmp    8049010 <calloc@plt+0x200>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x1(%esi),%eax
test   %al,%al
je     8049025 <calloc@plt+0x215>
mov    %eax,%ebx
lea    -0x30(%ebx),%eax
cmp    $0x48,%al
lea    0x2(%esi),%edx
ja     8049108 <calloc@plt+0x2f8>
movzbl %al,%eax
jmp    *0x804bfc0(,%eax,4)
movzbl 0x2(%esi),%ebx
lea    -0x30(%ebx),%eax
cmp    $0x7,%al
ja     80491df <calloc@plt+0x3cf>
lea    0x3(%esi),%edx
movzbl (%edx),%eax
sub    $0x30,%ebx
lea    -0x30(%eax),%ecx
cmp    $0x7,%cl
ja     8049025 <calloc@plt+0x215>
lea    -0x30(%eax,%ebx,8),%ebx
movzbl 0x1(%edx),%eax
sub    $0x30,%eax
cmp    $0x7,%al
ja     804930e <calloc@plt+0x4fe>
add    $0x2,%edx
lea    (%eax,%ebx,8),%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0x7,%ebx
jmp    8049025 <calloc@plt+0x215>
movzbl 0x2(%esi),%eax
mov    %edx,0x20(%esp)
mov    %eax,0x24(%esp)
call   8048e00 <__ctype_b_loc@plt>
mov    0x20(%esp),%edx
mov    (%eax),%ecx
mov    0x24(%esp),%eax
testb  $0x10,0x1(%ecx,%eax,2)
jne    80491e6 <calloc@plt+0x3d6>
mov    0x804f180,%eax
mov    0x14(%eax),%ecx
cmp    0x18(%eax),%ecx
jae    80492c5 <calloc@plt+0x4b5>
lea    0x1(%ecx),%esi
mov    %esi,0x14(%eax)
movb   $0x5c,(%ecx)
jmp    8049025 <calloc@plt+0x215>
mov    $0x8,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0xc,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0x1b,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0xb,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0x9,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0xd,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    $0xa,%ebx
jmp    8049025 <calloc@plt+0x215>
lea    0x0(%esi),%esi
add    $0x1,%ecx
movzbl 0x1(%esi,%ecx,1),%eax
test   %al,%al
jne    8048fe8 <calloc@plt+0x1d8>
test   %ecx,%ecx
je     8049000 <calloc@plt+0x1f0>
movzbl (%ebx),%eax
test   %al,%al
je     80491ab <calloc@plt+0x39b>
add    $0x1,%ebx
cmp    $0x65,%al
je     80491d8 <calloc@plt+0x3c8>
cmp    $0x6e,%al
je     80491d0 <calloc@plt+0x3c0>
cmp    $0x45,%al
mov    $0x0,%eax
cmove  %eax,%edi
movzbl (%ebx),%eax
test   %al,%al
jne    804918f <calloc@plt+0x37f>
add    $0x4,%edx
subl   $0x1,0x2c(%esp)
je     8048ef6 <calloc@plt+0xe6>
mov    (%edx),%esi
cmpb   $0x2d,(%esi)
je     8048fda <calloc@plt+0x1ca>
jmp    8049000 <calloc@plt+0x1f0>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2b(%esp)
jmp    8049188 <calloc@plt+0x378>
nop
mov    $0x1,%edi
jmp    8049188 <calloc@plt+0x378>
xor    %ebx,%ebx
jmp    8049025 <calloc@plt+0x215>
mov    %ecx,0x24(%esp)
call   8049420 <calloc@plt+0x610>
movzbl 0x3(%esi),%edx
mov    0x24(%esp),%ecx
mov    %edx,0x20(%esp)
testb  $0x10,0x1(%ecx,%edx,2)
mov    %eax,%ebx
jne    8049262 <calloc@plt+0x452>
lea    0x3(%esi),%edx
jmp    8049025 <calloc@plt+0x215>
movl   $0x0,(%esp)
call   8049470 <calloc@plt+0x660>
mov    0x804f0e8,%eax
movl   $0x0,0x18(%esp)
movl   $0x804c66c,0x14(%esp)
movl   $0x804c677,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x804f180,%eax
movl   $0x804c627,0x8(%esp)
movl   $0x804c5e1,0x4(%esp)
mov    %eax,(%esp)
call   804b4c0 <calloc@plt+0x26b0>
movl   $0x0,(%esp)
call   8048ca0 <exit@plt>
mov    %eax,%ebx
mov    0x20(%esp),%eax
lea    0x4(%esi),%edx
mov    %edx,0x24(%esp)
shl    $0x4,%ebx
call   8049420 <calloc@plt+0x610>
mov    0x24(%esp),%edx
add    %eax,%ebx
jmp    8049025 <calloc@plt+0x215>
movzbl %bl,%ebx
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   8048d90 <__overflow@plt>
mov    0x24(%esp),%edx
mov    %edx,%esi
jmp    8049040 <calloc@plt+0x230>
movb   $0x1,0x2b(%esp)
mov    %edx,%esi
mov    0x2c(%esp),%ebx
jmp    8048eda <calloc@plt+0xca>
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <__overflow@plt>
jmp    8048eda <calloc@plt+0xca>
movl   $0x5c,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   8048d90 <__overflow@plt>
mov    0x24(%esp),%edx
jmp    8049025 <calloc@plt+0x215>
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <__overflow@plt>
jmp    8049010 <calloc@plt+0x200>
lea    -0x1(%esi),%eax
test   %eax,%eax
mov    %eax,0x2c(%esp)
lea    0x4(%ebx),%edx
jle    8048efd <calloc@plt+0xed>
jmp    8048fc8 <calloc@plt+0x1b8>
add    $0x1,%edx
jmp    8049025 <calloc@plt+0x215>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8048d90 <__overflow@plt>
jmp    8048f17 <calloc@plt+0x107>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804beb0
push   $0x804be40
push   %ecx
push   %esi
push   $0x8048e20
call   8048cf0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804f143,%eax
sub    $0x804f140,%eax
cmp    $0x6,%eax
ja     8049370 <calloc@plt+0x560>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804936f <calloc@plt+0x55f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804f140,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804f140,%eax
sub    $0x804f140,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    80493a9 <calloc@plt+0x599>
ret
mov    $0x0,%edx
test   %edx,%edx
je     80493a8 <calloc@plt+0x598>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804f140,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804f184
jne    80493ec <calloc@plt+0x5dc>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049360 <calloc@plt+0x550>
movb   $0x1,0x804f184
leave
repz ret
xchg   %ax,%ax
mov    0x804ef10,%eax
test   %eax,%eax
je     8049418 <calloc@plt+0x608>
mov    $0x0,%eax
test   %eax,%eax
je     8049418 <calloc@plt+0x608>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804ef10,(%esp)
call   *%eax
leave
jmp    8049390 <calloc@plt+0x580>
nop
jmp    8049390 <calloc@plt+0x580>
xchg   %ax,%ax
nop
lea    -0x41(%eax),%edx
cmp    $0x25,%dl
ja     8049468 <calloc@plt+0x658>
movzbl %dl,%edx
jmp    *0x804bf28(,%edx,4)
lea    0x0(%esi),%esi
mov    $0xb,%eax
ret
xchg   %ax,%ax
mov    $0xc,%eax
ret
xchg   %ax,%ax
mov    $0xd,%eax
ret
xchg   %ax,%ax
mov    $0xe,%eax
ret
xchg   %ax,%ax
mov    $0xf,%eax
ret
xchg   %ax,%ax
mov    $0xa,%eax
ret
xchg   %ax,%ax
sub    $0x30,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x804f190,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     80494c4 <calloc@plt+0x6b4>
movl   $0x804c0e4,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x804f144,%eax
mov    %eax,(%esp)
call   8048db0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8048ca0 <exit@plt>
movl   $0x804c10c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c14c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c1ac,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c230,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c260,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c298,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c2d8,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c3c0,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c430,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
movl   $0x804c5e1,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
mov    0x804f190,%eax
mov    %eax,(%esp)
call   80498d0 <calloc@plt+0xac0>
movl   $0x5,0x8(%esp)
movl   $0x804c5e6,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ba0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x804c5fd,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c613,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
movl   $0x804c4f0,0xc(%esp)
movl   $0x804c627,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
mov    0x804f180,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c518,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8048d70 <setlocale@plt>
test   %eax,%eax
je     804974b <calloc@plt+0x93b>
movl   $0x3,0x8(%esp)
movl   $0x804c635,0x4(%esp)
mov    %eax,(%esp)
call   8048dd0 <strncmp@plt>
test   %eax,%eax
jne    804978f <calloc@plt+0x97f>
mov    0x804f190,%eax
mov    %eax,(%esp)
call   80498d0 <calloc@plt+0xac0>
movl   $0x5,0x8(%esp)
movl   $0x804c5a0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ba0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
jmp    80494bc <calloc@plt+0x6ac>
mov    0x804f190,%eax
mov    %eax,(%esp)
call   80498d0 <calloc@plt+0xac0>
movl   $0x5,0x8(%esp)
movl   $0x804c558,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ba0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
jmp    804974b <calloc@plt+0x93b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x804f18c
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x804f188
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x804f180,%eax
mov    %eax,(%esp)
call   804b870 <calloc@plt+0x2a60>
test   %eax,%eax
je     8049829 <calloc@plt+0xa19>
cmpb   $0x0,0x804f188
je     8049840 <calloc@plt+0xa30>
call   8048d20 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    8049840 <calloc@plt+0xa30>
mov    0x804f144,%eax
mov    %eax,(%esp)
call   804b870 <calloc@plt+0x2a60>
test   %eax,%eax
jne    8049898 <calloc@plt+0xa88>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x804c686,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %eax,%ebx
mov    0x804f18c,%eax
test   %eax,%eax
je     80498a5 <calloc@plt+0xa95>
mov    %eax,(%esp)
call   804ac50 <calloc@plt+0x1e40>
mov    %eax,%esi
call   8048d20 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x804c692,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048c40 <error@plt>
mov    0x804f0ec,%eax
mov    %eax,(%esp)
call   8048b30 <_exit@plt>
call   8048d20 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x804c696,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048c40 <error@plt>
jmp    8049898 <calloc@plt+0xa88>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    80498eb <calloc@plt+0xadb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     80498e0 <calloc@plt+0xad0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     8049919 <calloc@plt+0xb09>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     8049919 <calloc@plt+0xb09>
cmp    $0x2f,%cl
je     8049920 <calloc@plt+0xb10>
test   %bl,%bl
je     80498f8 <calloc@plt+0xae8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    8049902 <calloc@plt+0xaf2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    80498f8 <calloc@plt+0xae8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048ce0 <strlen@plt>
cmp    $0x1,%eax
jbe    804994f <calloc@plt+0xb3f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     8049958 <calloc@plt+0xb48>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    8049945 <calloc@plt+0xb35>
nop
jmp    804994f <calloc@plt+0xb3f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     80499f3 <calloc@plt+0xbe3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8048d80 <strrchr@plt>
test   %eax,%eax
je     80499df <calloc@plt+0xbcf>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    80499df <calloc@plt+0xbcf>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x804c6d4,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80499df <calloc@plt+0xbcf>
mov    $0x3,%ecx
mov    $0x804c6dc,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    80499df <calloc@plt+0xbcf>
lea    0x4(%eax),%ebx
mov    %ebx,0x804f140
mov    %ebx,0x804f190
mov    %ebx,0x804f160
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x804f144,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804c69c,(%esp)
mov    %eax,0xc(%esp)
call   8048be0 <fwrite@plt>
call   8048de0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     8049a41 <calloc@plt+0xc31>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8048de0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     8049a80 <calloc@plt+0xc70>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804b8f0 <calloc@plt+0x2ae0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    8049ae8 <calloc@plt+0xcd8>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    8049ad0 <calloc@plt+0xcc0>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x2d,0x3(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x38,0x4(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x0,0x5(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x60,(%esi)
mov    $0x804c6ef,%eax
mov    $0x804c6e0,%edx
cmovne %edx,%eax
jmp    8049a78 <calloc@plt+0xc68>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x804c6e9,%eax
cmp    $0x7,%edi
mov    $0x804c6e7,%edx
cmovne %edx,%eax
jmp    8049a78 <calloc@plt+0xc68>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    8049ad0 <calloc@plt+0xcc0>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x31,0x2(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x38,0x3(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x30,0x4(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x33,0x5(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x30,0x6(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x0,0x7(%eax)
jne    8049ad0 <calloc@plt+0xcc0>
cmpb   $0x60,(%esi)
mov    $0x804c6eb,%eax
mov    $0x804c6e4,%edx
cmovne %edx,%eax
jmp    8049a78 <calloc@plt+0xc68>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048bf0 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804a418 <calloc@plt+0x1608>
mov    0x94(%esp),%eax
jmp    *0x804c740(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a220 <calloc@plt+0x1410>
test   %al,%al
je     804a233 <calloc@plt+0x1423>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804a208 <calloc@plt+0x13f8>
cmpb   $0x0,0x58(%esp)
je     804a208 <calloc@plt+0x13f8>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804a208 <calloc@plt+0x13f8>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048b90 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804a2a0 <calloc@plt+0x1490>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     8049fb8 <calloc@plt+0x11a8>
movzbl %bl,%eax
jmp    *0x804c764(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     8049df8 <calloc@plt+0xfe8>
cmpl   $0x3,0x94(%esp)
jne    8049d58 <calloc@plt+0xf48>
testb  $0x4,0x98(%esp)
je     8049d58 <calloc@plt+0xf48>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8049d58 <calloc@plt+0xf48>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8049d58 <calloc@plt+0xf48>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8049d58 <calloc@plt+0xf48>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8049d58 <calloc@plt+0xf48>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmp    %edi,%ebp
jae    8049d1e <calloc@plt+0xf0e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049d2e <calloc@plt+0xf1e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049d3e <calloc@plt+0xf2e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    8049d4e <calloc@plt+0xf3e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8049d66 <calloc@plt+0xf56>
cmpb   $0x0,0x5a(%esp)
jne    8049d8b <calloc@plt+0xf7b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8049d8b <calloc@plt+0xf7b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8049d92 <calloc@plt+0xf82>
cmpb   $0x0,0x24(%esp)
je     8049da8 <calloc@plt+0xf98>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmp    %edi,%ebp
jae    8049da5 <calloc@plt+0xf95>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    8049db6 <calloc@plt+0xfa6>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    8049bf8 <calloc@plt+0xde8>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a408 <calloc@plt+0x15f8>
test   %al,%al
jne    8049d58 <calloc@plt+0xf48>
test   %esi,%esi
jne    8049d58 <calloc@plt+0xf48>
cmpl   $0x2,0x94(%esp)
jne    8049d58 <calloc@plt+0xf48>
nop
cmpb   $0x0,0x2f(%esp)
je     8049d58 <calloc@plt+0xf48>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049b40 <calloc@plt+0xd30>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804a532 <calloc@plt+0x1722>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804a47b <calloc@plt+0x166b>
cmpb   $0x0,0x58(%esp)
je     8049d58 <calloc@plt+0xf48>
mov    %eax,%ebx
jmp    8049d92 <calloc@plt+0xf82>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8049e83 <calloc@plt+0x1073>
nop
mov    $0x66,%eax
jmp    8049e83 <calloc@plt+0x1073>
nop
mov    $0x76,%eax
jmp    8049e83 <calloc@plt+0x1073>
nop
mov    $0x6e,%eax
jmp    8049e75 <calloc@plt+0x1065>
nop
mov    $0x74,%eax
jmp    8049e75 <calloc@plt+0x1065>
nop
cmpb   $0x0,0x58(%esp)
je     804a3f0 <calloc@plt+0x15e0>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmp    %edi,%ebp
jae    8049ee2 <calloc@plt+0x10d2>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8049f28 <calloc@plt+0x1118>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8049f28 <calloc@plt+0x1118>
cmp    %eax,%edi
ja     804a490 <calloc@plt+0x1680>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049f1e <calloc@plt+0x110e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8049d66 <calloc@plt+0xf56>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8049e83 <calloc@plt+0x1073>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     8049f5e <calloc@plt+0x114e>
cmpb   $0x0,0x2f(%esp)
je     8049f5e <calloc@plt+0x114e>
test   %dl,%dl
jne    8049da8 <calloc@plt+0xf98>
mov    %ebx,%eax
jmp    8049e75 <calloc@plt+0x1065>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8049d58 <calloc@plt+0xf48>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmp    %edi,%ebp
jae    8049f8d <calloc@plt+0x117d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049f9d <calloc@plt+0x118d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049fad <calloc@plt+0x119d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8049d58 <calloc@plt+0xf48>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804a2b0 <calloc@plt+0x14a0>
call   8048e00 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8049d58 <calloc@plt+0xf48>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804a064 <calloc@plt+0x1254>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmp    %edi,%ebp
jae    804a013 <calloc@plt+0x1203>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804a026 <calloc@plt+0x1216>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804a03c <calloc@plt+0x122c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    8049dab <calloc@plt+0xf9b>
cmp    %edi,%ebp
jae    804a059 <calloc@plt+0x1249>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804a000 <calloc@plt+0x11f0>
cmpb   $0x0,0x24(%esp)
je     804a045 <calloc@plt+0x1235>
cmp    %edi,%ebp
jae    804a077 <calloc@plt+0x1267>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804a045 <calloc@plt+0x1235>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a537 <calloc@plt+0x1727>
test   %edi,%edi
je     804a43d <calloc@plt+0x162d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c6e9,0x3c(%esp)
movb   $0x22,(%eax)
jmp    8049bd8 <calloc@plt+0xdc8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c6e9,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    8049bd8 <calloc@plt+0xdc8>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
lea    0x0(%esi,%eiz,1),%esi
je     804a14c <calloc@plt+0x133c>
mov    0x94(%esp),%edx
mov    $0x804c6f3,%eax
call   8049a50 <calloc@plt+0xc40>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x804c6e7,%eax
call   8049a50 <calloc@plt+0xc40>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804a17a <calloc@plt+0x136a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804a17a <calloc@plt+0x136a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804a16f <calloc@plt+0x135f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804a168 <calloc@plt+0x1358>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8048ce0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c6e7,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    8049bd8 <calloc@plt+0xdc8>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a553 <calloc@plt+0x1743>
test   %edi,%edi
je     804a45c <calloc@plt+0x164c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c6e7,0x3c(%esp)
movb   $0x27,(%eax)
jmp    8049bd8 <calloc@plt+0xdc8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8049c90 <calloc@plt+0xe80>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8049c18 <calloc@plt+0xe08>
test   %ebp,%ebp
jne    804a24c <calloc@plt+0x143c>
cmpl   $0x2,0x94(%esp)
jne    804a24c <calloc@plt+0x143c>
cmpb   $0x0,0x2f(%esp)
jne    8049e08 <calloc@plt+0xff8>
cmpb   $0x0,0x2f(%esp)
jne    804a282 <calloc@plt+0x1472>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804a282 <calloc@plt+0x1472>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804a282 <calloc@plt+0x1472>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804a277 <calloc@plt+0x1467>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804a270 <calloc@plt+0x1460>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8049e52 <calloc@plt+0x1042>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8049e52 <calloc@plt+0x1042>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8049c90 <calloc@plt+0xe80>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804a41d <calloc@plt+0x160d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048c20 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804a49d <calloc@plt+0x168d>
cmp    $0xffffffff,%eax
je     804a4b8 <calloc@plt+0x16a8>
cmp    $0xfffffffe,%eax
je     804a4d3 <calloc@plt+0x16c3>
cmpb   $0x0,0x2f(%esp)
je     804a37f <calloc@plt+0x156f>
cmpl   $0x2,0x94(%esp)
jne    804a37f <calloc@plt+0x156f>
cmp    $0x1,%eax
je     804a37f <calloc@plt+0x156f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804a378 <calloc@plt+0x1568>
movzbl %al,%eax
jmp    *0x804c960(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804a360 <calloc@plt+0x1550>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048bd0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048b60 <mbsinit@plt>
test   %eax,%eax
je     804a2f1 <calloc@plt+0x14e1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    8049fe3 <calloc@plt+0x11d3>
and    0x58(%esp),%dl
jmp    8049fed <calloc@plt+0x11dd>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8049e08 <calloc@plt+0xff8>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8049d58 <calloc@plt+0xf48>
add    $0x1,%esi
jmp    8049bf8 <calloc@plt+0xde8>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    8049dd9 <calloc@plt+0xfc9>
call   8048de0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8048ce0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804a2ce <calloc@plt+0x14be>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c6e9,0x3c(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c6e7,0x3c(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
cmpb   $0x0,0x2f(%esp)
je     8049e83 <calloc@plt+0x1073>
jmp    8049e08 <calloc@plt+0xff8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    8049f0e <calloc@plt+0x10fe>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a3c5 <calloc@plt+0x15b5>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a3c5 <calloc@plt+0x15b5>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804a528 <calloc@plt+0x1718>
cmpb   $0x0,(%eax)
je     804a528 <calloc@plt+0x1718>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804a516 <calloc@plt+0x1706>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804a520 <calloc@plt+0x1710>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804a510 <calloc@plt+0x1700>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804a3c5 <calloc@plt+0x15b5>
call   8048bb0 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c6e9,0x3c(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c6e7,0x3c(%esp)
jmp    8049bd8 <calloc@plt+0xdc8>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8048d20 <__errno_location@plt>
test   %edi,%edi
mov    0x804f130,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804a6fc <calloc@plt+0x18ec>
cmp    0x804f13c,%edi
jb     804a608 <calloc@plt+0x17f8>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804a701 <calloc@plt+0x18f1>
cmp    $0x804f134,%esi
lea    0x0(,%ebp,8),%eax
je     804a6d0 <calloc@plt+0x18c0>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b620 <calloc@plt+0x2810>
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f13c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8048d00 <memset@plt>
mov    %ebp,0x804f13c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049b40 <calloc@plt+0xd30>
cmp    %eax,%ebp
ja     804a6b7 <calloc@plt+0x18a7>
lea    0x1(%eax),%ebp
cmp    $0x804f1a0,%esi
mov    %ebp,(%edi)
je     804a672 <calloc@plt+0x1862>
mov    %esi,(%esp)
call   8048b40 <free@plt>
mov    %ebp,(%esp)
call   804b5b0 <calloc@plt+0x27a0>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049b40 <calloc@plt+0xd30>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804b620 <calloc@plt+0x2810>
mov    0x804f138,%edx
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f134,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804a5df <calloc@plt+0x17cf>
call   8048de0 <abort@plt>
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8048d20 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x804f2a0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804b7c0 <calloc@plt+0x29b0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x804f2a0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804a770 <calloc@plt+0x1960>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x804f2a0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x804f2a0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x804f2a0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x804f2a0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804a823 <calloc@plt+0x1a13>
test   %ecx,%ecx
je     804a823 <calloc@plt+0x1a13>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8048de0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x804f2a0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048d20 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049b40 <calloc@plt+0xd30>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x804f2a0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048d20 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   8049b40 <calloc@plt+0xd30>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804b5b0 <calloc@plt+0x27a0>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   8049b40 <calloc@plt+0xd30>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804a958 <calloc@plt+0x1b48>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a890 <calloc@plt+0x1a80>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x804f13c,%edi
mov    0x804f130,%esi
cmp    $0x1,%edi
jbe    804a9d3 <calloc@plt+0x1bc3>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048b40 <free@plt>
cmp    %edi,%ebx
jne    804a9c0 <calloc@plt+0x1bb0>
mov    0x4(%esi),%eax
cmp    $0x804f1a0,%eax
je     804a9f9 <calloc@plt+0x1be9>
mov    %eax,(%esp)
call   8048b40 <free@plt>
movl   $0x100,0x804f134
00
movl   $0x804f1a0,0x804f138
08
cmp    $0x804f134,%esi
je     804aa13 <calloc@plt+0x1c03>
mov    %esi,(%esp)
call   8048b40 <free@plt>
movl   $0x804f134,0x804f130
08
movl   $0x1,0x804f13c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f2a0,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f2a0,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f2a0,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f2a0,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049a20 <calloc@plt+0xc10>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a570 <calloc@plt+0x1760>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049a20 <calloc@plt+0xc10>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a570 <calloc@plt+0x1760>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804aab0 <calloc@plt+0x1ca0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804aae0 <calloc@plt+0x1cd0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x804f2a0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x804f2a4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x804f2a8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2ac,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2b0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2b4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2b8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2bc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2c0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2c4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2c8,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804a570 <calloc@plt+0x1760>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804ab70 <calloc@plt+0x1d60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804ab70 <calloc@plt+0x1d60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804ab70 <calloc@plt+0x1d60>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x804f2a0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x804f2a4,%eax
mov    %eax,0x14(%esp)
mov    0x804f2a8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2ac,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2b0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2b4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2b8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2bc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2c0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2c4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2c8,%eax
mov    %eax,0x38(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804a7f0 <calloc@plt+0x19e0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a570 <calloc@plt+0x1760>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804acb0 <calloc@plt+0x1ea0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804acb0 <calloc@plt+0x1ea0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804acb0 <calloc@plt+0x1ea0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f100,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f100,0x4(%esp)
jmp    804a570 <calloc@plt+0x1760>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804b358 <calloc@plt+0x2548>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x804ca44,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804ca57,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x804cce0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048db0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804cab4,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804b380 <calloc@plt+0x2570>
jmp    *0x804ccb8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc18,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8048db0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc48,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8048db0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8048de0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ca5b,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048db0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ca6b,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048db0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ca82,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048db0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cb80,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
jmp    804afff <calloc@plt+0x21ef>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cba0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
jmp    804afff <calloc@plt+0x21ef>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cbc4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
jmp    804afff <calloc@plt+0x21ef>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cbec,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
jmp    804afff <calloc@plt+0x21ef>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x804ca50,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048db0 <__fprintf_chk@plt>
jmp    804aef1 <calloc@plt+0x20e1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc7c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804b08a <calloc@plt+0x227a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804b42a <calloc@plt+0x261a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804b420 <calloc@plt+0x2610>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804aea0 <calloc@plt+0x2090>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804b482 <calloc@plt+0x2672>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804b470 <calloc@plt+0x2660>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804aea0 <calloc@plt+0x2090>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804b460 <calloc@plt+0x2650>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x804ca9e,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
movl   $0x804c5fd,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c613,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
movl   $0x804c4f0,0xc(%esp)
movl   $0x804c627,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <__printf_chk@plt>
mov    0x804f180,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c518,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048c70 <malloc@plt>
test   %eax,%eax
je     804b5c9 <calloc@plt+0x27b9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804b5c4 <calloc@plt+0x27b4>
lea    0x0(%esi),%esi
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804b609 <calloc@plt+0x27f9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b5b0 <calloc@plt+0x27a0>
call   804b820 <calloc@plt+0x2a10>
xchg   %ax,%ax
jmp    804b5b0 <calloc@plt+0x27a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804b648 <calloc@plt+0x2838>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048c60 <realloc@plt>
test   %eax,%eax
je     804b65b <calloc@plt+0x284b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804b630 <calloc@plt+0x2820>
mov    %eax,(%esp)
call   8048b40 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804b640 <calloc@plt+0x2830>
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804b6a3 <calloc@plt+0x2893>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804b620 <calloc@plt+0x2810>
call   804b820 <calloc@plt+0x2a10>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804b6f0 <calloc@plt+0x28e0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804b708 <calloc@plt+0x28f8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804b620 <calloc@plt+0x2810>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804b6d9 <calloc@plt+0x28c9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804b6d9 <calloc@plt+0x28c9>
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804b748 <calloc@plt+0x2938>
cmp    $0xaaaaaaa9,%eax
ja     804b754 <calloc@plt+0x2944>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b620 <calloc@plt+0x2810>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804b730 <calloc@plt+0x2920>
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804b5b0 <calloc@plt+0x27a0>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048d00 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048e10 <calloc@plt>
test   %eax,%eax
je     804b7af <calloc@plt+0x299f>
add    $0x1c,%esp
ret
nop
call   804b820 <calloc@plt+0x2a10>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804b5b0 <calloc@plt+0x27a0>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048b50 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048ce0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804b7c0 <calloc@plt+0x29b0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x804cd0f,0x4(%esp)
movl   $0x0,(%esp)
call   8048ba0 <dcgettext@plt>
mov    0x804f0ec,%edx
movl   $0x804c696,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048c40 <error@plt>
call   8048de0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048c10 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   804bcb0 <calloc@plt+0x2ea0>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804b8b0 <calloc@plt+0x2aa0>
test   %dl,%dl
je     804b8a7 <calloc@plt+0x2a97>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804b8d0 <calloc@plt+0x2ac0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804b8a7 <calloc@plt+0x2a97>
call   8048d20 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8048d20 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8048d60 <nl_langinfo@plt>
mov    0x804f2d0,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x804ca9d,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804b9bc <calloc@plt+0x2bac>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804b987 <calloc@plt+0x2b77>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804b960 <calloc@plt+0x2b50>
nop
mov    %ebp,(%esp)
call   8048ce0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8048ce0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804b9b8 <calloc@plt+0x2ba8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048b00 <strcmp@plt>
test   %eax,%eax
je     804b97b <calloc@plt+0x2b6b>
cmp    $0x2a,%bl
jne    804b940 <calloc@plt+0x2b30>
cmpb   $0x0,0x1(%ebp)
jne    804b940 <calloc@plt+0x2b30>
mov    %ebp,(%esp)
call   8048ce0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x804cd29,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804bc7d <calloc@plt+0x2e6d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804b987 <calloc@plt+0x2b77>
movl   $0x804cd2f,(%esp)
call   8048c50 <getenv@plt>
test   %eax,%eax
je     804b9d5 <calloc@plt+0x2bc5>
cmpb   $0x0,(%eax)
jne    804bbe3 <calloc@plt+0x2dd3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x804cd20,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804bbd4 <calloc@plt+0x2dc4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8048c70 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804bc73 <calloc@plt+0x2e63>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048b50 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804ba3c <calloc@plt+0x2c2c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048b10 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804bbb8 <calloc@plt+0x2da8>
movl   $0x804c690,0x4(%esp)
mov    %eax,(%esp)
call   8048cb0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804bbb0 <calloc@plt+0x2da0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bb96 <calloc@plt+0x2d86>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804baa0 <calloc@plt+0x2c90>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804baa0 <calloc@plt+0x2c90>
cmp    $0x23,%eax
je     804bc0d <calloc@plt+0x2dfd>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d10 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804cd3f,0x4(%esp)
mov    %esi,(%esp)
call   8048cd0 <fscanf@plt>
cmp    $0x1,%eax
jle    804bc30 <calloc@plt+0x2e20>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8048ce0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8048ce0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804bc4e <calloc@plt+0x2e3e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8048c70 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804bc82 <calloc@plt+0x2e72>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048c00 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048c00 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804baac <calloc@plt+0x2c9c>
mov    %esi,(%esp)
call   8048d50 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804bc30 <calloc@plt+0x2e20>
jmp    804bab5 <calloc@plt+0x2ca5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048df0 <close@plt>
mov    $0x804ca9d,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048b40 <free@plt>
mov    %ebp,0x804f2d0
jmp    804b92f <calloc@plt+0x2b1f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804b9fb <calloc@plt+0x2beb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8048ce0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804bbd4 <calloc@plt+0x2dc4>
lea    -0x1(%eax),%eax
jmp    804b9e4 <calloc@plt+0x2bd4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804bc27 <calloc@plt+0x2e17>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bc9c <calloc@plt+0x2e8c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804bc08 <calloc@plt+0x2df8>
cmp    $0xffffffff,%eax
jne    804baa0 <calloc@plt+0x2c90>
mov    %esi,(%esp)
call   804bcb0 <calloc@plt+0x2ea0>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804bbb8 <calloc@plt+0x2da8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804bbbd <calloc@plt+0x2dad>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048c60 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804bb4c <calloc@plt+0x2d3c>
mov    $0x804ca9d,%ebp
jmp    804bbc9 <calloc@plt+0x2db9>
call   8048bb0 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x804ca9d,%ebp
call   8048b40 <free@plt>
mov    %esi,(%esp)
call   804bcb0 <calloc@plt+0x2ea0>
jmp    804bbbd <calloc@plt+0x2dad>
mov    %esi,(%esp)
call   8048d50 <__uflow@plt>
jmp    804bc22 <calloc@plt+0x2e12>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048d30 <fileno@plt>
test   %eax,%eax
js     804bd38 <calloc@plt+0x2f28>
mov    %ebx,(%esp)
call   8048c80 <__freading@plt>
test   %eax,%eax
jne    804bd08 <calloc@plt+0x2ef8>
mov    %ebx,(%esp)
call   804bd50 <calloc@plt+0x2f40>
test   %eax,%eax
je     804bd38 <calloc@plt+0x2f28>
call   8048d20 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048b70 <fclose@plt>
test   %edi,%edi
je     804bcfa <calloc@plt+0x2eea>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8048d30 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8048da0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    804bcd2 <calloc@plt+0x2ec2>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048b70 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804bd68 <calloc@plt+0x2f58>
mov    %ebx,(%esp)
call   8048c80 <__freading@plt>
test   %eax,%eax
jne    804bd78 <calloc@plt+0x2f68>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048b20 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804bd68 <calloc@plt+0x2f58>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804bdb0 <calloc@plt+0x2fa0>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048b20 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804bdf0 <calloc@plt+0x2fe0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048b80 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804bdcf <calloc@plt+0x2fbf>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804bdcf <calloc@plt+0x2fbf>
mov    %ebx,(%esp)
call   8048d30 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8048da0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804be37 <calloc@plt+0x3027>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804be2f <calloc@plt+0x301f>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049350 <calloc@plt+0x540>
add    $0x31b5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048ac4 <strcmp@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804be99 <calloc@plt+0x3089>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804be78 <calloc@plt+0x3068>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804beb0 <calloc@plt+0x30a0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049350 <calloc@plt+0x540>
add    $0x313a,%ebx
sub    $0x18,%esp
lea    0xe4(%ebx),%eax
test   %eax,%eax
je     804bef8 <calloc@plt+0x30e8>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048c30 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    804bedb <calloc@plt+0x30cb>
push   %ebx
sub    $0x8,%esp
call   8049350 <calloc@plt+0x540>
add    $0x30fb,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
pusha
xchg   %eax,%esp
add    $0x8,%al
cmp    %dl,0x4944008(%esp,%eax,1)
or     %cl,-0x6c(%eax)
add    $0x8,%al
push   %eax
xchg   %eax,%esp
add    $0x8,%al
pop    %eax
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
push   $0x68080494
xchg   %eax,%esp
add    $0x8,%al
pusha
xchg   %eax,%esp
add    $0x8,%al
cmp    %dl,0x4944008(%esp,%eax,1)
or     %cl,-0x6c(%eax)
add    $0x8,%al
push   %eax
xchg   %eax,%esp
add    $0x8,%al
pop    %eax
xchg   %eax,%esp
add    $0x8,%al
xchg   %eax,%esi
nop
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
test   $0x90,%al
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
and    $0x8080490,%eax
xchg   %eax,%ecx
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6f27f7fc(%ecx)
add    $0x8,%al
daa
xchg   %eax,%ecx
add    $0x8,%al
pop    %ss
popl   (%eax,%ecx,1)
or     %dl,-0x6ec4f7fc(%ecx)
add    $0x8,%al
xor    %edx,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
arpl   %dx,-0x6ef7f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ef7f7fc(%ecx)
add    $0x8,%al
pop    %ecx
xchg   %eax,%ecx
add    $0x8,%al
or     %dl,-0x6eb0f7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6ebaf7fc(%ecx)
add    $0x8,%al
or     %dl,-0x6f1df7fc(%ecx)
add    $0x8,%al
push   %esp
jb     804c160 <_IO_stdin_used+0x23c>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     804c118 <_IO_stdin_used+0x1f4>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804c161 <_IO_stdin_used+0x23d>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804c170 <_IO_stdin_used+0x24c>
popa
je     804c16f <_IO_stdin_used+0x24b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x535b2073,%eax
dec    %eax
dec    %edi
push   %edx
push   %esp
sub    $0x4954504f,%eax
dec    %edi
dec    %esi
pop    %ebp
cs cs and %bl,%cs:0x53(%ebx)
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
pop    %ebp
cs cs or %cs:(%eax),%ah
and    %ch,0x72(%edi)
cmp    (%eax),%ah
and    %ah,0x4f4c2073
dec    %esi
inc    %edi
sub    $0x4954504f,%eax
dec    %edi
dec    %esi
or     (%eax),%al
add    %al,0x63(%ebp)
push   $0x6874206f
and    %dl,%gs:0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
sub    %dh,0x29(%ebx)
and    %dh,0x20(%edi,%ebp,2)
jae    804c1d8 <_IO_stdin_used+0x2b4>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804c1ce <_IO_stdin_used+0x2aa>
and    %ch,0x75(%edi)
je     804c1df <_IO_stdin_used+0x2bb>
jne    804c1e5 <_IO_stdin_used+0x2c1>
or     %cs:(%edx),%cl
and    %ah,(%eax)
sub    $0x2020206e,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     804c1ac <_IO_stdin_used+0x288>
outsl  %ds:(%esi),(%dx)
jne    804c203 <_IO_stdin_used+0x2df>
jo     804c206 <_IO_stdin_used+0x2e2>
je     804c1b3 <_IO_stdin_used+0x28f>
je     804c1fd <_IO_stdin_used+0x2d9>
and    %dh,%gs:0x61(%edx,%esi,2)
imul   $0x656e2067,0x6e(%ecx,%ebp,2),%ebp
ja     804c210 <_IO_stdin_used+0x2ec>
imul   $0xa,0x65(%esi),%ebp
add    %ah,(%eax)
and    %ch,0x20202065
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %gs:(%esi),(%dx)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
imul   $0x72707265,0x74(%esi),%ebp
gs
je     804c22f <_IO_stdin_used+0x30b>
je     804c239 <_IO_stdin_used+0x315>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %ah,0x61(%edx)
arpl   %bp,0x73(%ebx)
insb   (%dx),%es:(%edi)
popa
jae    804c247 <_IO_stdin_used+0x323>
and    %ah,0x73(%ebp)
arpl   %sp,0x70(%ecx)
gs
jae    804c1f2 <_IO_stdin_used+0x2ce>
and    %ah,(%eax)
sub    $0x20202045,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x20656c62,%fs:0x61(%ebx),%esi
imul   $0x72707265,0x74(%esi),%ebp
gs
je     804c26c <_IO_stdin_used+0x348>
je     804c276 <_IO_stdin_used+0x352>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %ah,0x61(%edx)
arpl   %bp,0x73(%ebx)
insb   (%dx),%es:(%edi)
popa
jae    804c284 <_IO_stdin_used+0x360>
and    %ah,0x73(%ebp)
arpl   %sp,0x70(%ecx)
gs
jae    804c245 <_IO_stdin_used+0x321>
sub    %ah,0x66(%ebp,%eiz,2)
popa
jne    804c298 <_IO_stdin_used+0x374>
je     804c257 <_IO_stdin_used+0x333>
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     804c25d <_IO_stdin_used+0x339>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     804c2b3 <_IO_stdin_used+0x38f>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    804c2d6 <_IO_stdin_used+0x3b2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    804c2e8 <_IO_stdin_used+0x3c4>
jo     804c2eb <_IO_stdin_used+0x3c7>
je     804c298 <_IO_stdin_used+0x374>
jbe    804c2df <_IO_stdin_used+0x3bb>
jb     804c2ef <_IO_stdin_used+0x3cb>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c2f3 <_IO_stdin_used+0x3cf>
popa
je     804c2f2 <_IO_stdin_used+0x3ce>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x490a0000,0x0(%edx,%ecx,1),%esi
data16
and    %ch,0x73692065
and    %ch,0x6e(%ecx)
and    %ah,0x66(%ebp)
data16
arpl   %si,%gs:0x20(%esp,%ebp,1)
je     804c317 <_IO_stdin_used+0x3f3>
and    %ah,%gs:0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     804c321 <_IO_stdin_used+0x3fd>
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%bp,%di)
jno    804c334 <_IO_stdin_used+0x410>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
and    %ah,0x72(%ecx)
and    %dh,%gs:0x65(%edx)
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0xa0a3a64,0x65(%edx),%edi
add    %al,(%eax)
and    %ah,(%eax)
pop    %esp
pop    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
bound  %esp,0x63(%ecx)
imul   $0x61,0x6c(%ebx),%esi
jae    804c353 <_IO_stdin_used+0x42f>
or     (%eax),%ah
and    %bl,0x20(%ecx,%eiz,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6c(%ecx)
gs
jb     804c36f <_IO_stdin_used+0x44b>
and    %ch,(%eax)
inc    %edx
inc    %ebp
dec    %esp
sub    %ecx,(%edx)
and    %ah,(%eax)
pop    %esp
bound  %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x61(%edx)
arpl   %bp,0x73(%ebx)
jo     804c374 <_IO_stdin_used+0x450>
arpl   %sp,0xa(%ebp)
and    %ah,(%eax)
pop    %esp
arpl   %sp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
fs
jne    804c389 <_IO_stdin_used+0x465>
and    %ch,%gs:0x6f(%esi)
and    %ah,0x75(%esi)
jb     804c3a3 <_IO_stdin_used+0x47f>
push   $0x6f207265
jne    804c3aa <_IO_stdin_used+0x486>
jo     804c3ad <_IO_stdin_used+0x489>
je     804c344 <_IO_stdin_used+0x420>
and    %ah,(%eax)
pop    %esp
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
jae    804c3aa <_IO_stdin_used+0x486>
popa
jo     804c3af <_IO_stdin_used+0x48b>
or     (%eax),%ah
and    %bl,0x20(%esi,%eiz,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6f(%esi)
jb     804c3c6 <_IO_stdin_used+0x4a2>
and    %ah,0x65(%esi)
gs or  %fs:%gs:(%eax),%ah
and    %bl,0x20(%esi,%ebp,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x65(%esi)
ja     804c38d <_IO_stdin_used+0x469>
insb   (%dx),%es:(%edi)
imul   $0x5c20200a,0x65(%esi),%ebp
jb     804c397 <_IO_stdin_used+0x473>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x61(%ebx)
jb     804c3f2 <_IO_stdin_used+0x4ce>
imul   $0x65722065,0x67(%ecx),%esp
je     804c3fe <_IO_stdin_used+0x4da>
jb     804c3f9 <_IO_stdin_used+0x4d5>
or     (%eax),%ah
and    %bl,0x20(%esp,%esi,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6f(%eax)
jb     804c403 <_IO_stdin_used+0x4df>
jp     804c40b <_IO_stdin_used+0x4e7>
outsb  %ds:(%esi),(%dx)
je     804c400 <_IO_stdin_used+0x4dc>
insb   (%dx),%es:(%edi)
and    %dh,0x62(%ecx,%eiz,2)
or     (%eax),%ah
and    %bl,0x20(%esi,%esi,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%esi)
jb     804c427 <_IO_stdin_used+0x503>
imul   $0x6174206c,0x61(%ebx),%esp
bound  %ecx,(%edx)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
pop    %esp
xor    %cl,0x4e(%esi)
dec    %esi
and    %ah,(%eax)
and    %ah,0x79(%edx)
je     804c433 <_IO_stdin_used+0x50f>
and    %dh,0x69(%edi)
je     804c43b <_IO_stdin_used+0x517>
and    %ch,0x63(%edi)
je     804c439 <_IO_stdin_used+0x515>
insb   (%dx),%es:(%edi)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    804c444 <_IO_stdin_used+0x520>
and    %cl,0x4e(%esi)
dec    %esi
and    %ch,(%eax)
xor    %esp,(%eax)
je     804c458 <_IO_stdin_used+0x534>
and    %dh,(%ebx)
and    %ah,0x67(%ecx,%ebp,2)
imul   $0x5c20200a,0x29(%ebx,%esi,2),%esi
js     804c441 <_IO_stdin_used+0x51d>
dec    %eax
and    %ah,(%eax)
and    %ah,(%eax)
bound  %edi,0x74(%ecx)
and    %dh,%gs:0x69(%edi)
je     804c46f <_IO_stdin_used+0x54b>
and    %ch,0x65(%eax)
js     804c46d <_IO_stdin_used+0x549>
fs arpl %bp,%fs:%gs:0x6d(%ecx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    804c47e <_IO_stdin_used+0x55a>
and    %cl,0x48(%eax)
and    %ch,(%eax)
xor    %esp,(%eax)
je     804c491 <_IO_stdin_used+0x56d>
and    %dh,(%edx)
and    %ah,0x67(%ecx,%ebp,2)
imul   $0xa,0x29(%ebx,%esi,2),%esi
or     0x4f(%esi),%cl
push   %esp
inc    %ebp
cmp    (%eax),%ah
jns    804c4a8 <_IO_stdin_used+0x584>
jne    804c4ad <_IO_stdin_used+0x589>
and    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ch,0x61(%ebp)
jns    804c466 <_IO_stdin_used+0x542>
push   $0x20657661
imul   $0x206e776f,0x20(%ebx,%esi,2),%esi
jbe    804c4ba <_IO_stdin_used+0x596>
jb     804c4ca <_IO_stdin_used+0x5a6>
imul   $0x20666f20,0x6e(%edi),%ebp
and    $0x77202c73,%eax
push   $0x20686369
jne    804c4dd <_IO_stdin_used+0x5b9>
jne    804c4cd <_IO_stdin_used+0x5a9>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    804c490 <_IO_stdin_used+0x56c>
jae    804c4e7 <_IO_stdin_used+0x5c3>
jo     804c4d9 <_IO_stdin_used+0x5b5>
jb     804c4e9 <_IO_stdin_used+0x5c5>
gs
fs
gs
jae    804c485 <_IO_stdin_used+0x561>
je     804c4e5 <_IO_stdin_used+0x5c1>
and    %dh,%gs:0x65(%esi)
jb     804c4f6 <_IO_stdin_used+0x5d2>
imul   $0x73656420,0x6e(%edi),%ebp
arpl   %si,0x69(%edx)
bound  %esp,0x64(%ebp)
and    %ch,0x65(%eax)
jb     804c4fa <_IO_stdin_used+0x5d6>
and    %ah,%cs:(%eax)
push   %eax
insb   (%dx),%es:(%edi)
gs
popa
jae    804c503 <_IO_stdin_used+0x5df>
and    %dh,0x65(%edx)
data16
gs
jb     804c4c5 <_IO_stdin_used+0x5a1>
je     804c516 <_IO_stdin_used+0x5f2>
and    %bh,0x6f(%ecx)
jne    804c51e <_IO_stdin_used+0x5fa>
and    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
daa
jae    804c4d5 <_IO_stdin_used+0x5b1>
outsl  %fs:(%esi),(%dx)
arpl   %si,0x6d(%ebp)
outsb  %gs:(%esi),(%dx)
je     804c51f <_IO_stdin_used+0x5fb>
je     804c529 <_IO_stdin_used+0x605>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     0x6f(%esi),%ah
jb     804c4e7 <_IO_stdin_used+0x5c3>
fs
gs
je     804c52c <_IO_stdin_used+0x608>
imul   $0x756f6261,0x20(%ebx,%esi,2),%ebp
je     804c4f5 <_IO_stdin_used+0x5d1>
je     804c53f <_IO_stdin_used+0x61b>
and    %ch,%gs:0x70(%edi)
je     804c546 <_IO_stdin_used+0x622>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804c501 <_IO_stdin_used+0x5dd>
imul   $0x6f707075,0x73(%eax,%eiz,1),%esi
jb     804c55f <_IO_stdin_used+0x63b>
jae    804c51b <_IO_stdin_used+0x5f7>
or     (%eax),%al
add    %ch,0x74(%eax)
je     804c564 <_IO_stdin_used+0x640>
cmp    (%edi),%ch
das
ja     804c570 <_IO_stdin_used+0x64c>
ja     804c529 <_IO_stdin_used+0x605>
outsb  %ds:(%si),(%dx)
jne    804c52d <_IO_stdin_used+0x609>
outsl  %ds:(%esi),(%dx)
jb     804c569 <_IO_stdin_used+0x645>
das
jae    804c574 <_IO_stdin_used+0x650>
data16
je     804c57f <_IO_stdin_used+0x65b>
popa
jb     804c570 <_IO_stdin_used+0x64c>
das
arpl   %bp,0x72(%edi)
gs
jne    804c586 <_IO_stdin_used+0x662>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     804c57f <_IO_stdin_used+0x65b>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804c545 <_IO_stdin_used+0x621>
jne    804c59a <_IO_stdin_used+0x676>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     804c5ab <_IO_stdin_used+0x687>
popa
jb     804c59c <_IO_stdin_used+0x678>
cmp    (%eax),%ah
cmp    $0x68,%al
je     804c5b1 <_IO_stdin_used+0x68d>
jo     804c579 <_IO_stdin_used+0x655>
das
das
ja     804c5ba <_IO_stdin_used+0x696>
ja     804c573 <_IO_stdin_used+0x64f>
outsb  %ds:(%si),(%dx)
jne    804c577 <_IO_stdin_used+0x653>
outsl  %ds:(%esi),(%dx)
jb     804c5b3 <_IO_stdin_used+0x68f>
das
addr16
gs
je     804c5b9 <_IO_stdin_used+0x695>
gs
insb   (%dx),%es:(%edi)
jo     804c584 <_IO_stdin_used+0x660>
or     %ds:(%eax),%al
push   %edx
gs
jo     804c5cb <_IO_stdin_used+0x6a7>
jb     804c5d2 <_IO_stdin_used+0x6ae>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    804c5d4 <_IO_stdin_used+0x6b0>
popa
je     804c5d4 <_IO_stdin_used+0x6b0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 804c593 <_IO_stdin_used+0x66f>
je     804c5e4 <_IO_stdin_used+0x6c0>
and    %bh,(%eax,%ebp,2)
je     804c5ee <_IO_stdin_used+0x6ca>
jo     804c5b6 <_IO_stdin_used+0x692>
das
das
je     804c5f2 <_IO_stdin_used+0x6ce>
popa
outsb  %ds:(%esi),(%dx)
jae    804c5f0 <_IO_stdin_used+0x6cc>
popa
je     804c5f0 <_IO_stdin_used+0x6cc>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     804c5fd <_IO_stdin_used+0x6d9>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     804c5fb <_IO_stdin_used+0x6d7>
das
je     804c5fc <_IO_stdin_used+0x6d8>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     804c5c4 <_IO_stdin_used+0x6a0>
arpl   %bp,0x6d(%edi)
jo     804c615 <_IO_stdin_used+0x6f1>
gs
je     804c611 <_IO_stdin_used+0x6ed>
and    %ah,0x63(%edi,%ebp,2)
jne    804c61f <_IO_stdin_used+0x6fb>
outsb  %gs:(%esi),(%dx)
je     804c617 <_IO_stdin_used+0x6f3>
je     804c621 <_IO_stdin_used+0x6fd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     804c633 <_IO_stdin_used+0x70f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     804c62f <_IO_stdin_used+0x70b>
jne    804c640 <_IO_stdin_used+0x71c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x65000a27,0x6e(%edi),%ebp
arpl   %bp,0x6f(%eax)
add    %cl,(%edx)
push   %edx
gs
jo     804c65a <_IO_stdin_used+0x736>
jb     804c661 <_IO_stdin_used+0x73d>
and    %ah,0x75622073
addr16 jae 804c616 <_IO_stdin_used+0x6f2>
je     804c667 <_IO_stdin_used+0x743>
and    %ah,0x62000a73
jne    804c667 <_IO_stdin_used+0x743>
sub    $0x65726f63,%eax
jne    804c67b <_IO_stdin_used+0x757>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c679 <_IO_stdin_used+0x755>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    804c663 <_IO_stdin_used+0x73f>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     804c694 <_IO_stdin_used+0x770>
jne    804c6a5 <_IO_stdin_used+0x781>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
push   %eax
dec    %edi
push   %ebx
dec    %ecx
pop    %eax
dec    %esp
pop    %ecx
pop    %edi
inc    %ebx
dec    %edi
push   %edx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
add    %ch,(%edi)
jne    804c6bf <_IO_stdin_used+0x79b>
jb     804c67d <_IO_stdin_used+0x759>
jae    804c6b8 <_IO_stdin_used+0x794>
popa
jb     804c6b8 <_IO_stdin_used+0x794>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x6c65682d
jo     804c662 <_IO_stdin_used+0x73e>
sub    $0x7265762d,%eax
jae    804c6d2 <_IO_stdin_used+0x7ae>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,0x68(%ebx)
gs
je     804c691 <_IO_stdin_used+0x76d>
push   %edx
popa
insl   (%dx),%es:(%edi)
gs
jns    804c677 <_IO_stdin_used+0x753>
inc    %edx
jb     804c6e3 <_IO_stdin_used+0x7bf>
popa
outsb  %ds:(%esi),(%dx)
and    %al,0x6f(%esi)
js     804c681 <_IO_stdin_used+0x75d>
cmp    %ch,(%esi)
xor    (%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     804c692 <_IO_stdin_used+0x76e>
and    $0x25203a73,%eax
jae    804c699 <_IO_stdin_used+0x775>
add    %al,(%eax)
add    %al,0x20(%ecx)
dec    %esi
push   %ebp
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 804c703 <_IO_stdin_used+0x7df>
xor    %bl,0x20(%ebp)
ja     804c70e <_IO_stdin_used+0x7ea>
jae    804c6cf <_IO_stdin_used+0x7ab>
jo     804c712 <_IO_stdin_used+0x7ee>
jae    804c726 <_IO_stdin_used+0x802>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    804c723 <_IO_stdin_used+0x7ff>
push   $0x206e6120
gs
js     804c729 <_IO_stdin_used+0x805>
arpl   %sp,(%eax)
jae    804c741 <_IO_stdin_used+0x81d>
jae    804c73e <_IO_stdin_used+0x81a>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     804c75e <_IO_stdin_used+0x83a>
jb     804c75c <_IO_stdin_used+0x838>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    804c782 <_IO_stdin_used+0x85e>
add    %ah,0x0(%ebx)
arpl   %bp,0x6279616d
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
mov    $0x9808049b,%eax
mov    0xa1c80804,%eax
add    $0x8,%al
mov    %ah,-0x5f37f7fc(%eax)
add    $0x8,%al
clc
mov    0xa1200804,%al
add    $0x8,%al
and    %ah,-0x5edff7fc(%ecx)
add    $0x8,%al
rcrb   $0x4,-0x6047f7fc(%esi)
or     %bh,-0x47f7fb61(%eax)
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0x3808049f,%eax
lahf
add    $0x8,%al
cwtl
sahf
add    $0x8,%al
mov    $0xb008049e,%eax
sahf
add    $0x8,%al
test   $0x9e,%al
add    $0x8,%al
mov    0x7008049e,%al
sahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
mov    $0xb808049f,%eax
lahf
add    $0x8,%al
jmp    f10ccc86 <stdout+0xe907db06>
popf
add    $0x8,%al
jmp    e90ccc8e <stdout+0xe107db0e>
popf
add    $0x8,%al
jmp    600ccc96 <stdout+0x5807db16>
popf
add    $0x8,%al
jmp    700ccc9e <stdout+0x6807db1e>
lahf
add    $0x8,%al
jmp    f10ccca6 <stdout+0xe907db26>
popf
add    $0x8,%al
jmp    600cccae <stdout+0x5807db2e>
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
jmp    f10cccf2 <stdout+0xe907db72>
popf
add    $0x8,%al
jmp    f10cccfa <stdout+0xe907db7a>
popf
add    $0x8,%al
test   $0x9c,%al
add    $0x8,%al
mov    $0x5808049f,%eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
jmp    500ccd72 <stdout+0x4807dbf2>
lahf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
jmp    600ccd7e <stdout+0x5807dbfe>
popf
add    $0x8,%al
jmp    600ccd86 <stdout+0x5807dc06>
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
pop    %eax
popf
add    $0x8,%al
rcrb   $0x4,-0x6216f7fc(%ebp)
or     %al,%al
popf
add    $0x8,%al
loope  804c8fb <_IO_stdin_used+0x9d7>
add    $0x8,%al
loopne 804c905 <_IO_stdin_used+0x9e1>
add    $0x8,%al
loopne 804c909 <_IO_stdin_used+0x9e5>
add    $0x8,%al
js     804c90d <_IO_stdin_used+0x9e9>
add    $0x8,%al
loopne 804c911 <_IO_stdin_used+0x9ed>
add    $0x8,%al
js     804c915 <_IO_stdin_used+0x9f1>
add    $0x8,%al
loopne 804c919 <_IO_stdin_used+0x9f5>
add    $0x8,%al
js     804c91d <_IO_stdin_used+0x9f9>
add    $0x8,%al
js     804c921 <_IO_stdin_used+0x9fd>
add    $0x8,%al
js     804c925 <_IO_stdin_used+0xa01>
add    $0x8,%al
js     804c929 <_IO_stdin_used+0xa05>
add    $0x8,%al
js     804c92d <_IO_stdin_used+0xa09>
add    $0x8,%al
js     804c931 <_IO_stdin_used+0xa0d>
add    $0x8,%al
js     804c935 <_IO_stdin_used+0xa11>
add    $0x8,%al
js     804c939 <_IO_stdin_used+0xa15>
add    $0x8,%al
js     804c93d <_IO_stdin_used+0xa19>
add    $0x8,%al
js     804c941 <_IO_stdin_used+0xa1d>
add    $0x8,%al
js     804c945 <_IO_stdin_used+0xa21>
add    $0x8,%al
js     804c949 <_IO_stdin_used+0xa25>
add    $0x8,%al
js     804c94d <_IO_stdin_used+0xa29>
add    $0x8,%al
js     804c951 <_IO_stdin_used+0xa2d>
add    $0x8,%al
js     804c955 <_IO_stdin_used+0xa31>
add    $0x8,%al
js     804c959 <_IO_stdin_used+0xa35>
add    $0x8,%al
js     804c95d <_IO_stdin_used+0xa39>
add    $0x8,%al
js     804c961 <_IO_stdin_used+0xa3d>
add    $0x8,%al
js     804c965 <_IO_stdin_used+0xa41>
add    $0x8,%al
js     804c969 <_IO_stdin_used+0xa45>
add    $0x8,%al
js     804c96d <_IO_stdin_used+0xa49>
add    $0x8,%al
js     804c971 <_IO_stdin_used+0xa4d>
add    $0x8,%al
js     804c975 <_IO_stdin_used+0xa51>
add    $0x8,%al
js     804c979 <_IO_stdin_used+0xa55>
add    $0x8,%al
js     804c97d <_IO_stdin_used+0xa59>
add    $0x8,%al
js     804c981 <_IO_stdin_used+0xa5d>
add    $0x8,%al
js     804c985 <_IO_stdin_used+0xa61>
add    $0x8,%al
loopne 804c989 <_IO_stdin_used+0xa65>
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dh,%ch
movb   $0xfd,(%eax,%ecx,1)
movb   $0x3,(%eax,%ecx,1)
movl   $0x804c710,(%eax,%ecx,1)
adc    %bh,%al
add    $0x8,%al
sbb    %bh,%al
add    $0x8,%al
push   %esp
movb   $0x21,(%eax,%ecx,1)
movl   $0x0,(%eax,%ecx,1)
and    $0x25282073,%eax
jae    804ca74 <_IO_stdin_used+0xb50>
and    %ah,0x25000a73
jae    804ca73 <_IO_stdin_used+0xb4f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     804cac7 <_IO_stdin_used+0xba3>
je     804cad4 <_IO_stdin_used+0xbb0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     804cad7 <_IO_stdin_used+0xbb3>
je     804cae4 <_IO_stdin_used+0xbc0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     804caee <_IO_stdin_used+0xbca>
je     804cafb <_IO_stdin_used+0xbd7>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cac0 <_IO_stdin_used+0xb9c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     804cb12 <_IO_stdin_used+0xbee>
jb     804cb19 <_IO_stdin_used+0xbf5>
and    %ah,0x75(%edx)
addr16 jae 804cacb <_IO_stdin_used+0xba7>
je     804cb1c <_IO_stdin_used+0xbf8>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    804cb21 <_IO_stdin_used+0xbfd>
and    %al,0x50(%edi)
dec    %esp
jbe    804caf5 <_IO_stdin_used+0xbd1>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     804cb44 <_IO_stdin_used+0xc20>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     804cafa <_IO_stdin_used+0xbd6>
insb   (%dx),%es:(%edi)
popa
je     804cb43 <_IO_stdin_used+0xc1f>
jb     804cb00 <_IO_stdin_used+0xbdc>
cmp    $0x68,%al
je     804cb58 <_IO_stdin_used+0xc34>
jo     804cb20 <_IO_stdin_used+0xbfc>
das
das
outsb  %ds:(%si),(%dx)
jne    804cb1a <_IO_stdin_used+0xbf6>
outsl  %ds:(%esi),(%dx)
jb     804cb56 <_IO_stdin_used+0xc32>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 804cb68 <_IO_stdin_used+0xc44>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    804cb29 <_IO_stdin_used+0xc05>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     804cb8d <_IO_stdin_used+0xc69>
popa
jb     804cb7e <_IO_stdin_used+0xc5a>
cmp    (%eax),%ah
jns    804cb8c <_IO_stdin_used+0xc68>
jne    804cb3f <_IO_stdin_used+0xc1b>
popa
jb     804cb87 <_IO_stdin_used+0xc63>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     804cba7 <_IO_stdin_used+0xc83>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     804cbb1 <_IO_stdin_used+0xc8d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     804cbce <_IO_stdin_used+0xcaa>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     804cbcd <_IO_stdin_used+0xca9>
outsb  %ds:(%esi),(%dx)
je     804cb8b <_IO_stdin_used+0xc67>
jo     804cbd2 <_IO_stdin_used+0xcae>
jb     804cbdc <_IO_stdin_used+0xcb8>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     804cbec <_IO_stdin_used+0xcc8>
je     804cbf9 <_IO_stdin_used+0xcd5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cbbe <_IO_stdin_used+0xc9a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc0c <_IO_stdin_used+0xce8>
je     804cc19 <_IO_stdin_used+0xcf5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cbde <_IO_stdin_used+0xcba>
and    %ah,0x250a2c73
jae    804cbe6 <_IO_stdin_used+0xcc2>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc30 <_IO_stdin_used+0xd0c>
je     804cc3d <_IO_stdin_used+0xd19>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc02 <_IO_stdin_used+0xcde>
and    %ah,0x250a2c73
jae    804cc0a <_IO_stdin_used+0xce6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc58 <_IO_stdin_used+0xd34>
je     804cc65 <_IO_stdin_used+0xd41>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc2a <_IO_stdin_used+0xd06>
and    %ah,0x250a2c73
jae    804cc32 <_IO_stdin_used+0xd0e>
and    %ah,0x25202c73
jae    804cc3a <_IO_stdin_used+0xd16>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc84 <_IO_stdin_used+0xd60>
je     804cc91 <_IO_stdin_used+0xd6d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc56 <_IO_stdin_used+0xd32>
and    %ah,0x250a2c73
jae    804cc5e <_IO_stdin_used+0xd3a>
and    %ah,0x25202c73
jae    804cc66 <_IO_stdin_used+0xd42>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804ccb4 <_IO_stdin_used+0xd90>
je     804ccc1 <_IO_stdin_used+0xd9d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc86 <_IO_stdin_used+0xd62>
and    %ah,0x250a2c73
jae    804cc8e <_IO_stdin_used+0xd6a>
and    %ah,0x25202c73
jae    804cc96 <_IO_stdin_used+0xd72>
and    %ah,0x250a2c73
jae    804cc9e <_IO_stdin_used+0xd7a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cce8 <_IO_stdin_used+0xdc4>
je     804ccf5 <_IO_stdin_used+0xdd1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804ccba <_IO_stdin_used+0xd96>
and    %ah,0x250a2c73
jae    804ccc2 <_IO_stdin_used+0xd9e>
and    %ah,0x25202c73
jae    804ccca <_IO_stdin_used+0xda6>
and    %ah,0x250a2c73
jae    804ccd2 <_IO_stdin_used+0xdae>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
mov    $0xb0,%al
add    $0x8,%al
mov    $0xf80804b0,%eax
mov    $0x4,%al
or     %al,-0x4f(%eax)
add    $0x8,%al
cwtl
mov    $0x4,%cl
or     %dh,%al
mov    $0x4,%cl
or     %bl,-0x4e(%eax)
add    $0x8,%al
(bad)
mov    $0x4,%dl
or     %dh,-0x51(%eax)
add    $0x8,%al
or     %dh,0x6f430804(%eax)
jo     804cd5d <_IO_stdin_used+0xe39>
jb     804cd4f <_IO_stdin_used+0xe2b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     804cd71 <_IO_stdin_used+0xe4d>
popa
jb     804cd62 <_IO_stdin_used+0xe3e>
and    %al,0x6f(%esi)
jne    804cd70 <_IO_stdin_used+0xe4c>
fs
popa
je     804cd6f <_IO_stdin_used+0xe4b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804cd8e <_IO_stdin_used+0xe6a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    804cd96 <_IO_stdin_used+0xe72>
jb     804cd54 <_IO_stdin_used+0xe30>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
xor    %al,(%edx)
add    %al,(%eax)
inc    %ebp
add    %al,(%eax)
add    %ah,0x24cffff(%ebp,%edi,4)
add    %al,(%eax)
aam    $0xc0
(bad)
jmp    *-0x392c0000(%edx,%eax,1)
(bad)
pushl  0x2(%eax)
add    %al,(%eax)
and    $0xc7,%al
(bad)
incl   -0x356c0000(%edx,%eax,1)
(bad)
inc    %esp
add    (%eax),%al
add    %ah,0x2d8ffff(%edx,%ecx,8)
add    %al,(%eax)
mov    $0xca,%ah
(bad)
(bad)
in     (%dx),%al
add    (%eax),%al
add    %al,0x318ffff(%ebx,%ecx,8)
add    %al,(%eax)
in     $0xcb,%al
(bad)
(bad)
cmp    %al,(%ebx)
add    %al,(%eax)
and    $0xcc,%al
(bad)
lcall  *0x0(%ebx,%eax,1)
add    %dl,%ah
int3
(bad)
lcall  *-0x32fc0000(%ebx,%eax,1)
(bad)
dec    %eax
add    (%eax),%eax
add    %dh,%ah
int    $0xff
incl   (%eax)
add    $0x0,%al
add    %ah,(%eax,%ebx,8)
(bad)
incl   0x0(%esp,%eax,1)
add    %al,%ah
fcos
incl   -0x25fc0000(%esp,%eax,1)
(bad)
(bad)
mov    $0x24000004,%eax
(bad)
dec    %esp
add    $0x0,%al
add    %al,-0x1(%edx,%ebx,8)
jmp    *%eax
add    $0x0,%al
add    %al,0x504ffff(%edx,%ebx,8)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
lcall  *(%eax)
add    $0xdae40000,%eax
(bad)
(bad)
cmp    $0x5,%al
add    %al,(%eax)
inc    %esp
(bad)
pushl  0x5(%eax)
add    %al,(%eax)
and    $0xdc,%al
(bad)
ljmp   *-0x23ac0000(%ebp,%eax,1)
(bad)
inc    %esp
add    $0xdce40000,%eax
(bad)
(bad)
clc
add    $0xdd040000,%eax
(bad)
decl   (%esi,%eax,1)
add    %al,(%eax)
and    $0xdd,%al
(bad)
jmp    *(%eax)
push   %es
add    %al,(%eax)
inc    %esp
(bad)
pushl  (%esi,%eax,1)
add    %al,(%eax)
fs
(bad)
decl   0x6(%eax)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
ljmp   *0x6(%eax)
add    %al,(%eax)
(bad)
(bad)
decl   -0xbfffffa(%eax)
(bad)
jmp    *0x24000006(%eax)
fdivrp %st,%st(7)
(bad)
mov    $0xd4000006,%eax
fdivrp %st,%st(7)
(bad)
faddl  (%esi)
add    %al,(%eax)
add    $0xdf,%al
(bad)
push   %esp
push   %es
add    %al,(%eax)
xor    $0xdf,%al
(bad)
decl   (%edi,%eax,1)
add    %al,(%eax)
fs
(bad)
jmp    *(%edi,%eax,1)
add    %al,(%eax)
adc    $0xe0,%al
(bad)
decl   0x7(%eax)
add    %al,(%eax)
push   %esp
loopne 804ce8a <_IO_stdin_used+0xf66>
jmp    *0x7(%eax)
add    %al,(%eax)
xchg   %eax,%esp
loopne 804ce92 <_IO_stdin_used+0xf6e>
(bad)
js     804ce9d <_IO_stdin_used+0xf79>
add    %al,(%eax)
aam    $0xe0
(bad)
call   *-0xbfffff9(%eax)
loopne 804cea2 <_IO_stdin_used+0xf7e>
jmp    *-0x1eec0000(%edi,%eax,1)
(bad)
(bad)
mov    $0x34000007,%eax
loope  804ceb2 <_IO_stdin_used+0xf8e>
dec    %esp
pop    %es
add    %al,(%eax)
push   %esp
loope  804ceba <_IO_stdin_used+0xf96>
jmp    *%eax
pop    %es
add    %al,(%eax)
(bad)
out    %al,$0xff
(bad)
jl     804cece <_IO_stdin_used+0xfaa>
add    %al,(%eax)
adc    $0xe7,%al
(bad)
call   *-0x188c0000(%eax,%ecx,1)
(bad)
(bad)
mov    $0xb4000008,%eax
out    %eax,$0xff
call   *%eax
or     %al,(%eax)
add    %ah,-0x1(%eax,%ebp,8)
push   %esp
or     %al,(%eax)
add    %dl,0x918ffff(%eax,%ebp,8)
add    %al,(%eax)
(bad)
call   1141cef5 <stdout+0x93cdd75>
add    %al,(%eax)
aam    $0xe8
(bad)
call   *0x9(%eax)
add    %al,(%eax)
and    $0xe9,%al
(bad)
incl   0x64000009(%eax)
jmp    11b1cf0d <stdout+0x9acdd8d>
add    %al,(%eax)
(bad)
jmp    11e1cf15 <stdout+0x9dcdd95>
add    %al,(%eax)
adc    $0xea,%al
(bad)
incl   (%eax)
or     (%eax),%al
add    %al,-0x1(%edx,%ebp,8)
jmp    *(%eax)
or     (%eax),%al
add    %dh,-0x1(%edx,%ebp,8)
(bad)
cmp    $0xa,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
ljmp   $0x0,$0xa5cffff
aam    $0xea
(bad)
(bad)
jl     804cf48 <_IO_stdin_used+0x1024>
add    %al,(%eax)
and    $0xeb,%al
(bad)
call   *-0x5bfffff6(%eax)
jmp    804cf4a <_IO_stdin_used+0x1026>
(bad)
call   6c04cf5b <stdout+0x63ffdddb>
out    %eax,(%dx)
(bad)
ljmp   *(%eax)
or     (%eax),%eax
add    %al,(%eax,%esi,8)
(bad)
pushl  0xb(%eax)
add    %al,(%eax)
fs
lock (bad)
lcall  *-0xf0c0000(%ebx,%ecx,1)
(bad)
push   %esp
or     (%eax),%eax
add    %ah,-0x1(%ecx,%esi,8)
pushl  (%eax)
or     $0x0,%al
add    %dh,-0x1(%ecx,%esi,8)
incl   0x0(%esp,%ecx,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804cf97 <_IO_stdin_used+0x1073>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
push   %eax
mov    $0x330ffff,%ebx
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804cfb7 <_IO_stdin_used+0x1093>
js     804cfb5 <_IO_stdin_used+0x1091>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,-0x1(%esp,%eax,8)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,0x63ffffc4(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
je     804cff6 <_IO_stdin_used+0x10d2>
add    %al,(%eax)
sub    %bh,0x50bffff(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x10,%eax
xchg   %eax,%esp
add    %al,(%eax)
add    %cl,%al
(bad)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x3c000000(%eax)
(bad)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,-0x38400000(%eax,%eax,1)
(bad)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
call   6c04d06d <stdout+0x63ffdeed>
enter  $0xffff,$0x57
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %eax,(%eax)
add    %ah,0x32ffff(%eax,%ecx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
sub    $0x1,%al
add    %al,(%eax)
ror    $0xff,%al
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %dh,(%eax)
leave
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
cwtl
add    %eax,(%eax)
add    %dh,(%ecx,%ecx,8)
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,%al
add    %eax,(%eax)
add    %ch,%ah
leave
(bad)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
adc    $0x2,%al
add    %al,(%eax)
fcom   %st(3)
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %dl,0x0(%edx,%eax,1)
add    %bh,(%eax)
aad    $0xff
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x44000002(%eax)
aad    $0xff
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x2ab00000(%edx,%eax,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,0x5c000002(%eax)
aad    $0xff
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
aam    $0x2
add    %al,(%eax)
js     804d22f <_IO_stdin_used+0x130b>
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,%al
add    (%eax),%al
add    %al,0x38ffff(%ebp,%edx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
or     $0x3,%al
add    %al,(%eax)
mov    0x60ffffd5,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    (%eax),%eax
add    %cl,%ah
aad    $0xff
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bh,0x0(%ebx,%eax,1)
add    %dh,-0x2a(%eax)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
add    (%eax),%eax
add    %cl,-0x7b00002a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
enter  $0x3,$0x0
in     $0xd6,%al
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    (%eax),%eax
add    %dh,%al
(bad)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,%al
add    (%eax),%eax
add    %bh,%ah
(bad)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%esp,%eax,1)
add    %al,(%eax)
or     %dl,%bh
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    %al,(%eax,%eax,1)
add    %dl,(%edi,%edx,8)
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,(%eax)
add    $0x0,%al
add    %ah,(%edi,%edx,8)
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %bl,0x4(%eax)
add    %al,(%eax)
xor    $0xd7,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
jo     804d3f6 <_IO_stdin_used+0x14d2>
add    %al,(%eax)
dec    %esp
xlat   %ds:(%ebx)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    %al,(%eax,%eax,1)
add    %ah,-0x1(%edi,%edx,8)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
add    $0x0,%al
add    %dh,%al
xlat   %ds:(%ebx)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
les    (%eax,%eax,1),%eax
add    %cl,(%eax)
fdivr  %st(7),%st
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
faddl  (%eax,%eax,1)
add    %ah,(%eax)
fdivr  %st(7),%st
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
hlt
add    $0x0,%al
add    %bh,(%eax)
fdivr  %st(7),%st
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sbb    %al,0xd8c40000
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
xor    %al,0xd8ec0000
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
dec    %eax
add    $0xd9140000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
pusha
add    $0xd93c0000,%eax
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebp,%eax,1)
add    %cl,-0x27(%eax)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x54000005(%eax)
fcos
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x26a00000(%ebp,%eax,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x50000000(%eax)
add    $0xd96c0000,%eax
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
dec    %esp
push   %es
add    %al,(%eax)
inc    %eax
fdivrp %st,%st(7)
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ah,0x0(%esi,%eax,1)
add    %bh,-0x22(%eax)
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    %al,(%esi)
add    %al,(%eax)
mov    $0xde,%ah
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    0xdc000006,%al
fdivrp %st,%st(7)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
les    (%esi),%eax
add    %al,(%eax)
push   $0x25ffffdf
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
call   7c04d673 <stdout+0x73ffe4f3>
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
or     $0x7,%al
add    %al,(%eax)
sbb    $0xff,%bh
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
and    %al,(%edi)
add    %al,(%eax)
jl     804d685 <_IO_stdin_used+0x1761>
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
push   %eax
pop    %es
add    %al,(%eax)
pushf
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
jl     804d705 <_IO_stdin_used+0x17e1>
add    %al,(%eax)
mov    $0xdf,%al
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
pop    %es
add    %al,(%eax)
loopne 804d711 <_IO_stdin_used+0x17ed>
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
rolb   (%edi)
add    %al,(%eax)
or     $0xe0,%al
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %dh,%al
pop    %es
add    %al,(%eax)
sbb    $0xe0,%al
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
or     $0x8,%al
add    %al,(%eax)
xor    %ah,%al
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %ch,(%eax,%ecx,1)
add    %al,(%eax)
inc    %eax
loopne 804d7b2 <_IO_stdin_used+0x188e>
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %cl,0x0(%eax,%ecx,1)
add    %dl,-0x20(%eax)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0x0(%eax,%eax,1)
add    %ah,0x8(%eax)
add    %al,(%eax)
mov    %fs,%eax
(bad)
(bad)
js     804d7ea <_IO_stdin_used+0x18c6>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     804d80b <_IO_stdin_used+0x18e7>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xb4000008,%eax
loopne 804d83e <_IO_stdin_used+0x191a>
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%eax
add    %bh,%al
or     %al,(%eax)
add    %dh,(%esp,%eiz,8)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
inc    %eax
or     %eax,(%eax)
add    %cl,0x5dffff(%esp,%eiz,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ch,0x0(%ecx,%ecx,1)
add    %al,%al
in     $0xff,%al
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
les    (%ecx),%ecx
add    %al,(%eax)
clc
in     $0xff,%al
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,(%eax)
or     (%eax),%al
add    %ch,0x2ffff(,%eiz,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
adc    $0xa,%al
add    %al,(%eax)
sub    %ah,%ch
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
lock xchg %eax,%ebx
add    $0x8,%al
.byte 0xd0
xchg   %eax,%ebx
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
les    0xd0804(%edx),%ecx
add    %al,(%eax)
cld
mov    $0x190804,%esi
add    %al,(%eax)
or     %ch,%bh
add    $0x8,%al
sbb    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0xef,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
mov    %es,0x60804(%ebp)
add    %al,(%eax)
in     (%dx),%al
addl   $0xa,(%eax,%ecx,1)
mov    (%edx),%al
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
lock add $0x8,%al
add    (%eax),%al
add    %al,(%eax)
nop
add    %eax,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dh,(%ecx,%ecx,4)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
or     $0x89,%al
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x74(%edi)
mov    %al,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x16(%edi)
mov    %al,(%eax,%ecx,1)
add    %al,(%eax)
adc    $0xef,%al
add    $0x8,%al
push   %es
mov    (%eax,%ecx,1),%eax
push   %ss
mov    (%eax,%ecx,1),%eax
mov    %es:(%eax,%ecx,1),%eax
mov    %ss:(%eax,%ecx,1),%eax
inc    %esi
mov    (%eax,%ecx,1),%eax
push   %esi
mov    (%eax,%ecx,1),%eax
mov    (%eax,%ecx,1),%ax
jbe    804efb5 <_IO_stdin_used+0x3091>
add    $0x8,%al
xchg   %cl,-0x7469f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%eax
mov    $0x8b,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
(bad)
mov    (%eax,%ecx,1),%eax
out    %al,$0x8b
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
push   %es
mov    %es,(%eax,%ecx,1)
push   %ss
mov    %es,(%eax,%ecx,1)
mov    %es,%es:(%eax,%ecx,1)
mov    %es,%ss:(%eax,%ecx,1)
inc    %esi
mov    %es,(%eax,%ecx,1)
push   %esi
mov    %es,(%eax,%ecx,1)
data16
mov    %es,(%eax,%ecx,1)
jbe    804eff6 <_IO_stdin_used+0x30d2>
add    $0x8,%al
xchg   %cl,0x48c9608(%esp,%eax,1)
or     %ah,-0x49f7fb74(%esi)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
out    %al,$0x8c
add    $0x8,%al
(bad)
mov    %es,(%eax,%ecx,1)
push   %es
lea    (%eax,%ecx,1),%eax
push   %ss
lea    (%eax,%ecx,1),%eax
lea    %es:(%eax,%ecx,1),%eax
lea    %ss:(%eax,%ecx,1),%eax
inc    %esi
lea    (%eax,%ecx,1),%eax
push   %esi
lea    (%eax,%ecx,1),%eax
lea    (%eax,%ecx,1),%ax
jbe    804f037 <_IO_stdin_used+0x3113>
add    $0x8,%al
xchg   %cl,-0x7269f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lea    (%eax,%ecx,1),%eax
mov    $0x8d,%dh
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
(bad)
lea    (%eax,%ecx,1),%eax
out    %al,$0x8d
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
push   %es
mov    (%eax,%ecx,1),%es
push   %ss
mov    (%eax,%ecx,1),%es
add    $0x10804,%esi
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %dh,(%ecx,%esi,8)
add    $0x8,%al
add    %al,(%ecx)
add    %al,(%eax)
mov    0x10804f1,%al
add    %al,(%eax)
add    %al,(%eax)
arpl   %bp,%gs:0x6f(%eax)
add    %al,(%eax)
add    %al,(%eax)
sahf
aas
popf
dec    %ebx
