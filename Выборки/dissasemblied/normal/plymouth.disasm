das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,0x3402a3f8(%ecx,%eax,2)
jl     80481e7 <raise@plt-0xd39>
and    $0xf577c46e,%eax
inc    %ebp
jge    8048216 <raise@plt-0xd0a>
ficompl 0x77(%esi)
.byte 0x10
add    (%eax),%al
add    %al,(%eax)
inc    %edi
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,0x0
and    %al,(%edx)
and    (%eax),%al
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
cmp    %dh,%dl
.byte 0x8b
sbb    $0xad,%al
dec    %ebx
jecxz  8048190 <raise@plt-0xd90>
aad    $0x4
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ret
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%esp,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x4,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
rolb   %cl,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stc
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x4(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lock add %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ch
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x4(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
incl   (%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
hlt
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%ah
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bl
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x4(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
bound  %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
repz add $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%esi)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
into
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%cl
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popf
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%eax)
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popf
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,$0x2
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
enter  $0x1,$0x0
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%eax,%eax,1),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x4(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
(bad)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%esi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edx
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x4(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
cwtl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%al
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x4(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esi
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ch
add    $0x0,%al
add    %ah,(%eax)
adc    %eax,0x408
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %al,0x4(%ebx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
aad    $0x4
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
.byte 0xf
add    %ch,0x62(%ecx,%ebp,2)
jo     80486d2 <raise@plt-0x84e>
jns    8048696 <raise@plt-0x88a>
jae    80486d9 <raise@plt-0x847>
xor    %cs:(%eax),%al
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     80486db <raise@plt-0x845>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048706 <raise@plt-0x81a>
popa
jb     8048709 <raise@plt-0x817>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    80486fb <raise@plt-0x825>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    804871c <raise@plt-0x804>
gs
jae    80486ac <raise@plt-0x874>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     8048718 <raise@plt-0x808>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
jo     8048734 <raise@plt-0x7ec>
jns    8048729 <raise@plt-0x7f7>
insb   (%dx),%es:(%edi)
imul   $0x7070615f,0x74(%ebx),%esi
outsb  %gs:(%esi),(%dx)
fs
pop    %edi
fs
popa
je     804873b <raise@plt-0x7e5>
add    %dh,0x6c(%eax)
jns    804873e <raise@plt-0x7e2>
gs
jbe    8048747 <raise@plt-0x7d9>
outsb  %ds:(%esi),(%dx)
je     8048744 <raise@plt-0x7dc>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048749 <raise@plt-0x7d7>
ja     804874d <raise@plt-0x7d3>
je     8048751 <raise@plt-0x7cf>
push   $0x726f665f
pop    %edi
gs
js     8048760 <raise@plt-0x7c0>
je     80486f9 <raise@plt-0x827>
jo     8048767 <raise@plt-0x7b9>
jns    804875c <raise@plt-0x7c4>
ja     8048771 <raise@plt-0x7af>
imul   $0x5f796c70,0x0(%ebp,%eiz,2),%esi
popa
jb     804877c <raise@plt-0x7a4>
popa
jns    804876c <raise@plt-0x7b4>
jae    8048783 <raise@plt-0x79d>
gs
popa
insb   (%dx),%es:(%edi)
pop    %edi
jo     8048784 <raise@plt-0x79c>
imul   $0x655f7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     8048796 <raise@plt-0x78a>
add    %dh,0x6c(%eax)
jns    8048787 <raise@plt-0x799>
outsl  %ds:(%esi),(%dx)
jo     8048790 <raise@plt-0x790>
outsb  %ds:(%esi),(%dx)
pop    %edi
jne    804879d <raise@plt-0x783>
imul   $0x69746365,0x72(%ecx,%ebp,2),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
pop    %edi
jo     80487a7 <raise@plt-0x779>
jo     80487a5 <raise@plt-0x77b>
add    %dh,0x6c(%eax)
jns    80487a4 <raise@plt-0x77c>
popa
jb     80487ba <raise@plt-0x766>
popa
jns    80487aa <raise@plt-0x776>
data16
jb     80487b3 <raise@plt-0x76d>
add    %dh,%gs:0x6c(%eax)
jns    80487b3 <raise@plt-0x76d>
popa
jb     80487c9 <raise@plt-0x757>
popa
jns    80487b9 <raise@plt-0x767>
popa
fs
fs
pop    %edi
jo     80487cf <raise@plt-0x751>
imul   $0x655f7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     804876e <raise@plt-0x7b2>
jo     80487dc <raise@plt-0x744>
jns    80487d1 <raise@plt-0x74f>
gs
jbe    80487da <raise@plt-0x746>
outsb  %ds:(%esi),(%dx)
je     80487d7 <raise@plt-0x749>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     80487dc <raise@plt-0x744>
jb     80487f4 <raise@plt-0x72c>
outsb  %ds:(%esi),(%dx)
add    %dh,0x6c(%eax)
jns    80487e4 <raise@plt-0x73c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16
addr16
gs
jb     80487eb <raise@plt-0x735>
data16
insb   (%dx),%es:(%edi)
jne    8048803 <raise@plt-0x71d>
push   $0x796c7000
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
imul   $0x5f74,0x73(%edx),%si
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
fs add %dh,%fs:%gs:0x6c(%eax)
jns    804880d <raise@plt-0x713>
gs
jbe    8048816 <raise@plt-0x70a>
outsb  %ds:(%esi),(%dx)
je     8048813 <raise@plt-0x70d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048818 <raise@plt-0x708>
ja     804881c <raise@plt-0x704>
je     8048820 <raise@plt-0x700>
push   $0x64665f
jo     8048830 <raise@plt-0x6f0>
jns    8048825 <raise@plt-0x6fb>
gs
jbe    804882e <raise@plt-0x6f2>
outsb  %ds:(%esi),(%dx)
je     804882b <raise@plt-0x6f5>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048830 <raise@plt-0x6f0>
jae    8048847 <raise@plt-0x6d9>
outsl  %ds:(%esi),(%dx)
jo     8048835 <raise@plt-0x6eb>
ja     8048839 <raise@plt-0x6e7>
je     804883d <raise@plt-0x6e3>
push   $0x5f676e69
data16
add    %dh,%fs:0x6c(%eax)
jns    8048845 <raise@plt-0x6db>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048851 <raise@plt-0x6cf>
jb     8048865 <raise@plt-0x6bb>
gs
jb     8048854 <raise@plt-0x6cc>
addr16
gs
je     8048858 <raise@plt-0x6c8>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8048878 <raise@plt-0x6a8>
imul   $0x6c700073,0x6e(%edi),%ebp
jns    804886c <raise@plt-0x6b4>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048878 <raise@plt-0x6a8>
jb     804888c <raise@plt-0x694>
gs
jb     804887b <raise@plt-0x6a5>
popa
fs
fs
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x6c(%eax)
jns    804888b <raise@plt-0x695>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048897 <raise@plt-0x689>
jb     80488ab <raise@plt-0x675>
gs
jb     804889a <raise@plt-0x686>
popa
fs
fs
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     80488b6 <raise@plt-0x66a>
imul   $0x6c700073,0x6e(%edi),%ebp
jns    80488aa <raise@plt-0x676>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     80488b6 <raise@plt-0x66a>
jb     80488ca <raise@plt-0x656>
gs
jb     80488b9 <raise@plt-0x667>
popa
fs
fs
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
popa
insb   (%dx),%es:(%edi)
imul   $0x796c7000,0x73(%ecx),%esp
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6d65725f,0x74(%ebx),%esi
outsl  %ds:(%esi),(%dx)
jbe    80488e0 <raise@plt-0x640>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
fs add %dh,%fs:%gs:0x6c(%eax)
jns    80488e4 <raise@plt-0x63c>
insb   (%dx),%es:(%edi)
imul   $0x646f6e5f,0x74(%ebx),%esi
gs
pop    %edi
addr16
gs
je     80488f2 <raise@plt-0x62e>
fs
popa
je     80488f8 <raise@plt-0x628>
add    %dh,0x6c(%eax)
jns    80488fb <raise@plt-0x625>
insb   (%dx),%es:(%edi)
imul   $0x6572665f,0x74(%ebx),%esi
add    %dh,%gs:0x6c(%eax)
jns    8048909 <raise@plt-0x617>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x74(%edi,%ebx,2)
outsl  %ds:(%esi),(%dx)
pop    %edi
jne    8048925 <raise@plt-0x5fb>
imul   $0x6b636f73,0x5f(%eax),%edi
gs
je     80488c1 <raise@plt-0x65f>
jo     804892f <raise@plt-0x5f1>
jns    8048924 <raise@plt-0x5fc>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16
addr16
gs
jb     804892b <raise@plt-0x5f5>
imul   $0x63617274,0x5f(%ebx),%esi
imul   $0x616e655f,0x67(%esi),%ebp
bound  %ebp,0x64(%ebp,%eiz,2)
add    %dh,0x6c(%eax)
jns    8048942 <raise@plt-0x5de>
gs
jbe    804894b <raise@plt-0x5d5>
outsb  %ds:(%esi),(%dx)
je     8048948 <raise@plt-0x5d8>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804894d <raise@plt-0x5d3>
outsb  %ds:(%esi),(%dx)
gs
ja     80488f2 <raise@plt-0x62e>
jo     8048960 <raise@plt-0x5c0>
jns    8048955 <raise@plt-0x5cb>
gs
jbe    804895e <raise@plt-0x5c2>
outsb  %ds:(%esi),(%dx)
je     804895b <raise@plt-0x5c5>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048960 <raise@plt-0x5c0>
data16
jb     8048969 <raise@plt-0x5b7>
add    %dh,%gs:0x6c(%eax)
jns    8048969 <raise@plt-0x5b7>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048975 <raise@plt-0x5ab>
jb     8048989 <raise@plt-0x597>
gs
jb     8048978 <raise@plt-0x5a8>
jo     804897c <raise@plt-0x5a4>
jb     8048990 <raise@plt-0x590>
gs
pop    %edi
popa
jb     8048989 <raise@plt-0x597>
jne    8048991 <raise@plt-0x58f>
outsb  %gs:(%esi),(%dx)
je     804899b <raise@plt-0x585>
add    %dh,0x6c(%eax)
jns    804898c <raise@plt-0x594>
jb     8048994 <raise@plt-0x58c>
popa
add    %dh,%fs:0x6c(%eax)
jns    8048995 <raise@plt-0x58b>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 80489ad <raise@plt-0x573>
add    %dh,0x6c(%eax)
jns    80489a9 <raise@plt-0x577>
popa
jb     80489bf <raise@plt-0x561>
popa
jns    80489af <raise@plt-0x571>
outsb  %ds:(%esi),(%dx)
gs
ja     8048954 <raise@plt-0x5cc>
jo     80489c2 <raise@plt-0x55e>
jns    80489b7 <raise@plt-0x569>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16
addr16
gs
jb     80489be <raise@plt-0x562>
je     80489d0 <raise@plt-0x550>
addr32 insb (%dx),%es:(%di)
gs
pop    %edi
je     80489da <raise@plt-0x546>
popa
arpl   %bp,0x6e(%ecx)
add    %dh,0x6c(%bx,%si)
jns    80489d1 <raise@plt-0x54f>
insb   (%dx),%es:(%edi)
imul   $0x77656e5f,0x74(%ebx),%esi
add    %dh,0x6c(%eax)
jns    80489de <raise@plt-0x542>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16
addr16
gs
jb     80489e5 <raise@plt-0x53b>
addr16
gs
je     80489e9 <raise@plt-0x537>
gs
jb     80489ff <raise@plt-0x521>
outsl  %ds:(%esi),(%dx)
jb     80489ef <raise@plt-0x531>
fs
gs
popaw
jne    8048a02 <raise@plt-0x51e>
je     8048998 <raise@plt-0x588>
jo     8048a06 <raise@plt-0x51a>
jns    80489fb <raise@plt-0x525>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16
addr16
gs
jb     8048a02 <raise@plt-0x51e>
imul   $0x5f746365,0x6a(%esi),%ebp
ja     8048a15 <raise@plt-0x50b>
je     8048a16 <raise@plt-0x50a>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x665f6c61,0x72(%ebp,%eiz,2),%esi
outsl  %ds:(%esi),(%dx)
jb     8048a2c <raise@plt-0x4f4>
popa
je     8048a21 <raise@plt-0x4ff>
jae    8048a38 <raise@plt-0x4e8>
jb     8048a2f <raise@plt-0x4f1>
outsb  %ds:(%esi),(%dx)
add    %dh,0x6c(%bx,%si)
jns    8048a2c <raise@plt-0x4f4>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048a38 <raise@plt-0x4e8>
jb     8048a4c <raise@plt-0x4d4>
gs
jb     8048a3b <raise@plt-0x4e5>
addr16
gs
je     8048a3f <raise@plt-0x4e1>
outsl  %ds:(%esi),(%dx)
jo     8048a57 <raise@plt-0x4c9>
imul   $0x6c700073,0x6e(%edi),%ebp
jns    8048a4b <raise@plt-0x4d5>
jb     8048a53 <raise@plt-0x4cd>
popa
fs
pop    %edi
jne    8048a5c <raise@plt-0x4c4>
outsb  %ds:(%esi),(%dx)
je     8048a29 <raise@plt-0x4f7>
xor    (%eax),%al
jo     8048a66 <raise@plt-0x4ba>
jns    8048a5b <raise@plt-0x4c5>
data16
jb     8048a64 <raise@plt-0x4bc>
gs
pop    %edi
jae    8048a77 <raise@plt-0x4a9>
jb     8048a6e <raise@plt-0x4b2>
outsb  %ds:(%esi),(%dx)
addr16 pop %edi
popa
jb     8048a7d <raise@plt-0x4a3>
popa
jns    8048a0e <raise@plt-0x512>
jo     8048a7c <raise@plt-0x4a4>
jns    8048a71 <raise@plt-0x4af>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
js     8048a93 <raise@plt-0x48d>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
fs add %dh,%fs:%gs:0x6c(%eax)
jns    8048a88 <raise@plt-0x498>
gs
jbe    8048a91 <raise@plt-0x48f>
outsb  %ds:(%esi),(%dx)
je     8048a8e <raise@plt-0x492>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048a93 <raise@plt-0x48d>
jo     8048aa8 <raise@plt-0x478>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    8048a9b <raise@plt-0x485>
jo     8048aa3 <raise@plt-0x47d>
outsb  %ds:(%esi),(%dx)
imul   $0x6576655f,%fs:0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
je     8048abd <raise@plt-0x463>
add    %dh,0x6c(%eax)
jns    8048aae <raise@plt-0x472>
gs
jbe    8048ab7 <raise@plt-0x469>
outsb  %ds:(%esi),(%dx)
je     8048ab4 <raise@plt-0x46c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8048ab9 <raise@plt-0x467>
gs
js     8048ac6 <raise@plt-0x45a>
je     8048a5f <raise@plt-0x4c1>
jo     8048acd <raise@plt-0x453>
jns    8048ac2 <raise@plt-0x45e>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048ace <raise@plt-0x452>
jb     8048ae2 <raise@plt-0x43e>
gs
jb     8048ad1 <raise@plt-0x44f>
outsb  %ds:(%esi),(%dx)
gs
ja     8048a76 <raise@plt-0x4aa>
jo     8048ae4 <raise@plt-0x43c>
jns    8048ad9 <raise@plt-0x447>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jo     8048ae5 <raise@plt-0x43b>
jb     8048af9 <raise@plt-0x427>
gs
jb     8048ae8 <raise@plt-0x438>
addr16
gs
je     8048aec <raise@plt-0x434>
push   $0x5f706c65
jae    8048b08 <raise@plt-0x418>
jb     8048aff <raise@plt-0x421>
outsb  %ds:(%esi),(%dx)
add    %ch,0x69(%si)
bound  %esp,0x2e(%ebx)
jae    8048b0f <raise@plt-0x411>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048b1d <raise@plt-0x403>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
jo     8048b28 <raise@plt-0x3f8>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048b34 <raise@plt-0x3ec>
jae    8048b2d <raise@plt-0x3f3>
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
jae    8048b41 <raise@plt-0x3df>
jb     8048b33 <raise@plt-0x3ed>
jne    8048b41 <raise@plt-0x3df>
add    %ah,0x6f(%esi)
jb     8048b41 <raise@plt-0x3df>
add    %bl,0x5f(%edi)
jae    8048b4f <raise@plt-0x3d1>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x7373615f,0x5f(%eax,%eax,1),%ebp
gs
jb     8048b64 <raise@plt-0x3bc>
pop    %edi
popaw
imul   $0x6f6c6c61,0x63(%eax,%eax,1),%ebp
arpl   %ax,(%eax)
jae    8048b73 <raise@plt-0x3ad>
jb     8048b6d <raise@plt-0x3b3>
outsb  %gs:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8048b7b <raise@plt-0x3a5>
je     8048b7c <raise@plt-0x3a4>
add    %bl,0x5f(%edi)
gs
jb     8048b82 <raise@plt-0x39e>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
fs
jne    8048b96 <raise@plt-0x38a>
xor    (%eax),%al
data16
jo     8048ba0 <raise@plt-0x380>
je     8048ba0 <raise@plt-0x380>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jb     8048b98 <raise@plt-0x388>
imul   $0x735f5f00,0x65(%ebx),%esi
je     8048bb2 <raise@plt-0x36e>
outsb  %ds:(%esi),(%dx)
fs
jne    8048bb4 <raise@plt-0x36c>
add    %dh,0x74(%ebx)
fs
gs
jb     8048bbd <raise@plt-0x363>
add    %ah,0x78(%ebp)
arpl   %si,%gs:0x70(%esi)
add    %dh,0x61(%edi)
imul   $0x6c630064,0x69(%eax,%esi,2),%esi
outsl  %ds:(%esi),(%dx)
jae    8048bc5 <raise@plt-0x35b>
add    %bl,0x5f(%edi)
popa
jae    8048bd6 <raise@plt-0x34a>
jb     8048bd1 <raise@plt-0x34f>
outsb  %ds:(%esi),(%dx)
je     8048bd1 <raise@plt-0x34f>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048bf0 <raise@plt-0x330>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x42494c47,0x0(%esi),%ebp
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
cmp    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    $0x200,%eax
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %eax,(%eax)
push   %es
add    %bh,(%ecx)
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edi)
add    %ah,(%edx)
add    $0x100000,%eax
add    %al,(%eax)
sbb    %ch,0x69(%ecx)
or     $0x60000,%eax
cs
add    $0x100000,%eax
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x50000,%eax
cmp    %al,0x100000
add    %al,(%eax)
adc    $0x69,%al
imul   $0x542,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
dec    %esp
add    $0x100000,%eax
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
push   %esi
add    $0x0,%eax
cld
syscall
or     %al,(%esi)
and    %eax,(%eax)
add    %ah,(%eax)
adc    %eax,0x470508
or     $0x10,%al
add    $0x10708,%eax
add    %dl,(%eax)
adc    %al,0x20708
add    %dl,(%eax,%edx,1)
add    $0x30708,%eax
add    %bl,(%eax)
adc    %al,0x40708
add    %bl,(%eax,%edx,1)
add    $0x50708,%eax
add    %ah,(%eax)
adc    %al,0x70708
add    %ah,(%eax,%edx,1)
add    $0x80708,%eax
add    %ch,(%eax)
adc    %al,0x90708
add    %ch,(%eax,%edx,1)
add    $0xa0708,%eax
add    %dh,(%eax)
adc    %al,0xb0708
add    %dh,(%eax,%edx,1)
add    $0xc0708,%eax
add    %bh,(%eax)
adc    %al,0xd0708
add    %bh,(%eax,%edx,1)
add    $0xe0708,%eax
add    %al,0x10(%eax)
add    $0xf0708,%eax
add    %al,0x5(%eax,%edx,1)
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x10(%eax)
add    $0x110708,%eax
add    %cl,0x5(%eax,%edx,1)
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x10(%eax)
add    $0x130708,%eax
add    %dl,0x5(%eax,%edx,1)
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x10(%eax)
add    $0x150708,%eax
add    %bl,0x5(%eax,%edx,1)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
pusha
adc    %al,0x170708
add    %ah,0x5(%eax,%edx,1)
or     %al,(%edi)
sbb    %al,(%eax)
add    %ch,0x10(%eax)
add    $0x190708,%eax
add    %ch,0x5(%eax,%edx,1)
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x10(%eax)
add    $0x1b0708,%eax
add    %dh,0x5(%eax,%edx,1)
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x10(%eax)
add    $0x1d0708,%eax
add    %bh,0x5(%eax,%edx,1)
or     %al,(%edi)
push   %ds
add    %al,(%eax)
adcb   $0x5,(%eax)
or     %al,(%edi)
pop    %ds
add    %al,(%eax)
test   %dl,(%eax)
add    $0x200708,%eax
add    %cl,0x7080510(%eax)
and    %eax,(%eax)
add    %cl,0x22070805(%eax,%edx,1)
add    %al,(%eax)
nop
adc    %al,0x230708
add    %dl,0x24070805(%eax,%edx,1)
add    %al,(%eax)
cwtl
adc    %al,0x250708
add    %bl,0x26070805(%eax,%edx,1)
add    %al,(%eax)
mov    0x7080510,%al
daa
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
adc    %al,0x280708
add    %ch,0x7080510(%eax)
sub    %eax,(%eax)
add    %ch,0x2a070805(%eax,%edx,1)
add    %al,(%eax)
mov    $0x10,%al
add    $0x2b0708,%eax
add    %dh,0x2c070805(%eax,%edx,1)
add    %al,(%eax)
mov    $0x7080510,%eax
sub    $0x10bc0000,%eax
add    $0x2e0708,%eax
add    %al,%al
adc    %al,0x2f0708
add    %al,%ah
adc    %al,0x300708
add    %cl,%al
adc    %al,0x310708
add    %cl,%ah
adc    %al,0x320708
add    %dl,%al
adc    %al,0x330708
add    %dl,%ah
adc    %al,0x340708
add    %bl,%al
adc    %al,0x350708
add    %bl,%ah
adc    %al,0x360708
add    %ah,%al
adc    %al,0x370708
add    %ah,%ah
adc    %al,0x390708
add    %ch,%al
adc    %al,0x3b0708
add    %ch,%ah
adc    %al,0x3c0708
add    %dh,%al
adc    %al,0x3d0708
add    %dh,%ah
adc    %al,0x3e0708
add    %bh,%al
adc    %al,0x3f0708
add    %bh,%ah
adc    %al,0x400708
add    %al,(%eax)
adc    %eax,0x410708
add    %al,(%ecx,%edx,1)
add    $0x420708,%eax
add    %cl,(%eax)
adc    %eax,0x430708
add    %cl,(%ecx,%edx,1)
add    $0x440708,%eax
add    %dl,(%eax)
adc    %eax,0x450708
add    %dl,(%ecx,%edx,1)
add    $0x460708,%eax
push   %ebx
sub    $0x8,%esp
call   804a510 <calloc@plt+0x11d0>
add    $0x810b,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048f0a <raise@plt-0x16>
call   8049110 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8051004
jmp    *0x8051008
add    %al,(%eax)
jmp    *0x805100c
push   $0x0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051010
push   $0x8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051014
push   $0x10
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051018
push   $0x18
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805101c
push   $0x20
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051020
push   $0x28
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051024
push   $0x30
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051028
push   $0x38
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805102c
push   $0x40
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051030
push   $0x48
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051034
push   $0x50
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051038
push   $0x58
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805103c
push   $0x60
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051040
push   $0x68
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051044
push   $0x70
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051048
push   $0x78
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805104c
push   $0x80
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051050
push   $0x88
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051054
push   $0x90
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051058
push   $0x98
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805105c
push   $0xa0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051060
push   $0xa8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051064
push   $0xb0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051068
push   $0xb8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805106c
push   $0xc0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051070
push   $0xc8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051074
push   $0xd0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051078
push   $0xd8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805107c
push   $0xe0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051080
push   $0xe8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051084
push   $0xf0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051088
push   $0xf8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805108c
push   $0x100
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051090
push   $0x108
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051094
push   $0x110
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051098
push   $0x118
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805109c
push   $0x120
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510a0
push   $0x128
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510a4
push   $0x130
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510a8
push   $0x138
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510ac
push   $0x140
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510b0
push   $0x148
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510b4
push   $0x150
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510b8
push   $0x158
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510bc
push   $0x160
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510c0
push   $0x168
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510c4
push   $0x170
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510c8
push   $0x178
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510cc
push   $0x180
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510d0
push   $0x188
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510d4
push   $0x190
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510d8
push   $0x198
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510dc
push   $0x1a0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510e0
push   $0x1a8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510e4
push   $0x1b0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510e8
push   $0x1b8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510ec
push   $0x1c0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510f0
push   $0x1c8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510f4
push   $0x1d0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510f8
push   $0x1d8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x80510fc
push   $0x1e0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051100
push   $0x1e8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051104
push   $0x1f0
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051108
push   $0x1f8
jmp    8048f10 <raise@plt-0x10>
jmp    *0x805110c
push   $0x200
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051110
push   $0x208
jmp    8048f10 <raise@plt-0x10>
jmp    *0x8051114
push   $0x210
jmp    8048f10 <raise@plt-0x10>
push   %ebp
mov    $0x83,%ecx
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x300,%esp
mov    0xc(%ebp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x2fc(%esp)
xor    %eax,%eax
lea    0xf0(%esp),%edi
lea    0xf0(%esp),%ebx
rep stos %eax,%es:(%edi)
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   8048ff0 <signal@plt>
call   8049330 <ply_event_loop_new@plt>
mov    %eax,0xf0(%esp)
call   804b1d0 <calloc@plt+0x1e90>
movl   $0x804e1b4,0x4(%esp)
movl   $0x804e1ca,(%esp)
mov    %eax,0xf4(%esp)
call   8049050 <ply_command_parser_new@plt>
movl   $0x0,0xb8(%esp)
00
movl   $0x0,0xb4(%esp)
00
movl   $0x804e1d3,0xb0(%esp)
08
movl   $0x804e0c7,0xac(%esp)
08
movl   $0x0,0xa8(%esp)
00
mov    %eax,0xf8(%esp)
movl   $0x804e794,0xa4(%esp)
08
movl   $0x804e1f0,0xa0(%esp)
08
movl   $0x2,0x9c(%esp)
00
movl   $0x804e7c4,0x98(%esp)
08
movl   $0x804e363,0x94(%esp)
08
movl   $0x2,0x90(%esp)
00
movl   $0x804e7f4,0x8c(%esp)
08
movl   $0x804e1f8,0x88(%esp)
08
movl   $0x0,0x84(%esp)
00
movl   $0x804e209,0x80(%esp)
08
movl   $0x804e21f,0x7c(%esp)
movl   $0x0,0x78(%esp)
movl   $0x804e230,0x74(%esp)
movl   $0x804e243,0x70(%esp)
movl   $0x0,0x6c(%esp)
movl   $0x804e24f,0x68(%esp)
movl   $0x804e262,0x64(%esp)
movl   $0x0,0x60(%esp)
movl   $0x804e818,0x5c(%esp)
movl   $0x804e26e,0x58(%esp)
movl   $0x0,0x54(%esp)
movl   $0x804e850,0x50(%esp)
movl   $0x804e276,0x4c(%esp)
movl   $0x0,0x48(%esp)
movl   $0x804e878,0x44(%esp)
movl   $0x804e284,0x40(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x804e289,0x38(%esp)
mov    %eax,(%esp)
movl   $0x804e29d,0x34(%esp)
movl   $0x2,0x30(%esp)
movl   $0x804e898,0x2c(%esp)
movl   $0x804e2a2,0x28(%esp)
movl   $0x0,0x24(%esp)
movl   $0x804e8d0,0x20(%esp)
movl   $0x804e2aa,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x804e2c1,0x14(%esp)
movl   $0x804e4b4,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x804e2de,0x8(%esp)
movl   $0x804e2f0,0x4(%esp)
call   80491a0 <ply_command_parser_add_options@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
movl   $0x804e2f5,0x30(%esp)
mov    %eax,(%esp)
movl   $0x804e2fe,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x804e306,0x24(%esp)
movl   $0x804e143,0x20(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x804e31f,0x18(%esp)
movl   $0x804e14c,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c890,0xc(%esp)
movl   $0x804e336,0x8(%esp)
movl   $0x804e350,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x3,0x1c(%esp)
movl   $0x804e904,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e120,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c7b0,0xc(%esp)
movl   $0x804e92c,0x8(%esp)
movl   $0x804e35c,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804e954,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e106,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c160,0xc(%esp)
movl   $0x804e978,0x8(%esp)
movl   $0x804e363,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x804e9a0,0x24(%esp)
mov    %eax,(%esp)
movl   $0x804e154,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804e9c8,0x18(%esp)
movl   $0x804e15f,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c9a0,0xc(%esp)
movl   $0x804e9ec,0x8(%esp)
movl   $0x804e36a,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804be70,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804ea18,0x8(%esp)
movl   $0x804e262,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804bea0,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804ea3c,0x8(%esp)
movl   $0x804e243,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x44(%esp)
movl   $0x0,0x40(%esp)
movl   $0x804ea60,0x3c(%esp)
mov    %eax,(%esp)
movl   $0x804e115,0x38(%esp)
movl   $0x3,0x34(%esp)
movl   $0x804ea8c,0x30(%esp)
movl   $0x804e130,0x2c(%esp)
movl   $0x2,0x28(%esp)
movl   $0x804eacc,0x24(%esp)
movl   $0x804e129,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804eaf8,0x18(%esp)
movl   $0x804e10d,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c620,0xc(%esp)
movl   $0x804e209,0x8(%esp)
movl   $0x804e21f,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
movl   $0x804ea60,0x30(%esp)
mov    %eax,(%esp)
movl   $0x804e115,0x2c(%esp)
movl   $0x2,0x28(%esp)
movl   $0x804eb28,0x24(%esp)
movl   $0x804e129,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804eb54,0x18(%esp)
movl   $0x804e10d,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c440,0xc(%esp)
movl   $0x804e379,0x8(%esp)
movl   $0x804e38d,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804e39a,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e3a6,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c380,0xc(%esp)
movl   $0x804e3ab,0x8(%esp)
movl   $0x804e3bd,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x804e3d4,0x8(%esp)
movl   $0x804e3bd,0x4(%esp)
mov    %eax,(%esp)
call   80492d0 <ply_command_parser_add_command_alias@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804e39a,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e3a6,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c300,0xc(%esp)
movl   $0x804e3cd,0x8(%esp)
movl   $0x804e3dc,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x2c(%esp)
movl   $0x2,0x28(%esp)
movl   $0x804e3e9,0x24(%esp)
mov    %eax,(%esp)
movl   $0x804e101,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804eb88,0x18(%esp)
movl   $0x804e10d,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c260,0xc(%esp)
movl   $0x804ebb8,0x8(%esp)
movl   $0x804e405,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x2,0x1c(%esp)
movl   $0x804e415,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e101,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c0f0,0xc(%esp)
movl   $0x804e7f4,0x8(%esp)
movl   $0x804e1f8,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c230,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804e433,0x8(%esp)
movl   $0x804e11a,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c050,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804e44b,0x8(%esp)
movl   $0x804e465,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804bed0,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804e794,0x8(%esp)
movl   $0x804e476,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c200,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804ebd8,0x8(%esp)
movl   $0x804e483,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c1d0,0xc(%esp)
mov    %eax,(%esp)
movl   $0x804ebf8,0x8(%esp)
movl   $0x804e48e,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0xf8(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x804ec18,0x18(%esp)
mov    %eax,(%esp)
movl   $0x804e0f3,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x804c080,0xc(%esp)
movl   $0x804e289,0x8(%esp)
movl   $0x804e29d,0x4(%esp)
call   80492a0 <ply_command_parser_add_command@plt>
mov    0x8(%ebp),%eax
mov    %esi,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0xf0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0xf8(%esp),%eax
mov    %eax,(%esp)
call   80492f0 <ply_command_parser_parse_arguments@plt>
test   %al,%al
je     8049e2d <calloc@plt+0xaed>
lea    0xce(%esp),%eax
mov    %eax,0x78(%esp)
lea    0xcc(%esp),%eax
mov    %eax,0x70(%esp)
lea    0xd0(%esp),%eax
mov    %eax,0x68(%esp)
lea    0xd8(%esp),%eax
mov    %eax,0x60(%esp)
lea    0xc9(%esp),%eax
mov    %eax,0x58(%esp)
lea    0xcb(%esp),%eax
mov    %eax,0x50(%esp)
lea    0xca(%esp),%eax
mov    %eax,0x48(%esp)
lea    0xc8(%esp),%eax
mov    %eax,0x40(%esp)
lea    0xc7(%esp),%eax
mov    %eax,0x38(%esp)
lea    0xc6(%esp),%eax
mov    %eax,0x30(%esp)
lea    0xc5(%esp),%eax
mov    %eax,0x28(%esp)
lea    0xd4(%esp),%eax
mov    %eax,0x20(%esp)
lea    0xcf(%esp),%eax
mov    %eax,0x18(%esp)
lea    0xcd(%esp),%eax
mov    %eax,0x10(%esp)
lea    0xc4(%esp),%eax
mov    %eax,0x8(%esp)
mov    0xf8(%esp),%eax
movl   $0x0,0x7c(%esp)
movl   $0x804e1f0,0x74(%esp)
movl   $0x804e0c7,0x6c(%esp)
movl   $0x804e363,0x64(%esp)
movl   $0x804e1f8,0x5c(%esp)
movl   $0x804e21f,0x54(%esp)
movl   $0x804e243,0x4c(%esp)
movl   $0x804e262,0x44(%esp)
movl   $0x804e26e,0x3c(%esp)
movl   $0x804e276,0x34(%esp)
movl   $0x804e284,0x2c(%esp)
movl   $0x804e29d,0x24(%esp)
movl   $0x804e2a2,0x1c(%esp)
movl   $0x804e2aa,0x14(%esp)
movl   $0x804e4b4,0xc(%esp)
movl   $0x804e2f0,0x4(%esp)
mov    %eax,(%esp)
call   8048f70 <ply_command_parser_get_options@plt>
cmpb   $0x0,0xc4(%esp)
jne    8049eb0 <calloc@plt+0xb70>
cmpl   $0x1,0x8(%ebp)
jle    8049e82 <calloc@plt+0xb42>
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    8049ee1 <calloc@plt+0xba1>
movl   $0x0,0x4(%esp)
movl   $0x804e49d,(%esp)
call   8048f50 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8049f29 <calloc@plt+0xbe9>
mov    (%esi),%eax
mov    %eax,0xbc(%esp)
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804a120 <calloc@plt+0xde0>
lea    0xfc(%esp),%eax
movl   $0x200,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8048f60 <read@plt>
test   %eax,%eax
mov    (%esi),%eax
mov    %eax,0xbc(%esp)
js     804a176 <calloc@plt+0xe36>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804a1e5 <calloc@plt+0xea5>
mov    %edi,(%esp)
call   8049300 <close@plt>
lea    0xfc(%esp),%eax
movl   $0x804e4ab,0x4(%esp)
mov    %eax,(%esp)
call   8048f40 <strstr@plt>
test   %eax,%eax
je     8049d53 <calloc@plt+0xa13>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804a271 <calloc@plt+0xf31>
cmpb   $0x0,0xcd(%esp)
jne    804a065 <calloc@plt+0xd25>
cmpb   $0x0,0xcf(%esp)
jne    804a052 <calloc@plt+0xd12>
mov    0xf4(%esp),%eax
mov    %ebx,0x8(%esp)
movl   $0x804bf40,0x4(%esp)
mov    %eax,(%esp)
call   804b280 <calloc@plt+0x1f40>
test   %al,%al
jne    8049f88 <calloc@plt+0xc48>
mov    (%esi),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804a0b0 <calloc@plt+0xd70>
cmpb   $0x0,0xc6(%esp)
jne    804a08f <calloc@plt+0xd4f>
cmpb   $0x0,0xc7(%esp)
jne    804a285 <calloc@plt+0xf45>
cmpb   $0x0,0xcc(%esp)
je     8049f88 <calloc@plt+0xc48>
mov    (%esi),%edi
xor    %ebx,%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     8049e64 <calloc@plt+0xb24>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee43,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ed58,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    8049e64 <calloc@plt+0xb24>
mov    0xf8(%esp),%eax
mov    %eax,(%esp)
call   80490d0 <ply_command_parser_get_help_string@plt>
mov    %eax,%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %ebx,0x8(%esp)
movl   $0x804e499,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
mov    %ebx,(%esp)
mov    $0x1,%ebx
call   8048fc0 <free@plt>
mov    0x2fc(%esp),%edx
xor    %gs:0x14,%edx
mov    %ebx,%eax
jne    804a476 <calloc@plt+0x1136>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xf8(%esp),%eax
mov    %eax,(%esp)
call   80490d0 <ply_command_parser_get_help_string@plt>
mov    %eax,%ebx
mov    0x8051120,%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   80492e0 <fputs@plt>
mov    %ebx,(%esp)
xor    %ebx,%ebx
call   8048fc0 <free@plt>
jmp    8049e64 <calloc@plt+0xb24>
mov    0xf8(%esp),%eax
mov    %eax,(%esp)
call   80490d0 <ply_command_parser_get_help_string@plt>
cmpl   $0x1,0x8(%ebp)
mov    %eax,%ebx
jle    8049e93 <calloc@plt+0xb53>
mov    %eax,0x8(%esp)
movl   $0x804d62f,0x4(%esp)
movl   $0x1,(%esp)
call   8049230 <__printf_chk@plt>
jmp    8049ea4 <calloc@plt+0xb64>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed78,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ec44,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    8049c9e <calloc@plt+0x95e>
mov    (%esi),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     8049d53 <calloc@plt+0xa13>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed78,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ec6c,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    8049d53 <calloc@plt+0xa13>
mov    0xf0(%esp),%eax
mov    %eax,0x4(%esp)
mov    0xf4(%esp),%eax
mov    %eax,(%esp)
call   804bd90 <calloc@plt+0x2a50>
cmpb   $0x0,0xca(%esp)
jne    804a249 <calloc@plt+0xf09>
cmpb   $0x0,0xcb(%esp)
jne    804a0f8 <calloc@plt+0xdb8>
cmpb   $0x0,0xc5(%esp)
jne    804a2e4 <calloc@plt+0xfa4>
cmpb   $0x0,0xc6(%esp)
jne    804a314 <calloc@plt+0xfd4>
cmpb   $0x0,0xc7(%esp)
jne    804a33c <calloc@plt+0xffc>
mov    0xd0(%esp),%eax
test   %eax,%eax
je     804a399 <calloc@plt+0x1059>
mov    %eax,0x4(%esp)
mov    0xf4(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,(%esp)
call   804b520 <calloc@plt+0x21e0>
mov    0xf0(%esp),%eax
mov    %eax,(%esp)
call   80490c0 <ply_event_loop_run@plt>
mov    %eax,%ebx
mov    0xf4(%esp),%eax
mov    %eax,(%esp)
call   804b230 <calloc@plt+0x1ef0>
mov    0xf0(%esp),%eax
mov    %eax,(%esp)
call   8048fa0 <ply_event_loop_free@plt>
jmp    8049e64 <calloc@plt+0xb24>
movl   $0x804e4ba,(%esp)
xor    %ebx,%ebx
call   8049100 <puts@plt>
jmp    8049e64 <calloc@plt+0xb24>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
lea    0x0(%esi),%esi
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    8049d61 <calloc@plt+0xa21>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049060 <ply_logger_toggle_tracing@plt>
jmp    8049d61 <calloc@plt+0xa21>
mov    (%esi),%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804a364 <calloc@plt+0x1024>
mov    $0x1,%ebx
jmp    8049e64 <calloc@plt+0xb24>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee43,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ed0c,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    8049da9 <calloc@plt+0xa69>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804ba90 <calloc@plt+0x2750>
jmp    804a01e <calloc@plt+0xcde>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed78,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ec90,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
jmp    8049cda <calloc@plt+0x99a>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804a1d8 <calloc@plt+0xe98>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed78,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ecbc,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
mov    %edi,(%esp)
call   8049300 <close@plt>
jmp    8049d53 <calloc@plt+0xa13>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
lea    0x0(%esi),%esi
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
lea    0xfc(%esp),%edx
mov    %edx,0x10(%esp)
movl   $0x804ed78,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ece0,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0xbc(%esp),%eax
mov    %eax,(%esi)
jmp    8049d1b <calloc@plt+0x9db>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804ba30 <calloc@plt+0x26f0>
jmp    804a01e <calloc@plt+0xcde>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049060 <ply_logger_toggle_tracing@plt>
xchg   %ax,%ax
jmp    8049d53 <calloc@plt+0xa13>
mov    (%esi),%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804a0a6 <calloc@plt+0xd66>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee43,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804ed30,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
jmp    804a0a6 <calloc@plt+0xd66>
mov    0xf4(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   804bbb0 <calloc@plt+0x2870>
jmp    804a01e <calloc@plt+0xcde>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804b4c0 <calloc@plt+0x2180>
jmp    804a01e <calloc@plt+0xcde>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804bc80 <calloc@plt+0x2940>
jmp    804a01e <calloc@plt+0xcde>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
lea    0x0(%esi,%eiz,1),%esi
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee43,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e4d8,0x4(%esp)
jmp    804a2c8 <calloc@plt+0xf88>
cmpb   $0x0,0xc9(%esp)
jne    804a3de <calloc@plt+0x109e>
mov    0xd8(%esp),%eax
test   %eax,%eax
je     804a435 <calloc@plt+0x10f5>
mov    %eax,0x4(%esp)
mov    0xf4(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,(%esp)
call   804b9d0 <calloc@plt+0x2690>
jmp    804a01e <calloc@plt+0xcde>
lea    0xdc(%esp),%edi
mov    $0x5,%ecx
rep stos %eax,%es:(%edi)
lea    0xdc(%esp),%eax
mov    %eax,0x10(%esp)
mov    0xf4(%esp),%eax
movl   $0x804cd60,0xc(%esp)
movl   $0x804d2c0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %ebx,0xdc(%esp)
movl   $0x1,0xe8(%esp)
00
call   804b850 <calloc@plt+0x2510>
jmp    804a01e <calloc@plt+0xcde>
cmpb   $0x0,0xc8(%esp)
jne    804a47b <calloc@plt+0x113b>
mov    0xd4(%esp),%eax
test   %eax,%eax
je     804a4a3 <calloc@plt+0x1163>
mov    %eax,0x4(%esp)
mov    0xf4(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,(%esp)
call   804b640 <calloc@plt+0x2300>
jmp    804a01e <calloc@plt+0xcde>
call   8049040 <__stack_chk_fail@plt>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804b7f0 <calloc@plt+0x24b0>
jmp    804a01e <calloc@plt+0xcde>
cmpb   $0x0,0xcc(%esp)
jne    804a01e <calloc@plt+0xcde>
cmpb   $0x0,0xce(%esp)
je     804a01e <calloc@plt+0xcde>
mov    0xf4(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,(%esp)
call   804bcb0 <calloc@plt+0x2970>
jmp    804a01e <calloc@plt+0xcde>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804d570
push   $0x804d500
push   %ecx
push   %esi
push   $0x8049350
call   8049140 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x8051123,%eax
sub    $0x8051120,%eax
cmp    $0x6,%eax
ja     804a530 <calloc@plt+0x11f0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804a52f <calloc@plt+0x11ef>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8051120,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x8051120,%eax
sub    $0x8051120,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804a569 <calloc@plt+0x1229>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804a568 <calloc@plt+0x1228>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x8051120,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8051124
jne    804a5ac <calloc@plt+0x126c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804a520 <calloc@plt+0x11e0>
movb   $0x1,0x8051124
leave
repz ret
xchg   %ax,%ax
mov    0x8050f08,%eax
test   %eax,%eax
je     804a5d8 <calloc@plt+0x1298>
mov    $0x0,%eax
test   %eax,%eax
je     804a5d8 <calloc@plt+0x1298>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8050f08,(%esp)
call   *%eax
leave
jmp    804a550 <calloc@plt+0x1210>
nop
jmp    804a550 <calloc@plt+0x1210>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x3c,%esp
test   %ebx,%ebx
mov    0x50(%esp),%eax
mov    0x54(%esp),%edi
mov    %eax,0x28(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x24(%esp)
je     804a747 <calloc@plt+0x1407>
mov    (%ebx),%esi
test   %esi,%esi
je     804a723 <calloc@plt+0x13e3>
test   %edx,%edx
mov    %edx,%ebp
je     804a76b <calloc@plt+0x142b>
test   %ecx,%ecx
mov    %ecx,%esi
je     804a632 <calloc@plt+0x12f2>
mov    %ecx,(%esp)
call   8049130 <strlen@plt>
cmp    $0xff,%eax
ja     804a78f <calloc@plt+0x144f>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     804a6d0 <calloc@plt+0x1390>
testb  $0x1,0x20(%ebx)
jne    804a668 <calloc@plt+0x1328>
test   %edi,%edi
je     804a660 <calloc@plt+0x1320>
mov    0x24(%esp),%eax
mov    %ebx,0x54(%esp)
mov    %eax,0x50(%esp)
add    $0x3c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    *%eax
xchg   %ax,%ax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x18,0x4(%esp)
movl   $0x1,(%esp)
call   8049340 <calloc@plt>
mov    %ebx,(%eax)
mov    %ebp,(%esp)
mov    %eax,0x2c(%esp)
call   80491b0 <__strdup@plt>
mov    0x2c(%esp),%ecx
test   %esi,%esi
mov    %eax,0x4(%ecx)
je     804a6a4 <calloc@plt+0x1364>
mov    %esi,(%esp)
call   80491b0 <__strdup@plt>
mov    0x2c(%esp),%ecx
mov    %eax,0x8(%ecx)
mov    0x28(%esp),%eax
mov    %edi,0x10(%ecx)
mov    %eax,0xc(%ecx)
mov    0x24(%esp),%eax
mov    %eax,0x14(%ecx)
mov    0xc(%ebx),%eax
mov    %ecx,0x54(%esp)
mov    %eax,0x50(%esp)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049170 <ply_list_append_data@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%ebx),%eax
test   %eax,%eax
js     804a63d <calloc@plt+0x12fd>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804a7b3 <calloc@plt+0x1473>
mov    0x14(%ebx),%eax
mov    %ebx,0x14(%esp)
movl   $0x0,0x10(%esp)
movl   $0x804ade0,0xc(%esp)
mov    %eax,0x4(%esp)
mov    (%ebx),%eax
movl   $0x4,0x8(%esp)
mov    %eax,(%esp)
call   8049260 <ply_event_loop_watch_fd@plt>
mov    %eax,0x4(%ebx)
jmp    804a63d <calloc@plt+0x12fd>
movl   $0x804dfe9,0xc(%esp)
movl   $0x1ff,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5d2,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfe9,0xc(%esp)
movl   $0x1fe,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfe9,0xc(%esp)
movl   $0x200,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d6ec,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfe9,0xc(%esp)
movl   $0x201,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d70c,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfe9,0xc(%esp)
movl   $0x206,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d75c,(%esp)
call   8049320 <__assert_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
xor    %edx,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edi
mov    %dx,0x2a(%esp)
test   %edi,%edi
je     804aa62 <calloc@plt+0x1722>
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804a828 <calloc@plt+0x14e8>
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804d790,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
lea    0x2a(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x14(%edi),%eax
mov    %eax,(%esp)
call   80491f0 <ply_read@plt>
test   %al,%al
je     804a950 <calloc@plt+0x1610>
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8049200 <ply_list_get_first_node@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804a8a1 <calloc@plt+0x1561>
jmp    804a9ed <calloc@plt+0x16ad>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x57,%ecx
je     804a8bc <calloc@plt+0x157c>
cmp    $0x4b,%ecx
je     804a8bc <calloc@plt+0x157c>
movzbl 0x2a(%esp),%edx
cmp    $0x2,%dl
je     804a888 <calloc@plt+0x1548>
cmp    $0x5,%dl
jne    804aaaa <calloc@plt+0x176a>
lea    0x0(%esi),%esi
mov    %ebx,0x4(%esp)
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8048fb0 <ply_list_get_next_node@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804a9ed <calloc@plt+0x16ad>
mov    %ebx,(%esp)
call   8049020 <ply_list_node_get_data@plt>
test   %eax,%eax
je     804aa11 <calloc@plt+0x16d1>
mov    0x4(%eax),%edx
movzbl (%edx),%ecx
cmp    $0x2a,%ecx
jne    804a868 <calloc@plt+0x1528>
cmpb   $0x0,0x1(%edx)
jne    804a872 <calloc@plt+0x1532>
movzbl 0x2a(%esp),%edx
cmp    $0x2,%dl
je     804a970 <calloc@plt+0x1630>
cmp    $0x5,%dl
jne    804a888 <calloc@plt+0x1548>
mov    %eax,%esi
mov    0xc(%eax),%eax
test   %eax,%eax
je     804a8f8 <calloc@plt+0x15b8>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    0x14(%esi),%edx
mov    %edx,(%esp)
call   *%eax
lea    0x0(%esi),%esi
mov    %ebx,0x4(%esp)
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   80491d0 <ply_list_remove_node@plt>
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804a81e <calloc@plt+0x14de>
mov    0x8(%edi),%eax
test   %eax,%eax
je     804a81e <calloc@plt+0x14de>
mov    (%edi),%edx
test   %edx,%edx
je     804aa86 <calloc@plt+0x1746>
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   80490a0 <ply_event_loop_stop_watching_fd@plt>
movl   $0x0,0x8(%edi)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804d7c8,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %eax,%esi
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%edi),%eax
mov    %eax,(%esp)
call   8049310 <ply_read_uint32@plt>
test   %al,%al
jne    804a9a5 <calloc@plt+0x1665>
mov    0x10(%esi),%eax
test   %eax,%eax
je     804a8f8 <calloc@plt+0x15b8>
mov    %edi,0x4(%esp)
mov    0x14(%esi),%edx
mov    %edx,(%esp)
call   *%eax
jmp    804a8f8 <calloc@plt+0x15b8>
mov    0x2c(%esp),%edx
lea    0x1(%edx),%eax
mov    %eax,(%esp)
mov    %edx,0x10(%esp)
call   80490f0 <malloc@plt>
mov    0x10(%esp),%edx
mov    %eax,%ebp
xor    %eax,%eax
test   %edx,%edx
jne    804aa35 <calloc@plt+0x16f5>
movb   $0x0,0x0(%ebp,%eax,1)
mov    0xc(%esi),%eax
test   %eax,%eax
je     804a9e0 <calloc@plt+0x16a0>
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    0x14(%esi),%edx
mov    %edx,(%esp)
call   *%eax
mov    %ebp,(%esp)
call   8048fc0 <free@plt>
jmp    804a8f8 <calloc@plt+0x15b8>
movl   $0x804df60,0xc(%esp)
movl   $0x119,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5ee,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804df60,0xc(%esp)
movl   $0x11b,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d60a,(%esp)
call   8049320 <__assert_fail@plt>
mov    %edx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    0x14(%edi),%eax
mov    %eax,(%esp)
call   80491f0 <ply_read@plt>
test   %al,%al
je     804aa55 <calloc@plt+0x1715>
mov    0x2c(%esp),%eax
jmp    804a9c4 <calloc@plt+0x1684>
mov    %ebp,(%esp)
call   8048fc0 <free@plt>
jmp    804a989 <calloc@plt+0x1649>
movl   $0x804df60,0xc(%esp)
movl   $0x107,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804df60,0xc(%esp)
movl   $0x18e,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5d2,(%esp)
call   8049320 <__assert_fail@plt>
cmp    $0x6,%dl
mov    %eax,%esi
mov    %edx,%eax
je     804ab7f <calloc@plt+0x183f>
cmp    $0x9,%al
jne    804a989 <calloc@plt+0x1649>
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%edi),%eax
mov    %eax,(%esp)
call   8049310 <ply_read_uint32@plt>
test   %al,%al
je     804a989 <calloc@plt+0x1649>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     804abdd <calloc@plt+0x189d>
mov    %edx,(%esp)
mov    %edx,0x10(%esp)
call   80490f0 <malloc@plt>
mov    0x10(%esp),%edx
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %eax,%ebp
mov    0x14(%edi),%eax
mov    %eax,(%esp)
call   80491f0 <ply_read@plt>
test   %al,%al
je     804aa55 <calloc@plt+0x1715>
movl   $0x0,(%esp)
call   8049180 <ply_array_new@plt>
lea    0x1(%ebp),%edx
mov    $0x1,%ecx
sub    %edx,%ecx
mov    %ebp,0x10(%esp)
mov    %eax,0x14(%esp)
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804ab97 <calloc@plt+0x1857>
mov    %esi,0x18(%esp)
mov    %ecx,%esi
mov    %ebx,0x1c(%esp)
mov    %edx,%ebx
jmp    804ab57 <calloc@plt+0x1817>
nop
lea    (%esi,%ebx,1),%eax
add    $0x1,%ebx
movzbl %al,%eax
cmp    0x2c(%esp),%eax
jae    804ab8f <calloc@plt+0x184f>
cmpb   $0x0,-0x1(%ebx)
jne    804ab48 <calloc@plt+0x1808>
mov    0x10(%esp),%eax
mov    %eax,(%esp)
call   80491b0 <__strdup@plt>
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049000 <ply_array_add_pointer_element@plt>
mov    %ebx,0x10(%esp)
jmp    804ab48 <calloc@plt+0x1808>
mov    0xc(%esi),%eax
test   %eax,%eax
jne    804a994 <calloc@plt+0x1654>
jmp    804a8f8 <calloc@plt+0x15b8>
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    %ebp,(%esp)
call   8048fc0 <free@plt>
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049290 <ply_array_steal_pointer_elements@plt>
mov    %eax,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049030 <ply_array_free@plt>
mov    0xc(%esi),%eax
test   %eax,%eax
je     804abd0 <calloc@plt+0x1890>
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    0x14(%esi),%edx
mov    %edx,(%esp)
call   *%eax
mov    %ebp,(%esp)
call   8049280 <ply_free_string_array@plt>
jmp    804a8f8 <calloc@plt+0x15b8>
movl   $0x804df60,0xc(%esp)
movl   $0x157,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d621,(%esp)
call   8049320 <__assert_fail@plt>
jmp    804ac10 <calloc@plt+0x18d0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x10(%eax),%eax
test   %eax,%eax
je     804ac2b <calloc@plt+0x18eb>
mov    (%ebx),%edx
mov    %edx,0x4(%esp)
mov    0x14(%ebx),%edx
mov    %edx,(%esp)
call   *%eax
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   8048fc0 <free@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     804ac45 <calloc@plt+0x1905>
mov    %eax,(%esp)
call   8048fc0 <free@plt>
mov    %ebx,(%esp)
call   8048fc0 <free@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0xc(%eax),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804ac80 <calloc@plt+0x1940>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049200 <ply_list_get_first_node@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804ac9a <calloc@plt+0x195a>
jmp    804accf <calloc@plt+0x198f>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%ebx
mov    %ebx,(%esp)
call   8049020 <ply_list_node_get_data@plt>
mov    %ebx,0x4(%esp)
mov    %eax,%ebp
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8048fb0 <ply_list_get_next_node@plt>
mov    %eax,%esi
mov    %ebp,%eax
call   804ac10 <calloc@plt+0x18d0>
mov    0xc(%edi),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491d0 <ply_list_remove_node@plt>
test   %esi,%esi
jne    804ac98 <calloc@plt+0x1958>
mov    0x4(%edi),%eax
test   %eax,%eax
je     804ac78 <calloc@plt+0x1938>
mov    (%edi),%edx
test   %edx,%edx
je     804acf7 <calloc@plt+0x19b7>
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   80490a0 <ply_event_loop_stop_watching_fd@plt>
movl   $0x0,0x4(%edi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x804e0a0,0xc(%esp)
movl   $0x6e,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5d2,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x10(%eax),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804ad40 <calloc@plt+0x1a00>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8049200 <ply_list_get_first_node@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    804ad5a <calloc@plt+0x1a1a>
jmp    804ad8f <calloc@plt+0x1a4f>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%ebx
mov    %ebx,(%esp)
call   8049020 <ply_list_node_get_data@plt>
mov    %ebx,0x4(%esp)
mov    %eax,%ebp
mov    0x10(%edi),%eax
mov    %eax,(%esp)
call   8048fb0 <ply_list_get_next_node@plt>
mov    %eax,%esi
mov    %ebp,%eax
call   804ac10 <calloc@plt+0x18d0>
mov    0x10(%edi),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80491d0 <ply_list_remove_node@plt>
test   %esi,%esi
jne    804ad58 <calloc@plt+0x1a18>
mov    0x8(%edi),%eax
test   %eax,%eax
je     804ad38 <calloc@plt+0x19f8>
mov    (%edi),%edx
test   %edx,%edx
je     804adb7 <calloc@plt+0x1a77>
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   80490a0 <ply_event_loop_stop_watching_fd@plt>
movl   $0x0,0x8(%edi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x804e060,0xc(%esp)
movl   $0x8f,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5d2,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%ebx
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
je     804afe6 <calloc@plt+0x1ca6>
mov    0x4(%ebx),%ecx
test   %ecx,%ecx
je     804afc2 <calloc@plt+0x1c82>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <ply_list_get_first_node@plt>
test   %eax,%eax
mov    %eax,%edi
je     804b02e <calloc@plt+0x1cee>
mov    %eax,(%esp)
call   8049020 <ply_list_node_get_data@plt>
test   %eax,%eax
mov    %eax,%esi
je     804b00a <calloc@plt+0x1cca>
mov    %edi,0x4(%esp)
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   80491d0 <ply_list_remove_node@plt>
mov    0x4(%esi),%ebp
test   %ebp,%ebp
je     804b052 <calloc@plt+0x1d12>
mov    0x8(%esi),%edi
test   %edi,%edi
je     804af80 <calloc@plt+0x1c40>
mov    %edi,(%esp)
call   8049130 <strlen@plt>
cmp    $0xff,%eax
ja     804af9e <calloc@plt+0x1c5e>
mov    %edi,(%esp)
movl   $0x0,0x2c(%esp)
call   8049130 <strlen@plt>
mov    %edi,0x14(%esp)
mov    %ebp,0xc(%esp)
movl   $0x804d62a,0x8(%esp)
movl   $0x1,0x4(%esp)
add    $0x1,%eax
movsbl %al,%eax
mov    %eax,0x10(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   80490e0 <__asprintf_chk@plt>
mov    0x2c(%esp),%edi
mov    %edi,(%esp)
call   8049130 <strlen@plt>
lea    0x1(%eax),%edx
mov    %edx,0x8(%esp)
mov    %edi,0x4(%esp)
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   8048fe0 <ply_write@plt>
mov    %edi,(%esp)
test   %al,%al
je     804af28 <calloc@plt+0x1be8>
call   8048fc0 <free@plt>
mov    0x8(%ebx),%edx
test   %edx,%edx
je     804af38 <calloc@plt+0x1bf8>
mov    %esi,0x4(%esp)
mov    0x10(%ebx),%eax
mov    %eax,(%esp)
call   8049170 <ply_list_append_data@plt>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804af20 <calloc@plt+0x1be0>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     804af20 <calloc@plt+0x1be0>
mov    (%ebx),%eax
test   %eax,%eax
je     804b076 <calloc@plt+0x1d36>
mov    0x4(%ebx),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   80490a0 <ply_event_loop_stop_watching_fd@plt>
movl   $0x0,0x4(%ebx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8048fc0 <free@plt>
mov    %esi,%eax
call   804ac10 <calloc@plt+0x18d0>
jmp    804aeea <calloc@plt+0x1baa>
xchg   %ax,%ax
mov    0x10(%ebx),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jne    804b09a <calloc@plt+0x1d5a>
mov    %ebx,0x14(%esp)
movl   $0x0,0x10(%esp)
movl   $0x804a7e0,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    0x14(%ebx),%eax
mov    %eax,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049260 <ply_event_loop_watch_fd@plt>
mov    %eax,0x8(%ebx)
jmp    804aedb <calloc@plt+0x1b9b>
mov    %ebp,(%esp)
call   80491b0 <__strdup@plt>
mov    %eax,(%esp)
mov    %eax,%edi
mov    %eax,0x2c(%esp)
call   8049130 <strlen@plt>
lea    0x1(%eax),%edx
jmp    804aeb5 <calloc@plt+0x1b75>
movl   $0x804df20,0xc(%esp)
movl   $0x1aa,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d888,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfc0,0xc(%esp)
movl   $0x1dc,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d830,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfc0,0xc(%esp)
movl   $0x1db,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d7fc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfc0,0xc(%esp)
movl   $0x1e2,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d60a,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfc0,0xc(%esp)
movl   $0x1df,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5ee,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804df20,0xc(%esp)
movl   $0x1a1,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d868,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dfc0,0xc(%esp)
movl   $0x1ed,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5d2,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804df89,0xc(%esp)
movl   $0x1ca,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d8b4,(%esp)
call   8049320 <__assert_fail@plt>
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b0f2 <calloc@plt+0x1db2>
mov    %ebx,%eax
call   804ac60 <calloc@plt+0x1920>
mov    %ebx,%eax
call   804ad20 <calloc@plt+0x19e0>
mov    0x18(%ebx),%eax
test   %eax,%eax
je     804b0ed <calloc@plt+0x1dad>
mov    %ebx,0x4(%esp)
mov    0x1c(%ebx),%edx
mov    %edx,(%esp)
call   *%eax
add    $0x18,%esp
pop    %ebx
ret
movl   $0x804da40,0xc(%esp)
movl   $0x35b,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b1a6 <calloc@plt+0x1e66>
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804b18b <calloc@plt+0x1e4b>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804da60,0xc(%esp)
movl   $0x804d5a8,0x8(%esp)
movl   $0x804d8f4,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
movl   $0x0,(%ebx)
movl   $0x0,0x4(%ebx)
movl   $0x0,0x8(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0x804daa0,0xc(%esp)
movl   $0x351,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x18,%esp
movl   $0x24,0x4(%esp)
movl   $0x1,(%esp)
call   8049340 <calloc@plt>
movl   $0x0,0x4(%eax)
mov    %eax,%ebx
movl   $0x0,0x8(%eax)
call   8049210 <ply_list_new@plt>
mov    %eax,0xc(%ebx)
call   8049210 <ply_list_new@plt>
movl   $0x0,(%ebx)
andb   $0xfe,0x20(%ebx)
movl   $0x0,0x18(%ebx)
movl   $0x0,0x1c(%ebx)
mov    %eax,0x10(%ebx)
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b270 <calloc@plt+0x1f30>
mov    %ebx,%eax
call   804ac60 <calloc@plt+0x1920>
mov    %ebx,%eax
call   804ad20 <calloc@plt+0x19e0>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   80492c0 <ply_list_free@plt>
mov    0x10(%ebx),%eax
mov    %eax,(%esp)
call   80492c0 <ply_list_free@plt>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048fc0 <free@plt>
lea    0x0(%esi),%esi
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b49c <calloc@plt+0x215c>
testb  $0x1,0x20(%ebx)
jne    804b478 <calloc@plt+0x2138>
mov    0x18(%ebx),%edx
test   %edx,%edx
jne    804b454 <calloc@plt+0x2114>
mov    0x1c(%ebx),%eax
test   %eax,%eax
jne    804b430 <calloc@plt+0x20f0>
movl   $0x2,0x4(%esp)
movl   $0x804d648,(%esp)
call   8049220 <ply_connect_to_unix_socket@plt>
test   %eax,%eax
mov    %eax,0x14(%ebx)
js     804b2f0 <calloc@plt+0x1fb0>
mov    0x24(%esp),%eax
orb    $0x1,0x20(%ebx)
mov    %eax,0x18(%ebx)
mov    0x28(%esp),%eax
mov    %eax,0x1c(%ebx)
mov    $0x1,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804b3e8 <calloc@plt+0x20a8>
mov    (%esi),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804b3a0 <calloc@plt+0x2060>
movl   $0x1,0x4(%esp)
movl   $0x804d663,(%esp)
call   8049220 <ply_connect_to_unix_socket@plt>
test   %eax,%eax
mov    %eax,0x14(%ebx)
jns    804b2cd <calloc@plt+0x1f8d>
mov    (%esi),%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804b2e4 <calloc@plt+0x1fa4>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804e023,0xc(%esp)
movl   $0x804d5a8,0x8(%esp)
movl   $0x804da00,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
xor    %eax,%eax
mov    %ebx,(%esi)
jmp    804b2e4 <calloc@plt+0x1fa4>
lea    0x0(%esi,%eiz,1),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804e023,0xc(%esp)
movl   $0x804d5a8,0x8(%esp)
movl   $0x804d9c4,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    804b321 <calloc@plt+0x1fe1>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804e023,0xc(%esp)
movl   $0x804d5a8,0x8(%esp)
movl   $0x804d980,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    804b310 <calloc@plt+0x1fd0>
movl   $0x804e03b,0xc(%esp)
movl   $0xb4,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d94c,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804e03b,0xc(%esp)
movl   $0xb3,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d920,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804e03b,0xc(%esp)
movl   $0xb2,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d632,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804e03b,0xc(%esp)
movl   $0xb1,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804b4f4 <calloc@plt+0x21b4>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804d676,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804e007,0xc(%esp)
movl   $0x227,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b558 <calloc@plt+0x2218>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d678,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dee5,0xc(%esp)
movl   $0x234,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b5b8 <calloc@plt+0x2278>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d67a,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dec9,0xc(%esp)
movl   $0x241,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b618 <calloc@plt+0x22d8>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d67c,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804deab,0xc(%esp)
movl   $0x24e,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b67c <calloc@plt+0x233c>
test   %ecx,%ecx
je     804b6a0 <calloc@plt+0x2360>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d696,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804de80,0xc(%esp)
movl   $0x25b,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804de80,0xc(%esp)
movl   $0x25c,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d67e,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b70c <calloc@plt+0x23cc>
test   %ecx,%ecx
je     804b730 <calloc@plt+0x23f0>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6af,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804de40,0xc(%esp)
movl   $0x269,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804de40,0xc(%esp)
movl   $0x26a,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d698,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b79c <calloc@plt+0x245c>
test   %ecx,%ecx
je     804b7c0 <calloc@plt+0x2480>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6b1,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804de00,0xc(%esp)
movl   $0x277,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804de00,0xc(%esp)
movl   $0x278,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d698,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804b824 <calloc@plt+0x24e4>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804d6b3,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804ddc0,0xc(%esp)
movl   $0x284,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b888 <calloc@plt+0x2548>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6b5,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dd80,0xc(%esp)
movl   $0x293,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804b8e4 <calloc@plt+0x25a4>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804e0d7,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dd40,0xc(%esp)
movl   $0x2a0,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b948 <calloc@plt+0x2608>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6b7,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dd00,0xc(%esp)
movl   $0x2ae,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804b9a8 <calloc@plt+0x2668>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6b9,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dcc0,0xc(%esp)
movl   $0x2bc,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ebx
test   %eax,%eax
mov    0x30(%esp),%esi
je     804ba08 <calloc@plt+0x26c8>
mov    %esi,0x28(%esp)
mov    %ebx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x14,%esp
mov    $0x804d6bb,%edx
pop    %ebx
pop    %esi
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dc80,0xc(%esp)
movl   $0x2ca,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804ba64 <calloc@plt+0x2724>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804d6bd,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dc40,0xc(%esp)
movl   $0x2d7,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804bac4 <calloc@plt+0x2784>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804d6bf,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dc00,0xc(%esp)
movl   $0x2e3,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804bb24 <calloc@plt+0x27e4>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804d6c1,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804dbc0,0xc(%esp)
movl   $0x2ef,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%ebx
test   %eax,%eax
je     804bb84 <calloc@plt+0x2844>
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
xor    %ecx,%ecx
mov    %edx,0x20(%esp)
add    $0x18,%esp
mov    $0x804e449,%edx
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
movl   $0x804db80,0xc(%esp)
movl   $0x2fb,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x2c,%esp
xor    %ecx,%ecx
mov    0x30(%esp),%eax
mov    0x34(%esp),%edx
mov    %cx,0x1e(%esp)
test   %eax,%eax
je     804bbf3 <calloc@plt+0x28b3>
mov    %dl,0x1e(%esp)
mov    0x40(%esp),%edx
lea    0x1e(%esp),%ecx
mov    %edx,0x8(%esp)
mov    0x3c(%esp),%edx
mov    %edx,0x4(%esp)
mov    0x38(%esp),%edx
mov    %edx,(%esp)
mov    $0x804d6c3,%edx
call   804a5e0 <calloc@plt+0x12a0>
add    $0x2c,%esp
ret
movl   $0x804db40,0xc(%esp)
movl   $0x30a,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x8(%esp),%eax
mov    %edx,0x8(%esp)
mov    $0x804d6c5,%edx
mov    %ecx,0xc(%esp)
xor    %ecx,%ecx
mov    %ebx,0x10(%esp)
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
lea    0x0(%esi),%esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x8(%esp),%eax
mov    %edx,0x8(%esp)
mov    $0x804d6c7,%edx
mov    %ecx,0xc(%esp)
xor    %ecx,%ecx
mov    %ebx,0x10(%esp)
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
lea    0x0(%esi),%esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x8(%esp),%eax
mov    %edx,0x8(%esp)
mov    $0x804d6c9,%edx
mov    %ecx,0xc(%esp)
xor    %ecx,%ecx
mov    %ebx,0x10(%esp)
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
lea    0x0(%esi),%esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x8(%esp),%eax
mov    %edx,0x8(%esp)
mov    $0x804d6cb,%edx
mov    %ecx,0xc(%esp)
xor    %ecx,%ecx
mov    %ebx,0x10(%esp)
pop    %ebx
jmp    804a5e0 <calloc@plt+0x12a0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
jne    804bcfa <calloc@plt+0x29ba>
jmp    804bd0e <calloc@plt+0x29ce>
xchg   %ax,%ax
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049010 <ply_event_loop_process_pending_events@plt>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8048f80 <ply_list_get_length@plt>
test   %eax,%eax
jg     804bcf0 <calloc@plt+0x29b0>
add    $0x18,%esp
pop    %ebx
ret
movl   $0x804db20,0xc(%esp)
movl   $0x33c,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804bd67 <calloc@plt+0x2a27>
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   8049300 <close@plt>
movl   $0xffffffff,0x14(%ebx)
andb   $0xfe,0x20(%ebx)
add    $0x18,%esp
pop    %ebx
ret
movl   $0x804db05,0xc(%esp)
movl   $0x347,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
test   %ebx,%ebx
je     804bdfa <calloc@plt+0x2aba>
test   %esi,%esi
je     804be42 <calloc@plt+0x2b02>
mov    (%ebx),%eax
test   %eax,%eax
jne    804be1e <calloc@plt+0x2ade>
mov    0x14(%ebx),%eax
mov    %esi,(%ebx)
test   %eax,%eax
js     804bde0 <calloc@plt+0x2aa0>
mov    %ebx,0x14(%esp)
movl   $0x804b0c0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8049260 <ply_event_loop_watch_fd@plt>
mov    %ebx,0x8(%esp)
mov    %esi,(%esp)
movl   $0x804b120,0x4(%esp)
call   8049270 <ply_event_loop_watch_for_exit@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x804dae0,0xc(%esp)
movl   $0x367,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5bc,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dae0,0xc(%esp)
movl   $0x369,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d6cd,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804dae0,0xc(%esp)
movl   $0x368,0x8(%esp)
movl   $0x804d5a8,0x4(%esp)
movl   $0x804d5da,(%esp)
call   8049320 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804ba30 <calloc@plt+0x26f0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804ba90 <calloc@plt+0x2750>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804bcb0 <calloc@plt+0x2970>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%ebx
lea    0x1f(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x804e0c7,0x4(%esp)
mov    0x8(%ebx),%eax
movb   $0x0,0x1f(%esp)
mov    %eax,(%esp)
call   8048f70 <ply_command_parser_get_options@plt>
cmpb   $0x0,0x1f(%esp)
je     804bff0 <calloc@plt+0x2cb0>
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%ebp
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804bfd9 <calloc@plt+0x2c99>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804edfa,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e0d9,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%esi)
mov    %edi,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
call   8049240 <ply_logger_get_error_default@plt>
mov    $0x2,%di
movl   $0x804e4f4,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
jmp    804bf7c <calloc@plt+0x2c3c>
xchg   %ax,%ax
mov    0x4(%esp),%eax
movl   $0x1,0x8(%esp)
mov    (%eax),%eax
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8049160 <ply_event_loop_exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movl   $0x1,0x8(%esp)
mov    (%eax),%eax
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8049160 <ply_event_loop_exit@plt>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804bc50 <calloc@plt+0x2910>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x38,%esp
lea    0x2f(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e0f3,0x8(%esp)
movb   $0x0,0x2f(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
movzbl 0x2f(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804bbb0 <calloc@plt+0x2870>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x38,%esp
lea    0x2c(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e101,0x8(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x2c(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b9d0 <calloc@plt+0x2690>
add    $0x38,%esp
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x38,%esp
lea    0x2c(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e106,0x8(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804c1c6 <calloc@plt+0x2e86>
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b520 <calloc@plt+0x21e0>
add    $0x38,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804bb50 <calloc@plt+0x2810>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804baf0 <calloc@plt+0x27b0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804bc20 <calloc@plt+0x28e0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x38,%esp
lea    0x28(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0x14(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x804e101,0x10(%esp)
movl   $0x804e10d,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
movl   $0xc,0x4(%esp)
movl   $0x1,(%esp)
call   8049340 <calloc@plt>
mov    0x28(%esp),%edx
mov    0x2c(%esp),%ecx
mov    %ebx,(%eax)
mov    %edx,0x8(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x10(%esp)
movl   $0x804c010,0xc(%esp)
movl   $0x804d050,0x8(%esp)
mov    %edx,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b970 <calloc@plt+0x2630>
add    $0x38,%esp
pop    %ebx
ret
nop
push   %ebx
sub    $0x38,%esp
lea    0x2c(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e3a6,0x8(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804c372 <calloc@plt+0x3032>
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b760 <calloc@plt+0x2420>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <free@plt>
add    $0x38,%esp
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x38,%esp
lea    0x2c(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e3a6,0x8(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804c3f2 <calloc@plt+0x30b2>
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b6d0 <calloc@plt+0x2390>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <free@plt>
add    $0x38,%esp
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x30(%esp),%eax
movl   $0x804c030,0xc(%esp)
movl   $0x804d420,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%eax),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b910 <calloc@plt+0x25d0>
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x44,%esp
lea    0x37(%esp),%eax
mov    0x50(%esp),%ebx
mov    %eax,0x1c(%esp)
lea    0x38(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x804e115,0x18(%esp)
movl   $0x804e129,0x10(%esp)
movl   $0x804e10d,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movb   $0x0,0x37(%esp)
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
movl   $0x10,0x4(%esp)
movl   $0x1,(%esp)
call   8049340 <calloc@plt>
mov    0x3c(%esp),%edx
movzbl 0x37(%esp),%ecx
mov    0x38(%esp),%esi
xor    $0x1,%ecx
mov    %edx,0x4(%eax)
movzbl 0xc(%eax),%edx
and    $0x1,%ecx
mov    %ebx,(%eax)
mov    %esi,0x8(%eax)
and    $0xfffffffe,%edx
or     %ecx,%edx
mov    %dl,0xc(%eax)
and    $0x1,%edx
jne    804c518 <calloc@plt+0x31d8>
mov    %esi,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x804c030,0xc(%esp)
movl   $0x804d420,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b910 <calloc@plt+0x25d0>
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x804c030,0x8(%esp)
movl   $0x804c400,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804bc20 <calloc@plt+0x28e0>
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
call   80491c0 <__errno_location@plt>
mov    0x40(%esp),%ebx
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804c598 <calloc@plt+0x3258>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804c5e9 <calloc@plt+0x32a9>
mov    0x44(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x804cd60,0x8(%esp)
movl   $0x804d0c0,0x4(%esp)
mov    %eax,(%esp)
call   804b8b0 <calloc@plt+0x2570>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0x4(%ebx),%ebp
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804edca,0xc(%esp)
mov    %ebp,0x10(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e530,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0x4(%ebx),%eax
mov    %edi,(%esi)
test   %eax,%eax
jne    804c56c <calloc@plt+0x322c>
mov    %ebx,0x10(%esp)
movl   $0x804cd60,0xc(%esp)
movl   $0x804d2c0,0x8(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   804b850 <calloc@plt+0x2510>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x40,%esp
movl   $0x0,0x34(%esp)
mov    0x50(%esp),%ebx
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movb   $0x0,0x33(%esp)
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804c758 <calloc@plt+0x3418>
lea    0x33(%esp),%eax
mov    %eax,0x24(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
movl   $0x0,0x28(%esp)
movl   $0x804e115,0x20(%esp)
movl   $0x804e130,0x18(%esp)
movl   $0x804e129,0x10(%esp)
movl   $0x804e10d,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x3c(%esp),%eax
test   %eax,%eax
jle    804c7a0 <calloc@plt+0x3460>
movl   $0x14,0x4(%esp)
movl   $0x1,(%esp)
call   8049340 <calloc@plt>
mov    0x38(%esp),%edx
movzbl 0x33(%esp),%ecx
xor    $0x1,%ecx
mov    %edx,0x4(%eax)
mov    0x34(%esp),%edx
and    $0x1,%ecx
mov    %ebx,(%eax)
mov    %edx,0x8(%eax)
mov    0x3c(%esp),%edx
mov    %edx,0xc(%eax)
movzbl 0x10(%eax),%edx
and    $0xfffffffe,%edx
or     %ecx,%edx
mov    %dl,0x10(%eax)
and    $0x1,%edx
jne    804c730 <calloc@plt+0x33f0>
mov    0x4(%ebx),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804c540 <calloc@plt+0x3200>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
movl   $0x804cd60,0x8(%esp)
movl   $0x804c540,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804bc20 <calloc@plt+0x28e0>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ede6,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e568,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    804c665 <calloc@plt+0x3325>
movl   $0x7fffffff,0x3c(%esp)
jmp    804c6cc <calloc@plt+0x338c>
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x34,%esp
lea    0x28(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804e120,0x8(%esp)
movl   $0x0,0x28(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x28(%esp),%esi
cmp    $0x64,%esi
jbe    804c828 <calloc@plt+0x34e8>
call   8049240 <ply_logger_get_error_default@plt>
mov    %esi,0x8(%esp)
movl   $0x804e588,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
movl   $0x1,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
lea    0x2c(%esp),%eax
mov    %esi,0xc(%esp)
movl   $0x804e140,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x2c(%esp)
call   80490e0 <__asprintf_chk@plt>
mov    0x2c(%esp),%eax
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b5e0 <calloc@plt+0x22a0>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048fc0 <free@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
lea    0x3f(%esp),%eax
mov    0x50(%esp),%ebx
mov    %eax,0x1c(%esp)
lea    0x3e(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x3d(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
movl   $0x0,0x20(%esp)
movl   $0x804e2fe,0x18(%esp)
movl   $0x804e143,0x10(%esp)
movl   $0x804e14c,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
movb   $0x0,0x3d(%esp)
movb   $0x0,0x3e(%esp)
movb   $0x0,0x3f(%esp)
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
cmpb   $0x0,0x3d(%esp)
jne    804c940 <calloc@plt+0x3600>
cmpb   $0x0,0x3e(%esp)
jne    804c970 <calloc@plt+0x3630>
cmpb   $0x0,0x3f(%esp)
jne    804c910 <calloc@plt+0x35d0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
movl   $0x804e2fe,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b580 <calloc@plt+0x2240>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
movl   $0x804e14c,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b580 <calloc@plt+0x2240>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
movl   $0x804e143,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b580 <calloc@plt+0x2240>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x38,%esp
lea    0x2b(%esp),%eax
mov    0x40(%esp),%ebx
mov    %eax,0x14(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x804e154,0x10(%esp)
movl   $0x804e15f,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
movl   $0x0,0x2c(%esp)
movb   $0x0,0x2b(%esp)
mov    %eax,(%esp)
call   80491e0 <ply_command_parser_get_command_options@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     804ca1b <calloc@plt+0x36db>
mov    %ebx,0x10(%esp)
movl   $0x804bf00,0xc(%esp)
movl   $0x804bf20,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b640 <calloc@plt+0x2300>
cmpb   $0x0,0x2b(%esp)
je     804ca41 <calloc@plt+0x3701>
mov    %ebx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b7f0 <calloc@plt+0x24b0>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0x4c,%esp
mov    %eax,0x20(%esp)
call   80491c0 <__errno_location@plt>
mov    %eax,%esi
mov    (%eax),%edi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804cb20 <calloc@plt+0x37e0>
test   %ebx,%ebx
je     804ca99 <calloc@plt+0x3759>
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   80492b0 <ply_open_unidirectional_pipe@plt>
test   %al,%al
je     804cb10 <calloc@plt+0x37d0>
call   8049250 <fork@plt>
test   %eax,%eax
mov    %eax,%edi
js     804cb10 <calloc@plt+0x37d0>
je     804cb70 <calloc@plt+0x3830>
test   %ebx,%ebx
mov    $0x1,%esi
je     804caee <calloc@plt+0x37ae>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8049300 <close@plt>
mov    %ebx,(%esp)
call   8049130 <strlen@plt>
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049150 <write@plt>
not    %eax
shr    $0x1f,%eax
mov    %eax,%esi
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049300 <close@plt>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
movl   $0x0,0x8(%esp)
call   80490b0 <waitpid@plt>
add    $0x4c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
mov    0x20(%esp),%ecx
movl   $0x804ee15,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e5b0,0x4(%esp)
mov    %ecx,0x10(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %edi,(%esi)
jmp    804ca7d <calloc@plt+0x373d>
mov    0x20(%esp),%eax
movzbl (%eax),%edx
test   %dl,%dl
je     804ccf4 <calloc@plt+0x39b4>
mov    %edx,%ecx
xor    %edi,%edi
jmp    804cb92 <calloc@plt+0x3852>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%ecx
test   %cl,%cl
je     804cba4 <calloc@plt+0x3864>
cmp    $0x20,%cl
jne    804cb88 <calloc@plt+0x3848>
xor    %ecx,%ecx
cmpb   $0x20,0x1(%eax)
setne  %cl
add    %ecx,%edi
jmp    804cb88 <calloc@plt+0x3848>
lea    0x2(%edi),%eax
movl   $0x4,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   8049340 <calloc@plt>
mov    0x2c(%esp),%edx
mov    %esi,0x28(%esp)
mov    %eax,0x24(%esp)
mov    0x20(%esp),%eax
mov    %eax,%ecx
mov    %eax,%ebp
mov    %ecx,%esi
xor    %eax,%eax
jmp    804cbf6 <calloc@plt+0x38b6>
lea    0x0(%esi),%esi
cmpb   $0x20,(%ecx)
je     804cd3b <calloc@plt+0x39fb>
cmp    %edi,%eax
jg     804cd17 <calloc@plt+0x39d7>
movzbl 0x1(%ebp),%edx
lea    0x1(%ebp),%esi
test   %dl,%dl
je     804cc39 <calloc@plt+0x38f9>
mov    %esi,%ebp
cmp    $0x20,%dl
jne    804cbd8 <calloc@plt+0x3898>
lea    0x1(%eax),%edx
mov    %edx,0x20(%esp)
mov    0x24(%esp),%edx
mov    %ecx,(%esp)
lea    (%edx,%eax,4),%edx
mov    %esi,%eax
sub    %ecx,%eax
mov    %eax,0x4(%esp)
mov    %edx,0x2c(%esp)
call   8049080 <__strndup@plt>
mov    0x2c(%esp),%edx
mov    %eax,(%edx)
cmpb   $0x20,(%esi)
jne    804cc31 <calloc@plt+0x38f1>
add    $0x1,%ebp
cmpb   $0x20,0x0(%ebp)
je     804cc28 <calloc@plt+0x38e8>
mov    0x20(%esp),%eax
mov    %ebp,%ecx
jmp    804cbe1 <calloc@plt+0x38a1>
mov    %esi,0x20(%esp)
mov    0x28(%esp),%esi
mov    0x24(%esp),%edx
mov    %ecx,(%esp)
lea    (%edx,%eax,4),%edi
mov    0x20(%esp),%eax
sub    %ecx,%eax
mov    %eax,0x4(%esp)
call   8049080 <__strndup@plt>
test   %ebx,%ebx
mov    %eax,(%edi)
je     804cc80 <calloc@plt+0x3940>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   8049300 <close@plt>
mov    0x3c(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f30 <dup2@plt>
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049070 <execvp@plt>
mov    (%esi),%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804cce8 <calloc@plt+0x39a8>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee15,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e5d4,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%esi)
movl   $0x7f,(%esp)
call   8048f90 <_exit@plt>
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   8049340 <calloc@plt>
mov    0x20(%esp),%ecx
mov    %eax,0x24(%esp)
xor    %eax,%eax
jmp    804cc41 <calloc@plt+0x3901>
movl   $0x804ee08,0xc(%esp)
movl   $0x72,0x8(%esp)
movl   $0x804e0cc,0x4(%esp)
movl   $0x804e17c,(%esp)
call   8049320 <__assert_fail@plt>
movl   $0x804ee08,0xc(%esp)
movl   $0x71,0x8(%esp)
movl   $0x804e0cc,0x4(%esp)
movl   $0x804e16c,(%esp)
call   8049320 <__assert_fail@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
call   80491c0 <__errno_location@plt>
mov    0x50(%esp),%ebx
mov    %eax,%edi
mov    (%eax),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804ced0 <calloc@plt+0x3b90>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     804cf1e <calloc@plt+0x3bde>
mov    (%edi),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804cf40 <calloc@plt+0x3c00>
mov    0xc(%ebx),%eax
movl   $0x7f,0x2c(%esp)
test   %eax,%eax
jg     804cdd1 <calloc@plt+0x3a91>
jmp    804cea7 <calloc@plt+0x3b67>
nop
mov    0xc(%ebx),%eax
lea    -0x1(%eax),%edx
test   %edx,%edx
mov    %edx,0xc(%ebx)
jle    804ce5f <calloc@plt+0x3b1f>
mov    0x4(%ebx),%eax
xor    %edx,%edx
lea    0x2c(%esp),%ecx
call   804ca50 <calloc@plt+0x3710>
test   %al,%al
mov    %eax,%esi
je     804cdf8 <calloc@plt+0x3ab8>
mov    0x2c(%esp),%eax
test   $0x7f,%al
jne    804cdf8 <calloc@plt+0x3ab8>
movzbl %ah,%eax
test   %eax,%eax
je     804cf88 <calloc@plt+0x3c48>
mov    (%edi),%ebp
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804cdc0 <calloc@plt+0x3a80>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee28,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e196,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
mov    0xc(%ebx),%eax
lea    -0x1(%eax),%edx
test   %edx,%edx
mov    %edx,0xc(%ebx)
jg     804cdd1 <calloc@plt+0x3a91>
mov    %esi,%eax
test   %al,%al
je     804cec8 <calloc@plt+0x3b88>
mov    0x2c(%esp),%eax
mov    %eax,%edx
movzbl %ah,%eax
and    $0x7f,%edx
add    $0x1,%edx
cmp    $0x1,%dl
jle    804ceb0 <calloc@plt+0x3b70>
mov    (%edi),%ebx
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804cfe7 <calloc@plt+0x3ca7>
mov    0x2c(%esp),%eax
and    $0x7f,%eax
mov    %eax,(%esp)
call   8048f20 <raise@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
mov    (%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzbl 0x2d(%esp),%eax
jmp    804ceb0 <calloc@plt+0x3b70>
nop
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %esi,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee28,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e600,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0x4(%ebx),%edx
mov    %esi,(%edi)
test   %edx,%edx
jne    804cd94 <calloc@plt+0x3a54>
movl   $0x1,0x4(%esp)
mov    (%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %esi,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee28,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e628,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %esi,(%edi)
jmp    804cdab <calloc@plt+0x3a6b>
mov    (%edi),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804ce65 <calloc@plt+0x3b25>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %esi,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ee28,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e668,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %esi,(%edi)
jmp    804ce65 <calloc@plt+0x3b25>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    0x2c(%esp),%eax
mov    %ebx,(%edi)
and    $0x7f,%eax
mov    %eax,(%esp)
call   8049090 <strsignal@plt>
mov    %eax,%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %esi,0x10(%esp)
movl   $0x804ee28,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e690,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebx,(%edi)
jmp    804ce90 <calloc@plt+0x3b50>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%edx
mov    0x20(%esp),%ebx
test   %edx,%edx
je     804d0b0 <calloc@plt+0x3d70>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804d088 <calloc@plt+0x3d48>
xor    %ecx,%ecx
call   804ca50 <calloc@plt+0x3710>
movl   $0x0,0x24(%esp)
mov    (%ebx),%eax
mov    (%eax),%eax
mov    %eax,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049160 <ply_event_loop_exit@plt>
nop
mov    %edx,(%esp)
mov    %edx,0xc(%esp)
call   8049130 <strlen@plt>
mov    0xc(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
call   8049150 <write@plt>
jmp    804d06e <calloc@plt+0x3d2e>
xchg   %ax,%ax
movl   $0x1,0x24(%esp)
jmp    804d076 <calloc@plt+0x3d36>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebx
mov    0x4(%esi),%eax
test   %eax,%eax
je     804d294 <calloc@plt+0x3f54>
call   80491c0 <__errno_location@plt>
mov    %eax,%edi
mov    (%eax),%ebp
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804d188 <calloc@plt+0x3e48>
test   %ebx,%ebx
mov    (%edi),%ebp
je     804d1d3 <calloc@plt+0x3e93>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
jne    804d230 <calloc@plt+0x3ef0>
mov    (%ebx),%edx
test   %edx,%edx
je     804d155 <calloc@plt+0x3e15>
add    $0x4,%ebx
mov    0x4(%esi),%eax
lea    0x2c(%esp),%ecx
movl   $0x7f,0x2c(%esp)
call   804ca50 <calloc@plt+0x3710>
test   %al,%al
je     804d14b <calloc@plt+0x3e0b>
mov    0x2c(%esp),%eax
test   $0x7f,%al
jne    804d14b <calloc@plt+0x3e0b>
movzbl %ah,%eax
test   %eax,%eax
je     804d278 <calloc@plt+0x3f38>
add    $0x4,%ebx
mov    -0x4(%ebx),%edx
test   %edx,%edx
jne    804d120 <calloc@plt+0x3de0>
mov    %esi,0x10(%esp)
movl   $0x804cd60,0xc(%esp)
movl   $0x804d2c0,0x8(%esp)
mov    0x8(%esi),%eax
mov    %eax,0x4(%esp)
mov    (%esi),%eax
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804b850 <calloc@plt+0x2510>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed90,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e6e4,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
test   %ebx,%ebx
mov    %ebp,(%edi)
jne    804d102 <calloc@plt+0x3dc2>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8049120 <ply_logger_is_tracing_enabled@plt>
test   %al,%al
je     804d155 <calloc@plt+0x3e15>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed90,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e754,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
jmp    804d155 <calloc@plt+0x3e15>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
call   8049240 <ply_logger_get_error_default@plt>
movl   $0x804ed90,0xc(%esp)
movl   $0x804e0cc,0x8(%esp)
movl   $0x804e710,0x4(%esp)
mov    %eax,(%esp)
call   8049190 <ply_logger_inject_with_non_literal_format_string@plt>
call   8049240 <ply_logger_get_error_default@plt>
mov    %eax,(%esp)
call   8048fd0 <ply_logger_flush@plt>
mov    %ebp,(%edi)
jmp    804d117 <calloc@plt+0x3dd7>
movl   $0x0,0x4(%esp)
mov    (%esi),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x804edad,0xc(%esp)
movl   $0x18a,0x8(%esp)
movl   $0x804e0cc,0x4(%esp)
movl   $0x804e6bc,(%esp)
call   8049320 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x38,%esp
mov    0x44(%esp),%edx
mov    0x40(%esp),%ebx
movl   $0x7f,0x2c(%esp)
test   %edx,%edx
je     804d340 <calloc@plt+0x4000>
cmpb   $0x3,(%edx)
je     804d3dc <calloc@plt+0x409c>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804d3b0 <calloc@plt+0x4070>
lea    0x2c(%esp),%ecx
call   804ca50 <calloc@plt+0x3710>
mov    0x2c(%esp),%edx
test   %al,%al
je     804d358 <calloc@plt+0x4018>
test   $0x7f,%dl
je     804d400 <calloc@plt+0x40c0>
mov    0xc(%ebx),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0xc(%ebx)
jle    804d358 <calloc@plt+0x4018>
mov    %ebx,0x10(%esp)
movl   $0x804cd60,0xc(%esp)
movl   $0x804d2c0,0x8(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x4(%esp)
mov    (%ebx),%eax
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   804b850 <calloc@plt+0x2510>
jmp    804d3ab <calloc@plt+0x406b>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    0x4(%eax),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804cd60 <calloc@plt+0x3a20>
mov    0x2c(%esp),%edx
lea    0x0(%esi),%esi
mov    %edx,%eax
and    $0x7f,%eax
add    $0x1,%eax
cmp    $0x1,%al
jle    804d410 <calloc@plt+0x40d0>
and    $0x7f,%edx
mov    %edx,(%esp)
call   8048f20 <raise@plt>
movzbl 0x2d(%esp),%edx
testb  $0x1,0x10(%ebx)
je     804d3e4 <calloc@plt+0x40a4>
test   %edx,%edx
mov    $0x804bf00,%eax
mov    (%ebx),%ecx
mov    $0x804bf20,%edx
cmove  %edx,%eax
mov    %eax,0x4(%esp)
mov    0x48(%esp),%eax
mov    %ecx,0xc(%esp)
movl   $0x804bf00,0x8(%esp)
mov    %eax,(%esp)
call   804bc50 <calloc@plt+0x2910>
add    $0x38,%esp
pop    %ebx
ret
mov    %edx,(%esp)
mov    %edx,0x1c(%esp)
call   8049130 <strlen@plt>
mov    0x1c(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
call   8049150 <write@plt>
movl   $0x0,0x2c(%esp)
xor    %edx,%edx
testb  $0x1,0x10(%ebx)
jne    804d37e <calloc@plt+0x403e>
mov    %edx,0x4(%esp)
mov    (%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   8049160 <ply_event_loop_exit@plt>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
movzbl %dh,%eax
test   %eax,%eax
je     804d358 <calloc@plt+0x4018>
jmp    804d306 <calloc@plt+0x3fc6>
movzbl %dh,%edx
jmp    804d378 <calloc@plt+0x4038>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x34(%esp),%edx
mov    0x30(%esp),%ebx
mov    0x38(%esp),%esi
test   %edx,%edx
je     804d490 <calloc@plt+0x4150>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804d4a0 <calloc@plt+0x4160>
xor    %ecx,%ecx
call   804ca50 <calloc@plt+0x3710>
testb  $0x1,0xc(%ebx)
je     804d470 <calloc@plt+0x4130>
mov    (%ebx),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf20,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bc50 <calloc@plt+0x2910>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x0,0x34(%esp)
mov    (%ebx),%eax
mov    (%eax),%eax
mov    %eax,0x30(%esp)
add    $0x24,%esp
pop    %ebx
pop    %esi
jmp    8049160 <ply_event_loop_exit@plt>
lea    0x0(%esi),%esi
testb  $0x1,0xc(%ebx)
jne    804d4d0 <calloc@plt+0x4190>
movl   $0x1,0x34(%esp)
jmp    804d478 <calloc@plt+0x4138>
mov    %edx,(%esp)
mov    %edx,0x1c(%esp)
call   8049130 <strlen@plt>
mov    0x1c(%esp),%edx
movl   $0x1,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
call   8049150 <write@plt>
jmp    804d443 <calloc@plt+0x4103>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
movl   $0x804bf00,0x8(%esp)
movl   $0x804bf00,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bc50 <calloc@plt+0x2910>
jmp    804d467 <calloc@plt+0x4127>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a510 <calloc@plt+0x11d0>
add    $0x3af5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xfc(%ebx),%esi
call   8048eec <raise@plt-0x34>
lea    -0x100(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804d559 <calloc@plt+0x4219>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x100(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804d538 <calloc@plt+0x41f8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804d570 <calloc@plt+0x4230>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   804a510 <calloc@plt+0x11d0>
add    $0x3a83,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
cs
das
jo     804d618 <_IO_stdin_used+0x74>
jns    804d5db <_IO_stdin_used+0x37>
bound  %ebp,0x6f(%edi)
je     804d5e0 <_IO_stdin_used+0x3c>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d5e8 <_IO_stdin_used+0x44>
arpl   %ax,(%eax)
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d5e3 <_IO_stdin_used+0x3f>
and    %edi,0x76282820
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d606 <_IO_stdin_used+0x62>
ds
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804d5ff <_IO_stdin_used+0x5b>
and    %edi,0x76282820
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
jb     804d655 <_IO_stdin_used+0xb1>
jno    804d667 <_IO_stdin_used+0xc3>
gs
jae    804d669 <_IO_stdin_used+0xc5>
pop    %edi
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
fs and %ah,%fs:%gs:(%ecx)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
jb     804d671 <_IO_stdin_used+0xcd>
jno    804d683 <_IO_stdin_used+0xdf>
gs
jae    804d685 <_IO_stdin_used+0xe1>
and    %ah,(%ecx)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
jae    804d68c <_IO_stdin_used+0xe8>
jp     804d68a <_IO_stdin_used+0xe6>
and    %bh,(%esi)
and    %dh,(%eax)
add    %ah,0x63250273
and    $0x63210073,%eax
insb   (%dx),%es:(%edi)
imul   $0x693e2d74,0x6e(%ebp),%esp
jae    804d69d <_IO_stdin_used+0xf9>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
add    %ch,(%edi)
outsl  %ds:(%esi),(%dx)
jb     804d6b3 <_IO_stdin_used+0x10f>
das
data16
jb     804d6b5 <_IO_stdin_used+0x111>
gs
fs
gs
jae    804d6c0 <_IO_stdin_used+0x11c>
je     804d6c6 <_IO_stdin_used+0x122>
jo     804d688 <_IO_stdin_used+0xe4>
jo     804d6c7 <_IO_stdin_used+0x123>
jns    804d6ca <_IO_stdin_used+0x126>
outsl  %ds:(%esi),(%dx)
jne    804d6d4 <_IO_stdin_used+0x130>
push   $0x702f0064
insb   (%dx),%es:(%edi)
jns    804d695 <_IO_stdin_used+0xf1>
bound  %ebp,0x6f(%edi)
je     804d69a <_IO_stdin_used+0xf6>
jo     804d6e1 <_IO_stdin_used+0x13d>
outsl  %ds:(%esi),(%dx)
je     804d6e1 <_IO_stdin_used+0x13d>
arpl   %bp,0x6c(%edi)
add    %dl,0x0(%eax)
push   %ebp
add    %al,0x0(%ebx)
jne    804d67e <_IO_stdin_used+0xda>
jb     804d6ef <_IO_stdin_used+0x14b>
outsl  %ds:(%esi),(%dx)
je     804d6e2 <_IO_stdin_used+0x13e>
imul   $0x28203d21,%fs:0x20(%edx),%esi
sub    %dh,0x6f(%esi)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
push   %edx
add    %ch,0x65(%ebp)
jae    804d70f <_IO_stdin_used+0x16b>
popa
and    %ah,%gs:(%bx,%di)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
dec    %ebp
add    %ch,0x0(%ebp)
push   %ebx
add    %ch,(%edx)
add    %dl,0x0(%edi)
dec    %ebx
add    %cl,0x24(%eax,%eax,1)
add    %cl,0x0(%eax)
inc    %esp
add    %dl,0x0(%ecx)
inc    %ecx
add    %ah,0x0(%ecx)
push   %esi
add    %ah,(%ecx)
add    %ah,0x6c(%ebx)
imul   $0x6c3e2d74,0x6e(%ebp),%esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804d6fa <_IO_stdin_used+0x156>
cmp    $0x2828203d,%eax
jbe    804d750 <_IO_stdin_used+0x1ac>
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
add    %al,(%eax)
add    %dh,0x65(%edx)
jno    804d765 <_IO_stdin_used+0x1c1>
gs
jae    804d767 <_IO_stdin_used+0x1c3>
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%ecx)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
add    %dh,0x65(%edx)
jno    804d785 <_IO_stdin_used+0x1e1>
gs
jae    804d787 <_IO_stdin_used+0x1e3>
pop    %edi
popa
jb     804d77e <_IO_stdin_used+0x1da>
jne    804d786 <_IO_stdin_used+0x1e2>
outsb  %gs:(%esi),(%dx)
je     804d73d <_IO_stdin_used+0x199>
cmp    $0x2828203d,%eax
jbe    804d793 <_IO_stdin_used+0x1ef>
imul   $0x20293029,0x2a(%eax,%eiz,1),%esp
jl     804d7aa <_IO_stdin_used+0x206>
and    %dh,0x74(%ebx)
jb     804d79f <_IO_stdin_used+0x1fb>
outsb  %gs:(%esi),(%dx)
and    %ch,(%eax)
jb     804d79e <_IO_stdin_used+0x1fa>
jno    804d7b0 <_IO_stdin_used+0x20c>
gs
jae    804d7b2 <_IO_stdin_used+0x20e>
pop    %edi
popa
jb     804d7a9 <_IO_stdin_used+0x205>
jne    804d7b1 <_IO_stdin_used+0x20d>
outsb  %gs:(%esi),(%dx)
je     804d771 <_IO_stdin_used+0x1cd>
and    %bh,0x32312820(,%edi,1)
aaa
and    %ch,(%edx)
and    %dh,(%edx)
and    %ch,(%ebx)
and    %dh,(%ecx)
sub    %eax,(%eax)
add    %al,(%eax)
jo     804d7ca <_IO_stdin_used+0x226>
jns    804d7bf <_IO_stdin_used+0x21b>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804d7d7 <_IO_stdin_used+0x233>
and    %ch,(%eax)
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d7a5 <_IO_stdin_used+0x201>
jb,pt  804d7e0 <_IO_stdin_used+0x23c>
jno    804d7f2 <_IO_stdin_used+0x24e>
gs
jae    804d7f4 <_IO_stdin_used+0x250>
jae    804d7e1 <_IO_stdin_used+0x23d>
je     804d7f3 <_IO_stdin_used+0x24f>
pop    %edi
jae    804d7ec <_IO_stdin_used+0x248>
outsb  %ds:(%esi),(%dx)
sub    %esp,%fs:(%eax)
cmp    $0x30203d,%eax
jb     804d7f7 <_IO_stdin_used+0x253>
arpl   %sp,0x69(%ebp)
jbe    804d7fc <_IO_stdin_used+0x258>
and    %dh,%fs:0x6e(%ebp)
gs
js     804d80e <_IO_stdin_used+0x26a>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %dh,0x65(%edx)
jae    804d818 <_IO_stdin_used+0x274>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804d811 <_IO_stdin_used+0x26d>
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804d7d7 <_IO_stdin_used+0x233>
jae    804d82d <_IO_stdin_used+0x289>
popa
je     804d831 <_IO_stdin_used+0x28d>
jae    804d7de <_IO_stdin_used+0x23a>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%al
add    %al,(%eax)
arpl   %bp,0x75(%edi)
insb   (%dx),%es:(%edi)
and    %ch,%fs:0x6f(%esi)
je     804d7f2 <_IO_stdin_used+0x24e>
jb     804d839 <_IO_stdin_used+0x295>
popa
and    %dh,%fs:0x65(%edx)
jae    804d84b <_IO_stdin_used+0x2a7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804d844 <_IO_stdin_used+0x2a0>
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804d80a <_IO_stdin_used+0x266>
jae    804d860 <_IO_stdin_used+0x2bc>
popa
je     804d864 <_IO_stdin_used+0x2c0>
jae    804d811 <_IO_stdin_used+0x26d>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%al
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804d85f <_IO_stdin_used+0x2bb>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804d877 <_IO_stdin_used+0x2d3>
and    %ch,(%eax)
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d845 <_IO_stdin_used+0x2a1>
jb,pt  804d880 <_IO_stdin_used+0x2dc>
jno    804d892 <_IO_stdin_used+0x2ee>
gs
jae    804d894 <_IO_stdin_used+0x2f0>
jae    804d881 <_IO_stdin_used+0x2dd>
je     804d893 <_IO_stdin_used+0x2ef>
pop    %edi
jae    804d88c <_IO_stdin_used+0x2e8>
outsb  %ds:(%esi),(%dx)
sub    %esp,%fs:(%eax)
and    %edi,0x63003020
insb   (%dx),%es:(%edi)
imul   $0x643e2d74,0x6e(%ebp),%esp
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
arpl   %sp,0x6e(%ecx)
pop    %edi
je     804d8a6 <_IO_stdin_used+0x302>
imul   $0x72,0x5f(%ebp),%esp
gs
jno    804d8c1 <_IO_stdin_used+0x31d>
gs
jae    804d8c3 <_IO_stdin_used+0x31f>
pop    %edi
ja     804d8b3 <_IO_stdin_used+0x30f>
je     804d8b7 <_IO_stdin_used+0x313>
push   $0x203d2120
sub    %ch,(%eax)
jbe    804d8cc <_IO_stdin_used+0x328>
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
add    %al,(%eax)
add    %dh,0x65(%edx)
jno    804d8e1 <_IO_stdin_used+0x33d>
gs
jae    804d8e3 <_IO_stdin_used+0x33f>
sub    $0x6d6f633e,%eax
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%ecx)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
jae    804d8fe <_IO_stdin_used+0x35a>
jb     804d8f8 <_IO_stdin_used+0x354>
outsb  %gs:(%esi),(%dx)
and    %ch,(%eax)
jb     804d8f7 <_IO_stdin_used+0x353>
jno    804d909 <_IO_stdin_used+0x365>
gs
jae    804d90b <_IO_stdin_used+0x367>
sub    $0x6772613e,%eax
jne    804d90b <_IO_stdin_used+0x367>
outsb  %gs:(%esi),(%dx)
je     804d8cb <_IO_stdin_used+0x327>
and    %bh,0x32312820(,%edi,1)
aaa
and    %ch,(%edx)
and    %dh,(%edx)
and    %ch,(%ebx)
and    %dh,(%ecx)
sub    %eax,(%eax)
jo     804d922 <_IO_stdin_used+0x37e>
jns    804d917 <_IO_stdin_used+0x373>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x74(%ebx),%esi
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 804d92f <_IO_stdin_used+0x38b>
and    %ch,(%eax)
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d8fd <_IO_stdin_used+0x359>
jb,pt  804d938 <_IO_stdin_used+0x394>
jno    804d94a <_IO_stdin_used+0x3a6>
gs
jae    804d94c <_IO_stdin_used+0x3a8>
jae    804d939 <_IO_stdin_used+0x395>
ja     804d93d <_IO_stdin_used+0x399>
imul   $0x6f665f67,0x6e(%ecx,%ebp,2),%esi
jb     804d945 <_IO_stdin_used+0x3a1>
jb     804d94d <_IO_stdin_used+0x3a9>
jo     804d956 <_IO_stdin_used+0x3b2>
imul   $0x3d3d2029,0x73(%ebp),%esp
and    %dh,(%eax)
add    %bl,0x25(%ebx)
jae    804d955 <_IO_stdin_used+0x3b1>
and    %ah,0x342e3534
xor    $0x65643a73,%eax
je     804d966 <_IO_stdin_used+0x3c2>
arpl   %bp,0x69(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%bp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x76(%ebp)
outsb  %gs:(%esi),(%dx)
je     804d936 <_IO_stdin_used+0x392>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804d928 <_IO_stdin_used+0x384>
or     (%eax),%al
add    %al,(%eax)
add    %ah,0x6c(%ebx)
imul   $0x643e2d74,0x6e(%ebp),%esp
imul   $0x656e6e6f,0x63(%ebx),%esi
arpl   %si,0x68(%edi,%ebx,2)
popa
outsb  %ds:(%esi),(%dx)
fs
insb   (%dx),%es:(%edi)
gs
jb     804d95b <_IO_stdin_used+0x3b7>
cmp    $0x2828203d,%eax
jbe    804d9b1 <_IO_stdin_used+0x40d>
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
add    %al,(%eax)
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804d980 <_IO_stdin_used+0x3dc>
ds imul $0x656e6e6f,%ds:%fs:0x63(%ebx),%esi
65
arpl   %si,0x68(%edi,%ebx,2)
popa
outsb  %ds:(%esi),(%dx)
fs
insb   (%dx),%es:(%edi)
gs
jb     804d9c6 <_IO_stdin_used+0x422>
jne    804d9dc <_IO_stdin_used+0x438>
gs
jb     804d9cb <_IO_stdin_used+0x427>
fs
popa
je     804d9d1 <_IO_stdin_used+0x42d>
and    %bh,0x2828203d
jbe    804d9e7 <_IO_stdin_used+0x443>
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804d9c7 <_IO_stdin_used+0x423>
arpl   %bp,0x75(%edi)
insb   (%dx),%es:(%edi)
and    %ch,%fs:0x6f(%esi)
je     804d9b7 <_IO_stdin_used+0x413>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x74(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
and    %ch,(%edi)
outsl  %ds:(%esi),(%dx)
jb     804da0d <_IO_stdin_used+0x469>
das
data16
jb     804da0f <_IO_stdin_used+0x46b>
gs
fs
gs
jae    804da1a <_IO_stdin_used+0x476>
je     804da20 <_IO_stdin_used+0x47c>
jo     804d9e2 <_IO_stdin_used+0x43e>
jo     804da21 <_IO_stdin_used+0x47d>
jns    804da24 <_IO_stdin_used+0x480>
outsl  %ds:(%esi),(%dx)
jne    804da2e <_IO_stdin_used+0x48a>
push   $0x25203a64
insl   (%dx),%es:(%edi)
or     $0x5b00000a,%eax
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804da0b <_IO_stdin_used+0x467>
je     804da45 <_IO_stdin_used+0x4a1>
jns    804da3e <_IO_stdin_used+0x49a>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6c(%bx)
and    %ah,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
bound  %esp,0x63(%ecx)
imul   $0x70,(%eax),%esp
popa
je     804da51 <_IO_stdin_used+0x4ad>
and    %ch,(%edi)
jo     804da59 <_IO_stdin_used+0x4b5>
jns    804da1c <_IO_stdin_used+0x478>
bound  %ebp,0x6f(%edi)
je     804da21 <_IO_stdin_used+0x47d>
jo     804da68 <_IO_stdin_used+0x4c4>
outsl  %ds:(%esi),(%dx)
je     804da68 <_IO_stdin_used+0x4c4>
arpl   %bp,0x6c(%edi)
or     $0x5b00000a,%eax
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804da47 <_IO_stdin_used+0x4a3>
arpl   %bp,0x75(%edi)
insb   (%dx),%es:(%edi)
and    %ch,%fs:0x6f(%esi)
je     804da37 <_IO_stdin_used+0x493>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x74(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
and    %ch,(%edi)
jo     804da91 <_IO_stdin_used+0x4ed>
jns    804da54 <_IO_stdin_used+0x4b0>
bound  %ebp,0x6f(%edi)
je     804da59 <_IO_stdin_used+0x4b5>
jo     804daa0 <_IO_stdin_used+0x4fc>
outsl  %ds:(%esi),(%dx)
je     804daa0 <_IO_stdin_used+0x4fc>
arpl   %bp,0x6c(%edi)
cmp    (%eax),%ah
and    $0xa0d6d,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804daa3 <_IO_stdin_used+0x4ff>
bound  %ebp,0x6f(%edi)
je     804daa8 <_IO_stdin_used+0x504>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804daaf <_IO_stdin_used+0x50b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
push   $0x75676e61
jo     804da5a <_IO_stdin_used+0x4b6>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jo     804dace <_IO_stdin_used+0x52a>
jns    804dac3 <_IO_stdin_used+0x51f>
bound  %ebp,0x6f(%edi)
je     804dac8 <_IO_stdin_used+0x524>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dacf <_IO_stdin_used+0x52b>
fs
gs
je     804dad5 <_IO_stdin_used+0x531>
arpl   %bp,0x5f(%eax)
data16
jb     804dae9 <_IO_stdin_used+0x545>
insl   (%dx),%es:(%edi)
pop    %edi
gs
jbe    804dae4 <_IO_stdin_used+0x540>
outsb  %ds:(%esi),(%dx)
je     804dae1 <_IO_stdin_used+0x53d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804da87 <_IO_stdin_used+0x4e3>
add    %dh,0x6c(%eax)
jns    804db03 <_IO_stdin_used+0x55f>
bound  %ebp,0x6f(%edi)
je     804db08 <_IO_stdin_used+0x564>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804db0f <_IO_stdin_used+0x56b>
fs
gs
je     804db15 <_IO_stdin_used+0x571>
arpl   %bp,0x5f(%eax)
data16
jb     804db29 <_IO_stdin_used+0x585>
insl   (%dx),%es:(%edi)
pop    %edi
gs
jbe    804db24 <_IO_stdin_used+0x580>
outsb  %ds:(%esi),(%dx)
je     804db21 <_IO_stdin_used+0x57d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804dac7 <_IO_stdin_used+0x523>
add    %dh,0x6c(%eax)
jns    804db43 <_IO_stdin_used+0x59f>
bound  %ebp,0x6f(%edi)
je     804db48 <_IO_stdin_used+0x5a4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804db4f <_IO_stdin_used+0x5ab>
popa
je     804db67 <_IO_stdin_used+0x5c3>
popa
arpl   %bp,0x5f(%eax)
je     804db68 <_IO_stdin_used+0x5c4>
pop    %edi
gs
jbe    804db62 <_IO_stdin_used+0x5be>
outsb  %ds:(%esi),(%dx)
je     804db5f <_IO_stdin_used+0x5bb>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804db05 <_IO_stdin_used+0x561>
jo     804db73 <_IO_stdin_used+0x5cf>
jns    804db68 <_IO_stdin_used+0x5c4>
bound  %ebp,0x6f(%edi)
je     804db6d <_IO_stdin_used+0x5c9>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804db74 <_IO_stdin_used+0x5d0>
imul   $0x656e6e6f,%fs:0x63(%ebx),%esi
arpl   %si,0x70(%eax,%eax,1)
insb   (%dx),%es:(%edi)
jns    804db83 <_IO_stdin_used+0x5df>
bound  %ebp,0x6f(%edi)
je     804db88 <_IO_stdin_used+0x5e4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804db8f <_IO_stdin_used+0x5eb>
data16
insb   (%dx),%es:(%edi)
jne    804dba7 <_IO_stdin_used+0x603>
push   $0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804dba3 <_IO_stdin_used+0x5ff>
bound  %ebp,0x6f(%edi)
je     804dba8 <_IO_stdin_used+0x604>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dbaf <_IO_stdin_used+0x60b>
je     804dbb7 <_IO_stdin_used+0x613>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dbcd <_IO_stdin_used+0x629>
pop    %edi
jno    804dbd6 <_IO_stdin_used+0x632>
imul   $0x0,0x0(%eax,%eax,1),%esi
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804dbe3 <_IO_stdin_used+0x63f>
bound  %ebp,0x6f(%edi)
je     804dbe8 <_IO_stdin_used+0x644>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dbef <_IO_stdin_used+0x64b>
je     804dbf7 <_IO_stdin_used+0x653>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dc0d <_IO_stdin_used+0x669>
pop    %edi
jb     804dc06 <_IO_stdin_used+0x662>
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804dc0e <_IO_stdin_used+0x66a>
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804dc23 <_IO_stdin_used+0x67f>
bound  %ebp,0x6f(%edi)
je     804dc28 <_IO_stdin_used+0x684>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dc2f <_IO_stdin_used+0x68b>
je     804dc37 <_IO_stdin_used+0x693>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dc4d <_IO_stdin_used+0x6a9>
pop    %edi
fs
gs
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804dc4e <_IO_stdin_used+0x6aa>
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804dc63 <_IO_stdin_used+0x6bf>
bound  %ebp,0x6f(%edi)
je     804dc68 <_IO_stdin_used+0x6c4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dc6f <_IO_stdin_used+0x6cb>
je     804dc77 <_IO_stdin_used+0x6d3>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dc8d <_IO_stdin_used+0x6e9>
pop    %edi
push   $0x5f656469
jae    804dc96 <_IO_stdin_used+0x6f2>
insb   (%dx),%es:(%edi)
popa
jae    804dc92 <_IO_stdin_used+0x6ee>
add    %al,(%eax)
jo     804dcae <_IO_stdin_used+0x70a>
jns    804dca3 <_IO_stdin_used+0x6ff>
bound  %ebp,0x6f(%edi)
je     804dca8 <_IO_stdin_used+0x704>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dcaf <_IO_stdin_used+0x70b>
je     804dcb7 <_IO_stdin_used+0x713>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dccd <_IO_stdin_used+0x729>
pop    %edi
jae    804dcc9 <_IO_stdin_used+0x725>
outsl  %ds:(%esi),(%dx)
ja     804dcc3 <_IO_stdin_used+0x71f>
jae    804dcd6 <_IO_stdin_used+0x732>
insb   (%dx),%es:(%edi)
popa
jae    804dcd2 <_IO_stdin_used+0x72e>
add    %al,(%eax)
jo     804dcee <_IO_stdin_used+0x74a>
jns    804dce3 <_IO_stdin_used+0x73f>
bound  %ebp,0x6f(%edi)
je     804dce8 <_IO_stdin_used+0x744>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dcef <_IO_stdin_used+0x74b>
popa
jae    804dcfe <_IO_stdin_used+0x75a>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dd0c <_IO_stdin_used+0x768>
pop    %edi
imul   $0x5f65726f,0x6e(%edi),%esp
imul   $0x73,0x79(%ebp),%esp
je     804dd1d <_IO_stdin_used+0x779>
outsl  %ds:(%esi),(%dx)
imul   $0x0,0x0(%ebp),%esp
jo     804dd2e <_IO_stdin_used+0x78a>
jns    804dd23 <_IO_stdin_used+0x77f>
bound  %ebp,0x6f(%edi)
je     804dd28 <_IO_stdin_used+0x784>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dd2f <_IO_stdin_used+0x78b>
popa
jae    804dd3e <_IO_stdin_used+0x79a>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804dd4c <_IO_stdin_used+0x7a8>
pop    %edi
ja     804dd41 <_IO_stdin_used+0x79d>
je     804dd45 <_IO_stdin_used+0x7a1>
push   $0x726f665f
pop    %edi
imul   $0x73,0x79(%ebp),%esp
je     804dd60 <_IO_stdin_used+0x7bc>
outsl  %ds:(%esi),(%dx)
imul   $0x0,0x0(%ebp),%esp
add    %dh,0x6c(%eax)
jns    804dd63 <_IO_stdin_used+0x7bf>
bound  %ebp,0x6f(%edi)
je     804dd68 <_IO_stdin_used+0x7c4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dd6f <_IO_stdin_used+0x7cb>
popa
jae    804dd7e <_IO_stdin_used+0x7da>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jno    804dd92 <_IO_stdin_used+0x7ee>
gs
jae    804dd94 <_IO_stdin_used+0x7f0>
imul   $0x0,0x6e(%edi),%ebp
add    %dh,0x6c(%eax)
jns    804dda3 <_IO_stdin_used+0x7ff>
bound  %ebp,0x6f(%edi)
je     804dda8 <_IO_stdin_used+0x804>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804ddaf <_IO_stdin_used+0x80b>
popa
jae    804ddbe <_IO_stdin_used+0x81a>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
outsw  %ds:(%esi),(%dx)
jb     804ddbe <_IO_stdin_used+0x81a>
arpl   %sp,0x63(%ecx)
push   $0x705f6465
popa
jae    804dddd <_IO_stdin_used+0x839>
ja     804dddb <_IO_stdin_used+0x837>
jb     804ddd2 <_IO_stdin_used+0x82e>
jae    804dd70 <_IO_stdin_used+0x7cc>
jo     804ddee <_IO_stdin_used+0x84a>
jns    804dde3 <_IO_stdin_used+0x83f>
bound  %ebp,0x6f(%edi)
je     804dde8 <_IO_stdin_used+0x844>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804ddef <_IO_stdin_used+0x84b>
popa
jae    804ddfe <_IO_stdin_used+0x85a>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
outsw  %ds:(%esi),(%dx)
jb     804ddfe <_IO_stdin_used+0x85a>
jo     804de02 <_IO_stdin_used+0x85e>
jae    804de16 <_IO_stdin_used+0x872>
ja     804de14 <_IO_stdin_used+0x870>
jb     804de0b <_IO_stdin_used+0x867>
add    %dh,0x6c(%eax)
jns    804de23 <_IO_stdin_used+0x87f>
bound  %ebp,0x6f(%edi)
je     804de28 <_IO_stdin_used+0x884>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804de2f <_IO_stdin_used+0x88b>
je     804de37 <_IO_stdin_used+0x893>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    804de57 <_IO_stdin_used+0x8b3>
jae    804de54 <_IO_stdin_used+0x8b0>
gs
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x74696e69,0x5f(%ebx),%esi
imul   $0x64657a69,0x6c(%ecx),%esp
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804de63 <_IO_stdin_used+0x8bf>
bound  %ebp,0x6f(%edi)
je     804de68 <_IO_stdin_used+0x8c4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804de6f <_IO_stdin_used+0x8cb>
je     804de77 <_IO_stdin_used+0x8d3>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804de8d <_IO_stdin_used+0x8e9>
pop    %edi
push   $0x5f656469
insl   (%dx),%es:(%edi)
gs
jae    804de9b <_IO_stdin_used+0x8f7>
popa
add    %al,%gs:(%bx,%si)
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804dea3 <_IO_stdin_used+0x8ff>
bound  %ebp,0x6f(%edi)
je     804dea8 <_IO_stdin_used+0x904>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804deaf <_IO_stdin_used+0x90b>
je     804deb7 <_IO_stdin_used+0x913>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804decd <_IO_stdin_used+0x929>
pop    %edi
imul   $0x5f79616c,%fs:0x70(%ebx),%esi
insl   (%dx),%es:(%edi)
gs
jae    804dede <_IO_stdin_used+0x93a>
popa
add    %al,%gs:(%bx,%si)
jo     804deee <_IO_stdin_used+0x94a>
jns    804dee3 <_IO_stdin_used+0x93f>
bound  %ebp,0x6f(%edi)
je     804dee8 <_IO_stdin_used+0x944>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804deef <_IO_stdin_used+0x94b>
je     804def7 <_IO_stdin_used+0x953>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804df0d <_IO_stdin_used+0x969>
pop    %edi
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
addr16
gs
pop    %edi
jb     804df17 <_IO_stdin_used+0x973>
outsl  %ds:(%esi),(%dx)
je     804deab <_IO_stdin_used+0x907>
jo     804df19 <_IO_stdin_used+0x975>
jns    804df0e <_IO_stdin_used+0x96a>
bound  %ebp,0x6f(%edi)
je     804df13 <_IO_stdin_used+0x96f>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804df1a <_IO_stdin_used+0x976>
jae    804df36 <_IO_stdin_used+0x992>
jae    804df33 <_IO_stdin_used+0x98f>
gs
insl   (%dx),%es:(%edi)
pop    %edi
jne    804df34 <_IO_stdin_used+0x990>
fs
popa
je     804df2d <_IO_stdin_used+0x989>
add    %dh,0x6c(%eax)
jns    804df2c <_IO_stdin_used+0x988>
bound  %ebp,0x6f(%edi)
je     804df31 <_IO_stdin_used+0x98d>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804df38 <_IO_stdin_used+0x994>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
addr16
gs
pop    %edi
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs add %dh,%fs:%gs:0x6c(%eax)
jns    804df48 <_IO_stdin_used+0x9a4>
bound  %ebp,0x6f(%edi)
je     804df4d <_IO_stdin_used+0x9a9>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804df54 <_IO_stdin_used+0x9b0>
jne    804df67 <_IO_stdin_used+0x9c3>
fs
popa
je     804df60 <_IO_stdin_used+0x9bc>
pop    %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
jo     804df8e <_IO_stdin_used+0x9ea>
jns    804df83 <_IO_stdin_used+0x9df>
bound  %ebp,0x6f(%edi)
je     804df88 <_IO_stdin_used+0x9e4>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804df8f <_IO_stdin_used+0x9eb>
addr16
gs
je     804df93 <_IO_stdin_used+0x9ef>
jb     804df9b <_IO_stdin_used+0x9f7>
jno    804dfad <_IO_stdin_used+0xa09>
gs
jae    804dfaf <_IO_stdin_used+0xa0b>
pop    %edi
jae    804dfb2 <_IO_stdin_used+0xa0e>
jb     804dfa9 <_IO_stdin_used+0xa05>
outsb  %ds:(%esi),(%dx)
add    %al,(%bx,%si)
jo     804dfce <_IO_stdin_used+0xa2a>
jns    804dfc3 <_IO_stdin_used+0xa1f>
bound  %ebp,0x6f(%edi)
je     804dfc8 <_IO_stdin_used+0xa24>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dfcf <_IO_stdin_used+0xa2b>
jo     804dfe4 <_IO_stdin_used+0xa40>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    804dfd7 <_IO_stdin_used+0xa33>
imul   $0x6e696d6f,0x63(%esi),%ebp
addr16 pop %edi
jb     804dfe8 <_IO_stdin_used+0xa44>
jo     804dff1 <_IO_stdin_used+0xa4d>
imul   $0x796c7000,0x73(%ebp),%esp
pop    %edi
bound  %ebp,0x6f(%edi)
je     804dff1 <_IO_stdin_used+0xa4d>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804dff8 <_IO_stdin_used+0xa54>
jae    804e000 <_IO_stdin_used+0xa5c>
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
jb     804e005 <_IO_stdin_used+0xa61>
jno    804e017 <_IO_stdin_used+0xa73>
gs
jae    804e019 <_IO_stdin_used+0xa75>
add    %al,(%eax)
add    %dh,0x6c(%eax)
jns    804e023 <_IO_stdin_used+0xa7f>
bound  %ebp,0x6f(%edi)
je     804e028 <_IO_stdin_used+0xa84>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e02f <_IO_stdin_used+0xa8b>
jo     804e044 <_IO_stdin_used+0xaa0>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    804e037 <_IO_stdin_used+0xa93>
jo     804e03f <_IO_stdin_used+0xa9b>
outsb  %ds:(%esi),(%dx)
imul   $0x7165725f,%fs:0x67(%esi),%ebp
jne    804e04a <_IO_stdin_used+0xaa6>
jae    804e05b <_IO_stdin_used+0xab7>
jae    804dfe9 <_IO_stdin_used+0xa45>
jo     804e057 <_IO_stdin_used+0xab3>
jns    804e04c <_IO_stdin_used+0xaa8>
bound  %ebp,0x6f(%edi)
je     804e051 <_IO_stdin_used+0xaad>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e058 <_IO_stdin_used+0xab4>
jno    804e070 <_IO_stdin_used+0xacc>
gs
jne    804e063 <_IO_stdin_used+0xabf>
pop    %edi
jb     804e066 <_IO_stdin_used+0xac2>
jno    804e078 <_IO_stdin_used+0xad4>
gs
jae    804e07a <_IO_stdin_used+0xad6>
add    %dh,0x6c(%eax)
jns    804e06a <_IO_stdin_used+0xac6>
bound  %ebp,0x6f(%edi)
je     804e06f <_IO_stdin_used+0xacb>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e076 <_IO_stdin_used+0xad2>
jo     804e082 <_IO_stdin_used+0xade>
outsb  %ds:(%esi),(%dx)
addr16 pop %edi
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x6c(%eax)
jns    804e086 <_IO_stdin_used+0xae2>
bound  %ebp,0x6f(%edi)
je     804e08b <_IO_stdin_used+0xae7>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e092 <_IO_stdin_used+0xaee>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x70(%eax,%eax,1)
insb   (%dx),%es:(%edi)
jns    804e09e <_IO_stdin_used+0xafa>
bound  %ebp,0x6f(%edi)
je     804e0a3 <_IO_stdin_used+0xaff>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e0aa <_IO_stdin_used+0xb06>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x0(%eax,%eax,1)
jo     804e0ce <_IO_stdin_used+0xb2a>
jns    804e0c3 <_IO_stdin_used+0xb1f>
bound  %ebp,0x6f(%edi)
je     804e0c8 <_IO_stdin_used+0xb24>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e0cf <_IO_stdin_used+0xb2b>
arpl   %sp,0x6e(%ecx)
arpl   %sp,0x6c(%ebp)
pop    %edi
jb     804e0de <_IO_stdin_used+0xb3a>
jno    804e0f0 <_IO_stdin_used+0xb4c>
gs
jae    804e0f2 <_IO_stdin_used+0xb4e>
jae    804e0df <_IO_stdin_used+0xb3b>
ja     804e0e3 <_IO_stdin_used+0xb3f>
imul   $0x6f665f67,0x6e(%ecx,%ebp,2),%esi
jb     804e0eb <_IO_stdin_used+0xb47>
jb     804e0f3 <_IO_stdin_used+0xb4f>
jo     804e0fc <_IO_stdin_used+0xb58>
imul   $0x0,0x73(%ebp),%esp
add    %dh,0x6c(%eax)
jns    804e103 <_IO_stdin_used+0xb5f>
bound  %ebp,0x6f(%edi)
je     804e108 <_IO_stdin_used+0xb64>
arpl   %bp,0x65(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
je     804e10f <_IO_stdin_used+0xb6b>
arpl   %sp,0x6e(%ecx)
arpl   %sp,0x6c(%ebp)
pop    %edi
jne    804e127 <_IO_stdin_used+0xb83>
jae    804e120 <_IO_stdin_used+0xb7c>
outsb  %ds:(%esi),(%dx)
je     804e11d <_IO_stdin_used+0xb79>
jb     804e125 <_IO_stdin_used+0xb81>
jno    804e137 <_IO_stdin_used+0xb93>
gs
jae    804e139 <_IO_stdin_used+0xb95>
jae    804e0c7 <_IO_stdin_used+0xb23>
ja     804e12a <_IO_stdin_used+0xb86>
imul   $0x796c702f,0x2e(%eax,%eax,1),%esi
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    804e149 <_IO_stdin_used+0xba5>
push   $0x5b00632e
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e120 <_IO_stdin_used+0xb7c>
imul   $0x656e6e6f,%fs:0x63(%ebx),%esi
arpl   %si,0xa(%ebp,%ecx,1)
add    %dh,0x65(%edx)
je     804e158 <_IO_stdin_used+0xbb4>
imul   $0x616c7073,0x2d(%esi),%ebp
jae    804e168 <_IO_stdin_used+0xbc4>
add    %ch,0x65(%ebx)
jns    804e178 <_IO_stdin_used+0xbd4>
add    %dh,0x74(%ebx)
popa
je     804e180 <_IO_stdin_used+0xbdc>
jae    804e10d <_IO_stdin_used+0xb69>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %ah,%fs:0x6e(%edi,%ebp,2)
je     804e147 <_IO_stdin_used+0xba3>
jo     804e17d <_IO_stdin_used+0xbd9>
jne    804e191 <_IO_stdin_used+0xbed>
gs
sub    $0x676f7270,%eax
jb     804e18b <_IO_stdin_used+0xbe7>
jae    804e19b <_IO_stdin_used+0xbf7>
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     804e1a3 <_IO_stdin_used+0xbff>
add    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
sub    $0x742d666f,%eax
jb     804e1a6 <_IO_stdin_used+0xc02>
gs
jae    804e140 <_IO_stdin_used+0xb9c>
and    $0x68730064,%eax
jne    804e1bb <_IO_stdin_used+0xc17>
outsl  %fs:(%esi),(%dx)
ja     804e1b9 <_IO_stdin_used+0xc15>
add    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e17e <_IO_stdin_used+0xbda>
jne    804e1c3 <_IO_stdin_used+0xc1f>
add    %dh,0x65(%edx)
popa
fs
sub    $0x74697277,%eax
add    %ch,%gs:0x65(%esi)
ja     804e190 <_IO_stdin_used+0xbec>
jb     804e1d4 <_IO_stdin_used+0xc30>
outsl  %ds:(%esi),(%dx)
je     804e195 <_IO_stdin_used+0xbf1>
imul   $0x2120712a,%fs:0x0(%edx),%esi
cmp    $0x6c656420,%eax
imul   $0x726574,0x69(%ebp),%ebp
imul   $0x6e203d3c,(%eax),%esp
jne    804e1f1 <_IO_stdin_used+0xc4d>
bound  %esp,0x72(%ebp)
pop    %edi
outsl  %ds:(%esi),(%dx)
pop    %di
fs
gs
insb   (%dx),%es:(%edi)
imul   $0x73726574,0x69(%ebp),%ebp
add    %bl,0x25(%ebx)
jae    804e1f7 <_IO_stdin_used+0xc53>
and    %ah,0x342e3534
xor    $0x6f633a73,%eax
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x61(%esi)
imul   $0x53000a0d,0x64(%ebp,%eiz,2),%ebp
jo     804e223 <_IO_stdin_used+0xc7f>
popa
jae    804e222 <_IO_stdin_used+0xc7e>
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     804e232 <_IO_stdin_used+0xc8e>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %ah,0x6c(%ebx)
imul   $0x6c700074,0x6e(%ebp),%esp
jns    804e23b <_IO_stdin_used+0xc97>
outsl  %ds:(%esi),(%dx)
jne    804e245 <_IO_stdin_used+0xca1>
push   $0x69615700
je     804e1f8 <_IO_stdin_used+0xc54>
outsw  %ds:(%esi),(%dx)
jb     804e1fc <_IO_stdin_used+0xc58>
bound  %ebp,0x6f(%edi)
je     804e201 <_IO_stdin_used+0xc5d>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jno    804e262 <_IO_stdin_used+0xcbe>
imul   $0x69617465,0x64(%eax,%eax,1),%esi
insb   (%dx),%es:(%edi)
jae    804e1f8 <_IO_stdin_used+0xc54>
imul   $0x2d65726f,0x6e(%edi),%esp
imul   $0x73,0x79(%ebp),%esp
je     804e277 <_IO_stdin_used+0xcd3>
outsl  %ds:(%esi),(%dx)
imul   $0x41,0x0(%ebp),%esp
jae    804e277 <_IO_stdin_used+0xcd3>
and    %dh,0x73(%ebp)
gs
jb     804e232 <_IO_stdin_used+0xc8e>
outsw  %ds:(%esi),(%dx)
jb     804e236 <_IO_stdin_used+0xc92>
jo     804e279 <_IO_stdin_used+0xcd5>
jae    804e28d <_IO_stdin_used+0xce9>
ja     804e28b <_IO_stdin_used+0xce7>
jb     804e282 <_IO_stdin_used+0xcde>
add    %ah,0x73(%ecx)
imul   $0x70,0x2d726f66,%ebp
popa
jae    804e29e <_IO_stdin_used+0xcfa>
ja     804e29c <_IO_stdin_used+0xcf8>
jb     804e293 <_IO_stdin_used+0xcef>
add    %cl,0x69(%eax)
fs and %dh,%fs:%gs:0x70(%ebx)
insb   (%dx),%es:(%edi)
popa
jae    804e2a3 <_IO_stdin_used+0xcff>
and    %dh,0x63(%ebx)
jb     804e2a5 <_IO_stdin_used+0xd01>
outsb  %gs:(%esi),(%dx)
add    %ch,0x69(%eax)
fs
gs
sub    $0x616c7073,%eax
jae    804e2b6 <_IO_stdin_used+0xd12>
add    %dl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     804e274 <_IO_stdin_used+0xcd0>
jae    804e2c6 <_IO_stdin_used+0xd22>
insb   (%dx),%es:(%edi)
popa
jae    804e2c2 <_IO_stdin_used+0xd1e>
and    %dh,0x63(%ebx)
jb     804e2c4 <_IO_stdin_used+0xd20>
outsb  %gs:(%esi),(%dx)
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     804e294 <_IO_stdin_used+0xcf0>
jae    804e2d9 <_IO_stdin_used+0xd35>
insb   (%dx),%es:(%edi)
popa
jae    804e2d5 <_IO_stdin_used+0xd31>
add    %dh,0x79(%ebx)
jae    804e2db <_IO_stdin_used+0xd37>
outsb  %ds:(%esi),(%dx)
imul   $0x612d7361,0x68(%eax,%eax,1),%esi
arpl   %si,0x76(%ecx,%ebp,2)
gs
sub    $0x70007476,%eax
imul   $0x6c655400,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e2b3 <_IO_stdin_used+0xd0f>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jno    804e314 <_IO_stdin_used+0xd70>
imul   $0x6f727765,0x6e(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
je     804e2aa <_IO_stdin_used+0xd06>
addr16
gs
je     804e2db <_IO_stdin_used+0xd37>
jae    804e320 <_IO_stdin_used+0xd7c>
insb   (%dx),%es:(%edi)
popa
jae    804e31c <_IO_stdin_used+0xd78>
sub    $0x67756c70,%eax
imul   $0x68746170,0x2d(%esi),%ebp
add    %al,0x6e(%ebp)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
jbe    804e32f <_IO_stdin_used+0xd8b>
jb     804e32e <_IO_stdin_used+0xd8a>
outsl  %ds:(%esi),(%dx)
jae    804e334 <_IO_stdin_used+0xd90>
and    %ah,0x62(%ebp,%eiz,2)
jne    804e33c <_IO_stdin_used+0xd98>
and    %ch,0x67(%edi,%ebp,2)
imul   $0x69685400,0x67(%bp),%ebp
jae    804e303 <_IO_stdin_used+0xd5f>
push   $0x20706c65
insl   (%dx),%es:(%edi)
gs
jae    804e35f <_IO_stdin_used+0xdbb>
popa
add    %ch,%gs:0x65(%bx,%si)
insb   (%dx),%es:(%edi)
jo     804e2f5 <_IO_stdin_used+0xd51>
inc    %ecx
jo     804e368 <_IO_stdin_used+0xdc4>
insb   (%dx),%es:(%edi)
jns    804e364 <_IO_stdin_used+0xdc0>
outsb  %ds:(%esi),(%dx)
and    %dh,0x70(%di)
fs
popa
je     804e369 <_IO_stdin_used+0xdc5>
jae    804e306 <_IO_stdin_used+0xd62>
push   %ebx
push   $0x69747475
outsb  %ds:(%esi),(%dx)
and    %dh,0x68(%si)
and    %dh,%gs:0x79(%ebx)
jae    804e38b <_IO_stdin_used+0xde7>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x77(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
add    %dl,0x74(%ebx)
popa
jb     804e398 <_IO_stdin_used+0xdf4>
imul   $0x65687420,0x67(%esi),%ebp
and    %dh,0x79(%ebx)
jae    804e3a4 <_IO_stdin_used+0xe00>
gs
insl   (%dx),%es:(%edi)
and    %dh,0x70(%ebp)
add    %al,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %ch,%gs:0x70(%edi)
gs
jb     804e3a7 <_IO_stdin_used+0xe03>
je     804e3b1 <_IO_stdin_used+0xe0d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%ebp)
fs add %ah,%fs:%gs:0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
addr16
gs
sub    $0x65646f6d,%eax
add    %dh,0x79(%ebx)
jae    804e3d4 <_IO_stdin_used+0xe30>
gs
insl   (%dx),%es:(%edi)
sub    $0x61647075,%eax
je     804e3ce <_IO_stdin_used+0xe2a>
add    %dh,0x70(%ebp)
fs
popa
je     804e3d5 <_IO_stdin_used+0xe31>
sub    $0x746f6f72,%eax
sub    $0x41007366,%eax
jae    804e3e7 <_IO_stdin_used+0xe43>
and    %dh,0x73(%ebp)
gs
jb     804e3a2 <_IO_stdin_used+0xdfe>
popa
and    %dh,0x75(%ecx)
gs
jae    804e3fd <_IO_stdin_used+0xe59>
imul   $0x6b736100,0x6e(%edi),%ebp
sub    $0x73657571,%eax
je     804e400 <_IO_stdin_used+0xe5c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dl,0x65(%eax,%ebp,2)
and    %ch,0x65(%ebp)
jae    804e415 <_IO_stdin_used+0xe71>
popa
and    %dh,%gs:0x65(%si)
js     804e41e <_IO_stdin_used+0xe7a>
add    %al,0x73(%ecx,%ebp,2)
jo     804e41c <_IO_stdin_used+0xe78>
popa
jns    804e3d3 <_IO_stdin_used+0xe2f>
popa
and    %ch,0x65(%ebp)
jae    804e42c <_IO_stdin_used+0xe88>
popa
add    %ah,%gs:0x69(%si)
jae    804e431 <_IO_stdin_used+0xe8d>
insb   (%dx),%es:(%edi)
popa
jns    804e3f2 <_IO_stdin_used+0xe4e>
insl   (%dx),%es:(%edi)
gs
jae    804e43c <_IO_stdin_used+0xe98>
popa
add    %cl,%gs:0x69(%bx,%si)
fs and %ah,%fs:%gs:0x20(%ecx)
insl   (%dx),%es:(%edi)
gs
jae    804e44b <_IO_stdin_used+0xea7>
popa
add    %ch,%gs:0x69(%bx,%si)
fs
gs
sub    $0x7373656d,%eax
popa
add    %cl,%gs:0x65(%bp,%di)
jns    804e460 <_IO_stdin_used+0xebc>
and    %dh,0x20(%edi,%ebp,2)
bound  %esp,0x63(%ebp)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804e466 <_IO_stdin_used+0xec2>
je     804e468 <_IO_stdin_used+0xec4>
jbe    804e466 <_IO_stdin_used+0xec2>
and    %dh,0x0(%edi,%ebp,2)
ja     804e468 <_IO_stdin_used+0xec4>
je     804e46c <_IO_stdin_used+0xec8>
push   $0x79656b2d
jae    804e484 <_IO_stdin_used+0xee0>
jb     804e481 <_IO_stdin_used+0xedd>
imul   $0x4b,0x0(%ebp),%esp
gs
jns    804e48c <_IO_stdin_used+0xee8>
and    %dh,0x20(%edi,%ebp,2)
jb     804e484 <_IO_stdin_used+0xee0>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    804e488 <_IO_stdin_used+0xee4>
and    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804e492 <_IO_stdin_used+0xeee>
je     804e494 <_IO_stdin_used+0xef0>
jbe    804e496 <_IO_stdin_used+0xef2>
je     804e4a8 <_IO_stdin_used+0xf04>
and    %dh,0x0(%edi,%ebp,2)
push   %eax
popa
jne    804e4aa <_IO_stdin_used+0xf06>
and    %ah,%gs:0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e45e <_IO_stdin_used+0xeba>
jo     804e4b2 <_IO_stdin_used+0xf0e>
outsl  %ds:(%esi),(%dx)
addr16 jb 804e4a9 <_IO_stdin_used+0xf05>
jae    804e4b9 <_IO_stdin_used+0xf15>
and    %ah,0x61(%edx)
jb     804e44b <_IO_stdin_used+0xea7>
push   %ebp
outsb  %ds:(%esi),(%dx)
jo     804e4b0 <_IO_stdin_used+0xf0c>
jne    804e4c4 <_IO_stdin_used+0xf20>
and    %ah,%gs:0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e478 <_IO_stdin_used+0xed4>
jo     804e4cc <_IO_stdin_used+0xf28>
outsl  %ds:(%esi),(%dx)
addr16 jb 804e4c3 <_IO_stdin_used+0xf1f>
jae    804e4d3 <_IO_stdin_used+0xf2f>
and    %ah,0x61(%edx)
jb     804e465 <_IO_stdin_used+0xec1>
jne    804e4d5 <_IO_stdin_used+0xf31>
jo     804e4ca <_IO_stdin_used+0xf26>
jne    804e4de <_IO_stdin_used+0xf3a>
gs
sub    $0x676f7270,%eax
jb     804e4d8 <_IO_stdin_used+0xf34>
jae    804e4e8 <_IO_stdin_used+0xf44>
add    %dh,0x65(%edx)
jo     804e4e9 <_IO_stdin_used+0xf45>
jb     804e4f0 <_IO_stdin_used+0xf4c>
sub    $0x6f727265,%eax
jb     804e483 <_IO_stdin_used+0xedf>
fs
gs
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804e4f2 <_IO_stdin_used+0xf4e>
add    %dh,0x65(%edx)
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804e4fd <_IO_stdin_used+0xf59>
add    %ah,0x2f000a73
jo     804e512 <_IO_stdin_used+0xf6e>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
arpl   %bp,0x64(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x796c7000,0x65(%esi),%ebp
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    804e526 <_IO_stdin_used+0xf82>
push   $0x6265643a
jne    804e520 <_IO_stdin_used+0xf7c>
add    %ch,(%edi)
insb   (%dx),%es:(%edi)
imul   $0x36383369,0x2f(%edx),%esp
sub    $0x756e696c,%eax
js     804e4f7 <_IO_stdin_used+0xf53>
outsb  %ds:(%si),(%dx)
jne    804e4fd <_IO_stdin_used+0xf59>
jo     804e53c <_IO_stdin_used+0xf98>
jns    804e53f <_IO_stdin_used+0xf9b>
outsl  %ds:(%esi),(%dx)
jne    804e549 <_IO_stdin_used+0xfa5>
push   $0x255b002f
jae    804e539 <_IO_stdin_used+0xf95>
and    %ah,0x342e3534
xor    $0x69703a73,%eax
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%bp)
imul   $0xa0d,0x64(%ebp,%eiz,2),%ebp
gs
jb     804e569 <_IO_stdin_used+0xfc5>
outsl  %ds:(%esi),(%dx)
jb     804e534 <_IO_stdin_used+0xf90>
and    %dh,0x6e(%ebp)
gs
js     804e570 <_IO_stdin_used+0xfcc>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
jns    804e528 <_IO_stdin_used+0xf84>
imul   $0x656e6e6f,%fs:0x63(%ebx),%esi
arpl   %si,0x64(%ebp,%eiz,2)
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e53f <_IO_stdin_used+0xf9b>
jae    804e595 <_IO_stdin_used+0xff1>
popa
je     804e599 <_IO_stdin_used+0xff5>
jae    804e546 <_IO_stdin_used+0xfa2>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%al
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e577 <_IO_stdin_used+0xfd3>
gs
js     804e5a5 <_IO_stdin_used+0x1001>
arpl   %si,0x74(%ebp)
imul   $0x73617020,0x67(%esi),%ebp
jae    804e5c3 <_IO_stdin_used+0x101f>
outsl  %ds:(%esi),(%dx)
jb     804e5b3 <_IO_stdin_used+0x100f>
and    %dh,0x65(%edx)
jno    804e5c9 <_IO_stdin_used+0x1025>
gs
jae    804e5cb <_IO_stdin_used+0x1027>
and    %ch,(%eax)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa0d2973
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e5af <_IO_stdin_used+0x100b>
push   %eax
popa
jae    804e5ec <_IO_stdin_used+0x1048>
ja     804e5ea <_IO_stdin_used+0x1046>
jb     804e5e1 <_IO_stdin_used+0x103d>
and    %dh,0x65(%edx)
jno    804e5f7 <_IO_stdin_used+0x1053>
gs
jae    804e5f9 <_IO_stdin_used+0x1055>
or     $0x6f63000a,%eax
jne    804e5f8 <_IO_stdin_used+0x1054>
outsb  %fs:(%esi),(%dx)
daa
je     804e5b1 <_IO_stdin_used+0x100d>
jae    804e5f8 <_IO_stdin_used+0x1054>
je     804e5b5 <_IO_stdin_used+0x1011>
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x65(%eax)
jb     804e604 <_IO_stdin_used+0x1060>
outsb  %gs:(%esi),(%dx)
je     804e606 <_IO_stdin_used+0x1062>
cmp    %gs:(%bx,%si),%ah
and    $0xa69,%eax
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e5f7 <_IO_stdin_used+0x1053>
jb     804e634 <_IO_stdin_used+0x1090>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6d6f6320,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edi)
and    $0xa0d2773,%eax
add    %bl,0x25(%ebx)
jae    804e635 <_IO_stdin_used+0x1091>
and    %ah,0x342e3534
xor    $0x6f633a73,%eax
jne    804e651 <_IO_stdin_used+0x10ad>
and    %ch,%fs:0x6f(%esi)
je     804e60b <_IO_stdin_used+0x1067>
jb     804e662 <_IO_stdin_used+0x10be>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
cmp    %fs:(%eax),%ah
and    $0xa0d6d,%eax
add    %al,(%eax)
add    %bl,0x25(%ebx)
jae    804e661 <_IO_stdin_used+0x10bd>
and    %ah,0x342e3534
xor    $0x61703a73,%eax
jae    804e684 <_IO_stdin_used+0x10e0>
ja     804e682 <_IO_stdin_used+0x10de>
jb     804e679 <_IO_stdin_used+0x10d5>
and    %ah,0x6e(%ecx)
jae    804e691 <_IO_stdin_used+0x10ed>
gs
jb     804e63d <_IO_stdin_used+0x1099>
popaw
imul   $0xa0d65,0x72(%ebp,%esi,2),%ebp
add    %bl,0x25(%ebx)
jae    804e689 <_IO_stdin_used+0x10e5>
and    %ah,0x342e3534
xor    $0x61643a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     804e660 <_IO_stdin_used+0x10bc>
popa
jbe    804e6a4 <_IO_stdin_used+0x1100>
imul   $0x202c656c,0x62(%ecx,%eiz,2),%ebp
jb     804e6c2 <_IO_stdin_used+0x111e>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6d6f6320,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%edi)
and    %ch,0x75(%edi)
jb     804e682 <_IO_stdin_used+0x10de>
outsl  %ds:(%esi),(%dx)
ja     804e6d3 <_IO_stdin_used+0x112f>
or     $0x255b000a,%eax
jae    804e6c9 <_IO_stdin_used+0x1125>
and    %ah,0x342e3534
xor    $0x6f633a73,%eax
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x61(%edi)
jae    804e6a1 <_IO_stdin_used+0x10fd>
jae    804e6f8 <_IO_stdin_used+0x1154>
arpl   %sp,0x65(%ebx)
jae    804e6fb <_IO_stdin_used+0x1157>
data16
jne    804e6f7 <_IO_stdin_used+0x1153>
or     $0xa,%eax
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e6d7 <_IO_stdin_used+0x1133>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x65(%ecx,%ebp,2)
and    %dh,%fs:0x69(%edi)
je     804e716 <_IO_stdin_used+0x1172>
and    %dh,0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0xa0d73
add    %ah,0x6e(%ecx)
jae    804e737 <_IO_stdin_used+0x1193>
gs
jb     804e722 <_IO_stdin_used+0x117e>
jae    804e739 <_IO_stdin_used+0x1195>
popa
je     804e72d <_IO_stdin_used+0x1189>
sub    $0x6d6f633e,%eax
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%ecx)
cmp    $0x76282820,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x293029,0x2a(%eax,%eiz,1),%esp
add    %al,(%eax)
add    %bl,0x25(%ebx)
jae    804e745 <_IO_stdin_used+0x11a1>
and    %ah,0x342e3534
xor    $0x6e6f3a73,%eax
and    %ch,0x75(%ebp)
insb   (%dx),%es:(%edi)
je     804e762 <_IO_stdin_used+0x11be>
jo     804e767 <_IO_stdin_used+0x11c3>
and    %dh,%gs:0x61(%eax)
jae    804e774 <_IO_stdin_used+0x11d0>
ja     804e772 <_IO_stdin_used+0x11ce>
jb     804e769 <_IO_stdin_used+0x11c5>
and    %ah,0x6e(%ecx)
jae    804e781 <_IO_stdin_used+0x11dd>
gs
jb     804e780 <_IO_stdin_used+0x11dc>
or     $0x255b000a,%eax
jae    804e771 <_IO_stdin_used+0x11cd>
and    %ah,0x342e3534
xor    $0x61643a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x61(%eax)
jae    804e748 <_IO_stdin_used+0x11a4>
popa
and    %ah,0x65(%esi)
ja     804e74e <_IO_stdin_used+0x11aa>
arpl   %sp,0x6e(%ecx)
imul   $0x61702065,%fs:0x74(%ecx,%eiz,2),%esp
61
jae    804e7af <_IO_stdin_used+0x120b>
ja     804e7ad <_IO_stdin_used+0x1209>
jb     804e7a4 <_IO_stdin_used+0x1200>
jae    804e762 <_IO_stdin_used+0x11be>
outsw  %ds:(%esi),(%dx)
jb     804e766 <_IO_stdin_used+0x11c2>
jne    804e7bb <_IO_stdin_used+0x1217>
and    %dh,0x20(%edi,%ebp,2)
je     804e7c0 <_IO_stdin_used+0x121c>
jns    804e75d <_IO_stdin_used+0x11b9>
or     (%eax),%al
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804e79b <_IO_stdin_used+0x11f7>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x61(%eax)
jae    804e78c <_IO_stdin_used+0x11e8>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x61702065,%fs:0x74(%ecx,%eiz,2),%esp
61
jae    804e7f0 <_IO_stdin_used+0x124c>
ja     804e7ee <_IO_stdin_used+0x124a>
jb     804e7e5 <_IO_stdin_used+0x1241>
jae    804e7a3 <_IO_stdin_used+0x11ff>
outsw  %ds:(%esi),(%dx)
jb     804e7a7 <_IO_stdin_used+0x1203>
jne    804e7fc <_IO_stdin_used+0x1258>
and    %dh,0x20(%edi,%ebp,2)
je     804e801 <_IO_stdin_used+0x125d>
jns    804e79e <_IO_stdin_used+0x11fa>
or     (%eax),%al
add    %dl,0x6c(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e7be <_IO_stdin_used+0x121a>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
jb     804e80f <_IO_stdin_used+0x126b>
and    %dh,0x65(%edi)
jb     804e814 <_IO_stdin_used+0x1270>
and    %ah,0x72(%ebp)
jb     804e823 <_IO_stdin_used+0x127f>
jb     804e829 <_IO_stdin_used+0x1285>
and    %ah,0x72(%ebp,%esi,2)
imul   $0x6f6f6220,0x67(%esi),%ebp
je     804e7c3 <_IO_stdin_used+0x121f>
add    %dl,0x6c(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e7ee <_IO_stdin_used+0x124a>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %dh,0x70(%ebp)
fs
popa
je     804e843 <_IO_stdin_used+0x129f>
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804e858 <_IO_stdin_used+0x12b4>
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e80a <_IO_stdin_used+0x1266>
jo     804e85e <_IO_stdin_used+0x12ba>
outsl  %ds:(%esi),(%dx)
addr16 jb 804e855 <_IO_stdin_used+0x12b1>
jae    804e865 <_IO_stdin_used+0x12c1>
add    %al,(%eax)
push   %edx
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    804e85f <_IO_stdin_used+0x12bb>
and    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804e869 <_IO_stdin_used+0x12c5>
je     804e86b <_IO_stdin_used+0x12c7>
jbe    804e86d <_IO_stdin_used+0x12c9>
je     804e87f <_IO_stdin_used+0x12db>
and    %dh,0x20(%edi,%ebp,2)
popa
and    %ch,0x65(%ebx)
jns    804e883 <_IO_stdin_used+0x12df>
je     804e884 <_IO_stdin_used+0x12e0>
outsl  %ds:(%esi),(%dx)
imul   $0x0,0x0(%ebp),%esp
add    %dl,0x6c(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e842 <_IO_stdin_used+0x129e>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e84e <_IO_stdin_used+0x12aa>
imul   $0x7379,0x73(%ebp,%eiz,2),%bp
je     804e89c <_IO_stdin_used+0x12f8>
insl   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%ebp)
jne    804e8ae <_IO_stdin_used+0x130a>
je     804e8a7 <_IO_stdin_used+0x1303>
and    %dh,%fs:0x65(%edx)
popa
fs
sub    $0x74697277,%eax
add    %al,%gs:(%eax)
inc    %ebx
push   $0x206b6365
imul   $0x746f6f62,0x20(%esi),%esp
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x61(%eax)
jae    804e889 <_IO_stdin_used+0x12e5>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x63(%ecx)
je     804e8d9 <_IO_stdin_used+0x1335>
jbe    804e8d7 <_IO_stdin_used+0x1333>
and    %dh,0x74(%esi)
add    %al,(%eax)
add    %al,0x68(%ebx)
arpl   %bp,%gs:0x20(%ebx)
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e8a6 <_IO_stdin_used+0x1302>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x73(%ecx)
and    %dh,0x75(%edx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c655400,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e8c2 <_IO_stdin_used+0x131e>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%eax,%ebp,2)
je     804e8ce <_IO_stdin_used+0x132a>
outsb  %ds:(%esi),(%dx)
gs
ja     804e8d2 <_IO_stdin_used+0x132e>
jb     804e923 <_IO_stdin_used+0x137f>
outsl  %ds:(%esi),(%dx)
je     804e8d7 <_IO_stdin_used+0x1333>
imul   $0x7379,0x73(%ebp,%eiz,2),%bp
je     804e925 <_IO_stdin_used+0x1381>
insl   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%ebp)
jne    804e937 <_IO_stdin_used+0x1393>
je     804e930 <_IO_stdin_used+0x138c>
add    %al,%fs:(%eax)
add    %al,(%eax)
inc    %edi
gs
je     804e8f4 <_IO_stdin_used+0x1350>
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    804e8fe <_IO_stdin_used+0x135a>
ja     804e948 <_IO_stdin_used+0x13a4>
gs
jb     804e948 <_IO_stdin_used+0x13a4>
and    %dh,0x70(%ebx)
insb   (%dx),%es:(%edi)
popa
jae    804e952 <_IO_stdin_used+0x13ae>
and    %dh,0x6c(%eax)
jne    804e956 <_IO_stdin_used+0x13b2>
imul   $0x65726120,0x73(%esi),%ebp
and    %ch,0x6e(%ecx)
jae    804e96f <_IO_stdin_used+0x13cb>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs add %al,%fs:%gs:(%eax)
add    %al,(%eax)
push   %esp
push   $0x65702065
jb     804e96f <_IO_stdin_used+0x13cb>
outsb  %gs:(%esi),(%dx)
je     804e971 <_IO_stdin_used+0x13cd>
and    %dh,%gs:0x72(%bx,%si)
outsl  %ds:(%esi),(%dx)
addr16 jb 804e97e <_IO_stdin_used+0x13da>
jae    804e98e <_IO_stdin_used+0x13ea>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x70(%ebp)
fs
popa
je     804e98e <_IO_stdin_used+0x13ea>
jae    804e92b <_IO_stdin_used+0x1387>
add    %dl,0x6c(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804e9b5 <_IO_stdin_used+0x1411>
and    %dh,0x70(%ebp)
fs
popa
je     804e9ad <_IO_stdin_used+0x1409>
jae    804e96a <_IO_stdin_used+0x13c6>
jo     804e9be <_IO_stdin_used+0x141a>
outsl  %ds:(%esi),(%dx)
addr16 jb 804e9b5 <_IO_stdin_used+0x1411>
jae    804e9c5 <_IO_stdin_used+0x1421>
add    %al,(%eax)
push   %esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x75(%ebx)
jb     804e9da <_IO_stdin_used+0x1436>
outsb  %gs:(%esi),(%dx)
je     804e98c <_IO_stdin_used+0x13e8>
bound  %ebp,0x6f(%edi)
je     804e991 <_IO_stdin_used+0x13ed>
jae    804e9e7 <_IO_stdin_used+0x1443>
popa
je     804e9eb <_IO_stdin_used+0x1447>
jae    804e978 <_IO_stdin_used+0x13d4>
push   %esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804e9fd <_IO_stdin_used+0x1459>
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804e9af <_IO_stdin_used+0x140b>
jae    804ea05 <_IO_stdin_used+0x1461>
popa
je     804ea09 <_IO_stdin_used+0x1465>
jae    804e9b6 <_IO_stdin_used+0x1412>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
addr16
gs
jae    804e99e <_IO_stdin_used+0x13fa>
add    %al,(%eax)
push   %edx
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804e9c5 <_IO_stdin_used+0x1421>
imul   $0x7379,0x73(%ebp,%eiz,2),%bp
je     804ea13 <_IO_stdin_used+0x146f>
insl   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
and    %ch,0x6e(%edi,%ebp,2)
addr16
gs
jb     804e9dd <_IO_stdin_used+0x1439>
jb     804ea24 <_IO_stdin_used+0x1480>
popa
fs
sub    $0x796c6e6f,%eax
add    %al,(%eax)
push   %edx
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804e9ed <_IO_stdin_used+0x1449>
imul   $0x7379,0x73(%ebp,%eiz,2),%bp
je     804ea3b <_IO_stdin_used+0x1497>
insl   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804ea54 <_IO_stdin_used+0x14b0>
and    %dh,0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
add    %al,%gs:(%bx,%si)
push   %esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804ea71 <_IO_stdin_used+0x14cd>
and    %dh,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804ea23 <_IO_stdin_used+0x147f>
imul   $0x7379,0x73(%ebp,%eiz,2),%bp
je     804ea71 <_IO_stdin_used+0x14cd>
insl   (%dx),%es:(%edi)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
addr16
gs
jae    804ea16 <_IO_stdin_used+0x1472>
add    %al,(%eax)
push   %esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jae    804ea91 <_IO_stdin_used+0x14ed>
outsl  %ds:(%esi),(%dx)
ja     804ea4c <_IO_stdin_used+0x14a8>
jae    804ea9e <_IO_stdin_used+0x14fa>
insb   (%dx),%es:(%edi)
popa
jae    804ea9a <_IO_stdin_used+0x14f6>
and    %dh,0x63(%ebx)
jb     804ea9c <_IO_stdin_used+0x14f8>
outsb  %gs:(%esi),(%dx)
add    %al,(%eax)
add    %dl,0x6c(%ebp,%eiz,2)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%ecx,%eiz,2)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
push   $0x20656469
jae    804eac2 <_IO_stdin_used+0x151e>
insb   (%dx),%es:(%edi)
popa
jae    804eabe <_IO_stdin_used+0x151a>
and    %dh,0x63(%ebx)
jb     804eac0 <_IO_stdin_used+0x151c>
outsb  %gs:(%esi),(%dx)
add    %al,(%eax)
add    %al,0x6e(%edi,%ebp,2)
daa
je     804ea86 <_IO_stdin_used+0x14e2>
jo     804eac9 <_IO_stdin_used+0x1525>
jne    804eadd <_IO_stdin_used+0x1539>
and    %ah,%gs:0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804ea91 <_IO_stdin_used+0x14ed>
jo     804eae5 <_IO_stdin_used+0x1541>
outsl  %ds:(%esi),(%dx)
addr16 jb 804eadc <_IO_stdin_used+0x1538>
jae    804eaec <_IO_stdin_used+0x1548>
and    %ah,0x61(%edx)
jb     804ea9e <_IO_stdin_used+0x14fa>
ja     804eae8 <_IO_stdin_used+0x1544>
imul   $0x696b7361,0x20(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
add    %al,(%bx,%si)
dec    %esi
jne    804eafc <_IO_stdin_used+0x1558>
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %dh,0x6d(%ecx,%ebp,2)
gs
jae    804eabc <_IO_stdin_used+0x1518>
je     804eb0d <_IO_stdin_used+0x1569>
and    %ah,0x73(%ecx)
imul   $0x62,(%eax),%esp
outsw  %gs:(%esi),(%dx)
jb     804eb0e <_IO_stdin_used+0x156a>
and    %ah,0x69(%edi)
jbe    804eb17 <_IO_stdin_used+0x1573>
outsb  %ds:(%esi),(%dx)
and    %dh,0x70(%di)
and    %ch,(%eax)
jb     804eb1c <_IO_stdin_used+0x1578>
jno    804eb2e <_IO_stdin_used+0x158a>
imul   $0x2d2d2073,0x65(%edx),%esi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
sub    %eax,%fs:(%eax)
add    %al,(%eax)
add    %cl,0x65(%ebp)
jae    804eb43 <_IO_stdin_used+0x159f>
popa
and    %dh,%gs:0x6f(%si)
and    %ah,0x73(%ecx,%ebp,2)
jo     804eb48 <_IO_stdin_used+0x15a4>
popa
jns    804eaff <_IO_stdin_used+0x155b>
ja     804eb49 <_IO_stdin_used+0x15a5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x73(%ecx)
imul   $0x67,0x6e(%ecx),%ebp
and    %ah,0x6f(%esi)
jb     804eb0f <_IO_stdin_used+0x156b>
jo     804eb52 <_IO_stdin_used+0x15ae>
jae    804eb66 <_IO_stdin_used+0x15c2>
ja     804eb64 <_IO_stdin_used+0x15c0>
jb     804eb5b <_IO_stdin_used+0x15b7>
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x20(%edi,%ebp,2)
jae    804eb6a <_IO_stdin_used+0x15c6>
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x61(%eax)
jae    804eb7f <_IO_stdin_used+0x15db>
ja     804eb7d <_IO_stdin_used+0x15d9>
jb     804eb74 <_IO_stdin_used+0x15d0>
and    %dh,0x20(%edi,%ebp,2)
jbe    804eb7f <_IO_stdin_used+0x15db>
popa
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804eb84 <_IO_stdin_used+0x15e0>
and    %ch,0x6e(%ecx)
jo     804eb9a <_IO_stdin_used+0x15f6>
je     804eb27 <_IO_stdin_used+0x1583>
add    %cl,0x65(%ebp)
jae    804eb9f <_IO_stdin_used+0x15fb>
popa
and    %dh,%gs:0x6f(%si)
and    %ah,0x73(%ecx,%ebp,2)
jo     804eba4 <_IO_stdin_used+0x1600>
popa
jns    804eb5b <_IO_stdin_used+0x15b7>
ja     804eba5 <_IO_stdin_used+0x1601>
outsb  %gs:(%esi),(%dx)
and    %ah,0x73(%ecx)
imul   $0x67,0x6e(%ecx),%ebp
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x75(%ecx)
gs
jae    804ebc4 <_IO_stdin_used+0x1620>
imul   $0x6d6f4300,0x6e(%edi),%ebp
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x20(%edi,%ebp,2)
jae    804ebc6 <_IO_stdin_used+0x1622>
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x65(%eax,%ebp,2)
and    %ah,0x6e(%ecx)
jae    804ebe3 <_IO_stdin_used+0x163f>
gs
jb     804eb8f <_IO_stdin_used+0x15eb>
je     804ebe0 <_IO_stdin_used+0x163c>
and    %dh,0x69(%esi)
popa
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804ebe2 <_IO_stdin_used+0x163e>
and    %ch,0x6e(%ecx)
jo     804ebf8 <_IO_stdin_used+0x1654>
je     804eb85 <_IO_stdin_used+0x15e1>
add    %al,(%eax)
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x20(%edi,%ebp,2)
jae    804ebfa <_IO_stdin_used+0x1656>
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x65(%ebx)
jns    804ec0f <_IO_stdin_used+0x166b>
je     804ec10 <_IO_stdin_used+0x166c>
outsl  %ds:(%esi),(%dx)
imul   $0x74,0x20(%ebp),%esp
outsl  %ds:(%esi),(%dx)
and    %dh,0x69(%esi)
popa
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804ec15 <_IO_stdin_used+0x1671>
and    %ch,0x6e(%ecx)
jo     804ec2b <_IO_stdin_used+0x1687>
je     804ebb8 <_IO_stdin_used+0x1614>
inc    %edx
arpl   %bp,%gs:0x6d(%edi)
and    %dh,%gs:0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jae    804ec2d <_IO_stdin_used+0x1689>
je     804ec2f <_IO_stdin_used+0x168b>
jbe    804ec2d <_IO_stdin_used+0x1689>
and    %dh,0x20(%edi,%ebp,2)
popa
and    %ch,0x65(%ebx)
jns    804ec45 <_IO_stdin_used+0x16a1>
je     804ec46 <_IO_stdin_used+0x16a2>
outsl  %ds:(%esi),(%dx)
imul   $0x54,0x0(%ebp),%esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804ec02 <_IO_stdin_used+0x165e>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
fs
gs
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804ec5b <_IO_stdin_used+0x16b7>
add    %al,(%eax)
push   %esp
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     804ec22 <_IO_stdin_used+0x167e>
fs
popa
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jb     804ec73 <_IO_stdin_used+0x16cf>
popa
arpl   %si,0x76(%ecx,%ebp,2)
popa
je     804ec7b <_IO_stdin_used+0x16d7>
add    %al,(%eax)
inc    %esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
daa
je     804ec3e <_IO_stdin_used+0x169a>
gs
js     804ec91 <_IO_stdin_used+0x16ed>
insb   (%dx),%es:(%edi)
imul   $0x20796c74,0x69(%ebx),%esp
push   $0x20656469
bound  %ebp,0x6f(%edi)
je     804ec53 <_IO_stdin_used+0x16af>
jae    804eca5 <_IO_stdin_used+0x1701>
insb   (%dx),%es:(%edi)
popa
jae    804eca1 <_IO_stdin_used+0x16fd>
and    %ch,0x6e(%edi)
and    %ah,0x78(%ebp)
imul   $0x73255b00,0x0(%eax,%eax,1),%esi
pop    %ebp
and    %ah,0x342e3534
xor    $0x706f3a73,%eax
outsb  %gs:(%esi),(%dx)
imul   $0x72702f20,0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
arpl   %bp,0x64(%ebp)
insb   (%dx),%es:(%edi)
imul   $0xa0d,0x65(%esi),%ebp
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804ecb3 <_IO_stdin_used+0x170f>
arpl   %bp,0x75(%edi)
insb   (%dx),%es:(%edi)
outsb  %fs:(%esi),(%dx)
daa
je     804eca2 <_IO_stdin_used+0x16fe>
outsl  %ds:(%esi),(%dx)
jo     804ecea <_IO_stdin_used+0x1746>
outsb  %ds:(%esi),(%dx)
and    %ch,0x74(%ecx)
cmp    (%eax),%ah
and    $0xa0d6d,%eax
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804ecd7 <_IO_stdin_used+0x1733>
jb     804ed04 <_IO_stdin_used+0x1760>
popa
imul   $0x72656b20,%fs:0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
gs
or     $0x5b00000a,%eax
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804ed03 <_IO_stdin_used+0x175f>
arpl   %bp,0x75(%edi)
insb   (%dx),%es:(%edi)
outsb  %fs:(%esi),(%dx)
daa
je     804ecf2 <_IO_stdin_used+0x174e>
jb     804ed39 <_IO_stdin_used+0x1795>
popa
and    %ch,%fs:0x74(%ecx)
cmp    (%eax),%ah
and    $0xa0d6d,%eax
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804ed27 <_IO_stdin_used+0x1783>
dec    %ebx
gs
jb     804ed5f <_IO_stdin_used+0x17bb>
gs
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ch,%gs:0x73(%ecx)
cmp    (%eax),%ah
daa
and    $0xa0d2773,%eax
add    %bl,0x25(%ebx)
jae    804ed6d <_IO_stdin_used+0x17c9>
and    %ah,0x342e3534
xor    $0x61643a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     804ed44 <_IO_stdin_used+0x17a0>
jb     804ed9b <_IO_stdin_used+0x17f7>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0xa0d,0x67(%esi),%ebp
add    %bl,0x25(%ebx)
jae    804ed91 <_IO_stdin_used+0x17ed>
and    %ah,0x342e3534
xor    $0x61683a73,%eax
jae    804ed61 <_IO_stdin_used+0x17bd>
popa
arpl   %si,0x76(%ecx,%ebp,2)
and    %dh,%gs:0x74(%esi)
aas
and    %ah,0x61(%esi)
imul   $0xa0d,0x64(%ebp,%eiz,2),%ebp
add    %al,(%eax)
pop    %ebx
and    $0x25205d73,%eax
xor    $0x35,%al
cs
xor    $0x35,%al
jae    804ed9f <_IO_stdin_used+0x17fb>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
gs and %dh,%fs:%gs:0x20(%edi,%ebp,2)
ja     804edd3 <_IO_stdin_used+0x182f>
imul   $0x65670000,0xa(%ebp,%ecx,1),%esi
je     804eddb <_IO_stdin_used+0x1837>
imul   $0x6e,0x72(%ebp),%esp
gs
insb   (%dx),%es:(%edi)
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x5f6e6f00,0x65(%esi),%ebp
insl   (%dx),%es:(%edi)
jne    804ee02 <_IO_stdin_used+0x185e>
je     804ee01 <_IO_stdin_used+0x185d>
jo     804ee06 <_IO_stdin_used+0x1862>
gs
pop    %edi
jo     804edff <_IO_stdin_used+0x185b>
jae    804ee13 <_IO_stdin_used+0x186f>
ja     804ee11 <_IO_stdin_used+0x186d>
jb     804ee08 <_IO_stdin_used+0x1864>
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
jae    804ee20 <_IO_stdin_used+0x187c>
gs
jb     804ee1f <_IO_stdin_used+0x187b>
add    %ch,0x6e(%edi)
pop    %edi
insl   (%dx),%es:(%edi)
jne    804ee1f <_IO_stdin_used+0x187b>
je     804ee1e <_IO_stdin_used+0x187a>
jo     804ee23 <_IO_stdin_used+0x187f>
gs
pop    %edi
jo     804ee1c <_IO_stdin_used+0x1878>
jae    804ee30 <_IO_stdin_used+0x188c>
ja     804ee2e <_IO_stdin_used+0x188a>
jb     804ee25 <_IO_stdin_used+0x1881>
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
jae    804ee3d <_IO_stdin_used+0x1899>
gs
jb     804ee3c <_IO_stdin_used+0x1898>
add    %ch,0x6e(%edi)
pop    %edi
jo     804ee30 <_IO_stdin_used+0x188c>
jae    804ee44 <_IO_stdin_used+0x18a0>
ja     804ee42 <_IO_stdin_used+0x189e>
jb     804ee39 <_IO_stdin_used+0x1895>
pop    %edi
jb     804ee3d <_IO_stdin_used+0x1899>
jno    804ee4f <_IO_stdin_used+0x18ab>
gs
jae    804ee51 <_IO_stdin_used+0x18ad>
pop    %edi
gs
js     804ee46 <_IO_stdin_used+0x18a2>
arpl   %si,0x74(%ebp)
add    %ch,%gs:0x6e(%edi)
pop    %edi
jo     804ee4c <_IO_stdin_used+0x18a8>
jae    804ee60 <_IO_stdin_used+0x18bc>
ja     804ee5e <_IO_stdin_used+0x18ba>
jb     804ee55 <_IO_stdin_used+0x18b1>
pop    %edi
jb     804ee59 <_IO_stdin_used+0x18b5>
jno    804ee6b <_IO_stdin_used+0x18c7>
gs
jae    804ee6d <_IO_stdin_used+0x18c9>
add    %ch,0x6e(%edi)
pop    %edi
imul   $0x656e6e6f,%fs:0x63(%ebx),%esi
arpl   %si,0x73(%eax,%eax,1)
jo     804ee77 <_IO_stdin_used+0x18d3>
imul   $0x6e697274,0x73(%edi,%ebx,2),%esi
add    %ah,0x6e(%bx,%di)
jae    804ee90 <_IO_stdin_used+0x18ec>
gs
jb     804ee7b <_IO_stdin_used+0x18d7>
jbe    804ee87 <_IO_stdin_used+0x18e3>
popa
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x6e(%edi)
pop    %edi
jo     804ee8e <_IO_stdin_used+0x18ea>
jae    804eea2 <_IO_stdin_used+0x18fe>
ja     804eea0 <_IO_stdin_used+0x18fc>
jb     804ee97 <_IO_stdin_used+0x18f3>
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
jae    804eeaf <_IO_stdin_used+0x190b>
gs
jb     804ee9a <_IO_stdin_used+0x18f6>
popaw
imul   $0x616d0065,0x72(%ebp,%esi,2),%ebp
.byte 0x69
outsb  %ds:(%esi),(%dx)
add    %ebx,(%ebx)
add    (%ebx),%edi
inc    %eax
add    (%eax),%al
add    %al,0x0(%edi)
add    %al,(%eax)
enter  $0xffa0,$0xff
pop    %esp
add    (%eax),%al
add    %cl,(%eax)
movsl  %ds:(%esi),%es:(%edi)
(bad)
lcall  *0xe(%eax)
add    %al,(%eax)
cwtl
mov    $0xff,%bh
incl   -0x67fffffe(%eax)
mov    $0x2ecffff,%ecx
add    %al,(%eax)
enter  $0xffbd,$0xff
pop    %eax
add    (%eax),%eax
add    %bl,(%eax)
mov    $0x378ffff,%esi
add    %al,(%eax)
fdivrs 0x3d0ffff(%esi)
add    %al,(%eax)
cwtl
mov    $0x428ffff,%edi
add    %al,(%eax)
js     804ee58 <_IO_stdin_used+0x18b4>
(bad)
ljmp   *0x4(%eax)
add    %al,(%eax)
fadd   %st(2),%st
(bad)
decl   -0x3c780000(%esp,%eax,1)
(bad)
inc    %esp
add    $0x0,%al
add    %ch,%al
ret
(bad)
(bad)
call   4004eeb9 <stderr+0x37ffdd99>
(bad)
(bad)
call   *-0x39880000(,%eax,1)
(bad)
decl   0x0(%ebp,%eax,1)
add    %bl,%al
(bad)
(bad)
pushl  0x5(%eax)
add    %al,(%eax)
cmp    %al,%bh
(bad)
lcall  *-0x38680000(%ebp,%eax,1)
(bad)
dec    %eax
add    $0xc7f80000,%eax
(bad)
push   %esp
add    $0xc8880000,%eax
(bad)
jmp    *(%eax)
push   %es
add    %al,(%eax)
sbb    %cl,%cl
(bad)
decl   0x0(%esi,%eax,1)
add    %ch,0x78ffffc9(%eax)
push   %es
add    %al,(%eax)
or     %cl,%dl
(bad)
lcall  *-0x35980000(%esi,%eax,1)
(bad)
dec    %eax
push   %es
add    %al,(%eax)
enter  $0xffca,$0xff
in     (%dx),%al
push   %es
add    %al,(%eax)
sub    %cl,%bl
(bad)
lcall  *(%eax)
pop    %es
add    %al,(%eax)
mov    %cl,%bl
(bad)
incl   0x0(%edi,%eax,1)
add    %ch,%al
lret
(bad)
pushl  0x7(%eax)
add    %al,(%eax)
dec    %eax
int3
(bad)
call   *-0x33580000(%edi,%eax,1)
(bad)
(bad)
mov    $0x8000007,%eax
int    $0xff
(bad)
faddl  (%edi)
add    %al,(%eax)
push   $0xffffcd
or     %al,(%eax)
add    %bl,%al
int    $0xff
lcall  *(%eax,%ecx,1)
add    %al,(%eax)
or     %cl,%dh
(bad)
(bad)
cmp    %cl,(%eax)
add    %al,(%eax)
cmp    %cl,%dh
(bad)
call   *0x0(%eax,%ecx,1)
add    %ch,-0x32(%eax)
(bad)
pushl  0x8(%eax)
add    %al,(%eax)
cwtl
into
(bad)
decl   -0x31080000(%eax,%ecx,1)
(bad)
pushl  0x48000008(%eax)
iret
(bad)
call   *%esp
or     %al,(%eax)
add    %ch,(%eax)
sar    %bh
incl   (%ecx,%ecx,1)
add    %al,(%eax)
pop    %eax
sar    %bh
lcall  *(%ecx,%ecx,1)
add    %al,(%eax)
mov    %dl,%al
(bad)
pushl  (%ecx,%ecx,1)
add    %al,(%eax)
mov    $0x4cffffd0,%eax
or     %eax,(%eax)
add    %bl,%al
sar    %bh
jmp    *0x0(%ecx,%ecx,1)
add    %bh,%al
sar    %bh
(bad)
jl     804efbb <_IO_stdin_used+0x1a17>
add    %al,(%eax)
enter  $0xffd1,$0xff
mov    $0xe8000009,%esp
sar    %edi
call   *%eax
or     %eax,(%eax)
add    %cl,(%eax)
sar    %cl,%bh
jmp    *%esp
or     %eax,(%eax)
add    %bh,(%eax)
sar    %cl,%bh
(bad)
cld
or     %eax,(%eax)
add    %ch,0x20ffffd2(%eax)
or     (%eax),%al
add    %bl,(%eax)
sar    %cl,%edi
incl   0x0(%edx,%ecx,1)
add    %cl,0x68ffffd3(%eax)
or     (%eax),%al
add    %bh,-0x7f00002d(%eax)
or     (%eax),%al
add    %ch,%al
sar    %cl,%edi
lcall  *0x1800000a(%eax)
aam    $0xff
pushl  -0x47fffff6(%eax)
aam    $0xff
call   *%esp
or     (%eax),%al
add    %bh,(%eax)
aad    $0xff
(bad)
clc
or     (%eax),%al
add    %bh,0x1cffffd5(%eax)
or     (%eax),%eax
add    %bh,%al
aad    $0xff
pushl  (%ebx,%ecx,1)
add    %al,(%eax)
clc
(bad)
(bad)
ljmp   *0x0(%ebx,%ecx,1)
add    %bl,%al
xlat   %ds:(%ebx)
(bad)
inc    %eax
or     (%eax),%eax
add    %ch,-0x27(%eax)
(bad)
decl   (%eax)
or     $0x0,%al
add    %cl,-0x26(%eax)
(bad)
incl   0x0(%esp,%ecx,1)
add    %bl,-0x25(%eax)
(bad)
incl   -0x23f80000(%esp,%ecx,1)
(bad)
ljmp   *0x1800000c(%eax)
(bad)
incl   (%eax)
or     $0xe2080000,%eax
(bad)
pushl  0xd(%eax)
add    %al,(%eax)
js     804f048 <_IO_stdin_used+0x1aa4>
(bad)
call   *-0x1b880000(%ebp,%ecx,1)
(bad)
(bad)
in     (%dx),%al
or     $0xe5d80000,%eax
(bad)
lcall  *(%esi,%ecx,1)
add    %al,(%eax)
mov    $0x88ffffe6,%eax
push   %cs
add    %al,(%eax)
sub    %ah,%bh
(bad)
inc    %esp
push   %cs
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804f0a3 <_IO_stdin_used+0x1aff>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
fs
sahf
(bad)
incl   0x4(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804f0c3 <_IO_stdin_used+0x1b1f>
js     804f0c1 <_IO_stdin_used+0x1b1d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
push   $0x40000000
add    %al,(%eax)
add    %dl,(%eax)
mov    $0xff,%ch
push   %edi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x6d,0x2500e45
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
pop    %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x49,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %al,(%eax)
add    %ah,0x421ffff(%esi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x78500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%ebx),%eax
sbb    $0x140e0a01,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%eax),%ebx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
push   $0x42ffffba
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
jp     804f1c9 <_IO_stdin_used+0x1c25>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %bh,(%eax)
add    %eax,(%eax)
add    %bl,-0x44000046(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x52300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
jb     804f20b <_IO_stdin_used+0x1c67>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dl,0x1(%eax)
mov    $0xbbffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x52300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
jb     804f263 <_IO_stdin_used+0x1cbf>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
call   7004f27a <stderr+0x67ffe15a>
mov    $0x2deffff,%ebx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3c,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%esp
add    %al,(%eax)
add    %ch,(%eax)
add    (%eax),%al
add    %cl,(%eax)
mov    $0x56ffff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
insb   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
dec    %esp
add    (%eax),%al
add    %al,-0x1(%esi,%edi,4)
ljmp   *0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %al,-0x41440000(%edx,%eax,1)
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xe(%edi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
test   $0x2,%al
add    %al,(%eax)
clc
mov    $0x45ffff,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
jae    804f355 <_IO_stdin_used+0x1db1>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
aam    $0x2
add    %al,(%eax)
sbb    $0xbf,%al
(bad)
incl   0x2(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ecx),%ah
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%ebx,%eax,1)
add    %al,(%eax)
and    $0xc1,%al
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
xor    %al,(%ebx)
add    %al,(%eax)
pusha
sar    $0xff,%edi
pop    %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %bl,0x0(%ebx,%eax,1)
add    %dl,0x5cffff(%ecx,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %cl,-0x37fffffd(%eax)
sar    $0xff,%edi
pop    %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %dh,-0x3e040000(%ebx,%eax,1)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xa(%ebx)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,%al
add    (%eax),%eax
add    %ah,-0x3e(%eax)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xa(%ebx)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %cl,(%esp,%eax,1)
add    %al,(%eax)
(bad)
test   %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xa(%ebx)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%esp
add    %al,(%eax)
add    %bh,(%eax)
add    $0x0,%al
add    %ch,(%eax)
ret
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
pop    %esp
add    $0x0,%al
add    %ah,-0x1(%ebx,%eax,8)
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%esp
add    %al,(%eax)
add    %cl,-0x67fffffc(%eax)
ret
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    $0x0,%al
add    %dl,%ah
ret
(bad)
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %bl,%al
add    $0x0,%al
add    %cl,(%eax)
(bad)
(bad)
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %al,-0x3bc40000(,%eax,1)
(bad)
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%edi)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%esp
add    %al,(%eax)
add    %dh,(%eax)
add    $0xc4700000,%eax
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
push   %esp
add    $0xc4ac0000,%eax
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
js     804f60b <_IO_stdin_used+0x2067>
add    %al,(%eax)
call   6104f5d1 <stderr+0x58ffe4b1>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
pushf
add    $0xc5240000,%eax
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
rolb   $0xff,0xc5600000
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xa(%edi)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    $0xc5b40000,%eax
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec36402(%ebx)
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %bh,%al
add    $0xc5c80000,%eax
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec36402(%ebx)
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %dl,(%esi,%eax,1)
add    %al,(%eax)
fadd   %st,%st(5)
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec36402(%ebx)
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
push   %es
add    %al,(%eax)
lock (bad)
sub    (%eax),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xec36402(%ebx)
add    $0x0,%al
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,0x0(%esi,%eax,1)
add    %al,(%esi,%eax,8)
(bad)
call   *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
jo     804f704 <_IO_stdin_used+0x2160>
add    %al,(%eax)
inc    %eax
(bad)
(bad)
decl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
popa
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
push   %es
add    %al,(%eax)
insb   (%dx),%es:(%edi)
(bad)
(bad)
call   *%esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
bound  %ecx,(%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
les    (%esi),%eax
add    %al,(%eax)
sbb    $0xc7,%al
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
faddl  (%esi)
add    %al,(%eax)
xor    $0xc7,%al
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
hlt
push   %es
add    %al,(%eax)
dec    %esp
(bad)
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
or     $0x7,%al
add    %al,(%eax)
fs
(bad)
(bad)
lcall  *0x0
inc    %ebx
push   %cs
and    %bl,0xe(%ecx)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
and    $0x7,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
(bad)
(bad)
lcall  *0x0
inc    %ebx
push   %cs
and    %bl,0xe(%ecx)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
cmp    $0x7,%al
add    %al,(%eax)
je     804f795 <_IO_stdin_used+0x21f1>
(bad)
dec    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa1,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
jl     804f811 <_IO_stdin_used+0x226d>
add    %al,(%eax)
add    $0xc8,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x10000007(%eax)
enter  $0xffff,$0x19
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
pop    %es
add    %al,(%eax)
sbb    $0xc8,%al
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    $0x34000007,%esp
enter  $0xffff,$0x65
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    0xe(%edi),%bl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
loopne 804f875 <_IO_stdin_used+0x22d1>
add    %al,(%eax)
or     $0xff,%al
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
add    0xe(%ecx),%ah
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
add    $0x8,%al
add    %al,(%eax)
int3
enter  $0xffff,$0x6b
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    0xe(%ebp),%ah
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    %cl,(%eax)
add    %al,(%eax)
sbb    %cl,%cl
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %eax
or     %al,(%eax)
add    %dh,(%eax)
leave
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pop    %eax
or     %al,(%eax)
add    %cl,-0x37(%eax)
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%esi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
jo     804f906 <_IO_stdin_used+0x2362>
add    %al,(%eax)
pusha
leave
(bad)
lcall  *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    -0x3cbef7f2(%ecx),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
or     %al,(%eax)
add    %bl,%ah
leave
(bad)
pushl  0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
add    0xe(%ecx),%dh
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    $0x38000008,%eax
lret   $0xffff
ja     804f94e <_IO_stdin_used+0x23aa>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
add    0xe(%ecx),%dh
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
fmull  (%eax)
add    %al,(%eax)
xchg   %eax,%esp
lret   $0xffff
xor    (%eax),%al
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%esi)
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
hlt
or     %al,(%eax)
add    %bh,0xfdffff(%edx,%ecx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
push   %eax
add    %dl,%cl
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edx),%esp
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x50,%al
add    %al,(%eax)
add    %ch,(%ecx,%ecx,1)
add    %al,(%eax)
test   %cl,%bl
(bad)
(bad)
fadds  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
jnp    804fa04 <_IO_stdin_used+0x2460>
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %al,0x10000009(%eax)
int3
(bad)
decl   0x1(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x500e4304(%ebx)
add    %bh,%bh
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edx),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%edi
add    %al,(%eax)
add    %cl,%al
or     %eax,(%eax)
add    %bl,-0x33(%eax)
(bad)
(bad)
flds   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
add    0xa(%esi),%ch
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
pop    %esi
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
add    $0xa,%al
add    %al,(%eax)
cld
int    $0xff
decl   (%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    0xa(%esi),%dh
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%edx),%ebp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%edx),%ebp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
inc    %esp
or     (%eax),%al
add    %cl,%ah
into
(bad)
jmp    *0x0(%esi)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    -0x3cbef7f2(%eax),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ch,0xa(%eax)
add    %al,(%eax)
pop    %eax
iret
(bad)
decl   (%edi)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffaa,0x2600e45
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %al,%al
or     (%eax),%al
add    %dl,(%eax)
sar    %cl,%bh
jmp    *%esp
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%ebx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
xor    %cl,(%ebx)
add    %al,(%eax)
nop
aam    $0xff
ljmp   *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %dl,0x0(%ebx,%ecx,1)
add    %bl,%ah
aam    $0xff
(bad)
clc
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffb9,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%ebx),%eax
pop    %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
or     (%eax),%eax
add    %al,0x158ffff(%esi,%edx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x400e4302(%ebx)
add    %dl,%ch
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
fmull  (%ebx)
add    %al,(%eax)
mov    $0xd7,%ah
(bad)
call   *%ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %ebp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%edx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
sbb    %cl,(%eax,%eax,1)
add    %ch,-0x6800006a(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4702(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa0b1a03,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %cl,0xc(%eax)
add    %al,(%eax)
sub    %bl,%al
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,-0x27a40000(%esp,%ecx,1)
(bad)
incl   (%edx)
mov    $0xa5,%al
add    $0x8,%al
nop
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
cmp    %eax,(%eax,%eax,1)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
in     (%dx),%al
mov    (%eax,%ecx,1),%es
or     $0x74000000,%eax
aad    $0x4
or     %bl,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
syscall
or     %bl,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
add    $0xf,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
pusha
xchg   %al,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %dl,%al
addl   $0xa,(%eax,%ecx,1)
pusha
add    $0xb0000,%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,0x208
add    %bl,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dl,%ah
mov    %es,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
les    0x1208(%esp,%eax,1),%ecx
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x54(%edi)
mov    %es,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x40(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
or     $0xf,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%esi)
popl   (%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8050fb1 <_IO_stdin_used+0x3a0d>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8050ff2 <_IO_stdin_used+0x3a4e>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8051033 <_IO_stdin_used+0x3a8f>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8051074 <_IO_stdin_used+0x3ad0>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
xor    $0x31,%al
data16
cmp    %ah,0x33(%ecx)
xor    %dh,(%edx)
xor    (%edi,%esi,1),%esi
arpl   %si,(%edi,%esi,1)
xor    0x34636536,%dh
aaa
aaa
xor    $0x3534,%ax
aaa
fs
ss
gs
fs
popa
xor    $0x31373765,%eax
xor    %ch,(%esi)
fs bound %esi,%fs:%gs:0x67(%ebp)
add    %al,(%eax)
add    %al,(%eax)
pop    %eax
incb   -0x2a(%edx)
