das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,0x1e(%ebx)
cmp    (%ebx),%ch
sbb    $0x53,%al
mov    0x1467b1a6,%al
fs
mov    $0x44,%cl
mov    $0xda,%bh
.byte 0xa2
.byte 0x25
pop    %ebx
.byte 0x3d
lds    (%eax),%eax
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
add    $0x1,%al
add    (%ecx),%al
add    %cl,(%eax)
add    %al,(%eax)
add    (%eax),%ah
xchg   %bh,(%ecx)
adc    %dl,(%eax)
add    %al,0x0(%eax)
add    %dl,0x1619e00(%eax)
inc    %eax
add    (%eax),%dl
add    %al,-0x5f(%eax)
pop    %esp
push   $0xa4040090
or     %al,(%edx)
(bad)
or     %dl,-0x7f7ffcf7(%eax)
adc    (%edi),%al
add    %al,0x28(%esi,%esi,1)
push   %ecx
adc    %edx,0x10c069(%eax)
inc    %eax
sbb    %ch,%cl
or     %edx,(%ecx)
add    %cl,-0x67ffef40(%edx)
xor    %bl,(%ecx)
sbb    $0x46,%al
add    %al,0x0(%eax)
add    $0x0,%al
and    $0x10,%al
fsubrs (%eax)
or     %dl,(%eax)
mov    0x402003,%al
add    $0x0,%al
test   %bl,(%eax)
add    (%ecx),%eax
sbb    %ah,(%eax)
pusha
add    %al,(%ecx)
xchg   %eax,%ebp
add    %al,(%eax)
add    %al,(%eax)
or     %dl,%al
add    %dl,(%eax)
add    %ah,(%eax)
add    %al,0x44444d0(%eax)
add    0x34(%edx),%ah
cmp    0x1180600(%ebx),%ah
add    $0x1,%al
insb   (%dx),%es:(%edi)
xchg   %edx,(%ecx)
add    %ecx,(%eax)
or     %al,(%eax)
add    %al,(%eax,%eax,4)
xchg   %eax,%edx
adc    0x420b502(%ebx),%dl
or     %dh,(%eax)
movsl  %ds:(%esi),%es:(%edi)
or     %al,0x20110010(%eax)
adc    %eax,0x7(%ecx)
add    %ah,(%eax)
sbb    (%eax),%al
pop    %es
popa
pop    %ss
sbbl   $0x8001201,(%ecx)
mov    0x14840008,%eax
add    %al,(%eax)
adc    $0x48,%al
add    %al,(%eax)
push   %eax
dec    %eax
add    (%ecx),%al
inc    %edx
andb   $0x16,(%edx)
add    %ah,(%ecx)
sub    %al,0x20a90c0
add    %al,(%ecx)
inc    %ecx
inc    %eax
bound  %eax,(%eax)
add    $0x1,%al
(bad)
inc    %ecx
adc    %dl,0x20a10002(%eax)
mov    %dl,-0x1c(%eax)
dec    %ecx
push   %ds
mov    0x100408,%eax
add    %ah,(%ecx)
add    %eax,(%eax)
add    %al,(%edx)
sub    %cl,(%eax)
sbb    %ecx,(%ecx,%eax,1)
add    %al,(%ecx)
add    %cl,(%eax)
xchg   %al,(%eax,%eax,1)
inc    %ebx
loope  804826f <_init-0x3279>
sbb    $0x1,%al
adc    %al,(%eax,%eax,2)
add    $0x1,%al
add    (%eax),%ah
inc    %edx
dec    %eax
dec    %eax
adc    %ch,0x0(%esi)
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
jae    80482ca <_init-0x321e>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jne    80482d2 <_init-0x3216>
add    %al,(%eax)
ja     80482d6 <_init-0x3212>
add    %al,(%eax)
jns    80482da <_init-0x320e>
add    %al,(%eax)
jp     80482de <_init-0x320a>
add    %al,(%eax)
jnp    80482e2 <_init-0x3206>
add    %al,(%eax)
jl     80482e6 <_init-0x3202>
add    %al,(%eax)
jg     80482f6 <_init-0x31f2>
add    %al,(%eax)
addb   $0x0,(%eax)
add    %al,-0x7c000000(%ecx)
add    %al,(%eax)
add    %al,-0x7a000000(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
add    %cl,-0x74000000(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%esi)
add    %al,(%eax)
add    %dl,-0x6f000000(%eax)
add    %al,(%eax)
add    %dl,-0x6a000000(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x67000000(%eax)
add    %al,(%eax)
add    %bl,0x0(%edx)
add    %al,(%eax)
add    %bl,-0x62000000(%ebx)
add    %al,(%eax)
add    %bl,0x0(%edi)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %ah,0xa50000(%eax,%eax,1)
add    %al,(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
add    %al,(%eax)
add    %ch,-0x55000000(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%eax
add    %al,(%eax)
add    %ch,-0x4f000000(%edi)
add    %al,(%eax)
add    %dh,0x0(%eax,%eax,1)
add    %al,(%eax)
mov    $0x0,%ch
add    %al,(%eax)
mov    $0x0,%dh
add    %al,(%eax)
mov    $0x0,%eax
add    %al,(%eax)
add    %bh,-0x46000000(%ecx)
add    %al,(%eax)
add    %bh,-0x43000000(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x40000000(%esi)
add    %al,(%eax)
add    %al,%cl
add    %al,(%eax)
add    %al,%ah
add    %al,(%eax)
add    %al,%ch
add    %al,(%eax)
add    %al,%bh
add    %al,(%eax)
add    %cl,%cl
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %cl,%dh
add    %al,(%eax)
add    %cl,%bh
add    %al,(%eax)
add    %dl,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,%dl
add    %al,(%eax)
add    %dl,%bl
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,%ch
add    %al,(%eax)
add    %dl,%dh
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,%al
add    %al,(%eax)
add    %bl,%cl
add    %al,(%eax)
add    %bl,%bl
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,%ah
add    %al,(%eax)
add    %bl,%ch
add    %al,(%eax)
add    %bl,%bh
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,%al
add    %al,(%eax)
add    %ah,%cl
add    %al,(%eax)
add    %ah,%ah
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,%dh
add    %al,(%eax)
add    %ah,%bh
add    %al,(%eax)
add    %ch,%al
add    %al,(%eax)
add    %ch,%cl
add    %al,(%eax)
add    %ch,%bl
add    %al,(%eax)
add    %ch,%ah
add    %al,(%eax)
add    %ch,%dh
add    %al,(%eax)
add    %dh,%al
add    %al,(%eax)
add    %dh,%cl
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,%bl
add    %al,(%eax)
add    %dh,%ch
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,%bh
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%al
add    %al,(%eax)
add    %bh,%bl
add    %al,(%eax)
add    %bh,%bh
add    %al,(%eax)
add    %al,(%ecx)
add    %eax,(%eax)
add    %al,(%ebx)
add    %eax,(%eax)
add    %al,(%edi)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ecx)
add    %eax,(%eax)
add    %cl,(%ecx,%eax,1)
add    %al,(%eax)
sgdtl  (%eax)
add    %dl,(%edx)
add    %eax,(%eax)
add    %dl,(%ecx,%eax,1)
add    %al,(%eax)
push   %ss
add    %eax,(%eax)
add    %bl,(%eax)
add    %eax,(%eax)
add    %bl,(%ecx)
add    %eax,(%eax)
add    %bl,(%edx)
add    %eax,(%eax)
add    %bl,(%ecx,%eax,1)
add    %al,(%eax)
push   %ds
add    %eax,(%eax)
add    %ah,(%edx)
add    %eax,(%eax)
add    %ah,(%ebx)
add    %eax,(%eax)
add    %ah,(%esi)
add    %eax,(%eax)
add    %ah,(%edi)
add    %eax,(%eax)
add    %ch,(%ecx)
add    %eax,(%eax)
add    %ch,(%edx)
add    %eax,(%eax)
add    %ch,0x2e000001
add    %eax,(%eax)
add    %dh,(%eax)
add    %eax,(%eax)
add    %dh,(%ecx)
add    %eax,(%eax)
add    %dh,(%edx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
xor    $0x1,%eax
add    %al,(%eax)
add    %dh,(%esi)
add    %eax,(%eax)
add    %bh,(%eax)
add    %eax,(%eax)
add    %bh,(%ecx)
add    %eax,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%edi)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x1(%eax)
add    %al,(%eax)
inc    %ecx
add    %eax,(%eax)
add    %al,0x1(%edx)
add    %al,(%eax)
inc    %ebp
add    %eax,(%eax)
add    %al,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
dec    %eax
add    %eax,(%eax)
add    %cl,0x1(%ecx)
add    %al,(%eax)
dec    %ebp
add    %eax,(%eax)
add    %bl,-0x7f12474d(%ebx)
mov    $0x31,%bh
xor    $0x8b,%al
and    %eax,0xeeaea2c7
add    (%edi),%ebx
inc    %ebp
dec    %esi
loope  8048573 <_init-0x2f75>
jne    80485ad <_init-0x2f3b>
cmc
std
cmp    %dh,-0x10(%eax)
mov    $0xf0,%al
(bad)
cmc
stc
es
cmp    %esi,%ebp
hlt
popf
mov    $0x58c4cdb0,%ecx
or     (%edi),%bh
or     %esp,-0x6f(%eax,%ebx,4)
mov    $0x68a13f7e,%esp
stos   %eax,%es:(%edi)
pop    %ebx
(bad)
lcall  $0x1153,$0xef3bc4c7
or     $0x3e,%al
gs
jg     8048657 <_init-0x2e91>
jo     8048608 <_init-0x2ee0>
jne    804867e <_init-0x2e6a>
push   %eax
or     $0x83998802,%eax
outsb  %ds:(%esi),(%dx)
inc    %esi
jae    804867f <_init-0x2e69>
aaa
mulb   0x170d1558(%esi)
popf
insl   (%dx),%es:(%edi)
sti
or     $0x19,%al
ficompl (%esi)
push   %ss
or     %dl,%al
or     $0x88419888,%eax
xor    $0xf4779a1f,%eax
jmp    16f613fd <_end+0xeec8879>
xor    $0x81757442,%eax
sub    %edi,(%ebx)
call   a9d07205 <_end+0xa1c6e681>
xor    $0x25,%al
mull   -0x27(%ebx,%ebx,1)
repnz rcr $0xb4,%ecx
mov    0x99c18cbe,%eax
fmuls  0x50817381(%ebp)
cmp    $0x99,%al
mov    $0x8143640,%esi
subl   $0xf825a698,0x4b(%edi)
test   $0x542838a3,%eax
mov    0x6bbe696a,%eax
or     %eax,-0x2a(%ebx)
imul   $0x582da1c,0x56(%ecx,%esi,8),%ebp
test   %bh,%dl
ret
comiss -0x2400acba(%ecx),%xmm3
lcall  $0xf6d8,$0x58f27fab
jo     80486c1 <_init-0x2e27>
cmp    $0xdc,%al
cltd
xor    %esi,%esi
rcrl   %fs:-0x64(%esi)
xchg   %eax,%ebx
lods   %ds:(%esi),%al
inc    %ecx
ja     8048692 <_init-0x2e56>
insl   (%dx),%es:(%edi)
cmp    %esi,-0x7a(%ecx)
mov    $0x6611d71f,%edi
add    $0xfb0c6a08,%eax
mov    $0x24,%ah
pop    %edx
(bad)
mov    $0xd1,%dh
aam    $0x3d
lods   %gs:(%esi),%eax
in     $0xdc,%al
jg     80486f8 <_init-0x2df0>
cmpsl  %es:(%edi),%ds:(%esi)
mov    %cl,(%ebx)
pop    %ebx
jb     80486d0 <_init-0x2e18>
rcrb   $0x9f,-0x8f7ea19(%edx)
push   %cs
das
sbb    %dh,-0x44(%ebp)
push   %ecx
jmp    8048682 <_init-0x2e66>
cmp    $0x14d9f81c,%eax
and    (%esi),%ebx
jecxz  80486ff <_init-0x2de9>
mov    $0xa9,%bl
and    %ch,(%esi)
das
mov    $0xcb,%bl
pop    %ecx
cmp    $0xff,%al
push   %eax
outsb  %ds:(%esi),(%dx)
(bad)
in     (%dx),%al
mov    %es,(%esi)
adc    $0xfcde0411,%eax
(bad)  0x478fc1f2(%ecx)
xchg   %edi,%edi
add    %ecx,%edi
adc    $0x10,%edi
add    $0x39abbe99,%eax
test   %ebx,%ds:0x64(%ecx)
inc    %esp
xchg   %eax,%ebp
cld
andl   $0x6e,-0x3fb213(%edx)
in     (%dx),%eax
inc    %ecx
ja     80486ff <_init-0x2de9>
fs
pusha
ret    $0xc7e
inc    %esp
cmpsb  %es:(%edi),%ds:(%esi)
nop
push   %ebx
loopne 8048774 <_init-0x2d74>
inc    %esi
sbb    %eax,%eax
and    %eax,%eax
push   %es
rcrl   %cl,0x3f8ed0f(%ebp)
ret
sbb    %bh,(%esi)
pop    %es
pop    %esp
fnsave 0x3cb84624
aam    $0x97
and    $0x509c5e9a,%eax
pop    %es
dec    %ecx
imul   $0xffffff98,%eax,%esp
add    0x63(%ebp),%eax
gs
xchg   %eax,%ecx
test   $0x57,%al
mov    %ah,-0x5b(%ebx)
sbbl   $0x4,0x2e(%ebp)
or     $0x3a,%al
xchg   %eax,%edi
or     -0x28(%ebp),%ebx
(bad)
and    -0x512736f0(%edi),%ch
xchg   %eax,%esi
into
xor    %bl,%dl
add    (%edx),%esp
scas   %es:(%edi),%al
ret
mov    $0x9a3202db,%edx
add    %ah,(%edx)
addr16 push %ebp
popa
adc    %al,0x45(%ebx)
aad    $0xec
pop    %eax
call   e40c746f <_end+0xdc02e8eb>
in     $0x83,%al
jnp    80487f0 <_init-0x2cf8>
aaa
in     (%dx),%eax
xchg   %eax,%edi
scas   %es:(%edi),%al
inc    %ebx
ss
jp     80487e0 <_init-0x2d08>
jg     8048712 <_init-0x2dd6>
andl   $0x38,0x1b4fc069(%ecx)
insb   (%dx),%es:(%edi)
jecxz  80487db <_init-0x2d0d>
jo     804878c <_init-0x2d5c>
cmp    $0x49,%al
pop    %ss
cmpsl  %es:(%edi),%ds:(%esi)
fcoml  (%edi)
scas   %es:(%edi),%eax
in     (%dx),%eax
xchg   %eax,%edi
mov    0xc5fab9bb,%al
mov    %gs,(%esi)
roll   %cl,0x73(%esi)
pop    %ebx
(bad)
cmp    0x4da9134e(%ebp),%edi
inc    %esi
xchg   %eax,%ecx
out    %al,(%dx)
inc    %edi
imul   $0x16,%esp,%eax
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0x29,%al
sbb    $0x582b1c8c,%eax
mov    $0x5c6d1286,%edx
xor    $0x7c9292c3,%eax
dec    %esi
jecxz  8048847 <_init-0x2ca1>
adc    %al,-0x52e863f2(%ecx)
xchg   %eax,%esi
aad    $0x4
push   %ss
push   %ecx
arpl   %sp,-0x4b8f4e7d(%ebp)
xor    -0x25(%edx),%ah
in     (%dx),%eax
add    -0x743f5686(%ebp),%eax
(bad)
mov    $0xdf,%dl
stc
fistp  -0xa3b8e49(%ecx)
lods   %ds:(%esi),%al
ds
clc
test   $0x9bdfc646,%eax
test   $0xcead8e1,%eax
adc    $0xe2,%al
sahf
rolb   -0x79(%edi)
ljmp   *0x1f(%eax)
int3
jmp    51ea2e91 <_end+0x49e0a30d>
jp     8048892 <_init-0x2c56>
ja     80487c5 <_init-0x2d23>
mov    $0xf8f07038,%edi
out    %al,(%dx)
scas   %es:(%edi),%eax
dec    %ecx
adc    0x31(%esi),%esp
jno    8048885 <_init-0x2c63>
(bad)
test   $0x3f,%al
mov    $0x229815f6,%edx
aam    $0xf7
mov    $0x73,%bh
jg     80487df <_init-0x2d09>
cmp    %al,-0x6a(%ebp)
fs
pop    %ecx
mov    (%ebx),%esi
loop   8048829 <_init-0x2cbf>
dec    %esp
sbb    $0x7b4c298c,%eax
push   %edi
(bad)
jg     8048884 <_init-0x2c64>
insl   (%dx),%es:(%edi)
mov    %dh,0x6713507(%edx)
repnz cmpsw %es:(%edi),%ds:(%esi)
popf
mov    %al,0x4c54514b
jae    80488b3 <_init-0x2c35>
lods   %ds:(%esi),%al
imul   $0x9142f471,0x35f0df65(%esi),%ebp
91
and    %esi,-0x1e(%ebp)
aam    $0x77
loopne 8048845 <_init-0x2ca3>
inc    %ebx
mov    $0xf0704141,%edx
into
jle    804880b <_init-0x2cdd>
fsubrs (%ebx)
das
cmp    $0x8,%al
xor    %eax,0x73(%esi)
pop    %ebx
dec    %edi
popf
mov    0xe34bacab,%al
rol    $0x8b,%cl
adc    %eax,-0x20(%ebp)
stc
cmpsl  %es:(%edi),%ds:(%esi)
push   %ecx
mov    0xe05b0673,%eax
ljmp   $0xf8c7,$0x76b8234c
xchg   %eax,%esp
loope  8048904 <_init-0x2be4>
push   %ebp
xor    %ebp,(%edi)
imul   $0x9a8b1f3b,(%edx),%esp
enter  $0xa72c,$0xf9
pop    %esi
jl     80488f9 <_init-0x2bef>
loope  804891a <_init-0x2bce>
lock sub 0x1b(%ebp),%ebx
sub    %edi,%esi
fs
fcmove %st(5),%st
jecxz  8048856 <_init-0x2c92>
push   %edi
dec    %ecx
test   %ecx,(%ebx,%ebp,4)
jne    8048935 <_init-0x2bb3>
std
cmp    %dh,%dl
mov    (%esp,%esi,8),%ebx
pushf
popw   %ds
fnstenv 0x58(%ecx)
sbb    $0x2b,%al
shrb   %cl,(%edi)
jno    8048871 <_init-0x2c77>
mov    $0x31,%dl
mov    %eax,0x53469385
lea    0x33(%ecx,%eiz,2),%esp
xor    %eax,0xe3baa4cc
xchg   %eax,%edx
jl     8048950 <_init-0x2b98>
jg     8048881 <_init-0x2c67>
jl     80488d4 <_init-0x2c14>
ja     80488f2 <_init-0x2bf6>
mov    $0x1f,%cl
ret
test   %cl,(%ebx)
pop    %esp
int3
mov    -0x41(%edx),%eax
addr16 fcmovnu %st(6),%st
pop    %ds
subl   $0xffffffc0,-0x28(%edi)
pusha
cmp    %eax,%ebp
loope  804889c <_init-0x2c4c>
pushf
fmuls  (%eax)
inc    %eax
std
adc    $0x3603321e,%eax
(bad)
(bad)
jle    80488fc <_init-0x2bec>
aaa
lods   %ds:(%esi),%al
cmpsl  %es:(%edi),%ds:(%esi)
mov    $0x21,%bh
sub    (%ebx,%ebx,4),%bh
sbb    $0xb7,%al
(bad)
in     $0x50,%eax
in     $0xe5,%al
mov    $0xbe,%dh
(bad)
daa
cld
lfs    0x69(%esi),%ecx
inc    %ecx
sbb    $0x51f9421f,%eax
sti
andl   $0xffffffa0,0x660f4e5f
stos   %eax,%es:(%edi)
jmp    804890d <_init-0x2bdb>
out    %eax,(%dx)
push   %cs
mov    (%edx),%bl
or     %dh,%cl
cmp    -0x6c4b45c2(%edi),%ah
jae    8048957 <_init-0x2b91>
shrl   $0x2,-0x3b(%esi)
aad    $0x7d
.byte 0x88
xchg   %eax,%ebx
cmp    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movl   $0x0,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ds
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
stos   %al,%es:(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    (%eax,%eax,1),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    (%edx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popl   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fildl  (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    (%ebx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
call   8048a95 <_init-0x2a53>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ds
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x6
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%esi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
icebp
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jae    8048bd4 <_init-0x2914>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dh
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx)
push   %cs
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ecx
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bh
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jne    8048d15 <_init-0x27d3>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
int3
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%cl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %ebp
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%cl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,%dh
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esp
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %al,$0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stos   %eax,%es:(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%ebx)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    $0x0,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stc
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %gs:(%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
or     %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%ebx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
add    $0x0,%al
add    %dh,(%eax)
test   %eax,0x8c08
add    %dl,(%edx)
add    %cl,0x76800
add    %ah,-0x5f(%eax)
push   %es
or     %ah,%ah
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x80f00
add    %ah,%al
into
pop    %es
or     %dl,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x52900
add    %al,-0x46f7f814(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x61300
add    %ah,0x8080819(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x82300
add    %ah,(%eax)
fiaddl (%edi)
or     %bh,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xd6000
add    %al,(%eax)
clc
pop    %es
or     %al,0x120000(%eax,%eax,1)
or     $0x6ea00,%eax
add    %dl,-0x63f7f820(%eax)
add    $0x0,%al
add    %dl,(%edx)
add    %cl,0xc3a00
add    %dh,%al
fiadd  0x1908
add    %dl,(%edx)
add    %cl,0xb2300
add    %al,%al
xchg   %eax,%esi
add    $0x9f08,%eax
add    %dl,(%edx)
add    %cl,0xd1900
add    %al,(%eax)
faddl  0xc608
add    %dl,(%edx)
add    %cl,0xb4e00
add    %dh,0x6b(%eax)
add    $0x35908,%eax
add    %dl,(%edx)
add    %cl,0x82d00
add    %dl,-0x42f7f7f4(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xef800
add    %ah,0x180809(%ebx,%eax,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
pop    %ss
add    $0x0,%al
add    %ah,0x0(%eax)
or     %cl,(%eax)
inc    %ebp
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x5f100
add    %dh,0x660807ed(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x85100
add    %ah,(%eax)
sbb    $0x870808,%eax
add    %al,(%eax)
adc    (%eax),%al
or     $0x7ba00,%eax
add    %ah,0x7c0807f6(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xe1600
add    %bl,0x40809(%esp,%ebx,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
pusha
add    $0x0,%al
add    %al,%al
inc    %edx
or     %ecx,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
inc    %esi
or     (%eax),%al
add    %ah,0x400807eb(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xf3900
add    %ah,%al
aam    $0x7
or     %bh,0x12000000(%edi)
add    %cl,0x7fa00
add    %al,0x6b(%eax)
add    $0x2a08,%eax
add    %dl,(%edx)
add    %cl,0x88d00
add    %dl,%ah
inc    %ebx
or     %ecx,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
and    $0x6,%al
add    %al,(%eax)
add    %bl,0xb90805(%edx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x66f00,%eax
add    %dl,0x70(%eax)
push   %es
or     %dl,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x7eb00
add    %cl,0x180809(%ebx,%eax,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
movl   $0xebd00000,(%esi)
add    $0x8,%al
dec    %eax
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xa7000
add    %ch,%al
mov    $0x4,%ah
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,(%ebx)
add    %bl,%ah
add    %al,(%eax)
add    %ah,0x5c(%eax)
or     %ecx,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
push   %edx
add    $0x0,%al
add    %ah,(%eax)
or     %ecx,(%eax)
or     %al,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xaca00
add    %dh,%al
repnz pop %es
or     %ch,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xa4200
add    %dh,-0x12(%eax)
pop    %es
or     %cl,0x12000000(%ecx)
add    %cl,0xbf800
add    %dl,0x15(%eax)
or     %cl,(%eax)
mov    0x12000000,%al
add    %cl,0xce700
add    %dl,0x360806ac(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0x8d300
add    %ah,0x7a(%eax)
push   %es
or     %bh,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x8df00,%eax
add    %al,0x52(%eax)
push   %es
or     %cl,0x5(%esi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x67a00,%eax
add    %dh,%al
sbb    (%eax),%ecx
or     %ch,0x120000(%eax,%eax,1)
or     $0x90a00,%eax
add    %dl,(%eax)
je     804929d <_init-0x224b>
or     %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x95b00,%eax
add    %dh,0x9(%edx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bh,0x50000004(%eax)
mov    $0x6f60805,%eax
add    %al,(%eax)
adc    (%eax),%al
or     $0x79d00,%eax
add    %dl,%al
icebp
pop    %es
or     %cl,0x12000000(%edi)
add    %cl,0x58400
add    %dh,0x74(%eax)
push   %es
or     %ah,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x93d00,%eax
add    %al,%al
inc    %ecx
or     %ecx,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
sbb    %eax,(%eax)
in     $0xa,%eax
add    %al,(%eax)
push   %eax
popf
push   %es
or     %al,0x12000004
add    %cl,0x63500
add    %dh,(%eax)
in     (%dx),%al
pop    %es
or     %cl,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
or     $0xa3100,%eax
add    %ch,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %bl,0xa(%ebx)
add    %al,(%eax)
sar    %cl
pop    %es
or     %cl,0x12000002(%esi)
add    %cl,0x70c00
add    %bh,-0x75(%eax)
or     %ecx,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
outsl  %ds:(%esi),(%dx)
or     (%eax),%eax
add    %ah,0x3a080678(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x48800
add    %ah,(%eax)
aam    $0x7
or     %ch,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x69500
add    %dl,(%eax)
xchg   %eax,%edi
pop    %es
or     %dh,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x7da00
add    %dl,%al
adc    (%eax),%ecx
or     %cl,0x12000000(%edx)
add    %cl,0x84600
add    %ah,(%eax)
incl   (%edi)
or     %bh,0x0(%ebx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x93300,%eax
add    %dh,(%eax)
addl   $0x0,0x1f208
adc    (%eax),%al
or     $0x47b00,%eax
add    %al,0x19(%eax)
push   %es
or     %dl,0x12000011(%ecx)
add    %cl,0xcc800
add    %cl,0x180809(%edx,%eax,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
mov    %al,0xa0000006
add    %ecx,(%eax)
or     %cl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0xbaa00,%eax
add    %ah,%al
jp     80493dd <_init-0x210b>
or     %bl,0x12000003(%ebx)
add    %cl,0xd9900
add    %dh,-0x74f7f7e3(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xb3e00
add    %dl,-0x64f7fae7(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xa7600
add    %ah,%al
inc    %ecx
or     %ecx,(%eax)
and    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
pop    %esi
or     %al,(%eax)
add    %bh,0x9(%ebx,%ecx,4)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
fadds  0x9ac00000
add    $0x1c308,%eax
add    %dl,(%edx)
add    %cl,0xbbd00
add    %dl,(%eax)
and    $0x8,%al
or     %ch,0x12000001
add    %cl,0x83600
add    %al,(%edx,%eax,2)
or     %ecx,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
movsl  %ds:(%esi),%es:(%edi)
or     %al,(%eax)
add    %ah,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %dl,0xf000000c
popl   (%esi)
or     %cl,%dh
push   %es
add    %al,(%eax)
adc    (%eax),%al
or     $0xe0500,%eax
add    %al,-0x20(%eax)
pop    %es
or     %cl,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     $0xeea00,%eax
add    %ch,0x40809(%ecx,%ecx,4)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
mov    %eax,(%esi)
add    %al,(%eax)
pusha
repnz pop %es
or     %al,0x120000(%eax,%eax,1)
or     $0x56f00,%eax
add    %ah,0x7b0807fe(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x57800
add    %ah,-0x3ef7f82b(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x9e800
add    %ah,%al
repnz add $0x1d08,%eax
add    %dl,(%edx)
add    %cl,0x42b00
add    %dh,%al
adc    $0x1080808,%eax
add    %al,(%eax)
adc    (%eax),%al
or     $0x44b00,%eax
add    %dh,(%eax)
stc
pop    %es
or     %dl,0x120000(%eax,%eax,1)
or     $0x71600,%eax
add    %al,0x74080612(%eax)
add    $0x120000,%eax
or     $0x51a00,%eax
add    %dh,0x3208081a(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xb0b00
add    %dh,(%eax)
mov    %al,(%esi)
or     %dh,0x12000007(%edx)
add    %cl,0xe3800
add    %al,0x408098b(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %ch,%bl
or     $0xea100000,%eax
push   %es
or     %dl,0x12000003(%esi)
add    %cl,0xe6100
add    %al,0x73(%eax)
push   %es
or     %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x99e00,%eax
add    %ah,%al
js     804955d <_init-0x1f8b>
or     %bh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x4f800
add    %ah,0x700807d6(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x89400
add    %bl,0x9(%ebx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,0xe(%eax)
pop    %ss
or     %cl,(%eax)
test   $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
or     $0xb7b00,%eax
add    %dl,0x4c(%eax)
push   %es
or     %ah,0x0(%ebp,%eax,1)
add    %dl,(%edx)
add    %cl,0x50a00
add    %dh,(%eax)
xchg   %eax,(%esi)
or     %al,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xafb00
add    %ah,0x67080673(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x73800
add    %dl,0x40809(%esp,%ebx,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
mov    $0xc,%bh
add    %al,(%eax)
cmpb   $0x8,0x6(%esi)
mov    $0x0,%bl
add    %al,(%eax)
adc    (%eax),%al
or     $0xd0900,%eax
add    %bl,%al
inc    %edx
or     %ecx,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
push   %ds
sldt   (%eax)
pusha
adc    $0x8,%al
or     %ch,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x97800
add    %al,(%eax)
and    (%eax),%ecx
or     %al,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xcda00
add    %dh,0x400807f0(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xdc300
add    %al,0x9(%ebx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %al,0x40000008(%ecx)
push   %ds
or     %cl,(%eax)
insb   (%dx),%es:(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x75600
add    %dh,%al
rolb   (%edi)
or     %bh,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x93f00,%eax
add    %al,%al
inc    %ecx
or     %ecx,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
sbb    %eax,(%eax)
jne    804966a <_init-0x1e7e>
add    %al,(%eax)
loopne 8049645 <_init-0x1ea3>
add    $0x72708,%eax
add    %dl,(%edx)
add    %cl,0xc6400
add    %ah,(%eax)
jns    804967d <_init-0x1e6b>
or     %dl,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x56a00
add    %dl,0xd(%eax)
or     %cl,(%eax)
data16
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x6d500
add    %dh,%al
lock pop %es
or     %ah,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xea500
add    %dl,0x4(%eax)
or     %cl,(%eax)
and    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     $0x5c500,%eax
add    %dl,(%eax)
add    %cl,(%eax)
or     %al,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
or     $0x14d00,%eax
add    %dh,0x5c(%eax)
or     %ecx,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
push   %edi
push   %es
add    %al,(%eax)
inc    %eax
pop    %esp
or     %ecx,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
sbb    %eax,(%eax)
sbb    $0xb,%al
add    %al,(%eax)
subb   $0x8,(%eax)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
lldt   0xc(%edi)
add    %al,(%eax)
adc    %dh,%dh
add    $0xb9008,%eax
add    %dl,(%edx)
add    %cl,0xdd300
add    %ah,(%eax)
out    %al,(%dx)
pop    %es
or     %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0xc4800,%eax
add    %dh,(%eax)
call   9dd9f21 <_end+0x1d4139d>
add    %al,(%eax)
adc    (%eax),%al
or     $0xbd900,%eax
add    %dh,%al
add    %ecx,(%eax)
or     %al,0x12000000(%edi)
add    %cl,0xc7000
add    %dl,0x460807d4(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xaf300
add    %bl,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %dh,%al
add    $0x0,%al
add    %dl,(%eax)
testb  $0x8,(%edi)
lea    (%eax),%eax
add    %al,(%eax)
adc    (%eax),%al
or     $0x4df00,%eax
add    %bh,0x180809(%ebx,%eax,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
(bad)
or     %al,(%eax)
add    %al,%al
inc    %esi
push   %es
or     %bl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xd6800
add    %al,(%eax)
sbb    %al,(%esi)
or     %dh,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xdfd00
add    %dl,0x1(%eax)
or     %cl,(%eax)
dec    %ebp
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xf2f00
add    %ah,%al
jmp    80497ae <_init-0x1d3a>
or     %dl,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     $0x74200,%eax
add    %al,-0x5af7f97d(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0xad400
add    %dh,0x2e080817(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x8b200
add    %dh,(%eax)
and    %ecx,(%eax)
or     %dl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x53200
add    %al,-0x3bf7f7fe(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x1fd00
add    %al,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %dl,0x0(%ebp,%ecx,1)
add    %dh,-0x4bf7f7fb(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x64100
add    %ah,%al
flds   (%edi)
or     %bh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x9e300
add    %dl,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %cl,-0x1ffffff5(%eax)
mov    $0x6,%bl
or     %bl,0x0(%ebx,%eax,1)
add    %dl,(%edx)
add    %cl,0xc8200
add    %ah,%al
pop    %edx
push   %es
or     %ch,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xf1700
add    %dh,0x4d080800(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x9fd00
add    %dh,0x7508081f(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0xe5400
add    %al,-0x13(%eax)
pop    %es
or     %cl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0x94300,%eax
add    %dh,(%ebx)
aad    $0x4
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xda600
add    %ah,-0x20f7f825(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x4cb00
add    %dh,0x1c080516(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xe9900
add    %ah,0x7f08081c(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xe2e00
add    %dl,(%eax)
flds   (%edi)
or     %dh,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x41f00
add    %ah,0x67(%eax)
push   %es
or     %dh,(%ecx)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0x99200
add    %al,(%eax)
push   %cs
push   %es
or     %bh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
or     $0xeda00,%eax
add    %al,0x77080672(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x40700
add    %al,0x28(%eax)
or     %cl,(%eax)
add    (%eax),%al
add    %al,(%eax)
adc    (%eax),%al
or     $0x55800,%eax
add    %dl,0x6b0807f7(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x9d800
add    %dl,%al
outsb  %ds:(%esi),(%dx)
add    $0x7b608,%eax
add    %dl,(%edx)
add    %cl,0xab600
add    %al,0x7f(%eax)
push   %es
or     %bh,(%edx)
add    $0x0,%al
add    %dl,(%edx)
add    %cl,0xa9700
add    %dh,-0x2a(%eax)
pop    %es
or     %ch,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xaa200
add    %dl,-0x6bf7f808(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x72300
add    %ah,0x2(%eax)
add    $0x90808,%eax
add    %dl,(%edx)
add    %cl,0xd3400
add    %dh,(%eax)
in     $0x7,%eax
or     %dh,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x55f00
add    %dh,-0x2d(%eax)
pop    %es
or     %ah,0x12000000(%esi)
add    %cl,0x7c200
add    %al,(%eax)
repz add $0x24708,%eax
add    %dl,(%edx)
add    %cl,0xb5900
add    %dl,-0x5e(%eax)
push   %es
or     %ch,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %cl,0xefb00
add    %al,0x9(%edx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dh,(%edx)
pop    %es
add    %al,(%eax)
lock or %ecx,(%eax)
or     %al,0x12000000(%ebp)
add    %cl,0xbc600
add    %al,-0x46f7f824(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0x53b00
add    %dl,-0x6df7fa64(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xca400
add    %dh,-0xbf7f811(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xd7600
add    %ah,%al
pop    %ebx
push   %es
or     %dh,0x12000002(%ebx)
add    %cl,0x8bc00
add    %dl,0x57(%eax)
pop    %es
or     %cl,0x1200000c
add    %cl,0x96900
add    %ch,(%edx,%eax,2)
or     %ecx,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
(bad)
or     %eax,(%eax)
add    %al,%al
icebp
push   %es
or     %cl,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
or     $0xe7e00,%eax
add    %dl,(%eax)
ljmp   $0x0,$0xa10807
adc    (%eax),%al
or     $0x4e200,%eax
add    %bl,0x9(%edx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bh,%bh
or     $0x0,%al
add    %dl,%al
das
push   %es
or     %dl,%ch
or     $0x120000,%eax
or     $0xc2b00,%eax
add    %dh,-0x73(%eax)
pop    %es
or     %ch,0x12000000(%eax)
add    %cl,0xf0c00
add    %ah,0x40809(%esp,%ebx,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
hlt
push   %es
add    %al,(%eax)
add    %dh,0x6(%ebx)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xa2900
add    %ah,(%eax)
testl  $0x6b08,(%edi)
add    %dl,(%edx)
add    %cl,0xaaa00
add    %al,(%eax)
jp     8049abd <_init-0x1a2b>
or     %dl,0x0(%edx)
add    %al,(%eax)
adc    (%eax),%al
or     $0xbe900,%eax
add    %ah,(%eax)
in     (%dx),%al
add    $0x8,%al
ss
push   %ss
add    %al,(%eax)
adc    (%eax),%al
or     $0x49900,%eax
add    %dl,-0x15(%eax)
pop    %es
or     %cl,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
or     $0xf6e00,%eax
add    %ah,(%eax)
adc    (%eax),%cl
or     %ah,0x12000000(%eax)
add    %cl,0x7c00
add    %al,0x40808(%eax,%ebp,1)
add    %al,(%eax)
adc    %eax,(%eax)
str    (%ecx)
or     (%eax),%al
add    %ah,%al
fldl   0xea08
add    %dl,(%edx)
add    %cl,0xccb00
add    %dl,(%edx,%eax,2)
or     %ecx,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edx
or     %eax,(%eax)
add    %al,0x23080516(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x6aa00
add    %dh,%al
sub    $0x5,%al
or     %ch,0x16(%ebp)
add    %al,(%eax)
adc    (%eax),%al
or     $0x6b600,%eax
add    %dl,0x1a0807ed(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x77800
add    %al,(%eax)
fadds  (%esi)
or     %al,0xe(%ebx)
add    %al,(%eax)
adc    (%eax),%al
or     $0xb9900,%eax
add    %al,%al
mov    %al,0x510806
add    %al,(%eax)
adc    (%eax),%al
or     $0xd8300,%eax
add    %ah,%al
or     $0x130806,%eax
add    %al,(%eax)
adc    (%eax),%al
or     $0x4c400,%eax
add    %al,(%eax)
add    %ecx,(%eax)
or     %cl,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
or     $0x92200,%eax
add    %ah,%al
sbb    %cl,(%eax)
or     %dh,0x120000(%eax,%eax,1)
or     $0xa8a00,%eax
add    %ah,0x6f0807f3(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0xe7a00
add    %al,(%eax)
out    %eax,(%dx)
pop    %es
or     %ch,0x12000000(%ecx)
add    %cl,0xa6600
add    %dl,%al
daa
or     %cl,(%eax)
popa
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xeb300
add    %dl,(%eax)
fild   0x1a08
add    %dl,(%edx)
add    %cl,0xe0f00
add    %al,%al
mov    %ecx,(%ecx)
or     %bh,0x11000001(%eax)
add    %bl,(%edx)
add    %al,0x40000002(%ecx)
pop    %esp
or     %ecx,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
jmp    d8049c0a <_end+0xcffb1086>
scas   %es:(%edi),%eax
push   %es
or     %dh,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xc0900
add    %al,0x5c(%eax)
or     %ecx,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
sbb    (%eax),%al
and    $0xe,%al
add    %al,(%eax)
rclb   (%esi)
add    $0x2ba08,%eax
add    %dl,(%edx)
add    %cl,0xa5000
add    %al,0x108080a(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0xdb800
add    %ah,0x6c0807ff(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0x4a300
add    %ah,(%eax)
jae    8049c5d <_init-0x188b>
or     %dl,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xb3000
add    %dl,(%eax)
pop    %ebx
push   %es
or     %al,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xde600
add    %al,0x809(%ebx,%ecx,4)
add    %al,(%eax)
adc    %al,(%eax)
sbb    (%eax),%al
in     (%dx),%al
add    (%eax),%eax
add    %dh,-0x31(%eax)
add    $0x8,%al
ret
add    $0x120000,%eax
or     $0xf5a00,%eax
add    %cl,0x408095c(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%edx)
add    %bh,-0x68a00000(%ebp,%eax,1)
add    $0x29e08,%eax
add    %dl,(%edx)
add    %cl,0x59300
add    %dl,-0x28(%eax)
add    $0x24b08,%eax
add    %dl,(%edx)
add    %cl,0x5a000
add    %al,0x35080791(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0xd2700
add    %dh,-0x25(%eax)
add    $0x9008,%eax
add    %dl,(%edx)
add    %cl,0x5ae00
add    %dh,0x8(%eax)
or     %cl,(%eax)
movsl  %ds:(%esi),%es:(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xecd00
add    %ah,(%eax)
repz pop %es
or     %bh,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %cl,0x78600
add    %al,%al
xchg   %eax,%esi
push   %es
or     %cl,0x12000006(%ecx)
add    %cl,0x9b100
add    %dh,0x9(%ebx,%eax,2)
or     %bl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bh,0xa(%edx)
add    %al,(%eax)
push   %eax
sbb    %al,(%edi)
or     %bl,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %cl,0xf4a00
add    %ah,-0x26(%eax)
pop    %es
or     %bh,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x65e00
add    %dl,-0x2c(%eax)
pop    %es
or     %bh,(%esi)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,0xa1700
add    %ah,0x180809(%edx,%eax,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
cwtl
or     $0x0,%al
add    %dh,0x4(%eax)
or     %cl,(%eax)
cmp    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
or     $0x9bf00,%eax
add    %al,-0x27(%eax)
pop    %es
or     %bl,0x12000000(%eax)
add    %cl,0xd4000
add    %ah,(%eax)
mov    %eax,0x96d0806
add    %al,(%eax)
adc    (%eax),%al
or     $0xec500,%eax
add    %al,%al
ljmp   $0x0,$0x400807
adc    (%eax),%al
or     $0x43c00,%eax
add    %dl,(%eax)
add    (%edi),%eax
or     %bl,%bh
or     (%eax),%eax
add    %dl,(%edx)
add    %cl,0x7cd00
add    %ah,-0x4(%eax)
pop    %es
or     %bh,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %cl,0x8ec00
add    %al,%al
adc    (%eax),%cl
or     %cl,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x41100
add    %ah,0x8(%eax,%ebp,1)
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,(%esi)
add    %cl,0x5(%ecx)
add    %al,(%eax)
mov    $0x1f,%al
add    $0x21008,%eax
add    %dl,(%edx)
add    %cl,0x8fc00
add    %dl,%al
fiadd  0x1908
add    %dl,(%edx)
add    %cl,0x9ab00
add    %cl,0x40809(%esp,%ebx,2)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    (%eax),%al
sldt   %gs:(%eax)
add    %ch,%bl
pop    %es
or     %cl,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     $0x60500,%eax
add    %dl,%al
faddl  0x10308
add    %dl,(%edx)
.byte 0x0
.byte 0xd
add    %ch,0x62(%ecx,%ebp,2)
fs
insb   (%dx),%es:(%edi)
jae,pn 8049ea8 <_init-0x1640>
xor    %cs:(%eax),%al
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     8049eaa <_init-0x163e>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8049ed5 <_init-0x1613>
popa
jb     8049ed8 <_init-0x1610>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    8049eca <_init-0x161e>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    8049eeb <_init-0x15fd>
gs
jae    8049e7b <_init-0x166d>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     8049ee7 <_init-0x1601>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
fs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jo     8049eff <_init-0x15e9>
outsb  %ds:(%esi),(%dx)
add    %ah,0x73(%esp,%ebp,2)
jns    8049f0e <_init-0x15da>
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8049f18 <_init-0x15d0>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8049f26 <_init-0x15c2>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8049ec2 <_init-0x1626>
data16
data16
insb   (%dx),%es:(%edi)
jne    8049f3a <_init-0x15ae>
push   $0x705f5f00
jb     8049f37 <_init-0x15b1>
outsb  %ds:(%esi),(%dx)
je     8049f37 <_init-0x15b1>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x6e(%esi)
insl   (%dx),%es:(%edi)
popa
je     8049f3f <_init-0x15a9>
push   $0x61657200
fs imul $0x65706f66,%fs:0x0(%edx),%esi
65
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8049f5e <_init-0x158a>
arpl   %bp,0x70(%ebp)
add    %dh,0x74(%ebx)
jb     8049f6a <_init-0x157e>
arpl   %bp,0x72(%eax)
add    %bl,0x5f(%edi)
jae    8049f74 <_init-0x1574>
jb     8049f66 <_init-0x1582>
jne    8049f74 <_init-0x1574>
add    %dh,0x65(%eax)
jb     8049f7b <_init-0x156d>
outsl  %ds:(%esi),(%dx)
jb     8049f0c <_init-0x15dc>
imul   $0x72646461,0x36(%esi),%ebp
pop    %edi
popa
outsb  %ds:(%esi),(%dx)
jns    8049f18 <_init-0x15d0>
addr16
gs
je     8049f8c <_init-0x155c>
jb     8049f8d <_init-0x155b>
je     8049f8f <_init-0x1559>
bound  %edi,0x6e(%ecx)
jne    8049f92 <_init-0x1556>
bound  %esp,0x72(%ebp)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8049f93 <_init-0x1555>
imul   $0x6c657466,%fs:0x0(%edx),%esi
insb   (%dx),%es:(%edi)
add    %ch,0x6e(%ecx)
gs
je     8049f9c <_init-0x154c>
outsb  %ds:(%esi),(%dx)
je     8049faf <_init-0x1539>
jo     8049f42 <_init-0x15a6>
jae    8049fb8 <_init-0x1530>
jb     8049fb4 <_init-0x1534>
arpl   %si,0x79(%eax)
add    %ah,0x6f(%esi)
jb     8049fb9 <_init-0x152f>
add    %bl,0x5f(%edi)
jae    8049fc7 <_init-0x1521>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x6e696c6e,0x75(%eax,%eax,1),%ebp
imul   $0x70,(%eax),%eax
jne    8049fde <_init-0x150a>
arpl   %bp,0x61(%eax)
jb     8049f6f <_init-0x1579>
insl   (%dx),%es:(%edi)
imul   $0x0,0x72(%ecx,%ebp,2),%esp
jb     8049fdc <_init-0x150c>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8049ff3 <_init-0x14f5>
imul   $0x6978655f,%fs:0x0(%esi),%ebp
je     8049f89 <_init-0x155f>
imul   $0x74705f74,0x65(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8049ffd <_init-0x14eb>
je     804a002 <_init-0x14e6>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
jb     804a014 <_init-0x14d4>
outsl  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     804a01b <_init-0x14cd>
outsl  %ds:(%esi),(%dx)
data16
add    %dh,0x74(%ebx)
jb     804a022 <_init-0x14c6>
outsl  %ds:(%esi),(%dx)
imul   $0x73,(%eax),%eax
je     804a026 <_init-0x14c2>
je     804a025 <_init-0x14c3>
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     804a031 <_init-0x14b7>
jns    8049fbf <_init-0x1529>
data16
addr16
gs
je     804a037 <_init-0x14b1>
add    %ah,0x65(%edi)
je     804a039 <_init-0x14af>
ja     804a039 <_init-0x14af>
popa
insl   (%dx),%es:(%edi)
add    %dh,0x74(%ebx)
jb     804a03e <_init-0x14aa>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
jae    804a041 <_init-0x14a7>
popa
jb     804a041 <_init-0x14a7>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    804a047 <_init-0x14a1>
je     8049fe4 <_init-0x1504>
jae    804a05a <_init-0x148e>
jb     804a05b <_init-0x148d>
je     804a05c <_init-0x148c>
add    %bl,0x5f(%edi)
gs
jb     804a062 <_init-0x1486>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6e696200,0x6e(%edi),%ebp
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x73(%ecx)
arpl   %si,0x6d(%ecx,%ebp,2)
add    %dh,%gs:0x65(%ebx)
je     804a082 <_init-0x1466>
jae    804a016 <_init-0x14d2>
pop    %edi
pop    %edi
data16
jo     804a08d <_init-0x145b>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x67,(%eax),%eax
gs
je     804a08f <_init-0x1459>
jb     804a098 <_init-0x1450>
popa
insl   (%dx),%es:(%edi)
add    %dh,0x74(%ebx)
outsl  %fs:(%esi),(%dx)
jne    804a0a7 <_init-0x1441>
add    %ah,0x65(%edi)
je     804a0a0 <_init-0x1448>
outsl  %ds:(%esi),(%dx)
jae    804a0af <_init-0x1439>
bound  %edi,0x61(%ecx)
fs
fs
jb     804a042 <_init-0x14a6>
data16
jo     804a0ba <_init-0x142e>
je     804a0aa <_init-0x143e>
add    %dh,0x65(%edx)
arpl   %si,0x0(%esi)
data16
jo     804a0c5 <_init-0x1423>
je     804a0c5 <_init-0x1423>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804a0c5 <_init-0x1423>
add    %dh,0x74(%ebx)
jb     804a0d9 <_init-0x140f>
outsl  %ds:(%esi),(%dx)
jne    804a0d4 <_init-0x1414>
add    %dh,0x65(%ebx)
je     804a0e0 <_init-0x1408>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804a0e7 <_init-0x1401>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    804a0f1 <_init-0x13f7>
jb     804a0e2 <_init-0x1406>
popa
je     804a082 <_init-0x1466>
jae    804a0f8 <_init-0x13f0>
jb     804a0e9 <_init-0x13ff>
popa
jae    804a0ee <_init-0x13fa>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
imul   $0x74635f5f,%fs:0x0(%edx),%esi
jns    804a10b <_init-0x13dd>
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     804a10c <_init-0x13dc>
outsb  %ds:(%esi),(%dx)
jbe    804a0aa <_init-0x143e>
jae    804a11f <_init-0x13c9>
arpl   %sp,0x6e(%ecx)
data16
add    %dh,0x74(%ebx)
fs
gs
jb     804a129 <_init-0x13bf>
add    %ch,0x6e(%ecx)
outsl  %ds:(%esi),(%dx)
je     804a126 <_init-0x13c2>
data16
jns    804a11f <_init-0x13c9>
imul   $0x5f5f0074,0x69(%esi),%ebp
jae    804a137 <_init-0x13b1>
jo     804a13d <_init-0x13ab>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x66,(%eax),%eax
jae    804a13a <_init-0x13ae>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %bl,0x5f(%edi)
jae    804a153 <_init-0x1395>
jb     804a14f <_init-0x1399>
arpl   %sp,0x74(%ecx)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
arpl   %si,%gs:0x70(%esi)
add    %ah,0x72(%esi)
outsl  %gs:(%esi),(%dx)
jo     804a15b <_init-0x138d>
outsb  %ds:(%esi),(%dx)
add    %ch,0x66(%ecx)
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
je     804a170 <_init-0x1378>
imul   $0x5f007865,0x64(%esi),%ebp
pop    %edi
data16
js     804a17f <_init-0x1369>
je     804a16f <_init-0x1379>
je     804a110 <_init-0x13d8>
jae    804a177 <_init-0x1371>
outsb  %ds:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    804a17e <_init-0x136a>
add    %dh,0x74(%ebx)
jb     804a190 <_init-0x1358>
outsl  %ds:(%esi),(%dx)
jne    804a18b <_init-0x135d>
insb   (%dx),%es:(%edi)
add    %dh,0x65(%ebx)
je     804a18d <_init-0x135b>
outsl  %ds:(%esi),(%dx)
jae    804a19c <_init-0x134c>
outsb  %gs:(%esi),(%dx)
je     804a12c <_init-0x13bc>
pop    %edi
pop    %edi
addr16
gs
je     804a196 <_init-0x1352>
gs
insb   (%dx),%es:(%edi)
imul   $0x695f6669,0x0(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
fs
gs
js     804a1b4 <_init-0x1334>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x77(%esi)
jb     804a1b3 <_init-0x1335>
je     804a1b1 <_init-0x1337>
add    %ah,0x72(%esi)
gs
popa
add    %ah,%fs:0x65(%edi)
je     804a1cb <_init-0x131d>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    804a160 <_init-0x1388>
pop    %edi
pop    %edi
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x61(%edi)
imul   $0x5f5f0064,0x69(%eax,%esi,2),%esi
data16
jb     804a1df <_init-0x1309>
popa
fs
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
je     804a1f1 <_init-0x12f7>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%ebx)
jb     804a1f2 <_init-0x12f6>
push   $0x65670072
je     804a209 <_init-0x12df>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x65(%ebx)
outsb  %ds:(%esi),(%dx)
fs
je     804a213 <_init-0x12d5>
add    %ch,0x6e(%ecx)
outsl  %ds:(%esi),(%dx)
je     804a213 <_init-0x12d5>
data16
jns    804a20c <_init-0x12dc>
popa
fs
fs
pop    %edi
ja     804a214 <_init-0x12d4>
je     804a218 <_init-0x12d0>
push   $0x735f5f00
je     804a22e <_init-0x12ba>
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x6d(%ebp)
outsl  %ds:(%esi),(%dx)
jne    804a237 <_init-0x12b1>
je     804a1fd <_init-0x12eb>
add    %bl,0x5f(%edi)
jae    804a240 <_init-0x12a8>
jb     804a23b <_init-0x12ad>
outsb  %ds:(%esi),(%dx)
je     804a23b <_init-0x12ad>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x65(%edi)
je     804a24e <_init-0x129a>
jb     804a24f <_init-0x1299>
je     804a251 <_init-0x1297>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
js     804a260 <_init-0x1288>
je     804a250 <_init-0x1298>
je     804a1f1 <_init-0x12f7>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    804a263 <_init-0x1285>
je     804a1f7 <_init-0x12f1>
jae    804a26d <_init-0x127b>
jb     804a25e <_init-0x128a>
insl   (%dx),%es:(%edi)
jo     804a1fe <_init-0x12ea>
jb     804a265 <_init-0x1283>
arpl   %si,0x6d(%esi)
jae    804a26c <_init-0x127c>
add    %dh,0x74(%ebx)
jb     804a26f <_init-0x1279>
jb     804a27e <_init-0x126a>
outsl  %ds:(%esi),(%dx)
jb     804a20f <_init-0x12d9>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804a28f <_init-0x1259>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x72706e73,0x0(%esi),%ebp
imul   $0x79730066,0x74(%esi),%ebp
jae    804a291 <_init-0x1257>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x7573635f,0x63(%edx),%esp
pop    %edi
imul   $0x6d00,0x69(%esi),%bp
imul   $0x677261,0x73(%ebx),%esi
outsl  %fs:(%esi),(%dx)
pop    %edi
imul   $0x61746e75,0x74(%eax),%esi
jo     804a25b <_init-0x128d>
jb     804a2d1 <_init-0x1217>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a2d6 <_init-0x1212>
jb     804a2c9 <_init-0x121f>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
pop    %edi
popa
xor    0x0(%esi),%ch
outsl  %fs:(%esi),(%dx)
pop    %edi
js     804a2d7 <_init-0x1211>
jb     804a2e0 <_init-0x1208>
pop    %edi
jo     804a2e5 <_init-0x1203>
insb   (%dx),%es:(%edi)
imul   $0x74656700,0x79(%ebx),%esp
pop    %edi
jae    804a2b9 <_init-0x122f>
add    %ch,0x65(%eax)
js     804a2f9 <_init-0x11ef>
je     804a2fa <_init-0x11ee>
imul   $0x6e32615f,0x67(%esi),%ebp
add    %dh,0x74(%esi)
imul   $0x5f6b6e69,0x6c(%edi),%ebx
jne    804a30f <_init-0x11d9>
imul   $0x756d5f6f,0x64(%eax,%eax,1),%ebp
insb   (%dx),%es:(%edi)
je     804a30f <_init-0x11d9>
jb     804a31d <_init-0x11cb>
insb   (%dx),%es:(%edi)
add    %ch,%gs:0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x7261705f,0x6b(%esi),%ebp
jae    804a31c <_init-0x11cc>
add    %ch,0x5f(%esp,%ebp,2)
imul   $0x745f7865,0x64(%esi),%ebp
outsl  %ds:(%esi),(%dx)
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%ecx)
fs
popa
je     804a343 <_init-0x11a5>
jb     804a302 <_init-0x11e6>
add    %bh,%ss:0x66(%eax)
jb     804a344 <_init-0x11a4>
pop    %edi
js     804a340 <_init-0x11a8>
jb     804a349 <_init-0x119f>
jo     804a350 <_init-0x1198>
outsl  %ds:(%esi),(%dx)
je     804a350 <_init-0x1198>
pop    %edi
imul   $0x64006f72,0x5f(%ebx),%esi
outsl  %ds:(%esi),(%dx)
pop    %edi
imul   $0x656e6e75,0x74(%eax),%esi
insb   (%dx),%es:(%edi)
add    %ah,0x70(%ebp,%esi,2)
popa
jb     804a361 <_init-0x1187>
add    %ch,0x70(%ecx)
popa
fs
fs
jb     804a361 <_init-0x1187>
jb     804a369 <_init-0x117f>
jae    804a36b <_init-0x117d>
je     804a367 <_init-0x1181>
imul   $0x72,0x65(%esp,%esi,2),%bp
imul   $0x5f657267,0x36(%eax),%esi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %ah,0x65(%edi)
je     804a383 <_init-0x1165>
jne    804a35c <_init-0x118c>
xor    $0x0,%al
jb     804a39e <_init-0x114a>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     804a395 <_init-0x1153>
outsb  %ds:(%esi),(%dx)
pop    %edi
bound  %edi,0x70(%ecx)
jb     804a3a6 <_init-0x1142>
je     804a3a8 <_init-0x1140>
add    %bh,0x66(%eax)
jb     804a3ab <_init-0x113d>
pop    %edi
jo     804a3a2 <_init-0x1146>
jb     804a3b6 <_init-0x1132>
gs
pop    %edi
insl   (%dx),%es:(%edi)
popa
jb     804a3b4 <_init-0x1134>
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
addr16 jb 804a3c1 <_init-0x1127>
jne    804a3c4 <_init-0x1124>
pop    %edi
popa
xor    0x0(%esi),%ch
popa
fs
fs
jb     804a3bf <_init-0x1129>
ja     804a3bf <_init-0x1129>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
addr16
gs
je     804a3c7 <_init-0x1121>
push   $0x6567007a
je     804a3ce <_init-0x111a>
jb     804a3e5 <_init-0x1103>
pop    %edi
jb     804a3d9 <_init-0x110f>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    804a379 <_init-0x116f>
outsl  %fs:(%esi),(%dx)
pop    %edi
imul   $0x6c726464,0x61(%eax),%esi
popa
bound  %esp,0x6c(%ebp)
add    %ah,0x65(%edi)
je     804a3eb <_init-0x10fd>
jne    804a3c6 <_init-0x1122>
add    %ch,0x5f(%esp,%ebp,2)
imul   $0x61326e,0x5f(%eax,%edi,2),%esp
imul   $0x65675f74,0x65(%esi),%ebp
je     804a402 <_init-0x10e6>
popa
fs
fs
jb     804a3a8 <_init-0x1140>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x616d5f74,0x69(%esi),%ebp
jo     804a3b4 <_init-0x1134>
jae    804a42a <_init-0x10be>
jb     804a430 <_init-0x10b8>
pop    %di
popa
insb   (%dx),%es:(%edi)
outsl  %ds:(%si),(%dx)
je     804a439 <_init-0x10af>
jo     804a427 <_init-0x10c1>
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x6e6e7574,0x36(%eax),%esi
gs
insb   (%dx),%es:(%edi)
add    %dh,0x72(%eax)
imul   $0x74656e5f,0x74(%esi),%ebp
arpl   %bp,0x6e(%edi)
data16
add    %ch,0x65(%eax)
js     804a455 <_init-0x1093>
je     804a456 <_init-0x1092>
imul   $0x61326e5f,0x67(%esi),%ebp
add    %ah,0x5f(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
gs
je     804a461 <_init-0x1087>
jae    804a3f5 <_init-0x10f3>
imul   $0x6c706d6f,0x63(%esi),%ebp
gs
je     804a464 <_init-0x1084>
pop    %edi
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a483 <_init-0x1065>
outsb  %ds:(%esi),(%dx)
je     804a48b <_init-0x105d>
jo     804a479 <_init-0x106f>
pop    %edi
popa
xor    0x0(%esi),%ch
outsl  %fs:(%esi),(%dx)
pop    %edi
js     804a484 <_init-0x1064>
jb     804a48d <_init-0x105b>
add    %ah,0x64(%ecx)
fs
popa
je     804a49b <_init-0x104d>
jb     804a488 <_init-0x1060>
outsb  %ds:(%esi),(%dx)
gs
jae    804a4a1 <_init-0x1047>
pop    %edi
arpl   %bp,0x6d(%edi)
jo     804a494 <_init-0x1054>
je     804a435 <_init-0x10b3>
je     804a4a5 <_init-0x1043>
insb   (%dx),%es:(%edi)
pop    %edi
popa
fs
fs
pop    %edi
imul   $0x72006c74,0x63(%edi),%ebp
je     804a4b4 <_init-0x1034>
insb   (%dx),%es:(%edi)
pop    %edi
fs
jae    804a4b1 <_init-0x1037>
imul   $0x32615f64,0x6c(%ebp),%esp
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a4cf <_init-0x1019>
outsb  %ds:(%esi),(%dx)
je     804a4d7 <_init-0x1011>
jo     804a4c5 <_init-0x1023>
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
popa
fs
fs
popa
je     804a4df <_init-0x1009>
jb     804a4e0 <_init-0x1008>
je     804a4e1 <_init-0x1007>
jp     804a471 <_init-0x1077>
jb     804a4e7 <_init-0x1001>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
ja     804a4e1 <_init-0x1007>
insb   (%dx),%es:(%edi)
fs
fs
jne    804a4ea <_init-0xffe>
jo     804a4de <_init-0x100a>
jb     804a4e6 <_init-0x1002>
jno    804a4f8 <_init-0xff0>
gs
jae    804a4fa <_init-0xfee>
add    %bl,0x65(%edi)
fs
popa
je     804a4ee <_init-0xffa>
add    %ch,0x5f(%esp,%ebp,2)
imul   $0x745f7865,0x64(%esi),%ebp
outsl  %ds:(%esi),(%dx)
pop    %edi
je     804a515 <_init-0xfd3>
jo     804a503 <_init-0xfe5>
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x6e656b6f,0x74(%eax),%esi
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
addr16 jb 804a521 <_init-0xfc7>
jne    804a524 <_init-0xfc4>
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
addr16
gs
je     804a51c <_init-0xfcc>
imul   $0x72656765,0x74(%esi),%ebp
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x6f637465,0x6e(%eax),%esi
outsb  %ds:(%esi),(%dx)
data16
add    %ch,0x61(%ebp)
je     804a539 <_init-0xfaf>
push   $0x70007365
jb     804a546 <_init-0xfa2>
outsb  %ds:(%esi),(%dx)
je     804a53f <_init-0xfa9>
jb     804a551 <_init-0xf97>
jne    804a558 <_init-0xf90>
add    %ah,%gs:0x64(%ecx)
fs
popa
je     804a560 <_init-0xf88>
jb     804a54d <_init-0xf9b>
outsb  %ds:(%esi),(%dx)
gs
jae    804a566 <_init-0xf82>
pop    %edi
outsb  %gs:(%esi),(%dx)
add    %ah,%fs:0x65(%edi)
je     804a55a <_init-0xf8e>
outsl  %ds:(%esi),(%dx)
jo     804a563 <_init-0xf85>
jb     804a573 <_init-0xf75>
je     804a563 <_init-0xf85>
je     804a569 <_init-0xf7f>
add    %dh,0x61(%eax)
jb     804a57c <_init-0xf6c>
gs
pop    %edi
jb     804a581 <_init-0xf67>
popa
je     804a584 <_init-0xf64>
jb     804a571 <_init-0xf77>
bound  %edi,0x69(%ecx)
outsb  %ds:(%esi),(%dx)
fs
gs
js     804a51a <_init-0xfce>
jb     804a590 <_init-0xf58>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
je     804a582 <_init-0xf66>
insb   (%dx),%es:(%edi)
imul   $0x78,(%eax),%eax
data16
jb     804a595 <_init-0xf53>
pop    %edi
js     804a591 <_init-0xf57>
jb     804a59a <_init-0xf4e>
jo     804a5a1 <_init-0xf47>
outsl  %ds:(%esi),(%dx)
je     804a5a1 <_init-0xf47>
pop    %edi
imul   $0x65737069,0x5f(%ebx),%esi
arpl   %ax,(%eax)
arpl   %bp,0x64(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x69006f6e,0x65(%esi),%ebp
jo     804a5b5 <_init-0xf33>
imul   $0x6173755f,0x6b(%esi),%ebp
add    %dh,%gs:0x72(%bx,%si)
imul   $0x6464615f,0x74(%esi),%ebp
jb     804a5c7 <_init-0xf21>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
add    %dh,0x72(%eax)
imul   $0x6d69745f,0x74(%esi),%ebp
gs
jae    804a5e2 <_init-0xf06>
popa
insl   (%dx),%es:(%edi)
jo     804a572 <_init-0xf76>
js     804a5da <_init-0xf0e>
jb     804a5e3 <_init-0xf05>
pop    %edi
jae    804a5de <_init-0xf0a>
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x72(%edi,%ebp,2)
pop    %edi
jo     804a5f4 <_init-0xef4>
imul   $0x5f6c6c00,0x74(%esi),%ebp
jb     804a5f0 <_init-0xef8>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
pop    %edi
imul   $0x78007865,0x64(%esi),%ebp
data16
jb     804a609 <_init-0xedf>
pop    %edi
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs
gs
pop    %edi
jo     804a605 <_init-0xee3>
jb     804a619 <_init-0xecf>
add    %ah,%gs:0x5f(%edi,%ebp,2)
js     804a613 <_init-0xed5>
jb     804a61c <_init-0xecc>
pop    %edi
jae    804a626 <_init-0xec2>
popa
je     804a61a <_init-0xece>
add    %bh,0x66(%eax)
jb     804a627 <_init-0xec1>
pop    %edi
jo     804a62c <_init-0xebc>
insb   (%dx),%es:(%edi)
imul   $0x666e695f,0x79(%ebx),%esp
outsl  %ds:(%esi),(%dx)
pop    %edi
jo     804a63b <_init-0xead>
imul   $0x705f5f00,0x74(%esi),%ebp
popa
jb     804a646 <_init-0xea2>
gs
pop    %edi
jb     804a64b <_init-0xe9d>
popa
je     804a64e <_init-0xe9a>
jb     804a63b <_init-0xead>
outsb  %ds:(%esi),(%dx)
gs
jae    804a654 <_init-0xe94>
gs
fs
pop    %edi
arpl   %bp,0x6d(%edi)
jo     804a649 <_init-0xe9f>
je     804a5ea <_init-0xefe>
addr16
gs
je     804a64d <_init-0xe9b>
jne    804a623 <_init-0xec5>
xor    (%eax),%al
outsl  %fs:(%esi),(%dx)
pop    %edi
imul   $0x68676965,0x6e(%eax),%esi
add    %ah,0x65(%edi)
je     804a660 <_init-0xe88>
jo     804a675 <_init-0xe73>
imul   $0x31,%gs:0x5f(%eax),%di
jb     804a680 <_init-0xe68>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a685 <_init-0xe63>
jae    804a676 <_init-0xe72>
outsl  %ds:(%esi),(%dx)
jo     804a67b <_init-0xe6d>
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
imul   $0x696c5f70,0x69(%eax),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x74,0x75(%edi),%ebx
imul   $0x756f7270,0x69(%eax,%eax,1),%ebp
je     804a696 <_init-0xe52>
pop    %edi
jb     804a699 <_init-0xe4f>
jae    804a69b <_init-0xe4d>
je     804a697 <_init-0xe51>
imul   $0x72,0x65(%esp,%esi,2),%bp
outsb  %gs:(%si),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a6ab <_init-0xe3d>
jae    804a6b7 <_init-0xe31>
insb   (%dx),%es:(%edi)
jbe    804a6b0 <_init-0xe38>
pop    %edi
popaw
insl   (%dx),%es:(%edi)
imul   $0x6c6e7472,0x0(%ecx,%edi,2),%ebp
pop    %edi
jae    804a6bf <_init-0xe29>
outsb  %ds:(%esi),(%dx)
add    %ch,%fs:0x61(%ebp)
imul   $0x72,0x61(%ebp),%esp
addr16 jae 804a666 <_init-0xe82>
insl   (%dx),%es:(%edi)
popa
js     804a6c9 <_init-0xe1f>
data16
insb   (%dx),%es:(%edi)
jne    804a6e1 <_init-0xe07>
push   $0x6f6f6c5f
jo     804a6e8 <_init-0xe00>
add    %ah,0x65(%edi)
je     804a6d9 <_init-0xe0f>
jo     804a6ee <_init-0xdfa>
imul   $0x6c6c,%gs:0x0(%eax),%di
pop    %edi
jo     804a6f8 <_init-0xdf0>
outsl  %ds:(%esi),(%dx)
je     804a6f8 <_init-0xdf0>
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
pop    %edi
pop    %edi
imul   $0x6574756f,0x72(%eax),%esi
xor    0x68(%edi),%bl
jp     804a6fb <_init-0xded>
imul   $0x616e7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x72(%eax)
imul   $0x69656e5f,0x74(%esi),%ebp
addr16 push $0x5f6c6c00
popa
fs
fs
jb     804a718 <_init-0xdd0>
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
jb     804a722 <_init-0xdc6>
jbe    804a723 <_init-0xdc5>
jne    804a729 <_init-0xdbf>
add    %ch,0x70(%ecx)
ss
je     804a737 <_init-0xdb1>
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     804a739 <_init-0xdaf>
fs
gs
je     804a73f <_init-0xda9>
imul   $0x74656e64,0x0(%ebx,%esi,2),%ebp
pop    %edi
outsb  %ds:(%esi),(%dx)
je     804a759 <_init-0xd8f>
jo     804a6ec <_init-0xdfc>
outsl  %fs:(%esi),(%dx)
pop    %edi
imul   $0x707432,0x6c(%eax),%esi
outsl  %fs:(%esi),(%dx)
pop    %edi
insl   (%dx),%es:(%edi)
jne    804a768 <_init-0xd80>
je     804a767 <_init-0xd81>
popa
fs
fs
jb     804a703 <_init-0xde5>
jae    804a779 <_init-0xd6f>
jb     804a77f <_init-0xd69>
pop    %di
jo     804a77f <_init-0xd69>
jns    804a77d <_init-0xd6b>
add    %dh,%gs:0x72(%eax)
imul   $0x6f726d5f,0x74(%esi),%ebp
jne    804a78e <_init-0xd5a>
add    %dh,%gs:0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804a797 <_init-0xd51>
jo     804a797 <_init-0xd51>
outsl  %ds:(%esi),(%dx)
je     804a787 <_init-0xd61>
popa
xor    0x0(%esi),%ch
je     804a79c <_init-0xd4c>
insb   (%dx),%es:(%edi)
pop    %edi
jo     804a7a4 <_init-0xd44>
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x78006c74,0x63(%edi),%ebp
data16
jb     804a7ab <_init-0xd3d>
pop    %edi
popa
insb   (%dx),%es:(%edi)
outsl  %ds:(%si),(%dx)
je     804a7be <_init-0xd2a>
jo     804a7ac <_init-0xd3c>
pop    %edi
addr16
gs
je     804a7ae <_init-0xd3a>
jns    804a7bc <_init-0xd2c>
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
fs
jae    804a7c0 <_init-0xd28>
imul   $0x326e5f64,0x6c(%ebp),%esp
popa
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x656c75,0x72(%eax),%esi
pop    %edi
pop    %edi
fs
popa
je     804a7d4 <_init-0xd14>
pop    %edi
jae    804a7ea <_init-0xcfe>
popa
jb     804a7ed <_init-0xcfb>
add    %ch,0x70(%ecx)
popa
fs
fs
jb     804a7e0 <_init-0xd08>
insb   (%dx),%es:(%edi)
imul   $0x6e696c5f,0x74(%ebx),%esi
imul   $0x63,(%eax),%eax
popa
outsb  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x65(%esi)
je     804a805 <_init-0xce3>
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %ah,0x65(%esi,%ebp,2)
je     804a80c <_init-0xcdc>
jo     804a823 <_init-0xcc5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %bh,0x66(%eax)
jb     804a823 <_init-0xcc5>
pop    %edi
jae    804a81c <_init-0xccc>
je     804a833 <_init-0xcb5>
pop    %edi
jo     804a81f <_init-0xcc9>
jb     804a833 <_init-0xcb5>
add    %ah,%gs:0x5f(%edi,%ebp,2)
imul   $0x6c626174,0x6e(%eax),%esi
add    %dh,%gs:0x74(%ebx)
jb     804a84a <_init-0xc9e>
pop    %di
insl   (%dx),%es:(%edi)
popa
jae    804a843 <_init-0xca5>
xor    (%edx),%esi
add    %ah,0x6f(%esi)
jb     804a842 <_init-0xca6>
add    %dh,%gs:0x69(%ebx)
je     804a844 <_init-0xca4>
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
ja     804a85f <_init-0xc89>
insb   (%dx),%es:(%edi)
fs
fs
jne    804a868 <_init-0xc80>
jo     804a85c <_init-0xc8c>
jb     804a864 <_init-0xc84>
jno    804a860 <_init-0xc88>
imul   $0x72,0x65(%esp,%esi,2),%bp
jo     804a87c <_init-0xc6c>
imul   $0x6c75725f,0x74(%esi),%ebp
add    %bl,%gs:0x53(%edi)
dec    %esp
pop    %edi
add    %ch,0x70(%ecx)
outsb  %ds:(%esi),(%dx)
imul   $0x7365725f,%gs:0x68(%edi),%esp
gs
je     804a885 <_init-0xc63>
imul   $0x72,0x65(%esp,%esi,2),%bp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
popa
fs
fs
jb     804a894 <_init-0xc54>
popa
xor    0x0(%esi),%ch
je     804a8a9 <_init-0xc3f>
insb   (%dx),%es:(%edi)
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x6d006c74,0x63(%edi),%ebp
popa
arpl   %si,0x74(%esi)
popa
jo     804a8ae <_init-0xc3a>
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %ah,0x65(%edi)
je     804a8bc <_init-0xc2c>
jne    804a890 <_init-0xc58>
add    %dh,%ss:0x72(%eax)
gs
data16
gs
jb     804a8da <_init-0xc0e>
gs
fs
pop    %edi
popaw
insl   (%dx),%es:(%edi)
imul   $0x5f617472,0x0(%ecx,%edi,2),%ebp
popa
fs
fs
popa
je     804a8f0 <_init-0xbf8>
jb     804a8b1 <_init-0xc37>
xor    (%eax),%al
addr16
gs
je     804a8e7 <_init-0xc01>
insl   (%dx),%es:(%edi)
fs
insb   (%dx),%es:(%edi)
imul   $0x74656700,0x65(%esi),%ebp
pop    %edi
popa
fs
fs
jb     804a8f3 <_init-0xbf5>
xor    %eax,(%eax)
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x7573635f,0x63(%edx),%esp
pop    %edi
imul   $0x74720074,0x69(%esi),%ebp
push   $0x5f6f6400
js     804a915 <_init-0xbd3>
jb     804a91e <_init-0xbca>
pop    %edi
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x74656700,0x72(%edi,%ebp,2),%esi
pop    %edi
je     804a929 <_init-0xbbf>
insl   (%dx),%es:(%edi)
gs
pop    %edi
jb     804a939 <_init-0xbaf>
je     804a8c7 <_init-0xc21>
jb     804a93d <_init-0xbab>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %ah,%gs:0x65(%edi)
je     804a935 <_init-0xbb3>
jae    804a909 <_init-0xbdf>
add    %dh,%ss:0x74(%ebx)
jb     804a956 <_init-0xb92>
pop    %di
jo     804a954 <_init-0xb94>
outsl  %ds:(%esi),(%dx)
je     804a954 <_init-0xb94>
add    %bh,0x66(%eax)
jb     804a957 <_init-0xb91>
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x656d6974,0x65(%esi),%esp
pop    %edi
jo     804a968 <_init-0xb80>
imul   $0x73616d00,0x74(%esi),%ebp
imul   $0x62,(%edx),%esi
imul   $0x6c6e7472,0x0(%ebx,%esi,2),%esi
pop    %edi
jb     804a97f <_init-0xb69>
je     804a96e <_init-0xb7a>
bound  %ebp,0x5f(%ebp,%eiz,2)
popa
xor    0x0(%esi),%ch
js     804a97d <_init-0xb6b>
jb     804a986 <_init-0xb62>
pop    %edi
imul   $0x65737261,0x70(%edi,%ebx,2),%esp
add    %ch,0x6e(%edi)
gs
insb   (%dx),%es:(%edi)
imul   $0x72747300,0x65(%esi),%ebp
js     804a996 <_init-0xb52>
pop    %edi
js     804a999 <_init-0xb4f>
jb     804a9a2 <_init-0xb46>
jo     804a9a9 <_init-0xb3f>
outsl  %ds:(%esi),(%dx)
je     804a9a9 <_init-0xb3f>
add    %bh,0x66(%eax)
jb     804a9ac <_init-0xb3c>
pop    %edi
js     804a9a8 <_init-0xb40>
jb     804a9b1 <_init-0xb37>
popa
pop    %edi
jo     804a9ba <_init-0xb2e>
imul   $0x70665f00,0x74(%esi),%ebp
pop    %edi
push   $0x65670077
je     804a9b6 <_init-0xb32>
outsb  %ds:(%esi),(%dx)
gs
je     804a9c9 <_init-0xb1f>
jae    804a9bc <_init-0xb2c>
data16
add    %ah,%fs:0x5f(%edi,%ebp,2)
insl   (%dx),%es:(%edi)
jne    804a9d2 <_init-0xb16>
je     804a9d1 <_init-0xb17>
jb     804a9d9 <_init-0xb0f>
jne    804a9e0 <_init-0xb08>
add    %dh,%gs:0x72(%eax)
imul   $0x6464615f,0x74(%esi),%ebp
jb     804a9e5 <_init-0xb03>
popa
bound  %esp,0x6c(%ebp)
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x6574756f,0x72(%eax),%esi
add    %bh,0x66(%eax)
jb     804a9fa <_init-0xaee>
pop    %edi
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
pop    %edi
je     804aa0f <_init-0xad9>
jo     804a9fd <_init-0xaeb>
pop    %edi
jo     804a9fc <_init-0xaec>
jb     804aa10 <_init-0xad8>
add    %dh,%gs:0x74(%ebx)
jb     804aa1b <_init-0xacd>
pop    %di
insl   (%dx),%es:(%edi)
popa
jae    804aa14 <_init-0xad4>
cmp    %al,(%eax)
outsl  %fs:(%esi),(%dx)
pop    %edi
imul   $0x74696e6f,0x6d(%eax),%esi
outsl  %ds:(%esi),(%dx)
jb     804a9b8 <_init-0xb30>
js     804aa20 <_init-0xac8>
jb     804aa29 <_init-0xabf>
pop    %edi
jae    804aa33 <_init-0xab5>
popa
je     804aa27 <_init-0xac1>
pop    %edi
jo     804aa37 <_init-0xab1>
imul   $0x72667800,0x74(%esi),%ebp
insl   (%dx),%es:(%edi)
pop    %edi
jb     804aa35 <_init-0xab3>
jno    804aa3b <_init-0xaad>
fs
pop    %edi
jo     804aa37 <_init-0xab1>
jb     804aa4b <_init-0xa9d>
add    %bh,%gs:0x66(%eax)
jb     804aa4b <_init-0xa9d>
pop    %edi
imul   $0x5f6f666e,0x69(%edi,%ebx,2),%esp
jo     804aa5b <_init-0xa8d>
imul   $0x78706900,0x74(%esi),%ebp
pop    %edi
outsb  %ds:(%esi),(%dx)
je     804aa63 <_init-0xa85>
jo     804a9f6 <_init-0xaf2>
jb     804aa6c <_init-0xa7c>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
fs
jne    804aa6b <_init-0xa7d>
jo     804aa5f <_init-0xa89>
imul   $0x5f72,0x65(%esp,%esi,2),%bp
insb   (%dx),%es:(%edi)
add    %ch,0x6e(%ecx)
gs
je     804aa6d <_init-0xa7b>
popa
fs
fs
jb     804aa72 <_init-0xa76>
insl   (%dx),%es:(%edi)
popa
je     804aa7a <_init-0xa6e>
push   $0x69727000
outsb  %ds:(%esi),(%dx)
je     804aa7e <_init-0xa6a>
insb   (%dx),%es:(%edi)
imul   $0x6f666e69,0x6b(%esi),%ebp
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804aaa3 <_init-0xa45>
jb     804aa96 <_init-0xa52>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
pop    %edi
pop    %edi
bound  %esi,0x73(%ebx)
pop    %edi
jae    804aab5 <_init-0xa33>
popa
jb     804aab8 <_init-0xa30>
add    %bh,0x66(%eax)
jb     804aab6 <_init-0xa32>
pop    %edi
jae    804aac0 <_init-0xa28>
popa
je     804aab4 <_init-0xa34>
pop    %edi
imul   $0x72705f6f,0x66(%esi),%ebp
imul   $0x5f6f6400,0x74(%esi),%ebp
je     804aac3 <_init-0xa25>
jo     804aac1 <_init-0xa27>
insl   (%dx),%es:(%edi)
gs
je     804aad8 <_init-0xa10>
imul   $0x6c6e7400,0x73(%ebx),%esp
pop    %edi
ss
jb     804aad5 <_init-0xa13>
pop    %edi
imul   $0x72006c74,0x63(%edi),%ebp
je     804aae9 <_init-0x9ff>
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     804aaef <_init-0x9f9>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7270,0x0(%ebp,%eiz,2),%bp
imul   $0x61746e5f,0x74(%esi),%ebp
bound  %ebp,0x0(%ebp,%eiz,2)
jae    804ab0a <_init-0x9de>
jb     804ab10 <_init-0x9d8>
pop    %di
jae    804ab04 <_init-0x9e4>
popa
jb     804ab04 <_init-0x9e4>
add    %ch,0x5f(%esp,%ebp,2)
imul   $0x745f7865,0x64(%esi),%ebp
outsl  %ds:(%esi),(%dx)
pop    %edi
data16
insb   (%dx),%es:(%edi)
popa
addr16 jae 804aab2 <_init-0xa36>
imul   $0x74756f72,0x6d(%eax),%esi
gs
pop    %edi
jb     804ab22 <_init-0x9c6>
jae    804ab24 <_init-0x9c4>
je     804ab20 <_init-0x9c8>
imul   $0x72,0x65(%esp,%esi,2),%bp
jb     804ab3e <_init-0x9aa>
pop    %edi
popa
fs
fs
jb     804ab2f <_init-0x9b9>
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
jo     804ab37 <_init-0x9b1>
jb     804ab4b <_init-0x99d>
gs
pop    %edi
jb     804ab50 <_init-0x998>
popa
je     804ab53 <_init-0x995>
jb     804ab40 <_init-0x9a8>
data16
insb   (%dx),%es:(%edi)
popa
addr16 jae 804aae7 <_init-0xa01>
js     804ab4f <_init-0x999>
jb     804ab58 <_init-0x990>
pop    %edi
jae    804ab62 <_init-0x986>
popa
je     804ab64 <_init-0x984>
pop    %edi
jo     804ab66 <_init-0x982>
imul   $0x63616d00,0x74(%esi),%ebp
jbe    804ab69 <_init-0x97f>
popa
outsb  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x61(%eax)
jb     804ab81 <_init-0x967>
gs
pop    %edi
jb     804ab86 <_init-0x962>
popa
je     804ab89 <_init-0x95f>
jb     804ab17 <_init-0x9d1>
js     804ab7f <_init-0x969>
jb     804ab88 <_init-0x960>
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x656d6974,0x65(%esi),%esp
pop    %edi
arpl   %sp,0x67(%esi)
pop    %edi
jo     804ab8c <_init-0x95c>
jb     804aba0 <_init-0x948>
add    %ah,%gs:0x5f(%edi,%ebp,2)
imul   $0x6b6e69,0x6c(%eax),%esi
jbe    804abb3 <_init-0x935>
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x6c(%esi,%ebp,2)
pop    %edi
addr16
gs
je     804abb0 <_init-0x938>
imul   $0x74006c74,0x63(%edi),%ebp
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jae    804abd1 <_init-0x917>
jb     804abcf <_init-0x919>
jb     804abd0 <_init-0x918>
je     804abd2 <_init-0x916>
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x78006e65,0x74(%ebx),%esi
data16
jb     804abe1 <_init-0x907>
pop    %edi
jae    804abdc <_init-0x90c>
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x72(%edi,%ebp,2)
pop    %edi
jo     804abe1 <_init-0x907>
jb     804abf5 <_init-0x8f3>
add    %ah,%gs:0x6f(%esi)
jb     804abf5 <_init-0x8f3>
popa
je     804abea <_init-0x8fe>
push   $0x74736f
addr16
gs
je     804abf3 <_init-0x8f5>
jae    804abc9 <_init-0x91f>
xor    (%eax),%al
addr16
gs
je     804abfb <_init-0x8ed>
insb   (%dx),%es:(%edi)
imul   $0x6e696b5f,0x6b(%esi),%ebp
add    %dh,%fs:0x72(%eax)
imul   $0x6572705f,0x74(%esi),%ebp
imul   $0x7069,0x0(%eax),%di
outsb  %ds:(%esi),(%dx)
je     804ac19 <_init-0x8cf>
bound  %ebp,0x5f(%ebp,%eiz,2)
jb     804ac23 <_init-0x8c5>
jae    804ac25 <_init-0x8c3>
je     804ac21 <_init-0x8c7>
imul   $0x72,0x65(%esp,%esi,2),%bp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
jo     804ac40 <_init-0x8a8>
outsl  %ds:(%esi),(%dx)
je     804ac40 <_init-0x8a8>
pop    %edi
popa
xor    0x0(%esi),%ch
jb     804ac4c <_init-0x89c>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
fs
jne    804ac4b <_init-0x89d>
jo     804ac3f <_init-0x8a9>
jb     804ac47 <_init-0x8a1>
jno    804ac59 <_init-0x88f>
gs
jae    804ac5b <_init-0x88d>
add    %ah,0x65(%edi)
je     804ac4b <_init-0x89d>
popa
fs
fs
jb     804ac24 <_init-0x8c4>
xor    (%eax),%al
imul   $0x6c5f6269,0x6f(%eax),%esi
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %ah,0x64(%ecx)
fs
popa
je     804ac7d <_init-0x86b>
jb     804ac6a <_init-0x87e>
outsb  %ds:(%esi),(%dx)
gs
jae    804ac83 <_init-0x865>
pop    %edi
arpl   %bp,0x6d(%edi)
jo     804ac76 <_init-0x872>
je     804ac76 <_init-0x872>
outsb  %gs:(%esi),(%dx)
add    %bh,%fs:0x66(%eax)
jb     804ac8c <_init-0x85c>
pop    %edi
jo     804ac91 <_init-0x857>
insb   (%dx),%es:(%edi)
imul   $0x6972705f,0x79(%ebx),%esp
outsb  %ds:(%esi),(%dx)
je     804ac2d <_init-0x8bb>
fs
jne    804aca0 <_init-0x848>
popa
jb     804ac9a <_init-0x84e>
xor    (%eax),%al
jb     804acab <_init-0x83d>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
fs
jne    804acaa <_init-0x83e>
jo     804ac9e <_init-0x84a>
imul   $0x72,0x65(%esp,%esi,2),%bp
jb     804acad <_init-0x83b>
jae    804acb9 <_init-0x82f>
insb   (%dx),%es:(%edi)
jbe    804acb2 <_init-0x836>
pop    %edi
push   $0x7374736f
add    %ah,0x5f(%edi,%ebp,2)
imul   $0x726464,0x61(%eax),%esi
jb     804acd4 <_init-0x814>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     804accb <_init-0x81d>
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
imul   $0x6574756f,0x72(%eax),%esi
xor    0x75(%edi),%bl
jae    804acdb <_init-0x80d>
jb     804acd7 <_init-0x811>
push   $0x6e695f7a
je     804ace4 <_init-0x804>
jb     804acef <_init-0x7f9>
popa
insb   (%dx),%es:(%edi)
add    %ah,0x64(%ecx)
fs
popa
je     804acfe <_init-0x7ea>
jb     804aceb <_init-0x7fd>
outsb  %ds:(%esi),(%dx)
gs
jae    804ad04 <_init-0x7e4>
add    %bh,0x66(%eax)
jb     804ad02 <_init-0x7e6>
pop    %edi
js     804acfe <_init-0x7ea>
jb     804ad07 <_init-0x7e1>
jo     804ad0e <_init-0x7da>
outsl  %ds:(%esi),(%dx)
je     804ad0e <_init-0x7da>
pop    %edi
addr16
gs
je     804ad06 <_init-0x7e2>
jns    804ad14 <_init-0x7d4>
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x74(%edx)
popa
pop    %edi
popa
fs
fs
popa
je     804ad28 <_init-0x7c0>
jb     804ad15 <_init-0x7d3>
insb   (%dx),%es:(%edi)
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804ad33 <_init-0x7b5>
je     804ad22 <_init-0x7c6>
bound  %ebp,0x5f(%ebp,%eiz,2)
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
je     804ad47 <_init-0x7a1>
jo     804ad35 <_init-0x7b3>
pop    %edi
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
pop    %edi
pop    %edi
addr16
gs
je     804ad3a <_init-0x7ae>
jne    804ad50 <_init-0x798>
gs
jb     804ad3f <_init-0x7a9>
push   $0x6e74007a
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x675f6c74,0x63(%edi),%ebp
gs
je     804ad50 <_init-0x798>
ss
jb     804ad58 <_init-0x790>
add    %ah,0x64(%ecx)
fs
popa
je     804ad6f <_init-0x779>
jb     804acfd <_init-0x7eb>
addr16
gs
je     804ad60 <_init-0x788>
jne    804ad71 <_init-0x777>
jae    804ad6e <_init-0x77a>
outsb  %ds:(%si),(%dx)
gs add %bh,%fs:%gs:0x66(%eax)
jb     804ad7b <_init-0x76d>
pop    %edi
popa
fs
fs
jb     804ad73 <_init-0x775>
insl   (%dx),%es:(%edi)
popa
je     804ad7b <_init-0x76d>
push   $0x65727000
imul   $0x6162,0x5f(%eax),%di
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
jb     804ad28 <_init-0x7c0>
imul   $0x74657267,0x36(%eax),%esi
popa
jo     804ad91 <_init-0x757>
insb   (%dx),%es:(%edi)
imul   $0x6974755f,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     804ada0 <_init-0x748>
jae    804adb7 <_init-0x731>
popa
je     804adb9 <_init-0x72f>
add    %ch,0x6e(%ecx)
jbe    804adac <_init-0x73c>
jb     804adb4 <_init-0x734>
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804adc9 <_init-0x71f>
jae    804adba <_init-0x72e>
outsl  %ds:(%esi),(%dx)
jo     804adbf <_init-0x729>
pop    %edi
popa
xor    0x0(%esi),%ch
popa
fs
fs
popa
je     804add9 <_init-0x70f>
jb     804ad9d <_init-0x74b>
xor    $0x0,%al
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
je     804ade2 <_init-0x706>
pop    %edi
imul   $0x72007865,0x64(%esi),%ebp
je     804adeb <_init-0x6fd>
insb   (%dx),%es:(%edi)
pop    %edi
jae    804ade6 <_init-0x702>
outsb  %ds:(%esi),(%dx)
fs
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x0(%ebx)
bound  %esp,0x74(%ecx)
arpl   %bp,0x5f(%eax)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs add %ah,%fs:%gs:0x64(%ecx)
fs
popa
je     804ae0f <_init-0x6d9>
jb     804add5 <_init-0x713>
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
jb     804ae19 <_init-0x6cf>
jo     804ae19 <_init-0x6cf>
outsl  %ds:(%esi),(%dx)
je     804ae09 <_init-0x6df>
outsb  %ds:(%esi),(%dx)
xor    0x0(%ecx),%ah
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%eax,%eax,1)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
push   %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
or     %al,(%eax)
add    (%eax),%al
add    $0x2000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0xa000200
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,0x1000100
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0xa0000,%eax
jle    804b0c9 <_init-0x41f>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x80000,%eax
mov    %cl,(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
or     %al,(%eax)
jb     804b0d6 <_init-0x412>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0xb0000,%eax
xchg   %eax,%edx
sldt   (%eax)
adc    %al,(%eax)
add    %al,(%eax)
pop    %ss
imul   $0x90000,0xd(%ecx),%ebp
pushf
sldt   (%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    804b11c <_init-0x3cc>
imul   $0x70000,(%ecx),%ecx
cmpsb  %es:(%edi),%ds:(%esi)
sldt   (%eax)
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
push   %es
add    %dh,0x1000000f(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x50000,0xd(%ecx),%ebp
jle    804b139 <_init-0x3af>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0xfbd,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
je     804b15b <_init-0x38d>
imul   $0x30000,(%ecx),%ecx
(bad)
sldt   (%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
mov    %cl,(%edi)
add    %al,(%eax)
add    %al,(%eax)
fdivrs (%edi)
or     %ecx,(%eax)
push   %es
sub    (%ecx),%al
add    %bl,%ah
aas
or     %ecx,(%eax)
push   %es
das
add    %al,(%eax)
loopne 804b1b1 <_init-0x337>
or     %ecx,(%eax)
push   %es
ljmp   $0x809,$0x5c400000
add    $0x8000012a,%eax
pop    %esp
or     %ecx,(%eax)
add    $0x600000ea,%eax
pop    %esp
or     %ecx,(%eax)
add    $0x7000008b,%eax
pop    %esp
or     %ecx,(%eax)
.byte 0x5
xlat   %ds:(%ebx)
or     $0x40,%al
or     %ecx,(%eax)
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
inc    %eax
or     %ecx,(%eax)
pop    %es
add    (%eax),%al
add    %dl,(%eax,%eax,2)
or     %ecx,(%eax)
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
inc    %eax
or     %ecx,(%eax)
pop    %es
add    $0x0,%al
add    %bl,(%eax,%eax,2)
or     %ecx,(%eax)
pop    %es
add    $0x40200000,%eax
or     %ecx,(%eax)
pop    %es
push   %es
add    %al,(%eax)
and    $0x40,%al
or     %ecx,(%eax)
pop    %es
or     %al,(%eax)
add    %ch,(%eax)
inc    %eax
or     %ecx,(%eax)
pop    %es
or     %eax,(%eax)
add    %ch,(%eax,%eax,2)
or     %ecx,(%eax)
pop    %es
or     (%eax),%al
add    %dh,(%eax)
inc    %eax
or     %ecx,(%eax)
pop    %es
or     (%eax),%eax
add    %dh,(%eax,%eax,2)
or     %ecx,(%eax)
pop    %es
or     $0x0,%al
add    %bh,(%eax)
inc    %eax
or     %ecx,(%eax)
pop    %es
or     $0x403c0000,%eax
or     %ecx,(%eax)
pop    %es
push   %cs
add    %al,(%eax)
inc    %eax
inc    %eax
or     %ecx,(%eax)
pop    %es
sldt   (%eax)
inc    %esp
inc    %eax
or     %ecx,(%eax)
pop    %es
adc    %al,(%eax)
add    %cl,0x40(%eax)
or     %ecx,(%eax)
pop    %es
adc    %eax,(%eax)
add    %cl,0x9(%eax,%eax,2)
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x40(%eax)
or     %ecx,(%eax)
pop    %es
adc    (%eax),%eax
add    %dl,0x9(%eax,%eax,2)
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x40(%eax)
or     %ecx,(%eax)
pop    %es
adc    $0x405c0000,%eax
or     %ecx,(%eax)
pop    %es
push   %ss
add    %al,(%eax)
pusha
inc    %eax
or     %ecx,(%eax)
pop    %es
pop    %ss
add    %al,(%eax)
fs
inc    %eax
or     %ecx,(%eax)
pop    %es
sbb    %al,(%eax)
add    %ch,0x40(%eax)
or     %ecx,(%eax)
pop    %es
sbb    %eax,(%eax)
add    %ch,0x9(%eax,%eax,2)
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x40(%eax)
or     %ecx,(%eax)
pop    %es
sbb    (%eax),%eax
add    %dh,0x9(%eax,%eax,2)
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x40(%eax)
or     %ecx,(%eax)
pop    %es
sbb    $0x407c0000,%eax
or     %ecx,(%eax)
pop    %es
push   %ds
add    %al,(%eax)
addb   $0x8,0x9(%eax)
pop    %es
pop    %ds
add    %al,(%eax)
test   %al,0x9(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x7080940(%eax)
and    %eax,(%eax)
add    %cl,0x22070809(%eax,%eax,2)
add    %al,(%eax)
nop
inc    %eax
or     %ecx,(%eax)
pop    %es
and    (%eax),%eax
add    %dl,0x24070809(%eax,%eax,2)
add    %al,(%eax)
cwtl
inc    %eax
or     %ecx,(%eax)
pop    %es
and    $0x409c0000,%eax
or     %ecx,(%eax)
pop    %es
add    %al,%es:(%eax)
mov    0x7080940,%al
daa
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
inc    %eax
or     %ecx,(%eax)
pop    %es
sub    %al,(%eax)
add    %ch,0x7080940(%eax)
sub    %eax,(%eax)
add    %ch,0x2a070809(%eax,%eax,2)
add    %al,(%eax)
mov    $0x40,%al
or     %ecx,(%eax)
pop    %es
sub    (%eax),%eax
add    %dh,0x2c070809(%eax,%eax,2)
add    %al,(%eax)
mov    $0x7080940,%eax
sub    $0x40bc0000,%eax
or     %ecx,(%eax)
pop    %es
add    %al,%cs:(%eax)
rolb   $0x8,0x9(%eax)
pop    %es
das
add    %al,(%eax)
les    0x9(%eax),%eax
or     %al,(%edi)
xor    %al,(%eax)
add    %cl,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
xor    %eax,(%eax)
add    %cl,%ah
inc    %eax
or     %ecx,(%eax)
pop    %es
xor    (%eax),%al
add    %dl,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
xor    (%eax),%eax
add    %dl,%ah
inc    %eax
or     %ecx,(%eax)
pop    %es
xor    $0x0,%al
add    %bl,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
xor    $0x40dc0000,%eax
or     %ecx,(%eax)
pop    %es
add    %al,%ss:(%eax)
loopne 804b382 <_init-0x166>
or     %ecx,(%eax)
pop    %es
aaa
add    %al,(%eax)
in     $0x40,%al
or     %ecx,(%eax)
pop    %es
cmp    %al,(%eax)
add    %ch,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
cmp    %eax,(%eax)
add    %ch,%ah
inc    %eax
or     %ecx,(%eax)
pop    %es
cmp    (%eax),%al
add    %dh,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
cmp    (%eax),%eax
add    %dh,%ah
inc    %eax
or     %ecx,(%eax)
pop    %es
cmp    $0x0,%al
add    %bh,%al
inc    %eax
or     %ecx,(%eax)
pop    %es
cmp    $0x40fc0000,%eax
or     %ecx,(%eax)
pop    %es
add    %al,%ds:(%eax)
add    %al,0x9(%ecx)
or     %al,(%edi)
aas
add    %al,(%eax)
add    $0x41,%al
or     %ecx,(%eax)
pop    %es
inc    %eax
add    %al,(%eax)
or     %al,0x9(%ecx)
or     %al,(%edi)
inc    %ecx
add    %al,(%eax)
or     $0x41,%al
or     %ecx,(%eax)
pop    %es
inc    %edx
add    %al,(%eax)
adc    %al,0x9(%ecx)
or     %al,(%edi)
inc    %ebx
add    %al,(%eax)
adc    $0x41,%al
or     %ecx,(%eax)
pop    %es
inc    %esp
add    %al,(%eax)
sbb    %al,0x9(%ecx)
or     %al,(%edi)
inc    %ebp
add    %al,(%eax)
sbb    $0x41,%al
or     %ecx,(%eax)
pop    %es
inc    %esi
add    %al,(%eax)
and    %al,0x9(%ecx)
or     %al,(%edi)
inc    %edi
add    %al,(%eax)
and    $0x41,%al
or     %ecx,(%eax)
pop    %es
dec    %eax
add    %al,(%eax)
sub    %al,0x9(%ecx)
or     %al,(%edi)
dec    %ecx
add    %al,(%eax)
sub    $0x41,%al
or     %ecx,(%eax)
pop    %es
dec    %edx
add    %al,(%eax)
xor    %al,0x9(%ecx)
or     %al,(%edi)
dec    %ebx
add    %al,(%eax)
xor    $0x41,%al
or     %ecx,(%eax)
pop    %es
dec    %esp
add    %al,(%eax)
cmp    %al,0x9(%ecx)
or     %al,(%edi)
dec    %ebp
add    %al,(%eax)
cmp    $0x41,%al
or     %ecx,(%eax)
pop    %es
dec    %esi
add    %al,(%eax)
inc    %eax
inc    %ecx
or     %ecx,(%eax)
pop    %es
dec    %edi
add    %al,(%eax)
inc    %esp
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %eax
add    %al,(%eax)
dec    %eax
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %ecx
add    %al,(%eax)
dec    %esp
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %edx
add    %al,(%eax)
push   %eax
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %ebx
add    %al,(%eax)
push   %esp
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %esp
add    %al,(%eax)
pop    %eax
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %ebp
add    %al,(%eax)
pop    %esp
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   %esi
add    %al,(%eax)
pusha
inc    %ecx
or     %ecx,(%eax)
pop    %es
pop    %eax
add    %al,(%eax)
fs
inc    %ecx
or     %ecx,(%eax)
pop    %es
pop    %ecx
add    %al,(%eax)
push   $0x7080941
pop    %edx
add    %al,(%eax)
insb   (%dx),%es:(%edi)
inc    %ecx
or     %ecx,(%eax)
pop    %es
pop    %ebx
add    %al,(%eax)
jo     804b4a3 <_init-0x45>
or     %ecx,(%eax)
pop    %es
pop    %esp
add    %al,(%eax)
je     804b4ab <_init-0x3d>
or     %ecx,(%eax)
pop    %es
pop    %ebp
add    %al,(%eax)
js     804b4b3 <_init-0x35>
or     %ecx,(%eax)
pop    %es
pop    %esi
add    %al,(%eax)
jl     804b4bb <_init-0x2d>
or     %ecx,(%eax)
pop    %es
pop    %edi
add    %al,(%eax)
addb   $0x8,0x9(%ecx)
pop    %es
popa
add    %al,(%eax)
test   %al,0x9(%ecx)
or     %al,(%edi)
bound  %eax,(%eax)
add    %cl,0x7080941(%eax)
arpl   %ax,(%eax)
add    %cl,0x64070809(%ecx,%eax,2)
add    %al,(%eax)
nop
inc    %ecx
or     %ecx,(%eax)
pop    %es
add    %al,%gs:(%eax)
xchg   %eax,%esp
inc    %ecx
or     %ecx,(%eax)
pop    %es
data16
add    %al,(%eax)
cwtl
inc    %ecx
or     %ecx,(%eax)
pop    %es
add    %al,(%bx,%si)
pushf
inc    %ecx
or     %ecx,(%eax)
pop    %es
push   $0x41a00000
or     %ecx,(%eax)
pop    %es
imul   $0x941a400,(%eax),%eax
or     %al,(%edi)
push   $0x0
add    %ch,0x7080941(%eax)
imul   $0x0,(%eax),%eax
lods   %ds:(%esi),%al
inc    %ecx
or     %ecx,(%eax)
pop    %es
insb   (%dx),%es:(%edi)
add    %al,(%eax)
mov    $0x41,%al
or     %ecx,(%eax)
pop    %es
insl   (%dx),%es:(%edi)
push   %ebx
sub    $0x8,%esp
call   804d560 <_start+0x2d>
add    $0x48b0f,%ebx
mov    -0x24(%ebx),%eax
test   %eax,%eax
je     804b506 <_init+0x1e>
call   804b7f0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8094004
jmp    *0x8094008
add    %al,(%eax)
jmp    *0x809400c
push   $0x0
jmp    804b510 <_init+0x28>
jmp    *0x8094010
push   $0x8
jmp    804b510 <_init+0x28>
jmp    *0x8094014
push   $0x10
jmp    804b510 <_init+0x28>
jmp    *0x8094018
push   $0x18
jmp    804b510 <_init+0x28>
jmp    *0x809401c
push   $0x20
jmp    804b510 <_init+0x28>
jmp    *0x8094020
push   $0x28
jmp    804b510 <_init+0x28>
jmp    *0x8094024
push   $0x30
jmp    804b510 <_init+0x28>
jmp    *0x8094028
push   $0x38
jmp    804b510 <_init+0x28>
jmp    *0x809402c
push   $0x40
jmp    804b510 <_init+0x28>
jmp    *0x8094030
push   $0x48
jmp    804b510 <_init+0x28>
jmp    *0x8094034
push   $0x50
jmp    804b510 <_init+0x28>
jmp    *0x8094038
push   $0x58
jmp    804b510 <_init+0x28>
jmp    *0x809403c
push   $0x60
jmp    804b510 <_init+0x28>
jmp    *0x8094040
push   $0x68
jmp    804b510 <_init+0x28>
jmp    *0x8094044
push   $0x70
jmp    804b510 <_init+0x28>
jmp    *0x8094048
push   $0x78
jmp    804b510 <_init+0x28>
jmp    *0x809404c
push   $0x80
jmp    804b510 <_init+0x28>
jmp    *0x8094050
push   $0x88
jmp    804b510 <_init+0x28>
jmp    *0x8094054
push   $0x90
jmp    804b510 <_init+0x28>
jmp    *0x8094058
push   $0x98
jmp    804b510 <_init+0x28>
jmp    *0x809405c
push   $0xa0
jmp    804b510 <_init+0x28>
jmp    *0x8094060
push   $0xa8
jmp    804b510 <_init+0x28>
jmp    *0x8094064
push   $0xb0
jmp    804b510 <_init+0x28>
jmp    *0x8094068
push   $0xb8
jmp    804b510 <_init+0x28>
jmp    *0x809406c
push   $0xc0
jmp    804b510 <_init+0x28>
jmp    *0x8094070
push   $0xc8
jmp    804b510 <_init+0x28>
jmp    *0x8094074
push   $0xd0
jmp    804b510 <_init+0x28>
jmp    *0x8094078
push   $0xd8
jmp    804b510 <_init+0x28>
jmp    *0x809407c
push   $0xe0
jmp    804b510 <_init+0x28>
jmp    *0x8094080
push   $0xe8
jmp    804b510 <_init+0x28>
jmp    *0x8094084
push   $0xf0
jmp    804b510 <_init+0x28>
jmp    *0x8094088
push   $0xf8
jmp    804b510 <_init+0x28>
jmp    *0x809408c
push   $0x100
jmp    804b510 <_init+0x28>
jmp    *0x8094090
push   $0x108
jmp    804b510 <_init+0x28>
jmp    *0x8094094
push   $0x110
jmp    804b510 <_init+0x28>
jmp    *0x8094098
push   $0x118
jmp    804b510 <_init+0x28>
jmp    *0x809409c
push   $0x120
jmp    804b510 <_init+0x28>
jmp    *0x80940a0
push   $0x128
jmp    804b510 <_init+0x28>
jmp    *0x80940a4
push   $0x130
jmp    804b510 <_init+0x28>
jmp    *0x80940a8
push   $0x138
jmp    804b510 <_init+0x28>
jmp    *0x80940ac
push   $0x140
jmp    804b510 <_init+0x28>
jmp    *0x80940b0
push   $0x148
jmp    804b510 <_init+0x28>
jmp    *0x80940b4
push   $0x150
jmp    804b510 <_init+0x28>
jmp    *0x80940b8
push   $0x158
jmp    804b510 <_init+0x28>
jmp    *0x80940bc
push   $0x160
jmp    804b510 <_init+0x28>
jmp    *0x80940c0
push   $0x168
jmp    804b510 <_init+0x28>
jmp    *0x80940c4
push   $0x170
jmp    804b510 <_init+0x28>
jmp    *0x80940c8
push   $0x178
jmp    804b510 <_init+0x28>
jmp    *0x80940cc
push   $0x180
jmp    804b510 <_init+0x28>
jmp    *0x80940d0
push   $0x188
jmp    804b510 <_init+0x28>
jmp    *0x80940d4
push   $0x190
jmp    804b510 <_init+0x28>
jmp    *0x80940d8
push   $0x198
jmp    804b510 <_init+0x28>
jmp    *0x80940dc
push   $0x1a0
jmp    804b510 <_init+0x28>
jmp    *0x80940e0
push   $0x1a8
jmp    804b510 <_init+0x28>
jmp    *0x80940e4
push   $0x1b0
jmp    804b510 <_init+0x28>
jmp    *0x80940e8
push   $0x1b8
jmp    804b510 <_init+0x28>
jmp    *0x80940ec
push   $0x1c0
jmp    804b510 <_init+0x28>
jmp    *0x80940f0
push   $0x1c8
jmp    804b510 <_init+0x28>
jmp    *0x80940f4
push   $0x1d0
jmp    804b510 <_init+0x28>
jmp    *0x80940f8
push   $0x1d8
jmp    804b510 <_init+0x28>
jmp    *0x80940fc
push   $0x1e0
jmp    804b510 <_init+0x28>
jmp    *0x8094100
push   $0x1e8
jmp    804b510 <_init+0x28>
jmp    *0x8094104
push   $0x1f0
jmp    804b510 <_init+0x28>
jmp    *0x8094108
push   $0x1f8
jmp    804b510 <_init+0x28>
jmp    *0x809410c
push   $0x200
jmp    804b510 <_init+0x28>
jmp    *0x8094110
push   $0x208
jmp    804b510 <_init+0x28>
jmp    *0x8094114
push   $0x210
jmp    804b510 <_init+0x28>
jmp    *0x8094118
push   $0x218
jmp    804b510 <_init+0x28>
jmp    *0x809411c
push   $0x220
jmp    804b510 <_init+0x28>
jmp    *0x8094120
push   $0x228
jmp    804b510 <_init+0x28>
jmp    *0x8094124
push   $0x230
jmp    804b510 <_init+0x28>
jmp    *0x8094128
push   $0x238
jmp    804b510 <_init+0x28>
jmp    *0x809412c
push   $0x240
jmp    804b510 <_init+0x28>
jmp    *0x8094130
push   $0x248
jmp    804b510 <_init+0x28>
jmp    *0x8094134
push   $0x250
jmp    804b510 <_init+0x28>
jmp    *0x8094138
push   $0x258
jmp    804b510 <_init+0x28>
jmp    *0x809413c
push   $0x260
jmp    804b510 <_init+0x28>
jmp    *0x8094140
push   $0x268
jmp    804b510 <_init+0x28>
jmp    *0x8094144
push   $0x270
jmp    804b510 <_init+0x28>
jmp    *0x8094148
push   $0x278
jmp    804b510 <_init+0x28>
jmp    *0x809414c
push   $0x280
jmp    804b510 <_init+0x28>
jmp    *0x8094150
push   $0x288
jmp    804b510 <_init+0x28>
jmp    *0x8094154
push   $0x290
jmp    804b510 <_init+0x28>
jmp    *0x8094158
push   $0x298
jmp    804b510 <_init+0x28>
jmp    *0x809415c
push   $0x2a0
jmp    804b510 <_init+0x28>
jmp    *0x8094160
push   $0x2a8
jmp    804b510 <_init+0x28>
jmp    *0x8094164
push   $0x2b0
jmp    804b510 <_init+0x28>
jmp    *0x8094168
push   $0x2b8
jmp    804b510 <_init+0x28>
jmp    *0x809416c
push   $0x2c0
jmp    804b510 <_init+0x28>
jmp    *0x8094170
push   $0x2c8
jmp    804b510 <_init+0x28>
jmp    *0x8094174
push   $0x2d0
jmp    804b510 <_init+0x28>
jmp    *0x8094178
push   $0x2d8
jmp    804b510 <_init+0x28>
jmp    *0x809417c
push   $0x2e0
jmp    804b510 <_init+0x28>
jmp    *0x8094180
push   $0x2e8
jmp    804b510 <_init+0x28>
jmp    *0x8094184
push   $0x2f0
jmp    804b510 <_init+0x28>
jmp    *0x8094188
push   $0x2f8
jmp    804b510 <_init+0x28>
jmp    *0x809418c
push   $0x300
jmp    804b510 <_init+0x28>
jmp    *0x8094190
push   $0x308
jmp    804b510 <_init+0x28>
jmp    *0x8094194
push   $0x310
jmp    804b510 <_init+0x28>
jmp    *0x8094198
push   $0x318
jmp    804b510 <_init+0x28>
jmp    *0x809419c
push   $0x320
jmp    804b510 <_init+0x28>
jmp    *0x80941a0
push   $0x328
jmp    804b510 <_init+0x28>
jmp    *0x80941a4
push   $0x330
jmp    804b510 <_init+0x28>
jmp    *0x80941a8
push   $0x338
jmp    804b510 <_init+0x28>
jmp    *0x80941ac
push   $0x340
jmp    804b510 <_init+0x28>
jmp    *0x80941b0
push   $0x348
jmp    804b510 <_init+0x28>
push   %ebx
sub    $0x38,%esp
movl   $0x0,(%esp)
movl   $0x0,0x2c(%esp)
call   804bb00 <isatty@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804bbf8 <__sprintf_chk@plt+0x48>
mov    0x8095c40,%eax
or     $0xffffffff,%ebx
movl   $0x8083880,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804bc51 <__sprintf_chk@plt+0xa1>
mov    0x8095c70,%eax
movl   $0x1,0x8(%esp)
movl   $0x4,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804b750 <fread@plt>
mov    0x2c(%esp),%edx
cmp    0x8094208,%edx
je     804bc51 <__sprintf_chk@plt+0xa1>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
or     $0xffffffff,%ebx
mov    %edx,0x10(%esp)
movl   $0x80838ac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x38,%esp
mov    %ebx,%eax
pop    %ebx
ret
push   %ebp
mov    $0x107,%ecx
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x4ac,%esp
mov    %gs:0x14,%eax
mov    %eax,0x49c(%esp)
xor    %eax,%eax
lea    0x80(%esp),%edx
mov    %edx,%edi
mov    $0x8095d80,%edx
movl   $0x0,0x34(%esp)
lea    0x38(%esp),%ebp
movl   $0x0,0x20(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
rep stos %eax,%es:(%edi)
mov    %edx,%edi
movl   $0x1c,0x80(%esp)
00
movw   $0x1,0x86(%esp)
00
movw   $0x1a,0x84(%esp)
00
movl   $0x0,0x24(%esp)
mov    $0x52,%cl
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movw   $0xffff,0x8095e52
ff
movw   $0xffff,0x8095ea2
ff
movl   $0x2,0x8095d84
00
mov    %al,0x90(%esp)
test   %esi,%esi
jle    804bfe0 <__sprintf_chk@plt+0x430>
mov    (%ebx),%eax
cmpb   $0x74,(%eax)
jne    804bd2c <__sprintf_chk@plt+0x17c>
cmpb   $0x6f,0x1(%eax)
jne    804bd2c <__sprintf_chk@plt+0x17c>
cmpb   $0x73,0x2(%eax)
jne    804bd2c <__sprintf_chk@plt+0x17c>
cmpb   $0x0,0x3(%eax)
jne    804bd2c <__sprintf_chk@plt+0x17c>
dec    %esi
lea    0x4(%ebx),%edi
jne    804bd65 <__sprintf_chk@plt+0x1b5>
jmp    804bd60 <__sprintf_chk@plt+0x1b0>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804bd24 <__sprintf_chk@plt+0x174>
movl   $0x80841d0,0x4(%esp)
mov    (%ebx),%eax
lea    0x4(%ebx),%edi
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804be38 <__sprintf_chk@plt+0x288>
dec    %esi
jne    804bd9d <__sprintf_chk@plt+0x1ed>
call   8080010 <incomplete_command>
mov    0x4(%ebx),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
je     804bd8b <__sprintf_chk@plt+0x1db>
mov    0x4(%ebx),%eax
movl   $0x80841ba,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x38(%esp),%eax
mov    %edi,%ebx
mov    %al,0x93(%esp)
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x8082d28,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804bdb9 <__sprintf_chk@plt+0x209>
call   8052210 <do_ipaddrlabel+0x260>
movzbl 0x90(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x90(%esp)
jne    804bde9 <__sprintf_chk@plt+0x239>
mov    0x38(%esp),%al
mov    %al,0x90(%esp)
movzbl 0x39(%esp),%eax
test   %al,%al
je     804be1d <__sprintf_chk@plt+0x26d>
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x3a(%esp),%ax
mov    %edi,%ebx
movl   $0x1,0x20(%esp)
mov    %al,0x92(%esp)
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x80841d5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804be63 <__sprintf_chk@plt+0x2b3>
dec    %esi
je     804bd60 <__sprintf_chk@plt+0x1b0>
mov    0x4(%ebx),%eax
mov    %edi,%ebx
mov    %eax,0x24(%esp)
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x8084e9c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804bea2 <__sprintf_chk@plt+0x2f2>
dec    %esi
je     804bd60 <__sprintf_chk@plt+0x1b0>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %edi,%ebx
mov    %eax,0x4(%esp)
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x80841d9,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804bed1 <__sprintf_chk@plt+0x321>
mov    (%ebx),%eax
cmpb   $0x64,(%eax)
jne    804bee9 <__sprintf_chk@plt+0x339>
cmpb   $0x65,0x1(%eax)
jne    804bee9 <__sprintf_chk@plt+0x339>
cmpb   $0x76,0x2(%eax)
jne    804bee9 <__sprintf_chk@plt+0x339>
cmpb   $0x0,0x3(%eax)
jne    804bee9 <__sprintf_chk@plt+0x339>
dec    %esi
lea    0x4(%ebx),%eax
je     804bd60 <__sprintf_chk@plt+0x1b0>
mov    0x4(%ebx),%ecx
mov    %eax,%ebx
mov    %ecx,0x28(%esp)
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x80841dd,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804bf0d <__sprintf_chk@plt+0x35d>
orl    $0x100,0x98(%esp)
00
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x80841e4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804bfcf <__sprintf_chk@plt+0x41f>
mov    (%ebx),%eax
cmpb   $0x74,(%eax)
jne    804bf44 <__sprintf_chk@plt+0x394>
cmpb   $0x6f,0x1(%eax)
jne    804bf44 <__sprintf_chk@plt+0x394>
cmpb   $0x0,0x2(%eax)
jne    804bf44 <__sprintf_chk@plt+0x394>
add    $0x4,%ebx
dec    %esi
je     804bd60 <__sprintf_chk@plt+0x1b0>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804bdb4 <__sprintf_chk@plt+0x204>
movzbl 0x90(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x90(%esp)
jne    804bf8d <__sprintf_chk@plt+0x3dd>
mov    0x38(%esp),%al
mov    %al,0x90(%esp)
movzbl 0x39(%esp),%eax
test   %al,%al
je     804bfc1 <__sprintf_chk@plt+0x411>
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x3a(%esp),%ax
mov    %al,0x91(%esp)
jmp    804bfd7 <__sprintf_chk@plt+0x427>
movl   $0x1,0x2c(%esp)
dec    %esi
add    $0x4,%ebx
jmp    804bd03 <__sprintf_chk@plt+0x153>
cmpb   $0x0,0x91(%esp)
jne    804c00b <__sprintf_chk@plt+0x45b>
mov    0x8095c40,%eax
movl   $0x8084ae0,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x0,0x24(%esp)
setne  %al
cmpl   $0x0,0x28(%esp)
setne  %bl
jne    804c026 <__sprintf_chk@plt+0x476>
test   %al,%al
jne    804c02a <__sprintf_chk@plt+0x47a>
jmp    804c0c4 <__sprintf_chk@plt+0x514>
test   %al,%al
je     804c063 <__sprintf_chk@plt+0x4b3>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
jne    804c040 <__sprintf_chk@plt+0x490>
mov    0x24(%esp),%eax
jmp    804c07b <__sprintf_chk@plt+0x4cb>
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
test   %bl,%bl
je     804c0c4 <__sprintf_chk@plt+0x514>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
jne    804c0a1 <__sprintf_chk@plt+0x4f1>
mov    0x28(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804c2e6 <__sprintf_chk@plt+0x736>
mov    %eax,0xc(%esp)
lea    0x80(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
mov    0x34(%esp),%eax
lea    0x80(%esp),%ebx
test   %eax,%eax
je     804c0ef <__sprintf_chk@plt+0x53f>
mov    %eax,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %ebx,(%esp)
call   807eba0 <addattr32>
cmpb   $0x0,0x90(%esp)
jne    804c101 <__sprintf_chk@plt+0x551>
movb   $0x2,0x90(%esp)
mov    %ebx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
jns    804c135 <__sprintf_chk@plt+0x585>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
cmpl   $0x0,0x20(%esp)
jne    804c29c <__sprintf_chk@plt+0x6ec>
cmpl   $0x0,0x2c(%esp)
je     804c29c <__sprintf_chk@plt+0x6ec>
mov    0x8095c80,%eax
mov    %ebx,0x4(%esp)
mov    0x80(%esp),%esi
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8052cf0 <print_route>
test   %eax,%eax
js     804c2b9 <__sprintf_chk@plt+0x709>
cmpw   $0x18,0x84(%esp)
18
je     804c198 <__sprintf_chk@plt+0x5e8>
mov    0x8095c40,%eax
movl   $0x80841fc,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804c2e6 <__sprintf_chk@plt+0x736>
sub    $0x1c,%esi
mov    %esi,0xc(%esp)
jns    804c1c3 <__sprintf_chk@plt+0x613>
mov    0x8095c40,%eax
movl   $0x8088ee5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804c2e6 <__sprintf_chk@plt+0x736>
lea    0x9c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x38(%esp),%eax
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x54(%esp),%eax
test   %eax,%eax
je     804c203 <__sprintf_chk@plt+0x653>
movw   $0x2,0x2(%eax)
movzwl (%eax),%eax
lea    -0x20(,%eax,8),%eax
mov    %al,0x92(%esp)
jmp    804c224 <__sprintf_chk@plt+0x674>
cmpl   $0x0,0x40(%esp)
jne    804c224 <__sprintf_chk@plt+0x674>
mov    0x8095c40,%eax
movl   $0x808420a,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804c2e6 <__sprintf_chk@plt+0x736>
cmpl   $0x0,0x28(%esp)
jne    804c239 <__sprintf_chk@plt+0x689>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804c239 <__sprintf_chk@plt+0x689>
movw   $0x0,0x2(%eax)
mov    0x4c(%esp),%eax
test   %eax,%eax
je     804c247 <__sprintf_chk@plt+0x697>
movw   $0x0,0x2(%eax)
cmpl   $0x0,0x24(%esp)
jne    804c25c <__sprintf_chk@plt+0x6ac>
mov    0x44(%esp),%eax
test   %eax,%eax
je     804c25c <__sprintf_chk@plt+0x6ac>
movw   $0x0,0x2(%eax)
mov    %ebx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x80941e0,(%esp)
movw   $0x1,0x86(%esp)
00
movw   $0x1a,0x84(%esp)
00
call   807e090 <rtnl_talk>
test   %eax,%eax
js     804c129 <__sprintf_chk@plt+0x579>
mov    0x8095c80,%eax
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8052cf0 <print_route>
test   %eax,%eax
jns    804c2da <__sprintf_chk@plt+0x72a>
mov    0x8095c40,%eax
movl   $0x80841ee,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
or     $0xffffffff,%eax
mov    0x49c(%esp),%ecx
xor    %gs:0x14,%ecx
je     804c2fe <__sprintf_chk@plt+0x74e>
call   804b660 <__stack_chk_fail@plt>
add    $0x4ac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
push   %ebx
sub    $0x38,%esp
movl   $0x0,(%esp)
movl   $0x0,0x2c(%esp)
call   804bb00 <isatty@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c341 <__sprintf_chk@plt+0x791>
mov    0x8095c40,%eax
or     $0xffffffff,%ebx
movl   $0x8084bbc,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804c39a <__sprintf_chk@plt+0x7ea>
mov    0x8095c70,%eax
movl   $0x1,0x8(%esp)
movl   $0x4,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804b750 <fread@plt>
mov    0x2c(%esp),%edx
cmp    0x809420c,%edx
je     804c39a <__sprintf_chk@plt+0x7ea>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
or     $0xffffffff,%ebx
mov    %edx,0x10(%esp)
movl   $0x80838ac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x38,%esp
mov    %ebx,%eax
pop    %ebx
ret
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x5c,%esp
mov    $0x8,%ecx
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
lea    0x2c(%esp),%edi
rep stos %eax,%es:(%edi)
xor    %eax,%eax
cmp    $0x14,%ebp
setne  %al
mov    %eax,0x1c(%esp)
addl   $0x8931,0x1c(%esp)
test   %esi,%esi
jle    804c4eb <__sprintf_chk@plt+0x93b>
mov    (%ebx),%eax
lea    0x4(%ebx),%edi
lea    -0x1(%esi),%ebp
cmpb   $0x64,(%eax)
jne    804c447 <__sprintf_chk@plt+0x897>
cmpb   $0x65,0x1(%eax)
jne    804c447 <__sprintf_chk@plt+0x897>
cmpb   $0x76,0x2(%eax)
jne    804c447 <__sprintf_chk@plt+0x897>
cmpb   $0x0,0x3(%eax)
jne    804c447 <__sprintf_chk@plt+0x897>
test   %ebp,%ebp
mov    %ebp,%esi
jne    804c40b <__sprintf_chk@plt+0x85b>
call   8080010 <incomplete_command>
cmpb   $0x0,0x2c(%esp)
je     804c425 <__sprintf_chk@plt+0x875>
mov    0x4(%ebx),%eax
movl   $0x8085e82,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
movl   $0x10,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %edi,%ebx
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
jmp    804c4e2 <__sprintf_chk@plt+0x932>
movl   $0x808b938,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804c463 <__sprintf_chk@plt+0x8b3>
test   %ebp,%ebp
mov    %edi,%ebx
mov    %ebp,%esi
je     804c406 <__sprintf_chk@plt+0x856>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804c47e <__sprintf_chk@plt+0x8ce>
call   8063db0 <do_iplink+0xde0>
cmpb   $0x0,0x3e(%esp)
mov    (%ebx),%eax
je     804c497 <__sprintf_chk@plt+0x8e7>
mov    %eax,0x4(%esp)
movl   $0x808b938,(%esp)
call   8080100 <duparg>
mov    %eax,0x8(%esp)
lea    0x3e(%esp),%eax
movl   $0xe,0x4(%esp)
mov    %eax,(%esp)
call   8081fb0 <ll_addr_a2n>
test   %eax,%eax
jns    804c4e2 <__sprintf_chk@plt+0x932>
mov    (%ebx),%eax
movl   $0x8087a48,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
dec    %esi
add    $0x4,%ebx
jmp    804c3d9 <__sprintf_chk@plt+0x829>
cmpb   $0x0,0x2c(%esp)
jne    804c513 <__sprintf_chk@plt+0x963>
mov    0x8095c40,%eax
movl   $0x8087a70,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0x2,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
mov    %eax,%ebx
jns    804c54d <__sprintf_chk@plt+0x99d>
movl   $0x8087af1,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
je     804c581 <__sprintf_chk@plt+0x9d1>
movl   $0x8087b06,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x207c,%esp
mov    %eax,0x2c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x206c(%esp)
xor    %eax,%eax
test   %ebx,%ebx
mov    %edx,0x28(%esp)
mov    %ecx,0x24(%esp)
jle    804c5ca <__sprintf_chk@plt+0xa1a>
movl   $0x1,0x80989c0
00
mov    0x8095ca8,%eax
lea    0x28(%esp),%ebp
movl   $0x0,0x20(%esp)
mov    %ax,0x8098a98
mov    0x2c(%esp),%ebx
test   %ebx,%ebx
jle    804c73a <__sprintf_chk@plt+0xb8a>
mov    0x28(%esp),%edi
mov    (%edi),%esi
movl   $0x8085ebc,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804c640 <__sprintf_chk@plt+0xa90>
dec    %ebx
add    $0x4,%edi
test   %ebx,%ebx
mov    %edi,0x28(%esp)
mov    %ebx,0x2c(%esp)
jne    804c61c <__sprintf_chk@plt+0xa6c>
call   8080010 <incomplete_command>
lea    0x2c(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x8098a9a,(%esp)
call   806a160 <xfrm_mode_parse>
movb   $0xff,0x8098aa8
jmp    804c72c <__sprintf_chk@plt+0xb7c>
movl   $0x8088c93,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804c68b <__sprintf_chk@plt+0xadb>
dec    %ebx
add    $0x4,%edi
test   %ebx,%ebx
mov    %edi,0x28(%esp)
mov    %ebx,0x2c(%esp)
je     804c617 <__sprintf_chk@plt+0xa67>
lea    0x2c(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x8098a94,(%esp)
call   806a2c0 <xfrm_reqid_parse>
movl   $0xffffffff,0x8098aac
ff
jmp    804c72c <__sprintf_chk@plt+0xb7c>
movl   $0x8088de7,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804c6cc <__sprintf_chk@plt+0xb1c>
dec    %ebx
add    $0x4,%edi
test   %ebx,%ebx
mov    %edi,0x28(%esp)
mov    %ebx,0x2c(%esp)
je     804c617 <__sprintf_chk@plt+0xa67>
mov    %ebp,%ecx
mov    $0x8098a9c,%eax
lea    0x2c(%esp),%edx
call   806b130 <do_xfrm+0x160>
movb   $0xff,0x8098ab0
jmp    804c72c <__sprintf_chk@plt+0xb7c>
cmpl   $0x0,0x20(%esp)
je     804c6e3 <__sprintf_chk@plt+0xb33>
mov    %esi,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
lea    0x2c(%esp),%eax
mov    %ebp,0x14(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0xc(%esp)
movl   $0x8098a98,0x8(%esp)
movl   $0x80989fc,0x4(%esp)
movl   $0x8098a14,(%esp)
call   8069d50 <xfrm_id_parse>
cmpl   $0x0,0x8095ca8
mov    %esi,0x20(%esp)
jne    804c72c <__sprintf_chk@plt+0xb7c>
movzwl 0x8098a98,%eax
mov    %eax,0x8095ca8
decl   0x2c(%esp)
addl   $0x4,0x28(%esp)
jmp    804c5e1 <__sprintf_chk@plt+0xa31>
lea    0x48(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     804c7e6 <__sprintf_chk@plt+0xc36>
cmpl   $0x0,0x24(%esp)
je     804c8c1 <__sprintf_chk@plt+0xd11>
lea    0x6c(%esp),%eax
xor    %esi,%esi
mov    %eax,0x34(%esp)
lea    0x34(%esp),%edi
movl   $0x2000,0x38(%esp)
mov    %ebx,0x44(%esp)
cmpl   $0x1,0x8095ca4
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
jle    804c7bd <__sprintf_chk@plt+0xc0d>
mov    0x8095c40,%eax
mov    %esi,0xc(%esp)
movl   $0x8088c99,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca8,%eax
movl   $0x12,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
jns    804c7f2 <__sprintf_chk@plt+0xc42>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %edi,0x8(%esp)
movl   $0x806b740,0x4(%esp)
mov    %ebx,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    804c82b <__sprintf_chk@plt+0xc7b>
mov    0x8095c40,%eax
movl   $0x8088cb0,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x0,0x40(%esp)
jne    804c859 <__sprintf_chk@plt+0xca9>
cmpl   $0x1,0x8095ca4
jle    804c920 <__sprintf_chk@plt+0xd70>
mov    0x8095c40,%eax
movl   $0x8088cc7,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804c920 <__sprintf_chk@plt+0xd70>
mov    0x3c(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
jns    804c88d <__sprintf_chk@plt+0xcdd>
movl   $0x8089008,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x1,0x8095ca4
jle    804c8bb <__sprintf_chk@plt+0xd0b>
mov    0x40(%esp),%eax
movl   $0x8088cdd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
inc    %esi
jmp    804c783 <__sprintf_chk@plt+0xbd3>
mov    0x8095ca8,%eax
movl   $0x12,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     804c7da <__sprintf_chk@plt+0xc2a>
mov    0x8095c80,%eax
movl   $0x806b3e0,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    804c920 <__sprintf_chk@plt+0xd70>
mov    0x8095c40,%eax
movl   $0x80833f5,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x206c,%esp
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x205c(%esp)
xor    %eax,%eax
test   %ebx,%ebx
mov    %edx,0x18(%esp)
mov    %ecx,0x14(%esp)
jle    804c969 <__sprintf_chk@plt+0xdb9>
movl   $0x1,0x80989c0
00
mov    0x8095ca8,%eax
xor    %edi,%edi
mov    %ax,0x8098adc
mov    0x1c(%esp),%ebp
test   %ebp,%ebp
jle    804cc11 <__sprintf_chk@plt+0x1061>
mov    0x18(%esp),%esi
mov    (%esi),%ebx
cmpb   $0x64,(%ebx)
jne    804c9d4 <__sprintf_chk@plt+0xe24>
cmpb   $0x69,0x1(%ebx)
jne    804c9d4 <__sprintf_chk@plt+0xe24>
cmpb   $0x72,0x2(%ebx)
jne    804c9d4 <__sprintf_chk@plt+0xe24>
cmpb   $0x0,0x3(%ebx)
jne    804c9d4 <__sprintf_chk@plt+0xe24>
lea    -0x1(%ebp),%edx
add    $0x4,%esi
test   %edx,%edx
mov    %esi,0x18(%esp)
mov    %edx,0x1c(%esp)
jne    804c9b6 <__sprintf_chk@plt+0xe06>
call   8080010 <incomplete_command>
lea    0x18(%esp),%ecx
mov    $0x8098b54,%eax
lea    0x1c(%esp),%edx
call   806e650 <do_xfrm_state+0xe50>
movb   $0xff,0x8098b58
jmp    804cc03 <__sprintf_chk@plt+0x1053>
movl   $0x8089bb1,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804ca3e <__sprintf_chk@plt+0xe8e>
lea    -0x1(%ebp),%edx
lea    0x4(%esi),%eax
test   %edx,%edx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
je     804c9b1 <__sprintf_chk@plt+0xe01>
movl   $0x0,0x8(%esp)
mov    0x4(%esi),%eax
movl   $0x8098b50,(%esp)
mov    %eax,0x4(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     804ca2f <__sprintf_chk@plt+0xe7f>
mov    0x18(%esp),%eax
mov    (%eax),%eax
movl   $0x8089bb7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0xffffffff,0x8098b68
ff
jmp    804cc03 <__sprintf_chk@plt+0x1053>
movl   $0x8089bce,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804ca86 <__sprintf_chk@plt+0xed6>
lea    -0x1(%ebp),%edx
add    $0x4,%esi
test   %edx,%edx
mov    %esi,0x18(%esp)
mov    %edx,0x1c(%esp)
je     804c9b1 <__sprintf_chk@plt+0xe01>
lea    0x18(%esp),%ecx
mov    $0x8098b75,%eax
lea    0x1c(%esp),%edx
call   806e6f0 <do_xfrm_state+0xef0>
movb   $0xff,0x8098b76
jmp    804cc03 <__sprintf_chk@plt+0x1053>
movl   $0x8089bd4,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804cb09 <__sprintf_chk@plt+0xf59>
lea    -0x1(%ebp),%edx
lea    0x4(%esi),%eax
test   %edx,%edx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
je     804c9b1 <__sprintf_chk@plt+0xe01>
mov    0x4(%esi),%ebx
movl   $0x8089bdb,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804cad0 <__sprintf_chk@plt+0xf20>
movb   $0x0,0x8098b55
jmp    804cafd <__sprintf_chk@plt+0xf4d>
movl   $0x8089be1,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804caed <__sprintf_chk@plt+0xf3d>
movb   $0x1,0x8098b55
jmp    804cafd <__sprintf_chk@plt+0xf4d>
mov    %ebx,0x4(%esp)
movl   $0x8089be7,(%esp)
call   80800b0 <invarg>
movb   $0xff,0x8098b6c
jmp    804cc03 <__sprintf_chk@plt+0x1053>
movl   $0x8084246,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804cb77 <__sprintf_chk@plt+0xfc7>
lea    -0x1(%ebp),%edx
lea    0x4(%esi),%eax
test   %edx,%edx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
je     804c9b1 <__sprintf_chk@plt+0xe01>
movl   $0x0,0x8(%esp)
mov    0x4(%esi),%eax
movl   $0x8098b4c,(%esp)
mov    %eax,0x4(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     804cb68 <__sprintf_chk@plt+0xfb8>
mov    0x18(%esp),%eax
mov    (%eax),%eax
movl   $0x8089c00,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0xffffffff,0x8098b70
ff
jmp    804cc03 <__sprintf_chk@plt+0x1053>
movl   $0x8088de7,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804cbbc <__sprintf_chk@plt+0x100c>
lea    -0x1(%ebp),%edx
add    $0x4,%esi
test   %edx,%edx
mov    %esi,0x18(%esp)
mov    %edx,0x1c(%esp)
je     804c9b1 <__sprintf_chk@plt+0xe01>
lea    0x18(%esp),%ecx
mov    $0x8098b56,%eax
lea    0x1c(%esp),%edx
call   806e780 <do_xfrm_state+0xf80>
movb   $0xff,0x8098b74
jmp    804cc03 <__sprintf_chk@plt+0x1053>
test   %edi,%edi
je     804cbd0 <__sprintf_chk@plt+0x1020>
mov    %ebx,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
lea    0x18(%esp),%eax
mov    %ebx,%edi
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
movl   $0x8098ab4,(%esp)
call   806a320 <xfrm_selector_parse>
cmpl   $0x0,0x8095ca8
jne    804cc03 <__sprintf_chk@plt+0x1053>
movzwl 0x8098adc,%eax
mov    %eax,0x8095ca8
decl   0x1c(%esp)
addl   $0x4,0x18(%esp)
jmp    804c976 <__sprintf_chk@plt+0xdc6>
lea    0x38(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     804ccbd <__sprintf_chk@plt+0x110d>
cmpl   $0x0,0x14(%esp)
je     804cd98 <__sprintf_chk@plt+0x11e8>
lea    0x5c(%esp),%eax
xor    %esi,%esi
mov    %eax,0x24(%esp)
lea    0x24(%esp),%edi
movl   $0x2000,0x28(%esp)
mov    %ebx,0x34(%esp)
cmpl   $0x1,0x8095ca4
movl   $0x0,0x2c(%esp)
movl   $0x0,0x30(%esp)
jle    804cc94 <__sprintf_chk@plt+0x10e4>
mov    0x8095c40,%eax
mov    %esi,0xc(%esp)
movl   $0x8088c99,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca8,%eax
movl   $0x15,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
jns    804ccc9 <__sprintf_chk@plt+0x1119>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %edi,0x8(%esp)
movl   $0x806edb0,0x4(%esp)
mov    %ebx,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    804cd02 <__sprintf_chk@plt+0x1152>
mov    0x8095c40,%eax
movl   $0x8088cb0,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x0,0x30(%esp)
jne    804cd30 <__sprintf_chk@plt+0x1180>
cmpl   $0x1,0x8095ca4
jle    804cdf7 <__sprintf_chk@plt+0x1247>
mov    0x8095c40,%eax
movl   $0x8088cc7,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
jmp    804cdf7 <__sprintf_chk@plt+0x1247>
mov    0x2c(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
jns    804cd64 <__sprintf_chk@plt+0x11b4>
movl   $0x8089d88,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x1,0x8095ca4
jle    804cd92 <__sprintf_chk@plt+0x11e2>
mov    0x30(%esp),%eax
movl   $0x8088cdd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
inc    %esi
jmp    804cc5a <__sprintf_chk@plt+0x10aa>
mov    0x8095ca8,%eax
movl   $0x15,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     804ccb1 <__sprintf_chk@plt+0x1101>
mov    0x8095c80,%eax
movl   $0x806ea10,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    804cdf7 <__sprintf_chk@plt+0x1247>
mov    0x8095c40,%eax
movl   $0x80833f5,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
push   %ebx
xor    %ebx,%ebx
mov    %ecx,(%esp)
cmp    (%esp),%ebx
jge    804ce4e <__sprintf_chk@plt+0x129e>
movsbl (%esi,%ebx,2),%eax
lea    -0x61(%eax),%edx
cmp    $0x5,%dl
ja     804ce2f <__sprintf_chk@plt+0x127f>
sub    $0x57,%eax
jmp    804ce52 <__sprintf_chk@plt+0x12a2>
lea    -0x30(%eax),%edx
cmp    $0x9,%dl
ja     804ce3c <__sprintf_chk@plt+0x128c>
sub    $0x30,%eax
jmp    804ce52 <__sprintf_chk@plt+0x12a2>
lea    -0x41(%eax),%edx
cmp    $0x5,%dl
jbe    804ce49 <__sprintf_chk@plt+0x1299>
or     $0xffffffff,%eax
jmp    804ce90 <__sprintf_chk@plt+0x12e0>
sub    $0x37,%eax
jmp    804ce52 <__sprintf_chk@plt+0x12a2>
xor    %eax,%eax
jmp    804ce90 <__sprintf_chk@plt+0x12e0>
shl    $0x4,%eax
mov    %al,(%edi,%ebx,1)
movsbl 0x1(%esi,%ebx,2),%edx
lea    -0x61(%edx),%ebp
mov    %ebp,%ecx
cmp    $0x5,%cl
ja     804ce6c <__sprintf_chk@plt+0x12bc>
sub    $0x57,%edx
jmp    804ce88 <__sprintf_chk@plt+0x12d8>
lea    -0x30(%edx),%ebp
mov    %ebp,%ecx
cmp    $0x9,%cl
ja     804ce7b <__sprintf_chk@plt+0x12cb>
sub    $0x30,%edx
jmp    804ce88 <__sprintf_chk@plt+0x12d8>
lea    -0x41(%edx),%ebp
mov    %ebp,%ecx
cmp    $0x5,%cl
ja     804ce44 <__sprintf_chk@plt+0x1294>
sub    $0x37,%edx
or     %edx,%eax
mov    %al,(%edi,%ebx,1)
inc    %ebx
jmp    804ce19 <__sprintf_chk@plt+0x1269>
pop    %edx
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x808b6f8,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808b73c,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808b778,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808b7ac,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808b7d8,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x808b866,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808590c,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x808a7f0,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x8085984,(%esp)
mov    %eax,0x4(%esp)
call   804bb30 <fputs@plt>
add    $0x1c,%esp
ret
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x30,%esp
mov    0xc(%ebp),%esi
mov    (%esi),%eax
movl   $0x2f,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%ebx
call   804ba40 <strrchr@plt>
movl   $0x0,0x18(%esp)
test   %eax,%eax
lea    0x1(%eax),%edx
cmove  %ebx,%edx
cmpl   $0x1,0x8(%ebp)
mov    %edx,0x14(%esp)
jle    804d038 <main+0xc8>
mov    0x8(%ebp),%ebx
jmp    804d02d <main+0xbd>
xchg   %ax,%ax
cmpb   $0x2d,0x1(%edi)
jne    804cfc8 <main+0x58>
cmpb   $0x0,0x2(%edi)
je     804d1db <main+0x26b>
xor    %eax,%eax
cmpb   $0x2d,0x1(%edi)
movl   $0x8082c5c,0x4(%esp)
sete   %al
add    %eax,%edi
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d070 <main+0x100>
sub    $0x1,%ebx
cmp    $0x1,%ebx
lea    0x4(%esi),%edx
je     804d2d5 <main+0x365>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    0x8(%esi),%eax
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%edx
mov    %eax,0x8094204
sub    $0x1,%ebx
cmp    $0x1,%ebx
lea    0x4(%edx),%esi
jle    804d035 <main+0xc5>
mov    0x4(%esi),%edi
cmpb   $0x2d,(%edi)
je     804cfb8 <main+0x48>
mov    %ebx,0x8(%ebp)
mov    0x8095c98,%edx
mov    $0x8082c5a,%eax
test   %edx,%edx
mov    $0x8087766,%edx
cmove  %edx,%eax
mov    %eax,0x8095c90
mov    0x18(%esp),%eax
test   %eax,%eax
je     804d1ea <main+0x27a>
call   804d750 <_start+0x21d>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8082c63,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d0b8 <main+0x148>
sub    $0x1,%ebx
cmp    $0x1,%ebx
lea    0x4(%esi),%edx
je     804d2d5 <main+0x365>
mov    0x8(%esi),%esi
mov    $0x8082c6b,%edi
mov    $0x5,%ecx
mov    %esi,0x1c(%esp)
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d0e8 <main+0x178>
movl   $0x2,0x8095ca8
00
jmp    804d022 <main+0xb2>
nop
cmpb   $0x2d,(%edi)
je     804d110 <main+0x1a0>
movl   $0x8082c9a,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d28f <main+0x31f>
addl   $0x1,0x8095ca4
mov    %esi,%edx
jmp    804d022 <main+0xb2>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%esi
mov    $0x8082c70,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804d137 <main+0x1c7>
movl   $0xa,0x8095ca8
00
jmp    804d022 <main+0xb2>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x1(%edi),%eax
cmp    $0x34,%al
je     804d166 <main+0x1f6>
cmp    $0x36,%al
jne    804d34a <main+0x3da>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0xa,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
mov    0x1c(%esp),%eax
movl   $0x8082c76,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
mov    0x10(%esp),%edx
test   %eax,%eax
jne    804d181 <main+0x211>
movl   $0xc,0x8095ca8
00
jmp    804d022 <main+0xb2>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0x2,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
mov    0x1c(%esp),%eax
movl   $0x80841a0,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
mov    0x10(%esp),%edx
test   %eax,%eax
je     804d23b <main+0x2cb>
mov    0x1c(%esp),%eax
cmpb   $0x69,(%eax)
jne    804d24a <main+0x2da>
cmpb   $0x70,0x1(%eax)
jne    804d24a <main+0x2da>
cmpb   $0x78,0x2(%eax)
jne    804d24a <main+0x2da>
cmpb   $0x0,0x3(%eax)
jne    804d24a <main+0x2da>
movl   $0x4,0x8095ca8
00
jmp    804d022 <main+0xb2>
mov    %ebx,0x8(%ebp)
add    $0x4,%esi
subl   $0x1,0x8(%ebp)
jmp    804d038 <main+0xc8>
movl   $0x0,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d910 <rtnl_open>
test   %eax,%eax
js     804d369 <main+0x3f9>
mov    0x14(%esp),%edi
xor    %eax,%eax
or     $0xffffffff,%ecx
repnz scas %es:(%edi),%al
not    %ecx
sub    $0x1,%ecx
cmp    $0x2,%ecx
ja     804d279 <main+0x309>
cmpl   $0x1,0x8(%ebp)
jle    804d2c9 <main+0x359>
mov    0x8(%ebp),%eax
lea    0x4(%esi),%ecx
lea    -0x1(%eax),%edx
mov    0x4(%esi),%eax
call   804d6c0 <_start+0x18d>
jmp    804d063 <main+0xf3>
movl   $0x11,0x8095ca8
00
jmp    804d022 <main+0xb2>
mov    0x1c(%esp),%eax
movl   $0x8082c7b,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    804d2da <main+0x36a>
movl   $0x7,0x8095ca8
00
mov    0x10(%esp),%edx
jmp    804d022 <main+0xb2>
mov    0x14(%esp),%eax
mov    %esi,%ecx
mov    0x8(%ebp),%edx
add    $0x2,%eax
call   804d6c0 <_start+0x18d>
jmp    804d063 <main+0xf3>
movl   $0x8082ca1,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804d0d5 <main+0x165>
movl   $0x8082cad,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d306 <main+0x396>
addl   $0x1,0x8095ca0
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x80941e0,(%esp)
call   807d670 <rtnl_close>
call   804d670 <_start+0x13d>
mov    0x1c(%esp),%edx
movl   $0x8082d28,0x4(%esp)
mov    %edx,(%esp)
call   804b560 <strcmp@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804d2d5 <main+0x365>
mov    %edx,0x4(%esp)
movl   $0x8082c82,(%esp)
call   80800b0 <invarg>
movl   $0x8082cb6,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d328 <main+0x3b8>
addl   $0x1,0x8095c9c
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x8082cbf,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d375 <main+0x405>
addl   $0x1,0x8095c98
mov    %esi,%edx
jmp    804d022 <main+0xb2>
cmp    $0x30,%al
jne    804d397 <main+0x427>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0x11,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8082cc8,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d3b6 <main+0x446>
addl   $0x1,0x8095c94
mov    %esi,%edx
jmp    804d022 <main+0xb2>
cmp    $0x49,%al
jne    804d3ec <main+0x47c>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0x4,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x8082cd3,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804d43a <main+0x4ca>
movl   $0x8082cf7,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d40b <main+0x49b>
addl   $0x1,0x8095c8c
mov    %esi,%edx
jmp    804d022 <main+0xb2>
cmp    $0x44,%al
jne    804d462 <main+0x4f2>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0xc,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x8082cfe,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d485 <main+0x515>
sub    $0x1,%ebx
cmp    $0x1,%ebx
lea    0x4(%esi),%edx
je     804d2d5 <main+0x365>
mov    0x8(%esi),%eax
mov    %eax,0x18(%esp)
jmp    804d022 <main+0xb2>
movl   $0x8082e98,0x8(%esp)
movl   $0x8082cdc,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
cmp    $0x42,%al
jne    804d0bd <main+0x14d>
cmpb   $0x0,0x2(%edi)
jne    804d0bd <main+0x14d>
movl   $0x7,0x8095ca8
00
mov    %esi,%edx
jmp    804d022 <main+0xb2>
movl   $0x8082d05,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d4dd <main+0x56d>
sub    $0x1,%ebx
lea    0x4(%esi),%edx
cmp    $0x1,%ebx
mov    %edx,0x1c(%esp)
je     804d2d5 <main+0x365>
movl   $0x0,0x8(%esp)
mov    0x8(%esi),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
mov    0x1c(%esp),%edx
test   %eax,%eax
jne    804d522 <main+0x5b2>
mov    0x2c(%esp),%eax
mov    %eax,0x80943d4
jmp    804d022 <main+0xb2>
movl   $0x8082d27,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804d2d5 <main+0x365>
mov    %edi,0xc(%esp)
movl   $0x8082c04,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8(%esi),%eax
movl   $0x8082d0d,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    804d501 <main+0x591>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8082840
push   $0x80827d0
push   %ecx
push   %esi
push   $0x804cf70
call   804b890 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x8095c43,%eax
sub    $0x8095c40,%eax
cmp    $0x6,%eax
ja     804d580 <_start+0x4d>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804d57f <_start+0x4c>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8095c40,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x8095c40,%eax
sub    $0x8095c40,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804d5b9 <_start+0x86>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804d5b8 <_start+0x85>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x8095c40,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8095c84
jne    804d5fc <_start+0xc9>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804d570 <_start+0x3d>
movb   $0x1,0x8095c84
leave
repz ret
xchg   %ax,%ax
mov    0x8093b00,%eax
test   %eax,%eax
je     804d628 <_start+0xf5>
mov    $0x0,%eax
test   %eax,%eax
je     804d628 <_start+0xf5>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8093b00,(%esp)
call   *%eax
leave
jmp    804d5a0 <_start+0x6d>
nop
jmp    804d5a0 <_start+0x6d>
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x8a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082888,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x29f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082914,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0xc,%esp
call   804d670 <_start+0x13d>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    $0x808b938,%eax
sub    $0x1c,%esp
mov    $0x8082dc0,%ebx
jmp    804d6e9 <_start+0x1b6>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     804d718 <_start+0x1e5>
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804d6e0 <_start+0x1ad>
add    $0x4,%ebp
sub    $0x1,%edi
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   *0x4(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
neg    %eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
mov    %esi,0xc(%esp)
movl   $0x8082bb4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1cc,%esp
test   %eax,%eax
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x1,0x8095c88
00
je     804d78d <_start+0x25a>
cmpb   $0x2d,(%eax)
jne    804d87b <_start+0x348>
cmpb   $0x0,0x1(%eax)
jne    804d87b <_start+0x348>
movl   $0x0,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d910 <rtnl_open>
test   %eax,%eax
js     804d8d7 <_start+0x3a4>
movl   $0x0,0x8098b78
00
lea    0x2c(%esp),%edi
movl   $0x0,0x1c(%esp)
lea    0x28(%esp),%esi
lea    0x30(%esp),%ebx
nop
mov    0x8095c70,%eax
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8080a80 <getcmdline>
cmp    $0xffffffff,%eax
je     804d850 <_start+0x31d>
mov    0x28(%esp),%eax
movl   $0x64,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8080c90 <makeargs>
test   %eax,%eax
je     804d7c8 <_start+0x295>
mov    %eax,%edx
mov    0x30(%esp),%eax
mov    %ebx,%ecx
call   804d6c0 <_start+0x18d>
test   %eax,%eax
je     804d7c8 <_start+0x295>
mov    0x8098b78,%eax
mov    %ebp,0xc(%esp)
movl   $0x8082c44,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c8c,%eax
movl   $0x1,0x1c(%esp)
test   %eax,%eax
jne    804d7c8 <_start+0x295>
xchg   %ax,%ax
mov    0x28(%esp),%eax
test   %eax,%eax
je     804d860 <_start+0x32d>
mov    %eax,(%esp)
call   804b5b0 <free@plt>
movl   $0x80941e0,(%esp)
call   807d670 <rtnl_close>
mov    0x1c(%esp),%eax
add    $0x1cc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8095c70,%eax
movl   $0x80843db,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   804bb10 <freopen@plt>
test   %eax,%eax
jne    804d78d <_start+0x25a>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebp,0xc(%esp)
movl   $0x8082bdc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0x1,%eax
jmp    804d870 <_start+0x33d>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082c2d,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0x1,%eax
jmp    804d870 <_start+0x33d>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x8095d38,%eax
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
mov    0x8095d34,%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
js     804d945 <_start+0x412>
movl   $0x0,0x8095d38
00
xor    %eax,%eax
add    $0x1c,%esp
ret
movl   $0x8082e9f,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    804d941 <_start+0x40e>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%esi),%ebp
lea    0x4(%ebp),%eax
mov    %eax,(%esp)
call   804b7a0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804d9d8 <_start+0x4a5>
lea    0x4(%eax),%eax
mov    %ebp,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
mov    0x4(%edi),%eax
movl   $0x0,(%ebx)
test   %eax,%eax
je     804d9d0 <_start+0x49d>
mov    %ebx,(%eax)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%edi)
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807d0f0 <ll_remember_index>
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%edi)
jmp    804d9a4 <_start+0x471>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    804d9c1 <_start+0x48e>
nop
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    (%ebx),%eax
mov    %ebx,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b8a0 <write@plt>
test   %eax,%eax
mov    %eax,%edx
jle    804da37 <_start+0x504>
cmp    (%ebx),%eax
je     804da40 <_start+0x50d>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083488,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xfffffffb,%edx
mov    $0xfffffffb,%eax
cmp    %edx,(%ebx)
je     804da40 <_start+0x50d>
add    $0x18,%esp
pop    %ebx
ret
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x8095cc0,%eax
test   %eax,%eax
je     804da61 <_start+0x52e>
call   8061280 <iplink_usage>
mov    0x8095c40,%eax
movl   $0x43,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80834a8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x48,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80834ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083538,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x43,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083560,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80835a4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80835f4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083618,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083640,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083670,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80836a0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80836d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80836f4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808372c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ebc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808376c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808379c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80837bc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ed8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0xe34,%esp
mov    %gs:0x14,%eax
mov    %eax,0xe2c(%esp)
xor    %eax,%eax
lea    0x2c(%esp),%eax
mov    %eax,0x8095d34
lea    0x14(%esp),%esi
movl   $0x0,0x8095d38
00
movl   $0xe00,0x8095d3c
00
lea    0x0(%esi),%esi
mov    0x8094204,%eax
test   %eax,%eax
je     804dd61 <_start+0x82e>
cmp    %eax,%ebx
jge    804de98 <_start+0x965>
mov    0x8095c80,%eax
movl   $0x16,0x8(%esp)
movl   $0x80941e0,(%esp)
movl   $0x8050b90,0x14(%esp)
mov    %eax,0x18(%esp)
mov    %eax,0x20(%esp)
mov    0x8095ce4,%eax
movl   $0x8050b70,0x1c(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x28(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     804df40 <_start+0xa0d>
mov    %esi,0x4(%esp)
movl   $0x80941e0,(%esp)
movl   $0x0,0x8095d30
00
call   807dc80 <rtnl_dump_filter_l>
test   %eax,%eax
js     804df0f <_start+0x9dc>
mov    0x8095d30,%eax
test   %eax,%eax
je     804dee8 <_start+0x9b5>
call   804d910 <_start+0x3dd>
add    $0x1,%ebx
test   %eax,%eax
js     804dec6 <_start+0x993>
mov    0x8095ca4,%edx
test   %edx,%edx
jne    804de60 <_start+0x92d>
testb  $0x1,0x8095d20
jne    804dd50 <_start+0x81d>
testb  $0x1,0x8095d24
je     804dd50 <_start+0x81d>
mov    0x8095ca4,%eax
test   %eax,%eax
je     804de4c <_start+0x919>
nop
mov    $0x8089003,%eax
cmp    $0x1,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x80837f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
jmp    804decb <_start+0x998>
lea    0x0(%esi),%esi
mov    0x8095d30,%eax
mov    %ebx,0x8(%esp)
movl   $0x8083820,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
jmp    804ddfc <_start+0x8c9>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x808384c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
mov    $0x1,%eax
mov    0xe2c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804df58 <_start+0xa25>
add    $0xe34,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095ca4,%ecx
test   %ecx,%ecx
je     804de4c <_start+0x919>
test   %ebx,%ebx
jne    804de20 <_start+0x8ed>
movl   $0x8082f1d,(%esp)
call   804b7b0 <puts@plt>
jmp    804de4c <_start+0x919>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%ebx
orw    $0x405,0x6(%ebx)
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    %ebx,0x10(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
mov    %eax,%ebx
jns    804dfb4 <_start+0xa81>
call   804b970 <__errno_location@plt>
cmpl   $0x11,(%eax)
mov    $0x0,%eax
cmove  %eax,%ebx
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8,%ecx
push   %esi
mov    $0x8082f2f,%edi
push   %ebx
mov    %edx,%esi
sub    $0x10,%esp
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804dfe8 <_start+0xab5>
movl   $0xffffffff,(%eax)
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
setne  %al
add    $0x10,%esp
movzbl %al,%eax
pop    %ebx
neg    %eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    $0x46,%ecx
push   %esi
mov    %eax,%esi
push   %ebx
or     $0x1,%edx
sub    $0x1fc,%esp
mov    %eax,0x34(%esp)
lea    0xd4(%esp),%edi
mov    0x210(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x1ec(%esp)
xor    %eax,%eax
test   %ebp,%ebp
movl   $0xffffffff,0x54(%esp)
movl   $0xffffffff,0x58(%esp)
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0x18,0xd4(%esp)
00
mov    %dx,0xda(%esp)
mov    %si,0xd8(%esp)
mov    %al,0xe4(%esp)
jle    804e97e <_start+0x144b>
movl   $0x0,0x38(%esp)
movl   $0x0,0x30(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x2c(%esp)
jmp    804e18e <_start+0xc5b>
lea    0x0(%esi),%esi
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x20(%esp),%ecx
test   %ecx,%ecx
jne    804e9dc <_start+0x14a9>
movzbl 0xe4(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x84(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzbl 0x85(%esp),%eax
cmpb   $0x0,0xe4(%esp)
mov    %eax,0x20(%esp)
jne    804e13f <_start+0xc0c>
movzbl 0x84(%esp),%eax
mov    %al,0xe4(%esp)
mov    0x20(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x8c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movzwl 0x86(%esp),%eax
mov    %al,0xe5(%esp)
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jle    804e2b8 <_start+0xd85>
mov    (%ebx),%eax
mov    $0x5,%ecx
mov    $0x8082f37,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804e0e0 <_start+0xbad>
mov    $0x8082f3c,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804e0e0 <_start+0xbad>
movl   $0x8082f43,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804e608 <_start+0x10d5>
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x62,%edi
mov    %edi,0x28(%esp)
jne    804e1f0 <_start+0xcbd>
cmpb   $0x72,0x1(%eax)
jne    804e1f0 <_start+0xcbd>
cmpb   $0x64,0x2(%eax)
je     804e5fd <_start+0x10ca>
xchg   %ax,%ax
mov    $0x8,%ecx
mov    %eax,%esi
mov    $0x8082f4d,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804e6e0 <_start+0x11ad>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    804eba4 <_start+0x1671>
movzbl 0xe4(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0xac(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
cmpb   $0x0,0xe4(%esp)
jne    804e263 <_start+0xd30>
movzbl 0xac(%esp),%eax
mov    %al,0xe4(%esp)
movzbl 0xad(%esp),%eax
sub    $0x1,%ebp
movl   $0x5,0x8(%esp)
lea    0x4(%esi),%ebx
movl   $0x118,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0xb4(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movzbl 0xad(%esp),%eax
test   %ebp,%ebp
mov    %eax,0x30(%esp)
jg     804e18e <_start+0xc5b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%edi
test   %edi,%edi
je     804e97e <_start+0x144b>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804e2e0 <_start+0xdad>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804ea23 <_start+0x14f0>
mov    0x40(%esp),%esi
test   %esi,%esi
je     804e3ab <_start+0xe78>
mov    0x20(%esp),%ebx
test   %ebx,%ebx
jne    804e3ab <_start+0xe78>
cmpl   $0x15,0x34(%esp)
jne    804e30a <_start+0xdd7>
cmpb   $0x2,0x5c(%esp)
je     804e805 <_start+0x12d2>
mov    0x5c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,0x84(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x88(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x8c(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x90(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x94(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x98(%esp)
mov    0x74(%esp),%eax
mov    %eax,0x9c(%esp)
mov    0x78(%esp),%eax
mov    %eax,0xa0(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0xa4(%esp)
mov    0x80(%esp),%eax
mov    %eax,0xa8(%esp)
movzbl 0x5d(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
cmpb   $0x0,0xe5(%esp)
jne    804e3c1 <_start+0xe8e>
movzwl 0x5e(%esp),%eax
mov    %al,0xe5(%esp)
cmpl   $0x15,0x34(%esp)
setne  %al
mov    %eax,%edi
mov    0x24(%esp),%eax
shr    $0x1f,%eax
test   %al,%al
je     804e508 <_start+0xfd5>
mov    %edi,%eax
test   %al,%al
je     804e508 <_start+0xfd5>
cmpb   $0x2,0xe4(%esp)
jne    804e94f <_start+0x141c>
mov    0x90(%esp),%ecx
mov    0x88(%esp),%eax
mov    0x84(%esp),%edx
mov    %ecx,0xb8(%esp)
mov    0x94(%esp),%ecx
mov    %eax,0xb0(%esp)
mov    0x8c(%esp),%eax
mov    %edx,0xac(%esp)
shr    $0x10,%edx
cmp    $0x1e,%dx
mov    %ecx,0xbc(%esp)
mov    0x98(%esp),%ecx
mov    %eax,0xb4(%esp)
mov    %ecx,0xc0(%esp)
mov    0x9c(%esp),%ecx
mov    %ecx,0xc4(%esp)
mov    0xa0(%esp),%ecx
mov    %ecx,0xc8(%esp)
mov    0xa4(%esp),%ecx
mov    %ecx,0xcc(%esp)
mov    0xa8(%esp),%ecx
mov    %ecx,0xd0(%esp)
jg     804e508 <_start+0xfd5>
movswl %dx,%ecx
mov    $0x20,%edx
mov    0x24(%esp),%ebp
sub    %ecx,%edx
mov    $0x1000000,%esi
xor    %ecx,%ecx
mov    $0x1,%ebx
jmp    804e4b9 <_start+0xf86>
nop
not    %esi
add    $0x1,%ecx
and    %esi,%eax
cmp    %edx,%ecx
je     804e4c7 <_start+0xf94>
mov    %ebx,%esi
shl    %cl,%esi
bswap  %esi
cmp    $0xffffffff,%ebp
jne    804e4a8 <_start+0xf75>
add    $0x1,%ecx
or     %esi,%eax
cmp    %edx,%ecx
jne    804e4b3 <_start+0xf80>
mov    %eax,0xb4(%esp)
movzbl 0xad(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0xb4(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%ecx
test   %ecx,%ecx
je     804e740 <_start+0x120d>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0xe8(%esp)
je     804e9ad <_start+0x147a>
mov    0x44(%esp),%edx
test   %edx,%edx
je     804e7f4 <_start+0x12c1>
mov    0x58(%esp),%eax
test   %eax,%eax
je     804e9f4 <_start+0x14c1>
mov    0x54(%esp),%edx
cmp    %edx,%eax
jb     804e920 <_start+0x13ed>
lea    0xac(%esp),%ecx
mov    %eax,0xb0(%esp)
lea    0xd4(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %ecx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0xb4(%esp)
00
movl   $0x0,0xb8(%esp)
00
mov    %edx,0xac(%esp)
call   807ea10 <addattr_l>
lea    0xd4(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
sar    $0x1f,%eax
and    $0xfffffffe,%eax
mov    0x1ec(%esp),%edi
xor    %gs:0x14,%edi
jne    804eb8d <_start+0x165a>
add    $0x1fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x3(%eax)
jne    804e1f0 <_start+0xcbd>
nop
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x24(%esp),%edx
mov    0x4(%ebx),%eax
test   %edx,%edx
jne    804ea9a <_start+0x1567>
movzbl (%eax),%edx
cmp    $0x2b,%edx
jne    804e640 <_start+0x110d>
cmpb   $0x0,0x1(%eax)
jne    804e649 <_start+0x1116>
movl   $0xffffffff,0x24(%esp)
jmp    804e180 <_start+0xc4d>
xchg   %ax,%ax
cmp    $0x2d,%edx
je     804e6c8 <_start+0x1195>
movzbl 0xe4(%esp),%edx
mov    %eax,0x4(%esp)
lea    0xac(%esp),%eax
mov    %eax,(%esp)
mov    %edx,0x8(%esp)
call   807fea0 <get_addr>
cmpb   $0x0,0xe4(%esp)
jne    804e681 <_start+0x114e>
movzbl 0xac(%esp),%eax
mov    %al,0xe4(%esp)
movzbl 0xad(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0xb4(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movzbl 0xad(%esp),%eax
mov    %eax,0x24(%esp)
jmp    804e180 <_start+0xc4d>
cmpb   $0x0,0x1(%eax)
jne    804e649 <_start+0x1116>
movl   $0xfffffffe,0x24(%esp)
jmp    804e180 <_start+0xc4d>
nop
mov    $0x8082f55,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e763 <_start+0x1230>
sub    $0x1,%ebp
movl   $0x0,0xac(%esp)
00
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0xac(%esp),%eax
mov    %eax,(%esp)
call   8081460 <rtnl_rtscope_a2n>
test   %eax,%eax
jne    804eaaa <_start+0x1577>
mov    0xac(%esp),%eax
movl   $0x1,0x38(%esp)
mov    %al,0xe7(%esp)
jmp    804e180 <_start+0xc4d>
mov    %edi,%eax
test   %al,%al
je     804e514 <_start+0xfe1>
xor    %eax,%eax
cmpb   $0x2,0x5c(%esp)
je     804e8a0 <_start+0x136d>
mov    %al,0xe7(%esp)
jmp    804e514 <_start+0xfe1>
cmpl   $0x64,0x28(%esp)
jne    804e794 <_start+0x1261>
cmpb   $0x65,0x1(%eax)
jne    804e794 <_start+0x1261>
cmpb   $0x76,0x2(%eax)
jne    804e794 <_start+0x1261>
cmpb   $0x0,0x3(%eax)
jne    804e794 <_start+0x1261>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %eax,0x2c(%esp)
jmp    804e180 <_start+0xc4d>
mov    $0x8082d31,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e845 <_start+0x1312>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
mov    %eax,%edi
mov    %eax,0x3c(%esp)
call   804b880 <strlen@plt>
mov    %edi,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x118,0x4(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    804e180 <_start+0xc4d>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804e53b <_start+0x1008>
jmp    804e5a9 <_start+0x1076>
testb  $0x1,0x60(%esp)
jne    804e30a <_start+0xdd7>
mov    0x40(%esp),%eax
movl   $0x8083934,0x8(%esp)
movl   $0x1,0x4(%esp)
shl    $0x3,%eax
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804e3ab <_start+0xe78>
movl   $0x8082f70,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804e8be <_start+0x138b>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804ebb7 <_start+0x1684>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %eax,0x48(%esp)
mov    %eax,%edx
lea    0x58(%esp),%eax
call   804dfc0 <_start+0xa8d>
test   %eax,%eax
je     804e180 <_start+0xc4d>
mov    0x4(%ebx),%eax
movl   $0x8082f7a,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
movzbl 0x5d(%esp),%eax
test   %al,%al
je     804e757 <_start+0x1224>
cmpb   $0x7f,0x64(%esp)
setne  %al
lea    -0x2(%eax,%eax,1),%eax
jmp    804e757 <_start+0x1224>
movl   $0x8082f8a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    804ea5a <_start+0x1527>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    804eb92 <_start+0x165f>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %eax,0x44(%esp)
mov    %eax,%edx
lea    0x54(%esp),%eax
call   804dfc0 <_start+0xa8d>
test   %eax,%eax
je     804e180 <_start+0xc4d>
mov    0x4(%ebx),%eax
movl   $0x8082f98,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083a64,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083a34,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80838d4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    0x2c(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    0x4(%ebx),%eax
movl   $0x8082f37,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082fd6,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    0x3c(%esp),%eax
movl   $0x808390c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    804e5de <_start+0x10ab>
mov    (%ebx),%eax
mov    $0x8082fac,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804ea7b <_start+0x1548>
orb    $0x10,0xe6(%esp)
mov    %ebx,%esi
jmp    804e180 <_start+0xc4d>
mov    $0x8082fb1,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804eabd <_start+0x158a>
orb    $0x2,0xe6(%esp)
mov    %ebx,%esi
jmp    804e180 <_start+0xc4d>
mov    %eax,0x4(%esp)
movl   $0x8082f43,(%esp)
call   8080100 <duparg>
mov    0x4(%ebx),%eax
movl   $0x8082f5b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804eade <_start+0x15ab>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     804e9ef <_start+0x14bc>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     804eb88 <_start+0x1655>
mov    0x40(%esp),%edi
mov    (%ebx),%eax
test   %edi,%edi
jne    804eb78 <_start+0x1645>
mov    %eax,%edi
mov    %eax,0x4c(%esp)
movzbl 0xe4(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0xe4(%esp)
jne    804eb38 <_start+0x1605>
movzbl 0x5c(%esp),%eax
mov    %al,0xe4(%esp)
movzbl 0x5d(%esp),%eax
mov    %ebx,%esi
movl   $0x2,0x8(%esp)
movl   $0x118,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xd4(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movzbl 0x5d(%esp),%eax
mov    %eax,0x40(%esp)
jmp    804e180 <_start+0xc4d>
mov    %eax,0x4(%esp)
movl   $0x8082fb7,(%esp)
call   8080150 <duparg2>
call   804da50 <_start+0x51d>
call   804b660 <__stack_chk_fail@plt>
mov    (%ebx),%eax
movl   $0x8082f8a,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    0x4(%ebx),%eax
movl   $0x8082f4d,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    (%ebx),%eax
movl   $0x8082f70,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8083d50(,%ebx,4),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
je     804ec10 <get_operstate+0x40>
add    $0x1,%ebx
cmp    $0x7,%ebx
jne    804ebe0 <get_operstate+0x10>
add    $0x14,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x14c,%esp
mov    0xc(%ebp),%ebx
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
mov    0x10(%ebp),%esi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%edx
sub    $0x10,%eax
cmp    $0x1,%ax
jbe    804ec68 <print_linkinfo+0x48>
xor    %eax,%eax
mov    -0x1c(%ebp),%ecx
xor    %gs:0x14,%ecx
jne    8050202 <print_linkinfo+0x15e2>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
sub    $0x20,%edx
js     804fe4e <print_linkinfo+0x122e>
mov    0x8095ce0,%eax
test   %eax,%eax
je     804ec7f <print_linkinfo+0x5f>
cmp    0x14(%ebx),%eax
jne    804ec4c <print_linkinfo+0x2c>
mov    0x8095d28,%ecx
test   %ecx,%ecx
je     804ec8f <print_linkinfo+0x6f>
testb  $0x1,0x18(%ebx)
je     804ec4c <print_linkinfo+0x2c>
lea    0x20(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0xe8(%ebp),%eax
mov    %edx,0xc(%esp)
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    -0xdc(%ebp),%eax
test   %eax,%eax
je     804fe58 <print_linkinfo+0x1238>
mov    0x8095d2c,%edx
test   %edx,%edx
je     804ecde <print_linkinfo+0xbe>
mov    0x8095ce4,%eax
cmp    $0x11,%eax
je     804fd20 <print_linkinfo+0x1100>
test   %eax,%eax
je     804fd20 <print_linkinfo+0x1100>
mov    -0x7c(%ebp),%eax
test   %eax,%eax
je     804ecfa <print_linkinfo+0xda>
mov    0x4(%eax),%edx
mov    0x8095d40,%eax
cmp    $0xffffffff,%eax
je     804ecfa <print_linkinfo+0xda>
cmp    %eax,%edx
jne    804fe4e <print_linkinfo+0x122e>
cmpw   $0x11,0x4(%ebx)
je     804fe08 <print_linkinfo+0x11e8>
mov    -0xdc(%ebp),%edx
mov    $0x8082fe9,%eax
test   %edx,%edx
lea    0x4(%edx),%ecx
cmovne %ecx,%eax
mov    %eax,0x10(%esp)
mov    0x14(%ebx),%eax
movl   $0x8083003,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0xd4(%ebp),%eax
test   %eax,%eax
je     80500a9 <print_linkinfo+0x1489>
mov    0x4(%eax),%edi
test   %edi,%edi
jne    804f600 <print_linkinfo+0x9e0>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808300a,(%esp)
call   804b710 <fwrite@plt>
movl   $0x0,-0x10c(%ebp)
00
mov    0x18(%ebx),%edi
mov    %esi,0x4(%esp)
movl   $0x3c,(%esp)
call   804ba50 <fputc@plt>
mov    %edi,%eax
and    $0x41,%eax
cmp    $0x1,%eax
je     804fd90 <print_linkinfo+0x1170>
test   $0x8,%edi
jne    804f5c8 <print_linkinfo+0x9a8>
and    $0xffffffbf,%edi
test   $0x2,%edi
je     804ede2 <print_linkinfo+0x1c2>
mov    $0x8088729,%eax
and    $0xfffffffd,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083030,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x10,%edi
je     804ee16 <print_linkinfo+0x1f6>
mov    $0x8088729,%eax
and    $0xffffffef,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808303c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x1000,%edi
je     804ee4d <print_linkinfo+0x22d>
mov    $0x8088729,%eax
and    $0xffffefff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808304a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x80,%edi
je     804ee84 <print_linkinfo+0x264>
mov    $0x8088729,%eax
and    $0xffffff7f,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083056,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x200,%edi
je     804eebb <print_linkinfo+0x29b>
mov    $0x8088729,%eax
and    $0xfffffdff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808305e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x100,%edi
je     804eef2 <print_linkinfo+0x2d2>
mov    $0x8088729,%eax
and    $0xfffffeff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083069,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x400,%edi
je     804ef29 <print_linkinfo+0x309>
mov    $0x8088729,%eax
and    $0xfffffbff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083073,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x800,%edi
je     804ef60 <print_linkinfo+0x340>
mov    $0x8088729,%eax
and    $0xfffff7ff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808307c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%edi
je     804ef94 <print_linkinfo+0x374>
mov    $0x8088729,%eax
and    $0xfffffffb,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083084,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x8000,%edi
je     804efcb <print_linkinfo+0x3ab>
mov    $0x8088729,%eax
and    $0xffff7fff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808308c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4000,%edi
je     804f002 <print_linkinfo+0x3e2>
mov    $0x8088729,%eax
and    $0xffffbfff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083096,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2000,%edi
je     804f039 <print_linkinfo+0x419>
mov    $0x8088729,%eax
and    $0xffffdfff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830a2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x20,%edi
je     804f06d <print_linkinfo+0x44d>
mov    $0x8088729,%eax
and    $0xffffffdf,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830ac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x1,%edi
je     804f0a1 <print_linkinfo+0x481>
mov    $0x8088729,%eax
and    $0xfffffffe,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830bf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x10000,%edi
je     804f0d8 <print_linkinfo+0x4b8>
mov    $0x8088729,%eax
and    $0xfffeffff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830b9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x20000,%edi
je     804f10f <print_linkinfo+0x4ef>
mov    $0x8088729,%eax
and    $0xfffdffff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830c4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x40000,%edi
je     804f146 <print_linkinfo+0x526>
mov    $0x8088729,%eax
and    $0xfffbffff,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80830ce,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %edi,%edi
jne    804fcf8 <print_linkinfo+0x10d8>
mov    -0x10c(%ebp),%eax
test   %eax,%eax
je     804f178 <print_linkinfo+0x558>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80830d5,(%esp)
call   804b710 <fwrite@plt>
mov    %esi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a293,(%esp)
call   804b710 <fwrite@plt>
mov    -0xd8(%ebp),%eax
test   %eax,%eax
je     804f1c1 <print_linkinfo+0x5a1>
mov    0x4(%eax),%eax
movl   $0x80830dd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0xd0(%ebp),%eax
test   %eax,%eax
je     804f1ea <print_linkinfo+0x5ca>
add    $0x4,%eax
mov    %eax,0xc(%esp)
movl   $0x80830e5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0xc0(%ebp),%eax
test   %eax,%eax
je     804f222 <print_linkinfo+0x602>
lea    -0x5c(%ebp),%edx
mov    %edx,0x4(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   807d370 <ll_idx_n2a>
movl   $0x80830ef,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0xa8(%ebp),%eax
test   %eax,%eax
je     804f25b <print_linkinfo+0x63b>
movzbl 0x4(%eax),%eax
cmp    $0x6,%al
ja     804fdb8 <print_linkinfo+0x1198>
mov    0x8083d50(,%eax,4),%eax
movl   $0x8083105,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095cc0,%eax
test   %eax,%eax
je     804f297 <print_linkinfo+0x677>
mov    -0xa4(%ebp),%eax
test   %eax,%eax
je     804f297 <print_linkinfo+0x677>
movzbl 0x4(%eax),%eax
cmp    $0x1,%eax
jbe    804fa78 <print_linkinfo+0xe58>
mov    %eax,0xc(%esp)
movl   $0x808310f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0x7c(%ebp),%eax
test   %eax,%eax
je     804f2d4 <print_linkinfo+0x6b4>
lea    -0x5c(%ebp),%edx
movl   $0x40,0x8(%esp)
mov    %edx,0x4(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   8081bf0 <rtnl_group_n2a>
movl   $0x8084de5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095cec,%eax
test   %eax,%eax
jne    804fd50 <print_linkinfo+0x1130>
mov    0x8095ce4,%eax
cmp    $0x11,%eax
je     804fbf0 <print_linkinfo+0xfd0>
test   %eax,%eax
je     804fbf0 <print_linkinfo+0xfd0>
mov    0x8095cc0,%eax
test   %eax,%eax
je     804f5a6 <print_linkinfo+0x986>
mov    -0x70(%ebp),%eax
test   %eax,%eax
je     804f319 <print_linkinfo+0x6f9>
mov    0x8095ca0,%edi
test   %edi,%edi
jne    804faa0 <print_linkinfo+0xe80>
mov    -0xa0(%ebp),%eax
test   %eax,%eax
je     804f331 <print_linkinfo+0x711>
mov    0x8095ca0,%ecx
test   %ecx,%ecx
jne    804fad8 <print_linkinfo+0xeb8>
mov    -0x98(%ebp),%eax
test   %eax,%eax
je     804f371 <print_linkinfo+0x751>
add    $0x4,%eax
mov    %eax,0x10(%esp)
mov    0x8095c90,%eax
movl   $0x8083153,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095cc0,%ecx
test   %ecx,%ecx
je     804f5a6 <print_linkinfo+0x986>
mov    0x8095ca4,%ebx
test   %ebx,%ebx
jne    804f760 <print_linkinfo+0xb40>
mov    -0x90(%ebp),%eax
test   %eax,%eax
je     804f5a6 <print_linkinfo+0x986>
mov    -0x94(%ebp),%edx
test   %edx,%edx
je     804f5a6 <print_linkinfo+0x986>
movzwl (%eax),%edx
lea    0x4(%eax),%ebx
lea    -0x4(%edx),%edi
cmp    $0x3,%edi
jle    804f5a6 <print_linkinfo+0x986>
movzwl 0x4(%eax),%eax
cmp    $0x3,%ax
jbe    804f5a6 <print_linkinfo+0x986>
cmp    %eax,%edi
jl     804f5a6 <print_linkinfo+0x986>
mov    %esi,-0x10c(%ebp)
jmp    804f41c <print_linkinfo+0x7fc>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
movl   $0x8083170,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl (%ebx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%edi
add    %eax,%ebx
cmp    $0x3,%edi
jle    804f5a0 <print_linkinfo+0x980>
movzwl (%ebx),%eax
cmp    $0x3,%ax
jbe    804f5a0 <print_linkinfo+0x980>
cmp    %edi,%eax
jg     804f5a0 <print_linkinfo+0x980>
movzwl 0x2(%ebx),%edx
cmp    $0x1,%dx
jne    804f3d0 <print_linkinfo+0x7b0>
sub    $0x4,%eax
mov    %eax,0xc(%esp)
lea    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
lea    -0x100(%ebp),%eax
movl   $0x5,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    -0xf8(%ebp),%eax
mov    -0xf4(%ebp),%esi
mov    -0xfc(%ebp),%edx
movl   $0x0,-0x114(%ebp)
00
mov    %eax,-0x110(%ebp)
movzwl (%esi),%eax
movl   $0x0,-0x118(%ebp)
00
cmpw   $0x4,0x2(%esi,%eax,1)
je     804f6f0 <print_linkinfo+0xad0>
lea    -0x5c(%ebp),%eax
mov    %eax,0xc(%esp)
lea    0x8(%edx),%eax
movl   $0x40,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x6,0x4(%esp)
mov    %edx,-0x11c(%ebp)
mov    %eax,(%esp)
call   8081e40 <ll_addr_n2a>
mov    %eax,0x10(%esp)
mov    -0x11c(%ebp),%edx
mov    0x4(%edx),%eax
movl   $0x8083185,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    -0x10c(%ebp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0x110(%ebp),%eax
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804f6c8 <print_linkinfo+0xaa8>
mov    -0x110(%ebp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
jne    804f6a0 <print_linkinfo+0xa80>
mov    0x8(%esi),%eax
test   %eax,%eax
jne    804f678 <print_linkinfo+0xa58>
mov    -0x114(%ebp),%eax
test   %eax,%eax
je     804f551 <print_linkinfo+0x931>
mov    0x4(%eax),%eax
cmp    $0xffffffff,%eax
je     804f551 <print_linkinfo+0x931>
test   %eax,%eax
mov    -0x10c(%ebp),%eax
mov    %eax,0xc(%esp)
je     804f650 <print_linkinfo+0xa30>
movl   $0x13,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80831be,(%esp)
call   804b710 <fwrite@plt>
mov    -0x118(%ebp),%eax
test   %eax,%eax
je     804f3f1 <print_linkinfo+0x7d1>
mov    0x4(%eax),%eax
test   %eax,%eax
je     804f730 <print_linkinfo+0xb10>
cmp    $0x1,%eax
mov    -0x10c(%ebp),%eax
mov    %eax,0xc(%esp)
je     804fde0 <print_linkinfo+0x11c0>
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808320d,(%esp)
call   804b710 <fwrite@plt>
jmp    804f3f1 <print_linkinfo+0x7d1>
xchg   %ax,%ax
mov    -0x10c(%ebp),%esi
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
jmp    804ec4c <print_linkinfo+0x2c>
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0xffffffb7,%edi
mov    $0x808a29b,%edx
mov    $0x8088729,%eax
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083025,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804edae <print_linkinfo+0x18e>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x5c(%ebp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   807d370 <ll_idx_n2a>
movl   $0x8083012,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   807d490 <ll_index_to_flags>
mov    %eax,-0x10c(%ebp)
andl   $0x1,-0x10c(%ebp)
xorl   $0x1,-0x10c(%ebp)
jmp    804ed7e <print_linkinfo+0x15e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80831d2,(%esp)
call   804b710 <fwrite@plt>
jmp    804f551 <print_linkinfo+0x931>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
movl   $0x80831aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    -0x10c(%ebp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f511 <print_linkinfo+0x8f1>
nop
mov    %eax,0xc(%esp)
movl   $0x80831a1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    -0x10c(%ebp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f506 <print_linkinfo+0x8e6>
nop
mov    %eax,0xc(%esp)
movl   $0x8083197,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    -0x10c(%ebp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f4f5 <print_linkinfo+0x8d5>
nop
mov    -0xf0(%ebp),%eax
mov    %eax,%ecx
add    $0x4,%ecx
mov    %ecx,-0x114(%ebp)
je     8050245 <print_linkinfo+0x1625>
movzwl (%eax),%ecx
cmpw   $0x5,0x2(%eax,%ecx,1)
jne    804f485 <print_linkinfo+0x865>
mov    -0xec(%ebp),%eax
add    $0x4,%eax
mov    %eax,-0x118(%ebp)
jmp    804f485 <print_linkinfo+0x865>
lea    0x0(%esi),%esi
mov    -0x10c(%ebp),%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80831e7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    804f3f1 <print_linkinfo+0x7d1>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x8c(%ebp),%ebx
test   %ebx,%ebx
je     804fe81 <print_linkinfo+0x1261>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0xb0(%ebx),%edx
mov    $0x8082fef,%eax
or     0xac(%ebx),%edx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    0x8095c90,%edx
mov    %eax,0xc(%esp)
movl   $0x8083ae0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %eax,0x34(%esp)
mov    %edx,0x38(%esp)
mov    0x5c(%ebx),%eax
mov    0x60(%ebx),%edx
mov    %eax,0x2c(%esp)
mov    %edx,0x30(%esp)
mov    0x34(%ebx),%eax
mov    0x38(%ebx),%edx
mov    %eax,0x24(%esp)
mov    %edx,0x28(%esp)
mov    0x24(%ebx),%eax
mov    0x28(%ebx),%edx
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    0x4(%ebx),%eax
mov    0x8(%ebx),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x18(%ebx),%edx
mov    0x14(%ebx),%eax
movl   $0x8083b20,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xb0(%ebx),%eax
mov    0xac(%ebx),%edx
mov    %eax,%ecx
or     %edx,%ecx
jne    80500fd <print_linkinfo+0x14dd>
cmpl   $0x1,0x8095ca4
jle    804f8e0 <print_linkinfo+0xcc0>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x8083b50,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x7c(%ebx),%eax
mov    0x80(%ebx),%edx
mov    %eax,0x2c(%esp)
mov    %edx,0x30(%esp)
mov    0x74(%ebx),%eax
mov    0x78(%ebx),%edx
mov    %eax,0x24(%esp)
mov    %edx,0x28(%esp)
mov    0x6c(%ebx),%eax
mov    0x70(%ebx),%edx
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    0x64(%ebx),%eax
mov    0x68(%ebx),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x54(%ebx),%eax
mov    0x58(%ebx),%edx
movl   $0x8083b88,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0xb8(%ebx),%edx
mov    $0x8082fef,%eax
or     0xb4(%ebx),%edx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    0x8095c90,%edx
mov    %eax,0xc(%esp)
movl   $0x8083bbc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4c(%ebx),%eax
mov    0x50(%ebx),%edx
mov    %eax,0x34(%esp)
mov    %edx,0x38(%esp)
mov    0x8c(%ebx),%eax
mov    0x90(%ebx),%edx
mov    %eax,0x2c(%esp)
mov    %edx,0x30(%esp)
mov    0x3c(%ebx),%eax
mov    0x40(%ebx),%edx
mov    %eax,0x24(%esp)
mov    %edx,0x28(%esp)
mov    0x2c(%ebx),%eax
mov    0x30(%ebx),%edx
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    0xc(%ebx),%eax
mov    0x10(%ebx),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x20(%ebx),%edx
mov    0x1c(%ebx),%eax
movl   $0x8083b20,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xb8(%ebx),%eax
mov    0xb4(%ebx),%edx
mov    %eax,%ecx
or     %edx,%ecx
jne    80500d8 <print_linkinfo+0x14b8>
cmpl   $0x1,0x8095ca4
jle    804fa5f <print_linkinfo+0xe3f>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x8083bfc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x9c(%ebx),%eax
mov    0xa0(%ebx),%edx
mov    %eax,0x24(%esp)
mov    %edx,0x28(%esp)
mov    0xa4(%ebx),%eax
mov    0xa8(%ebx),%edx
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
mov    0x94(%ebx),%eax
mov    0x98(%ebx),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x84(%ebx),%eax
mov    0x88(%ebx),%edx
movl   $0x8083c30,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095cc0,%ecx
test   %ecx,%ecx
jne    804f37f <print_linkinfo+0x75f>
jmp    804f5a6 <print_linkinfo+0x986>
lea    0x0(%esi),%esi
mov    0x8083d48(,%eax,4),%eax
movl   $0x808ae53,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f297 <print_linkinfo+0x677>
mov    0x4(%eax),%eax
movl   $0x808313a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095cc0,%ebx
test   %ebx,%ebx
jne    804f319 <print_linkinfo+0x6f9>
jmp    804f5a6 <print_linkinfo+0x986>
lea    0x0(%esi),%esi
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    -0x100(%ebp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    -0xfc(%ebp),%eax
test   %eax,%eax
je     804fbdc <print_linkinfo+0xfbc>
lea    0x4(%eax),%ebx
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x808314b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8061800 <get_link_kind>
test   %eax,%eax
mov    %eax,%ebx
je     804fbdc <print_linkinfo+0xfbc>
mov    0x10(%eax),%eax
test   %eax,%eax
je     804fbdc <print_linkinfo+0xfbc>
mov    0x8(%ebx),%ecx
mov    %esp,-0x10c(%ebp)
lea    0x16(,%ecx,4),%edx
and    $0xfffffff0,%edx
sub    %edx,%esp
mov    -0xf8(%ebp),%edx
lea    0x3c(%esp),%edi
test   %edx,%edx
je     80501b9 <print_linkinfo+0x1599>
movzwl (%edx),%eax
add    $0x4,%edx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %edi,(%esp)
sub    $0x4,%eax
mov    %eax,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x10(%ebx),%eax
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   *%eax
mov    -0xf4(%ebp),%eax
test   %eax,%eax
je     804fbd6 <print_linkinfo+0xfb6>
mov    0x8095ca4,%edx
test   %edx,%edx
je     804fbd6 <print_linkinfo+0xfb6>
mov    0x14(%ebx),%edx
test   %edx,%edx
je     804fbd6 <print_linkinfo+0xfb6>
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   *%edx
mov    -0x10c(%ebp),%esp
mov    0x8095cc0,%edi
test   %edi,%edi
jne    804f331 <print_linkinfo+0x711>
jmp    804f5a6 <print_linkinfo+0x986>
nop
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
lea    -0x5c(%ebp),%edi
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movl   $0x40,0x8(%esp)
mov    %edi,0x4(%esp)
movzwl 0x12(%ebx),%eax
mov    %eax,(%esp)
call   8081ca0 <ll_type_n2a>
movl   $0x8083120,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0xe4(%ebp),%eax
test   %eax,%eax
je     804fc78 <print_linkinfo+0x1058>
movl   $0x40,0x10(%esp)
add    $0x4,%eax
mov    %edi,0xc(%esp)
movzwl 0x12(%ebx),%edx
mov    %edx,0x8(%esp)
movzwl -0x4(%eax),%edx
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0x4(%esp)
call   8081e40 <ll_addr_n2a>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    -0xe0(%ebp),%eax
test   %eax,%eax
je     804f2f7 <print_linkinfo+0x6d7>
testb  $0x10,0x18(%ebx)
mov    %esi,0xc(%esp)
je     804fe2d <print_linkinfo+0x120d>
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808312d,(%esp)
call   804b710 <fwrite@plt>
mov    -0xe0(%ebp),%eax
movl   $0x40,0x10(%esp)
mov    %edi,0xc(%esp)
movzwl 0x12(%ebx),%edx
add    $0x4,%eax
mov    %edx,0x8(%esp)
movzwl -0x4(%eax),%edx
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0x4(%esp)
call   8081e40 <ll_addr_n2a>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    804f2f7 <print_linkinfo+0x6d7>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f14e <print_linkinfo+0x52e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x8(%esp)
mov    -0xdc(%ebp),%eax
mov    %edx,(%esp)
add    $0x4,%eax
mov    %eax,0x4(%esp)
call   804b6c0 <fnmatch@plt>
test   %eax,%eax
je     804ecde <print_linkinfo+0xbe>
jmp    804ec4c <print_linkinfo+0x2c>
lea    0x0(%esi),%esi
mov    -0xb4(%ebp),%eax
test   %eax,%eax
je     8050122 <print_linkinfo+0x1502>
mov    0x4(%eax),%eax
test   %eax,%eax
je     804f2e1 <print_linkinfo+0x6c1>
mov    %eax,0xc(%esp)
movl   $0x8083118,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f2e1 <print_linkinfo+0x6c1>
lea    0x0(%esi),%esi
movl   $0x8088729,0xc(%esp)
movl   $0x8083018,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804ed9f <print_linkinfo+0x17f>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x80830fa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f25b <print_linkinfo+0x63b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x13,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80831f9,(%esp)
call   804b710 <fwrite@plt>
jmp    804f3f1 <print_linkinfo+0x7d1>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    804ed05 <print_linkinfo+0xe5>
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083134,(%esp)
call   804b710 <fwrite@plt>
jmp    804fcb0 <print_linkinfo+0x1090>
mov    $0xffffffff,%eax
jmp    804ec4e <print_linkinfo+0x2e>
mov    0x14(%ebx),%eax
movl   $0x8083a90,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804ecbe <print_linkinfo+0x9e>
mov    -0xcc(%ebp),%ebx
test   %ebx,%ebx
je     804f37f <print_linkinfo+0x75f>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x58(%ebx),%edx
mov    $0x8082fef,%eax
test   %edx,%edx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    0x8095c90,%edx
mov    %eax,0xc(%esp)
movl   $0x8083ae0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x24(%ebx),%eax
mov    %eax,0x20(%esp)
mov    0x30(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    0x1c(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x14(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0xc(%ebx),%eax
movl   $0x8083c5c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x58(%ebx),%eax
test   %eax,%eax
jne    80501e1 <print_linkinfo+0x15c1>
cmpl   $0x1,0x8095ca4
jle    804ff9b <print_linkinfo+0x137b>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x8083b50,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x40(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    0x3c(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x38(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x34(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%ebx),%eax
movl   $0x8083c80,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x5c(%ebx),%edi
mov    $0x808a29b,%edx
mov    $0x8082fef,%eax
test   %edi,%edi
cmove  %edx,%eax
mov    0x8095c90,%edx
mov    %eax,0xc(%esp)
movl   $0x8083bbc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x28(%ebx),%eax
mov    %eax,0x20(%esp)
mov    0x48(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    0x20(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x18(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x10(%ebx),%eax
movl   $0x8083c5c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x5c(%ebx),%eax
test   %eax,%eax
jne    80501c0 <print_linkinfo+0x15a0>
cmpl   $0x1,0x8095ca4
jle    804fa5f <print_linkinfo+0xe3f>
mov    %esi,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x8083bfc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x50(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x54(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x4c(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x44(%ebx),%eax
movl   $0x8083cac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804fa5f <print_linkinfo+0xe3f>
mov    %esi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808300f,(%esp)
call   804b710 <fwrite@plt>
movl   $0x0,-0x10c(%ebp)
00
jmp    804ed7e <print_linkinfo+0x15e>
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
movl   $0x8083162,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f9b8 <print_linkinfo+0xd98>
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
movl   $0x8083162,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804f840 <print_linkinfo+0xc20>
movl   $0x0,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x2,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
mov    %eax,%edx
js     804f2e1 <print_linkinfo+0x6c1>
lea    -0x5c(%ebp),%edi
xor    %eax,%eax
movl   $0x0,(%edi,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     805014d <print_linkinfo+0x152d>
mov    %edx,-0x10c(%ebp)
movl   $0x10,0x8(%esp)
mov    -0xdc(%ebp),%eax
mov    %edi,(%esp)
add    $0x4,%eax
mov    %eax,0x4(%esp)
call   804b9b0 <__strcpy_chk@plt>
mov    %edi,0x8(%esp)
movl   $0x8942,0x4(%esp)
mov    -0x10c(%ebp),%edx
mov    %edx,(%esp)
mov    %edx,-0x10c(%ebp)
call   804b6e0 <ioctl@plt>
mov    -0x10c(%ebp),%edx
test   %eax,%eax
js     8050207 <print_linkinfo+0x15e7>
mov    %edx,(%esp)
call   804bb60 <close@plt>
mov    -0x4c(%ebp),%eax
jmp    804fd61 <print_linkinfo+0x1141>
xor    %edi,%edi
jmp    804fba1 <print_linkinfo+0xf81>
mov    %eax,0xc(%esp)
movl   $0x808316a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8050031 <print_linkinfo+0x1411>
mov    %eax,0xc(%esp)
movl   $0x808316a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    804ff25 <print_linkinfo+0x1305>
call   804b660 <__stack_chk_fail@plt>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8083abc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    -0x10c(%ebp),%edx
mov    %edx,(%esp)
call   804bb60 <close@plt>
jmp    804f2e1 <print_linkinfo+0x6c1>
mov    -0x114(%ebp),%eax
mov    %eax,-0x118(%ebp)
jmp    804f485 <print_linkinfo+0x865>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1bc,%esp
mov    0x1d4(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x1ac(%esp)
xor    %eax,%eax
mov    0x1d8(%esp),%ebp
movzwl 0x4(%ebx),%eax
mov    (%ebx),%ecx
lea    -0x14(%eax),%edx
cmp    $0x1,%dx
jbe    80502c0 <print_addrinfo+0x60>
xor    %esi,%esi
mov    0x1ac(%esp),%edi
xor    %gs:0x14,%edi
mov    %esi,%eax
jne    8050b5b <print_addrinfo+0x8fb>
add    $0x1bc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x18,%ecx
js     8050a41 <print_addrinfo+0x7e1>
mov    0x8095d34,%esi
test   %esi,%esi
je     80502d9 <print_addrinfo+0x79>
cmp    $0x14,%ax
jne    8050296 <print_addrinfo+0x36>
lea    0x18(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x24(%esp),%eax
mov    %ecx,0xc(%esp)
movl   $0x7,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x2c(%esp),%edx
mov    0x28(%esp),%eax
test   %edx,%edx
je     8050870 <print_addrinfo+0x610>
test   %eax,%eax
je     8050860 <print_addrinfo+0x600>
mov    0x8095ce0,%eax
test   %eax,%eax
je     8050322 <print_addrinfo+0xc2>
cmp    0x14(%ebx),%eax
jne    8050296 <print_addrinfo+0x36>
movzbl 0x13(%ebx),%eax
xor    0x8095d18,%eax
test   %eax,0x8095d1c
jne    8050296 <print_addrinfo+0x36>
movzbl 0x12(%ebx),%esi
xor    0x8095d20,%esi
and    0x8095d24,%esi
jne    8050296 <print_addrinfo+0x36>
mov    0x8095d2c,%edx
test   %edx,%edx
je     8050383 <print_addrinfo+0x123>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8050a6c <print_addrinfo+0x80c>
add    $0x4,%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804b6c0 <fnmatch@plt>
test   %eax,%eax
jne    8050298 <print_addrinfo+0x38>
cmpb   $0x0,0x8095cf0
je     80503f6 <print_addrinfo+0x196>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     80503f6 <print_addrinfo+0x196>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x44(%esp),%edi
add    $0x4,%edx
rep stos %eax,%es:(%edi)
movzbl 0x10(%ebx),%eax
movl   $0x20,0xc(%esp)
mov    %al,0x44(%esp)
movzwl -0x4(%edx),%eax
mov    %edx,0x4(%esp)
sub    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
movswl 0x8095cf2,%eax
movl   $0x8095cf0,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x44(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8050298 <print_addrinfo+0x38>
mov    0x8095ce4,%eax
test   %eax,%eax
je     805040b <print_addrinfo+0x1ab>
movzbl 0x10(%ebx),%edx
cmp    %edx,%eax
jne    8050296 <print_addrinfo+0x36>
mov    0x8095d34,%eax
test   %eax,%eax
je     80504a7 <print_addrinfo+0x247>
mov    0x8095d38,%edi
mov    (%ebx),%edx
add    $0x3,%edi
and    $0xfffffffc,%edi
lea    (%edi,%edx,1),%ecx
cmp    0x8095d3c,%ecx
jbe    8050451 <print_addrinfo+0x1f1>
call   804d910 <_start+0x3dd>
test   %eax,%eax
jne    8050b60 <print_addrinfo+0x900>
mov    0x8095d38,%edi
mov    0x8095d34,%eax
mov    (%ebx),%edx
add    $0x3,%edi
and    $0xfffffffc,%edi
add    %eax,%edi
mov    %edi,(%esp)
mov    %edx,0x8(%esp)
mov    %ebx,0x4(%esp)
call   804b5e0 <memcpy@plt>
mov    $0x15,%eax
mov    %ax,0x4(%edi)
mov    $0x1,%eax
mov    %ax,0x6(%edi)
mov    0x80941fc,%eax
add    $0x1,%eax
mov    %eax,0x80941fc
mov    %eax,0x8(%edi)
add    (%ebx),%edi
addl   $0x1,0x8095d30
sub    0x8095d34,%edi
cmpl   $0x1,0x8095ca4
mov    %edi,0x8095d38
jle    8050296 <print_addrinfo+0x36>
cmpw   $0x15,0x4(%ebx)
je     8050aa2 <print_addrinfo+0x842>
mov    0x8095ce8,%edi
test   %edi,%edi
jne    80504c6 <print_addrinfo+0x266>
mov    0x8095d34,%ecx
test   %ecx,%ecx
je     80504f4 <print_addrinfo+0x294>
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
mov    %eax,0x10(%esp)
mov    0x14(%ebx),%eax
movl   $0x808323b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x10(%ebx),%eax
cmp    $0x2,%al
je     8050ac7 <print_addrinfo+0x867>
cmp    $0xa,%al
je     8050aec <print_addrinfo+0x88c>
cmp    $0xc,%al
je     8050b11 <print_addrinfo+0x8b1>
cmp    $0x4,%al
je     8050a1c <print_addrinfo+0x7bc>
mov    %eax,0xc(%esp)
movl   $0x808326b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     80505f0 <print_addrinfo+0x390>
lea    0x4(%eax),%edx
lea    0xac(%esp),%edi
mov    %edx,0x8(%esp)
movl   $0x100,0x10(%esp)
mov    %edi,0xc(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x28(%esp),%edx
test   %edx,%edx
je     80505d0 <print_addrinfo+0x370>
movzbl 0x10(%ebx),%eax
mov    %edx,0x18(%esp)
mov    %eax,%ecx
cmp    $0x2,%cl
mov    $0x10,%ecx
mov    %al,0x1f(%esp)
mov    $0x4,%eax
cmovne %ecx,%eax
mov    %eax,0x8(%esp)
mov    0x2c(%esp),%eax
lea    0x4(%edx),%ecx
mov    %ecx,(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%eax
mov    %eax,0x4(%esp)
call   804b620 <memcmp@plt>
mov    0x14(%esp),%ecx
mov    0x18(%esp),%edx
test   %eax,%eax
jne    80509c4 <print_addrinfo+0x764>
movzbl 0x11(%ebx),%eax
movl   $0x8084d58,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x34(%esp),%eax
test   %eax,%eax
je     8050644 <print_addrinfo+0x3e4>
lea    0xac(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x8083287,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x38(%esp),%eax
test   %eax,%eax
je     8050698 <print_addrinfo+0x438>
lea    0xac(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x808328f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
lea    0x6c(%esp),%eax
movl   $0x40,0x8(%esp)
mov    %eax,0x4(%esp)
movzbl 0x13(%ebx),%eax
mov    %eax,(%esp)
call   80813d0 <rtnl_rtscope_n2a>
movl   $0x8083fe0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x12(%ebx),%eax
test   $0x1,%al
movzbl %al,%edi
je     805070c <print_addrinfo+0x4ac>
and    $0xfffffffe,%edi
cmpb   $0xa,0x10(%ebx)
mov    %ebp,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
je     8050a8d <print_addrinfo+0x82d>
movl   $0x80832a2,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
test   $0x40,%al
jne    8050973 <print_addrinfo+0x713>
test   $0x20,%al
movl   $0x0,0x14(%esp)
jne    805093f <print_addrinfo+0x6df>
test   $0x10,%al
jne    8050913 <print_addrinfo+0x6b3>
test   $0x2,%al
jne    805089e <print_addrinfo+0x63e>
test   %al,%al
js     8050879 <print_addrinfo+0x619>
mov    %ebp,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832d1,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
test   $0x8,%al
jne    80508eb <print_addrinfo+0x68b>
test   %edi,%edi
jne    80508ca <print_addrinfo+0x66a>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8050787 <print_addrinfo+0x527>
add    $0x4,%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x3c(%esp),%ebx
test   %ebx,%ebx
je     805083c <print_addrinfo+0x5dc>
mov    0x8095c90,%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebp,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832f1,(%esp)
call   804b710 <fwrite@plt>
mov    0x8(%ebx),%eax
cmp    $0xffffffff,%eax
je     805099f <print_addrinfo+0x73f>
mov    %eax,0xc(%esp)
movl   $0x8083303,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebp,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083309,(%esp)
call   804b710 <fwrite@plt>
mov    0x4(%ebx),%eax
cmp    $0xffffffff,%eax
je     8050b36 <print_addrinfo+0x8d6>
mov    0x14(%esp),%edx
mov    %eax,0xc(%esp)
test   %edx,%edx
je     8050884 <print_addrinfo+0x624>
movl   $0x808411b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebp,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebp,(%esp)
call   804b590 <fflush@plt>
jmp    8050298 <print_addrinfo+0x38>
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
mov    %eax,0x28(%esp)
jmp    8050310 <print_addrinfo+0xb0>
lea    0x0(%esi),%esi
mov    %eax,0x2c(%esp)
jmp    8050308 <print_addrinfo+0xa8>
and    $0xffffff7f,%edi
jmp    8050760 <print_addrinfo+0x500>
movl   $0x8083303,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805083c <print_addrinfo+0x5dc>
mov    %ebp,0xc(%esp)
and    $0xfffffffd,%edi
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832ca,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
jmp    8050734 <print_addrinfo+0x4d4>
mov    %edi,0xc(%esp)
movl   $0x80832e5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8050770 <print_addrinfo+0x510>
mov    %ebp,0xc(%esp)
and    $0xfffffff7,%edi
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832da,(%esp)
call   804b710 <fwrite@plt>
jmp    8050768 <print_addrinfo+0x508>
mov    %ebp,0xc(%esp)
and    $0xffffffef,%edi
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832c4,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
jmp    805072c <print_addrinfo+0x4cc>
mov    %ebp,0xc(%esp)
and    $0xffffffdf,%edi
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832b8,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
movl   $0x1,0x14(%esp)
jmp    8050724 <print_addrinfo+0x4c4>
mov    %ebp,0xc(%esp)
and    $0xffffffbf,%edi
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80832ad,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
jmp    8050714 <print_addrinfo+0x4b4>
mov    %ebp,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f2f,(%esp)
call   804b710 <fwrite@plt>
jmp    80507ec <print_addrinfo+0x58c>
movzbl 0x11(%ebx),%eax
mov    %edi,0xc(%esp)
movl   $0x100,0x10(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,0x14(%esp)
movzwl (%edx),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x1f(%esp),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
mov    0x14(%esp),%edi
movl   $0x808327a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebp,(%esp)
mov    %edi,0x10(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80505f0 <print_addrinfo+0x390>
mov    %ebp,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083261,(%esp)
call   804b710 <fwrite@plt>
jmp    8050534 <print_addrinfo+0x2d4>
mov    0x8095c40,%eax
mov    $0xffffffff,%esi
mov    %ecx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8050298 <print_addrinfo+0x38>
lea    0xac(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   807d370 <ll_idx_n2a>
mov    0x8095d2c,%edx
jmp    8050367 <print_addrinfo+0x107>
movl   $0x8083297,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x12(%ebx),%eax
jmp    805070c <print_addrinfo+0x4ac>
mov    %ebp,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    80504b2 <print_addrinfo+0x252>
mov    %ebp,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083242,(%esp)
call   804b710 <fwrite@plt>
jmp    8050534 <print_addrinfo+0x2d4>
mov    %ebp,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808324c,(%esp)
call   804b710 <fwrite@plt>
jmp    8050534 <print_addrinfo+0x2d4>
mov    %ebp,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083257,(%esp)
call   804b710 <fwrite@plt>
jmp    8050534 <print_addrinfo+0x2d4>
mov    %ebp,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f2f,(%esp)
call   804b710 <fwrite@plt>
jmp    805083c <print_addrinfo+0x5dc>
call   804b660 <__stack_chk_fail@plt>
or     $0xffffffff,%esi
jmp    8050298 <print_addrinfo+0x38>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%esp),%eax
testb  $0x1,0x12(%eax)
je     8050b80 <print_addrinfo+0x920>
xor    %eax,%eax
ret
lea    0x0(%esi),%esi
jmp    8050260 <print_addrinfo>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x8(%esp),%eax
testb  $0x1,0x12(%eax)
jne    8050ba0 <print_addrinfo+0x940>
xor    %eax,%eax
ret
lea    0x0(%esi),%esi
jmp    8050260 <print_addrinfo>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0xcc,%esp
mov    $0x8095ce0,%edx
mov    %gs:0x14,%eax
mov    %eax,0xbc(%esp)
xor    %eax,%eax
mov    %edx,%edi
cmp    $0x1,%esi
mov    %ecx,0x18(%esp)
mov    $0x19,%ecx
movl   $0x0,0x24(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x30(%esp)
rep stos %eax,%es:(%edi)
mov    0x8095c98,%eax
movl   $0x1,0x8095cec
00
movl   $0xffffffff,0x8095d40
ff
mov    %eax,0x8095ce8
mov    0x8095ca8,%eax
mov    %eax,0x8095ce4
je     805125c <print_addrinfo+0xffc>
test   %ebp,%ebp
jle    8050cd4 <print_addrinfo+0xa74>
movl   $0x0,0x1c(%esp)
lea    0x0(%esi),%esi
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x74,%edi
mov    %edi,0x14(%esp)
jne    8051040 <print_addrinfo+0xde0>
cmpb   $0x6f,0x1(%eax)
je     80510b8 <print_addrinfo+0xe58>
mov    $0x8082f55,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8051060 <print_addrinfo+0xe00>
mov    $0x8083363,%edi
mov    %eax,%esi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8051178 <print_addrinfo+0xf18>
sub    $0x1,%ebp
mov    %ebx,%esi
andl   $0xffffff7f,0x8095d20
ff
orl    $0x80,0x8095d24
00
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jg     8050c48 <print_addrinfo+0x9e8>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8050cc9 <print_addrinfo+0xa69>
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x8095ce0
jle    805157f <print_addrinfo+0x131f>
cmpl   $0x1,0x18(%esp)
je     80513d1 <print_addrinfo+0x1171>
cmpl   $0x2,0x18(%esp)
je     80512be <print_addrinfo+0x105e>
mov    0x8095ca8,%eax
movl   $0x12,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     80515ae <print_addrinfo+0x134e>
lea    0x24(%esp),%ebx
mov    %ebx,0x8(%esp)
movl   $0x804d960,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     80514d1 <print_addrinfo+0x1271>
mov    0x8095ce4,%eax
cmp    $0x11,%eax
je     805137e <print_addrinfo+0x111e>
mov    0x8095ce8,%ecx
xor    %edx,%edx
movl   $0x16,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
test   %ecx,%ecx
setne  %dl
mov    %edx,0x14(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     80515ae <print_addrinfo+0x134e>
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804d960,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     80514d1 <print_addrinfo+0x1271>
mov    %ebx,%ebp
lea    0x0(%esi),%esi
mov    0x0(%ebp),%esi
test   %esi,%esi
je     8050f3a <print_addrinfo+0xcda>
mov    0x2c(%esp),%ebx
mov    $0x1,%edx
test   %ebx,%ebx
jne    8050dba <print_addrinfo+0xb5a>
jmp    8050f0c <print_addrinfo+0xcac>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
test   %ebx,%ebx
je     8050f08 <print_addrinfo+0xca8>
mov    0x18(%esi),%eax
cmp    %eax,0x18(%ebx)
jne    8050db0 <print_addrinfo+0xb50>
mov    0x8095ce4,%eax
test   %eax,%eax
je     8050dd5 <print_addrinfo+0xb75>
movzbl 0x14(%ebx),%ecx
xor    %edx,%edx
cmp    %ecx,%eax
jne    8050db0 <print_addrinfo+0xb50>
movzbl 0x17(%ebx),%eax
xor    0x8095d18,%eax
test   %eax,0x8095d1c
jne    8050ef8 <print_addrinfo+0xc98>
movzbl 0x16(%ebx),%eax
xor    0x8095d20,%eax
test   %eax,0x8095d24
jne    8050ef8 <print_addrinfo+0xc98>
cmpb   $0x0,0x8095cf0
jne    8050e18 <print_addrinfo+0xbb8>
mov    0x8095d2c,%edx
test   %edx,%edx
je     8051210 <print_addrinfo+0xfb0>
mov    0x4(%ebx),%eax
movl   $0x7,0x4(%esp)
sub    $0x18,%eax
mov    %eax,0xc(%esp)
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8051217 <print_addrinfo+0xfb7>
cmpb   $0x0,0x8095cf0
je     8050eb8 <print_addrinfo+0xc58>
mov    0x3c(%esp),%edx
test   %edx,%edx
je     8050eb8 <print_addrinfo+0xc58>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x54(%esp),%edi
add    $0x4,%edx
rep stos %eax,%es:(%edi)
movzbl 0x14(%ebx),%eax
movl   $0x20,0xc(%esp)
mov    %al,0x54(%esp)
movzwl -0x4(%edx),%eax
mov    %edx,0x4(%esp)
sub    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
movswl 0x8095cf2,%eax
movl   $0x8095cf0,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8050ef8 <print_addrinfo+0xc98>
mov    0x8095d2c,%edx
test   %edx,%edx
je     8051210 <print_addrinfo+0xfb0>
mov    0x40(%esp),%eax
test   %eax,%eax
je     80512a0 <print_addrinfo+0x1040>
add    $0x4,%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   804b6c0 <fnmatch@plt>
test   %eax,%eax
je     8051210 <print_addrinfo+0xfb0>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ebx
xor    %edx,%edx
test   %ebx,%ebx
jne    8050dba <print_addrinfo+0xb5a>
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
je     8050f22 <print_addrinfo+0xcc2>
mov    0x8095ce4,%eax
cmp    $0x11,%eax
je     8051210 <print_addrinfo+0xfb0>
test   %eax,%eax
je     8051210 <print_addrinfo+0xfb0>
mov    (%esi),%eax
mov    %eax,0x0(%ebp)
mov    %esi,(%esp)
call   804b5b0 <free@plt>
mov    0x0(%ebp),%esi
test   %esi,%esi
jne    8050d9b <print_addrinfo+0xb3b>
mov    0x24(%esp),%esi
mov    0x8095c80,%ebp
test   %esi,%esi
je     8050fd6 <print_addrinfo+0xd76>
mov    %ebp,%edx
mov    0x14(%esp),%ebp
lea    0x0(%esi),%esi
test   %ebp,%ebp
je     8051228 <print_addrinfo+0xfc8>
cmpl   $0x11,0x8095ce4
je     8050fce <print_addrinfo+0xd6e>
mov    0x2c(%esp),%ebx
mov    0x18(%esi),%edi
test   %ebx,%ebx
jne    8050f7e <print_addrinfo+0xd1e>
jmp    8050fce <print_addrinfo+0xd6e>
xchg   %ax,%ax
mov    (%ebx),%ebx
test   %ebx,%ebx
je     8050fc8 <print_addrinfo+0xd68>
cmpw   $0x14,0x8(%ebx)
jne    8050f78 <print_addrinfo+0xd18>
cmpl   $0x13,0x4(%ebx)
jbe    8050fc8 <print_addrinfo+0xd68>
cmp    %edi,0x18(%ebx)
jne    8050f78 <print_addrinfo+0xd18>
mov    0x8095ce4,%eax
test   %eax,%eax
je     8050fa1 <print_addrinfo+0xd41>
movzbl 0x14(%ebx),%ecx
cmp    %ecx,%eax
jne    8050f78 <print_addrinfo+0xd18>
lea    0x4(%ebx),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x14(%esp)
call   8050260 <print_addrinfo>
mov    (%ebx),%ebx
mov    0x14(%esp),%edx
test   %ebx,%ebx
jne    8050f7e <print_addrinfo+0xd1e>
xchg   %ax,%ax
mov    0x8095c80,%edx
mov    (%esi),%esi
test   %esi,%esi
jne    8050f58 <print_addrinfo+0xcf8>
mov    %edx,%ebp
mov    %ebp,(%esp)
call   804b590 <fflush@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    8050fea <print_addrinfo+0xd8a>
jmp    8050ff8 <print_addrinfo+0xd98>
mov    %ebx,%eax
mov    (%eax),%ebx
mov    %eax,(%esp)
call   804b5b0 <free@plt>
test   %ebx,%ebx
jne    8050fe8 <print_addrinfo+0xd88>
mov    0x24(%esp),%eax
test   %eax,%eax
jne    805100a <print_addrinfo+0xdaa>
jmp    8051018 <print_addrinfo+0xdb8>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    (%eax),%ebx
mov    %eax,(%esp)
call   804b5b0 <free@plt>
test   %ebx,%ebx
jne    8051008 <print_addrinfo+0xda8>
xor    %eax,%eax
mov    0xbc(%esp),%edi
xor    %gs:0x14,%edi
jne    80514cc <print_addrinfo+0x126c>
add    $0xcc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x6,%ecx
mov    %eax,%esi
mov    $0x8082f55,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8051108 <print_addrinfo+0xea8>
sub    $0x1,%ebp
movl   $0x0,0x54(%esp)
lea    0x4(%ebx),%esi
je     805147b <print_addrinfo+0x121b>
mov    0x4(%ebx),%eax
movl   $0xffffffff,0x8095d1c
ff
mov    %eax,0x4(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8081460 <rtnl_rtscope_a2n>
test   %eax,%eax
jne    8051138 <print_addrinfo+0xed8>
mov    0x54(%esp),%eax
mov    %eax,0x8095d18
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jg     8050c48 <print_addrinfo+0x9e8>
jmp    8050cac <print_addrinfo+0xa4c>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2(%eax)
jne    8050c64 <print_addrinfo+0xa04>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805147b <print_addrinfo+0x121b>
mov    0x8095ce4,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
movl   $0x8095cf0,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
mov    0x8095ce4,%edi
test   %edi,%edi
jne    80510a2 <print_addrinfo+0xe42>
movzbl 0x8095cf0,%eax
mov    %eax,0x8095ce4
jmp    80510a2 <print_addrinfo+0xe42>
lea    0x0(%esi),%esi
cmpl   $0x75,0x14(%esp)
jne    8050c78 <print_addrinfo+0xa18>
cmpb   $0x70,0x1(%eax)
jne    8050c78 <print_addrinfo+0xa18>
cmpb   $0x0,0x2(%eax)
jne    8050c78 <print_addrinfo+0xa18>
movl   $0x1,0x8095d28
00
mov    %ebx,%esi
jmp    80510a2 <print_addrinfo+0xe42>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    8051168 <print_addrinfo+0xf08>
cmpb   $0x6c,0x1(%eax)
jne    8051168 <print_addrinfo+0xf08>
cmpb   $0x6c,0x2(%eax)
jne    8051168 <print_addrinfo+0xf08>
cmpb   $0x0,0x3(%eax)
jne    8051168 <print_addrinfo+0xf08>
movl   $0x0,0x8095d1c
00
mov    $0xff,%eax
jmp    805109d <print_addrinfo+0xe3d>
xchg   %ax,%ax
mov    %eax,0x4(%esp)
movl   $0x8083352,(%esp)
call   80800b0 <invarg>
mov    $0x808336b,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80511a8 <print_addrinfo+0xf48>
orl    $0x80,0x8095d20
00
mov    %ebx,%esi
orl    $0x80,0x8095d24
00
jmp    80510a2 <print_addrinfo+0xe42>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8083375,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80511f8 <print_addrinfo+0xf98>
mov    $0x808337f,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80511f8 <print_addrinfo+0xf98>
mov    $0x8083389,%edi
mov    %eax,%esi
mov    $0x8,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8051349 <print_addrinfo+0x10e9>
andl   $0xfffffffe,0x8095d20
mov    %ebx,%esi
orl    $0x1,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
lea    0x0(%esi,%eiz,1),%esi
orl    $0x1,0x8095d20
mov    %ebx,%esi
orl    $0x1,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
lea    0x0(%esi),%esi
mov    %esi,%ebp
jmp    8050d90 <print_addrinfo+0xb30>
mov    0x38(%esp),%eax
mov    %eax,0x3c(%esp)
jmp    8050e49 <print_addrinfo+0xbe9>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%esi),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804ec20 <print_linkinfo>
mov    0x8095c80,%edx
test   %eax,%eax
je     8050f60 <print_addrinfo+0xd00>
mov    (%esi),%esi
test   %esi,%esi
jne    8050f58 <print_addrinfo+0xcf8>
jmp    8050fd4 <print_addrinfo+0xd74>
test   %ebp,%ebp
xchg   %ax,%ax
jle    8051550 <print_addrinfo+0x12f0>
cmp    $0x11,%eax
jne    8050c3a <print_addrinfo+0x9da>
mov    0x8095c40,%eax
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083334,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805101a <print_addrinfo+0xdba>
xchg   %ax,%ax
lea    0x7c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   807d370 <ll_idx_n2a>
mov    0x8095d2c,%edx
jmp    8050ed5 <print_addrinfo+0xc75>
movl   $0x1,(%esp)
call   804bb00 <isatty@plt>
test   %eax,%eax
jne    805144a <print_addrinfo+0x11ea>
movl   $0x4,0x8(%esp)
movl   $0x8094208,0x4(%esp)
movl   $0x1,(%esp)
call   804b8a0 <write@plt>
cmp    $0x4,%eax
jne    8051480 <print_addrinfo+0x1220>
mov    0x8095ca8,%eax
movl   $0x16,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     80515ae <print_addrinfo+0x134e>
mov    0x8095c80,%eax
movl   $0x804d9e0,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     80513a0 <print_addrinfo+0x1140>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
mov    $0x8083391,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805138b <print_addrinfo+0x112b>
mov    $0x808339b,%edi
mov    $0xb,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80513db <print_addrinfo+0x117b>
orl    $0x20,0x8095d20
mov    %ebx,%esi
orl    $0x20,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
movl   $0x0,0x14(%esp)
jmp    8050f3a <print_addrinfo+0xcda>
orl    $0x40,0x8095d20
mov    %ebx,%esi
orl    $0x40,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833e4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804dd10 <_start+0x7dd>
jmp    805101a <print_addrinfo+0xdba>
mov    $0x8082fac,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8051410 <print_addrinfo+0x11b0>
mov    $0x8082fb1,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8051425 <print_addrinfo+0x11c5>
orl    $0x2,0x8095d20
mov    %ebx,%esi
orl    $0x2,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
orl    $0x10,0x8095d20
mov    %ebx,%esi
orl    $0x10,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
mov    $0x80833a6,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80514a7 <print_addrinfo+0x1247>
orl    $0x8,0x8095d20
mov    %ebx,%esi
orl    $0x8,0x8095d24
jmp    80510a2 <print_addrinfo+0xe42>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083cd0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083cf8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    805146f <print_addrinfo+0x120f>
mov    $0x8082d31,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8051502 <print_addrinfo+0x12a2>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805147b <print_addrinfo+0x121b>
mov    0x4(%ebx),%eax
mov    %eax,0x8095d2c
jmp    80510a2 <print_addrinfo+0xe42>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    $0x808ca53,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80515c6 <print_addrinfo+0x1366>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805147b <print_addrinfo+0x121b>
mov    0x4(%ebx),%eax
movl   $0x8095d40,(%esp)
mov    %eax,0x4(%esp)
call   8081ab0 <rtnl_group_a2n>
test   %eax,%eax
je     80510a2 <print_addrinfo+0xe42>
mov    0x4(%ebx),%eax
movl   $0x80833b0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083319,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805101a <print_addrinfo+0xdba>
mov    0x1c(%esp),%eax
movl   $0x80833c7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    805101a <print_addrinfo+0xdba>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
cmpl   $0x64,0x14(%esp)
jne    80515f0 <print_addrinfo+0x1390>
cmpb   $0x65,0x1(%eax)
jne    80515f0 <print_addrinfo+0x1390>
cmpb   $0x76,0x2(%eax)
jne    80515f0 <print_addrinfo+0x1390>
cmpb   $0x0,0x3(%eax)
jne    80515f0 <print_addrinfo+0x1390>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805147b <print_addrinfo+0x121b>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051619 <print_addrinfo+0x13b9>
mov    0x1c(%esp),%esi
mov    (%ebx),%eax
test   %esi,%esi
jne    805161e <print_addrinfo+0x13be>
mov    %eax,0x1c(%esp)
mov    %ebx,%esi
jmp    80510a2 <print_addrinfo+0xe42>
call   804da50 <_start+0x51d>
mov    %eax,0x4(%esp)
movl   $0x8085e82,(%esp)
call   8080150 <duparg2>
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x14(%ebx),%eax
movl   $0x8083406,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8050260 <print_addrinfo>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x8(%esp),%edx
xor    %ecx,%ecx
mov    0x4(%esp),%eax
movl   $0x11,0x8095ca8
00
movl   $0x1,0x8095cc0
00
jmp    8050bb0 <print_addrinfo+0x950>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    $0x8095ce0,%edx
xor    %eax,%eax
push   %edi
mov    $0x19,%ecx
mov    %edx,%edi
rep stos %eax,%es:(%edi)
mov    0x8(%esp),%eax
pop    %edi
mov    %eax,0x8095ce8
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    80518a8 <do_ipaddr+0x1d8>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051830 <do_ipaddr+0x160>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805186e <do_ipaddr+0x19e>
mov    (%ebx),%eax
cmpb   $0x63,(%eax)
je     8051850 <do_ipaddr+0x180>
movl   $0x8083418,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80518b8 <do_ipaddr+0x1e8>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80518d0 <do_ipaddr+0x200>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051890 <do_ipaddr+0x1c0>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051890 <do_ipaddr+0x1c0>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051890 <do_ipaddr+0x1c0>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80518e8 <do_ipaddr+0x218>
movl   $0x8083434,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80518fd <do_ipaddr+0x22d>
movl   $0x8083439,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805196f <do_ipaddr+0x29f>
movl   $0x8083442,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051941 <do_ipaddr+0x271>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8051912 <do_ipaddr+0x242>
call   804da50 <_start+0x51d>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
mov    $0x600,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x14,%al
pop    %ebx
pop    %esi
jmp    804e010 <_start+0xadd>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x68,0x1(%eax)
jne    8051724 <do_ipaddr+0x54>
cmpb   $0x67,0x2(%eax)
jne    8051724 <do_ipaddr+0x54>
cmpb   $0x0,0x3(%eax)
jne    8051724 <do_ipaddr+0x54>
add    $0x4,%ebx
mov    $0x100,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x14,%eax
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    804e010 <_start+0xadd>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %ecx,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8050bb0 <print_addrinfo+0x950>
lea    0x0(%esi),%esi
add    $0x14,%esp
xor    %ecx,%ecx
pop    %ebx
xor    %edx,%edx
pop    %esi
xor    %eax,%eax
jmp    8050bb0 <print_addrinfo+0x950>
add    $0x4,%ebx
mov    $0x500,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    805183f <do_ipaddr+0x16f>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
xor    %edx,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x15,%al
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    804e010 <_start+0xadd>
add    $0x14,%esp
mov    $0x1,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8050bb0 <print_addrinfo+0x950>
add    $0x14,%esp
mov    $0x2,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8050bb0 <print_addrinfo+0x950>
mov    (%ebx),%eax
movl   $0x8083d18,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   804bbc0 <__sprintf_chk@plt+0x10>
test   %eax,%eax
jne    8051935 <do_ipaddr+0x265>
movl   $0x0,0x8(%esp)
movl   $0x804df60,0x4(%esp)
mov    0x8095c70,%eax
mov    %eax,(%esp)
call   807e830 <rtnl_from_file>
mov    %eax,(%esp)
call   804b800 <exit@plt>
call   804bbc0 <__sprintf_chk@plt+0x10>
test   %eax,%eax
jne    8051935 <do_ipaddr+0x265>
movl   $0x0,0x8(%esp)
movl   $0x8051630,0x4(%esp)
jmp    805195a <do_ipaddr+0x28a>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x130,%esp
mov    0x144(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
mov    0x148(%esp),%esi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%ecx
lea    -0x48(%eax),%edx
xor    %eax,%eax
cmp    $0x1,%dx
jbe    80519e8 <print_addrlabel+0x58>
mov    0x12c(%esp),%edi
xor    %gs:0x14,%edi
jne    8051b26 <print_addrlabel+0x196>
add    $0x130,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
sub    $0x1c,%ecx
js     8051b1c <print_addrlabel+0x18c>
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %ecx,0xc(%esp)
movl   $0x2,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
cmpw   $0x49,0x4(%ebx)
je     8051ad0 <print_addrlabel+0x140>
mov    0x24(%esp),%eax
test   %eax,%eax
je     8051a74 <print_addrlabel+0xe4>
lea    0x2c(%esp),%edx
movzbl 0x12(%ebx),%edi
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
mov    %edi,0x10(%esp)
movl   $0x8085e19,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%ebx),%eax
test   %eax,%eax
jne    8051aa8 <print_addrlabel+0x118>
mov    0x28(%esp),%eax
test   %eax,%eax
je     8051a89 <print_addrlabel+0xf9>
cmpw   $0x8,(%eax)
je     8051af8 <print_addrlabel+0x168>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
jmp    80519c7 <print_addrlabel+0x37>
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8051a7b <print_addrlabel+0xeb>
xchg   %ax,%ax
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    8051a1b <print_addrlabel+0x8b>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
movl   $0x8083d6c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8051a89 <print_addrlabel+0xf9>
mov    $0xffffffff,%eax
jmp    80519c7 <print_addrlabel+0x37>
call   804b660 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x64(%esp),%ebx
mov    (%ebx),%eax
sub    $0x1c,%eax
js     8051bd8 <print_addrlabel+0x248>
mov    %eax,0xc(%esp)
lea    0x1c(%ebx),%eax
xor    %edi,%edi
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
movl   $0x2,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x24(%esp),%ecx
test   %ecx,%ecx
je     8051bc8 <print_addrlabel+0x238>
mov    $0x49,%eax
mov    $0x1,%edx
lea    0x2c(%esp),%esi
mov    %ax,0x4(%ebx)
mov    %dx,0x6(%ebx)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   807d910 <rtnl_open>
test   %eax,%eax
js     8051bd8 <print_addrlabel+0x248>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8051be0 <print_addrlabel+0x250>
mov    %esi,(%esp)
call   807d670 <rtnl_close>
add    $0x50,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%edi
jmp    8051bc8 <print_addrlabel+0x238>
nop
mov    $0xfffffffe,%edi
jmp    8051bc8 <print_addrlabel+0x238>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x8095ca8,%edx
mov    $0xa,%ecx
test   %edx,%edx
cmove  %ecx,%edx
test   %eax,%eax
jg     8051c98 <print_addrlabel+0x308>
movl   $0x4a,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8051c50 <print_addrlabel+0x2c0>
mov    0x8095c80,%eax
movl   $0x8051990,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
xor    %edx,%edx
test   %eax,%eax
js     8051c68 <print_addrlabel+0x2d8>
mov    %edx,%eax
add    $0x1c,%esp
ret
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
mov    $0x1,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
nop
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0x1,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083d98,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x47c,%esp
mov    $0x107,%ecx
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
lea    0x50(%esp),%edi
cmp    $0x48,%esi
movl   $0xffffffff,0x24(%esp)
rep stos %eax,%es:(%edi)
lea    0x28(%esp),%edi
mov    %si,0x54(%esp)
movl   $0x1c,0x50(%esp)
mov    $0xa,%cl
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    $0x1,%edi
mov    %di,0x56(%esp)
mov    %al,0x60(%esp)
je     8051f2f <print_addrlabel+0x59f>
test   %ebp,%ebp
jle    8051f3e <print_addrlabel+0x5ae>
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
jmp    8051d8c <print_addrlabel+0x3fc>
lea    0x0(%esi),%esi
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8051f6a <print_addrlabel+0x5da>
mov    0x4(%ebx),%eax
mov    %eax,%edx
mov    %eax,0x18(%esp)
mov    0x8095ca8,%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jle    8051e58 <print_addrlabel+0x4c8>
mov    (%ebx),%eax
mov    $0x8085fe2,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8051d50 <print_addrlabel+0x3c0>
cmpb   $0x64,(%eax)
jne    8051de8 <print_addrlabel+0x458>
cmpb   $0x65,0x1(%eax)
jne    8051de8 <print_addrlabel+0x458>
cmpb   $0x76,0x2(%eax)
jne    8051de8 <print_addrlabel+0x458>
cmpb   $0x0,0x3(%eax)
jne    8051de8 <print_addrlabel+0x458>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8051f6a <print_addrlabel+0x5da>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x64(%esp)
jne    8051d7e <print_addrlabel+0x3ee>
mov    0x4(%ebx),%eax
movl   $0x8083d76,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
mov    $0x8082d31,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8051e48 <print_addrlabel+0x4b8>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8051f6a <print_addrlabel+0x5da>
mov    0x4(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x1c(%esp)
mov    %eax,0x4(%esp)
lea    0x24(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8051e32 <print_addrlabel+0x4a2>
cmpl   $0xffffffff,0x24(%esp)
jne    8051d7e <print_addrlabel+0x3ee>
mov    0x4(%ebx),%eax
movl   $0x8083d86,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
sub    $0x1,%ebp
mov    %ebx,%esi
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jg     8051d8c <print_addrlabel+0x3fc>
mov    0x18(%esp),%edx
test   %edx,%edx
je     8051f3e <print_addrlabel+0x5ae>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8051f6f <print_addrlabel+0x5df>
mov    0x24(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
movzbl 0x29(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movzwl 0x2a(%esp),%eax
cmpb   $0x0,0x60(%esp)
mov    %al,0x62(%esp)
je     8051f28 <print_addrlabel+0x598>
lea    0x50(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
sar    $0x1f,%eax
and    $0x2,%eax
mov    0x46c(%esp),%edi
xor    %gs:0x14,%edi
jne    8051f9e <print_addrlabel+0x60e>
add    $0x47c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movb   $0xa,0x60(%esp)
jmp    8051ed1 <print_addrlabel+0x541>
mov    $0x601,%ecx
mov    %cx,0x56(%esp)
jmp    8051d33 <print_addrlabel+0x3a3>
mov    0x8095c40,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083dcc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8051f03 <print_addrlabel+0x573>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083e04,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8051f03 <print_addrlabel+0x573>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
xor    %eax,%eax
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    8051ff3 <do_ipaddrlabel+0x43>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8051ff0 <do_ipaddrlabel+0x40>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8052000 <do_ipaddrlabel+0x50>
lea    -0x1(%esi),%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8051bf0 <print_addrlabel+0x260>
xchg   %ax,%ax
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8052098 <do_ipaddrlabel+0xe8>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8052110 <do_ipaddrlabel+0x160>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%edi
je     80520b0 <do_ipaddrlabel+0x100>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8052120 <do_ipaddrlabel+0x170>
mov    0x8095c40,%eax
movl   $0x5b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083e74,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
lea    0x4(%ebx),%ecx
mov    $0x48,%al
lea    -0x1(%esi),%edx
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8051cd0 <print_addrlabel+0x340>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095ca8,%eax
mov    $0xa,%edx
test   %eax,%eax
cmove  %edx,%eax
cmp    $0x1,%esi
jne    8052191 <do_ipaddrlabel+0x1e1>
movl   $0x4a,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     805214f <do_ipaddrlabel+0x19f>
movl   $0x0,0x8(%esp)
movl   $0x8051b30,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     8052162 <do_ipaddrlabel+0x1b2>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x4(%ebx),%ecx
mov    $0x49,%al
lea    -0x1(%esi),%edx
jmp    80520a0 <do_ipaddrlabel+0xf0>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
movl   $0x8083ed0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
mov    $0x1,%edi
call   804b700 <perror@plt>
jmp    8052104 <do_ipaddrlabel+0x154>
mov    0x8095c40,%eax
mov    $0x1,%edi
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8052104 <do_ipaddrlabel+0x154>
mov    0x8095c40,%eax
mov    $0xffffffff,%edi
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083e3c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8052104 <do_ipaddrlabel+0x154>
sub    $0x1c,%esp
mov    0x8095d90,%eax
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
mov    0x8095d8c,%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
js     80521f5 <do_ipaddrlabel+0x245>
movl   $0x0,0x8095d90
00
xor    %eax,%eax
add    $0x1c,%esp
ret
movl   $0x8082e9f,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    80521f1 <do_ipaddrlabel+0x241>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084570,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808459c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f03,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f1c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x38,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80845bc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80845f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084630,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084660,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80846a4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80846e4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084718,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084744,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084768,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084794,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80847c8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80847f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808482c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808486c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80848a0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80848e0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084924,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084968,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f36,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80849b0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80849f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084a28,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084a60,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084a8c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084ab0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f54,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f6a,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%ebx
orw    $0x405,0x6(%ebx)
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    %ebx,0x10(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
mov    %eax,%ebx
jns    80526f4 <do_ipaddrlabel+0x744>
call   804b970 <__errno_location@plt>
cmpl   $0x11,(%eax)
mov    $0x0,%eax
cmove  %eax,%ebx
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xcc,%esp
movzbl 0x14(%eax),%ecx
mov    0x3c(%edx),%eax
test   %eax,%eax
je     8052bb0 <do_ipaddrlabel+0xc00>
mov    0x4(%eax),%eax
movzbl 0x10(%ebx),%esi
mov    %esi,%ecx
cmp    $0xa,%cl
je     8052b50 <do_ipaddrlabel+0xba0>
mov    0x18(%ebx),%ecx
shr    $0x9,%ecx
xor    $0x1,%ecx
and    $0x1,%ecx
cmp    %ecx,0x8095d84
je     8052b40 <do_ipaddrlabel+0xb90>
nop
mov    0x8095d80,%ecx
test   %ecx,%ecx
je     805275a <do_ipaddrlabel+0x7aa>
cmp    %eax,%ecx
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x15(%ebx),%eax
xor    0x8095d98,%eax
test   %eax,0x8095d9c
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x16(%ebx),%eax
xor    0x8095da0,%eax
test   %eax,0x8095da4
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x17(%ebx),%eax
xor    0x8095da8,%eax
test   %eax,0x8095dac
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x13(%ebx),%eax
xor    0x8095db0,%eax
test   %eax,0x8095db4
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095e28,%eax
test   %al,%al
mov    %al,0x10(%esp)
jne    8052bb8 <do_ipaddrlabel+0xc08>
movzbl 0x8095e50,%eax
test   %al,%al
mov    %al,0x1a(%esp)
je     80527f8 <do_ipaddrlabel+0x848>
mov    %esi,%eax
cmp    0x1a(%esp),%al
jne    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095e52,%eax
test   %ax,%ax
js     80527f8 <do_ipaddrlabel+0x848>
movzbl 0x11(%ebx),%ecx
cmp    %ecx,%eax
jl     8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095e78,%eax
test   %al,%al
mov    %al,0x14(%esp)
je     8052826 <do_ipaddrlabel+0x876>
mov    %esi,%eax
cmp    0x14(%esp),%al
jne    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095e7a,%ecx
movzbl 0x12(%ebx),%eax
cmp    %eax,%ecx
jg     8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095ea0,%eax
test   %al,%al
mov    %al,0x1b(%esp)
je     8052859 <do_ipaddrlabel+0x8a9>
mov    %esi,%eax
cmp    0x1b(%esp),%al
jne    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095ea2,%eax
test   %ax,%ax
js     8052859 <do_ipaddrlabel+0x8a9>
movzbl 0x12(%ebx),%ecx
cmp    %ecx,%eax
jl     8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095e00,%eax
test   %al,%al
je     805286e <do_ipaddrlabel+0x8be>
mov    %esi,%ecx
cmp    %al,%cl
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095dd8,%eax
test   %al,%al
je     8052883 <do_ipaddrlabel+0x8d3>
mov    %esi,%ecx
cmp    %al,%cl
jne    8052b40 <do_ipaddrlabel+0xb90>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x20(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x4(%edx),%ecx
mov    %esi,%eax
mov    %al,0x20(%esp)
test   %ecx,%ecx
je     80528ce <do_ipaddrlabel+0x91e>
movzbl 0x11(%ebx),%eax
add    $0x4,%ecx
movl   $0x20,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,0x1c(%esp)
add    $0x7,%eax
sar    $0x3,%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
mov    0x1c(%esp),%edx
cmpb   $0x0,0x14(%esp)
jne    80528dc <do_ipaddrlabel+0x92c>
cmpb   $0x0,0x1b(%esp)
je     8052927 <do_ipaddrlabel+0x977>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x48(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x8(%edx),%ecx
mov    %esi,%eax
mov    %al,0x48(%esp)
test   %ecx,%ecx
je     8052927 <do_ipaddrlabel+0x977>
movzbl 0x12(%ebx),%eax
add    $0x4,%ecx
movl   $0x20,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,0x14(%esp)
add    $0x7,%eax
sar    $0x3,%eax
mov    %eax,0x8(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
mov    0x14(%esp),%edx
cmpw   $0x0,0x8095e02
jle    805297d <do_ipaddrlabel+0x9cd>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x70(%esp),%edi
rep stos %eax,%es:(%edi)
mov    %esi,%eax
mov    %al,0x70(%esp)
mov    0x14(%edx),%eax
test   %eax,%eax
je     805297d <do_ipaddrlabel+0x9cd>
test   %ebp,%ebp
lea    0x7(%ebp),%ecx
cmovns %ebp,%ecx
add    $0x4,%eax
sar    $0x3,%ecx
mov    %eax,0x4(%esp)
lea    0x78(%esp),%eax
movl   $0x20,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x14(%esp)
call   804b7e0 <__memcpy_chk@plt>
mov    0x14(%esp),%edx
cmpw   $0x0,0x8095dda
jle    80529dc <do_ipaddrlabel+0xa2c>
xor    %eax,%eax
mov    $0xa,%ecx
lea    0x98(%esp),%edi
rep stos %eax,%es:(%edi)
mov    %esi,%eax
mov    %al,0x98(%esp)
mov    0x1c(%edx),%eax
test   %eax,%eax
je     80529dc <do_ipaddrlabel+0xa2c>
test   %ebp,%ebp
lea    0x7(%ebp),%ecx
cmovns %ebp,%ecx
add    $0x4,%eax
sar    $0x3,%ecx
mov    %eax,0x4(%esp)
lea    0xa0(%esp),%eax
movl   $0x20,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x14(%esp)
call   804b7e0 <__memcpy_chk@plt>
mov    0x14(%esp),%edx
cmpb   $0x0,0x10(%esp)
movzbl 0x1a(%esp),%eax
jne    8052bed <do_ipaddrlabel+0xc3d>
test   %al,%al
je     8052a26 <do_ipaddrlabel+0xa76>
cmpw   $0x0,0x8095e52
js     8052a26 <do_ipaddrlabel+0xa76>
movzbl 0x11(%ebx),%eax
movl   $0x8095e50,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
mov    0x10(%esp),%edx
test   %eax,%eax
jne    8052b40 <do_ipaddrlabel+0xb90>
cmpb   $0x0,0x8095e78
jne    8052c28 <do_ipaddrlabel+0xc78>
cmpb   $0x0,0x8095ea0
je     8052a72 <do_ipaddrlabel+0xac2>
cmpw   $0x0,0x8095ea2
js     8052a72 <do_ipaddrlabel+0xac2>
movzbl 0x12(%ebx),%eax
movl   $0x8095ea0,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
mov    0x10(%esp),%edx
test   %eax,%eax
jne    8052b40 <do_ipaddrlabel+0xb90>
cmpb   $0x0,0x8095e00
jne    8052c5c <do_ipaddrlabel+0xcac>
cmpb   $0x0,0x8095dd8
jne    8052c90 <do_ipaddrlabel+0xce0>
mov    0x8095dd4,%eax
test   %eax,%eax
je     8052ab1 <do_ipaddrlabel+0xb01>
mov    0x2c(%edx),%ecx
test   %ecx,%ecx
je     8052cc7 <do_ipaddrlabel+0xd17>
mov    0x4(%ecx),%ecx
xor    0x8095dd0,%ecx
test   %eax,%ecx
jne    8052b40 <do_ipaddrlabel+0xb90>
mov    0x8095dbc,%eax
test   %eax,%eax
je     8052ad2 <do_ipaddrlabel+0xb22>
mov    0xc(%edx),%ecx
test   %ecx,%ecx
je     8052cce <do_ipaddrlabel+0xd1e>
mov    0x4(%ecx),%ecx
xor    0x8095db8,%ecx
test   %eax,%ecx
jne    8052b40 <do_ipaddrlabel+0xb90>
mov    0x8095dc4,%eax
test   %eax,%eax
je     8052af3 <do_ipaddrlabel+0xb43>
mov    0x10(%edx),%ecx
test   %ecx,%ecx
je     8052cd5 <do_ipaddrlabel+0xd25>
mov    0x4(%ecx),%ecx
xor    0x8095dc0,%ecx
test   %eax,%ecx
jne    8052b40 <do_ipaddrlabel+0xb90>
mov    0x8095dcc,%eax
test   %eax,%eax
je     8052b14 <do_ipaddrlabel+0xb64>
mov    0x40(%edx),%ecx
test   %ecx,%ecx
je     8052cdc <do_ipaddrlabel+0xd2c>
mov    0x4(%ecx),%ecx
xor    0x8095dc8,%ecx
test   %eax,%ecx
jne    8052b40 <do_ipaddrlabel+0xb90>
cmpl   $0x0,0x8095d8c
mov    $0x1,%eax
je     8052b42 <do_ipaddrlabel+0xb92>
cmpw   $0xa,0x10(%ebx)
jne    8052b42 <do_ipaddrlabel+0xb92>
cmpb   $0x7,0x17(%ebx)
jne    8052b42 <do_ipaddrlabel+0xb92>
mov    0x18(%edx),%edx
test   %edx,%edx
je     8052b42 <do_ipaddrlabel+0xb92>
cmpl   $0xffffffff,0x4(%edx)
jne    8052b42 <do_ipaddrlabel+0xb92>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0xcc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0xfe,%eax
je     8052b61 <do_ipaddrlabel+0xbb1>
movl   $0x1,0x8095d60
00
mov    0x18(%ebx),%ecx
shr    $0x9,%ecx
xor    $0x1,%ecx
and    $0x1,%ecx
cmp    %ecx,0x8095d84
je     8052b40 <do_ipaddrlabel+0xb90>
mov    0x8095d60,%ecx
test   %ecx,%ecx
jne    8052748 <do_ipaddrlabel+0x798>
mov    0x8095d80,%eax
test   %eax,%eax
je     805275a <do_ipaddrlabel+0x7aa>
cmp    $0xff,%eax
je     8052bde <do_ipaddrlabel+0xc2e>
cmp    $0xfe,%eax
jne    8052b40 <do_ipaddrlabel+0xb90>
cmpb   $0x2,0x17(%ebx)
jne    805275a <do_ipaddrlabel+0x7aa>
jmp    8052b40 <do_ipaddrlabel+0xb90>
lea    0x0(%esi),%esi
movzbl %cl,%eax
jmp    8052720 <do_ipaddrlabel+0x770>
mov    %esi,%eax
cmp    0x10(%esp),%al
xchg   %ax,%ax
jne    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095e2a,%ecx
movzbl 0x11(%ebx),%eax
cmp    %eax,%ecx
jle    80527c5 <do_ipaddrlabel+0x815>
jmp    8052b40 <do_ipaddrlabel+0xb90>
cmpb   $0x2,0x17(%ebx)
jne    8052b40 <do_ipaddrlabel+0xb90>
jmp    805275a <do_ipaddrlabel+0x7aa>
movswl 0x8095e2a,%eax
movl   $0x8095e28,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8052b40 <do_ipaddrlabel+0xb90>
movzbl 0x8095e50,%eax
mov    0x10(%esp),%edx
jmp    80529ec <do_ipaddrlabel+0xa3c>
movswl 0x8095e7a,%eax
movl   $0x8095e78,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
mov    0x10(%esp),%edx
test   %eax,%eax
je     8052a33 <do_ipaddrlabel+0xa83>
jmp    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095e02,%eax
movl   $0x8095e00,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x70(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
mov    0x10(%esp),%edx
test   %eax,%eax
je     8052a7f <do_ipaddrlabel+0xacf>
jmp    8052b40 <do_ipaddrlabel+0xb90>
movswl 0x8095dda,%eax
movl   $0x8095dd8,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0x8(%esp)
lea    0x98(%esp),%eax
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
mov    0x10(%esp),%edx
test   %eax,%eax
je     8052a8c <do_ipaddrlabel+0xadc>
jmp    8052b40 <do_ipaddrlabel+0xb90>
xor    %ecx,%ecx
jmp    8052aa3 <do_ipaddrlabel+0xaf3>
xor    %ecx,%ecx
jmp    8052ac8 <do_ipaddrlabel+0xb18>
xor    %ecx,%ecx
jmp    8052ae9 <do_ipaddrlabel+0xb39>
xor    %ecx,%ecx
xchg   %ax,%ax
jmp    8052b0a <do_ipaddrlabel+0xb5a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x24c,%esp
mov    0x264(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x23c(%esp)
xor    %eax,%eax
mov    0x268(%esp),%edi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%ecx
lea    -0x18(%eax),%edx
cmp    $0x1,%dx
ja     80533d0 <print_route+0x6e0>
mov    0x8095d8c,%edx
test   %edx,%edx
je     8052d60 <print_route+0x70>
cmp    $0x18,%ax
je     8052d60 <print_route+0x70>
xor    %eax,%eax
mov    0x23c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8054344 <print_route+0x1654>
add    $0x24c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%ecx
js     805429f <print_route+0x15af>
movzbl 0x10(%ebx),%eax
mov    $0x80,%esi
cmp    $0xa,%al
je     8052d94 <print_route+0xa4>
cmp    $0x2,%al
mov    $0x20,%si
je     8052d94 <print_route+0xa4>
cmp    $0xc,%al
mov    $0x10,%si
je     8052d94 <print_route+0xa4>
cmp    $0x4,%al
mov    $0x50,%si
mov    $0xffffffff,%eax
cmovne %eax,%esi
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x74(%esp),%eax
mov    %ecx,0xc(%esp)
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0xb0(%esp),%eax
movzbl 0x14(%ebx),%edx
test   %eax,%eax
je     8053938 <print_route+0xc48>
mov    0x4(%eax),%eax
mov    %eax,0x1c(%esp)
mov    %esi,%ecx
mov    %ebx,%eax
lea    0x74(%esp),%edx
call   8052700 <do_ipaddrlabel+0x750>
test   %eax,%eax
je     8052d3a <print_route+0x4a>
mov    0x8095d8c,%edx
test   %edx,%edx
je     8052e7f <print_route+0x18f>
mov    0x8095d90,%eax
mov    (%ebx),%ecx
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%eax,%ecx,1),%ebp
cmp    0x8095d94,%ebp
jbe    8052e28 <print_route+0x138>
call   80521c0 <do_ipaddrlabel+0x210>
test   %eax,%eax
jne    80541eb <print_route+0x14fb>
mov    0x8095d90,%eax
mov    0x8095d8c,%edx
mov    (%ebx),%ecx
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%edx,%eax,1),%ebp
mov    %ecx,0x8(%esp)
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
call   804b5e0 <memcpy@plt>
mov    $0x1,%eax
mov    $0x19,%ecx
mov    %ax,0x6(%ebp)
mov    0x80941fc,%eax
mov    %cx,0x4(%ebp)
add    $0x1,%eax
mov    %eax,0x80941fc
mov    %eax,0x8(%ebp)
add    (%ebx),%ebp
addl   $0x1,0x8095d88
sub    0x8095d8c,%ebp
cmpl   $0x1,0x8095ca4
mov    %ebp,0x8095d90
jle    8052d3a <print_route+0x4a>
cmpw   $0x19,0x4(%ebx)
je     8053bd1 <print_route+0xee1>
movzbl 0x17(%ebx),%eax
cmp    $0x1,%al
je     8052ea0 <print_route+0x1b0>
mov    0x8095da8,%edx
test   %edx,%edx
je     8053a98 <print_route+0xda8>
mov    0x78(%esp),%eax
test   %eax,%eax
je     8053ba8 <print_route+0xeb8>
lea    0x13c(%esp),%edx
movzbl 0x11(%ebx),%ebp
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    %esi,%ebp
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
je     8053a70 <print_route+0xd80>
call   8080470 <rt_addr_n2a>
mov    %ebp,0x10(%esp)
movl   $0x8088797,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x7c(%esp),%eax
test   %eax,%eax
je     8053b78 <print_route+0xe88>
lea    0x13c(%esp),%edx
movzbl 0x12(%ebx),%ebp
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    %esi,%ebp
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
je     8053a48 <print_route+0xd58>
call   8080470 <rt_addr_n2a>
mov    %ebp,0x10(%esp)
movl   $0x8083fa1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x13(%ebx),%eax
test   %al,%al
je     8052fb8 <print_route+0x2c8>
cmpl   $0xffffffff,0x8095db4
je     8052fb8 <print_route+0x2c8>
lea    0xfc(%esp),%edx
movl   $0x40,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80818e0 <rtnl_dsfield_n2a>
movl   $0x8083fc1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x88(%esp),%eax
test   %eax,%eax
je     805301a <print_route+0x32a>
movswl 0x8095e02,%edx
cmp    %esi,%edx
je     805301a <print_route+0x32a>
lea    0x13c(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x8084173,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x84(%esp),%eax
test   %eax,%eax
je     8053055 <print_route+0x365>
cmpl   $0xffffffff,0x8095dc4
je     8053055 <print_route+0x365>
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
testb  $0x2,0x19(%ebx)
jne    8053101 <print_route+0x411>
cmpl   $0xfe,0x1c(%esp)
je     80530ad <print_route+0x3bd>
mov    0x8095d80,%eax
test   %eax,%eax
jne    80530ad <print_route+0x3bd>
mov    0x1c(%esp),%eax
lea    0xbc(%esp),%ebp
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8081700 <rtnl_rttable_n2a>
movl   $0x8083fc9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x15(%ebx),%eax
cmp    $0x3,%al
je     80530f5 <print_route+0x405>
cmpl   $0xffffffff,0x8095d9c
je     80530f5 <print_route+0x405>
lea    0xbc(%esp),%ebp
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8081220 <rtnl_rtprot_n2a>
movl   $0x8083fd4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x16(%ebx),%eax
test   %al,%al
jne    80538c8 <print_route+0xbd8>
mov    0x90(%esp),%eax
test   %eax,%eax
je     8053163 <print_route+0x473>
movswl 0x8095dda,%edx
cmp    %esi,%edx
je     8053163 <print_route+0x473>
lea    0x13c(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x8083fea,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8c(%esp),%eax
test   %eax,%eax
je     805318d <print_route+0x49d>
mov    0x4(%eax),%eax
movl   $0x8083ff3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebx),%eax
test   $0x1,%al
jne    8053948 <print_route+0xc58>
test   $0x4,%al
jne    80539c0 <print_route+0xcd0>
test   $0x2,%al
jne    8053998 <print_route+0xca8>
test   $0x1,%ah
jne    8053970 <print_route+0xc80>
mov    0xb4(%esp),%eax
test   %eax,%eax
je     80531e8 <print_route+0x4f8>
mov    0x4(%eax),%eax
test   %eax,%eax
je     80531e8 <print_route+0x4f8>
cmp    $0xf,%eax
mov    %eax,0xc(%esp)
jbe    8053918 <print_route+0xc28>
movl   $0x8084020,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xa0(%esp),%eax
test   %eax,%eax
je     805326e <print_route+0x57e>
cmpl   $0xffffffff,0x8095dd4
je     805326e <print_route+0x57e>
mov    0x4(%eax),%eax
mov    %eax,%esi
movzwl %ax,%edx
shr    $0x10,%esi
test   %esi,%esi
jne    8053860 <print_route+0xb70>
movl   $0x808a29b,0xc(%esp)
lea    0xbc(%esp),%ebp
movl   $0x80841b1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esp),%edx
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebx),%esi
movzbl 0x10(%ebx),%eax
mov    %esi,%edx
and    $0x200,%edx
je     8053287 <print_route+0x597>
cmp    $0x2,%al
je     8053c22 <print_route+0xf32>
cmp    $0xa,%al
je     80539e8 <print_route+0xcf8>
mov    0x94(%esp),%eax
test   %eax,%eax
je     805349c <print_route+0x7ac>
movzwl (%eax),%edx
lea    0x34(%esp),%esi
add    $0x4,%eax
mov    %eax,0x8(%esp)
movl   $0xf,0x4(%esp)
mov    %esi,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x38(%esp),%eax
test   %eax,%eax
je     8053bf6 <print_route+0xf06>
mov    0x4(%eax),%eax
mov    %ebx,0x1c(%esp)
mov    $0x2,%ebp
mov    %eax,%ebx
jmp    805334c <print_route+0x65c>
nop
jg     8053408 <print_route+0x718>
lea    -0x4(%ebp),%edx
cmp    $0x1,%edx
ja     80533a9 <print_route+0x6b9>
cmp    $0x4,%ebp
je     8054355 <print_route+0x1665>
cmp    $0x5,%ebp
je     8054349 <print_route+0x1659>
cmp    $0x3e7,%eax
jbe    8053418 <print_route+0x728>
xor    %edx,%edx
mov    %eax,0x28(%esp)
mov    %edx,0x2c(%esp)
fildll 0x28(%esp)
fdivs  0x8084d40
movl   $0x8084154,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
fstpl  0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
nop
add    $0x1,%ebp
cmp    $0x10,%ebp
je     8053498 <print_route+0x7a8>
mov    (%esi,%ebp,4),%eax
test   %eax,%eax
je     8053340 <print_route+0x650>
mov    0x8084d00(,%ebp,4),%eax
test   %eax,%eax
je     8053440 <print_route+0x750>
mov    %eax,0xc(%esp)
movl   $0x8089001,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0x1,%eax
mov    %ebp,%ecx
shl    %cl,%eax
test   %ebx,%eax
jne    805346d <print_route+0x77d>
mov    (%esi,%ebp,4),%eax
cmp    $0xa,%ebp
mov    0x4(%eax),%eax
jne    80532e0 <print_route+0x5f0>
cmp    $0xffffffff,%eax
mov    $0x0,%ecx
cmove  %ecx,%eax
mov    %eax,0xc(%esp)
movl   $0x80886cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053340 <print_route+0x650>
lea    0x0(%esi),%esi
movzwl 0x6(%ebx),%edx
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %ecx,0xc(%esp)
movl   $0x8083f7b,0x8(%esp)
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8052d3c <print_route+0x4c>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xd,%ebp
jne    80533a9 <print_route+0x6b9>
cmp    $0x3e7,%eax
ja     805330f <print_route+0x61f>
mov    %eax,0xc(%esp)
movl   $0x8084159,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053340 <print_route+0x650>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0xc(%esp)
movl   $0x8084143,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0x1,%eax
mov    %ebp,%ecx
shl    %cl,%eax
test   %ebx,%eax
je     805338f <print_route+0x69f>
mov    %edi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808414e,(%esp)
call   804b710 <fwrite@plt>
jmp    805338f <print_route+0x69f>
lea    0x0(%esi),%esi
mov    0x1c(%esp),%ebx
mov    0x80(%esp),%eax
test   %eax,%eax
je     80534d7 <print_route+0x7e7>
cmpl   $0xffffffff,0x8095dbc
je     80534d7 <print_route+0x7e7>
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x808415f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x98(%esp),%eax
test   %eax,%eax
je     80537d0 <print_route+0xae0>
movzwl (%eax),%edx
lea    0x4(%eax),%esi
sub    $0x4,%edx
cmp    $0x7,%edx
jbe    80537d0 <print_route+0xae0>
movzwl 0x4(%eax),%eax
cmp    %edx,%eax
jg     80537d0 <print_route+0xae0>
mov    %edx,%ebp
jmp    80535a7 <print_route+0x8b7>
nop
lea    0x0(%esi,%eiz,1),%esi
testb  $0x2,0x19(%ebx)
je     8053520 <print_route+0x830>
cmpb   $0x5,0x17(%ebx)
je     80537f0 <print_route+0xb00>
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8084184,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x3(%esi),%eax
movl   $0x808418c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
add    $0x1,%eax
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x2(%esi),%eax
test   $0x1,%al
jne    8053770 <print_route+0xa80>
test   $0x4,%al
jne    8053740 <print_route+0xa50>
test   $0x2,%al
jne    8053718 <print_route+0xa28>
movzwl (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%ebp
add    %eax,%esi
cmp    $0x7,%ebp
jbe    80537d0 <print_route+0xae0>
movzwl (%esi),%eax
cmp    %ebp,%eax
jg     80537d0 <print_route+0xae0>
testb  $0x2,0x19(%ebx)
je     80535b7 <print_route+0x8c7>
cmpb   $0x5,0x17(%ebx)
je     8053848 <print_route+0xb58>
mov    0x8095c90,%eax
movl   $0x8084167,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl (%esi),%eax
cmp    $0x8,%ax
jbe    8053510 <print_route+0x820>
sub    $0x8,%eax
mov    %eax,0xc(%esp)
lea    0x8(%esi),%eax
mov    %eax,0x8(%esp)
lea    0x74(%esp),%eax
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x88(%esp),%eax
test   %eax,%eax
je     805365e <print_route+0x96e>
lea    0x4(%eax),%edx
lea    0x13c(%esp),%ecx
movl   $0x100,0x10(%esp)
mov    %ecx,0xc(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x8084172,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xa0(%esp),%eax
test   %eax,%eax
je     8053510 <print_route+0x820>
mov    0x4(%eax),%eax
mov    %eax,%edx
movzwl %ax,%eax
shr    $0x10,%edx
test   %edx,%edx
mov    %eax,0x1c(%esp)
je     80537a0 <print_route+0xab0>
movl   $0x8089003,0xc(%esp)
movl   $0x80841b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x24(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x24(%esp),%edx
lea    0xbc(%esp),%ecx
mov    %ecx,0x4(%esp)
movl   $0x40,0x8(%esp)
mov    %ecx,0x20(%esp)
mov    %edx,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
movl   $0x8084df6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x20(%esp),%ecx
mov    0x1c(%esp),%eax
movl   $0x40,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    8053510 <print_route+0x820>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80841a5,(%esp)
call   804b710 <fwrite@plt>
jmp    8053586 <print_route+0x896>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808419d,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x2(%esi),%eax
jmp    805357e <print_route+0x88e>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084197,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x2(%esi),%eax
jmp    8053576 <print_route+0x886>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808a29b,0xc(%esp)
movl   $0x80841b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
lea    0xbc(%esp),%ecx
jmp    80536eb <print_route+0x9fb>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %edi,(%esp)
call   804b590 <fflush@plt>
jmp    8052d3a <print_route+0x4a>
lea    0x0(%esi),%esi
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8089001,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x3(%esi),%eax
cmp    $0x1,%al
je     805356a <print_route+0x87a>
mov    %eax,0xc(%esp)
movl   $0x808417b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805356a <print_route+0x87a>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
jmp    80535d8 <print_route+0x8e8>
lea    0x0(%esi),%esi
movl   $0x8089003,0xc(%esp)
lea    0xbc(%esp),%ebp
movl   $0x80841b1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %esi,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
movl   $0x8084df6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esp),%edx
jmp    805323e <print_route+0x54e>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xffffffff,0x8095da4
je     8053101 <print_route+0x411>
lea    0xbc(%esp),%ebp
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80813d0 <rtnl_rtscope_n2a>
movl   $0x8083fdf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053101 <print_route+0x411>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808402b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80531e8 <print_route+0x4f8>
lea    0x0(%esi),%esi
movzbl %dl,%eax
mov    %eax,0x1c(%esp)
jmp    8052dcd <print_route+0xdd>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083fff,(%esp)
call   804b710 <fwrite@plt>
mov    0x18(%ebx),%eax
jmp    8053198 <print_route+0x4a8>
mov    %edi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084018,(%esp)
call   804b710 <fwrite@plt>
jmp    80531b1 <print_route+0x4c1>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808400d,(%esp)
call   804b710 <fwrite@plt>
mov    0x18(%ebx),%eax
jmp    80531a8 <print_route+0x4b8>
mov    %edi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084005,(%esp)
call   804b710 <fwrite@plt>
mov    0x18(%ebx),%eax
jmp    80531a0 <print_route+0x4b0>
mov    0xa4(%esp),%eax
test   %eax,%eax
je     8053ad4 <print_route+0xde4>
test   %edx,%edx
lea    0x4(%eax),%esi
jne    8053ae0 <print_route+0xdf0>
test   %esi,%esi
je     805328f <print_route+0x59f>
mov    0xc(%eax),%ebp
test   %ebp,%ebp
jne    8053ae0 <print_route+0xdf0>
mov    0x10(%eax),%eax
test   %eax,%eax
je     805328f <print_route+0x59f>
mov    %eax,0xc(%esp)
movl   $0x80840f9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805328f <print_route+0x59f>
lea    0x0(%esi,%eiz,1),%esi
call   80805b0 <format_host>
movl   $0x8083fad,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8052f70 <print_route+0x280>
xchg   %ax,%ax
call   80805b0 <format_host>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8052f08 <print_route+0x218>
xchg   %ax,%ax
lea    0xbc(%esp),%ebp
movl   $0x40,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8059a00 <rtnl_rtntype_n2a>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8052ea0 <print_route+0x1b0>
test   %edx,%edx
je     805328f <print_route+0x59f>
xor    %esi,%esi
xchg   %ax,%ax
mov    0x8095d64,%ecx
test   %ecx,%ecx
jne    8053afc <print_route+0xe0c>
mov    0x8098b80,%eax
test   %eax,%eax
je     80541b2 <print_route+0x14c2>
mov    %eax,0x8095d64
test   %edx,%edx
jne    805416b <print_route+0x147b>
mov    0x8(%esi),%eax
test   %eax,%eax
jne    8054143 <print_route+0x1453>
mov    0xc(%esi),%eax
test   %eax,%eax
jne    8054122 <print_route+0x1432>
mov    0x8095ca4,%edx
test   %edx,%edx
je     805328f <print_route+0x59f>
mov    (%esi),%eax
test   %eax,%eax
jne    8054191 <print_route+0x14a1>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    80541ca <print_route+0x14da>
mov    0x4(%esi),%eax
test   %eax,%eax
je     805328f <print_route+0x59f>
xor    %edx,%edx
divl   0x8095d64
movl   $0x8084116,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805328f <print_route+0x59f>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x12(%ebx),%eax
test   %al,%al
je     8052f70 <print_route+0x280>
mov    %eax,0xc(%esp)
movl   $0x8083fb6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8052f70 <print_route+0x280>
lea    0x0(%esi),%esi
movzbl 0x11(%ebx),%eax
test   %al,%al
je     8053bfd <print_route+0xf0d>
mov    %eax,0xc(%esp)
movl   $0x8084d57,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8052f08 <print_route+0x218>
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    8052e8a <print_route+0x19a>
xor    %eax,%eax
jmp    80532d2 <print_route+0x5e2>
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f98,(%esp)
call   804b710 <fwrite@plt>
jmp    8052f08 <print_route+0x218>
mov    0x8095c90,%eax
mov    %esi,%ebp
xor    %bp,%bp
movl   $0x8084034,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %ebp,%ebp
mov    $0x1,%eax
js     80541f5 <print_route+0x1505>
test   $0x40000000,%ebp
je     8053ca1 <print_route+0xfb1>
and    $0xbfffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x808404b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x20000000,%ebp
je     8053ced <print_route+0xffd>
and    $0xdfffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084056,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x10000000,%ebp
je     8053d39 <print_route+0x1049>
and    $0xefffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x808405d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x8000000,%ebp
je     8053d85 <print_route+0x1095>
and    $0xf7ffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084065,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x800000,%ebp
je     8053dd1 <print_route+0x10e1>
and    $0xff7fffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084071,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x400000,%ebp
je     8053e1d <print_route+0x112d>
and    $0xffbfffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x808407d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x20000,%ebp
je     8053e69 <print_route+0x1179>
and    $0xfffdffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084086,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x4000000,%ebp
je     8053eb5 <print_route+0x11c5>
and    $0xfbffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084095,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x40000,%ebp
je     8053f01 <print_route+0x1211>
and    $0xfffbffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x1000000,%ebp
je     8053f4d <print_route+0x125d>
and    $0xfeffffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840b3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x200000,%ebp
je     8053f99 <print_route+0x12a9>
and    $0xffdfffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840c0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x10000,%ebp
je     8053fe5 <print_route+0x12f5>
and    $0xfffeffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x8083f79,%edx
mov    $0x808a29b,%eax
cmove  %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840ce,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
test   $0x80000,%ebp
je     8054108 <print_route+0x1418>
and    $0xfff7ffff,%ebp
mov    $0x808a293,%edx
mov    $0x8088729,%ecx
cmove  %edx,%ecx
test   %eax,%eax
mov    $0x808a29b,%edx
mov    $0x8083f79,%eax
cmovne %eax,%edx
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840d9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %ebp,%ebp
je     805405c <print_route+0x136c>
mov    $0x808a29b,%edx
mov    %ebp,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80840e3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xa4(%esp),%esi
test   %esi,%esi
je     805328f <print_route+0x59f>
mov    0x8095d64,%eax
test   %eax,%eax
jne    8054086 <print_route+0x1396>
mov    0x8098b80,%eax
test   %eax,%eax
je     80542ca <print_route+0x15da>
mov    %eax,0x8095d64
mov    0xc(%esi),%eax
test   %eax,%eax
jne    8054277 <print_route+0x1587>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    8054256 <print_route+0x1566>
mov    0x8095ca4,%eax
test   %eax,%eax
je     80540c6 <print_route+0x13d6>
mov    0x4(%esi),%eax
test   %eax,%eax
jne    8054323 <print_route+0x1633>
mov    0x14(%esi),%eax
test   %eax,%eax
jne    8054302 <print_route+0x1612>
mov    0x8(%esi),%eax
test   %eax,%eax
jne    80542d9 <print_route+0x15e9>
mov    0x18(%esi),%eax
test   %eax,%eax
jne    8054235 <print_route+0x1545>
mov    0x1c(%esi),%eax
mov    0x20(%esi),%edx
test   %eax,%eax
jne    80540e3 <print_route+0x13f3>
test   %edx,%edx
je     805328f <print_route+0x59f>
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x808412e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805328f <print_route+0x59f>
test   %ebp,%ebp
je     805405c <print_route+0x136c>
test   %eax,%eax
mov    $0x8083f79,%edx
jne    805403c <print_route+0x134c>
jmp    8054037 <print_route+0x1347>
mov    %eax,0xc(%esp)
movl   $0x80840f9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053b1a <print_route+0xe2a>
cltd
idivl  0x8095d64
movl   $0x80840ea,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053b0f <print_route+0xe1f>
mov    0x8095c90,%eax
movl   $0x8084034,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053b04 <print_route+0xe14>
mov    %eax,0xc(%esp)
movl   $0x8084103,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053b32 <print_route+0xe42>
call   8080450 <__get_user_hz>
mov    0x18(%ebx),%edx
and    $0x200,%edx
mov    %eax,0x8098b80
jmp    8053af7 <print_route+0xe07>
mov    %eax,0xc(%esp)
movl   $0x808410d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8053b3d <print_route+0xe4d>
mov    $0xffffffff,%eax
jmp    8052d3c <print_route+0x4c>
and    $0x7fff0000,%esi
mov    $0x808a293,%edx
mov    $0x8088729,%eax
mov    %esi,%ebp
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x8083f79,0xc(%esp)
movl   $0x8084041,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8053c55 <print_route+0xf65>
mov    %eax,0xc(%esp)
movl   $0x8084121,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80540d1 <print_route+0x13e1>
mov    %eax,0xc(%esp)
movl   $0x80840f9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805409c <print_route+0x13ac>
cltd
idivl  0x8095d64
movl   $0x80840ea,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8054091 <print_route+0x13a1>
mov    0x8095c40,%eax
mov    %ecx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8052d3c <print_route+0x4c>
call   8080450 <__get_user_hz>
mov    %eax,0x8098b80
jmp    8054081 <print_route+0x1391>
xor    %edx,%edx
divl   0x8095d64
movl   $0x8084116,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80540c6 <print_route+0x13d6>
mov    %eax,0xc(%esp)
movl   $0x808410d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80540bb <print_route+0x13cb>
mov    %eax,0xc(%esp)
movl   $0x8084103,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80540b0 <print_route+0x13c0>
call   804b660 <__stack_chk_fail@plt>
shr    $0x2,%eax
lea    0x0(%esi,%eiz,1),%esi
jmp    8053304 <print_route+0x614>
shr    $0x3,%eax
jmp    8053304 <print_route+0x614>
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x8095c80,%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8052cf0 <print_route>
xor    %eax,%eax
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
or     $0x1,%edx
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x99c,%esp
mov    $0x107,%ecx
mov    %eax,0x3c(%esp)
lea    0x570(%esp),%edi
mov    0x9b0(%esp),%ebp
mov    %gs:0x14,%eax
mov    %eax,0x98c(%esp)
xor    %eax,%eax
cmp    $0x19,%esi
movl   $0x0,0x40(%esp)
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0x1c,0x570(%esp)
00
mov    %dx,0x576(%esp)
mov    %si,0x574(%esp)
mov    %al,0x580(%esp)
movb   $0xfe,0x584(%esp)
movb   $0xff,0x586(%esp)
je     8054425 <print_route+0x1735>
movb   $0x3,0x585(%esp)
movb   $0x0,0x586(%esp)
movb   $0x1,0x587(%esp)
mov    $0x8,%ecx
mov    $0x4,%esi
test   %ebx,%ebx
mov    %cx,0x72(%esp)
mov    %si,0x70(%esp)
jle    8054da8 <print_route+0x20b8>
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
movzbl (%eax),%esi
cmp    $0x73,%esi
mov    %esi,0x1c(%esp)
je     80544b8 <print_route+0x17c8>
cmpl   $0x76,0x1c(%esp)
jne    80546a0 <print_route+0x19b0>
cmpb   $0x69,0x1(%eax)
je     8054728 <print_route+0x1a38>
mov    $0x80841d0,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80546c0 <print_route+0x19d0>
jmp    80547c7 <print_route+0x1ad7>
lea    0x0(%esi),%esi
cmpb   $0x72,0x1(%eax)
jne    805449c <print_route+0x17ac>
cmpb   $0x63,0x2(%eax)
jne    805449c <print_route+0x17ac>
cmpb   $0x0,0x3(%eax)
jne    805449c <print_route+0x17ac>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
movzbl 0x580(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
cmpb   $0x0,0x580(%esp)
jne    805450f <print_route+0x181f>
movzbl 0x48(%esp),%eax
mov    %al,0x580(%esp)
movzbl 0x49(%esp),%eax
movl   $0x7,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x1c(%esp),%ebp
sub    $0x1,%ebx
add    $0x4,%ebp
test   %ebx,%ebx
jg     8054478 <print_route+0x1788>
mov    0x24(%esp),%esi
movl   $0x0,0x30(%esp)
test   %esi,%esi
je     8054598 <print_route+0x18a8>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     8054d49 <print_route+0x2059>
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
movzwl 0x70(%esp),%eax
cmp    $0x4,%ax
jbe    80545dd <print_route+0x18ed>
mov    0x20(%esp),%edx
test   %edx,%edx
jne    8054cd0 <print_route+0x1fe0>
sub    $0x4,%eax
mov    %eax,0x10(%esp)
lea    0x74(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    8054908 <print_route+0x1c18>
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%edx
test   %edx,%edx
jne    8054614 <print_route+0x1924>
movzbl 0x587(%esp),%eax
lea    -0x2(%eax),%edx
cmp    $0x2,%dl
jbe    80548ef <print_route+0x1bff>
cmp    $0xa,%al
je     80548ef <print_route+0x1bff>
mov    0x34(%esp),%eax
test   %eax,%eax
jne    805463a <print_route+0x194a>
movzbl 0x587(%esp),%eax
mov    %eax,%edx
and    $0xfffffff7,%edx
cmp    $0x2,%dl
jne    8054c0f <print_route+0x1f1f>
movb   $0xfe,0x586(%esp)
cmpb   $0x0,0x580(%esp)
je     80548e2 <print_route+0x1bf2>
lea    0x570(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     80557f0 <print_route+0x2b00>
xor    %eax,%eax
mov    0x98c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    8055747 <print_route+0x2a57>
add    $0x99c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x80841d0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80547c0 <print_route+0x1ad0>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
movzbl 0x580(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x580(%esp)
jne    8054705 <print_route+0x1a15>
movzbl 0x48(%esp),%eax
mov    %al,0x580(%esp)
movzbl 0x49(%esp),%eax
test   %al,%al
jne    8054838 <print_route+0x1b48>
movzwl 0x4a(%esp),%eax
mov    %al,0x582(%esp)
jmp    805453f <print_route+0x184f>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x61,0x2(%eax)
jne    805449c <print_route+0x17ac>
cmpb   $0x0,0x3(%eax)
jne    805449c <print_route+0x17ac>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
movzbl 0x580(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
cmpb   $0x0,0x580(%esp)
jne    8054781 <print_route+0x1a91>
movzbl 0x48(%esp),%eax
mov    %al,0x580(%esp)
movzbl 0x49(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
movl   $0x1,0x28(%esp)
jmp    805453f <print_route+0x184f>
xchg   %ax,%ax
cmpl   $0x74,0x1c(%esp)
je     8054820 <print_route+0x1b30>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8054868 <print_route+0x1b78>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    80557d0 <print_route+0x2ae0>
mov    0x48(%esp),%eax
mov    %al,0x583(%esp)
jmp    805453f <print_route+0x184f>
lea    0x0(%esi),%esi
cmpb   $0x6f,0x1(%eax)
jne    80547c7 <print_route+0x1ad7>
cmpb   $0x73,0x2(%eax)
jne    80547c7 <print_route+0x1ad7>
cmpb   $0x0,0x3(%eax)
je     80547df <print_route+0x1aef>
jmp    80547c7 <print_route+0x1ad7>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    8054712 <print_route+0x1a22>
movl   $0x808423f,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8054c36 <print_route+0x1f46>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    805574c <print_route+0x2a5c>
mov    0x48(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    805453f <print_route+0x184f>
movb   $0x2,0x580(%esp)
jmp    8054648 <print_route+0x1958>
mov    0x34(%esp),%eax
movb   $0xff,0x584(%esp)
test   %eax,%eax
jne    805463a <print_route+0x194a>
jmp    805461c <print_route+0x192c>
mov    $0x9,%esi
mov    $0x4,%edi
lea    0x174(%esp),%eax
test   %ebx,%ebx
mov    %si,0x172(%esp)
mov    %di,0x170(%esp)
mov    %eax,0x20(%esp)
movl   $0x808416a,0x2c(%esp)
jle    80545f0 <print_route+0x1900>
mov    0x0(%ebp),%eax
mov    $0x8,%ecx
mov    0x2c(%esp),%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805575f <print_route+0x2a6f>
cmp    $0x1,%ebx
je     805578c <print_route+0x2a9c>
mov    0x20(%esp),%eax
mov    $0x8,%ecx
movl   $0x0,(%eax)
mov    %cx,(%eax)
addw   $0x8,0x170(%esp)
08
movl   $0x0,0x4(%eax)
xchg   %ax,%ax
mov    %ebx,%edx
sub    $0x1,%edx
mov    %edx,0x1c(%esp)
je     80549f6 <print_route+0x1d06>
mov    0x4(%ebp),%eax
movzbl (%eax),%ecx
cmp    $0x76,%ecx
je     8054a40 <print_route+0x1d50>
cmp    $0x64,%ecx
jne    8054af0 <print_route+0x1e00>
cmpb   $0x65,0x1(%eax)
jne    8054af0 <print_route+0x1e00>
cmpb   $0x76,0x2(%eax)
jne    8054af0 <print_route+0x1e00>
cmpb   $0x0,0x3(%eax)
jne    8054af0 <print_route+0x1e00>
sub    $0x2,%ebx
test   %ebx,%ebx
lea    0x8(%ebp),%esi
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
mov    0x20(%esp),%edi
test   %eax,%eax
mov    %eax,0x4(%edi)
je     8054d78 <print_route+0x2088>
mov    %ebx,%edx
mov    %esi,%ebp
sub    $0x1,%edx
mov    %edx,0x1c(%esp)
jne    805498b <print_route+0x1c9b>
movzwl 0x170(%esp),%eax
cmp    $0x4,%ax
jbe    80545f0 <print_route+0x1900>
sub    $0x4,%eax
mov    %eax,0x10(%esp)
lea    0x174(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    80545f0 <print_route+0x1900>
xchg   %ax,%ax
cmpb   $0x69,0x1(%eax)
jne    8054af0 <print_route+0x1e00>
cmpb   $0x61,0x2(%eax)
xchg   %ax,%ax
jne    8054af0 <print_route+0x1e00>
cmpb   $0x0,0x3(%eax)
jne    8054af0 <print_route+0x1e00>
sub    $0x2,%ebx
test   %ebx,%ebx
lea    0x8(%ebp),%esi
jle    8054d44 <print_route+0x2054>
movzbl 0x580(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
cmpb   $0x0,0x580(%esp)
jne    8054aa3 <print_route+0x1db3>
movzbl 0x48(%esp),%eax
mov    %al,0x580(%esp)
movzbl 0x49(%esp),%eax
mov    %esi,%ebp
movl   $0x5,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x170(%esp),%eax
mov    %eax,(%esp)
call   807ef00 <rta_addattr_l>
mov    0x20(%esp),%edi
movzbl 0x49(%esp),%eax
movzwl (%edi),%edx
lea    0x4(%edx,%eax,1),%eax
mov    %ax,(%edi)
jmp    8054980 <print_route+0x1c90>
lea    0x0(%esi),%esi
mov    $0x7,%ecx
mov    %eax,%esi
mov    $0x8084478,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8054b68 <print_route+0x1e78>
sub    $0x2,%ebx
test   %ebx,%ebx
lea    0x8(%ebp),%esi
jle    8054d44 <print_route+0x2054>
movl   $0x0,0x8(%esp)
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8054dc5 <print_route+0x20d5>
mov    0x48(%esp),%eax
lea    -0x1(%eax),%edx
cmp    $0xff,%edx
ja     8054dc5 <print_route+0x20d5>
mov    0x20(%esp),%edi
sub    $0x1,%eax
mov    %esi,%ebp
mov    %al,0x3(%edi)
jmp    8054980 <print_route+0x1c90>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebp),%esi
mov    $0x808419e,%edi
mov    %esi,0x24(%esp)
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054b98 <print_route+0x1ea8>
mov    0x20(%esp),%eax
mov    0x24(%esp),%ebp
mov    0x1c(%esp),%ebx
orb    $0x4,0x2(%eax)
jmp    8054980 <print_route+0x1c90>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808ca0d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8054d24 <print_route+0x2034>
sub    $0x2,%ebx
test   %ebx,%ebx
lea    0x8(%ebp),%esi
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8059c90 <get_rt_realms>
test   %eax,%eax
jne    80557bd <print_route+0x2acd>
mov    0x48(%esp),%eax
mov    %esi,%ebp
movl   $0xb,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x170(%esp),%eax
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
mov    0x20(%esp),%eax
addw   $0x8,(%eax)
jmp    8054980 <print_route+0x1c90>
lea    -0x3(%eax),%edx
cmp    $0x2,%dl
ja     8054cfe <print_route+0x200e>
cmpb   $0x0,0x580(%esp)
movb   $0xfd,0x586(%esp)
jne    8054648 <print_route+0x1958>
jmp    80548e2 <print_route+0x1bf2>
movl   $0x8084246,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8054883 <print_route+0x1b93>
movl   $0x808424f,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8054883 <print_route+0x1b93>
mov    0x0(%ebp),%eax
mov    $0x8082f55,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054deb <print_route+0x20fb>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
movl   $0x0,0x48(%esp)
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8081460 <rtnl_rtscope_a2n>
test   %eax,%eax
jne    8054dd8 <print_route+0x20e8>
mov    0x48(%esp),%eax
movl   $0x1,0x34(%esp)
mov    %al,0x586(%esp)
jmp    805453f <print_route+0x184f>
xchg   %ax,%ax
mov    0x20(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x70(%esp),%eax
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
movzwl 0x70(%esp),%eax
jmp    80545af <print_route+0x18bf>
cmp    $0x1,%al
ja     805463a <print_route+0x194a>
cmpl   $0x19,0x3c(%esp)
je     80557e3 <print_route+0x2af3>
mov    0x30(%esp),%eax
or     0x28(%esp),%eax
je     8054c1b <print_route+0x1f2b>
jmp    805463a <print_route+0x194a>
mov    0x20(%esp),%eax
mov    0x1c(%esp),%edx
mov    0x24(%esp),%ebp
movzwl (%eax),%eax
mov    %edx,%ebx
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,0x20(%esp)
jmp    805493d <print_route+0x1c4d>
call   8080010 <incomplete_command>
mov    0x24(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8054681 <print_route+0x1991>
mov    0x8(%ebp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x0,0x34(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x30(%esp)
jmp    80545f8 <print_route+0x1908>
mov    0x8(%ebp),%eax
movl   $0x808447f,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8084275,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmpb   $0x6d,(%eax)
jne    8054ea6 <print_route+0x21b6>
cmpb   $0x74,0x1(%eax)
jne    8054ea6 <print_route+0x21b6>
cmpb   $0x75,0x2(%eax)
jne    8054ea6 <print_route+0x21b6>
cmpb   $0x0,0x3(%eax)
jne    8054ea6 <print_route+0x21b6>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054e59 <print_route+0x2169>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x4,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8055192 <print_route+0x24a2>
mov    0x48(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %eax,0xc(%esp)
lea    0x70(%esp),%eax
movl   $0x100,0x4(%esp)
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
mov    0x30(%esp),%ebx
jmp    805453f <print_route+0x184f>
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054f35 <print_route+0x2245>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054f00 <print_route+0x2210>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x400,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80551a8 <print_route+0x24b8>
mov    0x48(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
mov    $0x80842ca,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054fc4 <print_route+0x22d4>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8054f8f <print_route+0x229f>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x100,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80551be <print_route+0x24ce>
mov    0x48(%esp),%eax
movl   $0x8,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x80842e9,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055057 <print_route+0x2367>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8055022 <print_route+0x2332>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x200,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80551d4 <print_route+0x24e4>
mov    0x48(%esp),%eax
movl   $0x9,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
mov    0x0(%ebp),%eax
cmpb   $0x72,(%eax)
jne    805511a <print_route+0x242a>
cmpb   $0x74,0x1(%eax)
jne    805511a <print_route+0x242a>
cmpb   $0x74,0x2(%eax)
jne    805511a <print_route+0x242a>
cmpb   $0x0,0x3(%eax)
jne    805511a <print_route+0x242a>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80550c8 <print_route+0x23d8>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x10,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
lea    0x40(%esp),%edx
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   807f3a0 <get_time_rtt>
test   %eax,%eax
jne    8055104 <print_route+0x2414>
mov    0x40(%esp),%edx
mov    0x48(%esp),%eax
test   %edx,%edx
jne    80550f3 <print_route+0x2403>
shl    $0x3,%eax
mov    %eax,0xc(%esp)
movl   $0x4,0x8(%esp)
jmp    8054e89 <print_route+0x2199>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x80842f4,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x808430c,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80551fd <print_route+0x250d>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
lea    0x40(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
orl    $0x2000,0x20(%esp)
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807f3a0 <get_time_rtt>
test   %eax,%eax
jne    80551ea <print_route+0x24fa>
mov    0x48(%esp),%eax
movl   $0xd,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x70(%esp),%eax
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
jmp    805453f <print_route+0x184f>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x808428c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x80842ad,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x80842d1,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x8084b08,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8084314,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8088dc3,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805528d <print_route+0x259d>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8055258 <print_route+0x2568>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x8,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80554cb <print_route+0x27db>
mov    0x48(%esp),%eax
movl   $0x3,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x8084368,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055323 <print_route+0x2633>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80552ee <print_route+0x25fe>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x80,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    805550d <print_route+0x281d>
mov    0x48(%esp),%eax
movl   $0x7,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x8084364,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80553b9 <print_route+0x26c9>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8055384 <print_route+0x2694>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x800,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80554e1 <print_route+0x27f1>
mov    0x48(%esp),%eax
movl   $0xb,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x808438a,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805544f <print_route+0x275f>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805541a <print_route+0x272a>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x4000,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80554f7 <print_route+0x2807>
mov    0x48(%esp),%eax
movl   $0xe,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x80843b0,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055549 <print_route+0x2859>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8055536 <print_route+0x2846>
mov    0x48(%esp),%eax
cmp    $0x1,%eax
ja     8055523 <print_route+0x2833>
mov    %eax,0xc(%esp)
lea    0x70(%esp),%eax
movl   $0xf,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
jmp    805453f <print_route+0x184f>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x8084330,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x808436d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x8084393,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x808434b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8084b28,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x80843b9,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x80843d6,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80555fd <print_route+0x290d>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80555ab <print_route+0x28bb>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x20,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
lea    0x40(%esp),%edx
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   807f3a0 <get_time_rtt>
test   %eax,%eax
jne    80555e7 <print_route+0x28f7>
mov    0x40(%esp),%ebp
mov    0x48(%esp),%eax
test   %ebp,%ebp
jne    80555d6 <print_route+0x28e6>
shl    $0x2,%eax
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
jmp    8054e89 <print_route+0x2199>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x80843dd,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x80843f8,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805568c <print_route+0x299c>
lea    0x4(%ebp),%eax
mov    %eax,0x1c(%esp)
mov    %ebx,%eax
sub    $0x1,%eax
mov    %eax,0x30(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    $0x808414f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805565b <print_route+0x296b>
lea    0x8(%ebp),%eax
mov    %eax,0x1c(%esp)
lea    -0x2(%ebx),%eax
orl    $0x40,0x20(%esp)
test   %eax,%eax
mov    %eax,0x30(%esp)
jle    8054d44 <print_route+0x2054>
mov    0x8(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80556f6 <print_route+0x2a06>
mov    0x48(%esp),%eax
movl   $0x6,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8054e89 <print_route+0x2199>
movl   $0x808ca0d,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805571f <print_route+0x2a2f>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8059c90 <get_rt_realms>
test   %eax,%eax
jne    805570c <print_route+0x2a1c>
mov    0x48(%esp),%eax
movl   $0xb,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    805453f <print_route+0x184f>
mov    0x1c(%esp),%eax
mov    (%eax),%eax
movl   $0x8084401,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x808441e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x0(%ebp),%eax
mov    $0x808419e,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80557fc <print_route+0x2b0c>
orl    $0x4,0x588(%esp)
mov    %ebp,0x1c(%esp)
jmp    805453f <print_route+0x184f>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebp),%eax
movl   $0x808425a,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8084b4c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084b8c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8(%ebp),%eax
movl   $0x808441e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8084227,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movb   $0xff,0x586(%esp)
jmp    805463a <print_route+0x194a>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
mov    $0x808416a,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8055857 <print_route+0x2b67>
movl   $0x8084438,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055888 <print_route+0x2b98>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   80812c0 <rtnl_rtprot_a2n>
test   %eax,%eax
jne    8055875 <print_route+0x2b85>
mov    0x48(%esp),%eax
mov    %al,0x585(%esp)
jmp    805453f <print_route+0x184f>
mov    0x24(%esp),%ecx
test   %ecx,%ecx
jne    80558e9 <print_route+0x2bf9>
movzwl 0x70(%esp),%eax
movl   $0x1,0x30(%esp)
jmp    805459d <print_route+0x18ad>
mov    0x4(%ebp),%eax
movl   $0x8084441,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8082d54,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055936 <print_route+0x2c46>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   80817b0 <rtnl_rttable_a2n>
test   %eax,%eax
jne    8055923 <print_route+0x2c33>
mov    0x48(%esp),%eax
cmp    $0xff,%eax
ja     80558f6 <print_route+0x2c06>
mov    %al,0x584(%esp)
movl   $0x1,0x38(%esp)
jmp    805453f <print_route+0x184f>
movl   $0x1,0x30(%esp)
jmp    8054561 <print_route+0x1871>
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0xf,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x584(%esp)
call   807eba0 <addattr32>
jmp    80558dc <print_route+0x2bec>
mov    0x4(%ebp),%eax
movl   $0x808445e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x0(%ebp),%eax
movzbl (%eax),%edx
cmp    $0x64,%edx
jne    805596f <print_route+0x2c7f>
cmpb   $0x65,0x1(%eax)
jne    8055984 <print_route+0x2c94>
cmpb   $0x76,0x2(%eax)
jne    8055984 <print_route+0x2c94>
cmpb   $0x0,0x3(%eax)
jne    8055984 <print_route+0x2c94>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x1c(%esp)
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %eax,0x24(%esp)
jmp    805453f <print_route+0x184f>
cmp    $0x6f,%edx
jne    8055a6c <print_route+0x2d7c>
cmpb   $0x69,0x1(%eax)
jne    8055984 <print_route+0x2c94>
cmpb   $0x66,0x2(%eax)
je     805594d <print_route+0x2c5d>
movzbl (%eax),%esi
lea    -0x30(%esi),%edx
cmp    $0x9,%dl
jbe    80559aa <print_route+0x2cba>
mov    %eax,0x4(%esp)
lea    0x44(%esp),%eax
mov    %eax,(%esp)
call   8059ac0 <rtnl_rtntype_a2n>
test   %eax,%eax
je     8055a9f <print_route+0x2daf>
mov    0x0(%ebp),%eax
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8055a67 <print_route+0x2d77>
mov    0x2c(%esp),%edi
test   %edi,%edi
jne    8055a54 <print_route+0x2d64>
movzbl 0x580(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x0(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x580(%esp)
jne    8055a03 <print_route+0x2d13>
movzbl 0x48(%esp),%eax
mov    %al,0x580(%esp)
movzwl 0x4a(%esp),%eax
mov    %al,0x581(%esp)
movzbl 0x49(%esp),%eax
test   %al,%al
je     8055a43 <print_route+0x2d53>
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x570(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    %ebp,0x1c(%esp)
movl   $0x1,0x2c(%esp)
jmp    805453f <print_route+0x184f>
mov    0x0(%ebp),%eax
movl   $0x8084f28,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
call   8052210 <do_ipaddrlabel+0x260>
cmp    $0x74,%edx
jne    8055984 <print_route+0x2c94>
cmpb   $0x6f,0x1(%eax)
jne    8055984 <print_route+0x2c94>
cmpb   $0x0,0x2(%eax)
jne    8055984 <print_route+0x2c94>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     8054d44 <print_route+0x2054>
mov    0x4(%ebp),%eax
mov    %edx,%ebp
jmp    8055984 <print_route+0x2c94>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     8054d44 <print_route+0x2054>
mov    0x44(%esp),%eax
mov    %al,0x587(%esp)
mov    0x4(%ebp),%eax
mov    %edx,%ebp
jmp    80559aa <print_route+0x2cba>
push   %edi
push   %esi
mov    $0x80,%esi
push   %ebx
sub    $0x60,%esp
mov    0x74(%esp),%ebx
movzbl 0x10(%ebx),%eax
mov    (%ebx),%edx
cmp    $0xa,%al
je     8055af7 <print_route+0x2e07>
cmp    $0x2,%al
mov    $0x20,%si
je     8055af7 <print_route+0x2e07>
cmp    $0xc,%al
mov    $0x10,%si
je     8055af7 <print_route+0x2e07>
cmp    $0x4,%al
mov    $0x50,%si
mov    $0xffffffff,%eax
cmovne %eax,%esi
lea    -0x1c(%edx),%eax
mov    %eax,0xc(%esp)
lea    0x18(%esp),%edi
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
movl   $0x11,0x4(%esp)
mov    %edi,(%esp)
call   807f0b0 <parse_rtattr>
mov    %esi,%ecx
mov    %edi,%edx
mov    %ebx,%eax
call   8052700 <do_ipaddrlabel+0x750>
test   %eax,%eax
jne    8055b30 <print_route+0x2e40>
add    $0x60,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    (%ebx),%eax
mov    %ebx,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b8a0 <write@plt>
test   %eax,%eax
mov    %eax,%edx
jle    8055b7f <print_route+0x2e8f>
cmp    (%ebx),%eax
je     8055b88 <print_route+0x2e98>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083488,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xfffffffb,%edx
mov    $0xfffffffb,%eax
cmp    %edx,(%ebx)
jne    8055b28 <print_route+0x2e38>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x60,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    8055ba0 <print_route+0x2eb0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0xe6c,%esp
mov    %gs:0x14,%eax
mov    %eax,0xe5c(%esp)
xor    %eax,%eax
mov    0x8095ca8,%eax
cmp    $0x2,%ecx
movl   $0x0,0x30(%esp)
mov    %eax,0x1c(%esp)
je     8055f98 <print_route+0x32a8>
mov    $0x8095d80,%edx
xor    %eax,%eax
mov    $0x52,%ecx
mov    %edx,%edi
rep stos %eax,%es:(%edi)
mov    $0xffffffff,%eax
cmp    $0x1,%esi
mov    %ax,0x8095e52
mov    $0xffffffff,%eax
mov    %ax,0x8095ea2
movl   $0xfe,0x8095d80
00
sete   0x2f(%esp)
je     8056386 <print_route+0x3696>
movl   $0x8052cf0,0x20(%esp)
test   %ebp,%ebp
jle    805636b <print_route+0x367b>
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
jmp    8055c82 <print_route+0x2f92>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    8055e10 <print_route+0x3120>
cmpb   $0x6c,0x1(%eax)
jne    8055e10 <print_route+0x3120>
cmpb   $0x6c,0x2(%eax)
jne    8055e10 <print_route+0x3120>
cmpb   $0x0,0x3(%eax)
jne    8055e10 <print_route+0x3120>
movl   $0x0,0x8095d80
00
mov    0x18(%esp),%ebx
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jle    8055cde <print_route+0x2fee>
movl   $0x8082d54,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055de0 <print_route+0x30f0>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   80817b0 <rtnl_rttable_a2n>
test   %eax,%eax
jne    8055c40 <print_route+0x2f50>
mov    0x18(%esp),%ebx
sub    $0x1,%ebp
mov    0x40(%esp),%eax
add    $0x4,%ebx
test   %ebp,%ebp
mov    %eax,0x8095d80
jg     8055c82 <print_route+0x2f92>
mov    0x24(%esp),%edi
mov    0x28(%esp),%ebp
test   %edi,%edi
setne  %al
test   %ebp,%ebp
setne  %bl
mov    %eax,%edx
or     %ebx,%edx
mov    0x1c(%esp),%esi
test   %esi,%esi
jne    8055d12 <print_route+0x3022>
mov    0x8095d80,%ecx
test   %ecx,%ecx
mov    $0x2,%ecx
cmove  0x1c(%esp),%ecx
mov    %ecx,0x1c(%esp)
test   %dl,%dl
je     8055d64 <print_route+0x3074>
test   %al,%al
je     8055d3d <print_route+0x304d>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     805650f <print_route+0x381f>
mov    %eax,0x8095db8
movl   $0xffffffff,0x8095dbc
ff
test   %bl,%bl
je     8055d64 <print_route+0x3074>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     80565a8 <print_route+0x38b8>
mov    %eax,0x8095dc0
movl   $0xffffffff,0x8095dc4
ff
mov    0x30(%esp),%eax
cmpb   $0x0,0x2f(%esp)
mov    %eax,0x8095dc8
jne    80560c8 <print_route+0x33d8>
mov    0x8095d84,%edi
test   %edi,%edi
jne    8055ec8 <print_route+0x31d8>
mov    0x1c(%esp),%eax
movl   $0x1a,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8055f7c <print_route+0x328c>
mov    0x8095c80,%eax
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     805607e <print_route+0x338e>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80844b5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8055e38 <print_route+0x3148>
movl   $0x1,0x8095d84
00
mov    %ebx,0x18(%esp)
jmp    8055c74 <print_route+0x2f84>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8084494,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80560af <print_route+0x33bf>
movl   $0x1,0x8095d84
00
jmp    8055c74 <print_route+0x2f84>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80844bc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8055df6 <print_route+0x3106>
mov    (%ebx),%eax
cmpb   $0x74,(%eax)
je     8055eb0 <print_route+0x31c0>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056016 <print_route+0x3326>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    80569a7 <print_route+0x3cb7>
mov    0x40(%esp),%eax
movl   $0xffffffff,0x8095db4
ff
mov    %eax,0x8095db0
jmp    8055c74 <print_route+0x2f84>
cmpb   $0x6f,0x1(%eax)
jne    8055e55 <print_route+0x3165>
cmpb   $0x73,0x2(%eax)
jne    8055e55 <print_route+0x3165>
cmpb   $0x0,0x3(%eax)
je     8055e6d <print_route+0x317d>
jmp    8055e55 <print_route+0x3165>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x34(%esp)
xor    %eax,%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     8055ee2 <print_route+0x31f2>
mov    0x80941fc,%eax
mov    $0x10,%ecx
mov    $0x1a,%ebx
mov    $0x101,%esi
movl   $0xc,0x14(%esp)
movl   $0x0,0xc(%esp)
add    $0x1,%eax
mov    %eax,0x80941fc
mov    %eax,0x8094200
mov    %eax,0x48(%esp)
movzbl 0x1c(%esp),%eax
movl   $0x1c,0x8(%esp)
mov    %cx,0x34(%esp)
movl   $0x1c,0x40(%esp)
mov    %al,0x50(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x80941e0,%eax
mov    %bx,0x44(%esp)
mov    %si,0x46(%esp)
movl   $0x200,0x58(%esp)
mov    %eax,(%esp)
call   804b9d0 <sendto@plt>
test   %eax,%eax
jns    8055daa <print_route+0x30ba>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,(%esp)
call   804bb00 <isatty@plt>
test   %eax,%eax
mov    %eax,%esi
jne    8056488 <print_route+0x3798>
movl   $0x4,0x8(%esp)
movl   $0x809420c,0x4(%esp)
movl   $0x1,(%esp)
call   804b8a0 <write@plt>
cmp    $0x4,%eax
jne    8056454 <print_route+0x3764>
mov    $0x8095d80,%edx
mov    %esi,%eax
mov    %edx,%edi
mov    $0x52,%ecx
rep stos %eax,%es:(%edi)
mov    $0xffffffff,%edx
mov    $0xffffffff,%eax
mov    %ax,0x8095e52
mov    %dx,0x8095ea2
movl   $0xfe,0x8095d80
00
movb   $0x0,0x2f(%esp)
movl   $0x8055ac0,0x20(%esp)
jmp    8055c1f <print_route+0x2f2f>
movl   $0x8084438,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%esi
jne    805630a <print_route+0x361a>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
movl   $0x0,0x34(%esp)
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
movl   $0xffffffff,0x8095d9c
ff
mov    %eax,0x4(%esp)
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   80812c0 <rtnl_rtprot_a2n>
test   %eax,%eax
jne    80562a0 <print_route+0x35b0>
mov    0x34(%esp),%esi
mov    %esi,0x8095d98
jmp    8055c74 <print_route+0x2f84>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    $0x8082d28,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8056290 <print_route+0x35a0>
call   8052210 <do_ipaddrlabel+0x260>
movl   $0x0,(%esp)
call   804b610 <time@plt>
mov    %eax,%esi
mov    0x8095d84,%eax
test   %eax,%eax
je     8056145 <print_route+0x3455>
cmpl   $0xa,0x1c(%esp)
je     8056145 <print_route+0x3455>
movl   $0x1,0x4(%esp)
movl   $0x8084c10,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8056a13 <print_route+0x3d23>
movl   $0x2,0x8(%esp)
movl   $0x8084526,0x4(%esp)
mov    %eax,(%esp)
call   804b8a0 <write@plt>
cmp    $0x1,%eax
jle    8056975 <print_route+0x3c85>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jne    80564af <print_route+0x37bf>
cmpl   $0x2,0x1c(%esp)
je     805626f <print_route+0x357f>
lea    0x5c(%esp),%eax
xor    %ebx,%ebx
mov    %eax,0x8095d8c
movl   $0x0,0x8095d90
00
movl   $0xe00,0x8095d94
00
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
movl   $0x1a,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8055f7c <print_route+0x328c>
mov    0x8095c80,%eax
movl   $0x80941e0,(%esp)
movl   $0x0,0x8095d88
00
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     805678f <print_route+0x3a9f>
mov    0x8095d88,%eax
test   %eax,%eax
je     805622c <print_route+0x353c>
call   80521c0 <do_ipaddrlabel+0x210>
add    $0x1,%ebx
test   %eax,%eax
js     8056783 <print_route+0x3a93>
movl   $0x0,(%esp)
call   804b610 <time@plt>
sub    %esi,%eax
cmp    $0x1e,%eax
jg     8056753 <print_route+0x3a63>
mov    0x8095ca4,%ebp
test   %ebp,%ebp
je     8056168 <print_route+0x3478>
mov    0x8095d88,%eax
mov    %ebx,0x8(%esp)
movl   $0x8084c98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
jmp    8056168 <print_route+0x3478>
mov    0x8095ca4,%eax
test   %eax,%eax
je     8056262 <print_route+0x3572>
test   %ebx,%ebx
jne    80562d9 <print_route+0x35e9>
mov    0x8095d84,%eax
test   %eax,%eax
je     8056256 <print_route+0x3566>
cmpl   $0xa,0x1c(%esp)
mov    $0x808a29b,%eax
jne    80562e9 <print_route+0x35f9>
movl   $0x8082f1d,(%esp)
call   804b7b0 <puts@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
mov    0xe5c(%esp),%edi
xor    %gs:0x14,%edi
jne    805674e <print_route+0x3a5e>
add    $0xe6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x4(%esp)
movl   $0x808449a,(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    80562c9 <print_route+0x35d9>
cmpb   $0x6c,0x1(%eax)
jne    80562c9 <print_route+0x35d9>
cmpb   $0x6c,0x2(%eax)
jne    80562c9 <print_route+0x35d9>
cmpb   $0x0,0x3(%eax)
jne    80562c9 <print_route+0x35d9>
movl   $0x0,0x8095d9c
00
jmp    8056073 <print_route+0x3383>
mov    %eax,0x4(%esp)
movl   $0x80844c3,(%esp)
call   80800b0 <invarg>
mov    $0x8089003,%eax
cmp    $0x1,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x80837f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8056262 <print_route+0x3572>
movl   $0x8082f55,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80563fb <print_route+0x370b>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
movl   $0x0,0x40(%esp)
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
movl   $0xffffffff,0x8095da4
ff
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   8081460 <rtnl_rtscope_a2n>
test   %eax,%eax
jne    80563bd <print_route+0x36cd>
mov    0x40(%esp),%eax
mov    %eax,0x8095da0
jmp    8055c74 <print_route+0x2f84>
xor    %edx,%edx
xor    %ebx,%ebx
xor    %eax,%eax
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
jmp    8055cf4 <print_route+0x3004>
test   %ebp,%ebp
jg     8055c17 <print_route+0x2f27>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084be8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8056271 <print_route+0x3581>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    80563eb <print_route+0x36fb>
cmpb   $0x6c,0x1(%eax)
jne    80563eb <print_route+0x36fb>
cmpb   $0x6c,0x2(%eax)
jne    80563eb <print_route+0x36fb>
cmpb   $0x0,0x3(%eax)
jne    80563eb <print_route+0x36fb>
movl   $0x0,0x8095da4
00
mov    $0xff,%eax
jmp    8056361 <print_route+0x3671>
mov    %eax,0x4(%esp)
movl   $0x8083352,(%esp)
call   80800b0 <invarg>
movl   $0x8084f55,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80564c0 <print_route+0x37d0>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
movl   $0xffffffff,0x8095dac
ff
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   8059ac0 <rtnl_rtntype_a2n>
test   %eax,%eax
jne    80565b1 <print_route+0x38c1>
mov    0x40(%esp),%eax
mov    %eax,0x8095da8
jmp    8055c74 <print_route+0x2f84>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083cf8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8056271 <print_route+0x3581>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083cd0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8056479 <print_route+0x3789>
movl   $0x8084c30,(%esp)
call   804b7b0 <puts@plt>
jmp    805613a <print_route+0x344a>
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x64,%edi
mov    %edi,0x18(%esp)
je     8056539 <print_route+0x3849>
cmpl   $0x6f,0x18(%esp)
jne    80565c4 <print_route+0x38d4>
cmpb   $0x69,0x1(%eax)
jne    80565fd <print_route+0x390d>
cmpb   $0x66,0x2(%eax)
jne    80565fd <print_route+0x390d>
cmpb   $0x0,0x3(%eax)
jne    80565fd <print_route+0x390d>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
mov    %eax,0x28(%esp)
jmp    8055c74 <print_route+0x2f84>
mov    0x24(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8056479 <print_route+0x3789>
cmpb   $0x65,0x1(%eax)
jne    805654b <print_route+0x385b>
cmpb   $0x76,0x2(%eax)
jne    805654b <print_route+0x385b>
cmpb   $0x0,0x3(%eax)
je     80564f7 <print_route+0x3807>
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x8084e9c,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80569ba <print_route+0x3cca>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
movl   $0xffffffff,0x8095dcc
ff
jmp    8055c74 <print_route+0x2f84>
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
jmp    8056513 <print_route+0x3823>
mov    0x4(%ebx),%eax
movl   $0x80844d7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmpl   $0x69,0x18(%esp)
jne    805654b <print_route+0x385b>
cmpb   $0x69,0x1(%eax)
jne    80565fd <print_route+0x390d>
cmpb   $0x66,0x2(%eax)
jne    80565fd <print_route+0x390d>
cmpb   $0x0,0x3(%eax)
jne    80565fd <print_route+0x390d>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
mov    %eax,0x24(%esp)
jmp    8055c74 <print_route+0x2f84>
mov    $0x8084e9c,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805656b <print_route+0x387b>
movl   $0x808ca0d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80566d5 <print_route+0x39e5>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   8059c90 <get_rt_realms>
test   %eax,%eax
jne    80566c2 <print_route+0x39d2>
mov    0x40(%esp),%esi
movl   $0xffffffff,0x8095dd4
ff
test   %si,%si
mov    %esi,0x8095dd0
jne    8056685 <print_route+0x3995>
mov    0x4(%ebx),%edi
mov    %edi,(%esp)
call   804b880 <strlen@plt>
cmpb   $0x2f,-0x1(%edi,%eax,1)
jne    8056685 <print_route+0x3995>
movl   $0xffff0000,0x8095dd4
ff
and    $0xffff0000,%esi
jne    8055c74 <print_route+0x2f84>
mov    0x4(%ebx),%esi
movl   $0x2f,0x4(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     80566b1 <print_route+0x39c1>
cmpb   $0x2f,(%esi)
jne    8055c74 <print_route+0x2f84>
movzwl 0x8095dd4,%eax
mov    %eax,0x8095dd4
jmp    8055c74 <print_route+0x2f84>
mov    0x4(%ebx),%eax
movl   $0x80844f3,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x80841d0,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805680d <print_route+0x3b1d>
mov    %ebp,%esi
lea    0x4(%ebx),%eax
sub    $0x1,%esi
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
movl   $0x8084503,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80567c0 <print_route+0x3ad0>
sub    $0x2,%ebp
lea    0x8(%ebx),%eax
test   %ebp,%ebp
mov    %eax,0x18(%esp)
jle    8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x8(%ebx),%eax
movl   $0x8095e78,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
call   804b660 <__stack_chk_fail@plt>
movl   $0x0,(%esp)
mov    0x8095d88,%ebx
call   804b610 <time@plt>
movl   $0x8084c54,0x4(%esp)
movl   $0x1,(%esp)
mov    %ebx,0xc(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8084508,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056879 <print_route+0x3b89>
sub    $0x2,%ebp
lea    0x8(%ebx),%eax
test   %ebp,%ebp
mov    %eax,0x18(%esp)
jle    8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x8(%ebx),%eax
movl   $0x8095ea0,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
movl   $0x8084f28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805682f <print_route+0x3b3f>
add    $0x4,%ebx
sub    $0x1,%ebp
je     8056483 <print_route+0x3793>
movl   $0x8084503,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805692b <print_route+0x3c3b>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
movl   $0x8095e28,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
movl   $0x808450e,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80568a2 <print_route+0x3bb2>
lea    -0x2(%ebp),%esi
lea    0x8(%ebx),%eax
test   %esi,%esi
mov    %eax,0x18(%esp)
jle    8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %esi,%ebp
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    (%eax),%eax
movl   $0x8095ea0,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
mov    0x8095ea0,%eax
mov    %eax,0x8095e78
mov    0x8095ea4,%eax
mov    %eax,0x8095e7c
mov    0x8095ea8,%eax
mov    %eax,0x8095e80
mov    0x8095eac,%eax
mov    %eax,0x8095e84
mov    0x8095eb0,%eax
mov    %eax,0x8095e88
mov    0x8095eb4,%eax
mov    %eax,0x8095e8c
mov    0x8095eb8,%eax
mov    %eax,0x8095e90
mov    0x8095ebc,%eax
mov    %eax,0x8095e94
mov    0x8095ec0,%eax
mov    %eax,0x8095e98
mov    0x8095ec4,%eax
mov    %eax,0x8095e9c
jmp    8055c74 <print_route+0x2f84>
movl   $0x8084508,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056a3d <print_route+0x3d4d>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
movl   $0x8095e50,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084529,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
jmp    805612d <print_route+0x343d>
mov    0x4(%ebx),%eax
movl   $0x80841ba,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmpl   $0x76,0x18(%esp)
jne    8056ae6 <print_route+0x3df6>
cmpb   $0x69,0x1(%eax)
jne    8056611 <print_route+0x3921>
cmpb   $0x61,0x2(%eax)
jne    8056611 <print_route+0x3921>
cmpb   $0x0,0x3(%eax)
jne    8056611 <print_route+0x3921>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
movl   $0x8095e00,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
mov    0x8095c40,%eax
movl   $0x8084c10,0xc(%esp)
movl   $0x8084514,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805612d <print_route+0x343d>
movl   $0x808450e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056a5f <print_route+0x3d6f>
add    $0x4,%ebx
sub    $0x1,%ebp
je     8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x8095e50,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
mov    0x8095e50,%eax
mov    %ebx,0x18(%esp)
mov    %eax,0x8095e28
mov    0x8095e54,%eax
mov    %eax,0x8095e2c
mov    0x8095e58,%eax
mov    %eax,0x8095e30
mov    0x8095e5c,%eax
mov    %eax,0x8095e34
mov    0x8095e60,%eax
mov    %eax,0x8095e38
mov    0x8095e64,%eax
mov    %eax,0x8095e3c
mov    0x8095e68,%eax
mov    %eax,0x8095e40
mov    0x8095e6c,%eax
mov    %eax,0x8095e44
mov    0x8095e70,%eax
mov    %eax,0x8095e48
mov    0x8095e74,%eax
mov    %eax,0x8095e4c
jmp    8055c74 <print_route+0x2f84>
cmpl   $0x73,0x18(%esp)
jne    8056611 <print_route+0x3921>
cmpb   $0x72,0x1(%eax)
jne    8056611 <print_route+0x3921>
cmpb   $0x63,0x2(%eax)
jne    8056611 <print_route+0x3921>
cmpb   $0x0,0x3(%eax)
jne    8056611 <print_route+0x3921>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8056483 <print_route+0x3793>
mov    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
movl   $0x8095dd8,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    8055c74 <print_route+0x2f84>
nop
mov    $0x8095d80,%edx
xor    %eax,%eax
push   %edi
mov    $0x52,%ecx
mov    %edx,%edi
mov    $0xffffffff,%edx
rep stos %eax,%es:(%edi)
mov    $0xffffffff,%eax
mov    %ax,0x8095e52
mov    %dx,0x8095ea2
pop    %edi
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    8056ce8 <do_iproute+0x178>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056c88 <do_iproute+0x118>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056cc6 <do_iproute+0x156>
mov    (%ebx),%eax
cmpb   $0x63,(%eax)
je     8056ca8 <do_iproute+0x138>
movl   $0x8083418,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056cf8 <do_iproute+0x188>
movl   $0x8084545,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056d28 <do_iproute+0x1b8>
movl   $0x808454d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056d10 <do_iproute+0x1a0>
movl   $0x8084554,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056d40 <do_iproute+0x1d0>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056d54 <do_iproute+0x1e4>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056c74 <do_iproute+0x104>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056d6c <do_iproute+0x1fc>
add    $0x14,%esp
xor    %ecx,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8055ba0 <print_route+0x2eb0>
xchg   %ax,%ax
add    $0x4,%ebx
mov    $0x600,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x18,%al
pop    %ebx
pop    %esi
jmp    8054390 <print_route+0x16a0>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x68,0x1(%eax)
jne    8056bc4 <do_iproute+0x54>
cmpb   $0x67,0x2(%eax)
jne    8056bc4 <do_iproute+0x54>
cmpb   $0x0,0x3(%eax)
jne    8056bc4 <do_iproute+0x54>
add    $0x4,%ebx
mov    $0x100,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x18,%eax
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    8054390 <print_route+0x16a0>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %ecx,%ecx
pop    %ebx
xor    %edx,%edx
pop    %esi
xor    %eax,%eax
jmp    8055ba0 <print_route+0x2eb0>
add    $0x4,%ebx
mov    $0x500,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    8056c97 <do_iproute+0x127>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
mov    $0xc00,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    8056c97 <do_iproute+0x127>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
mov    $0x400,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    8056c97 <do_iproute+0x127>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
mov    $0x200,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    8056c97 <do_iproute+0x127>
add    $0x4,%ebx
xor    %edx,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x19,%al
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    8054390 <print_route+0x16a0>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056c74 <do_iproute+0x104>
movl   $0x8084559,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056e17 <do_iproute+0x2a7>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056e27 <do_iproute+0x2b7>
movl   $0x8083434,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056e3c <do_iproute+0x2cc>
movl   $0x8083442,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056eae <do_iproute+0x33e>
movl   $0x8083439,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8056e80 <do_iproute+0x310>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8056e51 <do_iproute+0x2e1>
call   8052210 <do_ipaddrlabel+0x260>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    804bc58 <__sprintf_chk@plt+0xa8>
add    $0x14,%esp
mov    $0x1,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8055ba0 <print_route+0x2eb0>
add    $0x14,%esp
mov    $0x2,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8055ba0 <print_route+0x2eb0>
mov    (%ebx),%eax
movl   $0x8084cc0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   804c309 <__sprintf_chk@plt+0x759>
test   %eax,%eax
jne    8056e74 <do_iproute+0x304>
movl   $0x0,0x8(%esp)
movl   $0x8054360,0x4(%esp)
mov    0x8095c70,%eax
mov    %eax,(%esp)
call   807e830 <rtnl_from_file>
mov    %eax,(%esp)
call   804b800 <exit@plt>
call   804c309 <__sprintf_chk@plt+0x759>
test   %eax,%eax
jne    8056e74 <do_iproute+0x304>
movl   $0x0,0x8(%esp)
movl   $0x80526a0,0x4(%esp)
jmp    8056e99 <do_iproute+0x329>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1fc,%esp
mov    0x214(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x1ec(%esp)
xor    %eax,%eax
mov    0x218(%esp),%esi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%ecx
lea    -0x20(%eax),%edx
xor    %eax,%eax
cmp    $0x1,%dx
jbe    8056f28 <print_rule+0x58>
mov    0x1ec(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8057681 <print_rule+0x7b1>
add    $0x1fc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
sub    $0x1c,%ecx
js     8057652 <print_rule+0x782>
lea    0x1c(%ebx),%eax
mov    $0x20,%edi
mov    %eax,0x8(%esp)
lea    0x24(%esp),%eax
mov    %ecx,0xc(%esp)
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
movzbl 0x10(%ebx),%eax
cmp    $0x2,%al
je     8056f7c <print_rule+0xac>
cmp    $0xa,%al
mov    $0x80,%di
je     8056f7c <print_rule+0xac>
cmp    $0xc,%al
mov    $0x10,%di
je     8056f7c <print_rule+0xac>
cmp    $0x4,%al
mov    $0xffffffff,%edi
mov    $0x50,%eax
cmove  %eax,%edi
cmpw   $0x21,0x4(%ebx)
je     8057560 <print_rule+0x690>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8057510 <print_rule+0x640>
mov    0x4(%eax),%eax
movl   $0x8084d44,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
testb  $0x2,0x18(%ebx)
jne    8057330 <print_rule+0x460>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     80574b0 <print_rule+0x5e0>
lea    0xec(%esp),%edx
movzbl 0x12(%ebx),%ebp
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    %edi,%ebp
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
je     8057418 <print_rule+0x548>
call   8080470 <rt_addr_n2a>
mov    %ebp,0x10(%esp)
movl   $0x8083fa1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x28(%esp),%eax
test   %eax,%eax
je     80574e0 <print_rule+0x610>
lea    0xec(%esp),%edx
movzbl 0x11(%ebx),%ebp
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    %edi,%ebp
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
je     80573f0 <print_rule+0x520>
call   8080470 <rt_addr_n2a>
mov    %ebp,0x10(%esp)
movl   $0x8084d67,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x13(%ebx),%eax
test   %al,%al
jne    80572f0 <print_rule+0x420>
mov    0x4c(%esp),%eax
test   %eax,%eax
je     8057490 <print_rule+0x5c0>
mov    0x4(%eax),%edx
mov    0x64(%esp),%eax
test   %eax,%eax
je     8057210 <print_rule+0x340>
mov    0x4(%eax),%eax
cmp    $0xffffffff,%eax
je     8057210 <print_rule+0x340>
mov    %eax,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8084d7a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8057110 <print_rule+0x240>
add    $0x4,%eax
mov    %eax,0xc(%esp)
movl   $0x8084d99,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
testb  $0x8,0x18(%ebx)
jne    8057440 <print_rule+0x570>
mov    0x68(%esp),%eax
test   %eax,%eax
je     8057141 <print_rule+0x271>
add    $0x4,%eax
mov    %eax,0xc(%esp)
movl   $0x8084dad,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
testb  $0x10,0x18(%ebx)
jne    8057468 <print_rule+0x598>
mov    0x60(%esp),%eax
movzbl 0x14(%ebx),%edx
test   %eax,%eax
je     80574a8 <print_rule+0x5d8>
mov    0x4(%eax),%eax
test   %eax,%eax
jne    8057238 <print_rule+0x368>
mov    0x50(%esp),%eax
test   %eax,%eax
je     80571ab <print_rule+0x2db>
mov    0x4(%eax),%eax
lea    0x6c(%esp),%edi
mov    %eax,%edx
movzwl %ax,%ebp
shr    $0x10,%edx
test   %edx,%edx
jne    80573b8 <print_rule+0x4e8>
movl   $0x40,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x17(%ebx),%eax
cmp    $0xa,%al
je     8057358 <print_rule+0x488>
cmp    $0x2,%al
je     8057588 <print_rule+0x6b8>
cmp    $0x3,%al
je     8057608 <print_rule+0x738>
cmp    $0x1,%al
je     80571ef <print_rule+0x31f>
lea    0x6c(%esp),%edx
movl   $0x40,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8059a00 <rtnl_rtntype_n2a>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
jmp    8056f08 <print_rule+0x38>
xchg   %ax,%ax
mov    %edx,0xc(%esp)
movl   $0x8084d8c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80570df <print_rule+0x20f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x6c(%esp),%edi
movl   $0x40,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8081700 <rtnl_rttable_n2a>
movl   $0x8084db5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x5c(%esp),%eax
test   %eax,%eax
je     8057298 <print_rule+0x3c8>
mov    0x4(%eax),%eax
cmp    $0xffffffff,%eax
je     8057298 <print_rule+0x3c8>
mov    %eax,0xc(%esp)
movl   $0x8084dc0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x58(%esp),%eax
test   %eax,%eax
je     805715c <print_rule+0x28c>
mov    0x4(%eax),%eax
cmp    $0xffffffff,%eax
je     805715c <print_rule+0x28c>
lea    0xac(%esp),%edx
movl   $0x40,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8081bf0 <rtnl_group_n2a>
movl   $0x8084dda,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805715c <print_rule+0x28c>
lea    0x0(%esi,%eiz,1),%esi
lea    0xac(%esp),%edx
movl   $0x40,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80818e0 <rtnl_dsfield_n2a>
movl   $0x8083fc1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8057098 <print_rule+0x1c8>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084d4d,(%esp)
call   804b710 <fwrite@plt>
jmp    8056fbc <print_rule+0xec>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
test   %eax,%eax
je     805762d <print_rule+0x75d>
lea    0xec(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x8084dfa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80571ef <print_rule+0x31f>
lea    0x0(%esi),%esi
movl   $0x40,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   8081550 <rtnl_rtrealm_n2a>
movl   $0x8084def,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805717b <print_rule+0x2ab>
lea    0x0(%esi),%esi
call   80805b0 <format_host>
movl   $0x8084dfe,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805708c <print_rule+0x1bc>
xchg   %ax,%ax
call   80805b0 <format_host>
movl   $0x8083fad,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8057024 <print_rule+0x154>
xchg   %ax,%ax
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084da1,(%esp)
call   804b710 <fwrite@plt>
jmp    8057110 <print_rule+0x240>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084da1,(%esp)
call   804b710 <fwrite@plt>
jmp    8057141 <print_rule+0x271>
lea    0x0(%esi),%esi
mov    0x64(%esp),%eax
xor    %edx,%edx
test   %eax,%eax
jne    80570b3 <print_rule+0x1e3>
xchg   %ax,%ax
jmp    80570df <print_rule+0x20f>
lea    0x0(%esi),%esi
movzbl %dl,%eax
jmp    8057154 <print_rule+0x284>
movzbl 0x12(%ebx),%eax
test   %al,%al
je     8057538 <print_rule+0x668>
mov    %eax,0xc(%esp)
movl   $0x8084d52,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8057024 <print_rule+0x154>
lea    0x0(%esi),%esi
movzbl 0x11(%ebx),%eax
test   %al,%al
je     805708c <print_rule+0x1bc>
mov    %eax,0xc(%esp)
movl   $0x8084d71,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805708c <print_rule+0x1bc>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084d49,(%esp)
call   804b710 <fwrite@plt>
jmp    8056fb2 <print_rule+0xe2>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084d5d,(%esp)
call   804b710 <fwrite@plt>
jmp    8057024 <print_rule+0x154>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    8056f87 <print_rule+0xb7>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e10,(%esp)
call   804b710 <fwrite@plt>
mov    0x34(%esp),%eax
test   %eax,%eax
je     805765c <print_rule+0x78c>
mov    0x4(%eax),%eax
movl   $0x80886cd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
testb  $0x4,0x18(%ebx)
je     80571ef <print_rule+0x31f>
mov    %esi,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e16,(%esp)
call   804b710 <fwrite@plt>
jmp    80571ef <print_rule+0x31f>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e24,(%esp)
call   804b710 <fwrite@plt>
jmp    80571ef <print_rule+0x31f>
mov    %esi,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e05,(%esp)
call   804b710 <fwrite@plt>
jmp    80571ef <print_rule+0x31f>
mov    $0xffffffff,%eax
jmp    8056f08 <print_rule+0x38>
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086369,(%esp)
call   804b710 <fwrite@plt>
jmp    80575d3 <print_rule+0x703>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084f5c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x57,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084f9c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084ff4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e28,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085030,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085060,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e46,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084e61,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808508c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80850bc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80850ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x90,%esp
mov    0xa4(%esp),%ebx
mov    (%ebx),%eax
sub    $0x1c,%eax
js     80578f0 <print_rule+0xa20>
mov    %eax,0xc(%esp)
lea    0x1c(%ebx),%eax
xor    %edi,%edi
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x60(%esp),%ecx
test   %ecx,%ecx
je     80578de <print_rule+0xa0e>
mov    $0x21,%eax
mov    $0x1,%edx
lea    0x24(%esp),%esi
mov    %ax,0x4(%ebx)
mov    %dx,0x6(%ebx)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   807d910 <rtnl_open>
test   %eax,%eax
js     80578f0 <print_rule+0xa20>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     80578f8 <print_rule+0xa28>
mov    %esi,(%esp)
call   807d670 <rtnl_close>
add    $0x90,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    $0xffffffff,%edi
jmp    80578de <print_rule+0xa0e>
nop
mov    $0xfffffffe,%edi
jmp    80578de <print_rule+0xa0e>
nop
sub    $0x1c,%esp
mov    0x8095ca8,%edx
mov    $0x2,%ecx
test   %edx,%edx
cmove  %ecx,%edx
test   %eax,%eax
jg     80579a8 <print_rule+0xad8>
movl   $0x22,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8057960 <print_rule+0xa90>
mov    0x8095c80,%eax
movl   $0x8056ed0,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
xor    %edx,%edx
test   %eax,%eax
js     8057978 <print_rule+0xaa8>
mov    %edx,%eax
add    $0x1c,%esp
ret
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
mov    $0x1,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
nop
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0x1,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085120,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%edx
add    $0x1c,%esp
mov    %edx,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x47c,%esp
mov    $0x107,%ecx
mov    %eax,0x1c(%esp)
lea    0x50(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
cmp    $0x20,%esi
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    $0x1,%edi
mov    %si,0x54(%esp)
movl   $0x1c,0x50(%esp)
mov    %di,0x56(%esp)
mov    %eax,%edx
mov    %al,0x60(%esp)
movb   $0x3,0x65(%esp)
je     8057dcd <print_rule+0xefd>
test   %ebp,%ebp
jle    8057e2d <print_rule+0xf5d>
movl   $0x0,0x18(%esp)
xchg   %ax,%ax
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x6e,%edi
mov    %edi,0x14(%esp)
jne    8057a80 <print_rule+0xbb0>
cmpb   $0x6f,0x1(%eax)
je     8057b80 <print_rule+0xcb0>
mov    $0x80841d0,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8057aa0 <print_rule+0xbd0>
jmp    8057ba7 <print_rule+0xcd7>
lea    0x0(%esi),%esi
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x80841d0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8057ba0 <print_rule+0xcd0>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
movzbl 0x60(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzwl 0x2a(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %al,0x62(%esp)
movzbl 0x29(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %esi,%ebx
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jg     8057a50 <print_rule+0xb80>
mov    0x18(%esp),%eax
movzbl 0x60(%esp),%edx
test   %eax,%eax
sete   %al
test   %dl,%dl
jne    8057b25 <print_rule+0xc55>
movb   $0x2,0x60(%esp)
test   %al,%al
jne    8057db8 <print_rule+0xee8>
lea    0x50(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
sar    $0x1f,%eax
and    $0x2,%eax
mov    0x46c(%esp),%edx
xor    %gs:0x14,%edx
jne    80580d2 <print_rule+0x1202>
add    $0x47c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmpb   $0x74,0x2(%eax)
jne    8057a68 <print_rule+0xb98>
cmpb   $0x0,0x3(%eax)
jne    8057a68 <print_rule+0xb98>
orl    $0x2,0x68(%esp)
jmp    8057b00 <print_rule+0xc30>
xchg   %ax,%ax
cmpl   $0x74,0x14(%esp)
je     8057c20 <print_rule+0xd50>
movl   $0x808424f,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8057c80 <print_rule+0xdb0>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8057ff3 <print_rule+0x1123>
mov    0x28(%esp),%eax
movl   $0x6,0x8(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %esi,%ebx
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    8057b00 <print_rule+0xc30>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x6f,0x1(%eax)
jne    8057ba7 <print_rule+0xcd7>
cmpb   $0x0,0x2(%eax)
jne    8057ba7 <print_rule+0xcd7>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
movzbl 0x60(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzwl 0x2a(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %al,0x61(%esp)
movzbl 0x29(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
jmp    8057aea <print_rule+0xc1a>
nop
movl   $0x8084e77,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057bbf <print_rule+0xcef>
movl   $0x8084246,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057bbf <print_rule+0xcef>
mov    (%ebx),%eax
cmpb   $0x74,(%eax)
je     8057de1 <print_rule+0xf11>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057dff <print_rule+0xf2f>
mov    (%ebx),%eax
mov    $0x8084e9a,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8057e3c <print_rule+0xf6c>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x14(%esp)
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%edi
movl   $0x2f,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
mov    %eax,%esi
je     8057d1c <print_rule+0xe4c>
movb   $0x0,(%eax)
mov    0x4(%ebx),%edi
lea    0x24(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    80580af <print_rule+0x11df>
mov    0x24(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
test   %esi,%esi
je     8057dab <print_rule+0xedb>
add    $0x1,%esi
lea    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    80580c2 <print_rule+0x11f2>
mov    0x28(%esp),%eax
movl   $0x10,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
mov    0x14(%esp),%ebx
jmp    8057b00 <print_rule+0xc30>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x20,0x1c(%esp)
jne    8057b2d <print_rule+0xc5d>
movb   $0xfe,0x64(%esp)
jmp    8057b2d <print_rule+0xc5d>
mov    $0x601,%ecx
mov    %cx,0x56(%esp)
movb   $0x1,0x67(%esp)
jmp    8057a3e <print_rule+0xb6e>
cmpb   $0x6f,0x1(%eax)
jne    8057cbf <print_rule+0xdef>
cmpb   $0x73,0x2(%eax)
jne    8057cbf <print_rule+0xdef>
cmpb   $0x0,0x3(%eax)
jne    8057cbf <print_rule+0xdef>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    8057e84 <print_rule+0xfb4>
mov    0x28(%esp),%eax
mov    %esi,%ebx
mov    %al,0x63(%esp)
jmp    8057b00 <print_rule+0xc30>
mov    $0x1,%eax
jmp    8057b1c <print_rule+0xc4c>
call   8080010 <incomplete_command>
movl   $0x808ca0d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8057eaa <print_rule+0xfda>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   8059c90 <get_rt_realms>
test   %eax,%eax
jne    8057e97 <print_rule+0xfc7>
mov    0x28(%esp),%eax
movl   $0xb,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8057bfe <print_rule+0xd2e>
mov    0x4(%ebx),%eax
movl   $0x80841ba,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80844f3,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8082d54,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057ed2 <print_rule+0x1002>
mov    (%ebx),%eax
mov    $0x8084ed3,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8057f1b <print_rule+0x104b>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   80817b0 <rtnl_rttable_a2n>
test   %eax,%eax
jne    8058030 <print_rule+0x1160>
mov    0x28(%esp),%eax
cmp    $0xff,%eax
ja     8058006 <print_rule+0x1136>
mov    %al,0x64(%esp)
mov    %esi,%ebx
movl   $0x1,0x18(%esp)
jmp    8057b00 <print_rule+0xc30>
movl   $0x8084eec,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057f41 <print_rule+0x1071>
mov    (%ebx),%eax
mov    $0x8084f02,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8057f8d <print_rule+0x10bd>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807f800 <get_s32>
test   %eax,%eax
jne    8058043 <print_rule+0x1173>
mov    0x28(%esp),%eax
test   %eax,%eax
js     8058043 <print_rule+0x1173>
mov    %eax,0xc(%esp)
movl   $0xe,0x8(%esp)
jmp    8057bfe <print_rule+0xd2e>
movl   $0x8084f09,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8057fb7 <print_rule+0x10e7>
mov    (%ebx),%eax
mov    $0x8084f1a,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8058056 <print_rule+0x1186>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   8081ab0 <rtnl_group_a2n>
test   %eax,%eax
jne    80580d7 <print_rule+0x1207>
mov    0x28(%esp),%eax
movl   $0xd,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8057bfe <print_rule+0xd2e>
mov    0x4(%ebx),%eax
movl   $0x8084e7d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
movl   $0xf,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x64(%esp)
call   807eba0 <addattr32>
jmp    8057f0c <print_rule+0x103c>
mov    0x4(%ebx),%eax
movl   $0x8084eda,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8085150,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movzbl (%eax),%edx
cmp    $0x64,%edx
jne    80580ea <print_rule+0x121a>
cmpb   $0x65,0x1(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x76,0x2(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x0,0x3(%eax)
jne    8058103 <print_rule+0x1233>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%ebx
mov    %ebx,(%esp)
call   804b880 <strlen@plt>
mov    %ebx,0xc(%esp)
movl   $0x3,0x8(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
jmp    8057aea <print_rule+0xc1a>
mov    0x4(%ebx),%eax
movl   $0x8084ea1,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %esi,0x4(%esp)
movl   $0x8084eba,(%esp)
call   80800b0 <invarg>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebx),%eax
movl   $0x8085178,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmp    $0x69,%edx
jne    8058247 <print_rule+0x1377>
cmpb   $0x69,0x1(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x66,0x2(%eax)
je     8058076 <print_rule+0x11a6>
movl   $0x8084f24,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805817f <print_rule+0x12af>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808519c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x4(%ebx),%eax
mov    %esi,%ebx
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
movl   $0x5,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
movb   $0xa,0x67(%esp)
jmp    8057b00 <print_rule+0xc30>
mov    (%ebx),%eax
mov    $0x8084f55,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80581a2 <print_rule+0x12d2>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8058317 <print_rule+0x1447>
movl   $0x8084f2b,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80582d8 <print_rule+0x1408>
sub    $0x1,%ebp
movl   $0x2,0x24(%esp)
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8058299 <print_rule+0x13c9>
mov    0x28(%esp),%eax
mov    %esi,%ebx
movl   $0x4,0x8(%esp)
movl   $0x41c,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
movzbl 0x24(%esp),%edx
mov    %dl,0x67(%esp)
movl   $0x1,0x18(%esp)
jmp    8057b00 <print_rule+0xc30>
cmp    $0x6f,%edx
jne    80582ac <print_rule+0x13dc>
cmpb   $0x69,0x1(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x66,0x2(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x0,0x3(%eax)
jne    8058103 <print_rule+0x1233>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8057e37 <print_rule+0xf67>
mov    0x4(%ebx),%ebx
mov    %ebx,(%esp)
call   804b880 <strlen@plt>
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
jmp    8057aea <print_rule+0xc1a>
mov    0x4(%ebx),%eax
movl   $0x8084f30,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmp    $0x6e,%edx
jne    8058103 <print_rule+0x1233>
cmpb   $0x61,0x1(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x74,0x2(%eax)
jne    8058103 <print_rule+0x1233>
cmpb   $0x0,0x3(%eax)
je     8058117 <print_rule+0x1247>
jmp    8058103 <print_rule+0x1233>
movl   $0x8084e24,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
mov    $0x3,%edx
test   %eax,%eax
je     8058236 <print_rule+0x1366>
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x24(%esp),%eax
mov    %eax,(%esp)
call   8059ac0 <rtnl_rtntype_a2n>
test   %eax,%eax
jne    805831c <print_rule+0x144c>
movzbl 0x24(%esp),%edx
jmp    8058236 <print_rule+0x1366>
call   8057690 <print_rule+0x7c0>
mov    (%ebx),%eax
movl   $0x8084f40,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
push   %edi
xor    %eax,%eax
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    0x24(%esp),%esi
test   %ebx,%ebx
jle    8058373 <do_iprule+0x43>
movl   $0x8083420,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8058370 <do_iprule+0x40>
movl   $0x808342a,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8058380 <do_iprule+0x50>
lea    -0x1(%ebx),%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8057900 <print_rule+0xa30>
xchg   %ax,%ax
movl   $0x8083425,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8058370 <do_iprule+0x40>
movl   $0x808340d,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8058400 <do_iprule+0xd0>
movl   $0x8085f9e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8058418 <do_iprule+0xe8>
movl   $0x808342e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%edi
je     8058428 <do_iprule+0xf8>
movl   $0x8082d28,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8058485 <do_iprule+0x155>
call   8057690 <print_rule+0x7c0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%esi),%ecx
mov    $0x20,%al
lea    -0x1(%ebx),%edx
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    80579e0 <print_rule+0xb10>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%esi),%ecx
mov    $0x21,%al
lea    -0x1(%ebx),%edx
jmp    8058408 <do_iprule+0xd8>
lea    0x0(%esi),%esi
mov    0x8095ca8,%eax
mov    $0x2,%edx
test   %eax,%eax
cmove  %edx,%eax
cmp    $0x1,%ebx
jne    80584f3 <do_iprule+0x1c3>
movl   $0x22,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     80584b4 <do_iprule+0x184>
movl   $0x0,0x8(%esp)
movl   $0x8057840,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     80584c7 <do_iprule+0x197>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    (%esi),%eax
movl   $0x80851ec,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
mov    $0x1,%edi
call   804b700 <perror@plt>
jmp    805847c <do_iprule+0x14c>
mov    0x8095c40,%eax
mov    $0x1,%edi
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    805847c <do_iprule+0x14c>
mov    0x8095c40,%eax
mov    $0xffffffff,%edi
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80851c0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    805847c <do_iprule+0x14c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x8095ca8,%eax
mov    0x20(%esp),%edx
mov    0x24(%esp),%ecx
cmp    $0xa,%eax
je     80585b0 <do_multirule+0x80>
jle    8058568 <do_multirule+0x38>
lea    -0x80(%eax),%ebx
cmp    $0x1,%ebx
ja     8058580 <do_multirule+0x50>
mov    %ecx,0x24(%esp)
mov    %edx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8058330 <do_iprule>
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     8058571 <do_multirule+0x41>
cmp    $0x2,%eax
jne    8058580 <do_multirule+0x50>
movl   $0x80,0x8095ca8
00
jmp    8058550 <do_multirule+0x20>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x808521c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
movl   $0x81,0x8095ca8
00
jmp    8058550 <do_multirule+0x20>
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x4,%esp
movsbl (%eax),%ebx
test   %bl,%bl
je     80585f8 <do_multirule+0xc8>
call   804bb90 <__ctype_b_loc@plt>
mov    (%eax),%eax
jmp    80585e2 <do_multirule+0xb2>
nop
add    $0x1,%esi
movsbl (%esi),%ebx
test   %bl,%bl
je     80585f8 <do_multirule+0xc8>
testb  $0x8,0x1(%eax,%ebx,2)
jne    80585d8 <do_multirule+0xa8>
add    $0x4,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x20ec,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0x20dc(%esp)
xor    %ecx,%ecx
test   %eax,%eax
jle    80588c4 <do_multirule+0x394>
cmp    $0x1,%eax
jne    8058830 <do_multirule+0x300>
mov    (%edx),%ebx
mov    %ebx,%eax
call   80585c0 <do_multirule+0x90>
test   %eax,%eax
je     805885f <do_multirule+0x32f>
mov    %ebx,0x14(%esp)
lea    0xdc(%esp),%ebx
movl   $0x8085284,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
js     805888a <do_multirule+0x35a>
lea    0x2c(%esp),%edx
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   804b7c0 <__fxstat@plt>
test   %eax,%eax
js     80588a7 <do_multirule+0x377>
movl   $0x80852ae,(%esp)
call   804bb80 <opendir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     80587e8 <do_multirule+0x2b8>
lea    0x10dc(%esp),%esi
lea    0x84(%esp),%edi
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
mov    %eax,%edx
je     80587b8 <do_multirule+0x288>
cmpb   $0x2e,0xb(%edx)
je     8058788 <do_multirule+0x258>
lea    0xb(%edx),%ebp
mov    %ebp,0x18(%esp)
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %esi,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
call   804b6f0 <__xstat@plt>
test   %eax,%eax
jne    80586db <do_multirule+0x1ab>
mov    0x84(%esp),%eax
mov    0x88(%esp),%edx
xor    0x30(%esp),%edx
xor    0x2c(%esp),%eax
or     %eax,%edx
jne    80586db <do_multirule+0x1ab>
mov    0x38(%esp),%eax
cmp    %eax,0x90(%esp)
jne    80586db <do_multirule+0x1ab>
mov    %ebp,(%esp)
call   804b7b0 <puts@plt>
jmp    80586db <do_multirule+0x1ab>
lea    0x0(%esi),%esi
movzbl 0xc(%edx),%eax
test   %al,%al
je     80586db <do_multirule+0x1ab>
cmp    $0x2e,%al
jne    80586f7 <do_multirule+0x1c7>
cmpb   $0x0,0xd(%edx)
jne    80586f7 <do_multirule+0x1c7>
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
mov    %eax,%edx
jne    80586ed <do_multirule+0x1bd>
mov    %ebx,(%esp)
call   804bb70 <closedir@plt>
xor    %eax,%eax
mov    0x20dc(%esp),%ecx
xor    %gs:0x14,%ecx
jne    80588f3 <do_multirule+0x3c3>
add    $0x20ec,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    (%eax),%edx
xor    %eax,%eax
cmp    $0x2,%edx
je     80587c2 <do_multirule+0x292>
mov    %edx,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80852ae,0xc(%esp)
movl   $0x8085504,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80587c2 <do_multirule+0x292>
xchg   %ax,%ax
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085269,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    80587c2 <do_multirule+0x292>
mov    %ebx,0xc(%esp)
movl   $0x80854bc,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80587c2 <do_multirule+0x292>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80854e0,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805886b <do_multirule+0x33b>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085294,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805886b <do_multirule+0x33b>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085257,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    80587c2 <do_multirule+0x292>
call   804b660 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x20ec,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0x20dc(%esp)
xor    %ecx,%ecx
test   %eax,%eax
jle    8058b1b <do_multirule+0x5eb>
cmp    $0x1,%eax
jne    8058a98 <do_multirule+0x568>
mov    (%edx),%eax
lea    0xdc(%esp),%ebx
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
mov    %eax,0x18(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
js     8058afe <do_multirule+0x5ce>
lea    0x2c(%esp),%edx
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
call   804b7c0 <__fxstat@plt>
test   %eax,%eax
js     8058ac4 <do_multirule+0x594>
movl   $0x80852d6,(%esp)
call   804bb80 <opendir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8058b4a <do_multirule+0x61a>
lea    0x10dc(%esp),%esi
lea    0x84(%esp),%edi
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
je     8058a68 <do_multirule+0x538>
lea    0xb(%eax),%ebp
mov    %ebp,%eax
call   80585c0 <do_multirule+0x90>
test   %eax,%eax
je     80589c8 <do_multirule+0x498>
mov    %ebp,0x14(%esp)
movl   $0x8085284,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %esi,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
call   804b6f0 <__xstat@plt>
test   %eax,%eax
jne    80589c8 <do_multirule+0x498>
mov    0x84(%esp),%eax
mov    0x88(%esp),%edx
xor    0x30(%esp),%edx
xor    0x2c(%esp),%eax
or     %eax,%edx
jne    80589c8 <do_multirule+0x498>
mov    0x38(%esp),%eax
cmp    %eax,0x90(%esp)
jne    80589c8 <do_multirule+0x498>
mov    %ebp,(%esp)
call   804b7b0 <puts@plt>
jmp    80589c8 <do_multirule+0x498>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   804bb70 <closedir@plt>
xor    %eax,%eax
mov    0x20dc(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8058b6a <do_multirule+0x63a>
add    $0x20ec,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085269,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8058a72 <do_multirule+0x542>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085294,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8058a72 <do_multirule+0x542>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80854e0,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8058adf <do_multirule+0x5af>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80852bd,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8058a72 <do_multirule+0x542>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80852dd,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8058adf <do_multirule+0x5af>
call   804b660 <__stack_chk_fail@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x404c,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0x403c(%esp)
xor    %ecx,%ecx
test   %eax,%eax
mov    %edx,0x28(%esp)
jle    8058fd8 <do_multirule+0xaa8>
cmp    $0x1,%eax
je     8058eea <do_multirule+0x9ba>
mov    0x28(%esp),%eax
lea    0x3c(%esp),%esi
mov    (%eax),%ebx
mov    0x4(%eax),%eax
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
mov    %ebx,0x18(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x2c(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x80000,0x4(%esp)
mov    %esi,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
js     8058f57 <do_multirule+0xa27>
movl   $0x40000000,0x4(%esp)
mov    %eax,(%esp)
call   804b690 <setns@plt>
test   %eax,%eax
js     8058f19 <do_multirule+0x9e9>
movl   $0x20000,(%esp)
call   804b5c0 <unshare@plt>
test   %eax,%eax
js     8058f78 <do_multirule+0xa48>
movl   $0x0,0x10(%esp)
movl   $0x84000,0xc(%esp)
movl   $0x8086369,0x8(%esp)
movl   $0x80852db,0x4(%esp)
movl   $0x808a29b,(%esp)
call   804ba30 <mount@plt>
test   %eax,%eax
jne    8058eb0 <do_multirule+0x980>
movl   $0x2,0x4(%esp)
movl   $0x8085321,(%esp)
call   804ba90 <umount2@plt>
test   %eax,%eax
js     8058f98 <do_multirule+0xa68>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x8085341,0x8(%esp)
movl   $0x8085321,0x4(%esp)
mov    %ebx,(%esp)
call   804ba30 <mount@plt>
test   %eax,%eax
js     8058fb8 <do_multirule+0xa88>
lea    0x103c(%esp),%esi
mov    %ebx,0x18(%esp)
movl   $0x8085347,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %esi,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    %esi,(%esp)
call   804bb80 <opendir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8058e08 <do_multirule+0x8d8>
lea    0x203c(%esp),%ebp
lea    0x303c(%esp),%edi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
je     8058e00 <do_multirule+0x8d0>
cmpb   $0x2e,0xb(%eax)
je     8058e88 <do_multirule+0x958>
lea    0xb(%eax),%edx
mov    %edx,0x18(%esp)
mov    %esi,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebp,(%esp)
mov    %edx,0x24(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x24(%esp),%edx
movl   $0x8085352,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edx,0x14(%esp)
movl   $0x1000,0x4(%esp)
mov    %edi,(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x0,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x8086369,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   804ba30 <mount@plt>
test   %eax,%eax
jns    8058d08 <do_multirule+0x7d8>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %edi,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x808535a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
jne    8058d18 <do_multirule+0x7e8>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   804bb70 <closedir@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
mov    0x8095c88,%eax
test   %eax,%eax
je     8059007 <do_multirule+0xad7>
call   804ba00 <fork@plt>
test   %eax,%eax
js     8059033 <do_multirule+0xb03>
nop
je     8059007 <do_multirule+0xad7>
lea    0x38(%esp),%edx
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804b720 <waitpid@plt>
test   %eax,%eax
js     8059057 <do_multirule+0xb27>
mov    0x38(%esp),%eax
test   $0x7f,%al
jne    805904b <do_multirule+0xb1b>
movzbl %ah,%eax
neg    %eax
mov    0x403c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805902e <do_multirule+0xafe>
add    $0x404c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movzbl 0xc(%eax),%edx
test   %dl,%dl
je     8058d08 <do_multirule+0x7d8>
cmp    $0x2e,%dl
jne    8058d22 <do_multirule+0x7f2>
cmpb   $0x0,0xd(%eax)
je     8058d08 <do_multirule+0x7d8>
jmp    8058d22 <do_multirule+0x7f2>
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x808557c,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8058e67 <do_multirule+0x937>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80852f7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8058e67 <do_multirule+0x937>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x808554c,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8058e67 <do_multirule+0x937>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x8085524,0x8(%esp)
mov    %eax,0x10(%esp)
jmp    8058f38 <do_multirule+0xa08>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x808530d,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8058ecb <do_multirule+0x99b>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085326,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8058ecb <do_multirule+0x99b>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085327,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8058ecb <do_multirule+0x99b>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80852bd,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8058e67 <do_multirule+0x937>
mov    0x28(%esp),%eax
add    $0x4,%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804b6a0 <execvp@plt>
test   %eax,%eax
js     805906f <do_multirule+0xb3f>
movl   $0x1,(%esp)
call   804b5a0 <_exit@plt>
call   804b660 <__stack_chk_fail@plt>
movl   $0x8085374,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8085379,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085381,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8059022 <do_multirule+0xaf2>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
movl   $0x80852ae,(%esp)
call   804bb80 <opendir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8059100 <do_multirule+0xbd0>
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
mov    %eax,%edx
je     80590f8 <do_multirule+0xbc8>
cmpb   $0x2e,0xb(%edx)
je     8059108 <do_multirule+0xbd8>
add    $0xb,%edx
mov    %edx,(%esp)
call   804b7b0 <puts@plt>
mov    %ebx,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
mov    %eax,%edx
jne    80590d4 <do_multirule+0xba4>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   804bb70 <closedir@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
movzbl 0xc(%edx),%eax
test   %al,%al
je     80590c6 <do_multirule+0xb96>
cmp    $0x2e,%al
jne    80590da <do_multirule+0xbaa>
cmpb   $0x0,0xd(%edx)
je     80590c6 <do_multirule+0xb96>
jmp    80590da <do_multirule+0xbaa>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x1038,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0x102c(%esp)
xor    %ecx,%ecx
test   %eax,%eax
jle    80591ab <do_multirule+0xc7b>
mov    (%edx),%eax
lea    0x2c(%esp),%ebx
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
mov    %eax,0x18(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   804ba90 <umount2@plt>
mov    %ebx,(%esp)
call   804b680 <unlink@plt>
test   %eax,%eax
js     80591d7 <do_multirule+0xca7>
xor    %eax,%eax
mov    0x102c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8059212 <do_multirule+0xce2>
add    $0x1038,%esp
pop    %ebx
ret
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80852bd,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8059193 <do_multirule+0xc63>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x80855a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8059193 <do_multirule+0xc63>
call   804b660 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x104c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x103c(%esp)
xor    %eax,%eax
test   %edi,%edi
mov    %edx,0x24(%esp)
jle    8059492 <do_multirule+0xf62>
mov    0x24(%esp),%eax
lea    0x3c(%esp),%esi
xor    %ebx,%ebx
mov    (%eax),%eax
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
mov    %eax,0x18(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x28(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x1ed,0x4(%esp)
movl   $0x80852ae,(%esp)
call   804b920 <mkdir@plt>
jmp    80592fb <do_multirule+0xdcb>
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    (%eax),%edx
mov    %eax,%ebp
cmp    $0x16,%edx
jne    80593f8 <do_multirule+0xec8>
test   %ebx,%ebx
jne    80593f8 <do_multirule+0xec8>
movl   $0x0,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x8086369,0x8(%esp)
movl   $0x80852ae,0x4(%esp)
movl   $0x80852ae,(%esp)
call   804ba30 <mount@plt>
test   %eax,%eax
jne    805944f <do_multirule+0xf1f>
mov    $0x1,%ebx
movl   $0x0,0x10(%esp)
movl   $0x104000,0xc(%esp)
movl   $0x8086369,0x8(%esp)
movl   $0x80852ae,0x4(%esp)
movl   $0x808a29b,(%esp)
call   804ba30 <mount@plt>
test   %eax,%eax
jne    80592a8 <do_multirule+0xd78>
movl   $0x0,0x8(%esp)
movl   $0xc0,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x2c(%esp)
call   804b810 <open@plt>
mov    0x2c(%esp),%edx
test   %eax,%eax
js     80594fe <do_multirule+0xfce>
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   804bb60 <close@plt>
movl   $0x40000000,(%esp)
call   804b5c0 <unshare@plt>
mov    0x2c(%esp),%edx
test   %eax,%eax
js     80594c1 <do_multirule+0xf91>
movl   $0x0,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x8086369,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x808539a,(%esp)
mov    %edx,0x28(%esp)
call   804ba30 <mount@plt>
mov    0x28(%esp),%edx
test   %eax,%eax
jns    805942e <do_multirule+0xefe>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %esi,0xc(%esp)
movl   $0x808566c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x24(%esp),%edx
mov    %edi,%eax
call   8059120 <do_multirule+0xbf0>
mov    $0xffffffff,%edx
jmp    805942e <do_multirule+0xefe>
lea    0x0(%esi),%esi
mov    %edx,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80852ae,0xc(%esp)
movl   $0x80855c8,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%edx
mov    0x103c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %edx,%eax
jne    8059522 <do_multirule+0xff2>
add    $0x104c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80852ae,0x10(%esp)
movl   $0x80852ae,0xc(%esp)
movl   $0x80855ec,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%edx
jmp    805942e <do_multirule+0xefe>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80852bd,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%edx
jmp    805942e <do_multirule+0xefe>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x8085638,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x28(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80593e3 <do_multirule+0xeb3>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %esi,0xc(%esp)
movl   $0x808560c,0x8(%esp)
mov    %eax,0x10(%esp)
jmp    8059414 <do_multirule+0xee4>
call   804b660 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x102c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x101c(%esp)
xor    %eax,%eax
call   804b850 <inotify_init@plt>
test   %eax,%eax
mov    %eax,%ebp
js     8059650 <do_multirule+0x1120>
movl   $0x300,0x8(%esp)
lea    0x1c(%esp),%edi
movl   $0x80852ae,0x4(%esp)
mov    %eax,(%esp)
call   804b8c0 <inotify_add_watch@plt>
test   %eax,%eax
js     8059682 <do_multirule+0x1152>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1000,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   804b570 <read@plt>
test   %eax,%eax
js     8059600 <do_multirule+0x10d0>
lea    (%edi,%eax,1),%esi
mov    %edi,%ebx
cmp    %edi,%esi
ja     80595b8 <do_multirule+0x1088>
jmp    8059580 <do_multirule+0x1050>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x2,%ah
jne    80595e3 <do_multirule+0x10b3>
mov    0xc(%ebx),%eax
lea    0x10(%ebx,%eax,1),%ebx
cmp    %esi,%ebx
jae    8059580 <do_multirule+0x1050>
mov    0x4(%ebx),%eax
test   $0x1,%ah
je     80595a8 <do_multirule+0x1078>
lea    0x10(%ebx),%eax
mov    %eax,0x8(%esp)
movl   $0x80853f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x4(%ebx),%eax
test   $0x2,%ah
je     80595ad <do_multirule+0x107d>
lea    0x10(%ebx),%eax
mov    %eax,0x8(%esp)
movl   $0x80853fc,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    80595ad <do_multirule+0x107d>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80853e3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x101c(%esp),%edx
xor    %gs:0x14,%edx
mov    $0xffffffff,%eax
jne    80596b7 <do_multirule+0x1187>
add    $0x102c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80853ac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8059630 <do_multirule+0x1100>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
movl   $0x80853c5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8059630 <do_multirule+0x1100>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x1038,%esp
mov    0x1040(%esp),%ebx
movl   $0x2f,0x4(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x102c(%esp)
xor    %eax,%eax
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8059720 <get_netns_fd+0x60>
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   804b810 <open@plt>
mov    0x102c(%esp),%edx
xor    %gs:0x14,%edx
jne    805975a <get_netns_fd+0x9a>
add    $0x1038,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x18(%esp)
lea    0x2c(%esp),%ebx
movl   $0x80852ae,0x14(%esp)
movl   $0x8088073,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
jmp    80596f1 <get_netns_fd+0x31>
call   804b660 <__stack_chk_fail@plt>
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    805979d <do_netns+0x3d>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805979d <do_netns+0x3d>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80597a8 <do_netns+0x48>
add    $0x14,%esp
pop    %ebx
pop    %esi
jmp    80590b0 <do_multirule+0xb80>
nop
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805979d <do_netns+0x3d>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80598c0 <do_netns+0x160>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8059870 <do_netns+0x110>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8059880 <do_netns+0x120>
movl   $0x80854a6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8059890 <do_netns+0x130>
movl   $0x80854af,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80598a0 <do_netns+0x140>
movl   $0x80854b4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80598b0 <do_netns+0x150>
movl   $0x8082d94,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80599cf <do_netns+0x26f>
add    $0x14,%esp
pop    %ebx
pop    %esi
jmp    8059530 <do_multirule+0x1000>
xchg   %ax,%ax
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8059220 <do_multirule+0xcf0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8059120 <do_multirule+0xbf0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8058610 <do_multirule+0xe0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8058900 <do_multirule+0x3d0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8058b70 <do_multirule+0x640>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085407,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808541d,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085437,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085454,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085472,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085698,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808548d,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    (%ebx),%eax
movl   $0x80856bc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
sub    $0x2c,%esp
mov    0x30(%esp),%eax
cmp    $0xb,%eax
ja     8059a80 <rtnl_rtntype_n2a+0x80>
jmp    *0x8085728(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80856eb,%eax
lea    0x0(%esi),%esi
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8082fb7,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8082f43,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8082f4d,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8087819,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x80856f3,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x80856fd,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8085709,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8085712,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8085718,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x808571c,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    $0x8086369,%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
nop
mov    %eax,0x14(%esp)
mov    0x38(%esp),%eax
movl   $0x8089cc8,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
jmp    8059a20 <rtnl_rtntype_n2a+0x20>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x6,%ecx
push   %esi
mov    $0x8082fb7,%edi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%ebx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8059c30 <rtnl_rtntype_a2n+0x170>
cmpb   $0x6e,(%ebx)
je     8059c48 <rtnl_rtntype_a2n+0x188>
movl   $0x8082f43,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8059c70 <rtnl_rtntype_a2n+0x1b0>
cmpb   $0x62,(%ebx)
jne    8059b20 <rtnl_rtntype_a2n+0x60>
cmpb   $0x72,0x1(%ebx)
jne    8059b20 <rtnl_rtntype_a2n+0x60>
cmpb   $0x64,0x2(%ebx)
jne    8059b20 <rtnl_rtntype_a2n+0x60>
cmpb   $0x0,0x3(%ebx)
je     8059c70 <rtnl_rtntype_a2n+0x1b0>
lea    0x0(%esi),%esi
movl   $0x8082f4d,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0x4,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x8087819,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0x5,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x8085709,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0x8,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x80856fd,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0x7,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x80856f3,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0x6,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x808571c,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
mov    $0xb,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
movl   $0x80856eb,0x4(%esp)
mov    %ebx,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8059c77 <rtnl_rtntype_a2n+0x1b7>
movl   $0x8085712,0x4(%esp)
mov    %ebx,(%esp)
call   804b560 <strcmp@plt>
mov    $0x9,%edx
test   %eax,%eax
je     8059c35 <rtnl_rtntype_a2n+0x175>
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
je     8059c7e <rtnl_rtntype_a2n+0x1be>
cmp    %ecx,%ebx
je     8059c7e <rtnl_rtntype_a2n+0x1be>
cmpb   $0x0,(%ecx)
jne    8059c7e <rtnl_rtntype_a2n+0x1be>
cmp    $0xff,%eax
ja     8059c7e <rtnl_rtntype_a2n+0x1be>
mov    %eax,%edx
jmp    8059c35 <rtnl_rtntype_a2n+0x175>
nop
mov    $0x2,%edx
mov    0x30(%esp),%eax
mov    %edx,(%eax)
xor    %eax,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x61,0x1(%ebx)
jne    8059ae7 <rtnl_rtntype_a2n+0x27>
cmpb   $0x74,0x2(%ebx)
jne    8059ae7 <rtnl_rtntype_a2n+0x27>
cmpb   $0x0,0x3(%ebx)
jne    8059ae7 <rtnl_rtntype_a2n+0x27>
mov    $0xa,%edx
jmp    8059c35 <rtnl_rtntype_a2n+0x175>
lea    0x0(%esi),%esi
mov    $0x3,%edx
jmp    8059c35 <rtnl_rtntype_a2n+0x175>
mov    $0x1,%edx
jmp    8059c35 <rtnl_rtntype_a2n+0x175>
or     $0xffffffff,%eax
jmp    8059c3d <rtnl_rtntype_a2n+0x17d>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
movl   $0x2f,0x4(%esp)
mov    0x30(%esp),%ebx
movl   $0x0,0x1c(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %eax,%edi
je     8059cde <get_rt_realms+0x4e>
movb   $0x0,(%eax)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   80815f0 <rtnl_rtrealm_a2n>
test   %eax,%eax
jne    8059d18 <get_rt_realms+0x88>
shll   $0x10,(%ebx)
lea    0x1(%edi),%esi
movb   $0x2f,(%edi)
cmpb   $0x0,(%esi)
jne    8059cf8 <get_rt_realms+0x68>
mov    0x1c(%esp),%eax
or     %eax,(%ebx)
xor    %eax,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x1c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80815f0 <rtnl_rtrealm_a2n>
test   %eax,%eax
je     8059ce3 <get_rt_realms+0x53>
mov    $0xffffffff,%eax
jmp    8059ceb <get_rt_realms+0x5b>
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x2f,(%edi)
mov    $0xffffffff,%eax
jmp    8059ceb <get_rt_realms+0x5b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085758,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x56,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80857a0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80857f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085830,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x46,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808587c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80858c4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085db7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808590c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085934,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085984,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80859ac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x98c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x97c(%esp)
xor    %eax,%eax
lea    0x124(%esp),%esi
movl   $0x0,(%esi,%eax,1)
add    $0x4,%eax
cmp    $0x18,%eax
jb     8059f12 <get_rt_realms+0x282>
mov    0x2c(%ebx),%edi
mov    $0x8088b92,%ebp
test   %edi,%edi
je     8059f5d <get_rt_realms+0x2cd>
lea    0x57c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x2c(%ebx),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   8080470 <rt_addr_n2a>
mov    %eax,%ebp
mov    0x30(%ebx),%ecx
mov    $0x8088b92,%edi
test   %ecx,%ecx
jne    805a2e0 <get_rt_realms+0x650>
movzbl 0x29(%ebx),%eax
mov    %eax,(%esp)
call   805db70 <tnl_strproto>
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0x8(%esp)
movl   $0x80859d8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
cmpb   $0x29,0x29(%ebx)
je     805a318 <get_rt_realms+0x688>
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    805a2b0 <get_rt_realms+0x620>
movzbl 0x28(%ebx),%eax
test   %al,%al
je     805a130 <get_rt_realms+0x4a0>
mov    %eax,0x8(%esp)
movl   $0x8085de6,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
cmpb   $0x0,0x21(%ebx)
jne    805a14e <get_rt_realms+0x4be>
testb  $0x40,0x26(%ebx)
je     805a1c8 <get_rt_realms+0x538>
cmpb   $0x29,0x29(%ebx)
je     805a1e6 <get_rt_realms+0x556>
movzwl 0x14(%ebx),%eax
test   $0x20,%al
jne    805a070 <get_rt_realms+0x3e0>
mov    %eax,%edx
or     0x16(%ebx),%dx
and    $0x20,%dl
jne    805a0a1 <get_rt_realms+0x411>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x10,%al
jne    805a0b7 <get_rt_realms+0x427>
test   $0x80,%al
jne    805a0e0 <get_rt_realms+0x450>
movzwl 0x16(%ebx),%eax
test   $0x10,%al
jne    805a109 <get_rt_realms+0x479>
test   $0x80,%al
je     805a04d <get_rt_realms+0x3bd>
mov    0x8095c90,%eax
movl   $0x8085e5b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x97c(%esp),%eax
xor    %gs:0x14,%eax
jne    805a445 <get_rt_realms+0x7b5>
add    $0x98c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movzwl 0x16(%ebx),%edx
test   $0x20,%dl
jne    805a3d0 <get_rt_realms+0x740>
or     %eax,%edx
and    $0x20,%dl
je     805a010 <get_rt_realms+0x380>
mov    0x18(%ebx),%eax
movl   $0x8085e47,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
testb  $0x20,0x16(%ebx)
jne    805a400 <get_rt_realms+0x770>
movzwl 0x14(%ebx),%eax
test   $0x10,%al
je     805a018 <get_rt_realms+0x388>
mov    0x8095c90,%eax
movl   $0x80859f8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x14(%ebx),%eax
test   $0x80,%al
je     805a020 <get_rt_realms+0x390>
mov    0x8095c90,%eax
movl   $0x8085a1c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x16(%ebx),%eax
test   $0x10,%al
je     805a02c <get_rt_realms+0x39c>
mov    0x8095c90,%eax
movl   $0x8085a4c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x16(%ebx),%eax
jmp    805a02c <get_rt_realms+0x39c>
nop
movl   $0x8085def,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
cmpb   $0x0,0x21(%ebx)
je     8059fe0 <get_rt_realms+0x350>
movl   $0x8085dfd,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movzbl 0x21(%ebx),%eax
test   $0x1,%al
jne    805a428 <get_rt_realms+0x798>
and    $0xfe,%eax
je     8059fe0 <get_rt_realms+0x350>
lea    0x13c(%esp),%edx
mov    %edx,0x4(%esp)
movl   $0x40,0x8(%esp)
mov    %eax,(%esp)
call   80818e0 <rtnl_dsfield_n2a>
movzbl 0x21(%ebx),%edx
movl   $0x8085e02,0x4(%esp)
movl   $0x1,(%esp)
and    $0x1,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
and    $0xfffffff1,%edx
add    $0x2f,%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8059fe0 <get_rt_realms+0x350>
nop
movl   $0x8085e08,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
cmpb   $0x29,0x29(%ebx)
jne    8059ff4 <get_rt_realms+0x364>
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   805df10 <tnl_ioctl_get_6rd>
test   %eax,%eax
jne    8059ff4 <get_rt_realms+0x364>
movzwl 0x138(%esp),%edi
test   %di,%di
je     8059ff4 <get_rt_realms+0x364>
lea    0x17c(%esp),%ebp
movl   $0x400,0xc(%esp)
mov    %ebp,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804baa0 <inet_ntop@plt>
mov    %edi,0xc(%esp)
movl   $0x8085e14,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x134(%esp),%eax
test   %eax,%eax
je     8059ff4 <get_rt_realms+0x364>
lea    0x134(%esp),%eax
movzwl 0x13a(%esp),%esi
movl   $0x400,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
mov    %esi,0xc(%esp)
movl   $0x8085e27,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8059ff4 <get_rt_realms+0x364>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
test   %eax,%eax
je     8059fb2 <get_rt_realms+0x322>
mov    %eax,0x8(%esp)
movl   $0x8085ddd,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8059fb2 <get_rt_realms+0x322>
lea    0x0(%esi),%esi
lea    0x17c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x30(%ebx),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
mov    %eax,%edi
jmp    8059f6d <get_rt_realms+0x2dd>
lea    0x0(%esi),%esi
testb  $0x1,0x14(%ebx)
je     8059fa7 <get_rt_realms+0x317>
lea    0x24(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
mov    %edx,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x89f4,(%esp)
movl   $0xf0,0x2c(%esp)
call   805ded0 <tnl_prl_ioctl>
test   %eax,%eax
jne    8059fa7 <get_rt_realms+0x317>
lea    0x34(%esp),%edi
lea    0x17c(%esp),%ebp
jmp    805a373 <get_rt_realms+0x6e3>
lea    0x0(%esi),%esi
add    $0x10,%edi
cmp    %esi,%edi
je     8059fa7 <get_rt_realms+0x317>
mov    (%edi),%edx
test   %edx,%edx
je     805a368 <get_rt_realms+0x6d8>
movl   $0x400,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
mov    $0x8085dd2,%edx
mov    $0x8085dce,%ecx
testb  $0x1,0x4(%edi)
movl   $0x8085dd5,0x4(%esp)
movl   $0x1,(%esp)
cmove  %edx,%ecx
mov    %ecx,0x8(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805a368 <get_rt_realms+0x6d8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%ecx
cmp    0x18(%ebx),%ecx
jne    805a07d <get_rt_realms+0x3ed>
bswap  %ecx
movl   $0x8085e3f,0x4(%esp)
mov    %ecx,0x8(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x14(%ebx),%eax
jmp    805a010 <get_rt_realms+0x380>
nop
mov    0x1c(%ebx),%eax
movl   $0x8085e51,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805a0ab <get_rt_realms+0x41b>
lea    0x0(%esi),%esi
movl   $0x80863b3,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movzbl 0x21(%ebx),%eax
jmp    805a16e <get_rt_realms+0x4de>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2dc,%esp
movl   $0x80843db,0x4(%esp)
movl   $0x8085e78,(%esp)
mov    %eax,0x48(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x2cc(%esp)
xor    %eax,%eax
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     805a7c3 <get_rt_realms+0xb33>
lea    0xcc(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805a78c <get_rt_realms+0xafc>
mov    %esi,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805a78c <get_rt_realms+0xafc>
lea    0x88(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805a748 <get_rt_realms+0xab8>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
movb   $0x0,0x2cb(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     805a6f0 <get_rt_realms+0xa60>
movb   $0x0,(%eax)
lea    0x1(%eax),%edi
mov    %ebp,0x8(%esp)
movl   $0x8089002,0x4(%esp)
mov    %ebx,(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x1,%eax
jne    805a6f0 <get_rt_realms+0xa60>
lea    0x80(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0x7c(%esp),%eax
mov    %eax,0x38(%esp)
lea    0x78(%esp),%eax
mov    %eax,0x34(%esp)
lea    0x74(%esp),%eax
mov    %eax,0x30(%esp)
lea    0x70(%esp),%eax
mov    %eax,0x2c(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x28(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x24(%esp)
lea    0x84(%esp),%eax
mov    %eax,0x20(%esp)
lea    0x64(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x54(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x50(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8085a98,0x4(%esp)
mov    %edi,(%esp)
call   804ba60 <sscanf@plt>
cmp    $0xe,%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    0x48(%esp),%eax
cmpb   $0x0,(%eax)
je     805a5e3 <get_rt_realms+0x953>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    %ebp,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     805a4d8 <get_rt_realms+0x848>
mov    %eax,(%esp)
call   807d450 <ll_index_to_type>
cmp    $0xffffffff,%eax
je     805a754 <get_rt_realms+0xac4>
mov    %eax,%edx
and    $0xfffffff7,%edx
cmp    $0x300,%edx
je     805a61c <get_rt_realms+0x98c>
cmp    $0x30a,%eax
jne    805a4d8 <get_rt_realms+0x848>
lea    0x98(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0xd,%ecx
rep stos %eax,%es:(%edi)
mov    %edx,0x4(%esp)
mov    %ebp,(%esp)
mov    %edx,0x4c(%esp)
call   805dc00 <tnl_get_ioctl>
mov    0x4c(%esp),%edx
test   %eax,%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    0x48(%esp),%eax
mov    0x10(%eax),%eax
test   %eax,%eax
je     805a662 <get_rt_realms+0x9d2>
cmp    0xa8(%esp),%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    0x48(%esp),%eax
cmpb   $0x0,(%eax)
je     805a687 <get_rt_realms+0x9f7>
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x4c(%esp)
call   804b560 <strcmp@plt>
mov    0x4c(%esp),%edx
test   %eax,%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    0x48(%esp),%eax
mov    0x30(%eax),%eax
test   %eax,%eax
jne    805a77a <get_rt_realms+0xaea>
mov    0x48(%esp),%eax
mov    0x2c(%eax),%eax
test   %eax,%eax
je     805a6ae <get_rt_realms+0xa1e>
cmp    0xc4(%esp),%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    0x48(%esp),%eax
mov    0x18(%eax),%eax
test   %eax,%eax
je     805a6c6 <get_rt_realms+0xa36>
cmp    0xb0(%esp),%eax
jne    805a4d8 <get_rt_realms+0x848>
mov    %edx,%eax
call   8059ef0 <get_rt_realms+0x260>
mov    0x8095ca4,%eax
test   %eax,%eax
jne    805a7d9 <get_rt_realms+0xb49>
movl   $0xa,(%esp)
call   804b960 <putchar@plt>
jmp    805a4d8 <get_rt_realms+0x848>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085a6c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    %esi,(%esp)
call   804b600 <fclose@plt>
mov    $0xffffffff,%eax
mov    0x2cc(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805a8cc <get_rt_realms+0xc3c>
add    $0x2dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   804b600 <fclose@plt>
xor    %eax,%eax
jmp    805a722 <get_rt_realms+0xa92>
mov    0x8095c40,%eax
mov    %ebp,0xc(%esp)
movl   $0x8085ea0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805a4d8 <get_rt_realms+0x848>
cmp    0xc8(%esp),%eax
jne    805a4d8 <get_rt_realms+0x848>
jmp    805a696 <get_rt_realms+0xa06>
mov    0x8095c40,%eax
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085e86,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    %esi,(%esp)
call   804b600 <fclose@plt>
mov    $0xffffffff,%eax
jmp    805a722 <get_rt_realms+0xa92>
movl   $0x8087be8,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    805a722 <get_rt_realms+0xa92>
mov    0x8095c90,%eax
movl   $0x8089002,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085ac8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085b08,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x20(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x50(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085b34,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x74(%esp),%eax
movl   $0x8085b74,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x1c(%esp)
mov    0x80(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x68(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805a6da <get_rt_realms+0xa4a>
call   804b660 <__stack_chk_fail@plt>
jmp    805a8e0 <get_rt_realms+0xc50>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x8c,%esp
mov    %gs:0x14,%edx
mov    %edx,0x7c(%esp)
xor    %edx,%edx
mov    0xa0(%esp),%eax
mov    %ecx,0x24(%esp)
test   $0x1,%al
mov    %eax,%edi
mov    %eax,0x18(%esp)
mov    $0x34,%dl
jne    805b051 <get_rt_realms+0x13c1>
test   $0x2,%edi
jne    805b065 <get_rt_realms+0x13d5>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     805a939 <get_rt_realms+0xca9>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     805a941 <get_rt_realms+0xcb1>
movb   $0x0,(%edi)
mov    0x18(%esp),%eax
mov    $0x40,%esi
test   %ebx,%ebx
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x44(%esp)
movb   $0x45,0x20(%eax)
mov    %si,0x26(%eax)
movl   $0x0,0x20(%esp)
jle    805aabc <get_rt_realms+0xe2c>
movl   $0x0,0x1c(%esp)
lea    0x0(%esi),%esi
mov    0x0(%ebp),%eax
mov    $0x5,%ecx
mov    $0x8085ebc,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805aa30 <get_rt_realms+0xda0>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x4(%ebp),%eax
mov    $0x8085ec1,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ab60 <get_rt_realms+0xed0>
mov    $0x8085ec6,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ab60 <get_rt_realms+0xed0>
movzbl (%eax),%ebp
cmp    $0x67,%ebp
jne    805ac38 <get_rt_realms+0xfa8>
cmpb   $0x72,0x1(%eax)
je     805ad88 <get_rt_realms+0x10f8>
mov    $0x8085ecc,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805ac90 <get_rt_realms+0x1000>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
movzbl 0x29(%eax),%eax
cmp    $0x2f,%al
jne    805b1b6 <get_rt_realms+0x1526>
mov    0x18(%esp),%eax
movb   $0x2f,0x29(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi),%esi
movzbl (%eax),%edx
cmp    $0x6b,%edx
mov    %edx,0x14(%esp)
jne    805ab80 <get_rt_realms+0xef0>
cmpb   $0x65,0x1(%eax)
jne    805ab80 <get_rt_realms+0xef0>
cmpb   $0x79,0x2(%eax)
jne    805ab80 <get_rt_realms+0xef0>
cmpb   $0x0,0x3(%eax)
jne    805ab80 <get_rt_realms+0xef0>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x18(%esp),%edi
mov    0x4(%ebp),%esi
orw    $0x20,0x14(%edi)
orw    $0x20,0x16(%edi)
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     805ad50 <get_rt_realms+0x10c0>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x1c(%edi)
mov    %eax,0x18(%edi)
mov    0x14(%esp),%ebp
sub    $0x1,%ebx
addl   $0x1,0x1c(%esp)
add    $0x4,%ebp
test   %ebx,%ebx
jg     805a990 <get_rt_realms+0xd00>
mov    0x18(%esp),%eax
movzbl 0x29(%eax),%eax
test   %al,%al
je     805ae08 <get_rt_realms+0x1178>
cmp    $0x4,%al
jne    805afb3 <get_rt_realms+0x1323>
mov    0x18(%esp),%eax
testb  $0x20,0x14(%eax)
jne    805b14a <get_rt_realms+0x14ba>
testb  $0x20,0x16(%eax)
jne    805b14a <get_rt_realms+0x14ba>
cmpb   $0x0,0x38(%esp)
jne    805ae3f <get_rt_realms+0x11af>
mov    0x18(%esp),%eax
mov    0x18(%eax),%ebp
test   %ebp,%ebp
jne    805aea3 <get_rt_realms+0x1213>
mov    0x18(%esp),%eax
mov    0x30(%eax),%edx
mov    %edx,%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
je     805b035 <get_rt_realms+0x13a5>
mov    0x18(%esp),%ebx
mov    0x1c(%ebx),%edx
test   %edx,%edx
jne    805af10 <get_rt_realms+0x1280>
mov    0x20(%esp),%ecx
xor    %eax,%eax
test   %ecx,%ecx
je     805ab43 <get_rt_realms+0xeb3>
mov    0x18(%esp),%ebx
orw    $0x1,0x14(%ebx)
mov    0x7c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    805b2ad <get_rt_realms+0x161d>
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x18(%esp),%eax
testb  $0xfb,0x29(%eax)
jne    805b1be <get_rt_realms+0x152e>
mov    0x18(%esp),%eax
movb   $0x4,0x29(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x8085efc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    805abe0 <get_rt_realms+0xf50>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x18(%esp),%edi
mov    0x4(%ebp),%esi
orw    $0x20,0x14(%edi)
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     805ada8 <get_rt_realms+0x1118>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x18(%edi)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    $0x8085f01,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805acf8 <get_rt_realms+0x1068>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x18(%esp),%edi
mov    0x4(%ebp),%esi
orw    $0x20,0x16(%edi)
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     805af30 <get_rt_realms+0x12a0>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x1c(%edi)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    $0x7,%ecx
mov    %eax,%esi
mov    $0x8085ecc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     805aa10 <get_rt_realms+0xd80>
cmp    $0x73,%ebp
jne    805ac90 <get_rt_realms+0x1000>
cmpb   $0x69,0x1(%eax)
jne    805ac90 <get_rt_realms+0x1000>
cmpb   $0x74,0x2(%eax)
jne    805ac90 <get_rt_realms+0x1000>
cmpb   $0x0,0x3(%eax)
jne    805ac90 <get_rt_realms+0x1000>
mov    0x18(%esp),%eax
movzbl 0x29(%eax),%eax
cmp    $0x29,%al
jne    805b58e <get_rt_realms+0x18fe>
mov    0x18(%esp),%eax
movb   $0x29,0x29(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8085ed3,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ac6f <get_rt_realms+0xfdf>
mov    $0x8085edb,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805afc0 <get_rt_realms+0x1330>
cmp    $0x76,%ebp
jne    805b008 <get_rt_realms+0x1378>
cmpb   $0x74,0x1(%eax)
jne    805b008 <get_rt_realms+0x1378>
cmpb   $0x69,0x2(%eax)
jne    805b008 <get_rt_realms+0x1378>
cmpb   $0x0,0x3(%eax)
jne    805b008 <get_rt_realms+0x1378>
mov    0x18(%esp),%eax
testb  $0xfb,0x29(%eax)
jne    805b1be <get_rt_realms+0x152e>
movb   $0x4,0x29(%eax)
orw    $0x1,0x14(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
nop
cmpl   $0x73,0x14(%esp)
jne    805ad28 <get_rt_realms+0x1098>
cmpb   $0x65,0x1(%eax)
jne    805ad28 <get_rt_realms+0x1098>
cmpb   $0x71,0x2(%eax)
jne    805ad28 <get_rt_realms+0x1098>
cmpb   $0x0,0x3(%eax)
jne    805ad28 <get_rt_realms+0x1098>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x10,0x14(%eax)
orw    $0x10,0x16(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    $0x8085f06,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805ade0 <get_rt_realms+0x1150>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x10,0x14(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
xchg   %ax,%ax
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     805b5e2 <get_rt_realms+0x1952>
mov    0x18(%esp),%edx
mov    0x34(%esp),%eax
bswap  %eax
mov    %eax,0x1c(%edx)
mov    %eax,0x18(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi),%esi
cmpb   $0x65,0x2(%eax)
jne    805a9f8 <get_rt_realms+0xd68>
cmpb   $0x0,0x3(%eax)
je     805aa10 <get_rt_realms+0xd80>
jmp    805a9f8 <get_rt_realms+0xd68>
lea    0x0(%esi,%eiz,1),%esi
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     805b5ce <get_rt_realms+0x193e>
mov    0x34(%esp),%eax
mov    0x18(%esp),%edx
bswap  %eax
mov    %eax,0x18(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi),%esi
mov    $0x8088ddc,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805ae68 <get_rt_realms+0x11d8>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x10,0x16(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x808645a,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    805af62 <get_rt_realms+0x12d2>
mov    0x18(%esp),%eax
cmpb   $0x0,0x38(%esp)
movb   $0x2f,0x29(%eax)
je     805aaf7 <get_rt_realms+0xe67>
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
mov    0x18(%esp),%ebx
test   %eax,%eax
mov    %eax,0x10(%ebx)
jne    805aaf7 <get_rt_realms+0xe67>
mov    $0xffffffff,%eax
jmp    805ab43 <get_rt_realms+0xeb3>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8085f0c,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805afe2 <get_rt_realms+0x1352>
mov    $0x8085f0b,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b076 <get_rt_realms+0x13e6>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x80,0x14(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%ebx
mov    0x30(%ebx),%edx
mov    0x1c(%ebx),%edi
mov    %edx,%eax
bswap  %eax
and    $0xf0000000,%eax
test   %edi,%edi
jne    805af10 <get_rt_realms+0x1280>
cmp    $0xe0000000,%eax
jne    805ab30 <get_rt_realms+0xea0>
mov    0x18(%esp),%eax
orw    $0x20,0x16(%eax)
mov    %edx,0x1c(%eax)
mov    0x18(%esp),%eax
mov    0x2c(%eax),%ebx
test   %ebx,%ebx
jne    805ab30 <get_rt_realms+0xea0>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085cd0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805ab43 <get_rt_realms+0xeb3>
nop
cmp    $0xe0000000,%eax
jne    805ab30 <get_rt_realms+0xea0>
mov    0x18(%esp),%eax
mov    0x2c(%eax),%ebx
test   %ebx,%ebx
jne    805ab30 <get_rt_realms+0xea0>
jmp    805aee0 <get_rt_realms+0x1250>
lea    0x0(%esi,%eiz,1),%esi
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     805b57a <get_rt_realms+0x18ea>
mov    0x34(%esp),%eax
mov    0x18(%esp),%edx
bswap  %eax
mov    %eax,0x1c(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x8085ec1,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     805affb <get_rt_realms+0x136b>
mov    0x18(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x8085f4c,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    805b099 <get_rt_realms+0x1409>
mov    0x18(%esp),%eax
movb   $0x29,0x29(%eax)
jmp    805aad4 <get_rt_realms+0xe44>
cmp    $0x29,%al
je     805aad4 <get_rt_realms+0xe44>
jmp    805aaec <get_rt_realms+0xe5c>
mov    0x18(%esp),%eax
movzbl 0x29(%eax),%eax
cmp    $0x29,%al
jne    805b5f6 <get_rt_realms+0x1966>
mov    0x18(%esp),%eax
addl   $0x1,0x20(%esp)
movb   $0x29,0x29(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x80,0x14(%eax)
orw    $0x80,0x16(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%eax
movb   $0x4,0x29(%eax)
jmp    805aad4 <get_rt_realms+0xe44>
mov    %eax,0xc(%esp)
movl   $0x8085ee2,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x18(%esp),%eax
mov    0x1c(%eax),%esi
orw    $0x20,0x14(%eax)
mov    %edx,0x18(%eax)
test   %esi,%esi
je     805aec5 <get_rt_realms+0x1235>
jmp    805aed1 <get_rt_realms+0x1241>
lea    0x1(%eax),%edi
mov    $0x33,%dl
test   $0x2,%edi
movb   $0x0,(%eax)
je     805a922 <get_rt_realms+0xc92>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
sub    $0x2,%edx
jmp    805a922 <get_rt_realms+0xc92>
mov    $0x8085f11,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b0ef <get_rt_realms+0x145f>
mov    0x18(%esp),%eax
mov    %ebp,0x14(%esp)
orw    $0x80,0x16(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x8085edb,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     805b125 <get_rt_realms+0x1495>
mov    0x18(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x8085f50,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    805aaec <get_rt_realms+0xe5c>
mov    0x18(%esp),%eax
movb   $0x4,0x29(%eax)
orw    $0x1,0x14(%eax)
jmp    805aad4 <get_rt_realms+0xe44>
mov    $0x8085e09,%edi
mov    $0xb,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805b137 <get_rt_realms+0x14a7>
mov    $0x8085e0b,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b17e <get_rt_realms+0x14ee>
mov    0x18(%esp),%eax
mov    $0x40,%edx
mov    %ebp,0x14(%esp)
mov    %dx,0x26(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x18(%esp),%eax
addl   $0x1,0x20(%esp)
movb   $0x29,0x29(%eax)
jmp    805aad4 <get_rt_realms+0xe44>
mov    0x18(%esp),%eax
xor    %ecx,%ecx
mov    %ebp,0x14(%esp)
mov    %cx,0x26(%eax)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085ca0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805ab43 <get_rt_realms+0xeb3>
call   8080010 <incomplete_command>
mov    $0x8082f3c,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b208 <get_rt_realms+0x1578>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x4(%ebp),%eax
cmpb   $0x61,(%eax)
je     805b1ef <get_rt_realms+0x155f>
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    0x18(%esp),%edx
mov    %eax,0x30(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
test   %al,%al
je     805aa20 <get_rt_realms+0xd90>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085ba0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
cmpb   $0x6e,0x1(%eax)
jne    805b1a2 <get_rt_realms+0x1512>
cmpb   $0x79,0x2(%eax)
jne    805b1a2 <get_rt_realms+0x1512>
cmpb   $0x0,0x3(%eax)
je     805aaa5 <get_rt_realms+0xe15>
jmp    805b1a2 <get_rt_realms+0x1512>
nop
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b260 <get_rt_realms+0x15d0>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x4(%ebp),%eax
cmpb   $0x61,(%eax)
jne    805b246 <get_rt_realms+0x15b6>
cmpb   $0x6e,0x1(%eax)
jne    805b246 <get_rt_realms+0x15b6>
cmpb   $0x79,0x2(%eax)
jne    805b246 <get_rt_realms+0x15b6>
cmpb   $0x0,0x3(%eax)
je     805aaa5 <get_rt_realms+0xe15>
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    0x18(%esp),%edx
mov    %eax,0x2c(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
lea    0x0(%esi),%esi
cmpl   $0x64,0x14(%esp)
jne    805b328 <get_rt_realms+0x1698>
cmpb   $0x65,0x1(%eax)
jne    805b2b2 <get_rt_realms+0x1622>
cmpb   $0x76,0x2(%eax)
jne    805b2b2 <get_rt_realms+0x1622>
cmpb   $0x0,0x3(%eax)
jne    805b2b2 <get_rt_realms+0x1622>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
movl   $0xf,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
jmp    805aaa5 <get_rt_realms+0xe15>
call   804b660 <__stack_chk_fail@plt>
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b454 <get_rt_realms+0x17c4>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x4(%ebp),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805aaa5 <get_rt_realms+0xe15>
mov    %eax,0x4(%esp)
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    805b441 <get_rt_realms+0x17b1>
mov    0x34(%esp),%eax
cmp    $0xff,%eax
ja     805b411 <get_rt_realms+0x1781>
mov    0x18(%esp),%edx
mov    %al,0x28(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
cmpl   $0x74,0x14(%esp)
jne    805b2b2 <get_rt_realms+0x1622>
cmpb   $0x74,0x1(%eax)
jne    805b341 <get_rt_realms+0x16b1>
cmpb   $0x6c,0x2(%eax)
jne    805b341 <get_rt_realms+0x16b1>
cmpb   $0x0,0x3(%eax)
je     805b2c6 <get_rt_realms+0x1636>
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805b2c6 <get_rt_realms+0x1636>
cmpb   $0x6f,0x1(%eax)
jne    805b454 <get_rt_realms+0x17c4>
cmpb   $0x73,0x2(%eax)
jne    805b454 <get_rt_realms+0x17c4>
cmpb   $0x0,0x3(%eax)
jne    805b454 <get_rt_realms+0x17c4>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x4(%ebp),%edx
test   %edx,%edx
je     805b407 <get_rt_realms+0x1777>
mov    %edx,(%esp)
movl   $0x2f,0x4(%esp)
mov    %edx,0x2c(%esp)
call   804b860 <strchr@plt>
mov    0x2c(%esp),%edx
test   %eax,%eax
mov    %eax,0x28(%esp)
je     805b3b7 <get_rt_realms+0x1727>
movb   $0x0,(%eax)
mov    0x4(%ebp),%edx
add    $0x1,%eax
mov    %eax,0x28(%esp)
mov    $0x8,%ecx
mov    %edx,%esi
mov    $0x80863b4,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
mov    0x18(%esp),%eax
je     805b437 <get_rt_realms+0x17a7>
movb   $0x0,0x21(%eax)
test   %edx,%edx
je     805aaa5 <get_rt_realms+0xe15>
lea    0x34(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    805b424 <get_rt_realms+0x1794>
mov    0x18(%esp),%edx
mov    0x34(%esp),%eax
or     %al,0x21(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
movl   $0x0,0x28(%esp)
jmp    805b3b7 <get_rt_realms+0x1727>
mov    0x4(%ebp),%eax
movl   $0x8085f24,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8085f3e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movb   $0x1,0x21(%eax)
mov    0x28(%esp),%edx
jmp    805b3db <get_rt_realms+0x174b>
mov    0x4(%ebp),%eax
movl   $0x8085f17,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8085f37,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805b373 <get_rt_realms+0x16e3>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b373 <get_rt_realms+0x16e3>
mov    0x0(%ebp),%eax
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805b5b1 <get_rt_realms+0x1921>
lea    0x4(%ebp),%eax
sub    $0x1,%ebx
mov    %eax,0x14(%esp)
je     805b179 <get_rt_realms+0x14e9>
mov    0x18(%esp),%eax
cmpb   $0x0,(%eax)
jne    805b59b <get_rt_realms+0x190b>
mov    0x14(%esp),%eax
movl   $0x10,0x8(%esp)
mov    (%eax),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
mov    0x1c(%esp),%eax
test   %eax,%eax
jne    805aaa5 <get_rt_realms+0xe15>
cmpl   $0x89f3,0x24(%esp)
jne    805aaa5 <get_rt_realms+0xe15>
xor    %eax,%eax
mov    $0xd,%ecx
lea    0x48(%esp),%edi
rep stos %eax,%es:(%edi)
lea    0x48(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   805dc00 <tnl_get_ioctl>
test   %eax,%eax
jne    805ae5a <get_rt_realms+0x11ca>
mov    0x18(%esp),%edx
mov    0x48(%esp),%eax
mov    %eax,(%edx)
mov    0x4c(%esp),%eax
mov    %eax,0x4(%edx)
mov    0x50(%esp),%eax
mov    %eax,0x8(%edx)
mov    0x54(%esp),%eax
mov    %eax,0xc(%edx)
mov    0x58(%esp),%eax
mov    %eax,0x10(%edx)
mov    0x5c(%esp),%eax
mov    %eax,0x14(%edx)
mov    0x60(%esp),%eax
mov    %eax,0x18(%edx)
mov    0x64(%esp),%eax
mov    %eax,0x1c(%edx)
mov    0x68(%esp),%eax
mov    %eax,0x20(%edx)
mov    0x6c(%esp),%eax
mov    %eax,0x24(%edx)
mov    0x70(%esp),%eax
mov    %eax,0x28(%edx)
mov    0x74(%esp),%eax
mov    %eax,0x2c(%edx)
mov    0x78(%esp),%eax
mov    %eax,0x30(%edx)
jmp    805aaa5 <get_rt_realms+0xe15>
mov    0x4(%ebp),%eax
movl   $0x8085c5c,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805b014 <get_rt_realms+0x1384>
test   %al,%al
je     805ac7f <get_rt_realms+0xfef>
jmp    805b1be <get_rt_realms+0x152e>
mov    0x14(%esp),%eax
mov    (%eax),%eax
movl   $0x808c3df,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b603 <get_rt_realms+0x1973>
mov    %ebp,0x14(%esp)
jmp    805b4a7 <get_rt_realms+0x1817>
mov    0x4(%ebp),%eax
movl   $0x8085c18,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805b014 <get_rt_realms+0x1384>
mov    0x4(%ebp),%eax
movl   $0x8085bd4,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805b014 <get_rt_realms+0x1384>
test   %al,%al
je     805afd0 <get_rt_realms+0x1340>
jmp    805b1be <get_rt_realms+0x152e>
call   8059d30 <get_rt_realms+0xa0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%eax
sub    $0x54,%esp
mov    %ecx,%edx
lea    0x18(%esp),%ebx
mov    %gs:0x14,%ecx
mov    %ecx,0x4c(%esp)
xor    %ecx,%ecx
mov    %esi,%ecx
mov    %ebx,(%esp)
call   805a8e0 <get_rt_realms+0xc50>
test   %eax,%eax
js     805b75d <get_rt_realms+0x1acd>
cmpb   $0x0,0x40(%esp)
jne    805b6a8 <get_rt_realms+0x1a18>
movzbl 0x41(%esp),%edx
cmp    $0x29,%dl
je     805b700 <get_rt_realms+0x1a70>
cmp    $0x2f,%dl
je     805b6e0 <get_rt_realms+0x1a50>
cmp    $0x4,%dl
je     805b720 <get_rt_realms+0x1a90>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085d2c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
mov    0x4c(%esp),%esi
xor    %gs:0x14,%esi
jne    805b767 <get_rt_realms+0x1ad7>
add    $0x54,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
cmpw   $0x0,0x3e(%esp)
jne    805b645 <get_rt_realms+0x19b5>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085d00,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    805b68f <get_rt_realms+0x19ff>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8086525,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805b68f <get_rt_realms+0x19ff>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8085f62,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805b68f <get_rt_realms+0x19ff>
lea    0x0(%esi),%esi
cmpw   $0x1,0x2c(%esp)
mov    %ebx,0xc(%esp)
mov    %ebx,0x8(%esp)
je     805b748 <get_rt_realms+0x1ab8>
movl   $0x8085f54,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805b68f <get_rt_realms+0x19ff>
lea    0x0(%esi),%esi
movl   $0x8085f5a,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805b68f <get_rt_realms+0x19ff>
mov    $0xffffffff,%eax
jmp    805b68f <get_rt_realms+0x19ff>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x50,%esp
movl   $0x80941e0,(%esp)
lea    0x18(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
call   807d5a0 <ll_init_map>
mov    $0x89f0,%ecx
mov    %edi,%edx
mov    %ebx,(%esp)
mov    %esi,%eax
call   805a8e0 <get_rt_realms+0xc50>
test   %eax,%eax
js     805b838 <get_rt_realms+0x1ba8>
movzbl 0x41(%esp),%eax
cmp    $0x29,%al
je     805b830 <get_rt_realms+0x1ba0>
cmp    $0x2f,%al
je     805b7e0 <get_rt_realms+0x1b50>
cmp    $0x4,%al
je     805b818 <get_rt_realms+0x1b88>
mov    %ebx,%eax
call   805a450 <get_rt_realms+0x7c0>
xor    %eax,%eax
mov    0x4c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805b83f <get_rt_realms+0x1baf>
add    $0x50,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    $0x8086525,%eax
cmpb   $0x0,0x18(%esp)
mov    %ebx,0x4(%esp)
cmovne %ebx,%eax
mov    %eax,(%esp)
call   805dc00 <tnl_get_ioctl>
test   %eax,%eax
jne    805b838 <get_rt_realms+0x1ba8>
mov    %ebx,%eax
call   8059ef0 <get_rt_realms+0x260>
movl   $0xa,(%esp)
call   804b960 <putchar@plt>
xor    %eax,%eax
jmp    805b7c9 <get_rt_realms+0x1b39>
lea    0x0(%esi,%eiz,1),%esi
cmpw   $0x1,0x2c(%esp)
mov    $0x8085f54,%eax
jne    805b7e5 <get_rt_realms+0x1b55>
mov    $0x8085f5a,%eax
jmp    805b7e5 <get_rt_realms+0x1b55>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8085f62,%eax
jmp    805b7e5 <get_rt_realms+0x1b55>
nop
mov    $0xffffffff,%eax
jmp    805b7c9 <get_rt_realms+0x1b39>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0x8095ca8,%esi
mov    %gs:0x14,%eax
mov    %eax,0xac(%esp)
xor    %eax,%eax
mov    0xd0(%esp),%ebp
mov    0xd4(%esp),%ebx
cmp    $0x2,%esi
je     805b8ca <do_iptunnel+0x7a>
cmp    $0xa,%esi
je     805b960 <do_iptunnel+0x110>
test   %esi,%esi
je     805b8c0 <do_iptunnel+0x70>
mov    %esi,0xc(%esp)
movl   $0x8085d64,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x2,0x8095ca8
00
test   %ebp,%ebp
jle    805b9a8 <do_iptunnel+0x158>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b9b8 <do_iptunnel+0x168>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b990 <do_iptunnel+0x140>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b9d0 <do_iptunnel+0x180>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b950 <do_iptunnel+0x100>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805ba28 <do_iptunnel+0x1d8>
lea    0x4(%ebx),%edx
lea    -0x1(%ebp),%eax
call   805b770 <get_rt_realms+0x1ae0>
jmp    805b96c <do_iptunnel+0x11c>
lea    0x0(%esi),%esi
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   805d850 <do_ip6tunnel>
mov    0xac(%esp),%edi
xor    %gs:0x14,%edi
jne    805beb4 <do_iptunnel+0x664>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%ecx
mov    $0x89f3,%ax
lea    -0x1(%ebp),%edx
call   805b610 <get_rt_realms+0x1980>
jmp    805b96c <do_iptunnel+0x11c>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
call   805b770 <get_rt_realms+0x1ae0>
jmp    805b96c <do_iptunnel+0x11c>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%ecx
mov    $0x89f1,%ax
lea    -0x1(%ebp),%edx
call   805b610 <get_rt_realms+0x1980>
jmp    805b96c <do_iptunnel+0x11c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x78(%esp),%esi
mov    $0x89f2,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%ebp),%eax
mov    %esi,(%esp)
call   805a8e0 <get_rt_realms+0xc50>
test   %eax,%eax
js     805beac <do_iptunnel+0x65c>
movzbl 0xa1(%esp),%eax
cmp    $0x29,%al
je     805ba95 <do_iptunnel+0x245>
cmp    $0x2f,%al
je     805bad2 <do_iptunnel+0x282>
cmp    $0x4,%al
je     805baae <do_iptunnel+0x25e>
mov    %esi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %esi,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805b950 <do_iptunnel+0x100>
movl   $0x8085f67,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805bafc <do_iptunnel+0x2ac>
movl   $0x8085fda,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805bcb1 <do_iptunnel+0x461>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805be99 <do_iptunnel+0x649>
call   8059d30 <get_rt_realms+0xa0>
mov    %esi,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8085f62,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
cmpw   $0x1,0x8c(%esp)
01
mov    %esi,0x8(%esp)
mov    %esi,0x4(%esp)
je     805baeb <do_iptunnel+0x29b>
movl   $0x8085f54,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
mov    %esi,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8086525,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
movl   $0x8085f5a,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
cmp    $0x1,%ebp
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0x60(%esp)
movl   $0x0,0x64(%esp)
je     805beb9 <do_iptunnel+0x669>
sub    $0x2,%ebp
add    $0x8,%ebx
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x14(%esp)
jmp    805bbab <do_iptunnel+0x35b>
lea    0x0(%esi),%esi
test   %ebp,%ebp
je     805bf1b <do_iptunnel+0x6cb>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
orw    $0x1,0x24(%esp)
addl   $0x1,0x14(%esp)
movl   $0x89f5,0x18(%esp)
mov    %eax,0x20(%esp)
cmpl   $0x1,0x14(%esp)
jg     805beea <do_iptunnel+0x69a>
sub    $0x2,%ebp
add    $0x8,%ebx
cmp    $0xffffffff,%ebp
je     805bc84 <do_iptunnel+0x434>
mov    -0x4(%ebx),%eax
mov    $0x8085f80,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805bb68 <do_iptunnel+0x318>
mov    $0x8085f8c,%edi
mov    $0xe,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805bbf8 <do_iptunnel+0x3a8>
test   %ebp,%ebp
je     805bf1b <do_iptunnel+0x6cb>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
addl   $0x1,0x14(%esp)
movl   $0x89f5,0x18(%esp)
mov    %eax,0x20(%esp)
jmp    805bb91 <do_iptunnel+0x341>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8085f9a,%edi
mov    $0xb,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805bc30 <do_iptunnel+0x3e0>
test   %ebp,%ebp
je     805bf1b <do_iptunnel+0x6cb>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
addl   $0x1,0x14(%esp)
movl   $0x89f6,0x18(%esp)
mov    %eax,0x20(%esp)
jmp    805bb91 <do_iptunnel+0x341>
cmpb   $0x64,(%eax)
jne    805bc73 <do_iptunnel+0x423>
cmpb   $0x65,0x1(%eax)
jne    805bc73 <do_iptunnel+0x423>
cmpb   $0x76,0x2(%eax)
jne    805bc73 <do_iptunnel+0x423>
cmpb   $0x0,0x3(%eax)
jne    805bc73 <do_iptunnel+0x423>
test   %ebp,%ebp
je     805bf1b <do_iptunnel+0x6cb>
movl   $0xf,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x58(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
addl   $0x1,0x1c(%esp)
jmp    805bb91 <do_iptunnel+0x341>
mov    %eax,0xc(%esp)
movl   $0x8085fa5,0x8(%esp)
jmp    805b89b <do_iptunnel+0x4b>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     805beb9 <do_iptunnel+0x669>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   805ded0 <tnl_prl_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
add    $0x4,%ebx
sub    $0x1,%ebp
movl   $0x0,0x78(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x18,%eax
jb     805bcb7 <do_iptunnel+0x467>
test   %ebp,%ebp
movl   $0x0,0x68(%esp)
movl   $0x0,0x6c(%esp)
movl   $0x0,0x70(%esp)
movl   $0x0,0x74(%esp)
je     805beb9 <do_iptunnel+0x669>
movl   $0x0,0x14(%esp)
movl   $0x0,0x18(%esp)
jmp    805bd7e <do_iptunnel+0x52e>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805bf1b <do_iptunnel+0x6cb>
movl   $0xa,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
test   %eax,%eax
jne    805bf33 <do_iptunnel+0x6e3>
mov    0x38(%esp),%eax
movl   $0x89f9,0x14(%esp)
mov    %eax,0x78(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x7c(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x80(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x84(%esp)
movzwl 0x32(%esp),%eax
mov    %ax,0x8c(%esp)
sub    $0x1,%ebp
lea    0x4(%esi),%ebx
je     805be70 <do_iptunnel+0x620>
mov    (%ebx),%eax
mov    $0xb,%ecx
mov    $0x8085fde,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805bd08 <do_iptunnel+0x4b8>
mov    $0x8085ffd,%edi
mov    $0x11,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805bdf8 <do_iptunnel+0x5a8>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805bf1b <do_iptunnel+0x6cb>
movl   $0x2,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
test   %eax,%eax
jne    805bf20 <do_iptunnel+0x6d0>
mov    0x38(%esp),%eax
movl   $0x89f9,0x14(%esp)
mov    %eax,0x88(%esp)
movzwl 0x32(%esp),%eax
mov    %ax,0x8e(%esp)
jmp    805bd72 <do_iptunnel+0x522>
mov    $0x8086028,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805be50 <do_iptunnel+0x600>
cmpb   $0x64,(%eax)
jne    805be5f <do_iptunnel+0x60f>
cmpb   $0x65,0x1(%eax)
jne    805be5f <do_iptunnel+0x60f>
cmpb   $0x76,0x2(%eax)
jne    805be5f <do_iptunnel+0x60f>
cmpb   $0x0,0x3(%eax)
jne    805be5f <do_iptunnel+0x60f>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805bf1b <do_iptunnel+0x6cb>
movl   $0xf,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
addl   $0x1,0x18(%esp)
jmp    805bd72 <do_iptunnel+0x522>
mov    %ebx,%esi
movl   $0x89fa,0x14(%esp)
jmp    805bd72 <do_iptunnel+0x522>
mov    %eax,0xc(%esp)
movl   $0x8086032,0x8(%esp)
jmp    805b89b <do_iptunnel+0x4b>
mov    0x18(%esp),%eax
test   %eax,%eax
je     805beb9 <do_iptunnel+0x669>
lea    0x78(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   805def0 <tnl_6rd_ioctl>
jmp    805b96c <do_iptunnel+0x11c>
mov    (%ebx),%eax
movl   $0x8085d88,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805b89b <do_iptunnel+0x4b>
or     $0xffffffff,%eax
jmp    805b96c <do_iptunnel+0x11c>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085f6b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085fc1,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    0x4(%ebx),%eax
movl   $0x808600e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8085fe9,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
test   $0x1,%al
push   %esi
mov    %eax,%edi
push   %ebx
mov    %edx,%esi
mov    %eax,%ebx
mov    $0x4c,%edx
jne    805bfa0 <do_iptunnel+0x750>
test   $0x2,%edi
jne    805bfb0 <do_iptunnel+0x760>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     805bf81 <do_iptunnel+0x731>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     805bf89 <do_iptunnel+0x739>
movb   $0x0,(%edi)
test   %esi,%esi
movb   $0x29,0x14(%ebx)
je     805bf99 <do_iptunnel+0x749>
movb   $0x40,0x16(%ebx)
movb   $0x4,0x15(%ebx)
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x1(%eax),%edi
mov    $0x4b,%dl
test   $0x2,%edi
movb   $0x0,(%eax)
je     805bf6a <do_iptunnel+0x71a>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    805bf6a <do_iptunnel+0x71a>
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xb0,%esp
mov    %gs:0x14,%eax
mov    %eax,0xac(%esp)
xor    %eax,%eax
lea    0x2c(%esp),%esi
lea    0x30(%ebx),%eax
movl   $0x40,0xc(%esp)
lea    0x6c(%esp),%edi
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0xa,(%esp)
call   804baa0 <inet_ntop@plt>
lea    0x20(%ebx),%eax
movl   $0x40,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0xa,(%esp)
call   804baa0 <inet_ntop@plt>
movzbl 0x14(%ebx),%eax
mov    %eax,(%esp)
call   805db70 <tnl_strproto>
mov    %edi,0x14(%esp)
mov    %esi,0x10(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8086050,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x10(%ebx),%eax
test   %eax,%eax
jne    805c230 <do_iptunnel+0x9e0>
testb  $0x1,0x1c(%ebx)
je     805c120 <do_iptunnel+0x8d0>
movl   $0x808635d,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movzbl 0x16(%ebx),%eax
movl   $0x808637d,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
testb  $0x2,0x1c(%ebx)
je     805c170 <do_iptunnel+0x920>
movl   $0x808638a,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
testb  $0x4,0x1c(%ebx)
je     805c148 <do_iptunnel+0x8f8>
movl   $0x80863a9,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x18(%ebx),%eax
movl   $0x80863ce,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
testb  $0x10,0x1c(%ebx)
jne    805c210 <do_iptunnel+0x9c0>
cmpb   $0x2f,0x14(%ebx)
je     805c1a0 <do_iptunnel+0x950>
mov    0xac(%esp),%eax
xor    %gs:0x14,%eax
jne    805c367 <do_iptunnel+0xb17>
add    $0xb0,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movzbl 0x15(%ebx),%eax
movl   $0x808636e,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c079 <do_iptunnel+0x829>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%eax
movl   $0x80863bc,0x4(%esp)
movl   $0x1,(%esp)
and    $0xffff0f00,%eax
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c0d1 <do_iptunnel+0x881>
nop
mov    0x18(%ebx),%eax
movl   $0x808639a,0x4(%esp)
movl   $0x1,(%esp)
and    $0xf00f,%eax
bswap  %eax
shr    $0x14,%eax
movzbl %al,%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c0b3 <do_iptunnel+0x863>
lea    0x0(%esi),%esi
movzwl 0x40(%ebx),%eax
test   $0x20,%al
je     805c357 <do_iptunnel+0xb07>
movzwl 0x42(%ebx),%edx
test   $0x20,%dl
jne    805c2d8 <do_iptunnel+0xa88>
or     %eax,%edx
and    $0x20,%dl
jne    805c307 <do_iptunnel+0xab7>
lea    0x0(%esi,%eiz,1),%esi
test   $0x10,%al
jne    805c260 <do_iptunnel+0xa10>
test   $0x80,%al
jne    805c289 <do_iptunnel+0xa39>
movzwl 0x42(%ebx),%eax
test   $0x10,%al
jne    805c2b2 <do_iptunnel+0xa62>
test   $0x80,%al
je     805c102 <do_iptunnel+0x8b2>
mov    0x8095c90,%eax
movl   $0x8085e5b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c102 <do_iptunnel+0x8b2>
xchg   %ax,%ax
movl   $0x80863e1,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c0f8 <do_iptunnel+0x8a8>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
test   %eax,%eax
je     805c05b <do_iptunnel+0x80b>
mov    %eax,0x8(%esp)
movl   $0x8084184,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c05b <do_iptunnel+0x80b>
lea    0x0(%esi),%esi
mov    0x8095c90,%eax
movl   $0x80859f8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x40(%ebx),%eax
test   $0x80,%al
je     805c1d8 <do_iptunnel+0x988>
mov    0x8095c90,%eax
movl   $0x8085a1c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x42(%ebx),%eax
test   $0x10,%al
je     805c1e4 <do_iptunnel+0x994>
mov    0x8095c90,%eax
movl   $0x8085a4c,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x42(%ebx),%eax
jmp    805c1e4 <do_iptunnel+0x994>
mov    0x48(%ebx),%ecx
cmp    0x44(%ebx),%ecx
jne    805c1b9 <do_iptunnel+0x969>
bswap  %ecx
movl   $0x8085e3f,0x4(%esp)
mov    %ecx,0x8(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movzwl 0x40(%ebx),%eax
jmp    805c1c8 <do_iptunnel+0x978>
mov    0x44(%ebx),%eax
movl   $0x8085e47,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
testb  $0x20,0x42(%ebx)
jne    805c338 <do_iptunnel+0xae8>
movzwl 0x40(%ebx),%eax
jmp    805c1c8 <do_iptunnel+0x978>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%ebx),%eax
movl   $0x8085e51,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805c32a <do_iptunnel+0xada>
mov    %eax,%edx
or     0x42(%ebx),%dx
and    $0x20,%dl
jne    805c324 <do_iptunnel+0xad4>
jmp    805c1c8 <do_iptunnel+0x978>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x41,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086070,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80860b4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80860ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086124,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086144,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80863ef,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80857f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808640b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808618c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4,0xc(%esp)
movl   $0x80861b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x40,0xc(%esp)
movl   $0x80861e4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086210,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086240,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086270,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xcc,%esp
mov    0xe0(%esp),%eax
mov    %ecx,0x28(%esp)
movl   $0x0,0x60(%esp)
movl   $0x0,0x64(%esp)
mov    %eax,0x20(%esp)
mov    %gs:0x14,%eax
mov    %eax,0xbc(%esp)
xor    %eax,%eax
test   %ebp,%ebp
movl   $0x0,0x68(%esp)
movl   $0x0,0x6c(%esp)
jle    805cba3 <do_iptunnel+0x1353>
mov    %edx,%ebx
movl   $0x0,0x1c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
mov    $0x5,%ecx
mov    $0x8085ebc,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805c6f8 <do_iptunnel+0xea8>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x4(%ebx),%eax
mov    $0x8086427,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c768 <do_iptunnel+0xf18>
mov    $0x8086431,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c768 <do_iptunnel+0xf18>
mov    $0x8086438,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c698 <do_iptunnel+0xe48>
mov    $0x8086440,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c698 <do_iptunnel+0xe48>
mov    $0x808644a,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c698 <do_iptunnel+0xe48>
mov    $0x8086450,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805c9f8 <do_iptunnel+0x11a8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x4,0x14(%eax)
sub    $0x1,%ebp
addl   $0x1,0x1c(%esp)
test   %ebp,%ebp
lea    0x4(%edx),%ebx
jg     805c600 <do_iptunnel+0xdb0>
xor    %eax,%eax
cmpb   $0x0,0x60(%esp)
je     805c6d9 <do_iptunnel+0xe89>
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
mov    0x20(%esp),%ebx
test   %eax,%eax
mov    %eax,0x10(%ebx)
sete   %al
movzbl %al,%eax
neg    %eax
mov    0xbc(%esp),%ebx
xor    %gs:0x14,%ebx
jne    805cf81 <do_iptunnel+0x1731>
add    $0xcc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x8082f3c,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805c778 <do_iptunnel+0xf28>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
mov    0x24(%esp),%edx
cmpb   $0x0,0x38(%esp)
je     805cbb5 <do_iptunnel+0x1365>
mov    0x20(%esp),%edi
mov    0x40(%esp),%ecx
mov    %ecx,0x30(%edi)
mov    0x44(%esp),%ecx
mov    %ecx,0x34(%edi)
mov    0x48(%esp),%ecx
mov    %ecx,0x38(%edi)
mov    0x4c(%esp),%ecx
mov    %ecx,0x3c(%edi)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x20(%esp),%eax
movb   $0x29,0x14(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x0(%esi),%esi
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805c7e8 <do_iptunnel+0xf98>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
mov    0x24(%esp),%edx
cmpb   $0x0,0x38(%esp)
je     805cf6e <do_iptunnel+0x171e>
mov    0x20(%esp),%esi
mov    0x40(%esp),%ecx
mov    %ecx,0x20(%esi)
mov    0x44(%esp),%ecx
mov    %ecx,0x24(%esi)
mov    0x48(%esp),%ecx
mov    %ecx,0x28(%esi)
mov    0x4c(%esp),%ecx
mov    %ecx,0x2c(%esi)
jmp    805c6a0 <do_iptunnel+0xe50>
movzbl (%eax),%esi
cmp    $0x64,%esi
mov    %esi,0x24(%esp)
jne    805c840 <do_iptunnel+0xff0>
cmpb   $0x65,0x1(%eax)
jne    805c840 <do_iptunnel+0xff0>
cmpb   $0x76,0x2(%eax)
jne    805c840 <do_iptunnel+0xff0>
cmpb   $0x0,0x3(%eax)
jne    805c840 <do_iptunnel+0xff0>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
movl   $0xf,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
mov    0x24(%esp),%edx
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x0(%esi),%esi
mov    $0xb,%ecx
mov    %eax,%esi
mov    $0x8086470,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    805c8a0 <do_iptunnel+0x1050>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x4(%ebx),%eax
mov    $0x5,%ecx
mov    $0x8086369,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x24(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    805ca69 <do_iptunnel+0x1219>
mov    0x20(%esp),%eax
orl    $0x1,0x1c(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c8d8 <do_iptunnel+0x1088>
mov    $0x74,%ecx
mov    %ecx,%edx
sub    0x24(%esp),%edx
mov    %edx,0x24(%esp)
jne    805c920 <do_iptunnel+0x10d0>
cmpb   $0x74,0x1(%eax)
jne    805c920 <do_iptunnel+0x10d0>
cmpb   $0x6c,0x2(%eax)
jne    805c920 <do_iptunnel+0x10d0>
cmpb   $0x0,0x3(%eax)
jne    805c920 <do_iptunnel+0x10d0>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x24(%esp),%edx
test   %eax,%eax
jne    805cc12 <do_iptunnel+0x13c2>
movzbl 0x38(%esp),%eax
mov    0x20(%esp),%ebx
mov    %al,0x16(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x8086488,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     805c8d8 <do_iptunnel+0x1088>
mov    $0x8085f37,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805cad5 <do_iptunnel+0x1285>
mov    0x24(%esp),%edx
test   %edx,%edx
je     805caab <do_iptunnel+0x125b>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805cad5 <do_iptunnel+0x1285>
mov    (%ebx),%eax
mov    $0x80864a8,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805c9aa <do_iptunnel+0x115a>
movzbl (%eax),%edx
cmp    $0x66,%edx
mov    %edx,0x24(%esp)
jne    805cc7c <do_iptunnel+0x142c>
cmpb   $0x6c,0x1(%eax)
jne    805cc38 <do_iptunnel+0x13e8>
cmpb   $0x0,0x2(%eax)
jne    805cc38 <do_iptunnel+0x13e8>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x20(%esp),%eax
mov    $0x8,%ecx
mov    $0x80863b4,%edi
andl   $0xf0ff,0x18(%eax)
mov    0x4(%ebx),%eax
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x24(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    805cbc8 <do_iptunnel+0x1378>
mov    0x20(%esp),%eax
orl    $0x4,0x1c(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x0(%esi),%esi
mov    $0x8086457,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ca5c <do_iptunnel+0x120c>
mov    $0x808645e,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ca5c <do_iptunnel+0x120c>
mov    $0x8086467,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805ca4f <do_iptunnel+0x11ff>
cmpb   $0x61,(%eax)
jne    805cb67 <do_iptunnel+0x1317>
cmpb   $0x6e,0x1(%eax)
jne    805cb67 <do_iptunnel+0x1317>
cmpb   $0x79,0x2(%eax)
jne    805cb67 <do_iptunnel+0x1317>
cmpb   $0x0,0x3(%eax)
jne    805cb67 <do_iptunnel+0x1317>
mov    0x20(%esp),%eax
movb   $0x0,0x14(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x20(%esp),%eax
movb   $0x2f,0x14(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x24(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x2c(%esp)
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x2c(%esp),%edx
cmp    $0xffffffff,%eax
jl     805cf5b <do_iptunnel+0x170b>
mov    0x20(%esp),%ebx
movzbl 0x38(%esp),%eax
andl   $0xfffffffe,0x1c(%ebx)
mov    %al,0x15(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
movzbl 0x1(%eax),%edx
cmp    $0x63,%dl
je     805cb94 <do_iptunnel+0x1344>
cmp    $0x6f,%dl
jne    805c95c <do_iptunnel+0x110c>
cmpb   $0x73,0x2(%eax)
jne    805c95c <do_iptunnel+0x110c>
cmpb   $0x0,0x3(%eax)
jne    805c95c <do_iptunnel+0x110c>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x20(%esp),%eax
mov    $0x8,%ecx
mov    $0x80863b4,%edi
andl   $0xffff0ff0,0x18(%eax)
mov    0x4(%ebx),%eax
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x24(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    805cb1c <do_iptunnel+0x12cc>
mov    0x20(%esp),%eax
orl    $0x2,0x1c(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x24(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x2c(%esp)
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x2c(%esp),%edx
test   %eax,%eax
jne    805cf86 <do_iptunnel+0x1736>
movzbl 0x38(%esp),%eax
mov    0x20(%esp),%ebx
shl    $0x14,%eax
bswap  %eax
andl   $0xfffffffd,0x1c(%ebx)
and    $0xf00f,%eax
or     %eax,0x18(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8085ee2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
cmpb   $0x0,0x2(%eax)
je     805cad5 <do_iptunnel+0x1285>
jmp    805c95c <do_iptunnel+0x110c>
xor    %eax,%eax
jmp    805c6d9 <do_iptunnel+0xe89>
lea    0x0(%esi),%esi
call   8080010 <incomplete_command>
mov    0x4(%ebx),%eax
movl   $0x80862a0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x24(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x2c(%esp)
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
mov    0x2c(%esp),%edx
test   %eax,%eax
jne    805cc25 <do_iptunnel+0x13d5>
mov    0x38(%esp),%eax
cmp    $0xfffff,%eax
ja     805cc25 <do_iptunnel+0x13d5>
mov    0x20(%esp),%ebx
bswap  %eax
and    $0xffff0f00,%eax
andl   $0xfffffffb,0x1c(%ebx)
or     %eax,0x18(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x4(%ebx),%eax
movl   $0x808648d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80864b2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8088c6f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cd15 <do_iptunnel+0x14c5>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cd05 <do_iptunnel+0x14b5>
mov    0x20(%esp),%eax
orl    $0x10,0x1c(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x8088c6f,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     805cc4c <do_iptunnel+0x13fc>
cmpl   $0x6b,0x24(%esp)
jne    805cd15 <do_iptunnel+0x14c5>
cmpb   $0x65,0x1(%eax)
jne    805cd15 <do_iptunnel+0x14c5>
cmpb   $0x79,0x2(%eax)
jne    805cd15 <do_iptunnel+0x14c5>
cmpb   $0x0,0x3(%eax)
jne    805cd15 <do_iptunnel+0x14c5>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
mov    0x20(%esp),%esi
mov    0x4(%ebx),%ebx
orw    $0x20,0x40(%esi)
orw    $0x20,0x42(%esi)
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
mov    0x24(%esp),%edx
test   %eax,%eax
je     805cd71 <do_iptunnel+0x1521>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    0x24(%esp),%edx
mov    %eax,0x48(%esi)
mov    %eax,0x44(%esi)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    %eax,0x4(%esp)
movl   $0x80864c4,(%esp)
call   80800b0 <invarg>
mov    $0x8085efc,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cde8 <do_iptunnel+0x1598>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
mov    0x20(%esp),%esi
mov    0x4(%ebx),%ebx
orw    $0x20,0x40(%esi)
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
mov    0x24(%esp),%edx
test   %eax,%eax
je     805cdae <do_iptunnel+0x155e>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    0x24(%esp),%edx
mov    %eax,0x44(%esi)
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x38(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   807f320 <get_unsigned>
mov    0x24(%esp),%edx
test   %eax,%eax
js     805ce44 <do_iptunnel+0x15f4>
mov    0x20(%esp),%ebx
mov    0x38(%esp),%eax
bswap  %eax
mov    %eax,0x48(%ebx)
mov    %eax,0x44(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
lea    0x38(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   807f320 <get_unsigned>
mov    0x24(%esp),%edx
test   %eax,%eax
js     805ce75 <do_iptunnel+0x1625>
mov    0x38(%esp),%eax
mov    0x20(%esp),%ebx
bswap  %eax
mov    %eax,0x44(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x8085f01,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cedc <do_iptunnel+0x168c>
lea    0x4(%ebx),%edx
sub    $0x1,%ebp
mov    %edx,0x24(%esp)
je     805cbaa <do_iptunnel+0x135a>
mov    0x20(%esp),%esi
mov    0x4(%ebx),%ebx
orw    $0x20,0x42(%esi)
movl   $0x2e,0x4(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
mov    0x24(%esp),%edx
test   %eax,%eax
je     805cea6 <do_iptunnel+0x1656>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    0x24(%esp),%edx
mov    %eax,0x48(%esi)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x8095c40,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80864d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80864e8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x38(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   807f320 <get_unsigned>
mov    0x24(%esp),%edx
test   %eax,%eax
js     805cf0a <do_iptunnel+0x16ba>
mov    0x38(%esp),%eax
mov    0x20(%esp),%ebx
bswap  %eax
mov    %eax,0x48(%ebx)
jmp    805c6a0 <do_iptunnel+0xe50>
cmpl   $0x73,0x24(%esp)
jne    805cf3b <do_iptunnel+0x16eb>
cmpb   $0x65,0x1(%eax)
jne    805cf3b <do_iptunnel+0x16eb>
cmpb   $0x71,0x2(%eax)
jne    805cf3b <do_iptunnel+0x16eb>
cmpb   $0x0,0x3(%eax)
jne    805cf3b <do_iptunnel+0x16eb>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x10,0x40(%eax)
orw    $0x10,0x42(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086501,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    $0x8085f06,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cf99 <do_iptunnel+0x1749>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x10,0x40(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    0x4(%ebx),%eax
movl   $0x808647b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80862c8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebx),%eax
movl   $0x8086499,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8088ddc,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cfb9 <do_iptunnel+0x1769>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x10,0x42(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x8085f0c,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805cfe0 <do_iptunnel+0x1790>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x80,0x40(%eax)
orw    $0x80,0x42(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x8085f0b,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805d001 <do_iptunnel+0x17b1>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x80,0x40(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x8085f11,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805d022 <do_iptunnel+0x17d2>
mov    0x20(%esp),%eax
mov    %ebx,%edx
orw    $0x80,0x42(%eax)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805d0e9 <do_iptunnel+0x1899>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805cbaa <do_iptunnel+0x135a>
mov    0x4(%ebx),%eax
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x24(%esp)
call   80801a0 <matches>
mov    0x24(%esp),%edx
test   %eax,%eax
je     805d10c <do_iptunnel+0x18bc>
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax)
jne    805d0fa <do_iptunnel+0x18aa>
movl   $0xf,0x8(%esp)
mov    (%edx),%eax
mov    %edx,0x24(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
mov    0x1c(%esp),%eax
mov    0x24(%esp),%edx
test   %eax,%eax
jne    805c6a0 <do_iptunnel+0xe50>
cmpl   $0x89f3,0x28(%esp)
jne    805c6a0 <do_iptunnel+0xe50>
xor    %eax,%eax
mov    $0x13,%ecx
lea    0x70(%esp),%edi
rep stos %eax,%es:(%edi)
lea    0x70(%esp),%eax
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   805dc00 <tnl_get_ioctl>
mov    0x24(%esp),%edx
test   %eax,%eax
jne    805d0f0 <do_iptunnel+0x18a0>
mov    0x20(%esp),%edi
mov    $0x13,%ecx
lea    0x70(%esp),%esi
rep movsl %ds:(%esi),%es:(%edi)
jmp    805c6a0 <do_iptunnel+0xe50>
mov    %ebx,%edx
jmp    805d045 <do_iptunnel+0x17f5>
mov    $0xffffffff,%eax
jmp    805c6d9 <do_iptunnel+0xe89>
mov    (%edx),%eax
movl   $0x808c3df,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
call   805c370 <do_iptunnel+0xb20>
jmp    805d120 <do_iptunnel+0x18d0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x33c,%esp
movl   $0x80941e0,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x32c(%esp)
xor    %eax,%eax
call   807d5a0 <ll_init_map>
xor    %edx,%edx
lea    0x94(%esp),%eax
call   805bf50 <do_iptunnel+0x700>
lea    0x94(%esp),%eax
mov    $0x89f0,%ecx
mov    %eax,(%esp)
mov    %esi,%edx
mov    %ebx,%eax
movb   $0x0,0xa8(%esp)
call   805c5a0 <do_iptunnel+0xd50>
test   %eax,%eax
js     805d6fe <do_iptunnel+0x1eae>
cmpb   $0x0,0x94(%esp)
je     805d196 <do_iptunnel+0x1946>
mov    0x8095ca4,%eax
test   %eax,%eax
je     805d6b8 <do_iptunnel+0x1e68>
movl   $0x80843db,0x4(%esp)
movl   $0x8085e78,(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%ebp
je     805d6f0 <do_iptunnel+0x1ea0>
lea    0x12c(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805d73f <do_iptunnel+0x1eef>
mov    %ebp,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805d73f <do_iptunnel+0x1eef>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     805d68d <do_iptunnel+0x1e3d>
movl   $0x3a,0x4(%esp)
mov    %ebx,(%esp)
movb   $0x0,0x32b(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     805d668 <do_iptunnel+0x1e18>
movb   $0x0,(%eax)
lea    0x1(%eax),%esi
lea    0x84(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8089002,0x4(%esp)
mov    %ebx,(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x1,%eax
jne    805d668 <do_iptunnel+0x1e18>
lea    0x7c(%esp),%eax
mov    %eax,0x3c(%esp)
lea    0x78(%esp),%eax
mov    %eax,0x38(%esp)
lea    0x74(%esp),%eax
mov    %eax,0x34(%esp)
lea    0x70(%esp),%eax
mov    %eax,0x30(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x2c(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x28(%esp)
lea    0x64(%esp),%eax
mov    %eax,0x24(%esp)
lea    0x80(%esp),%eax
mov    %eax,0x20(%esp)
lea    0x60(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x54(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8085a98,0x4(%esp)
mov    %esi,(%esp)
call   804ba60 <sscanf@plt>
cmp    $0xe,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
cmpb   $0x0,0x94(%esp)
je     805d316 <do_iptunnel+0x1ac6>
lea    0x84(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x94(%esp),%eax
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
lea    0x84(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     805d1f8 <do_iptunnel+0x19a8>
mov    %eax,(%esp)
call   807d450 <ll_index_to_type>
cmp    $0xffffffff,%eax
mov    %eax,%esi
je     805d705 <do_iptunnel+0x1eb5>
cmp    $0x337,%eax
je     805d352 <do_iptunnel+0x1b02>
cmp    $0x301,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
xor    %eax,%eax
mov    $0x13,%ecx
lea    0xe0(%esp),%edi
xor    %edx,%edx
rep stos %eax,%es:(%edi)
lea    0xe0(%esp),%eax
call   805bf50 <do_iptunnel+0x700>
cmp    $0x337,%esi
je     805d732 <do_iptunnel+0x1ee2>
lea    0x84(%esp),%eax
mov    %eax,0x4(%esp)
lea    0xe0(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,(%esp)
call   804b9b0 <__strcpy_chk@plt>
lea    0xe0(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0xf0(%esp)
je     805d1f8 <do_iptunnel+0x19a8>
lea    0xe0(%esp),%eax
mov    %eax,0x4(%esp)
mov    %eax,(%esp)
call   805dc00 <tnl_get_ioctl>
test   %eax,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
mov    0xa4(%esp),%eax
test   %eax,%eax
je     805d3ef <do_iptunnel+0x1b9f>
cmp    0xf0(%esp),%eax
jne    805d1f8 <do_iptunnel+0x19a8>
cmpb   $0x0,0x94(%esp)
je     805d41b <do_iptunnel+0x1bcb>
lea    0xe0(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x94(%esp),%eax
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
lea    0xb4(%esp),%esi
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %esi,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     805d461 <do_iptunnel+0x1c11>
lea    0x100(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
lea    0xc4(%esp),%esi
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %esi,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     805d4a7 <do_iptunnel+0x1c57>
lea    0x110(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
movzbl 0xa8(%esp),%edx
test   %dl,%dl
je     805d4c7 <do_iptunnel+0x1c77>
movzbl 0xf4(%esp),%eax
test   %al,%al
je     805d4c7 <do_iptunnel+0x1c77>
cmp    %al,%dl
jne    805d1f8 <do_iptunnel+0x19a8>
movzbl 0xa9(%esp),%eax
test   %al,%al
je     805d4e0 <do_iptunnel+0x1c90>
cmp    0xf5(%esp),%al
jne    805d1f8 <do_iptunnel+0x19a8>
movzbl 0xaa(%esp),%eax
test   %al,%al
je     805d4f9 <do_iptunnel+0x1ca9>
cmp    0xf6(%esp),%al
jne    805d1f8 <do_iptunnel+0x19a8>
mov    0xac(%esp),%eax
test   $0xf00f,%eax
je     805d51c <do_iptunnel+0x1ccc>
mov    0xf8(%esp),%edx
xor    %eax,%edx
and    $0xf00f,%edx
jne    805d1f8 <do_iptunnel+0x19a8>
test   $0xffff0f00,%eax
je     805d535 <do_iptunnel+0x1ce5>
xor    0xf8(%esp),%eax
test   $0xffff0f00,%eax
jne    805d1f8 <do_iptunnel+0x19a8>
mov    0xb0(%esp),%eax
test   %eax,%eax
je     805d54d <do_iptunnel+0x1cfd>
test   %eax,0xfc(%esp)
je     805d1f8 <do_iptunnel+0x19a8>
lea    0xe0(%esp),%eax
call   805bfc0 <do_iptunnel+0x770>
cmpl   $0x0,0x8095ca4
je     805d651 <do_iptunnel+0x1e01>
mov    0x8095c90,%eax
movl   $0x8089002,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085ac8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085b08,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x20(%esp)
mov    0x80(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c90,%eax
movl   $0x8085b34,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x70(%esp),%eax
movl   $0x8085b74,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x1c(%esp)
mov    0x7c(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x78(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
movl   $0xa,(%esp)
call   804b960 <putchar@plt>
jmp    805d1f8 <do_iptunnel+0x19a8>
lea    0x0(%esi),%esi
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085a6c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    %ebp,(%esp)
call   804b600 <fclose@plt>
xor    %ebx,%ebx
mov    0x32c(%esp),%edi
xor    %gs:0x14,%edi
mov    %ebx,%eax
jne    805d769 <do_iptunnel+0x1f19>
add    $0x33c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    %eax,(%esp)
call   805dc00 <tnl_get_ioctl>
test   %eax,%eax
mov    %eax,%ebx
jne    805d6fe <do_iptunnel+0x1eae>
lea    0x94(%esp),%eax
call   805bfc0 <do_iptunnel+0x770>
movl   $0xa,(%esp)
call   804b960 <putchar@plt>
jmp    805d697 <do_iptunnel+0x1e47>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8087be8,(%esp)
call   804b700 <perror@plt>
jmp    805d695 <do_iptunnel+0x1e45>
mov    $0xffffffff,%ebx
jmp    805d697 <do_iptunnel+0x1e47>
lea    0x84(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8085ea0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805d1f8 <do_iptunnel+0x19a8>
movb   $0x2f,0xf4(%esp)
jmp    805d37c <do_iptunnel+0x1b2c>
mov    0x8095c40,%eax
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085e86,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    805d695 <do_iptunnel+0x1e45>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    $0x1,%edx
push   %ebx
mov    %eax,%esi
sub    $0x6c,%esp
lea    0x10(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x5c(%esp)
xor    %eax,%eax
mov    %ebx,%eax
call   805bf50 <do_iptunnel+0x700>
mov    %esi,%ecx
mov    %ebp,%edx
mov    %ebx,(%esp)
mov    %edi,%eax
call   805c5a0 <do_iptunnel+0xd50>
test   %eax,%eax
js     805d842 <do_iptunnel+0x1ff2>
movzbl 0x24(%esp),%edx
cmp    $0x29,%dl
je     805d828 <do_iptunnel+0x1fd8>
cmp    $0x2f,%dl
je     805d808 <do_iptunnel+0x1fb8>
cmp    $0x4,%dl
je     805d828 <do_iptunnel+0x1fd8>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80862ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
mov    0x5c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805d849 <do_iptunnel+0x1ff9>
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8086522,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805d7ed <do_iptunnel+0x1f9d>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x808651a,0x4(%esp)
mov    %esi,(%esp)
call   805dcd0 <tnl_add_ioctl>
jmp    805d7ed <do_iptunnel+0x1f9d>
mov    $0xffffffff,%eax
jmp    805d7ed <do_iptunnel+0x1f9d>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x60,%esp
mov    0x8095ca8,%ebx
mov    %gs:0x14,%eax
mov    %eax,0x5c(%esp)
xor    %eax,%eax
mov    0x70(%esp),%edi
mov    0x74(%esp),%esi
test   %ebx,%ebx
je     805d970 <do_ip6tunnel+0x120>
cmp    $0xa,%ebx
jne    805d918 <do_ip6tunnel+0xc8>
test   %edi,%edi
jle    805d982 <do_ip6tunnel+0x132>
movl   $0x808340d,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805d948 <do_ip6tunnel+0xf8>
movl   $0x8083411,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805d9f0 <do_ip6tunnel+0x1a0>
movl   $0x8085f9e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805d990 <do_ip6tunnel+0x140>
movl   $0x8083425,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805d907 <do_ip6tunnel+0xb7>
movl   $0x808342a,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805da08 <do_ip6tunnel+0x1b8>
lea    0x4(%esi),%edx
lea    -0x1(%edi),%eax
call   805d120 <do_iptunnel+0x18d0>
jmp    805d957 <do_ip6tunnel+0x107>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x8085d64,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x4(%esi),%ecx
mov    $0x89f1,%ax
lea    -0x1(%edi),%edx
call   805d770 <do_iptunnel+0x1f20>
mov    0x5c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805da96 <do_ip6tunnel+0x246>
add    $0x60,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
test   %edi,%edi
movl   $0xa,0x8095ca8
00
jg     805d889 <do_ip6tunnel+0x39>
xor    %edx,%edx
xor    %eax,%eax
call   805d120 <do_iptunnel+0x18d0>
jmp    805d957 <do_ip6tunnel+0x107>
lea    0x0(%esi),%esi
lea    0x10(%esp),%ebx
mov    $0x1,%edx
mov    %ebx,%eax
call   805bf50 <do_iptunnel+0x700>
lea    0x4(%esi),%edx
mov    $0x89f2,%ecx
lea    -0x1(%edi),%eax
mov    %ebx,(%esp)
call   805c5a0 <do_iptunnel+0xd50>
test   %eax,%eax
js     805da8c <do_ip6tunnel+0x23c>
movzbl 0x24(%esp),%eax
cmp    $0x29,%al
je     805da60 <do_ip6tunnel+0x210>
cmp    $0x2f,%al
je     805da40 <do_ip6tunnel+0x1f0>
cmp    $0x4,%al
je     805da60 <do_ip6tunnel+0x210>
mov    %ebx,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebx,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805d957 <do_ip6tunnel+0x107>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%esi),%ecx
mov    $0x89f3,%ax
lea    -0x1(%edi),%edx
call   805d770 <do_iptunnel+0x1f20>
jmp    805d957 <do_ip6tunnel+0x107>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8083420,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805d907 <do_ip6tunnel+0xb7>
movl   $0x8082d28,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805da79 <do_ip6tunnel+0x229>
call   805c370 <do_iptunnel+0xb20>
lea    0x0(%esi),%esi
mov    %ebx,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x8086522,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805d957 <do_ip6tunnel+0x107>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x808651a,(%esp)
call   805dde0 <tnl_del_ioctl>
jmp    805d957 <do_ip6tunnel+0x107>
mov    (%esi),%eax
movl   $0x8086324,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    805d924 <do_ip6tunnel+0xd4>
mov    $0xffffffff,%eax
jmp    805d957 <do_ip6tunnel+0x107>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x5c,%esp
lea    0x2c(%esp),%ebx
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x10,0x8(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
call   804b980 <strncpy@plt>
mov    0x8095ca8,%eax
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %esi,0x3c(%esp)
mov    %eax,(%esp)
call   804bac0 <socket@plt>
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%esi
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%ebx
je     805db48 <do_ip6tunnel+0x2f8>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
cmp    0x70(%esp),%eax
je     805db48 <do_ip6tunnel+0x2f8>
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebp,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x808652a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
mov    %ebx,%eax
mov    0x4c(%esp),%edx
xor    %gs:0x14,%edx
jne    805db67 <do_ip6tunnel+0x317>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
cmp    $0x4,%al
je     805dbe8 <tnl_strproto+0x78>
jbe    805dbb0 <tnl_strproto+0x40>
cmp    $0x29,%al
je     805db98 <tnl_strproto+0x28>
cmp    $0x2f,%al
jne    805dbc8 <tnl_strproto+0x58>
movl   $0x657267,0x8095ec8
00
mov    $0x8095ec8,%eax
ret
lea    0x0(%esi),%esi
movl   $0x36767069,0x8095ec8
36
mov    $0x8095ec8,%eax
movb   $0x0,0x8095ecc
ret
nop
test   %al,%al
jne    805dbc8 <tnl_strproto+0x58>
movl   $0x796e61,0x8095ec8
00
mov    $0x8095ec8,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x6e6b6e75,0x8095ec8
6e
mov    $0x8095ec8,%eax
movl   $0x6e776f,0x8095ecc
00
ret
lea    0x0(%esi),%esi
mov    $0x7069,%eax
mov    %ax,0x8095ec8
mov    $0x8095ec8,%eax
movb   $0x0,0x8095eca
ret
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%edi
lea    0x2c(%esp),%ebx
mov    %ebx,(%esp)
mov    0x64(%esp),%esi
movl   $0x10,0x8(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
mov    %edi,0x4(%esp)
call   804b980 <strncpy@plt>
mov    0x8095ca8,%eax
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %esi,0x3c(%esp)
mov    %eax,(%esp)
call   804bac0 <socket@plt>
mov    %ebx,0x8(%esp)
movl   $0x89f0,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%esi
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%ebx
je     805dca3 <tnl_get_ioctl+0xa3>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %edi,0xc(%esp)
movl   $0x8086543,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
mov    %ebx,%eax
mov    0x4c(%esp),%edx
xor    %gs:0x14,%edx
jne    805dcc1 <tnl_get_ioctl+0xc1>
add    $0x50,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    %gs:0x14,%ecx
mov    %ecx,0x4c(%esp)
xor    %ecx,%ecx
mov    0x64(%esp),%eax
mov    0x68(%esp),%edx
mov    0x6c(%esp),%edi
cmp    $0x89f3,%esi
je     805dda8 <tnl_add_ioctl+0xd8>
lea    0x2c(%esp),%ebx
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804b980 <strncpy@plt>
mov    0x8095ca8,%eax
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,0x3c(%esp)
mov    %eax,(%esp)
call   804bac0 <socket@plt>
mov    %esi,0x4(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%esi
je     805dd84 <tnl_add_ioctl+0xb4>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x808655f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   804bb60 <close@plt>
mov    %esi,%eax
mov    0x4c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805ddce <tnl_add_ioctl+0xfe>
add    $0x50,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
cmpb   $0x0,(%edx)
je     805dcff <tnl_add_ioctl+0x2f>
lea    0x2c(%esp),%ebx
movl   $0x10,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
call   804b980 <strncpy@plt>
jmp    805dd17 <tnl_add_ioctl+0x47>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x64(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x4c(%esp)
xor    %ecx,%ecx
mov    0x60(%esp),%edx
mov    0x68(%esp),%esi
cmpb   $0x0,(%eax)
movl   $0x10,0x8(%esp)
je     805deb0 <tnl_del_ioctl+0xd0>
lea    0x2c(%esp),%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804b980 <strncpy@plt>
mov    0x8095ca8,%eax
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %esi,0x3c(%esp)
mov    %eax,(%esp)
call   804bac0 <socket@plt>
mov    %ebx,0x8(%esp)
movl   $0x89f2,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%esi
je     805de91 <tnl_del_ioctl+0xb1>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x808657c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   804bb60 <close@plt>
mov    %esi,%eax
mov    0x4c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805dec5 <tnl_del_ioctl+0xe5>
add    $0x50,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x2c(%esp),%ebx
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
call   804b980 <strncpy@plt>
jmp    805de20 <tnl_del_ioctl+0x40>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0xffffffff,0x4(%esp)
jmp    805daa0 <do_ip6tunnel+0x250>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0xffffffff,0x4(%esp)
jmp    805daa0 <do_ip6tunnel+0x250>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0x89f8,%eax
mov    0x8(%esp),%ecx
movl   $0x16,0x4(%esp)
jmp    805daa0 <do_ip6tunnel+0x250>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x8095f20,%eax
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
mov    0x8095f1c,%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
js     805df65 <tnl_ioctl_get_6rd+0x55>
movl   $0x0,0x8095f20
00
xor    %eax,%eax
add    $0x1c,%esp
ret
movl   $0x8082e9f,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    805df61 <tnl_ioctl_get_6rd+0x51>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0xab,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808665c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1bc,%esp
mov    0x1d4(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x1ac(%esp)
xor    %eax,%eax
mov    0x1d8(%esp),%esi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%edx
lea    -0x1c(%eax),%ecx
cmp    $0x2,%cx
ja     805e2b0 <print_neigh+0x2d0>
sub    $0x1c,%edx
js     805e6cd <print_neigh+0x6ed>
mov    0x8095f1c,%ecx
test   %ecx,%ecx
je     805e058 <print_neigh+0x78>
cmp    $0x1c,%ax
je     805e058 <print_neigh+0x78>
xor    %eax,%eax
mov    0x1ac(%esp),%esi
xor    %gs:0x14,%esi
jne    805e702 <print_neigh+0x722>
add    $0x1bc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095ee0,%eax
test   %eax,%eax
je     805e069 <print_neigh+0x89>
movzbl 0x10(%ebx),%ecx
cmp    %ecx,%eax
jne    805e033 <print_neigh+0x53>
mov    0x8095ee4,%eax
test   %eax,%eax
jne    805e2e8 <print_neigh+0x308>
movzwl 0x18(%ebx),%eax
mov    0x8095ee8,%ecx
movzwl %ax,%edi
test   %ecx,%edi
jne    805e0a0 <print_neigh+0xc0>
testb  $0x8,0x1a(%ebx)
jne    805e0a0 <print_neigh+0xc0>
test   %ax,%ax
je     805e3b8 <print_neigh+0x3d8>
cmpb   $0xc,0x10(%ebx)
jne    805e033 <print_neigh+0x53>
lea    0x0(%esi,%eiz,1),%esi
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x24(%esp),%edx
test   %edx,%edx
je     805e0d4 <print_neigh+0xf4>
cmpb   $0x0,0x8095ef0
jne    805e3c8 <print_neigh+0x3e8>
mov    0x8095eec,%eax
test   %eax,%eax
je     805e0f0 <print_neigh+0x110>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     805e0f0 <print_neigh+0x110>
mov    0x10(%eax),%eax
test   %eax,%eax
jne    805e033 <print_neigh+0x53>
mov    0x8095f1c,%eax
test   %eax,%eax
je     805e16c <print_neigh+0x18c>
mov    0x8095f20,%edi
mov    (%ebx),%edx
add    $0x3,%edi
and    $0xfffffffc,%edi
lea    (%edi,%edx,1),%ecx
cmp    0x8095f24,%ecx
ja     805e2f8 <print_neigh+0x318>
add    %eax,%edi
mov    %edi,(%esp)
mov    %edx,0x8(%esp)
mov    %ebx,0x4(%esp)
call   804b5e0 <memcpy@plt>
mov    $0x1d,%eax
mov    %ax,0x4(%edi)
mov    $0x1,%eax
mov    %ax,0x6(%edi)
mov    0x80941fc,%eax
add    $0x1,%eax
mov    %eax,0x80941fc
mov    %eax,0x8(%edi)
add    (%ebx),%edi
addl   $0x1,0x8095f18
sub    0x8095f1c,%edi
cmpl   $0x1,0x8095ca4
mov    %edi,0x8095f20
jle    805e033 <print_neigh+0x53>
movzwl 0x4(%ebx),%eax
cmp    $0x1d,%ax
je     805e62c <print_neigh+0x64c>
cmp    $0x1e,%ax
je     805e6a8 <print_neigh+0x6c8>
mov    0x24(%esp),%eax
test   %eax,%eax
je     805e1d8 <print_neigh+0x1f8>
lea    0xac(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ee4,%ebp
test   %ebp,%ebp
je     805e328 <print_neigh+0x348>
mov    0x28(%esp),%edi
test   %edi,%edi
je     805e243 <print_neigh+0x263>
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   807d450 <ll_index_to_type>
mov    0x28(%esp),%edx
lea    0x6c(%esp),%ecx
movl   $0x40,0x10(%esp)
mov    %ecx,0xc(%esp)
add    $0x4,%edx
mov    %eax,0x8(%esp)
movzwl -0x4(%edx),%eax
mov    %edx,(%esp)
sub    $0x4,%eax
mov    %eax,0x4(%esp)
call   8081e40 <ll_addr_n2a>
movl   $0x80865a3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x1a(%ebx),%eax
test   %al,%al
js     805e651 <print_neigh+0x671>
test   $0x8,%al
jne    805e430 <print_neigh+0x450>
mov    0x2c(%esp),%edi
test   %edi,%edi
je     805e26d <print_neigh+0x28d>
mov    0x8095ca4,%ecx
test   %ecx,%ecx
jne    805e360 <print_neigh+0x380>
mov    0x30(%esp),%eax
test   %eax,%eax
je     805e283 <print_neigh+0x2a3>
mov    0x8095ca4,%edx
test   %edx,%edx
jne    805e608 <print_neigh+0x628>
movzwl 0x18(%ebx),%edi
test   %di,%di
jne    805e458 <print_neigh+0x478>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
jmp    805e033 <print_neigh+0x53>
lea    0x0(%esi),%esi
movzwl 0x6(%ebx),%ecx
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8086750,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    805e035 <print_neigh+0x55>
lea    0x0(%esi,%eiz,1),%esi
cmp    0x14(%ebx),%eax
jne    805e033 <print_neigh+0x53>
jmp    805e076 <print_neigh+0x96>
xchg   %ax,%ax
nop
lea    0x0(%esi,%eiz,1),%esi
call   805df30 <tnl_ioctl_get_6rd+0x20>
test   %eax,%eax
jne    805e6f8 <print_neigh+0x718>
mov    0x8095f20,%edi
mov    0x8095f1c,%eax
mov    (%ebx),%edx
add    $0x3,%edi
and    $0xfffffffc,%edi
jmp    805e116 <print_neigh+0x136>
lea    0x0(%esi),%esi
mov    0x14(%ebx),%eax
test   %eax,%eax
je     805e1e6 <print_neigh+0x206>
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805e1e6 <print_neigh+0x206>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8098b80,%ebp
test   %ebp,%ebp
je     805e697 <print_neigh+0x6b7>
mov    0x10(%edi),%eax
test   %eax,%eax
jne    805e67a <print_neigh+0x69a>
mov    0xc(%edi),%eax
xor    %edx,%edx
div    %ebp
xor    %edx,%edx
mov    %eax,0x14(%esp)
mov    0x4(%edi),%eax
div    %ebp
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0x8(%edi),%eax
movl   $0x80865c4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
div    %ebp
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805e26d <print_neigh+0x28d>
nop
and    $0x1,%ch
jne    805e0a0 <print_neigh+0xc0>
jmp    805e096 <print_neigh+0xb6>
xchg   %ax,%ax
lea    0x44(%esp),%ebp
xor    %eax,%eax
mov    $0xa,%ecx
mov    %ebp,%edi
rep stos %eax,%es:(%edi)
movzbl 0x10(%ebx),%eax
add    $0x4,%edx
movl   $0x20,0xc(%esp)
mov    %al,0x44(%esp)
movzwl -0x4(%edx),%eax
mov    %edx,0x4(%esp)
sub    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
movswl 0x8095ef2,%eax
movl   $0x8095ef0,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
je     805e0d4 <print_neigh+0xf4>
jmp    805e033 <print_neigh+0x53>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80865b5,(%esp)
call   804b710 <fwrite@plt>
jmp    805e257 <print_neigh+0x277>
lea    0x0(%esi),%esi
mov    %esi,0x4(%esp)
movzwl %di,%ebx
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
test   $0x1,%di
je     805e49e <print_neigh+0x4be>
mov    $0x8088729,%eax
and    $0xfffffffe,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80865de,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2,%bl
je     805e4cf <print_neigh+0x4ef>
mov    $0x8088729,%eax
and    $0xfffffffd,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80865eb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%bl
je     805e500 <print_neigh+0x520>
mov    $0x8088729,%eax
and    $0xfffffffb,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80865f7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x8,%bl
je     805e531 <print_neigh+0x551>
mov    $0x8088729,%eax
and    $0xfffffff7,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80865ff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x10,%bl
je     805e562 <print_neigh+0x582>
mov    $0x8088729,%eax
and    $0xffffffef,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8086607,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x20,%bl
je     805e593 <print_neigh+0x5b3>
mov    $0x8088729,%eax
and    $0xffffffdf,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808660f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x40,%bl
je     805e5c4 <print_neigh+0x5e4>
mov    $0x8088729,%eax
and    $0xffffffbf,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8083056,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x80,%bl
je     805e290 <print_neigh+0x2b0>
and    $0xffffff7f,%ebx
mov    $0x808a29b,%edx
mov    $0x8088729,%eax
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8086618,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805e290 <print_neigh+0x2b0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
movl   $0x80865d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805e283 <print_neigh+0x2a3>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808659b,(%esp)
call   804b710 <fwrite@plt>
jmp    805e184 <print_neigh+0x1a4>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80865ad,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x1a(%ebx),%eax
jmp    805e24f <print_neigh+0x26f>
mov    %eax,0x8(%esp)
movl   $0x80865bc,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    805e379 <print_neigh+0x399>
call   8080450 <__get_user_hz>
mov    %eax,0x8098b80
mov    %eax,%ebp
jmp    805e36e <print_neigh+0x38e>
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b8a6,(%esp)
call   804b710 <fwrite@plt>
jmp    805e184 <print_neigh+0x1a4>
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    805e035 <print_neigh+0x55>
mov    $0xffffffff,%eax
jmp    805e035 <print_neigh+0x55>
call   804b660 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x1c,%esp
movl   $0x808336b,0x4(%esp)
mov    %edx,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805e740 <print_neigh+0x760>
movl   $0x80,(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8086b59,0x4(%esp)
mov    %ebp,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805e7e0 <print_neigh+0x800>
mov    $0x8086624,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805e7d0 <print_neigh+0x7f0>
mov    $0x8086369,%edi
mov    $0x5,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805e7f0 <print_neigh+0x810>
mov    $0x8086b89,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805e810 <print_neigh+0x830>
mov    $0x808662a,%edi
mov    $0xb,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805e800 <print_neigh+0x820>
mov    $0x8086c1b,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805e820 <print_neigh+0x840>
mov    $0x8086bb1,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805e82d <print_neigh+0x84d>
movl   $0x10,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x40,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
lea    0x0(%esi),%esi
movl   $0x2,(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x0,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
lea    0x0(%esi),%esi
movl   $0x1,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
lea    0x0(%esi),%esi
movl   $0x4,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
lea    0x0(%esi),%esi
movl   $0x8,(%ebx)
xor    %eax,%eax
jmp    805e735 <print_neigh+0x755>
movl   $0x80833a9,0x4(%esp)
mov    %ebp,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805e84c <print_neigh+0x86c>
movl   $0x20,(%ebx)
jmp    805e735 <print_neigh+0x755>
movl   $0x0,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %ebx,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    805e87f <print_neigh+0x89f>
mov    (%ebx),%eax
cmp    $0xff,%eax
ja     805e87f <print_neigh+0x89f>
lea    -0x1(%eax),%edx
test   %eax,%edx
setne  %al
movzbl %al,%eax
neg    %eax
jmp    805e735 <print_neigh+0x755>
or     $0xffffffff,%eax
jmp    805e735 <print_neigh+0x755>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    $0x47,%ecx
push   %esi
mov    %eax,%esi
push   %ebx
or     $0x1,%edx
sub    $0x18c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x17c(%esp)
xor    %eax,%eax
lea    0x60(%esp),%edi
test   %ebp,%ebp
mov    0x1a0(%esp),%ebx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0x1c,0x60(%esp)
mov    %dx,0x66(%esp)
mov    %si,0x64(%esp)
mov    %al,0x70(%esp)
mov    $0x80,%eax
mov    %ax,0x78(%esp)
jle    805ec5e <print_neigh+0xc7e>
movl   $0x0,0x14(%esp)
xor    %esi,%esi
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
jmp    805e93e <print_neigh+0x95e>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%ebp
lea    0x4(%ebx),%edi
je     805ec8f <print_neigh+0xcaf>
test   %esi,%esi
mov    0x4(%ebx),%eax
jne    805ec94 <print_neigh+0xcb4>
mov    %eax,0x14(%esp)
mov    $0x1,%esi
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%edi),%ebx
jle    805e9e8 <print_neigh+0xa08>
movl   $0x8086635,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805e910 <print_neigh+0x930>
mov    (%ebx),%eax
cmpb   $0x6e,(%eax)
je     805ead8 <print_neigh+0xaf8>
movl   $0x80865b6,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805eb28 <print_neigh+0xb48>
sub    $0x1,%ebp
lea    0x4(%ebx),%edi
je     805ec8f <print_neigh+0xcaf>
movl   $0x8082d28,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805ecdc <print_neigh+0xcfc>
mov    0x18(%esp),%eax
test   %eax,%eax
jne    805ecb7 <print_neigh+0xcd7>
mov    0x8095ca8,%eax
sub    $0x1,%ebp
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
lea    0x4(%edi),%ebx
mov    %eax,0x4(%esp)
lea    0x24(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
orb    $0x8,0x7a(%esp)
test   %ebp,%ebp
movl   $0x1,0x18(%esp)
jg     805e93e <print_neigh+0x95e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%edx
test   %edx,%edx
je     805ec5e <print_neigh+0xc7e>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     805ec5e <print_neigh+0xc7e>
movzbl 0x24(%esp),%eax
test   %al,%al
je     805ec5e <print_neigh+0xc7e>
mov    %al,0x70(%esp)
movzbl 0x25(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x11c,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x14(%esp),%esi
test   %esi,%esi
je     805ea58 <print_neigh+0xa78>
mov    $0x808664d,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805ebea <print_neigh+0xc0a>
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x74(%esp)
je     805ec2f <print_neigh+0xc4f>
lea    0x60(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     805ece6 <print_neigh+0xd06>
xor    %eax,%eax
mov    0x17c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    805ece1 <print_neigh+0xd01>
add    $0x18c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x75,0x1(%eax)
jne    805e95f <print_neigh+0x97f>
cmpb   $0x64,0x2(%eax)
jne    805e95f <print_neigh+0x97f>
cmpb   $0x0,0x3(%eax)
jne    805e95f <print_neigh+0x97f>
sub    $0x1,%ebp
lea    0x4(%ebx),%edi
je     805ec8f <print_neigh+0xcaf>
mov    0x4(%ebx),%edx
lea    0x20(%esp),%eax
call   805e710 <print_neigh+0x730>
test   %eax,%eax
jne    805eca4 <print_neigh+0xcc4>
mov    0x20(%esp),%eax
mov    %ax,0x78(%esp)
jmp    805e930 <print_neigh+0x950>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
movzbl (%eax),%edx
cmp    $0x64,%edx
je     805eba0 <print_neigh+0xbc0>
cmp    $0x74,%edx
jne    805eb48 <print_neigh+0xb68>
cmpb   $0x6f,0x1(%eax)
je     805ebca <print_neigh+0xbea>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805eb68 <print_neigh+0xb88>
add    $0x4,%ebx
sub    $0x1,%ebp
je     805ec8f <print_neigh+0xcaf>
mov    0x18(%esp),%ecx
test   %ecx,%ecx
jne    805ecca <print_neigh+0xcea>
mov    0x8095ca8,%eax
mov    %ebx,%edi
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x24(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
movl   $0x1,0x18(%esp)
jmp    805e930 <print_neigh+0x950>
xchg   %ax,%ax
cmpb   $0x65,0x1(%eax)
jne    805eb48 <print_neigh+0xb68>
cmpb   $0x76,0x2(%eax)
jne    805eb48 <print_neigh+0xb68>
cmpb   $0x0,0x3(%eax)
jne    805eb48 <print_neigh+0xb68>
sub    $0x1,%ebp
lea    0x4(%ebx),%edi
je     805ec8f <print_neigh+0xcaf>
mov    0x4(%ebx),%eax
mov    %eax,0x1c(%esp)
jmp    805e930 <print_neigh+0x950>
cmpb   $0x0,0x2(%eax)
jne    805eb48 <print_neigh+0xb68>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805ec8f <print_neigh+0xcaf>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
jmp    805eb48 <print_neigh+0xb68>
mov    0x14(%esp),%eax
lea    0x4c(%esp),%ebx
movl   $0x14,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   8081fb0 <ll_addr_a2n>
mov    %ebx,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x11c,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    805ea58 <print_neigh+0xa78>
mov    0x1c(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    805eab2 <print_neigh+0xad2>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    %eax,0x4(%esp)
movl   $0x8086635,(%esp)
call   8080100 <duparg>
mov    0x4(%ebx),%eax
movl   $0x808663c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808b938,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    (%ebx),%eax
movl   $0x8084f28,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
call   805df80 <tnl_ioctl_get_6rd+0x70>
call   804b660 <__stack_chk_fail@plt>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0xe4c,%esp
mov    $0x8095ee0,%edx
mov    %gs:0x14,%eax
mov    %eax,0xe3c(%esp)
xor    %eax,%eax
mov    %edx,%edi
test   %esi,%esi
mov    %ecx,0x1c(%esp)
mov    $0x12,%ecx
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0xffffffff,0x8095ee8
ff
mov    %eax,0x8095ee0
je     805ef48 <print_neigh+0xf68>
test   %ebp,%ebp
jle    805f1db <print_neigh+0x11fb>
movl   $0xffffff3f,0x8095ee8
ff
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
nop
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x64,%edi
mov    %edi,0x10(%esp)
jne    805efc8 <print_neigh+0xfe8>
cmpb   $0x65,0x1(%eax)
je     805f008 <print_neigh+0x1028>
mov    $0x8086652,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     805efe4 <print_neigh+0x1004>
mov    $0x80865b6,%edi
mov    %eax,%esi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805f070 <print_neigh+0x1090>
sub    $0x1,%ebp
mov    %ebx,%esi
test   %ebp,%ebp
movb   $0x8,0x3a(%esp)
lea    0x4(%esi),%ebx
jg     805ed88 <print_neigh+0xda8>
lea    0x0(%esi),%esi
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x14(%esp),%eax
test   %eax,%eax
je     805ee09 <print_neigh+0xe29>
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x8095ee4
je     805f20a <print_neigh+0x122a>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
je     805ef66 <print_neigh+0xf86>
lea    0x3c(%esp),%eax
xor    %ebx,%ebx
mov    %eax,0x8095f1c
movl   $0x0,0x8095f20
00
movl   $0xe00,0x8095f24
00
andl   $0xffffffdf,0x8095ee8
jmp    805ee49 <print_neigh+0xe69>
lea    0x0(%esi),%esi
cmp    $0xa,%ebx
je     805eeff <print_neigh+0xf1f>
mov    0x8095ee0,%eax
movl   $0x1e,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     805f2b5 <print_neigh+0x12d5>
mov    0x8095c80,%eax
movl   $0x805dfe0,0x4(%esp)
movl   $0x80941e0,(%esp)
movl   $0x0,0x8095f18
00
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     805f284 <print_neigh+0x12a4>
mov    0x8095f18,%esi
test   %esi,%esi
je     805f181 <print_neigh+0x11a1>
call   805df30 <tnl_ioctl_get_6rd+0x20>
add    $0x1,%ebx
test   %eax,%eax
js     805f273 <print_neigh+0x1293>
mov    0x8095ca4,%eax
test   %eax,%eax
je     805ee40 <print_neigh+0xe60>
mov    0x8095f18,%eax
mov    %ebx,0x8(%esp)
movl   $0x8084c98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
cmp    $0xa,%ebx
jne    805ee49 <print_neigh+0xe69>
movl   $0xa,0x8(%esp)
mov    $0x1,%esi
movl   $0x80867a4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0xe3c(%esp),%edi
xor    %gs:0x14,%edi
mov    %esi,%eax
jne    805f27f <print_neigh+0x129f>
add    $0xe4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
movl   $0xbf,0x8095ee8
00
jg     805ed77 <print_neigh+0xd97>
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x8095ee0,%eax
movl   $0xc,0xc(%esp)
movl   $0x1e,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %al,0x30(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
call   807dba0 <rtnl_dump_request>
test   %eax,%eax
js     805f2b5 <print_neigh+0x12d5>
mov    0x8095c80,%eax
movl   $0x805dfe0,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     805f24e <print_neigh+0x126e>
xor    %esi,%esi
jmp    805ef20 <print_neigh+0xf40>
nop
mov    $0x7,%ecx
mov    %eax,%esi
mov    $0x8086652,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    805f040 <print_neigh+0x1060>
movl   $0x1,0x8095eec
00
mov    %ebx,%esi
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jg     805ed88 <print_neigh+0xda8>
jmp    805ede0 <print_neigh+0xe00>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x76,0x2(%eax)
jne    805eda4 <print_neigh+0xdc4>
cmpb   $0x0,0x3(%eax)
jne    805eda4 <print_neigh+0xdc4>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805f249 <print_neigh+0x1269>
mov    0x14(%esp),%edx
mov    0x4(%ebx),%eax
test   %edx,%edx
jne    805f239 <print_neigh+0x1259>
mov    %eax,0x14(%esp)
jmp    805eff0 <print_neigh+0x1010>
lea    0x0(%esi),%esi
cmpl   $0x6e,0x10(%esp)
jne    805edb8 <print_neigh+0xdd8>
cmpb   $0x75,0x1(%eax)
je     805f0e8 <print_neigh+0x1108>
mov    $0x80865b6,%edi
mov    %eax,%esi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     805edcc <print_neigh+0xdec>
jmp    805f094 <print_neigh+0x10b4>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x74,0x10(%esp)
jne    805f094 <print_neigh+0x10b4>
cmpb   $0x6f,0x1(%eax)
jne    805f094 <print_neigh+0x10b4>
cmpb   $0x0,0x2(%eax)
jne    805f094 <print_neigh+0x10b4>
sub    $0x1,%ebp
lea    0x4(%ebx),%edx
je     805f249 <print_neigh+0x1269>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f2cd <print_neigh+0x12ed>
mov    0x8095ee0,%eax
mov    %ebx,%esi
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x8095ef0,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
mov    0x8095ee0,%ebx
test   %ebx,%ebx
jne    805eff0 <print_neigh+0x1010>
movzbl 0x8095ef0,%eax
mov    %eax,0x8095ee0
jmp    805eff0 <print_neigh+0x1010>
cmpb   $0x64,0x2(%eax)
jne    805f055 <print_neigh+0x1075>
cmpb   $0x0,0x3(%eax)
jne    805f055 <print_neigh+0x1075>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     805f249 <print_neigh+0x1269>
mov    0x18(%esp),%edi
test   %edi,%edi
jne    805f122 <print_neigh+0x1142>
movl   $0x0,0x8095ee8
00
movl   $0x1,0x18(%esp)
mov    0x4(%ebx),%edx
lea    0x2c(%esp),%eax
call   805e710 <print_neigh+0x730>
test   %eax,%eax
je     805f168 <print_neigh+0x1188>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    805f158 <print_neigh+0x1178>
cmpb   $0x6c,0x1(%eax)
jne    805f158 <print_neigh+0x1178>
cmpb   $0x6c,0x2(%eax)
jne    805f158 <print_neigh+0x1178>
cmpb   $0x0,0x3(%eax)
jne    805f158 <print_neigh+0x1178>
cmpl   $0x1,0x1c(%esp)
sbb    %eax,%eax
or     $0xffffffbf,%eax
jmp    805f176 <print_neigh+0x1196>
mov    %eax,0x4(%esp)
movl   $0x808663c,(%esp)
call   80800b0 <invarg>
mov    0x2c(%esp),%edx
mov    $0x100,%eax
test   %edx,%edx
cmovne %edx,%eax
or     %eax,0x8095ee8
jmp    805eff0 <print_neigh+0x1010>
mov    0x8095ca4,%edx
test   %edx,%edx
je     805f1bb <print_neigh+0x11db>
test   %ebx,%ebx
je     805f1cd <print_neigh+0x11ed>
mov    $0x8089003,%eax
cmp    $0x1,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x80837f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
jmp    805ef20 <print_neigh+0xf40>
movl   $0x8082f1d,(%esp)
call   804b7b0 <puts@plt>
jmp    805f1bb <print_neigh+0x11db>
mov    0x8095c40,%eax
mov    $0xffffffff,%esi
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083319,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    805ef20 <print_neigh+0xf40>
mov    0x14(%esp),%eax
mov    $0xffffffff,%esi
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    805ef20 <print_neigh+0xf40>
mov    %eax,0x4(%esp)
movl   $0x8085e82,(%esp)
call   8080100 <duparg>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   805df80 <tnl_ioctl_get_6rd+0x70>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    $0x8095ee0,%edx
mov    $0x12,%ecx
push   %edi
xor    %eax,%eax
mov    %edx,%edi
rep stos %eax,%es:(%edi)
movl   $0xffffffff,0x8095ee8
ff
pop    %edi
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    805f448 <do_ipneigh+0x148>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f3e8 <do_ipneigh+0xe8>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f426 <do_ipneigh+0x126>
mov    (%ebx),%eax
cmpb   $0x63,(%eax)
je     805f408 <do_ipneigh+0x108>
movl   $0x8083418,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f458 <do_ipneigh+0x158>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f470 <do_ipneigh+0x170>
movl   $0x8084559,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f4d3 <do_ipneigh+0x1d3>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f3d0 <do_ipneigh+0xd0>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805f488 <do_ipneigh+0x188>
add    $0x14,%esp
xor    %ecx,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    805ed00 <print_neigh+0xd20>
lea    0x0(%esi),%esi
add    $0x4,%ebx
mov    $0x600,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x1c,%al
pop    %ebx
pop    %esi
jmp    805e890 <print_neigh+0x8b0>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x68,0x1(%eax)
jne    805f354 <do_ipneigh+0x54>
cmpb   $0x67,0x2(%eax)
jne    805f354 <do_ipneigh+0x54>
cmpb   $0x0,0x3(%eax)
jne    805f354 <do_ipneigh+0x54>
add    $0x4,%ebx
mov    $0x100,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x1c,%eax
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    805e890 <print_neigh+0x8b0>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %ecx,%ecx
pop    %ebx
xor    %edx,%edx
pop    %esi
xor    %eax,%eax
jmp    805ed00 <print_neigh+0xd20>
add    $0x4,%ebx
mov    $0x500,%edx
lea    -0x1(%esi),%ecx
mov    %ebx,0x20(%esp)
jmp    805f3f7 <do_ipneigh+0xf7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
xor    %edx,%edx
mov    %ebx,0x20(%esp)
add    $0x14,%esp
mov    $0x1d,%al
lea    -0x1(%esi),%ecx
pop    %ebx
pop    %esi
jmp    805e890 <print_neigh+0x8b0>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f3d0 <do_ipneigh+0xd0>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     805f503 <do_ipneigh+0x203>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    805f518 <do_ipneigh+0x218>
call   805df80 <tnl_ioctl_get_6rd+0x70>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80867d8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
add    $0x14,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
add    $0x14,%esp
mov    $0x1,%ecx
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    805ed00 <print_neigh+0xd20>
mov    (%ebx),%eax
movl   $0x8086804,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
mov    %eax,%ebx
sub    $0x28,%esp
test   %eax,%eax
je     805f5e8 <do_ipneigh+0x2e8>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
call   804b630 <gettimeofday@plt>
test   %eax,%eax
js     805f5d8 <do_ipneigh+0x2d8>
mov    %ebx,%eax
mov    $0x10624dd3,%edx
mul    %edx
mov    0x18(%esp),%eax
shr    $0x6,%edx
sub    %edx,%eax
mov    %eax,0x14(%esp)
lea    0x14(%esp),%eax
mov    %eax,(%esp)
call   804b830 <localtime@plt>
test   %eax,%eax
je     805f5e8 <do_ipneigh+0x2e8>
mov    %eax,0xc(%esp)
movl   $0x8086840,0x8(%esp)
movl   $0x20,0x4(%esp)
movl   $0x8095f40,(%esp)
call   804b820 <strftime@plt>
add    $0x28,%esp
mov    $0x8095f40,%eax
pop    %ebx
ret
xchg   %ax,%ax
movl   $0x8086833,(%esp)
call   804b700 <perror@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x72726528,0x8095f40
72
mov    $0x8095f40,%eax
movl   $0x29726f,0x8095f44
00
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x94,%esp
mov    0xa4(%esp),%esi
mov    0xa8(%esp),%ebx
movzwl 0x4(%esi),%edx
mov    (%esi),%eax
cmp    $0x40,%dx
jne    805fc20 <print_ntable+0x610>
sub    $0x14,%eax
js     8060175 <print_ntable+0xb65>
mov    0x8095ca8,%edx
test   %edx,%edx
je     805f660 <print_ntable+0x50>
movzbl 0x10(%esi),%ecx
cmp    %ecx,%edx
je     805f660 <print_ntable+0x50>
xor    %eax,%eax
add    $0x94,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
lea    0x14(%esi),%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     805f6a7 <print_ntable+0x97>
cmpb   $0x0,0x8095f68
je     805f6a7 <print_ntable+0x97>
add    $0x4,%eax
mov    %eax,0x4(%esp)
movl   $0x8095f68,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    805f651 <print_ntable+0x41>
mov    0x40(%esp),%eax
test   %eax,%eax
je     805f6f8 <print_ntable+0xe8>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x4c(%esp),%eax
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x50(%esp),%eax
test   %eax,%eax
je     8060138 <print_ntable+0xb28>
mov    0x4(%eax),%edx
mov    0x8095f64,%eax
test   %eax,%eax
je     805f6f8 <print_ntable+0xe8>
cmp    %edx,%eax
jne    805f651 <print_ntable+0x41>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x10(%esi),%eax
cmp    $0x2,%al
je     80600b8 <print_ntable+0xaa8>
cmp    $0xa,%al
je     8060150 <print_ntable+0xb40>
cmp    $0xc,%al
je     80600e0 <print_ntable+0xad0>
mov    %eax,0xc(%esp)
movl   $0x808686a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     805f757 <print_ntable+0x147>
add    $0x4,%eax
mov    %eax,0xc(%esp)
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8060108 <print_ntable+0xaf8>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    0x30(%esp),%eax
test   %eax,%eax
je     805f7bb <print_ntable+0x1ab>
mov    0x4(%eax),%eax
movl   $0x8086870,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x34(%esp),%eax
mov    $0x1,%esi
test   %eax,%eax
je     805f7e7 <print_ntable+0x1d7>
mov    0x4(%eax),%eax
movl   $0x808687c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x38(%esp),%eax
test   %eax,%eax
je     805f80e <print_ntable+0x1fe>
mov    0x4(%eax),%eax
movl   $0x8086888,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x48(%esp),%eax
test   %eax,%eax
je     805f83c <print_ntable+0x22c>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x8086894,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %esi,%esi
jne    805fc58 <print_ntable+0x648>
mov    0x3c(%esp),%esi
test   %esi,%esi
je     805f85a <print_ntable+0x24a>
mov    0x8095ca4,%ecx
test   %ecx,%ecx
jne    805fed8 <print_ntable+0x8c8>
mov    0x40(%esp),%edx
test   %edx,%edx
je     805fbed <print_ntable+0x5dd>
mov    0x50(%esp),%eax
test   %eax,%eax
je     805f8c6 <print_ntable+0x2b6>
mov    0x4(%eax),%esi
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    %esi,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    0x54(%esp),%eax
test   %eax,%eax
je     805f90d <print_ntable+0x2fd>
mov    0x4(%eax),%eax
movl   $0x8086934,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x58(%esp),%eax
test   %eax,%eax
je     805f93b <print_ntable+0x32b>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x8086944,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x5c(%esp),%eax
test   %eax,%eax
je     805f969 <print_ntable+0x359>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x808693f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x60(%esp),%eax
test   %eax,%eax
je     805f997 <print_ntable+0x387>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x8086954,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    0x64(%esp),%eax
test   %eax,%eax
je     805f9f6 <print_ntable+0x3e6>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x8086962,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x68(%esp),%eax
test   %eax,%eax
je     805fa24 <print_ntable+0x414>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x8086971,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x6c(%esp),%eax
test   %eax,%eax
je     805fa4b <print_ntable+0x43b>
mov    0x4(%eax),%eax
movl   $0x80869e0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    0x70(%esp),%eax
test   %eax,%eax
je     805faa3 <print_ntable+0x493>
mov    0x4(%eax),%eax
movl   $0x8086983,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x74(%esp),%eax
test   %eax,%eax
je     805faca <print_ntable+0x4ba>
mov    0x4(%eax),%eax
movl   $0x8086992,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x78(%esp),%eax
test   %eax,%eax
je     805faf1 <print_ntable+0x4e1>
mov    0x4(%eax),%eax
movl   $0x80869a3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    0x7c(%esp),%eax
test   %eax,%eax
je     805fb50 <print_ntable+0x540>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x80869b4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x80(%esp),%eax
test   %eax,%eax
je     805fb81 <print_ntable+0x571>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x80869c8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x84(%esp),%eax
test   %eax,%eax
je     805fbab <print_ntable+0x59b>
mov    0x4(%eax),%eax
movl   $0x80869da,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x88(%esp),%eax
test   %eax,%eax
je     805fbdc <print_ntable+0x5cc>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
movl   $0x80869ea,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x44(%esp),%esi
test   %esi,%esi
je     805fbfe <print_ntable+0x5ee>
mov    0x8095ca4,%eax
test   %eax,%eax
jne    805fc70 <print_ntable+0x660>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,(%esp)
call   804b590 <fflush@plt>
jmp    805f651 <print_ntable+0x41>
nop
lea    0x0(%esi,%eiz,1),%esi
movzwl 0x6(%esi),%ecx
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %edx,0x10(%esp)
movl   $0x808684c,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x94,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    805f844 <print_ntable+0x234>
xchg   %ax,%ax
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80869f9,(%esp)
call   804b710 <fwrite@plt>
mov    0x8(%esi),%edx
mov    0x4(%esi),%eax
movl   $0x8086a00,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%esi),%edx
mov    0xc(%esi),%eax
movl   $0x8086a0d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esi),%edx
mov    0x14(%esi),%eax
movl   $0x8086a1c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d0,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%esi),%edx
mov    0x1c(%esi),%eax
movl   $0x8086a2d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x28(%esi),%edx
mov    0x24(%esi),%eax
movl   $0x8086a3e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x30(%esi),%edx
mov    0x2c(%esi),%eax
movl   $0x8086a4c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d0,(%esp)
call   804b710 <fwrite@plt>
mov    0x38(%esi),%edx
mov    0x34(%esi),%eax
movl   $0x8086a57,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x40(%esi),%edx
mov    0x3c(%esi),%eax
movl   $0x8086a6e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d0,(%esp)
call   804b710 <fwrite@plt>
mov    0x48(%esi),%edx
mov    0x44(%esi),%eax
movl   $0x8086a85,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4c(%esi),%eax
mov    0x50(%esi),%edx
movl   $0x8086a9c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    805fbfe <print_ntable+0x5ee>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d4,(%esp)
call   804b710 <fwrite@plt>
mov    %ebx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868a1,(%esp)
call   804b710 <fwrite@plt>
movzwl 0x4(%esi),%eax
movl   $0x80868a9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl 0x6(%esi),%eax
movl   $0x80868b5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%esi),%eax
movl   $0x80868c4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d0,(%esp)
call   804b710 <fwrite@plt>
mov    0xc(%esi),%eax
call   805f550 <do_ipneigh+0x250>
movl   $0x80868d9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%esi),%eax
call   805f550 <do_ipneigh+0x250>
movl   $0x80868e8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80868d0,(%esp)
call   804b710 <fwrite@plt>
mov    0x14(%esi),%eax
movl   $0x80868f6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esi),%eax
movl   $0x8086903,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esi),%eax
movl   $0x8086913,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x20(%esi),%eax
movl   $0x8086925,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    805f85a <print_ntable+0x24a>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083246,(%esp)
call   804b710 <fwrite@plt>
jmp    805f730 <print_ntable+0x120>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808325b,(%esp)
call   804b710 <fwrite@plt>
jmp    805f730 <print_ntable+0x120>
lea    0x0(%esi),%esi
mov    0x34(%esp),%eax
test   %eax,%eax
jne    805f774 <print_ntable+0x164>
mov    0x38(%esp),%esi
test   %esi,%esi
jne    805f774 <print_ntable+0x164>
xor    %esi,%esi
cmpl   $0x0,0x48(%esp)
jne    805f774 <print_ntable+0x164>
jmp    805f7e7 <print_ntable+0x1d7>
lea    0x0(%esi),%esi
mov    0x8095f64,%eax
add    $0x1,%eax
cmp    $0x1,%eax
ja     805f651 <print_ntable+0x41>
jmp    805f6f8 <print_ntable+0xe8>
xchg   %ax,%ax
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083250,(%esp)
call   804b710 <fwrite@plt>
jmp    805f730 <print_ntable+0x120>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    805f653 <print_ntable+0x43>
push   %ebp
mov    $0x102,%ecx
push   %edi
mov    %eax,%ebp
push   %esi
xor    %eax,%eax
push   %ebx
mov    %edx,%ebx
mov    $0x8095f60,%edx
sub    $0x2c,%esp
mov    %edx,%edi
test   %ebp,%ebp
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    %eax,0x8095f60
jle    8060296 <print_ntable+0xc86>
lea    -0x1(%ebp),%edx
add    $0x4,%ebx
mov    %edx,0x18(%esp)
jmp    806022d <print_ntable+0xc1d>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x65,0x1(%eax)
jne    806023c <print_ntable+0xc2c>
cmpb   $0x76,0x2(%eax)
jne    806023c <print_ntable+0xc2c>
cmpb   $0x0,0x3(%eax)
jne    806023c <print_ntable+0xc2c>
mov    0x18(%esp),%edx
test   %edx,%edx
je     8060314 <print_ntable+0xd04>
mov    (%ebx),%eax
mov    $0x8086369,%esi
mov    $0x5,%ecx
mov    %eax,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80602e8 <print_ntable+0xcd8>
movl   $0xffffffff,0x8095f64
ff
sub    $0x2,%ebp
add    $0x8,%ebx
subl   $0x2,0x18(%esp)
test   %ebp,%ebp
jle    8060291 <print_ntable+0xc81>
lea    -0x4(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    -0x4(%ebx),%eax
cmpb   $0x64,(%eax)
je     80601e0 <print_ntable+0xbd0>
mov    %eax,%esi
mov    $0x5,%ecx
mov    $0x808c3df,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8060319 <print_ntable+0xd09>
mov    0x18(%esp),%eax
test   %eax,%eax
je     8060314 <print_ntable+0xd04>
movl   $0x400,0x8(%esp)
mov    (%ebx),%eax
sub    $0x2,%ebp
movl   $0x8095f68,(%esp)
add    $0x8,%ebx
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
subl   $0x2,0x18(%esp)
test   %ebp,%ebp
jg     806022d <print_ntable+0xc1d>
mov    0x8095ca8,%eax
movl   $0x42,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     806035a <print_ntable+0xd4a>
mov    0x8095c80,%eax
movl   $0x805f610,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     8060329 <print_ntable+0xd19>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x8095f64
jne    806021e <print_ntable+0xc0e>
mov    0x1c(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8086ab1,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   8080010 <incomplete_command>
mov    %eax,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0x105,%ecx
push   %edi
mov    %edx,%ebp
push   %esi
mov    $0x101,%edx
push   %ebx
mov    %eax,%ebx
sub    $0x85c,%esp
mov    $0x43,%esi
mov    %gs:0x14,%eax
mov    %eax,0x84c(%esp)
xor    %eax,%eax
lea    0x438(%esp),%edi
test   %ebx,%ebx
rep stos %eax,%es:(%edi)
lea    0x38(%esp),%edi
mov    %dx,0x43e(%esp)
mov    0x8095ca8,%edx
movl   $0x14,0x438(%esp)
00
mov    %si,0x43c(%esp)
mov    %dl,0x448(%esp)
mov    $0x100,%cx
rep stos %eax,%es:(%edi)
mov    $0x6,%edi
mov    $0x4,%eax
mov    %di,0x3a(%esp)
mov    %ax,0x38(%esp)
jle    8060a30 <print_ntable+0x1420>
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
jmp    8060489 <print_ntable+0xe79>
lea    0x0(%esi),%esi
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x20(%esp),%edi
mov    0x4(%ebp),%eax
test   %edi,%edi
jne    8060a6f <print_ntable+0x145f>
mov    %eax,(%esp)
mov    %eax,%edi
mov    %eax,0x20(%esp)
call   804b880 <strlen@plt>
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x414,0x4(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
lea    0x438(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%esi),%ebp
jle    8060518 <print_ntable+0xf08>
mov    0x0(%ebp),%eax
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8060428 <print_ntable+0xe18>
mov    $0x8086aca,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060598 <print_ntable+0xf88>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x4(%ebp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x24(%esp)
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060acf <print_ntable+0x14bf>
mov    0x30(%esp),%eax
sub    $0x1,%ebx
movl   $0x2,0x8(%esp)
lea    0x4(%esi),%ebp
movl   $0x414,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x438(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
test   %ebx,%ebx
jg     8060489 <print_ntable+0xe79>
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8060a30 <print_ntable+0x1420>
mov    0x24(%esp),%ecx
test   %ecx,%ecx
je     80607d0 <print_ntable+0x11c0>
movzwl 0x38(%esp),%eax
cmp    $0x4,%ax
ja     8060894 <print_ntable+0x1284>
lea    0x438(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8060d17 <print_ntable+0x1707>
xor    %eax,%eax
mov    0x84c(%esp),%edx
xor    %gs:0x14,%edx
jne    8060d23 <print_ntable+0x1713>
add    $0x85c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    $0x8086aed,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060608 <print_ntable+0xff8>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x4(%ebp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x24(%esp)
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060d04 <print_ntable+0x16f4>
mov    0x30(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x438(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    806047b <print_ntable+0xe6b>
nop
mov    $0x8086b10,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060678 <print_ntable+0x1068>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x4(%ebp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x24(%esp)
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060c3a <print_ntable+0x162a>
mov    0x30(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x438(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    806047b <print_ntable+0xe6b>
nop
mov    $0x8086b33,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80606f0 <print_ntable+0x10e0>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x4(%ebp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x28(%esp)
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060c27 <print_ntable+0x1617>
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x438(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x8,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    806047b <print_ntable+0xe6b>
nop
cmpb   $0x64,(%eax)
jne    8060750 <print_ntable+0x1140>
cmpb   $0x65,0x1(%eax)
jne    8060750 <print_ntable+0x1140>
cmpb   $0x76,0x2(%eax)
jne    8060750 <print_ntable+0x1140>
cmpb   $0x0,0x3(%eax)
jne    8060750 <print_ntable+0x1140>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     8060a3c <print_ntable+0x142c>
mov    %eax,0xc(%esp)
lea    0x38(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
jmp    806047b <print_ntable+0xe6b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8086b54,%edi
mov    $0xf,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060820 <print_ntable+0x1210>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060c4d <print_ntable+0x163d>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x4,0x8(%esp)
lea    0x38(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ef00 <rta_addattr_l>
movl   $0x1,0x2c(%esp)
jmp    806047b <print_ntable+0xe6b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%edx
test   %edx,%edx
jne    8060530 <print_ntable+0xf20>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    8060530 <print_ntable+0xf20>
mov    0x8095c40,%eax
movl   $0x38,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086d4c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8086b63,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80608c7 <print_ntable+0x12b7>
mov    $0x8086b86,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060913 <print_ntable+0x1303>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060d3b <print_ntable+0x172b>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x6,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
sub    $0x4,%eax
mov    %eax,0x10(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x438(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    806053f <print_ntable+0xf2f>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060d28 <print_ntable+0x1718>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
mov    $0x8086bab,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806096f <print_ntable+0x135f>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060cf1 <print_ntable+0x16e1>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x7,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
mov    $0x80880e4,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80609f3 <print_ntable+0x13e3>
mov    $0x8086bd0,%edi
mov    $0xb,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060a7f <print_ntable+0x146f>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060ccb <print_ntable+0x16bb>
mov    0x30(%esp),%eax
movl   $0x9,0x8(%esp)
mov    %eax,0xc(%esp)
lea    0x38(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ee70 <rta_addattr32>
movl   $0x1,0x2c(%esp)
jmp    806047b <print_ntable+0xe6b>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060cde <print_ntable+0x16ce>
mov    0x30(%esp),%eax
movl   $0x8,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80609d2 <print_ntable+0x13c2>
movl   $0x8088e4d,(%esp)
call   8080060 <missarg>
mov    0x4(%ebp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8060578 <print_ntable+0xf68>
call   8080010 <incomplete_command>
mov    %eax,0x4(%esp)
movl   $0x8088e4d,(%esp)
call   8080100 <duparg>
mov    $0x8086bf9,%edi
mov    $0xd,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060ae2 <print_ntable+0x14d2>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060b92 <print_ntable+0x1582>
mov    0x30(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80609d2 <print_ntable+0x13c2>
mov    0x4(%ebp),%eax
movl   $0x8086ad2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8086c06,%edi
mov    $0xd,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060b36 <print_ntable+0x1526>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060ba5 <print_ntable+0x1595>
mov    0x30(%esp),%eax
movl   $0xb,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80609d2 <print_ntable+0x13c2>
mov    $0x8086c13,%edi
mov    $0xe,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060bcb <print_ntable+0x15bb>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060bb8 <print_ntable+0x15a8>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xc,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
mov    0x4(%ebp),%eax
movl   $0x8086ca8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086cc8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086ce8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8086c21,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060c73 <print_ntable+0x1663>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060c60 <print_ntable+0x1650>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xd,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
mov    0x4(%ebp),%eax
movl   $0x8086b3a,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086b18,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086c64,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086d0c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8086c2d,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060d61 <print_ntable+0x1751>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8060d4e <print_ntable+0x173e>
mov    0x30(%esp),%eax
movl   $0xe,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    80609d2 <print_ntable+0x13c2>
mov    0x4(%ebp),%eax
movl   $0x8086bdb,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086bb7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086c88,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086af5,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebp),%eax
movl   $0x8086b6b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086b8f,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086d2c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8086c39,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8060db9 <print_ntable+0x17a9>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     8060a6a <print_ntable+0x145a>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    8060dc9 <print_ntable+0x17b9>
lea    0x30(%esp),%eax
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xf,0x8(%esp)
jmp    80607ab <print_ntable+0x119b>
mov    %eax,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x8086c42,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8095f60,%edx
mov    $0x102,%ecx
push   %edi
xor    %eax,%eax
mov    %edx,%edi
rep stos %eax,%es:(%edi)
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
movl   $0x80941e0,(%esp)
mov    0x24(%esp),%ebx
call   807d5a0 <ll_init_map>
test   %esi,%esi
jle    8060ea0 <do_ipntable+0xa0>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8060e4d <do_ipntable+0x4d>
movl   $0x8086c5e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8060e60 <do_ipntable+0x60>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8060380 <print_ntable+0xd70>
lea    0x0(%esi),%esi
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8060e8c <do_ipntable+0x8c>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8060eb0 <do_ipntable+0xb0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    80601a0 <print_ntable+0xb90>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %edx,%edx
pop    %ebx
xor    %eax,%eax
pop    %esi
jmp    80601a0 <print_ntable+0xb90>
xchg   %ax,%ax
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8060e8c <do_ipntable+0x8c>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8060f0d <do_ipntable+0x10d>
mov    0x8095c40,%eax
movl   $0x1d5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086d88,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    (%ebx),%eax
movl   $0x8086f60,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x8(%esp),%eax
cmpw   $0x2,0x4(%eax)
je     8060f60 <do_ipntable+0x160>
movl   $0x1,0x8094210
00
mov    $0xffffffff,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%eax),%eax
cmp    $0xffffffea,%eax
je     8060f6d <do_ipntable+0x16d>
cmp    $0xffffffa1,%eax
jne    8060f4b <do_ipntable+0x14b>
movl   $0x0,0x8094210
00
mov    $0xffffffff,%eax
ret
lea    0x0(%esi),%esi
push   %edi
sub    $0x448,%esp
mov    %gs:0x14,%eax
mov    %eax,0x43c(%esp)
xor    %eax,%eax
mov    0x8094210,%eax
test   %eax,%eax
js     8060fb8 <do_ipntable+0x1b8>
mov    0x43c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    806101e <do_ipntable+0x21e>
add    $0x448,%esp
pop    %edi
ret
nop
lea    0x1c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x108,%ecx
rep stos %eax,%es:(%edi)
mov    $0x10,%ecx
mov    $0x5,%eax
mov    %edx,0x4(%esp)
movl   $0x20,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %cx,0x20(%esp)
movl   $0x20,0x1c(%esp)
mov    %ax,0x22(%esp)
call   807da20 <rtnl_send>
movl   $0x0,0x8(%esp)
movl   $0x8060f40,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e530 <rtnl_listen>
mov    0x8094210,%eax
jmp    8060f9f <do_ipntable+0x19f>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    $0x20,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%esi
test   $0x1,%esi
jne    80610f0 <do_ipntable+0x2f0>
test   $0x2,%esi
jne    8061110 <do_ipntable+0x310>
mov    %edi,%ebp
xor    %ebx,%ebx
and    $0xfffffffc,%ebp
movl   $0x0,(%esi,%ebx,1)
add    $0x4,%ebx
cmp    %ebp,%ebx
jb     806105f <do_ipntable+0x25f>
add    %ebx,%esi
test   $0x2,%edi
je     8061080 <do_ipntable+0x280>
xor    %ebx,%ebx
add    $0x2,%esi
mov    %bx,-0x2(%esi)
and    $0x1,%edi
je     8061088 <do_ipntable+0x288>
movb   $0x0,(%esi)
mov    %eax,0x4(%esp)
mov    0x44(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %ecx,0x18(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
mov    0x44(%esp),%eax
mov    0x1c(%esp),%edx
mov    %dx,0x10(%eax)
mov    0x40(%esp),%eax
movl   $0xe,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
add    $0x12,%eax
mov    %eax,(%esp)
call   8081fb0 <ll_addr_a2n>
test   %eax,%eax
mov    %eax,%edx
js     8061158 <do_ipntable+0x358>
mov    0x18(%esp),%ecx
xor    %eax,%eax
cmp    %ecx,%edx
jne    8061128 <do_ipntable+0x328>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,(%esi)
mov    0x44(%esp),%edi
lea    0x1(%edi),%esi
mov    $0x1f,%edi
test   $0x2,%esi
je     8061058 <do_ipntable+0x258>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %ebp,%ebp
add    $0x2,%esi
mov    %bp,-0x2(%esi)
sub    $0x2,%edi
jmp    8061058 <do_ipntable+0x258>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%eax
mov    %ecx,0x10(%esp)
movl   $0x8086f90,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80610e3 <do_ipntable+0x2e3>
mov    $0xffffffff,%eax
jmp    80610e3 <do_ipntable+0x2e3>
nop
push   %esi
push   %ebx
sub    $0x14,%esp
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0x2,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
js     8061190 <do_ipntable+0x390>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebx
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0x11,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
jns    8061185 <do_ipntable+0x385>
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0xa,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
jns    8061185 <do_ipntable+0x385>
mov    %esi,(%ebx)
movl   $0x80876fa,(%esp)
call   804b700 <perror@plt>
or     $0xffffffff,%eax
jmp    8061185 <do_ipntable+0x385>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x10,%esp
call   8061160 <do_ipntable+0x360>
test   %eax,%eax
mov    %eax,%ebx
js     8061267 <do_ipntable+0x467>
test   %esi,%esi
je     806123d <do_ipntable+0x43d>
mov    %edi,0x8(%esp)
movl   $0x8937,0x4(%esp)
mov    %eax,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jns    8061255 <do_ipntable+0x455>
mov    $0x8087717,%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
mov    $0xffffffff,%eax
jmp    8061260 <do_ipntable+0x460>
mov    %edi,0x8(%esp)
movl   $0x8924,0x4(%esp)
mov    %eax,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
js     806126e <do_ipntable+0x46e>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
xor    %eax,%eax
nop
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
mov    $0xffffffff,%eax
jmp    8061260 <do_ipntable+0x460>
mov    $0x808772a,%eax
jmp    8061226 <do_ipntable+0x426>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
call   8060f80 <do_ipntable+0x180>
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
test   %eax,%eax
mov    0x8095c40,%eax
mov    %eax,0xc(%esp)
je     806175a <iplink_usage+0x4da>
movl   $0x8086fc0,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086ff0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808701c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087044,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087070,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087090,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80870c0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80870f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087118,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087148,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80871c0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80871ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808721c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808724c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087280,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80872b0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80872e0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808730c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087334,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808735c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087388,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80873a8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80873cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087738,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80873f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808741c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808774d,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087448,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808746c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087768,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087780,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808749c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
call   8060f80 <do_ipntable+0x180>
test   %eax,%eax
jne    806176b <iplink_usage+0x4eb>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8087190,(%esp)
call   804b710 <fwrite@plt>
jmp    8061417 <iplink_usage+0x197>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x41,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80874d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087514,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087554,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    806174e <iplink_usage+0x4ce>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x130,%esp
mov    0x8096368,%ebx
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
mov    0x140(%esp),%esi
test   %ebx,%ebx
jne    8061836 <get_link_kind+0x36>
jmp    8061850 <get_link_kind+0x50>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ebx
test   %ebx,%ebx
je     8061850 <get_link_kind+0x50>
mov    %esi,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8061830 <get_link_kind+0x30>
mov    %ebx,%eax
jmp    80618df <get_link_kind+0xdf>
lea    0x2c(%esp),%ebx
mov    %esi,0x14(%esp)
movl   $0x8087793,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bab0 <dlopen@plt>
test   %eax,%eax
mov    %eax,%edi
je     8061900 <get_link_kind+0x100>
mov    %esi,0x14(%esp)
movl   $0x80877aa,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804b8e0 <dlsym@plt>
test   %eax,%eax
je     806192d <get_link_kind+0x12d>
mov    0x8096368,%edx
mov    %eax,0x8096368
mov    %edx,(%eax)
mov    0x12c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8061931 <get_link_kind+0x131>
add    $0x130,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x809636c,%edi
test   %edi,%edi
jne    8061896 <get_link_kind+0x96>
movl   $0x1,0x4(%esp)
movl   $0x0,(%esp)
call   804bab0 <dlopen@plt>
test   %eax,%eax
mov    %eax,%edi
mov    %eax,0x809636c
jne    8061896 <get_link_kind+0x96>
xor    %eax,%eax
jmp    80618df <get_link_kind+0xdf>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xdc(%esp),%eax
mov    0xd0(%esp),%ecx
mov    %gs:0x14,%edi
mov    %edi,0xac(%esp)
xor    %edi,%edi
mov    0xd4(%esp),%ebx
mov    0xd8(%esp),%edx
mov    %eax,0x18(%esp)
mov    0xe0(%esp),%eax
test   %ecx,%ecx
movl   $0xffffffff,0x44(%esp)
movl   $0xffffffff,0x48(%esp)
mov    %eax,0x28(%esp)
mov    0xe4(%esp),%eax
movl   $0xffffffff,0x4c(%esp)
movl   $0xffffffff,0x50(%esp)
movl   $0xffffffff,0x54(%esp)
mov    %eax,0x1c(%esp)
mov    0xe8(%esp),%eax
movl   $0xffffffff,0x58(%esp)
mov    %eax,0x20(%esp)
mov    0xec(%esp),%eax
mov    %eax,0x24(%esp)
movl   $0xffffffff,(%eax)
jle    8061d34 <iplink_parse+0x3f4>
mov    0xd0(%esp),%ebp
mov    %ebp,0x14(%esp)
mov    %edx,%ebp
jmp    8061a1c <iplink_parse+0xdc>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x70,0x1(%eax)
jne    8061a23 <iplink_parse+0xe3>
cmpb   $0x0,0x2(%eax)
jne    8061a23 <iplink_parse+0xe3>
orl    $0x1,0x1c(%ebp)
orl    $0x1,0x18(%ebp)
subl   $0x1,0x14(%esp)
mov    0x14(%esp),%eax
add    $0x4,%ebx
test   %eax,%eax
jle    8061a57 <iplink_parse+0x117>
mov    (%ebx),%eax
cmpb   $0x75,(%eax)
je     80619f8 <iplink_parse+0xb8>
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x80877b7,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8061a88 <iplink_parse+0x148>
subl   $0x1,0x14(%esp)
add    $0x4,%ebx
mov    0x14(%esp),%eax
orl    $0x1,0x1c(%ebp)
andl   $0xfffffffe,0x18(%ebp)
test   %eax,%eax
jg     8061a1c <iplink_parse+0xdc>
mov    0x14(%esp),%ebp
mov    0xd0(%esp),%eax
sub    %ebp,%eax
mov    0xac(%esp),%edi
xor    %gs:0x14,%edi
jne    8061e18 <iplink_parse+0x4d8>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8061ac0 <iplink_parse+0x180>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%eax
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%ecx
mov    %eax,%ebx
mov    0x18(%esp),%edi
mov    %ecx,(%edi)
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80841a0,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8061af8 <iplink_parse+0x1b8>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%eax
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%ecx
mov    %eax,%ebx
mov    0x1c(%esp),%edi
mov    %ecx,(%edi)
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
nop
movl   $0x808b938,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8061b6f <iplink_parse+0x22f>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
movl   $0x20,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   8081fb0 <ll_addr_a2n>
test   %eax,%eax
js     8061d64 <iplink_parse+0x424>
mov    %eax,0x10(%esp)
lea    0x68(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %esi,%ebx
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
movl   $0x8082f43,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8061bcc <iplink_parse+0x28c>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
movl   $0x20,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   8081fb0 <ll_addr_a2n>
test   %eax,%eax
js     8061d64 <iplink_parse+0x424>
mov    %eax,0x10(%esp)
lea    0x68(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
jmp    8061b53 <iplink_parse+0x213>
mov    (%ebx),%eax
cmpb   $0x62,(%eax)
je     8061ca0 <iplink_parse+0x360>
movl   $0x80877bc,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8061cc8 <iplink_parse+0x388>
mov    (%ebx),%eax
mov    $0x80877c9,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8061cc8 <iplink_parse+0x388>
movl   $0x80877c7,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8061cc8 <iplink_parse+0x388>
mov    (%ebx),%eax
movzbl (%eax),%edi
cmp    $0x6d,%edi
mov    %edi,0x2c(%esp)
jne    8061d86 <iplink_parse+0x446>
cmpb   $0x74,0x1(%eax)
jne    8061d86 <iplink_parse+0x446>
cmpb   $0x75,0x2(%eax)
jne    8061d86 <iplink_parse+0x446>
cmpb   $0x0,0x3(%eax)
jne    8061d86 <iplink_parse+0x446>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%edi
je     8061d6e <iplink_parse+0x42e>
cmpl   $0xffffffff,0x48(%esp)
jne    8061d73 <iplink_parse+0x433>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
lea    0x48(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8061ddf <iplink_parse+0x49f>
movl   $0x4,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
jmp    8061d18 <iplink_parse+0x3d8>
nop
cmpb   $0x72,0x1(%eax)
jne    8061bd7 <iplink_parse+0x297>
cmpb   $0x64,0x2(%eax)
jne    8061bd7 <iplink_parse+0x297>
cmpb   $0x0,0x3(%eax)
je     8061b85 <iplink_parse+0x245>
xchg   %ax,%ax
jmp    8061bd7 <iplink_parse+0x297>
lea    0x0(%esi),%esi
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%edi
je     8061d6e <iplink_parse+0x42e>
cmpl   $0xffffffff,0x44(%esp)
jne    8061e05 <iplink_parse+0x4c5>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
lea    0x44(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8061df2 <iplink_parse+0x4b2>
movl   $0x4,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %edi,%ebx
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
xor    %eax,%eax
jmp    8061a64 <iplink_parse+0x124>
mov    %eax,0x10(%esp)
movl   $0x8087819,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x808758c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8061a64 <iplink_parse+0x124>
call   8080010 <incomplete_command>
mov    0x4(%ebx),%eax
movl   $0x808455d,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    $0x808534c,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8061e69 <iplink_parse+0x529>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
cmpl   $0xffffffff,0x4c(%esp)
mov    0x4(%ebx),%eax
jne    8061e59 <iplink_parse+0x519>
mov    %eax,(%esp)
call   80596c0 <get_netns_fd>
test   %eax,%eax
mov    %eax,0x4c(%esp)
js     8061e1d <iplink_parse+0x4dd>
lea    0x4c(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1c,0x8(%esp)
jmp    8061b53 <iplink_parse+0x213>
mov    0x4(%ebx),%eax
movl   $0x80877ea,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80877ce,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80877bc,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
call   804b660 <__stack_chk_fail@plt>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
lea    0x4c(%esp),%edi
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8061ec4 <iplink_parse+0x584>
movl   $0x4,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x13,0x8(%esp)
jmp    8061b53 <iplink_parse+0x213>
mov    %eax,0x4(%esp)
movl   $0x808534c,(%esp)
call   8080100 <duparg>
mov    $0x8087819,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8061f07 <iplink_parse+0x5c7>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x1000,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    8061d3b <iplink_parse+0x3fb>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8061ed7 <iplink_parse+0x597>
cmpb   $0x0,0x2(%eax)
jne    8061d3b <iplink_parse+0x3fb>
orl    $0x1000,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    0x4(%ebx),%eax
movl   $0x80877ff,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmp    $0x66,%bl
jne    8061d3b <iplink_parse+0x3fb>
cmpb   $0x66,0x2(%eax)
jne    8061d3b <iplink_parse+0x3fb>
cmpb   $0x0,0x3(%eax)
jne    8061d3b <iplink_parse+0x3fb>
andl   $0xffffefff,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    $0x8087816,%edi
mov    $0xd,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8061f5e <iplink_parse+0x61e>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x200,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    8061fd5 <iplink_parse+0x695>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8061fb1 <iplink_parse+0x671>
cmpb   $0x0,0x2(%eax)
jne    8061fd5 <iplink_parse+0x695>
orl    $0x200,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    $0x8087823,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806201b <iplink_parse+0x6db>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x100,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    806200a <iplink_parse+0x6ca>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8061fe6 <iplink_parse+0x6a6>
cmpb   $0x0,0x2(%eax)
jne    806200a <iplink_parse+0x6ca>
orl    $0x100,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
cmp    $0x66,%bl
jne    8061fd5 <iplink_parse+0x695>
cmpb   $0x66,0x2(%eax)
jne    8061fd5 <iplink_parse+0x695>
cmpb   $0x0,0x3(%eax)
jne    8061fd5 <iplink_parse+0x695>
andl   $0xfffffdff,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    %eax,0x10(%esp)
movl   $0x8087816,0xc(%esp)
jmp    8061d47 <iplink_parse+0x407>
cmp    $0x66,%bl
jne    806200a <iplink_parse+0x6ca>
cmpb   $0x66,0x2(%eax)
jne    806200a <iplink_parse+0x6ca>
cmpb   $0x0,0x3(%eax)
jne    806200a <iplink_parse+0x6ca>
andl   $0xfffffeff,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    %eax,0x10(%esp)
movl   $0x8087823,0xc(%esp)
jmp    8061d47 <iplink_parse+0x407>
mov    $0x808782b,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806207a <iplink_parse+0x73a>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x20,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    80620fd <iplink_parse+0x7bd>
movzbl 0x1(%eax),%ebx
cmp    $0x66,%bl
jne    80620e2 <iplink_parse+0x7a2>
cmpb   $0x66,0x2(%eax)
jne    80620fd <iplink_parse+0x7bd>
cmpb   $0x0,0x3(%eax)
jne    80620fd <iplink_parse+0x7bd>
orl    $0x20,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
cmpl   $0x61,0x2c(%esp)
jne    806219d <iplink_parse+0x85d>
cmpb   $0x72,0x1(%eax)
jne    8062143 <iplink_parse+0x803>
cmpb   $0x70,0x2(%eax)
jne    8062143 <iplink_parse+0x803>
cmpb   $0x0,0x3(%eax)
jne    8062143 <iplink_parse+0x803>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x80,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    8062132 <iplink_parse+0x7f2>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    806210e <iplink_parse+0x7ce>
cmpb   $0x0,0x2(%eax)
jne    8062132 <iplink_parse+0x7f2>
andl   $0xffffff7f,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
cmp    $0x6e,%bl
jne    80620fd <iplink_parse+0x7bd>
cmpb   $0x0,0x2(%eax)
jne    80620fd <iplink_parse+0x7bd>
andl   $0xffffffdf,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    %eax,0x10(%esp)
movl   $0x808782b,0xc(%esp)
jmp    8061d47 <iplink_parse+0x407>
cmp    $0x66,%bl
jne    8062132 <iplink_parse+0x7f2>
cmpb   $0x66,0x2(%eax)
jne    8062132 <iplink_parse+0x7f2>
cmpb   $0x0,0x3(%eax)
jne    8062132 <iplink_parse+0x7f2>
orl    $0x80,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    %eax,0x10(%esp)
movl   $0x8086624,0xc(%esp)
jmp    8061d47 <iplink_parse+0x407>
movl   $0x80878ea,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062300 <iplink_parse+0x9c0>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x5c(%esp)
je     80622ed <iplink_parse+0x9ad>
lea    0x5c(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
jmp    8061b53 <iplink_parse+0x213>
cmpl   $0x76,0x2c(%esp)
jne    8062143 <iplink_parse+0x803>
cmpb   $0x66,0x1(%eax)
jne    8062143 <iplink_parse+0x803>
cmpb   $0x0,0x2(%eax)
jne    8062143 <iplink_parse+0x803>
mov    0x14(%esp),%edx
lea    0x4(%ebx),%esi
sub    $0x1,%edx
mov    %edx,0x30(%esp)
je     8061d6e <iplink_parse+0x42e>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807f260 <get_integer>
test   %eax,%eax
mov    %eax,0x14(%esp)
jne    80625d9 <iplink_parse+0xc99>
movl   $0x16,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
call   807ed40 <addattr_nest>
movl   $0x1,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x38(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x2c(%esp)
call   807ed40 <addattr_nest>
mov    0x30(%esp),%edi
cmp    $0x1,%edi
mov    %eax,0x3c(%esp)
je     8061d6e <iplink_parse+0x42e>
mov    %esi,%ebx
movl   $0x8087848,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80623b5 <iplink_parse+0xa75>
sub    $0x2,%edi
lea    0x8(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x2c(%esp),%eax
mov    %eax,0x88(%esp)
mov    0x8(%ebx),%eax
lea    0x88(%esp),%ebx
movl   $0x20,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x8c(%esp),%eax
mov    %eax,(%esp)
call   8081fb0 <ll_addr_a2n>
test   %eax,%eax
js     8061d64 <iplink_parse+0x424>
mov    %ebx,0xc(%esp)
mov    %esi,%ebx
movl   $0x24,0x10(%esp)
movl   $0x1,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
cmp    $0x1,%edi
jne    806223a <iplink_parse+0x8fa>
mov    0x3c(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   807ed90 <addattr_nest_end>
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   807ed90 <addattr_nest_end>
jmp    8061a11 <iplink_parse+0xd1>
mov    0x4(%ebx),%eax
movl   $0x80878d1,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x80878e8,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062350 <iplink_parse+0xa10>
lea    0x5c(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
movl   $0x0,0x5c(%esp)
call   807ea10 <addattr_l>
subl   $0x1,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
movl   $0x8083363,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062621 <iplink_parse+0xce1>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
orl    $0x8000,0x1c(%ebp)
cmpb   $0x6f,(%eax)
jne    8062610 <iplink_parse+0xcd0>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    80625ec <iplink_parse+0xcac>
cmpb   $0x0,0x2(%eax)
jne    8062610 <iplink_parse+0xcd0>
orl    $0x8000,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
movl   $0x808ae5f,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80624b5 <iplink_parse+0xb75>
mov    %edi,%esi
lea    0x8(%ebx),%eax
sub    $0x2,%esi
mov    %eax,0x34(%esp)
je     8061d6e <iplink_parse+0x42e>
movl   $0x0,0x8(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    80624a2 <iplink_parse+0xb62>
mov    0x2c(%esp),%eax
cmp    $0x1,%esi
movl   $0x0,0x64(%esp)
mov    %eax,0x5c(%esp)
je     806246f <iplink_parse+0xb2f>
cmp    $0x3,%edi
jle    8061d6e <iplink_parse+0x42e>
movl   $0x8087862,0x4(%esp)
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806246f <iplink_parse+0xb2f>
lea    0x10(%ebx),%eax
sub    $0x4,%edi
mov    %eax,0x34(%esp)
mov    %edi,%esi
je     8061d6e <iplink_parse+0x42e>
movl   $0x0,0x8(%esp)
mov    0x10(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x64(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8062532 <iplink_parse+0xbf2>
lea    0x5c(%esp),%eax
mov    %esi,%edi
movl   $0xc,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
mov    0x34(%esp),%ebx
jmp    80622bf <iplink_parse+0x97f>
mov    0x8(%ebx),%eax
movl   $0x808784c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a8c0,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062558 <iplink_parse+0xc18>
sub    $0x2,%edi
lea    0x8(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
movl   $0x0,0x8(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8062545 <iplink_parse+0xc05>
mov    0x2c(%esp),%eax
mov    %esi,%ebx
movl   $0x8,0x10(%esp)
movl   $0x3,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %eax,0x5c(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
jmp    80622bf <iplink_parse+0x97f>
mov    0x10(%ebx),%eax
movl   $0x8087866,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8(%ebx),%eax
movl   $0x808787b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8087891,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80626d5 <iplink_parse+0xd95>
sub    $0x2,%edi
lea    0x8(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
movl   $0x80831cf,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80626ad <iplink_parse+0xd6d>
movl   $0x1,0x60(%esp)
mov    0x2c(%esp),%eax
mov    %esi,%ebx
movl   $0x8,0x10(%esp)
movl   $0x4,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %eax,0x5c(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
jmp    80622bf <iplink_parse+0x97f>
mov    0x4(%ebx),%eax
movl   $0x8087834,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
cmp    $0x66,%bl
jne    8062610 <iplink_parse+0xcd0>
cmpb   $0x66,0x2(%eax)
jne    8062610 <iplink_parse+0xcd0>
cmpb   $0x0,0x3(%eax)
jne    8062610 <iplink_parse+0xcd0>
andl   $0xffff7fff,0x18(%ebp)
mov    %ecx,%ebx
subl   $0x2,0x14(%esp)
jmp    8061a11 <iplink_parse+0xd1>
mov    %eax,0x10(%esp)
movl   $0x8083363,0xc(%esp)
jmp    8061d47 <iplink_parse+0x407>
movl   $0x8084f55,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8062836 <iplink_parse+0xef6>
movl   $0x80878f1,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80627e3 <iplink_parse+0xea3>
mov    (%ebx),%eax
mov    $0x808ca53,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806285d <iplink_parse+0xf1d>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x24(%esp),%eax
cmpl   $0xffffffff,(%eax)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
jne    80627d7 <iplink_parse+0xe97>
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   8081ab0 <rtnl_group_a2n>
test   %eax,%eax
jne    8062752 <iplink_parse+0xe12>
subl   $0x2,0x14(%esp)
mov    %esi,%ebx
jmp    8061a11 <iplink_parse+0xd1>
movl   $0x80831e3,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062765 <iplink_parse+0xe25>
movl   $0x0,0x60(%esp)
jmp    80625a2 <iplink_parse+0xc62>
movl   $0x80878b4,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062799 <iplink_parse+0xe59>
sub    $0x2,%edi
lea    0x8(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
movl   $0x80831f4,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062778 <iplink_parse+0xe38>
movl   $0x0,0x60(%esp)
mov    0x2c(%esp),%eax
mov    %esi,%ebx
movl   $0x8,0x10(%esp)
movl   $0x5,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %eax,0x5c(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
jmp    80622bf <iplink_parse+0x97f>
mov    0x4(%ebx),%eax
movl   $0x80833b0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8(%ebx),%eax
movl   $0x808789a,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8083206,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80627af <iplink_parse+0xe6f>
movl   $0x1,0x60(%esp)
jmp    806271b <iplink_parse+0xddb>
cmp    0x30(%esp),%edi
je     8061d6e <iplink_parse+0x42e>
lea    -0x1(%edi),%eax
mov    %eax,0x14(%esp)
jmp    80622c8 <iplink_parse+0x988>
movl   $0x808321a,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806290a <iplink_parse+0xfca>
movl   $0x2,0x60(%esp)
jmp    806271b <iplink_parse+0xddb>
movl   $0x808ca53,(%esp)
call   8080100 <duparg>
mov    %ebp,%edx
mov    0x14(%esp),%ebp
mov    %edx,0x14(%esp)
cmp    $0x1,%ebp
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%ebx
sub    $0x2,%ebp
mov    %ebx,(%esp)
call   804b880 <strlen@plt>
mov    0x14(%esp),%edx
mov    %ebx,0xc(%esp)
movl   $0x14,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0x10(%esp)
call   807ea10 <addattr_l>
mov    0xd0(%esp),%eax
sub    %ebp,%eax
jmp    8061a64 <iplink_parse+0x124>
mov    0x14(%esp),%ebp
cmp    $0x1,%ebp
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
sub    $0x2,%ebp
mov    0x28(%esp),%edi
mov    %eax,(%edi)
mov    0xd0(%esp),%eax
sub    %ebp,%eax
jmp    8061a64 <iplink_parse+0x124>
mov    $0x8085ebc,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80628cc <iplink_parse+0xf8c>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%ebx
movl   $0x8085f84,0x4(%esp)
mov    %ebx,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
je     80628ab <iplink_parse+0xf6b>
movl   $0x80878f7,0x4(%esp)
mov    %ebx,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
jne    806291d <iplink_parse+0xfdd>
mov    $0x1,%eax
mov    %eax,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebp,(%esp)
call   807eb00 <addattr8>
jmp    80626a1 <iplink_parse+0xd61>
mov    $0x80878b4,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8062940 <iplink_parse+0x1000>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804ebd0 <get_operstate>
test   %eax,%eax
js     806292d <iplink_parse+0xfed>
movzbl %al,%eax
mov    %eax,0xc(%esp)
movl   $0x10,0x8(%esp)
jmp    80628b7 <iplink_parse+0xf77>
mov    0x8(%ebx),%eax
movl   $0x80878ba,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %ebx,0x4(%esp)
movl   $0x8087964,(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80878ff,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8087912,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80629a9 <iplink_parse+0x1069>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%edi
je     8061d6e <iplink_parse+0x42e>
cmpl   $0xffffffff,0x54(%esp)
jne    8062a27 <iplink_parse+0x10e7>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
lea    0x54(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8062a14 <iplink_parse+0x10d4>
movl   $0x4,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x1f,0x8(%esp)
jmp    8061d18 <iplink_parse+0x3d8>
movl   $0x808793b,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8062a60 <iplink_parse+0x1120>
cmpl   $0x1,0x14(%esp)
lea    0x4(%ebx),%esi
je     8061d6e <iplink_parse+0x42e>
cmpl   $0xffffffff,0x58(%esp)
jne    8062a4d <iplink_parse+0x110d>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x58(%esp),%eax
mov    %eax,(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8062a3a <iplink_parse+0x10fa>
lea    0x58(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x20,0x8(%esp)
jmp    8061b53 <iplink_parse+0x213>
mov    0x4(%ebx),%eax
movl   $0x808791e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8087912,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    0x4(%ebx),%eax
movl   $0x8087947,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808793b,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    (%ebx),%eax
cmpb   $0x64,(%eax)
jne    8062a8c <iplink_parse+0x114c>
cmpb   $0x65,0x1(%eax)
jne    8062a8c <iplink_parse+0x114c>
cmpb   $0x76,0x2(%eax)
jne    8062a8c <iplink_parse+0x114c>
cmpb   $0x0,0x3(%eax)
jne    8062a8c <iplink_parse+0x114c>
subl   $0x1,0x14(%esp)
lea    0x4(%ebx),%ecx
je     8061d6e <iplink_parse+0x42e>
mov    0x4(%ebx),%eax
mov    %ecx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8062abc <iplink_parse+0x117c>
mov    0x20(%esp),%eax
mov    (%eax),%edx
mov    (%ebx),%eax
test   %edx,%edx
jne    8062ac1 <iplink_parse+0x1181>
mov    0x20(%esp),%edi
subl   $0x1,0x14(%esp)
mov    %eax,(%edi)
jmp    8061a11 <iplink_parse+0xd1>
call   8061280 <iplink_usage>
mov    %eax,0x4(%esp)
movl   $0x8085e82,(%esp)
call   8080150 <duparg2>
jmp    8062ae0 <iplink_parse+0x11a0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x47c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
lea    0x4c(%esp),%ebx
mov    0x490(%esp),%esi
mov    %edx,0x28(%esp)
mov    %ebx,%edi
mov    %ecx,%edx
mov    $0x108,%ecx
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
rep stos %eax,%es:(%edi)
movzwl 0x28(%esp),%eax
lea    0x44(%esp),%edi
mov    %edi,0x1c(%esp)
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
or     $0x1,%eax
mov    %ax,0x52(%esp)
mov    0x8095ca8,%eax
mov    %edx,(%esp)
movl   $0x0,0x40(%esp)
movl   $0x20,0x4c(%esp)
mov    %al,0x5c(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    %bp,0x50(%esp)
mov    %edx,0x2c(%esp)
call   8061940 <iplink_parse>
test   %eax,%eax
js     8062d62 <iplink_parse+0x1422>
mov    0x2c(%esp),%edx
lea    (%esi,%eax,4),%esi
sub    %eax,%edx
mov    0x44(%esp),%eax
mov    %edx,%ebp
cmp    $0xffffffff,%eax
je     8062be0 <iplink_parse+0x12a0>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8062dc0 <iplink_parse+0x1480>
movl   $0x4,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x1b,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
call   807ea10 <addattr_l>
mov    0x28(%esp),%eax
and    $0x400,%eax
mov    %eax,0x28(%esp)
je     8062d88 <iplink_parse+0x1448>
mov    0x38(%esp),%ecx
test   %ecx,%ecx
je     8062f08 <iplink_parse+0x15c8>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8062c43 <iplink_parse+0x1303>
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x48(%esp)
je     8062f15 <iplink_parse+0x15d5>
lea    0x48(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
call   807ea10 <addattr_l>
mov    0x38(%esp),%edi
test   %edi,%edi
je     8062c88 <iplink_parse+0x1348>
mov    %edi,(%esp)
call   804b880 <strlen@plt>
add    $0x1,%eax
cmp    $0x1,%eax
je     8062f74 <iplink_parse+0x1634>
cmp    $0x10,%eax
jg     8062f88 <iplink_parse+0x1648>
mov    %eax,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
call   807ea10 <addattr_l>
mov    0x40(%esp),%edx
test   %edx,%edx
je     8062e48 <iplink_parse+0x1508>
mov    0x4c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x12,0x8(%esp)
movl   $0x420,0x4(%esp)
lea    0x3(%eax),%edi
mov    %ebx,(%esp)
and    $0xfffffffc,%edi
call   807ea10 <addattr_l>
mov    0x40(%esp),%edx
add    %ebx,%edi
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
call   804b880 <strlen@plt>
mov    0x28(%esp),%edx
movl   $0x1,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
call   807ea10 <addattr_l>
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8061800 <get_link_kind>
test   %ebp,%ebp
mov    %eax,%edx
setne  %al
test   %edx,%edx
jne    8062e88 <iplink_parse+0x1548>
test   %al,%al
jne    8062e00 <iplink_parse+0x14c0>
mov    0x4c(%esp),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %ebx,%eax
sub    %edi,%eax
mov    %ax,(%edi)
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8062f68 <iplink_parse+0x1628>
xor    %eax,%eax
mov    0x46c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8062f63 <iplink_parse+0x1623>
add    $0x47c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
test   %eax,%eax
je     8062f98 <iplink_parse+0x1658>
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x60(%esp)
jne    8062c43 <iplink_parse+0x1303>
mov    0x34(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8062e28 <iplink_parse+0x14e8>
lea    0x0(%esi),%esi
test   %ebp,%ebp
jne    8062e1a <iplink_parse+0x14da>
testl  $0x400,0x28(%esp)
jne    8062f2a <iplink_parse+0x15ea>
mov    %eax,0xc(%esp)
movl   $0x1b,0x8(%esp)
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x60(%esp)
call   807eba0 <addattr32>
jmp    8062d30 <iplink_parse+0x13f0>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8082d28,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8062fc9 <iplink_parse+0x1689>
mov    (%esi),%eax
movl   $0x80875c8,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8062d62 <iplink_parse+0x1422>
nop
mov    0x28(%esp),%eax
test   %eax,%eax
je     8062d30 <iplink_parse+0x13f0>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808765c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8062d62 <iplink_parse+0x1422>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %al,%al
je     8062d1f <iplink_parse+0x13df>
mov    0x4c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x2,0x8(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %ebx,%eax
movl   $0x420,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   807ea10 <addattr_l>
mov    0x28(%esp),%edx
mov    0xc(%edx),%eax
test   %eax,%eax
je     8062eec <iplink_parse+0x15ac>
mov    %ebx,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,(%esp)
call   *%eax
test   %eax,%eax
jne    8062f59 <iplink_parse+0x1619>
mov    0x4c(%esp),%eax
mov    0x2c(%esp),%esi
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %ebx,%eax
mov    %eax,%edx
sub    %esi,%edx
mov    %dx,(%esi)
jmp    8062d2b <iplink_parse+0x13eb>
mov    0x34(%esp),%eax
mov    %eax,0x38(%esp)
jmp    8062bff <iplink_parse+0x12bf>
mov    0x3c(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8062e28 <iplink_parse+0x14e8>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087604,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8062d62 <iplink_parse+0x1422>
mov    $0xffffffff,%eax
jmp    8062d62 <iplink_parse+0x1422>
call   804b660 <__stack_chk_fail@plt>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x808c3df,0x4(%esp)
movl   $0x8087634,(%esp)
call   80800b0 <invarg>
mov    %edi,0x4(%esp)
movl   $0x8087977,(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80838d4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   8061280 <iplink_usage>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xd0(%esp),%ebp
mov    %gs:0x14,%eax
mov    %eax,0xac(%esp)
xor    %eax,%eax
mov    0xd4(%esp),%ebx
test   %ebp,%ebp
jle    8063140 <do_iplink+0x170>
call   8060f80 <do_ipntable+0x180>
test   %eax,%eax
jne    8063098 <do_iplink+0xc8>
movl   $0x808602e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     8063180 <do_iplink+0x1b0>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806305a <do_iplink+0x8a>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8063100 <do_iplink+0x130>
add    $0x4,%ebx
sub    $0x1,%ebp
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   8051680 <ipaddr_list_link>
mov    %eax,0x28(%esp)
mov    0xac(%esp),%edi
xor    %gs:0x14,%edi
mov    0x28(%esp),%eax
jne    80638e9 <do_iplink+0x919>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8063160 <do_iplink+0x190>
movl   $0x808602e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80630e2 <do_iplink+0x112>
movl   $0x8083411,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80635c8 <do_iplink+0x5f8>
add    $0x4,%ebx
xor    %edx,%edx
lea    -0x1(%ebp),%ecx
mov    $0x10,%eax
mov    %ebx,(%esp)
call   8062ae0 <iplink_parse+0x11a0>
mov    %eax,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806305a <do_iplink+0x8a>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8063790 <do_iplink+0x7c0>
call   8061280 <iplink_usage>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   8051680 <ipaddr_list_link>
mov    %eax,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
lea    0x0(%esi),%esi
add    $0x4,%ebx
mov    $0x600,%edx
lea    -0x1(%ebp),%ecx
mov    $0x10,%al
mov    %ebx,(%esp)
call   8062ae0 <iplink_parse+0x11a0>
mov    %eax,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
xchg   %ax,%ax
add    $0x4,%ebx
sub    $0x1,%ebp
movl   $0xffffffff,0x40(%esp)
movl   $0xffffffff,0x44(%esp)
je     8063809 <do_iplink+0x839>
xor    %edx,%edx
movl   $0x0,0x2c(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x20(%esp)
mov    %edx,0x24(%esp)
jmp    80631f2 <do_iplink+0x222>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x70,0x1(%eax)
jne    80631f9 <do_iplink+0x229>
cmpb   $0x0,0x2(%eax)
jne    80631f9 <do_iplink+0x229>
orl    $0x1,0x20(%esp)
orl    $0x1,0x24(%esp)
add    $0x4,%ebx
sub    $0x1,%ebp
je     8063340 <do_iplink+0x370>
mov    (%ebx),%eax
cmpb   $0x75,(%eax)
je     80631d0 <do_iplink+0x200>
mov    $0x5,%ecx
mov    %eax,%esi
mov    $0x80877b7,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8063228 <do_iplink+0x258>
orl    $0x1,0x20(%esp)
andl   $0xfffffffe,0x24(%esp)
jmp    80631e6 <do_iplink+0x216>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8063250 <do_iplink+0x280>
sub    $0x1,%ebp
lea    0x4(%ebx),%eax
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%edi
mov    %eax,%ebx
mov    %edi,0x2c(%esp)
jmp    80631e6 <do_iplink+0x216>
nop
movl   $0x808b938,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8063280 <do_iplink+0x2b0>
sub    $0x1,%ebp
lea    0x4(%ebx),%eax
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%edx
mov    %eax,%ebx
mov    %edx,0x30(%esp)
jmp    80631e6 <do_iplink+0x216>
xchg   %ax,%ax
movl   $0x8082f43,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8063320 <do_iplink+0x350>
mov    (%ebx),%eax
cmpb   $0x62,(%eax)
je     806330c <do_iplink+0x33c>
movl   $0x80877bc,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80632cb <do_iplink+0x2fb>
mov    (%ebx),%eax
mov    $0x80877c9,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806383a <do_iplink+0x86a>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8063920 <do_iplink+0x950>
cmpl   $0xffffffff,0x40(%esp)
jne    8063b61 <do_iplink+0xb91>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   807f260 <get_integer>
test   %eax,%eax
jne    8063b0e <do_iplink+0xb3e>
mov    %esi,%ebx
jmp    80631e6 <do_iplink+0x216>
cmpb   $0x72,0x1(%eax)
jne    80632a1 <do_iplink+0x2d1>
cmpb   $0x64,0x2(%eax)
jne    80632a1 <do_iplink+0x2d1>
cmpb   $0x0,0x3(%eax)
jne    80632a1 <do_iplink+0x2d1>
xchg   %ax,%ax
sub    $0x1,%ebp
lea    0x4(%ebx),%eax
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%edi
mov    %eax,%ebx
mov    %edi,0x38(%esp)
jmp    80631e6 <do_iplink+0x216>
lea    0x0(%esi),%esi
mov    0x34(%esp),%eax
test   %eax,%eax
je     8063809 <do_iplink+0x839>
mov    0x30(%esp),%edi
mov    0x38(%esp),%ebp
test   %edi,%edi
setne  %al
test   %ebp,%ebp
setne  %bl
mov    %al,0x3f(%esp)
or     %bl,%al
mov    %al,0x3e(%esp)
jne    8063631 <do_iplink+0x661>
mov    0x2c(%esp),%esi
test   %esi,%esi
je     806341c <do_iplink+0x44c>
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     806341c <do_iplink+0x44c>
mov    0x2c(%esp),%eax
cmpb   $0x0,(%eax)
je     8063b21 <do_iplink+0xb51>
mov    0x34(%esp),%eax
lea    0x8c(%esp),%edi
movl   $0x10,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
mov    0x2c(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
lea    0x9c(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
call   8061160 <do_ipntable+0x360>
test   %eax,%eax
mov    %eax,%esi
js     8063535 <do_iplink+0x565>
mov    %edi,0x8(%esp)
movl   $0x8923,0x4(%esp)
mov    %eax,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    80638d0 <do_iplink+0x900>
mov    %esi,(%esp)
call   804bb60 <close@plt>
mov    0x2c(%esp),%eax
mov    %eax,0x34(%esp)
mov    0x40(%esp),%esi
cmp    $0xffffffff,%esi
je     806348f <do_iplink+0x4bf>
call   8061160 <do_ipntable+0x360>
test   %eax,%eax
mov    %eax,%ebp
js     8063535 <do_iplink+0x565>
lea    0x8c(%esp),%edi
xor    %eax,%eax
movl   $0x0,(%edi,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     806343d <do_iplink+0x46d>
mov    0x34(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
mov    %edi,0x8(%esp)
movl   $0x8943,0x4(%esp)
mov    %ebp,(%esp)
mov    %esi,0x9c(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
js     806397f <do_iplink+0x9af>
mov    %ebp,(%esp)
call   804bb60 <close@plt>
mov    0x44(%esp),%esi
cmp    $0xffffffff,%esi
je     8063502 <do_iplink+0x532>
call   8061160 <do_ipntable+0x360>
test   %eax,%eax
mov    %eax,%ebp
js     8063535 <do_iplink+0x565>
lea    0x8c(%esp),%edi
xor    %eax,%eax
movl   $0x0,(%edi,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     80634b0 <do_iplink+0x4e0>
mov    0x34(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
mov    %edi,0x8(%esp)
movl   $0x8922,0x4(%esp)
mov    %ebp,(%esp)
mov    %esi,0x9c(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
js     80638ee <do_iplink+0x91e>
mov    %ebp,(%esp)
call   804bb60 <close@plt>
cmpb   $0x0,0x3e(%esp)
je     8063548 <do_iplink+0x578>
test   %bl,%bl
je     806351f <do_iplink+0x54f>
mov    $0x1,%edx
lea    0x6c(%esp),%eax
call   80611f0 <do_ipntable+0x3f0>
test   %eax,%eax
js     8063535 <do_iplink+0x565>
cmpb   $0x0,0x3f(%esp)
je     8063548 <do_iplink+0x578>
xor    %edx,%edx
lea    0x4c(%esp),%eax
call   80611f0 <do_ipntable+0x3f0>
test   %eax,%eax
jns    8063548 <do_iplink+0x578>
movl   $0xffffffff,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
test   %eax,%eax
je     8063070 <do_iplink+0xa0>
mov    0x34(%esp),%eax
lea    0x8c(%esp),%esi
movl   $0x10,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
call   8061160 <do_ipntable+0x360>
test   %eax,%eax
mov    %eax,%ebx
js     8063535 <do_iplink+0x565>
mov    %esi,0x8(%esp)
movl   $0x8913,0x4(%esp)
mov    %eax,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%edi
jne    8063907 <do_iplink+0x937>
movzwl 0x9c(%esp),%eax
movswl %ax,%edx
xor    0x24(%esp),%edx
test   %edx,0x20(%esp)
jne    80637bf <do_iplink+0x7ef>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
mov    %edi,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
xchg   %ax,%ax
movl   $0x8083418,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8063613 <do_iplink+0x643>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806302a <do_iplink+0x5a>
add    $0x4,%ebx
xor    %edx,%edx
lea    -0x1(%ebp),%ecx
mov    $0x11,%al
mov    %ebx,(%esp)
call   8062ae0 <iplink_parse+0x11a0>
mov    %eax,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
add    $0x4,%ebx
mov    $0x500,%edx
lea    -0x1(%ebp),%ecx
mov    $0x10,%al
mov    %ebx,(%esp)
call   8062ae0 <iplink_parse+0x11a0>
mov    %eax,0x28(%esp)
jmp    8063070 <do_iplink+0xa0>
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0x11,(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
mov    %eax,%esi
js     80639b1 <do_iplink+0x9e1>
lea    0x8c(%esp),%edi
xor    %eax,%eax
movl   $0x0,(%edi,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     8063660 <do_iplink+0x690>
mov    0x34(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
mov    %edi,0x8(%esp)
movl   $0x8933,0x4(%esp)
mov    %esi,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
js     8063998 <do_iplink+0x9c8>
mov    0x9c(%esp),%eax
lea    0x6c(%esp),%edi
mov    $0x11,%edx
mov    $0x6000,%ecx
movl   $0x14,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
movl   $0x0,0x74(%esp)
movl   $0x0,0x78(%esp)
movl   $0x0,0x7c(%esp)
mov    %dx,0x6c(%esp)
mov    %eax,0x70(%esp)
mov    %cx,0x6e(%esp)
call   804b8d0 <bind@plt>
cmp    $0xffffffff,%eax
je     80639db <do_iplink+0xa0b>
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
movl   $0x14,0x48(%esp)
call   804ba80 <getsockname@plt>
cmp    $0xffffffff,%eax
je     80639c2 <do_iplink+0x9f2>
mov    %esi,(%esp)
call   804bb60 <close@plt>
movzwl 0x74(%esp),%ebp
cmpb   $0x0,0x3f(%esp)
movzbl 0x77(%esp),%esi
je     806375d <do_iplink+0x78d>
lea    0x4c(%esp),%eax
mov    %esi,%ecx
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ebp,%edx
mov    %eax,(%esp)
mov    0x34(%esp),%eax
call   8061030 <do_ipntable+0x230>
test   %eax,%eax
js     8063535 <do_iplink+0x565>
test   %bl,%bl
je     806336e <do_iplink+0x39e>
mov    0x38(%esp),%eax
mov    %esi,%ecx
mov    %ebp,%edx
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
mov    0x34(%esp),%eax
call   8061030 <do_ipntable+0x230>
test   %eax,%eax
jns    806336e <do_iplink+0x39e>
jmp    8063535 <do_iplink+0x565>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
movl   $0x80876cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x20(%esp),%edi
mov    %esi,0x8(%esp)
movl   $0x8914,0x4(%esp)
mov    %ebx,(%esp)
mov    %edi,%edx
not    %edx
and    %eax,%edx
mov    %edi,%eax
and    0x24(%esp),%ax
or     %eax,%edx
mov    %dx,0x9c(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
mov    %eax,%edi
je     80635b5 <do_iplink+0x5e5>
movl   $0x80879dd,(%esp)
call   804b700 <perror@plt>
jmp    80635b5 <do_iplink+0x5e5>
mov    0x8095c40,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087694,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x80877c7,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80632cb <do_iplink+0x2fb>
mov    (%ebx),%esi
movzbl (%esi),%edi
cmp    $0x6d,%edi
jne    8063925 <do_iplink+0x955>
cmpb   $0x74,0x1(%esi)
jne    8063925 <do_iplink+0x955>
cmpb   $0x75,0x2(%esi)
jne    8063925 <do_iplink+0x955>
cmpb   $0x0,0x3(%esi)
jne    8063925 <do_iplink+0x955>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8063920 <do_iplink+0x950>
cmpl   $0xffffffff,0x44(%esp)
jne    8063a70 <do_iplink+0xaa0>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x44(%esp),%eax
mov    %eax,(%esp)
call   807f260 <get_integer>
test   %eax,%eax
je     8063305 <do_iplink+0x335>
mov    0x4(%ebx),%eax
movl   $0x80877ea,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80879ac,(%esp)
call   804b700 <perror@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
call   804b660 <__stack_chk_fail@plt>
movl   $0x80879c5,(%esp)
call   804b700 <perror@plt>
mov    %ebp,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x80879d0,(%esp)
call   804b700 <perror@plt>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
call   8080010 <incomplete_command>
movl   $0x8087819,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8063a22 <do_iplink+0xa52>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x1000,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    80639f4 <do_iplink+0xa24>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8063b35 <do_iplink+0xb65>
cmpb   $0x0,0x2(%eax)
jne    80639f4 <do_iplink+0xa24>
orl    $0x1000,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
movl   $0x80879b8,(%esp)
call   804b700 <perror@plt>
mov    %ebp,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x808799a,(%esp)
call   804b700 <perror@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x8087988,(%esp)
call   804b700 <perror@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x808c3d8,(%esp)
call   804b700 <perror@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x80879a7,(%esp)
call   804b700 <perror@plt>
mov    %esi,(%esp)
call   804bb60 <close@plt>
jmp    8063535 <do_iplink+0x565>
mov    %eax,0x10(%esp)
movl   $0x8087819,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x808758c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8063535 <do_iplink+0x565>
movl   $0x8087816,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8063ab4 <do_iplink+0xae4>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x200,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    8063aa3 <do_iplink+0xad3>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8063a83 <do_iplink+0xab3>
cmpb   $0x0,0x2(%eax)
jne    8063aa3 <do_iplink+0xad3>
orl    $0x200,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    0x4(%ebx),%eax
movl   $0x808455d,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
cmp    $0x66,%bl
jne    8063aa3 <do_iplink+0xad3>
cmpb   $0x66,0x2(%eax)
jne    8063aa3 <do_iplink+0xad3>
cmpb   $0x0,0x3(%eax)
jne    8063aa3 <do_iplink+0xad3>
andl   $0xfffffdff,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    %eax,0x10(%esp)
movl   $0x8087816,0xc(%esp)
jmp    8063a00 <do_iplink+0xa30>
movl   $0x8087823,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8063ba5 <do_iplink+0xbd5>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x100,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    8063b94 <do_iplink+0xbc4>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8063b74 <do_iplink+0xba4>
cmpb   $0x0,0x2(%eax)
jne    8063b94 <do_iplink+0xbc4>
orl    $0x100,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    0x4(%ebx),%eax
movl   $0x80877ce,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808c3df,0x4(%esp)
movl   $0x8087634,(%esp)
call   80800b0 <invarg>
cmp    $0x66,%bl
jne    80639f4 <do_iplink+0xa24>
cmpb   $0x66,0x2(%eax)
jne    80639f4 <do_iplink+0xa24>
cmpb   $0x0,0x3(%eax)
jne    80639f4 <do_iplink+0xa24>
andl   $0xffffefff,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    0x4(%ebx),%eax
movl   $0x80877bc,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
cmp    $0x66,%bl
jne    8063b94 <do_iplink+0xbc4>
cmpb   $0x66,0x2(%eax)
jne    8063b94 <do_iplink+0xbc4>
cmpb   $0x0,0x3(%eax)
jne    8063b94 <do_iplink+0xbc4>
andl   $0xfffffeff,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    %eax,0x10(%esp)
movl   $0x8087823,0xc(%esp)
jmp    8063a00 <do_iplink+0xa30>
movl   $0x808782b,0x4(%esp)
mov    %esi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8063c03 <do_iplink+0xc33>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x20,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    8063c7b <do_iplink+0xcab>
movzbl 0x1(%eax),%ebx
cmp    $0x66,%bl
jne    8063c64 <do_iplink+0xc94>
cmpb   $0x66,0x2(%eax)
jne    8063c7b <do_iplink+0xcab>
cmpb   $0x0,0x3(%eax)
jne    8063c7b <do_iplink+0xcab>
orl    $0x20,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
cmp    $0x61,%edi
jne    8063cbd <do_iplink+0xced>
cmpb   $0x72,0x1(%esi)
jne    8063cbd <do_iplink+0xced>
cmpb   $0x70,0x2(%esi)
jne    8063cbd <do_iplink+0xced>
cmpb   $0x0,0x3(%esi)
jne    8063cbd <do_iplink+0xced>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x80,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    8063cac <do_iplink+0xcdc>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8063c8c <do_iplink+0xcbc>
cmpb   $0x0,0x2(%eax)
jne    8063cac <do_iplink+0xcdc>
andl   $0xffffff7f,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
cmp    $0x6e,%bl
jne    8063c7b <do_iplink+0xcab>
cmpb   $0x0,0x2(%eax)
jne    8063c7b <do_iplink+0xcab>
andl   $0xffffffdf,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    %eax,0x10(%esp)
movl   $0x808782b,0xc(%esp)
jmp    8063a00 <do_iplink+0xa30>
cmp    $0x66,%bl
jne    8063cac <do_iplink+0xcdc>
cmpb   $0x66,0x2(%eax)
jne    8063cac <do_iplink+0xcdc>
cmpb   $0x0,0x3(%eax)
jne    8063cac <do_iplink+0xcdc>
orl    $0x80,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    %eax,0x10(%esp)
movl   $0x8086624,0xc(%esp)
jmp    8063a00 <do_iplink+0xa30>
movl   $0x8083363,0x4(%esp)
mov    %esi,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8063d13 <do_iplink+0xd43>
sub    $0x1,%ebp
lea    0x4(%ebx),%ecx
je     8063920 <do_iplink+0x950>
mov    0x4(%ebx),%eax
orl    $0x8000,0x20(%esp)
cmpb   $0x6f,(%eax)
jne    8063d84 <do_iplink+0xdb4>
movzbl 0x1(%eax),%ebx
cmp    $0x6e,%bl
jne    8063d64 <do_iplink+0xd94>
cmpb   $0x0,0x2(%eax)
jne    8063d84 <do_iplink+0xdb4>
orl    $0x8000,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    (%ebx),%eax
cmpb   $0x64,(%eax)
jne    8063d38 <do_iplink+0xd68>
cmpb   $0x65,0x1(%eax)
jne    8063d38 <do_iplink+0xd68>
cmpb   $0x76,0x2(%eax)
jne    8063d38 <do_iplink+0xd68>
cmpb   $0x0,0x3(%eax)
jne    8063d38 <do_iplink+0xd68>
add    $0x4,%ebx
sub    $0x1,%ebp
je     8063920 <do_iplink+0x950>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8063134 <do_iplink+0x164>
cmpl   $0x0,0x34(%esp)
mov    (%ebx),%eax
jne    8063d95 <do_iplink+0xdc5>
mov    %eax,0x34(%esp)
jmp    80631e6 <do_iplink+0x216>
cmp    $0x66,%bl
jne    8063d84 <do_iplink+0xdb4>
cmpb   $0x66,0x2(%eax)
jne    8063d84 <do_iplink+0xdb4>
cmpb   $0x0,0x3(%eax)
jne    8063d84 <do_iplink+0xdb4>
andl   $0xffff7fff,0x24(%esp)
mov    %ecx,%ebx
jmp    80631e6 <do_iplink+0x216>
mov    %eax,0x10(%esp)
movl   $0x8083363,0xc(%esp)
jmp    8063a00 <do_iplink+0xa30>
mov    %eax,0x4(%esp)
movl   $0x8085e82,(%esp)
call   8080150 <duparg2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x33,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80879ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087a20,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x134,%esp
mov    %ebx,0x4(%esp)
movl   $0x9,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
call   804ba50 <fputc@plt>
movzbl 0x20(%esi),%eax
cmp    $0x11,%al
je     8063f70 <do_iplink+0xfa0>
cmp    $0x2,%al
je     8063f48 <do_iplink+0xf78>
cmp    $0xa,%al
je     8063f20 <do_iplink+0xf50>
mov    %eax,0xc(%esp)
movl   $0x808326f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esi),%eax
mov    %eax,0x8(%esp)
movzbl 0x20(%esi),%eax
movl   $0x100,0x10(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   80805b0 <format_host>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8(%esi),%eax
cmp    $0x1,%eax
je     8063ece <do_iplink+0xefe>
mov    %eax,0xc(%esp)
movl   $0x8084103,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%esi),%eax
test   %eax,%eax
je     8063ef1 <do_iplink+0xf21>
mov    %eax,0xc(%esp)
movl   $0x8089001,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    0x12c(%esp),%eax
xor    %gs:0x14,%eax
jne    8063fbc <do_iplink+0xfec>
add    $0x134,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083250,(%esp)
call   804b710 <fwrite@plt>
jmp    8063e73 <do_iplink+0xea3>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087ad4,(%esp)
call   804b710 <fwrite@plt>
jmp    8063e73 <do_iplink+0xea3>
lea    0x0(%esi),%esi
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
movzbl 0x21(%esi),%eax
movl   $0x40,0x10(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
lea    0x28(%esi),%eax
mov    %eax,(%esp)
call   8081e40 <ll_addr_n2a>
movl   $0x8087acb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8063eaa <do_iplink+0xeda>
call   804b660 <__stack_chk_fail@plt>
jmp    8063fd0 <do_iplink+0x1000>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x17c,%esp
movl   $0x80843db,0x4(%esp)
movl   $0x8087adb,(%esp)
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x16c(%esp)
xor    %eax,%eax
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8064128 <do_iplink+0x1158>
xor    %eax,%eax
mov    $0x12,%ecx
lea    0x24(%esp),%edi
rep stos %eax,%es:(%edi)
lea    0x6c(%esp),%ebx
mov    %ebp,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     8064120 <do_iplink+0x1150>
mov    $0x20,%eax
movb   $0x2,0x44(%esp)
mov    %ax,0x46(%esp)
movb   $0x4,0x45(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     8064120 <do_iplink+0x1150>
cmpb   $0x9,0x6c(%esp)
je     8064098 <do_iplink+0x10c8>
lea    0x34(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8087b3f,0x4(%esp)
mov    %ebx,(%esp)
call   804ba60 <sscanf@plt>
jmp    8064050 <do_iplink+0x1080>
lea    0x0(%esi),%esi
mov    0x8096370,%eax
test   %eax,%eax
je     80640b5 <do_iplink+0x10e5>
lea    0x34(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8064050 <do_iplink+0x1080>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x24(%esp),%esi
movl   $0x8087aea,0x4(%esp)
mov    %ebx,(%esp)
call   804ba60 <sscanf@plt>
movl   $0x48,(%esp)
call   804b7a0 <malloc@plt>
mov    $0x12,%ecx
mov    %eax,%edi
rep movsl %ds:(%esi),%es:(%edi)
mov    0x1c(%esp),%edi
mov    (%edi),%edx
test   %edx,%edx
je     8064143 <do_iplink+0x1173>
mov    0x4(%eax),%ecx
cmp    %ecx,0x4(%edx)
jle    806410d <do_iplink+0x113d>
jmp    8064143 <do_iplink+0x1173>
lea    0x0(%esi),%esi
cmp    %ecx,0x4(%edx)
jg     8064115 <do_iplink+0x1145>
mov    %edx,%esi
mov    (%edx),%edx
test   %edx,%edx
jne    8064108 <do_iplink+0x1138>
mov    %edx,(%eax)
mov    %eax,(%esi)
jmp    8064050 <do_iplink+0x1080>
xchg   %ax,%ax
mov    %ebp,(%esp)
call   804b600 <fclose@plt>
mov    0x16c(%esp),%eax
xor    %gs:0x14,%eax
jne    8064150 <do_iplink+0x1180>
add    $0x17c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x1c(%esp),%esi
mov    %edx,(%eax)
mov    %eax,(%esi)
jmp    8064050 <do_iplink+0x1080>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c,%esp
xor    %eax,%eax
cmpb   $0x0,(%ebx)
mov    %edx,0xc(%esp)
je     80641c9 <do_iplink+0x11f9>
cmpb   $0x0,0x1(%ebx)
je     80641c4 <do_iplink+0x11f4>
xor    %esi,%esi
xor    %ebp,%ebp
lea    0x1c(%esp),%edi
jmp    80641ab <do_iplink+0x11db>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
add    $0x2,%ebx
add    $0x1,%esi
mov    0xc(%esp),%ecx
mov    %al,(%ecx,%ebp,1)
cmpb   $0x0,(%ebx)
je     80641d8 <do_iplink+0x1208>
cmp    $0x40,%esi
mov    %esi,%ebp
je     80641e8 <do_iplink+0x1218>
cmpb   $0x0,0x1(%ebx)
je     80641c4 <do_iplink+0x11f4>
mov    %edi,0x8(%esp)
movl   $0x808cd35,0x4(%esp)
mov    %ebx,(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x1,%eax
je     8064188 <do_iplink+0x11b8>
mov    $0xffffffff,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x2c,%esp
mov    $0x40,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x27c,%esp
movl   $0x80843db,0x4(%esp)
movl   $0x8087b0c,(%esp)
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x26c(%esp)
xor    %eax,%eax
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     806433c <do_iplink+0x136c>
lea    0x6c(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
movl   $0x100,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     8064330 <do_iplink+0x1360>
xor    %eax,%eax
mov    $0x12,%ecx
lea    0x24(%esp),%edi
rep stos %eax,%es:(%edi)
lea    0x2c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x16c(%esp),%esi
lea    0x28(%esp),%eax
lea    0x34(%esp),%ebx
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8087b1c,0x4(%esp)
mov    %ebp,(%esp)
call   804ba60 <sscanf@plt>
mov    0x8096370,%edx
test   %edx,%edx
je     80642c2 <do_iplink+0x12f2>
mov    %ebx,0x4(%esp)
mov    %edx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8064248 <do_iplink+0x1278>
lea    0x4c(%esp),%edx
mov    %esi,%eax
movb   $0xa,0x44(%esp)
call   8064160 <do_iplink+0x1190>
test   %eax,%eax
mov    %eax,%ebx
js     8064248 <do_iplink+0x1278>
movl   $0x48,(%esp)
lea    0x24(%esp),%esi
call   804b7a0 <malloc@plt>
mov    $0x12,%ecx
mov    %eax,%edi
rep movsl %ds:(%esi),%es:(%edi)
mov    0x1c(%esp),%edi
mov    %bl,0x21(%eax)
shl    $0x3,%ebx
mov    %bx,0x22(%eax)
mov    (%edi),%edx
test   %edx,%edx
je     8064357 <do_iplink+0x1387>
mov    0x4(%eax),%ecx
cmp    %ecx,0x4(%edx)
jle    806431d <do_iplink+0x134d>
jmp    8064357 <do_iplink+0x1387>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,0x4(%edx)
jg     8064325 <do_iplink+0x1355>
mov    %edx,%ebx
mov    (%edx),%edx
test   %edx,%edx
jne    8064318 <do_iplink+0x1348>
mov    %edx,(%eax)
mov    %eax,(%ebx)
jmp    8064248 <do_iplink+0x1278>
xchg   %ax,%ax
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   804b600 <fclose@plt>
mov    0x26c(%esp),%eax
xor    %gs:0x14,%eax
jne    8064364 <do_iplink+0x1394>
add    $0x27c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x1c(%esp),%ebx
mov    %edx,(%eax)
mov    %eax,(%ebx)
jmp    8064248 <do_iplink+0x1278>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28c,%esp
movl   $0x80843db,0x4(%esp)
movl   $0x8087b25,(%esp)
mov    %eax,0x2c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x27c(%esp)
xor    %eax,%eax
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     80644cc <do_iplink+0x14fc>
lea    0x7c(%esp),%ebp
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
movl   $0x100,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     80644c0 <do_iplink+0x14f0>
xor    %eax,%eax
mov    $0x12,%ecx
lea    0x34(%esp),%edi
rep stos %eax,%es:(%edi)
lea    0x17c(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x44(%esp),%ebx
lea    0x38(%esp),%eax
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x8087b39,0x4(%esp)
mov    %ebp,(%esp)
call   804ba60 <sscanf@plt>
mov    0x8096370,%eax
test   %eax,%eax
je     806443d <do_iplink+0x146d>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    80643b8 <do_iplink+0x13e8>
lea    0x5c(%esp),%edx
lea    0x17c(%esp),%eax
movb   $0x11,0x54(%esp)
call   8064160 <do_iplink+0x1190>
test   %eax,%eax
mov    %eax,%ebx
js     80643b8 <do_iplink+0x13e8>
movl   $0x48,(%esp)
lea    0x34(%esp),%esi
call   804b7a0 <malloc@plt>
mov    0x30(%esp),%edx
mov    $0x12,%ecx
mov    %eax,%edi
rep movsl %ds:(%esi),%es:(%edi)
mov    %bl,0x21(%eax)
shl    $0x3,%ebx
test   %edx,%edx
mov    %bx,0x22(%eax)
je     806448e <do_iplink+0x14be>
movl   $0x8087b44,0xc(%eax)
mov    0x2c(%esp),%esi
mov    (%esi),%edx
test   %edx,%edx
je     80644e7 <do_iplink+0x1517>
mov    0x4(%eax),%ecx
cmp    %ecx,0x4(%edx)
jle    80644ad <do_iplink+0x14dd>
jmp    80644e7 <do_iplink+0x1517>
lea    0x0(%esi),%esi
cmp    %ecx,0x4(%edx)
jg     80644b5 <do_iplink+0x14e5>
mov    %edx,%ebx
mov    (%edx),%edx
test   %edx,%edx
jne    80644a8 <do_iplink+0x14d8>
mov    %edx,(%eax)
mov    %eax,(%ebx)
jmp    80643b8 <do_iplink+0x13e8>
xchg   %ax,%ax
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   804b600 <fclose@plt>
mov    0x27c(%esp),%eax
xor    %gs:0x14,%eax
jne    80644f4 <do_iplink+0x1524>
add    $0x28c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x2c(%esp),%ebx
mov    %edx,(%eax)
mov    %eax,(%ebx)
jmp    80643b8 <do_iplink+0x13e8>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x30,%esp
mov    0x8096374,%edi
movl   $0x0,0x2c(%esp)
test   %edi,%edi
jne    8064585 <do_iplink+0x15b5>
mov    0x8095ca8,%eax
mov    %eax,0x8096374
jmp    8064585 <do_iplink+0x15b5>
mov    (%ebx),%eax
cmpb   $0x64,(%eax)
jne    8064552 <do_iplink+0x1582>
cmpb   $0x65,0x1(%eax)
jne    8064552 <do_iplink+0x1582>
cmpb   $0x76,0x2(%eax)
jne    8064552 <do_iplink+0x1582>
cmpb   $0x0,0x3(%eax)
jne    8064552 <do_iplink+0x1582>
sub    $0x1,%esi
lea    0x4(%ebx),%edx
je     80646b1 <do_iplink+0x16e1>
mov    0x4(%ebx),%eax
mov    %edx,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80646ac <do_iplink+0x16dc>
mov    0x8096370,%ecx
mov    (%ebx),%eax
test   %ecx,%ecx
jne    806469c <do_iplink+0x16cc>
mov    %eax,0x8096370
add    $0x4,%ebx
sub    $0x1,%esi
test   %esi,%esi
jg     8064528 <do_iplink+0x1558>
mov    0x8096374,%eax
cmp    $0x11,%eax
je     8064670 <do_iplink+0x16a0>
test   %eax,%eax
je     8064670 <do_iplink+0x16a0>
test   $0xfffffffd,%eax
je     8064689 <do_iplink+0x16b9>
cmp    $0xa,%eax
je     8064660 <do_iplink+0x1690>
test   %eax,%eax
je     8064660 <do_iplink+0x1690>
mov    0x2c(%esp),%ebx
xor    %eax,%eax
mov    0x8095c80,%edi
test   %ebx,%ebx
jne    8064608 <do_iplink+0x1638>
jmp    8064650 <do_iplink+0x1680>
cmp    %eax,%esi
je     80645f7 <do_iplink+0x1627>
lea    0x10(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x8087b54,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,%edx
mov    %edi,%eax
call   8063e10 <do_iplink+0xe40>
mov    (%ebx),%ebx
test   %ebx,%ebx
je     8064650 <do_iplink+0x1680>
mov    %esi,%eax
mov    0x8095c98,%edx
mov    0x4(%ebx),%esi
test   %edx,%edx
je     80645d0 <do_iplink+0x1600>
mov    0x8095c90,%eax
mov    %esi,0xc(%esp)
movl   $0x8087b4b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x14(%esp)
lea    0x10(%ebx),%eax
mov    %eax,0x10(%esp)
mov    %edi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,%edx
mov    %edi,%eax
call   8063e10 <do_iplink+0xe40>
mov    (%ebx),%ebx
test   %ebx,%ebx
jne    8064606 <do_iplink+0x1636>
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%eax
call   8064200 <do_iplink+0x1230>
jmp    80645bb <do_iplink+0x15eb>
xchg   %ax,%ax
lea    0x2c(%esp),%eax
call   8064370 <do_iplink+0x13a0>
mov    0x8096374,%eax
test   $0xfffffffd,%eax
jne    80645aa <do_iplink+0x15da>
lea    0x2c(%esp),%eax
call   8063fd0 <do_iplink+0x1000>
mov    0x8096374,%eax
jmp    80645aa <do_iplink+0x15da>
mov    %eax,0x4(%esp)
movl   $0x8085e82,(%esp)
call   8080150 <duparg2>
call   8063db0 <do_iplink+0xde0>
call   8080010 <incomplete_command>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    8064780 <do_multiaddr+0xc0>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80647cc <do_multiaddr+0x10c>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80647bf <do_multiaddr+0xff>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8064735 <do_multiaddr+0x75>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064748 <do_multiaddr+0x88>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8064500 <do_iplink+0x1530>
lea    0x0(%esi),%esi
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8064735 <do_multiaddr+0x75>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064790 <do_multiaddr+0xd0>
call   8063db0 <do_iplink+0xde0>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %edx,%edx
pop    %ebx
xor    %eax,%eax
pop    %esi
jmp    8064500 <do_iplink+0x1530>
xchg   %ax,%ax
mov    (%ebx),%eax
movl   $0x8087a9c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x4(%ebx),%ecx
mov    $0x15,%al
lea    -0x1(%esi),%edx
call   804c3a1 <__sprintf_chk@plt+0x7f1>
lea    0x4(%ebx),%ecx
mov    $0x14,%al
lea    -0x1(%esi),%edx
call   804c3a1 <__sprintf_chk@plt+0x7f1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x8095c94,%eax
mov    0x44(%esp),%ebx
mov    0x48(%esp),%esi
test   %eax,%eax
jne    80648c8 <do_multiaddr+0x208>
movzwl 0x4(%ebx),%edx
lea    -0x18(%edx),%eax
cmp    $0x1,%ax
jbe    80648e1 <do_multiaddr+0x221>
lea    -0x10(%edx),%eax
cmp    $0x1,%ax
jbe    8064a60 <do_multiaddr+0x3a0>
lea    -0x14(%edx),%eax
cmp    $0x1,%ax
jbe    8064948 <do_multiaddr+0x288>
lea    -0x48(%edx),%eax
cmp    $0x1,%ax
jbe    8064a18 <do_multiaddr+0x358>
lea    -0x1c(%edx),%eax
cmp    $0x2,%ax
jbe    8064990 <do_multiaddr+0x2d0>
cmp    $0x34,%dx
je     8064af0 <do_multiaddr+0x430>
lea    -0x20(%edx),%eax
cmp    $0x1,%ax
jbe    8064b38 <do_multiaddr+0x478>
cmp    $0x50,%dx
je     8064b80 <do_multiaddr+0x4c0>
cmp    $0xf,%dx
je     8064bc4 <do_multiaddr+0x504>
mov    %edx,%eax
and    $0xfffffff7,%eax
sub    $0x24,%eax
cmp    $0x1,%ax
jbe    8064ae8 <do_multiaddr+0x428>
lea    -0x28(%edx),%eax
cmp    $0x1,%ax
jbe    8064ae8 <do_multiaddr+0x428>
lea    -0x1(%edx),%eax
xor    %edi,%edi
cmp    $0x2,%ax
jbe    806493a <do_multiaddr+0x27a>
movzwl 0x6(%ebx),%eax
mov    %edx,0x10(%esp)
mov    %eax,0x14(%esp)
mov    (%ebx),%eax
movl   $0x8087bf0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806493a <do_multiaddr+0x27a>
lea    0x0(%esi),%esi
mov    %esi,(%esp)
call   80809f0 <print_timestamp>
movzwl 0x4(%ebx),%edx
lea    -0x18(%edx),%eax
cmp    $0x1,%ax
ja     806480c <do_multiaddr+0x14c>
mov    (%ebx),%eax
sub    $0x1c,%eax
js     8064c18 <do_multiaddr+0x558>
movzbl 0x10(%ebx),%eax
add    $0xffffff80,%eax
cmp    $0x1,%al
jbe    80649f0 <do_multiaddr+0x330>
mov    0x80989ac,%eax
test   %eax,%eax
je     8064924 <do_multiaddr+0x264>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b65,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8052cf0 <print_route>
add    $0x30,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x80989ac,%eax
test   %eax,%eax
je     8064971 <do_multiaddr+0x2b1>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b74,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8050260 <print_addrinfo>
add    $0x30,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x8095ca8,%eax
test   %eax,%eax
je     80649a3 <do_multiaddr+0x2e3>
movzbl 0x10(%ebx),%edx
xor    %edi,%edi
cmp    %edx,%eax
jne    806493a <do_multiaddr+0x27a>
mov    0x80989ac,%edi
test   %edi,%edi
je     80649cd <do_multiaddr+0x30d>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b87,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   805dfe0 <print_neigh>
add    $0x30,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x80989ac,%eax
test   %eax,%eax
jne    8064ac0 <do_multiaddr+0x400>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8065240 <print_mroute>
jmp    806493a <do_multiaddr+0x27a>
mov    0x80989ac,%eax
test   %eax,%eax
je     8064a41 <do_multiaddr+0x381>
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b7b,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8051990 <print_addrlabel>
add    $0x30,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x40(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   807d0f0 <ll_remember_index>
mov    0x80989ac,%eax
test   %eax,%eax
je     8064aa1 <do_multiaddr+0x3e1>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b6d,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804ec20 <print_linkinfo>
jmp    806493a <do_multiaddr+0x27a>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b5c,(%esp)
call   804b710 <fwrite@plt>
jmp    80649fd <do_multiaddr+0x33d>
lea    0x0(%esi),%esi
xor    %edi,%edi
jmp    806493a <do_multiaddr+0x27a>
nop
mov    0x80989ac,%ecx
test   %ecx,%ecx
je     8064b1a <do_multiaddr+0x45a>
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b8f,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8065be0 <print_prefix>
jmp    806493a <do_multiaddr+0x27a>
lea    0x0(%esi),%esi
mov    0x80989ac,%edx
test   %edx,%edx
je     8064b62 <do_multiaddr+0x4a2>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b98,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8056ed0 <print_rule>
jmp    806493a <do_multiaddr+0x27a>
lea    0x0(%esi),%esi
mov    0x80989ac,%eax
test   %eax,%eax
je     8064ba9 <do_multiaddr+0x4e9>
mov    %esi,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087b9f,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%esp),%eax
xor    %edi,%edi
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8079180 <print_netconf>
jmp    806493a <do_multiaddr+0x27a>
mov    0x10(%ebx),%eax
mov    0x14(%ebx),%edi
mov    %eax,0x2c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804b830 <localtime@plt>
mov    %eax,(%esp)
call   804b6b0 <asctime@plt>
mov    %eax,(%esp)
mov    %eax,%ebx
call   804b880 <strlen@plt>
movb   $0x0,-0x1(%ebx,%eax,1)
mov    %edi,0x10(%esp)
xor    %edi,%edi
mov    %ebx,0xc(%esp)
movl   $0x8087ba9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806493a <do_multiaddr+0x27a>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    $0xffffffff,%edi
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806493a <do_multiaddr+0x27a>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edi
movl   $0x80941e0,(%esp)
mov    0x54(%esp),%ebp
call   807d670 <rtnl_close>
movl   $0x1,(%esp)
call   80516b0 <ipaddr_reset_filter>
call   8056b40 <iproute_reset_filter>
call   8065ae0 <ipmroute_reset_filter>
call   805f2e0 <ipneigh_reset_filter>
test   %edi,%edi
jle    8064ff7 <do_ipmonitor+0x3a7>
movl   $0x0,0x24(%esp)
mov    $0xfffffff7,%esi
xor    %ebx,%ebx
movl   $0x0,0x20(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
jmp    8064ce9 <do_ipmonitor+0x99>
nop
sub    $0x1,%edi
lea    0x4(%ebp),%eax
je     8065013 <do_ipmonitor+0x3c3>
mov    0x4(%ebp),%ebx
sub    $0x1,%edi
test   %edi,%edi
lea    0x4(%eax),%ebp
jle    8064d31 <do_ipmonitor+0xe1>
movl   $0x8087bbf,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8064cd0 <do_ipmonitor+0x80>
movl   $0x8082d31,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064e48 <do_ipmonitor+0x1f8>
sub    $0x1,%edi
mov    %ebp,%eax
test   %edi,%edi
movl   $0x1,0x80989ac
00
lea    0x4(%eax),%ebp
jg     8064ce9 <do_ipmonitor+0x99>
mov    0x18(%esp),%eax
or     0x14(%esp),%esi
test   %eax,%eax
je     8064d65 <do_ipmonitor+0x115>
mov    0x8095ca8,%eax
mov    %esi,%edx
test   %eax,%eax
sete   %cl
or     $0x10,%edx
test   $0xfffffffd,%eax
cmove  %edx,%esi
cmp    $0xa,%eax
je     8064f68 <do_ipmonitor+0x318>
test   %cl,%cl
jne    8064f68 <do_ipmonitor+0x318>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8064d95 <do_ipmonitor+0x145>
mov    0x8095ca8,%eax
mov    %esi,%edx
test   %eax,%eax
sete   %cl
or     $0x40,%edx
test   $0xfffffffd,%eax
cmove  %edx,%esi
cmp    $0xa,%eax
je     8064f28 <do_ipmonitor+0x2d8>
test   %cl,%cl
jne    8064f28 <do_ipmonitor+0x2d8>
mov    0x28(%esp),%ebp
test   %ebp,%ebp
je     8064dc5 <do_ipmonitor+0x175>
mov    0x8095ca8,%eax
mov    %esi,%edx
test   %eax,%eax
sete   %cl
or     $0x20,%edx
test   $0xfffffffd,%eax
cmove  %edx,%esi
cmp    $0xa,%eax
je     8064f40 <do_ipmonitor+0x2f0>
test   %cl,%cl
jne    8064f40 <do_ipmonitor+0x2f0>
mov    0x2c(%esp),%edi
test   %edi,%edi
je     8064de8 <do_ipmonitor+0x198>
mov    0x8095ca8,%eax
cmp    $0xa,%eax
je     8064f58 <do_ipmonitor+0x308>
test   %eax,%eax
je     8064f58 <do_ipmonitor+0x308>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%edx
mov    %esi,%eax
mov    0x24(%esp),%ecx
or     $0x4,%eax
test   %edx,%edx
cmovne %eax,%esi
test   %ecx,%ecx
jne    8064ea0 <do_ipmonitor+0x250>
test   %ebx,%ebx
je     8064ed5 <do_ipmonitor+0x285>
movl   $0x80843db,0x4(%esp)
mov    %ebx,(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
je     80650a3 <do_ipmonitor+0x453>
mov    0x8095c80,%edx
movl   $0x80647e0,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x8(%esp)
call   807e830 <rtnl_from_file>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80841a0,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064e70 <do_ipmonitor+0x220>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x14(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x808b938,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064f7f <do_ipmonitor+0x32f>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x18(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095ca8,%eax
mov    %esi,%edx
test   %eax,%eax
sete   %cl
or     $0x800000,%edx
test   $0xfffffffd,%eax
cmove  %edx,%esi
cmp    $0xa,%eax
je     8064ec7 <do_ipmonitor+0x277>
test   %cl,%cl
je     8064e02 <do_ipmonitor+0x1b2>
or     $0x1000000,%esi
test   %ebx,%ebx
jne    8064e0a <do_ipmonitor+0x1ba>
mov    %esi,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d910 <rtnl_open>
test   %eax,%eax
js     8065097 <do_ipmonitor+0x447>
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x8095c80,%eax
movl   $0x80647e0,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e530 <rtnl_listen>
test   %eax,%eax
js     8065040 <do_ipmonitor+0x3f0>
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x28(%esp),%ebp
or     $0x400,%esi
test   %ebp,%ebp
je     8064dc5 <do_ipmonitor+0x175>
jmp    8064d9d <do_ipmonitor+0x14d>
nop
mov    0x2c(%esp),%edi
or     $0x200,%esi
test   %edi,%edi
je     8064de8 <do_ipmonitor+0x198>
jmp    8064dcd <do_ipmonitor+0x17d>
nop
or     $0x20000,%esi
jmp    8064de8 <do_ipmonitor+0x198>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
or     $0x100,%esi
test   %eax,%eax
jne    8064d6d <do_ipmonitor+0x11d>
jmp    8064d95 <do_ipmonitor+0x145>
movl   $0x8082da2,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064fa7 <do_ipmonitor+0x357>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x1c(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x8082da1,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8064fcf <do_ipmonitor+0x37f>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x28(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x8085fe2,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8065018 <do_ipmonitor+0x3c8>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x2c(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x0,0x20(%esp)
xor    %ebx,%ebx
mov    $0xfffffff7,%esi
movl   $0x0,0x24(%esp)
jmp    8064de8 <do_ipmonitor+0x198>
call   8080010 <incomplete_command>
movl   $0x8087bc4,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806504c <do_ipmonitor+0x3fc>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x20(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x8082dae,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8065173 <do_ipmonitor+0x523>
mov    0x0(%ebp),%eax
cmpb   $0x61,(%eax)
jne    80650bb <do_ipmonitor+0x46b>
cmpb   $0x6c,0x1(%eax)
jne    80650bb <do_ipmonitor+0x46b>
cmpb   $0x6c,0x2(%eax)
jne    80650bb <do_ipmonitor+0x46b>
cmpb   $0x0,0x3(%eax)
jne    80650bb <do_ipmonitor+0x46b>
movl   $0x1,0x80989ac
00
mov    %ebp,%eax
mov    $0xfffffff7,%esi
jmp    8064cdf <do_ipmonitor+0x8f>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8087be1,(%esp)
call   804b700 <perror@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8065184 <do_ipmonitor+0x534>
mov    0x8095c40,%eax
movl   $0x3d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087c14,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087c54,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087c94,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087bca,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    %ebp,%eax
xor    %esi,%esi
movl   $0x1,0x24(%esp)
jmp    8064cdf <do_ipmonitor+0x8f>
mov    0x0(%ebp),%eax
movl   $0x8087cb8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x47,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087cec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087d34,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084a28,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x28c,%esp
mov    0x2a4(%esp),%ebp
mov    %gs:0x14,%eax
mov    %eax,0x27c(%esp)
xor    %eax,%eax
mov    0x2a8(%esp),%ebx
movzwl 0x4(%ebp),%eax
mov    0x0(%ebp),%edx
lea    -0x18(%eax),%ecx
cmp    $0x1,%cx
movzwl 0x6(%ebp),%ecx
ja     80652d8 <print_mroute+0x98>
test   $0x2,%cl
je     80652d8 <print_mroute+0x98>
sub    $0x1c,%edx
js     806575e <print_mroute+0x51e>
movzbl 0x17(%ebp),%eax
cmp    $0x5,%al
je     8065328 <print_mroute+0xe8>
lea    0x17c(%esp),%edx
mov    %edx,0x4(%esp)
movl   $0x40,0x8(%esp)
mov    %eax,(%esp)
call   8059a00 <rtnl_rtntype_n2a>
movl   $0x8087d88,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8065303 <print_mroute+0xc3>
lea    0x0(%esi),%esi
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %ecx,0x14(%esp)
mov    %edx,0xc(%esp)
movl   $0x8087d60,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
mov    0x27c(%esp),%esi
xor    %gs:0x14,%esi
jne    8065789 <print_mroute+0x549>
add    $0x28c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x1c(%ebp),%eax
mov    %eax,0x8(%esp)
lea    0x34(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x70(%esp),%eax
movzbl 0x14(%ebp),%edx
test   %eax,%eax
je     8065356 <print_mroute+0x116>
mov    0x4(%eax),%edx
mov    0x80989c0,%eax
test   %eax,%eax
jle    8065368 <print_mroute+0x128>
cmp    %edx,%eax
je     8065368 <print_mroute+0x128>
xor    %eax,%eax
jmp    8065303 <print_mroute+0xc3>
nop
mov    0x40(%esp),%eax
test   %eax,%eax
je     80656aa <print_mroute+0x46a>
mov    0x4(%eax),%esi
mov    0x80989c8,%eax
test   %eax,%eax
je     8065384 <print_mroute+0x144>
cmp    %eax,%esi
jne    8065363 <print_mroute+0x123>
mov    0x80989c4,%eax
test   %eax,%eax
jne    80655f0 <print_mroute+0x3b0>
mov    0x38(%esp),%eax
test   %eax,%eax
je     80653c0 <print_mroute+0x180>
movswl 0x80989ce,%edx
test   %dx,%dx
jle    80653c0 <print_mroute+0x180>
add    $0x4,%eax
mov    %edx,0x8(%esp)
movl   $0x80989cc,0x4(%esp)
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8065363 <print_mroute+0x123>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     80653f3 <print_mroute+0x1b3>
movswl 0x80989f6,%edx
test   %dx,%dx
jle    80653f3 <print_mroute+0x1b3>
add    $0x4,%eax
mov    %edx,0x8(%esp)
movl   $0x80989f4,0x4(%esp)
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8065363 <print_mroute+0x123>
xor    %eax,%eax
cmpb   $0x80,0x10(%ebp)
setne  %al
cmpw   $0x19,0x4(%ebp)
mov    %eax,%edi
lea    0x2(,%edi,8),%edi
je     8065714 <print_mroute+0x4d4>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     80656b1 <print_mroute+0x471>
lea    0x7c(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
mov    %edx,0x8(%esp)
lea    0x17c(%esp),%ebp
movl   $0x100,0x10(%esp)
movzwl (%eax),%eax
mov    %edi,(%esp)
sub    $0x4,%eax
mov    %eax,0x4(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x8087ddc,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x14(%esp)
call   804b540 <__snprintf_chk@plt>
mov    $0x100,%edx
mov    %eax,0x28(%esp)
sub    %eax,%edx
mov    0x38(%esp),%eax
test   %eax,%eax
je     80656f5 <print_mroute+0x4b5>
lea    0x7c(%esp),%ecx
mov    %ecx,0xc(%esp)
lea    0x4(%eax),%ecx
movl   $0x100,0x10(%esp)
mov    %ecx,0x8(%esp)
movzwl (%eax),%eax
mov    %edi,(%esp)
mov    %edx,0x2c(%esp)
sub    $0x4,%eax
mov    %eax,0x4(%esp)
call   8080470 <rt_addr_n2a>
mov    0x2c(%esp),%edx
movl   $0x808893b,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%esp),%eax
add    %ebp,%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    %ebp,0xc(%esp)
movl   $0x8087dec,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %esi,%esi
je     8065685 <print_mroute+0x445>
mov    %esi,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8087df8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x58(%esp),%eax
test   %eax,%eax
je     8065608 <print_mroute+0x3c8>
movzwl (%eax),%edi
lea    0x4(%eax),%esi
sub    $0x4,%edi
cmp    $0x7,%edi
jbe    8065608 <print_mroute+0x3c8>
movzwl 0x4(%eax),%eax
cmp    %eax,%edi
jl     8065608 <print_mroute+0x3c8>
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087e4f,(%esp)
call   804b710 <fwrite@plt>
jmp    80655bd <print_mroute+0x37d>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x8087e0b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%edi
add    %eax,%esi
cmp    $0x7,%edi
jbe    8065608 <print_mroute+0x3c8>
movzwl (%esi),%eax
cmp    %edi,%eax
jg     8065608 <print_mroute+0x3c8>
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movzbl 0x3(%esi),%eax
cmp    $0x1,%al
ja     8065588 <print_mroute+0x348>
mov    %ebx,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
jmp    80655a4 <print_mroute+0x364>
xchg   %ax,%ax
movzbl 0x10(%ebp),%edx
cmp    %edx,%eax
je     8065391 <print_mroute+0x151>
xor    %eax,%eax
xchg   %ax,%ax
jmp    8065303 <print_mroute+0xc3>
lea    0x0(%esi),%esi
mov    0x8095ca4,%eax
test   %eax,%eax
je     8065666 <print_mroute+0x426>
mov    0x78(%esp),%esi
test   %esi,%esi
je     8065666 <print_mroute+0x426>
mov    0xc(%esi),%eax
mov    0x10(%esi),%edx
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
mov    0x4(%esi),%eax
mov    0x8(%esi),%edx
movl   $0x8087e15,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c90,%eax
mov    %edx,0x14(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esi),%eax
mov    0x14(%esi),%edx
mov    %eax,%edi
or     %edx,%edi
jne    8065739 <print_mroute+0x4f9>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
jmp    8065303 <print_mroute+0xc3>
mov    %ebx,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087dff,(%esp)
call   804b710 <fwrite@plt>
jmp    8065536 <print_mroute+0x2f6>
xor    %esi,%esi
jmp    8065377 <print_mroute+0x137>
mov    $0x202c,%edx
mov    %dx,0x184(%esp)
lea    0x17c(%esp),%ebp
mov    $0xf6,%edx
movl   $0x6b6e7528,0x17c(%esp)
6b
movl   $0x6e776f6e,0x180(%esp)
6e
movb   $0x0,0x186(%esp)
movl   $0xa,0x28(%esp)
jmp    8065483 <print_mroute+0x243>
mov    0x28(%esp),%eax
movl   $0x8087de2,0x8(%esp)
mov    %edx,0x4(%esp)
add    %ebp,%eax
mov    %eax,(%esp)
call   804b930 <snprintf@plt>
jmp    80654ee <print_mroute+0x2ae>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    8065410 <print_mroute+0x1d0>
mov    %edx,0xc(%esp)
mov    %eax,0x10(%esp)
movl   $0x8087e32,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8065666 <print_mroute+0x426>
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8065303 <print_mroute+0xc3>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
mov    $0x17,%ecx
push   %edi
push   %esi
mov    %edx,%esi
mov    $0x80989c0,%edx
push   %ebx
mov    %edx,%edi
mov    %eax,%ebx
xor    %eax,%eax
sub    $0x3c,%esp
mov    $0xffffffff,%edx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%ecx
mov    $0xffffffff,%eax
mov    %ax,0x80989ce
mov    %dx,0x80989f6
test   %ecx,%ecx
jne    8065a20 <print_mroute+0x7e0>
movl   $0x80,0x80989c4
00
movl   $0xfd,0x80989c0
00
movl   $0x2,0x1c(%esp)
test   %ebx,%ebx
jle    8065a98 <print_mroute+0x858>
movl   $0x0,0x18(%esp)
lea    0x2c(%esp),%edi
jmp    8065869 <print_mroute+0x629>
lea    0x0(%esi),%esi
sub    $0x1,%ebx
lea    0x4(%esi),%ebp
je     8065ad5 <print_mroute+0x895>
mov    0x4(%esi),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   80817b0 <rtnl_rttable_a2n>
test   %eax,%eax
je     8065990 <print_mroute+0x750>
mov    0x4(%esi),%eax
cmpb   $0x61,(%eax)
jne    80659a0 <print_mroute+0x760>
cmpb   $0x6c,0x1(%eax)
jne    80659a0 <print_mroute+0x760>
cmpb   $0x6c,0x2(%eax)
jne    80659a0 <print_mroute+0x760>
cmpb   $0x0,0x3(%eax)
jne    80659a0 <print_mroute+0x760>
movl   $0x0,0x80989c0
00
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%ebp),%esi
jle    80658d8 <print_mroute+0x698>
movl   $0x8082d54,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8065808 <print_mroute+0x5c8>
mov    (%esi),%eax
cmpb   $0x69,(%eax)
je     8065958 <print_mroute+0x718>
movl   $0x80841d0,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80659c0 <print_mroute+0x780>
sub    $0x1,%ebx
lea    0x4(%esi),%ebp
je     8065ad5 <print_mroute+0x895>
mov    0x1c(%esp),%eax
sub    $0x1,%ebx
mov    %eax,0x8(%esp)
mov    0x4(%esi),%eax
lea    0x4(%ebp),%esi
movl   $0x80989f4,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
test   %ebx,%ebx
jg     8065869 <print_mroute+0x629>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x18(%esp),%eax
test   %eax,%eax
je     8065901 <print_mroute+0x6c1>
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
je     8065aa9 <print_mroute+0x869>
mov    %eax,0x80989c8
mov    0x80989c4,%eax
movl   $0x1a,0x8(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x4(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8065a68 <print_mroute+0x828>
mov    0x8095c80,%eax
movl   $0x8065240,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     8065a37 <print_mroute+0x7f7>
movl   $0x0,(%esp)
call   804b800 <exit@plt>
nop
cmpb   $0x69,0x1(%eax)
jne    806588a <print_mroute+0x64a>
cmpb   $0x66,0x2(%eax)
jne    806588a <print_mroute+0x64a>
cmpb   $0x0,0x3(%eax)
jne    806588a <print_mroute+0x64a>
sub    $0x1,%ebx
lea    0x4(%esi),%ebp
je     8065ad5 <print_mroute+0x895>
mov    0x4(%esi),%eax
mov    %eax,0x18(%esp)
jmp    806585f <print_mroute+0x61f>
xchg   %ax,%ax
mov    0x2c(%esp),%eax
mov    %eax,0x80989c0
jmp    806585f <print_mroute+0x61f>
xchg   %ax,%ax
mov    $0x8082d28,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8065a88 <print_mroute+0x848>
call   80651c0 <do_ipmonitor+0x570>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esi),%eax
cmpb   $0x74,(%eax)
jne    80659e4 <print_mroute+0x7a4>
cmpb   $0x6f,0x1(%eax)
jne    80659e4 <print_mroute+0x7a4>
cmpb   $0x0,0x2(%eax)
jne    80659e4 <print_mroute+0x7a4>
sub    $0x1,%ebx
lea    0x4(%esi),%edx
je     8065ad5 <print_mroute+0x895>
mov    0x4(%esi),%eax
mov    %edx,%esi
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80659b4 <print_mroute+0x774>
mov    0x1c(%esp),%eax
mov    %esi,%ebp
mov    %eax,0x8(%esp)
mov    (%esi),%eax
movl   $0x80989cc,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
jmp    806585f <print_mroute+0x61f>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x81,0x80989c4
00
movl   $0xa,0x1c(%esp)
jmp    80657ec <print_mroute+0x5ac>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
mov    $0x1,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x808449a,(%esp)
call   80800b0 <invarg>
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
jmp    8065901 <print_mroute+0x6c1>
mov    0x18(%esp),%eax
movl   $0x8082fbd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8065a79 <print_mroute+0x839>
call   8080010 <incomplete_command>
lea    0x0(%esi),%esi
mov    $0x80989c0,%edx
xor    %eax,%eax
push   %edi
mov    $0x17,%ecx
mov    %edx,%edi
mov    $0xffffffff,%edx
rep stos %eax,%es:(%edi)
mov    $0xffffffff,%eax
mov    %ax,0x80989ce
mov    %dx,0x80989f6
pop    %edi
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    8065b98 <do_multiroute+0x88>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8065b4d <do_multiroute+0x3d>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8065b60 <do_multiroute+0x50>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8065790 <print_mroute+0x550>
lea    0x0(%esi),%esi
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8065b4d <do_multiroute+0x3d>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8065ba8 <do_multiroute+0x98>
call   80651c0 <do_ipmonitor+0x570>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %edx,%edx
pop    %ebx
xor    %eax,%eax
pop    %esi
jmp    8065790 <print_mroute+0x550>
xchg   %ax,%ax
mov    (%ebx),%eax
movl   $0x8087dac,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x17c,%esp
mov    0x8095ca8,%ecx
mov    0x194(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x16c(%esp)
xor    %eax,%eax
mov    0x198(%esp),%esi
movzwl 0x4(%ebx),%edx
mov    (%ebx),%eax
cmp    $0x34,%dx
jne    8065c88 <print_prefix+0xa8>
sub    $0x1c,%eax
js     8065e63 <print_prefix+0x283>
test   %ecx,%ecx
je     8065c50 <print_prefix+0x70>
cmp    $0xa,%ecx
je     8065c50 <print_prefix+0x70>
xor    %eax,%eax
mov    0x16c(%esp),%edi
xor    %gs:0x14,%edi
jne    8065e8e <print_prefix+0x2ae>
add    $0x17c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x10(%ebx),%edx
cmp    $0xa,%dl
jne    8065cc0 <print_prefix+0xe0>
movzbl 0x18(%ebx),%edx
cmp    $0x3,%dl
je     8065cd0 <print_prefix+0xf0>
mov    %edx,0xc(%esp)
movl   $0x8087e74,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8065c2d <print_prefix+0x4d>
nop
movzwl 0x6(%ebx),%ecx
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %edx,0x10(%esp)
movl   $0x8087e56,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
jmp    8065c2d <print_prefix+0x4d>
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
movl   $0x8087eb0,0x8(%esp)
jmp    8065c6e <print_prefix+0x8e>
xchg   %ax,%ax
mov    %eax,0xc(%esp)
lea    0x1c(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x24(%esp),%eax
movl   $0x11,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087e86,(%esp)
call   804b710 <fwrite@plt>
mov    0x28(%esp),%ebp
test   %ebp,%ebp
je     8065d59 <print_prefix+0x179>
lea    0x6c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
add    $0x4,%ebp
movl   $0x100,0x10(%esp)
mov    %edx,0xc(%esp)
mov    %ebp,0x8(%esp)
movl   $0x10,0x4(%esp)
movl   $0xa,(%esp)
call   8080470 <rt_addr_n2a>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movzbl 0x19(%ebx),%eax
movl   $0x8083fbc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x1a(%ebx),%eax
test   $0x1,%al
jne    8065e3a <print_prefix+0x25a>
test   $0x2,%al
jne    8065e15 <print_prefix+0x235>
mov    0x2c(%esp),%ebx
test   %ebx,%ebx
je     8065df6 <print_prefix+0x216>
mov    0x8(%ebx),%eax
movl   $0x8087e98,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
movl   $0x8087ea2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
jmp    8065c2d <print_prefix+0x4d>
mov    %esi,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087e8e,(%esp)
call   804b710 <fwrite@plt>
jmp    8065db0 <print_prefix+0x1d0>
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084005,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x1a(%ebx),%eax
jmp    8065dac <print_prefix+0x1cc>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    8065c2d <print_prefix+0x4d>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087ed0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087f04,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087f44,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087f84,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087fac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    $0x20,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c,%esp
test   $0x1,%edi
jne    8066238 <print_prefix+0x658>
test   $0x2,%cl
jne    806624b <print_prefix+0x66b>
mov    %esi,%edx
xor    %eax,%eax
and    $0xfffffffc,%edx
movl   $0x0,(%ecx,%eax,1)
add    $0x4,%eax
cmp    %edx,%eax
jb     8065fae <print_prefix+0x3ce>
add    %eax,%ecx
test   $0x2,%esi
je     8065fcf <print_prefix+0x3ef>
xor    %eax,%eax
add    $0x2,%ecx
mov    %ax,-0x2(%ecx)
and    $0x1,%esi
je     8065fd7 <print_prefix+0x3f7>
movb   $0x0,(%ecx)
orw    $0x1000,0x10(%edi)
test   %ebx,%ebx
jg     8066030 <print_prefix+0x450>
jmp    80660d0 <print_prefix+0x4f0>
xchg   %ax,%ax
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     80662de <print_prefix+0x6fe>
movl   $0x80880d2,0x4(%esp)
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066180 <print_prefix+0x5a0>
movzwl 0x10(%edi),%eax
test   $0x2,%al
jne    80662e3 <print_prefix+0x703>
or     $0x1,%eax
mov    %ax,0x10(%edi)
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%esi),%ebp
jle    80660d0 <print_prefix+0x4f0>
movl   $0x8085ebc,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8065fe8 <print_prefix+0x408>
mov    0x40(%esp),%edx
test   %edx,%edx
je     80660e0 <print_prefix+0x500>
movl   $0x808802c,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80660e0 <print_prefix+0x500>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     80662de <print_prefix+0x6fe>
mov    0x4(%ebp),%eax
cmpb   $0x0,(%eax)
je     80660a6 <print_prefix+0x4c6>
lea    0x1c(%esp),%ecx
mov    %ecx,0x4(%esp)
movl   $0xa,0x8(%esp)
mov    %eax,(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%ecx
cmpb   $0x0,(%ecx)
je     80661e0 <print_prefix+0x600>
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   804b530 <getpwnam@plt>
test   %eax,%eax
je     8066314 <print_prefix+0x734>
mov    0x8(%eax),%eax
sub    $0x1,%ebx
mov    0x40(%esp),%edx
test   %ebx,%ebx
lea    0x4(%esi),%ebp
mov    %eax,(%edx)
jg     8066030 <print_prefix+0x450>
lea    0x0(%esi),%esi
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
test   %eax,%eax
je     8066158 <print_prefix+0x578>
movl   $0x808ca53,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066158 <print_prefix+0x578>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     80662de <print_prefix+0x6fe>
mov    0x4(%ebp),%eax
cmpb   $0x0,(%eax)
je     8066137 <print_prefix+0x557>
lea    0x1c(%esp),%edx
movl   $0xa,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%ecx
cmpb   $0x0,(%ecx)
je     806614a <print_prefix+0x56a>
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   804bb40 <getgrnam@plt>
test   %eax,%eax
je     8066385 <print_prefix+0x7a5>
mov    0x8(%eax),%eax
mov    0x44(%esp),%edx
mov    %eax,(%edx)
jmp    8066022 <print_prefix+0x442>
lea    0x0(%esi),%esi
movl   $0x80880dc,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80661b8 <print_prefix+0x5d8>
andw   $0xefff,0x10(%edi)
mov    %ebp,%esi
jmp    8066022 <print_prefix+0x442>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80880d7,0x4(%esp)
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066362 <print_prefix+0x782>
movzwl 0x10(%edi),%eax
test   $0x1,%al
jne    80662e3 <print_prefix+0x703>
or     $0x2,%eax
mov    %ax,0x10(%edi)
jmp    8066022 <print_prefix+0x442>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80880e0,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80661f0 <print_prefix+0x610>
orw    $0x2000,0x10(%edi)
mov    %ebp,%esi
jmp    8066022 <print_prefix+0x442>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%ecx
mov    %eax,(%ecx)
jmp    8066022 <print_prefix+0x442>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80880eb,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066214 <print_prefix+0x634>
orw    $0x4000,0x10(%edi)
mov    %ebp,%esi
jmp    8066022 <print_prefix+0x442>
movl   $0x8088058,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806625c <print_prefix+0x67c>
orw    $0x100,0x10(%edi)
mov    %ebp,%esi
jmp    8066022 <print_prefix+0x442>
lea    0x1(%edi),%ecx
mov    $0x1f,%si
test   $0x2,%cl
movb   $0x0,(%edi)
je     8065fa7 <print_prefix+0x3c7>
xor    %eax,%eax
add    $0x2,%ecx
mov    %ax,-0x2(%ecx)
sub    $0x2,%esi
jmp    8065fa7 <print_prefix+0x3c7>
movl   $0x8085e82,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066297 <print_prefix+0x6b7>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     80662de <print_prefix+0x6fe>
movl   $0xf,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
jmp    8066022 <print_prefix+0x442>
movl   $0x808c3df,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066344 <print_prefix+0x764>
sub    $0x1,%ebx
lea    0x4(%ebp),%esi
je     80662de <print_prefix+0x6fe>
cmpb   $0x0,(%edi)
jne    8066373 <print_prefix+0x793>
movl   $0x10,0x8(%esp)
mov    (%esi),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b980 <strncpy@plt>
jmp    8066022 <print_prefix+0x442>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085ba0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x4(%ebp),%eax
movl   $0x8088031,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8082d28,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8066396 <print_prefix+0x7b6>
mov    %ebp,%esi
jmp    80662ba <print_prefix+0x6da>
mov    0x4(%ebp),%eax
movl   $0x8085ee2,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8066323 <print_prefix+0x743>
mov    (%esi),%eax
movl   $0x808c3df,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
mov    0x4(%ebp),%eax
movl   $0x8088044,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8066323 <print_prefix+0x743>
call   8065ea0 <print_prefix+0x2c0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0xbc,%esp
lea    0x33(%esp),%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
movl   $0x8088064,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %gs:0x14,%ecx
mov    %ecx,0xac(%esp)
xor    %ecx,%ecx
call   804bbb0 <__sprintf_chk@plt>
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
mov    %eax,%edi
js     8066480 <print_prefix+0x8a0>
lea    0x5c(%esp),%esi
movl   $0x4f,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b570 <read@plt>
mov    %edi,(%esp)
mov    %eax,0x1c(%esp)
call   804bb60 <close@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
js     8066503 <print_prefix+0x923>
lea    0x2c(%esp),%eax
movb   $0x0,0x5c(%esp,%edx,1)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804bb20 <strtol@plt>
mov    0x2c(%esp),%edx
cmpb   $0xa,(%edx)
jne    80664d8 <print_prefix+0x8f8>
mov    %eax,0x0(%ebp)
xor    %esi,%esi
mov    0xac(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    8066541 <print_prefix+0x961>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x8088079,%edi
mov    $0xa,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
mov    $0xffffffff,%esi
seta   %dl
setb   %al
cmp    %al,%dl
je     806645f <print_prefix+0x87f>
call   804b970 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x8088083,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806645f <print_prefix+0x87f>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
mov    $0xffffffff,%esi
mov    %ebx,0xc(%esp)
movl   $0x808809c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806645f <print_prefix+0x87f>
call   804b970 <__errno_location@plt>
mov    $0xffffffff,%esi
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b7d0 <strerror@plt>
mov    %ebx,0xc(%esp)
movl   $0x8088090,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806645f <print_prefix+0x87f>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
movl   $0x80880b0,(%esp)
movl   $0xffffffff,0x18(%esp)
movl   $0xffffffff,0x1c(%esp)
call   804bb80 <opendir@plt>
test   %eax,%eax
mov    %eax,%esi
je     8066745 <print_prefix+0xb65>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
je     80666a6 <print_prefix+0xac6>
cmpb   $0x2e,0xb(%eax)
jne    80665a8 <print_prefix+0x9c8>
movzbl 0xc(%eax),%edx
cmp    $0x2e,%dl
je     8066580 <print_prefix+0x9a0>
test   %dl,%dl
je     8066580 <print_prefix+0x9a0>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0xb(%eax),%ebx
mov    $0x8088079,%edx
lea    0x14(%esp),%ecx
mov    %ebx,%eax
call   80663a0 <print_prefix+0x7c0>
test   %eax,%eax
jne    8066580 <print_prefix+0x9a0>
lea    0x18(%esp),%ecx
mov    $0x80880c7,%edx
mov    %ebx,%eax
call   80663a0 <print_prefix+0x7c0>
lea    0x1c(%esp),%ecx
mov    $0x808ca53,%edx
mov    %ebx,%eax
call   80663a0 <print_prefix+0x7c0>
mov    %ebx,0x8(%esp)
movl   $0x80880cd,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x14(%esp),%ebx
test   $0x1,%bl
jne    80666b8 <print_prefix+0xad8>
test   $0x2,%bl
jne    80666d5 <print_prefix+0xaf5>
test   $0x10,%bh
je     80666f2 <print_prefix+0xb12>
test   $0x20,%bh
jne    806670f <print_prefix+0xb2f>
test   $0x40,%bh
jne    806672c <print_prefix+0xb4c>
and    $0xffff8ffc,%ebx
je     8066648 <print_prefix+0xa68>
mov    %ebx,0x8(%esp)
movl   $0x80880f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x18(%esp),%eax
cmp    $0xffffffff,%eax
je     8066669 <print_prefix+0xa89>
mov    %eax,0x8(%esp)
movl   $0x8088107,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x1c(%esp),%eax
cmp    $0xffffffff,%eax
je     806668a <print_prefix+0xaaa>
mov    %eax,0x8(%esp)
movl   $0x8088111,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
movl   $0xa,(%esp)
call   804b960 <putchar@plt>
mov    %esi,(%esp)
call   804ba10 <readdir@plt>
test   %eax,%eax
jne    8066590 <print_prefix+0x9b0>
mov    %esi,(%esp)
call   804bb70 <closedir@plt>
xor    %eax,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
movl   $0x80880d1,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
test   $0x2,%bl
je     806660d <print_prefix+0xa2d>
movl   $0x80880d6,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
test   $0x10,%bh
jne    8066616 <print_prefix+0xa36>
movl   $0x80880db,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
test   $0x20,%bh
je     806661f <print_prefix+0xa3f>
movl   $0x80880df,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
test   $0x40,%bh
je     8066628 <print_prefix+0xa48>
movl   $0x80880ea,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8066628 <print_prefix+0xa48>
movl   $0x80880bf,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    80666b0 <print_prefix+0xad0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x40,%esp
mov    0x50(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
mov    0x54(%esp),%ebx
test   %esi,%esi
jle    80667f8 <do_iptuntap+0x98>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8066818 <do_iptuntap+0xb8>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8066920 <do_iptuntap+0x1c0>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80667f8 <do_iptuntap+0x98>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80667f8 <do_iptuntap+0x98>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80669c0 <do_iptuntap+0x260>
call   8066550 <print_prefix+0x970>
mov    0x3c(%esp),%edi
xor    %gs:0x14,%edi
jne    8066a8c <do_iptuntap+0x32c>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x18(%esp),%ecx
mov    %ecx,0x4(%esp)
lea    0x14(%esp),%ecx
mov    %ecx,(%esp)
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
lea    0x1c(%esp),%ecx
movl   $0xffffffff,0x14(%esp)
movl   $0xffffffff,0x18(%esp)
call   8065f80 <print_prefix+0x3a0>
test   %eax,%eax
js     8066a6c <do_iptuntap+0x30c>
movzwl 0x2c(%esp),%eax
test   $0xf,%al
je     8066a3d <do_iptuntap+0x2dd>
or     $0x8000,%ax
mov    0x18(%esp),%edi
movl   $0x2,0x4(%esp)
mov    0x14(%esp),%esi
movl   $0x808811c,(%esp)
mov    %ax,0x2c(%esp)
call   804b810 <open@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8066a76 <do_iptuntap+0x316>
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x400454ca,0x4(%esp)
mov    %ebx,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    8066990 <do_iptuntap+0x230>
cmp    $0xffffffff,%esi
je     80668cb <do_iptuntap+0x16b>
mov    %esi,0x8(%esp)
movl   $0x400454cc,0x4(%esp)
mov    %ebx,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    80669f8 <do_iptuntap+0x298>
cmp    $0xffffffff,%edi
je     80668ec <do_iptuntap+0x18c>
mov    %edi,0x8(%esp)
movl   $0x400454ce,0x4(%esp)
mov    %ebx,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    80669e0 <do_iptuntap+0x280>
movl   $0x1,0x8(%esp)
movl   $0x400454cb,0x4(%esp)
xor    %esi,%esi
mov    %ebx,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    80669a8 <do_iptuntap+0x248>
mov    %ebx,(%esp)
call   804bb60 <close@plt>
mov    %esi,%eax
jmp    80667fd <do_iptuntap+0x9d>
lea    0x0(%esi),%esi
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
movl   $0x0,0x4(%esp)
lea    0x1c(%esp),%ecx
movl   $0x0,(%esp)
call   8065f80 <print_prefix+0x3a0>
test   %eax,%eax
js     8066a6c <do_iptuntap+0x30c>
movl   $0x2,0x4(%esp)
movl   $0x808811c,(%esp)
call   804b810 <open@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8066a76 <do_iptuntap+0x316>
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x400454ca,0x4(%esp)
mov    %ebx,(%esp)
call   804b6e0 <ioctl@plt>
test   %eax,%eax
jne    8066990 <do_iptuntap+0x230>
movl   $0x0,0x8(%esp)
jmp    80668f4 <do_iptuntap+0x194>
lea    0x0(%esi),%esi
movl   $0x8088129,(%esp)
mov    $0xffffffff,%esi
call   804b700 <perror@plt>
jmp    806690e <do_iptuntap+0x1ae>
xchg   %ax,%ax
movl   $0x8088160,(%esp)
mov    $0xffffffff,%esi
call   804b700 <perror@plt>
jmp    806690e <do_iptuntap+0x1ae>
xchg   %ax,%ax
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8066a0e <do_iptuntap+0x2ae>
call   8065ea0 <print_prefix+0x2c0>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808814d,(%esp)
mov    $0xffffffff,%esi
call   804b700 <perror@plt>
jmp    806690e <do_iptuntap+0x1ae>
xchg   %ax,%ax
movl   $0x808813a,(%esp)
mov    $0xffffffff,%esi
call   804b700 <perror@plt>
jmp    806690e <do_iptuntap+0x1ae>
mov    (%ebx),%eax
movl   $0x8087ffc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8087fd4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    80667fd <do_iptuntap+0x9d>
mov    $0xffffffff,%eax
jmp    80667fd <do_iptuntap+0x9d>
movl   $0x8087be9,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    80667fd <do_iptuntap+0x9d>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088178,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x1d0,%esp
mov    0x1e4(%esp),%ebx
mov    0x1e8(%esp),%eax
mov    %gs:0x14,%esi
mov    %esi,0x1cc(%esp)
xor    %esi,%esi
cmpw   $0x10,0x4(%ebx)
mov    (%eax),%esi
mov    0x4(%eax),%edx
mov    (%ebx),%eax
jne    8066c88 <do_iptuntap+0x528>
sub    $0x20,%eax
js     8066c88 <do_iptuntap+0x528>
cmpb   $0xa,0x10(%ebx)
jne    8066c88 <do_iptuntap+0x528>
mov    0x14(%ebx),%ecx
test   %ecx,%ecx
je     8066c88 <do_iptuntap+0x528>
test   %edx,%edx
jle    8066b68 <do_iptuntap+0x408>
xor    %edi,%edi
cmp    %ecx,%edx
je     8066b68 <do_iptuntap+0x408>
mov    0x1cc(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %edi,%eax
jne    8066c92 <do_iptuntap+0x532>
add    $0x1d0,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
xor    %edi,%edi
testb  $0x88,0x18(%ebx)
jne    8066b41 <do_iptuntap+0x3e1>
mov    %eax,0xc(%esp)
lea    0x20(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x40(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x70(%esp),%eax
test   %eax,%eax
je     8066c88 <do_iptuntap+0x528>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
movl   $0x7,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8066c5c <do_iptuntap+0x4fc>
lea    0xcc(%esp),%edx
mov    %edx,0xc(%esp)
lea    0x4(%eax),%edx
mov    %edx,0x8(%esp)
movl   $0x100,0x10(%esp)
movzwl (%eax),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
movzbl 0x10(%ebx),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
movl   $0x808823b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%ebx),%eax
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
jmp    8066b41 <do_iptuntap+0x3e1>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80881b4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%edi
jmp    8066b41 <do_iptuntap+0x3e1>
call   804b660 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0xa,%ecx
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x27c,%esp
mov    $0x13,%edx
mov    %gs:0x14,%eax
mov    %eax,0x26c(%esp)
xor    %eax,%eax
lea    0x24(%esp),%edi
lea    0x4c(%esp),%ebp
movb   $0x0,0x14(%esp)
rep stos %eax,%es:(%edi)
mov    %ebp,%edi
mov    $0x88,%cl
rep stos %eax,%es:(%edi)
mov    $0x1,%eax
mov    %dx,0x50(%esp)
xor    %edx,%edx
test   %ebx,%ebx
movl   $0x20,0x4c(%esp)
mov    %edx,%edi
mov    %ax,0x52(%esp)
movb   $0xa,0x5c(%esp)
jg     8066d37 <do_iptuntap+0x5d7>
jmp    8066ed5 <do_iptuntap+0x775>
lea    0x0(%esi),%esi
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8066f09 <do_iptuntap+0x7a9>
cmpb   $0x0,0x14(%esp)
mov    %esi,%ecx
je     8066df8 <do_iptuntap+0x698>
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%ecx),%esi
jle    8066d90 <do_iptuntap+0x630>
mov    (%esi),%eax
cmpb   $0x64,(%eax)
jne    8066d08 <do_iptuntap+0x5a8>
cmpb   $0x65,0x1(%eax)
jne    8066d08 <do_iptuntap+0x5a8>
cmpb   $0x76,0x2(%eax)
jne    8066d08 <do_iptuntap+0x5a8>
cmpb   $0x0,0x3(%eax)
jne    8066d08 <do_iptuntap+0x5a8>
sub    $0x1,%ebx
lea    0x4(%esi),%ecx
je     8066f04 <do_iptuntap+0x7a4>
mov    %edi,%eax
test   %al,%al
jne    8066d2d <do_iptuntap+0x5cd>
mov    0x4(%esi),%eax
mov    %ecx,0x18(%esp)
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
mov    0x18(%esp),%ecx
test   %eax,%eax
mov    %eax,0x60(%esp)
je     8066f0e <do_iptuntap+0x7ae>
sub    $0x1,%ebx
mov    $0x1,%edi
test   %ebx,%ebx
lea    0x4(%ecx),%esi
jg     8066d37 <do_iptuntap+0x5d7>
cmpb   $0x0,0x14(%esp)
mov    %edi,%edx
je     8066ed5 <do_iptuntap+0x775>
test   %dl,%dl
je     8066ea6 <do_iptuntap+0x746>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807e090 <rtnl_talk>
sar    $0x1f,%eax
and    $0xfffffffe,%eax
mov    0x26c(%esp),%edx
xor    %gs:0x14,%edx
jne    8066f21 <do_iptuntap+0x7c1>
add    $0x27c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x1a,0x8(%esp)
movl   $0x220,0x4(%esp)
mov    %ebp,(%esp)
mov    %esi,0x1c(%esp)
call   807ed40 <addattr_nest>
movl   $0xa,0x8(%esp)
movl   $0x220,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x14(%esp)
call   807ed40 <addattr_nest>
lea    0x24(%esp),%edx
mov    %eax,0x18(%esp)
movzbl 0x5c(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%esi),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
movzbl 0x25(%esp),%eax
lea    0x2c(%esp),%edx
mov    %edx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x220,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %ebp,(%esp)
call   807ea10 <addattr_l>
mov    0x18(%esp),%edx
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
call   807ed90 <addattr_nest_end>
mov    0x14(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   807ed90 <addattr_nest_end>
mov    0x1c(%esp),%ecx
movb   $0x1,0x14(%esp)
jmp    8066d2d <do_iptuntap+0x5cd>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80838d4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8066dd3 <do_iptuntap+0x673>
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80881e0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8066dd3 <do_iptuntap+0x673>
call   8080010 <incomplete_command>
call   8066aa0 <do_iptuntap+0x340>
mov    0x4(%esi),%eax
movl   $0x8083d76,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %edx,%ebx
sub    $0x38,%esp
test   %eax,%eax
lea    0x18(%esp),%edx
mov    %edx,0x24(%esp)
mov    0x8095c80,%edx
movl   $0x8066ae0,0x20(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x1c(%esp)
mov    %edx,0x18(%esp)
jg     8066f78 <do_iptuntap+0x818>
jmp    8066fb1 <do_iptuntap+0x851>
xchg   %ax,%ax
add    $0x4,%ebx
sub    $0x1,%eax
je     8066fb1 <do_iptuntap+0x851>
mov    (%ebx),%edx
cmpb   $0x64,(%edx)
jne    8066f70 <do_iptuntap+0x810>
cmpb   $0x65,0x1(%edx)
jne    8066f70 <do_iptuntap+0x810>
cmpb   $0x76,0x2(%edx)
jne    8066f70 <do_iptuntap+0x810>
cmpb   $0x0,0x3(%edx)
jne    8066f70 <do_iptuntap+0x810>
cmp    $0x1,%eax
je     806702f <do_iptuntap+0x8cf>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     8067034 <do_iptuntap+0x8d4>
movl   $0x12,0x8(%esp)
movl   $0xa,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     8066ff0 <do_iptuntap+0x890>
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807dc80 <rtnl_dump_filter_l>
test   %eax,%eax
js     8067003 <do_iptuntap+0x8a3>
xor    %eax,%eax
add    $0x38,%esp
pop    %ebx
ret
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    8066feb <do_iptuntap+0x88b>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8066feb <do_iptuntap+0x88b>
call   8080010 <incomplete_command>
mov    0x4(%ebx),%eax
movl   $0x8083d76,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
movl   $0x80941e0,(%esp)
mov    0x24(%esp),%ebx
call   807d5a0 <ll_init_map>
test   %esi,%esi
jle    80670f0 <do_iptoken+0xa0>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806709d <do_iptoken+0x4d>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80670b0 <do_iptoken+0x60>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8066f30 <do_iptuntap+0x7d0>
lea    0x0(%esi),%esi
movl   $0x808602e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80670dc <do_iptoken+0x8c>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8067100 <do_iptoken+0xb0>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    8066ca0 <do_iptuntap+0x540>
lea    0x0(%esi,%eiz,1),%esi
add    $0x14,%esp
xor    %edx,%edx
pop    %ebx
xor    %eax,%eax
pop    %esi
jmp    8066f30 <do_iptuntap+0x7d0>
xchg   %ax,%ax
movl   $0x8084559,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806709d <do_iptoken+0x4d>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8067138 <do_iptoken+0xe8>
call   8066aa0 <do_iptuntap+0x340>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
movl   $0x808820c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x5d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088248,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     80671f8 <do_iptoken+0x1a8>
sub    $0x2c,%esp
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
movl   $0x8088679,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80963a0,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x80963a0,%eax
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x29,%eax
mov    %ax,0x80963a4
mov    $0x80963a0,%eax
movl   $0x464e4928,0x80963a0
46
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
or     %eax,%edx
je     8067260 <do_iptoken+0x210>
sub    $0x2c,%esp
mov    %eax,0x1c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804b830 <localtime@plt>
movl   $0x8086840,0x8(%esp)
movl   $0x20,0x4(%esp)
movl   $0x8096380,(%esp)
mov    %eax,0xc(%esp)
call   804b820 <strftime@plt>
mov    $0x8096380,%eax
add    $0x2c,%esp
ret
mov    $0x2d,%eax
mov    %ax,0x8096380
mov    $0x8096380,%eax
ret
jmp    8067280 <xfrm_addr_match>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    %eax,%ebx
and    $0x1f,%eax
sar    $0x5,%ebx
mov    %eax,%esi
test   %ebx,%ebx
je     80672ba <xfrm_addr_match+0x3a>
lea    0x0(,%ebx,4),%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    80672f0 <xfrm_addr_match+0x70>
xor    %eax,%eax
test   %esi,%esi
je     80672e6 <xfrm_addr_match+0x66>
mov    $0x20,%ecx
mov    $0xffffffff,%eax
mov    0x24(%esp),%edx
sub    %esi,%ecx
shl    %cl,%eax
mov    0x20(%esp),%ecx
bswap  %eax
mov    (%edx,%ebx,4),%edx
xor    (%ecx,%ebx,4),%edx
test   %edx,%eax
setne  %al
movzbl %al,%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    80672e6 <xfrm_addr_match+0x66>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
lea    -0x32(%edx),%eax
cmp    $0x1,%al
setbe  %al
cmp    $0x6c,%dl
sete   %dl
or     %edx,%eax
movzbl %al,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
cmp    $0x3c,%dl
sete   %al
cmp    $0x2b,%dl
sete   %dl
or     %edx,%eax
movzbl %al,%eax
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x808867e,%edx
push   %esi
mov    $0x32,%esi
push   %ebx
mov    $0x8088c00,%ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
jmp    8067372 <xfrm_xfrmproto_getbyname+0x32>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%edx
test   %edx,%edx
je     8067390 <xfrm_xfrmproto_getbyname+0x50>
add    $0x8,%ebx
mov    0x4(%ebx),%esi
cmp    $0xffffffff,%esi
je     8067382 <xfrm_xfrmproto_getbyname+0x42>
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8067360 <xfrm_xfrmproto_getbyname+0x20>
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
mov    $0xffffffff,%esi
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
movzbl 0x30(%esp),%ebx
cmp    $0x32,%ebx
je     8067400 <strxf_xfrmproto+0x60>
mov    $0x8088c00,%edx
jmp    80673c7 <strxf_xfrmproto+0x27>
lea    0x0(%esi),%esi
mov    0xc(%edx),%ecx
cmp    $0xffffffff,%ecx
je     80673ce <strxf_xfrmproto+0x2e>
add    $0x8,%edx
cmp    %ebx,%ecx
je     80673fb <strxf_xfrmproto+0x5b>
mov    0x8(%edx),%eax
test   %eax,%eax
jne    80673b8 <strxf_xfrmproto+0x18>
mov    %ebx,0x10(%esp)
movl   $0x80886cd,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8096460,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x8096460,%eax
add    $0x28,%esp
pop    %ebx
ret
mov    $0x808867e,%eax
jmp    80673fb <strxf_xfrmproto+0x5b>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x8088682,%edx
push   %esi
mov    $0x2,%esi
push   %ebx
mov    $0x8088bc0,%ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
jmp    8067442 <xfrm_algotype_getbyname+0x32>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%ebx),%edx
test   %edx,%edx
je     8067460 <xfrm_algotype_getbyname+0x50>
add    $0x8,%ebx
mov    0x4(%ebx),%esi
cmp    $0xffffffff,%esi
je     8067452 <xfrm_algotype_getbyname+0x42>
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8067430 <xfrm_algotype_getbyname+0x20>
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
mov    $0xffffffff,%esi
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
je     80674d0 <strxf_algotype+0x60>
mov    $0x8088bc0,%edx
jmp    8067497 <strxf_algotype+0x27>
lea    0x0(%esi,%eiz,1),%esi
mov    0xc(%edx),%ecx
cmp    $0xffffffff,%ecx
je     806749e <strxf_algotype+0x2e>
add    $0x8,%edx
cmp    %ebx,%ecx
je     80674cb <strxf_algotype+0x5b>
mov    0x8(%edx),%eax
test   %eax,%eax
jne    8067488 <strxf_algotype+0x18>
mov    %ebx,0x10(%esp)
movl   $0x8089cc8,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8096440,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x8096440,%eax
add    $0x28,%esp
pop    %ebx
ret
mov    $0x8088682,%eax
jmp    80674cb <strxf_algotype+0x5b>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%eax
mov    0x48(%esp),%edx
mov    0x40(%esp),%ebx
test   %eax,%eax
mov    %edx,0x1c(%esp)
je     806750d <strxf_algotype+0x9d>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %esi,(%esp)
call   8067470 <strxf_algotype>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
cmp    $0x43,%ebp
jbe    80675f0 <strxf_algotype+0x180>
mov    %edi,0xc(%esp)
sub    $0x44,%ebp
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x40(%edi),%esi
shr    $0x3,%esi
cmp    %esi,%ebp
jl     80675f0 <strxf_algotype+0x180>
test   %esi,%esi
jle    8067610 <strxf_algotype+0x1a0>
mov    %ebx,0xc(%esp)
xor    %ebp,%ebp
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088698,(%esp)
call   804b710 <fwrite@plt>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x44(%edi,%ebp,1),%eax
add    $0x1,%ebp
movl   $0x808869b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
cmp    %ebp,%esi
jne    8067598 <strxf_algotype+0x128>
mov    0x8095ca4,%edx
test   %edx,%edx
jle    8067610 <strxf_algotype+0x1a0>
mov    0x40(%edi),%eax
movl   $0x80886a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8067610 <strxf_algotype+0x1a0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x1c(%esp),%eax
test   %eax,%eax
jne    8067620 <strxf_algotype+0x1b0>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8095c90,%eax
mov    %ebx,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804bb30 <fputs@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x3c,%esp
mov    0x8(%ebp),%eax
mov    %gs:0x14,%ebx
mov    %ebx,-0x1c(%ebp)
xor    %ebx,%ebx
mov    %edx,-0x2c(%ebp)
mov    %eax,-0x30(%ebp)
mov    0x40(%esi),%eax
shr    $0x3,%eax
add    $0x62,%eax
and    $0x3ffffff0,%eax
sub    %eax,%esp
mov    (%esi),%eax
lea    0x1f(%esp),%ebx
and    $0xfffffff0,%ebx
mov    %eax,(%ebx)
mov    0x4(%esi),%eax
mov    %eax,0x4(%ebx)
mov    0x8(%esi),%eax
mov    %eax,0x8(%ebx)
mov    0xc(%esi),%eax
mov    %eax,0xc(%ebx)
mov    0x10(%esi),%eax
mov    %eax,0x10(%ebx)
mov    0x14(%esi),%eax
mov    %eax,0x14(%ebx)
mov    0x18(%esi),%eax
mov    %eax,0x18(%ebx)
mov    0x1c(%esi),%eax
mov    %eax,0x1c(%ebx)
mov    0x20(%esi),%eax
mov    %eax,0x20(%ebx)
mov    0x24(%esi),%eax
mov    %eax,0x24(%ebx)
mov    0x28(%esi),%eax
mov    %eax,0x28(%ebx)
mov    0x2c(%esi),%eax
mov    %eax,0x2c(%ebx)
mov    0x30(%esi),%eax
mov    %eax,0x30(%ebx)
mov    0x34(%esi),%eax
mov    %eax,0x34(%ebx)
mov    0x38(%esi),%eax
mov    %eax,0x38(%ebx)
mov    0x3c(%esi),%eax
mov    %eax,0x3c(%ebx)
mov    0x40(%esi),%ecx
lea    0x44(%ebx),%eax
mov    %ecx,%edx
mov    %ecx,0x40(%ebx)
shr    $0x3,%edx
lea    0x48(%esi),%ecx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
mov    -0x30(%ebp),%eax
mov    $0x14,%edx
mov    -0x2c(%ebp),%ecx
movl   $0x0,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,%eax
call   80674e0 <strxf_algotype+0x70>
mov    0x44(%esi),%eax
movl   $0x8089cc7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    -0x1c(%ebp),%eax
xor    %gs:0x14,%eax
jne    806775d <strxf_algotype+0x2ed>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %esp,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x3c,%esp
mov    0x8(%ebp),%eax
mov    %gs:0x14,%ebx
mov    %ebx,-0x1c(%ebp)
xor    %ebx,%ebx
mov    %edx,-0x2c(%ebp)
mov    %eax,-0x30(%ebp)
mov    0x40(%esi),%eax
shr    $0x3,%eax
add    $0x62,%eax
and    $0x3ffffff0,%eax
sub    %eax,%esp
mov    (%esi),%eax
lea    0x1f(%esp),%ebx
and    $0xfffffff0,%ebx
mov    %eax,(%ebx)
mov    0x4(%esi),%eax
mov    %eax,0x4(%ebx)
mov    0x8(%esi),%eax
mov    %eax,0x8(%ebx)
mov    0xc(%esi),%eax
mov    %eax,0xc(%ebx)
mov    0x10(%esi),%eax
mov    %eax,0x10(%ebx)
mov    0x14(%esi),%eax
mov    %eax,0x14(%ebx)
mov    0x18(%esi),%eax
mov    %eax,0x18(%ebx)
mov    0x1c(%esi),%eax
mov    %eax,0x1c(%ebx)
mov    0x20(%esi),%eax
mov    %eax,0x20(%ebx)
mov    0x24(%esi),%eax
mov    %eax,0x24(%ebx)
mov    0x28(%esi),%eax
mov    %eax,0x28(%ebx)
mov    0x2c(%esi),%eax
mov    %eax,0x2c(%ebx)
mov    0x30(%esi),%eax
mov    %eax,0x30(%ebx)
mov    0x34(%esi),%eax
mov    %eax,0x34(%ebx)
mov    0x38(%esi),%eax
mov    %eax,0x38(%ebx)
mov    0x3c(%esi),%eax
mov    %eax,0x3c(%ebx)
mov    0x40(%esi),%ecx
lea    0x44(%ebx),%eax
mov    %ecx,%edx
mov    %ecx,0x40(%ebx)
shr    $0x3,%edx
lea    0x48(%esi),%ecx
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
mov    -0x30(%ebp),%eax
mov    $0x12,%edx
mov    -0x2c(%ebp),%ecx
movl   $0x0,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,%eax
call   80674e0 <strxf_algotype+0x70>
mov    0x44(%esi),%eax
movl   $0x8089cc7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    -0x1c(%ebp),%eax
xor    %gs:0x14,%eax
jne    806788d <strxf_algotype+0x41d>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
movzbl 0x8(%esp),%ebx
xor    %eax,%eax
mov    $0xffffff80,%ecx
lea    0x0(%esi),%esi
mov    %ecx,%edx
add    $0x1,%eax
and    %ebx,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
add    $0x31,%edx
shr    %cl
cmp    $0x8,%eax
mov    %dl,0x809642f(%eax)
jne    80678b0 <strxf_mask8+0x10>
mov    $0x8096430,%eax
movb   $0x0,0x8096438
pop    %ebx
ret
lea    0x0(%esi),%esi
sub    $0x2c,%esp
mov    0x30(%esp),%eax
movl   $0x80886ab,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x8096420,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x8096420,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x2c,%esp
mov    0x30(%esp),%eax
cmp    $0x1,%al
je     80679d8 <strxf_share+0xb8>
jb     80679c0 <strxf_share+0xa0>
cmp    $0x2,%al
je     8067968 <strxf_share+0x48>
cmp    $0x3,%al
nop
lea    0x0(%esi,%eiz,1),%esi
jne    8067988 <strxf_share+0x68>
mov    $0x6575,%eax
mov    %ax,0x8096404
mov    $0x8096400,%eax
movl   $0x71696e75,0x8096400
71
movb   $0x0,0x8096406
add    $0x2c,%esp
ret
nop
movl   $0x72657375,0x8096400
72
mov    $0x8096400,%eax
movb   $0x0,0x8096404
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
movzbl %al,%eax
mov    %eax,0x10(%esp)
movl   $0x80886cd,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8096400,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x8096400,%eax
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
movl   $0x796e61,0x8096400
00
mov    $0x8096400,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x73736573,0x8096400
73
mov    $0x8096400,%eax
movl   $0x6e6f69,0x8096404
00
add    $0x2c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
movzbl 0x30(%esp),%ebx
mov    %ebx,(%esp)
call   804b640 <getprotobynumber@plt>
test   %eax,%eax
je     8067a20 <strxf_proto+0x20>
mov    (%eax),%eax
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x10(%esp)
movl   $0x80886cd,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80963e0,(%esp)
call   804bbb0 <__sprintf_chk@plt>
add    $0x28,%esp
mov    $0x80963e0,%eax
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x30(%esp),%eax
test   %al,%al
je     8067ac0 <strxf_ptype+0x60>
cmp    $0x1,%al
je     8067aa8 <strxf_ptype+0x48>
movzbl %al,%eax
mov    %eax,0x10(%esp)
movl   $0x80886cd,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80963c0,(%esp)
call   804bbb0 <__sprintf_chk@plt>
mov    $0x80963c0,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x627573,0x80963c0
00
mov    $0x80963c0,%eax
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x6e69616d,0x80963c0
6e
mov    $0x80963c0,%eax
movb   $0x0,0x80963c4
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x14c,%esp
mov    0x160(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x13c(%esp)
xor    %ecx,%ecx
mov    0x164(%esp),%ebp
mov    0x170(%esp),%edx
mov    0x178(%esp),%ebx
mov    %eax,0x24(%esp)
mov    0x168(%esp),%eax
mov    %eax,0x20(%esp)
mov    0x17c(%esp),%eax
mov    %eax,0x28(%esp)
mov    0x180(%esp),%eax
test   %eax,%eax
je     8067b4f <xfrm_id_info_print+0x6f>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
call   804bb30 <fputs@plt>
mov    0x2c(%esp),%edx
lea    0x3c(%esp),%esi
xor    %eax,%eax
mov    $0x40,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    0x24(%esp),%eax
movzwl %dx,%edx
mov    %edx,(%esp)
mov    %esi,%edi
movl   $0x100,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %edx,0x24(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x8083feb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
mov    0x24(%esp),%edx
movl   $0x100,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebp,0x8(%esp)
mov    %edx,(%esp)
movl   $0x10,0x4(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x80886b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x28(%esp),%eax
test   %eax,%eax
je     8067c15 <xfrm_id_info_print+0x135>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0x4(%esp)
movl   $0x9,(%esp)
call   804ba50 <fputc@plt>
movzbl 0x14(%ebp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8083fd5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%edi
mov    0x10(%ebp),%esi
test   %edi,%edi
jle    8067d50 <xfrm_id_info_print+0x270>
bswap  %esi
movl   $0x80886b7,0x8(%esp)
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%edx
test   %edx,%edx
jle    8067ca2 <xfrm_id_info_print+0x1c2>
mov    %esi,0xc(%esp)
movl   $0x80886c2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
mov    0x16c(%esp),%eax
movl   $0x80886c7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8067d01 <xfrm_id_info_print+0x221>
mov    0x16c(%esp),%eax
movl   $0x80886d0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bdf6,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%esp),%eax
cmp    $0x4,%al
ja     8067e50 <xfrm_id_info_print+0x370>
movzbl %al,%eax
mov    %ebx,0xc(%esp)
jmp    *0x8088ba0(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x174(%esp),%ecx
test   %ecx,%ecx
jne    8067c5e <xfrm_id_info_print+0x17e>
test   %esi,%esi
je     8067cb2 <xfrm_id_info_print+0x1d2>
jmp    8067c5e <xfrm_id_info_print+0x17e>
lea    0x0(%esi,%eiz,1),%esi
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80886e6,(%esp)
call   804b710 <fwrite@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x13c(%esp),%eax
xor    %gs:0x14,%eax
jne    8067e76 <xfrm_id_info_print+0x396>
add    $0x14c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80886f1,(%esp)
call   804b710 <fwrite@plt>
jmp    8067d90 <xfrm_id_info_print+0x2b0>
xchg   %ax,%ax
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80886d9,(%esp)
call   804b710 <fwrite@plt>
jmp    8067d90 <xfrm_id_info_print+0x2b0>
xchg   %ax,%ax
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082d64,(%esp)
call   804b710 <fwrite@plt>
jmp    8067d90 <xfrm_id_info_print+0x2b0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80886e3,(%esp)
call   804b710 <fwrite@plt>
jmp    8067d90 <xfrm_id_info_print+0x2b0>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x20(%esp),%eax
movl   $0x80886cd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8067d90 <xfrm_id_info_print+0x2b0>
call   804b660 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x38(%esp),%edi
mov    0x30(%esp),%esi
mov    0x34(%esp),%ebx
test   %edi,%edi
je     8067f10 <xfrm_stats_print+0x90>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x80886f6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %eax,0x18(%esp)
mov    0x8(%esi),%eax
mov    %eax,0x14(%esp)
mov    0x4(%esi),%eax
mov    %eax,0x10(%esp)
mov    (%esi),%eax
mov    %ebx,(%esp)
movl   $0x80882a8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c90,%eax
movl   $0x80886f6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8067ecf <xfrm_stats_print+0x4f>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    0x58(%esp),%ebx
mov    0x5c(%esp),%edi
test   %esi,%esi
je     80680fd <xfrm_lifetime_print+0x1bd>
test   %edi,%edi
je     8068258 <xfrm_lifetime_print+0x318>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x80886ff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x4(%esi),%edx
mov    (%esi),%eax
call   80671b0 <do_iptoken+0x160>
movl   $0x8088712,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%esi),%edx
mov    0x8095c90,%ecx
mov    0x8(%esi),%eax
mov    %ecx,0x2c(%esp)
call   80671b0 <do_iptoken+0x160>
mov    0x2c(%esp),%ecx
movl   $0x808872b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
call   80671b0 <do_iptoken+0x160>
movl   $0x808873d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esi),%edx
mov    0x8095c90,%ecx
mov    0x18(%esi),%eax
mov    %ecx,0x2c(%esp)
call   80671b0 <do_iptoken+0x160>
mov    0x2c(%esp),%ecx
movl   $0x8088758,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %eax,0x1c(%esp)
mov    0x28(%esi),%eax
mov    0x2c(%esi),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x20(%esi),%eax
mov    0x24(%esi),%edx
movl   $0x80882d4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %eax,0x1c(%esp)
mov    0x38(%esi),%eax
mov    0x3c(%esi),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x30(%esi),%eax
mov    0x34(%esi),%edx
movl   $0x8088304,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %ebp,%ebp
je     80681e7 <xfrm_lifetime_print+0x2a7>
test   %edi,%edi
je     80681f0 <xfrm_lifetime_print+0x2b0>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
movl   $0x808876c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %eax,0x1c(%esp)
mov    0x8(%ebp),%eax
mov    0xc(%ebp),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x0(%ebp),%eax
mov    0x4(%ebp),%edx
movl   $0x8088334,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   804bb30 <fputs@plt>
mov    0x14(%ebp),%edx
mov    0x10(%ebp),%eax
call   8067220 <do_iptoken+0x1d0>
movl   $0x8088780,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebp),%eax
mov    0x1c(%ebp),%edx
mov    0x8095c90,%esi
call   8067220 <do_iptoken+0x1d0>
mov    %esi,0x10(%esp)
movl   $0x808878a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8095c90,%eax
movl   $0x808876c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %eax,0x1c(%esp)
mov    0x8(%ebp),%eax
mov    0xc(%ebp),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x0(%ebp),%eax
mov    0x4(%ebp),%edx
movl   $0x8088334,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806818f <xfrm_lifetime_print+0x24f>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c90,%eax
movl   $0x80886ff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%esi),%edx
mov    (%esi),%eax
call   80671b0 <do_iptoken+0x160>
movl   $0x8088712,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%esi),%edx
mov    0x8095c90,%ecx
mov    0x8(%esi),%eax
mov    %ecx,0x2c(%esp)
call   80671b0 <do_iptoken+0x160>
mov    0x2c(%esp),%ecx
movl   $0x808872b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
call   80671b0 <do_iptoken+0x160>
movl   $0x808873d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esi),%edx
mov    0x8095c90,%ecx
mov    0x18(%esi),%eax
mov    %ecx,0x2c(%esp)
call   80671b0 <do_iptoken+0x160>
mov    0x2c(%esp),%ecx
movl   $0x8088758,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %eax,0x1c(%esp)
mov    0x28(%esi),%eax
mov    0x2c(%esi),%edx
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
mov    0x20(%esi),%eax
mov    0x24(%esi),%edx
movl   $0x80882d4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80680c0 <xfrm_lifetime_print+0x180>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x13c,%esp
mov    0x150(%esp),%ebx
mov    %gs:0x14,%edi
mov    %edi,0x12c(%esp)
xor    %edi,%edi
mov    0x154(%esp),%ecx
mov    0x158(%esp),%esi
mov    0x15c(%esp),%eax
movzwl 0x28(%ebx),%edx
test   %dx,%dx
jne    80683cf <xfrm_selector_print+0x4f>
test   %cx,%cx
jne    806871a <xfrm_selector_print+0x39a>
movzwl 0x8095ca8,%edx
test   %eax,%eax
je     80683e7 <xfrm_selector_print+0x67>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x1c(%esp)
call   804bb30 <fputs@plt>
mov    0x1c(%esp),%edx
lea    0x2c(%esp),%ebp
xor    %eax,%eax
mov    $0x40,%ecx
mov    %ebp,%edi
rep stos %eax,%es:(%edi)
movzwl %dx,%edx
movzbl 0x2b(%ebx),%edi
lea    0x10(%ebx),%eax
mov    %edx,(%esp)
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %edx,0x1c(%esp)
call   8080470 <rt_addr_n2a>
mov    %edi,0x10(%esp)
mov    %ebp,%edi
movl   $0x8088793,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
xor    %eax,%eax
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
mov    0x1c(%esp),%edx
movzbl 0x2a(%ebx),%edi
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %edx,(%esp)
mov    %ebx,0x8(%esp)
movl   $0x10,0x4(%esp)
call   8080470 <rt_addr_n2a>
mov    %edi,0x10(%esp)
movl   $0x808879e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x2c(%ebx),%eax
test   %al,%al
jne    8068568 <xfrm_selector_print+0x1e8>
cmpw   $0x0,0x26(%ebx)
je     80684d1 <xfrm_selector_print+0x151>
movzwl 0x24(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887a9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
cmpw   $0x0,0x22(%ebx)
jne    8068678 <xfrm_selector_print+0x2f8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%ebx),%eax
test   %eax,%eax
jle    806850b <xfrm_selector_print+0x18b>
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8068533 <xfrm_selector_print+0x1b3>
mov    0x34(%ebx),%eax
movl   $0x80887df,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x12c(%esp),%eax
xor    %gs:0x14,%eax
jne    8068715 <xfrm_selector_print+0x395>
add    $0x13c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8083fd5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x2c(%ebx),%eax
cmp    $0x2f,%al
je     8068620 <xfrm_selector_print+0x2a0>
jbe    80686a8 <xfrm_selector_print+0x328>
cmp    $0x3a,%al
je     80686b0 <xfrm_selector_print+0x330>
cmp    $0x87,%al
jne    80684a3 <xfrm_selector_print+0x123>
cmpw   $0x0,0x26(%ebx)
je     80685dc <xfrm_selector_print+0x25c>
movzwl 0x24(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887bd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
cmpw   $0x0,0x22(%ebx)
je     80684e0 <xfrm_selector_print+0x160>
mov    0x8095ca4,%edx
test   %edx,%edx
jle    80684e0 <xfrm_selector_print+0x160>
movzwl 0x20(%ebx),%eax
movl   $0x80887cf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80684e0 <xfrm_selector_print+0x160>
lea    0x0(%esi),%esi
cmpw   $0x0,0x26(%ebx)
je     8068660 <xfrm_selector_print+0x2e0>
movzwl 0x24(%ebx),%edx
movzwl 0x20(%ebx),%eax
ror    $0x8,%dx
ror    $0x8,%ax
shl    $0x10,%edx
movzwl %ax,%eax
add    %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8085e49,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80684e0 <xfrm_selector_print+0x160>
cmpw   $0x0,0x22(%ebx)
je     80684e0 <xfrm_selector_print+0x160>
nop
lea    0x0(%esi,%eiz,1),%esi
jmp    8068627 <xfrm_selector_print+0x2a7>
lea    0x0(%esi),%esi
movzwl 0x20(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887b3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80684e0 <xfrm_selector_print+0x160>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%al
jne    80684a3 <xfrm_selector_print+0x123>
cmpw   $0x0,0x26(%ebx)
je     80686de <xfrm_selector_print+0x35e>
movzwl 0x24(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887bd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
cmpw   $0x0,0x22(%ebx)
je     80684e0 <xfrm_selector_print+0x160>
movzwl 0x20(%ebx),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887c6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80684e0 <xfrm_selector_print+0x160>
call   804b660 <__stack_chk_fail@plt>
mov    %ecx,%edx
lea    0x0(%esi,%eiz,1),%esi
jmp    80683cf <xfrm_selector_print+0x4f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%eax
mov    (%eax),%edx
mov    0x38(%esp),%eax
lea    -0x1(%edx),%ebx
test   %ebx,%ebx
mov    (%eax),%ebp
jle    8068818 <xfrm_parse_mark+0xe8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %edx,0xc(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    806881d <xfrm_parse_mark+0xed>
cmp    $0x1,%ebx
je     8068808 <xfrm_parse_mark+0xd8>
cmp    $0x2,%edx
jle    8068818 <xfrm_parse_mark+0xe8>
mov    0x8(%ebp),%esi
mov    $0x80887fd,%edi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80687e0 <xfrm_parse_mark+0xb0>
mov    %edx,%ebx
sub    $0x3,%ebx
lea    0xc(%ebp),%esi
je     8068818 <xfrm_parse_mark+0xe8>
movl   $0x0,0x8(%esp)
mov    0xc(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x4,%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     80687ee <xfrm_parse_mark+0xbe>
mov    0xc(%ebp),%eax
movl   $0x8088802,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%eax
lea    0x4(%ebp),%esi
movl   $0xffffffff,0x4(%eax)
mov    0x34(%esp),%eax
mov    %ebx,(%eax)
mov    0x38(%esp),%eax
mov    %esi,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%eax
lea    0x4(%ebp),%esi
movl   $0xffffffff,0x4(%eax)
jmp    80687ee <xfrm_parse_mark+0xbe>
call   8080010 <incomplete_command>
mov    0x4(%ebp),%eax
movl   $0x80887e6,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x14c,%esp
mov    0x160(%esp),%eax
mov    0x164(%esp),%edi
mov    %gs:0x14,%ecx
mov    %ecx,0x13c(%esp)
xor    %ecx,%ecx
mov    0x168(%esp),%ebx
mov    0x16c(%esp),%esi
mov    %eax,0x24(%esp)
mov    0x54(%eax),%eax
mov    %edi,0x2c(%esp)
test   %eax,%eax
je     806889b <xfrm_xfrma_print+0x6b>
mov    0x8(%eax),%edx
mov    %edx,0x10(%esp)
mov    0x4(%eax),%eax
movl   $0x8088819,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x24(%esp),%eax
mov    0x4(%eax),%edx
test   %edx,%edx
je     8068f7a <xfrm_xfrma_print+0x74a>
mov    0x50(%eax),%eax
test   %eax,%eax
je     8068f58 <xfrm_xfrma_print+0x728>
movzwl (%eax),%edx
mov    %ebx,%ecx
add    $0x4,%eax
mov    %esi,(%esp)
sub    $0x4,%edx
call   8067640 <strxf_algotype+0x1d0>
mov    0x24(%esp),%eax
mov    0x48(%eax),%eax
test   %eax,%eax
je     80688e6 <xfrm_xfrma_print+0xb6>
movzwl (%eax),%edx
mov    %ebx,%ecx
add    $0x4,%eax
mov    %esi,(%esp)
sub    $0x4,%edx
call   8067770 <strxf_algotype+0x300>
mov    0x24(%esp),%eax
mov    0x8(%eax),%eax
test   %eax,%eax
je     8068913 <xfrm_xfrma_print+0xe3>
movzwl (%eax),%ecx
mov    $0x2,%edx
add    $0x4,%eax
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
sub    $0x4,%ecx
call   80674e0 <strxf_algotype+0x70>
mov    0x24(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     8068940 <xfrm_xfrma_print+0x110>
movzwl (%eax),%ecx
mov    $0x3,%edx
add    $0x4,%eax
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
sub    $0x4,%ecx
call   80674e0 <strxf_algotype+0x70>
mov    0x24(%esp),%eax
mov    0x10(%eax),%eax
test   %eax,%eax
je     8068a9c <xfrm_xfrma_print+0x26c>
test   %esi,%esi
je     806895f <xfrm_xfrma_print+0x12f>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088828,(%esp)
call   804b710 <fwrite@plt>
mov    0x24(%esp),%eax
mov    0x10(%eax),%ebp
movzwl 0x0(%ebp),%eax
mov    %ebx,0xc(%esp)
sub    $0x4,%eax
cmp    $0x17,%eax
jbe    8068de5 <xfrm_xfrma_print+0x5b5>
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80889ac,(%esp)
call   804b710 <fwrite@plt>
movzwl 0x4(%ebp),%eax
cmp    $0x1,%ax
je     8068fb8 <xfrm_xfrma_print+0x788>
cmp    $0x2,%ax
je     8068f90 <xfrm_xfrma_print+0x760>
mov    %eax,0xc(%esp)
movl   $0x8086878,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl 0x6(%ebp),%eax
add    $0xc,%ebp
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887a9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl -0x4(%ebp),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x80887b3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
lea    0x3c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
movzwl 0x2c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x100,0x10(%esp)
mov    %ebp,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x80865a5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x24(%esp),%eax
mov    0x14(%eax),%ebp
test   %ebp,%ebp
je     8068d90 <xfrm_xfrma_print+0x560>
movzwl 0x0(%ebp),%eax
xor    %edi,%edi
add    $0x20,%ebp
sub    $0x4,%eax
mov    %eax,0x28(%esp)
shrl   $0x6,0x28(%esp)
mov    0x28(%esp),%eax
test   %eax,%eax
jne    8068c9a <xfrm_xfrma_print+0x46a>
jmp    8068d4a <xfrm_xfrma_print+0x51a>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088879,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8068b29 <xfrm_xfrma_print+0x2f9>
movzbl 0x15(%ebp),%eax
mov    %eax,(%esp)
call   8067920 <strxf_share>
movl   $0x808888e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095ca4,%ecx
test   %ecx,%ecx
jle    8068c8a <xfrm_xfrma_print+0x45a>
test   %esi,%esi
je     8068b58 <xfrm_xfrma_print+0x328>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0x4(%esp)
movl   $0x9,(%esp)
call   804ba50 <fputc@plt>
mov    0x1c(%ebp),%eax
movl   $0x80886ab,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x8096420,(%esp)
call   804bbb0 <__sprintf_chk@plt>
movl   $0x2,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8096420,0x10(%esp)
movl   $0x8088898,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebp),%eax
movl   $0x80886ab,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x8096420,(%esp)
call   804bbb0 <__sprintf_chk@plt>
movl   $0x1,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8096420,0x10(%esp)
movl   $0x8088898,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x20(%ebp),%eax
movl   $0x80886ab,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
movl   $0x8096420,(%esp)
call   804bbb0 <__sprintf_chk@plt>
movl   $0x3,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8096420,0x10(%esp)
movl   $0x80888a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
add    $0x1,%edi
add    $0x40,%ebp
cmp    %edi,0x28(%esp)
jle    8068d90 <xfrm_xfrma_print+0x560>
test   %esi,%esi
je     8068caa <xfrm_xfrma_print+0x47a>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
movl   $0x8088863,0x20(%esp)
mov    %esi,0x1c(%esp)
mov    %ebx,0x18(%esp)
movl   $0x0,0x14(%esp)
movzwl -0x4(%ebp),%eax
mov    %eax,0x10(%esp)
mov    0x10(%ebp),%eax
mov    %eax,0xc(%esp)
movzbl 0x14(%ebp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
lea    -0x1c(%ebp),%eax
mov    %eax,0x4(%esp)
call   8067ae0 <xfrm_id_info_print>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8068f48 <xfrm_xfrma_print+0x718>
test   %esi,%esi
je     8068d05 <xfrm_xfrma_print+0x4d5>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0x4(%esp)
movl   $0x9,(%esp)
call   804ba50 <fputc@plt>
movzbl 0x16(%ebp),%eax
test   %al,%al
je     8068f10 <xfrm_xfrma_print+0x6e0>
cmp    $0x1,%al
je     8068ad8 <xfrm_xfrma_print+0x2a8>
mov    %eax,0xc(%esp)
movl   $0x8088884,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8068af8 <xfrm_xfrma_print+0x2c8>
test   %esi,%esi
je     8068d5a <xfrm_xfrma_print+0x52a>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808884a,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
mov    0x38(%eax),%edx
test   %edx,%edx
je     8068e8c <xfrm_xfrma_print+0x65c>
test   %esi,%esi
je     8068daf <xfrm_xfrma_print+0x57f>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80888af,(%esp)
call   804b710 <fwrite@plt>
mov    0x24(%esp),%eax
mov    0x38(%eax),%edx
movzwl (%edx),%eax
sub    $0x4,%eax
cmp    $0xf,%eax
ja     8068e38 <xfrm_xfrma_print+0x608>
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x13c(%esp),%eax
xor    %gs:0x14,%eax
jne    8068fdd <xfrm_xfrma_print+0x7ad>
add    $0x14c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x3c(%esp),%ebp
xor    %eax,%eax
mov    $0x40,%ecx
mov    %ebp,%edi
rep stos %eax,%es:(%edi)
movzwl 0x2c(%esp),%eax
add    $0x4,%edx
mov    %edx,0x8(%esp)
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   8080470 <rt_addr_n2a>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x24(%esp),%eax
mov    0x3c(%eax),%eax
test   %eax,%eax
je     8068e12 <xfrm_xfrma_print+0x5e2>
test   %esi,%esi
je     8068eab <xfrm_xfrma_print+0x67b>
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804bb30 <fputs@plt>
mov    %ebx,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80888b4,(%esp)
call   804b710 <fwrite@plt>
mov    0x24(%esp),%eax
mov    0x3c(%eax),%eax
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x7,%edx
jbe    8068de1 <xfrm_xfrma_print+0x5b1>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
call   8067220 <do_iptoken+0x1d0>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    8068e12 <xfrm_xfrma_print+0x5e2>
xchg   %ax,%ax
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8068b29 <xfrm_xfrma_print+0x2f9>
mov    %ebx,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088869,(%esp)
call   804b710 <fwrite@plt>
jmp    8068af8 <xfrm_xfrma_print+0x2c8>
lea    0x0(%esi),%esi
cmpb   $0x0,0x16(%ebp)
je     8068c8a <xfrm_xfrma_print+0x45a>
jmp    8068cf5 <xfrm_xfrma_print+0x4c5>
nop
movzwl (%edx),%ecx
lea    0x4(%edx),%eax
mov    $0x1,%edx
movl   $0x1,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
sub    $0x4,%ecx
call   80674e0 <strxf_algotype+0x70>
mov    0x24(%esp),%eax
mov    0x50(%eax),%eax
test   %eax,%eax
je     80688c8 <xfrm_xfrma_print+0x98>
jmp    80688b5 <xfrm_xfrma_print+0x85>
xchg   %ax,%ax
mov    %ebx,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088840,(%esp)
call   804b710 <fwrite@plt>
jmp    80689ea <xfrm_xfrma_print+0x1ba>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808882f,(%esp)
call   804b710 <fwrite@plt>
jmp    80689ea <xfrm_xfrma_print+0x1ba>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0x20,%ecx
push   %edi
push   %esi
push   %ebx
sub    $0x17c,%esp
mov    0x194(%esp),%eax
lea    0x6c(%esp),%edi
mov    0x190(%esp),%ebp
mov    0x19c(%esp),%esi
mov    0x198(%esp),%ebx
mov    %eax,0x2c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x16c(%esp)
xor    %eax,%eax
movzbl 0x4c(%ebp),%edx
rep stos %eax,%es:(%edi)
mov    0x1a0(%esp),%eax
mov    %esi,0x1c(%esp)
mov    %ebx,0x18(%esp)
mov    %eax,0x20(%esp)
lea    -0x32(%edx),%eax
cmp    $0x1,%al
setbe  %al
cmp    $0x6c,%dl
sete   %dl
or     %edx,%eax
movzbl %al,%eax
mov    %eax,0x14(%esp)
movzwl 0xd4(%ebp),%eax
mov    %eax,0x10(%esp)
mov    0xd0(%ebp),%eax
mov    %eax,0xc(%esp)
movzbl 0xd6(%ebp),%eax
mov    %eax,0x8(%esp)
lea    0x38(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x50(%ebp),%eax
mov    %eax,(%esp)
call   8067ae0 <xfrm_id_info_print>
test   %esi,%esi
je     806910c <xfrm_state_info_print+0x11c>
lea    0x6c(%esp),%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     806909c <xfrm_state_info_print+0xac>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
lea    0x6c(%esp),%eax
sub    %edx,%eax
lea    0x7f(%eax),%edi
test   %edi,%edi
jle    8069161 <xfrm_state_info_print+0x171>
mov    %esi,(%esp)
call   804b880 <strlen@plt>
movl   $0x80,0xc(%esp)
mov    %esi,0x4(%esp)
cmp    %edi,%eax
cmovle %eax,%edi
lea    0x6c(%esp),%eax
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   804bae0 <__strncat_chk@plt>
movb   $0x0,0xeb(%esp)
lea    0x6c(%esp),%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8069110 <xfrm_state_info_print+0x120>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
lea    0x6c(%esp),%eax
sub    %eax,%edx
mov    $0x7f,%eax
sub    %edx,%eax
test   %eax,%eax
jle    8069161 <xfrm_state_info_print+0x171>
mov    $0x9,%eax
mov    %ax,0x6c(%esp,%edx,1)
movb   $0x0,0xeb(%esp)
lea    0x6c(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movzbl 0xd7(%ebp),%eax
movl   $0x80888be,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jg     8069600 <xfrm_state_info_print+0x610>
movzbl 0xd8(%ebp),%eax
test   %al,%al
je     8069433 <xfrm_state_info_print+0x443>
mov    %eax,%esi
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808891f,(%esp)
call   804b710 <fwrite@plt>
test   $0x1,%esi
je     8069209 <xfrm_state_info_print+0x219>
mov    $0x80868d7,%eax
and    $0xfe,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888d0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2,%esi
je     8069240 <xfrm_state_info_print+0x250>
mov    $0x80868d7,%eax
and    $0xfd,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888d8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%esi
je     8069277 <xfrm_state_info_print+0x287>
mov    $0x80868d7,%eax
and    $0xfb,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888e5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x8,%esi
je     80692ae <xfrm_state_info_print+0x2be>
mov    $0x80868d7,%eax
and    $0xf7,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888f2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x10,%esi
je     80692e5 <xfrm_state_info_print+0x2f5>
mov    $0x80868d7,%eax
and    $0xef,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888fd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x20,%esi
je     806931c <xfrm_state_info_print+0x32c>
mov    $0x80868d7,%eax
and    $0xdf,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8088904,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x40,%esi
je     8069353 <xfrm_state_info_print+0x363>
mov    $0x80868d7,%eax
and    $0xbf,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8088910,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,%eax
test   %al,%al
jne    8069670 <xfrm_state_info_print+0x680>
mov    0x8095ca4,%esi
test   %esi,%esi
jle    8069433 <xfrm_state_info_print+0x443>
mov    0x2c(%esp),%eax
mov    0x60(%eax),%eax
test   %eax,%eax
je     80693df <xfrm_state_info_print+0x3ef>
mov    0x4(%eax),%esi
mov    %ebx,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088919,(%esp)
call   804b710 <fwrite@plt>
test   $0x1,%esi
je     80693cd <xfrm_state_info_print+0x3dd>
mov    $0x80868d7,%eax
and    $0xfffffffe,%esi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x8088925,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %esi,%esi
jne    8069698 <xfrm_state_info_print+0x6a8>
mov    0x8095ca4,%ecx
test   %ecx,%ecx
jle    8069433 <xfrm_state_info_print+0x443>
movzbl 0xd8(%ebp),%esi
mov    $0xffffff80,%ecx
xor    %eax,%eax
lea    0x0(%esi),%esi
mov    %esi,%edx
add    $0x1,%eax
and    %ecx,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
add    $0x31,%edx
shr    %cl
cmp    $0x8,%eax
mov    %dl,0x809642f(%eax)
jne    80693f0 <xfrm_state_info_print+0x400>
movl   $0x8096430,0xc(%esp)
movl   $0x8088937,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
movb   $0x0,0x8096438
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
mov    %ebx,0x8(%esp)
movzwl 0xd4(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8068830 <xfrm_xfrma_print>
lea    0x34(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0xe,%ecx
rep stos %eax,%es:(%edi)
movl   $0x38,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     8069530 <xfrm_state_info_print+0x540>
lea    0xec(%esp),%edi
mov    $0x20,%ecx
lea    0x6c(%esp),%esi
rep movsl %ds:(%esi),%es:(%edi)
lea    0xec(%esp),%esi
mov    %esi,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     80694ad <xfrm_state_info_print+0x4bd>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
mov    %esi,%eax
sub    %edx,%eax
add    $0x7f,%eax
test   %eax,%eax
jle    8069515 <xfrm_state_info_print+0x525>
cmp    $0x4,%eax
mov    $0x4,%edx
cmovge %edx,%eax
movl   $0x80,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x808a1e1,0x4(%esp)
mov    %esi,(%esp)
call   804bae0 <__strncat_chk@plt>
movb   $0x0,0x16b(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
movzwl 0xd4(%ebp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8068380 <xfrm_selector_print>
mov    0x8095ca4,%edx
test   %edx,%edx
jle    8069575 <xfrm_state_info_print+0x585>
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0xa0(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x60(%ebp),%eax
add    $0xc0,%ebp
mov    %eax,(%esp)
mov    %ebx,0x8(%esp)
call   8067f40 <xfrm_lifetime_print>
lea    0x6c(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   8067e80 <xfrm_stats_print>
mov    0x2c(%esp),%edi
mov    0x20(%edi),%eax
test   %eax,%eax
je     80695db <xfrm_state_info_print+0x5eb>
mov    %ebx,0xc(%esp)
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808893f,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%edi),%eax
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x7,%edx
jbe    8069640 <xfrm_state_info_print+0x650>
mov    0x8095c90,%edx
add    $0xc,%eax
mov    %eax,0xc(%esp)
movl   $0x8088952,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x16c(%esp),%eax
xor    %gs:0x14,%eax
jne    80696b9 <xfrm_state_info_print+0x6c9>
add    $0x17c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xcc(%ebp),%eax
movl   $0x808a1f2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%edi
test   %edi,%edi
jle    80691a1 <xfrm_state_info_print+0x1b1>
movzbl 0xd8(%ebp),%esi
jmp    80691b2 <xfrm_state_info_print+0x1c2>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x2c(%esp),%eax
mov    0x20(%eax),%eax
jmp    80695b2 <xfrm_state_info_print+0x5c2>
lea    0x0(%esi,%eiz,1),%esi
movzbl %al,%esi
mov    %esi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806935d <xfrm_state_info_print+0x36d>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80693d5 <xfrm_state_info_print+0x3e5>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xdc(%esp),%ecx
lea    0x2c(%esp),%ebp
mov    0xd4(%esp),%eax
mov    %ebp,%edi
mov    0xd0(%esp),%esi
mov    0xd8(%esp),%ebx
mov    %ecx,0x1c(%esp)
mov    %gs:0x14,%ecx
mov    %ecx,0xac(%esp)
xor    %ecx,%ecx
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    $0x20,%cl
rep stos %eax,%es:(%edi)
mov    0xe0(%esp),%eax
mov    %ebx,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
movzwl 0x8095ca8,%eax
mov    %eax,0x4(%esp)
call   8068380 <xfrm_selector_print>
mov    0x18(%esp),%edi
mov    0x20(%edi),%eax
test   %eax,%eax
je     8069799 <xfrm_policy_info_print+0xd9>
mov    %ebx,0xc(%esp)
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808893f,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%edi),%eax
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x7,%edx
jbe    8069b48 <xfrm_policy_info_print+0x488>
add    $0xc,%eax
mov    %eax,0xc(%esp)
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8069815 <xfrm_policy_info_print+0x155>
mov    %ebp,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     80697a3 <xfrm_policy_info_print+0xe3>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
mov    %ebp,%eax
sub    %edx,%eax
lea    0x7f(%eax),%edi
test   %edi,%edi
jle    8069864 <xfrm_policy_info_print+0x1a4>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804b880 <strlen@plt>
movl   $0x80,0xc(%esp)
mov    %ebp,(%esp)
cmp    %edi,%eax
cmovle %eax,%edi
mov    0x1c(%esp),%eax
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
call   804bae0 <__strncat_chk@plt>
movb   $0x0,0xab(%esp)
mov    %ebp,%edx
mov    (%edx),%ecx
add    $0x4,%edx
lea    -0x1010101(%ecx),%eax
not    %ecx
and    %ecx,%eax
and    $0x80808080,%eax
je     8069817 <xfrm_policy_info_print+0x157>
mov    %eax,%ecx
shr    $0x10,%ecx
test   $0x8080,%eax
cmove  %ecx,%eax
lea    0x2(%edx),%ecx
cmove  %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
mov    $0x7f,%eax
sub    %ebp,%edx
sub    %edx,%eax
test   %eax,%eax
jle    8069864 <xfrm_policy_info_print+0x1a4>
mov    $0x9,%eax
mov    %ax,0x0(%ebp,%edx,1)
movb   $0x0,0xab(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   804bb30 <fputs@plt>
movzbl 0xa0(%esi),%eax
cmp    $0x2,%al
jbe    8069bc0 <xfrm_policy_info_print+0x500>
sub    $0x3,%eax
mov    %al,0xa0(%esi)
mov    %ebx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088958,(%esp)
call   804b710 <fwrite@plt>
movzbl 0xa0(%esi),%eax
cmp    $0x1,%al
je     8069bef <xfrm_policy_info_print+0x52f>
jb     8069cc8 <xfrm_policy_info_print+0x608>
cmp    $0x2,%al
jne    8069ca0 <xfrm_policy_info_print+0x5e0>
mov    %ebx,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088969,(%esp)
call   804b710 <fwrite@plt>
mov    %ebx,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
movzbl 0xa1(%esi),%eax
test   %al,%al
je     8069c68 <xfrm_policy_info_print+0x5a8>
cmp    $0x1,%al
jne    8069c18 <xfrm_policy_info_print+0x558>
mov    %ebx,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808897b,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jne    8069c41 <xfrm_policy_info_print+0x581>
mov    0x98(%esi),%eax
movl   $0x808899e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esp),%edi
mov    0x40(%edi),%eax
test   %eax,%eax
je     80699c0 <xfrm_policy_info_print+0x300>
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80889ab,(%esp)
call   804b710 <fwrite@plt>
mov    0x40(%edi),%eax
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x5,%edx
jbe    8069d18 <xfrm_policy_info_print+0x658>
movzbl 0x4(%eax),%eax
mov    %eax,(%esp)
call   8067a60 <strxf_ptype>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%edi
test   %edi,%edi
jg     8069b78 <xfrm_policy_info_print+0x4b8>
movzbl 0xa2(%esi),%eax
test   %al,%al
je     8069ad3 <xfrm_policy_info_print+0x413>
mov    %eax,%edi
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808891f,(%esp)
call   804b710 <fwrite@plt>
test   $0x1,%edi
je     8069a36 <xfrm_policy_info_print+0x376>
mov    $0x80868d7,%eax
and    $0xfe,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80889b2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2,%edi
je     8069a6d <xfrm_policy_info_print+0x3ad>
mov    $0x80868d7,%eax
and    $0xfd,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x80888fd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,%eax
test   %al,%al
jne    8069cf0 <xfrm_policy_info_print+0x630>
mov    0x8095ca4,%edx
test   %edx,%edx
jle    8069ad3 <xfrm_policy_info_print+0x413>
movzbl 0xa2(%esi),%edi
mov    $0xffffff80,%ecx
xor    %eax,%eax
nop
mov    %edi,%edx
add    $0x1,%eax
and    %ecx,%edx
cmp    $0x1,%dl
sbb    %edx,%edx
add    $0x31,%edx
shr    %cl
cmp    $0x8,%eax
mov    %dl,0x809642f(%eax)
jne    8069a90 <xfrm_policy_info_print+0x3d0>
movl   $0x8096430,0xc(%esp)
movl   $0x8088937,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
movb   $0x0,0x8096438
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8069b07 <xfrm_policy_info_print+0x447>
lea    0x78(%esi),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esi),%eax
mov    %ebp,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
call   8067f40 <xfrm_lifetime_print>
mov    %ebp,0xc(%esp)
mov    %ebx,0x8(%esp)
movzwl 0x28(%esi),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8068830 <xfrm_xfrma_print>
mov    0xac(%esp),%eax
xor    %gs:0x14,%eax
jne    8069d44 <xfrm_policy_info_print+0x684>
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x18(%esp),%eax
mov    0x20(%eax),%eax
jmp    8069769 <xfrm_policy_info_print+0xa9>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0xa3(%esi),%eax
mov    %eax,(%esp)
call   8067920 <strxf_share>
movl   $0x808888e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%ecx
test   %ecx,%ecx
jle    80699ce <xfrm_policy_info_print+0x30e>
movzbl 0xa2(%esi),%edi
jmp    80699df <xfrm_policy_info_print+0x31f>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088960,(%esp)
call   804b710 <fwrite@plt>
movzbl 0xa0(%esi),%eax
cmp    $0x1,%al
jne    80698b7 <xfrm_policy_info_print+0x1f7>
mov    %ebx,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088965,(%esp)
call   804b710 <fwrite@plt>
jmp    80698e5 <xfrm_policy_info_print+0x225>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
movl   $0x8088989,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
je     8069939 <xfrm_policy_info_print+0x279>
mov    0x9c(%esi),%eax
movl   $0x8088994,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8069939 <xfrm_policy_info_print+0x279>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8069931 <xfrm_policy_info_print+0x271>
mov    %ebx,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808896d,(%esp)
call   804b710 <fwrite@plt>
mov    0x8095ca4,%eax
jmp    8069931 <xfrm_policy_info_print+0x271>
nop
mov    %eax,0xc(%esp)
movl   $0x80886cd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80698e5 <xfrm_policy_info_print+0x225>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089b8f,(%esp)
call   804b710 <fwrite@plt>
jmp    80698e5 <xfrm_policy_info_print+0x225>
lea    0x0(%esi),%esi
movzbl %al,%edi
mov    %edi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8069a77 <xfrm_policy_info_print+0x3b7>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x18(%esp),%eax
mov    0x40(%eax),%eax
jmp    8069998 <xfrm_policy_info_print+0x2d8>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    $0xa,%ecx
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xb0(%esp),%eax
lea    0x30(%esp),%edi
mov    (%eax),%eax
mov    %eax,0x10(%esp)
mov    0xb4(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x14(%esp)
xor    %eax,%eax
rep stos %eax,%es:(%edi)
lea    0x58(%esp),%edi
mov    $0xa,%cl
rep stos %eax,%es:(%edi)
mov    0x10(%esp),%eax
lea    -0x1(%eax),%ebp
mov    0x14(%esp),%eax
lea    0x4(%eax),%ebx
jmp    8069e40 <xfrm_id_parse+0xf0>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x72,0x1(%eax)
jne    8069e69 <xfrm_id_parse+0x119>
cmpb   $0x63,0x2(%eax)
jne    8069e69 <xfrm_id_parse+0x119>
cmpb   $0x0,0x3(%eax)
jne    8069e69 <xfrm_id_parse+0x119>
test   %ebp,%ebp
mov    %ebp,%esi
jle    806a0c0 <xfrm_id_parse+0x370>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x58(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzbl 0x58(%esp),%eax
test   %al,%al
je     806a0c5 <xfrm_id_parse+0x375>
mov    0xa8(%esp),%edi
test   %edi,%edi
je     8069e05 <xfrm_id_parse+0xb5>
mov    0xa8(%esp),%edi
mov    %ax,(%edi)
mov    0xa0(%esp),%edi
mov    0x60(%esp),%eax
mov    %eax,(%edi)
mov    0x64(%esp),%eax
mov    %eax,0x4(%edi)
mov    0x68(%esp),%eax
mov    %eax,0x8(%edi)
mov    0x6c(%esp),%eax
mov    %eax,0xc(%edi)
movzwl 0x5a(%esp),%eax
mov    %al,0x8098aa0
sub    $0x2,%ebp
add    $0x8,%ebx
cmp    $0x1,%esi
je     8069fca <xfrm_id_parse+0x27a>
lea    0x1(%ebp),%eax
mov    $0x73,%edx
mov    %eax,0x1c(%esp)
lea    -0x4(%ebx),%eax
mov    %eax,0x18(%esp)
mov    -0x4(%ebx),%eax
mov    %ebx,0x10(%esp)
movzbl (%eax),%ecx
sub    %ecx,%edx
mov    %edx,0x14(%esp)
je     8069da0 <xfrm_id_parse+0x50>
cmp    $0x64,%ecx
jne    8069f00 <xfrm_id_parse+0x1b0>
cmpb   $0x73,0x1(%eax)
jne    8069f00 <xfrm_id_parse+0x1b0>
cmpb   $0x74,0x2(%eax)
jne    8069f00 <xfrm_id_parse+0x1b0>
cmpb   $0x0,0x3(%eax)
jne    8069f00 <xfrm_id_parse+0x1b0>
test   %ebp,%ebp
mov    %ebp,%esi
jle    806a0c0 <xfrm_id_parse+0x370>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzbl 0x30(%esp),%eax
test   %al,%al
je     806a0dc <xfrm_id_parse+0x38c>
mov    0xa8(%esp),%ecx
test   %ecx,%ecx
je     8069ecf <xfrm_id_parse+0x17f>
mov    0xa8(%esp),%ecx
mov    %ax,(%ecx)
mov    0xa4(%esp),%ecx
mov    0x38(%esp),%eax
mov    %eax,(%ecx)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%ecx)
mov    0x40(%esp),%eax
mov    %eax,0x8(%ecx)
mov    0x44(%esp),%eax
mov    %eax,0xc(%ecx)
movzwl 0x32(%esp),%eax
mov    %al,0x8098aa1
jmp    8069e31 <xfrm_id_parse+0xe1>
mov    $0x6,%ecx
mov    %eax,%esi
mov    $0x80889bc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8069f50 <xfrm_id_parse+0x200>
test   %ebp,%ebp
mov    %ebp,%esi
jle    806a0c0 <xfrm_id_parse+0x370>
mov    (%ebx),%edi
mov    %edi,(%esp)
call   8067340 <xfrm_xfrmproto_getbyname>
test   %eax,%eax
js     806a145 <xfrm_id_parse+0x3f5>
mov    0xa4(%esp),%edi
mov    %al,0x14(%edi)
movb   $0xff,0x8098aa2
jmp    8069e31 <xfrm_id_parse+0xe1>
xchg   %ax,%ax
mov    0x14(%esp),%edx
test   %edx,%edx
jne    8069fb8 <xfrm_id_parse+0x268>
cmpb   $0x70,0x1(%eax)
jne    8069fb8 <xfrm_id_parse+0x268>
cmpb   $0x69,0x2(%eax)
jne    8069fb8 <xfrm_id_parse+0x268>
cmpb   $0x0,0x3(%eax)
jne    8069fb8 <xfrm_id_parse+0x268>
test   %ebp,%ebp
mov    %ebp,%esi
jle    806a0c0 <xfrm_id_parse+0x370>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806a12e <xfrm_id_parse+0x3de>
mov    0x2c(%esp),%eax
mov    0xa4(%esp),%edx
bswap  %eax
mov    %eax,0x10(%edx)
movl   $0xffffffff,0x8098aa4
ff
jmp    8069e31 <xfrm_id_parse+0xe1>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
sub    $0x4,%eax
mov    %eax,0x10(%esp)
lea    0x1(%edx),%esi
movzbl 0x58(%esp),%eax
test   %al,%al
je     8069fe4 <xfrm_id_parse+0x294>
movzbl 0x30(%esp),%edx
test   %dl,%dl
je     8069fe4 <xfrm_id_parse+0x294>
cmp    %dl,%al
jne    806a0f3 <xfrm_id_parse+0x3a3>
mov    0xa4(%esp),%eax
mov    0x10(%eax),%eax
test   %eax,%eax
je     806a018 <xfrm_id_parse+0x2c8>
mov    0xa4(%esp),%ebx
movzbl 0x14(%ebx),%edx
test   %dl,%dl
je     806a018 <xfrm_id_parse+0x2c8>
cmp    $0x3c,%dl
je     806a109 <xfrm_id_parse+0x3b9>
cmp    $0x2b,%dl
je     806a109 <xfrm_id_parse+0x3b9>
cmp    $0x6c,%dl
je     806a078 <xfrm_id_parse+0x328>
mov    0xac(%esp),%eax
test   %eax,%eax
je     806a058 <xfrm_id_parse+0x308>
mov    0xb0(%esp),%eax
cmp    %esi,(%eax)
je     806a122 <xfrm_id_parse+0x3d2>
mov    0xb0(%esp),%eax
mov    %esi,(%eax)
mov    0xb4(%esp),%eax
mov    0x10(%esp),%esi
mov    %esi,(%eax)
add    $0x8c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xa4(%esp),%eax
cmpb   $0x0,0x14(%eax)
jne    806a023 <xfrm_id_parse+0x2d3>
movl   $0x80889f3,(%esp)
call   8080060 <missarg>
lea    0x0(%esi,%eiz,1),%esi
bswap  %eax
cmp    $0xffff,%eax
jbe    806a018 <xfrm_id_parse+0x2c8>
movl   $0x6c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088440,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
call   8080010 <incomplete_command>
mov    0x18(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088354,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x18(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x808838c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x10(%esp),%eax
mov    (%eax),%eax
movl   $0x80883c4,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %edx,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088410,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806a099 <xfrm_id_parse+0x349>
movl   $0x80889fe,(%esp)
call   8080060 <missarg>
mov    0x18(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x80889de,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %edi,0x4(%esp)
movl   $0x80889c2,(%esp)
call   80800b0 <invarg>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%esi
mov    0x34(%esp),%edi
mov    (%esi),%ebx
mov    (%edi),%ebp
movl   $0x80886d9,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806a1a0 <xfrm_mode_parse+0x40>
mov    0x30(%esp),%eax
movb   $0x0,(%eax)
mov    %ebp,(%edi)
xor    %eax,%eax
mov    %ebx,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x8082d64,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806a1d0 <xfrm_mode_parse+0x70>
mov    0x30(%esp),%eax
movb   $0x1,(%eax)
xor    %eax,%eax
mov    %ebp,(%edi)
mov    %ebx,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80886e3,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806a1f0 <xfrm_mode_parse+0x90>
mov    0x30(%esp),%eax
movb   $0x2,(%eax)
jmp    806a190 <xfrm_mode_parse+0x30>
nop
movl   $0x80886e6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806a210 <xfrm_mode_parse+0xb0>
mov    0x30(%esp),%eax
movb   $0x3,(%eax)
jmp    806a190 <xfrm_mode_parse+0x30>
nop
movl   $0x80886f1,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806a232 <xfrm_mode_parse+0xd2>
mov    0x30(%esp),%eax
movb   $0x4,(%eax)
jmp    806a190 <xfrm_mode_parse+0x30>
mov    (%ebx),%eax
movl   $0x8088a01,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
mov    $0x10,%ecx
push   %esi
mov    $0x8088a17,%edi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    (%eax),%eax
mov    (%eax),%eax
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806a298 <xfrm_encap_type_parse+0x48>
mov    $0x8088a27,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806a2ac <xfrm_encap_type_parse+0x5c>
mov    0x20(%esp),%eax
mov    $0x2,%edx
mov    %dx,(%eax)
add    $0x14,%esp
xor    %eax,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
mov    $0x1,%ecx
mov    %cx,(%eax)
add    $0x14,%esp
xor    %eax,%eax
pop    %esi
pop    %edi
ret
mov    %eax,0x4(%esp)
movl   $0x8088a30,(%esp)
call   80800b0 <invarg>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%esi
mov    0x34(%esp),%edi
mov    (%esi),%ebx
mov    (%edi),%ebp
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806a2ff <xfrm_reqid_parse+0x3f>
mov    %ebp,(%edi)
xor    %eax,%eax
mov    %ebx,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%ebx),%eax
movl   $0x8088a4c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
jmp    806a320 <xfrm_selector_parse>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
mov    $0xa,%ecx
push   %edi
xor    %ebp,%ebp
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc4(%esp),%eax
lea    0x50(%esp),%edi
mov    %ebp,0x24(%esp)
mov    0xc0(%esp),%ebp
mov    (%eax),%eax
mov    %eax,0x20(%esp)
mov    0xc8(%esp),%eax
mov    (%eax),%ebx
xor    %eax,%eax
rep stos %eax,%es:(%edi)
lea    0x78(%esp),%edi
mov    $0xa,%cl
rep stos %eax,%es:(%edi)
mov    0xc0(%esp),%eax
add    $0x20,%eax
mov    %eax,0x2c(%esp)
jmp    806a41c <xfrm_selector_parse+0xfc>
lea    0x0(%esi),%esi
cmp    $0x64,%eax
jne    806a43c <xfrm_selector_parse+0x11c>
mov    0x1c(%esp),%eax
movzbl 0x1(%eax),%eax
cmp    $0x73,%al
je     806aa28 <xfrm_selector_parse+0x708>
cmp    $0x65,%al
jne    806a43c <xfrm_selector_parse+0x11c>
mov    0x1c(%esp),%eax
cmpb   $0x76,0x2(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
cmpb   $0x0,0x3(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
lea    0x4(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x20(%esp),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x14(%esp)
jle    806ab77 <xfrm_selector_parse+0x857>
mov    0x4(%ebx),%eax
mov    $0x5,%ecx
mov    $0x8086369,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x1c(%esp)
seta   %al
setb   %cl
mov    %eax,%esi
xor    %eax,%eax
mov    %esi,%edx
cmp    %cl,%dl
jne    806aae1 <xfrm_selector_parse+0x7c1>
mov    %eax,0x30(%ebp)
movl   $0xffffffff,0x8098b5c
ff
mov    0x14(%esp),%eax
cmp    $0x1,%eax
jle    806a82d <xfrm_selector_parse+0x50d>
mov    0x18(%esp),%ebx
sub    $0x1,%eax
mov    %eax,0x20(%esp)
add    $0x4,%ebx
mov    (%ebx),%eax
mov    %eax,0x1c(%esp)
movzbl (%eax),%eax
cmp    $0x73,%eax
jne    806a378 <xfrm_selector_parse+0x58>
mov    0x1c(%esp),%eax
cmpb   $0x72,0x1(%eax)
je     806a790 <xfrm_selector_parse+0x470>
mov    0x24(%esp),%esi
test   %esi,%esi
jne    806ab60 <xfrm_selector_parse+0x840>
mov    0x20(%esp),%eax
add    $0x4,%ebx
mov    %ebp,0xc0(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x34(%esp)
lea    -0x1(%eax),%edx
mov    0x1c(%esp),%eax
mov    %edx,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
mov    %eax,%edx
jmp    806a4de <xfrm_selector_parse+0x1be>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
mov    %ebx,%edi
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
mov    (%ebx),%eax
cmpb   $0x61,(%eax)
je     806a640 <xfrm_selector_parse+0x320>
mov    %eax,(%esp)
call   804b580 <getprotobyname@plt>
test   %eax,%eax
je     806aab5 <xfrm_selector_parse+0x795>
movzbl 0x8(%eax),%eax
mov    0xc0(%esp),%edx
mov    %al,0x2c(%edx)
movb   $0xff,0x8098b60
sub    $0x2,%ebp
add    $0x8,%ebx
cmp    $0x1,%esi
je     806a5a0 <xfrm_selector_parse+0x280>
mov    -0x4(%ebx),%edx
mov    $0x6,%ecx
mov    %edx,%esi
mov    $0x80889bc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
lea    0x1(%ebp),%eax
mov    %eax,0x18(%esp)
lea    -0x4(%ebx),%eax
mov    %eax,0x14(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
je     806a490 <xfrm_selector_parse+0x170>
mov    $0x808b16b,%edi
mov    $0x6,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806a5b8 <xfrm_selector_parse+0x298>
test   %ebp,%ebp
mov    %ebx,%edi
mov    %edx,0x18(%esp)
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0xc0(%esp),%eax
add    $0x24,%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
mov    0x18(%esp),%edx
test   %eax,%eax
jne    806ab7c <xfrm_selector_parse+0x85c>
mov    0xc0(%esp),%eax
mov    0xc0(%esp),%ecx
movzwl 0x24(%eax),%eax
ror    $0x8,%ax
test   %ax,%ax
mov    %ax,0x24(%ecx)
je     806a582 <xfrm_selector_parse+0x262>
mov    %ecx,%eax
mov    $0xffffffff,%ecx
mov    %cx,0x26(%eax)
mov    $0xffffffff,%eax
sub    $0x2,%ebp
add    $0x8,%ebx
cmp    $0x1,%esi
mov    %ax,0x8098b62
mov    %edx,0x24(%esp)
jne    806a4db <xfrm_selector_parse+0x1bb>
mov    %edi,0x18(%esp)
mov    0xc0(%esp),%ebp
mov    %esi,0x14(%esp)
jmp    806a96d <xfrm_selector_parse+0x64d>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x808b183,%edi
mov    $0x6,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806a668 <xfrm_selector_parse+0x348>
test   %ebp,%ebp
mov    %ebx,%edi
mov    %edx,0x18(%esp)
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
mov    0x18(%esp),%edx
test   %eax,%eax
jne    806ac2a <xfrm_selector_parse+0x90a>
mov    0xc0(%esp),%eax
mov    0xc0(%esp),%ecx
movzwl 0x20(%eax),%eax
ror    $0x8,%ax
test   %ax,%ax
mov    %ax,0x20(%ecx)
je     806a62c <xfrm_selector_parse+0x30c>
mov    %ecx,%eax
mov    $0xffffffff,%ecx
mov    %cx,0x22(%eax)
mov    $0xffffffff,%eax
mov    %ax,0x8098b64
mov    %edx,0x28(%esp)
jmp    806a4cc <xfrm_selector_parse+0x1ac>
cmpb   $0x6e,0x1(%eax)
jne    806a4a7 <xfrm_selector_parse+0x187>
cmpb   $0x79,0x2(%eax)
jne    806a4a7 <xfrm_selector_parse+0x187>
cmpb   $0x0,0x3(%eax)
jne    806a4a7 <xfrm_selector_parse+0x187>
xor    %eax,%eax
jmp    806a4bb <xfrm_selector_parse+0x19b>
lea    0x0(%esi),%esi
mov    $0x8084f55,%edi
mov    $0x5,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806a700 <xfrm_selector_parse+0x3e0>
test   %ebp,%ebp
mov    %ebx,%edi
mov    %edx,0x18(%esp)
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0xc0(%esp),%eax
add    $0x24,%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
mov    0x18(%esp),%edx
test   %eax,%eax
jne    806ac13 <xfrm_selector_parse+0x8f3>
mov    0xc0(%esp),%eax
movzwl 0x24(%eax),%eax
test   $0xff,%ah
jne    806ac13 <xfrm_selector_parse+0x8f3>
mov    0xc0(%esp),%ecx
ror    $0x8,%ax
mov    %edx,0x30(%esp)
mov    %ax,0x24(%ecx)
mov    %ecx,%eax
mov    $0xffffffff,%ecx
mov    %cx,0x26(%eax)
mov    $0xffffffff,%eax
mov    %ax,0x8098b62
jmp    806a4cc <xfrm_selector_parse+0x1ac>
lea    0x0(%esi),%esi
mov    $0x8088a96,%edi
mov    $0x5,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806a888 <xfrm_selector_parse+0x568>
test   %ebp,%ebp
mov    %ebx,%edi
mov    %edx,0x18(%esp)
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
mov    0x18(%esp),%edx
test   %eax,%eax
jne    806ac60 <xfrm_selector_parse+0x940>
mov    0xc0(%esp),%eax
movzwl 0x20(%eax),%eax
test   $0xff,%ah
jne    806ac60 <xfrm_selector_parse+0x940>
mov    0xc0(%esp),%ecx
ror    $0x8,%ax
mov    %edx,0x34(%esp)
mov    %ax,0x20(%ecx)
mov    %ecx,%eax
mov    $0xffffffff,%ecx
mov    %cx,0x22(%eax)
mov    $0xffffffff,%eax
mov    %ax,0x8098b64
jmp    806a4cc <xfrm_selector_parse+0x1ac>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x63,0x2(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
cmpb   $0x0,0x3(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
lea    0x4(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x20(%esp),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x14(%esp)
jle    806ab77 <xfrm_selector_parse+0x857>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x78(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzbl 0x78(%esp),%eax
test   %al,%al
je     806ac4d <xfrm_selector_parse+0x92d>
mov    0x80(%esp),%edx
mov    %ax,0x28(%ebp)
movzwl 0x7a(%esp),%eax
mov    %edx,0x10(%ebp)
mov    0x84(%esp),%edx
mov    %al,0x2b(%ebp)
mov    %edx,0x14(%ebp)
mov    0x88(%esp),%edx
mov    %edx,0x18(%ebp)
mov    0x8c(%esp),%edx
mov    %edx,0x1c(%ebp)
mov    %al,0x8098b59
mov    0x14(%esp),%eax
cmp    $0x1,%eax
jg     806a40e <xfrm_selector_parse+0xee>
movzbl 0x78(%esp),%eax
test   %al,%al
je     806a847 <xfrm_selector_parse+0x527>
movzbl 0x50(%esp),%edx
test   %dl,%dl
je     806a847 <xfrm_selector_parse+0x527>
cmp    %dl,%al
jne    806ac77 <xfrm_selector_parse+0x957>
mov    0xc4(%esp),%eax
mov    0x14(%esp),%edi
cmp    (%eax),%edi
je     806abbd <xfrm_selector_parse+0x89d>
mov    0xc4(%esp),%eax
mov    0x14(%esp),%edi
mov    %edi,(%eax)
mov    0xc8(%esp),%eax
mov    0x18(%esp),%edi
mov    %edi,(%eax)
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x6b,(%edx)
jne    806a950 <xfrm_selector_parse+0x630>
cmpb   $0x65,0x1(%edx)
jne    806a950 <xfrm_selector_parse+0x630>
cmpb   $0x79,0x2(%edx)
jne    806a950 <xfrm_selector_parse+0x630>
cmpb   $0x0,0x3(%edx)
mov    %edx,0x3c(%esp)
jne    806a950 <xfrm_selector_parse+0x630>
test   %ebp,%ebp
mov    %ebx,%edi
mov    %ebp,%esi
jle    806ab77 <xfrm_selector_parse+0x857>
mov    (%ebx),%ecx
movl   $0x2e,0x4(%esp)
mov    %ecx,(%esp)
mov    %ecx,0x14(%esp)
call   804b860 <strchr@plt>
mov    0x14(%esp),%ecx
mov    0x3c(%esp),%edx
test   %eax,%eax
je     806ab08 <xfrm_selector_parse+0x7e8>
mov    %ecx,(%esp)
mov    %edx,0x18(%esp)
call   807ffa0 <get_addr32>
mov    0x18(%esp),%edx
bswap  %eax
mov    %eax,0x14(%esp)
mov    0xc0(%esp),%eax
mov    0x14(%esp),%ecx
mov    %edx,0x38(%esp)
shr    $0x10,%ecx
ror    $0x8,%cx
mov    %cx,0x24(%eax)
mov    0xc0(%esp),%ecx
movzwl 0x14(%esp),%eax
ror    $0x8,%ax
mov    %ax,0x20(%ecx)
mov    %ecx,%eax
mov    $0xffffffff,%ecx
mov    %cx,0x26(%eax)
mov    $0xffffffff,%ecx
mov    %cx,0x22(%eax)
mov    $0xffffffff,%eax
mov    %ax,0x8098b64
jmp    806a4cc <xfrm_selector_parse+0x1ac>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    0x14(%esp),%edi
mov    0xc0(%esp),%ebp
add    $0x1,%eax
sub    $0x4,%edi
mov    %edi,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x14(%esp),%eax
cmp    %eax,0x20(%esp)
je     806ac41 <xfrm_selector_parse+0x921>
mov    0x28(%esp),%esi
test   %esi,%esi
jne    806a98b <xfrm_selector_parse+0x66b>
mov    0x24(%esp),%ebx
test   %ebx,%ebx
je     806a9a8 <xfrm_selector_parse+0x688>
movzbl 0x2c(%ebp),%eax
cmp    $0x11,%al
je     806a9a8 <xfrm_selector_parse+0x688>
jbe    806ab3d <xfrm_selector_parse+0x81d>
cmp    $0x21,%al
je     806a9a8 <xfrm_selector_parse+0x688>
cmp    $0x84,%al
nop
jne    806ab45 <xfrm_selector_parse+0x825>
xchg   %ax,%ax
mov    0x34(%esp),%ecx
test   %ecx,%ecx
jne    806a9b8 <xfrm_selector_parse+0x698>
mov    0x30(%esp),%edx
test   %edx,%edx
je     806aa00 <xfrm_selector_parse+0x6e0>
movzbl 0x2c(%ebp),%eax
cmp    $0x3a,%al
je     806aa00 <xfrm_selector_parse+0x6e0>
cmp    $0x87,%al
je     806aa00 <xfrm_selector_parse+0x6e0>
cmp    $0x1,%al
je     806aa00 <xfrm_selector_parse+0x6e0>
mov    %eax,(%esp)
call   8067a00 <strxf_proto>
movl   $0x80884ec,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
test   %eax,%eax
je     806aa14 <xfrm_selector_parse+0x6f4>
movzbl 0x2c(%ebp),%eax
cmp    $0x2f,%al
jne    806abc9 <xfrm_selector_parse+0x8a9>
mov    0x1c(%esp),%eax
mov    %eax,0x24(%esp)
jmp    806a401 <xfrm_selector_parse+0xe1>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
cmpb   $0x74,0x2(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
cmpb   $0x0,0x3(%eax)
jne    806a43c <xfrm_selector_parse+0x11c>
lea    0x4(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x20(%esp),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x14(%esp)
jle    806ab77 <xfrm_selector_parse+0x857>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
movzbl 0x50(%esp),%eax
test   %al,%al
je     806abaa <xfrm_selector_parse+0x88a>
mov    %ax,0x28(%ebp)
mov    0x58(%esp),%eax
mov    %eax,0x0(%ebp)
mov    0x5c(%esp),%eax
mov    %eax,0x4(%ebp)
mov    0x60(%esp),%eax
mov    %eax,0x8(%ebp)
mov    0x64(%esp),%eax
mov    %eax,0xc(%ebp)
movzwl 0x52(%esp),%eax
mov    %al,0x2a(%ebp)
mov    %al,0x8098b5a
jmp    806a401 <xfrm_selector_parse+0xe1>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    806ab93 <xfrm_selector_parse+0x873>
movzbl 0x4c(%esp),%eax
jmp    806a4bb <xfrm_selector_parse+0x19b>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
jg     806a3f4 <xfrm_selector_parse+0xd4>
mov    0x4(%ebx),%eax
movl   $0x8088a63,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x4c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x14(%esp)
call   807f320 <get_unsigned>
mov    0x14(%esp),%edx
test   %eax,%eax
js     806abe2 <xfrm_selector_parse+0x8c2>
mov    0x4c(%esp),%eax
mov    %eax,0x14(%esp)
jmp    806a8fb <xfrm_selector_parse+0x5db>
cmp    $0x6,%al
je     806a9a8 <xfrm_selector_parse+0x688>
mov    %eax,(%esp)
call   8067a00 <strxf_proto>
movl   $0x80884b4,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806a9dc <xfrm_selector_parse+0x6bc>
xchg   %ax,%ax
lea    -0x4(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x20(%esp),%eax
add    $0x1,%eax
mov    %eax,0x14(%esp)
jmp    806a82d <xfrm_selector_parse+0x50d>
call   8080010 <incomplete_command>
mov    0x14(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088474,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x14(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x80889c7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808838c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8088ade,(%esp)
call   8080060 <missarg>
mov    %eax,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088524,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806a9dc <xfrm_selector_parse+0x6bc>
mov    0x8095c40,%eax
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088ab9,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x14(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088a78,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x14(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088494,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8088ad7,(%esp)
call   8080060 <missarg>
mov    0x4(%ebx),%eax
movl   $0x8088354,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x14(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088a9b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x18(%esp),%eax
mov    (%eax),%eax
movl   $0x80883c4,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
push   %ebp
mov    $0xa,%ecx
push   %edi
mov    $0x8088ae7,%edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x0(%ebp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    (%eax),%ebx
mov    (%ebx),%eax
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806ad18 <xfrm_lifetime_cfg_parse+0x88>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x20,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
jne    806afa3 <xfrm_lifetime_cfg_parse+0x313>
mov    0x38(%esp),%eax
mov    %esi,0x0(%ebp)
mov    %edi,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088af1,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806ad70 <xfrm_lifetime_cfg_parse+0xe0>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x28,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x8088570,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
mov    $0x8088afb,%edi
mov    $0xe,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806ade0 <xfrm_lifetime_cfg_parse+0x150>
mov    $0x8088b09,%edi
mov    $0xe,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806ae30 <xfrm_lifetime_cfg_parse+0x1a0>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x38,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x80885bc,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x30,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x8088594,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088b17,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806aea0 <xfrm_lifetime_cfg_parse+0x210>
mov    $0x8088b21,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806aef0 <xfrm_lifetime_cfg_parse+0x260>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x8,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x8088608,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x80885e4,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   8080010 <incomplete_command>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088b2b,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806af48 <xfrm_lifetime_cfg_parse+0x2b8>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x10,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x808862c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
mov    $0x8088b37,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806afb6 <xfrm_lifetime_cfg_parse+0x326>
mov    0xc(%esp),%esi
lea    0x4(%ebx),%edi
sub    $0x1,%esi
test   %esi,%esi
jle    806aee4 <xfrm_lifetime_cfg_parse+0x254>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
add    $0x18,%eax
mov    %eax,(%esp)
call   807f610 <get_u64>
test   %eax,%eax
je     806acfe <xfrm_lifetime_cfg_parse+0x6e>
mov    0x4(%ebx),%eax
movl   $0x8088654,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808854c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0x4(%esp)
movl   $0x8088b43,(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x80989c0,%edx
push   %esi
xor    %eax,%eax
push   %ebx
mov    $0x6e,%ecx
sub    $0x10,%esp
mov    %edx,%edi
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
rep stos %eax,%es:(%edi)
test   %esi,%esi
jle    806b07e <do_xfrm+0xae>
movl   $0x80878b4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806b022 <do_xfrm+0x52>
movl   $0x8088b5a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806b040 <do_xfrm+0x70>
add    $0x4,%ebx
sub    $0x1,%esi
mov    %ebx,0x24(%esp)
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    806d800 <do_xfrm_state>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8088b5d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806b088 <do_xfrm+0xb8>
movl   $0x8082d94,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806b0a8 <do_xfrm+0xd8>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
call   8067170 <do_iptoken+0x120>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
sub    $0x1,%esi
mov    %ebx,0x24(%esp)
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8070310 <do_xfrm_policy>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
sub    $0x1,%esi
mov    %ebx,0x24(%esp)
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8071850 <do_xfrm_monitor>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x1c,%esp
mov    (%ecx),%esi
movl   $0x0,0x8(%esp)
mov    (%edx),%edi
mov    %ecx,0xc(%esp)
mov    (%esi),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807f6a0 <get_u32>
mov    0xc(%esp),%ecx
test   %eax,%eax
jne    806b116 <do_xfrm+0x146>
mov    (%ebx),%eax
bswap  %eax
mov    %eax,(%ebx)
xor    %eax,%eax
mov    %edi,0x0(%ebp)
mov    %esi,(%ecx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%esi),%eax
movl   $0x8088c38,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    (%ecx),%ebp
mov    %edx,0x18(%esp)
mov    (%edx),%edx
mov    %eax,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    0x0(%ebp),%ebx
mov    %edx,0x14(%esp)
mov    %ebx,(%esp)
call   804b880 <strlen@plt>
mov    0x14(%esp),%edx
cmp    $0x2,%eax
jle    806b1d5 <do_xfrm+0x205>
mov    $0x8088698,%edi
mov    $0x2,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b1d5 <do_xfrm+0x205>
lea    0x2f(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x14(%esp)
movb   $0x0,0x2f(%esp)
call   807f790 <get_u8>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    806b2b7 <do_xfrm+0x2e7>
movzbl 0x2f(%esp),%eax
mov    0x10(%esp),%ebx
mov    %al,(%ebx)
nop
mov    0x18(%esp),%eax
mov    %edx,(%eax)
mov    0x1c(%esp),%eax
mov    %ebp,(%eax)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x10(%esp),%eax
orb    $0x1,(%eax)
cmp    $0x1,%edx
jle    806b1a8 <do_xfrm+0x1d8>
add    $0x4,%ebp
mov    0x0(%ebp),%ebx
sub    $0x1,%edx
mov    %ebx,%esi
mov    $0x6,%ecx
mov    $0x8088c63,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
je     806b1c0 <do_xfrm+0x1f0>
mov    $0x8088c69,%edi
mov    %ebx,%esi
mov    $0xb,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b210 <do_xfrm+0x240>
mov    0x10(%esp),%eax
orb    $0x2,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
lea    0x0(%esi),%esi
mov    $0x8085e09,%edi
mov    %ebx,%esi
mov    $0xb,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b230 <do_xfrm+0x260>
mov    0x10(%esp),%eax
orb    $0x4,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088c74,%edi
mov    $0x9,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b250 <do_xfrm+0x280>
mov    0x10(%esp),%eax
orb    $0x8,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088c7d,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b270 <do_xfrm+0x2a0>
mov    0x10(%esp),%eax
orb    $0x10,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088c82,%edi
mov    $0xa,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806b2a0 <do_xfrm+0x2d0>
mov    $0x8088c8c,%edi
mov    $0x7,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806b2ac <do_xfrm+0x2dc>
mov    0x10(%esp),%eax
orb    $0x40,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%esp),%eax
orb    $0x20,(%eax)
jmp    806b1c7 <do_xfrm+0x1f7>
sub    $0x4,%ebp
add    $0x1,%edx
jmp    806b1a8 <do_xfrm+0x1d8>
mov    0x0(%ebp),%eax
movl   $0x8088c4d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x80989c0,%edx
test   %edx,%edx
je     806b380 <do_xfrm+0x3b0>
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
movzbl 0x8098aa0,%eax
test   %al,%al
jne    806b388 <do_xfrm+0x3b8>
movzbl 0x8098aa1,%eax
test   %al,%al
jne    806b3b0 <do_xfrm+0x3e0>
movzbl 0x8098a10,%eax
xor    0x4c(%ebx),%al
test   %al,0x8098aa2
jne    806b3a7 <do_xfrm+0x3d7>
mov    0x8098a0c,%edx
xor    %eax,%eax
xor    0x48(%ebx),%edx
test   %edx,0x8098aa4
jne    806b378 <do_xfrm+0x3a8>
movzbl 0x8098a9a,%edx
xor    0xd6(%ebx),%dl
test   %dl,0x8098aa8
jne    806b378 <do_xfrm+0x3a8>
mov    0x8098a94,%edx
xor    0xd0(%ebx),%edx
test   %edx,0x8098aac
jne    806b378 <do_xfrm+0x3a8>
cmpb   $0x0,0x8098ab0
mov    $0x1,%al
je     806b378 <do_xfrm+0x3a8>
movzbl 0x8098a9c,%eax
test   %al,0xd8(%ebx)
setne  %al
movzbl %al,%eax
lea    0x0(%esi),%esi
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    $0x1,%eax
ret
xchg   %ax,%ax
mov    %eax,0x8(%esp)
lea    0x50(%ebx),%eax
movl   $0x8098a14,0x4(%esp)
mov    %eax,(%esp)
call   8067280 <xfrm_addr_match>
test   %eax,%eax
je     806b2f3 <do_xfrm+0x323>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
mov    %eax,0x8(%esp)
lea    0x38(%ebx),%eax
movl   $0x80989fc,0x4(%esp)
mov    %eax,(%esp)
call   8067280 <xfrm_addr_match>
test   %eax,%eax
je     806b302 <do_xfrm+0x332>
xor    %eax,%eax
jmp    806b3a9 <do_xfrm+0x3d9>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb4(%esp),%ebx
movzwl 0x4(%ebx),%edx
mov    (%ebx),%ecx
lea    -0x10(%edx),%eax
cmp    $0x1,%ax
jbe    806b40a <xfrm_state_print+0x2a>
cmp    $0x1a,%dx
jne    806b510 <xfrm_state_print+0x130>
cmp    $0x11,%dx
je     806b568 <xfrm_state_print+0x188>
cmp    $0x18,%dx
je     806b516 <xfrm_state_print+0x136>
lea    0x10(%ebx),%ebp
xor    %edi,%edi
lea    -0xec(%ecx),%esi
test   %esi,%esi
js     806b6ae <xfrm_state_print+0x2ce>
test   %ebp,%ebp
je     806b44a <xfrm_state_print+0x6a>
mov    %ebp,%eax
call   806b2d0 <do_xfrm+0x300>
test   %eax,%eax
xchg   %ax,%ax
je     806b502 <xfrm_state_print+0x122>
movzwl 0x4(%ebx),%edx
cmp    $0x11,%dx
je     806b735 <xfrm_state_print+0x355>
cmp    $0x1a,%dx
je     806b650 <xfrm_state_print+0x270>
cmp    $0x18,%dx
je     806b680 <xfrm_state_print+0x2a0>
lea    0xdc(%ebp),%edx
mov    %esi,0xc(%esp)
lea    0x2c(%esp),%esi
mov    %edx,0x8(%esp)
movl   $0x18,0x4(%esp)
mov    %esi,(%esp)
call   807f0b0 <parse_rtattr>
cmpw   $0x11,0x4(%ebx)
jne    806b4b2 <xfrm_state_print+0xd2>
mov    0x44(%esp),%ebp
test   %ebp,%ebp
je     806b708 <xfrm_state_print+0x328>
movzwl 0x0(%ebp),%eax
sub    $0x4,%eax
cmp    $0xdb,%eax
jbe    806b6d9 <xfrm_state_print+0x2f9>
add    $0x4,%ebp
mov    0xb8(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %ebp,(%esp)
call   8068ff0 <xfrm_state_info_print>
cmpw   $0x18,0x4(%ebx)
je     806b5f0 <xfrm_state_print+0x210>
mov    0x8095c98,%eax
test   %eax,%eax
jne    806b5d0 <xfrm_state_print+0x1f0>
mov    0xb8(%esp),%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x18,%dx
jne    806b528 <xfrm_state_print+0x148>
lea    0x10(%ebx),%edi
mov    %edi,%ebp
lea    -0xf0(%ecx),%esi
jmp    806b429 <xfrm_state_print+0x49>
xchg   %ax,%ax
movzwl 0x6(%ebx),%eax
mov    %edx,0x10(%esp)
mov    %ecx,0xc(%esp)
movl   $0x8088cfa,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x9c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
sub    $0x28,%ecx
lea    0x10(%ebx),%edx
mov    %ecx,%esi
js     806b6ae <xfrm_state_print+0x2ce>
xor    %ebp,%ebp
xor    %edi,%edi
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x1c(%esp)
call   804b710 <fwrite@plt>
mov    0x1c(%esp),%edx
movzwl 0x4(%ebx),%eax
add    $0x18,%edx
cmp    $0x11,%ax
je     806b46e <xfrm_state_print+0x8e>
cmp    $0x18,%ax
lea    0xe0(%edi),%edx
jne    806b468 <xfrm_state_print+0x88>
jmp    806b46e <xfrm_state_print+0x8e>
nop
mov    0xb8(%esp),%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
jmp    806b4f1 <xfrm_state_print+0x111>
lea    0x0(%esi,%eiz,1),%esi
mov    0xb8(%esp),%eax
movl   $0x9,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
movzbl 0xdc(%edi),%eax
movl   $0x8088d29,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0xb8(%esp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xb8(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    806b4e4 <xfrm_state_print+0x104>
xchg   %ax,%ax
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d17,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
xor    %edx,%edx
jmp    806b5a9 <xfrm_state_print+0x1c9>
xchg   %ax,%ax
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d20,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
xor    %edx,%edx
jmp    806b5a9 <xfrm_state_print+0x1c9>
mov    0x8095c40,%eax
mov    %esi,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    806b502 <xfrm_state_print+0x122>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089050,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806b502 <xfrm_state_print+0x122>
mov    0x8095c40,%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808902c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
or     $0xffffffff,%eax
jmp    806b502 <xfrm_state_print+0x122>
xor    %edx,%edx
jmp    806b57a <xfrm_state_print+0x19a>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebx
mov    0x48(%esp),%esi
movzwl 0x4(%ebx),%edx
mov    0x10(%esi),%ebp
mov    (%ebx),%eax
cmp    $0x10,%dx
jne    806b818 <xfrm_state_print+0x438>
sub    $0xec,%eax
js     806b87c <xfrm_state_print+0x49c>
lea    0x10(%ebx),%eax
call   806b2d0 <do_xfrm+0x300>
test   %eax,%eax
je     806b810 <xfrm_state_print+0x430>
mov    0x8(%esi),%edi
cmp    0x4(%esi),%edi
jg     806b850 <xfrm_state_print+0x470>
add    (%esi),%edi
mov    $0x1,%eax
mov    $0x11,%edx
add    $0x60,%ebx
mov    %ax,0x6(%edi)
mov    0x1c(%ebp),%eax
movl   $0x28,(%edi)
mov    %dx,0x4(%edi)
add    $0x1,%eax
mov    %eax,0x1c(%ebp)
mov    %eax,0x8(%edi)
movzwl 0x84(%ebx),%eax
mov    %ax,0x24(%edi)
mov    -0x18(%ebx),%ecx
mov    %ecx,0x10(%edi)
mov    -0x14(%ebx),%ecx
mov    %ecx,0x14(%edi)
mov    -0x10(%ebx),%ecx
mov    %ecx,0x18(%edi)
mov    -0xc(%ebx),%edx
mov    %edx,0x1c(%edi)
mov    -0x8(%ebx),%eax
mov    %eax,0x20(%edi)
movzbl -0x4(%ebx),%eax
mov    %al,0x26(%edi)
movl   $0x10,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0xd,0x8(%esp)
mov    0x4(%esi),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   807ea10 <addattr_l>
mov    (%edi),%eax
addl   $0x1,0xc(%esi)
add    %eax,0x8(%esi)
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzwl 0x6(%ebx),%ecx
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %edx,0x10(%esp)
movl   $0x8088cfa,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d31,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806b810 <xfrm_state_print+0x430>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    806b810 <xfrm_state_print+0x430>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x18ac,%esp
mov    %eax,0x2c(%esp)
lea    0x74(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x189c(%esp)
xor    %eax,%eax
mov    %edx,0x28(%esp)
mov    %ecx,%edx
cmp    $0x1,%edx
mov    %ecx,0x24(%esp)
mov    $0x20a,%ecx
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
rep stos %eax,%es:(%edi)
sbb    %eax,%eax
mov    $0x1,%ecx
not    %eax
add    $0x12,%eax
test   %ebx,%ebx
mov    %ax,0x78(%esp)
mov    0x8095ca8,%eax
movl   $0x28,0x74(%esp)
mov    %cx,0x7a(%esp)
mov    %ax,0x98(%esp)
jle    806ba87 <xfrm_state_print+0x6a7>
mov    0x28(%esp),%ecx
xor    %edx,%edx
lea    0x38(%esp),%ebx
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%ebp
mov    $0x8084e9c,%edi
mov    $0x5,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806bb60 <xfrm_state_print+0x780>
test   %edx,%edx
jne    806bbd0 <xfrm_state_print+0x7f0>
xor    %eax,%eax
movl   $0x0,(%ebx,%eax,1)
add    $0x4,%eax
cmp    $0x18,%eax
jb     806b958 <xfrm_state_print+0x578>
lea    0x28(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x98(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x50(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x50(%esp)
movl   $0x0,0x54(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x5c(%esp)
call   8069d50 <xfrm_id_parse>
mov    0x38(%esp),%eax
movl   $0x10,0x10(%esp)
movl   $0xd,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,0x84(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x88(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x8c(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x90(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x94(%esp)
movzbl 0x4c(%esp),%eax
mov    %al,0x9a(%esp)
lea    0x50(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x74(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    %ebp,%edx
mov    0x2c(%esp),%eax
mov    0x28(%esp),%esi
sub    $0x1,%eax
lea    0x4(%esi),%ecx
test   %eax,%eax
mov    %eax,0x2c(%esp)
mov    %ecx,0x28(%esp)
jg     806b938 <xfrm_state_print+0x558>
mov    0x30(%esp),%eax
test   %eax,0x34(%esp)
je     806ba87 <xfrm_state_print+0x6a7>
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x74(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x15,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %eax,%eax
js     806bc16 <xfrm_state_print+0x836>
lea    0x50(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806bc05 <xfrm_state_print+0x825>
cmpw   $0x0,0x98(%esp)
00
jne    806bac3 <xfrm_state_print+0x6e3>
mov    $0x2,%edx
mov    %dx,0x98(%esp)
mov    0x24(%esp),%eax
test   %eax,%eax
jne    806bb90 <xfrm_state_print+0x7b0>
mov    0x24(%esp),%eax
lea    0x89c(%esp),%esi
mov    $0x400,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
lea    0x74(%esp),%eax
mov    %esi,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806bbc0 <xfrm_state_print+0x7e0>
mov    0x8095c80,%eax
mov    %esi,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   806b3e0 <xfrm_state_print>
test   %eax,%eax
js     806bbe0 <xfrm_state_print+0x800>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0x189c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    806bc11 <xfrm_state_print+0x831>
add    $0x18ac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%esp),%eax
mov    %eax,(%esp)
mov    %edx,0x20(%esp)
call   8068730 <xfrm_parse_mark>
mov    0x20(%esp),%edx
jmp    806ba2b <xfrm_state_print+0x64b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x74(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
jns    806bb30 <xfrm_state_print+0x750>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80841ee,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089c62,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0x400,%ecx
push   %edi
push   %esi
mov    $0x1,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x196c,%esp
mov    %eax,0x2c(%esp)
lea    0x95c(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x195c(%esp)
xor    %eax,%eax
test   %ebx,%ebx
mov    %edx,0x28(%esp)
mov    %ebx,%edx
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
rep stos %eax,%es:(%edi)
lea    0x68(%esp),%edi
mov    $0x23d,%cx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    $0x16,%edi
movl   $0xf4,0x68(%esp)
mov    %si,0x6e(%esp)
mov    %di,0x6c(%esp)
mov    %ax,0x14c(%esp)
jle    806c168 <xfrm_state_print+0xd88>
mov    0x28(%esp),%eax
lea    0x2c(%esp),%ebp
movl   $0x0,0x20(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x24(%esp)
jmp    806bd43 <xfrm_state_print+0x963>
mov    0x18(%esp),%edx
add    $0x4,%eax
mov    %eax,0x28(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x2c(%esp)
je     806c199 <xfrm_state_print+0xdb9>
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x14e(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   806a160 <xfrm_mode_parse>
mov    0x2c(%esp),%eax
lea    -0x1(%eax),%edx
mov    0x28(%esp),%eax
mov    %edx,0x2c(%esp)
add    $0x4,%eax
test   %edx,%edx
mov    %eax,0x28(%esp)
jle    806bfa8 <xfrm_state_print+0xbc8>
mov    (%eax),%ebx
mov    $0x5,%ecx
mov    $0x8085ebc,%edi
mov    %edx,0x18(%esp)
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     806bcf0 <xfrm_state_print+0x910>
mov    $0x8084e9c,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806bee0 <xfrm_state_print+0xb00>
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8088c93,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806bdd0 <xfrm_state_print+0x9f0>
mov    0x18(%esp),%edx
add    $0x4,%eax
mov    %eax,0x28(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x2c(%esp)
je     806c199 <xfrm_state_print+0xdb9>
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x148(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   806a2c0 <xfrm_reqid_parse>
jmp    806bd25 <xfrm_state_print+0x945>
nop
movzbl (%ebx),%ecx
cmp    $0x73,%ecx
je     806bf00 <xfrm_state_print+0xb20>
cmp    $0x6d,%ecx
nop
jne    806be68 <xfrm_state_print+0xa88>
movzbl 0x1(%ebx),%ecx
cmp    $0x69,%cl
je     806be58 <xfrm_state_print+0xa78>
cmp    $0x61,%cl
jne    806be68 <xfrm_state_print+0xa88>
cmpb   $0x78,0x2(%ebx)
jne    806be68 <xfrm_state_print+0xa88>
cmpb   $0x0,0x3(%ebx)
jne    806be68 <xfrm_state_print+0xa88>
mov    0x20(%esp),%edx
test   %edx,%edx
jne    806c1c4 <xfrm_state_print+0xde4>
mov    0x18(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x28(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x2c(%esp)
je     806c199 <xfrm_state_print+0xdb9>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x158(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806c1ae <xfrm_state_print+0xdce>
mov    %ebx,0x20(%esp)
jmp    806bd25 <xfrm_state_print+0x945>
lea    0x0(%esi),%esi
cmpb   $0x6e,0x2(%ebx)
jne    806be68 <xfrm_state_print+0xa88>
cmpb   $0x0,0x3(%ebx)
je     806bf51 <xfrm_state_print+0xb71>
mov    0x24(%esp),%eax
test   %eax,%eax
jne    806c19e <xfrm_state_print+0xdbe>
lea    0x28(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x14c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0xb0(%esp),%eax
mov    %eax,0x4(%esp)
lea    0xc8(%esp),%eax
mov    %ebp,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
call   8069d50 <xfrm_id_parse>
mov    0xc0(%esp),%eax
test   %eax,%eax
jne    806c236 <xfrm_state_print+0xe56>
mov    0x8095ca8,%edi
mov    %ebx,0x24(%esp)
test   %edi,%edi
jne    806bd25 <xfrm_state_print+0x945>
movzwl 0x14c(%esp),%eax
mov    %eax,0x8095ca8
jmp    806bd25 <xfrm_state_print+0x945>
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8068730 <xfrm_parse_mark>
jmp    806bd25 <xfrm_state_print+0x945>
lea    0x0(%esi),%esi
cmpb   $0x65,0x1(%ebx)
jne    806be68 <xfrm_state_print+0xa88>
cmpb   $0x71,0x2(%ebx)
xchg   %ax,%ax
jne    806be68 <xfrm_state_print+0xa88>
cmpb   $0x0,0x3(%ebx)
jne    806be68 <xfrm_state_print+0xa88>
mov    0x18(%esp),%edx
add    $0x4,%eax
mov    %eax,0x28(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x2c(%esp)
je     806c199 <xfrm_state_print+0xdb9>
lea    0x28(%esp),%ecx
mov    %ebp,%edx
lea    0x144(%esp),%eax
call   806b0d0 <do_xfrm+0x100>
jmp    806bd25 <xfrm_state_print+0x945>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
jne    806c2e4 <xfrm_state_print+0xf04>
mov    0x18(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x28(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x2c(%esp)
je     806c199 <xfrm_state_print+0xdb9>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x154(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806c2ce <xfrm_state_print+0xeee>
mov    %ebx,0x1c(%esp)
jmp    806bd25 <xfrm_state_print+0x945>
xchg   %ax,%ax
mov    0x24(%esp),%esi
test   %esi,%esi
je     806c168 <xfrm_state_print+0xd88>
mov    0x1c(%esp),%ebx
test   %ebx,%ebx
je     806c128 <xfrm_state_print+0xd48>
mov    0x20(%esp),%ecx
test   %ecx,%ecx
je     806c29d <xfrm_state_print+0xebd>
mov    0x158(%esp),%eax
cmp    %eax,0x154(%esp)
ja     806c205 <xfrm_state_print+0xe25>
mov    0x3c(%esp),%eax
test   %eax,0x40(%esp)
jne    806c0c0 <xfrm_state_print+0xce0>
lea    0x44(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806c1f9 <xfrm_state_print+0xe19>
cmpw   $0x0,0x14c(%esp)
00
je     806c0a8 <xfrm_state_print+0xcc8>
lea    0x95c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x68(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806c2f4 <xfrm_state_print+0xf14>
mov    0x8095c80,%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
lea    0x95c(%esp),%eax
mov    %eax,0x4(%esp)
call   806b3e0 <xfrm_state_print>
test   %eax,%eax
js     806c1d4 <xfrm_state_print+0xdf4>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0x195c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    806c298 <xfrm_state_print+0xeb8>
add    $0x196c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    $0x2,%eax
mov    %ax,0x14c(%esp)
jmp    806c021 <xfrm_state_print+0xc41>
lea    0x0(%esi),%esi
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x68(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x15,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %eax,%eax
jns    806bfee <xfrm_state_print+0xc0e>
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089c62,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
mov    0x20(%esp),%edx
test   %edx,%edx
jne    806c267 <xfrm_state_print+0xe87>
cmpb   $0x6c,0xc4(%esp)
movl   $0x100,0x154(%esp)
00
movl   $0xfffffff,0x158(%esp)
0f
jne    806bfe0 <xfrm_state_print+0xc00>
movl   $0xffff,0x158(%esp)
00
jmp    806bfe0 <xfrm_state_print+0xc00>
mov    0x8095c40,%eax
movl   $0x27,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089088,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    %ebx,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
mov    0x28(%esp),%eax
mov    (%eax),%eax
movl   $0x8088d69,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %ebx,0x4(%esp)
movl   $0x8088d65,(%esp)
call   8080100 <duparg>
mov    0x8095c40,%eax
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80841ee,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x33,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80890b0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d86,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088daa,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d98,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x28(%esp),%eax
mov    (%eax),%eax
movl   $0x8088d48,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %ebx,0x4(%esp)
movl   $0x8084310,(%esp)
call   8080100 <duparg>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xd0c,%esp
mov    %gs:0x14,%eax
mov    %eax,0xcfc(%esp)
xor    %eax,%eax
lea    0x410(%esp),%edi
test   %ebp,%ebp
mov    %ecx,0x58(%esp)
mov    $0x23b,%ecx
mov    %edx,0x5c(%esp)
mov    $0x1,%edx
movl   $0x0,0x6c(%esp)
movl   $0x0,0x70(%esp)
movl   $0x0,0x74(%esp)
rep stos %eax,%es:(%edi)
lea    0xc0(%esp),%edi
mov    %dx,0x416(%esp)
mov    %ebp,%edx
movl   $0x0,0x78(%esp)
movl   $0x0,0x7c(%esp)
movl   $0xec,0x410(%esp)
00
mov    %bx,0x414(%esp)
mov    $0x42,%cl
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0xffffffff,0x480(%esp)
ff
movl   $0xffffffff,0x484(%esp)
ff
movl   $0xffffffff,0x488(%esp)
ff
mov    %ax,0x4f4(%esp)
movl   $0xffffffff,0x48c(%esp)
ff
movl   $0xffffffff,0x490(%esp)
ff
movl   $0xffffffff,0x494(%esp)
ff
movl   $0xffffffff,0x498(%esp)
ff
movl   $0xffffffff,0x49c(%esp)
ff
jle    806ce86 <xfrm_state_print+0x1aa6>
mov    0x58(%esp),%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x4c(%esp)
movl   $0x0,0x48(%esp)
jmp    806c493 <xfrm_state_print+0x10b3>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x4f6(%esp),%eax
mov    %eax,(%esp)
call   806a160 <xfrm_mode_parse>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %edx,0x5c(%esp)
mov    %ebp,0x58(%esp)
jle    806c528 <xfrm_state_print+0x1148>
mov    0x0(%ebp),%ebx
mov    $0x5,%ecx
mov    $0x8085ebc,%edi
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806c440 <xfrm_state_print+0x1060>
mov    $0x8084e9c,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806c6b0 <xfrm_state_print+0x12d0>
mov    $0x8088c93,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806c650 <xfrm_state_print+0x1270>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x4f0(%esp),%eax
mov    %eax,(%esp)
call   806a2c0 <xfrm_reqid_parse>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %edx,0x5c(%esp)
mov    %ebp,0x58(%esp)
jg     806c493 <xfrm_state_print+0x10b3>
lea    0x0(%esi,%eiz,1),%esi
mov    0x78(%esp),%eax
test   %eax,%eax
jne    806c810 <xfrm_state_print+0x1430>
mov    0x74(%esp),%eax
test   %eax,%eax
jne    806c810 <xfrm_state_print+0x1430>
mov    0x30(%esp),%eax
test   %eax,%eax
jne    806c84b <xfrm_state_print+0x146b>
mov    0x34(%esp),%eax
test   %eax,%eax
je     806d6f5 <xfrm_state_print+0x2315>
mov    0x70(%esp),%ebp
test   %ebp,%ebp
je     806c597 <xfrm_state_print+0x11b7>
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x410(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x15,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %eax,%eax
js     806d6c4 <xfrm_state_print+0x22e4>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   8067300 <xfrm_xfrmproto_is_ipsec>
test   %eax,%eax
jne    806c8c8 <xfrm_state_print+0x14e8>
mov    0x3c(%esp),%ebp
test   %ebp,%ebp
jne    806d682 <xfrm_state_print+0x22a2>
mov    0x40(%esp),%edi
test   %edi,%edi
jne    806d682 <xfrm_state_print+0x22a2>
mov    0x38(%esp),%esi
test   %esi,%esi
jne    806d682 <xfrm_state_print+0x22a2>
mov    0x44(%esp),%ebx
test   %ebx,%ebx
jne    806d682 <xfrm_state_print+0x22a2>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   8067320 <xfrm_xfrmproto_is_ro>
test   %eax,%eax
je     806ca2a <xfrm_state_print+0x164a>
movzbl 0x4f6(%esp),%eax
test   %al,%al
je     806cd58 <xfrm_state_print+0x1978>
sub    $0x2,%eax
cmp    $0x1,%al
jbe    806cad1 <xfrm_state_print+0x16f1>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x808924c,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
nop
movzbl (%ebx),%eax
mov    $0x73,%ecx
sub    %eax,%ecx
mov    %eax,0x2c(%esp)
mov    %ecx,0x28(%esp)
jne    806c6e0 <xfrm_state_print+0x1300>
cmpb   $0x65,0x1(%ebx)
jne    806c6e0 <xfrm_state_print+0x1300>
cmpb   $0x71,0x2(%ebx)
jne    806c6e0 <xfrm_state_print+0x1300>
cmpb   $0x0,0x3(%ebx)
jne    806c6e0 <xfrm_state_print+0x1300>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x5c(%esp),%edx
lea    0x58(%esp),%ecx
lea    0x4ec(%esp),%eax
call   806b0d0 <do_xfrm+0x100>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x6c(%esp),%eax
mov    %eax,(%esp)
call   8068730 <xfrm_parse_mark>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xe,%ecx
mov    %ebx,%esi
mov    $0x8088dbc,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    806c748 <xfrm_state_print+0x1368>
sub    $0x1,%edx
lea    0x4(%ebp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x4f7(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    806d66c <xfrm_state_print+0x228c>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
mov    $0x8088dca,%edi
mov    $0xb,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806c7a8 <xfrm_state_print+0x13c8>
sub    $0x1,%edx
lea    0x4(%ebp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x78(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     806c738 <xfrm_state_print+0x1358>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x808910c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088dd5,%edi
mov    $0xc,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806c878 <xfrm_state_print+0x1498>
sub    $0x1,%edx
lea    0x4(%ebp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x74(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     806c738 <xfrm_state_print+0x1358>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8089130,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x74(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x410(%esp),%eax
movl   $0xc,0x10(%esp)
movl   $0xa,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x30(%esp),%eax
test   %eax,%eax
je     806c54c <xfrm_state_print+0x116c>
mov    0x30(%esp),%eax
movl   $0x18,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x410(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    806c54c <xfrm_state_print+0x116c>
nop
mov    $0x8088de7,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806c978 <xfrm_state_print+0x1598>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x5c(%esp),%edx
lea    0x58(%esp),%ecx
lea    0x4f8(%esp),%eax
call   806b130 <do_xfrm+0x160>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
xchg   %ax,%ax
movzbl 0x4f6(%esp),%eax
cmp    $0x1,%al
jbe    806cd38 <xfrm_state_print+0x1958>
cmp    $0x4,%al
movzbl 0x46c(%esp),%eax
jne    806c61a <xfrm_state_print+0x123a>
cmp    $0x32,%al
jne    806c61a <xfrm_state_print+0x123a>
mov    0x44(%esp),%edi
test   %edi,%edi
jne    806d126 <xfrm_state_print+0x1d46>
mov    0x38(%esp),%esi
test   %esi,%esi
jne    806c5e7 <xfrm_state_print+0x1207>
mov    0x3c(%esp),%ebx
test   %ebx,%ebx
jne    806c5e7 <xfrm_state_print+0x1207>
movl   $0x32,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x12,(%esp)
mov    %eax,%esi
call   8067470 <strxf_algotype>
movl   $0x2,(%esp)
mov    %eax,%ebx
call   8067470 <strxf_algotype>
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x80892bc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088de1,%edi
mov    $0xb,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806cb00 <xfrm_state_print+0x1720>
lea    0x4(%ebp),%eax
mov    %eax,0x28(%esp)
mov    %eax,0x58(%esp)
lea    -0x1(%edx),%eax
test   %eax,%eax
mov    %edx,0x50(%esp)
mov    %eax,0x2c(%esp)
mov    %eax,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
mov    0x4(%ebp),%ebx
mov    %ebx,(%esp)
call   804b880 <strlen@plt>
mov    0x50(%esp),%edx
cmp    $0x2,%eax
jle    806c9d6 <xfrm_state_print+0x15f6>
mov    $0x8088698,%edi
mov    $0x2,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806ce3d <xfrm_state_print+0x1a5d>
mov    %ebx,%esi
mov    $0x8088e04,%edx
mov    0x28(%esp),%ebp
mov    0x2c(%esp),%ebx
jmp    806c9ff <xfrm_state_print+0x161f>
nop
orl    $0x1,0x30(%esp)
cmp    $0x1,%ebx
je     806cded <xfrm_state_print+0x1a0d>
add    $0x4,%ebp
mov    0x0(%ebp),%esi
sub    $0x1,%ebx
mov    $0x10,%ecx
mov    %edx,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
je     806c9e8 <xfrm_state_print+0x1608>
mov    %ebp,0x28(%esp)
mov    %ebx,%edx
subl   $0x4,0x28(%esp)
mov    0x28(%esp),%ebp
jmp    806c480 <xfrm_state_print+0x10a0>
mov    0x48(%esp),%edx
test   %edx,%edx
jne    806d6a3 <xfrm_state_print+0x22c3>
lea    0x98(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806c965 <xfrm_state_print+0x1585>
cmpw   $0x0,0x4f4(%esp)
00
jne    806ca75 <xfrm_state_print+0x1695>
mov    $0x2,%eax
mov    %ax,0x4f4(%esp)
lea    0x410(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806d11a <xfrm_state_print+0x1d3a>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0xcfc(%esp),%ebx
xor    %gs:0x14,%ebx
jne    806d726 <xfrm_state_print+0x2346>
add    $0xd0c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x48(%esp),%ecx
test   %ecx,%ecx
jne    806ca36 <xfrm_state_print+0x1656>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8089444,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806c62e <xfrm_state_print+0x124e>
xchg   %ax,%ax
mov    0x28(%esp),%eax
test   %eax,%eax
jne    806cb76 <xfrm_state_print+0x1796>
cmpb   $0x65,0x1(%ebx)
jne    806cb76 <xfrm_state_print+0x1796>
cmpb   $0x6c,0x2(%ebx)
jne    806cb76 <xfrm_state_print+0x1796>
cmpb   $0x0,0x3(%ebx)
jne    806cb76 <xfrm_state_print+0x1796>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x420(%esp),%eax
mov    %eax,(%esp)
movl   $0x0,0x8095ca8
00
call   806a320 <xfrm_selector_parse>
movzwl 0x448(%esp),%eax
mov    0x58(%esp),%ebp
mov    %eax,0x8095ca8
mov    0x5c(%esp),%eax
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
mov    $0x8086475,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806cdf8 <xfrm_state_print+0x1a18>
mov    $0x8088e14,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806cec3 <xfrm_state_print+0x1ae3>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x80(%esp),%ebx
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   806a250 <xfrm_encap_type_parse>
mov    0x58(%esp),%eax
mov    0x5c(%esp),%edi
lea    0x4(%eax),%edx
mov    %edx,0x58(%esp)
lea    -0x1(%edi),%edx
test   %edx,%edx
mov    %edx,0x5c(%esp)
jle    806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x82(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    806d2c7 <xfrm_state_print+0x1ee7>
movzwl 0x82(%esp),%eax
ror    $0x8,%ax
mov    %ax,0x82(%esp)
mov    0x58(%esp),%eax
mov    0x5c(%esp),%edi
lea    0x4(%eax),%edx
mov    %edx,0x58(%esp)
lea    -0x1(%edi),%edx
test   %edx,%edx
mov    %edx,0x5c(%esp)
jle    806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x84(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    806d16a <xfrm_state_print+0x1d8a>
movzwl 0x84(%esp),%eax
ror    $0x8,%ax
mov    %ax,0x84(%esp)
mov    0x58(%esp),%eax
mov    0x5c(%esp),%edi
lea    0x4(%eax),%edx
mov    %edx,0x58(%esp)
lea    -0x1(%edi),%edx
test   %edx,%edx
mov    %edx,0x5c(%esp)
jle    806cf20 <xfrm_state_print+0x1b40>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x98(%esp),%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
mov    0xa0(%esp),%eax
movl   $0x18,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %eax,0x88(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x8c(%esp)
mov    0xa8(%esp),%eax
mov    %eax,0x90(%esp)
mov    0xac(%esp),%eax
mov    %eax,0x94(%esp)
lea    0x410(%esp),%eax
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
lea    0x0(%esi),%esi
movzbl 0x46c(%esp),%eax
cmp    $0x33,%al
je     806cdb3 <xfrm_state_print+0x19d3>
cmp    $0x6c,%al
je     806cd79 <xfrm_state_print+0x1999>
cmp    $0x32,%al
jne    806c5e7 <xfrm_state_print+0x1207>
jmp    806c8f0 <xfrm_state_print+0x1510>
lea    0x0(%esi),%esi
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8089414,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806c62e <xfrm_state_print+0x124e>
mov    0x3c(%esp),%eax
test   %eax,%eax
jne    806d246 <xfrm_state_print+0x1e66>
mov    0x40(%esp),%eax
test   %eax,%eax
jne    806d246 <xfrm_state_print+0x1e66>
mov    0x38(%esp),%eax
test   %eax,%eax
jne    806d246 <xfrm_state_print+0x1e66>
mov    0x44(%esp),%eax
test   %eax,%eax
je     806d217 <xfrm_state_print+0x1e37>
mov    $0x6c,%eax
jmp    806c5e7 <xfrm_state_print+0x1207>
mov    0x3c(%esp),%ecx
test   %ecx,%ecx
jne    806d1a8 <xfrm_state_print+0x1dc8>
mov    0x38(%esp),%edx
test   %edx,%edx
jne    806d1a8 <xfrm_state_print+0x1dc8>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    806d1a8 <xfrm_state_print+0x1dc8>
mov    0x40(%esp),%eax
test   %eax,%eax
je     806d180 <xfrm_state_print+0x1da0>
mov    $0x33,%eax
jmp    806c5e7 <xfrm_state_print+0x1207>
mov    %ebp,0x28(%esp)
xor    %edx,%edx
jmp    806ca21 <xfrm_state_print+0x1641>
sub    $0x1,%edx
add    $0x4,%ebp
test   %edx,%edx
mov    %ebp,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0x58(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x480(%esp),%eax
mov    %eax,(%esp)
call   806ac90 <xfrm_lifetime_cfg_parse>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
lea    0x98(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x2c(%esp)
movl   $0x0,0x98(%esp)
00
call   807f6a0 <get_u32>
mov    0x2c(%esp),%edx
test   %eax,%eax
jne    806d72b <xfrm_state_print+0x234b>
mov    0x98(%esp),%eax
sub    $0x2,%edx
mov    %eax,0x30(%esp)
jmp    806ca21 <xfrm_state_print+0x1641>
movl   $0x0,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x44(%esp)
jmp    806c534 <xfrm_state_print+0x1154>
cmpl   $0x63,0x2c(%esp)
je     806cf25 <xfrm_state_print+0x1b45>
mov    %ebx,(%esp)
call   8067410 <xfrm_algotype_getbyname>
lea    -0x1(%eax),%ecx
cmp    $0x13,%ecx
mov    %eax,0x2c(%esp)
ja     806d2dd <xfrm_state_print+0x1efd>
mov    $0x1,%edx
shl    %cl,%edx
test   $0xa0007,%edx
je     806d2dd <xfrm_state_print+0x1efd>
xor    %eax,%eax
mov    $0x92,%ecx
lea    0x1c8(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x2c(%esp),%eax
cmp    $0x14,%eax
ja     806d517 <xfrm_state_print+0x2137>
jmp    *0x8089b24(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
call   8080010 <incomplete_command>
movzbl 0x1(%ebx),%eax
cmp    $0x6f,%al
je     806cfca <xfrm_state_print+0x1bea>
cmp    $0x74,%al
jne    806ceca <xfrm_state_print+0x1aea>
cmpb   $0x78,0x2(%ebx)
jne    806ceca <xfrm_state_print+0x1aea>
cmpb   $0x0,0x3(%ebx)
jne    806ceca <xfrm_state_print+0x1aea>
mov    0x4c(%esp),%eax
test   %eax,%eax
jne    806d0ce <xfrm_state_print+0x1cee>
sub    $0x1,%edx
lea    0x4(%ebp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
lea    0xc0(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0xc8(%esp),%eax
mov    %eax,(%esp)
call   806f1c0 <xfrm_sctx_parse>
movzwl 0xc0(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0xc0(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x410(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
mov    %ebx,0x4c(%esp)
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
cmpb   $0x61,0x2(%ebx)
jne    806ceca <xfrm_state_print+0x1aea>
cmpb   $0x0,0x3(%ebx)
jne    806ceca <xfrm_state_print+0x1aea>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    806d10a <xfrm_state_print+0x1d2a>
sub    $0x1,%edx
lea    0x4(%ebp),%eax
test   %edx,%edx
mov    %eax,0x58(%esp)
mov    %edx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x98(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x98(%esp)
je     806d0f4 <xfrm_state_print+0x1d14>
movzbl 0x99(%esp),%eax
cmp    $0x10,%al
ja     806d0de <xfrm_state_print+0x1cfe>
lea    0x80(%esp),%esi
mov    %eax,0x8(%esp)
lea    0xa0(%esp),%eax
movl   $0x10,0xc(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
movl   $0x0,0x80(%esp)
00
movl   $0x0,0x84(%esp)
00
movl   $0x0,0x88(%esp)
00
movl   $0x0,0x8c(%esp)
00
call   804b7e0 <__memcpy_chk@plt>
lea    0x410(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0xe,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x5c(%esp),%eax
mov    0x58(%esp),%ebp
mov    %ebx,0x48(%esp)
lea    -0x1(%eax),%edx
jmp    806c480 <xfrm_state_print+0x10a0>
mov    %ebx,0x4(%esp)
movl   $0x8088e1e,(%esp)
call   8080100 <duparg>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x80891e0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x80891a8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %ebx,0x4(%esp)
movl   $0x8088e1a,(%esp)
call   8080100 <duparg>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x32,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x3,(%esp)
mov    %eax,%ebx
call   8067470 <strxf_algotype>
mov    %ebx,0x10(%esp)
movl   $0x8089280,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806c965 <xfrm_state_print+0x1585>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8089180,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x33,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x14,(%esp)
mov    %eax,%esi
call   8067470 <strxf_algotype>
movl   $0x1,(%esp)
mov    %eax,%ebx
jmp    806c937 <xfrm_state_print+0x1557>
movl   $0x33,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x3,(%esp)
mov    %eax,%edi
call   8067470 <strxf_algotype>
movl   $0x12,(%esp)
mov    %eax,%esi
call   8067470 <strxf_algotype>
movl   $0x2,(%esp)
mov    %eax,%ebx
call   8067470 <strxf_algotype>
mov    %edi,0x18(%esp)
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x8089304,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x6c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x3,(%esp)
mov    %eax,%ebx
call   8067470 <strxf_algotype>
mov    %ebx,0x10(%esp)
movl   $0x80893a8,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806d150 <xfrm_state_print+0x1d70>
movl   $0x6c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x12,(%esp)
mov    %eax,%ebp
call   8067470 <strxf_algotype>
movl   $0x14,(%esp)
mov    %eax,%edi
call   8067470 <strxf_algotype>
movl   $0x1,(%esp)
mov    %eax,%esi
call   8067470 <strxf_algotype>
movl   $0x2,(%esp)
mov    %eax,%ebx
call   8067470 <strxf_algotype>
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x8089354,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8089158,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x34(%esp),%edx
mov    0x58(%esp),%eax
test   %edx,%edx
mov    (%eax),%eax
jne    806d52d <xfrm_state_print+0x214d>
mov    %eax,0x34(%esp)
lea    0x58(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x4f4(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x458(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x470(%esp),%eax
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
call   8069d50 <xfrm_id_parse>
mov    0x8095ca8,%eax
test   %eax,%eax
jne    806c738 <xfrm_state_print+0x1358>
movzwl 0x4f4(%esp),%eax
mov    %eax,0x8095ca8
jmp    806c738 <xfrm_state_print+0x1358>
mov    0x38(%esp),%esi
test   %esi,%esi
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x40(%esp),%ebx
test   %ebx,%ebx
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x58(%esp),%eax
movl   $0x0,0x38(%esp)
mov    (%eax),%ebx
mov    %ebx,0x40(%esp)
mov    0x5c(%esp),%ecx
cmp    $0x1,%ecx
jle    806d7b3 <xfrm_state_print+0x23d3>
lea    0x4(%eax),%ebx
and    $0xa0003,%edx
mov    0x4(%eax),%esi
mov    %ebx,0x58(%esp)
lea    -0x1(%ecx),%ebx
mov    %ebx,0x5c(%esp)
je     806d662 <xfrm_state_print+0x2282>
cmp    $0x1,%ebx
je     806d656 <xfrm_state_print+0x2276>
sub    $0x2,%ecx
lea    0x8(%eax),%edx
test   %ecx,%ecx
mov    %edx,0x58(%esp)
mov    %ecx,0x5c(%esp)
je     806cf20 <xfrm_state_print+0x1b40>
mov    0x8(%eax),%ebp
mov    0x2c(%esp),%eax
cmp    $0x12,%eax
je     806d5eb <xfrm_state_print+0x220b>
cmp    $0x14,%eax
jne    806d5d3 <xfrm_state_print+0x21f3>
mov    0x5c(%esp),%edx
cmp    $0x1,%edx
jle    806d5c7 <xfrm_state_print+0x21e7>
mov    0x58(%esp),%eax
sub    $0x1,%edx
movl   $0x0,0x8(%esp)
mov    %edx,0x5c(%esp)
lea    0x4(%eax),%ecx
mov    0x4(%eax),%eax
mov    %ecx,0x58(%esp)
mov    %eax,0x4(%esp)
lea    0x98(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806d5b1 <xfrm_state_print+0x21d1>
mov    0x98(%esp),%eax
movl   $0x48,0x50(%esp)
mov    %eax,0x20c(%esp)
lea    0x210(%esp),%eax
mov    %eax,0x28(%esp)
mov    %ebp,(%esp)
call   804b880 <strlen@plt>
movl   $0x40,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,%ebx
mov    %eax,0x54(%esp)
lea    0x1c8(%esp),%eax
mov    %eax,(%esp)
call   804b980 <strncpy@plt>
cmp    $0x2,%ebx
mov    0x54(%esp),%edx
jle    806d5ab <xfrm_state_print+0x21cb>
mov    $0x8088698,%edi
mov    $0x2,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806d53d <xfrm_state_print+0x215d>
lea    -0x2(%ebx),%esi
sub    $0x1,%ebx
sar    %ebx
cmp    $0x200,%ebx
lea    0x2(%ebp),%edx
jg     806d59b <xfrm_state_print+0x21bb>
and    $0x1,%esi
xor    %edi,%edi
neg    %esi
jmp    806d506 <xfrm_state_print+0x2126>
movzbl 0x2(%ebp,%esi,1),%ecx
mov    %esi,%eax
mov    %cl,0x69(%esp)
movzbl 0x1(%edx,%eax,1),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x54(%esp)
movb   $0x0,0x6b(%esp)
mov    %al,0x6a(%esp)
lea    0x69(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x54(%esp),%edx
test   %eax,%eax
jne    806d58b <xfrm_state_print+0x21ab>
movzbl 0x68(%esp),%eax
add    $0x2,%esi
mov    0x28(%esp),%ecx
mov    %al,(%ecx,%edi,1)
add    $0x1,%edi
cmp    %edi,%ebx
jle    806d561 <xfrm_state_print+0x2181>
cmp    $0xffffffff,%esi
jne    806d4ab <xfrm_state_print+0x20cb>
mov    $0xffffffff,%eax
mov    $0x30,%ecx
jmp    806d4b2 <xfrm_state_print+0x20d2>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8088e2c,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
cmp    $0x200,%edx
jg     806d59b <xfrm_state_print+0x21bb>
mov    0x28(%esp),%eax
movl   $0x204,0xc(%esp)
mov    %edx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
lea    0x1c8(%esp),%eax
shl    $0x3,%ebx
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %ebx,0x208(%esp)
add    0x50(%esp),%ebx
mov    %eax,0x8(%esp)
mov    %ebx,0x10(%esp)
jmp    806cd0b <xfrm_state_print+0x192b>
mov    %ebp,0x4(%esp)
movl   $0x8088e98,(%esp)
call   80800b0 <invarg>
mov    %ebp,0x4(%esp)
movl   $0x8089220,(%esp)
call   80800b0 <invarg>
test   %edx,%edx
jg     806d545 <xfrm_state_print+0x2165>
jmp    806d561 <xfrm_state_print+0x2181>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8089200,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8088e89,(%esp)
call   8080060 <missarg>
lea    0x20c(%esp),%eax
mov    %eax,0x28(%esp)
movl   $0x44,0x50(%esp)
jmp    806d441 <xfrm_state_print+0x2061>
mov    0x5c(%esp),%edx
cmp    $0x1,%edx
jle    806d7eb <xfrm_state_print+0x240b>
mov    0x58(%esp),%eax
sub    $0x1,%edx
movl   $0x0,0x8(%esp)
mov    %edx,0x5c(%esp)
lea    0x4(%eax),%ecx
mov    0x4(%eax),%eax
mov    %ecx,0x58(%esp)
mov    %eax,0x4(%esp)
lea    0x80(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806d7d5 <xfrm_state_print+0x23f5>
mov    0x80(%esp),%eax
movl   $0x48,0x50(%esp)
mov    %eax,0x20c(%esp)
lea    0x210(%esp),%eax
mov    %eax,0x28(%esp)
jmp    806d441 <xfrm_state_print+0x2061>
movl   $0x8088e52,(%esp)
call   8080060 <missarg>
mov    $0x808a29b,%ebp
jmp    806d3c5 <xfrm_state_print+0x1fe5>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x80890e4,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x80893e8,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806c62e <xfrm_state_print+0x124e>
movzbl 0x46c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8089474,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    806c62e <xfrm_state_print+0x124e>
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089c62,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x27,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089088,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebp),%eax
movl   $0x8088dec,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x3c(%esp),%eax
test   %eax,%eax
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x40(%esp),%eax
test   %eax,%eax
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x38(%esp),%eax
test   %eax,%eax
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x58(%esp),%eax
movl   $0x0,0x40(%esp)
movl   $0x0,0x3c(%esp)
mov    (%eax),%ebx
mov    %ebx,0x38(%esp)
jmp    806d379 <xfrm_state_print+0x1f99>
mov    0x44(%esp),%ecx
test   %ecx,%ecx
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x58(%esp),%eax
mov    (%eax),%ebx
mov    %ebx,0x44(%esp)
jmp    806d379 <xfrm_state_print+0x1f99>
mov    0x38(%esp),%ebp
test   %ebp,%ebp
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x3c(%esp),%edi
test   %edi,%edi
jne    806d7bf <xfrm_state_print+0x23df>
mov    0x58(%esp),%eax
movl   $0x0,0x38(%esp)
mov    (%eax),%ebx
mov    %ebx,0x3c(%esp)
jmp    806d379 <xfrm_state_print+0x1f99>
movl   $0x8088e48,(%esp)
call   8080060 <missarg>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8088e22,(%esp)
mov    %eax,0x4(%esp)
call   8080100 <duparg>
mov    0x58(%esp),%eax
mov    (%eax),%eax
movl   $0x8088e6b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8088e5e,(%esp)
call   8080060 <missarg>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xec,%esp
mov    0x100(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0xdc(%esp)
xor    %eax,%eax
mov    0x104(%esp),%ebx
test   %esi,%esi
jle    806e5a1 <do_xfrm_state+0xda1>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e1e0 <do_xfrm_state+0x9e0>
movl   $0x8088eb5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e1a8 <do_xfrm_state+0x9a8>
movl   $0x8088ebc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e210 <do_xfrm_state+0xa10>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e1f8 <do_xfrm_state+0x9f8>
movl   $0x8088ec5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e633 <do_xfrm_state+0xe33>
movl   $0x8088ecf,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e633 <do_xfrm_state+0xe33>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e626 <do_xfrm_state+0xe26>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e626 <do_xfrm_state+0xe26>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e626 <do_xfrm_state+0xe26>
movl   $0x8084559,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     806e228 <do_xfrm_state+0xa28>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     806e408 <do_xfrm_state+0xc08>
movl   $0x8088ed6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     806e240 <do_xfrm_state+0xa40>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    806e535 <do_xfrm_state+0xd35>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80894cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089514,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x46,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089558,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80895a0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x47,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80895ec,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089634,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x38,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089680,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80896bc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089704,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f46,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089754,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f62,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x41,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089788,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f7e,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x32,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x33,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x6c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x2b,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x3c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8087b58,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80897cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f93,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x2,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   8067470 <strxf_algotype>
mov    0x8095c40,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f9e,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x14,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8088ffa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80897f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x12,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8088ffa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808981c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x3,(%esp)
call   8067470 <strxf_algotype>
movl   $0x8088ffa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088fba,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089844,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80836d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808987c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x32,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80898cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089900,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089920,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088fc6,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x6,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x11,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x84,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x21,(%esp)
call   8067a00 <strxf_proto>
mov    0x8095c40,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808996c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088fdb,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x3a,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x87,(%esp)
call   8067a00 <strxf_proto>
mov    0x8095c40,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089990,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x2f,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088ff0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80899b8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80899e8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089a14,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089a64,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089ab4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%ecx
mov    $0x1a,%al
lea    -0x1(%esi),%edx
call   806c300 <xfrm_state_print+0xf20>
mov    %eax,0x1c(%esp)
mov    0xdc(%esp),%edi
xor    %gs:0x14,%edi
mov    0x1c(%esp),%eax
jne    806e564 <do_xfrm_state+0xd64>
add    $0xec,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%ecx
mov    $0x10,%al
lea    -0x1(%esi),%edx
call   806c300 <xfrm_state_print+0xf20>
mov    %eax,0x1c(%esp)
jmp    806e1b9 <do_xfrm_state+0x9b9>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%edx
mov    $0x1,%ecx
lea    -0x1(%esi),%eax
call   806b8b0 <xfrm_state_print+0x4d0>
mov    %eax,0x1c(%esp)
jmp    806e1b9 <do_xfrm_state+0x9b9>
xchg   %ax,%ax
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
call   806bc50 <xfrm_state_print+0x870>
mov    %eax,0x1c(%esp)
jmp    806e1b9 <do_xfrm_state+0x9b9>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%edx
xor    %ecx,%ecx
lea    -0x1(%esi),%eax
call   806b8b0 <xfrm_state_print+0x4d0>
mov    %eax,0x1c(%esp)
jmp    806e1b9 <do_xfrm_state+0x9b9>
xchg   %ax,%ax
lea    0x88(%esp),%ebx
mov    $0x15,%ecx
mov    %ebx,%edi
mov    $0x23,%esi
rep stos %eax,%es:(%edi)
mov    $0x1,%ecx
mov    %si,0x8c(%esp)
lea    0x64(%esp),%esi
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
movl   $0x14,0x88(%esp)
00
mov    %cx,0x8e(%esp)
movl   $0xffffffff,0x98(%esp)
ff
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806e61a <do_xfrm_state+0xe1a>
mov    %ebx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806e60e <do_xfrm_state+0xe0e>
mov    0x88(%esp),%eax
mov    0x8095c80,%ebx
sub    $0x14,%eax
mov    %eax,0xc(%esp)
js     806e5cb <do_xfrm_state+0xdcb>
lea    0x9c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x40(%esp),%eax
movl   $0x2,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x44(%esp),%edx
mov    %ebx,0xc(%esp)
test   %edx,%edx
je     806e5ed <do_xfrm_state+0xded>
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088ef3,(%esp)
call   804b710 <fwrite@plt>
mov    0x44(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8088ef9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
je     806e3e6 <do_xfrm_state+0xbe6>
mov    0x48(%esp),%edi
test   %edi,%edi
je     806e3e6 <do_xfrm_state+0xbe6>
movzwl (%edi),%eax
mov    %ebx,0xc(%esp)
sub    $0x4,%eax
cmp    $0x7,%eax
jbe    806e5aa <do_xfrm_state+0xdaa>
movl   $0xa,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f33,(%esp)
call   804b710 <fwrite@plt>
mov    0x4(%edi),%eax
movl   $0x8088efa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%edi),%eax
movl   $0x8088f3e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0x29,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   807d670 <rtnl_close>
jmp    806e1b9 <do_xfrm_state+0x9b9>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%ebx
mov    $0x1,%edi
mov    $0x1c,%ebp
sub    $0x1,%esi
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x11,0x2c(%esp)
mov    %di,0x32(%esp)
mov    %bp,0x30(%esp)
mov    %esi,0x18(%esp)
jne    806e452 <do_xfrm_state+0xc52>
jmp    806e49c <do_xfrm_state+0xc9c>
lea    0x0(%esi),%esi
mov    %ebp,%eax
mov    (%ebx),%ebp
mov    $0x80889bc,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806e591 <do_xfrm_state+0xd91>
test   %eax,%eax
jne    806e581 <do_xfrm_state+0xd81>
cmpl   $0x1,0x18(%esp)
je     806e57c <do_xfrm_state+0xd7c>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   8067340 <xfrm_xfrmproto_getbyname>
test   %eax,%eax
js     806e569 <do_xfrm_state+0xd69>
add    $0x8,%ebx
subl   $0x2,0x18(%esp)
mov    %al,0x3c(%esp)
jne    806e450 <do_xfrm_state+0xc50>
lea    0x40(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806e61a <do_xfrm_state+0xe1a>
cmpl   $0x1,0x8095ca4
jle    806e4f7 <do_xfrm_state+0xcf7>
movzbl 0x3c(%esp),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x80894a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
lea    0x2c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806e60e <do_xfrm_state+0xe0e>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
nop
jmp    806e1b9 <do_xfrm_state+0x9b9>
mov    (%ebx),%eax
movl   $0x8089af0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x4(%ebx),%eax
movl   $0x80889c2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   8080010 <incomplete_command>
mov    %ebp,0x4(%esp)
movl   $0x80889bc,(%esp)
call   8080100 <duparg>
mov    %ebp,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
xor    %ecx,%ecx
xor    %edx,%edx
call   804c595 <__sprintf_chk@plt+0x9e5>
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f1a,(%esp)
call   804b710 <fwrite@plt>
jmp    806e3f6 <do_xfrm_state+0xbf6>
mov    0x8095c40,%eax
movl   $0x8088edc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    806e3f6 <do_xfrm_state+0xbf6>
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f03,(%esp)
call   804b710 <fwrite@plt>
jmp    806e3f6 <do_xfrm_state+0xbf6>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x4(%ebx),%edx
xor    %ecx,%ecx
lea    -0x1(%esi),%eax
call   804c595 <__sprintf_chk@plt+0x9e5>
lea    0x4(%ebx),%edx
mov    $0x1,%ecx
lea    -0x1(%esi),%eax
call   804c595 <__sprintf_chk@plt+0x9e5>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    (%ecx),%esi
mov    (%edx),%ebp
mov    (%esi),%ebx
movzbl (%ebx),%edi
cmp    $0x69,%edi
je     806e688 <do_xfrm_state+0xe88>
cmp    $0x6f,%edi
jne    806e6bf <do_xfrm_state+0xebf>
cmpb   $0x75,0x1(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
cmpb   $0x74,0x2(%ebx)
je     806e6a8 <do_xfrm_state+0xea8>
mov    %ebx,0x4(%esp)
movl   $0x8089b78,(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
cmpb   $0x6e,0x1(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
cmpb   $0x0,0x2(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
movb   $0x0,(%eax)
xor    %eax,%eax
mov    %ebp,(%edx)
mov    %esi,(%ecx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x0,0x3(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
movb   $0x1,(%eax)
xor    %eax,%eax
mov    %ebp,(%edx)
mov    %esi,(%ecx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x66,%edi
jne    806e676 <do_xfrm_state+0xe76>
cmpb   $0x77,0x1(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
cmpb   $0x64,0x2(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
cmpb   $0x0,0x3(%ebx)
jne    806e676 <do_xfrm_state+0xe76>
movb   $0x2,(%eax)
xor    %eax,%eax
mov    %ebp,(%edx)
mov    %esi,(%ecx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    $0x8089b8d,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x2c,%esp
mov    (%ecx),%ebp
mov    $0x5,%ecx
mov    %eax,0x1c(%esp)
mov    (%edx),%eax
mov    0x0(%ebp),%esi
mov    %eax,0x18(%esp)
mov    %esi,0x14(%esp)
repz cmpsb %es:(%edi),%ds:(%esi)
je     806e748 <do_xfrm_state+0xf48>
mov    0x14(%esp),%eax
cmpb   $0x73,(%eax)
jne    806e72f <do_xfrm_state+0xf2f>
cmpb   $0x75,0x1(%eax)
jne    806e72f <do_xfrm_state+0xf2f>
cmpb   $0x62,0x2(%eax)
je     806e768 <do_xfrm_state+0xf68>
mov    0x14(%esp),%eax
movl   $0x8089b92,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
movb   $0x0,(%eax)
mov    0x18(%esp),%eax
mov    %eax,(%edx)
xor    %eax,%eax
mov    %ebp,(%ebx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x3(%eax)
jne    806e72f <do_xfrm_state+0xf2f>
mov    0x1c(%esp),%eax
movb   $0x1,(%eax)
jmp    806e74f <do_xfrm_state+0xf4f>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    (%ecx),%ebx
mov    %edx,0x18(%esp)
mov    (%edx),%edx
mov    %ecx,0x1c(%esp)
mov    (%ebx),%eax
mov    %edx,0x10(%esp)
mov    %eax,(%esp)
mov    %eax,0x14(%esp)
call   804b880 <strlen@plt>
mov    0x10(%esp),%edx
cmp    $0x2,%eax
jle    806e7c6 <do_xfrm_state+0xfc6>
mov    0x14(%esp),%esi
mov    $0x8088698,%edi
mov    $0x2,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     806e844 <do_xfrm_state+0x1044>
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%eax
jmp    806e7e7 <do_xfrm_state+0xfe7>
orb    $0x1,0x0(%ebp)
cmp    $0x1,%edx
jle    806e81c <do_xfrm_state+0x101c>
addl   $0x4,0x10(%esp)
sub    $0x1,%edx
mov    0x10(%esp),%eax
mov    (%eax),%eax
mov    %eax,%esi
mov    $0x8,%ecx
mov    $0x8089ba9,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%ebx
cmp    %cl,%bl
je     806e7d0 <do_xfrm_state+0xfd0>
mov    $0x8088c7d,%edi
mov    %eax,%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    806e838 <do_xfrm_state+0x1038>
orb    $0x2,0x0(%ebp)
cmp    $0x1,%edx
jg     806e7d9 <do_xfrm_state+0xfd9>
mov    0x10(%esp),%ebx
mov    0x18(%esp),%eax
mov    %edx,(%eax)
mov    0x1c(%esp),%eax
mov    %ebx,(%eax)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x10(%esp),%ebx
add    $0x1,%edx
sub    $0x4,%ebx
jmp    806e820 <do_xfrm_state+0x1020>
mov    0x14(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x10(%esp)
movb   $0x0,0x2f(%esp)
mov    %eax,0x4(%esp)
lea    0x2f(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x10(%esp),%edx
test   %eax,%eax
jne    806e87b <do_xfrm_state+0x107b>
movzbl 0x2f(%esp),%eax
mov    %al,0x0(%ebp)
jmp    806e820 <do_xfrm_state+0x1020>
mov    (%ebx),%eax
movl   $0x8088c4d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x80989c0,%ecx
test   %ecx,%ecx
je     806e9a8 <do_xfrm_state+0x11a8>
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
movzbl 0x8098b54,%ecx
xor    0xa0(%eax),%cl
test   %cl,0x8098b58
jne    806e9a0 <do_xfrm_state+0x11a0>
xor    0x8098b75,%dl
test   %dl,0x8098b76
jne    806e9a0 <do_xfrm_state+0x11a0>
movzbl 0x8098b59,%eax
test   %al,%al
jne    806e9b0 <do_xfrm_state+0x11b0>
movzbl 0x8098b5a,%eax
test   %al,%al
jne    806e9d8 <do_xfrm_state+0x11d8>
mov    0x8098ae4,%eax
xor    0x30(%ebx),%eax
test   %eax,0x8098b5c
jne    806e9a0 <do_xfrm_state+0x11a0>
movzbl 0x8098ae0,%eax
xor    0x2c(%ebx),%al
test   %al,0x8098b60
jne    806e9a0 <do_xfrm_state+0x11a0>
movzwl 0x8098b62,%eax
test   %ax,%ax
je     806e933 <do_xfrm_state+0x1133>
movzwl 0x8098ad8,%edx
xor    0x24(%ebx),%dx
test   %ax,%dx
jne    806e9a0 <do_xfrm_state+0x11a0>
movzwl 0x8098b64,%eax
test   %ax,%ax
jne    806e9f8 <do_xfrm_state+0x11f8>
mov    0x8098b50,%eax
xor    0x9c(%ebx),%eax
test   %eax,0x8098b68
jne    806e9a0 <do_xfrm_state+0x11a0>
movzbl 0x8098b55,%eax
xor    0xa1(%ebx),%al
test   %al,0x8098b6c
jne    806e9a0 <do_xfrm_state+0x11a0>
mov    0x8098b4c,%eax
xor    0x98(%ebx),%eax
test   %eax,0x8098b70
jne    806e9a0 <do_xfrm_state+0x11a0>
cmpb   $0x0,0x8098b74
mov    $0x1,%eax
je     806e9a2 <do_xfrm_state+0x11a2>
movzbl 0x8098b56,%edx
test   %dl,0xa2(%ebx)
jne    806e9a2 <do_xfrm_state+0x11a2>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
mov    $0x1,%eax
ret
xchg   %ax,%ax
mov    %eax,0x8(%esp)
lea    0x10(%ebx),%eax
movl   $0x8098ac4,0x4(%esp)
mov    %eax,(%esp)
call   8067280 <xfrm_addr_match>
test   %eax,%eax
je     806e8de <do_xfrm_state+0x10de>
jmp    806e9a0 <do_xfrm_state+0x11a0>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x8098ab4,0x4(%esp)
mov    %ebx,(%esp)
call   8067280 <xfrm_addr_match>
test   %eax,%eax
je     806e8ed <do_xfrm_state+0x10ed>
jmp    806e9a0 <do_xfrm_state+0x11a0>
xchg   %ax,%ax
movzwl 0x8098ad4,%edx
xor    0x20(%ebx),%dx
test   %ax,%dx
je     806e943 <do_xfrm_state+0x1143>
jmp    806e9a0 <do_xfrm_state+0x11a0>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb4(%esp),%ebx
movzwl 0x4(%ebx),%eax
mov    (%ebx),%edx
lea    -0x13(%eax),%ecx
cmp    $0x1,%cx
jbe    806ea3a <xfrm_policy_print+0x2a>
cmp    $0x19,%ax
jne    806eb30 <xfrm_policy_print+0x120>
cmp    $0x14,%ax
je     806eb98 <xfrm_policy_print+0x188>
cmp    $0x1b,%ax
je     806eb36 <xfrm_policy_print+0x126>
sub    $0xb4,%edx
lea    0x10(%ebx),%esi
js     806ed1f <xfrm_policy_print+0x30f>
lea    0xb4(%ebx),%eax
xor    %ebp,%ebp
lea    0x2c(%esp),%edi
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x18,0x4(%esp)
mov    %edi,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x6c(%esp),%eax
test   %eax,%eax
je     806ebd0 <xfrm_policy_print+0x1c0>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x5,%edx
jbe    806ecf0 <xfrm_policy_print+0x2e0>
movzbl 0x4(%eax),%edx
test   %esi,%esi
je     806eaaf <xfrm_policy_print+0x9f>
mov    %esi,%eax
call   806e890 <do_xfrm_state+0x1090>
test   %eax,%eax
je     806eb21 <xfrm_policy_print+0x111>
movzwl 0x4(%ebx),%eax
cmp    $0x14,%ax
je     806ebd8 <xfrm_policy_print+0x1c8>
cmp    $0x19,%ax
je     806ec90 <xfrm_policy_print+0x280>
cmp    $0x1b,%ax
je     806ecc0 <xfrm_policy_print+0x2b0>
mov    0xb8(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80696c0 <xfrm_policy_info_print>
cmpw   $0x1b,0x4(%ebx)
je     806ec30 <xfrm_policy_print+0x220>
mov    0x8095c98,%eax
test   %eax,%eax
jne    806ebb0 <xfrm_policy_print+0x1a0>
mov    0xb8(%esp),%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1b,%ax
jne    806eb58 <xfrm_policy_print+0x148>
lea    0x10(%ebx),%ebp
sub    $0xb8,%edx
mov    %ebp,%esi
js     806ed1f <xfrm_policy_print+0x30f>
lea    0xb8(%ebx),%eax
jmp    806ea65 <xfrm_policy_print+0x55>
lea    0x0(%esi),%esi
movzwl 0x6(%ebx),%ecx
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8089c1a,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x9c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
sub    $0x50,%edx
js     806ed1f <xfrm_policy_print+0x30f>
lea    0x50(%ebx),%eax
xor    %ebp,%ebp
xor    %esi,%esi
jmp    806ea65 <xfrm_policy_print+0x55>
lea    0x0(%esi),%esi
mov    0xb8(%esp),%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
jmp    806eb10 <xfrm_policy_print+0x100>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
jmp    806eaa0 <xfrm_policy_print+0x90>
nop
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
cmpw   $0x14,0x4(%ebx)
jne    806ead1 <xfrm_policy_print+0xc1>
mov    0x48(%esp),%esi
test   %esi,%esi
je     806ed79 <xfrm_policy_print+0x369>
movzwl (%esi),%eax
sub    $0x4,%eax
cmp    $0xa3,%eax
jbe    806ed4a <xfrm_policy_print+0x33a>
add    $0x4,%esi
jmp    806ead1 <xfrm_policy_print+0xc1>
nop
mov    0xb8(%esp),%eax
movl   $0x9,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
movzbl 0xa4(%ebp),%eax
movl   $0x8088d29,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0xb8(%esp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xb8(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8095c90,%eax
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
jmp    806eb03 <xfrm_policy_print+0xf3>
xchg   %ax,%ax
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d17,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    806ebff <xfrm_policy_print+0x1ef>
lea    0x0(%esi,%eiz,1),%esi
mov    0xb8(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088d20,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    806ebff <xfrm_policy_print+0x1ef>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089dac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806eb21 <xfrm_policy_print+0x111>
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    806eb21 <xfrm_policy_print+0x111>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089050,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806eb21 <xfrm_policy_print+0x111>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089dd0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
or     $0xffffffff,%eax
jmp    806eb21 <xfrm_policy_print+0x111>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xb4(%esp),%ebx
mov    0xb8(%esp),%edi
movzwl 0x4(%ebx),%edx
mov    0x10(%edi),%ebp
mov    (%ebx),%eax
cmp    $0x13,%dx
jne    806eee8 <xfrm_policy_print+0x4d8>
sub    $0xb4,%eax
mov    %eax,0xc(%esp)
js     806ef8e <xfrm_policy_print+0x57e>
lea    0xb4(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
movl   $0x18,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x6c(%esp),%eax
test   %eax,%eax
je     806ef28 <xfrm_policy_print+0x518>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x5,%edx
jbe    806ef5f <xfrm_policy_print+0x54f>
movzbl 0x4(%eax),%edx
lea    0x10(%ebx),%esi
mov    %esi,%eax
call   806e890 <do_xfrm_state+0x1090>
test   %eax,%eax
je     806eedd <xfrm_policy_print+0x4cd>
mov    0x8(%edi),%edx
cmp    0x4(%edi),%edx
jg     806ef30 <xfrm_policy_print+0x520>
add    (%edi),%edx
mov    $0x1,%eax
mov    $0x14,%ecx
mov    %ax,0x6(%edx)
mov    0x1c(%ebp),%eax
movl   $0x50,(%edx)
mov    %cx,0x4(%edx)
add    $0x1,%eax
mov    %eax,0x1c(%ebp)
mov    %eax,0x8(%edx)
mov    0x10(%ebx),%ecx
mov    %ecx,0x10(%edx)
mov    0x4(%esi),%ecx
mov    %ecx,0x14(%edx)
mov    0x8(%esi),%ecx
mov    %ecx,0x18(%edx)
mov    0xc(%esi),%ecx
mov    %ecx,0x1c(%edx)
mov    0x10(%esi),%ecx
mov    %ecx,0x20(%edx)
mov    0x14(%esi),%ecx
mov    %ecx,0x24(%edx)
mov    0x18(%esi),%ecx
mov    %ecx,0x28(%edx)
mov    0x1c(%esi),%ecx
mov    %ecx,0x2c(%edx)
mov    0x20(%esi),%ecx
mov    %ecx,0x30(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x34(%edx)
mov    0x28(%esi),%ecx
mov    %ecx,0x38(%edx)
mov    0x2c(%esi),%ecx
mov    %ecx,0x3c(%edx)
mov    0x30(%esi),%ecx
mov    %ecx,0x40(%edx)
mov    0x34(%esi),%ecx
mov    %ecx,0x44(%edx)
movzbl 0xb0(%ebx),%eax
mov    %al,0x4c(%edx)
mov    0xac(%ebx),%eax
mov    %eax,0x48(%edx)
mov    (%edx),%eax
addl   $0x1,0xc(%edi)
add    %eax,0x8(%edi)
xor    %eax,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzwl 0x6(%ebx),%ecx
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %edx,0x10(%esp)
movl   $0x8089c1a,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x9c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %edx,%edx
jmp    806ee27 <xfrm_policy_print+0x417>
nop
mov    0x8095c40,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089c38,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806eedd <xfrm_policy_print+0x4cd>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089dac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    806eedd <xfrm_policy_print+0x4cd>
mov    0x8095c40,%eax
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    806eedd <xfrm_policy_print+0x4cd>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
mov    $0x204,%ecx
push   %esi
mov    $0x1d,%esi
push   %ebx
mov    $0x1,%ebx
sub    $0x86c,%esp
mov    %eax,0x1c(%esp)
lea    0x4c(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x85c(%esp)
xor    %eax,%eax
mov    %edx,0x18(%esp)
movl   $0x0,0x22(%esp)
rep stos %eax,%es:(%edi)
xor    %ecx,%ecx
test   %ebp,%ebp
mov    %cx,0x26(%esp)
movl   $0x10,0x4c(%esp)
mov    %bx,0x52(%esp)
mov    %si,0x50(%esp)
jle    806f0d3 <xfrm_policy_print+0x6c3>
mov    %edx,%eax
xor    %edx,%edx
mov    %edx,0x14(%esp)
jmp    806f034 <xfrm_policy_print+0x624>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x14(%esp)
mov    (%eax),%ebx
mov    $0x6,%ecx
mov    $0x8089bce,%edi
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806f176 <xfrm_policy_print+0x766>
mov    0x14(%esp),%edx
test   %edx,%edx
jne    806f18b <xfrm_policy_print+0x77b>
sub    $0x1,%ebp
add    $0x4,%eax
test   %ebp,%ebp
mov    %eax,0x18(%esp)
mov    %ebp,0x1c(%esp)
je     806f186 <xfrm_policy_print+0x776>
lea    0x18(%esp),%ecx
lea    0x1c(%esp),%edx
lea    0x22(%esp),%eax
call   806e6f0 <do_xfrm_state+0xef0>
mov    0x1c(%esp),%eax
lea    -0x1(%eax),%ebp
mov    0x18(%esp),%eax
mov    %ebp,0x1c(%esp)
add    $0x4,%eax
test   %ebp,%ebp
mov    %eax,0x18(%esp)
jg     806f030 <xfrm_policy_print+0x620>
test   %ebx,%ebx
je     806f0d3 <xfrm_policy_print+0x6c3>
lea    0x22(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x4c(%esp),%eax
movl   $0x6,0x10(%esp)
movl   $0x10,0x8(%esp)
movl   $0x810,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
lea    0x28(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806f1ac <xfrm_policy_print+0x79c>
cmpl   $0x1,0x8095ca4
jle    806f125 <xfrm_policy_print+0x715>
mov    0x8095c40,%eax
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089c50,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
lea    0x4c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806f1a0 <xfrm_policy_print+0x790>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0x85c(%esp),%edi
xor    %gs:0x14,%edi
jne    806f19b <xfrm_policy_print+0x78b>
add    $0x86c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %ebx,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
call   8080010 <incomplete_command>
mov    %ebx,0x4(%esp)
movl   $0x8089bce,(%esp)
call   8080100 <duparg>
call   804b660 <__stack_chk_fail@plt>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%esi
mov    0x28(%esp),%ebx
mov    %esi,(%esp)
call   804b880 <strlen@plt>
mov    $0x8,%edx
mov    %dx,0x2(%ebx)
movb   $0x1,0x5(%ebx)
movb   $0x1,0x4(%ebx)
add    $0x1,%eax
lea    0x8(%eax),%edx
mov    %ax,0x6(%ebx)
mov    %dx,(%ebx)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
nop
push   %ebp
mov    $0x1,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x9dc,%esp
mov    %eax,0x3c(%esp)
mov    0x9f0(%esp),%eax
lea    0x17c(%esp),%edi
mov    %edx,0x38(%esp)
mov    %ecx,%edx
mov    $0x214,%ecx
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
mov    %eax,0x34(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x9cc(%esp)
xor    %eax,%eax
movl   $0x0,0x42(%esp)
rep stos %eax,%es:(%edi)
xor    %edi,%edi
cmp    $0x1,%edx
mov    %di,0x46(%esp)
lea    0x74(%esp),%edi
mov    %esi,%edx
movl   $0x50,0x17c(%esp)
00
mov    %bp,0x182(%esp)
mov    $0x42,%cl
rep stos %eax,%es:(%edi)
sbb    %eax,%eax
not    %eax
add    $0x15,%eax
test   %esi,%esi
mov    %ax,0x180(%esp)
jle    806f6e8 <xfrm_sctx_parse+0x528>
mov    0x38(%esp),%eax
xor    %ebp,%ebp
movl   $0x0,0x24(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x30(%esp)
jmp    806f362 <xfrm_sctx_parse+0x1a2>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x63,%ecx
jne    806f3c0 <xfrm_sctx_parse+0x200>
cmpb   $0x74,0x1(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
cmpb   $0x78,0x2(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
cmpb   $0x0,0x3(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
mov    0x24(%esp),%esi
test   %esi,%esi
jne    806f72e <xfrm_sctx_parse+0x56e>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     806f719 <xfrm_sctx_parse+0x559>
lea    0x74(%esp),%edi
mov    %edi,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x7c(%esp),%eax
mov    %eax,(%esp)
call   806f1c0 <xfrm_sctx_parse>
mov    %ebx,0x24(%esp)
mov    0x3c(%esp),%eax
lea    -0x1(%eax),%edx
mov    0x38(%esp),%eax
mov    %edx,0x3c(%esp)
add    $0x4,%eax
test   %edx,%edx
mov    %eax,0x38(%esp)
jle    806f530 <xfrm_sctx_parse+0x370>
mov    (%eax),%ebx
mov    %edx,0x20(%esp)
movzbl (%ebx),%ecx
cmp    $0x64,%ecx
jne    806f2d8 <xfrm_sctx_parse+0x118>
cmpb   $0x69,0x1(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
cmpb   $0x72,0x2(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
cmpb   $0x0,0x3(%ebx)
jne    806f3c0 <xfrm_sctx_parse+0x200>
test   %ebp,%ebp
jne    806f71e <xfrm_sctx_parse+0x55e>
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     806f719 <xfrm_sctx_parse+0x559>
lea    0x38(%esp),%ecx
mov    %ebx,%ebp
lea    0x3c(%esp),%edx
lea    0x1c8(%esp),%eax
call   806e650 <do_xfrm_state+0xe50>
jmp    806f344 <xfrm_sctx_parse+0x184>
mov    $0x5,%ecx
mov    %ebx,%esi
mov    $0x8084e9c,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     806f4b8 <xfrm_sctx_parse+0x2f8>
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8089bb1,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806f458 <xfrm_sctx_parse+0x298>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
jne    806f7e2 <xfrm_sctx_parse+0x622>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     806f719 <xfrm_sctx_parse+0x559>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x1c4(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    806f7a0 <xfrm_sctx_parse+0x5e0>
mov    %ebx,0x28(%esp)
jmp    806f344 <xfrm_sctx_parse+0x184>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8089bce,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806f4e0 <xfrm_sctx_parse+0x320>
mov    0x2c(%esp),%edx
test   %edx,%edx
jne    806f78b <xfrm_sctx_parse+0x5cb>
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     806f719 <xfrm_sctx_parse+0x559>
lea    0x38(%esp),%ecx
lea    0x3c(%esp),%edx
lea    0x42(%esp),%eax
call   806e6f0 <do_xfrm_state+0xef0>
mov    %ebx,0x2c(%esp)
jmp    806f344 <xfrm_sctx_parse+0x184>
lea    0x0(%esi,%eiz,1),%esi
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8068730 <xfrm_parse_mark>
jmp    806f344 <xfrm_sctx_parse+0x184>
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%eax
test   %eax,%eax
jne    806f77b <xfrm_sctx_parse+0x5bb>
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x18c(%esp),%eax
mov    %eax,(%esp)
call   806a320 <xfrm_selector_parse>
mov    0x8095ca8,%eax
mov    %ebx,0x30(%esp)
test   %eax,%eax
jne    806f344 <xfrm_sctx_parse+0x184>
movzwl 0x1b4(%esp),%eax
mov    %eax,0x8095ca8
jmp    806f344 <xfrm_sctx_parse+0x184>
xchg   %ax,%ax
test   %ebp,%ebp
je     806f6e8 <xfrm_sctx_parse+0x528>
mov    0x2c(%esp),%ebp
test   %ebp,%ebp
je     806f56f <xfrm_sctx_parse+0x3af>
lea    0x42(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
movl   $0x6,0x10(%esp)
movl   $0x10,0x8(%esp)
movl   $0x850,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x28(%esp),%edi
test   %edi,%edi
je     806f73e <xfrm_sctx_parse+0x57e>
mov    0x28(%esp),%ebx
test   %ebx,%ebx
jne    806f7c2 <xfrm_sctx_parse+0x602>
lea    0x50(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     806f6d7 <xfrm_sctx_parse+0x517>
cmpw   $0x0,0x1b4(%esp)
00
je     806f660 <xfrm_sctx_parse+0x4a0>
mov    0x48(%esp),%eax
test   %eax,0x4c(%esp)
jne    806f67b <xfrm_sctx_parse+0x4bb>
mov    0x24(%esp),%eax
test   %eax,%eax
je     806f600 <xfrm_sctx_parse+0x440>
movzwl 0x74(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x850,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x74(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x34(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
lea    0x17c(%esp),%eax
mov    %eax,0x4(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     806f7b6 <xfrm_sctx_parse+0x5f6>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0x9cc(%esp),%edi
xor    %gs:0x14,%edi
jne    806f79b <xfrm_sctx_parse+0x5db>
add    $0x9dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%eax
mov    $0x2,%edx
test   %eax,0x4c(%esp)
mov    %dx,0x1b4(%esp)
je     806f5c8 <xfrm_sctx_parse+0x408>
lea    0x48(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x15,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %eax,%eax
jns    806f5c8 <xfrm_sctx_parse+0x408>
mov    0x8095c40,%eax
movl   $0x808a17d,0xc(%esp)
movl   $0x8089c5e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089dfc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    %ebx,0x4(%esp)
movl   $0x80880c3,(%esp)
call   8080100 <duparg>
mov    %ebx,0x4(%esp)
movl   $0x8088e1e,(%esp)
call   8080100 <duparg>
mov    0x30(%esp),%esi
test   %esi,%esi
jne    806f57b <xfrm_sctx_parse+0x3bb>
mov    0x8095c40,%eax
movl   $0x3e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089e28,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %ebx,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   80800b0 <invarg>
mov    %ebx,0x4(%esp)
movl   $0x8089bce,(%esp)
call   8080100 <duparg>
call   804b660 <__stack_chk_fail@plt>
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x8089bb7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
mov    0x30(%esp),%ecx
test   %ecx,%ecx
je     806f587 <xfrm_sctx_parse+0x3c7>
movl   $0x80879a1,0x4(%esp)
movl   $0x8088ade,(%esp)
call   8080150 <duparg2>
mov    %ebx,0x4(%esp)
movl   $0x8089bb1,(%esp)
call   8080100 <duparg>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    $0x400,%ecx
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1020,%esp
mov    %gs:0x14,%eax
mov    %eax,0x101c(%esp)
xor    %eax,%eax
lea    0x1c(%esp),%ebx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
mov    %esi,%eax
mov    %ebx,(%esp)
call   806f210 <xfrm_sctx_parse+0x50>
mov    0x8095c80,%eax
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   806ea10 <xfrm_policy_print>
test   %eax,%eax
js     806f86f <xfrm_sctx_parse+0x6af>
xor    %eax,%eax
mov    0x101c(%esp),%esi
xor    %gs:0x14,%esi
jne    806f86a <xfrm_sctx_parse+0x6aa>
add    $0x1020,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80841ee,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
push   %ebp
mov    $0x1,%ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0xe4c,%esp
mov    %gs:0x14,%eax
mov    %eax,0xe3c(%esp)
xor    %eax,%eax
lea    0x588(%esp),%edi
mov    %ecx,0x38(%esp)
mov    $0x22d,%ecx
mov    %edx,0x3c(%esp)
movl   $0x0,0x54(%esp)
movl   $0x0,0x58(%esp)
movl   $0x0,0x4e(%esp)
rep stos %eax,%es:(%edi)
xor    %edi,%edi
test   %edx,%edx
mov    %di,0x52(%esp)
lea    0x188(%esp),%edi
movl   $0xb4,0x588(%esp)
00
mov    %bp,0x58e(%esp)
mov    %si,0x58c(%esp)
movl   $0xffffffff,0x5d0(%esp)
ff
mov    $0x100,%cx
rep stos %eax,%es:(%edi)
lea    0x80(%esp),%edi
movl   $0xffffffff,0x5d4(%esp)
ff
movl   $0xffffffff,0x5d8(%esp)
ff
movl   $0xffffffff,0x5dc(%esp)
ff
movl   $0xffffffff,0x5e0(%esp)
ff
movl   $0xffffffff,0x5e4(%esp)
ff
mov    $0x42,%cl
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
movl   $0xffffffff,0x5e8(%esp)
ff
movl   $0xffffffff,0x5ec(%esp)
ff
mov    %ax,0x5c0(%esp)
jle    80701fe <xfrm_sctx_parse+0x103e>
mov    0x38(%esp),%eax
xor    %ebp,%ebp
movl   $0x0,0x30(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
jmp    806fa50 <xfrm_sctx_parse+0x890>
cmp    $0x63,%ecx
jne    806fab8 <xfrm_sctx_parse+0x8f8>
cmpb   $0x74,0x1(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
cmpb   $0x78,0x2(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
cmpb   $0x0,0x3(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
mov    0x24(%esp),%esi
test   %esi,%esi
jne    807025c <xfrm_sctx_parse+0x109c>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
lea    0x80(%esp),%edi
mov    %edi,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x88(%esp),%eax
mov    %eax,(%esp)
call   806f1c0 <xfrm_sctx_parse>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
mov    %ebx,0x24(%esp)
sub    $0x1,%edx
add    $0x4,%eax
test   %edx,%edx
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
jle    806fcc8 <xfrm_sctx_parse+0xb08>
mov    (%eax),%ebx
mov    %edx,0x20(%esp)
movzbl (%ebx),%ecx
cmp    $0x64,%ecx
jne    806f9c0 <xfrm_sctx_parse+0x800>
cmpb   $0x69,0x1(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
cmpb   $0x72,0x2(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
cmpb   $0x0,0x3(%ebx)
jne    806fab8 <xfrm_sctx_parse+0x8f8>
test   %ebp,%ebp
jne    8070234 <xfrm_sctx_parse+0x1074>
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
lea    0x3c(%esp),%edx
mov    %ebx,%ebp
lea    0x38(%esp),%ecx
lea    0x638(%esp),%eax
call   806e650 <do_xfrm_state+0xe50>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
xchg   %ax,%ax
mov    $0x5,%ecx
mov    %ebx,%esi
mov    $0x8084e9c,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     806fbb0 <xfrm_sctx_parse+0x9f0>
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8089bb1,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806fb48 <xfrm_sctx_parse+0x988>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x634(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    80702fa <xfrm_sctx_parse+0x113a>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8089bce,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806fbe0 <xfrm_sctx_parse+0xa20>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
jne    80702ea <xfrm_sctx_parse+0x112a>
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
lea    0x3c(%esp),%edx
lea    0x38(%esp),%ecx
lea    0x4e(%esp),%eax
call   806e6f0 <do_xfrm_state+0xef0>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
mov    %ebx,0x28(%esp)
jmp    806fa3a <xfrm_sctx_parse+0x87a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   8068730 <xfrm_parse_mark>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x7,%ecx
mov    %ebx,%esi
mov    $0x8089bd4,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806fc50 <xfrm_sctx_parse+0xa90>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ebx
mov    %ebx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
mov    0x4(%eax),%eax
mov    $0x6,%ecx
mov    $0x8089bdb,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x20(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    806fe18 <xfrm_sctx_parse+0xc58>
movb   $0x0,0x639(%esp)
mov    %ebx,%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x9,%ecx
mov    %ebx,%esi
mov    $0x8084246,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806fe40 <xfrm_sctx_parse+0xc80>
mov    0x20(%esp),%edx
lea    0x4(%eax),%ecx
mov    %ecx,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
mov    %eax,0x4(%esp)
lea    0x630(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     806fb34 <xfrm_sctx_parse+0x974>
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x8089c00,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
test   %ebp,%ebp
je     80701fe <xfrm_sctx_parse+0x103e>
mov    0x28(%esp),%ebx
test   %ebx,%ebx
je     806fd07 <xfrm_sctx_parse+0xb47>
lea    0x4e(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x588(%esp),%eax
movl   $0x6,0x10(%esp)
movl   $0x10,0x8(%esp)
movl   $0x8b4,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     806fd3d <xfrm_sctx_parse+0xb7d>
mov    %eax,0x10(%esp)
lea    0x188(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x588(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x8b4,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x58(%esp),%ecx
test   %ecx,%ecx
jne    807000d <xfrm_sctx_parse+0xe4d>
mov    0x24(%esp),%edx
test   %edx,%edx
je     806fd87 <xfrm_sctx_parse+0xbc7>
movzwl 0x80(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x8b4,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x80(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x588(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
lea    0x5c(%esp),%ebx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     80702b9 <xfrm_sctx_parse+0x10f9>
cmpw   $0x0,0x5c0(%esp)
00
je     806fe90 <xfrm_sctx_parse+0xcd0>
lea    0x588(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     80702de <xfrm_sctx_parse+0x111e>
mov    %ebx,(%esp)
call   807d670 <rtnl_close>
xor    %eax,%eax
mov    0xe3c(%esp),%edi
xor    %gs:0x14,%edi
jne    80702d9 <xfrm_sctx_parse+0x1119>
add    $0xe4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x20(%esp),%esi
mov    $0x8089be1,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80702c5 <xfrm_sctx_parse+0x1105>
movb   $0x1,0x639(%esp)
mov    %ebx,%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
lea    0x0(%esi),%esi
mov    $0x5,%ecx
mov    %ebx,%esi
mov    $0x8088de7,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    806fea2 <xfrm_sctx_parse+0xce2>
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
lea    0x38(%esp),%ecx
lea    0x3c(%esp),%edx
lea    0x63a(%esp),%eax
call   806e780 <do_xfrm_state+0xf80>
jmp    806fb34 <xfrm_sctx_parse+0x974>
nop
mov    $0x2,%eax
mov    %ax,0x5c0(%esp)
jmp    806fdba <xfrm_sctx_parse+0xbfa>
mov    $0x6,%ecx
mov    %ebx,%esi
mov    $0x8086475,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
je     8070078 <xfrm_sctx_parse+0xeb8>
mov    $0x5,%ecx
mov    %ebx,%esi
mov    $0x8089c75,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8070190 <xfrm_sctx_parse+0xfd0>
mov    0x2c(%esp),%edi
add    $0x40,%edi
cmp    $0x400,%edi
mov    %edi,0x34(%esp)
ja     8070288 <xfrm_sctx_parse+0x10c8>
mov    0x20(%esp),%edx
lea    0x188(%esp),%edi
add    $0x4,%eax
mov    0x8095ca8,%ecx
add    0x2c(%esp),%edi
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %cx,0x18(%edi)
movl   $0xffffffff,0x34(%edi)
movl   $0xffffffff,0x38(%edi)
movl   $0xffffffff,0x3c(%edi)
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
mov    %ebp,0x2c(%esp)
mov    %edi,%ebp
mov    %edx,0x48(%esp)
mov    %eax,0x5c(%esp)
movl   $0x0,0x20(%esp)
jmp    806ffac <xfrm_sctx_parse+0xdec>
lea    0x0(%esi),%esi
add    $0x4,%eax
mov    %eax,0x5c(%esp)
mov    0x48(%esp),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x48(%esp)
jle    807022f <xfrm_sctx_parse+0x106f>
lea    0x5c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x30(%ebp),%eax
mov    %eax,(%esp)
call   806a160 <xfrm_mode_parse>
mov    0x48(%esp),%edx
cmp    $0x1,%edx
jle    80701e3 <xfrm_sctx_parse+0x1023>
mov    0x5c(%esp),%eax
sub    $0x1,%edx
mov    %edx,0x48(%esp)
add    $0x4,%eax
mov    %eax,0x5c(%esp)
mov    (%eax),%ebx
mov    $0x5,%ecx
mov    $0x8085ebc,%edi
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     806ff58 <xfrm_sctx_parse+0xd98>
mov    $0x8088c93,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80700c0 <xfrm_sctx_parse+0xf00>
add    $0x4,%eax
mov    %eax,0x5c(%esp)
mov    0x48(%esp),%eax
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x48(%esp)
jle    807022f <xfrm_sctx_parse+0x106f>
lea    0x5c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%ebp),%eax
mov    %eax,(%esp)
call   806a2c0 <xfrm_reqid_parse>
mov    0x48(%esp),%edx
jmp    806ff91 <xfrm_sctx_parse+0xdd1>
lea    0x54(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x588(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x15,0x8(%esp)
movl   $0x800,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %eax,%eax
jns    806fd49 <xfrm_sctx_parse+0xb89>
mov    0x8095c40,%eax
movl   $0x808a197,0xc(%esp)
movl   $0x8089c5e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
mov    0x20(%esp),%edx
add    $0x4,%eax
mov    %eax,0x38(%esp)
sub    $0x1,%edx
test   %edx,%edx
mov    %edx,0x3c(%esp)
je     807022f <xfrm_sctx_parse+0x106f>
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x5d0(%esp),%eax
mov    %eax,(%esp)
call   806ac90 <xfrm_lifetime_cfg_parse>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
xchg   %ax,%ax
mov    $0x8089c7a,%edi
mov    $0x6,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8070106 <xfrm_sctx_parse+0xf46>
mov    0x48(%esp),%edi
lea    0x4(%eax),%edx
mov    %edx,0x5c(%esp)
lea    -0x1(%edi),%edx
test   %edx,%edx
mov    %edx,0x48(%esp)
jle    807022f <xfrm_sctx_parse+0x106f>
mov    0x4(%eax),%eax
mov    $0x8089c80,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8070160 <xfrm_sctx_parse+0xfa0>
movb   $0x0,0x32(%ebp)
jmp    806ff91 <xfrm_sctx_parse+0xdd1>
mov    0x20(%esp),%edx
test   %edx,%edx
jne    8070244 <xfrm_sctx_parse+0x1084>
lea    0x5c(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x18(%ebp),%eax
mov    %eax,0x8(%esp)
lea    0x1c(%ebp),%eax
movl   $0x0,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x8095ca8
00
call   8069d50 <xfrm_id_parse>
movzwl 0x18(%ebp),%eax
mov    0x48(%esp),%edx
mov    %ebx,0x20(%esp)
mov    %eax,0x8095ca8
jmp    806ff91 <xfrm_sctx_parse+0xdd1>
cmpb   $0x75,(%eax)
jne    8070180 <xfrm_sctx_parse+0xfc0>
cmpb   $0x73,0x1(%eax)
jne    8070180 <xfrm_sctx_parse+0xfc0>
cmpb   $0x65,0x2(%eax)
jne    8070180 <xfrm_sctx_parse+0xfc0>
cmpb   $0x0,0x3(%eax)
jne    8070180 <xfrm_sctx_parse+0xfc0>
movb   $0x1,0x32(%ebp)
jmp    806ff91 <xfrm_sctx_parse+0xdd1>
mov    %eax,0x4(%esp)
movl   $0x8089c89,(%esp)
call   80800b0 <invarg>
mov    0x30(%esp),%edi
test   %edi,%edi
jne    8070278 <xfrm_sctx_parse+0x10b8>
lea    0x38(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x598(%esp),%eax
mov    %eax,(%esp)
call   806a320 <xfrm_selector_parse>
mov    0x8095ca8,%esi
test   %esi,%esi
jne    80701d2 <xfrm_sctx_parse+0x1012>
movzwl 0x5c0(%esp),%eax
mov    %eax,0x8095ca8
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
mov    %ebx,0x30(%esp)
jmp    806fa3a <xfrm_sctx_parse+0x87a>
mov    0x2c(%esp),%ebp
cmp    %edx,0x3c(%esp)
je     807026c <xfrm_sctx_parse+0x10ac>
mov    0x34(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x5c(%esp),%eax
jmp    806fa3a <xfrm_sctx_parse+0x87a>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089dfc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
mov    %ebx,0x4(%esp)
movl   $0x80880c3,(%esp)
call   8080100 <duparg>
sub    $0x4,%eax
mov    0x2c(%esp),%ebp
mov    %eax,0x5c(%esp)
mov    0x48(%esp),%eax
lea    0x1(%eax),%edx
mov    %edx,0x48(%esp)
jmp    80701e7 <xfrm_sctx_parse+0x1027>
mov    %ebx,0x4(%esp)
movl   $0x8088e1e,(%esp)
call   8080100 <duparg>
movl   $0x8089ca1,(%esp)
call   8080060 <missarg>
mov    %ebx,0x4(%esp)
movl   $0x8086ac2,(%esp)
call   8080100 <duparg>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089e68,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x20(%esp),%eax
movl   $0x8089be7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   804b660 <__stack_chk_fail@plt>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
mov    %ebx,0x4(%esp)
movl   $0x8089bce,(%esp)
call   8080100 <duparg>
mov    0x38(%esp),%eax
mov    (%eax),%eax
movl   $0x8089bb7,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xfc,%esp
mov    0x110(%esp),%esi
mov    %gs:0x14,%eax
mov    %eax,0xec(%esp)
xor    %eax,%eax
mov    0x114(%esp),%ebx
test   %esi,%esi
jle    8070eb1 <do_xfrm_policy+0xba1>
movl   $0x808340d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070b60 <do_xfrm_policy+0x850>
movl   $0x8088eb5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070b30 <do_xfrm_policy+0x820>
movl   $0x8085f9e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070b88 <do_xfrm_policy+0x878>
movl   $0x8088ec5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070ec7 <do_xfrm_policy+0xbb7>
movl   $0x8088ecf,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070ec7 <do_xfrm_policy+0xbb7>
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070eba <do_xfrm_policy+0xbaa>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070eba <do_xfrm_policy+0xbaa>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070eba <do_xfrm_policy+0xbaa>
movl   $0x8084559,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070b78 <do_xfrm_policy+0x868>
movl   $0x808342e,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8070ba8 <do_xfrm_policy+0x898>
movl   $0x8088ed6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%esi
je     8070be8 <do_xfrm_policy+0x8d8>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8070bb8 <do_xfrm_policy+0x8a8>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089e8c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089ed4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x43,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089f1c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089f60,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089f88,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089fd4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a018,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x50,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a060,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f46,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a0b4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089cf9,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089920,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088fc6,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x6,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x11,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x84,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x21,(%esp)
call   8067a00 <strxf_proto>
mov    0x8095c40,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808996c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088fdb,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x3a,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x87,(%esp)
call   8067a00 <strxf_proto>
mov    0x8095c40,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089990,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x2f,(%esp)
call   8067a00 <strxf_proto>
movl   $0x8088ff0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80899b8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089d0f,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089d26,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089d3b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x20,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80836d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089d54,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80899e8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089a14,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089a64,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x25,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a0e4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x39,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a10c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x41,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089788,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088f7e,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x32,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x33,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x6c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x2b,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8088f8d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x3c,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8087b58,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089844,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089d6c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%esi),%edx
mov    $0x19,%al
lea    0x4(%ebx),%ecx
call   806f8a0 <xfrm_sctx_parse+0x6e0>
mov    %eax,%esi
mov    0xec(%esp),%edi
xor    %gs:0x14,%edi
mov    %esi,%eax
jne    8070eac <do_xfrm_policy+0xb9c>
add    $0xfc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    -0x1(%esi),%edx
mov    $0x13,%al
lea    0x4(%ebx),%ecx
call   806f8a0 <xfrm_sctx_parse+0x6e0>
mov    %eax,%esi
jmp    8070b3f <do_xfrm_policy+0x82f>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%esi),%eax
lea    0x4(%ebx),%edx
call   806f800 <xfrm_sctx_parse+0x640>
mov    %eax,%esi
jmp    8070b3f <do_xfrm_policy+0x82f>
nop
lea    -0x1(%esi),%eax
mov    $0x1,%ecx
lea    0x4(%ebx),%edx
movl   $0x0,(%esp)
call   806f210 <xfrm_sctx_parse+0x50>
mov    %eax,%esi
jmp    8070b3f <do_xfrm_policy+0x82f>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%esi),%eax
lea    0x4(%ebx),%edx
call   806efc0 <xfrm_policy_print+0x5b0>
mov    %eax,%esi
jmp    8070b3f <do_xfrm_policy+0x82f>
nop
mov    (%ebx),%eax
movl   $0x808a148,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
lea    0x58(%esp),%ebx
mov    $0x25,%ecx
mov    %ebx,%edi
mov    $0x1,%edx
rep stos %eax,%es:(%edi)
lea    0x34(%esp),%ebp
mov    $0x25,%ecx
movl   $0x6,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebp,(%esp)
movl   $0x14,0x58(%esp)
mov    %dx,0x5e(%esp)
mov    %cx,0x5c(%esp)
movl   $0xffffffff,0x68(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     8070ee3 <do_xfrm_policy+0xbd3>
mov    %ebx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8070ed7 <do_xfrm_policy+0xbc7>
mov    0x58(%esp),%eax
mov    0x8095c80,%ebx
sub    $0x14,%eax
mov    %eax,0x1c(%esp)
js     8070e86 <do_xfrm_policy+0xb76>
mov    0x1c(%esp),%eax
movl   $0x2,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x6c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089cbd,(%esp)
call   804b710 <fwrite@plt>
mov    0x2c(%esp),%edi
test   %edi,%edi
je     8070d55 <do_xfrm_policy+0xa45>
movzwl (%edi),%eax
sub    $0x4,%eax
cmp    $0x17,%eax
jbe    8070e82 <do_xfrm_policy+0xb72>
mov    0x4(%edi),%eax
movl   $0x8089cc3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%edi),%eax
movl   $0x8089ccb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%edi),%eax
movl   $0x8089cd3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jne    8070df0 <do_xfrm_policy+0xae0>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
cmpl   $0x1,0x8095ca4
jle    8070dd3 <do_xfrm_policy+0xac3>
mov    0x30(%esp),%edi
test   %edi,%edi
je     8070dd3 <do_xfrm_policy+0xac3>
movzwl (%edi),%eax
sub    $0x4,%eax
cmp    $0x7,%eax
jbe    8070e82 <do_xfrm_policy+0xb72>
mov    %ebx,0xc(%esp)
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089cea,(%esp)
call   804b710 <fwrite@plt>
mov    0x4(%edi),%eax
movl   $0x8088ef9,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%edi),%eax
movl   $0x8088f3e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebp,(%esp)
call   807d670 <rtnl_close>
jmp    8070b3f <do_xfrm_policy+0x82f>
mov    %ebx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8089cdb,(%esp)
call   804b710 <fwrite@plt>
mov    0x10(%edi),%eax
movl   $0x8089ce3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%edi),%eax
movl   $0x8089ccb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%edi),%eax
movl   $0x8089cd3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0x29,(%esp)
call   804ba50 <fputc@plt>
jmp    8070d45 <do_xfrm_policy+0xa35>
mov    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8089ca6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8070de3 <do_xfrm_policy+0xad3>
call   804b660 <__stack_chk_fail@plt>
xor    %ecx,%ecx
xor    %edx,%edx
call   804c934 <__sprintf_chk@plt+0xd84>
lea    0x4(%ebx),%edx
xor    %ecx,%ecx
lea    -0x1(%esi),%eax
call   804c934 <__sprintf_chk@plt+0xd84>
lea    0x4(%ebx),%edx
mov    $0x1,%ecx
lea    -0x1(%esi),%eax
call   804c934 <__sprintf_chk@plt+0xd84>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
nop
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x130,%esp
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
movzwl 0x14(%esi),%eax
movl   $0x100,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x2c(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x808a1aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
movl   $0x808a1b2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzbl 0x16(%esi),%eax
mov    %eax,(%esp)
call   8067a00 <strxf_proto>
movl   $0x808a1be,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%esi),%eax
movl   $0x808a1cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
bswap  %eax
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x12c(%esp),%eax
xor    %gs:0x14,%eax
jne    8070fd6 <do_xfrm_policy+0xcc6>
add    $0x130,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
call   804b660 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x19c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x18c(%esp)
xor    %eax,%eax
mov    0x8095c94,%eax
mov    0x1b0(%esp),%edi
mov    0x1b4(%esp),%esi
mov    0x1b8(%esp),%ebx
test   %eax,%eax
jne    8071038 <do_xfrm_policy+0xd28>
movzwl 0x4(%esi),%edx
lea    -0x10(%edx),%eax
cmp    $0x16,%ax
ja     80716b8 <do_xfrm_policy+0x13a8>
movzwl %ax,%eax
jmp    *0x808a354(,%eax,4)
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   80809f0 <print_timestamp>
jmp    8071017 <do_xfrm_policy+0xd07>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
lea    0x8c(%esp),%ebp
movl   $0xf,0x8(%esp)
lea    0x10(%esi),%edi
movl   $0x1,0x4(%esp)
movl   $0x808a27e,(%esp)
call   804b710 <fwrite@plt>
movzwl 0x24(%esi),%eax
lea    0x2c(%esi),%edx
mov    %edx,0x8(%esp)
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x8c(%esp)
call   8080470 <rt_addr_n2a>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movzwl 0x4c(%esi),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x808a28e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl 0x24(%esi),%eax
lea    0x3c(%esi),%edx
mov    %edx,0x8(%esp)
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x8c(%esp)
call   8080470 <rt_addr_n2a>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
movzwl 0x4e(%esi),%edx
ror    $0x8,%dx
movzwl %dx,%edx
mov    %edx,0xc(%esp)
movl   $0x808a296,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x28(%esi),%edx
mov    %ebx,%ecx
mov    %edi,%eax
call   8070ef0 <do_xfrm_policy+0xbe0>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,(%esp)
call   804b590 <fflush@plt>
xor    %eax,%eax
mov    0x18c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8071842 <do_xfrm_policy+0x1532>
add    $0x19c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   806b3e0 <xfrm_state_print>
jmp    807115a <do_xfrm_policy+0xe4a>
lea    0x0(%esi),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   806ea10 <xfrm_policy_print>
jmp    807115a <do_xfrm_policy+0xe4a>
lea    0x0(%esi),%esi
mov    (%esi),%eax
sub    $0x124,%eax
mov    %eax,0xc(%esp)
js     807181a <do_xfrm_policy+0x150a>
lea    0x124(%esi),%eax
lea    0x28(%esp),%ebp
mov    %eax,0x8(%esp)
movl   $0x18,0x4(%esp)
mov    %ebp,(%esp)
call   807f0b0 <parse_rtattr>
movzwl 0x60(%esi),%edi
test   %di,%di
jne    80711fb <do_xfrm_policy+0xeeb>
movzwl 0x98(%esi),%edi
test   %di,%di
jne    80711fb <do_xfrm_policy+0xeeb>
movzwl 0x8095ca8,%edi
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a1d6,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x24(%esi),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8083fd5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
mov    0x20(%esi),%edx
test   %eax,%eax
jg     80716f8 <do_xfrm_policy+0x13e8>
test   %edx,%edx
jne    80716f8 <do_xfrm_policy+0x13e8>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
lea    0x38(%esi),%eax
mov    %eax,(%esp)
movl   $0x808a1df,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %edi,0x4(%esp)
call   8068380 <xfrm_selector_print>
lea    0x70(%esi),%eax
mov    %ebp,0x4(%esp)
movl   $0x808a1e6,0x10(%esp)
movl   $0x80868d4,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
call   80696c0 <xfrm_policy_info_print>
mov    0x8095ca4,%ebp
test   %ebp,%ebp
jle    80713fb <do_xfrm_policy+0x10eb>
mov    0x120(%esi),%eax
movl   $0x808a1f0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%edi
test   %edi,%edi
jle    80713fb <do_xfrm_policy+0x10eb>
mov    0x118(%esi),%eax
mov    %eax,(%esp)
call   80678e0 <strxf_mask32>
movl   $0x2,(%esp)
mov    %eax,%edi
call   8067470 <strxf_algotype>
mov    %edi,0x10(%esp)
movl   $0x8088898,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x114(%esi),%eax
mov    %eax,(%esp)
call   80678e0 <strxf_mask32>
movl   $0x1,(%esp)
mov    %eax,%edi
call   8067470 <strxf_algotype>
mov    %edi,0x10(%esp)
movl   $0x8088898,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x11c(%esi),%eax
mov    %eax,(%esp)
call   80678e0 <strxf_mask32>
movl   $0x3,(%esp)
mov    %eax,%esi
call   8067470 <strxf_algotype>
mov    %esi,0x10(%esp)
movl   $0x80888a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80713fb <do_xfrm_policy+0x10eb>
xchg   %ax,%ax
mov    (%esi),%eax
sub    $0x14,%eax
js     8071816 <do_xfrm_policy+0x1506>
mov    %ebx,0xc(%esp)
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a1fe,(%esp)
call   804b710 <fwrite@plt>
movzbl 0x10(%esi),%eax
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
test   %eax,%eax
je     80717f1 <do_xfrm_policy+0x14e1>
mov    %eax,0xc(%esp)
movl   $0x808a20d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x8095c98,%edx
test   %edx,%edx
je     8071152 <do_xfrm_policy+0xe42>
jmp    8071142 <do_xfrm_policy+0xe32>
nop
mov    (%esi),%edi
sub    $0x10,%edi
js     807183c <do_xfrm_policy+0x152c>
mov    %ebx,0xc(%esp)
add    $0x10,%esi
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a21f,(%esp)
call   804b710 <fwrite@plt>
lea    0x28(%esp),%eax
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x18,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x68(%esp),%ecx
test   %ecx,%ecx
je     80713fb <do_xfrm_policy+0x10eb>
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80889ab,(%esp)
call   804b710 <fwrite@plt>
mov    0x68(%esp),%eax
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x5,%edx
jbe    80717c8 <do_xfrm_policy+0x14b8>
movzbl 0x4(%eax),%eax
mov    %eax,(%esp)
call   8067a60 <strxf_ptype>
movl   $0x808314f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80713fb <do_xfrm_policy+0x10eb>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a237,(%esp)
call   804b710 <fwrite@plt>
mov    0x38(%esi),%edi
movl   $0x808a244,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %edi,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %edi,%edi
je     807153c <do_xfrm_policy+0x122c>
test   $0x10,%edi
jne    80717a2 <do_xfrm_policy+0x1492>
test   $0x20,%edi
jne    807177d <do_xfrm_policy+0x146d>
and    $0x40,%edi
jne    8071758 <do_xfrm_policy+0x1448>
mov    %ebx,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a299,(%esp)
call   804b710 <fwrite@plt>
lea    0x8c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x40,%ecx
rep stos %eax,%es:(%edi)
lea    0x28(%esi),%eax
mov    %edx,0xc(%esp)
lea    0x10(%esi),%edi
movl   $0x100,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x10,0x4(%esp)
movzwl 0x24(%esi),%eax
mov    %eax,(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x8083feb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x3c(%esi),%edx
mov    %ebx,%ecx
mov    %edi,%eax
call   8070ef0 <do_xfrm_policy+0xbe0>
jmp    8071142 <do_xfrm_policy+0xe32>
lea    0x0(%esi),%esi
mov    (%esi),%ebp
sub    $0x4c,%ebp
js     8071847 <do_xfrm_policy+0x1537>
movzwl 0x3c(%esi),%edi
mov    %ebx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a22f,(%esp)
test   %di,%di
cmove  0x8095ca8,%di
call   804b710 <fwrite@plt>
movzbl 0x10(%esi),%eax
movzwl %di,%edi
mov    %eax,(%esp)
call   80673a0 <strxf_xfrmproto>
movl   $0x8083fd5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c90,%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
lea    0x14(%esi),%eax
add    $0x4c,%esi
mov    %eax,(%esp)
movl   $0x808a1df,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %edi,0x4(%esp)
call   8068380 <xfrm_selector_print>
mov    %esi,0x8(%esp)
lea    0x28(%esp),%esi
mov    %ebp,0xc(%esp)
movl   $0x18,0x4(%esp)
mov    %esi,(%esp)
call   807f0b0 <parse_rtattr>
movl   $0x80868d6,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8068830 <xfrm_xfrma_print>
mov    0x8095c98,%eax
test   %eax,%eax
je     807115a <do_xfrm_policy+0xe4a>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
jmp    807115a <do_xfrm_policy+0xe4a>
lea    0x0(%esi),%esi
lea    -0x1(%edx),%eax
cmp    $0x2,%ax
jbe    807115a <do_xfrm_policy+0xe4a>
movzwl 0x6(%esi),%eax
mov    %edx,0x10(%esp)
mov    %eax,0x14(%esp)
mov    (%esi),%eax
movl   $0x808a2bc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807115a <do_xfrm_policy+0xe4a>
lea    0x0(%esi,%eiz,1),%esi
bswap  %edx
movl   $0x80886b7,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0x1c(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095ca4,%eax
test   %eax,%eax
jle    8071743 <do_xfrm_policy+0x1433>
mov    0x1c(%esp),%edx
movl   $0x80886c2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0x20,(%esp)
call   804ba50 <fputc@plt>
jmp    807125b <do_xfrm_policy+0xf4b>
mov    %ebx,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a26d,(%esp)
call   804b710 <fwrite@plt>
jmp    807153c <do_xfrm_policy+0x122c>
mov    %ebx,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a25d,(%esp)
call   804b710 <fwrite@plt>
jmp    8071533 <do_xfrm_policy+0x1223>
mov    %ebx,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a24d,(%esp)
call   804b710 <fwrite@plt>
jmp    8071527 <do_xfrm_policy+0x1217>
nop
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8088686,(%esp)
call   804b710 <fwrite@plt>
mov    0x68(%esp),%eax
jmp    80714a5 <do_xfrm_policy+0x1195>
movzbl 0x10(%esi),%eax
movl   $0x808a216,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80713fb <do_xfrm_policy+0x10eb>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807115a <do_xfrm_policy+0xe4a>
mov    %edi,0xc(%esp)
jmp    807181a <do_xfrm_policy+0x150a>
call   804b660 <__stack_chk_fail@plt>
mov    %ebp,0xc(%esp)
jmp    807181a <do_xfrm_policy+0x150a>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edi
movl   $0x80941e0,(%esp)
mov    0x54(%esp),%ebp
call   807d670 <rtnl_close>
movl   $0x0,0x28(%esp)
test   %edi,%edi
jle    8071aaf <do_xfrm_monitor+0x25f>
movl   $0x0,0x20(%esp)
mov    $0xffffffff,%ebx
xor    %esi,%esi
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
jmp    80718c9 <do_xfrm_monitor+0x79>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%edi
lea    0x4(%ebp),%eax
je     8071abb <do_xfrm_monitor+0x26b>
mov    0x4(%ebp),%esi
sub    $0x1,%edi
test   %edi,%edi
lea    0x4(%eax),%ebp
jle    8071911 <do_xfrm_monitor+0xc1>
movl   $0x8087bbf,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80718b0 <do_xfrm_monitor+0x60>
movl   $0x808a29c,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80719a0 <do_xfrm_monitor+0x150>
sub    $0x1,%edi
mov    %ebp,%eax
xor    %ebx,%ebx
test   %edi,%edi
movl   $0x1,0x18(%esp)
lea    0x4(%eax),%ebp
jg     80718c9 <do_xfrm_monitor+0x79>
or     0x18(%esp),%ebx
mov    0x1c(%esp),%ecx
mov    0x20(%esp),%edi
mov    %ebx,%eax
mov    0x2c(%esp),%ebp
or     $0x2,%eax
mov    0x24(%esp),%edx
test   %ecx,%ecx
cmovne %eax,%ebx
mov    %ebx,%eax
or     $0x4,%eax
test   %edi,%edi
cmovne %eax,%ebx
mov    %ebx,%eax
or     $0x8,%eax
test   %ebp,%ebp
cmovne %eax,%ebx
mov    %ebx,%eax
or     $0x10,%eax
test   %edx,%edx
cmovne %eax,%ebx
mov    0x28(%esp),%edx
mov    %ebx,%eax
or     $0x20,%eax
test   %edx,%edx
cmovne %eax,%ebx
test   %esi,%esi
je     8071a40 <do_xfrm_monitor+0x1f0>
movl   $0x80843db,0x4(%esp)
mov    %esi,(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
je     8071acc <do_xfrm_monitor+0x27c>
mov    0x8095c80,%edx
movl   $0x8070fe0,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x8(%esp)
call   807e830 <rtnl_from_file>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x808a2a4,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80719c8 <do_xfrm_monitor+0x178>
mov    %ebp,%eax
xor    %ebx,%ebx
movl   $0x1,0x1c(%esp)
jmp    80718bf <do_xfrm_monitor+0x6f>
movl   $0x808a2ab,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80719f0 <do_xfrm_monitor+0x1a0>
mov    %ebp,%eax
xor    %ebx,%ebx
movl   $0x1,0x20(%esp)
jmp    80718bf <do_xfrm_monitor+0x6f>
movl   $0x808a2ae,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8071a18 <do_xfrm_monitor+0x1c8>
mov    %ebp,%eax
xor    %ebx,%ebx
movl   $0x1,0x24(%esp)
jmp    80718bf <do_xfrm_monitor+0x6f>
movl   $0x8088b5d,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8071a87 <do_xfrm_monitor+0x237>
mov    %ebp,%eax
xor    %ebx,%ebx
movl   $0x1,0x2c(%esp)
jmp    80718bf <do_xfrm_monitor+0x6f>
movl   $0x6,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     8071ac0 <do_xfrm_monitor+0x270>
mov    0x8095c80,%eax
movl   $0x8070fe0,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e530 <rtnl_listen>
test   %eax,%eax
js     8071ae4 <do_xfrm_monitor+0x294>
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x808a2b5,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8071af0 <do_xfrm_monitor+0x2a0>
mov    %ebp,%eax
xor    %ebx,%ebx
movl   $0x1,0x28(%esp)
jmp    80718bf <do_xfrm_monitor+0x6f>
xor    %esi,%esi
mov    $0xffffffff,%ebx
jmp    807194d <do_xfrm_monitor+0xfd>
call   8080010 <incomplete_command>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x8087be1,(%esp)
call   804b700 <perror@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x2,(%esp)
call   804b800 <exit@plt>
movl   $0x8082d28,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8071b38 <do_xfrm_monitor+0x2e8>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a2e4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x0(%ebp),%eax
movl   $0x808a31c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    %edx,0xc(%esp)
lea    0x4(%ebp),%ebx
movl   $0x808a3b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl 0x0(%ebp),%esi
sub    $0x4,%esi
cmp    $0x3,%esi
jle    8071bfe <do_xfrm_monitor+0x3ae>
movzwl 0x4(%ebp),%eax
cmp    $0x3,%ax
jbe    8071bfe <do_xfrm_monitor+0x3ae>
cmp    %eax,%esi
jge    8071bc6 <do_xfrm_monitor+0x376>
jmp    8071bfe <do_xfrm_monitor+0x3ae>
xchg   %ax,%ax
movzwl (%ebx),%eax
cmp    $0x3,%ax
nop
jbe    8071bfe <do_xfrm_monitor+0x3ae>
cmp    %esi,%eax
jg     8071bfe <do_xfrm_monitor+0x3ae>
mov    0x8(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x4(%ebx),%eax
movl   $0x808a3c0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
movzwl (%ebx),%edx
add    $0x3,%edx
and    $0xfffffffc,%edx
sub    %edx,%esi
add    %edx,%ebx
cmp    $0x3,%esi
jg     8071bb8 <do_xfrm_monitor+0x368>
mov    %edi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a3bd,(%esp)
call   804b710 <fwrite@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x60,%esp
mov    0x78(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x5c(%esp)
xor    %eax,%eax
mov    0x74(%esp),%esi
test   %ebx,%ebx
je     8071cf7 <do_xfrm_monitor+0x4a7>
mov    0x14(%ebx),%edx
test   %edx,%edx
je     8071c68 <do_xfrm_monitor+0x418>
movzwl (%edx),%eax
sub    $0x4,%eax
cmp    $0x1,%eax
jbe    8071cf7 <do_xfrm_monitor+0x4a7>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     8071cf7 <do_xfrm_monitor+0x4a7>
movzwl (%eax),%eax
sub    $0x4,%eax
cmp    $0x1,%eax
jbe    8071cf7 <do_xfrm_monitor+0x4a7>
test   %edx,%edx
je     8071e68 <do_xfrm_monitor+0x618>
lea    0x1c(%esp),%eax
movl   $0x40,0x8(%esp)
mov    %eax,0x4(%esp)
movzwl 0x4(%edx),%eax
mov    %eax,(%esp)
call   8081d20 <ll_proto_n2a>
movl   $0x808a1bf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
movzwl 0x4(%eax),%eax
movl   $0x8087e9b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     8071e33 <do_xfrm_monitor+0x5e3>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x7,%edx
ja     8071d10 <do_xfrm_monitor+0x4c0>
mov    0x5c(%esp),%eax
xor    %gs:0x14,%eax
jne    8071e8d <do_xfrm_monitor+0x63d>
add    $0x60,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    0x4(%eax),%edi
mov    %esi,0x4(%esp)
movl   $0x3c,(%esp)
call   804ba50 <fputc@plt>
test   $0x1,%edi
je     8071d57 <do_xfrm_monitor+0x507>
mov    $0x8088729,%eax
and    $0xfffffffe,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808a3d8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2,%edi
je     8071d8b <do_xfrm_monitor+0x53b>
mov    $0x8088729,%eax
and    $0xfffffffd,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808a3e6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x8,%edi
je     8071dbf <do_xfrm_monitor+0x56f>
mov    $0x8088729,%eax
and    $0xfffffff7,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808a3ed,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%edi
je     8071df3 <do_xfrm_monitor+0x5a3>
mov    $0x8088729,%eax
and    $0xfffffffb,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
movl   $0x808a3f4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %edi,%edi
je     8071e13 <do_xfrm_monitor+0x5c3>
mov    %edi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a293,(%esp)
call   804b710 <fwrite@plt>
mov    0x10(%ebx),%ecx
test   %ecx,%ecx
je     8071e46 <do_xfrm_monitor+0x5f6>
mov    $0x808a452,%edx
mov    %esi,%eax
call   8071b70 <do_xfrm_monitor+0x320>
mov    0xc(%ebx),%ecx
test   %ecx,%ecx
je     8071cf7 <do_xfrm_monitor+0x4a7>
mov    $0x808a46a,%edx
mov    %esi,%eax
call   8071b70 <do_xfrm_monitor+0x320>
jmp    8071cf7 <do_xfrm_monitor+0x4a7>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a3c7,(%esp)
call   804b710 <fwrite@plt>
jmp    8071cbe <do_xfrm_monitor+0x46e>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    (%eax),%esi
mov    %eax,0x28(%esp)
mov    (%ecx),%eax
mov    (%edx),%ebx
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x24(%esp)
mov    0x60(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %ecx,(%esp)
mov    %edx,0x2c(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x20(%esp)
call   807ea10 <addattr_l>
test   %esi,%esi
jle    8071f8a <do_xfrm_monitor+0x73a>
lea    0x38(%esp),%edi
jmp    8071f6e <do_xfrm_monitor+0x71e>
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,(%eax)
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8071fc0 <do_xfrm_monitor+0x770>
lea    0x1(%ebp),%edx
lea    0x3c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8071fc0 <do_xfrm_monitor+0x770>
mov    0x20(%esp),%eax
sub    $0x1,%esi
add    $0x4,%ebx
movl   $0x8,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
test   %esi,%esi
je     8071f8a <do_xfrm_monitor+0x73a>
movl   $0x3a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
mov    %eax,%ebp
jne    8071ef8 <do_xfrm_monitor+0x6a8>
mov    0x20(%esp),%ecx
mov    0x24(%esp),%edx
mov    (%ecx),%eax
add    $0x3,%edx
and    $0xfffffffc,%edx
mov    %eax,0x20(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %edx,%eax
mov    %ax,(%ecx,%edx,1)
mov    0x28(%esp),%eax
mov    %esi,(%eax)
mov    0x2c(%esp),%eax
mov    %ebx,(%eax)
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x4c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x34,%esp
mov    0x4c(%esp),%esi
movl   $0x0,0x28(%esp)
mov    0x44(%esp),%eax
movl   $0x0,0x2c(%esp)
jmp    8072063 <do_xfrm_monitor+0x813>
nop
mov    0x48(%esp),%eax
mov    0x44(%esp),%ecx
lea    0x4(%eax),%edx
mov    %edx,0x48(%esp)
lea    -0x1(%ecx),%edx
test   %edx,%edx
mov    %edx,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
mov    0x4(%eax),%eax
lea    0x26(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8081db0 <ll_proto_a2n>
test   %eax,%eax
jne    8072426 <do_xfrm_monitor+0xbd6>
movl   $0x2,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
mov    0x44(%esp),%eax
mov    0x48(%esp),%edx
sub    $0x1,%eax
add    $0x4,%edx
mov    %eax,0x44(%esp)
mov    %edx,0x48(%esp)
test   %eax,%eax
jle    8072230 <do_xfrm_monitor+0x9e0>
mov    0x48(%esp),%eax
movl   $0x8084438,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8071ff0 <do_xfrm_monitor+0x7a0>
mov    0x48(%esp),%eax
movl   $0x808b8fa,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072100 <do_xfrm_monitor+0x8b0>
mov    0x48(%esp),%eax
mov    0x44(%esp),%ecx
lea    0x4(%eax),%edx
mov    %edx,0x48(%esp)
lea    -0x1(%ecx),%edx
test   %edx,%edx
mov    %edx,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
movl   $0x0,0x8(%esp)
mov    0x4(%eax),%eax
lea    0x24(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    80724a0 <do_xfrm_monitor+0xc50>
movl   $0x2,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
jmp    807203d <do_xfrm_monitor+0x7ed>
lea    0x0(%esi),%esi
mov    0x48(%esp),%eax
movl   $0x808a426,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80721a0 <do_xfrm_monitor+0x950>
mov    0x44(%esp),%eax
mov    0x48(%esp),%ecx
sub    $0x1,%eax
lea    0x4(%ecx),%edx
test   %eax,%eax
mov    %edx,0x48(%esp)
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
mov    0x4(%ecx),%ecx
orl    $0x1,0x2c(%esp)
cmpb   $0x6f,(%ecx)
jne    8072168 <do_xfrm_monitor+0x918>
movzbl 0x1(%ecx),%ebx
cmp    $0x6e,%bl
je     8072270 <do_xfrm_monitor+0xa20>
cmp    $0x66,%bl
jne    8072168 <do_xfrm_monitor+0x918>
cmpb   $0x66,0x2(%ecx)
je     80722f1 <do_xfrm_monitor+0xaa1>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
movl   $0x808a426,0xc(%esp)
mov    0x8095c40,%eax
mov    $0xffffffff,%ebx
movl   $0x808758c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x34,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x48(%esp),%eax
movl   $0x808a432,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072284 <do_xfrm_monitor+0xa34>
mov    0x44(%esp),%eax
mov    0x48(%esp),%ecx
sub    $0x1,%eax
lea    0x4(%ecx),%edx
test   %eax,%eax
mov    %edx,0x48(%esp)
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
mov    0x4(%ecx),%ecx
orl    $0x2,0x2c(%esp)
cmpb   $0x6f,(%ecx)
jne    8072218 <do_xfrm_monitor+0x9c8>
movzbl 0x1(%ecx),%ebx
cmp    $0x6e,%bl
je     8072320 <do_xfrm_monitor+0xad0>
cmp    $0x66,%bl
jne    8072218 <do_xfrm_monitor+0x9c8>
cmpb   $0x66,0x2(%ecx)
jne    8072218 <do_xfrm_monitor+0x9c8>
cmpb   $0x0,0x3(%ecx)
jne    8072218 <do_xfrm_monitor+0x9c8>
andl   $0xfffffffd,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,0x10(%esp)
movl   $0x808a432,0xc(%esp)
jmp    8072174 <do_xfrm_monitor+0x924>
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
xor    %ebx,%ebx
test   %eax,%eax
je     8072196 <do_xfrm_monitor+0x946>
lea    0x28(%esp),%eax
mov    %esi,(%esp)
movl   $0x8,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
call   807ea10 <addattr_l>
add    $0x34,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
cmpb   $0x0,0x2(%ecx)
jne    8072168 <do_xfrm_monitor+0x918>
orl    $0x1,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
mov    0x48(%esp),%eax
movl   $0x808a437,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072334 <do_xfrm_monitor+0xae4>
mov    0x44(%esp),%eax
mov    0x48(%esp),%ecx
sub    $0x1,%eax
lea    0x4(%ecx),%edx
test   %eax,%eax
mov    %edx,0x48(%esp)
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
mov    0x4(%ecx),%ecx
orl    $0x8,0x2c(%esp)
cmpb   $0x6f,(%ecx)
jne    807230f <do_xfrm_monitor+0xabf>
movzbl 0x1(%ecx),%ebx
cmp    $0x6e,%bl
je     8072305 <do_xfrm_monitor+0xab5>
cmp    $0x66,%bl
jne    807230f <do_xfrm_monitor+0xabf>
cmpb   $0x66,0x2(%ecx)
jne    807230f <do_xfrm_monitor+0xabf>
cmpb   $0x0,0x3(%ecx)
jne    807230f <do_xfrm_monitor+0xabf>
andl   $0xfffffff7,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
cmpb   $0x0,0x3(%ecx)
jne    8072168 <do_xfrm_monitor+0x918>
andl   $0xfffffffe,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
cmpb   $0x0,0x2(%ecx)
je     80723b2 <do_xfrm_monitor+0xb62>
mov    %ecx,0x10(%esp)
movl   $0x808a437,0xc(%esp)
jmp    8072174 <do_xfrm_monitor+0x924>
cmpb   $0x0,0x2(%ecx)
jne    8072218 <do_xfrm_monitor+0x9c8>
orl    $0x2,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
mov    0x48(%esp),%eax
movl   $0x808a43c,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80723bc <do_xfrm_monitor+0xb6c>
mov    0x44(%esp),%eax
mov    0x48(%esp),%ecx
sub    $0x1,%eax
lea    0x4(%ecx),%edx
test   %eax,%eax
mov    %edx,0x48(%esp)
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
mov    0x4(%ecx),%ecx
orl    $0x4,0x2c(%esp)
cmpb   $0x6f,(%ecx)
jne    80723a1 <do_xfrm_monitor+0xb51>
movzbl 0x1(%ecx),%ebx
cmp    $0x6e,%bl
je     8072416 <do_xfrm_monitor+0xbc6>
cmp    $0x66,%bl
jne    80723a1 <do_xfrm_monitor+0xb51>
cmpb   $0x66,0x2(%ecx)
jne    80723a1 <do_xfrm_monitor+0xb51>
cmpb   $0x0,0x3(%ecx)
jne    80723a1 <do_xfrm_monitor+0xb51>
andl   $0xfffffffb,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
mov    %ecx,0x10(%esp)
movl   $0x808a43c,0xc(%esp)
jmp    8072174 <do_xfrm_monitor+0x924>
orl    $0x8,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
mov    0x48(%esp),%eax
movl   $0x808a452,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807243c <do_xfrm_monitor+0xbec>
mov    0x44(%esp),%eax
addl   $0x4,0x48(%esp)
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
movl   $0x4,(%esp)
mov    %esi,%ecx
lea    0x48(%esp),%edx
lea    0x44(%esp),%eax
call   8071ea0 <do_xfrm_monitor+0x650>
test   %eax,%eax
jne    80724b6 <do_xfrm_monitor+0xc66>
mov    0x44(%esp),%eax
jmp    8072063 <do_xfrm_monitor+0x813>
call   8080010 <incomplete_command>
cmpb   $0x0,0x2(%ecx)
jne    80723a1 <do_xfrm_monitor+0xb51>
orl    $0x4,0x28(%esp)
jmp    8072055 <do_xfrm_monitor+0x805>
mov    0x48(%esp),%eax
mov    (%eax),%eax
movl   $0x808a404,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x48(%esp),%eax
movl   $0x808a46a,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80724cc <do_xfrm_monitor+0xc7c>
mov    0x44(%esp),%eax
addl   $0x4,0x48(%esp)
sub    $0x1,%eax
test   %eax,%eax
mov    %eax,0x44(%esp)
jle    8072411 <do_xfrm_monitor+0xbc1>
movl   $0x3,(%esp)
mov    %esi,%ecx
lea    0x48(%esp),%edx
lea    0x44(%esp),%eax
call   8071ea0 <do_xfrm_monitor+0x650>
test   %eax,%eax
je     8072408 <do_xfrm_monitor+0xbb8>
mov    0x48(%esp),%eax
mov    (%eax),%eax
movl   $0x808a462,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x48(%esp),%eax
mov    (%eax),%eax
movl   $0x808a418,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x48(%esp),%eax
mov    (%eax),%eax
movl   $0x808a44a,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x48(%esp),%eax
movl   $0x8082d28,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807250d <do_xfrm_monitor+0xcbd>
mov    0x48(%esp),%eax
mov    (%eax),%eax
movl   $0x808a479,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
mov    $0xffffffff,%ebx
movl   $0x199,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a498,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8072196 <do_xfrm_monitor+0x946>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    $0x5,%ecx
push   %edi
mov    $0x8082f37,%edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x78(%esp),%eax
mov    0x7c(%esp),%ebx
mov    (%eax),%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8072640 <do_xfrm_monitor+0xdf0>
mov    (%ebx),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x1,0x8(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
movl   $0x400,0x4(%esp)
lea    (%ebx,%eax,1),%edi
mov    %ebx,(%esp)
call   807ea10 <addattr_l>
mov    0x74(%esp),%eax
addl   $0x10,(%ebx)
mov    %ebx,0x8(%esp)
lea    -0x1(%eax),%esi
lea    0x4c(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x18(%esp)
lea    0x44(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x78(%esp),%eax
mov    %esi,(%esp)
add    $0x4,%eax
mov    %eax,0x4(%esp)
call   8061940 <iplink_parse>
test   %eax,%eax
mov    %eax,%ebp
js     8072638 <do_xfrm_monitor+0xde8>
mov    0x3c(%esp),%ecx
test   %ecx,%ecx
je     8072625 <do_xfrm_monitor+0xdd5>
mov    %ecx,(%esp)
mov    %ecx,0x2c(%esp)
call   804b880 <strlen@plt>
mov    0x2c(%esp),%ecx
add    $0x1,%eax
cmp    $0x10,%eax
jg     8072653 <do_xfrm_monitor+0xe03>
mov    %eax,0x10(%esp)
mov    %ecx,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
call   807ea10 <addattr_l>
mov    (%ebx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%ebx
mov    %esi,%eax
sub    %edi,%ebx
sub    %ebp,%eax
mov    %bx,(%edi)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x808a638,(%esp)
call   804b7b0 <puts@plt>
mov    $0xffffffff,%eax
jmp    8072638 <do_xfrm_monitor+0xde8>
mov    0x78(%esp),%eax
mov    (%eax),%eax
movl   $0x8087977,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x47c,%esp
mov    0x498(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
mov    0x494(%esp),%esi
test   %ebx,%ebx
je     8072872 <do_xfrm_monitor+0x1022>
mov    0x1c(%ebx),%eax
test   %eax,%eax
je     8072b10 <do_xfrm_monitor+0x12c0>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    8072ab0 <do_xfrm_monitor+0x1260>
mov    %eax,0xc(%esp)
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebx),%eax
test   %eax,%eax
je     8072b20 <do_xfrm_monitor+0x12d0>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    8072a78 <do_xfrm_monitor+0x1228>
mov    %eax,0xc(%esp)
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     8072727 <do_xfrm_monitor+0xed7>
mov    0x4(%eax),%edi
test   %edi,%edi
jne    8072990 <do_xfrm_monitor+0x1140>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     807273a <do_xfrm_monitor+0xeea>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    8072968 <do_xfrm_monitor+0x1118>
mov    %esi,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085df0,(%esp)
call   804b710 <fwrite@plt>
mov    0x24(%ebx),%eax
test   %eax,%eax
je     807276d <do_xfrm_monitor+0xf1d>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    8072a28 <do_xfrm_monitor+0x11d8>
mov    0x28(%ebx),%eax
test   %eax,%eax
je     807277e <do_xfrm_monitor+0xf2e>
cmpb   $0x0,0x4(%eax)
je     80729d0 <do_xfrm_monitor+0x1180>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     80729fb <do_xfrm_monitor+0x11ab>
movzwl 0x4(%eax),%edx
mov    %edx,%eax
mov    %edx,%ecx
and    $0x80,%dx
and    $0x20,%eax
movzwl %dx,%edi
mov    0xc(%ebx),%edx
and    $0x10,%ecx
movzwl %ax,%eax
movzwl %cx,%ecx
mov    %edi,0x14(%esp)
test   %edx,%edx
je     8072a18 <do_xfrm_monitor+0x11c8>
movzwl 0x4(%edx),%edi
mov    %edi,%edx
mov    %edi,%ebp
and    $0x20,%edx
and    $0x10,%ebp
and    $0x80,%di
movzwl %dx,%edx
movzwl %bp,%ebp
movzwl %di,%edi
test   %eax,%eax
je     807282e <do_xfrm_monitor+0xfde>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     807282e <do_xfrm_monitor+0xfde>
mov    %ecx,0x1c(%esp)
add    $0x4,%eax
lea    0x2c(%esp),%ecx
mov    %ecx,0x8(%esp)
movl   $0x40,0xc(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
mov    %edx,0x18(%esp)
call   804baa0 <inet_ntop@plt>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0x808a6c3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esp),%ecx
mov    0x18(%esp),%edx
test   %edx,%edx
jne    8072898 <do_xfrm_monitor+0x1048>
test   %ecx,%ecx
jne    80728ee <do_xfrm_monitor+0x109e>
test   %ebp,%ebp
jne    8072916 <do_xfrm_monitor+0x10c6>
mov    0x14(%esp),%eax
test   %eax,%eax
jne    8072942 <do_xfrm_monitor+0x10f2>
test   %edi,%edi
je     8072872 <do_xfrm_monitor+0x1022>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6e8,(%esp)
call   804b710 <fwrite@plt>
mov    0x46c(%esp),%eax
xor    %gs:0x14,%eax
jne    8072b51 <do_xfrm_monitor+0x1301>
add    $0x47c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%ebx),%eax
test   %eax,%eax
je     8072832 <do_xfrm_monitor+0xfe2>
add    $0x4,%eax
lea    0x2c(%esp),%ebx
movl   $0x40,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
mov    %ecx,0x18(%esp)
call   804baa0 <inet_ntop@plt>
mov    %ebx,0xc(%esp)
movl   $0x808a6cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esp),%ecx
test   %ecx,%ecx
je     807283a <do_xfrm_monitor+0xfea>
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6d5,(%esp)
call   804b710 <fwrite@plt>
test   %ebp,%ebp
je     8072842 <do_xfrm_monitor+0xff2>
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6db,(%esp)
call   804b710 <fwrite@plt>
mov    0x14(%esp),%eax
test   %eax,%eax
je     807284e <do_xfrm_monitor+0xffe>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6e1,(%esp)
call   804b710 <fwrite@plt>
jmp    807284e <do_xfrm_monitor+0xffe>
nop
mov    %eax,0xc(%esp)
movl   $0x8085de7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807275a <do_xfrm_monitor+0xf0a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     8072b30 <do_xfrm_monitor+0x12e0>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8072727 <do_xfrm_monitor+0xed7>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6b7,(%esp)
call   804b710 <fwrite@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
jne    8072789 <do_xfrm_monitor+0xf39>
mov    0xc(%ebx),%edx
xor    %ecx,%ecx
xor    %eax,%eax
movl   $0x0,0x14(%esp)
test   %edx,%edx
jne    80727b4 <do_xfrm_monitor+0xf64>
lea    0x0(%esi),%esi
xor    %edi,%edi
xor    %ebp,%ebp
xor    %edx,%edx
jmp    80727d0 <do_xfrm_monitor+0xf80>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %al,%edi
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6b2,(%esp)
call   804b710 <fwrite@plt>
cmp    $0x1,%edi
je     8072ae8 <do_xfrm_monitor+0x1298>
mov    %edi,0xc(%esp)
movl   $0x8084d93,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807276d <do_xfrm_monitor+0xf1d>
lea    0x0(%esi),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    80726f9 <do_xfrm_monitor+0xea9>
lea    0x0(%esi,%eiz,1),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    80726be <do_xfrm_monitor+0xe6e>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf40,(%esp)
call   804b710 <fwrite@plt>
jmp    807276d <do_xfrm_monitor+0xf1d>
lea    0x0(%esi),%esi
mov    $0x8088b92,%eax
jmp    80726be <do_xfrm_monitor+0xe6e>
lea    0x0(%esi),%esi
mov    $0x8088b92,%eax
jmp    80726f9 <do_xfrm_monitor+0xea9>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8072727 <do_xfrm_monitor+0xed7>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
xor    %edx,%edx
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x54c,%esp
mov    0x56c(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x53c(%esp)
xor    %ecx,%ecx
mov    0x564(%esp),%ebp
mov    0x568(%esp),%ebx
mov    %dx,0x38(%esp)
testb  $0x4,0x7(%eax)
mov    %eax,0x28(%esp)
mov    %si,0x3a(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp)
movb   $0x1,0x35(%esp)
movb   $0x0,0x36(%esp)
movb   $0x0,0x37(%esp)
je     8073008 <do_xfrm_monitor+0x17b8>
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
jmp    8072c3d <do_xfrm_monitor+0x13ed>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%esi
movl   $0x2e,0x4(%esp)
orw    $0x20,0x38(%esp)
orw    $0x20,0x3a(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8072cb0 <do_xfrm_monitor+0x1460>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x20(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x24(%esp)
mov    0x1c(%esp),%ebx
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jle    8072d98 <do_xfrm_monitor+0x1548>
movl   $0x8085efd,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8072be8 <do_xfrm_monitor+0x1398>
movl   $0x8085efc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072ce0 <do_xfrm_monitor+0x1490>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%esi
movl   $0x2e,0x4(%esp)
orw    $0x20,0x38(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8072d38 <do_xfrm_monitor+0x14e8>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x20(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     8073366 <do_xfrm_monitor+0x1b16>
mov    0x44(%esp),%eax
bswap  %eax
mov    %eax,0x20(%esp)
jmp    8072c2b <do_xfrm_monitor+0x13db>
nop
movl   $0x8085f01,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072d68 <do_xfrm_monitor+0x1518>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%esi
movl   $0x2e,0x4(%esp)
orw    $0x20,0x3a(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8072fb0 <do_xfrm_monitor+0x1760>
mov    %esi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x24(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     8073348 <do_xfrm_monitor+0x1af8>
mov    0x44(%esp),%eax
bswap  %eax
mov    %eax,0x20(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
nop
movl   $0x8088dd1,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8072fdf <do_xfrm_monitor+0x178f>
orw    $0x10,0x38(%esp)
orw    $0x10,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
nop
mov    0x40(%esp),%edx
mov    0x20(%esp),%ebp
mov    %edx,%eax
bswap  %eax
and    $0xf0000000,%eax
test   %ebp,%ebp
je     8072f55 <do_xfrm_monitor+0x1705>
mov    0x24(%esp),%edi
test   %edi,%edi
jne    8072f6c <do_xfrm_monitor+0x171c>
cmp    $0xe0000000,%eax
je     8073210 <do_xfrm_monitor+0x19c0>
mov    0x28(%esp),%edi
mov    0x20(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x24(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
lea    0x38(%esp),%eax
movl   $0x2,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x3a(%esp),%eax
movl   $0x2,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x3c(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x40(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x35(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
jne    80731d1 <do_xfrm_monitor+0x1981>
mov    0x28(%esp),%edi
lea    0x36(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x37(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
xor    %eax,%eax
mov    0x53c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    8073377 <do_xfrm_monitor+0x1b27>
add    $0x54c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0xe0000000,%eax
je     80731fa <do_xfrm_monitor+0x19aa>
mov    0x24(%esp),%edx
test   %edx,%edx
je     8073359 <do_xfrm_monitor+0x1b09>
cmp    $0xe0000000,%eax
jne    8072dc8 <do_xfrm_monitor+0x1578>
mov    0x3c(%esp),%ebx
test   %ebx,%ebx
jne    8072dc8 <do_xfrm_monitor+0x1578>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a818,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8072f36 <do_xfrm_monitor+0x16e6>
nop
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     80732f2 <do_xfrm_monitor+0x1aa2>
mov    0x44(%esp),%eax
bswap  %eax
mov    %eax,0x24(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8085f06,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807321f <do_xfrm_monitor+0x19cf>
orw    $0x10,0x38(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
lea    0x11c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x108,%cx
rep stos %eax,%es:(%edi)
mov    $0x1,%eax
mov    %ax,0x122(%esp)
mov    $0x12,%eax
mov    %ax,0x120(%esp)
mov    0x8095ca8,%eax
movl   $0x20,0x11c(%esp)
00
mov    %al,0x12c(%esp)
mov    0x28(%esp),%eax
mov    0x14(%eax),%eax
mov    %edx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x130(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     807329d <do_xfrm_monitor+0x1a4d>
mov    0x11c(%esp),%eax
sub    $0x20,%eax
js     807329d <do_xfrm_monitor+0x1a4d>
mov    %eax,0xc(%esp)
lea    0x13c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x90(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0xd8(%esp),%eax
test   %eax,%eax
je     807329d <do_xfrm_monitor+0x1a4d>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x50(%esp),%eax
test   %eax,%eax
je     807329d <do_xfrm_monitor+0x1a4d>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x58(%esp),%eax
movl   $0xd,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x68(%esp),%eax
test   %eax,%eax
je     807325e <do_xfrm_monitor+0x1a0e>
mov    0x4(%eax),%eax
mov    %eax,0x20(%esp)
mov    0x6c(%esp),%eax
test   %eax,%eax
je     8073244 <do_xfrm_monitor+0x19f4>
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
mov    0x60(%esp),%eax
test   %eax,%eax
je     8073156 <do_xfrm_monitor+0x1906>
movzwl 0x4(%eax),%eax
mov    %ax,0x38(%esp)
mov    0x64(%esp),%eax
test   %eax,%eax
je     8073167 <do_xfrm_monitor+0x1917>
movzwl 0x4(%eax),%eax
mov    %ax,0x3a(%esp)
mov    0x70(%esp),%eax
test   %eax,%eax
je     8073176 <do_xfrm_monitor+0x1926>
mov    0x4(%eax),%eax
mov    %eax,0x3c(%esp)
mov    0x74(%esp),%eax
test   %eax,%eax
je     8073185 <do_xfrm_monitor+0x1935>
mov    0x4(%eax),%eax
mov    %eax,0x40(%esp)
mov    0x80(%esp),%eax
test   %eax,%eax
je     8073198 <do_xfrm_monitor+0x1948>
movzbl 0x4(%eax),%eax
mov    %al,0x35(%esp)
mov    0x78(%esp),%eax
test   %eax,%eax
je     80731a8 <do_xfrm_monitor+0x1958>
movzbl 0x4(%eax),%eax
mov    %al,0x36(%esp)
mov    0x7c(%esp),%eax
test   %eax,%eax
je     80731b8 <do_xfrm_monitor+0x1968>
movzbl 0x4(%eax),%eax
mov    %al,0x37(%esp)
mov    0x5c(%esp),%eax
test   %eax,%eax
je     8073251 <do_xfrm_monitor+0x1a01>
movzbl 0x4(%eax),%eax
mov    %eax,0x2c(%esp)
jmp    8072c3d <do_xfrm_monitor+0x13ed>
mov    0x2c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    8072ee0 <do_xfrm_monitor+0x1690>
mov    0x24(%esp),%esi
orw    $0x20,0x38(%esp)
mov    %edx,0x20(%esp)
test   %esi,%esi
jne    8072f77 <do_xfrm_monitor+0x1727>
orw    $0x20,0x3a(%esp)
mov    %edx,0x24(%esp)
jmp    8072f77 <do_xfrm_monitor+0x1727>
movl   $0x8088ddc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807326b <do_xfrm_monitor+0x1a1b>
orw    $0x10,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x0,0x24(%esp)
jmp    8073145 <do_xfrm_monitor+0x18f5>
movl   $0x0,0x2c(%esp)
jmp    8072c3d <do_xfrm_monitor+0x13ed>
movl   $0x0,0x20(%esp)
jmp    8073132 <do_xfrm_monitor+0x18e2>
movl   $0x8085f0c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80732cc <do_xfrm_monitor+0x1a7c>
orw    $0x80,0x38(%esp)
orw    $0x80,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8072f36 <do_xfrm_monitor+0x16e6>
movl   $0x8085f0b,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073322 <do_xfrm_monitor+0x1ad2>
orw    $0x80,0x38(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
mov    0x4(%ebx),%eax
movl   $0x8085c5c,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8085f11,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807337c <do_xfrm_monitor+0x1b2c>
orw    $0x80,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
mov    0x4(%ebx),%eax
movl   $0x8085c18,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8073301 <do_xfrm_monitor+0x1ab1>
mov    0x24(%esp),%eax
mov    %eax,0x20(%esp)
jmp    8072dc8 <do_xfrm_monitor+0x1578>
mov    0x4(%ebx),%eax
movl   $0x808a730,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8073301 <do_xfrm_monitor+0x1ab1>
call   804b660 <__stack_chk_fail@plt>
movl   $0x8085e09,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80733a0 <do_xfrm_monitor+0x1b50>
movb   $0x0,0x35(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8085e0b,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80733c4 <do_xfrm_monitor+0x1b74>
movb   $0x1,0x35(%esp)
mov    %ebx,0x1c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8082f3c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073419 <do_xfrm_monitor+0x1bc9>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    8073408 <do_xfrm_monitor+0x1bb8>
cmpb   $0x6e,0x1(%eax)
jne    8073408 <do_xfrm_monitor+0x1bb8>
cmpb   $0x79,0x2(%eax)
jne    8073408 <do_xfrm_monitor+0x1bb8>
cmpb   $0x0,0x3(%eax)
je     8072c33 <do_xfrm_monitor+0x13e3>
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x40(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8082fb7,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807346e <do_xfrm_monitor+0x1c1e>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
jne    807345d <do_xfrm_monitor+0x1c0d>
cmpb   $0x6e,0x1(%eax)
jne    807345d <do_xfrm_monitor+0x1c0d>
cmpb   $0x79,0x2(%eax)
jne    807345d <do_xfrm_monitor+0x1c0d>
cmpb   $0x0,0x3(%eax)
je     8072c33 <do_xfrm_monitor+0x13e3>
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x3c(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8085e82,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80734b0 <do_xfrm_monitor+0x1c60>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
jne    8072c33 <do_xfrm_monitor+0x13e3>
jmp    8073316 <do_xfrm_monitor+0x1ac6>
movl   $0x808a6ef,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073521 <do_xfrm_monitor+0x1cd1>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8072c33 <do_xfrm_monitor+0x13e3>
mov    %eax,0x4(%esp)
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    807358d <do_xfrm_monitor+0x1d3d>
mov    0x44(%esp),%eax
cmp    $0xff,%eax
ja     807357a <do_xfrm_monitor+0x1d2a>
mov    %al,0x36(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x80842a4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80734c6 <do_xfrm_monitor+0x1c76>
movl   $0x8085dfe,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80735c5 <do_xfrm_monitor+0x1d75>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     8073298 <do_xfrm_monitor+0x1a48>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80735a0 <do_xfrm_monitor+0x1d50>
movb   $0x1,0x37(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
mov    0x4(%ebx),%eax
movl   $0x808a6f3,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8085f17,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0x4(%esp)
lea    0x44(%esp),%eax
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    8073767 <do_xfrm_monitor+0x1f17>
mov    0x44(%esp),%eax
mov    %al,0x37(%esp)
jmp    8072c33 <do_xfrm_monitor+0x13e3>
movl   $0x8085f37,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807354d <do_xfrm_monitor+0x1cfd>
movl   $0x808ca3d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807354d <do_xfrm_monitor+0x1cfd>
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a7b0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80857f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80858c4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085db7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808590c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a7f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085984,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80859ac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x4(%ebx),%eax
movl   $0x8085f3e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x40,%esp
mov    0x58(%esp),%ebx
mov    0x54(%esp),%esi
test   %ebx,%ebx
je     8073931 <do_xfrm_monitor+0x20e1>
mov    0x14(%ebx),%eax
test   %eax,%eax
je     80737a8 <do_xfrm_monitor+0x1f58>
mov    0x8(%eax),%edi
test   %edi,%edi
jne    8073948 <do_xfrm_monitor+0x20f8>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     80737dc <do_xfrm_monitor+0x1f8c>
mov    0x4(%eax),%edx
mov    $0x808345a,%eax
cmp    $0x6,%edx
jle    8073938 <do_xfrm_monitor+0x20e8>
mov    %eax,0xc(%esp)
movl   $0x8083105,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     807380b <do_xfrm_monitor+0x1fbb>
movzwl 0x6(%eax),%edx
mov    %edx,0x10(%esp)
movzwl 0x4(%eax),%eax
movl   $0x808a884,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebx),%eax
test   %eax,%eax
je     8073831 <do_xfrm_monitor+0x1fe1>
mov    0x4(%eax),%eax
movl   $0x808a8a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%edi
test   %edi,%edi
je     80738ad <do_xfrm_monitor+0x205d>
mov    0x8(%edi),%eax
xor    %edx,%edx
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
fildll 0x38(%esp)
fdivs  0x8084d40
fstpl  0x10(%esp)
mov    0x4(%edi),%eax
movl   $0x808aa78,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%edi),%eax
mov    %eax,0x1c(%esp)
mov    0x18(%edi),%eax
mov    %eax,0x18(%esp)
mov    0x14(%edi),%eax
mov    %eax,0x14(%esp)
mov    0x10(%edi),%eax
mov    %eax,0x10(%esp)
mov    0xc(%edi),%eax
movl   $0x808aa9c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     807390b <do_xfrm_monitor+0x20bb>
mov    0x30(%eax),%edx
add    $0x4,%eax
mov    %edx,0x2c(%esp)
mov    0x28(%eax),%edx
mov    %edx,0x28(%esp)
mov    0x24(%eax),%edx
mov    %edx,0x24(%esp)
mov    0x20(%eax),%edx
mov    %edx,0x20(%esp)
mov    0x1c(%eax),%edx
mov    %edx,0x1c(%esp)
mov    0x18(%eax),%edx
mov    %edx,0x18(%esp)
mov    0x14(%eax),%edx
mov    %edx,0x14(%esp)
mov    0x10(%eax),%edx
mov    %eax,0xc(%esp)
movl   $0x808aad8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x10(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%ebx),%eax
test   %eax,%eax
je     8073931 <do_xfrm_monitor+0x20e1>
mov    0x4(%eax),%eax
movl   $0x808a8af,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x808ae24(,%edx,4),%eax
jmp    80737c0 <do_xfrm_monitor+0x1f70>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0x4(%esp)
movl   $0x3c,(%esp)
call   804ba50 <fputc@plt>
test   $0x1,%edi
je     8073994 <do_xfrm_monitor+0x2144>
mov    $0x8088729,%eax
and    $0xfffffffe,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x808a847,0xc(%esp)
movl   $0x8087b4f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x2,%edi
je     80739d0 <do_xfrm_monitor+0x2180>
mov    $0x8088729,%eax
and    $0xfffffffd,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x808a850,0xc(%esp)
movl   $0x8087b4f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%edi
je     8073a0c <do_xfrm_monitor+0x21bc>
mov    $0x8088729,%eax
and    $0xfffffffb,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x808a85c,0xc(%esp)
movl   $0x8087b4f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x8,%edi
je     8073a48 <do_xfrm_monitor+0x21f8>
mov    $0x8088729,%eax
and    $0xfffffff7,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x808a86c,0xc(%esp)
movl   $0x8087b4f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x10,%edi
je     8073a84 <do_xfrm_monitor+0x2234>
mov    $0x8088729,%eax
and    $0xffffffef,%edi
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0x10(%esp)
movl   $0x808a875,0xc(%esp)
movl   $0x8087b4f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %edi,%edi
jne    8073ab0 <do_xfrm_monitor+0x2260>
mov    %esi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a293,(%esp)
call   804b710 <fwrite@plt>
jmp    80737a8 <do_xfrm_monitor+0x1f58>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0x808a1d3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8073a88 <do_xfrm_monitor+0x2238>
xchg   %ax,%ax
push   %ebx
sub    $0x38,%esp
mov    0x48(%esp),%ebx
test   %ebx,%ebx
je     8073ae2 <do_xfrm_monitor+0x2292>
cmpw   $0x1c,(%ebx)
je     8073ae8 <do_xfrm_monitor+0x2298>
add    $0x38,%esp
pop    %ebx
ret
nop
mov    0x44(%esp),%eax
movl   $0x43,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808ab1c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x10(%ebx),%eax
mov    %eax,0x20(%esp)
mov    0xc(%ebx),%eax
mov    %eax,0x1c(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x14(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x18(%ebx),%eax
movl   $0x808ab60,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x38,%esp
pop    %ebx
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpb   $0x6f,(%edx)
mov    0x30(%esp),%esi
je     8073ba0 <do_xfrm_monitor+0x2350>
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %edx,0x10(%esp)
movl   $0x808758c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
movzbl 0x1(%edx),%ebx
cmp    $0x6e,%bl
je     8073bc0 <do_xfrm_monitor+0x2370>
cmp    $0x66,%bl
jne    8073b6e <do_xfrm_monitor+0x231e>
cmpb   $0x66,0x2(%edx)
jne    8073b6e <do_xfrm_monitor+0x231e>
cmpb   $0x0,0x3(%edx)
je     8073bc9 <do_xfrm_monitor+0x2379>
jmp    8073b6e <do_xfrm_monitor+0x231e>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2(%edx)
jne    8073b6e <do_xfrm_monitor+0x231e>
or     %esi,0x4(%ecx)
or     %esi,(%ecx)
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
jmp    8073be0 <do_xfrm_monitor+0x2390>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x6c,%esp
mov    0x84(%esp),%ebx
mov    0x88(%esp),%edi
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
movl   $0x0,0x40(%esp,%eax,1)
add    $0x4,%eax
cmp    $0x20,%eax
jb     8073c07 <do_xfrm_monitor+0x23b7>
test   %ebx,%ebx
jg     8073c5d <do_xfrm_monitor+0x240d>
jmp    8073d20 <do_xfrm_monitor+0x24d0>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8073f7d <do_xfrm_monitor+0x272d>
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%esi),%edi
jle    8073d18 <do_xfrm_monitor+0x24c8>
movl   $0x808a8bd,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8073c20 <do_xfrm_monitor+0x23d0>
movl   $0x808a8de,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073da0 <do_xfrm_monitor+0x2550>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
je     8073e05 <do_xfrm_monitor+0x25b5>
cmpb   $0x0,0x0(%ebp)
je     8073e05 <do_xfrm_monitor+0x25b5>
lea    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b770 <strtof@plt>
mov    0x34(%esp),%eax
test   %eax,%eax
je     8073df8 <do_xfrm_monitor+0x25a8>
cmp    %eax,%ebp
je     8073dfc <do_xfrm_monitor+0x25ac>
cmpb   $0x0,(%eax)
jne    8073e00 <do_xfrm_monitor+0x25b0>
fnstcw 0x2e(%esp)
sub    $0x1,%ebx
fmuls  0x8084d40
test   %ebx,%ebx
movzwl 0x2e(%esp),%eax
lea    0x4(%esi),%edi
mov    $0xc,%ah
mov    %ax,0x2c(%esp)
fldcw  0x2c(%esp)
fistpll 0x20(%esp)
fldcw  0x2e(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x44(%esp)
jg     8073c5d <do_xfrm_monitor+0x240d>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%ecx
test   %ecx,%ecx
jne    8073d28 <do_xfrm_monitor+0x24d8>
mov    0x48(%esp),%edx
test   %edx,%edx
je     8073d57 <do_xfrm_monitor+0x2507>
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8c(%esp),%eax
movl   $0x20,0x10(%esp)
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x38(%esp),%eax
xor    %ebx,%ebx
test   %eax,%eax
je     8073d90 <do_xfrm_monitor+0x2540>
lea    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8c(%esp),%eax
movl   $0x8,0x10(%esp)
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x6c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x808a8eb,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073e18 <do_xfrm_monitor+0x25c8>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     8073c4f <do_xfrm_monitor+0x23ff>
mov    0x4(%edi),%eax
movl   $0x808a8ee,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
fstp   %st(0)
jmp    8073e02 <do_xfrm_monitor+0x25b2>
fstp   %st(0)
jmp    8073e02 <do_xfrm_monitor+0x25b2>
fstp   %st(0)
mov    0x4(%edi),%ebp
mov    %ebp,0x4(%esp)
movl   $0x808aa12,(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
movl   $0x808a902,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073e70 <do_xfrm_monitor+0x2620>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     8073c4f <do_xfrm_monitor+0x23ff>
mov    0x4(%edi),%eax
movl   $0x808a90b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a925,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073ec8 <do_xfrm_monitor+0x2678>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     8073c4f <do_xfrm_monitor+0x23ff>
mov    0x4(%edi),%eax
movl   $0x808a930,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a94c,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073f20 <do_xfrm_monitor+0x26d0>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     8073c4f <do_xfrm_monitor+0x23ff>
mov    0x4(%edi),%eax
movl   $0x808a957,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a973,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073f90 <do_xfrm_monitor+0x2740>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x58(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     8073c4f <do_xfrm_monitor+0x23ff>
mov    0x4(%edi),%eax
movl   $0x808a977,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi,%eiz,1),%esi
call   8080010 <incomplete_command>
mov    0x4(%edi),%eax
movl   $0x808a8c5,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a98c,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8073fcb <do_xfrm_monitor+0x277b>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%edx
lea    0x38(%esp),%ecx
mov    $0x808a98c,%eax
movl   $0x1,(%esp)
call   8073b60 <do_xfrm_monitor+0x2310>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a995,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074006 <do_xfrm_monitor+0x27b6>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%edx
lea    0x38(%esp),%ecx
mov    $0x808a995,%eax
movl   $0x2,(%esp)
call   8073b60 <do_xfrm_monitor+0x2310>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a9a1,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074045 <do_xfrm_monitor+0x27f5>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%edx
lea    0x38(%esp),%ecx
mov    $0x808a9a1,%eax
movl   $0x4,(%esp)
call   8073b60 <do_xfrm_monitor+0x2310>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a9b1,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074084 <do_xfrm_monitor+0x2834>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%edx
lea    0x38(%esp),%ecx
mov    $0x808a9b1,%eax
movl   $0x8,(%esp)
call   8073b60 <do_xfrm_monitor+0x2310>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a9ba,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80740c3 <do_xfrm_monitor+0x2873>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
mov    0x4(%edi),%edx
lea    0x38(%esp),%ecx
mov    $0x808a9ba,%eax
movl   $0x10,(%esp)
call   8073b60 <do_xfrm_monitor+0x2310>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a9c9,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074107 <do_xfrm_monitor+0x28b7>
mov    0x8c(%esp),%eax
mov    %edi,%esi
movl   $0x1,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x808a9d1,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074178 <do_xfrm_monitor+0x2928>
sub    $0x1,%ebx
lea    0x4(%edi),%esi
je     8073f78 <do_xfrm_monitor+0x2728>
movl   $0x0,0x8(%esp)
mov    0x4(%edi),%eax
mov    %eax,0x4(%esp)
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    80741e0 <do_xfrm_monitor+0x2990>
mov    0x34(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8c(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    8073c4f <do_xfrm_monitor+0x23ff>
movl   $0x8082d28,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80741b1 <do_xfrm_monitor+0x2961>
mov    (%edi),%eax
movl   $0x808a9f8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
mov    $0xffffffff,%ebx
movl   $0x296,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808ab8c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8073d90 <do_xfrm_monitor+0x2540>
mov    0x4(%edi),%eax
movl   $0x808a9dc,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x28(%esp),%eax
test   %eax,%eax
je     807426e <do_xfrm_monitor+0x2a1e>
mov    0x4(%eax),%eax
test   %eax,%eax
je     807426e <do_xfrm_monitor+0x2a1e>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x3,%edx
jbe    807426e <do_xfrm_monitor+0x2a1e>
mov    0x4(%eax),%edx
mov    $0x808ae41,%eax
cmp    $0x1,%edx
je     807424e <do_xfrm_monitor+0x29fe>
cmp    $0x2,%edx
mov    $0x808ae3c,%eax
je     807424e <do_xfrm_monitor+0x29fe>
cmp    $0x4,%edx
mov    $0x8082c7b,%eax
je     807424e <do_xfrm_monitor+0x29fe>
cmp    $0x8,%edx
mov    $0x808ae49,%eax
mov    $0x8086ac2,%edx
cmovne %edx,%eax
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
movl   $0x808ae52,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
test   %ebp,%ebp
jg     80742f2 <do_xfrm_monitor+0x2aa2>
jmp    8074358 <do_xfrm_monitor+0x2b08>
mov    $0x8082c7b,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8074348 <do_xfrm_monitor+0x2af8>
mov    $0x808ae49,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80743d3 <do_xfrm_monitor+0x2b83>
mov    $0x8,%eax
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
sub    $0x2,%ebp
movl   $0x1,0x8(%esp)
add    $0x8,%ebx
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
test   %ebp,%ebp
jle    8074358 <do_xfrm_monitor+0x2b08>
movl   $0x8085ebc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074368 <do_xfrm_monitor+0x2b18>
cmp    $0x1,%ebp
je     8074402 <do_xfrm_monitor+0x2bb2>
mov    0x4(%ebx),%eax
mov    $0x808ae41,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8074340 <do_xfrm_monitor+0x2af0>
mov    $0x808ae3c,%edi
mov    %eax,%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8074298 <do_xfrm_monitor+0x2a48>
mov    $0x2,%eax
jmp    80742c8 <do_xfrm_monitor+0x2a78>
nop
mov    $0x1,%eax
jmp    80742c8 <do_xfrm_monitor+0x2a78>
nop
mov    $0x4,%eax
jmp    80742c8 <do_xfrm_monitor+0x2a78>
lea    0x0(%esi),%esi
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80743a1 <do_xfrm_monitor+0x2b51>
mov    (%ebx),%eax
movl   $0x808aef4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808aeb4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8095c40,%eax
movl   $0x4d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808ae64,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807435a <do_xfrm_monitor+0x2b0a>
call   8080010 <incomplete_command>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x28(%esp),%eax
test   %eax,%eax
je     807447e <do_xfrm_monitor+0x2c2e>
mov    0x4(%eax),%eax
test   %eax,%eax
je     807447e <do_xfrm_monitor+0x2c2e>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x3,%edx
jbe    807447e <do_xfrm_monitor+0x2c2e>
mov    0x4(%eax),%edx
mov    $0x808ae41,%eax
cmp    $0x1,%edx
je     807445e <do_xfrm_monitor+0x2c0e>
cmp    $0x2,%edx
mov    $0x808ae3c,%eax
je     807445e <do_xfrm_monitor+0x2c0e>
cmp    $0x4,%edx
mov    $0x8082c7b,%eax
je     807445e <do_xfrm_monitor+0x2c0e>
cmp    $0x8,%edx
mov    $0x808ae49,%eax
mov    $0x8086ac2,%edx
cmovne %edx,%eax
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
movl   $0x808ae52,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
test   %ebp,%ebp
jg     8074502 <do_xfrm_monitor+0x2cb2>
jmp    8074568 <do_xfrm_monitor+0x2d18>
mov    $0x8082c7b,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8074558 <do_xfrm_monitor+0x2d08>
mov    $0x808ae49,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80745e3 <do_xfrm_monitor+0x2d93>
mov    $0x8,%eax
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
sub    $0x2,%ebp
movl   $0x1,0x8(%esp)
add    $0x8,%ebx
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
test   %ebp,%ebp
jle    8074568 <do_xfrm_monitor+0x2d18>
movl   $0x8085ebc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8074578 <do_xfrm_monitor+0x2d28>
cmp    $0x1,%ebp
je     807460e <do_xfrm_monitor+0x2dbe>
mov    0x4(%ebx),%eax
mov    $0x808ae41,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8074550 <do_xfrm_monitor+0x2d00>
mov    $0x808ae3c,%edi
mov    %eax,%esi
mov    $0x5,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80744a8 <do_xfrm_monitor+0x2c58>
mov    $0x2,%eax
jmp    80744d8 <do_xfrm_monitor+0x2c88>
nop
mov    $0x1,%eax
jmp    80744d8 <do_xfrm_monitor+0x2c88>
nop
mov    $0x4,%eax
jmp    80744d8 <do_xfrm_monitor+0x2c88>
lea    0x0(%esi),%esi
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80745b1 <do_xfrm_monitor+0x2d61>
mov    (%ebx),%eax
movl   $0x808afb4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808af74,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
movl   $0x808af1c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807456a <do_xfrm_monitor+0x2d1a>
call   8080010 <incomplete_command>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
cmpw   $0x2,0x4(%eax)
je     80749d8 <do_xfrm_monitor+0x3188>
push   %ebx
mov    %edx,%ebx
sub    $0xc8,%esp
mov    (%eax),%edx
sub    $0x14,%edx
js     80749d0 <do_xfrm_monitor+0x3180>
add    $0x14,%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x40(%esp),%eax
test   %eax,%eax
je     8074671 <do_xfrm_monitor+0x2e21>
movzwl 0x4(%eax),%eax
mov    %ax,0x88(%ebx)
mov    0x44(%esp),%eax
test   %eax,%eax
je     8074680 <do_xfrm_monitor+0x2e30>
movzwl 0x4(%eax),%eax
mov    %eax,0x18(%ebx)
mov    0x48(%esp),%eax
test   %eax,%eax
je     807468f <do_xfrm_monitor+0x2e3f>
movzwl 0x4(%eax),%eax
mov    %eax,0x10(%ebx)
mov    0x4c(%esp),%eax
test   %eax,%eax
je     80746b3 <do_xfrm_monitor+0x2e63>
movzwl 0x4(%eax),%edx
movzbl 0x8c(%ebx),%eax
and    $0x3,%edx
shl    $0x4,%edx
and    $0xffffffcf,%eax
or     %edx,%eax
mov    %al,0x8c(%ebx)
mov    0x60(%esp),%eax
test   %eax,%eax
je     80746c0 <do_xfrm_monitor+0x2e70>
mov    0x4(%eax),%eax
mov    %eax,(%ebx)
mov    0x64(%esp),%eax
test   %eax,%eax
je     80746ce <do_xfrm_monitor+0x2e7e>
mov    0x4(%eax),%eax
mov    %eax,0x4(%ebx)
mov    0x68(%esp),%eax
test   %eax,%eax
je     80746dc <do_xfrm_monitor+0x2e8c>
mov    0x4(%eax),%eax
mov    %eax,0x8(%ebx)
mov    0x6c(%esp),%eax
test   %eax,%eax
je     80746ea <do_xfrm_monitor+0x2e9a>
mov    0x4(%eax),%eax
mov    %eax,0xc(%ebx)
mov    0x50(%esp),%eax
test   %eax,%eax
je     80746fc <do_xfrm_monitor+0x2eac>
movzbl 0x4(%eax),%eax
mov    %al,0x98(%ebx)
mov    0x54(%esp),%eax
test   %eax,%eax
je     807470e <do_xfrm_monitor+0x2ebe>
movzbl 0x4(%eax),%eax
mov    %al,0x99(%ebx)
mov    0x70(%esp),%ecx
movzbl 0x8c(%ebx),%eax
test   %ecx,%ecx
setne  %dl
and    $0xfffffffe,%eax
or     %edx,%eax
mov    %al,0x8c(%ebx)
mov    0x78(%esp),%eax
test   %eax,%eax
je     8074750 <do_xfrm_monitor+0x2f00>
movzwl (%eax),%edx
lea    0x24(%ebx),%ecx
add    $0x4,%eax
sub    $0x4,%edx
mov    %edx,0x20(%ebx)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,(%esp)
call   804b5e0 <memcpy@plt>
mov    0x7c(%esp),%eax
test   %eax,%eax
je     8074777 <do_xfrm_monitor+0x2f27>
movzwl (%eax),%edx
lea    0x30(%ebx),%ecx
add    $0x4,%eax
sub    $0x4,%edx
mov    %edx,0x2c(%ebx)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,(%esp)
call   804b5e0 <memcpy@plt>
mov    0x84(%esp),%eax
mov    0x88(%esp),%edx
test   %eax,%eax
movzbl 0x8c(%ebx),%eax
setne  %cl
add    %ecx,%ecx
and    $0xfffffff9,%eax
test   %edx,%edx
setne  %dl
or     %ecx,%eax
shl    $0x2,%edx
or     %edx,%eax
mov    %al,0x8c(%ebx)
mov    0x94(%esp),%eax
test   %eax,%eax
je     80747bc <do_xfrm_monitor+0x2f6c>
mov    0x4(%eax),%eax
mov    %eax,0x90(%ebx)
mov    0x9c(%esp),%eax
test   %eax,%eax
je     80747de <do_xfrm_monitor+0x2f8e>
movb   $0x2,0x38(%ebx)
mov    0x4(%eax),%eax
movb   $0x4,0x39(%ebx)
mov    %eax,0x40(%ebx)
mov    $0xffffffff,%eax
mov    %ax,0x3a(%ebx)
mov    0xa0(%esp),%eax
test   %eax,%eax
je     8074800 <do_xfrm_monitor+0x2fb0>
movb   $0x2,0x60(%ebx)
mov    0x4(%eax),%eax
mov    $0xffffffff,%ecx
movb   $0x4,0x61(%ebx)
mov    %cx,0x62(%ebx)
mov    %eax,0x68(%ebx)
mov    0xb8(%esp),%eax
test   %eax,%eax
je     8074837 <do_xfrm_monitor+0x2fe7>
movb   $0xa,0x38(%ebx)
lea    0x4(%eax),%ecx
mov    $0xffffffff,%edx
movb   $0x10,0x39(%ebx)
mov    0x4(%eax),%eax
mov    %eax,0x40(%ebx)
mov    0x4(%ecx),%eax
mov    %eax,0x44(%ebx)
mov    0x8(%ecx),%eax
mov    %eax,0x48(%ebx)
mov    0xc(%ecx),%eax
mov    %dx,0x3a(%ebx)
mov    %eax,0x4c(%ebx)
mov    0xbc(%esp),%eax
test   %eax,%eax
je     807486e <do_xfrm_monitor+0x301e>
movb   $0xa,0x60(%ebx)
lea    0x4(%eax),%ecx
movb   $0x10,0x61(%ebx)
mov    0x4(%eax),%eax
mov    %eax,0x68(%ebx)
mov    0x4(%ecx),%eax
mov    %eax,0x6c(%ebx)
mov    0x8(%ecx),%eax
mov    %eax,0x70(%ebx)
mov    0xc(%ecx),%eax
mov    %eax,0x74(%ebx)
mov    $0xffffffff,%eax
mov    %ax,0x62(%ebx)
mov    0xa4(%esp),%eax
test   %eax,%eax
je     8074881 <do_xfrm_monitor+0x3031>
movzwl 0x4(%eax),%eax
mov    %ax,0x1c(%ebx)
mov    0xa8(%esp),%eax
test   %eax,%eax
je     8074894 <do_xfrm_monitor+0x3044>
movzwl 0x4(%eax),%eax
mov    %ax,0x1e(%ebx)
mov    0xac(%esp),%eax
test   %eax,%eax
je     80748aa <do_xfrm_monitor+0x305a>
movzwl 0x4(%eax),%eax
mov    %ax,0x8a(%ebx)
mov    0x5c(%esp),%eax
test   %eax,%eax
je     80748bb <do_xfrm_monitor+0x306b>
add    $0x4,%eax
mov    %eax,0x94(%ebx)
mov    0xb4(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
je     80749c3 <do_xfrm_monitor+0x3173>
movzwl (%edx),%eax
add    $0x4,%edx
mov    %edx,0x8(%esp)
movl   $0x8,0x4(%esp)
sub    $0x4,%eax
mov    %eax,0xc(%esp)
lea    0x18(%esp),%eax
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     807490b <do_xfrm_monitor+0x30bb>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xc8(%ebx)
mov    %eax,0xc4(%ebx)
mov    0x20(%esp),%eax
test   %eax,%eax
je     8074925 <do_xfrm_monitor+0x30d5>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xd0(%ebx)
mov    %eax,0xcc(%ebx)
mov    0x24(%esp),%eax
test   %eax,%eax
je     807493f <do_xfrm_monitor+0x30ef>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xd8(%ebx)
mov    %eax,0xd4(%ebx)
mov    0x28(%esp),%eax
test   %eax,%eax
je     8074959 <do_xfrm_monitor+0x3109>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xa0(%ebx)
mov    %eax,0x9c(%ebx)
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8074973 <do_xfrm_monitor+0x3123>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xa8(%ebx)
mov    %eax,0xa4(%ebx)
mov    0x38(%esp),%eax
test   %eax,%eax
je     807498d <do_xfrm_monitor+0x313d>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xb0(%ebx)
mov    %eax,0xac(%ebx)
mov    0x30(%esp),%eax
test   %eax,%eax
je     80749a7 <do_xfrm_monitor+0x3157>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xc0(%ebx)
mov    %eax,0xbc(%ebx)
mov    0x34(%esp),%eax
test   %eax,%eax
je     80749c1 <do_xfrm_monitor+0x3171>
mov    0x8(%eax),%edx
mov    0x4(%eax),%eax
mov    %edx,0xb8(%ebx)
mov    %eax,0xb4(%ebx)
xor    %eax,%eax
add    $0xc8,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    80749c3 <do_xfrm_monitor+0x3173>
nop
mov    $0xffffffb6,%eax
ret
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x68(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
mov    0x64(%esp),%eax
mov    %ebx,%edx
call   8074620 <do_xfrm_monitor+0x2dd0>
test   %eax,%eax
mov    %eax,%esi
je     8074a28 <do_xfrm_monitor+0x31d8>
mov    0x4c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    8074b23 <do_xfrm_monitor+0x32d3>
add    $0x50,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    $0x808afd4,%eax
test   %edx,%edx
je     8074a44 <do_xfrm_monitor+0x31f4>
cmp    $0x1,%edx
mov    $0x808afd8,%eax
mov    $0x808c703,%edx
cmovne %edx,%eax
mov    %eax,0xc(%esp)
mov    (%ebx),%eax
lea    0x1e(%esp),%edi
movl   $0x808afdb,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
lea    0x40(%ebx),%eax
movl   $0x2e,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
movzbl 0x38(%ebx),%eax
mov    %eax,(%esp)
call   804baa0 <inet_ntop@plt>
movl   $0x808aff0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
lea    0x68(%ebx),%eax
movl   $0x2e,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
movzbl 0x60(%ebx),%eax
mov    %eax,(%esp)
call   804baa0 <inet_ntop@plt>
movl   $0x808affb,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x4(%ebx),%eax
movl   $0x808b002,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x18(%ebx),%eax
test   %eax,%eax
jne    8074a07 <do_xfrm_monitor+0x31b7>
movzwl 0x1e(%ebx),%eax
mov    %eax,0xc(%esp)
movzwl 0x1c(%ebx),%eax
movl   $0x808b204,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8074a07 <do_xfrm_monitor+0x31b7>
call   804b660 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b014,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b228,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b24c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b278,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b29c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b2d0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b02f,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b2fc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x33,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b328,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x33,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b35c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b390,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x27,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b3b4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b3dc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b414,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b444,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b047,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b484,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b4ac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b4cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b4f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b528,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x24,%esp
movzbl 0x3(%edx),%edx
mov    %eax,0x8(%esp)
movl   $0x808b060,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,0x18(%esp)
movzbl 0x2(%ebx),%edx
mov    %edx,0x14(%esp)
movzbl 0x1(%ebx),%edx
mov    %edx,0x10(%esp)
movzbl (%ebx),%edx
mov    %edx,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
cmp    $0x8,%esi
je     8074eb0 <do_xfrm_monitor+0x3660>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x7(%ebx),%eax
movl   $0x808b065,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x14(%esp)
movzbl 0x6(%ebx),%eax
mov    %eax,0x10(%esp)
movzbl 0x5(%ebx),%eax
mov    %eax,0xc(%esp)
movzbl 0x4(%ebx),%eax
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%ebx
mov    0x24(%esp),%eax
mov    %ebx,%edx
call   8074620 <do_xfrm_monitor+0x2dd0>
test   %eax,%eax
mov    %eax,%esi
je     8074f18 <do_xfrm_monitor+0x36c8>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x8(%ebx),%eax
movl   $0x808b076,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x4(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0xc(%ebx),%eax
movl   $0x808b08f,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x94(%ebx),%eax
test   %eax,%eax
je     8074f7d <do_xfrm_monitor+0x372d>
mov    %eax,0x8(%esp)
movl   $0x808b0ad,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x14(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x10(%ebx),%eax
movl   $0x808b0c3,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x20(%ebx),%ecx
test   %ecx,%ecx
jle    8074fb3 <do_xfrm_monitor+0x3763>
lea    0x24(%ebx),%edx
mov    $0x808b0e5,%eax
call   8074e60 <do_xfrm_monitor+0x3610>
mov    0x2c(%ebx),%ecx
test   %ecx,%ecx
jle    8074fc7 <do_xfrm_monitor+0x3777>
lea    0x30(%ebx),%edx
mov    $0x808b0e0,%eax
call   8074e60 <do_xfrm_monitor+0x3610>
mov    0x90(%ebx),%eax
test   %eax,%eax
je     8074f0a <do_xfrm_monitor+0x36ba>
mov    %eax,0x8(%esp)
movl   $0x808b0ec,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %ecx,%eax
push   %esi
mov    %ecx,%edi
push   %ebx
mov    %edx,%ebx
sub    $0x3c,%esp
test   $0x1,%al
mov    %ecx,0x14(%esp)
mov    $0x9c,%edx
jne    80753e8 <do_xfrm_monitor+0x3b98>
test   $0x2,%edi
jne    80753fc <do_xfrm_monitor+0x3bac>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     8075043 <do_xfrm_monitor+0x37f3>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     807504b <do_xfrm_monitor+0x37fb>
movb   $0x0,(%edi)
cmp    $0x0,%ebp
je     807559e <do_xfrm_monitor+0x3d4e>
mov    0x14(%esp),%eax
movb   $0x1,0x98(%eax)
movb   $0x4,0x99(%eax)
jle    8075114 <do_xfrm_monitor+0x38c4>
add    $0x30,%eax
mov    %eax,0x1c(%esp)
jmp    80750cf <do_xfrm_monitor+0x387f>
lea    0x0(%esi),%esi
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
mov    0x4(%ebx),%eax
movzbl (%eax),%edx
cmp    $0x69,%edx
je     8075180 <do_xfrm_monitor+0x3930>
cmp    $0x75,%edx
jne    80751a0 <do_xfrm_monitor+0x3950>
cmpb   $0x64,0x1(%eax)
jne    80751a0 <do_xfrm_monitor+0x3950>
cmpb   $0x70,0x2(%eax)
jne    80751a0 <do_xfrm_monitor+0x3950>
cmpb   $0x0,0x3(%eax)
jne    80751a0 <do_xfrm_monitor+0x3950>
mov    0x14(%esp),%eax
movl   $0x0,0x18(%eax)
sub    $0x1,%ebp
test   %ebp,%ebp
lea    0x4(%esi),%ebx
jle    8075114 <do_xfrm_monitor+0x38c4>
mov    (%ebx),%eax
mov    $0x6,%ecx
mov    $0x8088e14,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8075078 <do_xfrm_monitor+0x3828>
mov    $0x808c3df,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075120 <do_xfrm_monitor+0x38d0>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
mov    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    0x14(%esp),%edi
test   %ebp,%ebp
lea    0x4(%esi),%ebx
mov    %eax,0x94(%edi)
jg     80750cf <do_xfrm_monitor+0x387f>
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    $0x8082f3c,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80751d0 <do_xfrm_monitor+0x3980>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
add    $0x60,%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
test   %eax,%eax
je     80750c5 <do_xfrm_monitor+0x3875>
mov    0x4(%ebx),%eax
movl   $0x808b103,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x70,0x1(%eax)
jne    80751a0 <do_xfrm_monitor+0x3950>
cmpb   $0x0,0x2(%eax)
jne    80751a0 <do_xfrm_monitor+0x3950>
mov    0x14(%esp),%eax
movl   $0x1,0x18(%eax)
jmp    80750c5 <do_xfrm_monitor+0x3875>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
movl   $0x808b550,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075228 <do_xfrm_monitor+0x39d8>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
add    $0x38,%eax
mov    %eax,(%esp)
call   807fea0 <get_addr>
test   %eax,%eax
je     80750c5 <do_xfrm_monitor+0x3875>
mov    0x4(%ebx),%eax
movl   $0x808b11b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    $0x808b143,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8075258 <do_xfrm_monitor+0x3a08>
movzbl (%eax),%edi
cmp    $0x74,%edi
mov    %edi,0x18(%esp)
jne    8075298 <do_xfrm_monitor+0x3a48>
cmpb   $0x69,0x1(%eax)
jne    8075298 <do_xfrm_monitor+0x3a48>
cmpb   $0x64,0x2(%eax)
jne    8075298 <do_xfrm_monitor+0x3a48>
cmpb   $0x0,0x3(%eax)
jne    8075298 <do_xfrm_monitor+0x3a48>
xchg   %ax,%ax
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8075554 <do_xfrm_monitor+0x3d04>
mov    0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
xchg   %ax,%ax
mov    $0xf,%ecx
mov    %eax,%esi
mov    $0x808b13e,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80752f3 <do_xfrm_monitor+0x3aa3>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8075554 <do_xfrm_monitor+0x3d04>
mov    0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,0x4(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    $0x808b14d,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80752b4 <do_xfrm_monitor+0x3a64>
mov    $0x808b157,%edi
mov    $0xb,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807532c <do_xfrm_monitor+0x3adc>
cmpl   $0x73,0x18(%esp)
jne    807536b <do_xfrm_monitor+0x3b1b>
cmpb   $0x69,0x1(%eax)
jne    807536b <do_xfrm_monitor+0x3b1b>
cmpb   $0x64,0x2(%eax)
jne    807536b <do_xfrm_monitor+0x3b1b>
cmpb   $0x0,0x3(%eax)
jne    807536b <do_xfrm_monitor+0x3b1b>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8075554 <do_xfrm_monitor+0x3d04>
mov    0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,0x8(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    $0x808b152,%edi
mov    $0x10,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807540d <do_xfrm_monitor+0x3bbd>
mov    $0x808b162,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807540d <do_xfrm_monitor+0x3bbd>
mov    $0x808b167,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807544d <do_xfrm_monitor+0x3bfd>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    80754de <do_xfrm_monitor+0x3c8e>
movzwl 0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %ax,0x1c(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%ecx),%edi
mov    $0x9b,%dl
test   $0x2,%edi
movb   $0x0,(%ecx)
je     807502c <do_xfrm_monitor+0x37dc>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    807502c <do_xfrm_monitor+0x37dc>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8075554 <do_xfrm_monitor+0x3d04>
mov    0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,0xc(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
call   8080010 <incomplete_command>
mov    $0x808b17f,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075496 <do_xfrm_monitor+0x3c46>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    80754de <do_xfrm_monitor+0x3c8e>
movzwl 0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %ax,0x1e(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    $0x808b19e,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075504 <do_xfrm_monitor+0x3cb4>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    80754f1 <do_xfrm_monitor+0x3ca1>
movzbl 0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,0x10(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    0x4(%ebx),%eax
movl   $0x808b171,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808b189,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x808b199,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80755a3 <do_xfrm_monitor+0x3d53>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2c(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    80754f1 <do_xfrm_monitor+0x3ca1>
movzbl 0x2c(%esp),%eax
mov    0x14(%esp),%ebx
mov    %eax,0x14(%ebx)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    0x4(%ebx),%eax
movl   $0x808b132,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807559e <do_xfrm_monitor+0x3d4e>
mov    (%ebx),%eax
movl   $0x808b1da,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
call   8074b30 <do_xfrm_monitor+0x32e0>
mov    $0x808b0e5,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075608 <do_xfrm_monitor+0x3db8>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
mov    0x4(%ebx),%edi
mov    %edi,(%esp)
call   804b880 <strlen@plt>
cmp    $0x10,%eax
jne    8075659 <do_xfrm_monitor+0x3e09>
mov    %eax,%ecx
shr    $0x1f,%ecx
add    %eax,%ecx
mov    0x14(%esp),%eax
sar    %ecx
mov    %ecx,0x20(%eax)
lea    0x24(%eax),%edx
mov    %edi,%eax
call   804ce0b <__sprintf_chk@plt+0x125b>
test   %eax,%eax
jns    80750c5 <do_xfrm_monitor+0x3875>
mov    0x4(%ebx),%eax
movl   $0x808b1a5,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x808b1c2,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807567d <do_xfrm_monitor+0x3e2d>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
mov    0x4(%ebx),%edi
mov    %edi,(%esp)
call   804b880 <strlen@plt>
cmp    $0x10,%eax
jne    8075676 <do_xfrm_monitor+0x3e26>
mov    %eax,%ecx
mov    0x1c(%esp),%edx
shr    $0x1f,%ecx
add    %eax,%ecx
mov    0x14(%esp),%eax
sar    %ecx
mov    %ecx,0x2c(%eax)
mov    %edi,%eax
call   804ce0b <__sprintf_chk@plt+0x125b>
test   %eax,%eax
jns    80750c5 <do_xfrm_monitor+0x3875>
jmp    80755f5 <do_xfrm_monitor+0x3da5>
cmp    $0x8,%eax
lea    0x0(%esi,%eiz,1),%esi
je     80755d3 <do_xfrm_monitor+0x3d83>
mov    %edi,0x4(%esp)
movl   $0x808b574,(%esp)
call   80800b0 <invarg>
cmp    $0x8,%eax
je     8075634 <do_xfrm_monitor+0x3de4>
jmp    8075666 <do_xfrm_monitor+0x3e16>
mov    $0x808b1ce,%edi
mov    $0xc,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80756c7 <do_xfrm_monitor+0x3e77>
sub    $0x1,%ebp
lea    0x4(%ebx),%esi
je     8075448 <do_xfrm_monitor+0x3bf8>
mov    0x4(%ebx),%ebx
movl   $0x8085f84,0x4(%esp)
mov    %ebx,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
jne    80756e9 <do_xfrm_monitor+0x3e99>
mov    0x14(%esp),%eax
movb   $0x1,0x98(%eax)
movb   $0x4,0x99(%eax)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    $0x8082d64,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075714 <do_xfrm_monitor+0x3ec4>
mov    0x14(%esp),%eax
mov    %ebx,%esi
orb    $0x40,0x8c(%eax)
jmp    80750c5 <do_xfrm_monitor+0x3875>
movl   $0x8086369,0x4(%esp)
mov    %ebx,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
jne    807573a <do_xfrm_monitor+0x3eea>
mov    0x14(%esp),%eax
movb   $0x0,0x98(%eax)
movb   $0x0,0x99(%eax)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    $0x808b1f9,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8075567 <do_xfrm_monitor+0x3d17>
mov    0x14(%esp),%eax
mov    %ebx,%esi
orb    $0x80,0x8c(%eax)
jmp    80750c5 <do_xfrm_monitor+0x3875>
mov    %ebx,0xc(%esp)
movl   $0x808b5a0,0x8(%esp)
jmp    80751ac <do_xfrm_monitor+0x395c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x650,%esp
mov    %gs:0x14,%eax
mov    %eax,0x64c(%esp)
xor    %eax,%eax
mov    0x80942bc,%eax
mov    0x660(%esp),%edi
mov    0x664(%esp),%esi
test   %eax,%eax
js     8075f58 <do_ipl2tp+0x808>
test   %edi,%edi
jle    80762b8 <do_ipl2tp+0xb68>
movl   $0x808340d,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%ebx
je     8075a00 <do_ipl2tp+0x2b0>
movl   $0x8085f9e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
mov    %eax,%ebx
je     8075900 <do_ipl2tp+0x1b0>
movl   $0x8083425,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80757f3 <do_ipl2tp+0xa3>
movl   $0x808342a,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8075ec8 <do_ipl2tp+0x778>
lea    0x4(%esi),%edx
lea    -0x1(%edi),%eax
lea    0x15c(%esp),%ecx
call   8075000 <do_xfrm_monitor+0x37b0>
test   %eax,%eax
js     80762bd <do_ipl2tp+0xb6d>
movzbl 0x1e8(%esp),%eax
test   $0xc0,%al
je     80762cc <do_ipl2tp+0xb7c>
test   %al,%al
lea    0x238(%esp),%esi
js     8075fb0 <do_ipl2tp+0x860>
xor    %eax,%eax
mov    $0x105,%ecx
mov    0x15c(%esp),%edx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
movl   $0x14,0x238(%esp)
00
movb   $0x4,0x248(%esp)
movb   $0x1,0x249(%esp)
mov    %ax,0x23c(%esp)
mov    $0x301,%eax
mov    %ax,0x23e(%esp)
mov    0x809649c,%eax
add    $0x1,%eax
test   %edx,%edx
mov    %eax,0x809649c
mov    %eax,0x80964a0
mov    %eax,0x240(%esp)
mov    $0x14,%eax
jne    8075f30 <do_ipl2tp+0x7e0>
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8096480,(%esp)
call   807da20 <rtnl_send>
test   %eax,%eax
js     80758d8 <do_ipl2tp+0x188>
lea    0x15c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x80749e0,0x4(%esp)
movl   $0x8096480,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     807606b <do_ipl2tp+0x91b>
xor    %ebx,%ebx
mov    0x64c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    80762c7 <do_ipl2tp+0xb77>
add    $0x650,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x4(%esi),%edx
lea    -0x1(%edi),%eax
lea    0xc0(%esp),%ecx
call   8075000 <do_xfrm_monitor+0x37b0>
test   %eax,%eax
js     80762bd <do_ipl2tp+0xb6d>
movzbl 0x14c(%esp),%eax
test   $0xc0,%al
je     80762cc <do_ipl2tp+0xb7c>
test   $0x40,%al
je     807593d <do_ipl2tp+0x1ed>
mov    0xc0(%esp),%edx
test   %edx,%edx
je     80762d8 <do_ipl2tp+0xb88>
test   %al,%al
js     8075e28 <do_ipl2tp+0x6d8>
mov    0xc8(%esp),%eax
test   %eax,%eax
jne    8075e37 <do_ipl2tp+0x6e7>
xor    %eax,%eax
mov    $0x25,%ecx
lea    0x238(%esp),%edi
mov    $0x5,%esi
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
mov    %si,0x23e(%esp)
lea    0x238(%esp),%esi
movl   $0x14,0x238(%esp)
00
movb   $0x2,0x248(%esp)
mov    %ax,0x23c(%esp)
mov    0xc0(%esp),%eax
movb   $0x1,0x249(%esp)
movl   $0x9,0x8(%esp)
movl   $0x80,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %esi,(%esp)
call   807eba0 <addattr32>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8096480,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
mov    $0xfffffffe,%eax
cmovs  %eax,%ebx
jmp    80758da <do_ipl2tp+0x18a>
lea    0x0(%esi),%esi
lea    0x4(%esi),%edx
lea    -0x1(%edi),%eax
lea    0x24(%esp),%ecx
call   8075000 <do_xfrm_monitor+0x37b0>
test   %eax,%eax
js     80762bd <do_ipl2tp+0xb6d>
movzbl 0xb0(%esp),%eax
test   $0xc0,%al
je     80762cc <do_ipl2tp+0xb7c>
mov    0x24(%esp),%esi
test   %esi,%esi
je     80762d8 <do_ipl2tp+0xb88>
mov    %eax,%edx
and    $0x80,%edx
je     8075a55 <do_ipl2tp+0x305>
mov    0x30(%esp),%edi
test   %edi,%edi
je     80762e4 <do_ipl2tp+0xb94>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
je     807612a <do_ipl2tp+0x9da>
test   $0x40,%al
je     8075c38 <do_ipl2tp+0x4e8>
mov    0x28(%esp),%eax
test   %eax,%eax
je     8076339 <do_ipl2tp+0xbe9>
cmpb   $0x0,0x5c(%esp)
je     8076351 <do_ipl2tp+0xc01>
cmpb   $0x0,0x84(%esp)
je     8076345 <do_ipl2tp+0xbf5>
mov    0x3c(%esp),%eax
test   %eax,%eax
jne    8075aa2 <do_ipl2tp+0x352>
cmpw   $0x0,0x40(%esp)
je     80762fc <do_ipl2tp+0xbac>
cmpw   $0x0,0x42(%esp)
je     80762f0 <do_ipl2tp+0xba0>
xor    %eax,%eax
mov    $0x105,%ecx
lea    0x238(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
mov    $0x5,%edi
mov    %esi,0xc(%esp)
lea    0x238(%esp),%esi
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
movl   $0x14,0x238(%esp)
00
mov    %ax,0x23c(%esp)
mov    %di,0x23e(%esp)
movb   $0x1,0x248(%esp)
movb   $0x1,0x249(%esp)
call   807eba0 <addattr32>
mov    0x28(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
movl   $0x3,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eb00 <addattr8>
movzwl 0x3c(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
mov    $0x1f,%edx
mov    $0x18,%eax
cmpb   $0xa,0x5c(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
cmove  %edx,%eax
movzbl 0x5d(%esp),%edx
mov    %eax,0x8(%esp)
mov    %edx,0x10(%esp)
lea    0x64(%esp),%edx
mov    %edx,0xc(%esp)
call   807ea10 <addattr_l>
mov    $0x20,%edx
mov    $0x19,%eax
cmpb   $0xa,0x84(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
cmove  %edx,%eax
movzbl 0x85(%esp),%edx
mov    %eax,0x8(%esp)
mov    %edx,0x10(%esp)
lea    0x8c(%esp),%edx
mov    %edx,0xc(%esp)
call   807ea10 <addattr_l>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8076098 <do_ipl2tp+0x948>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8096480,(%esp)
call   807e090 <rtnl_talk>
movzbl 0xb0(%esp),%edx
and    $0xffffff80,%edx
sar    $0x1f,%eax
and    $0xfffffffe,%eax
test   %dl,%dl
jne    8075c3e <do_ipl2tp+0x4ee>
mov    %eax,%ebx
jmp    80758da <do_ipl2tp+0x18a>
lea    0x0(%esi),%esi
xor    %eax,%eax
test   %dl,%dl
je     8075c2b <do_ipl2tp+0x4db>
mov    $0x5,%ecx
xor    %eax,%eax
mov    %cx,0xac(%esp)
lea    0x238(%esp),%edi
mov    $0x105,%ecx
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
mov    $0x5,%esi
mov    %si,0x23e(%esp)
lea    0x238(%esp),%esi
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ax,0x23c(%esp)
mov    0x24(%esp),%eax
mov    %esi,(%esp)
movl   $0x14,0x238(%esp)
00
movb   $0x5,0x248(%esp)
mov    %eax,0xc(%esp)
movb   $0x1,0x249(%esp)
call   807eba0 <addattr32>
mov    0x28(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x2c(%esp),%eax
movl   $0xb,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x30(%esp),%eax
movl   $0xc,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
movzwl 0xac(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
movzbl 0xbc(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0xbd(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzwl 0xae(%esp),%eax
test   %ax,%ax
jne    80761e0 <do_ipl2tp+0xa90>
movzbl 0xb0(%esp),%eax
test   $0x2,%al
jne    80761b8 <do_ipl2tp+0xa68>
test   $0x4,%al
jne    8076190 <do_ipl2tp+0xa40>
test   $0x8,%al
jne    8076168 <do_ipl2tp+0xa18>
test   $0x30,%al
jne    8076138 <do_ipl2tp+0x9e8>
mov    0xb4(%esp),%eax
test   %eax,%eax
jne    8076290 <do_ipl2tp+0xb40>
mov    0x34(%esp),%eax
test   %eax,%eax
jne    8076268 <do_ipl2tp+0xb18>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    8076238 <do_ipl2tp+0xae8>
mov    0x50(%esp),%eax
test   %eax,%eax
jne    8076208 <do_ipl2tp+0xab8>
mov    0xb8(%esp),%eax
test   %eax,%eax
je     80759c3 <do_ipl2tp+0x273>
cmpb   $0x0,(%eax)
je     80759c3 <do_ipl2tp+0x273>
mov    %eax,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ec30 <addattrstrz>
jmp    80759c3 <do_ipl2tp+0x273>
mov    0xc8(%esp),%eax
test   %eax,%eax
je     807612a <do_ipl2tp+0x9da>
xor    %eax,%eax
mov    $0x105,%ecx
lea    0x238(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
lea    0x238(%esp),%esi
mov    $0x5,%edi
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ax,0x23c(%esp)
mov    0xc0(%esp),%eax
mov    %esi,(%esp)
movl   $0x14,0x238(%esp)
00
mov    %di,0x23e(%esp)
mov    %eax,0xc(%esp)
movb   $0x6,0x248(%esp)
movb   $0x1,0x249(%esp)
call   807eba0 <addattr32>
mov    0xc8(%esp),%eax
movl   $0xb,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
jmp    80759bb <do_ipl2tp+0x26b>
xchg   %ax,%ax
movl   $0x8083420,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80757f3 <do_ipl2tp+0xa3>
movl   $0x8082d28,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     80762b8 <do_ipl2tp+0xb68>
mov    (%esi),%eax
movl   $0x808b5f0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eba0 <addattr32>
mov    0x238(%esp),%eax
jmp    8075899 <do_ipl2tp+0x149>
movl   $0x10,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x8096480,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     8076308 <do_ipl2tp+0xbb8>
movl   $0x8082d5f,0x4(%esp)
movl   $0x8096480,(%esp)
call   807cee0 <genl_resolve_family>
test   %eax,%eax
mov    %eax,0x80942bc
jns    8075783 <do_ipl2tp+0x33>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
mov    $0x25,%ecx
mov    0x15c(%esp),%edx
mov    %esi,%edi
mov    $0x301,%ebx
rep stos %eax,%es:(%edi)
mov    0x80942bc,%eax
movl   $0x14,0x238(%esp)
00
mov    %bx,0x23e(%esp)
movb   $0x8,0x248(%esp)
mov    %ax,0x23c(%esp)
mov    0x809649c,%eax
movb   $0x1,0x249(%esp)
add    $0x1,%eax
test   %edx,%edx
mov    %eax,0x809649c
mov    %eax,0x80964a0
mov    %eax,0x240(%esp)
mov    $0x14,%eax
je     8076028 <do_ipl2tp+0x8d8>
mov    0x164(%esp),%ecx
test   %ecx,%ecx
jne    80760df <do_ipl2tp+0x98f>
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x8096480,(%esp)
call   807da20 <rtnl_send>
test   %eax,%eax
js     80758d8 <do_ipl2tp+0x188>
lea    0x15c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8074ef0,0x4(%esp)
movl   $0x8096480,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    80758d8 <do_ipl2tp+0x188>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8075f9d <do_ipl2tp+0x84d>
lea    0x0(%esi),%esi
movzwl 0x40(%esp),%eax
movl   $0x1a,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
movzwl 0x42(%esp),%eax
movl   $0x1b,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
jmp    8075bee <do_ipl2tp+0x49e>
mov    %edx,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x80,0x4(%esp)
mov    %esi,(%esp)
call   807eba0 <addattr32>
mov    0x164(%esp),%eax
movl   $0xb,0x8(%esp)
movl   $0x80,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x238(%esp),%eax
jmp    8076028 <do_ipl2tp+0x8d8>
movl   $0x808b157,(%esp)
call   8080060 <missarg>
xchg   %ax,%ax
shl    $0x2,%eax
sar    $0x6,%al
movzbl %al,%eax
mov    %eax,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eb00 <addattr8>
jmp    8075dbc <do_ipl2tp+0x66c>
lea    0x0(%esi),%esi
movl   $0x14,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eac0 <addattr>
movzbl 0xb0(%esp),%eax
jmp    8075db4 <do_ipl2tp+0x664>
lea    0x0(%esi),%esi
movl   $0x13,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eac0 <addattr>
movzbl 0xb0(%esp),%eax
jmp    8075dac <do_ipl2tp+0x65c>
lea    0x0(%esi),%esi
movl   $0x12,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eac0 <addattr>
movzbl 0xb0(%esp),%eax
jmp    8075da4 <do_ipl2tp+0x654>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x1c,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eb50 <addattr16>
jmp    8075d94 <do_ipl2tp+0x644>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x10(%esp)
lea    0x54(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
jmp    8075def <do_ipl2tp+0x69f>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x10(%esp)
lea    0x48(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
jmp    8075de3 <do_ipl2tp+0x693>
lea    0x0(%esi,%eiz,1),%esi
movzwl %ax,%eax
mov    %eax,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eb50 <addattr16>
jmp    8075dd7 <do_ipl2tp+0x687>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
sar    $0x1f,%eax
mov    %eax,0x10(%esp)
movl   $0x16,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ebe0 <addattr64>
jmp    8075dcb <do_ipl2tp+0x67b>
call   8074b30 <do_xfrm_monitor+0x32e0>
mov    $0xffffffff,%ebx
jmp    80758da <do_ipl2tp+0x18a>
call   804b660 <__stack_chk_fail@plt>
movl   $0x808b1ef,(%esp)
call   8080060 <missarg>
movl   $0x808b143,(%esp)
call   8080060 <missarg>
movl   $0x808b152,(%esp)
call   8080060 <missarg>
movl   $0x808b17f,(%esp)
call   8080060 <missarg>
movl   $0x808b167,(%esp)
call   8080060 <missarg>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b5cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
movl   $0x808b13e,(%esp)
call   8080060 <missarg>
movl   $0x8082f3c,(%esp)
call   8080060 <missarg>
movl   $0x8082fb7,(%esp)
call   8080060 <missarg>
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x470,%esp
mov    0x488(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
mov    0x484(%esp),%esi
test   %ebx,%ebx
je     80764a2 <do_ipl2tp+0xd52>
mov    0x14(%ebx),%eax
test   %eax,%eax
je     8076578 <do_ipl2tp+0xe28>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    80764c0 <do_ipl2tp+0xd70>
mov    %eax,0xc(%esp)
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     8076568 <do_ipl2tp+0xe18>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    8076530 <do_ipl2tp+0xde0>
mov    %eax,0xc(%esp)
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     8076416 <do_ipl2tp+0xcc6>
mov    0x4(%eax),%edi
test   %edi,%edi
jne    80764f8 <do_ipl2tp+0xda8>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     807645c <do_ipl2tp+0xd0c>
lea    0x2c(%esp),%edi
add    $0x4,%eax
movl   $0x40,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
call   804baa0 <inet_ntop@plt>
mov    %edi,0xc(%esp)
movl   $0x808a6c3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%ebx),%eax
test   %eax,%eax
je     80764a2 <do_ipl2tp+0xd52>
lea    0x2c(%esp),%ebx
add    $0x4,%eax
movl   $0x40,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
call   804baa0 <inet_ntop@plt>
mov    %ebx,0xc(%esp)
movl   $0x808a6cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x46c(%esp),%eax
xor    %gs:0x14,%eax
jne    80765a9 <do_ipl2tp+0xe59>
add    $0x470,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    80763ad <do_ipl2tp+0xc5d>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     8076588 <do_ipl2tp+0xe38>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076416 <do_ipl2tp+0xcc6>
lea    0x0(%esi),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    80763e8 <do_ipl2tp+0xc98>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8088b92,%eax
jmp    80763e8 <do_ipl2tp+0xc98>
lea    0x0(%esi),%esi
mov    $0x8088b92,%eax
jmp    80763ad <do_ipl2tp+0xc5d>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076416 <do_ipl2tp+0xcc6>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x52c,%esp
mov    0x54c(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x51c(%esp)
xor    %ecx,%ecx
mov    0x544(%esp),%ebx
mov    0x548(%esp),%ebp
movl   $0x0,0x3c(%esp)
testb  $0x4,0x7(%eax)
mov    %eax,0x28(%esp)
movl   $0x0,0x40(%esp)
je     8076971 <do_ipl2tp+0x1221>
movl   $0x0,0x2c(%esp)
xor    %edi,%edi
movl   $0x0,0x24(%esp)
test   %ebx,%ebx
jle    80766d8 <do_ipl2tp+0xf88>
lea    -0x1(%ebx),%esi
add    $0x4,%ebp
jmp    807665e <do_ipl2tp+0xf0e>
nop
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     80767b8 <do_ipl2tp+0x1068>
mov    %edi,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,%edi
mov    %edi,0x24(%esp)
sub    $0x2,%ebx
sub    $0x2,%esi
add    $0x8,%ebp
test   %ebx,%ebx
jle    80766d8 <do_ipl2tp+0xf88>
lea    -0x4(%ebp),%eax
mov    %eax,0x20(%esp)
movl   $0x8085efd,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8076620 <do_ipl2tp+0xed0>
movl   $0x8085efc,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80767e8 <do_ipl2tp+0x1098>
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8076840 <do_ipl2tp+0x10f0>
mov    %edi,(%esp)
sub    $0x2,%ebx
sub    $0x2,%esi
call   807ffa0 <get_addr32>
add    $0x8,%ebp
test   %ebx,%ebx
mov    %eax,%edi
jg     807665e <do_ipl2tp+0xf0e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%esi
xor    %ebx,%ebx
mov    %edi,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807eba0 <addattr32>
mov    0x24(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
lea    0x3c(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
lea    0x40(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8076796 <do_ipl2tp+0x1046>
mov    0x2c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
mov    0x51c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8076c9a <do_ipl2tp+0x154a>
add    $0x52c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     8076c9f <do_ipl2tp+0x154f>
mov    0x44(%esp),%edi
bswap  %edi
jmp    807664d <do_ipl2tp+0xefd>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8085f01,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8076870 <do_ipl2tp+0x1120>
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%edx
movl   $0x2e,0x4(%esp)
mov    %edx,(%esp)
mov    %edx,0x24(%esp)
call   804b860 <strchr@plt>
mov    0x24(%esp),%edx
test   %eax,%eax
je     80768c1 <do_ipl2tp+0x1171>
mov    %edx,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x24(%esp)
jmp    8076651 <do_ipl2tp+0xf01>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     8076cb7 <do_ipl2tp+0x1567>
mov    0x44(%esp),%edi
bswap  %edi
jmp    8076651 <do_ipl2tp+0xf01>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8082f3c,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80768f0 <do_ipl2tp+0x11a0>
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%eax
cmpb   $0x61,(%eax)
jne    80768b0 <do_ipl2tp+0x1160>
cmpb   $0x6e,0x1(%eax)
jne    80768b0 <do_ipl2tp+0x1160>
cmpb   $0x79,0x2(%eax)
jne    80768b0 <do_ipl2tp+0x1160>
cmpb   $0x0,0x3(%eax)
je     8076c89 <do_ipl2tp+0x1539>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x40(%esp)
jmp    8076651 <do_ipl2tp+0xf01>
lea    0x44(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     8076ccf <do_ipl2tp+0x157f>
mov    0x44(%esp),%eax
bswap  %eax
mov    %eax,0x24(%esp)
jmp    8076651 <do_ipl2tp+0xf01>
movl   $0x8082fb7,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8076ad6 <do_ipl2tp+0x1386>
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%eax
cmpb   $0x61,(%eax)
jne    8076960 <do_ipl2tp+0x1210>
cmpb   $0x6e,0x1(%eax)
jne    8076960 <do_ipl2tp+0x1210>
cmpb   $0x79,0x2(%eax)
jne    8076960 <do_ipl2tp+0x1210>
cmpb   $0x0,0x3(%eax)
jne    8076960 <do_ipl2tp+0x1210>
mov    %eax,0xc(%esp)
movl   $0x808b67c,0x8(%esp)
mov    0x8095c40,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x3c(%esp)
jmp    8076651 <do_ipl2tp+0xf01>
lea    0xfc(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x108,%cx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    $0x1,%ecx
mov    $0x12,%esi
movl   $0x20,0xfc(%esp)
00
mov    %cx,0x102(%esp)
mov    %al,0x10c(%esp)
mov    0x28(%esp),%eax
mov    %si,0x100(%esp)
mov    0x14(%eax),%eax
mov    %edx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x110(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8076b36 <do_ipl2tp+0x13e6>
mov    0xfc(%esp),%eax
sub    $0x20,%eax
js     8076b36 <do_ipl2tp+0x13e6>
mov    %eax,0xc(%esp)
lea    0x11c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x70(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0xb8(%esp),%eax
test   %eax,%eax
je     8076b36 <do_ipl2tp+0x13e6>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x50(%esp),%eax
test   %eax,%eax
je     8076b36 <do_ipl2tp+0x13e6>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x58(%esp),%eax
movl   $0x5,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x60(%esp),%eax
test   %eax,%eax
je     8076b10 <do_ipl2tp+0x13c0>
mov    0x4(%eax),%edi
mov    0x64(%esp),%eax
test   %eax,%eax
je     8076b17 <do_ipl2tp+0x13c7>
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
mov    0x68(%esp),%eax
test   %eax,%eax
je     8076ab2 <do_ipl2tp+0x1362>
mov    0x4(%eax),%eax
mov    %eax,0x3c(%esp)
mov    0x6c(%esp),%eax
test   %eax,%eax
je     8076ac1 <do_ipl2tp+0x1371>
mov    0x4(%eax),%eax
mov    %eax,0x40(%esp)
mov    0x5c(%esp),%eax
test   %eax,%eax
je     8076b24 <do_ipl2tp+0x13d4>
movzbl 0x4(%eax),%eax
mov    %eax,0x2c(%esp)
jmp    807660f <do_ipl2tp+0xebf>
movl   $0x8085e82,0x4(%esp)
mov    -0x4(%ebp),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8076b65 <do_ipl2tp+0x1415>
test   %esi,%esi
je     8076b31 <do_ipl2tp+0x13e1>
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
jne    8076651 <do_ipl2tp+0xf01>
jmp    807694e <do_ipl2tp+0x11fe>
lea    0x0(%esi),%esi
xor    %edi,%edi
jmp    8076a94 <do_ipl2tp+0x1344>
movl   $0x0,0x24(%esp)
jmp    8076aa3 <do_ipl2tp+0x1353>
movl   $0x0,0x2c(%esp)
jmp    807660f <do_ipl2tp+0xebf>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
mov    $0xffffffff,%ebx
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8076796 <do_ipl2tp+0x1046>
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b6a0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b61e,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b63a,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085db7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b6d8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80859ac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    %eax,0xc(%esp)
movl   $0x808b658,0x8(%esp)
jmp    8076939 <do_ipl2tp+0x11e9>
call   804b660 <__stack_chk_fail@plt>
mov    0x20(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x808a730,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8076939 <do_ipl2tp+0x11e9>
mov    0x20(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8085c18,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8076939 <do_ipl2tp+0x11e9>
mov    0x20(%esp),%eax
mov    0x4(%eax),%eax
movl   $0x8085c5c,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8076939 <do_ipl2tp+0x11e9>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x470,%esp
mov    0x488(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
mov    0x484(%esp),%esi
test   %ebx,%ebx
je     8076d2c <do_ipl2tp+0x15dc>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     8076d2c <do_ipl2tp+0x15dc>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x3,%edx
ja     8076d50 <do_ipl2tp+0x1600>
mov    0x46c(%esp),%eax
xor    %gs:0x14,%eax
jne    8077255 <do_ipl2tp+0x1b05>
add    $0x470,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
movl   $0x8087e9b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     80770f0 <do_ipl2tp+0x19a0>
mov    0x4(%eax),%eax
test   %eax,%eax
mov    %eax,0x28(%esp)
je     8076ddf <do_ipl2tp+0x168f>
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
je     8077170 <do_ipl2tp+0x1a20>
call   80805b0 <format_host>
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     80771b8 <do_ipl2tp+0x1a68>
mov    0x4(%eax),%eax
test   %eax,%eax
mov    %eax,0x28(%esp)
jne    8076fc0 <do_ipl2tp+0x1870>
mov    0xc(%ebx),%eax
test   %eax,%eax
je     8076e0b <do_ipl2tp+0x16bb>
mov    0x4(%eax),%edi
test   %edi,%edi
jne    8077010 <do_ipl2tp+0x18c0>
mov    0x28(%ebx),%eax
test   %eax,%eax
je     8076e48 <do_ipl2tp+0x16f8>
movzwl 0x6(%eax),%edx
movzwl 0x4(%eax),%eax
ror    $0x8,%dx
ror    $0x8,%ax
movzwl %dx,%edx
movzwl %ax,%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x808b880,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%ebx),%eax
test   %eax,%eax
je     8076e59 <do_ipl2tp+0x1709>
cmpb   $0x0,0x4(%eax)
je     8077050 <do_ipl2tp+0x1900>
mov    0x2c(%ebx),%eax
test   %eax,%eax
je     8076e6a <do_ipl2tp+0x171a>
cmpb   $0x0,0x4(%eax)
jne    8077078 <do_ipl2tp+0x1928>
mov    0x30(%ebx),%eax
test   %eax,%eax
je     8076e7b <do_ipl2tp+0x172b>
cmpb   $0x0,0x4(%eax)
jne    80770a0 <do_ipl2tp+0x1950>
mov    0x34(%ebx),%eax
test   %eax,%eax
je     8076e8c <do_ipl2tp+0x173c>
cmpb   $0x0,0x4(%eax)
jne    80770c8 <do_ipl2tp+0x1978>
mov    0x38(%ebx),%eax
test   %eax,%eax
je     8076e9d <do_ipl2tp+0x174d>
cmpb   $0x0,0x4(%eax)
jne    8076f70 <do_ipl2tp+0x1820>
mov    0x18(%ebx),%eax
test   %eax,%eax
je     8076ed0 <do_ipl2tp+0x1780>
movzbl 0x4(%eax),%eax
test   %al,%al
je     8076ed0 <do_ipl2tp+0x1780>
cmp    $0x1,%al
je     8077230 <do_ipl2tp+0x1ae0>
mov    %eax,0xc(%esp)
movl   $0x808b8c1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x14(%ebx),%eax
test   %eax,%eax
je     8076ee3 <do_ipl2tp+0x1793>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    8076f98 <do_ipl2tp+0x1848>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     8076f11 <do_ipl2tp+0x17c1>
mov    0x4(%eax),%eax
test   %eax,%eax
jne    8076f50 <do_ipl2tp+0x1800>
mov    %esi,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b8ca,(%esp)
call   804b710 <fwrite@plt>
mov    0x24(%ebx),%eax
test   %eax,%eax
je     8076d2c <do_ipl2tp+0x15dc>
mov    0x4(%eax),%eax
test   %eax,%eax
je     8076d2c <do_ipl2tp+0x15dc>
movl   $0x1,0xc(%esp)
movl   $0x808b8e2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076d2c <do_ipl2tp+0x15dc>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
movl   $0x808b8d7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076f11 <do_ipl2tp+0x17c1>
xchg   %ax,%ax
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b8ac,(%esp)
call   804b710 <fwrite@plt>
jmp    8076e9d <do_ipl2tp+0x174d>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x8085de7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076ee3 <do_ipl2tp+0x1793>
lea    0x0(%esi,%eiz,1),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076df9 <do_ipl2tp+0x16a9>
lea    0x0(%esi),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     8077196 <do_ipl2tp+0x1a46>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076e0b <do_ipl2tp+0x16bb>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b88c,(%esp)
call   804b710 <fwrite@plt>
jmp    8076e59 <do_ipl2tp+0x1709>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b898,(%esp)
call   804b710 <fwrite@plt>
jmp    8076e6a <do_ipl2tp+0x171a>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b89f,(%esp)
call   804b710 <fwrite@plt>
jmp    8076e7b <do_ipl2tp+0x172b>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b8a4,(%esp)
call   804b710 <fwrite@plt>
jmp    8076e8c <do_ipl2tp+0x173c>
lea    0x0(%esi),%esi
mov    0x40(%ebx),%eax
test   %eax,%eax
je     8076ddf <do_ipl2tp+0x168f>
mov    0x4(%eax),%edx
lea    0x2c(%esp),%edi
mov    %edx,0x2c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x30(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x34(%esp)
mov    0x10(%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x38(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     8076ddf <do_ipl2tp+0x168f>
cmpb   $0xff,0x2c(%esp)
lea    0x6c(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x10,0x4(%esp)
movl   $0xa,(%esp)
jne    8076dbe <do_ipl2tp+0x166e>
lea    0x0(%esi,%eiz,1),%esi
call   80805b0 <format_host>
movl   $0x8084de5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076ddf <do_ipl2tp+0x168f>
mov    %edi,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8076e0b <do_ipl2tp+0x16bb>
nop
mov    0x44(%ebx),%eax
test   %eax,%eax
je     8076df9 <do_ipl2tp+0x16a9>
mov    0x4(%eax),%edx
lea    0x2c(%esp),%edi
mov    %edx,0x2c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x30(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x34(%esp)
mov    0x10(%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x38(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     8076df9 <do_ipl2tp+0x16a9>
lea    0x6c(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x10,0x4(%esp)
movl   $0xa,(%esp)
jmp    8076fe7 <do_ipl2tp+0x1897>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b8b4,(%esp)
call   804b710 <fwrite@plt>
jmp    8076ed0 <do_ipl2tp+0x1780>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    0xbc(%esp),%eax
mov    0xb4(%esp),%ebp
mov    0xb8(%esp),%ebx
movl   $0x0,0x3c(%esp)
mov    %eax,0x20(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
xor    %eax,%eax
mov    %ax,0x58(%esp)
xor    %eax,%eax
test   %ebp,%ebp
movl   $0x0,0x40(%esp)
movl   $0x0,0x44(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x5c(%esp)
movl   $0x0,0x60(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
movl   $0x0,0x6c(%esp)
movl   $0x0,0x70(%esp)
movl   $0x0,0x74(%esp)
movl   $0x0,0x78(%esp)
movl   $0x0,0x7c(%esp)
movl   $0x0,0x80(%esp)
00
movl   $0x0,0x84(%esp)
00
movl   $0x0,0x88(%esp)
00
movl   $0x0,0x4c(%esp)
movl   $0x0,0x50(%esp)
mov    %ax,0x5a(%esp)
jle    8077ade <do_ipl2tp+0x238e>
movb   $0x0,0x2f(%esp)
movb   $0x0,0x2d(%esp)
movb   $0x0,0x2c(%esp)
movb   $0x0,0x2b(%esp)
movb   $0x0,0x2a(%esp)
movb   $0x1,0x29(%esp)
movb   $0x0,0x2e(%esp)
movb   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x1c(%esp)
jmp    80773db <do_ipl2tp+0x1c8b>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x3c(%esp),%eax
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    8077a56 <do_ipl2tp+0x2306>
cmpl   $0xffffff,0x3c(%esp)
ja     8077a56 <do_ipl2tp+0x2306>
movl   $0x1,0x1c(%esp)
mov    0x18(%esp),%ebx
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jle    8077508 <do_ipl2tp+0x1db8>
movl   $0x808b8fa,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8077380 <do_ipl2tp+0x1c30>
movl   $0x808b8ee,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8077380 <do_ipl2tp+0x1c30>
movl   $0x808ca53,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077488 <do_ipl2tp+0x1d38>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
lea    0x6c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x44(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   8080d50 <inet_get_addr>
test   %eax,%eax
je     8077a28 <do_ipl2tp+0x22d8>
cmpb   $0xff,0x6c(%esp)
je     80773c9 <do_ipl2tp+0x1c79>
mov    0x44(%esp),%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
je     80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b913,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8082f3c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807785d <do_ipl2tp+0x210d>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
lea    0x7c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   8080d50 <inet_get_addr>
test   %eax,%eax
je     8077a28 <do_ipl2tp+0x22d8>
cmpb   $0xff,0x7c(%esp)
je     80774f2 <do_ipl2tp+0x1da2>
mov    0x48(%esp),%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
jne    80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b929,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8077ade <do_ipl2tp+0x238e>
mov    0x44(%esp),%ebp
test   %ebp,%ebp
jne    8077790 <do_ipl2tp+0x2040>
lea    0x6c(%esp),%ebx
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %ebx,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
je     8077564 <do_ipl2tp+0x1e14>
lea    0x7c(%esp),%eax
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    807779c <do_ipl2tp+0x204c>
mov    0x3c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
mov    0x44(%esp),%esi
test   %esi,%esi
jne    80778e8 <do_ipl2tp+0x2198>
mov    0x48(%esp),%ecx
test   %ecx,%ecx
jne    807796e <do_ipl2tp+0x221e>
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %ebx,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    80777c8 <do_ipl2tp+0x2078>
lea    0x7c(%esp),%ebx
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %ebx,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    80777c8 <do_ipl2tp+0x2078>
mov    0x40(%esp),%edx
test   %edx,%edx
jne    80777fc <do_ipl2tp+0x20ac>
lea    0x5c(%esp),%ebx
movl   $0x10,0x8(%esp)
movl   $0x8095c60,0x4(%esp)
mov    %ebx,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    8077985 <do_ipl2tp+0x2235>
mov    0x24(%esp),%eax
test   %eax,%eax
jne    8077834 <do_ipl2tp+0x20e4>
mov    0x20(%esp),%esi
movzbl 0x2e(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x28(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x29(%esp),%eax
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x2a(%esp),%eax
movl   $0xb,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x2b(%esp),%eax
movl   $0xc,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x2c(%esp),%eax
movl   $0xd,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x2d(%esp),%eax
movl   $0xe,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
cmpb   $0x0,0x2f(%esp)
jne    8077919 <do_ipl2tp+0x21c9>
mov    0x4c(%esp),%eax
test   %eax,%eax
jne    807797f <do_ipl2tp+0x222f>
mov    0x50(%esp),%eax
test   %eax,%eax
jne    8077949 <do_ipl2tp+0x21f9>
cmpw   $0x0,0x58(%esp)
jne    8077740 <do_ipl2tp+0x1ff0>
xor    %eax,%eax
cmpw   $0x0,0x5a(%esp)
je     807776e <do_ipl2tp+0x201e>
lea    0x58(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
movl   $0xa,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
xor    %eax,%eax
mov    0x8c(%esp),%edi
xor    %gs:0x14,%edi
jne    8077ca3 <do_ipl2tp+0x2553>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x48(%esp),%edi
test   %edi,%edi
je     8077520 <do_ipl2tp+0x1dd0>
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b834,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807776e <do_ipl2tp+0x201e>
mov    0x20(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x40(%esp),%edx
test   %edx,%edx
je     80775f0 <do_ipl2tp+0x1ea0>
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x24(%esp),%eax
test   %eax,%eax
je     8077620 <do_ipl2tp+0x1ed0>
mov    0x24(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    8077620 <do_ipl2tp+0x1ed0>
movl   $0x8082fb7,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80779d8 <do_ipl2tp+0x2288>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%eax
cmpb   $0x61,(%eax)
je     80779b2 <do_ipl2tp+0x2262>
lea    0x5c(%esp),%edx
mov    %edx,0x8(%esp)
lea    0x40(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8080d50 <inet_get_addr>
test   %eax,%eax
je     8077a28 <do_ipl2tp+0x22d8>
mov    0x40(%esp),%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
je     80778d0 <do_ipl2tp+0x2180>
cmpb   $0xff,0x5c(%esp)
jne    80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b940,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x4,0x10(%esp)
lea    0x44(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    80775a0 <do_ipl2tp+0x1e50>
movl   $0x0,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
mov    0x50(%esp),%eax
test   %eax,%eax
je     807772e <do_ipl2tp+0x1fde>
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    807772e <do_ipl2tp+0x1fde>
movl   $0x4,0x10(%esp)
lea    0x48(%esp),%eax
jmp    80778f4 <do_ipl2tp+0x21a4>
mov    %eax,0xc(%esp)
jmp    8077921 <do_ipl2tp+0x21d1>
mov    0x20(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x11,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    8077614 <do_ipl2tp+0x1ec4>
cmpb   $0x6e,0x1(%eax)
jne    8077893 <do_ipl2tp+0x2143>
cmpb   $0x79,0x2(%eax)
jne    8077893 <do_ipl2tp+0x2143>
cmpb   $0x0,0x3(%eax)
je     80778b3 <do_ipl2tp+0x2163>
jmp    8077893 <do_ipl2tp+0x2143>
lea    0x0(%esi),%esi
movl   $0x8085e82,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077a69 <do_ipl2tp+0x2319>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x24(%esp)
jne    80773c9 <do_ipl2tp+0x1c79>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%ebx),%eax
movl   $0x808b8fd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807776e <do_ipl2tp+0x201e>
mov    0x4(%ebx),%eax
movl   $0x808b8f2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808a6ef,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077b12 <do_ipl2tp+0x23c2>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%edx
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80773c9 <do_ipl2tp+0x1c79>
lea    0x54(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
jne    8077b94 <do_ipl2tp+0x2444>
mov    0x54(%esp),%eax
cmp    $0xff,%eax
ja     8077c17 <do_ipl2tp+0x24c7>
mov    %al,0x2e(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b808,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807776e <do_ipl2tp+0x201e>
call   8080010 <incomplete_command>
movl   $0x80842a4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8077a83 <do_ipl2tp+0x2333>
movl   $0x8085dfe,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077bba <do_ipl2tp+0x246a>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%edx
mov    $0x8,%ecx
mov    $0x80863b4,%edi
movb   $0x1,0x28(%esp)
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
setb   %al
cmp    %al,%cl
je     80773c9 <do_ipl2tp+0x1c79>
lea    0x54(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
test   %eax,%eax
jne    8077ba7 <do_ipl2tp+0x2457>
movzbl 0x54(%esp),%eax
mov    %al,0x28(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808648d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8085f3e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808ca3d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8077b42 <do_ipl2tp+0x23f2>
movl   $0x808b969,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077c5d <do_ipl2tp+0x250d>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%edx
mov    $0x8086369,%edi
mov    $0x5,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8077c2a <do_ipl2tp+0x24da>
movb   $0x1,0x2f(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b956,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x4c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b970,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808b97d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077cdb <do_ipl2tp+0x258b>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
mov    0x4(%ebx),%edx
mov    $0x808b988,%edi
mov    $0xa,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8077ca8 <do_ipl2tp+0x2558>
movl   $0x0,0x50(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
call   804b660 <__stack_chk_fail@plt>
lea    0x50(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
je     80773c9 <do_ipl2tp+0x1c79>
mov    0x4(%ebx),%eax
movl   $0x808b992,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808b9a4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077d6d <do_ipl2tp+0x261d>
cmp    $0x1,%ebp
je     8077b0d <do_ipl2tp+0x23bd>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x3a(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    8077da4 <do_ipl2tp+0x2654>
lea    0x8(%ebx),%eax
sub    $0x2,%ebp
mov    %eax,0x18(%esp)
je     8077b0d <do_ipl2tp+0x23bd>
movl   $0x0,0x8(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x54(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    8077d91 <do_ipl2tp+0x2641>
movzwl 0x3a(%esp),%eax
ror    $0x8,%ax
mov    %ax,0x58(%esp)
movzwl 0x54(%esp),%eax
ror    $0x8,%ax
mov    %ax,0x5a(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9b2,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077db7 <do_ipl2tp+0x2667>
mov    %ebx,0x18(%esp)
movb   $0x0,0x29(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
mov    0x8(%ebx),%eax
movl   $0x808b9a9,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808b9a0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x808b9b4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077ddb <do_ipl2tp+0x268b>
mov    %ebx,0x18(%esp)
movb   $0x1,0x29(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9bd,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077dff <do_ipl2tp+0x26af>
mov    %ebx,0x18(%esp)
movb   $0x0,0x2a(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x80865b6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077e23 <do_ipl2tp+0x26d3>
mov    %ebx,0x18(%esp)
movb   $0x1,0x2a(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9c5,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077e47 <do_ipl2tp+0x26f7>
mov    %ebx,0x18(%esp)
movb   $0x0,0x2b(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9c7,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077e6b <do_ipl2tp+0x271b>
mov    %ebx,0x18(%esp)
movb   $0x1,0x2b(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9cb,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077e8f <do_ipl2tp+0x273f>
mov    %ebx,0x18(%esp)
movb   $0x0,0x2c(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9cd,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077eb3 <do_ipl2tp+0x2763>
mov    %ebx,0x18(%esp)
movb   $0x1,0x2c(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9d4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
mov    %ebx,0x18(%esp)
movb   $0x0,0x2d(%esp)
test   %eax,%eax
je     80773c9 <do_ipl2tp+0x1c79>
movl   $0x808b9d6,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8077ef6 <do_ipl2tp+0x27a6>
movb   $0x1,0x2d(%esp)
jmp    80773c9 <do_ipl2tp+0x1c79>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8077f2f <do_ipl2tp+0x27df>
mov    (%ebx),%eax
movl   $0x808b9dd,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
call   804ce96 <__sprintf_chk@plt+0x12e6>
mov    $0xffffffff,%eax
jmp    807776e <do_ipl2tp+0x201e>
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x80964c8,%eax
movl   $0x8094320,(%esp)
mov    %eax,0x8(%esp)
mov    0x80964c4,%eax
mov    %eax,0x4(%esp)
call   807da60 <rtnl_send_check>
test   %eax,%eax
js     8077f75 <do_ipl2tp+0x2825>
movl   $0x0,0x80964c8
00
xor    %eax,%eax
add    $0x1c,%esp
ret
movl   $0x808ba01,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    8077f71 <do_ipl2tp+0x2821>
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808baac,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bae4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bb18,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bb4c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1dc,%esp
mov    0x1f4(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x1cc(%esp)
xor    %ecx,%ecx
mov    0x1f8(%esp),%ebx
movzwl 0x4(%eax),%ecx
cmp    0x8094300,%ecx
mov    (%eax),%edx
jne    8078408 <do_ipl2tp+0x2cb8>
sub    $0x14,%edx
js     8078408 <do_ipl2tp+0x2cb8>
cmpb   $0x1,0x10(%eax)
je     80780b0 <do_ipl2tp+0x2960>
xor    %eax,%eax
mov    0x1cc(%esp),%ebx
xor    %gs:0x14,%ebx
jne    8078675 <do_ipl2tp+0x2f25>
add    $0x1dc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x14,%eax
mov    %eax,0x8(%esp)
lea    0x7c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x80(%esp),%esi
test   %esi,%esi
je     8078620 <do_ipl2tp+0x2ed0>
movzbl 0x80964d4,%eax
test   $0xfd,%al
jne    8078089 <do_ipl2tp+0x2939>
mov    0x4(%esi),%edx
mov    $0x1,%ebp
movb   $0x4,0x55(%esp)
movl   $0x2,0x20(%esp)
mov    %edx,0x5c(%esp)
test   %al,%al
je     8078138 <do_ipl2tp+0x29e8>
movswl 0x80964d6,%eax
test   %ax,%ax
js     8078138 <do_ipl2tp+0x29e8>
mov    %eax,0x8(%esp)
lea    0x54(%esp),%eax
movl   $0x80964d4,0x4(%esp)
mov    %eax,(%esp)
call   80801f0 <inet_addr_match>
test   %eax,%eax
jne    8078089 <do_ipl2tp+0x2939>
lea    0x0(%esi),%esi
mov    0x80964c4,%edx
test   %edx,%edx
je     8078610 <do_ipl2tp+0x2ec0>
xor    %eax,%eax
mov    $0x25,%ecx
lea    0xcc(%esp),%edi
rep stos %eax,%es:(%edi)
mov    0x8094300,%eax
lea    0x5c(%esp),%edi
mov    %ebp,0x8(%esp)
lea    0xcc(%esp),%ebp
mov    %edi,0xc(%esp)
movl   $0x94,0x4(%esp)
mov    %ax,0xd0(%esp)
mov    $0x1,%eax
mov    %ax,0xd2(%esp)
movzbl 0x55(%esp),%eax
mov    %ebp,(%esp)
movl   $0x14,0xcc(%esp)
00
movb   $0x2,0xdc(%esp)
mov    %eax,0x10(%esp)
movb   $0x1,0xdd(%esp)
call   807ea10 <addattr_l>
mov    0x80964c8,%eax
lea    0x3(%eax),%edx
mov    0xcc(%esp),%eax
and    $0xfffffffc,%edx
lea    (%edx,%eax,1),%ecx
cmp    0x80964cc,%ecx
jbe    80781fa <do_ipl2tp+0x2aaa>
call   8077f40 <do_ipl2tp+0x27f0>
mov    %eax,%edx
mov    $0xffffffff,%eax
test   %edx,%edx
jne    807808b <do_ipl2tp+0x293b>
mov    0x80964c8,%eax
lea    0x3(%eax),%edx
mov    0xcc(%esp),%eax
and    $0xfffffffc,%edx
add    0x80964c4,%edx
mov    %eax,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edx,(%esp)
mov    %edx,0x2c(%esp)
call   804b5e0 <memcpy@plt>
mov    0x809433c,%eax
mov    0x2c(%esp),%edx
addl   $0x1,0x80964c0
add    $0x1,%eax
mov    %eax,0x809433c
mov    %eax,0x8(%edx)
add    0xcc(%esp),%edx
sub    0x80964c4,%edx
cmpl   $0x1,0x8095ca4
mov    %edx,0x80964c8
jle    8078089 <do_ipl2tp+0x2939>
testb  $0x6,0x80964d0
jne    807858f <do_ipl2tp+0x2e3f>
movl   $0x100,0x10(%esp)
mov    %ebp,0xc(%esp)
mov    %edi,0x8(%esp)
movzwl (%esi),%eax
sub    $0x4,%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80805b0 <format_host>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   804bb30 <fputs@plt>
mov    0x88(%esp),%eax
test   %eax,%eax
je     80782ff <do_ipl2tp+0x2baf>
mov    0x4(%eax),%esi
mov    0x8(%eax),%edi
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8082670 <ipx_ntop+0x260>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x14(%esp)
mov    %edx,0x18(%esp)
call   8082540 <ipx_ntop+0x130>
movl   $0x808ba1f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
mov    %edx,0x10(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x90(%esp),%eax
test   %eax,%eax
je     807833f <do_ipl2tp+0x2bef>
mov    0x4(%eax),%edx
mov    0x8c(%esp),%eax
test   %eax,%eax
je     80785cd <do_ipl2tp+0x2e7d>
mov    0x4(%eax),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x808ba33,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x94(%esp),%eax
test   %eax,%eax
je     8078418 <do_ipl2tp+0x2cc8>
movzwl (%eax),%edx
add    $0x4,%eax
xor    %edi,%edi
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
movl   $0x5,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
jmp    80783a4 <do_ipl2tp+0x2c54>
nop
imul   $0x3e8,%eax,%eax
shr    $0x2,%eax
mov    %eax,0xc(%esp)
movl   $0x808ba53,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
cmp    $0x5,%esi
je     8078418 <do_ipl2tp+0x2cc8>
mov    %esi,%edi
lea    0x1(%edi),%esi
mov    0x3c(%esp,%esi,4),%ebp
test   %ebp,%ebp
je     807839d <do_ipl2tp+0x2c4d>
mov    0x808bc1c(,%esi,4),%eax
test   %eax,%eax
je     80785e8 <do_ipl2tp+0x2e98>
mov    %eax,0xc(%esp)
movl   $0x808314e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
test   %edi,%edi
mov    0x4(%ebp),%eax
je     80785d8 <do_ipl2tp+0x2e88>
cmp    $0x1,%edi
je     8078378 <do_ipl2tp+0x2c28>
mov    %eax,0xc(%esp)
movl   $0x808ba59,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807839d <do_ipl2tp+0x2c4d>
mov    $0xffffffff,%eax
jmp    807808b <do_ipl2tp+0x293b>
lea    0x0(%esi),%esi
mov    0x98(%esp),%eax
test   %eax,%eax
je     8078443 <do_ipl2tp+0x2cf3>
movzwl 0x4(%eax),%eax
movl   $0x808ba5d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x9c(%esp),%eax
test   %eax,%eax
je     80784df <do_ipl2tp+0x2d8f>
movzwl 0x4(%eax),%ebp
mov    0xa0(%esp),%eax
test   %eax,%eax
je     80785b4 <do_ipl2tp+0x2e64>
mov    0x4(%eax),%esi
mov    0x8(%eax),%edi
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
call   8082670 <ipx_ntop+0x260>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   8082540 <ipx_ntop+0x130>
mov    0x20(%esp),%esi
mov    0x24(%esp),%edi
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    %esi,0x18(%esp)
mov    %edi,0x1c(%esp)
mov    %ebp,0xc(%esp)
movl   $0x808bb70,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xa4(%esp),%esi
test   %esi,%esi
je     8078572 <do_ipl2tp+0x2e22>
movzwl (%esi),%eax
mov    $0x10,%edi
movb   $0x0,0xab(%esp)
sub    $0x4,%eax
cmp    $0x10,%eax
cmovle %eax,%edi
test   %edi,%edi
lea    0xab(%esp),%eax
mov    %eax,0x20(%esp)
jle    8078552 <do_ipl2tp+0x2e02>
mov    %eax,%ebp
add    %esi,%edi
lea    0x0(%esi),%esi
movzbl 0x4(%esi),%eax
add    $0x1,%esi
mov    %ebp,(%esp)
add    $0x2,%ebp
movl   $0x808cd35,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
call   804bbb0 <__sprintf_chk@plt>
cmp    %edi,%esi
jne    8078520 <do_ipl2tp+0x2dd0>
mov    0x20(%esp),%eax
movl   $0x808ba68,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %ebx,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %ebx,(%esp)
call   804b590 <fflush@plt>
jmp    8078089 <do_ipl2tp+0x2939>
mov    %ebx,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082ffa,(%esp)
call   804b710 <fwrite@plt>
jmp    807825c <do_ipl2tp+0x2b0c>
xor    %eax,%eax
xor    %edx,%edx
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
jmp    80784ab <do_ipl2tp+0x2d5b>
xor    %eax,%eax
jmp    807831f <do_ipl2tp+0x2bcf>
lea    0x0(%esi,%eiz,1),%esi
imul   $0x3e8,%eax,%eax
shr    $0x3,%eax
jmp    8078381 <do_ipl2tp+0x2c31>
xchg   %ax,%ax
mov    %edi,0xc(%esp)
movl   $0x808ba47,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80783da <do_ipl2tp+0x2c8a>
lea    0x0(%esi,%eiz,1),%esi
lea    0xcc(%esp),%ebp
lea    0x5c(%esp),%edi
jmp    807824f <do_ipl2tp+0x2aff>
mov    0x84(%esp),%esi
test   %esi,%esi
je     8078089 <do_ipl2tp+0x2939>
movzbl 0x80964d4,%eax
cmp    $0xa,%al
je     8078642 <do_ipl2tp+0x2ef2>
test   %al,%al
jne    8078089 <do_ipl2tp+0x2939>
mov    0x4(%esi),%ecx
mov    $0x2,%ebp
movb   $0x10,0x55(%esp)
movl   $0xa,0x20(%esp)
mov    %ecx,0x5c(%esp)
mov    0x8(%esi),%ecx
mov    %ecx,0x60(%esp)
mov    0xc(%esi),%ecx
mov    %ecx,0x64(%esp)
mov    0x10(%esi),%edx
mov    %edx,0x68(%esp)
jmp    8078102 <do_ipl2tp+0x29b2>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %ecx,%edx
push   %esi
mov    $0x105,%ecx
push   %ebx
mov    $0x80964c0,%ebx
sub    $0x124c,%esp
mov    %eax,0x1c(%esp)
lea    0x28(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x123c(%esp)
xor    %eax,%eax
rep stos %eax,%es:(%edi)
mov    0x8094300,%ecx
mov    %ebx,%edi
mov    $0xffffffff,%ebx
movl   $0x14,0x28(%esp)
movb   $0x1,0x38(%esp)
mov    %cx,0x2c(%esp)
mov    $0x1,%ecx
mov    %cx,0x2e(%esp)
mov    $0xf,%ecx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%ecx
movb   $0x1,0x39(%esp)
mov    %bx,0x80964d6
cmp    $0xa,%ecx
mov    %cl,0x80964d4
ja     8078c21 <do_ipl2tp+0x34d1>
mov    $0x1,%al
shl    %cl,%eax
test   $0x405,%eax
je     8078c21 <do_ipl2tp+0x34d1>
test   %ebp,%ebp
jle    8078c98 <do_ipl2tp+0x3548>
mov    0x1c(%esp),%eax
movl   $0xffffffff,0x18(%esp)
and    $0x2,%eax
mov    %eax,0x14(%esp)
jmp    80787cc <do_ipl2tp+0x307c>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8,%ecx
mov    $0x808b938,%edi
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     80787e2 <do_ipl2tp+0x3092>
mov    %ebx,%eax
mov    %edx,%esi
mov    $0x808b938,%ebx
movl   $0x8082d28,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8078cd0 <do_ipl2tp+0x3580>
cmpw   $0x0,0x80964d6
jns    8078cc2 <do_ipl2tp+0x3572>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    (%esi),%eax
movl   $0x80964d4,(%esp)
mov    %eax,0x4(%esp)
call   807ff20 <get_prefix>
movzbl 0x80964d5,%eax
test   %al,%al
je     80787af <do_ipl2tp+0x305f>
movswl 0x80964d6,%edx
shl    $0x3,%eax
cmp    %edx,%eax
je     80787f8 <do_ipl2tp+0x30a8>
mov    0x14(%esp),%eax
test   %eax,%eax
je     80787c2 <do_ipl2tp+0x3072>
cmpl   $0xffffffff,0x18(%esp)
je     8078985 <do_ipl2tp+0x3235>
sub    $0x2,%ebp
test   %ebp,%ebp
lea    0x8(%esi),%edx
jle    8078820 <do_ipl2tp+0x30d0>
mov    (%edx),%ebx
mov    $0x8086637,%edi
mov    $0x5,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8078738 <do_ipl2tp+0x2fe8>
sub    $0x1,%ebp
lea    0x4(%edx),%esi
je     8078cd5 <do_ipl2tp+0x3585>
mov    0x4(%edx),%eax
jmp    8078755 <do_ipl2tp+0x3005>
xchg   %ax,%ax
movzbl 0x80964d4,%eax
cmp    $0x2,%al
je     8078978 <do_ipl2tp+0x3228>
cmp    $0xa,%al
jne    80787af <do_ipl2tp+0x305f>
sub    $0x2,%ebp
test   %ebp,%ebp
movl   $0x2,0x18(%esp)
lea    0x8(%esi),%edx
jg     80787cc <do_ipl2tp+0x307c>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
shr    $0x1f,%eax
cmpl   $0x2,0x1c(%esp)
sete   %dl
test   %al,%al
jne    8078d0b <do_ipl2tp+0x35bb>
mov    0x18(%esp),%edi
cmpl   $0x4,0x1c(%esp)
sete   %al
test   %edi,%edi
jns    8078968 <do_ipl2tp+0x3218>
test   %al,%al
je     807896c <do_ipl2tp+0x321c>
xor    %ebx,%ebx
cmpw   $0x0,0x80964d6
jle    80789ce <do_ipl2tp+0x327e>
mov    0x8094300,%ecx
test   %ecx,%ecx
js     8078bd2 <do_ipl2tp+0x3482>
mov    0x1c(%esp),%esi
and    $0x4,%esi
jne    80789f8 <do_ipl2tp+0x32a8>
cmpl   $0xffffffff,0x18(%esp)
je     8078b43 <do_ipl2tp+0x33f3>
test   %ebx,%ebx
je     8078893 <do_ipl2tp+0x3143>
orw    $0x4,0x2e(%esp)
mov    0x18(%esp),%edi
cmp    $0xffffffff,%edi
je     80788c7 <do_ipl2tp+0x3177>
movzbl 0x80964d5,%eax
movl   $0x80964dc,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %eax,0x10(%esp)
lea    0x28(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
mov    0x1c(%esp),%eax
test   %ebx,%ebx
mov    %eax,0x80964d0
jne    8078b66 <do_ipl2tp+0x3416>
cmpl   $0xffffffff,0x18(%esp)
je     8078c32 <do_ipl2tp+0x34e2>
lea    0x28(%esp),%eax
mov    %eax,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x8094320,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     8078b9a <do_ipl2tp+0x344a>
mov    0x8095c80,%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x4(%esp)
call   8078040 <do_ipl2tp+0x28f0>
test   %eax,%eax
jns    80789ad <do_ipl2tp+0x325d>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
test   %al,%al
jne    80789dc <do_ipl2tp+0x328c>
test   %dl,%dl
jne    80789dc <do_ipl2tp+0x328c>
xor    %ebx,%ebx
jmp    8078863 <do_ipl2tp+0x3113>
nop
movl   $0x1,0x18(%esp)
jmp    80787c2 <do_ipl2tp+0x3072>
mov    (%esi),%eax
movl   $0x808bb94,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    $0xffffffff,%esi
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x123c(%esp),%edi
xor    %gs:0x14,%edi
mov    %esi,%eax
jne    8078d1f <do_ipl2tp+0x35cf>
add    $0x124c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8095ca8,%esi
test   %esi,%esi
jne    8078863 <do_ipl2tp+0x3113>
movb   $0x2,0x38(%esp)
mov    $0x1,%ebx
movl   $0x2,0x1c(%esp)
jmp    8078863 <do_ipl2tp+0x3113>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
xor    %ebx,%ebx
orw    $0x300,0x2e(%esp)
movl   $0x0,0x80964c8
00
mov    %eax,0x80964d0
lea    0x43c(%esp),%eax
mov    %eax,0x80964c4
movl   $0xe00,0x80964cc
00
lea    0x0(%esi),%esi
mov    0x809433c,%eax
movl   $0x8094320,(%esp)
add    $0x1,%eax
mov    %eax,0x809433c
mov    %eax,0x8094340
mov    %eax,0x30(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x4(%esp)
call   807da20 <rtnl_send>
test   %eax,%eax
js     8078caa <do_ipl2tp+0x355a>
mov    0x8095c80,%eax
movl   $0x8078040,0x4(%esp)
movl   $0x8094320,(%esp)
movl   $0x0,0x80964c0
00
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     8078cda <do_ipl2tp+0x358a>
mov    0x80964c0,%esi
test   %esi,%esi
je     8078af3 <do_ipl2tp+0x33a3>
call   8077f40 <do_ipl2tp+0x27f0>
add    $0x1,%ebx
test   %eax,%eax
js     8078cb6 <do_ipl2tp+0x3566>
mov    0x8095ca4,%eax
test   %eax,%eax
je     8078a30 <do_ipl2tp+0x32e0>
mov    0x80964c0,%eax
mov    %ebx,0x8(%esp)
movl   $0x8084c98,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
jmp    8078a30 <do_ipl2tp+0x32e0>
test   %ebx,%ebx
je     8078ba8 <do_ipl2tp+0x3458>
mov    0x8095ca4,%edx
test   %edx,%edx
je     8078b31 <do_ipl2tp+0x33e1>
mov    $0x8089003,%eax
cmp    $0x1,%ebx
mov    $0x808a29b,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
mov    %ebx,0x8(%esp)
movl   $0x80837f4,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x8095c80,%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
jmp    80789ad <do_ipl2tp+0x325d>
testb  $0x2,0x1c(%esp)
jne    8078889 <do_ipl2tp+0x3139>
mov    0x1c(%esp),%eax
orw    $0x300,0x2e(%esp)
test   %ebx,%ebx
mov    %eax,0x80964d0
je     8078c32 <do_ipl2tp+0x34e2>
lea    0x28(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x8094320,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
jns    80789ad <do_ipl2tp+0x325d>
mov    $0xfffffffe,%esi
jmp    80789ad <do_ipl2tp+0x325d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8095c40,%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808ba76,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    8078b31 <do_ipl2tp+0x33e1>
movl   $0x10,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x8094320,(%esp)
call   807d6a0 <rtnl_open_byproto>
test   %eax,%eax
js     8078d3c <do_ipl2tp+0x35ec>
movl   $0x8082d88,0x4(%esp)
movl   $0x8094320,(%esp)
call   807cee0 <genl_resolve_family>
test   %eax,%eax
mov    %eax,0x8094300
js     8078cb6 <do_ipl2tp+0x3566>
mov    %ax,0x2c(%esp)
jmp    8078871 <do_ipl2tp+0x3121>
mov    %ecx,0xc(%esp)
movl   $0x8085d64,0x8(%esp)
jmp    8078993 <do_ipl2tp+0x3243>
mov    0x809433c,%eax
movl   $0x8094320,(%esp)
add    $0x1,%eax
mov    %eax,0x809433c
mov    %eax,0x8094340
mov    %eax,0x30(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x4(%esp)
call   807da20 <rtnl_send>
test   %eax,%eax
js     8078d24 <do_ipl2tp+0x35d4>
mov    0x8095c80,%eax
movl   $0x8078040,0x4(%esp)
movl   $0x8094320,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
jns    80789ad <do_ipl2tp+0x325d>
jmp    8078934 <do_ipl2tp+0x31e4>
xchg   %ax,%ax
mov    $0x1,%eax
movl   $0xffffffff,0x18(%esp)
jmp    8078827 <do_ipl2tp+0x30d7>
movl   $0x8082e9f,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    (%esi),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8080150 <duparg2>
call   8077f90 <do_ipl2tp+0x2840>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8082f0b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
test   %dl,%dl
je     8078837 <do_ipl2tp+0x30e7>
movl   $0x808b938,(%esp)
call   8080060 <missarg>
call   804b660 <__stack_chk_fail@plt>
movl   $0x808ba89,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808b5cc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %edi
xor    %ecx,%ecx
push   %esi
xor    %edx,%edx
push   %ebx
xor    %ebx,%ebx
sub    $0x10,%esp
mov    $0x1,%eax
mov    0x20(%esp),%esi
mov    0x24(%esp),%edi
test   %esi,%esi
jle    8078e0d <do_tcp_metrics+0x9d>
mov    0x808bc40(,%ebx,8),%eax
mov    %eax,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8078e00 <do_tcp_metrics+0x90>
add    $0x1,%ebx
cmp    $0x6,%ebx
jne    8078d91 <do_tcp_metrics+0x21>
movl   $0x8082d28,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8078dd0 <do_tcp_metrics+0x60>
call   8077f90 <do_ipl2tp+0x2840>
lea    0x0(%esi),%esi
mov    (%edi),%eax
movl   $0x808bbd0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
nop
mov    0x808bc44(,%ebx,8),%eax
lea    0x4(%edi),%ecx
lea    -0x1(%esi),%edx
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8078680 <do_ipl2tp+0x2f30>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%ebx
mov    0x24(%esp),%esi
test   %ebx,%ebx
je     8078edd <do_tcp_metrics+0x16d>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     8078edd <do_tcp_metrics+0x16d>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x1,%edx
jbe    8078edd <do_tcp_metrics+0x16d>
movzwl 0x4(%eax),%eax
movl   $0x808bc79,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     8078edd <do_tcp_metrics+0x16d>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x1,%edx
jbe    8078edd <do_tcp_metrics+0x16d>
movzwl 0x4(%eax),%edx
mov    $0x808bc70,%eax
test   %dx,%dx
jne    8078ee8 <do_tcp_metrics+0x178>
mov    %eax,0xc(%esp)
movl   $0x808bc86,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0xc(%ebx),%eax
test   %eax,%eax
je     8078edd <do_tcp_metrics+0x16d>
movzwl (%eax),%edx
sub    $0x4,%edx
cmp    $0x1,%edx
jbe    8078edd <do_tcp_metrics+0x16d>
movzwl 0x4(%eax),%eax
movl   $0x808bc90,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%dx
mov    $0x80841e4,%eax
mov    $0x8086ac2,%edx
cmovne %edx,%eax
jmp    8078e8f <do_tcp_metrics+0x11f>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%ebx
test   %ebx,%ebx
jle    80790b0 <do_tcp_metrics+0x340>
mov    0x54(%esp),%eax
lea    -0x1(%eax),%ebp
mov    0x58(%esp),%eax
lea    0x4(%eax),%ebx
jmp    8078f91 <do_tcp_metrics+0x221>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
je     807914d <do_tcp_metrics+0x3dd>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
lea    0x2a(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    8079152 <do_tcp_metrics+0x3e2>
mov    0x5c(%esp),%eax
movl   $0x2,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
subl   $0x2,0x54(%esp)
sub    $0x2,%ebp
mov    0x54(%esp),%eax
add    $0x8,%ebx
test   %eax,%eax
jle    80790b0 <do_tcp_metrics+0x340>
movl   $0x808bc9e,0x4(%esp)
mov    -0x4(%ebx),%eax
lea    -0x4(%ebx),%edi
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8078f28 <do_tcp_metrics+0x1b8>
movl   $0x8085ebc,0x4(%esp)
mov    -0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8079038 <do_tcp_metrics+0x2c8>
test   %ebp,%ebp
je     807914d <do_tcp_metrics+0x3dd>
mov    (%ebx),%eax
mov    $0x808bc70,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8079018 <do_tcp_metrics+0x2a8>
xor    %ecx,%ecx
mov    %cx,0x2c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x5c(%esp),%eax
movl   $0x2,0x10(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    8078f7a <do_tcp_metrics+0x20a>
mov    $0x80841e4,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    80790ba <do_tcp_metrics+0x34a>
mov    $0x1,%edx
mov    %dx,0x2c(%esp)
jmp    8078fe7 <do_tcp_metrics+0x277>
movl   $0x808bcb3,0x4(%esp)
mov    -0x4(%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80790e6 <do_tcp_metrics+0x376>
test   %ebp,%ebp
je     807914d <do_tcp_metrics+0x3dd>
movl   $0x0,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x2e(%esp),%eax
mov    %eax,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    8079165 <do_tcp_metrics+0x3f5>
lea    0x2e(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x5c(%esp),%eax
movl   $0x2,0x10(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,(%esp)
call   807ea10 <addattr_l>
jmp    8078f7a <do_tcp_metrics+0x20a>
xchg   %ax,%ax
xor    %eax,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bcf0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    80790b2 <do_tcp_metrics+0x342>
movl   $0x8082d28,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8079128 <do_tcp_metrics+0x3b8>
mov    0x8095c40,%eax
movl   $0x61,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bd2c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    80790b2 <do_tcp_metrics+0x342>
mov    (%edi),%eax
movl   $0x808bccc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    80790fc <do_tcp_metrics+0x38c>
call   8080010 <incomplete_command>
mov    0x4(%edi),%eax
movl   $0x808bca3,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%edi),%eax
movl   $0x808bcba,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x40,%esp
mov    0x54(%esp),%ebx
mov    0x58(%esp),%esi
movzwl 0x4(%ebx),%eax
mov    (%ebx),%edx
cmp    $0x2,%ax
je     8079480 <print_netconf+0x300>
cmp    $0x50,%ax
jne    8079448 <print_netconf+0x2c8>
sub    $0x14,%edx
js     807948a <print_netconf+0x30a>
mov    0x80964fc,%ecx
test   %ecx,%ecx
je     80791d0 <print_netconf+0x50>
movzbl 0x10(%ebx),%edi
xor    %eax,%eax
cmp    %edi,%ecx
je     80791d0 <print_netconf+0x50>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%ebx),%eax
mov    %eax,0x8(%esp)
lea    0x2c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x4,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
movzbl 0x10(%ebx),%eax
cmp    $0x2,%al
je     8079350 <print_netconf+0x1d0>
cmp    $0xa,%al
je     8079328 <print_netconf+0x1a8>
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bd9a,(%esp)
call   804b710 <fwrite@plt>
mov    0x30(%esp),%eax
test   %eax,%eax
je     8079260 <print_netconf+0xe0>
mov    0x4(%eax),%eax
cmp    $0xfffffffe,%eax
je     80793a8 <print_netconf+0x228>
cmp    $0xffffffff,%eax
jne    8079378 <print_netconf+0x1f8>
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8084d62,(%esp)
call   804b710 <fwrite@plt>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8079296 <print_netconf+0x116>
mov    0x4(%edx),%edx
mov    $0x80831cf,%eax
movl   $0x808bda3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
test   %edx,%edx
mov    $0x80831e3,%edx
cmove  %edx,%eax
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x38(%esp),%eax
test   %eax,%eax
je     80792db <print_netconf+0x15b>
mov    0x4(%eax),%eax
mov    %esi,0xc(%esp)
test   %eax,%eax
je     80793d0 <print_netconf+0x250>
cmp    $0x1,%eax
je     8079420 <print_netconf+0x2a0>
cmp    $0x2,%eax
je     80793f8 <print_netconf+0x278>
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bde4,(%esp)
call   804b710 <fwrite@plt>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8079302 <print_netconf+0x182>
mov    0x4(%eax),%eax
movl   $0x808bdfc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
call   804ba50 <fputc@plt>
mov    %esi,(%esp)
call   804b590 <fflush@plt>
add    $0x40,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bd94,(%esp)
call   804b710 <fwrite@plt>
jmp    8079223 <print_netconf+0xa3>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bd8e,(%esp)
call   804b710 <fwrite@plt>
jmp    8079223 <print_netconf+0xa3>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   807d420 <ll_index_to_name>
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8079260 <print_netconf+0xe0>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8083f98,(%esp)
call   804b710 <fwrite@plt>
jmp    8079260 <print_netconf+0xe0>
lea    0x0(%esi),%esi
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bdb2,(%esp)
call   804b710 <fwrite@plt>
jmp    80792db <print_netconf+0x15b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bdd3,(%esp)
call   804b710 <fwrite@plt>
jmp    80792db <print_netconf+0x15b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x11,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bdc1,(%esp)
call   804b710 <fwrite@plt>
jmp    80792db <print_netconf+0x15b>
lea    0x0(%esi,%eiz,1),%esi
movzwl 0x6(%ebx),%ecx
mov    %eax,0x10(%esp)
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x808be10,0x8(%esp)
mov    %ecx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80791c5 <print_netconf+0x45>
nop
mov    $0xffffffff,%eax
jmp    80791c5 <print_netconf+0x45>
mov    0x8095c40,%eax
mov    %edx,0xc(%esp)
movl   $0x8083222,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    80791c5 <print_netconf+0x45>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x440,%esp
mov    0x8095ca8,%edx
mov    %gs:0x14,%eax
mov    %eax,0x43c(%esp)
xor    %eax,%eax
movl   $0x0,0x8096500
00
test   %edx,%edx
mov    $0x2,%al
cmovne %edx,%eax
test   %ebx,%ebx
mov    %eax,0x80964fc
jle    8079549 <print_netconf+0x3c9>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esi),%eax
cmpb   $0x64,(%eax)
jne    807953f <print_netconf+0x3bf>
cmpb   $0x65,0x1(%eax)
jne    807953f <print_netconf+0x3bf>
cmpb   $0x76,0x2(%eax)
jne    807953f <print_netconf+0x3bf>
cmpb   $0x0,0x3(%eax)
jne    807953f <print_netconf+0x3bf>
sub    $0x1,%ebx
lea    0x4(%esi),%edi
je     80796ff <print_netconf+0x57f>
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   807d4e0 <ll_name_to_index>
test   %eax,%eax
mov    %eax,0x8096500
jle    8079688 <print_netconf+0x508>
mov    %edi,%esi
sub    $0x1,%ebx
add    $0x4,%esi
test   %ebx,%ebx
jg     8079500 <print_netconf+0x380>
movl   $0x80941e0,(%esp)
call   807d5a0 <ll_init_map>
mov    0x8096500,%ebx
mov    0x80964fc,%edx
test   %ebx,%ebx
je     8079639 <print_netconf+0x4b9>
lea    0x28(%esp),%ebx
xor    %eax,%eax
mov    %ebx,%edi
mov    $0x105,%ecx
rep stos %eax,%es:(%edi)
mov    0x80964fc,%eax
mov    $0x5,%edx
mov    $0x52,%ecx
mov    %ebx,(%esp)
movl   $0x4,0x10(%esp)
movl   $0x8096500,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %dx,0x2e(%esp)
mov    %cx,0x2c(%esp)
movl   $0x11,0x28(%esp)
mov    %al,0x38(%esp)
call   807ea10 <addattr_l>
mov    0x28(%esp),%eax
mov    %ebx,0x4(%esp)
xor    %ebx,%ebx
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807da20 <rtnl_send>
mov    0x8095c80,%eax
movl   $0x8079180,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e530 <rtnl_listen>
lea    0x0(%esi,%eiz,1),%esi
mov    0x43c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8079704 <print_netconf+0x584>
add    $0x440,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0xa,0x8095ca8
00
mov    $0xa,%edx
movl   $0xa,0x80964fc
00
movl   $0x52,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     80796b6 <print_netconf+0x536>
mov    0x8095c80,%eax
movl   $0x8079180,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x8(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     80796ce <print_netconf+0x54e>
mov    0x8095ca8,%eax
test   %eax,%eax
je     8079620 <print_netconf+0x4a0>
nop
jmp    8079600 <print_netconf+0x480>
lea    0x0(%esi),%esi
mov    0x4(%esi),%eax
mov    $0xffffffff,%ebx
movl   $0x80833c7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8079600 <print_netconf+0x480>
movl   $0x8082ef2,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80833f5,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
call   8080010 <incomplete_command>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
test   %esi,%esi
jle    80797c8 <do_ipnetconf+0xb8>
movl   $0x8083425,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8079751 <do_ipnetconf+0x41>
movl   $0x808342a,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8079768 <do_ipnetconf+0x58>
add    $0x14,%esp
lea    0x4(%ebx),%edx
lea    -0x1(%esi),%eax
pop    %ebx
pop    %esi
jmp    80794c0 <print_netconf+0x340>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8083420,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     8079751 <do_ipnetconf+0x41>
movl   $0x8082d28,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    80797d8 <do_ipnetconf+0xc8>
mov    0x8095c40,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808be34,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
add    $0x14,%esp
xor    %edx,%edx
pop    %ebx
xor    %eax,%eax
pop    %esi
jmp    80794c0 <print_netconf+0x340>
xchg   %ax,%ax
mov    (%ebx),%eax
movl   $0x808be5c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8095c40,%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x18c,%esp
mov    0x1a8(%esp),%ebp
mov    %gs:0x14,%eax
mov    %eax,0x17c(%esp)
xor    %eax,%eax
mov    0x1a4(%esp),%ebx
test   %ebp,%ebp
je     8079a7c <do_ipnetconf+0x36c>
mov    0x20(%ebp),%eax
test   %eax,%eax
je     8079c20 <do_ipnetconf+0x510>
mov    0x4(%eax),%eax
mov    %eax,%edx
mov    %eax,%edi
and    $0x1,%edx
and    $0x2,%edi
mov    %eax,%esi
mov    %edx,0x14(%esp)
mov    %eax,%edx
and    $0x10,%esi
mov    %edi,0x18(%esp)
mov    %eax,%edi
and    $0x4,%edx
and    $0x8,%edi
and    $0x20,%eax
mov    %edx,0x1c(%esp)
mov    %esi,0x20(%esp)
mov    %edi,0x24(%esp)
mov    %eax,0x28(%esp)
mov    0x1c(%ebp),%eax
test   %eax,%eax
je     8079c10 <do_ipnetconf+0x500>
mov    0x4(%eax),%esi
mov    %esi,%edi
bswap  %edi
mov    0x24(%ebp),%eax
test   %eax,%eax
je     80798b6 <do_ipnetconf+0x1a6>
movzbl 0x4(%eax),%eax
cmp    $0x4,%al
je     8079be8 <do_ipnetconf+0x4d8>
cmp    $0x29,%al
je     8079b98 <do_ipnetconf+0x488>
test   %al,%al
je     8079bc0 <do_ipnetconf+0x4b0>
mov    0xc(%ebp),%eax
test   %eax,%eax
je     8079906 <do_ipnetconf+0x1f6>
lea    0x7c(%esp),%ecx
mov    %ecx,0xc(%esp)
lea    0x4(%eax),%ecx
movl   $0x100,0x10(%esp)
mov    %ecx,0x8(%esp)
movzwl (%eax),%eax
movl   $0xa,(%esp)
sub    $0x4,%eax
mov    %eax,0x4(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebp),%eax
test   %eax,%eax
je     8079956 <do_ipnetconf+0x246>
lea    0x7c(%esp),%ecx
mov    %ecx,0xc(%esp)
lea    0x4(%eax),%ecx
movl   $0x100,0x10(%esp)
mov    %ecx,0x8(%esp)
movzwl (%eax),%eax
movl   $0xa,(%esp)
sub    $0x4,%eax
mov    %eax,0x4(%esp)
call   8080470 <rt_addr_n2a>
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebp),%eax
test   %eax,%eax
je     8079968 <do_ipnetconf+0x258>
mov    0x4(%eax),%ecx
test   %ecx,%ecx
jne    8079b50 <do_ipnetconf+0x440>
mov    0x14(%esp),%eax
test   %eax,%eax
jne    8079b30 <do_ipnetconf+0x420>
mov    0x18(%ebp),%eax
test   %eax,%eax
je     807999b <do_ipnetconf+0x28b>
movzbl 0x4(%eax),%eax
movl   $0x808beb2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x10(%ebp),%eax
test   %eax,%eax
je     80799c2 <do_ipnetconf+0x2b2>
movzbl 0x4(%eax),%eax
movl   $0x808bec1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esp),%eax
test   %eax,%eax
jne    8079b08 <do_ipnetconf+0x3f8>
mov    0x1c(%ebp),%eax
test   %eax,%eax
je     80799fc <do_ipnetconf+0x2ec>
mov    %esi,%eax
and    $0xf00f,%eax
bswap  %eax
shr    $0x14,%eax
movzbl %al,%eax
mov    %eax,0x8(%esp)
movl   $0x808bede,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x1c(%esp),%ebp
test   %ebp,%ebp
jne    8079aa0 <do_ipnetconf+0x390>
and    $0xffff0f00,%esi
bswap  %esi
movl   $0x808bf00,0x4(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    %edi,0x8(%esp)
movl   $0x808bf12,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x20(%esp),%ecx
test   %ecx,%ecx
jne    8079ae8 <do_ipnetconf+0x3d8>
mov    0x24(%esp),%edx
test   %edx,%edx
jne    8079ac0 <do_ipnetconf+0x3b0>
mov    0x28(%esp),%eax
test   %eax,%eax
je     8079a7c <do_ipnetconf+0x36c>
mov    %ebx,0xc(%esp)
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf39,(%esp)
call   804b710 <fwrite@plt>
mov    0x17c(%esp),%eax
xor    %gs:0x14,%eax
jne    8079c79 <do_ipnetconf+0x569>
add    $0x18c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808beed,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8079a28 <do_ipnetconf+0x318>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf33,(%esp)
call   804b710 <fwrite@plt>
jmp    8079a54 <do_ipnetconf+0x344>
lea    0x0(%esi),%esi
movl   $0x808bf25,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    8079a4c <do_ipnetconf+0x33c>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x808bece,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x1c(%esp),%ebp
test   %ebp,%ebp
je     8079a08 <do_ipnetconf+0x2f8>
jmp    8079aa0 <do_ipnetconf+0x390>
lea    0x0(%esi),%esi
movl   $0x808bea1,0x4(%esp)
movl   $0x1,(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    807999b <do_ipnetconf+0x28b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x3c(%esp),%eax
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,0x2c(%esp)
call   804b950 <if_indextoname@plt>
mov    0x2c(%esp),%ecx
test   %eax,%eax
je     8079c58 <do_ipnetconf+0x548>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8079968 <do_ipnetconf+0x258>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808be94,(%esp)
call   804b710 <fwrite@plt>
jmp    80798b6 <do_ipnetconf+0x1a6>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808be9c,(%esp)
call   804b710 <fwrite@plt>
jmp    80798b6 <do_ipnetconf+0x1a6>
lea    0x0(%esi),%esi
mov    %ebx,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808be8d,(%esp)
call   804b710 <fwrite@plt>
jmp    80798b6 <do_ipnetconf+0x1a6>
lea    0x0(%esi),%esi
xor    %edi,%edi
xor    %esi,%esi
jmp    8079893 <do_ipnetconf+0x183>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x28(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x14(%esp)
jmp    8079881 <do_ipnetconf+0x171>
lea    0x0(%esi),%esi
mov    %ecx,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    8079968 <do_ipnetconf+0x258>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x98c,%esp
mov    0x9ac(%esp),%eax
mov    %gs:0x14,%edi
mov    %edi,0x97c(%esp)
xor    %edi,%edi
mov    0x9a4(%esp),%ebp
mov    0x9a8(%esp),%ebx
movl   $0x0,0x13c(%esp)
00
testb  $0x4,0x7(%eax)
mov    %eax,0x24(%esp)
movl   $0x0,0x140(%esp)
00
movl   $0x0,0x144(%esp)
00
movl   $0x0,0x148(%esp)
00
movl   $0x0,0x14c(%esp)
00
movl   $0x0,0x150(%esp)
00
movl   $0x0,0x154(%esp)
00
movl   $0x0,0x158(%esp)
00
je     807a1a2 <do_ipnetconf+0xa92>
movb   $0x0,0x2d(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x28(%esp)
movb   $0x4,0x2f(%esp)
movb   $0x40,0x2e(%esp)
test   %ebp,%ebp
jle    8079e02 <do_ipnetconf+0x6f2>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8085ebc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    8079f40 <do_ipnetconf+0x830>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x8086427,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8079fb8 <do_ipnetconf+0x8a8>
mov    $0x8086431,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8079fb8 <do_ipnetconf+0x8a8>
mov    $0x8086438,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8079de8 <do_ipnetconf+0x6d8>
mov    $0x8086440,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8079de8 <do_ipnetconf+0x6d8>
mov    $0x808644a,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     8079de8 <do_ipnetconf+0x6d8>
mov    $0x8086450,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a161 <do_ipnetconf+0xa51>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x4,0x2d(%esp)
lea    0x0(%esi),%esi
mov    0x18(%esp),%ebx
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jg     8079d48 <do_ipnetconf+0x638>
mov    0x24(%esp),%esi
movzbl 0x2d(%esp),%eax
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
lea    0x13c(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
lea    0x14c(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
movzbl 0x2e(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x2f(%esp),%eax
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
mov    0x28(%esp),%eax
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x20(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x1c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
xor    %eax,%eax
mov    0x97c(%esp),%edx
xor    %gs:0x14,%edx
jne    807a5ee <do_ipnetconf+0xede>
add    $0x98c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%ebx),%eax
mov    $0x8082f3c,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    8079fc8 <do_ipnetconf+0x8b8>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x4c(%esp)
je     807a5c8 <do_ipnetconf+0xeb8>
movzbl 0x4d(%esp),%eax
movl   $0x10,0xc(%esp)
mov    %eax,0x8(%esp)
lea    0x54(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x14c(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
jmp    8079df0 <do_ipnetconf+0x6e0>
xchg   %ax,%ax
movb   $0x29,0x2d(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
lea    0x0(%esi),%esi
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a040 <do_ipnetconf+0x930>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x4c(%esp)
je     807a5b5 <do_ipnetconf+0xea5>
movzbl 0x4d(%esp),%eax
movl   $0x10,0xc(%esp)
mov    %eax,0x8(%esp)
lea    0x54(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x13c(%esp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
jmp    8079df0 <do_ipnetconf+0x6e0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8085e82,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807a090 <do_ipnetconf+0x980>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
jne    8079df0 <do_ipnetconf+0x6e0>
mov    0x4(%ebx),%eax
movl   $0x808bf63,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
mov    (%ebx),%eax
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807a0c0 <do_ipnetconf+0x9b0>
cmpb   $0x74,(%eax)
jne    807a108 <do_ipnetconf+0x9f8>
cmpb   $0x74,0x1(%eax)
jne    807a108 <do_ipnetconf+0x9f8>
cmpb   $0x6c,0x2(%eax)
jne    807a108 <do_ipnetconf+0x9f8>
cmpb   $0x0,0x3(%eax)
jne    807a108 <do_ipnetconf+0x9f8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    807a5db <do_ipnetconf+0xecb>
movzbl 0x4c(%esp),%eax
mov    %al,0x2e(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8086488,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807a0c0 <do_ipnetconf+0x9b0>
movl   $0x8086470,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807a3b6 <do_ipnetconf+0xca6>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x8086369,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a4bb <do_ipnetconf+0xdab>
orl    $0x1,0x20(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    $0x8086467,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807a198 <do_ipnetconf+0xa88>
cmpb   $0x61,(%eax)
jne    807a3a6 <do_ipnetconf+0xc96>
cmpb   $0x6e,0x1(%eax)
jne    807a3a6 <do_ipnetconf+0xc96>
cmpb   $0x79,0x2(%eax)
jne    807a3a6 <do_ipnetconf+0xc96>
cmpb   $0x0,0x3(%eax)
jne    807a3a6 <do_ipnetconf+0xc96>
movb   $0x0,0x2d(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
lea    0x15c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x208,%ecx
rep stos %eax,%es:(%edi)
mov    $0x1,%eax
mov    $0x12,%ecx
mov    %ax,0x162(%esp)
mov    0x8095ca8,%eax
movl   $0x20,0x15c(%esp)
00
mov    %cx,0x160(%esp)
mov    %al,0x16c(%esp)
mov    0x24(%esp),%eax
mov    0x14(%eax),%eax
mov    %edx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x170(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     807a571 <do_ipnetconf+0xe61>
mov    0x15c(%esp),%eax
sub    $0x20,%eax
js     807a571 <do_ipnetconf+0xe61>
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0xb0(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0xf8(%esp),%eax
test   %eax,%eax
je     807a571 <do_ipnetconf+0xe61>
movzwl (%eax),%ecx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%ecx
mov    %ecx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x44(%esp),%eax
test   %eax,%eax
je     807a571 <do_ipnetconf+0xe61>
movzwl (%eax),%ecx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x74(%esp),%eax
movl   $0xe,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%ecx
mov    %ecx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x7c(%esp),%eax
test   %eax,%eax
je     807a2ea <do_ipnetconf+0xbda>
mov    0x4(%eax),%ecx
mov    %ecx,0x13c(%esp)
mov    0x8(%eax),%ecx
mov    %ecx,0x140(%esp)
mov    0xc(%eax),%ecx
mov    %ecx,0x144(%esp)
mov    0x10(%eax),%eax
mov    %eax,0x148(%esp)
mov    0x80(%esp),%eax
test   %eax,%eax
je     807a31d <do_ipnetconf+0xc0d>
mov    0x4(%eax),%ecx
mov    %ecx,0x14c(%esp)
mov    0x8(%eax),%ecx
mov    %ecx,0x150(%esp)
mov    0xc(%eax),%ecx
mov    %ecx,0x154(%esp)
mov    0x10(%eax),%eax
mov    %eax,0x158(%esp)
mov    0x84(%esp),%eax
test   %eax,%eax
je     807a4f9 <do_ipnetconf+0xde9>
movzbl 0x4(%eax),%eax
mov    %al,0x2e(%esp)
mov    0x8c(%esp),%eax
test   %eax,%eax
je     807a503 <do_ipnetconf+0xdf3>
movzbl 0x4(%eax),%eax
mov    %al,0x2f(%esp)
mov    0x90(%esp),%eax
test   %eax,%eax
je     807a50d <do_ipnetconf+0xdfd>
mov    0x4(%eax),%eax
mov    %eax,0x28(%esp)
mov    0x94(%esp),%eax
test   %eax,%eax
je     807a51a <do_ipnetconf+0xe0a>
mov    0x4(%eax),%eax
mov    %eax,0x20(%esp)
mov    0x78(%esp),%eax
test   %eax,%eax
je     807a527 <do_ipnetconf+0xe17>
mov    0x4(%eax),%eax
mov    %eax,0x1c(%esp)
mov    0x98(%esp),%eax
test   %eax,%eax
je     807a4ef <do_ipnetconf+0xddf>
movzbl 0x4(%eax),%eax
mov    %al,0x2d(%esp)
jmp    8079d3c <do_ipnetconf+0x62c>
mov    %eax,0x4(%esp)
movl   $0x808bf49,(%esp)
call   80800b0 <invarg>
mov    (%ebx),%eax
mov    $0x8085f37,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807a482 <do_ipnetconf+0xd72>
cmpb   $0x74,(%eax)
je     807a458 <do_ipnetconf+0xd48>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807a482 <do_ipnetconf+0xd72>
mov    (%ebx),%eax
mov    $0x80864a8,%edi
mov    $0xa,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807a41c <do_ipnetconf+0xd0c>
cmpb   $0x66,(%eax)
jne    807a5f3 <do_ipnetconf+0xee3>
cmpb   $0x6c,0x1(%eax)
jne    807a5f3 <do_ipnetconf+0xee3>
cmpb   $0x0,0x2(%eax)
jne    807a5f3 <do_ipnetconf+0xee3>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
andl   $0xf0ff,0x28(%esp)
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a690 <do_ipnetconf+0xf80>
orl    $0x4,0x20(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
lea    0x0(%esi),%esi
movzbl 0x1(%eax),%edx
cmp    $0x63,%dl
je     807a5a5 <do_ipnetconf+0xe95>
cmp    $0x6f,%dl
jne    807a3d5 <do_ipnetconf+0xcc5>
cmpb   $0x73,0x2(%eax)
jne    807a3d5 <do_ipnetconf+0xcc5>
cmpb   $0x0,0x3(%eax)
jne    807a3d5 <do_ipnetconf+0xcc5>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
andl   $0xffff0ff0,0x28(%esp)
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a534 <do_ipnetconf+0xe24>
orl    $0x2,0x20(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   807f790 <get_u8>
cmp    $0xffffffff,%eax
jl     807a62c <do_ipnetconf+0xf1c>
movzbl 0x4c(%esp),%eax
andl   $0xfffffffe,0x20(%esp)
mov    %al,0x2f(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
movb   $0x0,0x2d(%esp)
jmp    8079d3c <do_ipnetconf+0x62c>
movb   $0x40,0x2e(%esp)
jmp    807a334 <do_ipnetconf+0xc24>
movb   $0x4,0x2f(%esp)
jmp    807a34b <do_ipnetconf+0xc3b>
movl   $0x0,0x28(%esp)
jmp    807a361 <do_ipnetconf+0xc51>
movl   $0x0,0x20(%esp)
jmp    807a377 <do_ipnetconf+0xc67>
movl   $0x0,0x1c(%esp)
jmp    807a38a <do_ipnetconf+0xc7a>
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    807a6d4 <do_ipnetconf+0xfc4>
movzbl 0x4c(%esp),%eax
andl   $0xfffffffd,0x20(%esp)
shl    $0x14,%eax
bswap  %eax
and    $0xf00f,%eax
or     %eax,0x28(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    8079f21 <do_ipnetconf+0x811>
call   8080010 <incomplete_command>
cmpb   $0x0,0x2(%eax)
je     807a482 <do_ipnetconf+0xd72>
nop
jmp    807a3d5 <do_ipnetconf+0xcc5>
mov    0x4(%ebx),%eax
movl   $0x80862c8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80862a0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x808bf74,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
call   804b660 <__stack_chk_fail@plt>
mov    $0x8088c6f,%edi
mov    $0x5,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a64f <do_ipnetconf+0xf3f>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a63f <do_ipnetconf+0xf2f>
orl    $0x10,0x20(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    0x4(%ebx),%eax
movl   $0x808647b,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    %eax,0x4(%esp)
movl   $0x80864c4,(%esp)
call   80800b0 <invarg>
mov    $0x8084e9a,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a6e7 <do_ipnetconf+0xfd7>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x18(%esp)
je     807a5a0 <do_ipnetconf+0xe90>
mov    0x4(%ebx),%eax
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807a63f <do_ipnetconf+0xf2f>
orl    $0x20,0x20(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    %eax,0x4(%esp)
lea    0x4c(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    807a8c4 <do_ipnetconf+0x11b4>
mov    0x4c(%esp),%eax
cmp    $0xfffff,%eax
ja     807a8c4 <do_ipnetconf+0x11b4>
bswap  %eax
andl   $0xfffffffb,0x20(%esp)
and    $0xffff0f00,%eax
or     %eax,0x28(%esp)
jmp    8079df0 <do_ipnetconf+0x6e0>
mov    0x4(%ebx),%eax
movl   $0x8086499,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf88,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x35,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bfb8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bff0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x46,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c020,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c068,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808640b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808618c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4,0xc(%esp)
movl   $0x80861b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x40,0xc(%esp)
movl   $0x808c098,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086210,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086240,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x4(%ebx),%eax
movl   $0x80864b2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x47c,%esp
mov    0x498(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x46c(%esp)
xor    %eax,%eax
mov    0x494(%esp),%esi
test   %ebx,%ebx
je     807aa2f <do_ipnetconf+0x131f>
mov    0xc(%ebx),%eax
test   %eax,%eax
je     807aca8 <do_ipnetconf+0x1598>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    807ac38 <do_ipnetconf+0x1528>
mov    %eax,0xc(%esp)
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     807ac98 <do_ipnetconf+0x1588>
mov    0x4(%eax),%edx
mov    $0x8088b92,%eax
test   %edx,%edx
mov    %edx,0x28(%esp)
jne    807ac00 <do_ipnetconf+0x14f0>
mov    %eax,0xc(%esp)
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     807a997 <do_ipnetconf+0x1287>
mov    0x4(%eax),%edi
test   %edi,%edi
jne    807abc0 <do_ipnetconf+0x14b0>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     807a9aa <do_ipnetconf+0x129a>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    807ab20 <do_ipnetconf+0x1410>
mov    %esi,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085df0,(%esp)
call   804b710 <fwrite@plt>
mov    0x14(%ebx),%eax
test   %eax,%eax
je     807a9dd <do_ipnetconf+0x12cd>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    807ab70 <do_ipnetconf+0x1460>
mov    0x28(%ebx),%eax
test   %eax,%eax
je     807a9ee <do_ipnetconf+0x12de>
cmpb   $0x0,0x4(%eax)
jne    807aaf8 <do_ipnetconf+0x13e8>
mov    %esi,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6b7,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     807aa1f <do_ipnetconf+0x130f>
testb  $0x1,0x4(%eax)
jne    807ab48 <do_ipnetconf+0x1438>
mov    0x34(%ebx),%eax
test   %eax,%eax
je     807aa2f <do_ipnetconf+0x131f>
movzwl 0x4(%eax),%esi
test   %si,%si
jne    807aa50 <do_ipnetconf+0x1340>
mov    0x46c(%esp),%eax
xor    %gs:0x14,%eax
jne    807acd9 <do_ipnetconf+0x15c9>
add    $0x47c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x38(%ebx),%eax
lea    0x6c(%esp),%edi
movzwl 0x4(%eax),%ebp
mov    0x30(%ebx),%eax
mov    0x4(%eax),%eax
movl   $0x400,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %eax,0x28(%esp)
mov    0x2c(%ebx),%eax
movl   $0xa,(%esp)
add    $0x4,%eax
mov    %eax,0x4(%esp)
call   804baa0 <inet_ntop@plt>
mov    %esi,0xc(%esp)
movl   $0x8085e15,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
mov    0x28(%esp),%eax
test   %eax,%eax
je     807aa2f <do_ipnetconf+0x131f>
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
mov    %ebp,0xc(%esp)
movl   $0x8085e27,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   804b9c0 <__printf_chk@plt>
jmp    807aa2f <do_ipnetconf+0x131f>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x9,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6b9,(%esp)
call   804b710 <fwrite@plt>
jmp    807aa0e <do_ipnetconf+0x12fe>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x8085de7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807a9ca <do_ipnetconf+0x12ba>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c0c1,(%esp)
call   804b710 <fwrite@plt>
jmp    807aa1f <do_ipnetconf+0x130f>
lea    0x0(%esi),%esi
movzbl %al,%edi
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6b2,(%esp)
call   804b710 <fwrite@plt>
cmp    $0x1,%edi
je     807ac70 <do_ipnetconf+0x1560>
mov    %edi,0xc(%esp)
movl   $0x8084d93,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807a9dd <do_ipnetconf+0x12cd>
lea    0x0(%esi),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     807acb8 <do_ipnetconf+0x15a8>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807a997 <do_ipnetconf+0x1287>
lea    0x0(%esi,%eiz,1),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    807a969 <do_ipnetconf+0x1259>
lea    0x0(%esi,%eiz,1),%esi
lea    0x6c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0x8(%esp)
movl   $0x4,0x4(%esp)
movl   $0x2,(%esp)
call   80805b0 <format_host>
jmp    807a92e <do_ipnetconf+0x121e>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf40,(%esp)
call   804b710 <fwrite@plt>
jmp    807a9dd <do_ipnetconf+0x12cd>
lea    0x0(%esi),%esi
mov    $0x8088b92,%eax
jmp    807a969 <do_ipnetconf+0x1259>
lea    0x0(%esi),%esi
mov    $0x8088b92,%eax
jmp    807a92e <do_ipnetconf+0x121e>
lea    0x0(%esi),%esi
mov    %edi,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807a997 <do_ipnetconf+0x1287>
call   804b660 <__stack_chk_fail@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x98c,%esp
mov    0x9a0(%esp),%eax
mov    %gs:0x14,%edi
mov    %edi,0x97c(%esp)
xor    %edi,%edi
mov    0x9a4(%esp),%edx
mov    0x9a8(%esp),%ebp
movb   $0x0,0x4b(%esp)
mov    %eax,0x2c(%esp)
mov    0x9ac(%esp),%eax
movl   $0x0,0x14c(%esp)
00
movl   $0x0,0x150(%esp)
00
movl   $0x0,0x154(%esp)
00
testb  $0x4,0x7(%eax)
mov    %eax,0x28(%esp)
movl   $0x0,0x158(%esp)
00
je     807b27e <do_ipnetconf+0x1b6e>
xor    %eax,%eax
mov    %ax,0x3a(%esp)
xor    %eax,%eax
mov    %ax,0x32(%esp)
xor    %eax,%eax
movl   $0x0,0x3c(%esp)
movb   $0x0,0x31(%esp)
mov    %ax,0x38(%esp)
movb   $0x1,0x30(%esp)
movb   $0x0,0x24(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x20(%esp)
test   %edx,%edx
jle    807ae48 <do_ipnetconf+0x1738>
mov    %edx,%ebx
jmp    807ade6 <do_ipnetconf+0x16d6>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%eax
cmpb   $0x61,(%eax)
je     807af58 <do_ipnetconf+0x1848>
mov    %eax,(%esp)
mov    %edx,0x14(%esp)
call   807ffa0 <get_addr32>
mov    0x14(%esp),%edx
mov    %eax,0x18(%esp)
sub    $0x1,%ebx
test   %ebx,%ebx
lea    0x4(%edx),%ebp
jle    807ae48 <do_ipnetconf+0x1738>
mov    0x0(%ebp),%eax
mov    $0x7,%ecx
mov    $0x8082f3c,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807adb0 <do_ipnetconf+0x16a0>
mov    $0x8082fb7,%edi
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807afb8 <do_ipnetconf+0x18a8>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%eax
cmpb   $0x61,(%eax)
je     807af88 <do_ipnetconf+0x1878>
mov    %eax,(%esp)
sub    $0x1,%ebx
mov    %edx,0x14(%esp)
call   807ffa0 <get_addr32>
mov    0x14(%esp),%edx
test   %ebx,%ebx
lea    0x4(%edx),%ebp
mov    %eax,0x1c(%esp)
jg     807ade6 <do_ipnetconf+0x16d6>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x4b(%esp)
je     807ae5a <do_ipnetconf+0x174a>
cmpb   $0x0,0x30(%esp)
je     807b89b <do_ipnetconf+0x218b>
mov    0x28(%esp),%ebx
mov    0x20(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x1c(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x18(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
movzbl 0x4b(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x24(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
movzbl 0x30(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
mov    0x2c(%esp),%eax
mov    0x4(%eax),%eax
cmpb   $0x73,(%eax)
je     807b178 <do_ipnetconf+0x1a68>
xor    %eax,%eax
mov    0x97c(%esp),%edi
xor    %gs:0x14,%edi
jne    807b8cc <do_ipnetconf+0x21bc>
add    $0x98c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x6e,0x1(%eax)
jne    807adc8 <do_ipnetconf+0x16b8>
cmpb   $0x79,0x2(%eax)
jne    807adc8 <do_ipnetconf+0x16b8>
cmpb   $0x0,0x3(%eax)
jne    807adc8 <do_ipnetconf+0x16b8>
movl   $0x0,0x18(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x6e,0x1(%eax)
jne    807ae25 <do_ipnetconf+0x1715>
cmpb   $0x79,0x2(%eax)
jne    807ae25 <do_ipnetconf+0x1715>
cmpb   $0x0,0x3(%eax)
jne    807ae25 <do_ipnetconf+0x1715>
movl   $0x0,0x1c(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8085e82,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807b010 <do_ipnetconf+0x1900>
lea    0x4(%ebp),%edx
sub    $0x1,%ebx
mov    %edx,0x14(%esp)
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
mov    %eax,0x20(%esp)
jne    807addc <do_ipnetconf+0x16cc>
mov    0x4(%ebp),%eax
movl   $0x808bf63,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
lea    0x0(%esi),%esi
mov    0x0(%ebp),%eax
cmpb   $0x74,(%eax)
je     807b0f8 <do_ipnetconf+0x19e8>
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b0bc <do_ipnetconf+0x19ac>
mov    $0x8085f37,%edi
mov    $0x7,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807b4bb <do_ipnetconf+0x1dab>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%eax
mov    $0x8,%ecx
mov    $0x80863b4,%edi
movb   $0x1,0x24(%esp)
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x14(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
je     807addc <do_ipnetconf+0x16cc>
mov    0x14(%esp),%eax
mov    %edx,0x24(%esp)
mov    %eax,0x4(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   80819a0 <rtnl_dsfield_a2n>
mov    0x24(%esp),%edx
test   %eax,%eax
jne    807b888 <do_ipnetconf+0x2178>
movzbl 0x5c(%esp),%eax
mov    %al,0x24(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
xchg   %ax,%ax
cmpb   $0x6c,0x2(%eax)
jne    807b0fe <do_ipnetconf+0x19ee>
cmpb   $0x0,0x3(%eax)
jne    807b0fe <do_ipnetconf+0x19ee>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%eax
mov    $0x8,%ecx
mov    $0x80863b4,%edi
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
mov    %eax,0x14(%esp)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    807b138 <do_ipnetconf+0x1a28>
movb   $0x0,0x4b(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
lea    0x0(%esi),%esi
cmpb   $0x74,0x1(%eax)
je     807b0b0 <do_ipnetconf+0x19a0>
mov    $0x80842a4,%edi
mov    $0x9,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b0bc <do_ipnetconf+0x19ac>
cmpb   $0x6f,0x1(%eax)
jne    807b030 <do_ipnetconf+0x1920>
cmpb   $0x73,0x2(%eax)
jne    807b030 <do_ipnetconf+0x1920>
cmpb   $0x0,0x3(%eax)
je     807b044 <do_ipnetconf+0x1934>
jmp    807b030 <do_ipnetconf+0x1920>
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x34(%esp)
mov    %eax,0x4(%esp)
lea    0x4b(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
mov    0x34(%esp),%edx
test   %eax,%eax
je     807addc <do_ipnetconf+0x16cc>
mov    0x4(%ebp),%eax
movl   $0x8085f17,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
nop
cmpb   $0x69,0x1(%eax)
jne    807af31 <do_ipnetconf+0x1821>
cmpb   $0x74,0x2(%eax)
jne    807af31 <do_ipnetconf+0x1821>
cmpb   $0x0,0x3(%eax)
jne    807af31 <do_ipnetconf+0x1821>
mov    0x28(%esp),%edi
movzwl 0x38(%esp),%eax
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
movzbl 0x31(%esp),%eax
movl   $0x9,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eb00 <addattr8>
cmpw   $0x0,0x32(%esp)
je     807af31 <do_ipnetconf+0x1821>
mov    0x28(%esp),%edi
lea    0x14c(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
movzwl 0x32(%esp),%eax
movl   $0xd,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
mov    0x3c(%esp),%eax
movl   $0xc,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
movzwl 0x3a(%esp),%eax
movl   $0xe,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0xc(%esp)
call   807eb50 <addattr16>
jmp    807af31 <do_ipnetconf+0x1821>
lea    0x15c(%esp),%ebx
xor    %eax,%eax
mov    $0x208,%ecx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
mov    $0x1,%eax
mov    %ax,0x162(%esp)
mov    0x8095ca8,%eax
mov    %edx,0x14(%esp)
mov    $0x12,%edx
mov    %dx,0x160(%esp)
movl   $0x20,0x15c(%esp)
00
mov    %al,0x16c(%esp)
mov    0x28(%esp),%eax
mov    0x14(%eax),%eax
mov    %ebx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x170(%esp)
call   807e090 <rtnl_talk>
mov    0x14(%esp),%edx
test   %eax,%eax
js     807b5e6 <do_ipnetconf+0x1ed6>
mov    0x15c(%esp),%eax
mov    %edx,0x14(%esp)
sub    $0x20,%eax
js     807b5e6 <do_ipnetconf+0x1ed6>
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0xc0(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x108(%esp),%eax
test   %eax,%eax
je     807b5e6 <do_ipnetconf+0x1ed6>
movzwl (%eax),%ecx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x4c(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%ecx
mov    %ecx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x54(%esp),%eax
test   %eax,%eax
je     807b5e6 <do_ipnetconf+0x1ed6>
movzwl (%eax),%ecx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x84(%esp),%eax
movl   $0xe,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%ecx
mov    %ecx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x8c(%esp),%eax
mov    0x14(%esp),%edx
test   %eax,%eax
je     807b593 <do_ipnetconf+0x1e83>
mov    0x4(%eax),%eax
mov    %eax,0x1c(%esp)
mov    0x90(%esp),%eax
test   %eax,%eax
je     807b5a0 <do_ipnetconf+0x1e90>
mov    0x4(%eax),%eax
mov    %eax,0x18(%esp)
mov    0x94(%esp),%eax
test   %eax,%eax
je     807b3e8 <do_ipnetconf+0x1cd8>
movzbl 0x4(%eax),%eax
mov    %al,0x4b(%esp)
mov    0x98(%esp),%eax
test   %eax,%eax
je     807b5ad <do_ipnetconf+0x1e9d>
movzbl 0x4(%eax),%eax
mov    %al,0x24(%esp)
mov    0xac(%esp),%eax
test   %eax,%eax
je     807b5b7 <do_ipnetconf+0x1ea7>
movzbl 0x4(%eax),%eax
mov    %al,0x30(%esp)
mov    0xa4(%esp),%eax
test   %eax,%eax
je     807b57a <do_ipnetconf+0x1e6a>
movzwl 0x4(%eax),%eax
mov    %ax,0x38(%esp)
mov    0x88(%esp),%eax
test   %eax,%eax
je     807b586 <do_ipnetconf+0x1e76>
mov    0x4(%eax),%eax
mov    %eax,0x20(%esp)
mov    0xa8(%esp),%eax
test   %eax,%eax
je     807b570 <do_ipnetconf+0x1e60>
movzbl 0x4(%eax),%eax
mov    %al,0x31(%esp)
mov    0xb0(%esp),%eax
test   %eax,%eax
je     807b470 <do_ipnetconf+0x1d60>
mov    0x4(%eax),%eax
mov    %eax,0x14c(%esp)
mov    0xb8(%esp),%eax
test   %eax,%eax
je     807b5c1 <do_ipnetconf+0x1eb1>
movzwl 0x4(%eax),%eax
mov    %ax,0x32(%esp)
mov    0xb4(%esp),%eax
test   %eax,%eax
je     807b5cd <do_ipnetconf+0x1ebd>
mov    0x4(%eax),%eax
mov    %eax,0x3c(%esp)
mov    0xbc(%esp),%eax
test   %eax,%eax
je     807b5da <do_ipnetconf+0x1eca>
movzwl 0x4(%eax),%eax
mov    %ax,0x3a(%esp)
jmp    807ad9d <do_ipnetconf+0x168d>
movl   $0x808ca3d,0x4(%esp)
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807b044 <do_ipnetconf+0x1934>
mov    0x0(%ebp),%edx
mov    $0x8085e09,%edi
mov    $0xb,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b564 <do_ipnetconf+0x1e54>
mov    $0x8085e0b,%edi
mov    $0x9,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b615 <do_ipnetconf+0x1f05>
mov    0x2c(%esp),%eax
mov    $0x73,%esi
mov    0x4(%eax),%eax
movzbl (%eax),%ecx
mov    %eax,0x14(%esp)
sub    %ecx,%esi
mov    %esi,0x34(%esp)
jne    807b700 <do_ipnetconf+0x1ff0>
cmpb   $0x69,0x1(%eax)
jne    807b700 <do_ipnetconf+0x1ff0>
cmpb   $0x74,0x2(%eax)
jne    807b626 <do_ipnetconf+0x1f16>
cmpb   $0x0,0x3(%eax)
jne    807b626 <do_ipnetconf+0x1f16>
mov    $0x7,%ecx
mov    %edx,%esi
mov    $0x8085edb,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
jne    807b626 <do_ipnetconf+0x1f16>
orw    $0x1,0x38(%esp)
mov    %ebp,%edx
jmp    807addc <do_ipnetconf+0x16cc>
mov    %ebp,%edx
movb   $0x0,0x30(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
movb   $0x0,0x31(%esp)
jmp    807b45b <do_ipnetconf+0x1d4b>
xor    %eax,%eax
mov    %ax,0x38(%esp)
jmp    807b42e <do_ipnetconf+0x1d1e>
movl   $0x0,0x20(%esp)
jmp    807b444 <do_ipnetconf+0x1d34>
movl   $0x0,0x1c(%esp)
jmp    807b3bf <do_ipnetconf+0x1caf>
movl   $0x0,0x18(%esp)
jmp    807b3d5 <do_ipnetconf+0x1cc5>
movb   $0x0,0x24(%esp)
jmp    807b3ff <do_ipnetconf+0x1cef>
movb   $0x1,0x30(%esp)
jmp    807b416 <do_ipnetconf+0x1d06>
xor    %eax,%eax
mov    %ax,0x32(%esp)
jmp    807b488 <do_ipnetconf+0x1d78>
movl   $0x0,0x3c(%esp)
jmp    807b49e <do_ipnetconf+0x1d8e>
xor    %edi,%edi
mov    %di,0x3a(%esp)
jmp    807ad9d <do_ipnetconf+0x168d>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807af33 <do_ipnetconf+0x1823>
mov    %ebp,%edx
movb   $0x1,0x30(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
call   8080010 <incomplete_command>
mov    0x14(%esp),%eax
cmpb   $0x74,0x2(%eax)
jne    807b700 <do_ipnetconf+0x1ff0>
mov    0x14(%esp),%eax
cmpb   $0x0,0x3(%eax)
jne    807b700 <do_ipnetconf+0x1ff0>
mov    $0x8085ebc,%edi
mov    $0x5,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807b700 <do_ipnetconf+0x1ff0>
sub    $0x1,%ebx
lea    0x4(%ebp),%edx
je     807b621 <do_ipnetconf+0x1f11>
mov    0x4(%ebp),%ebp
mov    $0xa,%ecx
mov    $0x808c0c9,%edi
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%eax
cmp    %cl,%al
je     807b782 <do_ipnetconf+0x2072>
mov    $0x808c0d3,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b782 <do_ipnetconf+0x2072>
mov    $0x808c0d9,%edi
mov    $0xa,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b8f9 <do_ipnetconf+0x21e9>
mov    $0x8085ec1,%edi
mov    $0x5,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b8f9 <do_ipnetconf+0x21e9>
mov    $0x808c0e3,%edi
mov    $0x7,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b8f9 <do_ipnetconf+0x21e9>
mov    $0x808c0ea,%edi
mov    $0x9,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807b8ef <do_ipnetconf+0x21df>
cmpb   $0x61,0x0(%ebp)
je     807b8d1 <do_ipnetconf+0x21c1>
mov    %ebp,0x4(%esp)
movl   $0x808bf49,(%esp)
call   80800b0 <invarg>
nop
mov    $0x8085fde,%edi
mov    $0xb,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807b78c <do_ipnetconf+0x207c>
lea    0x4(%ebp),%edx
sub    $0x1,%ebx
mov    %edx,0x14(%esp)
je     807b621 <do_ipnetconf+0x1f11>
movl   $0xa,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    807b7e6 <do_ipnetconf+0x20d6>
mov    0x64(%esp),%eax
mov    %eax,0x14c(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x150(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x154(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x158(%esp)
movzwl 0x5e(%esp),%eax
mov    %ax,0x32(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
movb   $0x29,0x31(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
mov    $0x8085ffd,%edi
mov    $0x11,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807b80c <do_ipnetconf+0x20fc>
lea    0x4(%ebp),%edx
sub    $0x1,%ebx
mov    %edx,0x14(%esp)
je     807b621 <do_ipnetconf+0x1f11>
movl   $0x2,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
lea    0x5c(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    807b7f9 <do_ipnetconf+0x20e9>
mov    0x64(%esp),%eax
mov    %eax,0x3c(%esp)
movzwl 0x5e(%esp),%eax
mov    %ax,0x3a(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
mov    0x4(%ebp),%eax
movl   $0x8085fe9,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebp),%eax
movl   $0x808600e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    $0x8086028,%edi
mov    $0xa,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807b903 <do_ipnetconf+0x21f3>
lea    0x5c(%esp),%eax
mov    $0x10,%esi
movl   $0xa,0x8(%esp)
movl   $0x808c0f3,0x4(%esp)
mov    %eax,(%esp)
call   807ff20 <get_prefix>
mov    0x64(%esp),%eax
xor    %ecx,%ecx
mov    %ebp,%edx
movl   $0x0,0x3c(%esp)
mov    %cx,0x3a(%esp)
mov    %eax,0x14c(%esp)
mov    0x68(%esp),%eax
mov    %si,0x32(%esp)
mov    %eax,0x150(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x154(%esp)
mov    0x70(%esp),%eax
mov    %eax,0x158(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
mov    0x4(%ebp),%eax
movl   $0x8085f3e,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085d00,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
cmpb   $0x6e,0x1(%ebp)
jne    807b6ef <do_ipnetconf+0x1fdf>
cmpb   $0x79,0x2(%ebp)
jne    807b6ef <do_ipnetconf+0x1fdf>
cmpb   $0x0,0x3(%ebp)
jne    807b6ef <do_ipnetconf+0x1fdf>
movb   $0x0,0x31(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
movb   $0x4,0x31(%esp)
jmp    807addc <do_ipnetconf+0x16cc>
mov    0x34(%esp),%edx
mov    0x14(%esp),%ebx
test   %edx,%edx
jne    807b92f <do_ipnetconf+0x221f>
cmpb   $0x69,0x1(%ebx)
jne    807baca <do_ipnetconf+0x23ba>
cmpb   $0x74,0x2(%ebx)
jne    807baca <do_ipnetconf+0x23ba>
movzbl 0x3(%ebx),%eax
mov    %eax,0x34(%esp)
negl   0x34(%esp)
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c110,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80858c4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x46,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808587c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x34(%esp),%eax
test   %eax,%eax
jne    807ba15 <do_ipnetconf+0x2305>
mov    0x8095c40,%eax
movl   $0x2a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c150,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c0fa,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085db7,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808590c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a7f0,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8085984,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x3d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c110,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x44,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80858c4,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x46,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808587c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    807ba15 <do_ipnetconf+0x2305>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x48c,%esp
mov    0x4a8(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x47c(%esp)
xor    %eax,%eax
mov    0x4a4(%esp),%esi
movl   $0x0,0x2c(%esp)
movl   $0x0,0x30(%esp)
test   %ebx,%ebx
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
je     807be7e <do_ipnetconf+0x276e>
mov    0x34(%ebx),%eax
test   %eax,%eax
je     807c0a8 <do_ipnetconf+0x2998>
mov    0x4(%eax),%edi
mov    0x30(%ebx),%eax
test   %eax,%eax
je     807bbd7 <do_ipnetconf+0x24c7>
mov    0x4(%eax),%edi
mov    0x1c(%ebx),%eax
test   %eax,%eax
je     807c0b0 <do_ipnetconf+0x29a0>
mov    0x4(%eax),%edx
lea    0x3c(%esp),%ebp
mov    %edx,0x3c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x40(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x44(%esp)
mov    0x10(%eax),%eax
movl   $0x10,0x8(%esp)
mov    %ebp,(%esp)
mov    %eax,0x48(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b620 <memcmp@plt>
mov    $0x8088b92,%edx
test   %eax,%eax
jne    807c068 <do_ipnetconf+0x2958>
mov    %edx,0xc(%esp)
movl   $0x808a695,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%ebx),%eax
test   %eax,%eax
je     807c098 <do_ipnetconf+0x2988>
mov    0x4(%eax),%edx
lea    0x3c(%esp),%ebp
mov    %edx,0x3c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x40(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x44(%esp)
mov    0x10(%eax),%eax
movl   $0x10,0x8(%esp)
mov    %ebp,(%esp)
mov    %eax,0x48(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b620 <memcmp@plt>
mov    $0x8088b92,%edx
test   %eax,%eax
jne    807c038 <do_ipnetconf+0x2928>
mov    %edx,0xc(%esp)
movl   $0x808a6a0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     807bcc1 <do_ipnetconf+0x25b1>
mov    0x4(%eax),%ebp
test   %ebp,%ebp
jne    807bff8 <do_ipnetconf+0x28e8>
mov    0x20(%ebx),%eax
test   %eax,%eax
je     807bcd4 <do_ipnetconf+0x25c4>
movzbl 0x4(%eax),%eax
test   %al,%al
jne    807bfd0 <do_ipnetconf+0x28c0>
test   $0x1,%edi
jne    807bf20 <do_ipnetconf+0x2810>
mov    0x2c(%ebx),%eax
test   %eax,%eax
je     807bd07 <do_ipnetconf+0x25f7>
movzbl 0x4(%eax),%eax
movl   $0x808c188,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   804bad0 <__fprintf_chk@plt>
test   $0x4,%edi
jne    807bea0 <do_ipnetconf+0x2790>
movl   $0x0,0xc(%esp)
movl   $0x808bf00,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
and    $0x10,%edi
jne    807bec9 <do_ipnetconf+0x27b9>
mov    0x8(%ebx),%eax
test   %eax,%eax
je     807bef4 <do_ipnetconf+0x27e4>
movzwl 0x4(%eax),%edx
mov    %edx,%eax
mov    %edx,%ecx
and    $0x80,%dx
and    $0x20,%eax
movzwl %dx,%edi
mov    0xc(%ebx),%edx
and    $0x10,%ecx
movzwl %ax,%eax
movzwl %cx,%ecx
mov    %edi,0x14(%esp)
test   %edx,%edx
je     807bf10 <do_ipnetconf+0x2800>
movzwl 0x4(%edx),%edi
mov    %edi,%edx
mov    %edi,%ebp
and    $0x20,%edx
and    $0x10,%ebp
and    $0x80,%di
movzwl %dx,%edx
movzwl %bp,%ebp
movzwl %di,%edi
test   %eax,%eax
je     807bdec <do_ipnetconf+0x26dc>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     807bdec <do_ipnetconf+0x26dc>
mov    %ecx,0x1c(%esp)
add    $0x4,%eax
lea    0x3c(%esp),%ecx
mov    %ecx,0x8(%esp)
movl   $0x40,0xc(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
mov    %edx,0x18(%esp)
call   804baa0 <inet_ntop@plt>
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
movl   $0x808a6c3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esp),%ecx
mov    0x18(%esp),%edx
test   %edx,%edx
je     807be3e <do_ipnetconf+0x272e>
mov    0x14(%ebx),%eax
test   %eax,%eax
je     807be3e <do_ipnetconf+0x272e>
lea    0x3c(%esp),%ebx
add    $0x4,%eax
movl   $0x40,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
mov    %ecx,0x18(%esp)
call   804baa0 <inet_ntop@plt>
mov    %ebx,0xc(%esp)
movl   $0x808a6cc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x18(%esp),%ecx
test   %ecx,%ecx
jne    807bfa8 <do_ipnetconf+0x2898>
test   %ebp,%ebp
jne    807bf80 <do_ipnetconf+0x2870>
mov    0x14(%esp),%eax
test   %eax,%eax
jne    807bf58 <do_ipnetconf+0x2848>
test   %edi,%edi
je     807be7e <do_ipnetconf+0x276e>
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6e8,(%esp)
call   804b710 <fwrite@plt>
mov    0x47c(%esp),%eax
xor    %gs:0x14,%eax
jne    807c0e1 <do_ipnetconf+0x29d1>
add    $0x48c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808beed,(%esp)
call   804b710 <fwrite@plt>
and    $0x10,%edi
je     807bd3c <do_ipnetconf+0x262c>
mov    %esi,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bf25,(%esp)
call   804b710 <fwrite@plt>
mov    0x8(%ebx),%eax
test   %eax,%eax
jne    807bd47 <do_ipnetconf+0x2637>
mov    0xc(%ebx),%edx
xor    %ecx,%ecx
xor    %eax,%eax
movl   $0x0,0x14(%esp)
test   %edx,%edx
jne    807bd72 <do_ipnetconf+0x2662>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edi,%edi
xor    %ebp,%ebp
xor    %edx,%edx
jmp    807bd8e <do_ipnetconf+0x267e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808bea1,(%esp)
call   804b710 <fwrite@plt>
test   $0x4,%edi
je     807bd13 <do_ipnetconf+0x2603>
jmp    807bea0 <do_ipnetconf+0x2790>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6e1,(%esp)
call   804b710 <fwrite@plt>
jmp    807be5a <do_ipnetconf+0x274a>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6db,(%esp)
call   804b710 <fwrite@plt>
jmp    807be4e <do_ipnetconf+0x273e>
lea    0x0(%esi),%esi
mov    %esi,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a6d5,(%esp)
call   804b710 <fwrite@plt>
jmp    807be46 <do_ipnetconf+0x2736>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
movl   $0x808c17b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807bcd4 <do_ipnetconf+0x25c4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     807c0c0 <do_ipnetconf+0x29b0>
mov    %eax,0xc(%esp)
movl   $0x8085dde,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807bcc1 <do_ipnetconf+0x25b1>
lea    0x0(%esi,%eiz,1),%esi
lea    0x7c(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebp,0x8(%esp)
movl   $0x10,0x4(%esp)
movl   $0xa,(%esp)
call   80805b0 <format_host>
mov    %eax,%edx
jmp    807bc93 <do_ipnetconf+0x2583>
nop
lea    0x7c(%esp),%eax
movl   $0x400,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebp,0x8(%esp)
movl   $0x10,0x4(%esp)
movl   $0xa,(%esp)
call   80805b0 <format_host>
mov    %eax,%edx
jmp    807bc27 <do_ipnetconf+0x2517>
nop
mov    $0x8088b92,%edx
jmp    807bc93 <do_ipnetconf+0x2583>
lea    0x0(%esi),%esi
xor    %edi,%edi
jmp    807bbcd <do_ipnetconf+0x24bd>
nop
mov    $0x8088b92,%edx
jmp    807bc27 <do_ipnetconf+0x2517>
lea    0x0(%esi),%esi
mov    %ebp,0xc(%esp)
movl   $0x808a6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807bcc1 <do_ipnetconf+0x25b1>
call   804b660 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
xor    %edx,%edx
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x58c,%esp
mov    0x5ac(%esp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x57c(%esp)
xor    %ecx,%ecx
mov    0x5a4(%esp),%ebp
mov    0x5a8(%esp),%ebx
mov    %di,0x38(%esp)
testb  $0x4,0x7(%eax)
mov    %eax,0x28(%esp)
mov    %dx,0x3a(%esp)
movl   $0x0,0x13c(%esp)
00
movl   $0x0,0x140(%esp)
00
movl   $0x0,0x144(%esp)
00
movl   $0x0,0x148(%esp)
00
movl   $0x0,0x14c(%esp)
00
movl   $0x0,0x150(%esp)
00
movl   $0x0,0x154(%esp)
00
movl   $0x0,0x158(%esp)
00
movl   $0x0,0x3c(%esp)
movb   $0x40,0x36(%esp)
movb   $0x4,0x37(%esp)
je     807c57f <do_ipnetconf+0x2e6f>
movl   $0x0,0x2c(%esp)
movl   $0x0,0x24(%esp)
movl   $0x0,0x20(%esp)
jmp    807c215 <do_ipnetconf+0x2b05>
nop
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%ebx
movl   $0x2e,0x4(%esp)
orw    $0x20,0x38(%esp)
orw    $0x20,0x3a(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     807c288 <do_ipnetconf+0x2b78>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x20(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x24(%esp)
mov    0x1c(%esp),%ebx
sub    $0x1,%ebp
add    $0x4,%ebx
test   %ebp,%ebp
jle    807c370 <do_ipnetconf+0x2c60>
movl   $0x8085efd,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807c1c0 <do_ipnetconf+0x2ab0>
movl   $0x8085efc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c2b8 <do_ipnetconf+0x2ba8>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%ebx
movl   $0x2e,0x4(%esp)
orw    $0x20,0x38(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     807c310 <do_ipnetconf+0x2c00>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x20(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
lea    0x50(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     807c8a4 <do_ipnetconf+0x3194>
mov    0x50(%esp),%eax
bswap  %eax
mov    %eax,0x20(%esp)
jmp    807c203 <do_ipnetconf+0x2af3>
nop
movl   $0x8085f01,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c340 <do_ipnetconf+0x2c30>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%ebx
movl   $0x2e,0x4(%esp)
orw    $0x20,0x3a(%esp)
mov    %ebx,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     807c527 <do_ipnetconf+0x2e17>
mov    %ebx,(%esp)
call   807ffa0 <get_addr32>
mov    %eax,0x24(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
lea    0x50(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     807c90b <do_ipnetconf+0x31fb>
mov    0x50(%esp),%eax
bswap  %eax
mov    %eax,0x20(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
nop
movl   $0x8088dd1,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c556 <do_ipnetconf+0x2e46>
orw    $0x10,0x38(%esp)
orw    $0x10,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
nop
mov    0x28(%esp),%esi
mov    0x20(%esp),%eax
movl   $0x4,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
mov    0x24(%esp),%eax
movl   $0x5,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   807eba0 <addattr32>
lea    0x38(%esp),%eax
movl   $0x2,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
lea    0x3a(%esp),%eax
movl   $0x2,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x3,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
lea    0x14c(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
lea    0x13c(%esp),%eax
movl   $0x10,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   807ea10 <addattr_l>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    807c7a4 <do_ipnetconf+0x3094>
mov    0x28(%esp),%edi
lea    0x36(%esp),%eax
movl   $0x1,0x10(%esp)
lea    0x3c(%esp),%ebx
mov    %eax,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
lea    0x37(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0xc,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0xd,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %edi,(%esp)
call   807ea10 <addattr_l>
xor    %eax,%eax
mov    0x57c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    807c8d5 <do_ipnetconf+0x31c5>
add    $0x58c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x50(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   807f320 <get_unsigned>
test   %eax,%eax
js     807c8da <do_ipnetconf+0x31ca>
mov    0x50(%esp),%eax
bswap  %eax
mov    %eax,0x24(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
movl   $0x8085f06,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c7cd <do_ipnetconf+0x30bd>
orw    $0x10,0x38(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
lea    0x15c(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0x108,%cx
rep stos %eax,%es:(%edi)
mov    0x8095ca8,%eax
mov    $0x1,%ecx
mov    $0x12,%esi
movl   $0x20,0x15c(%esp)
00
mov    %cx,0x162(%esp)
mov    %al,0x16c(%esp)
mov    0x28(%esp),%eax
mov    %si,0x160(%esp)
mov    0x14(%eax),%eax
mov    %edx,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x80941e0,(%esp)
mov    %eax,0x170(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     807c84b <do_ipnetconf+0x313b>
mov    0x15c(%esp),%eax
sub    $0x20,%eax
js     807c84b <do_ipnetconf+0x313b>
mov    %eax,0xc(%esp)
lea    0x17c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0xb0(%esp),%eax
movl   $0x22,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0xf8(%esp),%eax
test   %eax,%eax
je     807c84b <do_ipnetconf+0x313b>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x40(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x48(%esp),%eax
test   %eax,%eax
je     807c84b <do_ipnetconf+0x313b>
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
lea    0x78(%esp),%eax
movl   $0xd,0x4(%esp)
mov    %eax,(%esp)
sub    $0x4,%edx
mov    %edx,0xc(%esp)
call   807f0b0 <parse_rtattr>
mov    0x88(%esp),%eax
test   %eax,%eax
je     807c7ff <do_ipnetconf+0x30ef>
mov    0x4(%eax),%eax
mov    %eax,0x20(%esp)
mov    0x8c(%esp),%eax
test   %eax,%eax
je     807c80c <do_ipnetconf+0x30fc>
mov    0x4(%eax),%eax
mov    %eax,0x24(%esp)
mov    0x80(%esp),%eax
test   %eax,%eax
je     807c6d6 <do_ipnetconf+0x2fc6>
movzwl 0x4(%eax),%eax
mov    %ax,0x38(%esp)
mov    0x84(%esp),%eax
test   %eax,%eax
je     807c6ea <do_ipnetconf+0x2fda>
movzwl 0x4(%eax),%eax
mov    %ax,0x3a(%esp)
mov    0x90(%esp),%eax
test   %eax,%eax
je     807c71d <do_ipnetconf+0x300d>
mov    0x4(%eax),%edx
mov    %edx,0x14c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x150(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x154(%esp)
mov    0x10(%eax),%eax
mov    %eax,0x158(%esp)
mov    0x94(%esp),%eax
test   %eax,%eax
je     807c750 <do_ipnetconf+0x3040>
mov    0x4(%eax),%edx
mov    %edx,0x13c(%esp)
mov    0x8(%eax),%edx
mov    %edx,0x140(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x144(%esp)
mov    0x10(%eax),%eax
mov    %eax,0x148(%esp)
mov    0x98(%esp),%eax
test   %eax,%eax
je     807c763 <do_ipnetconf+0x3053>
movzbl 0x4(%eax),%eax
mov    %al,0x36(%esp)
mov    0x7c(%esp),%eax
test   %eax,%eax
je     807c7f2 <do_ipnetconf+0x30e2>
mov    0x4(%eax),%eax
mov    %eax,0x2c(%esp)
mov    0xa4(%esp),%eax
test   %eax,%eax
je     807c789 <do_ipnetconf+0x3079>
movzbl 0x4(%eax),%eax
mov    %al,0x37(%esp)
mov    0xa8(%esp),%eax
test   %eax,%eax
je     807c215 <do_ipnetconf+0x2b05>
mov    0x4(%eax),%eax
mov    %eax,0x3c(%esp)
jmp    807c215 <do_ipnetconf+0x2b05>
mov    0x2c(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   807eba0 <addattr32>
jmp    807c466 <do_ipnetconf+0x2d56>
movl   $0x8088ddc,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c819 <do_ipnetconf+0x3109>
orw    $0x10,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
movl   $0x0,0x2c(%esp)
jmp    807c776 <do_ipnetconf+0x3066>
movl   $0x0,0x20(%esp)
jmp    807c6ac <do_ipnetconf+0x2f9c>
movl   $0x0,0x24(%esp)
jmp    807c6c2 <do_ipnetconf+0x2fb2>
movl   $0x8085f0c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c87a <do_ipnetconf+0x316a>
orw    $0x80,0x38(%esp)
orw    $0x80,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
call   8080010 <incomplete_command>
mov    0x8095c40,%eax
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a708,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807c508 <do_ipnetconf+0x2df8>
movl   $0x8085f0b,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c93c <do_ipnetconf+0x322c>
orw    $0x80,0x38(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c197,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
call   804b660 <__stack_chk_fail@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086501,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
mov    0x8095c40,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80864e8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x8085f11,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c962 <do_ipnetconf+0x3252>
orw    $0x80,0x3a(%esp)
mov    %ebx,0x1c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
movl   $0x8082f3c,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807c9e0 <do_ipnetconf+0x32d0>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x50(%esp)
je     807ca5e <do_ipnetconf+0x334e>
mov    0x58(%esp),%eax
mov    %eax,0x13c(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x140(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x144(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x148(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
movl   $0x8082fb7,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807ca84 <do_ipnetconf+0x3374>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x8095ca8,%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807ff20 <get_prefix>
cmpb   $0x0,0x50(%esp)
je     807ca71 <do_ipnetconf+0x3361>
mov    0x58(%esp),%eax
mov    %eax,0x14c(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x150(%esp)
mov    0x60(%esp),%eax
mov    %eax,0x154(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x158(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
mov    0x4(%ebx),%eax
movl   $0x80862a0,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80862c8,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8085e82,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807cacd <do_ipnetconf+0x33bd>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x2c(%esp)
jne    807c20b <do_ipnetconf+0x2afb>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
movl   $0x808a6ef,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807cb24 <do_ipnetconf+0x3414>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
movl   $0x0,0x8(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    807cbaf <do_ipnetconf+0x349f>
movzbl 0x50(%esp),%eax
mov    %al,0x36(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
movl   $0x80842a4,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807cae3 <do_ipnetconf+0x33d3>
movl   $0x8085dfe,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
jne    807cbd5 <do_ipnetconf+0x34c5>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%edx
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807c20b <do_ipnetconf+0x2afb>
lea    0x50(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f790 <get_u8>
test   %eax,%eax
jne    807cbc2 <do_ipnetconf+0x34b2>
movzbl 0x50(%esp),%eax
shl    $0x14,%eax
bswap  %eax
and    $0xf00f,%eax
or     %eax,0x3c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
mov    0x4(%ebx),%eax
movl   $0x808648d,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x8086499,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
movl   $0x8085f37,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807cb54 <do_ipnetconf+0x3444>
movl   $0x808ca3d,0x4(%esp)
mov    (%ebx),%eax
mov    %eax,(%esp)
call   80801a0 <matches>
test   %eax,%eax
je     807cb54 <do_ipnetconf+0x3444>
mov    (%ebx),%edx
mov    $0x80864a8,%edi
mov    $0xa,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807cc2c <do_ipnetconf+0x351c>
cmpb   $0x66,(%edx)
jne    807cc8a <do_ipnetconf+0x357a>
cmpb   $0x6c,0x1(%edx)
jne    807cc8a <do_ipnetconf+0x357a>
cmpb   $0x0,0x2(%edx)
jne    807cc8a <do_ipnetconf+0x357a>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%edx
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807c20b <do_ipnetconf+0x2afb>
lea    0x50(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   807f6a0 <get_u32>
test   %eax,%eax
jne    807ccd1 <do_ipnetconf+0x35c1>
mov    0x50(%esp),%eax
cmp    $0xfffff,%eax
ja     807ccd1 <do_ipnetconf+0x35c1>
bswap  %eax
and    $0xffff0f00,%eax
or     %eax,0x3c(%esp)
jmp    807c20b <do_ipnetconf+0x2afb>
mov    $0x8088c6f,%edi
mov    $0x5,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    807cce4 <do_ipnetconf+0x35d4>
lea    0x4(%ebx),%eax
sub    $0x1,%ebp
mov    %eax,0x1c(%esp)
je     807c846 <do_ipnetconf+0x3136>
mov    0x4(%ebx),%ebx
mov    $0x80863b4,%edi
mov    $0x8,%ecx
mov    %ebx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807c20b <do_ipnetconf+0x2afb>
mov    %ebx,0x4(%esp)
movl   $0x80864c4,(%esp)
call   80800b0 <invarg>
mov    0x4(%ebx),%eax
movl   $0x80864b2,(%esp)
mov    %eax,0x4(%esp)
call   80800b0 <invarg>
mov    0x8095c40,%eax
movl   $0x3b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808a774,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x45,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c1bc,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x36,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x80857f8,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c204,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x34,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c234,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808c26c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804ba50 <fputc@plt>
mov    0x8095c40,%eax
movl   $0x1b,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808640b,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x808618c,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x40,0xc(%esp)
movl   $0x808c29c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086270,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x4,0xc(%esp)
movl   $0x80861b0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x8095c40,%eax
movl   $0x2c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086210,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
mov    0x8095c40,%eax
movl   $0x2f,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8086240,(%esp)
mov    %eax,0xc(%esp)
call   804b710 <fwrite@plt>
jmp    807cac1 <do_ipnetconf+0x33b1>
nop
push   %ebp
mov    $0x105,%ecx
push   %edi
mov    $0x1,%edx
push   %esi
push   %ebx
sub    $0x46c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x45c(%esp)
xor    %eax,%eax
lea    0x48(%esp),%edi
mov    0x484(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x170ed,%ebx
mov    0x480(%esp),%ebp
rep stos %eax,%es:(%edi)
mov    $0x10,%eax
mov    %esi,(%esp)
mov    %dx,0x4e(%esp)
movl   $0x14,0x48(%esp)
mov    %ax,0x4c(%esp)
movb   $0x3,0x58(%esp)
call   804b880 <strlen@plt>
mov    %esi,0xc(%esp)
lea    0x48(%esp),%esi
movl   $0x2,0x8(%esp)
movl   $0x414,0x4(%esp)
mov    %esi,(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
call   807ea10 <addattr_l>
mov    %esi,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
call   807e090 <rtnl_talk>
test   %eax,%eax
js     807d074 <genl_resolve_family+0x194>
movzwl 0x4c(%esp),%edx
mov    0x48(%esp),%eax
cmp    $0x10,%dx
jne    807d040 <genl_resolve_family+0x160>
sub    $0x14,%eax
js     807d0a8 <genl_resolve_family+0x1c8>
movzbl 0x58(%esp),%edx
cmp    $0x1,%dl
jne    807d010 <genl_resolve_family+0x130>
mov    %eax,0xc(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x28(%esp),%eax
movl   $0x7,0x4(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     807d0b7 <genl_resolve_family+0x1d7>
movzwl 0x4(%eax),%eax
mov    0x45c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    807d0eb <genl_resolve_family+0x20b>
add    $0x46c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edx,0xc(%esp)
lea    -0x7ca4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807cfeb <genl_resolve_family+0x10b>
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
lea    -0x7d00(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807cfeb <genl_resolve_family+0x10b>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x1c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7d37(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    $0xfffffffe,%eax
jmp    807cfeb <genl_resolve_family+0x10b>
mov    %eax,0xc(%esp)
lea    -0x7cc8(%ebx),%eax
jmp    807d01a <genl_resolve_family+0x13a>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x16,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7d1a(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807cfeb <genl_resolve_family+0x10b>
call   8082850 <__libc_csu_fini+0x10>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xbc,%esp
mov    0xd4(%esp),%ebp
call   804d560 <_start+0x2d>
add    $0x16efa,%ebx
movzwl 0x4(%ebp),%ecx
lea    -0x10(%ecx),%eax
cmp    $0x1,%ax
jbe    807d128 <ll_remember_index+0x38>
xor    %eax,%eax
add    $0xbc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x0(%ebp),%edx
cmp    $0x13,%edx
jbe    807d25f <ll_remember_index+0x16f>
mov    0x14(%ebp),%eax
mov    %eax,%esi
and    $0x3ff,%esi
mov    0x3540(%ebx,%esi,4),%esi
test   %esi,%esi
jne    807d15a <ll_remember_index+0x6a>
jmp    807d270 <ll_remember_index+0x180>
nop
mov    (%esi),%esi
test   %esi,%esi
je     807d270 <ll_remember_index+0x180>
cmp    0x14(%esi),%eax
lea    0x0(%esi),%esi
jne    807d150 <ll_remember_index+0x60>
cmp    $0x11,%cx
jne    807d19a <ll_remember_index+0xaa>
mov    0x8(%esi),%eax
mov    0xc(%esi),%edx
test   %eax,%eax
mov    %eax,(%edx)
je     807d177 <ll_remember_index+0x87>
mov    %edx,0x4(%eax)
mov    (%esi),%eax
mov    0x4(%esi),%edx
test   %eax,%eax
mov    %eax,(%edx)
je     807d185 <ll_remember_index+0x95>
mov    %edx,0x4(%eax)
mov    %esi,(%esp)
call   804b5b0 <free@plt>
add    $0xbc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
mov    $0x23,%ecx
lea    0x24(%esp),%edi
sub    $0x20,%edx
mov    %edi,0x1c(%esp)
rep stos %eax,%es:(%edi)
mov    0x1c(%esp),%edi
lea    0x20(%ebp),%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x22,0x4(%esp)
mov    %edi,(%esp)
call   807f0b0 <parse_rtattr>
mov    0x30(%esp),%edx
mov    %edx,%edi
add    $0x4,%edi
mov    %edx,0x1c(%esp)
je     807d119 <ll_remember_index+0x29>
lea    0x1a(%esi),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     807d24c <ll_remember_index+0x15c>
mov    0x8(%esi),%eax
mov    0xc(%esi),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
mov    %eax,(%ecx)
je     807d206 <ll_remember_index+0x116>
mov    %ecx,0x4(%eax)
movsbl 0x4(%edx),%eax
test   %al,%al
je     807d269 <ll_remember_index+0x179>
mov    $0x1505,%edx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,%ecx
add    $0x1,%edi
shl    $0x5,%ecx
add    %ecx,%eax
add    %eax,%edx
movsbl (%edi),%eax
test   %al,%al
jne    807d218 <ll_remember_index+0x128>
and    $0x3ff,%edx
lea    0x2540(%ebx,%edx,4),%eax
mov    (%eax),%edx
lea    0x8(%esi),%ecx
test   %edx,%edx
mov    %edx,0x8(%esi)
je     807d247 <ll_remember_index+0x157>
mov    %ecx,0x4(%edx)
mov    %ecx,(%eax)
mov    %eax,0xc(%esi)
mov    0x18(%ebp),%eax
mov    %eax,0x10(%esi)
add    $0xbc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    807d11b <ll_remember_index+0x2b>
mov    $0x105,%edx
jmp    807d231 <ll_remember_index+0x141>
cmp    $0x11,%cx
je     807d119 <ll_remember_index+0x29>
lea    0x24(%esp),%esi
xor    %eax,%eax
mov    %esi,%edi
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
sub    $0x20,%edx
lea    0x20(%ebp),%eax
mov    %esi,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x22,0x4(%esp)
call   807f0b0 <parse_rtattr>
mov    0x30(%esp),%edi
mov    %edi,%esi
add    $0x4,%esi
je     807d119 <ll_remember_index+0x29>
movl   $0x2c,(%esp)
call   804b7a0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ecx
je     807d119 <ll_remember_index+0x29>
mov    0x14(%ebp),%eax
mov    %ecx,0x1c(%esp)
mov    %eax,0x14(%ecx)
lea    0x1a(%ecx),%eax
movl   $0x12,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b9b0 <__strcpy_chk@plt>
movzwl 0x12(%ebp),%eax
mov    0x1c(%esp),%ecx
mov    %ax,0x18(%ecx)
mov    0x18(%ebp),%eax
mov    %eax,0x10(%ecx)
mov    0x14(%ebp),%eax
and    $0x3ff,%eax
lea    0x3540(%ebx,%eax,4),%eax
mov    (%eax),%edx
test   %edx,%edx
mov    %edx,(%ecx)
je     807d319 <ll_remember_index+0x229>
mov    %ecx,0x4(%edx)
mov    %ecx,(%eax)
mov    %eax,0x4(%ecx)
movsbl 0x4(%edi),%edx
test   %dl,%dl
je     807d368 <ll_remember_index+0x278>
mov    $0x1505,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%edi
add    $0x1,%esi
shl    $0x5,%edi
add    %edi,%edx
add    %edx,%eax
movsbl (%esi),%edx
test   %dl,%dl
jne    807d330 <ll_remember_index+0x240>
and    $0x3ff,%eax
lea    0x2540(%ebx,%eax,4),%eax
mov    (%eax),%edx
lea    0x8(%ecx),%esi
test   %edx,%edx
mov    %edx,0x8(%ecx)
je     807d35e <ll_remember_index+0x26e>
mov    %esi,0x4(%edx)
mov    %esi,(%eax)
mov    %eax,0xc(%ecx)
jmp    807d119 <ll_remember_index+0x29>
mov    $0x105,%eax
jmp    807d348 <ll_remember_index+0x258>
nop
push   %esi
push   %ebx
sub    $0x24,%esp
call   804d560 <_start+0x2d>
add    $0x16c86,%ebx
mov    0x30(%esp),%esi
test   %esi,%esi
lea    -0x7c85(%ebx),%eax
je     807d3b6 <ll_idx_n2a+0x46>
mov    %esi,%eax
and    $0x3ff,%eax
mov    0x3540(%ebx,%eax,4),%eax
test   %eax,%eax
jne    807d3ae <ll_idx_n2a+0x3e>
jmp    807d3c0 <ll_idx_n2a+0x50>
lea    0x0(%esi),%esi
mov    (%eax),%eax
test   %eax,%eax
je     807d3c0 <ll_idx_n2a+0x50>
cmp    0x14(%eax),%esi
jne    807d3a8 <ll_idx_n2a+0x38>
add    $0x1a,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b950 <if_indextoname@plt>
test   %eax,%eax
je     807d3de <ll_idx_n2a+0x6e>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    -0x7c83(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x34(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x10,0x4(%esp)
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
jmp    807d3b6 <ll_idx_n2a+0x46>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x16bda,%ebx
sub    $0x18,%esp
lea    0x2524(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807d370 <ll_idx_n2a>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
call   807d661 <ll_init_map+0xc1>
add    $0x16ba7,%ecx
test   %edx,%edx
je     807d488 <ll_index_to_type+0x38>
mov    %edx,%eax
and    $0x3ff,%eax
mov    0x3540(%ecx,%eax,4),%eax
test   %eax,%eax
jne    807d47e <ll_index_to_type+0x2e>
jmp    807d488 <ll_index_to_type+0x38>
nop
mov    (%eax),%eax
test   %eax,%eax
je     807d488 <ll_index_to_type+0x38>
cmp    0x14(%eax),%edx
jne    807d478 <ll_index_to_type+0x28>
movzwl 0x18(%eax),%eax
ret
mov    $0xffffffff,%eax
ret
xchg   %ax,%ax
mov    0x4(%esp),%edx
xor    %eax,%eax
call   807d661 <ll_init_map+0xc1>
add    $0x16b65,%ecx
test   %edx,%edx
je     807d4ce <ll_index_to_flags+0x3e>
mov    %edx,%eax
and    $0x3ff,%eax
mov    0x3540(%ecx,%eax,4),%eax
test   %eax,%eax
jne    807d4c6 <ll_index_to_flags+0x36>
jmp    807d4d0 <ll_index_to_flags+0x40>
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%eax
test   %eax,%eax
je     807d4d0 <ll_index_to_flags+0x40>
cmp    0x14(%eax),%edx
jne    807d4c0 <ll_index_to_flags+0x30>
mov    0x10(%eax),%eax
repz ret
mov    $0xffffffff,%eax
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
xor    %eax,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%edi
call   804d560 <_start+0x2d>
add    $0x16b0f,%ebx
test   %edi,%edi
je     807d55c <ll_name_to_index+0x7c>
movsbl (%edi),%eax
test   %al,%al
je     807d598 <ll_name_to_index+0xb8>
mov    %edi,%ecx
mov    $0x1505,%edx
lea    0x0(%esi),%esi
mov    %edx,%esi
add    $0x1,%ecx
shl    $0x5,%esi
add    %esi,%eax
add    %eax,%edx
movsbl (%ecx),%eax
test   %al,%al
jne    807d510 <ll_name_to_index+0x30>
and    $0x3ff,%edx
mov    0x2540(%ebx,%edx,4),%esi
test   %esi,%esi
jne    807d53e <ll_name_to_index+0x5e>
jmp    807d568 <ll_name_to_index+0x88>
xchg   %ax,%ax
mov    (%esi),%esi
test   %esi,%esi
je     807d568 <ll_name_to_index+0x88>
lea    0x12(%esi),%eax
movl   $0x10,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804baf0 <strncmp@plt>
test   %eax,%eax
jne    807d538 <ll_name_to_index+0x58>
mov    0xc(%esi),%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   804b760 <if_nametoindex@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
jne    807d55c <ll_name_to_index+0x7c>
lea    0x1c(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x7c7e(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804ba60 <sscanf@plt>
mov    0x1c(%esp),%eax
jmp    807d55c <ll_name_to_index+0x7c>
mov    $0x105,%edx
jmp    807d529 <ll_name_to_index+0x49>
nop
push   %ebx
call   804d560 <_start+0x2d>
add    $0x16a5a,%ebx
sub    $0x18,%esp
mov    0x2520(%ebx),%eax
test   %eax,%eax
je     807d5c0 <ll_init_map+0x20>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
mov    0x20(%esp),%eax
movl   $0x12,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   807d9e0 <rtnl_wilddump_request>
test   %eax,%eax
js     807d611 <ll_init_map+0x71>
lea    -0x16f10(%ebx),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807e040 <rtnl_dump_filter>
test   %eax,%eax
js     807d62b <ll_init_map+0x8b>
movl   $0x1,0x2520(%ebx)
00
add    $0x18,%esp
pop    %ebx
ret
lea    -0x1110e(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x10c0b(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    (%esp),%ecx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x16982,%ebx
mov    (%esi),%eax
test   %eax,%eax
js     807d698 <rtnl_close+0x28>
mov    %eax,(%esp)
call   804bb60 <close@plt>
movl   $0xffffffff,(%esi)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
push   %edi
mov    $0x24,%edx
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x40(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x1694c,%ebx
movl   $0x8000,0x2c(%esp)
test   $0x1,%esi
mov    %esi,%edi
jne    807d820 <rtnl_open_byproto+0x180>
test   $0x2,%edi
jne    807d838 <rtnl_open_byproto+0x198>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     807d6f3 <rtnl_open_byproto+0x53>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
and    $0x1,%edx
je     807d6fb <rtnl_open_byproto+0x5b>
movb   $0x0,(%edi)
mov    0x48(%esp),%eax
movl   $0x80003,0x4(%esp)
movl   $0x10,(%esp)
mov    %eax,0x8(%esp)
call   804bac0 <socket@plt>
test   %eax,%eax
mov    %eax,(%esi)
js     807d898 <rtnl_open_byproto+0x1f8>
lea    0x2c(%esp),%edx
movl   $0x4,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804b520 <setsockopt@plt>
test   %eax,%eax
js     807d8b0 <rtnl_open_byproto+0x210>
lea    0x3d4(%ebx),%eax
movl   $0x4,0x10(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   804b520 <setsockopt@plt>
test   %eax,%eax
js     807d8c8 <rtnl_open_byproto+0x228>
lea    0x4(%esi),%edi
mov    $0x10,%eax
movl   $0x0,0x4(%esi)
movl   $0x0,0x4(%edi)
mov    %ax,0x4(%esi)
mov    0x44(%esp),%eax
mov    %eax,0xc(%esi)
movl   $0xc,0x8(%esp)
mov    %edi,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   804b8d0 <bind@plt>
test   %eax,%eax
js     807d8e0 <rtnl_open_byproto+0x240>
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    (%esi),%eax
movl   $0xc,0x28(%esp)
mov    %eax,(%esp)
call   804ba80 <getsockname@plt>
test   %eax,%eax
js     807d8f8 <rtnl_open_byproto+0x258>
mov    0x28(%esp),%eax
cmp    $0xc,%eax
jne    807d888 <rtnl_open_byproto+0x1e8>
movzwl 0x4(%esi),%eax
cmp    $0x10,%ax
jne    807d850 <rtnl_open_byproto+0x1b0>
movl   $0x0,(%esp)
call   804b610 <time@plt>
mov    %eax,0x1c(%esi)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%esi),%edi
mov    $0x23,%dl
test   $0x2,%edi
movb   $0x0,(%esi)
je     807d6dc <rtnl_open_byproto+0x3c>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
sub    $0x2,%edx
jmp    807d6dc <rtnl_open_byproto+0x3c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0xc(%esp)
lea    -0x7c03(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x30,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %eax,0xc(%esp)
lea    -0x7c1c(%ebx),%eax
jmp    807d85a <rtnl_open_byproto+0x1ba>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x7c79(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807d812 <rtnl_open_byproto+0x172>
lea    -0x7c5e(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807d812 <rtnl_open_byproto+0x172>
lea    -0x7c54(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807d812 <rtnl_open_byproto+0x172>
lea    -0x7c4a(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807d812 <rtnl_open_byproto+0x172>
lea    -0x7c2f(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807d812 <rtnl_open_byproto+0x172>
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x166e3,%ebx
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807d6a0 <rtnl_open_byproto>
add    $0x18,%esp
pop    %ebx
ret
push   %edi
xor    %eax,%eax
push   %esi
mov    $0xa,%ecx
push   %ebx
sub    $0x40,%esp
lea    0x18(%esp),%esi
mov    0x50(%esp),%edx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    0x58(%esp),%eax
mov    $0x1d,%ecx
call   804d560 <_start+0x2d>
add    $0x16699,%ebx
mov    $0x8,%edi
mov    %di,0x38(%esp)
movl   $0x28,0x18(%esp)
mov    %ax,0x1c(%esp)
mov    $0x301,%eax
mov    %ax,0x1e(%esp)
mov    0x1c(%edx),%eax
mov    %cx,0x3a(%esp)
add    $0x1,%eax
mov    %eax,0x1c(%edx)
mov    %eax,0x20(%edx)
mov    %eax,0x20(%esp)
mov    0x54(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x0,0xc(%esp)
movl   $0x28,0x8(%esp)
mov    %al,0x28(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0x3c(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   804bba0 <send@plt>
add    $0x40,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x16613,%ebx
movl   $0x1,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807d940 <rtnl_wilddump_req_filter>
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x165d3,%ebx
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bba0 <send@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x420,%esp
mov    %gs:0x14,%eax
mov    %eax,0x41c(%esp)
xor    %eax,%eax
mov    0x438(%esp),%eax
mov    0x430(%esp),%edi
call   804d560 <_start+0x2d>
add    $0x16575,%ebx
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x434(%esp),%eax
mov    %eax,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   804bba0 <send@plt>
test   %eax,%eax
js     807db1b <rtnl_send_check+0xbb>
lea    0x1c(%esp),%esi
movl   $0x42,0xc(%esp)
movl   $0x400,0x8(%esp)
mov    %esi,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   804bb50 <recv@plt>
test   %eax,%eax
js     807db38 <rtnl_send_check+0xd8>
cmp    $0xf,%eax
jle    807db19 <rtnl_send_check+0xb9>
mov    0x1c(%esp),%edx
cmp    $0xf,%edx
jbe    807db19 <rtnl_send_check+0xb9>
cmp    %edx,%eax
jb     807db19 <rtnl_send_check+0xb9>
cmpw   $0x2,0x20(%esp)
jne    807db0a <rtnl_send_check+0xaa>
jmp    807db50 <rtnl_send_check+0xf0>
mov    (%esi),%edx
cmp    $0xf,%edx
jbe    807db19 <rtnl_send_check+0xb9>
cmp    %eax,%edx
ja     807db19 <rtnl_send_check+0xb9>
cmpw   $0x2,0x4(%esi)
je     807db50 <rtnl_send_check+0xf0>
add    $0x3,%edx
and    $0xfffffffc,%edx
sub    %edx,%eax
add    %edx,%esi
cmp    $0xf,%eax
jg     807daf8 <rtnl_send_check+0x98>
xor    %eax,%eax
mov    0x41c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    807db99 <rtnl_send_check+0x139>
add    $0x420,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   804b970 <__errno_location@plt>
cmpl   $0xb,(%eax)
setne  %al
movzbl %al,%eax
neg    %eax
jmp    807db1b <rtnl_send_check+0xbb>
lea    0x0(%esi),%esi
cmp    $0x23,%edx
jbe    807db68 <rtnl_send_check+0x108>
call   804b970 <__errno_location@plt>
mov    0x10(%esi),%edx
neg    %edx
mov    %edx,(%eax)
mov    $0xffffffff,%eax
jmp    807db1b <rtnl_send_check+0xbb>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bea(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807db1b <rtnl_send_check+0xbb>
call   8082850 <__libc_csu_fini+0x10>
xchg   %ax,%ax
push   %ebx
mov    $0x10,%edx
sub    $0x68,%esp
lea    0x24(%esp),%eax
mov    0x7c(%esp),%ecx
call   804d560 <_start+0x2d>
add    $0x1644a,%ebx
mov    %eax,0x34(%esp)
mov    0x78(%esp),%eax
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %dx,0x18(%esp)
lea    0x44(%esp),%edx
mov    %eax,0x3c(%esp)
xor    %eax,%eax
movl   $0x0,0x20(%esp)
movl   $0x10,0x38(%esp)
mov    %ecx,0x40(%esp)
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     807dbf7 <rtnl_dump_request+0x57>
lea    0x18(%esp),%eax
add    $0x10,%ecx
mov    %eax,0x44(%esp)
lea    0x34(%esp),%eax
mov    %eax,0x4c(%esp)
mov    0x74(%esp),%eax
mov    %ecx,0x24(%esp)
mov    0x70(%esp),%ecx
movl   $0xc,0x48(%esp)
movl   $0x2,0x50(%esp)
mov    %ax,0x28(%esp)
mov    $0x301,%eax
mov    %ax,0x2a(%esp)
mov    0x70(%esp),%eax
movl   $0x0,0x30(%esp)
mov    0x1c(%eax),%eax
mov    %eax,0xc(%esp)
add    $0x1,%eax
mov    %eax,0x1c(%ecx)
mov    %eax,0x20(%ecx)
mov    %eax,0x2c(%esp)
movl   $0x0,0x8(%esp)
mov    %edx,0x4(%esp)
mov    (%ecx),%eax
mov    %eax,(%esp)
call   804ba20 <sendmsg@plt>
add    $0x68,%esp
pop    %ebx
ret
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x408c,%esp
mov    0x40a4(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x1636a,%ebx
mov    0x40a0(%esp),%ebp
mov    %eax,0x3c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x407c(%esp)
xor    %eax,%eax
lea    0x60(%esp),%eax
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    0x34(%esp),%edx
movl   $0x0,(%edx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     807dcc0 <rtnl_dump_filter_l+0x40>
lea    0x54(%esp),%eax
mov    %eax,0x30(%esp)
mov    %eax,0x60(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x68(%esp)
lea    0x7c(%esp),%eax
movl   $0xc,0x64(%esp)
movl   $0x1,0x6c(%esp)
mov    %eax,0x2c(%esp)
mov    %eax,0x4c(%esp)
movl   $0x0,0x24(%esp)
mov    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x4000,0x50(%esp)
mov    %eax,0x4(%esp)
mov    0x0(%ebp),%eax
mov    %eax,(%esp)
call   804ba70 <recvmsg@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
js     807deb0 <rtnl_dump_filter_l+0x230>
je     807dfc3 <rtnl_dump_filter_l+0x343>
mov    0x3c(%esp),%eax
mov    (%eax),%edx
test   %edx,%edx
je     807df65 <rtnl_dump_filter_l+0x2e5>
mov    %eax,0x20(%esp)
movl   $0x0,0x38(%esp)
lea    0x0(%esi),%esi
mov    0x28(%esp),%ecx
cmp    $0xf,%ecx
jle    807de41 <rtnl_dump_filter_l+0x1c1>
mov    0x7c(%esp),%edx
cmp    $0xf,%edx
jbe    807de41 <rtnl_dump_filter_l+0x1c1>
cmp    %edx,%ecx
mov    %ecx,%edi
jb     807de41 <rtnl_dump_filter_l+0x1c1>
mov    0x2c(%esp),%esi
jmp    807ddbc <rtnl_dump_filter_l+0x13c>
lea    0x0(%esi),%esi
mov    (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%edi
add    %eax,%esi
cmp    $0xf,%edi
mov    %edi,%ecx
jle    807de48 <rtnl_dump_filter_l+0x1c8>
mov    (%esi),%edx
cmp    $0xf,%edx
jbe    807de48 <rtnl_dump_filter_l+0x1c8>
cmp    %edi,%edx
ja     807de48 <rtnl_dump_filter_l+0x1c8>
mov    %ecx,%edi
mov    0x58(%esp),%eax
test   %eax,%eax
jne    807dd90 <rtnl_dump_filter_l+0x110>
mov    0x8(%ebp),%eax
cmp    %eax,0xc(%esi)
jne    807dd90 <rtnl_dump_filter_l+0x110>
mov    0x20(%ebp),%eax
cmp    %eax,0x8(%esi)
jne    807dd90 <rtnl_dump_filter_l+0x110>
testb  $0x10,0x6(%esi)
mov    $0x1,%eax
cmove  0x24(%esp),%eax
mov    %eax,0x24(%esp)
movzwl 0x4(%esi),%eax
cmp    $0x3,%ax
je     807df45 <rtnl_dump_filter_l+0x2c5>
cmp    $0x2,%ax
je     807df08 <rtnl_dump_filter_l+0x288>
mov    0x20(%esp),%edx
mov    0x4(%edx),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   *(%edx)
test   %eax,%eax
jns    807dd90 <rtnl_dump_filter_l+0x110>
mov    %eax,%esi
mov    0x407c(%esp),%edx
xor    %gs:0x14,%edx
mov    %esi,%eax
jne    807e034 <rtnl_dump_filter_l+0x3b4>
add    $0x408c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x28(%esp),%ecx
lea    0x0(%esi),%esi
addl   $0x8,0x20(%esp)
mov    0x20(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
jne    807dd60 <rtnl_dump_filter_l+0xe0>
mov    0x38(%esp),%edx
test   %edx,%edx
jne    807dff7 <rtnl_dump_filter_l+0x377>
testb  $0x20,0x78(%esp)
jne    807df70 <rtnl_dump_filter_l+0x2f0>
test   %ecx,%ecx
je     807dd0b <rtnl_dump_filter_l+0x8b>
lea    -0x7ba4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    (%eax),%esi
cmp    $0xb,%esi
je     807dd0b <rtnl_dump_filter_l+0x8b>
cmp    $0x4,%esi
je     807dd0b <rtnl_dump_filter_l+0x8b>
mov    %esi,(%esp)
call   804b7d0 <strerror@plt>
mov    %esi,0x10(%esp)
mov    $0xffffffff,%esi
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7aac(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807de20 <rtnl_dump_filter_l+0x1a0>
lea    0x0(%esi),%esi
cmp    $0x23,%edx
ja     807df9f <rtnl_dump_filter_l+0x31f>
mov    -0x28(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bea(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807de20 <rtnl_dump_filter_l+0x1a0>
addl   $0x8,0x20(%esp)
mov    0x20(%esp),%eax
movl   $0x1,0x38(%esp)
mov    (%eax),%esi
test   %esi,%esi
jne    807dd60 <rtnl_dump_filter_l+0xe0>
jmp    807de5b <rtnl_dump_filter_l+0x1db>
testb  $0x20,0x78(%esp)
je     807dd0b <rtnl_dump_filter_l+0x8b>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bb7(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807dd0b <rtnl_dump_filter_l+0x8b>
call   804b970 <__errno_location@plt>
mov    0x10(%esi),%edx
mov    $0xffffffff,%esi
neg    %edx
mov    %edx,(%eax)
lea    -0x7bc9(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
jmp    807de20 <rtnl_dump_filter_l+0x1a0>
mov    -0x28(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bd9(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807de20 <rtnl_dump_filter_l+0x1a0>
mov    0x24(%esp),%eax
xor    %esi,%esi
test   %eax,%eax
je     807de20 <rtnl_dump_filter_l+0x1a0>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7a8c(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807de20 <rtnl_dump_filter_l+0x1a0>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x15fb3,%ebx
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x14(%esp)
lea    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807dc80 <rtnl_dump_filter_l>
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x407c,%esp
mov    0x4090(%esp),%eax
mov    0x40a0(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x15f53,%ebx
mov    0x4098(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x4094(%esp),%eax
mov    %esi,0x2c(%esp)
mov    %gs:0x14,%esi
mov    %esi,0x406c(%esp)
xor    %esi,%esi
lea    0x50(%esp),%esi
mov    %esi,0x1c(%esp)
mov    (%eax),%ecx
mov    %eax,0x3c(%esp)
mov    %ecx,0x40(%esp)
xor    %ecx,%ecx
mov    0x1c(%esp),%esi
movl   $0x0,(%esi,%ecx,1)
add    $0x4,%ecx
cmp    $0x1c,%ecx
jb     807e0ed <rtnl_talk+0x5d>
mov    0x18(%esp),%edi
lea    0x44(%esp),%ecx
mov    %ecx,0x50(%esp)
lea    0x3c(%esp),%ecx
mov    %ecx,0x58(%esp)
mov    $0x10,%ecx
movl   $0x0,0x44(%esp)
mov    0x1c(%edi),%esi
mov    %cx,0x44(%esp)
mov    0x409c(%esp),%ecx
movl   $0xc,0x54(%esp)
movl   $0x1,0x5c(%esp)
mov    %esi,0x20(%esp)
add    $0x1,%esi
mov    %esi,0x1c(%edi)
mov    %esi,0x24(%esp)
mov    %esi,0x8(%eax)
mov    0x2c(%esp),%esi
mov    %edx,0x48(%esp)
mov    %ecx,0x4c(%esp)
test   %esi,%esi
jne    807e166 <rtnl_talk+0xd6>
orw    $0x4,0x6(%eax)
mov    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804ba20 <sendmsg@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
js     807e477 <rtnl_talk+0x3e7>
lea    0x6c(%esp),%eax
movl   $0x4000,0x8(%esp)
mov    %eax,%esi
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x28(%esp)
call   804b910 <memset@plt>
mov    0x20(%esp),%edx
mov    %esi,0x3c(%esp)
mov    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edx,0x20(%esp)
movl   $0x4000,0x40(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804ba70 <recvmsg@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
mov    %eax,%esi
js     807e368 <rtnl_talk+0x2d8>
je     807e3f7 <rtnl_talk+0x367>
mov    0x54(%esp),%eax
cmp    $0xc,%eax
jne    807e48f <rtnl_talk+0x3ff>
mov    0x28(%esp),%ebp
jmp    807e222 <rtnl_talk+0x192>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x3(%edi),%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
add    %eax,%ebp
cmp    $0xf,%esi
jbe    807e2c0 <rtnl_talk+0x230>
mov    0x0(%ebp),%edi
cmp    %esi,%edi
lea    -0x10(%edi),%eax
jg     807e308 <rtnl_talk+0x278>
mov    %eax,%ecx
shr    $0x1f,%ecx
test   %cl,%cl
jne    807e308 <rtnl_talk+0x278>
cmp    0x48(%esp),%edx
jne    807e218 <rtnl_talk+0x188>
mov    0x18(%esp),%ecx
mov    0x8(%ecx),%ecx
cmp    %ecx,0xc(%ebp)
jne    807e218 <rtnl_talk+0x188>
mov    0x24(%esp),%ecx
cmp    0x8(%ebp),%ecx
jne    807e218 <rtnl_talk+0x188>
cmpw   $0x2,0x4(%ebp)
je     807e42b <rtnl_talk+0x39b>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    807e45c <rtnl_talk+0x3cc>
mov    -0x28(%ebx),%eax
add    $0x3,%edi
and    $0xfffffffc,%edi
sub    %edi,%esi
add    %edi,%ebp
mov    %edx,0x20(%esp)
mov    (%eax),%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7b0f(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
cmp    $0xf,%esi
mov    0x20(%esp),%edx
ja     807e22b <rtnl_talk+0x19b>
lea    0x0(%esi),%esi
testb  $0x20,0x68(%esp)
jne    807e3c0 <rtnl_talk+0x330>
test   %esi,%esi
je     807e1c2 <rtnl_talk+0x132>
mov    %esi,0xc(%esp)
lea    -0x7ba4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
testb  $0x20,0x68(%esp)
je     807e4a3 <rtnl_talk+0x413>
mov    -0x28(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7b57(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    0x406c(%esp),%edx
xor    %gs:0x14,%edx
mov    %esi,%eax
jne    807e49e <rtnl_talk+0x40e>
add    $0x407c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
mov    0x20(%esp),%edx
mov    (%eax),%esi
cmp    $0xb,%esi
je     807e1c2 <rtnl_talk+0x132>
cmp    $0x4,%esi
je     807e1c2 <rtnl_talk+0x132>
mov    %esi,(%esp)
call   804b7d0 <strerror@plt>
mov    %esi,0x10(%esp)
mov    $0xffffffff,%esi
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7aac(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
jmp    807e342 <rtnl_talk+0x2b2>
xchg   %ax,%ax
mov    -0x28(%ebx),%eax
mov    %edx,0x20(%esp)
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bb7(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    0x20(%esp),%edx
jmp    807e1c2 <rtnl_talk+0x132>
mov    -0x28(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bd9(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807e342 <rtnl_talk+0x2b2>
cmp    $0x13,%eax
jbe    807e4f8 <rtnl_talk+0x468>
mov    0x10(%ebp),%esi
test   %esi,%esi
jne    807e4b2 <rtnl_talk+0x422>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     807e342 <rtnl_talk+0x2b2>
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
jmp    807e342 <rtnl_talk+0x2b2>
mov    0x2c(%esp),%eax
xor    %esi,%esi
mov    %edi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b5e0 <memcpy@plt>
jmp    807e342 <rtnl_talk+0x2b2>
lea    -0x7b8d(%ebx),%eax
mov    $0xffffffff,%esi
mov    %eax,(%esp)
call   804b700 <perror@plt>
jmp    807e342 <rtnl_talk+0x2b2>
mov    %eax,0xc(%esp)
lea    -0x7b74(%ebx),%eax
jmp    807e2dd <rtnl_talk+0x24d>
call   8082850 <__libc_csu_fini+0x10>
mov    %edi,0xc(%esp)
lea    -0x7b44(%ebx),%eax
jmp    807e2dd <rtnl_talk+0x24d>
neg    %esi
mov    %esi,(%esp)
mov    $0xffffffff,%esi
call   804b7d0 <strerror@plt>
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7b26(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
call   804b970 <__errno_location@plt>
mov    0x10(%ebp),%edx
neg    %edx
mov    %edx,(%eax)
jmp    807e342 <rtnl_talk+0x2b2>
mov    -0x28(%ebx),%eax
mov    $0xffffffff,%esi
mov    (%eax),%eax
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bea(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807e342 <rtnl_talk+0x2b2>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x207c,%esp
mov    0x2090(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x15aba,%ebx
mov    %eax,0x28(%esp)
mov    0x2094(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x2098(%esp),%eax
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x206c(%esp)
xor    %eax,%eax
lea    0x50(%esp),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
mov    0x24(%esp),%ecx
movl   $0x0,(%ecx,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     807e57f <rtnl_listen+0x4f>
lea    0x44(%esp),%eax
mov    %eax,0x20(%esp)
mov    %eax,0x50(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x58(%esp)
mov    $0x10,%eax
movl   $0x0,0x44(%esp)
mov    %ax,0x44(%esp)
lea    0x6c(%esp),%eax
movl   $0xc,0x54(%esp)
movl   $0x1,0x5c(%esp)
movl   $0x0,0x48(%esp)
movl   $0x0,0x4c(%esp)
mov    %eax,0x2c(%esp)
mov    %eax,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x2000,0x40(%esp)
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804ba70 <recvmsg@plt>
test   %eax,%eax
js     807e6f0 <rtnl_listen+0x1c0>
je     807e7cf <rtnl_listen+0x29f>
mov    0x54(%esp),%edx
cmp    $0xc,%edx
jne    807e812 <rtnl_listen+0x2e2>
cmp    $0xf,%eax
mov    %eax,%esi
jbe    807e799 <rtnl_listen+0x269>
mov    0x6c(%esp),%ebp
cmp    %ebp,%eax
jl     807e6b2 <rtnl_listen+0x182>
mov    %ebp,%eax
sub    $0x10,%eax
js     807e6b2 <rtnl_listen+0x182>
mov    0x2c(%esp),%edi
mov    %edi,%eax
mov    %ebp,%edi
mov    %eax,%ebp
jmp    807e673 <rtnl_listen+0x143>
nop
lea    0x3(%edi),%edx
and    $0xfffffffc,%edx
sub    %edx,%esi
add    %edx,%ebp
cmp    $0xf,%esi
mov    %esi,%eax
jbe    807e758 <rtnl_listen+0x228>
mov    0x0(%ebp),%edi
cmp    %esi,%edi
jg     807e6b0 <rtnl_listen+0x180>
mov    %edi,%eax
sub    $0x10,%eax
js     807e6b0 <rtnl_listen+0x180>
mov    0x1c(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    0x18(%esp),%eax
call   *%eax
test   %eax,%eax
jns    807e650 <rtnl_listen+0x120>
mov    0x206c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    807e80d <rtnl_listen+0x2dd>
add    $0x207c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    %edi,%ebp
testb  $0x20,0x68(%esp)
je     807e7fe <rtnl_listen+0x2ce>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7b57(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807e690 <rtnl_listen+0x160>
xchg   %ax,%ax
call   804b970 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0xb,%esi
je     807e5e8 <rtnl_listen+0xb8>
cmp    $0x4,%esi
je     807e5e8 <rtnl_listen+0xb8>
mov    %esi,(%esp)
call   804b7d0 <strerror@plt>
mov    %esi,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7aac(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
cmpl   $0x69,0x0(%ebp)
je     807e5e8 <rtnl_listen+0xb8>
mov    $0xffffffff,%eax
jmp    807e690 <rtnl_listen+0x160>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x20,0x68(%esp)
jne    807e7a0 <rtnl_listen+0x270>
test   %esi,%esi
je     807e5e8 <rtnl_listen+0xb8>
mov    %eax,0xc(%esp)
lea    -0x7ba4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
testb  $0x20,0x68(%esp)
je     807e767 <rtnl_listen+0x237>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x12,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bb7(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807e5e8 <rtnl_listen+0xb8>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0xf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7bd9(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
jmp    807e747 <rtnl_listen+0x217>
mov    %ebp,0xc(%esp)
lea    -0x7b44(%ebx),%eax
jmp    807e771 <rtnl_listen+0x241>
call   8082850 <__libc_csu_fini+0x10>
mov    %edx,0xc(%esp)
lea    -0x7afa(%ebx),%eax
jmp    807e771 <rtnl_listen+0x241>
jmp    807e830 <rtnl_from_file>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x203c,%esp
mov    0x2054(%esp),%eax
lea    0x2c(%esp),%edi
call   804d560 <_start+0x2d>
add    $0x157b6,%ebx
mov    0x2050(%esp),%esi
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
mov    %eax,0x18(%esp)
mov    0x2058(%esp),%eax
movl   $0x0,0x28(%esp)
mov    %eax,0x1c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x202c(%esp)
xor    %eax,%eax
mov    $0x10,%eax
mov    %ax,0x20(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x14(%esp)
nop
mov    %esi,0xc(%esp)
movl   $0x10,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   804b750 <fread@plt>
test   %eax,%eax
js     807e958 <rtnl_from_file+0x128>
je     807e980 <rtnl_from_file+0x150>
mov    0x2c(%esp),%eax
lea    -0x10(%eax),%ebp
cmp    $0x1ff0,%ebp
ja     807e988 <rtnl_from_file+0x158>
sub    $0xd,%eax
and    $0xfffffffc,%eax
mov    %eax,0xc(%esp)
mov    0x14(%esp),%eax
mov    %esi,0x10(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1ff0,0x4(%esp)
mov    %eax,(%esp)
call   804b9e0 <__fread_chk@plt>
test   %eax,%eax
js     807e966 <rtnl_from_file+0x136>
cmp    %eax,%ebp
jg     807e9d0 <rtnl_from_file+0x1a0>
mov    0x1c(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
mov    0x18(%esp),%eax
call   *%eax
test   %eax,%eax
jns    807e8a0 <rtnl_from_file+0x70>
lea    0x0(%esi,%eiz,1),%esi
mov    0x202c(%esp),%edx
xor    %gs:0x14,%edx
jne    807ea04 <rtnl_from_file+0x1d4>
add    $0x203c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
call   804b970 <__errno_location@plt>
cmpl   $0x4,(%eax)
je     807e8a0 <rtnl_from_file+0x70>
lea    -0x7add(%ebx),%eax
mov    %eax,(%esp)
call   804b700 <perror@plt>
mov    $0xffffffff,%eax
jmp    807e938 <rtnl_from_file+0x108>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    807e938 <rtnl_from_file+0x108>
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
mov    %eax,0x14(%esp)
call   804b8f0 <ftell@plt>
mov    0x14(%esp),%ecx
movl   $0x1,0x4(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x10(%esp)
lea    -0x7a5c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807e938 <rtnl_from_file+0x108>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x22,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7a38(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    $0xffffffff,%eax
jmp    807e938 <rtnl_from_file+0x108>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x40(%esp),%edx
call   804d560 <_start+0x2d>
add    $0x155dc,%ebx
mov    (%edi),%eax
lea    0x7(%edx),%esi
and    $0xfffffffc,%esi
lea    0x4(%edx),%ecx
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%esi,%eax,1),%ebp
cmp    0x34(%esp),%ebp
ja     807ea80 <addattr_l+0x70>
mov    0x38(%esp),%ebp
add    %edi,%eax
mov    %cx,(%eax)
add    $0x4,%eax
mov    %bp,-0x2(%eax)
mov    %edx,0x8(%esp)
mov    0x3c(%esp),%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804b5e0 <memcpy@plt>
mov    (%edi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%esi
xor    %eax,%eax
mov    %esi,(%edi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x34(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7a14(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807ea76 <addattr_l+0x66>
jmp    807eac0 <addattr>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebx
sub    $0x28,%esp
mov    0x38(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x15533,%ebx
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x28,%esp
pop    %ebx
ret
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x154f3,%ebx
movl   $0x1,0x10(%esp)
mov    %al,0x1c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x154a3,%ebx
movl   $0x2,0x10(%esp)
mov    %ax,0x1c(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
lea    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x1544b,%ebx
movl   $0x4,0x10(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x28,%esp
pop    %ebx
ret
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x15413,%ebx
movl   $0x8,0x10(%esp)
mov    %eax,0x18(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x1c(%esp)
lea    0x18(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x28,%esp
pop    %ebx
ret
push   %esi
push   %ebx
sub    $0x24,%esp
call   804d560 <_start+0x2d>
add    $0x153c6,%ebx
mov    0x3c(%esp),%esi
mov    %esi,(%esp)
call   804b880 <strlen@plt>
mov    %esi,0xc(%esp)
add    $0x1,%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807ea10 <addattr_l>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
mov    0x3c(%esp),%ebp
call   804d560 <_start+0x2d>
add    $0x1536c,%ebx
mov    (%esi),%eax
lea    0x3(%ebp),%edi
and    $0xfffffffc,%edi
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%edi,%eax,1),%edx
cmp    0x34(%esp),%edx
ja     807ed08 <addraw_l+0x88>
mov    0x38(%esp),%edx
add    %esi,%eax
mov    %ebp,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804b5e0 <memcpy@plt>
mov    (%esi),%eax
mov    %edi,%edx
sub    %ebp,%edx
mov    %edx,0x8(%esp)
movl   $0x0,0x4(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%ebp
add    %esi,%ebp
mov    %ebp,(%esp)
call   804b910 <memset@plt>
mov    (%esi),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%edi
xor    %eax,%eax
mov    %edi,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x79e4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807ecf9 <addraw_l+0x79>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%edx
call   804d560 <_start+0x2d>
add    $0x152b2,%ebx
mov    (%edx),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,(%esp)
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    (%edx,%eax,1),%esi
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   807ea10 <addattr_l>
add    $0x24,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
push   %esi
mov    0x8(%esp),%esi
mov    0xc(%esp),%ecx
mov    (%esi),%eax
lea    0x3(%eax),%edx
and    $0xfffffffc,%edx
add    %esi,%edx
sub    %ecx,%edx
mov    %dx,(%ecx)
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x15240,%ebx
mov    0x48(%esp),%edi
mov    (%esi),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
lea    0x3(%eax),%ebp
mov    0x50(%esp),%eax
and    $0xfffffffc,%ebp
add    %esi,%ebp
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x4(%esp)
call   807ea10 <addattr_l>
mov    0x44(%esp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   807ed40 <addattr_nest>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x151ce,%ebx
movzwl (%eax),%edx
add    $0x3,%edx
and    $0xfffffffc,%edx
lea    (%eax,%edx,1),%ecx
mov    (%esi),%edx
add    $0x3,%edx
and    $0xfffffffc,%edx
add    %esi,%edx
sub    %eax,%edx
mov    %dx,(%eax)
mov    %esi,(%esp)
mov    %ecx,0x4(%esp)
call   807ed90 <addattr_nest_end>
mov    (%esi),%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%edx
call   804d560 <_start+0x2d>
add    $0x15183,%ebx
movzwl (%edx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
lea    0x8(%eax),%ecx
cmp    0x24(%esp),%ecx
jg     807eec8 <rta_addattr32+0x58>
mov    0x28(%esp),%ecx
add    %edx,%eax
mov    %cx,0x2(%eax)
mov    $0x8,%ecx
mov    %cx,(%eax)
mov    0x2c(%esp),%ecx
mov    %ecx,0x4(%eax)
movzwl (%edx),%eax
add    $0x3,%eax
and    $0xfffffffc,%eax
add    $0x8,%eax
mov    %ax,(%edx)
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x79b4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807eebf <rta_addattr32+0x4f>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x30(%esp),%ecx
call   804d560 <_start+0x2d>
add    $0x150ed,%ebx
movzwl (%esi),%eax
lea    0x7(%ecx),%edx
and    $0xfffffffc,%edx
lea    0x4(%ecx),%edi
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %eax,%edx
cmp    0x24(%esp),%edx
jg     807ef78 <rta_addattr_l+0x78>
mov    0x28(%esp),%edx
add    %esi,%eax
mov    %di,(%eax)
add    $0x4,%eax
mov    %dx,-0x2(%eax)
mov    0x2c(%esp),%edx
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804b5e0 <memcpy@plt>
movzwl (%esi),%eax
lea    0x3(%edi),%edx
and    $0xfffffffc,%edx
add    $0x3,%eax
and    $0xfffffffc,%eax
add    %edx,%eax
mov    %ax,(%esi)
xor    %eax,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x797c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
jmp    807ef6d <rta_addattr_l+0x6d>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%edx
call   804d560 <_start+0x2d>
add    $0x15040,%ebx
mov    0x4c(%esp),%esi
movl   $0x0,0x4(%esp)
mov    0x48(%esp),%edi
mov    0x50(%esp),%ebp
lea    0x4(,%edx,4),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %edx,0x1c(%esp)
mov    %eax,(%esp)
call   804b910 <memset@plt>
cmp    $0x3,%esi
jle    807f068 <parse_rtattr_flags+0xb8>
movzwl (%edi),%eax
cmp    $0x3,%ax
jbe    807f070 <parse_rtattr_flags+0xc0>
cmp    %eax,%esi
jl     807f070 <parse_rtattr_flags+0xc0>
mov    0x1c(%esp),%edx
not    %ebp
mov    %edx,0x44(%esp)
jmp    807f034 <parse_rtattr_flags+0x84>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
add    %eax,%edi
cmp    $0x3,%esi
jle    807f068 <parse_rtattr_flags+0xb8>
movzwl (%edi),%eax
cmp    $0x3,%ax
jbe    807f070 <parse_rtattr_flags+0xc0>
cmp    %esi,%eax
jg     807f070 <parse_rtattr_flags+0xc0>
mov    %ebp,%ecx
and    0x2(%edi),%cx
movzwl %cx,%ecx
cmp    %ecx,0x44(%esp)
jl     807f018 <parse_rtattr_flags+0x68>
mov    0x40(%esp),%edx
lea    (%edx,%ecx,4),%ecx
mov    (%ecx),%edx
test   %edx,%edx
jne    807f018 <parse_rtattr_flags+0x68>
add    $0x3,%eax
and    $0xfffffffc,%eax
sub    %eax,%esi
mov    %edi,(%ecx)
add    %eax,%edi
cmp    $0x3,%esi
jg     807f027 <parse_rtattr_flags+0x77>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     807f09a <parse_rtattr_flags+0xea>
movzwl (%edi),%eax
nop
mov    %eax,0x10(%esp)
lea    -0x7ac7(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
sub    $0x28,%esp
mov    0x3c(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x14f43,%ebx
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   807efb0 <parse_rtattr_flags>
add    $0x28,%esp
pop    %ebx
ret
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
call   804d560 <_start+0x2d>
add    $0x14f00,%ebx
mov    0x4c(%esp),%edi
movl   $0x0,0x4(%esp)
mov    0x48(%esp),%esi
lea    0x0(,%ebp,4),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   804b910 <memset@plt>
cmp    $0x3,%edi
jle    807f1cc <parse_rtattr_byindex+0xdc>
movzwl (%esi),%edx
xor    %ecx,%ecx
cmp    $0x3,%dx
jbe    807f190 <parse_rtattr_byindex+0xa0>
cmp    %edx,%edi
jge    807f156 <parse_rtattr_byindex+0x66>
jmp    807f190 <parse_rtattr_byindex+0xa0>
nop
movzwl (%esi),%edx
cmp    $0x3,%dx
nop
jbe    807f190 <parse_rtattr_byindex+0xa0>
cmp    %edi,%edx
jg     807f190 <parse_rtattr_byindex+0xa0>
movzwl 0x2(%esi),%eax
cmp    %eax,%ebp
jl     807f16c <parse_rtattr_byindex+0x7c>
cmp    %ecx,%ebp
jle    807f16c <parse_rtattr_byindex+0x7c>
mov    0x40(%esp),%eax
mov    %esi,(%eax,%ecx,4)
add    $0x1,%ecx
add    $0x3,%edx
and    $0xfffffffc,%edx
sub    %edx,%edi
add    %edx,%esi
cmp    $0x3,%edi
jg     807f148 <parse_rtattr_byindex+0x58>
test   %edi,%edi
jne    807f189 <parse_rtattr_byindex+0x99>
add    $0x2c,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzwl (%esi),%edx
lea    0x0(%esi,%eiz,1),%esi
lea    -0x7ac7(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %edi,0xc(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %ecx,0x1c(%esp)
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    0x1c(%esp),%ecx
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
mov    %ecx,%eax
pop    %ebp
ret
xor    %ecx,%ecx
jmp    807f17b <parse_rtattr_byindex+0x8b>
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x14e1f,%ebx
movzwl (%ecx),%edx
sub    $0x4,%edx
cmp    %eax,%edx
jb     807f258 <__parse_rtattr_nested_compat+0x88>
add    $0x3,%eax
and    $0xfffffffc,%eax
add    $0x4,%eax
cmp    %eax,%edx
jae    807f228 <__parse_rtattr_nested_compat+0x58>
mov    0x24(%esp),%eax
movl   $0x0,0x4(%esp)
lea    0x4(,%eax,4),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804b910 <memset@plt>
xor    %eax,%eax
add    $0x18,%esp
pop    %ebx
ret
add    %ecx,%eax
movzwl (%eax),%edx
add    $0x4,%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
sub    $0x4,%edx
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   807f0b0 <parse_rtattr>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    807f223 <__parse_rtattr_nested_compat+0x53>
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x14d91,%ebx
test   %esi,%esi
je     807f2d8 <get_integer+0x78>
cmpb   $0x0,(%esi)
je     807f2d8 <get_integer+0x78>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     807f2d8 <get_integer+0x78>
cmp    %edx,%esi
je     807f2d8 <get_integer+0x78>
cmpb   $0x0,(%edx)
jne    807f2d8 <get_integer+0x78>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     807f2c8 <get_integer+0x68>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    807f2b4 <get_integer+0x54>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%edx
bswap  %edx
mov    %edx,%eax
not    %eax
lea    0x1(%eax),%ecx
test   %eax,%ecx
jne    807f314 <mask2bits+0x24>
xor    %eax,%eax
test   %edx,%edx
je     807f312 <mask2bits+0x22>
nop
add    $0x1,%eax
add    %edx,%edx
jne    807f308 <mask2bits+0x18>
nop
repz ret
repz ret
mov    $0xffffffff,%eax
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x14cd1,%ebx
test   %esi,%esi
je     807f390 <get_unsigned+0x70>
cmpb   $0x0,(%esi)
je     807f390 <get_unsigned+0x70>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     807f390 <get_unsigned+0x70>
cmp    %edx,%esi
je     807f390 <get_unsigned+0x70>
cmpb   $0x0,(%edx)
jne    807f390 <get_unsigned+0x70>
cmp    $0xffffffff,%eax
je     807f380 <get_unsigned+0x60>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    807f36e <get_unsigned+0x4e>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
call   804d560 <_start+0x2d>
add    $0x14c54,%ebx
mov    0x64(%esp),%ebp
movl   $0x2e,0x4(%esp)
mov    0x68(%esp),%esi
mov    %ebp,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     807f5a0 <get_time_rtt+0x200>
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b9a0 <strtod@plt>
fldz
fucomip %st(1),%st
ja     807f560 <get_time_rtt+0x1c0>
mov    0x3c(%esp),%edi
test   %edi,%edi
je     807f564 <get_time_rtt+0x1c4>
cmp    %edi,%ebp
je     807f568 <get_time_rtt+0x1c8>
cmpb   $0x0,(%edi)
jne    807f570 <get_time_rtt+0x1d0>
fldl   -0x7670(%ebx)
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jbe    807f42d <get_time_rtt+0x8d>
fstpl  0x18(%esp)
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
je     807f572 <get_time_rtt+0x1d2>
fldl   0x18(%esp)
movl   $0x1,(%esi)
cmpb   $0x0,(%edi)
jne    807f490 <get_time_rtt+0xf0>
fnstcw 0x2e(%esp)
xor    %edi,%edi
movzwl 0x2e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x2c(%esp)
fld    %st(0)
fldcw  0x2c(%esp)
fistpll 0x20(%esp)
fldcw  0x2e(%esp)
mov    %edi,0x24(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x20(%esp)
mov    %eax,%ecx
fildll 0x20(%esp)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    807f590 <get_time_rtt+0x1f0>
mov    0x60(%esp),%eax
add    $0x1,%ecx
mov    %ecx,(%eax)
xor    %eax,%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0xaffd(%ebx),%eax
movl   $0x0,(%esi)
fstpl  0x18(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f580 <get_time_rtt+0x1e0>
fstp   %st(0)
lea    -0xfee3(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f580 <get_time_rtt+0x1e0>
fstp   %st(0)
lea    -0x7941(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f580 <get_time_rtt+0x1e0>
lea    -0x9627(%ebx),%eax
mov    %eax,0x4(%esp)
fstpl  0x18(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f438 <get_time_rtt+0x98>
fstp   %st(0)
lea    -0x7947(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f438 <get_time_rtt+0x98>
fstp   %st(0)
lea    -0x7942(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
fldl   0x18(%esp)
je     807f438 <get_time_rtt+0x98>
fstp   %st(0)
jmp    807f572 <get_time_rtt+0x1d2>
xchg   %ax,%ax
fstp   %st(0)
jmp    807f572 <get_time_rtt+0x1d2>
fstp   %st(0)
jmp    807f572 <get_time_rtt+0x1d2>
fstp   %st(0)
jmp    807f572 <get_time_rtt+0x1d2>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    807f481 <get_time_rtt+0xe1>
lea    0x0(%esi,%eiz,1),%esi
fmuls  -0xf2c0(%ebx)
jmp    807f438 <get_time_rtt+0x98>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x60(%esp),%ecx
mov    %eax,(%ecx)
add    $0x4c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x3c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b840 <strtoul@plt>
mov    0x3c(%esp),%edi
test   %edi,%edi
mov    %eax,%edx
je     807f572 <get_time_rtt+0x1d2>
cmp    %edi,%ebp
je     807f572 <get_time_rtt+0x1d2>
cmpb   $0x0,(%edi)
jne    807f572 <get_time_rtt+0x1d2>
cmp    $0xffffffff,%eax
xchg   %ax,%ax
je     807f5f8 <get_time_rtt+0x258>
mov    %edx,%eax
xor    %edx,%edx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
fildll 0x20(%esp)
movl   $0x1,(%esi)
cmpb   $0x0,(%edi)
jne    807f490 <get_time_rtt+0xf0>
jmp    807f438 <get_time_rtt+0x98>
xchg   %ax,%ax
mov    %eax,0x18(%esp)
call   804b970 <__errno_location@plt>
mov    0x18(%esp),%edx
cmpl   $0x22,(%eax)
jne    807f5d2 <get_time_rtt+0x232>
jmp    807f572 <get_time_rtt+0x1d2>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x149e0,%ebx
mov    0x40(%esp),%edi
test   %esi,%esi
je     807f690 <get_u64+0x80>
cmpb   $0x0,(%esi)
je     807f690 <get_u64+0x80>
mov    0x48(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b990 <strtoull@plt>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
mov    %eax,%ebp
je     807f690 <get_u64+0x80>
cmp    %ecx,%esi
je     807f690 <get_u64+0x80>
cmpb   $0x0,(%ecx)
jne    807f690 <get_u64+0x80>
and    %edx,%eax
cmp    $0xffffffff,%eax
je     807f678 <get_u64+0x68>
mov    %ebp,(%edi)
xor    %eax,%eax
mov    %edx,0x4(%edi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
call   804b970 <__errno_location@plt>
mov    0xc(%esp),%edx
cmpl   $0x22,(%eax)
jne    807f665 <get_u64+0x55>
lea    0x0(%esi),%esi
add    $0x2c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x14951,%ebx
test   %esi,%esi
je     807f710 <get_u32+0x70>
cmpb   $0x0,(%esi)
je     807f710 <get_u32+0x70>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     807f710 <get_u32+0x70>
cmp    %edx,%esi
je     807f710 <get_u32+0x70>
cmpb   $0x0,(%edx)
jne    807f710 <get_u32+0x70>
cmp    $0xffffffff,%eax
je     807f700 <get_u32+0x60>
mov    0x30(%esp),%eax
mov    %edi,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    807f6ee <get_u32+0x4e>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x148d2,%ebx
test   %esi,%esi
je     807f780 <get_u16+0x60>
cmpb   $0x0,(%esi)
je     807f780 <get_u16+0x60>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     807f780 <get_u16+0x60>
cmp    %edx,%esi
je     807f780 <get_u16+0x60>
cmpb   $0x0,(%edx)
jne    807f780 <get_u16+0x60>
cmp    $0xffff,%eax
ja     807f780 <get_u16+0x60>
mov    0x30(%esp),%edx
mov    %ax,(%edx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x24,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x14862,%ebx
test   %esi,%esi
je     807f7f0 <get_u8+0x60>
cmpb   $0x0,(%esi)
je     807f7f0 <get_u8+0x60>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
je     807f7f0 <get_u8+0x60>
cmp    %edx,%esi
je     807f7f0 <get_u8+0x60>
cmpb   $0x0,(%edx)
jne    807f7f0 <get_u8+0x60>
cmp    $0xff,%eax
ja     807f7f0 <get_u8+0x60>
mov    0x30(%esp),%edx
mov    %al,(%edx)
add    $0x24,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x24,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x147f8,%ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804b970 <__errno_location@plt>
test   %esi,%esi
mov    %eax,%edi
movl   $0x0,(%eax)
je     807f878 <get_s32+0x78>
cmpb   $0x0,(%esi)
je     807f878 <get_s32+0x78>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%ecx
je     807f878 <get_s32+0x78>
cmp    %edx,%esi
je     807f878 <get_s32+0x78>
cmpb   $0x0,(%edx)
jne    807f878 <get_s32+0x78>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     807f870 <get_s32+0x70>
mov    0x30(%esp),%eax
mov    %ecx,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
cmpl   $0x22,(%edi)
jne    807f861 <get_s32+0x61>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x14761,%ebx
test   %esi,%esi
je     807f918 <get_s16+0x88>
cmpb   $0x0,(%esi)
je     807f918 <get_s16+0x88>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     807f918 <get_s16+0x88>
cmp    %edx,%esi
je     807f918 <get_s16+0x88>
cmpb   $0x0,(%edx)
jne    807f918 <get_s16+0x88>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     807f908 <get_s16+0x78>
lea    0x8000(%edi),%eax
cmp    $0xffff,%eax
ja     807f918 <get_s16+0x88>
mov    0x30(%esp),%eax
mov    %di,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    807f8e4 <get_s16+0x54>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x34(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x146c1,%ebx
test   %esi,%esi
je     807f9b8 <get_s8+0x88>
cmpb   $0x0,(%esi)
je     807f9b8 <get_s8+0x88>
mov    0x38(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
call   804bb20 <strtol@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,%edi
je     807f9b8 <get_s8+0x88>
cmp    %edx,%esi
je     807f9b8 <get_s8+0x88>
cmpb   $0x0,(%edx)
jne    807f9b8 <get_s8+0x88>
lea    0x7fffffff(%eax),%eax
cmp    $0xfffffffd,%eax
ja     807f9a8 <get_s8+0x78>
lea    0x80(%edi),%eax
cmp    $0xff,%eax
ja     807f9b8 <get_s8+0x88>
mov    0x30(%esp),%eax
mov    %edi,%ecx
mov    %cl,(%eax)
add    $0x20,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   804b970 <__errno_location@plt>
cmpl   $0x22,(%eax)
jne    807f984 <get_s8+0x54>
lea    0x0(%esi),%esi
add    $0x20,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x28,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ebp
mov    0x64(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x14617,%ebx
mov    %ebp,%edi
mov    %eax,0x10(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x3c(%esp)
xor    %eax,%eax
test   $0x1,%ebp
jne    807fb28 <get_addr_1+0x158>
test   $0x2,%edi
jne    807fb40 <get_addr_1+0x170>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     807fa30 <get_addr_1+0x60>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     807fa38 <get_addr_1+0x68>
movb   $0x0,(%edi)
mov    0x10(%esp),%esi
mov    $0x8,%ecx
lea    -0xe07c(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807fad8 <get_addr_1+0x108>
mov    0x10(%esp),%eax
cmpb   $0x61,(%eax)
je     807fab8 <get_addr_1+0xe8>
mov    0x10(%esp),%eax
movl   $0x3a,0x4(%esp)
mov    %eax,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     807fb87 <get_addr_1+0x1b7>
cmpl   $0xa,0x68(%esp)
movb   $0xa,0x0(%ebp)
jne    807fb73 <get_addr_1+0x1a3>
lea    0x8(%ebp),%eax
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   804b5d0 <inet_pton@plt>
test   %eax,%eax
jle    807fb80 <get_addr_1+0x1b0>
mov    $0xffffffff,%edx
xor    %ecx,%ecx
movb   $0x10,0x1(%ebp)
mov    %dx,0x2(%ebp)
jmp    807fb0b <get_addr_1+0x13b>
nop
movzbl 0x1(%eax),%eax
cmp    $0x6c,%al
jne    807fb58 <get_addr_1+0x188>
mov    0x10(%esp),%eax
cmpb   $0x6c,0x2(%eax)
jne    807fa58 <get_addr_1+0x88>
cmpb   $0x0,0x3(%eax)
jne    807fa58 <get_addr_1+0x88>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xc,0x68(%esp)
je     807fb80 <get_addr_1+0x1b0>
movzbl 0x68(%esp),%eax
mov    $0x4,%edx
mov    $0xffffffff,%esi
cmpl   $0xa,0x68(%esp)
mov    %si,0x2(%ebp)
mov    %al,0x0(%ebp)
mov    $0x10,%eax
cmovne %edx,%eax
xor    %ecx,%ecx
mov    %al,0x1(%ebp)
mov    0x3c(%esp),%esi
xor    %gs:0x14,%esi
mov    %ecx,%eax
jne    807fc42 <get_addr_1+0x272>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
lea    0x1(%ebp),%edi
mov    $0x27,%dl
test   $0x2,%edi
movb   $0x0,0x0(%ebp)
je     807fa19 <get_addr_1+0x49>
lea    0x0(%esi),%esi
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
sub    $0x2,%edx
jmp    807fa19 <get_addr_1+0x49>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6e,%al
jne    807fa58 <get_addr_1+0x88>
mov    0x10(%esp),%eax
cmpb   $0x79,0x2(%eax)
jne    807fa58 <get_addr_1+0x88>
jmp    807face <get_addr_1+0xfe>
mov    0x68(%esp),%ecx
test   %ecx,%ecx
je     807fa83 <get_addr_1+0xb3>
nop
mov    $0xffffffff,%ecx
jmp    807fb0b <get_addr_1+0x13b>
cmpl   $0xc,0x68(%esp)
je     807fbf8 <get_addr_1+0x228>
mov    0x68(%esp),%ecx
movb   $0x2,0x0(%ebp)
and    $0xfffffffd,%ecx
jne    807fb80 <get_addr_1+0x1b0>
xor    %esi,%esi
lea    0x8(%ebp),%eax
mov    %ebp,0x1c(%esp)
mov    %esi,%ebp
mov    0x10(%esp),%esi
mov    %eax,0x14(%esp)
lea    0x20(%esp),%edi
mov    %ecx,0x18(%esp)
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   804b840 <strtoul@plt>
cmp    $0xff,%eax
ja     807fb80 <get_addr_1+0x1b0>
mov    0x20(%esp),%edx
cmp    %edx,%esi
je     807fb80 <get_addr_1+0x1b0>
mov    0x14(%esp),%esi
mov    %al,(%esi,%ebp,1)
movzbl (%edx),%eax
test   %al,%al
je     807fc47 <get_addr_1+0x277>
cmp    $0x3,%ebp
je     807fb80 <get_addr_1+0x1b0>
cmp    $0x2e,%al
jne    807fb80 <get_addr_1+0x1b0>
lea    0x1(%edx),%esi
add    $0x1,%ebp
jmp    807fbb6 <get_addr_1+0x1e6>
lea    0x26(%esp),%eax
movb   $0xc,0x0(%ebp)
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
movl   $0xc,(%esp)
mov    %eax,0x4(%esp)
call   8082300 <dnet_pton>
mov    $0xffffffff,%ecx
test   %eax,%eax
jle    807fb0b <get_addr_1+0x13b>
movzwl 0x28(%esp),%eax
xor    %ecx,%ecx
movb   $0x2,0x1(%ebp)
mov    %ax,0x8(%ebp)
mov    $0xffffffff,%eax
mov    %ax,0x2(%ebp)
jmp    807fb0b <get_addr_1+0x13b>
call   8082850 <__libc_csu_fini+0x10>
mov    0x1c(%esp),%ebp
mov    0x18(%esp),%ecx
movb   $0x4,0x1(%ebp)
movw   $0xffff,0x2(%ebp)
jmp    807fb0b <get_addr_1+0x13b>
xchg   %ax,%ax
push   %ebp
mov    $0x28,%edx
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ebp
call   804d560 <_start+0x2d>
add    $0x1438b,%ebx
test   $0x1,%ebp
mov    %ebp,%edi
jne    807fdd8 <get_prefix_1+0x178>
test   $0x2,%edi
jne    807fdf0 <get_prefix_1+0x190>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     807fcac <get_prefix_1+0x4c>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
and    $0x1,%edx
je     807fcb4 <get_prefix_1+0x54>
movb   $0x0,(%edi)
mov    0x64(%esp),%esi
mov    $0x8,%ecx
lea    -0xe07c(%ebx),%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     807fdb0 <get_prefix_1+0x150>
mov    0x64(%esp),%eax
cmpb   $0x61,(%eax)
je     807fd88 <get_prefix_1+0x128>
mov    0x64(%esp),%eax
movl   $0x2f,0x4(%esp)
mov    %eax,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
mov    %eax,%esi
je     807fcf5 <get_prefix_1+0x95>
movb   $0x0,(%eax)
mov    0x68(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
call   807f9d0 <get_addr_1>
test   %eax,%eax
mov    %eax,%edi
jne    807fe08 <get_prefix_1+0x1a8>
movzbl 0x0(%ebp),%eax
cmp    $0xa,%al
je     807fe40 <get_prefix_1+0x1e0>
cmp    $0xc,%al
mov    $0x20,%edx
mov    $0x10,%eax
cmove  %eax,%edx
mov    %dx,0x2(%ebp)
xor    %eax,%eax
test   %esi,%esi
je     807fdcf <get_prefix_1+0x16f>
lea    0x1(%esi),%ecx
lea    0x14(%esp),%eax
mov    %ecx,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0xc(%esp)
call   807f320 <get_unsigned>
mov    0x14(%esp),%edx
mov    0xc(%esp),%ecx
test   %eax,%eax
jne    807fe57 <get_prefix_1+0x1f7>
movswl 0x2(%ebp),%eax
cmp    %eax,%edx
ja     807fe50 <get_prefix_1+0x1f0>
orl    $0x1,0x4(%ebp)
mov    %dx,0x2(%ebp)
jmp    807fe0c <get_prefix_1+0x1ac>
movzbl 0x1(%eax),%eax
cmp    $0x6e,%al
jne    807fe20 <get_prefix_1+0x1c0>
mov    0x64(%esp),%eax
cmpb   $0x79,0x2(%eax)
jne    807fcd8 <get_prefix_1+0x78>
cmpb   $0x0,0x3(%eax)
jne    807fcd8 <get_prefix_1+0x78>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xc,0x68(%esp)
je     807fe91 <get_prefix_1+0x231>
movzbl 0x68(%esp),%eax
xor    %edx,%edx
movb   $0x0,0x1(%ebp)
mov    %dx,0x2(%ebp)
mov    %al,0x0(%ebp)
xor    %eax,%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x1(%ebp),%edi
mov    $0x27,%dl
test   $0x2,%edi
movb   $0x0,0x0(%ebp)
je     807fc95 <get_prefix_1+0x35>
lea    0x0(%esi),%esi
xor    %esi,%esi
add    $0x2,%edi
mov    %si,-0x2(%edi)
sub    $0x2,%edx
jmp    807fc95 <get_prefix_1+0x35>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     807fdcf <get_prefix_1+0x16f>
movb   $0x2f,(%esi)
add    $0x4c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6c,%al
jne    807fcd8 <get_prefix_1+0x78>
mov    0x64(%esp),%eax
cmpb   $0x6c,0x2(%eax)
jne    807fcd8 <get_prefix_1+0x78>
jmp    807fda2 <get_prefix_1+0x142>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x80,%eax
mov    %ax,0x2(%ebp)
jmp    807fd36 <get_prefix_1+0xd6>
xchg   %ax,%ax
mov    $0xffffffff,%edi
jmp    807fe0c <get_prefix_1+0x1ac>
lea    0x18(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   807f9d0 <get_addr_1>
test   %eax,%eax
jne    807fe50 <get_prefix_1+0x1f0>
cmpb   $0x2,0x18(%esp)
jne    807fe50 <get_prefix_1+0x1f0>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   807f2f0 <mask2bits>
test   %eax,%eax
js     807fe50 <get_prefix_1+0x1f0>
mov    %eax,%edx
jmp    807fd6f <get_prefix_1+0x10f>
mov    $0xffffffff,%eax
jmp    807fdcf <get_prefix_1+0x16f>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x14152,%ebx
mov    0x24(%esp),%esi
cmp    $0x11,%eax
je     807fedd <get_addr+0x3d>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807f9d0 <get_addr_1>
test   %eax,%eax
jne    807ff0f <get_addr+0x6f>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,0xc(%esp)
lea    -0x78b4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %esi,0xc(%esp)
lea    -0x7868(%ebx),%eax
jmp    807fee7 <get_addr+0x47>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x140d2,%ebx
mov    0x24(%esp),%esi
cmp    $0x11,%eax
je     807ff5d <get_prefix+0x3d>
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   807fc60 <get_prefix_1>
test   %eax,%eax
jne    807ff8f <get_prefix+0x6f>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,0xc(%esp)
lea    -0x7830(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
mov    %esi,0xc(%esp)
lea    -0x77e8(%ebx),%eax
jmp    807ff67 <get_prefix+0x47>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x44,%esp
call   804d560 <_start+0x2d>
add    $0x14056,%ebx
mov    0x50(%esp),%esi
lea    0x18(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %eax,(%esp)
mov    %esi,0x4(%esp)
call   807f9d0 <get_addr_1>
test   %eax,%eax
jne    807ffda <get_addr32+0x3a>
mov    0x20(%esp),%eax
add    $0x44,%esp
pop    %ebx
pop    %esi
ret
lea    -0x77b0(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13fea,%ebx
sub    $0x18,%esp
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x777c(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13f9a,%ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7748(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x13f43,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x7724(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x13ef3,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x7700(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x13ea3,%ebx
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x30(%esp),%eax
mov    %eax,0xc(%esp)
lea    -0x76cc(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
movl   $0xffffffff,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   804d560 <_start+0x2d>
add    $0x13e54,%ebx
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    %edi,(%esp)
call   804b880 <strlen@plt>
mov    %esi,(%esp)
mov    %eax,%ebp
call   804b880 <strlen@plt>
cmp    %eax,%ebp
ja     80801e8 <matches+0x48>
mov    %ebp,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   804b620 <memcmp@plt>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    80801e0 <matches+0x40>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%ebp
mov    0x30(%esp),%eax
mov    0x34(%esp),%edi
call   804d560 <_start+0x2d>
add    $0x13df8,%ebx
mov    %ebp,%esi
and    $0x1f,%ebp
sar    $0x5,%esi
add    $0x8,%eax
test   %esi,%esi
lea    0x8(%edi),%edx
je     808023b <inet_addr_match+0x4b>
lea    0x0(,%esi,4),%ecx
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    8080270 <inet_addr_match+0x80>
xor    %eax,%eax
test   %ebp,%ebp
je     8080265 <inet_addr_match+0x75>
mov    $0x20,%ecx
mov    $0xffffffff,%eax
mov    0x8(%edi,%esi,4),%edx
sub    %ebp,%ecx
shl    %cl,%eax
mov    0x30(%esp),%ecx
bswap  %eax
xor    0x8(%ecx,%esi,4),%edx
test   %edx,%eax
setne  %al
movzbl %al,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    $0xffffffff,%eax
jmp    8080265 <inet_addr_match+0x75>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13d78,%ebx
sub    $0x430,%esp
mov    %gs:0x14,%eax
mov    %eax,0x42c(%esp)
xor    %eax,%eax
lea    -0x793c(%ebx),%esi
mov    %esi,(%esp)
call   804b780 <getenv@plt>
test   %eax,%eax
je     8080300 <__get_hz+0x80>
mov    %esi,(%esp)
call   804b780 <getenv@plt>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   804bb20 <strtol@plt>
test   %eax,%eax
je     8080387 <__get_hz+0x107>
mov    0x42c(%esp),%edx
xor    %gs:0x14,%edx
jne    808043f <__get_hz+0x1bf>
add    $0x430,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x7939(%ebx),%esi
mov    %esi,(%esp)
call   804b780 <getenv@plt>
test   %eax,%eax
je     80803c0 <__get_hz+0x140>
mov    %esi,(%esp)
lea    0x2c(%esp),%esi
call   804b780 <getenv@plt>
movl   $0x3ff,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
lea    -0xaffe(%ebx),%eax
mov    %eax,0x8(%esp)
call   804b930 <snprintf@plt>
lea    -0xfc25(%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8080387 <__get_hz+0x107>
lea    0x28(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
lea    -0x7911(%ebx),%eax
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804b870 <fscanf@plt>
cmp    $0x2,%eax
je     8080398 <__get_hz+0x118>
mov    %esi,(%esp)
call   804b600 <fclose@plt>
mov    $0x64,%eax
jmp    80802dd <__get_hz+0x5d>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0xf4240,0x24(%esp)
jne    808037f <__get_hz+0xff>
mov    0x28(%esp),%edi
mov    %esi,(%esp)
call   804b600 <fclose@plt>
test   %edi,%edi
je     8080387 <__get_hz+0x107>
mov    %edi,%eax
jmp    80802dd <__get_hz+0x5d>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x7929(%ebx),%esi
mov    %esi,(%esp)
call   804b780 <getenv@plt>
test   %eax,%eax
je     8080411 <__get_hz+0x191>
mov    %esi,(%esp)
lea    0x2c(%esp),%esi
call   804b780 <getenv@plt>
movl   $0x400,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x3ff,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x14(%esp)
lea    -0x791f(%ebx),%eax
mov    %eax,0x10(%esp)
call   804b540 <__snprintf_chk@plt>
jmp    8080340 <__get_hz+0xc0>
movl   $0x6f72702f,0x2c(%esp)
lea    0x2c(%esp),%esi
movl   $0x656e2f63,0x30(%esp)
movl   $0x73702f74,0x34(%esp)
movl   $0x64656863,0x38(%esp)
movb   $0x0,0x3c(%esp)
jmp    8080340 <__get_hz+0xc0>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13baa,%ebx
sub    $0x18,%esp
movl   $0x2,(%esp)
call   804b670 <sysconf@plt>
add    $0x18,%esp
pop    %ebx
ret
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%ecx
call   804d560 <_start+0x2d>
add    $0x13b80,%ebx
mov    0x68(%esp),%edx
mov    %gs:0x14,%edi
mov    %edi,0x3c(%esp)
xor    %edi,%edi
mov    0x6c(%esp),%eax
cmp    $0x4,%ecx
je     8080568 <rt_addr_n2a+0xf8>
jle    8080528 <rt_addr_n2a+0xb8>
cmp    $0xa,%ecx
je     808052d <rt_addr_n2a+0xbd>
cmp    $0xc,%ecx
jne    8080560 <rt_addr_n2a+0xf0>
lea    0x26(%esp),%esi
mov    $0x16,%ebp
test   $0x2,%esi
mov    %esi,%edi
jne    8080598 <rt_addr_n2a+0x128>
mov    %ebp,%ecx
and    $0xfffffffc,%ecx
mov    %ecx,0x1c(%esp)
xor    %ecx,%ecx
movl   $0x0,(%edi,%ecx,1)
add    $0x4,%ecx
cmp    0x1c(%esp),%ecx
jb     80804da <rt_addr_n2a+0x6a>
add    %ecx,%edi
and    $0x2,%ebp
jne    8080588 <rt_addr_n2a+0x118>
movzwl (%edx),%edx
mov    $0x2,%ecx
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0xc,(%esp)
mov    %dx,0x28(%esp)
mov    0x70(%esp),%edx
mov    %cx,0x26(%esp)
mov    %edx,0xc(%esp)
call   8082130 <dnet_ntop>
jmp    8080545 <rt_addr_n2a+0xd5>
lea    0x0(%esi),%esi
cmp    $0x2,%ecx
jne    8080560 <rt_addr_n2a+0xf0>
mov    0x70(%esp),%edi
mov    %eax,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ecx,(%esp)
mov    %edi,0xc(%esp)
call   804baa0 <inet_ntop@plt>
mov    0x3c(%esp),%esi
xor    %gs:0x14,%esi
jne    80805a5 <rt_addr_n2a+0x135>
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    -0x78fe(%ebx),%eax
jmp    8080545 <rt_addr_n2a+0xd5>
mov    0x70(%esp),%esi
mov    %eax,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x4,(%esp)
mov    %esi,0xc(%esp)
call   8082410 <ipx_ntop>
jmp    8080545 <rt_addr_n2a+0xd5>
xchg   %ax,%ax
xor    %ebp,%ebp
mov    %bp,(%edi)
jmp    80804f5 <rt_addr_n2a+0x85>
lea    0x0(%esi),%esi
lea    0x28(%esp),%edi
mov    $0x14,%bp
jmp    80804cf <rt_addr_n2a+0x5f>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13a47,%ebx
sub    $0x3c,%esp
mov    0x54(%esp),%ecx
lea    0x1c9c(%ebx),%eax
mov    (%eax),%esi
test   %esi,%esi
je     8080748 <format_host+0x198>
test   %ecx,%ecx
jle    80807e8 <format_host+0x238>
cmpl   $0xa,0x50(%esp)
je     808077d <format_host+0x1cd>
mov    0x58(%esp),%edx
lea    -0x4(%ecx),%eax
mov    0x50(%esp),%esi
mov    %ecx,0x20(%esp)
mov    %ecx,0x2c(%esp)
mov    %edx,0x1c(%esp)
mov    0x1c(%esp),%edx
mov    $0xff00ff01,%edi
mov    (%edx,%eax,1),%ebp
mov    %ebp,%eax
mul    %edi
mov    %edx,%edi
shr    $0x8,%edi
mov    %edi,%eax
shl    $0x8,%eax
add    %eax,%edi
sub    %edi,%ebp
mov    0x4560(%ebx,%ebp,4),%eax
mov    %ebp,%edi
test   %eax,%eax
mov    %eax,0x24(%esp)
je     8080686 <format_host+0xd6>
mov    %edi,0x28(%esp)
mov    %eax,%ebp
mov    %ecx,%edi
jmp    8080647 <format_host+0x97>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%ebp
test   %ebp,%ebp
je     8080680 <format_host+0xd0>
movzbl 0x8(%ebp),%eax
cmp    %esi,%eax
jne    8080640 <format_host+0x90>
movzbl 0x9(%ebp),%eax
cmp    %eax,%edi
jne    8080640 <format_host+0x90>
mov    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x10(%ebp),%eax
mov    %eax,(%esp)
call   804b620 <memcmp@plt>
test   %eax,%eax
jne    8080640 <format_host+0x90>
mov    0x4(%ebp),%eax
jmp    8080739 <format_host+0x189>
xchg   %ax,%ax
mov    %edi,%ecx
mov    0x28(%esp),%edi
movl   $0x30,(%esp)
mov    %ecx,0x28(%esp)
call   804b7a0 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     808073d <format_host+0x18d>
mov    %esi,%eax
mov    0x28(%esp),%ecx
mov    %al,0x8(%ebp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%ebp)
mov    %cl,0x9(%ebp)
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x20,0xc(%esp)
mov    %eax,0x4(%esp)
lea    0x10(%ebp),%eax
mov    %eax,(%esp)
call   804b7e0 <__memcpy_chk@plt>
mov    0x24(%esp),%eax
mov    %ebp,0x4560(%ebx,%edi,4)
mov    %eax,0x0(%ebp)
mov    0x4540(%ebx),%eax
add    $0x1,%eax
cmp    $0x1,%eax
mov    %eax,0x4540(%ebx)
je     808083f <format_host+0x28f>
mov    -0x20(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b590 <fflush@plt>
mov    0x20(%esp),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804b650 <gethostbyaddr@plt>
test   %eax,%eax
je     8080676 <format_host+0xc6>
mov    (%eax),%eax
mov    %eax,(%esp)
call   804b940 <__strdup@plt>
mov    %eax,0x4(%ebp)
test   %eax,%eax
jne    8080770 <format_host+0x1c0>
mov    0x2c(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
mov    0x60(%esp),%eax
mov    %ecx,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x5c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   8080470 <rt_addr_n2a>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x10,%ecx
mov    0x58(%esp),%eax
mov    (%eax),%edx
test   %edx,%edx
jne    80807c8 <format_host+0x218>
mov    0x58(%esp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
jne    80807c8 <format_host+0x218>
mov    0x58(%esp),%eax
cmpl   $0xffff0000,0x8(%eax)
jne    80807c8 <format_host+0x218>
mov    0x58(%esp),%eax
mov    $0x2,%esi
mov    %ecx,0x2c(%esp)
mov    $0x4,%ecx
movl   $0x4,0x20(%esp)
add    $0xc,%eax
mov    %eax,0x1c(%esp)
xor    %eax,%eax
jmp    8080600 <format_host+0x50>
nop
mov    0x58(%esp),%edx
lea    -0x4(%ecx),%eax
mov    $0xa,%esi
mov    %ecx,0x20(%esp)
mov    %ecx,0x2c(%esp)
mov    %edx,0x1c(%esp)
jmp    8080600 <format_host+0x50>
lea    0x0(%esi),%esi
cmpl   $0x4,0x50(%esp)
je     8080850 <format_host+0x2a0>
jle    808082a <format_host+0x27a>
cmpl   $0xa,0x50(%esp)
je     8080778 <format_host+0x1c8>
cmpl   $0xc,0x50(%esp)
jne    8080748 <format_host+0x198>
mov    $0xfffffffe,%eax
mov    $0x2,%ecx
movl   $0x2,0x20(%esp)
mov    0x58(%esp),%edx
mov    %ecx,0x2c(%esp)
mov    0x50(%esp),%esi
mov    %edx,0x1c(%esp)
jmp    8080600 <format_host+0x50>
cmpl   $0x2,0x50(%esp)
jne    8080748 <format_host+0x198>
mov    $0x4,%ecx
jmp    80805e9 <format_host+0x39>
movl   $0x1,(%esp)
call   804b740 <sethostent@plt>
jmp    80806fc <format_host+0x14c>
mov    $0x6,%eax
mov    $0xa,%ecx
movl   $0xa,0x20(%esp)
jmp    8080815 <format_host+0x265>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x13780,%ebx
mov    0x4c(%esp),%ebp
test   %eax,%eax
jle    8080902 <hexstring_n2a+0x92>
cmp    $0x2,%ebp
jle    8080902 <hexstring_n2a+0x92>
mov    0x44(%esp),%eax
xor    %esi,%esi
mov    0x48(%esp),%edi
sub    $0x1,%eax
mov    %eax,0x18(%esp)
lea    -0x72cb(%ebx),%eax
mov    %eax,0x1c(%esp)
jmp    80808c8 <hexstring_n2a+0x58>
movb   $0x3a,0x2(%edi)
sub    $0x3,%ebp
add    $0x3,%edi
add    $0x1,%esi
cmp    0x44(%esp),%esi
je     8080902 <hexstring_n2a+0x92>
cmp    $0x2,%ebp
jle    8080902 <hexstring_n2a+0x92>
mov    0x40(%esp),%eax
movzbl (%eax,%esi,1),%eax
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x10(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0xc(%esp)
call   804bbb0 <__sprintf_chk@plt>
lea    -0x2(%ebp),%eax
cmp    0x18(%esp),%esi
je     808090e <hexstring_n2a+0x9e>
cmp    $0x1,%eax
jne    80808b0 <hexstring_n2a+0x40>
mov    0x48(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x2,%edi
mov    %eax,%ebp
jmp    80808ba <hexstring_n2a+0x4a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x136d5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edx
movzbl (%edx),%eax
xor    %esi,%esi
cmp    $0x3a,%al
je     8080994 <hexstring_a2n+0x74>
test   %al,%al
je     8080994 <hexstring_a2n+0x74>
mov    0x38(%esp),%ebp
jmp    8080969 <hexstring_a2n+0x49>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x57(%eax),%ecx
add    $0x1,%edx
movzbl (%edx),%eax
movsbl %cl,%ecx
shl    $0x4,%esi
add    %ecx,%esi
cmp    $0x3a,%al
je     8080988 <hexstring_a2n+0x68>
test   %al,%al
je     8080988 <hexstring_a2n+0x68>
lea    -0x30(%eax),%ecx
cmp    $0x9,%cl
jbe    8080953 <hexstring_a2n+0x33>
lea    -0x61(%eax),%ecx
cmp    $0x5,%cl
jbe    8080950 <hexstring_a2n+0x30>
lea    -0x41(%eax),%ecx
cmp    $0x5,%cl
ja     80809b0 <hexstring_a2n+0x90>
lea    -0x37(%eax),%ecx
jmp    8080953 <hexstring_a2n+0x33>
xchg   %ax,%ax
cmp    $0xff,%esi
mov    %ebp,0x38(%esp)
ja     80809b0 <hexstring_a2n+0x90>
cmp    0x38(%esp),%edi
jge    80809a7 <hexstring_a2n+0x87>
mov    0x34(%esp),%ebp
mov    %esi,%ecx
mov    %cl,0x0(%ebp,%edi,1)
add    $0x1,%edi
test   %al,%al
je     80809bc <hexstring_a2n+0x9c>
add    $0x1,%edx
jmp    8080938 <hexstring_a2n+0x18>
xor    %esi,%esi
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x38(%esp),%ebp
mov    0x34(%esp),%esi
cmp    %edi,%ebp
jle    80809b2 <hexstring_a2n+0x92>
sub    %edi,%ebp
add    %esi,%edi
mov    %ebp,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   804b910 <memset@plt>
jmp    80809b2 <hexstring_a2n+0x92>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13609,%ebx
sub    $0x34,%esp
lea    0x28(%esp),%esi
mov    %esi,(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
call   804b630 <gettimeofday@plt>
mov    %esi,(%esp)
call   804b830 <localtime@plt>
mov    %eax,(%esp)
call   804b6b0 <asctime@plt>
mov    %eax,(%esp)
mov    %eax,%esi
call   804b880 <strlen@plt>
movb   $0x0,-0x1(%esi,%eax,1)
mov    0x2c(%esp),%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
lea    -0x78fa(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x34,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x68(%esp),%eax
call   804d560 <_start+0x2d>
add    $0x13570,%ebx
mov    0x60(%esp),%esi
movl   $0xa,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x64(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b6d0 <__getdelim@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     8080bf8 <getcmdline+0x178>
lea    0x4b78(%ebx),%eax
mov    (%esi),%edi
addl   $0x1,(%eax)
movl   $0x23,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8080ae6 <getcmdline+0x66>
movb   $0x0,(%eax)
mov    (%esi),%edi
lea    -0x78b8(%ebx),%eax
mov    %eax,0x28(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x2c(%esp)
jmp    8080b73 <getcmdline+0xf3>
lea    0x0(%esi),%esi
movb   $0x0,(%eax)
mov    0x38(%esp),%ecx
mov    (%esi),%ebp
mov    %ecx,0x24(%esp)
mov    %ebp,(%esp)
call   804b880 <strlen@plt>
mov    0x24(%esp),%ecx
mov    %ecx,(%esp)
mov    %eax,0x20(%esp)
call   804b880 <strlen@plt>
mov    0x20(%esp),%edx
mov    0x64(%esp),%ecx
lea    0x1(%edx,%eax,1),%eax
mov    %eax,(%ecx)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b790 <realloc@plt>
test   %eax,%eax
mov    %eax,(%esi)
je     8080c40 <getcmdline+0x1c0>
mov    0x1c(%esp),%edx
mov    %eax,(%esp)
lea    -0x2(%edx,%edi,1),%edi
mov    0x38(%esp),%edx
mov    %edi,0x1c(%esp)
mov    %edx,0x4(%esp)
call   804b730 <strcat@plt>
mov    0x38(%esp),%eax
mov    %eax,(%esp)
call   804b5b0 <free@plt>
mov    (%esi),%edi
mov    0x28(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804b550 <strstr@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8080bf8 <getcmdline+0x178>
mov    0x68(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
mov    %eax,0xc(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x38(%esp),%eax
mov    %eax,(%esp)
call   804b6d0 <__getdelim@plt>
test   %eax,%eax
mov    %eax,%edi
js     8080c08 <getcmdline+0x188>
lea    0x4b78(%ebx),%eax
addl   $0x1,(%eax)
movb   $0x0,0x0(%ebp)
mov    0x38(%esp),%ebp
movl   $0x23,0x4(%esp)
mov    %ebp,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
jne    8080b00 <getcmdline+0x80>
mov    %ebp,%ecx
jmp    8080b07 <getcmdline+0x87>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
add    $0x4c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x78e2(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
add    $0x4c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0xe,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x78c7(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
mov    0x64(%esp),%eax
movl   $0x0,(%eax)
add    $0x4c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8080c90 <makeargs>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13367,%ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    0x44(%esp),%esi
mov    %eax,(%esp)
lea    -0x7675(%ebx),%edi
mov    %edi,0x4(%esp)
call   804b9f0 <strtok@plt>
test   %eax,%eax
je     8080d11 <makeargs+0x81>
mov    0x48(%esp),%ecx
lea    -0x1(%ecx),%edx
test   %edx,%edx
mov    %edx,0x1c(%esp)
jle    8080d17 <makeargs+0x87>
xor    %ebp,%ebp
jmp    8080cde <makeargs+0x4e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0x1c(%esp),%ebp
je     8080d17 <makeargs+0x87>
add    $0x1,%ebp
mov    %eax,-0x4(%esi,%ebp,4)
mov    %edi,0x4(%esp)
movl   $0x0,(%esp)
call   804b9f0 <strtok@plt>
test   %eax,%eax
jne    8080cd8 <makeargs+0x48>
lea    0x0(,%ebp,4),%eax
movl   $0x0,(%esi,%eax,1)
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %eax,%eax
xor    %ebp,%ebp
jmp    8080d00 <makeargs+0x70>
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
movl   $0x1e,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x7694(%ebx),%eax
mov    %eax,(%esp)
call   804b710 <fwrite@plt>
movl   $0x1,(%esp)
call   804b800 <exit@plt>
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
call   804d560 <_start+0x2d>
add    $0x132a6,%ebx
mov    0x20(%esp),%esi
movl   $0x3a,0x4(%esp)
mov    %esi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8080d98 <inet_get_addr+0x48>
mov    0x28(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0xa,(%esp)
mov    %eax,0x8(%esp)
call   804b5d0 <inet_pton@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x24(%esp),%eax
mov    %esi,0x4(%esp)
movl   $0x2,(%esp)
mov    %eax,0x8(%esp)
call   804b5d0 <inet_pton@plt>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %eax,%ecx
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x13235,%ebx
sub    $0x44c,%esp
mov    %eax,0x2c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x43c(%esp)
xor    %eax,%eax
mov    %ecx,(%esp)
mov    %edx,0x28(%esp)
lea    -0xfc25(%ebx),%eax
mov    %eax,0x4(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%edi
je     8080f55 <inet_get_addr+0x205>
lea    -0x7668(%ebx),%eax
lea    0x3c(%esp),%esi
mov    %eax,0x24(%esp)
mov    %edi,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %esi,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     8080f47 <inet_get_addr+0x1f7>
movzbl 0x3c(%esp),%eax
mov    %esi,%ebp
cmp    $0x20,%al
jne    8080f3a <inet_get_addr+0x1ea>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebp
movzbl 0x0(%ebp),%eax
cmp    $0x9,%al
je     8080e48 <inet_get_addr+0xf8>
cmp    $0x20,%al
je     8080e48 <inet_get_addr+0xf8>
cmp    $0x23,%al
je     8080e18 <inet_get_addr+0xc8>
cmp    $0xa,%al
lea    0x0(%esi),%esi
je     8080e18 <inet_get_addr+0xc8>
test   %al,%al
je     8080e18 <inet_get_addr+0xc8>
mov    0x24(%esp),%edx
lea    0x23c(%esp),%eax
lea    0x38(%esp),%ecx
mov    %eax,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x1c(%esp)
mov    %ecx,0x20(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8080f10 <inet_get_addr+0x1c0>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%ecx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x765f(%ebx),%eax
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8080f10 <inet_get_addr+0x1c0>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%ecx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x7655(%ebx),%eax
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8080f10 <inet_get_addr+0x1c0>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%ecx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x764e(%ebx),%eax
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
jne    8080f70 <inet_get_addr+0x220>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
cmp    $0x100,%eax
ja     8080e18 <inet_get_addr+0xc8>
mov    0x28(%esp),%edx
lea    (%edx,%eax,4),%ebp
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804b940 <__strdup@plt>
mov    %eax,0x0(%ebp)
jmp    8080e18 <inet_get_addr+0xc8>
cmp    $0x9,%al
je     8080e48 <inet_get_addr+0xf8>
jmp    8080e57 <inet_get_addr+0x107>
mov    %edi,(%esp)
lea    0x0(%esi),%esi
call   804b600 <fclose@plt>
mov    0x43c(%esp),%eax
xor    %gs:0x14,%eax
jne    8080fa8 <inet_get_addr+0x258>
add    $0x44c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x2c(%esp),%eax
mov    %ebp,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x755c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   804b600 <fclose@plt>
jmp    8080f55 <inet_get_addr+0x205>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi),%esi
call   807d661 <ll_init_map+0xc1>
add    $0x1304b,%ecx
lea    -0x7646(%ecx),%eax
mov    %eax,0x183c(%ecx)
lea    -0x763e(%ecx),%eax
mov    %eax,0x1838(%ecx)
lea    -0xfe60(%ecx),%eax
mov    %eax,0x1834(%ecx)
lea    -0x7639(%ecx),%eax
mov    %eax,0x1760(%ecx)
lea    0x1440(%ecx),%edx
lea    -0x7634(%ecx),%eax
movl   $0x1,0x49a4(%ecx)
00
jmp    8080dc0 <inet_get_addr+0x70>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ecx
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12fe5,%ebx
sub    $0x44c,%esp
mov    %eax,0x2c(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x43c(%esp)
xor    %eax,%eax
mov    %ecx,(%esp)
mov    %edx,0x28(%esp)
lea    -0xfc25(%ebx),%eax
mov    %eax,0x4(%esp)
call   804b900 <fopen@plt>
test   %eax,%eax
mov    %eax,%edi
je     80811bd <inet_get_addr+0x46d>
lea    -0x7668(%ebx),%eax
lea    0x3c(%esp),%esi
mov    %eax,0x24(%esp)
mov    %edi,0x8(%esp)
movl   $0x200,0x4(%esp)
mov    %esi,(%esp)
call   804b5f0 <fgets@plt>
test   %eax,%eax
je     80811b5 <inet_get_addr+0x465>
movzbl 0x3c(%esp),%eax
mov    %esi,%ebp
cmp    $0x20,%al
jne    80811a8 <inet_get_addr+0x458>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebp
movzbl 0x0(%ebp),%eax
cmp    $0x9,%al
je     8081098 <inet_get_addr+0x348>
cmp    $0x20,%al
je     8081098 <inet_get_addr+0x348>
cmp    $0x23,%al
je     8081068 <inet_get_addr+0x318>
cmp    $0xa,%al
lea    0x0(%esi),%esi
je     8081068 <inet_get_addr+0x318>
test   %al,%al
je     8081068 <inet_get_addr+0x318>
mov    0x24(%esp),%ecx
lea    0x23c(%esp),%eax
lea    0x38(%esp),%edx
mov    %eax,0xc(%esp)
mov    %edx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,0x20(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8081160 <inet_get_addr+0x410>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%edx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x765f(%ebx),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8081160 <inet_get_addr+0x410>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%edx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x7655(%ebx),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
je     8081160 <inet_get_addr+0x410>
mov    0x1c(%esp),%eax
mov    0x20(%esp),%edx
mov    %ebp,(%esp)
mov    %eax,0xc(%esp)
lea    -0x764e(%ebx),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x2,%eax
jne    80811d8 <inet_get_addr+0x488>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x38(%esp),%eax
test   %eax,%eax
js     8081068 <inet_get_addr+0x318>
movl   $0xc,(%esp)
call   804b7a0 <malloc@plt>
mov    %eax,%ebp
mov    0x38(%esp),%eax
mov    %eax,0x8(%ebp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   804b940 <__strdup@plt>
mov    0x28(%esp),%ecx
mov    %eax,0x4(%ebp)
movzbl 0x38(%esp),%eax
lea    (%ecx,%eax,4),%eax
mov    (%eax),%ecx
mov    %ecx,0x0(%ebp)
mov    %ebp,(%eax)
jmp    8081068 <inet_get_addr+0x318>
cmp    $0x9,%al
je     8081098 <inet_get_addr+0x348>
jmp    80810a7 <inet_get_addr+0x357>
mov    %edi,(%esp)
call   804b600 <fclose@plt>
mov    0x43c(%esp),%eax
xor    %gs:0x14,%eax
jne    8081210 <inet_get_addr+0x4c0>
add    $0x44c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x2c(%esp),%eax
mov    %ebp,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x755c(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    %edi,(%esp)
call   804b600 <fclose@plt>
jmp    80811bd <inet_get_addr+0x46d>
call   8082850 <__libc_csu_fini+0x10>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x12dd2,%ebx
cmp    $0xff,%esi
ja     808125a <rtnl_rtprot_n2a+0x3a>
mov    0x1840(%ebx,%esi,4),%eax
test   %eax,%eax
je     8081250 <rtnl_rtprot_n2a+0x30>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x49a8(%ebx),%eax
test   %eax,%eax
je     8081298 <rtnl_rtprot_n2a+0x78>
lea    -0xb933(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
lea    -0x761c(%ebx),%eax
lea    0x1840(%ebx),%edx
movl   $0x1,0x49a8(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
mov    0x1840(%ebx,%esi,4),%eax
test   %eax,%eax
jne    8081247 <rtnl_rtprot_n2a+0x27>
jmp    808125a <rtnl_rtprot_n2a+0x3a>
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12d37,%ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
mov    0x4990(%ebx),%eax
test   %eax,%eax
je     80812f0 <rtnl_rtprot_a2n+0x30>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     8081340 <rtnl_rtprot_a2n+0x80>
mov    0x49a8(%ebx),%eax
test   %eax,%eax
je     8081358 <rtnl_rtprot_a2n+0x98>
xor    %esi,%esi
jmp    808130b <rtnl_rtprot_a2n+0x4b>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x100,%esi
je     8081378 <rtnl_rtprot_a2n+0xb8>
mov    0x1840(%ebx,%esi,4),%edi
test   %edi,%edi
je     8081300 <rtnl_rtprot_a2n+0x40>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8081300 <rtnl_rtprot_a2n+0x40>
mov    0x40(%esp),%ecx
mov    %edi,0x4990(%ebx)
mov    %esi,0x498c(%ebx)
mov    %esi,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x498c(%ebx),%edx
mov    0x40(%esp),%ecx
mov    %edx,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x1840(%ebx),%edx
lea    -0x761c(%ebx),%eax
movl   $0x1,0x49a8(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
jmp    80812fa <rtnl_rtprot_a2n+0x3a>
lea    0x0(%esi),%esi
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,0x498c(%ebx)
je     80813be <rtnl_rtprot_a2n+0xfe>
cmp    %edx,%ebp
je     80813be <rtnl_rtprot_a2n+0xfe>
cmpb   $0x0,(%edx)
jne    80813be <rtnl_rtprot_a2n+0xfe>
cmp    $0xff,%eax
ja     80813be <rtnl_rtprot_a2n+0xfe>
mov    0x40(%esp),%edx
mov    %eax,(%edx)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8081338 <rtnl_rtprot_a2n+0x78>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x12c22,%ebx
cmp    $0xff,%esi
ja     808140a <rtnl_rtscope_n2a+0x3a>
mov    0x1440(%ebx,%esi,4),%eax
test   %eax,%eax
je     8081400 <rtnl_rtscope_n2a+0x30>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x49a4(%ebx),%eax
test   %eax,%eax
je     8081448 <rtnl_rtscope_n2a+0x78>
lea    -0xa338(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
call   8080fb0 <inet_get_addr+0x260>
mov    0x1440(%ebx,%esi,4),%eax
test   %eax,%eax
jne    80813f7 <rtnl_rtscope_n2a+0x27>
jmp    808140a <rtnl_rtscope_n2a+0x3a>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12b97,%ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
mov    0x4988(%ebx),%eax
test   %eax,%eax
je     8081490 <rtnl_rtscope_a2n+0x30>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     80814e0 <rtnl_rtscope_a2n+0x80>
mov    0x49a4(%ebx),%eax
test   %eax,%eax
je     80814f8 <rtnl_rtscope_a2n+0x98>
xor    %esi,%esi
jmp    80814ab <rtnl_rtscope_a2n+0x4b>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x100,%esi
je     8081500 <rtnl_rtscope_a2n+0xa0>
mov    0x1440(%ebx,%esi,4),%edi
test   %edi,%edi
je     80814a0 <rtnl_rtscope_a2n+0x40>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    80814a0 <rtnl_rtscope_a2n+0x40>
mov    0x40(%esp),%ecx
mov    %edi,0x4988(%ebx)
mov    %esi,0x4984(%ebx)
mov    %esi,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4984(%ebx),%edx
mov    0x40(%esp),%ecx
mov    %edx,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   8080fb0 <inet_get_addr+0x260>
jmp    808149a <rtnl_rtscope_a2n+0x3a>
nop
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,0x4984(%ebx)
je     8081546 <rtnl_rtscope_a2n+0xe6>
cmp    %edx,%ebp
je     8081546 <rtnl_rtscope_a2n+0xe6>
cmpb   $0x0,(%edx)
jne    8081546 <rtnl_rtscope_a2n+0xe6>
cmp    $0xff,%eax
ja     8081546 <rtnl_rtscope_a2n+0xe6>
mov    0x40(%esp),%edx
mov    %eax,(%edx)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    80814d8 <rtnl_rtscope_a2n+0x78>
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x12aa2,%ebx
cmp    $0xff,%esi
ja     808158a <rtnl_rtrealm_n2a+0x3a>
mov    0x1040(%ebx,%esi,4),%eax
test   %eax,%eax
je     8081580 <rtnl_rtrealm_n2a+0x30>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x49a0(%ebx),%eax
test   %eax,%eax
je     80815c8 <rtnl_rtrealm_n2a+0x78>
lea    -0xa338(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
lea    -0x7604(%ebx),%eax
lea    0x1040(%ebx),%edx
movl   $0x1,0x49a0(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
mov    0x1040(%ebx,%esi,4),%eax
test   %eax,%eax
jne    8081577 <rtnl_rtrealm_n2a+0x27>
jmp    808158a <rtnl_rtrealm_n2a+0x3a>
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12a07,%ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
mov    0x4980(%ebx),%eax
test   %eax,%eax
je     8081620 <rtnl_rtrealm_a2n+0x30>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     8081670 <rtnl_rtrealm_a2n+0x80>
mov    0x49a0(%ebx),%eax
test   %eax,%eax
je     8081688 <rtnl_rtrealm_a2n+0x98>
xor    %esi,%esi
jmp    808163b <rtnl_rtrealm_a2n+0x4b>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x100,%esi
je     80816a8 <rtnl_rtrealm_a2n+0xb8>
mov    0x1040(%ebx,%esi,4),%edi
test   %edi,%edi
je     8081630 <rtnl_rtrealm_a2n+0x40>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8081630 <rtnl_rtrealm_a2n+0x40>
mov    0x40(%esp),%ecx
mov    %edi,0x4980(%ebx)
mov    %esi,0x497c(%ebx)
mov    %esi,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x497c(%ebx),%edx
mov    0x40(%esp),%ecx
mov    %edx,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x1040(%ebx),%edx
lea    -0x7604(%ebx),%eax
movl   $0x1,0x49a0(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
jmp    808162a <rtnl_rtrealm_a2n+0x3a>
lea    0x0(%esi),%esi
lea    0x1c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,0x497c(%ebx)
je     80816ee <rtnl_rtrealm_a2n+0xfe>
cmp    %edx,%ebp
je     80816ee <rtnl_rtrealm_a2n+0xfe>
cmpb   $0x0,(%edx)
jne    80816ee <rtnl_rtrealm_a2n+0xfe>
cmp    $0xff,%eax
ja     80816ee <rtnl_rtrealm_a2n+0xfe>
mov    0x40(%esp),%edx
mov    %eax,(%edx)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8081668 <rtnl_rtrealm_a2n+0x78>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x128f9,%ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
mov    0x499c(%ebx),%eax
test   %eax,%eax
je     8081788 <rtnl_rttable_n2a+0x88>
mov    %esi,%eax
movzbl %al,%eax
mov    0xc00(%ebx,%eax,4),%eax
test   %eax,%eax
jne    8081736 <rtnl_rttable_n2a+0x36>
jmp    8081748 <rtnl_rttable_n2a+0x48>
mov    (%eax),%eax
test   %eax,%eax
je     8081748 <rtnl_rttable_n2a+0x48>
cmp    %esi,0x8(%eax)
jne    8081730 <rtnl_rttable_n2a+0x30>
mov    0x4(%eax),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0xb933(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0xc00(%ebx),%edx
lea    -0x75ec(%ebx),%eax
movl   $0x1,0x499c(%ebx)
00
call   8081010 <inet_get_addr+0x2c0>
jmp    808171e <rtnl_rttable_n2a+0x1e>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12847,%ebx
sub    $0x3c,%esp
mov    0x54(%esp),%esi
mov    0x4978(%ebx),%eax
test   %eax,%eax
je     80817e4 <rtnl_rttable_a2n+0x34>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     80818c0 <rtnl_rttable_a2n+0x110>
mov    0x499c(%ebx),%eax
test   %eax,%eax
je     80818a0 <rtnl_rttable_a2n+0xf0>
lea    0xc00(%ebx),%eax
mov    %eax,0x18(%esp)
add    $0x400,%eax
mov    %eax,0x1c(%esp)
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
jne    808181e <rtnl_rttable_a2n+0x6e>
jmp    8081858 <rtnl_rttable_a2n+0xa8>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%edi
test   %edi,%edi
je     8081858 <rtnl_rttable_a2n+0xa8>
mov    0x4(%edi),%ebp
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8081818 <rtnl_rttable_a2n+0x68>
mov    %edi,%ecx
mov    %ebp,%edi
mov    0x8(%ecx),%edx
mov    0x50(%esp),%ecx
mov    %edi,0x4978(%ebx)
mov    %edx,0x4974(%ebx)
mov    %edx,(%ecx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
addl   $0x4,0x18(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x18(%esp)
jne    8081808 <rtnl_rttable_a2n+0x58>
lea    0x2c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804b840 <strtoul@plt>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     80818d4 <rtnl_rttable_a2n+0x124>
cmp    %edx,%esi
je     80818d4 <rtnl_rttable_a2n+0x124>
cmpb   $0x0,(%edx)
jne    80818d4 <rtnl_rttable_a2n+0x124>
mov    0x50(%esp),%edx
mov    %eax,(%edx)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0xc00(%ebx),%edx
lea    -0x75ec(%ebx),%eax
movl   $0x1,0x499c(%ebx)
00
call   8081010 <inet_get_addr+0x2c0>
jmp    80817f2 <rtnl_rttable_a2n+0x42>
mov    0x4974(%ebx),%edx
mov    0x50(%esp),%ecx
mov    %edx,(%ecx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    808184a <rtnl_rttable_a2n+0x9a>
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x12712,%ebx
cmp    $0xff,%esi
ja     8081910 <rtnl_dsfield_n2a+0x30>
mov    0x800(%ebx,%esi,4),%eax
test   %eax,%eax
je     8081950 <rtnl_dsfield_n2a+0x70>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    %esi,0x14(%esp)
lea    -0xa338(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4998(%ebx),%eax
test   %eax,%eax
je     8081968 <rtnl_dsfield_n2a+0x88>
mov    %esi,0x14(%esp)
lea    -0xdc5e(%ebx),%eax
jmp    808191a <rtnl_dsfield_n2a+0x3a>
xchg   %ax,%ax
lea    -0x75d4(%ebx),%eax
lea    0x800(%ebx),%edx
movl   $0x1,0x4998(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
mov    0x800(%ebx,%esi,4),%eax
test   %eax,%eax
jne    8081907 <rtnl_dsfield_n2a+0x27>
jmp    808195a <rtnl_dsfield_n2a+0x7a>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12657,%ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebp
mov    0x4970(%ebx),%eax
test   %eax,%eax
je     80819d0 <rtnl_dsfield_a2n+0x30>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     8081a20 <rtnl_dsfield_a2n+0x80>
mov    0x4998(%ebx),%eax
test   %eax,%eax
je     8081a38 <rtnl_dsfield_a2n+0x98>
xor    %esi,%esi
jmp    80819eb <rtnl_dsfield_a2n+0x4b>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x100,%esi
je     8081a58 <rtnl_dsfield_a2n+0xb8>
mov    0x800(%ebx,%esi,4),%edi
test   %edi,%edi
je     80819e0 <rtnl_dsfield_a2n+0x40>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    80819e0 <rtnl_dsfield_a2n+0x40>
mov    0x40(%esp),%ecx
mov    %edi,0x4970(%ebx)
mov    %esi,0x496c(%ebx)
mov    %esi,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x496c(%ebx),%edx
mov    0x40(%esp),%ecx
mov    %edx,(%ecx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x800(%ebx),%edx
lea    -0x75d4(%ebx),%eax
movl   $0x1,0x4998(%ebx)
00
call   8080dc0 <inet_get_addr+0x70>
jmp    80819da <rtnl_dsfield_a2n+0x3a>
lea    0x0(%esi),%esi
lea    0x1c(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   804b840 <strtoul@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
mov    %eax,0x496c(%ebx)
je     8081a9e <rtnl_dsfield_a2n+0xfe>
cmp    %edx,%ebp
je     8081a9e <rtnl_dsfield_a2n+0xfe>
cmpb   $0x0,(%edx)
jne    8081a9e <rtnl_dsfield_a2n+0xfe>
cmp    $0xff,%eax
ja     8081a9e <rtnl_dsfield_a2n+0xfe>
mov    0x40(%esp),%edx
mov    %eax,(%edx)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8081a18 <rtnl_dsfield_a2n+0x78>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12547,%ebx
sub    $0x3c,%esp
mov    0x54(%esp),%esi
mov    0x4968(%ebx),%eax
test   %eax,%eax
je     8081ae4 <rtnl_group_a2n+0x34>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
je     8081bc4 <rtnl_group_a2n+0x114>
mov    0x4994(%ebx),%eax
test   %eax,%eax
je     8081ba4 <rtnl_group_a2n+0xf4>
lea    0x3e0(%ebx),%eax
mov    %eax,0x18(%esp)
add    $0x400,%eax
mov    %eax,0x1c(%esp)
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
jne    8081b1e <rtnl_group_a2n+0x6e>
jmp    8081b58 <rtnl_group_a2n+0xa8>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%edi
test   %edi,%edi
je     8081b58 <rtnl_group_a2n+0xa8>
mov    0x4(%edi),%ebp
mov    %esi,0x4(%esp)
mov    %ebp,(%esp)
call   804b560 <strcmp@plt>
test   %eax,%eax
jne    8081b18 <rtnl_group_a2n+0x68>
mov    %edi,%ecx
mov    %ebp,%edi
mov    0x8(%ecx),%edx
mov    0x50(%esp),%ecx
mov    %edi,0x4968(%ebx)
mov    %edx,0x4964(%ebx)
mov    %edx,(%ecx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
addl   $0x4,0x18(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x18(%esp)
jne    8081b08 <rtnl_group_a2n+0x58>
lea    0x2c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   804bb20 <strtol@plt>
mov    0x2c(%esp),%edx
test   %edx,%edx
je     8081bd8 <rtnl_group_a2n+0x128>
cmp    %edx,%esi
je     8081bd8 <rtnl_group_a2n+0x128>
cmpb   $0x0,(%edx)
jne    8081bd8 <rtnl_group_a2n+0x128>
test   %eax,%eax
js     8081bd8 <rtnl_group_a2n+0x128>
mov    0x50(%esp),%edx
mov    %eax,(%edx)
add    $0x3c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x3e0(%ebx),%edx
lea    -0x75bb(%ebx),%eax
movl   $0x1,0x4994(%ebx)
00
call   8081010 <inet_get_addr+0x2c0>
jmp    8081af2 <rtnl_group_a2n+0x42>
mov    0x4964(%ebx),%edx
mov    0x50(%esp),%ecx
mov    %edx,(%ecx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8081b4a <rtnl_group_a2n+0x9a>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x12409,%ebx
sub    $0x24,%esp
mov    0x30(%esp),%esi
mov    0x4994(%ebx),%eax
test   %eax,%eax
je     8081c40 <rtnl_group_n2a+0x50>
lea    0x3e0(%ebx),%eax
lea    0x400(%eax),%ecx
jmp    8081c27 <rtnl_group_n2a+0x37>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%eax
cmp    %ecx,%eax
je     8081c60 <rtnl_group_n2a+0x70>
mov    (%eax),%edx
test   %edx,%edx
je     8081c20 <rtnl_group_n2a+0x30>
cmp    %esi,0x8(%edx)
jne    8081c20 <rtnl_group_n2a+0x30>
mov    0x4(%edx),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x3e0(%ebx),%edx
lea    -0x75bb(%ebx),%eax
movl   $0x1,0x4994(%ebx)
00
call   8081010 <inet_get_addr+0x2c0>
jmp    8081c0e <rtnl_group_n2a+0x1e>
lea    0x0(%esi),%esi
lea    -0xa338(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %esi,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%edx
call   804d560 <_start+0x2d>
add    $0x12353,%ebx
test   %edx,%edx
je     8081d1b <ll_type_n2a+0x7b>
mov    $0x1,%eax
jmp    8081cc8 <ll_type_n2a+0x28>
xchg   %ax,%ax
add    $0x1,%eax
cmp    $0x48,%eax
je     8081ce0 <ll_type_n2a+0x40>
cmp    %edx,-0x4e0(%ebx,%eax,8)
jne    8081cc0 <ll_type_n2a+0x20>
mov    -0x4dc(%ebx,%eax,8),%eax
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    -0x753c(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %edx,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    8081cd1 <ll_type_n2a+0x31>
nop
push   %ebx
sub    $0x28,%esp
movzwl 0x30(%esp),%edx
ror    $0x8,%dx
movzwl %dx,%edx
call   804d560 <_start+0x2d>
add    $0x122cb,%ebx
cmp    $0x60,%edx
je     8081da3 <ll_proto_n2a+0x83>
mov    $0x1,%eax
jmp    8081d50 <ll_proto_n2a+0x30>
nop
add    $0x1,%eax
cmp    $0x31,%eax
je     8081d68 <ll_proto_n2a+0x48>
cmp    %edx,-0x2a0(%ebx,%eax,8)
jne    8081d48 <ll_proto_n2a+0x28>
mov    -0x29c(%ebx,%eax,8),%eax
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    -0x753c(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %edx,0x14(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x34(%esp),%eax
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
mov    0x34(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    8081d59 <ll_proto_n2a+0x39>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x1c,%esp
call   804d560 <_start+0x2d>
add    $0x12242,%ebx
mov    0x30(%esp),%ebp
mov    0x34(%esp),%edi
jmp    8081dd8 <ll_proto_a2n+0x28>
xchg   %ax,%ax
add    $0x1,%esi
cmp    $0x31,%esi
je     8081e08 <ll_proto_a2n+0x58>
mov    -0x29c(%ebx,%esi,8),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   804b8b0 <strcasecmp@plt>
test   %eax,%eax
jne    8081dd0 <ll_proto_a2n+0x20>
mov    -0x2a0(%ebx,%esi,8),%edx
ror    $0x8,%dx
mov    %dx,0x0(%ebp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movl   $0x0,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   807f720 <get_u16>
test   %eax,%eax
jne    8081e34 <ll_proto_a2n+0x84>
movzwl 0x0(%ebp),%edx
ror    $0x8,%dx
mov    %dx,0x0(%ebp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffff,%eax
jmp    8081dfe <ll_proto_a2n+0x4e>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
call   804d560 <_start+0x2d>
add    $0x121b4,%ebx
mov    0x50(%esp),%ebp
cmpl   $0x4,0x44(%esp)
je     8081ef0 <ll_addr_n2a+0xb0>
cmpl   $0x10,0x44(%esp)
je     8081f38 <ll_addr_n2a+0xf8>
mov    0x44(%esp),%eax
test   %eax,%eax
jle    8081edd <ll_addr_n2a+0x9d>
xor    %edi,%edi
xor    %esi,%esi
mov    %ebp,0x50(%esp)
mov    %edi,%ebp
mov    0x50(%esp),%edi
lea    -0x72cc(%ebx),%eax
mov    %eax,0x1c(%esp)
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
mov    0x40(%esp),%eax
je     8081f6e <ll_addr_n2a+0x12e>
movzbl (%eax,%esi,1),%eax
mov    %edi,0x4(%esp)
sub    $0x3,%edi
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
add    %ebp,%eax
add    $0x3,%ebp
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
add    $0x1,%esi
cmp    0x44(%esp),%esi
jne    8081e90 <ll_addr_n2a+0x50>
mov    0x4c(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%eax
and    $0xfffffff7,%eax
cmp    $0x300,%eax
je     8081f0c <ll_addr_n2a+0xcc>
cmpl   $0x30a,0x48(%esp)
jne    8081e74 <ll_addr_n2a+0x34>
mov    0x4c(%esp),%eax
mov    %ebp,0xc(%esp)
movl   $0x2,(%esp)
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x4(%esp)
call   804baa0 <inet_ntop@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x301,0x48(%esp)
jne    8081e6c <ll_addr_n2a+0x2c>
mov    0x4c(%esp),%eax
mov    %ebp,0xc(%esp)
movl   $0xa,(%esp)
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x4(%esp)
call   804baa0 <inet_ntop@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movzbl (%eax),%eax
mov    %edi,0x4(%esp)
sub    $0x2,%edi
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
lea    -0x72cb(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
add    %ebp,%eax
add    $0x2,%ebp
mov    %eax,(%esp)
call   804b540 <__snprintf_chk@plt>
jmp    8081ed4 <ll_addr_n2a+0x94>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
call   804d560 <_start+0x2d>
add    $0x12044,%ebx
mov    0x78(%esp),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
je     8082058 <ll_addr_a2n+0xa8>
lea    0x28(%esp),%eax
movl   $0x2,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   807f9d0 <get_addr_1>
test   %eax,%eax
jne    8082020 <ll_addr_a2n+0x70>
cmpl   $0x3,0x74(%esp)
mov    $0xffffffff,%eax
jle    808204b <ll_addr_a2n+0x9b>
mov    0x30(%esp),%eax
mov    0x70(%esp),%ecx
mov    %eax,(%ecx)
add    $0x5c,%esp
mov    $0x4,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    -0x72c6(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %edi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
mov    $0xffffffff,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%esp),%eax
xor    %esi,%esi
mov    %eax,0x1c(%esp)
lea    -0x9e2d(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0x74(%esp),%eax
test   %eax,%eax
jg     80820a1 <ll_addr_a2n+0xf1>
jmp    808211b <ll_addr_a2n+0x16b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
cmp    $0xff,%eax
ja     80820da <ll_addr_a2n+0x12a>
mov    0x70(%esp),%edx
test   %ebp,%ebp
mov    %al,(%edx,%esi,1)
je     8082110 <ll_addr_a2n+0x160>
add    $0x1,%esi
cmp    0x74(%esp),%esi
je     8082110 <ll_addr_a2n+0x160>
mov    %ebp,%edi
movl   $0x3a,0x4(%esp)
mov    %edi,(%esp)
call   804b860 <strchr@plt>
test   %eax,%eax
mov    %eax,%ebp
je     80820bd <ll_addr_a2n+0x10d>
movb   $0x0,(%eax)
add    $0x1,%ebp
mov    0x1c(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x4(%esp)
call   804ba60 <sscanf@plt>
cmp    $0x1,%eax
je     8082080 <ll_addr_a2n+0xd0>
lea    -0x72c6(%ebx),%eax
mov    %eax,0x8(%esp)
mov    -0x28(%ebx),%eax
mov    %edi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804bad0 <__fprintf_chk@plt>
add    $0x5c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x5c,%esp
pop    %ebx
lea    0x1(%esi),%eax
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x1,%eax
jmp    808204b <ll_addr_a2n+0x9b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xc,%esp
call   804d560 <_start+0x2d>
add    $0x11ec4,%ebx
mov    0x24(%esp),%esi
cmpl   $0xc,0x20(%esp)
jne    8082290 <dnet_ntop+0x160>
call   804b970 <__errno_location@plt>
movl   $0x0,(%eax)
movzwl 0x2(%esi),%edx
xor    %eax,%eax
cmpw   $0x2,(%esi)
movzbl %dh,%ecx
jne    8082260 <dnet_ntop+0x130>
mov    0x2c(%esp),%eax
test   %eax,%eax
je     8082280 <dnet_ntop+0x150>
mov    %ecx,%eax
movzbl %dl,%edx
shl    $0x8,%eax
or     %edx,%eax
mov    %eax,%edx
shr    $0xa,%dx
movzwl %dx,%ecx
imul   $0xcccd,%ecx,%ecx
shr    $0x13,%ecx
test   %cx,%cx
mov    %ecx,%ebp
jne    8082268 <dnet_ntop+0x138>
mov    0x28(%esp),%esi
mov    $0x1,%ecx
xor    %edi,%edi
add    $0x30,%edx
cmp    %ecx,0x2c(%esp)
mov    %dl,(%esi)
je     8082280 <dnet_ntop+0x150>
mov    0x28(%esp),%esi
lea    0x2(%edi),%edx
cmp    %edx,0x2c(%esp)
movb   $0x2e,(%esi,%ecx,1)
je     8082280 <dnet_ntop+0x150>
and    $0x3ff,%ax
mov    %edx,%ecx
add    %esi,%ecx
cmp    $0x3e7,%ax
mov    %eax,%ebp
ja     80822c8 <dnet_ntop+0x198>
mov    %eax,%esi
shr    $0x2,%si
movzwl %si,%esi
imul   $0x147b,%esi,%esi
shr    $0x11,%esi
test   %si,%si
je     80822e4 <dnet_ntop+0x1b4>
add    $0x1,%edx
cmp    %edx,0x2c(%esp)
lea    0x30(%esi),%edi
mov    %edi,%eax
mov    %al,(%ecx)
je     8082280 <dnet_ntop+0x150>
lea    (%esi,%esi,4),%esi
mov    0x28(%esp),%edi
lea    (%esi,%esi,4),%esi
shl    $0x2,%esi
sub    %esi,%ebp
movzwl %bp,%esi
add    %edx,%edi
imul   $0xcccd,%esi,%esi
shr    $0x13,%esi
add    $0x1,%edx
cmp    %edx,0x2c(%esp)
lea    0x30(%esi),%ecx
mov    %cl,(%edi)
je     8082280 <dnet_ntop+0x150>
lea    (%esi,%esi,4),%esi
lea    (%esi,%esi,1),%ecx
sub    %ecx,%ebp
mov    0x28(%esp),%ecx
add    %edx,%ecx
lea    0x30(%ebp),%eax
mov    %al,(%ecx)
lea    0x1(%edx),%eax
cmp    %eax,0x2c(%esp)
je     8082280 <dnet_ntop+0x150>
mov    0x28(%esp),%eax
movb   $0x0,0x1(%eax,%edx,1)
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x28(%esp),%edi
lea    0x30(%ecx),%esi
cmpl   $0x1,0x2c(%esp)
mov    %esi,%ecx
mov    %cl,(%edi)
jne    80822a8 <dnet_ntop+0x178>
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   804b970 <__errno_location@plt>
movl   $0x61,(%eax)
add    $0xc,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%ebp,%ebp,4),%ecx
add    %ecx,%ecx
sub    %ecx,%edx
mov    $0x2,%ecx
lea    0x1(%edi),%esi
mov    $0x1,%edi
jmp    80821ad <dnet_ntop+0x7d>
lea    0x0(%esi),%esi
lea    0x3(%edi),%edx
cmp    %edx,0x2c(%esp)
movb   $0x31,(%ecx)
je     8082280 <dnet_ntop+0x150>
mov    %edx,%ecx
sub    $0x3e8,%bp
add    %esi,%ecx
xor    %esi,%esi
jmp    8082200 <dnet_ntop+0xd0>
movzwl %ax,%esi
mov    %ecx,%edi
imul   $0xcccd,%esi,%esi
shr    $0x13,%esi
test   %si,%si
jne    808222d <dnet_ntop+0xfd>
jmp    8082249 <dnet_ntop+0x119>
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%esi
call   804d560 <_start+0x2d>
add    $0x11cf4,%ebx
cmpl   $0xc,0x10(%esp)
jne    80823e6 <dnet_pton+0xe6>
call   804b970 <__errno_location@plt>
movl   $0x0,(%eax)
movsbl (%esi),%eax
test   %eax,%eax
je     80823fb <dnet_pton+0xfb>
sub    $0x30,%eax
cmp    $0x9,%eax
ja     80823fb <dnet_pton+0xfb>
xor    %edx,%edx
xor    %ecx,%ecx
jmp    8082350 <dnet_pton+0x50>
lea    0x0(%esi),%esi
sub    $0x30,%eax
cmp    $0x9,%eax
ja     8082361 <dnet_pton+0x61>
add    $0x1,%ecx
lea    (%edx,%edx,4),%edx
lea    (%eax,%edx,2),%edx
movsbl (%esi,%ecx,1),%eax
test   %eax,%eax
jne    8082348 <dnet_pton+0x48>
xor    %eax,%eax
cmp    $0x3f,%dx
ja     808236f <dnet_pton+0x6f>
cmpb   $0x2e,(%esi,%ecx,1)
je     8082378 <dnet_pton+0x78>
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1(%esi,%ecx,1),%edi
movsbl (%edi),%esi
test   %esi,%esi
je     808236f <dnet_pton+0x6f>
sub    $0x30,%esi
cmp    $0x9,%esi
ja     808236f <dnet_pton+0x6f>
xor    %ecx,%ecx
xor    %eax,%eax
jmp    80823a0 <dnet_pton+0xa0>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x30,%esi
cmp    $0x9,%esi
ja     80823b1 <dnet_pton+0xb1>
add    $0x1,%eax
lea    (%ecx,%ecx,4),%ecx
lea    (%esi,%ecx,2),%ecx
movsbl (%edi,%eax,1),%esi
test   %esi,%esi
jne    8082398 <dnet_pton+0x98>
xor    %eax,%eax
cmp    $0x3ff,%cx
ja     808236f <dnet_pton+0x6f>
mov    0x18(%esp),%eax
shl    $0xa,%edx
mov    $0x2,%esi
or     %ecx,%edx
mov    %si,(%eax)
mov    %edx,%eax
movzbl %dl,%edx
and    $0xff00,%eax
or     %eax,%edx
mov    0x18(%esp),%eax
mov    %dx,0x2(%eax)
mov    $0x1,%eax
jmp    808236f <dnet_pton+0x6f>
call   804b970 <__errno_location@plt>
movl   $0x61,(%eax)
mov    $0xffffffff,%eax
jmp    808236f <dnet_pton+0x6f>
xor    %eax,%eax
jmp    808236f <dnet_pton+0x6f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
call   804d560 <_start+0x2d>
add    $0x11be4,%ebx
mov    0x34(%esp),%edi
cmpl   $0x4,0x30(%esp)
mov    0x3c(%esp),%esi
jne    8082528 <ipx_ntop+0x118>
call   804b970 <__errno_location@plt>
test   %esi,%esi
movl   $0x0,(%eax)
je     8082508 <ipx_ntop+0xf8>
mov    (%edi),%eax
xor    %ecx,%ecx
mov    0x38(%esp),%ebp
bswap  %eax
shr    $0x1c,%eax
jmp    8082487 <ipx_ntop+0x77>
nop
lea    0x1(%ecx),%edx
add    $0x37,%eax
cmp    $0x8,%edx
mov    %al,0x0(%ebp)
je     808249d <ipx_ntop+0x8d>
mov    (%edi),%eax
mov    %edx,%ecx
mov    0x38(%esp),%ebp
neg    %ecx
lea    0x1c(,%ecx,4),%ecx
bswap  %eax
shr    %cl,%eax
add    %edx,%ebp
cmp    %esi,%edx
je     8082508 <ipx_ntop+0xf8>
mov    %edx,%ecx
and    $0xf,%eax
cmp    $0x9,%eax
ja     8082458 <ipx_ntop+0x48>
lea    0x1(%ecx),%edx
add    $0x30,%eax
cmp    $0x8,%edx
mov    %al,0x0(%ebp)
jne    8082466 <ipx_ntop+0x56>
cmp    $0x8,%esi
je     8082508 <ipx_ntop+0xf8>
mov    0x38(%esp),%eax
mov    0x38(%esp),%edx
movb   $0x2e,0x8(%eax)
lea    0x2(%ecx),%eax
add    %ecx,%edx
add    $0xe,%ecx
mov    %ecx,0xc(%esp)
movzbl 0x4(%edi),%ecx
shr    $0x4,%ecx
cmp    %eax,%esi
je     8082508 <ipx_ntop+0xf8>
cmp    $0x9,%ecx
jbe    8082518 <ipx_ntop+0x108>
add    $0x37,%ecx
mov    %cl,0x2(%edx)
lea    0x1(%eax),%ecx
movzbl 0x4(%edi),%ebp
cmp    %ecx,%esi
je     8082508 <ipx_ntop+0xf8>
mov    %ebp,%ecx
and    $0xf,%ecx
cmp    $0x9,%cl
jbe    8082520 <ipx_ntop+0x110>
add    $0x37,%ecx
mov    %cl,0x3(%edx)
add    $0x2,%eax
add    $0x1,%edi
add    $0x2,%edx
cmp    0xc(%esp),%eax
jne    80824ba <ipx_ntop+0xaa>
cmp    %eax,%esi
je     8082508 <ipx_ntop+0xf8>
mov    0x38(%esp),%esi
movb   $0x0,(%esi,%eax,1)
xchg   %ax,%ax
mov    0x38(%esp),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x30,%ecx
mov    %cl,0x2(%edx)
jmp    80824d0 <ipx_ntop+0xc0>
add    $0x30,%ecx
mov    %cl,0x3(%edx)
jmp    80824eb <ipx_ntop+0xdb>
call   804b970 <__errno_location@plt>
movl   $0x61,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    8082590 <ipx_ntop+0x180>
cmp    %ebp,%ecx
ja     80825c8 <ipx_ntop+0x1b8>
test   %ecx,%ecx
mov    %ecx,%esi
jne    8082578 <ipx_ntop+0x168>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     80825b8 <ipx_ntop+0x1a8>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    80825d8 <ipx_ntop+0x1c8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    8082648 <ipx_ntop+0x238>
cmp    %edx,%eax
jb     8082648 <ipx_ntop+0x238>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     8082658 <ipx_ntop+0x248>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8082639 <ipx_ntop+0x229>
cmp    (%esp),%esi
je     8082658 <ipx_ntop+0x248>
mov    %edi,%eax
xor    %edx,%edx
jmp    80825bc <ipx_ntop+0x1ac>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    80825bc <ipx_ntop+0x1ac>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    80826b8 <ipx_ntop+0x2a8>
cmp    %edi,%esi
jbe    80826f0 <ipx_ntop+0x2e0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8082710 <ipx_ntop+0x300>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8082720 <ipx_ntop+0x310>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     80827b8 <ipx_ntop+0x3a8>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8082701 <ipx_ntop+0x2f1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    80826ab <ipx_ntop+0x29b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     80827a4 <ipx_ntop+0x394>
cmp    %eax,0xc(%esp)
jb     80827a0 <ipx_ntop+0x390>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    808277e <ipx_ntop+0x36e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    808277e <ipx_ntop+0x36e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     80826d1 <ipx_ntop+0x2c1>
jmp    80826e1 <ipx_ntop+0x2d1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804d560 <_start+0x2d>
add    $0x11825,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0x504(%ebx),%esi
call   804b4e8 <_init>
lea    -0x508(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8082829 <__libc_csu_init+0x59>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x508(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8082808 <__libc_csu_init+0x38>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8082840 <__libc_csu_fini>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804d560 <_start+0x2d>
add    $0x117aa,%ebx
sub    $0x8,%esp
call   804b660 <__stack_chk_fail@plt>
push   %ebx
sub    $0x8,%esp
call   804d560 <_start+0x2d>
add    $0x11793,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
or     (%eax),%ah
pop    %edi
and    %bl,0x5f(%edi)
and    %bl,0x5f(%edi)
pop    %edi
and    %ah,(%eax)
and    %bl,0x5f(%edi)
pop    %edi
and    %ah,(%eax)
and    %bl,0x5f(%edi)
pop    %edi
or     0x27(%eax,%eiz,1),%bh
pop    %edi
and    %ah,0x20(%eax)
pop    %edi
and    %bl,0x2f(%eax,%eiz,1)
and    %bl,0x20(%edi)
pop    %esp
and    %ch,(%edi)
and    %bl,0x20(%edi)
pop    %esp
or     0x7c(%eax,%eiz,1),%bh
and    %bh,0x7c(%eax,%eiz,1)
and    %bh,0x7c(%eax,%eiz,1)
and    %ch,(%eax)
pop    %edi
sub    %esp,(%eax)
jl     80828e8 <_IO_stdin_used+0x64>
sub    %bl,0x29(%edi)
and    %bh,0x7c(%edx,%ecx,1)
pop    %edi
jl     80828f2 <_IO_stdin_used+0x6e>
jl     8082933 <_IO_stdin_used+0xaf>
jl     80828f6 <_IO_stdin_used+0x72>
jl     8082937 <_IO_stdin_used+0xb3>
jl     8082936 <_IO_stdin_used+0xb2>
pop    %edi
pop    %edi
pop    %edi
das
and    %bl,0x5f(%edi,%ebx,2)
pop    %edi
das
or     (%edx),%cl
or     0x2e(%eax),%dl
push   %ebx
and    %ch,%cs:0x6f(%esi)
and    %dh,0x65(%edx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x6f(%ebx)
ja     808296b <_IO_stdin_used+0xe7>
and    %dh,0x65(%edi)
jb     8082962 <_IO_stdin_used+0xde>
and    %ch,0x61(%eax)
jb     808296f <_IO_stdin_used+0xeb>
gs and %ah,%fs:%gs:0x6f(%esi)
jb     8082929 <_IO_stdin_used+0xa5>
je     8082973 <_IO_stdin_used+0xef>
imul   $0xa6f6f6d,0x20(%ebx),%esi
add    %al,(%eax)
push   %ebp
jae    8082978 <_IO_stdin_used+0xf4>
cmp    %gs:(%bx,%si),%ah
imul   $0x504f205b,0x20(%eax),%esi
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %bl,0x20(%ebp)
dec    %edi
inc    %edx
dec    %edx
inc    %ebp
inc    %ebx
push   %esp
and    %bh,0x20(%ebx)
inc    %ebx
dec    %edi
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
and    %bh,0x68(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
jo     8082962 <_IO_stdin_used+0xde>
jge    808294e <_IO_stdin_used+0xca>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %bl,0x20(%ebx)
sub    $0x63726f66,%eax
and    %bl,%gs:0x20(%ebp)
sub    $0x63746162,%eax
push   $0x6c696620
outsb  %gs:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
or     %gs:0x68(%edi),%dh
gs
jb     80829d3 <_IO_stdin_used+0x14f>
and    %ah,(%eax)
dec    %edi
inc    %edx
dec    %edx
inc    %ebp
inc    %ebx
push   %esp
and    %bh,(%edx)
cmp    $0x6c207b20,%eax
imul   $0x61207c20,0x6b(%esi),%ebp
fs
fs
jb     80829a8 <_IO_stdin_used+0x124>
jl     80829aa <_IO_stdin_used+0x126>
popa
fs
fs
jb     80829fb <_IO_stdin_used+0x177>
popa
bound  %esp,0x6c(%ebp)
and    %bh,0x72(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
jne    8082a0e <_IO_stdin_used+0x18a>
and    %bh,%gs:0x72(%eax,%eiz,1)
jne    8082a0d <_IO_stdin_used+0x189>
and    %bh,%gs:0x6e(%eax,%eiz,1)
imul   $0x6e207c20,%gs:0x68(%edi),%esp
je     8082a11 <_IO_stdin_used+0x18d>
bound  %ebp,0x20(%ebp,%eiz,2)
jl     80829c0 <_IO_stdin_used+0x13c>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x74(%eax,%eiz,1)
jne    8082a43 <_IO_stdin_used+0x1bf>
je     8082a38 <_IO_stdin_used+0x1b4>
jo     80829f9 <_IO_stdin_used+0x175>
jl     80829fb <_IO_stdin_used+0x177>
insl   (%dx),%es:(%edi)
popa
fs
fs
jb     8082a01 <_IO_stdin_used+0x17d>
jl     8082a03 <_IO_stdin_used+0x17f>
insl   (%dx),%es:(%edi)
jb     8082a55 <_IO_stdin_used+0x1d1>
jne    8082a5c <_IO_stdin_used+0x1d8>
and    %bh,%gs:0x6d(%eax,%eiz,1)
jb     8082a64 <_IO_stdin_used+0x1e0>
insb   (%dx),%es:(%edi)
and    %bh,%gs:0x6d(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x78207c20,0x72(%edi,%ebp,2),%esi
data16
jb     8082a6f <_IO_stdin_used+0x1eb>
and    %bh,0x20(%edx,%ecx,1)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
gs
je     8082a8a <_IO_stdin_used+0x206>
jae    8082a3e <_IO_stdin_used+0x1ba>
jl     8082a40 <_IO_stdin_used+0x1bc>
insb   (%dx),%es:(%edi)
xor    0x20(%eax,%esi,2),%dh
jl     8082a47 <_IO_stdin_used+0x1c3>
je     8082a8c <_IO_stdin_used+0x208>
jo     8082a8a <_IO_stdin_used+0x206>
insl   (%dx),%es:(%edi)
gs
je     8082aa1 <_IO_stdin_used+0x21d>
imul   $0x74207c20,0x73(%ebx),%esp
outsl  %ds:(%esi),(%dx)
imul   $0x20,0x6e(%ebp),%esp
jge    8082a47 <_IO_stdin_used+0x1c3>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x50(%edi)
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %bh,(%edx)
cmp    $0x2d207b20,%eax
push   %esi
pop    %ebx
gs
jb     8082aca <_IO_stdin_used+0x246>
imul   $0x207c205d,0x6e(%edi),%ebp
sub    $0x61745b73,%eax
je     8082ace <_IO_stdin_used+0x24a>
jae    8082adb <_IO_stdin_used+0x257>
imul   $0x207c205d,0x73(%ebx),%esp
sub    $0x74655b64,%eax
popa
imul   $0x2d207c20,0x5d(%ebx,%esi,2),%ebp
jb     8082ad9 <_IO_stdin_used+0x255>
gs
jae    8082af0 <_IO_stdin_used+0x26c>
insb   (%dx),%es:(%edi)
jbe    8082ae9 <_IO_stdin_used+0x265>
pop    %ebp
and    %bh,0x20(%edx,%ecx,1)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6d615b66
imul   $0x69207b20,0x5d(%ecx,%edi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
je     8082acd <_IO_stdin_used+0x249>
jl     8082acf <_IO_stdin_used+0x24b>
imul   $0x7c203674,0x65(%esi),%ebp
and    %ch,0x70(%ecx)
js     8082adb <_IO_stdin_used+0x257>
jl     8082add <_IO_stdin_used+0x259>
outsb  %fs:(%esi),(%dx)
gs
je     8082ae2 <_IO_stdin_used+0x25e>
jl     8082ae4 <_IO_stdin_used+0x260>
bound  %esi,0x69(%edx)
fs and %bh,%fs:%gs:0x20(%si)
insb   (%dx),%es:(%edi)
imul   $0x7c207d20,0x6b(%esi),%ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x207c2034
sub    $0x207c2036,%eax
sub    $0x207c2049,%eax
sub    $0x207c2044,%eax
sub    $0x207c2042,%eax
sub    $0xa7c2030,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f6f5b6c,%eax
jo     8082b96 <_IO_stdin_used+0x312>
pop    %ebp
and    %bh,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
js     8082b94 <_IO_stdin_used+0x310>
insl   (%dx),%es:(%edi)
jne    8082b9b <_IO_stdin_used+0x317>
sub    $0x72646461,%eax
sub    $0x73756c66,%eax
push   $0x7474612d
gs
insl   (%dx),%es:(%edi)
jo     8082bb5 <_IO_stdin_used+0x331>
jae    8082b63 <_IO_stdin_used+0x2df>
jge    8082b65 <_IO_stdin_used+0x2e1>
jl     8082b51 <_IO_stdin_used+0x2cd>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x656e5b6f,%eax
insb   (%dx),%es:(%edi)
imul   $0x207c205d,0x65(%esi),%ebp
sub    $0x6d695b74,%eax
gs
jae    8082be4 <_IO_stdin_used+0x360>
popa
insl   (%dx),%es:(%edi)
jo     8082bd1 <_IO_stdin_used+0x34d>
and    %bh,0x2d(%eax,%eiz,1)
bound  %ebx,0x61(%ebx)
je     8082be0 <_IO_stdin_used+0x35c>
push   $0x665b205d
imul   $0x5d656d61,0x6e(%ebp,%eiz,2),%ebp
and    %bh,0x20(%edx,%ecx,1)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x765b6372
bound  %esi,0x66(%ebp)
pop    %ebp
and    %bl,0x73(%ebx)
imul   $0xa7d5d,0x65(%edx),%edi
dec    %edi
bound  %ebp,0x65(%edx)
arpl   %si,0x22(%eax,%eiz,1)
and    $0x69202273,%eax
jae    8082be3 <_IO_stdin_used+0x35f>
jne    8082c33 <_IO_stdin_used+0x3af>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8082c40 <_IO_stdin_used+0x3bc>
jns    8082bf0 <_IO_stdin_used+0x36c>
and    0x70(%ecx),%ch
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8082bfb <_IO_stdin_used+0x377>
or     %cs:(%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8082c03 <_IO_stdin_used+0x37f>
outsl  %ds:(%esi),(%dx)
jo     8082c4b <_IO_stdin_used+0x3c7>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:(%edx)
and    $0x66202273,%eax
outsl  %ds:(%esi),(%dx)
jb     8082c16 <_IO_stdin_used+0x392>
jb     8082c5d <_IO_stdin_used+0x3d9>
popa
imul   $0x7325203a,%fs:0x67(%esi),%ebp
or     (%eax),%al
add    %cl,0x70(%edi)
je     8082c71 <_IO_stdin_used+0x3ed>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0x69202273,%eax
jae    8082c33 <_IO_stdin_used+0x3af>
jne    8082c83 <_IO_stdin_used+0x3ff>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8082c90 <_IO_stdin_used+0x40c>
jns    8082c40 <_IO_stdin_used+0x3bc>
and    0x70(%ecx),%ch
and    %ch,0x706c6568
and    (%esi),%ch
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8082c54 <_IO_stdin_used+0x3d0>
outsl  %ds:(%esi),(%dx)
jo     8082c9c <_IO_stdin_used+0x418>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
gs
je     8082cab <_IO_stdin_used+0x427>
imul   $0x6f43000a,0x6b(%esi),%ebp
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x61(%esi)
imul   $0x3a732520,0x64(%ebp,%eiz,2),%ebp
and    $0x5c000a64,%eax
add    %ch,0x706f6f6c
jae    8082c63 <_IO_stdin_used+0x3df>
sub    $0x696d6166,%eax
insb   (%dx),%es:(%edi)
jns    8082c6b <_IO_stdin_used+0x3e7>
imul   $0x6e690074,0x65(%esi),%ebp
gs
je     8082cab <_IO_stdin_used+0x427>
add    %ah,0x65(%esi,%ebp,2)
je     8082c7b <_IO_stdin_used+0x3f7>
bound  %esi,0x69(%edx)
fs add %ch,%fs:%gs:0x6e(%bx,%di)
jbe    8082ce7 <_IO_stdin_used+0x463>
insb   (%dx),%es:(%edi)
imul   $0x6f746f72,0x70(%eax,%eiz,1),%esp
arpl   %bp,0x6c(%edi)
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x6174732d,0x0(%ecx,%edi,2),%ebp
je     8082d13 <_IO_stdin_used+0x48f>
add    %ch,0x74617473
imul   $0x736369,0x74(%ebx),%esi
sub    $0x61746564,%eax
imul   $0x7365722d,0x0(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jbe    8082d23 <_IO_stdin_used+0x49f>
add    %ch,0x6c656e6f
imul   $0x69742d00,0x65(%esi),%ebp
insl   (%dx),%es:(%edi)
gs
jae    8082d43 <_IO_stdin_used+0x4bf>
popa
insl   (%dx),%es:(%edi)
jo     8082cd3 <_IO_stdin_used+0x44f>
sub    $0x73726556,%eax
imul   $0x20706900,0x6e(%edi),%ebp
jne    8082d55 <_IO_stdin_used+0x4d1>
imul   $0x69202c79,0x74(%ecx,%ebp,2),%ebp
jo     8082d5d <_IO_stdin_used+0x4d9>
outsl  %ds:(%esi),(%dx)
jne    8082d62 <_IO_stdin_used+0x4de>
xor    %gs:0x73257373,%ch
or     (%eax),%al
sub    $0x63726f66,%eax
add    %ch,%gs:0x63746162
push   $0x63722d00
jbe    8082d6c <_IO_stdin_used+0x4e8>
jne    8082d72 <_IO_stdin_used+0x4ee>
add    %cl,0x6e(%ecx)
jbe    8082d72 <_IO_stdin_used+0x4ee>
insb   (%dx),%es:(%edi)
imul   $0x75627663,0x72(%eax,%eiz,1),%esp
data16
and    %dh,0x69(%ebx)
jp     8082d85 <_IO_stdin_used+0x501>
and    %ah,(%edi)
and    $0xa2773,%eax
sub    $0x706c6568,%eax
add    %ah,0x64(%ecx)
fs
jb     8082d9e <_IO_stdin_used+0x51a>
popa
bound  %esp,0x6c(%ebp)
add    %ch,0x61(%ebp)
fs
fs
jb     8082da2 <_IO_stdin_used+0x51e>
jae    8082db2 <_IO_stdin_used+0x52e>
add    %ch,0x65(%esi)
imul   $0x726f62,0x68(%edi),%esp
outsb  %ds:(%esi),(%dx)
imul   $0x72756f62,%gs:0x68(%edi),%esp
add    %ch,0x74(%esi)
popa
bound  %ebp,0x0(%ebp,%eiz,2)
outsb  %ds:(%esi),(%dx)
je     8082dbf <_IO_stdin_used+0x53b>
insb   (%dx),%es:(%edi)
add    %ch,0x74(%edx,%esi,1)
jo     8082d64 <_IO_stdin_used+0x4e0>
je     8082ddb <_IO_stdin_used+0x557>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
add    %dh,0x6e(%ebp,%esi,2)
insb   (%dx),%es:(%edi)
add    %dh,0x6e(%ebp,%esi,2)
je     8082dd6 <_IO_stdin_used+0x552>
jo     8082d77 <_IO_stdin_used+0x4f3>
je     8082de8 <_IO_stdin_used+0x564>
imul   $0x0,0x6e(%ebp),%esp
je     8082de2 <_IO_stdin_used+0x55e>
jo     8082dee <_IO_stdin_used+0x56a>
gs
je     8082df6 <_IO_stdin_used+0x572>
imul   $0x70637400,0x73(%ebx),%esp
pop    %edi
insl   (%dx),%es:(%edi)
gs
je     8082e02 <_IO_stdin_used+0x57e>
imul   $0x6e6f6d00,0x73(%ebx),%esp
imul   $0x72667800,0x72(%edi,%ebp,2),%esi
insl   (%dx),%es:(%edi)
add    %ch,0x72(%ebp)
outsl  %ds:(%esi),(%dx)
jne    8082e1a <_IO_stdin_used+0x596>
add    %ch,%gs:0x72(%ebp)
jne    8082e18 <_IO_stdin_used+0x594>
add    %ch,%gs:0x65(%esi)
je     8082e15 <_IO_stdin_used+0x591>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
add    %ch,0x6f(%ebp)
outsl  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
mov    $0x16d00808,%ecx
add    $0x82d2d08,%eax
or     %dh,0x3708051f(%eax)
sub    $0x46c00808,%eax
push   %es
or     %ah,0x7008082d(%edx)
imul   $0x8,0x82da908,%eax
xor    %al,0x2d400805(%ebx)
or     %cl,(%eax)
add    %dh,%bl
add    $0x82d4908,%eax
or     %al,(%eax)
repz add $0x82d5308,%eax
or     %al,(%eax)
push   %cs
push   %es
or     %bl,0x2d(%edx)
or     %cl,(%eax)
add    %cl,(%esi)
push   %es
or     %ah,-0x2ff7f7bf(%eax)
das
push   %es
or     %bl,0x2d(%edi)
or     %cl,(%eax)
push   %eax
push   %edi
pop    %es
or     %ah,0x8(%ebp,%ebp,1)
or     %dl,-0x48(%eax)
add    $0x82d6b08,%eax
or     %dl,-0x48(%eax)
add    $0x82d7008,%eax
or     %ah,0x67(%eax)
push   %es
or     %dl,%bh
orb    $0x8,(%eax)
pusha
addr16 push %es
or     %dh,0x2d(%edi)
or     %cl,(%eax)
push   %eax
jo     8082e45 <_IO_stdin_used+0x5c1>
or     %bh,0x2d(%ebp)
or     %cl,(%eax)
jo     8082dd3 <_IO_stdin_used+0x54f>
pop    %es
or     %cl,0x7008082d(%eax)
lea    (%edi),%eax
or     %dl,0x4c500808(%ebp,%ebp,1)
push   %es
or     %bl,-0x502ff7f8(%ebp,%ebp,1)
push   %es
or     %ah,0x1008082d(%ecx)
pop    %ebx
push   %es
or     %ch,0x3008082d(%eax)
test   %eax,0x8534c08
or     %ah,-0x69(%eax)
add    $0x82dae08,%eax
or     %dl,(%eax)
xchg   %eax,%edi
pop    %es
or     %ch,(%eax)
sub    $0xd6b00808,%eax
add    $0x8,%al
mov    $0x2d,%dh
or     %cl,(%eax)
xor    %dl,%dh
add    $0x8,%al
xor    %esi,(%ebx)
xor    %esi,(%ecx)
xor    (%edx),%dh
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    8082f10 <_IO_stdin_used+0x68c>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6c(%esi)
jne    8082f25 <_IO_stdin_used+0x6a1>
push   $0x71657220
jne    8082f1e <_IO_stdin_used+0x69a>
jae    8082f2f <_IO_stdin_used+0x6ab>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %ebx
dec    %edi
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %cl,0x54(%esi,%eax,2)
and    %bh,(%edx)
cmp    $0x726f6620,%eax
gs
jbe    8082f4a <_IO_stdin_used+0x6c6>
jb     8082f07 <_IO_stdin_used+0x683>
jl     8082f09 <_IO_stdin_used+0x685>
push   %ebx
inc    %ebp
inc    %ebx
dec    %edi
dec    %esi
inc    %esp
push   %ebx
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8082f19 <_IO_stdin_used+0x695>
jae    8082f60 <_IO_stdin_used+0x6dc>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6d(%ebp,%esi,2)
jo     8082f23 <_IO_stdin_used+0x69f>
jb     8082f6a <_IO_stdin_used+0x6e6>
jno    8082f7c <_IO_stdin_used+0x6f8>
gs
jae    8082f7e <_IO_stdin_used+0x6fa>
add    %al,0x6c(%esi)
jne    8082f82 <_IO_stdin_used+0x6fe>
push   $0x72657420
insl   (%dx),%es:(%edi)
imul   $0xa646574,0x61(%esi),%ebp
add    %cl,0x6f(%esi)
je     8082f89 <_IO_stdin_used+0x705>
imul   $0x206f7420,0x67(%esi),%ebp
data16
insb   (%dx),%es:(%edi)
jne    8082f9f <_IO_stdin_used+0x71b>
push   $0x6f66002e
jb     8082f98 <_IO_stdin_used+0x714>
jbe    8082f9a <_IO_stdin_used+0x716>
jb     8082f37 <_IO_stdin_used+0x6b3>
jo     8082f9e <_IO_stdin_used+0x71a>
gs
jb     8082f3c <_IO_stdin_used+0x6b8>
jb     8082fa3 <_IO_stdin_used+0x71f>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8082fa7 <_IO_stdin_used+0x723>
add    %ah,0x72(%edx)
outsl  %ds:(%esi),(%dx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     8082f4d <_IO_stdin_used+0x6c9>
popa
outsb  %ds:(%esi),(%dx)
jns    8082fb4 <_IO_stdin_used+0x730>
popa
jae    8082fc8 <_IO_stdin_used+0x744>
add    %dh,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     8082fbf <_IO_stdin_used+0x73b>
add    %ch,0x6e(%ecx)
jbe    8082fc0 <_IO_stdin_used+0x73c>
insb   (%dx),%es:(%edi)
imul   $0x65706f63,0x73(%eax,%eiz,1),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8082fd3 <_IO_stdin_used+0x74f>
add    %dh,%cs:0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0x76007466,0x6c(%edi,%ebx,2),%esp
popa
insb   (%dx),%es:(%edi)
imul   $0x76207466,0x6c(%edi,%ebx,2),%esp
popa
insb   (%dx),%es:(%edi)
jne    8082fee <_IO_stdin_used+0x76a>
add    %dh,0x72(%eax)
gs
data16
gs
jb     8083003 <_IO_stdin_used+0x77f>
gs
fs
pop    %edi
insb   (%dx),%es:(%edi)
data16
je     8082f98 <_IO_stdin_used+0x714>
jo     808300c <_IO_stdin_used+0x788>
gs
data16
gs
jb     8083011 <_IO_stdin_used+0x78d>
gs
fs
pop    %edi
insb   (%dx),%es:(%edi)
data16
je     8082fc6 <_IO_stdin_used+0x742>
jbe    8083009 <_IO_stdin_used+0x785>
insb   (%dx),%es:(%edi)
jne    8083010 <_IO_stdin_used+0x78c>
add    %ch,0x6f(%eax)
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x6f(%esi)
fs
popa
add    %ch,%fs:0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8082fe4 <_IO_stdin_used+0x760>
imul   $0x6420,0x64(%esi),%bp
gs
jbe    8083036 <_IO_stdin_used+0x7b2>
arpl   %sp,0x20(%ebp)
and    0xa2273,%ah
jbe    8083039 <_IO_stdin_used+0x7b5>
insb   (%dx),%es:(%edi)
imul   $0x69207466,0x6c(%edi,%ebx,2),%esp
jae    8083003 <_IO_stdin_used+0x77f>
jp     808304a <_IO_stdin_used+0x7c6>
jb     8083056 <_IO_stdin_used+0x7d2>
or     (%eax),%al
cmp    $0x6e,%al
imul   $0x706d6f63,0x0(%esi,%edi,1),%ebp
jb     808305a <_IO_stdin_used+0x7d6>
jae    808306a <_IO_stdin_used+0x7e6>
gs add %al,%fs:%gs:0x6c(%ebp,%eiz,2)
gs
je     8083065 <_IO_stdin_used+0x7e1>
and    %al,%fs:(%eax)
and    $0x25203a64,%eax
jae    808300a <_IO_stdin_used+0x786>
inc    %eax
dec    %esi
dec    %edi
dec    %esi
inc    %ebp
cmp    (%eax),%ah
add    %al,0x25(%eax)
jae    8083050 <_IO_stdin_used+0x7cc>
and    %al,(%eax)
dec    %esi
dec    %edi
sub    $0x52524143,%eax
dec    %ecx
inc    %ebp
push   %edx
and    $0x4f4c0073,%eax
dec    %edi
push   %eax
inc    %edx
inc    %ecx
inc    %ebx
dec    %ebx
and    $0x52420073,%eax
dec    %edi
inc    %ecx
inc    %esp
inc    %ebx
inc    %ecx
push   %ebx
push   %esp
and    $0x4f500073,%eax
dec    %ecx
dec    %esi
push   %esp
dec    %edi
push   %eax
dec    %edi
dec    %ecx
dec    %esi
push   %esp
and    $0x554d0073,%eax
dec    %esp
push   %esp
dec    %ecx
inc    %ebx
inc    %ecx
push   %ebx
push   %esp
and    $0x4f4e0073,%eax
inc    %ecx
push   %edx
push   %eax
and    $0x4c410073,%eax
dec    %esp
dec    %ebp
push   %ebp
dec    %esp
push   %esp
dec    %ecx
and    $0x52500073,%eax
dec    %edi
dec    %ebp
dec    %ecx
push   %ebx
inc    %ebx
and    $0x414d0073,%eax
push   %ebx
push   %esp
inc    %ebp
push   %edx
and    $0x4c530073,%eax
inc    %ecx
push   %esi
inc    %ebp
and    $0x45440073,%eax
inc    %edx
push   %ebp
inc    %edi
and    $0x59440073,%eax
dec    %esi
inc    %ecx
dec    %ebp
dec    %ecx
inc    %ebx
and    $0x55410073,%eax
push   %esp
dec    %edi
dec    %ebp
inc    %ebp
inc    %esp
dec    %ecx
inc    %ecx
and    $0x4f500073,%eax
push   %edx
push   %esp
push   %ebx
inc    %ebp
dec    %esp
and    $0x4f4e0073,%eax
push   %esp
push   %edx
inc    %ecx
dec    %ecx
dec    %esp
inc    %ebp
push   %edx
push   %ebx
and    $0x4f4c0073,%eax
push   %edi
inc    %ebp
push   %edx
pop    %edi
push   %ebp
push   %eax
and    $0x4f440073,%eax
push   %edx
dec    %ebp
inc    %ecx
dec    %esi
push   %esp
and    $0x43450073,%eax
dec    %eax
dec    %edi
and    $0x4d2c0073,%eax
sub    $0x4e574f44,%eax
add    %ch,0x74(%ebp)
jne    8083101 <_IO_stdin_used+0x87d>
and    $0x71002075,%eax
imul   $0x20732520,%fs:0x63(%ebx),%esi
add    %ch,0x61(%ebp)
jae    8083167 <_IO_stdin_used+0x8e3>
gs
jb     8083116 <_IO_stdin_used+0x892>
and    $0x73002073,%eax
je     808315e <_IO_stdin_used+0x8da>
je     8083164 <_IO_stdin_used+0x8e0>
and    %ah,0x207823
jae    808317b <_IO_stdin_used+0x8f7>
popa
je     808316f <_IO_stdin_used+0x8eb>
and    %ah,0x6d002073
outsl  %ds:(%esi),(%dx)
fs and %ah,%fs:%gs:0x71002064
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
and    %ah,0x20200064
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x2073252f,0x6b(%esi),%ebp
add    %ah,(%eax)
jo     8083195 <_IO_stdin_used+0x911>
gs
jb     8083153 <_IO_stdin_used+0x8cf>
add    %ah,(%eax)
bound  %esi,0x64(%edx)
and    %al,(%eax)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
imul   $0x79746975,0x63(%ebx),%esi
and    %ah,0x20002075
and    %ah,(%eax)
and    %ah,0x25002073
jae    8083176 <_IO_stdin_used+0x8f2>
and    %ah,(%eax)
and    %ah,0x6c(%ecx)
imul   $0x732520,0x73(%ecx),%esp
and    %ah,0x6c6c372d
jne    808316a <_IO_stdin_used+0x8e6>
and    %ah,0x75372d
inc    %edx
push   %ebp
inc    %edi
cmp    (%eax),%ah
jb     80831eb <_IO_stdin_used+0x967>
popa
and    %dh,0x70(%ecx,%edi,2)
and    %ch,%gs:0x73(%ecx)
and    %ah,0xa000a64
and    %ah,(%eax)
and    %ah,(%eax)
jbe    80831f2 <_IO_stdin_used+0x96e>
and    %ah,0x414d2064
inc    %ebx
and    %ah,0x202c0073
jbe    8083207 <_IO_stdin_used+0x983>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x202c0064
jno    8083214 <_IO_stdin_used+0x990>
jae    80831c7 <_IO_stdin_used+0x943>
and    $0x202c0064,%eax
je     8083226 <_IO_stdin_used+0x9a2>
and    %dh,0x61(%edx)
je     8083218 <_IO_stdin_used+0x994>
and    %ah,0x4d282064
bound  %esi,0x73(%eax)
sub    %eax,(%eax)
sub    $0x20,%al
jae    8083232 <_IO_stdin_used+0x9ae>
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x68(%ebx)
arpl   %bp,%gs:0x69(%ebx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%bx)
add    %ch,(%eax,%eiz,1)
jae    8083246 <_IO_stdin_used+0x9c2>
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x68(%ebx)
arpl   %bp,%gs:0x69(%ebx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%bx)
data16
add    %ch,(%eax,%eiz,1)
insb   (%dx),%es:(%edi)
imul   $0x6174732d,0x6b(%esi),%ebp
je     8083258 <_IO_stdin_used+0x9d4>
and    %ah,0x75(%ecx)
je     8083267 <_IO_stdin_used+0x9e3>
add    %ch,(%eax,%eiz,1)
insb   (%dx),%es:(%edi)
imul   $0x6174732d,0x6b(%esi),%ebp
je     808326a <_IO_stdin_used+0x9e6>
and    %ah,0x6e(%ebp)
popa
bound  %ebp,0x0(%ebp,%eiz,2)
sub    $0x20,%al
insb   (%dx),%es:(%edi)
imul   $0x6174732d,0x6b(%esi),%ebp
je     808327e <_IO_stdin_used+0x9fa>
and    %ah,0x73(%ecx,%ebp,2)
popa
bound  %ebp,0x0(%ebp,%eiz,2)
inc    %edx
push   %ebp
inc    %edi
cmp    (%eax),%ah
ja     808329b <_IO_stdin_used+0xa17>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6c(%bp)
insl   (%dx),%es:(%edi)
jae    8083299 <_IO_stdin_used+0xa15>
and    %ch,0x6e(%ebp,%eiz,2)
and    %ah,0x25000a64
jne    8083278 <_IO_stdin_used+0x9f4>
and    %ah,0x20200073
and    %ah,(%eax)
imul   $0x20002074,0x65(%esi),%ebp
and    %ah,(%eax)
and    %ch,0x6e(%ecx)
gs
je     808328b <_IO_stdin_used+0xa07>
and    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %fs:(%esi),(%dx)
gs
je     8083280 <_IO_stdin_used+0x9fc>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x20200020,0x78(%eax),%esi
and    %ah,(%eax)
popaw
insl   (%dx),%es:(%edi)
imul   $0x206425,0x20(%ecx,%edi,2),%ebp
and    %dh,0x65(%eax)
gs
jb     80832a0 <_IO_stdin_used+0xa1c>
and    $0x64252f73,%eax
and    %al,(%eax)
bound  %esi,0x64(%edx)
and    %ah,0x61002073
outsb  %ds:(%esi),(%dx)
jns    80832b3 <_IO_stdin_used+0xa2f>
and    $0x74002073,%eax
gs
insl   (%dx),%es:(%edi)
jo     808330b <_IO_stdin_used+0xa87>
jb     80832ff <_IO_stdin_used+0xa7b>
jb     8083319 <_IO_stdin_used+0xa95>
and    %al,(%eax)
jae    8083309 <_IO_stdin_used+0xa85>
arpl   %bp,0x6e(%edi)
fs
popa
jb     8083324 <_IO_stdin_used+0xaa0>
and    %al,(%eax)
je     8083314 <_IO_stdin_used+0xa90>
outsb  %ds:(%esi),(%dx)
je     8083313 <_IO_stdin_used+0xa8f>
je     808331d <_IO_stdin_used+0xa99>
jbe    808331b <_IO_stdin_used+0xa97>
and    %al,(%eax)
fs
gs
jo     808332e <_IO_stdin_used+0xaaa>
arpl   %sp,%gs:0x74(%ecx)
gs and %al,%fs:%gs:(%eax)
push   $0x20656d6f
add    %ch,0x6f(%esi)
fs
popa
and    %al,%fs:(%eax)
fs
jns    8083342 <_IO_stdin_used+0xabe>
popa
insl   (%dx),%es:(%edi)
imul   $0x64616400,0x20(%ebx),%esp
popaw
imul   $0x6c660020,0x64(%ebp,%eiz,2),%ebp
popa
addr16 jae 808330b <_IO_stdin_used+0xa87>
and    $0x20783230,%eax
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jbe    808335b <_IO_stdin_used+0xad7>
insb   (%dx),%es:(%edi)
imul   $0x207466,0x6c(%edi,%ebx,2),%esp
and    $0x63657375,%eax
add    %ah,(%eax)
jo     808337e <_IO_stdin_used+0xafa>
gs
data16
gs
jb     8083383 <_IO_stdin_used+0xaff>
gs
fs
pop    %edi
insb   (%dx),%es:(%edi)
data16
je     8083338 <_IO_stdin_used+0xab4>
add    %al,0x6c(%esi)
jne    8083390 <_IO_stdin_used+0xb0c>
push   $0x71657220
jne    808338d <_IO_stdin_used+0xb09>
jb     808338b <_IO_stdin_used+0xb07>
jae    8083348 <_IO_stdin_used+0xac4>
popa
jb     8083392 <_IO_stdin_used+0xb0e>
jne    808339a <_IO_stdin_used+0xb16>
outsb  %gs:(%esi),(%dx)
je     80833a4 <_IO_stdin_used+0xb20>
or     %cs:(%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808335b <_IO_stdin_used+0xad7>
data16
insb   (%dx),%es:(%edi)
jne    80833b2 <_IO_stdin_used+0xb2e>
push   $0x6e696c20
imul   $0x61,(%eax),%esp
fs
fs
jb     80833b0 <_IO_stdin_used+0xb2c>
jae    80833c0 <_IO_stdin_used+0xb3c>
gs
jae    808337e <_IO_stdin_used+0xafa>
or     (%eax),%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,(%edx)
jae    80833c0 <_IO_stdin_used+0xb3c>
outsl  %ds:(%esi),(%dx)
jo     80833c5 <_IO_stdin_used+0xb41>
and    (%edx),%cl
add    %ah,0x6e(%ecx,%edi,2)
popa
insl   (%dx),%es:(%edi)
imul   $0x6d726570,0x0(%ebx),%esp
popa
outsb  %ds:(%esi),(%dx)
outsb  %gs:(%esi),(%dx)
je     8083375 <_IO_stdin_used+0xaf1>
jae    80833dc <_IO_stdin_used+0xb58>
arpl   %bp,0x6e(%edi)
fs
popa
jb     80833f7 <_IO_stdin_used+0xb73>
add    %dh,0x6d(%ebp,%eiz,2)
jo     80833f3 <_IO_stdin_used+0xb6f>
jb     80833e7 <_IO_stdin_used+0xb63>
jb     8083401 <_IO_stdin_used+0xb7d>
add    %dh,0x72(%eax)
imul   $0x74007972,0x61(%ebp),%ebp
outsb  %gs:(%esi),(%dx)
je     80833f7 <_IO_stdin_used+0xb73>
je     8083401 <_IO_stdin_used+0xb7d>
jbe    80833ff <_IO_stdin_used+0xb7b>
add    %ah,0x70(%ebp,%eiz,2)
jb     8083405 <_IO_stdin_used+0xb81>
arpl   %sp,0x74(%ecx)
gs add %ah,%fs:%gs:0x64(%ecx,%eiz,2)
popaw
imul   $0x766e4900,0x64(%ebp,%eiz,2),%ebp
popa
insb   (%dx),%es:(%edi)
imul   $0x756f7267,0x22(%eax,%eiz,1),%esp
jo     80833e1 <_IO_stdin_used+0xb5d>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808342a <_IO_stdin_used+0xba6>
or     (%eax),%al
inc    %esp
gs
jbe    8083434 <_IO_stdin_used+0xbb0>
arpl   %sp,0x20(%ebp)
and    0x64202273,%ah
outsl  %ds:(%esi),(%dx)
gs
jae    80833f8 <_IO_stdin_used+0xb74>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80833fc <_IO_stdin_used+0xb78>
gs
js     8083448 <_IO_stdin_used+0xbc4>
jae    8083455 <_IO_stdin_used+0xbd1>
or     %cs:(%eax),%al
push   %ebx
popa
jbe    808344d <_IO_stdin_used+0xbc9>
and    %dh,0x72(%ebp,%eiz,2)
insl   (%dx),%es:(%edi)
imul   $0xa646574,0x61(%esi),%ebp
add    %al,0x6d(%ebp,%esi,2)
jo     808341a <_IO_stdin_used+0xb96>
je     8083461 <_IO_stdin_used+0xbdd>
jb     808346b <_IO_stdin_used+0xbe7>
imul   $0xa646574,0x61(%esi),%ebp
add    %ch,0x66(%ecx)
and    $0xa3a64,%eax
popa
fs add %ah,%fs:0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
add    %dh,%gs:0x65(%bp,%si)
jo     8083488 <_IO_stdin_used+0xc04>
popa
arpl   %sp,0x0(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x6f687300,0x74(%ebx),%esi
ja     808342a <_IO_stdin_used+0xba6>
insb   (%dx),%es:(%edi)
jae    80834a1 <_IO_stdin_used+0xc1d>
add    %ah,0x6c(%esi)
jne    80834a5 <_IO_stdin_used+0xc21>
push   $0x76617300
add    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80834a2 <_IO_stdin_used+0xc1e>
jne    80834ad <_IO_stdin_used+0xc29>
jo     8083442 <_IO_stdin_used+0xbbe>
jb     80834a9 <_IO_stdin_used+0xc25>
jae    80834ba <_IO_stdin_used+0xc36>
outsl  %ds:(%esi),(%dx)
jb     80834ae <_IO_stdin_used+0xc2a>
add    %al,0x46(%ebp,%eax,2)
inc    %ecx
push   %ebp
dec    %esp
push   %esp
add    %al,0x52(%edi,%ecx,2)
dec    %ebp
inc    %ecx
dec    %esi
push   %esp
add    %dl,0x4e(%ebp)
dec    %ebx
dec    %esi
dec    %edi
push   %edi
dec    %esi
add    %cl,0x4f(%esi)
push   %esp
push   %eax
push   %edx
inc    %ebp
push   %ebx
inc    %ebp
dec    %esi
push   %esp
add    %cl,0x57(%edi,%ecx,2)
inc    %ebp
push   %edx
dec    %esp
inc    %ecx
pop    %ecx
inc    %ebp
push   %edx
inc    %esp
dec    %edi
push   %edi
dec    %esi
add    %dl,0x53(%ebp,%eax,2)
push   %esp
dec    %ecx
dec    %esi
inc    %edi
add    %dl,0x50(%ebp)
add    %al,(%eax)
push   %ebx
push   $0x2074726f
ja     8083502 <_IO_stdin_used+0xc7e>
imul   $0x6c696877,0x20(%ebp,%eiz,2),%esi
and    %dh,%gs:0x61(%ebx)
jbe    8083507 <_IO_stdin_used+0xc83>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6c(%bp)
insl   (%dx),%es:(%edi)
jae    808350d <_IO_stdin_used+0xc89>
or     (%eax),%al
push   %ebp
jae    808350c <_IO_stdin_used+0xc88>
cmp    %gs:(%bx,%si),%ah
imul   $0x72646461,0x20(%eax),%esi
and    %bh,0x61(%ebx)
fs
fs
jl     8083520 <_IO_stdin_used+0xc9c>
push   $0x65676e61
jl     8083536 <_IO_stdin_used+0xcb2>
gs
jo     8083533 <_IO_stdin_used+0xcaf>
popa
arpl   %sp,0x7d(%ebp)
and    %cl,0x46(%ecx)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebx)
dec    %esp
dec    %ecx
inc    %esi
inc    %ebp
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
inc    %ebx
dec    %edi
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ah,0x64(%ecx)
fs
jb     8083567 <_IO_stdin_used+0xce3>
fs
gs
insb   (%dx),%es:(%edi)
and    %cl,0x46(%ecx)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ah,0x64(%ecx)
fs
jb     808358f <_IO_stdin_used+0xd0b>
jnp    80835e4 <_IO_stdin_used+0xd60>
push   $0x737c776f
popa
jbe    80835de <_IO_stdin_used+0xd5a>
jl     80835e1 <_IO_stdin_used+0xd5d>
insb   (%dx),%es:(%edi)
jne    80835f1 <_IO_stdin_used+0xd6d>
push   $0x205b207d
fs
gs
jbe    80835a7 <_IO_stdin_used+0xd23>
push   %ebx
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     80835fc <_IO_stdin_used+0xd78>
and    %dl,0x43(%ebx)
dec    %edi
push   %eax
inc    %ebp
sub    $0x5d204449,%eax
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x20(%edi,%ebp,2)
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %al,0x4c(%esi)
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x62(%ecx,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %dl,0x41(%eax)
push   %esp
push   %esp
inc    %ebp
push   %edx
dec    %esi
and    %bl,0x20(%ebp)
pop    %ebx
jne    8083661 <_IO_stdin_used+0xddd>
pop    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ah,0x64(%ecx)
fs
jb     8083623 <_IO_stdin_used+0xd9f>
jnp    8083678 <_IO_stdin_used+0xdf4>
push   $0x7564776f
insl   (%dx),%es:(%edi)
jo     8083689 <_IO_stdin_used+0xe05>
jb     8083674 <_IO_stdin_used+0xdf0>
jae    8083685 <_IO_stdin_used+0xe01>
outsl  %ds:(%esi),(%dx)
jb     8083679 <_IO_stdin_used+0xdf5>
jge    8083620 <_IO_stdin_used+0xd9c>
add    %al,(%eax)
dec    %ecx
inc    %esi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bh,(%edx)
cmp    $0x45525020,%eax
inc    %esi
dec    %ecx
pop    %eax
and    %bh,0x41(%eax,%eiz,1)
inc    %esp
inc    %esp
push   %edx
and    %dh,0x65(%eax)
gs
jb     8083655 <_IO_stdin_used+0xdd1>
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     8083676 <_IO_stdin_used+0xdf2>
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6e(%ecx)
jns    80836c6 <_IO_stdin_used+0xe42>
popa
jae    80836da <_IO_stdin_used+0xe56>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x62(%ecx,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     80836f7 <_IO_stdin_used+0xe73>
and    %dl,0x43(%ebx)
dec    %edi
push   %eax
inc    %ebp
sub    $0x5d204449,%eax
or     (%eax),%al
add    %dl,0x43(%ebx)
dec    %edi
push   %eax
inc    %ebp
sub    $0x3a204449,%eax
cmp    $0x68205b20,%eax
outsl  %ds:(%esi),(%dx)
jae    8083726 <_IO_stdin_used+0xea2>
and    %bh,0x6c(%eax,%eiz,1)
imul   $0x67207c20,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
bound  %esp,0x6c(%ecx)
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x46205b20,%eax
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
or     (%eax),%al
add    %al,(%eax)
add    %al,0x4c(%esi)
inc    %ecx
inc    %edi
and    %ah,(%eax)
cmp    0x70205b20,%bh
gs
jb     8083770 <_IO_stdin_used+0xeec>
popa
outsb  %ds:(%esi),(%dx)
outsb  %gs:(%esi),(%dx)
je     8083729 <_IO_stdin_used+0xea5>
jl     808372b <_IO_stdin_used+0xea7>
fs
jns    808377c <_IO_stdin_used+0xef8>
popa
insl   (%dx),%es:(%edi)
imul   $0x6573207c,0x20(%ebx),%esp
arpl   %bp,0x6e(%edi)
fs
popa
jb     8083797 <_IO_stdin_used+0xf13>
and    %bh,0x70(%eax,%eiz,1)
jb     808378d <_IO_stdin_used+0xf09>
insl   (%dx),%es:(%edi)
popa
jb     80837a1 <_IO_stdin_used+0xf1d>
and    %bh,0x0(%edx,%ecx,1)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x6e(%ebp,%eiz,2)
je     808379d <_IO_stdin_used+0xf19>
je     80837a7 <_IO_stdin_used+0xf23>
jbe    80837a5 <_IO_stdin_used+0xf21>
and    %bh,0x64(%eax,%eiz,1)
gs
jo     80837b9 <_IO_stdin_used+0xf35>
arpl   %sp,%gs:0x74(%ecx)
gs and %bh,%fs:%gs:0x64(%eax,%eiz,1)
popa
fs
popaw
imul   $0x74207c20,0x64(%ebp,%eiz,2),%ebp
gs
insl   (%dx),%es:(%edi)
jo     80837d0 <_IO_stdin_used+0xf4c>
jb     80837c4 <_IO_stdin_used+0xf40>
jb     80837de <_IO_stdin_used+0xf5a>
and    %bh,0x0(%edx,%ecx,1)
add    %al,(%eax)
add    %al,0x4f(%ebx)
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x43205b20,%eax
dec    %edi
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
inc    %ebx
dec    %edi
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
or     (%eax),%al
add    %al,(%eax)
add    %al,0x4f(%ebx)
dec    %esi
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
and    %ah,(%eax)
cmp    0x68205b20,%bh
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %bh,%gs:0x6e(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
fs
popa
and    %bl,%fs:0xa(%ebp)
add    %al,(%eax)
dec    %esp
dec    %ecx
inc    %esi
inc    %ebp
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
and    %bh,(%edx)
cmp    $0x76205b20,%eax
popa
insb   (%dx),%es:(%edi)
imul   $0x4c207466,0x6c(%edi,%ebx,2),%esp
inc    %esi
push   %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
gs
data16
gs
jb     8083855 <_IO_stdin_used+0xfd1>
gs
fs
pop    %edi
insb   (%dx),%es:(%edi)
data16
je     808380a <_IO_stdin_used+0xf86>
dec    %esp
inc    %esi
push   %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
sub    (%edx),%ch
sub    (%eax),%ah
inc    %esi
insb   (%dx),%es:(%edi)
jne    808386f <_IO_stdin_used+0xfeb>
push   $0x20736920
arpl   %bp,0x6d(%edi)
jo     8083872 <_IO_stdin_used+0xfee>
gs
je     808386e <_IO_stdin_used+0xfea>
and    %ah,0x66(%ecx)
je     8083873 <_IO_stdin_used+0xfef>
jb     8083830 <_IO_stdin_used+0xfac>
and    $0x6f722064,%eax
jne    8083885 <_IO_stdin_used+0x1001>
fs
and    $0x2a2a2073,%eax
sub    (%edx),%cl
add    %cl,(%edx)
sub    (%edx),%ch
sub    (%eax),%ah
push   %edx
outsl  %ds:(%esi),(%dx)
jne    8083897 <_IO_stdin_used+0x1013>
and    %ah,%fs:0x64202c64
gs
insb   (%dx),%es:(%edi)
gs
je     808389e <_IO_stdin_used+0x101a>
outsb  %ds:(%esi),(%dx)
and    %ah,(%di)
and    %ah,%fs:0x64(%ecx)
fs
jb     80838a5 <_IO_stdin_used+0x1021>
jae    80838b5 <_IO_stdin_used+0x1031>
gs
jae    8083865 <_IO_stdin_used+0xfe1>
sub    (%edx),%ch
sub    (%edx),%cl
add    %al,(%eax)
add    %ch,(%edx)
sub    (%edx),%ch
and    %al,0x6c(%esi)
jne    80838c7 <_IO_stdin_used+0x1043>
push   $0x6d657220
popa
imul   $0x636e6920,0x73(%esi),%ebp
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     80838d1 <_IO_stdin_used+0x104d>
gs
je     80838cd <_IO_stdin_used+0x1049>
and    %ah,0x66(%ecx)
je     80838d2 <_IO_stdin_used+0x104e>
jb     808388f <_IO_stdin_used+0x100b>
and    $0x6f722064,%eax
jne    80838e4 <_IO_stdin_used+0x1060>
fs
jae    80838a7 <_IO_stdin_used+0x1023>
and    %ch,(%edx)
sub    (%edx),%ch
or     (%eax),%al
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     80838a6 <_IO_stdin_used+0x1022>
jb     80838ed <_IO_stdin_used+0x1069>
jae    80838fe <_IO_stdin_used+0x107a>
outsl  %ds:(%esi),(%dx)
jb     80838f2 <_IO_stdin_used+0x106e>
and    %ah,0x64(%ecx)
fs
jb     80838b3 <_IO_stdin_used+0x102f>
fs
jne    8083903 <_IO_stdin_used+0x107f>
jo     80838b8 <_IO_stdin_used+0x1034>
data16
jb     808390a <_IO_stdin_used+0x1086>
insl   (%dx),%es:(%edi)
and    %ah,0x20(%ecx)
je     8083906 <_IO_stdin_used+0x1082>
jb     8083910 <_IO_stdin_used+0x108c>
imul   $0xa6c,0x61(%esi),%ebp
add    %al,(%eax)
dec    %ebp
popa
imul   $0x6d73696d,0x20(%bp,%di),%esp
popa
je     808391c <_IO_stdin_used+0x1098>
push   $0x64252820
and    %ah,0x6c(%ebp)
gs
insl   (%dx),%es:(%edi)
jae    80838f1 <_IO_stdin_used+0x106d>
and    %ah,0x616d2078
imul   $0xa,0x29(%bp,%di),%esp
add    %cl,0x6f(%esi)
je     80838f8 <_IO_stdin_used+0x1074>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8083944 <_IO_stdin_used+0x10c0>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8083952 <_IO_stdin_used+0x10ce>
popa
je     8083951 <_IO_stdin_used+0x10cd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x76(%ebp,%eiz,2),%ah
and    (%eax),%ah
popa
jb     808395c <_IO_stdin_used+0x10d8>
jne    8083964 <_IO_stdin_used+0x10e0>
outsb  %gs:(%esi),(%dx)
je     808391b <_IO_stdin_used+0x1097>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
add    %al,(%eax)
add    %ah,(%edx)
fs
gs
jbe    8083933 <_IO_stdin_used+0x10af>
and    %ch,(%eax)
and    $0x6d202973,%eax
jne    808398d <_IO_stdin_used+0x1109>
je     808393c <_IO_stdin_used+0x10b8>
insl   (%dx),%es:(%edi)
popa
je     8083983 <_IO_stdin_used+0x10ff>
push   $0x616c2220
bound  %esp,0x6c(%ebp)
and    (%eax),%ah
sub    %ah,0xa2e2973
add    %al,(%eax)
add    %al,(%eax)
push   %edi
popa
jb     80839a6 <_IO_stdin_used+0x1122>
imul   $0x7845203a,0x67(%esi),%ebp
arpl   %si,%gs:0x74(%ebp)
imul   $0x6c697720,0x67(%esi),%ebp
arpl   %sp,%fs:0x72(%ecx)
and    %ah,%fs:0x6c(%ebp,%eiz,2)
gs
je     80839bf <_IO_stdin_used+0x113b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x20(%edi,%ebp,2)
jae    80839d2 <_IO_stdin_used+0x114e>
popa
jns    8083981 <_IO_stdin_used+0x10fd>
arpl   %bp,0x6d(%edi)
jo     80839c7 <_IO_stdin_used+0x1143>
je     80839d1 <_IO_stdin_used+0x114d>
bound  %ebp,0x20(%ebp,%eiz,2)
ja     80839d7 <_IO_stdin_used+0x1153>
je     80839d8 <_IO_stdin_used+0x1154>
and    %ch,0x6c(%edi)
and    %dh,%fs:0x63(%ebx)
jb     80839e2 <_IO_stdin_used+0x115e>
jo     80839ef <_IO_stdin_used+0x116b>
jae    80839ab <_IO_stdin_used+0x1127>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %ebp
js     80839fa <_IO_stdin_used+0x1176>
insb   (%dx),%es:(%edi)
imul   $0x20796c74,0x69(%ebx),%esp
jae    8083a04 <_IO_stdin_used+0x1180>
arpl   %bp,%gs:0x66(%ecx)
jns    80839ba <_IO_stdin_used+0x1136>
je     8083a04 <_IO_stdin_used+0x1180>
and    %dh,%gs:0x72(%eax)
imul   $0x656c,%gs:0x20(%eax),%di
outsb  %ds:(%esi),(%dx)
addr16 je 8083a13 <_IO_stdin_used+0x118f>
and    %ch,(%eax)
and    $0x64252f73,%eax
sub    %esp,(%eax)
je     8083a25 <_IO_stdin_used+0x11a1>
and    %ah,0x76(%ecx)
outsl  %ds:(%esi),(%dx)
imul   $0x20736968,0x74(%eax,%eiz,1),%esp
ja     8083a25 <_IO_stdin_used+0x11a1>
jb     8083a34 <_IO_stdin_used+0x11b0>
imul   $0x20200a2e,0x67(%esi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x69(%eax,%ebp,2)
jae    80839f9 <_IO_stdin_used+0x1175>
jae    8083a4b <_IO_stdin_used+0x11c7>
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x65(%edx)
push   $0x6f697661
jne    8083a5c <_IO_stdin_used+0x11d8>
and    %ch,0x73(%ecx)
and    %ch,0x6b(%ecx,%ebp,2)
gs
insb   (%dx),%es:(%edi)
jns    8083a15 <_IO_stdin_used+0x1191>
je     8083a66 <_IO_stdin_used+0x11e2>
and    %ah,0x73(%ecx,%ebp,2)
popa
jo     8083a6e <_IO_stdin_used+0x11ea>
gs
popa
jb     8083a22 <_IO_stdin_used+0x119e>
imul   $0x74727566,0x20(%esi),%ebp
push   $0x72207265
gs
insb   (%dx),%es:(%edi)
gs
popa
jae    8083a79 <_IO_stdin_used+0x11f5>
jae    8083a42 <_IO_stdin_used+0x11be>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6f79,0x20(%eax),%di
jne    8083a9a <_IO_stdin_used+0x1216>
and    %dh,0x63(%ebx)
jb     8083a96 <_IO_stdin_used+0x1212>
jo     8083aa3 <_IO_stdin_used+0x121f>
jae    8083a52 <_IO_stdin_used+0x11ce>
or     (%eax),%al
add    %al,0x72(%edx)
outsl  %ds:(%esi),(%dx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     8083a5e <_IO_stdin_used+0x11da>
arpl   %sp,0x6e(%ecx)
and    %ah,0x65(%edx)
and    %dh,0x65(%ebx)
je     8083a69 <_IO_stdin_used+0x11e5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    8083a6e <_IO_stdin_used+0x11ea>
outsw  %ds:(%esi),(%dx)
jb     8083a72 <_IO_stdin_used+0x11ee>
dec    %ecx
push   %eax
jbe    8083a8a <_IO_stdin_used+0x1206>
and    %ah,0x64(%ecx)
fs
jb     8083ac1 <_IO_stdin_used+0x123d>
jae    8083ad1 <_IO_stdin_used+0x124d>
gs
jae    8083a6b <_IO_stdin_used+0x11e7>
add    %al,(%eax)
add    %dh,0x72(%eax)
gs
data16
gs
jb     8083add <_IO_stdin_used+0x1259>
gs
fs
pop    %edi
insb   (%dx),%es:(%edi)
data16
je     8083a92 <_IO_stdin_used+0x120e>
imul   $0x61657267,0x20(%ebx),%esi
je     8083ae0 <_IO_stdin_used+0x125c>
jb     8083a9d <_IO_stdin_used+0x1219>
je     8083ae7 <_IO_stdin_used+0x1263>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0xa7466,0x6c(%edi,%ebx,2),%esp
add    %al,(%eax)
add    %al,0x55(%edx)
inc    %edi
cmp    (%eax),%ah
fs
gs
jbe    8083b02 <_IO_stdin_used+0x127e>
arpl   %sp,0x20(%ebp)
ja     8083b07 <_IO_stdin_used+0x1283>
je     8083b08 <_IO_stdin_used+0x1284>
and    %ch,0x66(%ecx)
imul   $0x25207865,0x64(%esi),%ebp
and    %ch,%fs:0x61(%eax)
jae    8083ad0 <_IO_stdin_used+0x124c>
outsb  %ds:(%esi),(%dx)
imul   $0x6d616e66,0x69(%eax,%eiz,1),%ebp
or     %gs:(%eax),%al
imul   $0x53286c74,0x63(%edi),%ebp
dec    %ecx
dec    %edi
inc    %ebx
inc    %edi
dec    %ecx
inc    %esi
push   %esp
pop    %eax
push   %ecx
dec    %esp
inc    %ebp
dec    %esi
sub    %esp,(%eax)
popaw
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x58(%edx)
cmp    (%eax),%ah
bound  %edi,0x74(%ecx)
gs
jae    8083b0e <_IO_stdin_used+0x128a>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8083b69 <_IO_stdin_used+0x12e5>
and    %ah,(%eax)
gs
jb     8083b6d <_IO_stdin_used+0x12e9>
outsl  %ds:(%esi),(%dx)
jb     8083b71 <_IO_stdin_used+0x12ed>
and    %ah,(%eax)
fs
jb     8083b72 <_IO_stdin_used+0x12ee>
jo     8083b75 <_IO_stdin_used+0x12f1>
gs and %ch,%fs:%gs:0x76(%edi)
gs
jb     8083b7f <_IO_stdin_used+0x12fb>
jne    8083b7d <_IO_stdin_used+0x12f9>
and    %ch,0x63(%ebp)
popa
jae    8083b89 <_IO_stdin_used+0x1305>
and    %ah,(%eax)
and    %ah,0x732573
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6c30312d
insb   (%dx),%es:(%edi)
jne    8083b4c <_IO_stdin_used+0x12c8>
and    $0x6c6c382d,%eax
jne    8083b53 <_IO_stdin_used+0x12cf>
and    $0x6c6c372d,%eax
jne    8083b5a <_IO_stdin_used+0x12d6>
and    $0x6c6c372d,%eax
jne    8083b61 <_IO_stdin_used+0x12dd>
and    $0x6c6c372d,%eax
jne    8083b68 <_IO_stdin_used+0x12e4>
and    $0x6c6c372d,%eax
jne    8083b4f <_IO_stdin_used+0x12cb>
add    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x58(%edx)
and    %ah,0x72(%ebp)
jb     8083bca <_IO_stdin_used+0x1346>
jb     8083bd0 <_IO_stdin_used+0x134c>
cmp    (%eax),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8083bcd <_IO_stdin_used+0x1349>
and    %ah,(%eax)
arpl   %si,0x63(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x72(%esi)
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:(%eax)
and    %ah,0x69(%esi)
outsw  %ds:(%esi),(%dx)
and    %ah,(%eax)
and    %ah,(%eax)
insl   (%dx),%es:(%edi)
imul   $0x73256465,0x73(%ebx),%esi
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x6c6c372d,%eax
jne    8083bbe <_IO_stdin_used+0x133a>
and    %ah,0x6c6c372d
jne    8083bc6 <_IO_stdin_used+0x1342>
and    $0x6c6c372d,%eax
jne    8083bcd <_IO_stdin_used+0x1349>
and    $0x6c6c372d,%eax
jne    8083bd4 <_IO_stdin_used+0x1350>
and    $0x6c6c372d,%eax
jne    8083bbb <_IO_stdin_used+0x1337>
add    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x3a(%eax,%ebx,2)
and    %ah,0x79(%edx)
je     8083c2d <_IO_stdin_used+0x13a9>
jae    8083bea <_IO_stdin_used+0x1366>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8083c45 <_IO_stdin_used+0x13c1>
and    %ah,(%eax)
gs
jb     8083c49 <_IO_stdin_used+0x13c5>
outsl  %ds:(%esi),(%dx)
jb     8083c4d <_IO_stdin_used+0x13c9>
and    %ah,(%eax)
fs
jb     8083c4e <_IO_stdin_used+0x13ca>
jo     8083c51 <_IO_stdin_used+0x13cd>
gs and %ah,%fs:%gs:0x61(%ebx)
jb     8083c5a <_IO_stdin_used+0x13d6>
imul   $0x6c6f6320,0x72(%ebp),%esp
insb   (%dx),%es:(%edi)
jae    8083c60 <_IO_stdin_used+0x13dc>
jae    8083c14 <_IO_stdin_used+0x1390>
and    $0x732573,%eax
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x20(%eax,%ebx,2)
gs
jb     8083c78 <_IO_stdin_used+0x13f4>
outsl  %ds:(%esi),(%dx)
jb     8083c7c <_IO_stdin_used+0x13f8>
cmp    (%eax),%ah
popa
bound  %ebp,0x72(%edi)
je     8083c76 <_IO_stdin_used+0x13f2>
and    %ah,%fs:0x69(%esi)
outsw  %ds:(%esi),(%dx)
and    %ah,(%eax)
and    %ah,(%eax)
ja     8083c86 <_IO_stdin_used+0x1402>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     8083c42 <_IO_stdin_used+0x13be>
and    %ch,0x65(%eax)
popa
jb     8083c9c <_IO_stdin_used+0x1418>
bound  %esp,0x61(%ebp)
je     8083c52 <_IO_stdin_used+0x13ce>
jae    8083c2f <_IO_stdin_used+0x13ab>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x6c6c372d,%eax
jne    8083c66 <_IO_stdin_used+0x13e2>
and    %ah,0x6c6c372d
jne    8083c6e <_IO_stdin_used+0x13ea>
and    $0x6c6c372d,%eax
jne    8083c75 <_IO_stdin_used+0x13f1>
and    $0x6c6c372d,%eax
jne    8083c5c <_IO_stdin_used+0x13d8>
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x7530312d,%eax
and    %ah,0x2075382d
and    $0x2075372d,%eax
and    $0x2075372d,%eax
and    $0x2075372d,%eax
and    $0x75372d,%eax
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x2075372d,%eax
and    %ah,0x2075372d
and    $0x2075372d,%eax
and    $0x2075372d,%eax
and    $0x75372d,%eax
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x2075372d,%eax
and    %ah,0x2075372d
and    $0x2075372d,%eax
and    $0x75372d,%eax
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8083cf4 <_IO_stdin_used+0x1470>
jae    8083d3b <_IO_stdin_used+0x14b7>
outsb  %ds:(%esi),(%dx)
imul   $0x62206120,%fs:0x67(%esi),%ebp
imul   $0x73207972,0x61(%esi),%ebp
je     8083d5a <_IO_stdin_used+0x14d6>
gs
popa
insl   (%dx),%es:(%edi)
and    %dh,0x20(%edi,%ebp,2)
jae    8083d65 <_IO_stdin_used+0x14e1>
outsl  %fs:(%esi),(%dx)
jne    8083d69 <_IO_stdin_used+0x14e5>
or     (%eax),%al
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
daa
je     8083d1e <_IO_stdin_used+0x149a>
ja     8083d72 <_IO_stdin_used+0x14ee>
imul   $0x6967616d,0x20(%ebp,%eiz,2),%esi
arpl   %sp,(%eax)
je     8083d7b <_IO_stdin_used+0x14f7>
and    %ah,0x6d(%ebp,%esi,2)
jo     8083d32 <_IO_stdin_used+0x14ae>
imul   $0x4300,0xa(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8083d48 <_IO_stdin_used+0x14c4>
jne    8083d98 <_IO_stdin_used+0x1514>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8083da5 <_IO_stdin_used+0x1521>
jns    8083d55 <_IO_stdin_used+0x14d1>
and    0x70(%ecx),%ch
and    %ah,0x64(%ecx)
fs
jb     8083d5e <_IO_stdin_used+0x14da>
push   $0x22706c65
or     %cs:(%eax),%al
add    %al,(%eax)
dec    %edx
xor    $0x8,%al
or     %dl,0x34(%edx)
or     %cl,(%eax)
pop    %edx
xor    $0x8,%al
or     %ah,0x34(%edx)
or     %cl,(%eax)
fdivs  (%eax)
or     %cl,(%eax)
insl   (%dx),%es:(%edi)
xor    $0x8,%al
or     %bh,0x8(%esp,%esi,1)
or     %dl,0x34(%edx)
or     %cl,(%eax)
test   %dh,(%eax,%ecx,1)
or     %ch,0x62(%ecx,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x64002075
gs
jbe    8083d9a <_IO_stdin_used+0x1516>
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x6562616c,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8083df4 <_IO_stdin_used+0x1570>
insb   (%dx),%es:(%edi)
imul   $0x20706922,0x0(%edx,%ecx,1),%esp
popa
fs
fs
jb     8083e0d <_IO_stdin_used+0x1589>
popa
bound  %esp,0x6c(%ebp)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8083dcd <_IO_stdin_used+0x1549>
and    %ah,0x65(%edi,%ebp,2)
jae    8083dd1 <_IO_stdin_used+0x154d>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8083dd5 <_IO_stdin_used+0x1551>
je     8083e18 <_IO_stdin_used+0x1594>
imul   $0x61,0x20(%ebp),%esp
outsb  %ds:(%esi),(%dx)
jns    8083dde <_IO_stdin_used+0x155a>
popa
jb     8083e28 <_IO_stdin_used+0x15a4>
jne    8083e30 <_IO_stdin_used+0x15ac>
outsb  %gs:(%esi),(%dx)
je     8083e3a <_IO_stdin_used+0x15b6>
or     %cs:(%eax),%al
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8083df0 <_IO_stdin_used+0x156c>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8083e3c <_IO_stdin_used+0x15b8>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8083e4a <_IO_stdin_used+0x15c6>
popa
je     8083e49 <_IO_stdin_used+0x15c5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x72(%eax),%dh
imul   $0x6120,%gs:0x22(%eax),%di
jb     8083e57 <_IO_stdin_used+0x15d3>
jne    8083e5f <_IO_stdin_used+0x15db>
outsb  %gs:(%esi),(%dx)
je     8083e16 <_IO_stdin_used+0x1592>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8083e28 <_IO_stdin_used+0x15a4>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8083e74 <_IO_stdin_used+0x15f0>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8083e82 <_IO_stdin_used+0x15fe>
popa
je     8083e81 <_IO_stdin_used+0x15fd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x62(%ecx,%eiz,2),%ch
gs
insb   (%dx),%es:(%edi)
and    (%eax),%ah
popa
jb     8083e8e <_IO_stdin_used+0x160a>
jne    8083e96 <_IO_stdin_used+0x1612>
outsb  %gs:(%esi),(%dx)
je     8083e4d <_IO_stdin_used+0x15c9>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
add    %ah,(%edx)
imul   $0x72646461,0x20(%eax),%esi
insb   (%dx),%es:(%edi)
popa
bound  %esp,0x6c(%ebp)
and    %ah,0x6c(%esi)
jne    8083ec1 <_IO_stdin_used+0x163d>
push   $0x6f642022
gs
jae    8083e76 <_IO_stdin_used+0x15f2>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8083e7a <_IO_stdin_used+0x15f6>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8083e80 <_IO_stdin_used+0x15fc>
gs
js     8083ed7 <_IO_stdin_used+0x1653>
jb     8083ec6 <_IO_stdin_used+0x1642>
and    %ah,0x72(%ecx)
addr16 jne 8083ed8 <_IO_stdin_used+0x1654>
outsb  %gs:(%esi),(%dx)
je     8083ee2 <_IO_stdin_used+0x165e>
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x72646461,0x20(%eax),%esi
insb   (%dx),%es:(%edi)
popa
bound  %esp,0x6c(%ebp)
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x61207c20,0x74(%ebx),%esi
fs and %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x66(%eax,%eiz,1)
insb   (%dx),%es:(%edi)
jne    8083f14 <_IO_stdin_used+0x1690>
push   $0x70205d20
jb     8083f0d <_IO_stdin_used+0x1689>
imul   $0x5250,0x20(%eax),%di
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebx)
fs
gs
jbe    8083ed9 <_IO_stdin_used+0x1655>
inc    %esp
inc    %ebp
push   %esi
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x62(%ecx,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %cl,0x42(%ecx,%eax,2)
inc    %ebp
dec    %esp
and    %bl,0xa(%ebp)
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8083f00 <_IO_stdin_used+0x167c>
jne    8083f50 <_IO_stdin_used+0x16cc>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8083f5d <_IO_stdin_used+0x16d9>
jns    8083f0d <_IO_stdin_used+0x1689>
and    0x70(%ecx),%ch
and    %ah,0x64(%ecx)
fs
jb     8083f62 <_IO_stdin_used+0x16de>
popa
bound  %esp,0x6c(%ebp)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8083f22 <_IO_stdin_used+0x169e>
or     %cs:(%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %dh,0x6f(%edx)
jne    8083f85 <_IO_stdin_used+0x1701>
and    %dh,%gs:0x65(%edx)
jae    8083f8b <_IO_stdin_used+0x1707>
outsl  %ds:(%esi),(%dx)
jb     8083f7f <_IO_stdin_used+0x16fb>
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %dh,0x6f(%edx)
jne    8083f9e <_IO_stdin_used+0x171a>
and    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8083f95 <_IO_stdin_used+0x1711>
jne    8083fa0 <_IO_stdin_used+0x171c>
jo     8083f3f <_IO_stdin_used+0x16bb>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x75(%ecx)
imul   $0x206b6361,0x6b(%ebx),%esp
inc    %edx
dec    %edi
dec    %edi
dec    %esp
and    %bl,0xa(%ebp)
add    %dl,0x4d(%ecx,%ecx,2)
inc    %ebp
and    %bh,(%edx)
cmp    $0x4d554e20,%eax
inc    %edx
inc    %ebp
push   %edx
pop    %ebx
jae    8083fe1 <_IO_stdin_used+0x175d>
insl   (%dx),%es:(%edi)
jae    8083fc5 <_IO_stdin_used+0x1741>
or     (%eax),%al
inc    %edx
dec    %edi
dec    %edi
dec    %esp
and    %bh,(%edx)
cmp    $0x7c315b20,%eax
xor    %bl,0xa(%ebp)
add    %bh,(%eax,%eax,1)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8083f9f <_IO_stdin_used+0x171b>
popa
and    %dh,0x6f(%edx)
jne    8083ff9 <_IO_stdin_used+0x1775>
cmp    %gs:(%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %ah,0x66(%ebp,%eiz,2)
popa
jne    808400a <_IO_stdin_used+0x1786>
je     8083fc0 <_IO_stdin_used+0x173c>
add    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x75252f73
and    %al,(%eax)
data16
jb     808401f <_IO_stdin_used+0x179b>
insl   (%dx),%es:(%edi)
and    %ah,0x66002073
jb     8084028 <_IO_stdin_used+0x17a4>
insl   (%dx),%es:(%edi)
and    %dh,(%eax)
das
and    $0x74002075,%eax
outsl  %ds:(%esi),(%dx)
jae    8083fe5 <_IO_stdin_used+0x1761>
and    $0x20002073,%eax
je     808402d <_IO_stdin_used+0x17a9>
bound  %ebp,0x20(%ebp,%eiz,2)
and    $0x20002073,%eax
jo     8084049 <_IO_stdin_used+0x17c5>
outsl  %ds:(%esi),(%dx)
je     8084049 <_IO_stdin_used+0x17c5>
and    %ah,0x20002073
jae    8084045 <_IO_stdin_used+0x17c1>
outsl  %ds:(%esi),(%dx)
jo     808404a <_IO_stdin_used+0x17c6>
and    %ah,0x20002073
jae    808405f <_IO_stdin_used+0x17db>
arpl   %sp,(%eax)
and    $0x20002073,%eax
insl   (%dx),%es:(%edi)
gs
je     808406a <_IO_stdin_used+0x17e6>
imul   $0x207525,0x20(%ebx),%esp
fs
gs
popa
and    %al,%fs:(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x65700020,0x6b(%esi),%ebp
jb     8084087 <_IO_stdin_used+0x1803>
popa
jae    808407d <_IO_stdin_used+0x17f9>
jbe    808407b <_IO_stdin_used+0x17f7>
and    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8084085 <_IO_stdin_used+0x1801>
data16
jns    808403f <_IO_stdin_used+0x17bb>
add    %ah,(%eax)
insl   (%dx),%es:(%edi)
popa
jb     8084090 <_IO_stdin_used+0x180c>
and    %dh,(%eax)
js     808404e <_IO_stdin_used+0x17ca>
js     808402b <_IO_stdin_used+0x17a7>
and    %ch,0x61(%ebp)
jb     808409b <_IO_stdin_used+0x1817>
and    %ah,0x73250075
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %sp,0x63(%ecx)
push   $0x25002065
jae    80840b0 <_IO_stdin_used+0x182c>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    $0x73250073,%eax
jb     80840b4 <_IO_stdin_used+0x1830>
push   $0x65
arpl   %si,0x73(%ebp,%eiz,1)
add    %ah,0x25636d73
jae    808405d <_IO_stdin_used+0x17d9>
and    $0x64726273,%eax
and    $0x73250073,%eax
fs
jae    80840de <_IO_stdin_used+0x185a>
sub    $0x2574616e,%eax
jae    8084071 <_IO_stdin_used+0x17ed>
and    $0x63727373,%eax
sub    $0x2574616e,%eax
jae    808407d <_IO_stdin_used+0x17f9>
and    $0x73616d73,%eax
jno    80840a9 <_IO_stdin_used+0x1825>
jae    8084086 <_IO_stdin_used+0x1802>
and    $0x74736473,%eax
sub    $0x65726964,%eax
arpl   %si,0x73(%ebp,%eiz,1)
add    %ah,0x63727373
sub    $0x65726964,%eax
arpl   %si,0x73(%ebp,%eiz,1)
add    %ah,0x64657273
imul   $0x64657463,0x65(%edx),%esi
and    $0x73250073,%eax
jb     808411c <_IO_stdin_used+0x1898>
imul   $0x73257463,%fs:0x65(%edx),%esi
add    %ah,0x73616673
je     8084139 <_IO_stdin_used+0x18b5>
outsl  %ds:(%esi),(%dx)
jne    808413e <_IO_stdin_used+0x18ba>
gs
and    $0x73250073,%eax
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808413d <_IO_stdin_used+0x18b9>
data16
jns    80840fc <_IO_stdin_used+0x1878>
jae    80840d9 <_IO_stdin_used+0x1855>
and    $0x6f727073,%eax
js     8084159 <_IO_stdin_used+0x18d5>
and    $0x73250073,%eax
and    $0x203e78,%eax
and    %ah,0x78(%ebp)
jo     8084158 <_IO_stdin_used+0x18d4>
jb     8084156 <_IO_stdin_used+0x18d2>
jae    8084113 <_IO_stdin_used+0x188f>
and    $0x63657364,%eax
add    %ah,(%eax)
gs
jb     808416f <_IO_stdin_used+0x18eb>
outsl  %ds:(%esi),(%dx)
jb     8084120 <_IO_stdin_used+0x189c>
and    $0x75200064,%eax
jae    808416c <_IO_stdin_used+0x18e8>
jb     808417c <_IO_stdin_used+0x18f8>
and    %ah,0x75200064
jae    8084176 <_IO_stdin_used+0x18f2>
and    %ah,%fs:0x61200064
and    %ah,%gs:(%di)
fs
jae    8084184 <_IO_stdin_used+0x1900>
arpl   %ax,(%eax)
and    %ch,0x70(%ecx)
imul   $0x34302578,0x30(%eax,%eiz,1),%esp
js     808412e <_IO_stdin_used+0x18aa>
and    %dh,0x20(%ebx,%esi,2)
xor    %bh,0x25(%eax)
js     8084157 <_IO_stdin_used+0x18d3>
je     80841ac <_IO_stdin_used+0x1928>
popa
and    %ah,%gs:(%di)
fs
jae    80841a6 <_IO_stdin_used+0x1922>
arpl   %ax,(%eax)
and    %ch,0x65(%ebp)
je     80841ba <_IO_stdin_used+0x1936>
imul   $0x20006425,0x20(%ebx),%esp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x0(%ebx)
and    %ah,0x20007367
and    $0x736d75,%eax
and    %ch,0x69(%ecx)
data16
and    %ah,0x73250073
or     %ebp,0x65(%esi)
js     80841e2 <_IO_stdin_used+0x195e>
push   $0x2000706f
jbe    80841de <_IO_stdin_used+0x195a>
popa
and    %ah,0x28002073
je     80841f2 <_IO_stdin_used+0x196e>
insb   (%dx),%es:(%edi)
ds
and    $0x20002964,%eax
fs
gs
jbe    80841a9 <_IO_stdin_used+0x1925>
and    $0x77200073,%eax
imul   $0x64252074,%gs:0x68(%edi),%esp
add    %ah,(%eax)
fs
gs
popa
add    %ah,%fs:(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x65702000,0x6b(%esi),%ebp
jb     8084220 <_IO_stdin_used+0x199c>
popa
jae    8084216 <_IO_stdin_used+0x1992>
jbe    8084214 <_IO_stdin_used+0x1990>
add    %ah,(%eax)
jb     8084218 <_IO_stdin_used+0x1994>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
and    $0x54002073,%eax
dec    %edi
push   %ebx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084228 <_IO_stdin_used+0x19a4>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808422c <_IO_stdin_used+0x19a8>
insb   (%dx),%es:(%edi)
imul   $0x6d6f7266,0x0(%edx,%ecx,1),%esp
add    %ch,0x69(%ecx)
data16
add    %ch,0x69(%edi)
data16
add    %ch,0x6f(%esi)
je     808424a <_IO_stdin_used+0x19c6>
data16
jns    80841e4 <_IO_stdin_used+0x1960>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
add    %al,0x6e(%ecx)
and    %ah,0x72(%ebp)
jb     8084264 <_IO_stdin_used+0x19e0>
jb     8084217 <_IO_stdin_used+0x1993>
cmp    0x4e000a29,%ch
outsl  %ds:(%esi),(%dx)
je     8084220 <_IO_stdin_used+0x199c>
popa
and    %dh,0x6f(%edx)
jne    808427a <_IO_stdin_used+0x19f6>
gs
aas
or     (%eax),%al
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x74(%eax,%eiz,1)
push   $0x6f722065
jne    8084298 <_IO_stdin_used+0x1a14>
or     %gs:(%eax),%al
and    0x73(%edi,%ebp,2),%dh
and    (%eax),%ah
jbe    8084290 <_IO_stdin_used+0x1a0c>
insb   (%dx),%es:(%edi)
jne    8084297 <_IO_stdin_used+0x1a13>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808429b <_IO_stdin_used+0x1a17>
insb   (%dx),%es:(%edi)
imul   $0x7274656d,0x0(%edx,%ecx,1),%esp
imul   $0x6f697270,0x0(%ebx),%esp
jb     80842b5 <_IO_stdin_used+0x1a31>
je     80842c7 <_IO_stdin_used+0x1a43>
add    %dh,0x72(%eax)
gs
data16
gs
jb     80842bb <_IO_stdin_used+0x1a37>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
and    0x65(%ebp),%ch
je     80842d1 <_IO_stdin_used+0x1a4d>
imul   $0x6c617620,0x22(%ebx),%esp
jne    80842cd <_IO_stdin_used+0x1a49>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80842d1 <_IO_stdin_used+0x1a4d>
insb   (%dx),%es:(%edi)
imul   $0x61766e69,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
imul   $0x706f6373,0x22(%eax,%eiz,1),%esp
and    %gs:(%eax),%ah
jbe    80842e8 <_IO_stdin_used+0x1a64>
insb   (%dx),%es:(%edi)
jne    80842ef <_IO_stdin_used+0x1a6b>
or     (%eax),%al
and    0x74(%ebp),%ch
jne    80842b3 <_IO_stdin_used+0x1a2f>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80842fc <_IO_stdin_used+0x1a78>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084300 <_IO_stdin_used+0x1a7c>
insb   (%dx),%es:(%edi)
imul   $0x6c706f68,0x0(%edx,%ecx,1),%esp
imul   $0x68220074,0x69(%ebp),%ebp
outsl  %ds:(%esi),(%dx)
jo     808431e <_IO_stdin_used+0x1a9a>
imul   $0x76202274,0x69(%ebp),%ebp
popa
insb   (%dx),%es:(%edi)
jne    8084322 <_IO_stdin_used+0x1a9e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084326 <_IO_stdin_used+0x1aa2>
insb   (%dx),%es:(%edi)
imul   $0x6d766461,0x0(%edx,%ecx,1),%esp
jae    8084343 <_IO_stdin_used+0x1abf>
add    %ah,(%edx)
insl   (%dx),%es:(%edi)
jae    8084348 <_IO_stdin_used+0x1ac4>
and    (%eax),%ah
jbe    808433a <_IO_stdin_used+0x1ab6>
insb   (%dx),%es:(%edi)
jne    8084341 <_IO_stdin_used+0x1abd>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084345 <_IO_stdin_used+0x1ac1>
insb   (%dx),%es:(%edi)
imul   $0x726f6572,0x0(%edx,%ecx,1),%esp
fs
gs
jb     808435a <_IO_stdin_used+0x1ad6>
outsb  %ds:(%esi),(%dx)
add    %ah,(%bp,%si)
jb     808436b <_IO_stdin_used+0x1ae7>
je     808431b <_IO_stdin_used+0x1a97>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084364 <_IO_stdin_used+0x1ae0>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084368 <_IO_stdin_used+0x1ae4>
insb   (%dx),%es:(%edi)
imul   $0x5f6f7472,0x0(%edx,%ecx,1),%esp
insl   (%dx),%es:(%edi)
imul   $0x6f747222,0x0(%esi),%ebp
pop    %edi
insl   (%dx),%es:(%edi)
imul   $0x6c617620,0x22(%esi),%ebp
jne    8084388 <_IO_stdin_used+0x1b04>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808438c <_IO_stdin_used+0x1b08>
insb   (%dx),%es:(%edi)
imul   $0x6e697722,0x0(%edx,%ecx,1),%esp
outsl  %fs:(%esi),(%dx)
ja     808435a <_IO_stdin_used+0x1ad6>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80843a3 <_IO_stdin_used+0x1b1f>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80843a7 <_IO_stdin_used+0x1b23>
insb   (%dx),%es:(%edi)
imul   $0x6e776322,0x0(%edx,%ecx,1),%esp
and    %fs:(%eax),%ah
jbe    80843b5 <_IO_stdin_used+0x1b31>
insb   (%dx),%es:(%edi)
jne    80843bc <_IO_stdin_used+0x1b38>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80843c0 <_IO_stdin_used+0x1b3c>
insb   (%dx),%es:(%edi)
imul   $0x74696e69,0x0(%edx,%ecx,1),%esp
arpl   %si,0x6e(%edi)
add    %ah,%fs:(%edx)
imul   $0x6e776374,0x69(%esi),%ebp
and    %fs:(%eax),%ah
jbe    80843db <_IO_stdin_used+0x1b57>
insb   (%dx),%es:(%edi)
jne    80843e2 <_IO_stdin_used+0x1b5e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80843e6 <_IO_stdin_used+0x1b62>
insb   (%dx),%es:(%edi)
imul   $0x74696e69,0x0(%edx,%ecx,1),%esp
jb     8084407 <_IO_stdin_used+0x1b83>
outsb  %ds:(%esi),(%dx)
add    %ah,%fs:(%edx)
imul   $0x6e777274,0x69(%esi),%ebp
and    %fs:(%eax),%ah
jbe    8084401 <_IO_stdin_used+0x1b7d>
insb   (%dx),%es:(%edi)
jne    8084408 <_IO_stdin_used+0x1b84>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808440c <_IO_stdin_used+0x1b88>
insb   (%dx),%es:(%edi)
imul   $0x63697571,0x0(%edx,%ecx,1),%esp
imul   $0x6b,0x63(%ecx),%esp
add    %ah,(%edx)
jno    8084431 <_IO_stdin_used+0x1bad>
imul   $0x226b6361,0x6b(%ebx),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808442e <_IO_stdin_used+0x1baa>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084432 <_IO_stdin_used+0x1bae>
insb   (%dx),%es:(%edi)
imul   $0x76747472,0x0(%edx,%ecx,1),%esp
popa
jb     80843dd <_IO_stdin_used+0x1b59>
and    0x74(%edx),%dh
je     8084458 <_IO_stdin_used+0x1bd4>
popa
jb     8084407 <_IO_stdin_used+0x1b83>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084450 <_IO_stdin_used+0x1bcc>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084454 <_IO_stdin_used+0x1bd0>
insb   (%dx),%es:(%edi)
imul   $0x68747373,0x0(%edx,%ecx,1),%esp
jb     8084463 <_IO_stdin_used+0x1bdf>
jae    8084468 <_IO_stdin_used+0x1be4>
add    %ah,(%edx)
jae    8084477 <_IO_stdin_used+0x1bf3>
je     808446e <_IO_stdin_used+0x1bea>
jb     808446d <_IO_stdin_used+0x1be9>
jae    8084472 <_IO_stdin_used+0x1bee>
and    (%eax),%ah
jbe    808446f <_IO_stdin_used+0x1beb>
insb   (%dx),%es:(%edi)
jne    8084476 <_IO_stdin_used+0x1bf2>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808447a <_IO_stdin_used+0x1bf6>
insb   (%dx),%es:(%edi)
imul   $0x61657222,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
and    (%eax),%ah
jbe    8084489 <_IO_stdin_used+0x1c05>
insb   (%dx),%es:(%edi)
jne    8084490 <_IO_stdin_used+0x1c0c>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084494 <_IO_stdin_used+0x1c10>
insb   (%dx),%es:(%edi)
imul   $0x746f7270,0x0(%edx,%ecx,1),%esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6c(%edi)
add    %ah,(%edx)
jo     80844b6 <_IO_stdin_used+0x1c32>
outsl  %ds:(%esi),(%dx)
je     80844b6 <_IO_stdin_used+0x1c32>
arpl   %bp,0x6c(%edi)
and    (%eax),%ah
jbe    80844af <_IO_stdin_used+0x1c2b>
insb   (%dx),%es:(%edi)
jne    80844b6 <_IO_stdin_used+0x1c32>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80844ba <_IO_stdin_used+0x1c36>
insb   (%dx),%es:(%edi)
imul   $0x62617422,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
and    %gs:(%eax),%ah
jbe    80844c9 <_IO_stdin_used+0x1c45>
insb   (%dx),%es:(%edi)
jne    80844d0 <_IO_stdin_used+0x1c4c>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80844d4 <_IO_stdin_used+0x1c50>
insb   (%dx),%es:(%edi)
imul   $0x67696577,0x0(%edx,%ecx,1),%esp
push   $0x77220074
imul   $0x69202274,%gs:0x68(%edi),%esp
jae    80844ab <_IO_stdin_used+0x1c27>
imul   $0x64696c61,0x76(%esi),%ebp
or     (%eax),%al
arpl   %sp,0x63(%ecx)
push   $0x61740065
bound  %ebp,0x20(%ebp,%eiz,2)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084511 <_IO_stdin_used+0x1c8d>
insb   (%dx),%es:(%edi)
imul   $0x68636163,0x0(%edx,%ecx,1),%esp
gs add %ah,%fs:%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs add %ch,%fs:%gs:0x6e(%ecx)
jbe    8084528 <_IO_stdin_used+0x1ca4>
insb   (%dx),%es:(%edi)
imul   $0x746f7270,0x22(%eax,%eiz,1),%esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6c(%edi)
and    (%edx),%cl
add    %ch,0x6f(%esi)
fs and %dh,%fs:%gs:0x70(%ecx,%edi,2)
and    %dh,%gs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808454b <_IO_stdin_used+0x1cc7>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808454f <_IO_stdin_used+0x1ccb>
insb   (%dx),%es:(%edi)
imul   $0x61766e69,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
imul   $0x6d6c6165,0x72(%eax,%eiz,1),%esp
jae    808450c <_IO_stdin_used+0x1c88>
add    %dh,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     8084508 <_IO_stdin_used+0x1c84>
insl   (%dx),%es:(%edi)
popa
je     808456f <_IO_stdin_used+0x1ceb>
push   $0x61786500
arpl   %si,0x43(%eax,%eax,1)
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808453b <_IO_stdin_used+0x1cb7>
outsl  %ds:(%esi),(%dx)
jo     8084583 <_IO_stdin_used+0x1cff>
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
sub    $0x61430031,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8084550 <_IO_stdin_used+0x1ccc>
data16
insb   (%dx),%es:(%edi)
jne    80845a7 <_IO_stdin_used+0x1d23>
push   $0x756f7220
je     80845a4 <_IO_stdin_used+0x1d20>
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%bp,%di)
arpl   %bp,0x65(%eax)
or     (%eax),%al
jo     80845b9 <_IO_stdin_used+0x1d35>
gs
jo     80845af <_IO_stdin_used+0x1d2b>
outsb  %ds:(%esi),(%dx)
add    %ah,%fs:0x70(%ecx)
jo     80845b6 <_IO_stdin_used+0x1d32>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x73(%ebp,%eiz,2)
je     8084559 <_IO_stdin_used+0x1cd5>
addr16
gs
je     808455d <_IO_stdin_used+0x1cd9>
insl   (%dx),%es:(%edi)
je     80845d5 <_IO_stdin_used+0x1d51>
add    %dh,0x74(%edx)
je     8084565 <_IO_stdin_used+0x1ce1>
data16
gs
popa
je     80845df <_IO_stdin_used+0x1d5b>
jb     80845d1 <_IO_stdin_used+0x1d4d>
jae    808456e <_IO_stdin_used+0x1cea>
add    %al,(%eax)
push   %ebp
jae    80845d4 <_IO_stdin_used+0x1d50>
cmp    %gs:(%bx,%si),%ah
imul   $0x74756f72,0x20(%eax),%esi
and    %bh,%gs:0x20(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x66207c20,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
jne    8084600 <_IO_stdin_used+0x1d7c>
push   $0x53207d20
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x74756f72,0x20(%eax),%esi
and    %dh,%gs:0x61(%ebx)
jbe    8084615 <_IO_stdin_used+0x1d91>
and    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x74756f72,0x20(%eax),%esi
and    %ah,%gs:0x65(%edi)
je     80845f0 <_IO_stdin_used+0x1d6c>
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %bl,0x20(%ebx)
data16
jb     808464c <_IO_stdin_used+0x1dc8>
insl   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %ch,0x69(%ecx)
data16
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x69(%edi)
data16
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x73(%edi,%ebp,2)
and    %dl,0x53(%edi,%ecx,2)
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jb     80846bd <_IO_stdin_used+0x1e39>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %dh,0x6f(%edx)
jne    80846e2 <_IO_stdin_used+0x1e5e>
and    %bh,%gs:0x20(%ebx)
popa
fs and %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x63(%eax,%eiz,1)
push   $0x65676e61
and    %bh,0x61(%eax,%eiz,1)
jo     80846fa <_IO_stdin_used+0x1e76>
outsb  %gs:(%esi),(%dx)
and    %bh,%fs:0x72(%eax,%eiz,1)
gs
jo     8084700 <_IO_stdin_used+0x1e7c>
popa
arpl   %sp,0x20(%ebp)
jge    80846ba <_IO_stdin_used+0x1e36>
push   %edx
dec    %edi
push   %ebp
push   %esp
inc    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bh,(%edx)
cmp    $0x72205b20,%eax
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80846d7 <_IO_stdin_used+0x1e53>
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x61(%ebp)
je     8084729 <_IO_stdin_used+0x1ea5>
push   $0x45525020
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x78(%ebp)
popa
arpl   %si,0x50(%eax,%eiz,1)
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x62(%ecx,%eiz,2)
insb   (%dx),%es:(%edi)
and    %dl,%gs:0x42(%ecx,%eax,2)
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     8084779 <_IO_stdin_used+0x1ef5>
and    %dl,0x54(%edx)
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
je     80847a1 <_IO_stdin_used+0x1f1d>
jo     808478f <_IO_stdin_used+0x1f0b>
and    %dl,0x50(%ecx,%ebx,2)
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x63(%ebx)
outsl  %ds:(%esi),(%dx)
jo     808479e <_IO_stdin_used+0x1f1a>
and    %dl,0x43(%ebx)
dec    %edi
push   %eax
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
push   %edx
dec    %edi
push   %ebp
push   %esp
inc    %ebp
and    %bh,(%edx)
cmp    $0x444f4e20,%eax
inc    %ebp
pop    %edi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebx)
dec    %ecx
dec    %esi
inc    %esi
dec    %edi
pop    %edi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %cl,0x4f(%esi)
inc    %esp
inc    %ebp
pop    %edi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bh,(%edx)
cmp    $0x54205b20,%eax
pop    %ecx
push   %eax
inc    %ebp
and    %bl,0x20(%ebp)
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebx)
je     80847f8 <_IO_stdin_used+0x1f74>
jae    80847ab <_IO_stdin_used+0x1f27>
push   %esp
dec    %edi
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x62(%ecx,%eiz,2)
insb   (%dx),%es:(%edi)
and    %dl,%gs:0x42(%ecx,%eax,2)
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     808482a <_IO_stdin_used+0x1fa6>
and    %dl,0x54(%edx)
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jae    808483c <_IO_stdin_used+0x1fb8>
outsl  %ds:(%esi),(%dx)
jo     8084841 <_IO_stdin_used+0x1fbd>
and    %dl,0x43(%ebx)
dec    %edi
push   %eax
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x65(%ebp)
je     808485d <_IO_stdin_used+0x1fd9>
imul   $0x5254454d,0x20(%ebx),%esp
dec    %ecx
inc    %ebx
and    %bl,0xa(%ebp)
add    %cl,0x4e(%ecx)
inc    %esi
dec    %edi
pop    %edi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bh,(%edx)
cmp    $0x20484e20,%eax
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %al,0x4c(%esi)
inc    %ecx
inc    %edi
push   %ebx
and    %bl,0x20(%ebx)
outsb  %ds:(%esi),(%dx)
gs
js     8084890 <_IO_stdin_used+0x200c>
push   $0x4e20706f
dec    %eax
and    %bl,0x2e(%ebp)
cs or  %cs:(%eax),%al
add    %al,(%eax)
add    %cl,0x48(%esi)
and    %bh,(%edx)
cmp    $0x76205b20,%eax
imul   $0x52444441,0x20(%ecx),%esp
inc    %ebp
push   %ebx
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edi)
imul   $0x554e2074,0x68(%edi),%esp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
dec    %esi
dec    %eax
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
push   %ebx
or     (%eax),%al
dec    %edi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
push   %ebx
and    %bh,(%edx)
cmp    $0x414c4620,%eax
inc    %edi
push   %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
je     80848f7 <_IO_stdin_used+0x2073>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x64(%ecx)
jbe    80848ff <_IO_stdin_used+0x207b>
jae    8084907 <_IO_stdin_used+0x2083>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jb     8084923 <_IO_stdin_used+0x209f>
je     80848d1 <_IO_stdin_used+0x204d>
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x74(%edx)
je     8084934 <_IO_stdin_used+0x20b0>
popa
jb     80848e1 <_IO_stdin_used+0x205d>
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
outsl  %ds:(%esi),(%dx)
jb     8084933 <_IO_stdin_used+0x20af>
gs
jb     808493b <_IO_stdin_used+0x20b7>
outsb  %ds:(%esi),(%dx)
and    %cl,0x55(%bp)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
ja     8084958 <_IO_stdin_used+0x20d4>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     8084914 <_IO_stdin_used+0x2090>
dec    %esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
pop    %ebp
and    %bl,0x20(%ebx)
arpl   %si,0x6e(%edi)
and    %cl,%fs:0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x6e(%ecx)
imul   $0x4e20646e,0x77(%ebx,%eiz,2),%esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jae    80849a6 <_IO_stdin_used+0x2122>
je     808499d <_IO_stdin_used+0x2119>
jb     808499c <_IO_stdin_used+0x2118>
jae    80849a1 <_IO_stdin_used+0x211d>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    808496c <_IO_stdin_used+0x20e8>
push   %edx
inc    %ebp
inc    %ecx
dec    %esp
dec    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%ebx)
arpl   %sp,(%eax)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jb     80849eb <_IO_stdin_used+0x2167>
outsl  %ds:(%esi),(%dx)
pop    %edi
insl   (%dx),%es:(%edi)
imul   $0x454d4954,0x20(%esi),%ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x6f(%eax)
jo     80849f6 <_IO_stdin_used+0x2172>
imul   $0x554e2074,0x69(%ebp),%ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x6e(%ecx)
imul   $0x4e20646e,0x77(%edx,%esi,2),%esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
pop    %ecx
push   %eax
inc    %ebp
and    %bh,(%edx)
cmp    $0x75205b20,%eax
outsb  %ds:(%esi),(%dx)
imul   $0x7c207473,0x61(%ebx),%esp
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %bh,0x62(%eax,%eiz,1)
jb     8084a3e <_IO_stdin_used+0x21ba>
popa
arpl   %sp,%fs:0x73(%ecx)
je     80849f6 <_IO_stdin_used+0x2172>
jl     80849f8 <_IO_stdin_used+0x2174>
insl   (%dx),%es:(%edi)
jne    8084a47 <_IO_stdin_used+0x21c3>
je     8084a46 <_IO_stdin_used+0x21c2>
arpl   %sp,0x73(%ecx)
je     8084a02 <_IO_stdin_used+0x217e>
jl     8084a04 <_IO_stdin_used+0x2180>
je     8084a4e <_IO_stdin_used+0x21ca>
jb     8084a57 <_IO_stdin_used+0x21d3>
ja     8084a0a <_IO_stdin_used+0x2186>
jl     80849f6 <_IO_stdin_used+0x2172>
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jne    8084a6a <_IO_stdin_used+0x21e6>
jb     8084a63 <_IO_stdin_used+0x21df>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
jl     8084a28 <_IO_stdin_used+0x21a4>
jo     8084a7c <_IO_stdin_used+0x21f8>
outsl  %ds:(%esi),(%dx)
push   $0x74696269
and    %bh,0x62(%eax,%eiz,1)
insb   (%dx),%es:(%edi)
popa
arpl   %bp,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %bh,%gs:0x6e(%eax,%eiz,1)
popa
je     8084a43 <_IO_stdin_used+0x21bf>
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
push   %esp
inc    %ecx
inc    %edx
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bh,(%edx)
cmp    $0x6c205b20,%eax
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %bh,0x6d(%eax,%eiz,1)
popa
imul   $0x6564207c,0x20(%esi),%ebp
popaw
jne    8084ab7 <_IO_stdin_used+0x2233>
je     8084a6d <_IO_stdin_used+0x21e9>
jl     8084a6f <_IO_stdin_used+0x21eb>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
push   %ebx
inc    %ebx
dec    %edi
push   %eax
inc    %ebp
and    %bh,(%edx)
cmp    $0x68205b20,%eax
outsl  %ds:(%esi),(%dx)
jae    8084ae3 <_IO_stdin_used+0x225f>
and    %bh,0x6c(%eax,%eiz,1)
imul   $0x67207c20,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
bound  %esp,0x6c(%ecx)
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %cl,0x48(%esi)
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
push   %ebx
and    %bh,(%edx)
cmp    $0x6f205b20,%eax
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x70207c20,0x6b(%esi),%ebp
gs
jb     8084b1c <_IO_stdin_used+0x2298>
popa
jae    8084b12 <_IO_stdin_used+0x228e>
jbe    8084b10 <_IO_stdin_used+0x228c>
and    %bl,0xa(%ebp)
add    %al,(%eax)
push   %edx
push   %esp
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %bh,(%edx)
cmp    $0x6b205b20,%eax
gs
jb     8084b2f <_IO_stdin_used+0x22ab>
gs
insb   (%dx),%es:(%edi)
and    %bh,0x62(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8084aeb <_IO_stdin_used+0x2267>
jl     8084aed <_IO_stdin_used+0x2269>
jae    8084b43 <_IO_stdin_used+0x22bf>
popa
je     8084b3b <_IO_stdin_used+0x22b7>
arpl   %sp,(%eax)
jl     8084af6 <_IO_stdin_used+0x2272>
dec    %esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %ch,0x65(%esi)
gs and %ah,%fs:%gs:0x74(%ecx)
and    %ch,0x61(%ebp,%eiz,2)
jae    8084b61 <_IO_stdin_used+0x22dd>
and    %ah,0x20(%ecx)
fs
gs
jae    8084b68 <_IO_stdin_used+0x22e4>
imul   $0x6e6f6974,0x61(%esi),%ebp
and    %ah,0x64(%ecx)
fs
jb     8084b66 <_IO_stdin_used+0x22e2>
jae    8084b76 <_IO_stdin_used+0x22f2>
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%edx)
jb     8084b70 <_IO_stdin_used+0x22ec>
outsl  %ds:(%esi),(%dx)
jb     8084b72 <_IO_stdin_used+0x22ee>
gs
jb     8084b7a <_IO_stdin_used+0x22f6>
outsb  %ds:(%esi),(%dx)
and    (%bx,%si),%ah
jbe    8084b78 <_IO_stdin_used+0x22f4>
insb   (%dx),%es:(%edi)
jne    8084b7f <_IO_stdin_used+0x22fb>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084b83 <_IO_stdin_used+0x22ff>
insb   (%dx),%es:(%edi)
imul   $0x75712200,0x0(%edx,%ecx,1),%esp
imul   $0x226b6361,0x6b(%ebx),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084b9d <_IO_stdin_used+0x2319>
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jne    8084baa <_IO_stdin_used+0x2326>
and    %ah,%fs:0x65(%edx)
and    %dh,(%eax)
and    %ch,0x72(%edi)
and    %dh,(%ecx)
or     (%eax),%al
add    %al,0x72(%ebp)
jb     8084bbf <_IO_stdin_used+0x233b>
jb     8084b8c <_IO_stdin_used+0x2308>
and    %ah,(%edx)
outsb  %ds:(%esi),(%dx)
gs
js     8084bcc <_IO_stdin_used+0x2348>
push   $0x2022706f
outsl  %ds:(%esi),(%dx)
jb     8084b80 <_IO_stdin_used+0x22fc>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x66(%edi)
and    %ch,0x6e(%ecx,%ebp,2)
and    %ch,%gs:0x73(%ecx)
and    %ah,0x78(%ebp)
jo     8084bd8 <_IO_stdin_used+0x2354>
arpl   %si,0x64(%ebp,%eiz,2)
and    %ch,0x6e(%ecx)
jae    8084bf0 <_IO_stdin_used+0x236c>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     8084bff <_IO_stdin_used+0x237b>
jb     8084bcc <_IO_stdin_used+0x2348>
and    %dh,0x6e(%ebp)
gs
js     8084c08 <_IO_stdin_used+0x2384>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x6e(%ebp)
and    %ch,%fs:0x66(%edi)
and    %ch,0x6e(%ecx,%ebp,2)
and    %ah,%gs:0x66(%ecx)
je     8084c13 <_IO_stdin_used+0x238f>
jb     8084bd0 <_IO_stdin_used+0x234c>
and    0x65(%esi),%ch
js     8084c29 <_IO_stdin_used+0x23a5>
push   $0xa22706f
add    %al,(%eax)
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
daa
je     8084be2 <_IO_stdin_used+0x235e>
jb     8084c29 <_IO_stdin_used+0x23a5>
jae    8084c3a <_IO_stdin_used+0x23b6>
outsl  %ds:(%esi),(%dx)
jb     8084c2e <_IO_stdin_used+0x23aa>
and    %dh,0x6f(%edx)
jne    8084c42 <_IO_stdin_used+0x23be>
and    %ah,%gs:0x6d(%ebp,%esi,2)
jo     8084bf5 <_IO_stdin_used+0x2371>
data16
jb     8084c47 <_IO_stdin_used+0x23c3>
insl   (%dx),%es:(%edi)
and    %ah,0x20(%ecx)
je     8084c43 <_IO_stdin_used+0x23bf>
jb     8084c4d <_IO_stdin_used+0x23c9>
imul   $0xa6c,0x61(%esi),%ebp
add    %ah,(%edx)
imul   $0x74756f72,0x20(%eax),%esi
and    %ah,%gs:0x6c(%esi)
jne    8084c69 <_IO_stdin_used+0x23e5>
push   $0x65722022
jno    8084c72 <_IO_stdin_used+0x23ee>
imul   $0x72612073,0x65(%edx),%esi
addr16 jne 8084c74 <_IO_stdin_used+0x23f0>
outsb  %gs:(%esi),(%dx)
je     8084c7e <_IO_stdin_used+0x23fa>
or     %cs:(%eax),%al
add    %al,(%eax)
das
jo     8084c85 <_IO_stdin_used+0x2401>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8084c91 <_IO_stdin_used+0x240d>
jae    8084c49 <_IO_stdin_used+0x23c5>
outsb  %ds:(%esi),(%dx)
gs
je     8084c4d <_IO_stdin_used+0x23c9>
imul   $0x6f722f34,0x76(%eax),%esi
jne    8084c9b <_IO_stdin_used+0x2417>
gs
das
data16
insb   (%dx),%es:(%edi)
jne    8084ca0 <_IO_stdin_used+0x241c>
push   $0x2a2a0000
sub    (%eax),%ah
dec    %ecx
push   %eax
jbe    8084c6c <_IO_stdin_used+0x23e8>
and    %dh,0x6f(%edx)
jne    8084cb1 <_IO_stdin_used+0x242d>
imul   $0x63616320,0x67(%esi),%ebp
push   $0x73692065
and    %ah,0x6c(%esi)
jne    8084cc1 <_IO_stdin_used+0x243d>
push   $0x2e6465
add    %cl,(%edx)
sub    (%edx),%ch
sub    (%eax),%ah
inc    %esi
insb   (%dx),%es:(%edi)
jne    8084cd0 <_IO_stdin_used+0x244c>
push   $0x746f6e20
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
jo     8084cd4 <_IO_stdin_used+0x2450>
gs
je     8084cd0 <_IO_stdin_used+0x244c>
and    %ah,%fs:0x66(%ecx)
je     8084cd6 <_IO_stdin_used+0x2452>
jb     8084c93 <_IO_stdin_used+0x240f>
and    $0x7320646c,%eax
arpl   %bp,%gs:0x6e(%edi)
fs
jae    8084cab <_IO_stdin_used+0x2427>
and    %ah,0x6e652064
je     8084cf9 <_IO_stdin_used+0x2475>
imul   $0x6d657220,0x73(%ebp),%esp
popa
imul   $0xa2a2a2a,0x20(%esi),%ebp
add    %al,(%eax)
or     (%edx),%ch
sub    (%edx),%ch
and    %dl,0x6f(%edx)
jne    8084d0f <_IO_stdin_used+0x248b>
and    %ah,%fs:0x64202c64
gs
insb   (%dx),%es:(%edi)
gs
je     8084d16 <_IO_stdin_used+0x2492>
outsb  %ds:(%esi),(%dx)
and    %ah,(%di)
and    %ah,%fs:0x6e(%ebp)
je     8084d29 <_IO_stdin_used+0x24a5>
imul   $0x2a2a2a20,0x73(%ebp),%esp
or     (%eax),%al
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8084cf0 <_IO_stdin_used+0x246c>
jne    8084d40 <_IO_stdin_used+0x24bc>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8084d4d <_IO_stdin_used+0x24c9>
jns    8084cfd <_IO_stdin_used+0x2479>
and    0x70(%ecx),%ch
and    %dh,0x6f(%edx)
jne    8084d59 <_IO_stdin_used+0x24d5>
and    %ch,%gs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8084d0e <_IO_stdin_used+0x248a>
or     %cs:(%eax),%al
add    %bl,0x45(%ebp)
or     %cl,(%eax)
ret
lea    (%eax),%ecx
or     %ah,0x45(%ecx)
or     %cl,(%eax)
(bad)
inc    %ebx
or     %cl,(%eax)
clc
inc    %ebx
or     %cl,(%eax)
push   $0xca080843
inc    %edx
or     %cl,(%eax)
jmp    ac10556b <_end+0xa406c9e7>
inc    %edx
or     %cl,(%eax)
fs
inc    %ebx
or     %cl,(%eax)
gs
inc    %ebp
or     %cl,(%eax)
or     $0x43,%al
or     %cl,(%eax)
mov    0x8(%ebx),%al
or     %dh,0x80843(%eax)
add    %bh,0x44(%edx)
and    $0x93a75,%eax
xor    %bh,(%edx)
or     %eax,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8084d71 <_IO_stdin_used+0x24ed>
add    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %dh,(%eax)
das
and    $0x66002064,%eax
jb     8084dcf <_IO_stdin_used+0x254b>
insl   (%dx),%es:(%edi)
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %al,(%eax)
je     8084dd8 <_IO_stdin_used+0x2554>
and    %ah,0x75252f73
and    %al,(%eax)
je     8084de2 <_IO_stdin_used+0x255e>
and    %dh,(%eax)
das
and    $0x66002064,%eax
ja     8084dea <_IO_stdin_used+0x2566>
popa
jb     8084deb <_IO_stdin_used+0x2567>
and    %dh,(%eax)
js     8084da9 <_IO_stdin_used+0x2525>
js     8084db5 <_IO_stdin_used+0x2531>
xor    %bh,0x25(%eax)
js     8084dab <_IO_stdin_used+0x2527>
add    %ah,0x77(%esi)
insl   (%dx),%es:(%edi)
popa
jb     8084dfd <_IO_stdin_used+0x2579>
and    %dh,(%eax)
js     8084dbb <_IO_stdin_used+0x2537>
js     8084db8 <_IO_stdin_used+0x2534>
add    %ch,0x69(%ecx)
data16
and    %ah,0x5b002073
fs
gs
je     8084e07 <_IO_stdin_used+0x2583>
arpl   %bp,0x65(%eax)
fs
pop    %ebp
and    %al,(%eax)
outsl  %ds:(%esi),(%dx)
imul   $0x207325,0x20(%esi),%esp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x20,0x70(%ebp),%esi
and    $0x73002073,%eax
jne    8084e33 <_IO_stdin_used+0x25af>
jo     8084e37 <_IO_stdin_used+0x25b3>
gs
jae    8084e3b <_IO_stdin_used+0x25b7>
pop    %edi
jo     8084e3d <_IO_stdin_used+0x25b9>
imul   $0x6e65,%gs:0x6c(%eax),%di
addr16 je 8084e3d <_IO_stdin_used+0x25b9>
and    %ah,0x73002064
jne    8084e4d <_IO_stdin_used+0x25c9>
jo     8084e51 <_IO_stdin_used+0x25cd>
gs
jae    8084e55 <_IO_stdin_used+0x25d1>
pop    %edi
imul   $0x70756f72,0x67(%esi),%esp
and    %ah,0x72002073
gs
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    8084e16 <_IO_stdin_used+0x2592>
and    $0x6d002f73,%eax
popa
jo     8084e2b <_IO_stdin_used+0x25a7>
je     8084e6f <_IO_stdin_used+0x25eb>
and    %ah,0x6d002073
popa
jae    8084e7a <_IO_stdin_used+0x25f6>
jne    8084e70 <_IO_stdin_used+0x25ec>
jb     8084e6e <_IO_stdin_used+0x25ea>
fs add %ah,%fs:%gs:0x6f(%edi)
je     8084e83 <_IO_stdin_used+0x25ff>
and    %al,(%eax)
and    %bl,0x75(%ebx)
outsb  %ds:(%esi),(%dx)
jb     8084e81 <_IO_stdin_used+0x25fd>
jae    8084e8d <_IO_stdin_used+0x2609>
insb   (%dx),%es:(%edi)
jbe    8084e86 <_IO_stdin_used+0x2602>
fs
pop    %ebp
add    %ch,0x6f(%esi)
jo     8084e28 <_IO_stdin_used+0x25a4>
inc    %ecx
inc    %ebx
push   %esp
dec    %ecx
dec    %edi
dec    %esi
and    %bh,(%edx)
cmp    $0x74205b20,%eax
popa
bound  %ebp,0x20(%ebp,%eiz,2)
push   %esp
inc    %ecx
inc    %edx
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
outsl  %ds:(%si),(%dx)
je     8084ec5 <_IO_stdin_used+0x2641>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x55(%ebx)
push   %eax
push   %eax
push   %edx
inc    %ebp
push   %ebx
push   %ebx
dec    %edi
push   %edx
or     (%eax),%al
outsl  %ds:(%esi),(%dx)
jb     8084ede <_IO_stdin_used+0x265a>
gs
jb     8084e7d <_IO_stdin_used+0x25f9>
jo     8084ef1 <_IO_stdin_used+0x266d>
gs
data16
gs
jb     8084ee9 <_IO_stdin_used+0x2665>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
jbe    8084eeb <_IO_stdin_used+0x2667>
insb   (%dx),%es:(%edi)
jne    8084ef2 <_IO_stdin_used+0x266e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084ef6 <_IO_stdin_used+0x2672>
insb   (%dx),%es:(%edi)
imul   $0x616d7766,0x0(%edx,%ecx,1),%esp
jb     8084f0b <_IO_stdin_used+0x2687>
add    %ah,0x77(%esi)
insl   (%dx),%es:(%edi)
popa
jb     8084f12 <_IO_stdin_used+0x268e>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084f12 <_IO_stdin_used+0x268e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084f16 <_IO_stdin_used+0x2692>
insb   (%dx),%es:(%edi)
imul   $0x616d7766,0x0(%edx,%ecx,1),%esp
jae    8084f2b <_IO_stdin_used+0x26a7>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8084f2b <_IO_stdin_used+0x26a7>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8084f2f <_IO_stdin_used+0x26ab>
insb   (%dx),%es:(%edi)
imul   $0x6b6f6f6c,0x0(%edx,%ecx,1),%esp
jne    8084f49 <_IO_stdin_used+0x26c5>
add    %ch,0x6e(%ecx)
jbe    8084f3f <_IO_stdin_used+0x26bb>
insb   (%dx),%es:(%edi)
imul   $0x656c6261,0x74(%eax,%eiz,1),%esp
and    %cl,0x44(%ecx)
or     (%eax),%al
jae    8084f63 <_IO_stdin_used+0x26df>
jo     8084f60 <_IO_stdin_used+0x26dc>
jb     8084f57 <_IO_stdin_used+0x26d3>
jae    8084f67 <_IO_stdin_used+0x26e3>
pop    %edi
jo     8084f69 <_IO_stdin_used+0x26e5>
imul   $0x6e65,%gs:0x6c(%eax),%di
addr16 je 8084f69 <_IO_stdin_used+0x26e5>
add    %dh,0x75(%ebx)
jo     8084f65 <_IO_stdin_used+0x26e1>
jo     8084f74 <_IO_stdin_used+0x26f0>
add    %dh,0x75(%ebx)
jo     8084f7d <_IO_stdin_used+0x26f9>
jb     8084f74 <_IO_stdin_used+0x26f0>
jae    8084f84 <_IO_stdin_used+0x2700>
pop    %edi
imul   $0x70756f72,0x67(%esi),%esp
add    %dh,0x75(%ebx)
jo     8084f7d <_IO_stdin_used+0x26f9>
addr16 jb 8084f90 <_IO_stdin_used+0x270c>
jne    8084f93 <_IO_stdin_used+0x270f>
add    %ch,0x61(%ebp)
jo     8084f55 <_IO_stdin_used+0x26d1>
je     8084f99 <_IO_stdin_used+0x2715>
add    %ah,0x6f(%edi)
je     8084f9e <_IO_stdin_used+0x271a>
add    %ch,0x6e(%ecx)
jbe    8084f95 <_IO_stdin_used+0x2711>
insb   (%dx),%es:(%edi)
imul   $0x65677261,0x74(%eax,%eiz,1),%esp
je     8084f49 <_IO_stdin_used+0x26c5>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8084fad <_IO_stdin_used+0x2729>
jb     8084fc1 <_IO_stdin_used+0x273d>
and    %dh,%gs:0x75(%edx)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x70(%ecx,%edi,2)
add    %al,%gs:(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x656c7572,0x20(%eax),%esi
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x61207c20,0x74(%ebx),%esi
fs and %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x66(%eax,%eiz,1)
insb   (%dx),%es:(%edi)
jne    8084ff7 <_IO_stdin_used+0x2773>
push   $0x53205d20
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %al,0x43(%ecx)
push   %esp
dec    %ecx
dec    %edi
dec    %esi
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bh,(%edx)
cmp    $0x6e205b20,%eax
outsl  %ds:(%esi),(%dx)
je     8084fce <_IO_stdin_used+0x274a>
pop    %ebp
and    %bl,0x20(%ebx)
data16
jb     8085024 <_IO_stdin_used+0x27a0>
insl   (%dx),%es:(%edi)
and    %dl,0x52(%eax)
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x20(%edi,%ebp,2)
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x73(%edi,%ebp,2)
and    %dl,0x53(%edi,%ecx,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x77(%esi)
insl   (%dx),%es:(%edi)
popa
jb     808504d <_IO_stdin_used+0x27c9>
and    %al,0x57(%esi)
dec    %ebp
inc    %ecx
push   %edx
dec    %ebx
pop    %ebx
das
dec    %ebp
inc    %ecx
push   %ebx
dec    %ebx
pop    %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
imul   $0x52545320,0x66(%ecx),%ebp
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x69(%edi)
data16
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
gs
data16
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
push   $0x74696269
and    %bh,0x72(%eax,%eiz,1)
gs
push   $0x65
arpl   %si,0x7c(%eax,%eiz,1)
and    %dh,0x6e(%ebp)
jb     80850b9 <_IO_stdin_used+0x2835>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
pop    %ebp
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jb     80850d3 <_IO_stdin_used+0x284f>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    8085093 <_IO_stdin_used+0x280f>
pop    %ebx
push   %ebx
push   %edx
inc    %ebx
push   %edx
inc    %ebp
inc    %ecx
dec    %esp
dec    %ebp
das
pop    %ebp
inc    %esp
push   %ebx
push   %esp
push   %edx
inc    %ebp
inc    %ecx
dec    %esp
dec    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %dl,0x55(%ebx)
push   %eax
push   %eax
push   %edx
inc    %ebp
push   %ebx
push   %ebx
dec    %edi
push   %edx
and    %bh,(%edx)
cmp    $0x73205b20,%eax
jne    808510f <_IO_stdin_used+0x288b>
jo     8085113 <_IO_stdin_used+0x288f>
gs
jae    8085117 <_IO_stdin_used+0x2893>
pop    %edi
jo     8085119 <_IO_stdin_used+0x2895>
imul   $0x6e65,%gs:0x6c(%eax),%di
addr16 je 8085119 <_IO_stdin_used+0x2895>
and    %cl,0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jae    8085143 <_IO_stdin_used+0x28bf>
jo     8085140 <_IO_stdin_used+0x28bc>
jb     8085137 <_IO_stdin_used+0x28b3>
jae    8085147 <_IO_stdin_used+0x28c3>
pop    %edi
imul   $0x70756f72,0x67(%esi),%esp
and    %al,0x56(%ebp,%eax,2)
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
inc    %ecx
inc    %edx
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bh,(%edx)
cmp    $0x6c205b20,%eax
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %bh,0x6d(%eax,%eiz,1)
popa
imul   $0x6564207c,0x20(%esi),%ebp
popaw
jne    808517b <_IO_stdin_used+0x28f7>
je     8085131 <_IO_stdin_used+0x28ad>
jl     8085133 <_IO_stdin_used+0x28af>
dec    %esi
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    0x70(%ecx),%ch
and    %dh,0x75(%edx)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8085150 <_IO_stdin_used+0x28cc>
and    %ah,0x65(%edi,%ebp,2)
jae    8085154 <_IO_stdin_used+0x28d0>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8085158 <_IO_stdin_used+0x28d4>
je     808519b <_IO_stdin_used+0x2917>
imul   $0x61,0x20(%ebp),%esp
outsb  %ds:(%esi),(%dx)
jns    8085161 <_IO_stdin_used+0x28dd>
popa
jb     80851ab <_IO_stdin_used+0x2927>
jne    80851b3 <_IO_stdin_used+0x292f>
outsb  %gs:(%esi),(%dx)
je     80851bd <_IO_stdin_used+0x2939>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %dh,0x75(%ebx)
jo     80851c4 <_IO_stdin_used+0x2940>
jb     80851bb <_IO_stdin_used+0x2937>
jae    80851cb <_IO_stdin_used+0x2947>
pop    %edi
jo     80851cd <_IO_stdin_used+0x2949>
imul   $0x6e65,%gs:0x6c(%eax),%di
addr16 je 80851cd <_IO_stdin_used+0x2949>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80851d0 <_IO_stdin_used+0x294c>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80851d4 <_IO_stdin_used+0x2950>
insb   (%dx),%es:(%edi)
imul   $0x61766e49,0x0(%edx,%ecx,1),%esp
insb   (%dx),%es:(%edi)
imul   $0x70707573,0x22(%eax,%eiz,1),%esp
jb     80851ec <_IO_stdin_used+0x2968>
jae    80851fc <_IO_stdin_used+0x2978>
pop    %edi
imul   $0x70756f72,0x67(%esi),%esp
and    (%eax),%ah
jbe    80851f6 <_IO_stdin_used+0x2972>
insb   (%dx),%es:(%edi)
jne    80851fd <_IO_stdin_used+0x2979>
or     (%eax),%al
add    %al,(%eax)
push   %edi
popa
jb     808520e <_IO_stdin_used+0x298a>
imul   $0x6f72203a,0x67(%esi),%ebp
jne    808521d <_IO_stdin_used+0x2999>
and    %cl,%gs:0x41(%esi)
push   %esp
and    %ch,0x73(%ecx)
and    %ah,0x70(%ebp,%eiz,2)
jb     808521c <_IO_stdin_used+0x2998>
arpl   %sp,0x74(%ecx)
gs or  %fs:%gs:(%eax),%al
add    %al,(%eax)
and    0x70(%ecx),%ch
and    %dh,0x75(%edx)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x6c(%esi)
jne    8085240 <_IO_stdin_used+0x29bc>
push   $0x6f642022
gs
jae    80851f5 <_IO_stdin_used+0x2971>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80851f9 <_IO_stdin_used+0x2975>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80851ff <_IO_stdin_used+0x297b>
popa
jb     8085249 <_IO_stdin_used+0x29c5>
jne    8085251 <_IO_stdin_used+0x29cd>
outsb  %gs:(%esi),(%dx)
je     808525b <_IO_stdin_used+0x29d7>
or     (%eax),%al
add    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808521c <_IO_stdin_used+0x2998>
jne    808526c <_IO_stdin_used+0x29e8>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8085279 <_IO_stdin_used+0x29f5>
jns    8085229 <_IO_stdin_used+0x29a5>
and    0x70(%ecx),%ch
and    %dh,0x75(%edx)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8085239 <_IO_stdin_used+0x29b5>
or     %cs:(%eax),%al
add    %al,(%eax)
dec    %ebp
jne    808528b <_IO_stdin_used+0x2a07>
je     808528a <_IO_stdin_used+0x2a06>
arpl   %sp,0x73(%ecx)
je     8085246 <_IO_stdin_used+0x29c2>
jb     808529d <_IO_stdin_used+0x2a19>
insb   (%dx),%es:(%edi)
gs
jae    808524c <_IO_stdin_used+0x29c8>
popa
jb     8085294 <_IO_stdin_used+0x2a10>
and    %ch,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    8085255 <_IO_stdin_used+0x29d1>
jae    80852ac <_IO_stdin_used+0x2a28>
jo     80852a9 <_IO_stdin_used+0x2a25>
outsl  %ds:(%esi),(%dx)
jb     80852b0 <_IO_stdin_used+0x2a2c>
gs and %ah,%fs:%gs:0x6f(%esi)
jb     8085263 <_IO_stdin_used+0x29df>
dec    %ecx
push   %eax
jbe    808527b <_IO_stdin_used+0x29f7>
das
dec    %ecx
push   %eax
jbe    8085282 <_IO_stdin_used+0x29fe>
sub    $0x20,%al
ja     80852b1 <_IO_stdin_used+0x2a2d>
jae    808528c <_IO_stdin_used+0x2a08>
and    %ah,0x4e000a69
outsl  %ds:(%esi),(%dx)
and    %dh,0x69(%eax)
and    %dh,%fs:0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x7865000a,0x64(%ebp),%esp
je     80852df <_IO_stdin_used+0x2a5b>
popa
and    %ah,0x72(%ecx)
addr16 jne 80852e1 <_IO_stdin_used+0x2a5d>
outsb  %gs:(%esi),(%dx)
je     80852eb <_IO_stdin_used+0x2a67>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x702f000a,0x64(%ebp),%esp
jb     80852f7 <_IO_stdin_used+0x2a73>
arpl   %bp,(%edi)
and    $0x736e2f73,%eax
das
outsb  %ds:(%esi),(%dx)
gs
je     8085294 <_IO_stdin_used+0x2a10>
push   %ebx
je     80852f8 <_IO_stdin_used+0x2a74>
je     80852b9 <_IO_stdin_used+0x2a35>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,0x65(%esi)
je     808530e <_IO_stdin_used+0x2a8a>
jae    80852c2 <_IO_stdin_used+0x2a3e>
popaw
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
das
jbe    8085312 <_IO_stdin_used+0x2a8e>
jb     80852e2 <_IO_stdin_used+0x2a5e>
jb     808532a <_IO_stdin_used+0x2aa6>
outsb  %ds:(%esi),(%dx)
das
outsb  %ds:(%esi),(%dx)
gs
je     8085329 <_IO_stdin_used+0x2aa5>
jae    80852bd <_IO_stdin_used+0x2a39>
dec    %esi
outsl  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
je     8085332 <_IO_stdin_used+0x2aae>
jae    80852e6 <_IO_stdin_used+0x2a62>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x702f000a,0x64(%ebp),%esp
jb     8085349 <_IO_stdin_used+0x2ac5>
arpl   %bp,(%edi)
add    %cl,0x70(%edi)
outsb  %gs:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %ch,(%edi)
jo     808535a <_IO_stdin_used+0x2ad6>
outsl  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
popaw
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
dec    %esi
outsl  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6e75000a,0x64(%ebp),%esp
jae    8085379 <_IO_stdin_used+0x2af5>
popa
jb     8085379 <_IO_stdin_used+0x2af5>
and    %ah,0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
das
jae    808539d <_IO_stdin_used+0x2b19>
jae    8085326 <_IO_stdin_used+0x2aa2>
jne    8085395 <_IO_stdin_used+0x2b11>
outsl  %ds:(%esi),(%dx)
jne    8085399 <_IO_stdin_used+0x2b15>
je     808534d <_IO_stdin_used+0x2ac9>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%edi)
jae    80853ac <_IO_stdin_used+0x2b28>
jae    8085355 <_IO_stdin_used+0x2ad1>
popaw
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
jae    80853bc <_IO_stdin_used+0x2b38>
jae    80853ab <_IO_stdin_used+0x2b27>
jae    8085347 <_IO_stdin_used+0x2ac3>
das
gs
je     80853ae <_IO_stdin_used+0x2b2a>
das
outsb  %ds:(%esi),(%dx)
gs
je     80853be <_IO_stdin_used+0x2b3a>
jae    8085352 <_IO_stdin_used+0x2ace>
das
gs
je     80853b9 <_IO_stdin_used+0x2b35>
das
and    $0x69420073,%eax
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x3e2d2073
and    %ah,0x61662073
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
outsw  %ds:(%esi),(%dx)
jb     80853e3 <_IO_stdin_used+0x2b5f>
add    %dh,0x61(%edi)
imul   $0x78650064,0x69(%eax,%esi,2),%esi
arpl   %sp,%gs:(%eax)
outsl  %ds:(%esi),(%dx)
data16
and    %ah,(%edx)
and    $0x66202273,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
das
jo     808540f <_IO_stdin_used+0x2b8b>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8085407 <_IO_stdin_used+0x2b83>
insb   (%dx),%es:(%edi)
data16
das
outsb  %ds:(%esi),(%dx)
jae    80853d7 <_IO_stdin_used+0x2b53>
outsb  %ds:(%esi),(%dx)
gs
je     80853ac <_IO_stdin_used+0x2b28>
imul   $0x79666974,0x6f(%esi),%ebp
pop    %edi
imul   $0x61662074,0x69(%esi),%ebp
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
imul   $0x79666974,0x6f(%esi),%ebp
pop    %edi
popa
fs
fs
pop    %edi
ja     8085434 <_IO_stdin_used+0x2bb0>
je     8085438 <_IO_stdin_used+0x2bb4>
push   $0x69616620
insb   (%dx),%es:(%edi)
gs cmp %fs:%gs:(%eax),%ah
and    $0x72000a73,%eax
gs
popa
and    %ah,%fs:0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
popa
fs and %ah,%fs:0x64000a73
gs
insb   (%dx),%es:(%edi)
gs
je     8085467 <_IO_stdin_used+0x2be3>
and    %ah,0x55000a73
jae    808546b <_IO_stdin_used+0x2be7>
cmp    %gs:(%bx,%si),%ah
imul   $0x6e74656e,0x20(%eax),%esi
jae    8085437 <_IO_stdin_used+0x2bb3>
insb   (%dx),%es:(%edi)
imul   $0x2020000a,0x74(%ebx),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x65(%esi)
je     8085499 <_IO_stdin_used+0x2c15>
jae    808544d <_IO_stdin_used+0x2bc9>
popa
fs and %cl,%fs:0x41(%esi)
dec    %ebp
inc    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x65(%esi)
je     80854b3 <_IO_stdin_used+0x2c2f>
jae    8085467 <_IO_stdin_used+0x2be3>
fs
gs
insb   (%dx),%es:(%edi)
gs
je     80854b2 <_IO_stdin_used+0x2c2e>
and    %cl,0x41(%esi)
dec    %ebp
inc    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x65(%esi)
je     80854d0 <_IO_stdin_used+0x2c4c>
jae    8085484 <_IO_stdin_used+0x2c00>
imul   $0x79666974,0x6e(%ebp,%eiz,2),%esp
and    %dl,0x49(%eax)
inc    %esp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x65(%esi)
je     80854ee <_IO_stdin_used+0x2c6a>
jae    80854a2 <_IO_stdin_used+0x2c1e>
jo     80854ed <_IO_stdin_used+0x2c69>
fs
jae    80854a7 <_IO_stdin_used+0x2c23>
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x65(%esi)
je     8085509 <_IO_stdin_used+0x2c85>
jae    80854bd <_IO_stdin_used+0x2c39>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6469000a,0x72(%edi,%ebp,2),%esi
outsb  %gs:(%esi),(%dx)
je     8085515 <_IO_stdin_used+0x2c91>
data16
jns    80854af <_IO_stdin_used+0x2c2b>
jo     808551a <_IO_stdin_used+0x2c96>
fs
jae    80854b4 <_IO_stdin_used+0x2c30>
gs
js     808551c <_IO_stdin_used+0x2c98>
arpl   %ax,(%eax)
add    %al,(%eax)
add    %dl,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x72747320,0x64(%ebp),%esp
imul   $0x73252720,0x67(%esi),%ebp
daa
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     80854f9 <_IO_stdin_used+0x2c75>
popa
and    %dh,0x69(%eax)
or     %fs:(%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8085507 <_IO_stdin_used+0x2c83>
outsl  %ds:(%esi),(%dx)
jo     808554f <_IO_stdin_used+0x2ccb>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
je     8085567 <_IO_stdin_used+0x2ce3>
outsl  %ds:(%esi),(%dx)
jb     808555e <_IO_stdin_used+0x2cda>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    808556a <_IO_stdin_used+0x2ce6>
popa
arpl   %sp,0x3a(%ebp)
and    %ah,0xa73
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
jo     8085576 <_IO_stdin_used+0x2cf2>
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    808553d <_IO_stdin_used+0x2cb9>
and    $0x73253a73,%eax
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808554b <_IO_stdin_used+0x2cc7>
outsl  %ds:(%esi),(%dx)
jo     8085593 <_IO_stdin_used+0x2d0f>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
je     80855ab <_IO_stdin_used+0x2d27>
outsl  %ds:(%esi),(%dx)
jb     80855a2 <_IO_stdin_used+0x2d1e>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    80855ae <_IO_stdin_used+0x2d2a>
popa
arpl   %sp,0x20(%ebp)
and    0x203a2273,%ah
and    $0x73000a73,%eax
gs
je     80855b9 <_IO_stdin_used+0x2d35>
outsb  %ds:(%esi),(%dx)
and    %dh,0x68(%si)
and    %ch,%gs:0x65(%esi)
je     80855d2 <_IO_stdin_used+0x2d4e>
outsl  %ds:(%esi),(%dx)
jb     80855c9 <_IO_stdin_used+0x2d45>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    80855d5 <_IO_stdin_used+0x2d51>
popa
arpl   %sp,0x20(%ebp)
and    0x66202273,%ah
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %al,(%eax)
and    0x6f(%ebp),%ch
jne    80855ef <_IO_stdin_used+0x2d6b>
je     80855a3 <_IO_stdin_used+0x2d1f>
sub    $0x6b616d2d,%eax
gs
sub    $0x616c7372,%eax
jbe    80855f5 <_IO_stdin_used+0x2d71>
and    %ch,(%edi)
and    (%eax),%ah
popaw
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80855c7 <_IO_stdin_used+0x2d43>
jb     808560e <_IO_stdin_used+0x2d8a>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8085612 <_IO_stdin_used+0x2d8e>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    8085624 <_IO_stdin_used+0x2da0>
popa
arpl   %sp,0x20(%ebp)
imul   $0x2522,0x20(%ebp,%eiz,2),%bp
jae    80855e3 <_IO_stdin_used+0x2d5f>
cmp    (%eax),%ah
and    $0xa73,%eax
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    808563a <_IO_stdin_used+0x2db6>
je     80855ee <_IO_stdin_used+0x2d6a>
sub    $0x6b616d2d,%eax
gs
sub    $0x72616873,%eax
gs and %ah,%fs:%gs:0x61662073
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %ch,0x6f(%ebp)
jne    808565e <_IO_stdin_used+0x2dda>
je     8085612 <_IO_stdin_used+0x2d8e>
sub    $0x6e69622d,%eax
and    %ah,%fs:0x73252073
and    %ah,0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8085633 <_IO_stdin_used+0x2daf>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8085637 <_IO_stdin_used+0x2db3>
arpl   %si,0x65(%edx)
popa
je     8085682 <_IO_stdin_used+0x2dfe>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    8085694 <_IO_stdin_used+0x2e10>
popa
arpl   %sp,0x20(%ebp)
imul   $0x2522,0x20(%ebp,%eiz,2),%bp
jae    8085653 <_IO_stdin_used+0x2dcf>
cmp    (%eax),%ah
and    $0xa73,%eax
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %si,0x65(%edx)
popa
je     80856ad <_IO_stdin_used+0x2e29>
and    %ah,0x20(%ecx)
outsb  %ds:(%esi),(%dx)
gs
ja     808566f <_IO_stdin_used+0x2deb>
outsb  %ds:(%esi),(%dx)
gs
je     80856ca <_IO_stdin_used+0x2e46>
outsl  %ds:(%esi),(%dx)
jb     80856c1 <_IO_stdin_used+0x2e3d>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    80856cd <_IO_stdin_used+0x2e49>
popa
arpl   %sp,0x20(%ebp)
and    0x203a2273,%ah
and    $0xa73,%eax
inc    %edx
imul   $0x72702f20,0x64(%esi),%ebp
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    80856de <_IO_stdin_used+0x2e5a>
insb   (%dx),%es:(%edi)
data16
das
outsb  %ds:(%esi),(%dx)
jae    80856ae <_IO_stdin_used+0x2e2a>
outsb  %ds:(%esi),(%dx)
gs
je     80856a3 <_IO_stdin_used+0x2e1f>
sub    $0x7325203e,%eax
and    %ah,0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6e74656e,0x20(%eax),%esi
jae    80856c8 <_IO_stdin_used+0x2e44>
gs
js     8085710 <_IO_stdin_used+0x2e8c>
arpl   %sp,(%eax)
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %ah,0x6d(%ebx)
and    %ch,%fs:(%esi)
cs or  %cs:(%eax),%al
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    80856ec <_IO_stdin_used+0x2e68>
jne    808573c <_IO_stdin_used+0x2eb8>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8085749 <_IO_stdin_used+0x2ec5>
jns    80856f9 <_IO_stdin_used+0x2e75>
and    0x70(%ecx),%ch
and    %ch,0x65(%esi)
je     808574f <_IO_stdin_used+0x2ecb>
jae    8085703 <_IO_stdin_used+0x2e7f>
push   $0x22706c65
or     %cs:(%eax),%al
jne    808575b <_IO_stdin_used+0x2ed7>
imul   $0x62007473,0x61(%ebx),%esp
insb   (%dx),%es:(%edi)
popa
arpl   %bp,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dh,%gs:0x6e(%ebp)
jb     8085766 <_IO_stdin_used+0x2ee2>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
jo     808577d <_IO_stdin_used+0x2ef9>
outsl  %ds:(%esi),(%dx)
push   $0x74696269
add    %dh,0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
ja     8085718 <_IO_stdin_used+0x2e94>
outsb  %ds:(%esi),(%dx)
popa
je     808571c <_IO_stdin_used+0x2e98>
js     8085790 <_IO_stdin_used+0x2f0c>
gs
jae    8085790 <_IO_stdin_used+0x2f0c>
insb   (%dx),%es:(%edi)
jbe    8085789 <_IO_stdin_used+0x2f05>
add    %al,(%eax)
add    %al,(%eax)
js     80856c4 <_IO_stdin_used+0x2e40>
add    $0x59a1808,%eax
or     %ch,(%eax)
lcall  $0x805,$0x9a300805
cmp    %bl,-0x65bff7fb(%edx)
add    $0x59a4808,%eax
or     %dl,-0x66(%eax)
add    $0x59a5808,%eax
or     %ah,-0x66(%eax)
add    $0x59a6808,%eax
or     %dh,-0x66(%eax)
add    $0x61735508,%eax
cmp    %gs:(%bx,%si),%ah
imul   $0x6e6e7574,0x20(%eax),%esi
gs
insb   (%dx),%es:(%edi)
and    %bh,0x20(%ebx)
popa
fs and %bh,%fs:0x63(%eax,%eiz,1)
push   $0x65676e61
and    %bh,0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x73(%eax,%eiz,1)
push   $0x7c20776f
and    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
and    %bh,0x36(%eax,%eiz,1)
jb     80857f4 <_IO_stdin_used+0x2f70>
and    %bh,0x20(%ebp)
pop    %ebx
and    %cl,0x41(%esi)
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %bh,%fs:%gs:0x20(%ebx)
imul   $0x207c2070,0x69(%eax),%esi
addr16 jb 8085822 <_IO_stdin_used+0x2f9e>
and    %bh,0x73(%eax,%eiz,1)
imul   $0x61736920,0x7c(%eax,%eiz,1),%esi
je     808582c <_IO_stdin_used+0x2fa8>
jo     80857ed <_IO_stdin_used+0x2f69>
jl     80857ef <_IO_stdin_used+0x2f6b>
jbe    8085845 <_IO_stdin_used+0x2fc1>
imul   $0x205d207d,(%eax),%esp
pop    %ebx
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8085844 <_IO_stdin_used+0x2fc0>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %bl,0x69(%ebx)
jl     8085877 <_IO_stdin_used+0x2ff3>
pop    %ebp
jae    8085870 <_IO_stdin_used+0x2fec>
jno    808582d <_IO_stdin_used+0x2fa9>
pop    %ebp
and    %bl,0x20(%ebx)
pop    %ebx
imul   $0x2079656b,0x5d(%edi,%ebp,2),%edi
dec    %ebx
inc    %ebp
pop    %ecx
and    %bl,0x20(%ebp)
pop    %ebx
and    %bl,0x69(%ebx)
jl     8085895 <_IO_stdin_used+0x3011>
pop    %ebp
arpl   %si,0x75(%ebx)
insl   (%dx),%es:(%edi)
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
sub    $0x61666564,%eax
jne    80858b2 <_IO_stdin_used+0x302e>
je     8085868 <_IO_stdin_used+0x2fe4>
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
sub    $0x65646f6e,%eax
popaw
jne    80858c9 <_IO_stdin_used+0x3045>
je     808587f <_IO_stdin_used+0x2ffb>
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
sub    $0x656c6564,%eax
je     80858d7 <_IO_stdin_used+0x3053>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,(%esi)
jb     80858ef <_IO_stdin_used+0x306b>
sub    $0x66657270,%eax
imul   $0x52444441,0x20(%eax),%edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,(%esi)
jb     8085903 <_IO_stdin_used+0x307f>
sub    $0x616c6572,%eax
jns    8085905 <_IO_stdin_used+0x3081>
jo     808591a <_IO_stdin_used+0x3096>
imul   $0x4441,%gs:0x20(%eax),%di
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,(%esi)
jb     808591d <_IO_stdin_used+0x3099>
sub    $0x65736572,%eax
je     80858e0 <_IO_stdin_used+0x305c>
pop    %ebp
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
je     8085946 <_IO_stdin_used+0x30c2>
insb   (%dx),%es:(%edi)
and    %dl,0x4c(%esp,%edx,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x73(%edi,%ebp,2)
and    %dl,0x53(%edi,%ecx,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %bl,0x6e(%ebx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
jo     808595b <_IO_stdin_used+0x30d7>
je     8085965 <_IO_stdin_used+0x30e1>
imul   $0x5b205d20,%fs:0x63(%ebx),%esi
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x48(%eax)
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bh,(%edx)
cmp    $0x49207b20,%eax
push   %eax
pop    %edi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %bh,0x61(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
jns    808594e <_IO_stdin_used+0x30ca>
jge    808593a <_IO_stdin_used+0x30b6>
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x53(%edi,%ecx,2)
and    %ah,(%eax)
cmp    0x53207b20,%bh
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bh,0x30(%eax,%eiz,1)
xor    %ch,(%esi)
cs
data16
data16
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
das
push   %ebx
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
das
xor    %dh,(%eax)
cs
cs
data16
data16
and    %bh,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
push   %esp
dec    %esp
and    %ah,(%eax)
cmp    0x31207b20,%bh
cs xor %cs:0x207c2035,%dh
imul   $0x74697265,0x68(%esi),%ebp
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x45(%ebx)
pop    %ecx
and    %ah,(%eax)
cmp    0x44207b20,%bh
dec    %edi
push   %esp
push   %esp
inc    %ebp
inc    %esp
pop    %edi
push   %ecx
push   %ebp
inc    %ecx
inc    %esp
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    $0x25203a73,%eax
jae    8085a0e <_IO_stdin_used+0x318a>
imul   $0x6d657220,0x20(%eax),%esi
outsl  %ds:(%esi),(%dx)
je     8085a4e <_IO_stdin_used+0x31ca>
and    %ah,0x6c202073
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x25002073
jae    8085a1b <_IO_stdin_used+0x3197>
and    %al,0x6f(%edx,%esi,2)
jo     8085a21 <_IO_stdin_used+0x319d>
jo     8085a64 <_IO_stdin_used+0x31e0>
arpl   %bp,0x65(%ebx)
je     8085a7b <_IO_stdin_used+0x31f7>
and    %ch,0x75(%edi)
je     8085a2d <_IO_stdin_used+0x31a9>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%ebx)
jno    8085a89 <_IO_stdin_used+0x3205>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x2e(%ebp)
or     (%eax),%al
add    %ah,0x43202073
push   $0x736b6365
jne    8085a95 <_IO_stdin_used+0x3211>
and    %ch,0x6e(%ecx)
and    %dh,0x65(%edx)
arpl   %sp,0x69(%ebp)
jbe    8085a98 <_IO_stdin_used+0x3214>
and    %dh,%fs:0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8085a5c <_IO_stdin_used+0x31d8>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0x2e64,0x65(%edx),%esi
add    %al,(%eax)
and    $0x53202073,%eax
gs
jno    8085ac9 <_IO_stdin_used+0x3245>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
jo     8085abc <_IO_stdin_used+0x3238>
arpl   %bp,0x65(%ebx)
je     8085ad3 <_IO_stdin_used+0x324f>
and    %ch,0x6e(%edi)
and    %ch,0x75(%edi)
je     8085ad8 <_IO_stdin_used+0x3254>
jne    8085ade <_IO_stdin_used+0x325a>
add    %dl,%cs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%bp)
jb     8085ae3 <_IO_stdin_used+0x325f>
popa
je     8085a99 <_IO_stdin_used+0x3215>
outsw  %ds:(%esi),(%dx)
jb     8085a9d <_IO_stdin_used+0x3219>
das
jo     8085af2 <_IO_stdin_used+0x326e>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8085ab6 <_IO_stdin_used+0x3232>
fs
gs
jbe    8085ab9 <_IO_stdin_used+0x3235>
and    %al,0x69(%edi)
jbe    8085af9 <_IO_stdin_used+0x3275>
outsb  %ds:(%esi),(%dx)
and    %dh,0x70(%di)
or     %cs:(%eax),%al
and    $0x6c25646c,%eax
fs
and    $0x6c25646c,%eax
fs
and    $0x6c25646c,%eax
fs
and    $0x2a25646c,%eax
fs
and    $0x6c25646c,%eax
fs
and    $0x6c25646c,%eax
fs
and    $0x6c25646c,%eax
fs
and    $0x646c,%eax
add    %dl,0x58(%edx)
cmp    (%eax),%ah
push   %eax
popa
arpl   %bp,0x65(%ebx)
je     8085b46 <_IO_stdin_used+0x32c2>
and    %ah,(%eax)
and    %ah,(%eax)
inc    %edx
jns    8085b4e <_IO_stdin_used+0x32ca>
gs
jae    8085afd <_IO_stdin_used+0x3279>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x72(%ebp)
jb     8085b57 <_IO_stdin_used+0x32d3>
jb     8085b5d <_IO_stdin_used+0x32d9>
and    %al,0x73(%ebx)
jne    8085b5c <_IO_stdin_used+0x32d8>
inc    %ebp
jb     8085b64 <_IO_stdin_used+0x32e0>
jae    8085b14 <_IO_stdin_used+0x3290>
dec    %edi
jne    8085b6b <_IO_stdin_used+0x32e7>
dec    %edi
push   %bx
gs
jno    8085b1d <_IO_stdin_used+0x3299>
dec    %ebp
arpl   %sp,0x73(%ecx)
je     8085b76 <_IO_stdin_used+0x32f2>
and    $0x73,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x6c30312d,%eax
and    %ah,%fs:0x6c32312d
and    %ah,%fs:0x646c362d
and    %ah,0x646c382d
and    %ah,0x646c382d
and    %ah,0x646c382d
and    $0x58540073,%eax
cmp    (%eax),%ah
push   %eax
popa
arpl   %bp,0x65(%ebx)
je     8085bb2 <_IO_stdin_used+0x332e>
and    %ah,(%eax)
and    %ah,(%eax)
inc    %edx
jns    8085bba <_IO_stdin_used+0x3336>
gs
jae    8085b69 <_IO_stdin_used+0x32e5>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x72(%ebp)
jb     8085bc3 <_IO_stdin_used+0x333f>
jb     8085bc9 <_IO_stdin_used+0x3345>
and    %al,0x61(%ebp,%eiz,2)
fs
dec    %esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8085b80 <_IO_stdin_used+0x32fc>
dec    %esi
outsl  %ds:(%esi),(%dx)
push   %edx
outsl  %ds:(%esi),(%dx)
jne    8085bda <_IO_stdin_used+0x3356>
and    %ah,%gs:(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
inc    %edx
jne    8085bd4 <_IO_stdin_used+0x3350>
jae    8085b95 <_IO_stdin_used+0x3311>
jae    8085b72 <_IO_stdin_used+0x32ee>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x6c30312d,%eax
and    %ah,%fs:0x6c32312d
and    %ah,%fs:0x646c362d
and    %ah,0x646c382d
and    %ah,0x646c382d
and    %ah,0x646c362d
add    %al,(%eax)
add    %bl,0x6f(%ecx)
jne    8085bc4 <_IO_stdin_used+0x3340>
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
popa
gs and %dh,%fs:%gs:0x6f(%si)
and    %ah,0x73(%ecx)
imul   $0x66,(%eax),%esp
outsl  %ds:(%esi),(%dx)
jb     8085bd7 <_IO_stdin_used+0x3353>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8085c20 <_IO_stdin_used+0x339c>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi)
and    %dh,%gs:0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs gs or %cs:%fs:%gs:(%eax),%al
add    %ch,0x6e(%ecx)
jbe    8085c39 <_IO_stdin_used+0x33b5>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ah,0x6f(%esi)
jb     8085c06 <_IO_stdin_used+0x3382>
and    0x65(%ebx),%ch
jns    8085c0d <_IO_stdin_used+0x3389>
cmp    (%eax),%ah
and    0x203b2273,%ah
imul   $0x6c756f68,0x73(%eax,%eiz,1),%esi
and    %ah,%fs:0x65(%edx)
and    %ah,0x6e(%ecx)
and    %dh,0x6e(%ebp)
jae    8085c70 <_IO_stdin_used+0x33ec>
outsb  %ds:(%si),(%dx)
gs and %ch,%fs:%gs:0x6e(%ecx)
je     8085c75 <_IO_stdin_used+0x33f1>
addr16
gs
jb     8085c1e <_IO_stdin_used+0x339a>
add    %al,(%eax)
add    %al,(%eax)
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8085c8a <_IO_stdin_used+0x3406>
and    %ah,0x6f(%esi)
jb     8085c4a <_IO_stdin_used+0x33c6>
and    0x6b(%ecx),%ch
gs
jns    8085c52 <_IO_stdin_used+0x33ce>
cmp    (%eax),%ah
and    0x203b2273,%ah
imul   $0x6c756f68,0x73(%eax,%eiz,1),%esi
and    %ah,%fs:0x65(%edx)
and    %ah,0x6e(%ecx)
and    %dh,0x6e(%ebp)
jae    8085cb5 <_IO_stdin_used+0x3431>
outsb  %ds:(%si),(%dx)
gs and %ch,%fs:%gs:0x6e(%ecx)
je     8085cba <_IO_stdin_used+0x3436>
addr16
gs
jb     8085c63 <_IO_stdin_used+0x33df>
add    %al,(%eax)
add    %ch,0x6e(%ecx)
jbe    8085cc1 <_IO_stdin_used+0x343d>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ah,0x6f(%esi)
jb     8085c8e <_IO_stdin_used+0x340a>
and    0x6b(%edi),%ch
gs
jns    8085c96 <_IO_stdin_used+0x3412>
cmp    (%eax),%ah
and    0x203b2273,%ah
imul   $0x6c756f68,0x73(%eax,%eiz,1),%esi
and    %ah,%fs:0x65(%edx)
and    %ah,0x6e(%ecx)
and    %dh,0x6e(%ebp)
jae    8085cf9 <_IO_stdin_used+0x3475>
outsb  %ds:(%si),(%dx)
gs and %ch,%fs:%gs:0x6e(%ecx)
je     8085cfe <_IO_stdin_used+0x347a>
addr16
gs
jb     8085ca7 <_IO_stdin_used+0x3423>
add    %al,(%eax)
add    %cl,0x65(%ebx)
jns    8085d17 <_IO_stdin_used+0x3493>
and    %ah,0x72(%ecx)
and    %ch,%gs:0x6f(%esi)
je     8085ccd <_IO_stdin_used+0x3449>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8085d18 <_IO_stdin_used+0x3494>
and    %dh,%fs:0x69(%edi)
je     8085d21 <_IO_stdin_used+0x349d>
and    %ch,0x70(%ecx)
imul   $0x20646e61,0x20(%eax),%esi
jae    8085d2e <_IO_stdin_used+0x34aa>
je     8085ce7 <_IO_stdin_used+0x3463>
je     8085d3e <_IO_stdin_used+0x34ba>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
jae    8085cd9 <_IO_stdin_used+0x3455>
add    %al,0x20(%ecx)
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     8085cfc <_IO_stdin_used+0x3478>
je     8085d53 <_IO_stdin_used+0x34cf>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %dh,0x65(%edx)
jno    8085d5c <_IO_stdin_used+0x34d8>
imul   $0x20612073,0x65(%edx),%esi
jae    8085d5f <_IO_stdin_used+0x34db>
jne    8085d64 <_IO_stdin_used+0x34e0>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     8085d5f <_IO_stdin_used+0x34db>
jae    8085d6f <_IO_stdin_used+0x34eb>
or     (%eax),%al
add    %al,(%eax)
je     8085d76 <_IO_stdin_used+0x34f2>
insb   (%dx),%es:(%edi)
and    %ah,(%ecx)
cmp    $0x61203020,%eax
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6f(%esi)
jo     8085d7e <_IO_stdin_used+0x34fa>
je     8085d88 <_IO_stdin_used+0x3504>
imul   $0x65726120,%fs:0x63(%ebx),%esi
and    %ch,0x6e(%ecx)
arpl   %bp,0x6d(%edi)
jo     8085d84 <_IO_stdin_used+0x3500>
je     8085d8e <_IO_stdin_used+0x350a>
bound  %ebp,0xa(%ebp,%eiz,2)
add    %al,(%eax)
add    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8085d53 <_IO_stdin_used+0x34cf>
fs
gs
je     8085d9c <_IO_stdin_used+0x3518>
jb     8085da6 <_IO_stdin_used+0x3522>
imul   $0x6e757420,0x65(%esi),%ebp
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs and %ch,%fs:%gs:(%eax)
imul   $0x67202c70,0x69(%eax),%esi
jb     8085db8 <_IO_stdin_used+0x3534>
sub    $0x20,%al
jbe    8085dcb <_IO_stdin_used+0x3547>
imul   $0x7320726f,(%eax),%esp
imul   $0x55000000,0xa(%ecx,%ebp,1),%esi
outsb  %ds:(%esi),(%dx)
jae    8085ddd <_IO_stdin_used+0x3559>
jo     8085dda <_IO_stdin_used+0x3556>
outsl  %ds:(%esi),(%dx)
jb     8085de1 <_IO_stdin_used+0x355d>
gs and %dh,%fs:%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     8085de4 <_IO_stdin_used+0x3560>
arpl   %bp,0x6c(%edi)
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0xa642520,0x3a(%ecx,%edi,2),%ebp
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8085db8 <_IO_stdin_used+0x3534>
jne    8085e08 <_IO_stdin_used+0x3584>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8085e15 <_IO_stdin_used+0x3591>
jns    8085dc5 <_IO_stdin_used+0x3541>
and    0x70(%ecx),%ch
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8085dd7 <_IO_stdin_used+0x3553>
or     (%eax),%al
push   %edi
push   $0x3a657265
and    %cl,0x41(%esi)
dec    %ebp
inc    %ebp
and    %bh,(%edx)
cmp    $0x52545320,%eax
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%al
jo     8085e34 <_IO_stdin_used+0x35b0>
jb     8085dd2 <_IO_stdin_used+0x354e>
jo     8085e46 <_IO_stdin_used+0x35c2>
add    %ah,(%eax)
and    $0x73252073,%eax
and    %al,(%eax)
and    %ah,0x76(%ebp,%eiz,2)
and    %ah,0x20002073
je     8085e5d <_IO_stdin_used+0x35d9>
insb   (%dx),%es:(%edi)
and    %ah,0x20002064
je     8085e66 <_IO_stdin_used+0x35e2>
insb   (%dx),%es:(%edi)
and    %ch,0x6e(%ecx)
push   $0x74697265
and    %al,(%eax)
and    %dh,0x73(%edi,%ebp,2)
add    %ah,0x20732563
add    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     8085e7a <_IO_stdin_used+0x35f6>
je     8085e84 <_IO_stdin_used+0x3600>
imul   $0x72362000,%fs:0x63(%ebx),%esi
fs
sub    $0x66657270,%eax
imul   $0x252f7325,0x20(%eax),%edi
jne    8085e46 <_IO_stdin_used+0x35c2>
add    %dh,(%esi)
jb     8085e8e <_IO_stdin_used+0x360a>
sub    $0x616c6572,%eax
jns    8085e90 <_IO_stdin_used+0x360c>
jo     8085ea5 <_IO_stdin_used+0x3621>
imul   $0x7325,%gs:0x20(%eax),%di
das
and    $0x20002075,%eax
imul   $0x20,0x79(%ebp),%esp
and    $0x69200075,%eax
imul   $0x20,0x79(%ebp),%esp
and    $0x20002075,%eax
outsl  %ds:(%esi),(%dx)
imul   $0x20,0x79(%ebp),%esp
and    $0x25002075,%eax
jae    8085e7e <_IO_stdin_used+0x35fa>
and    %al,0x68(%ebx)
arpl   %bp,%gs:0x73(%ebx)
jne    8085ed4 <_IO_stdin_used+0x3650>
and    %ch,0x75(%edi)
je     8085edc <_IO_stdin_used+0x3658>
jne    8085ee2 <_IO_stdin_used+0x365e>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8085ee9 <_IO_stdin_used+0x3665>
add    %ch,%cs:(%edi)
jo     8085eed <_IO_stdin_used+0x3669>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8085eb1 <_IO_stdin_used+0x362d>
fs
gs
jbe    8085e86 <_IO_stdin_used+0x3602>
das
jo     8085efb <_IO_stdin_used+0x3677>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8085ebf <_IO_stdin_used+0x363b>
fs
gs
jbe    8085eb4 <_IO_stdin_used+0x3630>
jb     8085efb <_IO_stdin_used+0x3677>
popa
and    %ah,%fs:0x72(%ebp)
jb     8085f0c <_IO_stdin_used+0x3688>
jb     8085ea9 <_IO_stdin_used+0x3625>
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     8085ece <_IO_stdin_used+0x364a>
je     8085f29 <_IO_stdin_used+0x36a5>
jo     8085f17 <_IO_stdin_used+0x3693>
and    %ch,0x66(%edi)
and    %ah,(%edx)
and    $0xa2273,%eax
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs add %ch,%fs:%gs:0x70(%ecx)
imul   $0x692f7069,0x0(%eax),%esi
jo     8085ecc <_IO_stdin_used+0x3648>
addr16 jb 8085f34 <_IO_stdin_used+0x36b0>
das
imul   $0x36767069,0x0(%eax),%esi
das
imul   $0x74617369,0x0(%eax),%esi
popa
jo     8085ee2 <_IO_stdin_used+0x365e>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs and %ah,%fs:%gs:(%edx)
and    $0xa2273,%eax
imul   $0x6b6f0079,0x65(%ebx),%ebp
gs
jns    8085f06 <_IO_stdin_used+0x3682>
imul   $0x63690071,0x65(%ebx),%esi
jae    8085f84 <_IO_stdin_used+0x3700>
insl   (%dx),%es:(%edi)
add    %ch,0x63(%edi)
jae    8085f8a <_IO_stdin_used+0x3706>
insl   (%dx),%es:(%edi)
add    %ch,0x6e(%ecx)
jbe    8085f7c <_IO_stdin_used+0x36f8>
insb   (%dx),%es:(%edi)
imul   $0xa4c54,0x54(%eax,%eiz,1),%esp
push   %esp
push   %esp
dec    %esp
and    %ch,0x75(%ebp)
jae    8085fa0 <_IO_stdin_used+0x371c>
and    %ah,0x65(%edx)
and    %bh,0xa353532(,%edi,1)
add    %dh,0x6c(%ebx,%eiz,2)
popa
jae    8085fb0 <_IO_stdin_used+0x372c>
add    %ah,0x61(%edx)
and    %dl,%fs:0x53(%edi,%ecx,2)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8085fb0 <_IO_stdin_used+0x372c>
add    %dh,0x69(%ebx)
je     8085f50 <_IO_stdin_used+0x36cc>
jbe    8085fc6 <_IO_stdin_used+0x3742>
imul   $0x6c6e7574,(%eax),%eax
xor    %al,(%eax)
imul   $0x30697476,0x5f(%eax),%esi
add    %dh,0x69(%ebx)
je     8085f96 <_IO_stdin_used+0x3712>
add    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
add    %cl,0x75(%ebp)
jae    8085fe3 <_IO_stdin_used+0x375f>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
jns    8085f98 <_IO_stdin_used+0x3714>
fs
gs
jbe    8085fe5 <_IO_stdin_used+0x3761>
arpl   %sp,0xa(%ebp)
add    %dh,0x72(%eax)
insb   (%dx),%es:(%edi)
sub    $0x61666564,%eax
jne    8085ff6 <_IO_stdin_used+0x3772>
je     8085f8c <_IO_stdin_used+0x3708>
jo     8086000 <_IO_stdin_used+0x377c>
insb   (%dx),%es:(%edi)
sub    $0x65646f6e,%eax
popaw
jne    8086004 <_IO_stdin_used+0x3780>
je     8085f9a <_IO_stdin_used+0x3716>
jo     808600e <_IO_stdin_used+0x378a>
insb   (%dx),%es:(%edi)
sub    $0x656c6564,%eax
je     8086009 <_IO_stdin_used+0x3785>
add    %cl,0x6e(%ecx)
jbe    808600a <_IO_stdin_used+0x3786>
insb   (%dx),%es:(%edi)
imul   $0x70204c52,0x50(%eax,%eiz,1),%esp
popa
jb     8086016 <_IO_stdin_used+0x3792>
insl   (%dx),%es:(%edi)
gs
je     808601e <_IO_stdin_used+0x379a>
jb     8085fdb <_IO_stdin_used+0x3757>
and    0xa2273,%ah
dec    %edi
outsb  %ds:(%esi),(%dx)
and    %dl,%gs:0x52(%eax)
dec    %esp
and    %ah,0x6e(%ebp)
je     808603f <_IO_stdin_used+0x37bb>
jns    8085fef <_IO_stdin_used+0x376b>
popa
je     8085ff2 <_IO_stdin_used+0x376e>
popa
and    %dh,0x6d(%ecx,%ebp,2)
or     %gs:(%eax),%al
ss
jb     8086041 <_IO_stdin_used+0x37bd>
add    %dh,(%esi)
jb     8086045 <_IO_stdin_used+0x37c1>
sub    $0x66657270,%eax
imul   $0x61766e69,0x0(%eax),%edi
insb   (%dx),%es:(%edi)
imul   $0x705f6472,0x36(%eax,%eiz,1),%esp
jb     808605d <_IO_stdin_used+0x37d9>
imul   $0x3600,0xa(%eax),%di
jb     8086064 <_IO_stdin_used+0x37e0>
sub    $0x616c6572,%eax
jns    8086066 <_IO_stdin_used+0x37e2>
jo     808607b <_IO_stdin_used+0x37f7>
imul   $0x6e69,%gs:0x0(%eax),%di
jbe    8086073 <_IO_stdin_used+0x37ef>
insb   (%dx),%es:(%edi)
imul   $0x722d6472,0x36(%eax,%eiz,1),%esp
gs
insb   (%dx),%es:(%edi)
popa
jns    808607f <_IO_stdin_used+0x37fb>
jo     8086094 <_IO_stdin_used+0x3810>
imul   $0x3600,%gs:0xa(%eax),%di
jb     808608f <_IO_stdin_used+0x380b>
sub    $0x65736572,%eax
je     8086032 <_IO_stdin_used+0x37ae>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    8086097 <_IO_stdin_used+0x3813>
insb   (%dx),%es:(%edi)
imul   $0x70204452,0x36(%eax,%eiz,1),%esp
popa
jb     80860a3 <_IO_stdin_used+0x381f>
insl   (%dx),%es:(%edi)
gs
je     80860ab <_IO_stdin_used+0x3827>
jb     8086068 <_IO_stdin_used+0x37e4>
and    0xa2273,%ah
add    %al,(%eax)
and    $0x25203a73,%eax
jae    8086086 <_IO_stdin_used+0x3802>
imul   $0x65722036,0x76(%eax),%esi
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     80860c7 <_IO_stdin_used+0x3843>
and    %ah,0x6f6c2073
arpl   %sp,0x6c(%ecx)
and    %ah,0x55000073
jae    80860d4 <_IO_stdin_used+0x3850>
cmp    %gs:(%bx,%si),%ah
imul   $0x6920662d,0x20(%eax),%esi
outsb  %ds:(%esi),(%dx)
gs
je     80860b8 <_IO_stdin_used+0x3834>
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x20(%ebx)
popa
fs and %bh,%fs:0x63(%eax,%eiz,1)
push   $0x65676e61
and    %bh,0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x73(%eax,%eiz,1)
push   $0x7d20776f
and    %bl,0x20(%ebx)
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %bh,%fs:%gs:0x20(%ebx)
imul   $0x20367069,0x36(%eax),%esi
jl     80860f0 <_IO_stdin_used+0x386c>
imul   $0x7c203670,0x69(%eax),%esi
and    %ch,0x70(%ecx)
ss
addr16 jb 8086143 <_IO_stdin_used+0x38bf>
and    %bh,0x61(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
jns    8086105 <_IO_stdin_used+0x3881>
jge    8086107 <_IO_stdin_used+0x3883>
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     8086163 <_IO_stdin_used+0x38df>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x48(%eax)
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x4c452074,0x69(%ebp),%ebp
dec    %ecx
dec    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6f(%eax)
jo     80861c0 <_IO_stdin_used+0x393c>
imul   $0x54542074,0x69(%ebp),%ebp
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x6c(%ebx,%eiz,2)
popa
jae    80861da <_IO_stdin_used+0x3956>
and    %dl,0x4c(%ebx,%eax,2)
inc    %ecx
push   %ebx
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     80861e4 <_IO_stdin_used+0x3960>
popa
bound  %esp,0x6c(%ebp)
and    %al,0x4c(%esi)
dec    %edi
push   %edi
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x56504920,%bh
ss
pop    %edi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x4c(%ebp)
dec    %ecx
dec    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x6e207b20,%bh
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,%gs:0x30(%eax,%eiz,1)
cs xor %cs:0x287d2035,%dh
fs
gs
popaw
jne    8086248 <_IO_stdin_used+0x39c4>
je     808621b <_IO_stdin_used+0x3997>
and    $0xa2964,%eax
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
push   %esp
dec    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x2e2e3020,%eax
xor    0x64282035,%dh
gs
popaw
jne    8086272 <_IO_stdin_used+0x39ee>
je     8086245 <_IO_stdin_used+0x39c1>
and    $0xa2964,%eax
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
inc    %ebx
dec    %esp
inc    %ecx
push   %ebx
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x30207b20,%bh
js     8086259 <_IO_stdin_used+0x39d5>
cs xor %bh,%cs:0x66(%eax)
data16
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x4c(%esi)
dec    %edi
push   %edi
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
and    %bh,(%edx)
cmp    $0x30207b20,%eax
js     8086289 <_IO_stdin_used+0x3a05>
cs xor %bh,%cs:0x66(%eax)
data16
data16
data16
data16
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
and    %bh,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
dec    %ebx
inc    %ebp
pop    %ecx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x44207b20,%eax
dec    %edi
push   %esp
push   %esp
inc    %ebp
inc    %esp
pop    %edi
push   %ecx
push   %ebp
inc    %ecx
inc    %esp
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%edx)
jb     8086308 <_IO_stdin_used+0x3a84>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808630c <_IO_stdin_used+0x3a88>
and    (%eax),%ah
popa
fs
fs
jb     8086313 <_IO_stdin_used+0x3a8f>
jae    8086323 <_IO_stdin_used+0x3a9f>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x41207369,0x20(%ecx,%edi,2),%ebp
inc    %esi
pop    %edi
push   %ebp
dec    %esi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
add    %al,(%eax)
add    %al,(%eax)
and    0x63(%edi,%ebp,2),%ch
popa
insb   (%dx),%es:(%edi)
and    (%eax),%ah
popa
fs
fs
jb     808633a <_IO_stdin_used+0x3ab6>
jae    808634a <_IO_stdin_used+0x3ac6>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x41207369,0x20(%ecx,%edi,2),%ebp
inc    %esi
pop    %edi
push   %ebp
dec    %esi
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
add    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8086313 <_IO_stdin_used+0x3a8f>
fs
gs
je     808635c <_IO_stdin_used+0x3ad8>
jb     8086366 <_IO_stdin_used+0x3ae2>
imul   $0x6e757420,0x65(%esi),%ebp
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs and %ch,%fs:%gs:(%eax)
imul   $0x2c367069,0x36(%eax),%esi
and    %ch,0x70(%ecx)
imul   $0x20726f20,0x36(%eax),%esi
addr16 jb 8086383 <_IO_stdin_used+0x3aff>
sub    %ecx,(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8086354 <_IO_stdin_used+0x3ad0>
jne    80863a4 <_IO_stdin_used+0x3b20>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     80863b1 <_IO_stdin_used+0x3b2d>
jns    8086361 <_IO_stdin_used+0x3add>
and    0x70(%ecx),%ch
and    %ch,0x6e692066
gs
je     8086383 <_IO_stdin_used+0x3aff>
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     808637c <_IO_stdin_used+0x3af8>
or     %cs:(%eax),%al
and    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x6f6e2074,0x69(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
add    %ah,%gs:(%eax)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x75252074,0x69(%ebp),%ebp
add    %ah,(%eax)
push   $0x696c706f
insl   (%dx),%es:(%edi)
imul   $0x74200075,0x25(%eax,%eiz,1),%esi
arpl   %bp,0x73(%ecx,%eiz,2)
jae    80863b2 <_IO_stdin_used+0x3b2e>
imul   $0x74697265,0x68(%esi),%ebp
add    %ah,(%eax)
je     8086400 <_IO_stdin_used+0x3b7c>
insb   (%dx),%es:(%edi)
popa
jae    8086414 <_IO_stdin_used+0x3b90>
and    %dh,(%eax)
js     80863ca <_IO_stdin_used+0x3b46>
xor    %dh,(%edx)
js     80863a9 <_IO_stdin_used+0x3b25>
and    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     808641b <_IO_stdin_used+0x3b97>
popa
bound  %esp,0x6c(%ebp)
and    %ch,0x6e(%ecx)
push   $0x74697265
add    %ah,(%eax)
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808642e <_IO_stdin_used+0x3baa>
popa
bound  %esp,0x6c(%ebp)
and    %dh,(%eax)
js     80863ef <_IO_stdin_used+0x3b6b>
xor    %dh,0x28200078
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808643e <_IO_stdin_used+0x3bba>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
and    %dh,(%eax)
js     8086401 <_IO_stdin_used+0x3b7d>
xor    %bh,(%eax)
js     8086409 <_IO_stdin_used+0x3b85>
add    %ah,(%eax)
fs
jae    8086448 <_IO_stdin_used+0x3bc4>
jo     8086407 <_IO_stdin_used+0x3b83>
imul   $0x74697265,0x68(%esi),%ebp
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
fs
jae    8086461 <_IO_stdin_used+0x3bdd>
jo     8086420 <_IO_stdin_used+0x3b9c>
imul   $0x74697265,0x68(%esi),%ebp
and    %bl,0xa(%ebp)
add    %dl,0x68(%edi)
gs
jb     8086475 <_IO_stdin_used+0x3bf1>
cmp    (%eax),%ah
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x52545320,%bh
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%al
imul   $0x70692f36,0x76(%eax),%esi
jbe    8086466 <_IO_stdin_used+0x3be2>
add    %ch,0x70(%ecx)
imul   $0x2f706900,%ss:0x36(%eax),%esi
imul   $0x70690036,0x76(%eax),%esi
jbe    8086478 <_IO_stdin_used+0x3bf4>
das
imul   $0x70690036,0x76(%eax),%esi
imul   $0x34706900,0x36(%eax),%esi
imul   $0x36706900,0x36(%eax),%esi
addr16 jb 80864c2 <_IO_stdin_used+0x3c3e>
add    %ah,0x72(%edi)
gs
das
imul   $0x6e610036,0x76(%eax),%esi
jns    808649a <_IO_stdin_used+0x3c16>
imul   $0x6e650036,0x76(%eax),%esi
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x6e690074,0x69(%ebp),%ebp
jbe    80864e0 <_IO_stdin_used+0x3c5c>
insb   (%dx),%es:(%edi)
imul   $0x4d494c,0x45(%eax,%eiz,1),%esp
push   $0x6d696c
imul   $0x64696c61,0x76(%esi),%ebp
and    %dl,0x4c(%esp,%edx,2)
add    %ch,0x6e(%ecx)
jbe    80864fe <_IO_stdin_used+0x3c7a>
insb   (%dx),%es:(%edi)
imul   $0x73616c43,0x54(%eax,%eiz,1),%esp
jae    80864a8 <_IO_stdin_used+0x3c24>
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8086519 <_IO_stdin_used+0x3c95>
popa
bound  %esp,0x6c(%ebp)
add    %ch,0x6e(%ecx)
jbe    8086517 <_IO_stdin_used+0x3c93>
insb   (%dx),%es:(%edi)
imul   $0x6c776f6c,0x46(%eax,%eiz,1),%esp
popa
bound  %esp,0x6c(%ebp)
add    %ch,0x6f(%esi)
je     80864e8 <_IO_stdin_used+0x3c64>
imul   $0x74697265,0x68(%esi),%ebp
add    %ch,0x6e(%ecx)
jbe    8086535 <_IO_stdin_used+0x3cb1>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ch,0x66(%edi)
and    %ah,(%edx)
imul   $0x22,0x79(%ebp),%esp
or     (%eax),%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808655a <_IO_stdin_used+0x3cd6>
and    %ch,0x66(%edi)
and    %ah,(%edx)
imul   $0xa2279,0x65(%ebx),%ebp
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086573 <_IO_stdin_used+0x3cef>
and    %ch,0x66(%edi)
and    %ah,(%edx)
outsl  %ds:(%esi),(%dx)
imul   $0x22,0x79(%ebp),%esp
or     (%eax),%al
imul   $0x306c6e74,0x36(%eax),%esi
add    %ch,0x70(%ecx)
ss
addr16 jb 808658d <_IO_stdin_used+0x3d09>
xor    %al,(%eax)
and    $0x69203a73,%eax
outsl  %ds:(%esi),(%dx)
arpl   %si,0x20(%esp,%ebp,2)
and    $0x61662078,%eax
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
addr16
gs
je     8086567 <_IO_stdin_used+0x3ce3>
je     80865be <_IO_stdin_used+0x3d3a>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,(%edx)
and    $0x66202273,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
popa
fs and %dh,%fs:0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,(%edx)
and    $0x66202273,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
add    %ah,0x6c(%ebp,%eiz,2)
gs
je     80865e7 <_IO_stdin_used+0x3d63>
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,(%edx)
and    $0x66202273,%eax
popa
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
or     (%eax),%al
fs
gs
insb   (%dx),%es:(%edi)
gs
je     8086606 <_IO_stdin_used+0x3d82>
and    %al,(%eax)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
popa
fs
fs
jb     80865ca <_IO_stdin_used+0x3d46>
and    $0x72200073,%eax
outsl  %ds:(%esi),(%dx)
jne    8086626 <_IO_stdin_used+0x3da2>
gs
jb     80865b5 <_IO_stdin_used+0x3d31>
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     8086634 <_IO_stdin_used+0x3db0>
add    %ah,(%eax)
jb     8086624 <_IO_stdin_used+0x3da0>
data16
and    %ah,0x75200064
jae    808662d <_IO_stdin_used+0x3da9>
and    %ah,%fs:0x64252f64
das
and    $0x70200064,%eax
jb     8086646 <_IO_stdin_used+0x3dc2>
bound  %esp,0x73(%ebp)
and    %ah,0x4e490075
inc    %ebx
dec    %edi
dec    %ebp
push   %eax
dec    %esp
inc    %ebp
push   %esp
inc    %ebp
and    $0x45520073,%eax
inc    %ecx
inc    %ebx
dec    %eax
inc    %ecx
inc    %edx
dec    %esp
inc    %ebp
and    $0x54530073,%eax
inc    %ecx
dec    %esp
inc    %ebp
and    $0x45440073,%eax
dec    %esp
inc    %ecx
pop    %ecx
and    $0x52500073,%eax
dec    %edi
inc    %edx
inc    %ebp
and    $0x41460073,%eax
dec    %ecx
dec    %esp
inc    %ebp
inc    %esp
and    $0x45500073,%eax
push   %edx
dec    %ebp
inc    %ecx
dec    %esi
inc    %ebp
dec    %esi
push   %esp
and    $0x6f6e0073,%eax
popa
jb     8086699 <_IO_stdin_used+0x3e15>
add    %ch,0x6e(%ecx)
arpl   %bp,0x6d(%edi)
jo     808669d <_IO_stdin_used+0x3e19>
gs
je     8086699 <_IO_stdin_used+0x3e15>
add    %ch,0x61(%esp,%ebp,2)
fs
fs
jb     808663c <_IO_stdin_used+0x3db8>
outsb  %ds:(%esi),(%dx)
jne    80866a3 <_IO_stdin_used+0x3e1f>
and    %dh,0x74(%ebx)
popa
je     80866aa <_IO_stdin_used+0x3e26>
and    %ch,0x73(%ecx)
and    %ah,0x61(%edx)
add    %ch,%fs:0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x6e(%ebp)
jne    80866c9 <_IO_stdin_used+0x3e45>
gs add %al,%fs:%gs:(%eax)
add    %al,(%eax)
push   %ebp
jae    80866c0 <_IO_stdin_used+0x3e3c>
cmp    %gs:(%bx,%si),%ah
imul   $0x6769656e,0x20(%eax),%esi
push   $0x61207b20
fs and %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x63(%eax,%eiz,1)
push   $0x65676e61
and    %bh,0x72(%eax,%eiz,1)
gs
jo     80866f3 <_IO_stdin_used+0x3e6f>
popa
arpl   %sp,0x20(%ebp)
jge    80866ad <_IO_stdin_used+0x3e29>
jnp    80866af <_IO_stdin_used+0x3e2b>
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
popa
fs
fs
jb     80866bd <_IO_stdin_used+0x3e39>
dec    %esp
dec    %esp
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x75(%esi)
and    %bh,%fs:0x20(%ebx)
jo     808671f <_IO_stdin_used+0x3e9b>
jb     8086729 <_IO_stdin_used+0x3ea5>
popa
outsb  %ds:(%esi),(%dx)
outsb  %gs:(%esi),(%dx)
je     80866e2 <_IO_stdin_used+0x3e5e>
jl     80866e4 <_IO_stdin_used+0x3e60>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
popa
jb     8086739 <_IO_stdin_used+0x3eb5>
and    %bh,0x73(%eax,%eiz,1)
je     8086730 <_IO_stdin_used+0x3eac>
insb   (%dx),%es:(%edi)
and    %bh,%gs:0x72(%eax,%eiz,1)
gs
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
jge    8086700 <_IO_stdin_used+0x3e7c>
pop    %ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,0x70(%eax,%eiz,1)
jb     8086760 <_IO_stdin_used+0x3edc>
js     808676c <_IO_stdin_used+0x3ee8>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bh,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %al,0x56(%ebp,%eax,2)
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6769656e,0x20(%eax),%esi
push   $0x68737b20
outsl  %ds:(%esi),(%dx)
ja     808679a <_IO_stdin_used+0x3f16>
data16
insb   (%dx),%es:(%edi)
jne    8086795 <_IO_stdin_used+0x3f11>
push   $0x205b207d
je     8086798 <_IO_stdin_used+0x3f14>
and    %dl,0x52(%eax)
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %al,0x56(%ebp,%eax,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x75(%esi)
and    %dl,%fs:0x54(%ebx)
inc    %ecx
push   %esp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     8086774 <_IO_stdin_used+0x3ef0>
push   %edx
push   %esp
dec    %ebp
pop    %edi
dec    %esi
inc    %ebp
push   %edi
dec    %esi
inc    %ebp
dec    %ecx
inc    %edi
dec    %eax
cmp    (%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %al,(%eax)
add    %al,0x76(%ebp,%eiz,2)
imul   $0x646e6120,0x65(%ebx),%esp
and    %ah,0x73(%ebp,%eiz,2)
je     80867ed <_IO_stdin_used+0x3f69>
outsb  %ds:(%esi),(%dx)
popa
je     80867f1 <_IO_stdin_used+0x3f6d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx)
and    %dh,%gs:0x65(%edx)
jno    8086808 <_IO_stdin_used+0x3f84>
imul   $0x72612064,0x65(%edx),%esi
addr16 jne 808680a <_IO_stdin_used+0x3f86>
outsb  %gs:(%esi),(%dx)
je     8086814 <_IO_stdin_used+0x3f90>
or     %cs:(%eax),%al
sub    (%edx),%ch
sub    (%eax),%ah
inc    %esi
insb   (%dx),%es:(%edi)
jne    808681f <_IO_stdin_used+0x3f9b>
push   $0x746f6e20
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
jo     8086823 <_IO_stdin_used+0x3f9f>
gs
je     808681f <_IO_stdin_used+0x3f9b>
and    %ah,0x61(%edx)
imul   $0x756f2067,0x6e(%ecx,%ebp,2),%ebp
je     80867e7 <_IO_stdin_used+0x3f63>
popa
data16
je     8086830 <_IO_stdin_used+0x3fac>
jb     80867ed <_IO_stdin_used+0x3f69>
and    $0x6f722064,%eax
jne    8086842 <_IO_stdin_used+0x3fbe>
fs
jae    80867e1 <_IO_stdin_used+0x3f5d>
add    %dl,0x6f(%ebx)
jb     808684e <_IO_stdin_used+0x3fca>
jns    808680a <_IO_stdin_used+0x3f86>
and    %ah,(%edx)
outsb  %ds:(%esi),(%dx)
imul   $0x74656720,%gs:0x68(%edi),%esp
and    (%eax),%ah
imul   $0x20746f6e,0x20(%ebx),%esi
imul   $0x656d656c,0x70(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
je     8086861 <_IO_stdin_used+0x3fdd>
and    %bh,%fs:(%edx)
sub    $0xa28,%eax
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8086834 <_IO_stdin_used+0x3fb0>
jne    8086884 <_IO_stdin_used+0x4000>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8086891 <_IO_stdin_used+0x400d>
jns    8086841 <_IO_stdin_used+0x3fbd>
and    0x70(%ecx),%ch
and    %ch,0x65(%esi)
imul   $0x6c656820,0x68(%edi),%esp
jo     8086852 <_IO_stdin_used+0x3fce>
or     %cs:(%eax),%al
addr16
gs
je     80868ab <_IO_stdin_used+0x4027>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    8086840 <_IO_stdin_used+0x3fbc>
and    $0x6d252d59,%eax
sub    $0x25206425,%eax
push   %esp
add    %cl,0x6f(%esi)
je     8086870 <_IO_stdin_used+0x3fec>
dec    %esi
inc    %ebp
dec    %ecx
inc    %edi
dec    %eax
push   %esp
inc    %edx
dec    %esp
cmp    (%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %ch,(%eax)
and    $0x202964,%eax
je     80868da <_IO_stdin_used+0x4056>
jb     80868d9 <_IO_stdin_used+0x4055>
jae    80868de <_IO_stdin_used+0x405a>
xor    %esp,(%eax)
and    $0x74002075,%eax
push   $0x68736572
xor    (%eax),%ah
and    $0x74002075,%eax
push   $0x68736572
xor    (%eax),%esp
and    $0x67002075,%eax
arpl   %bx,0x69(%edi)
outsb  %ds:(%esi),(%dx)
je     80868bb <_IO_stdin_used+0x4037>
and    $0x20756c6c,%eax
add    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6b00,0x20(%edi),%sp
gs
jns    808690c <_IO_stdin_used+0x4088>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
and    %ah,0x65002075
outsb  %ds:(%esi),(%dx)
je     808692b <_IO_stdin_used+0x40a7>
jns    808691a <_IO_stdin_used+0x4096>
jae    8086926 <_IO_stdin_used+0x40a2>
jp     8086924 <_IO_stdin_used+0x40a0>
and    %ah,0x65002075
outsb  %ds:(%esi),(%dx)
je     808693a <_IO_stdin_used+0x40b6>
imul   $0x20752520,0x73(%ebp),%esp
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,(%eax)
insb   (%dx),%es:(%edi)
popa
jae    8086951 <_IO_stdin_used+0x40cd>
pop    %edi
data16
insb   (%dx),%es:(%edi)
jne    8086955 <_IO_stdin_used+0x40d1>
push   $0x20732520
add    %ch,0x73(%ecx,%eiz,2)
je     808694c <_IO_stdin_used+0x40c8>
jb     8086950 <_IO_stdin_used+0x40cc>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x68002073
popa
jae    8086962 <_IO_stdin_used+0x40de>
pop    %edi
jb     808696b <_IO_stdin_used+0x40e7>
and    %ah,%fs:0x68002075
popa
jae    808696f <_IO_stdin_used+0x40eb>
pop    %edi
insl   (%dx),%es:(%edi)
popa
jae    8086977 <_IO_stdin_used+0x40f3>
and    %ah,0x20783830
add    %ch,0x61(%eax)
jae    808697f <_IO_stdin_used+0x40fb>
pop    %edi
arpl   %bp,0x61(%eax)
imul   $0x25206367,0x5f(%esi),%ebp
jne    8086944 <_IO_stdin_used+0x40c0>
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     80869a3 <_IO_stdin_used+0x411f>
pop    %edi
jno    8086999 <_IO_stdin_used+0x4115>
outsb  %gs:(%esi),(%dx)
and    %ah,0x72002075
gs
data16
arpl   %bp,0x74(%esi)
and    %ah,0x62002075
popa
jae    80869a8 <_IO_stdin_used+0x4124>
pop    %edi
jb     80869ab <_IO_stdin_used+0x4127>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
and    $0x20756c6c,%eax
add    %dh,0x65(%edx)
je     80869ca <_IO_stdin_used+0x4146>
popa
outsb  %ds:(%esi),(%dx)
jae    808697c <_IO_stdin_used+0x40f8>
and    $0x20756c6c,%eax
add    %ah,0x63(%edi)
pop    %edi
jae    80869db <_IO_stdin_used+0x4157>
popa
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x20756c6c
add    %ah,0x6c(%ebp,%eiz,2)
popa
jns    80869d6 <_IO_stdin_used+0x4152>
jo     80869eb <_IO_stdin_used+0x4167>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x20(%ebp)
and    $0x20756c6c,%eax
add    %ah,0x70(%ecx)
jo     80869e6 <_IO_stdin_used+0x4162>
jo     80869fb <_IO_stdin_used+0x4177>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    %ah,0x75002075
arpl   %sp,0x73(%ecx)
je     80869f7 <_IO_stdin_used+0x4173>
jo     8086a0c <_IO_stdin_used+0x4188>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    %ah,0x6d002075
arpl   %sp,0x73(%ecx)
je     8086a08 <_IO_stdin_used+0x4184>
jo     8086a1d <_IO_stdin_used+0x4199>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    %ah,0x61002075
outsb  %ds:(%esi),(%dx)
jns    8086a1b <_IO_stdin_used+0x4197>
popa
jae    8086a2f <_IO_stdin_used+0x41ab>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    80869e2 <_IO_stdin_used+0x415e>
and    $0x20756c6c,%eax
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     8086a46 <_IO_stdin_used+0x41c2>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    80869f4 <_IO_stdin_used+0x4170>
and    $0x20756c6c,%eax
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     8086a58 <_IO_stdin_used+0x41d4>
pop    %edi
jno    8086a57 <_IO_stdin_used+0x41d3>
gs
jne    8086a4a <_IO_stdin_used+0x41c6>
and    %ah,0x6c002075
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x74(%ebx)
imul   $0x6c6c2520,0x65(%ebp),%ebp
jne    8086a18 <_IO_stdin_used+0x4194>
add    %dh,0x74(%ebx)
popa
je     8086a71 <_IO_stdin_used+0x41ed>
and    %al,(%eax)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x20(%ebx)
and    $0x20756c6c,%eax
add    %ah,0x73(%ebp,%eiz,2)
je     8086a84 <_IO_stdin_used+0x4200>
outsl  %ds:(%esi),(%dx)
jns    8086a88 <_IO_stdin_used+0x4204>
and    %ah,0x20756c6c
add    %ch,0x61(%eax)
jae    8086a88 <_IO_stdin_used+0x4204>
pop    %edi
addr16 jb 8086a93 <_IO_stdin_used+0x420f>
ja     8086a99 <_IO_stdin_used+0x4215>
and    %ah,0x20756c6c
add    %dh,0x65(%edx)
jae    8086a90 <_IO_stdin_used+0x420c>
popaw
imul   $0x6c6c2520,0x64(%ebp,%eiz,2),%ebp
jne    8086a5d <_IO_stdin_used+0x41d9>
add    %ch,0x6f(%edi,%ebp,2)
imul   $0x73,0x70(%ebp),%esi
and    %ah,0x20756c6c
add    %ch,0x69(%eax)
je     8086ac3 <_IO_stdin_used+0x423f>
and    %ah,0x20756c6c
add    %dh,0x63(%edx)
jbe    8086aba <_IO_stdin_used+0x4236>
jo     8086acf <_IO_stdin_used+0x424b>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
pop    %edi
insl   (%dx),%es:(%edi)
arpl   %sp,0x73(%ecx)
je     8086a88 <_IO_stdin_used+0x4204>
and    $0x20756c6c,%eax
add    %dh,0x63(%edx)
jbe    8086ad1 <_IO_stdin_used+0x424d>
jo     8086ae6 <_IO_stdin_used+0x4262>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
pop    %edi
jne    8086ade <_IO_stdin_used+0x425a>
popa
jae    8086af2 <_IO_stdin_used+0x426e>
and    %ah,0x20756c6c
add    %dh,0x65(%eax)
jb     8086af2 <_IO_stdin_used+0x426e>
outsl  %ds:(%esi),(%dx)
imul   $0x725f6367,%fs:0x5f(%ebx),%esp
jne    8086b02 <_IO_stdin_used+0x427e>
jae    8086ab6 <_IO_stdin_used+0x4232>
and    $0x20756c6c,%eax
add    %ah,0x6f(%esi)
jb     8086b03 <_IO_stdin_used+0x427f>
gs
fs
pop    %edi
arpl   %bx,0x72(%bx)
jne    8086b17 <_IO_stdin_used+0x4293>
jae    8086acb <_IO_stdin_used+0x4247>
and    $0x20756c6c,%eax
add    %ah,(%edx)
inc    %esp
inc    %ebp
push   %esi
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x6f6e6b6e,0x75(%eax,%eax,1),%esp
ja     8086b37 <_IO_stdin_used+0x42b3>
add    %dh,0x72(%eax,%ebp,2)
gs
jae    8086b38 <_IO_stdin_used+0x42b4>
xor    %eax,(%eax)
and    0x72(%eax,%ebp,2),%dh
gs
jae    8086b41 <_IO_stdin_used+0x42bd>
xor    %esp,(%edx)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086b46 <_IO_stdin_used+0x42c2>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086b4a <_IO_stdin_used+0x42c6>
insb   (%dx),%es:(%edi)
imul   $0x73657268,0x74(%eax,%eax,1),%esp
push   $0x74220032
push   $0x68736572
xor    (%edx),%ah
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086b69 <_IO_stdin_used+0x42e5>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086b6d <_IO_stdin_used+0x42e9>
insb   (%dx),%es:(%edi)
imul   $0x73657268,0x74(%eax,%eax,1),%esp
push   $0x74220033
push   $0x68736572
xor    (%edx),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086b8c <_IO_stdin_used+0x4308>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086b90 <_IO_stdin_used+0x430c>
insb   (%dx),%es:(%edi)
imul   $0x6e695f63,0x67(%eax,%eax,1),%esp
je     8086b3a <_IO_stdin_used+0x42b6>
and    0x63(%edi),%ah
pop    %edi
imul   $0x61762022,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
jne    8086bad <_IO_stdin_used+0x4329>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086bb1 <_IO_stdin_used+0x432d>
insb   (%dx),%es:(%edi)
imul   $0x5f657361,0x62(%eax,%eax,1),%esp
jb     8086bc0 <_IO_stdin_used+0x433c>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
jb     8086bca <_IO_stdin_used+0x4346>
je     8086bd9 <_IO_stdin_used+0x4355>
popa
outsb  %ds:(%esi),(%dx)
jae    8086b6b <_IO_stdin_used+0x42e7>
and    0x65(%edx),%dh
je     8086be2 <_IO_stdin_used+0x435e>
popa
outsb  %ds:(%esi),(%dx)
jae    8086b96 <_IO_stdin_used+0x4312>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086bdf <_IO_stdin_used+0x435b>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086be3 <_IO_stdin_used+0x435f>
insb   (%dx),%es:(%edi)
imul   $0x74735f63,0x67(%eax,%eax,1),%esp
popa
insb   (%dx),%es:(%edi)
add    %ah,%gs:(%edx)
arpl   %bx,0x73(%bx)
je     8086bf7 <_IO_stdin_used+0x4373>
insb   (%dx),%es:(%edi)
and    %gs:(%eax),%ah
jbe    8086bfd <_IO_stdin_used+0x4379>
insb   (%dx),%es:(%edi)
jne    8086c04 <_IO_stdin_used+0x4380>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086c08 <_IO_stdin_used+0x4384>
insb   (%dx),%es:(%edi)
imul   $0x79616c65,0x64(%eax,%eax,1),%esp
pop    %edi
jo     8086c25 <_IO_stdin_used+0x43a1>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x0(%ebp)
and    0x75(%ecx),%dh
gs
jne    8086c22 <_IO_stdin_used+0x439e>
and    (%eax),%ah
jbe    8086c22 <_IO_stdin_used+0x439e>
insb   (%dx),%es:(%edi)
jne    8086c29 <_IO_stdin_used+0x43a5>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086c2d <_IO_stdin_used+0x43a9>
insb   (%dx),%es:(%edi)
imul   $0x705f7070,0x61(%eax,%eax,1),%esp
jb     8086c46 <_IO_stdin_used+0x43c2>
bound  %esp,0x73(%ebp)
add    %ah,(%edx)
popa
jo     8086c4f <_IO_stdin_used+0x43cb>
pop    %edi
jo     8086c54 <_IO_stdin_used+0x43d0>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    (%eax),%ah
jbe    8086c4b <_IO_stdin_used+0x43c7>
insb   (%dx),%es:(%edi)
jne    8086c52 <_IO_stdin_used+0x43ce>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086c56 <_IO_stdin_used+0x43d2>
insb   (%dx),%es:(%edi)
imul   $0x74736163,0x75(%eax,%eax,1),%esp
pop    %edi
jo     8086c73 <_IO_stdin_used+0x43ef>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
add    %ch,0x63(%ebp)
popa
jae    8086c7f <_IO_stdin_used+0x43fb>
pop    %edi
jo     8086c80 <_IO_stdin_used+0x43fc>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
add    %ah,0x6e(%ecx)
jns    8086c7a <_IO_stdin_used+0x43f6>
popa
jae    8086c8e <_IO_stdin_used+0x440a>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086c21 <_IO_stdin_used+0x439d>
jo     8086c95 <_IO_stdin_used+0x4411>
outsl  %ds:(%esi),(%dx)
js     8086c9f <_IO_stdin_used+0x441b>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086c2d <_IO_stdin_used+0x43a9>
jo     8086ca1 <_IO_stdin_used+0x441d>
outsl  %ds:(%esi),(%dx)
js     8086cab <_IO_stdin_used+0x4427>
pop    %edi
jno    8086caa <_IO_stdin_used+0x4426>
gs
jne    8086c9d <_IO_stdin_used+0x4419>
add    %ch,0x63(%edi,%ebp,2)
imul   $0x65,0x6d(%ecx,%ebp,2),%esi
add    %ah,(%edx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x74(%ebx)
imul   $0x61762022,0x65(%ebp),%ebp
insb   (%dx),%es:(%edi)
jne    8086cb7 <_IO_stdin_used+0x4433>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086cbb <_IO_stdin_used+0x4437>
insb   (%dx),%es:(%edi)
imul   $0x6768,0x63(%eax,%eax,1),%esp
add    %ah,(%edx)
bound  %esp,0x73(%ecx)
gs
pop    %edi
jb     8086cd1 <_IO_stdin_used+0x444d>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x22(%ebp,%eiz,2)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086cdf <_IO_stdin_used+0x445b>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086ce3 <_IO_stdin_used+0x445f>
insb   (%dx),%es:(%edi)
imul   $0x65642200,0x0(%eax,%eax,1),%esp
insb   (%dx),%es:(%edi)
popa
jns    8086cee <_IO_stdin_used+0x446a>
jo     8086d03 <_IO_stdin_used+0x447f>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x22(%ebp)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086d00 <_IO_stdin_used+0x447c>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086d04 <_IO_stdin_used+0x4480>
insb   (%dx),%es:(%edi)
imul   $0x61637522,0x0(%eax,%eax,1),%esp
jae    8086d22 <_IO_stdin_used+0x449e>
pop    %edi
jo     8086d23 <_IO_stdin_used+0x449f>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    (%eax),%ah
jbe    8086d1a <_IO_stdin_used+0x4496>
insb   (%dx),%es:(%edi)
jne    8086d21 <_IO_stdin_used+0x449d>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086d25 <_IO_stdin_used+0x44a1>
insb   (%dx),%es:(%edi)
imul   $0x7361636d,0x22(%eax,%eax,1),%esp
je     8086d2e <_IO_stdin_used+0x44aa>
jo     8086d43 <_IO_stdin_used+0x44bf>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    (%eax),%ah
jbe    8086d3a <_IO_stdin_used+0x44b6>
insb   (%dx),%es:(%edi)
jne    8086d41 <_IO_stdin_used+0x44bd>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086d45 <_IO_stdin_used+0x44c1>
insb   (%dx),%es:(%edi)
imul   $0x63796e61,0x22(%eax,%eax,1),%esp
popa
jae    8086d64 <_IO_stdin_used+0x44e0>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086d19 <_IO_stdin_used+0x4495>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086d62 <_IO_stdin_used+0x44de>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086d66 <_IO_stdin_used+0x44e2>
insb   (%dx),%es:(%edi)
imul   $0x70220000,0x0(%eax,%eax,1),%esp
jb     8086d7f <_IO_stdin_used+0x44fb>
js     8086d8b <_IO_stdin_used+0x4507>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086d3b <_IO_stdin_used+0x44b7>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8086d84 <_IO_stdin_used+0x4500>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086d88 <_IO_stdin_used+0x4504>
insb   (%dx),%es:(%edi)
imul   $0x6f727022,0x0(%eax,%eax,1),%esp
js     8086dab <_IO_stdin_used+0x4527>
pop    %edi
jno    8086daa <_IO_stdin_used+0x4526>
gs
jne    8086d9d <_IO_stdin_used+0x4519>
and    (%eax),%ah
jbe    8086d9d <_IO_stdin_used+0x4519>
insb   (%dx),%es:(%edi)
jne    8086da4 <_IO_stdin_used+0x4520>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8086da8 <_IO_stdin_used+0x4524>
insb   (%dx),%es:(%edi)
imul   $0x20746f4e,0x0(%eax,%eax,1),%esp
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8086dbc <_IO_stdin_used+0x4538>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8086dca <_IO_stdin_used+0x4546>
popa
je     8086dc9 <_IO_stdin_used+0x4545>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
addr16
gs
popa
bound  %ebp,0x20(%ebp,%eiz,2)
popa
je     8086de6 <_IO_stdin_used+0x4562>
jb     8086ddd <_IO_stdin_used+0x4559>
bound  %esi,0x74(%ebp)
gs
jae    8086d9a <_IO_stdin_used+0x4516>
jb     8086de1 <_IO_stdin_used+0x455d>
jno    8086df3 <_IO_stdin_used+0x456f>
imul   $0xa2e64,0x65(%edx),%esi
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6261746e,0x20(%eax),%esi
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x61(%bp)
insl   (%dx),%es:(%edi)
and    %cl,%gs:0x41(%esi)
dec    %ebp
inc    %ebp
and    %bl,0x20(%ebx)
fs
gs
jbe    8086dd0 <_IO_stdin_used+0x454c>
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x72(%eax,%ebp,2)
gs
jae    8086e30 <_IO_stdin_used+0x45ac>
xor    %esp,(%eax)
push   %esi
inc    %ecx
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax,%ebp,2)
gs
jae    8086e40 <_IO_stdin_used+0x45bc>
xor    (%eax),%ah
push   %esi
inc    %ecx
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax,%ebp,2)
gs
jae    8086e50 <_IO_stdin_used+0x45cc>
xor    (%eax),%esp
push   %esi
inc    %ecx
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x63(%edi)
pop    %edi
imul   $0x45534d20,0x74(%esi),%ebp
inc    %ebx
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dl,0x41(%eax)
push   %edx
dec    %ebp
push   %ebx
and    %bl,0xa(%ebp)
push   %ebp
jae    8086e78 <_IO_stdin_used+0x45f4>
cmp    %gs:(%bx,%si),%ah
imul   $0x6261746e,0x20(%eax),%esi
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8086e4a <_IO_stdin_used+0x45c6>
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %al,0x56(%ebp,%eax,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
and    %cl,%gs:0x41(%esi)
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
push   %eax
inc    %ecx
push   %edx
dec    %ebp
push   %ebx
and    %bh,(%edx)
cmp    $0x62205b20,%eax
popa
jae    8086eb8 <_IO_stdin_used+0x4634>
pop    %edi
jb     8086ebb <_IO_stdin_used+0x4637>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
dec    %ebp
push   %ebx
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
je     8086edd <_IO_stdin_used+0x4659>
popa
outsb  %ds:(%esi),(%dx)
jae    8086e8f <_IO_stdin_used+0x460b>
dec    %ebp
push   %ebx
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x63(%edi)
pop    %edi
jae    8086ef1 <_IO_stdin_used+0x466d>
popa
insb   (%dx),%es:(%edi)
and    %cl,%gs:0x53(%ebp)
inc    %ebp
inc    %ebx
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086ef8 <_IO_stdin_used+0x4674>
jo     8086f0d <_IO_stdin_used+0x4689>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x20(%ebp)
dec    %ebp
push   %ebx
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x75(%ecx)
gs
jne    8086f12 <_IO_stdin_used+0x468e>
and    %cl,0x4e(%ebp,%eax,2)
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
popa
jo     8086f32 <_IO_stdin_used+0x46ae>
pop    %edi
jo     8086f37 <_IO_stdin_used+0x46b3>
outsl  %ds:(%esi),(%dx)
bound  %esi,0x20(%ebx)
push   %esi
inc    %ecx
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x63(%ebp)
popa
jae    8086f4a <_IO_stdin_used+0x46c6>
pop    %edi
jo     8086f4b <_IO_stdin_used+0x46c7>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    %dl,0x41(%esi)
dec    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%ebp)
popa
jae    8086f5f <_IO_stdin_used+0x46db>
pop    %edi
jo     8086f60 <_IO_stdin_used+0x46dc>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x73(%ebp)
and    %dl,0x41(%esi)
dec    %esp
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
popa
outsb  %ds:(%esi),(%dx)
jns    8086f6b <_IO_stdin_used+0x46e7>
popa
jae    8086f7f <_IO_stdin_used+0x46fb>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086f32 <_IO_stdin_used+0x46ae>
dec    %ebp
push   %ebx
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     8086f99 <_IO_stdin_used+0x4715>
pop    %edi
fs
gs
insb   (%dx),%es:(%edi)
popa
jns    8086f47 <_IO_stdin_used+0x46c3>
dec    %ebp
push   %ebx
inc    %ebp
inc    %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
js     8086fae <_IO_stdin_used+0x472a>
pop    %edi
jno    8086fad <_IO_stdin_used+0x4729>
gs
jne    8086fa0 <_IO_stdin_used+0x471c>
and    %cl,0x4e(%ebp,%eax,2)
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x74(%ebx)
imul   $0x45534d20,0x65(%ebp),%ebp
inc    %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8086f90 <_IO_stdin_used+0x470c>
jne    8086fe0 <_IO_stdin_used+0x475c>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8086fed <_IO_stdin_used+0x4769>
jns    8086f9d <_IO_stdin_used+0x4719>
and    0x70(%ecx),%ch
and    %ch,0x74(%esi)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
push   $0x22706c65
or     %cs:(%eax),%al
push   %edi
jb     8087002 <_IO_stdin_used+0x477e>
outsb  %ds:(%esi),(%dx)
and    %ah,0x64(%bx,%di)
fs
jb     8087000 <_IO_stdin_used+0x477c>
jae    8087010 <_IO_stdin_used+0x478c>
and    %ch,(%eax)
and    $0x6c202973,%eax
outsb  %gs:(%esi),(%dx)
addr16 je 8087011 <_IO_stdin_used+0x478d>
cmp    (%eax),%ah
gs
js     808701e <_IO_stdin_used+0x479a>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x79622064
je     8087020 <_IO_stdin_used+0x479c>
jae    8086fc7 <_IO_stdin_used+0x4743>
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6b6e696c,0x20(%eax),%esi
and    %ah,0x64(%ecx)
and    %bl,%fs:0x6c(%ebx)
imul   $0x56454420,0x6b(%esi),%ebp
pop    %ebp
and    %bl,0x20(%ebx)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %bl,%gs:0x20(%ebp)
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x71(%eax,%edi,2)
jne    808706f <_IO_stdin_used+0x47eb>
jne    8087071 <_IO_stdin_used+0x47ed>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
and    %dl,0x41(%eax)
inc    %ebx
dec    %ebx
inc    %ebp
push   %esp
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
popa
fs
fs
jb     808709b <_IO_stdin_used+0x4817>
jae    80870ab <_IO_stdin_used+0x4827>
and    %cl,0x41(%esp,%ecx,2)
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     8087083 <_IO_stdin_used+0x47ff>
dec    %esp
dec    %esp
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
je     80870fd <_IO_stdin_used+0x4879>
and    %cl,0x54(%ebp)
push   %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
je     8087122 <_IO_stdin_used+0x489e>
jno    8087121 <_IO_stdin_used+0x489d>
gs
jne    8087114 <_IO_stdin_used+0x4890>
jae    80870d1 <_IO_stdin_used+0x484d>
push   %ecx
push   %ebp
inc    %ebp
push   %ebp
inc    %ebp
pop    %edi
inc    %ebx
dec    %edi
push   %ebp
dec    %esi
push   %esp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
jb     8087152 <_IO_stdin_used+0x48ce>
jno    8087151 <_IO_stdin_used+0x48cd>
gs
jne    8087144 <_IO_stdin_used+0x48c0>
jae    8087101 <_IO_stdin_used+0x487d>
push   %ecx
push   %ebp
inc    %ebp
push   %ebp
inc    %ebp
pop    %edi
inc    %ebx
dec    %edi
push   %ebp
dec    %esi
push   %esp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808717e <_IO_stdin_used+0x48fa>
jo     808716c <_IO_stdin_used+0x48e8>
and    %dl,0x50(%ecx,%ebx,2)
inc    %ebp
and    %bl,0x20(%ebx)
inc    %ecx
push   %edx
inc    %edi
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x6e(%ecx,%ebp,2)
imul   $0x64,(%eax),%esp
gs
insb   (%dx),%es:(%edi)
gs
je     8087192 <_IO_stdin_used+0x490e>
and    %al,0x56(%ebp,%eax,2)
and    %dh,0x70(%ecx,%edi,2)
and    %dl,%gs:0x50(%ecx,%ebx,2)
inc    %ebp
and    %bl,0x20(%ebx)
inc    %ecx
push   %edx
inc    %edi
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6b6e696c,0x20(%eax),%esi
and    %dh,0x65(%ebx)
je     808717b <_IO_stdin_used+0x48f7>
jnp    808717d <_IO_stdin_used+0x48f9>
fs
gs
jbe    8087181 <_IO_stdin_used+0x48fd>
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
and    %bh,0x67(%eax,%eiz,1)
jb     80871dc <_IO_stdin_used+0x4958>
jne    80871df <_IO_stdin_used+0x495b>
and    %al,0x56(%ebp,%eax,2)
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
and    %bh,0x20(%ebp)
pop    %ebx
and    %bh,0x20(%ebx)
jne    80871f1 <_IO_stdin_used+0x496d>
and    %bh,0x64(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
ja     80871f6 <_IO_stdin_used+0x4972>
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
push   %ebp
jae    80871f4 <_IO_stdin_used+0x4970>
cmp    %gs:(%bx,%si),%ah
imul   $0x6b6e696c,0x20(%eax),%esi
and    %dh,0x65(%ebx)
je     80871c3 <_IO_stdin_used+0x493f>
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
and    %bl,0x20(%ebx)
jnp    80871ce <_IO_stdin_used+0x494a>
jne    8087220 <_IO_stdin_used+0x499c>
and    %bh,0x64(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
ja     8087225 <_IO_stdin_used+0x49a1>
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x72(%ecx)
jo     80871f9 <_IO_stdin_used+0x4975>
jnp    80871fb <_IO_stdin_used+0x4977>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6e(%ecx,%edi,2)
popa
insl   (%dx),%es:(%edi)
imul   $0x6e6f207b,0x20(%ebx),%esp
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x75(%ebp)
insb   (%dx),%es:(%edi)
je     808729f <_IO_stdin_used+0x4a1b>
arpl   %sp,0x73(%ecx)
je     808725b <_IO_stdin_used+0x49d7>
jnp    808725d <_IO_stdin_used+0x49d9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jne    80872d3 <_IO_stdin_used+0x4a4f>
je     80872d2 <_IO_stdin_used+0x4a4e>
arpl   %sp,0x73(%ecx)
je     808728e <_IO_stdin_used+0x4a0a>
jnp    8087290 <_IO_stdin_used+0x4a0c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jo     8087309 <_IO_stdin_used+0x4a85>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
imul   $0x6f207b20,0x63(%ebx),%esi
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x61(%edx,%esi,2)
imul   $0x207b2073,0x72(%ebp,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
je     808736f <_IO_stdin_used+0x4aeb>
jno    808736e <_IO_stdin_used+0x4aea>
gs
jne    8087361 <_IO_stdin_used+0x4add>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
and    %dl,0x41(%eax)
inc    %ebx
dec    %ebx
inc    %ebp
push   %esp
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %cl,%gs:0x45(%esi)
push   %edi
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
popa
fs
fs
jb     80873b3 <_IO_stdin_used+0x4b2f>
jae    80873c3 <_IO_stdin_used+0x4b3f>
and    %cl,0x41(%esp,%ecx,2)
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     808739b <_IO_stdin_used+0x4b17>
dec    %esp
dec    %esp
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
je     8087415 <_IO_stdin_used+0x4b91>
and    %cl,0x54(%ebp)
push   %ebp
and    %bl,0xa(%ebp)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x65(%esi)
je     808742f <_IO_stdin_used+0x4bab>
jae    80873e3 <_IO_stdin_used+0x4b5f>
push   %eax
dec    %ecx
inc    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %cl,(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x65(%esi)
je     8087453 <_IO_stdin_used+0x4bcf>
jae    8087407 <_IO_stdin_used+0x4b83>
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jbe    808746d <_IO_stdin_used+0x4be9>
and    %cl,0x55(%esi)
dec    %ebp
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
arpl   %sp,(%eax)
dec    %esp
dec    %esp
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %cl,(%ecx)
or     %ecx,(%ecx)
or     %esp,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
and    %dl,0x4c(%esi)
inc    %ecx
dec    %esi
dec    %ecx
inc    %esp
and    %bl,0x20(%ebx)
jno    80874a4 <_IO_stdin_used+0x4c20>
jae    8087457 <_IO_stdin_used+0x4bd3>
push   %esi
dec    %esp
inc    %ecx
dec    %esi
sub    $0x20534f51,%eax
pop    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
or     %ecx,(%ecx)
or     %ecx,(%ecx)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jae    80874c3 <_IO_stdin_used+0x4c3f>
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
data16
arpl   %bp,0x6b(%eax)
and    %bh,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
jge    8087486 <_IO_stdin_used+0x4c02>
pop    %ebp
and    %bl,0x20(%ebp)
or     (%eax),%al
or     %ecx,(%ecx)
or     %ecx,(%ecx)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jae    80874eb <_IO_stdin_used+0x4c67>
popa
je     80874df <_IO_stdin_used+0x4c5b>
and    %bh,0x20(%ebx)
popa
jne    80874f4 <_IO_stdin_used+0x4c70>
outsl  %ds:(%esi),(%dx)
and    %bh,0x65(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
jl     80874ad <_IO_stdin_used+0x4c29>
imul   $0x7d656c62,%fs:0x61(%ebx),%esi
and    %bl,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6b6e696c,0x20(%eax),%esi
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     80874d0 <_IO_stdin_used+0x4c4c>
pop    %ebx
and    %al,0x56(%ebp,%eax,2)
dec    %ecx
inc    %ebx
inc    %ebp
and    %bh,0x67(%eax,%eiz,1)
jb     808752d <_IO_stdin_used+0x4ca9>
jne    8087530 <_IO_stdin_used+0x4cac>
and    %al,0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %bl,0x20(%ebp)
pop    %ebx
jne    808753c <_IO_stdin_used+0x4cb8>
pop    %ebp
or     (%eax),%al
add    %dl,0x50(%ecx,%ebx,2)
inc    %ebp
and    %bh,(%edx)
cmp    $0x76207b20,%eax
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %bh,0x76(%eax,%eiz,1)
gs
je     808754d <_IO_stdin_used+0x4cc9>
and    %bh,0x76(%eax,%eiz,1)
arpl   %sp,0x6e(%ecx)
and    %bh,0x64(%eax,%eiz,1)
jne    808755f <_IO_stdin_used+0x4cdb>
insl   (%dx),%es:(%edi)
jns    8087515 <_IO_stdin_used+0x4c91>
jl     8087517 <_IO_stdin_used+0x4c93>
imul   $0x6d207c20,0x62(%esi),%esp
popa
arpl   %si,0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
and    %bh,0x6d(%eax,%eiz,1)
popa
arpl   %si,0x74(%esi)
popa
jo     808752f <_IO_stdin_used+0x4cab>
jl     808751b <_IO_stdin_used+0x4c97>
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x62(%eax,%eiz,1)
jb     8087590 <_IO_stdin_used+0x4d0c>
fs and %bh,%fs:%gs:0x20(%si)
imul   $0x7c206269,0x6f(%eax),%esi
and    %ch,0x70(%ecx)
ss
je     80875a8 <_IO_stdin_used+0x4d24>
insb   (%dx),%es:(%edi)
and    %bh,0x69(%eax,%eiz,1)
jo     80875aa <_IO_stdin_used+0x4d26>
jo     8087563 <_IO_stdin_used+0x4cdf>
jl     8087565 <_IO_stdin_used+0x4ce1>
jae    80875b0 <_IO_stdin_used+0x4d2c>
je     8087569 <_IO_stdin_used+0x4ce5>
jl     808756b <_IO_stdin_used+0x4ce7>
jbe    80875c5 <_IO_stdin_used+0x4d41>
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %bh,0x0(%edx,%ecx,1)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
addr16 jb 80875c6 <_IO_stdin_used+0x4d42>
and    %bh,0x67(%eax,%eiz,1)
jb     80875cc <_IO_stdin_used+0x4d48>
je     80875ca <_IO_stdin_used+0x4d46>
jo     808758b <_IO_stdin_used+0x4d07>
jl     808758d <_IO_stdin_used+0x4d09>
imul   $0x20657267,0x36(%eax),%esi
jl     8087596 <_IO_stdin_used+0x4d12>
imul   $0x74657267,0x36(%eax),%esi
popa
jo     80875a0 <_IO_stdin_used+0x4d1c>
jl     80875a2 <_IO_stdin_used+0x4d1e>
jbe    80875f8 <_IO_stdin_used+0x4d74>
imul   $0xa7d,(%eax),%esp
add    %al,(%eax)
inc    %ebp
jb     8087601 <_IO_stdin_used+0x4d7d>
outsl  %ds:(%esi),(%dx)
jb     80875cc <_IO_stdin_used+0x4d48>
and    %ah,0x72(%ecx)
addr16 jne 8087605 <_IO_stdin_used+0x4d81>
outsb  %gs:(%esi),(%dx)
je     80875bc <_IO_stdin_used+0x4d38>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,(%edx)
and    $0x6d202273,%eax
jne    808761a <_IO_stdin_used+0x4d96>
je     80875c9 <_IO_stdin_used+0x4d45>
bound  %esp,0x20(%ebp)
and    0x6e(%edi),%ch
and    (%eax),%ah
outsl  %ds:(%esi),(%dx)
jb     80875d4 <_IO_stdin_used+0x4d50>
and    0x66(%edi),%ch
data16
and    (%eax,%eiz,1),%ch
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80875df <_IO_stdin_used+0x4d5b>
and    0xa2273,%ah
add    %al,(%eax)
add    %al,0x61(%edi)
jb     808762e <_IO_stdin_used+0x4daa>
popa
and    %ch,%gs:0x6e(%bx,%di)
jae    8087648 <_IO_stdin_used+0x4dc4>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x72(%ecx)
addr16 jne 808764d <_IO_stdin_used+0x4dc9>
outsb  %gs:(%esi),(%dx)
je     8087657 <_IO_stdin_used+0x4dd3>
and    %ah,(%edx)
and    $0x2e2e2073,%eax
and    %cs:(%esi),%ch
and    %dl,0x79(%edx,%esi,2)
and    %ah,(%edx)
imul   $0x6b6e696c,0x20(%eax),%esi
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8087623 <_IO_stdin_used+0x4d9f>
or     %cs:(%eax),%al
addr16 jb 8087676 <_IO_stdin_used+0x4df2>
jne    8087679 <_IO_stdin_used+0x4df5>
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087631 <_IO_stdin_used+0x4dad>
bound  %esp,0x20(%ebp)
jne    8087689 <_IO_stdin_used+0x4e05>
gs and %dh,%fs:%gs:0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %ah,0x72(%ebx)
gs
popa
je     808768d <_IO_stdin_used+0x4e09>
outsb  %ds:(%esi),(%dx)
and    %ah,0x65(%si)
jbe    8087694 <_IO_stdin_used+0x4e10>
arpl   %sp,0x73(%ebp)
or     %cs:(%eax),%al
add    %al,(%eax)
add    %ah,(%edx)
and    (%eax),%ah
imul   $0x20746f6e,0x20(%ebx),%esi
popa
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0x63697665,0x64(%eax,%eiz,1),%esp
and    %ch,%gs:0x64(%ecx)
outsb  %gs:(%esi),(%dx)
je     80876bc <_IO_stdin_used+0x4e38>
imul   $0xa,0x72(%ebp),%sp
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     8087680 <_IO_stdin_used+0x4dfc>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    80876cc <_IO_stdin_used+0x4e48>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     80876da <_IO_stdin_used+0x4e56>
popa
je     80876d9 <_IO_stdin_used+0x4e55>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x70(%ecx,%edi,2),%dh
and    %gs:(%eax),%ah
popa
jb     80876e5 <_IO_stdin_used+0x4e61>
jne    80876ed <_IO_stdin_used+0x4e69>
outsb  %gs:(%esi),(%dx)
je     80876a4 <_IO_stdin_used+0x4e20>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa64,0x65(%edx),%esi
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     80876b8 <_IO_stdin_used+0x4e34>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8087704 <_IO_stdin_used+0x4e80>
push   $0x20666f20
imul   $0x616d726f,0x66(%esi),%ebp
je     8087714 <_IO_stdin_used+0x4e90>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x76(%ebp,%eiz,2),%ah
and    (%eax),%ah
popa
jb     808771f <_IO_stdin_used+0x4e9b>
jne    8087727 <_IO_stdin_used+0x4ea3>
outsb  %gs:(%esi),(%dx)
je     80876de <_IO_stdin_used+0x4e5a>
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    80876fc <_IO_stdin_used+0x4e78>
jne    808774c <_IO_stdin_used+0x4ec8>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8087759 <_IO_stdin_used+0x4ed5>
jns    8087709 <_IO_stdin_used+0x4e85>
and    0x70(%ecx),%ch
and    %ch,0x6e(%ecx,%ebp,2)
imul   $0x68,(%eax),%esp
gs
insb   (%dx),%es:(%edi)
jo     8087719 <_IO_stdin_used+0x4e95>
or     %cs:(%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087721 <_IO_stdin_used+0x4e9d>
arpl   %si,0x65(%edx)
popa
je     808776c <_IO_stdin_used+0x4ee8>
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     808777f <_IO_stdin_used+0x4efb>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8087717 <_IO_stdin_used+0x4e93>
push   %ebx
dec    %ecx
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
dec    %eax
push   %edi
inc    %edx
push   %edx
dec    %edi
inc    %ecx
inc    %esp
inc    %ebx
inc    %ecx
push   %ebx
push   %esp
add    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
dec    %eax
push   %edi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
add    %cl,(%ecx)
or     %ecx,(%ecx)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6c(%ecx)
imul   $0x4d414e20,0x73(%ecx),%esp
inc    %ebp
and    %bl,0xa(%ebp)
add    %cl,(%ecx)
or     %ecx,(%ecx)
or     %esp,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x61(%edx)
je     80877bf <_IO_stdin_used+0x4f3b>
and    %dl,0x52(%eax,%ebx,2)
inc    %ecx
push   %esp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebp
and    %cl,(%edx)
add    %cl,(%ecx)
or     %ecx,(%ecx)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x61(%ebp)
jae    80877e7 <_IO_stdin_used+0x4f63>
gs
jb     8087796 <_IO_stdin_used+0x4f12>
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
and    %bl,0xa(%ebp)
add    %cl,(%ecx)
or     %ecx,(%ecx)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6f(%esi)
insl   (%dx),%es:(%edi)
popa
jae    8087801 <_IO_stdin_used+0x4f7d>
gs
jb     80877b0 <_IO_stdin_used+0x4f2c>
pop    %ebp
or     (%eax),%al
das
jne    8087809 <_IO_stdin_used+0x4f85>
jb     80877c7 <_IO_stdin_used+0x4f43>
insb   (%dx),%es:(%edi)
imul   $0x6c2f7069,0x2f(%edx),%esp
imul   $0x2e73255f,0x6b(%esi),%ebp
jae    8087818 <_IO_stdin_used+0x4f94>
add    %ah,0x696c5f73
outsb  %ds:(%esi),(%dx)
imul   $0x74,0x75(%edi),%ebx
imul   $0x6e776f,0x64(%eax,%eax,1),%ebp
je     8087836 <_IO_stdin_used+0x4fb2>
jno    8087835 <_IO_stdin_used+0x4fb1>
gs
jne    8087828 <_IO_stdin_used+0x4fa4>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
add    %dh,0x71(%eax,%edi,2)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
add    %cl,0x6e(%ecx)
jbe    8087833 <_IO_stdin_used+0x4faf>
insb   (%dx),%es:(%edi)
imul   $0x75717874,0x22(%eax,%eiz,1),%esp
gs
jne    8087843 <_IO_stdin_used+0x4fbf>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
and    (%eax),%ah
jbe    8087846 <_IO_stdin_used+0x4fc2>
insb   (%dx),%es:(%edi)
jne    808784d <_IO_stdin_used+0x4fc9>
or     (%eax),%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    808784f <_IO_stdin_used+0x4fcb>
insb   (%dx),%es:(%edi)
imul   $0x2275746d,0x22(%eax,%eiz,1),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8087862 <_IO_stdin_used+0x4fde>
or     (%eax),%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    8087864 <_IO_stdin_used+0x4fe0>
insb   (%dx),%es:(%edi)
imul   $0x6e74656e,0x22(%eax,%eiz,1),%esp
jae    8087830 <_IO_stdin_used+0x4fac>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8087879 <_IO_stdin_used+0x4ff5>
or     (%eax),%al
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jne    8087888 <_IO_stdin_used+0x5004>
je     8087887 <_IO_stdin_used+0x5003>
arpl   %sp,0x73(%ecx)
je     8087823 <_IO_stdin_used+0x4f9f>
jo     8087897 <_IO_stdin_used+0x5013>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
imul   $0x61727400,0x63(%ebx),%esi
imul   $0x6e490073,0x72(%ebp,%eiz,2),%ebp
jbe    8087899 <_IO_stdin_used+0x5015>
insb   (%dx),%es:(%edi)
imul   $0x20226676,0x22(%eax,%eiz,1),%esp
jbe    80878a4 <_IO_stdin_used+0x5020>
insb   (%dx),%es:(%edi)
jne    80878ab <_IO_stdin_used+0x5027>
or     (%eax),%al
insl   (%dx),%es:(%edi)
popa
arpl   %ax,(%eax)
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    80878b1 <_IO_stdin_used+0x502d>
insb   (%dx),%es:(%edi)
imul   $0x6e616c76,0x22(%eax,%eiz,1),%esp
and    (%eax),%ah
jbe    80878be <_IO_stdin_used+0x503a>
insb   (%dx),%es:(%edi)
jne    80878c5 <_IO_stdin_used+0x5041>
or     (%eax),%al
jno    80878d3 <_IO_stdin_used+0x504f>
jae    8087866 <_IO_stdin_used+0x4fe2>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    80878cb <_IO_stdin_used+0x5047>
insb   (%dx),%es:(%edi)
imul   $0x22736f71,0x22(%eax,%eiz,1),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80878de <_IO_stdin_used+0x505a>
or     (%eax),%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    80878e0 <_IO_stdin_used+0x505c>
insb   (%dx),%es:(%edi)
imul   $0x65746172,0x22(%eax,%eiz,1),%esp
and    (%eax),%ah
jbe    80878ed <_IO_stdin_used+0x5069>
insb   (%dx),%es:(%edi)
jne    80878f4 <_IO_stdin_used+0x5070>
or     (%eax),%al
jae    8087903 <_IO_stdin_used+0x507f>
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
data16
arpl   %bp,0x6b(%eax)
add    %cl,0x6e(%ecx)
jbe    80878ff <_IO_stdin_used+0x507b>
insb   (%dx),%es:(%edi)
imul   $0x6f6f7073,0x22(%eax,%eiz,1),%esp
data16
arpl   %bp,0x6b(%eax)
and    (%eax),%ah
jbe    8087910 <_IO_stdin_used+0x508c>
insb   (%dx),%es:(%edi)
jne    8087917 <_IO_stdin_used+0x5093>
or     (%eax),%al
jae    808792a <_IO_stdin_used+0x50a6>
popa
je     808791e <_IO_stdin_used+0x509a>
add    %cl,0x6e(%ecx)
jbe    808791f <_IO_stdin_used+0x509b>
insb   (%dx),%es:(%edi)
imul   $0x74617473,0x22(%eax,%eiz,1),%esp
and    %gs:(%eax),%ah
jbe    808792d <_IO_stdin_used+0x50a9>
insb   (%dx),%es:(%edi)
jne    8087934 <_IO_stdin_used+0x50b0>
or     (%eax),%al
inc    %esp
gs
jbe    808793e <_IO_stdin_used+0x50ba>
arpl   %sp,0x20(%ebp)
outsl  %fs:(%esi),(%dx)
gs
jae    80878fd <_IO_stdin_used+0x5079>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087901 <_IO_stdin_used+0x507d>
gs
js     808794d <_IO_stdin_used+0x50c9>
jae    808795a <_IO_stdin_used+0x50d6>
or     (%eax),%al
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
jae    8087962 <_IO_stdin_used+0x50de>
gs
jb     80878f1 <_IO_stdin_used+0x506d>
popa
insb   (%dx),%es:(%edi)
imul   $0x726f6400,0x73(%ecx),%esp
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
je     80878ff <_IO_stdin_used+0x507b>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    8087964 <_IO_stdin_used+0x50e0>
insb   (%dx),%es:(%edi)
imul   $0x73726570,0x6f(%eax,%eiz,1),%esp
je     808796f <_IO_stdin_used+0x50eb>
je     8087975 <_IO_stdin_used+0x50f1>
or     (%eax),%al
outsb  %ds:(%esi),(%dx)
jne    8087982 <_IO_stdin_used+0x50fe>
je     808798f <_IO_stdin_used+0x510b>
jno    808798e <_IO_stdin_used+0x510a>
gs
jne    8087981 <_IO_stdin_used+0x50fd>
jae    808791e <_IO_stdin_used+0x509a>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    8087983 <_IO_stdin_used+0x50ff>
insb   (%dx),%es:(%edi)
imul   $0x746d756e,0x22(%eax,%eiz,1),%esp
js     808799e <_IO_stdin_used+0x511a>
jne    8087994 <_IO_stdin_used+0x5110>
jne    8087996 <_IO_stdin_used+0x5112>
jae    8087955 <_IO_stdin_used+0x50d1>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808799e <_IO_stdin_used+0x511a>
or     (%eax),%al
outsb  %ds:(%esi),(%dx)
jne    80879ab <_IO_stdin_used+0x5127>
jb     80879b8 <_IO_stdin_used+0x5134>
jno    80879b7 <_IO_stdin_used+0x5133>
gs
jne    80879aa <_IO_stdin_used+0x5126>
jae    8087947 <_IO_stdin_used+0x50c3>
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    80879ac <_IO_stdin_used+0x5128>
insb   (%dx),%es:(%edi)
imul   $0x726d756e,0x22(%eax,%eiz,1),%esp
js     80879c7 <_IO_stdin_used+0x5143>
jne    80879bd <_IO_stdin_used+0x5139>
jne    80879bf <_IO_stdin_used+0x513b>
jae    808797e <_IO_stdin_used+0x50fa>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80879c7 <_IO_stdin_used+0x5143>
or     (%eax),%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    80879c9 <_IO_stdin_used+0x5145>
insb   (%dx),%es:(%edi)
imul   $0x206b6e69,0x6c(%eax,%eiz,1),%esp
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs or  %fs:%gs:(%eax),%al
and    0x61(%esi),%ch
insl   (%dx),%es:(%edi)
and    %gs:(%eax),%ah
je     80879ef <_IO_stdin_used+0x516b>
outsl  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi,%ebp,2)
or     (%bx,%si),%al
jae    80879f9 <_IO_stdin_used+0x5175>
arpl   %bp,0x65(%ebx)
je     80879b7 <_IO_stdin_used+0x5133>
push   %eax
inc    %esi
pop    %edi
push   %eax
inc    %ecx
inc    %ebx
dec    %ebx
inc    %ebp
push   %esp
sub    %eax,(%eax)
push   %ebx
dec    %ecx
dec    %edi
inc    %ebx
inc    %edi
dec    %ecx
inc    %esi
dec    %ecx
dec    %esi
inc    %esp
inc    %ebp
pop    %eax
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
add    %dl,%fs:0x49(%ebx)
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
add    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
pop    %eax
push   %ecx
dec    %esp
inc    %ebp
dec    %esi
add    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
dec    %ebp
push   %esp
push   %ebp
add    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
inc    %edi
dec    %ecx
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
push   %ebx
add    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
push   %ebx
dec    %ecx
inc    %esi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
push   %ebx
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6464616d,0x20(%eax),%esi
jb     8087a1c <_IO_stdin_used+0x5198>
pop    %ebx
and    %ah,0x64(%ecx)
and    %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bl,0x20(%ebp)
dec    %ebp
push   %ebp
dec    %esp
push   %esp
dec    %ecx
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x61(%ebp)
fs
fs
jb     8087a50 <_IO_stdin_used+0x51cc>
jae    8087a9a <_IO_stdin_used+0x5216>
outsl  %ds:(%esi),(%dx)
ja     8087a55 <_IO_stdin_used+0x51d1>
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebp
jb     8087abd <_IO_stdin_used+0x5239>
outsl  %ds:(%esi),(%dx)
jb     8087a88 <_IO_stdin_used+0x5204>
and    %ah,(%edx)
and    $0x69202273,%eax
jae    8087a77 <_IO_stdin_used+0x51f3>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087a7b <_IO_stdin_used+0x51f7>
popa
and    %ch,0x67(%ebp,%eiz,2)
popa
insb   (%dx),%es:(%edi)
and    %ch,0x20(%esp,%ebp,2)
popa
fs
fs
jb     8087ad0 <_IO_stdin_used+0x524c>
jae    8087ae0 <_IO_stdin_used+0x525c>
or     %cs:(%eax),%al
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8087a94 <_IO_stdin_used+0x5210>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8087ae0 <_IO_stdin_used+0x525c>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8087aee <_IO_stdin_used+0x526a>
popa
je     8087aed <_IO_stdin_used+0x5269>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    0x76(%ebp,%eiz,2),%ah
and    (%eax),%ah
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8087acc <_IO_stdin_used+0x5248>
jne    8087b1c <_IO_stdin_used+0x5298>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8087b29 <_IO_stdin_used+0x52a5>
jns    8087ad9 <_IO_stdin_used+0x5255>
and    0x70(%ecx),%ch
and    %ch,0x61(%ebp)
fs
fs
jb     8087ae3 <_IO_stdin_used+0x525f>
push   $0x22706c65
or     %cs:(%eax),%al
insb   (%dx),%es:(%edi)
imul   $0x73252020,0x6b(%esi),%ebp
add    %ch,0x6e(%ecx)
gs
je     8087af9 <_IO_stdin_used+0x5275>
and    %al,(%eax)
das
jo     8087b50 <_IO_stdin_used+0x52cc>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8087b14 <_IO_stdin_used+0x5290>
imul   $0x30250070,0x6d(%edi),%esp
cmp    %bh,0x25(%eax)
add    %al,%fs:0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087b18 <_IO_stdin_used+0x5294>
arpl   %si,0x65(%edx)
popa
je     8087b63 <_IO_stdin_used+0x52df>
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     8087b06 <_IO_stdin_used+0x5282>
imul   $0x2f006c74,0x63(%edi),%ebp
jo     8087b81 <_IO_stdin_used+0x52fd>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8087b45 <_IO_stdin_used+0x52c1>
imul   $0x25003670,0x6d(%edi),%esp
fs
and    $0x25732573,%eax
add    %ch,%fs:(%edi)
jo     8087b9a <_IO_stdin_used+0x5316>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
outsb  %ds:(%esi),(%dx)
gs
je     8087b5e <_IO_stdin_used+0x52da>
fs
gs
jbe    8087b92 <_IO_stdin_used+0x530e>
insl   (%dx),%es:(%edi)
arpl   %sp,0x73(%ecx)
je     8087b39 <_IO_stdin_used+0x52b5>
and    $0x25732564,%eax
fs
and    $0x732564,%eax
jae    8087bba <_IO_stdin_used+0x5336>
popa
je     8087bb2 <_IO_stdin_used+0x532e>
arpl   %ax,(%eax)
and    $0x25093a64,%eax
jae    8087b77 <_IO_stdin_used+0x52f3>
jae    8087b54 <_IO_stdin_used+0x52d0>
and    $0x25093a64,%eax
jae    8087b65 <_IO_stdin_used+0x52e1>
add    %bl,0x4d(%ebx)
push   %edx
dec    %edi
push   %ebp
push   %esp
inc    %ebp
pop    %ebp
add    %bl,0x52(%ebx)
dec    %edi
push   %ebp
push   %esp
inc    %ebp
pop    %ebp
add    %bl,0x4c(%ebx)
dec    %ecx
dec    %esi
dec    %ebx
pop    %ebp
add    %bl,0x41(%ebx)
inc    %esp
inc    %esp
push   %edx
pop    %ebp
add    %bl,0x41(%ebx)
inc    %esp
inc    %esp
push   %edx
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
pop    %ebp
add    %bl,0x4e(%ebx)
inc    %ebp
dec    %ecx
inc    %edi
dec    %eax
pop    %ebp
add    %bl,0x50(%ebx)
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
pop    %ebp
add    %bl,0x52(%ebx)
push   %ebp
dec    %esp
inc    %ebp
pop    %ebp
add    %bl,0x4e(%ebx)
inc    %ebp
push   %esp
inc    %ebx
dec    %edi
dec    %esi
inc    %esi
pop    %ebp
add    %dl,0x6d(%ecx,%ebp,2)
gs
jae    8087c23 <_IO_stdin_used+0x539f>
popa
insl   (%dx),%es:(%edi)
jo     8087bed <_IO_stdin_used+0x5369>
and    %ah,0x6c252073
jne    8087bdb <_IO_stdin_used+0x5357>
jne    8087c30 <_IO_stdin_used+0x53ac>
or     (%eax),%al
imul   $0x656e,0x0(%ebp,%eiz,2),%bp
imul   $0x4c494600,0x68(%edi),%esp
inc    %ebp
and    %bh,(%edx)
cmp    $0x6c696620,%eax
and    %al,%gs:0x49(%esi)
dec    %esp
inc    %ebp
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
or     (%eax),%al
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8087c08 <_IO_stdin_used+0x5384>
outsw  %ds:(%esi),(%dx)
jo     8087c51 <_IO_stdin_used+0x53cd>
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%ebp)
jae    8087c6f <_IO_stdin_used+0x53eb>
popa
cmp    %gs:(%bx,%si),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    8087c78 <_IO_stdin_used+0x53f4>
cmp    %gs:(%bx,%si),%ah
imul   $0x696e6f6d,0x20(%eax),%esi
je     8087c93 <_IO_stdin_used+0x540f>
jb     8087c46 <_IO_stdin_used+0x53c2>
pop    %ebx
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %bh,0x4c(%eax,%eiz,1)
dec    %ecx
push   %ebx
push   %esp
outsl  %ds:(%esi),(%dx)
dec    %di
inc    %edx
dec    %edx
inc    %ebp
inc    %ebx
push   %esp
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x62(%ecx,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %cl,0x53(%ecx,%ecx,2)
push   %esp
outsl  %ds:(%esi),(%dx)
dec    %di
inc    %edx
dec    %edx
inc    %ebp
inc    %ebx
push   %esp
push   %ebx
and    %bh,(%edx)
cmp    $0x6e696c20,%eax
imul   $0x7c,(%eax),%esp
and    %ah,0x64(%ecx)
fs
jb     8087cd6 <_IO_stdin_used+0x5452>
jae    8087ce6 <_IO_stdin_used+0x5462>
and    %bh,0x72(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
jne    8087cee <_IO_stdin_used+0x546a>
and    %bh,%gs:0x6d(%eax,%eiz,1)
jb     8087cf0 <_IO_stdin_used+0x546c>
jne    8087cf7 <_IO_stdin_used+0x5473>
and    %bh,%gs:0x70(%eax,%eiz,1)
jb     8087cef <_IO_stdin_used+0x546b>
imul   $0xa7c,0x20(%eax),%di
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x65(%esi)
imul   $0x6e207c20,0x68(%edi),%esp
gs
je     8087d14 <_IO_stdin_used+0x5490>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
jb     8087d22 <_IO_stdin_used+0x549e>
jne    8087d2a <_IO_stdin_used+0x54a6>
outsb  %gs:(%esi),(%dx)
je     8087ce1 <_IO_stdin_used+0x545d>
and    0x69202273,%ah
jae    8087ce9 <_IO_stdin_used+0x5465>
jne    8087d39 <_IO_stdin_used+0x54b5>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8087d46 <_IO_stdin_used+0x54c2>
jns    8087cf6 <_IO_stdin_used+0x5472>
and    0x70(%ecx),%ch
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
imul   $0x6c656820,0x72(%edi,%ebp,2),%esi
jo     8087d09 <_IO_stdin_used+0x5485>
or     %cs:(%eax),%al
add    %al,(%eax)
push   %ebp
jae    8087d50 <_IO_stdin_used+0x54cc>
cmp    %gs:(%bx,%si),%ah
imul   $0x756f726d,0x20(%eax),%esi
je     8087d61 <_IO_stdin_used+0x54dd>
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     8087d22 <_IO_stdin_used+0x549e>
pop    %ebx
and    %bl,0x20(%ebx)
je     8087d77 <_IO_stdin_used+0x54f3>
and    %bl,0x20(%ebp)
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %dl,0x52(%eax)
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x69(%ecx)
data16
and    %al,0x56(%ebp,%eax,2)
dec    %ecx
inc    %ebx
inc    %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
je     8087daf <_IO_stdin_used+0x552b>
bound  %ebp,0x20(%ebp,%eiz,2)
push   %esp
inc    %ecx
inc    %edx
dec    %esp
inc    %ebp
pop    %edi
dec    %ecx
inc    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     8087d84 <_IO_stdin_used+0x5500>
popa
and    %ch,0x75(%ebp)
insb   (%dx),%es:(%edi)
je     8087dd4 <_IO_stdin_used+0x5550>
arpl   %sp,0x73(%ecx)
je     8087d90 <_IO_stdin_used+0x550c>
jb     8087de1 <_IO_stdin_used+0x555d>
jne    8087de8 <_IO_stdin_used+0x5564>
cmp    %gs:(%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8087dac <_IO_stdin_used+0x5528>
popa
and    %ch,0x75(%ebp)
insb   (%dx),%es:(%edi)
je     8087dfc <_IO_stdin_used+0x5578>
arpl   %sp,0x73(%ecx)
je     8087db8 <_IO_stdin_used+0x5534>
jb     8087e09 <_IO_stdin_used+0x5585>
jne    8087e10 <_IO_stdin_used+0x558c>
and    %ch,%gs:(%eax)
je     8087e1a <_IO_stdin_used+0x5596>
jo     8087e08 <_IO_stdin_used+0x5584>
cmp    (%eax),%ah
and    $0xa2973,%eax
add    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8087ddc <_IO_stdin_used+0x5558>
jne    8087e2c <_IO_stdin_used+0x55a8>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8087e39 <_IO_stdin_used+0x55b5>
jns    8087de9 <_IO_stdin_used+0x5565>
and    0x70(%ecx),%ch
and    %ch,0x72(%ebp)
outsl  %ds:(%esi),(%dx)
jne    8087e46 <_IO_stdin_used+0x55c2>
and    %ch,%gs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8087dfb <_IO_stdin_used+0x5577>
or     %cs:(%eax),%al
sub    %ah,0x202c73
jne    8087e52 <_IO_stdin_used+0x55ce>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    %esp,(%eax)
add    %ah,0x7332332d
and    %cl,0x69(%ecx)
data16
cmp    (%eax),%ah
add    %ah,0x7330312d
and    %al,(%eax)
jne    8087e6f <_IO_stdin_used+0x55eb>
jb     8087e68 <_IO_stdin_used+0x55e4>
jae    8087e74 <_IO_stdin_used+0x55f0>
insb   (%dx),%es:(%edi)
jbe    8087e6d <_IO_stdin_used+0x55e9>
and    %al,%fs:(%eax)
sub    %dh,0x6c(%esp,%esi,2)
and    %ah,0x202964
and    $0x25202073,%eax
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jne    8087e3e <_IO_stdin_used+0x55ba>
jo     8087e81 <_IO_stdin_used+0x55fd>
arpl   %bp,0x65(%ebx)
je     8087e98 <_IO_stdin_used+0x5614>
sub    $0x20,%al
and    $0x20756c6c,%eax
bound  %edi,0x74(%ecx)
gs
jae    8087e32 <_IO_stdin_used+0x55ae>
sub    $0x20,%al
and    $0x20756c6c,%eax
popa
jb     8087eae <_IO_stdin_used+0x562a>
imul   $0x6e6f2064,0x65(%esi),%esi
and    %dh,0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x69(%bx,%di)
data16
add    %cl,%cs:0x69(%edi)
data16
jae    8087e8e <_IO_stdin_used+0x560a>
and    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8087e7a <_IO_stdin_used+0x55f6>
popa
and    %dh,0x72(%eax)
imul   $0x2520,%gs:0x3a(%eax),%di
xor    %bh,(%eax)
js     8087e89 <_IO_stdin_used+0x5605>
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %dh,0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x44(%bp)
and    %dh,0x70(%ecx,%edi,2)
and    %ah,%gs:0x70000a64
jb     8087eee <_IO_stdin_used+0x566a>
imul   $0x6100,0x20(%eax),%di
jne    8087f05 <_IO_stdin_used+0x5681>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%edi)
data16
and    %al,(%eax)
jbe    8087efb <_IO_stdin_used+0x5677>
insb   (%dx),%es:(%edi)
imul   $0x70002075,0x25(%eax,%eiz,1),%esp
jb     8087f0a <_IO_stdin_used+0x5686>
data16
gs
jb     8087f1b <_IO_stdin_used+0x5697>
gs and %ah,%fs:%gs:0x69002075
outsb  %ds:(%esi),(%dx)
arpl   %bp,0x72(%edi)
jb     8087f1c <_IO_stdin_used+0x5698>
arpl   %si,0x70(%eax,%eiz,1)
jb     8087f2c <_IO_stdin_used+0x56a8>
je     8087f2e <_IO_stdin_used+0x56aa>
arpl   %bp,0x6c(%edi)
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0xa642520,0x3a(%ecx,%edi,2),%ebp
add    %al,(%eax)
push   %ebp
jae    8087f34 <_IO_stdin_used+0x56b0>
cmp    %gs:(%bx,%si),%ah
imul   $0x746e7574,0x20(%eax),%esi
popa
jo     8087f01 <_IO_stdin_used+0x567d>
jnp    8087f03 <_IO_stdin_used+0x567f>
popa
fs and %bh,%fs:0x64(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x48(%eax)
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0x20(%ebp)
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %bh,%fs:%gs:0x20(%ebx)
je     8087f8e <_IO_stdin_used+0x570a>
outsb  %ds:(%esi),(%dx)
and    %bh,0x74(%eax,%eiz,1)
popa
jo     8087f41 <_IO_stdin_used+0x56bd>
jge    8087f43 <_IO_stdin_used+0x56bf>
pop    %ebp
and    %bl,0x20(%ebx)
jne    8087f9c <_IO_stdin_used+0x5718>
gs
jb     8087f4c <_IO_stdin_used+0x56c8>
push   %ebp
push   %ebx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    8087faa <_IO_stdin_used+0x5726>
and    %al,0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
pop    %edi
jno    8087fcb <_IO_stdin_used+0x5747>
gs
jne    8087fbe <_IO_stdin_used+0x573a>
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x69(%eax)
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x6e(%esi)
gs
je     8087fc9 <_IO_stdin_used+0x5745>
push   $0x5d207264
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
jne    8087fe1 <_IO_stdin_used+0x575d>
je     8087fe0 <_IO_stdin_used+0x575c>
pop    %edi
jno    8087fef <_IO_stdin_used+0x576b>
gs
jne    8087fe2 <_IO_stdin_used+0x575e>
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %edi
push   $0x3a657265
and    %dl,0x53(%ebp)
inc    %ebp
push   %edx
and    %ah,(%eax)
cmp    0x53207b20,%bh
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x52(%edi)
dec    %edi
push   %ebp
push   %eax
and    %bh,(%edx)
cmp    $0x53207b20,%eax
push   %esp
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
pop    %ecx
outsl  %ds:(%esi),(%dx)
jne    8087ff8 <_IO_stdin_used+0x5774>
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    8088054 <_IO_stdin_used+0x57d0>
arpl   %bp,%gs:0x66(%ecx)
jns    808800a <_IO_stdin_used+0x5786>
popa
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs or  %fs:%gs:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808802c <_IO_stdin_used+0x57a8>
jne    808807c <_IO_stdin_used+0x57f8>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8088089 <_IO_stdin_used+0x5805>
jns    8088039 <_IO_stdin_used+0x57b5>
and    0x70(%ecx),%ch
and    %dh,0x6e(%ebp,%esi,2)
je     8088083 <_IO_stdin_used+0x57ff>
jo     8088044 <_IO_stdin_used+0x57c0>
push   $0x22706c65
or     %cs:(%eax),%al
jne    80880a1 <_IO_stdin_used+0x581d>
gs
jb     8088031 <_IO_stdin_used+0x57ad>
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x73(%ebp)
gs
jb     808805e <_IO_stdin_used+0x57da>
and    0xa2273,%ah
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    80880c1 <_IO_stdin_used+0x583d>
and    %ah,(%edx)
and    $0xa2273,%eax
insl   (%dx),%es:(%edi)
jne    80880c7 <_IO_stdin_used+0x5843>
je     80880c6 <_IO_stdin_used+0x5842>
pop    %edi
jno    80880d5 <_IO_stdin_used+0x5851>
gs
jne    80880c8 <_IO_stdin_used+0x5844>
add    %ch,(%edi)
jae    80880e0 <_IO_stdin_used+0x585c>
jae    8088098 <_IO_stdin_used+0x5814>
arpl   %bp,0x73(%ecx,%eiz,2)
jae    808809e <_IO_stdin_used+0x581a>
outsb  %ds:(%esi),(%dx)
gs
je     80880a2 <_IO_stdin_used+0x581e>
and    $0x73252f73,%eax
add    %dh,0x6e(%ebp,%esi,2)
pop    %edi
data16
insb   (%dx),%es:(%edi)
popa
addr16 jae 8088083 <_IO_stdin_used+0x57ff>
outsl  %ds:(%esi),(%dx)
jo     80880eb <_IO_stdin_used+0x5867>
outsb  %ds:(%esi),(%dx)
and    %ah,0x25203a73
jae    8088099 <_IO_stdin_used+0x5815>
add    %dh,0x65(%edx)
popa
and    %ah,%fs:0x25203a73
jae    808809c <_IO_stdin_used+0x5818>
inc    %esi
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     8088109 <_IO_stdin_used+0x5885>
jb     808811d <_IO_stdin_used+0x5899>
and    %ah,%gs:0x2f000a73
jae    808812c <_IO_stdin_used+0x58a8>
jae    80880e4 <_IO_stdin_used+0x5860>
arpl   %bp,0x73(%ecx,%eiz,2)
jae    80880ea <_IO_stdin_used+0x5866>
outsb  %ds:(%esi),(%dx)
gs
je     80880bf <_IO_stdin_used+0x583b>
outsl  %ds:(%esi),(%dx)
jo     8088127 <_IO_stdin_used+0x58a3>
outsb  %ds:(%esi),(%dx)
imul   $0x656e776f,%fs:0x0(%edx),%esi
jb     80880cd <_IO_stdin_used+0x5849>
and    $0x20003a73,%eax
je     8088149 <_IO_stdin_used+0x58c5>
outsb  %ds:(%esi),(%dx)
add    %ah,(%eax)
je     808813a <_IO_stdin_used+0x58b6>
jo     80880db <_IO_stdin_used+0x5857>
and    %dh,0x69(%eax)
add    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
pop    %edi
jno    808815b <_IO_stdin_used+0x58d7>
gs
jne    808814e <_IO_stdin_used+0x58ca>
add    %ah,(%eax)
jbe    808815b <_IO_stdin_used+0x58d7>
gs
je     808814f <_IO_stdin_used+0x58cb>
push   $0x20007264
push   %ebp
dec    %esi
dec    %ebx
dec    %esi
dec    %edi
push   %edi
dec    %esi
pop    %edi
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
push   %ebx
cmp    0x2000786c,%ah
jne    808817d <_IO_stdin_used+0x58f9>
gs
jb     808812d <_IO_stdin_used+0x58a9>
and    $0x2000646c,%eax
addr16 jb 8088184 <_IO_stdin_used+0x5900>
jne    8088187 <_IO_stdin_used+0x5903>
and    %ah,0x2f00646c
fs
gs
jbe    8088150 <_IO_stdin_used+0x58cc>
outsb  %ds:(%esi),(%dx)
gs
je     8088154 <_IO_stdin_used+0x58d0>
je     808819c <_IO_stdin_used+0x5918>
outsb  %ds:(%esi),(%dx)
add    %ch,0x6f(%ecx)
arpl   %si,0x28(%esp,%ebp,2)
push   %esp
push   %ebp
dec    %esi
push   %ebx
inc    %ebp
push   %esp
dec    %ecx
inc    %esi
inc    %esi
sub    %eax,(%eax)
imul   $0x54286c74,0x63(%edi),%ebp
push   %ebp
dec    %esi
push   %ebx
inc    %ebp
push   %esp
dec    %edi
push   %edi
dec    %esi
inc    %ebp
push   %edx
sub    %eax,(%eax)
imul   $0x54286c74,0x63(%edi),%ebp
push   %ebp
dec    %esi
push   %ebx
inc    %ebp
push   %esp
inc    %edi
push   %edx
dec    %edi
push   %ebp
push   %eax
sub    %eax,(%eax)
imul   $0x54286c74,0x63(%edi),%ebp
push   %ebp
dec    %esi
push   %ebx
inc    %ebp
push   %esp
push   %eax
inc    %ebp
push   %edx
push   %ebx
dec    %ecx
push   %ebx
push   %esp
sub    %eax,(%eax)
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x656b6f74,0x20(%eax),%esi
outsb  %ds:(%esi),(%dx)
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x73207c20,0x74(%ebx),%esi
gs
je     80881b5 <_IO_stdin_used+0x5931>
jl     80881b7 <_IO_stdin_used+0x5933>
addr16
gs
je     80881bb <_IO_stdin_used+0x5937>
pop    %ebp
and    %bl,0x20(%ebx)
push   %esp
dec    %edi
dec    %ebx
inc    %ebp
dec    %esi
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %al,0x56(%ebp,%eax,2)
and    %bl,0xa(%ebp)
add    %dl,0x65(%ebx)
gs
insl   (%dx),%es:(%edi)
jae    80881da <_IO_stdin_used+0x5956>
je     8088224 <_IO_stdin_used+0x59a0>
gs
jb     8088224 <_IO_stdin_used+0x59a0>
daa
jae    80881e2 <_IO_stdin_used+0x595e>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %dh,0x75(%ebx)
jo     8088239 <_IO_stdin_used+0x59b5>
outsl  %ds:(%esi),(%dx)
jb     8088240 <_IO_stdin_used+0x59bc>
and    %ah,0x6f(%esi)
jb     80881f1 <_IO_stdin_used+0x596d>
dec    %ecx
push   %eax
jbe    808820b <_IO_stdin_used+0x5987>
and    %dh,0x6b(%edi,%ebp,2)
outsb  %gs:(%esi),(%dx)
and    %ecx,(%edx)
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     8088204 <_IO_stdin_used+0x5980>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8088250 <_IO_stdin_used+0x59cc>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     808825e <_IO_stdin_used+0x59da>
popa
je     808825d <_IO_stdin_used+0x59d9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
je     8088269 <_IO_stdin_used+0x59e5>
imul   $0x20,0x6e(%ebp),%esp
imul   $0x75716572,0x20(%ebx),%esi
imul   $0xa2e64,0x65(%edx),%esi
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808823c <_IO_stdin_used+0x59b8>
jne    808828c <_IO_stdin_used+0x5a08>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8088299 <_IO_stdin_used+0x5a15>
jns    8088249 <_IO_stdin_used+0x59c5>
and    0x70(%ecx),%ch
and    %dh,0x6b(%edi,%ebp,2)
outsb  %gs:(%esi),(%dx)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     808825a <_IO_stdin_used+0x59d6>
or     %cs:(%eax),%al
je     80882ac <_IO_stdin_used+0x5a28>
imul   $0x20,0x6e(%ebp),%esp
and    $0x2073,%eax
add    %al,(%eax)
push   %ebp
jae    80882ac <_IO_stdin_used+0x5a28>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x454a424f,%eax
inc    %ebx
push   %esp
and    %bh,0x20(%ebx)
inc    %ebx
dec    %edi
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
and    %bh,0x68(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
jo     8088294 <_IO_stdin_used+0x5a10>
jge    8088280 <_IO_stdin_used+0x59fc>
ja     80882e0 <_IO_stdin_used+0x5a5c>
gs
jb     80882e0 <_IO_stdin_used+0x5a5c>
and    %ah,(%eax)
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x454a424f,%eax
inc    %ebx
push   %esp
and    %bh,(%edx)
cmp    $0x61747320,%eax
je     80882f6 <_IO_stdin_used+0x5a72>
and    %bh,0x70(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x6d207c20,0x79(%ebx),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0xa,0x72(%edi,%ebp,2),%esi
and    %ah,(%eax)
jb     8088311 <_IO_stdin_used+0x5a8d>
jo     808831a <_IO_stdin_used+0x5a96>
popa
jns    80882de <_IO_stdin_used+0x5a5a>
ja     808831c <_IO_stdin_used+0x5a98>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     80882d8 <_IO_stdin_used+0x5a54>
and    $0x65722075,%eax
jo     808832b <_IO_stdin_used+0x5aa7>
popa
jns    80882e2 <_IO_stdin_used+0x5a5e>
and    $0x61662075,%eax
imul   $0x25752520,0x64(%ebp,%eiz,2),%ebp
jae    80882d1 <_IO_stdin_used+0x5a4d>
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,0x78(%ebp)
jo     8088343 <_IO_stdin_used+0x5abf>
jb     8088341 <_IO_stdin_used+0x5abd>
and    %ah,0x64(%ecx)
cmp    %fs:(%eax),%ah
jae    8088353 <_IO_stdin_used+0x5acf>
data16
je     8088307 <_IO_stdin_used+0x5a83>
and    $0x28756c6c,%eax
jae    8088353 <_IO_stdin_used+0x5acf>
arpl   %bp,(%ecx)
sub    $0x20,%al
push   $0x20647261
and    $0x28756c6c,%eax
jae    8088363 <_IO_stdin_used+0x5adf>
arpl   %bp,(%ecx)
and    $0x20000073,%eax
and    %ah,0x78(%ebp)
jo     8088373 <_IO_stdin_used+0x5aef>
jb     8088371 <_IO_stdin_used+0x5aed>
and    %dh,0x73(%ebp)
cmp    %gs:(%eax),%ah
jae    8088383 <_IO_stdin_used+0x5aff>
data16
je     8088337 <_IO_stdin_used+0x5ab3>
and    $0x28756c6c,%eax
jae    8088383 <_IO_stdin_used+0x5aff>
arpl   %bp,(%ecx)
sub    $0x20,%al
push   $0x20647261
and    $0x28756c6c,%eax
jae    8088393 <_IO_stdin_used+0x5b0f>
arpl   %bp,(%ecx)
and    $0x20000073,%eax
and    %ah,0x28756c6c
bound  %edi,0x74(%ecx)
gs
jae    808836a <_IO_stdin_used+0x5ae6>
sub    $0x20,%al
and    $0x28756c6c,%eax
jo     80883ab <_IO_stdin_used+0x5b27>
arpl   %bp,0x65(%ebx)
je     80883c2 <_IO_stdin_used+0x5b3e>
sub    %esp,0x76000073
popa
insb   (%dx),%es:(%edi)
jne    80883be <_IO_stdin_used+0x5b3a>
and    %ah,0x66(%ecx)
je     80883c3 <_IO_stdin_used+0x5b3f>
jb     8088380 <_IO_stdin_used+0x5afc>
and    0x72(%ebx),%dh
arpl   %sp,(%edx)
and    %ch,0x61(%eax)
jae    808838a <_IO_stdin_used+0x5b06>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp)
jb     80883d6 <_IO_stdin_used+0x5b52>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x64612064,0x65(%edx),%edi
fs
jb     80883e4 <_IO_stdin_used+0x5b60>
jae    80883f4 <_IO_stdin_used+0x5b70>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x76000000,0x0(%ecx,%edi,2),%ebp
popa
insb   (%dx),%es:(%edi)
jne    80883f6 <_IO_stdin_used+0x5b72>
and    %ah,0x66(%ecx)
je     80883fb <_IO_stdin_used+0x5b77>
jb     80883b8 <_IO_stdin_used+0x5b34>
and    0x74(%ebx,%esi,2),%ah
and    (%eax),%ah
push   $0x61207361
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp)
jb     808840e <_IO_stdin_used+0x5b8a>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x64612064,0x65(%edx),%edi
fs
jb     808841c <_IO_stdin_used+0x5b98>
jae    808842c <_IO_stdin_used+0x5ba8>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x74000000,0x0(%ecx,%edi,2),%ebp
push   $0x61732065
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x64(%ecx)
fs
jb     8088437 <_IO_stdin_used+0x5bb3>
jae    8088447 <_IO_stdin_used+0x5bc3>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x72207369,0x20(%ecx,%edi,2),%ebp
gs
jno    8088458 <_IO_stdin_used+0x5bd4>
imul   $0x65622064,0x65(%edx),%esi
je     8088463 <_IO_stdin_used+0x5bdf>
gs outsb %gs:(%esi),(%dx)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808845a <_IO_stdin_used+0x5bd6>
jae    8088417 <_IO_stdin_used+0x5b93>
popa
data16
je     8088460 <_IO_stdin_used+0x5bdc>
jb     808841d <_IO_stdin_used+0x5b99>
and    0x72(%ebx),%dh
arpl   %sp,(%edx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:(%edx)
fs
jae    808847f <_IO_stdin_used+0x5bfb>
and    (%eax),%al
add    %al,(%eax)
add    %ah,(%edx)
jae    8088483 <_IO_stdin_used+0x5bff>
imul   $0x20736920,(%edx),%esp
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x69(%edi)
je     808848d <_IO_stdin_used+0x5c09>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808849b <_IO_stdin_used+0x5c17>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %dl,0x50(%ebx)
dec    %ecx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80884ae <_IO_stdin_used+0x5c2a>
and    %ch,0x73(%ecx)
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
and    %dh,%gs:0x69(%bx)
je     80884c3 <_IO_stdin_used+0x5c3f>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80884d1 <_IO_stdin_used+0x5c4d>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80884de <_IO_stdin_used+0x5c5a>
and    %ah,0x66(%ecx)
je     80884e3 <_IO_stdin_used+0x5c5f>
jb     80884a0 <_IO_stdin_used+0x5c1c>
and    0x70(%ebx),%dh
outsl  %ds:(%esi),(%dx)
jb     80884fa <_IO_stdin_used+0x5c76>
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     8088503 <_IO_stdin_used+0x5c7f>
jb     80884c0 <_IO_stdin_used+0x5c3c>
and    0x6f(%eax,%esi,2),%ah
jb     808851a <_IO_stdin_used+0x5c96>
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x6f707322,0x0(%eax,%eax,1),%esp
jb     808852e <_IO_stdin_used+0x5caa>
and    (%eax),%ah
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
fs
jo     8088533 <_IO_stdin_used+0x5caf>
jb     808853a <_IO_stdin_used+0x5cb6>
and    (%eax),%ah
popa
jb     8088530 <_IO_stdin_used+0x5cac>
and    %ch,0x6e(%ecx)
jbe    8088531 <_IO_stdin_used+0x5cad>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088549 <_IO_stdin_used+0x5cc5>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %ah,(%edx)
je     8088568 <_IO_stdin_used+0x5ce4>
jo     8088556 <_IO_stdin_used+0x5cd2>
and    (%eax),%ah
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
arpl   %bp,0x64(%edi)
and    %gs:(%eax),%ah
popa
jb     8088566 <_IO_stdin_used+0x5ce2>
and    %ch,0x6e(%ecx)
jbe    8088567 <_IO_stdin_used+0x5ce3>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808857f <_IO_stdin_used+0x5cfb>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %ah,(%edx)
imul   $0x22,0x79(%ebp),%esp
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088592 <_IO_stdin_used+0x5d0e>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80885aa <_IO_stdin_used+0x5d26>
and    %ah,(%edx)
and    $0xa2273,%eax
jbe    80885af <_IO_stdin_used+0x5d2b>
insb   (%dx),%es:(%edi)
jne    80885b6 <_IO_stdin_used+0x5d32>
and    %ah,0x66(%ecx)
je     80885bb <_IO_stdin_used+0x5d37>
jb     8088578 <_IO_stdin_used+0x5cf4>
and    0x6d(%ecx,%ebp,2),%dh
gs
sub    $0x74666f73,%eax
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     80885df <_IO_stdin_used+0x5d5b>
jb     808859c <_IO_stdin_used+0x5d18>
and    0x6d(%ecx,%ebp,2),%dh
gs
sub    $0x64726168,%eax
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     8088603 <_IO_stdin_used+0x5d7f>
jb     80885c0 <_IO_stdin_used+0x5d3c>
and    0x6d(%ecx,%ebp,2),%dh
gs
sub    $0x2d657375,%eax
jae    808861b <_IO_stdin_used+0x5d97>
data16
je     80885d1 <_IO_stdin_used+0x5d4d>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088618 <_IO_stdin_used+0x5d94>
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     808862b <_IO_stdin_used+0x5da7>
jb     80885e8 <_IO_stdin_used+0x5d64>
and    0x6d(%ecx,%ebp,2),%dh
gs
sub    $0x2d657375,%eax
push   $0x22647261
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088640 <_IO_stdin_used+0x5dbc>
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     8088653 <_IO_stdin_used+0x5dcf>
jb     8088610 <_IO_stdin_used+0x5d8c>
and    0x79(%edx),%ah
je     808865a <_IO_stdin_used+0x5dd6>
sub    $0x74666f73,%eax
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     8088677 <_IO_stdin_used+0x5df3>
jb     8088634 <_IO_stdin_used+0x5db0>
and    0x79(%edx),%ah
je     808867e <_IO_stdin_used+0x5dfa>
sub    $0x64726168,%eax
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     808869b <_IO_stdin_used+0x5e17>
jb     8088658 <_IO_stdin_used+0x5dd4>
and    0x61(%eax),%dh
arpl   %bp,0x65(%ebx)
je     808866d <_IO_stdin_used+0x5de9>
jae    80886b1 <_IO_stdin_used+0x5e2d>
data16
je     8088667 <_IO_stdin_used+0x5de3>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80886ae <_IO_stdin_used+0x5e2a>
insb   (%dx),%es:(%edi)
imul   $0x61760000,0x0(%eax,%eax,1),%esp
insb   (%dx),%es:(%edi)
jne    80886be <_IO_stdin_used+0x5e3a>
and    %ah,0x66(%ecx)
je     80886c3 <_IO_stdin_used+0x5e3f>
jb     8088680 <_IO_stdin_used+0x5dfc>
and    0x61(%eax),%dh
arpl   %bp,0x65(%ebx)
je     8088695 <_IO_stdin_used+0x5e11>
push   $0x22647261
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80886d6 <_IO_stdin_used+0x5e52>
insb   (%dx),%es:(%edi)
imul   $0x756c6c,0x25(%eax,%eax,1),%esp
gs
jae    80886f1 <_IO_stdin_used+0x5e6d>
add    %ah,0x6e(%ebp)
arpl   %ax,(%eax)
sub    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
and    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs sub %eax,%fs:%gs:(%eax)
xor    %bh,0x0(%eax)
and    $0x78322e,%eax
and    %ch,(%eax)
and    $0x69622064,%eax
je     808871c <_IO_stdin_used+0x5e98>
sub    %eax,(%eax)
and    $0x78382e,%eax
fs
jae    8088727 <_IO_stdin_used+0x5ea3>
and    %ah,0x70730073
imul   $0x30257830,(%eax),%esp
cmp    %bh,0x0(%eax)
sub    %ah,0x72002975
gs
jno    8088734 <_IO_stdin_used+0x5eb0>
and    %ah,%fs:0x30280075
js     80886f9 <_IO_stdin_used+0x5e75>
xor    %bh,(%eax)
js     8088701 <_IO_stdin_used+0x5e7d>
add    %dh,0x61(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
jae    808874f <_IO_stdin_used+0x5ecb>
outsl  %ds:(%esi),(%dx)
jb     8088756 <_IO_stdin_used+0x5ed2>
add    %dh,0x6f(%edx)
add    %ch,0x6e(%ecx)
pop    %edi
je     808875d <_IO_stdin_used+0x5ed9>
imul   $0x62007265,0x67(%edi),%esp
gs
gs
je     80886f6 <_IO_stdin_used+0x5e72>
jae    808876c <_IO_stdin_used+0x5ee8>
popa
je     808876e <_IO_stdin_used+0x5eea>
cmp    0x696c0073,%ah
data16
gs
je     808876e <_IO_stdin_used+0x5eea>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x7325,0x3a(%edi),%sp
add    %ah,(%eax)
and    %ch,0x6d(%ecx,%ebp,2)
imul   $0x74666f73,0x20(%edx,%edi,1),%esi
and    %ah,0x79622873
je     808878c <_IO_stdin_used+0x5f08>
jae    8088752 <_IO_stdin_used+0x5ece>
sub    $0x0,%al
and    %ch,0x61(%eax)
jb     8088794 <_IO_stdin_used+0x5f10>
and    %ah,0x79622873
je     808879d <_IO_stdin_used+0x5f19>
jae    8088763 <_IO_stdin_used+0x5edf>
and    $0x20200073,%eax
insb   (%dx),%es:(%edi)
imul   $0x73203a74,0x69(%ebp),%ebp
outsl  %ds:(%esi),(%dx)
data16
je     808876b <_IO_stdin_used+0x5ee7>
and    $0x61702873,%eax
arpl   %bp,0x65(%ebx)
je     80887c8 <_IO_stdin_used+0x5f44>
sub    %ebp,(%eax,%eax,1)
and    %ch,0x61(%eax)
jb     80887c1 <_IO_stdin_used+0x5f3d>
and    %ah,0x61702873
arpl   %bp,0x65(%ebx)
je     80887db <_IO_stdin_used+0x5f57>
sub    %esp,0x696c0073
data16
gs
je     80887db <_IO_stdin_used+0x5f57>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x75(%ebx)
jb     80887eb <_IO_stdin_used+0x5f67>
outsb  %gs:(%esi),(%dx)
je     80887b7 <_IO_stdin_used+0x5f33>
and    $0x20200073,%eax
popa
fs and %ah,%fs:0x75002073
jae    80887f2 <_IO_stdin_used+0x5f6e>
and    %ah,0x732573
jae    8088807 <_IO_stdin_used+0x5f83>
arpl   %sp,(%eax)
and    $0x75252f73,%eax
and    %al,(%eax)
fs
jae    8088815 <_IO_stdin_used+0x5f91>
and    %ah,0x75252f73
and    %al,(%eax)
jae    808881b <_IO_stdin_used+0x5f97>
outsl  %ds:(%esi),(%dx)
jb     8088822 <_IO_stdin_used+0x5f9e>
and    %ah,0x64002075
jo     8088825 <_IO_stdin_used+0x5fa1>
jb     808882c <_IO_stdin_used+0x5fa8>
and    %ah,0x74002075
jns    8088830 <_IO_stdin_used+0x5fac>
and    %ah,%gs:0x63002075
outsl  %ds:(%esi),(%dx)
fs and %ah,%fs:%gs:0x28002075
fs
jo     8088842 <_IO_stdin_used+0x5fbe>
jb     8088849 <_IO_stdin_used+0x5fc5>
sub    %esp,(%eax)
xor    %bh,0x25(%eax)
cs
xor    $0x78,%al
and    %al,(%eax)
jne    808884a <_IO_stdin_used+0x5fc6>
and    %ah,%fs:0x414d0075
push   %edx
dec    %ebx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088855 <_IO_stdin_used+0x5fd1>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088859 <_IO_stdin_used+0x5fd5>
insb   (%dx),%es:(%edi)
imul   $0x6b73616d,0x0(%edx,%ecx,1),%esp
add    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088871 <_IO_stdin_used+0x5fed>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088875 <_IO_stdin_used+0x5ff1>
insb   (%dx),%es:(%edi)
imul   $0x72616d09,0x0(%edx,%ecx,1),%esp
imul   $0x25,(%eax),%esp
fs
das
xor    %bh,0x25(%eax)
js     8088831 <_IO_stdin_used+0x5fad>
add    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
and    %al,(%eax)
gs
jae    80888a2 <_IO_stdin_used+0x601e>
imul   $0x6e2d7064,0x75(%esi),%ebp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x73650020,0x65(%ebx),%ebp
jo     80888ad <_IO_stdin_used+0x6029>
outsb  %ds:(%esi),(%dx)
jne    80888ab <_IO_stdin_used+0x6027>
jo     8088869 <_IO_stdin_used+0x5fe5>
add    %ch,(%eax)
inc    %ebp
push   %edx
push   %edx
dec    %edi
push   %edx
and    %ah,(%edx)
je     80888c1 <_IO_stdin_used+0x603d>
jo     80888c2 <_IO_stdin_used+0x603e>
and    (%eax),%ah
je     80888cc <_IO_stdin_used+0x6048>
jne    80888ca <_IO_stdin_used+0x6046>
arpl   %sp,0x74(%ecx)
gs sub %eax,%fs:%gs:(%eax)
je     80888d2 <_IO_stdin_used+0x604e>
jo     80888d3 <_IO_stdin_used+0x604f>
and    %al,(%eax)
insb   (%dx),%es:(%edi)
gs
jbe    80888d2 <_IO_stdin_used+0x604e>
insb   (%dx),%es:(%edi)
and    %dh,0x65(%edx)
jno    80888e8 <_IO_stdin_used+0x6064>
imul   $0x6c002064,0x65(%edx),%esi
gs
jbe    80888e2 <_IO_stdin_used+0x605e>
insb   (%dx),%es:(%edi)
and    %dh,0x73(%ebp)
and    %al,%gs:(%eax)
insb   (%dx),%es:(%edi)
gs
jbe    80888ed <_IO_stdin_used+0x6069>
insb   (%dx),%es:(%edi)
and    %ah,0x73002075
push   $0x20657261
and    $0x25002073,%eax
jae    80888c8 <_IO_stdin_used+0x6044>
insl   (%dx),%es:(%edi)
popa
jae    808890a <_IO_stdin_used+0x6086>
and    %ah,0x25002073
jae    80888d4 <_IO_stdin_used+0x6050>
insl   (%dx),%es:(%edi)
popa
jae    8088916 <_IO_stdin_used+0x6092>
and    %ah,0x6f630073
popa
and    %al,(%eax)
insb   (%dx),%es:(%edi)
popa
jae    808892c <_IO_stdin_used+0x60a8>
jne    808892d <_IO_stdin_used+0x60a9>
gs and %al,%fs:%gs:(%eax)
jb     8088925 <_IO_stdin_used+0x60a1>
jo     808892e <_IO_stdin_used+0x60aa>
popa
jns    80888f2 <_IO_stdin_used+0x606e>
ja     8088930 <_IO_stdin_used+0x60ac>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     80888ec <_IO_stdin_used+0x6068>
and    $0x6e002075,%eax
outsl  %ds:(%esi),(%dx)
arpl   %bp,%gs:0x25(%esi)
jae    80888d8 <_IO_stdin_used+0x6054>
fs arpl %sp,%fs:%gs:0x70(%ecx)
sub    $0x70637364,%eax
and    $0x6f6e0073,%eax
jo     8088956 <_IO_stdin_used+0x60d2>
je     8088960 <_IO_stdin_used+0x60dc>
imul   $0x77007325,%fs:0x63(%ebx),%esi
imul   $0x25766365,0x72(%esp,%eiz,2),%ebp
jae    80888fd <_IO_stdin_used+0x6079>
imul   $0x732570,0x6d(%ebx),%esp
popa
sub    $0x6e75,%ax
jae    808897b <_IO_stdin_used+0x60f7>
arpl   %sp,%gs:0x6c610073
imul   $0x732534,0x6e(%edi),%esp
gs
js     8088990 <_IO_stdin_used+0x610c>
jb     808897f <_IO_stdin_used+0x60fb>
pop    %edi
data16
insb   (%dx),%es:(%edi)
popa
and    %al,(%bx,%si)
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     8088957 <_IO_stdin_used+0x60d3>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
sub    $0x70637364,%eax
and    $0x28200073,%eax
xor    %bh,0x25(%eax)
jae    8088967 <_IO_stdin_used+0x60e3>
add    %cl,(%ecx)
jae    80889a7 <_IO_stdin_used+0x6123>
arpl   %si,0x72(%ebp)
imul   $0x746e6f63,0x20(%ecx,%edi,2),%esi
gs
js     80889c4 <_IO_stdin_used+0x6140>
and    %al,(%eax)
and    $0x73252073,%eax
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     808897f <_IO_stdin_used+0x60fb>
add    %ah,0x72(%ecx,%ebp,2)
and    %al,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80889dc <_IO_stdin_used+0x6158>
add    %ah,0x77(%esi)
add    %ah,%fs:0x63(%ecx)
je     80889da <_IO_stdin_used+0x6156>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808899a <_IO_stdin_used+0x6116>
add    %ah,0x63(%ecx)
je     80889e8 <_IO_stdin_used+0x6164>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
add    %ah,0x63(%ecx)
je     80889f6 <_IO_stdin_used+0x6172>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x69002075
outsb  %ds:(%esi),(%dx)
fs
gs
js     80889ba <_IO_stdin_used+0x6136>
and    $0x70002075,%eax
jb     8088a0a <_IO_stdin_used+0x6186>
outsl  %ds:(%esi),(%dx)
jb     8088a0d <_IO_stdin_used+0x6189>
je     8088a1f <_IO_stdin_used+0x619b>
and    %ah,0x70002075
je     8088a27 <_IO_stdin_used+0x61a3>
jo     8088a15 <_IO_stdin_used+0x6191>
and    %al,(%eax)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
outsl  %ds:(%esi),(%dx)
imul   $0x6f,0x72700073,%esp
je     8088a30 <_IO_stdin_used+0x61ac>
add    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088a37 <_IO_stdin_used+0x61b3>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088a3b <_IO_stdin_used+0x61b7>
insb   (%dx),%es:(%edi)
imul   $0x76204950,0x53(%eax,%eax,1),%esp
popa
insb   (%dx),%es:(%edi)
jne    8088a4c <_IO_stdin_used+0x61c8>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088a50 <_IO_stdin_used+0x61cc>
insb   (%dx),%es:(%edi)
imul   $0x2d4d5246,0x58(%eax,%eax,1),%esp
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
add    %cl,0x44(%ecx)
add    %cl,0x4f(%ebp)
inc    %esp
inc    %ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088a70 <_IO_stdin_used+0x61ec>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088a74 <_IO_stdin_used+0x61f0>
insb   (%dx),%es:(%edi)
imul   $0x6e697073,0x65(%eax,%eax,1),%esp
jne    8088a82 <_IO_stdin_used+0x61fe>
jo     8088a4d <_IO_stdin_used+0x61c9>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x70736500,0x65(%ebx),%ebp
imul   $0x45007064,0x75(%esi),%ebp
dec    %esi
inc    %ebx
inc    %ecx
push   %eax
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088aa5 <_IO_stdin_used+0x6221>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088aa9 <_IO_stdin_used+0x6225>
insb   (%dx),%es:(%edi)
imul   $0x44495145,0x52(%eax,%eax,1),%esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088abc <_IO_stdin_used+0x6238>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088ac0 <_IO_stdin_used+0x623c>
insb   (%dx),%es:(%edi)
imul   $0x76205645,0x44(%eax,%eax,1),%esp
popa
insb   (%dx),%es:(%edi)
jne    8088ad1 <_IO_stdin_used+0x624d>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088ad5 <_IO_stdin_used+0x6251>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eax,1),%esp
and    %ah,0x66(%ecx)
je     8088ae7 <_IO_stdin_used+0x6263>
jb     8088aa4 <_IO_stdin_used+0x6220>
and    0x70(%ecx,%edi,2),%dh
and    %gs:(%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x65646f,0x63(%eax,%eax,1),%esp
jbe    8088afe <_IO_stdin_used+0x627a>
insb   (%dx),%es:(%edi)
jne    8088b05 <_IO_stdin_used+0x6281>
and    %ah,0x66(%ecx)
je     8088b0a <_IO_stdin_used+0x6286>
jb     8088ac7 <_IO_stdin_used+0x6243>
and    0x6f(%ebx),%ah
fs and %fs:%gs:(%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eax,1),%esp
and    %ah,0x66(%ecx)
je     8088b28 <_IO_stdin_used+0x62a4>
jb     8088ae5 <_IO_stdin_used+0x6261>
and    0x65(%ebx),%ch
jns    8088aec <_IO_stdin_used+0x6268>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088b33 <_IO_stdin_used+0x62af>
insb   (%dx),%es:(%edi)
imul   $0x50535055,0x0(%edx,%ecx,1),%esp
inc    %ebp
inc    %ebx
add    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
add    %dh,0x6d(%ecx,%ebp,2)
gs
sub    $0x74666f73,%eax
add    %dh,0x6d(%ecx,%ebp,2)
gs
sub    $0x64726168,%eax
add    %dh,0x6d(%ecx,%ebp,2)
gs
sub    $0x2d657375,%eax
jae    8088b75 <_IO_stdin_used+0x62f1>
data16
je     8088b09 <_IO_stdin_used+0x6285>
je     8088b74 <_IO_stdin_used+0x62f0>
insl   (%dx),%es:(%edi)
gs
sub    $0x2d657375,%eax
push   $0x647261
bound  %edi,0x74(%ecx)
gs
sub    $0x74666f73,%eax
add    %ah,0x79(%edx)
je     8088b8a <_IO_stdin_used+0x6306>
sub    $0x64726168,%eax
add    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8088b5f <_IO_stdin_used+0x62db>
jae    8088ba3 <_IO_stdin_used+0x631f>
data16
je     8088b37 <_IO_stdin_used+0x62b3>
jo     8088b9a <_IO_stdin_used+0x6316>
arpl   %bp,0x65(%ebx)
je     8088b6b <_IO_stdin_used+0x62e7>
push   $0x647261
dec    %esp
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088bb3 <_IO_stdin_used+0x632f>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088bb7 <_IO_stdin_used+0x6333>
insb   (%dx),%es:(%edi)
imul   $0x6f700061,0x73(%eax,%eax,1),%esp
insb   (%dx),%es:(%edi)
imul   $0x74756100,0x79(%ebx),%esp
push   $0x6d6f6300
jo     8088b6e <_IO_stdin_used+0x62ea>
popa
gs
popa
add    %ah,%fs:0x75(%ecx)
je     8088bdf <_IO_stdin_used+0x635b>
sub    $0x6e757274,%eax
arpl   %ax,(%eax)
popa
push   $0x756f7200
je     8088beb <_IO_stdin_used+0x6367>
xor    (%eax),%al
push   $0x69006f61
jo     8088c02 <_IO_stdin_used+0x637e>
arpl   %bp,%gs:0x796e61
add    %al,(%eax)
loopne 8088c1f <_IO_stdin_used+0x639b>
push   %es
or     %al,(%eax)
jle    8088bad <_IO_stdin_used+0x6329>
or     %ch,(%eax)
jle    8088bb1 <_IO_stdin_used+0x632d>
or     %dh,0x7d(%eax)
push   %es
or     %al,%al
jge    8088bb9 <_IO_stdin_used+0x6335>
or     %al,(%eax)
add    %al,(%eax)
add    %al,0x2080886(%edx)
add    %al,(%eax)
add    %ah,0x8(%ebx,%ecx,4)
or     %al,(%ecx)
add    %al,(%eax)
add    %ch,-0x75(%ecx)
or     %cl,(%eax)
add    (%eax),%eax
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
mov    (%eax),%ecx
or     %dl,(%edx)
add    %al,(%eax)
add    %dh,-0x75(%ebx)
or     %cl,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,-0x7a(%esi)
or     %cl,(%eax)
xor    (%eax),%al
add    %al,(%eax)
jle    8088b95 <_IO_stdin_used+0x6311>
or     %cl,(%eax)
xor    (%eax),%eax
add    %al,(%eax)
imul   $0x8b810000,0x6c0808(%ebx),%ecx
8b
or     %cl,(%eax)
sub    (%eax),%eax
add    %al,(%eax)
mov    %cl,0x3c0808(%ebx)
add    %al,(%eax)
mov    %cs,0xff0808(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
(bad)
call   *0x45(%ebx)
push   %ecx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088ca6 <_IO_stdin_used+0x6422>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088caa <_IO_stdin_used+0x6426>
insb   (%dx),%es:(%edi)
imul   $0x2047414c,0x46(%eax,%eax,1),%esp
jbe    8088cb5 <_IO_stdin_used+0x6431>
insb   (%dx),%es:(%edi)
jne    8088cbc <_IO_stdin_used+0x6438>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088cc0 <_IO_stdin_used+0x643c>
insb   (%dx),%es:(%edi)
imul   $0x6e63656f,0x6e(%eax,%eax,1),%esp
add    %ah,0x63(%ebp,%eiz,2)
popa
jo     8088c9c <_IO_stdin_used+0x6418>
fs
jae    8088cd5 <_IO_stdin_used+0x6451>
jo     8088c74 <_IO_stdin_used+0x63f0>
ja     8088cdf <_IO_stdin_used+0x645b>
insb   (%dx),%es:(%edi)
fs
jb     8088cdf <_IO_stdin_used+0x645b>
arpl   %si,0x0(%esi)
imul   $0x66610070,0x6d(%ebx),%esp
sub    $0x70736e75,%eax
arpl   %ax,%gs:(%eax)
popa
insb   (%dx),%es:(%edi)
imul   $0x65720034,0x6e(%edi),%esp
jno    8088d00 <_IO_stdin_used+0x647c>
add    %al,%fs:0x6c(%ebp,%eiz,2)
gs
je     8088d04 <_IO_stdin_used+0x6480>
sub    $0x206c6c61,%eax
jb     8088d15 <_IO_stdin_used+0x6491>
jne    8088d16 <_IO_stdin_used+0x6492>
and    %bh,%fs:0xa642520
add    %al,0x6c(%ebp,%eiz,2)
gs
je     8088d1b <_IO_stdin_used+0x6497>
sub    $0x206c6c61,%eax
je     8088d22 <_IO_stdin_used+0x649e>
jb     8088d2c <_IO_stdin_used+0x64a8>
imul   $0xa646574,0x61(%esi),%ebp
add    %al,0x6c(%ebp,%eiz,2)
gs
je     8088d32 <_IO_stdin_used+0x64ae>
sub    $0x206c6c61,%eax
arpl   %bp,0x6d(%edi)
jo     8088d43 <_IO_stdin_used+0x64bf>
gs
je     8088d3f <_IO_stdin_used+0x64bb>
or     %fs:(%eax),%al
inc    %esp
gs
insb   (%dx),%es:(%edi)
gs
je     8088d48 <_IO_stdin_used+0x64c4>
sub    $0x206c6c61,%eax
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    8088d54 <_IO_stdin_used+0x64d0>
and    %ah,0x6f(%ebx)
jne    8088d60 <_IO_stdin_used+0x64dc>
je     8088d14 <_IO_stdin_used+0x6490>
cmp    $0xa642520,%eax
add    %cl,0x6f(%esi)
je     8088d1e <_IO_stdin_used+0x649a>
popa
and    %dh,0x74(%ebx)
popa
je     8088d6a <_IO_stdin_used+0x64e6>
cmp    (%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %dl,0x70(%ebp)
fs
popa
je     8088d82 <_IO_stdin_used+0x64fe>
and    %al,%fs:(%eax)
inc    %ebp
js     8088d93 <_IO_stdin_used+0x650f>
imul   $0x68002064,0x65(%edx),%esi
popa
jb     8088d91 <_IO_stdin_used+0x650d>
and    %ah,0x74530075
popa
je     8088d9b <_IO_stdin_used+0x6517>
and    %ah,0x75(%edx)
data16
data16
gs
jb     8088d5e <_IO_stdin_used+0x64da>
outsl  %ds:(%esi),(%dx)
jbe    8088da6 <_IO_stdin_used+0x6522>
jb     8088da9 <_IO_stdin_used+0x6525>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8088d51 <_IO_stdin_used+0x64cd>
add    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088db2 <_IO_stdin_used+0x652e>
and    %ah,0x66(%ecx)
je     8088db7 <_IO_stdin_used+0x6533>
jb     8088d74 <_IO_stdin_used+0x64f0>
and    0x69(%ebp),%ch
outsb  %ds:(%esi),(%dx)
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x76007861,0x6d(%eax,%eax,1),%esp
popa
insb   (%dx),%es:(%edi)
jne    8088dd3 <_IO_stdin_used+0x654f>
and    %ah,0x66(%ecx)
je     8088dd8 <_IO_stdin_used+0x6554>
jb     8088d95 <_IO_stdin_used+0x6511>
and    0x61(%ebp),%ch
js     8088d9c <_IO_stdin_used+0x6518>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088de3 <_IO_stdin_used+0x655f>
insb   (%dx),%es:(%edi)
imul   $0x22697073,0x22(%eax,%eax,1),%esp
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088df4 <_IO_stdin_used+0x6570>
insb   (%dx),%es:(%edi)
imul   $0x78616d22,0x0(%edx,%ecx,1),%esp
and    (%eax),%ah
imul   $0x7373696d,0x20(%ebx),%esi
imul   $0x6d22000a,0x67(%esi),%ebp
imul   $0x20736920,0x22(%esi),%ebp
insl   (%dx),%es:(%edi)
imul   $0xa676e69,0x73(%ebx),%esi
add    %dh,0x65(%edx)
jo     8088e2c <_IO_stdin_used+0x65a8>
popa
jns    8088df0 <_IO_stdin_used+0x656c>
ja     8088e2e <_IO_stdin_used+0x65aa>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     8088dca <_IO_stdin_used+0x6546>
jb     8088e31 <_IO_stdin_used+0x65ad>
jo     8088e3a <_IO_stdin_used+0x65b6>
popa
jns    8088dfe <_IO_stdin_used+0x657a>
jae    8088e38 <_IO_stdin_used+0x65b4>
jno    8088dd5 <_IO_stdin_used+0x6551>
jb     8088e3c <_IO_stdin_used+0x65b8>
jo     8088e45 <_IO_stdin_used+0x65c1>
popa
jns    8088e09 <_IO_stdin_used+0x6585>
outsl  %ds:(%esi),(%dx)
jae    8088e44 <_IO_stdin_used+0x65c0>
jno    8088de1 <_IO_stdin_used+0x655d>
gs
js     8088e58 <_IO_stdin_used+0x65d4>
jb     8088e47 <_IO_stdin_used+0x65c3>
sub    $0x67616c66,%eax
add    %ah,(%edx)
inc    %ebp
pop    %eax
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x2d746e6f,0x64(%eax,%eax,1),%esp
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
sub    $0x70637364,%eax
add    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,0x6f(%ebx)
popa
add    %ah,0x74(%ebx)
js     8088e22 <_IO_stdin_used+0x659e>
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x45505954,%eax
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088ea0 <_IO_stdin_used+0x661c>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088ea4 <_IO_stdin_used+0x6620>
insb   (%dx),%es:(%edi)
imul   $0x4f474c41,0x0(%edx,%ecx,1),%esp
sub    $0x454d414e,%eax
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x4d59454b,%eax
inc    %ecx
push   %esp
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x2d564349,%eax
dec    %esp
inc    %ebp
dec    %esi
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x2d564349,%eax
dec    %esp
inc    %ebp
dec    %esi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088ee2 <_IO_stdin_used+0x665e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088ee6 <_IO_stdin_used+0x6662>
insb   (%dx),%es:(%edi)
imul   $0x2d4f474c,0x41(%eax,%eax,1),%esp
push   %esp
push   %edx
push   %ebp
dec    %esi
inc    %ebx
sub    $0x4e454c,%eax
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x4d59454b,%eax
inc    %ecx
push   %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8088f0e <_IO_stdin_used+0x668a>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8088f12 <_IO_stdin_used+0x668e>
insb   (%dx),%es:(%edi)
imul   $0x74616470,0x75(%eax,%eax,1),%esp
add    %ah,%gs:0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x70(%ebx)
imul   $0x656c6564,(%eax),%eax
je     8088f30 <_IO_stdin_used+0x66ac>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ah,0x6c(%ebp,%eiz,2)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ah,0x6f(%ebx)
jne    8088f48 <_IO_stdin_used+0x66c4>
je     8088edc <_IO_stdin_used+0x6658>
push   %ebx
inc    %ecx
inc    %esp
imul   $0x57203a6f,0x66(%esi),%ebp
jb     8088f57 <_IO_stdin_used+0x66d3>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%si)
outsb  %ds:(%esi),(%dx)
and    %ah,0x9000a64
and    %dl,0x41(%ebx)
inc    %esp
add    %ah,(%eax)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     8088f20 <_IO_stdin_used+0x669c>
and    $0x41420064,%eax
inc    %esp
and    %dl,0x41(%ebx)
inc    %esp
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
je     8088f89 <_IO_stdin_used+0x6705>
jb     8088f84 <_IO_stdin_used+0x6700>
gs or  %fs:%gs:(%eax),%al
inc    %edx
inc    %ecx
inc    %esp
and    %dl,0x41(%ebx)
inc    %esp
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 8088f90 <_IO_stdin_used+0x670c>
and    %dh,0x65(%edx)
je     8088fa2 <_IO_stdin_used+0x671e>
jb     8088f9d <_IO_stdin_used+0x6719>
gs or  %fs:%gs:(%eax),%al
and    %ch,(%eax)
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %al,(%eax)
and    %cl,0x61(%ebp)
js     8088f63 <_IO_stdin_used+0x66df>
and    $0x20200064,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6c(%esi)
popa
and    %al,0x4c(%bp)
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     8088fdb <_IO_stdin_used+0x6757>
and    %ah,0x6f(%ebx)
jne    8088fe9 <_IO_stdin_used+0x6765>
je     8088f87 <_IO_stdin_used+0x6703>
add    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %bh,(%edx)
cmp    $0x73250020,%eax
and    %bh,0x0(%eax,%eiz,1)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
and    %bh,(%edx)
cmp    $0x207b20,%eax
and    %bh,0x20(%ebp)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x454d414e,%eax
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x4d59454b,%eax
inc    %ecx
push   %esp
and    %bh,0x0(%edx,%ecx,1)
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x454d414e,%eax
or     (%eax),%al
push   %ebp
push   %eax
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bh,(%edx)
cmp    $0x6f727020,%eax
je     8089044 <_IO_stdin_used+0x67c0>
and    %bh,0x20(%ebx)
jnp    8088ffa <_IO_stdin_used+0x6776>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,0x20(%ebx)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x73
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    8089079 <_IO_stdin_used+0x67f5>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6c(%ebp,%eiz,2)
gs
je     8089082 <_IO_stdin_used+0x67fe>
sub    $0x206c6c61,%eax
jb     8089089 <_IO_stdin_used+0x6805>
jno    808909b <_IO_stdin_used+0x6817>
gs
jae    808909d <_IO_stdin_used+0x6819>
or     (%eax),%al
add    %al,0x75(%edx)
addr32 addr16 jns 8089052 <_IO_stdin_used+0x67ce>
pop    %eax
inc    %esi
push   %edx
dec    %ebp
pop    %edi
dec    %ebp
push   %ebx
inc    %edi
pop    %edi
inc    %esp
inc    %ebp
dec    %esp
push   %ebx
inc    %ecx
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
inc    %ecx
pop    %edi
push   %ebx
inc    %ecx
or     (%eax),%al
add    %al,0x75(%edx)
addr32 addr16 jns 8089076 <_IO_stdin_used+0x67f2>
pop    %eax
inc    %esi
push   %edx
dec    %ebp
pop    %edi
dec    %ebp
push   %ebx
inc    %edi
pop    %edi
inc    %esp
inc    %ebp
dec    %esp
push   %eax
dec    %edi
dec    %esp
dec    %ecx
inc    %ebx
pop    %ecx
cmp    (%eax),%ah
je     80890db <_IO_stdin_used+0x6857>
outsl  %ds:(%esi),(%dx)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     80890e7 <_IO_stdin_used+0x6863>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
inc    %ecx
pop    %edi
push   %eax
dec    %edi
dec    %esp
dec    %ecx
inc    %ebx
pop    %ecx
and    %ch,0x6e(%ebp,%eiz,2)
or     (%eax),%al
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     80890ac <_IO_stdin_used+0x6828>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    80890f8 <_IO_stdin_used+0x6874>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8089106 <_IO_stdin_used+0x6882>
popa
je     8089105 <_IO_stdin_used+0x6881>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
dec    %ecx
inc    %esp
and    %ch,0x73(%ecx)
and    %dh,0x65(%edx)
jno    808911f <_IO_stdin_used+0x689b>
imul   $0x76000a64,0x65(%edx),%esi
popa
insb   (%dx),%es:(%edi)
jne    808911a <_IO_stdin_used+0x6896>
and    %ah,0x66(%ecx)
je     808911f <_IO_stdin_used+0x689b>
jb     80890dc <_IO_stdin_used+0x6858>
and    0x69(%ebp),%ch
outsb  %ds:(%esi),(%dx)
and    (%eax),%ah
imul   $0x6772616c,0x20(%ebx),%esi
gs
jb     80890ec <_IO_stdin_used+0x6868>
je     8089136 <_IO_stdin_used+0x68b2>
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808913b <_IO_stdin_used+0x68b7>
and    %ah,0x66(%ecx)
je     8089140 <_IO_stdin_used+0x68bc>
jb     80890fd <_IO_stdin_used+0x6879>
and    0x61(%ebp),%ch
js     8089104 <_IO_stdin_used+0x6880>
or     (%eax),%al
jbe    8089147 <_IO_stdin_used+0x68c3>
insb   (%dx),%es:(%edi)
jne    808914e <_IO_stdin_used+0x68ca>
and    %ah,0x66(%ecx)
je     8089153 <_IO_stdin_used+0x68cf>
jb     8089110 <_IO_stdin_used+0x688c>
and    0x65(%edx),%dh
jo     8089161 <_IO_stdin_used+0x68dd>
popa
jns    8089125 <_IO_stdin_used+0x68a1>
ja     8089163 <_IO_stdin_used+0x68df>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     8089121 <_IO_stdin_used+0x689d>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089168 <_IO_stdin_used+0x68e4>
insb   (%dx),%es:(%edi)
imul   $0x756c6176,0x0(%eax,%eax,1),%esp
and    %ah,%gs:0x66(%ecx)
je     808917b <_IO_stdin_used+0x68f7>
jb     8089138 <_IO_stdin_used+0x68b4>
and    0x65(%edx),%dh
jo     8089189 <_IO_stdin_used+0x6905>
popa
jns    808914d <_IO_stdin_used+0x68c9>
jae    8089187 <_IO_stdin_used+0x6903>
jno    8089146 <_IO_stdin_used+0x68c2>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808918d <_IO_stdin_used+0x6909>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eax,1),%esp
and    %ah,0x66(%ecx)
je     808919f <_IO_stdin_used+0x691b>
jb     808915c <_IO_stdin_used+0x68d8>
and    0x65(%edx),%dh
jo     80891ad <_IO_stdin_used+0x6929>
popa
jns    8089171 <_IO_stdin_used+0x68ed>
outsl  %ds:(%esi),(%dx)
jae    80891ac <_IO_stdin_used+0x6928>
jno    808916b <_IO_stdin_used+0x68e7>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80891b2 <_IO_stdin_used+0x692e>
insb   (%dx),%es:(%edi)
imul   $0x50530000,0x0(%eax,%eax,1),%esp
dec    %edi
push   %edx
push   %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80891c8 <_IO_stdin_used+0x6944>
and    %ah,0x66(%ecx)
je     80891cd <_IO_stdin_used+0x6949>
jb     808918a <_IO_stdin_used+0x6906>
and    0x6e(%ebp),%ah
arpl   %sp,0x70(%ecx)
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x50440000,0x0(%eax,%eax,1),%esp
dec    %edi
push   %edx
push   %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80891f0 <_IO_stdin_used+0x696c>
and    %ah,0x66(%ecx)
je     80891f5 <_IO_stdin_used+0x6971>
jb     80891b2 <_IO_stdin_used+0x692e>
and    0x6e(%ebp),%ah
arpl   %sp,0x70(%ecx)
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x61760000,0x0(%eax,%eax,1),%esp
insb   (%dx),%es:(%edi)
jne    8089212 <_IO_stdin_used+0x698e>
and    %ah,0x66(%ecx)
je     8089217 <_IO_stdin_used+0x6993>
jb     80891d4 <_IO_stdin_used+0x6950>
and    0x6f(%ebx),%ah
popa
and    (%eax),%ah
push   $0x61207361
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp)
jb     808922a <_IO_stdin_used+0x69a6>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x64612064,0x65(%edx),%edi
fs
jb     8089238 <_IO_stdin_used+0x69b4>
jae    8089248 <_IO_stdin_used+0x69c4>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0x76000000,0x0(%ecx,%edi,2),%ebp
popa
insb   (%dx),%es:(%edi)
jne    808924a <_IO_stdin_used+0x69c6>
and    %ah,0x66(%ecx)
je     808924f <_IO_stdin_used+0x69cb>
jb     808920c <_IO_stdin_used+0x6988>
and    0x6f(%ebx),%ah
popa
and    (%eax),%ah
imul   $0x206f6f74,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
popa
jb     8089264 <_IO_stdin_used+0x69e0>
add    %al,%gs:(%eax)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x4e555254,%eax
inc    %ebx
sub    $0x204e454c,%eax
jbe    8089272 <_IO_stdin_used+0x69ee>
insb   (%dx),%es:(%edi)
jne    8089279 <_IO_stdin_used+0x69f5>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808927d <_IO_stdin_used+0x69f9>
insb   (%dx),%es:(%edi)
imul   $0x2d4f474c,0x41(%eax,%eax,1),%esp
dec    %ebx
inc    %ebp
pop    %ecx
dec    %ebp
inc    %ecx
push   %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089296 <_IO_stdin_used+0x6a12>
and    %ch,0x61(%ebp)
imul   $0x20,0x73(%ebp),%esp
bound  %esi,0x66(%ebp)
data16
gs
jb     808925f <_IO_stdin_used+0x69db>
outsl  %ds:(%esi),(%dx)
jbe    80892a7 <_IO_stdin_used+0x6a23>
jb     80892aa <_IO_stdin_used+0x6a26>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8089252 <_IO_stdin_used+0x69ce>
add    %al,(%eax)
add    %al,(%eax)
dec    %ebp
dec    %edi
inc    %esp
inc    %ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80892bb <_IO_stdin_used+0x6a37>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    80892bf <_IO_stdin_used+0x6a3b>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80892dc <_IO_stdin_used+0x6a58>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80892f4 <_IO_stdin_used+0x6a70>
and    %ah,(%edx)
and    $0x69202273,%eax
jae    80892b8 <_IO_stdin_used+0x6a34>
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x69(%edi)
je     808930c <_IO_stdin_used+0x6a88>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808931a <_IO_stdin_used+0x6a96>
and    %ah,(%edx)
and    $0xa2273,%eax
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089330 <_IO_stdin_used+0x6aac>
and    %ah,(%edx)
and    $0x6f202273,%eax
jb     80892f4 <_IO_stdin_used+0x6a70>
and    0x69202273,%ah
jae    80892fc <_IO_stdin_used+0x6a78>
jb     8089343 <_IO_stdin_used+0x6abf>
jno    8089355 <_IO_stdin_used+0x6ad1>
imul   $0x69772064,0x65(%edx),%esi
je     8089351 <_IO_stdin_used+0x6acd>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808935f <_IO_stdin_used+0x6adb>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089378 <_IO_stdin_used+0x6af4>
jae    8089335 <_IO_stdin_used+0x6ab1>
and    0x202c2273,%ah
and    0x202c2273,%ah
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x61202273,%eax
jb     8089392 <_IO_stdin_used+0x6b0e>
and    %ch,0x6e(%ecx)
jbe    8089393 <_IO_stdin_used+0x6b0f>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80893b0 <_IO_stdin_used+0x6b2c>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80893c8 <_IO_stdin_used+0x6b44>
jae    8089385 <_IO_stdin_used+0x6b01>
and    0x202c2273,%ah
and    0x202c2273,%ah
and    0x202c2273,%ah
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x61202273,%eax
jb     80893e8 <_IO_stdin_used+0x6b64>
and    %ch,0x6e(%ecx)
jbe    80893e9 <_IO_stdin_used+0x6b65>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089406 <_IO_stdin_used+0x6b82>
and    %ah,(%edx)
and    $0xa2273,%eax
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x45505954,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808941c <_IO_stdin_used+0x6b98>
and    %ah,(%edx)
and    $0x69202273,%eax
jae    80893e0 <_IO_stdin_used+0x6b5c>
jb     8089427 <_IO_stdin_used+0x6ba3>
jno    8089439 <_IO_stdin_used+0x6bb5>
imul   $0x69772064,0x65(%edx),%esi
je     8089435 <_IO_stdin_used+0x6bb1>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089443 <_IO_stdin_used+0x6bbf>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %al,0x4c(%ecx)
inc    %edi
dec    %edi
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089455 <_IO_stdin_used+0x6bd1>
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089472 <_IO_stdin_used+0x6bee>
and    %ah,(%edx)
and    $0xa2273,%eax
and    0x6f(%ebp),%ch
fs and %fs:%gs:(%eax),%ah
imul   $0x75716572,0x20(%ebx),%esi
imul   $0x69772064,0x65(%edx),%esi
je     8089493 <_IO_stdin_used+0x6c0f>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80894a1 <_IO_stdin_used+0x6c1d>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %ah,(%edx)
arpl   %bp,0x61(%edi)
and    (%eax),%ah
imul   $0x75716572,0x20(%ebx),%esi
imul   $0x69772064,0x65(%edx),%esi
je     80894c2 <_IO_stdin_used+0x6c3e>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80894d0 <_IO_stdin_used+0x6c4c>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
and    0x6f(%ebx),%ah
popa
and    (%eax),%ah
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x20687469,0x77(%eax,%eiz,1),%esp
pop    %eax
inc    %esi
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    80894ff <_IO_stdin_used+0x6c7b>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %al,0x6c(%esi)
jne    808951b <_IO_stdin_used+0x6c97>
push   $0x61747320
je     8089514 <_IO_stdin_used+0x6c90>
and    %dh,0x69(%edi)
je     808951c <_IO_stdin_used+0x6c98>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808952a <_IO_stdin_used+0x6ca6>
and    %ah,(%edx)
and    $0xa2273,%eax
push   %ebp
jae    8089530 <_IO_stdin_used+0x6cac>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     8089545 <_IO_stdin_used+0x6cc1>
and    %bh,0x20(%ebx)
popa
fs and %bh,%fs:0x75(%eax,%eiz,1)
jo     8089550 <_IO_stdin_used+0x6ccc>
popa
je     8089554 <_IO_stdin_used+0x6cd0>
and    %bh,0x20(%ebp)
dec    %ecx
inc    %esp
and    %bl,0x20(%ebx)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %cl,%fs:%gs:0x4f(%ebp)
inc    %esp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jb     808958d <_IO_stdin_used+0x6d09>
and    %cl,0x41(%ebp)
push   %edx
dec    %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jae    8089599 <_IO_stdin_used+0x6d15>
and    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %bl,0x20(%ebp)
pop    %ebp
and    %bl,0x20(%ebx)
jb     80895a1 <_IO_stdin_used+0x6d1d>
jno    80895a7 <_IO_stdin_used+0x6d23>
and    %dl,%fs:0x45(%edx)
push   %ecx
dec    %ecx
inc    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%ebx)
jno    808956e <_IO_stdin_used+0x6cea>
push   %ebx
inc    %ebp
push   %ecx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x65(%edx)
jo     80895d2 <_IO_stdin_used+0x6d4e>
popa
jns    8089596 <_IO_stdin_used+0x6d12>
ja     80895d4 <_IO_stdin_used+0x6d50>
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
ja     8089590 <_IO_stdin_used+0x6d0c>
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
jo     80895e9 <_IO_stdin_used+0x6d65>
popa
jns    80895ad <_IO_stdin_used+0x6d29>
jae    80895e7 <_IO_stdin_used+0x6d63>
jno    80895a4 <_IO_stdin_used+0x6d20>
push   %ebx
inc    %ebp
push   %ecx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
jo     80895fc <_IO_stdin_used+0x6d78>
popa
jns    80895c0 <_IO_stdin_used+0x6d3c>
outsl  %ds:(%esi),(%dx)
jae    80895fb <_IO_stdin_used+0x6d77>
jno    80895b8 <_IO_stdin_used+0x6d34>
push   %ebx
inc    %ebp
push   %ecx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6c(%esi)
popa
and    %al,0x4c(%bp)
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%ebx)
insb   (%dx),%es:(%edi)
and    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %cl,0x4d(%ecx,%ecx,2)
dec    %ecx
push   %esp
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
and    %al,0x4e(%ebp)
inc    %ebx
inc    %ecx
push   %eax
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
arpl   %bp,0x61(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
pop    %ebx
das
push   %eax
dec    %esp
inc    %ebp
dec    %esi
pop    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x74(%ebx)
js     808962e <_IO_stdin_used+0x6daa>
inc    %ebx
push   %esp
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x78(%ebp)
je     808968c <_IO_stdin_used+0x6e08>
popa
sub    $0x67616c66,%eax
and    %al,0x58(%ebp)
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     80896ad <_IO_stdin_used+0x6e29>
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x70(%ebx)
imul   $0x5b204449,(%eax),%esp
and    %ch,0x6f(%ebp)
fs and %cl,%fs:%gs:0x4f(%ebp)
inc    %esp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x61(%ebp)
jb     80896d4 <_IO_stdin_used+0x6e50>
and    %cl,0x41(%ebp)
push   %edx
dec    %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jae    80896e0 <_IO_stdin_used+0x6e5c>
and    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %bl,0x20(%ebp)
pop    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x65(%edx)
jno    80896f7 <_IO_stdin_used+0x6e73>
and    %dl,%fs:0x45(%edx)
push   %ecx
dec    %ecx
inc    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%ebx)
jno    80896be <_IO_stdin_used+0x6e3a>
push   %ebx
inc    %ebp
push   %ecx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x69(%ebp)
outsb  %ds:(%esi),(%dx)
and    %dl,0x50(%ebx)
dec    %ecx
and    %ch,0x61(%ebp)
js     80896d2 <_IO_stdin_used+0x6e4e>
push   %ebx
push   %eax
dec    %ecx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    8089720 <_IO_stdin_used+0x6e9c>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     8089735 <_IO_stdin_used+0x6eb1>
and    %bh,0x20(%ebx)
fs
gs
insb   (%dx),%es:(%edi)
gs
je     808973e <_IO_stdin_used+0x6eba>
and    %bh,0x67(%eax,%eiz,1)
gs
je     8089700 <_IO_stdin_used+0x6e7c>
jge    8089702 <_IO_stdin_used+0x6e7e>
dec    %ecx
inc    %esp
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jb     8089756 <_IO_stdin_used+0x6ed2>
and    %cl,0x41(%ebp)
push   %edx
dec    %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jae    8089762 <_IO_stdin_used+0x6ede>
and    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %bl,0x20(%ebp)
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
push   %ebp
jae    8089768 <_IO_stdin_used+0x6ee4>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     808977d <_IO_stdin_used+0x6ef9>
and    %bh,0x20(%ebx)
fs
gs
insb   (%dx),%es:(%edi)
gs
je     8089786 <_IO_stdin_used+0x6f02>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %bh,0x6c(%eax,%eiz,1)
imul   $0x5b207d20,0x74(%ebx),%esi
and    %cl,0x44(%ecx)
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %cl,%fs:%gs:0x4f(%ebp)
inc    %esp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
jno    80897b2 <_IO_stdin_used+0x6f2e>
and    %dl,%fs:0x45(%edx)
push   %ecx
dec    %ecx
inc    %esp
and    %bl,0xa(%ebp)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x74(%ebx)
popa
je     80897cd <_IO_stdin_used+0x6f49>
and    %ah,0x6c(%esi)
jne    80897e0 <_IO_stdin_used+0x6f5c>
push   $0x70205b20
jb     80897e3 <_IO_stdin_used+0x6f5f>
je     80897e5 <_IO_stdin_used+0x6f61>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
dec    %ecx
inc    %esp
and    %bh,(%edx)
cmp    $0x73205b20,%eax
jb     80897f6 <_IO_stdin_used+0x6f72>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x74(%ebx,%esi,2)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     808981e <_IO_stdin_used+0x6f9a>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
sub    $0x544f5250,%eax
dec    %edi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x70(%ebx)
imul   $0x20495053,(%eax),%esp
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x41205b20,%eax
dec    %esp
inc    %edi
dec    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
inc    %ecx
dec    %esp
inc    %edi
dec    %edi
sub    $0x454d414e,%eax
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x4d59454b,%eax
inc    %ecx
push   %esp
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x4e555254,%eax
inc    %ebx
sub    $0x204e454c,%eax
jl     8089822 <_IO_stdin_used+0x6f9e>
add    %al,(%eax)
add    %al,(%eax)
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x454d414e,%eax
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x4d59454b,%eax
inc    %ecx
push   %esp
and    %al,0x4c(%ecx)
inc    %edi
dec    %edi
sub    $0x2d564349,%eax
dec    %esp
inc    %ebp
dec    %esi
and    %bh,0x0(%edx,%ecx,1)
add    %cl,0x4f(%ebp)
inc    %esp
inc    %ebp
and    %bh,(%edx)
cmp    $0x61727420,%eax
outsb  %ds:(%esi),(%dx)
jae    80898c2 <_IO_stdin_used+0x703e>
outsl  %ds:(%esi),(%dx)
jb     80898c9 <_IO_stdin_used+0x7045>
and    %bh,0x74(%eax,%eiz,1)
jne    80898c9 <_IO_stdin_used+0x7045>
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %bh,0x62(%eax,%eiz,1)
gs
gs
je     8089886 <_IO_stdin_used+0x7002>
jl     8089888 <_IO_stdin_used+0x7004>
jb     80898d9 <_IO_stdin_used+0x7055>
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
pop    %edi
je     80898e4 <_IO_stdin_used+0x7060>
imul   $0xa7265,0x67(%edi),%esp
add    %al,(%eax)
add    %al,0x4c(%esi)
inc    %ecx
inc    %edi
and    %bh,(%edx)
cmp    $0x656f6e20,%eax
arpl   %bp,0x20(%esi)
jl     80898ac <_IO_stdin_used+0x7028>
fs arpl %sp,%fs:%gs:0x70(%ecx)
sub    $0x70637364,%eax
and    %bh,0x6e(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
jo     808990a <_IO_stdin_used+0x7086>
je     8089914 <_IO_stdin_used+0x7090>
imul   $0x77207c20,%fs:0x63(%ebx),%esi
imul   $0x20766365,0x72(%esp,%eiz,2),%ebp
jl     80898d1 <_IO_stdin_used+0x704d>
imul   $0x207c2070,0x6d(%ebx),%esp
popa
sub    $0x6e75,%ax
jae    808992f <_IO_stdin_used+0x70ab>
arpl   %sp,%gs:(%eax)
jl     80898e4 <_IO_stdin_used+0x7060>
popa
insb   (%dx),%es:(%edi)
imul   $0x45000a34,0x6e(%edi),%esp
pop    %eax
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x45205b20,%eax
pop    %eax
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
inc    %ebp
pop    %eax
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
or     (%eax),%al
add    %al,0x58(%ebp)
push   %esp
push   %edx
inc    %ecx
sub    $0x47414c46,%eax
and    %bh,(%edx)
cmp    $0x6e6f6420,%eax
je     8089940 <_IO_stdin_used+0x70bc>
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
sub    $0x70637364,%eax
or     (%eax),%al
add    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bh,(%edx)
cmp    $0x73205b20,%eax
jb     8089994 <_IO_stdin_used+0x7110>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
pop    %ebx
das
push   %eax
dec    %esp
inc    %ebp
dec    %esi
pop    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x74(%ebx,%esi,2)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
pop    %ebx
das
push   %eax
dec    %esp
inc    %ebp
dec    %esi
pop    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %al,0x56(%ebp,%eax,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %dl,0x50(%ebp)
push   %ebx
push   %eax
inc    %ebp
inc    %ebx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
jge    808998f <_IO_stdin_used+0x710b>
pop    %ebx
and    %dh,0x70(%ebx)
outsl  %ds:(%esi),(%dx)
jb     80899ea <_IO_stdin_used+0x7166>
and    %dl,0x4f(%eax)
push   %edx
push   %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6f(%eax,%esi,2)
jb     80899f9 <_IO_stdin_used+0x7175>
and    %dl,0x4f(%eax)
push   %edx
push   %esp
and    %bl,0x20(%ebp)
jl     8089999 <_IO_stdin_used+0x7115>
add    %ah,(%eax)
jge    80899b3 <_IO_stdin_used+0x712f>
pop    %ebx
and    %dh,0x70(%ecx,%edi,2)
and    %cl,%gs:0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6f(%ebx)
fs and %cl,%fs:%gs:0x55(%esi)
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bl,0x20(%ebp)
jl     80899bf <_IO_stdin_used+0x713b>
add    %al,(%eax)
add    %ah,(%eax)
pop    %ebx
and    %ch,0x65(%ebx)
jns    80899df <_IO_stdin_used+0x715b>
jnp    80899e1 <_IO_stdin_used+0x715d>
inc    %esp
dec    %edi
push   %esp
push   %esp
inc    %ebp
inc    %esp
sub    $0x44415551,%eax
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0x20(%ebp)
pop    %ebp
and    %bh,0x50(%eax,%eiz,1)
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
dec    %esp
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x4c205b20,%eax
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x494c2074,0x69(%ebp),%ebp
dec    %ebp
dec    %ecx
push   %esp
or     (%eax),%al
add    %al,(%eax)
dec    %esp
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
and    %bh,(%edx)
cmp    $0x74207b20,%eax
imul   $0x666f732d,0x65(%ebp),%ebp
je     8089a49 <_IO_stdin_used+0x71c5>
jl     8089a4b <_IO_stdin_used+0x71c7>
je     8089a96 <_IO_stdin_used+0x7212>
insl   (%dx),%es:(%edi)
gs
sub    $0x64726168,%eax
and    %bh,0x74(%eax,%eiz,1)
imul   $0x6573752d,0x65(%ebp),%ebp
sub    $0x74666f73,%eax
and    %bh,0x74(%eax,%eiz,1)
imul   $0x6573752d,0x65(%ebp),%ebp
sub    $0x64726168,%eax
and    %bh,0x20(%ebp)
push   %ebx
inc    %ebp
inc    %ebx
dec    %edi
dec    %esi
inc    %esp
push   %ebx
and    %bh,0x0(%edx,%ecx,1)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,0x20(%ebx)
bound  %edi,0x74(%ecx)
gs
sub    $0x74666f73,%eax
and    %bh,0x62(%eax,%eiz,1)
jns    8089af2 <_IO_stdin_used+0x726e>
gs
sub    $0x64726168,%eax
and    %bh,0x20(%ebp)
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
and    %bh,0x7b(%eax,%eiz,1)
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     8089ac4 <_IO_stdin_used+0x7240>
jae    8089b08 <_IO_stdin_used+0x7284>
data16
je     8089abc <_IO_stdin_used+0x7238>
jl     8089abe <_IO_stdin_used+0x723a>
jo     8089b01 <_IO_stdin_used+0x727d>
arpl   %bp,0x65(%ebx)
je     8089ad2 <_IO_stdin_used+0x724e>
push   $0x20647261
jge    8089acc <_IO_stdin_used+0x7248>
inc    %ebx
dec    %edi
push   %ebp
dec    %esi
push   %esp
or     (%eax),%al
add    %al,0x4e(%ebp)
inc    %ebx
inc    %ecx
push   %eax
and    %bh,(%edx)
cmp    $0x65207b20,%eax
jae    8089b32 <_IO_stdin_used+0x72ae>
imul   $0x7c207064,0x75(%esi),%ebp
and    %ah,0x73(%ebp)
jo     8089b37 <_IO_stdin_used+0x72b3>
outsb  %ds:(%esi),(%dx)
jne    8089b35 <_IO_stdin_used+0x72b1>
jo     8089b00 <_IO_stdin_used+0x727c>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x53207d20,0x65(%ebx),%ebp
push   %eax
dec    %edi
push   %edx
push   %esp
and    %al,0x4f(%eax,%edx,2)
push   %edx
push   %esp
and    %cl,0x41(%edi)
inc    %esp
inc    %esp
push   %edx
or     (%eax),%al
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    8089b20 <_IO_stdin_used+0x729c>
jne    8089b70 <_IO_stdin_used+0x72ec>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     8089b7d <_IO_stdin_used+0x72f9>
jns    8089b2d <_IO_stdin_used+0x72a9>
and    0x70(%ecx),%ch
and    %bh,0x66(%eax)
jb     8089b82 <_IO_stdin_used+0x72fe>
and    %dh,0x74(%ebx)
popa
je     8089b80 <_IO_stdin_used+0x72fc>
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8089b43 <_IO_stdin_used+0x72bf>
or     %cs:(%eax),%al
pop    %ss
aad    $0x6
or     %cl,-0x2d(%edi)
push   %es
or     %cl,-0x288af7fa(%edi,%edx,8)
push   %es
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %dl,(%edi)
aad    $0x6
or     %bh,(%esi)
xlat   %ds:(%ebx)
push   %es
or     %dl,(%edi)
aad    $0x6
or     %cl,-0x2d(%edi)
push   %es
or     %al,0x52(%ecx,%ecx,2)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089be6 <_IO_stdin_used+0x7362>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089bea <_IO_stdin_used+0x7366>
insb   (%dx),%es:(%edi)
imul   $0x6e6961,0x6d(%eax,%eax,1),%esp
push   %eax
push   %esp
pop    %ecx
push   %eax
inc    %ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089c02 <_IO_stdin_used+0x737e>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089c06 <_IO_stdin_used+0x7382>
insb   (%dx),%es:(%edi)
imul   $0x6c61636f,0x6c(%eax,%eax,1),%esp
outsl  %ds:(%esi),(%dx)
imul   $0x69,(%eax),%eax
outsb  %ds:(%esi),(%dx)
fs
gs
js     8089bb7 <_IO_stdin_used+0x7333>
dec    %ecx
dec    %esi
inc    %esp
inc    %ebp
pop    %eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089c27 <_IO_stdin_used+0x73a3>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089c2b <_IO_stdin_used+0x73a7>
insb   (%dx),%es:(%edi)
imul   $0x65707974,0x70(%eax,%eax,1),%esp
add    %ah,0x63(%ecx)
je     8089c41 <_IO_stdin_used+0x73bd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8089be1 <_IO_stdin_used+0x735d>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x41,(%eax),%eax
inc    %ebx
push   %esp
dec    %ecx
dec    %edi
dec    %esi
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089c58 <_IO_stdin_used+0x73d4>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089c5c <_IO_stdin_used+0x73d8>
insb   (%dx),%es:(%edi)
imul   $0x4f495250,0x0(%edx,%ecx,1),%esp
push   %edx
dec    %ecx
push   %esp
pop    %ecx
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089c73 <_IO_stdin_used+0x73ef>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089c77 <_IO_stdin_used+0x73f3>
insb   (%dx),%es:(%edi)
imul   $0x6120746f,0x4e(%eax,%eax,1),%esp
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x3025203a,0x79(%ebx),%esp
cmp    %bh,0x20(%eax)
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %dl,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x66756220,0x79(%ebx),%esp
data16
gs
jb     8089c66 <_IO_stdin_used+0x73e2>
outsl  %ds:(%esi),(%dx)
jbe    8089cae <_IO_stdin_used+0x742a>
jb     8089cb1 <_IO_stdin_used+0x742d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8089c59 <_IO_stdin_used+0x73d5>
add    %al,0x6c(%esi)
jne    8089cc7 <_IO_stdin_used+0x7443>
push   $0x6c6f7020
imul   $0x7325000a,0x79(%ebx),%esp
cmp    (%eax),%ah
pop    %eax
inc    %esi
push   %edx
dec    %ebp
inc    %ecx
pop    %edi
dec    %ebp
inc    %ecx
push   %edx
dec    %ebx
and    %ah,0x61(%esi)
imul   $0x6d74000a,0x64(%ebp,%eiz,2),%ebp
jo     8089ce5 <_IO_stdin_used+0x7461>
add    %ch,0x76(%ebp,%eiz,2)
gs
insb   (%dx),%es:(%edi)
add    %dh,0x65(%edx)
jno    8089cf9 <_IO_stdin_used+0x7475>
imul   $0x454c0064,0x65(%edx),%esi
push   %esi
inc    %ebp
dec    %esp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    8089cf9 <_IO_stdin_used+0x7475>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    8089cfd <_IO_stdin_used+0x7479>
insb   (%dx),%es:(%edi)
imul   $0x4c504d54,0x0(%edx,%ecx,1),%esp
add    %dl,0x50(%ebx)
inc    %esp
imul   $0x57203a6f,0x66(%esi),%ebp
jb     8089d21 <_IO_stdin_used+0x749d>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%si)
outsb  %ds:(%esi),(%dx)
and    %ah,0x9000a64
and    %dl,0x50(%ebx)
inc    %esp
add    %ah,(%eax)
dec    %ecx
dec    %esi
and    %ah,(%eax)
and    $0x4f200064,%eax
push   %ebp
push   %esp
and    %ah,0x46200064
push   %edi
inc    %esp
and    %ah,0x28200064
push   %ebx
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x3a(%ebx)
add    %ah,(%eax)
dec    %ecx
dec    %esi
and    %ah,0x20090064
push   %ebx
push   %eax
inc    %esp
and    %ah,0x75(%edx)
arpl   %bp,0x65(%ebx)
je     8089d6a <_IO_stdin_used+0x74e6>
cmp    (%eax),%al
push   %ebp
jae    8089d5d <_IO_stdin_used+0x74d9>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %ah,0x6f(%ebx)
jne    8089d7a <_IO_stdin_used+0x74f6>
je     8089d18 <_IO_stdin_used+0x7494>
add    %al,0x52(%ecx,%ecx,2)
and    %bh,(%edx)
cmp    $0x206e6920,%eax
jl     8089d3b <_IO_stdin_used+0x74b7>
outsl  %ds:(%esi),(%dx)
jne    8089d92 <_IO_stdin_used+0x750e>
and    %bh,0x66(%eax,%eiz,1)
ja     8089d88 <_IO_stdin_used+0x7504>
or     (%eax),%al
push   %eax
push   %esp
pop    %ecx
push   %eax
inc    %ebp
and    %bh,(%edx)
cmp    $0x69616d20,%eax
outsb  %ds:(%esi),(%dx)
and    %bh,0x73(%eax,%eiz,1)
jne    8089d9b <_IO_stdin_used+0x7517>
or     (%eax),%al
inc    %ecx
inc    %ebx
push   %esp
dec    %ecx
dec    %edi
dec    %esi
and    %bh,(%edx)
cmp    $0x6c6c6120,%eax
outsl  %ds:(%esi),(%dx)
ja     8089d6b <_IO_stdin_used+0x74e7>
jl     8089d6d <_IO_stdin_used+0x74e9>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x0,(%edx),%ecx
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
and    %bh,(%edx)
cmp    $0x636f6c20,%eax
popa
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x7c,(%eax),%esp
and    %ch,0x63(%ecx)
insl   (%dx),%es:(%edi)
jo     8089d75 <_IO_stdin_used+0x74f1>
add    %cl,0x56(%ebp,%eax,2)
inc    %ebp
dec    %esp
and    %bh,(%edx)
cmp    $0x71657220,%eax
jne    8089de3 <_IO_stdin_used+0x755f>
jb     8089de1 <_IO_stdin_used+0x755d>
and    %bh,%fs:0x75(%eax,%eiz,1)
jae    8089de8 <_IO_stdin_used+0x7564>
or     (%eax),%al
add    %al,(%eax)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    8089df9 <_IO_stdin_used+0x7575>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6c(%ebp,%eiz,2)
gs
je     8089e02 <_IO_stdin_used+0x757e>
sub    $0x206c6c61,%eax
jb     8089e09 <_IO_stdin_used+0x7585>
jno    8089e1b <_IO_stdin_used+0x7597>
gs
jae    8089e1d <_IO_stdin_used+0x7599>
add    %al,(%eax)
add    %dh,0x6f(%edi,%ebp,2)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     8089e29 <_IO_stdin_used+0x75a5>
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
inc    %ecx
pop    %edi
push   %eax
dec    %edi
dec    %esp
dec    %ecx
inc    %ebx
pop    %ecx
pop    %edi
push   %esp
pop    %ecx
push   %eax
inc    %ebp
and    %ch,0x6e(%ebp,%eiz,2)
or     (%eax),%al
add    %al,(%eax)
add    %al,0x75(%edx)
addr32 addr16 jns 8089df6 <_IO_stdin_used+0x7572>
pop    %eax
inc    %esi
push   %edx
dec    %ebp
pop    %edi
dec    %ebp
push   %ebx
inc    %edi
pop    %edi
inc    %esp
inc    %ebp
dec    %esp
push   %eax
dec    %edi
dec    %esp
dec    %ecx
inc    %ebx
pop    %ecx
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %bl,0x46(%eax)
push   %edx
dec    %ebp
inc    %ecx
pop    %edi
push   %eax
dec    %edi
dec    %esp
dec    %ecx
inc    %ebx
pop    %ecx
or     (%eax),%al
add    %cl,0x6f(%esi)
je     8089e20 <_IO_stdin_used+0x759c>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8089e6c <_IO_stdin_used+0x75e8>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8089e7a <_IO_stdin_used+0x75f6>
popa
je     8089e79 <_IO_stdin_used+0x75f5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
inc    %esp
dec    %ecx
push   %edx
and    %ch,0x73(%ecx)
and    %dh,0x65(%edx)
jno    8089e94 <_IO_stdin_used+0x7610>
imul   $0xa2e64,0x65(%edx),%esi
add    %al,(%eax)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8089e4c <_IO_stdin_used+0x75c8>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    8089e98 <_IO_stdin_used+0x7614>
push   $0x666e6920
outsl  %ds:(%esi),(%dx)
jb     8089ea6 <_IO_stdin_used+0x7622>
popa
je     8089ea5 <_IO_stdin_used+0x7621>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x45532072,%gs:0x65(%eax,%ebp,2),%esi
45
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %ch,0x72(%edi)
and    %cl,0x4e(%ecx)
inc    %esp
inc    %ebp
pop    %eax
and    %ch,0x73(%ecx)
and    %dh,0x65(%edx)
jno    8089ed5 <_IO_stdin_used+0x7651>
imul   $0xa2e64,0x65(%edx),%esi
add    %dl,0x6f(%edi,%ebp,2)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    8089e91 <_IO_stdin_used+0x760d>
je     8089ee0 <_IO_stdin_used+0x765c>
jo     8089ee1 <_IO_stdin_used+0x765d>
jae    8089eb1 <_IO_stdin_used+0x762d>
and    %ah,0x75(%edx)
data16
data16
gs
jb     8089e9f <_IO_stdin_used+0x761b>
outsl  %ds:(%esi),(%dx)
jbe    8089ee7 <_IO_stdin_used+0x7663>
jb     8089eea <_IO_stdin_used+0x7666>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8089e92 <_IO_stdin_used+0x760e>
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    8089ef0 <_IO_stdin_used+0x766c>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x61207b20,0x79(%ebx),%esp
fs and %bh,%fs:0x75(%eax,%eiz,1)
jo     8089f11 <_IO_stdin_used+0x768d>
popa
je     8089f15 <_IO_stdin_used+0x7691>
and    %bh,0x20(%ebp)
push   %ebx
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %ah,0x72(%ecx,%ebp,2)
and    %al,0x52(%ecx,%ecx,2)
and    %bl,0x20(%ebx)
arpl   %si,0x20(%eax,%edi,2)
inc    %ebx
push   %esp
pop    %eax
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x61(%ebp)
jb     8089f4d <_IO_stdin_used+0x76c9>
and    %cl,0x41(%ebp)
push   %edx
dec    %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jae    8089f59 <_IO_stdin_used+0x76d5>
and    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %bl,0x20(%ebp)
pop    %ebp
and    %bl,0x20(%ebx)
imul   $0x49207865,0x64(%esi),%ebp
dec    %esi
inc    %esp
inc    %ebp
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x74(%eax)
jns    8089f7e <_IO_stdin_used+0x76fa>
and    %dl,%gs:0x54(%eax)
pop    %ecx
push   %eax
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x63(%ecx)
je     8089f93 <_IO_stdin_used+0x770f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %al,0x43(%ecx)
push   %esp
dec    %ecx
dec    %edi
dec    %esi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
imul   $0x20797469,0x72(%edi),%ebp
push   %eax
push   %edx
dec    %ecx
dec    %edi
push   %edx
dec    %ecx
push   %esp
pop    %ecx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6c(%esi)
popa
and    %al,0x4c(%bp)
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
dec    %esp
dec    %ecx
dec    %ebp
dec    %ecx
push   %esp
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dl,0x50(%ebp,%ecx,2)
dec    %esp
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x64207b20,0x79(%ebx),%esp
gs
insb   (%dx),%es:(%edi)
gs
je     808a00b <_IO_stdin_used+0x7787>
and    %bh,0x67(%eax,%eiz,1)
gs
je     8089fcd <_IO_stdin_used+0x7749>
jge    8089fcf <_IO_stdin_used+0x774b>
jnp    8089fd1 <_IO_stdin_used+0x774d>
push   %ebx
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
fs
gs
js     8089fe2 <_IO_stdin_used+0x775e>
dec    %ecx
dec    %esi
inc    %esp
inc    %ebp
pop    %eax
and    %bh,0x20(%ebp)
imul   $0xa524944,%fs:0x20(%edx),%esi
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x74(%ebx)
js     808a002 <_IO_stdin_used+0x777e>
inc    %ebx
push   %esp
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x61(%ebp)
jb     808a059 <_IO_stdin_used+0x77d5>
and    %cl,0x41(%ebp)
push   %edx
dec    %ebx
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
popa
jae    808a065 <_IO_stdin_used+0x77e1>
and    %cl,0x41(%ebp)
push   %ebx
dec    %ebx
and    %bl,0x20(%ebp)
pop    %ebp
and    %bl,0x20(%ebx)
jo     808a07c <_IO_stdin_used+0x77f8>
jns    808a07a <_IO_stdin_used+0x77f6>
and    %dl,%gs:0x54(%eax)
pop    %ecx
push   %eax
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808a07c <_IO_stdin_used+0x77f8>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x64207b20,0x79(%ebx),%esp
gs
insb   (%dx),%es:(%edi)
gs
je     808a09b <_IO_stdin_used+0x7817>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %bh,0x6c(%eax,%eiz,1)
imul   $0x5b207d20,0x74(%ebx),%esi
and    %dl,0x45(%ebx)
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x72(%ecx,%ebp,2)
and    %al,0x52(%ecx,%ecx,2)
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6e(%ecx)
fs
gs
js     808a090 <_IO_stdin_used+0x780c>
dec    %ecx
dec    %esi
inc    %esp
inc    %ebp
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x74(%eax)
jns    808a0ee <_IO_stdin_used+0x786a>
and    %dl,%gs:0x54(%eax)
pop    %ecx
push   %eax
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x63(%ecx)
je     808a0f7 <_IO_stdin_used+0x7873>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %al,0x43(%ecx)
push   %esp
dec    %ecx
dec    %edi
dec    %esi
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x72(%eax)
imul   $0x20797469,0x72(%edi),%ebp
push   %eax
push   %edx
dec    %ecx
dec    %edi
push   %edx
dec    %ecx
push   %esp
pop    %ecx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808a118 <_IO_stdin_used+0x7894>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x756c6620,0x79(%ebx),%esp
jae    808a137 <_IO_stdin_used+0x78b3>
and    %bl,0x20(%ebx)
jo     808a148 <_IO_stdin_used+0x78c4>
jns    808a146 <_IO_stdin_used+0x78c2>
and    %dl,%gs:0x54(%eax)
pop    %ecx
push   %eax
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
dec    %ebp
push   %eax
dec    %esp
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x54205b20,%eax
dec    %ebp
push   %eax
dec    %esp
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
je     808a16e <_IO_stdin_used+0x78ea>
jo     808a16f <_IO_stdin_used+0x78eb>
and    %dl,0x50(%ebp,%ecx,2)
dec    %esp
or     (%eax),%al
add    %al,(%eax)
push   %esp
dec    %ebp
push   %eax
dec    %esp
and    %bh,(%edx)
cmp    $0x20444920,%eax
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %cl,%fs:%gs:0x4f(%ebp)
inc    %esp
inc    %ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%edx)
jno    808a194 <_IO_stdin_used+0x7910>
and    %dl,%fs:0x45(%edx)
push   %ecx
dec    %ecx
inc    %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x76(%ebp,%eiz,2)
gs
insb   (%dx),%es:(%edi)
and    %cl,0x56(%ebp,%eax,2)
inc    %ebp
dec    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808a178 <_IO_stdin_used+0x78f4>
jne    808a1c8 <_IO_stdin_used+0x7944>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     808a1d5 <_IO_stdin_used+0x7951>
jns    808a185 <_IO_stdin_used+0x7901>
and    0x70(%ecx),%ch
and    %bh,0x66(%eax)
jb     808a1da <_IO_stdin_used+0x7956>
and    %dh,0x6f(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6c656820,0x79(%ebx),%esp
jo     808a19c <_IO_stdin_used+0x7918>
or     %cs:(%eax),%al
js     808a1e5 <_IO_stdin_used+0x7961>
jb     808a1ee <_IO_stdin_used+0x796a>
pop    %edi
jo     808a1f3 <_IO_stdin_used+0x796f>
insb   (%dx),%es:(%edi)
imul   $0x7465675f,0x79(%ebx),%esp
pop    %edi
outsl  %ds:(%esi),(%dx)
jb     808a1ef <_IO_stdin_used+0x796b>
fs
gs
insb   (%dx),%es:(%edi)
gs
je     808a1fb <_IO_stdin_used+0x7977>
add    %bh,0x66(%eax)
jb     808a208 <_IO_stdin_used+0x7984>
pop    %edi
jo     808a20d <_IO_stdin_used+0x7989>
insb   (%dx),%es:(%edi)
imul   $0x646f6d5f,0x79(%ebx),%esp
imul   $0x74736400,0x79(%esi),%esp
and    %ah,0x20002073
jb     808a21a <_IO_stdin_used+0x7996>
jno    808a220 <_IO_stdin_used+0x799c>
and    %dh,%fs:(%eax)
js     808a1e1 <_IO_stdin_used+0x795d>
js     808a1be <_IO_stdin_used+0x793a>
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     808a233 <_IO_stdin_used+0x79af>
arpl   %bp,0x6c(%edi)
and    %ah,0x20002073
push   %ebx
push   %eax
dec    %ecx
and    %dh,(%eax)
js     808a1f9 <_IO_stdin_used+0x7975>
js     808a1d6 <_IO_stdin_used+0x7952>
popa
arpl   %si,0x75(%ecx)
imul   $0x20200020,0x65(%edx),%esi
jae    808a248 <_IO_stdin_used+0x79c4>
insb   (%dx),%es:(%edi)
and    %al,(%eax)
and    %ah,(%eax)
jo     808a259 <_IO_stdin_used+0x79d5>
insb   (%dx),%es:(%edi)
imul   $0x20200020,0x79(%ebx),%esp
jae    808a259 <_IO_stdin_used+0x79d5>
jno    808a216 <_IO_stdin_used+0x7992>
xor    %bh,0x25(%eax)
xor    %bh,(%eax)
jne    808a21d <_IO_stdin_used+0x7999>
add    %al,0x6c(%esi)
jne    808a275 <_IO_stdin_used+0x79f1>
push   $0x73206465
je     808a26a <_IO_stdin_used+0x79e6>
je     808a270 <_IO_stdin_used+0x79ec>
and    %al,(%eax)
jo     808a281 <_IO_stdin_used+0x79fd>
outsl  %ds:(%esi),(%dx)
je     808a281 <_IO_stdin_used+0x79fd>
and    %ah,0x72700073
outsl  %ds:(%esi),(%dx)
je     808a28a <_IO_stdin_used+0x7a06>
and    %ah,0x6c460075
jne    808a296 <_IO_stdin_used+0x7a12>
push   $0x70206465
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
imul   $0x65720020,0x79(%ebx),%esp
jo     808a2a2 <_IO_stdin_used+0x7a1e>
jb     808a2a9 <_IO_stdin_used+0x7a25>
and    %al,(%eax)
inc    %ecx
jae    808a2b3 <_IO_stdin_used+0x7a2f>
outsb  %ds:(%esi),(%dx)
arpl   %sp,(%eax)
gs
jbe    808a2a5 <_IO_stdin_used+0x7a21>
outsb  %ds:(%esi),(%dx)
je     808a263 <_IO_stdin_used+0x79df>
add    %ah,(%eax)
sub    %dh,(%eax)
js     808a26e <_IO_stdin_used+0x79ea>
js     808a274 <_IO_stdin_used+0x79f0>
and    %al,(%eax)
and    %dh,0x65(%edx)
jo     808a2be <_IO_stdin_used+0x7a3a>
popa
jns    808a275 <_IO_stdin_used+0x79f1>
jne    808a2c7 <_IO_stdin_used+0x7a43>
fs
popa
je     808a2c0 <_IO_stdin_used+0x7a3c>
and    %al,(%eax)
and    %dh,0x6d(%ecx,%ebp,2)
gs
jb     808a284 <_IO_stdin_used+0x7a00>
gs
js     808a2d7 <_IO_stdin_used+0x7a53>
imul   $0x20002064,0x65(%edx),%esi
jo     808a2df <_IO_stdin_used+0x7a5b>
insb   (%dx),%es:(%edi)
imul   $0x64707520,0x79(%ebx),%esp
popa
je     808a2e0 <_IO_stdin_used+0x7a5c>
and    %al,%fs:(%eax)
dec    %ebp
popa
jo     808a2f2 <_IO_stdin_used+0x7a6e>
imul   $0x61686320,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %al,%gs:(%bx,%si)
cmp    0x3e2d2064,%ah
and    %al,(%eax)
cmp    0x90a64,%ah
popa
arpl   %si,0x75(%ecx)
imul   $0x70786500,0x65(%edx),%esi
imul   $0x415300,0x65(%edx),%esi
popa
gs
jbe    808a317 <_IO_stdin_used+0x7a93>
outsb  %ds:(%esi),(%dx)
je     808a2b5 <_IO_stdin_used+0x7a31>
jb     808a31c <_IO_stdin_used+0x7a98>
jo     808a328 <_IO_stdin_used+0x7aa4>
jb     808a32f <_IO_stdin_used+0x7aab>
add    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%ebp)
jae    808a33b <_IO_stdin_used+0x7ab7>
popa
cmp    %gs:(%bx,%si),%ah
and    $0x20643830,%eax
xor    %bh,0x25(%eax)
xor    %bh,(%eax)
js     808a2f9 <_IO_stdin_used+0x7a75>
xor    %bh,0x25(%eax)
xor    %bh,(%eax)
js     808a2ea <_IO_stdin_used+0x7a66>
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808a348 <_IO_stdin_used+0x7ac4>
cmp    %gs:(%bx,%si),%ah
imul   $0x6d726678,0x20(%eax),%esi
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
imul   $0x61205b20,0x72(%edi,%ebp,2),%esi
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %bh,0x4c(%eax,%eiz,1)
dec    %ecx
push   %ebx
push   %esp
outsl  %ds:(%esi),(%dx)
pop    %ax
inc    %esi
push   %edx
dec    %ebp
sub    $0x454a424f,%eax
inc    %ebx
push   %esp
push   %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
jb     808a386 <_IO_stdin_used+0x7b02>
jne    808a38e <_IO_stdin_used+0x7b0a>
outsb  %gs:(%esi),(%dx)
je     808a345 <_IO_stdin_used+0x7ac1>
and    0x69202273,%ah
jae    808a34d <_IO_stdin_used+0x7ac9>
jne    808a39d <_IO_stdin_used+0x7b19>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     808a3aa <_IO_stdin_used+0x7b26>
jns    808a35a <_IO_stdin_used+0x7ad6>
and    0x70(%ecx),%ch
and    %bh,0x66(%eax)
jb     808a3af <_IO_stdin_used+0x7b2b>
and    %ch,0x6f(%ebp)
outsb  %ds:(%esi),(%dx)
imul   $0x6c656820,0x72(%edi,%ebp,2),%esi
jo     808a372 <_IO_stdin_used+0x7aee>
or     %cs:(%eax),%al
add    %al,-0x7ff7f8ef(%eax)
adc    %eax,(%edi)
or     %bh,-0x67f7f8ea(%eax)
adc    %eax,(%edi)
or     %bl,-0x47f7f8ef(%eax)
push   %ss
pop    %es
or     %bh,-0x4ff7f8ea(%eax)
adc    %eax,(%edi)
or     %al,-0x67f7f8ef(%eax)
adc    %eax,(%edi)
or     %al,-0x67f7f8ef(%eax)
adc    %eax,(%edi)
or     %ah,0x20080713(%eax)
adc    $0x7,%al
or     %bl,%al
adc    $0x7,%al
or     %bh,-0x37f7f8ea(%eax)
adc    $0x16b80807,%eax
pop    %es
or     %bh,-0x47f7f8ea(%eax)
push   %ss
pop    %es
or     %bh,-0x47f7f8ea(%eax)
push   %ss
pop    %es
or     %cl,0x10(%eax)
pop    %es
or     %cl,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x207b2073,%eax
add    %bh,0x20(%ebp)
add    %ah,0x75253a75
and    %al,(%eax)
jo     808a43b <_IO_stdin_used+0x7bb7>
outsl  %ds:(%esi),(%dx)
je     808a43b <_IO_stdin_used+0x7bb7>
arpl   %bp,0x6c(%edi)
and    %bh,(%eax)
xor    %dh,(%edx)
xor    %esi,%cs:0x20(%ecx)
add    %dl,0x45(%edx)
dec    %edi
push   %edx
inc    %esp
inc    %ebp
push   %edx
pop    %edi
dec    %eax
inc    %esp
push   %edx
and    $0x56470073,%eax
push   %edx
push   %eax
and    $0x564d0073,%eax
push   %edx
push   %eax
and    $0x4f4c0073,%eax
dec    %edi
push   %ebx
inc    %ebp
pop    %edi
inc    %edx
dec    %ecx
dec    %esi
inc    %esp
dec    %ecx
dec    %esi
inc    %edi
and    $0x72700073,%eax
outsl  %ds:(%esi),(%dx)
je     808a478 <_IO_stdin_used+0x7bf4>
arpl   %bp,0x6c(%edi)
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808a475 <_IO_stdin_used+0x7bf1>
insb   (%dx),%es:(%edi)
imul   $0x73692064,0x69(%eax,%eax,1),%esp
and    %ch,0x6e(%ecx)
jbe    808a483 <_IO_stdin_used+0x7bff>
insb   (%dx),%es:(%edi)
imul   $0x64726f65,0x72(%eax,%eax,1),%esp
gs
jb     808a48d <_IO_stdin_used+0x7c09>
push   $0x67007264
jbe    808a4a7 <_IO_stdin_used+0x7c23>
jo     808a437 <_IO_stdin_used+0x7bb3>
insl   (%dx),%es:(%edi)
jbe    808a4ac <_IO_stdin_used+0x7c28>
jo     808a43c <_IO_stdin_used+0x7bb8>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jae    808a4a6 <_IO_stdin_used+0x7c22>
pop    %edi
bound  %ebp,0x6e(%ecx)
imul   $0x766e6900,%fs:0x67(%esi),%ebp
popa
insb   (%dx),%es:(%edi)
imul   $0x6572676e,0x69(%eax,%eiz,1),%esp
jae    808a4cc <_IO_stdin_used+0x7c48>
sub    $0x2d736f71,%eax
insl   (%dx),%es:(%edi)
popa
jo     808a462 <_IO_stdin_used+0x7bde>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x67(%ebp)
jb     808a4d3 <_IO_stdin_used+0x7c4f>
jae    808a4e3 <_IO_stdin_used+0x7c5f>
sub    $0x2d736f71,%eax
insl   (%dx),%es:(%edi)
popa
jo     808a479 <_IO_stdin_used+0x7bf5>
jbe    808a4e7 <_IO_stdin_used+0x7c63>
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
jne    808a4ef <_IO_stdin_used+0x7c6b>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0xa3f2273,%eax
add    %al,(%eax)
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
cs cs and %dh,%cs:0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
and    %bl,0x20(%ebx)
jo     808a51e <_IO_stdin_used+0x7c9a>
outsl  %ds:(%esi),(%dx)
je     808a51e <_IO_stdin_used+0x7c9a>
arpl   %bp,0x6c(%edi)
and    %dl,0x4c(%esi)
inc    %ecx
dec    %esi
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
and    %bl,0x20(%ebp)
imul   $0x494e414c,0x56(%eax,%eiz,1),%esp
inc    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %al,0x4c(%esi)
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0xa(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6e(%ecx)
addr16 jb 808a562 <_IO_stdin_used+0x7cde>
jae    808a572 <_IO_stdin_used+0x7cee>
sub    $0x2d736f71,%eax
insl   (%dx),%es:(%edi)
popa
jo     808a528 <_IO_stdin_used+0x7ca4>
push   %ecx
dec    %edi
push   %ebx
sub    $0x2050414d,%eax
pop    %ebp
and    %bl,0x20(%ebx)
gs
addr16 jb 808a57d <_IO_stdin_used+0x7cf9>
jae    808a58d <_IO_stdin_used+0x7d09>
sub    $0x2d736f71,%eax
insl   (%dx),%es:(%edi)
popa
jo     808a543 <_IO_stdin_used+0x7cbf>
push   %ecx
dec    %edi
push   %ebx
sub    $0x2050414d,%eax
pop    %ebp
or     (%edx),%cl
push   %esi
dec    %esp
inc    %ecx
dec    %esi
push   %eax
push   %edx
dec    %edi
push   %esp
dec    %edi
cmp    (%eax),%ah
pop    %ebx
and    %bh,(%eax)
xor    %dh,(%edx)
xor    %edx,%cs:0x20(%ecx)
das
and    %bh,(%eax)
xor    %dh,(%edx)
xor    %esp,%cs:0x64(%ecx)
and    %bl,0xa(%ebp)
push   %esi
dec    %esp
inc    %ecx
dec    %esi
dec    %ecx
inc    %esp
and    %bh,(%edx)
cmp    $0x342d3020,%eax
xor    %bh,(%ecx)
xor    $0x414c460a,%eax
inc    %edi
sub    $0x5453494c,%eax
and    %bh,(%edx)
cmp    $0x46205b20,%eax
dec    %esp
inc    %ecx
inc    %edi
sub    $0x5453494c,%eax
and    %bl,0x20(%ebp)
inc    %esi
dec    %esp
inc    %ecx
inc    %edi
or     0x4c(%esi),%al
inc    %ecx
inc    %edi
and    %bh,(%edx)
cmp    $0x72205b20,%eax
outsl  %gs:(%esi),(%dx)
jb     808a5f2 <_IO_stdin_used+0x7d6e>
gs
jb     808a5f0 <_IO_stdin_used+0x7d6c>
push   $0x7b207264
and    %ch,0x6e(%edi)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
and    %bl,0x20(%ebx)
addr16 jbe 808a61b <_IO_stdin_used+0x7d97>
jo     808a5cb <_IO_stdin_used+0x7d47>
jnp    808a5cd <_IO_stdin_used+0x7d49>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
jbe    808a631 <_IO_stdin_used+0x7dad>
jo     808a5e1 <_IO_stdin_used+0x7d5d>
jnp    808a5e3 <_IO_stdin_used+0x7d5f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jae    808a644 <_IO_stdin_used+0x7dc0>
pop    %edi
bound  %ebp,0x6e(%ecx)
imul   $0x6f207b20,%fs:0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     0x4f(%ecx),%dl
push   %ebx
sub    $0x2050414d,%eax
cmp    0x51205b20,%bh
dec    %edi
push   %ebx
sub    $0x2050414d,%eax
pop    %ebp
and    %dl,0x4f(%ecx)
push   %ebx
sub    $0x5050414d,%eax
dec    %ecx
dec    %esi
inc    %edi
or     0x4f(%ecx),%dl
push   %ebx
sub    $0x5050414d,%eax
dec    %ecx
dec    %esi
inc    %edi
and    %bh,(%edx)
cmp    $0x4f524620,%eax
dec    %ebp
cmp    0xa(%edi,%ecx,2),%dl
add    %dh,0x65(%esi)
je     808a69e <_IO_stdin_used+0x7e1a>
add    %al,(%eax)
push   %ebp
jae    808a69c <_IO_stdin_used+0x7e18>
cmp    %gs:(%bx,%si),%ah
imul   $0x6b6e696c,0x20(%eax),%esi
and    %bh,(%edi,%ebp,2)
jo     808a6bf <_IO_stdin_used+0x7e3b>
imul   $0x74203e73,0x6e(%edi),%ebp
jns    808a6c4 <_IO_stdin_used+0x7e40>
and    %dh,%gs:0x65(%esi)
je     808a6c2 <_IO_stdin_used+0x7e3e>
and    %bl,0x70(%ebx)
gs
gs
jb     808a681 <_IO_stdin_used+0x7dfd>
cmp    $0x6f,%al
jo     808a6d9 <_IO_stdin_used+0x7e55>
imul   $0xa5d3e73,0x6e(%edi),%ebp
push   %esp
outsl  %ds:(%esi),(%dx)
and    %ah,0x65(%edi)
je     808a693 <_IO_stdin_used+0x7e0f>
cmp    $0x6f,%al
jo     808a6eb <_IO_stdin_used+0x7e67>
imul   $0x74203e73,0x6e(%edi),%ebp
jns    808a6f0 <_IO_stdin_used+0x7e6c>
and    %ah,%gs:(%edi)
imul   $0x6b6e696c,0x20(%eax),%esi
and    %ah,0x64(%ecx)
and    %ch,%fs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     808a6bb <_IO_stdin_used+0x7e37>
add    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808a700 <_IO_stdin_used+0x7e7c>
and    %ah,0x6c002073
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x64002073
gs
jbe    808a6ce <_IO_stdin_used+0x7e4a>
and    $0x74002075,%eax
outsl  %ds:(%esi),(%dx)
jae    808a6d6 <_IO_stdin_used+0x7e52>
add    %ch,0x6f(%esi)
jo     808a728 <_IO_stdin_used+0x7ea4>
je     808a732 <_IO_stdin_used+0x7eae>
imul   $0x6b690020,%fs:0x63(%ebx),%esi
gs
jns    808a6e8 <_IO_stdin_used+0x7e64>
and    $0x6f002073,%eax
imul   $0x20,0x79(%ebp),%esp
and    $0x69002073,%eax
jae    808a73d <_IO_stdin_used+0x7eb9>
jno    808a6fa <_IO_stdin_used+0x7e76>
add    %ch,0x73(%edi)
gs
jno    808a700 <_IO_stdin_used+0x7e7c>
add    %ch,0x63(%ecx)
jae    808a75a <_IO_stdin_used+0x7ed6>
insl   (%dx),%es:(%edi)
and    %al,(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %si,0x75(%ebx)
insl   (%dx),%es:(%edi)
and    %al,(%eax)
je     808a765 <_IO_stdin_used+0x7ee1>
insb   (%dx),%es:(%edi)
add    %dl,0x4c(%esp,%edx,2)
and    %ch,0x75(%ebp)
jae    808a76f <_IO_stdin_used+0x7eeb>
and    %ah,0x65(%edx)
and    %bh,0x35353220(,%edi,1)
or     (%eax),%al
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     808a736 <_IO_stdin_used+0x7eb2>
gs
js     808a782 <_IO_stdin_used+0x7efe>
jae    808a78f <_IO_stdin_used+0x7f0b>
imul   $0x6e757420,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %al,(%eax)
add    %cl,0x6e(%ecx)
jbe    808a795 <_IO_stdin_used+0x7f11>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ah,0x6f(%esi)
jb     808a762 <_IO_stdin_used+0x7ede>
and    0x65(%ebx),%ch
jns    808a769 <_IO_stdin_used+0x7ee5>
cmp    (%eax),%ah
and    0x203b2273,%ah
imul   $0x6c756f68,0x73(%eax,%eiz,1),%esi
and    %ah,%fs:0x65(%edx)
and    %ah,0x6e(%ecx)
and    %dh,0x6e(%ebp)
jae    808a7cc <_IO_stdin_used+0x7f48>
outsb  %ds:(%si),(%dx)
gs and %ch,%fs:%gs:0x6e(%ecx)
je     808a7d1 <_IO_stdin_used+0x7f4d>
addr16
gs
jb     808a77a <_IO_stdin_used+0x7ef6>
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808a7d8 <_IO_stdin_used+0x7f54>
cmp    %gs:(%bx,%si),%ah
imul   $0x6b6e696c,0x20(%eax),%esi
and    %bh,0x20(%ebx)
popa
fs and %bh,%fs:0x73(%eax,%eiz,1)
gs
je     808a7af <_IO_stdin_used+0x7f2b>
jl     808a7b1 <_IO_stdin_used+0x7f2d>
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %bh,%gs:0x20(%si)
jb     808a801 <_IO_stdin_used+0x7f7d>
jo     808a80a <_IO_stdin_used+0x7f86>
popa
arpl   %sp,0x20(%ebp)
jl     808a7c4 <_IO_stdin_used+0x7f40>
fs
gs
insb   (%dx),%es:(%edi)
and    %bh,0x20(%ebp)
dec    %esi
inc    %ecx
dec    %ebp
inc    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808a835 <_IO_stdin_used+0x7fb1>
jo     808a823 <_IO_stdin_used+0x7f9f>
and    %bh,0x20(%ebx)
addr16 jb 808a829 <_IO_stdin_used+0x7fa5>
and    %bh,0x67(%eax,%eiz,1)
jb     808a82f <_IO_stdin_used+0x7fab>
je     808a82d <_IO_stdin_used+0x7fa9>
jo     808a7ee <_IO_stdin_used+0x7f6a>
jge    808a7f0 <_IO_stdin_used+0x7f6c>
pop    %ebx
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808a83d <_IO_stdin_used+0x7fb9>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
dec    %edi
push   %ebx
and    %ah,(%eax)
cmp    0x4e207b20,%bh
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0x69(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
push   $0x74697265
and    %bh,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
and    %ah,0x72(%edx)
outsl  %ds:(%esi),(%dx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     808a844 <_IO_stdin_used+0x7fc0>
je     808a89b <_IO_stdin_used+0x8017>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %dh,0x65(%edx)
jno    808a8a4 <_IO_stdin_used+0x8020>
imul   $0x20612073,0x65(%edx),%esi
jae    808a8a7 <_IO_stdin_used+0x8023>
jne    808a8ac <_IO_stdin_used+0x8028>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     808a8a7 <_IO_stdin_used+0x8023>
jae    808a8b7 <_IO_stdin_used+0x8033>
or     %cs:(%eax),%al
dec    %esp
dec    %edi
dec    %edi
push   %eax
inc    %edx
inc    %ecx
inc    %ebx
dec    %ebx
add    %cl,0x53(%ecx,%ecx,2)
push   %esp
inc    %ebp
dec    %esi
sub    $0x594c4e4f,%eax
add    %dl,0x49(%edx,%edx,2)
push   %eax
dec    %esp
inc    %ebp
sub    $0x504d4153,%eax
dec    %esp
dec    %ecx
dec    %esi
inc    %edi
add    %cl,0x4e(%edi)
inc    %ebp
sub    $0x544f4853,%eax
add    %al,0x45(%edx)
push   %edx
push   %edx
sub    $0x4f504552,%eax
push   %edx
push   %esp
dec    %ecx
dec    %esi
inc    %edi
add    %ch,(%eax)
bound  %esp,0x72(%ebp)
jb     808a8b7 <_IO_stdin_used+0x8033>
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     808a8f5 <_IO_stdin_used+0x8071>
jb     808a8b2 <_IO_stdin_used+0x802e>
je     808a90c <_IO_stdin_used+0x8088>
and    %ah,0x78722064
and    %ah,0x202964
jb     808a907 <_IO_stdin_used+0x8083>
jae    808a918 <_IO_stdin_used+0x8094>
popa
jb     808a91b <_IO_stdin_used+0x8097>
sub    $0x2520736d,%eax
and    %al,%fs:(%eax)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
and    $0x69620064,%eax
je     808a933 <_IO_stdin_used+0x80af>
popa
je     808a929 <_IO_stdin_used+0x80a5>
add    %ch,0x6e(%ecx)
jbe    808a92a <_IO_stdin_used+0x80a6>
insb   (%dx),%es:(%edi)
imul   $0x72746962,0x22(%eax,%eiz,1),%esp
popa
je     808a93a <_IO_stdin_used+0x80b6>
and    (%eax),%ah
jbe    808a93a <_IO_stdin_used+0x80b6>
insb   (%dx),%es:(%edi)
jne    808a941 <_IO_stdin_used+0x80bd>
or     (%eax),%al
jae    808a941 <_IO_stdin_used+0x80bd>
insl   (%dx),%es:(%edi)
jo     808a94f <_IO_stdin_used+0x80cb>
gs
sub    $0x6e696f70,%eax
je     808a8eb <_IO_stdin_used+0x8067>
je     808a95e <_IO_stdin_used+0x80da>
add    %ch,0x6e(%ecx)
jbe    808a953 <_IO_stdin_used+0x80cf>
insb   (%dx),%es:(%edi)
imul   $0x20227174,0x22(%eax,%eiz,1),%esp
jbe    808a95e <_IO_stdin_used+0x80da>
insb   (%dx),%es:(%edi)
jne    808a965 <_IO_stdin_used+0x80e1>
or     (%eax),%al
jo     808a976 <_IO_stdin_used+0x80f2>
outsl  %ds:(%esi),(%dx)
jo     808a934 <_IO_stdin_used+0x80b0>
jae    808a96e <_IO_stdin_used+0x80ea>
add    %ch,0x6e(%bx,%di)
jbe    808a970 <_IO_stdin_used+0x80ec>
insb   (%dx),%es:(%edi)
imul   $0x706f7270,0x22(%eax,%eiz,1),%esp
sub    $0x22676573,%eax
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808a988 <_IO_stdin_used+0x8104>
or     (%eax),%al
jo     808a98f <_IO_stdin_used+0x810b>
popa
jae    808a98f <_IO_stdin_used+0x810b>
sub    $0x31676573,%eax
add    %ch,0x6e(%ecx)
jbe    808a995 <_IO_stdin_used+0x8111>
insb   (%dx),%es:(%edi)
imul   $0x73616870,0x22(%eax,%eiz,1),%esp
gs
sub    $0x31676573,%eax
and    (%eax),%ah
jbe    808a9a8 <_IO_stdin_used+0x8124>
insb   (%dx),%es:(%edi)
jne    808a9af <_IO_stdin_used+0x812b>
or     (%eax),%al
jo     808a9b6 <_IO_stdin_used+0x8132>
popa
jae    808a9b6 <_IO_stdin_used+0x8132>
sub    $0x32676573,%eax
add    %ch,0x6e(%ecx)
jbe    808a9bc <_IO_stdin_used+0x8138>
insb   (%dx),%es:(%edi)
imul   $0x73616870,0x22(%eax,%eiz,1),%esp
gs
sub    $0x32676573,%eax
and    (%eax),%ah
jbe    808a9cf <_IO_stdin_used+0x814b>
insb   (%dx),%es:(%edi)
jne    808a9d6 <_IO_stdin_used+0x8152>
or     (%eax),%al
jae    808a9df <_IO_stdin_used+0x815b>
ja     808a977 <_IO_stdin_used+0x80f3>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,(%edx)
jae    808a9ec <_IO_stdin_used+0x8168>
ja     808a9a6 <_IO_stdin_used+0x8122>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808a9ef <_IO_stdin_used+0x816b>
or     (%eax),%al
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     808a9f3 <_IO_stdin_used+0x816f>
popa
arpl   %bp,0x0(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x6f2d6e65,0x74(%ebx),%esi
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    808a9a1 <_IO_stdin_used+0x811d>
je     808aa15 <_IO_stdin_used+0x8191>
imul   $0x61732d65,0x6c(%eax),%esi
insl   (%dx),%es:(%edi)
jo     808aa19 <_IO_stdin_used+0x8195>
imul   $0x656e6f00,0x67(%esi),%ebp
sub    $0x746f6873,%eax
add    %ah,0x65(%edx)
jb     808aa30 <_IO_stdin_used+0x81ac>
sub    $0x6f706572,%eax
jb     808aa39 <_IO_stdin_used+0x81b5>
imul   $0x73657200,0x67(%esi),%ebp
je     808aa2f <_IO_stdin_used+0x81ab>
jb     808aa44 <_IO_stdin_used+0x81c0>
add    %dh,0x65(%edx)
jae    808aa49 <_IO_stdin_used+0x81c5>
popa
jb     808aa4c <_IO_stdin_used+0x81c8>
sub    $0x6900736d,%eax
outsb  %ds:(%esi),(%dx)
jbe    808aa41 <_IO_stdin_used+0x81bd>
insb   (%dx),%es:(%edi)
imul   $0x74736572,0x22(%eax,%eiz,1),%esp
popa
jb     808aa60 <_IO_stdin_used+0x81dc>
sub    $0x2022736d,%eax
jbe    808aa54 <_IO_stdin_used+0x81d0>
insb   (%dx),%es:(%edi)
jne    808aa5b <_IO_stdin_used+0x81d7>
or     (%eax),%al
arpl   %sp,0x6e(%ecx)
cmp    (%eax),%ah
jne    808aa6d <_IO_stdin_used+0x81e9>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     808aa72 <_IO_stdin_used+0x81ee>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,(%edx)
jae    808aa7e <_IO_stdin_used+0x81fa>
insl   (%dx),%es:(%edi)
jo     808aa8c <_IO_stdin_used+0x8208>
gs
sub    $0x6e696f70,%eax
je     808aa4a <_IO_stdin_used+0x81c6>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808aa93 <_IO_stdin_used+0x820f>
or     (%eax),%al
arpl   %sp,0x6e(%ecx)
add    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
sub    $0x49544341,%eax
push   %esi
inc    %ebp
add    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
sub    $0x4e524157,%eax
dec    %ecx
dec    %esi
inc    %edi
add    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
sub    $0x53534150,%eax
dec    %ecx
push   %esi
inc    %ebp
add    %al,0x55(%edx)
push   %ebx
sub    $0x46464f,%eax
push   %ebx
push   %esp
dec    %edi
push   %eax
push   %eax
inc    %ebp
inc    %esp
add    %dl,0x4c(%ebx)
inc    %ebp
inc    %ebp
push   %eax
dec    %ecx
dec    %esi
inc    %edi
add    %al,(%eax)
add    %cl,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
bound  %ebp,0x74(%ecx)
jb     808aae3 <_IO_stdin_used+0x825f>
je     808aae9 <_IO_stdin_used+0x8265>
and    %ah,0x61732064
insl   (%dx),%es:(%edi)
jo     808aaf9 <_IO_stdin_used+0x8275>
gs
sub    $0x6e696f70,%eax
je     808aab5 <_IO_stdin_used+0x8231>
and    $0x2066332e,%eax
add    %al,(%eax)
or     (%eax),%ah
and    %ah,(%eax)
and    %dh,0x20(%ecx,%esi,2)
and    $0x72702064,%eax
outsl  %ds:(%esi),(%dx)
jo     808aad9 <_IO_stdin_used+0x8255>
jae    808ab13 <_IO_stdin_used+0x828f>
and    %ah,(%di)
and    %dh,%fs:0x68(%eax)
popa
jae    808ab1d <_IO_stdin_used+0x8299>
sub    $0x31676573,%eax
and    %ah,0x68702064
popa
jae    808ab2b <_IO_stdin_used+0x82a7>
sub    $0x32676573,%eax
and    %ah,0x6a732064
ja     808aaf3 <_IO_stdin_used+0x826f>
and    $0x64,%eax
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,0x74203a73
jae    808ab49 <_IO_stdin_used+0x82c5>
xor    %esp,(%bx,%si)
and    $0x252e2e64,%eax
and    %dh,%fs:0x65(%ebx,%esi,2)
xor    (%bx,%si),%ah
and    $0x252e2e64,%eax
and    %dh,%fs:0x6a(%ebx)
ja     808ab1f <_IO_stdin_used+0x829b>
xor    %ebp,(%esi)
cs
and    $0x72622064,%eax
jo     808ab29 <_IO_stdin_used+0x82a5>
and    $0x252e2e64,%eax
and    %ah,%fs:0x72(%edx)
jo     808ab41 <_IO_stdin_used+0x82bd>
imul   $0x642520,0x63(%esi),%ebp
add    %cl,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
jb     808ab88 <_IO_stdin_used+0x8304>
sub    $0x72617473,%eax
je     808ab8f <_IO_stdin_used+0x830b>
and    %ah,%fs:0x75(%edx)
jae    808ab5d <_IO_stdin_used+0x82d9>
gs
jb     808aba5 <_IO_stdin_used+0x8321>
outsl  %ds:(%esi),(%dx)
jb     808aba9 <_IO_stdin_used+0x8325>
and    %ah,0x72(%ecx)
bound  %ebp,0x74(%ecx)
sub    $0x74736f6c,%eax
and    %ah,0x72(%ebp)
jb     808abb5 <_IO_stdin_used+0x8331>
jb     808ab75 <_IO_stdin_used+0x82f1>
ja     808abab <_IO_stdin_used+0x8327>
jb     808abba <_IO_stdin_used+0x8336>
and    %ah,0x72(%ebp)
jb     808abc0 <_IO_stdin_used+0x833c>
jb     808ab80 <_IO_stdin_used+0x82fc>
jo     808abb6 <_IO_stdin_used+0x8332>
jae    808abca <_IO_stdin_used+0x8346>
and    %ah,0x75(%edx)
jae    808ab89 <_IO_stdin_used+0x8305>
outsl  %ds:(%esi),(%dx)
data16
data16
add    %cl,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0x6430312d,%eax
and    %ah,0x6430312d
and    %ah,0x6430312d
and    %ah,0x6430312d
and    %ah,0x6430312d
and    %ah,0x6430312d
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808abf0 <_IO_stdin_used+0x836c>
cmp    %gs:(%bx,%si),%ah
imul   $0x6b6e696c,0x20(%eax),%esi
and    %dh,0x65(%ebx)
je     808abbf <_IO_stdin_used+0x833b>
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
and    %dh,0x70(%ecx,%edi,2)
and    %ah,%gs:0x61(%ebx)
outsb  %ds:(%esi),(%dx)
or     (%ecx),%cl
pop    %ebx
and    %ah,0x69(%edx)
je     808ac28 <_IO_stdin_used+0x83a4>
popa
je     808ac1e <_IO_stdin_used+0x839a>
and    %al,0x49(%edx)
push   %esp
push   %edx
inc    %ecx
push   %esp
inc    %ebp
and    %bl,0x20(%ebx)
jae    808ac27 <_IO_stdin_used+0x83a3>
insl   (%dx),%es:(%edi)
jo     808ac35 <_IO_stdin_used+0x83b1>
gs
sub    $0x6e696f70,%eax
je     808abf1 <_IO_stdin_used+0x836d>
push   %ebx
inc    %ecx
dec    %ebp
push   %eax
dec    %esp
inc    %ebp
sub    $0x4e494f50,%eax
push   %esp
pop    %ebp
and    %bl,0x20(%ebp)
jl     808ac03 <_IO_stdin_used+0x837f>
or     (%ecx),%cl
pop    %ebx
and    %dh,0x20(%ecx,%esi,2)
push   %esp
push   %ecx
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
jo     808ac1f <_IO_stdin_used+0x839b>
jae    808ac59 <_IO_stdin_used+0x83d5>
and    %dl,0x52(%bx,%si)
dec    %edi
push   %eax
pop    %edi
push   %ebx
inc    %ebp
inc    %edi
and    %dh,0x68(%eax)
popa
jae    808ac69 <_IO_stdin_used+0x83e5>
sub    $0x31676573,%eax
and    %dl,0x48(%eax)
inc    %ecx
push   %ebx
inc    %ebp
sub    $0x31474553,%eax
or     (%eax),%ah
or     %esp,(%eax)
and    %dh,0x68(%eax)
popa
jae    808ac83 <_IO_stdin_used+0x83ff>
sub    $0x32676573,%eax
and    %dl,0x48(%eax)
inc    %ecx
push   %ebx
inc    %ebp
sub    $0x32474553,%eax
and    %bl,0x20(%ebx)
jae    808ac9d <_IO_stdin_used+0x8419>
ja     808ac55 <_IO_stdin_used+0x83d1>
push   %ebx
dec    %edx
push   %edi
and    %bl,0x20(%ebp)
pop    %ebp
or     (%edx),%cl
or     %ebx,0x20(%ebx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     808aca8 <_IO_stdin_used+0x8424>
popa
arpl   %bp,0x20(%ebx)
jnp    808ac6c <_IO_stdin_used+0x83e8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%ecx),%cl
pop    %ebx
and    %ch,0x73(%ecx,%ebp,2)
je     808acc6 <_IO_stdin_used+0x8442>
outsb  %ds:(%esi),(%dx)
sub    $0x796c6e6f,%eax
and    %bh,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%ecx),%cl
pop    %ebx
and    %dh,0x69(%edx,%esi,2)
jo     808aceb <_IO_stdin_used+0x8467>
gs
sub    $0x706d6173,%eax
insb   (%dx),%es:(%edi)
imul   $0x6f207b20,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%ecx),%cl
pop    %ebx
and    %ch,0x6e(%edi)
gs
sub    $0x746f6873,%eax
and    %bh,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%ecx),%cl
pop    %ebx
and    %ah,0x65(%edx)
jb     808ad2d <_IO_stdin_used+0x84a9>
sub    $0x6f706572,%eax
jb     808ad36 <_IO_stdin_used+0x84b2>
imul   $0x6f207b20,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %bh,0x6f(%eax,%eiz,1)
data16
data16
and    %bh,0x20(%ebp)
pop    %ebp
or     (%edx),%cl
or     %ebx,0x20(%ebx)
jb     808ad40 <_IO_stdin_used+0x84bc>
jae    808ad51 <_IO_stdin_used+0x84cd>
popa
jb     808ad54 <_IO_stdin_used+0x84d0>
sub    $0x5420736d,%eax
dec    %ecx
dec    %ebp
inc    %ebp
sub    $0x5d20534d,%eax
or     (%ecx),%cl
pop    %ebx
and    %dh,0x65(%edx)
jae    808ad69 <_IO_stdin_used+0x84e5>
popa
jb     808ad6c <_IO_stdin_used+0x84e8>
and    %bl,0xa(%ebp)
or     (%ecx),%cl
push   %edi
push   $0x3a657265
and    %al,0x49(%edx)
push   %esp
push   %edx
inc    %ecx
push   %esp
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x31207b20,%eax
cs xor %esi,%cs:(%eax)
xor    %dh,(%eax)
xor    %dh,(%eax)
xor    %ah,(%eax)
jge    808ad2e <_IO_stdin_used+0x84aa>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
inc    %ecx
dec    %ebp
push   %eax
dec    %esp
inc    %ebp
sub    $0x4e494f50,%eax
push   %esp
and    %ah,(%eax)
cmp    0x30207b20,%bh
xor    %dh,%cs:(%eax)
xor    %ch,(%esi)
xor    %ch,%cs:(%esi)
cmp    %edi,(%ecx)
cmp    %esp,(%eax)
jge    808ad58 <_IO_stdin_used+0x84d4>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %esp
push   %ecx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x4e207b20,%bh
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %eax
push   %edx
dec    %edi
push   %eax
sub    $0x20474553,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x31207b20,%eax
cs cmp %ah,%cs:(%eax)
jge    808ad9e <_IO_stdin_used+0x851a>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %eax
dec    %eax
inc    %ecx
push   %ebx
inc    %ebp
sub    $0x31474553,%eax
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x31207b20,%bh
cs cmp %ah,%cs:(%eax)
jge    808adc0 <_IO_stdin_used+0x853c>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %eax
dec    %eax
inc    %ecx
push   %ebx
inc    %ebp
sub    $0x32474553,%eax
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x31207b20,%bh
cs cmp %ah,%cs:(%eax)
jge    808ade2 <_IO_stdin_used+0x855e>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
dec    %edx
push   %edi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x31207b20,%eax
cs
cs
xor    $0x20,%al
jge    808ae04 <_IO_stdin_used+0x8580>
or     %esp,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %edx
inc    %ebp
push   %ebx
push   %esp
inc    %ecx
push   %edx
push   %esp
sub    $0x2020534d,%eax
and    %ah,(%eax)
cmp    0x30207b20,%bh
and    %bh,0x4e(%eax,%eiz,1)
push   %ebp
dec    %ebp
inc    %edx
inc    %ebp
push   %edx
and    %bh,0xa(%ebp)
add    %al,(%eax)
xor    $0xaa,%al
or     %cl,(%eax)
inc    %ecx
stos   %al,%es:(%edi)
or     %cl,(%eax)
dec    %edi
stos   %al,%es:(%edi)
or     %cl,(%eax)
pop    %ebp
stos   %al,%es:(%edi)
or     %cl,(%eax)
gs
stos   %al,%es:(%edi)
or     %cl,(%eax)
insl   (%dx),%es:(%edi)
stos   %al,%es:(%edi)
or     %cl,(%eax)
jbe    808aea3 <_IO_stdin_used+0x861f>
jo     808aea1 <_IO_stdin_used+0x861d>
add    %dh,0x72(%eax)
imul   $0x70006574,0x61(%esi),%esi
popa
jae    808aec0 <_IO_stdin_used+0x863c>
je     808aeb7 <_IO_stdin_used+0x8633>
jb     808aec6 <_IO_stdin_used+0x8642>
add    %ah,(%eax)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %ah,%fs:%gs:0x6d002073
popa
arpl   %si,0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
add    %al,0x72(%ebp)
jb     808aed7 <_IO_stdin_used+0x8653>
jb     808aea4 <_IO_stdin_used+0x8620>
and    %ah,0x72(%ecx)
addr16 jne 808aedd <_IO_stdin_used+0x8659>
outsb  %gs:(%esi),(%dx)
je     808ae94 <_IO_stdin_used+0x8610>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %fs:%gs:(%eax),%ah
insl   (%dx),%es:(%edi)
jne    808aef4 <_IO_stdin_used+0x8670>
je     808aea3 <_IO_stdin_used+0x861f>
bound  %esp,0x20(%ebp)
and    0x72(%eax),%dh
imul   $0x2c226574,0x61(%esi),%esi
and    %ah,(%edx)
jbe    808aef9 <_IO_stdin_used+0x8675>
jo     808aef7 <_IO_stdin_used+0x8673>
and    (%eax,%eiz,1),%ch
and    0x72(%edx),%ah
imul   $0x726f2022,0x65(%edi,%eiz,2),%esp
and    %ah,(%edx)
jo     808af09 <_IO_stdin_used+0x8685>
jae    808af1d <_IO_stdin_used+0x8699>
je     808af14 <_IO_stdin_used+0x8690>
jb     808af23 <_IO_stdin_used+0x869f>
and    (%eax),%ah
or     (%eax),%al
add    %al,(%eax)
push   %ebp
jae    808af18 <_IO_stdin_used+0x8694>
cmp    %gs:(%bx,%si),%ah
cs cs and %ch,%cs:0x61(%ebp)
arpl   %si,0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%ebp)
fs and %bh,%fs:%gs:0x20(%ebx)
jo     808af42 <_IO_stdin_used+0x86be>
imul   $0x7c206574,0x61(%esi),%esi
and    %dh,0x65(%esi)
jo     808af3d <_IO_stdin_used+0x86b9>
and    %bh,0x62(%eax,%eiz,1)
jb     808af4b <_IO_stdin_used+0x86c7>
fs and %bh,%fs:%gs:0x20(%si)
jo     808af4b <_IO_stdin_used+0x86c7>
jae    808af5f <_IO_stdin_used+0x86db>
je     808af56 <_IO_stdin_used+0x86d2>
jb     808af65 <_IO_stdin_used+0x86e1>
and    %bh,0xa(%ebp)
add    %ch,0x61(%ebp)
arpl   %si,0x6c(%esi)
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
jne    808af6d <_IO_stdin_used+0x86e9>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     808af72 <_IO_stdin_used+0x86ee>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa3f2273,%eax
add    %ch,0x61(%ebp)
arpl   %si,0x74(%esi)
popa
jo     808af1b <_IO_stdin_used+0x8697>
add    %al,0x72(%ebp)
jb     808af8f <_IO_stdin_used+0x870b>
jb     808af5c <_IO_stdin_used+0x86d8>
and    %ah,0x72(%ecx)
addr16 jne 808af95 <_IO_stdin_used+0x8711>
outsb  %gs:(%esi),(%dx)
je     808af4c <_IO_stdin_used+0x86c8>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %fs:%gs:(%eax),%ah
insl   (%dx),%es:(%edi)
jne    808afac <_IO_stdin_used+0x8728>
je     808af5b <_IO_stdin_used+0x86d7>
bound  %esp,0x20(%ebp)
and    0x72(%eax),%dh
imul   $0x2c226574,0x61(%esi),%esi
and    %ah,(%edx)
jbe    808afb1 <_IO_stdin_used+0x872d>
jo     808afaf <_IO_stdin_used+0x872b>
and    (%eax,%eiz,1),%ch
and    0x72(%edx),%ah
imul   $0x726f2022,0x65(%edi,%eiz,2),%esp
and    %ah,(%edx)
jo     808afc1 <_IO_stdin_used+0x873d>
jae    808afd5 <_IO_stdin_used+0x8751>
je     808afcc <_IO_stdin_used+0x8748>
jb     808afdb <_IO_stdin_used+0x8757>
and    (%eax,%eiz,1),%ch
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808af8d <_IO_stdin_used+0x8709>
and    0xa2273,%ah
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
cs cs and %ch,%cs:0x61(%ebp)
arpl   %si,0x74(%esi)
popa
jo     808afa7 <_IO_stdin_used+0x8723>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %bh,%fs:%gs:0x20(%ebx)
jo     808b002 <_IO_stdin_used+0x877e>
imul   $0x7c206574,0x61(%esi),%esi
and    %dh,0x65(%esi)
jo     808affd <_IO_stdin_used+0x8779>
and    %bh,0x62(%eax,%eiz,1)
jb     808b00b <_IO_stdin_used+0x8787>
fs and %bh,%fs:%gs:0x20(%si)
jo     808b00b <_IO_stdin_used+0x8787>
jae    808b01f <_IO_stdin_used+0x879b>
je     808b016 <_IO_stdin_used+0x8792>
jb     808b025 <_IO_stdin_used+0x87a1>
and    %bh,0xa(%ebp)
add    %ch,0x61(%ebp)
arpl   %si,0x74(%esi)
popa
jo     808aff6 <_IO_stdin_used+0x8772>
and    %dh,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0xa3f2273,%eax
add    %dl,0x44(%ebp)
push   %eax
add    %cl,0x50(%ecx)
add    %dl,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x65202c75
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
and    %ah,0x20000a73
and    %al,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x74002073
outsl  %ds:(%esi),(%dx)
and    %ah,0x20000a73
and    %dl,0x65(%eax)
gs
jb     808b029 <_IO_stdin_used+0x87a5>
je     808b080 <_IO_stdin_used+0x87fc>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x55000a75
jae    808b078 <_IO_stdin_used+0x87f4>
cmp    %gs:(%bx,%si),%ah
imul   $0x7074326c,0x20(%eax),%esi
and    %ah,0x64(%ecx)
and    %dh,%fs:0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808b0b0 <_IO_stdin_used+0x882c>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x57000a44,0x49(%eax,%eiz,1),%esp
push   $0x3a657265
and    %cl,0x41(%esi)
dec    %ebp
inc    %ebp
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x52545320,%eax
dec    %ecx
dec    %esi
inc    %edi
or     (%eax),%al
and    %ah,(%eax)
and    $0x30252073,%eax
xor    0x25(%eax),%bh
xor    %dh,(%edx)
js     808b093 <_IO_stdin_used+0x880f>
xor    %dh,(%edx)
js     808b097 <_IO_stdin_used+0x8813>
xor    %dh,(%edx)
js     808b076 <_IO_stdin_used+0x87f2>
push   %ebx
gs
jae    808b0ed <_IO_stdin_used+0x8869>
imul   $0x20752520,0x6e(%edi),%ebp
imul   $0x6e6e7574,0x20(%esi),%ebp
gs
insb   (%dx),%es:(%edi)
and    %ah,0x20000a75
and    %dl,0x65(%eax)
gs
jb     808b0b6 <_IO_stdin_used+0x8832>
jae    808b0fd <_IO_stdin_used+0x8879>
jae    808b10d <_IO_stdin_used+0x8889>
imul   $0x2c752520,0x6e(%edi),%ebp
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x20000a75
and    %ch,0x6e(%ecx)
je     808b118 <_IO_stdin_used+0x8894>
jb     808b11b <_IO_stdin_used+0x8897>
popa
arpl   %sp,0x20(%ebp)
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%ah
and    $0x20000a73,%eax
and    %ch,0x66(%edi)
data16
jae    808b12f <_IO_stdin_used+0x88ab>
je     808b0ec <_IO_stdin_used+0x8868>
and    $0x70202c75,%eax
gs
gs
jb     808b0f5 <_IO_stdin_used+0x8871>
outsl  %ds:(%esi),(%dx)
data16
data16
jae    808b13f <_IO_stdin_used+0x88bb>
je     808b0fc <_IO_stdin_used+0x8878>
and    $0x70000a75,%eax
gs
gs
jb     808b105 <_IO_stdin_used+0x8881>
arpl   %bp,0x6f(%edi)
imul   $0x0,0x65(%ecx),%ebp
and    %ah,(%eax)
jb     808b155 <_IO_stdin_used+0x88d1>
outsl  %ds:(%esi),(%dx)
jb     808b157 <_IO_stdin_used+0x88d3>
gs
jb     808b116 <_IO_stdin_used+0x8892>
je     808b161 <_IO_stdin_used+0x88dd>
insl   (%dx),%es:(%edi)
outsl  %gs:(%esi),(%dx)
jne    808b171 <_IO_stdin_used+0x88ed>
cmp    (%eax),%ah
and    $0x69000a75,%eax
outsb  %ds:(%esi),(%dx)
jbe    808b168 <_IO_stdin_used+0x88e4>
insb   (%dx),%es:(%edi)
imul   $0x746f6d65,0x72(%eax,%eiz,1),%esp
and    %ah,%gs:0x64(%ecx)
fs
jb     808b17c <_IO_stdin_used+0x88f8>
jae    808b18c <_IO_stdin_used+0x8908>
or     (%eax),%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x64(%ecx)
fs
jb     808b193 <_IO_stdin_used+0x890f>
jae    808b1a3 <_IO_stdin_used+0x891f>
or     (%eax),%al
imul   $0x64696c61,0x76(%esi),%ebp
and    %cl,0x44(%ecx)
or     (%eax),%al
jo     808b1a5 <_IO_stdin_used+0x8921>
gs
jb     808b1a2 <_IO_stdin_used+0x891e>
je     808b1ba <_IO_stdin_used+0x8936>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x646974,0x70(%eax,%eax,1),%esp
jo     808b1b9 <_IO_stdin_used+0x8935>
gs
jb     808b1b6 <_IO_stdin_used+0x8932>
jae    808b1be <_IO_stdin_used+0x893a>
jae    808b1ce <_IO_stdin_used+0x894a>
imul   $0x64695f,0x6e(%edi),%ebp
jo     808b1d7 <_IO_stdin_used+0x8953>
imul   $0x735f7064,0x75(%eax,%eax,1),%esp
jo     808b1dd <_IO_stdin_used+0x8959>
jb     808b1e4 <_IO_stdin_used+0x8960>
add    %ch,0x6e(%ecx)
jbe    808b1d6 <_IO_stdin_used+0x8952>
insb   (%dx),%es:(%edi)
imul   $0xa74726f,0x70(%eax,%eiz,1),%esp
add    %dh,0x64(%ebp)
jo     808b1e2 <_IO_stdin_used+0x895e>
fs
jo     808b1f5 <_IO_stdin_used+0x8971>
jb     808b1fc <_IO_stdin_used+0x8978>
add    %ch,0x6e(%ecx)
jbe    808b1ee <_IO_stdin_used+0x896a>
insb   (%dx),%es:(%edi)
imul   $0x65736666,0x6f(%eax,%eiz,1),%esp
je     808b1a2 <_IO_stdin_used+0x891e>
add    %dh,0x65(%eax)
gs
jb     808b1fd <_IO_stdin_used+0x8979>
outsl  %ds:(%esi),(%dx)
data16
data16
jae    808b208 <_IO_stdin_used+0x8984>
je     808b1a5 <_IO_stdin_used+0x8921>
arpl   %bp,0x6f(%edi)
imul   $0x20,0x65(%ecx),%ebp
insl   (%dx),%es:(%edi)
jne    808b222 <_IO_stdin_used+0x899e>
je     808b1d1 <_IO_stdin_used+0x894d>
bound  %esp,0x20(%ebp)
popa
and    %ch,0x65(%eax)
js     808b1da <_IO_stdin_used+0x8956>
jae    808b230 <_IO_stdin_used+0x89ac>
jb     808b227 <_IO_stdin_used+0x89a3>
outsb  %ds:(%esi),(%dx)
or     (%bx,%si),%al
jo     808b229 <_IO_stdin_used+0x89a5>
gs
jb     808b226 <_IO_stdin_used+0x89a2>
arpl   %bp,0x6f(%edi)
imul   $0x0,0x65(%ecx),%ebp
insb   (%dx),%es:(%edi)
xor    0x70(%ebx),%dh
arpl   %bx,%gs:0x74(%edi)
jns    808b248 <_IO_stdin_used+0x89c4>
add    %dl,%gs:0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
cmp    %fs:(%eax),%ah
and    $0x74000a73,%eax
jne    808b260 <_IO_stdin_used+0x89dc>
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x72(%edi)
and    %dh,0x65(%ebx)
jae    808b270 <_IO_stdin_used+0x89ec>
imul   $0x0,0x6e(%edi),%ebp
and    %ah,(%eax)
push   %ebp
inc    %esp
push   %eax
and    %dh,0x6f(%ebx)
jne    808b280 <_IO_stdin_used+0x89fc>
arpl   %sp,0x20(%ebp)
das
and    %ah,0x73(%ebp,%eiz,2)
je     808b238 <_IO_stdin_used+0x89b4>
jo     808b289 <_IO_stdin_used+0x8a05>
jb     808b290 <_IO_stdin_used+0x8a0c>
jae    808b258 <_IO_stdin_used+0x89d4>
and    %ah,0x252f7568
push   $0x20000a75
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808b29d <_IO_stdin_used+0x8a19>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808b2cd <_IO_stdin_used+0x8a49>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x65702044,0x49(%eax,%eiz,1),%esp
gs
jb     808b2c7 <_IO_stdin_used+0x8a43>
je     808b2df <_IO_stdin_used+0x8a5b>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0xa44,0x49(%eax,%eiz,1),%esp
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
and    %bh,0x20(%ebx)
imul   $0x6475207c,0x20(%eax),%esi
jo     808b2b5 <_IO_stdin_used+0x8a31>
jge    808b2b7 <_IO_stdin_used+0x8a33>
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x64(%ebp)
jo     808b30b <_IO_stdin_used+0x8a87>
jae    808b31e <_IO_stdin_used+0x8a9a>
outsl  %ds:(%esi),(%dx)
jb     808b325 <_IO_stdin_used+0x8aa1>
and    %dl,0x4f(%eax)
push   %edx
push   %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x64(%ebp)
jo     808b31e <_IO_stdin_used+0x8a9a>
fs
jo     808b331 <_IO_stdin_used+0x8aad>
jb     808b338 <_IO_stdin_used+0x8ab4>
and    %dl,0x4f(%eax)
push   %edx
push   %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
jae    808b334 <_IO_stdin_used+0x8ab0>
cmp    %gs:(%bx,%si),%ah
imul   $0x7074326c,0x20(%eax),%esi
and    %ah,0x64(%ecx)
and    %dh,%fs:0x65(%ebx)
jae    808b35a <_IO_stdin_used+0x8ad6>
imul   $0x6e205b20,0x6e(%edi),%ebp
popa
insl   (%dx),%es:(%edi)
and    %cl,%gs:0x41(%esi)
dec    %ebp
inc    %ebp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x65(%ebx)
jae    808b37d <_IO_stdin_used+0x8af9>
imul   $0x2064695f,0x6e(%edi),%ebp
dec    %ecx
inc    %esp
and    %dh,0x65(%eax)
gs
jb     808b378 <_IO_stdin_used+0x8af4>
jae    808b380 <_IO_stdin_used+0x8afc>
jae    808b390 <_IO_stdin_used+0x8b0c>
imul   $0x2064695f,0x6e(%edi),%ebp
dec    %ecx
inc    %esp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x6f(%ebx)
outsl  %ds:(%esi),(%dx)
imul   $0x20,0x65(%ecx),%ebp
dec    %eax
inc    %ebp
pop    %eax
push   %ebx
push   %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%eax)
gs
jb     808b3aa <_IO_stdin_used+0x8b26>
arpl   %bp,0x6f(%edi)
imul   $0x20,0x65(%ecx),%ebp
dec    %eax
inc    %ebp
pop    %eax
push   %ebx
push   %esp
push   %edx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
outsl  %ds:(%esi),(%dx)
data16
data16
jae    808b3d2 <_IO_stdin_used+0x8b4e>
je     808b38f <_IO_stdin_used+0x8b0b>
dec    %edi
inc    %esi
inc    %esi
push   %ebx
inc    %ebp
push   %esp
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x65(%eax)
gs
jb     808b3de <_IO_stdin_used+0x8b5a>
outsl  %ds:(%esi),(%dx)
data16
data16
jae    808b3e9 <_IO_stdin_used+0x8b65>
je     808b3a6 <_IO_stdin_used+0x8b22>
dec    %edi
inc    %esi
inc    %esi
push   %ebx
inc    %ebp
push   %esp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insb   (%dx),%es:(%edi)
xor    0x70(%ebx),%dh
arpl   %bx,%gs:0x74(%edi)
jns    808b416 <_IO_stdin_used+0x8b92>
and    %cl,%gs:0x53(%edx,%esi,1)
push   %eax
inc    %ebp
inc    %ebx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x7074326c,0x20(%eax),%esi
and    %ah,0x6c(%ebp,%eiz,2)
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x20000a44,0x49(%eax,%eiz,1),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x7074326c,0x20(%eax),%esi
and    %ah,0x6c(%ebp,%eiz,2)
and    %dh,0x65(%ebx)
jae    808b466 <_IO_stdin_used+0x8be2>
imul   $0x6e757420,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x65732044,0x49(%eax,%eiz,1),%esp
jae    808b47b <_IO_stdin_used+0x8bf7>
imul   $0x2064695f,0x6e(%edi),%ebp
dec    %ecx
inc    %esp
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x7074326c,0x20(%eax),%esi
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     808b448 <_IO_stdin_used+0x8bc4>
je     808b49f <_IO_stdin_used+0x8c1b>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %bl,0x20(%ebx)
je     808b4a8 <_IO_stdin_used+0x8c24>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0xa5d2044,0x49(%eax,%eiz,1),%esp
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %ch,0x74(%edx,%esi,1)
jo     808b473 <_IO_stdin_used+0x8bef>
jae    808b4bd <_IO_stdin_used+0x8c39>
outsl  %ds:(%esi),(%dx)
ja     808b478 <_IO_stdin_used+0x8bf4>
jae    808b4bf <_IO_stdin_used+0x8c3b>
jae    808b4cf <_IO_stdin_used+0x8c4b>
imul   $0x74205b20,0x6e(%edi),%ebp
jne    808b4d3 <_IO_stdin_used+0x8c4f>
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x205d2044,0x49(%eax,%eiz,1),%esp
pop    %ebx
and    %dh,0x65(%ebx)
jae    808b4ea <_IO_stdin_used+0x8c66>
imul   $0x2064695f,0x6e(%edi),%ebp
dec    %ecx
inc    %esp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x49207b20,%eax
push   %eax
pop    %edi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %bh,0x61(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
jns    808b4c8 <_IO_stdin_used+0x8c44>
jge    808b4b4 <_IO_stdin_used+0x8c30>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4f(%eax)
push   %edx
push   %esp
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x30207b20,%eax
cs
cs
ss
xor    $0x20353335,%eax
jge    808b4d4 <_IO_stdin_used+0x8c50>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x44(%ecx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x31207b20,%eax
cs
cs
xor    $0x32,%al
cmp    %esi,(%ecx,%edi,1)
ss
aaa
xor    (%ecx),%bh
xor    $0xa7d20,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x45(%eax)
pop    %eax
push   %ebx
push   %esp
push   %edx
and    %bh,(%edx)
cmp    $0x38207b20,%eax
and    %ch,0x72(%edi)
and    %dh,(%ecx)
and    %ch,%ss:0x65(%eax)
js     808b52f <_IO_stdin_used+0x8cab>
imul   $0x28207374,%fs:0x69(%edi),%esp
xor    $0x20,%al
das
and    %bh,(%eax)
and    %ah,0x79(%edx)
je     808b586 <_IO_stdin_used+0x8d02>
jae    808b54c <_IO_stdin_used+0x8cc8>
and    %bh,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x53(%edx,%esi,1)
push   %eax
inc    %ebp
inc    %ebx
and    %bh,(%edx)
cmp    $0x6e207b20,%eax
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %bh,%gs:0x64(%eax,%eiz,1)
gs
popaw
jne    808b5b4 <_IO_stdin_used+0x8d30>
je     808b56a <_IO_stdin_used+0x8ce6>
jge    808b556 <_IO_stdin_used+0x8cd2>
add    %al,(%eax)
add    %al,(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
jae    808b5db <_IO_stdin_used+0x8d57>
insb   (%dx),%es:(%edi)
popa
je     808b5d3 <_IO_stdin_used+0x8d4f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
add    %ah,0x6f(%ebx)
outsl  %ds:(%esi),(%dx)
imul   $0x20,0x65(%ecx),%ebp
insl   (%dx),%es:(%edi)
jne    808b5f1 <_IO_stdin_used+0x8d6d>
je     808b5a0 <_IO_stdin_used+0x8d1c>
bound  %esp,0x20(%ebp)
imul   $0x20382072,%gs:0x65(%eax,%ebp,2),%esi
20
outsl  %ds:(%esi),(%dx)
jb     808b5af <_IO_stdin_used+0x8d2b>
xor    %esi,(%esi)
and    %ch,0x65(%eax)
js     808b5b6 <_IO_stdin_used+0x8d32>
imul   $0xa7374,%fs:0x69(%edi),%esp
add    %al,(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x79(%ecx,%eiz,2)
gs
jb     808b5e0 <_IO_stdin_used+0x8d5c>
jae    808b620 <_IO_stdin_used+0x8d9c>
arpl   %bp,%gs:0x66(%ecx)
imul   $0x64616568,0x20(%ebx),%esp
gs
jb     808b5de <_IO_stdin_used+0x8d5a>
je     808b639 <_IO_stdin_used+0x8db5>
jo     808b627 <_IO_stdin_used+0x8da3>
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808b5f3 <_IO_stdin_used+0x8d6f>
outsl  %ds:(%esi),(%dx)
jo     808b63b <_IO_stdin_used+0x8db7>
outsb  %ds:(%esi),(%dx)
and    %ah,0x65(%edi)
outsb  %ds:(%esi),(%dx)
gs
jb     808b647 <_IO_stdin_used+0x8dc3>
arpl   %sp,(%eax)
outsb  %ds:(%esi),(%dx)
gs
je     808b650 <_IO_stdin_used+0x8dcc>
imul   $0x636f7320,0x6b(%esi),%ebp
imul   $0xa,0x74(%ebp),%esp
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808b620 <_IO_stdin_used+0x8d9c>
jne    808b670 <_IO_stdin_used+0x8dec>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     808b67d <_IO_stdin_used+0x8df9>
jns    808b62d <_IO_stdin_used+0x8da9>
and    0x70(%ecx),%ch
and    %ch,0x74(%edx,%esi,1)
jo     808b636 <_IO_stdin_used+0x8db2>
push   $0x22706c65
or     %cs:(%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %bl,0x69(%ebx)
jl     808b69d <_IO_stdin_used+0x8e19>
pop    %ebp
imul   $0x20,0x79(%ebp),%esp
dec    %ebx
inc    %ebp
pop    %ecx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
fs
gs
jbe    808b66a <_IO_stdin_used+0x8de6>
push   %eax
dec    %eax
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ch,0x6e(%ecx)
jbe    808b6bd <_IO_stdin_used+0x8e39>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ah,0x6f(%esi)
jb     808b68a <_IO_stdin_used+0x8e06>
and    0x65(%edx),%dh
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808b6d6 <_IO_stdin_used+0x8e52>
and    (%edx),%bh
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808b6ee <_IO_stdin_used+0x8e6a>
and    %ah,0x6f(%esi)
jb     808b6ae <_IO_stdin_used+0x8e2a>
and    0x63(%edi,%ebp,2),%ch
popa
insb   (%dx),%es:(%edi)
and    (%edx),%bh
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x70(%ecx,%edi,2)
and    %bh,%gs:0x20(%ebx)
jbe    808b727 <_IO_stdin_used+0x8ea3>
imul   $0x205b207d,(%eax),%esp
jb     808b720 <_IO_stdin_used+0x8e9c>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808b724 <_IO_stdin_used+0x8ea0>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bh,(%edx)
cmp    $0x49207b20,%eax
push   %eax
pop    %edi
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
and    %bh,0xa(%ebp)
add    %al,(%eax)
push   %ebp
jae    808b75c <_IO_stdin_used+0x8ed8>
cmp    %gs:(%bx,%si),%ah
cs cs and %dh,%cs:0x78(%esi)
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,0x64(%ecx)
and    %dl,0x4e(%esi)
dec    %ecx
and    %bl,0x20(%ebx)
jnp    808b734 <_IO_stdin_used+0x8eb0>
addr16 jb 808b786 <_IO_stdin_used+0x8f02>
jne    808b789 <_IO_stdin_used+0x8f05>
and    %bh,0x72(%eax,%eiz,1)
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808b787 <_IO_stdin_used+0x8f03>
and    %bh,0x20(%ebp)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %dh,0x6c(%esp,%esi,2)
and    %dl,0x4c(%esp,%edx,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %dh,0x73(%edi,%ebp,2)
and    %dl,0x53(%edi,%ecx,2)
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x48(%eax)
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
jo     808b7fc <_IO_stdin_used+0x8f78>
jb     808b803 <_IO_stdin_used+0x8f7f>
and    %cl,0x49(%ebp)
dec    %esi
and    %cl,0x41(%ebp)
pop    %eax
and    %bl,0x20(%ebp)
pop    %ebx
and    %bl,0x6e(%ebx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
insb   (%dx),%es:(%edi)
gs
popa
jb     808b813 <_IO_stdin_used+0x8f8f>
imul   $0xa5d20,0x67(%esi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
pop    %ebx
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
jo     808b837 <_IO_stdin_used+0x8fb3>
outsl  %ds:(%esi),(%dx)
js     808b841 <_IO_stdin_used+0x8fbd>
and    %bl,0x20(%ebp)
pop    %ebx
and    %bl,0x6e(%ebx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
jb     808b846 <_IO_stdin_used+0x8fc2>
arpl   %sp,(%eax)
pop    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
pop    %ebx
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
insb   (%dx),%es:(%edi)
xor    0x69(%ebp),%ch
jae    808b868 <_IO_stdin_used+0x8fe4>
and    %bl,0x20(%ebp)
pop    %ebx
and    %bl,0x6e(%ebx)
outsl  %ds:(%esi),(%dx)
pop    %ebp
insb   (%dx),%es:(%edi)
xor    0x69(%ebp),%ebp
jae    808b877 <_IO_stdin_used+0x8ff3>
and    %bl,0xa(%ebp)
add    %dh,0x78(%esi)
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
insl   (%dx),%es:(%edi)
imul   $0x20676e69,0x73(%ebx),%esi
jbe    808b882 <_IO_stdin_used+0x8ffe>
jb     808b88f <_IO_stdin_used+0x900b>
jne    808b87e <_IO_stdin_used+0x8ffa>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%esi)
je     808b89a <_IO_stdin_used+0x9016>
outsl  %ds:(%esi),(%dx)
jb     808b891 <_IO_stdin_used+0x900d>
and    %ch,0x64(%ecx)
outsb  %gs:(%esi),(%dx)
je     808b896 <_IO_stdin_used+0x9012>
imul   $0xa,0x72(%ebp),%sp
add    %dh,0x78(%esi)
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
bound  %ebp,0x74(%edi)
push   $0x6f726720
jne    808b8b5 <_IO_stdin_used+0x9031>
and    %ah,0x6e(%ecx)
and    %dh,%fs:0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808b8b5 <_IO_stdin_used+0x9031>
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808b878 <_IO_stdin_used+0x8ff4>
bound  %esp,0x20(%ebp)
jae    808b8cd <_IO_stdin_used+0x9049>
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6857000a,0x64(%ebp),%esp
gs
jb     808b8d0 <_IO_stdin_used+0x904c>
cmp    (%eax),%ah
push   %esi
dec    %esi
dec    %ecx
and    %bh,(%edx)
cmp    $0x312d3020,%eax
ss
aaa
aaa
aaa
xor    (%ecx),%dh
xor    $0x6f70000a,%eax
jb     808b8f8 <_IO_stdin_used+0x9074>
and    %ah,0x75252075
and    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
gs
popa
jb     808b901 <_IO_stdin_used+0x907d>
imul   $0x72700020,0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
js     808b916 <_IO_stdin_used+0x9092>
and    %al,(%eax)
jb     808b914 <_IO_stdin_used+0x9090>
arpl   %sp,(%eax)
add    %ch,0x6d(%edx,%esi,1)
imul   $0x336c0020,0x73(%ebx),%esi
insl   (%dx),%es:(%edi)
imul   $0x6f740020,0x73(%ebx),%esi
jae    808b8d8 <_IO_stdin_used+0x9054>
imul   $0x74697265,0x68(%esi),%ebp
and    %al,(%eax)
je     808b932 <_IO_stdin_used+0x90ae>
jae    808b8e5 <_IO_stdin_used+0x9061>
and    $0x207823,%eax
popa
imul   $0x6e6f6e20,%gs:0x67(%bp),%ebp
6e
and    %al,%gs:(%eax)
popa
imul   $0x20752520,%gs:0x67(%bp),%ebp
20
add    %ch,0x61(%ebp)
js     808b947 <_IO_stdin_used+0x90c3>
fs
fs
jb     808b90a <_IO_stdin_used+0x9086>
and    $0x76002075,%eax
outsb  %ds:(%esi),(%dx)
imul   $0x61766e69,(%eax),%eax
insb   (%dx),%es:(%edi)
imul   $0x6e490064,0x69(%eax,%eiz,1),%esp
jbe    808b962 <_IO_stdin_used+0x90de>
insb   (%dx),%es:(%edi)
imul   $0x65726464,0x61(%eax,%eiz,1),%esp
jae    808b97f <_IO_stdin_used+0x90fb>
and    %ah,(%edx)
and    $0xa2273,%eax
imul   $0x64696c61,0x76(%esi),%ebp
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    808b990 <_IO_stdin_used+0x910c>
and    %ah,0x64(%ecx)
fs
jb     808b98b <_IO_stdin_used+0x9107>
jae    808b99b <_IO_stdin_used+0x9117>
add    %ch,0x6e(%ecx)
jbe    808b98e <_IO_stdin_used+0x910a>
insb   (%dx),%es:(%edi)
imul   $0x746f6d65,0x72(%eax,%eiz,1),%esp
and    %ah,%gs:0x64(%ecx)
fs
jb     808b9a2 <_IO_stdin_used+0x911e>
jae    808b9b2 <_IO_stdin_used+0x912e>
add    %ch,0x6e(%ecx)
jbe    808b9a5 <_IO_stdin_used+0x9121>
insb   (%dx),%es:(%edi)
imul   $0x6c61636f,0x6c(%eax,%eiz,1),%esp
and    %ah,0x64(%ecx)
fs
jb     808b9b8 <_IO_stdin_used+0x9134>
jae    808b9c8 <_IO_stdin_used+0x9144>
add    %dl,0x4c(%esp,%edx,2)
and    %ch,0x75(%ebp)
jae    808b9d2 <_IO_stdin_used+0x914e>
and    %ah,0x65(%edx)
and    %bh,0x35353220(,%edi,1)
add    %ah,0x67(%ecx)
imul   $0x65676100,%gs:0x67(%esi),%ebp
imul   $0x6d697420,0x67(%esi),%ebp
gs
jb     808b97d <_IO_stdin_used+0x90f9>
insl   (%dx),%es:(%edi)
popa
js     808b9e2 <_IO_stdin_used+0x915e>
fs
fs
jb     808b9ea <_IO_stdin_used+0x9166>
jae    808b9fa <_IO_stdin_used+0x9176>
add    %dh,0x6e(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x646574,0x69(%ebp),%ebp
insl   (%dx),%es:(%edi)
popa
js     808b9b6 <_IO_stdin_used+0x9132>
popa
fs
fs
jb     808ba00 <_IO_stdin_used+0x917c>
jae    808ba10 <_IO_stdin_used+0x918c>
gs
jae    808b9a0 <_IO_stdin_used+0x911c>
insl   (%dx),%es:(%edi)
imul   $0x74726f70,0x20(%esi),%ebp
add    %ch,0x61(%ebp)
js     808b9cd <_IO_stdin_used+0x9149>
jo     808ba1e <_IO_stdin_used+0x919a>
jb     808ba25 <_IO_stdin_used+0x91a1>
add    %ch,0x6f(%esi)
insb   (%dx),%es:(%edi)
gs
popa
jb     808ba27 <_IO_stdin_used+0x91a3>
imul   $0x706f6e00,0x67(%esi),%ebp
jb     808ba31 <_IO_stdin_used+0x91ad>
js     808ba3d <_IO_stdin_used+0x91b9>
add    %ch,0x6f(%esi)
jb     808ba3c <_IO_stdin_used+0x91b8>
arpl   %ax,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
xor    0x69(%ebp),%ch
jae    808ba46 <_IO_stdin_used+0x91c2>
add    %ch,0x6f(%esi)
insb   (%dx),%es:(%edi)
xor    0x69(%ebp),%ebp
jae    808ba4f <_IO_stdin_used+0x91cb>
add    %dh,0x78(%esi)
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
jne    808ba54 <_IO_stdin_used+0x91d0>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0xa3f2273,%eax
add    %dh,0x78(%esi)
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %al,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    808ba72 <_IO_stdin_used+0x91ee>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6c(%esi)
jne    808ba87 <_IO_stdin_used+0x9203>
push   $0x71657220
jne    808ba80 <_IO_stdin_used+0x91fc>
jae    808ba91 <_IO_stdin_used+0x920d>
or     (%eax),%al
and    %ah,0x67(%ecx)
and    %ah,%gs:0x2e756c6c
and    $0x6c6c3330,%eax
jne    808baa3 <_IO_stdin_used+0x921f>
arpl   %ax,%gs:(%eax)
and    %dh,0x5f(%edi,%esi,2)
je     808baac <_IO_stdin_used+0x9228>
and    %ah,0x64252f75
jae    808baa6 <_IO_stdin_used+0x9222>
arpl   %sp,(%eax)
popa
outsl  %ds:(%si),(%dx)
add    %ah,(%eax)
insl   (%dx),%es:(%edi)
gs
je     808babe <_IO_stdin_used+0x923a>
imul   $0x206425,0x5f(%ebx),%esp
and    $0x7375756c,%eax
add    %ah,0x2000756c
outsw  %ds:(%esi),(%dx)
pop    %edi
insl   (%dx),%es:(%edi)
jae    808bad7 <_IO_stdin_used+0x9253>
and    %ah,0x66200075
outsl  %ds:(%esi),(%dx)
pop    %edi
arpl   %bp,0x6f(%edi)
imul   $0x20,0x65(%ecx),%ebp
and    $0x6f4e0073,%eax
je     808bae2 <_IO_stdin_used+0x925e>
imul   $0x206f7420,0x67(%esi),%ebp
data16
insb   (%dx),%es:(%edi)
jne    808baf8 <_IO_stdin_used+0x9274>
push   $0x46000a2e
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    808bafa <_IO_stdin_used+0x9276>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x6d(%ebp,%esi,2)
jo     808babd <_IO_stdin_used+0x9239>
jb     808bb04 <_IO_stdin_used+0x9280>
jno    808bb16 <_IO_stdin_used+0x9292>
gs
jae    808bb18 <_IO_stdin_used+0x9294>
add    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    808bb10 <_IO_stdin_used+0x928c>
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x5f706374,0x20(%eax),%esi
insl   (%dx),%es:(%edi)
gs
je     808bb30 <_IO_stdin_used+0x92ac>
imul   $0x7063742f,0x73(%ebx),%esp
insl   (%dx),%es:(%edi)
gs
je     808bb3b <_IO_stdin_used+0x92b7>
imul   $0x43207b20,0x73(%ebx),%esp
dec    %edi
dec    %ebp
dec    %ebp
inc    %ecx
dec    %esi
inc    %esp
and    %bh,0x68(%eax,%eiz,1)
gs
insb   (%dx),%es:(%edi)
jo     808bafe <_IO_stdin_used+0x927a>
jge    808baea <_IO_stdin_used+0x9266>
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x70(%ecx)
and    %dh,0x70(%ebx,%eiz,2)
pop    %edi
insl   (%dx),%es:(%edi)
gs
je     808bb68 <_IO_stdin_used+0x92e4>
imul   $0x73207b20,0x73(%ebx),%esp
push   $0x7c20776f
and    %ah,0x6c(%esi)
jne    808bb7a <_IO_stdin_used+0x92f6>
push   $0x53207d20
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x5f706374,0x20(%eax),%esi
insl   (%dx),%es:(%edi)
gs
je     808bb9c <_IO_stdin_used+0x9318>
imul   $0x6c656420,0x73(%ebx),%esp
gs
je     808bb99 <_IO_stdin_used+0x9315>
and    %bl,0x20(%ebx)
popa
fs
fs
jb     808bba1 <_IO_stdin_used+0x931d>
jae    808bbb1 <_IO_stdin_used+0x932d>
and    %bl,0x20(%ebp)
inc    %ecx
inc    %esp
inc    %esp
push   %edx
inc    %ebp
push   %ebx
push   %ebx
or     (%eax),%al
add    %al,(%eax)
push   %ebx
inc    %ebp
dec    %esp
inc    %ebp
inc    %ebx
push   %esp
dec    %edi
push   %edx
and    %bh,(%edx)
cmp    $0x5b205b20,%eax
and    %ah,0x64(%ecx)
fs
jb     808bbc6 <_IO_stdin_used+0x9342>
jae    808bbd6 <_IO_stdin_used+0x9352>
and    %bl,0x20(%ebp)
push   %eax
push   %edx
inc    %ebp
inc    %esi
dec    %ecx
pop    %eax
and    %bl,0xa(%ebp)
add    %ah,(%eax)
outsw  %ds:(%esi),(%dx)
pop    %edi
jae    808bbef <_IO_stdin_used+0x936b>
outsb  %ds:(%esi),(%dx)
pop    %edi
fs
jb     808bbea <_IO_stdin_used+0x9366>
jo     808bbf0 <_IO_stdin_used+0x936c>
and    %ah,0x6c252f75
insb   (%dx),%es:(%edi)
jne    808bbb4 <_IO_stdin_used+0x9330>
and    $0x6c6c3330,%eax
jne    808bc00 <_IO_stdin_used+0x937c>
arpl   %sp,%gs:(%eax)
popa
outsl  %ds:(%si),(%dx)
add    %al,0x72(%ebp)
jb     808bc07 <_IO_stdin_used+0x9383>
jb     808bbd4 <_IO_stdin_used+0x9350>
and    %ah,0x20(%ecx)
jae    808bc0f <_IO_stdin_used+0x938b>
arpl   %bp,%gs:0x66(%ecx)
imul   $0x61205049,0x20(%ebx),%esp
fs
fs
jb     808bc13 <_IO_stdin_used+0x938f>
jae    808bc23 <_IO_stdin_used+0x939f>
and    %ch,0x73(%ecx)
and    %ah,0x78(%ebp)
jo     808bc1d <_IO_stdin_used+0x9399>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     808bc29 <_IO_stdin_used+0x93a5>
gs
jb     808bbe4 <_IO_stdin_used+0x9360>
je     808bc2e <_IO_stdin_used+0x93aa>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808bc00 <_IO_stdin_used+0x937c>
jne    808bc50 <_IO_stdin_used+0x93cc>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     808bc5d <_IO_stdin_used+0x93d9>
jns    808bc0d <_IO_stdin_used+0x9389>
and    0x70(%ecx),%ch
and    %dh,0x70(%ebx,%eiz,2)
pop    %edi
insl   (%dx),%es:(%edi)
gs
je     808bc6b <_IO_stdin_used+0x93e7>
imul   $0x6c656820,0x73(%ebx),%esp
jo     808bc24 <_IO_stdin_used+0x93a0>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %ah,0x45(%ecx)
or     %cl,(%eax)
(bad)
inc    %ebx
or     %cl,(%eax)
clc
inc    %ebx
or     %cl,(%eax)
push   $0xe9080843
inc    %edx
or     %cl,(%eax)
and    %dh,(%eax,%ecx,1)
or     %al,(%ecx)
add    %al,(%eax)
add    %ch,(%edx)
xor    $0x8,%al
or     %al,(%ecx)
add    %al,(%eax)
add    %ah,0x1080834
add    %al,(%eax)
add    %bl,0x208085f(%esi)
add    %al,(%eax)
add    %ah,0x20808ba(%ebp)
add    %al,(%eax)
add    %ch,(%esi)
xor    $0x8,%al
or     %al,(%eax,%eax,1)
add    %al,(%eax)
fs
popa
je     808bcd5 <_IO_stdin_used+0x9451>
addr16 jb 808bcd8 <_IO_stdin_used+0x9454>
insl   (%dx),%es:(%edi)
add    %dh,0x6b(%eax)
gs
jns    808bc9e <_IO_stdin_used+0x941a>
and    %ah,0x78342e23
and    %al,(%eax)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %ah,%fs:%gs:(%eax)
and    $0x75002073,%eax
insl   (%dx),%es:(%edi)
arpl   %sp,0x73(%ecx)
je     808bcb7 <_IO_stdin_used+0x9433>
and    %ah,0x2078342e
add    %dh,0x6b(%eax)
gs
jns    808bca3 <_IO_stdin_used+0x941f>
jo     808bd10 <_IO_stdin_used+0x948c>
gs
jns    808bcc8 <_IO_stdin_used+0x9444>
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x7361636d,0x75(%eax,%eax,1),%esp
je     808bcba <_IO_stdin_used+0x9436>
jne    808bd29 <_IO_stdin_used+0x94a5>
arpl   %sp,0x73(%ecx)
je     808bce1 <_IO_stdin_used+0x945d>
imul   $0x61766e69,0x20(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x62696f70,0x69(%eax,%eax,1),%esp
cmp    (%eax),%ah
jne    808bd43 <_IO_stdin_used+0x94bf>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     808bd48 <_IO_stdin_used+0x94c4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa3f2273,%eax
add    %ch,0x70(%ecx)
outsl  %ds:(%esi),(%dx)
imul   $0x72724500,0x0(%edx),%esp
outsl  %ds:(%esi),(%dx)
jb     808bd30 <_IO_stdin_used+0x94ac>
and    %ah,0x72(%ecx)
addr16 jne 808bd69 <_IO_stdin_used+0x94e5>
outsb  %gs:(%esi),(%dx)
je     808bd20 <_IO_stdin_used+0x949c>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %fs:%gs:(%eax),%ah
insl   (%dx),%es:(%edi)
jne    808bd80 <_IO_stdin_used+0x94fc>
je     808bd2f <_IO_stdin_used+0x94ab>
bound  %esp,0x20(%ebp)
and    0x74(%ecx,%eiz,2),%ah
popa
addr16 jb 808bd7b <_IO_stdin_used+0x94f7>
insl   (%dx),%es:(%edi)
and    0x72(%edi),%ch
and    %ah,(%edx)
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    (%edx),%cl
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
cs cs and %ch,%cs:0x70(%ecx)
outsl  %ds:(%esi),(%dx)
imul   $0x656b705b,0x20(%edx),%esp
jns    808bd63 <_IO_stdin_used+0x94df>
push   %eax
dec    %ebx
inc    %ebp
pop    %ecx
pop    %ebp
and    %bl,0x6d(%ebx)
outsl  %ds:(%esi),(%dx)
fs and %bh,%fs:%gs:0x64(%ebx)
popa
je     808bdb5 <_IO_stdin_used+0x9531>
addr16 jb 808bdb8 <_IO_stdin_used+0x9534>
insl   (%dx),%es:(%edi)
and    %bh,0x63(%eax,%eiz,1)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
jge    808bdc3 <_IO_stdin_used+0x953f>
pop    %ebx
jne    808bdd6 <_IO_stdin_used+0x9552>
arpl   %sp,0x73(%ecx)
je     808bd8e <_IO_stdin_used+0x950a>
jnp    808bda0 <_IO_stdin_used+0x951c>
jl     808bda3 <_IO_stdin_used+0x951f>
jge    808bdd1 <_IO_stdin_used+0x954d>
or     (%edx),%cl
push   %eax
dec    %ebx
inc    %ebp
pop    %ecx
and    %ah,(%eax)
cmp    0x38783020,%bh
xor    %dh,(%eax)
xor    %ebp,0x66667830
data16
data16
or     (%eax),%al
imul   $0x69002034,0x76(%eax),%esi
jo     808be0d <_IO_stdin_used+0x9589>
and    %al,%ss:(%eax)
jne    808be0a <_IO_stdin_used+0x9586>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %al,(%eax)
outsw  %ds:(%esi),(%dx)
jb     808be1e <_IO_stdin_used+0x959a>
popa
jb     808be0e <_IO_stdin_used+0x958a>
imul   $0x20732520,0x67(%esi),%ebp
add    %dh,0x70(%edx)
pop    %edi
imul   $0x2072,0x65(%esp,%esi,2),%bp
outsl  %ds:(%esi),(%dx)
data16
data16
and    %al,(%eax)
jb     808be33 <_IO_stdin_used+0x95af>
pop    %edi
imul   $0x2072,0x65(%esp,%esi,2),%bp
jae    808be41 <_IO_stdin_used+0x95bd>
jb     808be38 <_IO_stdin_used+0x95b4>
arpl   %si,0x0(%eax,%eiz,1)
jb     808be45 <_IO_stdin_used+0x95c1>
pop    %edi
imul   $0x2072,0x65(%esp,%esi,2),%bp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jae    808be47 <_IO_stdin_used+0x95c3>
and    %al,(%eax)
jb     808be56 <_IO_stdin_used+0x95d2>
pop    %edi
imul   $0x2072,0x65(%esp,%esi,2),%bp
jne    808be5e <_IO_stdin_used+0x95da>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%ebp)
fs and %al,%fs:%gs:(%eax)
insl   (%dx),%es:(%edi)
arpl   %bx,0x66(%edi)
outsl  %ds:(%esi),(%dx)
jb     808be7a <_IO_stdin_used+0x95f6>
popa
jb     808be6a <_IO_stdin_used+0x95e6>
imul   $0x20642520,0x67(%esi),%ebp
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     808be34 <_IO_stdin_used+0x95b0>
push   %edx
push   %esp
dec    %ebp
pop    %edi
dec    %esi
inc    %ebp
push   %edi
dec    %esi
inc    %ebp
push   %esp
inc    %ebx
dec    %edi
dec    %esi
inc    %esi
cmp    (%eax),%ah
and    $0x20783830,%eax
and    $0x20783830,%eax
and    $0xa783830,%eax
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
imul   $0x6374656e,0x20(%eax),%esi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     808be6b <_IO_stdin_used+0x95e7>
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x54(%ebx)
push   %edx
dec    %ecx
dec    %esi
inc    %edi
and    %bl,0xa(%ebp)
add    %al,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:(%edx)
and    $0x69202273,%eax
jae    808be8c <_IO_stdin_used+0x9608>
jne    808bedc <_IO_stdin_used+0x9658>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
je     808bee9 <_IO_stdin_used+0x9665>
jns    808be99 <_IO_stdin_used+0x9615>
and    0x70(%ecx),%ch
and    %ch,0x65(%esi)
je     808bee4 <_IO_stdin_used+0x9660>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
data16
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     808beac <_IO_stdin_used+0x9628>
or     %cs:(%eax),%al
imul   $0x203670,0x69(%eax),%esi
imul   $0x20367069,0x36(%eax),%esi
add    %ah,0x6e(%ecx)
jns    808bec0 <_IO_stdin_used+0x963c>
add    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x6f6e2074,0x69(%ebp),%ebp
outsb  %ds:(%esi),(%dx)
and    %al,%gs:(%eax)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x75252074,0x69(%ebp),%ebp
and    %al,(%eax)
push   $0x696c706f
insl   (%dx),%es:(%edi)
imul   $0x74002075,0x25(%eax,%eiz,1),%esi
arpl   %bp,0x73(%ecx,%eiz,2)
jae    808bef5 <_IO_stdin_used+0x9671>
imul   $0x74697265,0x68(%esi),%ebp
and    %al,(%eax)
je     808bf43 <_IO_stdin_used+0x96bf>
insb   (%dx),%es:(%edi)
popa
jae    808bf57 <_IO_stdin_used+0x96d3>
and    %dh,(%eax)
js     808bf0d <_IO_stdin_used+0x9689>
xor    %dh,(%edx)
js     808bf0c <_IO_stdin_used+0x9688>
add    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     808bf5e <_IO_stdin_used+0x96da>
popa
bound  %esp,0x6c(%ebp)
and    %ch,0x6e(%ecx)
push   $0x74697265
and    %al,(%eax)
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808bf71 <_IO_stdin_used+0x96ed>
popa
bound  %esp,0x6c(%ebp)
and    %dh,(%eax)
js     808bf32 <_IO_stdin_used+0x96ae>
xor    %dh,0x28002078
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808bf81 <_IO_stdin_used+0x96fd>
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
and    %dh,(%eax)
js     808bf44 <_IO_stdin_used+0x96c0>
xor    %bh,(%eax)
js     808bf4c <_IO_stdin_used+0x96c8>
and    %al,(%eax)
fs
jae    808bf8b <_IO_stdin_used+0x9707>
jo     808bf4a <_IO_stdin_used+0x96c6>
imul   $0x74697265,0x68(%esi),%ebp
and    %al,(%eax)
insl   (%dx),%es:(%edi)
imul   $0x77660020,0x36(%eax),%esi
insl   (%dx),%es:(%edi)
popa
jb     808bfaa <_IO_stdin_used+0x9726>
and    %ch,0x6e(%ecx)
push   $0x74697265
and    %al,(%eax)
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808bf70 <_IO_stdin_used+0x96ec>
addr16 jne 808bfb8 <_IO_stdin_used+0x9734>
jae    808bfc8 <_IO_stdin_used+0x9744>
and    %dh,0x6e(%ebp,%esi,2)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
and    %ch,0x6f(%ebp)
fs gs add %ah,%cs:%fs:%gs:(%edx)
fs
gs
jbe    808bf8a <_IO_stdin_used+0x9706>
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
jbe    808bfd1 <_IO_stdin_used+0x974d>
insb   (%dx),%es:(%edi)
imul   $0x6c61766e,0x69(%eax,%eax,1),%esp
imul   $0x4d494c,0x48(%eax,%eiz,1),%esp
imul   $0x6c6e74,0x36(%eax),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ch,0x6f(%ebp)
fs and %bh,%fs:%gs:0x20(%ebx)
imul   $0x20367069,0x36(%eax),%esi
jl     808bfc4 <_IO_stdin_used+0x9740>
imul   $0x7c203670,0x69(%eax),%esi
and    %ah,0x6e(%ecx)
jns    808bfd0 <_IO_stdin_used+0x974c>
jge    808bfd2 <_IO_stdin_used+0x974e>
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x70(%ecx,%edi,2)
and    %ch,%gs:0x70(%ecx)
ss
je     808c03a <_IO_stdin_used+0x97b6>
insb   (%dx),%es:(%edi)
and    %bl,0x20(%ebx)
jb     808c037 <_IO_stdin_used+0x97b3>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808c03b <_IO_stdin_used+0x97b7>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
fs
gs
jbe    808c020 <_IO_stdin_used+0x979c>
push   %eax
dec    %eax
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6e(%ebp)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x4c452074,0x69(%ebp),%ebp
dec    %ecx
dec    %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
push   $0x696c706f
insl   (%dx),%es:(%edi)
imul   $0x204d494c,0x48(%eax,%eiz,1),%esi
pop    %ebp
and    %bl,0x20(%ebx)
je     808c0a3 <_IO_stdin_used+0x981f>
insb   (%dx),%es:(%edi)
popa
jae    808c0b7 <_IO_stdin_used+0x9833>
and    %dl,0x4c(%ebx,%eax,2)
inc    %ecx
push   %ebx
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     808c0c1 <_IO_stdin_used+0x983d>
popa
bound  %esp,0x6c(%ebp)
and    %al,0x4c(%esi)
dec    %edi
push   %edi
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x63(%ebx,%esi,2)
jo     808c099 <_IO_stdin_used+0x9815>
imul   $0x74697265,0x68(%esi),%ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x77(%esi)
insl   (%dx),%es:(%edi)
popa
jb     808c0f6 <_IO_stdin_used+0x9872>
and    %ch,0x6e(%ecx)
push   $0x74697265
and    %bl,0xa(%ebp)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %cl,0x4c(%eax)
dec    %ecx
dec    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
cmp    0x2e2e3020,%bh
xor    0x64282035,%dh
gs
popaw
jne    808c126 <_IO_stdin_used+0x98a2>
je     808c0f9 <_IO_stdin_used+0x9875>
and    $0xa2964,%eax
imul   $0x20706174,0x61(%ebx),%esi
add    %ch,0x70(%ecx)
jbe    808c103 <_IO_stdin_used+0x987f>
das
imul   $0x70690034,0x76(%eax),%esi
imul   $0x34767069,%ss:0x0(%eax),%esi
das
imul   $0x70690034,0x76(%eax),%esi
xor    $0x69,%al
jo     808c11d <_IO_stdin_used+0x9899>
add    %ah,0x6e(%ecx)
jns    808c11d <_IO_stdin_used+0x9899>
imul   $0x30320034,0x76(%eax),%esi
xor    %dh,(%edx)
cmp    (%edx),%bh
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
imul   $0x20706174,0x61(%ebx),%esi
pop    %ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808c195 <_IO_stdin_used+0x9911>
jo     808c183 <_IO_stdin_used+0x98ff>
and    %bh,0x20(%ebx)
imul   $0x207c2070,0x69(%eax),%esi
jae    808c193 <_IO_stdin_used+0x990f>
je     808c14c <_IO_stdin_used+0x98c8>
jge    808c14e <_IO_stdin_used+0x98ca>
pop    %ebx
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808c19b <_IO_stdin_used+0x9917>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
fs and %bh,%fs:%gs:0x20(%ebx)
imul   $0x7c207069,0x36(%eax),%esi
and    %ch,0x70(%ecx)
imul   $0x6e61207c,0x20(%eax),%esi
jns    808c196 <_IO_stdin_used+0x9912>
jge    808c198 <_IO_stdin_used+0x9914>
pop    %ebp
or     (%eax),%al
push   $0x696c706f
insl   (%dx),%es:(%edi)
imul   $0x65002064,0x25(%eax,%eiz,1),%esi
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x64252074,0x69(%ebp),%ebp
and    %al,(%eax)
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    808c1fc <_IO_stdin_used+0x9978>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ah,0x6f(%esi)
jb     808c1c9 <_IO_stdin_used+0x9945>
and    0x65(%ebx),%ch
jns    808c1d0 <_IO_stdin_used+0x994c>
or     (%eax),%al
imul   $0x74657267,0x36(%eax),%esi
popa
jo     808c1ba <_IO_stdin_used+0x9936>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     808c241 <_IO_stdin_used+0x99bd>
jo     808c22f <_IO_stdin_used+0x99ab>
and    %bh,0x20(%ebx)
imul   $0x20657267,0x36(%eax),%esi
jl     808c1f6 <_IO_stdin_used+0x9972>
imul   $0x74657267,0x36(%eax),%esi
popa
jo     808c200 <_IO_stdin_used+0x997c>
jge    808c202 <_IO_stdin_used+0x997e>
pop    %ebx
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
je     808c24f <_IO_stdin_used+0x99cb>
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
and    %al,0x44(%ecx)
inc    %esp
push   %edx
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
push   $0x696c706f
insl   (%dx),%es:(%edi)
imul   $0x5d204c54,0x54(%eax,%eiz,1),%esi
and    %bl,0x20(%ebx)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x70(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x4c452074,0x69(%ebp),%ebp
dec    %ecx
dec    %ebp
and    %bl,0xa(%ebp)
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x20(%ebx)
je     808c2a5 <_IO_stdin_used+0x9a21>
insb   (%dx),%es:(%edi)
popa
jae    808c2b9 <_IO_stdin_used+0x9a35>
and    %dl,0x4c(%ebx,%eax,2)
inc    %ecx
push   %ebx
push   %ebx
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x6c(%esi)
outsl  %ds:(%esi),(%dx)
ja     808c2c3 <_IO_stdin_used+0x9a3f>
popa
bound  %esp,0x6c(%ebp)
and    %al,0x4c(%esi)
dec    %edi
push   %edi
dec    %esp
inc    %ecx
inc    %edx
inc    %ebp
dec    %esp
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
and    %ah,0x63(%ebx,%esi,2)
jo     808c29d <_IO_stdin_used+0x9a19>
imul   $0x74697265,0x68(%esi),%ebp
and    %bl,0x20(%ebp)
pop    %ebx
and    %ah,0x76(%ebp,%eiz,2)
and    %dl,0x48(%eax)
pop    %ecx
push   %ebx
pop    %edi
inc    %esp
inc    %ebp
push   %esi
and    %bl,0xa(%ebp)
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dl,0x4c(%esp,%edx,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bh,(%edx)
cmp    $0x30207b20,%eax
cs xor %cs:0x207d2035,%dh
sub    %ah,0x66(%ebp,%eiz,2)
popa
jne    808c32e <_IO_stdin_used+0x9aaa>
je     808c301 <_IO_stdin_used+0x9a7d>
and    $0xa2964,%eax
inc    %ebp
jb     808c33e <_IO_stdin_used+0x9aba>
outsl  %ds:(%esi),(%dx)
jb     808c2ef <_IO_stdin_used+0x9a6b>
je     808c332 <_IO_stdin_used+0x9aae>
insb   (%dx),%es:(%edi)
imul   $0x67,0x6e(%ecx),%ebp
and    %dh,0x20(%edi,%ebp,2)
je     808c344 <_IO_stdin_used+0x9ac0>
and    %ch,%gs:0x65(%ebx)
jb     808c350 <_IO_stdin_used+0x9acc>
gs
insb   (%dx),%es:(%edi)
or     (%eax),%al
dec    %ebp
imul   $0x20676e69,0x73(%ebx),%esi
popaw
insl   (%dx),%es:(%edi)
imul   $0x54206469,0x20(%ecx,%edi,2),%ebp
dec    %esp
push   %esi
or     (%eax),%al
add    %al,(%eax)
add    %cl,0x6f(%esi)
je     808c324 <_IO_stdin_used+0x9aa0>
popa
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     808c37d <_IO_stdin_used+0x9af9>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     808c331 <_IO_stdin_used+0x9aad>
insl   (%dx),%es:(%edi)
gs
jae    808c388 <_IO_stdin_used+0x9b04>
popa
addr16
gs
sub    $0x20,%al
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    808c386 <_IO_stdin_used+0x9b02>
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0x6e206425,%eax
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    808c393 <_IO_stdin_used+0x9b0f>
pop    %edi
je     808c3a8 <_IO_stdin_used+0x9b24>
jo     808c396 <_IO_stdin_used+0x9b12>
cmp    $0x78257830,%eax
or     (%eax),%al
ja     808c3ac <_IO_stdin_used+0x9b28>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%bp,%di)
outsb  %ds:(%esi),(%dx)
je     808c3b5 <_IO_stdin_used+0x9b31>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     808c369 <_IO_stdin_used+0x9ae5>
insl   (%dx),%es:(%edi)
gs
jae    808c3c0 <_IO_stdin_used+0x9b3c>
popa
and    %ch,%gs:0x65(%si)
outsb  %ds:(%esi),(%dx)
and    %ah,0xa64
add    %al,(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     808c3db <_IO_stdin_used+0x9b57>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
gs
jb     808c38f <_IO_stdin_used+0x9b0b>
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x2a000a64
add    %ch,0x66(%ecx)
and    $0x66690064,%eax
and    $0x61430075,%eax
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808c3ae <_IO_stdin_used+0x9b2a>
outsl  %ds:(%esi),(%dx)
jo     808c3f6 <_IO_stdin_used+0x9b72>
outsb  %ds:(%esi),(%dx)
and    %ch,0x65(%esi)
je     808c403 <_IO_stdin_used+0x9b7f>
imul   $0x636f7320,0x6b(%esi),%ebp
imul   $0x0,0x74(%ebp),%esp
push   %ebx
dec    %edi
pop    %edi
push   %ebx
dec    %esi
inc    %esp
inc    %edx
push   %ebp
inc    %esi
add    %dl,0x4f(%ebx)
pop    %edi
push   %edx
inc    %ebx
push   %esi
inc    %edx
push   %ebp
inc    %esi
add    %al,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808c3dd <_IO_stdin_used+0x9b59>
bound  %ebp,0x6e(%ecx)
and    %ch,%fs:0x65(%esi)
je     808c432 <_IO_stdin_used+0x9bae>
imul   $0x636f7320,0x6b(%esi),%ebp
imul   $0x0,0x74(%ebp),%esp
inc    %ebx
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808c3f8 <_IO_stdin_used+0x9b74>
addr16
gs
je     808c44f <_IO_stdin_used+0x9bcb>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %dl,%gs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x64(%bx,%di)
fs
jb     808c454 <_IO_stdin_used+0x9bd0>
jae    808c464 <_IO_stdin_used+0x9be0>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 808c460 <_IO_stdin_used+0x9bdc>
and    %ah,0x57000a64
jb     808c46f <_IO_stdin_used+0x9beb>
outsb  %ds:(%esi),(%dx)
and    %ah,0x64(%bx,%di)
fs
jb     808c46d <_IO_stdin_used+0x9be9>
jae    808c47d <_IO_stdin_used+0x9bf9>
and    %ah,0x61(%esi)
insl   (%dx),%es:(%edi)
imul   $0xa6425,0x20(%ecx,%edi,2),%ebp
inc    %ebp
push   %edx
push   %edx
dec    %edi
push   %edx
and    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs or  %fs:%gs:(%eax),%al
inc    %ebp
dec    %edi
inc    %esi
and    %ch,0x6e(%edi)
and    %ch,0x65(%esi)
je     808c49e <_IO_stdin_used+0x9c1a>
imul   $0x5452000a,0x6b(%esi),%ebp
dec    %esi
inc    %ebp
push   %esp
dec    %esp
dec    %ecx
dec    %esi
dec    %ebx
and    %ah,0x6e(%ecx)
jae    808c4bc <_IO_stdin_used+0x9c38>
gs
jb     808c4bb <_IO_stdin_used+0x9c37>
add    %cl,0x65(%ebp)
jae    808c4c0 <_IO_stdin_used+0x9c3c>
popa
and    %dh,%gs:0x72(%si)
jne    808c4c3 <_IO_stdin_used+0x9c3f>
arpl   %sp,0x74(%ecx)
gs or  %fs:%gs:(%eax),%al
and    %esp,(%ecx)
and    %edx,0x65(%edx)
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
popa
outsb  %ds:(%esi),(%dx)
je     808c487 <_IO_stdin_used+0x9c03>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x69(%ebx)
jp     808c4d3 <_IO_stdin_used+0x9c4f>
and    %ah,0x43000a64
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     808c49a <_IO_stdin_used+0x9c16>
je     808c4dd <_IO_stdin_used+0x9c59>
insb   (%dx),%es:(%edi)
imul   $0x74,(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
gs
je     808c4f4 <_IO_stdin_used+0x9c70>
imul   $0x6e657300,0x6b(%esi),%ebp
fs
gs
jb     808c4b3 <_IO_stdin_used+0x9c2f>
popa
fs
fs
jb     808c4fd <_IO_stdin_used+0x9c79>
jae    808c50d <_IO_stdin_used+0x9c89>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 808c509 <_IO_stdin_used+0x9c85>
and    %bh,0x6425203d
or     (%eax),%al
push   %esp
jb     808c521 <_IO_stdin_used+0x9c9d>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs and %ch,%fs:%gs:0x65(%ebp)
jae    808c52a <_IO_stdin_used+0x9ca6>
popa
or     %gs:(%bx,%si),%al
and    %esp,(%ecx)
and    %ebp,0x61(%ebp)
insb   (%dx),%es:(%edi)
outsw  %ds:(%esi),(%dx)
jb     808c533 <_IO_stdin_used+0x9caf>
gs and %ch,%fs:%gs:0x65(%ebp)
jae    808c540 <_IO_stdin_used+0x9cbc>
popa
cmp    %gs:(%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0xa6425,%eax
push   %edx
push   %esp
dec    %esi
inc    %ebp
push   %esp
dec    %esp
dec    %ecx
dec    %esi
dec    %ebx
and    %ah,0x6e(%ecx)
jae    808c55f <_IO_stdin_used+0x9cdb>
gs
jb     808c55e <_IO_stdin_used+0x9cda>
cmp    (%eax),%ah
and    $0x55000a73,%eax
outsb  %ds:(%esi),(%dx)
gs
js     808c566 <_IO_stdin_used+0x9ce2>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %dh,0x65(%edx)
jo     808c56c <_IO_stdin_used+0x9ce8>
jns    808c523 <_IO_stdin_used+0x9c9f>
and    %esp,(%ecx)
or     (%eax),%al
push   %ebx
outsb  %gs:(%esi),(%dx)
fs
gs
jb     808c52d <_IO_stdin_used+0x9ca9>
popa
fs
fs
jb     808c577 <_IO_stdin_used+0x9cf3>
jae    808c587 <_IO_stdin_used+0x9d03>
and    %ch,0x6e(%ebp,%eiz,2)
addr16 je 808c583 <_IO_stdin_used+0x9cff>
and    %bh,0x6425203d
or     (%eax),%al
jb     808c599 <_IO_stdin_used+0x9d15>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
data16
jb     808c59a <_IO_stdin_used+0x9d16>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x6620,0x3a(%ebp,%eiz,2),%bp
jb     808c59b <_IO_stdin_used+0x9d17>
popa
add    %ah,%fs:(%ecx)
and    %esp,(%ecx)
inc    %esp
imul   $0x2074,%gs:0x69(%ebx),%sp
and    $0x72202c64,%eax
je     808c5ac <_IO_stdin_used+0x9d28>
pop    %edi
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0xa6425,%eax
outsb  %ds:(%esi),(%dx)
gs
je     808c5c4 <_IO_stdin_used+0x9d40>
imul   $0x63657220,0x6b(%esi),%ebp
imul   $0x72726520,%gs:0x65(%esi),%esi
outsl  %ds:(%esi),(%dx)
jb     808c58a <_IO_stdin_used+0x9d06>
and    $0x25282073,%eax
sub    %ecx,%fs:(%edx)
add    %al,(%eax)
inc    %esp
jne    808c5e4 <_IO_stdin_used+0x9d60>
jo     808c599 <_IO_stdin_used+0x9d15>
ja     808c5dc <_IO_stdin_used+0x9d58>
jae    808c59d <_IO_stdin_used+0x9d19>
imul   $0x75727265,0x74(%esi),%ebp
jo     808c5fa <_IO_stdin_used+0x9d76>
gs and %ah,%fs:%gs:0x6e(%ecx)
and    %ch,%fs:0x61(%ebp)
jns    808c5b1 <_IO_stdin_used+0x9d2d>
bound  %esp,0x20(%ebp)
imul   $0x69736e6f,0x63(%esi),%ebp
jae    808c611 <_IO_stdin_used+0x9d8d>
outsb  %gs:(%esi),(%dx)
je     808c5cf <_IO_stdin_used+0x9d4b>
or     (%eax),%al
add    %ah,(%ecx)
and    %esp,(%ecx)
insl   (%dx),%es:(%edi)
popa
insb   (%dx),%es:(%edi)
outsw  %ds:(%esi),(%dx)
jb     808c61b <_IO_stdin_used+0x9d97>
gs and %ch,%fs:%gs:0x65(%ebp)
jae    808c628 <_IO_stdin_used+0x9da4>
popa
cmp    %gs:(%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
cmp    $0x40206425,%eax
and    $0xa756c,%eax
add    %dh,0x74(%edx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    $0x6d6f7266,%eax
pop    %edi
imul   $0x7420,0x3a(%ebp,%eiz,2),%bp
jb     808c650 <_IO_stdin_used+0x9dcc>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs and %ch,%fs:%gs:0x65(%ebp)
jae    808c659 <_IO_stdin_used+0x9dd5>
popa
or     %gs:(%bx,%si),%al
add    %ah,0x64(%ecx)
fs
popa
je     808c666 <_IO_stdin_used+0x9de2>
jb     808c653 <_IO_stdin_used+0x9dcf>
insb   (%dx),%es:(%edi)
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
cmp    (%eax),%ah
insl   (%dx),%es:(%edi)
gs
jae    808c674 <_IO_stdin_used+0x9df0>
popa
and    %ah,%gs:0x78(%di)
arpl   %sp,0x65(%ebp)
fs gs and %ah,%fs:%gs:0x6f(%edx)
jne    808c680 <_IO_stdin_used+0x9dfc>
and    %ch,%fs:0x66(%edi)
and    %ah,0xa64
popa
fs
fs
jb     808c682 <_IO_stdin_used+0x9dfe>
ja     808c682 <_IO_stdin_used+0x9dfe>
insb   (%dx),%es:(%edi)
and    %al,0x52(%ebp)
push   %edx
dec    %edi
push   %edx
cmp    (%eax),%ah
insl   (%dx),%es:(%edi)
gs
jae    808c6a3 <_IO_stdin_used+0x9e1f>
popa
and    %ah,%gs:0x78(%di)
arpl   %sp,0x65(%ebp)
fs gs and %ah,%fs:%gs:0x6f(%edx)
jne    808c6af <_IO_stdin_used+0x9e2b>
and    %ch,%fs:0x66(%edi)
and    %ah,0xa64
add    %dh,0x74(%edx)
popa
pop    %edi
popa
fs
fs
popa
je     808c6ca <_IO_stdin_used+0x9e46>
jb     808c68b <_IO_stdin_used+0x9e07>
xor    (%edx),%bh
and    %al,0x72(%ebp)
jb     808c6ce <_IO_stdin_used+0x9e4a>
jb     808c682 <_IO_stdin_used+0x9dfe>
and    %ch,0x61(%ebp)
js     808c686 <_IO_stdin_used+0x9e02>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808c6d1 <_IO_stdin_used+0x9e4d>
and    %ah,%fs:0x6f(%edx)
jne    808c6e0 <_IO_stdin_used+0x9e5c>
and    %ah,%fs:0x78652064
arpl   %sp,0x65(%ebp)
fs gs or %fs:%gs:(%eax),%al
add    %al,(%eax)
add    %dh,0x74(%edx)
popa
pop    %edi
popa
fs
fs
popa
je     808c702 <_IO_stdin_used+0x9e7e>
jb     808c6ef <_IO_stdin_used+0x9e6b>
insb   (%dx),%es:(%edi)
cmp    (%eax),%ah
inc    %ebp
jb     808c708 <_IO_stdin_used+0x9e84>
outsl  %ds:(%esi),(%dx)
jb     808c6ba <_IO_stdin_used+0x9e36>
and    %ch,0x61(%ebp)
js     808c6be <_IO_stdin_used+0x9e3a>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808c709 <_IO_stdin_used+0x9e85>
and    %ah,%fs:0x6f(%edx)
jne    808c718 <_IO_stdin_used+0x9e94>
and    %ah,%fs:0x78652064
arpl   %sp,0x65(%ebp)
fs gs or %fs:%gs:(%eax),%al
insl   (%dx),%es:(%edi)
jae    808c721 <_IO_stdin_used+0x9e9d>
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
jae    808c726 <_IO_stdin_used+0x9ea2>
arpl   %si,0x0(%ebx)
dec    %eax
pop    %edx
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
dec    %esi
inc    %ebp
push   %esp
pop    %edi
push   %eax
push   %ebx
inc    %ebx
dec    %eax
inc    %ebp
inc    %esp
add    %dl,0x52(%eax)
dec    %edi
inc    %ebx
pop    %edi
push   %edx
dec    %edi
dec    %edi
push   %esp
add    %ah,0x656e2f73
je     808c717 <_IO_stdin_used+0x9e93>
jo     808c75d <_IO_stdin_used+0x9ed9>
arpl   %bp,0x65(%eax)
add    %ah,%fs:0x7838302a
and    $0x7838302a,%eax
and    $0x25783830,%eax
xor    %bh,(%eax)
js     808c702 <_IO_stdin_used+0x9e7e>
aas
aas
aas
add    %dl,0x6d(%ecx,%ebp,2)
gs
jae    808c780 <_IO_stdin_used+0x9efc>
popa
insl   (%dx),%es:(%edi)
jo     808c74a <_IO_stdin_used+0x9ec6>
and    %ah,0x6c252073
and    %dh,%fs:0x73(%ebp)
arpl   %cx,%gs:(%edx)
add    %cl,0x69(%ebp)
jae    808c795 <_IO_stdin_used+0x9f11>
imul   $0x6e6f6320,0x67(%esi),%ebp
je     808c794 <_IO_stdin_used+0x9f10>
outsb  %ds:(%esi),(%dx)
jne    808c78f <_IO_stdin_used+0x9f0b>
je     808c799 <_IO_stdin_used+0x9f15>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%ecx,%ebp,2)
or     %gs:(%eax),%al
dec    %edi
jne    808c7b0 <_IO_stdin_used+0x9f2c>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     808c7bf <_IO_stdin_used+0x9f3b>
or     (%eax),%al
pop    %esp
or     (%eax),%al
add    %al,0x72(%ebp)
jb     808c7bf <_IO_stdin_used+0x9f3b>
jb     808c78c <_IO_stdin_used+0x9f08>
and    %ah,(%edx)
and    $0x6d202273,%eax
popa
jns    808c77c <_IO_stdin_used+0x9ef8>
bound  %esp,0x20(%ebp)
imul   $0x64612074,0x65(%esi),%ebp
fs
jb     808c7ce <_IO_stdin_used+0x9f4a>
jae    808c7de <_IO_stdin_used+0x9f5a>
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     808c79b <_IO_stdin_used+0x9f17>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808c7e6 <_IO_stdin_used+0x9f62>
and    %ch,%fs:0x6e(%ecx)
and    %dh,0x69(%eax,%ebp,2)
jae    808c7ab <_IO_stdin_used+0x9f27>
arpl   %bp,0x6e(%edi)
je     808c7f5 <_IO_stdin_used+0x9f71>
js     808c806 <_IO_stdin_used+0x9f82>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     808c80b <_IO_stdin_used+0x9f87>
jb     808c7d8 <_IO_stdin_used+0x9f54>
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
gs
je     808c7c7 <_IO_stdin_used+0x9f43>
popa
fs
fs
jb     808c811 <_IO_stdin_used+0x9f8d>
jae    808c821 <_IO_stdin_used+0x9f9d>
and    %ch,0x73(%ecx)
and    %ah,0x78(%ebp)
jo     808c81b <_IO_stdin_used+0x9f97>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     808c827 <_IO_stdin_used+0x9fa3>
gs
jb     808c7e2 <_IO_stdin_used+0x9f5e>
je     808c82c <_IO_stdin_used+0x9fa8>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2e2273,%eax
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     808c843 <_IO_stdin_used+0x9fbf>
jb     808c810 <_IO_stdin_used+0x9f8c>
and    %ah,(%edx)
and    $0x6d202273,%eax
popa
jns    808c800 <_IO_stdin_used+0x9f7c>
bound  %esp,0x20(%ebp)
imul   $0x72702074,0x65(%esi),%ebp
imul   $0x6220,%gs:0x2c(%eax),%di
jne    808c867 <_IO_stdin_used+0x9fe3>
and    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     808c81e <_IO_stdin_used+0x9f9a>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     808c869 <_IO_stdin_used+0x9fe5>
and    %ch,%fs:0x6e(%ecx)
and    %dh,0x69(%eax,%ebp,2)
jae    808c82e <_IO_stdin_used+0x9faa>
arpl   %bp,0x6e(%edi)
je     808c878 <_IO_stdin_used+0x9ff4>
js     808c889 <_IO_stdin_used+0xa005>
or     %cs:(%eax),%al
inc    %ebp
jb     808c88d <_IO_stdin_used+0xa009>
outsl  %ds:(%esi),(%dx)
jb     808c858 <_IO_stdin_used+0x9fd4>
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
gs
je     808c847 <_IO_stdin_used+0x9fc3>
jo     808c89b <_IO_stdin_used+0xa017>
imul   $0x7369,%gs:0x20(%eax),%di
and    %ah,0x78(%ebp)
jo     808c89a <_IO_stdin_used+0xa016>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     808c8a6 <_IO_stdin_used+0xa022>
gs
jb     808c861 <_IO_stdin_used+0x9fdd>
je     808c8ab <_IO_stdin_used+0xa027>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2e2273,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebp
jb     808c8c5 <_IO_stdin_used+0xa041>
outsl  %ds:(%esi),(%dx)
jb     808c890 <_IO_stdin_used+0xa00c>
and    %ah,0x6e(%ecx)
and    %cl,0x50(%ecx)
and    %ah,0x64(%ecx)
fs
jb     808c8c7 <_IO_stdin_used+0xa043>
jae    808c8d7 <_IO_stdin_used+0xa053>
and    %ch,0x73(%ecx)
and    %ah,0x78(%ebp)
jo     808c8d1 <_IO_stdin_used+0xa04d>
arpl   %si,0x64(%ebp,%eiz,2)
and    %dh,0x61(%edx)
je     808c8dd <_IO_stdin_used+0xa059>
gs
jb     808c898 <_IO_stdin_used+0xa014>
je     808c8e2 <_IO_stdin_used+0xa05e>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
and    $0xa2273,%eax
add    %al,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ch,%gs:0x73(%ecx)
and    %ch,0x6f(%esi)
je     808c8b8 <_IO_stdin_used+0xa034>
arpl   %bp,0x6d(%edi)
jo     808c909 <_IO_stdin_used+0xa085>
gs
je     808c905 <_IO_stdin_used+0xa081>
and    %dl,%cs:0x79(%edx,%esi,2)
and    %ch,0x70(%edi)
je     808c913 <_IO_stdin_used+0xa08f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%edx)
push   $0x22706c65
or     (%eax),%al
add    %al,(%eax)
add    %al,0x72(%ebp)
jb     808c92b <_IO_stdin_used+0xa0a7>
jb     808c8f8 <_IO_stdin_used+0xa074>
and    %ah,0x72(%ecx)
addr16 jne 808c931 <_IO_stdin_used+0xa0ad>
outsb  %gs:(%esi),(%dx)
je     808c8e8 <_IO_stdin_used+0xa064>
and    0x69202273,%ah
jae    808c8f0 <_IO_stdin_used+0xa06c>
jb     808c937 <_IO_stdin_used+0xa0b3>
jno    808c949 <_IO_stdin_used+0xa0c5>
imul   $0xa64,0x65(%edx),%esi
add    %al,0x72(%ebp)
jb     808c94f <_IO_stdin_used+0xa0cb>
jb     808c91c <_IO_stdin_used+0xa098>
and    %ah,0x72(%ecx)
addr16 jne 808c955 <_IO_stdin_used+0xa0d1>
outsb  %gs:(%esi),(%dx)
je     808c90c <_IO_stdin_used+0xa088>
and    0x69202273,%ah
jae    808c914 <_IO_stdin_used+0xa090>
ja     808c968 <_IO_stdin_used+0xa0e4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
and    $0xa73,%eax
inc    %ebp
jb     808c975 <_IO_stdin_used+0xa0f1>
outsl  %ds:(%esi),(%dx)
jb     808c940 <_IO_stdin_used+0xa0bc>
and    %ah,0x70(%ebp,%esi,2)
insb   (%dx),%es:(%edi)
imul   $0x22206574,0x61(%ebx),%esp
and    $0x203a2273,%eax
and    0x69202273,%ah
jae    808c93f <_IO_stdin_used+0xa0bb>
je     808c989 <_IO_stdin_used+0xa105>
and    %dh,%gs:0x65(%ebx)
arpl   %bp,0x6e(%edi)
and    %dh,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    808c994 <_IO_stdin_used+0xa110>
or     %cs:(%eax),%al
add    %al,(%eax)
inc    %ebp
jb     808c9a9 <_IO_stdin_used+0xa125>
outsl  %ds:(%esi),(%dx)
jb     808c974 <_IO_stdin_used+0xa0f0>
and    %ah,0x69(%ebp)
je     808c9a7 <_IO_stdin_used+0xa123>
gs
jb     808c962 <_IO_stdin_used+0xa0de>
and    0x69202273,%ah
jae    808c96a <_IO_stdin_used+0xa0e6>
fs
jne    808c9bd <_IO_stdin_used+0xa139>
insb   (%dx),%es:(%edi)
imul   $0x202c6574,0x61(%ebx),%esp
outsl  %ds:(%esi),(%dx)
jb     808c978 <_IO_stdin_used+0xa0f4>
and    0x69202273,%ah
jae    808c980 <_IO_stdin_used+0xa0fc>
popa
and    %ah,0x61(%edi)
jb     808c9c8 <_IO_stdin_used+0xa144>
popa
gs or  %cs:%gs:(%bx,%si),%al
push   %esp
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
jns    808c995 <_IO_stdin_used+0xa111>
popa
jb     808c9df <_IO_stdin_used+0xa15b>
jne    808c9e7 <_IO_stdin_used+0xa163>
outsb  %gs:(%esi),(%dx)
je     808c9f1 <_IO_stdin_used+0xa16d>
and    %dh,0x20(%edi,%ebp,2)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
or     %fs:(%eax),%al
and    %cl,(%ecx)
or     $0xffff000a,%eax
(bad)
(bad)
(bad)
(bad)
out    %eax,(%dx)
jg     808c9c9 <_IO_stdin_used+0xa145>
js     808c9c0 <_IO_stdin_used+0xa13c>
js     808c9bd <_IO_stdin_used+0xa139>
and    $0x30000a73,%eax
js     808c9c9 <_IO_stdin_used+0xa145>
js     808c9c6 <_IO_stdin_used+0xa142>
and    $0x232073,%eax
and    $0x73252064,%eax
or     (%eax),%al
and    $0x73252064,%eax
and    %ah,(%ebx)
add    %ch,0x6f(%esi)
ja     808ca26 <_IO_stdin_used+0xa1a2>
gs
jb     808ca26 <_IO_stdin_used+0xa1a2>
add    %ch,0x6f(%eax)
jae    808ca3a <_IO_stdin_used+0xa1b6>
add    %dh,0x69(%ebx)
je     808ca30 <_IO_stdin_used+0xa1ac>
add    %ch,(%edi)
gs
je     808ca33 <_IO_stdin_used+0xa1af>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
jb     808ca50 <_IO_stdin_used+0xa1cc>
pop    %edi
jae    808ca42 <_IO_stdin_used+0xa1be>
outsl  %ds:(%esi),(%dx)
jo     808ca47 <_IO_stdin_used+0xa1c3>
jae    808c9e4 <_IO_stdin_used+0xa160>
das
gs
je     808ca4b <_IO_stdin_used+0xa1c7>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
jb     808ca68 <_IO_stdin_used+0xa1e4>
pop    %edi
jo     808ca69 <_IO_stdin_used+0xa1e5>
outsl  %ds:(%esi),(%dx)
je     808ca69 <_IO_stdin_used+0xa1e5>
jae    808c9fc <_IO_stdin_used+0xa178>
das
gs
je     808ca63 <_IO_stdin_used+0xa1df>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
jb     808ca80 <_IO_stdin_used+0xa1fc>
pop    %edi
jb     808ca74 <_IO_stdin_used+0xa1f0>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
jae    808ca14 <_IO_stdin_used+0xa190>
das
gs
je     808ca7b <_IO_stdin_used+0xa1f7>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
jb     808ca98 <_IO_stdin_used+0xa214>
pop    %edi
je     808ca88 <_IO_stdin_used+0xa204>
bound  %ebp,0x73(%ebp,%eiz,2)
add    %ch,(%edi)
gs
je     808ca93 <_IO_stdin_used+0xa20f>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
jb     808cab0 <_IO_stdin_used+0xa22c>
pop    %edi
fs
jae    808caa6 <_IO_stdin_used+0xa222>
imul   $0x652f0064,0x6c(%ebp),%esp
je     808caac <_IO_stdin_used+0xa228>
das
imul   $0x6574756f,0x72(%eax),%esi
xor    (%edi),%ch
addr16 jb 808cac5 <_IO_stdin_used+0xa241>
jne    808cac8 <_IO_stdin_used+0xa244>
add    %ah,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
bound  %esp,0x6c(%ecx)
add    %dh,0x65(%edx)
imul   $0x6b007463,%fs:0x65(%edx),%esi
gs
jb     808cadb <_IO_stdin_used+0xa257>
gs
insb   (%dx),%es:(%edi)
add    %ah,0x6f(%edx)
outsl  %ds:(%esi),(%dx)
je     808ca75 <_IO_stdin_used+0xa1f1>
addr16 popa
je     808cade <_IO_stdin_used+0xa25a>
add    %ch,%fs:0x72(%ebp)
je     808ca7f <_IO_stdin_used+0xa1fb>
jp     808cae6 <_IO_stdin_used+0xa262>
bound  %esi,0x61(%edx)
add    %ah,0x69(%edx)
jb     808caed <_IO_stdin_used+0xa269>
add    %ah,0x72(%esi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    808cb04 <_IO_stdin_used+0xa280>
gs add %bh,%fs:%gs:0x6f(%eax)
jb     808cb07 <_IO_stdin_used+0xa283>
add    %ch,0x74(%esi)
imul   $0x64,(%eax),%eax
push   $0x7063
add    %al,(%eax)
inc    %esp
popa
je     808cb09 <_IO_stdin_used+0xa285>
bound  %esp,0x73(%ecx)
and    %ah,%gs:0x73692073
and    %ah,0x6f(%ebx)
jb     808cb29 <_IO_stdin_used+0xa2a5>
jne    808cb29 <_IO_stdin_used+0xa2a5>
je     808cb20 <_IO_stdin_used+0xa29c>
and    %ah,%fs:0x74(%ecx)
and    %ah,0x5b000a73
and    $0x67005d64,%eax
outsb  %gs:(%esi),(%dx)
gs
jb     808cb38 <_IO_stdin_used+0xa2b4>
arpl   %ax,(%eax)
gs
gs
je     808cb3d <_IO_stdin_used+0xa2b9>
gs
jb     808cad8 <_IO_stdin_used+0xa254>
popa
js     808cb0d <_IO_stdin_used+0xa289>
xor    $0x6f727000,%eax
outsb  %ds:(%esi),(%dx)
gs
je     808cae4 <_IO_stdin_used+0xa260>
arpl   %bp,0x61(%eax)
outsl  %ds:(%esi),(%dx)
jae    808caea <_IO_stdin_used+0xa266>
imul   $0x32303865,0x65(%ebp),%esp
add    %ah,0x72(%ecx)
arpl   %bp,0x65(%esi)
je     808caf9 <_IO_stdin_used+0xa275>
popa
je     808cb5d <_IO_stdin_used+0xa2d9>
insb   (%dx),%es:(%edi)
imul   $0x64,(%eax),%eax
insb   (%dx),%es:(%edi)
arpl   %bp,0x0(%ecx)
popa
je     808cb74 <_IO_stdin_used+0xa2f0>
add    %ch,0x65(%ebp)
je     808cb7e <_IO_stdin_used+0xa2fa>
imul   $0x6569006d,0x6f(%ebx),%esp
gs xor %esi,%gs:(%ebx)
cmp    %esi,(%eax,%eax,1)
imul   $0x62696e69,0x66(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
add    %ah,%fs:0x73(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x696c7363,0x0(%eax),%esi
jo     808cb67 <_IO_stdin_used+0xa2e3>
add    %dh,0x73(%edx)
jb     808cbac <_IO_stdin_used+0xa328>
add    %ah,%fs:0x64(%ecx)
popa
jo     808cbb1 <_IO_stdin_used+0xa32d>
add    %dh,0x6f(%edx)
jae    808cba7 <_IO_stdin_used+0xa323>
add    %ch,0x77(%eax)
js     808cb79 <_IO_stdin_used+0xa2f5>
xor    $0x70616c00,%eax
bound  %eax,(%eax)
fs arpl %bp,%fs:0x70(%ebp)
add    %dh,0x61(%edx)
ja     808cbc0 <_IO_stdin_used+0xa33c>
fs
insb   (%dx),%es:(%edi)
arpl   %ax,(%eax)
je     808cbd3 <_IO_stdin_used+0xa34f>
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
insb   (%dx),%es:(%edi)
add    %ah,%ss:0x72(%esi)
popa
add    %dh,%fs:0x6b(%ebx)
imul   $0x69646466,0x0(%eax),%esi
add    %ah,0x69(%edx)
data16
add    %ch,0x70(%ecx)
das
fs
fs
jo     808cb7e <_IO_stdin_used+0xa2fa>
jo     808cbe9 <_IO_stdin_used+0xa365>
insl   (%dx),%es:(%edi)
jb     808cbe8 <_IO_stdin_used+0xa364>
add    %ch,0x69(%bx,%si)
jo     808cbf9 <_IO_stdin_used+0xa375>
imul   $0x687361,(%eax),%eax
arpl   %bp,%gs:0x6e(%edi)
gs
je     808cb96 <_IO_stdin_used+0xa312>
imul   $0x63660061,0x64(%edx),%esi
jo     808cc0f <_IO_stdin_used+0xa38b>
add    %ah,0x63(%esi)
popa
insb   (%dx),%es:(%edi)
add    %ah,0x63(%esi)
jo     808cc15 <_IO_stdin_used+0xa391>
add    %ah,0x63(%esi)
bound  %si,(%eax)
add    %ah,0x63(%esi)
bound  %si,(%ecx)
add    %ah,0x63(%esi)
bound  %si,(%edx)
add    %ah,0x63(%esi)
bound  %si,(%ebx)
add    %ah,0x63(%esi)
bound  %si,(%eax,%eax,1)
data16
arpl   %sp,0x62(%esi)
xor    $0x66636600,%eax
bound  %esi,(%esi)
add    %ah,0x63(%esi)
bound  %si,(%edi)
add    %ah,0x63(%esi)
bound  %di,(%eax)
add    %ah,0x63(%esi)
bound  %di,(%ecx)
add    %ah,0x63(%esi)
bound  %si,(%ecx)
xor    %al,(%eax)
data16
arpl   %sp,0x62(%esi)
xor    %esi,(%ecx)
add    %ah,0x63(%esi)
bound  %si,(%ecx)
xor    (%eax),%al
je     808cc6f <_IO_stdin_used+0xa3eb>
add    %ch,0x65(%ecx)
gs cmp %dh,%gs:(%eax)
xor    (%esi),%ch
xor    %esi,(%ecx)
add    %ch,0x65(%ecx)
gs cmp %dh,%gs:(%eax)
xor    (%esi),%ch
xor    %esi,(%ecx)
das
jo     808cc88 <_IO_stdin_used+0xa404>
imul   $0x65656900,0x6d(%ebx),%esi
cmp    %dh,%gs:(%eax)
xor    (%esi),%ch
xor    %esi,(%ecx)
das
jb     808cc88 <_IO_stdin_used+0xa404>
imul   $0x69007061,%fs:0x74(%edi),%ebp
gs gs cmp %dh,%gs:(%eax)
xor    (%esi),%ch
xor    %esi,0x7000342e
push   $0x74656e6f
add    %dh,0x68(%eax)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
je     808cca8 <_IO_stdin_used+0xa424>
jo     808ccb4 <_IO_stdin_used+0xa430>
jo     808ccb2 <_IO_stdin_used+0xa42e>
add    %ah,0x61(%ebx)
imul   $0x36657267,0x0(%esi),%esp
add    %dh,0x6f(%esi)
imul   $0x706f6f,0x6c(%eax,%eax,1),%esp
bound  %esi,0x71(%eax)
add    %ch,0x65(%ecx)
gs
gs
jo     808cce1 <_IO_stdin_used+0xa45d>
jo     808cc6e <_IO_stdin_used+0xa3ea>
imul   $0x70757065,0x65(%ebp),%esp
popa
je     808cc78 <_IO_stdin_used+0xa3f4>
fs arpl %ax,%fs:%gs:(%eax)
outsb  %fs:(%esi),(%dx)
popa
pop    %edi
fs
insb   (%dx),%es:(%edi)
add    %ah,0x61(%esi,%ebp,2)
pop    %edi
jb     808ccec <_IO_stdin_used+0xa468>
add    %ah,0x61(%esi,%ebp,2)
pop    %edi
jb     808cd04 <_IO_stdin_used+0xa480>
add    %ch,0x74(%ecx,%eiz,2)
add    %ah,0x61(%ecx,%ebp,2)
add    %ah,0x75(%bp,%di)
jae    808cd12 <_IO_stdin_used+0xa48e>
add    %dh,0x63(%ebx)
popa
add    %dh,0x61(%edx)
jb     808cd17 <_IO_stdin_used+0xa493>
add    %ah,0x61(%ecx)
jb     808cd1c <_IO_stdin_used+0xa498>
add    %ch,0x70(%ecx)
js     808ccb1 <_IO_stdin_used+0xa42d>
jo     808cd23 <_IO_stdin_used+0xa49f>
jo     808cd14 <_IO_stdin_used+0xa490>
imul   $0x70707000,%fs:0x63(%ebx),%esi
pop    %edi
jae    808cd25 <_IO_stdin_used+0xa4a1>
jae    808ccc2 <_IO_stdin_used+0xa43e>
popa
je     808cd32 <_IO_stdin_used+0xa4ae>
insl   (%dx),%es:(%edi)
jo     808cd37 <_IO_stdin_used+0xa4b3>
popa
add    %ah,0x74(%ecx)
insl   (%dx),%es:(%edi)
popaw
je     808cd36 <_IO_stdin_used+0xa4b2>
add    %bh,(%eax)
xor    %dh,(%edx)
pop    %edi
xor    (%eax),%eax
jae    808cd48 <_IO_stdin_used+0xa4c4>
popa
jo     808ccdd <_IO_stdin_used+0xa459>
ja     808cd40 <_IO_stdin_used+0xa4bc>
outsb  %ds:(%esi),(%dx)
pop    %edi
jo     808cd53 <_IO_stdin_used+0xa4cf>
jo     808cce5 <_IO_stdin_used+0xa461>
jo     808cd57 <_IO_stdin_used+0xa4d3>
jo     808cd48 <_IO_stdin_used+0xa4c4>
insl   (%dx),%es:(%edi)
jo     808ccec <_IO_stdin_used+0xa468>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
je     808cd54 <_IO_stdin_used+0xa4d0>
insb   (%dx),%es:(%edi)
imul   $0x70,(%eax),%eax
jo     808cd69 <_IO_stdin_used+0xa4e5>
je     808cd5c <_IO_stdin_used+0xa4d8>
insb   (%dx),%es:(%edi)
imul   $0x74,(%eax),%eax
jb     808cd60 <_IO_stdin_used+0xa4dc>
cmp    %dh,(%eax)
xor    0x32(%edi),%bl
add    %ch,0x6f(%ebp)
bound  %ebp,0x74(%ecx)
gs
js     808cd0f <_IO_stdin_used+0xa48b>
arpl   %bp,0x6e(%edi)
je     808cd86 <_IO_stdin_used+0xa502>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dh,0x70(%ecx,%ebp,2)
arpl   %ax,(%eax)
popa
outsl  %ds:(%esi),(%dx)
add    %bh,%gs:(%eax)
xor    %dh,(%edx)
xor    %edx,%cs:0x0(%ecx)
cmp    %dh,(%eax)
xor    (%esi),%ch
xor    %esp,0x64(%ecx)
add    %cl,0x44(%esp,%ecx,2)
push   %eax
add    %bh,(%edx)
and    $0x783230,%eax
and    0x69202273,%ah
jae    808cd62 <_IO_stdin_used+0xa4de>
imul   $0x64696c61,0x76(%esi),%ebp
and    %ch,0x61(%esp,%ebp,2)
fs
fs
jb     808cd7f <_IO_stdin_used+0xa4fb>
or     (%eax),%al
add    %ebx,(%ebx)
add    (%ebx),%edi
mov    $0xa,%al
add    %al,(%eax)
push   %ebp
add    %eax,(%eax)
add    %bh,0xaccfffb(%edi,%eiz,8)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
out    %al,(%dx)
sti
jmp    *%esp
or     $0x0,%al
add    %al,(%edi,%ebp,8)
sti
jmp    *-0xa4b0000(%ecx,%edx,1)
sti
pushl  0x12(%eax)
add    %al,(%eax)
dec    %ebp
idiv   %bl
call   *(%edx,%eiz,1)
add    %al,(%eax)
inc    %ecx
clc
sti
(bad)
call   e808cdbf <_end+0xdfff423b>
sti
sti
(bad)
in     (%dx),%al
xor    %eax,(%eax)
add    %dh,-0x43000400(%edi)
cmp    %al,(%eax)
add    %al,0x1(%edx)
cld
call   *%esp
cmp    (%eax),%al
add    %bl,(%edx,%eax,1)
cld
inc    %esp
or     (%eax),%eax
add    %bl,%ah
or     %bh,%ah
push   %eax
or     (%eax),%al
add    %bl,(%ecx,%ecx,1)
cld
incl   (%ebx,%ecx,1)
add    %al,(%eax)
pop    %esp
or     %edi,%esp
lcall  *(%eax)
or     (%eax),%eax
add    %ch,-0x4(%ecx,%ecx,1)
ljmp   *(%ebx,%ecx,1)
add    %al,(%eax)
cld
or     %edi,%esp
incl   -0x43fffff5(%eax)
or     %esp,%edi
push   %esp
or     (%eax),%eax
add    %cl,(%esp,%ecx,1)
cld
call   *(%eax)
or     $0x0,%al
add    %cl,0xc50fffc(%esp,%ecx,1)
add    %al,(%eax)
cld
or     $0xfc,%al
(bad)
jl     808ce02 <_IO_stdin_used+0xa57e>
add    %al,(%eax)
mov    $0x90fffc0f,%esp
or     $0x0,%al
add    %cl,(%edx,%edx,1)
cld
inc    %eax
or     $0x0,%al
add    %ch,-0x4(%edx,%edx,1)
decl   (%eax)
or     $0x12bc0000,%eax
cld
decl   0x0(%ebp,%ecx,1)
add    %bh,-0x4(%esi,%ebx,1)
call   *-0x33fffff3(%eax)
push   %ds
cld
dec    %eax
or     $0x350c0000,%eax
cld
(bad)
clc
or     $0x3e1c0000,%eax
cld
(bad)
cmp    %cl,(%esi)
add    %al,(%eax)
cmp    $0x3e,%al
cld
decl   0x0(%esi,%ecx,1)
add    %bl,-0x4(%esi,%edi,1)
jmp    *0xe(%eax)
add    %al,(%eax)
fmull  -0x4(%eax)
jmp    *0x492c0000(%esi,%ecx,1)
cld
inc    %esp
push   %cs
add    %al,(%eax)
pop    %esp
dec    %ecx
cld
(bad)
fmuls  (%esi)
add    %al,(%eax)
jl     808ceab <_IO_stdin_used+0xa627>
cld
push   %esp
push   %cs
add    %al,(%eax)
cmp    $0x4c,%al
cld
(bad)
js     808ce7d <_IO_stdin_used+0xa5f9>
add    %al,(%eax)
fmull  -0x4(%ebp)
pushl  -0x63fffff1(%eax)
dec    %esi
cld
(bad)
call   8408ce90 <_end+0x7bff430c>
dec    %edi
cld
call   *(%eax,%edx,1)
add    %al,(%eax)
pop    %esp
push   %edx
cld
lcall  *0x10(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %esp
cld
pushl  0x54bc0000(%eax,%edx,1)
cld
call   *%eax
adc    %al,(%eax)
add    %cl,-0x4(%ecx,%ebx,2)
jmp    *%esp
adc    %al,(%eax)
add    %ch,0x1108fffc(%ecx,%ebx,2)
add    %al,(%eax)
pushf
pop    %edi
cld
decl   0x0(%ecx,%edx,1)
add    %cl,(%esi,%esi,2)
cld
decl   0x763c0000(%ecx,%edx,1)
cld
jmp    *%esp
adc    %eax,(%eax)
add    %ch,-0x4(%ebp,%ecx,4)
ljmp   *(%eax)
adc    (%eax),%al
add    %cl,-0x4(%esi,%ecx,4)
call   *-0x62140000(%edx,%edx,1)
cld
(bad)
fcoms  (%edx)
add    %al,(%eax)
sbb    $0x9e,%al
cld
push   %esp
adc    (%eax),%al
add    %bh,-0x4(%ecx,%eiz,4)
decl   0x3c000013(%eax)
test   $0x13c8fffc,%eax
add    %al,(%eax)
in     (%dx),%al
stos   %al,%es:(%edi)
cld
(bad)
fcoml  (%ebx)
add    %al,(%eax)
lods   %ds:(%esi),%al
stos   %eax,%es:(%edi)
cld
call   *(%esp,%edx,1)
add    %al,(%eax)
mov    %gs,0x1440ff(%esp,%edi,8)
add    %bl,%ah
mov    $0xfc,%ch
incl   -0x48240000(%esp,%edx,1)
cld
jmp    *%eax
adc    $0x0,%al
add    %ch,-0x4(%eax,%edi,4)
incl   -0x47440000(,%edx,1)
cld
(bad)
cmp    $0x15,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
mov    $0x1580fffc,%ebx
add    %al,(%eax)
sbb    $0xbe,%al
cld
inc    %esp
adc    $0xc35c0000,%eax
cld
decl   (%eax)
push   %ss
add    %al,(%eax)
int3
ret
cld
ljmp   *(%esi,%edx,1)
add    %al,(%eax)
int3
(bad)
cld
call   *0x0(%esi,%edx,1)
add    %bl,%ah
(bad)
cld
lcall  *0x6c000016(%eax)
leave
cld
(bad)
fcoml  (%esi)
add    %al,(%eax)
or     $0xca,%al
cld
incl   (%edi,%edx,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
int3
cld
decl   0x6c000017(%eax)
int    $0xfc
jmp    *-0x30c40000(%edi,%edx,1)
cld
(bad)
fcoml  (%edi)
add    %al,(%eax)
fmul   %st,%st(7)
cld
call   *(%eax,%ebx,1)
add    %al,(%eax)
pushf
sar    %esp
ljmp   *(%eax)
sbb    %al,(%eax)
add    %bh,%ah
(bad)
cld
ljmp   *0x0(%eax,%ebx,1)
add    %cl,0x18b0fffc(%ebx,%ebx,8)
add    %al,(%eax)
mov    $0xf4fffce8,%esp
sbb    %al,(%eax)
add    %bl,(%edx,%ebp,8)
cld
jmp    *(%ecx,%ebx,1)
add    %al,(%eax)
cld
ljmp   $0x0,$0x195cfffc
cld
icebp
cld
jmp    *0x6c000019(%eax)
repnz cld
call   *%eax
sbb    %eax,(%eax)
add    %bl,(%esi,%esi,8)
cld
decl   (%eax)
sbb    (%eax),%al
add    %cl,-0x4(%eax,%edi,8)
lcall  *(%edx,%ebx,1)
add    %al,(%eax)
int3
add    %ebp,%edi
jmp    *0x1a(%eax)
add    %al,(%eax)
sbb    $0xa,%al
std
jmp    *0xafc0000(%edx,%ebx,1)
std
jmp    *%esp
sbb    (%eax),%al
add    %cl,-0x3(%ebp,%ecx,1)
lcall  *(%ebx,%ebx,1)
add    %al,(%eax)
sbb    $0xe,%al
std
lcall  *0x0(%ebx,%ebx,1)
add    %ch,0x1b70fffd(%esi,%ecx,1)
add    %al,(%eax)
jl     808d021 <_IO_stdin_used+0xa79d>
std
ljmp   *-0x73ffffe5(%eax)
adc    %bh,%ch
jmp    *%eax
sbb    (%eax),%eax
add    %bh,-0x3(%ecx,%edx,1)
lcall  *(%eax)
sbb    $0x0,%al
add    %bl,0x1c2cfffd(%ecx,%edx,1)
add    %al,(%eax)
mov    $0x40fffd11,%esp
sbb    $0x0,%al
add    %bl,%ah
adc    %edi,%ebp
call   *0x0(%esp,%ebx,1)
add    %ch,(%edx,%edx,1)
std
pushl  0x1c(%eax)
add    %al,(%eax)
mov    %ss,(%edx)
std
incl   0x19bc0000(%esp,%ebx,1)
std
inc    %esp
sbb    $0x0,%al
add    %bh,(%ebx,%ebx,1)
std
lcall  *0x1fac0000(,%ebx,1)
std
jmp    *0x1d(%eax)
add    %al,(%eax)
mov    %fs,0x1da4fffd
add    %al,(%eax)
lods   %ds:(%esi),%al
and    $0x1dc0fffd,%eax
add    %al,(%eax)
cld
daa
std
incl   0x0(%esi,%ebx,1)
add    %bh,0x1e70fffd(%eax,%ebp,1)
add    %al,(%eax)
dec    %esp
xor    $0xfd,%al
pushl  0x2c00001e(%eax)
ss
std
push   %eax
push   %ds
add    %al,(%eax)
mov    %es,-0x3(%eax)
pushl  (%edi,%ebx,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
inc    %eax
std
call   *0x1f(%eax)
add    %al,(%eax)
in     (%dx),%al
inc    %ecx
std
lcall  *0x422c0000(%edi,%ebx,1)
std
pushl  -0x23ffffe1(%eax)
inc    %edx
std
call   *%esp
pop    %ds
add    %al,(%eax)
or     $0x44,%al
std
call   *(%eax,%eiz,1)
add    %al,(%eax)
pushf
inc    %esp
std
incl   0x20(%eax)
add    %al,(%eax)
sub    $0x45,%al
std
(bad)
js     808d0f6 <_IO_stdin_used+0xa872>
add    %al,(%eax)
lods   %ds:(%esi),%al
dec    %edx
std
decl   0x4bec0000(%eax,%eiz,1)
std
inc    %esp
and    %al,(%eax)
add    %cl,0x2108fffd(%ebp,%ebx,2)
add    %al,(%eax)
jl     808d154 <_IO_stdin_used+0xa8d0>
std
decl   0x0(%ecx,%eiz,1)
add    %bl,-0x3(%eax,%esi,2)
decl   0x70bc0000(%ecx,%eiz,1)
std
jmp    *0x7c000021(%eax)
jb     808d108 <_IO_stdin_used+0xa884>
call   *%eax
and    %eax,(%eax)
add    %cl,(%esp,%esi,2)
std
(bad)
cmp    $0x22,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
je     808d118 <_IO_stdin_used+0xa894>
jmp    *0x761c0000(%edx,%eiz,1)
std
(bad)
call   b408d14b <_end+0xabff45c7>
ja     808d128 <_IO_stdin_used+0xa8a4>
ljmp   *(%ebx,%eiz,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
jns    808d130 <_IO_stdin_used+0xa8ac>
jmp    *0x0(%ebx,%eiz,1)
add    %cl,0x23a0fffd(%edx,%edi,2)
add    %al,(%eax)
cld
jle    808d140 <_IO_stdin_used+0xa8bc>
call   *(%eax)
and    $0x0,%al
add    %ch,-0x3(%esp,%eax,4)
ljmp   *0x24(%eax)
add    %al,(%eax)
in     (%dx),%al
test   %bh,%ch
(bad)
jl     808d17a <_IO_stdin_used+0xa8f6>
add    %al,(%eax)
cmp    $0x8a,%al
std
(bad)
mov    $0x8c000024,%esp
(bad)
std
(bad)
cld
and    $0x0,%al
add    %bh,0x2518fffd(%ebp,%ecx,4)
add    %al,(%eax)
mov    %cs,0x2554fffd(%esi)
add    %al,(%eax)
dec    %esp
xchg   %eax,%ecx
std
call   *-0x6dd40000(%ebp,%eiz,1)
std
ljmp   *0x4c000025(%eax)
xchg   %eax,%esi
std
(bad)
call   408d1b6 <_init-0x3fbe332>
xchg   %eax,%edi
std
ljmp   *(%eax)
add    %al,%es:(%eax)
or     $0x9a,%al
std
lcall  *0x26(%eax)
add    %al,(%eax)
dec    %esp
popf
std
call   *-0x73ffffda(%eax)
popf
std
jmp    *-0x60b40000(%esi,%eiz,1)
std
(bad)
fsubl  (%esi)
add    %al,(%eax)
fsubl  0x2720fffd(%ecx)
add    %al,(%eax)
cld
mov    %al,0x2744fffd
add    %al,(%eax)
sbb    $0xa4,%al
std
call   *0x5c000027(%eax)
movsb  %ds:(%esi),%es:(%edi)
std
jmp    *-0x5b340000(%edi,%eiz,1)
std
(bad)
mov    $0x2c000027,%esp
movsl  %ds:(%esi),%es:(%edi)
std
call   *%esp
daa
add    %al,(%eax)
lods   %ds:(%esi),%al
movsl  %ds:(%esi),%es:(%edi)
std
incl   (%eax,%ebp,1)
add    %al,(%eax)
int3
movsl  %ds:(%esi),%es:(%edi)
std
lcall  *(%eax)
sub    %al,(%eax)
add    %ch,%ah
movsl  %ds:(%esi),%es:(%edi)
std
ljmp   *(%eax,%ebp,1)
add    %al,(%eax)
dec    %esp
cmpsb  %es:(%edi),%ds:(%esi)
std
pushl  0x28(%eax)
add    %al,(%eax)
mov    $0x94fffda6,%esp
sub    %al,(%eax)
add    %bl,(%edi,%eiz,4)
std
(bad)
fsubrs (%eax)
add    %al,(%eax)
mov    %fs,0x28fcfffd(%edi)
add    %al,(%eax)
in     (%dx),%al
test   $0xfd,%al
call   *0x29(%eax)
add    %al,(%eax)
sbb    $0xaa,%al
std
incl   -0x54b40000(%ecx,%ebp,1)
std
(bad)
mov    $0x8c000029,%eax
stos   %eax,%es:(%edi)
std
call   *%esp
sub    %eax,(%eax)
add    %cl,%ah
stos   %eax,%es:(%edi)
std
(bad)
in     (%dx),%al
sub    %eax,(%eax)
add    %ch,0x2a1cfffd(%esp,%ebp,4)
add    %al,(%eax)
or     $0xad,%al
std
decl   0x2a(%eax)
add    %al,(%eax)
mov    %gs,0x2a6cfffd(%ebp)
add    %al,(%eax)
sub    $0xb1,%al
std
pushl  -0x13ffffd6(%eax)
mov    $0xfd,%cl
(bad)
call   3408d29b <_end+0x2bff4717>
mov    $0xfd,%dh
ljmp   *(%eax)
sub    (%eax),%eax
add    %bl,%ah
mov    $0x2b6cfffd,%ecx
add    %al,(%eax)
fdivrl 0x2bacfffd(%edx)
add    %al,(%eax)
pushf
ret    $0xfffd
lock sub (%eax),%eax
add    %ch,-0x3(%ecx,%ecx,8)
pushl  (%esp,%ebp,1)
add    %al,(%eax)
cld
iret
std
(bad)
js     808d2ca <_IO_stdin_used+0xaa46>
add    %al,(%eax)
or     $0xd4,%al
std
(bad)
mov    $0xfc00002c,%esp
aam    $0xfd
call   *(%eax)
sub    $0xd56c0000,%eax
std
decl   0x0(%ebp,%ebp,1)
add    %cl,%ah
aad    $0xfd
decl   -0x20c40000(%ebp,%ebp,1)
std
call   *%eax
sub    $0xe27c0000,%eax
std
call   *(%eax)
add    %al,%cs:(%eax)
jl     808d2b5 <_IO_stdin_used+0xaa31>
std
ljmp   *0x2e(%eax)
add    %al,(%eax)
fsub   %st,%st(3)
std
ljmp   *0x7c00002e(%eax)
in     $0xfd,%eax
call   *(%edi,%ebp,1)
add    %al,(%eax)
mov    %fs,%esi
std
incl   0x0(%edi,%ebp,1)
add    %ch,%ah
jmp    37a5d2f3 <_end+0x2f9c476f>
add    %al,(%eax)
pop    %esp
jmp    808d2f8 <_IO_stdin_used+0xaa74>
push   %esp
das
add    %al,(%eax)
cld
out    %al,(%dx)
std
(bad)
cmp    %dh,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
cmc
std
(bad)
jl     808d33e <_IO_stdin_used+0xaaba>
add    %al,(%eax)
lods   %ds:(%esi),%al
or     %dh,%bh
inc    %eax
xor    %al,(%eax)
add    %bh,%ah
sbb    %bh,%dh
incl   (%ecx,%esi,1)
add    %al,(%eax)
pushf
sbb    %edi,%esi
ljmp   *0x0(%ecx,%esi,1)
add    %ch,(%edx,%ebx,1)
(bad)
ljmp   *0x1b3c0000(%ecx,%esi,1)
(bad)
lcall  *(%eax)
xor    (%eax),%al
add    %bh,0x3240fffe(%esp,%ebx,1)
add    %al,(%eax)
pop    %esp
and    %bh,%dh
lcall  *0x6c000032(%eax)
and    %dh,%bh
push   %eax
xor    (%eax),%al
add    %ch,-0x2(%esp)
pushl  (%ebx,%esi,1)
add    %al,(%eax)
mov    $0x60fffe24,%esp
xor    (%eax),%eax
add    %ch,0x33a4fffe(%edx,%ebp,1)
add    %al,(%eax)
dec    %esp
sub    %esi,%edi
(bad)
fdivl  (%ebx)
add    %al,(%eax)
mov    $0x20fffe35,%esp
xor    $0x0,%al
add    %bl,0x3464fffe(%ecx,%eax,2)
add    %al,(%eax)
mov    %es,-0x2(%edx)
lcall  *0x4afc0000(%esp,%esi,1)
(bad)
jmp    *%eax
xor    $0x0,%al
add    %bl,(%esi,%ecx,2)
(bad)
(bad)
cmp    %dh,0x4edc0000
(bad)
pushl  0x0(%ebp,%esi,1)
add    %cl,-0x2(%ecx,%edx,2)
ljmp   *0x527c0000(%ebp,%esi,1)
(bad)
incl   (%eax)
add    %al,%ss:(%eax)
in     (%dx),%al
push   %edi
(bad)
incl   0x36(%eax)
add    %al,(%eax)
sbb    $0x59,%al
(bad)
incl   0xc000036(%eax)
pop    %esi
(bad)
inc    %esp
add    %al,%ss:(%eax)
sub    $0x6a,%al
(bad)
decl   (%eax)
aaa
add    %al,(%eax)
jl     808d43f <_IO_stdin_used+0xabbb>
(bad)
incl   0x37(%eax)
add    %al,(%eax)
or     $0x6e,%al
(bad)
ljmp   *0x0(%edi,%esi,1)
add    %cl,0x3798fffe(%esi,%ebp,2)
add    %al,(%eax)
lods   %ds:(%esi),%al
je     808d3e9 <_IO_stdin_used+0xab65>
(bad)
fdivl  (%edi)
add    %al,(%eax)
sub    $0x75,%al
(bad)
push   %esp
aaa
add    %al,(%eax)
mov    $0x4cfffe76,%esp
cmp    %al,(%eax)
add    %bh,(%edi,%esi,2)
(bad)
jmp    *0x0(%eax,%edi,1)
add    %cl,%ah
js     808d409 <_IO_stdin_used+0xab85>
(bad)
clc
cmp    %al,(%eax)
add    %cl,0x3924fffe(%esp,%edi,2)
add    %al,(%eax)
fdivrl -0x2(%ebp)
lcall  *0x0(%ecx,%edi,1)
add    %cl,(%ecx,%eax,4)
(bad)
pushl  0x39(%eax)
add    %al,(%eax)
pushf
cmp    $0x39a8ff,%esi
add    %ch,0x39e0fffe(%edx,%eax,4)
add    %al,(%eax)
cld
mov    %edi,%esi
jmp    *(%eax)
cmp    (%eax),%al
add    %cl,(%esi,%edx,4)
(bad)
lcall  *0x3a(%eax)
add    %al,(%eax)
pop    %esp
cwtl
(bad)
call   *-0x63ffffc6(%eax)
lahf
(bad)
(bad)
in     (%dx),%al
cmp    (%eax),%al
add    %cl,0x3b24fffe(,%eiz,4)
add    %al,(%eax)
in     (%dx),%al
mov    $0xfe,%cl
ljmp   *0x3b(%eax)
add    %al,(%eax)
cmp    $0xb2,%al
(bad)
incl   -0x4d140000(%ebx,%edi,1)
(bad)
lcall  *0x2c00003b(%eax)
mov    $0x3bd8fffe,%ecx
add    %al,(%eax)
sbb    $0xc0,%al
(bad)
lcall  *(%esp,%edi,1)
add    %al,(%eax)
int3
sar    $0xff,%dh
push   %eax
cmp    $0x0,%al
add    %ch,0x3c80fffe(%ecx,%eax,8)
add    %al,(%eax)
sub    $0xc4,%al
(bad)
inc    %eax
cmp    $0x0,%al
add    %ch,-0x2(%edi,%eax,8)
decl   -0x36440000(,%edi,1)
(bad)
incl   0x0(%ebp,%edi,1)
add    %bh,0x3d80fffe(%edx,%ecx,8)
add    %al,(%eax)
sub    $0xcf,%al
(bad)
inc    %esp
cmp    $0xdb8c0000,%eax
(bad)
decl   (%eax)
add    %al,%ds:(%eax)
mov    %ds,%edi
(bad)
decl   0x0(%esi,%edi,1)
add    %bl,(%esi,%ebp,8)
(bad)
call   *-0x63ffffc2(%eax)
repz (bad)
call   *%esp
add    %al,%ds:(%eax)
mov    %es,(%ecx)
(bad)
lcall  *(%eax)
aas
add    %al,(%eax)
pushf
add    %edi,%edi
lcall  *0x0(%edi,%edi,1)
add    %bl,(%esi,%eax,1)
(bad)
dec    %esp
aas
add    %al,(%eax)
int3
push   %es
(bad)
decl   (%eax)
inc    %eax
add    %al,(%eax)
cld
push   %es
(bad)
ljmp   *(%eax)
inc    %eax
add    %al,(%eax)
cmp    $0x7,%al
(bad)
(bad)
cmp    $0x40,%al
add    %al,(%eax)
mov    %es,(%edi)
(bad)
call   *0x40(%eax)
add    %al,(%eax)
dec    %esp
or     %bh,%bh
decl   0xd000040(%eax)
or     %edi,%edi
(bad)
mov    $0x1c000040,%eax
or     %edi,%edi
dec    %esp
inc    %eax
add    %al,(%eax)
dec    %esp
or     %edi,%edi
(bad)
clc
inc    %eax
add    %al,(%eax)
mov    $0x44ffff0b,%esp
inc    %ecx
add    %al,(%eax)
in     (%dx),%al
or     %edi,%edi
jmp    *0x0(%ecx,%eax,2)
add    %cl,0x4198ffff(%esp,%ecx,1)
add    %al,(%eax)
int3
or     $0xff,%al
(bad)
mov    $0xc000041,%eax
or     $0x41d8ffff,%eax
add    %al,(%eax)
dec    %esp
push   %cs
(bad)
call   *(%eax)
inc    %edx
add    %al,(%eax)
sub    $0xf,%al
(bad)
pushl  (%edx,%eax,2)
add    %al,(%eax)
in     (%dx),%al
adc    %bh,%bh
(bad)
js     808d5b8 <_IO_stdin_used+0xad34>
add    %al,(%eax)
cmp    $0x13,%al
(bad)
lcall  *0x17dc0000(%edx,%eax,2)
(bad)
jmp    *%eax
inc    %edx
add    %al,(%eax)
fcompl (%edx)
(bad)
jmp    *(%ebx,%eax,2)
add    %al,(%eax)
mov    $0x68ffff1c,%esp
inc    %ebx
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sbb    $0x43a8ffff,%eax
add    %al,(%eax)
lods   %ds:(%esi),%al
sbb    $0x43c8ffff,%eax
add    %al,(%eax)
cld
sbb    $0x43ecffff,%eax
add    %al,(%eax)
dec    %esp
push   %ds
(bad)
call   *(%eax)
inc    %esp
add    %al,(%eax)
mov    %ds,(%esi)
(bad)
pushl  (%eax)
inc    %esp
add    %al,(%eax)
fcompl (%esi)
(bad)
call   *0x0(%esp,%eax,2)
add    %ch,(%edi,%ebx,1)
(bad)
incl   -0x13ffffbc(%eax)
pop    %ds
(bad)
inc    %eax
inc    %esp
add    %al,(%eax)
cmp    $0x20,%al
(bad)
(bad)
in     (%dx),%al
inc    %esp
add    %al,(%eax)
pop    %esp
and    %bh,%bh
decl   (%eax)
inc    %ebp
add    %al,(%eax)
int3
and    %bh,%bh
incl   0x0(%ebp,%eax,2)
add    %bl,(%ecx,%eiz,1)
(bad)
pushl  0x45(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
and    %edi,%edi
call   *0x225c0000(%ebp,%eax,2)
(bad)
dec    %esp
inc    %ebp
add    %al,(%eax)
pop    %esp
and    %edi,%edi
decl   (%eax)
inc    %esi
add    %al,(%eax)
pushf
and    %edi,%edi
ljmp   *(%eax)
inc    %esi
add    %al,(%eax)
jl     808d63e <_IO_stdin_used+0xadba>
(bad)
incl   0xc000046(%eax)
and    $0x46b0ffff,%eax
add    %al,(%eax)
pushf
and    $0x46f8ffff,%eax
add    %al,(%eax)
int3
and    $0x470cffff,%eax
add    %al,(%eax)
dec    %esp
es
(bad)
call   *0x0(%edi,%eax,2)
add    %bh,0x47acffff(%eax,%ebp,1)
add    %al,(%eax)
dec    %esp
sub    %edi,%edi
incl   (%eax)
dec    %eax
add    %al,(%eax)
int3
sub    %edi,%edi
decl   0x48(%eax)
add    %al,(%eax)
cmp    $0x2a,%al
(bad)
incl   -0x53ffffb8(%eax)
sub    %bh,%bh
(bad)
mov    $0x3c000048,%eax
sub    %edi,%edi
incl   (%eax)
dec    %ecx
add    %al,(%eax)
fsubrl (%ebx)
(bad)
decl   0x49(%eax)
add    %al,(%eax)
jl     808d6a6 <_IO_stdin_used+0xae22>
(bad)
call   *0xc000049(%eax)
das
(bad)
call   *%eax
dec    %ecx
add    %al,(%eax)
dec    %esp
xor    %edi,%edi
ljmp   *(%eax)
dec    %edx
add    %al,(%eax)
int3
xor    %edi,%edi
call   *0x0(%edx,%ecx,2)
add    %cl,-0x1(%edx,%esi,1)
incl   -0x43ffffb6(%eax)
xor    %bh,%bh
ljmp   *0x330c0000(%edx,%ecx,2)
(bad)
dec    %eax
dec    %edx
add    %al,(%eax)
pop    %esp
xor    %edi,%edi
jmp    *%esp
dec    %edx
add    %al,(%eax)
lods   %ds:(%esi),%al
xor    %edi,%edi
incl   (%eax)
dec    %ebx
add    %al,(%eax)
cld
xor    %edi,%edi
lcall  *(%ebx,%ecx,2)
add    %al,(%eax)
dec    %esp
xor    $0xff,%al
(bad)
cmp    %cl,0x0(%ebx)
add    %bl,0x4b78ffff(%esp,%esi,1)
add    %al,(%eax)
sub    $0x35,%al
(bad)
(bad)
mov    $0xfc00004b,%eax
ss
(bad)
push   %eax
dec    %ebx
add    %al,(%eax)
sbb    $0x37,%al
(bad)
call   *(%eax)
dec    %esp
add    %al,(%eax)
pop    %esp
cmp    %bh,%bh
call   *0x4c(%eax)
add    %al,(%eax)
sbb    $0x3b,%al
(bad)
call   *-0x33ffffb4(%eax)
cmp    %edi,%edi
call   *%eax
dec    %esp
add    %al,(%eax)
pushf
cmp    $0xff,%al
call   *(%eax)
dec    %ebp
add    %al,(%eax)
sub    $0x3d,%al
(bad)
(bad)
cmp    $0x4d,%al
add    %al,(%eax)
cmp    $0x3f,%al
(bad)
ljmp   *-0x3ffffb3(%eax)
aas
(bad)
(bad)
call   7408d776 <_end+0x6bff4bf2>
inc    %eax
(bad)
jmp    *(%eax)
dec    %esi
add    %al,(%eax)
pop    %esp
inc    %edx
(bad)
jmp    *0x0(%esi,%ecx,2)
add    %bh,0x4e78ffff(%edx,%eax,2)
add    %al,(%eax)
int3
inc    %esp
(bad)
(bad)
mov    $0x6c00004e,%esp
inc    %ebp
(bad)
(bad)
clc
dec    %esi
add    %al,(%eax)
jl     808d798 <_IO_stdin_used+0xaf14>
(bad)
jmp    *0x0(%edi,%ecx,2)
add    %cl,(%edi,%eax,2)
(bad)
jmp    *-0x3ffffb1(%eax)
inc    %edi
(bad)
decl   (%eax,%edx,2)
add    %al,(%eax)
pushf
dec    %eax
(bad)
decl   0x50(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
dec    %ecx
(bad)
pushl  0x4a5c0000(%eax,%edx,2)
(bad)
push   %eax
push   %eax
add    %al,(%eax)
mov    %cs,-0x1(%ebx)
lcall  *0x0(%ecx,%edx,2)
add    %cl,-0x1(%esp,%ecx,2)
lcall  *0x5c000051(%eax)
dec    %ebp
(bad)
incl   (%edx,%edx,2)
add    %al,(%eax)
pushf
dec    %esi
(bad)
pushl  0x52(%eax)
add    %al,(%eax)
dec    %esp
dec    %edi
(bad)
ljmp   *-0x33ffffae(%eax)
dec    %edi
(bad)
(bad)
fcoms  0x0(%edx)
add    %bl,-0x1(%eax,%edx,2)
decl   (%eax)
push   %ebx
add    %al,(%eax)
in     (%dx),%al
push   %eax
(bad)
jmp    *0x53(%eax)
add    %al,(%eax)
pop    %esp
push   %edx
(bad)
dec    %esp
push   %ebx
add    %al,(%eax)
fcoml  -0x1(%ebx)
call   *0x54(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
push   %ebp
(bad)
(bad)
mov    $0xbc000054,%esp
push   %esi
(bad)
(bad)
in     (%dx),%al
push   %esp
add    %al,(%eax)
in     (%dx),%al
push   %edi
(bad)
incl   0x55(%eax)
add    %al,(%eax)
sbb    $0x59,%al
(bad)
ljmp   *0x5a7c0000(%ebp,%edx,2)
(bad)
lcall  *(%eax)
push   %esi
add    %al,(%eax)
in     (%dx),%al
pop    %edx
(bad)
call   *0x0(%esi,%edx,2)
add    %bh,%ah
pop    %edx
(bad)
ljmp   *0x56(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     808d81f <_IO_stdin_used+0xaf9b>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
call   b908d409 <_end+0xb0ff4885>
push   %es
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     808d83f <_IO_stdin_used+0xafbb>
js     808d83d <_IO_stdin_used+0xafb9>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%ah
std
sti
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %dl,(%eax)
(bad)
sti
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
cmp    $0xfe,%al
sti
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
adc    %dl,0x0(%eax)
add    %al,(%eax)
jl     808d886 <_IO_stdin_used+0xb002>
add    %al,(%eax)
cmp    %bh,%dh
sti
incl   0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xa,0x7a300e48
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0x14(%esi,%ecx,1),%esp
inc    %esi
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,%al
add    %al,(%eax)
add    %dh,-0x5(%esi,%edi,8)
pushl  0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3e00e46
sbb    (%ecx),%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
adc    $0x1,%al
add    %al,(%eax)
push   %eax
idiv   %bl
inc    %ebx
add    $0x41000000,%eax
push   %cs
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30aeb02,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x46,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
inc    %esp
add    %eax,(%eax)
add    %al,%al
(bad)
sti
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xa(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %eax,(%eax)
add    %dh,%ah
(bad)
sti
(bad)
jg     808d972 <_IO_stdin_used+0xb0ee>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5d,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
mov    0x34000001,%al
add    %bh,%ah
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xa(%edx),%bl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
int3
add    %eax,(%eax)
add    %bh,0x0(%eax)
cld
pushl  0x2(%edi)
inc    %ebx
push   %cs
and    %ch,(%eax,%eax,1)
add    %al,(%eax)
loopne 808d9eb <_IO_stdin_used+0xb167>
add    %al,(%eax)
and    $0x3,%al
cld
decl   0x2(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x48,(%ebx)
push   %cs
rcrb   $0xc7,(%ebx,%eax,1)
add    %ecx,(%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
adc    %al,(%edx)
add    %al,(%eax)
inc    %esp
add    $0x5bfffc,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%ebx),%dl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
xor    $0x2,%al
add    %al,(%eax)
and    $0xfb,%cl
lcall  *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    -0x3cbcf7f2(%eax),%dl
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x2(%eax)
add    %al,(%eax)
pop    %esp
add    $0x4dfffc,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x200e4504(%ebx)
dec    %ebp
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0x10(%esi,%ecx,1),%ebx
inc    %esp
ret
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x40,%al
add    %al,(%eax)
add    %bl,0x5680000(%edx,%eax,1)
cld
(bad)
mov    $0xb,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x4900e49
rolb   %cl,0x41140e0a
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
loopne 808daec <_IO_stdin_used+0xb268>
add    %al,(%eax)
in     $0x10,%al
cld
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%ebx)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%eax
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
sbb    %al,(%ebx)
add    %al,(%eax)
cld
adc    %bh,%ah
pushl  (%esi)
push   %ss
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x41c30a76,%eax
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x43,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
dec    %eax
add    (%eax),%eax
add    %cl,(%edi,%eiz,1)
cld
decl   (%eax)
or     %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x3d00e46
dec    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%edx
add    %al,(%eax)
add    %cl,-0x23fffffd(%eax)
das
cld
call   *0x0
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,0x2fe80000(%ebx,%eax,1)
cld
call   *0x0
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
mov    $0x3,%al
add    %al,(%eax)
hlt
das
cld
(bad)
jle    808dbcc <_IO_stdin_used+0xb348>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1e00e48
je     808dbe4 <_IO_stdin_used+0xb360>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %dh,(%eax)
cmp    %ah,%bh
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
jnp    808dc21 <_IO_stdin_used+0xb39d>
or     %al,-0x3d(%ebx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,(%esp,%eax,1)
add    %al,(%eax)
pusha
cmp    %ah,%bh
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    $0x0,%al
add    %bh,-0x4(%edx,%edi,1)
lcall  *(%eax,%eax,1)
add    %al,(%eax)
add    %cl,0xe(%eax)
or     %al,0xec74e02(%edi)
add    $0x0,%al
add    %al,0x44000000(%eax)
add    $0x0,%al
add    %al,-0x450003c6(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%ebx)
insl   (%dx),%es:(%edi)
add    %ecx,(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4a,%al
or     0xa(%ebp),%ebp
push   %cs
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     0xe(%edx,%ecx,1),%esp
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x4c,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x4c,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x4,$0x0
mov    $0x9bfffc3c,%esp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1b9fc(%ebx)
add    (%edx),%al
dec    %eax
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
add    %al,0x3e240000
cld
pushl  0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    0x43100e0a(%ebp),%dl
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
add    $0x3eac0000,%eax
cld
(bad)
fadds  (%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
pop    %esp
or     (%esi),%cl
add    $0x41,%al
or     0xe(%edx,%ecx,1),%edx
add    $0x44,%al
or     0xa(%ebp),%ebp
push   %cs
add    $0x43,%al
or     0xe(%ebp),%ebp
add    $0x0,%al
add    %al,0x0(%eax)
add    %al,(%eax)
fs
add    $0x3f600000,%eax
cld
call   *%ebx
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x9900e48
cmp    $0x140e0a02,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %ch,-0x3fffffb(%eax)
inc    %ecx
cld
call   *(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jle    808dddb <_IO_stdin_used+0xb557>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
mov    %eax,0x41100e0a
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
push   %edi
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
sbb    %al,(%eax)
add    %al,(%eax)
add    $0x6,%al
add    %al,(%eax)
mov    $0x43,%al
cld
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xa(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
push   %es
add    %al,(%eax)
in     $0x43,%al
cld
decl   0x4(%edx)
inc    %ebx
push   %cs
and    %ah,(%eax)
add    %al,(%eax)
add    %dh,(%esi,%eax,1)
add    %al,(%eax)
pusha
dec    %eax
cld
lcall  *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%ebx),%dl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x6(%eax)
add    %al,(%eax)
pushf
dec    %eax
cld
jmp    *%ebp
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1e00e48
cmp    (%edx,%ecx,1),%al
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
pushf
push   %es
add    %al,(%eax)
dec    %eax
dec    %esi
cld
ljmp   *0x16(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x4e00e46
pop    %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
faddl  (%esi)
add    %al,(%eax)
js     808df4e <_IO_stdin_used+0xb6ca>
cld
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edx)
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
hlt
push   %es
add    %al,(%eax)
pop    %eax
(bad)
pushl  0x6(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x9c00e48
cltd
push   %es
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax)
add    %al,(%eax)
xor    $0x7,%al
add    %al,(%eax)
push   %eax
fs
cld
pushl  (%eax)
pop    %ss
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x13b00e48
cli
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bh,0x7(%eax)
add    %al,(%eax)
cmp    $0x7b,%al
cld
call   *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x700e4304(%ebx)
add    0xa(%eax),%ah
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
pop    %ebx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%al
pop    %es
add    %al,(%eax)
cmp    $0x98fffbe3,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
add    -0x3cbcf7f2(%eax),%dl
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%ah
pop    %es
add    %al,(%eax)
mov    $0x7b,%al
cld
lcall  *0xf(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1d800e48
fildl  (%esi)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
sub    %cl,(%eax)
add    %al,(%eax)
or     $0x8b,%al
cld
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
dec    %eax
push   %cs
or     %al,0xec76102(%edi)
add    $0x0,%al
add    %dl,0x44000000(%eax)
or     %al,(%eax)
add    %ah,(%eax)
mov    %esp,%edi
lcall  *0x3(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%ebx)
add    (%ecx),%al
or     (%esi),%cl
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edx),%edx
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4a,%al
or     0xa(%ebp),%ebp
push   %cs
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
push   $0x460c0e0a
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
scas   %es:(%edi),%al
or     (%esi),%cl
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x4c,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x4c,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
fmuls  (%eax)
add    %al,(%eax)
in     (%dx),%al
(bad)
cld
pushl  0x7(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x4900e46
dec    %eax
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edx
add    %al,(%eax)
add    %bl,(%eax)
or     %eax,(%eax)
add    %ch,-0x4(%ebp,%edx,4)
jmp    *0x1(%esi)
inc    %ebx
push   %cs
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
sub    $0x9,%al
add    %al,(%eax)
or     %dl,0xbffffc(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x5ff1b9fc(%ebx)
add    %eax,(%edx)
fwait
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
or     %eax,%fs:(%eax)
add    %dl,-0x27000369(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,(%edx)
pop    %esp
or     (%esi),%cl
add    $0x41,%al
or     0xe(%edx,%ecx,1),%edx
add    $0x44,%al
or     0xa(%ebp),%ebp
push   %cs
add    $0x43,%al
or     0xe(%ebp),%ebp
add    $0x0,%al
add    %al,0x0(%eax)
add    %al,(%eax)
nop
or     %eax,(%eax)
add    %al,-0x4(%eax,%ebx,4)
decl   0x9(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x9900e48
mov    %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %dl,%ah
or     %eax,(%eax)
add    %dl,-0x5f(%eax)
cld
push   %edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jle    808e207 <_IO_stdin_used+0xb983>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
mov    (%edx),%ecx
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
or     0x4310,%cl
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    %cl,(%edx)
add    %al,(%eax)
hlt
mov    %al,0x8cfffc
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x4c,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
push   %esp
or     (%eax),%al
add    %ah,-0x5d(%eax)
cld
incl   0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ah,0xa(%ebp)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%ebx),%eax
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %cl,-0x5c880000(%edx,%ecx,1)
cld
(bad)
call   808e2a3 <_IO_stdin_used+0xba1f>
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x42800e46
ret    $0xa01
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,%al
or     (%eax),%al
add    %ah,(%esi,%eiz,4)
cld
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x42800e46
(bad)
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ebx,%ecx,1)
add    %al,(%eax)
push   %eax
test   $0xfc,%al
(bad)
cmp    $0x5,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1,0x80e00e46
add    (%edi),%eax
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,0xb(%eax)
add    %al,(%eax)
dec    %esp
lods   %ds:(%esi),%eax
cld
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    0xa(%edi),%cl
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%esp
add    %al,(%eax)
jl     808e391 <_IO_stdin_used+0xbb0d>
add    %al,(%eax)
cwtl
lods   %ds:(%esi),%eax
cld
push   %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,-0x3ff1b9fe(%ebx)
and    %al,(%edx)
(bad)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,-0x51900000(%ebx,%ecx,1)
cld
incl   (%edi)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x20e00e46
push   %ds
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,%al
or     (%eax),%eax
add    %bh,(%ecx,%esi,4)
cld
decl   0x41000000(%ecx,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x20c00e46
adc    %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
and    $0x0,%al
add    %al,(%eax)
sub    $0xc,%al
add    %al,(%eax)
mov    %dh,0x9ffffc(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x3ff1b9fe(%ebx)
and    %al,(%edx)
push   %eax
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
addb   $0x0,(%eax)
add    %dl,0x0(%esp,%ecx,1)
add    %al,(%eax)
mov    $0xfc,%bl
lcall  *0x2(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
mov    $0x410c0e0a,%edi
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
fmuls  (%eax,%eax,1)
add    %bl,0xb9fffc(,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ah,0xa(%eax)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
hlt
or     $0x0,%al
add    %al,%al
mov    $0xfc,%ch
inc    %ebx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x300e4304(%ebx)
add    0x1(%eax),%esi
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
sub    $0xd,%al
add    %al,(%eax)
pop    %eax
mov    $0xfc,%bh
call   *0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%eax),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebp,%ecx,1)
add    %al,%al
mov    $0xfc,%bh
(bad)
mov    $0x1,%ebx
inc    %ebx
push   %cs
and    %al,0x0(%eax)
add    %al,(%eax)
js     808e58f <_IO_stdin_used+0xbd0b>
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    $0x55afffc,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x13a00e48
imul   $0xa,(%ecx),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,-0x41780000(%ebp,%ecx,1)
cld
incl   0x4(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x5f00e46
loop   808e5ee <_IO_stdin_used+0xbd6a>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
push   %cs
add    %al,(%eax)
aam    $0xc2
cld
ljmp   *(%eax)
or     $0x41000000,%eax
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e48
insb   (%dx),%es:(%edi)
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
inc    %esp
push   %cs
add    %al,(%eax)
ror    $0xfc,%bh
lcall  *0x0(%ecx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
pusha
add    0x410c0e0a(%edx),%cl
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
je     808e68c <_IO_stdin_used+0xbe08>
add    %al,(%eax)
lock sar %ah
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x600e4304(%ebx)
add    0xa(%edi),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
push   %cs
add    %al,(%eax)
cwtl
sar    %esp
push   %esi
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1d00e46
sub    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
lock push %cs
add    %al,(%eax)
push   %esp
fdivr  %st(4),%st
ljmp   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0xa430204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
and    %cl,(%edi)
add    %al,(%eax)
xchg   %eax,%esp
fdivr  %st(4),%st
ljmp   *0x41000000(%ebx,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1b7fc(%ebx)
add    %eax,(%ebx)
push   %ecx
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edx
add    %al,(%eax)
add    %bl,0xf(%eax)
add    %al,(%eax)
or     $0xdc,%al
cld
ljmp   *(%edx)
add    (%eax),%al
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,0x0(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sldt   (%eax)
sub    %bl,%dh
cld
pushl  0xb(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1e00e46
inc    %edi
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x6400000f(%eax)
jmp    e57e7be <_end+0x64e5c3a>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x6d00e48
test   %eax,0x41140e0a
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
hlt
sldt   (%eax)
jo     808e7f1 <_IO_stdin_used+0xbf6d>
cld
(bad)
fiadd  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x2,0x1800e45
jnp    808e82e <_IO_stdin_used+0xbfaa>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
xor    $0x10,%al
add    %al,(%eax)
adc    %dh,%al
cld
decl   0x2(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x700e4304(%ebx)
add    0x100e0a01,%edx
inc    %ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
adc    %al,(%eax)
add    %ch,(%eax)
repnz cld
dec    %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffb5,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
adc    %al,(%eax)
add    %bh,-0x6f00030e(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
rclb   $0x0,(%eax)
add    %dh,(%ebx,%esi,8)
cld
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    0x41100e0a(%edi),%dh
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
clc
adc    %al,(%eax)
add    %cl,%ah
repz cld
incl   (%ebx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    %al,%cl
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
xor    %dl,(%ecx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
hlt
cld
(bad)
ljmp   $0xe41,$0x0
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    %ch,%al
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x11(%eax)
add    %al,(%eax)
pop    %esp
cmc
cld
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,0x0(%ecx,%edx,1)
add    %ch,-0xb(%eax)
cld
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x74000011(%eax)
cmc
cld
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ah,-0xa800000(%ecx,%edx,1)
cld
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xa(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %al,%al
adc    %eax,(%eax)
add    %dh,0x59fffc(%ebp,%esi,8)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
aam    $0x11
add    %al,(%eax)
add    %dh,%dh
cld
jmp    *(%edi)
pop    %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x3d00e46
or     %gs:(%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0x0(%eax,%eax,1),%edx
add    %dl,(%edx,%edx,1)
add    %al,(%eax)
lock cld
cld
pushl  0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x5d300e45
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
test   $0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,0x0(%edx,%edx,1)
add    %bl,(%eax)
(bad)
cld
jmp    *0x4(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x3a00e49
add    %es:(%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x44000012(%eax)
add    %ch,%bh
call   *%edx
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1ce00e48
sub    $0x2,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
hlt
adc    (%eax),%al
add    %ah,%al
pop    %es
std
lcall  *0x0
dec    %ebx
push   %cs
or     %al,0xec75102(%edi)
add    $0x0,%al
add    %al,0x10000000(%eax)
adc    (%eax),%eax
add    %ah,%ah
pop    %es
std
incl   0x2(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
into
or     (%esi),%cl
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     0xa(%edx),%edx
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4a,%al
or     0xa(%ebp),%ebp
push   %cs
or     $0x49,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     0xe(%edx,%ecx,1),%esp
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
jae    808eb86 <_IO_stdin_used+0xc302>
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x4c,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,0x9b00000(%ebx,%edx,1)
std
pushl  0x0(%esi)
inc    %ecx
push   %cs
or     %al,0x300e4502(%ebx)
add    0xa(%ecx),%bh
push   %cs
or     %al,-0x3d(%esi)
push   %cs
add    $0x43,%al
or     0x8(%esi,%ecx,1),%ebp
inc    %ecx
ret
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
rclb   $0x0,(%ebx)
add    %al,-0x3(%edx,%ecx,1)
call   *0xb(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x46,(%ebx)
push   %cs
mov    0xa410201,%al
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%ebx),%eax
repz add $0x430c0e0a,%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
add    %dl,(%eax,%eax,1)
add    %dl,0x1d2fffd(%ebp,%edx,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x23,0x3400e4a
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0x0(%eax),%eax
add    %al,(%eax)
inc    %eax
adc    $0x0,%al
add    %dh,(%edi,%edx,1)
std
lcall  *0x0(%edx,%ecx,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x3,0x10f00e48
cli
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
test   %dl,(%eax,%eax,1)
add    %dl,0x21(%eax)
std
call   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
dec    %ebx
push   %cs
or     %al,0xec74702(%edi)
add    $0x0,%al
add    %cl,0x0(%eax)
add    %al,(%eax)
mov    0x54000014,%al
and    %edi,%ebp
(bad)
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
dec    %ebx
or     (%esi),%cl
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ebp
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
in     (%dx),%al
adc    $0x0,%al
add    %cl,0x22(%eax)
std
(bad)
cmp    $0x0,%eax
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x22740000,%eax
std
jmp    *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,-0x2ff1b9fe(%edi)
or     %ch,0xa(%esi)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
and    $0x15,%al
add    %al,(%eax)
add    %ah,(%ebx)
std
ljmp   *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffaa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
fs
adc    $0x23f00000,%eax
std
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
nop
adc    $0x24540000,%eax
std
incl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ecx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,%al
adc    $0x24ac0000,%eax
std
pushl  0x0(%ebp,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
fcoml  0x2a180000
std
pushl  (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1b9fc(%ebx)
add    (%edx),%al
in     (%dx),%al
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dl,(%esi,%edx,1)
add    %al,(%eax)
and    %ch,(%ebx)
std
call   *0x11(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1d00e46
xor    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x16(%eax)
add    %al,(%eax)
jl     808eea2 <_IO_stdin_used+0xc61e>
std
(bad)
out    %al,(%dx)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9900e46
nop
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
pushf
push   %ss
add    %al,(%eax)
sub    %al,-0x3(%ecx)
call   *%ebp
or     $0x41000000,%eax
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1d00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%edx
add    %al,(%eax)
add    %bl,%ah
push   %ss
add    %al,(%eax)
enter  $0xfd4e,$0xff
pop    %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,(%eax,%eax,1)
add    %al,(%eax)
lock push %ss
add    %al,(%eax)
adc    $0x4f,%al
std
pushl  0x1(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
rolb   $0x2,(%edx)
decl   (%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
and    %dl,(%edi)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
push   %eax
std
incl   0x1(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3900e46
add    %ecx,%fs:(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
and    $0x0,%al
add    %al,(%eax)
fs
pop    %ss
add    %al,(%eax)
xor    %edx,%esp
sti
push   %esp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x0,0x64700e45
add    %al,(%eax)
mov    %ss,(%edi)
add    %al,(%eax)
enter  $0xfd51,$0xff
xchg   %eax,%ebp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x63,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%eax
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x40,%al
add    %al,(%eax)
add    %dh,%ah
pop    %ss
add    %al,(%eax)
add    %dl,-0x3(%edx)
ljmp   *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x5900e46
dec    %eax
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bh,(%eax)
sbb    %al,(%eax)
add    %ch,(%ebx,%edx,2)
std
decl   0x1(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x5a00e46
push   $0x140e0a01
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
jl     808f09e <_IO_stdin_used+0xc81a>
add    %al,(%eax)
js     808f0de <_IO_stdin_used+0xc85a>
std
pushl  0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x400e4504(%ebx)
add    0x1(%ecx),%ecx
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
mov    $0x18,%ah
add    %al,(%eax)
add    %dl,-0x3(%esi)
lcall  *(%ecx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
jae    808f0e3 <_IO_stdin_used+0xc85f>
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%edi
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %dh,%al
sbb    %al,(%eax)
add    %ah,%ah
push   %esi
std
jmp    *0x4(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x1(%edi),%edx
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
push   %esi
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
push   $0xa
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%edx
add    %ah,0x19(%eax)
add    %al,(%eax)
in     $0x5a,%al
std
jmp    *0x0(%ebp,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffe8,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
(bad)  (%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
mov    $0xfc000019,%eax
pop    %edi
std
(bad)
jle    808f1ca <_IO_stdin_used+0xc946>
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
int3
sbb    %eax,(%eax)
add    %ch,0x60(%eax)
std
decl   0x5(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x5a00e46
rorl   %cl,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
or     $0x1a,%al
add    %al,(%eax)
js     808f27f <_IO_stdin_used+0xc9fb>
std
decl   0x3(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4804(%esi)
addl   $0xffffffd3,0x3500e49
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %cl,0x0(%edx,%ebx,1)
add    %cl,0x2afffd68(%eax)
add    %al,(%eax)
add    %al,(%eax)
dec    %eax
push   %cs
or     %al,0xec76102(%edi)
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,0x1a(%eax)
add    %al,(%eax)
pushf
push   $0xc7fffd
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%ebx)
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%edi
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
sbb    (%eax),%al
add    %dh,(%eax)
imul   $0x2b3ff,%ebp,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x3900e46
pop    %ebp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%edx
add    %al,(%eax)
add    %ah,%ah
sbb    (%eax),%al
add    %dh,-0x22000295(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
clc
sbb    (%eax),%al
add    %bh,-0x3(%esp,%ebp,2)
lcall  *(%ebx)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x41,0x3400e45
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
cmp    %bl,(%ebx)
add    %al,(%eax)
pop    %esp
jo     808f344 <_IO_stdin_used+0xcac0>
jmp    *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2,0x1d00e46
int    $0xa
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
js     808f39d <_IO_stdin_used+0xcb19>
add    %al,(%eax)
int3
jno    808f384 <_IO_stdin_used+0xcb00>
decl   (%ebx)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%ebx)
pop    %esi
add    %ecx,(%edx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
test   $0x1b,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
jae    808f3b4 <_IO_stdin_used+0xcb30>
pushl  (%ecx)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x500e4304(%ebx)
add    0x41100e0a(%ebx),%ch
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,%al
sbb    (%eax),%eax
add    %dh,0x34fffd(%esi,%esi,2)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
hlt
sbb    (%eax),%eax
add    %ah,%al
jbe    808f400 <_IO_stdin_used+0xcb7c>
pushl  0x1(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x1ff1b9fc(%ebx)
add    (%edx),%eax
je     808f429 <_IO_stdin_used+0xcba5>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,(%esp,%ebx,1)
add    %al,(%eax)
push   $0x86fffd78
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x5900e48
cmp    (%ecx),%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
jo     808f496 <_IO_stdin_used+0xcc12>
add    %al,(%eax)
mov    $0x7a,%ah
std
call   *(%edi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x400e4502(%ebx)
add    0x41080e0a(%eax),%bh
ret
push   %cs
add    $0x41,%al
or     0x0(%eax),%ecx
add    %al,(%eax)
xchg   %eax,%esp
sbb    $0x0,%al
add    %dh,0x17fffd7b(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
dec    %ebx
or     (%esi),%cl
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ebp
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     0xa(%ebx),%eax
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
loopne 808f506 <_IO_stdin_used+0xcc82>
add    %al,(%eax)
test   %bh,-0x1(%ebp,%edi,8)
xor    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax,%eax,1)
add    %al,(%eax)
hlt
sbb    $0x0,%al
add    %dh,0x63fffd7c(%eax)
add    %al,(%eax)
add    %al,(%eax)
dec    %esp
push   %cs
xor    %dh,0x4(%esi,%ecx,1)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
or     $0x1d,%al
add    %al,(%eax)
or     %bh,-0x3(%ebp)
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%edi)
xor    %bh,0xe(%eax)
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
and    $0x1d,%al
add    %al,(%eax)
push   %eax
jge    808f530 <_IO_stdin_used+0xccac>
pushl  0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
or     %fs:(%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
push   %esp
sbb    $0x7da00000,%eax
std
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x1d(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
jge    808f574 <_IO_stdin_used+0xccf0>
call   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
jl     808f5a3 <_IO_stdin_used+0xcd1f>
add    %al,(%eax)
mov    $0x5efffd7d,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x200e4804(%ebx)
jo     808f5af <_IO_stdin_used+0xcd2b>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%eax
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %al,%al
sbb    $0x7dd40000,%eax
std
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xa(%edx),%bl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
in     $0x1d,%al
add    %al,(%eax)
and    %bh,-0x3(%esi)
lcall  *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x200e4804(%ebx)
jo     808f617 <_IO_stdin_used+0xcd93>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%eax
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,(%eax)
push   %ds
add    %al,(%eax)
cmp    $0x7e,%al
std
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xa(%edx),%bl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%edx
add    %al,(%eax)
dec    %esp
push   %ds
add    %al,(%eax)
mov    %bh,-0x3(%esi)
lcall  *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2e,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%eax),%edx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
mov    0x9400001e,%al
jg     808f6ac <_IO_stdin_used+0xce28>
jmp    *(%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
inc    %ebx
xchg   %al,(%esi,%eax,2)
addl   $0xffffffc3,0xa010c03
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,%ah
push   %ds
add    %al,(%eax)
nop
cmp    $0xff,%ch
and    (%ecx),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
inc    %ebx
xchg   %al,(%esi,%eax,2)
addl   $0xffffffc3,0xa010c03
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
pop    %ds
add    %al,(%eax)
mov    %es,0x3afffd(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xec37802(%ebx)
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
and    $0x1f,%al
add    %al,(%eax)
mov    $0x81,%al
std
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %dh,0x4(%esi,%ecx,1)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
cmp    $0x1f,%al
add    %al,(%eax)
fadds  0xd5fffd(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %ebx
or     (%esi),%cl
add    $0x42,%al
or     0xa(%ecx),%ebx
push   %cs
add    $0x47,%al
or     0xa(%ebx),%esi
push   %cs
add    $0x45,%al
or     0xa(%edx),%edx
push   %cs
add    $0x46,%al
or     0x4(%esi,%ecx,1),%ebx
sub    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
pop    %ds
add    %al,(%eax)
mov    %al,0x52fffd(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
push   %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%ebp
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,-0x43ffffe1(%eax)
(bad)
std
(bad)
jp     808f7aa <_IO_stdin_used+0xcf26>
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xa(%edi)
push   %cs
add    $0x46,%al
or     0xa(%edx),%edx
push   %cs
add    $0x46,%al
or     0xe(%ecx),%ebx
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %bh,-0x7ce80000(%edi,%ebx,1)
std
lcall  *0x3(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2e00e46
roll   (%edx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
je     808f794 <_IO_stdin_used+0xcf10>
std
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0x41100e0a(%ecx),%al
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cmp    %ah,(%eax)
add    %al,(%eax)
cld
xchg   %bh,%ch
(bad)
cmp    (%eax,%eax,1),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa3,0x3500e43
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0x0(%eax),%eax
add    %al,(%eax)
js     808f8a2 <_IO_stdin_used+0xd01e>
add    %al,(%eax)
cld
mov    %ch,%bh
jmp    *0x3(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2d00e46
aam    $0x1
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x68000020,%esp
mov    %ebp,%?
incl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc6,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %bh,%ah
and    %al,(%eax)
add    %ch,(%eax)
(bad)
std
pushl  0x7(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2e00e46
repnz add $0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x21(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xchg   %eax,%esi
std
dec    %esi
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3900e46
testb  $0xc3,0x41140e0a
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,-0x62d00000(%ecx,%eiz,1)
std
decl   0x6(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1d00e46
jae    808f9b8 <_IO_stdin_used+0xd134>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,%al
and    %eax,(%eax)
add    %bh,-0x3(%ebx,%eiz,4)
incl   0x4
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
out    %eax,(%dx)
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %cl,(%edx,%eiz,1)
add    %al,(%eax)
dec    %eax
cmpsl  %es:(%edi),%ds:(%esi)
std
jmp    *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x72300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ah,0x22(%eax)
add    %al,(%eax)
in     $0xa7,%al
std
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
dec    %eax
push   %cs
and    %ch,0xa(%ebp)
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%ecx
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
pushf
and    (%eax),%al
add    %bl,(%eax)
test   $0xfd,%al
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x73300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
fsubl  (%edx)
add    %al,(%eax)
cmp    %ch,0x96dfffd(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e46
dec    %ecx
add    $0x43140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
and    %ah,(%ebx)
add    %al,(%eax)
fs
mov    $0xfd,%cl
pushl  (%esi)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
push   %esp
add    %al,(%eax)
add    %ah,0x23(%eax)
add    %al,(%eax)
fs
mov    $0xfd,%ah
push   %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xa(%ecx),%dl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
pop    %ecx
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4c,%al
or     0xe(%ecx),%edx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %bh,0xc000023(%eax)
mov    $0xfd,%ch
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x76300e45
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
clc
and    (%eax),%eax
add    %ch,0x19afffd(,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff80,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
cmp    %ah,(%eax,%eax,1)
add    %dl,-0x37(%ecx)
sti
lcall  *0x3(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x41900e48
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
fs
and    $0x0,%al
add    %ah,-0x4a(%eax)
std
incl   (%ebx)
add    %eax,(%eax)
add    %al,(%eax)
dec    %edi
push   %cs
or     %al,0x200e4502(%ebx)
add    -0x3cbef7f2(%edi),%dl
push   %cs
add    $0x4c,%al
push   %cs
and    %al,0xe0a6402(%ebx)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x43,%al
or     0x0(%eax,%eax,1),%edx
add    %dl,-0x48c00000(%esp)
std
lcall  *0x0(%ebx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
push   %ds
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
dec    %ebx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%edx
add    %ch,%ah
and    $0x0,%al
add    %cl,-0x46(%eax)
std
jmp    *0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffcc,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%eax),%esi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,0x0(%ebp,%eiz,1)
add    %ah,-0x45(%eax)
std
call   *0x3(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x31c00e48
cwtl
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,-0x43ffffdb(%eax)
mov    $0x6b0fffd,%esi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x3,0x33800e48
cmp    (%edx,%ecx,1),%al
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,%ah
and    $0xc5280000,%eax
std
push   %edi
adc    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1aa00e48
mov    $0x140e0a07,%esi
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%eax)
add    %al,%es:(%eax)
in     $0xd9,%al
std
incl   0xe(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2800e46
int    $0x9
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %dl,0x0(%esi,%eiz,1)
add    %dh,%al
out    %eax,$0xfd
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x49,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edx),%edx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%esp
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %bh,-0x17d80000(%esi,%eiz,1)
std
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5e,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
cld
add    %al,%es:(%eax)
js     808fef2 <_IO_stdin_used+0xd66e>
std
decl   0x1
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa6,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
cmp    $0x27,%al
add    %al,(%eax)
in     (%dx),%al
leave
sti
call   *%edi
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x41800e48
add    %al,(%eax)
and    $0x0,%al
add    %al,(%eax)
push   $0x1c000027
jmp    987ff77 <_end+0x17e73f3>
add    %al,(%eax)
add    %cl,0xe(%edi)
or     %al,0x200e4502(%ebx)
add    (%ecx),%eax
add    %ecx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4a,%al
push   %cs
and    %al,0x540002(%ebx)
add    %al,(%eax)
nop
daa
add    %al,(%eax)
je     808ff88 <_IO_stdin_used+0xd704>
std
call   *0x3(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
or     $0x140e0a01,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %ebx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%edx
add    %ch,%al
daa
add    %al,(%eax)
mov    $0x5fffded,%esp
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
sub    %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %al,0x28(%eax)
add    %al,(%eax)
je     809003d <_IO_stdin_used+0xd7b9>
std
(bad)
clc
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x3,0x11800e4b
xchg   %eax,%esi
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
test   %ch,(%eax)
add    %al,(%eax)
xor    %dh,%cl
std
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
inc    %ebp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax)
add    %al,(%eax)
mov    $0x28,%al
add    %al,(%eax)
push   %esp
icebp
std
jmp    *%edx
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x13f00e46
ss
add    $0xa,%al
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
hlt
sub    %al,(%eax)
add    %al,(%eax)
idiv   %ebp
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,-0x4ff1b9fc(%ebx)
and    %al,(%edx)
push   %esi
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,(%ecx,%ebp,1)
add    %al,(%eax)
push   $0x70fffdf7
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1ce00e46
pusha
add    $0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x29(%eax)
add    %al,(%eax)
xchg   %eax,%esp
add    %edi,%esi
(bad)
fisttp (%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2900e46
inc    %ecx
or     %cl,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
mov    $0x29,%ah
add    %al,(%eax)
xor    %cl,0xebfffe
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,-0x3ff1b7fc(%ebx)
add    (%edx),%al
rorl   %cl,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,%ah
sub    %eax,(%eax)
add    %ch,%al
or     $0x86dfffe,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3b00e46
mov    %es,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,(%eax)
sub    (%eax),%al
add    %dl,(%esi,%edx,1)
(bad)
lcall  *(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x41,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
loopne 8090281 <_IO_stdin_used+0xd9fd>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
mov    %ch,(%edx)
add    %al,(%eax)
fcompl (%eax)
(bad)
pushl  0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa6,0x2400e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %al,%ah
sub    (%eax),%al
add    %ah,0x19(%eax)
(bad)
jmp    *0x2(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x700e4304(%ebx)
add    %ch,%dl
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,0x0(%eax)
add    %al,(%eax)
cld
sub    (%eax),%al
add    %bl,0x2dfffe1b(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x12,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
push   %eax
sub    (%eax),%eax
add    %dh,-0x2(%esp,%ebx,1)
ljmp   *0x0(%ebp,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
add    %esp,%eax
add    %ecx,(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
leave
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
nop
sub    (%eax),%eax
add    %ah,0x129fffe(%ecx,%eiz,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffea,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dl,%al
sub    (%eax),%eax
add    %dl,0x4e6fffe(%edx,%eiz,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9900e46
adc    (%edx),%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%esp,%ebp,1)
add    %al,(%eax)
inc    %eax
daa
(bad)
lcall  *(%edx)
or     $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0xae00e46
loop   8090447 <_IO_stdin_used+0xdbc3>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
pop    %eax
sub    $0x0,%al
add    %bl,(%ebx,%esi,1)
(bad)
decl   0x3(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x500e4304(%ebx)
add    0x100e0a01(%esi),%ebp
inc    %ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
nop
sub    $0x0,%al
add    %dh,(%esi,%esi,1)
(bad)
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x400e4302(%ebx)
push   %ecx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
mov    $0x9800002c,%esp
ss
(bad)
pushl  0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
imul   $0xec3410c,(%esi),%ecx
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax)
add    %al,(%eax)
call   f4090521 <_end+0xebff799d>
ss
(bad)
call   *(%ebx)
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1800e43
stos   %al,%es:(%edi)
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    $0x2d,%al
add    %al,(%eax)
enter  $0xfe3c,$0xff
jb     809053e <_IO_stdin_used+0xdcba>
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
outsb  %ds:(%esi),(%dx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %al,0x0(%ebp,%ebp,1)
add    %dh,(%eax)
cmp    $0x187fffe,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffd6,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
popa
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pushf
sub    $0x3e680000,%eax
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
outsb  %ds:(%esi),(%dx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %dh,0x3ed00000(%ebp,%ebp,1)
(bad)
incl   0x1(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffd6,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
popa
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %cl,(%esi,%ebp,1)
add    %al,(%eax)
repz (bad)
sti
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7d,0x2180e41
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %cl,0x2e(%eax)
add    %al,(%eax)
int3
aas
(bad)
(bad)
mov    $0x3,%esi
dec    %esp
push   %cs
or     %al,-0x2ff1b7fe(%ebx)
add    %eax,(%ebx)
xchg   %eax,%ebp
add    (%edx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%eax),%ecx
add    $0xc3,%al
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
je     80906ac <_IO_stdin_used+0xde28>
add    %al,(%eax)
pusha
inc    %ebx
(bad)
decl   0x1(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
ja     80906a7 <_IO_stdin_used+0xde23>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %al,%cs:(%eax)
js     80906fe <_IO_stdin_used+0xde7a>
(bad)
ljmp   *0x3
inc    %ebx
push   %cs
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
shrb   $0x0,(%esi)
add    %dl,0x8afffe(%edi,%eax,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
xor    %bh,0xa(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edi),%esi
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
clc
add    %al,%cs:(%eax)
in     (%dx),%al
inc    %edi
(bad)
incl   0x1
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
fmuls  (%esi)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %dh,(%eax)
das
add    %al,(%eax)
les    -0x2(%eax),%ecx
decl   0x7(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x8,0x3500e45
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
jo     80907a9 <_IO_stdin_used+0xdf25>
add    %al,(%eax)
aam    $0x4f
(bad)
decl   0xc
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x1ff1b9fc(%ebx)
or     $0x3,%al
popf
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
test   $0x2f,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
pop    %ebx
(bad)
decl   0x2(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x7ff1b9fc(%ebx)
or     %eax,(%ebx)
push   %ebx
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
loopne 8090819 <_IO_stdin_used+0xdf95>
add    %al,(%eax)
les    -0x2(%ebp),%ebx
pushl  (%edi)
pop    %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0xac00e46
clc
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
and    $0x30,%al
add    %al,(%eax)
data16
(bad)
sti
(bad)
flds   (%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
aad    $0xe
add    $0x34,%al
add    %al,(%eax)
add    %bh,(%eax,%esi,1)
add    %al,(%eax)
test   $0x64,%al
(bad)
ljmp   *0x5(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x7ff1b9fc(%ebx)
or     %eax,(%edx)
dec    %ebp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dh,0x0(%eax,%esi,1)
add    %ah,%al
imul   $0xcdeff,%esi,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
push   %ds
add    $0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
mov    $0x7c000030,%eax
jbe    80908c5 <_IO_stdin_used+0xe041>
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xa(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,%ah
xor    %al,(%eax)
add    %dh,-0x5c00018a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
call   54090925 <_end+0x4bff7da1>
ja     80908f5 <_IO_stdin_used+0xe071>
(bad)
cmp    (%esi),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x3f00e46
pop    %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax),%eax
add    %al,(%eax)
sub    %dh,(%ecx)
add    %al,(%eax)
dec    %esp
jge    8090935 <_IO_stdin_used+0xe0b1>
(bad)
in     (%dx),%eax
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x3,0x24e00e4b
xor    %eax,(%ebx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xor    %eax,(%eax)
add    %bh,%al
cmp    $0xffffffff,%esi
test   $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xec34110(%esi,%ecx,1),%dl
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
mov    0x74000031,%al
test   %bh,%dh
(bad)
fildl  (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
mov    $0x410c0e0a,%ebx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
(bad)
xor    %eax,(%eax)
add    %ah,0x278fffe(,%eax,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffae,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ecx
add    %al,(%eax)
adc    %dh,(%edx)
add    %al,(%eax)
fs
xchg   %edi,%esi
pushl  0x3
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x500e4304(%ebx)
add    0xa(%edx),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%ebx),%eax
dec    %ebp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
xor    (%eax),%al
add    %bl,-0x76(%eax)
(bad)
decl   0x2(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,-0x2ff1b7fc(%ebx)
or     %al,(%ebx)
dec    %edi
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dl,-0x73900000(%edx,%esi,1)
(bad)
push   %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%edi)
push   %cs
or     $0x47,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     (%edx),%eax
arpl   %cx,(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dl,%al
xor    (%eax),%al
add    %dh,0x46efffe(,%ecx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3a00e46
jl     8090b02 <_IO_stdin_used+0xe27e>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ebx,%esi,1)
add    %al,(%eax)
pusha
xchg   %eax,%ecx
(bad)
call   *0xc(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x13a00e46
mov    $0x2,%cl
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x33(%eax)
add    %al,(%eax)
jl     8090b03 <_IO_stdin_used+0xe27f>
(bad)
(bad)
incb   (%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9900e46
pop    %edi
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,-0x5ec80000(%ebx,%esi,1)
(bad)
incl   0xe(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x13a00e46
arpl   %ax,(%edx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%al
xor    (%eax),%eax
add    %al,0x576fffe(%edi,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9a00e46
push   %ds
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,(%esp,%esi,1)
add    %al,(%eax)
(bad)
mov    $0xfe,%ah
(bad)
out    %eax,(%dx)
or     $0x41000000,%eax
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0xba00e46
and    $0x4,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,0x34(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
ret    $0xfffe
adc    %al,(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9800e46
adc    %eax,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %ch,-0x3bc80000(%esp,%esi,1)
(bad)
(bad)
jg     8090cc0 <_IO_stdin_used+0xe43c>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x67,0x1d00e46
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
imul   $0xe,(%edx),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%edx),%eax
mov    $0x43140e0a,%esi
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
sbb    $0x35,%al
add    %al,(%eax)
dec    %eax
(bad)
(bad)
jmp    *0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %esp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
pop    %eax
xor    $0xc6bc0000,%eax
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
pop    %ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,0x35(%eax)
add    %al,(%eax)
int3
(bad)
(bad)
(bad)
add    %al,%ds:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,-0x39080000(%ebp,%esi,1)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
mov    0x34000035,%al
(bad)
(bad)
(bad)
mov    $0x0,%edi
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
fdivs  0xc7bc0000
(bad)
inc    %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
dec    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,%ss:(%eax)
dec    %ebp
enter  $0xfffe,$0x4
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,(%esi,%esi,1)
add    %al,(%eax)
dec    %eax
enter  $0xfffe,$0x2e
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xe(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %cl,0x36(%eax)
add    %al,(%eax)
dec    %esp
enter  $0xfffe,$0x70
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x1(%edx),%ebp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
pop    %ecx
or     (%esi),%cl
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
add    %al,%ss:(%eax)
jo     8090e6c <_IO_stdin_used+0xe5e8>
(bad)
pushl  (%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   $0xe
or     %al,-0x3d(%ecx)
push   %cs
add    $0x30,%al
add    %al,(%eax)
add    %dh,-0x35800000(%esi,%esi,1)
(bad)
lcall  *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
adc    %al,0x500e4304(%ebx)
add    -0x3cbeeff2(%edi),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
sbb    $0x0,%al
add    %al,(%eax)
call   f4090f2b <_end+0xebff83a7>
lret   $0xfffe
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
jb     8090f15 <_IO_stdin_used+0xe691>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %cl,(%eax)
aaa
add    %al,(%eax)
or     $0xcb,%al
(bad)
(bad)
cmp    (%eax),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
je     8090f35 <_IO_stdin_used+0xe6b1>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %ch,(%eax)
aaa
add    %al,(%eax)
sub    $0xcb,%al
(bad)
(bad)
add    %eax,%ds:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x4ff1b9fc(%ebx)
or     %al,(%edx)
enter  $0xe0a,$0x10
inc    %ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
pusha
aaa
add    %al,(%eax)
xor    $0xcc,%al
(bad)
(bad)
fild   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x700e4802(%ebx)
add    %ah,%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %al,-0x33100000(%edi,%esi,1)
(bad)
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1,0x81a00e46
add    0x140e0a01(%edx),%esi
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,%al
aaa
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sar    %dh
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,%ah
aaa
add    %al,(%eax)
cwtl
sar    %dh
lcall  *0x41000000(%esp,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1,0x81900e46
add    %esp,%eax
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,0x0(%eax)
add    %al,(%eax)
xor    %bh,(%eax)
add    %al,(%eax)
hlt
aam    $0xfe
push   %ecx
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x41900e46
jo     8091061 <_IO_stdin_used+0xe7dd>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x0(%eax,%edi,1)
add    %dh,-0x26000129(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x40d00e46
sbb    %al,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x4c000038,%eax
fsin
jmp    *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
clc
cmp    %al,(%eax)
add    %bh,0x40fffe(%ecx,%ebx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jp     8091125 <_IO_stdin_used+0xe8a1>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %bl,(%eax)
cmp    %eax,(%eax)
add    %bl,%ah
fsin
decl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
cmp    $0x39,%al
add    %al,(%eax)
or     %bl,%dl
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%ebx),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
pusha
cmp    %eax,(%eax)
add    %dh,(%edx,%ebx,8)
(bad)
incl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jp     809118d <_IO_stdin_used+0xe909>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %al,0x54000039(%eax)
(bad)
call   *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    0xe(%edx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
cmp    %eax,(%eax)
add    %al,0x49fffeda(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %ecx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
sarb   (%ecx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
(bad)
mov    $0x0,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x75,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
adc    %bh,(%edx)
add    %al,(%eax)
and    $0xdb,%al
(bad)
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
inc    %ebp
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %bh,(%edx,%edi,1)
add    %al,(%eax)
dec    %eax
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec65802(%esi)
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %bl,0x3a(%eax)
add    %al,(%eax)
dec    %esp
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x58,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %dl,-0x24800000(%edx,%edi,1)
(bad)
incl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xe(%edi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sarb   $0x0,(%edx)
add    %ah,0x89fffe(%ebx,%ebx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xa(%esi),%cl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
in     $0x3a,%al
add    %al,(%eax)
adc    %bl,%ah
(bad)
ljmp   *0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %bl,(%ebx,%edi,1)
add    %al,(%eax)
mov    %bl,%ah
(bad)
push   %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffe6,0x2400e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,0x3b(%eax)
add    %al,(%eax)
dec    %esp
(bad)
incl   0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jp     8091385 <_IO_stdin_used+0xeb01>
or     %al,-0x3d(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %bh,0x3b(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
(bad)
jmp    *%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%edi
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
sarb   (%ebx)
add    %al,(%eax)
hlt
(bad)
decl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    0xa(%edx),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edx),%ebp
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %al,(%eax)
cmp    $0x0,%al
add    %dl,-0x2(%esi,%ebx,8)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%edi),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
dec    %eax
cmp    $0x0,%al
add    %bl,0x2afffe(%esi,%ebx,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bl,0x0(%esp,%edi,1)
add    %bh,0x7cfffede(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ah,-0x21100000(%esp,%edi,1)
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffdd,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
or     %eax,(%ecx)
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
push   %eax
add    %al,(%eax)
add    %bh,%ah
cmp    $0x0,%al
add    %cl,(%eax)
loope  8091509 <_IO_stdin_used+0xec85>
decl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x58,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%ebx
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,0x0(%eax,%eax,1)
add    %dl,0x3d(%eax)
add    %al,(%eax)
inc    %esp
loope  809155d <_IO_stdin_used+0xecd9>
(bad)
jl     8091562 <_IO_stdin_used+0xecde>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%dl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
cwtl
cmp    $0xe17c0000,%eax
(bad)
ljmp   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
push   %edx
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %dl,%al
cmp    $0xe1b40000,%eax
(bad)
ljmp   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
push   %ecx
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%eax
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %cl,(%eax)
add    %al,%ds:(%eax)
in     (%dx),%al
loope  8091615 <_IO_stdin_used+0xed91>
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4e04(%ebx)
add    0xa(%ecx),%bl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%ecx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,0x3e(%eax)
add    %al,(%eax)
xor    $0xe2,%al
(bad)
call   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ebp),%ah
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bl,-0x73ffffc2(%eax)
loop   80916a5 <_IO_stdin_used+0xee21>
call   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%esi),%ah
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
loopne 8091728 <_IO_stdin_used+0xeea4>
add    %al,(%eax)
in     $0xe2,%al
(bad)
decl   0x2(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x45,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0x0(%eax,%eax,1),%edx
add    %ah,(%eax)
aas
add    %al,(%eax)
xor    $0xe5,%al
(bad)
(bad)
cmp    (%edx),%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x66,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%edx),%edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,0x3f(%eax)
add    %al,(%eax)
sbb    $0xe7,%al
(bad)
(bad)
jnp    809178a <_IO_stdin_used+0xef06>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%ebx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,-0x18900000(%edi,%edi,1)
(bad)
(bad)
jnp    80917b6 <_IO_stdin_used+0xef32>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %dh,0xa(%ebx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %dl,%al
aas
add    %al,(%eax)
(bad)
out    %eax,$0xfe
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
push   %eax
jb     80917fe <_IO_stdin_used+0xef7a>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %bh,%ah
aas
add    %al,(%eax)
or     %ch,%al
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
inc    %eax
add    %al,(%eax)
cmp    $0xe8,%al
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %dh,(%eax,%eax,2)
add    %al,(%eax)
jo     809182a <_IO_stdin_used+0xefa6>
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %dl,0x40(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
call   8571860 <_end+0x4d8cdc>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,2)
add    %bl,%al
call   857187c <_end+0x4d8cf8>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    %al,0x0(%eax)
add    %cl,(%ecx,%ebp,8)
(bad)
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x7c300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x40,$0x0
sbb    $0xe9,%al
(bad)
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x71,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
or     %al,0x0(%ecx)
add    %ch,-0x2(%ecx,%ebp,8)
inc    %esp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3ff1aefc(%ebx)
or     %al,(%edx)
arpl   %cx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
inc    %ecx
add    %al,(%eax)
add    $0xeb,%al
(bad)
jmp    *(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
dec    %edi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %ah,0x41(%eax)
add    %al,(%eax)
add    $0xeb,%al
(bad)
(bad)
cmp    (%ecx),%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffde,0x2600e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
mov    0x4000041,%al
in     (%dx),%al
(bad)
pushl  0x41000000(%edx,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffb1,0x3500e4e
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
loopne 8091a2b <_IO_stdin_used+0xf1a7>
add    %al,(%eax)
test   %ch,%dh
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
and    %al,0x0(%edx)
add    %dh,%ah
out    %al,(%dx)
(bad)
inc    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff81,0x2300e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
pusha
inc    %edx
add    %al,(%eax)
test   %ch,%bh
(bad)
incl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
inc    %eax
add    0xe(%eax),%dh
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
mov    %es,0x0(%edx)
add    %ch,%al
out    %eax,(%dx)
(bad)
incl   (%ecx)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x78,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebp),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edi),%esi
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
clc
inc    %edx
add    %al,(%eax)
mov    %?,%ecx
(bad)
(bad)
mov    $0x0,%ebp
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x68,0x2400e4e
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
cmp    %al,0x0(%ebx)
add    %cl,(%edx,%esi,8)
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%esi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%ebx),%ebx
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %dh,0x43(%eax)
add    %al,(%eax)
inc    %esp
repnz (bad)
(bad)
in     (%dx),%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8e00e51
xchg   %eax,%esp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
mov    $0x43,%ah
add    %al,(%eax)
lock repz (bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,%al
inc    %ebx
add    %al,(%eax)
cmp    $0xf4,%al
(bad)
incl   0x2
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x8e00e51
lods   %ds:(%esi),%al
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
or     $0x44,%al
add    %al,(%eax)
or     %dh,%dh
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %ah,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
push   $0x48000000
inc    %esp
add    %al,(%eax)
insb   (%dx),%es:(%edi)
idiv   %dh
decl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2400e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dh,-0x8f00000(%esp,%eax,2)
(bad)
decl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %ah,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
push   $0xf0000000
inc    %esp
add    %al,(%eax)
fs
idiv   %esi
(bad)
in     (%dx),%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2400e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
inc    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bl,0x0(%ebp,%eax,2)
add    %ch,%al
idiv   %esi
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %ah,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
push   $0x98000000
inc    %ebp
add    %al,(%eax)
dec    %esp
clc
(bad)
decl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2400e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,(%esi,%eax,2)
add    %al,(%eax)
lock clc
(bad)
ljmp   *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
xor    %dh,0xa(%ecx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%edi
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
inc    %eax
inc    %esi
add    %al,(%eax)
fs
stc
(bad)
ljmp   *(%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2500e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
inc    %ecx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ch,-0x5d80000(%esi,%eax,2)
(bad)
pushl  0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %ah,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edi
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
call   b4091f3b <_end+0xabff93b7>
cli
(bad)
decl   (%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2400e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
push   %esp
inc    %edi
add    %al,(%eax)
push   %eax
sti
(bad)
pushl  (%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff8b,0x2500e4e
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
inc    %ebp
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
rolb   $0x0,0x0(%edi)
and    $0xfc,%al
(bad)
ljmp   *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x4e,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
pop    %ecx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x2c,%al
add    %al,(%eax)
add    %bh,%al
inc    %edi
add    %al,(%eax)
pushf
cld
(bad)
(bad)
jg     809200a <_IO_stdin_used+0xf786>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
ja     8092021 <_IO_stdin_used+0xf79d>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
sub    %cl,0x0(%eax)
add    %ch,%ah
cld
(bad)
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
jg     8092051 <_IO_stdin_used+0xf7cd>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bl,0x48(%eax)
add    %al,(%eax)
dec    %esp
std
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x48,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%edi),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   $0xb0000000
dec    %eax
add    %al,(%eax)
test   %bh,%ch
(bad)
ljmp   *0x0(%ecx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff9d,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%esi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
addb   $0x0,(%eax)
add    %bl,(%ecx,%ecx,2)
add    %al,(%eax)
mov    %bh,%dh
(bad)
pushl  0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x58,0x2700e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%esi),%ebp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
stos   %eax,%es:(%edi)
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,0xe(%esi,%eax,8)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
mov    0x84000049,%al
(bad)
(bad)
call   *%eax
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2c,0x3200e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
or     $0x4a,%al
add    %al,(%eax)
call   b09211d <_end+0x2ff9599>
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa6d0204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax),%edx
add    %al,(%eax)
cmp    $0x4a,%al
add    %al,(%eax)
enter  $0xff01,$0xff
sub    $0x1,%eax
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffff8,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%esi),%ebx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
nop
dec    %edx
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    %bh,%bh
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
cld
dec    %edx
add    %al,(%eax)
push   $0x57ffff03
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     809232f <_IO_stdin_used+0xfaab>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8092366 <_IO_stdin_used+0xfae2>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ch,0x4b(%eax)
add    %al,(%eax)
pop    %esp
add    $0xff,%al
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %ah,0x4900000(%ebx,%ecx,2)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %bh,-0x73ffffb5(%eax)
add    $0xff,%al
call   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4e02(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,%dh
add    $0x8,%al
loopne 8093ad3 <_IO_stdin_used+0x1124f>
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
leave
lret   $0x808
add    %eax,(%eax)
add    %al,(%eax)
ror    %cl,%dl
or     %cl,(%eax)
add    (%eax),%al
add    %al,(%eax)
ror    %edx
or     %cl,(%eax)
add    (%eax),%eax
add    %al,(%eax)
fmul   %st(2),%st
or     %cl,(%eax)
add    $0x0,%al
add    %al,(%eax)
(bad)
or     %cl,(%eax)
add    $0xe4000000,%eax
lret   $0x808
push   %es
add    %al,(%eax)
add    %ch,%dl
lret   $0x808
pop    %es
add    %al,(%eax)
add    %dh,%dl
lret   $0x808
or     %al,(%eax)
add    %al,(%eax)
stc
lret   $0x808
sldt   (%eax)
add    %bh,%bh
lret   $0x808
adc    (%eax),%eax
add    %al,(%eax)
add    $0xcb,%al
or     %cl,(%eax)
pop    %ss
add    %al,(%eax)
add    %cl,(%eax)
lret
or     %cl,(%eax)
sbb    %al,(%eax)
add    %al,(%eax)
adc    %ecx,%ebx
or     %cl,(%eax)
and    %al,(%eax)
add    %al,(%eax)
sbb    %bl,%cl
or     %cl,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
es
lret
or     %cl,(%eax)
add    %eax,(%ecx)
add    %al,(%eax)
and    $0x20808cb,%eax
add    %eax,(%eax)
add    %ch,(%ebx,%ecx,8)
or     %cl,(%eax)
add    (%ecx),%eax
add    %al,(%eax)
sub    %ebx,%ecx
or     %cl,(%eax)
add    $0x1,%al
add    %al,(%eax)
xor    %bl,%cl
or     %cl,(%eax)
or     %al,(%ecx)
add    %al,(%eax)
cmp    %cl,%bl
or     %cl,(%eax)
push   %cs
add    %eax,(%eax)
add    %bh,(%esi)
lret
or     %cl,(%eax)
sgdtl  (%eax)
add    %bl,%cl
lret   $0x808
adc    %al,(%ecx)
add    %al,(%eax)
inc    %ebx
lret
or     %cl,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
xor    %ch,0x2000808(%edx)
add    %al,(%eax)
loope  8093bb2 <_IO_stdin_used+0x1132e>
or     %cl,(%eax)
add    %eax,(%edx)
add    %al,(%eax)
push   %edi
lret
or     %cl,(%eax)
add    $0x2,%al
add    %al,(%eax)
dec    %ecx
lret
or     %cl,(%eax)
add    $0x4e000002,%eax
lret
or     %cl,(%eax)
push   %es
add    (%eax),%al
add    %dl,0x8(%ebx,%ecx,8)
or     %al,(%eax)
add    (%eax),%eax
add    %al,%cl
pop    %esi
or     %cl,(%eax)
add    %eax,(%ebx)
add    %al,(%eax)
pop    %esp
lret
or     %cl,(%eax)
add    (%ebx),%al
add    %al,(%eax)
fs
lret
or     %cl,(%eax)
add    (%ebx),%eax
add    %al,(%eax)
imul   $0x3040808,%ebx,%ecx
add    %al,(%eax)
mov    %gs,0x3050808(%ecx)
add    %al,(%eax)
lock int3
or     %cl,(%eax)
push   %es
add    (%eax),%eax
add    %ch,-0x35(%esi)
or     %cl,(%eax)
pop    %es
add    (%eax),%eax
add    %dh,-0x35(%ebx)
or     %cl,(%eax)
or     %al,(%ebx)
add    %al,(%eax)
dec    %esp
pop    %edi
or     %cl,(%eax)
or     %eax,(%ebx)
add    %al,(%eax)
ja     8093c21 <_IO_stdin_used+0x1139d>
or     %cl,(%eax)
or     (%ebx),%al
add    %al,(%eax)
pop    %edx
or     %cl,%fs:(%eax)
or     (%ebx),%eax
add    %al,(%eax)
jle    8093c31 <_IO_stdin_used+0x113ad>
or     %cl,(%eax)
or     $0x3,%al
add    %al,(%eax)
test   %ecx,%ebx
or     %cl,(%eax)
or     $0x8b000003,%eax
lret
or     %cl,(%eax)
push   %cs
add    (%eax),%eax
add    %cl,0xf0808cb(%edi)
add    (%eax),%eax
add    %dl,0x100808cb(%esi)
add    (%eax),%eax
add    %bl,0x110808cb(%ebx)
add    (%eax),%eax
add    %ah,0x120808cb(%eax)
add    (%eax),%eax
add    %ah,0x130808cb(%ebp)
add    (%eax),%eax
add    %ch,0x140808cb(%edx)
add    (%eax),%eax
add    %dh,0x150808cb(%eax)
add    (%eax),%eax
add    %dh,0x160808cb(%esi)
add    (%eax),%eax
add    %bh,0x3170808(%ebx,%ecx,8)
add    %al,(%eax)
ret    $0x8cb
or     %bl,(%eax)
add    (%eax),%eax
add    %cl,%al
lret
or     %cl,(%eax)
sbb    %eax,(%ebx)
add    %al,(%eax)
into
lret
or     %cl,(%eax)
sbb    (%ebx),%al
add    %al,(%eax)
aam    $0xcb
or     %cl,(%eax)
sbb    (%ebx),%eax
add    %al,(%eax)
fcmove %st(3),%st
or     %cl,(%eax)
sbb    $0x3,%al
add    %al,(%eax)
loopne 8093cb9 <_IO_stdin_used+0x11435>
or     %cl,(%eax)
sbb    $0xe6000003,%eax
lret
or     %cl,(%eax)
push   %ds
add    (%eax),%eax
add    %ch,%ch
lret
or     %cl,(%eax)
pop    %ds
add    (%eax),%eax
add    %dh,%ah
lret
or     %cl,(%eax)
and    %al,(%ebx)
add    %al,(%eax)
sti
lret
or     %cl,(%eax)
and    %eax,(%ebx)
add    %al,(%eax)
dec    %bl
or     %cl,(%eax)
and    (%ebx),%al
add    %al,(%eax)
or     %ecx,%esp
or     %cl,(%eax)
and    (%ebx),%eax
add    %al,(%eax)
sbb    %ah,%cl
or     %cl,(%eax)
and    $0x3,%al
add    %al,(%eax)
cs
int3
or     %cl,(%eax)
xor    $0x3,%al
add    %al,(%eax)
cmp    %esp,%ecx
or     %cl,(%eax)
xor    $0x42000003,%eax
int3
or     %cl,(%eax)
add    %ss:(%eax),%eax
add    %cl,-0x34(%esi)
or     %cl,(%eax)
aaa
add    (%eax),%eax
add    %dl,-0x34(%ebx)
or     %cl,(%eax)
(bad)
incl   (%eax)
add    %ch,0x63(%ecx)
or     %cl,(%eax)
(bad)
incl   (%eax)
add    %bl,-0x34(%eax)
or     %cl,(%eax)
pusha
add    %al,(%eax)
add    %bl,-0x34(%ebp)
or     %cl,(%eax)
add    %al,(%edx)
add    %al,(%eax)
push   $0xffffffcc
or     %cl,(%eax)
add    %eax,(%edx)
add    %al,(%eax)
jb     8093d42 <_IO_stdin_used+0x114be>
or     %cl,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
fcomps 0x8(%esi)
or     %al,0xd9000008
lret   $0x808
push   %es
or     %al,(%eax)
add    %ch,-0xf7f734(%ecx)
or     %al,(%eax)
add    %ah,-0x34(%edx)
or     %cl,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
data16
int3
or     %cl,(%eax)
add    %ecx,(%edx)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
int3
or     %cl,(%eax)
add    %ah,0x0(%eax)
add    %bh,-0x34(%eax)
or     %cl,(%eax)
add    %esp,0x0(%eax)
add    %bh,0x8(%esp,%ecx,8)
or     %al,(%edx)
pusha
add    %al,(%eax)
or     $0x8,%esp
or     %al,(%ebx)
pusha
add    %al,(%eax)
mov    %ah,%cl
or     %cl,(%eax)
add    $0x60,%al
add    %al,(%eax)
xchg   %eax,%ecx
int3
or     %cl,(%eax)
add    $0x95000060,%eax
int3
or     %cl,(%eax)
push   %es
pusha
add    %al,(%eax)
lcall  $0x60,$0x70808cc
add    %bl,0x350808cc(%edi)
addb   $0x0,(%eax)
mov    %eax,0x9b0808cc
addb   $0x0,(%eax)
stc
lret   $0x808
repz addb $0x0,(%eax)
test   $0xcc,%al
or     %cl,(%eax)
aaa
addl   $0x8ccad00,(%eax)
or     %bl,%ch
xchg   %al,(%eax)
add    %al,0x64(%ebp)
or     %cl,(%eax)
arpl   %cx,-0x334f0000(%eax)
or     %cl,(%eax)
mov    %al,%fs:(%eax)
add    %bh,0x4c0808cc(%edx)
mov    %al,(%eax)
add    %al,%dl
int3
or     %cl,(%eax)
test   %cl,-0x33360000(%eax)
or     %cl,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
ror    %cl,%ah
or     %cl,(%eax)
add    (%eax),%al
add    %al,(%eax)
fmul   %st(2),%st
or     %cl,(%eax)
add    (%eax),%eax
add    %al,(%eax)
lret
mov    (%eax),%cs
or     %al,(%eax,%eax,1)
add    %al,(%eax)
add    %ecx,%ebp
or     %cl,(%eax)
add    $0xd8000000,%eax
int3
or     %cl,(%eax)
push   %es
add    %al,(%eax)
add    %cl,-0x35(%esi)
or     %cl,(%eax)
pop    %es
add    %al,(%eax)
add    %bl,%ch
int3
or     %cl,(%eax)
or     %al,(%eax)
add    %al,(%eax)
in     $0xcc,%eax
or     %cl,(%eax)
or     %eax,(%eax)
add    %al,(%eax)
in     (%dx),%al
int3
or     %cl,(%eax)
or     $0x0,%al
add    %al,(%eax)
xor    %ch,0x100808(%edx)
add    %al,(%eax)
(bad)
int3
or     %cl,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
dec    %ah
or     %cl,(%eax)
adc    $0x7000000,%eax
int    $0x8
or     %dl,(%esi)
add    %al,(%eax)
add    %cl,(%edi)
int    $0x8
or     %dl,(%edi)
add    %al,(%eax)
add    %dl,0x180808cb(%esi)
add    %al,(%eax)
add    %cl,-0x35f7f735(%edi)
mov    %al,(%eax)
add    %dl,(%edi)
int    $0x8
or     %ah,0x1c000088(%edx)
int    $0x8
or     %al,(%eax)
addl   $0x8cd2000,(%eax)
or     %ch,0x27000088(%eax)
int    $0x8
or     %al,(%eax)
addl   $0x8cd2000,(%eax)
or     %cl,%ah
mov    %al,(%eax)
add    %ch,(%edi)
int    $0x8
or     %al,(%eax)
or     %al,(%eax)
add    %bl,%dh
rorb   $0x8,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
jb     8093ef6 <_IO_stdin_used+0x11672>
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
call   151143b5 <_end+0xd07b831>
add    %al,(%eax)
add    %ah,0x8(%eax,%ebp,1)
or     %bl,(%ecx)
add    %al,(%eax)
add    %bh,%al
cmp    (%ecx),%cl
or     %bl,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
cld
cmp    (%ecx),%cl
or     %bl,(%eax,%eax,1)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
xor    %bl,0x60804(%esi)
add    %al,(%eax)
push   %eax
mov    %eax,(%eax,%ecx,1)
or     (%eax),%al
add    %al,(%eax)
rorl   %cl,(%edi)
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
or     %ecx,(%eax)
add    (%eax),%al
add    %al,(%eax)
push   %eax
add    (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,0x110804b1(%eax)
add    %al,(%eax)
add    %ah,-0x4f(%eax)
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x60(%edi)
mov    $0x4,%al
or     %bh,%bh
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x4(%edi)
scas   %es:(%edi),%al
add    $0x8,%al
call   8114943 <_end+0x7bdbf>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%esi)
mov    $0x4,%ch
or     %dh,(%esi)
mov    $0x4,%ch
or     %al,-0x4b(%esi)
add    $0x8,%al
push   %esi
mov    $0x4,%ch
or     %ah,-0x4b(%esi)
add    $0x8,%al
jbe    8093fd7 <_IO_stdin_used+0x11753>
add    $0x8,%al
xchg   %dh,-0x4a69f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0x4,%ch
or     %dh,-0x39f7fb4b(%esi)
mov    $0x4,%ch
or     %dl,%dh
mov    $0x4,%ch
or     %ah,%dh
mov    $0x4,%ch
or     %dh,%dh
mov    $0x4,%ch
or     %al,(%esi)
mov    $0x4,%dh
or     %dl,(%esi)
mov    $0x4,%dh
or     %ah,(%esi)
mov    $0x4,%dh
or     %dh,(%esi)
mov    $0x4,%dh
or     %al,-0x4a(%esi)
add    $0x8,%al
push   %esi
mov    $0x4,%dh
or     %ah,-0x4a(%esi)
add    $0x8,%al
jbe    8094018 <_IO_stdin_used+0x11794>
add    $0x8,%al
xchg   %dh,-0x4969f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0x4,%dh
or     %dh,-0x39f7fb4a(%esi)
mov    $0x4,%dh
or     %dl,%dh
mov    $0x4,%dh
or     %ah,%dh
mov    $0x4,%dh
or     %dh,%dh
mov    $0x4,%dh
or     %al,(%esi)
mov    $0x4,%bh
or     %dl,(%esi)
mov    $0x4,%bh
or     %ah,(%esi)
mov    $0x4,%bh
or     %dh,(%esi)
mov    $0x4,%bh
or     %al,-0x49(%esi)
add    $0x8,%al
push   %esi
mov    $0x4,%bh
or     %ah,-0x49(%esi)
add    $0x8,%al
jbe    8094059 <_IO_stdin_used+0x117d5>
add    $0x8,%al
xchg   %dh,-0x4869f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0x4,%bh
or     %dh,-0x39f7fb49(%esi)
mov    $0x4,%bh
or     %dl,%dh
mov    $0x4,%bh
or     %ah,%dh
mov    $0x4,%bh
or     %dh,%dh
mov    $0x4,%bh
or     %al,(%esi)
mov    $0xb8160804,%eax
add    $0x8,%al
es
mov    $0xb8360804,%eax
add    $0x8,%al
inc    %esi
mov    $0xb8560804,%eax
add    $0x8,%al
mov    $0x804,%ax
jbe    809409a <_IO_stdin_used+0x11816>
add    $0x8,%al
xchg   %bh,-0x4769f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0xb8b60804,%eax
add    $0x8,%al
(bad)
mov    $0xb8d60804,%eax
add    $0x8,%al
out    %al,$0xb8
add    $0x8,%al
idivb  -0x46f9f7fc(%eax)
add    $0x8,%al
push   %ss
mov    $0xb9260804,%ecx
add    $0x8,%al
ss
mov    $0xb9460804,%ecx
add    $0x8,%al
push   %esi
mov    $0xb9660804,%ecx
add    $0x8,%al
jbe    80940db <_IO_stdin_used+0x11857>
add    $0x8,%al
xchg   %bh,-0x4669f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0xb9b60804,%ecx
add    $0x8,%al
(bad)
mov    $0xb9d60804,%ecx
add    $0x8,%al
out    %al,$0xb9
add    $0x8,%al
idivb  -0x45f9f7fc(%ecx)
add    $0x8,%al
push   %ss
mov    $0xba260804,%edx
add    $0x8,%al
ss
mov    $0xba460804,%edx
add    $0x8,%al
push   %esi
mov    $0xba660804,%edx
add    $0x8,%al
jbe    809411c <_IO_stdin_used+0x11898>
add    $0x8,%al
xchg   %bh,-0x4569f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0xbab60804,%edx
add    $0x8,%al
(bad)
mov    $0xbad60804,%edx
add    $0x8,%al
out    %al,$0xba
add    $0x8,%al
idivb  -0x44f9f7fc(%edx)
add    $0x8,%al
push   %ss
mov    $0xbb260804,%ebx
add    $0x8,%al
ss
mov    $0xbb460804,%ebx
add    $0x8,%al
push   %esi
mov    $0xbb660804,%ebx
add    $0x8,%al
jbe    809415d <_IO_stdin_used+0x118d9>
add    $0x8,%al
xchg   %bh,-0x4469f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    $0xbbb60804,%ebx
add    $0x8,%al
(bad)
(bad)
(bad)
incl   (%eax)
or     (%eax),%al
add    %al,(%eax)
and    (%edx),%dl
ss
inc    %edi
and    $0x12,%al
xor    %eax,-0x1(%ebp)
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %edi
scas   %es:(%edi),%al
or     %cl,(%eax)
add    $0xd0000000,%eax
pop    %ds
pop    %es
or     %dh,(%eax)
sbb    $0x7,%al
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
xor    0x808(%esi),%ah
add    %al,(%eax)
inc    %eax
and    $0x807,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
mov    $0xc1,%bl
or     %cl,(%eax)
or     $0x60000000,%eax
sub    (%edi),%eax
or     %dh,0x26(%eax)
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %edx
or     %cl,%fs:(%eax)
or     $0x60000000,%eax
sub    (%edi),%eax
or     %dh,0x26(%eax)
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
xor    %ch,0x80808(%edx)
add    %al,(%eax)
loopne 80942bd <macvtap_link_util+0x19>
pop    %es
or     %al,-0x2ff7f8c9(%eax)
cmp    (%edi),%al
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %esp
scas   %es:(%edi),%al
or     %cl,(%eax)
add    (%eax),%al
add    %al,(%eax)
addb   $0x8,0x7(%edx)
add    %al,0x7(%edx)
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x20808(%edi),%ebp
add    %al,(%eax)
nop
inc    %esp
pop    %es
or     %dl,(%eax)
inc    %esp
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
pop    %edi
or     %cl,(%eax)
add    $0xb0000000,%eax
gs
pop    %es
or     %ah,0x63(%eax)
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sti
mov    $0x110808,%ecx
add    %al,(%eax)
pusha
jb     80942ee <vxlan_link_util+0x16>
or     %dh,%al
insb   (%dx),%es:(%edi)
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
jmp    b114c09 <_end+0x307c085>
add    %al,(%eax)
add    %al,(%eax)
popl   (%edi)
or     %ah,(%eax)
mov    (%edi),%es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cmpl   $0x9c800000,0xe0808(%edi)
9c
pop    %es
or     %dl,(%eax)
cwtl
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
dec    %esp
pop    %edi
or     %cl,(%eax)
push   %cs
add    %al,(%eax)
add    %ah,%al
lods   %ds:(%esi),%al
pop    %es
or     %ah,%al
test   $0x7,%al
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
rcrl   $0x8,0x8(%esi)
push   %cs
add    %al,(%eax)
add    %ah,%al
lods   %ds:(%esi),%al
pop    %es
or     %ah,%al
test   $0x7,%al
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
mov    $0xc1,%al
or     %cl,(%eax)
or     $0xf0000000,%eax
rolb   $0x8,(%edi)
jo     8094371 <ip6tnl_link_util+0x15>
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %edi
or     %cl,%fs:(%eax)
or     $0xf0000000,%eax
rolb   $0x8,(%edi)
jo     8094389 <sit_link_util+0x15>
pop    %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
loopne 8094429 <rcvbuf+0x55>
or     %ecx,(%eax)
test   %bl,0x8(%edi)
or     %al,(%eax)
add    %al,(%eax)
add    %ch,%bl
lret
or     %cl,(%eax)
sbb    %dl,0x9(%eax)
or     %cl,(%eax,%edx,2)
or     %ecx,(%eax)
add    %dl,0x9(%eax)
or     %al,(%eax)
add    %al,(%eax)
add    %dh,-0xf7f7d1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,-0x1f7f765(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0xfd0808(%edi,%ebx,2)
add    %al,(%eax)
ret    $0x86a
or     %al,(%eax)
add    %al,(%eax)
add    %bl,-0x36(%ecx)
or     %cl,(%eax)
imul   $0x8ca6008,0x8(%ebx),%esp
or     %ch,-0x36(%ecx)
or     %cl,(%eax)
jo     8095818 <rcvbuf+0x1444>
or     %cl,(%eax)
inc    %esp
jnp    809585b <rcvbuf+0x1487>
or     %al,(%eax)
add    %al,(%eax)
add    %dh,-0x36(%ebp)
or     %cl,(%eax)
(bad)
lret   $0x808
jnp    8095834 <rcvbuf+0x1460>
or     %cl,(%eax)
jg     8095838 <rcvbuf+0x1464>
or     %cl,(%eax)
test   %ecx,%edx
or     %cl,(%eax)
mov    %dl,%cl
or     %cl,(%eax)
xchg   %eax,%ebx
lret   $0x808
cwtl
lret   $0x808
pushf
lret   $0x808
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
