das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bh,%bl
jmp    8048122 <strstr@plt-0xaae>
movsb  %ds:(%esi),%es:(%edi)
ljmp   $0xcc7c,$0x36827401
inc    %ecx
pop    %ebp
cwtl
sub    $0x70,%al
.byte 0xa1
xchg   %eax,%ebx
out    %eax,(%dx)
.byte 0x3a
add    (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%eax,%eax,2)
dec    %eax
add    %ah,(%ecx,%ebp,2)
sbb    %edx,(%edx)
cmp    %al,(%eax)
add    %al,(%eax)
cmp    %eax,(%eax)
add    %al,(%eax)
aas
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x50bc1c8c,%eax
jbe    8048176 <strstr@plt-0xa5a>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <strstr@plt-0xa43>
dec    %ebx
jecxz  80481a4 <strstr@plt-0xa2c>
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %esp,%eax
notl   (%edx)
testb  $0x0,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jb     8048383 <strstr@plt-0x84d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%edi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jns    80483b3 <strstr@plt-0x81d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popa
add    (%eax),%al
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %eax,(%dx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%edx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%bh
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lahf
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ebx)
add    %eax,(%eax)
add    %al,%al
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
cmp    %eax,(%edx)
add    %al,(%eax)
pusha
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
test   %al,(%ecx)
add    %al,(%eax)
fs
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
inc    %esp
add    (%eax),%al
add    %al,0x40804f1(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%ebx)
add    %al,(%eax)
add    %ah,0x40804(%edi,%edi,4)
add    %al,(%eax)
adc    %eax,(%eax)
verw   -0x80000000(%ebx)
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
mov    $0x60000001,%edi
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edi
add    %al,(%eax)
add    %ah,0x40804f1(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048667 <strstr@plt-0x569>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048675 <strstr@plt-0x55b>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048682 <strstr@plt-0x54e>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     804868e <strstr@plt-0x542>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048695 <strstr@plt-0x53b>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     80486a7 <strstr@plt-0x529>
outsl  %ds:(%esi),(%dx)
ja     8048699 <strstr@plt-0x537>
add    %dh,0x74(%ebx)
jb     80486a9 <strstr@plt-0x527>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80486ac <strstr@plt-0x524>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     80486bc <strstr@plt-0x514>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80486c8 <strstr@plt-0x508>
gs
js     80486cb <strstr@plt-0x505>
add    %ah,0x72(%ebp)
jb     80486cb <strstr@plt-0x505>
jb     804865e <strstr@plt-0x572>
pop    %edi
pop    %edi
jae    80486d6 <strstr@plt-0x4fa>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x73746567,0x66(%eax,%eax,1),%ebp
pop    %edi
jne    80486e5 <strstr@plt-0x4eb>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ch,%fs:0x73(%ecx)
ja     80486f2 <strstr@plt-0x4de>
jb     80486ed <strstr@plt-0x4e3>
outsb  %ds:(%esi),(%dx)
je     8048687 <strstr@plt-0x549>
jb     80486ee <strstr@plt-0x4e2>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048695 <strstr@plt-0x53b>
pop    %edi
gs
js     8048702 <strstr@plt-0x4ce>
je     804869b <strstr@plt-0x535>
jo     804870f <strstr@plt-0x4c1>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048702 <strstr@plt-0x4ce>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     804871e <strstr@plt-0x4b2>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048737 <strstr@plt-0x499>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80486ca <strstr@plt-0x506>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048747 <strstr@plt-0x489>
jb     8048741 <strstr@plt-0x48f>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048741 <strstr@plt-0x48f>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048749 <strstr@plt-0x487>
je     80486e6 <strstr@plt-0x4ea>
jae    804875c <strstr@plt-0x474>
jb     804875d <strstr@plt-0x473>
je     804875e <strstr@plt-0x472>
add    %bl,0x5f(%edi)
gs
jb     8048764 <strstr@plt-0x46c>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6d656d00,0x6e(%edi),%ebp
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
data16
jo     804877c <strstr@plt-0x454>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     804877a <strstr@plt-0x456>
outsl  %ds:(%esi),(%dx)
jne    804878d <strstr@plt-0x443>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048795 <strstr@plt-0x43b>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     8048748 <strstr@plt-0x488>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     80487cb <strstr@plt-0x405>
outsb  %ds:(%esi),(%dx)
jbe    8048769 <strstr@plt-0x467>
pop    %edi
pop    %edi
data16
jb     80487d3 <strstr@plt-0x3fd>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     80487ec <strstr@plt-0x3e4>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     80487f5 <strstr@plt-0x3db>
jo     80487fc <strstr@plt-0x3d4>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048802 <strstr@plt-0x3ce>
je     8048800 <strstr@plt-0x3d0>
add    %bl,0x5f(%edi)
data16
jo     8048806 <strstr@plt-0x3ca>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 8048816 <strstr@plt-0x3ba>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     804883b <strstr@plt-0x395>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048837 <strstr@plt-0x399>
outsb  %ds:(%esi),(%dx)
add    %dh,0x6e(%ebp)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x6f(%esi)
jo     8048843 <strstr@plt-0x38d>
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
bound  %ebp,0x6e(%ecx)
fs
je     804884d <strstr@plt-0x383>
js     804885e <strstr@plt-0x372>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x63727473,0x0(%esi),%ebp
insl   (%dx),%es:(%edi)
jo     80487f8 <strstr@plt-0x3d8>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048878 <strstr@plt-0x358>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x766f5f5f,0x0(%esi),%ebp
gs
jb     8048877 <strstr@plt-0x359>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048815 <strstr@plt-0x3bb>
data16
jo     804888d <strstr@plt-0x343>
je     804888d <strstr@plt-0x343>
pop    %edi
jne    804888b <strstr@plt-0x345>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     804889f <strstr@plt-0x331>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     80488aa <strstr@plt-0x326>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    80488ae <strstr@plt-0x322>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     80488b2 <strstr@plt-0x31e>
js     80488b8 <strstr@plt-0x318>
je     8048851 <strstr@plt-0x37f>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80488ce <strstr@plt-0x302>
popa
jb     80488d1 <strstr@plt-0x2ff>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x6000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000000
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
jo     8048948 <strstr@plt-0x288>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     8048967 <strstr@plt-0x269>
imul   $0x70000,(%ecx),%ecx
jp     8048958 <strstr@plt-0x278>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    804897d <strstr@plt-0x253>
imul   $0x60000,(%ecx),%ecx
xchg   %al,(%edx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x50000,%eax
xchg   %eax,%edx
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x29c,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
cmpsb  %es:(%edi),%ds:(%esi)
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
mov    $0x2,%al
add    %al,(%eax)
add    %al,(%eax)
cld
out    %eax,(%dx)
add    $0x8,%al
push   %es
sbb    $0xf1600000,%eax
add    $0x8,%al
add    $0x64000039,%eax
icebp
add    $0x8,%al
add    $0x8000003a,%eax
icebp
add    $0x8,%al
add    $0xa000003b,%eax
icebp
add    $0x8,%al
add    $0xc000003f,%eax
icebp
add    $0x8,%al
.byte 0x5
cmp    %al,(%eax)
or     $0xf0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
lock add $0x8,%al
pop    %es
add    (%eax),%al
add    %dl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
lock add $0x8,%al
pop    %es
add    $0x0,%al
add    %bl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    $0xf0200000,%eax
add    $0x8,%al
pop    %es
push   %es
add    %al,(%eax)
and    $0xf0,%al
add    $0x8,%al
pop    %es
pop    %es
add    %al,(%eax)
sub    %dh,%al
add    $0x8,%al
pop    %es
or     %al,(%eax)
add    %ch,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     %eax,(%eax)
add    %dh,(%eax)
lock add $0x8,%al
pop    %es
or     (%eax),%al
add    %dh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     (%eax),%eax
add    %bh,(%eax)
lock add $0x8,%al
pop    %es
or     $0x0,%al
add    %bh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     $0xf0400000,%eax
add    $0x8,%al
pop    %es
push   %cs
add    %al,(%eax)
inc    %esp
lock add $0x8,%al
pop    %es
sldt   (%eax)
dec    %eax
lock add $0x8,%al
pop    %es
adc    %al,(%eax)
add    %cl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    (%eax),%al
add    %dl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    $0x0,%al
add    %bl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    $0xf0600000,%eax
add    $0x8,%al
pop    %es
push   %ss
add    %al,(%eax)
fs
lock add $0x8,%al
pop    %es
pop    %ss
add    %al,(%eax)
push   $0x70804f0
sbb    %al,(%eax)
add    %ch,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    (%eax),%al
add    %dh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    $0x0,%al
add    %bh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    $0xf0800000,%eax
add    $0x8,%al
pop    %es
push   %ds
add    %al,(%eax)
test   %dh,%al
add    $0x8,%al
pop    %es
pop    %ds
add    %al,(%eax)
mov    %dh,%al
add    $0x8,%al
pop    %es
and    %al,(%eax)
add    %cl,0x21070804(%eax,%esi,8)
add    %al,(%eax)
nop
lock add $0x8,%al
pop    %es
and    (%eax),%al
add    %dl,0x23070804(%eax,%esi,8)
add    %al,(%eax)
cwtl
lock add $0x8,%al
pop    %es
and    $0x0,%al
add    %bl,0x25070804(%eax,%esi,8)
add    %al,(%eax)
mov    0x70804f0,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
lock add $0x8,%al
pop    %es
daa
add    %al,(%eax)
test   $0xf0,%al
add    $0x8,%al
pop    %es
sub    %al,(%eax)
add    %ch,0x29070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0xf0,%al
add    $0x8,%al
pop    %es
sub    (%eax),%al
add    %dh,0x2b070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0x70804f0,%eax
sub    $0x0,%al
add    %bh,0x2d070804(%eax,%esi,8)
add    %al,(%eax)
(bad)
lock add $0x8,%al
pop    %es
add    %al,%cs:(%eax)
(bad)
lock add $0x8,%al
pop    %es
das
add    %al,(%eax)
enter  $0x4f0,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
lock add $0x8,%al
pop    %es
xor    %eax,(%eax)
add    %dl,%al
lock add $0x8,%al
pop    %es
xor    (%eax),%al
add    %dl,%ah
lock add $0x8,%al
pop    %es
xor    (%eax),%eax
add    %bl,%al
lock add $0x8,%al
pop    %es
xor    $0x0,%al
add    %bl,%ah
lock add $0x8,%al
pop    %es
xor    $0xf0e00000,%eax
add    $0x8,%al
pop    %es
add    %al,%ss:(%eax)
in     $0xf0,%al
add    $0x8,%al
pop    %es
aaa
push   %ebx
sub    $0x8,%esp
call   8049480 <calloc@plt+0x550>
add    $0x6463,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048bb2 <strstr@plt-0x1e>
call   8048d90 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804f004
jmp    *0x804f008
add    %al,(%eax)
jmp    *0x804f00c
push   $0x0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f010
push   $0x8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f014
push   $0x10
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f018
push   $0x18
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f01c
push   $0x20
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f020
push   $0x28
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f024
push   $0x30
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f028
push   $0x38
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f02c
push   $0x40
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f030
push   $0x48
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f034
push   $0x50
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f038
push   $0x58
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f03c
push   $0x60
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f040
push   $0x68
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f044
push   $0x70
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f048
push   $0x78
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f04c
push   $0x80
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f050
push   $0x88
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f054
push   $0x90
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f058
push   $0x98
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f05c
push   $0xa0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f060
push   $0xa8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f064
push   $0xb0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f068
push   $0xb8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f06c
push   $0xc0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f070
push   $0xc8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f074
push   $0xd0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f078
push   $0xd8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f07c
push   $0xe0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f080
push   $0xe8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f084
push   $0xf0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f088
push   $0xf8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f08c
push   $0x100
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f090
push   $0x108
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f094
push   $0x110
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f098
push   $0x118
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f09c
push   $0x120
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0a0
push   $0x128
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0a4
push   $0x130
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0a8
push   $0x138
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0ac
push   $0x140
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0b0
push   $0x148
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0b4
push   $0x150
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0b8
push   $0x158
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0bc
push   $0x160
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0c0
push   $0x168
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0c4
push   $0x170
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0c8
push   $0x178
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0cc
push   $0x180
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0d0
push   $0x188
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0d4
push   $0x190
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0d8
push   $0x198
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0dc
push   $0x1a0
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0e0
push   $0x1a8
jmp    8048bc0 <strstr@plt-0x10>
jmp    *0x804f0e4
push   $0x1b0
jmp    8048bc0 <strstr@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x5b0,%esp
mov    0xc(%ebp),%esi
mov    %gs:0x14,%eax
mov    %eax,0x5ac(%esp)
xor    %eax,%eax
mov    0x8(%ebp),%edi
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049a00 <calloc@plt+0xad0>
movl   $0x804c3f5,0x4(%esp)
movl   $0x6,(%esp)
call   8048e90 <setlocale@plt>
movl   $0x804c45b,0x4(%esp)
movl   $0x804c43b,(%esp)
call   8048ee0 <bindtextdomain@plt>
movl   $0x804c43b,(%esp)
call   8048cb0 <textdomain@plt>
movl   $0x8049890,(%esp)
call   804bf50 <calloc@plt+0x3020>
cmpl   $0x2,0x804f110
je     8049151 <calloc@plt+0x221>
xor    %ebx,%ebx
movl   $0x0,0x10(%esp)
movl   $0x804c5c0,0xc(%esp)
movl   $0x804c487,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8048dd0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     80491e4 <calloc@plt+0x2b4>
cmp    $0x6e,%eax
je     8049149 <calloc@plt+0x219>
jg     8049028 <calloc@plt+0xf8>
cmp    $0x61,%eax
je     8049141 <calloc@plt+0x211>
xchg   %ax,%ax
jg     804904e <calloc@plt+0x11e>
cmp    $0xffffff7d,%eax
je     8049095 <calloc@plt+0x165>
cmp    $0xffffff7e,%eax
jne    804912d <calloc@plt+0x1fd>
movl   $0x0,(%esp)
call   80495b0 <calloc@plt+0x680>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x72,%eax
je     8049139 <calloc@plt+0x209>
jg     8049065 <calloc@plt+0x135>
cmp    $0x6f,%eax
je     804907b <calloc@plt+0x14b>
cmp    $0x70,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
jne    804912d <calloc@plt+0x1fd>
or     $0x20,%ebx
jmp    8048fbd <calloc@plt+0x8d>
cmp    $0x69,%eax
je     8049085 <calloc@plt+0x155>
cmp    $0x6d,%eax
jne    804912d <calloc@plt+0x1fd>
or     $0x10,%ebx
nop
jmp    8048fbd <calloc@plt+0x8d>
cmp    $0x73,%eax
je     804908d <calloc@plt+0x15d>
cmp    $0x76,%eax
jne    804912d <calloc@plt+0x1fd>
or     $0x8,%ebx
jmp    8048fbd <calloc@plt+0x8d>
or     $0x80,%bl
xchg   %ax,%ax
jmp    8048fbd <calloc@plt+0x8d>
or     $0x40,%ebx
jmp    8048fbd <calloc@plt+0x8d>
or     $0x1,%ebx
jmp    8048fbd <calloc@plt+0x8d>
cmpl   $0x1,0x804f110
mov    $0x804c44f,%edx
mov    $0x804c449,%eax
movl   $0x0,0x14(%esp)
cmovne %edx,%eax
mov    0x804f114,%edx
mov    %eax,0x4(%esp)
mov    0x804f1c0,%eax
movl   $0x804c477,0x10(%esp)
movl   $0x804c437,0x8(%esp)
mov    %edx,0xc(%esp)
mov    %eax,(%esp)
call   804b550 <calloc@plt+0x2620>
movl   $0x0,(%esp)
call   8048da0 <exit@plt>
mov    (%esi,%eax,4),%eax
mov    %eax,(%esp)
call   804af10 <calloc@plt+0x1fe0>
movl   $0x5,0x8(%esp)
movl   $0x804c491,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048c80 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048d40 <error@plt>
movl   $0x1,(%esp)
call   80495b0 <calloc@plt+0x680>
or     $0x4,%ebx
jmp    8048fbd <calloc@plt+0x8d>
or     $0xffffffff,%ebx
jmp    8048fbd <calloc@plt+0x8d>
or     $0x2,%ebx
jmp    8048fbd <calloc@plt+0x8d>
movl   $0x0,0x10(%esp)
movl   $0x804c580,0xc(%esp)
movl   $0x804c3f5,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8048dd0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8049441 <calloc@plt+0x511>
cmp    $0xffffff7d,%eax
jne    804900d <calloc@plt+0xdd>
cmpl   $0x1,0x804f110
mov    $0x804c44f,%edx
mov    $0x804c449,%eax
movl   $0x0,0x18(%esp)
cmovne %edx,%eax
mov    0x804f114,%edx
mov    %eax,0x4(%esp)
mov    0x804f1c0,%eax
movl   $0x804c46d,0x14(%esp)
movl   $0x804c477,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x804c437,0x8(%esp)
mov    %eax,(%esp)
call   804b550 <calloc@plt+0x2620>
movl   $0x0,(%esp)
call   8048da0 <exit@plt>
mov    0x804f1a0,%eax
cmp    %eax,%edi
jne    80490e8 <calloc@plt+0x1b8>
test   %ebx,%ebx
je     8049245 <calloc@plt+0x315>
test   $0x1f,%bl
jne    804924a <calloc@plt+0x31a>
test   $0x20,%bl
lea    0x0(%esi),%esi
jne    8049389 <calloc@plt+0x459>
test   $0x40,%bl
lea    0x1ac(%esp),%esi
jne    8049370 <calloc@plt+0x440>
and    $0x80,%bl
jne    80492d7 <calloc@plt+0x3a7>
mov    0x804f1c0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804942c <calloc@plt+0x4fc>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
movl   $0x0,(%esp)
call   8048da0 <exit@plt>
mov    $0x1,%ebx
lea    0x1ac(%esp),%esi
mov    %esi,(%esp)
call   8048c90 <uname@plt>
add    $0x1,%eax
je     804929c <calloc@plt+0x36c>
test   $0x1,%bl
jne    80493fa <calloc@plt+0x4ca>
test   $0x2,%bl
jne    80493e9 <calloc@plt+0x4b9>
test   $0x4,%bl
jne    80493d8 <calloc@plt+0x4a8>
test   $0x8,%bl
jne    80493c7 <calloc@plt+0x497>
test   $0x10,%bl
je     80491fa <calloc@plt+0x2ca>
lea    0x2b0(%esp),%eax
call   8049550 <calloc@plt+0x620>
jmp    80491fa <calloc@plt+0x2ca>
movl   $0x5,0x8(%esp)
movl   $0x804c4a2,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %eax,%edi
call   8048e40 <__errno_location@plt>
mov    %edi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <error@plt>
jmp    804925e <calloc@plt+0x32e>
mov    $0x804c4e3,%eax
call   8049550 <calloc@plt+0x620>
jmp    804921f <calloc@plt+0x2ef>
movl   $0x804c6af,0x4(%esp)
lea    0x1ac(%esp),%esi
movl   $0x804c4be,(%esp)
mov    %edx,0x1c(%esp)
call   8048cd0 <fopen64@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
mov    %eax,%edi
jne    8049334 <calloc@plt+0x404>
jmp    80493bb <calloc@plt+0x48b>
movl   $0x9,0x8(%esp)
movl   $0x804c4cc,0x4(%esp)
mov    %esi,(%esp)
call   8048ef0 <strncmp@plt>
test   %eax,%eax
je     8049406 <calloc@plt+0x4d6>
mov    %edi,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <fgets_unlocked@plt>
test   %eax,%eax
jne    8049314 <calloc@plt+0x3e4>
lea    0x12a(%esp),%edx
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
call   804b900 <calloc@plt+0x29d0>
cmp    $0xffffffff,%ebx
mov    0x1c(%esp),%edx
jne    80493bb <calloc@plt+0x48b>
cmp    $0x804f108,%edx
jne    80493bb <calloc@plt+0x48b>
mov    %esi,(%esp)
call   8048c90 <uname@plt>
lea    0x2b0(%esp),%eax
call   8049550 <calloc@plt+0x620>
jmp    8049216 <calloc@plt+0x2e6>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8048c90 <uname@plt>
lea    0x12a(%esp),%eax
movl   $0x804c4b9,0x4(%esp)
mov    %eax,(%esp)
call   8048be0 <strcmp@plt>
lea    0x12a(%esp),%edx
test   %eax,%eax
je     80492e6 <calloc@plt+0x3b6>
mov    %edx,%eax
call   8049550 <calloc@plt+0x620>
jmp    8049206 <calloc@plt+0x2d6>
lea    0x26f(%esp),%eax
call   8049550 <calloc@plt+0x620>
jmp    8049282 <calloc@plt+0x352>
lea    0x22e(%esp),%eax
call   8049550 <calloc@plt+0x620>
jmp    8049279 <calloc@plt+0x349>
lea    0x1ed(%esp),%eax
call   8049550 <calloc@plt+0x620>
jmp    8049270 <calloc@plt+0x340>
mov    %esi,%eax
call   8049550 <calloc@plt+0x620>
jmp    8049267 <calloc@plt+0x337>
movl   $0x804c4d6,0x4(%esp)
mov    %esi,(%esp)
call   8048bd0 <strstr@plt>
mov    $0x804c454,%edx
test   %eax,%eax
lea    0x12a(%esp),%eax
cmove  %eax,%edx
jmp    8049353 <calloc@plt+0x423>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8048eb0 <__overflow@plt>
jmp    8049239 <calloc@plt+0x309>
mov    0x804f1a0,%eax
cmp    %eax,%edi
jne    80490e8 <calloc@plt+0x1b8>
mov    $0x10,%ebx
jmp    804924a <calloc@plt+0x31a>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804bf40
push   $0x804bed0
push   %ecx
push   %esi
push   $0x8048f40
call   8048e00 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804f163,%eax
sub    $0x804f160,%eax
cmp    $0x6,%eax
ja     80494a0 <calloc@plt+0x570>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804949f <calloc@plt+0x56f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804f160,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804f160,%eax
sub    $0x804f160,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    80494d9 <calloc@plt+0x5a9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     80494d8 <calloc@plt+0x5a8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804f160,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804f1c4
jne    804951c <calloc@plt+0x5ec>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049490 <calloc@plt+0x560>
movb   $0x1,0x804f1c4
leave
repz ret
xchg   %ax,%ax
mov    0x804ef10,%eax
test   %eax,%eax
je     8049548 <calloc@plt+0x618>
mov    $0x0,%eax
test   %eax,%eax
je     8049548 <calloc@plt+0x618>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804ef10,(%esp)
call   *%eax
leave
jmp    80494c0 <calloc@plt+0x590>
nop
jmp    80494c0 <calloc@plt+0x590>
xchg   %ax,%ax
nop
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
cmpb   $0x0,0x804f1c5
je     8049576 <calloc@plt+0x646>
mov    0x804f1c0,%edx
mov    0x14(%edx),%ecx
cmp    0x18(%edx),%ecx
jae    8049593 <calloc@plt+0x663>
lea    0x1(%ecx),%eax
mov    %eax,0x14(%edx)
movb   $0x20,(%ecx)
mov    0x804f1c0,%eax
mov    %ebx,(%esp)
movb   $0x1,0x804f1c5
mov    %eax,0x4(%esp)
call   8048dc0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
movl   $0x20,0x4(%esp)
mov    %edx,(%esp)
call   8048eb0 <__overflow@plt>
jmp    8049576 <calloc@plt+0x646>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x804f1d0,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049604 <calloc@plt+0x6d4>
movl   $0x804bfa8,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x804f164,%eax
mov    %eax,(%esp)
call   8048ed0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8048da0 <exit@plt>
movl   $0x804c3c1,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
mov    0x804f1c0,%esi
cmpl   $0x1,0x804f110
movl   $0x5,0x8(%esp)
je     804982b <calloc@plt+0x8fb>
movl   $0x804c3d8,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
mov    0x804f1c0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c268,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
mov    0x804f1c0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c298,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
mov    0x804f1d0,%eax
mov    %eax,(%esp)
call   8049960 <calloc@plt+0xa30>
movl   $0x5,0x8(%esp)
movl   $0x804c3f6,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c80 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x804c40d,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c423,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
movl   $0x804c2d0,0xc(%esp)
movl   $0x804c437,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
mov    0x804f1c0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c2f8,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8048e90 <setlocale@plt>
test   %eax,%eax
je     80497e7 <calloc@plt+0x8b7>
movl   $0x3,0x8(%esp)
movl   $0x804c445,0x4(%esp)
mov    %eax,(%esp)
call   8048ef0 <strncmp@plt>
test   %eax,%eax
je     80497e7 <calloc@plt+0x8b7>
mov    0x804f1d0,%eax
mov    %eax,(%esp)
call   8049960 <calloc@plt+0xa30>
movl   $0x5,0x8(%esp)
movl   $0x804c338,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c80 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
mov    0x804f1d0,%eax
mov    %eax,(%esp)
call   8049960 <calloc@plt+0xa30>
movl   $0x5,0x8(%esp)
movl   $0x804c380,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c80 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
jmp    80495fc <calloc@plt+0x6cc>
movl   $0x804bfd0,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
mov    0x804f1c0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804c13c,0x4(%esp)
jmp    804964f <calloc@plt+0x71f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
mov    %eax,0x804f1cc
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x804f1c8
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x804f1c0,%eax
mov    %eax,(%esp)
call   804ba90 <calloc@plt+0x2b60>
test   %eax,%eax
je     80498b9 <calloc@plt+0x989>
cmpb   $0x0,0x804f1c8
je     80498d0 <calloc@plt+0x9a0>
call   8048e40 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    80498d0 <calloc@plt+0x9a0>
mov    0x804f164,%eax
mov    %eax,(%esp)
call   804ba90 <calloc@plt+0x2b60>
test   %eax,%eax
jne    8049928 <calloc@plt+0x9f8>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x804c6a5,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %eax,%ebx
mov    0x804f1cc,%eax
test   %eax,%eax
je     8049935 <calloc@plt+0xa05>
mov    %eax,(%esp)
call   804ace0 <calloc@plt+0x1db0>
mov    %eax,%esi
call   8048e40 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x804c6b1,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <error@plt>
mov    0x804f118,%eax
mov    %eax,(%esp)
call   8048c10 <_exit@plt>
call   8048e40 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x804c6b5,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048d40 <error@plt>
jmp    8049928 <calloc@plt+0x9f8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804997b <calloc@plt+0xa4b>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     8049970 <calloc@plt+0xa40>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     80499a9 <calloc@plt+0xa79>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     80499a9 <calloc@plt+0xa79>
cmp    $0x2f,%cl
je     80499b0 <calloc@plt+0xa80>
test   %bl,%bl
je     8049988 <calloc@plt+0xa58>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    8049992 <calloc@plt+0xa62>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    8049988 <calloc@plt+0xa58>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048df0 <strlen@plt>
cmp    $0x1,%eax
jbe    80499df <calloc@plt+0xaaf>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     80499e8 <calloc@plt+0xab8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    80499d5 <calloc@plt+0xaa5>
nop
jmp    80499df <calloc@plt+0xaaf>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     8049a83 <calloc@plt+0xb53>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8048ea0 <strrchr@plt>
test   %eax,%eax
je     8049a6f <calloc@plt+0xb3f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    8049a6f <calloc@plt+0xb3f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x804c6f0,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    8049a6f <calloc@plt+0xb3f>
mov    $0x3,%ecx
mov    $0x804c6f8,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    8049a6f <calloc@plt+0xb3f>
lea    0x4(%eax),%ebx
mov    %ebx,0x804f160
mov    %ebx,0x804f1d0
mov    %ebx,0x804f180
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x804f164,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804c6b8,(%esp)
mov    %eax,0xc(%esp)
call   8048ce0 <fwrite@plt>
call   8048f00 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     8049ad1 <calloc@plt+0xba1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8048f00 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     8049b10 <calloc@plt+0xbe0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804bb10 <calloc@plt+0x2be0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    8049b78 <calloc@plt+0xc48>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    8049b60 <calloc@plt+0xc30>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x2d,0x3(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x38,0x4(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x0,0x5(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x60,(%esi)
mov    $0x804c70b,%eax
mov    $0x804c6fc,%edx
cmovne %edx,%eax
jmp    8049b08 <calloc@plt+0xbd8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x804c705,%eax
cmp    $0x7,%edi
mov    $0x804c703,%edx
cmovne %edx,%eax
jmp    8049b08 <calloc@plt+0xbd8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    8049b60 <calloc@plt+0xc30>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x31,0x2(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x38,0x3(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x30,0x4(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x33,0x5(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x30,0x6(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x0,0x7(%eax)
jne    8049b60 <calloc@plt+0xc30>
cmpb   $0x60,(%esi)
mov    $0x804c707,%eax
mov    $0x804c700,%edx
cmovne %edx,%eax
jmp    8049b08 <calloc@plt+0xbd8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048cf0 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804a4a8 <calloc@plt+0x1578>
mov    0x94(%esp),%eax
jmp    *0x804c760(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a2b0 <calloc@plt+0x1380>
test   %al,%al
je     804a2c3 <calloc@plt+0x1393>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804a298 <calloc@plt+0x1368>
cmpb   $0x0,0x58(%esp)
je     804a298 <calloc@plt+0x1368>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804a298 <calloc@plt+0x1368>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048c70 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804a330 <calloc@plt+0x1400>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804a048 <calloc@plt+0x1118>
movzbl %bl,%eax
jmp    *0x804c784(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     8049e88 <calloc@plt+0xf58>
cmpl   $0x3,0x94(%esp)
jne    8049de8 <calloc@plt+0xeb8>
testb  $0x4,0x98(%esp)
je     8049de8 <calloc@plt+0xeb8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8049de8 <calloc@plt+0xeb8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8049de8 <calloc@plt+0xeb8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8049de8 <calloc@plt+0xeb8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8049de8 <calloc@plt+0xeb8>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmp    %edi,%ebp
jae    8049dae <calloc@plt+0xe7e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049dbe <calloc@plt+0xe8e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049dce <calloc@plt+0xe9e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    8049dde <calloc@plt+0xeae>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8049df6 <calloc@plt+0xec6>
cmpb   $0x0,0x5a(%esp)
jne    8049e1b <calloc@plt+0xeeb>
mov    0x34(%esp),%edx
test   %edx,%edx
je     8049e1b <calloc@plt+0xeeb>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8049e22 <calloc@plt+0xef2>
cmpb   $0x0,0x24(%esp)
je     8049e38 <calloc@plt+0xf08>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmp    %edi,%ebp
jae    8049e35 <calloc@plt+0xf05>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    8049e46 <calloc@plt+0xf16>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    8049c88 <calloc@plt+0xd58>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a498 <calloc@plt+0x1568>
test   %al,%al
jne    8049de8 <calloc@plt+0xeb8>
test   %esi,%esi
jne    8049de8 <calloc@plt+0xeb8>
cmpl   $0x2,0x94(%esp)
jne    8049de8 <calloc@plt+0xeb8>
nop
cmpb   $0x0,0x2f(%esp)
je     8049de8 <calloc@plt+0xeb8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049bd0 <calloc@plt+0xca0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804a5c2 <calloc@plt+0x1692>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804a50b <calloc@plt+0x15db>
cmpb   $0x0,0x58(%esp)
je     8049de8 <calloc@plt+0xeb8>
mov    %eax,%ebx
jmp    8049e22 <calloc@plt+0xef2>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8049f13 <calloc@plt+0xfe3>
nop
mov    $0x66,%eax
jmp    8049f13 <calloc@plt+0xfe3>
nop
mov    $0x76,%eax
jmp    8049f13 <calloc@plt+0xfe3>
nop
mov    $0x6e,%eax
jmp    8049f05 <calloc@plt+0xfd5>
nop
mov    $0x74,%eax
jmp    8049f05 <calloc@plt+0xfd5>
nop
cmpb   $0x0,0x58(%esp)
je     804a480 <calloc@plt+0x1550>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmp    %edi,%ebp
jae    8049f72 <calloc@plt+0x1042>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8049fb8 <calloc@plt+0x1088>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8049fb8 <calloc@plt+0x1088>
cmp    %eax,%edi
ja     804a520 <calloc@plt+0x15f0>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049fae <calloc@plt+0x107e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8049df6 <calloc@plt+0xec6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8049f13 <calloc@plt+0xfe3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     8049fee <calloc@plt+0x10be>
cmpb   $0x0,0x2f(%esp)
je     8049fee <calloc@plt+0x10be>
test   %dl,%dl
jne    8049e38 <calloc@plt+0xf08>
mov    %ebx,%eax
jmp    8049f05 <calloc@plt+0xfd5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8049de8 <calloc@plt+0xeb8>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmp    %edi,%ebp
jae    804a01d <calloc@plt+0x10ed>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804a02d <calloc@plt+0x10fd>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804a03d <calloc@plt+0x110d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8049de8 <calloc@plt+0xeb8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804a340 <calloc@plt+0x1410>
call   8048f20 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8049de8 <calloc@plt+0xeb8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804a0f4 <calloc@plt+0x11c4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmp    %edi,%ebp
jae    804a0a3 <calloc@plt+0x1173>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804a0b6 <calloc@plt+0x1186>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804a0cc <calloc@plt+0x119c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    8049e3b <calloc@plt+0xf0b>
cmp    %edi,%ebp
jae    804a0e9 <calloc@plt+0x11b9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804a090 <calloc@plt+0x1160>
cmpb   $0x0,0x24(%esp)
je     804a0d5 <calloc@plt+0x11a5>
cmp    %edi,%ebp
jae    804a107 <calloc@plt+0x11d7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804a0d5 <calloc@plt+0x11a5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a5c7 <calloc@plt+0x1697>
test   %edi,%edi
je     804a4cd <calloc@plt+0x159d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c705,0x3c(%esp)
movb   $0x22,(%eax)
jmp    8049c68 <calloc@plt+0xd38>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c705,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    8049c68 <calloc@plt+0xd38>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    8049c68 <calloc@plt+0xd38>
lea    0x0(%esi,%eiz,1),%esi
je     804a1dc <calloc@plt+0x12ac>
mov    0x94(%esp),%edx
mov    $0x804c70f,%eax
call   8049ae0 <calloc@plt+0xbb0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x804c703,%eax
call   8049ae0 <calloc@plt+0xbb0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804a20a <calloc@plt+0x12da>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804a20a <calloc@plt+0x12da>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804a1ff <calloc@plt+0x12cf>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804a1f8 <calloc@plt+0x12c8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8048df0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    8049c68 <calloc@plt+0xd38>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c703,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    8049c68 <calloc@plt+0xd38>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a5e3 <calloc@plt+0x16b3>
test   %edi,%edi
je     804a4ec <calloc@plt+0x15bc>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804c703,0x3c(%esp)
movb   $0x27,(%eax)
jmp    8049c68 <calloc@plt+0xd38>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8049d20 <calloc@plt+0xdf0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8049ca8 <calloc@plt+0xd78>
test   %ebp,%ebp
jne    804a2dc <calloc@plt+0x13ac>
cmpl   $0x2,0x94(%esp)
jne    804a2dc <calloc@plt+0x13ac>
cmpb   $0x0,0x2f(%esp)
jne    8049e98 <calloc@plt+0xf68>
cmpb   $0x0,0x2f(%esp)
jne    804a312 <calloc@plt+0x13e2>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804a312 <calloc@plt+0x13e2>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804a312 <calloc@plt+0x13e2>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804a307 <calloc@plt+0x13d7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804a300 <calloc@plt+0x13d0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8049ee2 <calloc@plt+0xfb2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8049ee2 <calloc@plt+0xfb2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8049d20 <calloc@plt+0xdf0>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804a4ad <calloc@plt+0x157d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048d20 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804a52d <calloc@plt+0x15fd>
cmp    $0xffffffff,%eax
je     804a548 <calloc@plt+0x1618>
cmp    $0xfffffffe,%eax
je     804a563 <calloc@plt+0x1633>
cmpb   $0x0,0x2f(%esp)
je     804a40f <calloc@plt+0x14df>
cmpl   $0x2,0x94(%esp)
jne    804a40f <calloc@plt+0x14df>
cmp    $0x1,%eax
je     804a40f <calloc@plt+0x14df>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804a408 <calloc@plt+0x14d8>
movzbl %al,%eax
jmp    *0x804c980(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804a3f0 <calloc@plt+0x14c0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048cc0 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048c40 <mbsinit@plt>
test   %eax,%eax
je     804a381 <calloc@plt+0x1451>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804a073 <calloc@plt+0x1143>
and    0x58(%esp),%dl
jmp    804a07d <calloc@plt+0x114d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8049e98 <calloc@plt+0xf68>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8049de8 <calloc@plt+0xeb8>
add    $0x1,%esi
jmp    8049c88 <calloc@plt+0xd58>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    8049e69 <calloc@plt+0xf39>
call   8048f00 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8048df0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804a35e <calloc@plt+0x142e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c705,0x3c(%esp)
jmp    8049c68 <calloc@plt+0xd38>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c703,0x3c(%esp)
jmp    8049c68 <calloc@plt+0xd38>
cmpb   $0x0,0x2f(%esp)
je     8049f13 <calloc@plt+0xfe3>
jmp    8049e98 <calloc@plt+0xf68>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    8049f9e <calloc@plt+0x106e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a455 <calloc@plt+0x1525>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804a455 <calloc@plt+0x1525>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804a5b8 <calloc@plt+0x1688>
cmpb   $0x0,(%eax)
je     804a5b8 <calloc@plt+0x1688>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804a5a6 <calloc@plt+0x1676>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804a5b0 <calloc@plt+0x1680>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804a5a0 <calloc@plt+0x1670>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804a455 <calloc@plt+0x1525>
call   8048ca0 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c705,0x3c(%esp)
jmp    8049c68 <calloc@plt+0xd38>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804c703,0x3c(%esp)
jmp    8049c68 <calloc@plt+0xd38>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8048e40 <__errno_location@plt>
test   %edi,%edi
mov    0x804f150,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804a78c <calloc@plt+0x185c>
cmp    0x804f15c,%edi
jb     804a698 <calloc@plt+0x1768>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804a791 <calloc@plt+0x1861>
cmp    $0x804f154,%esi
lea    0x0(,%ebp,8),%eax
je     804a760 <calloc@plt+0x1830>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b6b0 <calloc@plt+0x2780>
mov    %eax,%esi
mov    %eax,0x804f150
mov    0x804f15c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8048e20 <memset@plt>
mov    %ebp,0x804f15c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049bd0 <calloc@plt+0xca0>
cmp    %eax,%ebp
ja     804a747 <calloc@plt+0x1817>
lea    0x1(%eax),%ebp
cmp    $0x804f1e0,%esi
mov    %ebp,(%edi)
je     804a702 <calloc@plt+0x17d2>
mov    %esi,(%esp)
call   8048c20 <free@plt>
mov    %ebp,(%esp)
call   804b640 <calloc@plt+0x2710>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049bd0 <calloc@plt+0xca0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804b6b0 <calloc@plt+0x2780>
mov    0x804f158,%edx
mov    %eax,%esi
mov    %eax,0x804f150
mov    0x804f154,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804a66f <calloc@plt+0x173f>
call   8048f00 <abort@plt>
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8048e40 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x804f2e0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804b850 <calloc@plt+0x2920>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x804f2e0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804a800 <calloc@plt+0x18d0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x804f2e0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x804f2e0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x804f2e0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x804f2e0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804a8b3 <calloc@plt+0x1983>
test   %ecx,%ecx
je     804a8b3 <calloc@plt+0x1983>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8048f00 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x804f2e0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048e40 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049bd0 <calloc@plt+0xca0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x804f2e0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048e40 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   8049bd0 <calloc@plt+0xca0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804b640 <calloc@plt+0x2710>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   8049bd0 <calloc@plt+0xca0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804a9e8 <calloc@plt+0x1ab8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a920 <calloc@plt+0x19f0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x804f15c,%edi
mov    0x804f150,%esi
cmp    $0x1,%edi
jbe    804aa63 <calloc@plt+0x1b33>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048c20 <free@plt>
cmp    %edi,%ebx
jne    804aa50 <calloc@plt+0x1b20>
mov    0x4(%esi),%eax
cmp    $0x804f1e0,%eax
je     804aa89 <calloc@plt+0x1b59>
mov    %eax,(%esp)
call   8048c20 <free@plt>
movl   $0x100,0x804f154
00
movl   $0x804f1e0,0x804f158
08
cmp    $0x804f154,%esi
je     804aaa3 <calloc@plt+0x1b73>
mov    %esi,(%esp)
call   8048c20 <free@plt>
movl   $0x804f154,0x804f150
08
movl   $0x1,0x804f15c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f2e0,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f2e0,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f2e0,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f2e0,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049ab0 <calloc@plt+0xb80>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a600 <calloc@plt+0x16d0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049ab0 <calloc@plt+0xb80>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a600 <calloc@plt+0x16d0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804ab40 <calloc@plt+0x1c10>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804ab70 <calloc@plt+0x1c40>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x804f2e0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x804f2e4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x804f2e8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2f0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2f4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2f8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2fc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f300,%eax
mov    %eax,0x30(%esp)
mov    0x804f304,%eax
mov    %eax,0x34(%esp)
mov    0x804f308,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x804f30c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804a600 <calloc@plt+0x16d0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804ac00 <calloc@plt+0x1cd0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804ac00 <calloc@plt+0x1cd0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804ac00 <calloc@plt+0x1cd0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x804f2e0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x804f2e4,%eax
mov    %eax,0x14(%esp)
mov    0x804f2e8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2f0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2f4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2f8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2fc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f300,%eax
mov    %eax,0x30(%esp)
mov    0x804f304,%eax
mov    %eax,0x34(%esp)
mov    0x804f308,%eax
mov    %eax,0x38(%esp)
mov    0x804f30c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804a880 <calloc@plt+0x1950>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a600 <calloc@plt+0x16d0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ad40 <calloc@plt+0x1e10>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804ad40 <calloc@plt+0x1e10>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804ad40 <calloc@plt+0x1e10>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f120,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f120,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f120,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f120,0x4(%esp)
jmp    804a600 <calloc@plt+0x16d0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804b3e8 <calloc@plt+0x24b8>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x804ca64,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804ca77,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x804cd00,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048ed0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804cad4,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804b410 <calloc@plt+0x24e0>
jmp    *0x804ccd8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc38,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048c80 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8048ed0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc68,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048c80 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8048ed0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8048f00 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ca7b,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048ed0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804ca8b,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048ed0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804caa2,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048ed0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cba0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048c80 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
jmp    804b08f <calloc@plt+0x215f>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cbc0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048c80 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
jmp    804b08f <calloc@plt+0x215f>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cbe4,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c80 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
jmp    804b08f <calloc@plt+0x215f>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc0c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c80 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
jmp    804b08f <calloc@plt+0x215f>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x804ca70,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048ed0 <__fprintf_chk@plt>
jmp    804af81 <calloc@plt+0x2051>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804cc9c,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048c80 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804b11a <calloc@plt+0x21ea>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804b4ba <calloc@plt+0x258a>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804b4b0 <calloc@plt+0x2580>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804af30 <calloc@plt+0x2000>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804b512 <calloc@plt+0x25e2>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804b500 <calloc@plt+0x25d0>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804af30 <calloc@plt+0x2000>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804b4f0 <calloc@plt+0x25c0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x804cabe,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
movl   $0x804c40d,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c423,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
movl   $0x804c2d0,0xc(%esp)
movl   $0x804c437,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048e60 <__printf_chk@plt>
mov    0x804f1c0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c2f8,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048dc0 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048d70 <malloc@plt>
test   %eax,%eax
je     804b659 <calloc@plt+0x2729>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804b654 <calloc@plt+0x2724>
lea    0x0(%esi),%esi
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804b699 <calloc@plt+0x2769>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b640 <calloc@plt+0x2710>
call   804b8b0 <calloc@plt+0x2980>
xchg   %ax,%ax
jmp    804b640 <calloc@plt+0x2710>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804b6d8 <calloc@plt+0x27a8>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048d60 <realloc@plt>
test   %eax,%eax
je     804b6eb <calloc@plt+0x27bb>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804b6c0 <calloc@plt+0x2790>
mov    %eax,(%esp)
call   8048c20 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804b6d0 <calloc@plt+0x27a0>
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804b733 <calloc@plt+0x2803>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804b6b0 <calloc@plt+0x2780>
call   804b8b0 <calloc@plt+0x2980>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804b780 <calloc@plt+0x2850>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804b798 <calloc@plt+0x2868>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804b6b0 <calloc@plt+0x2780>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804b769 <calloc@plt+0x2839>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804b769 <calloc@plt+0x2839>
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804b7d8 <calloc@plt+0x28a8>
cmp    $0xaaaaaaa9,%eax
ja     804b7e4 <calloc@plt+0x28b4>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b6b0 <calloc@plt+0x2780>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804b7c0 <calloc@plt+0x2890>
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804b640 <calloc@plt+0x2710>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e20 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048f30 <calloc@plt>
test   %eax,%eax
je     804b83f <calloc@plt+0x290f>
add    $0x1c,%esp
ret
nop
call   804b8b0 <calloc@plt+0x2980>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804b640 <calloc@plt+0x2710>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048c30 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048df0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804b850 <calloc@plt+0x2920>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x804cd2f,0x4(%esp)
movl   $0x0,(%esp)
call   8048c80 <dcgettext@plt>
mov    0x804f118,%edx
movl   $0x804c6b5,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048d40 <error@plt>
call   8048f00 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048e50 <fileno@plt>
test   %eax,%eax
js     804b988 <calloc@plt+0x2a58>
mov    %ebx,(%esp)
call   8048d80 <__freading@plt>
test   %eax,%eax
jne    804b958 <calloc@plt+0x2a28>
mov    %ebx,(%esp)
call   804b9a0 <calloc@plt+0x2a70>
test   %eax,%eax
je     804b988 <calloc@plt+0x2a58>
call   8048e40 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048c50 <fclose@plt>
test   %edi,%edi
je     804b94a <calloc@plt+0x2a1a>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8048e50 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8048ec0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    804b922 <calloc@plt+0x29f2>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048c50 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b9b8 <calloc@plt+0x2a88>
mov    %ebx,(%esp)
call   8048d80 <__freading@plt>
test   %eax,%eax
jne    804b9c8 <calloc@plt+0x2a98>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048c00 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804b9b8 <calloc@plt+0x2a88>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804ba00 <calloc@plt+0x2ad0>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048c00 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804ba40 <calloc@plt+0x2b10>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048c60 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804ba1f <calloc@plt+0x2aef>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804ba1f <calloc@plt+0x2aef>
mov    %ebx,(%esp)
call   8048e50 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8048ec0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804ba87 <calloc@plt+0x2b57>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804ba7f <calloc@plt+0x2b4f>
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048d10 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   804b900 <calloc@plt+0x29d0>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804bad0 <calloc@plt+0x2ba0>
test   %dl,%dl
je     804bac7 <calloc@plt+0x2b97>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804baf0 <calloc@plt+0x2bc0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804bac7 <calloc@plt+0x2b97>
call   8048e40 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8048e40 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8048e80 <nl_langinfo@plt>
mov    0x804f310,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x804c3f5,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804bbdc <calloc@plt+0x2cac>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804bba7 <calloc@plt+0x2c77>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804bb80 <calloc@plt+0x2c50>
nop
mov    %ebp,(%esp)
call   8048df0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8048df0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804bbd8 <calloc@plt+0x2ca8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048be0 <strcmp@plt>
test   %eax,%eax
je     804bb9b <calloc@plt+0x2c6b>
cmp    $0x2a,%bl
jne    804bb60 <calloc@plt+0x2c30>
cmpb   $0x0,0x1(%ebp)
jne    804bb60 <calloc@plt+0x2c30>
mov    %ebp,(%esp)
call   8048df0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x804cd49,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804be9d <calloc@plt+0x2f6d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804bba7 <calloc@plt+0x2c77>
movl   $0x804cd4f,(%esp)
call   8048d50 <getenv@plt>
test   %eax,%eax
je     804bbf5 <calloc@plt+0x2cc5>
cmpb   $0x0,(%eax)
jne    804be03 <calloc@plt+0x2ed3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x804cd40,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804bdf4 <calloc@plt+0x2ec4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8048d70 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804be93 <calloc@plt+0x2f63>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048c30 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804bc5c <calloc@plt+0x2d2c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048bf0 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804bdd8 <calloc@plt+0x2ea8>
movl   $0x804c6af,0x4(%esp)
mov    %eax,(%esp)
call   8048db0 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804bdd0 <calloc@plt+0x2ea0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bdb6 <calloc@plt+0x2e86>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804bcc0 <calloc@plt+0x2d90>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804bcc0 <calloc@plt+0x2d90>
cmp    $0x23,%eax
je     804be2d <calloc@plt+0x2efd>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048e30 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804cd5f,0x4(%esp)
mov    %esi,(%esp)
call   8048de0 <fscanf@plt>
cmp    $0x1,%eax
jle    804be50 <calloc@plt+0x2f20>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8048df0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8048df0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804be6e <calloc@plt+0x2f3e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8048d70 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804bea2 <calloc@plt+0x2f72>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048d00 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048d00 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804bccc <calloc@plt+0x2d9c>
mov    %esi,(%esp)
call   8048e70 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804be50 <calloc@plt+0x2f20>
jmp    804bcd5 <calloc@plt+0x2da5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048f10 <close@plt>
mov    $0x804c3f5,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048c20 <free@plt>
mov    %ebp,0x804f310
jmp    804bb4f <calloc@plt+0x2c1f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804bc1b <calloc@plt+0x2ceb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8048df0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804bdf4 <calloc@plt+0x2ec4>
lea    -0x1(%eax),%eax
jmp    804bc04 <calloc@plt+0x2cd4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804be47 <calloc@plt+0x2f17>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804bebc <calloc@plt+0x2f8c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804be28 <calloc@plt+0x2ef8>
cmp    $0xffffffff,%eax
jne    804bcc0 <calloc@plt+0x2d90>
mov    %esi,(%esp)
call   804b900 <calloc@plt+0x29d0>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804bdd8 <calloc@plt+0x2ea8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804bddd <calloc@plt+0x2ead>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048d60 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804bd6c <calloc@plt+0x2e3c>
mov    $0x804c3f5,%ebp
jmp    804bde9 <calloc@plt+0x2eb9>
call   8048ca0 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x804c3f5,%ebp
call   8048c20 <free@plt>
mov    %esi,(%esp)
call   804b900 <calloc@plt+0x29d0>
jmp    804bddd <calloc@plt+0x2ead>
mov    %esi,(%esp)
call   8048e70 <__uflow@plt>
jmp    804be42 <calloc@plt+0x2f12>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049480 <calloc@plt+0x550>
add    $0x3125,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048b94 <strstr@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804bf29 <calloc@plt+0x2ff9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804bf08 <calloc@plt+0x2fd8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804bf40 <calloc@plt+0x3010>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049480 <calloc@plt+0x550>
add    $0x30aa,%ebx
sub    $0x18,%esp
lea    0x104(%ebx),%eax
test   %eax,%eax
je     804bf88 <calloc@plt+0x3058>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048d30 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    804bf6b <calloc@plt+0x303b>
push   %ebx
sub    $0x8,%esp
call   8049480 <calloc@plt+0x550>
add    $0x306b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     804c024 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     804bfdc <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804c025 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804c034 <_IO_stdin_used+0x90>
popa
je     804c033 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x72(%eax)
imul   $0x72656320,0x74(%esi),%ebp
je     804c03c <_IO_stdin_used+0x98>
imul   $0x74737973,0x20(%esi),%ebp
gs
insl   (%dx),%es:(%edi)
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804c058 <_IO_stdin_used+0xb4>
popa
je     804c057 <_IO_stdin_used+0xb3>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,%cs:(%eax)
push   %edi
imul   $0x4f206f6e,0x20(%eax,%ebp,2),%esi
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
sub    $0x20,%al
jae    804c066 <_IO_stdin_used+0xc2>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ch,0xa0a2e73
and    %ah,(%eax)
sub    $0x2d202c61,%eax
sub    $0x206c6c61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x6c6c6120,0x74(%esi),%ebp
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804c0a8 <_IO_stdin_used+0x104>
popa
je     804c0a7 <_IO_stdin_used+0x103>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
imul   $0x20656874,0x20(%esi),%ebp
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     804c0b9 <_IO_stdin_used+0x115>
outsb  %ds:(%esi),(%dx)
and    %ch,0x72(%bx)
fs
gs
jb     804c085 <_IO_stdin_used+0xe1>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
js     804c0dd <_IO_stdin_used+0x139>
gs
jo     804c0f1 <_IO_stdin_used+0x14d>
and    %ch,0x6d(%edi)
imul   $0x6e612070,0x2d(%eax,%eiz,1),%esi
and    %ch,%fs:0x66692069
and    %dh,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
cmp    (%edx),%cl
and    %ah,(%eax)
sub    $0x2d202c73,%eax
sub    $0x6e72656b,%eax
gs
insb   (%dx),%es:(%edi)
sub    $0x656d616e,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     804c128 <_IO_stdin_used+0x184>
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x65(%ebx)
jb     804c130 <_IO_stdin_used+0x18c>
gs
insb   (%dx),%es:(%edi)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x2d202c6e
sub    $0x65646f6e,%eax
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x65(%esi)
je     804c16a <_IO_stdin_used+0x1c6>
outsl  %ds:(%esi),(%dx)
jb     804c161 <_IO_stdin_used+0x1bd>
and    %ch,0x6f(%esi)
fs and %ch,%fs:%gs:0x6f(%eax)
jae    804c174 <_IO_stdin_used+0x1d0>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x2d202c72
sub    $0x6e72656b,%eax
gs
insb   (%dx),%es:(%edi)
sub    $0x656c6572,%eax
popa
jae    804c180 <_IO_stdin_used+0x1dc>
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x65(%ebx)
jb     804c19c <_IO_stdin_used+0x1f8>
gs
insb   (%dx),%es:(%edi)
and    %dh,0x65(%edx)
insb   (%dx),%es:(%edi)
gs
popa
jae    804c19d <_IO_stdin_used+0x1f9>
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c76,%eax
sub    $0x6e72656b,%eax
gs
insb   (%dx),%es:(%edi)
sub    $0x73726576,%eax
imul   $0x20202020,0x6e(%edi),%ebp
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x65(%ebx)
jb     804c1d3 <_IO_stdin_used+0x22f>
gs
insb   (%dx),%es:(%edi)
and    %dh,0x65(%esi)
jb     804c1df <_IO_stdin_used+0x23b>
imul   $0x2d20200a,0x6e(%edi),%ebp
insl   (%dx),%es:(%edi)
sub    $0x20,%al
sub    $0x63616d2d,%eax
push   $0x20656e69
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x61(%ebp)
arpl   %bp,0x69(%eax)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x61(%eax)
jb     804c205 <_IO_stdin_used+0x261>
ja     804c204 <_IO_stdin_used+0x260>
jb     804c20a <_IO_stdin_used+0x266>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x2d202c70
sub    $0x636f7270,%eax
gs
jae    804c22d <_IO_stdin_used+0x289>
outsl  %ds:(%esi),(%dx)
jb     804c1dd <_IO_stdin_used+0x239>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    804c247 <_IO_stdin_used+0x2a3>
jb     804c1fa <_IO_stdin_used+0x256>
je     804c255 <_IO_stdin_used+0x2b1>
jo     804c243 <_IO_stdin_used+0x29f>
and    %ch,0x72(%edi)
and    %ah,(%edx)
jne    804c253 <_IO_stdin_used+0x2af>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    (%edx),%cl
and    %ah,(%eax)
sub    $0x2d202c69,%eax
sub    $0x64726168,%eax
ja     804c25b <_IO_stdin_used+0x2b7>
jb     804c261 <_IO_stdin_used+0x2bd>
sub    $0x74616c70,%eax
outsw  %ds:(%esi),(%dx)
jb     804c272 <_IO_stdin_used+0x2ce>
and    %ah,(%eax)
jo     804c27b <_IO_stdin_used+0x2d7>
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x61(%eax)
jb     804c279 <_IO_stdin_used+0x2d5>
ja     804c278 <_IO_stdin_used+0x2d4>
jb     804c27e <_IO_stdin_used+0x2da>
and    %dh,0x6c(%eax)
popa
je     804c285 <_IO_stdin_used+0x2e1>
outsl  %ds:(%esi),(%dx)
jb     804c28f <_IO_stdin_used+0x2eb>
and    %ch,0x72(%edi)
and    %ah,(%edx)
jne    804c297 <_IO_stdin_used+0x2f3>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    (%edx),%cl
and    %ah,(%eax)
sub    $0x2d202c6f,%eax
sub    $0x7265706f,%eax
popa
je     804c2a8 <_IO_stdin_used+0x304>
outsb  %ds:(%esi),(%dx)
addr16 sub $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x70(%edi)
gs
jb     804c2bb <_IO_stdin_used+0x317>
je     804c2c5 <_IO_stdin_used+0x321>
outsb  %ds:(%esi),(%dx)
and    %dh,0x79(%bp,%di)
jae    804c2d7 <_IO_stdin_used+0x333>
gs
insl   (%dx),%es:(%edi)
or     (%eax),%al
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c65682d
jo     804c295 <_IO_stdin_used+0x2f1>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     804c2eb <_IO_stdin_used+0x347>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    804c30e <_IO_stdin_used+0x36a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    804c320 <_IO_stdin_used+0x37c>
jo     804c323 <_IO_stdin_used+0x37f>
je     804c2d0 <_IO_stdin_used+0x32c>
jbe    804c317 <_IO_stdin_used+0x373>
jb     804c327 <_IO_stdin_used+0x383>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c32b <_IO_stdin_used+0x387>
popa
je     804c32a <_IO_stdin_used+0x386>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x74680000,0x0(%edx,%ecx,1),%esi
je     804c344 <_IO_stdin_used+0x3a0>
cmp    (%edi),%ch
das
ja     804c350 <_IO_stdin_used+0x3ac>
ja     804c309 <_IO_stdin_used+0x365>
outsb  %ds:(%si),(%dx)
jne    804c30d <_IO_stdin_used+0x369>
outsl  %ds:(%esi),(%dx)
jb     804c349 <_IO_stdin_used+0x3a5>
das
jae    804c354 <_IO_stdin_used+0x3b0>
data16
je     804c35f <_IO_stdin_used+0x3bb>
popa
jb     804c350 <_IO_stdin_used+0x3ac>
das
arpl   %bp,0x72(%edi)
gs
jne    804c366 <_IO_stdin_used+0x3c2>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     804c35f <_IO_stdin_used+0x3bb>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804c325 <_IO_stdin_used+0x381>
jne    804c37a <_IO_stdin_used+0x3d6>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     804c38b <_IO_stdin_used+0x3e7>
popa
jb     804c37c <_IO_stdin_used+0x3d8>
cmp    (%eax),%ah
cmp    $0x68,%al
je     804c391 <_IO_stdin_used+0x3ed>
jo     804c359 <_IO_stdin_used+0x3b5>
das
das
ja     804c39a <_IO_stdin_used+0x3f6>
ja     804c353 <_IO_stdin_used+0x3af>
outsb  %ds:(%si),(%dx)
jne    804c357 <_IO_stdin_used+0x3b3>
outsl  %ds:(%esi),(%dx)
jb     804c393 <_IO_stdin_used+0x3ef>
das
addr16
gs
je     804c399 <_IO_stdin_used+0x3f5>
gs
insb   (%dx),%es:(%edi)
jo     804c364 <_IO_stdin_used+0x3c0>
or     %ds:(%eax),%al
push   %edx
gs
jo     804c3ab <_IO_stdin_used+0x407>
jb     804c3b2 <_IO_stdin_used+0x40e>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    804c3b4 <_IO_stdin_used+0x410>
popa
je     804c3b4 <_IO_stdin_used+0x410>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 804c373 <_IO_stdin_used+0x3cf>
je     804c3c4 <_IO_stdin_used+0x420>
and    %bh,(%eax,%ebp,2)
je     804c3ce <_IO_stdin_used+0x42a>
jo     804c396 <_IO_stdin_used+0x3f2>
das
das
je     804c3d2 <_IO_stdin_used+0x42e>
popa
outsb  %ds:(%esi),(%dx)
jae    804c3d0 <_IO_stdin_used+0x42c>
popa
je     804c3d0 <_IO_stdin_used+0x42c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     804c3dd <_IO_stdin_used+0x439>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     804c3db <_IO_stdin_used+0x437>
das
je     804c3dc <_IO_stdin_used+0x438>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     804c3a4 <_IO_stdin_used+0x400>
arpl   %bp,0x6d(%edi)
jo     804c3f5 <_IO_stdin_used+0x451>
gs
je     804c3f1 <_IO_stdin_used+0x44d>
and    %ah,0x63(%edi,%ebp,2)
jne    804c3ff <_IO_stdin_used+0x45b>
outsb  %gs:(%esi),(%dx)
je     804c3f7 <_IO_stdin_used+0x453>
je     804c401 <_IO_stdin_used+0x45d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     804c413 <_IO_stdin_used+0x46f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     804c40f <_IO_stdin_used+0x46b>
jne    804c420 <_IO_stdin_used+0x47c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x55000a27,0x6e(%edi),%ebp
jae    804c425 <_IO_stdin_used+0x481>
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs or %cs:(%eax),%al
push   %eax
jb     804c444 <_IO_stdin_used+0x4a0>
outsb  %ds:(%esi),(%dx)
je     804c3fe <_IO_stdin_used+0x45a>
insl   (%dx),%es:(%edi)
popa
arpl   %bp,0x69(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x72(%ecx)
arpl   %bp,0x69(%eax)
je     804c452 <_IO_stdin_used+0x4ae>
arpl   %si,0x72(%ebp,%esi,2)
gs or  %cs:%gs:(%edx),%cl
add    %cl,(%edx)
push   %edx
gs
jo     804c46a <_IO_stdin_used+0x4c6>
jb     804c471 <_IO_stdin_used+0x4cd>
and    %ah,0x75622073
addr16 jae 804c426 <_IO_stdin_used+0x482>
je     804c477 <_IO_stdin_used+0x4d3>
and    %ah,0x62000a73
jne    804c477 <_IO_stdin_used+0x4d3>
sub    $0x65726f63,%eax
jne    804c48b <_IO_stdin_used+0x4e7>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     804c489 <_IO_stdin_used+0x4e5>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    804c473 <_IO_stdin_used+0x4cf>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     804c4a4 <_IO_stdin_used+0x500>
jne    804c4b5 <_IO_stdin_used+0x511>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
jne    804c4b9 <_IO_stdin_used+0x515>
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x72(%ecx)
arpl   %bp,0x0(%eax)
popa
je     804c4bf <_IO_stdin_used+0x51b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ch,(%edi)
jne    804c4d1 <_IO_stdin_used+0x52d>
jb     804c48f <_IO_stdin_used+0x4eb>
jae    804c4ca <_IO_stdin_used+0x526>
popa
jb     804c4ca <_IO_stdin_used+0x526>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %cl,%gs:0x61(%ebx)
jb     804c4d6 <_IO_stdin_used+0x532>
insb   (%dx),%es:(%edi)
and    %bl,0x61(%edx)
imul   $0x44,(%eax),%eax
popa
jbe    804c4e4 <_IO_stdin_used+0x540>
and    %cl,%fs:0x61(%ebp)
arpl   %cx,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
jp     804c4ee <_IO_stdin_used+0x54a>
add    %ah,%gs:0x73(%ecx)
outsb  %ds:(%esi),(%dx)
jb     804c502 <_IO_stdin_used+0x55e>
insl   (%dx),%es:(%edi)
jo     804c4f8 <_IO_stdin_used+0x554>
outsl  %ds:(%esi),(%dx)
add    %ah,0x78(%ebp)
je     804c507 <_IO_stdin_used+0x563>
popa
and    %ch,0x70(%edi)
gs
jb     804c4fd <_IO_stdin_used+0x559>
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804c4c9 <_IO_stdin_used+0x525>
addr16
gs
je     804c4cd <_IO_stdin_used+0x529>
jae    804c528 <_IO_stdin_used+0x584>
jae    804c525 <_IO_stdin_used+0x581>
gs
insl   (%dx),%es:(%edi)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x36(%ecx)
cmp    %dh,(%esi)
add    %ch,(%edi)
jo     804c533 <_IO_stdin_used+0x58f>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
arpl   %si,0x75(%eax)
imul   $0x6576006f,0x66(%esi),%ebp
outsb  %ds:(%esi),(%dx)
outsl  %fs:(%esi),(%dx)
jb     804c532 <_IO_stdin_used+0x58e>
imul   $0x65687475,0x41(%eax,%eax,1),%esp
outsb  %ds:(%esi),(%dx)
je     804c547 <_IO_stdin_used+0x5a3>
arpl   %ax,0x4d(%ecx)
inc    %esp
add    %al,0x4e(%edi)
push   %ebp
das
dec    %esp
imul   $0x65680078,0x75(%esi),%ebp
insb   (%dx),%es:(%edi)
jo     804c4f2 <_IO_stdin_used+0x54e>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ch,0x65(%ebx)
jb     804c568 <_IO_stdin_used+0x5c4>
gs
insb   (%dx),%es:(%edi)
sub    $0x656d616e,%eax
add    %dh,0x79(%ebx)
jae    804c574 <_IO_stdin_used+0x5d0>
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x6f(%esi)
fs outsb %fs:%gs:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x65(%ebx)
jb     804c585 <_IO_stdin_used+0x5e1>
gs
insb   (%dx),%es:(%edi)
sub    $0x656c6572,%eax
popa
jae    804c586 <_IO_stdin_used+0x5e2>
add    %ch,0x65(%ebx)
jb     804c594 <_IO_stdin_used+0x5f0>
gs
insb   (%dx),%es:(%edi)
sub    $0x73726576,%eax
imul   $0x63616d00,0x6e(%edi),%ebp
push   $0x656e69
jo     804c5ad <_IO_stdin_used+0x609>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
jae    804c5b0 <_IO_stdin_used+0x60c>
jb     804c543 <_IO_stdin_used+0x59f>
push   $0x77647261
popa
jb     804c5b0 <_IO_stdin_used+0x60c>
sub    $0x74616c70,%eax
outsw  %ds:(%esi),(%dx)
jb     804c5c1 <_IO_stdin_used+0x61d>
add    %ch,0x70(%edi)
gs
jb     804c5bb <_IO_stdin_used+0x617>
je     804c5c5 <_IO_stdin_used+0x621>
outsb  %ds:(%esi),(%dx)
addr16 sub $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
add    %al,(%eax)
add    %ch,%ch
les    (%eax,%ecx,1),%eax
jle    804c58d <_IO_stdin_used+0x5e9>
(bad)
ljmp   *(%ecx)
lds    (%eax,%ecx,1),%eax
jge    804c59d <_IO_stdin_used+0x5f9>
(bad)
incl   (%eax)
add    %al,(%eax)
add    %dh,%dl
les    (%eax,%ecx,1),%eax
popa
add    %al,(%eax)
add    %dh,%dh
les    (%eax,%ecx,1),%eax
jae    804c5de <_IO_stdin_used+0x63a>
add    %al,(%eax)
add    %ch,%al
add    $0x8,%al
jae    804c5ee <_IO_stdin_used+0x64a>
add    %al,(%eax)
or     %ch,%al
add    $0x8,%al
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %dl,(%ebx)
lds    (%eax,%ecx,1),%eax
jb     804c60e <_IO_stdin_used+0x66a>
add    %al,(%eax)
sbb    %ch,%al
add    $0x8,%al
jb     804c61e <_IO_stdin_used+0x67a>
add    %al,(%eax)
and    %ch,%al
add    $0x8,%al
jbe    804c62e <_IO_stdin_used+0x68a>
add    %al,(%eax)
xor    %eax,%ebp
add    $0x8,%al
insl   (%dx),%es:(%edi)
add    %al,(%eax)
add    %bh,(%ecx)
lds    (%eax,%ecx,1),%eax
jo     804c64e <_IO_stdin_used+0x6aa>
add    %al,(%eax)
inc    %ebx
lds    (%eax,%ecx,1),%eax
imul   $0xc5550000,(%eax),%eax
add    $0x8,%al
outsl  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %ch,%ch
les    (%eax,%ecx,1),%eax
jle    804c67d <_IO_stdin_used+0x6d9>
(bad)
ljmp   *(%ecx)
lds    (%eax,%ecx,1),%eax
jge    804c68d <_IO_stdin_used+0x6e9>
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     804c6b1 <_IO_stdin_used+0x70d>
and    $0x25203a73,%eax
jae    804c6b8 <_IO_stdin_used+0x714>
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 804c71f <_IO_stdin_used+0x77b>
xor    %bl,0x20(%ebp)
ja     804c72a <_IO_stdin_used+0x786>
jae    804c6eb <_IO_stdin_used+0x747>
jo     804c72e <_IO_stdin_used+0x78a>
jae    804c742 <_IO_stdin_used+0x79e>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    804c73f <_IO_stdin_used+0x79b>
push   $0x206e6120
gs
js     804c745 <_IO_stdin_used+0x7a1>
arpl   %sp,(%eax)
jae    804c75d <_IO_stdin_used+0x7b9>
jae    804c75a <_IO_stdin_used+0x7b6>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     804c77a <_IO_stdin_used+0x7d6>
jb     804c778 <_IO_stdin_used+0x7d4>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    804c79e <_IO_stdin_used+0x7fa>
add    %ah,0x0(%ebx)
arpl   %bp,0x6279616d
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
dec    %eax
pushf
add    $0x8,%al
sub    %ah,-0x5da7f7fc(%edx)
add    $0x8,%al
sbb    %ah,-0x5ea7f7fc(%ecx)
add    $0x8,%al
mov    %ah,-0x5e4ff7fc(%ecx)
add    $0x8,%al
mov    $0xa1,%al
add    $0x8,%al
mov    $0xa1,%al
add    $0x8,%al
push   %eax
lahf
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
enter  $0x49f,$0x8
sub    %bl,-0x60b7f7fc(%edi)
add    $0x8,%al
inc    %eax
lahf
add    $0x8,%al
cmp    %bl,-0x60cff7fc(%edi)
add    $0x8,%al
add    %bl,-0x5fb7f7fc(%edi)
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0xa0480804,%al
add    $0x8,%al
dec    %eax
mov    0x9e790804,%al
add    $0x8,%al
jns    804c7a8 <_IO_stdin_used+0x804>
add    $0x8,%al
jns    804c7ac <_IO_stdin_used+0x808>
add    $0x8,%al
jno    804c7b0 <_IO_stdin_used+0x80c>
add    $0x8,%al
jns    804c7b4 <_IO_stdin_used+0x810>
add    $0x8,%al
call   810cccba <stdout+0x7907dafa>
sahf
add    $0x8,%al
clc
lahf
add    $0x8,%al
jns    804c7c4 <_IO_stdin_used+0x820>
add    $0x8,%al
jns    804c7c8 <_IO_stdin_used+0x824>
add    $0x8,%al
jns    804c7cc <_IO_stdin_used+0x828>
add    $0x8,%al
call   f00cccd2 <stdout+0xe807db12>
popf
add    $0x8,%al
call   f00cccda <stdout+0xe807db1a>
popf
add    $0x8,%al
call   f00ccce2 <stdout+0xe807db22>
popf
add    $0x8,%al
call   f00cccea <stdout+0xe807db2a>
popf
add    $0x8,%al
call   f00cccf2 <stdout+0xe807db32>
popf
add    $0x8,%al
call   f00cccfa <stdout+0xe807db3a>
popf
add    $0x8,%al
call   f00ccd02 <stdout+0xe807db42>
popf
add    $0x8,%al
call   f00ccd0a <stdout+0xe807db4a>
popf
add    $0x8,%al
jns    804c810 <_IO_stdin_used+0x86c>
add    $0x8,%al
jns    804c814 <_IO_stdin_used+0x870>
add    $0x8,%al
jns    804c818 <_IO_stdin_used+0x874>
add    $0x8,%al
jns    804c81c <_IO_stdin_used+0x878>
add    $0x8,%al
cmp    %bl,-0x5fb7f7fc(%ebp)
add    $0x8,%al
call   f00ccd2a <stdout+0xe807db6a>
popf
add    $0x8,%al
call   f00ccd32 <stdout+0xe807db72>
popf
add    $0x8,%al
call   f00ccd3a <stdout+0xe807db7a>
popf
add    $0x8,%al
call   f00ccd42 <stdout+0xe807db82>
popf
add    $0x8,%al
call   f00ccd4a <stdout+0xe807db8a>
popf
add    $0x8,%al
call   f00ccd52 <stdout+0xe807db92>
popf
add    $0x8,%al
call   f00ccd5a <stdout+0xe807db9a>
popf
add    $0x8,%al
call   f00ccd62 <stdout+0xe807dba2>
popf
add    $0x8,%al
call   f00ccd6a <stdout+0xe807dbaa>
popf
add    $0x8,%al
call   f00ccd72 <stdout+0xe807dbb2>
popf
add    $0x8,%al
call   f00ccd7a <stdout+0xe807dbba>
popf
add    $0x8,%al
call   f00ccd82 <stdout+0xe807dbc2>
popf
add    $0x8,%al
call   f00ccd8a <stdout+0xe807dbca>
popf
add    $0x8,%al
jns    804c890 <_IO_stdin_used+0x8ec>
add    $0x8,%al
fcomps -0x6217f7fc(%edi)
add    $0x8,%al
jns    804c89c <_IO_stdin_used+0x8f8>
add    $0x8,%al
call   810ccda2 <stdout+0x7907dbe2>
sahf
add    $0x8,%al
call   f00ccdaa <stdout+0xe807dbea>
popf
add    $0x8,%al
call   f00ccdb2 <stdout+0xe807dbf2>
popf
add    $0x8,%al
call   f00ccdba <stdout+0xe807dbfa>
popf
add    $0x8,%al
call   f00ccdc2 <stdout+0xe807dc02>
popf
add    $0x8,%al
call   f00ccdca <stdout+0xe807dc0a>
popf
add    $0x8,%al
call   f00ccdd2 <stdout+0xe807dc12>
popf
add    $0x8,%al
call   f00ccdda <stdout+0xe807dc1a>
popf
add    $0x8,%al
call   f00ccde2 <stdout+0xe807dc22>
popf
add    $0x8,%al
call   f00ccdea <stdout+0xe807dc2a>
popf
add    $0x8,%al
call   f00ccdf2 <stdout+0xe807dc32>
popf
add    $0x8,%al
call   f00ccdfa <stdout+0xe807dc3a>
popf
add    $0x8,%al
call   f00cce02 <stdout+0xe807dc42>
popf
add    $0x8,%al
call   f00cce0a <stdout+0xe807dc4a>
popf
add    $0x8,%al
push   %eax
sahf
add    $0x8,%al
jns    804c914 <_IO_stdin_used+0x970>
add    $0x8,%al
push   %eax
sahf
add    $0x8,%al
jno    804c91c <_IO_stdin_used+0x978>
add    $0x8,%al
jo     804c926 <_IO_stdin_used+0x982>
add    $0x8,%al
jo     804c92a <_IO_stdin_used+0x986>
add    $0x8,%al
or     %ah,0x4a47008(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
jo     804c93a <_IO_stdin_used+0x996>
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
or     %ah,0x4a40808(%esp,%eax,1)
or     %cl,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
jo     804c9aa <_IO_stdin_used+0xa06>
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dl,(%ecx)
movl   $0x804c719,(%eax,%ecx,1)
pop    %ds
movl   $0x804c72c,(%eax,%ecx,1)
movl   $0x804c736,%cs:(%eax,%ecx,1)
les    (%eax,%ecx,1),%ax
cmp    $0x804c7,%eax
add    %al,(%eax)
add    %ah,0x25282073
jae    804ca94 <_IO_stdin_used+0xaf0>
and    %ah,0x25000a73
jae    804ca93 <_IO_stdin_used+0xaef>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     804cae7 <_IO_stdin_used+0xb43>
je     804caf4 <_IO_stdin_used+0xb50>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     804caf7 <_IO_stdin_used+0xb53>
je     804cb04 <_IO_stdin_used+0xb60>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     804cb0e <_IO_stdin_used+0xb6a>
je     804cb1b <_IO_stdin_used+0xb77>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cae0 <_IO_stdin_used+0xb3c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     804cb32 <_IO_stdin_used+0xb8e>
jb     804cb39 <_IO_stdin_used+0xb95>
and    %ah,0x75(%edx)
addr16 jae 804caeb <_IO_stdin_used+0xb47>
je     804cb3c <_IO_stdin_used+0xb98>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    804cb41 <_IO_stdin_used+0xb9d>
and    %al,0x50(%edi)
dec    %esp
jbe    804cb15 <_IO_stdin_used+0xb71>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     804cb64 <_IO_stdin_used+0xbc0>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     804cb1a <_IO_stdin_used+0xb76>
insb   (%dx),%es:(%edi)
popa
je     804cb63 <_IO_stdin_used+0xbbf>
jb     804cb20 <_IO_stdin_used+0xb7c>
cmp    $0x68,%al
je     804cb78 <_IO_stdin_used+0xbd4>
jo     804cb40 <_IO_stdin_used+0xb9c>
das
das
outsb  %ds:(%si),(%dx)
jne    804cb3a <_IO_stdin_used+0xb96>
outsl  %ds:(%esi),(%dx)
jb     804cb76 <_IO_stdin_used+0xbd2>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 804cb88 <_IO_stdin_used+0xbe4>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    804cb49 <_IO_stdin_used+0xba5>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     804cbad <_IO_stdin_used+0xc09>
popa
jb     804cb9e <_IO_stdin_used+0xbfa>
cmp    (%eax),%ah
jns    804cbac <_IO_stdin_used+0xc08>
jne    804cb5f <_IO_stdin_used+0xbbb>
popa
jb     804cba7 <_IO_stdin_used+0xc03>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     804cbc7 <_IO_stdin_used+0xc23>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     804cbd1 <_IO_stdin_used+0xc2d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     804cbee <_IO_stdin_used+0xc4a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     804cbed <_IO_stdin_used+0xc49>
outsb  %ds:(%esi),(%dx)
je     804cbab <_IO_stdin_used+0xc07>
jo     804cbf2 <_IO_stdin_used+0xc4e>
jb     804cbfc <_IO_stdin_used+0xc58>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     804cc0c <_IO_stdin_used+0xc68>
je     804cc19 <_IO_stdin_used+0xc75>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cbde <_IO_stdin_used+0xc3a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc2c <_IO_stdin_used+0xc88>
je     804cc39 <_IO_stdin_used+0xc95>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cbfe <_IO_stdin_used+0xc5a>
and    %ah,0x250a2c73
jae    804cc06 <_IO_stdin_used+0xc62>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc50 <_IO_stdin_used+0xcac>
je     804cc5d <_IO_stdin_used+0xcb9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc22 <_IO_stdin_used+0xc7e>
and    %ah,0x250a2c73
jae    804cc2a <_IO_stdin_used+0xc86>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cc78 <_IO_stdin_used+0xcd4>
je     804cc85 <_IO_stdin_used+0xce1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc4a <_IO_stdin_used+0xca6>
and    %ah,0x250a2c73
jae    804cc52 <_IO_stdin_used+0xcae>
and    %ah,0x25202c73
jae    804cc5a <_IO_stdin_used+0xcb6>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cca4 <_IO_stdin_used+0xd00>
je     804ccb1 <_IO_stdin_used+0xd0d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cc76 <_IO_stdin_used+0xcd2>
and    %ah,0x250a2c73
jae    804cc7e <_IO_stdin_used+0xcda>
and    %ah,0x25202c73
jae    804cc86 <_IO_stdin_used+0xce2>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804ccd4 <_IO_stdin_used+0xd30>
je     804cce1 <_IO_stdin_used+0xd3d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804cca6 <_IO_stdin_used+0xd02>
and    %ah,0x250a2c73
jae    804ccae <_IO_stdin_used+0xd0a>
and    %ah,0x25202c73
jae    804ccb6 <_IO_stdin_used+0xd12>
and    %ah,0x250a2c73
jae    804ccbe <_IO_stdin_used+0xd1a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804cd08 <_IO_stdin_used+0xd64>
je     804cd15 <_IO_stdin_used+0xd71>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804ccda <_IO_stdin_used+0xd36>
and    %ah,0x250a2c73
jae    804cce2 <_IO_stdin_used+0xd3e>
and    %ah,0x25202c73
jae    804ccea <_IO_stdin_used+0xd46>
and    %ah,0x250a2c73
jae    804ccf2 <_IO_stdin_used+0xd4e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
inc    %eax
mov    $0x4,%cl
or     %cl,-0x4f(%eax)
add    $0x8,%al
mov    %dh,-0x4e2ff7fc(%ecx)
add    $0x8,%al
sub    %dh,-0x4d7ff7fc(%edx)
add    $0x8,%al
call   680cd1a7 <stdout+0x6007dfe7>
mov    $0x4,%bl
or     %al,(%eax)
mov    $0x4,%al
or     %bl,0x430804b0(%eax)
outsl  %ds:(%esi),(%dx)
jo     804cd7d <_IO_stdin_used+0xdd9>
jb     804cd6f <_IO_stdin_used+0xdcb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     804cd91 <_IO_stdin_used+0xded>
popa
jb     804cd82 <_IO_stdin_used+0xdde>
and    %al,0x6f(%esi)
jne    804cd90 <_IO_stdin_used+0xdec>
fs
popa
je     804cd8f <_IO_stdin_used+0xdeb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804cdae <_IO_stdin_used+0xe0a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    804cdb6 <_IO_stdin_used+0xe12>
jb     804cd74 <_IO_stdin_used+0xdd0>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
xor    %al,(%edx)
add    %al,(%eax)
inc    %ebp
add    %al,(%eax)
add    %dl,-0x1(%esi,%edi,4)
decl   0x0(%edx,%eax,1)
add    %dl,%ah
sar    $0xff,%edi
mov    $0x2,%ah
add    %al,(%eax)
in     $0xc7,%al
(bad)
pushl  0x2(%eax)
add    %al,(%eax)
inc    %esp
enter  $0xffff,$0x94
add    (%eax),%al
add    %al,(%ebx,%ecx,8)
(bad)
call   *%esp
add    (%eax),%al
add    %dl,(%ebx,%ecx,8)
(bad)
(bad)
call   2c04cdab <stdout+0x23ffdbeb>
lret
(bad)
(bad)
cld
add    (%eax),%al
add    %dh,%ah
lret
(bad)
ljmp   *(%eax)
add    (%eax),%eax
add    %dl,-0x1(%esp,%ecx,8)
decl   0x3(%eax)
add    %al,(%eax)
xchg   %eax,%esp
int3
(bad)
ljmp   *0x0(%ebx,%eax,1)
add    %al,-0x1(%ebp,%ecx,8)
ljmp   *-0x328c0000(%ebx,%eax,1)
(bad)
(bad)
fadds  (%ebx)
add    %al,(%eax)
fs
into
(bad)
call   *(%eax)
add    $0x0,%al
add    %dl,0x454ffff(%eax,%ebx,8)
add    %al,(%eax)
xor    $0xda,%al
(bad)
call   *-0x258c0000(%esp,%eax,1)
(bad)
dec    %eax
add    $0x0,%al
add    %dl,0x4dcffff(%edx,%ebx,8)
add    %al,(%eax)
mov    $0xda,%ah
(bad)
push   %eax
add    $0x0,%al
add    %dh,%ah
(bad)
call   *-0x24ec0000(,%eax,1)
(bad)
ljmp   *(%eax)
add    $0xdb540000,%eax
(bad)
decl   0x0(%ebp,%eax,1)
add    %dh,0x580ffff(%ebx,%ebx,8)
add    %al,(%eax)
xchg   %eax,%esp
fdivr  %st,%st(7)
(bad)
mov    $0xc4000005,%esp
fdivr  %st,%st(7)
call   *%esp
add    $0xdd540000,%eax
(bad)
decl   (%eax)
push   %es
add    %al,(%eax)
je     804ce1f <_IO_stdin_used+0xe7b>
(bad)
lcall  *(%esi,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
pushl  (%eax)
push   %es
add    %al,(%eax)
mov    $0xdd,%ah
(bad)
incl   0x0(%esi,%eax,1)
add    %dl,%ah
(bad)
lcall  *0x6(%eax)
add    %al,(%eax)
add    $0xde,%al
(bad)
(bad)
js     804ce6c <_IO_stdin_used+0xec8>
add    %al,(%eax)
xor    $0xde,%al
(bad)
lcall  *0x64000006(%eax)
fdivrp %st,%st(7)
pushl  -0x6bfffffa(%eax)
fdivrp %st,%st(7)
dec    %eax
push   %es
add    %al,(%eax)
inc    %esp
(bad)
(bad)
in     (%dx),%al
push   %es
add    %al,(%eax)
je     804ce69 <_IO_stdin_used+0xec5>
(bad)
incl   (%edi,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
lcall  *(%edi,%eax,1)
add    %al,(%eax)
aam    $0xdf
(bad)
pushl  (%edi,%eax,1)
add    %al,(%eax)
test   %ah,%al
(bad)
lcall  *0x7(%eax)
add    %al,(%eax)
(bad)
loopne 804ceaa <_IO_stdin_used+0xf06>
pushl  0x7(%eax)
add    %al,(%eax)
add    $0xe1,%al
(bad)
decl   0x44000007(%eax)
loope  804ceba <_IO_stdin_used+0xf16>
jmp    *0x64000007(%eax)
loope  804cec2 <_IO_stdin_used+0xf1e>
pushl  -0x1e7c0000(%edi,%eax,1)
(bad)
dec    %eax
pop    %es
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
loope  804ced2 <_IO_stdin_used+0xf2e>
(bad)
faddl  (%edi)
add    %al,(%eax)
(bad)
lock pop %es
add    %al,(%eax)
xor    $0xe7,%al
(bad)
decl   -0x187c0000(%eax,%ecx,1)
(bad)
jmp    *-0x181c0000(%eax,%ecx,1)
(bad)
dec    %eax
or     %al,(%eax)
add    %ah,(%eax,%ebp,8)
(bad)
jmp    *%eax
or     %al,(%eax)
add    %dl,%ah
call   1109cf05 <stdout+0x904dd45>
add    %al,(%eax)
add    $0xe9,%al
(bad)
ljmp   *(%eax)
or     %eax,(%eax)
add    %dh,(%ecx,%ebp,8)
(bad)
decl   0x0(%ecx,%ecx,1)
add    %al,-0x1(%ecx,%ebp,8)
jmp    *0x9(%eax)
add    %al,(%eax)
xchg   %eax,%esp
jmp    1195cf25 <stdout+0x990dd65>
add    %al,(%eax)
aam    $0xe9
(bad)
(bad)
mov    $0x34000009,%esp
ljmp   $0x0,$0x9ecffff
test   %ch,%dl
(bad)
call   *(%eax)
or     (%eax),%al
add    %dh,0xa30ffff(%edx,%ebp,8)
add    %al,(%eax)
in     $0xea,%al
(bad)
decl   0x0(%edx,%ecx,1)
add    %dl,(%ebx,%ebp,8)
(bad)
ljmp   *0x0(%edx,%ecx,1)
add    %al,-0x1(%ebx,%ebp,8)
decl   -0x146c0000(%edx,%ecx,1)
(bad)
jmp    *0x3400000a(%eax)
in     (%dx),%al
(bad)
(bad)
call   9c04cf7b <stdout+0x93ffddbb>
in     (%dx),%al
(bad)
call   *(%ebx,%ecx,1)
add    %al,(%eax)
and    $0xed,%al
(bad)
ljmp   *0x0(%ebx,%ecx,1)
add    %ah,0xbc4ffff(%ebp,%ebp,8)
add    %al,(%eax)
fs
icebp
(bad)
incl   (%esp,%ecx,1)
add    %al,(%eax)
aam    $0xf1
(bad)
incl   0xc(%eax)
add    %al,(%eax)
in     $0xf1,%al
(bad)
call   *0x0(%esp,%ecx,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804cfb7 <_IO_stdin_used+0x1013>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
add    %bh,0x380ff(%edi,%edi,8)
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804cfd7 <_IO_stdin_used+0x1033>
js     804cfd5 <_IO_stdin_used+0x1031>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
and    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,-0x1(%ebp,%eax,8)
call   *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
jnp    804d001 <_IO_stdin_used+0x105d>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %ch,-0x4900003b(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
test   %al,(%eax)
add    %al,(%eax)
sbb    %bh,0x518ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x10,%eax
movsb  %ds:(%esi),%es:(%edi)
add    %al,(%eax)
add    %ch,(%eax)
enter  $0xffff,$0xa
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,0x24000000(%eax)
enter  $0xffff,$0xa
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,%ah
add    %al,(%eax)
add    %ah,(%eax)
enter  $0xffff,$0xca
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
clc
add    %al,(%eax)
add    %al,%ah
enter  $0xffff,$0x57
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %eax,(%eax)
add    %al,(%ecx,%ecx,8)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
cmp    $0x1,%al
add    %al,(%eax)
and    %cl,%cl
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
jl     804d11f <_IO_stdin_used+0x117b>
add    %al,(%eax)
nop
leave
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
test   $0x1,%al
add    %al,(%eax)
xchg   %eax,%esp
leave
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %cl,-0x1(%edx,%ecx,8)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
and    $0x2,%al
add    %al,(%eax)
cmp    %dl,%ah
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %ah,0x0(%edx,%eax,1)
add    %bl,0x36ffffd5(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x5bfffffe(%eax)
aad    $0xff
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x2a500000(%edx,%eax,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%al
add    (%eax),%al
add    %bh,0x3fffff(%ebp,%edx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
in     $0x2,%al
add    %al,(%eax)
fcom   %st(5)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,%al
add    (%eax),%al
add    %ah,%ah
aad    $0xff
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sbb    $0x3,%al
add    %al,(%eax)
add    %dl,%dh
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
push   %eax
add    (%eax),%eax
add    %ch,(%esi,%edx,8)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %cl,-0x29300000(%ebx,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%eax
add    %ch,%al
(bad)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fadds  (%ebx)
add    %al,(%eax)
inc    %esp
xlat   %ds:(%ebx)
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,%ah
add    (%eax),%eax
add    %dl,-0x29(%eax)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %bl,-0x1(%edi,%edx,8)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%esp,%eax,1)
add    %al,(%eax)
push   $0x17ffffd7
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sub    %al,(%eax,%eax,1)
add    %dh,-0x1(%edi,%edx,8)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %cl,0x4(%eax)
add    %al,(%eax)
test   %dl,%bh
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ch,0x4(%eax)
add    %al,(%eax)
xchg   %eax,%esp
xlat   %ds:(%ebx)
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax,%eax,1)
lods   %ds:(%esi),%al
xlat   %ds:(%ebx)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
cwtl
add    $0x0,%al
add    %al,%ah
xlat   %ds:(%ebx)
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    $0x50000004,%esp
fdivr  %st(7),%st
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
aam    $0x4
add    %al,(%eax)
push   $0x23ffffd8
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
add    $0x0,%al
add    %al,0x23ffffd8(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
add    $0x5,%al
add    %al,(%eax)
cwtl
fdivr  %st(7),%st
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    %al,0xd9240000
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %eax
add    $0xd94c0000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pop    %eax
add    $0xd9740000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
jo     804d517 <_IO_stdin_used+0x1573>
add    %al,(%eax)
pushf
fcos
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,-0x26580000(%ebp,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x4bfffffb(%eax)
fcos
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x26400000(%ebp,%eax,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x40000000(%eax)
add    $0xd9cc0000,%eax
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
push   %es
add    %al,(%eax)
mov    0x4affffde,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dh,0x0(%esi,%eax,1)
add    %bl,%al
fdivrp %st,%st(7)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cwtl
push   %es
add    %al,(%eax)
adc    $0xdf,%al
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    $0x6,%al
add    %al,(%eax)
cmp    $0xdf,%al
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
aam    $0x6
add    %al,(%eax)
enter  $0xffdf,$0xff
and    $0x0,%eax
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
clc
push   %es
add    %al,(%eax)
aam    $0xdf
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
sbb    $0x7,%al
add    %al,(%eax)
loopne 804d6a1 <_IO_stdin_used+0x16fd>
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
xor    %al,(%edi)
add    %al,(%eax)
(bad)
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
pusha
pop    %es
add    %al,(%eax)
cld
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    %es,(%edi)
add    %al,(%eax)
adc    %ah,%al
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x40000007,%esp
loopne 804d762 <_IO_stdin_used+0x17be>
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
loopne 804d789 <_IO_stdin_used+0x17e5>
add    %al,(%eax)
insb   (%dx),%es:(%edi)
loopne 804d786 <_IO_stdin_used+0x17e2>
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,(%eax)
or     %al,(%eax)
add    %bh,-0x1(%eax,%eiz,8)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x8,%al
add    %al,(%eax)
nop
loopne 804d7c2 <_IO_stdin_used+0x181e>
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,(%eax,%ecx,1)
add    %al,(%eax)
mov    0x24ffffe0,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,0x0(%eax,%ecx,1)
add    %dh,0x46ffffe0(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %al,0x0(%eax,%eax,1)
add    %dh,0x8(%eax)
add    %al,(%eax)
in     (%dx),%al
loopne 804d816 <_IO_stdin_used+0x1872>
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
mov    $0x44000008,%eax
loope  804d85e <_IO_stdin_used+0x18ba>
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ah,%ah
or     %al,(%eax)
add    %bh,-0x1f(%eax)
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bh,(%ecx,%ecx,1)
add    %al,(%eax)
mov    $0xe1,%al
(bad)
(bad)
js     804d8e6 <_IO_stdin_used+0x1942>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     804d907 <_IO_stdin_used+0x1963>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
or     %eax,(%eax)
add    %bl,%al
loope  804d93a <_IO_stdin_used+0x1996>
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dl,%ah
or     %eax,(%eax)
add    %bl,-0x1b(%eax)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,(%eax)
or     (%eax),%al
add    %cl,0x2ffff(%ebp,%eiz,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
and    $0xa,%al
add    %al,(%eax)
mov    %ah,%ch
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0x20
xchg   %eax,%ebp
add    $0x8,%al
.byte 0x0
xchg   %eax,%ebp
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
mov    (%eax,%ecx,1),%eax
or     $0x8c000000,%eax
mov    $0x190804,%edi
add    %al,(%eax)
or     %ch,%bh
add    $0x8,%al
sbb    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0xef,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
lock test %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %dh,%al
addl   $0xa,(%eax,%ecx,1)
mov    $0xb000002,%edx
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
lock add $0x8,%al
add    (%eax),%al
add    %al,(%eax)
mov    $0x14000001,%eax
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%edi)
add    %al,(%eax)
add    %bl,%ah
mov    %eax,(%eax,%ecx,1)
adc    %eax,(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
mov    %eax,(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x2c(%edi)
mov    %eax,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x56(%edi)
mov    %al,(%eax,%ecx,1)
add    %al,(%eax)
adc    $0xef,%al
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
out    %al,$0x8b
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
push   %es
mov    %es,(%eax,%ecx,1)
push   %ss
mov    %es,(%eax,%ecx,1)
mov    %es,%es:(%eax,%ecx,1)
mov    %es,%ss:(%eax,%ecx,1)
inc    %esi
mov    %es,(%eax,%ecx,1)
push   %esi
mov    %es,(%eax,%ecx,1)
data16
mov    %es,(%eax,%ecx,1)
jbe    804efc2 <_IO_stdin_used+0x301e>
add    $0x8,%al
xchg   %cl,0x48c9608(%esp,%eax,1)
or     %ah,-0x49f7fb74(%esi)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
out    %al,$0x8c
add    $0x8,%al
(bad)
mov    %es,(%eax,%ecx,1)
push   %es
lea    (%eax,%ecx,1),%eax
push   %ss
lea    (%eax,%ecx,1),%eax
lea    %es:(%eax,%ecx,1),%eax
lea    %ss:(%eax,%ecx,1),%eax
inc    %esi
lea    (%eax,%ecx,1),%eax
push   %esi
lea    (%eax,%ecx,1),%eax
lea    (%eax,%ecx,1),%ax
jbe    804f003 <_IO_stdin_used+0x305f>
add    $0x8,%al
xchg   %cl,-0x7269f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lea    (%eax,%ecx,1),%eax
mov    $0x8d,%dh
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
(bad)
lea    (%eax,%ecx,1),%eax
out    %al,$0x8d
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
push   %es
mov    (%eax,%ecx,1),%es
push   %ss
mov    (%eax,%ecx,1),%es
mov    %es:(%eax,%ecx,1),%es
mov    %ss:(%eax,%ecx,1),%es
inc    %esi
mov    (%eax,%ecx,1),%es
push   %esi
mov    (%eax,%ecx,1),%es
data16
mov    (%eax,%ecx,1),%es
jbe    804f044 <_IO_stdin_used+0x30a0>
add    $0x8,%al
xchg   %cl,-0x7169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %es
popl   (%eax,%ecx,1)
push   %ss
popl   (%eax,%ecx,1)
popl   %es:(%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
jne    804f178 <stderr+0x14>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %al,(%ecx)
add    %al,(%eax)
add    %ah,0x10804c6(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %dl,0x4(%ecx,%esi,8)
or     %al,(%eax)
add    %eax,(%eax)
add    %ah,%al
icebp
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
jne    70 <strstr@plt-0x8048b60>
popa
insl   (%dx),%es:(%edi)
add    %al,%gs:(%eax)
add    %bh,(%edi)
xor    %ebp,%edi
.byte 0xd4
