das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %cl,-0x69(%esp,%edx,1)
loop   804814e <strcmp@plt-0xa12>
push   %cs
ret
xchg   %ebp,%ds:0x3e0058ae(%ebx)
.byte 0x81
pop    %ebp
cmc
jo     8048216 <strcmp@plt-0x94a>
.byte 0xd1
add    (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %al,(%esi)
rorb   $0x24,0x0(%eax)
imul   $0x3412,(%ecx),%ebx
add    %dh,0x3c000000
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x50bc1c8c,%eax
jbe    8048176 <strcmp@plt-0x9ea>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <strcmp@plt-0x9d3>
dec    %ebx
jecxz  80481a4 <strcmp@plt-0x9bc>
xchg   %eax,%esi
mov    0xb3c09789,%al
notl   (%edx)
in     $0x62,%eax
inc    %ecx
cmc
xor    %esp,%eax
notl   (%edx)
lock add %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
incl   (%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %esi
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
flds   (%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     80482d6 <strcmp@plt-0x88a>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esi
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popf
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   $0x1
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %ebp
add    (%eax),%al
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %es
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
nop
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ecx,%eax,1)
add    %al,(%eax)
mov    0x40804f1,%al
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,0x40000002
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
jne    8048557 <strcmp@plt-0x609>
add    %al,(%eax)
inc    %esp
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
sub    %al,(%edx)
add    %al,(%eax)
pusha
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
or     (%eax),%eax
add    %al,(%eax)
and    $0xbb,%al
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
ltr    -0xea00000(%eax,%eax,1)
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
jmp    ac04859a <opterr+0xa3ff93f6>
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
mov    $0x1,%al
add    %al,(%eax)
inc    %eax
icebp
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edi
add    %al,(%eax)
add    %al,0x40804f1(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804863b <strcmp@plt-0x525>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048649 <strcmp@plt-0x517>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048656 <strcmp@plt-0x50a>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048662 <strcmp@plt-0x4fe>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048669 <strcmp@plt-0x4f7>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804867b <strcmp@plt-0x4e5>
outsl  %ds:(%esi),(%dx)
ja     804866d <strcmp@plt-0x4f3>
add    %dh,0x74(%ebx)
jb     804867d <strcmp@plt-0x4e3>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     8048680 <strcmp@plt-0x4e0>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048690 <strcmp@plt-0x4d0>
arpl   %bp,0x72(%eax)
add    %ah,0x67(%ebx,%eiz,2)
gs
je     804869c <strcmp@plt-0x4c4>
gs
js     804869f <strcmp@plt-0x4c1>
add    %ah,0x72(%ebp)
jb     804869f <strcmp@plt-0x4c1>
jb     8048632 <strcmp@plt-0x52e>
pop    %edi
pop    %edi
jae    80486aa <strcmp@plt-0x4b6>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     804865a <strcmp@plt-0x506>
pop    %edi
gs
js     80486c7 <strcmp@plt-0x499>
je     8048660 <strcmp@plt-0x500>
jo     80486d4 <strcmp@plt-0x48c>
outsl  %ds:(%esi),(%dx)
addr16 jb 80486c7 <strcmp@plt-0x499>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     80486e3 <strcmp@plt-0x47d>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    80486fc <strcmp@plt-0x464>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     804868f <strcmp@plt-0x4d1>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    804870c <strcmp@plt-0x454>
jb     8048706 <strcmp@plt-0x45a>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048706 <strcmp@plt-0x45a>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    804870e <strcmp@plt-0x452>
je     80486ab <strcmp@plt-0x4b5>
pop    %edi
pop    %edi
gs
jb     8048722 <strcmp@plt-0x43e>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
data16
jo     8048741 <strcmp@plt-0x41f>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     804873f <strcmp@plt-0x421>
outsl  %ds:(%esi),(%dx)
jne    8048752 <strcmp@plt-0x40e>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804875a <strcmp@plt-0x406>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     804870d <strcmp@plt-0x453>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048790 <strcmp@plt-0x3d0>
outsb  %ds:(%esi),(%dx)
jbe    804872e <strcmp@plt-0x432>
pop    %edi
pop    %edi
data16
jb     8048798 <strcmp@plt-0x3c8>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     80487b1 <strcmp@plt-0x3af>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     80487ba <strcmp@plt-0x3a6>
jo     80487c1 <strcmp@plt-0x39f>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     80487c7 <strcmp@plt-0x399>
je     80487c5 <strcmp@plt-0x39b>
add    %bl,0x5f(%edi)
data16
jo     80487cb <strcmp@plt-0x395>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 80487db <strcmp@plt-0x385>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048800 <strcmp@plt-0x360>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80487fc <strcmp@plt-0x364>
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048804 <strcmp@plt-0x35c>
js     8048815 <strcmp@plt-0x34b>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x636e7973,0x0(%esi),%ebp
add    %ch,0x70(%edi)
je     8048816 <strcmp@plt-0x34a>
jb     8048825 <strcmp@plt-0x33b>
add    %dh,0x74(%ebx)
jb     804881b <strcmp@plt-0x345>
insl   (%dx),%es:(%edi)
jo     80487bb <strcmp@plt-0x3a5>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     804883b <strcmp@plt-0x325>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x74757066,0x0(%esi),%ebp
jae    8048832 <strcmp@plt-0x32e>
jne    8048843 <strcmp@plt-0x31d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048857 <strcmp@plt-0x309>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048862 <strcmp@plt-0x2fe>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048866 <strcmp@plt-0x2fa>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     804886a <strcmp@plt-0x2f6>
js     8048870 <strcmp@plt-0x2f0>
je     8048809 <strcmp@plt-0x357>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048886 <strcmp@plt-0x2da>
popa
jb     8048889 <strcmp@plt-0x2d7>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x6000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000000
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
push   %esp
add    (%eax),%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edi)
add    %bl,0x2(%esi)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    804892d <strcmp@plt-0x233>
imul   $0x60000,(%ecx),%ecx
push   $0x2
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0x50000,%eax
jbe    8048928 <strcmp@plt-0x238>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x280,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
mov    (%edx),%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
xchg   %eax,%esp
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
cld
out    %eax,(%dx)
add    $0x8,%al
push   %es
sbb    (%eax),%al
add    %al,-0xf(%eax)
add    $0x8,%al
add    $0x44000035,%eax
icebp
add    $0x8,%al
add    $0x60000036,%eax
icebp
add    $0x8,%al
add    $0x80000037,%eax
icebp
add    $0x8,%al
add    $0xa000003c,%eax
icebp
add    $0x8,%al
add    $0xa4000034,%eax
icebp
add    $0x8,%al
.byte 0x5
cmp    (%eax),%al
or     $0xf0,%al
add    $0x8,%al
pop    %es
add    %eax,(%eax)
add    %dl,(%eax)
lock add $0x8,%al
pop    %es
add    (%eax),%al
add    %dl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    (%eax),%eax
add    %bl,(%eax)
lock add $0x8,%al
pop    %es
add    $0x0,%al
add    %bl,(%eax,%esi,8)
add    $0x8,%al
pop    %es
add    $0xf0200000,%eax
add    $0x8,%al
pop    %es
push   %es
add    %al,(%eax)
and    $0xf0,%al
add    $0x8,%al
pop    %es
pop    %es
add    %al,(%eax)
sub    %dh,%al
add    $0x8,%al
pop    %es
or     %al,(%eax)
add    %ch,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     %eax,(%eax)
add    %dh,(%eax)
lock add $0x8,%al
pop    %es
or     (%eax),%al
add    %dh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     (%eax),%eax
add    %bh,(%eax)
lock add $0x8,%al
pop    %es
or     $0x0,%al
add    %bh,(%eax,%esi,8)
add    $0x8,%al
pop    %es
or     $0xf0400000,%eax
add    $0x8,%al
pop    %es
push   %cs
add    %al,(%eax)
inc    %esp
lock add $0x8,%al
pop    %es
sldt   (%eax)
dec    %eax
lock add $0x8,%al
pop    %es
adc    %al,(%eax)
add    %cl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    (%eax),%al
add    %dl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,-0x10(%eax)
add    $0x8,%al
pop    %es
adc    $0x0,%al
add    %bl,0x4(%eax,%esi,8)
or     %al,(%edi)
adc    $0xf0600000,%eax
add    $0x8,%al
pop    %es
push   %ss
add    %al,(%eax)
fs
lock add $0x8,%al
pop    %es
pop    %ss
add    %al,(%eax)
push   $0x70804f0
sbb    %al,(%eax)
add    %ch,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    (%eax),%al
add    %dh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,-0x10(%eax)
add    $0x8,%al
pop    %es
sbb    $0x0,%al
add    %bh,0x4(%eax,%esi,8)
or     %al,(%edi)
sbb    $0xf0800000,%eax
add    $0x8,%al
pop    %es
push   %ds
add    %al,(%eax)
test   %dh,%al
add    $0x8,%al
pop    %es
pop    %ds
add    %al,(%eax)
mov    %dh,%al
add    $0x8,%al
pop    %es
and    %al,(%eax)
add    %cl,0x21070804(%eax,%esi,8)
add    %al,(%eax)
nop
lock add $0x8,%al
pop    %es
and    (%eax),%al
add    %dl,0x23070804(%eax,%esi,8)
add    %al,(%eax)
cwtl
lock add $0x8,%al
pop    %es
and    $0x0,%al
add    %bl,0x25070804(%eax,%esi,8)
add    %al,(%eax)
mov    0x70804f0,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
lock add $0x8,%al
pop    %es
daa
add    %al,(%eax)
test   $0xf0,%al
add    $0x8,%al
pop    %es
sub    %al,(%eax)
add    %ch,0x29070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0xf0,%al
add    $0x8,%al
pop    %es
sub    (%eax),%al
add    %dh,0x2b070804(%eax,%esi,8)
add    %al,(%eax)
mov    $0x70804f0,%eax
sub    $0x0,%al
add    %bh,0x2d070804(%eax,%esi,8)
add    %al,(%eax)
(bad)
lock add $0x8,%al
pop    %es
add    %al,%cs:(%eax)
(bad)
lock add $0x8,%al
pop    %es
das
add    %al,(%eax)
enter  $0x4f0,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
lock add $0x8,%al
pop    %es
xor    %eax,(%eax)
add    %dl,%al
lock add $0x8,%al
pop    %es
xor    (%eax),%al
add    %dl,%ah
lock add $0x8,%al
pop    %es
xor    (%eax),%eax
push   %ebx
sub    $0x8,%esp
call   8048fd0 <calloc@plt+0x150>
add    $0x64cb,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048b4a <strcmp@plt-0x16>
call   8048cf0 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x804f004
jmp    *0x804f008
add    %al,(%eax)
jmp    *0x804f00c
push   $0x0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f010
push   $0x8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f014
push   $0x10
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f018
push   $0x18
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f01c
push   $0x20
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f020
push   $0x28
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f024
push   $0x30
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f028
push   $0x38
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f02c
push   $0x40
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f030
push   $0x48
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f034
push   $0x50
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f038
push   $0x58
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f03c
push   $0x60
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f040
push   $0x68
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f044
push   $0x70
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f048
push   $0x78
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f04c
push   $0x80
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f050
push   $0x88
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f054
push   $0x90
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f058
push   $0x98
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f05c
push   $0xa0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f060
push   $0xa8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f064
push   $0xb0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f068
push   $0xb8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f06c
push   $0xc0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f070
push   $0xc8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f074
push   $0xd0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f078
push   $0xd8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f07c
push   $0xe0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f080
push   $0xe8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f084
push   $0xf0
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f088
push   $0xf8
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f08c
push   $0x100
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f090
push   $0x108
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f094
push   $0x110
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f098
push   $0x118
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f09c
push   $0x120
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0a0
push   $0x128
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0a4
push   $0x130
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0a8
push   $0x138
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0ac
push   $0x140
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0b0
push   $0x148
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0b4
push   $0x150
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0b8
push   $0x158
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0bc
push   $0x160
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0c0
push   $0x168
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0c4
push   $0x170
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0c8
push   $0x178
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0cc
push   $0x180
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0d0
push   $0x188
jmp    8048b50 <strcmp@plt-0x10>
jmp    *0x804f0d4
push   $0x190
jmp    8048b50 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x20,%esp
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8049570 <calloc@plt+0x6f0>
movl   $0x804c1dd,0x4(%esp)
movl   $0x6,(%esp)
call   8048de0 <setlocale@plt>
movl   $0x804bd48,0x4(%esp)
movl   $0x804bd3a,(%esp)
call   8048e20 <bindtextdomain@plt>
movl   $0x804bd3a,(%esp)
call   8048c20 <textdomain@plt>
movl   $0x8049340,(%esp)
call   804bac0 <calloc@plt+0x2c40>
mov    0x804f0e8,%eax
movl   $0x0,0x1c(%esp)
movl   $0x804bd5a,0x18(%esp)
movl   $0x80490a0,0x14(%esp)
mov    %eax,0x10(%esp)
movl   $0x804bd3a,0xc(%esp)
movl   $0x804bd67,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   80494b0 <calloc@plt+0x630>
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x804c1dd,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   8048d30 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8048f5d <calloc@plt+0xdd>
movl   $0x1,(%esp)
call   80490a0 <calloc@plt+0x220>
cmp    0x804f180,%esi
jg     8048f76 <calloc@plt+0xf6>
call   8048e70 <sync@plt>
movl   $0x0,(%esp)
call   8048d00 <exit@plt>
movl   $0x5,0x8(%esp)
movl   $0x804bd6c,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048ca0 <error@plt>
jmp    8048f65 <calloc@plt+0xe5>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804bab0
push   $0x804ba40
push   %ecx
push   %esi
push   $0x8048e90
call   8048d60 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x804f143,%eax
sub    $0x804f140,%eax
cmp    $0x6,%eax
ja     8048ff0 <calloc@plt+0x170>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8048fef <calloc@plt+0x16f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804f140,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x804f140,%eax
sub    $0x804f140,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049029 <calloc@plt+0x1a9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049028 <calloc@plt+0x1a8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x804f140,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x804f1a8
jne    804906c <calloc@plt+0x1ec>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8048fe0 <calloc@plt+0x160>
movb   $0x1,0x804f1a8
leave
repz ret
xchg   %ax,%ax
mov    0x804ef10,%eax
test   %eax,%eax
je     8049098 <calloc@plt+0x218>
mov    $0x0,%eax
test   %eax,%eax
je     8049098 <calloc@plt+0x218>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x804ef10,(%esp)
call   *%eax
leave
jmp    8049010 <calloc@plt+0x190>
nop
jmp    8049010 <calloc@plt+0x190>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x804f1b4,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     80490f4 <calloc@plt+0x274>
movl   $0x804bb28,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x804f144,%eax
mov    %eax,(%esp)
call   8048e10 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8048d00 <exit@plt>
movl   $0x804bce1,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804bb50,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804bb88,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804bbb8,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
mov    0x804f1b4,%eax
mov    %eax,(%esp)
call   8049410 <calloc@plt+0x590>
movl   $0x5,0x8(%esp)
movl   $0x804bcf5,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c00 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x804bd0c,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804bd22,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
movl   $0x804bbf0,0xc(%esp)
movl   $0x804bd36,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
mov    0x804f1a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x804bc18,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8048de0 <setlocale@plt>
test   %eax,%eax
je     804928b <calloc@plt+0x40b>
movl   $0x3,0x8(%esp)
movl   $0x804bd44,0x4(%esp)
mov    %eax,(%esp)
call   8048e30 <strncmp@plt>
test   %eax,%eax
jne    80492cf <calloc@plt+0x44f>
mov    0x804f1b4,%eax
mov    %eax,(%esp)
call   8049410 <calloc@plt+0x590>
movl   $0x5,0x8(%esp)
movl   $0x804bca0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c00 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
jmp    80490ec <calloc@plt+0x26c>
mov    0x804f1b4,%eax
mov    %eax,(%esp)
call   8049410 <calloc@plt+0x590>
movl   $0x5,0x8(%esp)
movl   $0x804bc58,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048c00 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
jmp    804928b <calloc@plt+0x40b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x804f1b0
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x804f1ac
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x804f1a0,%eax
mov    %eax,(%esp)
call   804b470 <calloc@plt+0x25f0>
test   %eax,%eax
je     8049369 <calloc@plt+0x4e9>
cmpb   $0x0,0x804f1ac
je     8049380 <calloc@plt+0x500>
call   8048d90 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    8049380 <calloc@plt+0x500>
mov    0x804f144,%eax
mov    %eax,(%esp)
call   804b470 <calloc@plt+0x25f0>
test   %eax,%eax
jne    80493d8 <calloc@plt+0x558>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x804bd88,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %eax,%ebx
mov    0x804f1b0,%eax
test   %eax,%eax
je     80493e5 <calloc@plt+0x565>
mov    %eax,(%esp)
call   804a850 <calloc@plt+0x19d0>
mov    %eax,%esi
call   8048d90 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x804bd94,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048ca0 <error@plt>
mov    0x804f0ec,%eax
mov    %eax,(%esp)
call   8048b90 <_exit@plt>
call   8048d90 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x804bd98,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048ca0 <error@plt>
jmp    80493d8 <calloc@plt+0x558>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804942b <calloc@plt+0x5ab>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     8049420 <calloc@plt+0x5a0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     8049459 <calloc@plt+0x5d9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     8049459 <calloc@plt+0x5d9>
cmp    $0x2f,%cl
je     8049460 <calloc@plt+0x5e0>
test   %bl,%bl
je     8049438 <calloc@plt+0x5b8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    8049442 <calloc@plt+0x5c2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    8049438 <calloc@plt+0x5b8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048d50 <strlen@plt>
cmp    $0x1,%eax
jbe    804948f <calloc@plt+0x60f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     8049498 <calloc@plt+0x618>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    8049485 <calloc@plt+0x605>
nop
jmp    804948f <calloc@plt+0x60f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x804f1a4,%ebx
cmpl   $0x2,0x30(%esp)
movl   $0x0,0x804f1a4
00
je     80494e0 <calloc@plt+0x660>
mov    %ebx,0x804f1a4
movl   $0x0,0x804f180
00
add    $0x28,%esp
pop    %ebx
ret
mov    0x34(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x804bdc0,0xc(%esp)
movl   $0x804bd9b,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x2,(%esp)
call   8048d30 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     80494cb <calloc@plt+0x64b>
cmp    $0x68,%eax
je     8049558 <calloc@plt+0x6d8>
cmp    $0x76,%eax
jne    80494cb <calloc@plt+0x64b>
lea    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x40(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x804f1a0,%eax
mov    %eax,(%esp)
call   804b060 <calloc@plt+0x21e0>
movl   $0x0,(%esp)
call   8048d00 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,(%esp)
call   *0x44(%esp)
jmp    804951b <calloc@plt+0x69b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     80495f3 <calloc@plt+0x773>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8048df0 <strrchr@plt>
test   %eax,%eax
je     80495df <calloc@plt+0x75f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    80495df <calloc@plt+0x75f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x804be28,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80495df <calloc@plt+0x75f>
mov    $0x3,%ecx
mov    $0x804be30,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    80495df <calloc@plt+0x75f>
lea    0x4(%eax),%ebx
mov    %ebx,0x804f140
mov    %ebx,0x804f1b4
mov    %ebx,0x804f160
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x804f144,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804bdf0,(%esp)
mov    %eax,0xc(%esp)
call   8048c40 <fwrite@plt>
call   8048e40 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     8049641 <calloc@plt+0x7c1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8048e40 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     8049680 <calloc@plt+0x800>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804b4f0 <calloc@plt+0x2670>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    80496e8 <calloc@plt+0x868>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    80496d0 <calloc@plt+0x850>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x2d,0x3(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x38,0x4(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x0,0x5(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x60,(%esi)
mov    $0x804be43,%eax
mov    $0x804be34,%edx
cmovne %edx,%eax
jmp    8049678 <calloc@plt+0x7f8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x804be3d,%eax
cmp    $0x7,%edi
mov    $0x804be3b,%edx
cmovne %edx,%eax
jmp    8049678 <calloc@plt+0x7f8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    80496d0 <calloc@plt+0x850>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x31,0x2(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x38,0x3(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x30,0x4(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x33,0x5(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x30,0x6(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x0,0x7(%eax)
jne    80496d0 <calloc@plt+0x850>
cmpb   $0x60,(%esi)
mov    $0x804be3f,%eax
mov    $0x804be38,%edx
cmovne %edx,%eax
jmp    8049678 <calloc@plt+0x7f8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048c50 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804a018 <calloc@plt+0x1198>
mov    0x94(%esp),%eax
jmp    *0x804be80(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     8049e20 <calloc@plt+0xfa0>
test   %al,%al
je     8049e33 <calloc@plt+0xfb3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     8049e08 <calloc@plt+0xf88>
cmpb   $0x0,0x58(%esp)
je     8049e08 <calloc@plt+0xf88>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     8049e08 <calloc@plt+0xf88>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048bf0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    8049ea0 <calloc@plt+0x1020>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     8049bb8 <calloc@plt+0xd38>
movzbl %bl,%eax
jmp    *0x804bea4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     80499f8 <calloc@plt+0xb78>
cmpl   $0x3,0x94(%esp)
jne    8049958 <calloc@plt+0xad8>
testb  $0x4,0x98(%esp)
je     8049958 <calloc@plt+0xad8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8049958 <calloc@plt+0xad8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8049958 <calloc@plt+0xad8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8049958 <calloc@plt+0xad8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8049958 <calloc@plt+0xad8>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmp    %edi,%ebp
jae    804991e <calloc@plt+0xa9e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804992e <calloc@plt+0xaae>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804993e <calloc@plt+0xabe>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804994e <calloc@plt+0xace>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8049966 <calloc@plt+0xae6>
cmpb   $0x0,0x5a(%esp)
jne    804998b <calloc@plt+0xb0b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804998b <calloc@plt+0xb0b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8049992 <calloc@plt+0xb12>
cmpb   $0x0,0x24(%esp)
je     80499a8 <calloc@plt+0xb28>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmp    %edi,%ebp
jae    80499a5 <calloc@plt+0xb25>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    80499b6 <calloc@plt+0xb36>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    80497f8 <calloc@plt+0x978>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804a008 <calloc@plt+0x1188>
test   %al,%al
jne    8049958 <calloc@plt+0xad8>
test   %esi,%esi
jne    8049958 <calloc@plt+0xad8>
cmpl   $0x2,0x94(%esp)
jne    8049958 <calloc@plt+0xad8>
nop
cmpb   $0x0,0x2f(%esp)
je     8049958 <calloc@plt+0xad8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049740 <calloc@plt+0x8c0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804a132 <calloc@plt+0x12b2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804a07b <calloc@plt+0x11fb>
cmpb   $0x0,0x58(%esp)
je     8049958 <calloc@plt+0xad8>
mov    %eax,%ebx
jmp    8049992 <calloc@plt+0xb12>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8049a83 <calloc@plt+0xc03>
nop
mov    $0x66,%eax
jmp    8049a83 <calloc@plt+0xc03>
nop
mov    $0x76,%eax
jmp    8049a83 <calloc@plt+0xc03>
nop
mov    $0x6e,%eax
jmp    8049a75 <calloc@plt+0xbf5>
nop
mov    $0x74,%eax
jmp    8049a75 <calloc@plt+0xbf5>
nop
cmpb   $0x0,0x58(%esp)
je     8049ff0 <calloc@plt+0x1170>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmp    %edi,%ebp
jae    8049ae2 <calloc@plt+0xc62>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8049b28 <calloc@plt+0xca8>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8049b28 <calloc@plt+0xca8>
cmp    %eax,%edi
ja     804a090 <calloc@plt+0x1210>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049b1e <calloc@plt+0xc9e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8049966 <calloc@plt+0xae6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8049a83 <calloc@plt+0xc03>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     8049b5e <calloc@plt+0xcde>
cmpb   $0x0,0x2f(%esp)
je     8049b5e <calloc@plt+0xcde>
test   %dl,%dl
jne    80499a8 <calloc@plt+0xb28>
mov    %ebx,%eax
jmp    8049a75 <calloc@plt+0xbf5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8049958 <calloc@plt+0xad8>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmp    %edi,%ebp
jae    8049b8d <calloc@plt+0xd0d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    8049b9d <calloc@plt+0xd1d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    8049bad <calloc@plt+0xd2d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8049958 <calloc@plt+0xad8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    8049eb0 <calloc@plt+0x1030>
call   8048e60 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8049958 <calloc@plt+0xad8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    8049c64 <calloc@plt+0xde4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmp    %edi,%ebp
jae    8049c13 <calloc@plt+0xd93>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    8049c26 <calloc@plt+0xda6>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    8049c3c <calloc@plt+0xdbc>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    80499ab <calloc@plt+0xb2b>
cmp    %edi,%ebp
jae    8049c59 <calloc@plt+0xdd9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    8049c00 <calloc@plt+0xd80>
cmpb   $0x0,0x24(%esp)
je     8049c45 <calloc@plt+0xdc5>
cmp    %edi,%ebp
jae    8049c77 <calloc@plt+0xdf7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    8049c45 <calloc@plt+0xdc5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a137 <calloc@plt+0x12b7>
test   %edi,%edi
je     804a03d <calloc@plt+0x11bd>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804be3d,0x3c(%esp)
movb   $0x22,(%eax)
jmp    80497d8 <calloc@plt+0x958>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804be3d,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    80497d8 <calloc@plt+0x958>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    80497d8 <calloc@plt+0x958>
lea    0x0(%esi,%eiz,1),%esi
je     8049d4c <calloc@plt+0xecc>
mov    0x94(%esp),%edx
mov    $0x804be47,%eax
call   8049650 <calloc@plt+0x7d0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x804be3b,%eax
call   8049650 <calloc@plt+0x7d0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    8049d7a <calloc@plt+0xefa>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8049d7a <calloc@plt+0xefa>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    8049d6f <calloc@plt+0xeef>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8049d68 <calloc@plt+0xee8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8048d50 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    80497d8 <calloc@plt+0x958>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804be3b,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    80497d8 <calloc@plt+0x958>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804a153 <calloc@plt+0x12d3>
test   %edi,%edi
je     804a05c <calloc@plt+0x11dc>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x804be3b,0x3c(%esp)
movb   $0x27,(%eax)
jmp    80497d8 <calloc@plt+0x958>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8049890 <calloc@plt+0xa10>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8049818 <calloc@plt+0x998>
test   %ebp,%ebp
jne    8049e4c <calloc@plt+0xfcc>
cmpl   $0x2,0x94(%esp)
jne    8049e4c <calloc@plt+0xfcc>
cmpb   $0x0,0x2f(%esp)
jne    8049a08 <calloc@plt+0xb88>
cmpb   $0x0,0x2f(%esp)
jne    8049e82 <calloc@plt+0x1002>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8049e82 <calloc@plt+0x1002>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8049e82 <calloc@plt+0x1002>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    8049e77 <calloc@plt+0xff7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8049e70 <calloc@plt+0xff0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8049a52 <calloc@plt+0xbd2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8049a52 <calloc@plt+0xbd2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8049890 <calloc@plt+0xa10>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804a01d <calloc@plt+0x119d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048c80 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804a09d <calloc@plt+0x121d>
cmp    $0xffffffff,%eax
je     804a0b8 <calloc@plt+0x1238>
cmp    $0xfffffffe,%eax
je     804a0d3 <calloc@plt+0x1253>
cmpb   $0x0,0x2f(%esp)
je     8049f7f <calloc@plt+0x10ff>
cmpl   $0x2,0x94(%esp)
jne    8049f7f <calloc@plt+0x10ff>
cmp    $0x1,%eax
je     8049f7f <calloc@plt+0x10ff>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     8049f78 <calloc@plt+0x10f8>
movzbl %al,%eax
jmp    *0x804c0a0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    8049f60 <calloc@plt+0x10e0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048c30 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048bc0 <mbsinit@plt>
test   %eax,%eax
je     8049ef1 <calloc@plt+0x1071>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    8049be3 <calloc@plt+0xd63>
and    0x58(%esp),%dl
jmp    8049bed <calloc@plt+0xd6d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8049a08 <calloc@plt+0xb88>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8049958 <calloc@plt+0xad8>
add    $0x1,%esi
jmp    80497f8 <calloc@plt+0x978>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    80499d9 <calloc@plt+0xb59>
call   8048e40 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8048d50 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    8049ece <calloc@plt+0x104e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804be3d,0x3c(%esp)
jmp    80497d8 <calloc@plt+0x958>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804be3b,0x3c(%esp)
jmp    80497d8 <calloc@plt+0x958>
cmpb   $0x0,0x2f(%esp)
je     8049a83 <calloc@plt+0xc03>
jmp    8049a08 <calloc@plt+0xb88>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    8049b0e <calloc@plt+0xc8e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8049fc5 <calloc@plt+0x1145>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8049fc5 <calloc@plt+0x1145>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804a128 <calloc@plt+0x12a8>
cmpb   $0x0,(%eax)
je     804a128 <calloc@plt+0x12a8>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804a116 <calloc@plt+0x1296>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804a120 <calloc@plt+0x12a0>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804a110 <calloc@plt+0x1290>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    8049fc5 <calloc@plt+0x1145>
call   8048c10 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804be3d,0x3c(%esp)
jmp    80497d8 <calloc@plt+0x958>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x804be3b,0x3c(%esp)
jmp    80497d8 <calloc@plt+0x958>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8048d90 <__errno_location@plt>
test   %edi,%edi
mov    0x804f130,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804a2fc <calloc@plt+0x147c>
cmp    0x804f13c,%edi
jb     804a208 <calloc@plt+0x1388>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804a301 <calloc@plt+0x1481>
cmp    $0x804f134,%esi
lea    0x0(,%ebp,8),%eax
je     804a2d0 <calloc@plt+0x1450>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804b220 <calloc@plt+0x23a0>
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f13c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8048d70 <memset@plt>
mov    %ebp,0x804f13c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049740 <calloc@plt+0x8c0>
cmp    %eax,%ebp
ja     804a2b7 <calloc@plt+0x1437>
lea    0x1(%eax),%ebp
cmp    $0x804f1c0,%esi
mov    %ebp,(%edi)
je     804a272 <calloc@plt+0x13f2>
mov    %esi,(%esp)
call   8048ba0 <free@plt>
mov    %ebp,(%esp)
call   804b1b0 <calloc@plt+0x2330>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8049740 <calloc@plt+0x8c0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804b220 <calloc@plt+0x23a0>
mov    0x804f138,%edx
mov    %eax,%esi
mov    %eax,0x804f130
mov    0x804f134,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804a1df <calloc@plt+0x135f>
call   8048e40 <abort@plt>
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8048d90 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x804f2c0,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804b3c0 <calloc@plt+0x2540>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804a370 <calloc@plt+0x14f0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x804f2c0,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x804f2c0,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x804f2c0,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804a423 <calloc@plt+0x15a3>
test   %ecx,%ecx
je     804a423 <calloc@plt+0x15a3>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8048e40 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x804f2c0,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048d90 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8049740 <calloc@plt+0x8c0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x804f2c0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8048d90 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   8049740 <calloc@plt+0x8c0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804b1b0 <calloc@plt+0x2330>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   8049740 <calloc@plt+0x8c0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804a558 <calloc@plt+0x16d8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a490 <calloc@plt+0x1610>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x804f13c,%edi
mov    0x804f130,%esi
cmp    $0x1,%edi
jbe    804a5d3 <calloc@plt+0x1753>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048ba0 <free@plt>
cmp    %edi,%ebx
jne    804a5c0 <calloc@plt+0x1740>
mov    0x4(%esi),%eax
cmp    $0x804f1c0,%eax
je     804a5f9 <calloc@plt+0x1779>
mov    %eax,(%esp)
call   8048ba0 <free@plt>
movl   $0x100,0x804f134
00
movl   $0x804f1c0,0x804f138
08
cmp    $0x804f134,%esi
je     804a613 <calloc@plt+0x1793>
mov    %esi,(%esp)
call   8048ba0 <free@plt>
movl   $0x804f134,0x804f130
08
movl   $0x1,0x804f13c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f2c0,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f2c0,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f2c0,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f2c0,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049620 <calloc@plt+0x7a0>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a170 <calloc@plt+0x12f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8049620 <calloc@plt+0x7a0>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a170 <calloc@plt+0x12f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804a6b0 <calloc@plt+0x1830>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804a6e0 <calloc@plt+0x1860>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x804f2c0,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x804f2c4,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x804f2c8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2d0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2d4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2d8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2dc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2e0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2e4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2e8,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804a170 <calloc@plt+0x12f0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a770 <calloc@plt+0x18f0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804a770 <calloc@plt+0x18f0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804a770 <calloc@plt+0x18f0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x804f2c0,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x804f2c4,%eax
mov    %eax,0x14(%esp)
mov    0x804f2c8,%eax
mov    %eax,0x18(%esp)
mov    0x804f2cc,%eax
mov    %eax,0x1c(%esp)
mov    0x804f2d0,%eax
mov    %eax,0x20(%esp)
mov    0x804f2d4,%eax
mov    %eax,0x24(%esp)
mov    0x804f2d8,%eax
mov    %eax,0x28(%esp)
mov    0x804f2dc,%eax
mov    %eax,0x2c(%esp)
mov    0x804f2e0,%eax
mov    %eax,0x30(%esp)
mov    0x804f2e4,%eax
mov    %eax,0x34(%esp)
mov    0x804f2e8,%eax
mov    %eax,0x38(%esp)
mov    0x804f2ec,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804a3f0 <calloc@plt+0x1570>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804a170 <calloc@plt+0x12f0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804a8b0 <calloc@plt+0x1a30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804a8b0 <calloc@plt+0x1a30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804a8b0 <calloc@plt+0x1a30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x804f100,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x804f100,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x804f100,0x4(%esp)
jmp    804a170 <calloc@plt+0x12f0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804af58 <calloc@plt+0x20d8>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x804c184,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c197,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x804c420,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048e10 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804c1f4,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804af80 <calloc@plt+0x2100>
jmp    *0x804c3f8(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c358,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048c00 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8048e10 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c388,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048c00 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8048e10 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8048e40 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c19b,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e10 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c1ab,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e10 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c1c2,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048e10 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c2c0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048c00 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
jmp    804abff <calloc@plt+0x1d7f>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c2e0,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048c00 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
jmp    804abff <calloc@plt+0x1d7f>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c304,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c00 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
jmp    804abff <calloc@plt+0x1d7f>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c32c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048c00 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
jmp    804abff <calloc@plt+0x1d7f>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x804c190,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e10 <__fprintf_chk@plt>
jmp    804aaf1 <calloc@plt+0x1c71>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x804c3bc,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048c00 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804ac8a <calloc@plt+0x1e0a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804b02a <calloc@plt+0x21aa>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804b020 <calloc@plt+0x21a0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804aaa0 <calloc@plt+0x1c20>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804b082 <calloc@plt+0x2202>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804b070 <calloc@plt+0x21f0>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804aaa0 <calloc@plt+0x1c20>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804b060 <calloc@plt+0x21e0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x804c1de,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
movl   $0x804bd0c,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804bd22,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
movl   $0x804bbf0,0xc(%esp)
movl   $0x804bd36,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048db0 <__printf_chk@plt>
mov    0x804f1a0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804bc18,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048d20 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048cd0 <malloc@plt>
test   %eax,%eax
je     804b1c9 <calloc@plt+0x2349>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804b1c4 <calloc@plt+0x2344>
lea    0x0(%esi),%esi
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804b209 <calloc@plt+0x2389>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b1b0 <calloc@plt+0x2330>
call   804b420 <calloc@plt+0x25a0>
xchg   %ax,%ax
jmp    804b1b0 <calloc@plt+0x2330>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804b248 <calloc@plt+0x23c8>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048cc0 <realloc@plt>
test   %eax,%eax
je     804b25b <calloc@plt+0x23db>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804b230 <calloc@plt+0x23b0>
mov    %eax,(%esp)
call   8048ba0 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804b240 <calloc@plt+0x23c0>
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804b2a3 <calloc@plt+0x2423>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804b220 <calloc@plt+0x23a0>
call   804b420 <calloc@plt+0x25a0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804b2f0 <calloc@plt+0x2470>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804b308 <calloc@plt+0x2488>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804b220 <calloc@plt+0x23a0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804b2d9 <calloc@plt+0x2459>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804b2d9 <calloc@plt+0x2459>
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804b348 <calloc@plt+0x24c8>
cmp    $0xaaaaaaa9,%eax
ja     804b354 <calloc@plt+0x24d4>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804b220 <calloc@plt+0x23a0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804b330 <calloc@plt+0x24b0>
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804b1b0 <calloc@plt+0x2330>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048d70 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048e80 <calloc@plt>
test   %eax,%eax
je     804b3af <calloc@plt+0x252f>
add    $0x1c,%esp
ret
nop
call   804b420 <calloc@plt+0x25a0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804b1b0 <calloc@plt+0x2330>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048bb0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048d50 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804b3c0 <calloc@plt+0x2540>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x804c44f,0x4(%esp)
movl   $0x0,(%esp)
call   8048c00 <dcgettext@plt>
mov    0x804f0ec,%edx
movl   $0x804bd98,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048ca0 <error@plt>
call   8048e40 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048c70 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   804b8b0 <calloc@plt+0x2a30>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804b4b0 <calloc@plt+0x2630>
test   %dl,%dl
je     804b4a7 <calloc@plt+0x2627>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804b4d0 <calloc@plt+0x2650>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804b4a7 <calloc@plt+0x2627>
call   8048d90 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8048d90 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8048dd0 <nl_langinfo@plt>
mov    0x804f2f0,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x804c1dd,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804b5bc <calloc@plt+0x273c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804b587 <calloc@plt+0x2707>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804b560 <calloc@plt+0x26e0>
nop
mov    %ebp,(%esp)
call   8048d50 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8048d50 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804b5b8 <calloc@plt+0x2738>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048b60 <strcmp@plt>
test   %eax,%eax
je     804b57b <calloc@plt+0x26fb>
cmp    $0x2a,%bl
jne    804b540 <calloc@plt+0x26c0>
cmpb   $0x0,0x1(%ebp)
jne    804b540 <calloc@plt+0x26c0>
mov    %ebp,(%esp)
call   8048d50 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x804c469,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804b87d <calloc@plt+0x29fd>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804b587 <calloc@plt+0x2707>
movl   $0x804c46f,(%esp)
call   8048cb0 <getenv@plt>
test   %eax,%eax
je     804b5d5 <calloc@plt+0x2755>
cmpb   $0x0,(%eax)
jne    804b7e3 <calloc@plt+0x2963>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x804c460,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804b7d4 <calloc@plt+0x2954>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8048cd0 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804b873 <calloc@plt+0x29f3>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048bb0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804b63c <calloc@plt+0x27bc>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048b70 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804b7b8 <calloc@plt+0x2938>
movl   $0x804bd92,0x4(%esp)
mov    %eax,(%esp)
call   8048d10 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804b7b0 <calloc@plt+0x2930>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804b796 <calloc@plt+0x2916>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804b6a0 <calloc@plt+0x2820>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804b6a0 <calloc@plt+0x2820>
cmp    $0x23,%eax
je     804b80d <calloc@plt+0x298d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8048d80 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804c47f,0x4(%esp)
mov    %esi,(%esp)
call   8048d40 <fscanf@plt>
cmp    $0x1,%eax
jle    804b830 <calloc@plt+0x29b0>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8048d50 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8048d50 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804b84e <calloc@plt+0x29ce>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8048cd0 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804b882 <calloc@plt+0x2a02>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048c60 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048c60 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804b6ac <calloc@plt+0x282c>
mov    %esi,(%esp)
call   8048dc0 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804b830 <calloc@plt+0x29b0>
jmp    804b6b5 <calloc@plt+0x2835>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048e50 <close@plt>
mov    $0x804c1dd,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048ba0 <free@plt>
mov    %ebp,0x804f2f0
jmp    804b52f <calloc@plt+0x26af>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804b5fb <calloc@plt+0x277b>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8048d50 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804b7d4 <calloc@plt+0x2954>
lea    -0x1(%eax),%eax
jmp    804b5e4 <calloc@plt+0x2764>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804b827 <calloc@plt+0x29a7>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804b89c <calloc@plt+0x2a1c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804b808 <calloc@plt+0x2988>
cmp    $0xffffffff,%eax
jne    804b6a0 <calloc@plt+0x2820>
mov    %esi,(%esp)
call   804b8b0 <calloc@plt+0x2a30>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804b7b8 <calloc@plt+0x2938>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804b7bd <calloc@plt+0x293d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048cc0 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804b74c <calloc@plt+0x28cc>
mov    $0x804c1dd,%ebp
jmp    804b7c9 <calloc@plt+0x2949>
call   8048c10 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x804c1dd,%ebp
call   8048ba0 <free@plt>
mov    %esi,(%esp)
call   804b8b0 <calloc@plt+0x2a30>
jmp    804b7bd <calloc@plt+0x293d>
mov    %esi,(%esp)
call   8048dc0 <__uflow@plt>
jmp    804b822 <calloc@plt+0x29a2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048da0 <fileno@plt>
test   %eax,%eax
js     804b938 <calloc@plt+0x2ab8>
mov    %ebx,(%esp)
call   8048ce0 <__freading@plt>
test   %eax,%eax
jne    804b908 <calloc@plt+0x2a88>
mov    %ebx,(%esp)
call   804b950 <calloc@plt+0x2ad0>
test   %eax,%eax
je     804b938 <calloc@plt+0x2ab8>
call   8048d90 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048bd0 <fclose@plt>
test   %edi,%edi
je     804b8fa <calloc@plt+0x2a7a>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8048da0 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8048e00 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    804b8d2 <calloc@plt+0x2a52>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048bd0 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804b968 <calloc@plt+0x2ae8>
mov    %ebx,(%esp)
call   8048ce0 <__freading@plt>
test   %eax,%eax
jne    804b978 <calloc@plt+0x2af8>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048b80 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804b968 <calloc@plt+0x2ae8>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804b9b0 <calloc@plt+0x2b30>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048b80 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804b9f0 <calloc@plt+0x2b70>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048be0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804b9cf <calloc@plt+0x2b4f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804b9cf <calloc@plt+0x2b4f>
mov    %ebx,(%esp)
call   8048da0 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8048e00 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804ba37 <calloc@plt+0x2bb7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804ba2f <calloc@plt+0x2baf>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8048fd0 <calloc@plt+0x150>
add    $0x35b5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048b2c <strcmp@plt-0x34>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804ba99 <calloc@plt+0x2c19>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804ba78 <calloc@plt+0x2bf8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804bab0 <calloc@plt+0x2c30>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8048fd0 <calloc@plt+0x150>
add    $0x353a,%ebx
sub    $0x18,%esp
lea    0xe4(%ebx),%eax
test   %eax,%eax
je     804baf8 <calloc@plt+0x2c78>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048c90 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    804badb <calloc@plt+0x2c5b>
push   %ebx
sub    $0x8,%esp
call   8048fd0 <calloc@plt+0x150>
add    $0x34fb,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     804bba4 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     804bb5c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804bba5 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804bbb4 <_IO_stdin_used+0x90>
popa
je     804bbb3 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %al,0x6f(%esi)
jb     804bbb7 <_IO_stdin_used+0x93>
and    %ah,%gs:0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
gs and %ah,%fs:%gs:0x6c(%bp,%si)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
and    %dh,0x20(%edi,%ebp,2)
imul   $0x7075202c,%fs:0x6b(%ebx),%esi
fs
popa
je     804bbd9 <_IO_stdin_used+0xb5>
and    %dh,0x65(%eax,%ebp,2)
and    %dh,0x75(%ebx)
jo     804bbe2 <_IO_stdin_used+0xbe>
jb     804bb9f <_IO_stdin_used+0x7b>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0xa,(%esi),%ebp
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     804bbb5 <_IO_stdin_used+0x91>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     804bc0b <_IO_stdin_used+0xe7>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    804bc2e <_IO_stdin_used+0x10a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    804bc40 <_IO_stdin_used+0x11c>
jo     804bc43 <_IO_stdin_used+0x11f>
je     804bbf0 <_IO_stdin_used+0xcc>
jbe    804bc37 <_IO_stdin_used+0x113>
jb     804bc47 <_IO_stdin_used+0x123>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     804bc4b <_IO_stdin_used+0x127>
popa
je     804bc4a <_IO_stdin_used+0x126>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x74680000,0x0(%edx,%ecx,1),%esi
je     804bc64 <_IO_stdin_used+0x140>
cmp    (%edi),%ch
das
ja     804bc70 <_IO_stdin_used+0x14c>
ja     804bc29 <_IO_stdin_used+0x105>
outsb  %ds:(%si),(%dx)
jne    804bc2d <_IO_stdin_used+0x109>
outsl  %ds:(%esi),(%dx)
jb     804bc69 <_IO_stdin_used+0x145>
das
jae    804bc74 <_IO_stdin_used+0x150>
data16
je     804bc7f <_IO_stdin_used+0x15b>
popa
jb     804bc70 <_IO_stdin_used+0x14c>
das
arpl   %bp,0x72(%edi)
gs
jne    804bc86 <_IO_stdin_used+0x162>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     804bc7f <_IO_stdin_used+0x15b>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804bc45 <_IO_stdin_used+0x121>
jne    804bc9a <_IO_stdin_used+0x176>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     804bcab <_IO_stdin_used+0x187>
popa
jb     804bc9c <_IO_stdin_used+0x178>
cmp    (%eax),%ah
cmp    $0x68,%al
je     804bcb1 <_IO_stdin_used+0x18d>
jo     804bc79 <_IO_stdin_used+0x155>
das
das
ja     804bcba <_IO_stdin_used+0x196>
ja     804bc73 <_IO_stdin_used+0x14f>
outsb  %ds:(%si),(%dx)
jne    804bc77 <_IO_stdin_used+0x153>
outsl  %ds:(%esi),(%dx)
jb     804bcb3 <_IO_stdin_used+0x18f>
das
addr16
gs
je     804bcb9 <_IO_stdin_used+0x195>
gs
insb   (%dx),%es:(%edi)
jo     804bc84 <_IO_stdin_used+0x160>
or     %ds:(%eax),%al
push   %edx
gs
jo     804bccb <_IO_stdin_used+0x1a7>
jb     804bcd2 <_IO_stdin_used+0x1ae>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    804bcd4 <_IO_stdin_used+0x1b0>
popa
je     804bcd4 <_IO_stdin_used+0x1b0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 804bc93 <_IO_stdin_used+0x16f>
je     804bce4 <_IO_stdin_used+0x1c0>
and    %bh,(%eax,%ebp,2)
je     804bcee <_IO_stdin_used+0x1ca>
jo     804bcb6 <_IO_stdin_used+0x192>
das
das
je     804bcf2 <_IO_stdin_used+0x1ce>
popa
outsb  %ds:(%esi),(%dx)
jae    804bcf0 <_IO_stdin_used+0x1cc>
popa
je     804bcf0 <_IO_stdin_used+0x1cc>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     804bcfd <_IO_stdin_used+0x1d9>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     804bcfb <_IO_stdin_used+0x1d7>
das
je     804bcfc <_IO_stdin_used+0x1d8>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     804bcc4 <_IO_stdin_used+0x1a0>
arpl   %bp,0x6d(%edi)
jo     804bd15 <_IO_stdin_used+0x1f1>
gs
je     804bd11 <_IO_stdin_used+0x1ed>
and    %ah,0x63(%edi,%ebp,2)
jne    804bd1f <_IO_stdin_used+0x1fb>
outsb  %gs:(%esi),(%dx)
je     804bd17 <_IO_stdin_used+0x1f3>
je     804bd21 <_IO_stdin_used+0x1fd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     804bd33 <_IO_stdin_used+0x20f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     804bd2f <_IO_stdin_used+0x20b>
jne    804bd40 <_IO_stdin_used+0x21c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x55000a27,0x6e(%edi),%ebp
jae    804bd45 <_IO_stdin_used+0x221>
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
or     (%eax),%al
or     0x65(%edx),%dl
jo     804bd69 <_IO_stdin_used+0x245>
jb     804bd70 <_IO_stdin_used+0x24c>
and    %ah,0x75622073
addr16 jae 804bd25 <_IO_stdin_used+0x201>
je     804bd76 <_IO_stdin_used+0x252>
and    %ah,0x62000a73
jne    804bd76 <_IO_stdin_used+0x252>
sub    $0x65726f63,%eax
jne    804bd8a <_IO_stdin_used+0x266>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     804bd88 <_IO_stdin_used+0x264>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    804bd72 <_IO_stdin_used+0x24e>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     804bda3 <_IO_stdin_used+0x27f>
jne    804bdb4 <_IO_stdin_used+0x290>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    804bdbe <_IO_stdin_used+0x29a>
jb     804bd7c <_IO_stdin_used+0x258>
jae    804bdb7 <_IO_stdin_used+0x293>
popa
jb     804bdb7 <_IO_stdin_used+0x293>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %cl,%gs:0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x65(%ebp)
jns    804bdc7 <_IO_stdin_used+0x2a3>
jb     804bdcd <_IO_stdin_used+0x2a9>
outsb  %ds:(%esi),(%dx)
add    %dh,0x79(%bp,%di)
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
imul   $0x6e69726f,0x6e(%edi),%esp
and    %ah,0x6c(%bx,%di)
insb   (%dx),%es:(%edi)
and    %ah,0x72(%ecx)
addr16 jne 804bdeb <_IO_stdin_used+0x2c7>
outsb  %gs:(%esi),(%dx)
je     804bdf5 <_IO_stdin_used+0x2d1>
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %dh,0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     804bd94 <_IO_stdin_used+0x270>
and    $0x25203a73,%eax
jae    804bd9b <_IO_stdin_used+0x277>
sub    (%eax),%eax
push   $0x706c65
jbe    804be09 <_IO_stdin_used+0x2e5>
jb     804be19 <_IO_stdin_used+0x2f5>
imul   $0x0,0x6e(%edi),%ebp
add    %al,(%eax)
add    %bl,0x804bd(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
mov    %al,0x804bd
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 804be57 <_IO_stdin_used+0x333>
xor    %bl,0x20(%ebp)
ja     804be62 <_IO_stdin_used+0x33e>
jae    804be23 <_IO_stdin_used+0x2ff>
jo     804be66 <_IO_stdin_used+0x342>
jae    804be7a <_IO_stdin_used+0x356>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    804be77 <_IO_stdin_used+0x353>
push   $0x206e6120
gs
js     804be7d <_IO_stdin_used+0x359>
arpl   %sp,(%eax)
jae    804be95 <_IO_stdin_used+0x371>
jae    804be92 <_IO_stdin_used+0x36e>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     804beb2 <_IO_stdin_used+0x38e>
jb     804beb0 <_IO_stdin_used+0x38c>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    804bed6 <_IO_stdin_used+0x3b2>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    804becc <_IO_stdin_used+0x3a8>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
mov    $0x98080497,%eax
popf
add    $0x8,%al
enter  $0x49d,$0x8
mov    %bl,0x49cc808(%esp,%eax,1)
or     %bh,%al
pushf
add    $0x8,%al
and    %bl,-0x62dff7fc(%ebp)
add    $0x8,%al
and    %bl,-0x653ff7fc(%ebp)
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
cmp    %bl,-0x6567f7fc(%ebx)
add    $0x8,%al
mov    $0xb008049a,%eax
lcall  $0x804,$0x9aa80804
mov    0x7008049a,%al
lcall  $0x804,$0x9bb80804
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xb808049b,%eax
fwait
add    $0x8,%al
mov    $0xe908049b,%eax
cltd
add    $0x8,%al
jmp    f10cc3c6 <opterr+0xe907d222>
cltd
add    $0x8,%al
loope  804becb <_IO_stdin_used+0x3a7>
add    $0x8,%al
jmp    600cc3d2 <opterr+0x5807d22e>
cltd
add    $0x8,%al
jmp    700cc3da <opterr+0x6807d236>
fwait
add    $0x8,%al
jmp    f10cc3e2 <opterr+0xe907d23e>
cltd
add    $0x8,%al
jmp    600cc3ea <opterr+0x5807d246>
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
jmp    f10cc42e <opterr+0xe907d28a>
cltd
add    $0x8,%al
jmp    f10cc436 <opterr+0xe907d292>
cltd
add    $0x8,%al
test   $0x98,%al
add    $0x8,%al
mov    $0x5808049b,%eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
jmp    500cc4ae <opterr+0x4807d30a>
fwait
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
jmp    600cc4ba <opterr+0x5807d316>
cltd
add    $0x8,%al
jmp    600cc4c2 <opterr+0x5807d31e>
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
pop    %eax
cltd
add    $0x8,%al
rcrb   $0x4,-0x6616f7fc(%ecx)
or     %al,%al
cltd
add    $0x8,%al
loope  804c037 <_IO_stdin_used+0x513>
add    $0x8,%al
loopne 804c041 <_IO_stdin_used+0x51d>
add    $0x8,%al
loopne 804c045 <_IO_stdin_used+0x521>
add    $0x8,%al
js     804c049 <_IO_stdin_used+0x525>
add    $0x8,%al
loopne 804c04d <_IO_stdin_used+0x529>
add    $0x8,%al
js     804c051 <_IO_stdin_used+0x52d>
add    $0x8,%al
loopne 804c055 <_IO_stdin_used+0x531>
add    $0x8,%al
js     804c059 <_IO_stdin_used+0x535>
add    $0x8,%al
js     804c05d <_IO_stdin_used+0x539>
add    $0x8,%al
js     804c061 <_IO_stdin_used+0x53d>
add    $0x8,%al
js     804c065 <_IO_stdin_used+0x541>
add    $0x8,%al
js     804c069 <_IO_stdin_used+0x545>
add    $0x8,%al
js     804c06d <_IO_stdin_used+0x549>
add    $0x8,%al
js     804c071 <_IO_stdin_used+0x54d>
add    $0x8,%al
js     804c075 <_IO_stdin_used+0x551>
add    $0x8,%al
js     804c079 <_IO_stdin_used+0x555>
add    $0x8,%al
js     804c07d <_IO_stdin_used+0x559>
add    $0x8,%al
js     804c081 <_IO_stdin_used+0x55d>
add    $0x8,%al
js     804c085 <_IO_stdin_used+0x561>
add    $0x8,%al
js     804c089 <_IO_stdin_used+0x565>
add    $0x8,%al
js     804c08d <_IO_stdin_used+0x569>
add    $0x8,%al
js     804c091 <_IO_stdin_used+0x56d>
add    $0x8,%al
js     804c095 <_IO_stdin_used+0x571>
add    $0x8,%al
js     804c099 <_IO_stdin_used+0x575>
add    $0x8,%al
js     804c09d <_IO_stdin_used+0x579>
add    $0x8,%al
js     804c0a1 <_IO_stdin_used+0x57d>
add    $0x8,%al
js     804c0a5 <_IO_stdin_used+0x581>
add    $0x8,%al
js     804c0a9 <_IO_stdin_used+0x585>
add    $0x8,%al
js     804c0ad <_IO_stdin_used+0x589>
add    $0x8,%al
js     804c0b1 <_IO_stdin_used+0x58d>
add    $0x8,%al
js     804c0b5 <_IO_stdin_used+0x591>
add    $0x8,%al
js     804c0b9 <_IO_stdin_used+0x595>
add    $0x8,%al
js     804c0bd <_IO_stdin_used+0x599>
add    $0x8,%al
js     804c0c1 <_IO_stdin_used+0x59d>
add    $0x8,%al
loopne 804c0c5 <_IO_stdin_used+0x5a1>
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %cl,-0x42(%ecx)
add    $0x8,%al
push   %ecx
mov    $0xbe570804,%esi
add    $0x8,%al
push   $0xffffffbd
add    $0x8,%al
fs
mov    $0xbe6c0804,%esi
add    $0x8,%al
push   %ebx
mov    $0xbe730804,%ebp
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
and    $0x25282073,%eax
jae    804c1b4 <_IO_stdin_used+0x690>
and    %ah,0x25000a73
jae    804c1b3 <_IO_stdin_used+0x68f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     804c207 <_IO_stdin_used+0x6e3>
je     804c214 <_IO_stdin_used+0x6f0>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     804c217 <_IO_stdin_used+0x6f3>
je     804c224 <_IO_stdin_used+0x700>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     804c22e <_IO_stdin_used+0x70a>
je     804c23b <_IO_stdin_used+0x717>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c200 <_IO_stdin_used+0x6dc>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     804c252 <_IO_stdin_used+0x72e>
jb     804c259 <_IO_stdin_used+0x735>
and    %ah,0x75(%edx)
addr16 jae 804c20b <_IO_stdin_used+0x6e7>
je     804c25c <_IO_stdin_used+0x738>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    804c261 <_IO_stdin_used+0x73d>
and    %al,0x50(%edi)
dec    %esp
jbe    804c235 <_IO_stdin_used+0x711>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     804c284 <_IO_stdin_used+0x760>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     804c23a <_IO_stdin_used+0x716>
insb   (%dx),%es:(%edi)
popa
je     804c283 <_IO_stdin_used+0x75f>
jb     804c240 <_IO_stdin_used+0x71c>
cmp    $0x68,%al
je     804c298 <_IO_stdin_used+0x774>
jo     804c260 <_IO_stdin_used+0x73c>
das
das
outsb  %ds:(%si),(%dx)
jne    804c25a <_IO_stdin_used+0x736>
outsl  %ds:(%esi),(%dx)
jb     804c296 <_IO_stdin_used+0x772>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 804c2a8 <_IO_stdin_used+0x784>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    804c269 <_IO_stdin_used+0x745>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     804c2cd <_IO_stdin_used+0x7a9>
popa
jb     804c2be <_IO_stdin_used+0x79a>
cmp    (%eax),%ah
jns    804c2cc <_IO_stdin_used+0x7a8>
jne    804c27f <_IO_stdin_used+0x75b>
popa
jb     804c2c7 <_IO_stdin_used+0x7a3>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     804c2e7 <_IO_stdin_used+0x7c3>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     804c2f1 <_IO_stdin_used+0x7cd>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     804c30e <_IO_stdin_used+0x7ea>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     804c30d <_IO_stdin_used+0x7e9>
outsb  %ds:(%esi),(%dx)
je     804c2cb <_IO_stdin_used+0x7a7>
jo     804c312 <_IO_stdin_used+0x7ee>
jb     804c31c <_IO_stdin_used+0x7f8>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     804c32c <_IO_stdin_used+0x808>
je     804c339 <_IO_stdin_used+0x815>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c2fe <_IO_stdin_used+0x7da>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c34c <_IO_stdin_used+0x828>
je     804c359 <_IO_stdin_used+0x835>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c31e <_IO_stdin_used+0x7fa>
and    %ah,0x250a2c73
jae    804c326 <_IO_stdin_used+0x802>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c370 <_IO_stdin_used+0x84c>
je     804c37d <_IO_stdin_used+0x859>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c342 <_IO_stdin_used+0x81e>
and    %ah,0x250a2c73
jae    804c34a <_IO_stdin_used+0x826>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c398 <_IO_stdin_used+0x874>
je     804c3a5 <_IO_stdin_used+0x881>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c36a <_IO_stdin_used+0x846>
and    %ah,0x250a2c73
jae    804c372 <_IO_stdin_used+0x84e>
and    %ah,0x25202c73
jae    804c37a <_IO_stdin_used+0x856>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c3c4 <_IO_stdin_used+0x8a0>
je     804c3d1 <_IO_stdin_used+0x8ad>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c396 <_IO_stdin_used+0x872>
and    %ah,0x250a2c73
jae    804c39e <_IO_stdin_used+0x87a>
and    %ah,0x25202c73
jae    804c3a6 <_IO_stdin_used+0x882>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c3f4 <_IO_stdin_used+0x8d0>
je     804c401 <_IO_stdin_used+0x8dd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c3c6 <_IO_stdin_used+0x8a2>
and    %ah,0x250a2c73
jae    804c3ce <_IO_stdin_used+0x8aa>
and    %ah,0x25202c73
jae    804c3d6 <_IO_stdin_used+0x8b2>
and    %ah,0x250a2c73
jae    804c3de <_IO_stdin_used+0x8ba>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     804c428 <_IO_stdin_used+0x904>
je     804c435 <_IO_stdin_used+0x911>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    804c3fa <_IO_stdin_used+0x8d6>
and    %ah,0x250a2c73
jae    804c402 <_IO_stdin_used+0x8de>
and    %ah,0x25202c73
jae    804c40a <_IO_stdin_used+0x8e6>
and    %ah,0x250a2c73
jae    804c412 <_IO_stdin_used+0x8ee>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
mov    $0xac,%al
add    $0x8,%al
mov    $0xf80804ac,%eax
lods   %ds:(%esi),%al
add    $0x8,%al
inc    %eax
lods   %ds:(%esi),%eax
add    $0x8,%al
cwtl
lods   %ds:(%esi),%eax
add    $0x8,%al
lock lods %ds:(%esi),%eax
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%al
add    $0x8,%al
shrb   -0x548ff7fc(%esi)
add    $0x8,%al
or     %ch,0x706f4308(%esp,%eax,1)
jns    804c497 <_IO_stdin_used+0x973>
imul   $0x73252074,0x68(%edi),%esp
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     804c4b1 <_IO_stdin_used+0x98d>
popa
jb     804c4a2 <_IO_stdin_used+0x97e>
and    %al,0x6f(%esi)
jne    804c4b0 <_IO_stdin_used+0x98c>
fs
popa
je     804c4af <_IO_stdin_used+0x98b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804c4ce <_IO_stdin_used+0x9aa>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    804c4d6 <_IO_stdin_used+0x9b2>
jb     804c494 <_IO_stdin_used+0x970>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
xor    %al,(%edx)
add    %al,(%eax)
inc    %ebp
add    %al,(%eax)
add    %al,%ah
(bad)
(bad)
decl   0x0(%edx,%eax,1)
add    %al,(%edx,%ecx,8)
(bad)
call   *0x14000002(%eax)
int3
(bad)
pushl  0x2(%eax)
add    %al,(%eax)
xchg   %eax,%esp
into
(bad)
pushl  -0x5bfffffe(%eax)
into
(bad)
inc    %esp
add    (%eax),%al
add    %dh,0x2d8ffff(%esi,%ecx,8)
add    %al,(%eax)
test   %cl,%bh
(bad)
incl   (%ebx,%eax,1)
add    %al,(%eax)
in     $0xcf,%al
(bad)
jmp    *(%ebx,%eax,1)
add    %al,(%eax)
and    $0xd0,%al
(bad)
decl   0x3(%eax)
add    %al,(%eax)
in     $0xd0,%al
(bad)
ljmp   *0x0(%ebx,%eax,1)
add    %dl,0x3acffff(%ecx,%edx,8)
add    %al,(%eax)
(bad)
sar    %edi
(bad)
fadds  (%ebx)
add    %al,(%eax)
mov    $0xd2,%ah
(bad)
call   *(%eax)
add    $0x0,%al
add    %ah,%ah
fdivr  %st,%st(7)
call   *0x0(%esp,%eax,1)
add    %al,0x494ffff(%esi,%ebx,8)
add    %al,(%eax)
(bad)
fdivrp %st,%st(7)
dec    %eax
add    $0x0,%al
add    %ah,%ah
fdivrp %st,%st(7)
(bad)
faddl  (%eax,%eax,1)
add    %al,(%edi,%ebx,8)
(bad)
push   %eax
add    $0x0,%al
add    %al,-0x1(%edi,%ebx,8)
call   *-0x209c0000(,%eax,1)
(bad)
ljmp   *(%eax)
add    $0xdfa40000,%eax
(bad)
decl   0x0(%ebp,%eax,1)
add    %al,(%eax,%eiz,8)
(bad)
incl   -0x1bfffffb(%eax)
loopne 804c54a <_IO_stdin_used+0xa26>
(bad)
mov    $0x14000005,%esp
loope  804c552 <_IO_stdin_used+0xa2e>
call   *%esp
add    $0xe1a40000,%eax
(bad)
decl   (%eax)
push   %es
add    %al,(%eax)
(bad)
sbb    $0x6,%al
add    %al,(%eax)
in     $0xe1,%al
(bad)
pushl  (%eax)
push   %es
add    %al,(%eax)
add    $0xe2,%al
(bad)
incl   0x0(%esi,%eax,1)
add    %ah,(%edx,%eiz,8)
(bad)
lcall  *0x6(%eax)
add    %al,(%eax)
push   %esp
loop   804c582 <_IO_stdin_used+0xa5e>
(bad)
js     804c58c <_IO_stdin_used+0xa68>
add    %al,(%eax)
test   %ah,%dl
(bad)
lcall  *-0x4bfffffa(%eax)
loop   804c592 <_IO_stdin_used+0xa6e>
pushl  -0x1bfffffa(%eax)
loop   804c59a <_IO_stdin_used+0xa76>
dec    %eax
push   %es
add    %al,(%eax)
xchg   %eax,%esp
jecxz  804c5a2 <_IO_stdin_used+0xa7e>
(bad)
in     (%dx),%al
push   %es
add    %al,(%eax)
(bad)
add    $0x7,%al
add    %al,(%eax)
hlt
jecxz  804c5b2 <_IO_stdin_used+0xa8e>
lcall  *(%edi,%eax,1)
add    %al,(%eax)
and    $0xe4,%al
(bad)
pushl  (%edi,%eax,1)
add    %al,(%eax)
aam    $0xe4
(bad)
lcall  *0x7(%eax)
add    %al,(%eax)
adc    $0xe5,%al
(bad)
pushl  0x7(%eax)
add    %al,(%eax)
push   %esp
in     $0xff,%eax
decl   -0x6bfffff9(%eax)
in     $0xff,%eax
jmp    *-0x4bfffff9(%eax)
in     $0xff,%eax
pushl  -0x1a2c0000(%edi,%eax,1)
(bad)
dec    %eax
pop    %es
add    %al,(%eax)
hlt
in     $0xff,%eax
(bad)
faddl  (%edi)
add    %al,(%eax)
adc    $0xe6,%al
(bad)
push   %eax
pop    %es
add    %al,(%eax)
test   %ch,%bl
(bad)
decl   -0x142c0000(%eax,%ecx,1)
(bad)
jmp    *-0x13cc0000(%eax,%ecx,1)
(bad)
dec    %eax
or     %al,(%eax)
add    %dh,-0x1(%esp,%ebp,8)
jmp    *%eax
or     %al,(%eax)
add    %ah,0x904ffff(,%ebp,8)
add    %al,(%eax)
push   %esp
in     (%dx),%eax
(bad)
ljmp   *(%eax)
or     %eax,(%eax)
add    %al,0x94cffff(%ebp,%ebp,8)
add    %al,(%eax)
xchg   %eax,%esp
in     (%dx),%eax
(bad)
jmp    *0x9(%eax)
add    %al,(%eax)
in     $0xed,%al
(bad)
call   *0x24000009(%eax)
out    %al,(%dx)
(bad)
(bad)
mov    $0x84000009,%esp
out    %al,(%dx)
(bad)
(bad)
in     (%dx),%al
or     %eax,(%eax)
add    %dl,%ah
out    %al,(%dx)
(bad)
call   *(%eax)
or     (%eax),%al
add    %al,(%edi,%ebp,8)
(bad)
pushl  (%eax)
or     (%eax),%al
add    %dh,(%edi,%ebp,8)
(bad)
decl   0x0(%edx,%ecx,1)
add    %ah,-0x1(%edi,%ebp,8)
ljmp   *0x0(%edx,%ecx,1)
add    %dl,0xa8cffff(%edi,%ebp,8)
add    %al,(%eax)
in     $0xef,%al
(bad)
jmp    *0x6400000a(%eax)
lock (bad)
(bad)
clc
or     (%eax),%al
add    %ah,(%esp,%esi,8)
(bad)
(bad)
cmp    %cl,(%ebx)
add    %al,(%eax)
(bad)
hlt
(bad)
incl   0x2400000b(%eax)
cmc
(bad)
ljmp   *-0xa4c0000(%ebx,%ecx,1)
(bad)
incl   (%esp,%ecx,1)
add    %al,(%eax)
and    $0xf6,%al
(bad)
incl   0xc(%eax)
add    %al,(%eax)
xor    $0xf6,%al
(bad)
call   *0x0(%esp,%ecx,1)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     804c6d7 <_IO_stdin_used+0xbb3>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
jo     804c6a6 <_IO_stdin_used+0xb82>
(bad)
incl   0x3(%eax)
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     804c6f7 <_IO_stdin_used+0xbd3>
js     804c6f5 <_IO_stdin_used+0xbd1>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x273ffff(%ecx,%ecx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %ch,-0x1(%edi,%eax,8)
lcall  *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %eax
xchg   %al,(%ebx)
addl   $0x0,(%eax,%eax,1)
adc    %al,(%eax)
add    %al,(%eax)
addb   $0x0,(%eax)
add    %bl,%ah
lret
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x34280000(%eax,%eax,1)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,-0x2c000000(%eax)
lret
(bad)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
aam    $0x0
add    %al,(%eax)
js     804c766 <_IO_stdin_used+0xc42>
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%ah
add    %al,(%eax)
add    %bh,0x32ffffcc(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sbb    %al,(%ecx)
add    %al,(%eax)
aam    $0xcc
(bad)
pushl  0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
push   $0xa
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
cmp    $0x1,%al
add    %al,(%eax)
jo     804c7cf <_IO_stdin_used+0xcab>
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
jl     804c83f <_IO_stdin_used+0xd1b>
add    %al,(%eax)
loopne 804c80f <_IO_stdin_used+0xceb>
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
test   $0x1,%al
add    %al,(%eax)
in     $0xcd,%al
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %bl,0xa2fffff(%esi,%ecx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
and    $0x2,%al
add    %al,(%eax)
mov    %bl,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %ah,0x0(%edx,%eax,1)
add    %ch,%al
fcos
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0xbfffffe(%eax)
fcos
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x26000000(%edx,%eax,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%al
add    (%eax),%al
add    %cl,(%edx,%ebx,8)
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
in     $0x2,%al
add    %al,(%eax)
sub    %bl,%dl
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,%al
add    (%eax),%al
add    %dh,(%edx,%ebx,8)
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sbb    $0x3,%al
add    %al,(%eax)
push   %eax
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
push   %eax
add    (%eax),%eax
add    %bh,-0x1(%edx,%ebx,8)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %cl,-0x24e00000(%ebx,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%eax
add    %bh,(%eax)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fadds  (%ebx)
add    %al,(%eax)
xchg   %eax,%esp
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,%ah
add    (%eax),%eax
add    %ah,0x19ffffdb(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %ch,0x18ffff(%ebx,%ebx,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x4,%al
add    %al,(%eax)
mov    $0x17ffffdb,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sub    %al,(%eax,%eax,1)
add    %al,%ah
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %cl,0x4(%eax)
add    %al,(%eax)
aam    $0xdb
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ch,0x4(%eax)
add    %al,(%eax)
in     $0xdb,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax,%eax,1)
cld
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
cwtl
add    $0x0,%al
add    %dl,(%esp,%ebx,8)
(bad)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    $0xa0000004,%esp
fdivr  %st,%st(7)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
aam    $0x4
add    %al,(%eax)
mov    $0x23ffffdc,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
add    $0x0,%al
add    %dl,%al
fdivr  %st,%st(7)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
add    $0x5,%al
add    %al,(%eax)
call   ae04cba9 <opterr+0xa5ffda05>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    %al,0xdd740000
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %eax
add    $0xdd9c0000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pop    %eax
add    $0xddc40000,%eax
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
jo     804cc37 <_IO_stdin_used+0x1113>
add    %al,(%eax)
in     (%dx),%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,-0x22080000(%ebp,%eax,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,0x4000005(%eax)
fdivrp %st,%st(7)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x21f00000(%ebp,%eax,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,-0x40000000(%eax)
add    $0xde1c0000,%eax
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
push   %es
add    %al,(%eax)
lock loop 804cd22 <_IO_stdin_used+0x11fe>
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dh,0x0(%esi,%eax,1)
add    %ch,(%eax)
jecxz  804cd3a <_IO_stdin_used+0x1216>
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
cwtl
push   %es
add    %al,(%eax)
fs
jecxz  804cd5e <_IO_stdin_used+0x123a>
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
mov    $0x6,%al
add    %al,(%eax)
mov    %fs,%ebx
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
aam    $0x6
add    %al,(%eax)
sbb    %ah,%ah
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
clc
push   %es
add    %al,(%eax)
and    $0xe4,%al
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
sbb    $0x7,%al
add    %al,(%eax)
xor    %ah,%ah
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
xor    %al,(%edi)
add    %al,(%eax)
sub    $0xe4,%al
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
pusha
pop    %es
add    %al,(%eax)
dec    %esp
in     $0xff,%al
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    %es,(%edi)
add    %al,(%eax)
pusha
in     $0xff,%al
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x90000007,%esp
in     $0xff,%al
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
loopne 804cea9 <_IO_stdin_used+0x1385>
add    %al,(%eax)
mov    $0x29ffffe4,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,(%eax)
or     %al,(%eax)
add    %cl,%ah
in     $0xff,%al
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x8,%al
add    %al,(%eax)
loopne 804cec6 <_IO_stdin_used+0x13a2>
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bh,(%eax,%ecx,1)
add    %al,(%eax)
lock in $0xff,%al
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bl,0x0(%eax,%ecx,1)
add    %al,(%eax)
in     $0xff,%eax
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0x0(%eax,%eax,1)
add    %dh,0x8(%eax)
add    %al,(%eax)
cmp    $0xe5,%al
(bad)
(bad)
js     804cf3a <_IO_stdin_used+0x1416>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     804cf5b <_IO_stdin_used+0x1437>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x8,$0x0
fs
in     $0xff,%eax
(bad)
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%eax
add    %cl,(%eax)
or     %eax,(%eax)
add    %ah,%ah
call   89ccfd1 <opterr+0x97de2d>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
push   %eax
or     %eax,(%eax)
add    %bh,(%ecx,%ebp,8)
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %bh,0x0(%ecx,%ecx,1)
add    %dh,-0x17(%eax)
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
aam    $0x9
add    %al,(%eax)
test   $0xe9,%al
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,(%eax)
or     (%eax),%al
add    %bl,%ah
jmp    807d0d9 <opterr+0x2df35>
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
and    $0xa,%al
add    %al,(%eax)
fsubr  %st(1),%st
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
jo     804ee9a <_IO_stdin_used+0x3376>
add    $0x8,%al
push   %eax
nop
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
sub    $0x8b,%al
add    $0x8,%al
or     $0xfc000000,%eax
mov    $0x190804,%edx
add    %al,(%eax)
or     %ch,%bh
add    $0x8,%al
sbb    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0xef,%al
add    $0x8,%al
sbb    $0x0,%al
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
les    0x60804(%ebp),%eax
add    %al,(%eax)
hlt
addl   $0xa,(%eax,%ecx,1)
sahf
add    (%eax),%al
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
lock add $0x8,%al
add    (%eax),%al
add    %al,(%eax)
cwtl
add    %eax,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %dl,0x110804(%ecx,%ecx,4)
add    %al,(%eax)
pop    %esp
mov    %eax,(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x24(%edi)
mov    %al,(%eax,%ecx,1)
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x62(%edi)
mov    %al,(%eax,%ecx,1)
add    %al,(%eax)
adc    $0xef,%al
add    $0x8,%al
mov    (%eax,%ecx,1),%ax
jbe    804ef9d <_IO_stdin_used+0x3479>
add    $0x8,%al
xchg   %cl,-0x7469f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%eax
mov    $0x8b,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
(bad)
mov    (%eax,%ecx,1),%eax
out    %al,$0x8b
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%eax
push   %es
mov    %es,(%eax,%ecx,1)
push   %ss
mov    %es,(%eax,%ecx,1)
mov    %es,%es:(%eax,%ecx,1)
mov    %es,%ss:(%eax,%ecx,1)
inc    %esi
mov    %es,(%eax,%ecx,1)
push   %esi
mov    %es,(%eax,%ecx,1)
data16
mov    %es,(%eax,%ecx,1)
jbe    804efde <_IO_stdin_used+0x34ba>
add    $0x8,%al
xchg   %cl,0x48c9608(%esp,%eax,1)
or     %ah,-0x49f7fb74(%esi)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
(bad)
mov    %es,(%eax,%ecx,1)
out    %al,$0x8c
add    $0x8,%al
(bad)
mov    %es,(%eax,%ecx,1)
push   %es
lea    (%eax,%ecx,1),%eax
push   %ss
lea    (%eax,%ecx,1),%eax
lea    %es:(%eax,%ecx,1),%eax
lea    %ss:(%eax,%ecx,1),%eax
inc    %esi
lea    (%eax,%ecx,1),%eax
push   %esi
lea    (%eax,%ecx,1),%eax
lea    (%eax,%ecx,1),%ax
jbe    804f01f <_IO_stdin_used+0x34fb>
add    $0x8,%al
xchg   %cl,-0x7269f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lea    (%eax,%ecx,1),%eax
mov    $0x8d,%dh
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
(bad)
lea    (%eax,%ecx,1),%eax
out    %al,$0x8d
add    $0x8,%al
(bad)
lea    (%eax,%ecx,1),%eax
push   %es
mov    (%eax,%ecx,1),%es
push   %ss
mov    (%eax,%ecx,1),%es
mov    %es:(%eax,%ecx,1),%es
mov    %ss:(%eax,%ecx,1),%es
inc    %esi
mov    (%eax,%ecx,1),%es
push   %esi
mov    (%eax,%ecx,1),%es
data16
mov    (%eax,%ecx,1),%es
jbe    804f060 <_IO_stdin_used+0x353c>
add    $0x8,%al
.byte 0x86
mov    (%eax,%ecx,1),%es
cmpl   $0x0,0x10804(%ebp)
add    %al,(%esi)
add    %al,(%eax)
add    %dh,(%ecx,%esi,8)
add    $0x8,%al
add    %al,(%ecx)
add    %al,(%eax)
(bad)
icebp
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jae    7b <strcmp@plt-0x8048ae5>
outsb  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
add    %al,(%eax)
.byte 0x0
pushf
inc    %ebp
in     $0x2e,%eax
