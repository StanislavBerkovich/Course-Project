das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %ch,0xaaf2eb5f
imul   $0x87bae04b,0x6e(%edi),%edx
(bad)
mov    $0x16,%al
int3
.byte 0xc7
xchg   %cl,0x2c(%ecx)
add    (%eax),%eax
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax,%eax,2)
dec    %eax
add    %ah,(%ecx,%ebp,2)
sbb    %edx,(%edx)
dec    %eax
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
dec    %edi
add    %al,(%eax)
add    %ch,(%ecx)
sbb    $0x50bc1c8c,%eax
jbe    8048176 <strcmp@plt-0xcaa>
cmp    %dh,%dl
mov    (%esi,%ecx,8),%ebx
sub    $0x63,%al
jb     804818d <strcmp@plt-0xc93>
dec    %ebx
jecxz  80481a4 <strcmp@plt-0xc7c>
xchg   %eax,%esi
mov    0x62e59789,%al
inc    %ecx
cmc
xor    %esp,%eax
notl   (%edx)
mov    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
das
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
enter  $0x2,$0x0
adc    (%eax),%al
add    %al,(%eax)
js     8048283 <strcmp@plt-0xb9d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lea    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     80482a3 <strcmp@plt-0xb7d>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,(%bx,%si)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %al,(%bx,%si)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ecx
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %eax,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     (%edx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%bh
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lcall  $0x0,$0x0
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmc
add    (%eax),%al
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ss
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ebp
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ss
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jp     80485d4 <strcmp@plt-0x84c>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
test   $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %al,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%eax)
add    %al,(%eax)
and    %al,0x5(%edx)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
int    $0x2
add    %al,(%eax)
rolb   $0x8,0x5(%ecx)
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
leave
add    %eax,(%eax)
add    %al,%ah
inc    %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,%al
add    (%eax),%al
add    %ah,%al
inc    %ecx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%ebx)
add    %al,(%eax)
add    %ah,0x5(%ebx,%eax,1)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
(bad)
mov    $0x0,%ch
add    %al,(%eax)
loopne 8048707 <strcmp@plt-0x719>
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %dh,(%edx,%eax,1)
add    %al,(%eax)
rolb   $0x8,0x5(%ecx)
add    $0x0,%al
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
dec    %edi
add    %al,(%eax)
add    %al,(%eax)
inc    %edx
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    8048767 <strcmp@plt-0x6b9>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048775 <strcmp@plt-0x6ab>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048782 <strcmp@plt-0x69e>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     804878e <strcmp@plt-0x692>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     8048795 <strcmp@plt-0x68b>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     80487a7 <strcmp@plt-0x679>
outsl  %ds:(%esi),(%dx)
ja     8048799 <strcmp@plt-0x687>
add    %dh,0x74(%ebx)
jb     80487a9 <strcmp@plt-0x677>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80487ac <strcmp@plt-0x674>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     80487bc <strcmp@plt-0x664>
arpl   %bp,0x72(%eax)
add    %bl,0x5f(%edi)
jae    80487c6 <strcmp@plt-0x65a>
jb     80487b8 <strcmp@plt-0x668>
jne    80487c6 <strcmp@plt-0x65a>
add    %ah,0x67(%ebx,%eiz,2)
gs
je     80487d1 <strcmp@plt-0x64f>
gs
js     80487d4 <strcmp@plt-0x64c>
add    %ah,0x72(%ebp)
jb     80487d4 <strcmp@plt-0x64c>
jb     8048767 <strcmp@plt-0x6b9>
imul   $0x63617073,0x77(%ebx),%esi
add    %bl,%gs:0x5f(%edi)
jae    80487e8 <strcmp@plt-0x638>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048798 <strcmp@plt-0x688>
pop    %edi
gs
js     8048805 <strcmp@plt-0x61b>
je     804879e <strcmp@plt-0x682>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x72(%eax)
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 804880c <strcmp@plt-0x614>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    8048835 <strcmp@plt-0x5eb>
gs
jb     8048839 <strcmp@plt-0x5e7>
pop    %edi
popaw
imul   $0x6c617773,0x69(%eax,%eax,1),%ebp
outsb  %ds:(%esi),(%dx)
jne    8048840 <strcmp@plt-0x5e0>
add    %bl,0x5f(%edi)
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
addr16
gs
je     804883f <strcmp@plt-0x5e1>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048858 <strcmp@plt-0x5c8>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80487eb <strcmp@plt-0x635>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048868 <strcmp@plt-0x5b8>
jb     8048862 <strcmp@plt-0x5be>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048862 <strcmp@plt-0x5be>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    804886a <strcmp@plt-0x5b6>
je     8048807 <strcmp@plt-0x619>
pop    %edi
pop    %edi
gs
jb     804887e <strcmp@plt-0x5a2>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
jb     8048886 <strcmp@plt-0x59a>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x65(%edi)
je     804889f <strcmp@plt-0x581>
popa
addr16
gs
jae    804889d <strcmp@plt-0x583>
jp     804889b <strcmp@plt-0x585>
add    %bl,0x5f(%edi)
data16
js     80488af <strcmp@plt-0x571>
je     804889f <strcmp@plt-0x581>
je     8048876 <strcmp@plt-0x5aa>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     80488b9 <strcmp@plt-0x567>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80488b7 <strcmp@plt-0x569>
outsl  %ds:(%esi),(%dx)
jne    80488ca <strcmp@plt-0x556>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %dh,0x74(%ebx)
jb     80488d2 <strcmp@plt-0x54e>
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    80488da <strcmp@plt-0x546>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
imul   $0x6c66755f,0x5f(%eax,%eax,1),%esi
outsl  %ds:(%esi),(%dx)
ja     804888d <strcmp@plt-0x593>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048910 <strcmp@plt-0x510>
outsb  %ds:(%esi),(%dx)
jbe    80488ae <strcmp@plt-0x572>
pop    %edi
pop    %edi
data16
jb     8048918 <strcmp@plt-0x508>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048931 <strcmp@plt-0x4ef>
add    %dh,0x63(%edi)
ja     804892d <strcmp@plt-0x4f3>
fs
je     804892f <strcmp@plt-0x4f1>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
data16
jae    8048934 <strcmp@plt-0x4ec>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048948 <strcmp@plt-0x4d8>
jo     804894f <strcmp@plt-0x4d1>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048955 <strcmp@plt-0x4cb>
je     8048953 <strcmp@plt-0x4cd>
add    %ch,0x63(%ecx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jbe    8048954 <strcmp@plt-0x4cc>
arpl   %bp,0x73(%edi,%ebp,2)
add    %bl,%gs:0x5f(%edi)
data16
jo     8048965 <strcmp@plt-0x4bb>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048975 <strcmp@plt-0x4ab>
push   $0x73690072
ja     804897c <strcmp@plt-0x4a4>
outsb  %ds:(%esi),(%dx)
je     804898e <strcmp@plt-0x492>
insb   (%dx),%es:(%edi)
add    %ch,0x63(%ecx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jbe    8048924 <strcmp@plt-0x4fc>
jo     8048998 <strcmp@plt-0x488>
outsl  %ds:(%esi),(%dx)
addr16 jb 804898b <strcmp@plt-0x495>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     80489b0 <strcmp@plt-0x470>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     80489ac <strcmp@plt-0x474>
outsb  %ds:(%esi),(%dx)
add    %ch,0x63(%ecx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jbe    80489ae <strcmp@plt-0x472>
outsl  %ds:(%esi),(%dx)
jo     80489b7 <strcmp@plt-0x469>
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
jae    80489c8 <strcmp@plt-0x458>
jb     80489c3 <strcmp@plt-0x45d>
outsb  %ds:(%esi),(%dx)
je     80489c3 <strcmp@plt-0x45d>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    80489ce <strcmp@plt-0x452>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     80489d5 <strcmp@plt-0x44b>
js     80489e6 <strcmp@plt-0x43a>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x63727473,0x0(%esi),%ebp
insl   (%dx),%es:(%edi)
jo     8048980 <strcmp@plt-0x4a0>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048a00 <strcmp@plt-0x420>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x63707473,0x0(%esi),%ebp
jo     8048a11 <strcmp@plt-0x40f>
add    %dh,0x6f(%eax)
jae    8048a06 <strcmp@plt-0x41a>
js     80489fe <strcmp@plt-0x422>
popaw
fs
jbe    8048a0d <strcmp@plt-0x413>
jae    8048a0b <strcmp@plt-0x415>
ss
xor    $0x0,%al
data16
jo     8048a21 <strcmp@plt-0x3ff>
je     8048a21 <strcmp@plt-0x3ff>
pop    %edi
jne    8048a1f <strcmp@plt-0x401>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048a33 <strcmp@plt-0x3ed>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048a3e <strcmp@plt-0x3e2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048a42 <strcmp@plt-0x3de>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048a46 <strcmp@plt-0x3da>
js     8048a4c <strcmp@plt-0x3d4>
je     80489e5 <strcmp@plt-0x43b>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048a62 <strcmp@plt-0x3be>
popa
jb     8048a65 <strcmp@plt-0x3bb>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000200,%eax
add    %al,0x6000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x200
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%ecx)
add    %al,(%edx)
add    %al,(%edi)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
or     %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x90000,%eax
add    $0x3,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jae    8048b27 <strcmp@plt-0x2f9>
imul   $0x80000,(%ecx),%ecx
push   %cs
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edi)
add    %bl,(%edx)
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x60000,(%ecx),%ecx
add    %es:(%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x50000,0xd(%ecx),%ebp
xor    (%ebx),%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x33c,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
inc    %esi
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
push   %eax
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
aas
add    $0x220608,%eax
add    %al,%al
inc    %ecx
add    $0x490508,%eax
add    %al,%ah
inc    %ecx
add    $0x4a0508,%eax
add    %ah,%al
inc    %ecx
add    $0x4b0508,%eax
add    %al,(%eax)
inc    %edx
add    $0x4f0508,%eax
add    %ah,(%eax)
inc    %edx
add    $0x480508,%eax
or     $0x40,%al
add    $0x10708,%eax
add    %dl,(%eax)
inc    %eax
add    $0x20708,%eax
add    %dl,(%eax,%eax,2)
add    $0x30708,%eax
add    %bl,(%eax)
inc    %eax
add    $0x40708,%eax
add    %bl,(%eax,%eax,2)
add    $0x50708,%eax
add    %ah,(%eax)
inc    %eax
add    $0x60708,%eax
add    %ah,(%eax,%eax,2)
add    $0x70708,%eax
add    %ch,(%eax)
inc    %eax
add    $0x80708,%eax
add    %ch,(%eax,%eax,2)
add    $0x90708,%eax
add    %dh,(%eax)
inc    %eax
add    $0xa0708,%eax
add    %dh,(%eax,%eax,2)
add    $0xb0708,%eax
add    %bh,(%eax)
inc    %eax
add    $0xc0708,%eax
add    %bh,(%eax,%eax,2)
add    $0xd0708,%eax
add    %al,0x40(%eax)
add    $0xe0708,%eax
add    %al,0x5(%eax,%eax,2)
or     %al,(%edi)
sldt   (%eax)
dec    %eax
inc    %eax
add    $0x100708,%eax
add    %cl,0x5(%eax,%eax,2)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x40(%eax)
add    $0x120708,%eax
add    %dl,0x5(%eax,%eax,2)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x40(%eax)
add    $0x140708,%eax
add    %bl,0x5(%eax,%eax,2)
or     %al,(%edi)
adc    $0x40600000,%eax
add    $0x160708,%eax
add    %ah,0x5(%eax,%eax,2)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080540
sbb    %al,(%eax)
add    %ch,0x5(%eax,%eax,2)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x40(%eax)
add    $0x1a0708,%eax
add    %dh,0x5(%eax,%eax,2)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x40(%eax)
add    $0x1c0708,%eax
add    %bh,0x5(%eax,%eax,2)
or     %al,(%edi)
sbb    $0x40800000,%eax
add    $0x1e0708,%eax
add    %al,0x1f070805(%eax,%eax,2)
add    %al,(%eax)
mov    %al,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x21070805(%eax,%eax,2)
add    %al,(%eax)
nop
inc    %eax
add    $0x220708,%eax
add    %dl,0x23070805(%eax,%eax,2)
add    %al,(%eax)
cwtl
inc    %eax
add    $0x240708,%eax
add    %bl,0x25070805(%eax,%eax,2)
add    %al,(%eax)
mov    0x7080540,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
inc    %eax
add    $0x270708,%eax
add    %ch,0x7080540(%eax)
sub    %al,(%eax)
add    %ch,0x29070805(%eax,%eax,2)
add    %al,(%eax)
mov    $0x40,%al
add    $0x2a0708,%eax
add    %dh,0x2b070805(%eax,%eax,2)
add    %al,(%eax)
mov    $0x7080540,%eax
sub    $0x0,%al
add    %bh,0x2d070805(%eax,%eax,2)
add    %al,(%eax)
rolb   $0x8,0x5(%eax)
pop    %es
add    %al,%cs:(%eax)
les    0x5(%eax),%eax
or     %al,(%edi)
das
add    %al,(%eax)
enter  $0x540,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
inc    %eax
add    $0x310708,%eax
add    %dl,%al
inc    %eax
add    $0x320708,%eax
add    %dl,%ah
inc    %eax
add    $0x330708,%eax
add    %bl,%al
inc    %eax
add    $0x340708,%eax
add    %bl,%ah
inc    %eax
add    $0x350708,%eax
add    %ah,%al
inc    %eax
add    $0x360708,%eax
add    %ah,%ah
inc    %eax
add    $0x370708,%eax
add    %ch,%al
inc    %eax
add    $0x380708,%eax
add    %ch,%ah
inc    %eax
add    $0x390708,%eax
add    %dh,%al
inc    %eax
add    $0x3a0708,%eax
add    %dh,%ah
inc    %eax
add    $0x3b0708,%eax
add    %bh,%al
inc    %eax
add    $0x3c0708,%eax
add    %bh,%ah
inc    %eax
add    $0x3d0708,%eax
add    %al,(%eax)
inc    %ecx
add    $0x3e0708,%eax
add    %al,(%ecx,%eax,2)
add    $0x3f0708,%eax
add    %cl,(%eax)
inc    %ecx
add    $0x400708,%eax
add    %cl,(%ecx,%eax,2)
add    $0x410708,%eax
add    %dl,(%eax)
inc    %ecx
add    $0x420708,%eax
add    %dl,(%ecx,%eax,2)
add    $0x430708,%eax
add    %bl,(%eax)
inc    %ecx
add    $0x440708,%eax
add    %bl,(%ecx,%eax,2)
add    $0x450708,%eax
add    %ah,(%eax)
inc    %ecx
add    $0x460708,%eax
add    %ah,(%ecx,%eax,2)
add    $0x470708,%eax
push   %ebx
sub    $0x8,%esp
call   8049ef0 <__sprintf_chk@plt+0xc70>
add    $0xb213,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048e02 <strcmp@plt-0x1e>
call   8049030 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8054004
jmp    *0x8054008
add    %al,(%eax)
jmp    *0x805400c
push   $0x0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054010
push   $0x8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054014
push   $0x10
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054018
push   $0x18
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805401c
push   $0x20
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054020
push   $0x28
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054024
push   $0x30
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054028
push   $0x38
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805402c
push   $0x40
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054030
push   $0x48
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054034
push   $0x50
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054038
push   $0x58
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805403c
push   $0x60
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054040
push   $0x68
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054044
push   $0x70
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054048
push   $0x78
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805404c
push   $0x80
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054050
push   $0x88
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054054
push   $0x90
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054058
push   $0x98
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805405c
push   $0xa0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054060
push   $0xa8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054064
push   $0xb0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054068
push   $0xb8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805406c
push   $0xc0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054070
push   $0xc8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054074
push   $0xd0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054078
push   $0xd8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805407c
push   $0xe0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054080
push   $0xe8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054084
push   $0xf0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054088
push   $0xf8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805408c
push   $0x100
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054090
push   $0x108
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054094
push   $0x110
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054098
push   $0x118
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805409c
push   $0x120
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540a0
push   $0x128
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540a4
push   $0x130
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540a8
push   $0x138
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540ac
push   $0x140
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540b0
push   $0x148
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540b4
push   $0x150
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540b8
push   $0x158
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540bc
push   $0x160
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540c0
push   $0x168
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540c4
push   $0x170
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540c8
push   $0x178
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540cc
push   $0x180
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540d0
push   $0x188
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540d4
push   $0x190
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540d8
push   $0x198
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540dc
push   $0x1a0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540e0
push   $0x1a8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540e4
push   $0x1b0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540e8
push   $0x1b8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540ec
push   $0x1c0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540f0
push   $0x1c8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540f4
push   $0x1d0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540f8
push   $0x1d8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x80540fc
push   $0x1e0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054100
push   $0x1e8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054104
push   $0x1f0
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054108
push   $0x1f8
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805410c
push   $0x200
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054110
push   $0x208
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054114
push   $0x210
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054118
push   $0x218
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x805411c
push   $0x220
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054120
push   $0x228
jmp    8048e10 <strcmp@plt-0x10>
jmp    *0x8054124
push   $0x230
jmp    8048e10 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xe0,%esp
call   80490f0 <getpagesize@plt>
mov    %eax,0x38(%esp)
mov    0xc(%ebp),%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804a5a0 <__sprintf_chk@plt+0x1320>
movl   $0x8050efc,0x4(%esp)
movl   $0x6,(%esp)
call   80491b0 <setlocale@plt>
movl   $0x8050884,0x4(%esp)
movl   $0x8050876,(%esp)
call   80491f0 <bindtextdomain@plt>
movl   $0x8050876,(%esp)
call   8048f30 <textdomain@plt>
movl   $0x804a360,(%esp)
call   8050300 <__sprintf_chk@plt+0x7080>
movb   $0x0,0x52(%esp)
movb   $0x0,0x53(%esp)
movb   $0x0,0x50(%esp)
movb   $0x0,0x46(%esp)
movb   $0x0,0x36(%esp)
movb   $0x0,0x47(%esp)
mov    0xc(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x80509c0,0xc(%esp)
movl   $0x80508d3,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   8049070 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804946f <__sprintf_chk@plt+0x1ef>
cmp    $0x62,%eax
je     8049459 <__sprintf_chk@plt+0x1d9>
nop
jle    804937d <__sprintf_chk@plt+0xfd>
cmp    $0x73,%eax
je     804944f <__sprintf_chk@plt+0x1cf>
nop
lea    0x0(%esi,%eiz,1),%esi
jle    80493ce <__sprintf_chk@plt+0x14e>
cmp    $0x75,%eax
je     8049313 <__sprintf_chk@plt+0x93>
jl     80493e6 <__sprintf_chk@plt+0x166>
cmp    $0x76,%eax
lea    0x0(%esi,%eiz,1),%esi
jne    8049463 <__sprintf_chk@plt+0x1e3>
movb   $0x1,0x53(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
cmp    $0x41,%eax
je     80493ba <__sprintf_chk@plt+0x13a>
jg     80493a2 <__sprintf_chk@plt+0x122>
cmp    $0xffffff7d,%eax
je     80493f5 <__sprintf_chk@plt+0x175>
cmp    $0xffffff7e,%eax
jne    8049463 <__sprintf_chk@plt+0x1e3>
movl   $0x0,(%esp)
call   804a030 <__sprintf_chk@plt+0xdb0>
cmp    $0x45,%eax
je     80493c4 <__sprintf_chk@plt+0x144>
cmp    $0x54,%eax
jne    8049463 <__sprintf_chk@plt+0x1e3>
movb   $0x1,0x52(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
movb   $0x1,0x52(%esp)
movb   $0x1,0x53(%esp)
movb   $0x1,0x50(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
cmp    $0x65,%eax
je     80493bf <__sprintf_chk@plt+0x13f>
cmp    $0x6e,%eax
jne    8049463 <__sprintf_chk@plt+0x1e3>
movb   $0x1,0x47(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
movb   $0x1,0x52(%esp)
movb   $0x1,0x53(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
movl   $0x8050896,0x4(%esp)
movl   $0x80508a9,(%esp)
call   804afa0 <__sprintf_chk@plt+0x1d20>
movl   $0x0,0x18(%esp)
movl   $0x80508bb,0x14(%esp)
movl   $0x8050872,0x8(%esp)
movl   $0x80508cf,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8054164,%eax
mov    %eax,0xc(%esp)
mov    0x8054220,%eax
mov    %eax,(%esp)
call   804d3d0 <__sprintf_chk@plt+0x4150>
movl   $0x0,(%esp)
call   8049040 <exit@plt>
movb   $0x1,0x46(%esp)
jmp    8049313 <__sprintf_chk@plt+0x93>
movb   $0x1,0x36(%esp)
jmp    80493dc <__sprintf_chk@plt+0x15c>
movl   $0x1,(%esp)
call   804a030 <__sprintf_chk@plt+0xdb0>
lea    0x80(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x3,(%esp)
call   8048f70 <__fxstat64@plt>
test   %eax,%eax
js     8049e17 <__sprintf_chk@plt+0xb97>
mov    0xb4(%esp),%eax
mov    $0x10000,%edi
movb   $0x0,0x37(%esp)
lea    -0x10000(%eax),%edx
cmp    $0x1fff0000,%edx
cmovbe %eax,%edi
mov    0x90(%esp),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
jne    80494fa <__sprintf_chk@plt+0x27a>
mov    0x80(%esp),%eax
movb   $0x1,0x37(%esp)
mov    %eax,0x2c(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x28(%esp)
mov    0xd8(%esp),%eax
mov    %eax,0x24(%esp)
mov    0xdc(%esp),%eax
mov    %eax,0x20(%esp)
movzbl 0x50(%esp),%eax
movl   $0x8050aae,0x8054230
08
movb   $0x0,0x34(%esp)
movb   $0x1,0x44(%esp)
xor    $0x1,%eax
mov    %al,0x35(%esp)
movzbl 0x47(%esp),%eax
xor    $0x1,%eax
and    %al,0x35(%esp)
mov    0x8054200,%eax
mov    %eax,0x40(%esp)
mov    0x38(%esp),%eax
lea    0x12(%eax,%edi,1),%eax
mov    %eax,0x1c(%esp)
mov    0x40(%esp),%eax
cmp    0x8(%ebp),%eax
jge    8049eb8 <__sprintf_chk@plt+0xc38>
mov    0xc(%ebp),%eax
mov    0x40(%esp),%ecx
mov    (%eax,%ecx,4),%eax
mov    %eax,0x8054230
cmpb   $0x2d,(%eax)
je     8049a44 <__sprintf_chk@plt+0x7c4>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e30 <open64@plt>
test   %eax,%eax
mov    %eax,%ebx
mov    %eax,0x805422c
js     8049d54 <__sprintf_chk@plt+0xad4>
lea    0x80(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8048f70 <__fxstat64@plt>
test   %eax,%eax
js     8049c74 <__sprintf_chk@plt+0x9f4>
mov    0xb4(%esp),%eax
mov    $0x10000,%ecx
movl   $0x2,0x14(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x10(%esp)
lea    -0x10000(%eax),%edx
cmp    $0x1fff0000,%edx
cmova  %ecx,%eax
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4c(%esp)
call   804a4d0 <__sprintf_chk@plt+0x1250>
cmpb   $0x0,0x37(%esp)
je     8049609 <__sprintf_chk@plt+0x389>
mov    0x28(%esp),%eax
cmp    %eax,0x84(%esp)
je     8049bec <__sprintf_chk@plt+0x96c>
cmpb   $0x0,0x35(%esp)
je     8049633 <__sprintf_chk@plt+0x3b3>
movzbl 0x53(%esp),%edx
movzbl 0x52(%esp),%eax
xor    $0x1,%edx
xor    $0x1,%eax
and    %al,%dl
mov    %dl,0x68(%esp)
je     8049633 <__sprintf_chk@plt+0x3b3>
cmpb   $0x0,0x46(%esp)
je     8049ca7 <__sprintf_chk@plt+0xa27>
mov    0x4c(%esp),%ebx
mov    0x38(%esp),%esi
mov    %ebx,%eax
add    %esi,%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    0x1c(%esp),%ecx
mov    %eax,0x3c(%esp)
lea    (%ecx,%ebx,4),%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    %esi,%ecx
xor    %edx,%edx
sub    $0x1,%ecx
movb   $0x1,0x51(%esp)
mov    %eax,%ebx
add    %ecx,%ebx
mov    %eax,0x30(%esp)
mov    %ebx,%eax
div    %esi
add    0x3c(%esp),%ecx
mov    %ecx,%eax
sub    %edx,%ebx
xor    %edx,%edx
div    %esi
mov    0x8054228,%eax
mov    %ebx,0x60(%esp)
lea    (%ebx,%edi,1),%esi
mov    %eax,0x68(%esp)
mov    %esi,0x5c(%esp)
sub    %edx,%ecx
lea    0x1(%ecx),%eax
mov    %eax,0x48(%esp)
mov    %eax,%esi
movzbl 0x36(%esp),%eax
mov    %ecx,0x54(%esp)
mov    %ecx,0x64(%esp)
xor    $0x1,%eax
mov    %al,0x45(%esp)
lea    0x0(%esi,%eiz,1),%esi
cmp    0x5c(%esp),%ebx
jb     8049752 <__sprintf_chk@plt+0x4d2>
mov    0x60(%esp),%edx
mov    %esi,0x58(%esp)
mov    %ebx,0x6c(%esp)
mov    %edx,%esi
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x1,(%esp)
call   804a530 <__sprintf_chk@plt+0x12b0>
cmp    %eax,%edi
je     8049721 <__sprintf_chk@plt+0x4a1>
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
call   8049140 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
mov    0x6c(%esp),%ecx
add    %edi,%esi
sub    %esi,%ecx
cmp    %ecx,%edi
jbe    80496d0 <__sprintf_chk@plt+0x450>
mov    0x60(%esp),%ebx
mov    %esi,%edx
mov    %ecx,0x8(%esp)
mov    0x58(%esp),%esi
mov    %edx,0x4(%esp)
mov    %ecx,0x6c(%esp)
mov    %ebx,(%esp)
call   8048e80 <memmove@plt>
mov    0x6c(%esp),%ecx
lea    (%ebx,%ecx,1),%ebx
cmp    0x64(%esp),%esi
jbe    80498b0 <__sprintf_chk@plt+0x630>
cmpb   $0x0,0x51(%esp)
movl   $0x0,0x7c(%esp)
jne    8049970 <__sprintf_chk@plt+0x6f0>
mov    %ebx,%esi
sub    0x60(%esp),%esi
jne    80499a8 <__sprintf_chk@plt+0x728>
mov    0x805422c,%esi
mov    0x4c(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804c6d0 <__sprintf_chk@plt+0x3450>
cmp    $0xffffffff,%eax
je     8049a64 <__sprintf_chk@plt+0x7e4>
test   %eax,%eax
je     8049b1e <__sprintf_chk@plt+0x89e>
mov    0x54(%esp),%edx
mov    0x48(%esp),%esi
add    %edx,%eax
mov    %eax,0x64(%esp)
movb   $0xa,(%eax)
mov    %edx,%eax
movzbl (%eax),%edx
cmp    $0xa,%dl
je     80496b8 <__sprintf_chk@plt+0x438>
mov    0x68(%esp),%eax
test   %eax,%eax
jns    8049940 <__sprintf_chk@plt+0x6c0>
cmpb   $0x0,0x53(%esp)
movzbl 0x52(%esp),%eax
je     8049825 <__sprintf_chk@plt+0x5a5>
xor    $0x1,%eax
jmp    80497f9 <__sprintf_chk@plt+0x579>
xchg   %ax,%ax
cmp    $0x7e,%dl
ja     8049850 <__sprintf_chk@plt+0x5d0>
mov    %dl,(%ebx)
add    $0x1,%ebx
add    $0x1,%esi
movzbl -0x1(%esi),%edx
cmp    $0x1f,%dl
ja     80497e8 <__sprintf_chk@plt+0x568>
cmp    $0x9,%dl
jne    8049838 <__sprintf_chk@plt+0x5b8>
test   %al,%al
je     8049838 <__sprintf_chk@plt+0x5b8>
movb   $0x9,(%ebx)
add    $0x1,%ebx
jmp    80497f2 <__sprintf_chk@plt+0x572>
nop
test   %al,%al
je     804982a <__sprintf_chk@plt+0x5aa>
movb   $0x5e,(%ebx)
add    $0x2,%ebx
movb   $0x49,-0x1(%ebx)
add    $0x1,%esi
movzbl -0x1(%esi),%edx
cmp    $0x9,%dl
je     8049810 <__sprintf_chk@plt+0x590>
cmp    $0xa,%dl
je     80498a0 <__sprintf_chk@plt+0x620>
mov    %dl,(%ebx)
add    $0x1,%ebx
jmp    804981e <__sprintf_chk@plt+0x59e>
xchg   %ax,%ax
cmp    $0xa,%dl
je     80498a0 <__sprintf_chk@plt+0x620>
add    $0x40,%edx
add    $0x2,%ebx
movb   $0x5e,-0x2(%ebx)
mov    %dl,-0x1(%ebx)
jmp    80497f2 <__sprintf_chk@plt+0x572>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x7f,%dl
je     8049890 <__sprintf_chk@plt+0x610>
cmp    $0x9f,%dl
movb   $0x4d,(%ebx)
movb   $0x2d,0x1(%ebx)
jbe    8049878 <__sprintf_chk@plt+0x5f8>
cmp    $0xff,%dl
je     80498e0 <__sprintf_chk@plt+0x660>
add    $0xffffff80,%edx
add    $0x3,%ebx
mov    %dl,-0x1(%ebx)
jmp    80497f2 <__sprintf_chk@plt+0x572>
lea    0x0(%esi,%eiz,1),%esi
sub    $0x40,%edx
add    $0x4,%ebx
movb   $0x5e,-0x2(%ebx)
mov    %dl,-0x1(%ebx)
jmp    80497f2 <__sprintf_chk@plt+0x572>
lea    0x0(%esi),%esi
movb   $0x5e,(%ebx)
add    $0x2,%ebx
movb   $0x3f,-0x1(%ebx)
jmp    80497f2 <__sprintf_chk@plt+0x572>
nop
movl   $0xffffffff,0x68(%esp)
jmp    80496b8 <__sprintf_chk@plt+0x438>
lea    0x0(%esi),%esi
addl   $0x1,0x68(%esp)
mov    0x68(%esp),%eax
test   %eax,%eax
jle    8049920 <__sprintf_chk@plt+0x6a0>
cmp    $0x1,%eax
je     80498f8 <__sprintf_chk@plt+0x678>
cmpb   $0x0,0x46(%esp)
je     80498f0 <__sprintf_chk@plt+0x670>
movzbl (%esi),%edx
add    $0x1,%esi
movl   $0x2,0x68(%esp)
jmp    80497c0 <__sprintf_chk@plt+0x540>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x5e,0x2(%ebx)
add    $0x4,%ebx
movb   $0x3f,-0x1(%ebx)
jmp    80497f2 <__sprintf_chk@plt+0x572>
movl   $0x2,0x68(%esp)
cmpb   $0x0,0x45(%esp)
je     8049920 <__sprintf_chk@plt+0x6a0>
cmpb   $0x0,0x47(%esp)
je     8049920 <__sprintf_chk@plt+0x6a0>
call   8049fc0 <__sprintf_chk@plt+0xd40>
mov    0x805414c,%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8048f00 <stpcpy@plt>
mov    %eax,%ebx
xchg   %ax,%ax
cmpb   $0x0,0x50(%esp)
mov    %ebx,%eax
je     804992f <__sprintf_chk@plt+0x6af>
add    $0x1,%eax
movb   $0x24,(%ebx)
lea    0x1(%eax),%ebx
movb   $0xa,(%eax)
mov    %esi,%eax
add    $0x1,%esi
jmp    80497bd <__sprintf_chk@plt+0x53d>
nop
cmpb   $0x0,0x47(%esp)
je     80497d5 <__sprintf_chk@plt+0x555>
mov    %edx,0x6c(%esp)
call   8049fc0 <__sprintf_chk@plt+0xd40>
mov    0x805414c,%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8048f00 <stpcpy@plt>
mov    0x6c(%esp),%edx
mov    %eax,%ebx
jmp    80497d5 <__sprintf_chk@plt+0x555>
mov    0x805422c,%esi
lea    0x7c(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x541b,0x4(%esp)
mov    %esi,(%esp)
call   8048f50 <ioctl@plt>
test   %eax,%eax
js     8049a0c <__sprintf_chk@plt+0x78c>
mov    0x7c(%esp),%edx
test   %edx,%edx
jne    8049781 <__sprintf_chk@plt+0x501>
xchg   %ax,%ax
jmp    804976f <__sprintf_chk@plt+0x4ef>
lea    0x0(%esi),%esi
mov    0x60(%esp),%eax
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804a530 <__sprintf_chk@plt+0x12b0>
cmp    %eax,%esi
je     80499fd <__sprintf_chk@plt+0x77d>
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
call   8049140 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
mov    0x805422c,%esi
mov    0x60(%esp),%ebx
jmp    8049781 <__sprintf_chk@plt+0x501>
call   8049140 <__errno_location@plt>
mov    (%eax),%ecx
cmp    $0x5f,%ecx
sete   0x6c(%esp)
cmp    $0x19,%ecx
sete   %dl
or     0x6c(%esp),%dl
jne    8049a3a <__sprintf_chk@plt+0x7ba>
cmp    $0x16,%ecx
je     8049a3a <__sprintf_chk@plt+0x7ba>
cmp    $0x13,%ecx
je     8049a3a <__sprintf_chk@plt+0x7ba>
cmp    $0x26,%ecx
jne    8049e55 <__sprintf_chk@plt+0xbd5>
movb   $0x0,0x51(%esp)
jmp    8049992 <__sprintf_chk@plt+0x712>
cmpb   $0x0,0x1(%eax)
jne    8049560 <__sprintf_chk@plt+0x2e0>
movl   $0x0,0x805422c
00
xor    %ebx,%ebx
movb   $0x1,0x34(%esp)
jmp    804957f <__sprintf_chk@plt+0x2ff>
mov    0x8054230,%edx
mov    %edx,0x6c(%esp)
call   8049140 <__errno_location@plt>
mov    0x6c(%esp),%edx
movl   $0x8050a69,0x8(%esp)
mov    %edx,0xc(%esp)
mov    %eax,%esi
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
sub    0x60(%esp),%ebx
jne    8049b37 <__sprintf_chk@plt+0x8b7>
mov    0x68(%esp),%eax
xor    %edx,%edx
mov    %eax,0x8054228
mov    0x30(%esp),%eax
and    %dl,0x44(%esp)
mov    %eax,(%esp)
call   8048e90 <free@plt>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   8048e90 <free@plt>
mov    0x8054230,%eax
cmpb   $0x2d,(%eax)
je     8049b16 <__sprintf_chk@plt+0x896>
mov    0x805422c,%eax
mov    %eax,(%esp)
call   8049240 <close@plt>
test   %eax,%eax
js     8049d54 <__sprintf_chk@plt+0xad4>
addl   $0x1,0x40(%esp)
mov    0x40(%esp),%eax
cmp    %eax,0x8(%ebp)
jg     804953b <__sprintf_chk@plt+0x2bb>
cmpb   $0x0,0x34(%esp)
jne    8049d87 <__sprintf_chk@plt+0xb07>
xor    %eax,%eax
cmpb   $0x0,0x44(%esp)
sete   %al
mov    %eax,(%esp)
call   8049040 <exit@plt>
cmpb   $0x0,0x1(%eax)
je     8049ae7 <__sprintf_chk@plt+0x867>
jmp    8049ad2 <__sprintf_chk@plt+0x852>
sub    0x60(%esp),%ebx
jne    8049b8e <__sprintf_chk@plt+0x90e>
mov    0x68(%esp),%eax
mov    $0x1,%edx
mov    %eax,0x8054228
jmp    8049aac <__sprintf_chk@plt+0x82c>
mov    0x60(%esp),%eax
mov    %ebx,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804a530 <__sprintf_chk@plt+0x12b0>
cmp    %eax,%ebx
je     8049aa1 <__sprintf_chk@plt+0x821>
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    (%esi),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049aa1 <__sprintf_chk@plt+0x821>
mov    0x60(%esp),%eax
mov    %ebx,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804a530 <__sprintf_chk@plt+0x12b0>
cmp    %eax,%ebx
je     8049b24 <__sprintf_chk@plt+0x8a4>
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
call   8049140 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049b24 <__sprintf_chk@plt+0x8a4>
mov    0x2c(%esp),%eax
cmp    %eax,0x80(%esp)
jne    8049609 <__sprintf_chk@plt+0x389>
mov    0x20(%esp),%eax
cmp    %eax,0xdc(%esp)
jne    8049609 <__sprintf_chk@plt+0x389>
mov    0x24(%esp),%eax
cmp    %eax,0xd8(%esp)
jne    8049609 <__sprintf_chk@plt+0x389>
cmpl   $0x0,0x805422c
je     8049609 <__sprintf_chk@plt+0x389>
movl   $0x5,0x8(%esp)
mov    0x8054230,%ebx
movl   $0x80508ee,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   8048fd0 <error@plt>
movb   $0x0,0x44(%esp)
jmp    8049ac8 <__sprintf_chk@plt+0x848>
call   8049140 <__errno_location@plt>
mov    0x8054230,%ebx
movl   $0x8050a69,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
movb   $0x0,0x44(%esp)
jmp    8049ac8 <__sprintf_chk@plt+0x848>
mov    0x4c(%esp),%eax
mov    0x38(%esp),%esi
cmp    %edi,%eax
cmovb  %edi,%eax
lea    -0x1(%esi),%ebx
mov    %eax,0x6c(%esp)
add    %ebx,%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
xor    %edx,%edx
add    %eax,%ebx
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
div    %esi
sub    %edx,%ebx
jmp    8049cf8 <__sprintf_chk@plt+0xa78>
lea    0x0(%esi),%esi
test   %eax,%eax
je     8049d46 <__sprintf_chk@plt+0xac6>
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x1,(%esp)
call   804a530 <__sprintf_chk@plt+0x12b0>
cmp    %eax,%esi
jne    8049dd9 <__sprintf_chk@plt+0xb59>
mov    0x6c(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x805422c,%eax
mov    %eax,(%esp)
call   804c6d0 <__sprintf_chk@plt+0x3450>
cmp    $0xffffffff,%eax
mov    %eax,%esi
jne    8049cd8 <__sprintf_chk@plt+0xa58>
call   8049140 <__errno_location@plt>
mov    0x8054230,%ebx
movl   $0x8050a69,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
movb   $0x0,0x68(%esp)
movzbl 0x68(%esp),%eax
and    %al,0x44(%esp)
jmp    8049abc <__sprintf_chk@plt+0x83c>
call   8049140 <__errno_location@plt>
mov    0x8054230,%ebx
movl   $0x8050a69,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
movb   $0x0,0x44(%esp)
jmp    8049ae7 <__sprintf_chk@plt+0x867>
movl   $0x0,(%esp)
call   8049240 <close@plt>
test   %eax,%eax
jns    8049b04 <__sprintf_chk@plt+0x884>
movl   $0x5,0x8(%esp)
movl   $0x805092e,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
call   8049140 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049b04 <__sprintf_chk@plt+0x884>
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%esi
call   8049140 <__errno_location@plt>
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049cf8 <__sprintf_chk@plt+0xa78>
movl   $0x5,0x8(%esp)
movl   $0x80508de,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
call   8049140 <__errno_location@plt>
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    8049496 <__sprintf_chk@plt+0x216>
mov    %eax,0x64(%esp)
mov    0x8054230,%eax
mov    %edx,0x6c(%esp)
mov    %eax,(%esp)
call   804c6b0 <__sprintf_chk@plt+0x3430>
movl   $0x5,0x8(%esp)
movl   $0x8050918,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8048ef0 <dcgettext@plt>
mov    0x64(%esp),%ecx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    (%ecx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
mov    0x68(%esp),%eax
mov    0x6c(%esp),%edx
mov    %eax,0x8054228
jmp    8049aac <__sprintf_chk@plt+0x82c>
mov    0x8054230,%eax
jmp    8049557 <__sprintf_chk@plt+0x2d7>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x80502f0
push   $0x8050280
push   %ecx
push   %esi
push   $0x8049290
call   80490d0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80541c3,%eax
sub    $0x80541c0,%eax
cmp    $0x6,%eax
ja     8049f10 <__sprintf_chk@plt+0xc90>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049f0f <__sprintf_chk@plt+0xc8f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80541c0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80541c0,%eax
sub    $0x80541c0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049f49 <__sprintf_chk@plt+0xcc9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049f48 <__sprintf_chk@plt+0xcc8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80541c0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8054224
jne    8049f8c <__sprintf_chk@plt+0xd0c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049f00 <__sprintf_chk@plt+0xc80>
movb   $0x1,0x8054224
leave
repz ret
xchg   %ax,%ax
mov    0x8053f10,%eax
test   %eax,%eax
je     8049fb8 <__sprintf_chk@plt+0xd38>
mov    $0x0,%eax
test   %eax,%eax
je     8049fb8 <__sprintf_chk@plt+0xd38>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8053f10,(%esp)
call   *%eax
leave
jmp    8049f30 <__sprintf_chk@plt+0xcb0>
nop
jmp    8049f30 <__sprintf_chk@plt+0xcb0>
xchg   %ax,%ax
nop
mov    0x8054148,%ecx
mov    $0x8054161,%eax
jmp    8049fdb <__sprintf_chk@plt+0xd5b>
lea    0x0(%esi),%esi
sub    $0x1,%eax
cmp    %ecx,%eax
movb   $0x30,0x1(%eax)
jb     8049ff0 <__sprintf_chk@plt+0xd70>
movzbl (%eax),%edx
cmp    $0x38,%dl
jg     8049fd0 <__sprintf_chk@plt+0xd50>
add    $0x1,%edx
mov    %dl,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x8054150,%ecx
jbe    804a020 <__sprintf_chk@plt+0xda0>
lea    -0x1(%ecx),%eax
movb   $0x31,-0x1(%ecx)
mov    %eax,%ecx
mov    %eax,0x8054148
mov    0x805414c,%eax
cmp    %ecx,%eax
jbe    804a017 <__sprintf_chk@plt+0xd97>
sub    $0x1,%eax
mov    %eax,0x805414c
repz ret
lea    0x0(%esi,%eiz,1),%esi
movb   $0x3e,0x8054150
jmp    804a006 <__sprintf_chk@plt+0xd86>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x805423c,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     804a084 <__sprintf_chk@plt+0xe04>
movl   $0x8050368,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80541c4,%eax
mov    %eax,(%esp)
call   80491e0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8049040 <exit@plt>
movl   $0x8050390,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x80503b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050540,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050614,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050644,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x805067c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
mov    0x805423c,%esi
movl   $0x5,0x8(%esp)
movl   $0x80506b4,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
mov    0x805423c,%eax
mov    %eax,(%esp)
call   804a430 <__sprintf_chk@plt+0x11b0>
movl   $0x5,0x8(%esp)
movl   $0x8050831,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ef0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8050848,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805085e,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
movl   $0x8050740,0xc(%esp)
movl   $0x8050872,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
mov    0x8054220,%esi
movl   $0x5,0x8(%esp)
movl   $0x8050768,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   80491b0 <setlocale@plt>
test   %eax,%eax
je     804a2b1 <__sprintf_chk@plt+0x1031>
movl   $0x3,0x8(%esp)
movl   $0x8050880,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <strncmp@plt>
test   %eax,%eax
jne    804a2f5 <__sprintf_chk@plt+0x1075>
mov    0x805423c,%eax
mov    %eax,(%esp)
call   804a430 <__sprintf_chk@plt+0x11b0>
movl   $0x5,0x8(%esp)
movl   $0x80507f0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ef0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
jmp    804a07c <__sprintf_chk@plt+0xdfc>
mov    0x805423c,%eax
mov    %eax,(%esp)
call   804a430 <__sprintf_chk@plt+0x11b0>
movl   $0x5,0x8(%esp)
movl   $0x80507a8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8048ef0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
jmp    804a2b1 <__sprintf_chk@plt+0x1031>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8054238
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8054234
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8054220,%eax
mov    %eax,(%esp)
call   804d8b0 <__sprintf_chk@plt+0x4630>
test   %eax,%eax
je     804a389 <__sprintf_chk@plt+0x1109>
cmpb   $0x0,0x8054234
je     804a3a0 <__sprintf_chk@plt+0x1120>
call   8049140 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804a3a0 <__sprintf_chk@plt+0x1120>
mov    0x80541c4,%eax
mov    %eax,(%esp)
call   804d8b0 <__sprintf_chk@plt+0x4630>
test   %eax,%eax
jne    804a3f8 <__sprintf_chk@plt+0x1178>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x805090c,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8054238,%eax
test   %eax,%eax
je     804a405 <__sprintf_chk@plt+0x1185>
mov    %eax,(%esp)
call   804c480 <__sprintf_chk@plt+0x3200>
mov    %eax,%esi
call   8049140 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x8050a65,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
mov    0x8054168,%eax
mov    %eax,(%esp)
call   8048e60 <_exit@plt>
call   8049140 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8050a69,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048fd0 <error@plt>
jmp    804a3f8 <__sprintf_chk@plt+0x1178>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804a44b <__sprintf_chk@plt+0x11cb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804a440 <__sprintf_chk@plt+0x11c0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804a479 <__sprintf_chk@plt+0x11f9>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804a479 <__sprintf_chk@plt+0x11f9>
cmp    $0x2f,%cl
je     804a480 <__sprintf_chk@plt+0x1200>
test   %bl,%bl
je     804a458 <__sprintf_chk@plt+0x11d8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804a462 <__sprintf_chk@plt+0x11e2>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804a458 <__sprintf_chk@plt+0x11d8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
cmp    $0x1,%eax
jbe    804a4af <__sprintf_chk@plt+0x122f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804a4b8 <__sprintf_chk@plt+0x1238>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804a4a5 <__sprintf_chk@plt+0x1225>
nop
jmp    804a4af <__sprintf_chk@plt+0x122f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
jmp    8049200 <posix_fadvise64@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x30(%esp),%eax
test   %eax,%eax
je     804a523 <__sprintf_chk@plt+0x12a3>
mov    %eax,(%esp)
call   8049160 <fileno@plt>
mov    0x34(%esp),%edx
movl   $0x0,0xc(%esp)
movl   $0x0,0x10(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,0x14(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049200 <posix_fadvise64@plt>
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x1c,%esp
mov    0x38(%esp),%ebx
mov    0x30(%esp),%edi
mov    0x34(%esp),%ebp
test   %ebx,%ebx
jne    804a55c <__sprintf_chk@plt+0x12dc>
jmp    804a571 <__sprintf_chk@plt+0x12f1>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
je     804a580 <__sprintf_chk@plt+0x1300>
add    %eax,%esi
add    %eax,%ebp
sub    %eax,%ebx
je     804a571 <__sprintf_chk@plt+0x12f1>
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   804c730 <__sprintf_chk@plt+0x34b0>
cmp    $0xffffffff,%eax
jne    804a550 <__sprintf_chk@plt+0x12d0>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049140 <__errno_location@plt>
movl   $0x1c,(%eax)
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804a623 <__sprintf_chk@plt+0x13a3>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80491c0 <strrchr@plt>
test   %eax,%eax
je     804a60f <__sprintf_chk@plt+0x138f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804a60f <__sprintf_chk@plt+0x138f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8050aa4,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804a60f <__sprintf_chk@plt+0x138f>
mov    $0x3,%ecx
mov    $0x8050aac,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804a60f <__sprintf_chk@plt+0x138f>
lea    0x4(%eax),%ebx
mov    %ebx,0x80541c0
mov    %ebx,0x805423c
mov    %ebx,0x80541e0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80541c4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8050a6c,(%esp)
mov    %eax,0xc(%esp)
call   8048f60 <fwrite@plt>
call   8049220 <abort@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xac,%esp
movl   $0x2,0x4(%esp)
lea    0x30(%esp),%ebp
mov    %edx,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x9c(%esp)
xor    %eax,%eax
call   804c7d0 <__sprintf_chk@plt+0x3550>
mov    %eax,0x18(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ebx)
je     804a983 <__sprintf_chk@plt+0x1703>
mov    0x18(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804e880 <__sprintf_chk@plt+0x5600>
test   %eax,%eax
mov    %eax,%esi
je     804a983 <__sprintf_chk@plt+0x1703>
call   8048f80 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804ac80 <__sprintf_chk@plt+0x1a00>
cmp    %esi,%ebx
movl   $0x0,0x4(%ebp)
mov    %ebx,0x3c(%esp)
movb   $0x0,0x2c(%esp)
movl   $0x0,0x0(%ebp)
movb   $0x0,0x38(%esp)
jae    804ace0 <__sprintf_chk@plt+0x1a60>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2c(%esp)
jne    804a73d <__sprintf_chk@plt+0x14bd>
mov    0x3c(%esp),%ebx
movzbl (%ebx),%eax
mov    %eax,%edx
shr    $0x5,%dl
movzbl %dl,%edx
mov    0x80511c0(,%edx,4),%edx
bt     %eax,%edx
jae    804a728 <__sprintf_chk@plt+0x14a8>
movl   $0x1,0x40(%esp)
movsbl (%ebx),%edi
movb   $0x1,0x44(%esp)
mov    %edi,0x48(%esp)
test   %edi,%edi
movb   $0x1,0x38(%esp)
jne    804a7d2 <__sprintf_chk@plt+0x1552>
call   8049220 <abort@plt>
mov    %ebp,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ae8a <__sprintf_chk@plt+0x1c0a>
movb   $0x1,0x2c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x3c(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebp,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x40(%esp)
je     804abe0 <__sprintf_chk@plt+0x1960>
cmp    $0xfffffffe,%eax
je     804ac50 <__sprintf_chk@plt+0x19d0>
test   %eax,%eax
jne    804ac40 <__sprintf_chk@plt+0x19c0>
mov    0x3c(%esp),%ebx
movl   $0x1,0x40(%esp)
cmpb   $0x0,(%ebx)
jne    804aeae <__sprintf_chk@plt+0x1c2e>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804aed7 <__sprintf_chk@plt+0x1c57>
xor    %edi,%edi
mov    %ebp,(%esp)
movb   $0x1,0x44(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804a716 <__sprintf_chk@plt+0x1496>
test   %edi,%edi
movb   $0x0,0x2c(%esp)
movb   $0x1,0x38(%esp)
je     804a723 <__sprintf_chk@plt+0x14a3>
mov    0x3c(%esp),%ebx
mov    0x40(%esp),%eax
movzbl 0x44(%esp),%edx
movb   $0x0,0x38(%esp)
add    %ebx,%eax
cmp    %eax,%esi
mov    %eax,0x3c(%esp)
ja     804a6e0 <__sprintf_chk@plt+0x1460>
test   %dl,%dl
je     804ace0 <__sprintf_chk@plt+0x1a60>
mov    %edi,(%esp)
call   8049120 <iswalnum@plt>
test   %eax,%eax
sete   0x1f(%esp)
mov    0x18(%esp),%eax
lea    0x68(%esp),%edi
movb   $0x0,0x64(%esp)
cmpb   $0x0,0x64(%esp)
movl   $0x0,0x4(%ebp)
mov    %esi,0x3c(%esp)
movb   $0x0,0x2c(%esp)
movl   $0x0,0x0(%ebp)
movb   $0x0,0x38(%esp)
mov    %eax,0x74(%esp)
movl   $0x0,0x68(%esp)
movl   $0x0,0x6c(%esp)
movb   $0x0,0x70(%esp)
mov    %esi,0x14(%esp)
jne    804aa19 <__sprintf_chk@plt+0x1799>
lea    0x0(%esi),%esi
mov    0x74(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804aba8 <__sprintf_chk@plt+0x1928>
movl   $0x1,0x78(%esp)
movsbl (%edx),%eax
movb   $0x1,0x7c(%esp)
mov    %eax,0x80(%esp)
mov    0x80(%esp),%edx
movb   $0x1,0x70(%esp)
test   %edx,%edx
jne    804a9da <__sprintf_chk@plt+0x175a>
movzbl 0x38(%esp),%ebx
mov    0x14(%esp),%esi
test   %bl,%bl
jne    804ac70 <__sprintf_chk@plt+0x19f0>
cmpb   $0x0,0x2c(%esp)
jne    804ada1 <__sprintf_chk@plt+0x1b21>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804ad8c <__sprintf_chk@plt+0x1b0c>
movl   $0x1,0x40(%esp)
movsbl (%edx),%edi
mov    $0x1,%ebx
movb   $0x1,0x44(%esp)
mov    %edi,0x48(%esp)
movb   $0x1,0x38(%esp)
test   %bl,%bl
je     804a90b <__sprintf_chk@plt+0x168b>
test   %edi,%edi
je     804a920 <__sprintf_chk@plt+0x16a0>
cmpb   $0x0,0x44(%esp)
je     804a920 <__sprintf_chk@plt+0x16a0>
mov    %edi,(%esp)
call   8049120 <iswalnum@plt>
test   %eax,%eax
jne    804a92b <__sprintf_chk@plt+0x16ab>
xchg   %ax,%ax
cmpb   $0x0,0x1f(%esp)
jne    804ae80 <__sprintf_chk@plt+0x1c00>
movl   $0x0,0x4(%ebp)
mov    %esi,0x3c(%esp)
movb   $0x0,0x2c(%esp)
movl   $0x0,0x0(%ebp)
movb   $0x0,0x38(%esp)
movzbl (%esi),%eax
mov    %eax,%edx
shr    $0x5,%dl
movzbl %dl,%edx
mov    0x80511c0(,%edx,4),%edx
bt     %eax,%edx
jae    804acf0 <__sprintf_chk@plt+0x1a70>
movl   $0x1,0x40(%esp)
movsbl (%esi),%eax
movb   $0x1,0x44(%esp)
mov    %eax,0x48(%esp)
mov    0x48(%esp),%eax
movb   $0x1,0x38(%esp)
test   %eax,%eax
jne    804a9ba <__sprintf_chk@plt+0x173a>
xor    %ebx,%ebx
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048e90 <free@plt>
mov    %ebx,%eax
mov    0x9c(%esp),%edi
xor    %gs:0x14,%edi
jne    804aed2 <__sprintf_chk@plt+0x1c52>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x1,0x40(%esp)
add    0x40(%esp),%esi
mov    %esi,%ebx
jmp    804a688 <__sprintf_chk@plt+0x1408>
lea    0x0(%esi),%esi
movl   $0x1,0x78(%esp)
movb   $0x0,0x7c(%esp)
movb   $0x1,0x70(%esp)
movzbl 0x38(%esp),%ebx
test   %bl,%bl
je     804aaa8 <__sprintf_chk@plt+0x1828>
movzbl 0x44(%esp),%ebx
test   %bl,%bl
jne    804aaf0 <__sprintf_chk@plt+0x1870>
mov    0x40(%esp),%eax
add    %eax,0x3c(%esp)
mov    0x78(%esp),%eax
add    %eax,0x74(%esp)
cmpb   $0x0,0x64(%esp)
movb   $0x0,0x38(%esp)
movb   $0x0,0x70(%esp)
je     804a860 <__sprintf_chk@plt+0x15e0>
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x74(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %edi,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x80(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x78(%esp)
je     804a9c8 <__sprintf_chk@plt+0x1748>
cmp    $0xfffffffe,%eax
je     804ac00 <__sprintf_chk@plt+0x1980>
test   %eax,%eax
jne    804aa87 <__sprintf_chk@plt+0x1807>
mov    0x74(%esp),%eax
movl   $0x1,0x78(%esp)
cmpb   $0x0,(%eax)
jne    804aeae <__sprintf_chk@plt+0x1c2e>
mov    0x80(%esp),%esi
test   %esi,%esi
jne    804aed7 <__sprintf_chk@plt+0x1c57>
mov    %edi,(%esp)
movb   $0x1,0x7c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804a896 <__sprintf_chk@plt+0x1616>
movb   $0x0,0x64(%esp)
jmp    804a896 <__sprintf_chk@plt+0x1616>
xchg   %ax,%ax
cmpb   $0x0,0x2c(%esp)
jne    804ab1d <__sprintf_chk@plt+0x189d>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804ab08 <__sprintf_chk@plt+0x1888>
movl   $0x1,0x40(%esp)
movsbl (%edx),%eax
mov    $0x1,%ebx
movb   $0x1,0x44(%esp)
mov    %eax,0x48(%esp)
test   %bl,%bl
movb   $0x1,0x38(%esp)
je     804a9f4 <__sprintf_chk@plt+0x1774>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804a9f4 <__sprintf_chk@plt+0x1774>
jmp    804a723 <__sprintf_chk@plt+0x14a3>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ae8a <__sprintf_chk@plt+0x1c0a>
movb   $0x1,0x2c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x3c(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x40(%esp)
je     804abc8 <__sprintf_chk@plt+0x1948>
cmp    $0xfffffffe,%eax
je     804ac20 <__sprintf_chk@plt+0x19a0>
test   %eax,%eax
jne    804ab81 <__sprintf_chk@plt+0x1901>
mov    0x3c(%esp),%eax
movl   $0x1,0x40(%esp)
cmpb   $0x0,(%eax)
jne    804aeae <__sprintf_chk@plt+0x1c2e>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804aed7 <__sprintf_chk@plt+0x1c57>
mov    %ebp,(%esp)
mov    $0x1,%ebx
movb   $0x1,0x44(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804aae3 <__sprintf_chk@plt+0x1863>
movb   $0x0,0x2c(%esp)
jmp    804aae3 <__sprintf_chk@plt+0x1863>
lea    0x0(%esi),%esi
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ae8a <__sprintf_chk@plt+0x1c0a>
movb   $0x1,0x64(%esp)
jmp    804aa19 <__sprintf_chk@plt+0x1799>
lea    0x0(%esi),%esi
movl   $0x1,0x40(%esp)
movb   $0x0,0x44(%esp)
jmp    804aae3 <__sprintf_chk@plt+0x1863>
lea    0x0(%esi),%esi
movl   $0x1,0x40(%esp)
mov    0x48(%esp),%edi
movb   $0x0,0x44(%esp)
mov    0x3c(%esp),%ebx
jmp    804a7d6 <__sprintf_chk@plt+0x1556>
lea    0x0(%esi),%esi
mov    0x74(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x7c(%esp)
mov    %eax,0x78(%esp)
jmp    804a9d5 <__sprintf_chk@plt+0x1755>
lea    0x0(%esi),%esi
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x44(%esp)
mov    %eax,0x40(%esp)
jmp    804aae3 <__sprintf_chk@plt+0x1863>
lea    0x0(%esi),%esi
mov    0x48(%esp),%edi
jmp    804a7ab <__sprintf_chk@plt+0x152b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x3c(%esp),%ebx
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    0x48(%esp),%edi
movb   $0x0,0x44(%esp)
mov    %eax,0x40(%esp)
jmp    804a7d6 <__sprintf_chk@plt+0x1556>
xchg   %ax,%ax
mov    0x48(%esp),%edi
movzbl 0x44(%esp),%ebx
jmp    804a903 <__sprintf_chk@plt+0x1683>
xchg   %ax,%ax
cmp    %esi,%ebx
mov    $0x1,%edi
jae    804aca2 <__sprintf_chk@plt+0x1a22>
call   8049260 <__ctype_b_loc@plt>
movzbl -0x1(%esi),%edx
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edi
shr    $0x3,%di
xor    $0x1,%edi
and    $0x1,%edi
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movzbl (%esi,%eax,1),%ebx
test   %bl,%bl
je     804acc3 <__sprintf_chk@plt+0x1a43>
call   8049260 <__ctype_b_loc@plt>
mov    (%eax),%eax
testb  $0x8,(%eax,%ebx,2)
jne    804accd <__sprintf_chk@plt+0x1a4d>
mov    %edi,%eax
test   %al,%al
jne    804ae80 <__sprintf_chk@plt+0x1c00>
cmpb   $0x0,(%esi)
je     804a983 <__sprintf_chk@plt+0x1703>
lea    0x1(%esi),%ebx
jmp    804a688 <__sprintf_chk@plt+0x1408>
xchg   %ax,%ax
movb   $0x1,0x1f(%esp)
jmp    804a809 <__sprintf_chk@plt+0x1589>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ae8a <__sprintf_chk@plt+0x1c0a>
movb   $0x1,0x2c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x3c(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebp,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x40(%esp)
je     804a9b2 <__sprintf_chk@plt+0x1732>
cmp    $0xfffffffe,%eax
je     804ae31 <__sprintf_chk@plt+0x1bb1>
test   %eax,%eax
jne    804ad6d <__sprintf_chk@plt+0x1aed>
mov    0x3c(%esp),%eax
movl   $0x1,0x40(%esp)
cmpb   $0x0,(%eax)
jne    804aeae <__sprintf_chk@plt+0x1c2e>
mov    0x48(%esp),%ecx
test   %ecx,%ecx
jne    804aed7 <__sprintf_chk@plt+0x1c57>
mov    %ebp,(%esp)
movb   $0x1,0x44(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804a976 <__sprintf_chk@plt+0x16f6>
movb   $0x0,0x2c(%esp)
jmp    804a976 <__sprintf_chk@plt+0x16f6>
mov    %ebp,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ae8a <__sprintf_chk@plt+0x1c0a>
movb   $0x1,0x2c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x3c(%esp),%edi
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebp,0xc(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x40(%esp)
je     804ae4c <__sprintf_chk@plt+0x1bcc>
cmp    $0xfffffffe,%eax
je     804ae62 <__sprintf_chk@plt+0x1be2>
test   %eax,%eax
jne    804ae09 <__sprintf_chk@plt+0x1b89>
mov    0x3c(%esp),%eax
movl   $0x1,0x40(%esp)
cmpb   $0x0,(%eax)
jne    804aeae <__sprintf_chk@plt+0x1c2e>
mov    0x48(%esp),%ebx
test   %ebx,%ebx
jne    804aed7 <__sprintf_chk@plt+0x1c57>
xor    %edi,%edi
jmp    804ae0d <__sprintf_chk@plt+0x1b8d>
mov    0x48(%esp),%edi
mov    %ebp,(%esp)
mov    $0x1,%ebx
movb   $0x1,0x44(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804a8fe <__sprintf_chk@plt+0x167e>
movb   $0x0,0x2c(%esp)
jmp    804a8fe <__sprintf_chk@plt+0x167e>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    %eax,0x40(%esp)
add    0x40(%esp),%esi
mov    %esi,%ebx
jmp    804a688 <__sprintf_chk@plt+0x1408>
movl   $0x1,0x40(%esp)
mov    0x48(%esp),%edi
movb   $0x0,0x44(%esp)
jmp    804a8fe <__sprintf_chk@plt+0x167e>
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    0x48(%esp),%edi
movb   $0x0,0x44(%esp)
mov    %eax,0x40(%esp)
jmp    804a8fe <__sprintf_chk@plt+0x167e>
mov    $0x1,%ebx
jmp    804a985 <__sprintf_chk@plt+0x1705>
movl   $0x8050b0c,0xc(%esp)
movl   $0x93,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050abe,(%esp)
call   8049250 <__assert_fail@plt>
movl   $0x8050b0c,0xc(%esp)
movl   $0xaf,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050ad5,(%esp)
call   8049250 <__assert_fail@plt>
call   8048f10 <__stack_chk_fail@plt>
movl   $0x8050b0c,0xc(%esp)
movl   $0xb0,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050aec,(%esp)
call   8049250 <__assert_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%esi
movl   $0x5,0x8(%esp)
movl   $0x0,(%esp)
mov    %esi,0x4(%esp)
call   8048ef0 <dcgettext@plt>
cmp    %esi,%eax
mov    %eax,%ebx
je     804af33 <__sprintf_chk@plt+0x1cb3>
mov    %esi,%edx
call   804a650 <__sprintf_chk@plt+0x13d0>
test   %al,%al
je     804af40 <__sprintf_chk@plt+0x1cc0>
add    $0x20,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    %esi,(%esp)
mov    %eax,%edi
call   80490a0 <strlen@plt>
lea    0x4(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
movl   $0x8050afe,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,%edi
mov    %eax,(%esp)
mov    %edi,%ebx
call   8049280 <__sprintf_chk@plt>
add    $0x20,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8048ef0 <dcgettext@plt>
mov    %ebx,%ebp
mov    %eax,0x18(%esp)
call   804d930 <__sprintf_chk@plt+0x46b0>
movl   $0x8050b06,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,%edi
call   804d850 <__sprintf_chk@plt+0x45d0>
test   %eax,%eax
jne    804b0b8 <__sprintf_chk@plt+0x1e38>
xor    %edi,%edi
test   %ebx,%ebx
mov    %ebx,0x1c(%esp)
je     804b178 <__sprintf_chk@plt+0x1ef8>
mov    0x40(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048e20 <strcmp@plt>
test   %eax,%eax
jne    804b048 <__sprintf_chk@plt+0x1dc8>
cmp    %ebx,%esi
jne    804b198 <__sprintf_chk@plt+0x1f18>
cmp    %ebx,%edi
xchg   %ax,%ax
jne    804b030 <__sprintf_chk@plt+0x1db0>
mov    %ebx,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %edi,%edi
je     804b022 <__sprintf_chk@plt+0x1da2>
mov    %edi,(%esp)
call   8048e90 <free@plt>
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x40(%esp),%edx
mov    0x18(%esp),%eax
call   804a650 <__sprintf_chk@plt+0x13d0>
test   %al,%al
jne    804b090 <__sprintf_chk@plt+0x1e10>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804b072 <__sprintf_chk@plt+0x1df2>
mov    0x1c(%esp),%edx
mov    0x18(%esp),%eax
call   804a650 <__sprintf_chk@plt+0x13d0>
test   %al,%al
jne    804b090 <__sprintf_chk@plt+0x1e10>
test   %ebp,%ebp
je     804b1b0 <__sprintf_chk@plt+0x1f30>
mov    0x18(%esp),%eax
mov    %ebp,%edx
call   804a650 <__sprintf_chk@plt+0x13d0>
test   %al,%al
je     804b1b0 <__sprintf_chk@plt+0x1f30>
lea    0x0(%esi),%esi
test   %esi,%esi
je     804b09c <__sprintf_chk@plt+0x1e1c>
mov    %esi,(%esp)
call   8048e90 <free@plt>
test   %edi,%edi
mov    0x18(%esp),%eax
je     804b024 <__sprintf_chk@plt+0x1da4>
mov    %edi,(%esp)
call   8048e90 <free@plt>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,0x8(%esp)
movl   $0x8050b06,0x4(%esp)
mov    %ebx,(%esp)
call   804d810 <__sprintf_chk@plt+0x4590>
mov    %edi,(%esp)
mov    %eax,%esi
call   80490a0 <strlen@plt>
mov    %eax,%ebp
lea    0xb(%eax),%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    %ebp,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   8048ea0 <memcpy@plt>
mov    0x1c(%esp),%edx
mov    $0x5449,%ecx
add    %edx,%ebp
mov    %cx,0x8(%ebp)
movl   $0x52542f2f,0x0(%ebp)
movl   $0x4c534e41,0x4(%ebp)
movb   $0x0,0xa(%ebp)
mov    %edx,0x8(%esp)
movl   $0x8050b06,0x4(%esp)
mov    %ebx,(%esp)
call   804d810 <__sprintf_chk@plt+0x4590>
mov    0x1c(%esp),%edx
mov    %edx,(%esp)
mov    %eax,%ebp
call   8048e90 <free@plt>
test   %ebp,%ebp
je     804b230 <__sprintf_chk@plt+0x1fb0>
movl   $0x3f,0x4(%esp)
mov    %ebp,(%esp)
call   8049080 <strchr@plt>
test   %eax,%eax
je     804b21f <__sprintf_chk@plt+0x1f9f>
mov    %ebp,(%esp)
mov    %esi,%ebx
xor    %ebp,%ebp
call   8048e90 <free@plt>
xor    %edi,%edi
test   %ebx,%ebx
mov    %ebx,0x1c(%esp)
jne    804affc <__sprintf_chk@plt+0x1d7c>
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
je     804b238 <__sprintf_chk@plt+0x1fb8>
mov    %ebx,%edi
mov    %ebp,%ebx
movl   $0x0,0x1c(%esp)
jmp    804affc <__sprintf_chk@plt+0x1d7c>
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
je     804b01c <__sprintf_chk@plt+0x1d9c>
mov    %esi,(%esp)
call   8048e90 <free@plt>
jmp    804b01c <__sprintf_chk@plt+0x1d9c>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    %ebx,(%esp)
mov    %eax,%ebp
call   80490a0 <strlen@plt>
lea    0x4(%ebp,%eax,1),%eax
mov    %eax,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    %ebx,0x14(%esp)
movl   $0x8050afe,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,%ebp
mov    0x18(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x10(%esp)
call   8049280 <__sprintf_chk@plt>
test   %esi,%esi
je     804b20c <__sprintf_chk@plt+0x1f8c>
mov    %esi,(%esp)
call   8048e90 <free@plt>
test   %edi,%edi
mov    %ebp,%eax
je     804b024 <__sprintf_chk@plt+0x1da4>
mov    %ebp,0x18(%esp)
jmp    804b0a4 <__sprintf_chk@plt+0x1e24>
test   %esi,%esi
je     804b247 <__sprintf_chk@plt+0x1fc7>
mov    %esi,0x1c(%esp)
mov    %ebp,%edi
mov    %esi,%ebx
jmp    804affc <__sprintf_chk@plt+0x1d7c>
mov    %esi,%ebx
jmp    804afee <__sprintf_chk@plt+0x1d6e>
nop
mov    %ebp,0x1c(%esp)
mov    %ebp,%edi
mov    0x40(%esp),%ebx
jmp    804affc <__sprintf_chk@plt+0x1d7c>
mov    %ebp,%ebx
jmp    804b180 <__sprintf_chk@plt+0x1f00>
xchg   %ax,%ax
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804b271 <__sprintf_chk@plt+0x1ff1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049220 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804b2b0 <__sprintf_chk@plt+0x2030>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   804d930 <__sprintf_chk@plt+0x46b0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804b318 <__sprintf_chk@plt+0x2098>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804b300 <__sprintf_chk@plt+0x2080>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x2d,0x3(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x38,0x4(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x0,0x5(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x60,(%esi)
mov    $0x8050b2c,%eax
mov    $0x8050b1f,%edx
cmovne %edx,%eax
jmp    804b2a8 <__sprintf_chk@plt+0x2028>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8050b26,%eax
cmp    $0x7,%edi
mov    $0x8050aea,%edx
cmovne %edx,%eax
jmp    804b2a8 <__sprintf_chk@plt+0x2028>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804b300 <__sprintf_chk@plt+0x2080>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x31,0x2(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x38,0x3(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x30,0x4(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x33,0x5(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x30,0x6(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x0,0x7(%eax)
jne    804b300 <__sprintf_chk@plt+0x2080>
cmpb   $0x60,(%esi)
mov    $0x8050b28,%eax
mov    $0x8050b23,%edx
cmovne %edx,%eax
jmp    804b2a8 <__sprintf_chk@plt+0x2028>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804bc48 <__sprintf_chk@plt+0x29c8>
mov    0x94(%esp),%eax
jmp    *0x8050b80(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804ba50 <__sprintf_chk@plt+0x27d0>
test   %al,%al
je     804ba63 <__sprintf_chk@plt+0x27e3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804ba38 <__sprintf_chk@plt+0x27b8>
cmpb   $0x0,0x58(%esp)
je     804ba38 <__sprintf_chk@plt+0x27b8>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804ba38 <__sprintf_chk@plt+0x27b8>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048ee0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804bad0 <__sprintf_chk@plt+0x2850>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804b7e8 <__sprintf_chk@plt+0x2568>
movzbl %bl,%eax
jmp    *0x8050ba4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804b628 <__sprintf_chk@plt+0x23a8>
cmpl   $0x3,0x94(%esp)
jne    804b588 <__sprintf_chk@plt+0x2308>
testb  $0x4,0x98(%esp)
je     804b588 <__sprintf_chk@plt+0x2308>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804b588 <__sprintf_chk@plt+0x2308>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804b588 <__sprintf_chk@plt+0x2308>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804b588 <__sprintf_chk@plt+0x2308>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804b588 <__sprintf_chk@plt+0x2308>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmp    %edi,%ebp
jae    804b54e <__sprintf_chk@plt+0x22ce>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b55e <__sprintf_chk@plt+0x22de>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b56e <__sprintf_chk@plt+0x22ee>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804b57e <__sprintf_chk@plt+0x22fe>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804b596 <__sprintf_chk@plt+0x2316>
cmpb   $0x0,0x5a(%esp)
jne    804b5bb <__sprintf_chk@plt+0x233b>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804b5bb <__sprintf_chk@plt+0x233b>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804b5c2 <__sprintf_chk@plt+0x2342>
cmpb   $0x0,0x24(%esp)
je     804b5d8 <__sprintf_chk@plt+0x2358>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmp    %edi,%ebp
jae    804b5d5 <__sprintf_chk@plt+0x2355>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804b5e6 <__sprintf_chk@plt+0x2366>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804b428 <__sprintf_chk@plt+0x21a8>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804bc38 <__sprintf_chk@plt+0x29b8>
test   %al,%al
jne    804b588 <__sprintf_chk@plt+0x2308>
test   %esi,%esi
jne    804b588 <__sprintf_chk@plt+0x2308>
cmpl   $0x2,0x94(%esp)
jne    804b588 <__sprintf_chk@plt+0x2308>
nop
cmpb   $0x0,0x2f(%esp)
je     804b588 <__sprintf_chk@plt+0x2308>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804bd62 <__sprintf_chk@plt+0x2ae2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804bcab <__sprintf_chk@plt+0x2a2b>
cmpb   $0x0,0x58(%esp)
je     804b588 <__sprintf_chk@plt+0x2308>
mov    %eax,%ebx
jmp    804b5c2 <__sprintf_chk@plt+0x2342>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804b6b3 <__sprintf_chk@plt+0x2433>
nop
mov    $0x66,%eax
jmp    804b6b3 <__sprintf_chk@plt+0x2433>
nop
mov    $0x76,%eax
jmp    804b6b3 <__sprintf_chk@plt+0x2433>
nop
mov    $0x6e,%eax
jmp    804b6a5 <__sprintf_chk@plt+0x2425>
nop
mov    $0x74,%eax
jmp    804b6a5 <__sprintf_chk@plt+0x2425>
nop
cmpb   $0x0,0x58(%esp)
je     804bc20 <__sprintf_chk@plt+0x29a0>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmp    %edi,%ebp
jae    804b712 <__sprintf_chk@plt+0x2492>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804b758 <__sprintf_chk@plt+0x24d8>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804b758 <__sprintf_chk@plt+0x24d8>
cmp    %eax,%edi
ja     804bcc0 <__sprintf_chk@plt+0x2a40>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b74e <__sprintf_chk@plt+0x24ce>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804b596 <__sprintf_chk@plt+0x2316>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804b6b3 <__sprintf_chk@plt+0x2433>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804b78e <__sprintf_chk@plt+0x250e>
cmpb   $0x0,0x2f(%esp)
je     804b78e <__sprintf_chk@plt+0x250e>
test   %dl,%dl
jne    804b5d8 <__sprintf_chk@plt+0x2358>
mov    %ebx,%eax
jmp    804b6a5 <__sprintf_chk@plt+0x2425>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804b588 <__sprintf_chk@plt+0x2308>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmp    %edi,%ebp
jae    804b7bd <__sprintf_chk@plt+0x253d>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b7cd <__sprintf_chk@plt+0x254d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b7dd <__sprintf_chk@plt+0x255d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804b588 <__sprintf_chk@plt+0x2308>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804bae0 <__sprintf_chk@plt+0x2860>
call   8049260 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804b588 <__sprintf_chk@plt+0x2308>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804b894 <__sprintf_chk@plt+0x2614>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmp    %edi,%ebp
jae    804b843 <__sprintf_chk@plt+0x25c3>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b856 <__sprintf_chk@plt+0x25d6>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804b86c <__sprintf_chk@plt+0x25ec>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804b5db <__sprintf_chk@plt+0x235b>
cmp    %edi,%ebp
jae    804b889 <__sprintf_chk@plt+0x2609>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804b830 <__sprintf_chk@plt+0x25b0>
cmpb   $0x0,0x24(%esp)
je     804b875 <__sprintf_chk@plt+0x25f5>
cmp    %edi,%ebp
jae    804b8a7 <__sprintf_chk@plt+0x2627>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804b875 <__sprintf_chk@plt+0x25f5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bd67 <__sprintf_chk@plt+0x2ae7>
test   %edi,%edi
je     804bc6d <__sprintf_chk@plt+0x29ed>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8050b26,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804b408 <__sprintf_chk@plt+0x2188>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8050b26,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804b408 <__sprintf_chk@plt+0x2188>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
lea    0x0(%esi,%eiz,1),%esi
je     804b97c <__sprintf_chk@plt+0x26fc>
mov    0x94(%esp),%edx
mov    $0x8050b30,%eax
call   804b280 <__sprintf_chk@plt+0x2000>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x8050aea,%eax
call   804b280 <__sprintf_chk@plt+0x2000>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804b9aa <__sprintf_chk@plt+0x272a>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804b9aa <__sprintf_chk@plt+0x272a>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804b99f <__sprintf_chk@plt+0x271f>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804b998 <__sprintf_chk@plt+0x2718>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8050aea,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804b408 <__sprintf_chk@plt+0x2188>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804bd83 <__sprintf_chk@plt+0x2b03>
test   %edi,%edi
je     804bc8c <__sprintf_chk@plt+0x2a0c>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8050aea,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804b408 <__sprintf_chk@plt+0x2188>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804b4c0 <__sprintf_chk@plt+0x2240>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804b448 <__sprintf_chk@plt+0x21c8>
test   %ebp,%ebp
jne    804ba7c <__sprintf_chk@plt+0x27fc>
cmpl   $0x2,0x94(%esp)
jne    804ba7c <__sprintf_chk@plt+0x27fc>
cmpb   $0x0,0x2f(%esp)
jne    804b638 <__sprintf_chk@plt+0x23b8>
cmpb   $0x0,0x2f(%esp)
jne    804bab2 <__sprintf_chk@plt+0x2832>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804bab2 <__sprintf_chk@plt+0x2832>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804bab2 <__sprintf_chk@plt+0x2832>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804baa7 <__sprintf_chk@plt+0x2827>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804baa0 <__sprintf_chk@plt+0x2820>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804b682 <__sprintf_chk@plt+0x2402>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804b682 <__sprintf_chk@plt+0x2402>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804b4c0 <__sprintf_chk@plt+0x2240>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804bc4d <__sprintf_chk@plt+0x29cd>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804bccd <__sprintf_chk@plt+0x2a4d>
cmp    $0xffffffff,%eax
je     804bce8 <__sprintf_chk@plt+0x2a68>
cmp    $0xfffffffe,%eax
je     804bd03 <__sprintf_chk@plt+0x2a83>
cmpb   $0x0,0x2f(%esp)
je     804bbaf <__sprintf_chk@plt+0x292f>
cmpl   $0x2,0x94(%esp)
jne    804bbaf <__sprintf_chk@plt+0x292f>
cmp    $0x1,%eax
je     804bbaf <__sprintf_chk@plt+0x292f>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804bba8 <__sprintf_chk@plt+0x2928>
movzbl %al,%eax
jmp    *0x8050da0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804bb90 <__sprintf_chk@plt+0x2910>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8048f40 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804bb21 <__sprintf_chk@plt+0x28a1>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804b813 <__sprintf_chk@plt+0x2593>
and    0x58(%esp),%dl
jmp    804b81d <__sprintf_chk@plt+0x259d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804b638 <__sprintf_chk@plt+0x23b8>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804b588 <__sprintf_chk@plt+0x2308>
add    $0x1,%esi
jmp    804b428 <__sprintf_chk@plt+0x21a8>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804b609 <__sprintf_chk@plt+0x2389>
call   8049220 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804bafe <__sprintf_chk@plt+0x287e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8050b26,0x3c(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8050aea,0x3c(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
cmpb   $0x0,0x2f(%esp)
je     804b6b3 <__sprintf_chk@plt+0x2433>
jmp    804b638 <__sprintf_chk@plt+0x23b8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804b73e <__sprintf_chk@plt+0x24be>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bbf5 <__sprintf_chk@plt+0x2975>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bbf5 <__sprintf_chk@plt+0x2975>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804bd58 <__sprintf_chk@plt+0x2ad8>
cmpb   $0x0,(%eax)
je     804bd58 <__sprintf_chk@plt+0x2ad8>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804bd46 <__sprintf_chk@plt+0x2ac6>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804bd50 <__sprintf_chk@plt+0x2ad0>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804bd40 <__sprintf_chk@plt+0x2ac0>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804bbf5 <__sprintf_chk@plt+0x2975>
call   8048f10 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8050b26,0x3c(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8050aea,0x3c(%esp)
jmp    804b408 <__sprintf_chk@plt+0x2188>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049140 <__errno_location@plt>
test   %edi,%edi
mov    0x80541b0,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804bf2c <__sprintf_chk@plt+0x2cac>
cmp    0x80541bc,%edi
jb     804be38 <__sprintf_chk@plt+0x2bb8>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804bf31 <__sprintf_chk@plt+0x2cb1>
cmp    $0x80541b4,%esi
lea    0x0(,%ebp,8),%eax
je     804bf00 <__sprintf_chk@plt+0x2c80>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804d530 <__sprintf_chk@plt+0x42b0>
mov    %eax,%esi
mov    %eax,0x80541b0
mov    0x80541bc,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049100 <memset@plt>
mov    %ebp,0x80541bc
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
cmp    %eax,%ebp
ja     804bee7 <__sprintf_chk@plt+0x2c67>
lea    0x1(%eax),%ebp
cmp    $0x8054240,%esi
mov    %ebp,(%edi)
je     804bea2 <__sprintf_chk@plt+0x2c22>
mov    %esi,(%esp)
call   8048e90 <free@plt>
mov    %ebp,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804d530 <__sprintf_chk@plt+0x42b0>
mov    0x80541b8,%edx
mov    %eax,%esi
mov    %eax,0x80541b0
mov    0x80541b4,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804be0f <__sprintf_chk@plt+0x2b8f>
call   8049220 <abort@plt>
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049140 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8054340,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804d6d0 <__sprintf_chk@plt+0x4450>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8054340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804bfa0 <__sprintf_chk@plt+0x2d20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8054340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8054340,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8054340,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8054340,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804c053 <__sprintf_chk@plt+0x2dd3>
test   %ecx,%ecx
je     804c053 <__sprintf_chk@plt+0x2dd3>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049220 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8054340,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049140 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8054340,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049140 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804b370 <__sprintf_chk@plt+0x20f0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804c188 <__sprintf_chk@plt+0x2f08>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c0c0 <__sprintf_chk@plt+0x2e40>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x80541bc,%edi
mov    0x80541b0,%esi
cmp    $0x1,%edi
jbe    804c203 <__sprintf_chk@plt+0x2f83>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048e90 <free@plt>
cmp    %edi,%ebx
jne    804c1f0 <__sprintf_chk@plt+0x2f70>
mov    0x4(%esi),%eax
cmp    $0x8054240,%eax
je     804c229 <__sprintf_chk@plt+0x2fa9>
mov    %eax,(%esp)
call   8048e90 <free@plt>
movl   $0x100,0x80541b4
00
movl   $0x8054240,0x80541b8
08
cmp    $0x80541b4,%esi
je     804c243 <__sprintf_chk@plt+0x2fc3>
mov    %esi,(%esp)
call   8048e90 <free@plt>
movl   $0x80541b4,0x80541b0
08
movl   $0x1,0x80541bc
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8054340,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8054340,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8054340,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8054340,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b250 <__sprintf_chk@plt+0x1fd0>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bda0 <__sprintf_chk@plt+0x2b20>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b250 <__sprintf_chk@plt+0x1fd0>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bda0 <__sprintf_chk@plt+0x2b20>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c2e0 <__sprintf_chk@plt+0x3060>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c310 <__sprintf_chk@plt+0x3090>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8054340,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8054344,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8054348,%eax
mov    %eax,0x18(%esp)
mov    0x805434c,%eax
mov    %eax,0x1c(%esp)
mov    0x8054350,%eax
mov    %eax,0x20(%esp)
mov    0x8054354,%eax
mov    %eax,0x24(%esp)
mov    0x8054358,%eax
mov    %eax,0x28(%esp)
mov    0x805435c,%eax
mov    %eax,0x2c(%esp)
mov    0x8054360,%eax
mov    %eax,0x30(%esp)
mov    0x8054364,%eax
mov    %eax,0x34(%esp)
mov    0x8054368,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805436c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804bda0 <__sprintf_chk@plt+0x2b20>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c3a0 <__sprintf_chk@plt+0x3120>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804c3a0 <__sprintf_chk@plt+0x3120>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c3a0 <__sprintf_chk@plt+0x3120>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8054340,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8054344,%eax
mov    %eax,0x14(%esp)
mov    0x8054348,%eax
mov    %eax,0x18(%esp)
mov    0x805434c,%eax
mov    %eax,0x1c(%esp)
mov    0x8054350,%eax
mov    %eax,0x20(%esp)
mov    0x8054354,%eax
mov    %eax,0x24(%esp)
mov    0x8054358,%eax
mov    %eax,0x28(%esp)
mov    0x805435c,%eax
mov    %eax,0x2c(%esp)
mov    0x8054360,%eax
mov    %eax,0x30(%esp)
mov    0x8054364,%eax
mov    %eax,0x34(%esp)
mov    0x8054368,%eax
mov    %eax,0x38(%esp)
mov    0x805436c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804c020 <__sprintf_chk@plt+0x2da0>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804bda0 <__sprintf_chk@plt+0x2b20>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c4e0 <__sprintf_chk@plt+0x3260>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c4e0 <__sprintf_chk@plt+0x3260>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c4e0 <__sprintf_chk@plt+0x3260>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8054180,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8054180,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8054180,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8054180,0x4(%esp)
jmp    804bda0 <__sprintf_chk@plt+0x2b20>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    0x38(%esp),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   8048e40 <read@plt>
test   %eax,%eax
mov    %eax,%ebp
jns    804c720 <__sprintf_chk@plt+0x34a0>
call   8049140 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x4,%edx
je     804c6e8 <__sprintf_chk@plt+0x3468>
cmp    $0x16,%edx
jne    804c720 <__sprintf_chk@plt+0x34a0>
cmp    $0x7fffe000,%ebx
jbe    804c720 <__sprintf_chk@plt+0x34a0>
mov    $0x7fffe000,%ebx
jmp    804c6e8 <__sprintf_chk@plt+0x3468>
xchg   %ax,%ax
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edi
mov    0x34(%esp),%esi
mov    0x38(%esp),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %edi,(%esp)
call   80490e0 <write@plt>
test   %eax,%eax
mov    %eax,%ebp
jns    804c780 <__sprintf_chk@plt+0x3500>
call   8049140 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x4,%edx
je     804c748 <__sprintf_chk@plt+0x34c8>
cmp    $0x16,%edx
jne    804c780 <__sprintf_chk@plt+0x3500>
cmp    $0x7fffe000,%ebx
jbe    804c780 <__sprintf_chk@plt+0x3500>
mov    $0x7fffe000,%ebx
jmp    804c748 <__sprintf_chk@plt+0x34c8>
xchg   %ax,%ax
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%ebx
mov    0x24(%esp),%esi
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
mov    %esi,0x8(%esp)
call   8049150 <memchr@plt>
test   %eax,%eax
je     804c7c0 <__sprintf_chk@plt+0x3540>
sub    %ebx,%eax
add    $0x14,%esp
add    $0x1,%eax
pop    %ebx
pop    %esi
ret
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x6c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x5c(%esp)
xor    %eax,%eax
mov    0x80(%esp),%eax
mov    %eax,(%esp)
call   8049130 <__strdup@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804cd85 <__sprintf_chk@plt+0x3b05>
call   8048f80 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804cab0 <__sprintf_chk@plt+0x3830>
mov    0x84(%esp),%ebx
test   %ebx,%ebx
jne    804cb68 <__sprintf_chk@plt+0x38e8>
mov    0x18(%esp),%esi
xor    %ebx,%ebx
mov    %esi,(%esp)
mov    %esi,0x34(%esp)
call   80490a0 <strlen@plt>
mov    %esi,%edx
movb   $0x0,0x24(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movb   $0x0,0x30(%esp)
lea    (%esi,%eax,1),%ebp
cmp    %ebp,%esi
mov    %ebp,0x20(%esp)
jb     804c8f4 <__sprintf_chk@plt+0x3674>
jmp    804c9d5 <__sprintf_chk@plt+0x3755>
lea    0x0(%esi),%esi
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804c9f8 <__sprintf_chk@plt+0x3778>
movl   $0x1,0x38(%esp)
movsbl (%edx),%eax
mov    $0x1,%esi
mov    0x20(%esp),%ebp
mov    0x34(%esp),%edi
movb   $0x1,0x3c(%esp)
mov    %eax,0x40(%esp)
test   %ebx,%ebx
movb   $0x1,0x30(%esp)
je     804c995 <__sprintf_chk@plt+0x3715>
cmp    $0x1,%ebx
je     804ca18 <__sprintf_chk@plt+0x3798>
cmp    $0x2,%ebx
jne    804ca50 <__sprintf_chk@plt+0x37d0>
cmpb   $0x0,0x3c(%esp)
je     804ca50 <__sprintf_chk@plt+0x37d0>
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049020 <iswspace@plt>
test   %eax,%eax
mov    $0x1,%eax
cmove  %eax,%ebx
lea    0x0(%esi,%eiz,1),%esi
lea    (%edi,%esi,1),%edx
cmp    %ebp,%edx
mov    %edx,0x34(%esp)
movb   $0x0,0x30(%esp)
jae    804c9cc <__sprintf_chk@plt+0x374c>
cmpb   $0x0,0x24(%esp)
lea    0x28(%esp),%edi
je     804c860 <__sprintf_chk@plt+0x35e0>
mov    0x34(%esp),%eax
mov    %edi,0xc(%esp)
sub    %eax,%ebp
mov    %eax,0x4(%esp)
lea    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x38(%esp)
je     804ca60 <__sprintf_chk@plt+0x37e0>
cmp    $0xfffffffe,%eax
je     804ca90 <__sprintf_chk@plt+0x3810>
test   %eax,%eax
jne    804ca80 <__sprintf_chk@plt+0x3800>
mov    0x34(%esp),%ecx
movl   $0x1,0x38(%esp)
cmpb   $0x0,(%ecx)
jne    804cd8a <__sprintf_chk@plt+0x3b0a>
mov    0x40(%esp),%edx
test   %edx,%edx
jne    804cd61 <__sprintf_chk@plt+0x3ae1>
mov    %edi,(%esp)
mov    %ecx,0x14(%esp)
movb   $0x1,0x3c(%esp)
call   8048eb0 <mbsinit@plt>
mov    0x14(%esp),%ecx
test   %eax,%eax
je     804c97e <__sprintf_chk@plt+0x36fe>
movb   $0x0,0x24(%esp)
test   %ebx,%ebx
mov    0x20(%esp),%ebp
mov    %ecx,%edi
mov    0x38(%esp),%esi
movb   $0x1,0x30(%esp)
jne    804c8a9 <__sprintf_chk@plt+0x3629>
cmpb   $0x0,0x3c(%esp)
mov    $0x1,%ebx
je     804c8e0 <__sprintf_chk@plt+0x3660>
mov    0x40(%esp),%eax
xor    %ebx,%ebx
mov    %eax,(%esp)
call   8049020 <iswspace@plt>
lea    (%edi,%esi,1),%edx
mov    %edx,0x34(%esp)
movb   $0x0,0x30(%esp)
test   %eax,%eax
sete   %bl
cmp    %ebp,%edx
jb     804c8f4 <__sprintf_chk@plt+0x3674>
cmp    $0x2,%ebx
je     804cd1d <__sprintf_chk@plt+0x3a9d>
mov    0x5c(%esp),%esi
xor    %gs:0x14,%esi
mov    0x18(%esp),%eax
jne    804cd5c <__sprintf_chk@plt+0x3adc>
add    $0x6c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x28(%esp),%edi
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804cd38 <__sprintf_chk@plt+0x3ab8>
movb   $0x1,0x24(%esp)
jmp    804c903 <__sprintf_chk@plt+0x3683>
xchg   %ax,%ax
cmpb   $0x0,0x3c(%esp)
je     804c8e0 <__sprintf_chk@plt+0x3660>
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049020 <iswspace@plt>
mov    0x1c(%esp),%ecx
test   %eax,%eax
mov    $0x2,%eax
cmovne %edi,%ecx
cmovne %eax,%ebx
mov    %ecx,0x1c(%esp)
jmp    804c8e0 <__sprintf_chk@plt+0x3660>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804c8e0 <__sprintf_chk@plt+0x3660>
lea    0x0(%esi),%esi
movl   $0x1,0x38(%esp)
mov    0x20(%esp),%ebp
mov    $0x1,%esi
movb   $0x0,0x3c(%esp)
mov    0x34(%esp),%edi
jmp    804c89c <__sprintf_chk@plt+0x361c>
nop
mov    0x34(%esp),%ecx
jmp    804c960 <__sprintf_chk@plt+0x36e0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%ebp
mov    0x34(%esp),%edi
movb   $0x0,0x3c(%esp)
mov    %ebp,%edx
sub    %edi,%edx
mov    %edx,0x38(%esp)
mov    %edx,%esi
jmp    804c89c <__sprintf_chk@plt+0x361c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x84(%esp),%eax
test   %eax,%eax
je     804cb21 <__sprintf_chk@plt+0x38a1>
mov    0x18(%esp),%ebx
movzbl (%ebx),%edx
test   %dl,%dl
mov    %edx,0x14(%esp)
je     804cd29 <__sprintf_chk@plt+0x3aa9>
call   8049260 <__ctype_b_loc@plt>
mov    0x14(%esp),%edx
mov    (%eax),%eax
jmp    804caea <__sprintf_chk@plt+0x386a>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
movzbl (%ebx),%edx
test   %dl,%dl
je     804caf4 <__sprintf_chk@plt+0x3874>
movzbl %dl,%edx
testb  $0x20,0x1(%eax,%edx,2)
jne    804cae0 <__sprintf_chk@plt+0x3860>
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    %ebx,0x4(%esp)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048e80 <memmove@plt>
cmpl   $0x1,0x84(%esp)
je     804c9d5 <__sprintf_chk@plt+0x3755>
mov    0x18(%esp),%esi
mov    %esi,(%esp)
call   80490a0 <strlen@plt>
lea    -0x1(%esi,%eax,1),%ebx
cmp    %ebx,%esi
ja     804c9d5 <__sprintf_chk@plt+0x3755>
call   8049260 <__ctype_b_loc@plt>
mov    0x18(%esp),%esi
jmp    804cb56 <__sprintf_chk@plt+0x38d6>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,(%ebx)
sub    $0x1,%ebx
cmp    %ebx,%esi
ja     804c9d5 <__sprintf_chk@plt+0x3755>
movzbl (%ebx),%ecx
mov    (%eax),%edx
testb  $0x20,0x1(%edx,%ecx,2)
jne    804cb48 <__sprintf_chk@plt+0x38c8>
jmp    804c9d5 <__sprintf_chk@plt+0x3755>
nop
mov    0x18(%esp),%ebx
mov    %ebx,(%esp)
mov    %ebx,0x34(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x24(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movb   $0x0,0x30(%esp)
lea    (%ebx,%eax,1),%edx
cmp    %edx,%ebx
mov    %edx,0x20(%esp)
jae    804cd32 <__sprintf_chk@plt+0x3ab2>
lea    0x40(%esp),%ebp
mov    %edx,%esi
lea    0x28(%esp),%edi
jmp    804cc15 <__sprintf_chk@plt+0x3995>
lea    0x0(%esi),%esi
movzbl (%ebx),%eax
mov    %eax,%edx
shr    $0x5,%dl
movzbl %dl,%edx
mov    0x80511c0(,%edx,4),%edx
bt     %eax,%edx
jae    804cc90 <__sprintf_chk@plt+0x3a10>
movl   $0x1,0x38(%esp)
movsbl (%ebx),%eax
mov    0x34(%esp),%ebx
movb   $0x1,0x3c(%esp)
mov    %eax,0x40(%esp)
mov    0x40(%esp),%eax
movb   $0x1,0x30(%esp)
mov    %eax,(%esp)
call   8049020 <iswspace@plt>
test   %eax,%eax
je     804ccc6 <__sprintf_chk@plt+0x3a46>
mov    0x20(%esp),%esi
add    0x38(%esp),%ebx
movb   $0x0,0x30(%esp)
cmp    %ebx,%esi
mov    %ebx,0x34(%esp)
jbe    804ccc6 <__sprintf_chk@plt+0x3a46>
cmpb   $0x0,0x24(%esp)
je     804cbb0 <__sprintf_chk@plt+0x3930>
mov    0x34(%esp),%eax
mov    %edi,0xc(%esp)
mov    %ebp,(%esp)
sub    %eax,%esi
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x38(%esp)
je     804ccb0 <__sprintf_chk@plt+0x3a30>
cmp    $0xfffffffe,%eax
je     804cd08 <__sprintf_chk@plt+0x3a88>
test   %eax,%eax
jne    804ccf8 <__sprintf_chk@plt+0x3a78>
mov    0x34(%esp),%ebx
movl   $0x1,0x38(%esp)
cmpb   $0x0,(%ebx)
jne    804cd8a <__sprintf_chk@plt+0x3b0a>
mov    0x40(%esp),%ecx
test   %ecx,%ecx
jne    804cd61 <__sprintf_chk@plt+0x3ae1>
mov    %edi,(%esp)
movb   $0x1,0x3c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804cbe3 <__sprintf_chk@plt+0x3963>
movb   $0x0,0x24(%esp)
jmp    804cbe3 <__sprintf_chk@plt+0x3963>
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804cd38 <__sprintf_chk@plt+0x3ab8>
movb   $0x1,0x24(%esp)
jmp    804cc1c <__sprintf_chk@plt+0x399c>
lea    0x0(%esi),%esi
mov    0x34(%esp),%ebx
movl   $0x1,0x38(%esp)
movb   $0x0,0x3c(%esp)
movb   $0x1,0x30(%esp)
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    %ebx,0x4(%esp)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048e80 <memmove@plt>
cmpl   $0x1,0x84(%esp)
je     804c9d5 <__sprintf_chk@plt+0x3755>
jmp    804c81b <__sprintf_chk@plt+0x359b>
mov    0x34(%esp),%ebx
jmp    804cc71 <__sprintf_chk@plt+0x39f1>
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%ebx
mov    0x20(%esp),%eax
movb   $0x0,0x3c(%esp)
sub    %ebx,%eax
mov    %eax,0x38(%esp)
jmp    804ccc1 <__sprintf_chk@plt+0x3a41>
mov    0x1c(%esp),%eax
movb   $0x0,(%eax)
jmp    804c9d5 <__sprintf_chk@plt+0x3755>
mov    0x18(%esp),%ebx
jmp    804caf4 <__sprintf_chk@plt+0x3874>
mov    0x18(%esp),%ebx
jmp    804ccc6 <__sprintf_chk@plt+0x3a46>
movl   $0x8050e91,0xc(%esp)
movl   $0x8b,0x8(%esp)
movl   $0x8050e84,0x4(%esp)
movl   $0x8050abe,(%esp)
call   8049250 <__assert_fail@plt>
call   8048f10 <__stack_chk_fail@plt>
movl   $0x8050e91,0xc(%esp)
movl   $0xa7,0x8(%esp)
movl   $0x8050e84,0x4(%esp)
movl   $0x8050aec,(%esp)
call   8049250 <__assert_fail@plt>
call   804d730 <__sprintf_chk@plt+0x44b0>
movl   $0x8050e91,0xc(%esp)
movl   $0xa6,0x8(%esp)
movl   $0x8050e84,0x4(%esp)
movl   $0x8050ad5,(%esp)
call   8049250 <__assert_fail@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804d268 <__sprintf_chk@plt+0x3fe8>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x8050ea3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8050eb6,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8051140,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80491e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8050f14,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804d290 <__sprintf_chk@plt+0x4010>
jmp    *0x8051118(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051078,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80491e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80510a8,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80491e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049220 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8050eba,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491e0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8050eca,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491e0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8050ee1,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80491e0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8050fe0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
jmp    804cf0f <__sprintf_chk@plt+0x3c8f>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051000,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
jmp    804cf0f <__sprintf_chk@plt+0x3c8f>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051024,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
jmp    804cf0f <__sprintf_chk@plt+0x3c8f>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805104c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
jmp    804cf0f <__sprintf_chk@plt+0x3c8f>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x8050eaf,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <__fprintf_chk@plt>
jmp    804ce01 <__sprintf_chk@plt+0x3b81>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80510dc,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804cf9a <__sprintf_chk@plt+0x3d1a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804d33a <__sprintf_chk@plt+0x40ba>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804d330 <__sprintf_chk@plt+0x40b0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804cdb0 <__sprintf_chk@plt+0x3b30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804d392 <__sprintf_chk@plt+0x4112>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804d380 <__sprintf_chk@plt+0x4100>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804cdb0 <__sprintf_chk@plt+0x3b30>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804d370 <__sprintf_chk@plt+0x40f0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x8050efd,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
movl   $0x8050848,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805085e,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
movl   $0x8050740,0xc(%esp)
movl   $0x8050872,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049170 <__printf_chk@plt>
mov    0x8054220,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8050768,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049060 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
je     804d4d9 <__sprintf_chk@plt+0x4259>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804d4d4 <__sprintf_chk@plt+0x4254>
lea    0x0(%esi),%esi
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804d519 <__sprintf_chk@plt+0x4299>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d4c0 <__sprintf_chk@plt+0x4240>
call   804d730 <__sprintf_chk@plt+0x44b0>
xchg   %ax,%ax
jmp    804d4c0 <__sprintf_chk@plt+0x4240>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804d558 <__sprintf_chk@plt+0x42d8>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <realloc@plt>
test   %eax,%eax
je     804d56b <__sprintf_chk@plt+0x42eb>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804d540 <__sprintf_chk@plt+0x42c0>
mov    %eax,(%esp)
call   8048e90 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804d550 <__sprintf_chk@plt+0x42d0>
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804d5b3 <__sprintf_chk@plt+0x4333>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804d530 <__sprintf_chk@plt+0x42b0>
call   804d730 <__sprintf_chk@plt+0x44b0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804d600 <__sprintf_chk@plt+0x4380>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804d618 <__sprintf_chk@plt+0x4398>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804d530 <__sprintf_chk@plt+0x42b0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804d5e9 <__sprintf_chk@plt+0x4369>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804d5e9 <__sprintf_chk@plt+0x4369>
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804d658 <__sprintf_chk@plt+0x43d8>
cmp    $0xaaaaaaa9,%eax
ja     804d664 <__sprintf_chk@plt+0x43e4>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d530 <__sprintf_chk@plt+0x42b0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804d640 <__sprintf_chk@plt+0x43c0>
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049100 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049270 <calloc@plt>
test   %eax,%eax
je     804d6bf <__sprintf_chk@plt+0x443f>
add    $0x1c,%esp
ret
nop
call   804d730 <__sprintf_chk@plt+0x44b0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804d4c0 <__sprintf_chk@plt+0x4240>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048ea0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804d6d0 <__sprintf_chk@plt+0x4450>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805116f,0x4(%esp)
movl   $0x0,(%esp)
call   8048ef0 <dcgettext@plt>
mov    0x8054168,%edx
movl   $0x8050a69,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   8048fd0 <error@plt>
call   8049220 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804f840 <__sprintf_chk@plt+0x65c0>
test   %eax,%eax
mov    %eax,%ebx
js     804d7c0 <__sprintf_chk@plt+0x4540>
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
call   8049140 <__errno_location@plt>
cmpl   $0xc,(%eax)
jne    804d7b6 <__sprintf_chk@plt+0x4536>
call   804d730 <__sprintf_chk@plt+0x44b0>
nop
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fb30 <__sprintf_chk@plt+0x68b0>
test   %eax,%eax
mov    %eax,%ebx
je     804d7f8 <__sprintf_chk@plt+0x4578>
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
call   8049140 <__errno_location@plt>
cmpl   $0xc,(%eax)
jne    804d7ee <__sprintf_chk@plt+0x456e>
call   804d730 <__sprintf_chk@plt+0x44b0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804fd20 <__sprintf_chk@plt+0x6aa0>
test   %eax,%eax
mov    %eax,%ebx
je     804d840 <__sprintf_chk@plt+0x45c0>
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
call   8049140 <__errno_location@plt>
cmpl   $0xc,(%eax)
jne    804d836 <__sprintf_chk@plt+0x45b6>
call   804d730 <__sprintf_chk@plt+0x44b0>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebx
mov    0x18(%esp),%ecx
cmp    %ecx,%ebx
jne    804d872 <__sprintf_chk@plt+0x45f2>
jmp    804d8a5 <__sprintf_chk@plt+0x4625>
lea    0x0(%esi),%esi
add    $0x1,%ebx
add    $0x1,%ecx
cmp    %dl,%al
jne    804d896 <__sprintf_chk@plt+0x4616>
movzbl (%ebx),%eax
lea    -0x41(%eax),%edx
cmp    $0x19,%edx
movzbl (%ecx),%edx
lea    0x20(%eax),%esi
cmova  %eax,%esi
mov    %esi,%eax
lea    -0x41(%edx),%ebp
cmp    $0x19,%ebp
lea    0x20(%edx),%edi
cmovbe %edi,%edx
test   %al,%al
jne    804d868 <__sprintf_chk@plt+0x45e8>
mov    %esi,%eax
movzbl %dl,%edx
movzbl %al,%eax
pop    %ebx
sub    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
pop    %ebx
xor    %eax,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   8048fa0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   804fdf0 <__sprintf_chk@plt+0x6b70>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804d8f0 <__sprintf_chk@plt+0x4670>
test   %dl,%dl
je     804d8e7 <__sprintf_chk@plt+0x4667>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804d910 <__sprintf_chk@plt+0x4690>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804d8e7 <__sprintf_chk@plt+0x4667>
call   8049140 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049140 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   80491a0 <nl_langinfo@plt>
mov    0x8054370,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x8050efc,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     804d9fc <__sprintf_chk@plt+0x477c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     804d9c7 <__sprintf_chk@plt+0x4747>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    804d9a0 <__sprintf_chk@plt+0x4720>
nop
mov    %ebp,(%esp)
call   80490a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   80490a0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     804d9f8 <__sprintf_chk@plt+0x4778>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048e20 <strcmp@plt>
test   %eax,%eax
je     804d9bb <__sprintf_chk@plt+0x473b>
cmp    $0x2a,%bl
jne    804d980 <__sprintf_chk@plt+0x4700>
cmpb   $0x0,0x1(%ebp)
jne    804d980 <__sprintf_chk@plt+0x4700>
mov    %ebp,(%esp)
call   80490a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8051189,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804dcbd <__sprintf_chk@plt+0x4a3d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    804d9c7 <__sprintf_chk@plt+0x4747>
movl   $0x805118f,(%esp)
call   8048fe0 <getenv@plt>
test   %eax,%eax
je     804da15 <__sprintf_chk@plt+0x4795>
cmpb   $0x0,(%eax)
jne    804dc23 <__sprintf_chk@plt+0x49a3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8051180,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     804dc14 <__sprintf_chk@plt+0x4994>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804dcb3 <__sprintf_chk@plt+0x4a33>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048ea0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804da7c <__sprintf_chk@plt+0x47fc>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048e30 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     804dbf8 <__sprintf_chk@plt+0x4978>
movl   $0x805095a,0x4(%esp)
mov    %eax,(%esp)
call   8049050 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     804dbf0 <__sprintf_chk@plt+0x4970>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804dbd6 <__sprintf_chk@plt+0x4956>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     804dae0 <__sprintf_chk@plt+0x4860>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    804dae0 <__sprintf_chk@plt+0x4860>
cmp    $0x23,%eax
je     804dc4d <__sprintf_chk@plt+0x49cd>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049110 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805119f,0x4(%esp)
mov    %esi,(%esp)
call   8049090 <fscanf@plt>
cmp    $0x1,%eax
jle    804dc70 <__sprintf_chk@plt+0x49f0>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    804dc8e <__sprintf_chk@plt+0x4a0e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049000 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     804dcc2 <__sprintf_chk@plt+0x4a42>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8048f90 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8048f90 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     804daec <__sprintf_chk@plt+0x486c>
mov    %esi,(%esp)
call   8049190 <__uflow@plt>
cmp    $0xffffffff,%eax
je     804dc70 <__sprintf_chk@plt+0x49f0>
jmp    804daf5 <__sprintf_chk@plt+0x4875>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049240 <close@plt>
mov    $0x8050efc,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048e90 <free@plt>
mov    %ebp,0x8054370
jmp    804d96f <__sprintf_chk@plt+0x46ef>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    804da3b <__sprintf_chk@plt+0x47bb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   80490a0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     804dc14 <__sprintf_chk@plt+0x4994>
lea    -0x1(%eax),%eax
jmp    804da24 <__sprintf_chk@plt+0x47a4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     804dc67 <__sprintf_chk@plt+0x49e7>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    804dcdc <__sprintf_chk@plt+0x4a5c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    804dc48 <__sprintf_chk@plt+0x49c8>
cmp    $0xffffffff,%eax
jne    804dae0 <__sprintf_chk@plt+0x4860>
mov    %esi,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b70>
mov    0x10(%esp),%eax
test   %eax,%eax
je     804dbf8 <__sprintf_chk@plt+0x4978>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    804dbfd <__sprintf_chk@plt+0x497d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8048ff0 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    804db8c <__sprintf_chk@plt+0x490c>
mov    $0x8050efc,%ebp
jmp    804dc09 <__sprintf_chk@plt+0x4989>
call   8048f10 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x8050efc,%ebp
call   8048e90 <free@plt>
mov    %esi,(%esp)
call   804fdf0 <__sprintf_chk@plt+0x6b70>
jmp    804dbfd <__sprintf_chk@plt+0x497d>
mov    %esi,(%esp)
call   8049190 <__uflow@plt>
jmp    804dc62 <__sprintf_chk@plt+0x49e2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8048e70 <wcwidth@plt>
test   %eax,%eax
jns    804dd14 <__sprintf_chk@plt+0x4a94>
mov    %ebx,(%esp)
call   8048f20 <iswcntrl@plt>
test   %eax,%eax
sete   %al
movzbl %al,%eax
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%esi
mov    (%ebx),%eax
lea    0x10(%ebx),%edx
cmp    %edx,%eax
je     804dd58 <__sprintf_chk@plt+0x4ad8>
mov    %eax,(%esi)
mov    0x4(%ebx),%eax
mov    %eax,0x4(%esi)
movzbl 0x8(%ebx),%eax
test   %al,%al
mov    %al,0x8(%esi)
je     804dd50 <__sprintf_chk@plt+0x4ad0>
mov    0xc(%ebx),%eax
mov    %eax,0xc(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    0x4(%ebx),%edx
lea    0x10(%esi),%edi
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x8(%esp)
call   8048ea0 <memcpy@plt>
mov    %edi,(%esi)
jmp    804dd39 <__sprintf_chk@plt+0x4ab9>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%ecx
mov    %ecx,%eax
and    $0x1f,%ecx
shr    $0x5,%al
movzbl %al,%eax
mov    0x80511c0(,%eax,4),%eax
shr    %cl,%eax
and    $0x1,%eax
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
mov    %esp,%ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x8(%ebp),%eax
mov    %ecx,-0x30(%ebp)
mov    %eax,-0x34(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
cmp    $0x3fffffff,%ecx
jbe    804dde1 <__sprintf_chk@plt+0x4b61>
xor    %eax,%eax
mov    -0x1c(%ebp),%edi
xor    %gs:0x14,%edi
jne    804deee <__sprintf_chk@plt+0x4c6e>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    -0x30(%ebp),%eax
shl    $0x2,%eax
cmp    $0xfb7,%eax
jbe    804de89 <__sprintf_chk@plt+0x4c09>
mov    %eax,(%esp)
mov    %edx,-0x2c(%ebp)
call   804ff80 <__sprintf_chk@plt+0x6d00>
mov    -0x2c(%ebp),%edx
test   %eax,%eax
je     804ddc7 <__sprintf_chk@plt+0x4b47>
xor    %ecx,%ecx
mov    $0x2,%esi
cmpl   $0x2,-0x30(%ebp)
movl   $0x1,0x4(%eax)
jbe    804de4b <__sprintf_chk@plt+0x4bcb>
mov    %edi,-0x2c(%ebp)
mov    -0x30(%ebp),%edi
xchg   %ax,%ax
movzbl -0x1(%edx,%esi,1),%ebx
cmp    %bl,(%edx,%ecx,1)
jne    804de38 <__sprintf_chk@plt+0x4bb8>
jmp    804deb0 <__sprintf_chk@plt+0x4c30>
nop
sub    (%eax,%ecx,4),%ecx
cmp    %bl,(%edx,%ecx,1)
je     804deb0 <__sprintf_chk@plt+0x4c30>
test   %ecx,%ecx
jne    804de30 <__sprintf_chk@plt+0x4bb0>
mov    %esi,(%eax,%esi,4)
xor    %ecx,%ecx
add    $0x1,%esi
cmp    %edi,%esi
jne    804de20 <__sprintf_chk@plt+0x4ba0>
mov    -0x2c(%ebp),%edi
mov    -0x34(%ebp),%esi
xor    %ecx,%ecx
movl   $0x0,(%esi)
movzbl (%edi),%ebx
mov    %edi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
test   %bl,%bl
je     804de77 <__sprintf_chk@plt+0x4bf7>
cmp    %bl,(%edx,%ecx,1)
je     804dec0 <__sprintf_chk@plt+0x4c40>
test   %ecx,%ecx
je     804dea0 <__sprintf_chk@plt+0x4c20>
add    (%eax,%ecx,4),%edi
sub    (%eax,%ecx,4),%ecx
test   %bl,%bl
jne    804de64 <__sprintf_chk@plt+0x4be4>
mov    %eax,(%esp)
call   804ffe0 <__sprintf_chk@plt+0x6d60>
mov    $0x1,%eax
jmp    804ddc9 <__sprintf_chk@plt+0x4b49>
add    $0x26,%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
lea    0x13(%esp),%eax
and    $0xfffffff0,%eax
add    $0x8,%eax
jmp    804de00 <__sprintf_chk@plt+0x4b80>
movzbl 0x1(%esi),%ebx
add    $0x1,%edi
add    $0x1,%esi
jmp    804de60 <__sprintf_chk@plt+0x4be0>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ecx
mov    %esi,%ebx
sub    %ecx,%ebx
mov    %ebx,(%eax,%esi,4)
jmp    804de41 <__sprintf_chk@plt+0x4bc1>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ecx
cmp    %ecx,-0x30(%ebp)
lea    0x1(%esi),%ebx
mov    %ebx,-0x2c(%ebp)
je     804ded7 <__sprintf_chk@plt+0x4c57>
movzbl 0x1(%esi),%ebx
mov    -0x2c(%ebp),%esi
jmp    804de60 <__sprintf_chk@plt+0x4be0>
mov    -0x34(%ebp),%esi
mov    %edi,(%esi)
mov    %eax,(%esp)
call   804ffe0 <__sprintf_chk@plt+0x6d60>
mov    $0x1,%eax
jmp    804ddc9 <__sprintf_chk@plt+0x4b49>
call   8048f10 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
mov    %edx,%ebx
sub    $0xec,%esp
mov    %edx,(%esp)
mov    %eax,-0xe4(%ebp)
mov    %ecx,-0xe0(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
call   8050050 <__sprintf_chk@plt+0x6dd0>
cmp    $0x5d1745d,%eax
mov    %eax,-0xdc(%ebp)
jbe    804df54 <__sprintf_chk@plt+0x4cd4>
xor    %eax,%eax
mov    -0x1c(%ebp),%edi
xor    %gs:0x14,%edi
jne    804e84b <__sprintf_chk@plt+0x55cb>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
imul   $0x2c,-0xdc(%ebp),%eax
cmp    $0xfb7,%eax
jbe    804e1fe <__sprintf_chk@plt+0x4f7e>
mov    %eax,(%esp)
call   804ff80 <__sprintf_chk@plt+0x6d00>
mov    %eax,-0xd0(%ebp)
mov    -0xd0(%ebp),%edi
test   %edi,%edi
je     804df3a <__sprintf_chk@plt+0x4cba>
mov    -0xdc(%ebp),%eax
lea    -0xc0(%ebp),%esi
mov    %ebx,-0xb4(%ebp)
lea    0x10(%edi),%ebx
movb   $0x0,-0xc4(%ebp)
movl   $0x0,-0xc0(%ebp)
00
lea    (%eax,%eax,4),%eax
lea    (%edi,%eax,8),%eax
mov    %eax,-0xd4(%ebp)
movl   $0x0,-0xbc(%ebp)
00
movb   $0x0,-0xb8(%ebp)
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,-0xc4(%ebp)
jne    804e237 <__sprintf_chk@plt+0x4fb7>
mov    -0xb4(%ebp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804e220 <__sprintf_chk@plt+0x4fa0>
movl   $0x1,-0xb0(%ebp)
00
movsbl (%edx),%eax
movb   $0x1,-0xac(%ebp)
mov    %eax,-0xa8(%ebp)
mov    -0xa8(%ebp),%eax
movb   $0x1,-0xb8(%ebp)
test   %eax,%eax
jne    804e2d0 <__sprintf_chk@plt+0x5050>
mov    -0xd4(%ebp),%eax
cmpl   $0x2,-0xdc(%ebp)
movl   $0x1,0x4(%eax)
jbe    804e0fa <__sprintf_chk@plt+0x4e7a>
mov    -0xd0(%ebp),%esi
xor    %ebx,%ebx
movl   $0x2,-0xd8(%ebp)
00
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x30(%esi),%ecx
jmp    804e084 <__sprintf_chk@plt+0x4e04>
xchg   %ax,%ax
cmpb   $0x0,0x8(%eax)
je     804e094 <__sprintf_chk@plt+0x4e14>
mov    0xc(%eax),%eax
cmp    %eax,0x34(%esi)
sete   %dl
test   %dl,%dl
jne    804e0c8 <__sprintf_chk@plt+0x4e48>
test   %ebx,%ebx
mov    -0xd4(%ebp),%eax
je     804e5d8 <__sprintf_chk@plt+0x5358>
sub    (%eax,%ebx,4),%ebx
mov    -0xd0(%ebp),%edi
lea    (%ebx,%ebx,4),%eax
test   %cl,%cl
lea    (%edi,%eax,8),%eax
jne    804e060 <__sprintf_chk@plt+0x4de0>
mov    0x2c(%esi),%edi
xor    %edx,%edx
cmp    0x4(%eax),%edi
jne    804e06f <__sprintf_chk@plt+0x4def>
mov    %edi,0x8(%esp)
mov    (%eax),%eax
mov    %ecx,-0xcc(%ebp)
mov    %eax,0x4(%esp)
mov    0x28(%esi),%eax
mov    %eax,(%esp)
call   8048ee0 <memcmp@plt>
mov    -0xcc(%ebp),%ecx
test   %eax,%eax
sete   %dl
test   %dl,%dl
je     804e073 <__sprintf_chk@plt+0x4df3>
mov    -0xd8(%ebp),%edi
add    $0x1,%ebx
mov    -0xd4(%ebp),%ecx
mov    %edi,%eax
sub    %ebx,%eax
mov    %eax,(%ecx,%edi,4)
addl   $0x1,-0xd8(%ebp)
add    $0x28,%esi
mov    -0xdc(%ebp),%eax
cmp    %eax,-0xd8(%ebp)
jne    804e058 <__sprintf_chk@plt+0x4dd8>
mov    -0xe0(%ebp),%eax
xor    %ebx,%ebx
movb   $0x0,-0x8c(%ebp)
movl   $0x0,-0x88(%ebp)
00
movl   $0x0,-0x84(%ebp)
00
movl   $0x0,(%eax)
mov    -0xe4(%ebp),%eax
movb   $0x0,-0x80(%ebp)
movb   $0x0,-0x54(%ebp)
movl   $0x0,-0x50(%ebp)
mov    %eax,-0x7c(%ebp)
mov    %eax,-0x44(%ebp)
movl   $0x0,-0x4c(%ebp)
movb   $0x0,-0x48(%ebp)
movl   $0x0,-0xd8(%ebp)
00
nop
lea    0x0(%esi,%eiz,1),%esi
test   %bl,%bl
je     804e1b7 <__sprintf_chk@plt+0x4f37>
movzbl -0x3c(%ebp),%ebx
mov    -0xd8(%ebp),%eax
test   %bl,%bl
mov    -0xd0(%ebp),%edi
lea    (%eax,%eax,4),%eax
lea    (%edi,%eax,8),%eax
jne    804e6d3 <__sprintf_chk@plt+0x5453>
mov    0x4(%eax),%ecx
xor    %edx,%edx
cmp    -0x40(%ebp),%ecx
je     804e320 <__sprintf_chk@plt+0x50a0>
mov    %edx,%eax
test   %al,%al
je     804e368 <__sprintf_chk@plt+0x50e8>
mov    -0x40(%ebp),%eax
add    %eax,-0x44(%ebp)
addl   $0x1,-0xd8(%ebp)
mov    -0xdc(%ebp),%eax
cmp    %eax,-0xd8(%ebp)
movb   $0x0,-0x48(%ebp)
je     804e33f <__sprintf_chk@plt+0x50bf>
xor    %ebx,%ebx
cmpb   $0x0,-0x54(%ebp)
jne    804e4ff <__sprintf_chk@plt+0x527f>
mov    -0x44(%ebp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804e4e8 <__sprintf_chk@plt+0x5268>
movl   $0x1,-0x40(%ebp)
movsbl (%edx),%eax
mov    $0x1,%ebx
movb   $0x1,-0x3c(%ebp)
mov    %eax,-0x38(%ebp)
movb   $0x1,-0x48(%ebp)
jmp    804e160 <__sprintf_chk@plt+0x4ee0>
add    $0x26,%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
lea    0x1f(%esp),%eax
and    $0xfffffff0,%eax
add    $0x8,%eax
mov    %eax,-0xd0(%ebp)
jmp    804df74 <__sprintf_chk@plt+0x4cf4>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e803 <__sprintf_chk@plt+0x5583>
movb   $0x1,-0xc4(%ebp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    -0xb4(%ebp),%edi
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %esi,0xc(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    -0xa8(%ebp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,-0xb0(%ebp)
je     804e5e8 <__sprintf_chk@plt+0x5368>
cmp    $0xfffffffe,%eax
je     804e6a3 <__sprintf_chk@plt+0x5423>
test   %eax,%eax
jne    804e2ab <__sprintf_chk@plt+0x502b>
mov    -0xb4(%ebp),%eax
movl   $0x1,-0xb0(%ebp)
00
cmpb   $0x0,(%eax)
jne    804e850 <__sprintf_chk@plt+0x55d0>
mov    -0xa8(%ebp),%eax
test   %eax,%eax
jne    804e827 <__sprintf_chk@plt+0x55a7>
mov    %esi,(%esp)
movb   $0x1,-0xac(%ebp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e010 <__sprintf_chk@plt+0x4d90>
movb   $0x0,-0xc4(%ebp)
jmp    804e010 <__sprintf_chk@plt+0x4d90>
xchg   %ax,%ax
mov    -0xb4(%ebp),%edx
lea    -0xa4(%ebp),%ecx
mov    $0x1,%eax
cmp    %ecx,%edx
je     804e616 <__sprintf_chk@plt+0x5396>
mov    %edx,-0x10(%ebx)
mov    -0xb0(%ebp),%edx
test   %al,%al
mov    %al,-0x8(%ebx)
mov    %edx,-0xc(%ebx)
je     804e305 <__sprintf_chk@plt+0x5085>
mov    -0xa8(%ebp),%eax
mov    %eax,-0x4(%ebx)
mov    -0xb0(%ebp),%eax
add    $0x28,%ebx
add    %eax,-0xb4(%ebp)
movb   $0x0,-0xb8(%ebp)
jmp    804dfc8 <__sprintf_chk@plt+0x4d48>
mov    -0x44(%ebp),%edx
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8048ee0 <memcmp@plt>
test   %eax,%eax
sete   %dl
jmp    804e188 <__sprintf_chk@plt+0x4f08>
mov    -0x7c(%ebp),%eax
mov    -0xe0(%ebp),%edi
mov    %eax,(%edi)
mov    -0xd0(%ebp),%eax
mov    %eax,(%esp)
call   804ffe0 <__sprintf_chk@plt+0x6d60>
mov    $0x1,%eax
jmp    804df3c <__sprintf_chk@plt+0x4cbc>
lea    0x0(%esi),%esi
mov    -0xd8(%ebp),%eax
test   %eax,%eax
je     804e590 <__sprintf_chk@plt+0x5310>
mov    -0xd8(%ebp),%edi
mov    -0xd4(%ebp),%eax
mov    (%eax,%edi,4),%ebx
sub    %ebx,-0xd8(%ebp)
test   %ebx,%ebx
je     804e5c8 <__sprintf_chk@plt+0x5348>
movzbl -0x80(%ebp),%esi
lea    -0x88(%ebp),%edi
mov    %esi,%eax
test   %al,%al
je     804e3c2 <__sprintf_chk@plt+0x5142>
movzbl -0x74(%ebp),%esi
mov    %esi,%eax
test   %al,%al
jne    804e405 <__sprintf_chk@plt+0x5185>
mov    -0x78(%ebp),%eax
add    %eax,-0x7c(%ebp)
sub    $0x1,%ebx
movb   $0x0,-0x80(%ebp)
je     804e5c8 <__sprintf_chk@plt+0x5348>
xor    %esi,%esi
cmpb   $0x0,-0x8c(%ebp)
jne    804e42f <__sprintf_chk@plt+0x51af>
mov    -0x7c(%ebp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804e418 <__sprintf_chk@plt+0x5198>
movl   $0x1,-0x78(%ebp)
movsbl (%edx),%eax
mov    $0x1,%esi
movb   $0x1,-0x74(%ebp)
mov    %eax,-0x70(%ebp)
mov    %esi,%eax
test   %al,%al
movb   $0x1,-0x80(%ebp)
je     804e3ad <__sprintf_chk@plt+0x512d>
mov    -0x70(%ebp),%eax
test   %eax,%eax
jne    804e3ad <__sprintf_chk@plt+0x512d>
call   8049220 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e803 <__sprintf_chk@plt+0x5583>
movb   $0x1,-0x8c(%ebp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    -0x7c(%ebp),%edx
mov    %edx,(%esp)
mov    %edx,-0xcc(%ebp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    -0xcc(%ebp),%edx
mov    %edi,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    -0x70(%ebp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,-0x78(%ebp)
je     804e4c0 <__sprintf_chk@plt+0x5240>
cmp    $0xfffffffe,%eax
je     804e4d0 <__sprintf_chk@plt+0x5250>
test   %eax,%eax
jne    804e495 <__sprintf_chk@plt+0x5215>
mov    -0x7c(%ebp),%eax
movl   $0x1,-0x78(%ebp)
cmpb   $0x0,(%eax)
jne    804e850 <__sprintf_chk@plt+0x55d0>
mov    -0x70(%ebp),%eax
test   %eax,%eax
jne    804e827 <__sprintf_chk@plt+0x55a7>
mov    %edi,(%esp)
mov    $0x1,%esi
movb   $0x1,-0x74(%ebp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e3fb <__sprintf_chk@plt+0x517b>
movb   $0x0,-0x8c(%ebp)
jmp    804e3fb <__sprintf_chk@plt+0x517b>
lea    0x0(%esi),%esi
movl   $0x1,-0x78(%ebp)
movb   $0x0,-0x74(%ebp)
jmp    804e3fb <__sprintf_chk@plt+0x517b>
mov    -0x7c(%ebp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,-0x74(%ebp)
mov    %eax,-0x78(%ebp)
jmp    804e3fb <__sprintf_chk@plt+0x517b>
nop
lea    -0x50(%ebp),%eax
mov    %eax,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e803 <__sprintf_chk@plt+0x5583>
movb   $0x1,-0x54(%ebp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    -0x44(%ebp),%esi
lea    -0x50(%ebp),%edi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %edi,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    -0x38(%ebp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,-0x40(%ebp)
je     804e6c3 <__sprintf_chk@plt+0x5443>
cmp    $0xfffffffe,%eax
je     804e7b9 <__sprintf_chk@plt+0x5539>
test   %eax,%eax
jne    804e564 <__sprintf_chk@plt+0x52e4>
mov    -0x44(%ebp),%eax
movl   $0x1,-0x40(%ebp)
cmpb   $0x0,(%eax)
jne    804e850 <__sprintf_chk@plt+0x55d0>
mov    -0x38(%ebp),%edx
test   %edx,%edx
jne    804e827 <__sprintf_chk@plt+0x55a7>
lea    -0x50(%ebp),%eax
mov    $0x1,%ebx
mov    %eax,(%esp)
movb   $0x1,-0x3c(%ebp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e1f5 <__sprintf_chk@plt+0x4f75>
movb   $0x0,-0x54(%ebp)
jmp    804e1f5 <__sprintf_chk@plt+0x4f75>
lea    0x0(%esi,%eiz,1),%esi
movzbl -0x80(%ebp),%edx
test   %dl,%dl
je     804e640 <__sprintf_chk@plt+0x53c0>
movzbl -0x74(%ebp),%edx
test   %dl,%dl
jne    804e693 <__sprintf_chk@plt+0x5413>
mov    -0x78(%ebp),%eax
add    %eax,-0x7c(%ebp)
mov    -0x40(%ebp),%eax
movb   $0x0,-0x80(%ebp)
add    %eax,-0x44(%ebp)
movb   $0x0,-0x48(%ebp)
jmp    804e1b5 <__sprintf_chk@plt+0x4f35>
lea    0x0(%esi,%eiz,1),%esi
movzbl -0x48(%ebp),%ebx
jmp    804e158 <__sprintf_chk@plt+0x4ed8>
lea    0x0(%esi,%eiz,1),%esi
mov    -0xd8(%ebp),%edi
mov    %edi,(%eax,%edi,4)
jmp    804e0de <__sprintf_chk@plt+0x4e5e>
xchg   %ax,%ax
movl   $0x1,-0xb0(%ebp)
00
movb   $0x0,-0xac(%ebp)
mov    -0xb4(%ebp),%edx
lea    -0xa4(%ebp),%ecx
xor    %eax,%eax
movb   $0x1,-0xb8(%ebp)
cmp    %ecx,%edx
jne    804e2e9 <__sprintf_chk@plt+0x5069>
mov    -0xb0(%ebp),%eax
mov    %edx,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
call   8048ea0 <memcpy@plt>
mov    %ebx,-0x10(%ebx)
movzbl -0xac(%ebp),%eax
jmp    804e2ec <__sprintf_chk@plt+0x506c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,-0x8c(%ebp)
lea    -0x88(%ebp),%ebx
jne    804e72e <__sprintf_chk@plt+0x54ae>
mov    -0x7c(%ebp),%ecx
movzbl (%ecx),%eax
mov    %eax,%ebx
shr    $0x5,%bl
movzbl %bl,%ebx
mov    0x80511c0(,%ebx,4),%ebx
bt     %eax,%ebx
jae    804e705 <__sprintf_chk@plt+0x5485>
movl   $0x1,-0x78(%ebp)
movsbl (%ecx),%eax
mov    $0x1,%edx
movb   $0x1,-0x74(%ebp)
mov    %eax,-0x70(%ebp)
test   %dl,%dl
movb   $0x1,-0x80(%ebp)
je     804e5a8 <__sprintf_chk@plt+0x5328>
mov    -0x70(%ebp),%ecx
test   %ecx,%ecx
jne    804e5a8 <__sprintf_chk@plt+0x5328>
jmp    804e40c <__sprintf_chk@plt+0x518c>
mov    -0xb4(%ebp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,-0xac(%ebp)
mov    %eax,-0xb0(%ebp)
jmp    804e5f9 <__sprintf_chk@plt+0x5379>
movl   $0x1,-0x40(%ebp)
movb   $0x0,-0x3c(%ebp)
jmp    804e1f5 <__sprintf_chk@plt+0x4f75>
mov    -0x38(%ebp),%edx
test   %edx,%edx
je     804e34a <__sprintf_chk@plt+0x50ca>
mov    -0xd8(%ebp),%eax
mov    -0xd0(%ebp),%edi
lea    (%eax,%eax,4),%eax
lea    (%edi,%eax,8),%eax
cmpb   $0x0,0x8(%eax)
je     804e17a <__sprintf_chk@plt+0x4efa>
cmp    0xc(%eax),%edx
sete   %al
jmp    804e18a <__sprintf_chk@plt+0x4f0a>
lea    -0x88(%ebp),%ebx
mov    %ebx,(%esp)
mov    %edx,-0xcc(%ebp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e803 <__sprintf_chk@plt+0x5583>
mov    -0xcc(%ebp),%edx
movb   $0x1,-0x8c(%ebp)
mov    %edx,-0xcc(%ebp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    -0x7c(%ebp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebx,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    -0x70(%ebp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
mov    -0xcc(%ebp),%edx
cmp    $0xffffffff,%eax
mov    %eax,-0x78(%ebp)
je     804e7d0 <__sprintf_chk@plt+0x5550>
cmp    $0xfffffffe,%eax
je     804e7e0 <__sprintf_chk@plt+0x5560>
test   %eax,%eax
jne    804e794 <__sprintf_chk@plt+0x5514>
mov    -0x7c(%ebp),%eax
movl   $0x1,-0x78(%ebp)
cmpb   $0x0,(%eax)
jne    804e850 <__sprintf_chk@plt+0x55d0>
mov    -0x70(%ebp),%esi
test   %esi,%esi
jne    804e827 <__sprintf_chk@plt+0x55a7>
mov    %ebx,(%esp)
movb   $0x1,-0x74(%ebp)
call   8048eb0 <mbsinit@plt>
mov    $0x1,%edx
test   %eax,%eax
je     804e687 <__sprintf_chk@plt+0x5407>
movb   $0x0,-0x8c(%ebp)
jmp    804e687 <__sprintf_chk@plt+0x5407>
mov    -0x44(%ebp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,-0x3c(%ebp)
mov    %eax,-0x40(%ebp)
jmp    804e1f5 <__sprintf_chk@plt+0x4f75>
movl   $0x1,-0x78(%ebp)
movb   $0x0,-0x74(%ebp)
jmp    804e687 <__sprintf_chk@plt+0x5407>
mov    -0x7c(%ebp),%eax
mov    %edx,-0xcc(%ebp)
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
mov    -0xcc(%ebp),%edx
movb   $0x0,-0x74(%ebp)
mov    %eax,-0x78(%ebp)
jmp    804e687 <__sprintf_chk@plt+0x5407>
movl   $0x80511e0,0xc(%esp)
movl   $0x93,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050abe,(%esp)
call   8049250 <__assert_fail@plt>
movl   $0x80511e0,0xc(%esp)
movl   $0xb0,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050aec,(%esp)
call   8049250 <__assert_fail@plt>
call   8048f10 <__stack_chk_fail@plt>
movl   $0x80511e0,0xc(%esp)
movl   $0xaf,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050ad5,(%esp)
call   8049250 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x15c,%esp
mov    0x170(%esp),%eax
mov    %eax,0x18(%esp)
mov    0x174(%esp),%eax
mov    %eax,0x20(%esp)
mov    %eax,%edi
mov    %gs:0x14,%eax
mov    %eax,0x14c(%esp)
xor    %eax,%eax
call   8048f80 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804ecd0 <__sprintf_chk@plt+0x5a50>
movsbl (%edi),%eax
lea    0x38(%esp),%ebx
mov    %edi,0x44(%esp)
movb   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,%edx
shr    $0x5,%dl
movzbl %dl,%edx
mov    0x80511c0(,%edx,4),%edx
movl   $0x0,0x3c(%esp)
movb   $0x0,0x40(%esp)
bt     %eax,%edx
jae    804ec30 <__sprintf_chk@plt+0x59b0>
movl   $0x1,0x48(%esp)
mov    %eax,0x50(%esp)
movb   $0x1,0x4c(%esp)
mov    0x50(%esp),%ebx
movb   $0x1,0x40(%esp)
test   %ebx,%ebx
je     804eed8 <__sprintf_chk@plt+0x5c58>
mov    0x20(%esp),%eax
movb   $0x0,0xa4(%esp)
cmpb   $0x0,0xa4(%esp)
movb   $0x0,0x6c(%esp)
mov    %eax,0x7c(%esp)
mov    0x18(%esp),%eax
movl   $0x0,0x70(%esp)
movl   $0x0,0x74(%esp)
movb   $0x0,0x78(%esp)
mov    %eax,0xb4(%esp)
movl   $0x0,0xa8(%esp)
00
movl   $0x0,0xac(%esp)
00
movb   $0x0,0xb0(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x1c(%esp)
movl   $0x0,0x24(%esp)
movb   $0x1,0x28(%esp)
jne    804eb7d <__sprintf_chk@plt+0x58fd>
mov    0xb4(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804eee8 <__sprintf_chk@plt+0x5c68>
movl   $0x1,0xb8(%esp)
00
movsbl (%edx),%eax
movb   $0x1,0xbc(%esp)
mov    %eax,0xc0(%esp)
mov    0xc0(%esp),%ecx
movb   $0x1,0xb0(%esp)
test   %ecx,%ecx
je     804eed0 <__sprintf_chk@plt+0x5c50>
mov    $0x1,%edx
cmpl   $0x9,0x24(%esp)
seta   %al
and    0x28(%esp),%al
mov    %al,0x14(%esp)
je     804eb20 <__sprintf_chk@plt+0x58a0>
mov    0x24(%esp),%eax
lea    (%eax,%eax,4),%eax
cmp    %eax,0x1c(%esp)
jb     804f530 <__sprintf_chk@plt+0x62b0>
mov    0x1c(%esp),%esi
sub    0x2c(%esp),%esi
je     804eac0 <__sprintf_chk@plt+0x5840>
movzbl 0x78(%esp),%ebx
lea    0x70(%esp),%edi
test   %bl,%bl
je     804ea60 <__sprintf_chk@plt+0x57e0>
movzbl 0x84(%esp),%ebx
test   %bl,%bl
jne    804eab5 <__sprintf_chk@plt+0x5835>
mov    0x80(%esp),%eax
add    %eax,0x7c(%esp)
sub    $0x1,%esi
movb   $0x0,0x78(%esp)
je     804f648 <__sprintf_chk@plt+0x63c8>
xor    %ebx,%ebx
cmpb   $0x0,0x6c(%esp)
jne    804ef6d <__sprintf_chk@plt+0x5ced>
mov    0x7c(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804ef58 <__sprintf_chk@plt+0x5cd8>
movl   $0x1,0x80(%esp)
00
movsbl (%edx),%eax
movzbl 0x14(%esp),%ebx
movb   $0x1,0x84(%esp)
mov    %eax,0x88(%esp)
test   %bl,%bl
movb   $0x1,0x78(%esp)
je     804ea45 <__sprintf_chk@plt+0x57c5>
mov    0x88(%esp),%eax
test   %eax,%eax
jne    804ea45 <__sprintf_chk@plt+0x57c5>
cmpb   $0x0,0x78(%esp)
je     804f648 <__sprintf_chk@plt+0x63c8>
movzbl 0x84(%esp),%eax
mov    %al,0x14(%esp)
cmpb   $0x0,0x14(%esp)
je     804f540 <__sprintf_chk@plt+0x62c0>
mov    0x88(%esp),%eax
test   %eax,%eax
jne    804f540 <__sprintf_chk@plt+0x62c0>
mov    0x20(%esp),%edx
lea    0x30(%esp),%ecx
mov    0x18(%esp),%eax
call   804df00 <__sprintf_chk@plt+0x4c80>
test   %al,%al
jne    804f806 <__sprintf_chk@plt+0x6586>
mov    0x1c(%esp),%eax
movzbl 0xbc(%esp),%edx
movb   $0x0,0x28(%esp)
mov    %eax,0x2c(%esp)
nop
mov    0x1c(%esp),%eax
addl   $0x1,0x24(%esp)
test   %dl,%dl
lea    0x1(%eax),%ebx
je     804f008 <__sprintf_chk@plt+0x5d88>
cmpb   $0x0,0x4c(%esp)
je     804f008 <__sprintf_chk@plt+0x5d88>
mov    0x50(%esp),%eax
cmp    %eax,0xc0(%esp)
sete   %al
test   %al,%al
jne    804f043 <__sprintf_chk@plt+0x5dc3>
mov    0xb8(%esp),%eax
add    %eax,0xb4(%esp)
cmpb   $0x0,0xa4(%esp)
movb   $0x0,0xb0(%esp)
mov    %ebx,0x1c(%esp)
je     804e99c <__sprintf_chk@plt+0x571c>
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0xb4(%esp),%ebx
lea    0xa8(%esp),%esi
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %esi,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0xc0(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0xb8(%esp)
je     804f6a0 <__sprintf_chk@plt+0x6420>
cmp    $0xfffffffe,%eax
je     804ef28 <__sprintf_chk@plt+0x5ca8>
test   %eax,%eax
jne    804ebfe <__sprintf_chk@plt+0x597e>
mov    0xb4(%esp),%eax
movl   $0x1,0xb8(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0xc0(%esp),%ecx
test   %ecx,%ecx
jne    804f5ee <__sprintf_chk@plt+0x636e>
lea    0xa8(%esp),%eax
mov    %eax,(%esp)
movb   $0x1,0xbc(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e9db <__sprintf_chk@plt+0x575b>
movb   $0x0,0xa4(%esp)
jmp    804e9db <__sprintf_chk@plt+0x575b>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0x34(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x44(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebx,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x50(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x48(%esp)
je     804ef10 <__sprintf_chk@plt+0x5c90>
cmp    $0xfffffffe,%eax
je     804f763 <__sprintf_chk@plt+0x64e3>
test   %eax,%eax
jne    804ecad <__sprintf_chk@plt+0x5a2d>
mov    0x44(%esp),%eax
movl   $0x1,0x48(%esp)
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0x50(%esp),%esi
test   %esi,%esi
jne    804f5ee <__sprintf_chk@plt+0x636e>
mov    %ebx,(%esp)
movb   $0x1,0x4c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804e90d <__sprintf_chk@plt+0x568d>
movb   $0x0,0x34(%esp)
jmp    804e90d <__sprintf_chk@plt+0x568d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%ecx
mov    0x18(%esp),%edi
movzbl (%ecx),%eax
mov    %eax,%ebx
test   %bl,%bl
mov    %al,0x14(%esp)
mov    %edi,%eax
je     804ee58 <__sprintf_chk@plt+0x5bd8>
movzbl (%edi),%eax
test   %al,%al
je     804eed0 <__sprintf_chk@plt+0x5c50>
lea    0x1(%edi),%esi
xor    %ebx,%ebx
mov    %ecx,0x28(%esp)
xor    %edi,%edi
movl   $0x0,0x2c(%esp)
movb   $0x1,0x24(%esp)
mov    0x18(%esp),%edx
lea    (%edx,%ebx,1),%ecx
add    $0x1,%ebx
cmp    0x14(%esp),%al
mov    %ecx,0x1c(%esp)
je     804ee78 <__sprintf_chk@plt+0x5bf8>
cmpb   $0x0,(%esi)
je     804eed0 <__sprintf_chk@plt+0x5c50>
add    $0x1,%edi
cmp    $0x9,%ebx
jbe    804edad <__sprintf_chk@plt+0x5b2d>
cmpb   $0x0,0x24(%esp)
je     804edad <__sprintf_chk@plt+0x5b2d>
lea    (%ebx,%ebx,4),%eax
cmp    %edi,%eax
ja     804eda8 <__sprintf_chk@plt+0x5b28>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
je     804ed70 <__sprintf_chk@plt+0x5af0>
mov    %edi,%eax
sub    0x2c(%esp),%eax
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   8049180 <strnlen@plt>
mov    %edi,0x2c(%esp)
add    %eax,0x28(%esp)
mov    0x28(%esp),%eax
cmpb   $0x0,(%eax)
jne    804eda8 <__sprintf_chk@plt+0x5b28>
mov    0x20(%esp),%ebp
mov    %ebp,(%esp)
call   80490a0 <strlen@plt>
lea    0x30(%esp),%edx
mov    %edx,(%esp)
mov    %ebp,%edx
mov    %eax,%ecx
mov    %esi,%eax
call   804dda0 <__sprintf_chk@plt+0x4b20>
test   %al,%al
jne    804f806 <__sprintf_chk@plt+0x6586>
movl   $0x0,0x28(%esp)
movb   $0x0,0x24(%esp)
jmp    804edad <__sprintf_chk@plt+0x5b2d>
lea    0x0(%esi),%esi
movb   $0x1,0x24(%esp)
movzbl (%esi),%eax
add    $0x1,%esi
jmp    804ed0e <__sprintf_chk@plt+0x5a8e>
movl   $0x1,0x128(%esp)
00
movb   $0x0,0x12c(%esp)
mov    0x1c(%esp),%ebx
mov    0x128(%esp),%eax
add    %eax,0x124(%esp)
add    $0x2,%ebx
cmpb   $0x0,0x114(%esp)
mov    %ebx,%esi
movb   $0x0,0x120(%esp)
jne    804f273 <__sprintf_chk@plt+0x5ff3>
mov    0x124(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804f4a8 <__sprintf_chk@plt+0x6228>
movl   $0x1,0x128(%esp)
00
movsbl (%edx),%eax
movb   $0x1,0x12c(%esp)
mov    %eax,0x130(%esp)
mov    0x130(%esp),%eax
movb   $0x1,0x120(%esp)
test   %eax,%eax
jne    804f1f3 <__sprintf_chk@plt+0x5f73>
mov    0xb4(%esp),%eax
lea    0x0(%esi),%esi
mov    0x14c(%esp),%esi
xor    %gs:0x14,%esi
jne    804f80f <__sprintf_chk@plt+0x658f>
add    $0x15c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x20(%esp),%ebp
movzbl 0x1(%ebp),%eax
test   %al,%al
je     804eec4 <__sprintf_chk@plt+0x5c44>
movzbl (%esi),%ecx
test   %cl,%cl
je     804eed0 <__sprintf_chk@plt+0x5c50>
cmp    %cl,%al
lea    0x2(%edi),%edx
jne    804f640 <__sprintf_chk@plt+0x63c0>
neg    %edi
lea    0x0(%ebp,%edi,1),%ebp
add    0x1c(%esp),%edi
jmp    804eebb <__sprintf_chk@plt+0x5c3b>
lea    0x0(%esi),%esi
movzbl (%edi,%edx,1),%ecx
test   %cl,%cl
je     804eed0 <__sprintf_chk@plt+0x5c50>
add    $0x1,%edx
cmp    %cl,%al
jne    804f640 <__sprintf_chk@plt+0x63c0>
movzbl 0x0(%ebp,%edx,1),%eax
test   %al,%al
jne    804eea8 <__sprintf_chk@plt+0x5c28>
mov    0x1c(%esp),%eax
jmp    804ee58 <__sprintf_chk@plt+0x5bd8>
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804ee58 <__sprintf_chk@plt+0x5bd8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
jmp    804ee58 <__sprintf_chk@plt+0x5bd8>
lea    0x0(%esi,%eiz,1),%esi
lea    0xa8(%esp),%eax
mov    %eax,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0xa4(%esp)
jmp    804eb7d <__sprintf_chk@plt+0x58fd>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x48(%esp)
movb   $0x0,0x4c(%esp)
movb   $0x1,0x40(%esp)
jmp    804e91e <__sprintf_chk@plt+0x569e>
nop
mov    0xb4(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0xbc(%esp)
mov    %eax,0xb8(%esp)
movb   $0x1,0xb0(%esp)
xor    %edx,%edx
jmp    804e9f7 <__sprintf_chk@plt+0x5777>
lea    0x0(%esi),%esi
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0x6c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x7c(%esp),%ebp
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %edi,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x88(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x80(%esp)
je     804f1a0 <__sprintf_chk@plt+0x5f20>
cmp    $0xfffffffe,%eax
je     804f1b8 <__sprintf_chk@plt+0x5f38>
test   %eax,%eax
jne    804efe1 <__sprintf_chk@plt+0x5d61>
mov    0x7c(%esp),%eax
movl   $0x1,0x80(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0x88(%esp),%edx
test   %edx,%edx
jne    804f5ee <__sprintf_chk@plt+0x636e>
mov    %edi,(%esp)
movb   $0x1,0x84(%esp)
call   8048eb0 <mbsinit@plt>
movzbl 0x14(%esp),%ebx
test   %eax,%eax
je     804eaac <__sprintf_chk@plt+0x582c>
movb   $0x0,0x6c(%esp)
jmp    804eaac <__sprintf_chk@plt+0x582c>
mov    0xb8(%esp),%edx
xor    %eax,%eax
cmp    0x48(%esp),%edx
jne    804eb4d <__sprintf_chk@plt+0x58cd>
mov    0x44(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0xb4(%esp),%eax
mov    %eax,(%esp)
call   8048ee0 <memcmp@plt>
test   %eax,%eax
sete   %al
test   %al,%al
je     804eb55 <__sprintf_chk@plt+0x58d5>
mov    0xbc(%esp),%edx
lea    0x118(%esp),%edi
mov    0xa4(%esp),%eax
mov    %edx,0xf4(%esp)
mov    0xc0(%esp),%edx
mov    %eax,0xdc(%esp)
mov    0xa8(%esp),%eax
mov    %edx,0xf8(%esp)
mov    0xc4(%esp),%edx
mov    %eax,0xe0(%esp)
mov    0xac(%esp),%eax
mov    %edx,0xfc(%esp)
mov    0xc8(%esp),%edx
mov    %eax,0xe4(%esp)
mov    0xb0(%esp),%eax
mov    %edx,0x100(%esp)
mov    0xcc(%esp),%edx
mov    %eax,0xe8(%esp)
mov    0xb4(%esp),%eax
movb   $0x0,0xe8(%esp)
mov    %edx,0x104(%esp)
mov    0xd0(%esp),%edx
mov    %eax,0xec(%esp)
mov    0xb8(%esp),%eax
add    %eax,0xec(%esp)
mov    %edx,0x108(%esp)
mov    0xd4(%esp),%edx
mov    %eax,0xf0(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x10c(%esp)
mov    0xd8(%esp),%edx
mov    %eax,0x124(%esp)
mov    %edx,0x110(%esp)
movb   $0x0,0x114(%esp)
movsbl (%eax),%eax
movl   $0x0,0x118(%esp)
00
movl   $0x0,0x11c(%esp)
00
movb   $0x0,0x120(%esp)
mov    %eax,%edx
shr    $0x5,%dl
movzbl %dl,%edx
mov    0x80511c0(,%edx,4),%edx
bt     %eax,%edx
jae    804f560 <__sprintf_chk@plt+0x62e0>
movl   $0x1,0x128(%esp)
00
mov    %eax,0x130(%esp)
movb   $0x1,0x12c(%esp)
mov    0x130(%esp),%edx
movb   $0x1,0x120(%esp)
test   %edx,%edx
jne    804edcb <__sprintf_chk@plt+0x5b4b>
call   8049220 <abort@plt>
nop
movl   $0x1,0x80(%esp)
00
movb   $0x0,0x84(%esp)
jmp    804eaac <__sprintf_chk@plt+0x582c>
mov    0x7c(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x84(%esp)
mov    %eax,0x80(%esp)
jmp    804eaac <__sprintf_chk@plt+0x582c>
movl   $0x1,0x128(%esp)
00
movb   $0x0,0x12c(%esp)
movb   $0x1,0x120(%esp)
movzbl 0xe8(%esp),%ebx
test   %bl,%bl
je     804f318 <__sprintf_chk@plt+0x6098>
movzbl 0xf4(%esp),%ebx
test   %bl,%bl
jne    804f37d <__sprintf_chk@plt+0x60fd>
mov    0xf0(%esp),%edx
mov    $0x1,%eax
cmp    0x128(%esp),%edx
je     804f480 <__sprintf_chk@plt+0x6200>
test   %al,%al
lea    0x1(%esi),%edx
jne    804f698 <__sprintf_chk@plt+0x6418>
mov    0xf0(%esp),%eax
mov    %edx,%esi
add    %eax,0xec(%esp)
mov    0x128(%esp),%eax
add    %eax,0x124(%esp)
cmpb   $0x0,0x114(%esp)
movb   $0x0,0xe8(%esp)
movb   $0x0,0x120(%esp)
je     804edf8 <__sprintf_chk@plt+0x5b78>
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x124(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %edi,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x130(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x128(%esp)
je     804f1d8 <__sprintf_chk@plt+0x5f58>
cmp    $0xfffffffe,%eax
je     804f4e0 <__sprintf_chk@plt+0x6260>
test   %eax,%eax
jne    804f2ed <__sprintf_chk@plt+0x606d>
mov    0x124(%esp),%eax
movl   $0x1,0x128(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0x130(%esp),%eax
test   %eax,%eax
jne    804f5ee <__sprintf_chk@plt+0x636e>
mov    %edi,(%esp)
movb   $0x1,0x12c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804ee37 <__sprintf_chk@plt+0x5bb7>
movb   $0x0,0x114(%esp)
jmp    804ee37 <__sprintf_chk@plt+0x5bb7>
lea    0x0(%esi),%esi
cmpb   $0x0,0xdc(%esp)
lea    0xe0(%esp),%ebp
jne    804f3cf <__sprintf_chk@plt+0x614f>
mov    0xec(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804f3b0 <__sprintf_chk@plt+0x6130>
movl   $0x1,0xf0(%esp)
00
movsbl (%edx),%eax
mov    $0x1,%ebx
movb   $0x1,0xf4(%esp)
mov    %eax,0xf8(%esp)
test   %bl,%bl
movb   $0x1,0xe8(%esp)
je     804f213 <__sprintf_chk@plt+0x5f93>
mov    0xf8(%esp),%eax
test   %eax,%eax
je     804ee58 <__sprintf_chk@plt+0x5bd8>
cmpb   $0x0,0x12c(%esp)
je     804f213 <__sprintf_chk@plt+0x5f93>
cmp    0x130(%esp),%eax
setne  %al
jmp    804f22c <__sprintf_chk@plt+0x5fac>
lea    0x0(%esi,%eiz,1),%esi
lea    0xe0(%esp),%ebp
mov    %ebp,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0xdc(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0xec(%esp),%edx
mov    %edx,(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    0x14(%esp),%edx
mov    %ebp,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0xf8(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0xf0(%esp)
je     804f4c8 <__sprintf_chk@plt+0x6248>
cmp    $0xfffffffe,%eax
je     804f508 <__sprintf_chk@plt+0x6288>
test   %eax,%eax
jne    804f451 <__sprintf_chk@plt+0x61d1>
mov    0xec(%esp),%eax
movl   $0x1,0xf0(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0xf8(%esp),%eax
test   %eax,%eax
jne    804f5ee <__sprintf_chk@plt+0x636e>
mov    %ebp,(%esp)
mov    $0x1,%ebx
movb   $0x1,0xf4(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f36d <__sprintf_chk@plt+0x60ed>
movb   $0x0,0xdc(%esp)
jmp    804f36d <__sprintf_chk@plt+0x60ed>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x124(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0xec(%esp),%eax
mov    %eax,(%esp)
call   8048ee0 <memcmp@plt>
test   %eax,%eax
setne  %al
jmp    804f22c <__sprintf_chk@plt+0x5fac>
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0x114(%esp)
jmp    804f273 <__sprintf_chk@plt+0x5ff3>
lea    0x0(%esi),%esi
movl   $0x1,0xf0(%esp)
00
movb   $0x0,0xf4(%esp)
jmp    804f36d <__sprintf_chk@plt+0x60ed>
mov    0x124(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x12c(%esp)
mov    %eax,0x128(%esp)
jmp    804f1eb <__sprintf_chk@plt+0x5f6b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0xec(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0xf4(%esp)
mov    %eax,0xf0(%esp)
jmp    804f36d <__sprintf_chk@plt+0x60ed>
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x28(%esp)
jmp    804eb20 <__sprintf_chk@plt+0x58a0>
lea    0x0(%esi),%esi
mov    0x1c(%esp),%eax
movzbl 0xbc(%esp),%edx
movb   $0x1,0x28(%esp)
mov    %eax,0x2c(%esp)
jmp    804eb20 <__sprintf_chk@plt+0x58a0>
lea    0x0(%esi),%esi
mov    %edi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0x114(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x124(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %edi,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x130(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x128(%esp)
je     804edb8 <__sprintf_chk@plt+0x5b38>
cmp    $0xfffffffe,%eax
je     804f7a2 <__sprintf_chk@plt+0x6522>
test   %eax,%eax
jne    804f618 <__sprintf_chk@plt+0x6398>
mov    0x124(%esp),%eax
movl   $0x1,0x128(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0x130(%esp),%eax
test   %eax,%eax
je     804f618 <__sprintf_chk@plt+0x6398>
movl   $0x80511e0,0xc(%esp)
movl   $0xb0,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050aec,(%esp)
call   8049250 <__assert_fail@plt>
lea    0x0(%esi),%esi
mov    %edi,(%esp)
movb   $0x1,0x12c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f183 <__sprintf_chk@plt+0x5f03>
movb   $0x0,0x114(%esp)
jmp    804f183 <__sprintf_chk@plt+0x5f03>
lea    0x0(%esi),%esi
mov    %edx,%edi
jmp    804ed32 <__sprintf_chk@plt+0x5ab2>
nop
cmpb   $0x0,0x6c(%esp)
lea    0x70(%esp),%ebx
jne    804f6d1 <__sprintf_chk@plt+0x6451>
mov    0x7c(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    804f6b8 <__sprintf_chk@plt+0x6438>
movl   $0x1,0x80(%esp)
00
movsbl (%edx),%eax
movb   $0x1,0x84(%esp)
mov    %eax,0x88(%esp)
movb   $0x1,0x78(%esp)
jmp    804ead7 <__sprintf_chk@plt+0x5857>
lea    0x0(%esi),%esi
mov    %esi,%ebx
jmp    804eb55 <__sprintf_chk@plt+0x58d5>
nop
movl   $0x1,0xb8(%esp)
00
movb   $0x0,0xbc(%esp)
jmp    804ef46 <__sprintf_chk@plt+0x5cc6>
lea    0x70(%esp),%ebx
mov    %ebx,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f7e2 <__sprintf_chk@plt+0x6562>
movb   $0x1,0x6c(%esp)
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x7c(%esp),%esi
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %ebx,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
lea    0x88(%esp),%eax
mov    %eax,(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x80(%esp)
je     804f7c5 <__sprintf_chk@plt+0x6545>
cmp    $0xfffffffe,%eax
je     804f77d <__sprintf_chk@plt+0x64fd>
test   %eax,%eax
jne    804f741 <__sprintf_chk@plt+0x64c1>
mov    0x7c(%esp),%eax
movl   $0x1,0x80(%esp)
00
cmpb   $0x0,(%eax)
jne    804f814 <__sprintf_chk@plt+0x6594>
mov    0x88(%esp),%eax
test   %eax,%eax
jne    804f5ee <__sprintf_chk@plt+0x636e>
mov    %ebx,(%esp)
movb   $0x1,0x84(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     804f68b <__sprintf_chk@plt+0x640b>
movb   $0x0,0x6c(%esp)
jmp    804f68b <__sprintf_chk@plt+0x640b>
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x4c(%esp)
mov    %eax,0x48(%esp)
jmp    804ef1d <__sprintf_chk@plt+0x5c9d>
mov    0x7c(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x84(%esp)
movb   $0x0,0x14(%esp)
mov    %eax,0x80(%esp)
jmp    804f68b <__sprintf_chk@plt+0x640b>
mov    0x124(%esp),%eax
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x12c(%esp)
mov    %eax,0x128(%esp)
jmp    804edcb <__sprintf_chk@plt+0x5b4b>
movl   $0x1,0x80(%esp)
00
movb   $0x0,0x84(%esp)
movb   $0x0,0x14(%esp)
jmp    804f68b <__sprintf_chk@plt+0x640b>
movl   $0x80511e0,0xc(%esp)
movl   $0x93,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050abe,(%esp)
call   8049250 <__assert_fail@plt>
mov    0x30(%esp),%eax
jmp    804ee58 <__sprintf_chk@plt+0x5bd8>
call   8048f10 <__stack_chk_fail@plt>
movl   $0x80511e0,0xc(%esp)
movl   $0xaf,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050ad5,(%esp)
call   8049250 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x105c,%esp
mov    0x1070(%esp),%eax
lea    0x4c(%esp),%ebx
mov    0x1078(%esp),%edi
lea    0x44(%esp),%ebp
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,%esi
mov    %eax,0x2c(%esp)
mov    0x107c(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x24(%esp)
mov    0x1080(%esp),%eax
mov    %eax,0x20(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x104c(%esp)
xor    %eax,%eax
call   80490b0 <iconv@plt>
mov    0x1074(%esp),%eax
mov    %esi,0x3c(%esp)
xor    %esi,%esi
mov    %eax,0x40(%esp)
test   %eax,%eax
lea    0x48(%esp),%eax
mov    %eax,0x18(%esp)
jne    804f8e8 <__sprintf_chk@plt+0x6668>
jmp    804f938 <__sprintf_chk@plt+0x66b8>
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
mov    0x40(%esp),%edx
sub    %ebx,%eax
add    %eax,%esi
test   %edx,%edx
je     804f938 <__sprintf_chk@plt+0x66b8>
mov    0x18(%esp),%eax
mov    %ebp,0xc(%esp)
mov    %edi,(%esp)
mov    %ebx,0x44(%esp)
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
movl   $0x1000,0x48(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
jne    804f8d8 <__sprintf_chk@plt+0x6658>
call   8049140 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x7,%eax
je     804f8d8 <__sprintf_chk@plt+0x6658>
cmp    $0x16,%eax
jne    804facb <__sprintf_chk@plt+0x684b>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    %ebp,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %edi,(%esp)
mov    %ebx,0x44(%esp)
movl   $0x1000,0x48(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
je     804facb <__sprintf_chk@plt+0x684b>
mov    0x44(%esp),%eax
sub    %ebx,%eax
add    %eax,%esi
mov    %esi,0x1c(%esp)
je     804fad8 <__sprintf_chk@plt+0x6858>
mov    0x24(%esp),%eax
mov    (%eax),%eax
test   %eax,%eax
mov    %eax,0x28(%esp)
je     804faa8 <__sprintf_chk@plt+0x6828>
mov    0x20(%esp),%eax
mov    0x1c(%esp),%edx
cmp    (%eax),%edx
ja     804faa8 <__sprintf_chk@plt+0x6828>
movl   $0x0,0x10(%esp)
lea    0x40(%esp),%esi
movl   $0x0,0xc(%esp)
lea    0x3c(%esp),%ebx
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   80490b0 <iconv@plt>
mov    0x2c(%esp),%eax
mov    %eax,0x3c(%esp)
mov    0x1074(%esp),%eax
mov    %eax,0x40(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x44(%esp)
mov    0x1c(%esp),%eax
mov    %eax,0x48(%esp)
mov    0x1074(%esp),%eax
jmp    804fa31 <__sprintf_chk@plt+0x67b1>
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%eax
mov    %ebp,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %edi,(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
je     804fae8 <__sprintf_chk@plt+0x6868>
mov    0x40(%esp),%eax
test   %eax,%eax
jne    804fa08 <__sprintf_chk@plt+0x6788>
mov    0x18(%esp),%eax
mov    %ebp,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %edi,(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
je     804faf6 <__sprintf_chk@plt+0x6876>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804fb23 <__sprintf_chk@plt+0x68a3>
mov    0x24(%esp),%eax
xor    %ebx,%ebx
mov    0x28(%esp),%edx
mov    0x1c(%esp),%ecx
mov    %edx,(%eax)
mov    0x20(%esp),%eax
mov    %ecx,(%eax)
mov    0x104c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    804fb28 <__sprintf_chk@plt+0x68a8>
add    $0x105c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
jne    804f9a5 <__sprintf_chk@plt+0x6725>
call   8049140 <__errno_location@plt>
movl   $0xc,(%eax)
mov    $0xffffffff,%ebx
jmp    804fa84 <__sprintf_chk@plt+0x6804>
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
xor    %ebx,%ebx
movl   $0x0,(%eax)
jmp    804fa84 <__sprintf_chk@plt+0x6804>
xchg   %ax,%ax
call   8049140 <__errno_location@plt>
cmpl   $0x16,(%eax)
je     804fa35 <__sprintf_chk@plt+0x67b5>
mov    0x24(%esp),%ecx
mov    $0xffffffff,%ebx
mov    0x28(%esp),%edi
cmp    %edi,(%ecx)
je     804fa84 <__sprintf_chk@plt+0x6804>
call   8049140 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %edi,(%esp)
call   8048e90 <free@plt>
mov    %ebp,(%esi)
jmp    804fa84 <__sprintf_chk@plt+0x6804>
call   8049220 <abort@plt>
call   8048f10 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    %eax,(%esp)
mov    %eax,0x20(%esp)
call   80490a0 <strlen@plt>
mov    %eax,%ebx
shl    $0x4,%ebx
cmp    $0xfff,%eax
cmova  %eax,%ebx
lea    0x1(%ebx),%edi
mov    %edi,(%esp)
mov    %eax,0x24(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804fcf9 <__sprintf_chk@plt+0x6a79>
mov    0x54(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80490b0 <iconv@plt>
mov    %esi,0x28(%esp)
mov    %ebx,0x2c(%esp)
jmp    804fc04 <__sprintf_chk@plt+0x6984>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049140 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%ebp
cmp    $0x16,%ebx
je     804fc8b <__sprintf_chk@plt+0x6a0b>
cmp    $0x7,%ebx
jne    804fce4 <__sprintf_chk@plt+0x6a64>
mov    0x28(%esp),%ebx
lea    (%edi,%edi,1),%edx
sub    %esi,%ebx
cmp    %edx,%edi
jae    804fcd8 <__sprintf_chk@plt+0x6a58>
mov    %edx,0x4(%esp)
mov    %esi,(%esp)
mov    %edx,0x1c(%esp)
call   8048ff0 <realloc@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804fcd8 <__sprintf_chk@plt+0x6a58>
lea    (%eax,%ebx,1),%ecx
mov    %edx,%edi
mov    %ecx,0x28(%esp)
lea    -0x1(%edx),%ecx
mov    %eax,%esi
sub    %ebx,%ecx
mov    %ecx,0x2c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x28(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x24(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x54(%esp),%eax
mov    %eax,(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
je     804fba8 <__sprintf_chk@plt+0x6928>
jmp    804fc8b <__sprintf_chk@plt+0x6a0b>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049140 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%ebp
cmp    $0x7,%ebx
jne    804fce4 <__sprintf_chk@plt+0x6a64>
mov    0x28(%esp),%ebx
lea    (%edi,%edi,1),%edx
sub    %esi,%ebx
cmp    %edx,%edi
jae    804fcd8 <__sprintf_chk@plt+0x6a58>
mov    %edx,0x4(%esp)
mov    %esi,(%esp)
mov    %edx,0x1c(%esp)
call   8048ff0 <realloc@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804fcd8 <__sprintf_chk@plt+0x6a58>
lea    (%eax,%ebx,1),%ecx
mov    %edx,%edi
mov    %ecx,0x28(%esp)
lea    -0x1(%edx),%ecx
mov    %eax,%esi
sub    %ebx,%ecx
mov    %ecx,0x2c(%esp)
lea    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
lea    0x28(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x54(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80490b0 <iconv@plt>
cmp    $0xffffffff,%eax
je     804fc40 <__sprintf_chk@plt+0x69c0>
mov    0x28(%esp),%eax
lea    0x1(%eax),%edx
mov    %edx,0x28(%esp)
movb   $0x0,(%eax)
mov    0x28(%esp),%eax
sub    %esi,%eax
cmp    %edi,%eax
jb     804fd08 <__sprintf_chk@plt+0x6a88>
mov    %esi,%eax
jmp    804fcf1 <__sprintf_chk@plt+0x6a71>
movl   $0xc,0x0(%ebp)
mov    $0xc,%ebx
mov    %esi,(%esp)
call   8048e90 <free@plt>
xor    %eax,%eax
mov    %ebx,0x0(%ebp)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049140 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804fcf1 <__sprintf_chk@plt+0x6a71>
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   8048ff0 <realloc@plt>
test   %eax,%eax
cmove  %esi,%eax
jmp    804fcf1 <__sprintf_chk@plt+0x6a71>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
cmpb   $0x0,(%ebx)
je     804fd47 <__sprintf_chk@plt+0x6ac7>
mov    0x28(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   804d850 <__sprintf_chk@plt+0x45d0>
test   %eax,%eax
jne    804fd60 <__sprintf_chk@plt+0x6ae0>
mov    %ebx,(%esp)
call   8049130 <__strdup@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804fdb0 <__sprintf_chk@plt+0x6b30>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8049230 <iconv_open@plt>
cmp    $0xffffffff,%eax
mov    %eax,%esi
je     804fdc4 <__sprintf_chk@plt+0x6b44>
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   804fb30 <__sprintf_chk@plt+0x68b0>
test   %eax,%eax
mov    %eax,%ebx
je     804fdc8 <__sprintf_chk@plt+0x6b48>
mov    %esi,(%esp)
call   80490c0 <iconv_close@plt>
test   %eax,%eax
jns    804fd55 <__sprintf_chk@plt+0x6ad5>
call   8049140 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
xor    %ebx,%ebx
call   8048e90 <free@plt>
mov    %edi,(%esi)
jmp    804fd55 <__sprintf_chk@plt+0x6ad5>
call   8049140 <__errno_location@plt>
movl   $0xc,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xor    %ebx,%ebx
jmp    804fd55 <__sprintf_chk@plt+0x6ad5>
call   8049140 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebx
mov    %esi,(%esp)
call   80490c0 <iconv_close@plt>
mov    %edi,(%ebx)
xor    %ebx,%ebx
jmp    804fd55 <__sprintf_chk@plt+0x6ad5>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049160 <fileno@plt>
test   %eax,%eax
js     804fe78 <__sprintf_chk@plt+0x6bf8>
mov    %ebx,(%esp)
call   8049010 <__freading@plt>
test   %eax,%eax
jne    804fe48 <__sprintf_chk@plt+0x6bc8>
mov    %ebx,(%esp)
call   804fe90 <__sprintf_chk@plt+0x6c10>
test   %eax,%eax
je     804fe78 <__sprintf_chk@plt+0x6bf8>
call   8049140 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048ec0 <fclose@plt>
test   %edi,%edi
je     804fe3a <__sprintf_chk@plt+0x6bba>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049160 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   80491d0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    804fe12 <__sprintf_chk@plt+0x6b92>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048ec0 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804fea8 <__sprintf_chk@plt+0x6c28>
mov    %ebx,(%esp)
call   8049010 <__freading@plt>
test   %eax,%eax
jne    804feb8 <__sprintf_chk@plt+0x6c38>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048e50 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804fea8 <__sprintf_chk@plt+0x6c28>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804fef0 <__sprintf_chk@plt+0x6c70>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048e50 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804ff30 <__sprintf_chk@plt+0x6cb0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048ed0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804ff0f <__sprintf_chk@plt+0x6c8f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804ff0f <__sprintf_chk@plt+0x6c8f>
mov    %ebx,(%esp)
call   8049160 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   80491d0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804ff77 <__sprintf_chk@plt+0x6cf7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804ff6f <__sprintf_chk@plt+0x6cef>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%eax
lea    0x8(%eax),%edx
cmp    %edx,%eax
ja     804ffd8 <__sprintf_chk@plt+0x6d58>
mov    %edx,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%ecx
je     804ffd8 <__sprintf_chk@plt+0x6d58>
lea    0x8(%eax),%ebx
mov    $0xff00ff01,%edx
movl   $0x1415fb4a,0x4(%eax)
mov    %ebx,%eax
mul    %edx
shr    $0x8,%edx
mov    %edx,%eax
shl    $0x8,%eax
add    %eax,%edx
mov    %ebx,%eax
sub    %edx,%eax
mov    %eax,%edx
mov    0x8054380(,%eax,4),%eax
mov    %ebx,0x8054380(,%edx,4)
mov    %eax,(%ecx)
add    $0x18,%esp
mov    %ebx,%eax
pop    %ebx
ret
nop
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
push   %ebx
mov    0x8(%esp),%ebx
test   %ebx,%ebx
je     804fff2 <__sprintf_chk@plt+0x6d72>
cmpl   $0x1415fb4a,-0x4(%ebx)
je     804fff8 <__sprintf_chk@plt+0x6d78>
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    $0xff00ff01,%edx
mul    %edx
shr    $0x8,%edx
mov    %edx,%eax
shl    $0x8,%eax
add    %eax,%edx
mov    %ebx,%eax
sub    %edx,%eax
mov    0x8054380(,%eax,4),%ecx
test   %ecx,%ecx
je     804fff2 <__sprintf_chk@plt+0x6d72>
cmp    %ecx,%ebx
jne    8050026 <__sprintf_chk@plt+0x6da6>
jmp    8050045 <__sprintf_chk@plt+0x6dc5>
cmp    %edx,%ebx
je     8050030 <__sprintf_chk@plt+0x6db0>
mov    %edx,%ecx
mov    -0x8(%ecx),%edx
test   %edx,%edx
jne    8050020 <__sprintf_chk@plt+0x6da0>
jmp    804fff2 <__sprintf_chk@plt+0x6d72>
nop
sub    $0x8,%ecx
mov    -0x8(%ebx),%eax
sub    $0x8,%ebx
mov    %eax,(%ecx)
mov    %ebx,0x8(%esp)
pop    %ebx
jmp    8048e90 <free@plt>
lea    0x8054380(,%eax,4),%ecx
jmp    8050033 <__sprintf_chk@plt+0x6db3>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x4c(%esp)
xor    %eax,%eax
mov    0x70(%esp),%ebx
call   8048f80 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    80501f8 <__sprintf_chk@plt+0x6f78>
mov    %ebx,0x24(%esp)
xor    %ebx,%ebx
movb   $0x0,0x14(%esp)
lea    0x30(%esp),%edi
cmpb   $0x0,0x14(%esp)
movl   $0x0,0x18(%esp)
lea    0x18(%esp),%esi
movl   $0x0,0x1c(%esp)
movb   $0x0,0x20(%esp)
jne    8050130 <__sprintf_chk@plt+0x6eb0>
mov    0x24(%esp),%edx
movzbl (%edx),%eax
mov    %eax,%ecx
shr    $0x5,%cl
movzbl %cl,%ecx
mov    0x80511c0(,%ecx,4),%ecx
bt     %eax,%ecx
jae    80501b0 <__sprintf_chk@plt+0x6f30>
movl   $0x1,0x28(%esp)
movsbl (%edx),%eax
movb   $0x1,0x2c(%esp)
mov    %eax,0x30(%esp)
mov    0x30(%esp),%eax
movb   $0x1,0x20(%esp)
test   %eax,%eax
jne    8050115 <__sprintf_chk@plt+0x6e95>
mov    %ebx,%eax
mov    0x4c(%esp),%edi
xor    %gs:0x14,%edi
jne    8050271 <__sprintf_chk@plt+0x6ff1>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x28(%esp)
movb   $0x0,0x2c(%esp)
mov    0x28(%esp),%eax
add    $0x1,%ebx
add    %eax,0x24(%esp)
movb   $0x0,0x20(%esp)
cmpb   $0x0,0x14(%esp)
je     80500a8 <__sprintf_chk@plt+0x6e28>
call   8048f80 <__ctype_get_mb_cur_max@plt>
mov    0x24(%esp),%ebp
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   804c790 <__sprintf_chk@plt+0x3510>
mov    %esi,0xc(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8048fb0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,0x28(%esp)
je     8050108 <__sprintf_chk@plt+0x6e88>
cmp    $0xfffffffe,%eax
je     80501c8 <__sprintf_chk@plt+0x6f48>
test   %eax,%eax
jne    805018c <__sprintf_chk@plt+0x6f0c>
mov    0x24(%esp),%eax
movl   $0x1,0x28(%esp)
cmpb   $0x0,(%eax)
jne    805024d <__sprintf_chk@plt+0x6fcd>
mov    0x30(%esp),%edx
test   %edx,%edx
jne    8050229 <__sprintf_chk@plt+0x6fa9>
mov    %esi,(%esp)
movb   $0x1,0x2c(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     80500db <__sprintf_chk@plt+0x6e5b>
movb   $0x0,0x14(%esp)
jmp    80500db <__sprintf_chk@plt+0x6e5b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
call   8048eb0 <mbsinit@plt>
test   %eax,%eax
je     8050205 <__sprintf_chk@plt+0x6f85>
movb   $0x1,0x14(%esp)
jmp    8050130 <__sprintf_chk@plt+0x6eb0>
xchg   %ax,%ax
mov    0x24(%esp),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   80490a0 <strlen@plt>
movb   $0x0,0x2c(%esp)
movb   $0x0,0x20(%esp)
mov    %eax,0x28(%esp)
mov    0x28(%esp),%eax
add    %eax,0x24(%esp)
jmp    8050125 <__sprintf_chk@plt+0x6ea5>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   80490a0 <strlen@plt>
jmp    80500ea <__sprintf_chk@plt+0x6e6a>
movl   $0x80511f3,0xc(%esp)
movl   $0x93,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050abe,(%esp)
call   8049250 <__assert_fail@plt>
movl   $0x80511f3,0xc(%esp)
movl   $0xb0,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050aec,(%esp)
call   8049250 <__assert_fail@plt>
movl   $0x80511f3,0xc(%esp)
movl   $0xaf,0x8(%esp)
movl   $0x8050ab0,0x4(%esp)
movl   $0x8050ad5,(%esp)
call   8049250 <__assert_fail@plt>
call   8048f10 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049ef0 <__sprintf_chk@plt+0xc70>
add    $0x3d75,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048de4 <strcmp@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     80502d9 <__sprintf_chk@plt+0x7059>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    80502b8 <__sprintf_chk@plt+0x7038>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    80502f0 <__sprintf_chk@plt+0x7070>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049ef0 <__sprintf_chk@plt+0xc70>
add    $0x3cfa,%ebx
sub    $0x18,%esp
lea    0x144(%ebx),%eax
test   %eax,%eax
je     8050338 <__sprintf_chk@plt+0x70b8>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048fc0 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    805031b <__sprintf_chk@plt+0x709b>
push   %ebx
sub    $0x8,%esp
call   8049ef0 <__sprintf_chk@plt+0xc70>
add    $0x3cbb,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     80503e4 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     805039c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80503e5 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     80503f4 <_IO_stdin_used+0x90>
popa
je     80503f3 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %bl,%cs:0x46(%ebx)
dec    %ecx
dec    %esp
inc    %ebp
pop    %ebp
cs cs or %cs:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
outsb  %gs:(%esi),(%dx)
popa
je     8050424 <_IO_stdin_used+0xc0>
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
sub    %dh,0x29(%ebx)
sub    $0x20,%al
outsl  %ds:(%esi),(%dx)
jb     80503ec <_IO_stdin_used+0x88>
jae    8050442 <_IO_stdin_used+0xde>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8050438 <_IO_stdin_used+0xd4>
and    %ch,0x6e(%ecx)
jo     805044e <_IO_stdin_used+0xea>
je     8050407 <_IO_stdin_used+0xa3>
and    %dh,0x20(%edi,%ebp,2)
jae    8050455 <_IO_stdin_used+0xf1>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     805044b <_IO_stdin_used+0xe7>
and    %ch,0x75(%edi)
je     805045c <_IO_stdin_used+0xf8>
jne    8050462 <_IO_stdin_used+0xfe>
or     %cs:(%edx),%cl
and    %ah,(%eax)
sub    $0x2d202c41,%eax
sub    $0x776f6873,%eax
sub    $0x206c6c61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
jno    8050484 <_IO_stdin_used+0x120>
imul   $0x746e656c,0x61(%esi),%esi
and    %dh,0x20(%edi,%ebp,2)
sub    $0xa544576,%eax
and    %ah,(%eax)
sub    $0x2d202c62,%eax
sub    $0x626d756e,%eax
gs
jb     805045b <_IO_stdin_used+0xf7>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
bound  %ebp,0x6e(%ecx,%eiz,2)
imul   $0x20,(%eax),%esp
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
jne    80504aa <_IO_stdin_used+0x146>
bound  %esp,0x72(%ebp)
and    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
gs
insl   (%dx),%es:(%edi)
jo     80504bc <_IO_stdin_used+0x158>
jns    805046a <_IO_stdin_used+0x106>
outsl  %ds:(%esi),(%dx)
jne    80504c1 <_IO_stdin_used+0x15d>
jo     80504c4 <_IO_stdin_used+0x160>
je     8050471 <_IO_stdin_used+0x10d>
insb   (%dx),%es:(%edi)
imul   $0x6f202c73,0x65(%esi),%ebp
jbe    80504c0 <_IO_stdin_used+0x15c>
jb     80504cf <_IO_stdin_used+0x16b>
imul   $0xa6e2d20,0x73(%ebp,%eiz,2),%esp
and    %ah,(%eax)
sub    $0x20202065,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
jno    80504f8 <_IO_stdin_used+0x194>
imul   $0x746e656c,0x61(%esi),%esi
and    %dh,0x20(%edi,%ebp,2)
sub    $0x200a4576,%eax
and    %ch,0x2d202c45
sub    $0x776f6873,%eax
sub    $0x73646e65,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
and    $0x20,%al
popa
je     80504da <_IO_stdin_used+0x176>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
insb   (%dx),%es:(%edi)
imul   $0x2d20200a,0x65(%esi),%ebp
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
sub    $0x6d756e2d,%eax
bound  %esp,0x72(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %ch,0x75(%edi)
je     8050565 <_IO_stdin_used+0x201>
jne    805056b <_IO_stdin_used+0x207>
and    %ch,0x6e(%ecx,%ebp,2)
gs
jae    8050508 <_IO_stdin_used+0x1a4>
and    %ah,(%eax)
sub    $0x2d202c73,%eax
sub    $0x65757173,%eax
gs
jp     8050572 <_IO_stdin_used+0x20e>
sub    $0x6e616c62,%eax
imul   $0x20,(%eax),%esp
and    %ah,(%eax)
and    %ah,(%eax)
jae    8050590 <_IO_stdin_used+0x22c>
jo     805058d <_IO_stdin_used+0x229>
jb     8050584 <_IO_stdin_used+0x220>
jae    8050594 <_IO_stdin_used+0x230>
and    %dh,0x65(%edx)
jo     805058b <_IO_stdin_used+0x227>
popa
je     805058e <_IO_stdin_used+0x22a>
and    %ah,%fs:0x6d(%ebp)
jo     80505a3 <_IO_stdin_used+0x23f>
jns    8050551 <_IO_stdin_used+0x1ed>
outsl  %ds:(%esi),(%dx)
jne    80505a8 <_IO_stdin_used+0x244>
jo     80505ab <_IO_stdin_used+0x247>
je     8050558 <_IO_stdin_used+0x1f4>
insb   (%dx),%es:(%edi)
imul   $0xa73,0x65(%esi),%ebp
and    %ah,(%eax)
sub    $0x20202074,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
jno    80505d3 <_IO_stdin_used+0x26f>
imul   $0x746e656c,0x61(%esi),%esi
and    %dh,0x20(%edi,%ebp,2)
sub    $0x200a5476,%eax
and    %ch,0x2d202c54
sub    $0x776f6873,%eax
sub    $0x73626174,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
push   %esp
inc    %ecx
inc    %edx
and    %ah,0x68(%ebx)
popa
jb     80505fa <_IO_stdin_used+0x296>
arpl   %si,0x72(%ebp,%eiz,2)
jae    80505bf <_IO_stdin_used+0x25b>
popa
jae    80505c2 <_IO_stdin_used+0x25e>
pop    %esi
dec    %ecx
or     (%eax),%ah
and    %ch,0x20202075
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %ch,0x67(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     805062c <_IO_stdin_used+0x2c8>
sub    %ecx,%fs:(%edx)
and    %ah,(%eax)
sub    $0x2d202c76,%eax
sub    $0x776f6873,%eax
sub    $0x706e6f6e,%eax
jb     8050646 <_IO_stdin_used+0x2e2>
outsb  %ds:(%esi),(%dx)
je     8050649 <_IO_stdin_used+0x2e5>
outsb  %ds:(%esi),(%dx)
and    %ah,(%bx,%si)
and    %dh,0x73(%ebp)
and    %bl,%gs:0x20(%esi)
popa
outsb  %ds:(%esi),(%dx)
and    %cl,%fs:0x2d(%ebp)
and    %ch,0x6f(%esi)
je     8050657 <_IO_stdin_used+0x2f3>
je     8050661 <_IO_stdin_used+0x2fd>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
gs
js     8050662 <_IO_stdin_used+0x2fe>
gs
jo     8050676 <_IO_stdin_used+0x312>
and    %ah,0x6f(%esi)
jb     8050627 <_IO_stdin_used+0x2c3>
dec    %esp
inc    %esi
inc    %esp
and    %ah,0x6e(%ecx)
and    %dl,%fs:0x42(%ecx,%eax,2)
or     (%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     8050641 <_IO_stdin_used+0x2dd>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     8050697 <_IO_stdin_used+0x333>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    80506ba <_IO_stdin_used+0x356>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80506cc <_IO_stdin_used+0x368>
jo     80506cf <_IO_stdin_used+0x36b>
je     805067c <_IO_stdin_used+0x318>
jbe    80506c3 <_IO_stdin_used+0x35f>
jb     80506d3 <_IO_stdin_used+0x36f>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     80506d7 <_IO_stdin_used+0x373>
popa
je     80506d6 <_IO_stdin_used+0x372>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x570a0000,0x0(%edx,%ecx,1),%esi
imul   $0x46206f6e,0x20(%eax,%ebp,2),%esi
dec    %ecx
dec    %esp
inc    %ebp
sub    $0x20,%al
outsl  %ds:(%esi),(%dx)
jb     80506ae <_IO_stdin_used+0x34a>
ja     80506f8 <_IO_stdin_used+0x394>
outsb  %gs:(%esi),(%dx)
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
and    %ch,0x73(%ecx)
and    %ch,0x6572202c
popa
and    %dh,%fs:0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     805070f <_IO_stdin_used+0x3ab>
and    %ch,0x6e(%ecx)
jo     8050725 <_IO_stdin_used+0x3c1>
je     80506e0 <_IO_stdin_used+0x37c>
or     (%eax),%al
or     0x78(%ebp),%al
popa
insl   (%dx),%es:(%edi)
jo     8050727 <_IO_stdin_used+0x3c3>
gs
jae    80506f8 <_IO_stdin_used+0x394>
or     (%eax),%ah
and    %ah,0x20662073
sub    $0x20206720,%eax
dec    %edi
jne    8050742 <_IO_stdin_used+0x3de>
jo     8050745 <_IO_stdin_used+0x3e1>
je     80506f2 <_IO_stdin_used+0x38e>
data16
daa
jae    80506f6 <_IO_stdin_used+0x392>
arpl   %bp,0x6e(%edi)
je     8050740 <_IO_stdin_used+0x3dc>
outsb  %ds:(%esi),(%dx)
je     8050751 <_IO_stdin_used+0x3ed>
sub    $0x20,%al
je     805074a <_IO_stdin_used+0x3e6>
outsb  %gs:(%esi),(%dx)
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8050751 <_IO_stdin_used+0x3ed>
and    %ch,0x6e(%ecx)
jo     8050767 <_IO_stdin_used+0x403>
je     8050720 <_IO_stdin_used+0x3bc>
and    %dh,0x65(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ah,0x27(%edi)
jae    805071e <_IO_stdin_used+0x3ba>
arpl   %bp,0x6e(%edi)
je     8050768 <_IO_stdin_used+0x404>
outsb  %ds:(%esi),(%dx)
je     8050779 <_IO_stdin_used+0x415>
or     %cs:(%eax),%ah
and    %ah,0x20202073
and    %ah,(%eax)
and    %ah,(%eax)
and    %al,0x6f(%ebx)
jo     8050791 <_IO_stdin_used+0x42d>
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8050785 <_IO_stdin_used+0x421>
and    %ch,0x6e(%ecx)
jo     805079b <_IO_stdin_used+0x437>
je     8050748 <_IO_stdin_used+0x3e4>
je     8050799 <_IO_stdin_used+0x435>
and    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     8050797 <_IO_stdin_used+0x433>
and    %ch,0x75(%edi)
je     80507a8 <_IO_stdin_used+0x444>
jne    80507ae <_IO_stdin_used+0x44a>
or     %cs:(%eax),%al
add    %al,(%eax)
add    %ch,0x74(%eax)
je     80507b4 <_IO_stdin_used+0x450>
cmp    (%edi),%ch
das
ja     80507c0 <_IO_stdin_used+0x45c>
ja     8050779 <_IO_stdin_used+0x415>
outsb  %ds:(%si),(%dx)
jne    805077d <_IO_stdin_used+0x419>
outsl  %ds:(%esi),(%dx)
jb     80507b9 <_IO_stdin_used+0x455>
das
jae    80507c4 <_IO_stdin_used+0x460>
data16
je     80507cf <_IO_stdin_used+0x46b>
popa
jb     80507c0 <_IO_stdin_used+0x45c>
das
arpl   %bp,0x72(%edi)
gs
jne    80507d6 <_IO_stdin_used+0x472>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     80507cf <_IO_stdin_used+0x46b>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8050795 <_IO_stdin_used+0x431>
jne    80507ea <_IO_stdin_used+0x486>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     80507fb <_IO_stdin_used+0x497>
popa
jb     80507ec <_IO_stdin_used+0x488>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8050801 <_IO_stdin_used+0x49d>
jo     80507c9 <_IO_stdin_used+0x465>
das
das
ja     805080a <_IO_stdin_used+0x4a6>
ja     80507c3 <_IO_stdin_used+0x45f>
outsb  %ds:(%si),(%dx)
jne    80507c7 <_IO_stdin_used+0x463>
outsl  %ds:(%esi),(%dx)
jb     8050803 <_IO_stdin_used+0x49f>
das
addr16
gs
je     8050809 <_IO_stdin_used+0x4a5>
gs
insb   (%dx),%es:(%edi)
jo     80507d4 <_IO_stdin_used+0x470>
or     %ds:(%eax),%al
push   %edx
gs
jo     805081b <_IO_stdin_used+0x4b7>
jb     8050822 <_IO_stdin_used+0x4be>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8050824 <_IO_stdin_used+0x4c0>
popa
je     8050824 <_IO_stdin_used+0x4c0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 80507e3 <_IO_stdin_used+0x47f>
je     8050834 <_IO_stdin_used+0x4d0>
and    %bh,(%eax,%ebp,2)
je     805083e <_IO_stdin_used+0x4da>
jo     8050806 <_IO_stdin_used+0x4a2>
das
das
je     8050842 <_IO_stdin_used+0x4de>
popa
outsb  %ds:(%esi),(%dx)
jae    8050840 <_IO_stdin_used+0x4dc>
popa
je     8050840 <_IO_stdin_used+0x4dc>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     805084d <_IO_stdin_used+0x4e9>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     805084b <_IO_stdin_used+0x4e7>
das
je     805084c <_IO_stdin_used+0x4e8>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     8050814 <_IO_stdin_used+0x4b0>
arpl   %bp,0x6d(%edi)
jo     8050865 <_IO_stdin_used+0x501>
gs
je     8050861 <_IO_stdin_used+0x4fd>
and    %ah,0x63(%edi,%ebp,2)
jne    805086f <_IO_stdin_used+0x50b>
outsb  %gs:(%esi),(%dx)
je     8050867 <_IO_stdin_used+0x503>
je     8050871 <_IO_stdin_used+0x50d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8050883 <_IO_stdin_used+0x51f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     805087f <_IO_stdin_used+0x51b>
jne    8050890 <_IO_stdin_used+0x52c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa000a27,0x6e(%edi),%ebp
push   %edx
gs
jo     80508a5 <_IO_stdin_used+0x541>
jb     80508ac <_IO_stdin_used+0x548>
and    %ah,0x75622073
addr16 jae 8050861 <_IO_stdin_used+0x4fd>
je     80508b2 <_IO_stdin_used+0x54e>
and    %ah,0x62000a73
jne    80508b2 <_IO_stdin_used+0x54e>
sub    $0x65726f63,%eax
jne    80508c6 <_IO_stdin_used+0x562>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     80508c4 <_IO_stdin_used+0x560>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    80508ae <_IO_stdin_used+0x54a>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     80508df <_IO_stdin_used+0x57b>
jne    80508f0 <_IO_stdin_used+0x58c>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    80508fa <_IO_stdin_used+0x596>
jb     80508b8 <_IO_stdin_used+0x554>
jae    80508f3 <_IO_stdin_used+0x58f>
popa
jb     80508f3 <_IO_stdin_used+0x58f>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dl,%gs:0x72(%edi,%ebp,2)
bound  %ebp,-0x3d(%edx)
mov    $0x72,%dh
outsb  %ds:(%esi),(%dx)
and    %al,0x72(%edi)
popa
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jne    8050915 <_IO_stdin_used+0x5b1>
add    %dl,%fs:0x72(%edi,%ebp,2)
bound  %ebp,0x6f(%edx)
jb     805091f <_IO_stdin_used+0x5bb>
and    %al,0x72(%edi)
popa
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jne    8050927 <_IO_stdin_used+0x5c3>
add    %dl,%fs:0x69(%edx)
arpl   %bp,0x61(%eax)
jb     8050926 <_IO_stdin_used+0x5c2>
and    %cl,0x2e(%ebp)
and    %dl,0x74(%ebx)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %ah,0x61(%ebx)
je     80508d3 <_IO_stdin_used+0x56f>
bound  %esp,0x6e(%ebp)
jae    805094c <_IO_stdin_used+0x5e8>
jne    8050950 <_IO_stdin_used+0x5ec>
inc    %ecx
inc    %ebp
push   %esp
add    %dh,0x74(%ebx)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     805094a <_IO_stdin_used+0x5e6>
and    %ch,0x75(%edi)
je     805095b <_IO_stdin_used+0x5f7>
jne    8050961 <_IO_stdin_used+0x5fd>
add    %ah,0x69203a73
outsb  %ds:(%esi),(%dx)
jo     805096b <_IO_stdin_used+0x607>
je     8050918 <_IO_stdin_used+0x5b4>
imul   $0x7369,0x20(%ebp,%eiz,2),%bp
and    %ch,0x75(%edi)
je     8050974 <_IO_stdin_used+0x610>
jne    805097a <_IO_stdin_used+0x616>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %dh,%gs:0x72(%edi)
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     8050918 <_IO_stdin_used+0x5b4>
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805093f <_IO_stdin_used+0x5db>
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%ecx)
arpl   %si,0x20(%esp,%ebp,2)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6c630073
outsl  %ds:(%esi),(%dx)
jae    805099c <_IO_stdin_used+0x638>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%bp,%di)
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     80509a2 <_IO_stdin_used+0x63e>
and    %ch,0x6e(%ecx)
jo     80509b8 <_IO_stdin_used+0x654>
je     8050945 <_IO_stdin_used+0x5e1>
outsb  %ds:(%esi),(%dx)
jne    80509b5 <_IO_stdin_used+0x651>
bound  %esp,0x72(%ebp)
sub    $0x626e6f6e,%eax
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6e,(%eax),%eax
jne    80509c5 <_IO_stdin_used+0x661>
bound  %esp,0x72(%ebp)
add    %dh,0x71(%ebx)
jne    80509c5 <_IO_stdin_used+0x661>
gs
jp     80509c8 <_IO_stdin_used+0x664>
sub    $0x6e616c62,%eax
imul   $0x73,(%eax),%eax
push   $0x6e2d776f
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     80509e6 <_IO_stdin_used+0x682>
imul   $0x676e69,0x74(%esi),%ebp
jae    80509e5 <_IO_stdin_used+0x681>
outsl  %ds:(%esi),(%dx)
ja     80509ad <_IO_stdin_used+0x649>
outsb  %gs:(%esi),(%dx)
fs
jae    8050985 <_IO_stdin_used+0x621>
jae    80509ef <_IO_stdin_used+0x68b>
outsl  %ds:(%esi),(%dx)
ja     80509b7 <_IO_stdin_used+0x653>
je     80509ed <_IO_stdin_used+0x689>
bound  %esi,0x0(%ebx)
jae    80509f9 <_IO_stdin_used+0x695>
outsl  %ds:(%esi),(%dx)
ja     80509c1 <_IO_stdin_used+0x65d>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     805099d <_IO_stdin_used+0x639>
jbe    8050a04 <_IO_stdin_used+0x6a0>
jb     8050a14 <_IO_stdin_used+0x6b0>
imul   $0x0,0x6e(%edi),%ebp
inc    %ebp
or     %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
push   %ebp
or     %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%esi)
add    %al,(%eax)
pop    %esp
or     %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
push   $0x9
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
jnp    8050a0b <_IO_stdin_used+0x6a7>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%ebp)
add    %al,(%eax)
test   %ecx,(%ecx)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %cl,0x80509(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
cwtl
or     %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%esi)
(bad)
lcall  *0x80509(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %ah,0x25203a73
jae    8050a6c <_IO_stdin_used+0x708>
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8050ad3 <_IO_stdin_used+0x76f>
xor    %bl,0x20(%ebp)
ja     8050ade <_IO_stdin_used+0x77a>
jae    8050a9f <_IO_stdin_used+0x73b>
jo     8050ae2 <_IO_stdin_used+0x77e>
jae    8050af6 <_IO_stdin_used+0x792>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    8050af3 <_IO_stdin_used+0x78f>
push   $0x206e6120
gs
js     8050af9 <_IO_stdin_used+0x795>
arpl   %sp,(%eax)
jae    8050b11 <_IO_stdin_used+0x7ad>
jae    8050b0e <_IO_stdin_used+0x7aa>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x62696c00,%eax
das
insl   (%dx),%es:(%edi)
bound  %esi,0x69(%ebp)
je     8050b1f <_IO_stdin_used+0x7bb>
jb     8050aea <_IO_stdin_used+0x786>
push   $0x73626d00
imul   $0x26282074,0x69(%esi),%ebp
imul   $0x74733e2d,0x72(%ebp,%eiz,2),%esi
popa
je     8050b38 <_IO_stdin_used+0x7d4>
sub    %eax,(%eax)
sub    0x74(%ecx),%ch
gs
jb     8050b08 <_IO_stdin_used+0x7a4>
arpl   %si,%ds:0x72(%ebp)
jo,pn  8050b56 <_IO_stdin_used+0x7f2>
jb     8050b04 <_IO_stdin_used+0x7a0>
cmp    $0x5c27203d,%eax
xor    %ah,(%edi)
add    %ch,0x74(%ecx)
gs
jb     8050b1e <_IO_stdin_used+0x7ba>
arpl   %si,%ds:0x72(%ebp)
ja,pn  8050b5b <_IO_stdin_used+0x7f7>
and    %bh,0x30203d
and    $0x25282073,%eax
jae    8050b2e <_IO_stdin_used+0x7ca>
add    %dl,0x54(%ebp)
inc    %esi
sub    $0x626d0038,%eax
jne    8050b79 <_IO_stdin_used+0x815>
je     8050b77 <_IO_stdin_used+0x813>
jb     8050b73 <_IO_stdin_used+0x80f>
insl   (%dx),%es:(%edi)
jne    8050b83 <_IO_stdin_used+0x81f>
je     8050b82 <_IO_stdin_used+0x81e>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
js     8050b92 <_IO_stdin_used+0x82e>
add    %ah,%dl
sbbb   $0x22,0xafa100(%ecx)
add    %ah,-0x1dff9af9(%ecx)
sbbb   $0x69,0x6c006000(%eax)
je     8050b9b <_IO_stdin_used+0x837>
jb     8050b99 <_IO_stdin_used+0x835>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8050bbf <_IO_stdin_used+0x85b>
add    %ah,0x0(%ebx)
arpl   %bp,0x6279616d
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %ch,%al
mov    $0x4,%bl
or     %cl,%al
mov    $0xb9f80804,%ecx
add    $0x8,%al
mov    $0xf80804b8,%eax
mov    $0xb9280804,%eax
add    $0x8,%al
push   %eax
mov    $0xb9500804,%ecx
add    $0x8,%al
push   %eax
mov    $0xb6f00804,%ecx
add    $0x8,%al
call   f00d1064 <stdout+0xe807ce44>
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,-0x49(%eax)
add    $0x8,%al
enter  $0x4b6,$0x8
call   e80d1083 <stdout+0xe007ce63>
mov    $0x4,%dh
or     %bl,%al
mov    $0x4,%dh
or     %dl,%al
mov    $0x4,%dh
or     %ah,-0x17f7fb4a(%eax)
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %ch,%al
mov    $0x4,%bh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %dl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %cl,0x190804b5(%eax)
mov    $0x4,%dh
or     %bl,0x190804b7(%eax)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bl,%al
mov    $0x4,%ah
or     %ch,%al
mov    $0x4,%bh
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %cl,-0x77f7fb4b(%eax)
mov    $0x4,%ch
or     %bl,(%ecx)
mov    $0x4,%dh
or     %bh,-0x49(%eax)
add    $0x8,%al
mov    %dh,-0x49e6f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x49e6f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
mov    %dh,-0x4a77f7fc(%ebp)
add    $0x8,%al
lock mov $0x4,%ch
or     %bl,(%ecx)
mov    $0x4,%dh
or     %dh,%al
mov    $0x4,%ch
or     %dl,(%ecx)
mov    $0x4,%dh
or     %dl,(%eax)
mov    $0xbc100804,%esp
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
adc    %bh,0x4bba808(%esp,%eax,1)
or     %dl,(%eax)
mov    $0xbba80804,%esp
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
test   $0xbb,%al
add    $0x8,%al
adc    %bh,0x8(%esp,%eax,1)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dh,(%edx)
or     0x50b3a08,%eax
or     %al,0xb(%eax)
add    $0x50b4d08,%eax
or     %cl,0xb(%edi)
add    $0x50b5708,%eax
or     %cl,0x5e080508(%edi)
or     0x8,%eax
add    %ch,0x62(%ecx,%ebp,2)
das
insl   (%dx),%es:(%edi)
bound  %ebp,0x74(%ecx)
gs
jb     8050ebd <_IO_stdin_used+0xb59>
push   $0x69626d00
je     8050efb <_IO_stdin_used+0xb97>
jb     8050ef7 <_IO_stdin_used+0xb93>
insl   (%dx),%es:(%edi)
jne    8050f07 <_IO_stdin_used+0xba3>
je     8050f06 <_IO_stdin_used+0xba2>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
js     8050f16 <_IO_stdin_used+0xbb2>
add    %ah,0x25282073
jae    8050ed3 <_IO_stdin_used+0xb6f>
and    %ah,0x25000a73
jae    8050ed2 <_IO_stdin_used+0xb6e>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8050f26 <_IO_stdin_used+0xbc2>
je     8050f33 <_IO_stdin_used+0xbcf>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8050f36 <_IO_stdin_used+0xbd2>
je     8050f43 <_IO_stdin_used+0xbdf>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     8050f4d <_IO_stdin_used+0xbe9>
je     8050f5a <_IO_stdin_used+0xbf6>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8050f1f <_IO_stdin_used+0xbbb>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8050f71 <_IO_stdin_used+0xc0d>
jb     8050f78 <_IO_stdin_used+0xc14>
and    %ah,0x75(%edx)
addr16 jae 8050f2a <_IO_stdin_used+0xbc6>
je     8050f7b <_IO_stdin_used+0xc17>
cmp    (%eax),%ah
and    $0xa73,%eax
add    %cl,(%edx)
dec    %esp
imul   $0x2065736e,0x65(%ebx),%esp
inc    %edi
push   %eax
dec    %esp
jbe    8050f55 <_IO_stdin_used+0xbf1>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     8050fa4 <_IO_stdin_used+0xc40>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     8050f5a <_IO_stdin_used+0xbf6>
insb   (%dx),%es:(%edi)
popa
je     8050fa3 <_IO_stdin_used+0xc3f>
jb     8050f60 <_IO_stdin_used+0xbfc>
cmp    $0x68,%al
je     8050fb8 <_IO_stdin_used+0xc54>
jo     8050f80 <_IO_stdin_used+0xc1c>
das
das
outsb  %ds:(%si),(%dx)
jne    8050f7a <_IO_stdin_used+0xc16>
outsl  %ds:(%esi),(%dx)
jb     8050fb6 <_IO_stdin_used+0xc52>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 8050fc8 <_IO_stdin_used+0xc64>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    8050f89 <_IO_stdin_used+0xc25>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     8050fed <_IO_stdin_used+0xc89>
popa
jb     8050fde <_IO_stdin_used+0xc7a>
cmp    (%eax),%ah
jns    8050fec <_IO_stdin_used+0xc88>
jne    8050f9f <_IO_stdin_used+0xc3b>
popa
jb     8050fe7 <_IO_stdin_used+0xc83>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8051007 <_IO_stdin_used+0xca3>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8051011 <_IO_stdin_used+0xcad>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     805102e <_IO_stdin_used+0xcca>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     805102d <_IO_stdin_used+0xcc9>
outsb  %ds:(%esi),(%dx)
je     8050feb <_IO_stdin_used+0xc87>
jo     8051032 <_IO_stdin_used+0xcce>
jb     805103c <_IO_stdin_used+0xcd8>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805104c <_IO_stdin_used+0xce8>
je     8051059 <_IO_stdin_used+0xcf5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805101e <_IO_stdin_used+0xcba>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805106c <_IO_stdin_used+0xd08>
je     8051079 <_IO_stdin_used+0xd15>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805103e <_IO_stdin_used+0xcda>
and    %ah,0x250a2c73
jae    8051046 <_IO_stdin_used+0xce2>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051090 <_IO_stdin_used+0xd2c>
je     805109d <_IO_stdin_used+0xd39>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8051062 <_IO_stdin_used+0xcfe>
and    %ah,0x250a2c73
jae    805106a <_IO_stdin_used+0xd06>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80510b8 <_IO_stdin_used+0xd54>
je     80510c5 <_IO_stdin_used+0xd61>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805108a <_IO_stdin_used+0xd26>
and    %ah,0x250a2c73
jae    8051092 <_IO_stdin_used+0xd2e>
and    %ah,0x25202c73
jae    805109a <_IO_stdin_used+0xd36>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80510e4 <_IO_stdin_used+0xd80>
je     80510f1 <_IO_stdin_used+0xd8d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80510b6 <_IO_stdin_used+0xd52>
and    %ah,0x250a2c73
jae    80510be <_IO_stdin_used+0xd5a>
and    %ah,0x25202c73
jae    80510c6 <_IO_stdin_used+0xd62>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051114 <_IO_stdin_used+0xdb0>
je     8051121 <_IO_stdin_used+0xdbd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80510e6 <_IO_stdin_used+0xd82>
and    %ah,0x250a2c73
jae    80510ee <_IO_stdin_used+0xd8a>
and    %ah,0x25202c73
jae    80510f6 <_IO_stdin_used+0xd92>
and    %ah,0x250a2c73
jae    80510fe <_IO_stdin_used+0xd9a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8051148 <_IO_stdin_used+0xde4>
je     8051155 <_IO_stdin_used+0xdf1>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805111a <_IO_stdin_used+0xdb6>
and    %ah,0x250a2c73
jae    8051122 <_IO_stdin_used+0xdbe>
and    %ah,0x25202c73
jae    805112a <_IO_stdin_used+0xdc6>
and    %ah,0x250a2c73
jae    8051132 <_IO_stdin_used+0xdce>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
ror    $0x4,%bh
or     %cl,%al
iret
add    $0x8,%al
or     %dl,%al
add    $0x8,%al
push   %eax
rolb   (%eax,%ecx,1)
test   $0xd0,%al
add    $0x8,%al
add    %dl,%cl
add    $0x8,%al
push   $0xe00804d1
roll   (%eax,%ecx,1)
or     $0x4,%dh
or     %bl,(%eax)
iret
add    $0x8,%al
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     80511bd <_IO_stdin_used+0xe59>
jb     80511af <_IO_stdin_used+0xe4b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     80511d1 <_IO_stdin_used+0xe6d>
popa
jb     80511c2 <_IO_stdin_used+0xe5e>
and    %al,0x6f(%esi)
jne    80511d0 <_IO_stdin_used+0xe6c>
fs
popa
je     80511cf <_IO_stdin_used+0xe6b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     80511ee <_IO_stdin_used+0xe8a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:(%edi)
jne    80511f6 <_IO_stdin_used+0xe92>
jb     80511b4 <_IO_stdin_used+0xe50>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
sbb    (%eax),%al
add    %ch,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
jg     80511d1 <_IO_stdin_used+0xe6d>
add    %al,(%eax)
add    %ch,0x62(%ebp)
jne    805124d <_IO_stdin_used+0xee9>
je     805124b <_IO_stdin_used+0xee7>
jb     8051247 <_IO_stdin_used+0xee3>
insl   (%dx),%es:(%edi)
jne    8051257 <_IO_stdin_used+0xef3>
je     8051256 <_IO_stdin_used+0xef2>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
js     8051266 <_IO_stdin_used+0xf02>
add    %ch,0x62(%ebp)
jne    8051260 <_IO_stdin_used+0xefc>
je     805125e <_IO_stdin_used+0xefa>
jb     805125a <_IO_stdin_used+0xef6>
insl   (%dx),%es:(%edi)
jne    805126a <_IO_stdin_used+0xf06>
je     8051269 <_IO_stdin_used+0xf05>
pop    %edi
outsb  %ds:(%esi),(%dx)
gs
js     8051279 <_IO_stdin_used+0xf15>
add    %ebx,(%ebx)
add    (%ebx),%edi
add    %al,(%ebx)
add    %al,(%eax)
pop    %edi
add    %al,(%eax)
add    %cl,(%eax)
jl     8051216 <_IO_stdin_used+0xeb2>
lcall  *(%ebx,%eax,1)
add    %al,(%eax)
mov    %al,0x374ffff(%eax)
add    %al,(%eax)
mov    $0x40ffff8d,%eax
add    (%eax),%eax
add    %ch,(%eax)
mov    %edi,%?
call   *0x0(%ebx,%eax,1)
add    %bh,(%eax)
xchg   %eax,%ecx
(bad)
call   *-0x6eb80000(%ebx,%eax,1)
(bad)
ljmp   *0x58000003(%eax)
xchg   %eax,%ecx
(bad)
(bad)
mov    $0x28000003,%esp
xchg   %eax,%edx
(bad)
(bad)
call   90051258 <stdout+0x87ffd038>
xchg   %eax,%edx
(bad)
decl   (%eax)
add    $0x0,%al
add    %cl,%al
xchg   %eax,%edx
(bad)
ljmp   *(%esp,%eax,1)
add    %al,(%eax)
fcoms  0x440ffff(%edx)
add    %al,(%eax)
sub    %dl,0x458ffff(%ebx)
add    %al,(%eax)
cwtl
xchg   %eax,%ebx
(bad)
ljmp   *-0x6bb80000(%esp,%eax,1)
(bad)
(bad)
in     (%dx),%al
add    $0x0,%al
add    %bh,%al
pushf
(bad)
pushl  (%eax)
add    $0x9d980000,%eax
(bad)
(bad)
js     8051297 <_IO_stdin_used+0xf33>
add    %al,(%eax)
dec    %eax
mov    0x5e4ffff,%al
add    %al,(%eax)
js     805123e <_IO_stdin_used+0xeda>
(bad)
call   *(%eax)
push   %es
add    %al,(%eax)
push   $0x48ffffa1
push   %es
add    %al,(%eax)
cwtl
stos   %eax,%es:(%edi)
(bad)
decl   -0x52c80000(%esi,%eax,1)
(bad)
dec    %esp
push   %es
add    %al,(%eax)
js     805126b <_IO_stdin_used+0xf07>
(bad)
incl   (%eax)
pop    %es
add    %al,(%eax)
cwtl
lods   %ds:(%esi),%eax
(bad)
call   *(%edi,%eax,1)
add    %al,(%eax)
mov    $0x28ffffad,%eax
pop    %es
add    %al,(%eax)
clc
lods   %ds:(%esi),%eax
(bad)
decl   0x0(%edi,%eax,1)
add    %bl,(%eax)
scas   %es:(%edi),%al
(bad)
jmp    *0x7(%eax)
add    %al,(%eax)
pop    %eax
scas   %es:(%edi),%al
(bad)
incl   -0x51480000(%edi,%eax,1)
(bad)
(bad)
mov    $0x98000007,%eax
scas   %es:(%edi),%eax
(bad)
push   %esp
pop    %es
add    %al,(%eax)
enter  $0xffaf,$0xff
or     $0x8,%al
add    %al,(%eax)
pop    %eax
mov    $0xff,%al
incl   0x8(%eax)
add    %al,(%eax)
js     80512be <_IO_stdin_used+0xf5a>
(bad)
call   *0x0(%eax,%ecx,1)
add    %bl,0x68ffffb0(%eax)
or     %al,(%eax)
add    %bh,0x7cffffb0(%eax)
or     %al,(%eax)
add    %bl,%al
mov    $0xff,%al
call   *0x8000008(%eax)
mov    $0xff,%cl
pushl  0x38000008(%eax)
mov    $0xff,%cl
call   *%eax
or     %al,(%eax)
add    %ch,-0x4f(%eax)
(bad)
(bad)
call   a005134d <stdout+0x97ffd12d>
mov    $0xff,%cl
incl   (%eax)
or     %eax,(%eax)
add    %cl,-0x4e(%eax)
(bad)
jmp    *(%ecx,%ecx,1)
add    %al,(%eax)
js     8051308 <_IO_stdin_used+0xfa4>
(bad)
(bad)
cmp    $0x9,%al
add    %al,(%eax)
test   $0xb2,%al
(bad)
call   *0x0(%ecx,%ecx,1)
add    %bl,%al
mov    $0xff,%dl
ljmp   *0x0(%ecx,%ecx,1)
add    %cl,-0x6f00004d(%eax)
or     %eax,(%eax)
add    %cl,%al
mov    $0xff,%bl
ljmp   *0x8000009(%eax)
mov    $0xff,%ah
inc    %eax
or     %eax,(%eax)
add    %cl,-0x4c(%eax)
(bad)
(bad)
fmuls  (%ecx)
add    %al,(%eax)
push   $0xecffffb4
or     %eax,(%eax)
add    %cl,0xffffb4(%eax)
or     (%eax),%al
add    %ch,0x14ffffb4(%eax)
or     (%eax),%al
add    %cl,%al
mov    $0xff,%ah
ljmp   *(%eax)
or     (%eax),%al
add    %ch,(%eax)
mov    $0xff,%ch
jmp    *0x0(%edx,%ecx,1)
add    %cl,-0x5f00004b(%eax)
or     (%eax),%al
add    %cl,%al
mov    $0xff,%ch
(bad)
fmuls  (%edx)
add    %al,(%eax)
test   $0xbb,%al
(bad)
lcall  *(%ebx,%ecx,1)
add    %al,(%eax)
sbb    %al,%cl
(bad)
(bad)
mov    $0x6800000b,%eax
sar    $0xff,%edi
rorb   (%ebx)
add    %al,(%eax)
enter  $0xffc1,$0xff
hlt
or     (%eax),%eax
add    %cl,(%eax)
ret    $0xffff
or     $0xc,%al
add    %al,(%eax)
mov    $0x30ffffc2,%eax
or     $0x0,%al
add    %ch,%al
ret    $0xffff
push   %esp
or     $0x0,%al
add    %bl,(%eax)
ret
(bad)
(bad)
js     805140e <_IO_stdin_used+0x10aa>
add    %al,(%eax)
sub    %al,%bl
(bad)
decl   -0x3c880000(%esp,%ecx,1)
(bad)
(bad)
mov    $0xb800000c,%esp
ret
(bad)
(bad)
call   20051429 <stdout+0x17ffd209>
(bad)
(bad)
lcall  *(%eax)
or     $0xc4680000,%eax
(bad)
(bad)
cmp    $0xd,%al
add    %al,(%eax)
cwtl
(bad)
(bad)
lcall  *0x0(%ebp,%ecx,1)
add    %cl,%al
(bad)
(bad)
(bad)
js     8051447 <_IO_stdin_used+0x10e3>
add    %al,(%eax)
clc
(bad)
(bad)
lcall  *0x2800000d(%eax)
(bad)
mov    $0x7800000d,%eax
(bad)
int3
or     $0xc5c80000,%eax
(bad)
push   %eax
or     $0xc6080000,%eax
(bad)
call   *(%esi,%ecx,1)
add    %al,(%eax)
dec    %eax
(bad)
(bad)
(bad)
cmp    %cl,(%esi)
add    %al,(%eax)
test   $0xc6,%al
(bad)
incl   -0x38d80000(%esi,%ecx,1)
(bad)
(bad)
fmull  (%esi)
add    %al,(%eax)
call   2505144b <stdout+0x1cffd22b>
sldt   (%eax)
sbb    %cl,%bl
(bad)
(bad)
cmp    $0xf,%al
add    %al,(%eax)
js     8051459 <_IO_stdin_used+0x10f5>
(bad)
pushl  0x0(%edi,%ecx,1)
add    %bl,-0x77000035(%eax)
sldt   (%eax)
clc
int3
(bad)
(bad)
mov    $0x7800000f,%eax
(bad)
(bad)
(bad)
call   400514bc <stdout+0x37ffd29c>
out    %al,$0xff
ljmp   *(%eax,%edx,1)
add    %al,(%eax)
sub    %ch,%cl
(bad)
pushl  0x10(%eax)
add    %al,(%eax)
sbb    %ch,%bl
(bad)
pushl  -0x17fffff0(%eax)
jmp    80514c6 <_IO_stdin_used+0x1162>
(bad)
clc
adc    %al,(%eax)
add    %cl,0x40ffffec(%eax)
adc    %eax,(%eax)
add    %ch,%al
in     (%dx),%al
(bad)
ljmp   *0x0(%ecx,%edx,1)
add    %bh,-0x13(%eax)
(bad)
inc    %esp
adc    %eax,(%eax)
add    %bl,%al
in     (%dx),%eax
(bad)
push   %eax
adc    %eax,(%eax)
add    %cl,-0x12(%eax)
(bad)
lcall  *(%eax)
adc    (%eax),%al
add    %bh,-0x10(%eax)
(bad)
lcall  *0x12(%eax)
add    %al,(%eax)
call   9d0514f1 <stdout+0x94ffd2d1>
adc    (%eax),%al
add    %bh,%al
lock (bad)
.byte 0xff
test   $0x12,%al
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8051523 <_IO_stdin_used+0x11bf>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
in     $0x78,%al
(bad)
incl   0x4(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8051543 <_IO_stdin_used+0x11df>
js     8051541 <_IO_stdin_used+0x11dd>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,-0x76(%eax)
(bad)
ljmp   *0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,%ah
mov    %bh,%bh
decl   (%ecx)
add    (%eax),%eax
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
je     8051582 <_IO_stdin_used+0x121e>
add    %al,(%eax)
or     $0x7d,%al
(bad)
pushl  (%edx)
or     $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x10,%eax
xchg   %eax,%esp
add    %al,(%eax)
add    %bl,0xaffff(%ebp,%ecx,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
test   $0x0,%al
add    %al,(%eax)
cwtl
(bad)
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,-0x726c0000(%eax,%eax,1)
(bad)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
call   400515f9 <stdout+0x37ffd3d9>
mov    %edi,%?
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %eax,(%eax)
add    %bh,-0x72(%eax)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
sub    $0x1,%al
add    %al,(%eax)
xchg   %eax,%esp
mov    %edi,%?
incl   0x0
add    %al,(%eax)
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
inc    %eax
add    %eax,(%eax)
add    %dl,0x47ffff8e(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %al,(%edx)
inc    %ebx
push   %cs
add    $0x50,%al
add    %al,(%eax)
add    %bl,0x1(%eax)
add    %al,(%eax)
enter  $0xff8e,$0xff
add    %al,%gs:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xa,0x7b300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%esi),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %eax,(%eax)
add    %ah,%ah
mov    %edi,%?
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,%ah
add    %eax,(%eax)
add    %dl,-0x1(%edi,%ecx,4)
ljmp   *0x8(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e48
push   %ecx
add    (%edx),%ecx
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%al
add    %al,%al
xchg   %eax,%edi
(bad)
call   *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
jo     8051767 <_IO_stdin_used+0x1403>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   $0x78000000
add    (%eax),%al
add    %bl,(%eax)
cwtl
(bad)
ljmp   *0x2(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%edi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
imul   $0xe,(%edx),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %ah,%ah
add    (%eax),%al
add    %bl,-0x1(%edx,%ebx,4)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
adc    %al,(%ebx)
add    %al,(%eax)
pusha
lcall  $0x0,$0xe2ffff
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %cl,0x3(%eax)
add    %al,(%eax)
sbb    %bl,0xa2fffff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    %es,(%ebx)
add    %al,(%eax)
add    $0xa5,%al
(bad)
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %cl,%ah
add    (%eax),%eax
add    %ah,-0x1(%esi,%eiz,4)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %dh,-0x5a(%eax)
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%esp,%eax,1)
add    %al,(%eax)
jl     80518cc <_IO_stdin_used+0x1568>
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    $0x0,%al
add    %cl,0x3fffffa6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
dec    %esp
add    $0x0,%al
add    %ah,0x19ffff(%esi,%eiz,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x0,%al
add    %dh,0x38ffffa6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
test   %al,(%eax,%eax,1)
add    %cl,%ah
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
mov    $0xf8000004,%eax
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %dh,%ah
add    $0x0,%al
add    %bl,0x2bffff(%edi,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
or     $0x5,%al
add    %al,(%eax)
mov    $0xa7,%ah
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    $0xa8100000,%eax
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0(%ebp,%eax,1)
add    %bl,(%eax,%ebp,4)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,0x5(%eax)
add    %al,(%eax)
sub    %ch,0x18ffff(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jl     8051a8f <_IO_stdin_used+0x172b>
add    %al,(%eax)
xor    $0xa8,%al
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
nop
add    $0xa8400000,%eax
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,0x50000005(%eax)
test   $0xff,%al
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %dl,%al
add    $0xa8600000,%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
call   80051afe <stdout+0x77ffd8de>
test   $0xff,%al
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
nop
test   $0xff,%al
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
and    $0x6,%al
add    %al,(%eax)
sbb    $0xa9,%al
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
cmp    $0x6,%al
add    %al,(%eax)
xor    $0xa9,%al
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   %esp
push   %es
add    %al,(%eax)
dec    %esp
test   $0x23ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %es
add    %al,(%eax)
fs
test   $0xa5ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
nop
push   %es
add    %al,(%eax)
lock test $0x33ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
test   $0x6,%al
add    %al,(%eax)
sbb    %ch,0x33ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
rolb   $0x0,(%esi)
add    %al,-0x56(%eax)
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fadds  (%esi)
add    %al,(%eax)
push   $0x19ffffaa
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,%ah
push   %es
add    %al,(%eax)
je     8051ba8 <_IO_stdin_used+0x1844>
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
subb   $0x0,0x1affff(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edi,%eax,1)
add    %al,(%eax)
mov    %gs,0x18ffff(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
sub    %al,(%edi)
add    %al,(%eax)
cwtl
stos   %al,%es:(%edi)
(bad)
lcall  *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %ah,0x0(%edi,%eax,1)
add    %bh,0x5affff(%edx,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %ah,-0x1ffffff9(%eax)
stos   %al,%es:(%edi)
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ah,0xa(%ebp)
push   %cs
or     $0x44,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %bl,%al
pop    %es
add    %al,(%eax)
call   e7051c97 <stdout+0xdeffda77>
add    $0x41000000,%eax
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1800e43
push   %ss
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
cwtl
add    %al,(%eax)
add    %bl,(%eax,%ecx,1)
add    %al,(%eax)
test   %dh,0x567ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x58000008,%eax
mov    $0xff,%ch
decl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,%al
or     %al,(%eax)
add    %dl,0x53ffffb5(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
hlt
or     %al,(%eax)
add    %cl,%ah
mov    $0xff,%ch
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
or     $0x9,%al
add    %al,(%eax)
hlt
mov    $0xff,%ch
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
xor    %cl,(%ecx)
add    %al,(%eax)
xorb   $0x0,0x25ffff(%esi)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
push   %esp
or     %eax,(%eax)
add    %cl,0x2effff(%esi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
js     8051e8f <_IO_stdin_used+0x1b2b>
add    %al,(%eax)
cwtl
mov    $0xff,%dh
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
mov    %cs,(%ecx)
add    %al,(%eax)
xchg   %eax,%esp
mov    $0xff,%dh
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
mov    $0xb4000009,%esp
mov    $0xff,%dh
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
call   d0051f02 <stdout+0xc7ffdce2>
mov    $0xff,%dh
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sbb    %cl,(%edx)
add    %al,(%eax)
clc
mov    $0xff,%dh
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
cmp    $0xa,%al
add    %al,(%eax)
and    $0xb7,%al
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bl,0x0(%edx,%ecx,1)
add    %dh,(%edi,%esi,4)
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
js     8051f90 <_IO_stdin_used+0x1c2c>
add    %al,(%eax)
dec    %eax
mov    $0xff,%bh
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %bl,0x5800000a(%eax)
mov    $0xff,%bh
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,0x6800000a(%eax)
mov    $0xff,%bh
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,(%eax)
add    %al,(%eax)
add    %cl,%ah
or     (%eax),%al
add    %ah,0x4fffff(%edi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jne    8051ff9 <_IO_stdin_used+0x1c95>
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
lock or (%eax),%al
add    %dl,%al
mov    $0xff,%bh
pushl  (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
adc    $0xb,%al
add    %al,(%eax)
in     (%dx),%al
mov    $0xff,%bh
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
or     %gs:(%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
dec    %eax
add    %al,(%eax)
add    %bh,(%eax)
or     (%eax),%eax
add    %cl,(%eax)
mov    $0x5cffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a4b02
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %al,-0x47e40000(%ebx,%ecx,1)
(bad)
(bad)
js     805209a <_IO_stdin_used+0x1d36>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     80520bb <_IO_stdin_used+0x1d57>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
fmull  (%ebx)
add    %al,(%eax)
inc    %esp
mov    $0x3b9ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
sbb    $0xc,%al
add    %al,(%eax)
les    0x29ffff(%ebx),%edi
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %bh,(%esp,%ecx,1)
add    %al,(%eax)
aam    $0xbb
(bad)
call   *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
je     805218e <_IO_stdin_used+0x1e2a>
add    %al,(%eax)
cld
mov    $0x1cffff,%ebx
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
mov    %cl,(%eax,%eax,1)
add    %cl,(%eax)
mov    $0x153ffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
inc    %edi
xchg   %al,(%ebx,%eax,4)
add    $0x41c30a72,%eax
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
mov    $0x3800000c,%eax
mov    $0x974ffff,%ebp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
inc    %ebx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xc30a4a02,%eax
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %ch,%al
or     $0x0,%al
add    %cl,-0x4700003a(%eax)
sldt   (%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x2f00e46
call   1c132c24 <stdout+0x140dea04>
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ch,-0x29fc0000(,%ecx,1)
(bad)
(bad)
in     (%dx),%eax
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x20f00e46
push   %esi
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
jo     805228b <_IO_stdin_used+0x1f27>
add    %al,(%eax)
mov    $0xd8,%al
(bad)
(bad)
jmp    8052287 <_IO_stdin_used+0x1f23>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffbd,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%eax
add    %dh,0x6000000d(%eax)
(bad)
inc    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jb     80522e7 <_IO_stdin_used+0x1f83>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
pop    %esi
or     (%esi),%cl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%eax
add    %bh,%al
or     $0xdae80000,%eax
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
inc    %eax
push   %cs
add    %al,(%eax)
inc    %eax
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ch,0x0(%esi,%ecx,1)
add    %dh,-0x1(%ebx,%ebx,8)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
les    (%esi),%ecx
add    %al,(%eax)
lods   %ds:(%esi),%al
(bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xa(%edi),%cl
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x42,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
and    $0x0,%al
add    %al,(%eax)
lock push %cs
add    %al,(%eax)
loopne 80523dd <_IO_stdin_used+0x2079>
(bad)
ljmp   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x3cf5adfe(%ebx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %eax
or     %bl,%al
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
sbb    %cl,(%edi)
add    %al,(%eax)
sub    %bl,%ah
(bad)
jmp    *(%esi)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa7,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
pop    %eax
sldt   (%eax)
sbb    %bl,%dh
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,-0x21b40000(%edi,%ecx,1)
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x4800000f(%eax)
fdivrp %st,%st(7)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
nop
lahf
add    $0x8,%al
jo     8053ead <_IO_stdin_used+0x3b49>
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
in     $0x8d,%al
add    $0x8,%al
or     $0x3c000000,%eax
add    0x1908,%eax
add    %cl,(%eax)
aas
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x3f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
lock xchg %al,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %dh,%al
addl   $0xa,(%eax,%ecx,1)
pop    %edx
add    (%eax),%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    $0x208,%eax
add    %bh,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %ch,0x110804(%ebx,%ecx,4)
add    %al,(%eax)
jl     8053f2d <_IO_stdin_used+0x3bc9>
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x14(%edi)
mov    (%eax,%ecx,1),%al
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x4a(%edi)
mov    (%eax,%ecx,1),%al
add    %al,(%eax)
adc    $0x3f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%esi)
mov    (%eax,%ecx,1),%es
mov    %ss:(%eax,%ecx,1),%es
inc    %esi
mov    (%eax,%ecx,1),%es
push   %esi
mov    (%eax,%ecx,1),%es
data16
mov    (%eax,%ecx,1),%es
jbe    8053fb0 <_IO_stdin_used+0x3c4c>
add    $0x8,%al
xchg   %cl,-0x7169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %es
popl   (%eax,%ecx,1)
push   %ss
popl   (%eax,%ecx,1)
popl   %es:(%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8053ff1 <_IO_stdin_used+0x3c8d>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8054032 <_IO_stdin_used+0x3cce>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8054073 <_IO_stdin_used+0x3d0f>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    80540b4 <_IO_stdin_used+0x3d50>
add    $0x8,%al
.byte 0x86
xchg   %eax,%edx
add    $0x8,%al
popa
inc    %ecx
add    $0x5415c08,%eax
or     %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
xor    %cl,(%ecx)
add    %ah,0xa(%eax)
add    $0x108,%eax
add    %al,(%esi)
add    %al,(%eax)
add    %dh,0x1000805(%ecx,%eax,2)
add    %al,(%eax)
inc    %eax
inc    %edx
add    $0x108,%eax
add    %al,(%eax)
arpl   %sp,0x74(%ecx)
add    %al,%bh
cmpsl  %es:(%edi),%ds:(%esi)
push   %cs
.byte 0x8
