das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %dl,0xfc047645
mov    $0x84c0d384,%esi
test   %ebp,%esp
cmp    $0x9f,%al
pusha
pop    %edx
es
.byte 0xe9
xchg   %eax,%ebp
pop    %eax
add    (%eax),%eax
add    %al,(%eax)
pop    %ebp
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x5d121d(,%ebp,2)
add    %al,(%eax)
pop    %esi
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
sub    %ebx,0x50bc1c8c
jbe    8048176 <__snprintf_chk@plt-0x102a>
cmp    %dh,%dl
mov    (%esp,%ebp,4),%ebx
dec    %ebx
jecxz  80481a0 <__snprintf_chk@plt-0x1000>
in     $0x62,%eax
inc    %ecx
cmc
xor    %ah,%al
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
sub    (%ebx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lcall  $0x0,$0x0
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ah
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edi)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%dl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%bl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
into
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fadds  (%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    %eax,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    (%ebx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
nop
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ah
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%cl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
inc    %ebx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ebx
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%bh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ds
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%al
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
ss
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
scas   %es:(%edi),%eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jecxz  80485c1 <__snprintf_chk@plt-0xbdf>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %eax,%ss:(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   $0x2
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x3,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popa
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%edx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cwtl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%ah
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%esi)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
push   %edx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%al
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
out    %eax,(%dx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x20000002(%esi)
xor    $0x5,%al
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
inc    %esp
add    $0x0,%al
add    %ah,%al
xor    0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,(%esi)
add    (%eax),%eax
add    %ah,%ah
xor    0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ah,(%edi)
add    %eax,(%eax)
add    %ah,%ah
repnz add $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
(bad)
jae    8048801 <__snprintf_chk@plt-0x99f>
add    %al,(%eax)
loopne 8048835 <__snprintf_chk@plt-0x96b>
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %bl,0x1(%edx)
add    %al,(%eax)
add    %dh,0x408(,%eax,1)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,(%edi)
add    (%eax),%eax
add    %ah,(%esp,%esi,1)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
bound  %ebp,0x69(%ebx,%ebp,2)
fs
jae,pn 80488a7 <__snprintf_chk@plt-0x8f9>
xor    %eax,%cs:(%eax)
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     80488a9 <__snprintf_chk@plt-0x8f7>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80488d4 <__snprintf_chk@plt-0x8cc>
popa
jb     80488d7 <__snprintf_chk@plt-0x8c9>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    80488c9 <__snprintf_chk@plt-0x8d7>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    80488ea <__snprintf_chk@plt-0x8b6>
gs
jae    804887a <__snprintf_chk@plt-0x926>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     80488e6 <__snprintf_chk@plt-0x8ba>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
bound  %ebp,0x69(%ebx,%ebp,2)
fs
pop    %edi
fs
gs
jbe    804890c <__snprintf_chk@plt-0x894>
outsl  %ds:(%esi),(%dx)
pop    %edi
je     8048911 <__snprintf_chk@plt-0x88f>
pop    %edi
ja     804890d <__snprintf_chk@plt-0x893>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
gs imul $0x6b6c6200,%fs:%gs:0x6b(%ebx),%esi
6b
imul   $0x65626f72,0x70(%edi,%ebx,2),%esp
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
imul   $0x5f,0x70(%ebp),%esi
jbe    8048923 <__snprintf_chk@plt-0x87d>
insb   (%dx),%es:(%edi)
jne    804892a <__snprintf_chk@plt-0x876>
add    %ah,0x6c(%edx)
imul   $0x5f,0x64(%ecx),%ebp
outsb  %ds:(%esi),(%dx)
gs
ja     804892f <__snprintf_chk@plt-0x871>
jo     8048944 <__snprintf_chk@plt-0x85c>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x5f(%ebp)
data16
jb     8048948 <__snprintf_chk@plt-0x858>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x6d61,0x6e(%ebp,%eiz,2),%bp
add    %ah,%gs:0x6c(%edx)
imul   $0x5f,0x64(%ecx),%ebp
jo     804895e <__snprintf_chk@plt-0x842>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x5f(%ebp)
outsb  %gs:(%esi),(%dx)
popa
bound  %ebp,0x5f(%ebp,%eiz,2)
jae    804896e <__snprintf_chk@plt-0x832>
jo     8048960 <__snprintf_chk@plt-0x840>
jb     804895f <__snprintf_chk@plt-0x841>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
add    %ah,0x6c(%edx)
imul   $0x5f,0x64(%ecx),%ebp
outsl  %fs:(%esi),(%dx)
pop    %edi
jae    804896f <__snprintf_chk@plt-0x831>
data16
gs
jo     8048984 <__snprintf_chk@plt-0x81c>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x0(%ebp)
bound  %ebp,0x69(%ebx,%ebp,2)
fs
pop    %edi
jo     8048990 <__snprintf_chk@plt-0x810>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x5f(%ebp)
jae    8048989 <__snprintf_chk@plt-0x817>
je     8048985 <__snprintf_chk@plt-0x81b>
jae    804899d <__snprintf_chk@plt-0x803>
jo     804898f <__snprintf_chk@plt-0x811>
jb     804898e <__snprintf_chk@plt-0x812>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
pop    %edi
data16
insb   (%dx),%es:(%edi)
popa
addr16 jae 8048938 <__snprintf_chk@plt-0x868>
bound  %ebp,0x69(%ebx,%ebp,2)
fs
pop    %edi
data16
jb     80489a6 <__snprintf_chk@plt-0x7fa>
gs
pop    %edi
jo     80489b7 <__snprintf_chk@plt-0x7e9>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x0(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x2e6f732e,0x63(%edx),%esp
add    %bl,%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    80489cd <__snprintf_chk@plt-0x7d3>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %bl,0x5f(%edi)
jo     80489d8 <__snprintf_chk@plt-0x7c8>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x65,(%eax),%eax
js     80489db <__snprintf_chk@plt-0x7c5>
je     8048974 <__snprintf_chk@plt-0x82c>
jae    80489db <__snprintf_chk@plt-0x7c5>
je     80489e4 <__snprintf_chk@plt-0x7bc>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dh,%gs:0x74(%ebx)
jb     80489f0 <__snprintf_chk@plt-0x7b0>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     80489f3 <__snprintf_chk@plt-0x7ad>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048a03 <__snprintf_chk@plt-0x79d>
arpl   %bp,0x72(%eax)
add    %dh,0x65(%edx)
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x5f007461,0x6b(%esi),%ebp
pop    %edi
jae    8048a18 <__snprintf_chk@plt-0x788>
jb     8048a0a <__snprintf_chk@plt-0x796>
jne    8048a18 <__snprintf_chk@plt-0x788>
add    %ah,0x67(%ebx,%eiz,2)
gs
je     8048a23 <__snprintf_chk@plt-0x77d>
gs
js     8048a26 <__snprintf_chk@plt-0x77a>
add    %ah,0x65(%edi)
je     8048a27 <__snprintf_chk@plt-0x779>
ja     8048a2e <__snprintf_chk@plt-0x772>
imul   $0x7378665f,0x5f(%eax,%eax,1),%esp
je     8048a24 <__snprintf_chk@plt-0x77c>
je     8048a26 <__snprintf_chk@plt-0x77a>
je     80489fd <__snprintf_chk@plt-0x7a3>
xor    $0x0,%al
arpl   %bp,0x73(%edi,%ebp,2)
gs imul $0x67746567,%fs:%gs:0x0(%edx),%esi
67
jb     8048a3f <__snprintf_chk@plt-0x761>
imul   $0x636e7274,0x73(%eax,%eax,1),%esp
jo     8048a5b <__snprintf_chk@plt-0x745>
add    %ch,0x62(%ebp)
jae    8048a5b <__snprintf_chk@plt-0x745>
outsl  %ds:(%esi),(%dx)
ja     8048a4d <__snprintf_chk@plt-0x753>
jae    80489ec <__snprintf_chk@plt-0x7b4>
ja     8048a4f <__snprintf_chk@plt-0x751>
jb     8048a5e <__snprintf_chk@plt-0x742>
js     80489f2 <__snprintf_chk@plt-0x7ae>
jbe    8048a5a <__snprintf_chk@plt-0x746>
jae    8048a59 <__snprintf_chk@plt-0x747>
popa
outsb  %ds:(%esi),(%dx)
data16
add    %bl,0x5f(%edi)
jae    8048a72 <__snprintf_chk@plt-0x72e>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x6e696c6e,0x75(%eax,%eax,1),%ebp
imul   $0x69,(%eax),%eax
jae    8048a8c <__snprintf_chk@plt-0x714>
jo     8048a89 <__snprintf_chk@plt-0x717>
imul   $0x77657200,0x74(%esi),%ebp
imul   $0x726964,0x64(%esi),%ebp
jae    8048a9b <__snprintf_chk@plt-0x705>
jb     8048a9d <__snprintf_chk@plt-0x703>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
popa
jae    8048aa5 <__snprintf_chk@plt-0x6fb>
gs
jb     8048aa9 <__snprintf_chk@plt-0x6f7>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     8048aa7 <__snprintf_chk@plt-0x6f9>
pop    %edi
addr16
gs
je     8048aa6 <__snprintf_chk@plt-0x6fa>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048abf <__snprintf_chk@plt-0x6e1>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     8048a52 <__snprintf_chk@plt-0x74e>
jae    8048ac8 <__snprintf_chk@plt-0x6d8>
jb     8048aca <__snprintf_chk@plt-0x6d6>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %dh,0x65(%ebx)
je     8048aca <__snprintf_chk@plt-0x6d6>
outsb  %ds:(%esi),(%dx)
je     8048ac5 <__snprintf_chk@plt-0x6db>
outsb  %ds:(%esi),(%dx)
je     8048a63 <__snprintf_chk@plt-0x73d>
data16
addr16
gs
je     8048adb <__snprintf_chk@plt-0x6c5>
add    %bl,0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jo     8048ad3 <__snprintf_chk@plt-0x6cd>
outsb  %ds:(%esi),(%dx)
popa
je     8048aa8 <__snprintf_chk@plt-0x6f8>
xor    $0x5f,%al
xor    (%eax),%al
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048af3 <__snprintf_chk@plt-0x6ad>
jb     8048aed <__snprintf_chk@plt-0x6b3>
outsb  %gs:(%esi),(%dx)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048aee <__snprintf_chk@plt-0x6b2>
je     8048a8b <__snprintf_chk@plt-0x715>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
arpl   %bp,%gs:0x6e(%edi)
jbe    8048a96 <__snprintf_chk@plt-0x70a>
ja     8048af9 <__snprintf_chk@plt-0x6a7>
jb     8048b08 <__snprintf_chk@plt-0x698>
add    %bl,0x5f(%edi)
gs
jb     8048b12 <__snprintf_chk@plt-0x68e>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6d656d00,0x6e(%edi),%ebp
jo     8048b14 <__snprintf_chk@plt-0x68c>
jo     8048b2c <__snprintf_chk@plt-0x674>
add    %bl,0x5f(%edi)
data16
jo     8048b2b <__snprintf_chk@plt-0x675>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048b29 <__snprintf_chk@plt-0x677>
outsl  %ds:(%esi),(%dx)
jne    8048b3c <__snprintf_chk@plt-0x664>
add    %ah,0x70(%esi)
jne    8048b41 <__snprintf_chk@plt-0x65f>
arpl   %ax,(%eax)
data16
jo     8048b47 <__snprintf_chk@plt-0x659>
je     8048b47 <__snprintf_chk@plt-0x659>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048b47 <__snprintf_chk@plt-0x659>
add    %ah,0x65(%edi)
je     8048b54 <__snprintf_chk@plt-0x64c>
outsb  %ds:(%esi),(%dx)
je     8048b4f <__snprintf_chk@plt-0x651>
outsb  %ds:(%esi),(%dx)
je     8048aed <__snprintf_chk@plt-0x6b3>
jae    8048b63 <__snprintf_chk@plt-0x63d>
jb     8048b65 <__snprintf_chk@plt-0x63b>
outsl  %ds:(%esi),(%dx)
jne    8048b60 <__snprintf_chk@plt-0x640>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsw  %fs:(%esi),(%dx)
jo     8048b66 <__snprintf_chk@plt-0x63a>
outsb  %ds:(%esi),(%dx)
imul   $0x6c5f6c6e,%fs:0x0(%edx),%esi
popa
outsb  %ds:(%esi),(%dx)
imul   $0x6168006f,0x66(%bp),%ebp
jae    8048b83 <__snprintf_chk@plt-0x61d>
outsb  %ds:(%esi),(%dx)
je     8048b88 <__snprintf_chk@plt-0x618>
jo     8048b8f <__snprintf_chk@plt-0x611>
add    %bl,0x5f(%edi)
js     8048b93 <__snprintf_chk@plt-0x60d>
je     8048b83 <__snprintf_chk@plt-0x61d>
je     8048b5a <__snprintf_chk@plt-0x646>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048b9d <__snprintf_chk@plt-0x603>
outsb  %ds:(%esi),(%dx)
jbe    8048b3b <__snprintf_chk@plt-0x665>
outsl  %ds:(%esi),(%dx)
jo     8048bb2 <__snprintf_chk@plt-0x5ee>
popa
jb     8048ba8 <__snprintf_chk@plt-0x5f8>
add    %dh,0x74(%ebx)
fs
gs
jb     8048bba <__snprintf_chk@plt-0x5e6>
add    %dh,0x63(%edi)
ja     8048bb6 <__snprintf_chk@plt-0x5ea>
fs
je     8048bb8 <__snprintf_chk@plt-0x5e8>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
pop    %edi
jae    8048bc9 <__snprintf_chk@plt-0x5d7>
jo     8048bcf <__snprintf_chk@plt-0x5d1>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x72,(%eax),%eax
gs
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x74656700,0x6b(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jo     8048be9 <__snprintf_chk@plt-0x5b7>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%bp,%di)
jb     8048bed <__snprintf_chk@plt-0x5b3>
arpl   %sp,0x73(%ecx)
arpl   %bp,%gs:0x70(%ebp)
add    %ah,0x65(%edi)
je     8048bee <__snprintf_chk@plt-0x5b2>
ja     8048bf1 <__snprintf_chk@plt-0x5af>
add    %dh,0x74(%ebx)
jb     8048bf5 <__snprintf_chk@plt-0x5ab>
push   $0x6e650072
fs
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
je     8048c01 <__snprintf_chk@plt-0x59f>
outsb  %ds:(%esi),(%dx)
je     8048b9f <__snprintf_chk@plt-0x601>
jo     8048c13 <__snprintf_chk@plt-0x58d>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048c06 <__snprintf_chk@plt-0x59a>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048c2b <__snprintf_chk@plt-0x575>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048c27 <__snprintf_chk@plt-0x579>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x63770034,%fs:0x36(%edx),%esi
63
jae    8048c46 <__snprintf_chk@plt-0x55a>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
bound  %esi,0x0(%ebx)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048c50 <__snprintf_chk@plt-0x550>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048c4a <__snprintf_chk@plt-0x556>
jb     8048c46 <__snprintf_chk@plt-0x55a>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
gs
jb     8048c60 <__snprintf_chk@plt-0x540>
js     8048bf0 <__snprintf_chk@plt-0x5b0>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048c5c <__snprintf_chk@plt-0x544>
add    %ah,0x6f(%esi)
jo     8048c61 <__snprintf_chk@plt-0x53f>
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
bound  %ebp,0x6e(%ecx)
fs
je     8048c6b <__snprintf_chk@plt-0x535>
js     8048c7c <__snprintf_chk@plt-0x524>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x65636361,0x0(%esi),%ebp
jae    8048c88 <__snprintf_chk@plt-0x518>
add    %ah,0x61(%esi)
arpl   %sp,0x65(%ebx)
jae    8048c90 <__snprintf_chk@plt-0x510>
popa
je     8048c20 <__snprintf_chk@plt-0x580>
jae    8048c96 <__snprintf_chk@plt-0x50a>
jb     8048c87 <__snprintf_chk@plt-0x519>
insl   (%dx),%es:(%edi)
jo     8048c27 <__snprintf_chk@plt-0x579>
pop    %edi
pop    %edi
jae    8048c9f <__snprintf_chk@plt-0x501>
jb     8048ca1 <__snprintf_chk@plt-0x4ff>
outsl  %ds:(%esi),(%dx)
jne    8048c9c <__snprintf_chk@plt-0x504>
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x616e7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
popa
jae    8048cb0 <__snprintf_chk@plt-0x4f0>
jb     8048cab <__snprintf_chk@plt-0x4f5>
outsb  %ds:(%esi),(%dx)
je     8048cab <__snprintf_chk@plt-0x4f5>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048cca <__snprintf_chk@plt-0x4d6>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %dh,%fs:0x6e(%ebx)
jo     8048cd8 <__snprintf_chk@plt-0x4c8>
imul   $0x72660066,0x74(%esi),%ebp
gs add %bl,%gs:0x5f(%edi)
jo     8048ce6 <__snprintf_chk@plt-0x4ba>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %al,%gs:0x4c(%edx)
dec    %ebx
dec    %ecx
inc    %esp
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edx)
dec    %ebx
dec    %ecx
inc    %esp
pop    %edi
xor    (%esi),%ch
xor    %esi,0x494c4700
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
cmp    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
aaa
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    $0x6000300,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%esi)
add    %al,(%ebx)
add    %al,(%edi)
add    %cl,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    $0x7000300,%eax
add    %al,(%ebx)
add    %al,(%esi)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
push   %es
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%ecx)
add    %al,(%ebx)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    $0x0,%al
add    (%eax),%eax
add    $0x3000300,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%edi)
add    %cl,(%edx)
add    %cl,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%ebx)
add    %cl,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%ebx)
add    %al,(%ebx)
add    %cl,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %eax,(%eax)
add    (%eax),%al
add    %eax,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
mov    $0x41,%bh
cmpsb  %es:(%edi),%ds:(%esi)
or     $0x60000,%eax
dec    %edi
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0xda641(%ebp)
add    %al,0x45a00
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %cl,(%eax)
add    %bl,0x10000001
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0xb0000,0xd(%ecx),%ebp
gs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
imul   $0xa0000,0xd(%ecx),%ebp
outsl  %ds:(%esi),(%dx)
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
imul   $0x90000,0xd(%ecx),%ebp
jns    8048e1a <__snprintf_chk@plt-0x386>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
pop    %ss
imul   $0x80000,0xd(%ecx),%ebp
addl   $0x0,(%eax,%eax,1)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x48d,0x70000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x40000,%eax
xchg   %eax,%edi
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x30000,0xd(%ecx),%ebp
mov    0x10000004,%eax
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edx)
add    %ch,0x4(%ebx)
add    %al,(%eax)
cld
das
add    $0x2c0608,%eax
add    %ah,%al
xor    0x5e0508,%eax
add    %ah,%ah
xor    0x5f0508,%eax
add    %al,(%eax)
xor    $0x5,%al
or     %al,0x20000062
xor    $0x5,%al
or     %al,0x2400005d
xor    $0x5,%al
.byte 0x8
.byte 0x5
arpl   %ax,(%eax)
or     $0x30,%al
add    $0x10708,%eax
add    %dl,(%eax)
xor    %al,0x20708
add    %dl,(%eax,%esi,1)
add    $0x30708,%eax
add    %bl,(%eax)
xor    %al,0x50708
add    %bl,(%eax,%esi,1)
add    $0x60708,%eax
add    %ah,(%eax)
xor    %al,0x70708
add    %ah,(%eax,%esi,1)
add    $0x80708,%eax
add    %ch,(%eax)
xor    %al,0x90708
add    %ch,(%eax,%esi,1)
add    $0xa0708,%eax
add    %dh,(%eax)
xor    %al,0xb0708
add    %dh,(%eax,%esi,1)
add    $0xc0708,%eax
add    %bh,(%eax)
xor    %al,0xd0708
add    %bh,(%eax,%esi,1)
add    $0xe0708,%eax
add    %al,0x30(%eax)
add    $0xf0708,%eax
add    %al,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x30(%eax)
add    $0x110708,%eax
add    %cl,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x30(%eax)
add    $0x130708,%eax
add    %dl,0x5(%eax,%esi,1)
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x30(%eax)
add    $0x150708,%eax
add    %bl,0x5(%eax,%esi,1)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
pusha
xor    %al,0x170708
add    %ah,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    %al,(%eax)
add    %ch,0x30(%eax)
add    $0x190708,%eax
add    %ch,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x30(%eax)
add    $0x1b0708,%eax
add    %dh,0x5(%eax,%esi,1)
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x30(%eax)
add    $0x1d0708,%eax
add    %bh,0x5(%eax,%esi,1)
or     %al,(%edi)
push   %ds
add    %al,(%eax)
xorb   $0x5,(%eax)
or     %al,(%edi)
pop    %ds
add    %al,(%eax)
test   %dh,(%eax)
add    $0x200708,%eax
add    %cl,0x7080530(%eax)
and    %eax,(%eax)
add    %cl,0x22070805(%eax,%esi,1)
add    %al,(%eax)
nop
xor    %al,0x230708
add    %dl,0x24070805(%eax,%esi,1)
add    %al,(%eax)
cwtl
xor    %al,0x250708
add    %bl,0x26070805(%eax,%esi,1)
add    %al,(%eax)
mov    0x7080530,%al
daa
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xor    %al,0x280708
add    %ch,0x7080530(%eax)
sub    %eax,(%eax)
add    %ch,0x2a070805(%eax,%esi,1)
add    %al,(%eax)
mov    $0x30,%al
add    $0x2b0708,%eax
add    %dh,0x2c070805(%eax,%esi,1)
add    %al,(%eax)
mov    $0x7080530,%eax
sub    $0x30bc0000,%eax
add    $0x2e0708,%eax
add    %al,%al
xor    %al,0x2f0708
add    %al,%ah
xor    %al,0x300708
add    %cl,%al
xor    %al,0x310708
add    %cl,%ah
xor    %al,0x320708
add    %dl,%al
xor    %al,0x330708
add    %dl,%ah
xor    %al,0x340708
add    %bl,%al
xor    %al,0x350708
add    %bl,%ah
xor    %al,0x360708
add    %ah,%al
xor    %al,0x370708
add    %ah,%ah
xor    %al,0x380708
add    %ch,%al
xor    %al,0x390708
add    %ch,%ah
xor    %al,0x3a0708
add    %dh,%al
xor    %al,0x3b0708
add    %dh,%ah
xor    %al,0x3c0708
add    %bh,%al
xor    %al,0x3d0708
add    %bh,%ah
xor    %al,0x3e0708
add    %al,(%eax)
xor    %eax,0x3f0708
add    %al,(%ecx,%esi,1)
add    $0x400708,%eax
add    %cl,(%eax)
xor    %eax,0x410708
add    %cl,(%ecx,%esi,1)
add    $0x420708,%eax
add    %dl,(%eax)
xor    %eax,0x430708
add    %dl,(%ecx,%esi,1)
add    $0x440708,%eax
add    %bl,(%eax)
xor    %eax,0x450708
add    %bl,(%ecx,%esi,1)
add    $0x460708,%eax
add    %ah,(%eax)
xor    %eax,0x470708
add    %ah,(%ecx,%esi,1)
add    $0x480708,%eax
add    %ch,(%eax)
xor    %eax,0x4a0708
add    %ch,(%ecx,%esi,1)
add    $0x4b0708,%eax
add    %dh,(%eax)
xor    %eax,0x4c0708
add    %dh,(%ecx,%esi,1)
add    $0x4d0708,%eax
add    %bh,(%eax)
xor    %eax,0x4e0708
add    %bh,(%ecx,%esi,1)
add    $0x500708,%eax
add    %al,0x31(%eax)
add    $0x510708,%eax
add    %al,0x5(%ecx,%esi,1)
or     %al,(%edi)
push   %edx
add    %al,(%eax)
dec    %eax
xor    %eax,0x530708
add    %cl,0x5(%ecx,%esi,1)
or     %al,(%edi)
push   %esp
add    %al,(%eax)
push   %eax
xor    %eax,0x550708
add    %dl,0x5(%ecx,%esi,1)
or     %al,(%edi)
push   %esi
add    %al,(%eax)
pop    %eax
xor    %eax,0x570708
add    %bl,0x5(%ecx,%esi,1)
or     %al,(%edi)
pop    %eax
add    %al,(%eax)
pusha
xor    %eax,0x590708
add    %ah,0x5(%ecx,%esi,1)
or     %al,(%edi)
pop    %edx
add    %al,(%eax)
push   $0x7080531
pop    %ebx
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xor    %eax,0x5c0708
push   %ebx
sub    $0x8,%esp
call   8049e50 <rewinddir@plt+0x730>
add    $0x9e93,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8049182 <__snprintf_chk@plt-0x1e>
call   8049440 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8053004
jmp    *0x8053008
add    %al,(%eax)
jmp    *0x805300c
push   $0x0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053010
push   $0x8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053014
push   $0x10
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053018
push   $0x18
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805301c
push   $0x20
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053020
push   $0x28
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053024
push   $0x30
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053028
push   $0x38
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805302c
push   $0x40
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053030
push   $0x48
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053034
push   $0x50
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053038
push   $0x58
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805303c
push   $0x60
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053040
push   $0x68
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053044
push   $0x70
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053048
push   $0x78
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805304c
push   $0x80
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053050
push   $0x88
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053054
push   $0x90
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053058
push   $0x98
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805305c
push   $0xa0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053060
push   $0xa8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053064
push   $0xb0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053068
push   $0xb8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805306c
push   $0xc0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053070
push   $0xc8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053074
push   $0xd0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053078
push   $0xd8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805307c
push   $0xe0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053080
push   $0xe8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053084
push   $0xf0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053088
push   $0xf8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805308c
push   $0x100
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053090
push   $0x108
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053094
push   $0x110
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053098
push   $0x118
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805309c
push   $0x120
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530a0
push   $0x128
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530a4
push   $0x130
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530a8
push   $0x138
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530ac
push   $0x140
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530b0
push   $0x148
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530b4
push   $0x150
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530b8
push   $0x158
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530bc
push   $0x160
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530c0
push   $0x168
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530c4
push   $0x170
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530c8
push   $0x178
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530cc
push   $0x180
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530d0
push   $0x188
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530d4
push   $0x190
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530d8
push   $0x198
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530dc
push   $0x1a0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530e0
push   $0x1a8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530e4
push   $0x1b0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530e8
push   $0x1b8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530ec
push   $0x1c0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530f0
push   $0x1c8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530f4
push   $0x1d0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530f8
push   $0x1d8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x80530fc
push   $0x1e0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053100
push   $0x1e8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053104
push   $0x1f0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053108
push   $0x1f8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805310c
push   $0x200
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053110
push   $0x208
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053114
push   $0x210
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053118
push   $0x218
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805311c
push   $0x220
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053120
push   $0x228
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053124
push   $0x230
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053128
push   $0x238
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805312c
push   $0x240
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053130
push   $0x248
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053134
push   $0x250
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053138
push   $0x258
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805313c
push   $0x260
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053140
push   $0x268
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053144
push   $0x270
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053148
push   $0x278
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805314c
push   $0x280
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053150
push   $0x288
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053154
push   $0x290
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053158
push   $0x298
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805315c
push   $0x2a0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053160
push   $0x2a8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053164
push   $0x2b0
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x8053168
push   $0x2b8
jmp    8049190 <__snprintf_chk@plt-0x10>
jmp    *0x805316c
push   $0x2c0
jmp    8049190 <__snprintf_chk@plt-0x10>
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x804f2e8,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %ebx,0x8(%esp)
movl   $0x804f834,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
call   80495b0 <errx@plt>
sub    $0x1c,%esp
movl   $0x804f89e,0x4(%esp)
movl   $0x1,(%esp)
call   8049320 <err@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xe0,%esp
movl   $0x805019f,0x4(%esp)
lea    0x28(%esp),%ebx
movl   $0x6,(%esp)
call   80495d0 <setlocale@plt>
movl   $0x804fb09,0x4(%esp)
movl   $0x804fb1b,(%esp)
call   8049650 <bindtextdomain@plt>
movl   $0x804fb1b,(%esp)
call   8049310 <textdomain@plt>
lea    0x20(%esp),%eax
mov    %eax,0x8053444
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
movl   $0x40,0x1c(%esp)
mov    0xc(%ebp),%eax
movl   $0x0,0x10(%esp)
movl   $0x8050060,0xc(%esp)
movl   $0x804fb54,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   8049470 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8049b25 <rewinddir@plt+0x405>
sub    $0x44,%eax
cmp    $0x30,%eax
ja     8049b1b <rewinddir@plt+0x3fb>
jmp    *0x804ff2c(,%eax,4)
mov    0x8053860,%eax
lea    0x9(%eax),%edx
movl   $0x0,0x8053880(,%eax,4)
00
movl   $0xf,0x8053884(,%eax,4)
00
movl   $0x10,0x8053888(,%eax,4)
00
movl   $0x11,0x805388c(,%eax,4)
00
movl   $0x12,0x8053890(,%eax,4)
00
movl   $0x13,0x8053894(,%eax,4)
00
movl   $0x14,0x8053898(,%eax,4)
00
movl   $0x15,0x805389c(,%eax,4)
00
mov    %edx,0x8053860
movl   $0x16,0x80538a0(,%eax,4)
00
jmp    80497f8 <rewinddir@plt+0xd8>
andl   $0xffffffbf,0x1c(%esp)
orl    $0x2,0x1c(%esp)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053424,%eax
movl   $0x804a130,0xc(%esp)
movl   $0x1c,0x8(%esp)
movl   $0x8053880,0x4(%esp)
mov    %eax,(%esp)
call   804e190 <rewinddir@plt+0x4a70>
test   %eax,%eax
mov    %eax,0x8053860
jns    80497f8 <rewinddir@plt+0xd8>
mov    $0x1,%eax
jmp    8049c68 <rewinddir@plt+0x548>
orl    $0x8,0x1c(%esp)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053860,%eax
lea    0x5(%eax),%edx
movl   $0x0,0x8053880(,%eax,4)
00
movl   $0xa,0x8053884(,%eax,4)
00
movl   $0xc,0x8053888(,%eax,4)
00
movl   $0xd,0x805388c(,%eax,4)
00
mov    %edx,0x8053860
movl   $0xe,0x8053890(,%eax,4)
00
jmp    80497f8 <rewinddir@plt+0xd8>
testb  $0x12,0x1c(%esp)
jne    8049e14 <rewinddir@plt+0x6f4>
andl   $0xffffffbf,0x1c(%esp)
jmp    80497f8 <rewinddir@plt+0xd8>
orl    $0x4,0x1c(%esp)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053420,%eax
call   8049f20 <rewinddir@plt+0x800>
mov    0x8053860,%eax
lea    0x4(%eax),%edx
movl   $0x0,0x8053880(,%eax,4)
00
movl   $0x3,0x8053884(,%eax,4)
00
movl   $0x5,0x8053888(,%eax,4)
00
mov    %edx,0x8053860
movl   $0x4,0x805388c(,%eax,4)
00
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053424,%esi
movl   $0x0,0x8053440
00
test   %esi,%esi
je     80497f8 <rewinddir@plt+0xd8>
cmpb   $0x0,(%esi)
je     80497f8 <rewinddir@plt+0xd8>
call   8049520 <__errno_location@plt>
mov    %eax,%edi
jmp    8049a3e <rewinddir@plt+0x31e>
lea    0x0(%esi),%esi
mov    (%edi),%ecx
test   %ecx,%ecx
je     80499f6 <rewinddir@plt+0x2d6>
lea    -0x1(%eax),%ecx
cmp    $0xfffffffd,%ecx
ja     8049a68 <rewinddir@plt+0x348>
mov    0x8053440,%esi
lea    0x1(%esi),%ecx
cmp    $0x100,%ecx
mov    %ecx,0x8053440
mov    %eax,0x8053460(,%esi,4)
je     8049d90 <rewinddir@plt+0x670>
test   %edx,%edx
je     80497f8 <rewinddir@plt+0xd8>
cmpb   $0x0,(%edx)
je     80497f8 <rewinddir@plt+0xd8>
mov    %edx,%esi
add    $0x1,%esi
je     80497f8 <rewinddir@plt+0xd8>
cmpb   $0x0,0x1(%edx)
je     80497f8 <rewinddir@plt+0xd8>
movl   $0x0,(%edi)
movl   $0xa,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
movl   $0x0,0x28(%esp)
call   8049480 <strtoul@plt>
mov    0x28(%esp),%edx
cmp    %edx,%esi
jne    80499e8 <rewinddir@plt+0x2c8>
movl   $0x5,0x8(%esp)
movl   $0x804fb26,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049320 <err@plt>
mov    0x8053444,%eax
orb    $0x4,0x4(%eax)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053444,%eax
orb    $0x2,0x4(%eax)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053444,%eax
orb    $0x1,0x4(%eax)
jmp    80497f8 <rewinddir@plt+0xd8>
andl   $0xffffffbf,0x1c(%esp)
orl    $0x10,0x1c(%esp)
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x8053860,%eax
lea    0x5(%eax),%edx
movl   $0x0,0x8053880(,%eax,4)
00
movl   $0x18,0x8053884(,%eax,4)
00
movl   $0x19,0x8053888(,%eax,4)
00
movl   $0x1a,0x805388c(,%eax,4)
00
mov    %edx,0x8053860
movl   $0x1b,0x8053890(,%eax,4)
00
jmp    80497f8 <rewinddir@plt+0xd8>
mov    0x80533e4,%eax
call   8049f20 <rewinddir@plt+0x800>
cmpl   $0x0,0x8053860
jne    8049b7e <rewinddir@plt+0x45e>
movl   $0x0,0x8053880
00
movl   $0x2,0x8053884
00
movl   $0x8,0x8053888
00
movl   $0xa,0x805388c
00
movl   $0x7,0x8053890
00
movl   $0x17,0x8053894
00
movl   $0x7,0x8053860
00
movl   $0x4,0x8053898
00
cmpl   $0x0,0x8053440
je     8049cb7 <rewinddir@plt+0x597>
mov    0x8053444,%ebx
testb  $0x1,0x4(%ebx)
jne    8049e1e <rewinddir@plt+0x6fe>
mov    0x1c(%esp),%edi
mov    %edi,(%esp)
call   804c730 <rewinddir@plt+0x3010>
test   %eax,%eax
mov    %eax,(%ebx)
je     8049de8 <rewinddir@plt+0x6c8>
and    $0x40,%edi
xor    %ebx,%ebx
cmpl   $0x0,0x8053860
jle    8049c70 <rewinddir@plt+0x550>
mov    %edi,0x1c(%esp)
jmp    8049bdf <rewinddir@plt+0x4bf>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
cmp    %ebx,0x8053860
jle    8049c70 <rewinddir@plt+0x550>
mov    %ebx,%eax
call   804a1c0 <rewinddir@plt+0xaa0>
mov    0x1c(%esp),%edi
test   %edi,%edi
lea    (%eax,%eax,4),%ecx
lea    0x80531a0(,%ecx,4),%esi
mov    0xc(%esi),%edx
jne    8049c05 <rewinddir@plt+0x4e5>
mov    %edx,%edi
and    $0xffffffbf,%edi
test   %eax,%eax
cmove  %edi,%edx
mov    0x80531a0(,%ecx,4),%eax
mov    %edx,0x10(%esp)
fldl   0x4(%esi)
fstpl  0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x8053444,%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804c870 <rewinddir@plt+0x3150>
test   %eax,%eax
jne    8049bd0 <rewinddir@plt+0x4b0>
movl   $0x5,0x8(%esp)
mov    $0x1,%ebx
movl   $0x804f768,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %eax,(%esp)
call   80495a0 <warn@plt>
mov    0x8053444,%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804c810 <rewinddir@plt+0x30f0>
mov    %ebx,%eax
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8053400,%edx
cmp    0x8(%ebp),%edx
je     8049cd6 <rewinddir@plt+0x5b6>
cmp    %edx,0x8(%ebp)
jle    8049d86 <rewinddir@plt+0x666>
mov    0x8(%ebp),%esi
mov    0xc(%ebp),%edi
lea    0x1(%edx),%eax
mov    %eax,0x8053400
mov    (%edi,%edx,4),%eax
call   804b300 <rewinddir@plt+0x1be0>
mov    0x8053400,%edx
cmp    %edx,%esi
jg     8049c8a <rewinddir@plt+0x56a>
mov    %eax,%ebx
mov    0x8053444,%eax
mov    (%eax),%eax
mov    %eax,(%esp)
call   804cab0 <rewinddir@plt+0x3390>
jmp    8049c57 <rewinddir@plt+0x537>
movl   $0x1,0x8053440
00
mov    0x8053444,%ebx
movl   $0x1,0x8053460
00
jmp    8049b9b <rewinddir@plt+0x47b>
lea    0x28(%esp),%ebx
xor    %eax,%eax
mov    $0x2e,%ecx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
movl   $0x804fb76,(%esp)
call   80496c0 <opendir@plt>
test   %eax,%eax
mov    %eax,%esi
jne    8049d05 <rewinddir@plt+0x5e5>
jmp    8049d86 <rewinddir@plt+0x666>
mov    %ebx,%eax
xchg   %ax,%ax
call   804a060 <rewinddir@plt+0x940>
mov    %esi,%eax
call   804a230 <rewinddir@plt+0xb10>
test   %eax,%eax
je     8049d77 <rewinddir@plt+0x657>
lea    0x13(%eax),%ecx
xor    %edx,%edx
movl   $0x0,(%esp)
mov    %ebx,%eax
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
jne    8049cfc <rewinddir@plt+0x5dc>
cmpl   $0x0,0xc8(%esp)
jg     8049cfc <rewinddir@plt+0x5dc>
mov    0x8053444,%eax
testb  $0x1,0x4(%eax)
jne    8049d65 <rewinddir@plt+0x645>
mov    0x8053440,%edx
mov    0xcc(%esp),%ecx
cmp    $0xff,%edx
ja     8049dc4 <rewinddir@plt+0x6a4>
xor    %eax,%eax
jmp    8049d61 <rewinddir@plt+0x641>
cmp    0x8053460(,%eax,4),%ecx
je     8049cfc <rewinddir@plt+0x5dc>
add    $0x1,%eax
cmp    %edx,%eax
jne    8049d55 <rewinddir@plt+0x635>
mov    %ebx,%eax
xor    %edx,%edx
call   804b100 <rewinddir@plt+0x19e0>
mov    %ebx,%eax
call   804b160 <rewinddir@plt+0x1a40>
jmp    8049cfc <rewinddir@plt+0x5dc>
mov    %esi,(%esp)
xor    %ebx,%ebx
call   80496b0 <closedir@plt>
jmp    8049ca6 <rewinddir@plt+0x586>
mov    $0x1,%ebx
jmp    8049ca6 <rewinddir@plt+0x586>
movl   $0x5,0x8(%esp)
movl   $0x804f704,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x100,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80495b0 <errx@plt>
movl   $0x805001c,0xc(%esp)
movl   $0xb2,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f78c,(%esp)
call   80496f0 <__assert_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f744,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80495b0 <errx@plt>
mov    $0x804fb40,%eax
call   8049730 <rewinddir@plt+0x10>
mov    $0x804fb66,%eax
call   8049730 <rewinddir@plt+0x10>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804f2c0
push   $0x804f250
push   %ecx
push   %esi
push   $0x8049790
call   80494d0 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80533d3,%eax
sub    $0x80533d0,%eax
cmp    $0x6,%eax
ja     8049e70 <rewinddir@plt+0x750>
ret
mov    $0x0,%eax
test   %eax,%eax
je     8049e6f <rewinddir@plt+0x74f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80533d0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80533d0,%eax
sub    $0x80533d0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049ea9 <rewinddir@plt+0x789>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049ea8 <rewinddir@plt+0x788>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80533d0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8053428
jne    8049eec <rewinddir@plt+0x7cc>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049e60 <rewinddir@plt+0x740>
movb   $0x1,0x8053428
leave
repz ret
xchg   %ax,%ax
mov    0x8052f08,%eax
test   %eax,%eax
je     8049f18 <rewinddir@plt+0x7f8>
mov    $0x0,%eax
test   %eax,%eax
je     8049f18 <rewinddir@plt+0x7f8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8052f08,(%esp)
call   *%eax
leave
jmp    8049e90 <rewinddir@plt+0x770>
nop
jmp    8049e90 <rewinddir@plt+0x770>
xchg   %ax,%ax
nop
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x24,%esp
mov    0x80533e0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x804f308,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    $0x80531b0,%ebx
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049640 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f330,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049640 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f83a,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049640 <__fprintf_chk@plt>
xchg   %ax,%ax
movl   $0x5,0x8(%esp)
mov    (%ebx),%eax
add    $0x14,%ebx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80492d0 <dcgettext@plt>
mov    %eax,0x10(%esp)
mov    -0x24(%ebx),%edx
movl   $0x804f84f,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %edx,0xc(%esp)
call   8049640 <__fprintf_chk@plt>
cmp    $0x80533e0,%ebx
jne    8049fc8 <rewinddir@plt+0x8a8>
movl   $0x5,0x8(%esp)
movl   $0x804f638,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049640 <__fprintf_chk@plt>
xor    %eax,%eax
cmp    0x80533e4,%esi
sete   %al
mov    %eax,(%esp)
call   8049450 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %eax,%edi
sub    $0x18,%esp
test   %eax,%eax
je     804a0e8 <rewinddir@plt+0x9c8>
mov    0x68(%eax),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x6c(%edi),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x70(%edi),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x90(%edi),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x94(%edi),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x98(%edi),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
lea    0x74(%edi),%eax
mov    %eax,(%esp)
call   804e7b0 <rewinddir@plt+0x5090>
test   $0x1,%edi
mov    $0xb8,%edx
jne    804a118 <rewinddir@plt+0x9f8>
test   $0x2,%edi
jne    804a108 <rewinddir@plt+0x9e8>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
jne    804a0f8 <rewinddir@plt+0x9d8>
and    $0x1,%edx
jne    804a0f0 <rewinddir@plt+0x9d0>
add    $0x18,%esp
pop    %edi
ret
lea    0x0(%esi),%esi
movb   $0x0,(%edi)
add    $0x18,%esp
pop    %edi
ret
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804a0e8 <rewinddir@plt+0x9c8>
jmp    804a0f0 <rewinddir@plt+0x9d0>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804a0d5 <rewinddir@plt+0x9b5>
xchg   %ax,%ax
movb   $0x0,(%edi)
mov    $0xb7,%dl
add    $0x1,%edi
jmp    804a0cd <rewinddir@plt+0x9ad>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
mov    $0x80531a0,%ebx
sub    $0x1c,%esp
mov    0x34(%esp),%edi
lea    0x0(%esi),%esi
mov    0x30(%esp),%eax
mov    (%ebx),%ebp
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
mov    %ebp,0x4(%esp)
call   8049540 <strncasecmp@plt>
test   %eax,%eax
jne    804a169 <rewinddir@plt+0xa49>
cmpb   $0x0,0x0(%ebp,%edi,1)
je     804a1b0 <rewinddir@plt+0xa90>
add    $0x1,%esi
add    $0x14,%ebx
cmp    $0x1c,%esi
jne    804a148 <rewinddir@plt+0xa28>
movl   $0x5,0x8(%esp)
movl   $0x804f85a,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    0x30(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80494e0 <warnx@plt>
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
cmp    %eax,0x8053860
jle    804a1db <rewinddir@plt+0xabb>
mov    0x8053880(,%eax,4),%eax
cmp    $0x1b,%eax
jg     804a1ff <rewinddir@plt+0xadf>
add    $0x1c,%esp
ret
movl   $0x805003c,0xc(%esp)
movl   $0xbe,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f875,(%esp)
call   80496f0 <__assert_fail@plt>
movl   $0x805003c,0xc(%esp)
movl   $0xbf,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f884,(%esp)
call   80496f0 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
test   %eax,%eax
je     804a26c <rewinddir@plt+0xb4c>
mov    %ebx,(%esp)
call   8049630 <readdir64@plt>
test   %eax,%eax
mov    %eax,%edx
je     804a24e <rewinddir@plt+0xb2e>
cmpb   $0x2e,0x13(%edx)
je     804a258 <rewinddir@plt+0xb38>
add    $0x18,%esp
mov    %edx,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
movzbl 0x14(%edx),%eax
test   %al,%al
je     804a23a <rewinddir@plt+0xb1a>
cmp    $0x2e,%al
jne    804a24e <rewinddir@plt+0xb2e>
cmpb   $0x0,0x15(%edx)
je     804a23a <rewinddir@plt+0xb1a>
jmp    804a24e <rewinddir@plt+0xb2e>
movl   $0x804fff0,0xc(%esp)
movl   $0xef,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f8b6,(%esp)
call   80496f0 <__assert_fail@plt>
push   %edi
push   %esi
sub    $0x1034,%esp
mov    %gs:0x14,%edx
mov    %edx,0x102c(%esp)
xor    %edx,%edx
test   %eax,%eax
je     804a353 <rewinddir@plt+0xc33>
mov    0x68(%eax),%eax
test   %eax,%eax
je     804a32f <rewinddir@plt+0xc0f>
mov    $0x8050186,%edi
mov    $0x3,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804a320 <rewinddir@plt+0xc00>
lea    0x2c(%esp),%edi
mov    %eax,0x14(%esp)
movl   $0x804f8c7,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %edi,(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %edi,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a377 <rewinddir@plt+0xc57>
mov    0x102c(%esp),%esi
xor    %gs:0x14,%esi
jne    804a32a <rewinddir@plt+0xc0a>
add    $0x1034,%esp
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   804b5f0 <rewinddir@plt+0x1ed0>
jmp    804a303 <rewinddir@plt+0xbe3>
call   80492e0 <__stack_chk_fail@plt>
movl   $0x805002c,0xc(%esp)
movl   $0x101,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f8bd,(%esp)
call   80496f0 <__assert_fail@plt>
movl   $0x805002c,0xc(%esp)
movl   $0x100,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f8b9,(%esp)
call   80496f0 <__assert_fail@plt>
call   804976e <rewinddir@plt+0x4e>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c,%esp
test   %ecx,%ecx
mov    %ecx,0x10(%esp)
mov    0x40(%esp),%edi
mov    %edx,(%ebx)
je     804a568 <rewinddir@plt+0xe48>
mov    %ecx,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a5ee <rewinddir@plt+0xece>
mov    %eax,0x68(%ebx)
mov    %ebx,%eax
mov    %edi,0x88(%ebx)
call   804a290 <rewinddir@plt+0xb70>
test   %eax,%eax
mov    %eax,0x70(%ebx)
je     804a5ca <rewinddir@plt+0xeaa>
test   %ebp,%ebp
setne  %al
mov    %eax,%esi
je     804a560 <rewinddir@plt+0xe40>
test   %edi,%edi
je     804a560 <rewinddir@plt+0xe40>
mov    0x68(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0x10(%esp),%eax
mov    %eax,(%esp)
call   804e5a0 <rewinddir@plt+0x4e80>
mov    %edx,%ecx
mov    %eax,%edx
mov    %ecx,%eax
or     %edx,%eax
je     804a5b8 <rewinddir@plt+0xe98>
mov    %esi,%eax
add    $0x74,%ebp
xor    %edi,%edi
test   %al,%al
cmovne %ebp,%edi
lea    0x74(%ebx),%ebp
mov    %edx,0x4(%esp)
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %ebp,(%esp)
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
call   804e800 <rewinddir@plt+0x50e0>
mov    0x18(%esp),%edx
mov    0x1c(%esp),%ecx
test   %eax,%eax
mov    %eax,0x14(%esp)
jne    804a570 <rewinddir@plt+0xe50>
mov    %ecx,%edi
mov    %edx,%esi
mov    %ecx,%eax
shrd   $0x8,%edi,%esi
and    $0xfffff000,%eax
and    $0xfff,%esi
or     %esi,%eax
mov    %edx,%esi
shrd   $0xc,%ecx,%esi
movzbl %dl,%edx
and    $0xffffff00,%esi
or     %edx,%esi
mov    %eax,0xa4(%ebx)
lea    0xb0(%ebx),%eax
mov    %esi,0xa8(%ebx)
mov    %eax,0x8(%esp)
movl   $0x804fd5a,0x4(%esp)
mov    %ebp,(%esp)
call   804ec70 <rewinddir@plt+0x5550>
mov    0xb0(%ebx),%eax
mov    0xb4(%ebx),%edx
movl   $0x804f905,0x4(%esp)
mov    %ebp,(%esp)
shld   $0x9,%eax,%edx
shl    $0x9,%eax
mov    %eax,0xb0(%ebx)
lea    0xac(%ebx),%eax
mov    %edx,0xb4(%ebx)
mov    %eax,0x8(%esp)
call   804ece0 <rewinddir@plt+0x55c0>
mov    0x8053444,%eax
testb  $0x1,0x4(%eax)
jne    804a4e1 <rewinddir@plt+0xdc1>
mov    0xb4(%ebx),%eax
or     0xb0(%ebx),%eax
je     804a5a8 <rewinddir@plt+0xe88>
mov    0x10(%esp),%esi
mov    $0x8050186,%edi
mov    $0x3,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804a50e <rewinddir@plt+0xdee>
movl   $0x805016e,0x4(%esp)
mov    %ebp,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,0x6c(%ebx)
je     804a5dc <rewinddir@plt+0xebc>
movl   $0x804f939,0x4(%esp)
mov    %ebp,(%esp)
call   804edb0 <rewinddir@plt+0x5690>
mov    %ebp,(%esp)
mov    %eax,%esi
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   804ee00 <rewinddir@plt+0x56e0>
movl   $0x804f941,0x4(%esp)
mov    %ebp,(%esp)
add    %eax,%esi
mov    %esi,0x9c(%ebx)
call   804edb0 <rewinddir@plt+0x5690>
mov    %eax,0xa0(%ebx)
mov    0x14(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804a3e0 <rewinddir@plt+0xcc0>
nop
xor    %eax,%eax
jmp    804a3ad <rewinddir@plt+0xc8d>
nop
movl   $0x5,0x8(%esp)
movl   $0x804f660,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    0x10(%esp),%ecx
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   80494e0 <warnx@plt>
movl   $0xffffffff,0x14(%esp)
jmp    804a54e <rewinddir@plt+0xe2e>
xchg   %ax,%ax
movl   $0xffffffff,0x14(%esp)
jmp    804a54e <rewinddir@plt+0xe2e>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x804f8ed,0x4(%esp)
jmp    804a580 <rewinddir@plt+0xe60>
movl   $0x5,0x8(%esp)
movl   $0x804f8cf,0x4(%esp)
jmp    804a580 <rewinddir@plt+0xe60>
movl   $0x5,0x8(%esp)
movl   $0x804f91f,0x4(%esp)
jmp    804a580 <rewinddir@plt+0xe60>
call   804976e <rewinddir@plt+0x4e>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x20,%esp
mov    0x8c(%eax),%eax
test   %eax,%eax
jne    804a62a <rewinddir@plt+0xf0a>
mov    0xb4(%ebx),%eax
or     0xb0(%ebx),%eax
movl   $0x1,0x8c(%ebx)
00
jne    804a638 <rewinddir@plt+0xf18>
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x70(%ebx),%eax
mov    %eax,(%esp)
call   8049200 <blkid_new_probe_from_filename@plt>
test   %eax,%eax
mov    %eax,%esi
je     804a62a <rewinddir@plt+0xf0a>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049250 <blkid_probe_enable_superblocks@plt>
movl   $0x2a,0x4(%esp)
mov    %esi,(%esp)
call   80493c0 <blkid_probe_set_superblocks_flags@plt>
mov    %esi,(%esp)
call   80492c0 <blkid_do_safeprobe@plt>
test   %eax,%eax
je     804a688 <rewinddir@plt+0xf68>
mov    %esi,(%esp)
call   8049590 <blkid_free_probe@plt>
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x1c(%esp),%edi
movl   $0x0,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x804fc20,0x4(%esp)
mov    %esi,(%esp)
movl   $0x0,0x1c(%esp)
call   80491e0 <blkid_probe_lookup_value@plt>
test   %eax,%eax
je     804a740 <rewinddir@plt+0x1020>
movl   $0x0,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x804fc78,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <blkid_probe_lookup_value@plt>
test   %eax,%eax
je     804a720 <rewinddir@plt+0x1000>
movl   $0x0,0xc(%esp)
mov    %edi,0x8(%esp)
movl   $0x804fc67,0x4(%esp)
mov    %esi,(%esp)
call   80491e0 <blkid_probe_lookup_value@plt>
test   %eax,%eax
jne    804a675 <rewinddir@plt+0xf55>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804a767 <rewinddir@plt+0x1047>
mov    %eax,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a76b <rewinddir@plt+0x104b>
mov    %eax,0x98(%ebx)
jmp    804a675 <rewinddir@plt+0xf55>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804a75f <rewinddir@plt+0x103f>
mov    %eax,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a76b <rewinddir@plt+0x104b>
mov    %eax,0x94(%ebx)
jmp    804a6d8 <rewinddir@plt+0xfb8>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
test   %eax,%eax
je     804a763 <rewinddir@plt+0x1043>
mov    %eax,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a76b <rewinddir@plt+0x104b>
mov    %eax,0x90(%ebx)
jmp    804a6b8 <rewinddir@plt+0xf98>
xor    %eax,%eax
jmp    804a734 <rewinddir@plt+0x1014>
xor    %eax,%eax
jmp    804a754 <rewinddir@plt+0x1034>
xor    %eax,%eax
jmp    804a710 <rewinddir@plt+0xff0>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804976e <rewinddir@plt+0x4e>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %edx,%ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x146c,%esp
mov    0x1480(%esp),%eax
movl   $0x0,0x3c(%esp)
mov    %eax,0x28(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x145c(%esp)
xor    %eax,%eax
mov    0x2c(%ebx),%eax
or     0x28(%ebx),%eax
jne    804a7c4 <rewinddir@plt+0x10a4>
lea    -0xc(%ecx),%eax
cmp    $0x2,%eax
jbe    804a888 <rewinddir@plt+0x1168>
cmp    $0x1b,%ecx
ja     804a868 <rewinddir@plt+0x1148>
jmp    *0x804fe80(,%ecx,4)
lea    0x0(%esi,%eiz,1),%esi
add    $0x74,%ebx
mov    %ebx,(%esp)
movl   $0x804fa4c,0x4(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,%ebx
je     804a868 <rewinddir@plt+0x1148>
movl   $0x5b,0x4(%esp)
mov    %eax,(%esp)
call   8049490 <strchr@plt>
test   %eax,%eax
je     804af28 <rewinddir@plt+0x1808>
lea    0x1(%eax),%esi
movl   $0x5d,0x4(%esp)
mov    %esi,(%esp)
call   8049490 <strchr@plt>
test   %eax,%eax
je     804af28 <rewinddir@plt+0x1808>
test   %esi,%esi
movb   $0x0,(%eax)
je     804af28 <rewinddir@plt+0x1808>
mov    %esi,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     804a9a1 <rewinddir@plt+0x1281>
mov    %ebx,(%esp)
call   8049240 <free@plt>
mov    0x28(%esp),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %esi,0x3c(%esp)
mov    %eax,(%esp)
call   804c9f0 <rewinddir@plt+0x32d0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x145c(%esp),%eax
xor    %gs:0x14,%eax
jne    804b0d4 <rewinddir@plt+0x19b4>
add    $0x146c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x8(%ebx),%eax
mov    %eax,0x8(%esp)
mov    0x70(%ebx),%eax
movl   $0x3,(%esp)
mov    %ecx,0x2c(%esp)
mov    %eax,0x4(%esp)
call   8049670 <__xstat64@plt>
mov    0x2c(%esp),%ecx
jmp    804a7c4 <rewinddir@plt+0x10a4>
nop
mov    0x68(%ebx),%eax
test   %eax,%eax
je     804a8c7 <rewinddir@plt+0x11a7>
mov    %eax,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a9a1 <rewinddir@plt+0x1281>
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804c9f0 <rewinddir@plt+0x32d0>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
movl   $0x804fa33,0x4(%esp)
add    $0x74,%ebx
mov    %ebx,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,0x3c(%esp)
jne    804a8c7 <rewinddir@plt+0x11a7>
jmp    804a868 <rewinddir@plt+0x1148>
movl   $0x804fa19,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
movl   $0x804fa03,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
movl   $0x804f9ed,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
movl   $0x804f9dc,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
mov    0x8053444,%eax
mov    (%eax),%eax
testb  $0x12,0x8(%eax)
mov    0xa8(%ebx),%eax
mov    %eax,0x18(%esp)
mov    0xa4(%ebx),%eax
mov    %eax,0x14(%esp)
je     804aeb8 <rewinddir@plt+0x1798>
movl   $0x804f96a,0x10(%esp)
lea    0x5c(%esp),%ebx
movl   $0x400,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebx,(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
call   804976e <rewinddir@plt+0x4e>
xchg   %ax,%ax
mov    0x6c(%ebx),%eax
test   %eax,%eax
je     804a8b0 <rewinddir@plt+0x1190>
mov    0x68(%ebx),%edx
mov    %eax,0x14(%esp)
movl   $0x804f962,0x10(%esp)
mov    %edx,0x18(%esp)
jmp    804a96d <rewinddir@plt+0x124d>
movl   $0x804fabd,0x4(%esp)
lea    0x74(%ebx),%eax
mov    %eax,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
mov    0xac(%ebx),%edx
test   %edx,%edx
mov    %eax,0x3c(%esp)
je     804a9f1 <rewinddir@plt+0x12d1>
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
mov    0x28(%esp),%eax
movl   $0x804f98c,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804c9f0 <rewinddir@plt+0x32d0>
jmp    804a868 <rewinddir@plt+0x1148>
xchg   %ax,%ax
mov    0x68(%ebx),%eax
mov    $0x8050186,%edi
mov    $0x3,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804af95 <rewinddir@plt+0x1875>
mov    $0x804fa76,%edi
mov    $0x4,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804b008 <rewinddir@plt+0x18e8>
mov    $0x804fa7b,%edi
mov    $0x2,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804b048 <rewinddir@plt+0x1928>
mov    0x88(%ebx),%ecx
mov    $0x804f95d,%eax
mov    $0x804f948,%esi
movl   $0x804fa87,0x4(%esp)
movl   $0x0,0x48(%esp)
test   %ecx,%ecx
cmove  %eax,%esi
add    $0x74,%ebx
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
call   804ece0 <rewinddir@plt+0x55c0>
cmpl   $0xe,0x48(%esp)
ja     804ae30 <rewinddir@plt+0x1710>
mov    0x48(%esp),%eax
jmp    *0x804fef0(,%eax,4)
lea    0x0(%esi),%esi
movl   $0x804fa5c,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
movl   $0x804f998,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi),%esi
lea    0x51(%esp),%esi
mov    %esi,0x4(%esp)
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   804dd90 <rewinddir@plt+0x4670>
mov    %esi,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
jmp    804a9a1 <rewinddir@plt+0x1281>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   80496d0 <getgrgid@plt>
test   %eax,%eax
je     804a868 <rewinddir@plt+0x1148>
mov    (%eax),%eax
test   %eax,%eax
jne    804a8b7 <rewinddir@plt+0x1197>
jmp    804a8c7 <rewinddir@plt+0x11a7>
lea    0x0(%esi),%esi
mov    0x20(%ebx),%eax
mov    %eax,(%esp)
call   80491d0 <getpwuid@plt>
test   %eax,%eax
jne    804aafb <rewinddir@plt+0x13db>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi,%eiz,1),%esi
mov    0x88(%ebx),%eax
test   %eax,%eax
jne    804ae88 <rewinddir@plt+0x1768>
mov    0x6c(%ebx),%edi
test   %edi,%edi
je     804b0a0 <rewinddir@plt+0x1980>
lea    0x40(%esp),%eax
add    $0x74,%ebx
mov    %eax,0x8(%esp)
movl   $0x804f9c7,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x40(%esp)
call   804ece0 <rewinddir@plt+0x55c0>
test   %eax,%eax
jne    804abf8 <rewinddir@plt+0x14d8>
mov    0x40(%esp),%ebx
test   %ebx,%ebx
je     804b028 <rewinddir@plt+0x1908>
movl   $0x804f9ca,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a9a1 <rewinddir@plt+0x1281>
mov    %eax,0x3c(%esp)
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
mov    0xb4(%ebx),%eax
mov    0xb0(%ebx),%edx
mov    %eax,%esi
or     %edx,%esi
je     804a868 <rewinddir@plt+0x1148>
mov    0x8053444,%ecx
testb  $0x2,0x4(%ecx)
je     804af78 <rewinddir@plt+0x1858>
mov    %eax,0x10(%esp)
lea    0x3c(%esp),%eax
mov    %edx,0xc(%esp)
movl   $0x804f9b6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049410 <__asprintf_chk@plt>
test   %eax,%eax
js     804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
mov    0x3c(%esp),%eax
jmp    804ab90 <rewinddir@plt+0x1470>
xchg   %ax,%ax
lea    0x74(%ebx),%eax
movl   $0x804f98e,0x4(%esp)
mov    %eax,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,0x3c(%esp)
jne    804a8c7 <rewinddir@plt+0x11a7>
mov    (%ebx),%eax
test   %eax,%eax
je     804a868 <rewinddir@plt+0x1148>
add    $0x74,%eax
movl   $0x804f98e,0x4(%esp)
mov    %eax,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,0x3c(%esp)
je     804a868 <rewinddir@plt+0x1148>
jmp    804a8c7 <rewinddir@plt+0x11a7>
lea    0x0(%esi),%esi
lea    0x74(%ebx),%eax
lea    0x48(%esp),%esi
mov    %esi,0xc(%esp)
movl   $0x805033b,0x8(%esp)
movl   $0x804f987,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x48(%esp)
call   804eba0 <rewinddir@plt+0x5480>
test   %eax,%eax
jne    804af38 <rewinddir@plt+0x1818>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804ae98 <rewinddir@plt+0x1778>
movl   $0x804f98a,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
jmp    804a9a1 <rewinddir@plt+0x1281>
mov    0x88(%ebx),%eax
test   %eax,%eax
jne    804a868 <rewinddir@plt+0x1148>
mov    0xa0(%ebx),%eax
test   %eax,%eax
jne    804a868 <rewinddir@plt+0x1148>
movl   $0x804f9a9,0x4(%esp)
jmp    804a8e8 <rewinddir@plt+0x11c8>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
call   804a600 <rewinddir@plt+0xee0>
mov    0x94(%ebx),%eax
test   %eax,%eax
jne    804a8b7 <rewinddir@plt+0x1197>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
mov    %ebx,%eax
call   804a600 <rewinddir@plt+0xee0>
mov    0x98(%ebx),%eax
test   %eax,%eax
jne    804a8b7 <rewinddir@plt+0x1197>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
mov    0x9c(%ebx),%eax
test   %eax,%eax
jne    804a868 <rewinddir@plt+0x1148>
mov    0x70(%ebx),%eax
movl   $0x0,0x44(%esp)
test   %eax,%eax
je     804b0d9 <rewinddir@plt+0x19b9>
lea    0x44(%esp),%edx
lea    0x45c(%esp),%ebx
movl   $0x1000,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
movb   $0x0,0x45c(%esp)
call   804c070 <rewinddir@plt+0x2950>
test   %eax,%eax
jne    804ad78 <rewinddir@plt+0x1658>
mov    0x44(%esp),%eax
and    $0x9,%eax
cmp    $0x9,%eax
je     804b0bc <rewinddir@plt+0x199c>
cmpb   $0x0,0x45c(%esp)
je     804a868 <rewinddir@plt+0x1148>
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
je     804a9a1 <rewinddir@plt+0x1281>
mov    %eax,0x3c(%esp)
jmp    804a8c7 <rewinddir@plt+0x11a7>
nop
mov    %ebx,%eax
call   804a600 <rewinddir@plt+0xee0>
mov    0x90(%ebx),%eax
test   %eax,%eax
jne    804a8b7 <rewinddir@plt+0x1197>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
movl   $0x804fa93,0x4(%esp)
jmp    804a9d0 <rewinddir@plt+0x12b0>
lea    0x0(%esi),%esi
mov    0x8053444,%eax
testb  $0x2,0x4(%eax)
je     804af10 <rewinddir@plt+0x17f0>
add    $0x74,%ebx
movl   $0x804faa5,0x4(%esp)
mov    %ebx,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
mov    %eax,0x3c(%esp)
jmp    804ab90 <rewinddir@plt+0x1470>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053444,%eax
testb  $0x2,0x4(%eax)
je     804aec8 <rewinddir@plt+0x17a8>
add    $0x74,%ebx
movl   $0x804f905,0x4(%esp)
mov    %ebx,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
mov    %eax,0x3c(%esp)
jmp    804ab90 <rewinddir@plt+0x1470>
mov    $0x804f94d,%esi
mov    %esi,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     804a9a1 <rewinddir@plt+0x1281>
mov    %esi,%ebx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ebx),%edi
mov    %edi,%eax
test   %al,%al
je     804a849 <rewinddir@plt+0x1129>
call   80496e0 <__ctype_tolower_loc@plt>
mov    %edi,%edx
movzbl %dl,%edi
mov    (%eax),%eax
mov    (%eax,%edi,4),%eax
mov    %al,(%ebx)
add    $0x1,%ebx
jne    804ae48 <rewinddir@plt+0x1728>
jmp    804a849 <rewinddir@plt+0x1129>
mov    $0x804f956,%esi
jmp    804ae30 <rewinddir@plt+0x1710>
mov    $0x804f952,%esi
jmp    804ae30 <rewinddir@plt+0x1710>
mov    $0x804f95a,%esi
jmp    804ae30 <rewinddir@plt+0x1710>
lea    0x0(%esi),%esi
mov    0x6c(%ebx),%esi
test   %esi,%esi
je     804abf8 <rewinddir@plt+0x14d8>
jmp    804ab41 <rewinddir@plt+0x1421>
movl   $0x804f98c,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
jne    804a8c7 <rewinddir@plt+0x11a7>
jmp    804a9a1 <rewinddir@plt+0x1281>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f970,0x10(%esp)
jmp    804a96d <rewinddir@plt+0x124d>
lea    0x0(%esi),%esi
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804f905,0x4(%esp)
add    $0x74,%ebx
mov    %ebx,(%esp)
call   804ec70 <rewinddir@plt+0x5550>
test   %eax,%eax
jne    804abf8 <rewinddir@plt+0x14d8>
mov    0x48(%esp),%eax
mov    0x4c(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   804df20 <rewinddir@plt+0x4800>
jmp    804ab8c <rewinddir@plt+0x146c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804faa5,0x4(%esp)
jmp    804aed8 <rewinddir@plt+0x17b8>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8049240 <free@plt>
jmp    804a868 <rewinddir@plt+0x1148>
lea    0x0(%esi),%esi
movl   $0x0,0x4(%esp)
mov    0x70(%ebx),%eax
mov    %eax,(%esp)
call   80491c0 <open64@plt>
cmp    $0xffffffff,%eax
mov    %eax,%ebx
je     804ac83 <rewinddir@plt+0x1563>
mov    %esi,0x8(%esp)
movl   $0x125e,0x4(%esp)
mov    %eax,(%esp)
call   8049370 <ioctl@plt>
mov    %ebx,(%esp)
call   80496a0 <close@plt>
jmp    804ac83 <rewinddir@plt+0x1563>
nop
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
movl   $0x0,(%esp)
call   804df20 <rewinddir@plt+0x4800>
mov    %eax,0x3c(%esp)
jmp    804ab90 <rewinddir@plt+0x1470>
add    $0x74,%ebx
mov    %ebx,(%esp)
movl   $0x804fa6e,0x4(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,%ebx
je     804b080 <rewinddir@plt+0x1960>
movl   $0x2d,0x4(%esp)
mov    %eax,(%esp)
call   8049490 <strchr@plt>
test   %eax,%eax
je     804afc9 <rewinddir@plt+0x18a9>
movb   $0x0,(%eax)
movl   $0x4,0x8(%esp)
movl   $0x804f948,0x4(%esp)
mov    %ebx,(%esp)
call   8049540 <strncasecmp@plt>
test   %eax,%eax
jne    804afe9 <rewinddir@plt+0x18c9>
movb   $0x0,0x4(%ebx)
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
je     804a9a1 <rewinddir@plt+0x1281>
mov    %ebx,(%esp)
call   8049240 <free@plt>
jmp    804ae42 <rewinddir@plt+0x1722>
movl   $0x804fa76,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804ae42 <rewinddir@plt+0x1722>
jmp    804a9a1 <rewinddir@plt+0x1281>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f9d4,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
jne    804ab8c <rewinddir@plt+0x146c>
jmp    804a9a1 <rewinddir@plt+0x1281>
lea    0x0(%esi,%eiz,1),%esi
add    $0x74,%ebx
movl   $0x804fa7e,0x4(%esp)
mov    %ebx,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
test   %eax,%eax
mov    %eax,%esi
jne    804ae42 <rewinddir@plt+0x1722>
movl   $0x804fa7b,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804ae42 <rewinddir@plt+0x1722>
jmp    804a9a1 <rewinddir@plt+0x1281>
movl   $0x804fad7,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804ae42 <rewinddir@plt+0x1722>
jmp    804a9a1 <rewinddir@plt+0x1281>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x74,%ebx
movl   $0x804f9ba,0x4(%esp)
mov    %ebx,(%esp)
call   804ed40 <rewinddir@plt+0x5620>
mov    %eax,0x3c(%esp)
jmp    804ab90 <rewinddir@plt+0x1470>
mov    $0x5d50,%eax
movl   $0x4157535b,(%ebx)
mov    %ax,0x4(%ebx)
movb   $0x0,0x6(%ebx)
jmp    804ad78 <rewinddir@plt+0x1658>
call   80492e0 <__stack_chk_fail@plt>
movl   $0x8050006,0xc(%esp)
movl   $0x110,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f979,(%esp)
call   80496f0 <__assert_fail@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
xor    %ebx,%ebx
sub    $0x10,%esp
mov    0x8053444,%eax
mov    %edx,0x4(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   804c8f0 <rewinddir@plt+0x31d0>
mov    %eax,%edi
mov    %eax,0x4(%esi)
mov    0x8053860,%eax
test   %eax,%eax
jg     804b133 <rewinddir@plt+0x1a13>
jmp    804b153 <rewinddir@plt+0x1a33>
lea    0x0(%esi),%esi
mov    0x4(%esi),%edi
mov    %ebx,%eax
call   804a1c0 <rewinddir@plt+0xaa0>
mov    %ebx,%edx
add    $0x1,%ebx
mov    %edi,(%esp)
mov    %eax,%ecx
mov    %esi,%eax
call   804a780 <rewinddir@plt+0x1060>
cmp    %ebx,0x8053860
jg     804b130 <rewinddir@plt+0x1a10>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
push   %ebp
mov    $0x2e,%ecx
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
xor    %eax,%eax
sub    $0xec,%esp
test   %esi,%esi
lea    0x28(%esp),%ebx
mov    %ebx,%edi
rep stos %eax,%es:(%edi)
je     804b2a7 <rewinddir@plt+0x1b87>
mov    0x8053444,%eax
testb  $0x4,0x4(%eax)
jne    804b198 <rewinddir@plt+0x1a78>
mov    0x9c(%esi),%eax
test   %eax,%eax
jne    804b1a8 <rewinddir@plt+0x1a88>
add    $0xec,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x74(%esi),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   804ea50 <rewinddir@plt+0x5330>
test   %eax,%eax
mov    %eax,%edi
je     804b2cb <rewinddir@plt+0x1bab>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
call   804a230 <rewinddir@plt+0xb10>
test   %eax,%eax
mov    %eax,%ebp
je     804b230 <rewinddir@plt+0x1b10>
mov    0x68(%esi),%eax
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   804eac0 <rewinddir@plt+0x53a0>
test   %eax,%eax
je     804b1d0 <rewinddir@plt+0x1ab0>
lea    0x13(%ebp),%ecx
mov    %esi,%edx
movl   $0x1,(%esp)
mov    %ebx,%eax
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
jne    804b21c <rewinddir@plt+0x1afc>
mov    0x4(%esi),%edx
mov    %ebx,%eax
call   804b100 <rewinddir@plt+0x19e0>
mov    %ebx,%eax
call   804b160 <rewinddir@plt+0x1a40>
mov    %ebx,%eax
call   804a060 <rewinddir@plt+0x940>
mov    %edi,%eax
call   804a230 <rewinddir@plt+0xb10>
test   %eax,%eax
mov    %eax,%ebp
jne    804b1dd <rewinddir@plt+0x1abd>
mov    %edi,(%esp)
call   80496b0 <closedir@plt>
mov    0x1c(%esp),%eax
movl   $0x804f939,0x4(%esp)
mov    %eax,(%esp)
call   804ea50 <rewinddir@plt+0x5330>
test   %eax,%eax
mov    %eax,%edi
jne    804b287 <rewinddir@plt+0x1b67>
jmp    804b198 <rewinddir@plt+0x1a78>
nop
lea    0x13(%eax),%ecx
mov    %esi,%edx
movl   $0x0,(%esp)
mov    %ebx,%eax
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
jne    804b280 <rewinddir@plt+0x1b60>
mov    0x4(%esi),%edx
mov    %ebx,%eax
call   804b100 <rewinddir@plt+0x19e0>
mov    %ebx,%eax
call   804b160 <rewinddir@plt+0x1a40>
mov    %ebx,%eax
call   804a060 <rewinddir@plt+0x940>
mov    %edi,%eax
call   804a230 <rewinddir@plt+0xb10>
test   %eax,%eax
jne    804b258 <rewinddir@plt+0x1b38>
mov    %edi,(%esp)
call   80496b0 <closedir@plt>
add    $0xec,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x804fff9,0xc(%esp)
movl   $0x2bd,0x8(%esp)
movl   $0x804f86d,0x4(%esp)
movl   $0x804f8b9,(%esp)
call   80496f0 <__assert_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x804f688,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049320 <err@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
mov    $0x2e,%ecx
push   %esi
push   %ebx
sub    $0x220c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x21fc(%esp)
xor    %eax,%eax
lea    0x88(%esp),%esi
mov    %esi,%edi
lea    0x140(%esp),%ebx
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
rep stos %eax,%es:(%edi)
mov    %ebx,%edi
mov    $0x2e,%cl
rep stos %eax,%es:(%edi)
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804b374 <rewinddir@plt+0x1c54>
mov    0x38(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
je     804b3c8 <rewinddir@plt+0x1ca8>
movl   $0x5,0x8(%esp)
mov    $0x1,%ebx
movl   $0x804fada,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80494e0 <warnx@plt>
mov    0x21fc(%esp),%edx
xor    %gs:0x14,%edx
mov    %ebx,%eax
jne    804b5db <rewinddir@plt+0x1ebb>
add    $0x220c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x20(%esp),%eax
mov    0x4c(%esp),%edx
mov    %eax,0x10(%esp)
mov    0x48(%esp),%eax
lea    0x11fb(%esp),%edi
movl   $0x1001,0xc(%esp)
mov    %edi,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049300 <blkid_devno_to_wholedisk@plt>
test   %eax,%eax
jne    804b540 <rewinddir@plt+0x1e20>
mov    0x4c(%esp),%edx
mov    0x24(%esp),%ecx
mov    0x48(%esp),%eax
xor    %edx,%ecx
mov    %ecx,0x1c(%esp)
mov    0x20(%esp),%ecx
xor    %eax,%ecx
or     0x1c(%esp),%ecx
je     804b518 <rewinddir@plt+0x1df8>
lea    0x1fb(%esp),%ecx
movl   $0x1000,0xc(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e560 <rewinddir@plt+0x4e40>
test   %eax,%eax
je     804b5ac <rewinddir@plt+0x1e8c>
mov    %edi,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804b5e0 <rewinddir@plt+0x1ec0>
lea    0x1fb(%esp),%eax
movl   $0x1000,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049330 <readlink@plt>
test   %eax,%eax
js     804b578 <rewinddir@plt+0x1e58>
movb   $0x0,0x11fb(%esp,%eax,1)
mov    %edi,(%esp)
movl   $0x2f,0x4(%esp)
call   80495e0 <strrchr@plt>
xor    %edx,%edx
mov    %ebp,%ecx
movl   $0x0,(%esp)
mov    %eax,%edi
mov    %esi,%eax
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
je     804b4e7 <rewinddir@plt+0x1dc7>
mov    $0x1,%edi
mov    %ebp,(%esp)
call   8049240 <free@plt>
mov    %ebx,%eax
mov    %edi,%ebx
call   804a060 <rewinddir@plt+0x940>
mov    0x48(%esp),%eax
mov    0x4c(%esp),%edx
xor    0x24(%esp),%edx
xor    0x20(%esp),%eax
or     %eax,%edx
je     804b3a1 <rewinddir@plt+0x1c81>
mov    %esi,%eax
call   804a060 <rewinddir@plt+0x940>
jmp    804b3a1 <rewinddir@plt+0x1c81>
lea    0x1(%edi),%ecx
mov    %esi,%edx
movl   $0x1,(%esp)
mov    %ebx,%eax
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
jne    804b4ad <rewinddir@plt+0x1d8d>
xor    %edx,%edx
mov    %ebx,%eax
call   804b100 <rewinddir@plt+0x19e0>
mov    %ebx,%eax
xor    %edi,%edi
call   804b160 <rewinddir@plt+0x1a40>
jmp    804b4b2 <rewinddir@plt+0x1d92>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
mov    %ebx,%eax
xor    %ebp,%ebp
call   804a380 <rewinddir@plt+0xc60>
test   %eax,%eax
je     804b4fe <rewinddir@plt+0x1dde>
mov    $0x1,%edi
xor    %ebp,%ebp
jmp    804b4b2 <rewinddir@plt+0x1d92>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
mov    $0x1,%ebx
movl   $0x804f6b4,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80495a0 <warn@plt>
jmp    804b3a1 <rewinddir@plt+0x1c81>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x804faf1,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
lea    0x1fb(%esp),%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80495a0 <warn@plt>
jmp    804b4ad <rewinddir@plt+0x1d8d>
movl   $0x5,0x8(%esp)
movl   $0x804f6e0,0x4(%esp)
movl   $0x0,(%esp)
call   80492d0 <dcgettext@plt>
mov    %ebp,0x4(%esp)
xor    %ebp,%ebp
mov    %eax,(%esp)
call   80495a0 <warn@plt>
jmp    804b4ad <rewinddir@plt+0x1d8d>
call   80492e0 <__stack_chk_fail@plt>
call   804976e <rewinddir@plt+0x4e>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x23c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x22c(%esp)
xor    %eax,%eax
mov    0x250(%esp),%eax
lea    0x2c(%esp),%esi
movl   $0x8050160,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x100,0x4(%esp)
mov    %esi,(%esp)
call   80491a0 <__snprintf_chk@plt>
movl   $0x804fc1c,0x4(%esp)
mov    %esi,(%esp)
call   8049380 <fopen64@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b728 <rewinddir@plt+0x2008>
lea    0x12c(%esp),%ebp
mov    %eax,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebp,(%esp)
call   8049290 <fgets@plt>
test   %eax,%eax
je     804b720 <rewinddir@plt+0x2000>
mov    %ebp,%ecx
mov    (%ecx),%eax
add    $0x4,%ecx
lea    -0x1010101(%eax),%edx
not    %eax
and    %eax,%edx
and    $0x80808080,%edx
je     804b67f <rewinddir@plt+0x1f5f>
mov    %edx,%eax
shr    $0x10,%eax
test   $0x8080,%edx
cmove  %eax,%edx
lea    0x2(%ecx),%eax
cmove  %eax,%ecx
add    %dl,%dl
sbb    $0x3,%ecx
xor    %edi,%edi
sub    %ebp,%ecx
cmp    $0x1,%ecx
jbe    804b6f6 <rewinddir@plt+0x1fd6>
movb   $0x0,0x12b(%esp,%ecx,1)
mov    %ebp,0x14(%esp)
movl   $0x8050176,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %esi,(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %esi,(%esp)
call   8049510 <__strdup@plt>
mov    %eax,%edi
mov    %ebx,(%esp)
call   80492b0 <fclose@plt>
mov    %edi,%eax
mov    0x22c(%esp),%edi
xor    %gs:0x14,%edi
jne    804b72c <rewinddir@plt+0x200c>
add    $0x23c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edi,%edi
jmp    804b6f6 <rewinddir@plt+0x1fd6>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804b700 <rewinddir@plt+0x1fe0>
lea    0x0(%esi,%eiz,1),%esi
call   80492e0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x203c,%esp
mov    0x2050(%esp),%eax
mov    %gs:0x14,%edx
mov    %edx,0x202c(%esp)
xor    %edx,%edx
test   %eax,%eax
mov    %eax,%ebx
mov    %eax,0x10(%esp)
je     804ba67 <rewinddir@plt+0x2347>
cmpb   $0x2f,(%eax)
je     804b9a0 <rewinddir@plt+0x2280>
lea    0x102a(%esp),%ebp
movl   $0xfff,0x4(%esp)
mov    %ebp,(%esp)
call   80494a0 <getcwd@plt>
test   %eax,%eax
je     804b80f <rewinddir@plt+0x20ef>
mov    %ebp,(%esp)
call   80494c0 <strlen@plt>
add    %ebp,%eax
cmpb   $0x2f,-0x1(%eax)
je     804b9dd <rewinddir@plt+0x22bd>
lea    0x1(%eax),%esi
movb   $0x2f,(%eax)
movzbl (%ebx),%eax
xor    %edx,%edx
movl   $0x0,0xc(%esp)
test   %al,%al
je     804b9e8 <rewinddir@plt+0x22c8>
cmp    $0x2f,%al
je     804b918 <rewinddir@plt+0x21f8>
cmp    $0x2e,%al
jne    804b7ec <rewinddir@plt+0x20cc>
xchg   %ax,%ax
jmp    804b924 <rewinddir@plt+0x2204>
lea    0x0(%esi),%esi
add    $0x1,%esi
add    $0x1,%ebx
mov    %al,-0x1(%esi)
movzbl (%ebx),%eax
cmp    $0x2f,%al
je     804b840 <rewinddir@plt+0x2120>
test   %al,%al
je     804b840 <rewinddir@plt+0x2120>
mov    %esi,%ecx
sub    %ebp,%ecx
cmp    $0xfff,%ecx
jle    804b7d8 <rewinddir@plt+0x20b8>
call   8049520 <__errno_location@plt>
movl   $0x24,(%eax)
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x10(%esp),%eax
mov    %eax,(%esp)
call   8049510 <__strdup@plt>
mov    0x202c(%esp),%edx
xor    %gs:0x14,%edx
jne    804ba8e <rewinddir@plt+0x236e>
add    $0x203c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x1(%edx),%eax
cmp    $0x100,%edx
mov    %ebx,0x18(%esp)
mov    %eax,0x14(%esp)
jg     804ba75 <rewinddir@plt+0x2355>
lea    0x29(%esp),%eax
movb   $0x0,(%esi)
movl   $0x1000,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049330 <readlink@plt>
test   %eax,%eax
mov    %eax,%ecx
js     804b9c8 <rewinddir@plt+0x22a8>
movb   $0x0,0x29(%esp,%eax,1)
mov    %ebp,%edi
cmpb   $0x2f,0x29(%esp)
je     804b898 <rewinddir@plt+0x2178>
mov    %esi,%edi
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1,%edi
cmpb   $0x2f,(%edi)
jne    804b890 <rewinddir@plt+0x2170>
mov    %ebx,(%esp)
mov    %ecx,0x1c(%esp)
call   80494c0 <strlen@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%esi
lea    0x1(%ecx,%eax,1),%eax
mov    %eax,(%esp)
call   8049420 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804b803 <rewinddir@plt+0x20e3>
mov    0x1c(%esp),%ecx
lea    0x29(%esp),%eax
add    $0x1,%esi
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
mov    %ecx,0x8(%esp)
call   8049260 <memcpy@plt>
mov    0x1c(%esp),%ecx
mov    0x18(%esp),%eax
mov    %esi,0x8(%esp)
add    %ebx,%ecx
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   8049260 <memcpy@plt>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    %ebx,0xc(%esp)
lea    0x1(%edi),%esi
movzbl (%ebx),%eax
movb   $0x2f,(%edi)
mov    0x14(%esp),%edx
jmp    804b7ba <rewinddir@plt+0x209a>
nop
movzbl 0x1(%ebx),%eax
add    $0x1,%ebx
jmp    804b7ba <rewinddir@plt+0x209a>
movzbl 0x1(%ebx),%ecx
cmp    $0x2f,%cl
je     804b990 <rewinddir@plt+0x2270>
test   %cl,%cl
je     804b990 <rewinddir@plt+0x2270>
cmp    $0x2e,%cl
jne    804b7ec <rewinddir@plt+0x20cc>
movzbl 0x2(%ebx),%ecx
cmp    $0x2f,%cl
je     804b94b <rewinddir@plt+0x222b>
test   %cl,%cl
jne    804b7ec <rewinddir@plt+0x20cc>
lea    0x102b(%esp),%eax
add    $0x2,%ebx
cmp    %eax,%esi
jbe    804b984 <rewinddir@plt+0x2264>
cmpb   $0x2f,-0x2(%esi)
lea    -0x1(%esi),%edi
je     804ba85 <rewinddir@plt+0x2365>
mov    %edi,%esi
jmp    804b979 <rewinddir@plt+0x2259>
lea    0x0(%esi),%esi
sub    $0x1,%esi
cmpb   $0x2f,-0x1(%esi)
je     804b984 <rewinddir@plt+0x2264>
lea    0x102b(%esp),%eax
cmp    %eax,%esi
jne    804b970 <rewinddir@plt+0x2250>
mov    %ecx,%eax
jmp    804b7ba <rewinddir@plt+0x209a>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
mov    %ecx,%eax
jmp    804b7ba <rewinddir@plt+0x209a>
lea    0x0(%esi),%esi
mov    0x10(%esp),%eax
lea    0x102b(%esp),%esi
movb   $0x2f,0x102a(%esp)
lea    0x102a(%esp),%ebp
lea    0x1(%eax),%ebx
jmp    804b7ad <rewinddir@plt+0x208d>
lea    0x0(%esi),%esi
call   8049520 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    804b803 <rewinddir@plt+0x20e3>
mov    %esi,%edi
jmp    804b905 <rewinddir@plt+0x21e5>
mov    %eax,%esi
mov    0x10(%esp),%ebx
jmp    804b7ad <rewinddir@plt+0x208d>
lea    0x102b(%esp),%eax
cmp    %eax,%esi
je     804b9fe <rewinddir@plt+0x22de>
xor    %eax,%eax
cmpb   $0x2f,-0x1(%esi)
sete   %al
sub    %eax,%esi
mov    0xc(%esp),%eax
movb   $0x0,(%esi)
mov    %eax,(%esp)
call   8049240 <free@plt>
movl   $0x2f,0x4(%esp)
mov    %ebp,(%esp)
call   80495e0 <strrchr@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804ba45 <rewinddir@plt+0x2325>
mov    $0x8050185,%edi
mov    $0x4,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804ba45 <rewinddir@plt+0x2325>
call   8049700 <__ctype_b_loc@plt>
movsbl 0x4(%ebx),%edx
mov    (%eax),%eax
testb  $0x8,0x1(%eax,%edx,2)
jne    804ba52 <rewinddir@plt+0x2332>
mov    %ebp,(%esp)
call   8049510 <__strdup@plt>
jmp    804b81b <rewinddir@plt+0x20fb>
add    $0x1,%ebx
mov    %ebx,(%esp)
call   804b5f0 <rewinddir@plt+0x1ed0>
test   %eax,%eax
jne    804b81b <rewinddir@plt+0x20fb>
jmp    804ba45 <rewinddir@plt+0x2325>
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
jmp    804b81b <rewinddir@plt+0x20fb>
call   8049520 <__errno_location@plt>
movl   $0x28,(%eax)
jmp    804b803 <rewinddir@plt+0x20e3>
mov    %ecx,%eax
mov    %edi,%esi
jmp    804b7ba <rewinddir@plt+0x209a>
call   80492e0 <__stack_chk_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x49c,%esp
lea    0x2c(%esp),%ecx
mov    %ecx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
mov    %gs:0x14,%esi
mov    %esi,0x48c(%esp)
xor    %esi,%esi
mov    %eax,0x1c(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804bc50 <rewinddir@plt+0x2530>
mov    0x3c(%esp),%eax
movl   $0x0,0x14(%esp)
movl   $0x0,0x18(%esp)
and    $0xf000,%eax
cmp    $0x6000,%eax
je     804bc68 <rewinddir@plt+0x2548>
movl   $0x804fc1c,0x4(%esp)
movl   $0x805018a,(%esp)
call   8049380 <fopen64@plt>
mov    %eax,%ebx
xor    %eax,%eax
test   %ebx,%ebx
je     804bbb8 <rewinddir@plt+0x2498>
lea    0x8c(%esp),%ebp
mov    %ebx,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebp,(%esp)
call   8049290 <fgets@plt>
test   %eax,%eax
je     804bc44 <rewinddir@plt+0x2524>
cmpb   $0x0,0x8c(%esp)
je     804bc28 <rewinddir@plt+0x2508>
mov    $0x8050196,%edi
mov    $0x9,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804bc28 <rewinddir@plt+0x2508>
movl   $0x20,0x4(%esp)
mov    %ebp,(%esp)
call   8049490 <strchr@plt>
test   %eax,%eax
je     804bb7e <rewinddir@plt+0x245e>
movb   $0x0,(%eax)
movl   $0x9,0x4(%esp)
mov    %ebp,(%esp)
call   8049490 <strchr@plt>
test   %eax,%eax
je     804bb95 <rewinddir@plt+0x2475>
movb   $0x0,(%eax)
mov    0x1c(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   80491b0 <strcmp@plt>
test   %eax,%eax
jne    804bbd8 <rewinddir@plt+0x24b8>
mov    $0x1,%edi
mov    %ebx,(%esp)
call   80492b0 <fclose@plt>
mov    %edi,%eax
mov    0x48c(%esp),%edx
xor    %gs:0x14,%edx
jne    804bc7d <rewinddir@plt+0x255d>
add    $0x49c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x18(%esp),%eax
or     0x14(%esp),%eax
je     804bc28 <rewinddir@plt+0x2508>
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebp,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804bc28 <rewinddir@plt+0x2508>
mov    0x3c(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
jne    804bc28 <rewinddir@plt+0x2508>
mov    0x18(%esp),%edx
mov    0x14(%esp),%eax
xor    0x50(%esp),%edx
xor    0x4c(%esp),%eax
or     %eax,%edx
je     804bba9 <rewinddir@plt+0x2489>
lea    0x0(%esi),%esi
mov    %ebx,0x8(%esp)
movl   $0x400,0x4(%esp)
mov    %ebp,(%esp)
call   8049290 <fgets@plt>
test   %eax,%eax
jne    804bb67 <rewinddir@plt+0x2447>
xor    %edi,%edi
jmp    804bbae <rewinddir@plt+0x248e>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x14(%esp)
movl   $0x0,0x18(%esp)
jmp    804bb02 <rewinddir@plt+0x23e2>
lea    0x0(%esi),%esi
mov    0x4c(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x50(%esp),%eax
mov    %eax,0x18(%esp)
jmp    804bb02 <rewinddir@plt+0x23e2>
call   80492e0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x9c,%esp
movl   $0x0,(%ecx)
movl   $0x804fc1c,0x4(%esp)
mov    %eax,(%esp)
mov    %ecx,0x24(%esp)
call   80493f0 <setmntent@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c008 <rewinddir@plt+0x28e8>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
je     804bec0 <rewinddir@plt+0x27a0>
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x10(%esp)
movl   $0x0,0x14(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    0x1c(%esp),%eax
or     0x18(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x14(%esp),%eax
or     0x10(%esp),%eax
mov    %eax,0x20(%esp)
mov    %ebx,(%esp)
call   80493e0 <getmntent@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804bf70 <rewinddir@plt+0x2850>
mov    0x0(%ebp),%edi
cmpb   $0x2f,(%edi)
jne    804bd28 <rewinddir@plt+0x2608>
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   80491b0 <strcmp@plt>
test   %eax,%eax
je     804bdbc <rewinddir@plt+0x269c>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804bd28 <rewinddir@plt+0x2608>
mov    0x40(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
je     804bf10 <rewinddir@plt+0x27f0>
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     804bd28 <rewinddir@plt+0x2608>
mov    0x1c(%esp),%edx
mov    0x18(%esp),%eax
xor    0x34(%esp),%edx
xor    0x30(%esp),%eax
or     %eax,%edx
jne    804bd28 <rewinddir@plt+0x2608>
mov    0x2c(%esp),%edx
mov    0x28(%esp),%eax
xor    0x8c(%esp),%edx
xor    0x88(%esp),%eax
or     %eax,%edx
jne    804bd28 <rewinddir@plt+0x2608>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
js     804bf57 <rewinddir@plt+0x2837>
mov    0x14(%esp),%eax
or     0x10(%esp),%eax
je     804be01 <rewinddir@plt+0x26e1>
mov    0x14(%esp),%ecx
mov    0x10(%esp),%eax
xor    0x34(%esp),%ecx
xor    0x30(%esp),%eax
or     %eax,%ecx
jne    804bea8 <rewinddir@plt+0x2788>
mov    0x24(%esp),%eax
movl   $0x1,(%eax)
movl   $0x804f987,0x4(%esp)
mov    %ebp,(%esp)
call   8049390 <hasmntopt@plt>
test   %eax,%eax
je     804be26 <rewinddir@plt+0x2706>
mov    0x24(%esp),%eax
orl    $0x4,(%eax)
mov    0xb0(%esp),%eax
test   %eax,%eax
je     804be52 <rewinddir@plt+0x2732>
mov    0xb4(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
mov    %eax,0x4(%esp)
mov    0xb0(%esp),%eax
mov    %eax,(%esp)
call   8049530 <strncpy@plt>
mov    0x4(%ebp),%eax
cmpb   $0x2f,(%eax)
jne    804bea8 <rewinddir@plt+0x2788>
cmpb   $0x0,0x1(%eax)
jne    804bea8 <rewinddir@plt+0x2788>
mov    0x24(%esp),%eax
mov    (%eax),%eax
or     $0x2,%eax
mov    0x24(%esp),%ecx
mov    %eax,(%ecx)
movl   $0x180,0x8(%esp)
movl   $0x42,0x4(%esp)
movl   $0x80501a0,(%esp)
call   80491c0 <open64@plt>
test   %eax,%eax
js     804c04f <rewinddir@plt+0x292f>
mov    %eax,(%esp)
call   80496a0 <close@plt>
movl   $0x80501a0,(%esp)
call   80492f0 <unlink@plt>
nop
xor    %esi,%esi
mov    %ebx,(%esp)
call   8049580 <endmntent@plt>
add    $0x9c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x40(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
je     804c01a <rewinddir@plt+0x28fa>
mov    0x30(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x1c(%esp)
mov    0x88(%esp),%eax
mov    %eax,0x28(%esp)
mov    0x8c(%esp),%eax
mov    %eax,0x2c(%esp)
jmp    804bd10 <rewinddir@plt+0x25f0>
nop
mov    0x20(%esp),%edi
test   %edi,%edi
je     804bd28 <rewinddir@plt+0x2608>
mov    0x14(%esp),%edx
mov    0x10(%esp),%eax
xor    0x54(%esp),%edx
xor    0x50(%esp),%eax
or     %eax,%edx
jne    804bd28 <rewinddir@plt+0x2608>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jns    804bde9 <rewinddir@plt+0x26c9>
call   8049520 <__errno_location@plt>
mov    (%eax),%esi
cmp    $0x2,%esi
jne    804beaa <rewinddir@plt+0x278a>
jmp    804bea8 <rewinddir@plt+0x2788>
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%eax
or     0x10(%esp),%eax
je     804bea8 <rewinddir@plt+0x2788>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805030f,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804bea8 <rewinddir@plt+0x2788>
mov    0x14(%esp),%edx
mov    0x10(%esp),%eax
xor    0x34(%esp),%edx
xor    0x30(%esp),%eax
or     %eax,%edx
jne    804bea8 <rewinddir@plt+0x2788>
mov    0xb0(%esp),%edx
mov    $0x3,%eax
mov    0x24(%esp),%esi
test   %edx,%edx
movl   $0x1,(%esi)
je     804be69 <rewinddir@plt+0x2749>
mov    0xb4(%esp),%eax
movl   $0x805030f,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0xb0(%esp),%eax
mov    %eax,(%esp)
call   8049530 <strncpy@plt>
mov    (%esi),%eax
or     $0x2,%eax
jmp    804be69 <rewinddir@plt+0x2749>
lea    0x0(%esi,%eiz,1),%esi
call   8049520 <__errno_location@plt>
mov    (%eax),%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x50(%esp),%eax
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
movl   $0x0,0x18(%esp)
mov    %eax,0x10(%esp)
mov    0x54(%esp),%eax
movl   $0x0,0x1c(%esp)
mov    %eax,0x14(%esp)
jmp    804bd10 <rewinddir@plt+0x25f0>
call   8049520 <__errno_location@plt>
cmpl   $0x1e,(%eax)
jne    804be9b <rewinddir@plt+0x277b>
mov    0x24(%esp),%eax
orl    $0x4,(%eax)
jmp    804be9b <rewinddir@plt+0x277b>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    0x90(%esp),%ebx
mov    0x94(%esp),%edi
mov    0x98(%esp),%ebp
mov    %ebx,%eax
call   804baa0 <rewinddir@plt+0x2380>
test   %eax,%eax
je     804c0f8 <rewinddir@plt+0x29d8>
mov    0x9c(%esp),%eax
movl   $0x9,(%edi)
movl   $0x80501b4,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
call   8049530 <strncpy@plt>
lea    0x10(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
mov    %eax,%esi
jne    804c0ea <rewinddir@plt+0x29ca>
mov    0x20(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
je     804c170 <rewinddir@plt+0x2a50>
add    $0x7c,%esp
xor    %esi,%esi
pop    %ebx
mov    %esi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x9c(%esp),%eax
mov    %edi,%ecx
mov    %ebx,%edx
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
mov    $0x80501bb,%eax
call   804bc90 <rewinddir@plt+0x2570>
test   %eax,%eax
mov    %eax,%esi
jne    804c120 <rewinddir@plt+0x2a00>
mov    (%edi),%eax
test   %eax,%eax
jne    804c0b8 <rewinddir@plt+0x2998>
movl   $0x4,0x4(%esp)
movl   $0x80501bb,(%esp)
call   8049550 <access@plt>
test   %eax,%eax
jne    804c150 <rewinddir@plt+0x2a30>
movl   $0x0,(%edi)
test   %esi,%esi
je     804c0b8 <rewinddir@plt+0x2998>
add    $0x7c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x9c(%esp),%eax
mov    %edi,%ecx
mov    %ebx,%edx
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
mov    $0x80501c8,%eax
call   804bc90 <rewinddir@plt+0x2570>
mov    %eax,%esi
jmp    804c13e <rewinddir@plt+0x2a1e>
movl   $0x80,0x4(%esp)
mov    %ebx,(%esp)
call   80491c0 <open64@plt>
test   %eax,%eax
js     804c190 <rewinddir@plt+0x2a70>
mov    %eax,(%esp)
call   80496a0 <close@plt>
jmp    804c146 <rewinddir@plt+0x2a26>
xchg   %ax,%ax
call   8049520 <__errno_location@plt>
cmpl   $0x10,(%eax)
jne    804c0ea <rewinddir@plt+0x29ca>
orl    $0x10,(%edi)
jmp    804c146 <rewinddir@plt+0x2a26>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,(%esp)
call   804c070 <rewinddir@plt+0x2950>
xor    %edx,%edx
test   %eax,%eax
jne    804c1ec <rewinddir@plt+0x2acc>
mov    0x1c(%esp),%edx
and    $0x1,%edx
mov    %edx,%eax
add    $0x2c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x1c,%esp
mov    0x28(%eax),%eax
test   %eax,%eax
je     804c260 <rewinddir@plt+0x2b40>
mov    %ecx,%esi
call   804c200 <rewinddir@plt+0x2ae0>
test   %eax,%eax
mov    %eax,%edi
je     804c280 <rewinddir@plt+0x2b60>
mov    0x28(%ebx),%edx
lea    0x20(%ebx),%eax
cmp    %eax,0x1c(%edx)
je     804c270 <rewinddir@plt+0x2b50>
mov    (%ebx),%eax
mov    0x20(%eax),%eax
mov    0x4(%eax),%ebp
mov    %ebp,(%esp)
call   80494c0 <strlen@plt>
mov    %eax,%ebx
xor    %eax,%eax
cmp    %ebx,(%esi)
jb     804c255 <rewinddir@plt+0x2b35>
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8049260 <memcpy@plt>
lea    (%edi,%ebx,1),%eax
sub    %ebx,(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    $0x2,%ebx
mov    $0x80501d2,%ebp
jmp    804c23a <rewinddir@plt+0x2b1a>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    804c255 <rewinddir@plt+0x2b35>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x3c,%esp
mov    $0x805019f,%eax
test   %ecx,%ecx
cmove  %eax,%ecx
mov    0x8(%ebx),%eax
test   $0x2,%al
jne    804c410 <rewinddir@plt+0x2cf0>
and    $0x10,%eax
mov    %eax,%ebp
je     804c308 <rewinddir@plt+0x2be8>
mov    %ecx,0x10(%esp)
mov    (%edx),%eax
add    $0x1c,%esi
movl   $0x80501d5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8053420,%eax
mov    %eax,(%esp)
call   8049640 <__fprintf_chk@plt>
cmp    %esi,0x14(%ebx)
je     804c2fb <rewinddir@plt+0x2bdb>
mov    0x8053420,%eax
movl   $0x20,(%esp)
mov    %eax,0x4(%esp)
call   80495f0 <fputc@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,0x4(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x18(%esp)
call   8049600 <mbstowcs@plt>
mov    0x18(%esp),%ecx
lea    0x1c(%esi),%edx
mov    %edx,0x18(%esp)
mov    %eax,%edi
lea    -0x1(%eax),%eax
cmp    $0xfffffffd,%eax
mov    0x8(%esi),%eax
cmova  %ebp,%edi
cmova  %ebp,%ecx
cmp    0x14(%ebx),%edx
mov    %eax,0x2c(%esp)
je     804c37e <rewinddir@plt+0x2c5e>
cmp    %eax,%edi
jbe    804c388 <rewinddir@plt+0x2c68>
testb  $0x20,0x18(%esi)
je     804c388 <rewinddir@plt+0x2c68>
test   %ecx,%ecx
je     804c37a <rewinddir@plt+0x2c5a>
lea    0x2c(%esp),%eax
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
mov    %ecx,0x1c(%esp)
call   804d000 <rewinddir@plt+0x38e0>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
mov    0x2c(%esp),%eax
cmp    $0xffffffff,%edi
jne    804c38c <rewinddir@plt+0x2c6c>
xor    %edi,%edi
jmp    804c3b1 <rewinddir@plt+0x2c91>
cmp    %eax,%edi
jae    804c349 <rewinddir@plt+0x2c29>
mov    %edi,0x2c(%esp)
xchg   %ax,%ax
test   %ecx,%ecx
je     804c3ad <rewinddir@plt+0x2c8d>
testb  $0x2,0x8(%ebx)
jne    804c39c <rewinddir@plt+0x2c7c>
testb  $0x80,0x18(%esi)
jne    804c498 <rewinddir@plt+0x2d78>
mov    0x8053420,%eax
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   8049690 <fputs@plt>
mov    0x2c(%esp),%eax
cmp    %edi,%eax
jbe    804c3d8 <rewinddir@plt+0x2cb8>
mov    %edi,%ebp
nop
mov    0x8053420,%eax
add    $0x1,%ebp
movl   $0x20,(%esp)
mov    %eax,0x4(%esp)
call   80495f0 <fputc@plt>
mov    0x2c(%esp),%eax
cmp    %ebp,%eax
ja     804c3b8 <rewinddir@plt+0x2c98>
mov    0x18(%esp),%edx
cmp    0x14(%ebx),%edx
je     804c2fb <rewinddir@plt+0x2bdb>
cmp    %eax,%edi
mov    0x8053420,%eax
jbe    804c3f4 <rewinddir@plt+0x2cd4>
testb  $0x20,0x18(%esi)
je     804c432 <rewinddir@plt+0x2d12>
mov    %eax,0x4(%esp)
movl   $0x20,(%esp)
call   80495f0 <fputc@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8053420,%eax
add    $0x1c,%esi
mov    %ecx,(%esp)
mov    %eax,0x4(%esp)
call   8049690 <fputs@plt>
cmp    %esi,0x14(%ebx)
jne    804c2e6 <rewinddir@plt+0x2bc6>
jmp    804c2fb <rewinddir@plt+0x2bdb>
mov    %eax,0x4(%esp)
lea    0x10(%ebx),%ebp
xor    %edi,%edi
movl   $0xa,(%esp)
call   80495f0 <fputc@plt>
nop
mov    0x10(%ebx),%ecx
cmp    %ecx,%ebp
jne    804c45e <rewinddir@plt+0x2d3e>
jmp    804c4d0 <rewinddir@plt+0x2db0>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%ecx
cmp    %ecx,%ebp
je     804c4d0 <rewinddir@plt+0x2db0>
cmp    -0x18(%ecx),%edi
jne    804c458 <rewinddir@plt+0x2d38>
sub    $0x1c,%ecx
movl   $0x80501d3,0xc(%esp)
mov    0x8(%ecx),%eax
add    $0x1,%edi
movl   $0x80501e1,0x4(%esp)
movl   $0x1,(%esp)
neg    %eax
mov    %eax,0x8(%esp)
call   8049560 <__printf_chk@plt>
cmp    %edi,0x4(%esi)
jae    804c448 <rewinddir@plt+0x2d28>
jmp    804c2fb <rewinddir@plt+0x2bdb>
mov    0x8(%esi),%ebp
mov    0x8053420,%eax
mov    %ecx,0x10(%esp)
movl   $0x80501dd,0x8(%esp)
mov    %ebp,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049640 <__fprintf_chk@plt>
cmp    %ebp,%edi
mov    0x2c(%esp),%eax
cmovb  %ebp,%edi
jmp    804c3b1 <rewinddir@plt+0x2c91>
xchg   %ax,%ax
xor    %ecx,%ecx
jmp    804c466 <rewinddir@plt+0x2d46>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c,%esp
mov    0x4(%eax),%eax
mov    0x40(%esp),%esi
mov    0x44(%esp),%ebp
mov    %ecx,0x1c(%esp)
mov    (%eax,%edx,4),%edi
movl   $0x0,0x4(%esp)
mov    %ebp,0x8(%esp)
mov    %esi,(%esp)
call   80494f0 <memset@plt>
test   %edi,%edi
mov    0x1c(%esp),%ecx
je     804c5e0 <rewinddir@plt+0x2ec0>
testb  $0x40,(%ecx)
je     804c5b8 <rewinddir@plt+0x2e98>
mov    0x28(%ebx),%eax
test   %eax,%eax
je     804c598 <rewinddir@plt+0x2e78>
lea    0x44(%esp),%ecx
mov    %esi,%edx
call   804c200 <rewinddir@plt+0x2ae0>
test   %eax,%eax
je     804c5e0 <rewinddir@plt+0x2ec0>
mov    (%ebx),%edx
mov    0x20(%edx),%ecx
mov    0x28(%ebx),%edx
test   %edx,%edx
je     804c5e4 <rewinddir@plt+0x2ec4>
add    $0x20,%ebx
cmp    %ebx,0x1c(%edx)
mov    %edi,0x18(%esp)
je     804c5d8 <rewinddir@plt+0x2eb8>
mov    (%ecx),%edx
mov    %edx,0x14(%esp)
mov    0x44(%esp),%edx
movl   $0x80501e6,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %esi,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %esi,%eax
mov    %edi,0xc(%esp)
movl   $0x804f86a,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049500 <snprintf@plt>
mov    %esi,%eax
jmp    804c58a <rewinddir@plt+0x2e6a>
xchg   %ax,%ax
mov    %ebp,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
call   8049530 <strncpy@plt>
mov    %esi,%eax
movb   $0x0,-0x1(%esi,%ebp,1)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x8(%ecx),%edx
jmp    804c55c <rewinddir@plt+0x2e3c>
xor    %eax,%eax
jmp    804c58a <rewinddir@plt+0x2e6a>
mov    0x44(%esp),%ebp
jmp    804c59a <rewinddir@plt+0x2e7a>
lea    0x0(%esi),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%eax),%eax
mov    0x10(%eax),%ebx
add    $0x10,%eax
cmp    %eax,%ebx
je     804c63b <rewinddir@plt+0x2f1b>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x18(%ebx),%edx
lea    -0x4(%ebx),%ecx
mov    %esi,%eax
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   804c4e0 <rewinddir@plt+0x2dc0>
lea    -0x1c(%ebx),%edx
mov    %eax,%ecx
mov    (%esi),%eax
call   804c290 <rewinddir@plt+0x2b70>
mov    (%esi),%eax
mov    (%ebx),%ebx
add    $0x10,%eax
cmp    %eax,%ebx
jne    804c610 <rewinddir@plt+0x2ef0>
mov    0x8053420,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   80495f0 <fputc@plt>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %ecx,%ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0xc,%esp
call   804c5f0 <rewinddir@plt+0x2ed0>
lea    0x18(%ebx),%esi
mov    0x18(%ebx),%ebx
cmp    %ebx,%esi
je     804c692 <rewinddir@plt+0x2f72>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x20(%ebx),%eax
mov    %ebp,%ecx
mov    %edi,%edx
call   804c660 <rewinddir@plt+0x2f40>
mov    (%ebx),%ebx
cmp    %ebx,%esi
jne    804c680 <rewinddir@plt+0x2f60>
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0xc(%eax),%eax
test   %eax,%eax
je     804c721 <rewinddir@plt+0x3001>
testb  $0x18,0x8(%edi)
jne    804c721 <rewinddir@plt+0x3001>
lea    0x18(%edi),%eax
cmp    %eax,0x18(%edi)
je     804c721 <rewinddir@plt+0x3001>
mov    0x10(%edi),%ebx
lea    0x10(%edi),%eax
mov    %ecx,%ebp
mov    %edx,%esi
mov    %eax,0x18(%esp)
lea    -0x1(%edx,%ecx,1),%ecx
cmp    %eax,%ebx
je     804c70c <rewinddir@plt+0x2fec>
mov    %edi,0x1c(%esp)
mov    %ecx,%edi
lea    0x0(%esi),%esi
mov    %ebp,0x8(%esp)
mov    -0x1c(%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   8049530 <strncpy@plt>
mov    0x1c(%esp),%eax
lea    -0x1c(%ebx),%edx
movb   $0x0,(%edi)
mov    %esi,%ecx
call   804c290 <rewinddir@plt+0x2b70>
mov    (%ebx),%ebx
cmp    %ebx,0x18(%esp)
jne    804c6e0 <rewinddir@plt+0x2fc0>
mov    0x8053420,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   80495f0 <fputc@plt>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
movl   $0x24,0x4(%esp)
mov    0x20(%esp),%esi
movl   $0x1,(%esp)
call   8049710 <calloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804c7b0 <rewinddir@plt+0x3090>
mov    %esi,0x8(%eax)
lea    0x18(%eax),%eax
and    $0x4,%esi
mov    %eax,0x18(%ebx)
mov    %eax,0x1c(%ebx)
lea    0x10(%ebx),%eax
mov    %eax,0x10(%ebx)
mov    %eax,0x14(%ebx)
je     804c788 <rewinddir@plt+0x3068>
movl   $0x805021c,0x20(%ebx)
movl   $0x1,0xc(%ebx)
mov    %ebx,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
movl   $0xe,(%esp)
mov    $0x80501eb,%edi
call   80495c0 <nl_langinfo@plt>
mov    $0x6,%ecx
mov    %eax,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804c76e <rewinddir@plt+0x304e>
movl   $0x8050210,0x20(%ebx)
jmp    804c775 <rewinddir@plt+0x3055>
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804c77e <rewinddir@plt+0x305e>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
test   %esi,%esi
je     804c7ff <rewinddir@plt+0x30df>
mov    0x18(%esi),%ebx
lea    0x18(%esi),%edi
cmp    %ebx,%edi
je     804c7ff <rewinddir@plt+0x30df>
mov    (%ebx),%edx
sub    $0x10,%ebx
mov    0x14(%ebx),%eax
mov    %eax,0x4(%edx)
mov    %edx,(%eax)
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    %ebx,(%esp)
call   8049240 <free@plt>
mov    0x18(%esi),%ebx
cmp    %edi,%ebx
jne    804c7d8 <rewinddir@plt+0x30b8>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804c860 <rewinddir@plt+0x3140>
mov    %ebx,(%esp)
lea    0x10(%ebx),%esi
call   804c7c0 <rewinddir@plt+0x30a0>
mov    0x10(%ebx),%eax
cmp    %eax,%esi
je     804c84c <rewinddir@plt+0x312c>
nop
mov    (%eax),%ecx
sub    $0x1c,%eax
mov    0x20(%eax),%edx
mov    %edx,0x4(%ecx)
mov    %ecx,(%edx)
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x10(%ebx),%eax
cmp    %esi,%eax
jne    804c830 <rewinddir@plt+0x3110>
mov    %ebx,0x20(%esp)
add    $0x14,%esp
pop    %ebx
pop    %esi
jmp    8049240 <free@plt>
lea    0x0(%esi),%esi
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%ebx
fldl   0x28(%esp)
mov    0x30(%esp),%esi
test   %ebx,%ebx
je     804c8e8 <rewinddir@plt+0x31c8>
movl   $0x24,0x4(%esp)
fstpl  0x8(%esp)
movl   $0x1,(%esp)
call   8049710 <calloc@plt>
test   %eax,%eax
je     804c8ea <rewinddir@plt+0x31ca>
mov    0x24(%esp),%edx
mov    %esi,0x18(%eax)
fldl   0x8(%esp)
and    $0x40,%esi
fstpl  0x10(%eax)
mov    %edx,(%eax)
mov    (%ebx),%edx
lea    0x1(%edx),%ecx
mov    %ecx,(%ebx)
mov    %edx,0x4(%eax)
jne    804c8e0 <rewinddir@plt+0x31c0>
lea    0x1c(%eax),%edx
add    $0x10,%ebx
mov    %edx,0x20(%eax)
mov    0x4(%ebx),%ecx
mov    %edx,0x4(%ebx)
mov    %ebx,0x1c(%eax)
mov    %ecx,0x20(%eax)
mov    %edx,(%ecx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
orl    $0x40,0x8(%ebx)
jmp    804c8c0 <rewinddir@plt+0x31a0>
xchg   %ax,%ax
fstp   %st(0)
xor    %eax,%eax
jmp    804c8d7 <rewinddir@plt+0x31b7>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%esi
mov    0x34(%esp),%edi
test   %esi,%esi
je     804c998 <rewinddir@plt+0x3278>
mov    (%esi),%ebp
test   %ebp,%ebp
je     804c998 <rewinddir@plt+0x3278>
movl   $0x2c,0x4(%esp)
movl   $0x1,(%esp)
call   8049710 <calloc@plt>
test   %eax,%eax
mov    %eax,%ebx
mov    %eax,0xc(%esp)
je     804c998 <rewinddir@plt+0x3278>
movl   $0x4,0x4(%esp)
mov    %ebp,(%esp)
call   8049710 <calloc@plt>
test   %eax,%eax
mov    %eax,0x4(%ebx)
je     804c9a0 <rewinddir@plt+0x3280>
lea    0x10(%ebx),%edx
lea    0x18(%ebx),%ecx
lea    0x20(%ebx),%eax
mov    %edx,0x14(%ebx)
mov    %eax,0x24(%ebx)
mov    %ecx,0x18(%ebx)
mov    %ecx,0x1c(%ebx)
mov    0x1c(%esi),%ecx
mov    %esi,(%ebx)
add    $0x18,%esi
mov    %edi,0x28(%ebx)
mov    %eax,0x20(%ebx)
mov    %edx,0x4(%esi)
test   %edi,%edi
mov    %esi,0x10(%ebx)
mov    %ecx,0x14(%ebx)
mov    %edx,(%ecx)
je     804c9b8 <rewinddir@plt+0x3298>
mov    0x1c(%edi),%edx
add    $0x18,%edi
mov    %eax,0x4(%edi)
mov    %edi,0x20(%ebx)
mov    %edx,0x24(%ebx)
mov    %eax,(%edx)
mov    %ebx,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0xc(%esp)
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    %ebx,%eax
jmp    804c98b <rewinddir@plt+0x326b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    0x8(%esp),%ecx
mov    0x10(%edx),%eax
add    $0x10,%edx
cmp    %edx,%eax
jne    804c9de <rewinddir@plt+0x32be>
jmp    804c9e8 <rewinddir@plt+0x32c8>
lea    0x0(%esi,%eiz,1),%esi
mov    (%eax),%eax
cmp    %edx,%eax
je     804c9e8 <rewinddir@plt+0x32c8>
cmp    %ecx,-0x18(%eax)
jne    804c9d8 <rewinddir@plt+0x32b8>
sub    $0x1c,%eax
ret
nop
xor    %eax,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%ecx
mov    0x38(%esp),%esi
test   %ebx,%ebx
je     804ca70 <rewinddir@plt+0x3350>
mov    (%ebx),%edx
mov    0x10(%edx),%eax
add    $0x10,%edx
cmp    %edx,%eax
jne    804ca1e <rewinddir@plt+0x32fe>
jmp    804ca70 <rewinddir@plt+0x3350>
lea    0x0(%esi),%esi
mov    (%eax),%eax
cmp    %edx,%eax
je     804ca70 <rewinddir@plt+0x3350>
cmp    -0x18(%eax),%ecx
jne    804ca18 <rewinddir@plt+0x32f8>
sub    $0x1c,%eax
test   %eax,%eax
je     804ca70 <rewinddir@plt+0x3350>
mov    0x4(%eax),%edx
mov    0x4(%ebx),%eax
lea    (%eax,%edx,4),%edi
mov    (%edi),%eax
test   %eax,%eax
je     804ca52 <rewinddir@plt+0x3332>
mov    %eax,(%esp)
call   80494c0 <strlen@plt>
mov    0xc(%ebx),%ecx
xor    %edx,%edx
mov    %ecx,%ebp
sub    %eax,%ebp
cmp    %ecx,%eax
cmovb  %ebp,%edx
mov    %edx,0xc(%ebx)
test   %esi,%esi
mov    %esi,(%edi)
je     804ca7d <rewinddir@plt+0x335d>
mov    %esi,(%esp)
call   80494c0 <strlen@plt>
add    %eax,0xc(%ebx)
add    $0x1c,%esp
pop    %ebx
xor    %eax,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
test   %eax,%eax
je     804caa2 <rewinddir@plt+0x3382>
mov    0x8(%esp),%edx
mov    %edx,0x8(%eax)
xor    %eax,%eax
ret
mov    $0xffffffff,%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x70(%esp),%ebx
test   %ebx,%ebx
je     804cf68 <rewinddir@plt+0x3848>
mov    0x70(%esp),%eax
mov    0xc(%eax),%ecx
test   %ecx,%ecx
jne    804cb90 <rewinddir@plt+0x3470>
mov    0x4(%eax),%ecx
mov    0x70(%esp),%eax
mov    0x18(%eax),%esi
lea    0x18(%eax),%ebp
cmp    %ebp,%esi
je     804cf00 <rewinddir@plt+0x37e0>
mov    %esi,%eax
mov    %ecx,%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    -0x4(%eax),%edx
mov    (%eax),%eax
cmp    %edx,%ebx
cmovb  %edx,%ebx
cmp    %ebp,%eax
jne    804caf0 <rewinddir@plt+0x33d0>
mov    %ebx,(%esp)
mov    %ecx,0x18(%esp)
call   8049420 <malloc@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
je     804cf68 <rewinddir@plt+0x3848>
mov    0x70(%esp),%eax
mov    0x18(%esp),%ecx
mov    0xc(%eax),%edx
test   %edx,%edx
je     804cb2f <rewinddir@plt+0x340f>
testb  $0x12,0x8(%eax)
je     804cc43 <rewinddir@plt+0x3523>
mov    0x70(%esp),%eax
mov    %ebx,%ecx
testb  $0x40,0x8(%eax)
je     804cbf8 <rewinddir@plt+0x34d8>
mov    0x1c(%esp),%edx
call   804c6a0 <rewinddir@plt+0x2f80>
mov    0x70(%esp),%eax
mov    0x18(%eax),%esi
cmp    %ebp,%esi
je     804cb69 <rewinddir@plt+0x3449>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esi),%eax
test   %eax,%eax
je     804cc30 <rewinddir@plt+0x3510>
mov    (%esi),%esi
cmp    %ebp,%esi
jne    804cb58 <rewinddir@plt+0x3438>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    0x70(%esp),%eax
movl   $0x0,0xc(%eax)
xor    %eax,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x70(%esp),%eax
mov    0x4(%eax),%eax
test   %eax,%eax
mov    %eax,%ecx
mov    %eax,0x18(%esp)
jne    804cad5 <rewinddir@plt+0x33b5>
lea    0x48(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x5413,0x4(%esp)
movl   $0x0,(%esp)
call   8049370 <ioctl@plt>
test   %eax,%eax
jne    804cf37 <rewinddir@plt+0x3817>
movzwl 0x4a(%esp),%eax
mov    0x70(%esp),%edi
test   %eax,%eax
mov    %eax,%ecx
mov    %eax,0x4(%edi)
jne    804cad5 <rewinddir@plt+0x33b5>
mov    0x70(%esp),%eax
mov    $0x50,%ecx
movl   $0x50,0x4(%eax)
jmp    804cad5 <rewinddir@plt+0x33b5>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%edi
mov    0x70(%esp),%eax
mov    %edi,%edx
call   804c6a0 <rewinddir@plt+0x2f80>
mov    0x70(%esp),%eax
mov    0x18(%eax),%esi
cmp    %ebp,%esi
je     804cb69 <rewinddir@plt+0x3449>
xchg   %ax,%ax
lea    -0x10(%esi),%eax
mov    %ebx,%ecx
mov    %edi,%edx
call   804c5f0 <rewinddir@plt+0x2ed0>
mov    (%esi),%esi
cmp    %ebp,%esi
jne    804cc18 <rewinddir@plt+0x34f8>
jmp    804cb69 <rewinddir@plt+0x3449>
nop
mov    0x1c(%esp),%edx
lea    -0x10(%esi),%eax
mov    %ebx,%ecx
call   804c660 <rewinddir@plt+0x2f40>
jmp    804cb63 <rewinddir@plt+0x3443>
mov    0x10(%eax),%edi
add    $0x10,%eax
mov    %eax,0x20(%esp)
cmp    %eax,%edi
je     804cf72 <rewinddir@plt+0x3852>
mov    %ebp,0x18(%esp)
mov    0x1c(%esp),%ebp
lea    0x0(%esi),%esi
cmp    0x18(%esp),%esi
lea    -0x4(%edi),%eax
mov    %eax,0x10(%esp)
je     804ccb2 <rewinddir@plt+0x3592>
lea    0x0(%esi),%esi
mov    -0x18(%edi),%edx
lea    -0x10(%esi),%eax
mov    0x10(%esp),%ecx
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   804c4e0 <rewinddir@plt+0x2dc0>
test   %eax,%eax
je     804ccaa <rewinddir@plt+0x358a>
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049600 <mbstowcs@plt>
cmp    -0x14(%edi),%eax
jbe    804ccaa <rewinddir@plt+0x358a>
mov    %eax,-0x14(%edi)
mov    (%esi),%esi
cmp    0x18(%esp),%esi
jne    804cc70 <rewinddir@plt+0x3550>
mov    (%edi),%edi
cmp    0x20(%esp),%edi
je     804ccc3 <rewinddir@plt+0x35a3>
mov    0x70(%esp),%eax
mov    0x18(%eax),%esi
jmp    804cc60 <rewinddir@plt+0x3540>
mov    0x70(%esp),%eax
mov    0x18(%esp),%ebp
mov    0x10(%eax),%esi
cmp    0x20(%esp),%esi
je     804cf81 <rewinddir@plt+0x3861>
xor    %edi,%edi
mov    %ebx,0x18(%esp)
mov    %ebp,0x10(%esp)
jmp    804cd09 <rewinddir@plt+0x35e9>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,-0x3(%esi)
jne    804cd32 <rewinddir@plt+0x3612>
mov    %eax,-0x14(%esi)
mov    0x70(%esp),%ebx
xor    %edx,%edx
cmp    %esi,0x14(%ebx)
mov    (%esi),%esi
setne  %dl
add    %edx,%eax
add    %eax,%edi
cmp    0x20(%esp),%esi
je     804cd85 <rewinddir@plt+0x3665>
mov    -0x1c(%esi),%eax
test   %eax,%eax
je     804cd80 <rewinddir@plt+0x3660>
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049600 <mbstowcs@plt>
mov    %eax,-0x10(%esi)
mov    -0x14(%esi),%edx
cmp    %eax,%edx
jb     804cce8 <rewinddir@plt+0x35c8>
fldl   -0xc(%esi)
fld1
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     804cd70 <rewinddir@plt+0x3650>
fnstcw 0x36(%esp)
movzwl 0x36(%esp),%ecx
mov    $0xc,%ch
mov    %cx,0x34(%esp)
fldcw  0x34(%esp)
fistpll 0x38(%esp)
fldcw  0x36(%esp)
mov    0x38(%esp),%ecx
cmp    %ecx,%edx
jae    804cd72 <rewinddir@plt+0x3652>
cmp    %eax,%ecx
jbe    804cd72 <rewinddir@plt+0x3652>
mov    %ecx,-0x14(%esi)
mov    %ecx,%eax
jmp    804ccf1 <rewinddir@plt+0x35d1>
xchg   %ax,%ax
fstp   %st(0)
mov    %edx,%eax
jmp    804ccf1 <rewinddir@plt+0x35d1>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x10(%esi),%eax
jmp    804cd2b <rewinddir@plt+0x360b>
mov    0x70(%esp),%eax
mov    0x10(%esp),%ebp
mov    0x18(%esp),%ebx
mov    %edi,0x18(%esp)
mov    0x4(%eax),%edx
cmp    %edx,0x18(%esp)
je     804cb2f <rewinddir@plt+0x340f>
jb     804cf07 <rewinddir@plt+0x37e7>
jbe    804cb2f <rewinddir@plt+0x340f>
mov    0x70(%esp),%eax
mov    %edx,%esi
mov    %edx,0x28(%esp)
mov    0x20(%esp),%edi
fld1
movl   $0x0,0x2c(%esp)
mov    %ebx,0x30(%esp)
mov    0x10(%eax),%eax
mov    %ebp,0x20(%esp)
mov    %eax,0x24(%esp)
mov    $0x1,%eax
mov    %eax,%edx
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%esp),%ecx
mov    0x18(%esp),%ebx
cmp    %edi,%ecx
je     804cef8 <rewinddir@plt+0x37d8>
cmp    %esi,%ebx
jbe    804ceed <rewinddir@plt+0x37cd>
mov    %edx,%eax
xor    $0x1,%eax
and    $0x1,%eax
fld    %st(0)
mov    %eax,%ebp
jmp    804ce62 <rewinddir@plt+0x3742>
xchg   %ax,%ax
fld1
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804ce58 <rewinddir@plt+0x3738>
mov    -0x14(%ecx),%eax
test   %eax,%eax
mov    %eax,0x10(%esp)
je     804ce58 <rewinddir@plt+0x3738>
test   %ebx,%ebx
je     804ce58 <rewinddir@plt+0x3738>
mov    %ebp,%eax
test   %al,%al
je     804ce58 <rewinddir@plt+0x3738>
mov    0x10(%esp),%eax
sub    $0x1,%ebx
sub    $0x1,%eax
mov    %eax,-0x14(%ecx)
jmp    804ce58 <rewinddir@plt+0x3738>
xchg   %ax,%ax
fstp   %st(0)
jmp    804ce58 <rewinddir@plt+0x3738>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
jmp    804ce58 <rewinddir@plt+0x3738>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
jmp    804ce58 <rewinddir@plt+0x3738>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
mov    (%ecx),%ecx
cmp    %edi,%ecx
je     804ced0 <rewinddir@plt+0x37b0>
cmp    %esi,%ebx
jbe    804ced8 <rewinddir@plt+0x37b8>
fldl   -0xc(%ecx)
fucomi %st(1),%st
mov    -0x4(%ecx),%eax
jbe    804ce70 <rewinddir@plt+0x3750>
test   $0x20,%al
je     804ce38 <rewinddir@plt+0x3718>
test   $0x40,%al
jne    804ce40 <rewinddir@plt+0x3720>
test   %edx,%edx
je     804ce7c <rewinddir@plt+0x375c>
test   $0x20,%al
je     804ce48 <rewinddir@plt+0x3728>
mov    -0x14(%ecx),%eax
cmp    -0x10(%ecx),%eax
je     804ce50 <rewinddir@plt+0x3730>
fld1
fucomip %st(1),%st
jbe    804ce08 <rewinddir@plt+0x36e8>
test   %eax,%eax
je     804ce08 <rewinddir@plt+0x36e8>
test   %ebx,%ebx
je     804ce08 <rewinddir@plt+0x36e8>
mov    %eax,0x10(%esp)
movl   $0x0,0x14(%esp)
fildll 0x10(%esp)
fildll 0x28(%esp)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804ce08 <rewinddir@plt+0x36e8>
sub    $0x1,%eax
sub    $0x1,%ebx
mov    %eax,-0x14(%ecx)
jmp    804ce08 <rewinddir@plt+0x36e8>
xchg   %ax,%ax
fstp   %st(0)
jmp    804ceda <rewinddir@plt+0x37ba>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
cmp    0x18(%esp),%ebx
je     804cef8 <rewinddir@plt+0x37d8>
cmp    %esi,%ebx
jbe    804cf24 <rewinddir@plt+0x3804>
mov    %ebx,0x18(%esp)
jmp    804cde0 <rewinddir@plt+0x36c0>
mov    0x18(%esp),%ebx
lea    0x0(%esi,%eiz,1),%esi
test   %edx,%edx
je     804cf28 <rewinddir@plt+0x3808>
xor    %edx,%edx
jmp    804cee0 <rewinddir@plt+0x37c0>
mov    %ecx,%ebx
jmp    804cafe <rewinddir@plt+0x33de>
mov    0x70(%esp),%eax
mov    0x14(%eax),%eax
testb  $0x80,-0x4(%eax)
jne    804cb2f <rewinddir@plt+0x340f>
sub    0x18(%esp),%edx
add    %edx,-0x14(%eax)
jmp    804cb2f <rewinddir@plt+0x340f>
fstp   %st(0)
jmp    804cf2a <rewinddir@plt+0x380a>
fstp   %st(0)
mov    0x30(%esp),%ebx
mov    0x20(%esp),%ebp
jmp    804cb2f <rewinddir@plt+0x340f>
movl   $0x804f896,(%esp)
call   8049400 <getenv@plt>
test   %eax,%eax
je     804cbdf <rewinddir@plt+0x34bf>
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049680 <strtol@plt>
jmp    804cbce <rewinddir@plt+0x34ae>
mov    $0xffffffff,%eax
jmp    804cb82 <rewinddir@plt+0x3462>
mov    %ecx,%edx
movl   $0x0,0x18(%esp)
jmp    804cd98 <rewinddir@plt+0x3678>
mov    0x4(%eax),%edx
movl   $0x0,0x18(%esp)
jmp    804cd98 <rewinddir@plt+0x3678>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
mov    (%eax),%ecx
test   %ecx,%ecx
je     804cff7 <rewinddir@plt+0x38d7>
mov    %edx,%edi
xor    %esi,%esi
jmp    804cfc9 <rewinddir@plt+0x38a9>
lea    0x0(%esi,%eiz,1),%esi
add    %esi,%eax
cmp    %edi,%eax
ja     804cfe8 <rewinddir@plt+0x38c8>
add    $0x4,%ebx
mov    (%ebx),%ecx
mov    %eax,%esi
test   %ecx,%ecx
je     804cfe8 <rewinddir@plt+0x38c8>
mov    %ecx,(%esp)
call   8049220 <wcwidth@plt>
cmp    $0xffffffff,%eax
jne    804cfb8 <rewinddir@plt+0x3898>
mov    $0x1,%eax
add    %esi,%eax
cmp    %edi,%eax
movl   $0xfffd,(%ebx)
jbe    804cfbe <rewinddir@plt+0x389e>
nop
movl   $0x0,(%ebx)
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xor    %esi,%esi
jmp    804cfe8 <rewinddir@plt+0x38c8>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    %ebx,(%esp)
call   80494c0 <strlen@plt>
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049600 <mbstowcs@plt>
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804d05f <rewinddir@plt+0x393f>
lea    0x4(,%eax,4),%eax
mov    %eax,(%esp)
call   8049420 <malloc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804d05f <rewinddir@plt+0x393f>
mov    %ebp,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049600 <mbstowcs@plt>
test   %eax,%eax
jne    804d080 <rewinddir@plt+0x3960>
mov    %edi,(%esp)
call   8049240 <free@plt>
test   %esi,%esi
js     804d06f <rewinddir@plt+0x394f>
movb   $0x0,(%ebx,%esi,1)
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x34(%esp),%eax
mov    (%eax),%edx
mov    %edi,%eax
call   804cfa0 <rewinddir@plt+0x3880>
mov    0x34(%esp),%ecx
mov    %eax,(%ecx)
mov    %esi,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %ebx,(%esp)
call   80493d0 <wcstombs@plt>
mov    %eax,%esi
jmp    804d05f <rewinddir@plt+0x393f>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    0x44(%esp),%ebx
mov    %eax,(%esp)
call   80494c0 <strlen@plt>
mov    %eax,%ebp
mov    %eax,0x18(%esp)
call   80493a0 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804d258 <rewinddir@plt+0x3b38>
mov    0x40(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049600 <mbstowcs@plt>
cmp    $0xffffffff,%eax
mov    %eax,%edi
je     804d240 <rewinddir@plt+0x3b20>
lea    0x1(%eax),%edx
lea    0x0(,%edx,4),%esi
mov    %esi,(%esp)
mov    %edx,0x1c(%esp)
call   8049420 <malloc@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
mov    %eax,0x14(%esp)
je     804d415 <rewinddir@plt+0x3cf5>
mov    0x40(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049600 <mbstowcs@plt>
test   %eax,%eax
jne    804d2b0 <rewinddir@plt+0x3b90>
mov    0x18(%esp),%esi
xor    %edi,%edi
mov    0x4c(%esp),%eax
mov    (%eax),%ecx
cmp    %ecx,%esi
jbe    804d26a <rewinddir@plt+0x3b4a>
mov    %ecx,%esi
xor    %edx,%edx
mov    0x4c(%esp),%eax
mov    %esi,(%eax)
mov    0x48(%esp),%eax
lea    (%ecx,%edx,1),%esi
test   %eax,%eax
je     804d21c <rewinddir@plt+0x3afc>
mov    0x48(%esp),%eax
lea    -0x1(%ebx,%eax,1),%ebp
mov    0x50(%esp),%eax
test   %eax,%eax
je     804d3d0 <rewinddir@plt+0x3cb0>
cmpl   $0x1,0x50(%esp)
je     804d280 <rewinddir@plt+0x3b60>
mov    %edx,%eax
and    $0x1,%edx
shr    %eax
mov    %eax,0x18(%esp)
add    %eax,%edx
sub    $0x1,%eax
mov    %eax,0x1c(%esp)
test   %edx,%edx
lea    -0x1(%edx),%eax
je     804d1ca <rewinddir@plt+0x3aaa>
cmp    %ebp,%ebx
jae    804d1ca <rewinddir@plt+0x3aaa>
xor    %edx,%edx
jmp    804d1bf <rewinddir@plt+0x3a9f>
nop
add    $0x1,%edx
cmp    %ebp,%ebx
je     804d1ca <rewinddir@plt+0x3aaa>
add    $0x1,%ebx
cmp    %edx,%eax
movb   $0x20,-0x1(%ebx)
jne    804d1b8 <rewinddir@plt+0x3a98>
mov    %ebp,%eax
sub    %ebx,%eax
cmp    %ecx,%eax
cmovbe %eax,%ecx
mov    0x40(%esp),%eax
movb   $0x0,(%ebx)
mov    %ecx,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049570 <mempcpy@plt>
mov    0x18(%esp),%ecx
test   %ecx,%ecx
mov    %eax,%edx
je     804d219 <rewinddir@plt+0x3af9>
cmp    %eax,%ebp
jbe    804d219 <rewinddir@plt+0x3af9>
mov    0x1c(%esp),%ebx
lea    0x1(%eax),%ecx
add    $0x1,%ebp
lea    0x1(%ebx,%eax,1),%eax
jmp    804d20f <rewinddir@plt+0x3aef>
add    $0x1,%ecx
cmp    %ebp,%ecx
je     804d219 <rewinddir@plt+0x3af9>
cmp    %eax,%ecx
mov    %ecx,%edx
movb   $0x20,-0x1(%ecx)
jne    804d208 <rewinddir@plt+0x3ae8>
movb   $0x0,(%edx)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
mov    %edi,(%esp)
call   8049240 <free@plt>
add    $0x2c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
testb  $0x1,0x54(%esp)
jne    804d298 <rewinddir@plt+0x3b78>
movl   $0x0,0x14(%esp)
xor    %edi,%edi
mov    $0xffffffff,%esi
jmp    804d21c <rewinddir@plt+0x3afc>
movl   $0x0,0x14(%esp)
jmp    804d148 <rewinddir@plt+0x3a28>
lea    0x0(%esi),%esi
xor    %edi,%edi
cmp    %ecx,%esi
jae    804d445 <rewinddir@plt+0x3d25>
mov    %ecx,%edx
mov    %ebp,%ecx
sub    %esi,%edx
jmp    804d160 <rewinddir@plt+0x3a40>
lea    0x0(%esi),%esi
movl   $0xffffffff,0x1c(%esp)
movl   $0x0,0x18(%esp)
jmp    804d1a8 <rewinddir@plt+0x3a88>
lea    0x0(%esi),%esi
mov    %ebp,%esi
xor    %edi,%edi
movl   $0x0,0x14(%esp)
jmp    804d14e <rewinddir@plt+0x3a2e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%eax
movl   $0x0,-0x4(%eax,%esi,1)
mov    %eax,%esi
mov    (%eax),%eax
test   %eax,%eax
je     804d434 <rewinddir@plt+0x3d14>
xor    %edx,%edx
mov    %ebx,0x44(%esp)
mov    %esi,%ebx
mov    %edx,%esi
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049350 <iswprint@plt>
test   %eax,%eax
jne    804d2ef <rewinddir@plt+0x3bcf>
movl   $0xfffd,(%ebx)
mov    $0x1,%esi
add    $0x4,%ebx
mov    (%ebx),%eax
test   %eax,%eax
jne    804d2d8 <rewinddir@plt+0x3bb8>
mov    0x44(%esp),%ebx
mov    %esi,%eax
mov    %al,0x1c(%esp)
mov    0x14(%esp),%esi
mov    (%esi),%eax
test   %eax,%eax
je     804d43e <rewinddir@plt+0x3d1e>
xor    %edx,%edx
mov    %ebx,0x44(%esp)
mov    %edi,%ebx
mov    %edx,%edi
jmp    804d343 <rewinddir@plt+0x3c23>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x7fffffff,%ecx
sub    %eax,%ecx
cmp    %ecx,%edi
jg     804d353 <rewinddir@plt+0x3c33>
sub    $0x1,%ebx
add    %eax,%edi
cmp    $0xffffffff,%ebx
je     804d429 <rewinddir@plt+0x3d09>
mov    (%esi),%eax
test   %eax,%eax
je     804d429 <rewinddir@plt+0x3d09>
mov    %eax,(%esp)
add    $0x4,%esi
call   8049220 <wcwidth@plt>
cmp    $0xffffffff,%eax
jne    804d320 <rewinddir@plt+0x3c00>
mov    0x44(%esp),%ebx
mov    $0xffffffff,%esi
cmpb   $0x0,0x1c(%esp)
je     804d3e0 <rewinddir@plt+0x3cc0>
mov    0x14(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80493d0 <wcstombs@plt>
add    $0x1,%eax
mov    %eax,0x18(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049420 <malloc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804d400 <rewinddir@plt+0x3ce0>
mov    0x4c(%esp),%eax
mov    0x14(%esp),%ebp
mov    (%eax),%edx
mov    %ebp,%eax
call   804cfa0 <rewinddir@plt+0x3880>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,%esi
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
call   80493d0 <wcstombs@plt>
mov    %edi,0x40(%esp)
mov    %eax,%ebp
jmp    804d14e <rewinddir@plt+0x3a2e>
lea    0x0(%esi),%esi
lea    -0x1(%edx),%eax
mov    %eax,0x1c(%esp)
mov    %edx,0x18(%esp)
jmp    804d1ca <rewinddir@plt+0x3aaa>
mov    0x4c(%esp),%eax
mov    (%eax),%ecx
cmp    %esi,%ecx
jae    804d268 <rewinddir@plt+0x3b48>
mov    0x18(%esp),%eax
add    $0x1,%eax
mov    %eax,0x18(%esp)
jmp    804d386 <rewinddir@plt+0x3c66>
nop
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x54(%esp)
jne    804d14e <rewinddir@plt+0x3a2e>
mov    $0xffffffff,%esi
jmp    804d21c <rewinddir@plt+0x3afc>
testb  $0x1,0x54(%esp)
je     804d247 <rewinddir@plt+0x3b27>
mov    %ebp,%esi
xor    %edi,%edi
jmp    804d14e <rewinddir@plt+0x3a2e>
mov    0x44(%esp),%ebx
mov    %edi,%esi
jmp    804d35c <rewinddir@plt+0x3c3c>
movb   $0x0,0x1c(%esp)
jmp    804d302 <rewinddir@plt+0x3be2>
xor    %esi,%esi
jmp    804d35c <rewinddir@plt+0x3c3c>
mov    %ebp,%ecx
xor    %edx,%edx
jmp    804d160 <rewinddir@plt+0x3a40>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
mov    0x54(%esp),%eax
test   %esi,%esi
movl   $0x0,(%eax)
movl   $0x0,0x4(%eax)
je     804d56a <rewinddir@plt+0x3e4a>
movzbl (%esi),%ebx
test   %bl,%bl
je     804d56a <rewinddir@plt+0x3e4a>
mov    %esi,0x2c(%esp)
call   8049700 <__ctype_b_loc@plt>
mov    (%eax),%edi
lea    0x1(%esi),%eax
jmp    804d49b <rewinddir@plt+0x3d7b>
nop
mov    %eax,0x2c(%esp)
add    $0x1,%eax
movzbl -0x1(%eax),%ebx
movzbl %bl,%edx
testb  $0x20,0x1(%edi,%edx,2)
jne    804d490 <rewinddir@plt+0x3d70>
cmp    $0x2d,%bl
je     804d56a <rewinddir@plt+0x3e4a>
movl   $0x0,0x2c(%esp)
call   8049520 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%edi
lea    0x2c(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %esi,(%esp)
call   80492a0 <__strtoull_internal@plt>
mov    0x2c(%esp),%ecx
cmp    %esi,%ecx
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
je     804d56a <rewinddir@plt+0x3e4a>
mov    (%edi),%ebx
test   %ebx,%ebx
je     804d510 <rewinddir@plt+0x3df0>
add    $0xffffffff,%eax
adc    $0xffffffff,%edx
cmp    $0xffffffff,%edx
jb     804d510 <rewinddir@plt+0x3df0>
cmp    $0xfffffffd,%eax
ja     804d56a <rewinddir@plt+0x3e4a>
lea    0x0(%esi,%eiz,1),%esi
test   %ecx,%ecx
je     804d51b <rewinddir@plt+0x3dfb>
movzbl (%ecx),%eax
test   %al,%al
jne    804d538 <rewinddir@plt+0x3e18>
xor    %eax,%eax
mov    0x54(%esp),%esi
mov    0x14(%esp),%ebx
mov    0x10(%esp),%ecx
mov    %ebx,0x4(%esi)
mov    %ecx,(%esi)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
movzbl 0x1(%ecx),%edx
cmp    $0x69,%dl
je     804d560 <rewinddir@plt+0x3e40>
cmp    $0x42,%dl
je     804d577 <rewinddir@plt+0x3e57>
test   %dl,%dl
jne    804d56a <rewinddir@plt+0x3e4a>
mov    $0x400,%esi
sub    $0x45,%eax
cmp    $0x2f,%al
ja     804d56a <rewinddir@plt+0x3e4a>
movzbl %al,%eax
jmp    *0x8050228(,%eax,4)
cmpb   $0x42,0x2(%ecx)
je     804da65 <rewinddir@plt+0x4345>
add    $0x3c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x2(%ecx)
jne    804d56a <rewinddir@plt+0x3e4a>
mov    $0x3e8,%esi
jmp    804d54f <rewinddir@plt+0x3e2f>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d5b9 <rewinddir@plt+0x3e99>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x14(%esp),%edx
mov    %ebx,%ebp
mov    0x10(%esp),%eax
mov    %edx,%ecx
imul   %edi,%eax
imul   %esi,%ecx
add    %eax,%ecx
mov    0x10(%esp),%eax
mul    %esi
mov    %eax,0x10(%esp)
mov    $0x6,%eax
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
mov    0x14(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x10(%esp),%eax
cmp    %edx,%ebp
jae    804da75 <rewinddir@plt+0x4355>
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    $0xfffffffe,%eax
jmp    804d51d <rewinddir@plt+0x3dfd>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x18(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d63f <rewinddir@plt+0x3f1f>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    %eax,%ecx
mov    0x10(%esp),%eax
mov    %edx,%ebp
imul   %esi,%ebp
imul   %edi,%ecx
mul    %esi
add    %ebp,%ecx
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
cmp    0x14(%esp),%ebx
mov    %eax,0x10(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
ja     804d677 <rewinddir@plt+0x3f57>
mov    0x10(%esp),%eax
cmp    %eax,0x18(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    %eax,%ecx
mov    0x10(%esp),%eax
mov    %edx,%ebp
imul   %esi,%ebp
imul   %edi,%ecx
mul    %esi
add    %ebp,%ecx
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
cmp    0x14(%esp),%ebx
mov    %eax,0x10(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
ja     804d6b7 <rewinddir@plt+0x3f97>
mov    0x10(%esp),%eax
cmp    %eax,0x18(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    %eax,%ecx
mov    0x10(%esp),%eax
mov    %edx,%ebp
imul   %esi,%ebp
imul   %edi,%ecx
mul    %esi
add    %ebp,%ecx
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
cmp    %ebx,0x14(%esp)
mov    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d6f7 <rewinddir@plt+0x3fd7>
mov    0x18(%esp),%eax
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    %ecx,%eax
mov    %ebx,%edx
imul   %esi,%edx
imul   %edi,%eax
lea    (%eax,%edx,1),%ebp
mov    %ecx,%eax
mul    %esi
mov    %eax,0x10(%esp)
xor    %eax,%eax
mov    %edx,0x14(%esp)
add    %ebp,0x14(%esp)
jmp    804d51d <rewinddir@plt+0x3dfd>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x18(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d760 <rewinddir@plt+0x4040>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    %eax,%ecx
mov    0x10(%esp),%eax
mov    %edx,%ebp
imul   %esi,%ebp
imul   %edi,%ecx
mul    %esi
add    %ebp,%ecx
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
cmp    0x14(%esp),%ebx
mov    %eax,0x10(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
ja     804d7a0 <rewinddir@plt+0x4080>
mov    0x10(%esp),%eax
cmp    %eax,0x18(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    %eax,%ecx
mov    0x10(%esp),%eax
mov    %edx,%ebp
imul   %esi,%ebp
imul   %edi,%ecx
mul    %esi
add    %ebp,%ecx
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
cmp    0x14(%esp),%ebx
mov    %eax,0x10(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
ja     804d6f7 <rewinddir@plt+0x3fd7>
mov    0x10(%esp),%eax
cmp    %eax,0x18(%esp)
jb     804d600 <rewinddir@plt+0x3ee0>
jmp    804d6f7 <rewinddir@plt+0x3fd7>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d826 <rewinddir@plt+0x4106>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x14(%esp),%edx
mov    %ebx,%ebp
mov    0x10(%esp),%eax
mov    %edx,%ecx
imul   %edi,%eax
imul   %esi,%ecx
add    %eax,%ecx
mov    0x10(%esp),%eax
mul    %esi
mov    %eax,0x10(%esp)
mov    $0x5,%eax
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
mov    0x14(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x10(%esp),%eax
cmp    %edx,%ebp
jb     804d5f8 <rewinddir@plt+0x3ed8>
ja     804d871 <rewinddir@plt+0x4151>
cmp    %eax,0x1c(%esp)
jb     804d5f8 <rewinddir@plt+0x3ed8>
mov    %edx,%ebx
mov    %edi,%ecx
imul   %eax,%ecx
imul   %esi,%ebx
mul    %esi
add    %ecx,%ebx
add    %ebx,%edx
subl   $0x1,0x18(%esp)
jne    804d85d <rewinddir@plt+0x413d>
mov    %eax,0x10(%esp)
xor    %eax,%eax
mov    %edx,0x14(%esp)
jmp    804d51d <rewinddir@plt+0x3dfd>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d6f7 <rewinddir@plt+0x3fd7>
jmp    804d6ed <rewinddir@plt+0x3fcd>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%ebp
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d90a <rewinddir@plt+0x41ea>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
mov    %ecx,%eax
mov    %ebx,%edx
imul   %esi,%edx
imul   %edi,%eax
add    %edx,%eax
mov    %eax,0x18(%esp)
mov    %ecx,%eax
mul    %esi
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %edx,0x14(%esp)
add    %eax,0x14(%esp)
mov    $0x7,%eax
mov    0x14(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x10(%esp),%eax
nop
cmp    %edx,%ebp
jb     804d5f8 <rewinddir@plt+0x3ed8>
ja     804d95c <rewinddir@plt+0x423c>
cmp    %eax,0x1c(%esp)
jb     804d5f8 <rewinddir@plt+0x3ed8>
mov    %edx,%ebx
mov    %edi,%ecx
imul   %eax,%ecx
imul   %esi,%ebx
mul    %esi
add    %ecx,%ebx
add    %ebx,%edx
subl   $0x1,0x18(%esp)
jne    804d948 <rewinddir@plt+0x4228>
jmp    804d888 <rewinddir@plt+0x4168>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x1c(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d9b5 <rewinddir@plt+0x4295>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
mov    0x14(%esp),%edx
mov    %ebx,%ebp
mov    0x10(%esp),%eax
mov    %edx,%ecx
imul   %edi,%eax
imul   %esi,%ecx
add    %eax,%ecx
mov    0x10(%esp),%eax
mul    %esi
mov    %eax,0x10(%esp)
mov    $0x4,%eax
mov    %edx,0x14(%esp)
add    %ecx,0x14(%esp)
mov    0x14(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x10(%esp),%eax
cmp    %edx,%ebp
jb     804d5f8 <rewinddir@plt+0x3ed8>
ja     804da00 <rewinddir@plt+0x42e0>
cmp    %eax,0x1c(%esp)
jb     804d5f8 <rewinddir@plt+0x3ed8>
mov    %edx,%ebx
mov    %edi,%ecx
imul   %eax,%ecx
imul   %esi,%ebx
mul    %esi
add    %ecx,%ebx
add    %ebx,%edx
subl   $0x1,0x18(%esp)
jne    804d9ec <rewinddir@plt+0x42cc>
jmp    804d888 <rewinddir@plt+0x4168>
mov    %esi,%edi
sar    $0x1f,%edi
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
cmp    %edx,0x14(%esp)
mov    %eax,0x18(%esp)
mov    %edx,%ebx
ja     804d600 <rewinddir@plt+0x3ee0>
jb     804d7a0 <rewinddir@plt+0x4080>
cmp    %eax,0x10(%esp)
ja     804d600 <rewinddir@plt+0x3ee0>
lea    0x0(%esi),%esi
jmp    804d7a0 <rewinddir@plt+0x4080>
cmpb   $0x0,0x3(%ecx)
je     804d54a <rewinddir@plt+0x3e2a>
nop
jmp    804d56a <rewinddir@plt+0x3e4a>
ja     804da86 <rewinddir@plt+0x4366>
cmp    %eax,0x1c(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
jb     804d5f8 <rewinddir@plt+0x3ed8>
mov    %edx,%ebx
mov    %edi,%ecx
imul   %eax,%ecx
imul   %esi,%ebx
mul    %esi
add    %ecx,%ebx
add    %ebx,%edx
subl   $0x1,0x18(%esp)
jne    804d5f0 <rewinddir@plt+0x3ed0>
jmp    804d888 <rewinddir@plt+0x4168>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%esi
test   %esi,%esi
je     804daf8 <rewinddir@plt+0x43d8>
movzbl (%esi),%ebx
test   %bl,%bl
je     804daf8 <rewinddir@plt+0x43d8>
call   8049700 <__ctype_b_loc@plt>
mov    (%eax),%edx
mov    %esi,%eax
jmp    804dadc <rewinddir@plt+0x43bc>
nop
add    $0x1,%eax
je     804daf8 <rewinddir@plt+0x43d8>
movzbl (%eax),%ebx
test   %bl,%bl
je     804dae3 <rewinddir@plt+0x43c3>
testb  $0x8,0x1(%edx,%ebx,2)
jne    804dad0 <rewinddir@plt+0x43b0>
cmp    %eax,%esi
jae    804daf8 <rewinddir@plt+0x43d8>
cmpb   $0x0,(%eax)
sete   %al
add    $0x4,%esp
movzbl %al,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
add    $0x4,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ecx
mov    0x10(%esp),%eax
mov    0x18(%esp),%edx
test   %ecx,%ecx
lea    -0x1(%ecx),%edi
je     804db3f <rewinddir@plt+0x441f>
movzbl (%eax),%ecx
test   %cl,%cl
je     804db3f <rewinddir@plt+0x441f>
cmp    %dl,%cl
mov    %edx,%esi
je     804db41 <rewinddir@plt+0x4421>
xor    %edx,%edx
jmp    804db38 <rewinddir@plt+0x4418>
nop
movzbl (%eax),%ecx
test   %cl,%cl
je     804db3f <rewinddir@plt+0x441f>
mov    %esi,%ebx
add    $0x1,%edx
cmp    %bl,%cl
je     804db41 <rewinddir@plt+0x4421>
add    $0x1,%eax
cmp    %edi,%edx
jne    804db28 <rewinddir@plt+0x4408>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
movl   $0x0,0x1c(%esp)
test   %ebx,%ebx
je     804db6a <rewinddir@plt+0x444a>
cmpb   $0x0,(%ebx)
jne    804db98 <rewinddir@plt+0x4478>
call   8049520 <__errno_location@plt>
mov    (%eax),%eax
test   %eax,%eax
jne    804dbc3 <rewinddir@plt+0x44a3>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80495b0 <errx@plt>
lea    0x0(%esi),%esi
call   8049520 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%esi
lea    0x1c(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049680 <strtol@plt>
mov    (%esi),%edx
test   %edx,%edx
je     804dbe8 <rewinddir@plt+0x44c8>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049320 <err@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%edx
cmp    %edx,%ebx
je     804db75 <rewinddir@plt+0x4455>
test   %edx,%edx
je     804dbfd <rewinddir@plt+0x44dd>
cmpb   $0x0,(%edx)
jne    804db75 <rewinddir@plt+0x4455>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
movl   $0x0,0x1c(%esp)
test   %ebx,%ebx
je     804dc2a <rewinddir@plt+0x450a>
cmpb   $0x0,(%ebx)
jne    804dc58 <rewinddir@plt+0x4538>
call   8049520 <__errno_location@plt>
mov    (%eax),%eax
test   %eax,%eax
jne    804dc83 <rewinddir@plt+0x4563>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80495b0 <errx@plt>
lea    0x0(%esi),%esi
call   8049520 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%esi
lea    0x1c(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   80493b0 <strtoll@plt>
mov    (%esi),%ecx
test   %ecx,%ecx
je     804dca8 <rewinddir@plt+0x4588>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049320 <err@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%ecx
cmp    %ecx,%ebx
je     804dc35 <rewinddir@plt+0x4515>
test   %ecx,%ecx
je     804dcbd <rewinddir@plt+0x459d>
cmpb   $0x0,(%ecx)
jne    804dc35 <rewinddir@plt+0x4515>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%esp),%ebx
movl   $0x0,0x1c(%esp)
test   %ebx,%ebx
je     804dcea <rewinddir@plt+0x45ca>
cmpb   $0x0,(%ebx)
jne    804dd18 <rewinddir@plt+0x45f8>
call   8049520 <__errno_location@plt>
mov    (%eax),%eax
test   %eax,%eax
jne    804dd43 <rewinddir@plt+0x4623>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   80495b0 <errx@plt>
lea    0x0(%esi),%esi
call   8049520 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%esi
lea    0x1c(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049480 <strtoul@plt>
mov    (%esi),%edx
test   %edx,%edx
je     804dd68 <rewinddir@plt+0x4648>
mov    0x34(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x80502e8,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049320 <err@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%edx
cmp    %edx,%ebx
je     804dcf5 <rewinddir@plt+0x45d5>
test   %edx,%edx
je     804dd7d <rewinddir@plt+0x465d>
cmpb   $0x0,(%edx)
jne    804dcf5 <rewinddir@plt+0x45d5>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
mov    %eax,%ecx
and    $0xf000,%ecx
cmp    $0x4000,%ecx
je     804ddf8 <rewinddir@plt+0x46d8>
cmp    $0xa000,%ecx
je     804def8 <rewinddir@plt+0x47d8>
cmp    $0x2000,%ecx
je     804df00 <rewinddir@plt+0x47e0>
cmp    $0x6000,%ecx
je     804df10 <rewinddir@plt+0x47f0>
cmp    $0xc000,%ecx
je     804df08 <rewinddir@plt+0x47e8>
cmp    $0x1000,%ecx
je     804df18 <rewinddir@plt+0x47f8>
cmp    $0x8000,%ecx
jne    804ddfb <rewinddir@plt+0x46db>
movb   $0x2d,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x64,(%edx)
mov    %eax,%ecx
and    $0x100,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x1(%edx)
mov    %eax,%ecx
and    $0x80,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x2(%edx)
mov    %eax,%ecx
and    $0x40,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x8,%ah
je     804dec8 <rewinddir@plt+0x47a8>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x3(%edx)
mov    %eax,%ecx
and    $0x20,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x4(%edx)
mov    %eax,%ecx
and    $0x10,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x5(%edx)
mov    %eax,%ecx
and    $0x8,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x4,%ah
je     804def0 <rewinddir@plt+0x47d0>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x6(%edx)
mov    %eax,%ecx
and    $0x4,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x7(%edx)
mov    %eax,%ecx
and    $0x2,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
test   $0x2,%ah
mov    %cl,0x8(%edx)
je     804ded8 <rewinddir@plt+0x47b8>
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffe0,%eax
add    $0x74,%eax
mov    %al,0x9(%edx)
movb   $0x0,0xa(%edx)
ret
lea    0x0(%esi),%esi
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804de40 <rewinddir@plt+0x4720>
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffb5,%eax
add    $0x78,%eax
mov    %al,0x9(%edx)
movb   $0x0,0xa(%edx)
ret
xchg   %ax,%ax
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    804de7e <rewinddir@plt+0x475e>
movb   $0x6c,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
movb   $0x63,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
movb   $0x73,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
movb   $0x62,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
movb   $0x70,(%edx)
jmp    804ddfb <rewinddir@plt+0x46db>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
mov    0x94(%esp),%esi
testb  $0x2,0x90(%esp)
mov    0x98(%esp),%edi
je     804e160 <rewinddir@plt+0x4a40>
lea    0x47(%esp),%eax
movb   $0x20,0x47(%esp)
lea    0x48(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0xa,%ebx
mov    %ebx,%ecx
xor    %eax,%eax
xor    %edx,%edx
test   $0x20,%cl
setne  %dl
sete   %al
shl    %cl,%edx
shl    %cl,%eax
cmp    %edx,%edi
ja     804dff4 <rewinddir@plt+0x48d4>
jae    804dff0 <rewinddir@plt+0x48d0>
mov    %ecx,%ebx
sub    $0xa,%ecx
jne    804e004 <rewinddir@plt+0x48e4>
mov    %esi,0x2c(%esp)
movb   $0x42,0x0(%ebp)
movb   $0x0,0x1(%ebp)
mov    0x38(%esp),%eax
lea    0x4c(%esp),%ebx
movl   $0x8050305,0x10(%esp)
movl   $0x20,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x18(%esp)
mov    0x2c(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x14(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804e18a <rewinddir@plt+0x4a6a>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %eax,%esi
jb     804df7e <rewinddir@plt+0x485e>
add    $0xa,%ecx
cmp    $0x46,%ecx
jne    804df67 <rewinddir@plt+0x4847>
mov    %ecx,%ebx
mov    $0x3c,%cl
mov    %ecx,%eax
mov    $0x66666667,%edx
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x2,%edx
sub    %eax,%edx
movzbl 0x80502f3(%edx),%eax
mov    %edi,%edx
mov    %al,0x3f(%esp)
mov    %esi,%eax
shrd   %cl,%edx,%eax
shr    %cl,%edx
test   $0x20,%cl
je     804e032 <rewinddir@plt+0x4912>
mov    %edx,%eax
xor    %edx,%edx
mov    %eax,0x2c(%esp)
xor    %eax,%eax
test   $0x20,%cl
sete   %al
setne  %dl
shl    %cl,%eax
shl    %cl,%edx
add    $0xffffffff,%eax
adc    $0xffffffff,%edx
mov    %eax,%ecx
movzbl 0x3f(%esp),%eax
and    %esi,%ecx
and    %edi,%edx
testb  $0x1,0x90(%esp)
mov    %ecx,0x30(%esp)
lea    0x1(%ebp),%ecx
mov    %edx,0x34(%esp)
mov    %al,0x0(%ebp)
jne    804e148 <rewinddir@plt+0x4a28>
mov    0x34(%esp),%edx
mov    0x30(%esp),%eax
movb   $0x0,(%ecx)
mov    %edx,%edi
or     %eax,%edi
je     804df91 <rewinddir@plt+0x4871>
lea    -0x14(%ebx),%ecx
xor    %ebx,%ebx
shrd   %cl,%edx,%eax
shr    %cl,%edx
test   $0x20,%cl
cmovne %edx,%eax
cmovne %ebx,%edx
add    $0x32,%eax
adc    $0x0,%edx
movl   $0x64,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804f120 <rewinddir@plt+0x5a00>
mov    %eax,%edi
xor    $0xa,%eax
or     %edx,%eax
mov    %edx,%ebx
je     804e170 <rewinddir@plt+0x4a50>
mov    %edx,%eax
or     %edi,%eax
je     804df91 <rewinddir@plt+0x4871>
call   8049620 <localeconv@plt>
test   %eax,%eax
xchg   %ax,%ax
je     804e180 <rewinddir@plt+0x4a60>
mov    (%eax),%ecx
test   %ecx,%ecx
je     804e180 <rewinddir@plt+0x4a60>
cmpb   $0x0,(%ecx)
mov    $0x80502f1,%eax
cmove  %eax,%ecx
mov    0x38(%esp),%eax
mov    %ebx,0x20(%esp)
lea    0x4c(%esp),%ebx
mov    %edi,0x1c(%esp)
mov    %ecx,0x18(%esp)
mov    %eax,0x24(%esp)
mov    0x2c(%esp),%eax
movl   $0x80502fb,0x10(%esp)
movl   $0x20,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x20,0x4(%esp)
mov    %ebx,(%esp)
call   80491a0 <__snprintf_chk@plt>
jmp    804dfcd <rewinddir@plt+0x48ad>
cmp    $0x42,%al
je     804e074 <rewinddir@plt+0x4954>
movb   $0x69,0x1(%ebp)
lea    0x3(%ebp),%ecx
movb   $0x42,0x2(%ebp)
jmp    804e074 <rewinddir@plt+0x4954>
lea    0x47(%esp),%eax
mov    %eax,0x38(%esp)
mov    %eax,%ebp
jmp    804df60 <rewinddir@plt+0x4840>
nop
addl   $0x1,0x2c(%esp)
jmp    804df91 <rewinddir@plt+0x4871>
lea    0x0(%esi),%esi
mov    $0x80502f1,%ecx
jmp    804e0fb <rewinddir@plt+0x49db>
call   80492e0 <__stack_chk_fail@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%edx
test   %edx,%edx
je     804e240 <rewinddir@plt+0x4b20>
movzbl (%edx),%eax
test   %al,%al
je     804e240 <rewinddir@plt+0x4b20>
mov    0x34(%esp),%esi
test   %esi,%esi
je     804e240 <rewinddir@plt+0x4b20>
mov    0x38(%esp),%ebx
test   %ebx,%ebx
je     804e240 <rewinddir@plt+0x4b20>
mov    0x3c(%esp),%ecx
test   %ecx,%ecx
je     804e240 <rewinddir@plt+0x4b20>
mov    %edx,%ebx
xor    %ebp,%ebp
xor    %edi,%edi
jmp    804e1e4 <rewinddir@plt+0x4ac4>
lea    0x0(%esi),%esi
movzbl (%ebx),%eax
test   %al,%al
je     804e22f <rewinddir@plt+0x4b0f>
test   %edx,%edx
cmove  %ebx,%edx
cmp    $0x2c,%al
mov    %edi,%esi
cmove  %ebx,%esi
cmpb   $0x0,0x1(%ebx)
lea    0x1(%ebx),%eax
cmove  %eax,%esi
test   %esi,%esi
je     804e22a <rewinddir@plt+0x4b0a>
cmp    %esi,%edx
jae    804e240 <rewinddir@plt+0x4b20>
mov    %esi,%eax
sub    %edx,%eax
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   *0x3c(%esp)
cmp    $0xffffffff,%eax
je     804e240 <rewinddir@plt+0x4b20>
mov    0x34(%esp),%ecx
lea    0x1(%ebp),%edx
cmp    %edx,0x38(%esp)
mov    %eax,(%ecx,%ebp,4)
jbe    804e24d <rewinddir@plt+0x4b2d>
cmpb   $0x0,(%esi)
mov    %edx,%ebp
je     804e22f <rewinddir@plt+0x4b0f>
xor    %edx,%edx
add    $0x1,%ebx
jne    804e1d8 <rewinddir@plt+0x4ab8>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1c,%esp
mov    $0xfffffffe,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
test   %ebx,%ebx
je     804e2f7 <rewinddir@plt+0x4bd7>
mov    0x38(%esp),%eax
test   %eax,%eax
je     804e2f7 <rewinddir@plt+0x4bd7>
test   %esi,%esi
je     804e2f7 <rewinddir@plt+0x4bd7>
xor    %eax,%eax
xor    %edi,%edi
nop
movzbl (%ebx),%ecx
test   %cl,%cl
je     804e2e0 <rewinddir@plt+0x4bc0>
test   %eax,%eax
mov    %edi,%ebp
cmove  %ebx,%eax
cmp    $0x2c,%cl
cmove  %ebx,%ebp
cmpb   $0x0,0x1(%ebx)
lea    0x1(%ebx),%ecx
cmove  %ecx,%ebp
test   %ebp,%ebp
je     804e2db <rewinddir@plt+0x4bbb>
cmp    %ebp,%eax
jae    804e2ea <rewinddir@plt+0x4bca>
mov    %ebp,%ecx
sub    %eax,%ecx
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   *0x38(%esp)
mov    %eax,%ecx
test   %ecx,%ecx
js     804e2e2 <rewinddir@plt+0x4bc2>
sar    $0x3,%eax
and    $0x7,%ecx
mov    $0x1,%edx
shl    %cl,%edx
or     %dl,(%esi,%eax,1)
cmpb   $0x0,0x0(%ebp)
je     804e2e0 <rewinddir@plt+0x4bc0>
xor    %eax,%eax
add    $0x1,%ebx
jne    804e288 <rewinddir@plt+0x4b68>
xor    %eax,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
add    $0x1c,%esp
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0xffffffea,%eax
jmp    804e2e2 <rewinddir@plt+0x4bc2>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c,%esp
movl   $0x0,0xc(%esp)
mov    %edx,0x8(%esp)
mov    0xc(%eax),%eax
mov    %edx,0x1c(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   804f090 <rewinddir@plt+0x5970>
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     804e340 <rewinddir@plt+0x4c20>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
call   8049520 <__errno_location@plt>
mov    0x1c(%esp),%edx
cmpl   $0x2,(%eax)
jne    804e332 <rewinddir@plt+0x4c12>
mov    $0x805030a,%edi
mov    $0x6,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e332 <rewinddir@plt+0x4c12>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     804e332 <rewinddir@plt+0x4c12>
mov    %edx,0x8(%esp)
mov    0xc(%ebx),%edx
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    0x8(%eax),%eax
mov    %eax,(%esp)
call   804f090 <rewinddir@plt+0x5970>
mov    %eax,%ebp
jmp    804e332 <rewinddir@plt+0x4c12>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    %ebx,(%esp)
call   8049630 <readdir64@plt>
test   %eax,%eax
mov    %eax,%edx
je     804e3aa <rewinddir@plt+0x4c8a>
cmpb   $0x2e,0x13(%edx)
je     804e3b8 <rewinddir@plt+0x4c98>
add    $0x18,%esp
mov    %edx,%eax
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x14(%edx),%eax
test   %al,%al
je     804e396 <rewinddir@plt+0x4c76>
cmp    $0x2e,%al
jne    804e3aa <rewinddir@plt+0x4c8a>
cmpb   $0x0,0x15(%edx)
je     804e396 <rewinddir@plt+0x4c76>
jmp    804e3aa <rewinddir@plt+0x4c8a>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x50(%esp),%ecx
mov    0x40(%esp),%eax
mov    0x44(%esp),%edx
mov    0x48(%esp),%ebp
test   %ecx,%ecx
mov    0x4c(%esp),%ebx
je     804e460 <rewinddir@plt+0x4d40>
mov    %eax,%esi
shrd   $0xc,%edx,%esi
mov    %ecx,0x1c(%esp)
and    $0xffffff00,%esi
movzbl %al,%ecx
or     %ecx,%esi
mov    %edx,%ecx
shrd   $0x8,%edx,%eax
and    $0xfffff000,%ecx
and    $0xfff,%eax
or     %eax,%ecx
mov    %esi,0x18(%esp)
mov    %ecx,0x14(%esp)
movl   $0x8050311,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   80491a0 <__snprintf_chk@plt>
test   %eax,%eax
js     804e4b8 <rewinddir@plt+0x4d98>
lea    0x1(%eax),%edx
xor    %eax,%eax
cmp    %edx,%ebx
cmovae %ebp,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%esi
movzbl %al,%ecx
shrd   $0xc,%edx,%esi
and    $0xffffff00,%esi
or     %ecx,%esi
mov    %edx,%ecx
shrd   $0x8,%edx,%eax
and    $0xfffff000,%ecx
and    $0xfff,%eax
or     %eax,%ecx
mov    %esi,0x18(%esp)
mov    %ecx,0x14(%esp)
movl   $0x8050329,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
call   80491a0 <__snprintf_chk@plt>
jmp    804e443 <rewinddir@plt+0x4d23>
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804e451 <rewinddir@plt+0x4d31>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x1098,%esp
mov    %gs:0x14,%eax
mov    %eax,0x108c(%esp)
xor    %eax,%eax
mov    0x10a8(%esp),%eax
lea    0x8c(%esp),%ebx
mov    0x10a4(%esp),%edx
movl   $0x1000,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x10(%esp)
mov    0x10a0(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804e3d0 <rewinddir@plt+0x4cb0>
xor    %edx,%edx
test   %eax,%eax
je     804e533 <rewinddir@plt+0x4e13>
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
xor    %edx,%edx
test   %eax,%eax
sete   %dl
mov    0x108c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %edx,%eax
jne    804e54d <rewinddir@plt+0x4e2d>
add    $0x1098,%esp
pop    %ebx
ret
call   80492e0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
mov    0x34(%esp),%edx
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804e3d0 <rewinddir@plt+0x4cb0>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    $0x5,%ecx
push   %edi
push   %esi
mov    $0x805033e,%esi
push   %ebx
sub    $0x109c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x108c(%esp)
xor    %eax,%eax
mov    0x10b0(%esp),%ebx
mov    0x10b4(%esp),%ebp
mov    %ebx,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
je     804e5e8 <rewinddir@plt+0x4ec8>
test   %ebp,%ebp
jne    804e6d0 <rewinddir@plt+0x4fb0>
xor    %esi,%esi
xor    %edi,%edi
jmp    804e617 <rewinddir@plt+0x4ef7>
lea    0x0(%esi),%esi
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
je     804e740 <rewinddir@plt+0x5020>
add    $0x5,%ebx
xor    %esi,%esi
xor    %edi,%edi
test   %ebp,%ebp
jne    804e6d0 <rewinddir@plt+0x4fb0>
mov    %ebx,0x14(%esp)
lea    0x8c(%esp),%ebx
movl   $0x8050359,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   80491a0 <__snprintf_chk@plt>
test   %eax,%eax
js     804e720 <rewinddir@plt+0x5000>
add    $0x1,%eax
cmp    $0x1000,%eax
ja     804e720 <rewinddir@plt+0x5000>
movl   $0x804fc1c,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x2c(%esp)
call   8049380 <fopen64@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804e720 <rewinddir@plt+0x5000>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x804f96a,0x4(%esp)
mov    %ebp,(%esp)
call   80494b0 <fscanf@plt>
cmp    $0x2,%eax
je     804e768 <rewinddir@plt+0x5048>
mov    %ebp,(%esp)
call   80492b0 <fclose@plt>
mov    %esi,%eax
mov    %edi,%edx
jmp    804e724 <rewinddir@plt+0x5004>
lea    0x0(%esi,%eiz,1),%esi
test   %al,%al
je     804e75f <rewinddir@plt+0x503f>
mov    %ebx,0x18(%esp)
lea    0x8c(%esp),%ebx
mov    %ebp,0x14(%esp)
movl   $0x8050344,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1000,0x4(%esp)
mov    %ebx,(%esp)
call   80491a0 <__snprintf_chk@plt>
test   %eax,%eax
js     804e720 <rewinddir@plt+0x5000>
add    $0x1,%eax
cmp    $0x1000,%eax
ja     804e720 <rewinddir@plt+0x5000>
xor    %esi,%esi
xor    %edi,%edi
jmp    804e660 <rewinddir@plt+0x4f40>
xchg   %ax,%ax
xor    %eax,%eax
xor    %edx,%edx
mov    0x108c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804e79d <rewinddir@plt+0x507d>
add    $0x109c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x4c(%esp),%esi
mov    0x50(%esp),%edi
mov    %esi,%eax
or     %edi,%eax
sete   %al
test   %ebp,%ebp
jne    804e6c8 <rewinddir@plt+0x4fa8>
test   %al,%al
jne    804e617 <rewinddir@plt+0x4ef7>
mov    %esi,%eax
mov    %edi,%edx
jmp    804e724 <rewinddir@plt+0x5004>
lea    0x0(%esi),%esi
mov    0x2c(%esp),%edx
xor    %ebx,%ebx
mov    0x28(%esp),%eax
mov    %edx,%ecx
movzbl %dl,%edx
mov    %eax,%edi
xor    %cl,%cl
and    $0xfff,%eax
and    $0xfffff000,%edi
shld   $0xc,%ecx,%ebx
shl    $0x8,%eax
or     %ebx,%edi
shl    $0xc,%ecx
or     %edx,%eax
mov    %ecx,%esi
or     %eax,%esi
jmp    804e6b3 <rewinddir@plt+0x4f93>
call   80492e0 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804e7f8 <rewinddir@plt+0x50d8>
mov    0x8(%ebx),%eax
test   %eax,%eax
js     804e7cb <rewinddir@plt+0x50ab>
mov    %eax,(%esp)
call   80496a0 <close@plt>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8049240 <free@plt>
movl   $0x0,(%ebx)
movl   $0x0,0x4(%ebx)
movl   $0xffffffff,0x8(%ebx)
movl   $0x0,0x10(%ebx)
movl   $0x0,0xc(%ebx)
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x103c,%esp
mov    0x1050(%esp),%ebp
lea    0x2c(%esp),%ebx
mov    0x1054(%esp),%esi
mov    0x1058(%esp),%edi
mov    0x105c(%esp),%eax
movl   $0x0,0x0(%ebp)
movl   $0x0,0x4(%ebp)
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
movl   $0xffffffff,0x8(%ebp)
movl   $0x0,0x10(%esp)
movl   $0x1000,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %gs:0x14,%edx
mov    %edx,0x102c(%esp)
xor    %edx,%edx
mov    %eax,0x18(%esp)
call   804e3d0 <rewinddir@plt+0x4cb0>
test   %eax,%eax
je     804e8c8 <rewinddir@plt+0x51a8>
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   80491c0 <open64@plt>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804e8c8 <rewinddir@plt+0x51a8>
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
test   %eax,%eax
mov    %eax,0xc(%ebp)
je     804e8c8 <rewinddir@plt+0x51a8>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%ecx
mov    %esi,0x0(%ebp)
mov    %edi,0x4(%ebp)
mov    %eax,0x10(%ebp)
xor    %eax,%eax
mov    %ecx,0x8(%ebp)
jmp    804e8db <rewinddir@plt+0x51bb>
lea    0x0(%esi,%eiz,1),%esi
call   8049520 <__errno_location@plt>
mov    (%eax),%ebx
mov    %ebp,(%esp)
call   804e7b0 <rewinddir@plt+0x5090>
neg    %ebx
mov    %ebx,%eax
mov    0x102c(%esp),%edi
xor    %gs:0x14,%edi
jne    804e8f6 <rewinddir@plt+0x51d6>
add    $0x103c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   80492e0 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%ebx
mov    0x48(%esp),%eax
mov    0x44(%esp),%ebp
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
mov    %ebp,0x8(%esp)
mov    0xc(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%ebx),%eax
mov    %eax,(%esp)
call   804f060 <rewinddir@plt+0x5940>
xor    %edx,%edx
test   %eax,%eax
mov    %eax,%esi
je     804e949 <rewinddir@plt+0x5229>
call   8049520 <__errno_location@plt>
mov    %esi,%edx
cmpl   $0x2,(%eax)
je     804e958 <rewinddir@plt+0x5238>
add    $0x2c,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x805030a,%edi
mov    $0x6,%ecx
mov    %ebp,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    804e949 <rewinddir@plt+0x5229>
mov    0x10(%ebx),%eax
test   %eax,%eax
je     804e949 <rewinddir@plt+0x5229>
mov    0x48(%esp),%edi
mov    %ebp,0x8(%esp)
movl   $0x0,0x10(%esp)
mov    %edi,0xc(%esp)
mov    0xc(%eax),%edx
mov    %edx,0x4(%esp)
mov    0x8(%eax),%eax
mov    %eax,(%esp)
call   804f060 <rewinddir@plt+0x5940>
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
mov    %eax,%edx
mov    %edx,%eax
ret
jmp    804e9b0 <rewinddir@plt+0x5290>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub    $0x7c,%esp
lea    0x10(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x84(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %eax,(%esp)
call   804e900 <rewinddir@plt+0x51e0>
test   %eax,%eax
sete   %al
add    $0x7c,%esp
movzbl %al,%eax
ret
jmp    804e9f0 <rewinddir@plt+0x52d0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebx
sub    $0x28,%esp
mov    0x34(%esp),%eax
mov    0x30(%esp),%edx
mov    0x38(%esp),%ecx
mov    0x3c(%esp),%ebx
test   %eax,%eax
je     804ea30 <rewinddir@plt+0x5310>
mov    %ebx,0x10(%esp)
mov    %ecx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0xc(%edx),%eax
mov    %eax,0x4(%esp)
mov    0x8(%edx),%eax
mov    %eax,(%esp)
call   804f100 <rewinddir@plt+0x59e0>
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x38(%esp)
mov    %ecx,0x34(%esp)
mov    0xc(%edx),%eax
mov    %eax,0x30(%esp)
add    $0x28,%esp
pop    %ebx
jmp    8049330 <readlink@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804ea88 <rewinddir@plt+0x5368>
mov    %ebx,%edx
call   804e300 <rewinddir@plt+0x4be0>
mov    %eax,%esi
test   %esi,%esi
js     804ea98 <rewinddir@plt+0x5378>
mov    %esi,(%esp)
call   8049610 <fdopendir@plt>
test   %eax,%eax
je     804eab2 <rewinddir@plt+0x5392>
test   %ebx,%ebx
je     804eaa0 <rewinddir@plt+0x5380>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%eax),%eax
mov    %eax,(%esp)
call   80491f0 <dup@plt>
mov    %eax,%esi
jmp    804ea6a <rewinddir@plt+0x534a>
nop
xor    %eax,%eax
jmp    804ea7e <rewinddir@plt+0x535e>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
mov    %eax,0xc(%esp)
call   8049720 <rewinddir@plt>
mov    0xc(%esp),%eax
jmp    804ea7e <rewinddir@plt+0x535e>
mov    %esi,(%esp)
call   80496a0 <close@plt>
xor    %eax,%eax
jmp    804ea7e <rewinddir@plt+0x535e>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x13c,%esp
mov    0x154(%esp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
mov    0x150(%esp),%ebp
mov    0x158(%esp),%edi
cmpb   $0x4,0x12(%ebx)
je     804eb18 <rewinddir@plt+0x53f8>
mov    0x12c(%esp),%edx
xor    %gs:0x14,%edx
mov    %esi,%eax
jne    804eb9a <rewinddir@plt+0x547a>
add    $0x13c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    %edi,(%esp)
add    $0x13,%ebx
call   80494c0 <strlen@plt>
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8049660 <strncmp@plt>
test   %eax,%eax
jne    804eaf6 <rewinddir@plt+0x53d6>
mov    %ebx,0x14(%esp)
lea    0x2c(%esp),%ebx
movl   $0x805036b,0x10(%esp)
movl   $0x100,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x100,0x4(%esp)
mov    %ebx,(%esp)
call   80491a0 <__snprintf_chk@plt>
mov    %ebp,(%esp)
call   8049210 <dirfd@plt>
movl   $0x0,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049270 <faccessat@plt>
test   %eax,%eax
sete   %al
movzbl %al,%eax
mov    %eax,%esi
jmp    804eaf6 <rewinddir@plt+0x53d6>
call   80492e0 <__stack_chk_fail@plt>
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%edx
mov    0x20(%esp),%eax
call   804e300 <rewinddir@plt+0x4be0>
test   %eax,%eax
js     804ebf8 <rewinddir@plt+0x54d8>
movl   $0x804fc1c,0x4(%esp)
mov    %eax,(%esp)
call   8049460 <fdopen@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804ebf8 <rewinddir@plt+0x54d8>
lea    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x28(%esp),%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049360 <vfscanf@plt>
mov    %ebx,(%esp)
mov    %eax,%esi
call   80492b0 <fclose@plt>
mov    %esi,%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    $0xffffffea,%eax
jmp    804ebf0 <rewinddir@plt+0x54d0>
nop
push   %ebx
sub    $0x28,%esp
lea    0x18(%esp),%eax
mov    0x38(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
movl   $0x8050374,0x8(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804eba0 <rewinddir@plt+0x5480>
cmp    $0x1,%eax
jne    804ec60 <rewinddir@plt+0x5540>
test   %ebx,%ebx
je     804ec68 <rewinddir@plt+0x5548>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%ebx)
xor    %eax,%eax
mov    %edx,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    804ec54 <rewinddir@plt+0x5534>
nop
xor    %eax,%eax
jmp    804ec54 <rewinddir@plt+0x5534>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
lea    0x18(%esp),%eax
mov    0x38(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
movl   $0x8050379,0x8(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804eba0 <rewinddir@plt+0x5480>
cmp    $0x1,%eax
jne    804ecd0 <rewinddir@plt+0x55b0>
test   %ebx,%ebx
je     804ecd8 <rewinddir@plt+0x55b8>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%ebx)
xor    %eax,%eax
mov    %edx,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    804ecc4 <rewinddir@plt+0x55a4>
nop
xor    %eax,%eax
jmp    804ecc4 <rewinddir@plt+0x55a4>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x38(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
movl   $0x805033b,0x8(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804eba0 <rewinddir@plt+0x5480>
cmp    $0x1,%eax
jne    804ed30 <rewinddir@plt+0x5610>
test   %ebx,%ebx
je     804ed38 <rewinddir@plt+0x5618>
mov    0x1c(%esp),%eax
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    $0xffffffff,%eax
jmp    804ed25 <rewinddir@plt+0x5605>
nop
xor    %eax,%eax
jmp    804ed25 <rewinddir@plt+0x5605>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x428,%esp
mov    %gs:0x14,%eax
mov    %eax,0x41c(%esp)
xor    %eax,%eax
mov    0x434(%esp),%eax
lea    0x1c(%esp),%ebx
mov    %ebx,0xc(%esp)
movl   $0x805037e,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x430(%esp),%eax
mov    %eax,(%esp)
call   804eba0 <rewinddir@plt+0x5480>
xor    %edx,%edx
cmp    $0x1,%eax
jne    804ed91 <rewinddir@plt+0x5671>
mov    %ebx,(%esp)
call   8049510 <__strdup@plt>
mov    %eax,%edx
mov    0x41c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %edx,%eax
jne    804edab <rewinddir@plt+0x568b>
add    $0x428,%esp
pop    %ebx
ret
call   80492e0 <__stack_chk_fail@plt>
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804ea50 <rewinddir@plt+0x5330>
test   %eax,%eax
mov    %eax,%esi
je     804edf8 <rewinddir@plt+0x56d8>
xor    %ebx,%ebx
jmp    804eddb <rewinddir@plt+0x56bb>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
mov    %esi,%eax
call   804e390 <rewinddir@plt+0x4c70>
test   %eax,%eax
jne    804edd8 <rewinddir@plt+0x56b8>
mov    %esi,(%esp)
call   80496b0 <closedir@plt>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    0x24(%esp),%edi
mov    %eax,(%esp)
call   804ea50 <rewinddir@plt+0x5330>
test   %eax,%eax
mov    %eax,%ebx
je     804ee60 <rewinddir@plt+0x5740>
xor    %esi,%esi
jmp    804ee3e <rewinddir@plt+0x571e>
mov    %edi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804eac0 <rewinddir@plt+0x53a0>
cmp    $0x1,%eax
sbb    $0xffffffff,%esi
mov    %ebx,%eax
call   804e390 <rewinddir@plt+0x4c70>
test   %eax,%eax
jne    804ee28 <rewinddir@plt+0x5708>
mov    %ebx,(%esp)
call   80496b0 <closedir@plt>
add    $0x10,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%eax
movl   $0x804f941,0x4(%esp)
mov    %eax,(%esp)
call   804ea50 <rewinddir@plt+0x5330>
test   %eax,%eax
mov    %eax,%esi
je     804eed8 <rewinddir@plt+0x57b8>
xor    %ebx,%ebx
jmp    804eea9 <rewinddir@plt+0x5789>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
jne    804eec8 <rewinddir@plt+0x57a8>
lea    0x13(%eax),%edx
mov    %edx,(%esp)
call   8049510 <__strdup@plt>
mov    %eax,%ebx
mov    %esi,%eax
call   804e390 <rewinddir@plt+0x4c70>
test   %eax,%eax
jne    804ee98 <rewinddir@plt+0x5778>
mov    %esi,(%esp)
call   80496b0 <closedir@plt>
mov    %ebx,%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049240 <free@plt>
add    $0x14,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
ret
xor    %eax,%eax
jmp    804eebe <rewinddir@plt+0x579e>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ebx
movl   $0x0,0x4(%esp)
sub    $0x1,%eax
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %ebx,0x8(%esp)
mov    %eax,(%esp)
call   804e9f0 <rewinddir@plt+0x52d0>
test   %eax,%eax
js     804ef50 <rewinddir@plt+0x5830>
movb   $0x0,(%ebx,%eax,1)
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   80495e0 <strrchr@plt>
test   %eax,%eax
je     804ef50 <rewinddir@plt+0x5830>
lea    0x1(%eax),%esi
mov    %esi,(%esp)
call   80494c0 <strlen@plt>
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x8(%esp)
call   8049230 <memmove@plt>
mov    %ebx,%eax
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
xor    %eax,%eax
jmp    804ef48 <rewinddir@plt+0x5828>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc0(%esp),%eax
lea    0x2c(%esp),%edi
mov    0xc4(%esp),%ebp
movl   $0x0,0xc(%esp)
mov    0xc8(%esp),%ebx
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,0x8(%esp)
mov    %eax,0x1c(%esp)
call   804e800 <rewinddir@plt+0x50e0>
test   %eax,%eax
jne    804f050 <rewinddir@plt+0x5930>
mov    0xcc(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   804eee0 <rewinddir@plt+0x57c0>
mov    %edi,(%esp)
mov    %eax,%esi
call   804e7b0 <rewinddir@plt+0x5090>
test   %esi,%esi
je     804f050 <rewinddir@plt+0x5930>
mov    %esi,(%esp)
call   80494c0 <strlen@plt>
lea    0x6(%eax),%edx
cmp    %edx,0xcc(%esp)
jb     804f050 <rewinddir@plt+0x5930>
add    $0x1,%eax
mov    %eax,0x8(%esp)
lea    0x5(%ebx),%eax
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049230 <memmove@plt>
lea    0x40(%esp),%eax
movl   $0x7665642f,(%ebx)
movb   $0x2f,0x4(%ebx)
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
call   8049670 <__xstat64@plt>
test   %eax,%eax
jne    804f050 <rewinddir@plt+0x5930>
mov    0x50(%esp),%eax
and    $0xf000,%eax
cmp    $0x6000,%eax
jne    804f050 <rewinddir@plt+0x5930>
mov    0x1c(%esp),%edi
xor    0x64(%esp),%ebp
xor    0x60(%esp),%edi
or     %edi,%ebp
jne    804f050 <rewinddir@plt+0x5930>
add    $0xac,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
cmpl   $0x1,0x14(%esp)
sbb    %eax,%eax
not    %eax
and    $0x100,%eax
mov    %eax,0x14(%esp)
mov    0x4(%esp),%eax
movl   $0x3,0x4(%esp)
mov    %eax,0x8(%esp)
jmp    8049340 <__fxstatat64@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0xc(%esp),%eax
mov    0x10(%esp),%edx
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
jmp    8049280 <__openat64_2@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x2c(%esp),%eax
mov    0x30(%esp),%ebx
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804f090 <rewinddir@plt+0x5970>
test   %eax,%eax
js     804f0f8 <rewinddir@plt+0x59d8>
mov    %ebx,0x24(%esp)
mov    %eax,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049460 <fdopen@plt>
lea    0x0(%esi,%eiz,1),%esi
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
nop
mov    0xc(%esp),%eax
mov    0x10(%esp),%edx
mov    0x14(%esp),%ecx
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
mov    %ecx,0x10(%esp)
jmp    8049430 <readlinkat@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    804f170 <rewinddir@plt+0x5a50>
cmp    %ebp,%ecx
ja     804f1a8 <rewinddir@plt+0x5a88>
test   %ecx,%ecx
mov    %ecx,%esi
jne    804f158 <rewinddir@plt+0x5a38>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     804f198 <rewinddir@plt+0x5a78>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    804f1b8 <rewinddir@plt+0x5a98>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    804f228 <rewinddir@plt+0x5b08>
cmp    %edx,%eax
jb     804f228 <rewinddir@plt+0x5b08>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     804f238 <rewinddir@plt+0x5b18>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    804f219 <rewinddir@plt+0x5af9>
cmp    (%esp),%esi
je     804f238 <rewinddir@plt+0x5b18>
mov    %edi,%eax
xor    %edx,%edx
jmp    804f19c <rewinddir@plt+0x5a7c>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    804f19c <rewinddir@plt+0x5a7c>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049e50 <rewinddir@plt+0x730>
add    $0x3da5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xfc(%ebx),%esi
call   8049164 <__snprintf_chk@plt-0x3c>
lea    -0x100(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804f2a9 <rewinddir@plt+0x5b89>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x100(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804f288 <rewinddir@plt+0x5b68>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804f2c0 <rewinddir@plt+0x5ba0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   8049e50 <rewinddir@plt+0x730>
add    $0x3d33,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
outsl  %ds:(%esi),(%dx)
jo     804f35f <_IO_stdin_used+0x7b>
imul   $0x72612073,0x6e(%edi),%ebp
and    %ch,%gs:0x75(%ebp)
je     804f36d <_IO_stdin_used+0x89>
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    804f31d <_IO_stdin_used+0x39>
gs
js     804f363 <_IO_stdin_used+0x7f>
insb   (%dx),%es:(%edi)
jne    804f376 <_IO_stdin_used+0x92>
imul   $0x550a0000,0x65(%esi),%esi
jae    804f36d <_IO_stdin_used+0x89>
cmp    %gs:(%bp,%si),%cl
and    %ah,0x6f5b2073
jo     804f38c <_IO_stdin_used+0xa8>
imul   $0x5b205d73,0x6e(%edi),%ebp
cmp    $0x64,%al
gs
jbe    804f38d <_IO_stdin_used+0xa9>
arpl   %sp,0x3e(%ebp)
and    %ch,(%esi)
cs
cs
pop    %ebp
or     (%eax),%al
add    %al,(%eax)
or     0x70(%edi),%cl
je     804f39e <_IO_stdin_used+0xba>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    804f373 <_IO_stdin_used+0x8f>
or     (%eax),%ah
sub    $0x2d202c61,%eax
sub    $0x206c6c61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x6c6c6120,0x74(%esi),%ebp
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x2d200a73,0x65(%ebx),%esp
bound  %ebp,(%eax,%eiz,1)
sub    $0x7479622d,%eax
gs
jae    804f38f <_IO_stdin_used+0xab>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x5a495320,0x74(%esi),%ebp
inc    %ebp
and    %ch,0x6e(%ecx)
and    %ah,0x79(%edx)
je     804f3ef <_IO_stdin_used+0x10b>
jae    804f3ac <_IO_stdin_used+0xc8>
jb     804f3ef <_IO_stdin_used+0x10b>
je     804f3f8 <_IO_stdin_used+0x114>
gs
jb     804f3b3 <_IO_stdin_used+0xcf>
je     804f3fd <_IO_stdin_used+0x119>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%ecx)
and    %ch,0x75(%eax)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
popa
fs
popa
bound  %ebp,0x20(%ebp,%eiz,2)
outsw  %ds:(%esi),(%dx)
jb     804f41b <_IO_stdin_used+0x137>
popa
je     804f3bb <_IO_stdin_used+0xd7>
and    %ch,0x2d202c64
sub    $0x65646f6e,%eax
jo     804f431 <_IO_stdin_used+0x14d>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%edi,%ebp,2)
daa
je     804f3ed <_IO_stdin_used+0x109>
jo     804f441 <_IO_stdin_used+0x15d>
imul   $0x616c7320,0x74(%esi),%ebp
jbe    804f43d <_IO_stdin_used+0x159>
jae    804f3fa <_IO_stdin_used+0x116>
outsl  %ds:(%esi),(%dx)
jb     804f3fd <_IO_stdin_used+0x119>
push   $0x65646c6f
jb     804f457 <_IO_stdin_used+0x173>
or     (%eax),%ah
sub    $0x2d202c44,%eax
sub    $0x63736964,%eax
popa
jb     804f457 <_IO_stdin_used+0x173>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     804f46f <_IO_stdin_used+0x18b>
imul   $0x73696420,0x74(%esi),%ebp
arpl   %sp,0x72(%ecx)
and    %ah,%fs:0x61(%ebx)
jo     804f46e <_IO_stdin_used+0x18a>
bound  %ebp,0x6c(%ecx)
imul   $0x2d200a73,0x65(%ecx,%ebp,2),%esi
gs
sub    $0x20,%al
sub    $0x6378652d,%eax
insb   (%dx),%es:(%edi)
jne    804f487 <_IO_stdin_used+0x1a3>
and    %bh,%gs:(%esp,%ebp,2)
imul   $0x7865203e,0x74(%ebx),%esi
arpl   %bp,0x64(%ebp,%esi,2)
and    %ah,%gs:0x76(%ebp,%eiz,2)
imul   $0x79622073,0x65(%ebx),%esp
and    %ch,0x61(%ebp)
push   $0x6f
jb     804f465 <_IO_stdin_used+0x181>
outsb  %ds:(%esi),(%dx)
jne    804f4b5 <_IO_stdin_used+0x1d1>
bound  %esp,0x72(%ebp)
and    %ch,(%eax)
fs
gs
popaw
jne    804f4bf <_IO_stdin_used+0x1db>
je     804f48f <_IO_stdin_used+0x1ab>
and    %dl,0x41(%edx)
dec    %ebp
and    %ah,0x73(%ecx,%ebp,2)
imul   $0xa,0x29(%ebx),%esi
and    %ch,0x2d202c66
sub    $0x20207366,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x75(%edi)
je     804f4eb <_IO_stdin_used+0x207>
jne    804f4f1 <_IO_stdin_used+0x20d>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804f4fc <_IO_stdin_used+0x218>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    804f508 <_IO_stdin_used+0x224>
jae    804f505 <_IO_stdin_used+0x221>
gs
insl   (%dx),%es:(%edi)
jae    804f49f <_IO_stdin_used+0x1bb>
and    %ch,0x2d202c68
sub    $0x706c6568,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
popa
and    %ch,%gs:0x6e(%bx,%di)
outsw  %ds:(%esi),(%dx)
jb     804f524 <_IO_stdin_used+0x240>
popa
je     804f523 <_IO_stdin_used+0x23f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,(%eax)
je     804f528 <_IO_stdin_used+0x244>
imul   $0x692d200a,0x29(%ebx),%esi
sub    $0x20,%al
sub    $0x6373612d,%eax
imul   $0x20202020,0x20(%ecx),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %ah,%gs:0x73(%ecx)
arpl   %bp,0x69(%ecx)
and    %ah,0x68(%ebx)
popa
jb     804f54a <_IO_stdin_used+0x266>
arpl   %si,0x72(%ebp,%eiz,2)
jae    804f50f <_IO_stdin_used+0x22b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    804f4fe <_IO_stdin_used+0x21a>
and    %ch,0x2d202c6d
sub    $0x6d726570,%eax
jae    804f521 <_IO_stdin_used+0x23d>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x75(%edi)
je     804f57e <_IO_stdin_used+0x29a>
jne    804f584 <_IO_stdin_used+0x2a0>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    804f58f <_IO_stdin_used+0x2ab>
and    %dh,0x65(%eax)
jb     804f58d <_IO_stdin_used+0x2a9>
imul   $0x736e6f69,0x73(%ebx),%esi
or     (%eax),%ah
sub    $0x2d202c6c,%eax
sub    $0x7473696c,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %ch,%gs:0x73(%ecx,%ebp,2)
je     804f567 <_IO_stdin_used+0x283>
outsw  %ds:(%esi),(%dx)
jb     804f5b8 <_IO_stdin_used+0x2d4>
popa
je     804f56e <_IO_stdin_used+0x28a>
outsl  %ds:(%esi),(%dx)
jne    804f5c1 <_IO_stdin_used+0x2dd>
jne    804f5c7 <_IO_stdin_used+0x2e3>
or     (%eax),%ah
sub    $0x2d202c6e,%eax
sub    $0x65686f6e,%eax
popa
imul   $0x20202073,%fs:0x67(%esi),%ebp
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
daa
je     804f590 <_IO_stdin_used+0x2ac>
jo     804f5e4 <_IO_stdin_used+0x300>
imul   $0x61656820,0x74(%esi),%ebp
imul   $0x2d200a73,%fs:0x67(%esi),%ebp
outsl  %ds:(%esi),(%dx)
sub    $0x20,%al
sub    $0x74756f2d,%eax
jo     804f600 <_IO_stdin_used+0x31c>
je     804f5ad <_IO_stdin_used+0x2c9>
cmp    $0x6c,%al
imul   $0x6f20203e,0x74(%ebx),%esi
jne    804f60c <_IO_stdin_used+0x328>
jo     804f60f <_IO_stdin_used+0x32b>
je     804f5bc <_IO_stdin_used+0x2d8>
arpl   %bp,0x6c(%edi)
jne    804f60e <_IO_stdin_used+0x32a>
outsb  %ds:(%esi),(%dx)
jae    804f5ae <_IO_stdin_used+0x2ca>
and    %ch,0x2d202c50
sub    $0x72696170,%eax
jae    804f5d1 <_IO_stdin_used+0x2ed>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %ch,%gs:0x65(%ebx)
jns    804f5ff <_IO_stdin_used+0x31b>
and    0x61(%esi),%dh
insb   (%dx),%es:(%edi)
jne    804f62d <_IO_stdin_used+0x349>
and    (%eax),%ah
outsl  %ds:(%esi),(%dx)
jne    804f641 <_IO_stdin_used+0x35d>
jo     804f644 <_IO_stdin_used+0x360>
je     804f5f1 <_IO_stdin_used+0x30d>
outsw  %ds:(%esi),(%dx)
jb     804f642 <_IO_stdin_used+0x35e>
popa
je     804f5e2 <_IO_stdin_used+0x2fe>
and    %ch,0x2d202c72
sub    $0x20776172,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %dh,%gs:0x61(%edx)
ja     804f616 <_IO_stdin_used+0x332>
outsl  %ds:(%esi),(%dx)
jne    804f66d <_IO_stdin_used+0x389>
jo     804f670 <_IO_stdin_used+0x38c>
je     804f61d <_IO_stdin_used+0x339>
outsw  %ds:(%esi),(%dx)
jb     804f66e <_IO_stdin_used+0x38a>
popa
je     804f60e <_IO_stdin_used+0x32a>
and    %ch,0x2d202c74
sub    $0x6f706f74,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16 jns 804f634 <_IO_stdin_used+0x350>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    804f691 <_IO_stdin_used+0x3ad>
jo     804f694 <_IO_stdin_used+0x3b0>
je     804f641 <_IO_stdin_used+0x35d>
imul   $0x6261206f,0x66(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jne    804f69f <_IO_stdin_used+0x3bb>
and    %dh,0x70(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16 jns 804f63f <_IO_stdin_used+0x35b>
add    %al,(%eax)
add    %cl,(%edx)
inc    %esi
outsl  %ds:(%esi),(%dx)
jb     804f65d <_IO_stdin_used+0x379>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804f6a6 <_IO_stdin_used+0x3c2>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804f6b5 <_IO_stdin_used+0x3d1>
popa
je     804f6b4 <_IO_stdin_used+0x3d0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%ebx)
and    %ch,%gs:0x62(%ebx,%esi,2)
insb   (%dx),%es:(%edi)
imul   $0x38,(%eax),%ebp
sub    %ebp,(%esi)
or     (%eax),%al
add    %al,(%eax)
add    %ah,0x66203a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6c616974,0x69(%esi),%ebp
imul   $0x73797320,0x65(%edx),%edi
data16
jae    804f69f <_IO_stdin_used+0x3bb>
push   $0x6c646e61
gs
jb     804f687 <_IO_stdin_used+0x3a3>
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
jo     804f6fa <_IO_stdin_used+0x416>
outsb  %ds:(%esi),(%dx)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x72696420,0x65(%ebx),%esp
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    804f6c8 <_IO_stdin_used+0x3e4>
imul   $0x66737973,0x20(%esi),%ebp
jae    804f6b1 <_IO_stdin_used+0x3cd>
add    %al,(%eax)
add    %ah,0x66203a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     804f6e6 <_IO_stdin_used+0x402>
ja     804f730 <_IO_stdin_used+0x44c>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
gs
sub    $0x6b736964,%eax
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x6d756e20,0x65(%ebx),%esp
bound  %esp,0x72(%ebp)
add    %al,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
arpl   %bp,0x6d(%edi)
jo     804f75e <_IO_stdin_used+0x47a>
jae    804f756 <_IO_stdin_used+0x472>
and    %dh,0x79(%ebx)
jae    804f75c <_IO_stdin_used+0x478>
jae    804f718 <_IO_stdin_used+0x434>
jo     804f75b <_IO_stdin_used+0x477>
je     804f764 <_IO_stdin_used+0x480>
and    %ah,0x6f(%esi)
jb     804f721 <_IO_stdin_used+0x43d>
and    $0x68740073,%eax
and    %ch,%gs:0x73(%ecx,%ebp,2)
je     804f72d <_IO_stdin_used+0x449>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x78(%ebp)
arpl   %bp,0x64(%ebp,%esi,2)
gs and %ah,%fs:%gs:0x76(%ebp,%eiz,2)
imul   $0x73692073,0x65(%ebx),%esp
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
and    %ch,%gs:(%bx,%si)
insb   (%dx),%es:(%edi)
imul   $0x73692074,0x69(%ebp),%ebp
and    %ah,0x65642064
jbe    804f7a8 <_IO_stdin_used+0x4c4>
arpl   %sp,0x73(%ebp)
sub    %eax,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6c616974,0x69(%esi),%ebp
imul   $0x74756f20,0x65(%edx),%edi
jo     804f7d3 <_IO_stdin_used+0x4ef>
je     804f780 <_IO_stdin_used+0x49c>
je     804f7c3 <_IO_stdin_used+0x4df>
bound  %ebp,0x0(%ebp,%eiz,2)
add    %al,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6c616974,0x69(%esi),%ebp
imul   $0x74756f20,0x65(%edx),%edi
jo     804f7f7 <_IO_stdin_used+0x513>
je     804f7a4 <_IO_stdin_used+0x4c0>
arpl   %bp,0x6c(%edi)
jne    804f7f6 <_IO_stdin_used+0x512>
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
sub    %dh,0x69(%ebx)
jp     804f7f6 <_IO_stdin_used+0x512>
outsl  %ds:(%esi),(%dx)
data16
sub    %ah,0x78(%ebp)
arpl   %bp,0x64(%ebp,%esi,2)
gs
jae    804f7c6 <_IO_stdin_used+0x4e2>
and    %ch,(%edi)
and    %dh,0x69(%ebx)
jp     804f809 <_IO_stdin_used+0x525>
outsl  %ds:(%esi),(%dx)
data16
sub    %ch,(%eax)
gs
js     804f80e <_IO_stdin_used+0x52a>
insb   (%dx),%es:(%edi)
jne    804f812 <_IO_stdin_used+0x52e>
gs
jae    804f7da <_IO_stdin_used+0x4f6>
pop    %ebx
xor    %bl,0x29(%ebp)
and    %ch,(%ebx)
and    %ch,(%eax)
jae    804f824 <_IO_stdin_used+0x540>
jp     804f822 <_IO_stdin_used+0x53e>
outsl  %ds:(%esi),(%dx)
data16
sub    %dh,0x74(%ebx)
jb     804f839 <_IO_stdin_used+0x555>
arpl   %si,0x7b(%eax,%eiz,1)
and    %ch,0x6e(%ecx)
je     804f807 <_IO_stdin_used+0x523>
sub    $0x5f282121,%eax
pop    %edi
bound  %esi,0x69(%ebp)
insb   (%dx),%es:(%edi)
je     804f842 <_IO_stdin_used+0x55e>
outsb  %ds:(%esi),(%dx)
pop    %edi
je     804f856 <_IO_stdin_used+0x572>
jo     804f844 <_IO_stdin_used+0x560>
jae    804f840 <_IO_stdin_used+0x55c>
arpl   %bp,0x6d(%edi)
jo     804f847 <_IO_stdin_used+0x563>
je     804f851 <_IO_stdin_used+0x56d>
bound  %ebp,0x5f(%ebp,%eiz,2)
jo     804f816 <_IO_stdin_used+0x532>
pop    %edi
pop    %edi
je     804f86b <_IO_stdin_used+0x587>
jo     804f859 <_IO_stdin_used+0x575>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
sub    %ah,0x78(%ebp)
arpl   %bp,0x64(%ebp,%esi,2)
gs
jae    804f82b <_IO_stdin_used+0x547>
sub    $0x20,%al
pop    %edi
pop    %edi
je     804f881 <_IO_stdin_used+0x59d>
jo     804f86f <_IO_stdin_used+0x58b>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
sub    %ah,(%esi)
gs
js     804f876 <_IO_stdin_used+0x592>
insb   (%dx),%es:(%edi)
jne    804f87a <_IO_stdin_used+0x596>
gs
jae    804f874 <_IO_stdin_used+0x590>
xor    %bl,0x29(%ebp)
sub    %ebp,(%ecx)
cmp    (%eax),%esp
jge    804f84b <_IO_stdin_used+0x567>
sub    %ebp,(%ecx)
and    %bh,(%esi)
and    %ch,0x65(%esi)
js     804f88e <_IO_stdin_used+0x5aa>
insb   (%dx),%es:(%edi)
jne    804f892 <_IO_stdin_used+0x5ae>
gs
jae    804f831 <_IO_stdin_used+0x54d>
add    %al,(%eax)
add    %ah,0x73252073
add    %cl,(%edx)
inc    %ecx
jbe    804f89f <_IO_stdin_used+0x5bb>
imul   $0x6320656c,0x62(%ecx,%eiz,2),%ebp
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jne    804f8b7 <_IO_stdin_used+0x5d3>
outsb  %ds:(%esi),(%dx)
jae    804f887 <_IO_stdin_used+0x5a3>
or     (%eax),%al
and    %ah,0x20733031
and    %ah,0x75000a73
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%ebx)
insb   (%dx),%es:(%edi)
jne    804f8d4 <_IO_stdin_used+0x5f0>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
and    $0x736c0073,%eax
bound  %ebp,0x2e(%ebx,%ebp,2)
arpl   %ax,(%eax)
outsb  %ds:(%esi),(%dx)
jne    804f8e5 <_IO_stdin_used+0x601>
and    %bh,(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
arpl   %bp,0x6c(%edi)
jne    804f8ee <_IO_stdin_used+0x60a>
outsb  %ds:(%esi),(%dx)
jae    804f884 <_IO_stdin_used+0x5a0>
arpl   %bp,0x6c(%edi)
jne    804f8f6 <_IO_stdin_used+0x612>
outsb  %ds:(%esi),(%dx)
jae    804f8e7 <_IO_stdin_used+0x603>
outsb  %ds:(%esi),(%dx)
jne    804f8fc <_IO_stdin_used+0x618>
pop    %ebp
and    %bh,(%eax,%eiz,1)
pop    %edi
pop    %edi
dec    %esi
inc    %ebx
dec    %edi
dec    %esp
push   %ebp
dec    %ebp
dec    %esi
push   %ebx
add    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f8c5 <_IO_stdin_used+0x5e1>
fs
jne    804f918 <_IO_stdin_used+0x634>
insb   (%dx),%es:(%edi)
imul   $0x73206574,0x61(%ebx),%esp
je     804f924 <_IO_stdin_used+0x640>
imul   $0x706400,0x67(%esi),%ebp
arpl   %di,0x74(%eax)
add    %ah,0x78(%ebx)
je     804f8ee <_IO_stdin_used+0x60a>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:(%edi)
fs
gs
jbe    804f8fb <_IO_stdin_used+0x617>
and    $0x73250073,%eax
cmp    (%eax),%ah
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     804f901 <_IO_stdin_used+0x61d>
fs
gs
jbe    804f94e <_IO_stdin_used+0x66a>
arpl   %sp,0x20(%ebp)
jo     804f94b <_IO_stdin_used+0x667>
je     804f954 <_IO_stdin_used+0x670>
add    %ah,0x75203a73
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x6d616e20,0x65(%ebx),%esp
add    %dh,%gs:0x75(%ecx)
gs
jne    804f96f <_IO_stdin_used+0x68b>
das
imul   $0x5f647261,%fs:0x63(%ebx),%esi
addr16 jb 804f977 <_IO_stdin_used+0x693>
outsb  %ds:(%esi),(%dx)
jne    804f985 <_IO_stdin_used+0x6a1>
popa
jb     804f985 <_IO_stdin_used+0x6a1>
je     804f997 <_IO_stdin_used+0x6b3>
add    %ah,0x66203a73
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     804f951 <_IO_stdin_used+0x66d>
fs
insl   (%dx),%es:(%edi)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x6f(%eax)
insb   (%dx),%es:(%edi)
fs
gs
jb     804f9b3 <_IO_stdin_used+0x6cf>
add    %dh,0x6c(%ebx)
popa
jbe    804f9ab <_IO_stdin_used+0x6c7>
jae    804f948 <_IO_stdin_used+0x664>
jo     804f9ab <_IO_stdin_used+0x6c7>
jb     804f9c0 <_IO_stdin_used+0x6dc>
add    %dh,0x61(%edx)
imul   $0x72006362,0x72(%eax,%eax,1),%esp
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
add    %ch,0x6f(%ebp)
sub    $0x6b736964,%eax
add    %ah,0x25282073
jae    804f992 <_IO_stdin_used+0x6ae>
add    %ah,0x75253a75
add    %ah,0x253a7533
sub    $0x63007533,%eax
js     804f9f0 <_IO_stdin_used+0x70c>
sub    $0x6c69663e,%eax
outsb  %gs:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x6f(%edx)
add    %dh,(%ecx)
add    %dh,(%eax)
add    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    804f9f5 <_IO_stdin_used+0x711>
bound  %ebp,0x0(%ebp,%eiz,2)
jno    804fa0f <_IO_stdin_used+0x72b>
gs
jne    804fa02 <_IO_stdin_used+0x71e>
das
jb     804fa0f <_IO_stdin_used+0x72b>
je     804fa03 <_IO_stdin_used+0x71f>
je     804fa0d <_IO_stdin_used+0x729>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %ah,0x76(%ebp,%eiz,2)
imul   $0x646f6d2f,0x65(%ebx),%esp
gs
insb   (%dx),%es:(%edi)
add    %ah,0x6400646a
gs
jbe    804fa27 <_IO_stdin_used+0x743>
arpl   %sp,0x2f(%ebp)
jae    804fa37 <_IO_stdin_used+0x753>
popa
je     804fa2b <_IO_stdin_used+0x747>
add    %ah,0x2f(%ebp,%ebp,2)
jae    804fa41 <_IO_stdin_used+0x75d>
jae    804fa3e <_IO_stdin_used+0x75a>
outsb  %gs:(%esi),(%dx)
fs gs add %dh,%fs:%gs:0x75(%edx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x696c6100,0x67(%esi),%ebp
outsb  %ds:(%si),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     804fa45 <_IO_stdin_used+0x761>
outsl  %ds:(%esi),(%dx)
data16
data16
jae    804fa50 <_IO_stdin_used+0x76c>
je     804f9ed <_IO_stdin_used+0x709>
jno    804fa64 <_IO_stdin_used+0x780>
gs
jne    804fa57 <_IO_stdin_used+0x773>
das
insl   (%dx),%es:(%edi)
imul   $0x5f6d756d,0x69(%esi),%ebp
imul   $0x657a6973,0x5f(%edi),%ebp
add    %dh,0x75(%ecx)
gs
jne    804fa6d <_IO_stdin_used+0x789>
das
outsl  %ds:(%esi),(%dx)
jo     804fa80 <_IO_stdin_used+0x79c>
imul   $0x6f695f6c,0x61(%ebp),%ebp
pop    %edi
jae    804fa7f <_IO_stdin_used+0x79b>
jp     804fa7d <_IO_stdin_used+0x799>
add    %dh,0x75(%ecx)
gs
jne    804fa83 <_IO_stdin_used+0x79f>
das
jo     804fa89 <_IO_stdin_used+0x7a5>
jns    804fa96 <_IO_stdin_used+0x7b2>
imul   $0x6c625f6c,0x61(%ebx),%esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x5f(%ebx)
jae    804fa99 <_IO_stdin_used+0x7b5>
jp     804fa97 <_IO_stdin_used+0x7b3>
add    %dh,0x75(%ecx)
gs
jne    804fa9d <_IO_stdin_used+0x7b9>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x6c625f6c,0x61(%bp,%di),%esp
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x5f(%ebx)
jae    804fab2 <_IO_stdin_used+0x7ce>
jp     804fab0 <_IO_stdin_used+0x7cc>
add    %dh,0x75(%ecx)
gs
jne    804fab6 <_IO_stdin_used+0x7d2>
das
jae    804fab7 <_IO_stdin_used+0x7d3>
push   $0x6c756465
gs
jb     804fa5c <_IO_stdin_used+0x778>
jno    804fad3 <_IO_stdin_used+0x7ef>
gs
jne    804fac6 <_IO_stdin_used+0x7e2>
das
outsb  %ds:(%esi),(%dx)
jb     804fac4 <_IO_stdin_used+0x7e0>
jb     804facc <_IO_stdin_used+0x7e8>
jno    804fade <_IO_stdin_used+0x7fa>
gs
jae    804fae0 <_IO_stdin_used+0x7fc>
jae    804fa6e <_IO_stdin_used+0x78a>
fs
insl   (%dx),%es:(%edi)
das
jne    804fae8 <_IO_stdin_used+0x804>
imul   $0x706f6f,0x6c(%eax,%eax,1),%esp
insl   (%dx),%es:(%edi)
add    %ch,%fs:0x64(%ebp)
das
insb   (%dx),%es:(%edi)
gs
jbe    804faea <_IO_stdin_used+0x806>
insb   (%dx),%es:(%edi)
add    %ah,0x76(%ebp,%eiz,2)
imul   $0x7079742f,0x65(%ebx),%esp
add    %ah,%gs:0x73(%ecx,%ebp,2)
arpl   %sp,0x72(%ecx)
fs
pop    %edi
popa
insb   (%dx),%es:(%edi)
imul   $0x746e656d,0x6e(%edi),%esp
add    %dh,0x75(%ecx)
gs
jne    804fb0f <_IO_stdin_used+0x82b>
das
imul   $0x5f647261,%fs:0x63(%ebx),%esi
insl   (%dx),%es:(%edi)
popa
js     804fb16 <_IO_stdin_used+0x832>
bound  %edi,0x74(%ecx)
gs
jae    804fabd <_IO_stdin_used+0x7d9>
jno    804fb34 <_IO_stdin_used+0x850>
gs
jne    804fb27 <_IO_stdin_used+0x843>
das
imul   $0x5f647261,%fs:0x63(%ebx),%esi
jp     804fb32 <_IO_stdin_used+0x84e>
jb     804fb3e <_IO_stdin_used+0x85a>
gs
jae    804fb31 <_IO_stdin_used+0x84d>
fs
popa
je     804fb37 <_IO_stdin_used+0x853>
add    %ah,0x0(%ebp,%ebp,2)
and    $0x6e203a73,%eax
outsl  %ds:(%esi),(%dx)
je     804fb02 <_IO_stdin_used+0x81e>
popa
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x20(%ebx)
fs
gs
jbe    804fb57 <_IO_stdin_used+0x873>
arpl   %sp,0x0(%ebp)
and    $0x66203a73,%eax
popa
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jb     804fb66 <_IO_stdin_used+0x882>
popa
and    %ch,%fs:0x6e(%ecx,%ebp,2)
imul   $0x2f,(%eax),%eax
jne    804fb7f <_IO_stdin_used+0x89b>
jb     804fb3d <_IO_stdin_used+0x859>
jae    804fb78 <_IO_stdin_used+0x894>
popa
jb     804fb78 <_IO_stdin_used+0x894>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dh,%gs:0x74(%ebp)
imul   $0x78756e69,0x6c(%ebp,%ebp,1),%ebp
add    %ah,0x61(%esi)
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jo     804fb93 <_IO_stdin_used+0x8af>
jb     804fba7 <_IO_stdin_used+0x8c3>
and    %ch,%gs:0x73(%ecx,%ebp,2)
je     804fb5b <_IO_stdin_used+0x877>
daa
and    $0x2d002773,%eax
sub    $0x7761727b,%eax
sub    $0x6c,%al
imul   $0x7078652c,0x74(%ebx),%esi
outsl  %ds:(%esi),(%dx)
jb     804fbc6 <_IO_stdin_used+0x8e2>
jge    804fb54 <_IO_stdin_used+0x870>
popa
bound  %esp,0x65(%esp,%eax,2)
cmp    0x68(%esi),%ah
insb   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
cmp    0x69(%eax),%dl
jb     804fbd9 <_IO_stdin_used+0x8f5>
add    %ch,0x6c617b2d
insb   (%dx),%es:(%edi)
sub    $0x65,%al
js     804fbd3 <_IO_stdin_used+0x8ef>
insb   (%dx),%es:(%edi)
jne    804fbd7 <_IO_stdin_used+0x8f3>
gs
jge    804fb76 <_IO_stdin_used+0x892>
das
jae    804fbf2 <_IO_stdin_used+0x90e>
jae    804fbaa <_IO_stdin_used+0x8c6>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x61,(%eax),%eax
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %ch,0x6f(%esi)
fs
gs
jo     804fbfe <_IO_stdin_used+0x91a>
add    %ah,0x73(%ecx,%ebp,2)
arpl   %sp,0x72(%ecx)
add    %ch,%fs:0x65(%eax)
insb   (%dx),%es:(%edi)
jo     804fb99 <_IO_stdin_used+0x8b5>
outsl  %ds:(%esi),(%dx)
jne    804fc10 <_IO_stdin_used+0x92c>
jo     804fc13 <_IO_stdin_used+0x92f>
je     804fba0 <_IO_stdin_used+0x8bc>
jo     804fc07 <_IO_stdin_used+0x923>
jb     804fc11 <_IO_stdin_used+0x92d>
jae    804fba6 <_IO_stdin_used+0x8c2>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
push   $0x69646165
outsb  %ds:(%esi),(%dx)
addr16 jae 804fbb1 <_IO_stdin_used+0x8cd>
insb   (%dx),%es:(%edi)
imul   $0x63736100,0x74(%ebx),%esi
imul   $0x776172,0x0(%ecx),%ebp
data16
jae    804fbc3 <_IO_stdin_used+0x8df>
gs
js     804fc29 <_IO_stdin_used+0x945>
insb   (%dx),%es:(%edi)
jne    804fc2d <_IO_stdin_used+0x949>
add    %dh,%gs:0x70(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
addr16 jns 804fbd4 <_IO_stdin_used+0x8f0>
jo     804fc37 <_IO_stdin_used+0x953>
imul   $0x414e4b00,0x73(%edx),%esi
dec    %ebp
inc    %ebp
add    %ch,0x6e(%ecx)
je     804fc49 <_IO_stdin_used+0x965>
jb     804fc54 <_IO_stdin_used+0x970>
popa
insb   (%dx),%es:(%edi)
and    %ch,0x65(%ebx)
jb     804fc5b <_IO_stdin_used+0x977>
gs
insb   (%dx),%es:(%edi)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x6d616e20,0x65(%ebx),%esp
add    %cl,%gs:0x41(%ebp)
dec    %edx
cmp    0x49(%ebp),%cl
dec    %esi
add    %ch,0x61(%ebp)
push   $0x6f
jb     804fc44 <_IO_stdin_used+0x960>
insl   (%dx),%es:(%edi)
imul   $0x65642072,0x6f(%esi),%ebp
jbe    804fc7d <_IO_stdin_used+0x999>
arpl   %sp,0x20(%ebp)
outsb  %ds:(%esi),(%dx)
jne    804fc87 <_IO_stdin_used+0x9a3>
bound  %esp,0x72(%ebp)
add    %al,0x53(%esi)
push   %esp
pop    %ecx
push   %eax
inc    %ebp
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    804fca4 <_IO_stdin_used+0x9c0>
jae    804fca1 <_IO_stdin_used+0x9bd>
gs
insl   (%dx),%es:(%edi)
and    %dh,0x70(%ecx,%edi,2)
add    %cl,%gs:0x4f(%ebp)
push   %ebp
dec    %esi
push   %esp
push   %eax
dec    %edi
dec    %ecx
dec    %esi
push   %esp
add    %dh,0x68(%edi)
gs
jb     804fcaa <_IO_stdin_used+0x9c6>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x20736920,0x65(%ebx),%esp
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    804fcc6 <_IO_stdin_used+0x9e2>
je     804fcbf <_IO_stdin_used+0x9db>
add    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    804fcdb <_IO_stdin_used+0x9f7>
jae    804fcd8 <_IO_stdin_used+0x9f4>
gs
insl   (%dx),%es:(%edi)
and    %cl,0x42(%ecx,%eax,2)
inc    %ebp
dec    %esp
add    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    804fcec <_IO_stdin_used+0xa08>
jae    804fce9 <_IO_stdin_used+0xa05>
gs
insl   (%dx),%es:(%edi)
and    %dl,0x55(%ebp)
dec    %ecx
inc    %esp
add    %dh,0x65(%edx)
popa
fs
sub    $0x796c6e6f,%eax
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x4d5200,0x65(%ebx),%esp
jb     804fcf8 <_IO_stdin_used+0xa14>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    804fcf8 <_IO_stdin_used+0xa14>
bound  %ebp,0x20(%ebp,%eiz,2)
fs
gs
jbe    804fd08 <_IO_stdin_used+0xa24>
arpl   %sp,0x0(%ebp)
dec    %ebp
dec    %edi
inc    %esp
inc    %ebp
dec    %esp
add    %ah,0x76(%ebp,%eiz,2)
imul   $0x65646920,0x65(%ebx),%esp
outsb  %ds:(%esi),(%dx)
je     804fd1e <_IO_stdin_used+0xa3a>
imul   $0x7300,0x72(%ebp),%sp
imul   $0x20666f20,0x65(%edx),%edi
je     804fd2c <_IO_stdin_used+0xa48>
and    %ah,%gs:0x76(%ebp,%eiz,2)
imul   $0x41545300,0x65(%ebx),%esp
push   %esp
inc    %ebp
add    %dh,0x74(%ebx)
popa
je     804fd3d <_IO_stdin_used+0xa59>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x4e574f00,0x65(%ebx),%esp
inc    %ebp
push   %edx
add    %dh,0x73(%ebp)
gs
jb     804fd12 <_IO_stdin_used+0xa2e>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %al,%gs:0x52(%edi)
dec    %edi
push   %ebp
push   %eax
add    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    804fd72 <_IO_stdin_used+0xa8e>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
add    %cl,%gs:0x4f(%ebp)
inc    %esp
inc    %ebp
add    %ah,0x76(%ebp,%eiz,2)
imul   $0x646f6e20,0x65(%ebx),%esp
and    %dh,%gs:0x65(%eax)
jb     804fd8a <_IO_stdin_used+0xaa6>
imul   $0x736e6f69,0x73(%ebx),%esi
add    %al,0x4c(%ecx)
dec    %ecx
inc    %edi
dec    %esi
dec    %ebp
inc    %ebp
dec    %esi
push   %esp
add    %cl,0x49(%ebp)
dec    %esi
sub    $0x6d004f49,%eax
imul   $0x206d756d,0x69(%esi),%ebp
dec    %ecx
das
dec    %edi
and    %dh,0x69(%ebx)
jp     804fdab <_IO_stdin_used+0xac7>
add    %cl,0x50(%edi)
push   %esp
sub    $0x6f004f49,%eax
jo     804fdc5 <_IO_stdin_used+0xae1>
imul   $0x2f49206c,0x61(%ebp),%ebp
dec    %edi
and    %dh,0x69(%ebx)
jp     804fdc3 <_IO_stdin_used+0xadf>
add    %dl,0x48(%eax)
pop    %ecx
sub    $0x434553,%eax
jo     804fdd1 <_IO_stdin_used+0xaed>
jns    804fdde <_IO_stdin_used+0xafa>
imul   $0x6573206c,0x61(%ebx),%esp
arpl   %si,0x72(%edi,%ebp,2)
and    %dh,0x69(%ebx)
jp     804fde0 <_IO_stdin_used+0xafc>
add    %cl,0x47(%edi,%ecx,2)
sub    $0x434553,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
imul   $0x6573206c,0x61(%bp,%di),%esp
arpl   %si,0x72(%edi,%ebp,2)
and    %dh,0x69(%ebx)
jp     804fdfc <_IO_stdin_used+0xb18>
add    %dl,0x4f(%edx)
push   %esp
inc    %ecx
add    %dh,0x6f(%edx)
je     804fe02 <_IO_stdin_used+0xb1e>
je     804fe0c <_IO_stdin_used+0xb28>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x48435300,0x65(%ebx),%esp
inc    %ebp
inc    %esp
add    %cl,0x2f(%ecx)
dec    %edi
and    %dh,0x63(%ebx)
push   $0x6c756465
gs
jb     804fde3 <_IO_stdin_used+0xaff>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %dl,%gs:0x51(%edx)
sub    $0x455a4953,%eax
add    %dh,0x65(%edx)
jno    804fe49 <_IO_stdin_used+0xb65>
gs
jae    804fe4b <_IO_stdin_used+0xb67>
and    %dh,0x75(%ecx)
gs
jne    804fe42 <_IO_stdin_used+0xb5e>
and    %dh,0x69(%ebx)
jp     804fe47 <_IO_stdin_used+0xb63>
add    %ah,0x76(%ebp,%eiz,2)
imul   $0x70797420,0x65(%ebx),%esp
add    %al,%gs:0x53(%ecx,%ecx,2)
inc    %ebx
sub    $0x4e4c41,%eax
imul   $0x20647261,%fs:0x63(%ebx),%esi
popa
insb   (%dx),%es:(%edi)
imul   $0x746e656d,0x6e(%edi),%esp
and    %ch,0x66(%edi)
data16
jae    804fe74 <_IO_stdin_used+0xb90>
je     804fe11 <_IO_stdin_used+0xb2d>
inc    %esp
dec    %ecx
push   %ebx
inc    %ebx
sub    $0x4e415247,%eax
add    %ah,0x73(%ecx,%ebp,2)
arpl   %sp,0x72(%ecx)
and    %ah,%fs:0x72(%edi)
popa
outsb  %ds:(%esi),(%dx)
jne    804fe95 <_IO_stdin_used+0xbb1>
popa
jb     804fe95 <_IO_stdin_used+0xbb1>
je     804fea7 <_IO_stdin_used+0xbc3>
add    %al,0x53(%ecx,%ecx,2)
inc    %ebx
sub    $0x58414d,%eax
imul   $0x20647261,%fs:0x63(%ebx),%esi
insl   (%dx),%es:(%edi)
popa
js     804fe64 <_IO_stdin_used+0xb80>
bound  %edi,0x74(%ecx)
gs
jae    804fe4a <_IO_stdin_used+0xb66>
inc    %esp
dec    %ecx
push   %ebx
inc    %ebx
sub    $0x4f52455a,%eax
add    %ah,0x73(%ecx,%ebp,2)
arpl   %sp,0x72(%ecx)
and    %bh,%fs:0x65(%edx)
jb     804fecf <_IO_stdin_used+0xbeb>
gs
jae    804fe83 <_IO_stdin_used+0xb9f>
fs
popa
je     804fec8 <_IO_stdin_used+0xbe4>
add    %ch,-0x4ff7fb57(%eax)
test   $0x4,%al
or     %al,-0x57(%eax)
add    $0x8,%al
mov    0x180804ad,%al
lods   %ds:(%esi),%eax
add    $0x8,%al
clc
lods   %ds:(%esi),%al
add    $0x8,%al
fsubrs 0x4ac5008(%esp,%eax,1)
or     %al,(%eax)
lods   %ds:(%esi),%al
add    $0x8,%al
test   $0xac,%al
add    $0x8,%al
mov    0x280804ab,%al
stos   %eax,%es:(%edi)
add    $0x8,%al
adc    %ch,-0x5517f7fc(%ebx)
add    $0x8,%al
shrb   $0x4,-0x56cff7fc(%edx)
or     %ah,(%eax)
test   $0xa9100804,%eax
add    $0x8,%al
add    %ch,-0x571ff7fc(%ecx)
add    $0x8,%al
mov    $0xaa,%al
add    $0x8,%al
fsubs  -0x555ff7fc(%edi)
add    $0x8,%al
adc    %ch,-0x523ff7fc(%edx)
add    $0x8,%al
add    %ch,-0x522ff7fc(%esi)
add    $0x8,%al
enter  $0x4a9,$0x8
xor    %ch,-0x51d4f7fc(%esi)
add    $0x8,%al
xor    %ch,-0x51cff7fc(%esi)
add    $0x8,%al
jo     804feb0 <_IO_stdin_used+0xbcc>
add    $0x8,%al
jo     804feb4 <_IO_stdin_used+0xbd0>
add    $0x8,%al
xor    %ch,-0x5181f7fc(%esi)
add    $0x8,%al
xor    %ch,-0x51cff7fc(%esi)
add    $0x8,%al
xor    %ch,-0x51cff7fc(%esi)
add    $0x8,%al
sub    -0x51cff7fc(%esi),%ebp
add    $0x8,%al
ja     804fed8 <_IO_stdin_used+0xbf4>
add    $0x8,%al
rcrl   -0x64e4f7fc(%edx)
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
ret    $0x49a
or     %bl,(%ebx)
fwait
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
sbb    -0x654bf7fc(%ebx),%ebx
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lcall  $0x804,$0x9b1b0804
cwtl
lcall  $0x804,$0x99bb0804
jl     804ff4f <_IO_stdin_used+0xc6b>
add    $0x8,%al
sbb    -0x668df7fc(%ebx),%ebx
add    $0x8,%al
push   $0x1b080499
fwait
add    $0x8,%al
sbb    -0x66acf7fc(%ebx),%ebx
add    $0x8,%al
or     %ebx,-0x6700f7fc(%ecx)
add    $0x8,%al
ret
cwtl
add    $0x8,%al
sbb    -0x64e4f7fc(%ebx),%ebx
add    $0x8,%al
mov    $0x98,%ah
add    $0x8,%al
sbb    -0x67c1f7fc(%ebx),%ebx
add    $0x8,%al
js     8050064 <_IO_stdin_used+0xd80>
gs
popa
fs imul $0x7473696c,%fs:0x0(%edx),%esi
74
pop    %edi
push   $0x65646c6f
jb     8050078 <_IO_stdin_used+0xd94>
add    %ah,0x65(%edi)
je     8050069 <_IO_stdin_used+0xd85>
fs
gs
jbe    8050077 <_IO_stdin_used+0xd93>
arpl   %sp,0x5f(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    8050083 <_IO_stdin_used+0xd9f>
je     8050087 <_IO_stdin_used+0xda3>
outsl  %ds:(%esi),(%dx)
imul   $0x5f736900,0x74(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
push   $0x5f
gs
js     8050089 <_IO_stdin_used+0xda5>
insb   (%dx),%es:(%edi)
jne    805008d <_IO_stdin_used+0xda9>
gs add %ah,%fs:%gs:0x65(%edi)
je     805008f <_IO_stdin_used+0xdab>
fs
gs
jbe    805009d <_IO_stdin_used+0xdb9>
arpl   %sp,0x5f(%ebp)
jo     805009a <_IO_stdin_used+0xdb6>
je     80500a3 <_IO_stdin_used+0xdbf>
add    %ah,0x65(%edi)
je     805009f <_IO_stdin_used+0xdbb>
arpl   %bp,0x6c(%edi)
jne    80500b2 <_IO_stdin_used+0xdce>
outsb  %ds:(%esi),(%dx)
pop    %edi
imul   $0x0,0x0(%eax,%eax,1),%esp
add    %al,0x804fb(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
inc    %esp
incb   (%eax,%ecx,1)
bound  %eax,(%eax)
add    %al,(%eax)
test   %edi,%ebx
add    $0x8,%al
add    %al,%fs:(%eax)
add    %cl,0x804(%ebx,%edi,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,0x804(%ebx,%edi,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   $0x99000000
sti
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
outsl  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %ah,0x804fb(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ebp)
add    %al,(%eax)
cmpsb  %es:(%edi),%ds:(%esi)
sti
add    $0x8,%al
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %dh,0x804fb(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %dh,0x804fb(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ecx)
add    %al,(%eax)
mov    $0x804fb,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
sar    $0x4,%bl
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
ret
sti
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,%gs:(%eax)
add    %cl,%bl
sti
add    $0x8,%al
je     805013e <_IO_stdin_used+0xe5a>
add    %al,(%eax)
aam    $0xfb
add    $0x8,%al
push   %eax
add    %al,(%eax)
add    %ch,(%edi)
jae    80501dc <_IO_stdin_used+0xef8>
jae    8050194 <_IO_stdin_used+0xeb0>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jae    805019d <_IO_stdin_used+0xeb9>
fs
insl   (%dx),%es:(%edi)
das
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ch,%gs:(%edi)
fs
gs
jbe    80501aa <_IO_stdin_used+0xec6>
insl   (%dx),%es:(%edi)
popa
jo     80501ef <_IO_stdin_used+0xf0b>
gs
jb     80501b1 <_IO_stdin_used+0xecd>
and    $0x642f0073,%eax
insl   (%dx),%es:(%edi)
sub    $0x72702f00,%eax
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
jae    8050209 <_IO_stdin_used+0xf25>
popa
jo     8050208 <_IO_stdin_used+0xf24>
add    %al,0x69(%esi)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
or     %eax,%gs:(%eax)
das
imul   $0x746e756f,%cs:0x6d(%ebx),%esi
sub    $0x74736574,%eax
sub    $0x656c6966,%eax
add    %bh,(%ebx,%esi,2)
ja     8050219 <_IO_stdin_used+0xf35>
jo     80501f8 <_IO_stdin_used+0xf14>
add    %ch,(%edi)
jo     8050230 <_IO_stdin_used+0xf4c>
outsl  %ds:(%esi),(%dx)
arpl   %bp,(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jne    8050233 <_IO_stdin_used+0xf4f>
je     805023a <_IO_stdin_used+0xf56>
add    %ch,(%edi)
gs
je     805022f <_IO_stdin_used+0xf4b>
das
insl   (%dx),%es:(%edi)
je     8050231 <_IO_stdin_used+0xf4d>
bound  %eax,(%eax)
and    %ah,(%eax)
add    %ah,0x25223d73
jae    80501fe <_IO_stdin_used+0xf1a>
add    %ah,0x2500732a
sub    0x20(%ebx),%dh
add    %ah,0x732573
push   %ebp
push   %esp
inc    %esi
sub    $0x94e20038,%eax
pushf
loop   805018a <_IO_stdin_used+0xea6>
addb   $0xe2,(%eax)
xchg   %eax,%esp
(bad)
and    %al,(%eax)
loop   8050193 <_IO_stdin_used+0xeaf>
xchg   %eax,%esp
loop   8050196 <_IO_stdin_used+0xeb2>
addb   $0x7c,(%eax)
sub    $0x207c00,%eax
pusha
sub    $0x0,%eax
icebp
add    %eax,0x501f808
or     %bh,%ch
add    %eax,0x5020408
or     %al,(%edi)
add    0x5020a08,%al
or     %ch,%cl
xlat   %ds:(%ebx)
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
and    %edi,%edx
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
xchg   %eax,%edi
fadds  (%eax,%ecx,1)
push   $0xffffffd5
add    $0x8,%al
sbb    $0xda,%al
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
js     805022f <_IO_stdin_used+0xf4b>
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
or     %dh,%dl
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
int    $0xd8
add    $0x8,%al
test   %dl,%ch
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
jmp    720d0784 <optarg+0x6a07d360>
aad    $0x4
or     %ah,(%ebx)
xlat   %ds:(%ebx)
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
xchg   %eax,%edi
fadds  (%eax,%ecx,1)
push   $0xffffffd5
add    $0x8,%al
sbb    $0xda,%al
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
js     80502af <_IO_stdin_used+0xfcb>
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
push   $0xffffffd5
add    $0x8,%al
or     %dh,%dl
add    $0x8,%al
and    $0x27203a73,%eax
and    $0x2e002773,%eax
add    %al,0x4b(%edx)
dec    %ebp
inc    %edi
push   %esp
push   %eax
inc    %ebp
add    %ah,0x25732564
push   $0x64
and    $0x64250073,%eax
and    $0x75710073,%eax
gs
jne    8050374 <_IO_stdin_used+0x1090>
das
add    %ch,(%edi)
jae    805038d <_IO_stdin_used+0x10a9>
jae    8050345 <_IO_stdin_used+0x1061>
fs
gs
jbe    8050349 <_IO_stdin_used+0x1065>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
cmp    %fs:0x73252f64,%ah
add    %ch,(%edi)
jae    80503a5 <_IO_stdin_used+0x10c1>
jae    805035d <_IO_stdin_used+0x1079>
fs
gs
jbe    8050361 <_IO_stdin_used+0x107d>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
cmp    %fs:0x642f0064,%ah
gs
jbe    8050372 <_IO_stdin_used+0x108e>
add    %ch,(%edi)
jae    80503c0 <_IO_stdin_used+0x10dc>
jae    8050378 <_IO_stdin_used+0x1094>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jae    8050381 <_IO_stdin_used+0x109d>
and    $0x65642f73,%eax
jbe    8050359 <_IO_stdin_used+0x1075>
das
jae    80503d5 <_IO_stdin_used+0x10f1>
jae    805038d <_IO_stdin_used+0x10a9>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x25,(%edi),%ebp
jae    8050396 <_IO_stdin_used+0x10b2>
fs
gs
jbe    805036b <_IO_stdin_used+0x1087>
and    $0x74732f73,%eax
popa
jb     80503e7 <_IO_stdin_used+0x1103>
add    %ah,0x646c6c
and    $0x756c6c,%eax
and    $0x34323031,%eax
pop    %ebx
pop    %esi
or     0x0(%ebp),%bl
add    %ebx,(%ebx)
add    (%ebx),%edi
mov    %al,(%edx)
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %cl,(%eax)
mov    %edi,%?
jmp    *-0x6c580000(%edx,%eax,1)
(bad)
dec    %eax
add    (%eax),%al
add    %ah,%dh
xchg   %eax,%ebx
(bad)
jmp    *-0x6bf80000(%ebx,%eax,1)
(bad)
jmp    *-0x67fffffb(%eax)
fwait
(bad)
jmp    *%esp
add    (%eax),%al
add    %bl,%al
pushf
(bad)
incl   (%ebx,%eax,1)
add    %al,(%eax)
test   $0x9d,%al
(bad)
pushl  (%ebx,%eax,1)
add    %al,(%eax)
cmp    %bl,0x388ffff(%esi)
add    %al,(%eax)
test   $0x9e,%al
(bad)
(bad)
mov    $0x8000003,%eax
lahf
(bad)
(bad)
faddl  (%ebx)
add    %al,(%eax)
clc
lahf
(bad)
decl   (%esp,%eax,1)
add    %al,(%eax)
js     8050390 <_IO_stdin_used+0x10ac>
(bad)
decl   0x0(%esp,%eax,1)
add    %bh,%al
mov    %eax,0x494ffff
add    %al,(%eax)
js     80503ab <_IO_stdin_used+0x10c7>
(bad)
call   *%esp
add    $0x0,%al
add    %bl,%al
lods   %ds:(%esi),%eax
(bad)
decl   (%eax)
add    $0xaf780000,%eax
(bad)
jmp    *0x5(%eax)
add    %al,(%eax)
push   $0xd0ffffb2
add    $0xb3b80000,%eax
(bad)
call   *(%esi,%eax,1)
add    %al,(%eax)
sbb    %dh,0x654ffff(%edi)
add    %al,(%eax)
or     %bh,0x698ffff(%ecx)
add    %al,(%eax)
call   fd0503f5 <optarg+0xf4ffcfd1>
push   %es
add    %al,(%eax)
sub    %bh,0x74cffff(%esi)
add    %al,(%eax)
js     8050404 <_IO_stdin_used+0x1120>
(bad)
jmp    *0x0(%edi,%eax,1)
add    %cl,(%eax)
mov    $0x7bcffff,%edi
add    %al,(%eax)
pop    %eax
sar    $0xff,%edi
adc    $0x8,%al
add    %al,(%eax)
push   $0x6cffffc2
or     %al,(%eax)
add    %bl,%al
ret    $0xffff
test   $0x8,%al
add    %al,(%eax)
sbb    %al,%bl
(bad)
jmp    *%esp
or     %al,(%eax)
add    %ch,0x20ffffc3(%eax)
or     %eax,(%eax)
add    %bh,(%eax)
(bad)
(bad)
lcall  *0x9(%eax)
add    %al,(%eax)
mov    %al,%ah
(bad)
decl   -0x3b180000(%ecx,%ecx,1)
(bad)
inc    %esp
or     %eax,(%eax)
add    %ch,-0x3b(%eax)
(bad)
push   %esp
or     %eax,(%eax)
add    %bh,(%eax)
(bad)
(bad)
decl   0x0(%edx,%ecx,1)
add    %ch,-0x3a(%eax)
(bad)
jmp    *0xa(%eax)
add    %al,(%eax)
or     %al,%bh
(bad)
dec    %eax
or     (%eax),%al
add    %ch,(%eax)
(bad)
(bad)
(bad)
fmull  (%edx)
add    %al,(%eax)
sbb    %cl,%ah
(bad)
lcall  *(%ebx,%ecx,1)
add    %al,(%eax)
js     8050492 <_IO_stdin_used+0x11ae>
(bad)
call   *0x0(%ebx,%ecx,1)
add    %ch,(%eax)
int    $0xff
call   *-0x2f380000(%ebx,%ecx,1)
(bad)
call   *%esp
or     (%eax),%eax
add    %ch,(%eax)
xlat   %ds:(%ebx)
(bad)
ljmp   *(%esp,%ecx,1)
add    %al,(%eax)
js     80504bd <_IO_stdin_used+0x11d9>
(bad)
jmp    *0x0(%esp,%ecx,1)
add    %cl,%al
xlat   %ds:(%ebx)
(bad)
call   *-0x77fffff4(%eax)
fdivr  %st(7),%st
(bad)
mov    $0x4800000c,%esp
fcos
(bad)
call   10050511 <optarg+0x7ffd0ed>
(bad)
call   *-0x24680000(,%ecx,1)
(bad)
ljmp   *(%eax)
or     $0xde080000,%eax
(bad)
ljmp   *0xd(%eax)
add    %al,(%eax)
fcomp  %st(6)
(bad)
call   *%eax
or     $0xdf780000,%eax
(bad)
ljmp   *(%eax)
push   %cs
add    %al,(%eax)
or     %ah,%al
(bad)
ljmp   *0xe(%eax)
add    %al,(%eax)
dec    %eax
loopne 8050536 <_IO_stdin_used+0x1252>
decl   -0x1ec80000(%esi,%ecx,1)
(bad)
dec    %esp
push   %cs
add    %al,(%eax)
fsub   %st(1),%st
(bad)
push   %esp
push   %cs
add    %al,(%eax)
sbb    %ah,%dl
(bad)
decl   (%edi,%ecx,1)
add    %al,(%eax)
sub    %ah,%ah
(bad)
call   *0xf(%eax)
add    %al,(%eax)
js     8050542 <_IO_stdin_used+0x125e>
(bad)
pushl  0x0(%edi,%ecx,1)
add    %bh,-0x1b(%eax)
(bad)
pushl  -0x19d80000(%edi,%ecx,1)
(bad)
decl   (%eax)
adc    %al,(%eax)
add    %ch,-0x1a(%eax)
(bad)
jmp    *(%eax)
adc    %al,(%eax)
add    %cl,%al
out    %al,$0xff
decl   0x0(%eax,%edx,1)
add    %bh,(%eax)
out    %eax,$0xff
(bad)
js     805059a <_IO_stdin_used+0x12b6>
add    %al,(%eax)
sbb    %ch,%al
(bad)
(bad)
mov    $0x78000010,%eax
call   18ee0599 <optarg+0x10e8d175>
add    %al,(%eax)
call   15050589 <optarg+0xcffd165>
adc    %eax,(%eax)
add    %bl,-0x17(%eax)
(bad)
pushl  (%eax)
adc    %eax,(%eax)
add    %bh,0x54ffffe9(%eax)
adc    %eax,(%eax)
add    %ch,(%eax)
ljmp   $0x0,$0x117cffff
js     80505a8 <_IO_stdin_used+0x12c4>
(bad)
pushl  -0x15180000(%ecx,%edx,1)
(bad)
(bad)
cld
adc    %eax,(%eax)
add    %bl,-0x15(%eax)
(bad)
(bad)
cmp    %dl,(%edx)
add    %al,(%eax)
fsubr  %st(3),%st
(bad)
ljmp   *0x12(%eax)
add    %al,(%eax)
fsubr  %st(4),%st
(bad)
(bad)
mov    $0x8000012,%esp
in     (%dx),%eax
(bad)
call   *%eax
adc    (%eax),%al
add    %ch,(%eax)
in     (%dx),%eax
(bad)
jmp    *%esp
adc    (%eax),%al
add    %bh,-0x13(%eax)
(bad)
call   *(%eax)
adc    (%eax),%eax
add    %bl,0x24ffffed(%eax)
adc    (%eax),%eax
add    %cl,%al
out    %al,(%dx)
(bad)
call   *0x38000013(%eax)
out    %eax,(%dx)
(bad)
dec    %esp
adc    (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805062b <_IO_stdin_used+0x1347>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
mov    %edi,%edi
jmp    *0x5(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805064b <_IO_stdin_used+0x1367>
js     8050649 <_IO_stdin_used+0x1365>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,%al
nop
(bad)
(bad)
add    %al,%ds:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pop    %esp
add    %al,(%eax)
add    %ch,0x133ffff(%eax,%ebx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
jl     8050692 <_IO_stdin_used+0x13ae>
add    %al,(%eax)
int3
cltd
(bad)
inc    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%edi)
add    0x41080e0a(%ebp),%al
(bad)
push   %cs
add    $0x44,%al
or     0xa(%esi),%eax
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,0x0(%eax)
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %al,(%eax)
add    %ch,-0x1(%edx,%ebx,4)
decl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x65,0x2300e48
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %ch,0x63ffff9a(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %dl,0xa(%edi)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,(%ecx,%eax,1)
add    %al,(%eax)
cmp    0x17ffff(%eax),%dl
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %eax,(%eax)
add    %ch,%al
lcall  $0x0,$0x60ffff
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
push   %esp
add    %eax,(%eax)
add    %ah,(%ebx,%ebx,4)
(bad)
(bad)
in     (%dx),%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %esi
push   %cs
shlb   $0x2,(%eax)
orl    $0xc6410c0e,(%edx)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
test   %al,(%ecx)
add    %al,(%eax)
in     $0x9b,%al
(bad)
pushl  0x2(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffca,0x3400e45
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%eax
add    %al,%ah
add    %eax,(%eax)
add    %ah,(%esi,%ebx,4)
(bad)
pushl  0x1(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4504(%ebx)
or     %gs:(%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
dec    %eax
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
or     $0x2,%al
add    %al,(%eax)
pop    %esp
lahf
(bad)
(bad)
jge    8050833 <_IO_stdin_used+0x154f>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x29800e48
hlt
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%esi
add    %al,(%eax)
add    %cl,0x0(%edx,%eax,1)
add    %bl,0x5affff(%eax,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0x10(%esi,%ecx,1),%cl
inc    %ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %al,-0x37fffffe(%eax)
test   $0xff,%al
call   *0x1(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6b,0x2800e48
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
clc
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
fadds  (%edx)
add    %al,(%eax)
adc    %ch,0x2e5ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %esi
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x44a00e46
lods   %ds:(%esi),%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
sbb    %al,(%ebx)
add    %al,(%eax)
pusha
mov    %edi,%?
lcall  *0x6(%eax)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa04cd03,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     0x0(%eax),%eax
add    %al,(%eax)
dec    %eax
add    (%eax),%eax
add    %dl,0x45ffffac(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x4d00e46
sbb    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    %es,(%ebx)
add    %al,(%eax)
pushf
lods   %ds:(%esi),%eax
(bad)
call   *0x3(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x40d00e46
jmp    80509d2 <_IO_stdin_used+0x16ee>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax),%eax
add    %al,(%eax)
int3
add    (%eax),%eax
add    %bh,0x1e2ffff(%eax,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9b00e46
sub    %al,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %dl,(%eax)
add    $0x0,%al
add    %ch,-0x4e(%eax)
(bad)
(bad)
flds   (%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x1b00e46
sbb    $0x2,%al
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%ebx),%eax
push   %ebp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ch,0x0(%esp,%eax,1)
add    %ch,%ah
mov    $0xff,%ch
pushl  (%ebx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1900e43
jbe    8050ab2 <_IO_stdin_used+0x17ce>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %ecx
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    $0x0,%al
add    %al,(%eax)
les    (%eax,%eax,1),%eax
add    %dl,%ah
mov    $0xff,%dh
incl   0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %bh,0xe(%esi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %bl,%ah
add    $0x0,%al
add    %cl,(%edi,%esi,4)
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4f,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %dh,-0x48bc0000(,%eax,1)
(bad)
incl   0x0(%edx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x63,0x2500e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
decl   (%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %dl,0x0(%eax,%eax,1)
add    %cl,-0x46c40000(%ebp,%eax,1)
(bad)
decl   (%edx)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffa4,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edx),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
in     $0x5,%al
add    %al,(%eax)
hlt
mov    $0x68ffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x56,0x2300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %ah,(%eax)
push   %es
add    %al,(%eax)
sub    %bh,0x3affff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x68200e45
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
pop    %esp
push   %es
add    %al,(%eax)
sub    $0xba,%al
(bad)
decl   0x0(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7b,0x2400e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %bl,-0x7ffffffa(%eax)
mov    $0x84ffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebx),%cl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,%al
push   %es
add    %al,(%eax)
fdivrs 0x46ffff(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jl     8050d13 <_IO_stdin_used+0x1a2f>
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
add    $0x7,%al
add    %al,(%eax)
hlt
mov    $0x56ffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xa(%esi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     0xe(%ebx),%eax
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
cmp    $0x7,%al
add    %al,(%eax)
sbb    $0xbb,%al
(bad)
(bad)
jle    8050d5a <_IO_stdin_used+0x1a76>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
or     %gs:(%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ch,0x0(%edi,%eax,1)
add    %ch,-0x1(%ebx,%edi,4)
dec    %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff97,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edi),%edx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
les    (%edi),%eax
add    %al,(%eax)
in     $0xbb,%al
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %bl,%al
pop    %es
add    %al,(%eax)
add    %bh,0x97ff(%edi,%edi,8)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x6f,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,0x8(%eax)
add    %al,(%eax)
cmp    %bh,0x18ff(%edi,%edi,8)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
or     %al,(%eax)
add    %al,-0x1(%esp,%edi,4)
jmp    *%ecx
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffce,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
or     %al,(%eax)
add    %dh,%ah
sar    $0xff,%bh
pop    %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ecx),%cl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
int3
or     %al,(%eax)
add    %bl,(%ecx,%eax,8)
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x69,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
or     $0x9,%al
add    %al,(%eax)
mov    %es,%ecx
(bad)
lcall  *0x3(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7c,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%edx
add    %cl,0x0(%ecx,%ecx,1)
add    %ch,%ah
(bad)
(bad)
call   *0x6(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffda,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%esi
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
or     %eax,(%eax)
add    %dh,%ah
lret   $0xffff
push   %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %bh,0xa(%ebx)
push   %cs
or     $0x44,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%ebx),%eax
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
fmull  (%ecx)
add    %al,(%eax)
or     $0xcb,%al
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xec37f04(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %cl,(%eax)
or     (%eax),%al
add    %dh,(%eax)
lret
(bad)
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
stos   %eax,%es:(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax)
add    %al,(%eax)
add    %dh,(%edx,%ecx,1)
add    %al,(%eax)
(bad)
lret
(bad)
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
stos   %eax,%es:(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax)
add    %al,(%eax)
add    %ah,0xa(%eax)
add    %al,(%eax)
pop    %eax
int3
(bad)
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
stos   %eax,%es:(%edi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,-0x33140000(%edx,%ecx,1)
(bad)
call   *0x1(%eax)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    0x6800000a,%al
into
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1900e43
ret    $0xe0a
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0x0(%eax,%eax,1),%esp
add    %ah,%al
or     (%eax),%al
add    %bl,-0x35000030(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff9b,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx),%eax
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %cl,0xb(%eax)
add    %al,(%eax)
add    %dl,%cl
(bad)
lcall  *0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
mov    0x4800000b,%al
sar    %edi
incl   0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6c400e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,%al
or     (%eax),%eax
add    %bl,0x3cffffd1(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ebx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
add    $0xc,%al
add    %al,(%eax)
mov    $0xd1,%ah
(bad)
(bad)
in     (%dx),%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7d,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
inc    %esp
or     $0x0,%al
add    %ah,-0x1(%edx,%edx,8)
call   *0x0(%edx)
inc    %ecx
push   %cs
or     %al,-0x5ff1b9fe(%ebx)
and    %eax,(%edx)
test   %cl,(%edx)
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
or     $0x0,%al
add    %bl,%ah
sar    %cl,%bh
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
inc    %eax
add    %al,(%eax)
add    %al,-0x2cfc0000(%esp,%ecx,1)
(bad)
incl   (%edx)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4604(%esi)
addl   $0x3,0x21b00e46
xchg   %al,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
enter  $0xc,$0x0
rcl    %ah
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
add    0xe(%edi),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
or     $0x0,%al
add    %bh,%ah
aam    $0xff
(bad)
sti
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x20d00e46
out    %eax,$0xa
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax),%edx
add    %al,(%eax)
sub    $0xd,%al
add    %al,(%eax)
mov    $0xa1ffffd5,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x45,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
orb    $0xff,0xd6180000
pushl  (%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
addb   $0x6a,(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %bl,0x4000000d(%eax)
(bad)
(bad)
lcall  *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
jne    80513cd <_IO_stdin_used+0x20e9>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%edx),%edx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax)
add    %al,(%eax)
add    %al,%ah
or     $0xd6740000,%eax
(bad)
ljmp   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %ch,0xe(%edx,%ecx,1)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
lock or $0xd6b80000,%eax
(bad)
(bad)
fild   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2,0x2d00e46
inc    %esi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
xor    %cl,(%esi)
add    %al,(%eax)
pop    %eax
xlat   %ds:(%ebx)
(bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esi
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pusha
push   %cs
add    %al,(%eax)
mov    %dl,%bh
(bad)
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0xa(%ebx),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%esp
add    %al,(%eax)
add    %al,-0x282c0000(%esi,%ecx,1)
(bad)
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0xa(%ebx),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%esp
add    %al,(%eax)
add    %ch,0x2000000e(%eax)
fdivr  %st(7),%st
lcall  *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0xe(%edx,%ecx,1),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%esp
add    %al,(%eax)
int3
push   %cs
add    %al,(%eax)
pop    %esp
fdivr  %st(7),%st
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x4ff1b9fe(%ebx)
or     %al,(%edx)
bound  %ecx,(%edx)
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
hlt
push   %cs
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
fdivr  %st(7),%st
call   *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xe(%edx,%ecx,1)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%ebx),%eax
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %ch,(%edi,%ecx,1)
add    %al,(%eax)
mov    $0x69ffffd8,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%esi),%cl
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
je     8051599 <_IO_stdin_used+0x22b5>
add    %al,(%eax)
in     $0xd8,%al
(bad)
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esp
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ebx),%ecx
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
mov    $0xf,%al
add    %al,(%eax)
sbb    %bl,%cl
(bad)
pushl  0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%edx)
data16
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %ah,%al
sldt   (%eax)
push   $0xfdffffd9
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e46
fmull  (%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%esi),%eax
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
xor    $0x10,%al
add    %al,(%eax)
adc    $0xda,%al
(bad)
jmp    *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x10(%eax)
add    %al,(%eax)
xor    %bl,%dl
(bad)
call   *0x0
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bl,0x0(%eax,%edx,1)
add    %bh,(%edx,%ebx,8)
(bad)
decl   0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
ja     8051691 <_IO_stdin_used+0x23ad>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x60000010(%eax)
(bad)
lcall  *0x0
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
pushf
adc    %al,(%eax)
add    %ch,-0x1(%edx,%ebx,8)
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
adc    %eax,(%eax)
add    %dh,(%eax)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %al,0x0(%ecx,%edx,1)
add    %ah,-0x1(%ebx,%ebx,8)
incl   (%edx)
lock sahf
add    $0x8,%al
.byte 0xd0
sahf
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
sbb    $0xc000001,%eax
add    %al,(%eax)
add    %ah,0x4(%ecx,%edx,4)
or     %cl,0xc4000000
repnz add $0x8,%al
sbb    %eax,(%eax)
add    %al,(%eax)
add    %ch,(%edi)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
add    $0x2f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
sub    $0x88,%al
add    $0x8,%al
push   %es
add    %al,(%eax)
add    %ch,%ah
addl   $0xa,(%eax,%ecx,1)
mov    $0x4,%bh
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
xor    %al,0x208
add    %cl,%al
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %bl,0x110804(%esi,%ecx,4)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    (%eax,%ecx,1),%es
adc    (%eax),%al
add    %al,(%eax)
xor    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *-0x54(%edi)
lea    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x1c(%edi)
mov    %es,(%eax,%ecx,1)
add    %al,(%eax)
or     $0x2f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,-0x49f7fb6f(%esi)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8052fd4 <_IO_stdin_used+0x3cf0>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    8053015 <_IO_stdin_used+0x3d31>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebx
add    $0x8,%al
mov    $0x93,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
(bad)
xchg   %eax,%ebx
add    $0x8,%al
out    %al,$0x93
add    $0x8,%al
notb   -0x6bf9f7fc(%ebx)
add    $0x8,%al
push   %ss
xchg   %eax,%esp
add    $0x8,%al
es
xchg   %eax,%esp
add    $0x8,%al
ss
xchg   %eax,%esp
add    $0x8,%al
inc    %esi
xchg   %eax,%esp
add    $0x8,%al
push   %esi
xchg   %eax,%esp
add    $0x8,%al
xchg   %ax,%sp
add    $0x8,%al
jbe    8053056 <_IO_stdin_used+0x3d72>
add    $0x8,%al
xchg   %dl,0x4949608(%esp,%eax,1)
or     %ah,-0x49f7fb6c(%esi)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
(bad)
xchg   %eax,%esp
add    $0x8,%al
out    %al,$0x94
add    $0x8,%al
notb   0x4950608(%esp,%eax,1)
or     %dl,(%esi)
xchg   %eax,%ebp
add    $0x8,%al
es
xchg   %eax,%ebp
add    $0x8,%al
ss
xchg   %eax,%ebp
add    $0x8,%al
inc    %esi
xchg   %eax,%ebp
add    $0x8,%al
push   %esi
xchg   %eax,%ebp
add    $0x8,%al
xchg   %ax,%bp
add    $0x8,%al
jbe    8053097 <_IO_stdin_used+0x3db3>
add    $0x8,%al
xchg   %dl,-0x6a69f7fc(%ebp)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ebp
add    $0x8,%al
mov    $0x95,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ebp
add    $0x8,%al
(bad)
xchg   %eax,%ebp
add    $0x8,%al
out    %al,$0x95
add    $0x8,%al
notb   -0x69f9f7fc(%ebp)
add    $0x8,%al
push   %ss
xchg   %eax,%esi
add    $0x8,%al
es
xchg   %eax,%esi
add    $0x8,%al
ss
xchg   %eax,%esi
add    $0x8,%al
inc    %esi
xchg   %eax,%esi
add    $0x8,%al
push   %esi
xchg   %eax,%esi
add    $0x8,%al
xchg   %ax,%si
add    $0x8,%al
jbe    80530d8 <_IO_stdin_used+0x3df4>
add    $0x8,%al
xchg   %dl,-0x6969f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%esi
add    $0x8,%al
mov    $0x96,%dh
add    $0x8,%al
(bad)
xchg   %eax,%esi
add    $0x8,%al
(bad)
xchg   %eax,%esi
add    $0x8,%al
out    %al,$0x96
add    $0x8,%al
notb   -0x68f9f7fc(%esi)
add    $0x8,%al
push   %ss
xchg   %eax,%edi
add    $0x8,%al
es
xchg   %eax,%edi
add    $0x8,%al
(bad)
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sarb   (%edi)
inc    %eax
add    %al,(%eax)
add    %dh,%al
sti
add    $0x8,%al
(bad)
add    $0x8,%al
xor    (%ebx),%esi
xor    (%ebx),%esi
xor    (%ebx),%esi
sarl   %cl,(%edi)
add    %al,(%eax)
add    %al,(%eax)
loopne 80531c1 <_IO_stdin_used+0x3edd>
add    $0x8,%al
cld
sti
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,0x0(%eax)
add    %al,(%eax)
add    %al,(%esp,%edi,8)
add    $0x8,%al
push   %ds
cld
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
and    %al,(%eax)
add    %al,(%eax)
and    $0x350804fc,%eax
cld
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
and    %al,(%eax)
add    %al,(%eax)
inc    %eax
cld
add    $0x8,%al
addr16 cld
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
add    %al,(%eax)
add    %al,(%eax)
pop    %esp
cld
add    $0x8,%al
js     8053216 <_IO_stdin_used+0x3f32>
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %edx
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
insl   (%dx),%es:(%edi)
cld
add    $0x8,%al
push   %ecx
incb   (%eax,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lock aas
addb   $0x0,(%eax)
add    %bh,-0x4(%ebp)
add    $0x8,%al
mov    %esp,%?
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lock aas
addb   $0x0,(%eax)
add    %dl,-0x5df7fb04(%ecx)
cld
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
and    %al,(%eax)
add    %al,(%eax)
test   $0xfc,%al
add    $0x8,%al
lret
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %bh,-0x32f7fb04(%edx)
cld
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x40,%al
and    %al,(%eax)
add    %al,(%eax)
sar    %cl,%esp
add    $0x8,%al
out    %eax,$0xfc
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
and    %al,(%eax)
add    %al,(%eax)
in     (%dx),%eax
cld
add    $0x8,%al
idiv   %esp
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
and    %al,(%eax)
add    %al,(%eax)
std
cld
add    $0x8,%al
or     %bh,%ch
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    $0x40,%al
add    %al,(%eax)
add    %al,(%eax)
or     $0x250804fd,%eax
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %al,(%eax)
incb   (%eax,%ecx,1)
das
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %dh,(%esi)
std
add    $0x8,%al
inc    %edi
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %cl,-0x3(%esi)
add    $0x8,%al
pop    %edi
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x40,%al
addb   $0x0,(%eax)
add    %ah,-0x3(%edi)
add    $0x8,%al
jl     805331b <_IO_stdin_used+0x4037>
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    $0x40,%al
addb   $0x0,(%eax)
add    %al,-0x267f7fc(%ebp,%edi,8)
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lock aas
addb   $0x0,(%eax)
add    %bl,-0x50f7fb03(%ebp)
std
add    $0x8,%al
lcall  $0xb999,$0x99999999
aas
add    %al,(%eax)
add    %al,(%eax)
mov    $0xfd,%ch
add    $0x8,%al
enter  $0x4fd,$0x8
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x40,%al
addb   $0x0,(%eax)
add    %dl,%al
std
add    $0x8,%al
and    %bh,%ah
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,0x0(%eax)
add    %al,(%eax)
add    %ah,%bl
std
add    $0x8,%al
out    %eax,(%dx)
std
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %bh,%al
std
add    $0x8,%al
adc    %edi,%esi
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %bl,(%ebx)
incb   (%eax,%ecx,1)
das
incb   (%eax,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sbb    %al,-0x80(%eax)
add    %al,(%eax)
add    %bh,(%eax)
incb   (%eax,%ecx,1)
dec    %edx
incb   (%eax,%ecx,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
lock aas
addb   $0x0,(%eax)
add    %dl,0x4(%esi,%edi,8)
.byte 0x8
add    %al,(%eax)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
jae    65 <__snprintf_chk@plt-0x804913b>
insb   (%dx),%es:(%edi)
imul   $0x0,(%eax),%eax
add    %al,%al
.byte 0x69
push   %ds
.byte 0xc2
