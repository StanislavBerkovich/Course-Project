das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %dh,0x5f702329
test   %al,(%esi)
mov    $0xe0,%cl
ret
cmp    %bh,%cl
sub    0x11ccd1d0(%edx),%cl
.byte 0xa1
.byte 0xd8
add    (%eax),%eax
add    %al,(%eax)
dec    %eax
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,-0x4dffbbe0(%edx)
and    %ecx,0x22804048(%esi,%edx,4)
mov    0x4804000c,%al
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %dl,0x0(%ebp)
add    %al,(%eax)
fmull  0x61(%ebx)
(bad)
sub    %bl,0x390c1c8c
mov    -0xd8ffa05(%edx),%dl
mov    $0x389e7650,%esp
repnz mov (%esi,%eax,4),%ebx
lock xchg %eax,%esi
jl     80481c3 <strcmp@plt-0xd5d>
sub    $0x63,%al
jb     804823b <strcmp@plt-0xce5>
ret
mov    %dl,-0x3f1cb454(%edx)
push   %bp
popa
adc    %dl,-0x1a687660(%esi)
bound  %eax,-0xb(%ecx)
xor    %ah,%al
notl   (%edx)
cmpsb  %es:(%edi),%ds:(%esi)
inc    %ebp
loop   80481c8 <strcmp@plt-0xd58>
.byte 0xa2
notl   (%edx)
fldl   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %ebx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
testb  $0x0,(%edx)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %edx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pushf
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%dl
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jo     804833a <strcmp@plt-0xbe6>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    $0x2,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ecx
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dh
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%ecx)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aas
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%esi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%ebx)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
lret
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx,%eax,1)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    %cs:(%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movl   $0x0,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
iret
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cld
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ecx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ss
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%esi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    %eax,(%eax)
add    %dl,-0x9(%eax)
add    $0x8,%al
xor    $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
or     $0x17200,%eax
add    %al,(%eax)
bound  %eax,0x408
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %al,0x40000001(%edx)
out    %eax,(%dx)
add    $0x8,%al
add    $0x12000008,%eax
add    %cl,0x2bd00
add    %dl,0x510804f7(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %cl,0x31b00
add    %ah,0x4080561(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,(%edx,%eax,1)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,(%esi)
add    (%eax),%eax
add    %dl,0x8048f(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    (%eax),%eax
add    %al,%al
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,0x30000002(%edi)
ljmp   $0x0,$0x37b0804
adc    (%eax),%al
or     $0xb00,%eax
add    %ah,%ah
adc    0x408,%eax
add    %dl,(%ecx)
add    %cl,(%edi)
add    %al,%ah
add    %al,(%eax)
add    %ah,%ah
popa
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,%al
add    %al,(%eax)
add    %al,%al
popa
add    $0x408,%eax
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %ah,0x2(%edx)
add    %al,(%eax)
mov    0x4080561,%al
add    %al,(%eax)
add    %ah,(%ecx)
add    %bl,(%ecx)
add    %cl,0x0(%edi)
add    %al,(%eax)
loopne 80487cf <strcmp@plt-0x751>
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,0xb0000001
in     (%dx),%eax
add    $0x8,%al
xchg   %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
or     $0x20200,%eax
add    %al,(%edx,%eiz,2)
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %bp,(%esi)
jae    804880f <strcmp@plt-0x711>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    804881d <strcmp@plt-0x703>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    804882a <strcmp@plt-0x6f6>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048836 <strcmp@plt-0x6ea>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
gs
je     804883d <strcmp@plt-0x6e3>
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     804884f <strcmp@plt-0x6d1>
outsl  %ds:(%esi),(%dx)
ja     8048841 <strcmp@plt-0x6df>
add    %dh,0x74(%ebx)
jb     8048851 <strcmp@plt-0x6cf>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     8048854 <strcmp@plt-0x6cc>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048864 <strcmp@plt-0x6bc>
arpl   %bp,0x72(%eax)
add    %dh,0x70(%edx)
insl   (%dx),%es:(%edi)
popa
je     804885f <strcmp@plt-0x6c1>
push   $0x67636400
gs
je     8048878 <strcmp@plt-0x6a8>
gs
js     804887b <strcmp@plt-0x6a5>
add    %bl,0x5f(%edi)
data16
js     8048880 <strcmp@plt-0x6a0>
je     8048870 <strcmp@plt-0x6b0>
je     8048872 <strcmp@plt-0x6ae>
je     8048849 <strcmp@plt-0x6d7>
xor    $0x0,%al
jne    8048885 <strcmp@plt-0x69b>
insb   (%dx),%es:(%edi)
imul   $0x63007461,0x6b(%esi),%ebp
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048888 <strcmp@plt-0x698>
imul   $0x64686366,%fs:0x0(%edx),%esi
imul   $0x6f727265,0x0(%edx),%esi
jb     8048834 <strcmp@plt-0x6ec>
pop    %edi
pop    %edi
jae    80488ac <strcmp@plt-0x674>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     804885c <strcmp@plt-0x6c4>
jae    80488d2 <strcmp@plt-0x64e>
imul   $0x6978655f,%fs:0x0(%esi),%ebp
je     8048868 <strcmp@plt-0x6b8>
jo     80488dc <strcmp@plt-0x644>
outsl  %ds:(%esi),(%dx)
addr16 jb 80488cf <strcmp@plt-0x651>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %bl,%gs:0x5f(%edi)
popa
jae    80488f8 <strcmp@plt-0x628>
gs
jb     80488fc <strcmp@plt-0x624>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     80488fa <strcmp@plt-0x626>
pop    %edi
addr16
gs
je     80488f9 <strcmp@plt-0x627>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048912 <strcmp@plt-0x60e>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     80488a5 <strcmp@plt-0x67b>
data16
je     804891b <strcmp@plt-0x605>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
add    %ch,%gs:0x73(%ecx)
popa
je     8048928 <strcmp@plt-0x5f8>
jns    80488b6 <strcmp@plt-0x66a>
arpl   %sp,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048933 <strcmp@plt-0x5ed>
jb     804892d <strcmp@plt-0x5f3>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     804892d <strcmp@plt-0x5f3>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jae    8048935 <strcmp@plt-0x5eb>
je     80488d2 <strcmp@plt-0x64e>
pop    %edi
pop    %edi
gs
jb     8048949 <strcmp@plt-0x5d7>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %bl,0x5f(%edi)
data16
js     8048969 <strcmp@plt-0x5b7>
je     8048959 <strcmp@plt-0x5c7>
je     8048930 <strcmp@plt-0x5f0>
xor    $0x0,%al
pop    %edi
pop    %edi
data16
jo     8048973 <strcmp@plt-0x5ad>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     8048971 <strcmp@plt-0x5af>
outsl  %ds:(%esi),(%dx)
jne    8048984 <strcmp@plt-0x59c>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ah,0x74(%esi)
jae    804897d <strcmp@plt-0x5a3>
jb     8048985 <strcmp@plt-0x59b>
popa
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048995 <strcmp@plt-0x58b>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
outsw  %fs:(%esi),(%dx)
jo     80489a2 <strcmp@plt-0x57e>
outsb  %ds:(%esi),(%dx)
imul   $0x6973626d,%fs:0x0(%edx),%esi
outsb  %ds:(%esi),(%dx)
imul   $0x73786c5f,0x5f(%eax,%eax,1),%esi
je     80489b2 <strcmp@plt-0x56e>
je     8048989 <strcmp@plt-0x597>
xor    $0x0,%al
data16
jae    80489cc <strcmp@plt-0x554>
popa
je     80489c1 <strcmp@plt-0x55f>
jae    8048993 <strcmp@plt-0x58d>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    80489c9 <strcmp@plt-0x557>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048967 <strcmp@plt-0x5b9>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x5f5f006f,0x66(%bp),%ebp
js     80489ea <strcmp@plt-0x536>
je     80489da <strcmp@plt-0x546>
je     80489b1 <strcmp@plt-0x56f>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     80489f4 <strcmp@plt-0x52c>
outsb  %ds:(%esi),(%dx)
jbe    8048992 <strcmp@plt-0x58e>
data16
je     8048a08 <strcmp@plt-0x518>
pop    %edi
jae    80489fd <strcmp@plt-0x523>
je     804899a <strcmp@plt-0x586>
outsl  %ds:(%esi),(%dx)
jo     8048a11 <strcmp@plt-0x50f>
popa
jb     8048a07 <strcmp@plt-0x519>
add    %bl,0x5f(%edi)
data16
jb     8048a0b <strcmp@plt-0x515>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048a24 <strcmp@plt-0x4fc>
add    %ah,0x73(%esi)
arpl   %sp,0x6e(%ecx)
data16
add    %ah,0x65(%edi)
je     8048a2d <strcmp@plt-0x4f3>
jo     8048a34 <strcmp@plt-0x4ec>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
addr16
gs
je     8048a37 <strcmp@plt-0x4e9>
gs
insb   (%dx),%es:(%edi)
imul   $0x69727766,0x0(%ebp),%ebp
je     8048a43 <strcmp@plt-0x4dd>
add    %ah,0x65(%edi)
je     8048a48 <strcmp@plt-0x4d8>
jne    8048a4e <strcmp@plt-0x4d2>
add    %bl,%fs:0x5f(%edi)
data16
jo     8048a51 <strcmp@plt-0x4cf>
outsb  %ds:(%esi),(%dx)
imul   $0x65736c00,%fs:0x67(%esi),%ebp
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 8048a61 <strcmp@plt-0x4bf>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048a86 <strcmp@plt-0x49a>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048a82 <strcmp@plt-0x49e>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x73710034,%fs:0x36(%edx),%esi
73
outsl  %ds:(%esi),(%dx)
jb     8048aa2 <strcmp@plt-0x47e>
add    %ah,0x74(%esi)
jae    8048a92 <strcmp@plt-0x48e>
outsl  %ds:(%esi),(%dx)
jo     8048a9b <strcmp@plt-0x485>
outsb  %ds:(%esi),(%dx)
add    %ah,0x63(%esi)
outsb  %ds:(%esi),(%dx)
je     8048aa9 <strcmp@plt-0x477>
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048aaa <strcmp@plt-0x476>
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
fs
je     8048ab1 <strcmp@plt-0x46f>
js     8048ac2 <strcmp@plt-0x45e>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x5f737466,0x0(%esi),%ebp
arpl   %bp,0x69(%eax)
insb   (%dx),%es:(%edi)
fs
jb     8048ac5 <strcmp@plt-0x45b>
outsb  %ds:(%esi),(%dx)
add    %ch,0x70(%edi)
outsb  %gs:(%esi),(%dx)
popa
je     8048a9f <strcmp@plt-0x481>
xor    $0x0,%al
popaw
arpl   %sp,0x65(%ebx)
jae    8048ae5 <strcmp@plt-0x43b>
popa
je     8048a75 <strcmp@plt-0x4ab>
jae    8048aeb <strcmp@plt-0x435>
jb     8048adc <strcmp@plt-0x444>
insl   (%dx),%es:(%edi)
jo     8048a7c <strcmp@plt-0x4a4>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048afc <strcmp@plt-0x424>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %bl,%fs:0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048afe <strcmp@plt-0x422>
jb     8048b01 <strcmp@plt-0x41f>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048a9f <strcmp@plt-0x481>
data16
jo     8048b17 <strcmp@plt-0x409>
je     8048b17 <strcmp@plt-0x409>
pop    %edi
jne    8048b15 <strcmp@plt-0x40b>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048b29 <strcmp@plt-0x3f7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048b34 <strcmp@plt-0x3ec>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048b38 <strcmp@plt-0x3e8>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048b3c <strcmp@plt-0x3e4>
js     8048b42 <strcmp@plt-0x3de>
je     8048adb <strcmp@plt-0x445>
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048b58 <strcmp@plt-0x3c8>
popa
jb     8048b5b <strcmp@plt-0x3c5>
pop    %edi
pop    %edi
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x2000200,%eax
add    %al,0x6000200
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000000
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
pop    %es
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax,%eax,1)
add    (%eax),%al
add    (%eax),%eax
add    $0x7000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x2000500
add    %al,(%edx)
add    %al,(%edx)
add    %cl,(%eax)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%edx)
add    %eax,(%eax)
pop    %es
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
imul   $0x80000,0xd(%ecx),%ebp
push   %edx
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,(%edi)
add    %bl,0x0(%ebx,%eax,1)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x1f(%ebx)
imul   $0x60000,(%ecx),%ecx
push   $0x10000003
add    %al,(%eax)
add    %dl,(%edx)
imul   $0x50000,0xd(%ecx),%ebp
je     8048c31 <strcmp@plt-0x2ef>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x69,%al
imul   $0x37e,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
adc    %ebp,0x69(%ecx)
or     $0x30000,%eax
mov    %al,(%ebx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x20000,%eax
xchg   %eax,%edx
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
cld
pop    %edi
add    $0x210608,%eax
add    %ah,0x5080561(%eax)
dec    %esp
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
popa
add    $0x4d0508,%eax
add    %al,%al
popa
add    $0x4f0508,%eax
add    %ah,%al
popa
add    $0x550508,%eax
add    %ah,%ah
popa
add    $0x520508,%eax
add    %al,(%eax)
bound  %eax,0x490508
add    %al,(%edx,%eiz,2)
add    $0x570508,%eax
or     $0x60,%al
add    $0x10708,%eax
add    %dl,(%eax)
pusha
add    $0x20708,%eax
add    %dl,(%eax,%eiz,2)
add    $0x30708,%eax
add    %bl,(%eax)
pusha
add    $0x40708,%eax
add    %bl,(%eax,%eiz,2)
add    $0x50708,%eax
add    %ah,(%eax)
pusha
add    $0x60708,%eax
add    %ah,(%eax,%eiz,2)
add    $0x70708,%eax
add    %ch,(%eax)
pusha
add    $0x4e0708,%eax
add    %ch,(%eax,%eiz,2)
add    $0x80708,%eax
add    %dh,(%eax)
pusha
add    $0x90708,%eax
add    %dh,(%eax,%eiz,2)
add    $0xa0708,%eax
add    %bh,(%eax)
pusha
add    $0xb0708,%eax
add    %bh,(%eax,%eiz,2)
add    $0xc0708,%eax
add    %al,0x60(%eax)
add    $0xd0708,%eax
add    %al,0x5(%eax,%eiz,2)
or     %al,(%edi)
push   %cs
add    %al,(%eax)
dec    %eax
pusha
add    $0xf0708,%eax
add    %cl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    %al,(%eax)
add    %dl,0x60(%eax)
add    $0x110708,%eax
add    %dl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    (%eax),%al
add    %bl,0x60(%eax)
add    $0x130708,%eax
add    %bl,0x5(%eax,%eiz,2)
or     %al,(%edi)
adc    $0x0,%al
add    %ah,0x60(%eax)
add    $0x150708,%eax
add    %ah,0x5(%eax,%eiz,2)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
push   $0x7080560
pop    %ss
add    %al,(%eax)
insb   (%dx),%es:(%edi)
pusha
add    $0x180708,%eax
add    %dh,0x60(%eax)
add    $0x190708,%eax
add    %dh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    (%eax),%al
add    %bh,0x60(%eax)
add    $0x1b0708,%eax
add    %bh,0x5(%eax,%eiz,2)
or     %al,(%edi)
sbb    $0x0,%al
add    %al,0x7080560(%eax)
sbb    $0x60840000,%eax
add    $0x1e0708,%eax
add    %cl,0x7080560(%eax)
pop    %ds
add    %al,(%eax)
mov    %fs,0x5(%eax)
or     %al,(%edi)
and    %al,(%eax)
add    %dl,0x7080560(%eax)
and    %eax,(%eax)
add    %dl,0x22070805(%eax,%eiz,2)
add    %al,(%eax)
cwtl
pusha
add    $0x230708,%eax
add    %bl,0x24070805(%eax,%eiz,2)
add    %al,(%eax)
mov    0x7080560,%al
and    $0x60a40000,%eax
add    $0x260708,%eax
add    %ch,0x7080560(%eax)
daa
add    %al,(%eax)
lods   %ds:(%esi),%al
pusha
add    $0x280708,%eax
add    %dh,0x7080560(%eax)
sub    %eax,(%eax)
add    %dh,0x2a070805(%eax,%eiz,2)
add    %al,(%eax)
mov    $0x7080560,%eax
sub    (%eax),%eax
add    %bh,0x2c070805(%eax,%eiz,2)
add    %al,(%eax)
shlb   $0x8,0x5(%eax)
pop    %es
sub    $0x60c40000,%eax
add    $0x2e0708,%eax
add    %cl,%al
pusha
add    $0x2f0708,%eax
add    %cl,%ah
pusha
add    $0x300708,%eax
add    %dl,%al
pusha
add    $0x310708,%eax
add    %dl,%ah
pusha
add    $0x320708,%eax
add    %bl,%al
pusha
add    $0x330708,%eax
add    %bl,%ah
pusha
add    $0x340708,%eax
add    %ah,%al
pusha
add    $0x350708,%eax
add    %ah,%ah
pusha
add    $0x360708,%eax
add    %ch,%al
pusha
add    $0x370708,%eax
add    %ch,%ah
pusha
add    $0x380708,%eax
add    %dh,%al
pusha
add    $0x390708,%eax
add    %dh,%ah
pusha
add    $0x3a0708,%eax
add    %bh,%al
pusha
add    $0x3b0708,%eax
add    %bh,%ah
pusha
add    $0x3c0708,%eax
add    %al,(%eax)
popa
add    $0x3d0708,%eax
add    %al,(%ecx,%eiz,2)
add    $0x3e0708,%eax
add    %cl,(%eax)
popa
add    $0x3f0708,%eax
add    %cl,(%ecx,%eiz,2)
add    $0x400708,%eax
add    %dl,(%eax)
popa
add    $0x410708,%eax
add    %dl,(%ecx,%eiz,2)
add    $0x420708,%eax
add    %bl,(%eax)
popa
add    $0x430708,%eax
add    %bl,(%ecx,%eiz,2)
add    $0x440708,%eax
add    %ah,(%eax)
popa
add    $0x450708,%eax
add    %ah,(%ecx,%eiz,2)
add    $0x460708,%eax
add    %ch,(%eax)
popa
add    $0x470708,%eax
push   %ebx
sub    $0x8,%esp
call   8049920 <calloc@plt+0x590>
add    $0xd113,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048f02 <strcmp@plt-0x1e>
call   8049130 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8056004
jmp    *0x8056008
add    %al,(%eax)
jmp    *0x805600c
push   $0x0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056010
push   $0x8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056014
push   $0x10
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056018
push   $0x18
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805601c
push   $0x20
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056020
push   $0x28
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056024
push   $0x30
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056028
push   $0x38
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805602c
push   $0x40
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056030
push   $0x48
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056034
push   $0x50
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056038
push   $0x58
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805603c
push   $0x60
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056040
push   $0x68
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056044
push   $0x70
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056048
push   $0x78
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805604c
push   $0x80
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056050
push   $0x88
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056054
push   $0x90
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056058
push   $0x98
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805605c
push   $0xa0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056060
push   $0xa8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056064
push   $0xb0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056068
push   $0xb8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805606c
push   $0xc0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056070
push   $0xc8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056074
push   $0xd0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056078
push   $0xd8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805607c
push   $0xe0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056080
push   $0xe8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056084
push   $0xf0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056088
push   $0xf8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805608c
push   $0x100
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056090
push   $0x108
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056094
push   $0x110
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056098
push   $0x118
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805609c
push   $0x120
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560a0
push   $0x128
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560a4
push   $0x130
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560a8
push   $0x138
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560ac
push   $0x140
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560b0
push   $0x148
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560b4
push   $0x150
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560b8
push   $0x158
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560bc
push   $0x160
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560c0
push   $0x168
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560c4
push   $0x170
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560c8
push   $0x178
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560cc
push   $0x180
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560d0
push   $0x188
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560d4
push   $0x190
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560d8
push   $0x198
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560dc
push   $0x1a0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560e0
push   $0x1a8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560e4
push   $0x1b0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560e8
push   $0x1b8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560ec
push   $0x1c0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560f0
push   $0x1c8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560f4
push   $0x1d0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560f8
push   $0x1d8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x80560fc
push   $0x1e0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056100
push   $0x1e8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056104
push   $0x1f0
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056108
push   $0x1f8
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805610c
push   $0x200
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056110
push   $0x208
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056114
push   $0x210
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056118
push   $0x218
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x805611c
push   $0x220
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056120
push   $0x228
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056124
push   $0x230
jmp    8048f10 <strcmp@plt-0x10>
jmp    *0x8056128
push   $0x238
jmp    8048f10 <strcmp@plt-0x10>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0xb0,%esp
mov    0xc(%ebp),%ebx
mov    0x8(%ebp),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   804b470 <calloc@plt+0x20e0>
movl   $0x805271d,0x4(%esp)
movl   $0x6,(%esp)
call   8049260 <setlocale@plt>
movl   $0x8051caa,0x4(%esp)
movl   $0x8051c9c,(%esp)
call   80492f0 <bindtextdomain@plt>
movl   $0x8051c9c,(%esp)
call   8049030 <textdomain@plt>
movl   $0x804b040,(%esp)
call   8051390 <fts_children+0x1c00>
movl   $0x0,(%esp)
movb   $0x0,0x3c(%esp)
movl   $0x4,0x40(%esp)
movb   $0x0,0x44(%esp)
movb   $0x0,0x46(%esp)
movb   $0x0,0x45(%esp)
movl   $0x0,0x48(%esp)
call   8049310 <isatty@plt>
movb   $0x0,0x4d(%esp)
movb   $0x0,0x4e(%esp)
movb   $0x1,0x2c(%esp)
test   %eax,%eax
setne  0x4c(%esp)
xor    %edi,%edi
movl   $0x0,0x10(%esp)
movl   $0x8051e00,0xc(%esp)
movl   $0x8051d09,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   8049170 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     8049743 <calloc@plt+0x3b3>
cmp    $0x69,%eax
je     80496d9 <calloc@plt+0x349>
lea    0x0(%esi),%esi
jle    80494b8 <calloc@plt+0x128>
cmp    $0x81,%eax
je     80496f7 <calloc@plt+0x367>
lea    0x0(%esi),%esi
jle    80494f0 <calloc@plt+0x160>
cmp    $0x83,%eax
je     80496ed <calloc@plt+0x35d>
lea    0x0(%esi),%esi
jl     80495ec <calloc@plt+0x25c>
cmp    $0x84,%eax
jne    80495ff <calloc@plt+0x26f>
movb   $0x1,0x4c(%esp)
jmp    8049447 <calloc@plt+0xb7>
cmp    $0x49,%eax
je     8049715 <calloc@plt+0x385>
jle    8049578 <calloc@plt+0x1e8>
cmp    $0x64,%eax
je     804970b <calloc@plt+0x37b>
cmp    $0x66,%eax
jne    80496c6 <calloc@plt+0x336>
movl   $0x5,0x40(%esp)
xor    %edi,%edi
movb   $0x1,0x3c(%esp)
jmp    8049447 <calloc@plt+0xb7>
lea    0x0(%esi),%esi
cmp    $0x76,%eax
je     8049701 <calloc@plt+0x371>
cmp    $0x80,%eax
jne    80495f6 <calloc@plt+0x266>
mov    0x8056204,%eax
test   %eax,%eax
je     80496d9 <calloc@plt+0x349>
mov    0x805614c,%edx
movl   $0x4,0x10(%esp)
movl   $0x8051dc8,0xc(%esp)
movl   $0x8051de0,0x8(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x4(%esp)
movl   $0x8051cbc,(%esp)
call   804af70 <calloc@plt+0x1be0>
mov    0x8051dc8(,%eax,4),%eax
cmp    $0x1,%eax
je     804972c <calloc@plt+0x39c>
cmp    $0x2,%eax
je     80496d9 <calloc@plt+0x349>
test   %eax,%eax
jne    8049447 <calloc@plt+0xb7>
movl   $0x5,0x40(%esp)
xor    %edi,%edi
jmp    8049447 <calloc@plt+0xb7>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffff7d,%eax
je     8049592 <calloc@plt+0x202>
cmp    $0xffffff7e,%eax
jne    80495ff <calloc@plt+0x26f>
movl   $0x0,(%esp)
call   80499f0 <calloc@plt+0x660>
mov    0x8056148,%eax
movl   $0x0,0x20(%esp)
movl   $0x8051cca,0x1c(%esp)
movl   $0x8051cd7,0x18(%esp)
mov    %eax,0xc(%esp)
mov    0x8056200,%eax
movl   $0x8051ceb,0x14(%esp)
movl   $0x8051cfb,0x10(%esp)
movl   $0x8051c98,0x8(%esp)
movl   $0x8051d06,0x4(%esp)
mov    %eax,(%esp)
call   804d020 <calloc@plt+0x3c90>
movl   $0x0,(%esp)
call   8049140 <exit@plt>
movb   $0x0,0x2c(%esp)
jmp    8049447 <calloc@plt+0xb7>
cmp    $0x72,%eax
je     80496cf <calloc@plt+0x33f>
cmp    $0x1,%esi
mov    $0x1,%edx
jg     804961b <calloc@plt+0x28b>
jmp    80496ba <calloc@plt+0x32a>
xchg   %ax,%ax
add    $0x1,%edx
cmp    %esi,%edx
je     80496ba <calloc@plt+0x32a>
mov    (%ebx,%edx,4),%edi
cmpb   $0x2d,(%edi)
jne    8049610 <calloc@plt+0x280>
cmpb   $0x0,0x1(%edi)
je     8049610 <calloc@plt+0x280>
lea    0x50(%esp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
mov    %edx,0x2c(%esp)
call   8049340 <__lxstat64@plt>
mov    0x2c(%esp),%edx
test   %eax,%eax
jne    8049610 <calloc@plt+0x280>
mov    %edi,(%esp)
call   804c980 <calloc@plt+0x35f0>
mov    %edi,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x2c(%esp)
call   804c5b0 <calloc@plt+0x3220>
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051b9c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049000 <dcgettext@plt>
mov    0x2c(%esp),%edx
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
movl   $0x1,(%esp)
call   80499f0 <calloc@plt+0x660>
cmp    $0x52,%eax
jne    80495ff <calloc@plt+0x26f>
movb   $0x1,0x45(%esp)
jmp    8049447 <calloc@plt+0xb7>
movl   $0x3,0x40(%esp)
xor    %edi,%edi
movb   $0x0,0x3c(%esp)
jmp    8049447 <calloc@plt+0xb7>
movb   $0x1,0x2c(%esp)
jmp    8049447 <calloc@plt+0xb7>
movb   $0x1,0x44(%esp)
jmp    8049447 <calloc@plt+0xb7>
movb   $0x1,0x4d(%esp)
jmp    8049447 <calloc@plt+0xb7>
movb   $0x1,0x46(%esp)
jmp    8049447 <calloc@plt+0xb7>
movl   $0x5,0x40(%esp)
mov    $0x1,%edi
movb   $0x0,0x3c(%esp)
jmp    8049447 <calloc@plt+0xb7>
movl   $0x4,0x40(%esp)
mov    $0x1,%edi
movb   $0x0,0x3c(%esp)
jmp    8049447 <calloc@plt+0xb7>
cmp    0x80561e0,%esi
jle    8049805 <calloc@plt+0x475>
cmpb   $0x0,0x45(%esp)
je     8049761 <calloc@plt+0x3d1>
cmpb   $0x0,0x2c(%esp)
jne    8049889 <calloc@plt+0x4f9>
mov    0x80561e0,%eax
mov    %edi,%ecx
test   %cl,%cl
lea    (%ebx,%eax,4),%ebx
je     80497c9 <calloc@plt+0x439>
cmpb   $0x0,0x45(%esp)
jne    8049862 <calloc@plt+0x4d2>
sub    %eax,%esi
cmp    $0x3,%esi
jbe    80497c9 <calloc@plt+0x439>
movl   $0x5,0x8(%esp)
mov    0x8056228,%esi
movl   $0x8051d2a,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
call   804d4b0 <calloc@plt+0x4120>
test   %al,%al
je     8049845 <calloc@plt+0x4b5>
lea    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804a500 <calloc@plt+0x1170>
lea    -0x2(%eax),%edx
cmp    $0x2,%edx
jbe    8049851 <calloc@plt+0x4c1>
movl   $0x8051dc0,0xc(%esp)
movl   $0x15e,0x8(%esp)
movl   $0x8051d21,0x4(%esp)
movl   $0x8051be4,(%esp)
call   8049370 <__assert_fail@plt>
cmpb   $0x0,0x3c(%esp)
jne    8049845 <calloc@plt+0x4b5>
movl   $0x5,0x8(%esp)
movl   $0x8051d11,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
jmp    80496ba <calloc@plt+0x32a>
movl   $0x0,(%esp)
call   8049140 <exit@plt>
cmp    $0x4,%eax
sete   %al
movzbl %al,%eax
mov    %eax,(%esp)
call   8049140 <exit@plt>
movl   $0x5,0x8(%esp)
mov    0x8056228,%esi
movl   $0x8051c30,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    80497a3 <calloc@plt+0x413>
movl   $0x805620c,(%esp)
call   804c9a0 <calloc@plt+0x3610>
test   %eax,%eax
mov    %eax,0x48(%esp)
jne    8049761 <calloc@plt+0x3d1>
movl   $0x805235a,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051bc4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x28(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x2c(%esp)
call   8049200 <__errno_location@plt>
mov    0x28(%esp),%ecx
mov    0x2c(%esp),%edx
mov    %ecx,0xc(%esp)
mov    %edx,0x8(%esp)
mov    (%eax),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
jmp    8049761 <calloc@plt+0x3d1>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x8051380
push   $0x8051310
push   %ecx
push   %esi
push   $0x80493a0
call   80491c0 <__libc_start_main@plt>
hlt
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80561a3,%eax
sub    $0x80561a0,%eax
cmp    $0x6,%eax
ja     8049940 <calloc@plt+0x5b0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804993f <calloc@plt+0x5af>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80561a0,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80561a0,%eax
sub    $0x80561a0,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    8049979 <calloc@plt+0x5e9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     8049978 <calloc@plt+0x5e8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80561a0,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8056208
jne    80499bc <calloc@plt+0x62c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   8049930 <calloc@plt+0x5a0>
movb   $0x1,0x8056208
leave
repz ret
xchg   %ax,%ax
mov    0x8055f10,%eax
test   %eax,%eax
je     80499e8 <calloc@plt+0x658>
mov    $0x0,%eax
test   %eax,%eax
je     80499e8 <calloc@plt+0x658>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8055f10,(%esp)
call   *%eax
leave
jmp    8049960 <calloc@plt+0x5d0>
nop
jmp    8049960 <calloc@plt+0x5d0>
xchg   %ax,%ax
nop
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x8056228,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     8049a44 <calloc@plt+0x6b4>
movl   $0x80513e8,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8049140 <exit@plt>
movl   $0x8051410,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051430,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80514d0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805164c,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x805172c,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051844,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051874,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80518ac,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056228,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051948,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0xc(%esp)
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x80519c4,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804b260 <calloc@plt+0x1ed0>
movl   $0x5,0x8(%esp)
movl   $0x8051c57,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049000 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x8051c6e,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051c84,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x8051aa8,0xc(%esp)
movl   $0x8051c98,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
mov    0x8056200,%esi
movl   $0x5,0x8(%esp)
movl   $0x8051ad0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8049260 <setlocale@plt>
test   %eax,%eax
je     8049cfb <calloc@plt+0x96b>
movl   $0x3,0x8(%esp)
movl   $0x8051ca6,0x4(%esp)
mov    %eax,(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    8049d3f <calloc@plt+0x9af>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804b260 <calloc@plt+0x1ed0>
movl   $0x5,0x8(%esp)
movl   $0x8051b58,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049000 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
jmp    8049a3c <calloc@plt+0x6ac>
mov    0x8056228,%eax
mov    %eax,(%esp)
call   804b260 <calloc@plt+0x1ed0>
movl   $0x5,0x8(%esp)
movl   $0x8051b10,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049000 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
jmp    8049cfb <calloc@plt+0x96b>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%esi
mov    %ecx,0x1c(%esp)
mov    %esi,%eax
cmp    $0x1,%al
sbb    %ebx,%ebx
not    %ebx
and    $0x200,%ebx
mov    %ebx,0x8(%esp)
mov    0x18(%edx),%eax
mov    %eax,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   8048f60 <unlinkat@plt>
test   %eax,%eax
jne    8049df0 <calloc@plt+0xa60>
mov    0x1c(%esp),%edx
mov    $0x2,%al
cmpb   $0x0,0x11(%edx)
jne    8049ec0 <calloc@plt+0xb30>
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049200 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%esi
cmp    $0x1e,%ebx
je     8049f28 <calloc@plt+0xb98>
mov    0x1c(%esp),%eax
cmpb   $0x0,(%eax)
jne    8049e98 <calloc@plt+0xb08>
cmpw   $0x4,0x3c(%ebp)
je     8049f98 <calloc@plt+0xc08>
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051ee3,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049000 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    (%esi),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
mov    0x4(%ebp),%eax
mov    0x30(%eax),%ebx
test   %ebx,%ebx
jns    8049e81 <calloc@plt+0xaf1>
jmp    8049e88 <calloc@plt+0xaf8>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x10(%eax)
mov    0x4(%eax),%eax
mov    0x30(%eax),%edx
test   %edx,%edx
js     8049e88 <calloc@plt+0xaf8>
mov    0x10(%eax),%ecx
test   %ecx,%ecx
je     8049e70 <calloc@plt+0xae0>
add    $0x8c,%esp
mov    $0x4,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x14,%ebx
je     8049ead <calloc@plt+0xb1d>
jle    8049f18 <calloc@plt+0xb88>
cmp    $0x16,%ebx
je     8049ead <calloc@plt+0xb1d>
cmp    $0x54,%ebx
jne    8049e0f <calloc@plt+0xa7f>
add    $0x8c,%esp
mov    $0x2,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
mov    %eax,%ebx
mov    %esi,%eax
test   %al,%al
je     8049f78 <calloc@plt+0xbe8>
movl   $0x8051ec0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   8049220 <__printf_chk@plt>
add    $0x8c,%esp
mov    $0x2,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    $0x2,%ebx
jne    8049e0f <calloc@plt+0xa7f>
jmp    8049ead <calloc@plt+0xb1d>
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x20(%esp),%eax
movl   $0x100,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x18(%ebp),%eax
movl   $0x3,(%esp)
mov    %eax,0x8(%esp)
mov    (%edi),%eax
mov    %eax,0x4(%esp)
call   8049040 <__fxstatat64@plt>
test   %eax,%eax
je     8049f68 <calloc@plt+0xbd8>
cmpl   $0x2,(%esi)
jne    8049f68 <calloc@plt+0xbd8>
mov    $0x2,%ebx
jmp    8049e02 <calloc@plt+0xa72>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1e,(%esi)
jmp    8049e02 <calloc@plt+0xa72>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8051ed7,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    8049ef3 <calloc@plt+0xb63>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x27,%ebx
je     8049fb0 <calloc@plt+0xc20>
lea    -0x14(%ebx),%eax
cmp    $0x1,%eax
jbe    8049fb0 <calloc@plt+0xc20>
cmp    $0x11,%ebx
jne    8049e1a <calloc@plt+0xa8a>
xchg   %ax,%ax
mov    0x20(%ebp),%eax
cmp    $0xd,%eax
jne    8049fbf <calloc@plt+0xc2f>
mov    %eax,(%esi)
jmp    8049e1a <calloc@plt+0xa8a>
cmp    $0x1,%eax
jne    8049e1a <calloc@plt+0xa8a>
mov    %eax,(%esi)
jmp    8049e1a <calloc@plt+0xa8a>
nop
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x30(%ecx),%ebx
mov    0x2c(%ecx),%esi
and    %ebx,%esi
cmp    $0xffffffff,%esi
je     8049ff0 <calloc@plt+0xc60>
test   %ebx,%ebx
js     804a04e <calloc@plt+0xcbe>
xor    %eax,%eax
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    %ecx,0xc(%esp)
movl   $0x100,0x10(%esp)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x1c(%esp)
call   8049040 <__fxstatat64@plt>
mov    0x1c(%esp),%ecx
test   %eax,%eax
jne    804a028 <calloc@plt+0xc98>
mov    0x30(%ecx),%ebx
jmp    8049fe2 <calloc@plt+0xc52>
lea    0x0(%esi,%eiz,1),%esi
movl   $0xfffffffe,0x2c(%ecx)
movl   $0xffffffff,0x30(%ecx)
mov    %ecx,0x1c(%esp)
call   8049200 <__errno_location@plt>
mov    0x1c(%esp),%ecx
mov    (%eax),%eax
mov    %eax,0x58(%ecx)
sar    $0x1f,%eax
mov    %eax,0x5c(%ecx)
mov    %ecx,0x1c(%esp)
call   8049200 <__errno_location@plt>
mov    0x1c(%esp),%ecx
mov    0x58(%ecx),%edx
mov    %edx,(%eax)
mov    $0xffffffff,%eax
jmp    8049fe8 <calloc@plt+0xc58>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x9c,%esp
mov    %eax,0x24(%esp)
mov    0x1c(%edx),%eax
mov    0xb8(%esp),%ebx
mov    %eax,0x2c(%esp)
mov    0x18(%edx),%eax
test   %ebx,%ebx
mov    %eax,0x28(%esp)
je     804a0a6 <calloc@plt+0xd16>
mov    0xb8(%esp),%eax
movl   $0x2,(%eax)
mov    0xb8(%esp),%edx
cmp    $0x1,%cl
sbb    %esi,%esi
xor    %ebx,%ebx
not    %esi
and    $0x4,%esi
test   %edx,%edx
movl   $0xffffffff,0x5c(%esp)
movl   $0xffffffff,0x60(%esp)
je     804a15c <calloc@plt+0xdcc>
mov    0x28(%esp),%eax
movl   $0x30900,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x24(%esp),%eax
mov    %eax,(%esp)
call   80491b0 <openat64@plt>
test   %eax,%eax
mov    %eax,%ebp
js     804a14c <calloc@plt+0xdbc>
mov    %eax,(%esp)
call   8049290 <fdopendir@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804a484 <calloc@plt+0x10f4>
call   8049200 <__errno_location@plt>
mov    %eax,%ebp
movl   $0x0,(%eax)
jmp    804a12e <calloc@plt+0xd9e>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
cmpb   $0x2e,0x14(%eax)
sete   %dl
movzbl 0x14(%eax,%edx,1),%eax
cmp    $0x2f,%al
jne    804a4e5 <calloc@plt+0x1155>
mov    %ebx,(%esp)
call   80492c0 <readdir64@plt>
test   %eax,%eax
je     804a300 <calloc@plt+0xf70>
cmpb   $0x2e,0x13(%eax)
je     804a118 <calloc@plt+0xd88>
mov    %ebx,(%esp)
call   8049360 <closedir@plt>
xor    %ebx,%ebx
mov    $0x3,%eax
mov    0xb8(%esp),%ecx
mov    %eax,(%ecx)
mov    0x10(%edi),%eax
test   %eax,%eax
jne    804a2c8 <calloc@plt+0xf38>
mov    0xb0(%esp),%eax
mov    0x4(%eax),%eax
cmp    $0x5,%eax
je     804a2b5 <calloc@plt+0xf25>
mov    0xb0(%esp),%ecx
cmpb   $0x0,(%ecx)
je     804a2d8 <calloc@plt+0xf48>
cmp    $0x3,%eax
jne    804a2b5 <calloc@plt+0xf25>
xor    %ebp,%ebp
test   %esi,%esi
je     804a4dc <calloc@plt+0x114c>
cmp    $0x4,%esi
je     804a3d0 <calloc@plt+0x1040>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
cmp    $0x4,%esi
mov    %eax,%edi
jne    804a236 <calloc@plt+0xea6>
cmpl   $0x2,0xb4(%esp)
jne    804a236 <calloc@plt+0xea6>
test   %bl,%bl
jne    804a236 <calloc@plt+0xea6>
test   %ebp,%ebp
mov    0x8056228,%ebx
movl   $0x5,0x8(%esp)
jne    804a46b <calloc@plt+0x10db>
movl   $0x8051f98,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804a2ac <calloc@plt+0xf1c>
mov    0xb0(%esp),%eax
cmpl   $0x3,0x4(%eax)
jne    804a2b5 <calloc@plt+0xf25>
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
mov    %eax,%edi
mov    0x28(%esp),%edx
lea    0x30(%esp),%ecx
mov    0x24(%esp),%eax
call   8049fd0 <calloc@plt+0xc40>
test   %eax,%eax
jne    804a495 <calloc@plt+0x1105>
lea    0x30(%esp),%eax
mov    %eax,(%esp)
call   804b300 <calloc@plt+0x1f70>
test   %ebp,%ebp
mov    0x8056228,%ebx
movl   $0x5,0x8(%esp)
mov    %eax,%esi
je     804a3f8 <calloc@plt+0x1068>
movl   $0x8051fb8,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    0x80561a4,%eax
mov    %edi,0x14(%esp)
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
call   804d4b0 <calloc@plt+0x4120>
test   %al,%al
je     804a2c8 <calloc@plt+0xf38>
mov    $0x2,%eax
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
add    $0x9c,%esp
mov    $0x3,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x3,%eax
je     804a2e3 <calloc@plt+0xf53>
cmpb   $0x0,0x10(%ecx)
je     804a2b5 <calloc@plt+0xf25>
call   804d110 <calloc@plt+0x3d80>
test   %al,%al
je     804a320 <calloc@plt+0xf90>
mov    0xb0(%esp),%eax
mov    0x4(%eax),%eax
jmp    804a18a <calloc@plt+0xdfa>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%ebp
mov    %ebx,(%esp)
call   8049360 <closedir@plt>
cmp    $0x1,%ebp
setb   %bl
sbb    %eax,%eax
not    %eax
add    $0x4,%eax
jmp    804a153 <calloc@plt+0xdc3>
lea    0x0(%esi),%esi
mov    0x28(%esp),%ebp
lea    0x30(%esp),%edi
mov    0x24(%esp),%eax
mov    %edi,%ecx
mov    %ebp,%edx
call   8049fd0 <calloc@plt+0xc40>
test   %eax,%eax
jne    804a418 <calloc@plt+0x1088>
mov    0x40(%esp),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     804a2ec <calloc@plt+0xf5c>
mov    0x24(%esp),%eax
movl   $0x200,0xc(%esp)
movl   $0x2,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8048fb0 <faccessat@plt>
test   %eax,%eax
je     804a2ec <calloc@plt+0xf5c>
call   8049200 <__errno_location@plt>
mov    (%eax),%ebp
cmp    $0xd,%ebp
jne    804a41f <calloc@plt+0x108f>
test   %esi,%esi
mov    $0x1,%bp
jne    804a19d <calloc@plt+0xe0d>
mov    0x28(%esp),%edx
mov    %edi,%ecx
mov    0x24(%esp),%eax
call   8049fd0 <calloc@plt+0xc40>
test   %eax,%eax
jne    804a418 <calloc@plt+0x1088>
mov    0x40(%esp),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     804a217 <calloc@plt+0xe87>
xor    %esi,%esi
cmp    $0x4000,%eax
jne    804a1a6 <calloc@plt+0xe16>
mov    $0x4,%esi
lea    0x0(%esi),%esi
mov    0xb0(%esp),%eax
cmpb   $0x0,0x9(%eax)
jne    804a1a6 <calloc@plt+0xe16>
cmpb   $0x0,0xa(%eax)
je     804a3ef <calloc@plt+0x105f>
test   %bl,%bl
jne    804a228 <calloc@plt+0xe98>
mov    $0x15,%ebp
jmp    804a41f <calloc@plt+0x108f>
xchg   %ax,%ax
movl   $0x8051ef4,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804a287 <calloc@plt+0xef7>
lea    0x0(%esi,%eiz,1),%esi
call   8049200 <__errno_location@plt>
mov    (%eax),%ebp
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051ee3,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049000 <dcgettext@plt>
mov    %ebx,0xc(%esp)
mov    %ebp,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
mov    $0x4,%eax
jmp    804a2ba <calloc@plt+0xf2a>
movl   $0x8051f68,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804a1f1 <calloc@plt+0xe61>
mov    %ebp,(%esp)
call   8049350 <close@plt>
lea    0x0(%esi,%eiz,1),%esi
jmp    804a14c <calloc@plt+0xdbc>
movl   $0x5,0x8(%esp)
movl   $0x8051ee3,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,%ebx
call   8049200 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
mov    $0x4,%eax
jmp    804a2ba <calloc@plt+0xf2a>
lea    0x30(%esp),%edi
jmp    804a391 <calloc@plt+0x1001>
test   %al,%al
je     804a12e <calloc@plt+0xd9e>
lea    0x0(%esi),%esi
jmp    804a144 <calloc@plt+0xdb4>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%edx
mov    (%edx),%eax
test   %eax,%eax
je     804a988 <calloc@plt+0x15f8>
mov    0x54(%esp),%eax
mov    $0x2,%ebp
cmpb   $0x1,0x8(%eax)
movl   $0x0,0x8(%esp)
mov    %edx,(%esp)
sbb    %eax,%eax
and    $0xffffffc0,%eax
add    $0x258,%eax
mov    %eax,0x4(%esp)
call   804d410 <calloc@plt+0x4080>
mov    %eax,%esi
lea    0x1c(%eax),%eax
mov    %eax,0x18(%esp)
mov    %esi,(%esp)
call   804ef40 <fts_read>
test   %eax,%eax
mov    %eax,%ebx
je     804a5ef <calloc@plt+0x125f>
movzwl 0x3c(%eax),%eax
cmp    $0xd,%ax
ja     804a7a0 <calloc@plt+0x1410>
movzwl %ax,%edx
jmp    *0x80521e0(,%edx,4)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051f33,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049000 <dcgettext@plt>
mov    %edi,0xc(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   80490e0 <error@plt>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804f750 <fts_set>
mov    %esi,(%esp)
call   804ef40 <fts_read>
mov    %esi,(%esp)
mov    $0x4,%ebp
call   804ef40 <fts_read>
test   %eax,%eax
mov    %eax,%ebx
jne    804a55b <calloc@plt+0x11cb>
call   8049200 <__errno_location@plt>
mov    %eax,%ebx
mov    (%eax),%eax
test   %eax,%eax
jne    804ab90 <calloc@plt+0x1800>
mov    %esi,(%esp)
call   804edb0 <fts_close>
test   %eax,%eax
je     804a98d <calloc@plt+0x15fd>
movl   $0x5,0x8(%esp)
mov    $0x4,%ebp
movl   $0x8051f55,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
jmp    804a98d <calloc@plt+0x15fd>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6,%ax
je     804a8e0 <calloc@plt+0x1550>
and    $0xfffffffd,%eax
mov    0x54(%esp),%edi
mov    %ebx,%edx
cmp    $0x4,%ax
sete   %al
movzbl %al,%eax
mov    %eax,%ecx
mov    %eax,0x1c(%esp)
mov    0x1c(%esi),%eax
mov    %edi,(%esp)
movl   $0x0,0x8(%esp)
movl   $0x3,0x4(%esp)
call   804a070 <calloc@plt+0xce0>
cmp    $0x2,%eax
lea    -0x2(%eax),%edi
je     804a998 <calloc@plt+0x1608>
cmp    $0x2,%edi
ja     804ac45 <calloc@plt+0x18b5>
cmp    $0x4,%eax
je     804a5d8 <calloc@plt+0x1248>
cmp    $0x3,%eax
nop
jne    804a549 <calloc@plt+0x11b9>
cmp    $0x2,%ebp
cmove  %eax,%ebp
jmp    804a549 <calloc@plt+0x11b9>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x80520ac,0x4(%esp)
mov    %eax,%edi
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %edi,0xc(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x8(%esp)
jmp    804a5b0 <calloc@plt+0x1220>
xchg   %ax,%ax
mov    0x54(%esp),%eax
cmpb   $0x0,0x9(%eax)
jne    804a818 <calloc@plt+0x1488>
cmpb   $0x0,0xa(%eax)
jne    804aa48 <calloc@plt+0x16b8>
mov    $0x15,%ebp
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051ee3,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049000 <dcgettext@plt>
mov    %edi,0xc(%esp)
mov    %ebp,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
mov    0x4(%ebx),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jns    804a78d <calloc@plt+0x13fd>
jmp    804a5bc <calloc@plt+0x122c>
lea    0x0(%esi),%esi
movl   $0x1,0x10(%eax)
mov    0x4(%eax),%eax
mov    0x30(%eax),%edx
test   %edx,%edx
js     804a5bc <calloc@plt+0x122c>
mov    0x10(%eax),%ecx
test   %ecx,%ecx
je     804a778 <calloc@plt+0x13e8>
jmp    804a5bc <calloc@plt+0x122c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movzwl 0x3c(%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052168,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049000 <dcgettext@plt>
movl   $0x8051c6e,0x14(%esp)
mov    %esi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
call   8049320 <abort@plt>
mov    0x1c(%esp),%eax
mov    (%eax),%edx
mov    %edi,(%esp)
mov    %edx,0x1c(%esp)
call   8049360 <closedir@plt>
mov    0x1c(%esp),%edx
test   %edx,%edx
jne    804aacc <calloc@plt+0x173c>
mov    0x30(%ebx),%eax
test   %eax,%eax
jne    804a857 <calloc@plt+0x14c7>
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   804b260 <calloc@plt+0x1ed0>
cmpb   $0x2e,(%eax)
je     804a9b8 <calloc@plt+0x1628>
mov    0x54(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     804a857 <calloc@plt+0x14c7>
mov    0x9c(%ebx),%edx
mov    0xa0(%ebx),%ecx
xor    0x4(%eax),%ecx
xor    (%eax),%edx
or     %edx,%ecx
je     804aae4 <calloc@plt+0x1754>
lea    0x2c(%esp),%ecx
mov    0x1c(%esi),%eax
mov    %ebx,%edx
mov    %ecx,0x8(%esp)
mov    0x54(%esp),%ecx
movl   $0x2,0x4(%esp)
mov    %ecx,(%esp)
mov    $0x1,%ecx
call   804a070 <calloc@plt+0xce0>
cmp    $0x2,%eax
mov    %eax,%ecx
je     804a9f0 <calloc@plt+0x1660>
mov    0x4(%ebx),%edx
mov    0x30(%edx),%eax
test   %eax,%eax
jns    804a8a9 <calloc@plt+0x1519>
jmp    804a8b0 <calloc@plt+0x1520>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x10(%edx)
mov    0x4(%edx),%edx
mov    0x30(%edx),%edi
test   %edi,%edi
js     804a8b0 <calloc@plt+0x1520>
mov    0x10(%edx),%eax
test   %eax,%eax
je     804a898 <calloc@plt+0x1508>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x1c(%esp)
call   804f750 <fts_set>
mov    %esi,(%esp)
call   804ef40 <fts_read>
mov    0x1c(%esp),%ecx
lea    -0x2(%ecx),%edi
mov    %ecx,%eax
jmp    804a69a <calloc@plt+0x130a>
xchg   %ax,%ax
mov    0x54(%esp),%ecx
cmpb   $0x0,0x8(%ecx)
je     804a65a <calloc@plt+0x12ca>
mov    0x30(%ebx),%edx
test   %edx,%edx
jle    804a65a <calloc@plt+0x12ca>
mov    0x44(%ebx),%edx
mov    0x48(%ebx),%ecx
xor    0x10(%esi),%ecx
xor    0xc(%esi),%edx
or     %edx,%ecx
je     804a65a <calloc@plt+0x12ca>
mov    0x4(%ebx),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jns    804a931 <calloc@plt+0x15a1>
jmp    804a938 <calloc@plt+0x15a8>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x10(%eax)
mov    0x4(%eax),%eax
mov    0x30(%eax),%edx
test   %edx,%edx
js     804a938 <calloc@plt+0x15a8>
mov    0x10(%eax),%ecx
test   %ecx,%ecx
je     804a920 <calloc@plt+0x1590>
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x805207c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049000 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
jmp    804a5d8 <calloc@plt+0x1248>
lea    0x0(%esi),%esi
mov    $0x2,%ebp
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%esp),%eax
mov    %ebx,%edx
mov    0x54(%esp),%ecx
mov    %eax,(%esp)
mov    0x18(%esp),%eax
call   8049d90 <calloc@plt+0xa00>
lea    -0x2(%eax),%edi
jmp    804a69a <calloc@plt+0x130a>
xchg   %ax,%ax
xor    %edx,%edx
cmpb   $0x2e,0x1(%eax)
sete   %dl
movzbl 0x1(%eax,%edx,1),%eax
cmp    $0x2f,%al
jne    804ac76 <calloc@plt+0x18e6>
mov    0x1c(%ebx),%eax
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051f17,0x4(%esp)
mov    %eax,%edi
jmp    804a6e5 <calloc@plt+0x1355>
xor    %edi,%edi
cmpl   $0x4,0x2c(%esp)
jne    804a8d7 <calloc@plt+0x1547>
mov    0x54(%esp),%ecx
mov    %ebx,%edx
mov    0x18(%esp),%eax
movl   $0x1,(%esp)
call   8049d90 <calloc@plt+0xa00>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x1c(%esp)
call   804f750 <fts_set>
mov    %esi,(%esp)
call   804ef40 <fts_read>
mov    0x1c(%esp),%ecx
cmp    $0x2,%ecx
jne    804a888 <calloc@plt+0x14f8>
mov    %ecx,%eax
jmp    804a69a <calloc@plt+0x130a>
nop
movl   $0x30900,0x8(%esp)
mov    0x18(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%esi),%eax
mov    %eax,(%esp)
call   80491b0 <openat64@plt>
test   %eax,%eax
js     804aacc <calloc@plt+0x173c>
mov    %eax,(%esp)
mov    %eax,0x1c(%esp)
call   8049290 <fdopendir@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
mov    %eax,%edi
je     804ac38 <calloc@plt+0x18a8>
call   8049200 <__errno_location@plt>
mov    %eax,0x1c(%esp)
movl   $0x0,(%eax)
jmp    804aaae <calloc@plt+0x171e>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
cmpb   $0x2e,0x14(%eax)
sete   %dl
movzbl 0x14(%eax,%edx,1),%eax
cmp    $0x2f,%al
jne    804ac69 <calloc@plt+0x18d9>
mov    %edi,(%esp)
call   80492c0 <readdir64@plt>
test   %eax,%eax
je     804a7fa <calloc@plt+0x146a>
cmpb   $0x2e,0x13(%eax)
je     804aa98 <calloc@plt+0x1708>
mov    %edi,(%esp)
call   8049360 <closedir@plt>
mov    0x54(%esp),%eax
cmpb   $0x0,0xa(%eax)
je     804a720 <calloc@plt+0x1390>
mov    $0x27,%ebp
jmp    804a725 <calloc@plt+0x1395>
mov    0x44(%ebx),%edx
mov    0x48(%ebx),%ecx
xor    0xc(%eax),%ecx
xor    0x8(%eax),%edx
or     %edx,%ecx
jne    804a857 <calloc@plt+0x14c7>
mov    0x1c(%ebx),%eax
cmpb   $0x2f,(%eax)
jne    804abcc <calloc@plt+0x183c>
cmpb   $0x0,0x1(%eax)
jne    804abcc <calloc@plt+0x183c>
mov    %eax,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x5,0x8(%esp)
movl   $0x8051fdc,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049000 <dcgettext@plt>
mov    %edi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052048,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
jmp    804a5bc <calloc@plt+0x122c>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
mov    $0x4,%ebp
movl   $0x8051f07,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
jmp    804a600 <calloc@plt+0x1270>
movl   $0x805235a,0x4(%esp)
movl   $0x1,(%esp)
call   804c960 <calloc@plt+0x35d0>
mov    %eax,%ebp
mov    0x1c(%ebx),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   804c960 <calloc@plt+0x35d0>
movl   $0x5,0x8(%esp)
movl   $0x805200c,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%edi
call   8049000 <dcgettext@plt>
mov    %ebp,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80490e0 <error@plt>
jmp    804ab50 <calloc@plt+0x17c0>
mov    %edx,(%esp)
call   8049350 <close@plt>
jmp    804aacc <calloc@plt+0x173c>
movl   $0x8052218,0xc(%esp)
movl   $0x23a,0x8(%esp)
movl   $0x8051f48,0x4(%esp)
movl   $0x80521a0,(%esp)
call   8049370 <__assert_fail@plt>
test   %al,%al
je     804aaae <calloc@plt+0x171e>
jmp    804aac4 <calloc@plt+0x1734>
test   %al,%al
je     804a9ce <calloc@plt+0x163e>
xchg   %ax,%ax
jmp    804a833 <calloc@plt+0x14a3>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x1,(%esp)
call   80499f0 <calloc@plt+0x660>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   80491a0 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     804ad92 <calloc@plt+0x1a02>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    804ad36 <calloc@plt+0x19a6>
mov    0x48(%esp),%eax
test   %eax,%eax
je     804ad68 <calloc@plt+0x19d8>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   8048ff0 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     804ad70 <calloc@plt+0x19e0>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049300 <strncmp@plt>
test   %eax,%eax
jne    804ad24 <calloc@plt+0x1994>
mov    %edi,(%esp)
call   80491a0 <strlen@plt>
cmp    %ebp,%eax
je     804ad88 <calloc@plt+0x19f8>
cmpl   $0xffffffff,0x18(%esp)
jne    804ace8 <calloc@plt+0x1958>
mov    %ebx,0x18(%esp)
jmp    804ad24 <calloc@plt+0x1994>
nop
movb   $0x1,0x1f(%esp)
jmp    804ad24 <calloc@plt+0x1994>
nop
cmpb   $0x0,0x1f(%esp)
jne    804ad9c <calloc@plt+0x1a0c>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    804ad77 <calloc@plt+0x19e7>
mov    $0xfffffffe,%eax
jmp    804ad7b <calloc@plt+0x19eb>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     804ae38 <calloc@plt+0x1aa8>
movl   $0x805223b,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   804c960 <calloc@plt+0x35d0>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   804c5b0 <calloc@plt+0x3220>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   80490e0 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x8052220,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,%esi
jmp    804adda <calloc@plt+0x1a4a>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x80561a4,%edi
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x8052258,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   8049000 <dcgettext@plt>
mov    %edi,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
mov    (%esi),%ebp
xor    %esi,%esi
test   %ebp,%ebp
jne    804aeed <calloc@plt+0x1b5d>
jmp    804af38 <calloc@plt+0x1ba8>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    %ebx,%edi
call   804c980 <calloc@plt+0x35f0>
movl   $0x805226d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     804af38 <calloc@plt+0x1ba8>
test   %esi,%esi
je     804aeb0 <calloc@plt+0x1b20>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8048ff0 <memcmp@plt>
test   %eax,%eax
jne    804aeb0 <calloc@plt+0x1b20>
mov    %ebp,(%esp)
call   804c980 <calloc@plt+0x35f0>
movl   $0x8052275,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804aedb <calloc@plt+0x1b4b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x80561a4,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804af56 <calloc@plt+0x1bc6>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049280 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   804acb0 <calloc@plt+0x1920>
test   %eax,%eax
js     804afa7 <calloc@plt+0x1c17>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   804adb0 <calloc@plt+0x1a20>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   804ae50 <calloc@plt+0x1ac0>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    804af9f <calloc@plt+0x1c0f>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     804b023 <calloc@plt+0x1c93>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    804b00b <calloc@plt+0x1c7b>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     804b023 <calloc@plt+0x1c93>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8048ff0 <memcmp@plt>
test   %eax,%eax
jne    804b000 <calloc@plt+0x1c70>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x805621c
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x80561e4,%ebx
mov    %ebx,(%esp)
call   804d580 <calloc@plt+0x41f0>
test   %eax,%eax
jne    804b0e0 <calloc@plt+0x1d50>
mov    %ebx,(%esp)
call   804f990 <fts_children+0x200>
test   %eax,%eax
je     804b13a <calloc@plt+0x1daa>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x5,0x8(%esp)
movl   $0x805227a,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    0x805621c,%edx
test   %edx,%edx
mov    %eax,%ebx
je     804b148 <calloc@plt+0x1db8>
mov    %edx,(%esp)
call   804c750 <calloc@plt+0x33c0>
mov    %eax,%esi
call   8049200 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x805228d,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
call   804b190 <calloc@plt+0x1e00>
mov    0x8056150,%eax
mov    %eax,(%esp)
call   8048f50 <_exit@plt>
nop
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804d5b0 <calloc@plt+0x4220>
mov    0x80561e4,%ebx
test   %eax,%eax
jne    804b05b <calloc@plt+0x1ccb>
mov    0x80561e4,%eax
mov    %eax,(%esp)
call   804d520 <calloc@plt+0x4190>
mov    %eax,%ebx
mov    0x80561e4,%eax
mov    %eax,(%esp)
call   804f990 <fts_children+0x200>
test   %eax,%eax
jne    804b070 <calloc@plt+0x1ce0>
test   %ebx,%ebx
jne    804b070 <calloc@plt+0x1ce0>
add    $0x24,%esp
pop    %ebx
pop    %esi
jmp    804b190 <calloc@plt+0x1e00>
lea    0x0(%esi,%eiz,1),%esi
call   8049200 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8052277,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
jmp    804b0cd <calloc@plt+0x1d3d>
mov    0x4(%esp),%eax
mov    %eax,0x8056224
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8056220
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x8056200,%eax
mov    %eax,(%esp)
call   804f990 <fts_children+0x200>
test   %eax,%eax
je     804b1b9 <calloc@plt+0x1e29>
cmpb   $0x0,0x8056220
je     804b1d0 <calloc@plt+0x1e40>
call   8049200 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    804b1d0 <calloc@plt+0x1e40>
mov    0x80561a4,%eax
mov    %eax,(%esp)
call   804f990 <fts_children+0x200>
test   %eax,%eax
jne    804b228 <calloc@plt+0x1e98>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x8052294,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8056224,%eax
test   %eax,%eax
je     804b235 <calloc@plt+0x1ea5>
mov    %eax,(%esp)
call   804c750 <calloc@plt+0x33c0>
mov    %eax,%esi
call   8049200 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x805228d,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
mov    0x8056150,%eax
mov    %eax,(%esp)
call   8048f50 <_exit@plt>
call   8049200 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x8052277,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80490e0 <error@plt>
jmp    804b228 <calloc@plt+0x1e98>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    804b27b <calloc@plt+0x1eeb>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     804b270 <calloc@plt+0x1ee0>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     804b2a9 <calloc@plt+0x1f19>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     804b2a9 <calloc@plt+0x1f19>
cmp    $0x2f,%cl
je     804b2b0 <calloc@plt+0x1f20>
test   %bl,%bl
je     804b288 <calloc@plt+0x1ef8>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    804b292 <calloc@plt+0x1f02>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    804b288 <calloc@plt+0x1ef8>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80491a0 <strlen@plt>
cmp    $0x1,%eax
jbe    804b2df <calloc@plt+0x1f4f>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     804b2e8 <calloc@plt+0x1f58>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    804b2d5 <calloc@plt+0x1f45>
nop
jmp    804b2df <calloc@plt+0x1f4f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x20(%esp),%edx
mov    0x10(%edx),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804b378 <calloc@plt+0x1fe8>
cmp    $0x4000,%eax
movl   $0x5,0x8(%esp)
je     804b3d0 <calloc@plt+0x2040>
cmp    $0x6000,%eax
je     804b3e8 <calloc@plt+0x2058>
cmp    $0x2000,%eax
je     804b408 <calloc@plt+0x2078>
cmp    $0x1000,%eax
je     804b428 <calloc@plt+0x2098>
cmp    $0xa000,%eax
je     804b448 <calloc@plt+0x20b8>
cmp    $0xc000,%eax
je     804b3b8 <calloc@plt+0x2028>
movl   $0x805230e,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%edx),%eax
or     0x2c(%edx),%eax
movl   $0x5,0x8(%esp)
jne    804b3a0 <calloc@plt+0x2010>
movl   $0x80522a0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
add    $0x1c,%esp
ret
movl   $0x80522b3,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
add    $0x1c,%esp
ret
movl   $0x8052307,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
xchg   %ax,%ax
movl   $0x80522c0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
xchg   %ax,%ax
movl   $0x80522ca,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80522dd,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80522f4,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x80522f9,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
jmp    804b370 <calloc@plt+0x1fe0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     804b4f3 <calloc@plt+0x2163>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049270 <strrchr@plt>
test   %eax,%eax
je     804b4df <calloc@plt+0x214f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    804b4df <calloc@plt+0x214f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x8052354,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    804b4df <calloc@plt+0x214f>
mov    $0x3,%ecx
mov    $0x805235c,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    804b4df <calloc@plt+0x214f>
lea    0x4(%eax),%ebx
mov    %ebx,0x80561a0
mov    %ebx,0x8056228
mov    %ebx,0x80561c0
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x80561a4,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805231c,(%esp)
mov    %eax,0xc(%esp)
call   8049070 <fwrite@plt>
call   8049320 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     804b541 <calloc@plt+0x21b1>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049320 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     804b580 <calloc@plt+0x21f0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8050b80 <fts_children+0x13f0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    804b5e8 <calloc@plt+0x2258>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    804b5d0 <calloc@plt+0x2240>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x2d,0x3(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x38,0x4(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x0,0x5(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x60,(%esi)
mov    $0x805236f,%eax
mov    $0x8052360,%edx
cmovne %edx,%eax
jmp    804b578 <calloc@plt+0x21e8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8052369,%eax
cmp    $0x7,%edi
mov    $0x8052367,%edx
cmovne %edx,%eax
jmp    804b578 <calloc@plt+0x21e8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    804b5d0 <calloc@plt+0x2240>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x31,0x2(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x38,0x3(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x30,0x4(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x33,0x5(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x30,0x6(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x0,0x7(%eax)
jne    804b5d0 <calloc@plt+0x2240>
cmpb   $0x60,(%esi)
mov    $0x805236b,%eax
mov    $0x8052364,%edx
cmovne %edx,%eax
jmp    804b578 <calloc@plt+0x21e8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049090 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     804bf18 <calloc@plt+0x2b88>
mov    0x94(%esp),%eax
jmp    *0x80523c0(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804bd20 <calloc@plt+0x2990>
test   %al,%al
je     804bd33 <calloc@plt+0x29a3>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     804bd08 <calloc@plt+0x2978>
cmpb   $0x0,0x58(%esp)
je     804bd08 <calloc@plt+0x2978>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     804bd08 <calloc@plt+0x2978>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8048ff0 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    804bda0 <calloc@plt+0x2a10>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     804bab8 <calloc@plt+0x2728>
movzbl %bl,%eax
jmp    *0x80523e4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     804b8f8 <calloc@plt+0x2568>
cmpl   $0x3,0x94(%esp)
jne    804b858 <calloc@plt+0x24c8>
testb  $0x4,0x98(%esp)
je     804b858 <calloc@plt+0x24c8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    804b858 <calloc@plt+0x24c8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    804b858 <calloc@plt+0x24c8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     804b858 <calloc@plt+0x24c8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     804b858 <calloc@plt+0x24c8>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmp    %edi,%ebp
jae    804b81e <calloc@plt+0x248e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804b82e <calloc@plt+0x249e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804b83e <calloc@plt+0x24ae>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    804b84e <calloc@plt+0x24be>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     804b866 <calloc@plt+0x24d6>
cmpb   $0x0,0x5a(%esp)
jne    804b88b <calloc@plt+0x24fb>
mov    0x34(%esp),%edx
test   %edx,%edx
je     804b88b <calloc@plt+0x24fb>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    804b892 <calloc@plt+0x2502>
cmpb   $0x0,0x24(%esp)
je     804b8a8 <calloc@plt+0x2518>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmp    %edi,%ebp
jae    804b8a5 <calloc@plt+0x2515>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    804b8b6 <calloc@plt+0x2526>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    804b6f8 <calloc@plt+0x2368>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     804bf08 <calloc@plt+0x2b78>
test   %al,%al
jne    804b858 <calloc@plt+0x24c8>
test   %esi,%esi
jne    804b858 <calloc@plt+0x24c8>
cmpl   $0x2,0x94(%esp)
jne    804b858 <calloc@plt+0x24c8>
nop
cmpb   $0x0,0x2f(%esp)
je     804b858 <calloc@plt+0x24c8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b640 <calloc@plt+0x22b0>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    804c032 <calloc@plt+0x2ca2>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     804bf7b <calloc@plt+0x2beb>
cmpb   $0x0,0x58(%esp)
je     804b858 <calloc@plt+0x24c8>
mov    %eax,%ebx
jmp    804b892 <calloc@plt+0x2502>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    804b983 <calloc@plt+0x25f3>
nop
mov    $0x66,%eax
jmp    804b983 <calloc@plt+0x25f3>
nop
mov    $0x76,%eax
jmp    804b983 <calloc@plt+0x25f3>
nop
mov    $0x6e,%eax
jmp    804b975 <calloc@plt+0x25e5>
nop
mov    $0x74,%eax
jmp    804b975 <calloc@plt+0x25e5>
nop
cmpb   $0x0,0x58(%esp)
je     804bef0 <calloc@plt+0x2b60>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmp    %edi,%ebp
jae    804b9e2 <calloc@plt+0x2652>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    804ba28 <calloc@plt+0x2698>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     804ba28 <calloc@plt+0x2698>
cmp    %eax,%edi
ja     804bf90 <calloc@plt+0x2c00>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804ba1e <calloc@plt+0x268e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    804b866 <calloc@plt+0x24d6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    804b983 <calloc@plt+0x25f3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     804ba5e <calloc@plt+0x26ce>
cmpb   $0x0,0x2f(%esp)
je     804ba5e <calloc@plt+0x26ce>
test   %dl,%dl
jne    804b8a8 <calloc@plt+0x2518>
mov    %ebx,%eax
jmp    804b975 <calloc@plt+0x25e5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    804b858 <calloc@plt+0x24c8>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmp    %edi,%ebp
jae    804ba8d <calloc@plt+0x26fd>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    804ba9d <calloc@plt+0x270d>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    804baad <calloc@plt+0x271d>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    804b858 <calloc@plt+0x24c8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    804bdb0 <calloc@plt+0x2a20>
call   8049380 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     804b858 <calloc@plt+0x24c8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    804bb64 <calloc@plt+0x27d4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmp    %edi,%ebp
jae    804bb13 <calloc@plt+0x2783>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    804bb26 <calloc@plt+0x2796>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    804bb3c <calloc@plt+0x27ac>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    804b8ab <calloc@plt+0x251b>
cmp    %edi,%ebp
jae    804bb59 <calloc@plt+0x27c9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    804bb00 <calloc@plt+0x2770>
cmpb   $0x0,0x24(%esp)
je     804bb45 <calloc@plt+0x27b5>
cmp    %edi,%ebp
jae    804bb77 <calloc@plt+0x27e7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    804bb45 <calloc@plt+0x27b5>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804c037 <calloc@plt+0x2ca7>
test   %edi,%edi
je     804bf3d <calloc@plt+0x2bad>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052369,0x3c(%esp)
movb   $0x22,(%eax)
jmp    804b6d8 <calloc@plt+0x2348>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052369,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    804b6d8 <calloc@plt+0x2348>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
lea    0x0(%esi,%eiz,1),%esi
je     804bc4c <calloc@plt+0x28bc>
mov    0x94(%esp),%edx
mov    $0x8052373,%eax
call   804b550 <calloc@plt+0x21c0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x8052367,%eax
call   804b550 <calloc@plt+0x21c0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    804bc7a <calloc@plt+0x28ea>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804bc7a <calloc@plt+0x28ea>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    804bc6f <calloc@plt+0x28df>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804bc68 <calloc@plt+0x28d8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   80491a0 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052367,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    804b6d8 <calloc@plt+0x2348>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    804c053 <calloc@plt+0x2cc3>
test   %edi,%edi
je     804bf5c <calloc@plt+0x2bcc>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x8052367,0x3c(%esp)
movb   $0x27,(%eax)
jmp    804b6d8 <calloc@plt+0x2348>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    804b790 <calloc@plt+0x2400>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    804b718 <calloc@plt+0x2388>
test   %ebp,%ebp
jne    804bd4c <calloc@plt+0x29bc>
cmpl   $0x2,0x94(%esp)
jne    804bd4c <calloc@plt+0x29bc>
cmpb   $0x0,0x2f(%esp)
jne    804b908 <calloc@plt+0x2578>
cmpb   $0x0,0x2f(%esp)
jne    804bd82 <calloc@plt+0x29f2>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     804bd82 <calloc@plt+0x29f2>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     804bd82 <calloc@plt+0x29f2>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    804bd77 <calloc@plt+0x29e7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    804bd70 <calloc@plt+0x29e0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    804b952 <calloc@plt+0x25c2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    804b952 <calloc@plt+0x25c2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    804b790 <calloc@plt+0x2400>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     804bf1d <calloc@plt+0x2b8d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   80490c0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804bf9d <calloc@plt+0x2c0d>
cmp    $0xffffffff,%eax
je     804bfb8 <calloc@plt+0x2c28>
cmp    $0xfffffffe,%eax
je     804bfd3 <calloc@plt+0x2c43>
cmpb   $0x0,0x2f(%esp)
je     804be7f <calloc@plt+0x2aef>
cmpl   $0x2,0x94(%esp)
jne    804be7f <calloc@plt+0x2aef>
cmp    $0x1,%eax
je     804be7f <calloc@plt+0x2aef>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     804be78 <calloc@plt+0x2ae8>
movzbl %al,%eax
jmp    *0x80525e0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    804be60 <calloc@plt+0x2ad0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049060 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   8048fc0 <mbsinit@plt>
test   %eax,%eax
je     804bdf1 <calloc@plt+0x2a61>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    804bae3 <calloc@plt+0x2753>
and    0x58(%esp),%dl
jmp    804baed <calloc@plt+0x275d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    804b908 <calloc@plt+0x2578>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     804b858 <calloc@plt+0x24c8>
add    $0x1,%esi
jmp    804b6f8 <calloc@plt+0x2368>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    804b8d9 <calloc@plt+0x2549>
call   8049320 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   80491a0 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    804bdce <calloc@plt+0x2a3e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052369,0x3c(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052367,0x3c(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
cmpb   $0x0,0x2f(%esp)
je     804b983 <calloc@plt+0x25f3>
jmp    804b908 <calloc@plt+0x2578>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    804ba0e <calloc@plt+0x267e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bec5 <calloc@plt+0x2b35>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    804bec5 <calloc@plt+0x2b35>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    804c028 <calloc@plt+0x2c98>
cmpb   $0x0,(%eax)
je     804c028 <calloc@plt+0x2c98>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    804c016 <calloc@plt+0x2c86>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     804c020 <calloc@plt+0x2c90>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     804c010 <calloc@plt+0x2c80>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    804bec5 <calloc@plt+0x2b35>
call   8049010 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052369,0x3c(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x8052367,0x3c(%esp)
jmp    804b6d8 <calloc@plt+0x2348>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049200 <__errno_location@plt>
test   %edi,%edi
mov    0x8056190,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     804c1fc <calloc@plt+0x2e6c>
cmp    0x805619c,%edi
jb     804c108 <calloc@plt+0x2d78>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     804c201 <calloc@plt+0x2e71>
cmp    $0x8056194,%esi
lea    0x0(,%ebp,8),%eax
je     804c1d0 <calloc@plt+0x2e40>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   804d1c0 <calloc@plt+0x3e30>
mov    %eax,%esi
mov    %eax,0x8056190
mov    0x805619c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   80491e0 <memset@plt>
mov    %ebp,0x805619c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b640 <calloc@plt+0x22b0>
cmp    %eax,%ebp
ja     804c1b7 <calloc@plt+0x2e27>
lea    0x1(%eax),%ebp
cmp    $0x8056240,%esi
mov    %ebp,(%edi)
je     804c172 <calloc@plt+0x2de2>
mov    %esi,(%esp)
call   8048f90 <free@plt>
mov    %ebp,(%esp)
call   804d150 <calloc@plt+0x3dc0>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   804b640 <calloc@plt+0x22b0>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   804d1c0 <calloc@plt+0x3e30>
mov    0x8056198,%edx
mov    %eax,%esi
mov    %eax,0x8056190
mov    0x8056194,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    804c0df <calloc@plt+0x2d4f>
call   8049320 <abort@plt>
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049200 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8056340,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   804d360 <calloc@plt+0x3fd0>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    804c270 <calloc@plt+0x2ee0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8056340,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8056340,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8056340,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     804c323 <calloc@plt+0x2f93>
test   %ecx,%ecx
je     804c323 <calloc@plt+0x2f93>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049320 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8056340,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049200 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   804b640 <calloc@plt+0x22b0>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8056340,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049200 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   804b640 <calloc@plt+0x22b0>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   804d150 <calloc@plt+0x3dc0>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   804b640 <calloc@plt+0x22b0>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     804c458 <calloc@plt+0x30c8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c390 <calloc@plt+0x3000>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x805619c,%edi
mov    0x8056190,%esi
cmp    $0x1,%edi
jbe    804c4d3 <calloc@plt+0x3143>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   8048f90 <free@plt>
cmp    %edi,%ebx
jne    804c4c0 <calloc@plt+0x3130>
mov    0x4(%esi),%eax
cmp    $0x8056240,%eax
je     804c4f9 <calloc@plt+0x3169>
mov    %eax,(%esp)
call   8048f90 <free@plt>
movl   $0x100,0x8056194
00
movl   $0x8056240,0x8056198
08
cmp    $0x8056194,%esi
je     804c513 <calloc@plt+0x3183>
mov    %esi,(%esp)
call   8048f90 <free@plt>
movl   $0x8056194,0x8056190
08
movl   $0x1,0x805619c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056340,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056340,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056340,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056340,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b520 <calloc@plt+0x2190>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804c070 <calloc@plt+0x2ce0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   804b520 <calloc@plt+0x2190>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804c070 <calloc@plt+0x2ce0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c5b0 <calloc@plt+0x3220>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   804c5e0 <calloc@plt+0x3250>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8056340,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8056344,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8056348,%eax
mov    %eax,0x18(%esp)
mov    0x805634c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056350,%eax
mov    %eax,0x20(%esp)
mov    0x8056354,%eax
mov    %eax,0x24(%esp)
mov    0x8056358,%eax
mov    %eax,0x28(%esp)
mov    0x805635c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056360,%eax
mov    %eax,0x30(%esp)
mov    0x8056364,%eax
mov    %eax,0x34(%esp)
mov    0x8056368,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x805636c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   804c070 <calloc@plt+0x2ce0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c670 <calloc@plt+0x32e0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   804c670 <calloc@plt+0x32e0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   804c670 <calloc@plt+0x32e0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8056340,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8056344,%eax
mov    %eax,0x14(%esp)
mov    0x8056348,%eax
mov    %eax,0x18(%esp)
mov    0x805634c,%eax
mov    %eax,0x1c(%esp)
mov    0x8056350,%eax
mov    %eax,0x20(%esp)
mov    0x8056354,%eax
mov    %eax,0x24(%esp)
mov    0x8056358,%eax
mov    %eax,0x28(%esp)
mov    0x805635c,%eax
mov    %eax,0x2c(%esp)
mov    0x8056360,%eax
mov    %eax,0x30(%esp)
mov    0x8056364,%eax
mov    %eax,0x34(%esp)
mov    0x8056368,%eax
mov    %eax,0x38(%esp)
mov    0x805636c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   804c2f0 <calloc@plt+0x2f60>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   804c070 <calloc@plt+0x2ce0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804c7b0 <calloc@plt+0x3420>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c7b0 <calloc@plt+0x3420>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   804c7b0 <calloc@plt+0x3420>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8056160,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8056160,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8056160,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8056160,0x4(%esp)
jmp    804c070 <calloc@plt+0x2ce0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x78,%esp
lea    0x10(%esp),%eax
mov    0x80(%esp),%ebx
mov    %eax,0x8(%esp)
movl   $0x805235a,0x4(%esp)
movl   $0x3,(%esp)
call   8049340 <__lxstat64@plt>
test   %eax,%eax
jne    804c9f0 <calloc@plt+0x3660>
mov    0x68(%esp),%eax
mov    0x6c(%esp),%edx
mov    %eax,(%ebx)
mov    0x10(%esp),%eax
mov    %edx,0x4(%ebx)
mov    0x14(%esp),%edx
mov    %eax,0x8(%ebx)
mov    %ebx,%eax
mov    %edx,0xc(%ebx)
add    $0x78,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
add    $0x78,%esp
xor    %eax,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     804ceb8 <calloc@plt+0x3b28>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x80526c4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x80526d7,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x8052960,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   80492e0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8052734,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     804cee0 <calloc@plt+0x3b50>
jmp    *0x8052938(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052898,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8049000 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   80492e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80528c8,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8049000 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80492e0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049320 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526db,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80526eb,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052702,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    80492e0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052800,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8049000 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804cb5f <calloc@plt+0x37cf>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052820,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049000 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804cb5f <calloc@plt+0x37cf>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x8052844,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049000 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804cb5f <calloc@plt+0x37cf>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805286c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049000 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804cb5f <calloc@plt+0x37cf>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x80526d0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80492e0 <__fprintf_chk@plt>
jmp    804ca51 <calloc@plt+0x36c1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x80528fc,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8049000 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    804cbea <calloc@plt+0x385a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     804cf8a <calloc@plt+0x3bfa>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    804cf80 <calloc@plt+0x3bf0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804ca00 <calloc@plt+0x3670>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     804cfe2 <calloc@plt+0x3c52>
add    $0x1,%eax
cmp    $0xa,%eax
jne    804cfd0 <calloc@plt+0x3c40>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   804ca00 <calloc@plt+0x3670>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   804cfc0 <calloc@plt+0x3c30>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x805271e,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x8051c6e,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x8051c84,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
movl   $0x8051aa8,0xc(%esp)
movl   $0x8051c98,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049220 <__printf_chk@plt>
mov    0x8056200,%ebx
movl   $0x5,0x8(%esp)
movl   $0x8051ad0,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049160 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
cmpb   $0x0,0x8056371
je     804d128 <calloc@plt+0x3d98>
movzbl 0x8056370,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
call   8049020 <geteuid@plt>
movb   $0x1,0x8056371
test   %eax,%eax
sete   %al
mov    %al,0x8056370
add    $0xc,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
je     804d169 <calloc@plt+0x3dd9>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     804d164 <calloc@plt+0x3dd4>
lea    0x0(%esi),%esi
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     804d1a9 <calloc@plt+0x3e19>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d150 <calloc@plt+0x3dc0>
call   804d3c0 <calloc@plt+0x4030>
xchg   %ax,%ax
jmp    804d150 <calloc@plt+0x3dc0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     804d1e8 <calloc@plt+0x3e58>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049100 <realloc@plt>
test   %eax,%eax
je     804d1fb <calloc@plt+0x3e6b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     804d1d0 <calloc@plt+0x3e40>
mov    %eax,(%esp)
call   8048f90 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     804d1e0 <calloc@plt+0x3e50>
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     804d243 <calloc@plt+0x3eb3>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    804d1c0 <calloc@plt+0x3e30>
call   804d3c0 <calloc@plt+0x4030>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     804d290 <calloc@plt+0x3f00>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    804d2a8 <calloc@plt+0x3f18>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804d1c0 <calloc@plt+0x3e30>
xchg   %ax,%ax
test   %ecx,%ecx
jne    804d279 <calloc@plt+0x3ee9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    804d279 <calloc@plt+0x3ee9>
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     804d2e8 <calloc@plt+0x3f58>
cmp    $0xaaaaaaa9,%eax
ja     804d2f4 <calloc@plt+0x3f64>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    804d1c0 <calloc@plt+0x3e30>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    804d2d0 <calloc@plt+0x3f40>
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   804d150 <calloc@plt+0x3dc0>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80491e0 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049390 <calloc@plt>
test   %eax,%eax
je     804d34f <calloc@plt+0x3fbf>
add    $0x1c,%esp
ret
nop
call   804d3c0 <calloc@plt+0x4030>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   804d150 <calloc@plt+0x3dc0>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8048fa0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   80491a0 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   804d360 <calloc@plt+0x3fd0>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805298f,0x4(%esp)
movl   $0x0,(%esp)
call   8049000 <dcgettext@plt>
mov    0x8056150,%edx
movl   $0x8052277,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   80490e0 <error@plt>
call   8049320 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    0x28(%esp),%edx
or     $0x2,%ah
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   804ea30 <fts_open>
test   %eax,%eax
je     804d440 <calloc@plt+0x40b0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
call   8049200 <__errno_location@plt>
cmpl   $0x16,(%eax)
je     804d450 <calloc@plt+0x40c0>
call   804d3c0 <calloc@plt+0x4030>
nop
movl   $0x80529c8,0xc(%esp)
movl   $0x29,0x8(%esp)
movl   $0x80529a0,0x4(%esp)
movl   $0x80529ab,(%esp)
call   8049370 <__assert_fail@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    0x2c(%eax),%edx
and    $0x11,%edx
cmp    $0x10,%edx
je     804d4a8 <calloc@plt+0x4118>
xor    %eax,%eax
cmp    $0x11,%edx
je     804d498 <calloc@plt+0x4108>
repz ret
mov    0x8(%esp),%eax
mov    0x30(%eax),%eax
test   %eax,%eax
setne  %al
ret
lea    0x0(%esi),%esi
mov    $0x1,%eax
ret
xchg   %ax,%ax
push   %ebx
xor    %ebx,%ebx
sub    $0x28,%esp
mov    0x80561e4,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x18(%esp)
movl   $0x0,0x1c(%esp)
mov    %eax,0xc(%esp)
lea    0x1c(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049050 <__getdelim@plt>
test   %eax,%eax
jle    804d509 <calloc@plt+0x4179>
mov    0x18(%esp),%edx
movb   $0x0,-0x1(%edx,%eax,1)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049230 <rpmatch@plt>
test   %eax,%eax
setg   %bl
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     804d538 <calloc@plt+0x41a8>
mov    %ebx,(%esp)
call   8049120 <__freading@plt>
test   %eax,%eax
jne    804d548 <calloc@plt+0x41b8>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048f40 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     804d538 <calloc@plt+0x41a8>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   804d5b0 <calloc@plt+0x4220>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8048f40 <fflush@plt>
xchg   %ax,%ax
nop
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x10(%edx),%ecx
cmp    %ecx,0x14(%edx)
ja     804d5a6 <calloc@plt+0x4216>
mov    0x8(%edx),%eax
xor    %ecx,%ecx
sub    0x4(%edx),%eax
testl  $0x100,(%edx)
je     804d5a4 <calloc@plt+0x4214>
mov    0x2c(%edx),%ecx
sub    0x24(%edx),%ecx
add    %ecx,%eax
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     804d5f0 <calloc@plt+0x4260>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8048fe0 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    804d5cf <calloc@plt+0x423f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    804d5cf <calloc@plt+0x423f>
mov    %ebx,(%esp)
call   8049210 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   80492b0 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     804d637 <calloc@plt+0x42a7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    804d62f <calloc@plt+0x429f>
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
xor    %eax,%eax
push   %ebx
mov    0xc(%esp),%esi
mov    0x10(%esp),%ebx
mov    0x8(%esi),%edx
mov    0xc(%esi),%ecx
xor    0xc(%ebx),%ecx
xor    0x8(%ebx),%edx
or     %edx,%ecx
je     804d660 <calloc@plt+0x42d0>
pop    %ebx
pop    %esi
ret
nop
mov    (%esi),%edx
mov    0x4(%esi),%eax
xor    0x4(%ebx),%eax
xor    (%ebx),%edx
pop    %ebx
pop    %esi
or     %eax,%edx
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0xc(%eax),%edx
mov    0x8(%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80511b0 <fts_children+0x1a20>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80511b0 <fts_children+0x1a20>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%esp),%ecx
mov    (%eax),%edx
mov    0x4(%eax),%eax
xor    0x4(%ecx),%eax
xor    (%ecx),%edx
or     %eax,%edx
sete   %al
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%ecx
mov    0x9c(%eax),%ebx
mov    0x10(%esp),%eax
mov    (%eax),%eax
mov    0xa0(%eax),%edx
mov    0x9c(%eax),%esi
cmp    %edx,%ecx
jae    804d738 <calloc@plt+0x43a8>
mov    $0xffffffff,%eax
nop
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
jbe    804d758 <calloc@plt+0x43c8>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804d730 <calloc@plt+0x43a0>
jb     804d749 <calloc@plt+0x43b9>
cmp    %esi,%ebx
ja     804d730 <calloc@plt+0x43a0>
xor    %eax,%eax
pop    %ebx
pop    %esi
lea    0x0(%esi),%esi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%ebx
jb     804d72a <calloc@plt+0x439a>
cmp    %edx,%ecx
mov    $0x1,%eax
ja     804d730 <calloc@plt+0x43a0>
jmp    804d743 <calloc@plt+0x43b3>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x1c,%esp
mov    0x28(%eax),%ebp
cmp    %ecx,0x24(%eax)
jb     804d7f8 <calloc@plt+0x4468>
mov    0x8(%eax),%edx
test   %ebx,%ebx
je     804d7a0 <calloc@plt+0x4410>
lea    0x0(%esi,%eiz,1),%esi
add    $0x4,%edx
mov    %ebx,-0x4(%edx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804d790 <calloc@plt+0x4400>
mov    0x8(%esi),%edx
mov    %ebp,0xc(%esp)
movl   $0x4,0x8(%esp)
mov    %edi,0x4(%esp)
mov    %edx,(%esp)
call   80492d0 <qsort@plt>
mov    0x8(%esi),%ebp
mov    %edi,%esi
sub    $0x1,%esi
mov    0x0(%ebp),%eax
je     804d84b <calloc@plt+0x44bb>
mov    %eax,%ecx
mov    %ebp,%edx
jmp    804d7d2 <calloc@plt+0x4442>
nop
mov    (%edx),%ecx
mov    0x4(%edx),%ebx
add    $0x4,%edx
sub    $0x1,%esi
mov    %ebx,0x8(%ecx)
jne    804d7d0 <calloc@plt+0x4440>
mov    -0x4(%ebp,%edi,4),%edx
movl   $0x0,0x8(%edx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x28(%ecx),%eax
cmp    $0x3fffffff,%eax
mov    %eax,0x24(%esi)
ja     804d828 <calloc@plt+0x4498>
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8049100 <realloc@plt>
test   %eax,%eax
je     804d828 <calloc@plt+0x4498>
mov    %eax,0x8(%esi)
mov    %eax,%edx
jmp    804d788 <calloc@plt+0x43f8>
lea    0x0(%esi),%esi
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    %ebx,%eax
movl   $0x0,0x8(%esi)
movl   $0x0,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,%edx
jmp    804d7e4 <calloc@plt+0x4454>
nop
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
sub    $0x1c,%esp
lea    0xa8(%ecx),%eax
mov    %eax,(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804d8c6 <calloc@plt+0x4536>
lea    0xa4(%eax),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8048fa0 <memcpy@plt>
mov    0x14(%edi),%eax
mov    $0x3,%edx
movb   $0x0,0xa4(%ebx,%esi,1)
mov    %esi,0x34(%ebx)
mov    %edi,0x2c(%ebx)
mov    %eax,0x1c(%ebx)
xor    %eax,%eax
movl   $0x0,0x20(%ebx)
movl   $0x0,0xc(%ebx)
mov    %ax,0x3e(%ebx)
mov    %dx,0x40(%ebx)
movl   $0x0,0x10(%ebx)
movl   $0x0,0x14(%ebx)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
test   %eax,%eax
jne    804d8e2 <calloc@plt+0x4552>
jmp    804d900 <calloc@plt+0x4570>
lea    0x0(%esi),%esi
mov    %esi,%ebx
mov    0xc(%ebx),%eax
mov    0x8(%ebx),%esi
test   %eax,%eax
je     804d8f4 <calloc@plt+0x4564>
mov    %eax,(%esp)
call   8049360 <closedir@plt>
mov    %ebx,(%esp)
call   8048f90 <free@plt>
test   %esi,%esi
jne    804d8e0 <calloc@plt+0x4550>
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
jmp    804d924 <calloc@plt+0x4594>
mov    %ebx,(%esp)
call   8050b40 <fts_children+0x13b0>
test   %eax,%eax
jns    804d938 <calloc@plt+0x45a8>
mov    %ebx,(%esp)
call   8050af0 <fts_children+0x1360>
test   %al,%al
je     804d918 <calloc@plt+0x4588>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8049350 <close@plt>
jmp    804d924 <calloc@plt+0x4594>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x1c(%eax),%eax
cmp    %edx,%eax
je     804d99c <calloc@plt+0x460c>
test   %cl,%cl
jne    804d980 <calloc@plt+0x45f0>
testb  $0x4,0x2c(%ebx)
jne    804d976 <calloc@plt+0x45e6>
test   %eax,%eax
js     804d976 <calloc@plt+0x45e6>
mov    %eax,(%esp)
call   8049350 <close@plt>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
nop
mov    %eax,0x4(%esp)
lea    0x38(%ebx),%eax
mov    %eax,(%esp)
call   8050b00 <fts_children+0x1370>
test   %eax,%eax
jns    804d96e <calloc@plt+0x45de>
mov    %esi,0x1c(%ebx)
add    $0x14,%esp
pop    %ebx
pop    %esi
ret
cmp    $0xffffff9c,%eax
je     804d960 <calloc@plt+0x45d0>
call   8049320 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %esi,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x14,%esp
mov    0x2c(%eax),%eax
test   $0x4,%al
jne    804d9d8 <calloc@plt+0x4648>
test   $0x2,%ah
je     804d9e8 <calloc@plt+0x4658>
mov    $0x1,%ecx
mov    $0xffffff9c,%edx
mov    %ebx,%eax
xor    %esi,%esi
call   804d950 <calloc@plt+0x45c0>
lea    0x38(%ebx),%eax
call   804d910 <calloc@plt+0x4580>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
mov    0x18(%ebx),%eax
mov    %eax,(%esp)
call   80492a0 <fchdir@plt>
test   %eax,%eax
setne  %al
movzbl %al,%eax
mov    %eax,%esi
lea    0x38(%ebx),%eax
call   804d910 <calloc@plt+0x4580>
add    $0x14,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x2c,%esp
mov    0x30(%ecx),%ebp
lea    0x44(%ecx),%edi
mov    0x40(%esp),%edx
mov    (%esi),%ecx
test   %ebp,%ebp
jne    804da30 <calloc@plt+0x46a0>
test   $0x1,%cl
jne    804da39 <calloc@plt+0x46a9>
and    $0x2,%ecx
jne    804da39 <calloc@plt+0x46a9>
test   %dl,%dl
je     804dab8 <calloc@plt+0x4728>
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049330 <__xstat64@plt>
test   %eax,%eax
je     804dae0 <calloc@plt+0x4750>
call   8049200 <__errno_location@plt>
mov    (%eax),%esi
mov    %eax,%ebp
cmp    $0x2,%esi
je     804dbb0 <calloc@plt+0x4820>
mov    %esi,0x20(%ebx)
test   $0x1,%edi
mov    $0x60,%edx
jne    804dba0 <calloc@plt+0x4810>
test   $0x2,%edi
jne    804db88 <calloc@plt+0x47f8>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
je     804daa1 <calloc@plt+0x4711>
xor    %eax,%eax
add    $0x2,%edi
mov    %ax,-0x2(%edi)
and    $0x1,%edx
je     804daa9 <calloc@plt+0x4719>
movb   $0x0,(%edi)
mov    $0xa,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x18(%ebx),%edx
movl   $0x100,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x3,(%esp)
call   8049040 <__fxstatat64@plt>
test   %eax,%eax
jne    804db18 <calloc@plt+0x4788>
nop
mov    0x54(%ebx),%ecx
and    $0xf000,%ecx
cmp    $0x4000,%ecx
je     804db28 <calloc@plt+0x4798>
cmp    $0xa000,%ecx
mov    $0xc,%eax
je     804daae <calloc@plt+0x471e>
xor    %eax,%eax
cmp    $0x8000,%ecx
sete   %al
add    $0x2c,%esp
pop    %ebx
lea    0x3(%eax,%eax,4),%eax
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049200 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
jmp    804da6d <calloc@plt+0x46dd>
nop
mov    (%esi),%edx
mov    0x58(%ebx),%eax
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
and    $0x2,%edx
sub    %edx,%eax
cmpb   $0x2e,0xa4(%ebx)
mov    %eax,0x38(%ebx)
mov    $0x1,%eax
jne    804daae <calloc@plt+0x471e>
cmpb   $0x0,0xa5(%ebx)
je     804db70 <calloc@plt+0x47e0>
mov    0xa4(%ebx),%edx
and    $0xffff00,%edx
cmp    $0x2e00,%edx
jne    804daae <calloc@plt+0x471e>
cmpl   $0x1,0x30(%ebx)
sbb    %eax,%eax
and    $0xfffffffc,%eax
add    $0x5,%eax
jmp    804daae <calloc@plt+0x471e>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
sub    $0x2,%edx
jmp    804da8a <calloc@plt+0x46fa>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x44(%ebx)
add    $0x1,%edi
mov    $0x5f,%dl
jmp    804da7e <calloc@plt+0x46ee>
xchg   %ax,%ax
mov    0x18(%ebx),%eax
mov    %edi,0x8(%esp)
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049340 <__lxstat64@plt>
test   %eax,%eax
jne    804da6a <calloc@plt+0x46da>
movl   $0x0,0x0(%ebp)
mov    $0xd,%al
jmp    804daae <calloc@plt+0x471e>
lea    0x0(%esi),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    (%edx),%eax
lea    0x100(%eax,%ecx,1),%ecx
cmp    %ecx,%eax
ja     804dc18 <calloc@plt+0x4888>
mov    (%ebx),%eax
mov    %ecx,(%edx)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8049100 <realloc@plt>
test   %eax,%eax
je     804dc40 <calloc@plt+0x48b0>
mov    %eax,(%ebx)
mov    $0x1,%eax
add    $0x18,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
movl   $0x0,(%ebx)
call   8049200 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
xor    %eax,%eax
movl   $0x0,(%ebx)
jmp    804dc0e <calloc@plt+0x487e>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebx
mov    %edx,%ebx
sub    $0x28,%esp
test   $0x102,%eax
je     804dca8 <calloc@plt+0x4918>
movl   $0x8048f90,0x10(%esp)
movl   $0x804d640,0xc(%esp)
movl   $0x804d680,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1f,(%esp)
call   8050300 <fts_children+0xb70>
test   %eax,%eax
mov    %eax,(%ebx)
setne  %al
add    $0x28,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
movl   $0x1c,(%esp)
call   8049110 <malloc@plt>
mov    %eax,%edx
mov    %eax,(%ebx)
xor    %eax,%eax
test   %edx,%edx
je     804dca0 <calloc@plt+0x4910>
mov    %edx,(%esp)
call   804fa10 <fts_children+0x280>
add    $0x28,%esp
mov    $0x1,%eax
pop    %ebx
ret
push   %esi
push   %ebx
mov    %edx,%ebx
and    $0x10,%ebx
sub    $0x14,%esp
cmp    $0x1,%ebx
mov    %edx,%ebx
sbb    %esi,%esi
and    $0xfffe0000,%esi
shl    $0x7,%ebx
add    $0x30900,%esi
and    $0x40000,%ebx
or     %esi,%ebx
and    $0x2,%dh
je     804dd30 <calloc@plt+0x49a0>
mov    %ebx,0x8(%esp)
mov    %ecx,0x4(%esp)
mov    %eax,(%esp)
call   8050f40 <fts_children+0x17b0>
mov    %eax,%ebx
test   %ebx,%ebx
js     804dd23 <calloc@plt+0x4993>
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   804f8f0 <fts_children+0x160>
add    $0x14,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x4(%esp)
mov    %ecx,(%esp)
call   804fb20 <fts_children+0x390>
mov    %eax,%ebx
jmp    804dd0f <calloc@plt+0x497f>
push   %ebp
mov    %eax,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%ebx
mov    %edx,0x18(%esp)
movb   $0x0,0x14(%esp)
test   %ebx,%ebx
je     804dd76 <calloc@plt+0x49e6>
cmpb   $0x2e,(%ebx)
jne    804dd76 <calloc@plt+0x49e6>
cmpb   $0x2e,0x1(%ebx)
jne    804dd76 <calloc@plt+0x49e6>
cmpb   $0x0,0x2(%ebx)
sete   0x14(%esp)
mov    0x2c(%ebp),%edx
mov    %edx,%esi
and    $0x4,%esi
je     804dda8 <calloc@plt+0x4a18>
and    $0x200,%edx
mov    %edx,%esi
je     804dd98 <calloc@plt+0x4a08>
xor    %esi,%esi
test   %edi,%edi
js     804dd98 <calloc@plt+0x4a08>
mov    %edi,(%esp)
call   8049350 <close@plt>
add    $0x8c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %edi,%eax
shr    $0x1f,%eax
cmpb   $0x0,0x14(%esp)
jne    804de40 <calloc@plt+0x4ab0>
test   %al,%al
jne    804de56 <calloc@plt+0x4ac6>
mov    %edi,0x1c(%esp)
test   $0x2,%dl
jne    804ddf0 <calloc@plt+0x4a60>
test   %ebx,%ebx
je     804de98 <calloc@plt+0x4b08>
cmpb   $0x2e,(%ebx)
jne    804de98 <calloc@plt+0x4b08>
cmpb   $0x2e,0x1(%ebx)
xchg   %ax,%ax
jne    804de98 <calloc@plt+0x4b08>
cmpb   $0x0,0x2(%ebx)
jne    804de98 <calloc@plt+0x4b08>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049080 <__fxstat64@plt>
test   %eax,%eax
je     804deb8 <calloc@plt+0x4b28>
mov    $0xffffffff,%eax
test   %edi,%edi
mov    %eax,%esi
jns    804dd98 <calloc@plt+0x4a08>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebx
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
mov    %edi,(%ebx)
jmp    804dd98 <calloc@plt+0x4a08>
nop
test   %al,%al
je     804ddc0 <calloc@plt+0x4a30>
test   $0x2,%dh
jne    804dee0 <calloc@plt+0x4b50>
movb   $0x1,0x14(%esp)
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
call   804dcd0 <calloc@plt+0x4940>
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804df53 <calloc@plt+0x4bc3>
mov    0x2c(%ebp),%edx
jmp    804ddc4 <calloc@plt+0x4a34>
lea    0x0(%esi,%eiz,1),%esi
mov    0x9c(%ecx),%eax
mov    0xa0(%ecx),%edx
xor    0x7c(%esp),%edx
xor    0x78(%esp),%eax
or     %eax,%edx
jne    804dece <calloc@plt+0x4b3e>
mov    0x2c(%ebp),%edx
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0x2,%dh
jne    804df38 <calloc@plt+0x4ba8>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   80492a0 <fchdir@plt>
jmp    804de19 <calloc@plt+0x4a89>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
mov    0x44(%ecx),%eax
mov    0x48(%ecx),%edx
xor    0x24(%esp),%edx
xor    0x20(%esp),%eax
or     %eax,%edx
je     804de78 <calloc@plt+0x4ae8>
call   8049200 <__errno_location@plt>
movl   $0x2,(%eax)
jmp    804de14 <calloc@plt+0x4a84>
xchg   %ax,%ax
lea    0x38(%ebp),%ecx
mov    %ecx,(%esp)
mov    %edx,0x1c(%esp)
mov    %ecx,0x14(%esp)
call   8050af0 <fts_children+0x1360>
mov    0x1c(%esp),%edx
mov    0x14(%esp),%ecx
test   %al,%al
jne    804de51 <calloc@plt+0x4ac1>
mov    %ecx,(%esp)
call   8050b40 <fts_children+0x13b0>
mov    0x2c(%ebp),%edx
test   %eax,%eax
mov    %eax,0x1c(%esp)
js     804de51 <calloc@plt+0x4ac1>
test   $0x2,%dl
mov    0x1c(%esp),%edi
movb   $0x1,0x14(%esp)
je     804de98 <calloc@plt+0x4b08>
jmp    804ddf0 <calloc@plt+0x4a60>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x14(%esp),%ecx
mov    %ebp,%eax
mov    0x1c(%esp),%edx
xor    $0x1,%ecx
movzbl %cl,%ecx
call   804d950 <calloc@plt+0x45c0>
jmp    804dd98 <calloc@plt+0x4a08>
mov    $0xffffffff,%esi
jmp    804dd98 <calloc@plt+0x4a08>
lea    0x0(%esi),%esi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
test   $0x102,%eax
je     804dff0 <calloc@plt+0x4c60>
movl   $0x14,(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e028 <calloc@plt+0x4c98>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %ebx,0x10(%esi)
mov    %esi,0x4(%esp)
mov    %eax,(%esi)
mov    0x9c(%ebx),%eax
mov    %edx,0x4(%esi)
mov    0xa0(%ebx),%edx
mov    %eax,0x8(%esi)
mov    (%edi),%eax
mov    %edx,0xc(%esi)
mov    %eax,(%esp)
call   8050910 <fts_children+0x1180>
mov    %eax,%edi
mov    $0x1,%eax
cmp    %edi,%esi
je     804dfe2 <calloc@plt+0x4c52>
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8048f90 <free@plt>
test   %edi,%edi
je     804e028 <calloc@plt+0x4c98>
mov    0x10(%edi),%edx
mov    $0x2,%ecx
mov    0xc(%esp),%eax
mov    %cx,0x3c(%ebx)
mov    %edx,(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x44(%ecx),%eax
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %eax,(%esp)
call   804fa30 <fts_children+0x2a0>
test   %al,%al
je     804e018 <calloc@plt+0x4c88>
mov    $0x2,%edx
mov    %ebx,(%ebx)
mov    %dx,0x3c(%ebx)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x10,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
jmp    804e040 <calloc@plt+0x4cb0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %esi
push   %ebx
sub    $0x34,%esp
test   $0x102,%eax
jne    804e088 <calloc@plt+0x4cf8>
mov    0x4(%ecx),%esi
test   %esi,%esi
je     804e07d <calloc@plt+0x4ced>
mov    0x30(%esi),%eax
test   %eax,%eax
js     804e07d <calloc@plt+0x4ced>
mov    (%edx),%ebx
mov    0x14(%ebx),%eax
or     0x10(%ebx),%eax
je     804e102 <calloc@plt+0x4d72>
mov    (%ebx),%eax
mov    0x4(%ebx),%edx
xor    0xa0(%ecx),%edx
xor    0x9c(%ecx),%eax
or     %eax,%edx
je     804e0d0 <calloc@plt+0x4d40>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%ecx),%ebx
lea    0x1c(%esp),%eax
mov    0x48(%ecx),%esi
mov    %ebx,0x1c(%esp)
mov    0xa0(%ecx),%ebx
mov    0x9c(%ecx),%ecx
mov    %eax,0x4(%esp)
mov    (%edx),%eax
mov    %esi,0x20(%esp)
mov    %ebx,0x28(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,(%esp)
call   8050950 <fts_children+0x11c0>
test   %eax,%eax
je     804e102 <calloc@plt+0x4d72>
mov    %eax,(%esp)
call   8048f90 <free@plt>
add    $0x34,%esp
pop    %ebx
pop    %esi
ret
xchg   %ax,%ax
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
xor    0x48(%ecx),%edx
xor    0x44(%ecx),%eax
or     %eax,%edx
jne    804e07d <calloc@plt+0x4ced>
mov    0x44(%esi),%eax
mov    0x48(%esi),%edx
mov    %eax,0x8(%ebx)
mov    0x9c(%esi),%eax
mov    %edx,0xc(%ebx)
mov    0xa0(%esi),%edx
mov    %eax,(%ebx)
mov    %edx,0x4(%ebx)
jmp    804e07d <calloc@plt+0x4ced>
call   8049320 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    (%eax),%eax
mov    %edx,0x38(%esp)
mov    %eax,0x14(%esp)
mov    0xc(%eax),%eax
test   %eax,%eax
setne  0x3e(%esp)
jne    804e690 <calloc@plt+0x5300>
mov    0x2c(%ebp),%eax
mov    $0x10900,%ecx
test   $0x10,%al
jne    804e5c8 <calloc@plt+0x5238>
mov    0x2c(%ebp),%edx
shl    $0x7,%eax
mov    $0xffffff9c,%ebx
mov    0x14(%esp),%edi
and    $0x40000,%eax
and    $0x204,%edx
cmp    $0x200,%edx
mov    0x18(%edi),%esi
je     804e858 <calloc@plt+0x54c8>
or     %ecx,%eax
mov    %ebx,(%esp)
mov    %eax,0x8(%esp)
mov    %esi,0x4(%esp)
call   8050f40 <fts_children+0x17b0>
test   %eax,%eax
mov    %eax,%ebx
js     804e8f1 <calloc@plt+0x5561>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f8f0 <fts_children+0x160>
mov    %ebx,(%esp)
call   8049290 <fdopendir@plt>
test   %eax,%eax
je     804e8de <calloc@plt+0x554e>
mov    0x14(%esp),%edi
cmpw   $0xb,0x3c(%edi)
mov    %eax,0xc(%edi)
je     804e914 <calloc@plt+0x5584>
mov    0x2c(%ebp),%eax
test   $0x1,%ah
jne    804e708 <calloc@plt+0x5378>
cmpl   $0x1,0x28(%ebp)
sbb    %edi,%edi
xor    %ecx,%ecx
mov    %edi,0x24(%esp)
andl   $0x186a1,0x24(%esp)
subl   $0x1,0x24(%esp)
cmpl   $0x2,0x38(%esp)
je     804e1fd <calloc@plt+0x4e6d>
mov    0x2c(%ebp),%edx
mov    $0xffffffff,%ecx
and    $0x18,%edx
cmp    $0x18,%edx
je     804e6d8 <calloc@plt+0x5348>
cmpb   $0x0,0x3e(%esp)
movb   $0x1,0x3f(%esp)
jne    804e238 <calloc@plt+0x4ea8>
test   %ecx,%ecx
setne  %cl
cmpl   $0x3,0x38(%esp)
mov    %ecx,%esi
sete   %cl
mov    %ecx,%edi
mov    %esi,%ecx
test   %cl,%cl
jne    804e658 <calloc@plt+0x52c8>
mov    %edi,%ecx
test   %cl,%cl
movb   $0x0,0x3f(%esp)
jne    804e658 <calloc@plt+0x52c8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
movl   $0x0,0x2c(%esp)
mov    0x28(%edi),%edx
mov    0x1c(%edi),%ebx
lea    -0x1(%edx),%ecx
cmpb   $0x2f,-0x1(%ebx,%edx,1)
cmove  %ecx,%edx
test   $0x4,%al
jne    804e5b0 <calloc@plt+0x5220>
mov    0x20(%ebp),%edi
lea    0x1(%edx),%eax
mov    %eax,0x1c(%esp)
movb   $0x0,0x3d(%esp)
movl   $0x0,0x10(%esp)
mov    %edi,0x18(%esp)
sub    %eax,0x18(%esp)
mov    0x14(%esp),%eax
movl   $0x0,0xc(%esp)
movl   $0x0,0x20(%esp)
mov    0x30(%eax),%eax
add    $0x1,%eax
mov    %eax,0x28(%esp)
lea    0x2c(%ebp),%eax
mov    %eax,0x34(%esp)
lea    0x2(%edx),%eax
mov    %eax,0x30(%esp)
jmp    804e37a <calloc@plt+0x4fea>
lea    0x0(%esi),%esi
add    0x1c(%esp),%edx
jb     804e43e <calloc@plt+0x50ae>
mov    0x28(%esp),%eax
testb  $0x4,0x2c(%ebp)
mov    %eax,0x30(%ebx)
mov    0x0(%ebp),%eax
mov    %edx,0x28(%ebx)
mov    0x4(%esi),%edx
mov    %eax,0x4(%ebx)
mov    (%esi),%eax
mov    %edx,0xa0(%ebx)
mov    %eax,0x9c(%ebx)
jne    804e490 <calloc@plt+0x5100>
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804e2ff <calloc@plt+0x4f6f>
testb  $0x4,0x2d(%ebp)
je     804e4c0 <calloc@plt+0x5130>
mov    0x2c(%ebp),%eax
xor    %ecx,%ecx
and    $0x18,%eax
cmp    $0x18,%eax
je     804e5a0 <calloc@plt+0x5210>
mov    $0xb,%edi
xor    %eax,%eax
mov    %di,0x3c(%ebx)
movzbl 0x12(%esi),%edx
sub    $0x1,%edx
cmp    $0xb,%edx
ja     804e32e <calloc@plt+0x4f9e>
mov    0x80529e0(,%edx,4),%eax
xor    %edx,%edx
test   %ecx,%ecx
mov    %eax,0x54(%ebx)
mov    $0x1,%eax
jne    804e343 <calloc@plt+0x4fb3>
mov    $0x2,%eax
xor    %edx,%edx
mov    0x20(%esp),%esi
mov    %eax,0x70(%ebx)
mov    %edx,0x74(%ebx)
movl   $0x0,0x8(%ebx)
test   %esi,%esi
je     804e4ec <calloc@plt+0x515c>
mov    0x10(%esp),%eax
addl   $0x1,0xc(%esp)
mov    %ebx,0x8(%eax)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
jbe    804e508 <calloc@plt+0x5178>
mov    %ebx,0x10(%esp)
mov    0x14(%esp),%eax
mov    0xc(%eax),%eax
test   %eax,%eax
je     804e508 <calloc@plt+0x5178>
mov    %eax,(%esp)
call   80492c0 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     804e8b0 <calloc@plt+0x5520>
testb  $0x20,0x2c(%ebp)
jne    804e3ab <calloc@plt+0x501b>
cmpb   $0x2e,0x13(%eax)
je     804e580 <calloc@plt+0x51f0>
lea    0x13(%esi),%edi
mov    %edi,(%esp)
call   80491a0 <strlen@plt>
mov    %edi,%edx
mov    %eax,%ecx
mov    %ebp,%eax
call   804d850 <calloc@plt+0x44c0>
test   %eax,%eax
mov    %eax,%ebx
je     804e860 <calloc@plt+0x54d0>
mov    %edi,(%esp)
call   80491a0 <strlen@plt>
cmp    %eax,0x18(%esp)
mov    %eax,%edx
ja     804e2b0 <calloc@plt+0x4f20>
mov    0x14(%ebp),%ecx
lea    0x20(%ebp),%edx
mov    %ecx,0x18(%esp)
mov    0x30(%esp),%ecx
add    %eax,%ecx
lea    0x14(%ebp),%eax
call   804dbe0 <calloc@plt+0x4850>
test   %al,%al
je     804e860 <calloc@plt+0x54d0>
mov    0x14(%ebp),%eax
cmp    0x18(%esp),%eax
je     804e41b <calloc@plt+0x508b>
testb  $0x4,0x2c(%ebp)
movb   $0x1,0x3d(%esp)
je     804e41b <calloc@plt+0x508b>
add    0x1c(%esp),%eax
mov    %eax,0x2c(%esp)
mov    0x20(%ebp),%eax
mov    %edi,(%esp)
mov    %eax,0x18(%esp)
mov    0x1c(%esp),%eax
sub    %eax,0x18(%esp)
call   80491a0 <strlen@plt>
mov    %eax,%edx
add    0x1c(%esp),%edx
jae    804e2ba <calloc@plt+0x4f2a>
mov    %ebx,(%esp)
call   8048f90 <free@plt>
mov    0x20(%esp),%eax
call   804d8d0 <calloc@plt+0x4540>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049360 <closedir@plt>
mov    $0x7,%edx
movl   $0x0,0xc(%edi)
mov    %dx,0x3c(%edi)
orl    $0x4000,0x2c(%ebp)
call   8049200 <__errno_location@plt>
movl   $0x24,(%eax)
add    $0xac,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebx),%eax
mov    %eax,0x18(%ebx)
mov    0x34(%ebx),%eax
add    $0x1,%eax
mov    %eax,0x8(%esp)
lea    0xa4(%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
mov    %eax,(%esp)
call   8048f80 <memmove@plt>
jmp    804e2ee <calloc@plt+0x4f5e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x34(%esp),%edx
movl   $0x0,(%esp)
call   804da10 <calloc@plt+0x4680>
mov    0x20(%esp),%esi
movl   $0x0,0x8(%ebx)
test   %esi,%esi
mov    %ax,0x3c(%ebx)
jne    804e35c <calloc@plt+0x4fcc>
addl   $0x1,0xc(%esp)
mov    0xc(%esp),%eax
cmp    %eax,0x24(%esp)
mov    %ebx,0x20(%esp)
ja     804e376 <calloc@plt+0x4fe6>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x3d(%esp)
jne    804e758 <calloc@plt+0x53c8>
testb  $0x4,0x2c(%ebp)
je     804e536 <calloc@plt+0x51a6>
mov    0x1c(%esp),%eax
cmp    %eax,0x20(%ebp)
je     804e52a <calloc@plt+0x519a>
mov    0xc(%esp),%eax
test   %eax,%eax
jne    804e52f <calloc@plt+0x519f>
subl   $0x1,0x2c(%esp)
mov    0x2c(%esp),%eax
movb   $0x0,(%eax)
cmpb   $0x0,0x3f(%esp)
jne    804e5f0 <calloc@plt+0x5260>
mov    0xc(%esp),%ebx
test   %ebx,%ebx
je     804e95c <calloc@plt+0x55cc>
cmpl   $0x2710,0xc(%esp)
jbe    804e6b0 <calloc@plt+0x5320>
mov    0x28(%ebp),%edx
test   %edx,%edx
je     804e977 <calloc@plt+0x55e7>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
call   804d770 <calloc@plt+0x43e0>
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmpb   $0x0,0x14(%eax)
je     804e591 <calloc@plt+0x5201>
cmpw   $0x2e,0x14(%eax)
jne    804e3ab <calloc@plt+0x501b>
mov    0x10(%esp),%ebx
jmp    804e376 <calloc@plt+0x4fe6>
lea    0x0(%esi),%esi
xor    %ecx,%ecx
testb  $0xfb,0x12(%esi)
setne  %cl
jmp    804e310 <calloc@plt+0x4f80>
xchg   %ax,%ax
mov    0x14(%ebp),%eax
add    %edx,%eax
lea    0x1(%eax),%edi
mov    %edi,0x2c(%esp)
movb   $0x2f,(%eax)
jmp    804e25d <calloc@plt+0x4ecd>
lea    0x0(%esi,%eiz,1),%esi
test   $0x1,%al
mov    $0x30900,%ecx
je     804e146 <calloc@plt+0x4db6>
mov    0x14(%esp),%edi
cmpl   $0x1,0x30(%edi)
sbb    %ecx,%ecx
and    $0xfffe0000,%ecx
add    $0x30900,%ecx
jmp    804e146 <calloc@plt+0x4db6>
cmpb   $0x0,0x3e(%esp)
jne    804e541 <calloc@plt+0x51b1>
mov    0xc(%esp),%eax
test   %eax,%eax
je     804e60e <calloc@plt+0x527e>
cmpl   $0x1,0x38(%esp)
jne    804e54d <calloc@plt+0x51bd>
mov    0x14(%esp),%eax
mov    0x30(%eax),%edi
test   %edi,%edi
jne    804e938 <calloc@plt+0x55a8>
mov    %ebp,%eax
call   804d9b0 <calloc@plt+0x4620>
test   %eax,%eax
setne  %al
test   %al,%al
je     804e541 <calloc@plt+0x51b1>
mov    0x14(%esp),%eax
mov    $0x7,%esi
mov    %si,0x3c(%eax)
mov    0x20(%esp),%eax
orl    $0x4000,0x2c(%ebp)
call   804d8d0 <calloc@plt+0x4540>
xor    %eax,%eax
jmp    804e6c6 <calloc@plt+0x5336>
lea    0x0(%esi),%esi
test   $0x2,%ah
jne    804e7c7 <calloc@plt+0x5437>
mov    0x14(%esp),%edx
mov    %ebx,%ecx
mov    %ebp,%eax
movl   $0x0,(%esp)
call   804dd40 <calloc@plt+0x49b0>
test   %eax,%eax
jne    804e7f0 <calloc@plt+0x5460>
mov    0x2c(%ebp),%eax
movb   $0x1,0x3f(%esp)
jmp    804e238 <calloc@plt+0x4ea8>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048f70 <dirfd@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804e9d8 <calloc@plt+0x5648>
mov    0x2c(%ebp),%eax
jmp    804e1c9 <calloc@plt+0x4e39>
lea    0x0(%esi),%esi
mov    0x28(%ebp),%eax
test   %eax,%eax
je     804e6c2 <calloc@plt+0x5332>
cmpl   $0x1,0xc(%esp)
ja     804e566 <calloc@plt+0x51d6>
mov    0x20(%esp),%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%esi
mov    %eax,%edx
and    $0x20,%edx
cmp    $0x1,%edx
sbb    %edx,%edx
mov    0x58(%esi),%ecx
and    $0x2,%edx
movb   $0x1,0x3f(%esp)
sub    %edx,%ecx
cmpb   $0x0,0x3e(%esp)
jne    804e238 <calloc@plt+0x4ea8>
jmp    804e209 <calloc@plt+0x4e79>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x14(%esp),%edi
lea    0x34(%ebp),%esi
mov    %esi,%edx
mov    %edi,%ecx
call   804e040 <calloc@plt+0x4cb0>
mov    0x1c(%ebp),%eax
lea    0x2c(%ebp),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804da10 <calloc@plt+0x4680>
mov    0x2c(%ebp),%eax
mov    %edi,%ecx
mov    %esi,%edx
call   804df60 <calloc@plt+0x4bd0>
test   %al,%al
jne    804e6a2 <calloc@plt+0x5312>
call   8049200 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804e6c6 <calloc@plt+0x5336>
lea    0x0(%esi),%esi
mov    0x4(%ebp),%eax
mov    0x14(%ebp),%edx
test   %eax,%eax
je     804e787 <calloc@plt+0x53f7>
lea    0x0(%esi),%esi
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804e77d <calloc@plt+0x53ed>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    %edx,0x1c(%eax)
mov    0x8(%eax),%eax
test   %eax,%eax
jne    804e768 <calloc@plt+0x53d8>
mov    0x20(%esp),%eax
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%eax),%ecx
test   %ecx,%ecx
js     804e513 <calloc@plt+0x5183>
mov    0x18(%eax),%ecx
lea    0xa4(%eax),%ebx
cmp    %ebx,%ecx
je     804e7b0 <calloc@plt+0x5420>
sub    0x1c(%eax),%ecx
add    %edx,%ecx
mov    %ecx,0x18(%eax)
mov    0x8(%eax),%ecx
mov    %edx,0x1c(%eax)
test   %ecx,%ecx
je     804e7c0 <calloc@plt+0x5430>
mov    %ecx,%eax
jmp    804e790 <calloc@plt+0x5400>
xchg   %ax,%ax
mov    0x4(%eax),%ecx
mov    %ecx,%eax
jmp    804e790 <calloc@plt+0x5400>
mov    %ebx,(%esp)
call   8050f80 <fts_children+0x17f0>
test   %eax,%eax
mov    %eax,%ebx
js     804e7f0 <calloc@plt+0x5460>
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   804f8f0 <fts_children+0x160>
jmp    804e661 <calloc@plt+0x52d1>
lea    0x0(%esi),%esi
mov    %esi,%eax
test   %al,%al
je     804e7fc <calloc@plt+0x546c>
mov    %edi,%eax
test   %al,%al
jne    804e843 <calloc@plt+0x54b3>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
orw    $0x1,0x3e(%edi)
mov    %eax,(%esp)
call   8049360 <closedir@plt>
mov    0x2c(%ebp),%eax
movl   $0x0,0xc(%edi)
test   $0x2,%ah
je     804e82e <calloc@plt+0x549e>
test   %ebx,%ebx
js     804e82e <calloc@plt+0x549e>
mov    %ebx,(%esp)
call   8049350 <close@plt>
mov    0x2c(%ebp),%eax
mov    0x14(%esp),%edi
movb   $0x0,0x3f(%esp)
movl   $0x0,0xc(%edi)
jmp    804e238 <calloc@plt+0x4ea8>
call   8049200 <__errno_location@plt>
mov    0x14(%esp),%edi
mov    (%eax),%eax
mov    %eax,0x20(%edi)
jmp    804e7fc <calloc@plt+0x546c>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebp),%ebx
jmp    804e16f <calloc@plt+0x4ddf>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048f90 <free@plt>
mov    0x20(%esp),%eax
call   804d8d0 <calloc@plt+0x4540>
mov    0x14(%esp),%ebx
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8049360 <closedir@plt>
mov    $0x7,%ecx
xor    %eax,%eax
movl   $0x0,0xc(%ebx)
mov    %cx,0x3c(%ebx)
orl    $0x4000,0x2c(%ebp)
mov    %edi,(%esi)
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
test   %eax,%eax
je     804e508 <calloc@plt+0x5178>
mov    %eax,(%esp)
call   8049360 <closedir@plt>
cmpb   $0x0,0x3d(%esp)
movl   $0x0,0xc(%edi)
je     804e513 <calloc@plt+0x5183>
jmp    804e758 <calloc@plt+0x53c8>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049350 <close@plt>
mov    %edi,(%esi)
mov    0x14(%esp),%eax
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%eax)
je     804e9f9 <calloc@plt+0x5669>
xor    %eax,%eax
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x14(%esp),%esi
lea    0x2c(%ebp),%edx
mov    0x1c(%ebp),%eax
movl   $0x0,(%esp)
mov    %esi,%ecx
call   804da10 <calloc@plt+0x4680>
mov    %ax,0x3c(%esi)
mov    0x2c(%ebp),%eax
jmp    804e1c9 <calloc@plt+0x4e39>
mov    0x14(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x4(%eax),%edx
mov    %ebp,%eax
movl   $0x80529d2,(%esp)
call   804dd40 <calloc@plt+0x49b0>
test   %eax,%eax
setne  %al
jmp    804e629 <calloc@plt+0x5299>
cmpl   $0x3,0x38(%esp)
je     804ea17 <calloc@plt+0x5687>
mov    0x20(%esp),%eax
call   804d8d0 <calloc@plt+0x4540>
xor    %eax,%eax
jmp    804e6c6 <calloc@plt+0x5336>
testb  $0x2,0x2d(%ebp)
je     804e6c2 <calloc@plt+0x5332>
lea    0x4c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%ebp),%eax
mov    %eax,(%esp)
call   8049180 <fstatfs64@plt>
test   %eax,%eax
jne    804e9b2 <calloc@plt+0x5622>
mov    0x4c(%esp),%eax
cmp    $0x6969,%eax
je     804e6b0 <calloc@plt+0x5320>
cmp    $0x1021994,%eax
je     804e6b0 <calloc@plt+0x5320>
mov    0xc(%esp),%ecx
mov    %ebp,%eax
mov    0x20(%esp),%edx
movl   $0x804d700,0x28(%ebp)
call   804d770 <calloc@plt+0x43e0>
movl   $0x0,0x28(%ebp)
mov    %eax,0x20(%esp)
jmp    804e6c2 <calloc@plt+0x5332>
mov    0x14(%esp),%edi
mov    0xc(%edi),%eax
mov    %eax,(%esp)
call   8049360 <closedir@plt>
cmpl   $0x3,0x38(%esp)
movl   $0x0,0xc(%edi)
jne    804e907 <calloc@plt+0x5577>
mov    0x14(%esp),%edi
mov    $0x4,%ebx
mov    %bx,0x3c(%edi)
call   8049200 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%edi)
xor    %eax,%eax
jmp    804e909 <calloc@plt+0x5579>
mov    0x14(%esp),%eax
mov    $0x6,%ecx
mov    %cx,0x3c(%eax)
jmp    804e967 <calloc@plt+0x55d7>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%ebx
mov    %ebx,%esi
and    $0xffffe000,%esi
jne    804ed18 <fts_open+0x2e8>
mov    %ebx,%eax
and    $0x204,%eax
cmp    $0x204,%eax
je     804ed18 <fts_open+0x2e8>
test   $0x12,%bl
je     804ed18 <fts_open+0x2e8>
movl   $0x58,(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804ed9d <fts_open+0x36d>
mov    %eax,%edi
mov    $0x16,%ecx
mov    %esi,%eax
test   $0x2,%bl
rep stos %eax,%es:(%edi)
mov    0x48(%esp),%eax
mov    %eax,0x28(%ebp)
jne    804ecd8 <fts_open+0x2a8>
mov    %ebx,0x2c(%ebp)
mov    0x40(%esp),%eax
movl   $0xffffff9c,0x1c(%ebp)
mov    (%eax),%eax
test   %eax,%eax
je     804ed93 <fts_open+0x363>
mov    0x40(%esp),%edi
xor    %esi,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   80491a0 <strlen@plt>
cmp    %eax,%esi
cmovb  %eax,%esi
add    $0x4,%edi
mov    (%edi),%eax
test   %eax,%eax
jne    804eab8 <fts_open+0x88>
lea    0x1(%esi),%ecx
mov    $0x1000,%ax
cmp    $0x1000,%ecx
cmovb  %eax,%ecx
lea    0x20(%ebp),%edx
lea    0x14(%ebp),%eax
call   804dbe0 <calloc@plt+0x4850>
test   %al,%al
mov    %al,0x17(%esp)
je     804ed06 <fts_open+0x2d6>
mov    0x40(%esp),%eax
mov    (%eax),%esi
test   %esi,%esi
je     804ed78 <fts_open+0x348>
xor    %ecx,%ecx
mov    $0x805271d,%edx
mov    %ebp,%eax
call   804d850 <calloc@plt+0x44c0>
test   %eax,%eax
mov    %eax,0xc(%esp)
je     804ecfb <fts_open+0x2cb>
movl   $0xffffffff,0x30(%eax)
mov    0x40(%esp),%eax
mov    (%eax),%edx
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804eb3f <fts_open+0x10f>
mov    0x2c(%ebp),%eax
shr    $0xa,%eax
and    $0x1,%eax
mov    %al,0x17(%esp)
test   %edx,%edx
je     804eda4 <fts_open+0x374>
and    $0x1000,%ebx
xor    %esi,%esi
lea    0x2c(%ebp),%eax
xor    %edi,%edi
mov    %ebx,0x10(%esp)
mov    %edx,%ebx
movl   $0x0,0x1c(%esp)
mov    %eax,0x18(%esp)
jmp    804ebad <fts_open+0x17d>
cmpb   $0x0,0x17(%esp)
je     804ec04 <fts_open+0x1d4>
mov    $0xb,%eax
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
movl   $0x2,0x70(%ebx)
movl   $0x0,0x74(%ebx)
test   %eax,%eax
je     804ec29 <fts_open+0x1f9>
mov    %edi,0x8(%ebx)
mov    %ebx,%edi
mov    0x40(%esp),%eax
add    $0x1,%esi
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
je     804ec58 <fts_open+0x228>
mov    %ebx,(%esp)
call   80491a0 <strlen@plt>
mov    0x10(%esp),%edx
test   %edx,%edx
jne    804ebd0 <fts_open+0x1a0>
cmp    $0x2,%eax
jbe    804ebd0 <fts_open+0x1a0>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
je     804ecc0 <fts_open+0x290>
lea    0x0(%esi),%esi
mov    %eax,%ecx
mov    %ebx,%edx
mov    %ebp,%eax
call   804d850 <calloc@plt+0x44c0>
test   %eax,%eax
mov    %eax,%ebx
je     804ece8 <fts_open+0x2b8>
movl   $0x0,0x30(%eax)
mov    0xc(%esp),%eax
test   %edi,%edi
mov    %eax,0x4(%ebx)
lea    0xa4(%ebx),%eax
mov    %eax,0x18(%ebx)
jne    804eb68 <fts_open+0x138>
mov    0x1c(%ebp),%eax
mov    %ebx,%ecx
mov    0x18(%esp),%edx
movl   $0x0,(%esp)
call   804da10 <calloc@plt+0x4680>
mov    %ax,0x3c(%ebx)
mov    0x48(%esp),%eax
test   %eax,%eax
jne    804eb96 <fts_open+0x166>
test   %edi,%edi
movl   $0x0,0x8(%ebx)
je     804ed88 <fts_open+0x358>
mov    0x1c(%esp),%eax
add    $0x1,%esi
mov    %ebx,0x1c(%esp)
mov    %ebx,0x8(%eax)
mov    0x40(%esp),%eax
mov    (%eax,%esi,4),%ebx
test   %ebx,%ebx
jne    804ebad <fts_open+0x17d>
lea    0x0(%esi),%esi
cmp    $0x1,%esi
ja     804ed58 <fts_open+0x328>
xor    %ecx,%ecx
mov    $0x805271d,%edx
mov    %ebp,%eax
call   804d850 <calloc@plt+0x44c0>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     804ece8 <fts_open+0x2b8>
mov    $0x9,%edx
mov    %dx,0x3c(%eax)
lea    0x34(%ebp),%edx
mov    %edi,0x8(%eax)
mov    0x2c(%ebp),%eax
call   804dc60 <calloc@plt+0x48d0>
test   %al,%al
je     804ece8 <fts_open+0x2b8>
mov    0x2c(%ebp),%edx
test   $0x204,%edx
je     804ed30 <fts_open+0x300>
lea    0x38(%ebp),%eax
mov    %eax,(%esp)
movl   $0xffffffff,0x4(%esp)
call   8050ac0 <fts_children+0x1330>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmpb   $0x2f,-0x2(%ebx,%eax,1)
jne    804ebd0 <fts_open+0x1a0>
sub    $0x1,%eax
cmp    $0x1,%eax
jne    804ecc0 <fts_open+0x290>
jmp    804ebd0 <fts_open+0x1a0>
mov    %ebx,%eax
and    $0xfd,%ah
or     $0x4,%eax
mov    %eax,0x2c(%ebp)
jmp    804ea98 <fts_open+0x68>
mov    %edi,%eax
call   804d8d0 <calloc@plt+0x4540>
mov    0xc(%esp),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x14(%ebp),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    %ebp,(%esp)
call   8048f90 <free@plt>
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
call   8049200 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x1c(%ebp),%eax
mov    $0x80529d3,%ecx
call   804dcd0 <calloc@plt+0x4940>
test   %eax,%eax
mov    %eax,0x18(%ebp)
jns    804eca0 <fts_open+0x270>
orl    $0x4,0x2c(%ebp)
jmp    804eca0 <fts_open+0x270>
lea    0x0(%esi,%eiz,1),%esi
mov    0x48(%esp),%ecx
test   %ecx,%ecx
je     804ec61 <fts_open+0x231>
mov    %edi,%edx
mov    %esi,%ecx
mov    %ebp,%eax
call   804d770 <calloc@plt+0x43e0>
mov    %eax,%edi
jmp    804ec61 <fts_open+0x231>
xchg   %ax,%ax
xor    %edx,%edx
movl   $0x0,0xc(%esp)
jmp    804eb2a <fts_open+0xfa>
nop
mov    %ebx,%edi
mov    %ebx,0x1c(%esp)
jmp    804eb9b <fts_open+0x16b>
mov    $0x1000,%ecx
jmp    804eade <fts_open+0xae>
xor    %eax,%eax
jmp    804ed10 <fts_open+0x2e0>
xor    %edi,%edi
jmp    804ec61 <fts_open+0x231>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%eax
test   %eax,%eax
je     804ee08 <fts_close+0x58>
mov    0x30(%eax),%edx
test   %edx,%edx
jns    804ede1 <fts_close+0x31>
jmp    804eeec <fts_close+0x13c>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
js     804ee00 <fts_close+0x50>
mov    %ebx,%eax
mov    0x8(%eax),%ebx
test   %ebx,%ebx
jne    804edd0 <fts_close+0x20>
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x30(%ebx),%eax
test   %eax,%eax
jns    804eddf <fts_close+0x2f>
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8048f90 <free@plt>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804ee14 <fts_close+0x64>
call   804d8d0 <calloc@plt+0x4540>
mov    0x8(%esi),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x2c(%esi),%eax
test   $0x2,%ah
je     804eea0 <fts_close+0xf0>
mov    0x1c(%esi),%eax
test   %eax,%eax
js     804ee50 <fts_close+0xa0>
mov    %eax,(%esp)
call   8049350 <close@plt>
test   %eax,%eax
jne    804eee0 <fts_close+0x130>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
lea    0x38(%esi),%eax
call   804d910 <calloc@plt+0x4580>
mov    0x30(%esi),%eax
test   %eax,%eax
je     804ee69 <fts_close+0xb9>
mov    %eax,(%esp)
call   80504d0 <fts_children+0xd40>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804eed0 <fts_close+0x120>
test   %eax,%eax
je     804ee81 <fts_close+0xd1>
mov    %eax,(%esp)
call   80504d0 <fts_children+0xd40>
mov    %esi,(%esp)
call   8048f90 <free@plt>
xor    %eax,%eax
test   %ebx,%ebx
jne    804ef25 <fts_close+0x175>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   $0x4,%al
jne    804ee50 <fts_close+0xa0>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   80492a0 <fchdir@plt>
test   %eax,%eax
jne    804eef5 <fts_close+0x145>
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
test   %eax,%eax
je     804ee50 <fts_close+0xa0>
call   8049200 <__errno_location@plt>
mov    %eax,%edi
mov    (%edi),%ebx
jmp    804ee52 <fts_close+0xa2>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048f90 <free@plt>
jmp    804ee81 <fts_close+0xd1>
lea    0x0(%esi),%esi
call   8049200 <__errno_location@plt>
mov    (%eax),%ebx
jmp    804ee52 <fts_close+0xa2>
mov    %eax,%ebx
xchg   %ax,%ax
jmp    804ee00 <fts_close+0x50>
call   8049200 <__errno_location@plt>
mov    (%eax),%ebx
mov    %eax,%edi
mov    0x18(%esi),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
test   %eax,%eax
je     804ee52 <fts_close+0xa2>
test   %ebx,%ebx
jne    804ee52 <fts_close+0xa2>
mov    (%edi),%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
jmp    804ee52 <fts_close+0xa2>
call   8049200 <__errno_location@plt>
mov    %ebx,(%eax)
mov    $0xffffffff,%eax
jmp    804ee93 <fts_close+0xe3>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x8c,%esp
mov    0xa0(%esp),%esi
mov    (%esi),%edi
test   %edi,%edi
je     804f048 <fts_read+0x108>
mov    0x2c(%esi),%edx
test   $0x40,%dh
jne    804f048 <fts_read+0x108>
movzwl 0x40(%edi),%eax
mov    $0x3,%ecx
mov    %cx,0x40(%edi)
cmp    $0x1,%ax
je     804f2f0 <fts_read+0x3b0>
cmp    $0x2,%ax
je     804f058 <fts_read+0x118>
cmpw   $0x1,0x3c(%edi)
jne    804efbd <fts_read+0x7d>
nop
jmp    804f0d5 <fts_read+0x195>
lea    0x0(%esi),%esi
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8048f90 <free@plt>
mov    0x30(%ebx),%edx
test   %edx,%edx
je     804f110 <fts_read+0x1d0>
movzwl 0x40(%ebx),%eax
cmp    $0x4,%ax
jne    804f218 <fts_read+0x2d8>
mov    %ebx,%edi
mov    0x8(%edi),%ebx
test   %ebx,%ebx
jne    804ef98 <fts_read+0x58>
mov    0x4(%edi),%ebx
mov    0xc(%ebx),%ecx
test   %ecx,%ecx
jne    804f4c0 <fts_read+0x580>
mov    %ebx,(%esi)
mov    %edi,(%esp)
call   8048f90 <free@plt>
cmpl   $0xffffffff,0x30(%ebx)
je     804f3bd <fts_read+0x47d>
cmpw   $0xb,0x3c(%ebx)
je     804f6ed <fts_read+0x7ad>
mov    0x14(%esi),%edx
mov    0x28(%ebx),%eax
movb   $0x0,(%edx,%eax,1)
mov    0x30(%ebx),%ebp
test   %ebp,%ebp
je     804f34d <fts_read+0x40d>
movzwl 0x3e(%ebx),%eax
test   $0x2,%al
je     804f30f <fts_read+0x3cf>
mov    0x2c(%esi),%eax
test   $0x4,%al
je     804f35d <fts_read+0x41d>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
mov    0x2c(%esi),%eax
mov    0x20(%ebx),%edi
test   %edi,%edi
je     804f2d0 <fts_read+0x390>
mov    $0x7,%edx
mov    %dx,0x3c(%ebx)
test   $0x40,%ah
je     804f0fe <fts_read+0x1be>
xor    %eax,%eax
add    $0x8c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movzwl 0x3c(%edi),%eax
lea    -0xc(%eax),%ecx
cmp    $0x1,%cx
jbe    804f382 <fts_read+0x442>
sub    $0x1,%ax
jne    804efbd <fts_read+0x7d>
nop
lea    0x0(%esi,%eiz,1),%esi
test   $0x40,%dl
je     804f268 <fts_read+0x328>
mov    0x44(%edi),%eax
mov    0x48(%edi),%ecx
xor    0x10(%esi),%ecx
xor    0xc(%esi),%eax
or     %eax,%ecx
je     804f268 <fts_read+0x328>
testb  $0x2,0x3e(%edi)
jne    804f4b0 <fts_read+0x570>
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f0b2 <fts_read+0x172>
call   804d8d0 <calloc@plt+0x4540>
movl   $0x0,0x4(%esi)
mov    $0x6,%eax
mov    %edi,%ecx
mov    %ax,0x3c(%edi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
call   804e040 <calloc@plt+0x4cb0>
add    $0x8c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0x4,%ax
jne    804f078 <fts_read+0x138>
jmp    804f095 <fts_read+0x155>
lea    0x0(%esi),%esi
mov    0x70(%ebx),%edx
mov    0x74(%ebx),%eax
mov    %edx,%ecx
xor    $0x2,%ecx
or     %eax,%ecx
je     804f43b <fts_read+0x4fb>
xor    $0x1,%edx
or     %eax,%edx
jne    804f6ed <fts_read+0x7ad>
add    $0x8c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
call   804d9b0 <calloc@plt+0x4620>
test   %eax,%eax
jne    804f41d <fts_read+0x4dd>
testl  $0x102,0x2c(%esi)
mov    0x34(%esi),%eax
je     804f3e0 <fts_read+0x4a0>
test   %eax,%eax
je     804f13b <fts_read+0x1fb>
mov    %eax,(%esp)
call   80504d0 <fts_children+0xd40>
mov    0x34(%ebx),%eax
lea    0xa4(%ebx),%edi
mov    %eax,0x28(%ebx)
add    $0x1,%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
mov    0x14(%esi),%eax
mov    %eax,(%esp)
call   8048f80 <memmove@plt>
movl   $0x2f,0x4(%esp)
mov    %edi,(%esp)
call   8049270 <strrchr@plt>
test   %eax,%eax
je     804f1a4 <fts_read+0x264>
cmp    %eax,%edi
je     804f429 <fts_read+0x4e9>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x18(%esp)
call   80491a0 <strlen@plt>
mov    0x18(%esp),%edx
mov    %edi,(%esp)
mov    %edx,0x4(%esp)
mov    %eax,%ebp
lea    0x1(%eax),%eax
mov    %eax,0x8(%esp)
call   8048f80 <memmove@plt>
mov    %ebp,0x34(%ebx)
mov    0x14(%esi),%eax
lea    0x34(%esi),%edx
mov    %eax,0x1c(%ebx)
mov    %eax,0x18(%ebx)
mov    0x2c(%esi),%eax
call   804dc60 <calloc@plt+0x48d0>
movzwl 0x3c(%ebx),%ecx
cmp    $0xb,%cx
mov    %ebx,(%esi)
je     804f0e0 <fts_read+0x1a0>
cmp    $0x1,%cx
mov    %ebx,%eax
jne    804f04a <fts_read+0x10a>
mov    0x30(%ebx),%eax
test   %eax,%eax
jne    804f1e7 <fts_read+0x2a7>
mov    0x44(%ebx),%eax
mov    0x48(%ebx),%edx
mov    %eax,0xc(%esi)
mov    %edx,0x10(%esi)
mov    0x2c(%esi),%eax
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804df60 <calloc@plt+0x4bd0>
mov    %eax,%edx
mov    %ebx,%eax
test   %dl,%dl
jne    804f04a <fts_read+0x10a>
call   8049200 <__errno_location@plt>
movl   $0xc,(%eax)
xor    %eax,%eax
jmp    804f04a <fts_read+0x10a>
lea    0x0(%esi),%esi
cmp    $0x2,%ax
je     804f4eb <fts_read+0x5ab>
mov    0x4(%ebx),%ecx
mov    0x28(%ecx),%edx
mov    0x1c(%ecx),%ecx
lea    -0x1(%edx),%eax
cmpb   $0x2f,-0x1(%ecx,%edx,1)
cmovne %edx,%eax
add    0x14(%esi),%eax
movb   $0x2f,(%eax)
mov    0x34(%ebx),%ecx
add    $0x1,%eax
mov    %eax,(%esp)
lea    0x1(%ecx),%edx
mov    %edx,0x8(%esp)
lea    0xa4(%ebx),%edx
mov    %edx,0x4(%esp)
call   8048f80 <memmove@plt>
movzwl 0x3c(%ebx),%ecx
jmp    804f1bc <fts_read+0x27c>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
test   %eax,%eax
je     804f3ff <fts_read+0x4bf>
test   $0x20,%dh
jne    804f3ed <fts_read+0x4ad>
mov    0x18(%edi),%eax
mov    $0xffffffff,%ecx
mov    %edi,%edx
mov    %eax,(%esp)
mov    %esi,%eax
call   804dd40 <calloc@plt+0x49b0>
test   %eax,%eax
je     804f37a <fts_read+0x43a>
call   8049200 <__errno_location@plt>
mov    0x4(%esi),%edx
mov    %edx,%ebx
mov    (%eax),%eax
orw    $0x1,0x3e(%edi)
test   %edx,%edx
mov    %eax,0x20(%edi)
je     804f2c2 <fts_read+0x382>
mov    0x4(%ebx),%eax
mov    0x18(%eax),%eax
mov    %eax,0x18(%ebx)
mov    0x8(%ebx),%ebx
test   %ebx,%ebx
jne    804f2b0 <fts_read+0x370>
mov    %edx,%ebx
movl   $0x0,0x4(%esi)
jmp    804f222 <fts_read+0x2e2>
xchg   %ax,%ax
mov    $0x6,%ecx
mov    %cx,0x3c(%ebx)
lea    0x34(%esi),%edx
mov    %ebx,%ecx
call   804e040 <calloc@plt+0x4cb0>
mov    0x2c(%esi),%eax
jmp    804f03f <fts_read+0xff>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %edi,%ecx
movl   $0x0,(%esp)
call   804da10 <calloc@plt+0x4680>
mov    %ax,0x3c(%edi)
mov    %edi,%eax
jmp    804f04a <fts_read+0x10a>
test   $0x1,%al
jne    804f028 <fts_read+0xe8>
mov    0x4(%ebx),%edx
mov    $0xffffffff,%ecx
mov    %esi,%eax
movl   $0x80529d2,(%esp)
call   804dd40 <calloc@plt+0x49b0>
test   %eax,%eax
je     804f028 <fts_read+0xe8>
call   8049200 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    0x2c(%esi),%eax
or     $0x40,%ah
mov    %eax,0x2c(%esi)
jmp    804f02b <fts_read+0xeb>
mov    %esi,%eax
call   804d9b0 <calloc@plt+0x4620>
test   %eax,%eax
jne    804f335 <fts_read+0x3f5>
jmp    804f028 <fts_read+0xe8>
test   $0x2,%ah
je     804f517 <fts_read+0x5d7>
mov    0x24(%ebx),%edx
mov    $0x1,%ecx
mov    %esi,%eax
call   804d950 <calloc@plt+0x45c0>
jmp    804f01d <fts_read+0xdd>
mov    0x4(%esi),%ebx
jmp    804f2c2 <fts_read+0x382>
mov    0x1c(%esi),%eax
mov    %edi,%ecx
mov    %edi,%ebx
lea    0x2c(%esi),%edx
movl   $0x1,(%esp)
call   804da10 <calloc@plt+0x4680>
cmp    $0x1,%ax
mov    %eax,%ecx
mov    %ax,0x3c(%edi)
jne    804f1bc <fts_read+0x27c>
mov    0x2c(%esi),%edx
test   $0x4,%dl
je     804f589 <fts_read+0x649>
mov    %edi,(%esi)
mov    %edi,%ebx
jmp    804f1c8 <fts_read+0x288>
mov    %ebx,(%esp)
call   8048f90 <free@plt>
call   8049200 <__errno_location@plt>
movl   $0x0,(%eax)
xor    %eax,%eax
movl   $0x0,(%esi)
jmp    804f04a <fts_read+0x10a>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
call   8048f90 <free@plt>
jmp    804f13b <fts_read+0x1fb>
and    $0xdf,%dh
mov    %edx,0x2c(%esi)
call   804d8d0 <calloc@plt+0x4540>
movl   $0x0,0x4(%esi)
mov    $0x3,%edx
mov    %esi,%eax
call   804e110 <calloc@plt+0x4d80>
test   %eax,%eax
mov    %eax,0x4(%esi)
je     804f606 <fts_read+0x6c6>
mov    %eax,%ebx
jmp    804f2c2 <fts_read+0x382>
orl    $0x4000,0x2c(%esi)
jmp    804f048 <fts_read+0x108>
cmpb   $0x0,0xa5(%ebx)
jne    804f179 <fts_read+0x239>
jmp    804f1a4 <fts_read+0x264>
mov    0x30(%ebx),%eax
mov    0x4(%ebx),%edi
test   %eax,%eax
jle    804f45b <fts_read+0x51b>
mov    0x38(%edi),%eax
test   %eax,%eax
jne    804f45b <fts_read+0x51b>
mov    0x2c(%esi),%eax
and    $0x18,%eax
cmp    $0x18,%eax
je     804f5af <fts_read+0x66f>
mov    0x1c(%esi),%eax
mov    %ebx,%ecx
lea    0x2c(%esi),%edx
movl   $0x0,(%esp)
call   804da10 <calloc@plt+0x4680>
mov    %eax,%ecx
mov    %ax,0x3c(%ebx)
mov    0x54(%ebx),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
jne    804f1c8 <fts_read+0x288>
mov    0x30(%ebx),%eax
test   %eax,%eax
je     804f1c8 <fts_read+0x288>
mov    0x38(%edi),%eax
test   %eax,%eax
je     804f1c8 <fts_read+0x288>
sub    $0x1,%eax
mov    %eax,0x38(%edi)
jmp    804f1c8 <fts_read+0x288>
lea    0x0(%esi,%eiz,1),%esi
mov    0x24(%edi),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
jmp    804f09f <fts_read+0x15f>
mov    0x28(%ebx),%eax
mov    0x14(%esi),%edx
mov    %ebx,(%esi)
movb   $0x0,(%edx,%eax,1)
mov    $0x3,%edx
mov    %esi,%eax
call   804e110 <calloc@plt+0x4d80>
test   %eax,%eax
mov    %eax,%ebx
je     804f550 <fts_read+0x610>
mov    %edi,(%esp)
call   8048f90 <free@plt>
jmp    804f222 <fts_read+0x2e2>
mov    0x1c(%esi),%eax
lea    0x2c(%esi),%edx
mov    %ebx,%ecx
movl   $0x1,(%esp)
call   804da10 <calloc@plt+0x4680>
cmp    $0x1,%ax
mov    %ax,0x3c(%ebx)
je     804f562 <fts_read+0x622>
mov    $0x3,%eax
mov    %ax,0x40(%ebx)
jmp    804f222 <fts_read+0x2e2>
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   80492a0 <fchdir@plt>
test   %eax,%eax
je     804f01d <fts_read+0xdd>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%ebp
mov    0x24(%ebx),%eax
mov    %eax,(%esp)
call   8049350 <close@plt>
mov    %edi,0x0(%ebp)
mov    %edi,0x20(%ebx)
orl    $0x4000,0x2c(%esi)
jmp    804f01d <fts_read+0xdd>
testb  $0x40,0x2d(%esi)
jne    804f048 <fts_read+0x108>
mov    0x4(%edi),%ebx
jmp    804efd2 <fts_read+0x92>
mov    0x2c(%esi),%edx
test   $0x4,%dl
jne    804f509 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x80529d3,%ecx
call   804dcd0 <calloc@plt+0x4940>
test   %eax,%eax
mov    %eax,0x24(%ebx)
js     804f63a <fts_read+0x6fa>
orw    $0x2,0x3e(%ebx)
jmp    804f509 <fts_read+0x5c9>
mov    0x1c(%esi),%eax
mov    $0x80529d3,%ecx
call   804dcd0 <calloc@plt+0x4940>
test   %eax,%eax
mov    %eax,0x24(%edi)
js     804f652 <fts_read+0x712>
orw    $0x2,0x3e(%edi)
movzwl 0x3c(%edi),%ecx
jmp    804f1bc <fts_read+0x27c>
mov    0x2c(%edi),%edx
testb  $0x2,0x2d(%edx)
mov    0x30(%edx),%ebp
je     804f45b <fts_read+0x51b>
test   %ebp,%ebp
je     804f6f2 <fts_read+0x7b2>
mov    0x44(%edi),%eax
mov    %edx,0x18(%esp)
mov    0x48(%edi),%edx
mov    %ebp,(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edx,0x24(%esp)
call   80500b0 <fts_children+0x920>
mov    0x18(%esp),%edx
test   %eax,%eax
je     804f66f <fts_read+0x72f>
movzbl 0x8(%eax),%edx
test   %dl,%dl
je     804f45b <fts_read+0x51b>
movzwl 0x3c(%ebx),%ecx
jmp    804f1c8 <fts_read+0x288>
mov    0x2c(%esi),%eax
test   $0x40,%ah
jne    804f048 <fts_read+0x108>
mov    0x20(%edi),%ebp
test   %ebp,%ebp
je     804f629 <fts_read+0x6e9>
cmpw   $0x4,0x3c(%edi)
je     804f629 <fts_read+0x6e9>
mov    $0x7,%ebx
mov    %bx,0x3c(%edi)
lea    0x34(%esi),%edx
mov    %edi,%ecx
call   804e040 <calloc@plt+0x4cb0>
mov    %edi,%eax
jmp    804f04a <fts_read+0x10a>
call   8049200 <__errno_location@plt>
mov    (%eax),%eax
mov    %eax,0x20(%ebx)
mov    $0x7,%eax
mov    %ax,0x3c(%ebx)
jmp    804f509 <fts_read+0x5c9>
call   8049200 <__errno_location@plt>
mov    $0x7,%ecx
mov    (%eax),%eax
mov    %eax,0x20(%edi)
mov    $0x7,%eax
mov    %ax,0x3c(%edi)
jmp    804f3b4 <fts_read+0x474>
movl   $0xc,(%esp)
mov    %edx,0x1c(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804f45b <fts_read+0x51b>
mov    0x1c(%esp),%edx
lea    0x2c(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x1c(%edx),%eax
mov    %eax,(%esp)
call   8049180 <fstatfs64@plt>
xor    %edx,%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
jne    804f6b7 <fts_read+0x777>
cmpl   $0x52654973,0x2c(%esp)
sete   %dl
mov    %dl,0x8(%ecx)
mov    0x44(%edi),%eax
mov    %edx,0x1c(%esp)
mov    0x48(%edi),%edx
mov    %ecx,0x18(%esp)
mov    %eax,(%ecx)
mov    %edx,0x4(%ecx)
mov    %ecx,0x4(%esp)
mov    %ebp,(%esp)
call   8050910 <fts_children+0x1180>
mov    0x18(%esp),%ecx
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804f738 <fts_read+0x7f8>
cmp    %eax,%ecx
je     804f5f5 <fts_read+0x6b5>
call   8049320 <abort@plt>
movl   $0x8048f90,0x10(%esp)
movl   $0x804d6e0,0xc(%esp)
movl   $0x804d6b0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %edx,0x18(%esp)
call   8050300 <fts_children+0xb70>
mov    0x18(%esp),%edx
test   %eax,%eax
mov    %eax,%ebp
mov    %eax,0x30(%edx)
jne    804f5c7 <fts_read+0x687>
jmp    804f45b <fts_read+0x51b>
mov    %ecx,(%esp)
call   8048f90 <free@plt>
jmp    804f45b <fts_read+0x51b>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0xc,%esp
mov    0x18(%esp),%eax
cmp    $0x4,%eax
ja     804f770 <fts_set+0x20>
mov    0x14(%esp),%edx
mov    %ax,0x40(%edx)
xor    %eax,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
call   8049200 <__errno_location@plt>
movl   $0x16,(%eax)
mov    $0x1,%eax
add    $0xc,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
testl  $0xffffdfff,0x34(%esp)
mov    0x30(%esp),%ebx
jne    804f888 <fts_children+0xf8>
call   8049200 <__errno_location@plt>
mov    (%ebx),%esi
movl   $0x0,(%eax)
mov    %eax,%edi
testb  $0x40,0x2d(%ebx)
jne    804f8a0 <fts_children+0x110>
movzwl 0x3c(%esi),%ecx
cmp    $0x9,%cx
je     804f878 <fts_children+0xe8>
xor    %eax,%eax
cmp    $0x1,%cx
jne    804f816 <fts_children+0x86>
mov    0x4(%ebx),%eax
test   %eax,%eax
je     804f7e4 <fts_children+0x54>
call   804d8d0 <calloc@plt+0x4540>
cmpl   $0x2000,0x34(%esp)
mov    $0x1,%ebp
je     804f820 <fts_children+0x90>
mov    0x30(%esi),%eax
test   %eax,%eax
jne    804f80a <fts_children+0x7a>
mov    0x18(%esi),%eax
cmpb   $0x2f,(%eax)
je     804f80a <fts_children+0x7a>
mov    0x2c(%ebx),%edx
test   $0x4,%dl
je     804f838 <fts_children+0xa8>
mov    %ebp,%edx
mov    %ebx,%eax
call   804e110 <calloc@plt+0x4d80>
mov    %eax,0x4(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x30(%esi),%eax
mov    $0x2,%bp
orl    $0x2000,0x2c(%ebx)
test   %eax,%eax
je     804f7fa <fts_children+0x6a>
jmp    804f80a <fts_children+0x7a>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%ebx),%eax
mov    $0x80529d3,%ecx
call   804dcd0 <calloc@plt+0x4940>
test   %eax,%eax
mov    %eax,%esi
js     804f8c0 <fts_children+0x130>
mov    %ebp,%edx
mov    %ebx,%eax
call   804e110 <calloc@plt+0x4d80>
testb  $0x2,0x2d(%ebx)
mov    %eax,0x4(%ebx)
je     804f8a8 <fts_children+0x118>
mov    $0x1,%ecx
mov    %esi,%edx
mov    %ebx,%eax
call   804d950 <calloc@plt+0x45c0>
mov    0x4(%ebx),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    0x8(%esi),%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049200 <__errno_location@plt>
movl   $0x16,(%eax)
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    804f816 <fts_children+0x86>
nop
mov    %esi,(%esp)
call   80492a0 <fchdir@plt>
test   %eax,%eax
jne    804f8ce <fts_children+0x13e>
mov    %esi,(%esp)
call   8049350 <close@plt>
jmp    804f86b <fts_children+0xdb>
xchg   %ax,%ax
movl   $0x0,0x4(%ebx)
xor    %eax,%eax
jmp    804f816 <fts_children+0x86>
mov    (%edi),%ebx
mov    %esi,(%esp)
call   8049350 <close@plt>
xor    %eax,%eax
mov    %ebx,(%edi)
jmp    804f816 <fts_children+0x86>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x0,0x8(%esp)
mov    0x24(%esp),%esi
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
call   8051090 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%edx
js     804f958 <fts_children+0x1c8>
mov    %eax,%ecx
mov    %esi,%ebx
and    $0xfffffffe,%eax
or     $0x1,%ecx
test   %bl,%bl
cmove  %eax,%ecx
xor    %eax,%eax
cmp    %edx,%ecx
je     804f950 <fts_children+0x1c0>
mov    %ecx,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %edi,(%esp)
call   8051090 <fts_children+0x1900>
cmp    $0xffffffff,%eax
sete   %al
movzbl %al,%eax
neg    %eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
mov    $0xffffffff,%eax
jmp    804f950 <fts_children+0x1c0>
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x406,0x4(%esp)
mov    %eax,(%esp)
call   8051090 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   80490b0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8050ff0 <fts_children+0x1860>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    804f9d0 <fts_children+0x240>
test   %dl,%dl
je     804f9c7 <fts_children+0x237>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     804f9f0 <fts_children+0x260>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    804f9c7 <fts_children+0x237>
call   8049200 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049200 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    0x4(%esp),%eax
movl   $0x0,0x10(%eax)
movl   $0x0,0x14(%eax)
movl   $0x95f616,0x18(%eax)
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%esi
mov    0x44(%esp),%edi
cmpl   $0x95f616,0x18(%esi)
jne    804faed <fts_children+0x35d>
mov    0x14(%esi),%edx
mov    0x10(%esi),%eax
mov    %edx,%ebx
or     %eax,%ebx
je     804faa0 <fts_children+0x310>
mov    0x58(%edi),%ebx
mov    %ebx,%ecx
mov    %ebx,0x18(%esp)
mov    0x5c(%edi),%ebx
xor    (%esi),%ecx
mov    %ebx,0x1c(%esp)
xor    0x4(%esi),%ebx
or     %ecx,%ebx
je     804fad0 <fts_children+0x340>
mov    %eax,%ecx
mov    %edx,%ebx
add    $0x1,%ecx
adc    $0x0,%ebx
mov    %ecx,%ebp
and    %eax,%ebp
and    %ebx,%edx
xor    %eax,%eax
or     %ebp,%edx
mov    %ecx,0x10(%esi)
mov    %ebx,0x14(%esi)
jne    804fac6 <fts_children+0x336>
mov    %ebx,%eax
or     %ecx,%eax
je     804fae0 <fts_children+0x350>
mov    0x18(%esp),%ebx
mov    0x1c(%esp),%ecx
jmp    804fab4 <fts_children+0x324>
lea    0x0(%esi),%esi
mov    0x58(%edi),%ebx
mov    0x5c(%edi),%ecx
movl   $0x1,0x10(%esi)
movl   $0x0,0x14(%esi)
mov    (%edi),%eax
mov    0x4(%edi),%edx
mov    %ebx,(%esi)
mov    %ecx,0x4(%esi)
mov    %eax,0x8(%esi)
xor    %eax,%eax
mov    %edx,0xc(%esi)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
mov    (%edi),%ecx
mov    0x4(%edi),%ebx
xor    0xc(%esi),%ebx
xor    0x8(%esi),%ecx
or     %ecx,%ebx
jne    804fa71 <fts_children+0x2e1>
nop
add    $0x2c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x8052a3a,0xc(%esp)
movl   $0x3c,0x8(%esp)
movl   $0x8052a10,0x4(%esp)
movl   $0x8052a22,(%esp)
call   8049370 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x24(%esp),%edx
test   $0x40,%dl
cmovne 0x28(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8048f30 <open64@plt>
mov    %eax,(%esp)
call   8050fb0 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
cmp    $0x9,%eax
push   %edi
push   %esi
push   %ebx
ja     804fbd6 <fts_children+0x446>
mov    $0xb,%ebx
mov    $0xaaaaaaab,%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%ebx
jbe    804fbcf <fts_children+0x43f>
mov    %ebx,%eax
mul    %ebp
shr    %edx
lea    (%edx,%edx,2),%eax
cmp    %eax,%ebx
je     804fbc0 <fts_children+0x430>
mov    $0x10,%edi
mov    $0x9,%esi
mov    $0x3,%ecx
jmp    804fbad <fts_children+0x41d>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
add    $0x8,%edi
test   %edx,%edx
je     804fbc0 <fts_children+0x430>
add    %edi,%esi
add    $0x2,%ecx
cmp    %ebx,%esi
jb     804fba0 <fts_children+0x410>
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
test   %edx,%edx
jne    804fbc8 <fts_children+0x438>
add    $0x2,%ebx
cmp    $0xffffffff,%ebx
jne    804fb78 <fts_children+0x3e8>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%ecx
jmp    804fbb6 <fts_children+0x426>
or     $0x1,%eax
cmp    $0xffffffff,%eax
mov    %eax,%ebx
jne    804fb6e <fts_children+0x3de>
jmp    804fbc8 <fts_children+0x438>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
xor    %edx,%edx
ror    $0x3,%eax
divl   0x8(%esp)
mov    %edx,%eax
ret
mov    0x8(%esp),%eax
cmp    %eax,0x4(%esp)
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x8(%eax),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   *0x18(%ebx)
cmp    0x8(%ebx),%eax
jae    804fc32 <fts_children+0x4a2>
mov    (%ebx),%edx
add    $0x18,%esp
pop    %ebx
lea    (%edx,%eax,8),%eax
ret
call   8049320 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    %ecx,0xc(%esp)
mov    0x30(%esp),%ebp
call   804fc10 <fts_children+0x480>
mov    0xc(%esp),%ecx
mov    %eax,%ebx
mov    %eax,(%ecx)
mov    (%eax),%eax
test   %eax,%eax
je     804fcc6 <fts_children+0x536>
cmp    %eax,%edi
je     804fc7a <fts_children+0x4ea>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
je     804fcbf <fts_children+0x52f>
mov    (%ebx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804fca0 <fts_children+0x510>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     804fcf8 <fts_children+0x568>
mov    (%edx),%edi
mov    0x4(%edx),%ebp
mov    %edi,(%ebx)
mov    %ebp,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%edx),%eax
cmp    %edi,%eax
je     804fcd5 <fts_children+0x545>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
jne    804fcd0 <fts_children+0x540>
mov    0x4(%ebx),%ebx
mov    0x4(%ebx),%edx
test   %edx,%edx
jne    804fca8 <fts_children+0x518>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4(%ebx),%edx
mov    (%edx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     804fca0 <fts_children+0x510>
mov    0x4(%edx),%ecx
mov    %ecx,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,(%ebx)
jmp    804fca0 <fts_children+0x510>
mov    (%eax),%edx
mov    %eax,%ecx
cmp    $0x8052ab4,%edx
je     804fda8 <fts_children+0x618>
flds   0x8(%edx)
flds   0x8052ac8
fxch   %st(1)
fucomi %st(1),%st
jbe    804fd68 <fts_children+0x5d8>
flds   0x8052acc
fucomip %st(1),%st
jbe    804fd70 <fts_children+0x5e0>
flds   0xc(%edx)
flds   0x8052ad0
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    804fd78 <fts_children+0x5e8>
flds   (%edx)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     804fd80 <fts_children+0x5f0>
faddp  %st,%st(2)
flds   0x4(%edx)
fucomi %st(2),%st
jbe    804fd88 <fts_children+0x5f8>
fld1
fucomip %st(1),%st
fstp   %st(0)
jb     804fd90 <fts_children+0x600>
fucomip %st(1),%st
fstp   %st(0)
mov    $0x1,%eax
jbe    804fd98 <fts_children+0x608>
jmp    804fdad <fts_children+0x61d>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
fstp   %st(0)
jmp    804fd98 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804fd98 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    804fd98 <fts_children+0x608>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804fd98 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    804fd98 <fts_children+0x608>
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8052ab4,(%ecx)
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
repz ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%edx),%edi
cmp    0x4(%edx),%edi
mov    %edx,0x4(%esp)
mov    %cl,0xb(%esp)
jae    804fe34 <fts_children+0x6a4>
mov    (%edi),%ebx
test   %ebx,%ebx
je     804fe28 <fts_children+0x698>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
jne    804fde7 <fts_children+0x657>
jmp    804fe1a <fts_children+0x68a>
nop
mov    0x4(%eax),%ecx
test   %edx,%edx
mov    %ecx,0x4(%ebp)
mov    %ebp,0x4(%eax)
je     804fe18 <fts_children+0x688>
mov    %edx,%ebp
mov    0x0(%ebp),%ebx
mov    %esi,%eax
mov    %ebx,%edx
call   804fc10 <fts_children+0x480>
mov    0x4(%ebp),%edx
mov    (%eax),%ecx
test   %ecx,%ecx
jne    804fdd8 <fts_children+0x648>
mov    %ebx,(%eax)
addl   $0x1,0xc(%esi)
test   %edx,%edx
movl   $0x0,0x0(%ebp)
mov    0x24(%esi),%eax
mov    %eax,0x4(%ebp)
mov    %ebp,0x24(%esi)
jne    804fde5 <fts_children+0x655>
xchg   %ax,%ax
mov    (%edi),%ebx
cmpb   $0x0,0xb(%esp)
movl   $0x0,0x4(%edi)
je     804fe48 <fts_children+0x6b8>
mov    0x4(%esp),%eax
add    $0x8,%edi
cmp    %edi,0x4(%eax)
ja     804fdc8 <fts_children+0x638>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %esi,%eax
call   804fc10 <fts_children+0x480>
mov    %eax,%edx
mov    (%eax),%eax
test   %eax,%eax
je     804fe92 <fts_children+0x702>
mov    0x24(%esi),%eax
test   %eax,%eax
je     804fe9a <fts_children+0x70a>
mov    0x4(%eax),%ecx
mov    %ecx,0x24(%esi)
mov    0x4(%edx),%ecx
mov    %ebx,(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x4(%edx)
mov    0x4(%esp),%eax
add    $0x8,%edi
movl   $0x0,-0x8(%edi)
subl   $0x1,0xc(%eax)
mov    0x4(%esp),%eax
cmp    %edi,0x4(%eax)
ja     804fdc8 <fts_children+0x638>
jmp    804fe34 <fts_children+0x6a4>
mov    %ebx,(%edx)
addl   $0x1,0xc(%esi)
jmp    804fe71 <fts_children+0x6e1>
movl   $0x8,(%esp)
mov    %edx,0xc(%esp)
call   8049110 <malloc@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    804fe66 <fts_children+0x6d6>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%ebx
mov    0x4(%eax),%esi
xor    %eax,%eax
cmp    %esi,%ebx
jae    804ff36 <fts_children+0x7a6>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%edx
test   %edx,%edx
je     804ff2f <fts_children+0x79f>
mov    0x4(%ebx),%edx
mov    $0x1,%ecx
test   %edx,%edx
je     804ff2a <fts_children+0x79a>
lea    0x0(%esi),%esi
mov    0x4(%edx),%edx
add    $0x1,%ecx
test   %edx,%edx
jne    804ff20 <fts_children+0x790>
cmp    %ecx,%eax
cmovb  %ecx,%eax
add    $0x8,%ebx
cmp    %esi,%ebx
jb     804ff08 <fts_children+0x778>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
xor    %edx,%edx
push   %esi
push   %ebx
mov    0x10(%esp),%edi
xor    %ebx,%ebx
mov    (%edi),%ecx
mov    0x4(%edi),%esi
cmp    %esi,%ecx
jae    804ff81 <fts_children+0x7f1>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804ff7a <fts_children+0x7ea>
mov    0x4(%ecx),%eax
add    $0x1,%ebx
add    $0x1,%edx
test   %eax,%eax
je     804ff7a <fts_children+0x7ea>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804ff70 <fts_children+0x7e0>
add    $0x8,%ecx
cmp    %esi,%ecx
jb     804ff58 <fts_children+0x7c8>
xor    %eax,%eax
cmp    %ebx,0xc(%edi)
je     804ff8c <fts_children+0x7fc>
pop    %ebx
pop    %esi
pop    %edi
ret
cmp    %edx,0x10(%edi)
pop    %ebx
pop    %esi
sete   %al
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    0x54(%esp),%ebx
mov    0xc(%eax),%edi
mov    (%eax),%ecx
mov    0x4(%eax),%ebp
mov    0x10(%eax),%esi
mov    %edi,0x24(%esp)
xor    %edi,%edi
cmp    %ebp,%ecx
mov    %esi,0x20(%esp)
mov    0x8(%eax),%esi
jae    804fffe <fts_children+0x86e>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     804fff7 <fts_children+0x867>
mov    0x4(%ecx),%eax
mov    $0x1,%edx
test   %eax,%eax
je     804fff2 <fts_children+0x862>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    804ffe8 <fts_children+0x858>
cmp    %edx,%edi
cmovb  %edx,%edi
add    $0x8,%ecx
cmp    %ebp,%ecx
jb     804ffd0 <fts_children+0x840>
mov    0x20(%esp),%eax
mov    %ebx,(%esp)
movl   $0x8052a46,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8052a5e,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    0x24(%esp),%ecx
xor    %edx,%edx
mov    %edx,0x2c(%esp)
xor    %edx,%edx
mov    %ebx,(%esp)
movl   $0x8052a90,0x8(%esp)
mov    %ecx,0x28(%esp)
mov    %ecx,0xc(%esp)
fildll 0x28(%esp)
fmuls  0x8052ad4
mov    %esi,0x28(%esp)
mov    %edx,0x2c(%esp)
movl   $0x1,0x4(%esp)
fildll 0x28(%esp)
fdivrp %st,%st(1)
fstpl  0x10(%esp)
call   80492e0 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x8052a76,0x8(%esp)
movl   $0x1,0x4(%esp)
call   80492e0 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804fc10 <fts_children+0x480>
mov    (%eax),%ecx
mov    %eax,%ebx
test   %ecx,%ecx
jne    80500da <fts_children+0x94a>
jmp    80500f3 <fts_children+0x963>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
cmp    %ecx,%esi
je     8050102 <fts_children+0x972>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   *0x1c(%edi)
test   %al,%al
jne    8050100 <fts_children+0x970>
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    80500d8 <fts_children+0x948>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
add    $0x10,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    0x10(%esp),%eax
mov    0x10(%eax),%edx
test   %edx,%edx
je     8050141 <fts_children+0x9b1>
mov    (%eax),%edx
mov    0x4(%eax),%ecx
cmp    %ecx,%edx
jb     8050137 <fts_children+0x9a7>
jmp    8050147 <fts_children+0x9b7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%edx
cmp    %ecx,%edx
jae    8050147 <fts_children+0x9b7>
mov    (%edx),%eax
test   %eax,%eax
je     8050130 <fts_children+0x9a0>
add    $0xc,%esp
ret
xor    %eax,%eax
add    $0xc,%esp
ret
call   8049320 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   804fc10 <fts_children+0x480>
mov    %eax,%ebx
mov    %eax,%ecx
jmp    8050177 <fts_children+0x9e7>
lea    0x0(%esi),%esi
mov    0x4(%ecx),%ecx
test   %ecx,%ecx
je     8050182 <fts_children+0x9f2>
cmp    %esi,(%ecx)
jne    8050170 <fts_children+0x9e0>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    805019b <fts_children+0xa0b>
mov    0x4(%edi),%edx
jmp    805018e <fts_children+0x9fe>
nop
mov    (%ebx),%eax
test   %eax,%eax
jne    8050197 <fts_children+0xa07>
add    $0x8,%ebx
cmp    %edx,%ebx
jb     8050188 <fts_children+0x9f8>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
pop    %ebx
mov    (%eax),%eax
pop    %esi
pop    %edi
ret
jmp    80501b0 <fts_children+0xa20>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    0x0(%ebp),%edi
cmp    %edi,0x4(%ebp)
jbe    8050208 <fts_children+0xa78>
mov    (%edi),%edx
test   %edx,%edx
je     80501fc <fts_children+0xa6c>
cmp    %eax,%ebx
jbe    8050208 <fts_children+0xa78>
mov    %edx,(%esi,%eax,4)
mov    0x4(%edi),%edx
lea    0x1(%eax),%ecx
mov    %ecx,%eax
test   %edx,%edx
je     80501fc <fts_children+0xa6c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,%eax
je     8050208 <fts_children+0xa78>
mov    (%edx),%ecx
add    $0x1,%eax
mov    %ecx,-0x4(%esi,%eax,4)
mov    0x4(%edx),%edx
test   %edx,%edx
jne    80501e8 <fts_children+0xa58>
add    $0x8,%edi
cmp    %edi,0x4(%ebp)
ja     80501ca <fts_children+0xa3a>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x30(%esp),%ecx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%eax),%eax
cmp    %eax,0x4(%ecx)
mov    %eax,0xc(%esp)
jbe    8050278 <fts_children+0xae8>
mov    0xc(%esp),%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    805024b <fts_children+0xabb>
jmp    8050262 <fts_children+0xad2>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   *%esi
test   %al,%al
je     8050278 <fts_children+0xae8>
mov    0x4(%ebp),%ebp
add    $0x1,%ebx
test   %ebp,%ebp
jne    8050248 <fts_children+0xab8>
mov    0x30(%esp),%eax
addl   $0x8,0xc(%esp)
mov    0xc(%esp),%edx
cmp    %edx,0x4(%eax)
ja     8050234 <fts_children+0xaa4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    0xc(%esp),%ebx
mov    0x10(%esp),%esi
movzbl (%ebx),%ecx
test   %cl,%cl
je     80502c2 <fts_children+0xb32>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %cl,%eax
mov    %edx,%ecx
shl    $0x5,%ecx
add    $0x1,%ebx
sub    %edx,%ecx
xor    %edx,%edx
add    %ecx,%eax
movzbl (%ebx),%ecx
div    %esi
test   %cl,%cl
jne    80502a8 <fts_children+0xb18>
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x0,(%eax)
movl   $0x3f800000,0x4(%eax)
movl   $0x3f4ccccd,0x8(%eax)
movl   $0x3fb4fdf4,0xc(%eax)
movb   $0x0,0x10(%eax)
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x804fbf0,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%edi
mov    0x4c(%esp),%esi
movl   $0x28,(%esp)
mov    0x44(%esp),%ebx
test   %edi,%edi
cmove  %eax,%edi
test   %esi,%esi
mov    $0x804fc00,%eax
cmove  %eax,%esi
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8050438 <fts_children+0xca8>
test   %ebx,%ebx
mov    $0x8052ab4,%eax
cmove  %eax,%ebx
mov    %ebx,0x14(%ebp)
lea    0x14(%ebp),%eax
call   804fd00 <fts_children+0x570>
test   %al,%al
je     8050421 <fts_children+0xc91>
cmpb   $0x0,0x10(%ebx)
flds   0x8(%ebx)
jne    80503b0 <fts_children+0xc20>
mov    0x40(%esp),%ecx
xor    %ebx,%ebx
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8052ad8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8050418 <fts_children+0xc88>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,0x40(%esp)
jmp    80503b2 <fts_children+0xc22>
nop
fstp   %st(0)
mov    0x40(%esp),%eax
call   804fb60 <fts_children+0x3d0>
cmp    $0x3fffffff,%eax
mov    %eax,%ebx
ja     805041a <fts_children+0xc8a>
test   %eax,%eax
mov    %eax,0x8(%ebp)
je     8050421 <fts_children+0xc91>
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   8049390 <calloc@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     8050421 <fts_children+0xc91>
lea    (%eax,%ebx,8),%eax
mov    %eax,0x4(%ebp)
mov    0x50(%esp),%eax
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
mov    %edi,0x18(%ebp)
mov    %eax,0x20(%ebp)
mov    %ebp,%eax
mov    %esi,0x1c(%ebp)
movl   $0x0,0x24(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
movl   $0x0,0x8(%ebp)
mov    %ebp,(%esp)
call   8048f90 <free@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    805040c <fts_children+0xc7c>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    80504b6 <fts_children+0xd26>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
test   %eax,%eax
je     80504ae <fts_children+0xd1e>
mov    0x4(%edi),%ebx
mov    0x20(%esi),%edx
test   %ebx,%ebx
jne    8050472 <fts_children+0xce2>
jmp    8050496 <fts_children+0xd06>
lea    0x0(%esi),%esi
mov    %eax,%ebx
test   %edx,%edx
je     8050480 <fts_children+0xcf0>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *%edx
mov    0x20(%esi),%edx
mov    0x4(%ebx),%eax
mov    0x24(%esi),%ecx
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %ecx,0x4(%ebx)
mov    %ebx,0x24(%esi)
jne    8050470 <fts_children+0xce0>
test   %edx,%edx
je     80504a1 <fts_children+0xd11>
mov    (%edi),%eax
mov    %eax,(%esp)
call   *%edx
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     8050458 <fts_children+0xcc8>
movl   $0x0,0xc(%esi)
movl   $0x0,0x10(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x20(%esi),%edx
test   %edx,%edx
je     80504e8 <fts_children+0xd58>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    805055a <fts_children+0xdca>
mov    0x4(%esi),%eax
mov    (%esi),%edi
cmp    %eax,%edi
jae    8050521 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edi),%eax
test   %eax,%eax
jne    805050a <fts_children+0xd7a>
jmp    8050519 <fts_children+0xd89>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048f90 <free@plt>
test   %ebx,%ebx
jne    8050508 <fts_children+0xd78>
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     80504f8 <fts_children+0xd68>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    8050532 <fts_children+0xda2>
jmp    8050541 <fts_children+0xdb1>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048f90 <free@plt>
test   %ebx,%ebx
jne    8050530 <fts_children+0xda0>
mov    (%esi),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048f90 <free@plt>
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8050521 <fts_children+0xd91>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
mov    %edi,%ebx
test   %eax,%eax
jne    805057a <fts_children+0xdea>
jmp    8050587 <fts_children+0xdf7>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *0x20(%esi)
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    8050578 <fts_children+0xde8>
mov    0x4(%esi),%eax
add    $0x8,%edi
cmp    %edi,%eax
ja     8050568 <fts_children+0xdd8>
jmp    80504eb <fts_children+0xd5b>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    0x64(%esp),%eax
mov    0x14(%esi),%edi
cmpb   $0x0,0x10(%edi)
flds   0x8(%edi)
jne    8050600 <fts_children+0xe70>
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    %ebx,0x14(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x8052ad8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80506e0 <fts_children+0xf50>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,%eax
jmp    8050602 <fts_children+0xe72>
fstp   %st(0)
call   804fb60 <fts_children+0x3d0>
mov    %eax,%ebx
lea    -0x1(%eax),%eax
cmp    $0x3ffffffe,%eax
ja     80506e2 <fts_children+0xf52>
cmp    %ebx,0x8(%esi)
je     80506d0 <fts_children+0xf40>
movl   $0x8,0x4(%esp)
mov    %ebx,(%esp)
call   8049390 <calloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     80506e2 <fts_children+0xf52>
lea    (%eax,%ebx,8),%eax
xor    %ecx,%ecx
mov    %eax,0x2c(%esp)
mov    0x18(%esi),%eax
mov    %esi,%edx
mov    %ebx,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,0x40(%esp)
mov    0x1c(%esi),%eax
mov    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x48(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x4c(%esp)
lea    0x28(%esp),%eax
call   804fdb0 <fts_children+0x620>
test   %al,%al
mov    %eax,%ebx
jne    80506f0 <fts_children+0xf60>
mov    0x4c(%esp),%eax
mov    $0x1,%ecx
lea    0x28(%esp),%edx
mov    %eax,0x24(%esi)
mov    %esi,%eax
call   804fdb0 <fts_children+0x620>
test   %al,%al
je     8050725 <fts_children+0xf95>
xor    %ecx,%ecx
mov    %esi,%eax
lea    0x28(%esp),%edx
call   804fdb0 <fts_children+0x620>
test   %al,%al
je     8050725 <fts_children+0xf95>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x50,%esp
mov    $0x1,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
fstp   %st(0)
add    $0x50,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x30(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esi)
mov    0x4c(%esp),%eax
mov    %eax,0x24(%esi)
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
call   8049320 <abort@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%edi
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebx
test   %edi,%edi
je     80508b8 <fts_children+0x1128>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804fc40 <fts_children+0x4b0>
test   %eax,%eax
je     8050778 <fts_children+0xfe8>
test   %ebx,%ebx
je     80507f8 <fts_children+0x1068>
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  0x8(%eax)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    80507b8 <fts_children+0x1028>
jmp    8050808 <fts_children+0x1078>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     80508c0 <fts_children+0x1130>
mov    0x24(%esi),%eax
test   %eax,%eax
je     80508d4 <fts_children+0x1144>
mov    0x4(%eax),%edx
mov    %edx,0x24(%esi)
mov    0x4(%ebx),%edx
mov    %edi,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x4(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%esi),%eax
call   804fd00 <fts_children+0x570>
mov    0x14(%esi),%ecx
xor    %edx,%edx
mov    0x8(%esi),%eax
flds   0x8(%ecx)
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
fld    %st(2)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    80507b0 <fts_children+0x1020>
cmpb   $0x0,0x10(%ecx)
fmuls  0xc(%ecx)
jne    8050858 <fts_children+0x10c8>
fmulp  %st,%st(1)
jmp    805085a <fts_children+0x10ca>
lea    0x0(%esi),%esi
fstp   %st(1)
flds   0x8052ad8
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    80508ea <fts_children+0x115a>
fnstcw 0x1e(%esp)
mov    %esi,(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   80505a0 <fts_children+0xe10>
test   %al,%al
je     80508ec <fts_children+0x115c>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   804fc40 <fts_children+0x4b0>
test   %eax,%eax
je     80507b8 <fts_children+0x1028>
call   8049320 <abort@plt>
lea    0x0(%esi),%esi
mov    %edi,(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
addl   $0x1,0xc(%esi)
jmp    805076e <fts_children+0xfde>
movl   $0x8,(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
jne    80507d7 <fts_children+0x1047>
jmp    80508ec <fts_children+0x115c>
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    805076e <fts_children+0xfde>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
jmp    8050730 <fts_children+0xfa0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x34(%esp),%ebx
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8050730 <fts_children+0xfa0>
cmp    $0xffffffff,%eax
je     8050948 <fts_children+0x11b8>
test   %eax,%eax
mov    %ebx,%eax
cmove  0x1c(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    805093e <fts_children+0x11ae>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
lea    0x2c(%esp),%ecx
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %esi,%eax
call   804fc40 <fts_children+0x4b0>
test   %eax,%eax
mov    %eax,%edi
je     8050a88 <fts_children+0x12f8>
mov    %eax,%ebp
mov    0x2c(%esp),%eax
subl   $0x1,0x10(%esi)
mov    (%eax),%eax
test   %eax,%eax
jne    8050998 <fts_children+0x1208>
jmp    80509a8 <fts_children+0x1218>
lea    0x0(%esi),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
sub    $0x1,%eax
mov    %eax,0xc(%esi)
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  (%eax)
fucomip %st(1),%st
fstp   %st(0)
jbe    8050998 <fts_children+0x1208>
lea    0x14(%esi),%eax
call   804fd00 <fts_children+0x570>
mov    0x8(%esi),%eax
xor    %edx,%edx
mov    0x14(%esi),%ecx
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
flds   (%ecx)
fmul   %st(2),%st
fucomip %st(1),%st
fstp   %st(0)
jbe    8050990 <fts_children+0x1200>
cmpb   $0x0,0x10(%ecx)
fmuls  0x4(%ecx)
je     8050a90 <fts_children+0x1300>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,%ebp
mov    %esi,(%esp)
call   80505a0 <fts_children+0xe10>
test   %al,%al
jne    8050998 <fts_children+0x1208>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    8050a6a <fts_children+0x12da>
lea    0x0(%esi,%eiz,1),%esi
jmp    8050a79 <fts_children+0x12e9>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   8048f90 <free@plt>
test   %ebx,%ebx
jne    8050a68 <fts_children+0x12d8>
movl   $0x0,0x24(%esi)
mov    %edi,%ebp
jmp    8050998 <fts_children+0x1208>
nop
xor    %ebp,%ebp
jmp    8050998 <fts_children+0x1208>
nop
fmuls  0x8(%ecx)
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
jmp    8050a3f <fts_children+0x12af>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    0x8(%esp),%edx
movb   $0x1,0x1c(%eax)
movl   $0x0,0x14(%eax)
movl   $0x0,0x18(%eax)
mov    %edx,(%eax)
mov    %edx,0x4(%eax)
mov    %edx,0x8(%eax)
mov    %edx,0xc(%eax)
mov    %edx,0x10(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
movzbl 0x1c(%eax),%eax
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%edi
movzbl 0x1c(%edx),%eax
mov    0x14(%edx),%ecx
xor    $0x1,%eax
movzbl %al,%esi
add    %esi,%ecx
and    $0x3,%ecx
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %edi,(%ebx)
mov    0x18(%edx),%ebx
mov    %ecx,0x14(%edx)
cmp    %ecx,%ebx
jne    8050b36 <fts_children+0x13a6>
add    %esi,%ebx
and    $0x3,%ebx
mov    %ebx,0x18(%edx)
movb   $0x0,0x1c(%edx)
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x4,%esp
mov    0x10(%esp),%edx
cmpb   $0x0,0x1c(%edx)
jne    8050b7a <fts_children+0x13ea>
mov    0x14(%edx),%ecx
mov    0x10(%edx),%esi
lea    (%edx,%ecx,4),%ebx
mov    (%ebx),%eax
mov    %esi,(%ebx)
cmp    0x18(%edx),%ecx
je     8050b70 <fts_children+0x13e0>
add    $0x3,%ecx
and    $0x3,%ecx
mov    %ecx,0x14(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
movb   $0x1,0x1c(%edx)
add    $0x4,%esp
pop    %ebx
pop    %esi
ret
call   8049320 <abort@plt>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049250 <nl_langinfo@plt>
mov    0x8056374,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x805271d,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     8050c4c <fts_children+0x14bc>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     8050c17 <fts_children+0x1487>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    8050bf0 <fts_children+0x1460>
nop
mov    %ebp,(%esp)
call   80491a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   80491a0 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8050c48 <fts_children+0x14b8>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8048f20 <strcmp@plt>
test   %eax,%eax
je     8050c0b <fts_children+0x147b>
cmp    $0x2a,%bl
jne    8050bd0 <fts_children+0x1440>
cmpb   $0x0,0x1(%ebp)
jne    8050bd0 <fts_children+0x1440>
mov    %ebp,(%esp)
call   80491a0 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x8052ae5,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8050f0d <fts_children+0x177d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    8050c17 <fts_children+0x1487>
movl   $0x8052aeb,(%esp)
call   80490f0 <getenv@plt>
test   %eax,%eax
je     8050c65 <fts_children+0x14d5>
cmpb   $0x0,(%eax)
jne    8050e73 <fts_children+0x16e3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x8052adc,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8050e64 <fts_children+0x16d4>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049110 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8050f03 <fts_children+0x1773>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8048fa0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050ccc <fts_children+0x153c>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8048f30 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8050e48 <fts_children+0x16b8>
movl   $0x8051d49,0x4(%esp)
mov    %eax,(%esp)
call   8049150 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8050e40 <fts_children+0x16b0>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050e26 <fts_children+0x1696>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8050d30 <fts_children+0x15a0>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8050d30 <fts_children+0x15a0>
cmp    $0x23,%eax
je     8050e9d <fts_children+0x170d>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   80491f0 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8052afb,0x4(%esp)
mov    %esi,(%esp)
call   8049190 <fscanf@plt>
cmp    $0x1,%eax
jle    8050ec0 <fts_children+0x1730>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   80491a0 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   80491a0 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    8050ede <fts_children+0x174e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049110 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8050f12 <fts_children+0x1782>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   80490a0 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   80490a0 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     8050d3c <fts_children+0x15ac>
mov    %esi,(%esp)
call   8049240 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8050ec0 <fts_children+0x1730>
jmp    8050d45 <fts_children+0x15b5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049350 <close@plt>
mov    $0x805271d,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8048f90 <free@plt>
mov    %ebp,0x8056374
jmp    8050bbf <fts_children+0x142f>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    8050c8b <fts_children+0x14fb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   80491a0 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8050e64 <fts_children+0x16d4>
lea    -0x1(%eax),%eax
jmp    8050c74 <fts_children+0x14e4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8050eb7 <fts_children+0x1727>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8050f2c <fts_children+0x179c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    8050e98 <fts_children+0x1708>
cmp    $0xffffffff,%eax
jne    8050d30 <fts_children+0x15a0>
mov    %esi,(%esp)
call   8050ff0 <fts_children+0x1860>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8050e48 <fts_children+0x16b8>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    8050e4d <fts_children+0x16bd>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8049100 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    8050ddc <fts_children+0x164c>
mov    $0x805271d,%ebp
jmp    8050e59 <fts_children+0x16c9>
call   8049010 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x805271d,%ebp
call   8048f90 <free@plt>
mov    %esi,(%esp)
call   8050ff0 <fts_children+0x1860>
jmp    8050e4d <fts_children+0x16bd>
mov    %esi,(%esp)
call   8049240 <__uflow@plt>
jmp    8050eb2 <fts_children+0x1722>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
xor    %eax,%eax
mov    0x28(%esp),%edx
test   $0x40,%dl
cmovne 0x2c(%esp),%eax
mov    %edx,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80491b0 <openat64@plt>
mov    %eax,(%esp)
call   8050fb0 <fts_children+0x1820>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8051090 <fts_children+0x1900>
add    $0x1c,%esp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
cmp    $0x2,%ebx
ja     8050fdf <fts_children+0x184f>
mov    %ebx,(%esp)
call   8050f80 <fts_children+0x17f0>
mov    %eax,%edi
call   8049200 <__errno_location@plt>
mov    (%eax),%ebp
mov    %eax,%esi
mov    %ebx,(%esp)
mov    %edi,%ebx
call   8049350 <close@plt>
mov    %ebp,(%esi)
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049210 <fileno@plt>
test   %eax,%eax
js     8051078 <fts_children+0x18e8>
mov    %ebx,(%esp)
call   8049120 <__freading@plt>
test   %eax,%eax
jne    8051048 <fts_children+0x18b8>
mov    %ebx,(%esp)
call   804d520 <calloc@plt+0x4190>
test   %eax,%eax
je     8051078 <fts_children+0x18e8>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8048fd0 <fclose@plt>
test   %edi,%edi
je     805103a <fts_children+0x18aa>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049210 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   80492b0 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8051012 <fts_children+0x1882>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8048fd0 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%esi
cmp    $0x406,%eax
jne    80510f0 <fts_children+0x1960>
mov    0x8056378,%eax
mov    0x28(%esp),%edi
test   %eax,%eax
mov    %edi,0x8(%esp)
js     8051198 <fts_children+0x1a08>
movl   $0x406,0x4(%esp)
mov    %esi,(%esp)
call   80491d0 <fcntl@plt>
test   %eax,%eax
mov    %eax,%ebx
js     8051110 <fts_children+0x1980>
movl   $0x1,0x8056378
00
test   %ebx,%ebx
js     80510e7 <fts_children+0x1957>
cmpl   $0xffffffff,0x8056378
je     8051140 <fts_children+0x19b0>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x28(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    %edx,0x8(%esp)
call   80491d0 <fcntl@plt>
add    $0x10,%esp
mov    %eax,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8049200 <__errno_location@plt>
cmpl   $0x16,(%eax)
jne    80510d0 <fts_children+0x1940>
mov    %edi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8051090 <fts_children+0x1900>
test   %eax,%eax
mov    %eax,%ebx
js     80510e7 <fts_children+0x1957>
movl   $0xffffffff,0x8056378
ff
xchg   %ax,%ax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   80491d0 <fcntl@plt>
test   %eax,%eax
js     8051174 <fts_children+0x19e4>
or     $0x1,%eax
mov    %eax,0x8(%esp)
movl   $0x2,0x4(%esp)
mov    %ebx,(%esp)
call   80491d0 <fcntl@plt>
cmp    $0xffffffff,%eax
jne    80510e7 <fts_children+0x1957>
call   8049200 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
mov    $0xffffffff,%ebx
call   8049350 <close@plt>
mov    %edi,(%esi)
jmp    80510e7 <fts_children+0x1957>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8051090 <fts_children+0x1900>
mov    %eax,%ebx
jmp    80510da <fts_children+0x194a>
nop
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    80511f8 <fts_children+0x1a68>
cmp    %edi,%esi
jbe    8051230 <fts_children+0x1aa0>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     8051250 <fts_children+0x1ac0>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    8051260 <fts_children+0x1ad0>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     80512f8 <fts_children+0x1b68>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    8051241 <fts_children+0x1ab1>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    80511eb <fts_children+0x1a5b>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     80512e4 <fts_children+0x1b54>
cmp    %eax,0xc(%esp)
jb     80512e0 <fts_children+0x1b50>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    80512be <fts_children+0x1b2e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    80512be <fts_children+0x1b2e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     8051211 <fts_children+0x1a81>
jmp    8051221 <fts_children+0x1a91>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   8049920 <calloc@plt+0x590>
add    $0x4ce5,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xf4(%ebx),%esi
call   8048ee4 <strcmp@plt-0x3c>
lea    -0xf8(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     8051369 <fts_children+0x1bd9>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0xf8(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    8051348 <fts_children+0x1bb8>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    8051380 <fts_children+0x1bf0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   8049920 <calloc@plt+0x590>
add    $0x4c6a,%ebx
sub    $0x18,%esp
lea    0x144(%ebx),%eax
test   %eax,%eax
je     80513c8 <fts_children+0x1c38>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80490d0 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    80513ab <fts_children+0x1c1b>
push   %ebx
sub    $0x8,%esp
call   8049920 <calloc@plt+0x590>
add    $0x4c2b,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %esp
jb     8051464 <_IO_stdin_used+0x80>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     805141c <_IO_stdin_used+0x38>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8051465 <_IO_stdin_used+0x81>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     8051474 <_IO_stdin_used+0x90>
popa
je     8051473 <_IO_stdin_used+0x8f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %al,%cs:0x49(%esi)
dec    %esp
inc    %ebp
cs cs or %cs:(%eax),%al
add    %dl,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805149b <_IO_stdin_used+0xb7>
and    %ch,(%eax)
jne    80514a8 <_IO_stdin_used+0xc4>
insb   (%dx),%es:(%edi)
imul   $0x68742029,0x6b(%esi),%ebp
and    %al,%gs:0x49(%esi)
dec    %esp
inc    %ebp
sub    %dh,0x29(%ebx)
or     %cs:(%edx),%cl
and    %ah,(%eax)
sub    $0x2d202c66,%eax
sub    $0x63726f66,%eax
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x67(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     80514d1 <_IO_stdin_used+0xed>
and    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
gs
js     80514dc <_IO_stdin_used+0xf8>
jae    80514e9 <_IO_stdin_used+0x105>
outsb  %gs:(%esi),(%dx)
je     8051499 <_IO_stdin_used+0xb5>
imul   $0x6120,0x73(%ebp,%eiz,2),%bp
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%ecx)
addr16 jne 80514f5 <_IO_stdin_used+0x111>
outsb  %gs:(%esi),(%dx)
je     80514ff <_IO_stdin_used+0x11b>
sub    $0x20,%al
outsb  %ds:(%esi),(%dx)
gs
jbe    80514f7 <_IO_stdin_used+0x113>
jb     80514b4 <_IO_stdin_used+0xd0>
jo     8051508 <_IO_stdin_used+0x124>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     805150e <_IO_stdin_used+0x12a>
or     (%eax),%ah
and    %ch,0x20202069
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     805152d <_IO_stdin_used+0x149>
and    %ah,0x65(%edx)
outsw  %ds:(%esi),(%dx)
jb     8051525 <_IO_stdin_used+0x141>
and    %ah,0x76(%ebp)
gs
jb     805153f <_IO_stdin_used+0x15b>
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805152e <_IO_stdin_used+0x14a>
insb   (%dx),%es:(%edi)
or     (%eax),%al
and    %ah,(%eax)
sub    $0x20202049,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     8051562 <_IO_stdin_used+0x17e>
and    %ch,0x6e(%edi)
arpl   %sp,0x20(%ebp)
bound  %esp,0x66(%ebp)
outsl  %ds:(%esi),(%dx)
jb     805155f <_IO_stdin_used+0x17b>
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805156a <_IO_stdin_used+0x186>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%di)
jb     805156d <_IO_stdin_used+0x189>
and    %dh,0x61(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %dh,0x72(%eax,%ebp,2)
gs and %ah,%gs:0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    8051546 <_IO_stdin_used+0x162>
and    %ch,0x72(%edi)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    80515ac <_IO_stdin_used+0x1c8>
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%bp,%si)
arpl   %si,0x72(%ebp)
jae    80515b6 <_IO_stdin_used+0x1d2>
jbe    80515b4 <_IO_stdin_used+0x1d0>
insb   (%dx),%es:(%edi)
jns    8051580 <_IO_stdin_used+0x19c>
and    %ah,(%eax)
dec    %esp
gs
jae    80515cb <_IO_stdin_used+0x1e7>
and    %ch,0x6e(%ecx)
je     80515cf <_IO_stdin_used+0x1eb>
jne    80515d2 <_IO_stdin_used+0x1ee>
imul   $0x61687420,0x65(%esi),%esi
outsb  %ds:(%esi),(%dx)
and    %ch,0x200a2c69
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x68(%edi)
imul   $0x6c697473,0x20(%ebp,%eiz,2),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x69(%edi)
jbe    80515ff <_IO_stdin_used+0x21b>
outsb  %ds:(%esi),(%dx)
and    %dh,0x72(%bx,%si)
outsl  %ds:(%esi),(%dx)
je     8051603 <_IO_stdin_used+0x21f>
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ah,0x67(%ecx)
popa
imul   $0x6f6d2074,0x73(%esi),%ebp
jae    8051624 <_IO_stdin_used+0x240>
and    %ch,0x69(%ebp)
jae    8051629 <_IO_stdin_used+0x245>
popa
imul   $0xa,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x746e692d,%eax
gs
jb     8051629 <_IO_stdin_used+0x245>
arpl   %si,0x76(%ecx,%ebp,2)
gs
pop    %ebx
cmp    $0x4e454857,%eax
pop    %ebp
and    %ah,(%eax)
jo     805164a <_IO_stdin_used+0x266>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     8051650 <_IO_stdin_used+0x26c>
and    %ah,0x63(%ecx)
arpl   %bp,0x72(%edi)
imul   $0x206f7420,%fs:0x67(%esi),%ebp
push   %edi
dec    %eax
inc    %ebp
dec    %esi
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
gs
jbe    8051659 <_IO_stdin_used+0x275>
jb     8051622 <_IO_stdin_used+0x23e>
and    %ch,0x6e(%edi)
arpl   %sp,0x20(%ebp)
sub    %ch,0x202c2949
outsl  %ds:(%esi),(%dx)
jb     805160f <_IO_stdin_used+0x22b>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
popa
insb   (%dx),%es:(%edi)
ja     8051684 <_IO_stdin_used+0x2a0>
jns    8051698 <_IO_stdin_used+0x2b4>
and    %ch,(%eax)
sub    $0x202e2969,%eax
and    %dl,0x69(%edi)
je     8051699 <_IO_stdin_used+0x2b5>
outsl  %ds:(%esi),(%dx)
jne    80516a8 <_IO_stdin_used+0x2c4>
and    %dl,0x48(%edi)
inc    %ebp
dec    %esi
sub    $0x20,%al
jo     80516af <_IO_stdin_used+0x2cb>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
jo     80516b5 <_IO_stdin_used+0x2d1>
and    %ah,0x6c(%ecx)
ja     80516a7 <_IO_stdin_used+0x2c3>
jns    80516bb <_IO_stdin_used+0x2d7>
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x656e6f2d,%eax
sub    $0x656c6966,%eax
sub    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
and    %ah,(%eax)
ja     80516cf <_IO_stdin_used+0x2eb>
outsb  %gs:(%esi),(%dx)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    80516d9 <_IO_stdin_used+0x2f5>
outsb  %ds:(%esi),(%dx)
and    %ah,0x20(%bx,%di)
push   $0x61726569
jb     80516df <_IO_stdin_used+0x2fb>
push   $0x65722079
arpl   %si,0x72(%ebp)
jae    80516ef <_IO_stdin_used+0x30b>
jbe    80516ed <_IO_stdin_used+0x309>
insb   (%dx),%es:(%edi)
jns    80516b7 <_IO_stdin_used+0x2d3>
and    %dh,0x6b(%ebx)
imul   $0xa796e61,0x20(%eax),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    80516d9 <_IO_stdin_used+0x2f5>
je     8051723 <_IO_stdin_used+0x33f>
popa
je     80516de <_IO_stdin_used+0x2fa>
imul   $0x61206e6f,0x20(%ebx),%esi
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x79(%ebx)
jae    8051743 <_IO_stdin_used+0x35f>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x66(%ecx,%ebp,2)
data16
gs
jb     805173e <_IO_stdin_used+0x35a>
outsb  %ds:(%esi),(%dx)
je     80516fc <_IO_stdin_used+0x318>
data16
jb     805174e <_IO_stdin_used+0x36a>
insl   (%dx),%es:(%edi)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x61(%eax,%ebp,2)
je     8051720 <_IO_stdin_used+0x33c>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x6f(%ebx)
jb     805177d <_IO_stdin_used+0x399>
gs
jae    805177e <_IO_stdin_used+0x39a>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
imul   $0x6d6f6320,%fs:0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %ah,%gs:0x72(%ecx)
addr16 jne 8051794 <_IO_stdin_used+0x3b0>
outsb  %gs:(%esi),(%dx)
je     8051735 <_IO_stdin_used+0x351>
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x2d6f6e2d
jo     80517ab <_IO_stdin_used+0x3c7>
gs
jae    80517a1 <_IO_stdin_used+0x3bd>
jb     80517b4 <_IO_stdin_used+0x3d0>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805176d <_IO_stdin_used+0x389>
je     80517c1 <_IO_stdin_used+0x3dd>
gs
popa
je     8051773 <_IO_stdin_used+0x38f>
daa
das
daa
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    805176b <_IO_stdin_used+0x387>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6572702d,%eax
jae    80517d3 <_IO_stdin_used+0x3ef>
jb     80517e6 <_IO_stdin_used+0x402>
gs
sub    $0x746f6f72,%eax
and    %ah,(%eax)
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80517a0 <_IO_stdin_used+0x3bc>
jb     80517e7 <_IO_stdin_used+0x403>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    80517eb <_IO_stdin_used+0x407>
and    %ah,(%edi)
das
daa
and    %ch,(%eax)
fs
gs
popaw
jne    80517fe <_IO_stdin_used+0x41a>
je     80517bd <_IO_stdin_used+0x3d9>
or     (%eax),%ah
and    %ch,0x2d202c72
push   %edx
sub    $0x20,%al
sub    $0x6365722d,%eax
jne    8051818 <_IO_stdin_used+0x434>
jae    8051811 <_IO_stdin_used+0x42d>
jbe    805180f <_IO_stdin_used+0x42b>
and    %ah,(%eax)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051818 <_IO_stdin_used+0x434>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x646e6120,0x73(%ebp),%esp
and    %dh,0x65(%eax,%ebp,2)
imul   $0x746e6f63,0x20(%edx),%esi
outsb  %gs:(%esi),(%dx)
je     8051845 <_IO_stdin_used+0x461>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8051843 <_IO_stdin_used+0x45f>
jbe    8051841 <_IO_stdin_used+0x45d>
insb   (%dx),%es:(%edi)
jns    80517e9 <_IO_stdin_used+0x405>
and    %ah,(%eax)
sub    $0x2d202c64,%eax
sub    $0x20726964,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jb     805185e <_IO_stdin_used+0x47a>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051862 <_IO_stdin_used+0x47e>
and    %ah,0x6d(%ebp)
jo     8051876 <_IO_stdin_used+0x492>
jns    8051824 <_IO_stdin_used+0x440>
imul   $0x726f7463,%fs:0x65(%edx),%esi
imul   $0x2d20200a,0x73(%ebp),%esp
jbe    8051841 <_IO_stdin_used+0x45d>
and    %ch,0x7265762d
bound  %ebp,0x73(%edi)
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x78(%ebp)
jo     8051898 <_IO_stdin_used+0x4b4>
popa
imul   $0x74616877,0x20(%esi),%ebp
and    %ch,0x73(%ecx)
and    %ah,0x65(%edx)
imul   $0x6e6f6420,0x67(%esi),%ebp
or     %gs:(%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c65682d,%eax
jo     8051871 <_IO_stdin_used+0x48d>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     80518c7 <_IO_stdin_used+0x4e3>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    80518ea <_IO_stdin_used+0x506>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    80518fc <_IO_stdin_used+0x518>
jo     80518ff <_IO_stdin_used+0x51b>
je     80518ac <_IO_stdin_used+0x4c8>
jbe    80518f3 <_IO_stdin_used+0x50f>
jb     8051903 <_IO_stdin_used+0x51f>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051907 <_IO_stdin_used+0x523>
popa
je     8051906 <_IO_stdin_used+0x522>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x420a0000,0x0(%edx,%ecx,1),%esi
jns    80518d0 <_IO_stdin_used+0x4ec>
fs
gs
popaw
jne    8051922 <_IO_stdin_used+0x53e>
je     80518e4 <_IO_stdin_used+0x500>
and    %dh,0x6d(%edx)
and    %ah,0x65(%edi,%ebp,2)
jae    80518e1 <_IO_stdin_used+0x4fd>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     80518e5 <_IO_stdin_used+0x501>
jb     805192c <_IO_stdin_used+0x548>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051930 <_IO_stdin_used+0x54c>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x5520202e,0x73(%ebp),%esp
jae    8051942 <_IO_stdin_used+0x55e>
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x6365722d
jne    805195b <_IO_stdin_used+0x577>
jae    8051954 <_IO_stdin_used+0x570>
jbe    8051952 <_IO_stdin_used+0x56e>
and    %ch,(%eax)
sub    $0x726f2072,%eax
and    %ch,0x6f0a2952
jo     8051970 <_IO_stdin_used+0x58c>
imul   $0x206f7420,0x6e(%edi),%ebp
jb     805196a <_IO_stdin_used+0x586>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    805196e <_IO_stdin_used+0x58a>
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
insb   (%dx),%es:(%edi)
imul   $0x64206465,0x74(%ebx),%esi
imul   $0x726f7463,0x65(%edx),%esi
jns    805194c <_IO_stdin_used+0x568>
and    %dh,0x6f(%edi,%ebp,2)
sub    $0x20,%al
popa
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x69(%bx)
je     8051998 <_IO_stdin_used+0x5b4>
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %ch,0x66(%edi)
and    %ch,0x74(%ecx)
jae    805195c <_IO_stdin_used+0x578>
arpl   %bp,0x6e(%edi)
je     80519a6 <_IO_stdin_used+0x5c2>
outsb  %ds:(%esi),(%dx)
je     80519b7 <_IO_stdin_used+0x5d3>
or     %cs:(%eax),%al
add    %cl,(%edx)
push   %esp
outsl  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    80519b7 <_IO_stdin_used+0x5d3>
and    %ah,0x20(%ecx)
imul   $0x6877,0x20(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
jae    80519c4 <_IO_stdin_used+0x5e0>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x74(%ebx)
popa
jb     80519de <_IO_stdin_used+0x5fa>
jae    805198c <_IO_stdin_used+0x5a8>
ja     80519d7 <_IO_stdin_used+0x5f3>
je     80519d8 <_IO_stdin_used+0x5f4>
and    %ah,0x20(%ecx)
daa
sub    $0x66202c27,%eax
outsl  %ds:(%esi),(%dx)
jb     805199c <_IO_stdin_used+0x5b8>
gs
js     80519e0 <_IO_stdin_used+0x5fc>
insl   (%dx),%es:(%edi)
jo     80519ee <_IO_stdin_used+0x60a>
and    %ah,%gs:(%edi)
sub    $0x276f6f66,%eax
sub    $0xa,%al
jne    8051a01 <_IO_stdin_used+0x61d>
and    %ch,%gs:0x6e(%edi)
and    %ch,%gs:0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
jae    8051a01 <_IO_stdin_used+0x61d>
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
jae    80519e0 <_IO_stdin_used+0x5fc>
or     (%eax),%ah
and    %ah,0x2d2d2073
and    %ch,0xa6f6f66
or     (%eax),%ah
and    %ah,0x2f2e2073
sub    $0xa6f6f66,%eax
add    %al,(%eax)
add    %cl,(%edx)
dec    %esi
outsl  %ds:(%esi),(%dx)
je     8051a2e <_IO_stdin_used+0x64a>
and    %dh,0x61(%eax,%ebp,2)
je     80519ef <_IO_stdin_used+0x60b>
imul   $0x20756f79,0x20(%esi),%esp
jne    8051a4b <_IO_stdin_used+0x667>
and    %dh,%gs:0x6d(%edx)
and    %dh,0x20(%edi,%ebp,2)
jb     8051a47 <_IO_stdin_used+0x663>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051a4b <_IO_stdin_used+0x667>
and    %ah,0x20(%ecx)
imul   $0x6920,0x2c(%ebp,%eiz,2),%bp
je     8051a12 <_IO_stdin_used+0x62e>
insl   (%dx),%es:(%edi)
imul   $0x65622074,0x68(%edi),%esp
and    %dh,0x6f(%eax)
jae    8051a72 <_IO_stdin_used+0x68e>
imul   $0x6f742065,0x6c(%edx),%esp
and    %dh,0x65(%edx)
arpl   %bp,0x76(%edi)
gs
jb     8051a19 <_IO_stdin_used+0x635>
jae    8051a80 <_IO_stdin_used+0x69c>
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x66(%edi)
and    %ch,0x74(%ecx)
jae    8051a3b <_IO_stdin_used+0x657>
arpl   %bp,0x6e(%edi)
je     8051a85 <_IO_stdin_used+0x6a1>
outsb  %ds:(%esi),(%dx)
je     8051a96 <_IO_stdin_used+0x6b2>
sub    $0x20,%al
imul   $0x7573206e,0x65(%bp),%esi
data32 imul $0x6e65,0x69(%ebx),%sp
je     8051a56 <_IO_stdin_used+0x672>
gs
js     8051aa9 <_IO_stdin_used+0x6c5>
gs
jb     8051ab0 <_IO_stdin_used+0x6cc>
imul   $0x646e6120,0x65(%ebx),%esi
das
outsl  %ds:(%esi),(%dx)
jb     8051a67 <_IO_stdin_used+0x683>
je     8051ab2 <_IO_stdin_used+0x6ce>
insl   (%dx),%es:(%edi)
gs and %ah,%cs:%gs:(%eax)
inc    %esi
outsl  %ds:(%esi),(%dx)
jb     8051a72 <_IO_stdin_used+0x68e>
addr16 jb 8051aba <_IO_stdin_used+0x6d6>
popa
je     8051abd <_IO_stdin_used+0x6d9>
jb     8051a64 <_IO_stdin_used+0x680>
popa
jae    8051ad0 <_IO_stdin_used+0x6ec>
jne    8051ad1 <_IO_stdin_used+0x6ed>
popa
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
je     8051ace <_IO_stdin_used+0x6ea>
popa
je     8051a89 <_IO_stdin_used+0x6a5>
je     8051ad3 <_IO_stdin_used+0x6ef>
and    %ah,%gs:0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     8051ad7 <_IO_stdin_used+0x6f3>
outsb  %ds:(%esi),(%dx)
je     8051ae8 <_IO_stdin_used+0x704>
and    %ah,0x72(%ecx)
and    %dh,%gs:0x75(%edx,%esi,2)
insb   (%dx),%es:(%edi)
jns    8051aa0 <_IO_stdin_used+0x6bc>
jne    8051af0 <_IO_stdin_used+0x70c>
jb     8051ae9 <_IO_stdin_used+0x705>
arpl   %bp,0x76(%edi)
gs
jb     8051aeb <_IO_stdin_used+0x707>
bound  %ebp,0x2c(%ebp,%eiz,2)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
jae    8051afd <_IO_stdin_used+0x719>
fs
gs
jb     8051ab8 <_IO_stdin_used+0x6d4>
jne    8051b0d <_IO_stdin_used+0x729>
imul   $0x72687320,0x67(%esi),%ebp
gs fs or %cs:%fs:%gs:(%eax),%al
add    %al,(%eax)
push   $0x3a707474
das
das
ja     8051b28 <_IO_stdin_used+0x744>
ja     8051ae1 <_IO_stdin_used+0x6fd>
outsb  %ds:(%si),(%dx)
jne    8051ae5 <_IO_stdin_used+0x701>
outsl  %ds:(%esi),(%dx)
jb     8051b21 <_IO_stdin_used+0x73d>
das
jae    8051b2c <_IO_stdin_used+0x748>
data16
je     8051b37 <_IO_stdin_used+0x753>
popa
jb     8051b28 <_IO_stdin_used+0x744>
das
arpl   %bp,0x72(%edi)
gs
jne    8051b3e <_IO_stdin_used+0x75a>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     8051b37 <_IO_stdin_used+0x753>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051afd <_IO_stdin_used+0x719>
jne    8051b52 <_IO_stdin_used+0x76e>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     8051b63 <_IO_stdin_used+0x77f>
popa
jb     8051b54 <_IO_stdin_used+0x770>
cmp    (%eax),%ah
cmp    $0x68,%al
je     8051b69 <_IO_stdin_used+0x785>
jo     8051b31 <_IO_stdin_used+0x74d>
das
das
ja     8051b72 <_IO_stdin_used+0x78e>
ja     8051b2b <_IO_stdin_used+0x747>
outsb  %ds:(%si),(%dx)
jne    8051b2f <_IO_stdin_used+0x74b>
outsl  %ds:(%esi),(%dx)
jb     8051b6b <_IO_stdin_used+0x787>
das
addr16
gs
je     8051b71 <_IO_stdin_used+0x78d>
gs
insb   (%dx),%es:(%edi)
jo     8051b3c <_IO_stdin_used+0x758>
or     %ds:(%eax),%al
push   %edx
gs
jo     8051b83 <_IO_stdin_used+0x79f>
jb     8051b8a <_IO_stdin_used+0x7a6>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    8051b8c <_IO_stdin_used+0x7a8>
popa
je     8051b8c <_IO_stdin_used+0x7a8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 8051b4b <_IO_stdin_used+0x767>
je     8051b9c <_IO_stdin_used+0x7b8>
and    %bh,(%eax,%ebp,2)
je     8051ba6 <_IO_stdin_used+0x7c2>
jo     8051b6e <_IO_stdin_used+0x78a>
das
das
je     8051baa <_IO_stdin_used+0x7c6>
popa
outsb  %ds:(%esi),(%dx)
jae    8051ba8 <_IO_stdin_used+0x7c4>
popa
je     8051ba8 <_IO_stdin_used+0x7c4>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     8051bb5 <_IO_stdin_used+0x7d1>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     8051bb3 <_IO_stdin_used+0x7cf>
das
je     8051bb4 <_IO_stdin_used+0x7d0>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     8051b7c <_IO_stdin_used+0x798>
arpl   %bp,0x6d(%edi)
jo     8051bcd <_IO_stdin_used+0x7e9>
gs
je     8051bc9 <_IO_stdin_used+0x7e5>
and    %ah,0x63(%edi,%ebp,2)
jne    8051bd7 <_IO_stdin_used+0x7f3>
outsb  %gs:(%esi),(%dx)
je     8051bcf <_IO_stdin_used+0x7eb>
je     8051bd9 <_IO_stdin_used+0x7f5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     8051beb <_IO_stdin_used+0x807>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     8051be7 <_IO_stdin_used+0x803>
jne    8051bf8 <_IO_stdin_used+0x814>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
push   %esp
jb     8051c18 <_IO_stdin_used+0x834>
and    %ah,(%edi)
and    $0x2f2e2073,%eax
and    $0x74202773,%eax
outsl  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051c18 <_IO_stdin_used+0x834>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %ah,%gs:0xa2e73
add    %al,(%eax)
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
addr16
gs
je     8051bf2 <_IO_stdin_used+0x80e>
popa
je     8051c49 <_IO_stdin_used+0x865>
jb     8051c40 <_IO_stdin_used+0x85c>
bound  %esi,0x74(%ebp)
gs
jae    8051bfd <_IO_stdin_used+0x819>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x28000073
sub    %dh,0x74(%ebx)
popa
je     8051c60 <_IO_stdin_used+0x87c>
jae    8051c16 <_IO_stdin_used+0x832>
and    %bh,0x4d52203d
pop    %edi
dec    %edi
dec    %ebx
and    %bh,0x20(%esp,%edi,2)
sub    %dh,0x74(%ebx)
popa
je     8051c75 <_IO_stdin_used+0x891>
jae    8051c2b <_IO_stdin_used+0x847>
and    %bh,0x4d52203d
pop    %edi
push   %ebp
push   %ebx
inc    %ebp
push   %edx
pop    %edi
inc    %esp
inc    %ebp
inc    %ebx
dec    %esp
dec    %ecx
dec    %esi
inc    %ebp
inc    %esp
and    %bh,0x20(%esp,%edi,2)
sub    %dh,0x74(%ebx)
popa
je     8051c95 <_IO_stdin_used+0x8b1>
jae    8051c4b <_IO_stdin_used+0x867>
and    %bh,0x4d52203d
pop    %edi
inc    %ebp
push   %edx
push   %edx
dec    %edi
push   %edx
sub    %eax,(%eax)
and    $0x72203a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051c9f <_IO_stdin_used+0x8bb>
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x72(%ecx)
addr16 jne 8051cb1 <_IO_stdin_used+0x8cd>
outsb  %gs:(%esi),(%dx)
je     8051cbb <_IO_stdin_used+0x8d7>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8051cb9 <_IO_stdin_used+0x8d5>
jbe    8051cb7 <_IO_stdin_used+0x8d3>
insb   (%dx),%es:(%edi)
jns    8051c94 <_IO_stdin_used+0x8b0>
and    %al,(%eax)
or     0x65(%edx),%dl
jo     8051ccb <_IO_stdin_used+0x8e7>
jb     8051cd2 <_IO_stdin_used+0x8ee>
and    %ah,0x75622073
addr16 jae 8051c87 <_IO_stdin_used+0x8a3>
je     8051cd8 <_IO_stdin_used+0x8f4>
and    %ah,0x62000a73
jne    8051cd8 <_IO_stdin_used+0x8f4>
sub    $0x65726f63,%eax
jne    8051cec <_IO_stdin_used+0x908>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     8051cea <_IO_stdin_used+0x906>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    8051cd4 <_IO_stdin_used+0x8f0>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     8051d05 <_IO_stdin_used+0x921>
jne    8051d16 <_IO_stdin_used+0x932>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
das
jne    8051d20 <_IO_stdin_used+0x93c>
jb     8051cde <_IO_stdin_used+0x8fa>
jae    8051d19 <_IO_stdin_used+0x935>
popa
jb     8051d19 <_IO_stdin_used+0x935>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x746e692d
gs
jb     8051d25 <_IO_stdin_used+0x941>
arpl   %si,0x76(%ecx,%ebp,2)
add    %cl,%gs:0x69(%edx)
insl   (%dx),%es:(%edi)
and    %cl,0x65(%ebp)
jns    8051d37 <_IO_stdin_used+0x953>
jb     8051d3d <_IO_stdin_used+0x959>
outsb  %ds:(%esi),(%dx)
add    %dl,0x69(%bp,%si)
arpl   %bp,0x61(%eax)
jb     8051d42 <_IO_stdin_used+0x95e>
and    %cl,0x2e(%ebp)
and    %dl,0x74(%ebx)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %al,0x76(%ecx,%eiz,2)
imul   $0x654b6361,0x4d(%eax,%eiz,1),%esp
outsb  %ds:(%esi),(%dx)
jp     8051d62 <_IO_stdin_used+0x97e>
add    %dl,%gs:0x61(%eax)
jne    8051d6b <_IO_stdin_used+0x987>
and    %dl,0x75(%edx)
bound  %ebp,0x6e(%ecx)
add    %dh,0x6d(%edx)
add    %ah,0x69(%esi,%eiz,2)
jb     8051d84 <_IO_stdin_used+0x9a0>
dec    %ecx
push   %edx
add    %ch,0x69(%ebp)
jae    8051d88 <_IO_stdin_used+0x9a4>
imul   $0x65706f20,0x67(%esi),%ebp
jb     8051d7f <_IO_stdin_used+0x99b>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x72(%ebx)
arpl   %bp,(%edi)
jb     8051d94 <_IO_stdin_used+0x9b0>
arpl   %ax,%cs:(%eax)
and    $0x72203a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051d99 <_IO_stdin_used+0x9b5>
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x72(%ecx)
addr16 jne 8051dab <_IO_stdin_used+0x9c7>
outsb  %gs:(%esi),(%dx)
je     8051db5 <_IO_stdin_used+0x9d1>
aas
and    %al,(%eax)
outsb  %ds:(%esi),(%dx)
gs
jbe    8051dae <_IO_stdin_used+0x9ca>
jb     8051d4b <_IO_stdin_used+0x967>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
add    %ch,%gs:0x6e(%edi)
arpl   %sp,0x0(%ebp)
jns    8051dbf <_IO_stdin_used+0x9db>
jae    8051d5c <_IO_stdin_used+0x978>
outsw  %ds:(%esi),(%dx)
jb     8051dc3 <_IO_stdin_used+0x9df>
add    %ch,%gs:0x6e(%edi)
gs
sub    $0x656c6966,%eax
sub    $0x74737973,%eax
gs
insl   (%dx),%es:(%edi)
add    %ch,0x6f(%esi)
sub    $0x73657270,%eax
gs
jb     8051df2 <_IO_stdin_used+0xa0e>
gs
sub    $0x746f6f72,%eax
add    %ch,0x73657270
jne    8051df7 <_IO_stdin_used+0xa13>
gs
sub    $0x75706e69,%eax
je     8051dbf <_IO_stdin_used+0x9db>
je     8051e08 <_IO_stdin_used+0xa24>
jns    8051d96 <_IO_stdin_used+0x9b2>
jb     8051dfd <_IO_stdin_used+0xa19>
arpl   %si,0x72(%ebp)
jae    8051e06 <_IO_stdin_used+0xa22>
jbe    8051e04 <_IO_stdin_used+0xa20>
add    %ah,0x72(%ecx,%ebp,2)
add    %dh,0x65(%esi)
jb     8051e0a <_IO_stdin_used+0xa26>
outsl  %ds:(%esi),(%dx)
jae    8051e10 <_IO_stdin_used+0xa2c>
add    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     8051db1 <_IO_stdin_used+0x9cd>
jbe    8051e18 <_IO_stdin_used+0xa34>
jb     8051e28 <_IO_stdin_used+0xa44>
imul   $0x0,0x6e(%edi),%ebp
add    %al,(%eax)
add    %al,(%eax)
insl   (%dx),%es:(%edi)
popa
imul   $0x0,0x0(%esi),%ebp
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,0x1d(%ebp)
add    $0x51d4b08,%eax
or     %cl,0x1d(%esi)
add    $0x51d5308,%eax
or     %cl,0x58080523(%ecx)
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pop    %esp
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
data16
add    %al,(%eax)
add    %bh,0x208051c(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x62000000(%eax)
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x1d720000,(%eax)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x75000000(%edx)
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
addl   $0x0,(%eax)
add    %al,0x8051d(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x1d960000(%eax,%eax,1)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
mov    0x8051d,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%eax,1)
add    %ah,0x805(%ebp,%ebx,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jbe    8051e8e <_IO_stdin_used+0xaaa>
add    %al,(%eax)
lods   %ds:(%esi),%al
sbb    $0x805,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jle    8051e9d <_IO_stdin_used+0xab9>
(bad)
pushl  0x8051d(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %dh,0x65(%edx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051f2b <_IO_stdin_used+0xb47>
and    %ah,%fs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051f0c <_IO_stdin_used+0xb28>
and    %ah,0x72000a73
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051f42 <_IO_stdin_used+0xb5e>
and    %ah,%fs:0x63000a73
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051f0a <_IO_stdin_used+0xb26>
jb     8051f51 <_IO_stdin_used+0xb6d>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051f55 <_IO_stdin_used+0xb71>
and    %ah,0x73250073
cmp    (%eax),%ah
jb     8051f5f <_IO_stdin_used+0xb7b>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051f63 <_IO_stdin_used+0xb7f>
and    %ah,0x73252073
aas
and    %al,(%eax)
data16
je     8051f7d <_IO_stdin_used+0xb99>
pop    %edi
jb     8051f72 <_IO_stdin_used+0xb8e>
popa
and    %ah,%fs:0x61(%esi)
imul   $0x6e616300,0x64(%ebp,%eiz,2),%ebp
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     8051f3e <_IO_stdin_used+0xb5a>
jb     8051f85 <_IO_stdin_used+0xba1>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051f89 <_IO_stdin_used+0xba5>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051f69 <_IO_stdin_used+0xb85>
and    %ah,0x72740073
popa
jbe    8051f9d <_IO_stdin_used+0xbb9>
jb     8051fad <_IO_stdin_used+0xbc9>
popa
insb   (%dx),%es:(%edi)
and    %ah,0x61(%esi)
imul   $0x7325203a,0x64(%ebp,%eiz,2),%ebp
add    %dh,0x72(%ebx)
arpl   %bp,(%edi)
jb     8051fb3 <_IO_stdin_used+0xbcf>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8051fb7 <_IO_stdin_used+0xbd3>
arpl   %ax,%cs:(%eax)
data16
je     8051fcb <_IO_stdin_used+0xbe7>
pop    %edi
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x61(%esi)
imul   $0x25000000,0x64(%ebp,%eiz,2),%ebp
jae    8051fa5 <_IO_stdin_used+0xbc1>
and    %ah,0x73(%ebp,%eiz,2)
arpl   %sp,0x6e(%ebp)
and    %ch,%fs:0x6e(%ecx)
je     8051fe7 <_IO_stdin_used+0xc03>
and    %dh,0x72(%edi)
imul   $0x746f7270,0x2d(%ebp,%eiz,2),%esi
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051fb3 <_IO_stdin_used+0xbcf>
and    $0x203f73,%eax
and    $0x64203a73,%eax
gs
jae    8052003 <_IO_stdin_used+0xc1f>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx)
je     8052017 <_IO_stdin_used+0xc33>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    8051fd3 <_IO_stdin_used+0xbef>
and    $0x203f73,%eax
and    $0x72203a73,%eax
gs
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8052027 <_IO_stdin_used+0xc43>
and    %dh,0x72(%edi)
imul   $0x746f7270,0x2d(%ebp,%eiz,2),%esi
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x73252073
aas
and    %al,(%eax)
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     8052058 <_IO_stdin_used+0xc74>
jne    805205e <_IO_stdin_used+0xc7a>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     8052057 <_IO_stdin_used+0xc73>
jb     8052055 <_IO_stdin_used+0xc71>
je     805205b <_IO_stdin_used+0xc77>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8052067 <_IO_stdin_used+0xc83>
jbe    8052065 <_IO_stdin_used+0xc81>
insb   (%dx),%es:(%edi)
jns    8052023 <_IO_stdin_used+0xc3f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73
add    %ch,0x74(%ecx)
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx,%eiz,2)
addr16
gs
jb     8052088 <_IO_stdin_used+0xca4>
jne    805208e <_IO_stdin_used+0xcaa>
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jo     8052087 <_IO_stdin_used+0xca3>
jb     8052085 <_IO_stdin_used+0xca1>
je     805208b <_IO_stdin_used+0xca7>
and    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    8052097 <_IO_stdin_used+0xcb3>
jbe    8052095 <_IO_stdin_used+0xcb1>
insb   (%dx),%es:(%edi)
jns    8052053 <_IO_stdin_used+0xc6f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x73282073
popa
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ecx)
and    %ah,0x2973
add    %dh,0x73(%ebp)
and    %ch,%gs:0x2d6f6e2d
jo     80520c5 <_IO_stdin_used+0xce1>
gs
jae    80520bb <_IO_stdin_used+0xcd7>
jb     80520ce <_IO_stdin_used+0xcea>
gs
sub    $0x746f6f72,%eax
and    %dh,0x20(%edi,%ebp,2)
outsl  %ds:(%esi),(%dx)
jbe    80520ca <_IO_stdin_used+0xce6>
jb     80520d9 <_IO_stdin_used+0xcf5>
imul   $0x73696874,0x20(%ebp,%eiz,2),%esp
and    %ah,0x61(%esi)
imul   $0x6566,0x61(%ebx,%esi,2),%ebp
add    %al,(%eax)
jae    80520e9 <_IO_stdin_used+0xd05>
imul   $0x20676e69,0x70(%eax),%esi
and    $0x73202c73,%eax
imul   $0x74692065,0x63(%esi),%ebp
daa
jae    80520b4 <_IO_stdin_used+0xcd0>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x20(%ecx)
imul   $0x6e657265,%fs:0x66(%esi),%esp
je     80520c3 <_IO_stdin_used+0xcdf>
fs
gs
jbe    8052110 <_IO_stdin_used+0xd2c>
arpl   %sp,0x0(%ebp)
add    %al,(%eax)
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
inc    %ebx
imul   $0x72616c75,0x63(%edx),%esi
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    80520e8 <_IO_stdin_used+0xd04>
jae    805213e <_IO_stdin_used+0xd5a>
jb     8052141 <_IO_stdin_used+0xd5d>
arpl   %si,0x72(%ebp,%esi,2)
gs or  %cs:%gs:0x69(%eax,%ebp,2),%dl
jae    80520f8 <_IO_stdin_used+0xd14>
popa
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8052152 <_IO_stdin_used+0xd6e>
and    %ah,0x65(%ebx)
jb     8052157 <_IO_stdin_used+0xd73>
popa
imul   $0x656d2079,0x6c(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
jae    805210f <_IO_stdin_used+0xd2b>
je     8052159 <_IO_stdin_used+0xd75>
popa
je     8052114 <_IO_stdin_used+0xd30>
jns    8052165 <_IO_stdin_used+0xd81>
jne    8052118 <_IO_stdin_used+0xd34>
push   $0x20657661
popa
and    %ah,0x6f(%ebx)
jb     8052175 <_IO_stdin_used+0xd91>
jne    8052175 <_IO_stdin_used+0xd91>
je     805216c <_IO_stdin_used+0xd88>
and    %ah,%fs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x79(%ebx)
jae    8052186 <_IO_stdin_used+0xda2>
gs
insl   (%dx),%es:(%edi)
or     %cs:0x4f(%esi),%cl
push   %esp
dec    %ecx
inc    %esi
pop    %ecx
and    %bl,0x4f(%ecx)
push   %ebp
push   %edx
and    %dl,0x59(%ebx)
push   %ebx
push   %esp
inc    %ebp
dec    %ebp
and    %cl,0x41(%ebp)
dec    %esi
inc    %ecx
inc    %edi
inc    %ebp
push   %edx
or     %cs:0x65(%eax,%ebp,2),%dl
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     80521a6 <_IO_stdin_used+0xdc2>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%si)
jb     80521a9 <_IO_stdin_used+0xdc5>
arpl   %si,0x72(%edi,%ebp,2)
jns    805216a <_IO_stdin_used+0xd86>
imul   $0x74726170,0x20(%ebx),%esi
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x79(%ebx)
arpl   %bp,0x3a(%ebp,%eiz,2)
or     (%eax),%ah
and    %ah,0xa73
add    %dh,0x6e(%ebp)
gs
js     80521dd <_IO_stdin_used+0xdf9>
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ah,0x61(%esi)
imul   $0x66203a65,0x72(%ebp,%esi,2),%ebp
je     80521f2 <_IO_stdin_used+0xe0e>
pop    %edi
imul   $0x64253d6f,0x66(%esi),%ebp
cmp    (%eax),%ah
and    $0x6c700a73,%eax
gs
popa
jae    80521f7 <_IO_stdin_used+0xe13>
and    %dh,0x65(%edx)
jo     8052206 <_IO_stdin_used+0xe22>
jb     805220d <_IO_stdin_used+0xe29>
and    %dh,0x20(%edi,%ebp,2)
and    $0x28280073,%eax
jae    80521cd <_IO_stdin_used+0xde9>
and    %bh,0x4d52203d
pop    %edi
dec    %edi
dec    %ebx
and    %bh,0x20(%esp,%edi,2)
sub    %dh,0x29(%ebx)
and    %bh,0x4d52203d
pop    %edi
push   %ebp
push   %ebx
inc    %ebp
push   %edx
pop    %edi
inc    %esp
inc    %ebp
inc    %ebx
dec    %esp
dec    %ecx
dec    %esi
inc    %ebp
inc    %esp
and    %bh,0x20(%esp,%edi,2)
sub    %dh,0x29(%ebx)
and    %bh,0x4d52203d
pop    %edi
inc    %ebp
push   %edx
push   %edx
dec    %edi
push   %edx
sub    %eax,(%eax)
add    %al,(%eax)
add    %ah,0x80804a7(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
enter  $0x4a6,$0x8
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
mov    0x500804a7,%al
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
js     80521a3 <_IO_stdin_used+0xdbf>
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
mov    0x500804a7,%al
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %eax
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
jb     8052287 <_IO_stdin_used+0xea3>
add    %bh,(%eax)
xor    %cs:(%ecx),%dh
add    %ch,0x6e(%ecx)
jbe    8052285 <_IO_stdin_used+0xea1>
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     8052251 <_IO_stdin_used+0xe6d>
and    $0x6f662073,%eax
jb     8052258 <_IO_stdin_used+0xe74>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    80522b1 <_IO_stdin_used+0xecd>
jne    80522b7 <_IO_stdin_used+0xed3>
and    %ah,0x72(%ecx)
addr16 jne 80522b7 <_IO_stdin_used+0xed3>
outsb  %gs:(%esi),(%dx)
je     805226e <_IO_stdin_used+0xe8a>
and    $0x6f662073,%eax
jb     8052275 <_IO_stdin_used+0xe91>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     80522da <_IO_stdin_used+0xef6>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x732520
sub    $0x20,%al
and    $0x72650073,%eax
jb     80522ed <_IO_stdin_used+0xf09>
jb     80522a0 <_IO_stdin_used+0xebc>
arpl   %bp,0x73(%edi,%ebp,2)
imul   $0x6c696620,0x67(%esi),%ebp
add    %ah,%gs:0x25203a73
jae    8052294 <_IO_stdin_used+0xeb0>
ja     8052308 <_IO_stdin_used+0xf24>
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     80522a0 <_IO_stdin_used+0xebc>
jb     8052307 <_IO_stdin_used+0xf23>
addr16 jne 8052311 <_IO_stdin_used+0xf2d>
popa
jb     80522c8 <_IO_stdin_used+0xee4>
gs
insl   (%dx),%es:(%edi)
jo     8052320 <_IO_stdin_used+0xf3c>
jns    80522ce <_IO_stdin_used+0xeea>
imul   $0x6572,0x0(%ebp,%eiz,2),%bp
addr16 jne 8052324 <_IO_stdin_used+0xf40>
popa
jb     80522db <_IO_stdin_used+0xef7>
imul   $0x6964,0x0(%ebp,%eiz,2),%bp
jb     8052329 <_IO_stdin_used+0xf45>
arpl   %si,0x72(%edi,%ebp,2)
jns    80522ca <_IO_stdin_used+0xee6>
bound  %ebp,0x63(%edi,%ebp,2)
imul   $0x73,(%eax),%esp
jo     8052338 <_IO_stdin_used+0xf54>
arpl   %bp,0x61(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %ah,%gs:0x68(%ebx)
popa
jb     8052343 <_IO_stdin_used+0xf5f>
arpl   %si,0x72(%ebp,%eiz,2)
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
add    %ah,%gs:0x69(%esi)
outsw  %ds:(%esi),(%dx)
add    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
add    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     805230e <_IO_stdin_used+0xf2a>
ja     8052375 <_IO_stdin_used+0xf91>
imul   $0x6c696620,0x64(%edx),%esi
add    %al,%gs:(%eax)
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 8052383 <_IO_stdin_used+0xf9f>
xor    %bl,0x20(%ebp)
ja     805238e <_IO_stdin_used+0xfaa>
jae    805234f <_IO_stdin_used+0xf6b>
jo     8052392 <_IO_stdin_used+0xfae>
jae    80523a6 <_IO_stdin_used+0xfc2>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    80523a3 <_IO_stdin_used+0xfbf>
push   $0x206e6120
gs
js     80523a9 <_IO_stdin_used+0xfc5>
arpl   %sp,(%eax)
jae    80523c1 <_IO_stdin_used+0xfdd>
jae    80523be <_IO_stdin_used+0xfda>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2700af(%ecx)
and    (%eax),%al
mov    0xe2006507,%eax
sbbb   $0x69,0x6c006000(%eax)
je     80523de <_IO_stdin_used+0xffa>
jb     80523dc <_IO_stdin_used+0xff8>
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    8052402 <_IO_stdin_used+0x101e>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    80523f8 <_IO_stdin_used+0x1014>
add    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
mov    $0x980804b6,%eax
mov    $0xbcc80804,%esp
add    $0x8,%al
mov    %bh,-0x4437f7fc(%ebx)
add    $0x8,%al
clc
mov    $0xbc200804,%ebx
add    $0x8,%al
and    %bh,0x4bc2008(%esp,%eax,1)
or     %al,%al
mov    $0xbab80804,%ecx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xba380804,%edx
add    $0x8,%al
cwtl
mov    $0xb9b80804,%ecx
add    $0x8,%al
mov    $0xb9,%al
add    $0x8,%al
test   $0xb9,%al
add    $0x8,%al
mov    0x700804b9,%al
mov    $0xbab80804,%ecx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xbab80804,%edx
add    $0x8,%al
mov    $0xb80804ba,%eax
mov    $0xb8e90804,%edx
add    $0x8,%al
jmp    f10d2925 <optarg+0xe907c721>
mov    $0xb8e10804,%eax
add    $0x8,%al
jmp    600d2931 <optarg+0x5807c72d>
mov    $0xb8e90804,%eax
add    $0x8,%al
push   $0xe90804ba
mov    $0xb8e90804,%eax
add    $0x8,%al
jmp    600d2949 <optarg+0x5807c745>
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
jmp    f10d298d <optarg+0xe907c789>
mov    $0xb8e90804,%eax
add    $0x8,%al
jmp    b00d2999 <optarg+0xa807c795>
mov    $0x4,%bh
or     %bh,0x580804ba(%eax)
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
jmp    500d2a0d <optarg+0x4807c809>
mov    $0xb8580804,%edx
add    $0x8,%al
jmp    600d2a19 <optarg+0x5807c815>
mov    $0xb8e90804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
pop    %eax
mov    $0xb8580804,%eax
add    $0x8,%al
sarb   $0x4,-0x4716f7fc(%eax)
or     %al,%al
mov    $0xb8e10804,%eax
add    $0x8,%al
loopne 80525a0 <_IO_stdin_used+0x11bc>
add    $0x8,%al
loopne 80525a4 <_IO_stdin_used+0x11c0>
add    $0x8,%al
js     80525a8 <_IO_stdin_used+0x11c4>
add    $0x8,%al
loopne 80525ac <_IO_stdin_used+0x11c8>
add    $0x8,%al
js     80525b0 <_IO_stdin_used+0x11cc>
add    $0x8,%al
loopne 80525b4 <_IO_stdin_used+0x11d0>
add    $0x8,%al
js     80525b8 <_IO_stdin_used+0x11d4>
add    $0x8,%al
js     80525bc <_IO_stdin_used+0x11d8>
add    $0x8,%al
js     80525c0 <_IO_stdin_used+0x11dc>
add    $0x8,%al
js     80525c4 <_IO_stdin_used+0x11e0>
add    $0x8,%al
js     80525c8 <_IO_stdin_used+0x11e4>
add    $0x8,%al
js     80525cc <_IO_stdin_used+0x11e8>
add    $0x8,%al
js     80525d0 <_IO_stdin_used+0x11ec>
add    $0x8,%al
js     80525d4 <_IO_stdin_used+0x11f0>
add    $0x8,%al
js     80525d8 <_IO_stdin_used+0x11f4>
add    $0x8,%al
js     80525dc <_IO_stdin_used+0x11f8>
add    $0x8,%al
js     80525e0 <_IO_stdin_used+0x11fc>
add    $0x8,%al
js     80525e4 <_IO_stdin_used+0x1200>
add    $0x8,%al
js     80525e8 <_IO_stdin_used+0x1204>
add    $0x8,%al
js     80525ec <_IO_stdin_used+0x1208>
add    $0x8,%al
js     80525f0 <_IO_stdin_used+0x120c>
add    $0x8,%al
js     80525f4 <_IO_stdin_used+0x1210>
add    $0x8,%al
js     80525f8 <_IO_stdin_used+0x1214>
add    $0x8,%al
js     80525fc <_IO_stdin_used+0x1218>
add    $0x8,%al
js     8052600 <_IO_stdin_used+0x121c>
add    $0x8,%al
js     8052604 <_IO_stdin_used+0x1220>
add    $0x8,%al
js     8052608 <_IO_stdin_used+0x1224>
add    $0x8,%al
js     805260c <_IO_stdin_used+0x1228>
add    $0x8,%al
js     8052610 <_IO_stdin_used+0x122c>
add    $0x8,%al
js     8052614 <_IO_stdin_used+0x1230>
add    $0x8,%al
js     8052618 <_IO_stdin_used+0x1234>
add    $0x8,%al
js     805261c <_IO_stdin_used+0x1238>
add    $0x8,%al
js     8052620 <_IO_stdin_used+0x123c>
add    $0x8,%al
loopne 8052624 <_IO_stdin_used+0x1240>
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dh,0x23(%ebp)
add    $0x5237d08,%eax
or     %al,0x53080523(%ebx)
pop    %ds
add    $0x5239008,%eax
or     %bl,-0x4af7fadd(%eax)
sbb    $0x5,%al
or     %bl,0x80523(%edi)
add    %al,(%eax)
add    %ah,0x25282073
jae    80526f4 <_IO_stdin_used+0x1310>
and    %ah,0x25000a73
jae    80526f3 <_IO_stdin_used+0x130f>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     8052747 <_IO_stdin_used+0x1363>
je     8052754 <_IO_stdin_used+0x1370>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     8052757 <_IO_stdin_used+0x1373>
je     8052764 <_IO_stdin_used+0x1380>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     805276e <_IO_stdin_used+0x138a>
je     805277b <_IO_stdin_used+0x1397>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052740 <_IO_stdin_used+0x135c>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     8052792 <_IO_stdin_used+0x13ae>
jb     8052799 <_IO_stdin_used+0x13b5>
and    %ah,0x75(%edx)
addr16 jae 805274b <_IO_stdin_used+0x1367>
je     805279c <_IO_stdin_used+0x13b8>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    80527a1 <_IO_stdin_used+0x13bd>
and    %al,0x50(%edi)
dec    %esp
jbe    8052775 <_IO_stdin_used+0x1391>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     80527c4 <_IO_stdin_used+0x13e0>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     805277a <_IO_stdin_used+0x1396>
insb   (%dx),%es:(%edi)
popa
je     80527c3 <_IO_stdin_used+0x13df>
jb     8052780 <_IO_stdin_used+0x139c>
cmp    $0x68,%al
je     80527d8 <_IO_stdin_used+0x13f4>
jo     80527a0 <_IO_stdin_used+0x13bc>
das
das
outsb  %ds:(%si),(%dx)
jne    805279a <_IO_stdin_used+0x13b6>
outsl  %ds:(%esi),(%dx)
jb     80527d6 <_IO_stdin_used+0x13f2>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 80527e8 <_IO_stdin_used+0x1404>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    80527a9 <_IO_stdin_used+0x13c5>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     805280d <_IO_stdin_used+0x1429>
popa
jb     80527fe <_IO_stdin_used+0x141a>
cmp    (%eax),%ah
jns    805280c <_IO_stdin_used+0x1428>
jne    80527bf <_IO_stdin_used+0x13db>
popa
jb     8052807 <_IO_stdin_used+0x1423>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     8052827 <_IO_stdin_used+0x1443>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     8052831 <_IO_stdin_used+0x144d>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     805284e <_IO_stdin_used+0x146a>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     805284d <_IO_stdin_used+0x1469>
outsb  %ds:(%esi),(%dx)
je     805280b <_IO_stdin_used+0x1427>
jo     8052852 <_IO_stdin_used+0x146e>
jb     805285c <_IO_stdin_used+0x1478>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805286c <_IO_stdin_used+0x1488>
je     8052879 <_IO_stdin_used+0x1495>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805283e <_IO_stdin_used+0x145a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805288c <_IO_stdin_used+0x14a8>
je     8052899 <_IO_stdin_used+0x14b5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805285e <_IO_stdin_used+0x147a>
and    %ah,0x250a2c73
jae    8052866 <_IO_stdin_used+0x1482>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528b0 <_IO_stdin_used+0x14cc>
je     80528bd <_IO_stdin_used+0x14d9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052882 <_IO_stdin_used+0x149e>
and    %ah,0x250a2c73
jae    805288a <_IO_stdin_used+0x14a6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     80528d8 <_IO_stdin_used+0x14f4>
je     80528e5 <_IO_stdin_used+0x1501>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528aa <_IO_stdin_used+0x14c6>
and    %ah,0x250a2c73
jae    80528b2 <_IO_stdin_used+0x14ce>
and    %ah,0x25202c73
jae    80528ba <_IO_stdin_used+0x14d6>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052904 <_IO_stdin_used+0x1520>
je     8052911 <_IO_stdin_used+0x152d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    80528d6 <_IO_stdin_used+0x14f2>
and    %ah,0x250a2c73
jae    80528de <_IO_stdin_used+0x14fa>
and    %ah,0x25202c73
jae    80528e6 <_IO_stdin_used+0x1502>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052934 <_IO_stdin_used+0x1550>
je     8052941 <_IO_stdin_used+0x155d>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    8052906 <_IO_stdin_used+0x1522>
and    %ah,0x250a2c73
jae    805290e <_IO_stdin_used+0x152a>
and    %ah,0x25202c73
jae    8052916 <_IO_stdin_used+0x1532>
and    %ah,0x250a2c73
jae    805291e <_IO_stdin_used+0x153a>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     8052968 <_IO_stdin_used+0x1584>
je     8052975 <_IO_stdin_used+0x1591>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805293a <_IO_stdin_used+0x1556>
and    %ah,0x250a2c73
jae    8052942 <_IO_stdin_used+0x155e>
and    %ah,0x25202c73
jae    805294a <_IO_stdin_used+0x1566>
and    %ah,0x250a2c73
jae    8052952 <_IO_stdin_used+0x156e>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
adc    %cl,%ah
add    $0x8,%al
sbb    %cl,%ah
add    $0x8,%al
pop    %eax
int3
add    $0x8,%al
mov    0xf80804cc,%al
int3
add    $0x8,%al
push   %eax
int    $0x4
or     %bh,0x300804cd(%eax)
into
add    $0x8,%al
ror    %dl
add    $0x8,%al
push   $0x430804cb
outsl  %ds:(%esi),(%dx)
jo     80529dd <_IO_stdin_used+0x15f9>
jb     80529cf <_IO_stdin_used+0x15eb>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     80529f1 <_IO_stdin_used+0x160d>
popa
jb     80529e2 <_IO_stdin_used+0x15fe>
and    %al,0x6f(%esi)
jne    80529f0 <_IO_stdin_used+0x160c>
fs
popa
je     80529ef <_IO_stdin_used+0x160b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     8052a0e <_IO_stdin_used+0x162a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     8052a0c <_IO_stdin_used+0x1628>
je     8052a1b <_IO_stdin_used+0x1637>
arpl   %ax,%cs:(%eax)
sub    %ch,(%edx)
pop    %edi
pop    %edi
gs
jb     8052a24 <_IO_stdin_used+0x1640>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x29292820,0x6e(%edi),%ebp
and    %ah,(%ecx)
cmp    $0x323220,%eax
js     8052a30 <_IO_stdin_used+0x164c>
je     8052a3f <_IO_stdin_used+0x165b>
pop    %edi
outsl  %ds:(%esi),(%dx)
jo     8052a35 <_IO_stdin_used+0x1651>
outsb  %ds:(%esi),(%dx)
add    %ch,(%esi)
add    %al,%cs:(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax)
add    %al,(%eax)
add    %al,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x6c637963,0x2f(%edx),%esp
gs
sub    $0x63656863,%eax
imul   $0x63,(%esi),%ebp
add    %dh,0x74(%ebx)
popa
je     8052a8c <_IO_stdin_used+0x16a8>
sub    $0x67616d3e,%eax
imul   $0x39203d3d,0x20(%ebx),%esp
cmp    %dh,(%edx)
aaa
cmp    %dh,(%esi)
xor    (%eax),%al
arpl   %di,0x63(%ecx)
insb   (%dx),%es:(%edi)
gs
pop    %edi
arpl   %bp,0x65(%eax)
arpl   %bp,0x0(%ebx)
and    (%eax),%esp
outsb  %gs:(%esi),(%dx)
je     8052abe <_IO_stdin_used+0x16da>
imul   $0x2020203a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
cmp    (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
insl   (%dx),%es:(%edi)
popa
js     8052a9a <_IO_stdin_used+0x16b6>
bound  %esi,0x63(%ebp)
imul   $0x20,0x74(%ebp),%esp
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 8052aef <_IO_stdin_used+0x170b>
cmp    (%eax),%ah
and    $0xa756c,%eax
add    %al,(%eax)
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %dh,0x73(%ebp)
gs cmp %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,0x2820756c
and    $0x2566322e,%eax
and    $0xa29,%eax
cmpb   $0xcd,(%edi)
int3
dec    %esp
aas
hlt
std
mov    $0x3f,%ah
add    %al,(%eax)
add    %al,(%eax)
int    $0xcc
int3
cmp    $0x3f666666,%eax
int    $0xcc
mov    %?,(%edi)
add    %al,(%eax)
enter  $0x42,$0x0
orb    $0x75,0x2f(%edi)
jae    8052b52 <_IO_stdin_used+0x176e>
das
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
rolb   (%eax,%eax,1)
add    %bl,0x8000000(%ecx)
fs
(bad)
(bad)
in     (%dx),%al
add    $0x0,%al
add    %bl,0x30ffff68(%eax)
add    $0x6ee80000,%eax
(bad)
call   *(%eax)
add    $0x72880000,%eax
(bad)
call   *0x5(%eax)
add    %al,(%eax)
enter  $0xff74,$0xff
aam    $0x5
add    %al,(%eax)
push   $0xffff75
push   %es
add    %al,(%eax)
clc
jns    8052b46 <_IO_stdin_used+0x1762>
lcall  *0x6(%eax)
add    %al,(%eax)
mov    %al,0x698ffff(%ecx)
add    %al,(%eax)
test   $0x81,%al
(bad)
pushl  -0x57fffffa(%eax)
(bad)
(bad)
decl   (%eax)
pop    %es
add    %al,(%eax)
dec    %eax
cmp    $0xffffffff,%edi
cmp    %al,(%edi)
add    %al,(%eax)
push   $0x8cffff84
pop    %es
add    %al,(%eax)
fadds  0x7ccff(%edi,%edi,8)
add    %ch,(%eax)
test   %edi,%edi
decl   (%eax)
or     %al,(%eax)
add    %bh,(%eax)
test   %edi,%edi
lcall  *(%eax,%ecx,1)
add    %al,(%eax)
push   $0x4cffff86
or     %al,(%eax)
add    %bh,-0x7a(%eax)
(bad)
jmp    *0x8(%eax)
add    %al,(%eax)
mov    %al,0x874ffff(%esi)
add    %al,(%eax)
pop    %eax
xchg   %edi,%edi
jmp    *-0x47fffff8(%eax)
xchg   %edi,%edi
inc    %eax
or     %al,(%eax)
add    %bh,%al
xchg   %edi,%edi
jmp    *%esp
or     %al,(%eax)
add    %ch,-0x77(%eax)
(bad)
decl   (%ecx,%ecx,1)
add    %al,(%eax)
sbb    %cl,0x94cffff(%edx)
add    %al,(%eax)
dec    %eax
mov    %bh,%bh
(bad)
js     8052bdb <_IO_stdin_used+0x17f7>
add    %al,(%eax)
cmp    %cl,0x9b0ffff(%ebx)
add    %al,(%eax)
push   $0xf4ffff95
or     %eax,(%eax)
add    %cl,(%eax)
xchg   %eax,%edi
(bad)
pushl  (%edx,%ecx,1)
add    %al,(%eax)
dec    %eax
xchg   %eax,%edi
(bad)
ljmp   *0xa(%eax)
add    %al,(%eax)
push   $0x7cffff97
or     (%eax),%al
add    %cl,-0x6f000069(%eax)
or     (%eax),%al
add    %cl,%al
xchg   %eax,%edi
(bad)
pushl  -0x68180000(%edx,%ecx,1)
(bad)
dec    %eax
or     (%eax),%al
add    %ch,(%eax)
cwtl
(bad)
(bad)
in     (%dx),%al
or     (%eax),%al
add    %cl,0x20ffff98(%eax)
or     (%eax),%eax
add    %ch,-0x67(%eax)
(bad)
lcall  *0x0(%ebx,%ecx,1)
add    %bl,0x74ffff99(%eax)
or     (%eax),%eax
add    %ch,(%eax)
lcall  $0x0,$0xba8ffff
dec    %eax
lcall  $0x0,$0xbbcffff
push   $0xd0ffff9a
or     (%eax),%eax
add    %cl,-0x1b000066(%eax)
or     (%eax),%eax
add    %ch,-0x7000066(%eax)
or     (%eax),%eax
add    %bl,%al
lcall  $0x0,$0xc18ffff
or     %bl,0xc38ffff(%ebx)
add    %al,(%eax)
cmp    %bl,0xc50ffff(%ebx)
add    %al,(%eax)
push   $0x68ffff9b
or     $0x0,%al
add    %bl,(%eax)
pushf
(bad)
decl   -0x63b80000(%esp,%ecx,1)
(bad)
jmp    *-0x63880000(%esp,%ecx,1)
(bad)
(bad)
mov    $0xa800000c,%esp
pushf
(bad)
call   *%esp
or     $0x0,%al
add    %bl,-0x63(%eax)
(bad)
(bad)
clc
or     $0x0,%al
add    %bl,0x10ffff9d(%eax)
or     $0x9dd80000,%eax
(bad)
ljmp   *(%eax)
or     $0x9e180000,%eax
(bad)
incl   0xd(%eax)
add    %al,(%eax)
cmp    %bl,0xd54ffff(%esi)
add    %al,(%eax)
pop    %eax
sahf
(bad)
ljmp   *0xd(%eax)
add    %al,(%eax)
js     8052c6c <_IO_stdin_used+0x1888>
(bad)
(bad)
jl     8052cdf <_IO_stdin_used+0x18fb>
add    %al,(%eax)
cwtl
sahf
(bad)
call   *-0x7fffff3(%eax)
sahf
(bad)
(bad)
mov    $0x6800000d,%esp
movsb  %ds:(%esi),%es:(%edi)
(bad)
lcall  *0xe(%eax)
add    %al,(%eax)
mov    $0x70ffffa4,%eax
push   %cs
add    %al,(%eax)
sbb    %ah,0xe94ffff(%ebp)
add    %al,(%eax)
pop    %eax
movsl  %ds:(%esi),%es:(%edi)
(bad)
ljmp   *-0x59f80000(%esi,%ecx,1)
(bad)
call   *%eax
push   %cs
add    %al,(%eax)
dec    %eax
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
(bad)
call   80052d23 <optarg+0x77ffcb1f>
cmpsb  %es:(%edi),%ds:(%esi)
(bad)
decl   (%edi,%ecx,1)
add    %al,(%eax)
test   $0xa6,%al
(bad)
pushl  (%eax)
sldt   (%eax)
mov    $0x44ffffa6,%eax
sldt   (%eax)
or     %ah,0xf74ffff(%edi)
add    %al,(%eax)
dec    %eax
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
jmp    *-0x57fffff1(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
call   *%eax
sldt   (%eax)
clc
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
push   %esp
sldt   (%eax)
sub    %ch,0x1014ffff(%eax)
add    %al,(%eax)
pop    %eax
test   $0xff,%al
pushl  (%eax)
adc    %al,(%eax)
add    %cl,0x50ffffa8(%eax)
adc    %al,(%eax)
add    %bh,0x70ffffa8(%eax)
adc    %al,(%eax)
add    %cl,(%eax)
test   $0x1084ffff,%eax
add    %al,(%eax)
js     8052d1f <_IO_stdin_used+0x193b>
(bad)
jmp    *-0x57fffff0(%eax)
test   $0x10b4ffff,%eax
add    %al,(%eax)
sbb    %ch,0x10d8ffff(%edx)
add    %al,(%eax)
js     8052d38 <_IO_stdin_used+0x1954>
(bad)
incl   (%ecx,%edx,1)
add    %al,(%eax)
test   $0xaa,%al
(bad)
lcall  *(%eax)
adc    %eax,(%eax)
add    %bh,(%eax)
stos   %eax,%es:(%edi)
(bad)
pushl  0x11(%eax)
add    %al,(%eax)
js     8052d51 <_IO_stdin_used+0x196d>
(bad)
jmp    *-0x57ffffef(%eax)
stos   %eax,%es:(%edi)
(bad)
(bad)
mov    $0xd8000011,%eax
stos   %eax,%es:(%edi)
(bad)
call   *%eax
adc    %eax,(%eax)
add    %bh,%al
stos   %eax,%es:(%edi)
(bad)
jmp    *%esp
adc    %eax,(%eax)
add    %ch,-0x54(%eax)
(bad)
lcall  *(%eax)
adc    (%eax),%al
add    %cl,-0x53(%eax)
(bad)
pushl  0x12(%eax)
add    %al,(%eax)
enter  $0xffad,$0xff
lods   %ds:(%esi),%al
adc    (%eax),%al
add    %cl,(%eax)
scas   %es:(%edi),%al
(bad)
(bad)
fcoms  (%edx)
add    %al,(%eax)
dec    %eax
scas   %es:(%edi),%al
(bad)
(bad)
cld
adc    (%eax),%al
add    %ch,0x38ffffae(%eax)
adc    (%eax),%eax
add    %cl,(%eax)
scas   %es:(%edi),%eax
(bad)
pushl  0x13(%eax)
add    %al,(%eax)
fdivs  0x13c8ffff(%eax)
add    %al,(%eax)
pop    %eax
mov    $0xff,%cl
(bad)
clc
adc    (%eax),%eax
add    %cl,%al
mov    $0xff,%cl
jmp    *(%esp,%edx,1)
add    %al,(%eax)
cmp    %dh,0x1454ffff(%edx)
add    %al,(%eax)
pop    %eax
mov    $0xff,%ah
call   *-0x4ac80000(%esp,%edx,1)
(bad)
incl   (%eax)
adc    $0xb6080000,%eax
(bad)
(bad)
cmp    $0x15,%al
add    %al,(%eax)
sub    %bh,0x15dcffff(%edi)
add    %al,(%eax)
test   $0xc2,%al
(bad)
decl   0x0(%esi,%edx,1)
add    %bh,(%eax)
(bad)
(bad)
incl   -0x33b80000(%esi,%edx,1)
(bad)
push   %esp
push   %ss
add    %al,(%eax)
mov    %cl,%ah
(bad)
call   *(%edi,%edx,1)
add    %al,(%eax)
call   a1052e2e <optarg+0x98ffcc2a>
pop    %ss
add    %al,(%eax)
pop    %eax
into
(bad)
call   *%eax
pop    %ss
add    %al,(%eax)
mov    %cl,%dh
(bad)
(bad)
call   10052e8c <optarg+0x7ffcc88>
iret
(bad)
incl   0x18(%eax)
add    %al,(%eax)
sub    %cl,%bh
(bad)
call   *0x0(%eax,%ebx,1)
add    %bl,(%eax)
sar    %bh
ljmp   *-0x2fa80000(%eax,%ebx,1)
(bad)
inc    %esp
sbb    %al,(%eax)
add    %ch,%al
sar    %bh
incl   (%eax)
sbb    %eax,(%eax)
add    %bh,%al
sar    %bh
call   *(%ecx,%ebx,1)
add    %al,(%eax)
or     %dl,%cl
(bad)
ljmp   *(%eax)
sbb    %eax,(%eax)
add    %bh,(%eax)
sar    %edi
decl   0x0(%ecx,%ebx,1)
add    %bh,%al
sar    %edi
(bad)
mov    $0xa8000019,%eax
sar    %cl,%bh
dec    %esp
sbb    %eax,(%eax)
add    %bh,0x20ffffd3(%eax)
sbb    (%eax),%al
add    %cl,%al
sar    %cl,%edi
pushl  (%edx,%ebx,1)
add    %al,(%eax)
fcom   %st(3)
(bad)
decl   0x1a(%eax)
add    %al,(%eax)
call   65052eb4 <optarg+0x5cffccb0>
sbb    (%eax),%al
add    %bh,(%eax)
aam    $0xff
incl   -0x67ffffe6(%eax)
aam    $0xff
(bad)
mov    $0xa800001a,%esp
aad    $0xff
(bad)
clc
sbb    (%eax),%al
add    %cl,(%eax)
(bad)
(bad)
incl   0x1b(%eax)
add    %al,(%eax)
dec    %eax
(bad)
(bad)
jmp    *0x1b(%eax)
add    %al,(%eax)
test   $0xd6,%al
(bad)
lcall  *-0x28f80000(%ebx,%ebx,1)
(bad)
call   *%esp
sbb    (%eax),%eax
add    %cl,0x10ffffd7(%eax)
sbb    $0x0,%al
add    %cl,%al
xlat   %ds:(%ebx)
(bad)
pushl  (%esp,%ebx,1)
add    %al,(%eax)
clc
xlat   %ds:(%ebx)
(bad)
decl   0x1c(%eax)
add    %al,(%eax)
cmp    %bl,%cl
(bad)
jmp    *-0x37ffffe4(%eax)
fcos
call   *%esp
sbb    $0x0,%al
add    %bl,0xcffffda(%eax)
sbb    $0xdc280000,%eax
(bad)
(bad)
jl     8052f6f <_IO_stdin_used+0x1b8b>
add    %al,(%eax)
clc
(bad)
(bad)
fcomps 0xde080000
(bad)
(bad)
in     (%dx),%al
sbb    $0xde480000,%eax
(bad)
call   *(%eax)
push   %ds
add    %al,(%eax)
mov    $0x50ffffdf,%eax
push   %ds
add    %al,(%eax)
call   6d052f58 <optarg+0x64ffcd54>
push   %ds
add    %al,(%eax)
clc
(bad)
(bad)
js     8052fa0 <_IO_stdin_used+0x1bbc>
add    %al,(%eax)
cmp    %ah,%al
(bad)
jmp    *-0x1f880000(%esi,%ebx,1)
(bad)
jmp    *%eax
push   %ds
add    %al,(%eax)
cmp    %ah,%ah
(bad)
jmp    *(%eax)
pop    %ds
add    %al,(%eax)
js     8052f82 <_IO_stdin_used+0x1b9e>
(bad)
(bad)
cmp    %bl,(%edi)
add    %al,(%eax)
test   $0xe4,%al
(bad)
call   *0x1f(%eax)
add    %al,(%eax)
call   95052f95 <optarg+0x8cffcd91>
pop    %ds
add    %al,(%eax)
mov    %ah,%ch
(bad)
call   *%esp
pop    %ds
add    %al,(%eax)
test   $0xe6,%al
(bad)
lcall  *(%eax,%eiz,1)
add    %al,(%eax)
or     %ch,%al
(bad)
decl   0x78000020(%eax)
call   28ca2fd1 <optarg+0x20c4cdcd>
add    %al,(%eax)
mov    %ch,%al
(bad)
(bad)
fsubs  (%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     8052ff3 <_IO_stdin_used+0x1c0f>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
adc    $0x5f,%al
(bad)
call   *0x4(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     8053013 <_IO_stdin_used+0x1c2f>
js     8053011 <_IO_stdin_used+0x1c2d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
sbb    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,%al
imul   $0x393ff,%edi,%edi
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
add    %al,(%eax)
add    %ah,0x63(%eax)
(bad)
lcall  *0x5(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x80,%eax
addb   $0x0,(%eax)
add    %dh,(%eax)
insl   (%dx),%es:(%edi)
(bad)
(bad)
aas
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
dec    %eax
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
sahf
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%ebx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
dec    %ebp
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %al,(%ecx,%eax,1)
add    %al,(%eax)
in     (%dx),%al
outsb  %ds:(%esi),(%dx)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %dl,0xa(%esi)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     0x0(%eax,%eax,1),%edx
add    %dh,(%eax)
add    %eax,(%eax)
add    %ah,0x6f(%eax)
(bad)
incl   0x4(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1b00e46
inc    %esp
add    (%edx),%cl
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
mov    %al,(%ecx)
add    %al,(%eax)
cwtl
jae    805316a <_IO_stdin_used+0x1d86>
incl   0x7(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff89,0x3500e43
add    $0xa,%al
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
enter  $0x1,$0x0
call   1c053127 <optarg+0x13ffcf23>
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %cl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ah,%al
add    %eax,(%eax)
add    %dh,%al
jp     80531c2 <_IO_stdin_used+0x1dde>
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
cmp    %al,(%edx)
add    %al,(%eax)
cwtl
jnp    805321a <_IO_stdin_used+0x1e36>
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     805323b <_IO_stdin_used+0x1e57>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %ch,0x2(%eax)
add    %al,(%eax)
or     %bh,-0x1(%edi,%edi,8)
push   %ds
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0xd4000002,%esp
jl     805329e <_IO_stdin_used+0x1eba>
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %bh,%ah
add    (%eax),%al
add    %al,0x4dffff(,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
cmp    %al,(%ebx)
add    %al,(%eax)
sbb    %bh,-0x1(%ebp)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
dec    %esp
add    (%eax),%eax
add    %dl,0x130ffff(,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
clc
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x49,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
jl     805335d <_IO_stdin_used+0x1f79>
add    %al,(%eax)
adc    $0x7e,%al
(bad)
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x10000003(%eax)
jle    8053372 <_IO_stdin_used+0x1f8e>
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ah,0x7e0c0000(%ebx,%eax,1)
(bad)
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
rolb   (%ebx)
add    %al,(%eax)
mov    $0x7e,%al
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,%al
add    (%eax),%eax
add    %dh,%al
jle    80533d2 <_IO_stdin_used+0x1fee>
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
adc    $0x4,%al
add    %al,(%eax)
or     $0x7f,%al
(bad)
jmp    *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %al,(%edx)
jo     805340d <_IO_stdin_used+0x2029>
push   %cs
add    $0x45,%al
or     0xa(%edi),%esp
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
cmp    $0x4,%al
add    %al,(%eax)
push   %esp
cmp    $0xff,%bh
lods   %ds:(%esi),%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
jl     805345e <_IO_stdin_used+0x207a>
add    %al,(%eax)
les    0x26ffff(%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
test   $0x4,%al
add    %al,(%eax)
enter  $0xff80,$0xff
loop   805348e <_IO_stdin_used+0x20aa>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %ah,%al
add    $0x0,%al
add    %al,0x2fffff81(%eax)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
and    $0x5,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    %edi,%edi
call   *0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %ah,0x0(%ebp,%eax,1)
add    %cl,%ah
mov    %?,%edi
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x27fffffb(%eax)
mov    %?,%edi
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x731c0000(%ebp,%eax,1)
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %al,%al
add    $0x8cf00000,%eax
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
in     $0x5,%al
add    %al,(%eax)
or     $0x8d,%al
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,%al
add    $0x8d180000,%eax
(bad)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
sbb    $0x6,%al
add    %al,(%eax)
xor    $0x8d,%al
(bad)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
push   %eax
push   %es
add    %al,(%eax)
pusha
(bad)
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %cl,-0x71fc0000(%esi,%eax,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
push   %es
add    %al,(%eax)
sbb    $0x8e,%al
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fadds  (%esi)
add    %al,(%eax)
js     8053648 <_IO_stdin_used+0x2264>
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,%ah
push   %es
add    %al,(%eax)
test   %cl,0x19ffff(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
nop
mov    %edi,%?
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%edi,%eax,1)
add    %al,(%eax)
pushf
mov    %edi,%?
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
sub    %al,(%edi)
add    %al,(%eax)
test   $0x8e,%al
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %cl,0x7(%eax)
add    %al,(%eax)
mov    $0x2cffff8e,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ch,0x7(%eax)
add    %al,(%eax)
enter  $0xff8e,$0xff
and    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%edi)
add    %ah,%al
mov    %edi,%?
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
cwtl
pop    %es
add    %al,(%eax)
clc
mov    %edi,%?
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    $0x84000007,%esp
(bad)
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
aam    $0x7
add    %al,(%eax)
pushf
(bad)
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
pop    %es
add    %al,(%eax)
mov    $0x8f,%ah
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
add    $0x8,%al
add    %al,(%eax)
int3
(bad)
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
sub    %cl,(%eax)
add    %al,(%eax)
pop    %eax
nop
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %eax
or     %al,(%eax)
add    %al,0x33ffff90(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
pop    %eax
or     %al,(%eax)
add    %ch,0x33ffff90(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
jo     8053856 <_IO_stdin_used+0x2472>
add    %al,(%eax)
rclb   0x19ffff(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
test   %cl,(%eax)
add    %al,(%eax)
fcoml  0x17ffff(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
cwtl
or     %al,(%eax)
add    %ch,%al
nop
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ch,-0x6f0c0000(%eax,%ecx,1)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %al,%al
or     %al,(%eax)
add    %al,(%eax)
xchg   %eax,%ecx
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,-0x7ff1bcfe(%ebx)
add    %eax,(%edx)
inc    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ebx),%eax
or     %al,-0x3d(%ebx)
push   %cs
add    $0x98,%al
add    %al,(%eax)
add    %ch,%ah
or     %al,(%eax)
add    %dh,(%ecx,%edx,4)
(bad)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
mov    %cl,(%ecx)
add    %al,(%eax)
or     %dl,0x4affff(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ah,0x40000009(%eax)
xchg   %eax,%esi
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
les    (%ecx),%ecx
add    %al,(%eax)
jl     805393c <_IO_stdin_used+0x2558>
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
fmull  (%ecx)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xchg   %eax,%esi
(bad)
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
xor    %dl,0x35ffff(%edi)
add    %al,(%eax)
add    %bl,0xe(%ebx)
adc    %bl,0xe(%ecx)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
sbb    %cl,(%edx)
add    %al,(%eax)
pop    %eax
xchg   %eax,%edi
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
cmp    $0xa,%al
add    %al,(%eax)
fs
xchg   %eax,%edi
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
pusha
or     (%eax),%al
add    %dh,-0x69(%eax)
(bad)
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
je     8053a5c <_IO_stdin_used+0x2678>
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xchg   %eax,%edi
(bad)
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
or     (%eax),%al
add    %cl,0x38ffff(%edi,%edx,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
rorb   (%edx)
add    %al,(%eax)
mov    0x5dffff97,%al
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
rclb   0x49ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
and    $0xb,%al
add    %al,(%eax)
cld
xchg   %eax,%edi
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %al,0x0(%ebx,%ecx,1)
add    %cl,(%eax,%ebx,4)
(bad)
jmp    *0x0
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
pusha
or     (%eax),%eax
add    %ah,(%eax)
cwtl
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %al,0x3000000b(%eax)
cwtl
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %ah,0x4000000b(%eax)
cwtl
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,(%eax)
add    %al,(%eax)
add    %dh,-0x67840000(%ebx,%ecx,1)
(bad)
jmp    *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,%al
or     (%eax),%eax
add    %dl,%al
cwtl
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ah,%ah
or     (%eax),%eax
add    %ch,%ah
cwtl
(bad)
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4502(%ebx)
add    0xe(%edx),%ah
or     %al,-0x3d(%ebx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
or     %cl,(%eax,%eax,1)
add    %bh,(%eax)
cltd
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,(%esp,%ecx,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
cltd
(bad)
ljmp   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %cl,0xc(%eax)
add    %al,(%eax)
mov    %bl,0x8cffff(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
mov    0xc000000c,%al
cltd
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x59,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     -0x3d(%ebx),%ecx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
rorb   (%eax,%eax,1)
add    %dl,%al
cltd
(bad)
ljmp   *0x0
inc    %ebx
push   %cs
and    %ch,0xe(%ecx)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
call   f0053cd5 <optarg+0xe7ffdad1>
cltd
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%eax)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
add    %cl,0x9a000000
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,-0x65f40000(,%ecx,1)
(bad)
jmp    *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x6f,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     -0x3d(%edx,%ecx,1),%edx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,0xd(%eax)
add    %al,(%eax)
dec    %eax
lcall  $0x0,$0xdfffff
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x71,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
dec    %esi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,-0x2ffffff3(%eax)
lcall  $0x0,$0x80ffff
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x6c,0x2300e43
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %bl,%ah
or     $0x9b140000,%eax
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xc(%esi,%ecx,1)
inc    %ecx
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     %cl,(%esi)
add    %al,(%eax)
sub    %bl,0x32ffff(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
sub    $0xe,%al
add    %al,(%eax)
inc    %esp
fwait
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ah,0xa(%ebx)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ecx),%ebx
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
push   $0x6800000e
fwait
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x45,(%ebx)
push   %cs
and    %ch,0xa(%edx)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%eax),%esp
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ah,-0x6ffffff2(%eax)
fwait
(bad)
dec    %ebp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffff96,0x2400e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
clc
push   %cs
add    %al,(%eax)
or     %bl,0x74ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
imul   $0xe,(%edx),%ecx
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ebx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
sub    %cl,(%edi)
add    %al,(%eax)
pop    %eax
popf
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4502(%ebx)
jge    8053f25 <_IO_stdin_used+0x2b41>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%ecx),%esp
or     %al,-0x3d(%esi)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
sldt   (%eax)
pushf
popf
(bad)
pushl  0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x48,(%ebx)
push   %cs
and    %al,(%edx)
dec    %esp
or     (%esi),%cl
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
test   %cl,(%edi)
add    %al,(%eax)
fcompl 0x21dffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1a00e46
push   %eax
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
les    (%edi),%ecx
add    %al,(%eax)
mov    $0xd1ffff9f,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%ebx),%bh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ebx),%esp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
xor    %dl,(%eax)
add    %al,(%eax)
xor    %ah,0xc7ffff(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
jnp    8054032 <_IO_stdin_used+0x2c4e>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
inc    %ebx
or     (%esi),%cl
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
pushf
add    %al,(%eax)
add    %ch,0x0(%eax,%edx,1)
add    %al,%ah
mov    0x919ffff,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1c00e46
push   $0x3
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jmp    8054092 <_IO_stdin_used+0x2cae>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
dec    %esp
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%ebx),%eax
rolb   %cl,(%ecx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
pop    %edi
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
insb   (%dx),%es:(%edi)
add    %al,(%eax)
add    %cl,(%ecx,%edx,1)
add    %al,(%eax)
inc    %esp
test   $0x37bffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x7f,0x3400e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
push   %ebx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
jl     805416b <_IO_stdin_used+0x2d87>
add    %al,(%eax)
push   %esp
lods   %ds:(%esi),%al
(bad)
incl   0x1(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    %al,%ah
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %dh,-0x52540000(%ecx,%edx,1)
(bad)
incl   0x8
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1a00e46
push   %es
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    80541da <_IO_stdin_used+0x2df6>
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%ebp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
and    $0x12,%al
add    %al,(%eax)
dec    %esp
mov    $0xff,%ch
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %dl,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%edx
add    $0x0,%al
add    %al,(%eax)
addb   $0x0,(%eax)
add    %al,0x0(%edx,%edx,1)
add    %ch,-0x1(%ebp,%esi,4)
call   *0x1(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff82,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%esi),%eax
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%esi),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
enter  $0x12,$0x0
dec    %eax
mov    $0xff,%dh
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%ebp),%bl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
xorb   $0x0,0x23ffff(%esi)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %bl,(%eax)
adc    (%eax),%eax
add    %bl,0x78ffffb6(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     805431f <_IO_stdin_used+0x2f3b>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x13(%eax)
add    %al,(%eax)
(bad)
mov    $0xff,%dh
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %al,-0x49340000(%ebx,%edx,1)
(bad)
jmp    *%ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff92,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebx),%edx
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
fcoml  (%ebx)
add    %al,(%eax)
fs
mov    $0xff,%bh
pushl  (%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,0xe(%ebp)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
hlt
adc    (%eax),%eax
add    %cl,0x82ffff(%edi,%esi,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a6402
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
xor    %dl,(%eax,%eax,1)
add    %ah,%al
mov    $0xff,%bh
call   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %al,0x0(%esp,%edx,1)
add    %bl,%ah
mov    $0xff,%bh
decl   (%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
pop    %eax
adc    $0x0,%al
add    %bl,%al
mov    $0xff,%bh
jmp    *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
push   $0x7c000000
adc    $0x0,%al
add    %ah,%ah
mov    $0xff,%bh
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x58,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
call   400544dd <optarg+0x37ffe2d9>
mov    $0xafffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %bh,%ah
adc    $0x0,%al
add    %dl,%ah
mov    $0x10cffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
push   %eax
adc    $0xb9900000,%eax
(bad)
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebp,%edx,1)
add    %cl,0x8ffff(%ecx,%edi,4)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
js     805456b <_IO_stdin_used+0x3187>
add    %al,(%eax)
mov    %bh,0x8ffff(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    %ss,0xb9840000
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x2,(%ebx)
inc    %ebp
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %dh,-0x4fffffeb(%eax)
mov    $0x56ffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa440204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx,%eax,8),%eax
or     $0x41,%al
(bad)
push   %cs
or     %al,0xe(%edi,%eax,8)
add    $0x38,%al
add    %al,(%eax)
add    %ch,%ah
adc    $0xb9d40000,%eax
(bad)
incl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %ch,(%eax)
push   %ss
add    %al,(%eax)
test   $0xba,%al
(bad)
lcall  *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebp),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
jo     8054664 <_IO_stdin_used+0x3280>
add    %al,(%eax)
sarb   $0x0,0x3cffff(%edx)
add    %al,(%eax)
inc    %ebx
push   %cs
adc    %ch,0xa(%ebp)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dl,-0x1fffffea(%eax)
mov    $0x51ffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa450204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %cl,%ah
push   %ss
add    %al,(%eax)
add    $0xbb,%al
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x10,0xec35302
inc    %ecx
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %al,(%edi,%edx,1)
add    %al,(%eax)
sub    $0xbb,%al
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %al,0x17(%eax)
add    %al,(%eax)
jo     80546dd <_IO_stdin_used+0x32f9>
(bad)
pushl  (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x71,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
fs
pop    %ss
add    %al,(%eax)
mov    %?,0x24ffff(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %bh,0x17(%eax)
add    %al,(%eax)
test   $0xbb,%al
(bad)
(bad)
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx,%ecx,1),%edx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %dl,%al
pop    %ss
add    %al,(%eax)
nop
mov    $0x8bffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    -0x3cbeeff2(%ecx),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
add    $0x18,%al
add    %al,(%eax)
in     (%dx),%al
mov    $0xc6ffff,%esp
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %bh,(%eax,%ebx,1)
add    %al,(%eax)
test   %bh,0x18affff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    (%ebx),%esp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %ch,-0x415c0000(%eax,%ebx,1)
(bad)
inc    %esi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
jnp    80548b3 <_IO_stdin_used+0x34cf>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    80548c6 <_IO_stdin_used+0x34e2>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
sbb    %eax,(%eax)
add    %bl,(%eax)
sar    $0xff,%bh
add    $0x0,%eax
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%ecx,%ebx,1)
add    %al,(%eax)
adc    $0xc0,%al
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
inc    %eax
sbb    %eax,(%eax)
add    %dh,(%eax)
sar    $0xff,%bh
add    %eax,%gs:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x44,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
sbbb   $0x0,(%ecx)
add    %ah,-0x3f(%eax)
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,-0x3e840000(%ecx,%ebx,1)
(bad)
decl   (%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %ch,0x78000019(%eax)
sar    $0xff,%edi
add    %al,%ds:(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xec37804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %dl,%ah
sbb    %eax,(%eax)
add    %cl,0x3fffff(%ecx,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %ch,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%eax
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
adc    %bl,(%edx)
add    %al,(%eax)
nop
sar    $0xff,%edi
mov    $0x3,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
push   %eax
sbb    (%eax),%al
add    %dl,(%eax)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dh,0xe(%ebp)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
push   $0x3800001a
(bad)
and    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bl,0xe(%edi)
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
sbbb   $0x0,(%edx)
add    %dl,-0x3b(%eax)
(bad)
(bad)
cmp    %eax,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6b300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
inc    %esp
add    %al,(%eax)
add    %bh,-0x3aac0000(%edx,%ebx,1)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %al,(%ebx,%ebx,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
(bad)
pop    %ds
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%dl
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
dec    %esp
sbb    (%eax),%eax
add    %al,0x157ffff(%esi,%eax,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     8054b53 <_IO_stdin_used+0x376f>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8054b8a <_IO_stdin_used+0x37a6>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,0x7800001b(%eax)
(bad)
(bad)
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dh,%ah
sbb    (%eax),%eax
add    %ch,0x2ffff(%edi,%eax,8)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     %bl,(%eax,%eax,1)
add    %ch,0x3cffffc7(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
.byte 0xc0
cltd
add    $0x8,%al
.byte 0xa0
cltd
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
in     $0x8e,%al
add    $0x8,%al
or     $0xcc000000,%eax
adc    0x1908,%eax
add    %cl,(%eax)
pop    %edi
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
or     $0x5f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cwtl
xchg   %eax,(%eax,%ecx,1)
push   %es
add    %al,(%eax)
add    %bl,(%eax)
(bad)
add    $0x8,%al
or     (%eax),%al
add    %al,(%eax)
pushf
add    (%eax),%eax
add    %cl,(%ebx)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,0x0
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
pusha
add    $0x208,%eax
add    %al,0x2(%eax)
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %ah,0x110804(%esp,%ecx,4)
add    %al,(%eax)
mov    %es,%fs:(%eax,%ecx,1)
adc    (%eax),%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *-0x1c(%edi)
mov    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0x34(%edi)
mov    (%eax,%ecx,1),%eax
add    %al,(%eax)
adc    $0x5f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%esi)
popl   (%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8055fb1 <_IO_stdin_used+0x4bcd>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8055ff2 <_IO_stdin_used+0x4c0e>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8056033 <_IO_stdin_used+0x4c4f>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    8056074 <_IO_stdin_used+0x4c90>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
mov    $0x92,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
(bad)
xchg   %eax,%edx
add    $0x8,%al
out    %al,$0x92
add    $0x8,%al
notb   -0x6cf9f7fc(%edx)
add    $0x8,%al
push   %ss
xchg   %eax,%ebx
add    $0x8,%al
es
xchg   %eax,%ebx
add    $0x8,%al
ss
xchg   %eax,%ebx
add    $0x8,%al
inc    %esi
xchg   %eax,%ebx
add    $0x8,%al
push   %esi
xchg   %eax,%ebx
add    $0x8,%al
xchg   %ax,%bx
add    $0x8,%al
jbe    80560b5 <_IO_stdin_used+0x4cd1>
add    $0x8,%al
xchg   %dl,-0x6c69f7fc(%ebx)
add    $0x8,%al
sbb    (%edx),%esp
add    $0x4ac9008,%eax
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %dl,0x1000805(%ecx,%eiz,2)
add    %al,(%eax)
inc    %eax
bound  %eax,0x108
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jb     6f <strcmp@plt-0x8048eb1>
add    %al,(%eax)
.byte 0x5
mov    $0x40,%dh
.byte 0xbf
