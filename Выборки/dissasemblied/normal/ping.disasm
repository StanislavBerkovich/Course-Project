das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %bl,0x5ab98548(%edx)
test   %eax,(%ebx)
sub    %esp,-0x75(%edi)
or     %bl,%bl
(bad)
(bad)
xchg   %eax,%edi
mov    0x362b68d9,%al
add    (%eax),%eax
add    %al,(%eax)
dec    %edx
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %cl,0x12000(%eax)
in     $0x5d,%eax
or     0x0(%edx),%ecx
add    %al,(%eax)
dec    %ebp
add    %al,(%eax)
add    %dl,0x0(%ecx)
add    %al,(%eax)
inc    %edx
inc    %ebp
aad    $0xec
mov    $0x297c92e3,%edx
sbb    $0xf2381c8c,%eax
mov    (%esp,%ebp,4),%ebx
dec    %ebx
jecxz  80481a4 <_init-0xc74>
fdivs  0x58(%ecx)
sbb    $0xb9,%al
(bad)
icebp
push   %cs
ljmp   $0xf7c4,$0x320eefd3
.byte 0x12
mov    $0xa2,%bl
notl   (%edx)
add    %cs:(%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %es
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lock add %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xor    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%bl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    (%ecx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
clc
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cltd
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x1(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %ss
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,%ch
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
pop    %ds
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x2(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%cl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   $0x0,(%ecx)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%ecx,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
loopne 804850a <_init-0x90e>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jg     804851c <_init-0x8fc>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
adc    $0x1,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%ch
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%esi
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%esi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
lret
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,(%esi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xlat   %ds:(%ebx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x0(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x1(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%ecx),%eax
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
roll   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
inc    %eax
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ecx)
add    (%eax),%eax
add    %ch,0x80522(%edx)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%eax)
add    %al,0x0(%ebx,%eax,1)
add    %dh,0x6(%ebp,%edx,2)
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%ecx)
add    %cl,(%ebx)
add    (%eax),%al
add    %al,(%eax)
and    0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bl,0x0(%edx,%eax,1)
add    %al,%al
and    0x408,%al
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %bh,-0x14c40000(%eax,%eax,1)
add    $0x8,%al
add    $0x0,%al
add    %al,(%eax)
adc    %eax,(%eax)
(bad)
cmp    %al,(%ebx)
add    %al,(%eax)
stos   %al,%es:(%edi)
and    0x8,%al
add    %dl,(%eax)
add    %bl,(%ecx)
add    %bl,0x18000000(%edi)
mov    (%eax,%ecx,1),%es
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
or     (%eax),%eax
data16
add    %al,(%eax)
add    %ah,(%ebx,%ebp,8)
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
push   %cs
add    %cl,0xe0000001
and    0x408,%al
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %dl,0x2(%ebp)
add    %al,(%eax)
add    $0x23,%al
add    $0x408,%eax
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x62(%ecx,%ebp,2)
arpl   %sp,0x70(%ecx)
jae,pn 80487b1 <_init-0x667>
xor    %cs:(%eax),%al
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     80487b3 <_init-0x665>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    80487de <_init-0x63a>
popa
jb     80487e1 <_init-0x637>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    80487d3 <_init-0x645>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    80487f4 <_init-0x624>
gs
jae    8048784 <_init-0x694>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     80487f0 <_init-0x628>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
imul   $0x6300,0x69(%esi),%bp
popa
jo     8048807 <_init-0x611>
addr16
gs
je     804880b <_init-0x60d>
jo     8048820 <_init-0x5f8>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x70(%ecx)
pop    %edi
data16
jb     804881d <_init-0x5fb>
add    %ah,%gs:0x61(%ebx)
jo     804881d <_init-0x5fb>
addr16
gs
je     8048821 <_init-0x5f7>
data16
insb   (%dx),%es:(%edi)
popa
add    %ah,0x61(%bp,%di)
jo     804882a <_init-0x5ee>
jae    8048832 <_init-0x5e6>
je     804882e <_init-0x5ea>
jo     8048843 <_init-0x5d5>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
arpl   %sp,0x70(%ecx)
pop    %edi
imul   $0x61630074,0x69(%esi),%ebp
jo     8048840 <_init-0x5d8>
jae    8048848 <_init-0x5d0>
je     8048844 <_init-0x5d4>
data16
insb   (%dx),%es:(%edi)
popa
add    %ch,0x69(%si)
bound  %esp,0x2e(%ebx)
jae    8048860 <_init-0x5b8>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    804886e <_init-0x5aa>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %dh,0x65(%ebx)
je     804887c <_init-0x59c>
imul   $0x656b636f,0x73(%eax,%eax,1),%esp
je     8048811 <_init-0x607>
data16
data16
insb   (%dx),%es:(%edi)
jne    8048889 <_init-0x58f>
push   $0x705f5f00
jb     8048886 <_init-0x592>
outsb  %ds:(%esi),(%dx)
je     8048886 <_init-0x592>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x78(%ebp)
imul   $0x705f4f49,0x5f(%eax,%eax,1),%esi
jne    80488a5 <_init-0x573>
arpl   %ax,(%eax)
jae    80488a9 <_init-0x56f>
jb     80488a5 <_init-0x573>
arpl   %bp,0x70(%ebp)
add    %ch,0x6e(%ecx)
gs
je     804889f <_init-0x579>
popa
je     80488b2 <_init-0x566>
outsb  %ds:(%esi),(%dx)
add    %ch,0x70(%edi)
je     80488b2 <_init-0x566>
outsb  %ds:(%esi),(%dx)
add    %bl,%fs:0x5f(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
addr16 push $0x6d
jo     80488b5 <_init-0x563>
arpl   %bp,0x6b(%eax)
add    %dh,0x65(%eax)
jb     80488d0 <_init-0x548>
outsl  %ds:(%esi),(%dx)
jb     8048861 <_init-0x5b7>
arpl   %bp,0x6e(%edi)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x69(%eax,%eax,1)
outsb  %ds:(%esi),(%dx)
gs
je     80488cd <_init-0x54b>
outsb  %ds:(%esi),(%dx)
je     80488e0 <_init-0x538>
popa
add    %dh,0x74(%ebx)
jb     80488e5 <_init-0x533>
arpl   %si,0x79(%eax)
add    %dh,0x75(%eax)
je     80488f2 <_init-0x526>
add    %dh,0x69(%ebx)
addr16 jo 80488f7 <_init-0x521>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x61(%ebp)
jae    80488f6 <_init-0x522>
add    %bl,0x5f(%edi)
jae    8048904 <_init-0x514>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x68637475,0x70(%eax,%eax,1),%ebp
popa
jb     80488a5 <_init-0x573>
popa
bound  %ebp,0x72(%edi)
je     80488ab <_init-0x56d>
addr16
gs
je     804891f <_init-0x4f9>
imul   $0x5f74656e,0x69(%eax,%eax,1),%esp
jo     804892d <_init-0x4eb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x74(%ebx)
jb     8048934 <_init-0x4e4>
outsl  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     804893b <_init-0x4dd>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
add    %ch,0x73(%ecx)
popa
je     8048943 <_init-0x4d5>
jns    80488d1 <_init-0x547>
jae    8048936 <_init-0x4e2>
push   $0x795f6465
imul   $0x72700064,0x6c(%ebp),%esp
arpl   %si,0x0(%esp,%ebp,2)
jae    804894a <_init-0x4ce>
je     8048950 <_init-0x4c8>
je     8048952 <_init-0x4c6>
insl   (%dx),%es:(%edi)
gs
jb     80488ed <_init-0x52b>
jae    8048958 <_init-0x4c0>
addr16
gs
insl   (%dx),%es:(%edi)
jo     8048968 <_init-0x4b0>
jns    8048969 <_init-0x4af>
gs
je     80488f9 <_init-0x51f>
pop    %edi
pop    %edi
gs
jb     8048970 <_init-0x4a8>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x6e696200,0x6e(%edi),%ebp
add    %ch,%fs:0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ah,0x65(%edi)
je     804898d <_init-0x48b>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     8048994 <_init-0x484>
add    %ah,0x65(%edi)
je     8048994 <_init-0x484>
jo     804899b <_init-0x47d>
add    %bl,0x73(%edi)
gs
je     8048997 <_init-0x481>
insl   (%dx),%es:(%edi)
jo     8048930 <_init-0x4e8>
jo     80489a1 <_init-0x477>
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
data16
jo     80489ac <_init-0x46c>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
je     80489aa <_init-0x46e>
outsl  %ds:(%esi),(%dx)
jne    80489bd <_init-0x45b>
add    %ah,0x65(%edi)
je     80489b6 <_init-0x462>
outsl  %ds:(%esi),(%dx)
jae    80489c5 <_init-0x453>
bound  %edi,0x61(%ecx)
fs
fs
jb     8048958 <_init-0x4c0>
data16
jo     80489d0 <_init-0x448>
je     80489c0 <_init-0x458>
add    %dh,0x74(%ebx)
jb     80489d6 <_init-0x442>
outsl  %ds:(%esi),(%dx)
jne    80489d1 <_init-0x447>
add    %dh,0x65(%ebx)
je     80489dd <_init-0x43b>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     80489e4 <_init-0x434>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    80489fb <_init-0x41d>
arpl   %sp,0x6e(%ecx)
data16
add    %ch,0x70(%edi)
je     80489f2 <_init-0x426>
jb     80489fa <_init-0x41e>
add    %dh,0x74(%ebx)
fs
gs
jb     8048a0c <_init-0x40c>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
pop    %edi
jae    8048a13 <_init-0x405>
jo     8048a19 <_init-0x3ff>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x67,(%eax),%eax
gs
je     8048a29 <_init-0x3ef>
imul   $0x69656572,0x66(%eax,%eax,1),%esp
popaw
fs
fs
jb     8048a35 <_init-0x3e3>
add    %ah,0x65(%edi)
je     8048a30 <_init-0x3e8>
popaw
fs
fs
jb     8048a40 <_init-0x3d8>
add    %dh,0x65(%ebx)
outsb  %ds:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    8048a3c <_init-0x3dc>
add    %ah,0x77(%esi)
jb     8048a43 <_init-0x3d5>
je     8048a41 <_init-0x3d7>
add    %ah,0x65(%edi)
je     8048a55 <_init-0x3c3>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    80489ea <_init-0x42e>
jae    8048a55 <_init-0x3c3>
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
add    %ah,0x65(%edi)
je     8048a5d <_init-0x3bb>
jne    8048a63 <_init-0x3b5>
add    %bl,%fs:0x5f(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
jae    8048a73 <_init-0x3a5>
add    %ah,0x65(%edi)
je     8048a86 <_init-0x392>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x65(%edi)
je     8048a87 <_init-0x391>
outsl  %ds:(%esi),(%dx)
jae    8048a96 <_init-0x382>
bound  %edi,0x6e(%ecx)
popa
insl   (%dx),%es:(%edi)
xor    %gs:(%eax),%al
pop    %edi
pop    %edi
jae    8048a9e <_init-0x37a>
jb     8048a99 <_init-0x37f>
outsb  %ds:(%esi),(%dx)
je     8048a99 <_init-0x37f>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x65(%ebx)
je     8048a9e <_init-0x37a>
jne    8048aa4 <_init-0x374>
add    %dh,0x74(%ebx)
jb     8048aa6 <_init-0x372>
insl   (%dx),%es:(%edi)
jo     8048a46 <_init-0x3d2>
jb     8048aad <_init-0x36b>
arpl   %si,0x6d(%esi)
jae    8048ab4 <_init-0x364>
add    %dh,0x74(%ebx)
jb     8048ab7 <_init-0x361>
jb     8048ac6 <_init-0x352>
outsl  %ds:(%esi),(%dx)
jb     8048a57 <_init-0x3c1>
pop    %edi
pop    %edi
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048ad7 <_init-0x341>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x6164655f,0x0(%esi),%ebp
je     8048ad0 <_init-0x348>
add    %bl,0x5f(%edi)
bound  %esi,0x73(%ebx)
pop    %edi
jae    8048aec <_init-0x32c>
popa
jb     8048aef <_init-0x329>
add    %bl,0x65(%edi)
outsb  %ds:(%esi),(%dx)
add    %al,%fs:0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%ecx)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    $0x0,%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    (%eax),%al
add    %al,(%eax)
add    $0x2000200,%eax
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,0x2000600
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,0x1000300
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%edx)
add    %al,(%edx)
add    %eax,(%eax)
add    $0xb200,%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x69691(%ecx)
add    %al,(%esi)
add    %cl,0x3(%ecx)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ebp
or     $0x50000,%eax
push   %esp
add    (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx,%ebp,2)
imul   $0x35e,0x40000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
je     8048bbb <_init-0x25d>
imul   $0x30000,(%ecx),%ecx
push   $0x10000003
add    %al,(%eax)
add    %dl,(%eax)
imul   $0x20000,0xd(%ecx),%ebp
je     8048bbd <_init-0x25b>
add    %al,(%eax)
add    %al,(%eax)
cld
pop    %ds
add    $0x220608,%eax
add    %al,%al
and    0x4d0508,%al
add    %ah,%al
and    0x520508,%al
add    %al,(%eax)
and    0x4c0508,%eax
add    %al,(%ebx,%eiz,1)
add    $0x530508,%eax
or     $0x20,%al
add    $0x10708,%eax
add    %dl,(%eax)
and    %al,0x20708
add    %dl,(%eax,%eiz,1)
add    $0x30708,%eax
add    %bl,(%eax)
and    %al,0x40708
add    %bl,(%eax,%eiz,1)
add    $0x50708,%eax
add    %ah,(%eax)
and    %al,0x60708
add    %ah,(%eax,%eiz,1)
add    $0x80708,%eax
add    %ch,(%eax)
and    %al,0x90708
add    %ch,(%eax,%eiz,1)
add    $0xa0708,%eax
add    %dh,(%eax)
and    %al,0xb0708
add    %dh,(%eax,%eiz,1)
add    $0xc0708,%eax
add    %bh,(%eax)
and    %al,0xd0708
add    %bh,(%eax,%eiz,1)
add    $0xe0708,%eax
add    %al,0x20(%eax)
add    $0xf0708,%eax
add    %al,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x20(%eax)
add    $0x110708,%eax
add    %cl,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x20(%eax)
add    $0x130708,%eax
add    %dl,0x5(%eax,%eiz,1)
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x20(%eax)
add    $0x150708,%eax
add    %bl,0x5(%eax,%eiz,1)
or     %al,(%edi)
push   %ss
add    %al,(%eax)
pusha
and    %al,0x170708
add    %ah,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    %al,(%eax)
add    %ch,0x20(%eax)
add    $0x190708,%eax
add    %ch,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x20(%eax)
add    $0x1b0708,%eax
add    %dh,0x5(%eax,%eiz,1)
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x20(%eax)
add    $0x1d0708,%eax
add    %bh,0x5(%eax,%eiz,1)
or     %al,(%edi)
push   %ds
add    %al,(%eax)
andb   $0x5,(%eax)
or     %al,(%edi)
pop    %ds
add    %al,(%eax)
test   %ah,(%eax)
add    $0x200708,%eax
add    %cl,0x7080520(%eax)
and    %eax,(%eax)
add    %cl,0x22070805(%eax,%eiz,1)
add    %al,(%eax)
nop
and    %al,0x230708
add    %dl,0x24070805(%eax,%eiz,1)
add    %al,(%eax)
cwtl
and    %al,0x250708
add    %bl,0x26070805(%eax,%eiz,1)
add    %al,(%eax)
mov    0x7080520,%al
daa
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
and    %al,0x280708
add    %ch,0x7080520(%eax)
sub    %eax,(%eax)
add    %ch,0x2a070805(%eax,%eiz,1)
add    %al,(%eax)
mov    $0x20,%al
add    $0x2b0708,%eax
add    %dh,0x2c070805(%eax,%eiz,1)
add    %al,(%eax)
mov    $0x7080520,%eax
sub    $0x20bc0000,%eax
add    $0x2e0708,%eax
add    %al,%al
and    %al,0x2f0708
add    %al,%ah
and    %al,0x300708
add    %cl,%al
and    %al,0x310708
add    %cl,%ah
and    %al,0x320708
add    %dl,%al
and    %al,0x330708
add    %dl,%ah
and    %al,0x340708
add    %bl,%al
and    %al,0x350708
add    %bl,%ah
and    %al,0x360708
add    %ah,%al
and    %al,0x370708
add    %ah,%ah
and    %al,0x380708
add    %ch,%al
and    %al,0x3a0708
add    %ch,%ah
and    %al,0x3b0708
add    %dh,%al
and    %al,0x3c0708
add    %dh,%ah
and    %al,0x3d0708
add    %bh,%al
and    %al,0x3e0708
add    %bh,%ah
and    %al,0x3f0708
add    %al,(%eax)
and    %eax,0x400708
add    %al,(%ecx,%eiz,1)
add    $0x420708,%eax
add    %cl,(%eax)
and    %eax,0x430708
add    %cl,(%ecx,%eiz,1)
add    $0x440708,%eax
add    %dl,(%eax)
and    %eax,0x450708
add    %dl,(%ecx,%eiz,1)
add    $0x460708,%eax
add    %bl,(%eax)
and    %eax,0x470708
add    %bl,(%ecx,%eiz,1)
add    $0x480708,%eax
add    %ah,(%eax)
and    %eax,0x490708
push   %ebx
sub    $0x8,%esp
call   804a4f0 <__sprintf_chk@plt+0x1250>
add    $0x91df,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     8048e36 <_init+0x1e>
call   8049050 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8052004
jmp    *0x8052008
add    %al,(%eax)
jmp    *0x805200c
push   $0x0
jmp    8048e40 <_init+0x28>
jmp    *0x8052010
push   $0x8
jmp    8048e40 <_init+0x28>
jmp    *0x8052014
push   $0x10
jmp    8048e40 <_init+0x28>
jmp    *0x8052018
push   $0x18
jmp    8048e40 <_init+0x28>
jmp    *0x805201c
push   $0x20
jmp    8048e40 <_init+0x28>
jmp    *0x8052020
push   $0x28
jmp    8048e40 <_init+0x28>
jmp    *0x8052024
push   $0x30
jmp    8048e40 <_init+0x28>
jmp    *0x8052028
push   $0x38
jmp    8048e40 <_init+0x28>
jmp    *0x805202c
push   $0x40
jmp    8048e40 <_init+0x28>
jmp    *0x8052030
push   $0x48
jmp    8048e40 <_init+0x28>
jmp    *0x8052034
push   $0x50
jmp    8048e40 <_init+0x28>
jmp    *0x8052038
push   $0x58
jmp    8048e40 <_init+0x28>
jmp    *0x805203c
push   $0x60
jmp    8048e40 <_init+0x28>
jmp    *0x8052040
push   $0x68
jmp    8048e40 <_init+0x28>
jmp    *0x8052044
push   $0x70
jmp    8048e40 <_init+0x28>
jmp    *0x8052048
push   $0x78
jmp    8048e40 <_init+0x28>
jmp    *0x805204c
push   $0x80
jmp    8048e40 <_init+0x28>
jmp    *0x8052050
push   $0x88
jmp    8048e40 <_init+0x28>
jmp    *0x8052054
push   $0x90
jmp    8048e40 <_init+0x28>
jmp    *0x8052058
push   $0x98
jmp    8048e40 <_init+0x28>
jmp    *0x805205c
push   $0xa0
jmp    8048e40 <_init+0x28>
jmp    *0x8052060
push   $0xa8
jmp    8048e40 <_init+0x28>
jmp    *0x8052064
push   $0xb0
jmp    8048e40 <_init+0x28>
jmp    *0x8052068
push   $0xb8
jmp    8048e40 <_init+0x28>
jmp    *0x805206c
push   $0xc0
jmp    8048e40 <_init+0x28>
jmp    *0x8052070
push   $0xc8
jmp    8048e40 <_init+0x28>
jmp    *0x8052074
push   $0xd0
jmp    8048e40 <_init+0x28>
jmp    *0x8052078
push   $0xd8
jmp    8048e40 <_init+0x28>
jmp    *0x805207c
push   $0xe0
jmp    8048e40 <_init+0x28>
jmp    *0x8052080
push   $0xe8
jmp    8048e40 <_init+0x28>
jmp    *0x8052084
push   $0xf0
jmp    8048e40 <_init+0x28>
jmp    *0x8052088
push   $0xf8
jmp    8048e40 <_init+0x28>
jmp    *0x805208c
push   $0x100
jmp    8048e40 <_init+0x28>
jmp    *0x8052090
push   $0x108
jmp    8048e40 <_init+0x28>
jmp    *0x8052094
push   $0x110
jmp    8048e40 <_init+0x28>
jmp    *0x8052098
push   $0x118
jmp    8048e40 <_init+0x28>
jmp    *0x805209c
push   $0x120
jmp    8048e40 <_init+0x28>
jmp    *0x80520a0
push   $0x128
jmp    8048e40 <_init+0x28>
jmp    *0x80520a4
push   $0x130
jmp    8048e40 <_init+0x28>
jmp    *0x80520a8
push   $0x138
jmp    8048e40 <_init+0x28>
jmp    *0x80520ac
push   $0x140
jmp    8048e40 <_init+0x28>
jmp    *0x80520b0
push   $0x148
jmp    8048e40 <_init+0x28>
jmp    *0x80520b4
push   $0x150
jmp    8048e40 <_init+0x28>
jmp    *0x80520b8
push   $0x158
jmp    8048e40 <_init+0x28>
jmp    *0x80520bc
push   $0x160
jmp    8048e40 <_init+0x28>
jmp    *0x80520c0
push   $0x168
jmp    8048e40 <_init+0x28>
jmp    *0x80520c4
push   $0x170
jmp    8048e40 <_init+0x28>
jmp    *0x80520c8
push   $0x178
jmp    8048e40 <_init+0x28>
jmp    *0x80520cc
push   $0x180
jmp    8048e40 <_init+0x28>
jmp    *0x80520d0
push   $0x188
jmp    8048e40 <_init+0x28>
jmp    *0x80520d4
push   $0x190
jmp    8048e40 <_init+0x28>
jmp    *0x80520d8
push   $0x198
jmp    8048e40 <_init+0x28>
jmp    *0x80520dc
push   $0x1a0
jmp    8048e40 <_init+0x28>
jmp    *0x80520e0
push   $0x1a8
jmp    8048e40 <_init+0x28>
jmp    *0x80520e4
push   $0x1b0
jmp    8048e40 <_init+0x28>
jmp    *0x80520e8
push   $0x1b8
jmp    8048e40 <_init+0x28>
jmp    *0x80520ec
push   $0x1c0
jmp    8048e40 <_init+0x28>
jmp    *0x80520f0
push   $0x1c8
jmp    8048e40 <_init+0x28>
jmp    *0x80520f4
push   $0x1d0
jmp    8048e40 <_init+0x28>
jmp    *0x80520f8
push   $0x1d8
jmp    8048e40 <_init+0x28>
jmp    *0x80520fc
push   $0x1e0
jmp    8048e40 <_init+0x28>
jmp    *0x8052100
push   $0x1e8
jmp    8048e40 <_init+0x28>
jmp    *0x8052104
push   $0x1f0
jmp    8048e40 <_init+0x28>
jmp    *0x8052108
push   $0x1f8
jmp    8048e40 <_init+0x28>
jmp    *0x805210c
push   $0x200
jmp    8048e40 <_init+0x28>
jmp    *0x8052110
push   $0x208
jmp    8048e40 <_init+0x28>
jmp    *0x8052114
push   $0x210
jmp    8048e40 <_init+0x28>
jmp    *0x8052118
push   $0x218
jmp    8048e40 <_init+0x28>
jmp    *0x805211c
push   $0x220
jmp    8048e40 <_init+0x28>
jmp    *0x8052120
push   $0x228
jmp    8048e40 <_init+0x28>
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x480,%esp
mov    0x8(%ebp),%ebx
mov    %gs:0x14,%eax
mov    %eax,0x47c(%esp)
xor    %eax,%eax
mov    0xc(%ebp),%esi
call   804bbd0 <__sprintf_chk@plt+0x2930>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   804bdc0 <__sprintf_chk@plt+0x2b20>
movl   $0x1,0x8(%esp)
movl   $0x3,0x4(%esp)
movl   $0x2,(%esp)
call   8049200 <socket@plt>
mov    %eax,0x8053408
call   8049100 <__errno_location@plt>
mov    %eax,0x2c(%esp)
mov    (%eax),%eax
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %eax,0x28(%esp)
call   804bdc0 <__sprintf_chk@plt+0x2b20>
mov    $0x2,%eax
mov    %ax,0x8063430
movl   $0x1,0x8065558
00
movl   $0x804eea4,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   80490b0 <getopt@plt>
cmp    $0xffffffff,%eax
je     80495db <__sprintf_chk@plt+0x33b>
lea    -0x41(%eax),%edx
cmp    $0x36,%edx
ja     8049513 <__sprintf_chk@plt+0x273>
nop
jmp    *0x804f7a8(,%edx,4)
movl   $0x1,0x8053380
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
movl   $0x8052204,0x8(%esp)
movl   $0x804f551,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
movl   $0x0,(%esp)
call   8049060 <exit@plt>
mov    0x8065470,%eax
test   $0x20,%al
jne    80499ca <__sprintf_chk@plt+0x72a>
mov    0x8052304,%edi
or     $0x2,%ah
movl   $0x804f514,0x4(%esp)
mov    %eax,0x8065470
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    8049553 <__sprintf_chk@plt+0x2b3>
movl   $0x0,0x80533cc
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
mov    0x8065470,%eax
test   $0x2,%ah
jne    80499ca <__sprintf_chk@plt+0x72a>
or     $0x20,%eax
mov    %eax,0x8065470
jmp    8049346 <__sprintf_chk@plt+0xa6>
mov    0x8052304,%edi
cmpb   $0x30,(%edi)
jne    8049422 <__sprintf_chk@plt+0x182>
movzbl 0x1(%edi),%eax
and    $0xffffffdf,%eax
cmp    $0x58,%al
je     80495ac <__sprintf_chk@plt+0x30c>
lea    0x34(%esp),%eax
movl   $0xa,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   8049260 <strtol@plt>
mov    0x34(%esp),%edx
cmpb   $0x0,(%edx)
jne    804a48b <__sprintf_chk@plt+0x11eb>
cmp    $0xff,%eax
jg     804a49c <__sprintf_chk@plt+0x11fc>
test   %eax,%eax
mov    %eax,0x8052320
je     8049346 <__sprintf_chk@plt+0xa6>
mov    0x8053408,%eax
movl   $0x4,0x10(%esp)
movl   $0x8052320,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jns    8049346 <__sprintf_chk@plt+0xa6>
movl   $0x804ee20,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x8052304,%edi
cmpb   $0x64,(%edi)
jne    8049518 <__sprintf_chk@plt+0x278>
cmpb   $0x6f,0x1(%edi)
jne    8049518 <__sprintf_chk@plt+0x278>
cmpb   $0x0,0x2(%edi)
jne    8049518 <__sprintf_chk@plt+0x278>
movl   $0x2,0x80521e4
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
mov    0x8052304,%eax
movl   $0x8063434,0x8(%esp)
movl   $0x2,(%esp)
mov    %eax,0x4(%esp)
call   8048ee0 <inet_pton@plt>
test   %eax,%eax
jle    80495cc <__sprintf_chk@plt+0x32c>
orl    $0x8000,0x8065470
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
mov    %eax,(%esp)
call   804bed0 <__sprintf_chk@plt+0x2c30>
jmp    8049346 <__sprintf_chk@plt+0xa6>
call   804a630 <__sprintf_chk@plt+0x1390>
movl   $0x804f547,0x4(%esp)
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
je     804958e <__sprintf_chk@plt+0x2ee>
movl   $0x804f54c,0x4(%esp)
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804a0d8 <__sprintf_chk@plt+0xe38>
movl   $0x1,0x80521e4
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
movl   $0x804f51b,0x4(%esp)
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
je     804959d <__sprintf_chk@plt+0x2fd>
movl   $0x804f525,0x4(%esp)
mov    %edi,(%esp)
call   8048ea0 <strcmp@plt>
test   %eax,%eax
jne    804a12b <__sprintf_chk@plt+0xe8b>
movl   $0x3,0x80533cc
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
movl   $0x0,0x80521e4
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
movl   $0x1,0x80533cc
00
jmp    8049346 <__sprintf_chk@plt+0xa6>
lea    0x34(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x2(%edi),%eax
movl   $0x10,0x8(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
jmp    804943a <__sprintf_chk@plt+0x19a>
mov    0x8052304,%eax
mov    %eax,0x8053400
jmp    8049346 <__sprintf_chk@plt+0xa6>
mov    0x80522e0,%eax
sub    %eax,%ebx
je     8049513 <__sprintf_chk@plt+0x273>
cmp    $0x1,%ebx
jle    804961b <__sprintf_chk@plt+0x37b>
mov    0x8065470,%edx
test   $0x20,%dl
jne    8049513 <__sprintf_chk@plt+0x273>
test   $0x2,%dh
je     80499fb <__sprintf_chk@plt+0x75b>
cmpl   $0x3,0x80533cc
jne    8049513 <__sprintf_chk@plt+0x273>
cmp    $0x5,%ebx
jg     8049513 <__sprintf_chk@plt+0x273>
lea    (%esi,%eax,4),%eax
mov    %eax,0x24(%esp)
jmp    8049656 <__sprintf_chk@plt+0x3b6>
cmp    $0x1,%ebx
mov    %esi,0x806554c
je     804a467 <__sprintf_chk@plt+0x11c7>
mov    0x80533c8,%eax
lea    0x1(%eax),%edx
mov    %edx,0x80533c8
mov    0x8063424,%edx
mov    %edx,0x80533a0(,%eax,4)
addl   $0x4,0x24(%esp)
sub    $0x1,%ebx
test   %ebx,%ebx
jle    80496ee <__sprintf_chk@plt+0x44e>
mov    0x24(%esp),%eax
mov    $0x4,%ecx
mov    $0x8063420,%edi
mov    (%eax),%esi
xor    %eax,%eax
rep stos %eax,%es:(%edi)
movl   $0x8063424,0x4(%esp)
movw   $0x2,0x8063420
00
mov    %esi,(%esp)
call   8048e90 <inet_aton@plt>
sub    $0x1,%eax
je     8049624 <__sprintf_chk@plt+0x384>
movl   $0x2,0x4(%esp)
mov    %esi,(%esp)
call   8048f20 <gethostbyname2@plt>
test   %eax,%eax
je     8049a12 <__sprintf_chk@plt+0x772>
mov    0x10(%eax),%edx
mov    (%edx),%edx
mov    (%edx),%edx
movl   $0x400,0x8(%esp)
mov    %edx,0x8063424
mov    (%eax),%eax
mov    %eax,0x4(%esp)
lea    0x7b(%esp),%eax
mov    %eax,(%esp)
call   8049110 <strncpy@plt>
lea    0x7b(%esp),%eax
cmp    $0x1,%ebx
movb   $0x0,0x47b(%esp)
mov    %eax,0x806554c
jne    8049633 <__sprintf_chk@plt+0x393>
jmp    804964e <__sprintf_chk@plt+0x3ae>
cmpl   $0x0,0x8063434
je     8049ac1 <__sprintf_chk@plt+0x821>
cmpl   $0x0,0x8063424
jne    804970e <__sprintf_chk@plt+0x46e>
mov    0x8063434,%eax
mov    %eax,0x8063424
mov    0x8053408,%ebx
test   %ebx,%ebx
js     804a109 <__sprintf_chk@plt+0xe69>
mov    0x8053400,%edx
test   %edx,%edx
je     8049778 <__sprintf_chk@plt+0x4d8>
lea    0x50(%esp),%esi
xor    %eax,%eax
mov    $0x8,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    %edx,0x4(%esp)
movl   $0xf,0x8(%esp)
mov    %esi,(%esp)
call   8049110 <strncpy@plt>
mov    %esi,0x8(%esp)
movl   $0x8933,0x4(%esp)
mov    %ebx,(%esp)
call   8048f90 <ioctl@plt>
test   %eax,%eax
js     804a248 <__sprintf_chk@plt+0xfa8>
mov    0x60(%esp),%eax
movl   $0x18,0x8053404
00
mov    %eax,0x80521f4
cmpl   $0x0,0x8053380
jne    8049a3f <__sprintf_chk@plt+0x79f>
mov    0x8063424,%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
je     8049a3f <__sprintf_chk@plt+0x79f>
cmpl   $0x0,0x80521e4
jns    8049a73 <__sprintf_chk@plt+0x7d3>
testb  $0x80,0x8065471
je     80497d8 <__sprintf_chk@plt+0x538>
mov    0x8053408,%eax
movl   $0x10,0x8(%esp)
movl   $0x8063430,0x4(%esp)
mov    %eax,(%esp)
call   80490c0 <bind@plt>
add    $0x1,%eax
je     804a2bc <__sprintf_chk@plt+0x101c>
mov    0x8053408,%eax
lea    0x34(%esp),%ebx
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0xff,0x4(%esp)
mov    %eax,(%esp)
movl   $0xffffe7c6,0x34(%esp)
call   8048e50 <setsockopt@plt>
add    $0x1,%eax
je     804a1ab <__sprintf_chk@plt+0xf0b>
lea    0x30(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x8053408,%eax
movl   $0x4,0x10(%esp)
movl   $0xb,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
movl   $0x1,0x30(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jne    8049d1f <__sprintf_chk@plt+0xa7f>
mov    0x8065470,%edx
test   $0x20,%dl
jne    8049deb <__sprintf_chk@plt+0xb4b>
test   $0x2,%dh
jne    8049d49 <__sprintf_chk@plt+0xaa9>
test   $0x4,%dh
je     8049906 <__sprintf_chk@plt+0x666>
lea    0x50(%esp),%esi
xor    %eax,%eax
mov    $0xa,%ecx
mov    %esi,%edi
and    $0x80,%edx
rep stos %eax,%es:(%edi)
cmp    $0x1,%edx
mov    0x80533c8,%ecx
sbb    %eax,%eax
and    $0xfffffffa,%eax
sub    $0x77,%eax
mov    %al,0x51(%esp)
lea    0x3(,%ecx,4),%eax
mov    %al,0x52(%esp)
xor    %eax,%eax
movb   $0x1,0x50(%esp)
movb   $0x4,0x53(%esp)
jmp    80498c4 <__sprintf_chk@plt+0x624>
add    $0x1,%eax
mov    0x805339c(,%eax,4),%edx
mov    %edx,(%esi,%eax,4)
cmp    %ecx,%eax
jl     80498b7 <__sprintf_chk@plt+0x617>
lea    0x4(,%ecx,4),%eax
mov    %eax,0x10(%esp)
mov    0x8053408,%eax
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
js     8049e4f <__sprintf_chk@plt+0xbaf>
movl   $0x28,0x8052324
00
mov    0x8052288,%ecx
mov    $0x200,%esi
mov    0x8052324,%edi
lea    0x207(%ecx),%eax
cltd
idiv   %esi
lea    0x104(%edi),%edx
imul   %edx,%eax
lea    0x8(%ecx,%eax,1),%eax
mov    %eax,0x30(%esp)
mov    %eax,0x4(%esp)
mov    0x8053408,%eax
mov    %eax,(%esp)
call   804cea0 <__sprintf_chk@plt+0x3c00>
cmpl   $0x0,0x8053380
jne    804a002 <__sprintf_chk@plt+0xd62>
mov    0x8065470,%edx
test   $0x10000,%edx
jne    8049faa <__sprintf_chk@plt+0xd0a>
and    $0x20000,%edx
jne    804a04f <__sprintf_chk@plt+0xdaf>
mov    0x8052288,%eax
mov    $0xffe3,%edx
sub    0x8052324,%edx
cmp    %eax,%edx
jge    8049c46 <__sprintf_chk@plt+0x9a6>
cmpl   $0x0,0x8065528
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
jne    80499a1 <__sprintf_chk@plt+0x701>
cmp    $0xfff8,%eax
jbe    8049c24 <__sprintf_chk@plt+0x984>
mov    0x80522c0,%eax
movl   $0x804f070,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x21,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ee44,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
cmp    $0xa,%ebx
jg     8049513 <__sprintf_chk@plt+0x273>
or     $0x4,%dh
mov    %edx,0x8065470
jmp    804961b <__sprintf_chk@plt+0x37b>
mov    %esi,0xc(%esp)
movl   $0x804f56b,0x8(%esp)
mov    0x80522c0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
cmpl   $0x0,0x8065528
je     8049a66 <__sprintf_chk@plt+0x7c6>
cmpl   $0x3e7,0x805229c
00
jle    804a17a <__sprintf_chk@plt+0xeda>
mov    0x80521e4,%eax
cmp    $0x2,%eax
jne    804a2d4 <__sprintf_chk@plt+0x1034>
cmpl   $0x0,0x80521e4
js     804a15c <__sprintf_chk@plt+0xebc>
mov    0x8053408,%eax
movl   $0x4,0x10(%esp)
movl   $0x80521e4,0xc(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
add    $0x1,%eax
jne    80497a9 <__sprintf_chk@plt+0x509>
movl   $0x804f607,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    $0x8063420,%esi
mov    $0x4,%ecx
lea    0x40(%esp),%edi
rep movsl %ds:(%esi),%es:(%edi)
movl   $0x0,0x8(%esp)
movl   $0x2,0x4(%esp)
movl   $0x2,(%esp)
mov    %ecx,0x24(%esp)
call   8049200 <socket@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804a28c <__sprintf_chk@plt+0xfec>
mov    0x8053400,%edx
test   %edx,%edx
je     8049b92 <__sprintf_chk@plt+0x8f2>
mov    0x24(%esp),%eax
lea    0x50(%esp),%esi
mov    $0x8,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    %edx,0x4(%esp)
movl   $0xf,0x8(%esp)
mov    %esi,(%esp)
call   8049110 <strncpy@plt>
movl   $0x1,0x4(%esp)
movl   $0xd,(%esp)
call   804bdc0 <__sprintf_chk@plt+0x2b20>
mov    0x8053400,%edx
xor    %eax,%eax
or     $0xffffffff,%ecx
mov    %edx,%edi
repnz scas %es:(%edi),%al
mov    %edx,0xc(%esp)
movl   $0x19,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
not    %ecx
mov    %ecx,0x10(%esp)
call   8048e50 <setsockopt@plt>
movl   $0x0,0x4(%esp)
movl   $0xd,(%esp)
mov    %eax,%edi
call   804bdc0 <__sprintf_chk@plt+0x2b20>
add    $0x1,%edi
je     804a25e <__sprintf_chk@plt+0xfbe>
cmpl   $0x0,0x8052320
jne    804a207 <__sprintf_chk@plt+0xf67>
cmpl   $0x0,0x80533c8
movw   $0x104,0x42(%esp)
je     8049bb8 <__sprintf_chk@plt+0x918>
mov    0x80533a0,%eax
mov    %eax,0x44(%esp)
lea    0x40(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049270 <connect@plt>
add    $0x1,%eax
jne    8049ed4 <__sprintf_chk@plt+0xc34>
mov    0x2c(%esp),%eax
cmpl   $0xd,(%eax)
jne    804a1bc <__sprintf_chk@plt+0xf1c>
mov    0x80522c0,%eax
cmpl   $0x0,0x8053380
mov    %eax,0xc(%esp)
jne    8049e67 <__sprintf_chk@plt+0xbc7>
movl   $0x27,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804eef8,(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x804f0a4,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
mov    0x8052288,%eax
cmp    $0x7,%eax
jbe    8049c55 <__sprintf_chk@plt+0x9b5>
movl   $0x1,0x806546c
00
lea    0x88(%eax),%edi
mov    %edi,(%esp)
call   8049000 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     804a30d <__sprintf_chk@plt+0x106d>
mov    0x8063424,%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
movl   $0x804f678,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x806554c,%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8053400,%ebx
test   %ebx,%ebx
je     804a33e <__sprintf_chk@plt+0x109e>
mov    0x8063434,%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
mov    %ebx,0xc(%esp)
movl   $0x804f686,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052288,%eax
mov    0x8052324,%edx
movl   $0x804f693,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
lea    0x1c(%eax,%edx,1),%edx
mov    %edx,0xc(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8053408,%eax
mov    %eax,(%esp)
call   804cfa0 <__sprintf_chk@plt+0x3d00>
mov    0x8053408,%eax
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   804e330 <__sprintf_chk@plt+0x5090>
mov    0x80522c0,%eax
movl   $0x31,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804efc4,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
jmp    8049853 <__sprintf_chk@plt+0x5b3>
lea    0x50(%esp),%esi
xor    %eax,%eax
mov    $0xa,%ecx
mov    %esi,%edi
rep stos %eax,%es:(%edi)
mov    0x80533cc,%eax
movb   $0x44,0x50(%esp)
test   %eax,%eax
je     804a16b <__sprintf_chk@plt+0xecb>
cmp    $0x3,%eax
movb   $0x24,0x51(%esp)
movb   $0x5,0x52(%esp)
mov    %al,0x53(%esp)
jne    8049da4 <__sprintf_chk@plt+0xb04>
mov    0x80533c8,%edx
lea    0x4(,%edx,8),%eax
mov    %al,0x51(%esp)
xor    %eax,%eax
jmp    8049da0 <__sprintf_chk@plt+0xb00>
mov    0x80533a0(,%eax,4),%ecx
mov    %ecx,0x4(%esi,%eax,8)
add    $0x1,%eax
cmp    %edx,%eax
jl     8049d92 <__sprintf_chk@plt+0xaf2>
movsbl 0x51(%esp),%eax
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8053408,%eax
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
js     804a400 <__sprintf_chk@plt+0x1160>
movl   $0x28,0x8052324
00
mov    0x8065470,%edx
jmp    804986b <__sprintf_chk@plt+0x5cb>
lea    0x50(%esp),%edx
xor    %eax,%eax
mov    %edx,%edi
mov    $0xa,%ecx
rep stos %eax,%es:(%edi)
mov    0x8053408,%eax
mov    %edx,0xc(%esp)
movl   $0x28,0x10(%esp)
movl   $0x4,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
movb   $0x1,0x50(%esp)
movb   $0x7,0x51(%esp)
movb   $0x27,0x52(%esp)
movb   $0x4,0x53(%esp)
movl   $0x28,0x8052324
00
call   8048e50 <setsockopt@plt>
mov    0x8065470,%edx
test   %eax,%eax
jns    8049862 <__sprintf_chk@plt+0x5c2>
movl   $0x804f622,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x23,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ef20,(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x4,0x10(%esp)
movl   $0x8053380,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
js     804a473 <__sprintf_chk@plt+0x11d3>
lea    0x40(%esp),%eax
movl   $0x10,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049270 <connect@plt>
add    $0x1,%eax
je     804a1bc <__sprintf_chk@plt+0xf1c>
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x8063430,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x10,0x30(%esp)
call   80491e0 <getsockname@plt>
add    $0x1,%eax
je     804a44f <__sprintf_chk@plt+0x11af>
cmpl   $0x0,0x8053400
movw   $0x0,0x8063432
00
je     8049f9d <__sprintf_chk@plt+0xcfd>
lea    0x34(%esp),%eax
mov    %eax,(%esp)
call   80490e0 <getifaddrs@plt>
test   %eax,%eax
jne    804a355 <__sprintf_chk@plt+0x10b5>
mov    0x34(%esp),%esi
mov    0x8053400,%eax
mov    %esi,%edi
mov    %eax,0x24(%esp)
test   %edi,%edi
je     804a1d4 <__sprintf_chk@plt+0xf34>
mov    0xc(%edi),%edx
test   %edx,%edx
je     8049f4b <__sprintf_chk@plt+0xcab>
cmpw   $0x2,(%edx)
je     8049f4f <__sprintf_chk@plt+0xcaf>
mov    (%edi),%edi
jmp    8049f36 <__sprintf_chk@plt+0xc96>
mov    0x24(%esp),%eax
movl   $0x3,0x8(%esp)
mov    %edx,0x20(%esp)
mov    %eax,0x4(%esp)
mov    0x4(%edi),%eax
mov    %eax,(%esp)
call   8049230 <strncmp@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
jne    8049f4b <__sprintf_chk@plt+0xcab>
add    $0x4,%edx
movl   $0x4,0x8(%esp)
movl   $0x8063434,0x4(%esp)
mov    %edx,(%esp)
call   8048f00 <memcmp@plt>
test   %eax,%eax
jne    8049f4b <__sprintf_chk@plt+0xcab>
mov    %esi,(%esp)
call   8049150 <freeifaddrs@plt>
mov    %ebx,(%esp)
call   8049280 <close@plt>
jmp    80496fb <__sprintf_chk@plt+0x45b>
mov    0x8053408,%eax
movl   $0x1,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x22,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
movl   $0x0,0x34(%esp)
call   8048e50 <setsockopt@plt>
mov    0x8065470,%edx
add    $0x1,%eax
jne    8049961 <__sprintf_chk@plt+0x6c1>
movl   $0x804eff8,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x8053408,%eax
movl   $0x4,0x10(%esp)
movl   $0x8053380,0xc(%esp)
movl   $0x6,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jns    804994f <__sprintf_chk@plt+0x6af>
movl   $0x804f645,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x8065548,%eax
movl   $0x1,0x10(%esp)
movl   $0x8065548,0xc(%esp)
movl   $0x21,0x8(%esp)
mov    %eax,0x34(%esp)
mov    0x8053408,%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
add    $0x1,%eax
je     804a2a4 <__sprintf_chk@plt+0x1004>
mov    0x8053408,%eax
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x2,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
add    $0x1,%eax
jne    804996d <__sprintf_chk@plt+0x6cd>
movl   $0x804f048,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x39,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ee68,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x2c(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
movl   $0x804f5f0,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f52f,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x2,0x80521e4
00
jmp    8049a73 <__sprintf_chk@plt+0x7d3>
movb   $0x28,0x51(%esp)
movb   $0x5,0x52(%esp)
jmp    8049da4 <__sprintf_chk@plt+0xb04>
mov    0x80522c0,%eax
movl   $0x2e,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ef44,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x804efa0,(%esp)
call   8048fa0 <perror@plt>
jmp    8049816 <__sprintf_chk@plt+0x576>
movl   $0x804f5c6,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    %esi,(%esp)
call   8049150 <freeifaddrs@plt>
mov    0x8053400,%eax
movl   $0x804f0dc,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80522c0,%eax
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
jmp    8049f9d <__sprintf_chk@plt+0xcfd>
movl   $0x4,0x10(%esp)
movl   $0x8052320,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jns    8049b9f <__sprintf_chk@plt+0x8ff>
movl   $0x804eed4,(%esp)
call   8048fa0 <perror@plt>
jmp    8049b9f <__sprintf_chk@plt+0x8ff>
mov    0x8053400,%eax
movl   $0x804f582,0x8(%esp)
mov    %eax,0xc(%esp)
jmp    8049a1e <__sprintf_chk@plt+0x77e>
mov    0x44(%esp),%eax
bswap  %eax
and    $0xf0000000,%eax
cmp    $0xe0000000,%eax
je     804a386 <__sprintf_chk@plt+0x10e6>
movl   $0x804f5b0,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x804f600,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x804f020,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x804f61d,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
test   %eax,%eax
js     8049a66 <__sprintf_chk@plt+0x7c6>
mov    0x80522c0,%eax
movl   $0x28,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ef74,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f662,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
testb  $0x80,0x8065471
je     8049cd2 <__sprintf_chk@plt+0xa32>
mov    $0x804f993,%ebx
jmp    8049ca9 <__sprintf_chk@plt+0xa09>
mov    0x80522c0,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f5da,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    %esi,0x8(%esp)
movl   $0x8933,0x4(%esp)
mov    %ebx,(%esp)
call   8048f90 <ioctl@plt>
test   %eax,%eax
js     804a248 <__sprintf_chk@plt+0xfa8>
mov    0x24(%esp),%eax
lea    0x34(%esp),%edx
mov    $0x3,%ecx
mov    %edx,%edi
rep stos %eax,%es:(%edi)
mov    0x60(%esp),%eax
movl   $0xc,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x20,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x3c(%esp)
call   8048e50 <setsockopt@plt>
add    $0x1,%eax
jne    8049b92 <__sprintf_chk@plt+0x8f2>
movl   $0x804f59a,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movsbl 0x51(%esp),%eax
mov    %esi,0xc(%esp)
movl   $0x4,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x8053408,%eax
movb   $0x2,0x53(%esp)
mov    %eax,(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jns    8049dd6 <__sprintf_chk@plt+0xb36>
movl   $0x804f635,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x804f5ce,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
orl    $0x4,0x8065470
jmp    804964e <__sprintf_chk@plt+0x3ae>
movl   $0x804f64b,(%esp)
call   8048fa0 <perror@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    %edi,0xc(%esp)
movl   $0x804f4f6,0x8(%esp)
jmp    8049a1e <__sprintf_chk@plt+0x77e>
mov    0x80522c0,%eax
movl   $0x3c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804ede0,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x804eb20
push   $0x804eab0
push   %ecx
push   %esi
push   $0x80492b0
call   8049090 <__libc_start_main@plt>
hlt
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x80522af,%eax
sub    $0x80522ac,%eax
cmp    $0x6,%eax
ja     804a510 <__sprintf_chk@plt+0x1270>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804a50f <__sprintf_chk@plt+0x126f>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x80522ac,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x80522ac,%eax
sub    $0x80522ac,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804a549 <__sprintf_chk@plt+0x12a9>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804a548 <__sprintf_chk@plt+0x12a8>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x80522ac,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x8052308
jne    804a58c <__sprintf_chk@plt+0x12ec>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804a500 <__sprintf_chk@plt+0x1260>
movb   $0x1,0x8052308
leave
repz ret
xchg   %ax,%ax
mov    0x8051f08,%eax
test   %eax,%eax
je     804a5b8 <__sprintf_chk@plt+0x1318>
mov    $0x0,%eax
test   %eax,%eax
je     804a5b8 <__sprintf_chk@plt+0x1318>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8051f08,(%esp)
call   *%eax
leave
jmp    804a530 <__sprintf_chk@plt+0x1290>
nop
jmp    804a530 <__sprintf_chk@plt+0x1290>
xchg   %ax,%ax
nop
mov    0x806551c,%edx
mov    %edx,%ecx
sub    %ax,%cx
js     804a5f0 <__sprintf_chk@plt+0x1350>
movzwl %cx,%ecx
cmp    0x805228c,%ecx
push   %ebx
jge    804a5f8 <__sprintf_chk@plt+0x1358>
movzwl 0x8065474,%ecx
mov    %eax,%ebx
sub    %ecx,%ebx
test   %bx,%bx
jle    804a611 <__sprintf_chk@plt+0x1371>
pop    %ebx
mov    %ax,0x8065474
repz ret
lea    0x0(%esi),%esi
add    $0x1,%ecx
mov    %eax,%ebx
mov    %ecx,0x805228c
movzwl 0x8065474,%ecx
sub    %ecx,%ebx
test   %bx,%bx
jg     804a5e9 <__sprintf_chk@plt+0x1349>
movzwl %dx,%edx
sub    %ecx,%edx
cmp    $0x7fff,%edx
jg     804a5e9 <__sprintf_chk@plt+0x1349>
pop    %ebx
jmp    804a5f0 <__sprintf_chk@plt+0x1350>
jmp    804a630 <__sprintf_chk@plt+0x1390>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub    $0x1c,%esp
mov    0x80522c0,%eax
movl   $0x11c,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804eb40,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movzwl 0x6(%eax),%eax
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x8(%esp)
movl   $0x804f1ae,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
add    $0x1c,%esp
ret
xchg   %ax,%ax
push   %edi
mov    %eax,%edi
push   %esi
mov    %edx,%esi
push   %ebx
xor    %ebx,%ebx
sub    $0x10,%esp
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    (%edi,%ebx,1),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
cmp    %ebx,%esi
ja     804a6b0 <__sprintf_chk@plt+0x1410>
shr    $0x1f,%eax
test   %al,%al
jne    804a6b0 <__sprintf_chk@plt+0x1410>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
push   %ebx
sub    $0x28,%esp
cmpb   $0x0,0x8052380
mov    %eax,0x1c(%esp)
je     804a700 <__sprintf_chk@plt+0x1460>
add    $0x28,%esp
mov    $0x8052380,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x8065480,(%esp)
call   8048ed0 <_setjmp@plt>
test   %eax,%eax
sete   %al
movzbl %al,%eax
mov    %eax,0x80533d0
mov    0x806553c,%eax
test   %eax,%eax
jne    804a72b <__sprintf_chk@plt+0x148b>
testb  $0x4,0x8065470
je     804a778 <__sprintf_chk@plt+0x14d8>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
movl   $0x804f1db,0xc(%esp)
movl   $0x1000,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x8052380,(%esp)
mov    %eax,0x10(%esp)
call   80492a0 <__sprintf_chk@plt>
movl   $0x0,0x80533d0
00
add    $0x28,%esp
mov    $0x8052380,%eax
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
lea    0x1c(%esp),%eax
movl   $0x2,0x8(%esp)
movl   $0x4,0x4(%esp)
mov    %eax,(%esp)
call   8048f30 <gethostbyaddr@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804a72b <__sprintf_chk@plt+0x148b>
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
mov    %eax,0x18(%esp)
mov    (%ebx),%eax
movl   $0x804f1bb,0x10(%esp)
movl   $0x1000,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x1000,0x4(%esp)
movl   $0x8052380,(%esp)
call   8048e80 <__snprintf_chk@plt>
jmp    804a75f <__sprintf_chk@plt+0x14bf>
xchg   %ax,%ax
push   %ebp
mov    %eax,%ebp
push   %edi
push   %esi
lea    -0x14(%edx),%eax
push   %ebx
sub    $0x3c,%esp
test   %eax,%eax
mov    %eax,0x18(%esp)
jle    804a94a <__sprintf_chk@plt+0x16aa>
movzbl 0x0(%ebp),%eax
test   %al,%al
je     804a94a <__sprintf_chk@plt+0x16aa>
cmp    $0x1,%al
je     804abd8 <__sprintf_chk@plt+0x1938>
movzbl 0x1(%ebp),%esi
cmp    0x18(%esp),%esi
jg     804a94a <__sprintf_chk@plt+0x16aa>
cmp    $0x1,%esi
jle    804a94a <__sprintf_chk@plt+0x16aa>
cmp    $0x44,%al
je     804aa00 <__sprintf_chk@plt+0x1760>
nop
lea    0x0(%esi,%eiz,1),%esi
ja     804a958 <__sprintf_chk@plt+0x16b8>
cmp    $0x7,%al
jne    804a920 <__sprintf_chk@plt+0x1680>
movzbl 0x2(%ebp),%eax
cmp    %esi,%eax
cmovg  %esi,%eax
lea    -0x4(%eax),%ebx
mov    %eax,%edi
test   %ebx,%ebx
jle    804a938 <__sprintf_chk@plt+0x1698>
cmp    0x8052368,%ebx
lea    0x2(%ebp),%edx
jne    804a883 <__sprintf_chk@plt+0x15e3>
mov    %edx,(%esp)
mov    %ebx,0x8(%esp)
movl   $0x8052340,0x4(%esp)
mov    %edx,0x1c(%esp)
call   8048f00 <memcmp@plt>
mov    0x1c(%esp),%edx
test   %eax,%eax
je     804ac10 <__sprintf_chk@plt+0x1970>
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
movl   $0x28,0xc(%esp)
movl   $0x8052340,(%esp)
mov    %ebx,0x8052368
lea    0x3(%ebp),%ebx
call   8049040 <__memcpy_chk@plt>
movl   $0x804f1ec,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
lea    -0x5(%edi),%eax
shr    $0x2,%eax
lea    0x4(%ebx,%eax,4),%edi
jmp    804a8f5 <__sprintf_chk@plt+0x1655>
movl   $0x804f1d1,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052300,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
cmp    %edi,%ebx
je     804a938 <__sprintf_chk@plt+0x1698>
mov    (%ebx),%eax
add    $0x4,%ebx
test   %eax,%eax
je     804a8c8 <__sprintf_chk@plt+0x1628>
call   804a6e0 <__sprintf_chk@plt+0x1440>
movl   $0x804f1da,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804a8dc <__sprintf_chk@plt+0x163c>
lea    0x0(%esi),%esi
mov    %eax,0x8(%esp)
movl   $0x804f24d,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
sub    %esi,0x18(%esp)
add    %esi,%ebp
mov    0x18(%esp),%eax
test   %eax,%eax
jg     804a7f8 <__sprintf_chk@plt+0x1558>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x83,%al
je     804ac00 <__sprintf_chk@plt+0x1960>
cmp    $0x89,%al
jne    804a920 <__sprintf_chk@plt+0x1680>
mov    $0x53,%eax
mov    %eax,0x8(%esp)
movl   $0x804f1c8,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
movzbl 0x1(%ebp),%eax
cmp    $0x4,%eax
jle    804a938 <__sprintf_chk@plt+0x1698>
sub    $0x5,%eax
lea    0x3(%ebp),%ebx
shr    $0x2,%eax
lea    0x4(%ebx,%eax,4),%edi
jmp    804a9d1 <__sprintf_chk@plt+0x1731>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f1d1,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052300,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
cmp    %edi,%ebx
je     804a938 <__sprintf_chk@plt+0x1698>
mov    (%ebx),%eax
add    $0x4,%ebx
test   %eax,%eax
je     804a9a0 <__sprintf_chk@plt+0x1700>
call   804a6e0 <__sprintf_chk@plt+0x1440>
movl   $0x804f1da,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804a9b4 <__sprintf_chk@plt+0x1714>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2(%ebp),%ebx
cmp    %esi,%ebx
cmovg  %esi,%ebx
sub    $0x5,%ebx
test   %ebx,%ebx
jle    804a938 <__sprintf_chk@plt+0x1698>
movzbl 0x3(%ebp),%eax
xor    %edi,%edi
movl   $0x804f1f2,0x4(%esp)
movl   $0x1,(%esp)
mov    %al,0x27(%esp)
call   8049140 <__printf_chk@plt>
movzbl 0x27(%esp),%eax
lea    0x4(%ebp),%edx
mov    %ebp,0x28(%esp)
mov    %edx,%ebp
movl   $0x0,0x20(%esp)
mov    %esi,0x2c(%esp)
and    $0xf,%eax
mov    %al,0x1c(%esp)
jmp    804aa94 <__sprintf_chk@plt+0x17f4>
lea    0x0(%esi),%esi
mov    %eax,0x8(%esp)
mov    %ebp,%edi
movl   $0x804f225,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052300,%eax
sub    $0x4,%ebx
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
test   %ebx,%ebx
jle    804ab78 <__sprintf_chk@plt+0x18d8>
mov    %esi,%ebp
cmpb   $0x0,0x1c(%esp)
je     804aac8 <__sprintf_chk@plt+0x1828>
mov    0x0(%ebp),%eax
add    $0x4,%ebp
test   %eax,%eax
jne    804ab50 <__sprintf_chk@plt+0x18b0>
movl   $0x804f1d1,0x4(%esp)
sub    $0x4,%ebx
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
test   %ebx,%ebx
jle    804ab78 <__sprintf_chk@plt+0x18d8>
movzbl 0x0(%ebp),%eax
lea    0x4(%ebp),%esi
movzbl 0x1(%ebp),%ecx
movzbl 0x3(%ebp),%edx
shl    $0x8,%eax
add    %ecx,%eax
movzbl 0x2(%ebp),%ecx
shl    $0x8,%eax
add    %ecx,%eax
shl    $0x8,%eax
add    %edx,%eax
mov    %eax,%ebp
js     804ab18 <__sprintf_chk@plt+0x1878>
test   %edi,%edi
je     804aa58 <__sprintf_chk@plt+0x17b8>
sub    %edi,%eax
mov    %ebp,%edi
mov    %eax,0x8(%esp)
movl   $0x804f233,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804aa72 <__sprintf_chk@plt+0x17d2>
nop
mov    0x20(%esp),%edx
and    $0x7fffffff,%ebp
test   %edx,%edx
jne    804abb0 <__sprintf_chk@plt+0x1910>
mov    %ebp,0x8(%esp)
movl   $0x804f1f8,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    %ebp,0x20(%esp)
jmp    804aa72 <__sprintf_chk@plt+0x17d2>
nop
lea    0x0(%esi,%eiz,1),%esi
call   804a6e0 <__sprintf_chk@plt+0x1440>
sub    $0x4,%ebx
movl   $0x804f1da,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
test   %ebx,%ebx
jg     804aac8 <__sprintf_chk@plt+0x1828>
movzbl 0x27(%esp),%eax
mov    0x28(%esp),%ebp
mov    0x2c(%esp),%esi
shr    $0x4,%al
test   %al,%al
je     804a938 <__sprintf_chk@plt+0x1698>
movzbl %al,%eax
mov    %eax,0x8(%esp)
movl   $0x804f238,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804a938 <__sprintf_chk@plt+0x1698>
mov    %ebp,%eax
sub    0x20(%esp),%eax
movl   $0x804f213,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    %ebp,0x20(%esp)
jmp    804aa72 <__sprintf_chk@plt+0x17d2>
nop
movl   $0x804f1c3,0x4(%esp)
add    $0x1,%ebp
movl   $0x1,(%esp)
subl   $0x1,0x18(%esp)
call   8049140 <__printf_chk@plt>
jmp    804a93e <__sprintf_chk@plt+0x169e>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x4c,%eax
jmp    804a969 <__sprintf_chk@plt+0x16c9>
lea    0x0(%esi),%esi
testb  $0x1,0x8065470
jne    804a883 <__sprintf_chk@plt+0x15e3>
movl   $0x804f1de,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804a938 <__sprintf_chk@plt+0x1698>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x24,%esp
movzbl (%eax),%eax
movl   $0x804ec60,(%esp)
mov    %eax,%esi
call   8049020 <puts@plt>
movzwl 0x4(%ebx),%eax
and    $0xf,%esi
movl   $0x804f260,0x4(%esp)
shl    $0x2,%esi
movl   $0x1,(%esp)
mov    %eax,0x18(%esp)
movzwl 0x2(%ebx),%eax
mov    %eax,0x14(%esp)
movzbl 0x1(%ebx),%eax
mov    %eax,0x10(%esp)
movzbl (%ebx),%eax
mov    %eax,%edx
shr    $0x4,%al
and    $0xf,%edx
movzbl %al,%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
movzwl 0x6(%ebx),%eax
movl   $0x804f27a,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,%edx
shr    $0xd,%ax
and    $0x1fff,%edx
movzwl %ax,%eax
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
movzwl 0xa(%ebx),%eax
movl   $0x804f286,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x10(%esp)
movzbl 0x9(%ebx),%eax
mov    %eax,0xc(%esp)
movzbl 0x8(%ebx),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0xc(%ebx),%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
movl   $0x804f298,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x10(%ebx),%eax
mov    %eax,(%esp)
call   8048ef0 <inet_ntoa@plt>
movl   $0x804f298,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
movl   $0xa,(%esp)
call   80490f0 <putchar@plt>
add    $0x24,%esp
mov    %esi,%edx
lea    0x14(%ebx),%eax
pop    %ebx
pop    %esi
jmp    804a7e0 <__sprintf_chk@plt+0x1540>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
cmp    $0x12,%al
mov    0x20(%esp),%ebx
movzbl %al,%eax
ja     804af58 <__sprintf_chk@plt+0x1cb8>
jmp    *0x804f71c(,%eax,4)
lea    0x0(%esi),%esi
movl   $0x804f4d0,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f29d,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xf,%dl
ja     804b165 <__sprintf_chk@plt+0x1ec5>
jmp    *0x804f768(,%edx,4)
movl   $0x804f3c6,(%esp)
call   8049020 <puts@plt>
test   %ebx,%ebx
je     804add9 <__sprintf_chk@plt+0x1b39>
testb  $0x1,0x8065471
jne    804ae48 <__sprintf_chk@plt+0x1ba8>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
cmp    $0x1,%dl
je     804b0e8 <__sprintf_chk@plt+0x1e48>
jb     804af90 <__sprintf_chk@plt+0x1cf0>
cmp    $0x2,%dl
je     804b128 <__sprintf_chk@plt+0x1e88>
cmp    $0x3,%dl
nop
lea    0x0(%esi,%eiz,1),%esi
jne    804b108 <__sprintf_chk@plt+0x1e68>
movl   $0x804ed98,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
test   %ebx,%ebx
je     804add9 <__sprintf_chk@plt+0x1b39>
mov    0x4(%ebx),%eax
call   804a6e0 <__sprintf_chk@plt+0x1440>
movl   $0x804f40a,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
testb  $0x1,0x8065471
je     804add9 <__sprintf_chk@plt+0x1b39>
nop
add    $0x18,%esp
lea    0x8(%ebx),%eax
pop    %ebx
jmp    804ac40 <__sprintf_chk@plt+0x19a0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f41d,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
je     804af78 <__sprintf_chk@plt+0x1cd8>
cmp    $0x1,%dl
jne    804b0c8 <__sprintf_chk@plt+0x1e28>
movl   $0x804f440,(%esp)
call   8049020 <puts@plt>
lea    0x0(%esi),%esi
test   %ebx,%ebx
jne    804add0 <__sprintf_chk@plt+0x1b30>
jmp    804add9 <__sprintf_chk@plt+0x1b39>
lea    0x0(%esi),%esi
test   %ebx,%ebx
je     804b148 <__sprintf_chk@plt+0x1ea8>
mov    0x4(%ebx),%eax
movl   $0x804edbc,0x4(%esp)
movl   $0x1,(%esp)
bswap  %eax
shr    $0x18,%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
testb  $0x1,0x8065471
je     804add9 <__sprintf_chk@plt+0x1b39>
jmp    804ae48 <__sprintf_chk@plt+0x1ba8>
lea    0x0(%esi),%esi
movl   $0x804f47b,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f485,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f495,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f4a9,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f4bb,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049020 <puts@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x8(%esp)
movl   $0x804f4e3,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804add9 <__sprintf_chk@plt+0x1b39>
lea    0x0(%esi),%esi
movl   $0x804f42a,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804f3d4,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae1a <__sprintf_chk@plt+0x1b7a>
movl   $0x804f39f,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f38f,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804ed1c,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804ecec,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f373,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f358,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f343,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f32a,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f312,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f2fe,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
mov    %ecx,0x8(%esp)
movl   $0x804ecc8,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f2e1,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804eca4,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f2c4,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f2a8,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
movl   $0x804f3b4,(%esp)
call   8049020 <puts@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
lea    0x0(%esi),%esi
mov    %edx,0x8(%esp)
movl   $0x804f45e,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
lea    0x0(%esi),%esi
movl   $0x804f3e5,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae1a <__sprintf_chk@plt+0x1b7a>
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0x8(%esp)
movl   $0x804f3f3,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae1a <__sprintf_chk@plt+0x1b7a>
lea    0x0(%esi),%esi
movl   $0x804ed70,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae1a <__sprintf_chk@plt+0x1b7a>
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,0x8(%esp)
movl   $0x804edbc,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804add9 <__sprintf_chk@plt+0x1b39>
mov    %edx,0x8(%esp)
movl   $0x804ed50,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ae90 <__sprintf_chk@plt+0x1bf0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x26c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x25c(%esp)
xor    %eax,%eax
call   8049100 <__errno_location@plt>
movl   $0x8,0x24(%esp)
movl   $0x10,0x34(%esp)
movl   $0x1,0x3c(%esp)
movl   $0x0,0x48(%esp)
movl   $0x200,0x44(%esp)
mov    %eax,%esi
mov    (%eax),%eax
movl   $0x2040,0x8(%esp)
mov    %eax,0x1c(%esp)
lea    0x28(%esp),%eax
mov    %eax,0x20(%esp)
lea    0x4c(%esp),%eax
mov    %eax,0x30(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x38(%esp)
lea    0x5c(%esp),%eax
mov    %eax,0x40(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8053408,%eax
mov    %eax,(%esp)
call   80491c0 <recvmsg@plt>
test   %eax,%eax
js     804b2c0 <__sprintf_chk@plt+0x2020>
mov    0x44(%esp),%ebp
cmp    $0xb,%ebp
jbe    804b33d <__sprintf_chk@plt+0x209d>
mov    0x40(%esp),%edx
test   %edx,%edx
je     804b33d <__sprintf_chk@plt+0x209d>
mov    (%edx),%ecx
xor    %ebx,%ebx
add    %edx,%ebp
mov    0x4(%edx),%edi
test   %edi,%edi
jne    804b253 <__sprintf_chk@plt+0x1fb3>
cmpl   $0xb,0x8(%edx)
lea    0xc(%edx),%edi
cmove  %edi,%ebx
cmp    $0xb,%ecx
jbe    804b278 <__sprintf_chk@plt+0x1fd8>
add    $0x3,%ecx
and    $0xfffffffc,%ecx
add    %ecx,%edx
lea    0xc(%edx),%ecx
cmp    %ecx,%ebp
jb     804b278 <__sprintf_chk@plt+0x1fd8>
mov    (%edx),%ecx
lea    0x3(%ecx),%edi
and    $0xfffffffc,%edi
add    %edx,%edi
cmp    %edi,%ebp
jae    804b242 <__sprintf_chk@plt+0x1fa2>
lea    0x0(%esi),%esi
test   %ebx,%ebx
je     804b33d <__sprintf_chk@plt+0x209d>
movzbl 0x4(%ebx),%ecx
cmp    $0x1,%cl
je     804b2c8 <__sprintf_chk@plt+0x2028>
xor    %edx,%edx
cmp    $0x2,%cl
je     804b320 <__sprintf_chk@plt+0x2080>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
mov    %edx,%eax
mov    0x25c(%esp),%esi
xor    %gs:0x14,%esi
jne    804b400 <__sprintf_chk@plt+0x2160>
add    $0x26c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
jmp    804b294 <__sprintf_chk@plt+0x1ff4>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8065470,%eax
mov    $0xffffffff,%edx
test   $0x10,%al
jne    804b294 <__sprintf_chk@plt+0x1ff4>
test   $0x1,%al
jne    804b348 <__sprintf_chk@plt+0x20a8>
mov    (%ebx),%eax
cmp    $0x5a,%eax
je     804b37b <__sprintf_chk@plt+0x20db>
mov    %eax,(%esp)
call   8049030 <strerror@plt>
movl   $0x804f6aa,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80522c0,%eax
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
addl   $0x1,0x8065550
mov    $0xffffffff,%edx
jmp    804b294 <__sprintf_chk@plt+0x1ff4>
nop
cmp    $0x7,%eax
jbe    804b330 <__sprintf_chk@plt+0x2090>
mov    0x8063424,%eax
cmp    %eax,0x50(%esp)
je     804b3a4 <__sprintf_chk@plt+0x2104>
movl   $0x0,0x1c(%esp)
jmp    804b294 <__sprintf_chk@plt+0x1ff4>
call   8049250 <abort@plt>
lea    0x0(%esi),%esi
xor    %ebx,%ebx
mov    $0x1,%edi
nop
mov    %edi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f6c2(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
je     804b350 <__sprintf_chk@plt+0x20b0>
shr    $0x1f,%eax
test   %al,%al
jne    804b350 <__sprintf_chk@plt+0x20b0>
jmp    804b30e <__sprintf_chk@plt+0x206e>
mov    0x8(%ebx),%eax
movl   $0x804f128,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80522c0,%eax
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
jmp    804b30e <__sprintf_chk@plt+0x206e>
cmpb   $0x8,0x28(%esp)
jne    804b330 <__sprintf_chk@plt+0x2090>
movzwl 0x2c(%esp),%eax
cmp    0x806555c,%eax
jne    804b330 <__sprintf_chk@plt+0x2090>
movzwl 0x2e(%esp),%eax
ror    $0x8,%ax
movzwl %ax,%eax
call   804a5c0 <__sprintf_chk@plt+0x1320>
mov    0x8065470,%eax
addl   $0x1,0x8065550
test   $0x10,%al
jne    804b3f0 <__sprintf_chk@plt+0x2150>
test   $0x1,%al
je     804b405 <__sprintf_chk@plt+0x2165>
mov    $0x2,%edx
mov    $0x804f6c1,%eax
call   804a6a0 <__sprintf_chk@plt+0x1400>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
mov    $0x1,%eax
jmp    804b29c <__sprintf_chk@plt+0x1ffc>
call   8048f40 <__stack_chk_fail@plt>
call   804c920 <__sprintf_chk@plt+0x3680>
mov    0x14(%ebx),%eax
movzwl 0x2e(%esp),%edi
ror    $0x8,%di
movzwl %di,%edi
call   804a6e0 <__sprintf_chk@plt+0x1440>
mov    %edi,0xc(%esp)
movl   $0x804f6c4,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
movzbl 0x5(%ebx),%eax
mov    0x8(%ebx),%ecx
movzbl 0x6(%ebx),%edx
movl   $0x0,(%esp)
call   804ad60 <__sprintf_chk@plt+0x1ac0>
mov    0x8052300,%eax
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
jmp    804b3f0 <__sprintf_chk@plt+0x2150>
push   %ebp
xor    %eax,%eax
push   %edi
xor    %ebp,%ebp
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    %ax,0x8053422
movzwl 0x806551c,%eax
movb   $0x8,0x8053420
movb   $0x0,0x8053421
lea    0x1(%eax),%ecx
mov    %ecx,%eax
movzwl %cx,%edx
ror    $0x8,%ax
mov    %ax,0x8053426
mov    0x806555c,%eax
shr    $0x5,%edx
mov    %ax,0x8053424
mov    $0x1,%eax
shl    %cl,%eax
not    %eax
and    %eax,0x8063460(,%edx,4)
mov    0x806546c,%eax
test   %eax,%eax
je     804b4f9 <__sprintf_chk@plt+0x2259>
testb  $0x10,0x8065471
je     804b5b8 <__sprintf_chk@plt+0x2318>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    0x806546c,%ebp
mov    %eax,0x8053428
mov    %edx,0x805342c
mov    0x8052288,%eax
lea    0x8(%eax),%esi
cmp    $0x1,%esi
jle    804b655 <__sprintf_chk@plt+0x23b5>
add    $0x6,%eax
xor    %edx,%edx
mov    %eax,%edi
shr    %edi
mov    %eax,0xc(%esp)
lea    0x8053422(%edi,%edi,1),%ebx
mov    $0x8053420,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2,%eax
movzwl -0x2(%eax),%ecx
add    %ecx,%edx
cmp    %ebx,%eax
jne    804b528 <__sprintf_chk@plt+0x2288>
mov    0xc(%esp),%eax
neg    %edi
lea    (%eax,%edi,2),%eax
cmp    $0x1,%eax
je     804b5d8 <__sprintf_chk@plt+0x2338>
mov    %edx,%eax
movzwl %dx,%edx
sar    $0x10,%eax
add    %eax,%edx
mov    %edx,%eax
sar    $0x10,%eax
add    %eax,%edx
test   %ebp,%ebp
not    %edx
mov    %dx,0x8053422
je     804b56e <__sprintf_chk@plt+0x22ce>
testb  $0x10,0x8065471
je     804b5e8 <__sprintf_chk@plt+0x2348>
mov    0x8053404,%eax
movl   $0x80521c8,0x4(%esp)
mov    %esi,0x80521c4
mov    %eax,0x80521dc
mov    0x80533d4,%eax
mov    %eax,0x8(%esp)
mov    0x8053408,%eax
mov    %eax,(%esp)
call   8049180 <sendmsg@plt>
xor    %edx,%edx
movl   $0x0,0x80533d4
00
cmp    %eax,%esi
cmovne %eax,%edx
add    $0x2c,%esp
pop    %ebx
mov    %edx,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
movl   $0x0,0x8053428
00
mov    %eax,%ebp
movl   $0x0,0x805342c
00
jmp    804b4f9 <__sprintf_chk@plt+0x2259>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ebx),%eax
add    %eax,%edx
jmp    804b547 <__sprintf_chk@plt+0x22a7>
lea    0x0(%esi),%esi
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,0x8053428
movzwl 0x8053422,%eax
mov    %edx,0x805342c
movzwl 0x18(%esp),%edx
not    %eax
movzwl %ax,%eax
add    %edx,%eax
movzwl 0x1a(%esp),%edx
add    %edx,%eax
movzwl 0x1c(%esp),%edx
add    %edx,%eax
movzwl 0x1e(%esp),%edx
add    %eax,%edx
mov    %edx,%eax
movzwl %dx,%edx
sar    $0x10,%eax
add    %edx,%eax
mov    %eax,%edx
sar    $0x10,%edx
add    %edx,%eax
not    %eax
mov    %ax,0x8053422
jmp    804b56e <__sprintf_chk@plt+0x22ce>
mov    %esi,%eax
xor    %edx,%edx
mov    $0x8053420,%ebx
jmp    804b53e <__sprintf_chk@plt+0x229e>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x60(%esp),%eax
mov    0x64(%esp),%edi
mov    0x8(%eax),%eax
mov    (%eax),%ebp
movzbl 0x0(%ebp),%eax
and    $0xf,%eax
lea    0x0(,%eax,4),%esi
lea    0x7(%esi),%edx
cmp    %edi,%edx
jge    804b798 <__sprintf_chk@plt+0x24f8>
cmp    $0x4,%eax
jle    804b798 <__sprintf_chk@plt+0x24f8>
sub    %esi,%edi
mov    %edi,%ecx
cmp    $0x1,%ecx
mov    %edi,0x2c(%esp)
lea    0x0(%ebp,%esi,1),%edi
jle    804b9a0 <__sprintf_chk@plt+0x2700>
lea    -0x2(%ecx),%edx
mov    %edi,%eax
mov    %edx,0x28(%esp)
shr    %edx
xor    %ecx,%ecx
mov    %edx,0x24(%esp)
lea    0x2(%edi,%edx,2),%edx
movzwl (%eax),%ebx
add    $0x2,%eax
add    %ebx,%ecx
cmp    %edx,%eax
jne    804b6d0 <__sprintf_chk@plt+0x2430>
mov    0x24(%esp),%edx
mov    0x28(%esp),%ebx
lea    0x2(%edi,%edx,2),%eax
neg    %edx
lea    (%ebx,%edx,2),%edx
cmp    $0x1,%edx
je     804b8b0 <__sprintf_chk@plt+0x2610>
movzbl (%edi),%eax
test   %al,%al
je     804b7f0 <__sprintf_chk@plt+0x2550>
movzwl %cx,%edx
sar    $0x10,%ecx
add    %edx,%ecx
mov    %ecx,%edx
sar    $0x10,%edx
add    %edx,%ecx
not    %ecx
movzwl %cx,%esi
lea    -0x3(%eax),%ecx
cmp    $0x9,%cl
ja     804b8ce <__sprintf_chk@plt+0x262e>
mov    $0x1,%edx
shl    %cl,%edx
test   $0x307,%edx
je     804b8c0 <__sprintf_chk@plt+0x2620>
movzbl 0x8(%edi),%edx
mov    $0x1,%ebx
mov    0x2c(%esp),%ecx
and    $0xf,%edx
cmp    $0x23,%ecx
jbe    804b7a6 <__sprintf_chk@plt+0x2506>
movzbl %dl,%edx
lea    0x10(,%edx,4),%edx
cmp    %edx,%ecx
jl     804b7a6 <__sprintf_chk@plt+0x2506>
lea    -0x8(%edi,%edx,1),%ebp
cmpb   $0x8,0x0(%ebp)
jne    804b7a6 <__sprintf_chk@plt+0x2506>
mov    0x8063424,%ecx
cmp    %ecx,0x18(%edi)
jne    804b7a6 <__sprintf_chk@plt+0x2506>
movzwl 0x4(%ebp),%edx
cmp    0x806555c,%edx
jne    804b7a6 <__sprintf_chk@plt+0x2506>
sub    $0x4,%eax
cmp    $0x1,%al
jbe    804ba6d <__sprintf_chk@plt+0x27cd>
movzwl 0x6(%ebp),%eax
xor    %bl,%bl
ror    $0x8,%ax
movzwl %ax,%eax
call   804a5c0 <__sprintf_chk@plt+0x1320>
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
nop
testb  $0x1,0x8065471
mov    $0x1,%ebx
jne    804b7b0 <__sprintf_chk@plt+0x2510>
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x68(%esp),%eax
mov    0x4(%eax),%eax
call   804a6e0 <__sprintf_chk@plt+0x1440>
mov    %edi,0xc(%esp)
movl   $0x804f158,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    0x80522c0,%eax
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
add    $0x4c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movzwl 0x4(%edi),%eax
mov    $0x1,%ebx
cmp    0x806555c,%eax
jne    804b7a6 <__sprintf_chk@plt+0x2506>
mov    0x68(%esp),%eax
mov    0x4(%eax),%eax
call   804a6e0 <__sprintf_chk@plt+0x1440>
movzwl 0x6(%edi),%edx
movl   $0x804a670,0x20(%esp)
movl   $0x0,0x14(%esp)
ror    $0x8,%dx
movzwl %dx,%edx
mov    %eax,0x1c(%esp)
mov    0x6c(%esp),%eax
mov    %eax,0x18(%esp)
movzbl 0x8(%ebp),%eax
mov    %edx,0xc(%esp)
movl   $0x8,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0x8(%esp)
call   804d5f0 <__sprintf_chk@plt+0x4350>
test   %eax,%eax
mov    %eax,%ebx
jne    804ba59 <__sprintf_chk@plt+0x27b9>
mov    0x8065470,%eax
test   $0x20,%ah
jne    804ba20 <__sprintf_chk@plt+0x2780>
test   $0x1,%al
jne    804b950 <__sprintf_chk@plt+0x26b0>
lea    0x14(%ebp),%eax
mov    %esi,%edx
call   804a7e0 <__sprintf_chk@plt+0x1540>
mov    0x8052300,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
mov    0x8052300,%eax
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
lea    0x0(%esi,%eiz,1),%esi
movzbl (%eax),%eax
add    %eax,%ecx
jmp    804b6f6 <__sprintf_chk@plt+0x2456>
lea    0x0(%esi),%esi
and    $0x20,%edx
mov    $0x1,%ebx
jne    804b7a6 <__sprintf_chk@plt+0x2506>
mov    0x8065470,%eax
mov    %eax,%edx
and    $0x111,%edx
cmp    $0x1,%edx
je     804b957 <__sprintf_chk@plt+0x26b7>
test   $0x1,%ah
je     804b950 <__sprintf_chk@plt+0x26b0>
mov    0x8065528,%edx
test   %edx,%edx
jne    804b950 <__sprintf_chk@plt+0x26b0>
test   $0x80000,%eax
jne    804b9e3 <__sprintf_chk@plt+0x2743>
mov    0x68(%esp),%eax
mov    0x4(%eax),%eax
call   804a6e0 <__sprintf_chk@plt+0x1440>
movl   $0x804f710,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
test   %esi,%esi
je     804b935 <__sprintf_chk@plt+0x2695>
movl   $0x804f6ef,(%esp)
xor    %ebx,%ebx
call   8049020 <puts@plt>
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
mov    0x4(%edi),%ecx
movzbl 0x1(%edi),%edx
movzbl (%edi),%eax
mov    %edi,(%esp)
bswap  %ecx
call   804ad60 <__sprintf_chk@plt+0x1ac0>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
xor    %ebx,%ebx
test   %esi,%esi
jne    804b9ab <__sprintf_chk@plt+0x270b>
mov    $0x2,%si
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f6fe(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
cmp    $0x1,%ebx
jbe    804b968 <__sprintf_chk@plt+0x26c8>
shr    $0x1f,%eax
test   %al,%al
jne    804b968 <__sprintf_chk@plt+0x26c8>
xor    %ebx,%ebx
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ecx,%edx
mov    %edi,%eax
xor    %ecx,%ecx
jmp    804b6ed <__sprintf_chk@plt+0x244d>
mov    $0x3,%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f701(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
cmp    $0x2,%ebx
jbe    804b9b0 <__sprintf_chk@plt+0x2710>
shr    $0x1f,%eax
test   %al,%al
jne    804b9b0 <__sprintf_chk@plt+0x2710>
xor    %ebx,%ebx
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
lea    0x38(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x3c(%esp),%eax
movl   $0x804f705,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804b8fa <__sprintf_chk@plt+0x265a>
mov    0x8052300,%eax
movl   $0x7,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
testb  $0x1,0x8065470
je     804b878 <__sprintf_chk@plt+0x25d8>
mov    0x8052300,%eax
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
mov    0x8065470,%eax
jmp    804b870 <__sprintf_chk@plt+0x25d0>
mov    0x8052300,%eax
xor    %ebx,%ebx
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
testb  $0x11,0x8065470
jne    804b7a6 <__sprintf_chk@plt+0x2506>
call   804c920 <__sprintf_chk@plt+0x3680>
mov    0x68(%esp),%eax
movzwl 0x6(%ebp),%ebx
ror    $0x8,%bx
movzwl %bx,%ebx
mov    0x4(%eax),%eax
call   804a6e0 <__sprintf_chk@plt+0x1440>
mov    %ebx,0xc(%esp)
movl   $0x804f6d9,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
test   %esi,%esi
je     804baca <__sprintf_chk@plt+0x282a>
movl   $0x804f6ef,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x4(%edi),%ecx
mov    $0x1,%ebx
movzbl 0x1(%edi),%edx
movzbl (%edi),%eax
mov    %edi,(%esp)
bswap  %ecx
call   804ad60 <__sprintf_chk@plt+0x1ac0>
jmp    804b7a6 <__sprintf_chk@plt+0x2506>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052328,%ecx
test   %ecx,%ecx
jne    804bb68 <__sprintf_chk@plt+0x28c8>
sub    $0x2c,%esp
movzwl 0x806555c,%eax
mov    $0x15,%edx
ror    $0x8,%ax
movzwl %ax,%eax
mov    %eax,0x8052194
mov    0x8053408,%eax
movl   $0x8,0x10(%esp)
movl   $0x8052160,0xc(%esp)
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
movl   $0x1,0x8052328
00
mov    %dx,0x8052190
movb   $0x0,0x8052192
movb   $0x1,0x8052193
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jne    804bb70 <__sprintf_chk@plt+0x28d0>
add    $0x2c,%esp
repz ret
lea    0x0(%esi),%esi
movl   $0x804f184,(%esp)
call   8048fa0 <perror@plt>
add    $0x2c,%esp
jmp    804bb68 <__sprintf_chk@plt+0x28c8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
movl   $0x1,0x8065570
00
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x1,0x806553c
00
mov    0x80533d0,%eax
test   %eax,%eax
jne    804bbb5 <__sprintf_chk@plt+0x2915>
repz ret
sub    $0x1c,%esp
movl   $0x0,0x4(%esp)
movl   $0x8065480,(%esp)
call   8049160 <__longjmp_chk@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
call   80490d0 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804bd9d <__sprintf_chk@plt+0x2afd>
call   8049080 <cap_init@plt>
test   %eax,%eax
mov    %eax,%esi
je     804bd85 <__sprintf_chk@plt+0x2ae5>
lea    0x2c(%esp),%edi
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0xc,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
call   8048ff0 <cap_get_flag@plt>
mov    0x2c(%esp),%edx
test   %edx,%edx
jne    804bce0 <__sprintf_chk@plt+0x2a40>
mov    %edi,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0xd,0x4(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
call   8048ff0 <cap_get_flag@plt>
mov    0x2c(%esp),%eax
test   %eax,%eax
jne    804bd10 <__sprintf_chk@plt+0x2a70>
mov    %esi,(%esp)
call   8049010 <cap_set_proc@plt>
test   %eax,%eax
js     804bd55 <__sprintf_chk@plt+0x2ab5>
movl   $0x1,0x4(%esp)
movl   $0x8,(%esp)
call   8049120 <prctl@plt>
test   %eax,%eax
js     804bd3d <__sprintf_chk@plt+0x2a9d>
call   8048f50 <getuid@plt>
mov    %eax,(%esp)
call   80491b0 <setuid@plt>
test   %eax,%eax
js     804bd6d <__sprintf_chk@plt+0x2acd>
movl   $0x0,0x4(%esp)
movl   $0x8,(%esp)
call   8049120 <prctl@plt>
test   %eax,%eax
js     804bd3d <__sprintf_chk@plt+0x2a9d>
mov    %esi,(%esp)
call   80491d0 <cap_free@plt>
mov    %ebx,(%esp)
call   80491d0 <cap_free@plt>
call   8048f50 <getuid@plt>
mov    %eax,0x8065528
call   8048f60 <geteuid@plt>
mov    %eax,0x8063444
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
movl   $0x1,0x10(%esp)
movl   $0x805227c,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491f0 <cap_set_flag@plt>
jmp    804bc28 <__sprintf_chk@plt+0x2988>
lea    0x0(%esi),%esi
movl   $0x1,0x10(%esp)
movl   $0x8052280,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   80491f0 <cap_set_flag@plt>
jmp    804bc58 <__sprintf_chk@plt+0x29b8>
movl   $0x804f8b9,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
movl   $0x804f8a6,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
movl   $0x804f8c5,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
movl   $0x804f897,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
movl   $0x804f884,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x34,%esp
call   80490d0 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     804be68 <__sprintf_chk@plt+0x2bc8>
lea    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x40(%esp),%eax
movl   $0x1,0x8(%esp)
mov    %ebx,(%esp)
movl   $0x0,0x2c(%esp)
mov    %eax,0x4(%esp)
call   8048ff0 <cap_get_flag@plt>
mov    0x2c(%esp),%ecx
test   %ecx,%ecx
jne    804be28 <__sprintf_chk@plt+0x2b88>
mov    0x44(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
setne  %al
mov    %eax,%esi
neg    %esi
mov    %ebx,(%esp)
call   80491d0 <cap_free@plt>
add    $0x34,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
lea    0x40(%esp),%eax
mov    %eax,0xc(%esp)
call   80491f0 <cap_set_flag@plt>
mov    %ebx,(%esp)
call   8049010 <cap_set_proc@plt>
test   %eax,%eax
js     804be7b <__sprintf_chk@plt+0x2bdb>
mov    %ebx,(%esp)
xor    %esi,%esi
call   80491d0 <cap_free@plt>
jmp    804be13 <__sprintf_chk@plt+0x2b73>
movl   $0x804f884,(%esp)
mov    $0xffffffff,%esi
call   8048fa0 <perror@plt>
jmp    804be1b <__sprintf_chk@plt+0x2b7b>
movl   $0x804f8a6,(%esp)
mov    $0xffffffff,%esi
call   8048fa0 <perror@plt>
jmp    804be13 <__sprintf_chk@plt+0x2b73>
xchg   %ax,%ax
push   %ebx
sub    $0x18,%esp
call   8049080 <cap_init@plt>
mov    %eax,(%esp)
mov    %eax,%ebx
call   8049010 <cap_set_proc@plt>
test   %eax,%eax
js     804beb4 <__sprintf_chk@plt+0x2c14>
mov    %ebx,(%esp)
call   80491d0 <cap_free@plt>
add    $0x18,%esp
pop    %ebx
ret
movl   $0x804f8a6,(%esp)
call   8048fa0 <perror@plt>
movl   $0xffffffff,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xac,%esp
mov    0xc0(%esp),%eax
sub    $0x41,%eax
cmp    $0x36,%eax
ja     804c6b0 <__sprintf_chk@plt+0x3410>
jmp    *0x804fe64(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052300,%eax
movl   $0x0,0x4(%esp)
orl    $0x1,0x8065470
mov    %eax,(%esp)
call   8048e60 <setbuf@plt>
orl    $0x4,0x8065470
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0xac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052304,%esi
orl    $0x8,0x8065470
movsbl (%esi),%ebx
test   %bl,%bl
je     804bf65 <__sprintf_chk@plt+0x2cc5>
call   8049290 <__ctype_b_loc@plt>
mov    (%eax),%edx
mov    %esi,%eax
lea    0x0(%esi),%esi
testb  $0x10,0x1(%edx,%ebx,2)
je     804c762 <__sprintf_chk@plt+0x34c2>
add    $0x1,%eax
movsbl (%eax),%ebx
test   %bl,%bl
jne    804bf50 <__sprintf_chk@plt+0x2cb0>
lea    0x9c(%esp),%edx
mov    %edx,0x44(%esp)
lea    0x98(%esp),%edx
mov    %edx,0x40(%esp)
lea    0x94(%esp),%edx
mov    %edx,0x3c(%esp)
lea    0x90(%esp),%edx
mov    %edx,0x38(%esp)
lea    0x8c(%esp),%edx
mov    %edx,0x34(%esp)
lea    0x88(%esp),%edx
mov    %edx,0x30(%esp)
lea    0x84(%esp),%edx
mov    %edx,0x2c(%esp)
lea    0x80(%esp),%edx
mov    %edx,0x28(%esp)
lea    0x7c(%esp),%edx
mov    %edx,0x24(%esp)
lea    0x78(%esp),%edx
mov    %edx,0x20(%esp)
lea    0x74(%esp),%edx
mov    %edx,0x1c(%esp)
lea    0x70(%esp),%edx
mov    %edx,0x18(%esp)
lea    0x6c(%esp),%edx
mov    %edx,0x14(%esp)
lea    0x68(%esp),%edx
lea    0x60(%esp),%eax
mov    %edx,0x10(%esp)
lea    0x64(%esp),%edx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x804fbc4,0x4(%esp)
mov    %esi,(%esp)
call   80491a0 <sscanf@plt>
test   %eax,%eax
mov    %eax,%ebx
jle    804c1f2 <__sprintf_chk@plt+0x2f52>
mov    $0xfffffff8,%eax
sub    %ebx,%eax
add    0x8052200,%eax
mov    %eax,%ebp
js     804c1f2 <__sprintf_chk@plt+0x2f52>
movzbl 0x70(%esp),%edx
movzbl 0x60(%esp),%eax
movzbl 0x64(%esp),%ecx
movzbl 0x68(%esp),%esi
mov    %dl,0x48(%esp)
movzbl 0x74(%esp),%edx
movzbl 0x6c(%esp),%edi
mov    %dl,0x50(%esp)
movzbl 0x78(%esp),%edx
mov    %dl,0x51(%esp)
movzbl 0x7c(%esp),%edx
mov    %dl,0x52(%esp)
movzbl 0x80(%esp),%edx
mov    %dl,0x53(%esp)
movzbl 0x84(%esp),%edx
mov    %dl,0x54(%esp)
movzbl 0x88(%esp),%edx
mov    %dl,0x55(%esp)
movzbl 0x8c(%esp),%edx
mov    %dl,0x56(%esp)
movzbl 0x90(%esp),%edx
mov    %dl,0x57(%esp)
movzbl 0x94(%esp),%edx
mov    %dl,0x58(%esp)
movzbl 0x98(%esp),%edx
mov    %dl,0x59(%esp)
movzbl 0x9c(%esp),%edx
mov    %dl,0x5a(%esp)
xor    %edx,%edx
cmp    $0x1,%ebx
je     804c6b8 <__sprintf_chk@plt+0x3418>
cmp    $0x2,%ebx
je     804c6d0 <__sprintf_chk@plt+0x3430>
cmp    $0x3,%ebx
je     804c73c <__sprintf_chk@plt+0x349c>
cmp    $0x4,%ebx
je     804c708 <__sprintf_chk@plt+0x3468>
mov    %al,0x5b(%esp)
mov    %esi,%eax
movzbl 0x5b(%esp),%esi
mov    %al,0x4f(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
cmp    $0x5,%ebx
mov    %al,0x8053428(%edx)
movzbl 0x4f(%esp),%eax
mov    %cl,0x8053429(%edx)
mov    %al,0x805342a(%edx)
mov    %edi,%eax
mov    %al,0x805342b(%edx)
movzbl 0x48(%esp),%eax
mov    %al,0x805342c(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x50(%esp),%eax
cmp    $0x6,%ebx
mov    %al,0x805342d(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x51(%esp),%eax
cmp    $0x7,%ebx
mov    %al,0x805342e(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x52(%esp),%eax
cmp    $0x8,%ebx
mov    %al,0x805342f(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x53(%esp),%eax
cmp    $0x9,%ebx
mov    %al,0x8053430(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x54(%esp),%eax
cmp    $0xa,%ebx
mov    %al,0x8053431(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x55(%esp),%eax
cmp    $0xb,%ebx
mov    %al,0x8053432(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x56(%esp),%eax
cmp    $0xc,%ebx
mov    %al,0x8053433(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x57(%esp),%eax
cmp    $0xd,%ebx
mov    %al,0x8053434(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x58(%esp),%eax
cmp    $0xe,%ebx
mov    %al,0x8053435(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x59(%esp),%eax
cmp    $0xf,%ebx
mov    %al,0x8053436(%edx)
je     804c1e8 <__sprintf_chk@plt+0x2f48>
movzbl 0x5a(%esp),%eax
mov    %al,0x8053437(%edx)
add    %ebx,%edx
cmp    %ebp,%edx
jle    804c100 <__sprintf_chk@plt+0x2e60>
testb  $0x10,0x8065470
jne    804bf20 <__sprintf_chk@plt+0x2c80>
movl   $0x804f92f,0x4(%esp)
xor    %esi,%esi
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
test   %ebx,%ebx
jle    804c246 <__sprintf_chk@plt+0x2fa6>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x8053428(%esi),%eax
add    $0x1,%esi
movl   $0x804f93b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
cmp    %ebx,%esi
jne    804c220 <__sprintf_chk@plt+0x2f80>
movl   $0xa,(%esp)
call   80490f0 <putchar@plt>
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
lea    0x60(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
mov    %eax,(%esp)
call   8049070 <strtoul@plt>
test   %eax,%eax
mov    %eax,0x8065524
js     804c7c4 <__sprintf_chk@plt+0x3524>
mov    0x60(%esp),%eax
cmpb   $0x0,(%eax)
jne    804c7c4 <__sprintf_chk@plt+0x3524>
orl    $0x40000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
xchg   %ax,%ax
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8065558
jle    804c7f5 <__sprintf_chk@plt+0x3555>
cmp    $0x10000,%eax
jle    804c6e8 <__sprintf_chk@plt+0x3448>
mov    0x8065528,%ecx
movl   $0x10000,0x8065558
00
test   %ecx,%ecx
je     804bf20 <__sprintf_chk@plt+0x2c80>
mov    0x80522c0,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fb68,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
xchg   %ax,%ax
call   8049100 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebx
lea    0x60(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x8052304,%eax
mov    %eax,(%esp)
call   8049130 <strtod@plt>
mov    (%ebx),%ebx
test   %ebx,%ebx
jne    804c80a <__sprintf_chk@plt+0x356a>
mov    0x60(%esp),%eax
cmpb   $0x0,(%eax)
jne    804c80e <__sprintf_chk@plt+0x356e>
fld    %st(0)
fabs
fldl   0x804ff40
fucomip %st(1),%st
fstp   %st(0)
jb     804c812 <__sprintf_chk@plt+0x3572>
fldz
fucomip %st(1),%st
ja     804c816 <__sprintf_chk@plt+0x3576>
fldl   0x804ff48
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    804c81a <__sprintf_chk@plt+0x357a>
fnstcw 0x5e(%esp)
fmuls  0x804ff50
orl    $0x2,0x8065470
movzwl 0x5e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x5c(%esp)
fldcw  0x5c(%esp)
fistpl 0x805229c
fldcw  0x5e(%esp)
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
lea    0x0(%esi,%eiz,1),%esi
orl    $0x40,0x8065470
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8065520
jg     804bf20 <__sprintf_chk@plt+0x2c80>
mov    0x80522c0,%eax
movl   $0x29,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fb10,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x2000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
cmp    $0x863,%eax
mov    %eax,0x8052298
ja     804c793 <__sprintf_chk@plt+0x34f3>
imul   $0x3e8,%eax,%eax
mov    %eax,0x8052298
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
lea    0x0(%esi),%esi
movl   $0x80522a0,0x8(%esp)
movl   $0x804f551,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
movl   $0x0,(%esp)
call   8049060 <exit@plt>
orl    $0x8000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
orl    $0x4000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
test   %eax,%eax
mov    %eax,0x80533d8
jns    804bf20 <__sprintf_chk@plt+0x2c80>
mov    0x80522c0,%eax
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f900,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x100,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
orl    $0x20000,0x8065470
00
mov    %eax,(%esp)
call   8049260 <strtol@plt>
cmp    $0xff,%eax
mov    %eax,0x8065548
jbe    804bf20 <__sprintf_chk@plt+0x2c80>
mov    %eax,0xc(%esp)
movl   $0x804f940,0x8(%esp)
mov    0x80522c0,%eax
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8052288
js     804c84d <__sprintf_chk@plt+0x35ad>
mov    0x8052200,%edi
lea    -0x7(%edi),%edx
cmp    %eax,%edx
jg     804bf20 <__sprintf_chk@plt+0x2c80>
mov    %eax,0xc(%esp)
movl   $0x804fc20,0x8(%esp)
jmp    804c57b <__sprintf_chk@plt+0x32db>
lea    0x0(%esi,%eiz,1),%esi
orl    $0x80,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
orl    $0x10,0x8065470
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8052304,%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049260 <strtol@plt>
test   %eax,%eax
mov    %eax,0x8065468
jg     804bf20 <__sprintf_chk@plt+0x2c80>
mov    0x80522c0,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f916,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
orl    $0x100000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
orl    $0x10000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
orl    $0x80000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
orl    $0x1000,0x8065470
00
jmp    804bf20 <__sprintf_chk@plt+0x2c80>
nop
call   8049250 <abort@plt>
lea    0x0(%esi),%esi
mov    %al,0x8053428(%edx)
add    $0x1,%edx
cmp    %ebp,%edx
jle    804c6b8 <__sprintf_chk@plt+0x3418>
jmp    804c1f2 <__sprintf_chk@plt+0x2f52>
lea    0x0(%esi),%esi
mov    %al,0x8053428(%edx)
add    $0x2,%edx
mov    %cl,0x8053427(%edx)
cmp    %ebp,%edx
jle    804c6d0 <__sprintf_chk@plt+0x3430>
jmp    804c1f2 <__sprintf_chk@plt+0x2f52>
mov    0x8065528,%edx
test   %edx,%edx
je     804bf20 <__sprintf_chk@plt+0x2c80>
cmp    $0x3,%eax
jle    804bf20 <__sprintf_chk@plt+0x2c80>
jmp    804c2ed <__sprintf_chk@plt+0x304d>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,0x48(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%ebx
add    $0x4,%edx
mov    %bl,0x8053426(%edx)
mov    %edi,%ebx
mov    %al,0x8053424(%edx)
mov    %cl,0x8053425(%edx)
mov    %bl,0x8053427(%edx)
cmp    %ebp,%edx
jle    804c710 <__sprintf_chk@plt+0x3470>
mov    0x48(%esp),%ebx
jmp    804c1f2 <__sprintf_chk@plt+0x2f52>
mov    %ebx,%edi
xchg   %ax,%ax
mov    %esi,%ebx
add    $0x3,%edx
mov    %al,0x8053425(%edx)
mov    %cl,0x8053426(%edx)
mov    %bl,0x8053427(%edx)
cmp    %ebp,%edx
jle    804c740 <__sprintf_chk@plt+0x34a0>
mov    %edi,%ebx
jmp    804c1f2 <__sprintf_chk@plt+0x2f52>
mov    0x80522c0,%eax
movl   $0x30,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fb90,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x17,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f95b,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    0x80522c0,%eax
movl   $0x18,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f8e7,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
movl   $0x10000,0xc(%esp)
movl   $0x804fb3c,0x8(%esp)
jmp    804c57b <__sprintf_chk@plt+0x32db>
fstp   %st(0)
jmp    804c81c <__sprintf_chk@plt+0x357c>
fstp   %st(0)
jmp    804c81c <__sprintf_chk@plt+0x357c>
fstp   %st(0)
jmp    804c81c <__sprintf_chk@plt+0x357c>
fstp   %st(0)
jmp    804c81c <__sprintf_chk@plt+0x357c>
fstp   %st(0)
mov    0x80522c0,%eax
movl   $0x1a,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804f8cc,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
mov    %eax,0xc(%esp)
movl   $0x804fbf8,0x8(%esp)
jmp    804c57b <__sprintf_chk@plt+0x32db>
xchg   %ax,%ax
push   %ebx
sub    $0x28,%esp
mov    0x80533e4,%edx
mov    0x30(%esp),%ebx
test   %edx,%edx
jne    804c8e9 <__sprintf_chk@plt+0x3649>
mov    0x8065560,%eax
test   %eax,%eax
jne    804c8f0 <__sprintf_chk@plt+0x3650>
imul   $0x3e8,0x8052298,%ecx
00
mov    %ecx,0x80533e4
mov    $0x10624dd3,%edx
mov    %ecx,%eax
mul    %edx
shr    $0x6,%edx
test   %ebx,%ebx
js     804c89f <__sprintf_chk@plt+0x35ff>
cmp    %edx,%ebx
jae    804c8a1 <__sprintf_chk@plt+0x3601>
mov    %edx,%ebx
mov    %ecx,%eax
mov    $0x431bde83,%edx
mul    %edx
lea    0x10(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
shr    $0x12,%edx
mov    %edx,0x18(%esp)
imul   $0xf4240,%edx,%edx
movl   $0x0,(%esp)
movl   $0x0,0x10(%esp)
movl   $0x0,0x14(%esp)
sub    %edx,%ecx
mov    %ecx,0x1c(%esp)
call   8048e70 <setitimer@plt>
add    $0x28,%esp
mov    %ebx,%eax
pop    %ebx
ret
mov    0x806547c,%eax
lea    (%eax,%eax,1),%ecx
imul   $0x3e8,0x805229c,%eax
00
mov    %ecx,0x80533e4
cmp    %eax,%ecx
jae    804c88b <__sprintf_chk@plt+0x35eb>
mov    %eax,0x80533e4
mov    %eax,%ecx
jmp    804c88b <__sprintf_chk@plt+0x35eb>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x8,0x8065472
jne    804c930 <__sprintf_chk@plt+0x3690>
ret
lea    0x0(%esi),%esi
sub    $0x2c,%esp
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x1c(%esp),%eax
movl   $0x804f973,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
add    $0x2c,%esp
ret
nop
push   %esi
mov    $0x3e8,%eax
push   %ebx
sub    $0x24,%esp
mov    0x806553c,%edx
test   %edx,%edx
je     804c990 <__sprintf_chk@plt+0x36f0>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x8065520,%edx
test   %edx,%edx
je     804c9b0 <__sprintf_chk@plt+0x3710>
cmp    0x806551c,%edx
jg     804c9b0 <__sprintf_chk@plt+0x3710>
mov    0x80533d8,%edx
test   %edx,%edx
je     804c984 <__sprintf_chk@plt+0x36e4>
lea    0x0(%esi,%eiz,1),%esi
mov    0x806552c,%esi
movl   $0x0,0x4(%esp)
test   %esi,%esi
jne    804ca68 <__sprintf_chk@plt+0x37c8>
movl   $0x806552c,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x8065558,%eax
sub    $0x1,%eax
imul   0x805229c,%eax
mov    %eax,0x80533e0
mov    0x8065470,%eax
test   $0x100000,%eax
je     804caf0 <__sprintf_chk@plt+0x3850>
mov    0x806551c,%edx
test   %edx,%edx
jle    804caf0 <__sprintf_chk@plt+0x3850>
movzwl %dx,%ecx
mov    $0x1,%ebx
shl    %cl,%ebx
shr    $0x5,%ecx
test   %ebx,0x8063460(,%ecx,4)
jne    804caf0 <__sprintf_chk@plt+0x3850>
test   $0x80000,%eax
jne    804ce06 <__sprintf_chk@plt+0x3b66>
mov    %edx,%eax
sar    $0x1f,%eax
shr    $0x10,%eax
add    %eax,%edx
movzwl %dx,%edx
sub    %eax,%edx
mov    %edx,0x8(%esp)
movl   $0x804fc44,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052300,%eax
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
jmp    804caf0 <__sprintf_chk@plt+0x3850>
lea    0x0(%esi),%esi
lea    0x18(%esp),%eax
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x18(%esp),%edx
mov    0x1c(%esp),%ecx
sub    0x806552c,%edx
sub    0x8065530,%ecx
imul   $0x3e8,%edx,%ebx
mov    $0x10624dd3,%edx
mov    %ecx,%eax
imul   %edx
mov    0x805229c,%eax
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
add    %ebx,%edx
test   %eax,%eax
jne    804cb50 <__sprintf_chk@plt+0x38b0>
cmp    $0x9,%edx
jg     804cb50 <__sprintf_chk@plt+0x38b0>
mov    0x806551c,%ecx
mov    %ecx,%ebx
sub    0x8065474,%bx
js     804ce49 <__sprintf_chk@plt+0x3ba9>
movzwl %bx,%ebx
mov    0x8065558,%ecx
cmp    %ebx,%ecx
jg     804cb56 <__sprintf_chk@plt+0x38b6>
mov    $0xa,%eax
sub    %edx,%eax
jmp    804c984 <__sprintf_chk@plt+0x36e4>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    804cc03 <__sprintf_chk@plt+0x3963>
call   804b460 <__sprintf_chk@plt+0x21c0>
cmp    $0x0,%eax
je     804ccd0 <__sprintf_chk@plt+0x3a30>
xchg   %ax,%ax
jg     804ce90 <__sprintf_chk@plt+0x3bf0>
call   8049100 <__errno_location@plt>
mov    (%eax),%edx
mov    %eax,%ebx
cmp    $0xc,%edx
je     804cb90 <__sprintf_chk@plt+0x38f0>
cmp    $0x69,%edx
je     804cb90 <__sprintf_chk@plt+0x38f0>
cmp    $0xb,%edx
je     804cb78 <__sprintf_chk@plt+0x38d8>
xchg   %ax,%ax
call   804b190 <__sprintf_chk@plt+0x1ef0>
cmp    $0x0,%eax
jg     804cb78 <__sprintf_chk@plt+0x38d8>
mov    (%ebx),%edx
jne    804cae8 <__sprintf_chk@plt+0x3848>
mov    0x8052294,%ecx
test   %ecx,%ecx
je     804cae8 <__sprintf_chk@plt+0x3848>
cmp    $0x16,%edx
jne    804cae8 <__sprintf_chk@plt+0x3848>
movl   $0x0,0x8052294
00
movl   $0x0,(%ebx)
jmp    804caf0 <__sprintf_chk@plt+0x3850>
nop
mov    0x8065558,%ecx
imul   %eax,%ecx
add    0x80533e0,%edx
cmp    %edx,%ecx
cmovle %ecx,%edx
cmp    %eax,%edx
jge    804cca8 <__sprintf_chk@plt+0x3a08>
sub    %edx,%eax
jmp    804c984 <__sprintf_chk@plt+0x36e4>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x805229c,%eax
add    %eax,0x80533e0
mov    $0xa,%eax
jmp    804c984 <__sprintf_chk@plt+0x36e4>
lea    0x0(%esi),%esi
mov    0x8065544,%eax
mov    $0xc350,%edx
movl   $0x0,0x80533e0
00
cmp    $0x61a7f,%eax
jg     804cbb6 <__sprintf_chk@plt+0x3916>
test   %eax,%eax
lea    0x7(%eax),%edx
cmovns %eax,%edx
sar    $0x3,%edx
add    0x8065554,%edx
testb  $0x40,0x8065471
mov    0x805229c,%ecx
mov    %edx,0x8065554
jne    804cda7 <__sprintf_chk@plt+0x3b07>
cmp    $0x15,%ecx
mov    $0xa,%eax
jg     804cd28 <__sprintf_chk@plt+0x3a88>
mov    0x80533dc,%esi
lea    0x1(%esi),%edx
mov    %edx,0x80533dc
imul   %eax,%edx
cmp    0x8052298,%edx
jl     804c984 <__sprintf_chk@plt+0x36e4>
xor    %eax,%eax
mov    0x806551c,%esi
movzwl 0x8065474,%ebx
lea    0x1(%esi),%ecx
movzwl %cx,%edx
sub    %ebx,%edx
cmp    $0x7fff,%edx
mov    %ecx,0x806551c
jle    804cc30 <__sprintf_chk@plt+0x3990>
add    $0x1,%ecx
mov    %cx,0x8065474
test   %eax,%eax
jne    804cc80 <__sprintf_chk@plt+0x39e0>
mov    0x8065470,%eax
test   $0x10,%al
jne    804cc80 <__sprintf_chk@plt+0x39e0>
test   $0x1,%al
je     804ce5c <__sprintf_chk@plt+0x3bbc>
xor    %ebx,%ebx
mov    $0x1,%esi
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f6c2(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
je     804cc50 <__sprintf_chk@plt+0x39b0>
shr    $0x1f,%eax
test   %al,%al
jne    804cc50 <__sprintf_chk@plt+0x39b0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xa,%eax
cmpl   $0xa,0x805229c
movl   $0x0,0x80533e0
00
cmovge 0x805229c,%eax
jmp    804c984 <__sprintf_chk@plt+0x36e4>
lea    0x0(%esi),%esi
mov    0x18(%esp),%ecx
sub    %eax,%edx
mov    0x1c(%esp),%ebx
mov    %edx,0x80533e0
mov    %ecx,0x806552c
mov    %ebx,0x8065530
jmp    804c9e6 <__sprintf_chk@plt+0x3746>
lea    0x0(%esi,%eiz,1),%esi
mov    0x806551c,%eax
movzwl 0x8065474,%ecx
movl   $0x0,0x80533dc
00
add    $0x1,%eax
movzwl %ax,%edx
movzwl %cx,%ebx
sub    %ebx,%edx
cmp    $0x7fff,%edx
mov    %eax,0x806551c
jle    804cd08 <__sprintf_chk@plt+0x3a68>
lea    0x1(%eax),%ecx
mov    %cx,0x8065474
mov    0x8065470,%edx
and    $0x11,%edx
cmp    $0x1,%edx
je     804cd3e <__sprintf_chk@plt+0x3a9e>
mov    0x805229c,%eax
sub    0x80533e0,%eax
jmp    804c984 <__sprintf_chk@plt+0x36e4>
mov    %edx,%ecx
mov    %ecx,%eax
mov    $0x1f4,%edx
sar    %eax
cmp    $0x1f5,%eax
cmovge %edx,%eax
jmp    804cbe3 <__sprintf_chk@plt+0x3943>
mov    0x8052284,%edx
cmp    %edx,0x8065558
jge    804cd90 <__sprintf_chk@plt+0x3af0>
cmp    0x805228c,%edx
jle    804cd90 <__sprintf_chk@plt+0x3af0>
xor    %ebx,%ebx
mov    $0x1,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f980(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
je     804cd60 <__sprintf_chk@plt+0x3ac0>
shr    $0x1f,%eax
test   %al,%al
jne    804cd60 <__sprintf_chk@plt+0x3ac0>
jmp    804cd16 <__sprintf_chk@plt+0x3a76>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%esi
sub    %cx,%si
js     804ce7f <__sprintf_chk@plt+0x3bdf>
movzwl %si,%eax
cmp    %eax,%edx
jg     804cd54 <__sprintf_chk@plt+0x3ab4>
jmp    804cd16 <__sprintf_chk@plt+0x3a76>
test   %eax,%eax
je     804ce6d <__sprintf_chk@plt+0x3bcd>
test   %eax,%eax
lea    0x7(%eax),%ecx
cmovs  %ecx,%eax
sar    $0x3,%eax
lea    0x1f4(%edx,%eax,1),%ecx
mov    $0x10624dd3,%edx
mov    0x8065528,%ebx
mov    %ecx,%eax
imul   %edx
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
test   %ebx,%ebx
mov    %edx,0x805229c
je     804ce78 <__sprintf_chk@plt+0x3bd8>
cmp    $0xc7,%edx
jg     804cd26 <__sprintf_chk@plt+0x3a86>
movl   $0xc8,0x805229c
00
mov    $0x64,%eax
jmp    804cbe3 <__sprintf_chk@plt+0x3943>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x1c(%esp),%eax
movl   $0x804f973,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x806551c,%edx
jmp    804ca29 <__sprintf_chk@plt+0x3789>
sub    0x8065560,%ecx
mov    %ecx,%ebx
sub    0x8065550,%ebx
jmp    804cacf <__sprintf_chk@plt+0x382f>
movl   $0x804f982,(%esp)
call   8048fa0 <perror@plt>
jmp    804cc80 <__sprintf_chk@plt+0x39e0>
imul   $0x3e8,%ecx,%eax
jmp    804cdba <__sprintf_chk@plt+0x3b1a>
mov    %edx,%ecx
jmp    804cbd5 <__sprintf_chk@plt+0x3935>
sub    0x8065560,%eax
sub    0x8065550,%eax
jmp    804cd9e <__sprintf_chk@plt+0x3afe>
call   8049250 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x8065468,%eax
mov    0x40(%esp),%ebx
mov    0x44(%esp),%esi
movl   $0x4,0x2c(%esp)
test   %eax,%eax
jne    804cec5 <__sprintf_chk@plt+0x3c25>
mov    %esi,0x8065468
movl   $0x4,0x10(%esp)
lea    0x28(%esp),%edi
movl   $0x8065468,0xc(%esp)
movl   $0x7,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8048e50 <setsockopt@plt>
mov    $0x10000,%eax
imul   0x8065558,%esi
movl   $0x4,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
cmp    $0x10000,%esi
cmovge %esi,%eax
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
mov    %eax,0x28(%esp)
call   8048e50 <setsockopt@plt>
lea    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8048f80 <getsockopt@plt>
test   %eax,%eax
jne    804cf5c <__sprintf_chk@plt+0x3cbc>
cmp    0x28(%esp),%esi
jg     804cf68 <__sprintf_chk@plt+0x3cc8>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x80522c0,%eax
movl   $0x39,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fc64,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xdc,%esp
mov    0x8065470,%ecx
mov    0xf0(%esp),%esi
mov    %ecx,%eax
and    $0x3,%eax
cmp    $0x1,%eax
je     804d498 <__sprintf_chk@plt+0x41f8>
mov    0x8065528,%edi
mov    0x805229c,%ebx
test   %edi,%edi
jne    804d228 <__sprintf_chk@plt+0x3f88>
mov    $0x7fffffff,%eax
cltd
idivl  0x8065558
cmp    %eax,%ebx
jge    804d5b5 <__sprintf_chk@plt+0x4315>
mov    %ecx,%eax
test   $0x40,%al
movl   $0x1,0x20(%esp)
jne    804d460 <__sprintf_chk@plt+0x41c0>
test   $0x80,%al
jne    804d428 <__sprintf_chk@plt+0x4188>
test   $0x10,%ah
lea    0x44(%esp),%ebx
je     804d3e8 <__sprintf_chk@plt+0x4148>
test   $0x40000,%eax
jne    804d2e8 <__sprintf_chk@plt+0x4048>
mov    0x805229c,%eax
movl   $0x1,0x2c(%esp)
movl   $0x0,0x30(%esp)
cmp    $0x3e7,%eax
jg     804d058 <__sprintf_chk@plt+0x3db8>
cmp    $0xa,%eax
mov    $0xa,%edx
cmovge %eax,%edx
imul   $0x3e8,%edx,%edx
movl   $0x0,0x2c(%esp)
mov    %edx,0x30(%esp)
lea    0x2c(%esp),%edi
movl   $0x8,0x10(%esp)
mov    %edi,0xc(%esp)
movl   $0x15,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e50 <setsockopt@plt>
mov    $0xa,%ecx
mov    $0x10624dd3,%edx
cmpl   $0xa,0x805229c
cmovge 0x805229c,%ecx
movl   $0x8,0x10(%esp)
mov    %edi,0xc(%esp)
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
movl   $0x14,0x8(%esp)
movl   $0x1,0x4(%esp)
sar    $0x6,%edx
sub    %eax,%edx
mov    %edx,0x2c(%esp)
imul   $0x3e8,%edx,%edx
mov    %esi,(%esp)
sub    %edx,%ecx
imul   $0x3e8,%ecx,%ecx
mov    %ecx,0x30(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
mov    0x8065470,%eax
je     804d0f1 <__sprintf_chk@plt+0x3e51>
or     $0x8,%ah
mov    %eax,0x8065470
test   $0x8,%al
jne    804d115 <__sprintf_chk@plt+0x3e75>
mov    0x8052288,%edx
xor    %eax,%eax
test   %edx,%edx
jle    804d115 <__sprintf_chk@plt+0x3e75>
lea    0x0(%esi,%eiz,1),%esi
mov    %al,0x8053428(%eax)
add    $0x1,%eax
cmp    %edx,%eax
jne    804d108 <__sprintf_chk@plt+0x3e68>
call   8048fd0 <getpid@plt>
xor    %esi,%esi
mov    $0x23,%ecx
ror    $0x8,%ax
movzwl %ax,%eax
mov    %ebx,%edi
mov    %eax,0x806555c
mov    %esi,%eax
rep stos %eax,%es:(%edi)
mov    %ebx,%edi
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x2,(%esp)
movl   $0x804bba0,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   8049220 <sigaction@plt>
mov    %esi,%eax
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
mov    %ebx,%edi
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0xe,(%esp)
movl   $0x804bba0,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   8049220 <sigaction@plt>
mov    %esi,%eax
mov    $0x23,%ecx
rep stos %eax,%es:(%edi)
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x3,(%esp)
movl   $0x804bb90,0x44(%esp)
movl   $0x20000000,0xc8(%esp)
20
call   8049220 <sigaction@plt>
mov    %ebx,(%esp)
call   8049170 <sigemptyset@plt>
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x2,(%esp)
call   8048ec0 <sigprocmask@plt>
movl   $0x0,0x4(%esp)
movl   $0x8065534,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x80533d8,%eax
test   %eax,%eax
jne    804d2a8 <__sprintf_chk@plt+0x4008>
movl   $0x1,(%esp)
call   8049240 <isatty@plt>
test   %eax,%eax
jne    804d268 <__sprintf_chk@plt+0x3fc8>
add    $0xdc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    $0xc7,%ebx
jg     804cfd9 <__sprintf_chk@plt+0x3d39>
mov    0x80522c0,%eax
movl   $0xc8,0xc(%esp)
movl   $0x804fca0,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi),%esi
lea    0x34(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x5413,0x4(%esp)
movl   $0x1,(%esp)
call   8048f90 <ioctl@plt>
cmp    $0xffffffff,%eax
je     804d21b <__sprintf_chk@plt+0x3f7b>
movzwl 0x36(%esp),%eax
test   %ax,%ax
je     804d21b <__sprintf_chk@plt+0x3f7b>
mov    %eax,0x8052284
add    $0xdc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x3c(%esp)
lea    0x34(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
movl   $0x0,0x40(%esp)
call   8048e70 <setitimer@plt>
jmp    804d20b <__sprintf_chk@plt+0x3f6b>
lea    0x0(%esi),%esi
movl   $0xc,0x24(%esp)
call   80490d0 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804d582 <__sprintf_chk@plt+0x42e2>
mov    0x24(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0x44(%esp)
call   8048ff0 <cap_get_flag@plt>
mov    0x44(%esp),%edx
test   %edx,%edx
jne    804d530 <__sprintf_chk@plt+0x4290>
mov    %edi,(%esp)
call   80491d0 <cap_free@plt>
movl   $0x4,0x10(%esp)
movl   $0x8065524,0xc(%esp)
movl   $0x24,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e50 <setsockopt@plt>
movl   $0xc,0x28(%esp)
mov    %eax,%ebp
call   80490d0 <cap_get_proc@plt>
test   %eax,%eax
mov    %eax,%edi
je     804d571 <__sprintf_chk@plt+0x42d1>
mov    0x28(%esp),%eax
mov    %ebx,0xc(%esp)
movl   $0x1,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,0x44(%esp)
call   8048ff0 <cap_get_flag@plt>
mov    0x44(%esp),%eax
test   %eax,%eax
jne    804d4e8 <__sprintf_chk@plt+0x4248>
mov    %edi,(%esp)
call   80491d0 <cap_free@plt>
cmp    $0xffffffff,%ebp
jne    804d01f <__sprintf_chk@plt+0x3d7f>
mov    0x8065524,%eax
movl   $0x804fd48,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80522c0,%eax
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
jmp    804d01f <__sprintf_chk@plt+0x3d7f>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x4,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x1d,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
movl   $0x1,0x44(%esp)
call   8048e50 <setsockopt@plt>
test   %eax,%eax
jne    804d4b8 <__sprintf_chk@plt+0x4218>
mov    0x8065470,%eax
jmp    804d014 <__sprintf_chk@plt+0x3d74>
xchg   %ax,%ax
lea    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x5,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e50 <setsockopt@plt>
mov    0x8065470,%eax
jmp    804d007 <__sprintf_chk@plt+0x3d67>
lea    0x0(%esi),%esi
lea    0x20(%esp),%eax
movl   $0x4,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8048e50 <setsockopt@plt>
mov    0x8065470,%eax
jmp    804cfff <__sprintf_chk@plt+0x3d5f>
lea    0x0(%esi),%esi
mov    0x8065528,%ebx
movl   $0x0,0x805229c
00
test   %ebx,%ebx
jne    804d234 <__sprintf_chk@plt+0x3f94>
xor    %ebx,%ebx
jmp    804cfd9 <__sprintf_chk@plt+0x3d39>
nop
mov    0x80522c0,%eax
movl   $0x3d,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fd08,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
jmp    804d41c <__sprintf_chk@plt+0x417c>
lea    0x0(%esi),%esi
lea    0x28(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   80491f0 <cap_set_flag@plt>
mov    %edi,(%esp)
call   8049010 <cap_set_proc@plt>
test   %eax,%eax
js     804d5a4 <__sprintf_chk@plt+0x4304>
mov    %edi,(%esp)
call   80491d0 <cap_free@plt>
jmp    804d3a8 <__sprintf_chk@plt+0x4108>
lea    0x0(%esi),%esi
lea    0x24(%esp),%eax
movl   $0x1,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x1,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   80491f0 <cap_set_flag@plt>
mov    %edi,(%esp)
call   8049010 <cap_set_proc@plt>
test   %eax,%eax
js     804d593 <__sprintf_chk@plt+0x42f3>
mov    %edi,(%esp)
call   80491d0 <cap_free@plt>
jmp    804d32f <__sprintf_chk@plt+0x408f>
movl   $0x804f884,(%esp)
call   8048fa0 <perror@plt>
jmp    804d3b0 <__sprintf_chk@plt+0x4110>
movl   $0x804f884,(%esp)
call   8048fa0 <perror@plt>
jmp    804d337 <__sprintf_chk@plt+0x4097>
movl   $0x804f8a6,(%esp)
call   8048fa0 <perror@plt>
jmp    804d32f <__sprintf_chk@plt+0x408f>
movl   $0x804f8a6,(%esp)
call   8048fa0 <perror@plt>
jmp    804d3a8 <__sprintf_chk@plt+0x4108>
mov    0x80522c0,%eax
movl   $0x26,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x804fce0,(%esp)
mov    %eax,0xc(%esp)
call   8048fc0 <fwrite@plt>
movl   $0x2,(%esp)
call   8049060 <exit@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x64(%esp),%edx
mov    0x5c(%esp),%eax
mov    0x50(%esp),%ebp
add    0x54(%esp),%ebp
addl   $0x1,0x8065560
test   %edx,%edx
mov    0x68(%esp),%edi
mov    %eax,0x1c(%esp)
je     804d988 <__sprintf_chk@plt+0x46e8>
mov    0x806546c,%eax
test   %eax,%eax
je     804d770 <__sprintf_chk@plt+0x44d0>
cmpl   $0xf,0x58(%esp)
jbe    804d770 <__sprintf_chk@plt+0x44d0>
mov    0x4(%ebp),%esi
mov    0x0(%ebp),%eax
mov    %esi,%ebx
mov    %eax,%esi
jmp    804d69f <__sprintf_chk@plt+0x43ff>
lea    0x0(%esi),%esi
sub    %esi,%edx
mov    %edx,(%edi)
imul   $0xf4240,%edx,%edx
add    %edx,%eax
jns    804d6c6 <__sprintf_chk@plt+0x4426>
mov    %eax,0xc(%esp)
mov    0x80522c0,%eax
movl   $0x804fd68,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
mov    0x8065470,%eax
test   $0x10,%ah
jne    804da70 <__sprintf_chk@plt+0x47d0>
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
call   8048f10 <gettimeofday@plt>
orl    $0x1000,0x8065470
00
mov    0x4(%edi),%eax
mov    (%edi),%edx
sub    %ebx,%eax
test   %eax,%eax
mov    %eax,0x4(%edi)
jns    804d648 <__sprintf_chk@plt+0x43a8>
sub    $0x1,%edx
add    $0xf4240,%eax
sub    %esi,%edx
mov    %edx,(%edi)
imul   $0xf4240,%edx,%edx
mov    %eax,0x4(%edi)
add    %edx,%eax
js     804d656 <__sprintf_chk@plt+0x43b6>
mov    0x8065470,%ebx
mov    %eax,%esi
mov    0x64(%esp),%eax
test   %eax,%eax
jne    804d780 <__sprintf_chk@plt+0x44e0>
mov    %esi,%eax
cltd
mov    %esi,%eax
add    %esi,0x8065460
adc    %edx,0x8065464
imul   %esi
add    %eax,0x8065568
adc    %edx,0x806556c
cmp    0x8052290,%esi
jge    804d707 <__sprintf_chk@plt+0x4467>
mov    %esi,0x8052290
cmp    0x806547c,%esi
jle    804d715 <__sprintf_chk@plt+0x4475>
mov    %esi,0x806547c
mov    0x8065544,%eax
test   %eax,%eax
jne    804db60 <__sprintf_chk@plt+0x48c0>
lea    0x0(,%esi,8),%eax
test   $0x40,%bh
mov    %eax,0x8065544
jne    804db78 <__sprintf_chk@plt+0x48d8>
nop
mov    0x1c(%esp),%ecx
mov    $0x1,%edx
movzwl %cx,%eax
shr    $0x5,%eax
mov    0x8063460(,%eax,4),%edi
shl    %cl,%edx
test   %edi,%edx
je     804d960 <__sprintf_chk@plt+0x46c0>
addl   $0x1,0x8063440
subl   $0x1,0x8065560
movl   $0x1,0x1c(%esp)
jmp    804d796 <__sprintf_chk@plt+0x44f6>
mov    0x64(%esp),%eax
xor    %esi,%esi
mov    0x8065470,%ebx
test   %eax,%eax
je     804d738 <__sprintf_chk@plt+0x4498>
addl   $0x1,0x8065478
subl   $0x1,0x8065560
movl   $0x0,0x1c(%esp)
mov    0x8052294,%eax
mov    %ebx,%edi
and    $0x10,%edi
mov    %eax,0x80533d4
jne    804d978 <__sprintf_chk@plt+0x46d8>
test   $0x1,%bl
jne    804d918 <__sprintf_chk@plt+0x4678>
and    $0x80000,%ebx
jne    804db08 <__sprintf_chk@plt+0x4868>
mov    0x6c(%esp),%eax
movl   $0x804f997,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x70(%esp),%eax
test   %eax,%eax
je     804d7ff <__sprintf_chk@plt+0x455f>
mov    0x58(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
call   *0x70(%esp)
mov    0x60(%esp),%ebx
test   %ebx,%ebx
js     804d823 <__sprintf_chk@plt+0x4583>
mov    0x60(%esp),%eax
movl   $0x804f9a9,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8052288,%eax
add    $0x7,%eax
cmp    %eax,0x58(%esp)
jle    804db48 <__sprintf_chk@plt+0x48a8>
mov    0x806546c,%ecx
test   %ecx,%ecx
je     804d8b0 <__sprintf_chk@plt+0x4610>
cmp    $0x1869f,%esi
jg     804dc18 <__sprintf_chk@plt+0x4978>
cmp    $0x270f,%esi
jg     804dc46 <__sprintf_chk@plt+0x49a6>
cmp    $0x3e7,%esi
jle    804dbd8 <__sprintf_chk@plt+0x4938>
mov    %esi,%eax
mov    $0x10624dd3,%ecx
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x804f9de,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,%ecx
mov    $0x66666667,%edx
sar    $0x6,%ecx
sub    %eax,%ecx
imul   $0x3e8,%ecx,%eax
mov    %ecx,0x8(%esp)
sub    %eax,%esi
mov    %esi,%eax
imul   %edx
sar    $0x1f,%esi
sar    $0x2,%edx
sub    %esi,%edx
mov    %edx,0xc(%esp)
call   8049140 <__printf_chk@plt>
lea    0x0(%esi),%esi
mov    0x1c(%esp),%edx
test   %edx,%edx
jne    804da38 <__sprintf_chk@plt+0x4798>
mov    0x64(%esp),%eax
test   %eax,%eax
jne    804da18 <__sprintf_chk@plt+0x4778>
mov    0x8052288,%ebx
cmp    $0x8,%ebx
jle    804d90b <__sprintf_chk@plt+0x466b>
movzbl 0x8(%ebp),%ecx
mov    $0x8,%eax
movzbl 0x8053430,%edx
cmp    %dl,%cl
je     804d904 <__sprintf_chk@plt+0x4664>
jmp    804da79 <__sprintf_chk@plt+0x47d9>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x0(%ebp,%eax,1),%ecx
movzbl 0x8053428(%eax),%edx
cmp    %dl,%cl
jne    804da80 <__sprintf_chk@plt+0x47e0>
add    $0x1,%eax
cmp    %ebx,%eax
jne    804d8f0 <__sprintf_chk@plt+0x4650>
add    $0x3c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x64(%esp),%eax
xor    %ebx,%ebx
test   %eax,%eax
jne    804d9d8 <__sprintf_chk@plt+0x4738>
mov    $0x3,%esi
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f990(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
cmp    $0x2,%ebx
jbe    804d930 <__sprintf_chk@plt+0x4690>
shr    $0x1f,%eax
test   %al,%al
jne    804d930 <__sprintf_chk@plt+0x4690>
jmp    804d90b <__sprintf_chk@plt+0x466b>
xchg   %ax,%ax
or     %edi,%edx
mov    %edx,0x8063460(,%eax,4)
movl   $0x0,0x1c(%esp)
jmp    804d796 <__sprintf_chk@plt+0x44f6>
xchg   %ax,%ax
add    $0x3c,%esp
mov    $0x1,%edi
pop    %ebx
mov    %edi,%eax
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x806551c,%eax
mov    %eax,%ecx
sub    0x1c(%esp),%cx
js     804d61e <__sprintf_chk@plt+0x437e>
movzwl %cx,%ecx
cmp    0x805228c,%ecx
jl     804d9ae <__sprintf_chk@plt+0x470e>
add    $0x1,%ecx
mov    %ecx,0x805228c
movzwl 0x8065474,%ecx
movzwl 0x1c(%esp),%ebx
sub    %ecx,%ebx
test   %bx,%bx
jle    804da58 <__sprintf_chk@plt+0x47b8>
movzwl 0x1c(%esp),%eax
mov    %ax,0x8065474
jmp    804d61e <__sprintf_chk@plt+0x437e>
lea    0x0(%esi),%esi
mov    $0x2,%esi
lea    0x0(%esi),%esi
mov    %esi,%eax
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x804f994(%ebx),%eax
mov    %eax,0x4(%esp)
movl   $0x1,(%esp)
call   80490a0 <write@plt>
add    %eax,%ebx
cmp    $0x1,%ebx
jbe    804d9e0 <__sprintf_chk@plt+0x4740>
shr    $0x1f,%eax
test   %al,%al
jne    804d9e0 <__sprintf_chk@plt+0x4740>
jmp    804d90b <__sprintf_chk@plt+0x466b>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fa0c,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d8c8 <__sprintf_chk@plt+0x4628>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x804fa04,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d8bc <__sprintf_chk@plt+0x461c>
lea    0x0(%esi,%eiz,1),%esi
movzwl %ax,%eax
sub    %ecx,%eax
cmp    $0x7fff,%eax
jg     804d9c5 <__sprintf_chk@plt+0x4725>
jmp    804d61e <__sprintf_chk@plt+0x437e>
lea    0x0(%esi),%esi
mov    %eax,%ebx
xor    %esi,%esi
jmp    804d6ce <__sprintf_chk@plt+0x442e>
mov    $0x8,%eax
xchg   %ax,%ax
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x804fdac,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
cmpl   $0x8,0x8052288
jle    804d90b <__sprintf_chk@plt+0x466b>
mov    $0x8,%ebx
jmp    804dae4 <__sprintf_chk@plt+0x4844>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x0(%ebp,%ebx,1),%eax
add    $0x1,%ebx
movl   $0x804fa23,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
cmp    %ebx,0x8052288
jle    804d90b <__sprintf_chk@plt+0x466b>
mov    %ebx,%eax
and    $0x1f,%eax
cmp    $0x8,%eax
jne    804dab8 <__sprintf_chk@plt+0x4818>
mov    %ebx,0x8(%esp)
movl   $0x804fa1d,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804dab8 <__sprintf_chk@plt+0x4818>
lea    0x28(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
mov    0x2c(%esp),%eax
movl   $0x804f973,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0xc(%esp)
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d7c0 <__sprintf_chk@plt+0x4520>
lea    0x0(%esi),%esi
movl   $0x804f9b1,(%esp)
mov    $0x1,%edi
call   8049020 <puts@plt>
jmp    804d90b <__sprintf_chk@plt+0x466b>
xchg   %ax,%ax
test   %eax,%eax
mov    %esi,%ecx
lea    0x7(%eax),%edx
cmovns %eax,%edx
sar    $0x3,%edx
sub    %edx,%ecx
add    %ecx,%eax
jmp    804d729 <__sprintf_chk@plt+0x4489>
xchg   %ax,%ax
test   %eax,%eax
je     804dc95 <__sprintf_chk@plt+0x49f5>
test   %eax,%eax
lea    0x7(%eax),%edx
cmovs  %edx,%eax
sar    $0x3,%eax
add    0x8065554,%eax
mov    $0x10624dd3,%edx
lea    0x1f4(%eax),%ecx
mov    %ecx,%eax
imul   %edx
mov    0x8065528,%eax
sar    $0x1f,%ecx
sar    $0x6,%edx
sub    %ecx,%edx
test   %eax,%eax
mov    %edx,0x805229c
je     804d738 <__sprintf_chk@plt+0x4498>
cmp    $0xc7,%edx
jg     804d738 <__sprintf_chk@plt+0x4498>
movl   $0xc8,0x805229c
00
jmp    804d738 <__sprintf_chk@plt+0x4498>
xchg   %ax,%ax
mov    %esi,%eax
mov    $0x10624dd3,%edx
imul   %edx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x0,0x8(%esp)
movl   $0x804f9f1,0x4(%esp)
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%edx
movl   $0x1,(%esp)
sub    %edx,%esi
mov    %esi,0xc(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d8b0 <__sprintf_chk@plt+0x4610>
mov    %esi,%eax
mov    $0x10624dd3,%edx
imul   %edx
sar    $0x1f,%esi
movl   $0x804f9be,0x4(%esp)
movl   $0x1,(%esp)
sar    $0x6,%edx
sub    %esi,%edx
mov    %edx,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d8b0 <__sprintf_chk@plt+0x4610>
mov    %esi,%eax
mov    $0x10624dd3,%ecx
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
movl   $0x804f9cb,0x4(%esp)
movl   $0x1,(%esp)
mov    %edx,%ecx
mov    $0x51eb851f,%edx
sar    $0x6,%ecx
sub    %eax,%ecx
imul   $0x3e8,%ecx,%eax
mov    %ecx,0x8(%esp)
sub    %eax,%esi
mov    %esi,%eax
imul   %edx
sar    $0x1f,%esi
sar    $0x5,%edx
sub    %esi,%edx
mov    %edx,0xc(%esp)
call   8049140 <__printf_chk@plt>
jmp    804d8b0 <__sprintf_chk@plt+0x4610>
imul   $0x3e8,0x805229c,%eax
00
jmp    804db8b <__sprintf_chk@plt+0x48eb>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4c,%esp
mov    0x8065530,%ebp
sub    0x8065538,%ebp
mov    0x806552c,%eax
js     804e13d <__sprintf_chk@plt+0x4e9d>
sub    0x8065534,%eax
movl   $0xa,(%esp)
mov    %eax,0x34(%esp)
mov    0x8052300,%eax
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
mov    0x8052300,%eax
mov    %eax,(%esp)
call   8048eb0 <fflush@plt>
mov    0x806554c,%eax
movl   $0x804fa27,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x806551c,%eax
movl   $0x804fa43,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8065560,%eax
movl   $0x804fa5d,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8063440,%eax
test   %eax,%eax
jne    804e120 <__sprintf_chk@plt+0x4e80>
mov    0x8065478,%eax
test   %eax,%eax
jne    804e103 <__sprintf_chk@plt+0x4e63>
mov    0x8065550,%eax
test   %eax,%eax
jne    804e0e6 <__sprintf_chk@plt+0x4e46>
mov    0x806551c,%ecx
test   %ecx,%ecx
jne    804e077 <__sprintf_chk@plt+0x4dd7>
mov    0x8052300,%eax
mov    $0x804f993,%esi
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
mov    0x8065560,%eax
test   %eax,%eax
je     804ddb6 <__sprintf_chk@plt+0x4b16>
cmpl   $0x0,0x806546c
jne    804deca <__sprintf_chk@plt+0x4c2a>
mov    0x805228c,%eax
cmp    $0x1,%eax
jle    804dde1 <__sprintf_chk@plt+0x4b41>
mov    %esi,0x8(%esp)
mov    $0x804fa5a,%esi
mov    %eax,0xc(%esp)
movl   $0x804fabb,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
mov    0x8065560,%eax
test   %eax,%eax
je     804de88 <__sprintf_chk@plt+0x4be8>
cmpl   $0x0,0x805229c
jne    804e062 <__sprintf_chk@plt+0x4dc2>
mov    0x806551c,%edi
cmp    $0x1,%edi
jle    804de88 <__sprintf_chk@plt+0x4be8>
mov    $0xf4240,%eax
mov    %ebp,%ebx
imull  0x34(%esp)
sar    $0x1f,%ebx
add    %ebp,%eax
mov    $0x1f40,%ebp
adc    %ebx,%edx
sub    $0x1,%edi
mov    %edi,0x8(%esp)
sar    $0x1f,%edi
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
mov    0x8065544,%ebx
mov    $0x8,%ecx
mov    %esi,0x8(%esp)
movl   $0x804fac5,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,%edi
mov    %ebx,%eax
cltd
idiv   %ecx
mov    $0x3e8,%cx
cltd
idiv   %ecx
mov    %ebx,%eax
mov    %edx,0x18(%esp)
cltd
idiv   %ebp
mov    %eax,0x14(%esp)
mov    %edi,%eax
cltd
idiv   %ecx
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
call   8049140 <__printf_chk@plt>
xchg   %ax,%ax
mov    0x8052300,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8048f70 <_IO_putc@plt>
mov    0x8065560,%edx
mov    $0x1,%eax
test   %edx,%edx
je     804dec2 <__sprintf_chk@plt+0x4c22>
xor    %al,%al
cmpl   $0x0,0x80533d8
je     804dec2 <__sprintf_chk@plt+0x4c22>
xor    %eax,%eax
cmp    0x8065520,%edx
setl   %al
mov    %eax,(%esp)
call   8049060 <exit@plt>
add    0x8063440,%eax
mov    0x8065464,%edx
mov    %eax,%esi
mov    %eax,%edi
mov    %eax,0x8(%esp)
mov    0x8065460,%eax
sar    $0x1f,%edi
mov    %edi,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %edx,%ebx
mov    %eax,0x38(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x8065460
mov    0x8065568,%eax
mov    %edx,0x8065464
mov    0x806556c,%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
mov    0x38(%esp),%edi
mov    %ebx,%ecx
imul   %edi,%ecx
mov    %eax,0x28(%esp)
mov    %eax,0x8065568
mov    %edi,%eax
mov    %edx,0x2c(%esp)
add    %ecx,%ecx
mov    %edx,0x806556c
mul    %edi
mov    %eax,%ebx
mov    0x28(%esp),%eax
mov    %edx,%esi
mov    0x2c(%esp),%edx
add    %ecx,%esi
sub    %ebx,%eax
sbb    %esi,%edx
mov    %eax,0x28(%esp)
add    $0xffffffff,%eax
mov    %edx,0x2c(%esp)
adc    $0xffffffff,%edx
cmp    $0x7fffffff,%edx
ja     804dfc1 <__sprintf_chk@plt+0x4d21>
jb     804df7b <__sprintf_chk@plt+0x4cdb>
cmp    $0xfffffffd,%eax
ja     804dfc1 <__sprintf_chk@plt+0x4d21>
mov    0x28(%esp),%esi
mov    0x2c(%esp),%edi
mov    %esi,%eax
mov    %edi,%edx
nop
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
add    %esi,%eax
adc    %edi,%edx
xor    %ebx,%ebx
mov    %edx,%ecx
shr    $0x1f,%ecx
add    %eax,%ecx
adc    %edx,%ebx
shrd   $0x1,%ebx,%ecx
sar    %ebx
mov    %ecx,%eax
cmp    %edi,%ebx
mov    %ebx,%edx
jle    804e150 <__sprintf_chk@plt+0x4eb0>
mov    %eax,0x28(%esp)
mov    0x28(%esp),%eax
mov    $0x3e8,%ebx
mov    0x38(%esp),%edi
movl   $0x3e8,0x8(%esp)
mov    0x8052290,%esi
movl   $0x0,0xc(%esp)
cltd
idiv   %ebx
mov    %edi,(%esp)
mov    %eax,0x20(%esp)
mov    0x806547c,%eax
mov    %edx,0x24(%esp)
cltd
idiv   %ebx
mov    %eax,0x18(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x1c(%esp)
mov    %eax,0x4(%esp)
call   804e8e0 <__sprintf_chk@plt+0x5640>
movl   $0x3e8,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edi,(%esp)
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
movl   $0x804fde0,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x10(%esp)
mov    %esi,%eax
mov    $0x804fa5a,%esi
cltd
idiv   %ebx
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804ddb6 <__sprintf_chk@plt+0x4b16>
testl  $0x4001,0x8065470
00
je     804de88 <__sprintf_chk@plt+0x4be8>
jmp    804ddfb <__sprintf_chk@plt+0x4b5b>
mov    %ecx,%edx
mov    $0x64,%eax
sub    0x8065560,%edx
mov    %ecx,0x8(%esp)
sar    $0x1f,%ecx
mov    %ecx,0xc(%esp)
imul   %edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
movl   $0x804fa9b,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049140 <__printf_chk@plt>
mov    %ebp,%eax
mov    $0x3e8,%ecx
cltd
idiv   %ecx
movl   $0x804faae,0x4(%esp)
movl   $0x1,(%esp)
imul   $0x3e8,0x34(%esp),%ebx
add    %eax,%ebx
mov    %ebx,0x8(%esp)
call   8049140 <__printf_chk@plt>
jmp    804dd86 <__sprintf_chk@plt+0x4ae6>
mov    %eax,0x8(%esp)
movl   $0x804fa8d,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804dd78 <__sprintf_chk@plt+0x4ad8>
mov    %eax,0x8(%esp)
movl   $0x804fa7c,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804dd6b <__sprintf_chk@plt+0x4acb>
mov    %eax,0x8(%esp)
movl   $0x804fa6a,0x4(%esp)
movl   $0x1,(%esp)
call   8049140 <__printf_chk@plt>
jmp    804dd5e <__sprintf_chk@plt+0x4abe>
sub    $0x1,%eax
add    $0xf4240,%ebp
jmp    804dcce <__sprintf_chk@plt+0x4a2e>
nop
lea    0x0(%esi,%eiz,1),%esi
jl     804e15a <__sprintf_chk@plt+0x4eba>
cmp    %esi,%ecx
jae    804dfbd <__sprintf_chk@plt+0x4d1d>
mov    %eax,%esi
mov    %edx,%edi
mov    0x28(%esp),%eax
mov    0x2c(%esp),%edx
jmp    804df88 <__sprintf_chk@plt+0x4ce8>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x806551c,%ebx
movl   $0x0,0x8065570
00
test   %ebx,%ebx
jne    804e1f0 <__sprintf_chk@plt+0x4f50>
mov    0x8065560,%edx
xor    %eax,%eax
mov    %eax,0x14(%esp)
mov    0x80522c0,%eax
mov    %edx,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x804fae3,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
mov    0x8065560,%eax
test   %eax,%eax
je     804e1cf <__sprintf_chk@plt+0x4f2f>
mov    0x806546c,%edx
test   %edx,%edx
jne    804e228 <__sprintf_chk@plt+0x4f88>
mov    0x80522c0,%eax
movl   $0xa,(%esp)
mov    %eax,0x4(%esp)
call   8049190 <fputc@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8065560,%esi
mov    %ebx,%edx
mov    $0x64,%eax
mov    %ebx,%ecx
sar    $0x1f,%ecx
mov    %ebx,0x8(%esp)
sub    %esi,%edx
imul   %edx
mov    %ecx,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
mov    %esi,%edx
jmp    804e193 <__sprintf_chk@plt+0x4ef3>
lea    0x0(%esi,%eiz,1),%esi
add    0x8063440,%eax
mov    0x8065464,%edx
mov    %eax,0x8(%esp)
sar    $0x1f,%eax
mov    %eax,0xc(%esp)
mov    0x8065460,%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   804e760 <__sprintf_chk@plt+0x54c0>
mov    0x806547c,%edi
mov    $0x10624dd3,%ecx
mov    0x8065544,%ebx
movl   $0x804fe24,0x8(%esp)
movl   $0x1,0x4(%esp)
lea    0x7(%ebx),%ebp
mov    %eax,%esi
mov    %edi,%eax
imul   %ecx
mov    %edi,%eax
sar    $0x1f,%eax
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0x24(%esp)
sub    %eax,%edi
test   %ebx,%ebx
cmovns %ebx,%ebp
mov    %edi,0x28(%esp)
mov    %ebp,%edi
sar    $0x3,%edi
mov    %edi,%eax
imul   %ecx
mov    %ebx,%eax
sar    $0x1f,%ebp
sar    $0x1f,%ebx
sar    $0x6,%edx
sub    %ebp,%edx
imul   $0x3e8,%edx,%edx
sub    %edx,%edi
imul   %ecx
mov    %esi,%eax
mov    %edi,0x20(%esp)
sar    $0x9,%edx
sub    %ebx,%edx
mov    %edx,0x1c(%esp)
imul   %ecx
mov    %esi,%eax
sar    $0x1f,%eax
sar    $0x6,%edx
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0x14(%esp)
sub    %eax,%esi
mov    %ecx,%eax
mov    0x8052290,%ecx
imull  0x8052290
mov    0x8052290,%eax
mov    %esi,0x18(%esp)
sar    $0x6,%edx
sar    $0x1f,%eax
sub    %eax,%edx
imul   $0x3e8,%edx,%eax
mov    %edx,0xc(%esp)
sub    %eax,%ecx
mov    0x80522c0,%eax
mov    %ecx,0x10(%esp)
mov    %eax,(%esp)
call   8049210 <__fprintf_chk@plt>
jmp    804e1cf <__sprintf_chk@plt+0x4f2f>
jmp    804e330 <__sprintf_chk@plt+0x5090>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x10dc,%esp
mov    %gs:0x14,%eax
mov    %eax,0x10cc(%esp)
xor    %eax,%eax
mov    0x10f4(%esp),%eax
lea    0x30(%esp),%esi
mov    %eax,0x18(%esp)
mov    0x806553c,%eax
test   %eax,%eax
jne    804e614 <__sprintf_chk@plt+0x5374>
mov    0x8065520,%eax
test   %eax,%eax
je     804e382 <__sprintf_chk@plt+0x50e2>
mov    0x8065560,%edx
add    0x8065550,%edx
cmp    %edx,%eax
jle    804e614 <__sprintf_chk@plt+0x5374>
mov    0x80533d8,%eax
test   %eax,%eax
je     804e398 <__sprintf_chk@plt+0x50f8>
mov    0x8065550,%eax
test   %eax,%eax
jne    804e614 <__sprintf_chk@plt+0x5374>
mov    0x8065570,%eax
test   %eax,%eax
jne    804e736 <__sprintf_chk@plt+0x5496>
mov    $0x431bde83,%edi
jmp    804e3b8 <__sprintf_chk@plt+0x5118>
lea    0x0(%esi,%eiz,1),%esi
test   %ebx,%ebx
jg     804e475 <__sprintf_chk@plt+0x51d5>
call   804c970 <__sprintf_chk@plt+0x36d0>
mov    0x8065520,%edx
test   %edx,%edx
mov    %eax,%ebx
je     804e3b0 <__sprintf_chk@plt+0x5110>
cmp    0x806551c,%edx
jg     804e3b0 <__sprintf_chk@plt+0x5110>
mov    0x80533d8,%eax
test   %eax,%eax
jne    804e3b0 <__sprintf_chk@plt+0x5110>
mov    0x80533e4,%eax
test   %eax,%eax
jne    804e3b0 <__sprintf_chk@plt+0x5110>
mov    0x8065560,%ebp
test   %ebp,%ebp
je     804e721 <__sprintf_chk@plt+0x5481>
mov    0x806547c,%eax
lea    (%eax,%eax,1),%ecx
imul   $0x3e8,0x805229c,%eax
00
mov    %ecx,0x80533e4
cmp    %eax,%ecx
jae    804e414 <__sprintf_chk@plt+0x5174>
mov    %eax,0x80533e4
mov    %eax,%ecx
mov    $0x10624dd3,%edx
mov    %ecx,%eax
mul    %edx
shr    $0x6,%edx
test   %ebx,%ebx
js     804e428 <__sprintf_chk@plt+0x5188>
cmp    %edx,%ebx
jae    804e42a <__sprintf_chk@plt+0x518a>
mov    %edx,%ebx
mov    %ecx,%eax
mul    %edi
lea    0x20(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
shr    $0x12,%edx
mov    %edx,0x28(%esp)
imul   $0xf4240,%edx,%edx
movl   $0x0,(%esp)
movl   $0x0,0x20(%esp)
movl   $0x0,0x24(%esp)
sub    %edx,%ecx
mov    %ecx,0x2c(%esp)
call   8048e70 <setitimer@plt>
test   %ebx,%ebx
jle    804e3b8 <__sprintf_chk@plt+0x5118>
mov    0x8065470,%edx
and    $0x4800,%edx
jne    804e49e <__sprintf_chk@plt+0x51fe>
cmpl   $0xa,0x805229c
mov    $0xa,%eax
cmovge 0x805229c,%eax
cmp    %ebx,%eax
jle    804e619 <__sprintf_chk@plt+0x5379>
mov    0x806551c,%eax
mov    %eax,%ecx
sub    0x8065474,%cx
js     804e740 <__sprintf_chk@plt+0x54a0>
movzwl %cx,%eax
cmp    $0xa,%ebx
jg     804e4c7 <__sprintf_chk@plt+0x5227>
test   %eax,%eax
mov    $0xa,%ebx
je     804e751 <__sprintf_chk@plt+0x54b1>
test   %edx,%edx
jne    804e4d9 <__sprintf_chk@plt+0x5239>
mov    0x805229c,%edi
test   %edi,%edi
je     804e619 <__sprintf_chk@plt+0x5379>
mov    0x10f0(%esp),%eax
xor    %ecx,%ecx
mov    $0x9,%edx
mov    %ebx,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %dx,0x24(%esp)
mov    %eax,0x20(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %cx,0x26(%esp)
call   8048fb0 <poll@plt>
test   %eax,%eax
jle    804e358 <__sprintf_chk@plt+0x50b8>
testb  $0x9,0x26(%esp)
je     804e358 <__sprintf_chk@plt+0x50b8>
mov    $0x40,%edx
mov    0x10f8(%esp),%eax
mov    %eax,0x1c(%esp)
xor    %eax,%eax
movl   $0x0,(%esi,%eax,1)
add    $0x4,%eax
cmp    $0x1c,%eax
jb     804e532 <__sprintf_chk@plt+0x5292>
lea    0x4c(%esp),%eax
mov    %eax,0x30(%esp)
lea    0x18(%esp),%eax
mov    %eax,0x38(%esp)
lea    0xcc(%esp),%eax
mov    %eax,0x40(%esp)
mov    0x10f0(%esp),%eax
mov    %edx,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x80,0x34(%esp)
mov    %eax,(%esp)
movl   $0x1,0x3c(%esp)
movl   $0x1000,0x44(%esp)
call   80491c0 <recvmsg@plt>
test   %eax,%eax
mov    %eax,%ebx
js     804e6b8 <__sprintf_chk@plt+0x5418>
mov    0x44(%esp),%eax
cmp    $0xb,%eax
ja     804e620 <__sprintf_chk@plt+0x5380>
testb  $0x10,0x8065471
je     804e675 <__sprintf_chk@plt+0x53d5>
nop
lea    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
lea    0x20(%esp),%ebp
mov    %eax,(%esp)
call   8048f10 <gettimeofday@plt>
lea    0x4c(%esp),%eax
mov    %ebp,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,(%esp)
call   804b670 <__sprintf_chk@plt+0x23d0>
test   %eax,%eax
jne    804e6e6 <__sprintf_chk@plt+0x5446>
mov    0x806551c,%eax
mov    %eax,%edx
sub    0x8065474,%dx
js     804e6ff <__sprintf_chk@plt+0x545f>
movzwl %dx,%eax
test   %eax,%eax
jne    804e520 <__sprintf_chk@plt+0x5280>
mov    0x806553c,%eax
test   %eax,%eax
je     804e365 <__sprintf_chk@plt+0x50c5>
call   804dcb0 <__sprintf_chk@plt+0x4a10>
xor    %edx,%edx
jmp    804e525 <__sprintf_chk@plt+0x5285>
mov    0x40(%esp),%edx
test   %edx,%edx
je     804e5a2 <__sprintf_chk@plt+0x5302>
mov    (%edx),%edi
xor    %ebp,%ebp
add    %edx,%eax
mov    %edi,%ecx
cmpl   $0x1,0x4(%edx)
je     804e6a8 <__sprintf_chk@plt+0x5408>
cmp    $0xb,%ecx
jbe    804e660 <__sprintf_chk@plt+0x53c0>
add    $0x3,%ecx
and    $0xfffffffc,%ecx
add    %ecx,%edx
lea    0xc(%edx),%ecx
cmp    %ecx,%eax
jb     804e660 <__sprintf_chk@plt+0x53c0>
mov    (%edx),%ecx
lea    0x3(%ecx),%edi
and    $0xfffffffc,%edi
add    %edx,%edi
cmp    %edi,%eax
jae    804e634 <__sprintf_chk@plt+0x5394>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x10,0x8065471
jne    804e5b0 <__sprintf_chk@plt+0x5310>
test   %ebp,%ebp
jne    804e5c8 <__sprintf_chk@plt+0x5328>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x10f0(%esp),%eax
movl   $0x8906,0x4(%esp)
mov    %eax,(%esp)
call   8048f90 <ioctl@plt>
test   %eax,%eax
jne    804e5b0 <__sprintf_chk@plt+0x5310>
lea    0x20(%esp),%ebp
jmp    804e5c8 <__sprintf_chk@plt+0x5328>
lea    0x0(%esi),%esi
cmpl   $0x1d,0x8(%edx)
jne    804e63a <__sprintf_chk@plt+0x539a>
cmp    $0x13,%ecx
jbe    804e63a <__sprintf_chk@plt+0x539a>
lea    0xc(%edx),%ebp
jmp    804e63f <__sprintf_chk@plt+0x539f>
call   8049100 <__errno_location@plt>
mov    (%eax),%edx
mov    %eax,%ebx
cmp    $0x4,%edx
je     804e358 <__sprintf_chk@plt+0x50b8>
cmp    $0xb,%edx
je     804e358 <__sprintf_chk@plt+0x50b8>
call   804b190 <__sprintf_chk@plt+0x1ef0>
test   %eax,%eax
jne    804e5e8 <__sprintf_chk@plt+0x5348>
mov    (%ebx),%eax
test   %eax,%eax
jne    804e710 <__sprintf_chk@plt+0x5470>
call   804baf0 <__sprintf_chk@plt+0x2850>
mov    0x806551c,%eax
mov    %eax,%edx
sub    0x8065474,%dx
jns    804e5fc <__sprintf_chk@plt+0x535c>
sub    0x8065560,%eax
sub    0x8065550,%eax
jmp    804e5ff <__sprintf_chk@plt+0x535f>
movl   $0x804faff,(%esp)
call   8048fa0 <perror@plt>
jmp    804e358 <__sprintf_chk@plt+0x50b8>
imul   $0x3e8,0x8052298,%ecx
00
mov    %ecx,0x80533e4
jmp    804e414 <__sprintf_chk@plt+0x5174>
call   804e170 <__sprintf_chk@plt+0x4ed0>
jmp    804e3a5 <__sprintf_chk@plt+0x5105>
sub    0x8065560,%eax
sub    0x8065550,%eax
jmp    804e4b5 <__sprintf_chk@plt+0x5215>
call   8048fe0 <sched_yield@plt>
mov    $0x40,%edx
jmp    804e525 <__sprintf_chk@plt+0x5285>
push   %ebp
push   %edi
push   %esi
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%edi
mov    0x20(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
test   %edi,%edi
mov    %edi,%ecx
mov    %eax,%ebp
js     804e828 <__sprintf_chk@plt+0x5588>
test   %ebp,%ebp
mov    0x4(%esp),%esi
mov    %eax,%edi
js     804e844 <__sprintf_chk@plt+0x55a4>
test   %edi,%edi
mov    %ecx,%ebp
mov    %edx,0x8(%esp)
mov    %edi,%eax
mov    %edx,%ecx
mov    %esi,0x4(%esp)
jne    804e7c0 <__sprintf_chk@plt+0x5520>
cmp    %ebp,%esi
jbe    804e7e8 <__sprintf_chk@plt+0x5548>
mov    %ebp,%edx
mov    %ecx,%eax
xor    %ebp,%ebp
div    %esi
mov    %eax,%ecx
jmp    804e7c8 <__sprintf_chk@plt+0x5528>
lea    0x0(%esi),%esi
cmp    %ebp,%edi
jbe    804e808 <__sprintf_chk@plt+0x5568>
xor    %ebp,%ebp
xor    %ecx,%ecx
mov    %ecx,%eax
mov    (%esp),%ecx
mov    %ebp,%edx
test   %ecx,%ecx
je     804e7da <__sprintf_chk@plt+0x553a>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x10,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
jne    804e7f7 <__sprintf_chk@plt+0x5557>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%esi
mov    %ebp,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    %ecx,%eax
div    %esi
mov    %eax,%ecx
jmp    804e7c8 <__sprintf_chk@plt+0x5528>
nop
bsr    %edi,%edi
xor    $0x1f,%edi
jne    804e858 <__sprintf_chk@plt+0x55b8>
mov    0x8(%esp),%edi
cmp    %edi,0x4(%esp)
jbe    804e81e <__sprintf_chk@plt+0x557e>
cmp    %ebp,%eax
jae    804e7c4 <__sprintf_chk@plt+0x5524>
xor    %ebp,%ebp
mov    $0x1,%ecx
jmp    804e7c8 <__sprintf_chk@plt+0x5528>
nop
neg    %edx
mov    0x4(%esp),%esi
mov    %eax,%edi
adc    $0x0,%ecx
neg    %ecx
test   %ebp,%ebp
movl   $0xffffffff,(%esp)
jns    804e79b <__sprintf_chk@plt+0x54fb>
neg    %esi
adc    $0x0,%edi
notl   (%esp)
neg    %edi
jmp    804e79b <__sprintf_chk@plt+0x54fb>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ecx
mov    0x4(%esp),%esi
shl    %cl,%eax
mov    %eax,%edx
mov    $0x20,%eax
sub    %edi,%eax
mov    %eax,%ecx
shr    %cl,%esi
mov    %edi,%ecx
mov    %esi,0xc(%esp)
mov    0x4(%esp),%esi
or     %edx,0xc(%esp)
mov    %ebp,%edx
shl    %cl,%esi
mov    %eax,%ecx
mov    %esi,0x4(%esp)
mov    0x8(%esp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%ebp
mov    %eax,%ecx
shr    %cl,%esi
or     %ebp,%esi
mov    %esi,%eax
divl   0xc(%esp)
mov    %edx,%ebp
mov    %eax,%esi
mull   0x4(%esp)
cmp    %edx,%ebp
mov    %edx,0x4(%esp)
jb     804e8c8 <__sprintf_chk@plt+0x5628>
mov    0x8(%esp),%edx
mov    %edi,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    804e8bd <__sprintf_chk@plt+0x561d>
cmp    0x4(%esp),%ebp
je     804e8c8 <__sprintf_chk@plt+0x5628>
mov    %esi,%ecx
xor    %ebp,%ebp
jmp    804e7c8 <__sprintf_chk@plt+0x5528>
xchg   %ax,%ax
lea    -0x1(%esi),%ecx
xor    %ebp,%ebp
jmp    804e7c8 <__sprintf_chk@plt+0x5528>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x20,%esp
mov    0x34(%esp),%edx
mov    0x3c(%esp),%eax
mov    0x30(%esp),%ebp
mov    0x38(%esp),%edi
test   %edx,%edx
mov    %eax,%esi
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
movl   $0x0,0xc(%esp)
js     804e9c8 <__sprintf_chk@plt+0x5728>
test   %esi,%esi
mov    %edi,%edx
mov    %eax,%ecx
js     804e9b8 <__sprintf_chk@plt+0x5718>
mov    0x4(%esp),%edi
mov    %ecx,%eax
mov    %edx,%ecx
mov    (%esp),%esi
test   %eax,%eax
mov    %edx,0x10(%esp)
mov    %edi,%ebp
mov    %esi,0x14(%esp)
mov    %esi,%edi
mov    %ebp,%esi
jne    804e950 <__sprintf_chk@plt+0x56b0>
cmp    %esi,%edx
jbe    804e998 <__sprintf_chk@plt+0x56f8>
mov    %esi,%edx
mov    0x14(%esp),%eax
div    %ecx
mov    %edx,%esi
mov    %esi,%eax
xor    %edx,%edx
jmp    804e959 <__sprintf_chk@plt+0x56b9>
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%eax
jbe    804e970 <__sprintf_chk@plt+0x56d0>
mov    (%esp),%eax
mov    %esi,%edx
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     804e968 <__sprintf_chk@plt+0x56c8>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x20,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
bsr    %eax,%edx
mov    %edx,(%esp)
xorl   $0x1f,(%esp)
jne    804e9e8 <__sprintf_chk@plt+0x5748>
cmp    %edi,%ecx
jbe    804ea80 <__sprintf_chk@plt+0x57e0>
cmp    %esi,%eax
jb     804ea80 <__sprintf_chk@plt+0x57e0>
mov    %edi,%eax
mov    %ebp,%edx
jmp    804e959 <__sprintf_chk@plt+0x56b9>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    804e9a7 <__sprintf_chk@plt+0x5707>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%ecx
mov    %esi,%eax
xor    %edx,%edx
div    %ecx
mov    %edi,%eax
div    %ecx
mov    %edx,%esi
jmp    804e946 <__sprintf_chk@plt+0x56a6>
lea    0x0(%esi),%esi
neg    %edx
adc    $0x0,%ecx
neg    %ecx
jmp    804e91b <__sprintf_chk@plt+0x567b>
lea    0x0(%esi,%eiz,1),%esi
negl   (%esp)
adcl   $0x0,0x4(%esp)
negl   0x4(%esp)
movl   $0xffffffff,0xc(%esp)
jmp    804e90f <__sprintf_chk@plt+0x566f>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%edx
movl   $0x20,0x18(%esp)
mov    0x10(%esp),%ebp
sub    %edx,0x18(%esp)
mov    %edx,%ecx
shl    %cl,%eax
movzbl 0x18(%esp),%ecx
mov    %ebp,%edi
shr    %cl,%edi
mov    %edx,%ecx
shl    %cl,%ebp
movzbl 0x18(%esp),%ecx
or     %eax,%edi
mov    %edx,%eax
mov    %esi,%edx
mov    %ebp,0x1c(%esp)
shr    %cl,%edx
mov    %eax,%ecx
mov    0x14(%esp),%eax
shl    %cl,%esi
movzbl 0x18(%esp),%ecx
shr    %cl,%eax
movzbl (%esp),%ecx
or     %esi,%eax
mov    0x14(%esp),%esi
div    %edi
shl    %cl,%esi
mov    %esi,0x14(%esp)
mov    %edx,%esi
mul    %ebp
mov    %edx,0x10(%esp)
mov    0x10(%esp),%ebp
mov    %eax,%edx
cmp    %ebp,%esi
mov    %ebp,%ecx
jb     804ea94 <__sprintf_chk@plt+0x57f4>
cmp    %eax,0x14(%esp)
jb     804ea90 <__sprintf_chk@plt+0x57f0>
mov    (%esp),%ebp
mov    0x14(%esp),%edi
sub    %edx,%edi
sbb    %ecx,%esi
mov    %esi,%eax
mov    %ebp,%ecx
shr    %cl,%edi
movzbl 0x18(%esp),%ecx
shl    %cl,%eax
mov    %ebp,%ecx
or     %eax,%edi
shr    %cl,%esi
mov    %edi,%eax
mov    %esi,%edx
jmp    804e959 <__sprintf_chk@plt+0x56b9>
nop
sub    %ecx,%edi
sbb    %eax,%esi
mov    %esi,%ebp
jmp    804e98c <__sprintf_chk@plt+0x56ec>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%esi
jne    804ea58 <__sprintf_chk@plt+0x57b8>
mov    0x10(%esp),%ecx
mov    %eax,%edx
sub    0x1c(%esp),%edx
sbb    %edi,%ecx
jmp    804ea58 <__sprintf_chk@plt+0x57b8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804a4f0 <__sprintf_chk@plt+0x1250>
add    $0x3545,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0xfc(%ebx),%esi
call   8048e18 <_init>
lea    -0x100(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     804eb09 <__sprintf_chk@plt+0x5869>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x100(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    804eae8 <__sprintf_chk@plt+0x5848>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    804eb20 <__sprintf_chk@plt+0x5880>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
push   %ebx
sub    $0x8,%esp
call   804a4f0 <__sprintf_chk@plt+0x1250>
add    $0x34d3,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
push   %ebp
jae    804eba4 <_IO_stdin_used+0x68>
cmp    %gs:(%bx,%si),%ah
jo     804ebb2 <_IO_stdin_used+0x76>
outsb  %ds:(%esi),(%dx)
and    %bl,0x2d(%bp,%di)
popa
inc    %ecx
bound  %eax,0x64(%edx)
inc    %esp
pushw  $0x6e4c
dec    %edi
jno    804ebcd <_IO_stdin_used+0x91>
push   %edx
push   %ebp
jbe    804ebb5 <_IO_stdin_used+0x79>
pop    %ebp
and    %bl,0x2d(%ebx)
arpl   %sp,(%eax)
arpl   %bp,0x75(%edi)
outsb  %ds:(%esi),(%dx)
je     804ebc8 <_IO_stdin_used+0x8c>
and    %bl,0x2d(%ebx)
imul   $0x65746e69,(%eax),%esp
jb     804ebec <_IO_stdin_used+0xb0>
popa
insb   (%dx),%es:(%edi)
pop    %ebp
and    %bl,0x2d(%ebx)
dec    %ecx
and    %ch,0x6e(%ecx)
je     804ebe7 <_IO_stdin_used+0xab>
jb     804ebea <_IO_stdin_used+0xae>
popa
arpl   %sp,0x5d(%ebp)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x2d(%ebx)
insl   (%dx),%es:(%edi)
and    %ch,0x61(%ebp)
jb     804ec08 <_IO_stdin_used+0xcc>
pop    %ebp
and    %bl,0x2d(%ebx)
dec    %ebp
and    %dh,0x6d(%eax)
je     804ec1c <_IO_stdin_used+0xe0>
imul   $0x74706f5f,%fs:0x63(%ebx),%esi
imul   $0x2d5b205d,0x6e(%edi),%ebp
insb   (%dx),%es:(%edi)
and    %dh,0x72(%eax)
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs
pop    %ebp
and    %bl,0x2d(%ebx)
jo     804ebe5 <_IO_stdin_used+0xa9>
jo     804ec28 <_IO_stdin_used+0xec>
je     804ec3d <_IO_stdin_used+0x101>
gs
jb     804ec3a <_IO_stdin_used+0xfe>
pop    %ebp
and    %bl,0x2d(%ebx)
push   %ecx
and    %dh,0x73(%edi,%ebp,2)
pop    %ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %bl,0x2d(%ebx)
jae    804ec07 <_IO_stdin_used+0xcb>
jo     804ec4a <_IO_stdin_used+0x10e>
arpl   %bp,0x65(%ebx)
je     804ec61 <_IO_stdin_used+0x125>
imul   $0x2d5b205d,0x65(%edx),%edi
push   %ebx
and    %dh,0x6e(%ebx)
bound  %esi,%fs:0x66(%ebp)
pop    %ebp
and    %bl,0x2d(%ebx)
je     804ec23 <_IO_stdin_used+0xe7>
je     804ec79 <_IO_stdin_used+0x13d>
insb   (%dx),%es:(%edi)
pop    %ebp
and    %bl,0x2d(%ebx)
push   %esp
and    %dh,0x6d(%ecx,%ebp,2)
gs
jae    804ec86 <_IO_stdin_used+0x14a>
popa
insl   (%dx),%es:(%edi)
jo     804ec75 <_IO_stdin_used+0x139>
outsl  %ds:(%esi),(%dx)
jo     804ec8d <_IO_stdin_used+0x151>
imul   $0x20200a5d,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
pop    %ebx
sub    $0x65642077,%eax
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x2d5b205d,0x65(%esi),%ebp
push   %edi
and    %dh,0x6d(%ecx,%ebp,2)
outsl  %gs:(%esi),(%dx)
jne    804ecb7 <_IO_stdin_used+0x17b>
pop    %ebp
and    %bl,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jo     804ec7b <_IO_stdin_used+0x13f>
and    %ch,(%esi)
cs
cs
pop    %ebp
and    %ah,0x73(%ebp,%eiz,2)
je     804ecbe <_IO_stdin_used+0x182>
outsb  %ds:(%esi),(%dx)
popa
je     804ecc2 <_IO_stdin_used+0x186>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x72(%esi)
and    %cl,0x4c(%eax)
and    %dl,0x53(%edi,%ecx,2)
and    %ah,(%eax)
dec    %esp
outsb  %gs:(%esi),(%dx)
and    %ah,(%eax)
and    %cl,0x44(%ecx)
and    %al,0x6c(%esi)
and    %ah,(%bx,%si)
outsl  %ds:(%esi),(%dx)
data16
data16
and    %dl,0x4c(%esp,%edx,2)
and    %dl,0x72(%eax)
outsl  %ds:(%esi),(%dx)
and    %ah,(%eax)
arpl   %bp,0x73(%ebx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
push   %ebx
jb     804ecf5 <_IO_stdin_used+0x1b9>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esp
jae    804ed0f <_IO_stdin_used+0x1d3>
and    %al,0x74(%ecx,%eiz,2)
popa
add    %al,(%eax)
add    %al,(%eax)
inc    %esp
gs
jae    804ed1c <_IO_stdin_used+0x1e0>
imul   $0x6e6f6974,0x61(%esi),%ebp
and    %dl,0x72(%eax)
outsl  %ds:(%esi),(%dx)
je     804ed24 <_IO_stdin_used+0x1e8>
arpl   %bp,0x6c(%edi)
and    %dl,0x6e(%ebp)
jb     804ed22 <_IO_stdin_used+0x1e6>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
add    %al,(%eax)
add    %al,0x72(%esi)
popa
and    %ch,0x65(%bp)
gs fs gs and %ah,%fs:%gs:0x6e(%ecx)
and    %al,%fs:0x20(%esi,%eax,2)
jae    804ed42 <_IO_stdin_used+0x206>
je     804ecff <_IO_stdin_used+0x1c3>
sub    %ch,0x74(%ebp)
jne    804ed04 <_IO_stdin_used+0x1c8>
cmp    $0x29752520,%eax
or     (%eax),%al
add    %al,0x73(%ebp,%eiz,2)
je     804ed5a <_IO_stdin_used+0x21e>
outsb  %ds:(%esi),(%dx)
popa
je     804ed5e <_IO_stdin_used+0x222>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x65(%esi)
je     804ed1c <_IO_stdin_used+0x1e0>
push   %ebp
outsb  %ds:(%esi),(%dx)
jb     804ed65 <_IO_stdin_used+0x229>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
outsw  %ds:(%esi),(%dx)
jb     804ed2c <_IO_stdin_used+0x1f0>
push   %esp
jns    804ed7f <_IO_stdin_used+0x243>
and    %ch,%gs:0x66(%edi)
and    %dl,0x65(%ebx)
jb     804ed8e <_IO_stdin_used+0x252>
imul   $0x73654400,0x65(%ebx),%esp
je     804ed8a <_IO_stdin_used+0x24e>
outsb  %ds:(%esi),(%dx)
popa
je     804ed8e <_IO_stdin_used+0x252>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x6f(%eax)
jae    804eda0 <_IO_stdin_used+0x264>
and    %dl,0x6e(%ebp)
jb     804ed96 <_IO_stdin_used+0x25a>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x20(%ebp,%eiz,2)
outsw  %ds:(%esi),(%dx)
jb     804ed5d <_IO_stdin_used+0x221>
push   %esp
jns    804edb0 <_IO_stdin_used+0x274>
and    %ch,%gs:0x66(%edi)
and    %dl,0x65(%ebx)
jb     804edbf <_IO_stdin_used+0x283>
imul   $0x0,0x65(%ebx),%esp
inc    %esp
gs
jae    804edc8 <_IO_stdin_used+0x28c>
and    %dl,0x6e(%ebp)
jb     804edbe <_IO_stdin_used+0x282>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x2c(%ebp,%eiz,2)
and    %al,0x61(%edx)
and    %al,%fs:0x6f(%ebx)
fs cmp %fs:%gs:(%eax),%ah
and    $0x52000a64,%eax
gs imul $0x54207463,%fs:%gs:0x65(%edx),%esi
54
jns    804edec <_IO_stdin_used+0x2b0>
and    %ch,%gs:0x66(%edi)
and    %dl,0x65(%ebx)
jb     804edfb <_IO_stdin_used+0x2bf>
imul   $0x646e6120,0x65(%ebx),%esp
and    %cl,0x65(%esi)
je     804ee08 <_IO_stdin_used+0x2cc>
outsl  %ds:(%esi),(%dx)
jb     804edff <_IO_stdin_used+0x2c3>
add    %al,(%eax)
add    %al,(%eax)
push   %edx
gs imul $0x54207463,%fs:%gs:0x65(%edx),%esi
54
jns    804ee14 <_IO_stdin_used+0x2d8>
and    %ch,%gs:0x66(%edi)
and    %dl,0x65(%ebx)
jb     804ee23 <_IO_stdin_used+0x2e7>
imul   $0x646e6120,0x65(%ebx),%esp
and    %cl,0x6f(%eax)
jae    804ee2d <_IO_stdin_used+0x2f1>
add    %al,(%eax)
add    %dl,0x61(%eax)
jb     804ee21 <_IO_stdin_used+0x2e5>
insl   (%dx),%es:(%edi)
gs
je     804ee29 <_IO_stdin_used+0x2ed>
jb     804ede6 <_IO_stdin_used+0x2aa>
jo     804ee3a <_IO_stdin_used+0x2fe>
outsl  %ds:(%esi),(%dx)
bound  %ebp,0x6d(%ebp,%eiz,2)
cmp    (%eax),%ah
jo     804ee40 <_IO_stdin_used+0x304>
imul   $0x3d207265,0x74(%esi),%ebp
and    %ah,0xa75
add    %al,(%eax)
jo     804ee4b <_IO_stdin_used+0x30f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
je     804ee50 <_IO_stdin_used+0x314>
and    %ah,%gs:0x63(%ebp,%eiz,2)
imul   $0x6176206c,0x61(%ebp),%ebp
insb   (%dx),%es:(%edi)
jne    804ee5c <_IO_stdin_used+0x320>
and    %ch,0x66(%edi)
and    %dl,0x53(%edi,%ecx,2)
and    %ah,0x69(%edx)
je     804ee76 <_IO_stdin_used+0x33a>
and    %ch,0x75(%ebp)
jae    804ee7c <_IO_stdin_used+0x340>
and    %ah,0x65(%edx)
and    %dh,(%eax)
sub    $0x20343532,%eax
sub    %ch,0x72(%edi)
and    %bh,0x65(%edx)
jb     804ee89 <_IO_stdin_used+0x34d>
sub    %ecx,(%edx)
add    %al,(%eax)
add    %al,(%eax)
jo     804ee8b <_IO_stdin_used+0x34f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
gs
jb     804ee9b <_IO_stdin_used+0x35f>
outsl  %ds:(%esi),(%dx)
jb     804ee4c <_IO_stdin_used+0x310>
jae    804ee93 <_IO_stdin_used+0x357>
je     804eea4 <_IO_stdin_used+0x368>
imul   $0x534f5120,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
arpl   %bp,0x6f(%ebx)
jo     804eeb3 <_IO_stdin_used+0x377>
jae    804ee41 <_IO_stdin_used+0x305>
add    %al,(%eax)
add    %cl,0x6e(%edi)
insb   (%dx),%es:(%edi)
jns    804ee69 <_IO_stdin_used+0x32d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x66(%edi)
and    %ch,0x726f2054
and    %ch,0x616d2052
jns    804ee7d <_IO_stdin_used+0x341>
bound  %esp,0x20(%ebp)
jne    804eed5 <_IO_stdin_used+0x399>
gs or  %fs:%gs:(%eax),%al
add    %al,(%eax)
jo     804eed3 <_IO_stdin_used+0x397>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
ja     804eee2 <_IO_stdin_used+0x3a6>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x61(%bp)
insb   (%dx),%es:(%edi)
jne    804eede <_IO_stdin_used+0x3a2>
and    %ah,0x6f(%esi)
jb     804ee9e <_IO_stdin_used+0x362>
sub    $0x64203a4d,%eax
outsl  %ds:(%esi),(%dx)
sub    $0x20,%al
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804eeb7 <_IO_stdin_used+0x37b>
and    %dh,0x61(%edi)
outsb  %ds:(%esi),(%dx)
je     804eeb1 <_IO_stdin_used+0x375>
popa
jb     804eef9 <_IO_stdin_used+0x3bd>
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0x2e73656e,0x6f(%eax,%eiz,1),%esp
or     (%eax),%al
add    %al,(%eax)
push   $0x3a51563f
dec    %ecx
cmp    0x3a(%ebp),%cl
popa
push   %ebp
arpl   %di,(%edx)
imul   $0x3a77,%fs:(%edx),%di
insb   (%dx),%es:(%edi)
cmp    0x3a(%ebx),%dl
outsb  %ds:(%esi),(%dx)
jo     804eef8 <_IO_stdin_used+0x3bc>
jno    804ef32 <_IO_stdin_used+0x3f6>
jae    804eefc <_IO_stdin_used+0x3c0>
jbe    804ef10 <_IO_stdin_used+0x3d4>
je     804ef00 <_IO_stdin_used+0x3c4>
inc    %ecx
push   %edi
cmp    0x6d(%edx),%al
cmp    0x62(%edi,%ecx,2),%al
push   %edx
push   %esp
cmp    (%eax),%al
add    %dl,0x61(%edi)
jb     804ef46 <_IO_stdin_used+0x40a>
imul   $0x7265203a,0x67(%esi),%ebp
jb     804ef50 <_IO_stdin_used+0x414>
jb     804ef03 <_IO_stdin_used+0x3c7>
jae    804ef4a <_IO_stdin_used+0x40e>
je     804ef5b <_IO_stdin_used+0x41f>
imul   $0x534f5120,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
arpl   %bp,0x6f(%ebx)
jo     804ef6a <_IO_stdin_used+0x42e>
jae    804eef8 <_IO_stdin_used+0x3bc>
inc    %esp
outsl  %ds:(%esi),(%dx)
and    %bh,0x6f(%ecx)
jne    804ef1f <_IO_stdin_used+0x3e3>
ja     804ef62 <_IO_stdin_used+0x426>
outsb  %ds:(%esi),(%dx)
je     804ef24 <_IO_stdin_used+0x3e8>
je     804ef75 <_IO_stdin_used+0x439>
and    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%bp,%si)
outsl  %ds:(%esi),(%dx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     804ef55 <_IO_stdin_used+0x419>
and    %dl,0x65(%eax,%ebp,2)
outsb  %ds:(%esi),(%dx)
and    %ch,0x57000a62
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jo     804ef94 <_IO_stdin_used+0x458>
outsb  %ds:(%esi),(%dx)
imul   $0x6f726220,0x67(%bp),%ebp
popa
arpl   %sp,%fs:0x73(%ecx)
je     804ef5b <_IO_stdin_used+0x41f>
popa
fs
fs
jb     804efa5 <_IO_stdin_used+0x469>
jae    804efb5 <_IO_stdin_used+0x479>
or     (%eax),%al
jo     804efaf <_IO_stdin_used+0x473>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     804ef74 <_IO_stdin_used+0x438>
jo     804efbf <_IO_stdin_used+0x483>
outsb  %ds:(%esi),(%dx)
and    %dh,0x69(%bx)
je     804efc5 <_IO_stdin_used+0x489>
and    %dh,0x6f(%edi,%ebp,2)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     804efdb <_IO_stdin_used+0x49f>
and    %ch,0x6e(%ecx)
je     804efd1 <_IO_stdin_used+0x495>
jb     804efe4 <_IO_stdin_used+0x4a8>
popa
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     804efa4 <_IO_stdin_used+0x468>
jo     804efef <_IO_stdin_used+0x4b3>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%si)
gs
jae    804efae <_IO_stdin_used+0x472>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804efb2 <_IO_stdin_used+0x476>
data16
jb     804eff6 <_IO_stdin_used+0x4ba>
insl   (%dx),%es:(%di)
outsb  %gs:(%esi),(%dx)
je     804efc9 <_IO_stdin_used+0x48d>
or     (%eax),%al
add    %al,(%eax)
add    %dl,0x41(%edi)
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jae    804f010 <_IO_stdin_used+0x4d4>
je     804f020 <_IO_stdin_used+0x4e4>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6f(%ebx)
jo     804f027 <_IO_stdin_used+0x4eb>
sub    %cl,0x43(%ecx)
dec    %ebp
push   %eax
pop    %edi
inc    %esi
dec    %ecx
dec    %esp
push   %esp
inc    %ebp
push   %edx
sub    %eax,(%eax)
add    %al,(%eax)
add    %dl,0x41(%edi)
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jns    804f03e <_IO_stdin_used+0x502>
jne    804f043 <_IO_stdin_used+0x507>
and    %ch,0x65(%ebx)
jb     804f044 <_IO_stdin_used+0x508>
gs
insb   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %dh,0x65(%esi)
gs
gs
jb     804f05b <_IO_stdin_used+0x51f>
and    %ch,0x6c(%edi)
fs and %cl,%cs:%fs:0x6f(%esi)
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
bound  %ebp,0x6d(%ebp,%eiz,2)
jae    804f022 <_IO_stdin_used+0x4e6>
or     (%eax),%al
add    %al,(%eax)
jo     804f063 <_IO_stdin_used+0x527>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
daa
je     804f024 <_IO_stdin_used+0x4e8>
imul   $0x20656c62,%fs:0x61(%ebx),%esi
insl   (%dx),%es:(%edi)
jne    804f07b <_IO_stdin_used+0x53f>
je     804f07a <_IO_stdin_used+0x53e>
arpl   %sp,0x73(%ecx)
je     804f036 <_IO_stdin_used+0x4fa>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     804f07d <_IO_stdin_used+0x541>
popa
arpl   %bp,0x0(%ebx)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
daa
je     804f04c <_IO_stdin_used+0x510>
jae    804f093 <_IO_stdin_used+0x557>
je     804f050 <_IO_stdin_used+0x514>
insl   (%dx),%es:(%edi)
jne    804f09f <_IO_stdin_used+0x563>
je     804f09e <_IO_stdin_used+0x562>
arpl   %sp,0x73(%ecx)
je     804f05a <_IO_stdin_used+0x51e>
je     804f0a5 <_IO_stdin_used+0x569>
insl   (%dx),%es:(%edi)
gs
sub    $0x6c2d6f74,%eax
imul   $0x69700000,0x65(%esi),%esi
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
daa
je     804f074 <_IO_stdin_used+0x538>
jae    804f0bb <_IO_stdin_used+0x57f>
je     804f078 <_IO_stdin_used+0x53c>
jne    804f0c8 <_IO_stdin_used+0x58c>
imul   $0x74207473,0x61(%ebx),%esp
imul   $0x2d6f742d,0x65(%ebp),%ebp
insb   (%dx),%es:(%edi)
imul   $0x0,0x65(%esi),%esi
inc    %ebp
jb     804f0e5 <_IO_stdin_used+0x5a9>
outsl  %ds:(%esi),(%dx)
jb     804f0b0 <_IO_stdin_used+0x574>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     804f09e <_IO_stdin_used+0x562>
jae    804f0e9 <_IO_stdin_used+0x5ad>
jp     804f0e7 <_IO_stdin_used+0x5ab>
and    %ah,0x73692064
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
gs and %cl,%cs:%gs:0x61(%di)
js     804f101 <_IO_stdin_used+0x5c5>
insl   (%dx),%es:(%edi)
jne    804f108 <_IO_stdin_used+0x5cc>
and    %ch,0x73(%ecx)
and    %ah,0xa64
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jo     804f110 <_IO_stdin_used+0x5d4>
arpl   %bp,0x65(%ebx)
je     804f0d4 <_IO_stdin_used+0x598>
jae    804f11f <_IO_stdin_used+0x5e3>
jp     804f11d <_IO_stdin_used+0x5e1>
and    %ah,0x73692064
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
gs and %cl,%cs:%gs:0x61(%di)
js     804f137 <_IO_stdin_used+0x5fb>
insl   (%dx),%es:(%edi)
jne    804f13e <_IO_stdin_used+0x602>
and    %ch,0x73(%ecx)
and    %ah,0xa64
add    %al,(%eax)
jo     804f147 <_IO_stdin_used+0x60b>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
push   %edi
popa
jb     804f154 <_IO_stdin_used+0x618>
imul   $0x6f73203a,0x67(%esi),%ebp
jne    804f161 <_IO_stdin_used+0x625>
arpl   %sp,0x20(%ebp)
popa
fs
fs
jb     804f15c <_IO_stdin_used+0x620>
jae    804f16c <_IO_stdin_used+0x630>
and    %ch,0x69(%ebp)
addr16 push $0x65622074
and    %dh,0x65(%ebx)
insb   (%dx),%es:(%edi)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %ch,0x6e(%edi)
and    %ah,0x76(%ebp,%eiz,2)
imul   $0x68746f20,0x65(%ebx),%esp
gs
jb     804f13c <_IO_stdin_used+0x600>
je     804f186 <_IO_stdin_used+0x64a>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0xa2e73
add    %al,(%eax)
jo     804f193 <_IO_stdin_used+0x657>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x72(%ebp)
jb     804f1a7 <_IO_stdin_used+0x66b>
jb     804f174 <_IO_stdin_used+0x638>
and    %cl,0x65(%ebp)
jae    804f1b2 <_IO_stdin_used+0x676>
popa
and    %dh,%gs:0x6f(%si)
outsl  %ds:(%esi),(%dx)
and    %ch,0x6e(%edi,%ebp,2)
addr16 sub $0x20,%al
insl   (%dx),%es:(%edi)
je     804f1c5 <_IO_stdin_used+0x689>
cmp    $0xa7525,%eax
add    %al,(%eax)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     804f1c1 <_IO_stdin_used+0x685>
arpl   %bp,0x65(%ebx)
je     804f185 <_IO_stdin_used+0x649>
je     804f1d6 <_IO_stdin_used+0x69a>
outsl  %ds:(%esi),(%dx)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
jb     804f1e2 <_IO_stdin_used+0x6a6>
and    %ch,(%eax)
and    $0x79622064,%eax
je     804f1dc <_IO_stdin_used+0x6a0>
jae    804f1a2 <_IO_stdin_used+0x666>
and    %ah,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0xa73
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
popaw
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
imul   $0x6c6c6174,0x73(%esi),%ebp
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     804f1c6 <_IO_stdin_used+0x68a>
imul   $0xa72,0x65(%esp,%esi,2),%bp
add    %ah,(%eax)
imul   $0x65735f70,0x6d(%ebx),%esp
jno    804f1f5 <_IO_stdin_used+0x6b9>
and    $0x73250075,%eax
and    %ch,(%eax)
and    $0xa002973,%eax
dec    %esi
dec    %edi
push   %eax
add    %cl,(%edx)
and    $0x52525363,%eax
cmp    (%eax),%ah
add    %cl,(%ecx)
xor    %ch,(%esi)
xor    %ch,(%esi)
xor    %ch,(%esi)
xor    %al,(%eax)
or     %esp,0x28090073
jae    804f243 <_IO_stdin_used+0x707>
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x6f(%edx)
jne    804f25d <_IO_stdin_used+0x721>
sub    %eax,%gs:(%eax)
or     0x52(%edx),%dl
cmp    (%eax),%ah
add    %cl,(%edx)
push   %esp
push   %ebx
cmp    (%eax),%ah
add    %cl,(%ecx)
and    $0x6120646c,%eax
bound  %esi,0x6f(%ebx)
insb   (%dx),%es:(%edi)
jne    804f278 <_IO_stdin_used+0x73c>
and    %ch,%gs:0x6f(%esi)
je     804f237 <_IO_stdin_used+0x6fb>
jae    804f280 <_IO_stdin_used+0x744>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804f276 <_IO_stdin_used+0x73a>
add    %cl,(%ecx)
and    $0x6e20646c,%eax
outsl  %ds:(%esi),(%dx)
je     804f249 <_IO_stdin_used+0x70d>
jae    804f292 <_IO_stdin_used+0x756>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     804f288 <_IO_stdin_used+0x74c>
add    %cl,(%ecx)
and    $0x6120646c,%eax
bound  %esi,0x6f(%ebx)
insb   (%dx),%es:(%edi)
jne    804f2a5 <_IO_stdin_used+0x769>
add    %cl,%gs:(%ecx)
and    $0x5500646c,%eax
outsb  %ds:(%esi),(%dx)
jb     804f2a1 <_IO_stdin_used+0x765>
arpl   %bp,0x72(%edi)
fs gs and %ch,%fs:%gs:0x6f(%eax)
jo     804f2ba <_IO_stdin_used+0x77e>
cmp    (%eax),%ah
and    $0xa000a64,%eax
jne    804f2be <_IO_stdin_used+0x782>
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%edi)
je     804f2c3 <_IO_stdin_used+0x787>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x25200078
xor    %edi,0x20(%eax)
and    %ah,0x20207831
and    $0x20783230,%eax
and    $0x20783430,%eax
and    $0x783430,%eax
and    %ah,(%eax)
and    %ah,0x25207831
xor    %dh,(%eax,%edi,2)
add    %ah,(%eax)
and    %ah,0x20783230
and    %ah,0x20783230
and    $0x783430,%eax
and    %ah,0x45002073
arpl   %bp,0x6f(%eax)
and    %dl,0x65(%edx)
jo     804f312 <_IO_stdin_used+0x7d6>
jns    804f2a8 <_IO_stdin_used+0x76c>
inc    %esp
gs
jae    804f320 <_IO_stdin_used+0x7e4>
imul   $0x6e6f6974,0x61(%esi),%ebp
and    %cl,0x65(%esi)
je     804f2d8 <_IO_stdin_used+0x79c>
push   %ebp
outsb  %ds:(%esi),(%dx)
jb     804f321 <_IO_stdin_used+0x7e5>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
inc    %esp
gs
jae    804f33c <_IO_stdin_used+0x800>
imul   $0x6e6f6974,0x61(%esi),%ebp
and    %cl,0x6f(%eax)
jae    804f348 <_IO_stdin_used+0x80c>
and    %dl,0x6e(%ebp)
jb     804f33e <_IO_stdin_used+0x802>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
inc    %esp
gs
jae    804f359 <_IO_stdin_used+0x81d>
imul   $0x6e6f6974,0x61(%esi),%ebp
and    %dl,0x6f(%eax)
jb     804f365 <_IO_stdin_used+0x829>
and    %dl,0x6e(%ebp)
jb     804f35b <_IO_stdin_used+0x81f>
popa
arpl   %bp,0x61(%eax)
bound  %ebp,0x0(%ebp,%eiz,2)
push   %ebx
outsl  %ds:(%esi),(%dx)
jne    804f374 <_IO_stdin_used+0x838>
arpl   %sp,0x20(%ebp)
push   %edx
outsl  %ds:(%esi),(%dx)
jne    804f37d <_IO_stdin_used+0x841>
and    %al,%gs:0x61(%esi)
imul   $0x73654400,0x64(%ebp,%eiz,2),%ebp
je     804f380 <_IO_stdin_used+0x844>
outsb  %ds:(%esi),(%dx)
popa
je     804f384 <_IO_stdin_used+0x848>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x65(%esi)
je     804f342 <_IO_stdin_used+0x806>
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %al,0x73(%ebp,%eiz,2)
je     804f398 <_IO_stdin_used+0x85c>
outsb  %ds:(%esi),(%dx)
popa
je     804f39c <_IO_stdin_used+0x860>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x6f(%eax)
jae    804f3ae <_IO_stdin_used+0x872>
and    %dl,0x6e(%ebp)
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
add    %dl,0x6f(%ebx)
jne    804f3b9 <_IO_stdin_used+0x87d>
arpl   %sp,0x20(%ebp)
dec    %eax
outsl  %ds:(%esi),(%dx)
jae    804f3c2 <_IO_stdin_used+0x886>
and    %cl,0x73(%ecx)
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
popa
je     804f3bb <_IO_stdin_used+0x87f>
add    %al,%fs:0x73(%ebp,%eiz,2)
je     804f3c6 <_IO_stdin_used+0x88a>
outsb  %ds:(%esi),(%dx)
popa
je     804f3ca <_IO_stdin_used+0x88e>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x65(%esi)
je     804f388 <_IO_stdin_used+0x84c>
push   %eax
jb     804f3da <_IO_stdin_used+0x89e>
push   $0x74696269
gs add %al,%fs:%gs:0x73(%ebp,%eiz,2)
je     804f3e1 <_IO_stdin_used+0x8a5>
outsb  %ds:(%esi),(%dx)
popa
je     804f3e5 <_IO_stdin_used+0x8a9>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %cl,0x6f(%eax)
jae    804f3f7 <_IO_stdin_used+0x8bb>
and    %dl,0x72(%eax)
outsl  %ds:(%esi),(%dx)
push   $0x74696269
gs add %dl,%fs:%gs:0x61(%eax)
arpl   %bp,0x65(%ebx)
je     804f3b6 <_IO_stdin_used+0x87a>
imul   $0x6572,0x65(%esp,%esi,2),%bp
add    %dl,%fs:0x72(%eax)
arpl   %sp,%gs:0x64(%ebp)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
push   %esi
imul   $0x6f697461,0x6c(%edi),%ebp
outsb  %ds:(%esi),(%dx)
add    %dl,0x72(%eax)
arpl   %sp,%gs:0x64(%ebp)
outsb  %gs:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
inc    %ebx
jne    804f436 <_IO_stdin_used+0x8fa>
outsl  %ds:(%esi),(%dx)
data16
data16
add    %dl,0x6f(%ebx)
jne    804f43c <_IO_stdin_used+0x900>
arpl   %sp,0x20(%ebp)
push   %ecx
jne    804f435 <_IO_stdin_used+0x8f9>
outsb  %ds:(%esi),(%dx)
arpl   %bp,0x0(%eax)
push   %edx
gs imul $0x4e207463,%fs:%gs:0x65(%edx),%esi
4e
gs
je     804f458 <_IO_stdin_used+0x91c>
outsl  %ds:(%esi),(%dx)
jb     804f44f <_IO_stdin_used+0x913>
add    %dl,0x65(%edx)
imul   $0x48207463,%fs:0x65(%edx),%esi
outsl  %ds:(%esi),(%dx)
jae    804f466 <_IO_stdin_used+0x92a>
add    %dl,0x65(%edx)
imul   $0x202c7463,%fs:0x65(%edx),%esi
inc    %edx
popa
and    %al,%fs:0x6f(%ebx)
fs cmp %fs:%gs:(%eax),%ah
and    $0x4e280064,%eax
gs
ja     804f42f <_IO_stdin_used+0x8f3>
outsb  %ds:(%esi),(%dx)
gs
js     804f487 <_IO_stdin_used+0x94b>
push   $0x203a706f
and    $0xa2973,%eax
inc    %ebp
arpl   %bp,0x6f(%eax)
and    %dl,0x65(%edx)
jno    804f49b <_IO_stdin_used+0x95f>
gs
jae    804f49d <_IO_stdin_used+0x961>
add    %dl,0x6d(%ecx,%ebp,2)
and    %dh,%gs:0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
imul   $0x63786520,0x65(%esi),%esi
gs gs fs gs add %al,%fs:%gs:0x72(%esi)
popa
and    %dh,0x65(%bp,%si)
popa
jae    804f4bd <_IO_stdin_used+0x981>
gs
insl   (%dx),%es:(%edi)
bound  %ebp,0x20(%ecx,%edi,2)
je     804f4bb <_IO_stdin_used+0x97f>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x78(%ebp)
arpl   %sp,0x65(%ebp)
fs gs add %dl,%fs:%gs:0x6d(%ecx,%ebp,2)
and    %ah,%gs:0x78(%ebp)
arpl   %sp,0x65(%ebp)
fs
gs
fs
sub    $0x20,%al
inc    %edx
popa
and    %al,%fs:0x6f(%ebx)
fs cmp %fs:%gs:(%eax),%ah
and    $0x54000a64,%eax
imul   $0x6d617473,0x65(%ebp),%ebp
jo     804f485 <_IO_stdin_used+0x949>
push   %esp
imul   $0x6d617473,0x65(%ebp),%ebp
jo     804f4af <_IO_stdin_used+0x973>
push   %edx
gs
jo     804f4ff <_IO_stdin_used+0x9c3>
jns    804f495 <_IO_stdin_used+0x959>
dec    %ecx
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
jb     804f508 <_IO_stdin_used+0x9cc>
popa
je     804f507 <_IO_stdin_used+0x9cb>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dl,0x65(%edx)
jno    804f51a <_IO_stdin_used+0x9de>
gs
jae    804f51c <_IO_stdin_used+0x9e0>
add    %cl,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     804f51c <_IO_stdin_used+0x9e0>
popa
je     804f51b <_IO_stdin_used+0x9df>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dl,0x65(%edx)
jo     804f525 <_IO_stdin_used+0x9e9>
jns    804f4bb <_IO_stdin_used+0x97f>
inc    %ecx
fs
fs
jb     804f525 <_IO_stdin_used+0x9e9>
jae    804f535 <_IO_stdin_used+0x9f9>
and    %cl,0x61(%ebp)
jae    804f532 <_IO_stdin_used+0x9f6>
and    %dl,0x65(%edx)
jno    804f541 <_IO_stdin_used+0xa05>
gs
jae    804f543 <_IO_stdin_used+0xa07>
add    %al,0x64(%ecx)
fs
jb     804f53a <_IO_stdin_used+0x9fe>
jae    804f54a <_IO_stdin_used+0xa0e>
and    %cl,0x61(%ebp)
jae    804f547 <_IO_stdin_used+0xa0b>
and    %dl,0x65(%edx)
jo     804f54d <_IO_stdin_used+0xa11>
jns    804f4e3 <_IO_stdin_used+0x9a7>
inc    %edx
popa
and    %cl,%fs:0x43(%ecx)
dec    %ebp
push   %eax
and    %dh,0x70(%ecx,%edi,2)
cmp    %gs:(%eax),%ah
and    $0x70000a64,%eax
imul   $0x2522203a,0x67(%esi),%ebp
jae    804f522 <_IO_stdin_used+0x9e6>
and    %ah,0x61(%edx)
and    %dh,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    804f56f <_IO_stdin_used+0xa33>
and    %ah,0x6f(%esi)
jb     804f52f <_IO_stdin_used+0x9f3>
push   %esp
dec    %edi
push   %ebx
or     (%eax),%al
je     804f589 <_IO_stdin_used+0xa4d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    804f51b <_IO_stdin_used+0x9df>
je     804f590 <_IO_stdin_used+0xa54>
popa
outsb  %ds:(%esi),(%dx)
fs
popa
fs
fs
jb     804f525 <_IO_stdin_used+0x9e9>
je     804f59a <_IO_stdin_used+0xa5e>
jo     804f59b <_IO_stdin_used+0xa5f>
gs
jae    804f59c <_IO_stdin_used+0xa60>
arpl   %ax,%gs:(%eax)
dec    %ecx
outsb  %ds:(%esi),(%dx)
jbe    804f594 <_IO_stdin_used+0xa58>
insb   (%dx),%es:(%edi)
imul   $0x73656d69,0x74(%eax,%eiz,1),%esp
je     804f59f <_IO_stdin_used+0xa63>
insl   (%dx),%es:(%edi)
jo     804f561 <_IO_stdin_used+0xa25>
je     804f5bc <_IO_stdin_used+0xa80>
jo     804f5aa <_IO_stdin_used+0xa6e>
or     (%eax),%al
outsl  %fs:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     804f54c <_IO_stdin_used+0xa10>
ja     804f5af <_IO_stdin_used+0xa73>
outsb  %ds:(%esi),(%dx)
je     804f551 <_IO_stdin_used+0xa15>
jo     804f5bc <_IO_stdin_used+0xa80>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%di)
imul   $0x69202c79,0x74(%ecx,%ebp,2),%ebp
jo     804f5d7 <_IO_stdin_used+0xa9b>
je     804f5cd <_IO_stdin_used+0xa91>
insb   (%dx),%es:(%edi)
jae    804f594 <_IO_stdin_used+0xa58>
and    $0x70000a73,%eax
imul   $0x6e75203a,0x67(%esi),%ebp
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x6f(%eax)
jae    804f5f1 <_IO_stdin_used+0xab5>
and    %ah,0x70000a73
imul   $0x6e75203a,0x67(%esi),%ebp
imul   $0x77,0x6f(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%ecx)
popa
arpl   %sp,0x20(%ebp)
and    $0x70000a73,%eax
imul   $0x5049203a,0x67(%esi),%ebp
pop    %edi
dec    %ebp
push   %ebp
dec    %esp
push   %esp
dec    %ecx
inc    %ebx
inc    %ecx
push   %ebx
push   %esp
pop    %edi
dec    %ecx
inc    %esi
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
push   %ebx
dec    %edi
pop    %edi
inc    %edx
dec    %ecx
dec    %esi
inc    %esp
push   %esp
dec    %edi
inc    %esp
inc    %ebp
push   %esi
dec    %ecx
inc    %ebx
inc    %ebp
add    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x67(%eax,%eax,1)
gs
je     804f645 <_IO_stdin_used+0xb09>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x6e(%ebx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x61(%edi)
je     804f647 <_IO_stdin_used+0xb0b>
popaw
fs
fs
jb     804f657 <_IO_stdin_used+0xb1b>
sub    %ch,(%ecx)
and    %ah,0x61(%esi)
imul   $0x70000a2e,0x64(%ebp,%eiz,2),%ebp
imul   $0x6369203a,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
jo     804f61b <_IO_stdin_used+0xadf>
outsl  %ds:(%esi),(%dx)
jo     804f663 <_IO_stdin_used+0xb27>
outsb  %ds:(%esi),(%dx)
and    %dh,0x6f(%ebx)
arpl   %bp,0x65(%ebx)
je     804f607 <_IO_stdin_used+0xacb>
jo     804f672 <_IO_stdin_used+0xb36>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
dec    %ecx
push   %eax
pop    %edi
dec    %ebp
push   %esp
push   %ebp
pop    %edi
inc    %esp
dec    %ecx
push   %ebx
inc    %ebx
dec    %edi
push   %esi
inc    %ebp
push   %edx
add    %ah,0x69(%edx)
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jb     804f68f <_IO_stdin_used+0xb53>
arpl   %bp,0x72(%edi)
and    %dh,%fs:0x6f(%edx)
jne    804f6a7 <_IO_stdin_used+0xb6b>
add    %dh,%gs:0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
je     804f6b0 <_IO_stdin_used+0xb74>
and    %ch,0x70(%edi)
je     804f6ab <_IO_stdin_used+0xb6f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
daa
je     804f671 <_IO_stdin_used+0xb35>
jae    804f6b8 <_IO_stdin_used+0xb7c>
je     804f675 <_IO_stdin_used+0xb39>
bound  %esi,0x6f(%edx)
popa
arpl   %sp,%fs:0x73(%ecx)
je     804f6c8 <_IO_stdin_used+0xb8c>
outsb  %ds:(%esi),(%dx)
add    %dh,0x69(%bx,%si)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
outsl  %ds:(%esi),(%dx)
jne    804f6df <_IO_stdin_used+0xba3>
and    %ch,0x66(%edi)
and    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     804f6ee <_IO_stdin_used+0xbb2>
or     %cs:(%eax),%al
push   %eax
dec    %ecx
dec    %esi
inc    %edi
and    %ah,0x25282073
jae    804f6ad <_IO_stdin_used+0xb71>
and    %al,(%eax)
data16
jb     804f6f8 <_IO_stdin_used+0xbbc>
insl   (%dx),%es:(%edi)
and    %ah,0x73252073
cmp    (%eax),%ah
add    %ah,0x64252864
sub    %esp,(%eax)
bound  %edi,0x74(%ecx)
gs
jae    804f6c0 <_IO_stdin_used+0xb84>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x74(%ecx,%eiz,2)
popa
or     %cs:(%eax),%al
jo     804f715 <_IO_stdin_used+0xbd9>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
and    %ah,0x72(%ebp)
jb     804f729 <_IO_stdin_used+0xbed>
jb     804f6f6 <_IO_stdin_used+0xbba>
and    %ah,0x8000a73
inc    %ebp
add    %al,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x63692073
insl   (%dx),%es:(%edi)
jo     804f730 <_IO_stdin_used+0xbf4>
jae    804f738 <_IO_stdin_used+0xbfc>
jno    804f712 <_IO_stdin_used+0xbd6>
and    $0x46002075,%eax
jb     804f74b <_IO_stdin_used+0xc0f>
insl   (%dx),%es:(%edi)
and    %ah,0x69203a73
arpl   %bp,0x70(%ebp)
pop    %edi
jae    804f74e <_IO_stdin_used+0xc12>
jno    804f728 <_IO_stdin_used+0xbec>
and    $0x28002075,%eax
inc    %edx
inc    %ecx
inc    %esp
and    %al,0x48(%ebx)
inc    %ebp
inc    %ebx
dec    %ebx
push   %ebx
push   %ebp
dec    %ebp
sub    %eax,(%eax)
and    %eax,0x0(%ebp)
and    %eax,0x43(%ebp)
add    %ah,0x252e756c
xor    %dh,(%esi)
insb   (%dx),%es:(%edi)
jne    804f72f <_IO_stdin_used+0xbf3>
add    %al,0x72(%esi)
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
and    %ah,0x203a73
add    %al,(%eax)
cwtl
lods   %ds:(%esi),%eax
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
mov    $0xad,%al
add    $0x8,%al
shrb   $0x4,-0x521ff7fc(%ebp)
or     %bl,-0x51(%eax)
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%al
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
pop    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
jo     804f6f8 <_IO_stdin_used+0xbbc>
add    $0x8,%al
mov    0xe00804ae,%al
scas   %es:(%edi),%al
add    $0x8,%al
clc
scas   %es:(%edi),%al
add    $0x8,%al
adc    %ch,-0x50d7f7fc(%edi)
add    $0x8,%al
inc    %eax
scas   %es:(%edi),%eax
add    $0x8,%al
subb   $0x4,-0x4f5cf7fc(%ebp)
or     %dl,-0x7ef7fb50(%edx)
mov    $0x4,%al
or     %dh,-0x50(%eax)
add    $0x8,%al
push   %ebx
mov    $0x4,%al
or     %al,-0x50(%edx)
add    $0x8,%al
xor    %esi,-0x4fdff7fc(%eax)
add    $0x8,%al
cmpxchg %al,(%eax,%ecx,1)
(bad)
scas   %es:(%edi),%eax
add    $0x8,%al
in     (%dx),%eax
scas   %es:(%edi),%eax
add    $0x8,%al
fsubrl -0x5034f7fc(%edi)
add    $0x8,%al
mov    $0xa90804af,%edx
scas   %es:(%edi),%eax
add    $0x8,%al
mov    $0xb0,%ah
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6af9f7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
rclb   %cl,0x4951308(%esp,%eax,1)
or     %dl,(%ebx)
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
lods   %ds:(%esi),%al
xchg   %eax,%esp
add    $0x8,%al
adc    -0x6af9f7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6bf7f7fc(%ebp),%edx
add    $0x8,%al
in     (%dx),%eax
xchg   %eax,%ebx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
stos   %eax,%es:(%edi)
xchg   %eax,%ebx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adcl   $0x4,-0x6af9f7fc(%ebx)
or     %dl,(%ebx)
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
ja     804f7c1 <_IO_stdin_used+0xc85>
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6af9f7fc(%ebp),%edx
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6aecf7fc(%ebp),%edx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6af9f7fc(%ebp),%edx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
adc    -0x6af9f7fc(%ebp),%edx
add    $0x8,%al
push   %es
xchg   %eax,%ebp
add    $0x8,%al
jo     804f8ef <_IO_stdin_used+0xdb3>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
addr16
gs
je     804f8f1 <_IO_stdin_used+0xdb5>
jo     804f906 <_IO_stdin_used+0xdca>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jo     804f902 <_IO_stdin_used+0xdc6>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
imul   $0x69700074,0x69(%esi),%ebp
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x70(%ecx)
pop    %edi
jae    804f917 <_IO_stdin_used+0xddb>
je     804f913 <_IO_stdin_used+0xdd7>
jo     804f928 <_IO_stdin_used+0xdec>
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jo     804f924 <_IO_stdin_used+0xde8>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     804f933 <_IO_stdin_used+0xdf7>
arpl   %si,0x0(%esp,%ebp,2)
jae    804f92c <_IO_stdin_used+0xdf0>
je     804f93e <_IO_stdin_used+0xe02>
imul   $0x3a676e69,0x70(%eax,%eax,1),%esp
and    %ah,0x61(%edx)
and    %dh,%fs:0x6d(%ecx,%ebp,2)
imul   $0x746e6920,0x67(%esi),%ebp
gs
jb     804f959 <_IO_stdin_used+0xe1d>
popa
insb   (%dx),%es:(%edi)
or     (%eax),%al
insl   (%dx),%es:(%edi)
popa
jb     804f956 <_IO_stdin_used+0xe1a>
and    %ah,0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804f913 <_IO_stdin_used+0xdd7>
bound  %esp,0x20(%ebp)
outsb  %ds:(%esi),(%dx)
gs
addr16 popa
je     804f965 <_IO_stdin_used+0xe29>
jbe    804f963 <_IO_stdin_used+0xe27>
or     (%eax),%al
jo     804f96b <_IO_stdin_used+0xe2f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %dh,0x61(%edi)
imul   $0x2e656d69,0x74(%eax,%eiz,1),%esi
or     (%eax),%al
jo     804f981 <_IO_stdin_used+0xe45>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %dh,0x6e(%ebx)
bound  %esi,%fs:0x66(%ebp)
and    %dh,0x61(%esi)
insb   (%dx),%es:(%edi)
jne    804f991 <_IO_stdin_used+0xe55>
or     %cs:(%eax),%al
push   %eax
inc    %ecx
push   %esp
push   %esp
inc    %ebp
push   %edx
dec    %esi
cmp    (%eax),%ah
xor    %bh,0x0(%eax)
and    $0x783230,%eax
jo     804f9ab <_IO_stdin_used+0xe6f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
je     804f9bc <_IO_stdin_used+0xe80>
insb   (%dx),%es:(%edi)
and    %ah,0x756f2075
je     804f971 <_IO_stdin_used+0xe35>
outsl  %ds:(%esi),(%dx)
data16
and    %dh,0x61(%edx)
outsb  %ds:(%esi),(%dx)
or     %gs:(%bx,%si),%al
jo     804f9c6 <_IO_stdin_used+0xe8a>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %ch,0x6e(%ecx,%ebp,2)
addr16
gs
jb     804f98c <_IO_stdin_used+0xe50>
je     804f9d7 <_IO_stdin_used+0xe9b>
insl   (%dx),%es:(%edi)
gs or  %cs:%gs:(%eax),%al
pop    %ebx
and    $0x252e756c,%eax
xor    %dh,(%esi)
insb   (%dx),%es:(%edi)
jne    804f9db <_IO_stdin_used+0xe9f>
and    %al,(%eax)
add    %dh,%cs:0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jae    804f9ef <_IO_stdin_used+0xeb3>
outsb  %ds:(%esi),(%dx)
fs
insl   (%dx),%es:(%edi)
jae    804f9f6 <_IO_stdin_used+0xeba>
add    %cl,(%eax)
and    %cl,(%eax)
add    %cl,(%eax)
inc    %ebx
add    %ah,0x79622064
je     804fa03 <_IO_stdin_used+0xec7>
jae    804f9c0 <_IO_stdin_used+0xe84>
data16
jb     804fa12 <_IO_stdin_used+0xed6>
insl   (%dx),%es:(%edi)
and    %ah,0x20003a73
je     804fa20 <_IO_stdin_used+0xee4>
insb   (%dx),%es:(%edi)
cmp    $0x20006425,%eax
sub    %dh,0x75(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs sub %eax,%fs:%gs:(%eax)
and    %dh,0x6d(%ecx,%ebp,2)
gs
cmp    $0x20646c25,%eax
insl   (%dx),%es:(%edi)
jae    804f9cb <_IO_stdin_used+0xe8f>
and    %dh,0x6d(%ecx,%ebp,2)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3130,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
je     804fa4a <_IO_stdin_used+0xf0e>
insl   (%dx),%es:(%edi)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3230,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
je     804fa5d <_IO_stdin_used+0xf21>
insl   (%dx),%es:(%edi)
gs
cmp    $0x2e646c25,%eax
and    $0x646c3330,%eax
and    %ch,0x73(%ebp)
add    %ah,(%eax)
sub    %al,0x50(%ebp,%edx,2)
and    %ebp,(%ecx)
add    %ah,(%eax)
sub    %al,0x41(%edx)
inc    %esp
and    %al,0x48(%ebx)
inc    %ebp
inc    %ebx
dec    %ebx
push   %ebx
push   %ebp
dec    %ebp
and    %ebp,(%ecx)
add    %cl,(%edx)
and    0x25000964,%esp
js     804fa46 <_IO_stdin_used+0xf0a>
add    %ch,0x25202d2d
jae    804fa4e <_IO_stdin_used+0xf12>
jo     804fa99 <_IO_stdin_used+0xf5d>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%bp,%di)
popa
je     804faa1 <_IO_stdin_used+0xf65>
jae    804faae <_IO_stdin_used+0xf72>
imul   $0x2d2d2d20,0x73(%ebx),%esp
or     (%eax),%al
and    $0x7020646c,%eax
popa
arpl   %bp,0x65(%ebx)
je     804fac1 <_IO_stdin_used+0xf85>
and    %dh,0x61(%edx,%esi,2)
outsb  %ds:(%esi),(%dx)
jae    804fac2 <_IO_stdin_used+0xf86>
imul   $0x202c64,0x65(%esp,%esi,2),%esi
and    $0x7220646c,%eax
arpl   %sp,%gs:0x69(%ebp)
jbe    804facd <_IO_stdin_used+0xf91>
add    %ch,%fs:(%eax,%eiz,1)
sub    0x6420646c,%esp
jne    804fae4 <_IO_stdin_used+0xfa8>
insb   (%dx),%es:(%edi)
imul   $0x736574,0x61(%ebx),%esp
sub    $0x20,%al
sub    0x6320646c,%esp
outsl  %ds:(%esi),(%dx)
jb     804faf9 <_IO_stdin_used+0xfbd>
jne    804faf9 <_IO_stdin_used+0xfbd>
je     804faf0 <_IO_stdin_used+0xfb4>
add    %ch,%fs:(%eax,%eiz,1)
sub    0x6520646c,%esp
jb     804fb09 <_IO_stdin_used+0xfcd>
outsl  %ds:(%esi),(%dx)
jb     804fb0d <_IO_stdin_used+0xfd1>
add    %ch,(%eax,%eiz,1)
and    $0x20252564,%eax
jo     804fb05 <_IO_stdin_used+0xfc9>
arpl   %bp,0x65(%ebx)
je     804fac9 <_IO_stdin_used+0xf8d>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804fb20 <_IO_stdin_used+0xfe4>
add    %ch,(%eax,%eiz,1)
je     804fb1b <_IO_stdin_used+0xfdf>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x736d646c
add    %ah,0x70697073
and    %ah,%gs:0x73250064
imul   $0x6d77652f,0x67(%eax),%esi
popa
and    %ah,0x30252e64
xor    0x25(%edi,%ebp,1),%esp
fs
cs
and    $0x20643330,%eax
insl   (%dx),%es:(%edi)
jae    804fae3 <_IO_stdin_used+0xfa7>
or     $0x2f646c25,%eax
and    $0x7020646c,%eax
popa
arpl   %bp,0x65(%ebx)
je     804fb66 <_IO_stdin_used+0x102a>
sub    $0x20,%al
and    $0x20252564,%eax
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    804fb71 <_IO_stdin_used+0x1035>
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jb     804fb6c <_IO_stdin_used+0x1030>
arpl   %si,0x6d(%esi)
jae    804fb73 <_IO_stdin_used+0x1037>
add    %al,(%eax)
add    %al,(%eax)
jo     804fb7b <_IO_stdin_used+0x103f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
bound  %esp,0x64(%ecx)
and    %ch,0x75(%esi)
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     804fb9e <_IO_stdin_used+0x1062>
and    %dh,0x20(%edi,%ebp,2)
je     804fba3 <_IO_stdin_used+0x1067>
popa
outsb  %ds:(%esi),(%dx)
jae    804fba2 <_IO_stdin_used+0x1066>
imul   $0x70000000,0xa(%esi,%ebp,1),%esi
imul   $0x6162203a,0x67(%esi),%ebp
and    %dh,%fs:0x72(%eax)
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %dh,%fs:0x61(%esi)
insb   (%dx),%es:(%edi)
jne    804fbb8 <_IO_stdin_used+0x107c>
sub    $0x20,%al
jae    804fbbf <_IO_stdin_used+0x1083>
outsl  %ds:(%esi),(%dx)
jne    804fbc6 <_IO_stdin_used+0x108a>
and    %ah,%fs:0x65(%edx)
and    %dh,(%ecx)
cs
cs
and    $0xa64,%eax
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804fb95 <_IO_stdin_used+0x1059>
jae    804fbdc <_IO_stdin_used+0x10a0>
je     804fb99 <_IO_stdin_used+0x105d>
jo     804fbed <_IO_stdin_used+0x10b1>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %dh,%fs:0x20(%edi,%ebp,2)
jbe    804fbe7 <_IO_stdin_used+0x10ab>
insb   (%dx),%es:(%edi)
jne    804fbee <_IO_stdin_used+0x10b2>
and    %bh,(%esi)
and    %dh,(%ebx)
or     (%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     804fbf9 <_IO_stdin_used+0x10bd>
je     804fc0e <_IO_stdin_used+0x10d2>
gs
jb     804fc0b <_IO_stdin_used+0x10cf>
jae    804fbbf <_IO_stdin_used+0x1083>
insl   (%dx),%es:(%edi)
jne    804fc15 <_IO_stdin_used+0x10d9>
je     804fbc4 <_IO_stdin_used+0x1088>
bound  %esp,0x20(%ebp)
jae    804fc19 <_IO_stdin_used+0x10dd>
arpl   %bp,%gs:0x66(%ecx)
imul   $0x20736120,0x64(%ebp),%esp
push   $0x64207865
imul   $0xa2e7374,0x69(%edi),%esp
add    %al,(%eax)
add    %al,(%eax)
and    $0x32257832,%eax
js     804fbf0 <_IO_stdin_used+0x10b4>
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x25(%eax),%bh
xor    0x0(%eax),%bh
add    %al,(%eax)
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
addr16 popa
je     804fc75 <_IO_stdin_used+0x1139>
jbe    804fc73 <_IO_stdin_used+0x1137>
and    %dh,0x61(%eax)
arpl   %bp,0x65(%ebx)
je     804fc36 <_IO_stdin_used+0x10fa>
jae    804fc81 <_IO_stdin_used+0x1145>
jp     804fc7f <_IO_stdin_used+0x1143>
and    %ah,0xa2e64
jo     804fc8b <_IO_stdin_used+0x114f>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
jo     804fc89 <_IO_stdin_used+0x114d>
arpl   %bp,0x65(%ebx)
je     804fc4d <_IO_stdin_used+0x1111>
jae    804fc98 <_IO_stdin_used+0x115c>
jp     804fc96 <_IO_stdin_used+0x115a>
and    %dh,0x6f(%edi,%ebp,2)
and    %ch,0x72(%ecx,%eiz,2)
cmp    %gs:(%bx,%si),%ah
and    $0xa64,%eax
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
jae    804fcc2 <_IO_stdin_used+0x1186>
gs
jb     804fc6e <_IO_stdin_used+0x1132>
jns    804fcb5 <_IO_stdin_used+0x1179>
je     804fc72 <_IO_stdin_used+0x1136>
outsw  %ds:(%esi),(%dx)
jb     804fc76 <_IO_stdin_used+0x113a>
imul   $0x65735f70,0x6d(%ebx),%esp
jno    804fc9c <_IO_stdin_used+0x1160>
and    $0xa756c,%eax
push   %edi
inc    %ecx
push   %edx
dec    %esi
dec    %ecx
dec    %esi
inc    %edi
cmp    (%eax),%ah
jo     804fce1 <_IO_stdin_used+0x11a5>
outsl  %ds:(%esi),(%dx)
bound  %esp,0x62(%ecx)
insb   (%dx),%es:(%edi)
jns    804fca2 <_IO_stdin_used+0x1166>
and    %dh,0x63(%edx)
jbe    804fcdd <_IO_stdin_used+0x11a1>
jne    804fce3 <_IO_stdin_used+0x11a7>
and    %ch,0x73(%ecx)
and    %ch,0x6f(%esi)
je     804fca5 <_IO_stdin_used+0x1169>
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jne    804fcf1 <_IO_stdin_used+0x11b5>
push   $0x206f7420
push   $0x20646c6f
jo     804fd08 <_IO_stdin_used+0x11cc>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
fs or  %cs:%fs:(%eax),%al
add    %al,(%eax)
jo     804fd0b <_IO_stdin_used+0x11cf>
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     804fccd <_IO_stdin_used+0x1191>
data16
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
cmp    %fs:(%eax),%esp
insl   (%dx),%es:(%edi)
imul   $0x206c616d,0x69(%esi),%ebp
imul   $0x61767265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     804fd30 <_IO_stdin_used+0x11f4>
and    %ah,%fs:0x6f(%esi)
jb     804fcf1 <_IO_stdin_used+0x11b5>
jne    804fd46 <_IO_stdin_used+0x120a>
gs
jb     804fcf6 <_IO_stdin_used+0x11ba>
imul   $0x736d6425,0x20(%ebx),%esi
or     (%eax),%al
add    %dh,0x69(%eax)
outsb  %ds:(%esi),(%dx)
cmp    (%bx,%si),%ah
imul   $0x206c6167,0x65(%esp,%ebp,2),%ebp
jo     804fd62 <_IO_stdin_used+0x1226>
gs
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
popa
and    %ah,%fs:0x6e(%ecx)
fs
das
outsl  %ds:(%esi),(%dx)
jb     804fd1d <_IO_stdin_used+0x11e1>
imul   $0x61767265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
or     (%eax),%al
add    %dl,0x61(%edi)
jb     804fd7a <_IO_stdin_used+0x123e>
imul   $0x6f6e203a,0x67(%esi),%ebp
and    %dl,0x4f(%ebx)
pop    %edi
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
push   %ebx
push   %esp
inc    %ecx
dec    %ebp
push   %eax
and    %dh,0x75(%ebx)
jo     804fd95 <_IO_stdin_used+0x1259>
outsl  %ds:(%esi),(%dx)
jb     804fd9c <_IO_stdin_used+0x1260>
sub    $0x20,%al
popaw
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
imul   $0x63616220,0x67(%esi),%ebp
imul   $0x74,(%eax),%esp
outsl  %ds:(%esi),(%dx)
and    %dl,0x49(%ebx)
dec    %edi
inc    %ebx
inc    %edi
push   %ebx
push   %esp
inc    %ecx
dec    %ebp
push   %eax
or     (%eax),%al
add    %al,(%eax)
push   %edi
popa
jb     804fdba <_IO_stdin_used+0x127e>
imul   $0x6146203a,0x67(%esi),%ebp
imul   $0x206f7420,0x64(%ebp,%eiz,2),%ebp
jae    804fdc2 <_IO_stdin_used+0x1286>
je     804fd7f <_IO_stdin_used+0x1243>
insl   (%dx),%es:(%edi)
popa
jb     804fdce <_IO_stdin_used+0x1292>
and    %ah,0x57000a64
popa
jb     804fdda <_IO_stdin_used+0x129e>
imul   $0x6974203a,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x66(%edi)
and    %ah,0x79(%ecx,%eiz,2)
and    %ah,0x6f(%edi)
gs
jae    804fda2 <_IO_stdin_used+0x1266>
bound  %esp,0x63(%ecx)
imul   $0x28,(%eax),%esp
and    $0x7375646c,%eax
sub    %ebp,(%eax,%eiz,1)
je     804fdf3 <_IO_stdin_used+0x12b7>
imul   $0x67,0x6e(%ecx),%ebp
and    %ah,0x6f(%ebx)
jne    804fe09 <_IO_stdin_used+0x12cd>
je     804fe02 <_IO_stdin_used+0x12c6>
jb     804fe0c <_IO_stdin_used+0x12d0>
gs
popa
jae    804fe18 <_IO_stdin_used+0x12dc>
jb     804fe0a <_IO_stdin_used+0x12ce>
jae    804fdd5 <_IO_stdin_used+0x1299>
or     (%eax),%al
add    %al,(%eax)
add    %cl,(%edx)
ja     804fe21 <_IO_stdin_used+0x12e5>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x61(%si)
je     804fe18 <_IO_stdin_used+0x12dc>
and    %ah,0x79(%edx)
je     804fe21 <_IO_stdin_used+0x12e5>
and    %ah,(%ebx)
and    $0x68732064,%eax
outsl  %ds:(%esi),(%dx)
jne    804fe32 <_IO_stdin_used+0x12f6>
and    %ah,%fs:0x65(%edx)
and    %dh,(%eax)
js     804fdf3 <_IO_stdin_used+0x12b7>
js     804fdf0 <_IO_stdin_used+0x12b4>
bound  %esi,0x74(%ebp)
and    %dh,0x61(%edi)
jae    804fdf8 <_IO_stdin_used+0x12bc>
xor    %bh,0x25(%eax)
js     804fddd <_IO_stdin_used+0x12a1>
add    %al,(%eax)
add    %dh,0x74(%edx)
je     804fe04 <_IO_stdin_used+0x12c8>
insl   (%dx),%es:(%edi)
imul   $0x2f677661,0x2f(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
js     804fe1f <_IO_stdin_used+0x12e3>
insl   (%dx),%es:(%edi)
fs
gs
jbe    804fe15 <_IO_stdin_used+0x12d9>
cmp    $0x646c2520,%eax
cs
and    $0x646c3330,%eax
das
and    $0x252e756c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x252e646c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x252e646c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
and    %ch,%fs:0x73(%ebp)
add    %al,(%eax)
add    %ch,(%eax,%eiz,1)
insl   (%dx),%es:(%edi)
imul   $0x2f677661,0x2f(%esi),%ebp
gs
ja     804fe9e <_IO_stdin_used+0x1362>
popa
das
insl   (%dx),%es:(%edi)
popa
js     804fe57 <_IO_stdin_used+0x131b>
cmp    $0x646c2520,%eax
cs
and    $0x646c3330,%eax
das
and    $0x252e756c,%eax
xor    %dh,(%ebx)
insb   (%dx),%es:(%edi)
fs
das
and    $0x30252e64,%eax
xor    0x25(%edi,%ebp,1),%esp
insb   (%dx),%es:(%edi)
fs
cs
and    $0x646c3330,%eax
and    %ch,0x73(%ebp)
add    %al,(%eax)
add    %bh,-0x57f7fb3c(%eax)
les    (%eax,%ecx,1),%eax
mov    $0xc6,%al
add    $0x8,%al
nop
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0x80,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0x70,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0x10,(%eax,%ecx,1)
movb   $0xb0,(%eax,%ecx,1)
movb   $0xa0,(%eax,%ecx,1)
movb   $0x80,(%eax,%ecx,1)
les    (%eax,%ecx,1),%eax
inc    %eax
les    (%eax,%ecx,1),%eax
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
xor    %al,%ah
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
rol    %bl
add    $0x8,%al
rol    $0x4,%bl
or     %dh,-0x7f7fb3a(%eax)
mov    $0xc6b00804,%esi
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
and    %al,%bl
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
mov    0x580804c2,%al
ret    $0x804
adc    $0xbf,%al
add    $0x8,%al
mov    $0xc6,%al
add    $0x8,%al
xor    %bh,-0x39fff7fc(%edi)
add    $0x8,%al
lock lds (%eax,%ecx,1),%eax
mov    0x380804c5,%al
lds    (%eax,%ecx,1),%eax
mov    $0xc6,%al
add    $0x8,%al
sub    %al,%ch
add    $0x8,%al
enter  $0x4c4,$0x8
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
out    %eax,(%dx)
jg     804ffa9 <_IO_stdin_used+0x146d>
in     $0xd0,%eax
push   %edx
dec    %ebp
bound  %eax,0x41(%eax)
add    %al,(%eax)
jp     804ff98 <_IO_stdin_used+0x145c>
add    %ebx,(%ebx)
add    (%ebx),%edi
adc    %al,(%ecx)
add    %al,(%eax)
and    %eax,(%eax)
add    %al,(%eax)
in     (%dx),%al
mov    %edi,%?
ljmp   *(%ecx,%eax,1)
add    %al,(%eax)
pop    %esp
xchg   %eax,%ebx
(bad)
push   %eax
add    (%eax),%al
add    %ch,-0x1(%esi,%eiz,4)
call   *0x1(%eax)
add    %al,(%eax)
fsubl  0x174ffff(%esi)
add    %al,(%eax)
sbb    $0xa7,%al
(bad)
decl   0x4c000001(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
jmp    *-0x73ffffff(%eax)
cmpsl  %es:(%edi),%ds:(%esi)
(bad)
call   *%esp
add    %eax,(%eax)
add    %cl,0x204ffff(%eax,%ebp,4)
add    %al,(%eax)
in     (%dx),%al
lods   %ds:(%esi),%al
(bad)
incl   0x0(%edx,%eax,1)
add    %cl,(%esi,%ebp,4)
(bad)
pushl  0x2(%eax)
add    %al,(%eax)
cmp    $0xb2,%al
(bad)
call   *(%eax)
add    (%eax),%eax
add    %cl,0x354ffff(,%esi,4)
add    %al,(%eax)
sbb    $0xb7,%al
(bad)
call   *-0x44640000(%ebx,%eax,1)
(bad)
(bad)
in     (%dx),%al
add    (%eax),%eax
add    %bh,(%esp,%edi,4)
(bad)
decl   (%esp,%eax,1)
add    %al,(%eax)
dec    %esp
mov    $0x420ffff,%esp
add    %al,(%eax)
jl     804ff9e <_IO_stdin_used+0x1462>
(bad)
pushl  (%esp,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
mov    $0x46cffff,%esi
add    %al,(%eax)
cmp    $0xbf,%al
(bad)
lcall  *-0x40840000(%esp,%eax,1)
(bad)
inc    %eax
add    $0x0,%al
add    %cl,(%ecx,%ecx,8)
(bad)
incl   (%eax)
add    $0xc9cc0000,%eax
(bad)
jmp    *-0x35e40000(,%eax,1)
(bad)
(bad)
cmp    $0x5,%al
add    %al,(%eax)
dec    %esp
iret
(bad)
ljmp   *0x5(%eax)
add    %al,(%eax)
dec    %esp
sar    %bh
pushl  -0x63fffffb(%eax)
(bad)
(bad)
decl   (%eax)
push   %es
add    %al,(%eax)
pop    %esp
(bad)
jmp    *0x6(%eax)
add    %al,(%eax)
sbb    $0xe2,%al
(bad)
decl   -0x23fffffa(%eax)
jecxz  8050042 <_IO_stdin_used+0x1506>
dec    %eax
push   %es
add    %al,(%eax)
or     $0xe8,%al
(bad)
push   %esp
push   %es
add    %al,(%eax)
mov    %gs,%ecx
(bad)
ljmp   *(%edi,%eax,1)
add    %al,(%eax)
pop    %esp
jmp    805005a <_IO_stdin_used+0x151e>
jmp    *0x0(%edi,%eax,1)
add    %cl,%ah
jmp    8050062 <_IO_stdin_used+0x1526>
.byte 0xff
.byte 0xa0
pop    %es
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805007f <_IO_stdin_used+0x1543>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x70ffff8d,%eax
add    $0x0,%al
add    %al,(%eax)
push   %cs
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805009f <_IO_stdin_used+0x1563>
js     805009d <_IO_stdin_used+0x1561>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
and    %al,(%eax)
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dl,0x61ffff(,%eiz,4)
add    %al,(%eax)
add    %dl,0xe(%edi)
or     %al,0xec35302(%ebx)
add    $0x4e,%al
push   %cs
or     %al,0xec36702(%ebx)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %ah,-0x5b(%eax)
(bad)
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,(%eax,%eax,1)
add    %al,(%eax)
js     80500e2 <_IO_stdin_used+0x15a6>
add    %al,(%eax)
mov    %fs,0x2effff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ch,0xe(%edx)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
nop
add    %al,(%eax)
add    %ah,0x3fffff(%ebp,%eiz,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
outsl  %ds:(%esi),(%dx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
les    (%eax),%eax
add    %al,(%eax)
mov    $0xa5,%al
(bad)
(bad)
incb   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
push   %eax
or     (%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x46,%al
or     (%edx),%eax
insb   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%esi)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
hlt
add    %al,(%eax)
add    %al,0x56ffffa6(%eax)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4404(%esi)
addl   $0x61,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %dh,(%ecx,%eax,1)
add    %al,(%eax)
mov    0x1cffffaa,%al
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x45,(%ebx)
push   %cs
xor    %al,(%ebx)
or     %eax,(%ecx)
push   %cs
or     $0x46,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
jl     80501c6 <_IO_stdin_used+0x168a>
add    %al,(%eax)
pusha
add    %eax,(%eax)
add    %dl,0x422ffff(%ebx,%ebp,4)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x4c,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xe(%edx,%ecx,1),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
imul   $0xe,(%edx),%ecx
or     %al,0xe(%ebx,%eax,8)
add    $0x49,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     (%edx),%eax
jnp    805021d <_IO_stdin_used+0x16e1>
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%ebx),%ecx
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x4c,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
loopne 805024b <_IO_stdin_used+0x170f>
add    %al,(%eax)
fs
nop
(bad)
lcall  *0x12
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x40,%eax
add    %al,(%edx)
add    %al,(%eax)
and    $0xaf,%al
(bad)
call   *%eax
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x5800e46
sbb    $0x1,%al
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
inc    %esp
add    (%eax),%al
add    %dh,0x3ffffb1(%eax)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x45,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0x0(%eax,%eax,1),%edx
add    %al,-0x4c800000(%edx,%eax,1)
(bad)
(bad)
js     80502fa <_IO_stdin_used+0x17be>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x32,0x3600e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%esi
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
faddl  (%edx)
add    %al,(%eax)
test   $0xb7,%al
(bad)
call   *0x0(%ecx)
dec    %ebp
push   %cs
xor    %al,(%edx)
imul   $0x4,(%esi),%ecx
dec    %eax
push   %cs
xor    %cl,0xe(%edi)
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
add    (%eax),%al
add    %ch,(%eax)
mov    $0xbffff,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %al,(%ebx)
add    %al,(%eax)
and    $0xb8,%al
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %bl,0xe(%eax)
and    %dh,(%eax,%eax,1)
add    %al,(%eax)
and    $0x3,%al
add    %al,(%eax)
inc    %eax
mov    $0x1e5ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    (%esi),%eax
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
pop    %esp
add    (%eax),%eax
add    %bh,%al
mov    $0xceffff,%ecx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
inc    %eax
add    0xa(%ecx),%bl
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
mov    %es,(%ebx)
add    %al,(%eax)
cwtl
mov    $0x3cffff,%edx
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
mov    $0x3,%al
add    %al,(%eax)
mov    $0xba,%ah
(bad)
decl   0x9(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1c00e46
dec    %esp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esp
add    %al,(%eax)
add    %dh,%al
add    (%eax),%eax
add    %al,(%esp,%eax,8)
(bad)
(bad)
mov    $0x0,%esp
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0x43080e0a(%eax),%cl
ret
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
adc    $0x4,%al
add    %al,(%eax)
mov    0x4fffffc4,%al
add    %al,(%eax)
add    %al,(%eax)
push   %ebx
push   %cs
xor    %bh,0xe(%ebx)
add    $0x0,%al
sub    %al,(%eax)
add    %al,(%eax)
sub    $0x4,%al
add    %al,(%eax)
fadd   %st(4),%st
(bad)
jmp    *0x5
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %cl,0xa(%ebp)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax,%eax,1),%eax
add    %bl,0x4(%eax)
add    %al,(%eax)
fmul   %st,%st(1)
(bad)
push   %esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0x41100e0a(%ecx),%bh
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%eax),%ebp
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %ah,-0x6bfffffc(%eax)
lret   $0xffff
inc    %esi
push   %es
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1f00e46
ja     8050532 <_IO_stdin_used+0x19f6>
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
jbe    8050552 <_IO_stdin_used+0x1a16>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%edx
add    %bh,%al
add    $0x0,%al
add    %cl,0x6b4ffff(%eax,%edx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x17,0x3500e43
add    (%edx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
arpl   %cx,(%edx)
push   %cs
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
push   %eax
add    $0xd6f40000,%eax
(bad)
(bad)
mov    $0x4,%ebx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x3c600e43
add    %al,(%eax)
js     80505e7 <_IO_stdin_used+0x1aab>
add    %al,(%eax)
mov    %ds,%ebx
(bad)
pushl  0x1(%ecx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x70,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
mov    $0xc000005,%eax
(bad)
pushl  (%eax)
add    $0x0,%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x0,0x21f00e46
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
in     $0x5,%al
add    %al,(%eax)
adc    %ah,%cl
(bad)
pushl  0x1(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%esi)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
sbb    $0x6,%al
add    %al,(%eax)
pop    %eax
loop   805068a <_IO_stdin_used+0x1b4e>
inc    %edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%esi)
add    0x41100e0a(%ebp),%al
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,0x0(%esi,%eax,1)
add    %dh,%al
jecxz  80506c2 <_IO_stdin_used+0x1b86>
jmp    *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,0x24000006(%eax)
in     $0xff,%al
incl   (%edx)
nop
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
jo     8051eab <_IO_stdin_used+0x336f>
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
mov    $0x0,%dl
add    %al,(%eax)
or     $0x0,%al
add    %al,(%eax)
sbb    %cl,0xd0804(%esi)
add    %al,(%eax)
and    $0xeb,%al
add    $0x8,%al
sbb    %eax,(%eax)
add    %al,(%eax)
add    %bl,(%edi)
add    $0x1b08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
add    $0x1f,%al
add    $0x1c08,%eax
add    %al,(%eax,%eax,1)
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cmp    %al,0x60804(%edi)
add    %al,(%eax)
clc
addl   $0xa,(%eax,%ecx,1)
jle    8051f6d <_IO_stdin_used+0x3431>
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
and    %al,0x208
add    %dh,(%eax)
add    (%eax),%al
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
add    %al,(%eax)
pop    %ss
add    %al,(%eax)
add    %ch,%al
mov    (%eax,%ecx,1),%eax
adc    %eax,(%eax)
add    %al,(%eax)
rorb   $0x0,0x120804(%ebx)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%ebx)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %bh,%dh
(bad)
ljmp   *0x60(%edi)
mov    (%eax,%ecx,1),%eax
(bad)
(bad)
ljmp   *0x1(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *-0x4a(%edi)
mov    (%eax,%ecx,1),%al
add    %al,(%eax)
or     $0x1f,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,-0x72(%esi)
add    $0x8,%al
data16
mov    (%eax,%ecx,1),%es
jbe    8051fa4 <_IO_stdin_used+0x3468>
add    $0x8,%al
xchg   %cl,-0x7169f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
mov    (%eax,%ecx,1),%es
mov    $0x8e,%dh
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
(bad)
mov    (%eax,%ecx,1),%es
out    %al,$0x8e
add    $0x8,%al
(bad)
mov    (%eax,%ecx,1),%es
push   %es
popl   (%eax,%ecx,1)
push   %ss
popl   (%eax,%ecx,1)
popl   %es:(%eax,%ecx,1)
popl   %ss:(%eax,%ecx,1)
inc    %esi
popl   (%eax,%ecx,1)
push   %esi
popl   (%eax,%ecx,1)
popw   (%eax,%ecx,1)
jbe    8051fe5 <_IO_stdin_used+0x34a9>
add    $0x8,%al
xchg   %cl,-0x7069f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
popl   (%eax,%ecx,1)
mov    $0x8f,%dh
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
(bad)
popl   (%eax,%ecx,1)
out    %al,$0x8f
add    $0x8,%al
(bad)
popl   (%eax,%ecx,1)
push   %es
nop
add    $0x8,%al
push   %ss
nop
add    $0x8,%al
es
nop
add    $0x8,%al
ss
nop
add    $0x8,%al
inc    %esi
nop
add    $0x8,%al
push   %esi
nop
add    $0x8,%al
xchg   %ax,%ax
add    $0x8,%al
jbe    8052026 <_IO_stdin_used+0x34ea>
add    $0x8,%al
xchg   %dl,-0x6f69f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
nop
add    $0x8,%al
mov    $0x90,%dh
add    $0x8,%al
(bad)
nop
add    $0x8,%al
(bad)
nop
add    $0x8,%al
out    %al,$0x90
add    $0x8,%al
notb   -0x6ef9f7fc(%eax)
add    $0x8,%al
push   %ss
xchg   %eax,%ecx
add    $0x8,%al
es
xchg   %eax,%ecx
add    $0x8,%al
ss
xchg   %eax,%ecx
add    $0x8,%al
inc    %esi
xchg   %eax,%ecx
add    $0x8,%al
push   %esi
xchg   %eax,%ecx
add    $0x8,%al
xchg   %ax,%cx
add    $0x8,%al
jbe    8052067 <_IO_stdin_used+0x352b>
add    $0x8,%al
xchg   %dl,-0x6e69f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%ecx
add    $0x8,%al
mov    $0x91,%dh
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
xchg   %eax,%ecx
add    $0x8,%al
out    %al,$0x91
add    $0x8,%al
notb   -0x6df9f7fc(%ecx)
add    $0x8,%al
push   %ss
xchg   %eax,%edx
add    $0x8,%al
es
xchg   %eax,%edx
add    $0x8,%al
ss
xchg   %eax,%edx
add    $0x8,%al
inc    %esi
xchg   %eax,%edx
add    $0x8,%al
push   %esi
xchg   %eax,%edx
add    $0x8,%al
xchg   %ax,%dx
add    $0x8,%al
jbe    80520a8 <_IO_stdin_used+0x356c>
add    $0x8,%al
xchg   %dl,-0x6d69f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edx
add    $0x8,%al
or     %al,(%eax)
add    %al,(%eax)
andb   $0x5,(%ecx)
or     %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
add    %cl,0x0(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0xaa010000,%eax
stos   %al,%es:(%edi)
add    %al,(%eax)
push   %es
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
call   *0x0(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    $0x100,%eax
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bh,%bh
(bad)
decl   (%edi)
push   %es
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
xor    $0x5,%al
or     %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
xor    $0x6,%al
or     %dl,(%eax)
add    %al,(%eax)
add    %al,%al
and    %eax,0x108
add    %ch,%al
and    %eax,0x8
add    %al,(%eax)
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%ecx)
add    %dh,0x32(%ebx)
xor    %dh,(%ecx)
xor    (%ecx),%dh
xor    (%edx),%dh
xor    %eax,(%eax)
add    %al,(%eax)
inc    %eax
sub    %ah,(%ebx)
sub    %esp,(%eax)
inc    %ebx
outsl  %ds:(%esi),(%dx)
jo     80522a2 <_IO_stdin_used+0x3766>
jb     8052294 <_IO_stdin_used+0x3758>
addr16 push $0x63282074
sub    %esp,(%eax)
xor    %edi,(%ecx)
cmp    %bh,(%ecx)
and    %dl,0x65(%eax,%ebp,2)
and    %dl,0x65(%edx)
outsb  %gs:(%si),(%dx)
je     80522b6 <_edata+0xc>
and    %ch,0x66(%edi)
and    %dh,0x65(%eax,%ebp,2)
and    %dl,0x6e(%ebp)
imul   $0x74697372,0x65(%esi),%esi
jns    8052276 <_IO_stdin_used+0x373a>
outsl  %ds:(%esi),(%dx)
data16
and    %al,0x61(%ebx)
insb   (%dx),%es:(%edi)
imul   $0x61696e72,0x6f(%esi),%esp
or     %cs:(%eax),%ah
inc    %ecx
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dh,0x69(%edx)
addr16 push $0x72207374
gs
jae    80522da <stderr+0x1a>
jb     80522ed <optind+0xd>
gs fs or %cs:%fs:%gs:(%eax),%al
or     $0x0,%al
add    %al,(%eax)
or     $0xff000000,%eax
(bad)
(bad)
jg     80522c1 <stderr+0x1>
add    %al,(%eax)
add    %bh,%bh
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
jg     8052295 <_IO_stdin_used+0x3759>
or     %al,(%eax)
add    %dl,(%eax)
daa
add    %al,(%eax)
call   7b0522a4 <_end+0x72fecd30>
xor    (%eax),%dh
xor    %esi,(%edx)
xor    %esi,(%edx)
xor    (%ecx),%dh
add    %al,(%eax)
jo     6b <_init-0x8048dad>
outsb  %ds:(%esi),(%dx)
add    %al,(%bx,%si)
add    %al,(%eax)
.byte 0x28
xor    $0x30,%cl
