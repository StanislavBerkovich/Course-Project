das
insb   (%dx),%es:(%edi)
imul   $0x6c2d646c,0x2f(%edx),%esp
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %cs:(%eax),%al
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
inc    %edi
dec    %esi
push   %ebp
add    %al,0x63(%edi)
cmp    %esi,(%eax)
or     %cl,0x6b5f8853(%edi)
mov    %esi,(%ecx)
ljmp   $0x5dc4,$0x82627136
gs
add    (%eax),%eax
add    %al,(%eax)
jb     80481b2 <_init-0x13da>
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
pop    %es
add    %al,(%eax)
add    %al,-0x4dffc000(%edx)
and    %ecx,0x3004408(%edi,%edi,1)
mov    0x72000004,%al
add    %al,(%eax)
add    %dh,0x0(%ebp)
add    %al,(%eax)
jg     80481d6 <_init-0x13b6>
add    %al,(%eax)
inc    %edx
inc    %ebp
aad    $0xec
mov    $0x297c92e3,%edx
sbb    $0x50bc1c8c,%eax
jbe    8048186 <_init-0x1406>
cmp    %dh,%dl
mov    (%esi,%eax,4),%ebx
lock xchg %eax,%esi
jl     80481bf <_init-0x13cd>
sub    $0x63,%al
jb     8048231 <_init-0x135b>
lods   %ds:(%esi),%eax
cmp    %ecx,0xc0e34bac
fdivs  0x58(%ecx)
sbb    $0x96,%al
mov    0x62e49789,%al
inc    %ecx
cmc
mov    $0xea0ef18d,%ecx
shr    %cl,%edi
push   %cs
xor    %ah,%al
notl   (%edx)
mov    $0xa2,%bl
notl   (%edx)
push   %ebp
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ah
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%cl
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%edx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0(%ecx,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
in     (%dx),%al
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%ch
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%al
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    (%eax,%eax,1),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x2(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,%bh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%bl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%al
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,%dh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%dh
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x1(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
stos   %eax,%es:(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %eax
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,(%esi)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dh
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x1(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x4(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,%bh
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
or     $0x4,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x4(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x1(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x0,%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%cl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%bl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,%cl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x0(%esp,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%ecx)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x5(%edi)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
addl   $0x0,(%ecx)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x5
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x3(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x1,%edi
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x0(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
dec    %edi
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,%dl
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,%dh
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%ebx)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jmp    80485fb <_init-0xf91>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
xchg   %eax,%ecx
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%ch
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %al,(%esi)
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,%dh
add    $0x0,%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,0x2(%ebx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x2(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x2(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
faddl  (%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bl,0x3(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    %al,0x0
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,0x4(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dl
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x2(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x2(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%esi)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x3
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,(%edi)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%eax)
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %cl,0x5
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x1(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
push   %ecx
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x0(%eax,%eax,1)
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,%dh
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %al,0x4(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
popf
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x3(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %ah,0x4(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
and    %eax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sbb    %eax,(%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
movl   $0x0,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
sub    %eax,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
add    (%ebx),%al
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
mov    $0x2,%ch
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fild   (%edx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
arpl   %ax,(%ecx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
and    %eax,(%ebx)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
jp     80488db <_init-0xcb1>
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
imul   $0x0,(%eax,%eax,1),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,%ah
add    %eax,(%eax)
add    %dl,(%edx)
add    %al,(%eax)
add    %dh,(%ebx)
add    (%eax),%eax
add    %dl,(%edx)
add    %al,(%eax)
add    %ch,(%ecx)
add    (%eax),%al
add    %dl,(%edx)
add    %al,(%eax)
add    %bh,0x4(%ebp)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
push   %esp
add    $0x33400000,%eax
push   %es
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%eax)
add    %ah,0x5(%edi)
add    %al,(%eax)
xchg   %eax,%esp
aas
push   %es
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%ecx)
add    %al,%bh
add    (%eax),%al
add    %ah,0x4080633(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %ch,0x33400000(,%eax,1)
push   %es
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
pop    %edx
add    (%eax),%eax
add    %al,0x6(%ebx,%esi,1)
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
daa
add    $0x96b00000,%eax
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
aaa
add    $0x33600000,%eax
push   %es
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
in     (%dx),%eax
add    (%eax),%al
add    %dh,(%eax)
cltd
add    $0x8,%al
add    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%al
add    %al,(%eax)
fldl   (%eax)
add    %al,(%eax)
movsb  %fs:(%esi),%es:(%edi)
add    $0x408,%eax
add    %dl,(%ecx)
add    %cl,(%edi)
add    %bl,0x5(%ebx)
add    %al,(%eax)
inc    %eax
xor    (%esi),%eax
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %bl,(%ecx)
add    %dl,%bl
add    %eax,(%eax)
add    %ah,0x33(%eax)
push   %es
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
sbb    $0x40000004,%eax
xor    (%esi),%eax
or     %al,(%eax,%eax,1)
add    %al,(%eax)
and    %eax,(%eax)
sbb    %eax,(%eax)
push   $0x0
add    %al,(%eax)
mov    %ss,0x804(%ebp)
add    %al,(%eax)
adc    (%eax),%al
or     (%eax),%eax
nop
add    %al,(%eax)
add    %cl,0x5(%esp,%eiz,4)
or     %al,(%eax)
add    %al,(%eax)
add    %dl,(%edx)
add    %cl,(%esi)
add    %ch,(%ecx)
add    %eax,(%eax)
add    %al,0x4080633(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %bl,(%ecx)
add    %cl,0x3(%eax)
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
xor    (%esi),%eax
or     %al,(%eax,%eax,1)
add    %al,(%eax)
adc    %eax,(%eax)
sbb    %eax,(%eax)
add    %ch,0x62(%ecx,%ebp,2)
jae    8048aa3 <_init-0xae9>
insb   (%dx),%es:(%edi)
imul   $0x6f732e78,0x75(%esi),%ebp
xor    %eax,%cs:(%eax)
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
fs
gs
jb     8048ab7 <_init-0xad5>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
pop    %edi
insl   (%dx),%es:(%di)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
jae    8048ae2 <_init-0xaaa>
popa
jb     8048ae5 <_init-0xaa7>
pop    %edi
pop    %edi
add    %bl,0x4a(%edi)
jbe    8048ad7 <_init-0xab5>
push   %edx
imul   $0x6c437265,%gs:0x74(%bp,%di),%esi
6c
popa
jae    8048af8 <_init-0xa94>
gs
jae    8048a88 <_init-0xb04>
pop    %edi
dec    %ecx
push   %esp
dec    %ebp
pop    %edi
jb     8048af4 <_init-0xa98>
imul   $0x4d547265,0x74(%bp,%di),%esi
inc    %ebx
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
gs
push   %esp
popa
bound  %ebp,0x0(%ebp,%eiz,2)
pop    %edi
imul   $0x67660074,0x69(%esi),%ebp
gs
je     8048b13 <_init-0xa79>
imul   $0x66006e6f,0x63(%ebp,%eiz,2),%ebp
jb     8048b1c <_init-0xa70>
arpl   %bp,%gs:0x6e(%edi)
add    %ch,0x65(%edi,%eiz,2)
je     8048b27 <_init-0xa65>
imul   $0x5f006e6f,0x63(%ebp,%eiz,2),%ebp
imul   $0x6c00,0x69(%esi),%bp
imul   $0x732e6c63,0x61(%edx),%esp
outsl  %ds:(%esi),(%dx)
xor    %eax,%cs:(%eax)
popa
arpl   %bp,0x67(%edi,%ebx,2)
gs
je     8048b41 <_init-0xa4b>
outsb  %gs:(%esi),(%dx)
je     8048b58 <_init-0xa34>
jns    8048ae8 <_init-0xaa4>
popa
arpl   %bp,0x67(%edi,%ebx,2)
gs
je     8048b4f <_init-0xa3d>
je     8048b53 <_init-0xa39>
addr16 pop %edi
je     8048b6f <_init-0xa1d>
jo     8048b5d <_init-0xa2f>
add    %ah,0x63(%ecx)
insb   (%dx),%es:(%edi)
pop    %edi
gs
js     8048b74 <_init-0xa18>
outsb  %gs:(%esi),(%dx)
fs
gs
fs
pop    %edi
imul   $0x696c,0x0(%ebp,%eiz,2),%bp
bound  %esp,0x2e(%ebx)
jae    8048b81 <_init-0xa0b>
cs add %bl,%cs:%ss:0x49(%edi)
dec    %edi
pop    %edi
jae    8048b8f <_init-0x9fd>
imul   $0x64657375,%fs:0x5f(%esi),%ebp
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048b9c <_init-0x9f0>
push   $0x72747300
arpl   %si,0x79(%eax)
add    %bl,0x5f(%edi)
jo     8048ba8 <_init-0x9e4>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x66,(%eax),%eax
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
je     8048ba8 <_init-0x9e4>
push   $0x74657300
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %ch,%gs:0x62(%ebp)
jb     8048bc9 <_init-0x9c3>
outsl  %ds:(%esi),(%dx)
ja     8048bbb <_init-0x9d1>
add    %dh,0x74(%ebx)
jb     8048bcb <_init-0x9c1>
arpl   %bp,0x70(%ebp)
add    %ch,0x70(%edi)
je     8048bce <_init-0x9be>
outsb  %ds:(%esi),(%dx)
add    %dh,%fs:0x74(%ebx)
jb     8048bde <_init-0x9ae>
arpl   %bp,0x72(%eax)
add    %ah,0x66(%esi)
insb   (%dx),%es:(%edi)
jne    8048be8 <_init-0x9a4>
push   $0x6c6e755f
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x67(%ebx,%eiz,2)
gs
je     8048bfa <_init-0x992>
gs
js     8048bfd <_init-0x98f>
add    %dh,0x74(%ebx)
jo     8048bfc <_init-0x990>
arpl   %si,0x79(%eax)
add    %ah,0x65(%edi)
je     8048c06 <_init-0x986>
ja     8048c0d <_init-0x97f>
imul   $0x65736f6c,0x63(%eax,%eax,1),%esp
imul   $0x656d5f5f,%fs:0x0(%edx),%esi
insl   (%dx),%es:(%edi)
jo     8048c0e <_init-0x97e>
jo     8048c26 <_init-0x966>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ah,0x65(%edi)
je     8048c1d <_init-0x96f>
jb     8048c1f <_init-0x96d>
imul   $0x726f7272,0x65(%eax,%eax,1),%esp
add    %dh,0x69(%ebx)
outsb  %ds:(%si),(%dx)
popa
insb   (%dx),%es:(%edi)
add    %ch,0x62(%ebp)
jae    8048c40 <_init-0x94c>
outsl  %ds:(%esi),(%dx)
ja     8048c32 <_init-0x95a>
jae    8048bd1 <_init-0x9bb>
jae    8048c3c <_init-0x950>
addr16 jo 8048c48 <_init-0x944>
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x61(%ebp)
jae    8048c47 <_init-0x945>
add    %bl,0x5f(%edi)
jae    8048c55 <_init-0x937>
popa
arpl   %bp,0x5f(%ebx)
arpl   %bp,0x6b(%eax)
pop    %edi
popaw
imul   $0x72707773,0x69(%eax,%eax,1),%ebp
imul   $0x61657200,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
popa
bound  %ebp,0x72(%edi)
je     8048c05 <_init-0x987>
pop    %edi
gs
js     8048c72 <_init-0x91a>
je     8048c0b <_init-0x981>
jo     8048c7f <_init-0x90d>
outsl  %ds:(%esi),(%dx)
addr16 jb 8048c72 <_init-0x91a>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6d616e5f,0x6e(%edi),%ebp
add    %dh,%gs:0x74(%ebx)
jb     8048c8d <_init-0x8ff>
je     8048c92 <_init-0x8fa>
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
popa
jae    8048ca4 <_init-0x8e8>
gs
jb     8048ca8 <_init-0x8e4>
pop    %edi
popaw
imul   $0x7974635f,0x5f(%eax,%eax,1),%ebp
jo     8048ca6 <_init-0x8e6>
pop    %edi
addr16
gs
je     8048ca5 <_init-0x8e7>
insl   (%dx),%es:(%edi)
bound  %ebx,0x63(%edi)
jne    8048cbe <_init-0x8ce>
pop    %edi
insl   (%dx),%es:(%edi)
popa
js     8048c51 <_init-0x93b>
imul   $0x797474,0x61(%ebx),%esi
addr16
gs
je     8048ccc <_init-0x8c0>
ja     8048ccc <_init-0x8c0>
popa
insl   (%dx),%es:(%edi)
add    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jae    8048cde <_init-0x8ae>
jb     8048cd8 <_init-0x8b4>
outsb  %gs:(%esi),(%dx)
add    %dh,0x6e(%ebp)
addr16
gs
je     8048cd8 <_init-0x8b4>
add    %dh,0x69(%ebx)
addr16
gs
insl   (%dx),%es:(%edi)
jo     8048cf1 <_init-0x89b>
jns    8048cf2 <_init-0x89a>
gs
je     8048c82 <_init-0x90a>
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
jae    8048cec <_init-0x8a0>
je     8048c89 <_init-0x903>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
arpl   %bp,%gs:0x6e(%edi)
jbe    8048c94 <_init-0x8f8>
jae    8048d0a <_init-0x882>
jb     8048d0b <_init-0x881>
je     8048d0c <_init-0x880>
add    %bl,0x5f(%edi)
gs
jb     8048d12 <_init-0x87a>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
imul   $0x65706f00,0x6e(%edi),%ebp
outsb  %ds:(%esi),(%dx)
ss
xor    $0x0,%al
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %bp,0x70(%ebp)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
jo     8048d22 <_init-0x86a>
jo     8048d3a <_init-0x852>
add    %bl,0x5f(%edi)
data16
js     8048d3a <_init-0x852>
je     8048d2a <_init-0x862>
je     8048d01 <_init-0x88b>
xor    $0x0,%al
pop    %edi
jae    8048d35 <_init-0x857>
je     8048d3c <_init-0x850>
insl   (%dx),%es:(%edi)
jo     8048cd5 <_init-0x8b7>
pop    %edi
pop    %edi
data16
jo     8048d4c <_init-0x840>
imul   $0x68635f66,0x74(%esi),%ebp
imul   $0x73,(%eax),%eax
imul   $0x65736464,0x61(%edi),%esp
je     8048ced <_init-0x89f>
addr16
gs
je     8048d58 <_init-0x834>
jb     8048d61 <_init-0x82b>
popa
insl   (%dx),%es:(%edi)
add    %dh,0x63(%edi)
jae    8048d71 <_init-0x81b>
imul   $0x64747300,0x68(%esp,%esi,2),%esp
outsl  %ds:(%esi),(%dx)
jne    8048d79 <_init-0x813>
add    %ah,0x73(%esi)
gs imul $0x34,%gs:0x36(%edi),%ebp
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
add    %ah,0x63(%esi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    8048d81 <_init-0x80b>
add    %dh,0x74(%ebx)
jb     8048d95 <_init-0x7f7>
outsl  %ds:(%esi),(%dx)
jne    8048d90 <_init-0x7fc>
add    %ch,0x61(%ebp)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
jb     8048d8f <_init-0x7fd>
imul   $0x73626d00,0x65(%ebx),%esi
imul   $0x5f5f0074,0x69(%esi),%ebp
insb   (%dx),%es:(%edi)
js     8048db2 <_init-0x7da>
je     8048da2 <_init-0x7ea>
je     8048d79 <_init-0x813>
xor    $0x0,%al
pop    %edi
pop    %edi
jne    8048daf <_init-0x7dd>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048d4d <_init-0x83f>
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
insb   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
imul   $0x706f006f,0x66(%bp),%ebp
outsb  %gs:(%esi),(%dx)
imul   $0x73785f5f,%fs:0x0(%edx),%esi
je     8048dc8 <_init-0x7c4>
je     8048d9f <_init-0x7ed>
xor    $0x0,%al
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
bound  %ebx,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
addr16
gs
je     8048de2 <_init-0x7aa>
outsb  %ds:(%esi),(%dx)
jbe    8048d80 <_init-0x80c>
outsl  %ds:(%esi),(%dx)
jo     8048df7 <_init-0x795>
popa
jb     8048ded <_init-0x79f>
add    %bl,0x5f(%edi)
data16
jb     8048df1 <_init-0x79b>
popa
imul   $0x64747300,%fs:0x67(%esi),%ebp
gs
jb     8048e0a <_init-0x782>
add    %dh,0x63(%edi)
ja     8048e06 <_init-0x786>
fs
je     8048e08 <_init-0x784>
add    %ch,0x6f(%ecx)
arpl   %si,0x0(%esp,%ebp,2)
pop    %edi
outsl  %ds:(%esi),(%dx)
bound  %esi,0x74(%ebx)
popa
arpl   %bp,0x5f(%ebx)
outsb  %ds:(%esi),(%dx)
gs
ja     8048e17 <_init-0x775>
push   $0x6b6e75
jb     8048e20 <_init-0x76c>
popa
fs
insb   (%dx),%es:(%edi)
imul   $0x63736600,0x6b(%esi),%ebp
popa
outsb  %ds:(%esi),(%dx)
data16
add    %ah,0x65(%edi)
je     8048e3c <_init-0x750>
jo     8048e43 <_init-0x749>
pop    %edi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ah,0x77(%esi)
jb     8048e49 <_init-0x743>
je     8048e47 <_init-0x745>
add    %ah,0x65(%edi)
je     8048e5b <_init-0x731>
imul   $0x6164666f,0x65(%ebp),%ebp
jns    8048df0 <_init-0x79c>
jae    8048e5b <_init-0x731>
addr16 popa
arpl   %si,0x6f(%ecx,%ebp,2)
outsb  %ds:(%esi),(%dx)
add    %bl,0x5f(%edi)
insl   (%dx),%es:(%edi)
gs
insl   (%dx),%es:(%edi)
arpl   %si,0x79(%eax)
pop    %edi
arpl   %bp,0x6b(%eax)
add    %dh,0x69(%ebx)
imul   $0x65626d65,0x6d(%bp,%di),%esi
jb     8048e13 <_init-0x779>
arpl   %bp,0x63(%edi,%ebp,2)
imul   $0x65,0x67(%edi),%ebx
je     8048e91 <_init-0x6fb>
imul   $0x665f5f00,0x65(%ebp),%ebp
jo     8048e8b <_init-0x701>
outsb  %ds:(%esi),(%dx)
imul   $0x636f6c00,%fs:0x67(%esi),%ebp
popa
insb   (%dx),%es:(%edi)
je     8048e9c <_init-0x6f0>
insl   (%dx),%es:(%edi)
add    %ch,%gs:0x65(%ebx,%esi,2)
imul   $0x34,%gs:(%esi),%esi
add    %dh,0x74(%ebx)
jb     8048ea5 <_init-0x6e7>
push   $0x73690072
ja     8048eac <_init-0x6e0>
outsb  %ds:(%esi),(%dx)
je     8048ebe <_init-0x6ce>
insb   (%dx),%es:(%edi)
add    %ch,0x6b(%ebp)
je     8048ebb <_init-0x6d1>
insl   (%dx),%es:(%edi)
add    %dh,%gs:0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 8048ebc <_init-0x6d0>
insl   (%dx),%es:(%edi)
pop    %edi
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0x6f68735f,0x6e(%edi),%ebp
jb     8048ee1 <_init-0x6ab>
pop    %edi
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x64(%esi)
outsl  %ds:(%esi),(%dx)
jo     8048edd <_init-0x6af>
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%edx)
popa
fs imul $0x63770034,%fs:0x36(%edx),%esi
63
jae    8048efc <_init-0x690>
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
bound  %esi,0x0(%ebx)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048f06 <_init-0x686>
jne    8048f09 <_init-0x683>
jo     8048f00 <_init-0x68c>
jb     8048efc <_init-0x690>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
arpl   %si,0x70(%ecx,%edi,2)
gs
pop    %edi
je     8048f1a <_init-0x672>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048f14 <_init-0x678>
jb     8048f10 <_init-0x67c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %ax,(%eax)
pop    %edi
pop    %edi
jae    8048f29 <_init-0x663>
jb     8048f24 <_init-0x668>
outsb  %ds:(%esi),(%dx)
je     8048f24 <_init-0x668>
pop    %edi
arpl   %bp,0x6b(%eax)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048f2f <_init-0x65d>
add    %bl,0x6f(%edi)
bound  %esi,0x74(%ebx)
popa
arpl   %bp,0x5f(%ebx)
bound  %esp,0x67(%ebp)
imul   $0x646e6962,0x0(%esi),%ebp
je     8048f45 <_init-0x647>
js     8048f56 <_init-0x636>
outsl  %fs:(%esi),(%dx)
insl   (%dx),%es:(%edi)
popa
imul   $0x69727766,0x0(%esi),%ebp
je     8048f54 <_init-0x638>
pop    %edi
jne    8048f60 <_init-0x62c>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %dh,%fs:0x74(%ebx)
jb     8048f60 <_init-0x62c>
insl   (%dx),%es:(%edi)
jo     8048f00 <_init-0x68c>
pop    %edi
pop    %edi
jae    8048f78 <_init-0x614>
jb     8048f7a <_init-0x612>
outsl  %ds:(%esi),(%dx)
jne    8048f75 <_init-0x617>
insb   (%dx),%es:(%edi)
pop    %edi
imul   $0x616e7265,0x74(%esi),%ebp
insb   (%dx),%es:(%edi)
add    %dh,0x67(%ebx,%eiz,2)
gs
je     8048f8a <_init-0x602>
addr16 jb 8048f8d <_init-0x5ff>
add    %bl,0x5f(%edi)
insb   (%dx),%es:(%edi)
imul   $0x6174735f,0x63(%edx),%esp
jb     8048f9e <_init-0x5ee>
pop    %edi
insl   (%dx),%es:(%edi)
popa
imul   $0x66726964,0x0(%esi),%ebp
add    %dh,%fs:0x74(%ebx)
jo     8048f9d <_init-0x5ef>
jo     8048fb5 <_init-0x5d7>
add    %dh,0x74(%ebx)
jb     8048fa4 <_init-0x5e8>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
outsl  %ds:(%esi),(%dx)
jbe    8048faf <_init-0x5dd>
jb     8048fb2 <_init-0x5da>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     8048f50 <_init-0x63c>
data16
jo     8048fc8 <_init-0x5c4>
je     8048fc8 <_init-0x5c4>
pop    %edi
jne    8048fc6 <_init-0x5c6>
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x65(%ebx)
add    %ah,%fs:0x72(%esi)
gs add %bl,%gs:0x5f(%edi)
jo     8048fda <_init-0x5b2>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
add    %bl,%gs:0x5f(%edi)
jo     8048fe5 <_init-0x5a7>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%si),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
pop    %edi
data16
jne    8048fe9 <_init-0x5a3>
insb   (%dx),%es:(%edi)
add    %bl,0x5f(%edi)
arpl   %di,0x61(%eax)
pop    %edi
popa
je     8048fed <_init-0x59f>
js     8048ff3 <_init-0x599>
je     8048f8c <_init-0x600>
pop    %edi
gs
fs
popa
je     8048ff3 <_init-0x599>
add    %bl,0x5f(%edi)
bound  %esi,0x73(%ebx)
pop    %edi
jae    804900f <_init-0x57d>
popa
jb     8049012 <_init-0x57a>
add    %bl,0x65(%edi)
outsb  %ds:(%esi),(%dx)
add    %al,%fs:0x43(%ecx)
dec    %esp
pop    %edi
xor    %ebp,(%esi)
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %ebp,(%esi)
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ch
xor    (%eax),%eax
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %esi,(%edi)
add    %al,0x4c(%edi)
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%esi),%ebp
xor    $0x0,%al
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %eax,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    %al,(%eax)
inc    %edi
dec    %esp
dec    %ecx
inc    %edx
inc    %ebx
pop    %edi
xor    (%esi),%ch
xor    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    $0x0,%al
add    $0x3000000,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%esi)
add    %al,(%ebx)
add    %al,(%eax,%eax,1)
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
pop    %es
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%ecx)
add    %al,(%ebx)
add    %cl,(%edx)
add    %al,(%ebx)
add    %cl,(%ecx)
add    %al,(%ebx)
add    %cl,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax)
add    %cl,(%edx)
add    %al,0x3000000
add    %al,(%eax,%eax,1)
add    $0x0,%al
add    (%eax),%eax
add    (%eax),%eax
add    %al,(%eax)
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
add    (%eax),%eax
or     %eax,(%eax)
add    $0x0,%al
add    $0x3000400,%eax
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
or     (%eax),%al
add    $0x3000300,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %cl,(%edx)
add    %cl,(%edx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,(%edx)
add    %al,(%ebx)
add    %al,0x1000100
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %al,(%ecx)
add    %al,(%ecx)
add    %al,(%ebx)
add    %al,(%ebx)
add    %eax,(%eax)
add    %eax,(%eax)
xchg   %eax,%esi
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,0x24(%eax)
(bad)
add    $0x90000,%eax
insb   (%dx),%es:(%edi)
add    $0x0,%eax
add    %al,(%eax)
add    %eax,(%eax)
or     %eax,(%eax)
roll   %cl,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
jae    8049165 <_init-0x427>
imul   $0xb0000,(%ecx),%ecx
je     8049153 <_init-0x439>
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    0x69(%ecx),%ch
or     $0xa0000,%eax
addb   $0x0,0x100000
add    %dh,0x1a(%ebx)
imul   $0x80000,(%ecx),%ecx
mov    0x100000,%al
add    %al,(%eax)
adc    $0x69,%al
imul   $0x596,0x70000,%ecx
00
adc    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%edi
xchg   %eax,%ecx
xchg   %eax,%esi
push   %es
add    %al,(%eax)
push   %es
add    %ah,0x10000005(%eax)
add    %al,(%eax)
add    %dh,0x69(%ecx,%ebx,1)
or     %eax,(%eax)
add    %al,0x5ab00
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
imul   $0x40000,0xd(%ecx),%ebp
mov    $0x5,%bh
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    %ch,0x69(%ecx)
or     $0x30000,%eax
roll   $0x0,0x100000
add    %dl,(%ebx)
imul   $0x20000,0xd(%ecx),%ebp
lret
add    $0x0,%eax
cld
das
push   %es
or     %al,(%esi)
cmp    (%eax),%al
add    %al,0x33(%eax)
push   %es
or     %al,0x44000075
xor    (%esi),%eax
or     %al,0x60000076
xor    (%esi),%eax
or     %al,0x80000078
xor    (%esi),%eax
or     %al,0xa0000080
xor    (%esi),%eax
or     %al,0xa4000074
xor    (%esi),%eax
.byte 0x8
.byte 0x5
.byte 0x81
or     $0x30,%al
push   %es
or     %al,(%edi)
add    %eax,(%eax)
add    %dl,(%eax)
xor    %al,(%esi)
or     %al,(%edi)
add    (%eax),%al
add    %dl,(%eax,%esi,1)
push   %es
or     %al,(%edi)
add    (%eax),%eax
add    %bl,(%eax)
xor    %al,(%esi)
or     %al,(%edi)
add    $0x0,%al
add    %bl,(%eax,%esi,1)
push   %es
or     %al,(%edi)
add    $0x30200000,%eax
push   %es
or     %al,(%edi)
push   %es
add    %al,(%eax)
and    $0x30,%al
push   %es
or     %al,(%edi)
pop    %es
add    %al,(%eax)
sub    %dh,(%eax)
push   %es
or     %al,(%edi)
or     %eax,(%eax)
add    %ch,(%eax,%esi,1)
push   %es
or     %al,(%edi)
or     (%eax),%al
add    %dh,(%eax)
xor    %al,(%esi)
or     %al,(%edi)
or     (%eax),%eax
add    %dh,(%eax,%esi,1)
push   %es
or     %al,(%edi)
or     $0x0,%al
add    %bh,(%eax)
xor    %al,(%esi)
or     %al,(%edi)
or     $0x303c0000,%eax
push   %es
or     %al,(%edi)
push   %cs
add    %al,(%eax)
inc    %eax
xor    %al,(%esi)
or     %al,(%edi)
sldt   (%eax)
inc    %esp
xor    %al,(%esi)
or     %al,(%edi)
adc    %al,(%eax)
add    %cl,0x30(%eax)
push   %es
or     %al,(%edi)
ja     804928b <_init-0x301>
add    %cl,0x6(%eax,%esi,1)
or     %al,(%edi)
adc    %eax,(%eax)
add    %dl,0x30(%eax)
push   %es
or     %al,(%edi)
adc    (%eax),%al
add    %dl,0x6(%eax,%esi,1)
or     %al,(%edi)
adc    (%eax),%eax
add    %bl,0x30(%eax)
push   %es
or     %al,(%edi)
adc    $0x0,%al
add    %bl,0x6(%eax,%esi,1)
or     %al,(%edi)
adc    $0x30600000,%eax
push   %es
or     %al,(%edi)
push   %ss
add    %al,(%eax)
xor    %al,%fs:(%esi)
or     %al,(%edi)
pop    %ss
add    %al,(%eax)
push   $0x7080630
sbb    %al,(%eax)
add    %ch,0x6(%eax,%esi,1)
or     %al,(%edi)
sbb    %eax,(%eax)
add    %dh,0x30(%eax)
push   %es
or     %al,(%edi)
sbb    (%eax),%al
add    %dh,0x6(%eax,%esi,1)
or     %al,(%edi)
sbb    (%eax),%eax
add    %bh,0x30(%eax)
push   %es
or     %al,(%edi)
sbb    $0x0,%al
add    %bh,0x6(%eax,%esi,1)
or     %al,(%edi)
sbb    $0x30800000,%eax
push   %es
or     %al,(%edi)
push   %ds
add    %al,(%eax)
test   %dh,(%eax)
push   %es
or     %al,(%edi)
pop    %ds
add    %al,(%eax)
mov    %dh,(%eax)
push   %es
or     %al,(%edi)
and    %al,(%eax)
add    %cl,0x21070806(%eax,%esi,1)
add    %al,(%eax)
nop
xor    %al,(%esi)
or     %al,(%edi)
and    (%eax),%al
add    %dl,0x23070806(%eax,%esi,1)
add    %al,(%eax)
cwtl
xor    %al,(%esi)
or     %al,(%edi)
and    $0x0,%al
add    %bl,0x25070806(%eax,%esi,1)
add    %al,(%eax)
mov    0x7080630,%al
add    %al,%es:(%eax)
movsb  %ds:(%esi),%es:(%edi)
xor    %al,(%esi)
or     %al,(%edi)
daa
add    %al,(%eax)
test   $0x30,%al
push   %es
or     %al,(%edi)
sub    %al,(%eax)
add    %ch,0x29070806(%eax,%esi,1)
add    %al,(%eax)
mov    $0x30,%al
push   %es
or     %al,(%edi)
sub    (%eax),%al
add    %dh,0x2b070806(%eax,%esi,1)
add    %al,(%eax)
mov    $0x7080630,%eax
sub    $0x0,%al
add    %bh,0x2d070806(%eax,%esi,1)
add    %al,(%eax)
(bad)
xor    %al,(%esi)
or     %al,(%edi)
add    %al,%cs:(%eax)
les    (%eax),%esi
push   %es
or     %al,(%edi)
das
add    %al,(%eax)
enter  $0x630,$0x8
pop    %es
xor    %al,(%eax)
add    %cl,%ah
xor    %al,(%esi)
or     %al,(%edi)
xor    %eax,(%eax)
add    %dl,%al
xor    %al,(%esi)
or     %al,(%edi)
xor    (%eax),%al
add    %dl,%ah
xor    %al,(%esi)
or     %al,(%edi)
xor    (%eax),%eax
add    %bl,%al
xor    %al,(%esi)
or     %al,(%edi)
xor    $0x0,%al
add    %bl,%ah
xor    %al,(%esi)
or     %al,(%edi)
xor    $0x30e00000,%eax
push   %es
or     %al,(%edi)
add    %al,%ss:(%eax)
in     $0x30,%al
push   %es
or     %al,(%edi)
aaa
add    %al,(%eax)
call   f0c99f9 <_end+0x7065a65>
jns    80493cb <_init-0x1c1>
add    %ch,%ah
xor    %al,(%esi)
or     %al,(%edi)
cmp    %al,(%eax)
add    %dh,%al
xor    %al,(%esi)
or     %al,(%edi)
cmp    %eax,(%eax)
add    %dh,%ah
xor    %al,(%esi)
or     %al,(%edi)
cmp    (%eax),%al
add    %bh,%al
xor    %al,(%esi)
or     %al,(%edi)
cmp    (%eax),%eax
add    %bh,%ah
xor    %al,(%esi)
or     %al,(%edi)
cmp    $0x0,%al
add    %al,(%eax)
xor    %eax,(%esi)
or     %al,(%edi)
cmp    $0x31040000,%eax
push   %es
or     %al,(%edi)
add    %al,%ds:(%eax)
or     %dh,(%ecx)
push   %es
or     %al,(%edi)
aas
add    %al,(%eax)
or     $0x31,%al
push   %es
or     %al,(%edi)
inc    %eax
add    %al,(%eax)
adc    %dh,(%ecx)
push   %es
or     %al,(%edi)
inc    %ecx
add    %al,(%eax)
adc    $0x31,%al
push   %es
or     %al,(%edi)
inc    %edx
add    %al,(%eax)
sbb    %dh,(%ecx)
push   %es
or     %al,(%edi)
inc    %ebx
add    %al,(%eax)
sbb    $0x31,%al
push   %es
or     %al,(%edi)
inc    %esp
add    %al,(%eax)
and    %dh,(%ecx)
push   %es
or     %al,(%edi)
inc    %ebp
add    %al,(%eax)
and    $0x31,%al
push   %es
or     %al,(%edi)
inc    %esi
add    %al,(%eax)
sub    %dh,(%ecx)
push   %es
or     %al,(%edi)
inc    %edi
add    %al,(%eax)
sub    $0x31,%al
push   %es
or     %al,(%edi)
dec    %eax
add    %al,(%eax)
xor    %dh,(%ecx)
push   %es
or     %al,(%edi)
dec    %ecx
add    %al,(%eax)
xor    $0x31,%al
push   %es
or     %al,(%edi)
dec    %edx
add    %al,(%eax)
cmp    %dh,(%ecx)
push   %es
or     %al,(%edi)
dec    %ebx
add    %al,(%eax)
cmp    $0x31,%al
push   %es
or     %al,(%edi)
dec    %esp
add    %al,(%eax)
inc    %eax
xor    %eax,(%esi)
or     %al,(%edi)
dec    %ebp
add    %al,(%eax)
inc    %esp
xor    %eax,(%esi)
or     %al,(%edi)
dec    %esi
add    %al,(%eax)
dec    %eax
xor    %eax,(%esi)
or     %al,(%edi)
dec    %edi
add    %al,(%eax)
dec    %esp
xor    %eax,(%esi)
or     %al,(%edi)
push   %eax
add    %al,(%eax)
push   %eax
xor    %eax,(%esi)
or     %al,(%edi)
push   %ecx
add    %al,(%eax)
push   %esp
xor    %eax,(%esi)
or     %al,(%edi)
push   %edx
add    %al,(%eax)
pop    %eax
xor    %eax,(%esi)
or     %al,(%edi)
push   %ebx
add    %al,(%eax)
pop    %esp
xor    %eax,(%esi)
or     %al,(%edi)
push   %esp
add    %al,(%eax)
pusha
xor    %eax,(%esi)
or     %al,(%edi)
push   %ebp
add    %al,(%eax)
xor    %eax,%fs:(%esi)
or     %al,(%edi)
push   %esi
add    %al,(%eax)
push   $0x7080631
push   %edi
add    %al,(%eax)
insb   (%dx),%es:(%edi)
xor    %eax,(%esi)
or     %al,(%edi)
pop    %eax
add    %al,(%eax)
jo     8049507 <_init-0x85>
push   %es
or     %al,(%edi)
pop    %ecx
add    %al,(%eax)
je     804950f <_init-0x7d>
push   %es
or     %al,(%edi)
pop    %ebx
add    %al,(%eax)
js     8049517 <_init-0x75>
push   %es
or     %al,(%edi)
pop    %esp
add    %al,(%eax)
jl     804951f <_init-0x6d>
push   %es
or     %al,(%edi)
pop    %ebp
add    %al,(%eax)
xorb   $0x6,(%ecx)
or     %al,(%edi)
pop    %esi
add    %al,(%eax)
test   %dh,(%ecx)
push   %es
or     %al,(%edi)
pop    %edi
add    %al,(%eax)
mov    %dh,(%ecx)
push   %es
or     %al,(%edi)
pusha
add    %al,(%eax)
mov    %?,(%ecx)
push   %es
or     %al,(%edi)
popa
add    %al,(%eax)
nop
xor    %eax,(%esi)
or     %al,(%edi)
arpl   %ax,(%eax)
add    %dl,0x64070806(%ecx,%esi,1)
add    %al,(%eax)
cwtl
xor    %eax,(%esi)
or     %al,(%edi)
add    %al,%gs:(%eax)
pushf
xor    %eax,(%esi)
or     %al,(%edi)
data16
add    %al,(%eax)
mov    0x7080631,%al
add    %al,(%bx,%si)
movsb  %ds:(%esi),%es:(%edi)
xor    %eax,(%esi)
or     %al,(%edi)
push   $0x31a80000
push   %es
or     %al,(%edi)
imul   $0x631ac00,(%eax),%eax
or     %al,(%edi)
push   $0x0
add    %dh,0x7080631(%eax)
imul   $0x0,(%eax),%eax
mov    $0x31,%ah
push   %es
or     %al,(%edi)
insb   (%dx),%es:(%edi)
add    %al,(%eax)
mov    $0x7080631,%eax
insl   (%dx),%es:(%edi)
add    %al,(%eax)
mov    $0x7080631,%esp
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
(bad)
xor    %eax,(%esi)
or     %al,(%edi)
outsl  %ds:(%esi),(%dx)
add    %al,(%eax)
les    (%ecx),%esi
push   %es
or     %al,(%edi)
jo     8049583 <_init-0x9>
add    %cl,%al
xor    %eax,(%esi)
or     %al,(%edi)
jno    804958b <_init-0x1>
push   %ebx
sub    $0x8,%esp
call   804c070 <__sprintf_chk@plt+0x23c0>
add    $0x19a6b,%ebx
mov    -0x4(%ebx),%eax
test   %eax,%eax
je     80495aa <_init+0x1e>
call   8049960 <__gmon_start__@plt>
add    $0x8,%esp
pop    %ebx
ret
pushl  0x8063004
jmp    *0x8063008
add    %al,(%eax)
jmp    *0x806300c
push   $0x0
jmp    80495b0 <_init+0x24>
jmp    *0x8063010
push   $0x8
jmp    80495b0 <_init+0x24>
jmp    *0x8063014
push   $0x10
jmp    80495b0 <_init+0x24>
jmp    *0x8063018
push   $0x18
jmp    80495b0 <_init+0x24>
jmp    *0x806301c
push   $0x20
jmp    80495b0 <_init+0x24>
jmp    *0x8063020
push   $0x28
jmp    80495b0 <_init+0x24>
jmp    *0x8063024
push   $0x30
jmp    80495b0 <_init+0x24>
jmp    *0x8063028
push   $0x38
jmp    80495b0 <_init+0x24>
jmp    *0x806302c
push   $0x40
jmp    80495b0 <_init+0x24>
jmp    *0x8063030
push   $0x48
jmp    80495b0 <_init+0x24>
jmp    *0x8063034
push   $0x50
jmp    80495b0 <_init+0x24>
jmp    *0x8063038
push   $0x58
jmp    80495b0 <_init+0x24>
jmp    *0x806303c
push   $0x60
jmp    80495b0 <_init+0x24>
jmp    *0x8063040
push   $0x68
jmp    80495b0 <_init+0x24>
jmp    *0x8063044
push   $0x70
jmp    80495b0 <_init+0x24>
jmp    *0x8063048
push   $0x78
jmp    80495b0 <_init+0x24>
jmp    *0x806304c
push   $0x80
jmp    80495b0 <_init+0x24>
jmp    *0x8063050
push   $0x88
jmp    80495b0 <_init+0x24>
jmp    *0x8063054
push   $0x90
jmp    80495b0 <_init+0x24>
jmp    *0x8063058
push   $0x98
jmp    80495b0 <_init+0x24>
jmp    *0x806305c
push   $0xa0
jmp    80495b0 <_init+0x24>
jmp    *0x8063060
push   $0xa8
jmp    80495b0 <_init+0x24>
jmp    *0x8063064
push   $0xb0
jmp    80495b0 <_init+0x24>
jmp    *0x8063068
push   $0xb8
jmp    80495b0 <_init+0x24>
jmp    *0x806306c
push   $0xc0
jmp    80495b0 <_init+0x24>
jmp    *0x8063070
push   $0xc8
jmp    80495b0 <_init+0x24>
jmp    *0x8063074
push   $0xd0
jmp    80495b0 <_init+0x24>
jmp    *0x8063078
push   $0xd8
jmp    80495b0 <_init+0x24>
jmp    *0x806307c
push   $0xe0
jmp    80495b0 <_init+0x24>
jmp    *0x8063080
push   $0xe8
jmp    80495b0 <_init+0x24>
jmp    *0x8063084
push   $0xf0
jmp    80495b0 <_init+0x24>
jmp    *0x8063088
push   $0xf8
jmp    80495b0 <_init+0x24>
jmp    *0x806308c
push   $0x100
jmp    80495b0 <_init+0x24>
jmp    *0x8063090
push   $0x108
jmp    80495b0 <_init+0x24>
jmp    *0x8063094
push   $0x110
jmp    80495b0 <_init+0x24>
jmp    *0x8063098
push   $0x118
jmp    80495b0 <_init+0x24>
jmp    *0x806309c
push   $0x120
jmp    80495b0 <_init+0x24>
jmp    *0x80630a0
push   $0x128
jmp    80495b0 <_init+0x24>
jmp    *0x80630a4
push   $0x130
jmp    80495b0 <_init+0x24>
jmp    *0x80630a8
push   $0x138
jmp    80495b0 <_init+0x24>
jmp    *0x80630ac
push   $0x140
jmp    80495b0 <_init+0x24>
jmp    *0x80630b0
push   $0x148
jmp    80495b0 <_init+0x24>
jmp    *0x80630b4
push   $0x150
jmp    80495b0 <_init+0x24>
jmp    *0x80630b8
push   $0x158
jmp    80495b0 <_init+0x24>
jmp    *0x80630bc
push   $0x160
jmp    80495b0 <_init+0x24>
jmp    *0x80630c0
push   $0x168
jmp    80495b0 <_init+0x24>
jmp    *0x80630c4
push   $0x170
jmp    80495b0 <_init+0x24>
jmp    *0x80630c8
push   $0x178
jmp    80495b0 <_init+0x24>
jmp    *0x80630cc
push   $0x180
jmp    80495b0 <_init+0x24>
jmp    *0x80630d0
push   $0x188
jmp    80495b0 <_init+0x24>
jmp    *0x80630d4
push   $0x190
jmp    80495b0 <_init+0x24>
jmp    *0x80630d8
push   $0x198
jmp    80495b0 <_init+0x24>
jmp    *0x80630dc
push   $0x1a0
jmp    80495b0 <_init+0x24>
jmp    *0x80630e0
push   $0x1a8
jmp    80495b0 <_init+0x24>
jmp    *0x80630e4
push   $0x1b0
jmp    80495b0 <_init+0x24>
jmp    *0x80630e8
push   $0x1b8
jmp    80495b0 <_init+0x24>
jmp    *0x80630ec
push   $0x1c0
jmp    80495b0 <_init+0x24>
jmp    *0x80630f0
push   $0x1c8
jmp    80495b0 <_init+0x24>
jmp    *0x80630f4
push   $0x1d0
jmp    80495b0 <_init+0x24>
jmp    *0x80630f8
push   $0x1d8
jmp    80495b0 <_init+0x24>
jmp    *0x80630fc
push   $0x1e0
jmp    80495b0 <_init+0x24>
jmp    *0x8063100
push   $0x1e8
jmp    80495b0 <_init+0x24>
jmp    *0x8063104
push   $0x1f0
jmp    80495b0 <_init+0x24>
jmp    *0x8063108
push   $0x1f8
jmp    80495b0 <_init+0x24>
jmp    *0x806310c
push   $0x200
jmp    80495b0 <_init+0x24>
jmp    *0x8063110
push   $0x208
jmp    80495b0 <_init+0x24>
jmp    *0x8063114
push   $0x210
jmp    80495b0 <_init+0x24>
jmp    *0x8063118
push   $0x218
jmp    80495b0 <_init+0x24>
jmp    *0x806311c
push   $0x220
jmp    80495b0 <_init+0x24>
jmp    *0x8063120
push   $0x228
jmp    80495b0 <_init+0x24>
jmp    *0x8063124
push   $0x230
jmp    80495b0 <_init+0x24>
jmp    *0x8063128
push   $0x238
jmp    80495b0 <_init+0x24>
jmp    *0x806312c
push   $0x240
jmp    80495b0 <_init+0x24>
jmp    *0x8063130
push   $0x248
jmp    80495b0 <_init+0x24>
jmp    *0x8063134
push   $0x250
jmp    80495b0 <_init+0x24>
jmp    *0x8063138
push   $0x258
jmp    80495b0 <_init+0x24>
jmp    *0x806313c
push   $0x260
jmp    80495b0 <_init+0x24>
jmp    *0x8063140
push   $0x268
jmp    80495b0 <_init+0x24>
jmp    *0x8063144
push   $0x270
jmp    80495b0 <_init+0x24>
jmp    *0x8063148
push   $0x278
jmp    80495b0 <_init+0x24>
jmp    *0x806314c
push   $0x280
jmp    80495b0 <_init+0x24>
jmp    *0x8063150
push   $0x288
jmp    80495b0 <_init+0x24>
jmp    *0x8063154
push   $0x290
jmp    80495b0 <_init+0x24>
jmp    *0x8063158
push   $0x298
jmp    80495b0 <_init+0x24>
jmp    *0x806315c
push   $0x2a0
jmp    80495b0 <_init+0x24>
jmp    *0x8063160
push   $0x2a8
jmp    80495b0 <_init+0x24>
jmp    *0x8063164
push   $0x2b0
jmp    80495b0 <_init+0x24>
jmp    *0x8063168
push   $0x2b8
jmp    80495b0 <_init+0x24>
jmp    *0x806316c
push   $0x2c0
jmp    80495b0 <_init+0x24>
jmp    *0x8063170
push   $0x2c8
jmp    80495b0 <_init+0x24>
jmp    *0x8063174
push   $0x2d0
jmp    80495b0 <_init+0x24>
jmp    *0x8063178
push   $0x2d8
jmp    80495b0 <_init+0x24>
jmp    *0x806317c
push   $0x2e0
jmp    80495b0 <_init+0x24>
jmp    *0x8063180
push   $0x2e8
jmp    80495b0 <_init+0x24>
jmp    *0x8063184
push   $0x2f0
jmp    80495b0 <_init+0x24>
jmp    *0x8063188
push   $0x2f8
jmp    80495b0 <_init+0x24>
jmp    *0x806318c
push   $0x300
jmp    80495b0 <_init+0x24>
jmp    *0x8063190
push   $0x308
jmp    80495b0 <_init+0x24>
jmp    *0x8063194
push   $0x310
jmp    80495b0 <_init+0x24>
jmp    *0x8063198
push   $0x318
jmp    80495b0 <_init+0x24>
jmp    *0x806319c
push   $0x320
jmp    80495b0 <_init+0x24>
jmp    *0x80631a0
push   $0x328
jmp    80495b0 <_init+0x24>
jmp    *0x80631a4
push   $0x330
jmp    80495b0 <_init+0x24>
jmp    *0x80631a8
push   $0x338
jmp    80495b0 <_init+0x24>
jmp    *0x80631ac
push   $0x340
jmp    80495b0 <_init+0x24>
jmp    *0x80631b0
push   $0x348
jmp    80495b0 <_init+0x24>
jmp    *0x80631b4
push   $0x350
jmp    80495b0 <_init+0x24>
jmp    *0x80631b8
push   $0x358
jmp    80495b0 <_init+0x24>
jmp    *0x80631bc
push   $0x360
jmp    80495b0 <_init+0x24>
jmp    *0x80631c0
push   $0x368
jmp    80495b0 <_init+0x24>
jmp    *0x80631c4
push   $0x370
jmp    80495b0 <_init+0x24>
jmp    *0x80631c8
push   $0x378
jmp    80495b0 <_init+0x24>
sub    $0x1c,%esp
movl   $0x805ac48,0xc(%esp)
movl   $0xea6,0x8(%esp)
movl   $0x805b21a,0x4(%esp)
movl   $0x805b77c,(%esp)
call   8049c80 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
and    $0xfffffff0,%esp
sub    $0x380,%esp
mov    0xc(%ebp),%eax
mov    %gs:0x14,%ecx
mov    %ecx,0x37c(%esp)
xor    %ecx,%ecx
mov    %eax,0x4c(%esp)
mov    (%eax),%eax
mov    %eax,(%esp)
call   8055370 <__sprintf_chk@plt+0xb6c0>
movl   $0x805dfe5,0x4(%esp)
movl   $0x6,(%esp)
call   8049b20 <setlocale@plt>
movl   $0x805b300,0x4(%esp)
movl   $0x805b2e4,(%esp)
call   8049bc0 <bindtextdomain@plt>
movl   $0x805b2e4,(%esp)
call   80497f0 <textdomain@plt>
movl   $0x8051c50,(%esp)
movl   $0x2,0x80632f8
00
call   805a410 <__sprintf_chk@plt+0x10760>
mov    0x80632ec,%eax
movl   $0x0,0x8063cd8
00
movb   $0x1,0x8063d88
movl   $0x0,0x8063e20
00
cmp    $0x2,%eax
movl   $0x80000000,0x8063e18
80
movl   $0xffffffff,0x8063e1c
ff
movb   $0x0,0x8063d98
je     804a761 <__sprintf_chk@plt+0xab1>
cmp    $0x3,%eax
je     8049de4 <__sprintf_chk@plt+0x134>
sub    $0x1,%eax
je     8049dbd <__sprintf_chk@plt+0x10d>
call   8049bf0 <abort@plt>
movl   $0x1,(%esp)
call   8049be0 <isatty@plt>
test   %eax,%eax
je     804adcf <__sprintf_chk@plt+0x111f>
movl   $0x2,0x8063de8
00
movb   $0x1,0x8063d98
jmp    8049e02 <__sprintf_chk@plt+0x152>
movl   $0x5,0x4(%esp)
movl   $0x0,(%esp)
movl   $0x0,0x8063de8
00
call   8056170 <__sprintf_chk@plt+0xc4c0>
movl   $0x805b312,(%esp)
movl   $0x0,0x8063de4
00
movl   $0x0,0x8063de0
00
movb   $0x0,0x8063ddf
movb   $0x0,0x8063ddd
movb   $0x0,0x8063ddc
movl   $0x0,0x8063dc0
00
movb   $0x0,0x8063db0
movl   $0x1,0x8063dac
00
movb   $0x0,0x8063daa
movb   $0x0,0x8063da9
movl   $0x0,0x8063da4
00
movl   $0x0,0x8063da0
00
movl   $0x0,0x8063d9c
00
movb   $0x0,0x8063e15
call   8049900 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8049eca <__sprintf_chk@plt+0x21a>
movl   $0x4,0xc(%esp)
movl   $0x805dd40,0x8(%esp)
movl   $0x805dd60,0x4(%esp)
mov    %eax,(%esp)
call   80518b0 <__sprintf_chk@plt+0x7c00>
test   %eax,%eax
js     804ad46 <__sprintf_chk@plt+0x1096>
mov    0x805dd40(,%eax,4),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8056170 <__sprintf_chk@plt+0xc4c0>
movl   $0x805b320,(%esp)
movl   $0x50,0x8063d84
00
call   8049900 <getenv@plt>
mov    %eax,%ebx
test   %ebx,%ebx
lea    0x64(%esp),%eax
mov    %eax,0x2c(%esp)
je     8049ef7 <__sprintf_chk@plt+0x247>
cmpb   $0x0,(%ebx)
jne    804ad8d <__sprintf_chk@plt+0x10dd>
mov    0x2c(%esp),%eax
movl   $0x5413,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049830 <ioctl@plt>
cmp    $0xffffffff,%eax
je     8049f27 <__sprintf_chk@plt+0x277>
movzwl 0x66(%esp),%eax
test   %ax,%ax
je     8049f27 <__sprintf_chk@plt+0x277>
mov    %eax,0x8063d84
movl   $0x805b328,(%esp)
call   8049900 <getenv@plt>
movl   $0x8,0x8063d8c
00
test   %eax,%eax
mov    %eax,%ebx
je     8049f7c <__sprintf_chk@plt+0x2cc>
mov    0x2c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0xc(%esp)
mov    %ebx,(%esp)
call   80589f0 <__sprintf_chk@plt+0xed40>
test   %eax,%eax
jne    804b8b1 <__sprintf_chk@plt+0x1c01>
mov    0x64(%esp),%eax
mov    %eax,0x8063d8c
xor    %esi,%esi
xor    %edi,%edi
xor    %ebx,%ebx
lea    0x0(%esi),%esi
lea    0x60(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x4c(%esp),%eax
movl   $0x805aea0,0xc(%esp)
movl   $0x805d664,0x8(%esp)
movl   $0xffffffff,0x60(%esp)
mov    %eax,0x4(%esp)
mov    0x8(%ebp),%eax
mov    %eax,(%esp)
call   80499b0 <getopt_long@plt>
cmp    $0xffffffff,%eax
je     804a784 <__sprintf_chk@plt+0xad4>
add    $0x83,%eax
cmp    $0x112,%eax
ja     804a755 <__sprintf_chk@plt+0xaa5>
jmp    *0x805a754(,%eax,4)
movb   $0x1,0x8063ddd
movl   $0x0,0x8063de8
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    $0x1,%esi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063db0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0xb0,0x8063dd8
00
movl   $0xb0,0x8063dc8
00
movl   $0x1,0x8063dd0
00
movl   $0x0,0x8063dd4
00
movl   $0x1,0x80632e0
00
movl   $0x0,0x80632e4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x0,0x8063de8
00
movb   $0x0,0x80632e9
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
cmpl   $0x0,0x8063de8
movl   $0x2,0x8063da4
00
movl   $0xffffffff,0x8063de0
ff
je     804b292 <__sprintf_chk@plt+0x15e2>
movb   $0x0,0x8063ddc
mov    $0x1,%edi
movb   $0x0,0x8063dbd
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063da9
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x1,0x8063de4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x5,0x4(%esp)
movl   $0x0,(%esp)
call   8056170 <__sprintf_chk@plt+0xc4c0>
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x2,0x8063da4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063e15
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x1,0x8063de0
00
mov    $0x1,%edi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0xffffffff,0x8063de0
ff
mov    $0x1,%edi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x2c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80633a4,%eax
mov    %eax,(%esp)
call   80589f0 <__sprintf_chk@plt+0xed40>
test   %eax,%eax
jne    804b240 <__sprintf_chk@plt+0x1590>
mov    0x64(%esp),%eax
mov    %eax,0x8063d8c
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x2,0x8063de0
00
mov    $0x1,%edi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063daa
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x3,0x4(%esp)
movl   $0x0,(%esp)
call   8056170 <__sprintf_chk@plt+0xc4c0>
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
call   8056170 <__sprintf_chk@plt+0xc4c0>
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x5,0x8063dac
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80633a4,%edx
movl   $0x8,(%esp)
mov    %edx,0x48(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x48(%esp),%edx
mov    %edx,(%eax)
mov    0x8063da0,%edx
mov    %edx,0x4(%eax)
mov    %eax,0x8063da0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x3,0x8063dac
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x0,0x80632e8
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x3,0x8063dc0
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063dc4
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x2,0x8063de8
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x8,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x8063da0,%edx
movl   $0x805b348,(%eax)
mov    %edx,0x4(%eax)
movl   $0x8,(%esp)
mov    %eax,0x8063da0
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x8063da0,%edx
movl   $0x805b347,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x8063da0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
cmpl   $0x0,0x8063da4
jne    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x1,0x8063da4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
cmpl   $0x0,0x8063de8
je     8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x1,0x8063de8
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x0,(%esp)
call   8051050 <__sprintf_chk@plt+0x73a0>
mov    0x80632ec,%edx
mov    0x80632f0,%ecx
cmp    $0x1,%edx
je     804b236 <__sprintf_chk@plt+0x1586>
cmp    $0x2,%edx
mov    $0x805b2f3,%eax
mov    $0x805b2f2,%edx
cmovne %edx,%eax
mov    %eax,0x4(%esp)
mov    0x80633a0,%eax
movl   $0x0,0x18(%esp)
movl   $0x805b3a1,0x14(%esp)
movl   $0x805b3b1,0x10(%esp)
mov    %ecx,0xc(%esp)
movl   $0x805b2e0,0x8(%esp)
mov    %eax,(%esp)
call   8058640 <__sprintf_chk@plt+0xe990>
movl   $0x0,(%esp)
call   8049970 <exit@plt>
mov    0x80633a4,%ebx
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80632f4,%eax
movl   $0x4,0x10(%esp)
movl   $0x805ae08,0xc(%esp)
movl   $0x805ae1c,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x80633a4,%eax
movl   $0x805b367,(%esp)
mov    %eax,0x4(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
mov    0x805ae08(,%eax,4),%eax
mov    %eax,0x8063de4
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80632f4,%eax
mov    $0x1,%edi
movl   $0x4,0x10(%esp)
movl   $0x805ae34,0xc(%esp)
movl   $0x805ae48,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x80633a4,%eax
movl   $0x805b360,(%esp)
mov    %eax,0x4(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
mov    0x805ae34(,%eax,4),%eax
mov    %eax,0x8063de0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x90,0x8063dd8
00
movl   $0x90,0x8063dc8
00
movl   $0x1,0x8063dd0
00
movl   $0x0,0x8063dd4
00
movl   $0x1,0x80632e0
00
movl   $0x0,0x80632e4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x0,0x8063d98
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80632f4,%eax
movl   $0x4,0x10(%esp)
movl   $0x805dd40,0xc(%esp)
movl   $0x805dd60,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x80633a4,%eax
movl   $0x805b391,(%esp)
mov    %eax,0x4(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
movl   $0x0,(%esp)
mov    0x805dd40(,%eax,4),%eax
mov    %eax,0x4(%esp)
call   8056170 <__sprintf_chk@plt+0xc4c0>
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80632f4,%eax
movl   $0x4,0x10(%esp)
movl   $0x805b1c4,0xc(%esp)
movl   $0x805b1d4,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x80633a4,%eax
movl   $0x805b37f,(%esp)
mov    %eax,0x4(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
mov    0x805b1c4(,%eax,4),%eax
mov    %eax,0x8063dc0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x8,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x80633a4,%edx
mov    %edx,(%eax)
mov    0x8063d9c,%edx
mov    %eax,0x8063d9c
mov    %edx,0x4(%eax)
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063da8
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x0,0x8063de8
00
mov    $0x805b2f7,%ebx
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80632f4,%eax
movl   $0x4,0x10(%esp)
movl   $0x805ae60,0xc(%esp)
movl   $0x805ae80,0x8(%esp)
mov    %eax,0x14(%esp)
mov    0x80633a4,%eax
movl   $0x805b36e,(%esp)
mov    %eax,0x4(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
mov    0x805ae60(,%eax,4),%eax
mov    %eax,0x8063de8
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x2,0x8063dc0
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x4,0x8063dac
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80633a4,%eax
test   %eax,%eax
je     804b09b <__sprintf_chk@plt+0x13eb>
mov    0x80632f4,%edx
movl   $0x4,0x10(%esp)
movl   $0x805ada0,0xc(%esp)
movl   $0x805ade0,0x8(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x4(%esp)
movl   $0x805b377,(%esp)
call   8051b70 <__sprintf_chk@plt+0x7ec0>
mov    0x805ada0(,%eax,4),%eax
cmp    $0x1,%eax
je     804b09b <__sprintf_chk@plt+0x13eb>
cmp    $0x2,%eax
je     804b087 <__sprintf_chk@plt+0x13d7>
movb   $0x0,0x8063dbd
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x80633a4,%eax
movl   $0x8063dd0,0x8(%esp)
movl   $0x8063dd8,0x4(%esp)
mov    %eax,(%esp)
call   80544a0 <__sprintf_chk@plt+0xa7f0>
test   %eax,%eax
jne    804baf0 <__sprintf_chk@plt+0x1e40>
mov    0x8063dd8,%eax
mov    0x8063dd4,%edx
mov    %eax,0x8063dc8
mov    0x8063dd0,%eax
mov    %edx,0x80632e4
mov    %eax,0x80632e0
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063dde
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x3,0x8063de8
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    0x2c(%esp),%eax
movl   $0x0,0x10(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x80633a4,%eax
mov    %eax,(%esp)
call   80589f0 <__sprintf_chk@plt+0xed40>
test   %eax,%eax
jne    804a63d <__sprintf_chk@plt+0x98d>
cmpl   $0x0,0x64(%esp)
jne    804a68a <__sprintf_chk@plt+0x9da>
mov    0x80633a4,%eax
mov    %eax,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805b330,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x48(%esp)
call   8049760 <dcgettext@plt>
mov    0x48(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x2,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
mov    0x64(%esp),%eax
mov    %eax,0x8063d84
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x3,0x8063de0
00
mov    $0x1,%edi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x2,0x8063de4
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x4,0x8063de0
00
mov    $0x1,%edi
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063ddc
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063ddf
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movb   $0x1,0x8063d98
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x1,0x8063dc0
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x0,0x8063de8
00
movb   $0x0,0x80632e8
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x4,0x8063de8
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
movl   $0x5,0x8(%esp)
mov    0x8063344,%ebx
movl   $0x805d690,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
movl   $0x2,(%esp)
call   8051050 <__sprintf_chk@plt+0x73a0>
movl   $0x5,0x4(%esp)
movl   $0x0,(%esp)
movl   $0x2,0x8063de8
00
call   8056170 <__sprintf_chk@plt+0xc4c0>
jmp    8049e02 <__sprintf_chk@plt+0x152>
mov    0x8063dd4,%eax
or     0x8063dd0,%eax
je     804af6c <__sprintf_chk@plt+0x12bc>
mov    0x8063d84,%edx
mov    $0x1,%eax
cmp    $0x2,%edx
ja     804adde <__sprintf_chk@plt+0x112e>
movl   $0x0,(%esp)
mov    %eax,0x8063cd0
call   8056110 <__sprintf_chk@plt+0xc460>
mov    %eax,(%esp)
mov    %eax,0x8063d94
call   8056150 <__sprintf_chk@plt+0xc4a0>
cmp    $0x5,%eax
je     804b96d <__sprintf_chk@plt+0x1cbd>
mov    0x8063dc0,%eax
cmp    $0x1,%eax
jbe    804a811 <__sprintf_chk@plt+0xb61>
lea    0x805b3d1(%eax),%esi
sub    $0x2,%eax
movsbl 0x805b3d3(%eax),%eax
test   %al,%al
je     804a811 <__sprintf_chk@plt+0xb61>
mov    %eax,0x4(%esp)
mov    0x8063d94,%eax
add    $0x1,%esi
movl   $0x1,0x8(%esp)
mov    %eax,(%esp)
call   8056190 <__sprintf_chk@plt+0xc4e0>
movsbl (%esi),%eax
test   %al,%al
jne    804a7ee <__sprintf_chk@plt+0xb3e>
movl   $0x0,(%esp)
call   8056110 <__sprintf_chk@plt+0xc460>
movl   $0x1,0x8(%esp)
movl   $0x3a,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x8063d90
call   8056190 <__sprintf_chk@plt+0xc4e0>
cmpb   $0x0,0x8063dc4
je     804a853 <__sprintf_chk@plt+0xba3>
cmpl   $0x0,0x8063de8
je     804a853 <__sprintf_chk@plt+0xba3>
movb   $0x0,0x8063dc4
mov    0x8063de4,%eax
sub    $0x1,%eax
cmp    $0x1,%eax
jbe    804af46 <__sprintf_chk@plt+0x1296>
cmpl   $0x0,0x8063de8
je     804adee <__sprintf_chk@plt+0x113e>
cmpb   $0x0,0x8063dbd
mov    0x8063380,%ebx
jne    804b0f8 <__sprintf_chk@plt+0x1448>
cmpl   $0x1,0x8063dac
je     804b057 <__sprintf_chk@plt+0x13a7>
cmpb   $0x0,0x8063daa
jne    804afed <__sprintf_chk@plt+0x133d>
mov    0x8063de0,%eax
cmp    $0x4,%eax
je     804ad3a <__sprintf_chk@plt+0x108a>
cmp    $0x2,%eax
je     804ad3a <__sprintf_chk@plt+0x108a>
cmpl   $0x0,0x8063de8
je     804ad3a <__sprintf_chk@plt+0x108a>
cmpb   $0x0,0x8063e15
jne    804ad3a <__sprintf_chk@plt+0x108a>
cmpb   $0x0,0x8063ddc
jne    804ad3a <__sprintf_chk@plt+0x108a>
cmpb   $0x0,0x8063daa
mov    $0x1,%eax
movb   $0x0,0x8063d81
jne    804a90e <__sprintf_chk@plt+0xc5e>
cmpb   $0x0,0x8063dbd
jne    804a90e <__sprintf_chk@plt+0xc5e>
cmpl   $0x0,0x8063dc0
jne    804a90e <__sprintf_chk@plt+0xc5e>
cmpb   $0x0,0x8063da8
jne    804a90e <__sprintf_chk@plt+0xc5e>
xor    %eax,%eax
mov    %al,0x8063d80
andb   $0x1,0x8063d80
cmpb   $0x0,0x8063dc4
je     804a97b <__sprintf_chk@plt+0xccb>
movl   $0x80496b0,0x10(%esp)
movl   $0x8049930,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x8063ca0,(%esp)
call   80497a0 <_obstack_begin@plt>
movl   $0x80496b0,0x10(%esp)
movl   $0x8049930,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x8063c60,(%esp)
call   80497a0 <_obstack_begin@plt>
movl   $0x3200,(%esp)
movl   $0x64,0x8063e34
00
call   8058730 <__sprintf_chk@plt+0xea80>
movl   $0x0,0x8063e30
00
mov    %eax,0x8063e38
call   804c530 <__sprintf_chk@plt+0x2880>
mov    0x8(%ebp),%esi
sub    %ebx,%esi
test   %esi,%esi
jle    804b9b3 <__sprintf_chk@plt+0x1d03>
mov    0x4c(%esp),%edi
add    $0x1,%ebx
xor    %edx,%edx
mov    -0x4(%edi,%ebx,4),%eax
mov    $0x1,%ecx
movl   $0x805dfe5,(%esp)
call   804ee50 <__sprintf_chk@plt+0x51a0>
cmp    %ebx,0x8(%ebp)
jg     804a9b6 <__sprintf_chk@plt+0xd06>
cmpl   $0x0,0x8063e30
jne    804b90d <__sprintf_chk@plt+0x1c5d>
mov    0x8063e20,%eax
sub    $0x1,%esi
mov    %eax,0x40(%esp)
jg     804aa61 <__sprintf_chk@plt+0xdb1>
jmp    804bab7 <__sprintf_chk@plt+0x1e07>
lea    0x0(%esi),%esi
movl   $0x5,0x8(%esp)
movl   $0x805d77c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    %eax,%edx
movzbl 0x2b(%esp),%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049c40 <closedir@plt>
mov    0x40(%esp),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %esi,(%esp)
call   80496b0 <free@plt>
movb   $0x1,0x8063d88
mov    0x8063e20,%eax
mov    %eax,0x40(%esp)
mov    0x40(%esp),%eax
test   %eax,%eax
je     804b787 <__sprintf_chk@plt+0x1ad7>
mov    0x40(%esp),%ecx
mov    0x8063e3c,%edi
mov    0xc(%ecx),%eax
test   %edi,%edi
mov    %eax,0x8063e20
je     804b67d <__sprintf_chk@plt+0x19cd>
mov    (%ecx),%eax
test   %eax,%eax
mov    %eax,0x44(%esp)
je     804b68c <__sprintf_chk@plt+0x19dc>
mov    0x40(%esp),%ecx
movzbl 0x8(%ecx),%eax
mov    0x4(%ecx),%ebx
mov    %al,0x2b(%esp)
call   8049a60 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,0x4c(%esp)
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8049c50 <opendir@plt>
test   %eax,%eax
mov    %eax,0x48(%esp)
je     804b880 <__sprintf_chk@plt+0x1bd0>
mov    0x8063e3c,%esi
test   %esi,%esi
je     804abbf <__sprintf_chk@plt+0xf0f>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049670 <dirfd@plt>
test   %eax,%eax
js     804b51a <__sprintf_chk@plt+0x186a>
mov    0x2c(%esp),%ecx
mov    %eax,0x4(%esp)
movl   $0x3,(%esp)
mov    %ecx,0x8(%esp)
call   8049860 <__fxstat64@plt>
shr    $0x1f,%eax
test   %al,%al
jne    804a9f8 <__sprintf_chk@plt+0xd48>
mov    0xc0(%esp),%edx
mov    0x68(%esp),%ecx
mov    0xbc(%esp),%eax
movl   $0x10,(%esp)
mov    %edx,0x3c(%esp)
mov    0x64(%esp),%edx
mov    %ecx,0x34(%esp)
mov    %eax,0x38(%esp)
mov    %edx,0x30(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x3c(%esp),%edx
mov    0x34(%esp),%ecx
mov    %eax,%esi
mov    0x38(%esp),%eax
mov    %edx,0x4(%esi)
mov    0x30(%esp),%edx
mov    %ecx,0xc(%esi)
mov    %eax,(%esi)
mov    0x8063e3c,%eax
mov    %edx,0x8(%esi)
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8053480 <__sprintf_chk@plt+0x97d0>
test   %eax,%eax
je     804baeb <__sprintf_chk@plt+0x1e3b>
cmp    %eax,%esi
jne    804b582 <__sprintf_chk@plt+0x18d2>
mov    0x8063c2c,%ecx
mov    0x8063c30,%eax
sub    %ecx,%eax
cmp    $0xf,%eax
jle    804b72c <__sprintf_chk@plt+0x1a7c>
lea    0x10(%ecx),%eax
mov    0x68(%esp),%edx
mov    %eax,0x8063c2c
mov    0x64(%esp),%eax
mov    %edx,0xc(%ecx)
mov    %eax,0x8(%ecx)
mov    0xbc(%esp),%eax
mov    0xc0(%esp),%edx
mov    %eax,(%ecx)
mov    %edx,0x4(%ecx)
cmpb   $0x0,0x8063daa
jne    804abd5 <__sprintf_chk@plt+0xf25>
cmpb   $0x0,0x8063d88
je     804ac91 <__sprintf_chk@plt+0xfe1>
cmpb   $0x0,0x8063200
jne    804abff <__sprintf_chk@plt+0xf4f>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804bd64 <__sprintf_chk@plt+0x20b4>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
addl   $0x1,0x8063ccc
cmpb   $0x0,0x8063dc4
movb   $0x0,0x8063200
jne    804b5eb <__sprintf_chk@plt+0x193b>
mov    0x8063d90,%ecx
test   %ebx,%ebx
mov    %ebx,%edx
mov    0x80633a0,%eax
cmove  0x44(%esp),%edx
movl   $0x0,(%esp)
call   804ca50 <__sprintf_chk@plt+0x2da0>
add    %eax,0x8063ccc
cmpb   $0x0,0x8063dc4
je     804ac65 <__sprintf_chk@plt+0xfb5>
mov    0x8063c6c,%eax
lea    0x4(%eax),%edx
cmp    %edx,0x8063c70
jb     804b769 <__sprintf_chk@plt+0x1ab9>
mov    0x8063ccc,%edx
mov    %edx,(%eax)
addl   $0x4,0x8063c6c
mov    0x80633a0,%eax
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805b41f,(%esp)
mov    %eax,0xc(%esp)
call   8049ab0 <fwrite_unlocked@plt>
addl   $0x2,0x8063ccc
call   804c530 <__sprintf_chk@plt+0x2880>
movzbl 0x2b(%esp),%eax
movl   $0x0,0x38(%esp)
movl   $0x0,0x3c(%esp)
mov    %eax,0x30(%esp)
nop
mov    0x4c(%esp),%eax
movl   $0x0,(%eax)
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049b90 <readdir64@plt>
test   %eax,%eax
mov    %eax,%esi
je     804b310 <__sprintf_chk@plt+0x1660>
lea    0x13(%eax),%ebx
mov    0x8063da4,%eax
cmp    $0x2,%eax
je     804b2d0 <__sprintf_chk@plt+0x1620>
cmpb   $0x2e,0x13(%esi)
je     804b2b0 <__sprintf_chk@plt+0x1600>
test   %eax,%eax
jne    804b2d0 <__sprintf_chk@plt+0x1620>
mov    0x8063d9c,%edi
test   %edi,%edi
jne    804ad13 <__sprintf_chk@plt+0x1063>
jmp    804b2d0 <__sprintf_chk@plt+0x1620>
lea    0x0(%esi),%esi
mov    0x4(%edi),%edi
test   %edi,%edi
je     804b2d0 <__sprintf_chk@plt+0x1620>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049810 <fnmatch@plt>
test   %eax,%eax
jne    804ad08 <__sprintf_chk@plt+0x1058>
lea    0x0(%esi),%esi
call   804dc60 <__sprintf_chk@plt+0x3fb0>
jmp    804acb0 <__sprintf_chk@plt+0x1000>
movb   $0x1,0x8063d81
jmp    804a90c <__sprintf_chk@plt+0xc5c>
mov    %ebx,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805d5a4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049760 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
jmp    8049eca <__sprintf_chk@plt+0x21a>
movl   $0x0,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   80589f0 <__sprintf_chk@plt+0xed40>
test   %eax,%eax
jne    804b0b1 <__sprintf_chk@plt+0x1401>
mov    0x64(%esp),%eax
test   %eax,%eax
je     804b0b1 <__sprintf_chk@plt+0x1401>
mov    %eax,0x8063d84
jmp    8049ef7 <__sprintf_chk@plt+0x247>
movl   $0x1,0x8063de8
00
jmp    8049e02 <__sprintf_chk@plt+0x152>
mov    %edx,%eax
mov    $0x3,%ecx
xor    %edx,%edx
div    %ecx
jmp    804a7a9 <__sprintf_chk@plt+0xaf9>
test   %ebx,%ebx
jne    804ae0f <__sprintf_chk@plt+0x115f>
jmp    804bd47 <__sprintf_chk@plt+0x2097>
nop
movl   $0x2,(%esp)
call   8052670 <__sprintf_chk@plt+0x89c0>
test   %al,%al
je     804a871 <__sprintf_chk@plt+0xbc1>
add    $0x6,%ebx
mov    %ebx,%esi
mov    $0x805ac60,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
je     804adf8 <__sprintf_chk@plt+0x1148>
cmpb   $0x2b,(%ebx)
je     804bb1a <__sprintf_chk@plt+0x1e6a>
movl   $0x4,0xc(%esp)
movl   $0x805b1e8,0x8(%esp)
movl   $0x805b1f8,0x4(%esp)
mov    %ebx,(%esp)
call   80518b0 <__sprintf_chk@plt+0x7c00>
test   %eax,%eax
js     804bcd0 <__sprintf_chk@plt+0x2020>
cmp    $0x1,%eax
je     804bcb7 <__sprintf_chk@plt+0x2007>
jle    804bbbb <__sprintf_chk@plt+0x1f0b>
cmp    $0x2,%eax
je     804bd79 <__sprintf_chk@plt+0x20c9>
cmp    $0x3,%eax
nop
lea    0x0(%esi,%eiz,1),%esi
jne    804ae86 <__sprintf_chk@plt+0x11d6>
movl   $0x2,(%esp)
call   8052670 <__sprintf_chk@plt+0x89c0>
test   %al,%al
jne    804bd92 <__sprintf_chk@plt+0x20e2>
mov    0x8063208,%eax
movl   $0x805b24a,0x4(%esp)
mov    %eax,(%esp)
call   80495f0 <strstr@plt>
test   %eax,%eax
je     804bbd7 <__sprintf_chk@plt+0x1f27>
movl   $0x5,0x806347c
00
mov    0x806347c,%esi
mov    $0x8063480,%ebx
mov    $0x2000e,%edi
movl   $0x0,0x806347c
00
mov    %edi,(%esp)
mov    %esi,0x64(%esp)
call   8049b10 <nl_langinfo@plt>
mov    0x2c(%esp),%ecx
movl   $0x0,0x14(%esp)
movl   $0x0,0x10(%esp)
movl   $0xa1,0x8(%esp)
mov    %ecx,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8054ad0 <__sprintf_chk@plt+0xae20>
cmp    $0xa0,%eax
ja     804ba74 <__sprintf_chk@plt+0x1dc4>
mov    0x64(%esp),%eax
cmp    %eax,0x806347c
cmovae 0x806347c,%eax
add    $0x1,%edi
add    $0xa1,%ebx
cmp    $0x2001a,%edi
mov    %eax,0x806347c
jne    804aec7 <__sprintf_chk@plt+0x1217>
cmp    %esi,%eax
jb     804aead <__sprintf_chk@plt+0x11fd>
test   %eax,%eax
jne    804a871 <__sprintf_chk@plt+0xbc1>
jmp    804ba7e <__sprintf_chk@plt+0x1dce>
mov    %edi,%eax
test   %al,%al
jne    804a864 <__sprintf_chk@plt+0xbb4>
cmpl   $0x0,0x8063de8
je     804adee <__sprintf_chk@plt+0x113e>
movl   $0x4,0x8063de0
00
jmp    804a864 <__sprintf_chk@plt+0xbb4>
movl   $0x805b3c5,(%esp)
call   8049900 <getenv@plt>
movl   $0x8063dd0,0x8(%esp)
movl   $0x8063dd8,0x4(%esp)
mov    %eax,(%esp)
mov    %eax,0x48(%esp)
call   80544a0 <__sprintf_chk@plt+0xa7f0>
mov    0x48(%esp),%edx
test   %edx,%edx
je     804bc9e <__sprintf_chk@plt+0x1fee>
mov    0x8063dd8,%eax
mov    0x8063dd4,%edx
mov    %eax,0x8063dc8
mov    0x8063dd0,%eax
mov    %edx,0x80632e4
mov    %eax,0x80632e0
mov    %esi,%eax
test   %al,%al
je     804a795 <__sprintf_chk@plt+0xae5>
movl   $0x0,0x8063dd8
00
movl   $0x400,0x8063dd0
00
movl   $0x0,0x8063dd4
00
jmp    804a795 <__sprintf_chk@plt+0xae5>
movl   $0x804c1d0,0x10(%esp)
movl   $0x804c170,0xc(%esp)
movl   $0x804c140,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x1e,(%esp)
call   8052e70 <__sprintf_chk@plt+0x91c0>
test   %eax,%eax
mov    %eax,0x8063e3c
je     804baeb <__sprintf_chk@plt+0x1e3b>
movl   $0x80496b0,0x10(%esp)
movl   $0x8049930,0xc(%esp)
movl   $0x0,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x8063c20,(%esp)
call   80497a0 <_obstack_begin@plt>
jmp    804a89e <__sprintf_chk@plt+0xbee>
cmpb   $0x0,0x8063da9
mov    $0x2,%eax
jne    804b07d <__sprintf_chk@plt+0x13cd>
cmpl   $0x3,0x8063dc0
je     804b07d <__sprintf_chk@plt+0x13cd>
cmpl   $0x1,0x8063de8
sbb    %eax,%eax
and    $0xfffffffe,%eax
add    $0x4,%eax
mov    %eax,0x8063dac
jmp    804a891 <__sprintf_chk@plt+0xbe1>
movl   $0x1,(%esp)
call   8049be0 <isatty@plt>
test   %eax,%eax
je     804a594 <__sprintf_chk@plt+0x8e4>
movb   $0x1,0x8063dbd
movl   $0x0,0x8063d8c
00
jmp    8049f88 <__sprintf_chk@plt+0x2d8>
mov    %ebx,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805d5e8,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049760 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
jmp    8049ef7 <__sprintf_chk@plt+0x247>
movl   $0x805b463,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
mov    %eax,0x60(%esp)
je     804b115 <__sprintf_chk@plt+0x1465>
cmpb   $0x0,(%eax)
jne    804bc69 <__sprintf_chk@plt+0x1fb9>
cmpb   $0x0,0x8063dbd
je     804a884 <__sprintf_chk@plt+0xbd4>
mov    $0xd,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804b15e <__sprintf_chk@plt+0x14ae>
mov    $0xe,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804b147 <__sprintf_chk@plt+0x1497>
cmpb   $0x0,0x8063e24
jne    804b15e <__sprintf_chk@plt+0x14ae>
mov    $0xc,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804b165 <__sprintf_chk@plt+0x14b5>
cmpl   $0x0,0x8063de8
jne    804b165 <__sprintf_chk@plt+0x14b5>
movb   $0x1,0x8063db1
movl   $0x1,(%esp)
call   8049a70 <tcgetpgrp@plt>
test   %eax,%eax
js     804a884 <__sprintf_chk@plt+0xbd4>
movl   $0x8063d00,(%esp)
xor    %esi,%esi
call   8049af0 <sigemptyset@plt>
mov    0x805ac80(,%esi,4),%edi
mov    0x2c(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8049bb0 <sigaction@plt>
cmpl   $0x1,0x64(%esp)
je     804b1bd <__sprintf_chk@plt+0x150d>
mov    %edi,0x4(%esp)
movl   $0x8063d00,(%esp)
call   8049a30 <sigaddset@plt>
add    $0x1,%esi
cmp    $0xc,%esi
jne    804b187 <__sprintf_chk@plt+0x14d7>
lea    0x68(%esp),%edi
mov    $0x8063d00,%esi
mov    $0x20,%ecx
movl   $0x10000000,0xe8(%esp)
10
rep movsl %ds:(%esi),%es:(%edi)
xor    %esi,%esi
mov    0x805ac80(,%esi,4),%edi
movl   $0x8063d00,(%esp)
mov    %edi,0x4(%esp)
call   80497b0 <sigismember@plt>
test   %eax,%eax
je     804b229 <__sprintf_chk@plt+0x1579>
cmp    $0x14,%edi
mov    $0x804cfc0,%eax
mov    $0x804c1b0,%ecx
cmovne %ecx,%eax
mov    %eax,0x64(%esp)
mov    0x2c(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049bb0 <sigaction@plt>
add    $0x1,%esi
cmp    $0xc,%esi
jne    804b1e2 <__sprintf_chk@plt+0x1532>
jmp    804a884 <__sprintf_chk@plt+0xbd4>
mov    $0x805b2eb,%eax
jmp    804a2cb <__sprintf_chk@plt+0x61b>
mov    0x80633a4,%eax
mov    %eax,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805b34b,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x48(%esp)
call   8049760 <dcgettext@plt>
mov    0x48(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x2,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
jmp    804a13a <__sprintf_chk@plt+0x48a>
movl   $0x1,(%esp)
call   8049be0 <isatty@plt>
cmp    $0x1,%eax
sbb    %eax,%eax
add    $0x2,%eax
mov    %eax,0x8063de8
jmp    804a076 <__sprintf_chk@plt+0x3c6>
test   %eax,%eax
je     804ad30 <__sprintf_chk@plt+0x1080>
xor    %eax,%eax
cmpb   $0x2e,0x14(%esi)
sete   %al
cmpb   $0x0,0x14(%esi,%eax,1)
je     804ad30 <__sprintf_chk@plt+0x1080>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063da0,%edi
test   %edi,%edi
jne    804b2eb <__sprintf_chk@plt+0x163b>
jmp    804b4a0 <__sprintf_chk@plt+0x17f0>
nop
mov    0x4(%edi),%edi
test   %edi,%edi
je     804b4a0 <__sprintf_chk@plt+0x17f0>
movl   $0x4,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049810 <fnmatch@plt>
test   %eax,%eax
jne    804b2e0 <__sprintf_chk@plt+0x1630>
jmp    804ad30 <__sprintf_chk@plt+0x1080>
lea    0x0(%esi),%esi
mov    0x4c(%esp),%esi
mov    (%esi),%ecx
test   %ecx,%ecx
je     804b34e <__sprintf_chk@plt+0x169e>
movl   $0x5,0x8(%esp)
movl   $0x805b495,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    %eax,%edx
mov    0x30(%esp),%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
cmpl   $0x4b,(%esi)
je     804ad30 <__sprintf_chk@plt+0x1080>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049c40 <closedir@plt>
test   %eax,%eax
jne    804b551 <__sprintf_chk@plt+0x18a1>
call   804c5e0 <__sprintf_chk@plt+0x2930>
cmpb   $0x0,0x8063daa
jne    804b53e <__sprintf_chk@plt+0x188e>
mov    0x8063de8,%edx
test   %edx,%edx
je     804b38b <__sprintf_chk@plt+0x16db>
cmpb   $0x0,0x8063ddc
je     804b483 <__sprintf_chk@plt+0x17d3>
cmpb   $0x0,0x8063dc4
jne    804b64c <__sprintf_chk@plt+0x199c>
movl   $0x5,0x8(%esp)
movl   $0x805b4bf,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,%ebx
mov    0x80633a0,%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
add    %eax,0x8063ccc
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804bc54 <__sprintf_chk@plt+0x1fa4>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0x20,(%edx)
mov    0x8063dd0,%eax
mov    0x8063dd4,%edx
movl   $0x200,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dd8,%eax
mov    %edx,0x1c(%esp)
mov    0x3c(%esp),%edx
addl   $0x1,0x8063ccc
mov    %eax,0xc(%esp)
lea    0xf0(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
mov    %eax,%ebx
mov    0x80633a0,%eax
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
add    %eax,0x8063ccc
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804bc3f <__sprintf_chk@plt+0x1f8f>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
addl   $0x1,0x8063ccc
mov    0x8063e30,%eax
test   %eax,%eax
je     804aa30 <__sprintf_chk@plt+0xd80>
call   804ffb0 <__sprintf_chk@plt+0x6300>
jmp    804aa30 <__sprintf_chk@plt+0xd80>
lea    0x0(%esi),%esi
movzbl 0x12(%esi),%eax
xor    %edx,%edx
sub    $0x1,%eax
cmp    $0xd,%al
ja     804b4b7 <__sprintf_chk@plt+0x1807>
movzbl %al,%eax
mov    0x805abc0(,%eax,4),%edx
mov    0x44(%esp),%eax
xor    %ecx,%ecx
mov    %eax,(%esp)
mov    %ebx,%eax
call   804ee50 <__sprintf_chk@plt+0x51a0>
add    %eax,0x38(%esp)
adc    %edx,0x3c(%esp)
cmpl   $0x1,0x8063de8
jne    804ad30 <__sprintf_chk@plt+0x1080>
cmpl   $0xffffffff,0x8063de0
jne    804ad30 <__sprintf_chk@plt+0x1080>
cmpb   $0x0,0x8063ddc
jne    804ad30 <__sprintf_chk@plt+0x1080>
cmpb   $0x0,0x8063daa
jne    804ad30 <__sprintf_chk@plt+0x1080>
call   804c5e0 <__sprintf_chk@plt+0x2930>
call   804ffb0 <__sprintf_chk@plt+0x6300>
lea    0x0(%esi),%esi
call   804c530 <__sprintf_chk@plt+0x2880>
jmp    804ad30 <__sprintf_chk@plt+0x1080>
mov    0x2c(%esp),%eax
movl   $0x3,(%esp)
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x4(%esp)
call   8049c00 <__xstat64@plt>
shr    $0x1f,%eax
jmp    804ab08 <__sprintf_chk@plt+0xe58>
movzbl 0x2b(%esp),%edx
mov    0x44(%esp),%eax
call   804c840 <__sprintf_chk@plt+0x2b90>
jmp    804b374 <__sprintf_chk@plt+0x16c4>
movl   $0x5,0x8(%esp)
movl   $0x805b4aa,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    %eax,%edx
movzbl 0x2b(%esp),%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
jmp    804b362 <__sprintf_chk@plt+0x16b2>
mov    %esi,(%esp)
call   80496b0 <free@plt>
mov    0x44(%esp),%eax
mov    %eax,(%esp)
call   8056650 <__sprintf_chk@plt+0xc9a0>
movl   $0x5,0x8(%esp)
movl   $0x805d7a4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049760 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
mov    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049c40 <closedir@plt>
movl   $0x2,0x8063cd8
00
jmp    804aa30 <__sprintf_chk@plt+0xd80>
mov    0x80633a0,%eax
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805b255,(%esp)
mov    %eax,0xc(%esp)
call   8049ab0 <fwrite_unlocked@plt>
addl   $0x2,0x8063ccc
cmpb   $0x0,0x8063dc4
je     804ac13 <__sprintf_chk@plt+0xf63>
mov    0x8063c6c,%eax
lea    0x4(%eax),%edx
cmp    %edx,0x8063c70
jb     804b74b <__sprintf_chk@plt+0x1a9b>
mov    0x8063ccc,%edx
mov    %edx,(%eax)
addl   $0x4,0x8063c6c
jmp    804ac13 <__sprintf_chk@plt+0xf63>
mov    0x80633a0,%eax
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805b255,(%esp)
mov    %eax,0xc(%esp)
call   8049ab0 <fwrite_unlocked@plt>
addl   $0x2,0x8063ccc
jmp    804b398 <__sprintf_chk@plt+0x16e8>
mov    0x40(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x44(%esp)
jmp    804aa95 <__sprintf_chk@plt+0xde5>
mov    0x8063c2c,%ecx
mov    %ecx,%eax
sub    0x8063c28,%eax
cmp    $0xf,%eax
jbe    804bc1b <__sprintf_chk@plt+0x1f6b>
mov    0x8063c30,%eax
sub    %ecx,%eax
cmp    $0xfffffff0,%eax
jge    804b6c9 <__sprintf_chk@plt+0x1a19>
movl   $0xfffffff0,0x4(%esp)
movl   $0x8063c20,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0x8063c2c,%ecx
lea    -0x10(%ecx),%esi
mov    0x2c(%esp),%edi
mov    $0x4,%ecx
lea    0x64(%esp),%eax
mov    %esi,0x8063c2c
rep movsl %ds:(%esi),%es:(%edi)
mov    %eax,0x2c(%esp)
mov    %eax,0x4(%esp)
mov    0x8063e3c,%eax
mov    %eax,(%esp)
call   80534c0 <__sprintf_chk@plt+0x9810>
test   %eax,%eax
je     804b98f <__sprintf_chk@plt+0x1cdf>
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x40(%esp),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x4(%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %esi,(%esp)
call   80496b0 <free@plt>
jmp    804aa58 <__sprintf_chk@plt+0xda8>
movl   $0x10,0x4(%esp)
movl   $0x8063c20,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0x8063c2c,%ecx
jmp    804ab96 <__sprintf_chk@plt+0xee6>
movl   $0x4,0x4(%esp)
movl   $0x8063c60,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0x8063c6c,%eax
jmp    804b638 <__sprintf_chk@plt+0x1988>
movl   $0x4,0x4(%esp)
movl   $0x8063c60,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0x8063c6c,%eax
jmp    804ac56 <__sprintf_chk@plt+0xfa6>
cmpb   $0x0,0x8063dbd
je     804b831 <__sprintf_chk@plt+0x1b81>
cmpb   $0x0,0x8063dbc
je     804b7be <__sprintf_chk@plt+0x1b0e>
cmpl   $0x2,0x8063220
je     804b9e0 <__sprintf_chk@plt+0x1d30>
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    0x80633a0,%eax
xor    %ebx,%ebx
mov    %eax,(%esp)
call   80497d0 <fflush_unlocked@plt>
jmp    804b7d8 <__sprintf_chk@plt+0x1b28>
nop
add    $0x1,%ebx
cmp    $0xc,%ebx
je     804b805 <__sprintf_chk@plt+0x1b55>
mov    0x805ac80(,%ebx,4),%esi
movl   $0x8063d00,(%esp)
mov    %esi,0x4(%esp)
call   80497b0 <sigismember@plt>
test   %eax,%eax
je     804b7d0 <__sprintf_chk@plt+0x1b20>
movl   $0x0,0x4(%esp)
mov    %esi,(%esp)
call   8049720 <signal@plt>
jmp    804b7d0 <__sprintf_chk@plt+0x1b20>
mov    0x8063cdc,%ebx
test   %ebx,%ebx
je     804b820 <__sprintf_chk@plt+0x1b70>
movl   $0x13,(%esp)
call   80495e0 <raise@plt>
sub    $0x1,%ebx
jne    804b80f <__sprintf_chk@plt+0x1b5f>
mov    0x8063ce0,%eax
test   %eax,%eax
je     804b831 <__sprintf_chk@plt+0x1b81>
mov    %eax,(%esp)
call   80495e0 <raise@plt>
cmpb   $0x0,0x8063dc4
jne    804ba25 <__sprintf_chk@plt+0x1d75>
mov    0x8063e3c,%ebx
test   %ebx,%ebx
je     804b900 <__sprintf_chk@plt+0x1c50>
mov    %ebx,(%esp)
call   8052a50 <__sprintf_chk@plt+0x8da0>
test   %eax,%eax
je     804b8f8 <__sprintf_chk@plt+0x1c48>
movl   $0x805ac67,0xc(%esp)
movl   $0x5dc,0x8(%esp)
movl   $0x805b21a,0x4(%esp)
movl   $0x805d7f8,(%esp)
call   8049c80 <__assert_fail@plt>
movl   $0x5,0x8(%esp)
movl   $0x805b47c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    %eax,%edx
movzbl 0x2b(%esp),%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
jmp    804aa30 <__sprintf_chk@plt+0xd80>
mov    %ebx,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805d624,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%ebx
call   8049760 <dcgettext@plt>
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
jmp    8049f7c <__sprintf_chk@plt+0x2cc>
mov    %ebx,(%esp)
call   8053040 <__sprintf_chk@plt+0x9390>
mov    0x8063cd8,%eax
mov    %eax,(%esp)
call   8049970 <exit@plt>
call   804c5e0 <__sprintf_chk@plt+0x2930>
cmpb   $0x0,0x8063da9
je     804bbaa <__sprintf_chk@plt+0x1efa>
cmpl   $0x0,0x8063e30
je     804a9e2 <__sprintf_chk@plt+0xd32>
call   804ffb0 <__sprintf_chk@plt+0x6300>
cmpl   $0x0,0x8063e20
je     804bc0e <__sprintf_chk@plt+0x1f5e>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804bbf9 <__sprintf_chk@plt+0x1f49>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
mov    0x8063e20,%eax
addl   $0x1,0x8063ccc
mov    %eax,0x40(%esp)
jmp    804aa61 <__sprintf_chk@plt+0xdb1>
mov    0x8063d94,%eax
movl   $0x1,0x8(%esp)
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8056190 <__sprintf_chk@plt+0xc4e0>
jmp    804a7d0 <__sprintf_chk@plt+0xb20>
movl   $0x805ac67,0xc(%esp)
movl   $0x59d,0x8(%esp)
movl   $0x805b21a,0x4(%esp)
movl   $0x805b476,(%esp)
call   8049c80 <__assert_fail@plt>
cmpb   $0x0,0x8063da9
je     804bad5 <__sprintf_chk@plt+0x1e25>
movl   $0x805dfe5,(%esp)
mov    $0x1,%ecx
mov    $0x3,%edx
mov    $0x805b474,%eax
call   804ee50 <__sprintf_chk@plt+0x51a0>
jmp    804a9d5 <__sprintf_chk@plt+0xd25>
mov    0x8063224,%eax
movl   $0x2,0x8(%esp)
movl   $0x805b4c5,0x4(%esp)
mov    %eax,(%esp)
call   8049730 <memcmp@plt>
test   %eax,%eax
jne    804b7aa <__sprintf_chk@plt+0x1afa>
cmpl   $0x1,0x8063228
jne    804b7aa <__sprintf_chk@plt+0x1afa>
mov    0x806322c,%eax
cmpb   $0x6d,(%eax)
jne    804b7aa <__sprintf_chk@plt+0x1afa>
jmp    804b7be <__sprintf_chk@plt+0x1b0e>
mov    $0x8063ca0,%edx
mov    $0x805b4c8,%eax
call   804cdf0 <__sprintf_chk@plt+0x3140>
mov    $0x8063c60,%edx
mov    $0x805b4d2,%eax
call   804cdf0 <__sprintf_chk@plt+0x3140>
mov    0x8063d94,%eax
mov    %eax,(%esp)
call   8056150 <__sprintf_chk@plt+0xc4a0>
movl   $0x805d7d0,0x4(%esp)
movl   $0x1,(%esp)
mov    0x805dd60(,%eax,4),%eax
mov    %eax,0x8(%esp)
call   8049ac0 <__printf_chk@plt>
jmp    804b83e <__sprintf_chk@plt+0x1b8e>
movl   $0x0,0x806347c
00
movl   $0x5,0x8(%esp)
movl   $0x805d6c8,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
jmp    804a871 <__sprintf_chk@plt+0xbc1>
test   %eax,%eax
je     804aa61 <__sprintf_chk@plt+0xdb1>
cmpl   $0x0,0xc(%eax)
jne    804aa61 <__sprintf_chk@plt+0xdb1>
movb   $0x0,0x8063d88
jmp    804aa61 <__sprintf_chk@plt+0xdb1>
mov    $0x1,%ecx
xor    %edx,%edx
mov    $0x805b474,%eax
call   804c490 <__sprintf_chk@plt+0x27e0>
jmp    804a9d5 <__sprintf_chk@plt+0xd25>
call   80589a0 <__sprintf_chk@plt+0xecf0>
mov    0x80633a4,%edx
movl   $0x805aea0,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
mov    %edx,0x10(%esp)
mov    0x60(%esp),%edx
mov    %edx,0x4(%esp)
call   8058e10 <__sprintf_chk@plt+0xf160>
add    $0x1,%ebx
movl   $0xa,0x4(%esp)
mov    %ebx,(%esp)
call   80499f0 <strchr@plt>
test   %eax,%eax
mov    %eax,%edi
je     804bba6 <__sprintf_chk@plt+0x1ef6>
lea    0x1(%eax),%esi
movl   $0xa,0x4(%esp)
mov    %esi,(%esp)
call   80499f0 <strchr@plt>
test   %eax,%eax
je     804bb92 <__sprintf_chk@plt+0x1ee2>
mov    %ebx,(%esp)
call   8056880 <__sprintf_chk@plt+0xcbd0>
movl   $0x5,0x8(%esp)
movl   $0x805b3e4,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x48(%esp)
call   8049760 <dcgettext@plt>
mov    0x48(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x2,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
movb   $0x0,(%edi)
mov    %ebx,0x8063208
mov    %esi,0x806320c
jmp    804ae86 <__sprintf_chk@plt+0x11d6>
mov    %ebx,%esi
jmp    804bb95 <__sprintf_chk@plt+0x1ee5>
mov    $0x1,%edx
xor    %eax,%eax
call   804c840 <__sprintf_chk@plt+0x2b90>
jmp    804b91f <__sprintf_chk@plt+0x1c6f>
test   %eax,%eax
jne    804ae86 <__sprintf_chk@plt+0x11d6>
movl   $0x805b432,0x806320c
08
movl   $0x805b432,0x8063208
08
mov    0x806320c,%eax
movl   $0x805b24a,0x4(%esp)
mov    %eax,(%esp)
call   80495f0 <strstr@plt>
test   %eax,%eax
jne    804aea3 <__sprintf_chk@plt+0x11f3>
jmp    804a871 <__sprintf_chk@plt+0xbc1>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804b958 <__sprintf_chk@plt+0x1ca8>
movl   $0x0,0x40(%esp)
jmp    804aa61 <__sprintf_chk@plt+0xdb1>
movl   $0x805abf8,0xc(%esp)
movl   $0x3d5,0x8(%esp)
movl   $0x805b21a,0x4(%esp)
movl   $0x805d6ec,(%esp)
call   8049c80 <__assert_fail@plt>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804b47c <__sprintf_chk@plt+0x17cc>
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804b3ef <__sprintf_chk@plt+0x173f>
mov    %eax,(%esp)
xor    %esi,%esi
movw   $0x3f3f,0x5d(%esp)
lea    0x5d(%esp),%edi
movb   $0x0,0x5f(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
xor    %edx,%edx
mov    %eax,0x8063db4
mov    %eax,0x64(%esp)
cmp    $0x5,%edx
ja     8049db8 <__sprintf_chk@plt+0x108>
jmp    *0x805aba0(,%edx,4)
movl   $0x805b3c8,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
jne    804afa0 <__sprintf_chk@plt+0x12f0>
jmp    804afc0 <__sprintf_chk@plt+0x1310>
movl   $0x805b44a,0x806320c
08
movl   $0x805b44a,0x8063208
08
jmp    804bbd7 <__sprintf_chk@plt+0x1f27>
mov    %eax,0x8(%esp)
mov    %ebx,0x4(%esp)
movl   $0x805b401,(%esp)
call   80519b0 <__sprintf_chk@plt+0x7d00>
mov    0x8063344,%ebx
movl   $0x5,0x8(%esp)
movl   $0x805b40c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    $0x805b1f8,%ebx
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    (%ebx),%eax
test   %eax,%eax
je     804a727 <__sprintf_chk@plt+0xa77>
mov    %eax,0xc(%esp)
mov    0x8063344,%eax
add    $0x4,%ebx
movl   $0x805b422,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    804bd17 <__sprintf_chk@plt+0x2067>
movl   $0x805b3d9,(%esp)
call   8049900 <getenv@plt>
mov    %eax,%ebx
test   %eax,%eax
mov    $0x805b30b,%eax
cmove  %eax,%ebx
jmp    804ae0f <__sprintf_chk@plt+0x115f>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804abf8 <__sprintf_chk@plt+0xf48>
movl   $0x805b459,0x8063208
08
movl   $0x805b44d,0x806320c
08
jmp    804ae86 <__sprintf_chk@plt+0x11d6>
mov    0x8063208,%eax
movl   $0x2,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049760 <dcgettext@plt>
movl   $0x2,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8063208
mov    0x806320c,%eax
mov    %eax,0x4(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,0x806320c
jmp    804ae86 <__sprintf_chk@plt+0x11d6>
movl   $0x5,0x8(%esp)
movl   $0x805d824,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
mov    0x8063db4,%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x8063db8,%eax
test   %eax,%eax
je     804bf24 <__sprintf_chk@plt+0x2274>
mov    0x10(%eax),%esi
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %esi,%eax
jmp    804be21 <__sprintf_chk@plt+0x2171>
mov    0x60(%esp),%eax
lea    0x1(%eax),%edx
mov    %edx,0x60(%esp)
mov    $0x5,%edx
cmpb   $0x3d,(%eax)
jne    804bc97 <__sprintf_chk@plt+0x1fe7>
mov    0x64(%esp),%eax
xor    %ecx,%ecx
lea    0x60(%esp),%edx
mov    %eax,0xc(%esi)
lea    0x8(%esi),%eax
mov    %eax,(%esp)
mov    0x2c(%esp),%eax
call   804c1e0 <__sprintf_chk@plt+0x2530>
cmp    $0x1,%al
sbb    %edx,%edx
and    $0x5,%edx
jmp    804bc8e <__sprintf_chk@plt+0x1fde>
mov    0x60(%esp),%eax
mov    $0x5,%edx
cmpb   $0x0,(%eax)
je     804bc97 <__sprintf_chk@plt+0x1fe7>
lea    0x1(%eax),%edx
mov    %edx,0x60(%esp)
movzbl (%eax),%eax
mov    $0x2,%edx
mov    %al,0x5e(%esp)
jmp    804bc97 <__sprintf_chk@plt+0x1fe7>
mov    0x60(%esp),%eax
movzbl (%eax),%ecx
cmp    $0x2a,%cl
je     804bf75 <__sprintf_chk@plt+0x22c5>
cmp    $0x3a,%cl
je     804bf69 <__sprintf_chk@plt+0x22b9>
test   %cl,%cl
je     804bf2b <__sprintf_chk@plt+0x227b>
lea    0x1(%eax),%edx
mov    %edx,0x60(%esp)
movzbl (%eax),%eax
mov    $0x1,%edx
mov    %al,0x5d(%esp)
jmp    804bc97 <__sprintf_chk@plt+0x1fe7>
mov    0x60(%esp),%eax
lea    0x1(%eax),%edx
mov    %edx,0x60(%esp)
mov    $0x5,%edx
cmpb   $0x3d,(%eax)
jne    804bc97 <__sprintf_chk@plt+0x1fe7>
xor    %dl,%dl
jmp    804bf14 <__sprintf_chk@plt+0x2264>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
mov    %edx,0x48(%esp)
call   8049600 <strcmp@plt>
mov    0x48(%esp),%edx
test   %eax,%eax
je     804bfc1 <__sprintf_chk@plt+0x2311>
add    $0x1,%edx
mov    0x805b160(,%edx,4),%eax
test   %eax,%eax
jne    804bef5 <__sprintf_chk@plt+0x2245>
jmp    804bfef <__sprintf_chk@plt+0x233f>
movb   $0x0,0x8063dbd
cmpl   $0x6,0x8063258
jne    804b115 <__sprintf_chk@plt+0x1465>
mov    0x806325c,%eax
movl   $0x6,0x8(%esp)
movl   $0x805b46d,0x4(%esp)
mov    %eax,(%esp)
call   8049bd0 <strncmp@plt>
test   %eax,%eax
jne    804b115 <__sprintf_chk@plt+0x1465>
movb   $0x1,0x8063e24
jmp    804b115 <__sprintf_chk@plt+0x1465>
add    $0x1,%eax
mov    %eax,0x60(%esp)
jmp    804bc8e <__sprintf_chk@plt+0x1fde>
movl   $0x14,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
lea    0x60(%esp),%edx
mov    $0x1,%ecx
addl   $0x1,0x60(%esp)
mov    %eax,%esi
mov    0x8063db8,%eax
mov    %esi,0x8063db8
mov    %eax,0x10(%esi)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x2c(%esp),%eax
mov    %esi,(%esp)
call   804c1e0 <__sprintf_chk@plt+0x2530>
cmp    $0x1,%al
sbb    %edx,%edx
and    $0x2,%edx
add    $0x3,%edx
jmp    804bc8e <__sprintf_chk@plt+0x1fde>
mov    0x64(%esp),%eax
xor    %ecx,%ecx
mov    %eax,0x8063224(,%edx,8)
lea    0x8063220(,%edx,8),%eax
mov    %eax,(%esp)
mov    0x2c(%esp),%eax
lea    0x60(%esp),%edx
call   804c1e0 <__sprintf_chk@plt+0x2530>
xor    %edx,%edx
test   %al,%al
jne    804bc97 <__sprintf_chk@plt+0x1fe7>
mov    %edi,(%esp)
call   8056470 <__sprintf_chk@plt+0xc7c0>
movl   $0x5,0x8(%esp)
movl   $0x805b4df,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0x48(%esp)
call   8049760 <dcgettext@plt>
mov    0x48(%esp),%edx
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
mov    $0x5,%edx
jmp    804bc97 <__sprintf_chk@plt+0x1fe7>
xor    %ebp,%ebp
pop    %esi
mov    %esp,%ecx
and    $0xfffffff0,%esp
push   %eax
push   %esp
push   %edx
push   $0x805a400
push   $0x805a390
push   %ecx
push   %esi
push   $0x8049cf0
call   8049a20 <__libc_start_main@plt>
hlt
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
mov    (%esp),%ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
mov    $0x8063343,%eax
sub    $0x8063340,%eax
cmp    $0x6,%eax
ja     804c090 <__sprintf_chk@plt+0x23e0>
ret
mov    $0x0,%eax
test   %eax,%eax
je     804c08f <__sprintf_chk@plt+0x23df>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8063340,(%esp)
call   *%eax
leave
ret
lea    0x0(%esi),%esi
mov    $0x8063340,%eax
sub    $0x8063340,%eax
sar    $0x2,%eax
mov    %eax,%edx
shr    $0x1f,%edx
add    %edx,%eax
sar    %eax
jne    804c0c9 <__sprintf_chk@plt+0x2419>
ret
mov    $0x0,%edx
test   %edx,%edx
je     804c0c8 <__sprintf_chk@plt+0x2418>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
mov    %eax,0x4(%esp)
movl   $0x8063340,(%esp)
call   *%edx
leave
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
cmpb   $0x0,0x80633a8
jne    804c10c <__sprintf_chk@plt+0x245c>
push   %ebp
mov    %esp,%ebp
sub    $0x8,%esp
call   804c080 <__sprintf_chk@plt+0x23d0>
movb   $0x1,0x80633a8
leave
repz ret
xchg   %ax,%ax
mov    0x8062f00,%eax
test   %eax,%eax
je     804c138 <__sprintf_chk@plt+0x2488>
mov    $0x0,%eax
test   %eax,%eax
je     804c138 <__sprintf_chk@plt+0x2488>
push   %ebp
mov    %esp,%ebp
sub    $0x18,%esp
movl   $0x8062f00,(%esp)
call   *%eax
leave
jmp    804c0b0 <__sprintf_chk@plt+0x2400>
nop
jmp    804c0b0 <__sprintf_chk@plt+0x2400>
xchg   %ax,%ax
nop
sub    $0x1c,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x4(%eax),%edx
mov    (%eax),%eax
mov    %ecx,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
add    $0x1c,%esp
ret
lea    0x0(%esi,%eiz,1),%esi
push   %esi
xor    %eax,%eax
push   %ebx
mov    0xc(%esp),%esi
mov    0x10(%esp),%ebx
mov    (%esi),%edx
mov    0x4(%esi),%ecx
xor    0x4(%ebx),%ecx
xor    (%ebx),%edx
or     %edx,%ecx
je     804c190 <__sprintf_chk@plt+0x24e0>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
mov    0x8(%esi),%edx
mov    0xc(%esi),%eax
xor    0xc(%ebx),%eax
xor    0x8(%ebx),%edx
pop    %ebx
pop    %esi
or     %eax,%edx
sete   %al
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x8063ce0,%eax
test   %eax,%eax
jne    804c1c2 <__sprintf_chk@plt+0x2512>
mov    0x4(%esp),%eax
mov    %eax,0x8063ce0
repz ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
jmp    80496b0 <free@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %edx,%ebp
push   %edi
xor    %edi,%edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0xc,%esp
mov    (%eax),%ebx
mov    %cl,0xb(%esp)
mov    (%edx),%ecx
mov    %eax,0x4(%esp)
xor    %eax,%eax
cmp    $0x2,%edi
je     804c2e0 <__sprintf_chk@plt+0x2630>
jbe    804c2c0 <__sprintf_chk@plt+0x2610>
cmp    $0x3,%edi
je     804c2a0 <__sprintf_chk@plt+0x25f0>
cmp    $0x4,%edi
jne    804c263 <__sprintf_chk@plt+0x25b3>
movzbl (%ecx),%edx
lea    -0x40(%edx),%edi
mov    %dl,(%esp)
mov    %edi,%edx
cmp    $0x3e,%dl
jbe    804c250 <__sprintf_chk@plt+0x25a0>
cmpb   $0x3f,(%esp)
je     804c430 <__sprintf_chk@plt+0x2780>
mov    %ebp,%edx
xor    %eax,%eax
mov    0x4(%esp),%edi
mov    %ebx,(%edi)
mov    %ecx,(%edx)
mov    0x20(%esp),%edx
mov    %esi,(%edx)
add    $0xc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movzbl (%esp),%edx
add    $0x1,%ecx
add    $0x1,%esi
add    $0x1,%ebx
and    $0x1f,%edx
mov    %dl,-0x1(%ebx)
movzbl (%ecx),%edx
cmp    $0x3d,%dl
je     804c307 <__sprintf_chk@plt+0x2657>
jle    804c330 <__sprintf_chk@plt+0x2680>
cmp    $0x5c,%dl
je     804c428 <__sprintf_chk@plt+0x2778>
cmp    $0x5e,%dl
jne    804c350 <__sprintf_chk@plt+0x26a0>
add    $0x1,%ecx
jmp    804c218 <__sprintf_chk@plt+0x2568>
lea    0x0(%esi,%eiz,1),%esi
shl    $0x4,%eax
add    $0x1,%ecx
lea    -0x57(%edi,%eax,1),%eax
lea    0x0(%esi),%esi
movzbl (%ecx),%edi
lea    -0x30(%edi),%edx
cmp    $0x36,%dl
ja     804c380 <__sprintf_chk@plt+0x26d0>
movzbl %dl,%edx
jmp    *0x805a480(,%edx,4)
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edi
jne    804c263 <__sprintf_chk@plt+0x25b3>
movzbl (%ecx),%edx
cmp    $0x78,%dl
ja     804c420 <__sprintf_chk@plt+0x2770>
movzbl %dl,%edi
jmp    *0x805a55c(,%edi,4)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
movzbl (%ecx),%edx
lea    -0x30(%edx),%edi
mov    %edi,%ebx
cmp    $0x7,%bl
jbe    804c320 <__sprintf_chk@plt+0x2670>
mov    (%esp),%ebx
add    $0x1,%esi
mov    %al,(%ebx)
movzbl (%ecx),%edx
add    $0x1,%ebx
cmp    $0x3d,%dl
jne    804c26f <__sprintf_chk@plt+0x25bf>
cmpb   $0x0,0xb(%esp)
je     804c350 <__sprintf_chk@plt+0x26a0>
mov    %ebp,%edx
mov    $0x1,%eax
jmp    804c236 <__sprintf_chk@plt+0x2586>
lea    0x0(%esi),%esi
add    $0x1,%ecx
lea    -0x30(%edx,%eax,8),%eax
jmp    804c2e3 <__sprintf_chk@plt+0x2633>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
je     804c339 <__sprintf_chk@plt+0x2689>
cmp    $0x3a,%dl
jne    804c350 <__sprintf_chk@plt+0x26a0>
mov    %ebp,%edx
mov    $0x5,%edi
cmp    $0x6,%edi
setne  %al
jmp    804c236 <__sprintf_chk@plt+0x2586>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %dl,(%ebx)
add    $0x1,%ecx
add    $0x1,%esi
add    $0x1,%ebx
jmp    804c263 <__sprintf_chk@plt+0x25b3>
shl    $0x4,%eax
add    $0x1,%ecx
lea    -0x37(%edi,%eax,1),%eax
jmp    804c2a0 <__sprintf_chk@plt+0x25f0>
nop
shl    $0x4,%eax
add    $0x1,%ecx
lea    -0x30(%edi,%eax,1),%eax
jmp    804c2a0 <__sprintf_chk@plt+0x25f0>
nop
mov    %al,(%ebx)
add    $0x1,%esi
add    $0x1,%ebx
jmp    804c263 <__sprintf_chk@plt+0x25b3>
lea    0x0(%esi),%esi
mov    $0x3,%edi
xor    %eax,%eax
nop
add    $0x1,%ecx
cmp    $0x4,%edi
jbe    804c1fb <__sprintf_chk@plt+0x254b>
mov    %ebp,%edx
jmp    804c340 <__sprintf_chk@plt+0x2690>
mov    $0x1b,%eax
lea    0x0(%esi),%esi
mov    %al,(%ebx)
add    $0x1,%esi
add    $0x1,%ebx
xor    %edi,%edi
jmp    804c398 <__sprintf_chk@plt+0x26e8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x8,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0x7,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0x7f,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0xb,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0xd,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0x9,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0xc,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0xa,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    $0x6,%edi
jmp    804c398 <__sprintf_chk@plt+0x26e8>
nop
lea    -0x30(%edx),%eax
mov    $0x2,%edi
jmp    804c398 <__sprintf_chk@plt+0x26e8>
lea    0x0(%esi),%esi
mov    $0x20,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
nop
mov    %edx,%eax
jmp    804c3b0 <__sprintf_chk@plt+0x2700>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ecx
jmp    804c2c5 <__sprintf_chk@plt+0x2615>
movb   $0x7f,(%ebx)
add    $0x1,%esi
add    $0x1,%ebx
jmp    804c263 <__sprintf_chk@plt+0x25b3>
xchg   %ax,%ax
mov    0x8063220(,%eax,8),%edx
push   %edi
push   %esi
mov    0x8063224(,%eax,8),%esi
xor    %eax,%eax
test   %edx,%edx
je     804c465 <__sprintf_chk@plt+0x27b5>
cmp    $0x1,%edx
je     804c480 <__sprintf_chk@plt+0x27d0>
cmp    $0x2,%edx
mov    $0x1,%eax
je     804c468 <__sprintf_chk@plt+0x27b8>
pop    %esi
pop    %edi
ret
mov    $0x805b217,%edi
mov    $0x2,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
pop    %esi
pop    %edi
setne  %al
ret
lea    0x0(%esi),%esi
cmpb   $0x30,(%esi)
pop    %esi
pop    %edi
setne  %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %edx,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
movl   $0x10,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %eax,%ebx
xor    %eax,%eax
test   %ebp,%ebp
je     804c4b9 <__sprintf_chk@plt+0x2809>
mov    %ebp,(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    %eax,0x4(%ebx)
xor    %eax,%eax
test   %esi,%esi
je     804c4ca <__sprintf_chk@plt+0x281a>
mov    %esi,(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    %eax,(%ebx)
mov    %edi,%eax
mov    %al,0x8(%ebx)
mov    0x8063e20,%eax
mov    %ebx,0x8063e20
mov    %eax,0xc(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    (%eax),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x4(%ebx),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x70(%ebx),%eax
cmp    $0x80632ea,%eax
je     804c51d <__sprintf_chk@plt+0x286d>
mov    %eax,(%esp)
call   8049b70 <freecon@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %ebx,%ebx
sub    $0x8,%esp
mov    0x8063e30,%eax
test   %eax,%eax
je     804c558 <__sprintf_chk@plt+0x28a8>
nop
mov    0x8063e2c,%eax
mov    (%eax,%ebx,4),%eax
add    $0x1,%ebx
call   804c4f0 <__sprintf_chk@plt+0x2840>
cmp    %ebx,0x8063e30
ja     804c540 <__sprintf_chk@plt+0x2890>
movl   $0x0,0x8063e30
00
movb   $0x0,0x8063e14
movl   $0x0,0x8063e10
00
movl   $0x0,0x8063e0c
00
movl   $0x0,0x8063e08
00
movl   $0x0,0x8063e00
00
movl   $0x0,0x8063dfc
00
movl   $0x0,0x8063df8
00
movl   $0x0,0x8063e04
00
movl   $0x0,0x8063df4
00
movl   $0x0,0x8063df0
00
movl   $0x0,0x8063dec
00
add    $0x8,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x8063e30,%ebx
mov    %ebx,%eax
mov    %ebx,%esi
shr    %eax
add    %ebx,%eax
cmp    0x8063e28,%eax
ja     804c6e0 <__sprintf_chk@plt+0x2a30>
test   %esi,%esi
je     804c624 <__sprintf_chk@plt+0x2974>
mov    0x8063e2c,%eax
mov    0x8063e38,%edx
lea    (%eax,%esi,4),%ecx
lea    0x0(%esi),%esi
mov    %edx,(%eax)
add    $0x4,%eax
sub    $0xffffff80,%edx
cmp    %ecx,%eax
jne    804c618 <__sprintf_chk@plt+0x2968>
cmpl   $0xffffffff,0x8063de0
je     804c6d6 <__sprintf_chk@plt+0x2a26>
movl   $0x80633e0,(%esp)
call   80496a0 <_setjmp@plt>
test   %eax,%eax
je     804c688 <__sprintf_chk@plt+0x29d8>
mov    0x8063de0,%edi
cmp    $0x3,%edi
je     804c71b <__sprintf_chk@plt+0x2a6b>
mov    0x8063e30,%esi
mov    0x8063e2c,%ebx
test   %esi,%esi
je     804c67c <__sprintf_chk@plt+0x29cc>
mov    0x8063e38,%edx
mov    %ebx,%eax
lea    (%ebx,%esi,4),%ecx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%eax)
add    $0x4,%eax
sub    $0xffffff80,%edx
cmp    %ecx,%eax
jne    804c670 <__sprintf_chk@plt+0x29c0>
mov    %edi,%ecx
mov    $0x1,%eax
jmp    804c69a <__sprintf_chk@plt+0x29ea>
lea    0x0(%esi),%esi
mov    0x8063de0,%ecx
mov    0x8063e30,%esi
mov    0x8063e2c,%ebx
xor    %edx,%edx
cmp    $0x4,%ecx
cmove  0x8063de4,%edx
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
add    %ecx,%edx
lea    (%eax,%edx,2),%edx
movzbl 0x8063ddf,%eax
lea    (%eax,%edx,2),%edx
movzbl 0x8063da8,%eax
lea    (%eax,%edx,2),%eax
mov    0x805acc0(,%eax,4),%eax
mov    %eax,0x8(%esp)
call   8055350 <__sprintf_chk@plt+0xb6a0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x8063e2c,%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
cmp    $0x15555555,%ebx
ja     804c73f <__sprintf_chk@plt+0x2a8f>
lea    (%ebx,%ebx,2),%eax
shl    $0x2,%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x8063e30,%esi
mov    %eax,0x8063e2c
lea    (%esi,%esi,2),%eax
mov    %eax,0x8063e28
jmp    804c600 <__sprintf_chk@plt+0x2950>
movl   $0x805ac55,0xc(%esp)
movl   $0xddb,0x8(%esp)
movl   $0x805b21a,0x4(%esp)
movl   $0x805b223,(%esp)
call   8049c80 <__assert_fail@plt>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x8(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x4(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    0x8(%esp),%eax
mov    (%edx),%edx
mov    %edx,0x8(%esp)
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x4,%esp
call   8049a60 <__errno_location@plt>
mov    0x10(%esp),%ebx
mov    0x14(%esp),%esi
movl   $0x0,(%eax)
mov    %esi,0x14(%esp)
mov    %ebx,0x10(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    80498f0 <strcoll@plt>
lea    0x0(%esi),%esi
mov    0x8(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x4(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    0x8(%esp),%eax
mov    (%edx),%edx
mov    %edx,0x8(%esp)
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    0x8(%esp),%eax
mov    (%edx),%edx
mov    %edx,0x8(%esp)
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8052230 <__sprintf_chk@plt+0x8580>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x4(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x4(%esp)
jmp    8052230 <__sprintf_chk@plt+0x8580>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x2c,%esp
test   %eax,%eax
mov    %eax,0x18(%esp)
je     804c866 <__sprintf_chk@plt+0x2bb6>
mov    0x8063e3c,%edx
test   %edx,%edx
je     804c866 <__sprintf_chk@plt+0x2bb6>
mov    %eax,%edx
xor    %ecx,%ecx
xor    %eax,%eax
call   804c490 <__sprintf_chk@plt+0x27e0>
mov    0x8063e30,%ebx
mov    %esi,%eax
movzbl %al,%eax
mov    %eax,0x1c(%esp)
lea    -0x4(,%ebx,4),%edi
jmp    804c8a6 <__sprintf_chk@plt+0x2bf6>
xchg   %ax,%ax
cmpb   $0x2f,0x0(%ebp)
jne    804c8f8 <__sprintf_chk@plt+0x2c48>
mov    0x4(%esi),%edx
mov    %ebp,%eax
mov    0x1c(%esp),%ecx
call   804c490 <__sprintf_chk@plt+0x27e0>
cmpl   $0x9,0x68(%esi)
je     804c930 <__sprintf_chk@plt+0x2c80>
xchg   %ax,%ax
sub    $0x1,%ebx
sub    $0x4,%edi
test   %ebx,%ebx
je     804c940 <__sprintf_chk@plt+0x2c90>
mov    0x8063e2c,%eax
mov    (%eax,%edi,1),%esi
mov    0x68(%esi),%eax
cmp    $0x9,%eax
je     804c8c3 <__sprintf_chk@plt+0x2c13>
cmp    $0x3,%eax
jne    804c8a0 <__sprintf_chk@plt+0x2bf0>
mov    0x18(%esp),%eax
mov    (%esi),%ebp
test   %eax,%eax
je     804c886 <__sprintf_chk@plt+0x2bd6>
mov    %ebp,(%esp)
call   8051de0 <__sprintf_chk@plt+0x8130>
cmpb   $0x2e,(%eax)
jne    804c880 <__sprintf_chk@plt+0x2bd0>
xor    %edx,%edx
cmpb   $0x2e,0x1(%eax)
sete   %dl
movzbl 0x1(%eax,%edx,1),%eax
cmp    $0x2f,%al
je     804c8a0 <__sprintf_chk@plt+0x2bf0>
test   %al,%al
je     804c8a0 <__sprintf_chk@plt+0x2bf0>
jmp    804c880 <__sprintf_chk@plt+0x2bd0>
lea    0x0(%esi),%esi
mov    0x18(%esp),%eax
mov    %ebp,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8052070 <__sprintf_chk@plt+0x83c0>
mov    0x4(%esi),%edx
mov    0x1c(%esp),%ecx
mov    %eax,%ebp
call   804c490 <__sprintf_chk@plt+0x27e0>
mov    %ebp,(%esp)
call   80496b0 <free@plt>
cmpl   $0x9,0x68(%esi)
jne    804c8a0 <__sprintf_chk@plt+0x2bf0>
mov    %esi,%eax
call   804c4f0 <__sprintf_chk@plt+0x2840>
jmp    804c8a0 <__sprintf_chk@plt+0x2bf0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063e30,%esi
test   %esi,%esi
je     804c97f <__sprintf_chk@plt+0x2ccf>
mov    0x8063e2c,%ebx
xor    %edx,%edx
xor    %eax,%eax
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx,%eax,4),%ecx
cmpl   $0x9,0x68(%ecx)
mov    %ecx,(%ebx,%edx,4)
setne  %cl
add    $0x1,%eax
movzbl %cl,%ecx
add    %ecx,%edx
cmp    %esi,%eax
jne    804c958 <__sprintf_chk@plt+0x2ca8>
mov    %edx,0x8063e30
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xor    %edx,%edx
jmp    804c971 <__sprintf_chk@plt+0x2cc1>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x1c,%esp
cmp    %edx,%eax
jb     804c9e1 <__sprintf_chk@plt+0x2d31>
jmp    804ca09 <__sprintf_chk@plt+0x2d59>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
lea    0x1(%ebx),%esi
mov    %eax,%ebp
mov    %esi,%eax
div    %ecx
cmp    %eax,%ebp
jbe    804ca18 <__sprintf_chk@plt+0x2d68>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804ca2e <__sprintf_chk@plt+0x2d7e>
lea    0x1(%edx),%esi
mov    %esi,0x14(%eax)
movb   $0x9,(%edx)
mov    %ebx,%eax
xor    %edx,%edx
div    %ecx
add    %ecx,%ebx
sub    %edx,%ebx
cmp    %ebx,%edi
jbe    804ca09 <__sprintf_chk@plt+0x2d59>
mov    0x8063d8c,%ecx
test   %ecx,%ecx
jne    804c9a8 <__sprintf_chk@plt+0x2cf8>
add    $0x1,%ebx
mov    0x80633a0,%ecx
mov    0x14(%ecx),%esi
cmp    0x18(%ecx),%esi
jae    804ca1c <__sprintf_chk@plt+0x2d6c>
lea    0x1(%esi),%eax
cmp    %ebx,%edi
mov    %eax,0x14(%ecx)
movb   $0x20,(%esi)
ja     804c9e1 <__sprintf_chk@plt+0x2d31>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%ebx
jmp    804c9ee <__sprintf_chk@plt+0x2d3e>
movl   $0x20,0x4(%esp)
mov    %ecx,(%esp)
call   8049b40 <__overflow@plt>
jmp    804c9dd <__sprintf_chk@plt+0x2d2d>
movl   $0x9,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
mov    0x8063d8c,%ecx
jmp    804c9d3 <__sprintf_chk@plt+0x2d23>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
mov    %esp,%ebp
push   %edi
mov    %ecx,%edi
push   %esi
mov    %edx,%esi
push   %ebx
sub    $0x204c,%esp
mov    %eax,-0x2040(%ebp)
mov    0x8(%ebp),%eax
mov    %edx,0x8(%esp)
lea    -0x201c(%ebp),%edx
mov    %edx,(%esp)
mov    %ecx,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
movl   $0x2000,0x4(%esp)
mov    %eax,-0x203c(%ebp)
mov    %edx,-0x202c(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
call   8056230 <__sprintf_chk@plt+0xc580>
mov    -0x202c(%ebp),%edx
mov    %edx,-0x2038(%ebp)
cmp    $0x1fff,%eax
mov    %eax,%ebx
ja     804cd48 <__sprintf_chk@plt+0x3098>
cmpb   $0x0,0x8063d98
jne    804cb95 <__sprintf_chk@plt+0x2ee5>
mov    -0x203c(%ebp),%eax
test   %eax,%eax
je     804cb00 <__sprintf_chk@plt+0x2e50>
call   8049870 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804cb54 <__sprintf_chk@plt+0x2ea4>
mov    -0x2038(%ebp),%eax
movl   $0x0,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8054f30 <__sprintf_chk@plt+0xb280>
mov    %eax,-0x2030(%ebp)
mov    -0x2040(%ebp),%eax
test   %eax,%eax
je     804cb28 <__sprintf_chk@plt+0x2e78>
mov    %eax,0xc(%esp)
mov    -0x2038(%ebp),%eax
mov    %ebx,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049ab0 <fwrite_unlocked@plt>
mov    -0x203c(%ebp),%eax
test   %eax,%eax
je     804cb3a <__sprintf_chk@plt+0x2e8a>
mov    -0x2030(%ebp),%esi
mov    %esi,(%eax)
mov    -0x1c(%ebp),%esi
xor    %gs:0x14,%esi
mov    %ebx,%eax
jne    804cde0 <__sprintf_chk@plt+0x3130>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    -0x2038(%ebp),%edi
lea    (%edi,%ebx,1),%esi
cmp    %esi,%edi
jae    804cdc0 <__sprintf_chk@plt+0x3110>
call   8049c90 <__ctype_b_loc@plt>
mov    %edi,%edx
xor    %edi,%edi
mov    (%eax),%eax
movzbl (%edx),%ecx
movzwl (%eax,%ecx,2),%ecx
and    $0x4000,%cx
cmp    $0x1,%cx
sbb    $0xffffffff,%edi
add    $0x1,%edx
cmp    %esi,%edx
jne    804cb70 <__sprintf_chk@plt+0x2ec0>
mov    %edi,-0x2030(%ebp)
jmp    804cb00 <__sprintf_chk@plt+0x2e50>
call   8049870 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    804cd8b <__sprintf_chk@plt+0x30db>
mov    %ebx,%eax
mov    -0x2038(%ebp),%ebx
add    %ebx,%eax
cmp    %eax,%ebx
mov    %eax,-0x2034(%ebp)
jae    804cdcf <__sprintf_chk@plt+0x311f>
mov    %ebx,%esi
movl   $0x0,-0x2030(%ebp)
00
nop
movzbl (%ebx),%eax
cmp    $0x3f,%al
jg     804ccd0 <__sprintf_chk@plt+0x3020>
cmp    $0x25,%al
jge    804cce8 <__sprintf_chk@plt+0x3038>
lea    -0x20(%eax),%edx
cmp    $0x3,%dl
jbe    804cce8 <__sprintf_chk@plt+0x3038>
movl   $0x0,-0x2024(%ebp)
00
movl   $0x0,-0x2020(%ebp)
00
nop
lea    0x0(%esi,%eiz,1),%esi
lea    -0x2024(%ebp),%eax
mov    %eax,0xc(%esp)
mov    -0x2034(%ebp),%eax
mov    %ebx,0x4(%esp)
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    -0x2028(%ebp),%eax
mov    %eax,(%esp)
call   80498c0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,%edi
je     804cd05 <__sprintf_chk@plt+0x3055>
cmp    $0xfffffffe,%eax
je     804cd23 <__sprintf_chk@plt+0x3073>
test   %eax,%eax
mov    $0x1,%eax
cmove  %eax,%edi
mov    -0x2028(%ebp),%eax
mov    %eax,(%esp)
call   8049680 <wcwidth@plt>
test   %eax,%eax
js     804ccb8 <__sprintf_chk@plt+0x3008>
lea    (%ebx,%edi,1),%ecx
mov    %esi,%edx
mov    %eax,-0x202c(%ebp)
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
movzbl -0x1(%ebx),%eax
add    $0x1,%edx
cmp    %ecx,%ebx
mov    %al,-0x1(%edx)
jne    804cc68 <__sprintf_chk@plt+0x2fb8>
mov    -0x202c(%ebp),%eax
add    %edi,%esi
add    %eax,-0x2030(%ebp)
lea    -0x2024(%ebp),%eax
mov    %eax,(%esp)
call   80496d0 <mbsinit@plt>
test   %eax,%eax
je     804cc00 <__sprintf_chk@plt+0x2f50>
cmp    -0x2034(%ebp),%ebx
jb     804cbc8 <__sprintf_chk@plt+0x2f18>
sub    -0x2038(%ebp),%esi
mov    %esi,%ebx
jmp    804cb00 <__sprintf_chk@plt+0x2e50>
xchg   %ax,%ax
movb   $0x3f,(%esi)
add    %edi,%ebx
add    $0x1,%esi
addl   $0x1,-0x2030(%ebp)
jmp    804cc87 <__sprintf_chk@plt+0x2fd7>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x41,%al
jl     804cbe7 <__sprintf_chk@plt+0x2f37>
cmp    $0x5f,%al
jle    804cce8 <__sprintf_chk@plt+0x3038>
lea    -0x61(%eax),%edx
cmp    $0x1d,%dl
ja     804cbe7 <__sprintf_chk@plt+0x2f37>
mov    %al,(%esi)
add    $0x1,%ebx
add    $0x1,%esi
addl   $0x1,-0x2030(%ebp)
cmp    -0x2034(%ebp),%ebx
jb     804cbc8 <__sprintf_chk@plt+0x2f18>
jmp    804cca9 <__sprintf_chk@plt+0x2ff9>
movb   $0x3f,(%esi)
add    $0x1,%ebx
add    $0x1,%esi
addl   $0x1,-0x2030(%ebp)
cmp    -0x2034(%ebp),%ebx
jb     804cbc8 <__sprintf_chk@plt+0x2f18>
jmp    804cca9 <__sprintf_chk@plt+0x2ff9>
mov    -0x2034(%ebp),%ebx
add    $0x1,%esi
movb   $0x3f,-0x1(%esi)
addl   $0x1,-0x2030(%ebp)
cmp    -0x2034(%ebp),%ebx
jb     804cbc8 <__sprintf_chk@plt+0x2f18>
jmp    804cca9 <__sprintf_chk@plt+0x2ff9>
lea    0x1f(%ebx),%edx
and    $0xfffffff0,%edx
sub    %edx,%esp
lea    0x23(%esp),%ecx
mov    %ecx,-0x2038(%ebp)
lea    0x1(%eax),%eax
andl   $0xfffffff0,-0x2038(%ebp)
mov    %eax,0x4(%esp)
mov    -0x2038(%ebp),%eax
mov    %edi,0x10(%esp)
movl   $0xffffffff,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
call   8056230 <__sprintf_chk@plt+0xc580>
jmp    804cabf <__sprintf_chk@plt+0x2e0f>
mov    -0x2038(%ebp),%esi
lea    (%esi,%ebx,1),%edi
cmp    %edi,%esi
jae    804cdb5 <__sprintf_chk@plt+0x3105>
call   8049c90 <__ctype_b_loc@plt>
mov    %esi,%edx
movzbl (%edx),%esi
mov    (%eax),%ecx
testb  $0x40,0x1(%ecx,%esi,2)
jne    804cdae <__sprintf_chk@plt+0x30fe>
movb   $0x3f,(%edx)
add    $0x1,%edx
cmp    %edi,%edx
jne    804cd9f <__sprintf_chk@plt+0x30ef>
mov    %ebx,-0x2030(%ebp)
jmp    804cb00 <__sprintf_chk@plt+0x2e50>
movl   $0x0,-0x2030(%ebp)
00
jmp    804cb00 <__sprintf_chk@plt+0x2e50>
xor    %ebx,%ebx
movl   $0x0,-0x2030(%ebp)
00
jmp    804cb00 <__sprintf_chk@plt+0x2e50>
call   8049790 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0xc(%edx),%ecx
mov    0x8(%edx),%edi
mov    %ecx,%esi
sub    %edi,%esi
shr    $0x2,%esi
test   %esi,%esi
je     804ce88 <__sprintf_chk@plt+0x31d8>
cmp    %edi,%ecx
je     804ce95 <__sprintf_chk@plt+0x31e5>
mov    0x18(%edx),%ebx
mov    0x10(%edx),%ebp
add    %ebx,%ecx
not    %ebx
and    %ebx,%ecx
mov    0x4(%edx),%ebx
mov    %ecx,0xc(%edx)
sub    %ebx,%ecx
mov    %ecx,0xc(%esp)
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    %ecx,0xc(%esp)
jg     804ce90 <__sprintf_chk@plt+0x31e0>
mov    0xc(%edx),%ecx
xor    %ebx,%ebx
mov    %ecx,0x8(%edx)
mov    0x80633a0,%edx
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
mov    (%edi,%ebx,4),%eax
add    $0x1,%ebx
movl   $0x805b23d,0x4(%esp)
movl   $0x1,(%esp)
mov    %eax,0x8(%esp)
call   8049ac0 <__printf_chk@plt>
cmp    %esi,%ebx
jne    804ce50 <__sprintf_chk@plt+0x31a0>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804ce9e <__sprintf_chk@plt+0x31ee>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %ebp,0xc(%edx)
jmp    804ce36 <__sprintf_chk@plt+0x3186>
orb    $0x2,0x28(%edx)
jmp    804ce14 <__sprintf_chk@plt+0x3164>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804ce88 <__sprintf_chk@plt+0x31d8>
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    %ecx,%ebx
sub    $0x10,%esp
test   %eax,%eax
je     804cf30 <__sprintf_chk@plt+0x3280>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
mov    %esi,(%esp)
sub    %eax,%ebx
mov    $0x0,%eax
cmovs  %eax,%ebx
mov    0x80633a0,%eax
mov    %eax,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
mov    %esi,(%esp)
call   8049a10 <strlen@plt>
lea    (%ebx,%eax,1),%edi
lea    0x0(%esi,%eiz,1),%esi
mov    0x80633a0,%edx
mov    0x14(%edx),%eax
cmp    0x18(%edx),%eax
jae    804cf50 <__sprintf_chk@plt+0x32a0>
lea    0x1(%eax),%esi
mov    %esi,0x14(%edx)
movb   $0x20,(%eax)
sub    $0x1,%ebx
cmp    $0xffffffff,%ebx
jne    804cef8 <__sprintf_chk@plt+0x3248>
mov    0x8063ccc,%eax
lea    0x1(%edi,%eax,1),%eax
mov    %eax,0x8063ccc
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,0xc(%esp)
mov    %ebx,%edi
mov    %ecx,0x8(%esp)
movl   $0x805b242,0x4(%esp)
movl   $0x1,(%esp)
call   8049ac0 <__printf_chk@plt>
jmp    804cf17 <__sprintf_chk@plt+0x3267>
movl   $0x20,0x4(%esp)
mov    %edx,(%esp)
call   8049b40 <__overflow@plt>
jmp    804cf0f <__sprintf_chk@plt+0x325f>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
test   %cl,%cl
mov    $0x805b248,%eax
je     804cf8a <__sprintf_chk@plt+0x32da>
xor    %eax,%eax
cmpb   $0x0,0x8063ddd
je     804cf98 <__sprintf_chk@plt+0x32e8>
add    $0x18,%esp
mov    %edx,%ecx
mov    %ebx,%edx
pop    %ebx
jmp    804ceb0 <__sprintf_chk@plt+0x3200>
nop
mov    %ebx,(%esp)
mov    %edx,0xc(%esp)
call   8054670 <__sprintf_chk@plt+0xa9c0>
mov    0xc(%esp),%edx
add    $0x18,%esp
mov    %edx,%ecx
mov    %ebx,%edx
pop    %ebx
jmp    804ceb0 <__sprintf_chk@plt+0x3200>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x8063ce0,%eax
test   %eax,%eax
jne    804cfd6 <__sprintf_chk@plt+0x3326>
mov    0x8063cdc,%eax
add    $0x1,%eax
mov    %eax,0x8063cdc
repz ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
mov    %ecx,(%esp)
call   8056650 <__sprintf_chk@plt+0xc9a0>
mov    %eax,%edi
call   8049a60 <__errno_location@plt>
mov    %edi,0xc(%esp)
mov    %esi,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80498e0 <error@plt>
test   %bl,%bl
je     804d028 <__sprintf_chk@plt+0x3378>
movl   $0x2,0x8063cd8
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x8063cd8,%eax
test   %eax,%eax
jne    804d021 <__sprintf_chk@plt+0x3371>
movl   $0x1,0x8063cd8
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d0b8 <__sprintf_chk@plt+0x3408>
test   %al,%al
jne    804d090 <__sprintf_chk@plt+0x33e0>
test   %dl,%dl
mov    $0x1,%eax
je     804d090 <__sprintf_chk@plt+0x33e0>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x58(%edi),%ecx
cmp    %ecx,0x58(%esi)
mov    0x5c(%esi),%eax
mov    0x5c(%edi),%edx
jg     804d0c0 <__sprintf_chk@plt+0x3410>
jl     804d0d0 <__sprintf_chk@plt+0x3420>
sub    %eax,%edx
jne    804d0d7 <__sprintf_chk@plt+0x3427>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    804d07f <__sprintf_chk@plt+0x33cf>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    804d08c <__sprintf_chk@plt+0x33dc>
mov    %edx,%eax
jmp    804d08c <__sprintf_chk@plt+0x33dc>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d148 <__sprintf_chk@plt+0x3498>
test   %al,%al
jne    804d120 <__sprintf_chk@plt+0x3470>
test   %dl,%dl
mov    $0x1,%eax
je     804d120 <__sprintf_chk@plt+0x3470>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x50(%edi),%ecx
cmp    %ecx,0x50(%esi)
mov    0x54(%esi),%eax
mov    0x54(%edi),%edx
jg     804d150 <__sprintf_chk@plt+0x34a0>
jl     804d160 <__sprintf_chk@plt+0x34b0>
sub    %eax,%edx
jne    804d167 <__sprintf_chk@plt+0x34b7>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    804d10f <__sprintf_chk@plt+0x345f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    804d11c <__sprintf_chk@plt+0x346c>
mov    %edx,%eax
jmp    804d11c <__sprintf_chk@plt+0x346c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d1d8 <__sprintf_chk@plt+0x3528>
test   %al,%al
jne    804d1b0 <__sprintf_chk@plt+0x3500>
test   %dl,%dl
mov    $0x1,%eax
je     804d1b0 <__sprintf_chk@plt+0x3500>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x48(%edi),%ecx
cmp    %ecx,0x48(%esi)
mov    0x4c(%esi),%eax
mov    0x4c(%edi),%edx
jg     804d1e0 <__sprintf_chk@plt+0x3530>
jl     804d1f0 <__sprintf_chk@plt+0x3540>
sub    %eax,%edx
jne    804d1f7 <__sprintf_chk@plt+0x3547>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    804d19f <__sprintf_chk@plt+0x34ef>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    804d1ac <__sprintf_chk@plt+0x34fc>
mov    %edx,%eax
jmp    804d1ac <__sprintf_chk@plt+0x34fc>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d298 <__sprintf_chk@plt+0x35e8>
test   %al,%al
jne    804d240 <__sprintf_chk@plt+0x3590>
test   %dl,%dl
mov    $0x1,%eax
je     804d240 <__sprintf_chk@plt+0x3590>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x38(%edi),%edx
mov    0x38(%esi),%eax
mov    0x34(%edi),%ebx
mov    0x34(%esi),%ecx
cmp    %eax,%edx
jl     804d268 <__sprintf_chk@plt+0x35b8>
jle    804d260 <__sprintf_chk@plt+0x35b0>
mov    $0x1,%eax
jmp    804d23c <__sprintf_chk@plt+0x358c>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,%ebx
jae    804d278 <__sprintf_chk@plt+0x35c8>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %eax,%edx
jge    804d290 <__sprintf_chk@plt+0x35e0>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
cmp    %ecx,%ebx
ja     804d252 <__sprintf_chk@plt+0x35a2>
jmp    804d27c <__sprintf_chk@plt+0x35cc>
xchg   %ax,%ax
test   %dl,%dl
lea    0x0(%esi),%esi
jne    804d22f <__sprintf_chk@plt+0x357f>
jmp    804d268 <__sprintf_chk@plt+0x35b8>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d308 <__sprintf_chk@plt+0x3658>
test   %al,%al
jne    804d2f0 <__sprintf_chk@plt+0x3640>
test   %dl,%dl
mov    $0x1,%eax
je     804d2f0 <__sprintf_chk@plt+0x3640>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    804d2df <__sprintf_chk@plt+0x362f>
mov    $0xffffffff,%eax
jmp    804d2ec <__sprintf_chk@plt+0x363c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %dl
cmp    $0x9,%ebx
sete   %al
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%eax
or     %cl,%dl
jne    804d378 <__sprintf_chk@plt+0x36c8>
test   %dl,%dl
je     804d368 <__sprintf_chk@plt+0x36b8>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
nop
test   %al,%al
je     804d353 <__sprintf_chk@plt+0x36a3>
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   %al,%al
jne    804d34f <__sprintf_chk@plt+0x369f>
mov    $0xffffffff,%eax
jmp    804d371 <__sprintf_chk@plt+0x36c1>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804d3e8 <__sprintf_chk@plt+0x3738>
test   %al,%al
jne    804d3d0 <__sprintf_chk@plt+0x3720>
test   %dl,%dl
mov    $0x1,%eax
je     804d3d0 <__sprintf_chk@plt+0x3720>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    804d3bf <__sprintf_chk@plt+0x370f>
mov    $0xffffffff,%eax
jmp    804d3cc <__sprintf_chk@plt+0x371c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %dl
cmp    $0x9,%ebx
sete   %al
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%eax
or     %cl,%dl
jne    804d458 <__sprintf_chk@plt+0x37a8>
test   %dl,%dl
je     804d448 <__sprintf_chk@plt+0x3798>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
nop
test   %al,%al
je     804d433 <__sprintf_chk@plt+0x3783>
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
test   %al,%al
jne    804d42f <__sprintf_chk@plt+0x377f>
mov    $0xffffffff,%eax
jmp    804d451 <__sprintf_chk@plt+0x37a1>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
test   %al,%al
push   %esi
mov    %edx,%edi
push   %ebx
je     804d4a0 <__sprintf_chk@plt+0x37f0>
mov    %edx,%ebx
and    $0xf000,%ebx
cmp    $0x8000,%ebx
jne    804d500 <__sprintf_chk@plt+0x3850>
xor    %ebx,%ebx
cmpl   $0x3,0x8063dc0
je     804d510 <__sprintf_chk@plt+0x3860>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
xor    %ebx,%ebx
cmp    $0x5,%ecx
je     804d494 <__sprintf_chk@plt+0x37e4>
cmp    $0x9,%ecx
sete   %dl
cmp    $0x3,%ecx
mov    %edx,%esi
sete   %bl
or     %ebx,%esi
mov    %esi,%edx
mov    $0x2f,%ebx
test   %dl,%dl
jne    804d494 <__sprintf_chk@plt+0x37e4>
cmpl   $0x1,0x8063dc0
je     804d558 <__sprintf_chk@plt+0x38a8>
test   %al,%al
je     804d528 <__sprintf_chk@plt+0x3878>
and    $0xf000,%edi
mov    $0x40,%ebx
cmp    $0xa000,%edi
je     804d494 <__sprintf_chk@plt+0x37e4>
cmp    $0x1000,%edi
mov    $0x7c,%ebx
je     804d494 <__sprintf_chk@plt+0x37e4>
cmp    $0xc000,%edi
sete   %bl
jmp    804d54a <__sprintf_chk@plt+0x389a>
xchg   %ax,%ax
cmp    $0x4000,%ebx
sete   %dl
mov    %edx,%esi
jmp    804d4b7 <__sprintf_chk@plt+0x3807>
lea    0x0(%esi),%esi
and    $0x49,%edi
cmp    $0x1,%edi
sbb    %ebx,%ebx
not    %ebx
and    $0x2a,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x6,%ecx
mov    $0x40,%ebx
je     804d494 <__sprintf_chk@plt+0x37e4>
cmp    $0x1,%ecx
mov    $0x7c,%ebx
je     804d494 <__sprintf_chk@plt+0x37e4>
cmp    $0x7,%ecx
sete   %bl
neg    %ebx
and    $0x3d,%ebx
jmp    804d494 <__sprintf_chk@plt+0x37e4>
lea    0x0(%esi,%eiz,1),%esi
xor    %ebx,%ebx
jmp    804d494 <__sprintf_chk@plt+0x37e4>
nop
push   %ebx
movzbl %al,%eax
sub    $0x18,%esp
call   804d470 <__sprintf_chk@plt+0x37c0>
test   %al,%al
mov    %eax,%ebx
je     804d58e <__sprintf_chk@plt+0x38de>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    804d598 <__sprintf_chk@plt+0x38e8>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
mov    %bl,(%edx)
addl   $0x1,0x8063ccc
test   %bl,%bl
setne  %al
add    $0x18,%esp
pop    %ebx
ret
movzbl %bl,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804d587 <__sprintf_chk@plt+0x38d7>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
xor    %esi,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x2c4,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2bc(%esp)
xor    %eax,%eax
cmpb   $0x0,0x8063db0
je     804d5e9 <__sprintf_chk@plt+0x3939>
mov    0x8063e10,%eax
cmpl   $0x4,0x8063de8
lea    0x1(%eax),%esi
je     804d6f8 <__sprintf_chk@plt+0x3a48>
cmpb   $0x0,0x8063ddc
je     804d609 <__sprintf_chk@plt+0x3959>
mov    0x8063e0c,%eax
add    $0x1,%eax
cmpl   $0x4,0x8063de8
je     804d690 <__sprintf_chk@plt+0x39e0>
add    %eax,%esi
cmpb   $0x0,0x8063e15
je     804d625 <__sprintf_chk@plt+0x3975>
mov    0x8063e04,%eax
add    $0x1,%eax
cmpl   $0x4,0x8063de8
je     804d680 <__sprintf_chk@plt+0x39d0>
add    %eax,%esi
mov    0x8063d94,%ecx
lea    0x2c(%esp),%eax
mov    (%ebx),%edx
mov    %eax,(%esp)
xor    %eax,%eax
call   804ca50 <__sprintf_chk@plt+0x2da0>
mov    0x8063dc0,%eax
add    0x2c(%esp),%esi
test   %eax,%eax
je     804d661 <__sprintf_chk@plt+0x39b1>
mov    0x68(%ebx),%ecx
mov    0x18(%ebx),%edx
movzbl 0x74(%ebx),%eax
call   804d470 <__sprintf_chk@plt+0x37c0>
test   %al,%al
setne  %al
movzbl %al,%eax
add    %eax,%esi
mov    0x2bc(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    804d722 <__sprintf_chk@plt+0x3a72>
add    $0x2c4,%esp
pop    %ebx
pop    %esi
ret
mov    0x70(%ebx),%eax
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
add    $0x1,%eax
jmp    804d623 <__sprintf_chk@plt+0x3973>
cmpb   $0x0,0x74(%ebx)
mov    $0x2,%eax
je     804d607 <__sprintf_chk@plt+0x3957>
mov    0x8063dd0,%eax
mov    0x8063dd4,%edx
movl   $0x200,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dd8,%eax
mov    %edx,0x1c(%esp)
mov    0x44(%ebx),%edx
mov    %eax,0xc(%esp)
lea    0x30(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x40(%ebx),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
add    $0x1,%eax
jmp    804d607 <__sprintf_chk@plt+0x3957>
lea    0x0(%esi),%esi
lea    0x30(%esp),%eax
mov    0x64(%ebx),%edx
mov    %eax,0x8(%esp)
mov    0x60(%ebx),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
lea    0x1(%eax),%esi
jmp    804d5e9 <__sprintf_chk@plt+0x3939>
call   8049790 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x8063e30,%edi
mov    %al,0x23(%esp)
mov    0x8063cd0,%eax
mov    %edi,%ebp
cmp    %edi,%eax
cmovbe %eax,%ebp
cmp    0x80633c0,%ebp
jbe    804d813 <__sprintf_chk@plt+0x3b63>
mov    %eax,%edx
shr    %edx
cmp    %edx,%ebp
jb     804d973 <__sprintf_chk@plt+0x3cc3>
cmp    $0x15555555,%eax
mov    0x8063cd4,%edx
ja     804d9a0 <__sprintf_chk@plt+0x3cf0>
lea    (%eax,%eax,2),%eax
shl    $0x2,%eax
mov    %eax,0x4(%esp)
mov    %edx,(%esp)
call   80587a0 <__sprintf_chk@plt+0xeaf0>
mov    0x8063cd0,%ebx
mov    %eax,0x8063cd4
mov    0x80633c0,%eax
mov    %ebx,%edi
lea    0x1(%ebx,%eax,1),%esi
sub    %eax,%edi
mov    %esi,%ecx
imul   %edi,%ecx
cmp    %esi,%ebx
ja     804d9a0 <__sprintf_chk@plt+0x3cf0>
xor    %edx,%edx
mov    %ecx,%eax
div    %edi
cmp    %eax,%esi
jne    804d9a0 <__sprintf_chk@plt+0x3cf0>
shr    %ecx
cmp    $0x3fffffff,%ecx
ja     804d9a0 <__sprintf_chk@plt+0x3cf0>
shl    $0x2,%ecx
mov    %ecx,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x80633c0,%ecx
cmp    %ecx,%ebx
jbe    804d807 <__sprintf_chk@plt+0x3b57>
mov    0x8063cd4,%edi
lea    (%ecx,%ecx,2),%edx
lea    (%ebx,%ebx,2),%esi
lea    0x4(,%ecx,4),%ecx
lea    (%edi,%edx,4),%edx
lea    (%edi,%esi,4),%esi
nop
mov    %eax,0x8(%edx)
add    $0xc,%edx
add    %ecx,%eax
add    $0x4,%ecx
cmp    %esi,%edx
jne    804d7f8 <__sprintf_chk@plt+0x3b48>
mov    0x8063e30,%edi
mov    %ebx,0x80633c0
xor    %edx,%edx
test   %ebp,%ebp
mov    0x8063cd4,%ebx
je     804d851 <__sprintf_chk@plt+0x3ba1>
nop
mov    0x8(%ebx),%ecx
lea    0x1(%edx),%esi
lea    (%esi,%esi,2),%eax
mov    %eax,0x4(%ebx)
xor    %eax,%eax
movb   $0x1,(%ebx)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x3,(%ecx,%eax,4)
add    $0x1,%eax
cmp    %edx,%eax
jbe    804d838 <__sprintf_chk@plt+0x3b88>
add    $0xc,%ebx
cmp    %ebp,%esi
je     804d851 <__sprintf_chk@plt+0x3ba1>
mov    %esi,%edx
jmp    804d820 <__sprintf_chk@plt+0x3b70>
test   %edi,%edi
movl   $0x0,0x18(%esp)
je     804d937 <__sprintf_chk@plt+0x3c87>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063e2c,%eax
mov    0x18(%esp),%ebx
mov    (%eax,%ebx,4),%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
test   %ebp,%ebp
mov    %eax,0x1c(%esp)
mov    0x8063e30,%eax
mov    %eax,0x2c(%esp)
je     804d924 <__sprintf_chk@plt+0x3c74>
mov    0x8063d84,%ebx
sub    $0x1,%eax
mov    $0x1,%ecx
mov    %eax,0x28(%esp)
mov    %ebp,0x14(%esp)
mov    %ebx,0x24(%esp)
mov    0x8063cd4,%ebx
jmp    804d901 <__sprintf_chk@plt+0x3c51>
mov    0x28(%esp),%eax
xor    %edx,%edx
add    %ecx,%eax
div    %ecx
xor    %edx,%edx
mov    %eax,%edi
mov    0x18(%esp),%eax
div    %edi
mov    %eax,%edi
mov    %ecx,%eax
xor    %edx,%edx
cmp    %edi,%esi
mov    0x1c(%esp),%esi
setne  %dl
lea    (%esi,%edx,2),%edx
mov    0x8(%ebx),%esi
lea    (%esi,%edi,4),%esi
mov    (%esi),%edi
cmp    %edi,%edx
jbe    804d8f5 <__sprintf_chk@plt+0x3c45>
mov    %edx,%ebp
sub    %edi,%ebp
mov    0x24(%esp),%edi
add    %ebp,0x4(%ebx)
mov    %edx,(%esi)
cmp    %edi,0x4(%ebx)
setb   (%ebx)
add    $0xc,%ebx
add    $0x1,%ecx
cmp    %eax,0x14(%esp)
jbe    804d920 <__sprintf_chk@plt+0x3c70>
cmpb   $0x0,(%ebx)
mov    %ecx,%eax
lea    -0x1(%ecx),%esi
je     804d8f5 <__sprintf_chk@plt+0x3c45>
cmpb   $0x0,0x23(%esp)
jne    804d8b0 <__sprintf_chk@plt+0x3c00>
mov    0x18(%esp),%eax
xor    %edx,%edx
div    %ecx
mov    %ecx,%eax
mov    %edx,%edi
jmp    804d8c8 <__sprintf_chk@plt+0x3c18>
mov    0x14(%esp),%ebp
addl   $0x1,0x18(%esp)
mov    0x2c(%esp),%eax
cmp    %eax,0x18(%esp)
jb     804d868 <__sprintf_chk@plt+0x3bb8>
cmp    $0x1,%ebp
jbe    804d969 <__sprintf_chk@plt+0x3cb9>
mov    0x8063cd4,%edx
lea    0x0(%ebp,%ebp,2),%eax
shl    $0x2,%eax
cmpb   $0x0,-0xc(%edx,%eax,1)
jne    804d969 <__sprintf_chk@plt+0x3cb9>
add    %edx,%eax
jmp    804d961 <__sprintf_chk@plt+0x3cb1>
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%eax
cmpb   $0x0,-0xc(%eax)
jne    804d969 <__sprintf_chk@plt+0x3cb9>
sub    $0x1,%ebp
cmp    $0x1,%ebp
jne    804d958 <__sprintf_chk@plt+0x3ca8>
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
cmp    $0xaaaaaaa,%ebp
mov    0x8063cd4,%eax
ja     804d9a0 <__sprintf_chk@plt+0x3cf0>
lea    0x0(%ebp,%ebp,1),%ebx
lea    (%ebx,%ebp,1),%edx
shl    $0x3,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80587a0 <__sprintf_chk@plt+0xeaf0>
mov    %eax,0x8063cd4
jmp    804d793 <__sprintf_chk@plt+0x3ae3>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
mov    %eax,%ebx
sub    $0x38,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
cmpb   $0x0,0x8063ddd
je     804da10 <__sprintf_chk@plt+0x3d60>
mov    %ebx,0x10(%esp)
lea    0x21(%esp),%ebx
movl   $0x805b23e,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
mov    0x2c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804da37 <__sprintf_chk@plt+0x3d87>
add    $0x38,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
mov    %ebx,(%esp)
call   8054670 <__sprintf_chk@plt+0xa9c0>
test   %eax,%eax
je     804d9cb <__sprintf_chk@plt+0x3d1b>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
mov    %eax,%edx
xor    %eax,%eax
test   %edx,%edx
cmovns %edx,%eax
jmp    804d9fb <__sprintf_chk@plt+0x3d4b>
call   8049790 <__stack_chk_fail@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804da98 <__sprintf_chk@plt+0x3de8>
test   %al,%al
jne    804da80 <__sprintf_chk@plt+0x3dd0>
test   %dl,%dl
mov    $0x1,%eax
je     804da80 <__sprintf_chk@plt+0x3dd0>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8052230 <__sprintf_chk@plt+0x8580>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    804da6f <__sprintf_chk@plt+0x3dbf>
mov    $0xffffffff,%eax
jmp    804da7c <__sprintf_chk@plt+0x3dcc>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804db08 <__sprintf_chk@plt+0x3e58>
test   %al,%al
jne    804daf0 <__sprintf_chk@plt+0x3e40>
test   %dl,%dl
mov    $0x1,%eax
je     804daf0 <__sprintf_chk@plt+0x3e40>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8052230 <__sprintf_chk@plt+0x8580>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    804dadf <__sprintf_chk@plt+0x3e2f>
mov    $0xffffffff,%eax
jmp    804daec <__sprintf_chk@plt+0x3e3c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804dbc0 <__sprintf_chk@plt+0x3f10>
test   %al,%al
jne    804db68 <__sprintf_chk@plt+0x3eb8>
test   %dl,%dl
mov    $0x1,%eax
je     804db68 <__sprintf_chk@plt+0x3eb8>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    (%edi),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
call   8049b30 <strrchr@plt>
mov    (%esi),%esi
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,%ebx
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    804db5f <__sprintf_chk@plt+0x3eaf>
mov    %esi,0x24(%esp)
mov    %edi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    804db52 <__sprintf_chk@plt+0x3ea2>
mov    $0xffffffff,%eax
jmp    804db5f <__sprintf_chk@plt+0x3eaf>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063234,%eax
test   %eax,%eax
je     804dbe0 <__sprintf_chk@plt+0x3f30>
mov    $0x8063230,%eax
jmp    804dc10 <__sprintf_chk@plt+0x3f60>
sub    $0xc,%esp
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063238,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
add    $0xc,%esp
jmp    804dc10 <__sprintf_chk@plt+0x3f60>
jmp    804dc10 <__sprintf_chk@plt+0x3f60>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub    $0x2c,%esp
cmpb   $0x0,0x8063dbc
je     804dc48 <__sprintf_chk@plt+0x3f98>
mov    (%eax),%edx
mov    0x80633a0,%ecx
movl   $0x1,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %ecx,0xc(%esp)
mov    0x4(%eax),%eax
mov    %eax,(%esp)
call   8049ab0 <fwrite_unlocked@plt>
add    $0x2c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x1c(%esp)
movb   $0x1,0x8063dbc
call   804dbd0 <__sprintf_chk@plt+0x3f20>
mov    0x1c(%esp),%eax
jmp    804dc1c <__sprintf_chk@plt+0x3f6c>
xchg   %ax,%ax
push   %esi
push   %ebx
sub    $0x94,%esp
lea    0x10(%esp),%esi
jmp    804dcd1 <__sprintf_chk@plt+0x4021>
xchg   %ax,%ax
mov    0x80633a0,%eax
mov    %eax,(%esp)
call   80497d0 <fflush_unlocked@plt>
mov    %esi,0x8(%esp)
movl   $0x8063d00,0x4(%esp)
movl   $0x0,(%esp)
call   8049660 <sigprocmask@plt>
mov    0x8063ce0,%ebx
mov    0x8063cdc,%eax
test   %eax,%eax
je     804dd08 <__sprintf_chk@plt+0x4058>
sub    $0x1,%eax
mov    $0x13,%ebx
mov    %eax,0x8063cdc
mov    %ebx,(%esp)
call   80495e0 <raise@plt>
movl   $0x0,0x8(%esp)
mov    %esi,0x4(%esp)
movl   $0x2,(%esp)
call   8049660 <sigprocmask@plt>
mov    0x8063ce0,%eax
test   %eax,%eax
jne    804dce3 <__sprintf_chk@plt+0x4033>
mov    0x8063cdc,%eax
test   %eax,%eax
je     804dd20 <__sprintf_chk@plt+0x4070>
cmpb   $0x0,0x8063dbc
je     804dc70 <__sprintf_chk@plt+0x3fc0>
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
jmp    804dc70 <__sprintf_chk@plt+0x3fc0>
lea    0x0(%esi),%esi
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   8049720 <signal@plt>
jmp    804dcb1 <__sprintf_chk@plt+0x4001>
lea    0x0(%esi),%esi
add    $0x94,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
mov    %ecx,%ebx
sub    $0x1c,%esp
test   %dl,%dl
mov    (%eax),%eax
mov    0x4(%edi),%esi
je     804e164 <__sprintf_chk@plt+0x44b4>
cmpb   $0x0,0x8063dbd
jne    804dd58 <__sprintf_chk@plt+0x40a8>
xor    %edi,%edi
jmp    804decd <__sprintf_chk@plt+0x421d>
movzbl 0x75(%edi),%ecx
mov    0x6c(%edi),%ebp
test   %cl,%cl
jne    804dd88 <__sprintf_chk@plt+0x40d8>
mov    $0xc,%eax
mov    %ecx,0xc(%esp)
call   804c440 <__sprintf_chk@plt+0x2790>
mov    $0xc,%edx
mov    0xc(%esp),%ecx
test   %al,%al
jne    804de86 <__sprintf_chk@plt+0x41d6>
lea    0x0(%esi),%esi
cmpb   $0x0,0x74(%edi)
jne    804de00 <__sprintf_chk@plt+0x4150>
mov    0x68(%edi),%eax
mov    0x805ac20(,%eax,4),%edx
cmp    $0x5,%edx
jne    804de58 <__sprintf_chk@plt+0x41a8>
mov    %esi,(%esp)
call   8049a10 <strlen@plt>
mov    0x8063db8,%ebp
test   %ebp,%ebp
mov    %eax,%edi
lea    (%esi,%eax,1),%eax
mov    %eax,0xc(%esp)
je     804ddef <__sprintf_chk@plt+0x413f>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
cmp    %eax,%edi
jb     804dde8 <__sprintf_chk@plt+0x4138>
mov    %eax,0x8(%esp)
mov    0x4(%ebp),%ecx
mov    %ecx,0x4(%esp)
mov    0xc(%esp),%ecx
sub    %eax,%ecx
mov    %ecx,(%esp)
call   8049bd0 <strncmp@plt>
test   %eax,%eax
je     804e058 <__sprintf_chk@plt+0x43a8>
mov    0x10(%ebp),%ebp
test   %ebp,%ebp
jne    804ddc0 <__sprintf_chk@plt+0x4110>
mov    $0x5,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804e028 <__sprintf_chk@plt+0x4378>
cmp    $0x4000,%eax
je     804e088 <__sprintf_chk@plt+0x43d8>
cmp    $0xa000,%eax
je     804e018 <__sprintf_chk@plt+0x4368>
cmp    $0x1000,%eax
mov    $0x8,%edx
je     804de86 <__sprintf_chk@plt+0x41d6>
cmp    $0xc000,%eax
mov    $0x9,%dl
je     804de86 <__sprintf_chk@plt+0x41d6>
cmp    $0x6000,%eax
mov    $0xa,%dl
je     804de86 <__sprintf_chk@plt+0x41d6>
xor    %edx,%edx
cmp    $0x2000,%eax
setne  %dl
lea    0xb(%edx,%edx,1),%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
xchg   %ax,%ax
cmp    $0x7,%edx
sete   %al
and    %eax,%ecx
test   %cl,%cl
je     804de86 <__sprintf_chk@plt+0x41d6>
cmpb   $0x0,0x8063e24
mov    $0xd,%edx
jne    804de86 <__sprintf_chk@plt+0x41d6>
mov    $0xd,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
cmp    $0x1,%al
sbb    %edx,%edx
and    $0xfffffffa,%edx
add    $0xd,%edx
lea    0x8063220(,%edx,8),%edi
lea    0x0(%esi),%esi
mov    0x4(%edi),%edx
mov    $0x4,%eax
test   %edx,%edx
je     804e048 <__sprintf_chk@plt+0x4398>
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804dff8 <__sprintf_chk@plt+0x4348>
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    %edi,%eax
mov    $0x1,%edi
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
test   %ebx,%ebx
je     804df98 <__sprintf_chk@plt+0x42e8>
cmpb   $0x0,0x8063dc4
je     804def9 <__sprintf_chk@plt+0x4249>
mov    0xc(%ebx),%eax
lea    0x4(%eax),%edx
cmp    %edx,0x10(%ebx)
jb     804dfe0 <__sprintf_chk@plt+0x4330>
mov    0x8063ccc,%edx
mov    %edx,(%eax)
addl   $0x4,0xc(%ebx)
mov    0x8063d94,%ecx
mov    %esi,%edx
mov    0x80633a0,%eax
movl   $0x0,(%esp)
call   804ca50 <__sprintf_chk@plt+0x2da0>
mov    %eax,%esi
mov    0x8063ccc,%eax
add    %esi,%eax
cmpb   $0x0,0x8063dc4
mov    %eax,0x8063ccc
je     804df3e <__sprintf_chk@plt+0x428e>
mov    0xc(%ebx),%edx
lea    0x4(%edx),%ecx
cmp    %ecx,0x10(%ebx)
jb     804dfc0 <__sprintf_chk@plt+0x4310>
mov    %eax,(%edx)
addl   $0x4,0xc(%ebx)
call   804dc60 <__sprintf_chk@plt+0x3fb0>
mov    %edi,%eax
test   %al,%al
jne    804df58 <__sprintf_chk@plt+0x42a8>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
call   804dbd0 <__sprintf_chk@plt+0x3f20>
mov    0x8063d84,%ecx
xor    %edx,%edx
mov    0x30(%esp),%eax
div    %ecx
xor    %edx,%edx
mov    %eax,%ebx
mov    0x30(%esp),%eax
lea    -0x1(%esi,%eax,1),%eax
div    %ecx
cmp    %eax,%ebx
je     804df49 <__sprintf_chk@plt+0x4299>
mov    $0x80632d8,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
add    $0x1c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063d94,%ecx
mov    %esi,%edx
mov    0x80633a0,%eax
movl   $0x0,(%esp)
call   804ca50 <__sprintf_chk@plt+0x2da0>
add    %eax,0x8063ccc
mov    %eax,%esi
jmp    804df3e <__sprintf_chk@plt+0x428e>
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x4,0x4(%esp)
mov    %ebx,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0xc(%ebx),%edx
mov    0x8063ccc,%eax
jmp    804df38 <__sprintf_chk@plt+0x4288>
lea    0x0(%esi),%esi
movl   $0x4,0x4(%esp)
mov    %ebx,(%esp)
call   8049750 <_obstack_newchunk@plt>
mov    0xc(%ebx),%eax
jmp    804deed <__sprintf_chk@plt+0x423d>
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
jmp    804dead <__sprintf_chk@plt+0x41fd>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x7,%edx
jmp    804de60 <__sprintf_chk@plt+0x41b0>
lea    0x0(%esi),%esi
test   $0x800,%ebp
je     804e068 <__sprintf_chk@plt+0x43b8>
mov    $0x10,%ax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804e068 <__sprintf_chk@plt+0x43b8>
mov    $0x10,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
nop
call   804c440 <__sprintf_chk@plt+0x2790>
mov    %eax,%edi
jmp    804decd <__sprintf_chk@plt+0x421d>
lea    0x0(%esi,%eiz,1),%esi
test   %ebp,%ebp
je     804ddef <__sprintf_chk@plt+0x413f>
lea    0x8(%ebp),%edi
jmp    804de90 <__sprintf_chk@plt+0x41e0>
test   $0x400,%ebp
je     804e0e8 <__sprintf_chk@plt+0x4438>
mov    $0x11,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804e0e8 <__sprintf_chk@plt+0x4438>
mov    $0x11,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
mov    %ebp,%eax
and    $0x202,%eax
cmp    $0x202,%eax
je     804e149 <__sprintf_chk@plt+0x4499>
test   $0x2,%ebp
je     804e0b9 <__sprintf_chk@plt+0x4409>
mov    $0x13,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
mov    $0x13,%edx
test   %al,%al
jne    804de86 <__sprintf_chk@plt+0x41d6>
and    $0x200,%ebp
mov    $0x6,%edx
je     804de86 <__sprintf_chk@plt+0x41d6>
mov    $0x12,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
cmp    $0x1,%al
sbb    %edx,%edx
and    $0xfffffff4,%edx
add    $0x12,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x15,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804e106 <__sprintf_chk@plt+0x4456>
cmpb   $0x0,0x7c(%edi)
je     804e106 <__sprintf_chk@plt+0x4456>
mov    $0x15,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
and    $0x49,%ebp
je     804e123 <__sprintf_chk@plt+0x4473>
mov    $0xe,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804e123 <__sprintf_chk@plt+0x4473>
mov    $0xe,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
cmpl   $0x1,0x1c(%edi)
jbe    804dda1 <__sprintf_chk@plt+0x40f1>
mov    $0x16,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804dda1 <__sprintf_chk@plt+0x40f1>
mov    $0x16,%edx
jmp    804de86 <__sprintf_chk@plt+0x41d6>
mov    $0x14,%ax
call   804c440 <__sprintf_chk@plt+0x2790>
mov    $0x14,%edx
test   %al,%al
jne    804de86 <__sprintf_chk@plt+0x41d6>
jmp    804e09a <__sprintf_chk@plt+0x43ea>
cmpb   $0x0,0x8063dbd
jne    804e178 <__sprintf_chk@plt+0x44c8>
mov    %eax,%esi
xor    %edi,%edi
jmp    804decd <__sprintf_chk@plt+0x421d>
xchg   %ax,%ax
cmpb   $0x0,0x8063e24
je     804e1a0 <__sprintf_chk@plt+0x44f0>
cmpb   $0x0,0x75(%edi)
je     804e1b0 <__sprintf_chk@plt+0x4500>
mov    0x6c(%edi),%ebp
mov    $0x1,%ecx
xor    $0x1,%ecx
mov    %eax,%esi
jmp    804dd88 <__sprintf_chk@plt+0x40d8>
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x75(%edi),%ecx
mov    0x18(%edi),%ebp
jmp    804e18f <__sprintf_chk@plt+0x44df>
lea    0x0(%esi,%eiz,1),%esi
xor    %ecx,%ecx
jmp    804e1a4 <__sprintf_chk@plt+0x44f4>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
cmpb   $0x0,0x8063dbd
je     804e1dd <__sprintf_chk@plt+0x452d>
sub    $0xc,%esp
mov    $0x4,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804e1e0 <__sprintf_chk@plt+0x4530>
add    $0xc,%esp
repz ret
nop
mov    $0x8063220,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063240,%eax
call   804dc10 <__sprintf_chk@plt+0x3f60>
mov    $0x8063228,%eax
add    $0xc,%esp
jmp    804dc10 <__sprintf_chk@plt+0x3f60>
jmp    804e210 <__sprintf_chk@plt+0x4560>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
mov    %ecx,%esi
push   %ebx
mov    %edx,%ebx
sub    $0x13c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x12c(%esp)
xor    %eax,%eax
mov    0x806347c,%eax
test   %eax,%eax
je     804e25b <__sprintf_chk@plt+0x45ab>
movl   $0x805b24a,0x4(%esp)
mov    %edx,(%esp)
call   80495f0 <strstr@plt>
test   %eax,%eax
mov    %eax,%ebp
je     804e25b <__sprintf_chk@plt+0x45ab>
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
cmp    $0x65,%eax
jbe    804e2a8 <__sprintf_chk@plt+0x45f8>
mov    0x150(%esp),%eax
movl   $0x0,0x10(%esp)
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %eax,0x14(%esp)
movl   $0x3e9,0x4(%esp)
mov    %edi,(%esp)
call   8057fe0 <__sprintf_chk@plt+0xe330>
mov    0x12c(%esp),%ecx
xor    %gs:0x14,%ecx
jne    804e2f5 <__sprintf_chk@plt+0x4645>
add    $0x13c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%eax
add    $0x2,%ebp
sub    %ebx,%eax
mov    %ebx,0x4(%esp)
lea    0x27(%esp),%ebx
movl   $0x105,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ebx,(%esp)
call   8049620 <__mempcpy_chk@plt>
imul   $0xa1,0x10(%esi),%edx
add    $0x8063480,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8049780 <stpcpy@plt>
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
jmp    804e25b <__sprintf_chk@plt+0x45ab>
call   8049790 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x129c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x128c(%esp)
xor    %eax,%eax
cmpb   $0x0,0x74(%esi)
je     804e578 <__sprintf_chk@plt+0x48c8>
lea    0x47(%esp),%eax
mov    %eax,0x4(%esp)
lea    0x8(%esi),%eax
mov    %eax,(%esp)
call   8052060 <__sprintf_chk@plt+0x83b0>
cmpb   $0x0,0x8063e14
jne    804e5b2 <__sprintf_chk@plt+0x4902>
movb   $0x0,0x51(%esp)
mov    0x8063de4,%eax
cmp    $0x1,%eax
je     804e5e0 <__sprintf_chk@plt+0x4930>
jb     804e780 <__sprintf_chk@plt+0x4ad0>
cmp    $0x2,%eax
jne    804e5f8 <__sprintf_chk@plt+0x4948>
mov    0x4c(%esi),%eax
mov    0x48(%esi),%edx
mov    %eax,0x40(%esp)
mov    %edx,0x3c(%esp)
cmpb   $0x0,0x8063db0
lea    0x451(%esp),%ebp
mov    %ebp,%edi
jne    804e798 <__sprintf_chk@plt+0x4ae8>
cmpb   $0x0,0x8063ddc
je     804e3f3 <__sprintf_chk@plt+0x4743>
cmpb   $0x0,0x74(%esi)
mov    $0x805b248,%ecx
jne    804e990 <__sprintf_chk@plt+0x4ce0>
mov    %ecx,(%esp)
mov    0x8063e0c,%ebx
movl   $0x0,0x4(%esp)
mov    %ecx,0x24(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
mov    0x24(%esp),%ecx
sub    %eax,%ebx
test   %ebx,%ebx
jle    804e6a8 <__sprintf_chk@plt+0x49f8>
lea    (%edi,%ebx,1),%edx
xchg   %ax,%ax
add    $0x1,%edi
cmp    %edx,%edi
movb   $0x20,-0x1(%edi)
jne    804e3d0 <__sprintf_chk@plt+0x4720>
add    $0x1,%ecx
movzbl -0x1(%ecx),%eax
lea    0x1(%edx),%edi
test   %al,%al
mov    %al,-0x1(%edi)
jne    804e6a8 <__sprintf_chk@plt+0x49f8>
movb   $0x20,(%edx)
cmpb   $0x0,0x74(%esi)
mov    $0x805b248,%eax
jne    804e840 <__sprintf_chk@plt+0x4b90>
mov    %eax,0x18(%esp)
mov    0x8063e08,%eax
mov    %edi,(%esp)
movl   $0x805b24d,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %eax,0x14(%esp)
lea    0x47(%esp),%eax
mov    %eax,0x10(%esp)
movl   $0x1,0x4(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
add    %eax,%edi
cmpb   $0x0,0x8063dc4
jne    804e808 <__sprintf_chk@plt+0x4b58>
cmpb   $0x0,0x80632e9
jne    804e470 <__sprintf_chk@plt+0x47c0>
cmpb   $0x0,0x80632e8
jne    804e470 <__sprintf_chk@plt+0x47c0>
cmpb   $0x0,0x8063dde
je     804e870 <__sprintf_chk@plt+0x4bc0>
lea    0x0(%esi),%esi
mov    0x80633a0,%eax
sub    %ebp,%edi
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
add    %edi,0x8063ccc
cmpb   $0x0,0x80632e9
jne    804e958 <__sprintf_chk@plt+0x4ca8>
cmpb   $0x0,0x80632e8
jne    804e928 <__sprintf_chk@plt+0x4c78>
cmpb   $0x0,0x8063dde
jne    804e910 <__sprintf_chk@plt+0x4c60>
cmpb   $0x0,0x8063e15
mov    %ebp,%edi
jne    804e8f8 <__sprintf_chk@plt+0x4c48>
cmpb   $0x0,0x74(%esi)
je     804e6b0 <__sprintf_chk@plt+0x4a00>
mov    0x18(%esi),%eax
and    $0xb000,%eax
cmp    $0x2000,%eax
je     804e9e0 <__sprintf_chk@plt+0x4d30>
mov    0x80632e0,%eax
mov    0x80632e4,%edx
movl   $0x1,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dc8,%eax
mov    %edx,0x1c(%esp)
mov    0x38(%esi),%edx
mov    %eax,0xc(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esi),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
mov    %eax,%edx
mov    %edx,(%esp)
mov    0x8063dec,%ebx
movl   $0x0,0x4(%esp)
mov    %edx,0x24(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
mov    0x24(%esp),%edx
sub    %eax,%ebx
test   %ebx,%ebx
jle    804eab4 <__sprintf_chk@plt+0x4e04>
lea    (%edi,%ebx,1),%eax
nop
add    $0x1,%edi
cmp    %eax,%edi
movb   $0x20,-0x1(%edi)
jne    804e550 <__sprintf_chk@plt+0x48a0>
add    $0x1,%edx
movzbl -0x1(%edx),%ecx
lea    0x1(%eax),%ebx
test   %cl,%cl
mov    %cl,-0x1(%ebx)
je     804e600 <__sprintf_chk@plt+0x4950>
mov    %ebx,%eax
jmp    804e55b <__sprintf_chk@plt+0x48ab>
lea    0x0(%esi,%eiz,1),%esi
mov    0x68(%esi),%eax
cmpb   $0x0,0x8063e14
movl   $0x3f3f3f3f,0x48(%esp)
movl   $0x3f3f3f3f,0x4c(%esp)
movzbl 0x805b20c(%eax),%eax
movb   $0x0,0x52(%esp)
mov    %al,0x47(%esp)
mov    $0x3f3f,%eax
mov    %ax,0x50(%esp)
je     804e345 <__sprintf_chk@plt+0x4695>
mov    0x78(%esi),%eax
cmp    $0x1,%eax
je     804e860 <__sprintf_chk@plt+0x4bb0>
cmp    $0x2,%eax
jne    804e34a <__sprintf_chk@plt+0x469a>
mov    0x8063de4,%eax
movb   $0x2b,0x51(%esp)
cmp    $0x1,%eax
jne    804e358 <__sprintf_chk@plt+0x46a8>
lea    0x0(%esi),%esi
mov    0x5c(%esi),%eax
mov    0x58(%esi),%edx
mov    %eax,0x40(%esp)
mov    %edx,0x3c(%esp)
jmp    804e375 <__sprintf_chk@plt+0x46c5>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049bf0 <abort@plt>
lea    0x0(%esi),%esi
movb   $0x20,(%eax)
lea    0x3c(%esp),%eax
mov    %eax,(%esp)
call   80499d0 <localtime@plt>
movb   $0x1,(%ebx)
cmpb   $0x0,0x74(%esi)
je     804e6d0 <__sprintf_chk@plt+0x4a20>
test   %eax,%eax
je     804eabb <__sprintf_chk@plt+0x4e0b>
mov    0x8063e1c,%ecx
mov    0x8063e18,%edx
mov    0x40(%esp),%edi
mov    %ecx,0x28(%esp)
mov    0x3c(%esp),%ecx
cmp    %edx,%ecx
jg     804eae0 <__sprintf_chk@plt+0x4e30>
jl     804e650 <__sprintf_chk@plt+0x49a0>
cmp    %edi,0x28(%esp)
js     804eae0 <__sprintf_chk@plt+0x4e30>
mov    %ecx,0x24(%esp)
lea    -0xf0c2ac(%edx),%ecx
cmp    0x24(%esp),%ecx
jge    804e970 <__sprintf_chk@plt+0x4cc0>
cmp    0x24(%esp),%edx
mov    $0x1,%ecx
jg     804e680 <__sprintf_chk@plt+0x49d0>
mov    $0x0,%cl
jl     804e680 <__sprintf_chk@plt+0x49d0>
mov    %edi,%ecx
sub    0x28(%esp),%ecx
shr    $0x1f,%ecx
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063208(,%ecx,4),%edx
mov    %eax,%ecx
mov    %ebx,%eax
mov    %edi,(%esp)
call   804e210 <__sprintf_chk@plt+0x4560>
test   %eax,%eax
je     804e6ba <__sprintf_chk@plt+0x4a0a>
add    %ebx,%eax
lea    0x1(%eax),%ebx
movb   $0x20,(%eax)
movb   $0x0,0x1(%eax)
jmp    804e714 <__sprintf_chk@plt+0x4a64>
lea    0x0(%esi),%esi
mov    %edi,%edx
jmp    804e3db <__sprintf_chk@plt+0x472b>
nop
mov    $0x805b248,%edx
jmp    804e524 <__sprintf_chk@plt+0x4874>
cmpb   $0x0,(%ebx)
je     804e697 <__sprintf_chk@plt+0x49e7>
cmpb   $0x0,0x74(%esi)
jne    804eabb <__sprintf_chk@plt+0x4e0b>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x805b248,%edi
mov    0x8063204,%eax
test   %eax,%eax
js     804eb14 <__sprintf_chk@plt+0x4e64>
mov    %ebx,(%esp)
mov    %edi,0x14(%esp)
mov    %eax,0x10(%esp)
movl   $0x805b25d,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
add    %eax,%ebx
mov    0x80633a0,%eax
sub    %ebp,%ebx
mov    %ebp,(%esp)
mov    %eax,0x4(%esp)
call   8049990 <fputs_unlocked@plt>
mov    $0x8063ca0,%ecx
xor    %edx,%edx
mov    %ebx,(%esp)
mov    %esi,%eax
add    %ebx,0x8063ccc
call   804dd30 <__sprintf_chk@plt+0x4080>
mov    0x68(%esi),%ecx
cmp    $0x6,%ecx
mov    %eax,%edi
je     804e888 <__sprintf_chk@plt+0x4bd8>
mov    0x8063dc0,%eax
test   %eax,%eax
je     804e761 <__sprintf_chk@plt+0x4ab1>
mov    0x18(%esi),%edx
movzbl 0x74(%esi),%eax
call   804d560 <__sprintf_chk@plt+0x38b0>
mov    0x128c(%esp),%eax
xor    %gs:0x14,%eax
jne    804eba2 <__sprintf_chk@plt+0x4ef2>
add    $0x129c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x54(%esi),%eax
mov    0x50(%esi),%edx
mov    %eax,0x40(%esp)
mov    %edx,0x3c(%esp)
jmp    804e375 <__sprintf_chk@plt+0x46c5>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x74(%esi)
mov    $0x805b248,%eax
je     804e7c3 <__sprintf_chk@plt+0x4b13>
mov    0x64(%esi),%edx
mov    0x60(%esi),%ecx
mov    %edx,%ebx
or     %ecx,%ebx
je     804e7c3 <__sprintf_chk@plt+0x4b13>
lea    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ecx,(%esp)
mov    %edx,0x4(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,0x14(%esp)
mov    0x8063e10,%eax
lea    0x451(%esp),%ebp
movl   $0x805b25d,0xc(%esp)
movl   $0xe3b,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x10(%esp)
mov    %ebp,(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %ebp,(%esp)
call   8049a10 <strlen@plt>
lea    0x0(%ebp,%eax,1),%edi
jmp    804e38b <__sprintf_chk@plt+0x46db>
mov    0x80633a0,%eax
movl   $0x2,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805b255,(%esp)
mov    %eax,0xc(%esp)
call   8049ab0 <fwrite_unlocked@plt>
addl   $0x2,0x8063ccc
jmp    804e44e <__sprintf_chk@plt+0x479e>
lea    0x0(%esi,%eiz,1),%esi
lea    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%esi),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
jmp    804e402 <__sprintf_chk@plt+0x4752>
movb   $0x2e,0x51(%esp)
jmp    804e34a <__sprintf_chk@plt+0x469a>
lea    0x0(%esi),%esi
cmpb   $0x0,0x8063e15
je     804e4bf <__sprintf_chk@plt+0x480f>
jmp    804e470 <__sprintf_chk@plt+0x47c0>
lea    0x0(%esi),%esi
mov    0x4(%esi),%ecx
test   %ecx,%ecx
je     804e761 <__sprintf_chk@plt+0x4ab1>
mov    0x80633a0,%eax
movl   $0x4,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805b262,(%esp)
mov    %eax,0xc(%esp)
call   8049ab0 <fwrite_unlocked@plt>
lea    0x4(%ebx,%edi,1),%eax
xor    %ecx,%ecx
mov    %eax,(%esp)
mov    $0x1,%edx
mov    %esi,%eax
addl   $0x4,0x8063ccc
call   804dd30 <__sprintf_chk@plt+0x4080>
mov    0x8063dc0,%edx
test   %edx,%edx
je     804e761 <__sprintf_chk@plt+0x4ab1>
mov    0x6c(%esi),%edx
xor    %ecx,%ecx
mov    $0x1,%eax
call   804d560 <__sprintf_chk@plt+0x38b0>
jmp    804e761 <__sprintf_chk@plt+0x4ab1>
xchg   %ax,%ax
mov    0x70(%esi),%eax
xor    %edx,%edx
mov    0x8063e04,%ecx
call   804ceb0 <__sprintf_chk@plt+0x3200>
jmp    804e4bf <__sprintf_chk@plt+0x480f>
lea    0x0(%esi),%esi
movzbl 0x74(%esi),%ecx
mov    0x20(%esi),%eax
mov    0x8063df8,%edx
call   804cf70 <__sprintf_chk@plt+0x32c0>
jmp    804e4b0 <__sprintf_chk@plt+0x4800>
nop
cmpb   $0x0,0x74(%esi)
mov    $0x805b248,%eax
mov    0x8063dfc,%ecx
mov    0x24(%esi),%edx
je     804e94b <__sprintf_chk@plt+0x4c9b>
xor    %eax,%eax
cmpb   $0x0,0x8063ddd
je     804eb66 <__sprintf_chk@plt+0x4eb6>
call   804ceb0 <__sprintf_chk@plt+0x3200>
jmp    804e4a3 <__sprintf_chk@plt+0x47f3>
lea    0x0(%esi),%esi
movzbl 0x74(%esi),%ecx
mov    0x20(%esi),%eax
mov    0x8063e00,%edx
call   804cf70 <__sprintf_chk@plt+0x32c0>
jmp    804e496 <__sprintf_chk@plt+0x47e6>
nop
mov    $0x0,%ecx
jg     804e680 <__sprintf_chk@plt+0x49d0>
cmp    %edi,0x28(%esp)
nop
jns    804e680 <__sprintf_chk@plt+0x49d0>
jmp    804e664 <__sprintf_chk@plt+0x49b4>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063dd8,%eax
mov    0x8063dd0,%ecx
mov    0x8063dd4,%ebx
mov    0x44(%esi),%edx
mov    %eax,0xc(%esp)
lea    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x40(%esi),%eax
mov    %ecx,0x18(%esp)
mov    %ebx,0x1c(%esp)
movl   $0x200,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
mov    %eax,%ecx
jmp    804e3a3 <__sprintf_chk@plt+0x46f3>
xchg   %ax,%ax
lea    0x68(%esp),%eax
mov    0x2c(%esi),%edx
mov    $0xfffffffe,%ebx
mov    %eax,0x8(%esp)
mov    0x28(%esi),%eax
movzbl 0x28(%esi),%ecx
movl   $0x0,0x4(%esp)
sub    0x8063df4,%ebx
shrd   $0xc,%edx,%eax
xor    %al,%al
or     %ecx,%eax
mov    %eax,(%esp)
sub    0x8063df0,%ebx
add    0x8063dec,%ebx
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    0x8063df0,%ecx
mov    0x2c(%esi),%edx
movl   $0x0,0x4(%esp)
mov    %ecx,0x28(%esp)
mov    0x2c(%esi),%ecx
mov    %eax,0x24(%esp)
lea    0x53(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x28(%esi),%eax
and    $0xfffff000,%ecx
shrd   $0x8,%edx,%eax
and    $0xfff,%eax
or     %eax,%ecx
mov    %ecx,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    0x24(%esp),%edx
mov    0x28(%esp),%ecx
movl   $0x805b258,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
mov    %edx,0x1c(%esp)
mov    %ecx,0x18(%esp)
mov    %eax,0x14(%esp)
xor    %eax,%eax
test   %ebx,%ebx
cmovns %ebx,%eax
add    0x8063df4,%eax
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x10(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    0x8063dec,%eax
lea    0x1(%edi,%eax,1),%ebx
jmp    804e603 <__sprintf_chk@plt+0x4953>
mov    %edi,%eax
jmp    804e55b <__sprintf_chk@plt+0x48ab>
lea    0x53(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
sar    $0x1f,%eax
mov    %eax,0x4(%esp)
call   8054970 <__sprintf_chk@plt+0xacc0>
mov    %eax,%edi
jmp    804e6d5 <__sprintf_chk@plt+0x4a25>
lea    0x0(%esi),%esi
movl   $0x8063e18,(%esp)
mov    %eax,0x2c(%esp)
call   8052620 <__sprintf_chk@plt+0x8970>
mov    0x8063e1c,%eax
mov    0x8063e18,%edx
mov    0x40(%esp),%edi
mov    %eax,0x28(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x24(%esp)
mov    0x2c(%esp),%eax
jmp    804e654 <__sprintf_chk@plt+0x49a4>
lea    0x38(%esp),%eax
mov    %eax,(%esp)
movl   $0x0,0x38(%esp)
call   80499d0 <localtime@plt>
test   %eax,%eax
je     804eb55 <__sprintf_chk@plt+0x4ea5>
mov    0x8063208,%edx
mov    %eax,%ecx
movl   $0x0,(%esp)
lea    0x68(%esp),%eax
call   804e210 <__sprintf_chk@plt+0x4560>
test   %eax,%eax
jne    804eb83 <__sprintf_chk@plt+0x4ed3>
mov    0x8063204,%eax
test   %eax,%eax
jns    804e6e2 <__sprintf_chk@plt+0x4a32>
movl   $0x0,0x8063204
00
xor    %eax,%eax
jmp    804e6e2 <__sprintf_chk@plt+0x4a32>
mov    %edx,(%esp)
mov    %ecx,0x28(%esp)
mov    %edx,0x24(%esp)
call   80547f0 <__sprintf_chk@plt+0xab40>
mov    0x28(%esp),%ecx
mov    0x24(%esp),%edx
jmp    804e94b <__sprintf_chk@plt+0x4c9b>
mov    %eax,0x4(%esp)
lea    0x68(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8054f30 <__sprintf_chk@plt+0xb280>
mov    %eax,0x8063204
jmp    804eb4d <__sprintf_chk@plt+0x4e9d>
call   8049790 <__stack_chk_fail@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x38(%eax),%ecx
mov    0x38(%edx),%ebx
mov    0x34(%edx),%edi
mov    0x34(%eax),%esi
cmp    %ecx,%ebx
jl     804ebdc <__sprintf_chk@plt+0x4f2c>
jle    804ebd8 <__sprintf_chk@plt+0x4f28>
pop    %ebx
mov    $0x1,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
cmp    %esi,%edi
jae    804ebe8 <__sprintf_chk@plt+0x4f38>
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
cmp    %ecx,%ebx
jge    804ec00 <__sprintf_chk@plt+0x4f50>
mov    (%edx),%edx
mov    %edx,0x14(%esp)
mov    (%eax),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
cmp    %esi,%edi
ja     804ebcd <__sprintf_chk@plt+0x4f1d>
jmp    804ebec <__sprintf_chk@plt+0x4f3c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%eax
mov    0x38(%edx),%ebx
mov    0x38(%eax),%ecx
mov    0x34(%edx),%edi
mov    0x34(%eax),%esi
cmp    %ecx,%ebx
jl     804ec3c <__sprintf_chk@plt+0x4f8c>
jle    804ec38 <__sprintf_chk@plt+0x4f88>
pop    %ebx
mov    $0x1,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
cmp    %esi,%edi
jae    804ec48 <__sprintf_chk@plt+0x4f98>
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
cmp    %ecx,%ebx
jge    804ec60 <__sprintf_chk@plt+0x4fb0>
mov    (%edx),%edx
mov    %edx,0x14(%esp)
mov    (%eax),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
cmp    %esi,%edi
ja     804ec2d <__sprintf_chk@plt+0x4f7d>
jmp    804ec4c <__sprintf_chk@plt+0x4f9c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x48(%edx),%esi
cmp    %esi,0x48(%eax)
mov    0x4c(%eax),%ecx
mov    0x4c(%edx),%ebx
jg     804eca8 <__sprintf_chk@plt+0x4ff8>
jl     804ecb0 <__sprintf_chk@plt+0x5000>
sub    %ecx,%ebx
jne    804ecb8 <__sprintf_chk@plt+0x5008>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804ecad <__sprintf_chk@plt+0x4ffd>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x48(%edx),%esi
cmp    %esi,0x48(%eax)
mov    0x4c(%eax),%ecx
mov    0x4c(%edx),%ebx
jg     804ecf8 <__sprintf_chk@plt+0x5048>
jl     804ed00 <__sprintf_chk@plt+0x5050>
sub    %ecx,%ebx
jne    804ed08 <__sprintf_chk@plt+0x5058>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804ecfd <__sprintf_chk@plt+0x504d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x50(%edx),%esi
cmp    %esi,0x50(%eax)
mov    0x54(%eax),%ecx
mov    0x54(%edx),%ebx
jg     804ed48 <__sprintf_chk@plt+0x5098>
jl     804ed50 <__sprintf_chk@plt+0x50a0>
sub    %ecx,%ebx
jne    804ed58 <__sprintf_chk@plt+0x50a8>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804ed4d <__sprintf_chk@plt+0x509d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x58(%edx),%esi
cmp    %esi,0x58(%eax)
mov    0x5c(%eax),%ecx
mov    0x5c(%edx),%ebx
jg     804ed98 <__sprintf_chk@plt+0x50e8>
jl     804eda0 <__sprintf_chk@plt+0x50f0>
sub    %ecx,%ebx
jne    804eda8 <__sprintf_chk@plt+0x50f8>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804ed9d <__sprintf_chk@plt+0x50ed>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x58(%edx),%esi
cmp    %esi,0x58(%eax)
mov    0x5c(%eax),%ecx
mov    0x5c(%edx),%ebx
jg     804ede8 <__sprintf_chk@plt+0x5138>
jl     804edf0 <__sprintf_chk@plt+0x5140>
sub    %ecx,%ebx
jne    804edf8 <__sprintf_chk@plt+0x5148>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804eded <__sprintf_chk@plt+0x513d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x50(%edx),%esi
cmp    %esi,0x50(%eax)
mov    0x54(%eax),%ecx
mov    0x54(%edx),%ebx
jg     804ee38 <__sprintf_chk@plt+0x5188>
jl     804ee40 <__sprintf_chk@plt+0x5190>
sub    %ecx,%ebx
jne    804ee48 <__sprintf_chk@plt+0x5198>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    804ee3d <__sprintf_chk@plt+0x518d>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
mov    %esp,%ebp
push   %edi
push   %esi
push   %ebx
sub    $0x35c,%esp
mov    %eax,-0x334(%ebp)
mov    0x8(%ebp),%eax
mov    %edx,-0x338(%ebp)
mov    0x8063e30,%edx
mov    %ecx,-0x33c(%ebp)
mov    %eax,-0x340(%ebp)
mov    %gs:0x14,%eax
mov    %eax,-0x1c(%ebp)
xor    %eax,%eax
mov    0x8063e38,%eax
cmp    0x8063e34,%edx
je     804f398 <__sprintf_chk@plt+0x56e8>
shl    $0x7,%edx
lea    (%eax,%edx,1),%ebx
mov    $0x80,%edx
test   $0x1,%bl
mov    %ebx,%edi
jne    804f978 <__sprintf_chk@plt+0x5cc8>
test   $0x2,%edi
jne    804f990 <__sprintf_chk@plt+0x5ce0>
mov    %edx,%ecx
xor    %eax,%eax
shr    $0x2,%ecx
test   $0x2,%dl
rep stos %eax,%es:(%edi)
jne    804f2b8 <__sprintf_chk@plt+0x5608>
and    $0x1,%edx
jne    804f2b0 <__sprintf_chk@plt+0x5600>
mov    -0x338(%ebp),%eax
cmpb   $0x0,-0x33c(%ebp)
movl   $0x0,0x60(%ebx)
movl   $0x0,0x64(%ebx)
mov    %eax,0x68(%ebx)
je     804f1b0 <__sprintf_chk@plt+0x5500>
mov    0x8063dac,%edi
mov    -0x334(%ebp),%eax
movzbl (%eax),%ecx
mov    %eax,-0x330(%ebp)
cmp    $0x2f,%cl
je     804ef25 <__sprintf_chk@plt+0x5275>
mov    -0x340(%ebp),%esi
movzbl (%esi),%edx
test   %dl,%dl
jne    804f668 <__sprintf_chk@plt+0x59b8>
cmp    $0x3,%edi
jb     804f438 <__sprintf_chk@plt+0x5788>
cmp    $0x4,%edi
jbe    804f2d0 <__sprintf_chk@plt+0x5620>
cmp    $0x5,%edi
jne    804f438 <__sprintf_chk@plt+0x5788>
lea    0x8(%ebx),%eax
mov    $0x1,%esi
mov    %eax,-0x344(%ebp)
mov    %eax,0x8(%esp)
mov    -0x330(%ebp),%eax
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049c00 <__xstat64@plt>
mov    %eax,-0x340(%ebp)
mov    -0x340(%ebp),%eax
test   %eax,%eax
jne    804f31c <__sprintf_chk@plt+0x566c>
cmpl   $0x5,-0x338(%ebp)
movb   $0x1,0x74(%ebx)
je     804f3d0 <__sprintf_chk@plt+0x5720>
mov    0x18(%ebx),%eax
and    $0xf000,%eax
cmp    $0x8000,%eax
je     804f3d0 <__sprintf_chk@plt+0x5720>
mov    0x8063de8,%edi
test   %edi,%edi
je     804efb7 <__sprintf_chk@plt+0x5307>
cmpb   $0x0,0x8063e15
je     804f051 <__sprintf_chk@plt+0x53a1>
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
xor    0x80633d4,%edx
xor    0x80633d0,%eax
or     %eax,%edx
je     804fc51 <__sprintf_chk@plt+0x5fa1>
mov    %esi,%eax
test   %al,%al
lea    0x70(%ebx),%eax
mov    %eax,0x4(%esp)
mov    -0x330(%ebp),%eax
mov    %eax,(%esp)
je     804f448 <__sprintf_chk@plt+0x5798>
call   8059760 <__sprintf_chk@plt+0xfab0>
test   %eax,%eax
js     804f455 <__sprintf_chk@plt+0x57a5>
mov    0x70(%ebx),%edi
mov    $0x805b295,%esi
mov    $0xa,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
setne  %dl
mov    0x8063de8,%eax
test   %eax,%eax
je     804f850 <__sprintf_chk@plt+0x5ba0>
xor    %eax,%eax
mov    %eax,%ecx
xor    %edi,%edi
or     %dl,%cl
mov    %ecx,%esi
je     804f038 <__sprintf_chk@plt+0x5388>
xor    $0x1,%eax
and    %al,%dl
mov    %edx,%ecx
cmovne %edx,%esi
shl    $0x1f,%ecx
mov    %ecx,%edi
sar    $0x1f,%edi
add    $0x2,%edi
mov    -0x340(%ebp),%ecx
mov    %esi,%eax
or     %al,0x8063e14
mov    %edi,0x78(%ebx)
test   %ecx,%ecx
jne    804f49b <__sprintf_chk@plt+0x57eb>
mov    0x18(%ebx),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     804f4e8 <__sprintf_chk@plt+0x5838>
cmp    $0x4000,%eax
je     804f920 <__sprintf_chk@plt+0x5c70>
mov    0x8063de8,%edx
movl   $0x5,0x68(%ebx)
test   %edx,%edx
mov    0x40(%ebx),%esi
mov    0x44(%ebx),%edi
je     804f093 <__sprintf_chk@plt+0x53e3>
cmpb   $0x0,0x8063ddc
je     804f12f <__sprintf_chk@plt+0x547f>
mov    0x8063dd0,%eax
mov    0x8063dd4,%edx
movl   $0x200,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dd8,%eax
mov    %edx,0x1c(%esp)
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0xc(%esp)
lea    -0x2a8(%ebp),%eax
mov    %eax,0x8(%esp)
mov    %eax,-0x330(%ebp)
call   8053630 <__sprintf_chk@plt+0x9980>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
cmp    0x8063e0c,%eax
jle    804f0f8 <__sprintf_chk@plt+0x5448>
mov    %eax,0x8063e0c
mov    0x8063de8,%edx
test   %edx,%edx
jne    804f12f <__sprintf_chk@plt+0x547f>
cmpb   $0x0,0x80632e9
jne    804fac8 <__sprintf_chk@plt+0x5e18>
cmpb   $0x0,0x80632e8
jne    804fa38 <__sprintf_chk@plt+0x5d88>
cmpb   $0x0,0x8063dde
jne    804f9a8 <__sprintf_chk@plt+0x5cf8>
mov    0x8063de8,%edx
cmpb   $0x0,0x8063e15
je     804f15b <__sprintf_chk@plt+0x54ab>
mov    0x70(%ebx),%eax
mov    %edx,-0x330(%ebp)
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    -0x330(%ebp),%edx
cmp    0x8063e04,%eax
jg     804f718 <__sprintf_chk@plt+0x5a68>
test   %edx,%edx
je     804f725 <__sprintf_chk@plt+0x5a75>
movzbl 0x8063db0,%eax
test   %al,%al
jne    804f628 <__sprintf_chk@plt+0x5978>
mov    -0x334(%ebp),%eax
mov    %eax,(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    %esi,%edx
mov    %edi,%ecx
addl   $0x1,0x8063e30
mov    %eax,(%ebx)
mov    -0x1c(%ebp),%esi
xor    %gs:0x14,%esi
mov    %edx,%eax
mov    %ecx,%edx
jne    804fc8e <__sprintf_chk@plt+0x5fde>
lea    -0xc(%ebp),%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x8063d81
jne    804eefa <__sprintf_chk@plt+0x524a>
cmpl   $0x3,-0x338(%ebp)
je     804f8d8 <__sprintf_chk@plt+0x5c28>
movzbl 0x8063db0,%eax
test   %al,%al
je     804f838 <__sprintf_chk@plt+0x5b88>
mov    -0x338(%ebp),%edx
test   %edx,%edx
sete   %dl
je     804f1ef <__sprintf_chk@plt+0x553f>
cmpl   $0x6,-0x338(%ebp)
jne    804f218 <__sprintf_chk@plt+0x5568>
mov    0x8063dac,%edi
cmp    $0x5,%edi
je     804fbe8 <__sprintf_chk@plt+0x5f38>
cmpb   $0x0,0x8063e24
jne    804ef00 <__sprintf_chk@plt+0x5250>
cmpb   $0x0,0x8063db1
jne    804ef00 <__sprintf_chk@plt+0x5250>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
cmpb   $0x0,0x8063d80
je     804f845 <__sprintf_chk@plt+0x5b95>
test   %dl,%dl
jne    804eefa <__sprintf_chk@plt+0x524a>
xor    %esi,%esi
xor    %edi,%edi
cmpl   $0x5,-0x338(%ebp)
jne    804f172 <__sprintf_chk@plt+0x54c2>
cmpl   $0x3,0x8063dc0
je     804eefa <__sprintf_chk@plt+0x524a>
cmpb   $0x0,0x8063dbd
je     804f172 <__sprintf_chk@plt+0x54c2>
mov    $0xe,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
mov    $0x10,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
mov    $0x11,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
mov    $0x15,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
jmp    804f172 <__sprintf_chk@plt+0x54c2>
lea    0x0(%esi),%esi
movb   $0x0,(%edi)
jmp    804eed6 <__sprintf_chk@plt+0x5226>
xor    %ecx,%ecx
add    $0x2,%edi
mov    %cx,-0x2(%edi)
and    $0x1,%edx
je     804eed6 <__sprintf_chk@plt+0x5226>
jmp    804f2b0 <__sprintf_chk@plt+0x5600>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,-0x33c(%ebp)
lea    0x8(%ebx),%eax
mov    %eax,-0x344(%ebp)
jne    804fae8 <__sprintf_chk@plt+0x5e38>
mov    -0x344(%ebp),%eax
xor    %esi,%esi
movl   $0x3,(%esp)
mov    %eax,0x8(%esp)
mov    -0x330(%ebp),%eax
mov    %eax,0x4(%esp)
call   8049c10 <__lxstat64@plt>
mov    %eax,-0x340(%ebp)
mov    -0x340(%ebp),%eax
test   %eax,%eax
je     804ef7c <__sprintf_chk@plt+0x52cc>
movl   $0x5,0x8(%esp)
movl   $0x805b267,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    -0x33c(%ebp),%esi
mov    -0x330(%ebp),%ecx
mov    %eax,%edx
mov    %esi,%eax
movzbl %al,%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
mov    %esi,%eax
xor    %edx,%edx
xor    %ecx,%ecx
test   %al,%al
jne    804f18d <__sprintf_chk@plt+0x54dd>
mov    -0x334(%ebp),%eax
mov    %edx,-0x330(%ebp)
mov    %ecx,-0x32c(%ebp)
mov    %eax,(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    -0x330(%ebp),%edx
addl   $0x1,0x8063e30
mov    -0x32c(%ebp),%ecx
mov    %eax,(%ebx)
jmp    804f18d <__sprintf_chk@plt+0x54dd>
lea    0x0(%esi),%esi
cmp    $0xffffff,%edx
ja     804fc93 <__sprintf_chk@plt+0x5fe3>
shl    $0x8,%edx
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80587a0 <__sprintf_chk@plt+0xeaf0>
mov    0x8063e30,%edx
shll   0x8063e34
mov    %eax,0x8063e38
jmp    804ee99 <__sprintf_chk@plt+0x51e9>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x8063dbd
je     804efa0 <__sprintf_chk@plt+0x52f0>
mov    $0x15,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
je     804efa0 <__sprintf_chk@plt+0x52f0>
mov    0x8(%ebx),%edi
mov    0xc(%ebx),%ecx
mov    0x80633dc,%edx
mov    0x80633d8,%eax
xor    %ecx,%edx
xor    %edi,%eax
or     %eax,%edx
je     804fc41 <__sprintf_chk@plt+0x5f91>
mov    %ecx,-0x338(%ebp)
call   8049a60 <__errno_location@plt>
mov    -0x338(%ebp),%ecx
mov    %edi,0x80633d8
mov    %ecx,0x80633dc
movl   $0x5f,(%eax)
movb   $0x0,0x7c(%ebx)
jmp    804efa0 <__sprintf_chk@plt+0x52f0>
lea    0x8(%ebx),%eax
mov    %eax,-0x344(%ebp)
jmp    804f2e6 <__sprintf_chk@plt+0x5636>
xchg   %ax,%ax
call   8059780 <__sprintf_chk@plt+0xfad0>
test   %eax,%eax
jns    804eff8 <__sprintf_chk@plt+0x5348>
call   8049a60 <__errno_location@plt>
mov    (%eax),%ecx
cmp    $0x16,%ecx
je     804f46a <__sprintf_chk@plt+0x57ba>
cmp    $0x26,%ecx
jne    804f960 <__sprintf_chk@plt+0x5cb0>
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%edx
mov    %eax,0x80633d0
mov    %edx,0x80633d4
cmp    $0x5f,%ecx
movl   $0x80632ea,0x70(%ebx)
je     804f970 <__sprintf_chk@plt+0x5cc0>
cmp    $0x3d,%ecx
je     804f970 <__sprintf_chk@plt+0x5cc0>
movl   $0x0,0x78(%ebx)
mov    -0x330(%ebp),%eax
mov    %eax,(%esp)
call   8056650 <__sprintf_chk@plt+0xc9a0>
mov    %eax,%esi
call   8049a60 <__errno_location@plt>
mov    %esi,0xc(%esp)
movl   $0x805d8dc,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80498e0 <error@plt>
mov    0x18(%ebx),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
jne    804f064 <__sprintf_chk@plt+0x53b4>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063de8,%edx
test   %edx,%edx
je     804f4ff <__sprintf_chk@plt+0x584f>
cmpb   $0x0,0x8063db1
je     804f61c <__sprintf_chk@plt+0x596c>
mov    0x34(%ebx),%eax
mov    %eax,0x4(%esp)
mov    -0x330(%ebp),%eax
mov    %eax,(%esp)
call   80517b0 <__sprintf_chk@plt+0x7b00>
test   %eax,%eax
mov    %eax,%edi
mov    %eax,0x4(%ebx)
je     804fbf2 <__sprintf_chk@plt+0x5f42>
cmpb   $0x2f,(%edi)
je     804fc32 <__sprintf_chk@plt+0x5f82>
mov    -0x330(%ebp),%eax
mov    %eax,(%esp)
call   8051d20 <__sprintf_chk@plt+0x8070>
mov    %edi,(%esp)
test   %eax,%eax
mov    %eax,%esi
je     804fba0 <__sprintf_chk@plt+0x5ef0>
call   8049a10 <strlen@plt>
lea    0x2(%esi,%eax,1),%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    -0x330(%ebp),%ecx
cmpb   $0x2f,-0x1(%ecx,%esi,1)
mov    %ecx,0x4(%esp)
mov    %eax,%edx
setne  %al
movzbl %al,%eax
add    %eax,%esi
mov    %edx,(%esp)
mov    %esi,0x8(%esp)
mov    %edx,-0x330(%ebp)
call   8049a90 <stpncpy@plt>
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
mov    -0x330(%ebp),%edx
mov    %edx,%edi
test   %edi,%edi
je     804f5fb <__sprintf_chk@plt+0x594b>
cmpl   $0x1,0x8063dc0
jbe    804fb88 <__sprintf_chk@plt+0x5ed8>
lea    -0x320(%ebp),%eax
mov    %eax,0x8(%esp)
mov    %edi,0x4(%esp)
movl   $0x3,(%esp)
call   8049c00 <__xstat64@plt>
test   %eax,%eax
jne    804f5fb <__sprintf_chk@plt+0x594b>
cmpb   $0x0,-0x33c(%ebp)
movb   $0x1,0x75(%ebx)
mov    -0x310(%ebp),%eax
je     804f5f8 <__sprintf_chk@plt+0x5948>
mov    0x8063de8,%edx
test   %edx,%edx
je     804f5f8 <__sprintf_chk@plt+0x5948>
mov    %eax,%edx
and    $0xf000,%edx
cmp    $0x4000,%edx
je     804f5fb <__sprintf_chk@plt+0x594b>
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x6c(%ebx)
mov    %edi,(%esp)
call   80496b0 <free@plt>
mov    0x18(%ebx),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
jne    804f064 <__sprintf_chk@plt+0x53b4>
mov    0x8063de8,%edx
movl   $0x6,0x68(%ebx)
jmp    804f07c <__sprintf_chk@plt+0x53cc>
lea    -0x2a8(%ebp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%ebx),%edx
mov    0x60(%ebx),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
cmp    0x8063e10,%eax
jle    804f172 <__sprintf_chk@plt+0x54c2>
mov    %eax,0x8063e10
jmp    804f172 <__sprintf_chk@plt+0x54c2>
lea    0x0(%esi),%esi
mov    %eax,(%esp)
mov    %edx,-0x348(%ebp)
mov    %ecx,-0x344(%ebp)
call   8049a10 <strlen@plt>
mov    %eax,%esi
mov    -0x340(%ebp),%eax
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    -0x348(%ebp),%edx
mov    -0x344(%ebp),%ecx
lea    0x20(%esi,%eax,1),%eax
and    $0xfffffff0,%eax
sub    %eax,%esp
lea    0x2f(%esp),%eax
and    $0xfffffff0,%eax
cmp    $0x2e,%dl
mov    %eax,-0x330(%ebp)
je     804fb40 <__sprintf_chk@plt+0x5e90>
mov    -0x340(%ebp),%ecx
lea    0x0(%esi),%esi
add    $0x1,%eax
add    $0x1,%ecx
mov    %dl,-0x1(%eax)
movzbl (%ecx),%edx
test   %dl,%dl
jne    804f6c0 <__sprintf_chk@plt+0x5a10>
cmp    %ecx,-0x340(%ebp)
mov    %eax,%edx
jae    804f6e6 <__sprintf_chk@plt+0x5a36>
cmpb   $0x2f,-0x1(%ecx)
je     804f6e6 <__sprintf_chk@plt+0x5a36>
add    $0x1,%eax
movb   $0x2f,(%edx)
mov    -0x334(%ebp),%esi
movzbl (%esi),%ecx
test   %cl,%cl
je     804f710 <__sprintf_chk@plt+0x5a60>
mov    -0x334(%ebp),%edx
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
add    $0x1,%edx
mov    %cl,-0x1(%eax)
movzbl (%edx),%ecx
test   %cl,%cl
jne    804f700 <__sprintf_chk@plt+0x5a50>
movb   $0x0,(%eax)
jmp    804ef25 <__sprintf_chk@plt+0x5275>
test   %edx,%edx
mov    %eax,0x8063e04
jne    804f163 <__sprintf_chk@plt+0x54b3>
lea    -0x2bd(%ebp),%eax
mov    %eax,0x8(%esp)
mov    0x1c(%ebx),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
cmp    0x8063e08,%eax
jle    804f757 <__sprintf_chk@plt+0x5aa7>
mov    %eax,0x8063e08
mov    0x18(%ebx),%eax
and    $0xb000,%eax
cmp    $0x2000,%eax
jne    804f9c8 <__sprintf_chk@plt+0x5d18>
mov    0x2c(%ebx),%edx
lea    -0x2a8(%ebp),%ecx
mov    0x28(%ebx),%eax
mov    %ecx,-0x330(%ebp)
mov    %ecx,0x8(%esp)
mov    %edx,%ecx
shrd   $0x8,%edx,%eax
and    $0xfffff000,%ecx
and    $0xfff,%eax
or     %eax,%ecx
mov    %ecx,(%esp)
movl   $0x0,0x4(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
cmp    0x8063df4,%eax
jle    804f7b8 <__sprintf_chk@plt+0x5b08>
mov    %eax,0x8063df4
mov    0x28(%ebx),%eax
mov    0x2c(%ebx),%edx
movl   $0x0,0x4(%esp)
mov    %edx,%ecx
mov    %eax,%edx
mov    -0x330(%ebp),%eax
mov    %edx,-0x330(%ebp)
shrd   $0xc,%ecx,%edx
mov    %ecx,-0x32c(%ebp)
mov    %edx,%ecx
xor    %cl,%cl
mov    %eax,0x8(%esp)
movzbl -0x330(%ebp),%eax
or     %eax,%ecx
mov    %ecx,(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    0x8063df0,%edx
cmp    %edx,%eax
jle    804f812 <__sprintf_chk@plt+0x5b62>
mov    %eax,0x8063df0
mov    %eax,%edx
mov    0x8063df4,%eax
lea    0x2(%edx,%eax,1),%eax
cmp    0x8063dec,%eax
jle    804f163 <__sprintf_chk@plt+0x54b3>
mov    %eax,0x8063dec
jmp    804f163 <__sprintf_chk@plt+0x54b3>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x8063d80
jne    804f1d9 <__sprintf_chk@plt+0x5529>
xor    %esi,%esi
xor    %edi,%edi
jmp    804f172 <__sprintf_chk@plt+0x54c2>
xchg   %ax,%ax
mov    0x8(%ebx),%eax
mov    0xc(%ebx),%ecx
xor    0x80633cc,%ecx
xor    0x80633c8,%eax
mov    %edx,-0x338(%ebp)
or     %eax,%ecx
je     804fb60 <__sprintf_chk@plt+0x5eb0>
call   8049a60 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%edi
mov    -0x344(%ebp),%eax
mov    %eax,0x4(%esp)
mov    -0x330(%ebp),%eax
mov    %eax,(%esp)
call   8051750 <__sprintf_chk@plt+0x7aa0>
mov    -0x338(%ebp),%edx
mov    %eax,%ecx
mov    $0x1,%eax
test   %ecx,%ecx
jg     804f019 <__sprintf_chk@plt+0x5369>
mov    (%edi),%eax
cmp    $0x16,%eax
je     804fc6a <__sprintf_chk@plt+0x5fba>
cmp    $0x26,%eax
je     804fc6a <__sprintf_chk@plt+0x5fba>
cmp    $0x5f,%eax
je     804fc6a <__sprintf_chk@plt+0x5fba>
mov    %ecx,%esi
shr    $0x1f,%esi
mov    %esi,-0x340(%ebp)
jmp    804f017 <__sprintf_chk@plt+0x5367>
nop
cmpb   $0x0,0x8063dbd
je     804f1ca <__sprintf_chk@plt+0x551a>
mov    $0x13,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
mov    $0x12,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
mov    $0x14,%eax
call   804c440 <__sprintf_chk@plt+0x2790>
test   %al,%al
jne    804eefa <__sprintf_chk@plt+0x524a>
jmp    804f1ca <__sprintf_chk@plt+0x551a>
cmpb   $0x0,-0x33c(%ebp)
je     804f948 <__sprintf_chk@plt+0x5c98>
cmpb   $0x0,0x8063da9
jne    804f948 <__sprintf_chk@plt+0x5c98>
movl   $0x9,0x68(%ebx)
mov    0x8063de8,%edx
jmp    804f07c <__sprintf_chk@plt+0x53cc>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x3,0x68(%ebx)
mov    0x8063de8,%edx
jmp    804f07c <__sprintf_chk@plt+0x53cc>
lea    0x0(%esi),%esi
cmp    $0x5f,%ecx
jne    804f47b <__sprintf_chk@plt+0x57cb>
jmp    804f46a <__sprintf_chk@plt+0x57ba>
xchg   %ax,%ax
xor    %edx,%edx
jmp    804f00a <__sprintf_chk@plt+0x535a>
nop
lea    0x1(%ebx),%edi
mov    $0x7f,%dl
test   $0x2,%edi
movb   $0x0,(%ebx)
je     804eebb <__sprintf_chk@plt+0x520b>
lea    0x0(%esi,%eiz,1),%esi
xor    %esi,%esi
add    $0x2,%edi
mov    %si,-0x2(%edi)
sub    $0x2,%edx
jmp    804eebb <__sprintf_chk@plt+0x520b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%ebx),%eax
call   804d9b0 <__sprintf_chk@plt+0x3d00>
cmp    0x8063df8,%eax
jle    804f129 <__sprintf_chk@plt+0x5479>
mov    %eax,0x8063df8
jmp    804f129 <__sprintf_chk@plt+0x5479>
xchg   %ax,%ax
mov    0x80632e0,%eax
mov    0x80632e4,%edx
movl   $0x1,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dc8,%eax
mov    %edx,0x1c(%esp)
mov    %eax,0xc(%esp)
lea    -0x2a8(%ebp),%eax
mov    %eax,0x8(%esp)
mov    0x38(%ebx),%edx
mov    0x34(%ebx),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
cmp    0x8063dec,%eax
jle    804f163 <__sprintf_chk@plt+0x54b3>
jmp    804f827 <__sprintf_chk@plt+0x5b77>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x8063ddd
mov    0x24(%ebx),%edx
je     804fbb0 <__sprintf_chk@plt+0x5f00>
mov    -0x330(%ebp),%eax
mov    %edx,0x10(%esp)
movl   $0x805b23e,0xc(%esp)
movl   $0xb,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    -0x330(%ebp),%ecx
mov    (%ecx),%edx
add    $0x4,%ecx
lea    -0x1010101(%edx),%eax
not    %edx
and    %edx,%eax
and    $0x80808080,%eax
je     804fa78 <__sprintf_chk@plt+0x5dc8>
mov    %eax,%edx
shr    $0x10,%edx
test   $0x8080,%eax
cmove  %edx,%eax
lea    0x2(%ecx),%edx
cmovne %ecx,%edx
add    %al,%al
sbb    $0x3,%edx
sub    -0x330(%ebp),%edx
cmp    %edx,0x8063dfc
jge    804f11c <__sprintf_chk@plt+0x546c>
mov    %edx,0x8063dfc
jmp    804f11c <__sprintf_chk@plt+0x546c>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%ebx),%eax
call   804d9b0 <__sprintf_chk@plt+0x3d00>
cmp    0x8063e00,%eax
jle    804f10f <__sprintf_chk@plt+0x545f>
mov    %eax,0x8063e00
jmp    804f10f <__sprintf_chk@plt+0x545f>
xchg   %ax,%ax
mov    %eax,0x8(%esp)
mov    -0x330(%ebp),%eax
mov    $0x1,%esi
movl   $0x3,(%esp)
mov    %eax,0x4(%esp)
call   8049c00 <__xstat64@plt>
cmp    $0x3,%edi
mov    %eax,-0x340(%ebp)
je     804ef6e <__sprintf_chk@plt+0x52be>
test   %eax,%eax
js     804fb78 <__sprintf_chk@plt+0x5ec8>
mov    0x18(%ebx),%eax
and    $0xf000,%eax
cmp    $0x4000,%eax
setne  %al
test   %al,%al
mov    $0x1,%esi
je     804ef6e <__sprintf_chk@plt+0x52be>
jmp    804f2e6 <__sprintf_chk@plt+0x5636>
lea    0x0(%esi,%eiz,1),%esi
mov    -0x340(%ebp),%esi
cmpb   $0x0,0x1(%esi)
jne    804f6b7 <__sprintf_chk@plt+0x5a07>
mov    -0x330(%ebp),%eax
jmp    804f6ef <__sprintf_chk@plt+0x5a3f>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049a60 <__errno_location@plt>
mov    -0x338(%ebp),%edx
movl   $0x5f,(%eax)
xor    %eax,%eax
jmp    804f019 <__sprintf_chk@plt+0x5369>
call   8049a60 <__errno_location@plt>
cmpl   $0x2,(%eax)
sete   %al
jmp    804fb2a <__sprintf_chk@plt+0x5e7a>
lea    0x0(%esi),%esi
cmpb   $0x0,0x8063db1
je     804f5fb <__sprintf_chk@plt+0x594b>
jmp    804f5a6 <__sprintf_chk@plt+0x58f6>
lea    0x0(%esi),%esi
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    %eax,%edi
jmp    804f595 <__sprintf_chk@plt+0x58e5>
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,(%esp)
mov    %edx,-0x338(%ebp)
call   80547f0 <__sprintf_chk@plt+0xab40>
mov    -0x338(%ebp),%edx
test   %eax,%eax
je     804fa48 <__sprintf_chk@plt+0x5d98>
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8055100 <__sprintf_chk@plt+0xb450>
xor    %edx,%edx
test   %eax,%eax
cmovns %eax,%edx
jmp    804faac <__sprintf_chk@plt+0x5dfc>
mov    $0x5,%edi
jmp    804ef00 <__sprintf_chk@plt+0x5250>
movl   $0x5,0x8(%esp)
movl   $0x805b278,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    -0x330(%ebp),%ecx
mov    %eax,%edx
movzbl -0x33c(%ebp),%eax
call   804cfe0 <__sprintf_chk@plt+0x3330>
mov    0x4(%ebx),%edi
test   %edi,%edi
jne    804f521 <__sprintf_chk@plt+0x5871>
jmp    804f5fb <__sprintf_chk@plt+0x594b>
mov    %edi,(%esp)
call   8058970 <__sprintf_chk@plt+0xecc0>
mov    %eax,%edi
jmp    804f595 <__sprintf_chk@plt+0x58e5>
call   8049a60 <__errno_location@plt>
movl   $0x5f,(%eax)
jmp    804f42f <__sprintf_chk@plt+0x577f>
call   8049a60 <__errno_location@plt>
xor    %edx,%edx
movl   $0x5f,(%eax)
movl   $0x80632ea,0x70(%ebx)
jmp    804f00a <__sprintf_chk@plt+0x535a>
mov    0x8(%ebx),%esi
xor    %eax,%eax
mov    0xc(%ebx),%edi
mov    %esi,0x80633c8
mov    %ecx,%esi
shr    $0x1f,%esi
mov    %edi,0x80633cc
mov    %esi,-0x340(%ebp)
jmp    804f019 <__sprintf_chk@plt+0x5369>
call   8049790 <__stack_chk_fail@plt>
call   80589a0 <__sprintf_chk@plt+0xecf0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804fd38 <__sprintf_chk@plt+0x6088>
test   %al,%al
jne    804fce0 <__sprintf_chk@plt+0x6030>
test   %dl,%dl
mov    $0x1,%eax
je     804fce0 <__sprintf_chk@plt+0x6030>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x38(%edi),%edx
mov    0x38(%esi),%eax
mov    0x34(%edi),%ebx
mov    0x34(%esi),%ecx
cmp    %eax,%edx
jl     804fd08 <__sprintf_chk@plt+0x6058>
jle    804fd00 <__sprintf_chk@plt+0x6050>
mov    $0x1,%eax
jmp    804fcdc <__sprintf_chk@plt+0x602c>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,%ebx
jae    804fd18 <__sprintf_chk@plt+0x6068>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %eax,%edx
jge    804fd30 <__sprintf_chk@plt+0x6080>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
cmp    %ecx,%ebx
ja     804fcf2 <__sprintf_chk@plt+0x6042>
jmp    804fd1c <__sprintf_chk@plt+0x606c>
xchg   %ax,%ax
test   %dl,%dl
lea    0x0(%esi),%esi
jne    804fccf <__sprintf_chk@plt+0x601f>
jmp    804fd08 <__sprintf_chk@plt+0x6058>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    804fde8 <__sprintf_chk@plt+0x6138>
test   %al,%al
jne    804fd90 <__sprintf_chk@plt+0x60e0>
test   %dl,%dl
mov    $0x1,%eax
je     804fd90 <__sprintf_chk@plt+0x60e0>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x38(%edi),%edx
mov    0x38(%esi),%eax
mov    0x34(%edi),%ebx
mov    0x34(%esi),%ecx
cmp    %eax,%edx
jl     804fdb8 <__sprintf_chk@plt+0x6108>
jle    804fdb0 <__sprintf_chk@plt+0x6100>
mov    $0x1,%eax
jmp    804fd8c <__sprintf_chk@plt+0x60dc>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,%ebx
jae    804fdc8 <__sprintf_chk@plt+0x6118>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %eax,%edx
jge    804fde0 <__sprintf_chk@plt+0x6130>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
cmp    %ecx,%ebx
ja     804fda2 <__sprintf_chk@plt+0x60f2>
jmp    804fdcc <__sprintf_chk@plt+0x611c>
xchg   %ax,%ax
test   %dl,%dl
lea    0x0(%esi),%esi
jne    804fd7f <__sprintf_chk@plt+0x60cf>
jmp    804fdb8 <__sprintf_chk@plt+0x6108>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
mov    %edx,%esi
push   %ebx
mov    %eax,%ebx
sub    $0x2b0,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2ac(%esp)
xor    %eax,%eax
call   804e1c0 <__sprintf_chk@plt+0x4510>
cmpb   $0x0,0x8063db0
jne    804fef8 <__sprintf_chk@plt+0x6248>
cmpb   $0x0,0x8063ddc
je     804fe72 <__sprintf_chk@plt+0x61c2>
cmpb   $0x0,0x74(%ebx)
mov    $0x805b248,%eax
jne    804ff58 <__sprintf_chk@plt+0x62a8>
xor    %edx,%edx
cmpl   $0x4,0x8063de8
cmovne 0x8063e0c,%edx
mov    %eax,0xc(%esp)
movl   $0x805b25d,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x1,(%esp)
call   8049ac0 <__printf_chk@plt>
cmpb   $0x0,0x8063e15
je     804feaa <__sprintf_chk@plt+0x61fa>
mov    0x70(%ebx),%edx
xor    %eax,%eax
cmpl   $0x4,0x8063de8
cmovne 0x8063e04,%eax
movl   $0x805b25d,0x4(%esp)
mov    %edx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,(%esp)
call   8049ac0 <__printf_chk@plt>
mov    %esi,(%esp)
xor    %ecx,%ecx
xor    %edx,%edx
mov    %ebx,%eax
call   804dd30 <__sprintf_chk@plt+0x4080>
mov    %eax,%esi
mov    0x8063dc0,%eax
test   %eax,%eax
je     804fed7 <__sprintf_chk@plt+0x6227>
mov    0x68(%ebx),%ecx
mov    0x18(%ebx),%edx
movzbl 0x74(%ebx),%eax
call   804d560 <__sprintf_chk@plt+0x38b0>
movzbl %al,%eax
add    %eax,%esi
mov    0x2ac(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %esi,%eax
jne    804ffa3 <__sprintf_chk@plt+0x62f3>
add    $0x2b0,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
cmpb   $0x0,0x74(%ebx)
mov    $0x805b248,%eax
je     804ff23 <__sprintf_chk@plt+0x6273>
mov    0x64(%ebx),%edx
mov    0x60(%ebx),%ecx
mov    %edx,%edi
or     %ecx,%edi
je     804ff23 <__sprintf_chk@plt+0x6273>
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    %ecx,(%esp)
mov    %edx,0x4(%esp)
call   8054a50 <__sprintf_chk@plt+0xada0>
xor    %edx,%edx
cmpl   $0x4,0x8063de8
cmovne 0x8063e10,%edx
mov    %eax,0xc(%esp)
movl   $0x805b25d,0x4(%esp)
mov    %edx,0x8(%esp)
movl   $0x1,(%esp)
call   8049ac0 <__printf_chk@plt>
jmp    804fe2e <__sprintf_chk@plt+0x617e>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063dd0,%eax
mov    0x8063dd4,%edx
movl   $0x200,0x10(%esp)
movl   $0x0,0x14(%esp)
mov    %eax,0x18(%esp)
mov    0x8063dd8,%eax
mov    %edx,0x1c(%esp)
mov    0x44(%ebx),%edx
mov    %eax,0xc(%esp)
lea    0x20(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x40(%ebx),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   8053630 <__sprintf_chk@plt+0x9980>
jmp    804fe46 <__sprintf_chk@plt+0x6196>
call   8049790 <__stack_chk_fail@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x4,0x8063de8
ja     804fff1 <__sprintf_chk@plt+0x6341>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x8063de8,%eax
jmp    *0x805a740(,%eax,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8050345 <__sprintf_chk@plt+0x6695>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
repz ret
xor    %eax,%eax
xor    %edi,%edi
call   804d730 <__sprintf_chk@plt+0x3a80>
lea    (%eax,%eax,2),%edx
mov    %eax,0x14(%esp)
mov    0x8063cd4,%eax
lea    -0xc(%eax,%edx,4),%eax
mov    %eax,%esi
mov    %eax,0x18(%esp)
mov    0x8063e2c,%eax
mov    (%eax),%ebx
mov    %ebx,%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
xor    %edx,%edx
mov    %eax,0x1c(%esp)
mov    0x8(%esi),%eax
mov    (%eax),%ebp
mov    %ebx,%eax
mov    $0x1,%ebx
call   804fe00 <__sprintf_chk@plt+0x6150>
mov    0x1c(%esp),%ecx
cmpl   $0x1,0x8063e30
ja     8050097 <__sprintf_chk@plt+0x63e7>
jmp    804ffd0 <__sprintf_chk@plt+0x6320>
xchg   %ax,%ax
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    805032e <__sprintf_chk@plt+0x667e>
lea    0x1(%edx),%ecx
xor    %edi,%edi
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
mov    0x8063e2c,%eax
mov    %edi,%edx
mov    (%eax,%ebx,4),%ebp
add    $0x1,%ebx
mov    %ebp,%eax
call   804fe00 <__sprintf_chk@plt+0x6150>
mov    %ebp,%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
cmp    0x8063e30,%ebx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    0x8(%eax),%eax
mov    (%eax,%esi,4),%ebp
jae    804ffd0 <__sprintf_chk@plt+0x6320>
xor    %edx,%edx
mov    %ebx,%eax
divl   0x14(%esp)
test   %edx,%edx
mov    %edx,%esi
je     8050048 <__sprintf_chk@plt+0x6398>
add    %edi,%ebp
lea    (%ecx,%edi,1),%eax
mov    %ebp,%edx
call   804c990 <__sprintf_chk@plt+0x2ce0>
mov    %ebp,%edi
jmp    8050064 <__sprintf_chk@plt+0x63b4>
mov    0x8063e30,%ecx
test   %ecx,%ecx
je     804ffd0 <__sprintf_chk@plt+0x6320>
mov    0x8063e2c,%eax
xor    %ebx,%ebx
xor    %ebp,%ebp
mov    (%eax),%edi
mov    %edi,%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
mov    %eax,%esi
nop
mov    %ebp,%edx
mov    %edi,%eax
call   804fe00 <__sprintf_chk@plt+0x6150>
add    $0x1,%ebx
mov    %esi,%ebp
cmp    0x8063e30,%ebx
jae    804ffd0 <__sprintf_chk@plt+0x6320>
mov    0x8063e2c,%eax
mov    (%eax,%ebx,4),%edi
mov    %edi,%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
test   %ebx,%ebx
je     8050310 <__sprintf_chk@plt+0x6660>
lea    0x2(%esi),%ebp
lea    (%eax,%ebp,1),%esi
cmp    0x8063d84,%esi
jae    8050318 <__sprintf_chk@plt+0x6668>
movl   $0x20,0x18(%esp)
movb   $0x20,0x14(%esp)
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    80503ab <__sprintf_chk@plt+0x66fb>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0x2c,(%edx)
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8050396 <__sprintf_chk@plt+0x66e6>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movzbl 0x14(%esp),%eax
mov    %al,(%edx)
jmp    80500d8 <__sprintf_chk@plt+0x6428>
mov    0x8063e30,%eax
xor    %ebx,%ebx
test   %eax,%eax
je     804ffea <__sprintf_chk@plt+0x633a>
lea    0x0(%esi,%eiz,1),%esi
call   804e1c0 <__sprintf_chk@plt+0x4510>
mov    0x8063e2c,%eax
mov    (%eax,%ebx,4),%eax
call   804e300 <__sprintf_chk@plt+0x4650>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8050381 <__sprintf_chk@plt+0x66d1>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
addl   $0x1,0x8063ccc
add    $0x1,%ebx
cmp    %ebx,0x8063e30
ja     8050178 <__sprintf_chk@plt+0x64c8>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804fff1 <__sprintf_chk@plt+0x6341>
mov    0x8063e30,%edx
xor    %ebx,%ebx
test   %edx,%edx
je     804ffea <__sprintf_chk@plt+0x633a>
lea    0x0(%esi),%esi
mov    0x8063e2c,%eax
xor    %edx,%edx
mov    (%eax,%ebx,4),%eax
call   804fe00 <__sprintf_chk@plt+0x6150>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    805036c <__sprintf_chk@plt+0x66bc>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x1,%ebx
cmp    %ebx,0x8063e30
ja     80501d8 <__sprintf_chk@plt+0x6528>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804fff1 <__sprintf_chk@plt+0x6341>
mov    $0x1,%eax
call   804d730 <__sprintf_chk@plt+0x3a80>
lea    (%eax,%eax,2),%edx
mov    %eax,%ecx
mov    0x8063cd4,%eax
lea    -0xc(%eax,%edx,4),%eax
xor    %edx,%edx
mov    %eax,0x24(%esp)
mov    0x8063e30,%eax
div    %ecx
test   %edx,%edx
setne  %dl
movzbl %dl,%edx
add    %eax,%edx
mov    %edx,0x20(%esp)
je     804ffea <__sprintf_chk@plt+0x633a>
lea    0x0(,%edx,4),%eax
mov    %eax,0x28(%esp)
movl   $0x0,0x2c(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%eax
xor    %esi,%esi
xor    %ebx,%ebx
lea    0x0(,%eax,4),%edi
mov    %edi,0x14(%esp)
mov    %eax,%edi
jmp    8050295 <__sprintf_chk@plt+0x65e5>
nop
mov    0x1c(%esp),%ebp
mov    0x18(%esp),%eax
add    %ebx,%ebp
add    %ebx,%eax
mov    %ebp,%edx
call   804c990 <__sprintf_chk@plt+0x2ce0>
mov    %ebp,%ebx
mov    0x8063e2c,%eax
mov    0x14(%esp),%ecx
mov    (%eax,%ecx,1),%ebp
mov    %ebp,%eax
call   804d5b0 <__sprintf_chk@plt+0x3900>
mov    0x24(%esp),%edx
mov    %eax,0x18(%esp)
mov    0x8(%edx),%eax
mov    %ebx,%edx
mov    (%eax,%esi,1),%ecx
mov    %ebp,%eax
add    $0x4,%esi
mov    %ecx,0x1c(%esp)
call   804fe00 <__sprintf_chk@plt+0x6150>
mov    0x28(%esp),%edx
add    0x20(%esp),%edi
add    %edx,0x14(%esp)
cmp    0x8063e30,%edi
jb     8050280 <__sprintf_chk@plt+0x65d0>
mov    0x80633a0,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    805035a <__sprintf_chk@plt+0x66aa>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
addl   $0x1,0x2c(%esp)
mov    0x20(%esp),%eax
cmp    %eax,0x2c(%esp)
jne    8050268 <__sprintf_chk@plt+0x65b8>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    804fff1 <__sprintf_chk@plt+0x6341>
nop
add    %eax,%esi
jmp    80500d8 <__sprintf_chk@plt+0x6428>
nop
movl   $0xa,0x18(%esp)
xor    %ebp,%ebp
mov    %eax,%esi
movb   $0xa,0x14(%esp)
jmp    8050128 <__sprintf_chk@plt+0x6478>
movl   $0xa,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    8050064 <__sprintf_chk@plt+0x63b4>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    804ffea <__sprintf_chk@plt+0x633a>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    80502f0 <__sprintf_chk@plt+0x6640>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    8050201 <__sprintf_chk@plt+0x6551>
movl   $0xa,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    80501a4 <__sprintf_chk@plt+0x64f4>
mov    0x18(%esp),%ecx
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   8049b40 <__overflow@plt>
jmp    80500d8 <__sprintf_chk@plt+0x6428>
movl   $0x2c,0x4(%esp)
mov    %eax,(%esp)
call   8049b40 <__overflow@plt>
jmp    8050142 <__sprintf_chk@plt+0x6492>
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050428 <__sprintf_chk@plt+0x6778>
test   %al,%al
jne    8050400 <__sprintf_chk@plt+0x6750>
test   %dl,%dl
mov    $0x1,%eax
je     8050400 <__sprintf_chk@plt+0x6750>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x58(%edi),%ecx
cmp    %ecx,0x58(%esi)
mov    0x5c(%esi),%eax
mov    0x5c(%edi),%edx
jg     8050430 <__sprintf_chk@plt+0x6780>
jl     8050440 <__sprintf_chk@plt+0x6790>
sub    %eax,%edx
jne    8050447 <__sprintf_chk@plt+0x6797>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    80503ef <__sprintf_chk@plt+0x673f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    80503fc <__sprintf_chk@plt+0x674c>
mov    %edx,%eax
jmp    80503fc <__sprintf_chk@plt+0x674c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    80504b8 <__sprintf_chk@plt+0x6808>
test   %al,%al
jne    8050490 <__sprintf_chk@plt+0x67e0>
test   %dl,%dl
mov    $0x1,%eax
je     8050490 <__sprintf_chk@plt+0x67e0>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x58(%edi),%ecx
cmp    %ecx,0x58(%esi)
mov    0x5c(%esi),%eax
mov    0x5c(%edi),%edx
jg     80504c0 <__sprintf_chk@plt+0x6810>
jl     80504d0 <__sprintf_chk@plt+0x6820>
sub    %eax,%edx
jne    80504d7 <__sprintf_chk@plt+0x6827>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    805047f <__sprintf_chk@plt+0x67cf>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    805048c <__sprintf_chk@plt+0x67dc>
mov    %edx,%eax
jmp    805048c <__sprintf_chk@plt+0x67dc>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050548 <__sprintf_chk@plt+0x6898>
test   %al,%al
jne    8050520 <__sprintf_chk@plt+0x6870>
test   %dl,%dl
mov    $0x1,%eax
je     8050520 <__sprintf_chk@plt+0x6870>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x48(%edi),%ecx
cmp    %ecx,0x48(%esi)
mov    0x4c(%esi),%eax
mov    0x4c(%edi),%edx
jg     8050550 <__sprintf_chk@plt+0x68a0>
jl     8050560 <__sprintf_chk@plt+0x68b0>
sub    %eax,%edx
jne    8050567 <__sprintf_chk@plt+0x68b7>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    805050f <__sprintf_chk@plt+0x685f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    805051c <__sprintf_chk@plt+0x686c>
mov    %edx,%eax
jmp    805051c <__sprintf_chk@plt+0x686c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    80505d8 <__sprintf_chk@plt+0x6928>
test   %al,%al
jne    80505b0 <__sprintf_chk@plt+0x6900>
test   %dl,%dl
mov    $0x1,%eax
je     80505b0 <__sprintf_chk@plt+0x6900>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x48(%edi),%ecx
cmp    %ecx,0x48(%esi)
mov    0x4c(%esi),%eax
mov    0x4c(%edi),%edx
jg     80505e0 <__sprintf_chk@plt+0x6930>
jl     80505f0 <__sprintf_chk@plt+0x6940>
sub    %eax,%edx
jne    80505f7 <__sprintf_chk@plt+0x6947>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    805059f <__sprintf_chk@plt+0x68ef>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    80505ac <__sprintf_chk@plt+0x68fc>
mov    %edx,%eax
jmp    80505ac <__sprintf_chk@plt+0x68fc>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050668 <__sprintf_chk@plt+0x69b8>
test   %al,%al
jne    8050640 <__sprintf_chk@plt+0x6990>
test   %dl,%dl
mov    $0x1,%eax
je     8050640 <__sprintf_chk@plt+0x6990>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x50(%edi),%ecx
cmp    %ecx,0x50(%esi)
mov    0x54(%esi),%eax
mov    0x54(%edi),%edx
jg     8050670 <__sprintf_chk@plt+0x69c0>
jl     8050680 <__sprintf_chk@plt+0x69d0>
sub    %eax,%edx
jne    8050687 <__sprintf_chk@plt+0x69d7>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    805062f <__sprintf_chk@plt+0x697f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    805063c <__sprintf_chk@plt+0x698c>
mov    %edx,%eax
jmp    805063c <__sprintf_chk@plt+0x698c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    80506f8 <__sprintf_chk@plt+0x6a48>
test   %al,%al
jne    80506d0 <__sprintf_chk@plt+0x6a20>
test   %dl,%dl
mov    $0x1,%eax
je     80506d0 <__sprintf_chk@plt+0x6a20>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x50(%edi),%ecx
cmp    %ecx,0x50(%esi)
mov    0x54(%esi),%eax
mov    0x54(%edi),%edx
jg     8050700 <__sprintf_chk@plt+0x6a50>
jl     8050710 <__sprintf_chk@plt+0x6a60>
sub    %eax,%edx
jne    8050717 <__sprintf_chk@plt+0x6a67>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
test   %dl,%dl
jne    80506bf <__sprintf_chk@plt+0x6a0f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    80506cc <__sprintf_chk@plt+0x6a1c>
mov    %edx,%eax
jmp    80506cc <__sprintf_chk@plt+0x6a1c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x38(%eax),%ecx
mov    0x38(%edx),%ebx
mov    0x34(%edx),%edi
mov    0x34(%eax),%esi
cmp    %ecx,%ebx
jl     805074c <__sprintf_chk@plt+0x6a9c>
jle    8050748 <__sprintf_chk@plt+0x6a98>
pop    %ebx
mov    $0x1,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
cmp    %esi,%edi
jae    8050758 <__sprintf_chk@plt+0x6aa8>
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
cmp    %ecx,%ebx
jge    8050770 <__sprintf_chk@plt+0x6ac0>
mov    (%edx),%edx
mov    %edx,0x14(%esp)
mov    (%eax),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
cmp    %esi,%edi
ja     805073d <__sprintf_chk@plt+0x6a8d>
jmp    805075c <__sprintf_chk@plt+0x6aac>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0x14(%esp),%eax
mov    0x38(%edx),%ebx
mov    0x38(%eax),%ecx
mov    0x34(%edx),%edi
mov    0x34(%eax),%esi
cmp    %ecx,%ebx
jl     80507ac <__sprintf_chk@plt+0x6afc>
jle    80507a8 <__sprintf_chk@plt+0x6af8>
pop    %ebx
mov    $0x1,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
cmp    %esi,%edi
jae    80507b8 <__sprintf_chk@plt+0x6b08>
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
cmp    %ecx,%ebx
jge    80507d0 <__sprintf_chk@plt+0x6b20>
mov    (%edx),%edx
mov    %edx,0x14(%esp)
mov    (%eax),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
cmp    %esi,%edi
ja     805079d <__sprintf_chk@plt+0x6aed>
jmp    80507bc <__sprintf_chk@plt+0x6b0c>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x50(%edx),%esi
cmp    %esi,0x50(%eax)
mov    0x54(%eax),%ecx
mov    0x54(%edx),%ebx
jg     8050818 <__sprintf_chk@plt+0x6b68>
jl     8050820 <__sprintf_chk@plt+0x6b70>
sub    %ecx,%ebx
jne    8050828 <__sprintf_chk@plt+0x6b78>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    805081d <__sprintf_chk@plt+0x6b6d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x58(%edx),%esi
cmp    %esi,0x58(%eax)
mov    0x5c(%eax),%ecx
mov    0x5c(%edx),%ebx
jg     8050868 <__sprintf_chk@plt+0x6bb8>
jl     8050870 <__sprintf_chk@plt+0x6bc0>
sub    %ecx,%ebx
jne    8050878 <__sprintf_chk@plt+0x6bc8>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    805086d <__sprintf_chk@plt+0x6bbd>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x58(%edx),%esi
cmp    %esi,0x58(%eax)
mov    0x5c(%eax),%ecx
mov    0x5c(%edx),%ebx
jg     80508b8 <__sprintf_chk@plt+0x6c08>
jl     80508c0 <__sprintf_chk@plt+0x6c10>
sub    %ecx,%ebx
jne    80508c8 <__sprintf_chk@plt+0x6c18>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    80508bd <__sprintf_chk@plt+0x6c0d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x50(%edx),%esi
cmp    %esi,0x50(%eax)
mov    0x54(%eax),%ecx
mov    0x54(%edx),%ebx
jg     8050908 <__sprintf_chk@plt+0x6c58>
jl     8050910 <__sprintf_chk@plt+0x6c60>
sub    %ecx,%ebx
jne    8050918 <__sprintf_chk@plt+0x6c68>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    805090d <__sprintf_chk@plt+0x6c5d>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%edx
mov    0x10(%esp),%eax
mov    0x48(%edx),%esi
cmp    %esi,0x48(%eax)
mov    0x4c(%eax),%ecx
mov    0x4c(%edx),%ebx
jg     8050958 <__sprintf_chk@plt+0x6ca8>
jl     8050960 <__sprintf_chk@plt+0x6cb0>
sub    %ecx,%ebx
jne    8050968 <__sprintf_chk@plt+0x6cb8>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    805095d <__sprintf_chk@plt+0x6cad>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x10(%esp),%edx
mov    0xc(%esp),%eax
mov    0x48(%edx),%esi
cmp    %esi,0x48(%eax)
mov    0x4c(%eax),%ecx
mov    0x4c(%edx),%ebx
jg     80509a8 <__sprintf_chk@plt+0x6cf8>
jl     80509b0 <__sprintf_chk@plt+0x6d00>
sub    %ecx,%ebx
jne    80509b8 <__sprintf_chk@plt+0x6d08>
mov    (%edx),%edx
mov    %edx,0x10(%esp)
mov    (%eax),%eax
mov    %eax,0xc(%esp)
pop    %ebx
pop    %esi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
pop    %ebx
pop    %esi
ret
mov    $0x1,%eax
pop    %ebx
pop    %esi
ret
mov    %ebx,%eax
jmp    80509ad <__sprintf_chk@plt+0x6cfd>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%edi
movl   $0x2e,0x4(%esp)
mov    0x20(%esp),%esi
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
movl   $0x2e,0x4(%esp)
mov    %eax,%ebx
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804c790 <__sprintf_chk@plt+0x2ae0>
test   %eax,%eax
je     8050a20 <__sprintf_chk@plt+0x6d70>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,0x24(%esp)
mov    (%edi),%eax
mov    %eax,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
movl   $0x2e,0x4(%esp)
mov    0x24(%esp),%esi
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
movl   $0x2e,0x4(%esp)
mov    %eax,%ebx
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804c790 <__sprintf_chk@plt+0x2ae0>
test   %eax,%eax
je     8050aa0 <__sprintf_chk@plt+0x6df0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,0x24(%esp)
mov    (%edi),%eax
mov    %eax,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050b58 <__sprintf_chk@plt+0x6ea8>
test   %al,%al
jne    8050b00 <__sprintf_chk@plt+0x6e50>
test   %dl,%dl
mov    $0x1,%eax
je     8050b00 <__sprintf_chk@plt+0x6e50>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x38(%edi),%edx
mov    0x38(%esi),%eax
mov    0x34(%edi),%ebx
mov    0x34(%esi),%ecx
cmp    %eax,%edx
jl     8050b28 <__sprintf_chk@plt+0x6e78>
jle    8050b20 <__sprintf_chk@plt+0x6e70>
mov    $0x1,%eax
jmp    8050afc <__sprintf_chk@plt+0x6e4c>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,%ebx
jae    8050b38 <__sprintf_chk@plt+0x6e88>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    %eax,%edx
jge    8050b50 <__sprintf_chk@plt+0x6ea0>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
cmp    %ecx,%ebx
ja     8050b12 <__sprintf_chk@plt+0x6e62>
jmp    8050b3c <__sprintf_chk@plt+0x6e8c>
xchg   %ax,%ax
test   %dl,%dl
lea    0x0(%esi),%esi
jne    8050aef <__sprintf_chk@plt+0x6e3f>
jmp    8050b28 <__sprintf_chk@plt+0x6e78>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050c18 <__sprintf_chk@plt+0x6f68>
test   %al,%al
jne    8050bb8 <__sprintf_chk@plt+0x6f08>
test   %dl,%dl
mov    $0x1,%eax
je     8050bb8 <__sprintf_chk@plt+0x6f08>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
movl   $0x2e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
movl   $0x2e,0x4(%esp)
mov    %eax,%ebx
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804c790 <__sprintf_chk@plt+0x2ae0>
test   %eax,%eax
jne    8050baf <__sprintf_chk@plt+0x6eff>
mov    (%edi),%eax
mov    %eax,0x24(%esp)
mov    (%esi),%eax
mov    %eax,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    8050ba2 <__sprintf_chk@plt+0x6ef2>
mov    $0xffffffff,%eax
jmp    8050baf <__sprintf_chk@plt+0x6eff>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x24(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050cd8 <__sprintf_chk@plt+0x7028>
test   %al,%al
jne    8050c78 <__sprintf_chk@plt+0x6fc8>
test   %dl,%dl
mov    $0x1,%eax
je     8050c78 <__sprintf_chk@plt+0x6fc8>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
movl   $0x2e,0x4(%esp)
mov    (%esi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
movl   $0x2e,0x4(%esp)
mov    %eax,%ebx
mov    (%edi),%eax
mov    %eax,(%esp)
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   804c790 <__sprintf_chk@plt+0x2ae0>
test   %eax,%eax
jne    8050c6f <__sprintf_chk@plt+0x6fbf>
mov    (%edi),%eax
mov    %eax,0x24(%esp)
mov    (%esi),%eax
mov    %eax,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    804c790 <__sprintf_chk@plt+0x2ae0>
lea    0x0(%esi,%eiz,1),%esi
test   %dl,%dl
jne    8050c62 <__sprintf_chk@plt+0x6fb2>
mov    $0xffffffff,%eax
jmp    8050c6f <__sprintf_chk@plt+0x6fbf>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050d58 <__sprintf_chk@plt+0x70a8>
test   %al,%al
jne    8050d30 <__sprintf_chk@plt+0x7080>
test   %dl,%dl
mov    $0x1,%eax
je     8050d30 <__sprintf_chk@plt+0x7080>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x50(%edi),%ecx
cmp    %ecx,0x50(%esi)
mov    0x54(%esi),%eax
mov    0x54(%edi),%edx
jg     8050d60 <__sprintf_chk@plt+0x70b0>
jl     8050d70 <__sprintf_chk@plt+0x70c0>
sub    %eax,%edx
jne    8050d77 <__sprintf_chk@plt+0x70c7>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    8050d1f <__sprintf_chk@plt+0x706f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    8050d2c <__sprintf_chk@plt+0x707c>
mov    %edx,%eax
jmp    8050d2c <__sprintf_chk@plt+0x707c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050de8 <__sprintf_chk@plt+0x7138>
test   %al,%al
jne    8050dc0 <__sprintf_chk@plt+0x7110>
test   %dl,%dl
mov    $0x1,%eax
je     8050dc0 <__sprintf_chk@plt+0x7110>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x48(%edi),%ecx
cmp    %ecx,0x48(%esi)
mov    0x4c(%esi),%eax
mov    0x4c(%edi),%edx
jg     8050df0 <__sprintf_chk@plt+0x7140>
jl     8050e00 <__sprintf_chk@plt+0x7150>
sub    %eax,%edx
jne    8050e07 <__sprintf_chk@plt+0x7157>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    8050daf <__sprintf_chk@plt+0x70ff>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    8050dbc <__sprintf_chk@plt+0x710c>
mov    %edx,%eax
jmp    8050dbc <__sprintf_chk@plt+0x710c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x68(%esi),%eax
mov    0x68(%edi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8050e78 <__sprintf_chk@plt+0x71c8>
test   %al,%al
jne    8050e50 <__sprintf_chk@plt+0x71a0>
test   %dl,%dl
mov    $0x1,%eax
je     8050e50 <__sprintf_chk@plt+0x71a0>
pop    %ebx
pop    %esi
pop    %edi
ret
mov    0x58(%edi),%ecx
cmp    %ecx,0x58(%esi)
mov    0x5c(%esi),%eax
mov    0x5c(%edi),%edx
jg     8050e80 <__sprintf_chk@plt+0x71d0>
jl     8050e90 <__sprintf_chk@plt+0x71e0>
sub    %eax,%edx
jne    8050e97 <__sprintf_chk@plt+0x71e7>
mov    (%edi),%eax
mov    %eax,0x14(%esp)
mov    (%esi),%eax
mov    %eax,0x10(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    8050e3f <__sprintf_chk@plt+0x718f>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
mov    $0xffffffff,%eax
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
jmp    8050e4c <__sprintf_chk@plt+0x719c>
mov    %edx,%eax
jmp    8050e4c <__sprintf_chk@plt+0x719c>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x24(%esp),%eax
mov    0x20(%esp),%edi
mov    (%eax),%esi
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
call   8049b30 <strrchr@plt>
mov    (%edi),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,%ebx
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
je     8050f00 <__sprintf_chk@plt+0x7250>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %edi,0x24(%esp)
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%eax
mov    0x24(%esp),%edi
mov    (%eax),%esi
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
call   8049b30 <strrchr@plt>
mov    (%edi),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,%ebx
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
je     8050f80 <__sprintf_chk@plt+0x72d0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %edi,0x24(%esp)
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    0x68(%edi),%eax
mov    0x68(%esi),%ebx
cmp    $0x9,%eax
sete   %cl
cmp    $0x3,%eax
sete   %al
cmp    $0x9,%ebx
sete   %dl
cmp    $0x3,%ebx
sete   %bl
or     %ebx,%edx
or     %cl,%al
jne    8051040 <__sprintf_chk@plt+0x7390>
test   %al,%al
jne    8050fe8 <__sprintf_chk@plt+0x7338>
test   %dl,%dl
mov    $0x1,%eax
je     8050fe8 <__sprintf_chk@plt+0x7338>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    (%edi),%edi
movl   $0x2e,0x4(%esp)
mov    %edi,(%esp)
call   8049b30 <strrchr@plt>
mov    (%esi),%esi
movl   $0x2e,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,%ebx
call   8049b30 <strrchr@plt>
mov    $0x805dfe5,%edx
test   %eax,%eax
cmove  %edx,%eax
test   %ebx,%ebx
cmove  %edx,%ebx
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    8050fdf <__sprintf_chk@plt+0x732f>
mov    %esi,0x24(%esp)
mov    %edi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049600 <strcmp@plt>
test   %dl,%dl
jne    8050fd2 <__sprintf_chk@plt+0x7322>
mov    $0xffffffff,%eax
jmp    8050fdf <__sprintf_chk@plt+0x732f>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
sub    $0x14,%esp
mov    0x8063e58,%esi
mov    0x20(%esp),%ebx
movl   $0x5,0x8(%esp)
test   %ebx,%ebx
je     80510a4 <__sprintf_chk@plt+0x73f4>
movl   $0x805b840,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0xc(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x8063344,%eax
mov    %eax,(%esp)
call   8049ba0 <__fprintf_chk@plt>
mov    %ebx,(%esp)
call   8049970 <exit@plt>
movl   $0x805b868,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805b88c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805b91c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805b968,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805ba78,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805bcc0,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805be6c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c010,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c050,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c13c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c24c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c3f0,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c584,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c6ec,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805c860,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805ca14,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805cadc,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805cca8,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805cea4,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805cf34,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d098,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d1f4,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d224,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d25c,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d2f8,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d418,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    0x8063e58,%eax
mov    %eax,(%esp)
call   8051de0 <__sprintf_chk@plt+0x8130>
movl   $0x5,0x8(%esp)
movl   $0x805b29f,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049760 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x805b2b6,0xc(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805b2cc,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x805d4b0,0xc(%esp)
movl   $0x805b2e0,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
mov    0x80633a0,%esi
movl   $0x5,0x8(%esp)
movl   $0x805d4d8,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
movl   $0x0,0x4(%esp)
movl   $0x5,(%esp)
call   8049b20 <setlocale@plt>
test   %eax,%eax
je     805162f <__sprintf_chk@plt+0x797f>
movl   $0x3,0x8(%esp)
movl   $0x805b2ee,0x4(%esp)
mov    %eax,(%esp)
call   8049bd0 <strncmp@plt>
test   %eax,%eax
jne    8051673 <__sprintf_chk@plt+0x79c3>
mov    0x8063e58,%eax
mov    %eax,(%esp)
call   8051de0 <__sprintf_chk@plt+0x8130>
movl   $0x5,0x8(%esp)
movl   $0x805d560,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049760 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
jmp    805109c <__sprintf_chk@plt+0x73ec>
mov    0x8063e58,%eax
mov    %eax,(%esp)
call   8051de0 <__sprintf_chk@plt+0x8130>
movl   $0x5,0x8(%esp)
movl   $0x805d518,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
call   8049760 <dcgettext@plt>
mov    %esi,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
jmp    805162f <__sprintf_chk@plt+0x797f>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x30(%esp),%ebx
lea    0x18(%esp),%esi
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %ebx,(%esp)
call   8049aa0 <acl_get_entry@plt>
test   %eax,%eax
jle    8051734 <__sprintf_chk@plt+0x7a84>
lea    0x1c(%esp),%edi
jmp    805171b <__sprintf_chk@plt+0x7a6b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x1c(%esp),%eax
cmp    $0x1,%eax
je     8051703 <__sprintf_chk@plt+0x7a53>
cmp    $0x4,%eax
je     8051703 <__sprintf_chk@plt+0x7a53>
cmp    $0x20,%eax
jne    8051740 <__sprintf_chk@plt+0x7a90>
mov    %esi,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %ebx,(%esp)
call   8049aa0 <acl_get_entry@plt>
test   %eax,%eax
jle    8051734 <__sprintf_chk@plt+0x7a84>
mov    0x18(%esp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049840 <acl_get_tag_type@plt>
test   %eax,%eax
jns    80516f0 <__sprintf_chk@plt+0x7a40>
mov    $0xffffffff,%eax
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x20,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    0x10(%eax),%eax
and    $0xf000,%eax
cmp    $0xa000,%eax
je     8051790 <__sprintf_chk@plt+0x7ae0>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049880 <acl_extended_file@plt>
test   %eax,%eax
js     8051780 <__sprintf_chk@plt+0x7ad0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
call   8049a60 <__errno_location@plt>
mov    (%eax),%eax
cmp    $0x5f,%eax
jne    8051798 <__sprintf_chk@plt+0x7ae8>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
add    $0x1c,%esp
ret
xchg   %ax,%ax
cmp    $0x26,%eax
je     8051790 <__sprintf_chk@plt+0x7ae0>
cmp    $0x16,%eax
je     8051790 <__sprintf_chk@plt+0x7ae0>
cmp    $0x10,%eax
setne  %al
movzbl %al,%eax
neg    %eax
jmp    8051776 <__sprintf_chk@plt+0x7ac6>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
mov    $0x401,%ebx
sub    $0x2c,%esp
mov    0x44(%esp),%eax
mov    0x40(%esp),%ebp
lea    0x1(%eax),%edx
cmp    $0x400,%eax
cmovbe %edx,%ebx
nop
mov    %ebx,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
je     8051818 <__sprintf_chk@plt+0x7b68>
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049800 <readlink@plt>
test   %eax,%eax
mov    %eax,%edi
js     8051838 <__sprintf_chk@plt+0x7b88>
cmp    %edi,%ebx
ja     8051868 <__sprintf_chk@plt+0x7bb8>
mov    %esi,(%esp)
call   80496b0 <free@plt>
cmp    $0x3fffffff,%ebx
ja     8051828 <__sprintf_chk@plt+0x7b78>
add    %ebx,%ebx
mov    %ebx,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%esi
jne    80517de <__sprintf_chk@plt+0x7b2e>
xor    %eax,%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x7ffffffe,%ebx
ja     8051878 <__sprintf_chk@plt+0x7bc8>
mov    $0x7fffffff,%ebx
jmp    80517d0 <__sprintf_chk@plt+0x7b20>
nop
call   8049a60 <__errno_location@plt>
mov    (%eax),%edx
cmp    $0x22,%edx
je     80517f4 <__sprintf_chk@plt+0x7b44>
mov    %esi,(%esp)
mov    %edx,0x1c(%esp)
mov    %eax,0x18(%esp)
call   80496b0 <free@plt>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %edx,(%eax)
xor    %eax,%eax
jmp    805181a <__sprintf_chk@plt+0x7b6a>
lea    0x0(%esi),%esi
movb   $0x0,(%esi,%edi,1)
add    $0x2c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049a60 <__errno_location@plt>
movl   $0xc,(%eax)
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
sub    $0x1c,%esp
movl   $0x1,(%esp)
call   8051050 <__sprintf_chk@plt+0x73a0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    %eax,%ebp
mov    0x44(%esp),%eax
mov    (%eax),%edi
test   %edi,%edi
je     8051992 <__sprintf_chk@plt+0x7ce2>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movb   $0x0,0x1f(%esp)
movl   $0xffffffff,0x18(%esp)
jmp    8051936 <__sprintf_chk@plt+0x7c86>
mov    0x48(%esp),%eax
test   %eax,%eax
je     8051968 <__sprintf_chk@plt+0x7cb8>
mov    0x4c(%esp),%eax
mov    %esi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
imul   0x4c(%esp),%eax
add    0x48(%esp),%eax
mov    %eax,(%esp)
call   8049730 <memcmp@plt>
movzbl 0x1f(%esp),%edx
test   %eax,%eax
mov    $0x1,%eax
cmovne %eax,%edx
mov    %dl,0x1f(%esp)
mov    0x44(%esp),%eax
add    $0x1,%ebx
add    0x4c(%esp),%esi
mov    (%eax,%ebx,4),%edi
test   %edi,%edi
je     8051970 <__sprintf_chk@plt+0x7cc0>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   8049bd0 <strncmp@plt>
test   %eax,%eax
jne    8051924 <__sprintf_chk@plt+0x7c74>
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
cmp    %ebp,%eax
je     8051988 <__sprintf_chk@plt+0x7cd8>
cmpl   $0xffffffff,0x18(%esp)
jne    80518e8 <__sprintf_chk@plt+0x7c38>
mov    %ebx,0x18(%esp)
jmp    8051924 <__sprintf_chk@plt+0x7c74>
nop
movb   $0x1,0x1f(%esp)
jmp    8051924 <__sprintf_chk@plt+0x7c74>
nop
cmpb   $0x0,0x1f(%esp)
jne    805199c <__sprintf_chk@plt+0x7cec>
mov    0x18(%esp),%eax
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x2c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xffffffff,0x18(%esp)
jmp    8051977 <__sprintf_chk@plt+0x7cc7>
mov    $0xfffffffe,%eax
jmp    805197b <__sprintf_chk@plt+0x7ccb>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
push   %ebx
sub    $0x24,%esp
cmpl   $0xffffffff,0x38(%esp)
movl   $0x5,0x8(%esp)
je     8051a38 <__sprintf_chk@plt+0x7d88>
movl   $0x805d8a0,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,%esi
mov    0x30(%esp),%eax
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8056860 <__sprintf_chk@plt+0xcbb0>
mov    0x34(%esp),%edx
movl   $0x6,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,%ebx
call   80564b0 <__sprintf_chk@plt+0xc800>
mov    %ebx,0x10(%esp)
mov    %esi,0x8(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
call   80498e0 <error@plt>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
lea    0x0(%esi),%esi
movl   $0x805d885,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,%esi
jmp    80519da <__sprintf_chk@plt+0x7d2a>
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x8063344,%edi
mov    0x40(%esp),%eax
movl   $0x5,0x8(%esp)
mov    0x44(%esp),%ebx
movl   $0x805d8bd,0x4(%esp)
movl   $0x0,(%esp)
mov    %eax,%esi
mov    %eax,0x1c(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x18(%esp)
call   8049760 <dcgettext@plt>
mov    %edi,0x4(%esp)
xor    %edi,%edi
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
mov    (%esi),%ebp
xor    %esi,%esi
test   %ebp,%ebp
jne    8051aed <__sprintf_chk@plt+0x7e3d>
jmp    8051b38 <__sprintf_chk@plt+0x7e88>
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
mov    %ebx,%edi
call   8056880 <__sprintf_chk@plt+0xcbd0>
movl   $0x805d8d2,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8063344,%eax
mov    %eax,(%esp)
call   8049ba0 <__fprintf_chk@plt>
mov    0x1c(%esp),%eax
add    $0x1,%esi
add    0x18(%esp),%ebx
mov    (%eax,%esi,4),%ebp
test   %ebp,%ebp
je     8051b38 <__sprintf_chk@plt+0x7e88>
test   %esi,%esi
je     8051ab0 <__sprintf_chk@plt+0x7e00>
mov    0x18(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
call   8049730 <memcmp@plt>
test   %eax,%eax
jne    8051ab0 <__sprintf_chk@plt+0x7e00>
mov    %ebp,(%esp)
call   8056880 <__sprintf_chk@plt+0xcbd0>
movl   $0x805d8da,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
mov    0x8063344,%eax
mov    %eax,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    8051adb <__sprintf_chk@plt+0x7e2b>
lea    0x0(%esi,%eiz,1),%esi
mov    0x8063344,%eax
mov    0x14(%eax),%edx
cmp    0x18(%eax),%edx
jae    8051b56 <__sprintf_chk@plt+0x7ea6>
lea    0x1(%edx),%ecx
mov    %ecx,0x14(%eax)
movb   $0xa,(%edx)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0xa,0x44(%esp)
mov    %eax,0x40(%esp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049b40 <__overflow@plt>
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebp
mov    0x38(%esp),%ebx
mov    0x3c(%esp),%esi
mov    0x40(%esp),%edi
mov    %ebp,(%esp)
mov    %ebx,0x4(%esp)
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
call   80518b0 <__sprintf_chk@plt+0x7c00>
test   %eax,%eax
js     8051ba7 <__sprintf_chk@plt+0x7ef7>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   80519b0 <__sprintf_chk@plt+0x7d00>
mov    %edi,0x8(%esp)
mov    %esi,0x4(%esp)
mov    %ebx,(%esp)
call   8051a50 <__sprintf_chk@plt+0x7da0>
call   *0x44(%esp)
mov    $0xffffffff,%eax
jmp    8051b9f <__sprintf_chk@plt+0x7eef>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%esi
mov    0x3c(%esp),%edi
mov    (%esi),%ebp
test   %ebp,%ebp
je     8051c23 <__sprintf_chk@plt+0x7f73>
mov    0x38(%esp),%ebx
add    $0x4,%esi
jmp    8051c0b <__sprintf_chk@plt+0x7f5b>
xchg   %ax,%ax
mov    (%esi),%ebp
add    %edi,%ebx
add    $0x4,%esi
test   %ebp,%ebp
je     8051c23 <__sprintf_chk@plt+0x7f73>
mov    0x30(%esp),%eax
mov    %edi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049730 <memcmp@plt>
test   %eax,%eax
jne    8051c00 <__sprintf_chk@plt+0x7f50>
add    $0x1c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
nop
mov    0x4(%esp),%eax
mov    %eax,0x8063e44
ret
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    %al,0x8063e40
ret
lea    0x0(%esi),%esi
push   %esi
push   %ebx
sub    $0x24,%esp
mov    0x80633a0,%eax
mov    %eax,(%esp)
call   80597e0 <__sprintf_chk@plt+0xfb30>
test   %eax,%eax
je     8051c79 <__sprintf_chk@plt+0x7fc9>
cmpb   $0x0,0x8063e40
je     8051c90 <__sprintf_chk@plt+0x7fe0>
call   8049a60 <__errno_location@plt>
cmpl   $0x20,(%eax)
jne    8051c90 <__sprintf_chk@plt+0x7fe0>
mov    0x8063344,%eax
mov    %eax,(%esp)
call   80597e0 <__sprintf_chk@plt+0xfb30>
test   %eax,%eax
jne    8051ce8 <__sprintf_chk@plt+0x8038>
add    $0x24,%esp
pop    %ebx
pop    %esi
ret
movl   $0x5,0x8(%esp)
movl   $0x805d8df,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,%ebx
mov    0x8063e44,%eax
test   %eax,%eax
je     8051cf5 <__sprintf_chk@plt+0x8045>
mov    %eax,(%esp)
call   8056650 <__sprintf_chk@plt+0xc9a0>
mov    %eax,%esi
call   8049a60 <__errno_location@plt>
mov    %ebx,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x805d8eb,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80498e0 <error@plt>
mov    0x80632f8,%eax
mov    %eax,(%esp)
call   8049650 <_exit@plt>
call   8049a60 <__errno_location@plt>
mov    %ebx,0xc(%esp)
movl   $0x805d8dc,0x8(%esp)
mov    (%eax),%eax
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80498e0 <error@plt>
jmp    8051ce8 <__sprintf_chk@plt+0x8038>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %esi
xor    %eax,%eax
push   %ebx
sub    $0x14,%esp
mov    0x20(%esp),%ebx
cmpb   $0x2f,(%ebx)
mov    %ebx,(%esp)
sete   %al
mov    %eax,%esi
call   8051de0 <__sprintf_chk@plt+0x8130>
mov    %eax,%ecx
sub    %ebx,%ecx
cmp    %esi,%ecx
jbe    8051d68 <__sprintf_chk@plt+0x80b8>
cmpb   $0x2f,-0x1(%eax)
lea    -0x1(%ecx),%edx
je     8051d5c <__sprintf_chk@plt+0x80ac>
jmp    8051d68 <__sprintf_chk@plt+0x80b8>
xchg   %ax,%ax
cmpb   $0x2f,-0x1(%ebx,%edx,1)
lea    -0x1(%edx),%eax
jne    8051d60 <__sprintf_chk@plt+0x80b0>
mov    %eax,%edx
cmp    %edx,%esi
jb     8051d50 <__sprintf_chk@plt+0x80a0>
add    $0x14,%esp
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %ecx,%edx
jmp    8051d60 <__sprintf_chk@plt+0x80b0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8051d20 <__sprintf_chk@plt+0x8070>
test   %eax,%eax
mov    %eax,%ebx
sete   %al
mov    %eax,%esi
movzbl %al,%eax
lea    0x1(%ebx),%ebp
add    %ebp,%eax
mov    %eax,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%edi
je     8051dd8 <__sprintf_chk@plt+0x8128>
mov    0x30(%esp),%eax
mov    %ebx,0x8(%esp)
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   80496c0 <memcpy@plt>
mov    %esi,%eax
test   %al,%al
jne    8051dd0 <__sprintf_chk@plt+0x8120>
movb   $0x0,(%edi,%ebx,1)
mov    %edi,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
movb   $0x2e,(%edi,%ebx,1)
mov    %ebp,%ebx
jmp    8051dbc <__sprintf_chk@plt+0x810c>
xor    %eax,%eax
jmp    8051dc2 <__sprintf_chk@plt+0x8112>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
jne    8051dfb <__sprintf_chk@plt+0x814b>
lea    0x0(%esi),%esi
add    $0x1,%eax
movzbl (%eax),%edx
cmp    $0x2f,%dl
je     8051df0 <__sprintf_chk@plt+0x8140>
mov    %edx,%ecx
xor    %ebx,%ebx
test   %cl,%cl
mov    %eax,%edx
je     8051e29 <__sprintf_chk@plt+0x8179>
lea    0x0(%esi),%esi
add    $0x1,%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     8051e29 <__sprintf_chk@plt+0x8179>
cmp    $0x2f,%cl
je     8051e30 <__sprintf_chk@plt+0x8180>
test   %bl,%bl
je     8051e08 <__sprintf_chk@plt+0x8158>
mov    %edx,%eax
add    $0x1,%edx
movzbl (%edx),%ecx
xor    %ebx,%ebx
test   %cl,%cl
jne    8051e12 <__sprintf_chk@plt+0x8162>
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%ebx
jmp    8051e08 <__sprintf_chk@plt+0x8158>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
cmp    $0x1,%eax
jbe    8051e5f <__sprintf_chk@plt+0x81af>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
lea    -0x1(%eax),%edx
je     8051e68 <__sprintf_chk@plt+0x81b8>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%edx
mov    %edx,%eax
jne    8051e55 <__sprintf_chk@plt+0x81a5>
nop
jmp    8051e5f <__sprintf_chk@plt+0x81af>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
mov    %eax,%ecx
and    $0xf000,%ecx
cmp    $0x8000,%ecx
je     8052008 <__sprintf_chk@plt+0x8358>
cmp    $0x4000,%ecx
je     8052018 <__sprintf_chk@plt+0x8368>
cmp    $0x6000,%ecx
je     8052028 <__sprintf_chk@plt+0x8378>
cmp    $0x2000,%ecx
je     8051ff8 <__sprintf_chk@plt+0x8348>
cmp    $0xa000,%ecx
je     8052038 <__sprintf_chk@plt+0x8388>
cmp    $0x1000,%ecx
je     8052048 <__sprintf_chk@plt+0x8398>
cmp    $0xc000,%ecx
mov    $0x73,%ebx
mov    $0x3f,%ecx
cmovne %ecx,%ebx
mov    %eax,%ecx
and    $0x100,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x1(%edx)
mov    %eax,%ecx
and    $0x80,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x2(%edx)
mov    %eax,%ecx
and    $0x40,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x8,%ah
mov    %bl,(%edx)
je     8051fe8 <__sprintf_chk@plt+0x8338>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x3(%edx)
mov    %eax,%ecx
and    $0x20,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x4(%edx)
mov    %eax,%ecx
and    $0x10,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
mov    %cl,0x5(%edx)
mov    %eax,%ecx
and    $0x8,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
test   $0x4,%ah
je     8051fe0 <__sprintf_chk@plt+0x8330>
and    $0xffffffe0,%ecx
add    $0x73,%ecx
mov    %cl,0x6(%edx)
mov    %eax,%ecx
and    $0x4,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffbb,%ecx
add    $0x72,%ecx
mov    %cl,0x7(%edx)
mov    %eax,%ecx
and    $0x2,%ecx
cmp    $0x1,%ecx
sbb    %ecx,%ecx
and    $0xffffffb6,%ecx
add    $0x77,%ecx
test   $0x2,%ah
mov    %cl,0x8(%edx)
je     8051fc0 <__sprintf_chk@plt+0x8310>
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffe0,%eax
add    $0x74,%eax
mov    %al,0x9(%edx)
movb   $0x20,0xa(%edx)
movb   $0x0,0xb(%edx)
pop    %ebx
ret
lea    0x0(%esi),%esi
and    $0x1,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
and    $0xffffffb5,%eax
add    $0x78,%eax
mov    %al,0x9(%edx)
movb   $0x20,0xa(%edx)
movb   $0x0,0xb(%edx)
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    8051f71 <__sprintf_chk@plt+0x82c1>
and    $0xffffffb5,%ecx
add    $0x78,%ecx
jmp    8051f33 <__sprintf_chk@plt+0x8283>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x63,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi),%esi
mov    $0x2d,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi),%esi
mov    $0x64,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi),%esi
mov    $0x62,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi),%esi
mov    $0x6c,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi),%esi
mov    $0x70,%ebx
jmp    8051eec <__sprintf_chk@plt+0x823c>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
mov    %eax,0x4(%esp)
jmp    8051e80 <__sprintf_chk@plt+0x81d0>
sub    $0x1c,%esp
mov    0x28(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80520a0 <__sprintf_chk@plt+0x83f0>
test   %eax,%eax
je     8052097 <__sprintf_chk@plt+0x83e7>
add    $0x1c,%esp
ret
call   80589a0 <__sprintf_chk@plt+0xecf0>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
xor    %esi,%esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8051de0 <__sprintf_chk@plt+0x8130>
mov    %eax,(%esp)
mov    %eax,%ebx
call   8051e40 <__sprintf_chk@plt+0x8190>
mov    %ebx,%ebp
sub    0x30(%esp),%ebp
add    %eax,%ebp
test   %eax,%eax
je     80520d8 <__sprintf_chk@plt+0x8428>
cmpb   $0x2f,-0x1(%ebx,%eax,1)
setne  %al
movzbl %al,%eax
mov    %eax,%esi
mov    0x34(%esp),%edi
cmpb   $0x2f,(%edi)
je     8052160 <__sprintf_chk@plt+0x84b0>
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
mov    %eax,%edx
mov    %eax,0xc(%esp)
lea    0x1(%ebp,%esi,1),%eax
add    %edx,%eax
mov    %eax,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebx
je     8052180 <__sprintf_chk@plt+0x84d0>
mov    0x30(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %ebx,(%esp)
mov    %eax,0x4(%esp)
call   8049ad0 <mempcpy@plt>
add    %eax,%esi
movb   $0x2f,(%eax)
mov    0x38(%esp),%eax
test   %eax,%eax
je     805213d <__sprintf_chk@plt+0x848d>
mov    0x34(%esp),%eax
mov    %esi,%ecx
cmpb   $0x2f,(%eax)
sete   %al
movzbl %al,%eax
sub    %eax,%ecx
mov    %ecx,%eax
mov    0x38(%esp),%ecx
mov    %eax,(%ecx)
mov    0xc(%esp),%eax
mov    %edi,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   8049ad0 <mempcpy@plt>
movb   $0x0,(%eax)
mov    %ebx,%eax
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
add    $0x1,%edi
cmpb   $0x2f,(%edi)
jne    80520e1 <__sprintf_chk@plt+0x8431>
add    $0x1,%edi
cmpb   $0x2f,(%edi)
jne    80520e1 <__sprintf_chk@plt+0x8431>
jmp    8052160 <__sprintf_chk@plt+0x84b0>
lea    0x0(%esi),%esi
xor    %eax,%eax
jmp    8052156 <__sprintf_chk@plt+0x84a6>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
mov    (%eax),%edx
movzbl (%edx),%ecx
test   %cl,%cl
je     805221c <__sprintf_chk@plt+0x856c>
xor    %ebx,%ebx
xor    %eax,%eax
jmp    80521cf <__sprintf_chk@plt+0x851f>
lea    0x0(%esi),%esi
movsbl %cl,%ebx
and    $0xffffffdf,%ebx
lea    -0x41(%ebx),%edi
xor    %ebx,%ebx
cmp    $0x19,%edi
jbe    80521c3 <__sprintf_chk@plt+0x8513>
cmp    $0x7e,%cl
mov    $0x0,%edi
cmovne %edi,%eax
add    $0x1,%edx
mov    %edx,(%esi)
movzbl (%edx),%ecx
test   %cl,%cl
je     8052200 <__sprintf_chk@plt+0x8550>
test   %bl,%bl
jne    80521a8 <__sprintf_chk@plt+0x84f8>
cmp    $0x2e,%cl
je     8052208 <__sprintf_chk@plt+0x8558>
movsbl %cl,%edi
lea    -0x30(%edi),%ebp
cmp    $0x9,%ebp
jbe    80521c3 <__sprintf_chk@plt+0x8513>
and    $0xffffffdf,%edi
sub    $0x41,%edi
cmp    $0x19,%edi
ja     80521b8 <__sprintf_chk@plt+0x8508>
add    $0x1,%edx
mov    %edx,(%esi)
movzbl (%edx),%ecx
test   %cl,%cl
jne    80521cf <__sprintf_chk@plt+0x851f>
lea    0x0(%esi),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     8052218 <__sprintf_chk@plt+0x8568>
mov    $0x1,%ebx
jmp    80521c3 <__sprintf_chk@plt+0x8513>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edx,%eax
jmp    805220c <__sprintf_chk@plt+0x855c>
xor    %eax,%eax
xchg   %ax,%ax
jmp    8052200 <__sprintf_chk@plt+0x8550>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x54(%esp),%eax
mov    0x50(%esp),%ebp
mov    %eax,0x4(%esp)
mov    %ebp,(%esp)
call   8049600 <strcmp@plt>
mov    %eax,%ecx
mov    %eax,0x1c(%esp)
xor    %eax,%eax
test   %ecx,%ecx
je     80522a8 <__sprintf_chk@plt+0x85f8>
movzbl 0x0(%ebp),%edx
test   %dl,%dl
je     8052440 <__sprintf_chk@plt+0x8790>
mov    0x54(%esp),%eax
movzbl (%eax),%ecx
mov    $0x1,%eax
test   %cl,%cl
je     80522a8 <__sprintf_chk@plt+0x85f8>
movzbl %dl,%eax
mov    $0x2e,%ebx
sub    %eax,%ebx
jne    8052289 <__sprintf_chk@plt+0x85d9>
cmpb   $0x0,0x1(%ebp)
je     8052440 <__sprintf_chk@plt+0x8790>
movzbl %cl,%eax
mov    $0x2e,%esi
sub    %eax,%esi
jne    80522b0 <__sprintf_chk@plt+0x8600>
mov    0x54(%esp),%edi
mov    $0x1,%eax
cmpb   $0x0,0x1(%edi)
jne    80522b0 <__sprintf_chk@plt+0x8600>
lea    0x0(%esi,%eiz,1),%esi
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
test   %ebx,%ebx
jne    80522c4 <__sprintf_chk@plt+0x8614>
cmpb   $0x2e,0x1(%ebp)
jne    80522c4 <__sprintf_chk@plt+0x8614>
cmpb   $0x0,0x2(%ebp)
je     8052440 <__sprintf_chk@plt+0x8790>
test   %esi,%esi
je     8052408 <__sprintf_chk@plt+0x8758>
cmp    $0x2e,%dl
nop
je     80525c0 <__sprintf_chk@plt+0x8910>
cmp    $0x2e,%cl
je     8052420 <__sprintf_chk@plt+0x8770>
mov    0x54(%esp),%eax
mov    %ebp,0x28(%esp)
mov    %eax,0x2c(%esp)
lea    0x28(%esp),%eax
call   8052190 <__sprintf_chk@plt+0x84e0>
mov    %eax,%ebx
lea    0x2c(%esp),%eax
call   8052190 <__sprintf_chk@plt+0x84e0>
test   %ebx,%ebx
mov    %ebx,%edx
cmove  0x28(%esp),%edx
mov    %edx,0x14(%esp)
sub    %ebp,0x14(%esp)
mov    %eax,%ecx
sub    0x54(%esp),%ecx
test   %eax,%eax
mov    %ecx,0x10(%esp)
je     80525d6 <__sprintf_chk@plt+0x8926>
mov    0x10(%esp),%eax
cmp    %eax,0x14(%esp)
je     805248c <__sprintf_chk@plt+0x87dc>
xor    %edx,%edx
xor    %ecx,%ecx
cmp    %edx,0x10(%esp)
jbe    80525f8 <__sprintf_chk@plt+0x8948>
mov    %ebp,0x50(%esp)
jmp    80523dd <__sprintf_chk@plt+0x872d>
nop
cmp    %edx,0x10(%esp)
jbe    80524d8 <__sprintf_chk@plt+0x8828>
mov    0x54(%esp),%eax
movzbl (%eax,%edx,1),%ebx
movsbl %bl,%eax
sub    $0x30,%eax
cmp    $0x9,%eax
jbe    80525b0 <__sprintf_chk@plt+0x8900>
cmp    %ecx,0x14(%esp)
je     8052612 <__sprintf_chk@plt+0x8962>
mov    0x50(%esp),%eax
movzbl (%eax,%ecx,1),%esi
mov    %esi,%eax
movzbl %al,%ebx
xor    %eax,%eax
lea    -0x30(%ebx),%edi
cmp    $0x9,%edi
jbe    805239d <__sprintf_chk@plt+0x86ed>
mov    %ebx,%eax
and    $0xffffffdf,%eax
sub    $0x41,%eax
cmp    $0x19,%eax
ja     8052450 <__sprintf_chk@plt+0x87a0>
mov    %ebx,%eax
cmp    %edx,0x10(%esp)
je     805260b <__sprintf_chk@plt+0x895b>
mov    0x54(%esp),%edi
movzbl (%edi,%edx,1),%ebx
movzbl %bl,%esi
xor    %edi,%edi
lea    -0x30(%esi),%ebp
cmp    $0x9,%ebp
jbe    80523cf <__sprintf_chk@plt+0x871f>
mov    %esi,%edi
and    $0xffffffdf,%edi
sub    $0x41,%edi
cmp    $0x19,%edi
ja     8052468 <__sprintf_chk@plt+0x87b8>
mov    %esi,%edi
cmp    %edi,%eax
jne    8052480 <__sprintf_chk@plt+0x87d0>
add    $0x1,%ecx
add    $0x1,%edx
cmp    %ecx,0x14(%esp)
jbe    8052348 <__sprintf_chk@plt+0x8698>
mov    0x50(%esp),%eax
movzbl (%eax,%ecx,1),%eax
movsbl %al,%ebx
sub    $0x30,%ebx
cmp    $0x9,%ebx
jbe    8052348 <__sprintf_chk@plt+0x8698>
mov    %eax,%esi
jmp    805237b <__sprintf_chk@plt+0x86cb>
lea    0x0(%esi),%esi
mov    0x54(%esp),%eax
cmpb   $0x2e,0x1(%eax)
jne    80522cc <__sprintf_chk@plt+0x861c>
cmpb   $0x0,0x2(%eax)
jne    80522cc <__sprintf_chk@plt+0x861c>
add    $0x3c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
sub    $0x30,%eax
cmp    $0x9,%eax
ja     8052334 <__sprintf_chk@plt+0x8684>
lea    0x0(%esi,%eiz,1),%esi
mov    $0xffffffff,%eax
jmp    80522a8 <__sprintf_chk@plt+0x85f8>
lea    0x0(%esi),%esi
lea    0x100(%ebx),%eax
mov    %esi,%ebx
cmp    $0x7e,%bl
mov    $0xffffffff,%esi
cmove  %esi,%eax
jmp    805239d <__sprintf_chk@plt+0x86ed>
add    $0x100,%esi
mov    $0xffffffff,%edi
cmp    $0x7e,%bl
cmovne %esi,%edi
jmp    80523cf <__sprintf_chk@plt+0x871f>
xchg   %ax,%ax
sub    %edi,%eax
cmove  0x1c(%esp),%eax
jmp    80522a8 <__sprintf_chk@plt+0x85f8>
mov    0x14(%esp),%esi
mov    0x54(%esp),%eax
mov    %ebp,(%esp)
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
call   8049bd0 <strncmp@plt>
mov    %esi,0x10(%esp)
test   %eax,%eax
jne    8052330 <__sprintf_chk@plt+0x8680>
mov    0x28(%esp),%eax
mov    %eax,0x14(%esp)
mov    0x2c(%esp),%eax
sub    %ebp,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x54(%esp),%eax
sub    %eax,0x10(%esp)
jmp    8052330 <__sprintf_chk@plt+0x8680>
lea    0x0(%esi,%eiz,1),%esi
mov    0x54(%esp),%eax
mov    0x50(%esp),%ebp
movzbl (%eax,%edx,1),%esi
jmp    80524eb <__sprintf_chk@plt+0x883b>
xchg   %ax,%ax
add    $0x1,%ecx
movzbl 0x0(%ebp,%ecx,1),%ebx
cmp    $0x30,%bl
je     80524e8 <__sprintf_chk@plt+0x8838>
mov    %esi,%eax
mov    %ebx,%edi
cmp    $0x30,%al
jne    8052516 <__sprintf_chk@plt+0x8866>
mov    0x54(%esp),%eax
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edx
movzbl (%eax,%edx,1),%ebx
cmp    $0x30,%bl
je     8052508 <__sprintf_chk@plt+0x8858>
mov    %ebx,%esi
mov    %edi,%eax
movsbl %al,%eax
sub    $0x30,%eax
cmp    $0x9,%eax
mov    %esi,%eax
movsbl %al,%eax
ja     805242d <__sprintf_chk@plt+0x877d>
sub    $0x30,%eax
cmp    $0x9,%eax
ja     8052420 <__sprintf_chk@plt+0x8770>
mov    %edi,%ebx
xor    %eax,%eax
mov    %edx,0x18(%esp)
jmp    8052565 <__sprintf_chk@plt+0x88b5>
lea    0x0(%esi),%esi
mov    0x54(%esp),%edx
mov    0x18(%esp),%esi
movzbl (%edx,%esi,1),%esi
mov    %esi,%edx
movsbl %dl,%edi
sub    $0x30,%edi
cmp    $0x9,%edi
ja     8052420 <__sprintf_chk@plt+0x8770>
test   %eax,%eax
jne    8052573 <__sprintf_chk@plt+0x88c3>
mov    %esi,%edx
movsbl %bl,%eax
movsbl %dl,%esi
sub    %esi,%eax
add    $0x1,%ecx
movzbl 0x0(%ebp,%ecx,1),%ebx
addl   $0x1,0x18(%esp)
movsbl %bl,%esi
sub    $0x30,%esi
cmp    $0x9,%esi
jbe    8052548 <__sprintf_chk@plt+0x8898>
mov    0x18(%esp),%edx
mov    0x54(%esp),%esi
movsbl (%esi,%edx,1),%ebx
sub    $0x30,%ebx
cmp    $0x9,%ebx
jbe    8052440 <__sprintf_chk@plt+0x8790>
test   %eax,%eax
je     8052334 <__sprintf_chk@plt+0x8684>
jmp    80522a8 <__sprintf_chk@plt+0x85f8>
mov    0x50(%esp),%ebp
mov    %ebx,%esi
jmp    80524eb <__sprintf_chk@plt+0x883b>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x2e,%cl
jne    8052440 <__sprintf_chk@plt+0x8790>
add    $0x1,%ebp
addl   $0x1,0x54(%esp)
jmp    80522df <__sprintf_chk@plt+0x862f>
mov    0x2c(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x54(%esp),%eax
sub    %eax,0x10(%esp)
test   %ebx,%ebx
je     8052330 <__sprintf_chk@plt+0x8680>
jmp    8052322 <__sprintf_chk@plt+0x8672>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ecx,0x14(%esp)
ja     805233e <__sprintf_chk@plt+0x868e>
mov    0x1c(%esp),%eax
jmp    80522a8 <__sprintf_chk@plt+0x85f8>
xor    %edi,%edi
jmp    80523cf <__sprintf_chk@plt+0x871f>
xor    %eax,%eax
jmp    80523af <__sprintf_chk@plt+0x86ff>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x28,%esp
mov    0x30(%esp),%ebx
movl   $0x0,(%esp)
mov    %ebx,0x4(%esp)
call   80496e0 <clock_gettime@plt>
test   %eax,%eax
je     8052661 <__sprintf_chk@plt+0x89b1>
lea    0x18(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049740 <gettimeofday@plt>
mov    0x18(%esp),%eax
mov    %eax,(%ebx)
imul   $0x3e8,0x1c(%esp),%eax
mov    %eax,0x4(%ebx)
add    $0x28,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049b20 <setlocale@plt>
test   %eax,%eax
je     80526b8 <__sprintf_chk@plt+0x8a08>
cmpb   $0x43,(%eax)
jne    80526a0 <__sprintf_chk@plt+0x89f0>
cmpb   $0x0,0x1(%eax)
jne    80526a0 <__sprintf_chk@plt+0x89f0>
add    $0x14,%esp
xor    %eax,%eax
pop    %esi
pop    %edi
ret
mov    %eax,%esi
mov    $0x805d8f2,%edi
mov    $0x6,%ecx
repz cmpsb %es:(%edi),%ds:(%esi)
setne  %al
add    $0x14,%esp
pop    %esi
pop    %edi
ret
nop
add    $0x14,%esp
mov    $0x1,%eax
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
cmp    $0x9,%eax
push   %edi
push   %esi
push   %ebx
ja     8052746 <__sprintf_chk@plt+0x8a96>
mov    $0xb,%ebx
mov    $0xaaaaaaab,%ebp
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x9,%ebx
jbe    805273f <__sprintf_chk@plt+0x8a8f>
mov    %ebx,%eax
mul    %ebp
shr    %edx
lea    (%edx,%edx,2),%eax
cmp    %eax,%ebx
je     8052730 <__sprintf_chk@plt+0x8a80>
mov    $0x10,%edi
mov    $0x9,%esi
mov    $0x3,%ecx
jmp    805271d <__sprintf_chk@plt+0x8a6d>
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
add    $0x8,%edi
test   %edx,%edx
je     8052730 <__sprintf_chk@plt+0x8a80>
add    %edi,%esi
add    $0x2,%ecx
cmp    %ebx,%esi
jb     8052710 <__sprintf_chk@plt+0x8a60>
xor    %edx,%edx
mov    %ebx,%eax
div    %ecx
test   %edx,%edx
jne    8052738 <__sprintf_chk@plt+0x8a88>
add    $0x2,%ebx
cmp    $0xffffffff,%ebx
jne    80526e8 <__sprintf_chk@plt+0x8a38>
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    $0x3,%ecx
jmp    8052726 <__sprintf_chk@plt+0x8a76>
or     $0x1,%eax
cmp    $0xffffffff,%eax
mov    %eax,%ebx
jne    80526de <__sprintf_chk@plt+0x8a2e>
jmp    8052738 <__sprintf_chk@plt+0x8a88>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
xor    %edx,%edx
ror    $0x3,%eax
divl   0x8(%esp)
mov    %edx,%eax
ret
mov    0x8(%esp),%eax
cmp    %eax,0x4(%esp)
sete   %al
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    %eax,%ebx
sub    $0x18,%esp
mov    0x8(%eax),%eax
mov    %edx,(%esp)
mov    %eax,0x4(%esp)
call   *0x18(%ebx)
cmp    0x8(%ebx),%eax
jae    80527a2 <__sprintf_chk@plt+0x8af2>
mov    (%ebx),%edx
add    $0x18,%esp
pop    %ebx
lea    (%edx,%eax,8),%eax
ret
call   8049bf0 <abort@plt>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    %ecx,0xc(%esp)
mov    0x30(%esp),%ebp
call   8052780 <__sprintf_chk@plt+0x8ad0>
mov    0xc(%esp),%ecx
mov    %eax,%ebx
mov    %eax,(%ecx)
mov    (%eax),%eax
test   %eax,%eax
je     8052836 <__sprintf_chk@plt+0x8b86>
cmp    %eax,%edi
je     80527ea <__sprintf_chk@plt+0x8b3a>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
je     805282f <__sprintf_chk@plt+0x8b7f>
mov    (%ebx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     8052810 <__sprintf_chk@plt+0x8b60>
mov    0x4(%ebx),%edx
test   %edx,%edx
je     8052868 <__sprintf_chk@plt+0x8bb8>
mov    (%edx),%edi
mov    0x4(%edx),%ebp
mov    %edi,(%ebx)
mov    %ebp,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    (%edx),%eax
cmp    %edi,%eax
je     8052845 <__sprintf_chk@plt+0x8b95>
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   *0x1c(%esi)
test   %al,%al
jne    8052840 <__sprintf_chk@plt+0x8b90>
mov    0x4(%ebx),%ebx
mov    0x4(%ebx),%edx
test   %edx,%edx
jne    8052818 <__sprintf_chk@plt+0x8b68>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x4(%ebx),%edx
mov    (%edx),%eax
mov    %ebp,%ecx
test   %cl,%cl
je     8052810 <__sprintf_chk@plt+0x8b60>
mov    0x4(%edx),%ecx
mov    %ecx,0x4(%ebx)
movl   $0x0,(%edx)
mov    0x24(%esi),%ecx
mov    %ecx,0x4(%edx)
mov    %edx,0x24(%esi)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
movl   $0x0,(%ebx)
jmp    8052810 <__sprintf_chk@plt+0x8b60>
mov    (%eax),%edx
mov    %eax,%ecx
cmp    $0x805d964,%edx
je     8052918 <__sprintf_chk@plt+0x8c68>
flds   0x8(%edx)
flds   0x805d978
fxch   %st(1)
fucomi %st(1),%st
jbe    80528d8 <__sprintf_chk@plt+0x8c28>
flds   0x805d97c
fucomip %st(1),%st
jbe    80528e0 <__sprintf_chk@plt+0x8c30>
flds   0xc(%edx)
flds   0x805d980
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    80528e8 <__sprintf_chk@plt+0x8c38>
flds   (%edx)
fldz
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jb     80528f0 <__sprintf_chk@plt+0x8c40>
faddp  %st,%st(2)
flds   0x4(%edx)
fucomi %st(2),%st
jbe    80528f8 <__sprintf_chk@plt+0x8c48>
fld1
fucomip %st(1),%st
fstp   %st(0)
jb     8052900 <__sprintf_chk@plt+0x8c50>
fucomip %st(1),%st
fstp   %st(0)
mov    $0x1,%eax
jbe    8052908 <__sprintf_chk@plt+0x8c58>
jmp    805291d <__sprintf_chk@plt+0x8c6d>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
fstp   %st(0)
jmp    8052908 <__sprintf_chk@plt+0x8c58>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    8052908 <__sprintf_chk@plt+0x8c58>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
jmp    8052908 <__sprintf_chk@plt+0x8c58>
xchg   %ax,%ax
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    8052908 <__sprintf_chk@plt+0x8c58>
fstp   %st(0)
fstp   %st(0)
fstp   %st(0)
jmp    8052908 <__sprintf_chk@plt+0x8c58>
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805d964,(%ecx)
xor    %eax,%eax
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x1,%eax
repz ret
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x1c,%esp
mov    (%edx),%edi
cmp    0x4(%edx),%edi
mov    %edx,0x4(%esp)
mov    %cl,0xb(%esp)
jae    80529a4 <__sprintf_chk@plt+0x8cf4>
mov    (%edi),%ebx
test   %ebx,%ebx
je     8052998 <__sprintf_chk@plt+0x8ce8>
mov    0x4(%edi),%ebp
test   %ebp,%ebp
jne    8052957 <__sprintf_chk@plt+0x8ca7>
jmp    805298a <__sprintf_chk@plt+0x8cda>
nop
mov    0x4(%eax),%ecx
test   %edx,%edx
mov    %ecx,0x4(%ebp)
mov    %ebp,0x4(%eax)
je     8052988 <__sprintf_chk@plt+0x8cd8>
mov    %edx,%ebp
mov    0x0(%ebp),%ebx
mov    %esi,%eax
mov    %ebx,%edx
call   8052780 <__sprintf_chk@plt+0x8ad0>
mov    0x4(%ebp),%edx
mov    (%eax),%ecx
test   %ecx,%ecx
jne    8052948 <__sprintf_chk@plt+0x8c98>
mov    %ebx,(%eax)
addl   $0x1,0xc(%esi)
test   %edx,%edx
movl   $0x0,0x0(%ebp)
mov    0x24(%esi),%eax
mov    %eax,0x4(%ebp)
mov    %ebp,0x24(%esi)
jne    8052955 <__sprintf_chk@plt+0x8ca5>
xchg   %ax,%ax
mov    (%edi),%ebx
cmpb   $0x0,0xb(%esp)
movl   $0x0,0x4(%edi)
je     80529b8 <__sprintf_chk@plt+0x8d08>
mov    0x4(%esp),%eax
add    $0x8,%edi
cmp    %edi,0x4(%eax)
ja     8052938 <__sprintf_chk@plt+0x8c88>
add    $0x1c,%esp
mov    $0x1,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%edx
mov    %esi,%eax
call   8052780 <__sprintf_chk@plt+0x8ad0>
mov    %eax,%edx
mov    (%eax),%eax
test   %eax,%eax
je     8052a02 <__sprintf_chk@plt+0x8d52>
mov    0x24(%esi),%eax
test   %eax,%eax
je     8052a0a <__sprintf_chk@plt+0x8d5a>
mov    0x4(%eax),%ecx
mov    %ecx,0x24(%esi)
mov    0x4(%edx),%ecx
mov    %ebx,(%eax)
mov    %ecx,0x4(%eax)
mov    %eax,0x4(%edx)
mov    0x4(%esp),%eax
add    $0x8,%edi
movl   $0x0,-0x8(%edi)
subl   $0x1,0xc(%eax)
mov    0x4(%esp),%eax
cmp    %edi,0x4(%eax)
ja     8052938 <__sprintf_chk@plt+0x8c88>
jmp    80529a4 <__sprintf_chk@plt+0x8cf4>
mov    %ebx,(%edx)
addl   $0x1,0xc(%esi)
jmp    80529e1 <__sprintf_chk@plt+0x8d31>
movl   $0x8,(%esp)
mov    %edx,0xc(%esp)
call   8049930 <malloc@plt>
mov    0xc(%esp),%edx
test   %eax,%eax
jne    80529d6 <__sprintf_chk@plt+0x8d26>
add    $0x1c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x8(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0xc(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%eax
mov    0x10(%eax),%eax
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0xc(%esp),%eax
mov    (%eax),%ebx
mov    0x4(%eax),%esi
xor    %eax,%eax
cmp    %esi,%ebx
jae    8052aa6 <__sprintf_chk@plt+0x8df6>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%edx
test   %edx,%edx
je     8052a9f <__sprintf_chk@plt+0x8def>
mov    0x4(%ebx),%edx
mov    $0x1,%ecx
test   %edx,%edx
je     8052a9a <__sprintf_chk@plt+0x8dea>
lea    0x0(%esi),%esi
mov    0x4(%edx),%edx
add    $0x1,%ecx
test   %edx,%edx
jne    8052a90 <__sprintf_chk@plt+0x8de0>
cmp    %ecx,%eax
cmovb  %ecx,%eax
add    $0x8,%ebx
cmp    %esi,%ebx
jb     8052a78 <__sprintf_chk@plt+0x8dc8>
pop    %ebx
pop    %esi
ret
lea    0x0(%esi,%eiz,1),%esi
push   %edi
xor    %edx,%edx
push   %esi
push   %ebx
mov    0x10(%esp),%edi
xor    %ebx,%ebx
mov    (%edi),%ecx
mov    0x4(%edi),%esi
cmp    %esi,%ecx
jae    8052af1 <__sprintf_chk@plt+0x8e41>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     8052aea <__sprintf_chk@plt+0x8e3a>
mov    0x4(%ecx),%eax
add    $0x1,%ebx
add    $0x1,%edx
test   %eax,%eax
je     8052aea <__sprintf_chk@plt+0x8e3a>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    8052ae0 <__sprintf_chk@plt+0x8e30>
add    $0x8,%ecx
cmp    %esi,%ecx
jb     8052ac8 <__sprintf_chk@plt+0x8e18>
xor    %eax,%eax
cmp    %ebx,0xc(%edi)
je     8052afc <__sprintf_chk@plt+0x8e4c>
pop    %ebx
pop    %esi
pop    %edi
ret
cmp    %edx,0x10(%edi)
pop    %ebx
pop    %esi
sete   %al
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%eax
mov    0x54(%esp),%ebx
mov    0xc(%eax),%edi
mov    (%eax),%ecx
mov    0x4(%eax),%ebp
mov    0x10(%eax),%esi
mov    %edi,0x24(%esp)
xor    %edi,%edi
cmp    %ebp,%ecx
mov    %esi,0x20(%esp)
mov    0x8(%eax),%esi
jae    8052b6e <__sprintf_chk@plt+0x8ebe>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%ecx),%eax
test   %eax,%eax
je     8052b67 <__sprintf_chk@plt+0x8eb7>
mov    0x4(%ecx),%eax
mov    $0x1,%edx
test   %eax,%eax
je     8052b62 <__sprintf_chk@plt+0x8eb2>
lea    0x0(%esi),%esi
mov    0x4(%eax),%eax
add    $0x1,%edx
test   %eax,%eax
jne    8052b58 <__sprintf_chk@plt+0x8ea8>
cmp    %edx,%edi
cmovb  %edx,%edi
add    $0x8,%ecx
cmp    %ebp,%ecx
jb     8052b40 <__sprintf_chk@plt+0x8e90>
mov    0x20(%esp),%eax
mov    %ebx,(%esp)
movl   $0x805d8f8,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0xc(%esp)
call   8049ba0 <__fprintf_chk@plt>
mov    %esi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x805d910,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049ba0 <__fprintf_chk@plt>
mov    0x24(%esp),%ecx
xor    %edx,%edx
mov    %edx,0x2c(%esp)
xor    %edx,%edx
mov    %ebx,(%esp)
movl   $0x805d940,0x8(%esp)
mov    %ecx,0x28(%esp)
mov    %ecx,0xc(%esp)
fildll 0x28(%esp)
fmuls  0x805d984
mov    %esi,0x28(%esp)
mov    %edx,0x2c(%esp)
movl   $0x1,0x4(%esp)
fildll 0x28(%esp)
fdivrp %st,%st(1)
fstpl  0x10(%esp)
call   8049ba0 <__fprintf_chk@plt>
mov    %edi,0xc(%esp)
mov    %ebx,(%esp)
movl   $0x805d928,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049ba0 <__fprintf_chk@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%edi
mov    0x24(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   8052780 <__sprintf_chk@plt+0x8ad0>
mov    (%eax),%ecx
mov    %eax,%ebx
test   %ecx,%ecx
jne    8052c4a <__sprintf_chk@plt+0x8f9a>
jmp    8052c63 <__sprintf_chk@plt+0x8fb3>
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
cmp    %ecx,%esi
je     8052c72 <__sprintf_chk@plt+0x8fc2>
mov    %ecx,0x4(%esp)
mov    %esi,(%esp)
call   *0x1c(%edi)
test   %al,%al
jne    8052c70 <__sprintf_chk@plt+0x8fc0>
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    8052c48 <__sprintf_chk@plt+0x8f98>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    (%ebx),%ecx
add    $0x10,%esp
mov    %ecx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
sub    $0xc,%esp
mov    0x10(%esp),%eax
mov    0x10(%eax),%edx
test   %edx,%edx
je     8052cb1 <__sprintf_chk@plt+0x9001>
mov    (%eax),%edx
mov    0x4(%eax),%ecx
cmp    %ecx,%edx
jb     8052ca7 <__sprintf_chk@plt+0x8ff7>
jmp    8052cb7 <__sprintf_chk@plt+0x9007>
lea    0x0(%esi,%eiz,1),%esi
add    $0x8,%edx
cmp    %ecx,%edx
jae    8052cb7 <__sprintf_chk@plt+0x9007>
mov    (%edx),%eax
test   %eax,%eax
je     8052ca0 <__sprintf_chk@plt+0x8ff0>
add    $0xc,%esp
ret
xor    %eax,%eax
add    $0xc,%esp
ret
call   8049bf0 <abort@plt>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%edi
mov    0x14(%esp),%esi
mov    %edi,%eax
mov    %esi,%edx
call   8052780 <__sprintf_chk@plt+0x8ad0>
mov    %eax,%ebx
mov    %eax,%ecx
jmp    8052ce7 <__sprintf_chk@plt+0x9037>
lea    0x0(%esi),%esi
mov    0x4(%ecx),%ecx
test   %ecx,%ecx
je     8052cf2 <__sprintf_chk@plt+0x9042>
cmp    %esi,(%ecx)
jne    8052ce0 <__sprintf_chk@plt+0x9030>
mov    0x4(%ecx),%eax
test   %eax,%eax
jne    8052d0b <__sprintf_chk@plt+0x905b>
mov    0x4(%edi),%edx
jmp    8052cfe <__sprintf_chk@plt+0x904e>
nop
mov    (%ebx),%eax
test   %eax,%eax
jne    8052d07 <__sprintf_chk@plt+0x9057>
add    $0x8,%ebx
cmp    %edx,%ebx
jb     8052cf8 <__sprintf_chk@plt+0x9048>
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
pop    %ebx
mov    (%eax),%eax
pop    %esi
pop    %edi
ret
jmp    8052d20 <__sprintf_chk@plt+0x9070>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   %ebp
xor    %eax,%eax
push   %edi
push   %esi
push   %ebx
mov    0x14(%esp),%ebp
mov    0x18(%esp),%esi
mov    0x1c(%esp),%ebx
mov    0x0(%ebp),%edi
cmp    %edi,0x4(%ebp)
jbe    8052d78 <__sprintf_chk@plt+0x90c8>
mov    (%edi),%edx
test   %edx,%edx
je     8052d6c <__sprintf_chk@plt+0x90bc>
cmp    %eax,%ebx
jbe    8052d78 <__sprintf_chk@plt+0x90c8>
mov    %edx,(%esi,%eax,4)
mov    0x4(%edi),%edx
lea    0x1(%eax),%ecx
mov    %ecx,%eax
test   %edx,%edx
je     8052d6c <__sprintf_chk@plt+0x90bc>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,%eax
je     8052d78 <__sprintf_chk@plt+0x90c8>
mov    (%edx),%ecx
add    $0x1,%eax
mov    %ecx,-0x4(%esi,%eax,4)
mov    0x4(%edx),%edx
test   %edx,%edx
jne    8052d58 <__sprintf_chk@plt+0x90a8>
add    $0x8,%edi
cmp    %edi,0x4(%ebp)
ja     8052d3a <__sprintf_chk@plt+0x908a>
lea    0x0(%esi,%eiz,1),%esi
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
xor    %ebx,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%eax
mov    0x30(%esp),%ecx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    (%eax),%eax
cmp    %eax,0x4(%ecx)
mov    %eax,0xc(%esp)
jbe    8052de8 <__sprintf_chk@plt+0x9138>
mov    0xc(%esp),%ebp
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    8052dbb <__sprintf_chk@plt+0x910b>
jmp    8052dd2 <__sprintf_chk@plt+0x9122>
lea    0x0(%esi,%eiz,1),%esi
mov    0x0(%ebp),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   *%esi
test   %al,%al
je     8052de8 <__sprintf_chk@plt+0x9138>
mov    0x4(%ebp),%ebp
add    $0x1,%ebx
test   %ebp,%ebp
jne    8052db8 <__sprintf_chk@plt+0x9108>
mov    0x30(%esp),%eax
addl   $0x8,0xc(%esp)
mov    0xc(%esp),%edx
cmp    %edx,0x4(%eax)
ja     8052da4 <__sprintf_chk@plt+0x90f4>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1c,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    0xc(%esp),%ebx
mov    0x10(%esp),%esi
movzbl (%ebx),%ecx
test   %cl,%cl
je     8052e32 <__sprintf_chk@plt+0x9182>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl %cl,%eax
mov    %edx,%ecx
shl    $0x5,%ecx
add    $0x1,%ebx
sub    %edx,%ecx
xor    %edx,%edx
add    %ecx,%eax
movzbl (%ebx),%ecx
div    %esi
test   %cl,%cl
jne    8052e18 <__sprintf_chk@plt+0x9168>
mov    %edx,%eax
pop    %ebx
pop    %esi
ret
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
movl   $0x0,(%eax)
movl   $0x3f800000,0x4(%eax)
movl   $0x3f4ccccd,0x8(%eax)
movl   $0x3fb4fdf4,0xc(%eax)
movb   $0x0,0x10(%eax)
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %ebp
mov    $0x8052760,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x48(%esp),%edi
mov    0x4c(%esp),%esi
movl   $0x28,(%esp)
mov    0x44(%esp),%ebx
test   %edi,%edi
cmove  %eax,%edi
test   %esi,%esi
mov    $0x8052770,%eax
cmove  %eax,%esi
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8052fa8 <__sprintf_chk@plt+0x92f8>
test   %ebx,%ebx
mov    $0x805d964,%eax
cmove  %eax,%ebx
mov    %ebx,0x14(%ebp)
lea    0x14(%ebp),%eax
call   8052870 <__sprintf_chk@plt+0x8bc0>
test   %al,%al
je     8052f91 <__sprintf_chk@plt+0x92e1>
cmpb   $0x0,0x10(%ebx)
flds   0x8(%ebx)
jne    8052f20 <__sprintf_chk@plt+0x9270>
mov    0x40(%esp),%ecx
xor    %ebx,%ebx
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x805d988
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8052f88 <__sprintf_chk@plt+0x92d8>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,0x40(%esp)
jmp    8052f22 <__sprintf_chk@plt+0x9272>
nop
fstp   %st(0)
mov    0x40(%esp),%eax
call   80526d0 <__sprintf_chk@plt+0x8a20>
cmp    $0x3fffffff,%eax
mov    %eax,%ebx
ja     8052f8a <__sprintf_chk@plt+0x92da>
test   %eax,%eax
mov    %eax,0x8(%ebp)
je     8052f91 <__sprintf_chk@plt+0x92e1>
movl   $0x8,0x4(%esp)
mov    %eax,(%esp)
call   8049ca0 <calloc@plt>
test   %eax,%eax
mov    %eax,0x0(%ebp)
je     8052f91 <__sprintf_chk@plt+0x92e1>
lea    (%eax,%ebx,8),%eax
mov    %eax,0x4(%ebp)
mov    0x50(%esp),%eax
movl   $0x0,0xc(%ebp)
movl   $0x0,0x10(%ebp)
mov    %edi,0x18(%ebp)
mov    %eax,0x20(%ebp)
mov    %ebp,%eax
mov    %esi,0x1c(%ebp)
movl   $0x0,0x24(%ebp)
add    $0x2c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
movl   $0x0,0x8(%ebp)
mov    %ebp,(%esp)
call   80496b0 <free@plt>
add    $0x2c,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    8052f7c <__sprintf_chk@plt+0x92cc>
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8053026 <__sprintf_chk@plt+0x9376>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
test   %eax,%eax
je     805301e <__sprintf_chk@plt+0x936e>
mov    0x4(%edi),%ebx
mov    0x20(%esi),%edx
test   %ebx,%ebx
jne    8052fe2 <__sprintf_chk@plt+0x9332>
jmp    8053006 <__sprintf_chk@plt+0x9356>
lea    0x0(%esi),%esi
mov    %eax,%ebx
test   %edx,%edx
je     8052ff0 <__sprintf_chk@plt+0x9340>
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *%edx
mov    0x20(%esi),%edx
mov    0x4(%ebx),%eax
mov    0x24(%esi),%ecx
movl   $0x0,(%ebx)
test   %eax,%eax
mov    %ecx,0x4(%ebx)
mov    %ebx,0x24(%esi)
jne    8052fe0 <__sprintf_chk@plt+0x9330>
test   %edx,%edx
je     8053011 <__sprintf_chk@plt+0x9361>
mov    (%edi),%eax
mov    %eax,(%esp)
call   *%edx
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     8052fc8 <__sprintf_chk@plt+0x9318>
movl   $0x0,0xc(%esi)
movl   $0x0,0x10(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    0x20(%esi),%edx
test   %edx,%edx
je     8053058 <__sprintf_chk@plt+0x93a8>
mov    0x10(%esi),%eax
test   %eax,%eax
jne    80530ca <__sprintf_chk@plt+0x941a>
mov    0x4(%esi),%eax
mov    (%esi),%edi
cmp    %eax,%edi
jae    8053091 <__sprintf_chk@plt+0x93e1>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%edi),%eax
test   %eax,%eax
jne    805307a <__sprintf_chk@plt+0x93ca>
jmp    8053089 <__sprintf_chk@plt+0x93d9>
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   80496b0 <free@plt>
test   %ebx,%ebx
jne    8053078 <__sprintf_chk@plt+0x93c8>
add    $0x8,%edi
cmp    %edi,0x4(%esi)
ja     8053068 <__sprintf_chk@plt+0x93b8>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    80530a2 <__sprintf_chk@plt+0x93f2>
jmp    80530b1 <__sprintf_chk@plt+0x9401>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   80496b0 <free@plt>
test   %ebx,%ebx
jne    80530a0 <__sprintf_chk@plt+0x93f0>
mov    (%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %esi,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    80496b0 <free@plt>
mov    (%esi),%edi
cmp    0x4(%esi),%edi
jae    8053091 <__sprintf_chk@plt+0x93e1>
lea    0x0(%esi,%eiz,1),%esi
mov    (%edi),%eax
mov    %edi,%ebx
test   %eax,%eax
jne    80530ea <__sprintf_chk@plt+0x943a>
jmp    80530f7 <__sprintf_chk@plt+0x9447>
lea    0x0(%esi),%esi
mov    (%ebx),%eax
mov    %eax,(%esp)
call   *0x20(%esi)
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
jne    80530e8 <__sprintf_chk@plt+0x9438>
mov    0x4(%esi),%eax
add    $0x8,%edi
cmp    %edi,%eax
ja     80530d8 <__sprintf_chk@plt+0x9428>
jmp    805305b <__sprintf_chk@plt+0x93ab>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x50,%esp
mov    0x60(%esp),%esi
mov    0x64(%esp),%eax
mov    0x14(%esi),%edi
cmpb   $0x0,0x10(%edi)
flds   0x8(%edi)
jne    8053170 <__sprintf_chk@plt+0x94c0>
xor    %ebx,%ebx
mov    %eax,0x10(%esp)
mov    %ebx,0x14(%esp)
fildll 0x10(%esp)
fdivp  %st,%st(1)
flds   0x805d988
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    8053250 <__sprintf_chk@plt+0x95a0>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%ecx
mov    %ecx,%eax
jmp    8053172 <__sprintf_chk@plt+0x94c2>
fstp   %st(0)
call   80526d0 <__sprintf_chk@plt+0x8a20>
mov    %eax,%ebx
lea    -0x1(%eax),%eax
cmp    $0x3ffffffe,%eax
ja     8053252 <__sprintf_chk@plt+0x95a2>
cmp    %ebx,0x8(%esi)
je     8053240 <__sprintf_chk@plt+0x9590>
movl   $0x8,0x4(%esp)
mov    %ebx,(%esp)
call   8049ca0 <calloc@plt>
test   %eax,%eax
mov    %eax,0x28(%esp)
je     8053252 <__sprintf_chk@plt+0x95a2>
lea    (%eax,%ebx,8),%eax
xor    %ecx,%ecx
mov    %eax,0x2c(%esp)
mov    0x18(%esi),%eax
mov    %esi,%edx
mov    %ebx,0x30(%esp)
movl   $0x0,0x34(%esp)
movl   $0x0,0x38(%esp)
mov    %eax,0x40(%esp)
mov    0x1c(%esi),%eax
mov    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    0x20(%esi),%eax
mov    %eax,0x48(%esp)
mov    0x24(%esi),%eax
mov    %eax,0x4c(%esp)
lea    0x28(%esp),%eax
call   8052920 <__sprintf_chk@plt+0x8c70>
test   %al,%al
mov    %eax,%ebx
jne    8053260 <__sprintf_chk@plt+0x95b0>
mov    0x4c(%esp),%eax
mov    $0x1,%ecx
lea    0x28(%esp),%edx
mov    %eax,0x24(%esi)
mov    %esi,%eax
call   8052920 <__sprintf_chk@plt+0x8c70>
test   %al,%al
je     8053295 <__sprintf_chk@plt+0x95e5>
xor    %ecx,%ecx
mov    %esi,%eax
lea    0x28(%esp),%edx
call   8052920 <__sprintf_chk@plt+0x8c70>
test   %al,%al
je     8053295 <__sprintf_chk@plt+0x95e5>
mov    0x28(%esp),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
nop
add    $0x50,%esp
mov    $0x1,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
fstp   %st(0)
add    $0x50,%esp
xor    %ebx,%ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    (%esi),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    0x28(%esp),%eax
mov    %eax,(%esi)
mov    0x2c(%esp),%eax
mov    %eax,0x4(%esi)
mov    0x30(%esp),%eax
mov    %eax,0x8(%esi)
mov    0x34(%esp),%eax
mov    %eax,0xc(%esi)
mov    0x4c(%esp),%eax
mov    %eax,0x24(%esi)
add    $0x50,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
call   8049bf0 <abort@plt>
lea    0x0(%esi),%esi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x44(%esp),%edi
mov    0x40(%esp),%esi
mov    0x48(%esp),%ebx
test   %edi,%edi
je     8053428 <__sprintf_chk@plt+0x9778>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   80527b0 <__sprintf_chk@plt+0x8b00>
test   %eax,%eax
je     80532e8 <__sprintf_chk@plt+0x9638>
test   %ebx,%ebx
je     8053368 <__sprintf_chk@plt+0x96b8>
mov    %eax,(%ebx)
xor    %eax,%eax
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  0x8(%eax)
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8053328 <__sprintf_chk@plt+0x9678>
jmp    8053378 <__sprintf_chk@plt+0x96c8>
lea    0x0(%esi),%esi
fstp   %st(0)
fstp   %st(0)
lea    0x0(%esi,%eiz,1),%esi
mov    0x2c(%esp),%ebx
mov    (%ebx),%eax
test   %eax,%eax
je     8053430 <__sprintf_chk@plt+0x9780>
mov    0x24(%esi),%eax
test   %eax,%eax
je     8053444 <__sprintf_chk@plt+0x9794>
mov    0x4(%eax),%edx
mov    %edx,0x24(%esi)
mov    0x4(%ebx),%edx
mov    %edi,(%eax)
mov    %edx,0x4(%eax)
mov    %eax,0x4(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
add    $0x30,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x14(%esi),%eax
call   8052870 <__sprintf_chk@plt+0x8bc0>
mov    0x14(%esi),%ecx
xor    %edx,%edx
mov    0x8(%esi),%eax
flds   0x8(%ecx)
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
fld    %st(2)
fmul   %st(2),%st
fxch   %st(1)
fucomip %st(1),%st
fstp   %st(0)
jbe    8053320 <__sprintf_chk@plt+0x9670>
cmpb   $0x0,0x10(%ecx)
fmuls  0xc(%ecx)
jne    80533c8 <__sprintf_chk@plt+0x9718>
fmulp  %st,%st(1)
jmp    80533ca <__sprintf_chk@plt+0x971a>
lea    0x0(%esi),%esi
fstp   %st(1)
flds   0x805d988
fxch   %st(1)
fucomi %st(1),%st
fstp   %st(1)
jae    805345a <__sprintf_chk@plt+0x97aa>
fnstcw 0x1e(%esp)
mov    %esi,(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
call   8053110 <__sprintf_chk@plt+0x9460>
test   %al,%al
je     805345c <__sprintf_chk@plt+0x97ac>
movl   $0x0,(%esp)
lea    0x2c(%esp),%ecx
mov    %edi,%edx
mov    %esi,%eax
call   80527b0 <__sprintf_chk@plt+0x8b00>
test   %eax,%eax
je     8053328 <__sprintf_chk@plt+0x9678>
call   8049bf0 <abort@plt>
lea    0x0(%esi),%esi
mov    %edi,(%ebx)
mov    $0x1,%eax
addl   $0x1,0x10(%esi)
addl   $0x1,0xc(%esi)
jmp    80532de <__sprintf_chk@plt+0x962e>
movl   $0x8,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
jne    8053347 <__sprintf_chk@plt+0x9697>
jmp    805345c <__sprintf_chk@plt+0x97ac>
fstp   %st(0)
mov    $0xffffffff,%eax
jmp    80532de <__sprintf_chk@plt+0x962e>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
jmp    80532a0 <__sprintf_chk@plt+0x95f0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x28,%esp
lea    0x1c(%esp),%eax
mov    0x34(%esp),%ebx
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80532a0 <__sprintf_chk@plt+0x95f0>
cmp    $0xffffffff,%eax
je     80534b8 <__sprintf_chk@plt+0x9808>
test   %eax,%eax
mov    %ebx,%eax
cmove  0x1c(%esp),%eax
add    $0x28,%esp
pop    %ebx
ret
nop
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
jmp    80534ae <__sprintf_chk@plt+0x97fe>
lea    0x0(%esi,%eiz,1),%esi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x50(%esp),%esi
lea    0x2c(%esp),%ecx
mov    0x54(%esp),%edx
movl   $0x1,(%esp)
mov    %esi,%eax
call   80527b0 <__sprintf_chk@plt+0x8b00>
test   %eax,%eax
mov    %eax,%edi
je     80535f8 <__sprintf_chk@plt+0x9948>
mov    %eax,%ebp
mov    0x2c(%esp),%eax
subl   $0x1,0x10(%esi)
mov    (%eax),%eax
test   %eax,%eax
jne    8053508 <__sprintf_chk@plt+0x9858>
jmp    8053518 <__sprintf_chk@plt+0x9868>
lea    0x0(%esi),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0xc(%esi),%eax
xor    %edx,%edx
xor    %ebx,%ebx
sub    $0x1,%eax
mov    %eax,0xc(%esi)
mov    %eax,0x10(%esp)
mov    %edx,0x14(%esp)
mov    0x8(%esi),%ecx
mov    0x14(%esi),%eax
fildll 0x10(%esp)
mov    %ebx,0x14(%esp)
mov    %ecx,0x10(%esp)
fildll 0x10(%esp)
fmuls  (%eax)
fucomip %st(1),%st
fstp   %st(0)
jbe    8053508 <__sprintf_chk@plt+0x9858>
lea    0x14(%esi),%eax
call   8052870 <__sprintf_chk@plt+0x8bc0>
mov    0x8(%esi),%eax
xor    %edx,%edx
mov    0x14(%esi),%ecx
mov    %edx,0x14(%esp)
xor    %edx,%edx
mov    %eax,0x10(%esp)
mov    0xc(%esi),%eax
fildll 0x10(%esp)
mov    %edx,0x14(%esp)
mov    %eax,0x10(%esp)
fildll 0x10(%esp)
flds   (%ecx)
fmul   %st(2),%st
fucomip %st(1),%st
fstp   %st(0)
jbe    8053500 <__sprintf_chk@plt+0x9850>
cmpb   $0x0,0x10(%ecx)
fmuls  0x4(%ecx)
je     8053600 <__sprintf_chk@plt+0x9950>
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
mov    %eax,0x4(%esp)
mov    %edi,%ebp
mov    %esi,(%esp)
call   8053110 <__sprintf_chk@plt+0x9460>
test   %al,%al
jne    8053508 <__sprintf_chk@plt+0x9858>
mov    0x24(%esi),%eax
test   %eax,%eax
jne    80535da <__sprintf_chk@plt+0x992a>
lea    0x0(%esi,%eiz,1),%esi
jmp    80535e9 <__sprintf_chk@plt+0x9939>
lea    0x0(%esi),%esi
mov    %ebx,%eax
mov    0x4(%eax),%ebx
mov    %eax,(%esp)
call   80496b0 <free@plt>
test   %ebx,%ebx
jne    80535d8 <__sprintf_chk@plt+0x9928>
movl   $0x0,0x24(%esi)
mov    %edi,%ebp
jmp    8053508 <__sprintf_chk@plt+0x9858>
nop
xor    %ebp,%ebp
jmp    8053508 <__sprintf_chk@plt+0x9858>
nop
fmuls  0x8(%ecx)
fnstcw 0x1e(%esp)
movzwl 0x1e(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x1c(%esp)
fldcw  0x1c(%esp)
fistpll 0x10(%esp)
fldcw  0x1e(%esp)
mov    0x10(%esp),%eax
jmp    80535af <__sprintf_chk@plt+0x98ff>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0xcc,%esp
mov    %gs:0x14,%ecx
mov    %ecx,0xbc(%esp)
xor    %ecx,%ecx
mov    0xec(%esp),%ecx
mov    0xe0(%esp),%eax
mov    0xe4(%esp),%edx
mov    0xf4(%esp),%edi
and    $0x3,%ecx
mov    0xf0(%esp),%esi
mov    %eax,0x50(%esp)
mov    0xe8(%esp),%eax
mov    %ecx,0x58(%esp)
mov    0xec(%esp),%ecx
mov    %edx,0x54(%esp)
mov    0xfc(%esp),%edx
mov    %eax,%ebp
and    $0x20,%ecx
mov    %eax,0x4c(%esp)
mov    0xf8(%esp),%eax
cmp    $0x1,%ecx
mov    %ecx,0x64(%esp)
sbb    %ecx,%ecx
mov    %ecx,0x40(%esp)
andl   $0xffffffe8,0x40(%esp)
addl   $0x400,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049b60 <localeconv@plt>
mov    (%eax),%ecx
mov    %eax,%ebx
mov    %ecx,(%esp)
mov    %ecx,0x60(%esp)
call   8049a10 <strlen@plt>
mov    $0x1,%edx
mov    %eax,%ecx
lea    -0x1(%eax),%eax
cmp    $0x10,%eax
mov    $0x805b474,%eax
cmovb  %ecx,%edx
mov    0x8(%ebx),%ecx
cmovb  0x60(%esp),%eax
mov    %edx,0x68(%esp)
mov    %ecx,0x6c(%esp)
mov    0x4(%ebx),%ecx
mov    %eax,0x60(%esp)
mov    %ecx,(%esp)
mov    %ecx,%ebx
call   8049a10 <strlen@plt>
mov    %ebp,%ecx
cmp    $0x11,%eax
mov    $0x805dfe5,%eax
cmovb  %ebx,%eax
add    $0x288,%ecx
cmp    %edi,0x3c(%esp)
mov    %eax,0x44(%esp)
mov    %ecx,0x48(%esp)
ja     8053a72 <__sprintf_chk@plt+0x9dc2>
jae    8053a68 <__sprintf_chk@plt+0x9db8>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
or     %eax,%edx
je     8053ca8 <__sprintf_chk@plt+0x9ff8>
mov    0x54(%esp),%edx
mov    0x50(%esp),%eax
mov    %edx,0x8c(%esp)
test   %edx,%edx
mov    %eax,0x88(%esp)
fildll 0x88(%esp)
js     8053fe8 <__sprintf_chk@plt+0xa338>
mov    %esi,0x88(%esp)
test   %edi,%edi
mov    %edi,0x8c(%esp)
fildll 0x88(%esp)
js     8053fc8 <__sprintf_chk@plt+0xa318>
mov    0x3c(%esp),%edx
mov    0x38(%esp),%eax
mov    %edx,0x8c(%esp)
test   %edx,%edx
mov    %eax,0x88(%esp)
fildll 0x88(%esp)
js     8053fd8 <__sprintf_chk@plt+0xa328>
fdivrp %st,%st(1)
testb  $0x10,0xec(%esp)
fmulp  %st,%st(1)
je     8053b78 <__sprintf_chk@plt+0x9ec8>
fildl  0x40(%esp)
xor    %ebp,%ebp
fld    %st(0)
jmp    80537e4 <__sprintf_chk@plt+0x9b34>
fstp   %st(1)
fxch   %st(2)
fld    %st(0)
add    $0x1,%ebp
fmul   %st(2),%st
fxch   %st(3)
fucomi %st(3),%st
jb     8053800 <__sprintf_chk@plt+0x9b50>
cmp    $0x8,%ebp
jne    80537e0 <__sprintf_chk@plt+0x9b30>
fstp   %st(2)
fstp   %st(2)
jmp    8053804 <__sprintf_chk@plt+0x9b54>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(2)
fstp   %st(2)
fdivp  %st,%st(1)
cmpl   $0x1,0x58(%esp)
fld    %st(0)
je     80538d8 <__sprintf_chk@plt+0x9c28>
fstp   %st(0)
fldt   0x805d9f0
fucomip %st(1),%st
jbe    8053fc0 <__sprintf_chk@plt+0xa310>
flds   0x805d9e8
fxch   %st(1)
fucomi %st(1),%st
jae    80541c0 <__sprintf_chk@plt+0xa510>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%esi
xor    %eax,%eax
xor    %edx,%edx
test   %esi,%esi
jne    80538b1 <__sprintf_chk@plt+0x9c01>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     8054355 <__sprintf_chk@plt+0xa6a5>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomi %st(1),%st
fstp   %st(1)
jp     80538b1 <__sprintf_chk@plt+0x9c01>
je     80542f8 <__sprintf_chk@plt+0xa648>
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
js     8054301 <__sprintf_chk@plt+0xa651>
fxch   %st(1)
jmp    80538da <__sprintf_chk@plt+0x9c2a>
xchg   %ax,%ax
fxch   %st(1)
fstpt  0x20(%esp)
mov    0x4c(%esp),%edi
movl   $0x805d992,0xc(%esp)
fstpt  0x10(%esp)
mov    %edi,(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
mov    0x68(%esp),%edi
mov    0x64(%esp),%edx
add    $0x1,%edi
mov    %eax,%esi
xor    %eax,%eax
test   %edx,%edx
sete   %al
lea    0x1(%edi,%eax,1),%eax
cmp    %eax,%esi
fldt   0x20(%esp)
ja     8053950 <__sprintf_chk@plt+0x9ca0>
testb  $0x8,0xec(%esp)
je     8053bc8 <__sprintf_chk@plt+0x9f18>
mov    0x4c(%esp),%eax
cmpb   $0x30,-0x1(%eax,%esi,1)
jne    8053bd0 <__sprintf_chk@plt+0x9f20>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x1,0x58(%esp)
fmuls  0x805d9ec
je     8053a28 <__sprintf_chk@plt+0x9d78>
fldt   0x805d9f0
fucomip %st(1),%st
jbe    8053a28 <__sprintf_chk@plt+0x9d78>
flds   0x805d9e8
fxch   %st(1)
fucomi %st(1),%st
jae    8054298 <__sprintf_chk@plt+0xa5e8>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%esi
xor    %eax,%eax
xor    %edx,%edx
test   %esi,%esi
jne    8053a00 <__sprintf_chk@plt+0x9d50>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     8054362 <__sprintf_chk@plt+0xa6b2>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomip %st(1),%st
fstp   %st(0)
jp     8053a02 <__sprintf_chk@plt+0x9d52>
jne    8053a02 <__sprintf_chk@plt+0x9d52>
xor    %eax,%eax
xor    %edx,%edx
jmp    8053a02 <__sprintf_chk@plt+0x9d52>
nop
fstp   %st(0)
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
jns    8053a28 <__sprintf_chk@plt+0x9d78>
fadds  0x805d9e4
lea    0x0(%esi),%esi
fdivs  0x805d9ec
mov    0x4c(%esp),%edi
movl   $0x805d98c,0xc(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %edi,(%esp)
fstpt  0x10(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %edi,(%esp)
xor    %edi,%edi
call   8049a10 <strlen@plt>
mov    %eax,%esi
jmp    8053bd8 <__sprintf_chk@plt+0x9f28>
nop
cmp    %esi,0x38(%esp)
jbe    8053739 <__sprintf_chk@plt+0x9a89>
mov    %edi,%eax
or     %esi,%eax
je     805375d <__sprintf_chk@plt+0x9aad>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
or     %eax,%edx
jne    805375d <__sprintf_chk@plt+0x9aad>
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    0x50(%esp),%edi
mov    0x54(%esp),%ebp
mov    %edi,(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,%ebx
mov    %eax,%esi
mov    %edx,0xc(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
mov    $0xa,%ecx
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
imul   $0xa,%edx,%edx
mov    %edx,0x20(%esp)
mul    %ecx
mov    %eax,0x50(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x54(%esp)
mov    0x50(%esp),%edx
add    %eax,0x54(%esp)
mov    0x54(%esp),%ecx
mov    %edx,(%esp)
mov    %ecx,0x4(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %edi,(%esp)
mov    %ebp,0x4(%esp)
shld   $0x1,%eax,%edx
add    %eax,%eax
mov    %eax,0x70(%esp)
mov    %edx,0x74(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    0x54(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %ebx,0xc(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,0x24(%esp)
mov    0x50(%esp),%edx
mov    %eax,0x20(%esp)
mov    %edx,(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
cmp    0x74(%esp),%ebx
mov    %eax,0x50(%esp)
jae    8054210 <__sprintf_chk@plt+0xa560>
mov    $0x3,%ebx
jmp    8053d34 <__sprintf_chk@plt+0xa084>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x1,0x58(%esp)
je     8053b8d <__sprintf_chk@plt+0x9edd>
fldt   0x805d9f0
fucomip %st(1),%st
ja     8053f00 <__sprintf_chk@plt+0xa250>
mov    0x4c(%esp),%edi
mov    $0xffffffff,%ebp
fstpt  0x10(%esp)
movl   $0x805d98c,0xc(%esp)
mov    %edi,(%esp)
movl   $0xffffffff,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049cb0 <__sprintf_chk@plt>
mov    %edi,(%esp)
xor    %edi,%edi
call   8049a10 <strlen@plt>
mov    %eax,%esi
jmp    8053bd8 <__sprintf_chk@plt+0x9f28>
fstp   %st(0)
jmp    8053bd8 <__sprintf_chk@plt+0x9f28>
lea    0x0(%esi,%eiz,1),%esi
fstp   %st(0)
lea    0x0(%esi),%esi
mov    0x48(%esp),%ebx
mov    0x4c(%esp),%eax
mov    %esi,0x8(%esp)
sub    %esi,%ebx
sub    %edi,%esi
mov    %eax,0x4(%esp)
add    %ebx,%esi
mov    %ebx,(%esp)
call   8049690 <memmove@plt>
testb  $0x4,0xec(%esp)
jne    8053e08 <__sprintf_chk@plt+0xa158>
testb  $0x80,0xec(%esp)
je     8053c7d <__sprintf_chk@plt+0x9fcd>
cmp    $0xffffffff,%ebp
je     8053ff8 <__sprintf_chk@plt+0xa348>
mov    0xec(%esp),%eax
mov    %ebp,%edi
and    $0x100,%eax
or     %eax,%edi
je     8053c7d <__sprintf_chk@plt+0x9fcd>
testb  $0x40,0xec(%esp)
jne    8053ee0 <__sprintf_chk@plt+0xa230>
test   %ebp,%ebp
je     8054462 <__sprintf_chk@plt+0xa7b2>
mov    0x64(%esp),%esi
mov    0x48(%esp),%edi
test   %esi,%esi
lea    0x1(%edi),%edx
je     8053ec8 <__sprintf_chk@plt+0xa218>
movzbl 0x805d9d8(%ebp),%ecx
mov    0x48(%esp),%edi
mov    %cl,(%edi)
test   %eax,%eax
je     805446b <__sprintf_chk@plt+0xa7bb>
mov    0x64(%esp),%ecx
test   %ecx,%ecx
jne    8053eb0 <__sprintf_chk@plt+0xa200>
lea    0x1(%edx),%eax
mov    %eax,0x48(%esp)
movb   $0x42,(%edx)
mov    0xbc(%esp),%edi
xor    %gs:0x14,%edi
mov    0x48(%esp),%eax
movb   $0x0,(%eax)
mov    %ebx,%eax
jne    805445d <__sprintf_chk@plt+0xa7ad>
add    $0xcc,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    0x3c(%esp),%edx
mov    %esi,(%esp)
mov    %edi,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    %eax,%ecx
mov    %edx,%ebx
mov    0x54(%esp),%edx
mov    %eax,0x78(%esp)
mov    0x50(%esp),%eax
mov    %ebx,0x70(%esp)
mov    %ecx,0x8(%esp)
mov    %eax,%ebp
mov    %ecx,%eax
imul   %ebx,%ebp
mov    %edx,%ebx
mull   0x50(%esp)
imul   %ecx,%ebx
mov    %eax,0x20(%esp)
mov    0x70(%esp),%eax
add    %ebp,%ebx
mov    %edx,0x24(%esp)
add    %ebx,0x24(%esp)
mov    0x24(%esp),%edx
mov    %eax,0xc(%esp)
mov    0x20(%esp),%eax
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    0x50(%esp),%ecx
mov    0x54(%esp),%ebx
xor    %ecx,%eax
xor    %ebx,%edx
or     %eax,%edx
jne    805375d <__sprintf_chk@plt+0x9aad>
xor    %ebx,%ebx
movl   $0x0,0x50(%esp)
mov    0xec(%esp),%eax
and    $0x10,%eax
mov    %eax,0x7c(%esp)
je     8054060 <__sprintf_chk@plt+0xa3b0>
xor    %edi,%edi
mov    0x40(%esp),%esi
cmpl   $0x0,0x24(%esp)
jbe    8054280 <__sprintf_chk@plt+0xa5d0>
xor    %ebp,%ebp
mov    %ebp,%ecx
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
mov    0x24(%esp),%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
mov    %ecx,0x78(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
mov    0x50(%esp),%ecx
xor    %edx,%edx
mov    %esi,0x8(%esp)
mov    %edi,0xc(%esp)
lea    (%eax,%eax,4),%eax
lea    (%ecx,%eax,2),%eax
mov    %ebx,%ecx
divl   0x40(%esp)
sar    %ecx
lea    (%ecx,%edx,2),%ebp
mov    0x24(%esp),%ecx
mov    0x20(%esp),%edx
add    %ebp,%ebx
mov    %eax,0x70(%esp)
mov    %ecx,0x4(%esp)
mov    %edx,(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    0x78(%esp),%ecx
cmp    %ebp,0x40(%esp)
mov    %eax,0x20(%esp)
mov    0x70(%esp),%eax
mov    %edx,0x24(%esp)
mov    %eax,0x50(%esp)
jbe    8054338 <__sprintf_chk@plt+0xa688>
test   %ebx,%ebx
setne  %bl
movzbl %bl,%ebx
add    $0x1,%ecx
cmp    0x24(%esp),%edi
jbe    8054310 <__sprintf_chk@plt+0xa660>
cmpl   $0x0,0x24(%esp)
mov    %ecx,%ebp
jbe    805436f <__sprintf_chk@plt+0xa6bf>
mov    0x48(%esp),%esi
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
lea    0x0(%esi),%esi
mov    0x44(%esp),%eax
sub    %ebx,%esi
mov    $0xffffffff,%edi
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    %ebx,0x4(%esp)
add    %esi,%ebx
movl   $0x29,0xc(%esp)
mov    %esi,0x8(%esp)
mov    %eax,0x20(%esp)
lea    0x93(%esp),%eax
mov    %eax,(%esp)
call   8049950 <__memcpy_chk@plt>
mov    %ebx,%eax
mov    %edi,%ebx
mov    %ebp,0x60(%esp)
mov    %eax,%edi
mov    0x6c(%esp),%ebp
jmp    8053e6a <__sprintf_chk@plt+0xa1ba>
mov    0x20(%esp),%eax
sub    %eax,%edi
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    %edi,(%esp)
mov    %eax,0x4(%esp)
call   80496c0 <memcpy@plt>
movzbl 0x0(%ebp),%eax
test   %al,%al
je     8053e7f <__sprintf_chk@plt+0xa1cf>
movzbl %al,%edx
cmp    $0x7e,%al
mov    %edx,%ebx
cmova  %esi,%ebx
add    $0x1,%ebp
cmp    %esi,%ebx
cmova  %esi,%ebx
sub    %ebx,%esi
sub    %ebx,%edi
lea    0x93(%esp),%eax
add    %esi,%eax
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %edi,(%esp)
call   80496c0 <memcpy@plt>
test   %esi,%esi
jne    8053e50 <__sprintf_chk@plt+0xa1a0>
mov    0x60(%esp),%ebp
mov    %edi,%ebx
jmp    8053c04 <__sprintf_chk@plt+0x9f54>
test   %ebp,%ebp
je     8053c73 <__sprintf_chk@plt+0x9fc3>
movb   $0x69,(%edx)
add    $0x1,%edx
jmp    8053c73 <__sprintf_chk@plt+0x9fc3>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x1,%ebp
mov    $0x6b,%ecx
jne    8053c52 <__sprintf_chk@plt+0x9fa2>
jmp    8053c59 <__sprintf_chk@plt+0x9fa9>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4c(%esp),%edi
lea    0x289(%edi),%esi
mov    %esi,0x48(%esp)
movb   $0x20,0x288(%edi)
jmp    8053c37 <__sprintf_chk@plt+0x9f87>
lea    0x0(%esi),%esi
flds   0x805d9e8
fxch   %st(1)
fucomi %st(1),%st
jae    8054170 <__sprintf_chk@plt+0xa4c0>
fstp   %st(1)
fnstcw 0x86(%esp)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fld    %st(0)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x88(%esp),%ecx
mov    0x8c(%esp),%ebx
mov    0x58(%esp),%edi
xor    %eax,%eax
xor    %edx,%edx
test   %edi,%edi
jne    8053f90 <__sprintf_chk@plt+0xa2e0>
mov    %ecx,0x88(%esp)
test   %ebx,%ebx
mov    %ebx,0x8c(%esp)
fildll 0x88(%esp)
js     8054348 <__sprintf_chk@plt+0xa698>
fxch   %st(1)
xor    %edx,%edx
mov    $0x1,%eax
fucomip %st(1),%st
fstp   %st(0)
jp     8053f92 <__sprintf_chk@plt+0xa2e2>
je     80542e8 <__sprintf_chk@plt+0xa638>
jmp    8053f92 <__sprintf_chk@plt+0xa2e2>
fstp   %st(0)
add    %ecx,%eax
adc    %ebx,%edx
mov    %eax,0x88(%esp)
test   %edx,%edx
mov    %edx,0x8c(%esp)
fildll 0x88(%esp)
jns    8053b8d <__sprintf_chk@plt+0x9edd>
fadds  0x805d9e4
jmp    8053b8d <__sprintf_chk@plt+0x9edd>
xchg   %ax,%ax
fld    %st(0)
jmp    80538da <__sprintf_chk@plt+0x9c2a>
nop
fadds  0x805d9e4
jmp    805379f <__sprintf_chk@plt+0x9aef>
nop
lea    0x0(%esi,%eiz,1),%esi
fadds  0x805d9e4
jmp    80537c4 <__sprintf_chk@plt+0x9b14>
nop
lea    0x0(%esi,%eiz,1),%esi
fadds  0x805d9e4
jmp    8053782 <__sprintf_chk@plt+0x9ad2>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x0,0x3c(%esp)
ja     805400c <__sprintf_chk@plt+0xa35c>
xor    %ebp,%ebp
cmpl   $0x1,0x38(%esp)
jbe    8053c17 <__sprintf_chk@plt+0x9f67>
mov    0x40(%esp),%esi
mov    $0x1,%edx
xor    %ecx,%ecx
mov    %edx,%eax
xor    %edi,%edi
mov    $0x1,%ebp
mov    %ecx,%edx
mov    %ebx,0x20(%esp)
xchg   %ax,%ax
mov    %edx,%ecx
mov    %edi,%ebx
imul   %eax,%ebx
imul   %esi,%ecx
mul    %esi
add    %ebx,%ecx
add    %ecx,%edx
cmp    %edx,0x3c(%esp)
ja     8054050 <__sprintf_chk@plt+0xa3a0>
jb     8054046 <__sprintf_chk@plt+0xa396>
cmp    %eax,0x38(%esp)
ja     8054050 <__sprintf_chk@plt+0xa3a0>
mov    0x20(%esp),%ebx
jmp    8053c17 <__sprintf_chk@plt+0x9f67>
nop
add    $0x1,%ebp
cmp    $0x8,%ebp
jne    8054028 <__sprintf_chk@plt+0xa378>
jmp    8054046 <__sprintf_chk@plt+0xa396>
lea    0x0(%esi),%esi
mov    0x48(%esp),%esi
mov    $0xffffffff,%ebp
cmpl   $0x1,0x58(%esp)
je     8054248 <__sprintf_chk@plt+0xa598>
mov    0x58(%esp),%edx
xor    %eax,%eax
test   %edx,%edx
jne    8054087 <__sprintf_chk@plt+0xa3d7>
add    0x50(%esp),%ebx
test   %ebx,%ebx
setg   %al
test   %al,%al
je     8054100 <__sprintf_chk@plt+0xa450>
mov    0x7c(%esp),%edi
addl   $0x1,0x20(%esp)
adcl   $0x0,0x24(%esp)
test   %edi,%edi
je     8054100 <__sprintf_chk@plt+0xa450>
mov    0x40(%esp),%eax
xor    %ebx,%ebx
mov    0x24(%esp),%edx
mov    %eax,%ecx
xor    0x20(%esp),%eax
or     %eax,%edx
jne    8054100 <__sprintf_chk@plt+0xa450>
cmp    $0x8,%ebp
mov    %ecx,0x20(%esp)
mov    %ebx,0x24(%esp)
je     8054100 <__sprintf_chk@plt+0xa450>
add    $0x1,%ebp
testb  $0x8,0xec(%esp)
movl   $0x1,0x20(%esp)
movl   $0x0,0x24(%esp)
jne    8054100 <__sprintf_chk@plt+0xa450>
mov    0x68(%esp),%edi
lea    -0x1(%esi),%eax
movb   $0x30,-0x1(%esi)
sub    %edi,%eax
mov    %eax,%esi
mov    0x60(%esp),%eax
mov    %edi,0x8(%esp)
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80496c0 <memcpy@plt>
xchg   %ax,%ax
mov    %esi,%ebx
lea    0x0(%esi),%esi
mov    0x20(%esp),%eax
sub    $0x1,%ebx
mov    0x24(%esp),%edx
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %eax,(%esp)
mov    %edx,0x4(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
mov    0x24(%esp),%edx
add    $0x30,%eax
mov    %al,(%ebx)
mov    0x20(%esp),%eax
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    %edx,%ecx
or     %eax,%ecx
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
jne    8054108 <__sprintf_chk@plt+0xa458>
jmp    8053bf6 <__sprintf_chk@plt+0x9f46>
nop
lea    0x0(%esi,%eiz,1),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    8053f50 <__sprintf_chk@plt+0xa2a0>
lea    0x0(%esi),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    8053873 <__sprintf_chk@plt+0x9bc3>
lea    0x0(%esi),%esi
ja     8054230 <__sprintf_chk@plt+0xa580>
cmp    0x70(%esp),%esi
ja     8054230 <__sprintf_chk@plt+0xa580>
cmp    0x74(%esp),%ebx
jbe    8054474 <__sprintf_chk@plt+0xa7c4>
mov    $0x2,%ebx
jmp    8053d34 <__sprintf_chk@plt+0xa084>
lea    0x0(%esi,%eiz,1),%esi
mov    0x70(%esp),%eax
xor    %ebx,%ebx
mov    0x74(%esp),%edx
mov    %eax,%edi
or     %edx,%edi
setne  %bl
jmp    8053d34 <__sprintf_chk@plt+0xa084>
xchg   %ax,%ax
mov    0x20(%esp),%eax
movl   $0x0,0x5c(%esp)
and    $0x1,%eax
mov    %eax,0x58(%esp)
mov    %ebx,%eax
cltd
add    0x58(%esp),%eax
adc    0x5c(%esp),%edx
mov    %eax,%edi
xor    %eax,%eax
or     %edx,%edi
mov    0x50(%esp),%edi
setne  %al
add    %eax,%edi
cmp    $0x5,%edi
setg   %al
jmp    8054087 <__sprintf_chk@plt+0xa3d7>
cmp    %esi,0x20(%esp)
jae    8053d59 <__sprintf_chk@plt+0xa0a9>
mov    0x48(%esp),%esi
xor    %ebp,%ebp
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
lea    0x0(%esi),%esi
fnstcw 0x86(%esp)
fsub   %st,%st(1)
fxch   %st(1)
movzwl 0x86(%esp),%eax
mov    $0xc,%ah
mov    %ax,0x84(%esp)
fldcw  0x84(%esp)
fistpll 0x88(%esp)
fldcw  0x86(%esp)
mov    0x8c(%esp),%ebx
mov    0x88(%esp),%ecx
lea    -0x80000000(%ebx),%eax
mov    %eax,%ebx
jmp    80539bf <__sprintf_chk@plt+0x9d0f>
lea    0x0(%esi),%esi
xor    %eax,%eax
xor    %edx,%edx
jmp    8053f92 <__sprintf_chk@plt+0xa2e2>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
xor    %edx,%edx
jmp    80538b1 <__sprintf_chk@plt+0x9c01>
fadds  0x805d9e4
fxch   %st(1)
jmp    80538da <__sprintf_chk@plt+0x9c2a>
xchg   %ax,%ax
jb     805431c <__sprintf_chk@plt+0xa66c>
cmp    0x20(%esp),%esi
ja     8053dec <__sprintf_chk@plt+0xa13c>
cmp    $0x8,%ecx
nop
jne    8053d60 <__sprintf_chk@plt+0xa0b0>
mov    %ecx,%ebp
mov    0x48(%esp),%esi
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebx,0x40(%esp)
sbb    %ebx,%ebx
not    %ebx
add    $0x3,%ebx
jmp    8053ddf <__sprintf_chk@plt+0xa12f>
fadds  0x805d9e4
fxch   %st(1)
jmp    8053f7b <__sprintf_chk@plt+0xa2cb>
fadds  0x805d9e4
fxch   %st(1)
jmp    805389e <__sprintf_chk@plt+0x9bee>
fadds  0x805d9e4
fxch   %st(1)
jmp    80539ea <__sprintf_chk@plt+0x9d3a>
cmpl   $0x9,0x20(%esp)
ja     8053df9 <__sprintf_chk@plt+0xa149>
cmpl   $0x1,0x58(%esp)
je     805440a <__sprintf_chk@plt+0xa75a>
mov    0x58(%esp),%ecx
test   %ebx,%ebx
setg   %al
test   %ecx,%ecx
sete   %dl
and    %edx,%eax
test   %al,%al
je     80543ee <__sprintf_chk@plt+0xa73e>
mov    0x70(%esp),%eax
add    $0x1,%eax
cmp    $0xa,%eax
mov    %eax,0x50(%esp)
je     805442f <__sprintf_chk@plt+0xa77f>
movzbl 0x50(%esp),%eax
xor    %ebx,%ebx
mov    0x4c(%esp),%edi
add    $0x30,%eax
mov    %al,0x287(%edi)
mov    0x68(%esp),%eax
lea    0x287(%edi),%esi
sub    %eax,%esi
mov    %eax,0x8(%esp)
mov    0x60(%esp),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80496c0 <memcpy@plt>
movl   $0x0,0x50(%esp)
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
mov    0x70(%esp),%eax
test   %eax,%eax
jne    80543ad <__sprintf_chk@plt+0xa6fd>
testb  $0x8,0xec(%esp)
jne    805441e <__sprintf_chk@plt+0xa76e>
movl   $0x0,0x50(%esp)
jmp    80543ad <__sprintf_chk@plt+0xa6fd>
mov    0x70(%esp),%eax
and    $0x1,%eax
add    %ebx,%eax
cmp    $0x2,%eax
setg   %al
jmp    8054395 <__sprintf_chk@plt+0xa6e5>
mov    0x48(%esp),%esi
movl   $0x0,0x50(%esp)
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
addl   $0x1,0x20(%esp)
mov    0x20(%esp),%esi
adcl   $0x0,0x24(%esp)
mov    0x24(%esp),%edi
mov    %esi,%eax
xor    $0xa,%eax
or     %edi,%eax
jne    805448b <__sprintf_chk@plt+0xa7db>
mov    0x48(%esp),%esi
xor    %ebx,%ebx
movl   $0x0,0x50(%esp)
jmp    8054069 <__sprintf_chk@plt+0xa3b9>
call   8049790 <__stack_chk_fail@plt>
mov    0x48(%esp),%edx
jmp    8053c5f <__sprintf_chk@plt+0x9faf>
mov    %edx,0x48(%esp)
jmp    8053c7d <__sprintf_chk@plt+0x9fcd>
jb     8053b6a <__sprintf_chk@plt+0x9eba>
cmp    0x70(%esp),%esi
xchg   %ax,%ax
jae    8054222 <__sprintf_chk@plt+0xa572>
jmp    8053b6a <__sprintf_chk@plt+0x9eba>
xor    %ebx,%ebx
lea    0x0(%esi),%esi
jmp    80543f6 <__sprintf_chk@plt+0xa746>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x40(%esp),%ebx
mov    0x48(%esp),%esi
test   %ebx,%ebx
je     80545d0 <__sprintf_chk@plt+0xa920>
xor    %edi,%edi
cmpb   $0x27,(%ebx)
je     8054548 <__sprintf_chk@plt+0xa898>
movl   $0x4,0xc(%esp)
movl   $0x805d9c4,0x8(%esp)
movl   $0x805d9cc,0x4(%esp)
mov    %ebx,(%esp)
call   80518b0 <__sprintf_chk@plt+0x7c00>
test   %eax,%eax
js     8054558 <__sprintf_chk@plt+0xa8a8>
or     0x805d9c4(,%eax,4),%edi
mov    $0x1,%edx
movl   $0x1,(%esi)
xor    %ecx,%ecx
movl   $0x0,0x4(%esi)
mov    0x44(%esp),%eax
mov    %edi,(%eax)
xor    %eax,%eax
or     %edx,%ecx
je     8054518 <__sprintf_chk@plt+0xa868>
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805d9a2,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
je     80545c0 <__sprintf_chk@plt+0xa910>
mov    $0x200,%eax
xor    %edx,%edx
mov    %eax,(%esi)
mov    $0x4,%eax
mov    %edx,0x4(%esi)
add    $0x30,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%ebx
mov    $0x4,%di
jmp    80544c1 <__sprintf_chk@plt+0xa811>
lea    0x0(%esi,%eiz,1),%esi
lea    0x2c(%esp),%eax
movl   $0x805d9b2,0x10(%esp)
mov    %esi,0xc(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,0x4(%esp)
mov    %ebx,(%esp)
call   8058ec0 <__sprintf_chk@plt+0xf210>
test   %eax,%eax
jne    8054620 <__sprintf_chk@plt+0xa970>
movzbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%al
jbe    80545b5 <__sprintf_chk@plt+0xa905>
mov    0x2c(%esp),%edx
cmp    %edx,%ebx
jne    80545a8 <__sprintf_chk@plt+0xa8f8>
jmp    8054638 <__sprintf_chk@plt+0xa988>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %edx,%ebx
je     8054638 <__sprintf_chk@plt+0xa988>
add    $0x1,%ebx
movzbl (%ebx),%eax
sub    $0x30,%eax
cmp    $0x9,%al
ja     80545a0 <__sprintf_chk@plt+0xa8f0>
mov    (%esi),%edx
mov    0x4(%esi),%ecx
jmp    8054500 <__sprintf_chk@plt+0xa850>
nop
mov    $0x400,%eax
xor    %edx,%edx
jmp    8054533 <__sprintf_chk@plt+0xa883>
lea    0x0(%esi,%eiz,1),%esi
movl   $0x805b3c8,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    80544b6 <__sprintf_chk@plt+0xa806>
movl   $0x805d998,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
mov    %eax,%ebx
jne    80544b6 <__sprintf_chk@plt+0xa806>
movl   $0x805d9a2,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
je     8054662 <__sprintf_chk@plt+0xa9b2>
mov    $0x200,%edx
xor    %ecx,%ecx
mov    %edx,(%esi)
xor    %edi,%edi
mov    %ecx,0x4(%esi)
jmp    8054500 <__sprintf_chk@plt+0xa850>
nop
mov    0x44(%esp),%edx
mov    0x4(%esi),%ecx
movl   $0x0,(%edx)
mov    (%esi),%edx
jmp    8054508 <__sprintf_chk@plt+0xa858>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x42,-0x1(%edx)
je     8054650 <__sprintf_chk@plt+0xa9a0>
or     $0x80,%edi
or     $0x20,%edi
jmp    80545b5 <__sprintf_chk@plt+0xa905>
lea    0x0(%esi,%eiz,1),%esi
or     $0x180,%edi
cmpb   $0x69,-0x2(%edx)
jne    80545b5 <__sprintf_chk@plt+0xa905>
jmp    8054644 <__sprintf_chk@plt+0xa994>
mov    $0x400,%edx
xor    %ecx,%ecx
jmp    8054613 <__sprintf_chk@plt+0xa963>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x8063e54,%ebx
mov    0x20(%esp),%esi
test   %ebx,%ebx
jne    805468f <__sprintf_chk@plt+0xa9df>
jmp    80546a8 <__sprintf_chk@plt+0xa9f8>
xchg   %ax,%ax
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     80546a8 <__sprintf_chk@plt+0xa9f8>
cmp    %esi,(%ebx)
jne    8054688 <__sprintf_chk@plt+0xa9d8>
xor    %eax,%eax
cmpb   $0x0,0x8(%ebx)
lea    0x8(%ebx),%edx
cmovne %edx,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    %esi,(%esp)
call   8049630 <getpwuid@plt>
test   %eax,%eax
je     80546ec <__sprintf_chk@plt+0xaa3c>
mov    (%eax),%edi
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
add    $0x9,%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %esi,(%eax)
mov    %eax,%ebx
lea    0x8(%eax),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
mov    0x8063e54,%eax
mov    %ebx,0x8063e54
mov    %eax,0x4(%ebx)
jmp    8054693 <__sprintf_chk@plt+0xa9e3>
mov    $0x9,%al
mov    $0x805dfe5,%edi
jmp    80546c1 <__sprintf_chk@plt+0xaa11>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x8063e54,%ebx
mov    0x20(%esp),%edi
test   %ebx,%ebx
je     8054750 <__sprintf_chk@plt+0xaaa0>
movzbl (%edi),%esi
jmp    8054727 <__sprintf_chk@plt+0xaa77>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     8054750 <__sprintf_chk@plt+0xaaa0>
mov    %esi,%eax
cmp    %al,0x8(%ebx)
jne    8054720 <__sprintf_chk@plt+0xaa70>
lea    0x8(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    8054720 <__sprintf_chk@plt+0xaa70>
mov    %ebx,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x8063e50,%ebx
test   %ebx,%ebx
je     8054790 <__sprintf_chk@plt+0xaae0>
movzbl (%edi),%esi
jmp    8054767 <__sprintf_chk@plt+0xaab7>
nop
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     8054790 <__sprintf_chk@plt+0xaae0>
mov    %esi,%eax
cmp    %al,0x8(%ebx)
jne    8054760 <__sprintf_chk@plt+0xaab0>
lea    0x8(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    8054760 <__sprintf_chk@plt+0xaab0>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %edi,(%esp)
call   80495d0 <getpwnam@plt>
mov    %edi,(%esp)
mov    %eax,%esi
call   8049a10 <strlen@plt>
add    $0x9,%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %edi,0x4(%esp)
mov    %eax,%ebx
lea    0x8(%eax),%eax
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
test   %esi,%esi
je     80547da <__sprintf_chk@plt+0xab2a>
mov    0x8(%esi),%eax
mov    %eax,(%ebx)
mov    0x8063e54,%eax
mov    %ebx,0x8063e54
mov    %eax,0x4(%ebx)
jmp    8054741 <__sprintf_chk@plt+0xaa91>
mov    0x8063e50,%eax
mov    %ebx,0x8063e50
mov    %eax,0x4(%ebx)
xor    %eax,%eax
jmp    8054743 <__sprintf_chk@plt+0xaa93>
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x8063e4c,%ebx
mov    0x20(%esp),%esi
test   %ebx,%ebx
jne    805480f <__sprintf_chk@plt+0xab5f>
jmp    8054828 <__sprintf_chk@plt+0xab78>
xchg   %ax,%ax
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     8054828 <__sprintf_chk@plt+0xab78>
cmp    %esi,(%ebx)
jne    8054808 <__sprintf_chk@plt+0xab58>
xor    %eax,%eax
cmpb   $0x0,0x8(%ebx)
lea    0x8(%ebx),%edx
cmovne %edx,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    %esi,(%esp)
call   8049c60 <getgrgid@plt>
test   %eax,%eax
je     805486c <__sprintf_chk@plt+0xabbc>
mov    (%eax),%edi
mov    %edi,(%esp)
call   8049a10 <strlen@plt>
add    $0x9,%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %esi,(%eax)
mov    %eax,%ebx
lea    0x8(%eax),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
mov    0x8063e4c,%eax
mov    %ebx,0x8063e4c
mov    %eax,0x4(%ebx)
jmp    8054813 <__sprintf_chk@plt+0xab63>
mov    $0x9,%al
mov    $0x805dfe5,%edi
jmp    8054841 <__sprintf_chk@plt+0xab91>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x8063e4c,%ebx
mov    0x20(%esp),%edi
test   %ebx,%ebx
je     80548d0 <__sprintf_chk@plt+0xac20>
movzbl (%edi),%esi
jmp    80548a7 <__sprintf_chk@plt+0xabf7>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     80548d0 <__sprintf_chk@plt+0xac20>
mov    %esi,%eax
cmp    %al,0x8(%ebx)
jne    80548a0 <__sprintf_chk@plt+0xabf0>
lea    0x8(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    80548a0 <__sprintf_chk@plt+0xabf0>
mov    %ebx,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    0x8063e48,%ebx
test   %ebx,%ebx
je     8054910 <__sprintf_chk@plt+0xac60>
movzbl (%edi),%esi
jmp    80548e7 <__sprintf_chk@plt+0xac37>
nop
mov    0x4(%ebx),%ebx
test   %ebx,%ebx
je     8054910 <__sprintf_chk@plt+0xac60>
mov    %esi,%eax
cmp    %al,0x8(%ebx)
jne    80548e0 <__sprintf_chk@plt+0xac30>
lea    0x8(%ebx),%eax
mov    %edi,0x4(%esp)
mov    %eax,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
jne    80548e0 <__sprintf_chk@plt+0xac30>
add    $0x10,%esp
xor    %eax,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
mov    %edi,(%esp)
call   8049c20 <getgrnam@plt>
mov    %edi,(%esp)
mov    %eax,%esi
call   8049a10 <strlen@plt>
add    $0x9,%eax
mov    %eax,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %edi,0x4(%esp)
mov    %eax,%ebx
lea    0x8(%eax),%eax
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
test   %esi,%esi
je     805495a <__sprintf_chk@plt+0xacaa>
mov    0x8(%esi),%eax
mov    %eax,(%ebx)
mov    0x8063e4c,%eax
mov    %ebx,0x8063e4c
mov    %eax,0x4(%ebx)
jmp    80548c1 <__sprintf_chk@plt+0xac11>
mov    0x8063e48,%eax
mov    %ebx,0x8063e48
mov    %eax,0x4(%ebx)
xor    %eax,%eax
jmp    80548c3 <__sprintf_chk@plt+0xac13>
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x34(%esp),%ebx
mov    0x38(%esp),%eax
mov    0x30(%esp),%esi
test   %ebx,%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
js     80549e8 <__sprintf_chk@plt+0xad38>
xchg   %ax,%ax
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8059f30 <__sprintf_chk@plt+0x10280>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8059db0 <__sprintf_chk@plt+0x10100>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    8054990 <__sprintf_chk@plt+0xace0>
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    $0x30,%ebp
lea    0x0(%esi),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8059f30 <__sprintf_chk@plt+0x10280>
mov    %ebp,%ecx
sub    %eax,%ecx
mov    %cl,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   8059db0 <__sprintf_chk@plt+0x10100>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    80549f0 <__sprintf_chk@plt+0xad40>
mov    %edi,%eax
sub    $0x1,%edi
movb   $0x2d,-0x1(%eax)
add    $0x1c,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x20(%esp),%esi
mov    0x24(%esp),%ebx
lea    0x14(%eax),%edi
movb   $0x0,0x14(%eax)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,(%esp)
sub    $0x1,%edi
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   805a230 <__sprintf_chk@plt+0x10580>
add    $0x30,%eax
mov    %al,(%edi)
mov    %esi,(%esp)
mov    %ebx,0x4(%esp)
movl   $0xa,0x8(%esp)
movl   $0x0,0xc(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    %eax,%esi
mov    %edx,%eax
or     %esi,%eax
mov    %edx,%ebx
jne    8054a70 <__sprintf_chk@plt+0xadc0>
add    $0x10,%esp
mov    %edi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x40(%esp),%eax
mov    0x44(%esp),%ebx
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
testb  $0x2,0x54(%esp)
mov    %eax,0x14(%esp)
mov    %eax,%edi
je     8054c30 <__sprintf_chk@plt+0xaf80>
movl   $0x0,0x18(%esp)
mov    %edi,%esi
xor    %edi,%edi
mov    0x4c(%esp),%eax
mov    (%eax),%eax
cmp    %eax,%esi
jbe    8054c02 <__sprintf_chk@plt+0xaf52>
mov    %eax,0x14(%esp)
xor    %ebp,%ebp
mov    0x50(%esp),%edx
mov    0x4c(%esp),%ecx
test   %edx,%edx
mov    %eax,(%ecx)
je     8054c22 <__sprintf_chk@plt+0xaf72>
xor    %ecx,%ecx
cmpl   $0x1,0x50(%esp)
je     8054b3c <__sprintf_chk@plt+0xae8c>
mov    %ebp,%ecx
and    $0x1,%ebp
shr    %ecx
add    %ecx,%ebp
xor    %eax,%eax
testb  $0x4,0x54(%esp)
cmovne %eax,%ebp
testb  $0x8,0x54(%esp)
cmovne %eax,%ecx
mov    0x48(%esp),%eax
test   %eax,%eax
je     8054bd5 <__sprintf_chk@plt+0xaf25>
mov    0x48(%esp),%eax
test   %ebp,%ebp
lea    -0x1(%ebp),%edx
lea    -0x1(%ebx,%eax,1),%esi
je     8054b82 <__sprintf_chk@plt+0xaed2>
cmp    %esi,%ebx
jae    8054b82 <__sprintf_chk@plt+0xaed2>
xor    %eax,%eax
jmp    8054b77 <__sprintf_chk@plt+0xaec7>
lea    0x0(%esi),%esi
add    $0x1,%eax
cmp    %esi,%ebx
je     8054b82 <__sprintf_chk@plt+0xaed2>
add    $0x1,%ebx
cmp    %eax,%edx
movb   $0x20,-0x1(%ebx)
jne    8054b70 <__sprintf_chk@plt+0xaec0>
mov    %ecx,0x1c(%esp)
mov    0x14(%esp),%ecx
mov    %esi,%eax
sub    %ebx,%eax
movb   $0x0,(%ebx)
mov    %ebx,(%esp)
cmp    %ecx,%eax
cmova  %ecx,%eax
mov    %eax,0x8(%esp)
mov    0x40(%esp),%eax
mov    %eax,0x4(%esp)
call   8049ad0 <mempcpy@plt>
mov    0x1c(%esp),%ecx
test   %ecx,%ecx
lea    -0x1(%ecx),%ebx
mov    %eax,%edx
je     8054bd2 <__sprintf_chk@plt+0xaf22>
cmp    %eax,%esi
jbe    8054bd2 <__sprintf_chk@plt+0xaf22>
xor    %eax,%eax
jmp    8054bc7 <__sprintf_chk@plt+0xaf17>
nop
add    $0x1,%eax
cmp    %esi,%edx
je     8054bd2 <__sprintf_chk@plt+0xaf22>
add    $0x1,%edx
cmp    %eax,%ebx
movb   $0x20,-0x1(%edx)
jne    8054bc0 <__sprintf_chk@plt+0xaf10>
movb   $0x0,(%edx)
add    0x14(%esp),%ebp
add    %ecx,%ebp
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %edi,(%esp)
call   80496b0 <free@plt>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
xor    %edi,%edi
cmp    %eax,%esi
jae    8054e79 <__sprintf_chk@plt+0xb1c9>
mov    0x50(%esp),%edx
sub    %esi,%eax
mov    0x4c(%esp),%ecx
mov    %eax,%ebp
mov    %esi,%eax
test   %edx,%edx
mov    %eax,(%ecx)
jne    8054b2a <__sprintf_chk@plt+0xae7a>
mov    %ebp,%ecx
xor    %ebp,%ebp
jmp    8054b3c <__sprintf_chk@plt+0xae8c>
nop
lea    0x0(%esi,%eiz,1),%esi
call   8049870 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    8054af8 <__sprintf_chk@plt+0xae48>
mov    0x40(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   8049b50 <mbstowcs@plt>
cmp    $0xffffffff,%eax
jne    8054c80 <__sprintf_chk@plt+0xafd0>
testb  $0x1,0x54(%esp)
jne    8054e45 <__sprintf_chk@plt+0xb195>
movl   $0x0,0x18(%esp)
xor    %edi,%edi
mov    $0xffffffff,%ebp
jmp    8054bdb <__sprintf_chk@plt+0xaf2b>
xchg   %ax,%ax
lea    0x1(%eax),%ebp
lea    0x0(,%ebp,4),%esi
mov    %esi,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,0x18(%esp)
je     8054e58 <__sprintf_chk@plt+0xb1a8>
mov    0x40(%esp),%eax
mov    %ebp,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x18(%esp),%eax
mov    %eax,(%esp)
call   8049b50 <mbstowcs@plt>
test   %eax,%eax
je     8054b00 <__sprintf_chk@plt+0xae50>
mov    0x18(%esp),%eax
movl   $0x0,-0x4(%eax,%esi,1)
mov    %eax,%esi
mov    (%eax),%eax
test   %eax,%eax
je     8054def <__sprintf_chk@plt+0xb13f>
xor    %ecx,%ecx
mov    %ebx,0x44(%esp)
mov    %esi,%ebx
mov    %ecx,%esi
mov    %eax,(%esp)
call   8049820 <iswprint@plt>
test   %eax,%eax
jne    8054cf7 <__sprintf_chk@plt+0xb047>
movl   $0xfffd,(%ebx)
mov    $0x1,%esi
add    $0x4,%ebx
mov    (%ebx),%eax
test   %eax,%eax
jne    8054ce0 <__sprintf_chk@plt+0xb030>
mov    0x18(%esp),%ecx
mov    %esi,%eax
mov    %ebp,0x4(%esp)
mov    0x44(%esp),%ebx
mov    %al,0x1c(%esp)
mov    %ecx,(%esp)
call   8049ae0 <wcswidth@plt>
cmpb   $0x0,0x1c(%esp)
mov    %eax,%esi
je     8054e01 <__sprintf_chk@plt+0xb151>
mov    0x18(%esp),%eax
movl   $0x0,0x8(%esp)
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
call   80498b0 <wcstombs@plt>
add    $0x1,%eax
mov    %eax,0x1c(%esp)
mov    0x1c(%esp),%eax
mov    %eax,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,%edi
je     8054e30 <__sprintf_chk@plt+0xb180>
mov    0x4c(%esp),%eax
mov    (%eax),%eax
mov    %eax,%edx
mov    0x18(%esp),%eax
mov    (%eax),%ecx
test   %ecx,%ecx
je     8054e6e <__sprintf_chk@plt+0xb1be>
mov    %edi,0x14(%esp)
mov    %ebx,%ebp
xor    %esi,%esi
mov    %eax,%edi
mov    %edx,%ebx
jmp    8054d9d <__sprintf_chk@plt+0xb0ed>
lea    0x0(%esi,%eiz,1),%esi
add    %esi,%eax
cmp    %eax,%ebx
jb     8054dbb <__sprintf_chk@plt+0xb10b>
add    $0x4,%edi
mov    (%edi),%ecx
test   %ecx,%ecx
je     8054e20 <__sprintf_chk@plt+0xb170>
mov    %eax,%esi
mov    %ecx,(%esp)
call   8049680 <wcwidth@plt>
cmp    $0xffffffff,%eax
jne    8054d88 <__sprintf_chk@plt+0xb0d8>
mov    $0x1,%eax
add    %esi,%eax
cmp    %eax,%ebx
movl   $0xfffd,(%edi)
jae    8054d8e <__sprintf_chk@plt+0xb0de>
mov    %ebp,%ebx
mov    %edi,%ebp
mov    0x14(%esp),%edi
mov    0x1c(%esp),%eax
movl   $0x0,0x0(%ebp)
mov    %edi,(%esp)
mov    %eax,0x8(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x4(%esp)
call   80498b0 <wcstombs@plt>
mov    %edi,0x40(%esp)
mov    %eax,0x14(%esp)
jmp    8054b04 <__sprintf_chk@plt+0xae54>
mov    0x18(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   8049ae0 <wcswidth@plt>
mov    %eax,%esi
mov    0x4c(%esp),%eax
mov    (%eax),%eax
cmp    %eax,%esi
jbe    8054c00 <__sprintf_chk@plt+0xaf50>
lea    0x1(%edi),%eax
mov    %eax,0x1c(%esp)
jmp    8054d4a <__sprintf_chk@plt+0xb09a>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %ebp,%ebx
mov    %eax,%esi
mov    %edi,%ebp
mov    0x14(%esp),%edi
jmp    8054dc3 <__sprintf_chk@plt+0xb113>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x54(%esp)
mov    $0xffffffff,%ebp
je     8054bdb <__sprintf_chk@plt+0xaf2b>
jmp    8054b04 <__sprintf_chk@plt+0xae54>
mov    0x14(%esp),%esi
xor    %edi,%edi
movl   $0x0,0x18(%esp)
jmp    8054b04 <__sprintf_chk@plt+0xae54>
testb  $0x1,0x54(%esp)
je     8054c6a <__sprintf_chk@plt+0xafba>
mov    0x14(%esp),%esi
xor    %edi,%edi
jmp    8054b04 <__sprintf_chk@plt+0xae54>
mov    0x18(%esp),%ebp
xor    %esi,%esi
jmp    8054dc3 <__sprintf_chk@plt+0xb113>
mov    %esi,%eax
xor    %ebp,%ebp
jmp    8054b18 <__sprintf_chk@plt+0xae68>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
sub    $0x2c,%esp
mov    0x44(%esp),%esi
mov    (%esi),%eax
mov    %eax,0x1c(%esp)
jmp    8054eaa <__sprintf_chk@plt+0xb1fa>
lea    0x0(%esi),%esi
mov    %ebp,%edi
lea    0x1(%eax),%ebx
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   8049910 <realloc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8054f00 <__sprintf_chk@plt+0xb250>
mov    0x1c(%esp),%eax
mov    %eax,(%esi)
mov    0x4c(%esp),%eax
mov    %esi,0xc(%esp)
mov    %ebx,0x8(%esp)
mov    %ebp,0x4(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x40(%esp),%eax
mov    %eax,(%esp)
call   8054ad0 <__sprintf_chk@plt+0xae20>
cmp    $0xffffffff,%eax
je     8054f18 <__sprintf_chk@plt+0xb268>
cmp    %eax,%ebx
jbe    8054ea8 <__sprintf_chk@plt+0xb1f8>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    %edi,(%esp)
call   80496b0 <free@plt>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,(%esp)
xor    %ebp,%ebp
call   80496b0 <free@plt>
add    $0x2c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %gs:0x14,%eax
mov    %eax,0x2c(%esp)
xor    %eax,%eax
mov    0x50(%esp),%ebx
mov    0x54(%esp),%eax
add    %ebx,%eax
mov    %eax,0x18(%esp)
call   8049870 <__ctype_get_mb_cur_max@plt>
cmp    $0x1,%eax
jbe    8055070 <__sprintf_chk@plt+0xb3c0>
cmp    0x18(%esp),%ebx
jae    80550f4 <__sprintf_chk@plt+0xb444>
xor    %esi,%esi
lea    0x24(%esp),%edi
jmp    8054f93 <__sprintf_chk@plt+0xb2e3>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x25,%al
jge    8054f83 <__sprintf_chk@plt+0xb2d3>
sub    $0x20,%eax
cmp    $0x3,%al
ja     8054fa9 <__sprintf_chk@plt+0xb2f9>
add    $0x1,%ebx
add    $0x1,%esi
cmp    %ebx,0x18(%esp)
jbe    80550f0 <__sprintf_chk@plt+0xb440>
movzbl (%ebx),%eax
cmp    $0x3f,%al
jle    8054f78 <__sprintf_chk@plt+0xb2c8>
cmp    $0x41,%al
jl     8054fa9 <__sprintf_chk@plt+0xb2f9>
cmp    $0x5f,%al
jle    8054f83 <__sprintf_chk@plt+0xb2d3>
sub    $0x61,%eax
cmp    $0x1d,%al
jbe    8054f83 <__sprintf_chk@plt+0xb2d3>
mov    0x58(%esp),%eax
movl   $0x0,(%edi)
movl   $0x0,0x4(%edi)
and    $0x2,%eax
mov    %eax,0x1c(%esp)
jmp    8054fe7 <__sprintf_chk@plt+0xb337>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x7fffffff,%ecx
sub    %esi,%ecx
cmp    %ecx,%eax
jg     80550b8 <__sprintf_chk@plt+0xb408>
add    %eax,%esi
mov    %edi,(%esp)
add    %ebp,%ebx
call   80496d0 <mbsinit@plt>
test   %eax,%eax
jne    8054f89 <__sprintf_chk@plt+0xb2d9>
mov    0x18(%esp),%eax
mov    %edi,0xc(%esp)
mov    %ebx,0x4(%esp)
sub    %ebx,%eax
mov    %eax,0x8(%esp)
lea    0x20(%esp),%eax
mov    %eax,(%esp)
call   80498c0 <mbrtowc@plt>
cmp    $0xffffffff,%eax
mov    %eax,%ebp
je     8055058 <__sprintf_chk@plt+0xb3a8>
cmp    $0xfffffffe,%eax
je     80550d8 <__sprintf_chk@plt+0xb428>
test   %eax,%eax
mov    $0x1,%eax
cmove  %eax,%ebp
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049680 <wcwidth@plt>
test   %eax,%eax
jns    8054fc8 <__sprintf_chk@plt+0xb318>
mov    0x1c(%esp),%eax
test   %eax,%eax
jne    8055063 <__sprintf_chk@plt+0xb3b3>
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   80497e0 <iswcntrl@plt>
test   %eax,%eax
jne    8054fd9 <__sprintf_chk@plt+0xb329>
cmp    $0x7fffffff,%esi
je     80550b8 <__sprintf_chk@plt+0xb408>
add    $0x1,%esi
jmp    8054fd9 <__sprintf_chk@plt+0xb329>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x58(%esp)
je     8054f83 <__sprintf_chk@plt+0xb2d3>
mov    $0xffffffff,%eax
jmp    80550bd <__sprintf_chk@plt+0xb40d>
lea    0x0(%esi),%esi
cmp    0x18(%esp),%ebx
jae    80550f4 <__sprintf_chk@plt+0xb444>
call   8049c90 <__ctype_b_loc@plt>
mov    0x58(%esp),%esi
mov    0x18(%esp),%edi
and    $0x2,%esi
mov    (%eax),%ecx
xor    %eax,%eax
jmp    8055097 <__sprintf_chk@plt+0xb3e7>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
cmp    %edi,%ebx
je     80550bd <__sprintf_chk@plt+0xb40d>
add    $0x1,%ebx
movzbl -0x1(%ebx),%edx
movzwl (%ecx,%edx,2),%edx
test   $0x40,%dh
jne    80550b0 <__sprintf_chk@plt+0xb400>
test   %esi,%esi
jne    8055063 <__sprintf_chk@plt+0xb3b3>
and    $0x2,%edx
jne    8055093 <__sprintf_chk@plt+0xb3e3>
cmp    $0x7fffffff,%eax
jne    8055090 <__sprintf_chk@plt+0xb3e0>
nop
mov    $0x7fffffff,%eax
mov    0x2c(%esp),%edx
xor    %gs:0x14,%edx
jne    80550f8 <__sprintf_chk@plt+0xb448>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
testb  $0x1,0x58(%esp)
jne    8055063 <__sprintf_chk@plt+0xb3b3>
mov    0x18(%esp),%ebx
add    $0x1,%esi
cmp    %ebx,0x18(%esp)
ja     8054f93 <__sprintf_chk@plt+0xb2e3>
mov    %esi,%eax
jmp    80550bd <__sprintf_chk@plt+0xb40d>
xor    %eax,%eax
jmp    80550bd <__sprintf_chk@plt+0xb40d>
call   8049790 <__stack_chk_fail@plt>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
mov    0x24(%esp),%edx
mov    %ebx,(%esp)
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   8054f30 <__sprintf_chk@plt+0xb280>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
mov    %eax,%esi
push   %ebx
sub    $0x3c,%esp
cmp    $0x2,%edx
mov    %edx,0x18(%esp)
mov    %ecx,0x24(%esp)
ja     8055158 <__sprintf_chk@plt+0xb4a8>
je     80552e0 <__sprintf_chk@plt+0xb630>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%esp),%edx
mov    0x50(%esp),%ecx
mov    %edx,%eax
mov    %ecx,(%esp)
mov    0x24(%esp),%ecx
shr    %eax
mov    %eax,%ebx
mov    %eax,0x1c(%esp)
sub    %ebx,%edx
lea    (%esi,%eax,4),%eax
mov    %eax,0x2c(%esp)
call   8055130 <__sprintf_chk@plt+0xb480>
cmp    $0x1,%ebx
je     8055230 <__sprintf_chk@plt+0xb580>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    0x24(%esp),%edi
shr    $0x2,%eax
lea    (%esi,%eax,4),%ebx
mov    %eax,%ebp
sub    %eax,%edx
mov    %edi,%ecx
mov    %eax,0x28(%esp)
mov    0x50(%esp),%eax
mov    %eax,(%esp)
mov    %ebx,%eax
call   8055130 <__sprintf_chk@plt+0xb480>
mov    0x50(%esp),%eax
mov    %ebp,%edx
mov    %edi,%ecx
mov    %edi,0x24(%esp)
mov    %eax,(%esp)
mov    %esi,%eax
call   8055130 <__sprintf_chk@plt+0xb480>
mov    (%esi),%edx
mov    0x24(%esp),%eax
mov    (%ebx),%edi
mov    %esi,0x14(%esp)
mov    %ebp,%esi
movl   $0x0,0x20(%esp)
mov    %edx,%ebp
lea    0x4(%eax),%ebx
jmp    8055202 <__sprintf_chk@plt+0xb552>
lea    0x0(%esi),%esi
add    $0x1,%esi
cmp    %esi,0x1c(%esp)
mov    %edi,-0x4(%ebx)
je     8055308 <__sprintf_chk@plt+0xb658>
mov    0x14(%esp),%eax
mov    (%eax,%esi,4),%edi
add    $0x4,%ebx
mov    %edi,0x4(%esp)
mov    %ebp,(%esp)
call   *0x50(%esp)
test   %eax,%eax
jg     80551e8 <__sprintf_chk@plt+0xb538>
addl   $0x1,0x20(%esp)
mov    0x20(%esp),%eax
cmp    %eax,0x28(%esp)
mov    %ebp,-0x4(%ebx)
je     805533b <__sprintf_chk@plt+0xb68b>
mov    0x14(%esp),%ecx
mov    (%ecx,%eax,4),%ebp
jmp    80551ff <__sprintf_chk@plt+0xb54f>
mov    (%esi),%edi
mov    0x24(%esp),%eax
mov    %edi,0x14(%esp)
mov    %edi,(%eax)
mov    0x2c(%esp),%eax
mov    $0x1,%ebx
mov    0x1c(%esp),%ebp
movl   $0x0,0x20(%esp)
mov    (%eax),%edi
mov    %ebp,%eax
mov    %edi,%ebp
mov    %eax,%edi
jmp    8055273 <__sprintf_chk@plt+0xb5c3>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%edi
cmp    %edi,0x18(%esp)
mov    %ebp,-0x4(%esi,%ebx,4)
je     80552b0 <__sprintf_chk@plt+0xb600>
mov    (%esi,%edi,4),%ebp
add    $0x1,%ebx
mov    0x14(%esp),%eax
mov    %ebp,0x4(%esp)
mov    %eax,(%esp)
call   *0x50(%esp)
test   %eax,%eax
jg     8055260 <__sprintf_chk@plt+0xb5b0>
mov    0x14(%esp),%eax
addl   $0x1,0x20(%esp)
mov    %eax,-0x4(%esi,%ebx,4)
mov    0x20(%esp),%eax
cmp    %eax,0x1c(%esp)
je     805514c <__sprintf_chk@plt+0xb49c>
mov    0x24(%esp),%ecx
mov    (%ecx,%eax,4),%eax
mov    %eax,0x14(%esp)
jmp    8055270 <__sprintf_chk@plt+0xb5c0>
xchg   %ax,%ax
mov    0x20(%esp),%edx
lea    (%esi,%ebx,4),%eax
mov    0x1c(%esp),%ecx
mov    0x24(%esp),%esi
mov    %eax,(%esp)
sub    %edx,%ecx
shl    $0x2,%ecx
lea    (%esi,%edx,4),%edx
mov    %ecx,0x8(%esp)
mov    %edx,0x4(%esp)
call   80496c0 <memcpy@plt>
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    (%eax),%ebx
mov    0x4(%eax),%edi
mov    %ebx,(%esp)
mov    %edi,0x4(%esp)
call   *0x50(%esp)
test   %eax,%eax
jle    805514c <__sprintf_chk@plt+0xb49c>
mov    %edi,(%esi)
mov    %ebx,0x4(%esi)
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    0x14(%esp),%esi
mov    0x20(%esp),%eax
mov    0x28(%esp),%edx
mov    %ebx,(%esp)
sub    %eax,%edx
shl    $0x2,%edx
lea    (%esi,%eax,4),%eax
mov    %edx,0x8(%esp)
mov    %eax,0x4(%esp)
call   80496c0 <memcpy@plt>
mov    0x24(%esp),%eax
mov    (%eax),%eax
mov    %eax,0x14(%esp)
jmp    805523c <__sprintf_chk@plt+0xb58c>
mov    0x1c(%esp),%eax
mov    %esi,%ebp
mov    %ebp,0x20(%esp)
mov    0x14(%esp),%esi
mov    %eax,0x28(%esp)
jmp    805530c <__sprintf_chk@plt+0xb65c>
nop
push   %ebx
mov    0x10(%esp),%ebx
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
mov    %ebx,0x8(%esp)
pop    %ebx
lea    (%eax,%edx,4),%ecx
jmp    8055130 <__sprintf_chk@plt+0xb480>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
test   %ebx,%ebx
je     80553f3 <__sprintf_chk@plt+0xb743>
movl   $0x2f,0x4(%esp)
mov    %ebx,(%esp)
call   8049b30 <strrchr@plt>
test   %eax,%eax
je     80553df <__sprintf_chk@plt+0xb72f>
lea    0x1(%eax),%ebp
mov    %ebp,%ecx
sub    %ebx,%ecx
cmp    $0x6,%ecx
jle    80553df <__sprintf_chk@plt+0xb72f>
lea    -0x6(%eax),%esi
mov    $0x7,%ecx
mov    $0x805da38,%edi
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %cl
mov    %ecx,%esi
setb   %cl
mov    %esi,%edx
cmp    %cl,%dl
jne    80553df <__sprintf_chk@plt+0xb72f>
mov    $0x3,%ecx
mov    $0x805da40,%edi
mov    %ebp,%esi
mov    %ebp,%ebx
repz cmpsb %es:(%edi),%ds:(%esi)
seta   %dl
setb   %cl
cmp    %cl,%dl
jne    80553df <__sprintf_chk@plt+0xb72f>
lea    0x4(%eax),%ebx
mov    %ebx,0x8063340
mov    %ebx,0x8063e58
mov    %ebx,0x8063360
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
mov    0x8063344,%eax
movl   $0x37,0x8(%esp)
movl   $0x1,0x4(%esp)
movl   $0x805da00,(%esp)
mov    %eax,0xc(%esp)
call   8049850 <fwrite@plt>
call   8049bf0 <abort@plt>
xchg   %ax,%ax
nop
push   %edi
mov    $0xc,%ecx
push   %ebx
mov    %eax,%ebx
sub    $0x4,%esp
xor    %eax,%eax
mov    %ebx,%edi
cmp    $0x8,%edx
rep stos %eax,%es:(%edi)
je     8055441 <__sprintf_chk@plt+0xb791>
mov    %edx,(%ebx)
add    $0x4,%esp
mov    %ebx,%eax
pop    %ebx
pop    %edi
ret
call   8049bf0 <abort@plt>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
mov    %eax,%ebx
sub    $0x10,%esp
movl   $0x5,0x8(%esp)
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %eax,%esi
cmp    %ebx,%esi
je     8055480 <__sprintf_chk@plt+0xb7d0>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
nop
call   8059860 <__sprintf_chk@plt+0xfbb0>
movzbl (%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x55,%dl
jne    80554e8 <__sprintf_chk@plt+0xb838>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x54,%dl
jne    80554d0 <__sprintf_chk@plt+0xb820>
movzbl 0x2(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x46,%dl
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x2d,0x3(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x38,0x4(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x0,0x5(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x60,(%esi)
mov    $0x805da51,%eax
mov    $0x805da44,%edx
cmovne %edx,%eax
jmp    8055478 <__sprintf_chk@plt+0xb7c8>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x805da4b,%eax
cmp    $0x7,%edi
mov    $0x805e3b2,%edx
cmovne %edx,%eax
jmp    8055478 <__sprintf_chk@plt+0xb7c8>
lea    0x0(%esi),%esi
cmp    $0x47,%dl
jne    80554d0 <__sprintf_chk@plt+0xb820>
movzbl 0x1(%eax),%edx
and    $0xffffffdf,%edx
cmp    $0x42,%dl
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x31,0x2(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x38,0x3(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x30,0x4(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x33,0x5(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x30,0x6(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x0,0x7(%eax)
jne    80554d0 <__sprintf_chk@plt+0xb820>
cmpb   $0x60,(%esi)
mov    $0x805da4d,%eax
mov    $0x805da48,%edx
cmovne %edx,%eax
jmp    8055478 <__sprintf_chk@plt+0xb7c8>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
mov    %edx,%edi
push   %esi
push   %ebx
sub    $0x7c,%esp
mov    %eax,0x30(%esp)
mov    0x9c(%esp),%eax
mov    %ecx,0x20(%esp)
mov    %eax,0x34(%esp)
mov    0xa0(%esp),%eax
mov    %eax,0x48(%esp)
mov    0xa4(%esp),%eax
mov    %eax,0x44(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x6c(%esp)
xor    %eax,%eax
call   8049870 <__ctype_get_mb_cur_max@plt>
mov    %eax,0x4c(%esp)
mov    0x98(%esp),%eax
shr    %eax
and    $0x1,%eax
cmpl   $0x8,0x94(%esp)
mov    %al,0x2f(%esp)
ja     8055e18 <__sprintf_chk@plt+0xc168>
mov    0x94(%esp),%eax
jmp    *0x805da80(,%eax,4)
nop
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl 0x2f(%esp),%eax
xor    %esi,%esi
xor    $0x1,%eax
mov    %al,0x59(%esp)
movzbl 0x58(%esp),%eax
xor    $0x1,%eax
mov    %al,0x5a(%esp)
lea    0x0(%esi),%esi
cmp    0x90(%esp),%esi
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     8055c20 <__sprintf_chk@plt+0xbf70>
test   %al,%al
je     8055c33 <__sprintf_chk@plt+0xbf83>
mov    0x28(%esp),%ecx
test   %ecx,%ecx
setne  %dl
je     8055c08 <__sprintf_chk@plt+0xbf58>
cmpb   $0x0,0x58(%esp)
je     8055c08 <__sprintf_chk@plt+0xbf58>
mov    0x28(%esp),%eax
add    %esi,%eax
cmp    %eax,0x90(%esp)
jb     8055c08 <__sprintf_chk@plt+0xbf58>
mov    0x20(%esp),%eax
mov    %edx,0x38(%esp)
lea    (%eax,%esi,1),%ecx
mov    0x28(%esp),%eax
mov    %ecx,(%esp)
mov    %ecx,0x24(%esp)
mov    %eax,0x8(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0x4(%esp)
call   8049730 <memcmp@plt>
mov    0x24(%esp),%ecx
mov    0x38(%esp),%edx
test   %eax,%eax
jne    8055ca0 <__sprintf_chk@plt+0xbff0>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
movb   $0x1,0x24(%esp)
lea    0x0(%esi,%eiz,1),%esi
movzbl (%ecx),%ebx
cmp    $0x7e,%bl
ja     80559b8 <__sprintf_chk@plt+0xbd08>
movzbl %bl,%eax
jmp    *0x805daa4(,%eax,4)
xchg   %ax,%ax
cmpl   $0x2,0x94(%esp)
je     80557f8 <__sprintf_chk@plt+0xbb48>
cmpl   $0x3,0x94(%esp)
jne    8055758 <__sprintf_chk@plt+0xbaa8>
testb  $0x4,0x98(%esp)
je     8055758 <__sprintf_chk@plt+0xbaa8>
lea    0x2(%esi),%edx
cmp    %edx,0x90(%esp)
jbe    8055758 <__sprintf_chk@plt+0xbaa8>
mov    0x20(%esp),%eax
cmpb   $0x3f,0x1(%eax,%esi,1)
jne    8055758 <__sprintf_chk@plt+0xbaa8>
movzbl (%eax,%edx,1),%eax
lea    -0x21(%eax),%ecx
cmp    $0x1d,%cl
mov    %al,0x38(%esp)
ja     8055758 <__sprintf_chk@plt+0xbaa8>
mov    $0x1,%eax
shl    %cl,%eax
test   $0x380051c1,%eax
je     8055758 <__sprintf_chk@plt+0xbaa8>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmp    %edi,%ebp
jae    805571e <__sprintf_chk@plt+0xba6e>
mov    0x30(%esp),%eax
movb   $0x3f,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    805572e <__sprintf_chk@plt+0xba7e>
mov    0x30(%esp),%eax
movb   $0x22,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    805573e <__sprintf_chk@plt+0xba8e>
mov    0x30(%esp),%eax
movb   $0x22,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
cmp    %eax,%edi
jbe    805574e <__sprintf_chk@plt+0xba9e>
mov    0x30(%esp),%eax
movb   $0x3f,0x3(%eax,%ebp,1)
movzbl 0x38(%esp),%ebx
add    $0x4,%ebp
mov    %edx,%esi
cmpb   $0x0,0x59(%esp)
je     8055766 <__sprintf_chk@plt+0xbab6>
cmpb   $0x0,0x5a(%esp)
jne    805578b <__sprintf_chk@plt+0xbadb>
mov    0x34(%esp),%edx
test   %edx,%edx
je     805578b <__sprintf_chk@plt+0xbadb>
mov    %ebx,%ecx
mov    $0x1,%eax
and    $0x1f,%ecx
mov    %ebx,%edx
shl    %cl,%eax
mov    0x34(%esp),%ecx
shr    $0x5,%dl
movzbl %dl,%edx
test   %eax,(%ecx,%edx,4)
jne    8055792 <__sprintf_chk@plt+0xbae2>
cmpb   $0x0,0x24(%esp)
je     80557a8 <__sprintf_chk@plt+0xbaf8>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmp    %edi,%ebp
jae    80557a5 <__sprintf_chk@plt+0xbaf5>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
add    $0x1,%esi
cmp    %edi,%ebp
jae    80557b6 <__sprintf_chk@plt+0xbb06>
mov    0x30(%esp),%eax
mov    %bl,(%eax,%ebp,1)
add    $0x1,%ebp
jmp    80555f8 <__sprintf_chk@plt+0xb948>
xchg   %ax,%ax
cmpl   $0x1,0x90(%esp)
setne  %al
cmpl   $0xffffffff,0x90(%esp)
je     8055e08 <__sprintf_chk@plt+0xc158>
test   %al,%al
jne    8055758 <__sprintf_chk@plt+0xbaa8>
test   %esi,%esi
jne    8055758 <__sprintf_chk@plt+0xbaa8>
cmpl   $0x2,0x94(%esp)
jne    8055758 <__sprintf_chk@plt+0xbaa8>
nop
cmpb   $0x0,0x2f(%esp)
je     8055758 <__sprintf_chk@plt+0xbaa8>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x44(%esp),%eax
mov    %edi,%edx
mov    0x20(%esp),%ecx
movl   $0x0,0xc(%esp)
mov    %eax,0x14(%esp)
mov    0x48(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x98(%esp),%eax
and    $0xfffffffd,%eax
mov    %eax,0x8(%esp)
mov    0x94(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x90(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8055540 <__sprintf_chk@plt+0xb890>
mov    0x6c(%esp),%edi
xor    %gs:0x14,%edi
jne    8055f32 <__sprintf_chk@plt+0xc282>
add    $0x7c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    $0x72,%eax
cmpl   $0x2,0x94(%esp)
je     8055e7b <__sprintf_chk@plt+0xc1cb>
cmpb   $0x0,0x58(%esp)
je     8055758 <__sprintf_chk@plt+0xbaa8>
mov    %eax,%ebx
jmp    8055792 <__sprintf_chk@plt+0xbae2>
lea    0x0(%esi),%esi
mov    $0x62,%eax
jmp    8055883 <__sprintf_chk@plt+0xbbd3>
nop
mov    $0x66,%eax
jmp    8055883 <__sprintf_chk@plt+0xbbd3>
nop
mov    $0x76,%eax
jmp    8055883 <__sprintf_chk@plt+0xbbd3>
nop
mov    $0x6e,%eax
jmp    8055875 <__sprintf_chk@plt+0xbbc5>
nop
mov    $0x74,%eax
jmp    8055875 <__sprintf_chk@plt+0xbbc5>
nop
cmpb   $0x0,0x58(%esp)
je     8055df0 <__sprintf_chk@plt+0xc140>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmp    %edi,%ebp
jae    80558e2 <__sprintf_chk@plt+0xbc32>
mov    0x30(%esp),%eax
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%esi),%edx
cmp    %edx,0x90(%esp)
lea    0x1(%ebp),%eax
jbe    8055928 <__sprintf_chk@plt+0xbc78>
mov    0x20(%esp),%edx
movzbl 0x1(%edx,%esi,1),%edx
mov    %dl,0x38(%esp)
sub    $0x30,%edx
cmp    $0x9,%dl
ja     8055928 <__sprintf_chk@plt+0xbc78>
cmp    %eax,%edi
ja     8055e90 <__sprintf_chk@plt+0xc1e0>
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    805591e <__sprintf_chk@plt+0xbc6e>
mov    0x30(%esp),%eax
movb   $0x30,0x2(%eax,%ebp,1)
lea    0x3(%ebp),%eax
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,%ebp
mov    $0x30,%ebx
jmp    8055766 <__sprintf_chk@plt+0xbab6>
lea    0x0(%esi,%eiz,1),%esi
mov    $0x61,%eax
jmp    8055883 <__sprintf_chk@plt+0xbbd3>
lea    0x0(%esi),%esi
cmpb   $0x0,0x58(%esp)
je     805595e <__sprintf_chk@plt+0xbcae>
cmpb   $0x0,0x2f(%esp)
je     805595e <__sprintf_chk@plt+0xbcae>
test   %dl,%dl
jne    80557a8 <__sprintf_chk@plt+0xbaf8>
mov    %ebx,%eax
jmp    8055875 <__sprintf_chk@plt+0xbbc5>
lea    0x0(%esi),%esi
cmpl   $0x2,0x94(%esp)
jne    8055758 <__sprintf_chk@plt+0xbaa8>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmp    %edi,%ebp
jae    805598d <__sprintf_chk@plt+0xbcdd>
mov    0x30(%esp),%eax
movb   $0x27,(%eax,%ebp,1)
lea    0x1(%ebp),%eax
cmp    %eax,%edi
jbe    805599d <__sprintf_chk@plt+0xbced>
mov    0x30(%esp),%eax
movb   $0x5c,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%eax
cmp    %eax,%edi
jbe    80559ad <__sprintf_chk@plt+0xbcfd>
mov    0x30(%esp),%eax
movb   $0x27,0x2(%eax,%ebp,1)
add    $0x3,%ebp
jmp    8055758 <__sprintf_chk@plt+0xbaa8>
lea    0x0(%esi),%esi
cmpl   $0x1,0x4c(%esp)
jne    8055cb0 <__sprintf_chk@plt+0xc000>
call   8049c90 <__ctype_b_loc@plt>
movzbl %bl,%edx
movl   $0x1,0x38(%esp)
mov    (%eax),%eax
movzwl (%eax,%edx,2),%edx
shr    $0xe,%dx
xor    $0x1,%edx
and    $0x1,%edx
and    0x58(%esp),%dl
je     8055758 <__sprintf_chk@plt+0xbaa8>
mov    0x38(%esp),%eax
add    %esi,%eax
mov    %eax,0x38(%esp)
mov    0x30(%esp),%eax
jmp    8055a64 <__sprintf_chk@plt+0xbdb4>
lea    0x0(%esi),%esi
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmp    %edi,%ebp
jae    8055a13 <__sprintf_chk@plt+0xbd63>
movb   $0x5c,(%eax,%ebp,1)
lea    0x1(%ebp),%ecx
cmp    %ecx,%edi
jbe    8055a26 <__sprintf_chk@plt+0xbd76>
mov    %ebx,%ecx
shr    $0x6,%cl
add    $0x30,%ecx
mov    %cl,0x1(%eax,%ebp,1)
lea    0x2(%ebp),%ecx
cmp    %ecx,%edi
jbe    8055a3c <__sprintf_chk@plt+0xbd8c>
mov    %ebx,%ecx
shr    $0x3,%cl
and    $0x7,%ecx
add    $0x30,%ecx
mov    %cl,0x2(%eax,%ebp,1)
and    $0x7,%ebx
add    $0x3,%ebp
add    $0x30,%ebx
add    $0x1,%esi
cmp    %esi,0x38(%esp)
jbe    80557ab <__sprintf_chk@plt+0xbafb>
cmp    %edi,%ebp
jae    8055a59 <__sprintf_chk@plt+0xbda9>
mov    %bl,(%eax,%ebp,1)
mov    0x20(%esp),%ebx
add    $0x1,%ebp
movzbl (%ebx,%esi,1),%ebx
test   %dl,%dl
jne    8055a00 <__sprintf_chk@plt+0xbd50>
cmpb   $0x0,0x24(%esp)
je     8055a45 <__sprintf_chk@plt+0xbd95>
cmp    %edi,%ebp
jae    8055a77 <__sprintf_chk@plt+0xbdc7>
movb   $0x5c,(%eax,%ebp,1)
add    $0x1,%ebp
movb   $0x0,0x24(%esp)
jmp    8055a45 <__sprintf_chk@plt+0xbd95>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    8055f37 <__sprintf_chk@plt+0xc287>
test   %edi,%edi
je     8055e3d <__sprintf_chk@plt+0xc18d>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805da4b,0x3c(%esp)
movb   $0x22,(%eax)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805da4b,0x3c(%esp)
movl   $0x3,0x94(%esp)
00
jmp    80555d8 <__sprintf_chk@plt+0xb928>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x1,0x58(%esp)
movl   $0x0,0x28(%esp)
movl   $0x0,0x3c(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
lea    0x0(%esi,%eiz,1),%esi
je     8055b4c <__sprintf_chk@plt+0xbe9c>
mov    0x94(%esp),%edx
mov    $0x805da55,%eax
call   8055450 <__sprintf_chk@plt+0xb7a0>
mov    0x94(%esp),%edx
mov    %eax,0x48(%esp)
mov    $0x805e3b2,%eax
call   8055450 <__sprintf_chk@plt+0xb7a0>
mov    %eax,0x44(%esp)
xor    %ebp,%ebp
cmpb   $0x0,0x2f(%esp)
jne    8055b7a <__sprintf_chk@plt+0xbeca>
mov    0x48(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8055b7a <__sprintf_chk@plt+0xbeca>
mov    0x30(%esp),%ecx
lea    0x0(%esi,%eiz,1),%esi
cmp    %edi,%ebp
jae    8055b6f <__sprintf_chk@plt+0xbebf>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8055b68 <__sprintf_chk@plt+0xbeb8>
mov    0x44(%esp),%ebx
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
mov    %ebx,0x3c(%esp)
movb   $0x1,0x58(%esp)
mov    %eax,0x28(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
movb   $0x1,0x2f(%esp)
xor    %ebp,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805e3b2,0x3c(%esp)
movl   $0x2,0x94(%esp)
00
jmp    80555d8 <__sprintf_chk@plt+0xb928>
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,0x2f(%esp)
jne    8055f53 <__sprintf_chk@plt+0xc2a3>
test   %edi,%edi
je     8055e5c <__sprintf_chk@plt+0xc1ac>
mov    0x30(%esp),%eax
mov    $0x1,%ebp
movb   $0x0,0x58(%esp)
movl   $0x1,0x28(%esp)
movl   $0x805e3b2,0x3c(%esp)
movb   $0x27,(%eax)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
movb   $0x0,0x24(%esp)
lea    (%eax,%esi,1),%ecx
jmp    8055690 <__sprintf_chk@plt+0xb9e0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x20(%esp),%eax
cmpb   $0x0,(%eax,%esi,1)
setne  %al
test   %al,%al
jne    8055618 <__sprintf_chk@plt+0xb968>
test   %ebp,%ebp
jne    8055c4c <__sprintf_chk@plt+0xbf9c>
cmpl   $0x2,0x94(%esp)
jne    8055c4c <__sprintf_chk@plt+0xbf9c>
cmpb   $0x0,0x2f(%esp)
jne    8055808 <__sprintf_chk@plt+0xbb58>
cmpb   $0x0,0x2f(%esp)
jne    8055c82 <__sprintf_chk@plt+0xbfd2>
mov    0x3c(%esp),%eax
test   %eax,%eax
je     8055c82 <__sprintf_chk@plt+0xbfd2>
mov    0x3c(%esp),%edx
movzbl (%edx),%eax
test   %al,%al
je     8055c82 <__sprintf_chk@plt+0xbfd2>
mov    0x30(%esp),%ecx
sub    %ebp,%edx
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%edi
jbe    8055c77 <__sprintf_chk@plt+0xbfc7>
mov    %al,(%ecx,%ebp,1)
add    $0x1,%ebp
movzbl (%edx,%ebp,1),%eax
test   %al,%al
jne    8055c70 <__sprintf_chk@plt+0xbfc0>
cmp    %edi,%ebp
mov    %ebp,%eax
jae    8055852 <__sprintf_chk@plt+0xbba2>
mov    0x30(%esp),%edi
movb   $0x0,(%edi,%ebp,1)
jmp    8055852 <__sprintf_chk@plt+0xbba2>
lea    0x0(%esi,%eiz,1),%esi
movb   $0x0,0x24(%esp)
jmp    8055690 <__sprintf_chk@plt+0xb9e0>
lea    0x0(%esi),%esi
cmpl   $0xffffffff,0x90(%esp)
movl   $0x0,0x64(%esp)
movl   $0x0,0x68(%esp)
je     8055e1d <__sprintf_chk@plt+0xc16d>
mov    $0x1,%eax
mov    %bl,0x5b(%esp)
mov    %eax,%ebx
movl   $0x0,0x38(%esp)
mov    %esi,0x50(%esp)
mov    %ebp,0x54(%esp)
mov    %edi,0x40(%esp)
mov    %ecx,0x5c(%esp)
mov    0x20(%esp),%eax
mov    0x38(%esp),%esi
add    0x50(%esp),%esi
lea    (%eax,%esi,1),%edi
lea    0x64(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x90(%esp),%eax
mov    %edi,0x4(%esp)
sub    %esi,%eax
mov    %eax,0x8(%esp)
lea    0x60(%esp),%eax
mov    %eax,(%esp)
call   80498c0 <mbrtowc@plt>
test   %eax,%eax
mov    %eax,%ebp
je     8055e9d <__sprintf_chk@plt+0xc1ed>
cmp    $0xffffffff,%eax
je     8055eb8 <__sprintf_chk@plt+0xc208>
cmp    $0xfffffffe,%eax
je     8055ed3 <__sprintf_chk@plt+0xc223>
cmpb   $0x0,0x2f(%esp)
je     8055d7f <__sprintf_chk@plt+0xc0cf>
cmpl   $0x2,0x94(%esp)
jne    8055d7f <__sprintf_chk@plt+0xc0cf>
cmp    $0x1,%eax
je     8055d7f <__sprintf_chk@plt+0xc0cf>
mov    $0x1,%edx
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%edx,1),%eax
sub    $0x5b,%eax
cmp    $0x21,%al
ja     8055d78 <__sprintf_chk@plt+0xc0c8>
movzbl %al,%eax
jmp    *0x805dca0(,%eax,4)
lea    0x0(%esi),%esi
add    $0x1,%edx
cmp    %ebp,%edx
jne    8055d60 <__sprintf_chk@plt+0xc0b0>
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8049820 <iswprint@plt>
test   %eax,%eax
mov    $0x0,%eax
cmove  %eax,%ebx
lea    0x64(%esp),%eax
mov    %eax,(%esp)
add    %ebp,0x38(%esp)
call   80496d0 <mbsinit@plt>
test   %eax,%eax
je     8055cf1 <__sprintf_chk@plt+0xc041>
mov    %ebx,%eax
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
mov    %eax,%edx
movzbl 0x5b(%esp),%ebx
xor    $0x1,%edx
mov    0x40(%esp),%edi
cmpl   $0x1,0x38(%esp)
jbe    80559e3 <__sprintf_chk@plt+0xbd33>
and    0x58(%esp),%dl
jmp    80559ed <__sprintf_chk@plt+0xbd3d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x40(%esp),%edi
jmp    8055808 <__sprintf_chk@plt+0xbb58>
lea    0x0(%esi,%eiz,1),%esi
testb  $0x1,0x98(%esp)
je     8055758 <__sprintf_chk@plt+0xbaa8>
add    $0x1,%esi
jmp    80555f8 <__sprintf_chk@plt+0xb948>
xchg   %ax,%ax
mov    0x20(%esp),%eax
cmpb   $0x0,0x1(%eax)
setne  %al
jmp    80557d9 <__sprintf_chk@plt+0xbb29>
call   8049bf0 <abort@plt>
mov    0x20(%esp),%eax
mov    %ecx,0x38(%esp)
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    0x38(%esp),%ecx
mov    %eax,0x90(%esp)
jmp    8055cce <__sprintf_chk@plt+0xc01e>
movb   $0x1,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805da4b,0x3c(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
movb   $0x0,0x58(%esp)
mov    $0x1,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805e3b2,0x3c(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
cmpb   $0x0,0x2f(%esp)
je     8055883 <__sprintf_chk@plt+0xbbd3>
jmp    8055808 <__sprintf_chk@plt+0xbb58>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x30(%esp),%edx
movb   $0x30,(%edx,%eax,1)
jmp    805590e <__sprintf_chk@plt+0xbc5e>
mov    %ebx,%edx
mov    0x50(%esp),%esi
mov    0x54(%esp),%ebp
xor    $0x1,%edx
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8055dc5 <__sprintf_chk@plt+0xc115>
mov    0x50(%esp),%esi
mov    $0x1,%edx
mov    0x54(%esp),%ebp
movzbl 0x5b(%esp),%ebx
mov    0x40(%esp),%edi
jmp    8055dc5 <__sprintf_chk@plt+0xc115>
mov    %esi,%edx
mov    %edi,%eax
mov    0x54(%esp),%ebp
cmp    %edx,0x90(%esp)
movzbl 0x5b(%esp),%ebx
mov    0x50(%esp),%esi
mov    0x40(%esp),%edi
mov    0x5c(%esp),%ecx
jbe    8055f28 <__sprintf_chk@plt+0xc278>
cmpb   $0x0,(%eax)
je     8055f28 <__sprintf_chk@plt+0xc278>
mov    %ebp,0x40(%esp)
mov    0x38(%esp),%eax
mov    0x90(%esp),%ebp
jmp    8055f16 <__sprintf_chk@plt+0xc266>
nop
lea    0x0(%esi,%eiz,1),%esi
cmpb   $0x0,(%ecx,%eax,1)
je     8055f20 <__sprintf_chk@plt+0xc270>
add    $0x1,%eax
lea    (%esi,%eax,1),%edx
cmp    %edx,%ebp
ja     8055f10 <__sprintf_chk@plt+0xc260>
mov    0x40(%esp),%ebp
mov    %eax,0x38(%esp)
mov    $0x1,%edx
jmp    8055dc5 <__sprintf_chk@plt+0xc115>
call   8049790 <__stack_chk_fail@plt>
movb   $0x1,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805da4b,0x3c(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
movb   $0x0,0x58(%esp)
xor    %ebp,%ebp
movl   $0x1,0x28(%esp)
movl   $0x805e3b2,0x3c(%esp)
jmp    80555d8 <__sprintf_chk@plt+0xb928>
nop
push   %ebp
push   %edi
mov    %eax,%edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    %edx,0x1c(%esp)
mov    0x50(%esp),%ebx
mov    %ecx,0x20(%esp)
call   8049a60 <__errno_location@plt>
test   %edi,%edi
mov    0x8063330,%esi
mov    %eax,0x24(%esp)
mov    (%eax),%eax
mov    %eax,0x28(%esp)
js     80560fc <__sprintf_chk@plt+0xc44c>
cmp    0x806333c,%edi
jb     8056008 <__sprintf_chk@plt+0xc358>
lea    0x1(%edi),%ebp
cmp    $0x1fffffff,%ebp
ja     8056101 <__sprintf_chk@plt+0xc451>
cmp    $0x8063334,%esi
lea    0x0(,%ebp,8),%eax
je     80560d0 <__sprintf_chk@plt+0xc420>
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
call   80587a0 <__sprintf_chk@plt+0xeaf0>
mov    %eax,%esi
mov    %eax,0x8063330
mov    0x806333c,%eax
mov    %ebp,%edx
movl   $0x0,0x4(%esp)
sub    %eax,%edx
shl    $0x3,%edx
lea    (%esi,%eax,8),%eax
mov    %edx,0x8(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    %ebp,0x806333c
mov    0x4(%ebx),%eax
lea    (%esi,%edi,8),%edi
mov    (%edi),%ebp
mov    0x4(%edi),%esi
mov    %eax,0x18(%esp)
lea    0x8(%ebx),%eax
mov    %eax,%ecx
mov    %ebp,%edx
mov    %eax,0x2c(%esp)
mov    0x2c(%ebx),%eax
orl    $0x1,0x18(%esp)
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %ecx,0xc(%esp)
mov    0x1c(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8055540 <__sprintf_chk@plt+0xb890>
cmp    %eax,%ebp
ja     80560b7 <__sprintf_chk@plt+0xc407>
lea    0x1(%eax),%ebp
cmp    $0x8063e60,%esi
mov    %ebp,(%edi)
je     8056072 <__sprintf_chk@plt+0xc3c2>
mov    %esi,(%esp)
call   80496b0 <free@plt>
mov    %ebp,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x1c(%esp),%ecx
mov    %ebp,%edx
mov    %eax,0x4(%edi)
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
mov    0x2c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x18(%esp),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
mov    %esi,%eax
call   8055540 <__sprintf_chk@plt+0xb890>
mov    0x24(%esp),%eax
mov    0x28(%esp),%ecx
mov    %ecx,(%eax)
add    $0x3c,%esp
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %eax,0x4(%esp)
movl   $0x0,(%esp)
call   80587a0 <__sprintf_chk@plt+0xeaf0>
mov    0x8063338,%edx
mov    %eax,%esi
mov    %eax,0x8063330
mov    0x8063334,%eax
mov    %edx,0x4(%esi)
mov    %eax,(%esi)
jmp    8055fdf <__sprintf_chk@plt+0xc32f>
call   8049bf0 <abort@plt>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
call   8049a60 <__errno_location@plt>
mov    0x20(%esp),%ebx
mov    $0x8063f60,%edx
test   %ebx,%ebx
cmovne %ebx,%edx
mov    (%eax),%edi
mov    %eax,%esi
movl   $0x30,0x4(%esp)
mov    %edx,(%esp)
call   8058940 <__sprintf_chk@plt+0xec90>
mov    %edi,(%esi)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%edx
mov    $0x8063f60,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    (%eax),%eax
ret
jmp    8056170 <__sprintf_chk@plt+0xc4c0>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov    0x4(%esp),%edx
mov    $0x8063f60,%eax
test   %edx,%edx
cmovne %edx,%eax
mov    0x8(%esp),%edx
mov    %edx,(%eax)
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %esi
mov    $0x8063f60,%eax
push   %ebx
mov    0xc(%esp),%ecx
mov    0x10(%esp),%edx
test   %ecx,%ecx
cmovne %ecx,%eax
mov    %edx,%ecx
shr    $0x5,%dl
and    $0x1f,%ecx
movzbl %dl,%edx
lea    (%eax,%edx,4),%ebx
mov    0x14(%esp),%edx
mov    0x8(%ebx),%esi
mov    %esi,%eax
shr    %cl,%eax
xor    %eax,%edx
and    $0x1,%eax
and    $0x1,%edx
shl    %cl,%edx
xor    %esi,%edx
mov    %edx,0x8(%ebx)
pop    %ebx
pop    %esi
ret
nop
mov    0x4(%esp),%edx
mov    $0x8063f60,%eax
mov    0x8(%esp),%ecx
test   %edx,%edx
cmove  %eax,%edx
mov    0x4(%edx),%eax
mov    %ecx,0x4(%edx)
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
mov    $0x8063f60,%ebx
sub    $0x8,%esp
mov    0x10(%esp),%eax
mov    0x14(%esp),%edx
mov    0x18(%esp),%ecx
test   %eax,%eax
cmove  %ebx,%eax
test   %edx,%edx
movl   $0x8,(%eax)
je     8056223 <__sprintf_chk@plt+0xc573>
test   %ecx,%ecx
je     8056223 <__sprintf_chk@plt+0xc573>
mov    %edx,0x28(%eax)
mov    %ecx,0x2c(%eax)
add    $0x8,%esp
pop    %ebx
ret
call   8049bf0 <abort@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
mov    $0x8063f60,%eax
push   %esi
push   %ebx
sub    $0x20,%esp
mov    0x40(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049a60 <__errno_location@plt>
mov    0x38(%esp),%ecx
mov    0x34(%esp),%edx
mov    (%eax),%edi
mov    %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x10(%esp)
lea    0x8(%ebx),%eax
mov    %eax,0xc(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x8(%esp)
mov    (%ebx),%eax
mov    %eax,0x4(%esp)
mov    0x3c(%esp),%eax
mov    %eax,(%esp)
mov    0x30(%esp),%eax
call   8055540 <__sprintf_chk@plt+0xb890>
mov    %edi,(%esi)
add    $0x20,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
push   %ebp
mov    $0x8063f60,%eax
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x5c(%esp),%ebx
test   %ebx,%ebx
cmove  %eax,%ebx
call   8049a60 <__errno_location@plt>
mov    0x58(%esp),%edx
lea    0x8(%ebx),%ebp
mov    0x4(%ebx),%esi
mov    0x50(%esp),%ecx
mov    %eax,%edi
mov    (%eax),%eax
mov    %eax,0x24(%esp)
xor    %eax,%eax
test   %edx,%edx
sete   %al
mov    0x54(%esp),%edx
or     %eax,%esi
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %edx,(%esp)
xor    %edx,%edx
mov    %eax,0x4(%esp)
xor    %eax,%eax
call   8055540 <__sprintf_chk@plt+0xb890>
lea    0x1(%eax),%edx
mov    %edx,(%esp)
mov    %edx,0x28(%esp)
mov    %eax,0x2c(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x50(%esp),%ecx
mov    0x28(%esp),%edx
mov    %eax,0x20(%esp)
mov    0x2c(%ebx),%eax
mov    %eax,0x14(%esp)
mov    0x28(%ebx),%eax
mov    %esi,0x8(%esp)
mov    0x54(%esp),%esi
mov    %ebp,0xc(%esp)
mov    %eax,0x10(%esp)
mov    (%ebx),%eax
mov    %esi,(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
call   8055540 <__sprintf_chk@plt+0xb890>
mov    0x24(%esp),%ecx
mov    %ecx,(%edi)
mov    0x58(%esp),%ecx
test   %ecx,%ecx
je     8056358 <__sprintf_chk@plt+0xc6a8>
mov    0x58(%esp),%edi
mov    0x2c(%esp),%eax
mov    %eax,(%edi)
mov    0x20(%esp),%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,0x8(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8056290 <__sprintf_chk@plt+0xc5e0>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    $0x1,%ebx
sub    $0x10,%esp
mov    0x806333c,%edi
mov    0x8063330,%esi
cmp    $0x1,%edi
jbe    80563d3 <__sprintf_chk@plt+0xc723>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi,%ebx,8),%eax
add    $0x1,%ebx
mov    %eax,(%esp)
call   80496b0 <free@plt>
cmp    %edi,%ebx
jne    80563c0 <__sprintf_chk@plt+0xc710>
mov    0x4(%esi),%eax
cmp    $0x8063e60,%eax
je     80563f9 <__sprintf_chk@plt+0xc749>
mov    %eax,(%esp)
call   80496b0 <free@plt>
movl   $0x100,0x8063334
00
movl   $0x8063e60,0x8063338
08
cmp    $0x8063334,%esi
je     8056413 <__sprintf_chk@plt+0xc763>
mov    %esi,(%esp)
call   80496b0 <free@plt>
movl   $0x8063334,0x8063330
08
movl   $0x1,0x806333c
00
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8063f60,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8063f60,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8063f60,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8063f60,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8055420 <__sprintf_chk@plt+0xb770>
mov    0x58(%esp),%edx
mov    $0xffffffff,%ecx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   8055f70 <__sprintf_chk@plt+0xc2c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
push   %ebx
sub    $0x48,%esp
mov    0x54(%esp),%edx
lea    0x10(%esp),%ebx
mov    %ebx,%eax
call   8055420 <__sprintf_chk@plt+0xb770>
mov    0x5c(%esp),%ecx
mov    0x58(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   8055f70 <__sprintf_chk@plt+0xc2c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   80564b0 <__sprintf_chk@plt+0xc800>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x28(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x24(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,0x4(%esp)
call   80564e0 <__sprintf_chk@plt+0xc830>
add    $0x1c,%esp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x48,%esp
mov    0x8063f60,%eax
mov    0x58(%esp),%ecx
mov    %eax,0x10(%esp)
mov    0x8063f64,%eax
mov    %ecx,%edx
and    $0x1f,%ecx
shr    $0x5,%dl
movzbl %dl,%edx
mov    %eax,0x14(%esp)
mov    0x8063f68,%eax
mov    %eax,0x18(%esp)
mov    0x8063f6c,%eax
mov    %eax,0x1c(%esp)
mov    0x8063f70,%eax
mov    %eax,0x20(%esp)
mov    0x8063f74,%eax
mov    %eax,0x24(%esp)
mov    0x8063f78,%eax
mov    %eax,0x28(%esp)
mov    0x8063f7c,%eax
mov    %eax,0x2c(%esp)
mov    0x8063f80,%eax
mov    %eax,0x30(%esp)
mov    0x8063f84,%eax
mov    %eax,0x34(%esp)
mov    0x8063f88,%eax
mov    0x18(%esp,%edx,4),%ebx
mov    %eax,0x38(%esp)
mov    0x8063f8c,%eax
mov    %eax,0x3c(%esp)
mov    %ebx,%eax
shr    %cl,%eax
xor    $0x1,%eax
and    $0x1,%eax
shl    %cl,%eax
mov    0x54(%esp),%ecx
xor    %ebx,%eax
mov    %eax,0x18(%esp,%edx,4)
mov    0x50(%esp),%edx
lea    0x10(%esp),%eax
mov    %eax,(%esp)
xor    %eax,%eax
call   8055f70 <__sprintf_chk@plt+0xc2c0>
add    $0x48,%esp
pop    %ebx
ret
sub    $0x1c,%esp
movsbl 0x24(%esp),%eax
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8056570 <__sprintf_chk@plt+0xc8c0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
sub    $0x1c,%esp
mov    0x20(%esp),%eax
movl   $0x3a,0x8(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,(%esp)
call   8056570 <__sprintf_chk@plt+0xc8c0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
movl   $0x3a,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8056570 <__sprintf_chk@plt+0xc8c0>
add    $0x1c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x48,%esp
mov    0x8063f60,%eax
lea    0x10(%esp),%ebx
mov    %ebx,(%esp)
mov    %eax,0x10(%esp)
mov    0x8063f64,%eax
mov    %eax,0x14(%esp)
mov    0x8063f68,%eax
mov    %eax,0x18(%esp)
mov    0x8063f6c,%eax
mov    %eax,0x1c(%esp)
mov    0x8063f70,%eax
mov    %eax,0x20(%esp)
mov    0x8063f74,%eax
mov    %eax,0x24(%esp)
mov    0x8063f78,%eax
mov    %eax,0x28(%esp)
mov    0x8063f7c,%eax
mov    %eax,0x2c(%esp)
mov    0x8063f80,%eax
mov    %eax,0x30(%esp)
mov    0x8063f84,%eax
mov    %eax,0x34(%esp)
mov    0x8063f88,%eax
mov    %eax,0x38(%esp)
mov    0x8063f8c,%eax
mov    %eax,0x3c(%esp)
mov    0x58(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x54(%esp),%eax
mov    %eax,0x4(%esp)
call   80561f0 <__sprintf_chk@plt+0xc540>
mov    0x60(%esp),%ecx
mov    0x5c(%esp),%edx
mov    0x50(%esp),%eax
mov    %ebx,(%esp)
call   8055f70 <__sprintf_chk@plt+0xc2c0>
add    $0x48,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0xffffffff,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80566b0 <__sprintf_chk@plt+0xca00>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x38(%esp),%eax
movl   $0xffffffff,0x10(%esp)
movl   $0x0,(%esp)
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   80566b0 <__sprintf_chk@plt+0xca00>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
mov    0x3c(%esp),%eax
movl   $0x0,(%esp)
mov    %eax,0x10(%esp)
mov    0x38(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x30(%esp),%eax
mov    %eax,0x4(%esp)
call   80566b0 <__sprintf_chk@plt+0xca00>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    0xc(%esp),%ecx
mov    0x8(%esp),%edx
movl   $0x8063300,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esp),%edx
xor    %eax,%eax
mov    0x8(%esp),%ecx
movl   $0x8063300,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
mov    0x4(%esp),%eax
mov    $0xffffffff,%ecx
mov    0x8(%esp),%edx
movl   $0x8063300,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
lea    0x0(%esi),%esi
mov    0x4(%esp),%edx
mov    $0xffffffff,%ecx
xor    %eax,%eax
movl   $0x8063300,0x4(%esp)
jmp    8055f70 <__sprintf_chk@plt+0xc2c0>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
test   %ecx,%ecx
push   %esi
mov    %eax,%esi
push   %ebx
lea    -0x1(%ecx),%ebx
je     80568cc <__sprintf_chk@plt+0xcc1c>
mov    %edx,%edi
call   8049c70 <__ctype_tolower_loc@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%ebx,1),%edx
mov    (%eax),%ecx
mov    (%ecx,%edx,4),%ecx
mov    %cl,(%esi,%ebx,1)
sub    $0x1,%ebx
cmp    $0xffffffff,%ebx
jne    80568b8 <__sprintf_chk@plt+0xcc08>
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %edi
test   %ecx,%ecx
push   %esi
mov    %eax,%esi
push   %ebx
lea    -0x1(%ecx),%ebx
je     805690c <__sprintf_chk@plt+0xcc5c>
mov    %edx,%edi
call   80495c0 <__ctype_toupper_loc@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
movzbl (%edi,%ebx,1),%edx
mov    (%eax),%ecx
mov    (%ecx,%edx,4),%ecx
mov    %cl,(%esi,%ebx,1)
sub    $0x1,%ebx
cmp    $0xffffffff,%ebx
jne    80568f8 <__sprintf_chk@plt+0xcc48>
mov    %esi,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x4ac,%esp
mov    0x4c4(%esp),%esi
mov    %al,0x2f(%esp)
mov    0x4c0(%esp),%edi
mov    %gs:0x14,%eax
mov    %eax,0x49c(%esp)
xor    %eax,%eax
mov    %edx,0x14(%esp)
mov    0x8(%esi),%eax
mov    0x28(%esi),%ebx
mov    %ecx,0x1c(%esp)
mov    %esi,0x44(%esp)
cmp    $0xc,%eax
mov    %eax,0x40(%esp)
mov    %ebx,0x50(%esp)
jle    8056af8 <__sprintf_chk@plt+0xce48>
subl   $0xc,0x40(%esp)
movzbl (%edi),%eax
movl   $0x0,0x18(%esp)
test   %al,%al
jne    80569be <__sprintf_chk@plt+0xcd0e>
jmp    8056c28 <__sprintf_chk@plt+0xcf78>
nop
mov    0x1c(%esp),%edx
sub    0x18(%esp),%edx
cmp    $0x1,%edx
jbe    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%ebx
test   %ebx,%ebx
je     80569a8 <__sprintf_chk@plt+0xccf8>
addl   $0x1,0x14(%esp)
mov    %al,(%ebx)
addl   $0x1,0x18(%esp)
mov    %edi,%ebx
movzbl 0x1(%ebx),%eax
lea    0x1(%ebx),%edi
test   %al,%al
je     8056c28 <__sprintf_chk@plt+0xcf78>
cmp    $0x25,%al
jne    8056988 <__sprintf_chk@plt+0xccd8>
movzbl 0x2f(%esp),%eax
movl   $0x0,0x24(%esp)
mov    %al,0x20(%esp)
xor    %eax,%eax
add    $0x1,%edi
movzbl (%edi),%ecx
cmp    $0x30,%cl
je     80569f8 <__sprintf_chk@plt+0xcd48>
jg     8056a08 <__sprintf_chk@plt+0xcd58>
cmp    $0x23,%cl
jne    8056a18 <__sprintf_chk@plt+0xcd68>
add    $0x1,%edi
movzbl (%edi),%ecx
mov    $0x1,%eax
cmp    $0x30,%cl
jne    80569e0 <__sprintf_chk@plt+0xcd30>
nop
movsbl %cl,%ebx
mov    %ebx,0x24(%esp)
jmp    80569d5 <__sprintf_chk@plt+0xcd25>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x5e,%cl
jne    8056a98 <__sprintf_chk@plt+0xcde8>
movb   $0x1,0x20(%esp)
jmp    80569d5 <__sprintf_chk@plt+0xcd25>
cmp    $0x2d,%cl
je     80569f8 <__sprintf_chk@plt+0xcd48>
movsbl %cl,%edx
mov    $0xffffffff,%ebp
sub    $0x30,%edx
cmp    $0x9,%edx
ja     8056a68 <__sprintf_chk@plt+0xcdb8>
xor    %ebp,%ebp
jmp    8056a56 <__sprintf_chk@plt+0xcda6>
lea    0x0(%esi,%eiz,1),%esi
movsbl (%edi),%edx
je     8056ab0 <__sprintf_chk@plt+0xce00>
lea    0x0(%ebp,%ebp,4),%ecx
lea    -0x30(%edx,%ecx,2),%ebp
add    $0x1,%edi
movzbl (%edi),%ecx
movsbl %cl,%edx
sub    $0x30,%edx
cmp    $0x9,%edx
ja     8056a68 <__sprintf_chk@plt+0xcdb8>
cmp    $0xccccccc,%ebp
jle    8056a38 <__sprintf_chk@plt+0xcd88>
mov    $0x7fffffff,%ebp
jmp    8056a45 <__sprintf_chk@plt+0xcd95>
lea    0x0(%esi),%esi
cmp    $0x45,%cl
je     8056ae8 <__sprintf_chk@plt+0xce38>
cmp    $0x4f,%cl
je     8056ae8 <__sprintf_chk@plt+0xce38>
movl   $0x0,0x28(%esp)
movsbl %cl,%esi
cmp    $0x7a,%cl
mov    %esi,0x48(%esp)
ja     8057a5b <__sprintf_chk@plt+0xddab>
movzbl %cl,%edx
jmp    *0x805dda0(,%edx,4)
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x5f,%cl
jne    8056a1d <__sprintf_chk@plt+0xcd6d>
movsbl %cl,%ebx
mov    %ebx,0x24(%esp)
jmp    80569d5 <__sprintf_chk@plt+0xcd25>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0x37,%dl
jle    8056a3d <__sprintf_chk@plt+0xcd8d>
mov    $0x7fffffff,%ebp
jmp    8056a45 <__sprintf_chk@plt+0xcd95>
lea    0x0(%esi,%eiz,1),%esi
xor    %eax,%eax
mov    0x49c(%esp),%ebx
xor    %gs:0x14,%ebx
jne    8057fc7 <__sprintf_chk@plt+0xe317>
add    $0x4ac,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
movsbl %cl,%ebx
add    $0x1,%edi
movzbl (%edi),%ecx
mov    %ebx,0x28(%esp)
jmp    8056a7a <__sprintf_chk@plt+0xcdca>
nop
mov    0x40(%esp),%esi
mov    $0xc,%eax
test   %esi,%esi
cmovne %esi,%eax
mov    %eax,0x40(%esp)
jmp    8056973 <__sprintf_chk@plt+0xccc3>
nop
cmpl   $0x4f,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
movb   $0x0,0x30(%esp)
mov    0x28(%esp),%ebx
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
test   %ebx,%ebx
jne    8057fcc <__sprintf_chk@plt+0xe31c>
mov    %edi,%ebx
movl   $0x0,0x4c(%esp)
lea    0x99(%esp),%eax
mov    %cl,(%eax)
movb   $0x0,0x1(%eax)
mov    0x44(%esp),%eax
movl   $0x400,0x4(%esp)
mov    %eax,0xc(%esp)
lea    0x97(%esp),%eax
mov    %eax,0x8(%esp)
lea    0x9c(%esp),%eax
mov    %eax,(%esp)
call   80499a0 <strftime@plt>
test   %eax,%eax
je     80569af <__sprintf_chk@plt+0xccff>
lea    -0x1(%eax),%esi
xor    %eax,%eax
mov    0x1c(%esp),%edx
test   %ebp,%ebp
mov    %esi,%edi
cmovns %ebp,%eax
cmp    %esi,%eax
cmovae %eax,%edi
sub    0x18(%esp),%edx
cmp    %edx,%edi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%edx
test   %edx,%edx
je     8056c14 <__sprintf_chk@plt+0xcf64>
cmp    %eax,%esi
jae    8056be3 <__sprintf_chk@plt+0xcf33>
mov    0x4c(%esp),%eax
test   %eax,%eax
jne    8056be3 <__sprintf_chk@plt+0xcf33>
sub    %esi,%ebp
cmpl   $0x30,0x24(%esp)
mov    %ebp,0x8(%esp)
je     8057bfe <__sprintf_chk@plt+0xdf4e>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
cmpb   $0x0,0x30(%esp)
jne    8056d72 <__sprintf_chk@plt+0xd0c2>
cmpb   $0x0,0x20(%esp)
je     8056d52 <__sprintf_chk@plt+0xd0a2>
mov    0x14(%esp),%eax
mov    %esi,%ecx
lea    0x9d(%esp),%edx
call   80568e0 <__sprintf_chk@plt+0xcc30>
nop
lea    0x0(%esi,%eiz,1),%esi
add    %esi,0x14(%esp)
movzbl 0x1(%ebx),%eax
add    %edi,0x18(%esp)
lea    0x1(%ebx),%edi
test   %al,%al
jne    80569be <__sprintf_chk@plt+0xcd0e>
nop
mov    0x14(%esp),%edx
test   %edx,%edx
je     8056d49 <__sprintf_chk@plt+0xd099>
mov    0x1c(%esp),%eax
test   %eax,%eax
je     8056d49 <__sprintf_chk@plt+0xd099>
mov    0x14(%esp),%eax
movb   $0x0,(%eax)
mov    0x18(%esp),%eax
jmp    8056ac2 <__sprintf_chk@plt+0xce12>
mov    0x28(%esp),%ebx
test   %ebx,%ebx
jne    8056ca0 <__sprintf_chk@plt+0xcff0>
movzbl 0x20(%esp),%esi
test   %al,%al
mov    $0x1,%eax
cmovne %eax,%esi
mov    %esi,%eax
mov    %al,0x20(%esp)
movb   $0x20,0x97(%esp)
mov    %edi,%ebx
movb   $0x25,0x98(%esp)
lea    0x99(%esp),%eax
movb   $0x0,0x30(%esp)
movl   $0x0,0x4c(%esp)
jmp    8056b4d <__sprintf_chk@plt+0xce9d>
mov    %ebx,%edi
lea    0x0(%esi),%esi
lea    -0x1(%edi),%eax
mov    $0x1,%esi
mov    %eax,%edx
add    $0x1,%esi
lea    -0x1(%eax),%eax
cmpb   $0x25,0x1(%eax)
jne    8056ca8 <__sprintf_chk@plt+0xcff8>
mov    %edi,%ebx
xor    %eax,%eax
test   %ebp,%ebp
mov    0x1c(%esp),%ecx
cmovns %ebp,%eax
cmp    %eax,%esi
mov    %eax,%edi
cmovae %esi,%edi
sub    0x18(%esp),%ecx
cmp    %ecx,%edi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%ecx
test   %ecx,%ecx
je     8056c14 <__sprintf_chk@plt+0xcf64>
cmp    %esi,%eax
jbe    8056d17 <__sprintf_chk@plt+0xd067>
sub    %esi,%ebp
cmpl   $0x30,0x24(%esp)
mov    %ebp,0x8(%esp)
mov    %edx,0x24(%esp)
je     8056d89 <__sprintf_chk@plt+0xd0d9>
movl   $0x20,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    0x24(%esp),%edx
add    %ebp,0x14(%esp)
cmpb   $0x0,0x20(%esp)
je     8056d30 <__sprintf_chk@plt+0xd080>
mov    0x14(%esp),%eax
mov    %esi,%ecx
call   80568e0 <__sprintf_chk@plt+0xcc30>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
xchg   %ax,%ax
mov    0x14(%esp),%eax
mov    %esi,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80496c0 <memcpy@plt>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
mov    0x18(%esp),%eax
jmp    8056ac2 <__sprintf_chk@plt+0xce12>
lea    0x9d(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
call   80496c0 <memcpy@plt>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
mov    0x14(%esp),%eax
mov    %esi,%ecx
lea    0x9d(%esp),%edx
call   80568a0 <__sprintf_chk@plt+0xcbf0>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
movl   $0x30,0x4(%esp)
jmp    8056d03 <__sprintf_chk@plt+0xd053>
mov    0x44(%esp),%eax
mov    $0x92492493,%edx
movl   $0x1,0x4c(%esp)
mov    0x18(%eax),%eax
lea    0x6(%eax),%esi
mov    %eax,0x30(%esp)
mov    %esi,%eax
imul   %edx
lea    (%edx,%esi,1),%eax
mov    %esi,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
sub    %edx,%esi
add    $0x1,%esi
mov    %esi,%eax
xor    %ebx,%ebx
shr    $0x1f,%eax
mov    %eax,0x30(%esp)
movb   $0x0,0x54(%esp)
cmpb   $0x0,0x30(%esp)
jne    8057748 <__sprintf_chk@plt+0xda98>
cmpl   $0x4f,0x28(%esp)
jne    8057748 <__sprintf_chk@plt+0xda98>
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
movb   $0x0,0x30(%esp)
movzbl 0x28(%esp),%eax
mov    %edi,%ebx
movzbl 0x48(%esp),%ecx
mov    %al,0x99(%esp)
lea    0x9a(%esp),%eax
jmp    8056b4d <__sprintf_chk@plt+0xce9d>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
mov    0xc(%eax),%esi
cmpl   $0x2d,0x24(%esp)
je     80572f8 <__sprintf_chk@plt+0xd648>
cmpl   $0x30,0x24(%esp)
je     80572f8 <__sprintf_chk@plt+0xd648>
movl   $0x2,0x4c(%esp)
movl   $0x5f,0x24(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movl   $0x2,0x4c(%esp)
mov    0xc(%eax),%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
xor    %eax,%eax
test   %ebp,%ebp
mov    0x1c(%esp),%edx
cmovns %ebp,%eax
mov    $0x1,%ebx
test   %eax,%eax
cmovne %eax,%ebx
sub    0x18(%esp),%edx
cmp    %edx,%ebx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%ecx
test   %ecx,%ecx
je     8056eea <__sprintf_chk@plt+0xd23a>
cmp    $0x1,%eax
jbe    8056ede <__sprintf_chk@plt+0xd22e>
cmpl   $0x30,0x24(%esp)
lea    -0x1(%ebp),%esi
mov    %esi,0x8(%esp)
je     8057f1f <__sprintf_chk@plt+0xe26f>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %esi,0x14(%esp)
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
movb   $0x9,(%eax)
add    %ebx,0x18(%esp)
mov    %edi,%ebx
jmp    80569af <__sprintf_chk@plt+0xccff>
mov    0x44(%esp),%ebx
mov    $0x66666667,%esi
mov    (%ebx),%eax
mov    %eax,0x68(%esp)
mov    0x4(%ebx),%eax
mov    %eax,0x6c(%esp)
mov    0x8(%ebx),%eax
mov    %eax,0x70(%esp)
mov    0xc(%ebx),%eax
mov    %eax,0x74(%esp)
mov    0x10(%ebx),%eax
mov    %eax,0x78(%esp)
mov    0x14(%ebx),%eax
mov    %eax,0x7c(%esp)
mov    0x18(%ebx),%eax
mov    %eax,0x80(%esp)
mov    0x1c(%ebx),%eax
mov    %eax,0x84(%esp)
mov    0x20(%ebx),%eax
mov    %eax,0x88(%esp)
mov    0x24(%ebx),%eax
mov    %eax,0x8c(%esp)
mov    0x28(%ebx),%eax
mov    %eax,0x90(%esp)
lea    0x68(%esp),%eax
mov    %eax,(%esp)
call   8049770 <mktime@plt>
mov    %ebp,0x48(%esp)
mov    %eax,%ecx
shr    $0x1f,%eax
mov    %eax,0x30(%esp)
mov    %eax,%ebx
lea    0xaa(%esp),%eax
mov    %eax,%ebp
lea    0x0(%esi),%esi
mov    %ecx,%eax
sub    $0x1,%ebp
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x2,%edx
sub    %eax,%edx
lea    (%edx,%edx,4),%eax
add    %eax,%eax
sub    %eax,%ecx
mov    %ecx,%eax
mov    %edx,%ecx
mov    $0x30,%edx
sub    %eax,%edx
add    $0x30,%eax
test   %bl,%bl
cmove  %eax,%edx
test   %ecx,%ecx
mov    %dl,0x0(%ebp)
jne    8056f80 <__sprintf_chk@plt+0xd2d0>
mov    %ebp,0x28(%esp)
mov    0x48(%esp),%ebp
mov    $0x1,%eax
test   %ebp,%ebp
cmovg  %ebp,%eax
cmpb   $0x0,0x30(%esp)
mov    %eax,0x48(%esp)
jne    8057a68 <__sprintf_chk@plt+0xddb8>
cmpl   $0x2d,0x24(%esp)
je     8057c1b <__sprintf_chk@plt+0xdf6b>
mov    0x28(%esp),%esi
lea    0xaa(%esp),%eax
sub    %eax,%esi
add    0x48(%esp),%esi
test   %esi,%esi
jle    8057c1b <__sprintf_chk@plt+0xdf6b>
mov    %edi,%ebx
xor    %edx,%edx
xor    %edi,%edi
cmpl   $0x5f,0x24(%esp)
je     8057a95 <__sprintf_chk@plt+0xdde5>
mov    0x1c(%esp),%ecx
sub    0x18(%esp),%ecx
cmp    %ecx,0x48(%esp)
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    %edi,%eax
test   %al,%al
je     805708f <__sprintf_chk@plt+0xd3df>
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
mov    $0x1,%edi
test   %eax,%eax
cmovne %eax,%edi
cmp    %edi,%ecx
jbe    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%ecx
test   %ecx,%ecx
je     805708b <__sprintf_chk@plt+0xd3db>
cmp    $0x1,%eax
jbe    8057080 <__sprintf_chk@plt+0xd3d0>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    8057080 <__sprintf_chk@plt+0xd3d0>
sub    $0x1,%ebp
cmpl   $0x30,0x24(%esp)
mov    %edx,0x30(%esp)
mov    %ebp,0x8(%esp)
je     8057e13 <__sprintf_chk@plt+0xe163>
movl   $0x20,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    0x30(%esp),%edx
add    %ebp,0x14(%esp)
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
mov    %dl,(%eax)
add    %edi,0x18(%esp)
mov    0x14(%esp),%eax
test   %eax,%eax
je     80570af <__sprintf_chk@plt+0xd3ff>
mov    %esi,0x8(%esp)
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %esi,0x14(%esp)
add    %esi,0x18(%esp)
xor    %ecx,%ecx
xor    %ebp,%ebp
lea    0xaa(%esp),%esi
mov    %ecx,%edi
mov    0x1c(%esp),%eax
sub    0x28(%esp),%esi
cmp    %ecx,%esi
cmovae %esi,%edi
sub    0x18(%esp),%eax
cmp    %eax,%edi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%eax
test   %eax,%eax
je     8056c14 <__sprintf_chk@plt+0xcf64>
cmp    %ecx,%esi
jae    805711a <__sprintf_chk@plt+0xd46a>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    805711a <__sprintf_chk@plt+0xd46a>
sub    %esi,%ebp
cmpl   $0x30,0x24(%esp)
mov    %ebp,0x8(%esp)
je     8057be1 <__sprintf_chk@plt+0xdf31>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
cmpb   $0x0,0x20(%esp)
je     8057a78 <__sprintf_chk@plt+0xddc8>
mov    0x28(%esp),%edx
mov    %esi,%ecx
mov    0x14(%esp),%eax
call   80568e0 <__sprintf_chk@plt+0xcc30>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
xor    %eax,%eax
test   %ebp,%ebp
mov    0x1c(%esp),%edx
cmovns %ebp,%eax
mov    $0x1,%ebx
test   %eax,%eax
cmovne %eax,%ebx
sub    0x18(%esp),%edx
cmp    %edx,%ebx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%esi
test   %esi,%esi
je     8056eea <__sprintf_chk@plt+0xd23a>
cmp    $0x1,%eax
jbe    8057195 <__sprintf_chk@plt+0xd4e5>
cmpl   $0x30,0x24(%esp)
lea    -0x1(%ebp),%esi
mov    %esi,0x8(%esp)
je     8057f02 <__sprintf_chk@plt+0xe252>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %esi,0x14(%esp)
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
movb   $0xa,(%eax)
jmp    8056eea <__sprintf_chk@plt+0xd23a>
mov    0x28(%esp),%eax
mov    $0x805dd8d,%esi
test   %eax,%eax
jne    8056ca0 <__sprintf_chk@plt+0xcff0>
nop
mov    0x4cc(%esp),%ebx
xor    %edx,%edx
mov    $0xffffffff,%ecx
movzbl 0x20(%esp),%eax
mov    %esi,(%esp)
mov    %ebx,0xc(%esp)
mov    0x4c8(%esp),%ebx
mov    %eax,0x28(%esp)
mov    %ebx,0x8(%esp)
mov    0x44(%esp),%ebx
mov    %ebx,0x4(%esp)
call   8056920 <__sprintf_chk@plt+0xcc70>
mov    %eax,%ebx
xor    %eax,%eax
test   %ebp,%ebp
cmovns %ebp,%eax
cmp    %eax,%ebx
mov    %eax,%ecx
cmovae %ebx,%ecx
mov    %ecx,%edx
mov    %ecx,0x20(%esp)
mov    0x1c(%esp),%ecx
sub    0x18(%esp),%ecx
cmp    %ecx,%edx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%edx
test   %edx,%edx
je     8057283 <__sprintf_chk@plt+0xd5d3>
cmp    %eax,%ebx
jae    8057251 <__sprintf_chk@plt+0xd5a1>
sub    %ebx,%ebp
cmpl   $0x30,0x24(%esp)
mov    %ebp,0x8(%esp)
mov    %ecx,0x24(%esp)
je     8057cca <__sprintf_chk@plt+0xe01a>
movl   $0x20,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    0x24(%esp),%ecx
add    %ebp,0x14(%esp)
mov    0x4cc(%esp),%eax
mov    0x14(%esp),%edx
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
mov    0x4c8(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x44(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x28(%esp),%eax
call   8056920 <__sprintf_chk@plt+0xcc70>
add    %ebx,0x14(%esp)
mov    0x20(%esp),%eax
mov    %edi,%ebx
add    %eax,0x18(%esp)
jmp    80569af <__sprintf_chk@plt+0xccff>
mov    0x28(%esp),%eax
mov    $0x805dd84,%esi
test   %eax,%eax
je     80571b8 <__sprintf_chk@plt+0xd508>
jmp    8056ca0 <__sprintf_chk@plt+0xcff0>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movl   $0x2,0x4c(%esp)
mov    0x4(%eax),%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x40(%esp),%esi
movl   $0x2,0x4c(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
mov    0x8(%eax),%esi
lea    0x0(%esi),%esi
movl   $0x2,0x4c(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%ebx
mov    0x14(%ebx),%eax
mov    %eax,%esi
mov    %eax,0x54(%esp)
sar    $0x1f,%eax
and    $0x190,%eax
lea    -0x64(%eax,%esi,1),%eax
mov    0x18(%ebx),%esi
mov    %eax,0x30(%esp)
mov    %esi,%edx
mov    %esi,0x4c(%esp)
mov    0x1c(%ebx),%esi
mov    %esi,%ebx
sub    %edx,%ebx
mov    $0x92492493,%edx
add    $0x17e,%ebx
mov    %ebx,%eax
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    %esi,%eax
sub    %ebx,%eax
lea    0x3(%eax,%edx,1),%eax
test   %eax,%eax
mov    %eax,0x58(%esp)
js     8057e4b <__sprintf_chk@plt+0xe19b>
testb  $0x3,0x30(%esp)
mov    $0xfffffe93,%eax
jne    80573ca <__sprintf_chk@plt+0xd71a>
mov    0x30(%esp),%eax
mov    $0x51eb851f,%ebx
imul   %ebx
mov    0x30(%esp),%eax
mov    %edx,%ebx
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
imul   $0x64,%edx,%edx
cmp    %edx,0x30(%esp)
mov    %eax,0x5c(%esp)
mov    $0xfffffe92,%eax
jne    80573ca <__sprintf_chk@plt+0xd71a>
sar    $0x7,%ebx
mov    0x30(%esp),%eax
sub    0x5c(%esp),%ebx
imul   $0x190,%ebx,%ebx
sub    %ebx,%eax
cmp    $0x1,%eax
sbb    %eax,%eax
sub    $0x16d,%eax
add    %eax,%esi
mov    $0x92492493,%edx
mov    %esi,%ebx
sub    0x4c(%esp),%ebx
movl   $0x1,0x30(%esp)
add    $0x17e,%ebx
mov    %ebx,%eax
sub    %ebx,%esi
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
lea    0x3(%esi,%edx,1),%ebx
test   %ebx,%ebx
js     8057f4b <__sprintf_chk@plt+0xe29b>
cmp    $0x47,%cl
je     8057d6e <__sprintf_chk@plt+0xe0be>
cmp    $0x67,%cl
jne    8057d4a <__sprintf_chk@plt+0xe09a>
mov    0x54(%esp),%eax
mov    $0x51eb851f,%esi
mov    0x54(%esp),%ebx
mov    0x30(%esp),%ecx
movl   $0x2,0x4c(%esp)
imul   %esi
mov    %ebx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
mov    %ebx,%eax
imul   $0x64,%edx,%edx
sub    %edx,%eax
add    %eax,%ecx
mov    %ecx,%eax
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %edx,%esi
sar    $0x5,%esi
sub    %eax,%esi
imul   $0x64,%esi,%esi
sub    %esi,%ecx
mov    %ecx,%esi
jns    8056dd0 <__sprintf_chk@plt+0xd120>
mov    $0xfffff894,%eax
mov    %ecx,%edx
sub    0x30(%esp),%eax
neg    %edx
add    $0x64,%esi
cmp    %eax,%ebx
cmovl  %edx,%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x45,0x28(%esp)
je     8057cb6 <__sprintf_chk@plt+0xe006>
mov    0x44(%esp),%eax
mov    $0x51eb851f,%esi
movl   $0x2,0x4c(%esp)
mov    0x14(%eax),%ecx
mov    %ecx,%eax
imul   %esi
mov    %ecx,%eax
sar    $0x1f,%eax
mov    %edx,%esi
sar    $0x5,%esi
sub    %eax,%esi
mov    %ecx,%eax
imul   $0x64,%esi,%esi
sub    %esi,%eax
mov    %eax,%esi
jns    8056dd0 <__sprintf_chk@plt+0xd120>
neg    %eax
add    $0x64,%esi
cmp    $0xfffff893,%ecx
cmovle %eax,%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
mov    $0x805dd96,%esi
jmp    80571b8 <__sprintf_chk@plt+0xd508>
movzbl 0x20(%esp),%ebx
cmp    $0x1,%al
sbb    %esi,%esi
add    $0x1,%esi
test   %al,%al
mov    $0x0,%eax
cmovne %eax,%ebx
mov    0x50(%esp),%eax
mov    %bl,0x20(%esp)
test   %eax,%eax
je     8057f3c <__sprintf_chk@plt+0xe28c>
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    %eax,%ebx
xor    %eax,%eax
test   %ebp,%ebp
mov    0x1c(%esp),%edx
cmovns %ebp,%eax
cmp    %eax,%ebx
mov    %eax,%ecx
cmovae %ebx,%ecx
sub    0x18(%esp),%edx
mov    %ecx,0x28(%esp)
cmp    %edx,%ecx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%edx
test   %edx,%edx
je     8057592 <__sprintf_chk@plt+0xd8e2>
cmp    %ebx,%eax
jbe    805756a <__sprintf_chk@plt+0xd8ba>
sub    %ebx,%ebp
cmpl   $0x30,0x24(%esp)
mov    %ebp,0x8(%esp)
je     8057f68 <__sprintf_chk@plt+0xe2b8>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
mov    %esi,%eax
test   %al,%al
jne    8057dc4 <__sprintf_chk@plt+0xe114>
cmpb   $0x0,0x20(%esp)
je     8057cde <__sprintf_chk@plt+0xe02e>
mov    0x50(%esp),%edx
mov    %ebx,%ecx
mov    0x14(%esp),%eax
call   80568e0 <__sprintf_chk@plt+0xcc30>
add    %ebx,0x14(%esp)
mov    0x28(%esp),%eax
mov    %edi,%ebx
add    %eax,0x18(%esp)
jmp    80569af <__sprintf_chk@plt+0xccff>
movzbl 0x20(%esp),%esi
test   %al,%al
mov    $0x1,%eax
cmovne %eax,%esi
mov    %esi,%eax
mov    0x28(%esp),%esi
mov    %al,0x20(%esp)
test   %esi,%esi
jne    8056ca0 <__sprintf_chk@plt+0xcff0>
jmp    8056c6d <__sprintf_chk@plt+0xcfbd>
movl   $0x0,0x30(%esp)
mov    0x44(%esp),%eax
mov    0x20(%eax),%ebx
test   %ebx,%ebx
js     8057cd7 <__sprintf_chk@plt+0xe027>
mov    0x24(%eax),%ebx
mov    $0x91a2b3c5,%edx
mov    %ebx,%eax
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,0x4c(%esp)
lea    (%edx,%ebx,1),%esi
sar    $0xb,%esi
sub    %eax,%esi
mov    $0x88888889,%eax
imul   %ebx
mov    $0x88888889,%eax
lea    (%edx,%ebx,1),%ecx
sar    $0x5,%ecx
sub    0x4c(%esp),%ecx
imul   %ecx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x5,%eax
sub    %edx,%eax
mov    %ecx,%edx
imul   $0x3c,%eax,%eax
imul   $0x3c,%ecx,%ecx
sub    %eax,%edx
mov    %edx,%eax
mov    %ebx,%edx
sub    %ecx,%edx
mov    %edx,%ecx
mov    0x30(%esp),%edx
cmp    $0x1,%edx
je     8057da1 <__sprintf_chk@plt+0xe0f1>
jb     8057ee2 <__sprintf_chk@plt+0xe232>
cmp    $0x2,%edx
je     8057d1e <__sprintf_chk@plt+0xe06e>
cmp    $0x3,%edx
je     8057e20 <__sprintf_chk@plt+0xe170>
movzbl (%edi),%ecx
mov    %edi,%ebx
cmp    $0x25,%cl
jne    8056c98 <__sprintf_chk@plt+0xcfe8>
mov    %ebx,%edx
mov    $0x1,%esi
jmp    8056cb8 <__sprintf_chk@plt+0xd008>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movl   $0x1,0x4c(%esp)
mov    0x18(%eax),%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%esi
mov    $0x92492493,%ebx
mov    0x18(%esi),%eax
lea    0x6(%eax),%ecx
mov    %eax,0x30(%esp)
mov    %ecx,%eax
imul   %ebx
lea    (%edx,%ecx,1),%eax
mov    %ecx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
mov    0x1c(%esi),%eax
sub    %ecx,%edx
lea    0x7(%edx,%eax,1),%ecx
mov    %ecx,%eax
imul   %ebx
lea    (%edx,%ecx,1),%esi
sar    $0x2,%esi
sar    $0x1f,%ecx
sub    %ecx,%esi
jmp    80572f8 <__sprintf_chk@plt+0xd648>
mov    0x28(%esp),%eax
cmp    $0x4f,%eax
je     8056ca0 <__sprintf_chk@plt+0xcff0>
cmp    $0x45,%eax
je     8057df1 <__sprintf_chk@plt+0xe141>
mov    0x44(%esp),%eax
mov    $0x51eb851f,%edx
mov    0x14(%eax),%ecx
mov    %ecx,%eax
imul   %edx
mov    %ecx,%eax
sar    $0x1f,%eax
sar    $0x5,%edx
sub    %eax,%edx
xor    %eax,%eax
lea    0x13(%edx),%esi
imul   $0x64,%edx,%edx
cmp    %edx,%ecx
js     8057f5c <__sprintf_chk@plt+0xe2ac>
cmp    $0xfffff894,%ecx
setl   0x30(%esp)
sub    %eax,%esi
movl   $0x2,0x4c(%esp)
xor    %ebx,%ebx
movb   $0x0,0x54(%esp)
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
neg    %eax
cmpb   $0x0,0x30(%esp)
lea    0xaa(%esp),%ecx
mov    %ebp,0x48(%esp)
cmovne %eax,%esi
nop
test   $0x1,%bl
je     805776c <__sprintf_chk@plt+0xdabc>
movb   $0x3a,-0x1(%ecx)
sub    $0x1,%ecx
mov    $0xcccccccd,%eax
mul    %esi
lea    -0x1(%ecx),%ebp
shr    $0x3,%edx
lea    (%edx,%edx,4),%eax
add    %eax,%eax
sub    %eax,%esi
lea    0x30(%esi),%eax
mov    %edx,%esi
sar    %ebx
mov    %al,-0x1(%ecx)
je     8057790 <__sprintf_chk@plt+0xdae0>
mov    %ebp,%ecx
jmp    8057760 <__sprintf_chk@plt+0xdab0>
test   %edx,%edx
jne    805778c <__sprintf_chk@plt+0xdadc>
mov    0x4c(%esp),%eax
mov    %ebp,0x28(%esp)
mov    0x48(%esp),%ebp
cmp    %ebp,%eax
cmovl  %ebp,%eax
cmpb   $0x0,0x30(%esp)
mov    %eax,0x48(%esp)
jne    8057a68 <__sprintf_chk@plt+0xddb8>
cmpb   $0x0,0x54(%esp)
je     8056fd3 <__sprintf_chk@plt+0xd323>
mov    $0x2b,%edx
lea    0x0(%esi,%eiz,1),%esi
cmpl   $0x2d,0x24(%esp)
je     8057b5c <__sprintf_chk@plt+0xdeac>
mov    0x28(%esp),%eax
lea    0xaa(%esp),%esi
sub    %esi,%eax
mov    0x48(%esp),%esi
lea    -0x1(%esi,%eax,1),%esi
test   %esi,%esi
jle    8057c29 <__sprintf_chk@plt+0xdf79>
mov    %edi,%ebx
mov    $0x1,%edi
jmp    8056ffd <__sprintf_chk@plt+0xd34d>
lea    0x0(%esi,%eiz,1),%esi
mov    0x28(%esp),%eax
cmp    $0x45,%eax
je     8057cb6 <__sprintf_chk@plt+0xe006>
cmp    $0x4f,%eax
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movl   $0x4,0x4c(%esp)
mov    0x14(%eax),%esi
cmp    $0xfffff894,%esi
setl   0x30(%esp)
add    $0x76c,%esi
jmp    805773a <__sprintf_chk@plt+0xda8a>
mov    $0x70,%ecx
movl   $0x70,0x48(%esp)
movb   $0x1,0x30(%esp)
movzbl 0x30(%esp),%esi
test   %al,%al
mov    $0x1,%eax
movzbl 0x20(%esp),%ebx
mov    $0x0,%edx
cmovne %eax,%esi
cmovne %edx,%ebx
mov    %esi,%eax
mov    %bl,0x20(%esp)
mov    %al,0x30(%esp)
jmp    8056b20 <__sprintf_chk@plt+0xce70>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
cmp    $0xffffffff,%ebp
je     8057dd8 <__sprintf_chk@plt+0xe128>
cmp    $0x8,%ebp
jg     8057fb7 <__sprintf_chk@plt+0xe307>
mov    0x4cc(%esp),%esi
mov    %ebp,%ecx
mov    $0x66666667,%ebx
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %esi,%eax
add    $0x1,%ecx
imul   %ebx
sar    $0x1f,%esi
sar    $0x2,%edx
sub    %esi,%edx
cmp    $0x9,%ecx
mov    %edx,%esi
jne    80578a8 <__sprintf_chk@plt+0xdbf8>
mov    %ebp,0x4c(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
mov    $0x92492493,%edx
mov    0x1c(%eax),%ecx
sub    0x18(%eax),%ecx
add    $0x7,%ecx
mov    %ecx,%eax
imul   %edx
jmp    80576d5 <__sprintf_chk@plt+0xda25>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x40(%esp),%esi
jmp    8056e3c <__sprintf_chk@plt+0xd18c>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
mov    0x8(%eax),%esi
jmp    8056e3c <__sprintf_chk@plt+0xd18c>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movb   $0x0,0x54(%esp)
movl   $0x3,0x4c(%esp)
mov    0x1c(%eax),%esi
cmp    $0xffffffff,%esi
setl   0x30(%esp)
add    $0x1,%esi
xor    %ebx,%ebx
jmp    8056de0 <__sprintf_chk@plt+0xd130>
mov    $0x805b453,%esi
jmp    80571b8 <__sprintf_chk@plt+0xd508>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movb   $0x0,0x54(%esp)
movl   $0x2,0x4c(%esp)
mov    0x10(%eax),%esi
cmp    $0xffffffff,%esi
setl   0x30(%esp)
add    $0x1,%esi
xor    %ebx,%ebx
jmp    8056de0 <__sprintf_chk@plt+0xd130>
cmpl   $0x45,0x28(%esp)
je     8056ca0 <__sprintf_chk@plt+0xcff0>
mov    0x44(%esp),%eax
movl   $0x2,0x4c(%esp)
mov    (%eax),%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
movzbl 0x1(%edi),%eax
cmp    $0x3a,%al
je     8057cfb <__sprintf_chk@plt+0xe04b>
lea    0x1(%edi),%edx
movl   $0x1,0x30(%esp)
cmp    $0x7a,%al
jne    8056ca0 <__sprintf_chk@plt+0xcff0>
mov    %edx,%edi
jmp    80575cf <__sprintf_chk@plt+0xd91f>
mov    0x28(%esp),%ebx
test   %ebx,%ebx
jne    8057cc3 <__sprintf_chk@plt+0xe013>
mov    0x28(%esp),%eax
test   %ebp,%ebp
mov    $0x1,%ebx
mov    0x1c(%esp),%edx
cmovns %ebp,%eax
test   %eax,%eax
cmovne %eax,%ebx
sub    0x18(%esp),%edx
cmp    %edx,%ebx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%edx
test   %edx,%edx
je     8056eea <__sprintf_chk@plt+0xd23a>
cmp    $0x1,%eax
jbe    8057a35 <__sprintf_chk@plt+0xdd85>
cmpl   $0x30,0x24(%esp)
lea    -0x1(%ebp),%esi
mov    %esi,0x8(%esp)
je     8057faa <__sprintf_chk@plt+0xe2fa>
movl   $0x20,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   8049a40 <memset@plt>
movzbl (%edi),%ecx
add    %esi,0x14(%esp)
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
mov    %cl,(%eax)
jmp    8056eea <__sprintf_chk@plt+0xd23a>
movb   $0x0,0x30(%esp)
jmp    805784d <__sprintf_chk@plt+0xdb9d>
lea    -0x1(%edi),%ebx
movzbl -0x1(%edi),%ecx
jmp    805765c <__sprintf_chk@plt+0xd9ac>
mov    %edi,%ebx
jmp    805765c <__sprintf_chk@plt+0xd9ac>
lea    0x0(%esi),%esi
mov    $0x2d,%edx
jmp    80577c8 <__sprintf_chk@plt+0xdb18>
lea    0x0(%esi),%esi
mov    0x28(%esp),%eax
mov    %esi,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80496c0 <memcpy@plt>
jmp    8056c10 <__sprintf_chk@plt+0xcf60>
mov    0x1c(%esp),%eax
sub    0x18(%esp),%eax
cmp    %eax,%esi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%eax
test   %eax,%eax
je     8057acd <__sprintf_chk@plt+0xde1d>
mov    %esi,0x8(%esp)
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
mov    %edx,0x30(%esp)
call   8049a40 <memset@plt>
mov    0x30(%esp),%edx
add    %esi,0x14(%esp)
add    %esi,0x18(%esp)
xor    %ecx,%ecx
cmp    %esi,%ebp
jle    8057caf <__sprintf_chk@plt+0xdfff>
sub    %esi,%ebp
cmovns %ebp,%ecx
mov    %edi,%eax
test   %al,%al
je     80570b7 <__sprintf_chk@plt+0xd407>
test   %ecx,%ecx
mov    $0x1,%edi
mov    0x1c(%esp),%eax
cmovne %ecx,%edi
sub    0x18(%esp),%eax
cmp    %eax,%edi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%eax
test   %eax,%eax
je     8057b53 <__sprintf_chk@plt+0xdea3>
cmp    $0x1,%ecx
jbe    8057b48 <__sprintf_chk@plt+0xde98>
mov    0x48(%esp),%esi
test   %esi,%esi
jne    8057b48 <__sprintf_chk@plt+0xde98>
mov    0x14(%esp),%eax
lea    -0x1(%ebp),%esi
mov    %esi,0x8(%esp)
movl   $0x20,0x4(%esp)
mov    %ecx,0x4c(%esp)
mov    %eax,(%esp)
mov    %edx,0x30(%esp)
call   8049a40 <memset@plt>
mov    0x4c(%esp),%ecx
add    %esi,0x14(%esp)
mov    0x30(%esp),%edx
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
mov    %dl,(%eax)
add    %edi,0x18(%esp)
jmp    80570b7 <__sprintf_chk@plt+0xd407>
xor    %ebx,%ebx
test   %ebp,%ebp
mov    0x1c(%esp),%eax
cmovns %ebp,%ebx
mov    $0x1,%esi
test   %ebx,%ebx
cmovne %ebx,%esi
sub    0x18(%esp),%eax
cmp    %eax,%esi
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%eax
test   %eax,%eax
je     8057bcc <__sprintf_chk@plt+0xdf1c>
cmp    $0x1,%ebx
jbe    8057bc1 <__sprintf_chk@plt+0xdf11>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    8057bc1 <__sprintf_chk@plt+0xdf11>
mov    0x14(%esp),%eax
lea    -0x1(%ebp),%ecx
mov    %ecx,0x8(%esp)
movl   $0x20,0x4(%esp)
mov    %edx,0x30(%esp)
mov    %eax,(%esp)
mov    %ecx,0x24(%esp)
call   8049a40 <memset@plt>
mov    0x24(%esp),%ecx
add    %ecx,0x14(%esp)
mov    0x30(%esp),%edx
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
mov    %dl,(%eax)
mov    %ebx,%ecx
mov    %edi,%ebx
add    %esi,0x18(%esp)
movl   $0x2d,0x24(%esp)
jmp    80570b7 <__sprintf_chk@plt+0xd407>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
jmp    805711a <__sprintf_chk@plt+0xd46a>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
jmp    8056be3 <__sprintf_chk@plt+0xcf33>
xor    %ecx,%ecx
test   %ebp,%ebp
cmovns %ebp,%ecx
mov    %edi,%ebx
jmp    80570b7 <__sprintf_chk@plt+0xd407>
xor    %ecx,%ecx
test   %ebp,%ebp
mov    0x1c(%esp),%eax
cmovns %ebp,%ecx
mov    $0x1,%ebx
test   %ecx,%ecx
cmovne %ecx,%ebx
sub    0x18(%esp),%eax
cmp    %eax,%ebx
jae    8056ac0 <__sprintf_chk@plt+0xce10>
mov    0x14(%esp),%eax
test   %eax,%eax
je     8057ca4 <__sprintf_chk@plt+0xdff4>
cmp    $0x1,%ecx
jbe    8057c99 <__sprintf_chk@plt+0xdfe9>
mov    0x48(%esp),%eax
test   %eax,%eax
jne    8057c99 <__sprintf_chk@plt+0xdfe9>
cmpl   $0x30,0x24(%esp)
lea    -0x1(%ebp),%esi
mov    %ecx,0x4c(%esp)
mov    %edx,0x30(%esp)
mov    %esi,0x8(%esp)
je     8057f85 <__sprintf_chk@plt+0xe2d5>
mov    0x14(%esp),%eax
movl   $0x20,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    0x4c(%esp),%ecx
add    %esi,0x14(%esp)
mov    0x30(%esp),%edx
mov    0x14(%esp),%eax
addl   $0x1,0x14(%esp)
mov    %dl,(%eax)
add    %ebx,0x18(%esp)
mov    %edi,%ebx
jmp    80570b7 <__sprintf_chk@plt+0xd407>
xor    %ebp,%ebp
jmp    8057ae0 <__sprintf_chk@plt+0xde30>
movl   $0x0,0x4c(%esp)
jmp    8056df6 <__sprintf_chk@plt+0xd146>
mov    %edi,%ebx
jmp    8057665 <__sprintf_chk@plt+0xd9b5>
movl   $0x30,0x4(%esp)
jmp    805723d <__sprintf_chk@plt+0xd58d>
mov    %edi,%ebx
jmp    80569af <__sprintf_chk@plt+0xccff>
mov    0x50(%esp),%eax
mov    %ebx,0x8(%esp)
mov    %eax,0x4(%esp)
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80496c0 <memcpy@plt>
jmp    805758e <__sprintf_chk@plt+0xd8de>
lea    0x2(%edi),%ecx
movl   $0x1,0x30(%esp)
mov    %ecx,%edx
add    $0x1,%ecx
movzbl -0x1(%ecx),%eax
addl   $0x1,0x30(%esp)
cmp    $0x3a,%al
jne    80579b9 <__sprintf_chk@plt+0xdd09>
jmp    8057d06 <__sprintf_chk@plt+0xe056>
imul   $0x2710,%esi,%edx
imul   $0x64,%eax,%eax
shr    $0x1f,%ebx
mov    %ebx,0x30(%esp)
mov    $0x14,%ebx
movb   $0x1,0x54(%esp)
add    %edx,%eax
lea    (%eax,%ecx,1),%esi
movl   $0x9,0x4c(%esp)
jmp    8056de0 <__sprintf_chk@plt+0xd130>
mov    %ebx,%eax
mov    $0x92492493,%edx
imul   %edx
movl   $0x2,0x4c(%esp)
lea    (%edx,%ebx,1),%esi
sar    $0x2,%esi
sar    $0x1f,%ebx
sub    %ebx,%esi
add    $0x1,%esi
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
mov    0x30(%esp),%esi
mov    $0xfffff894,%eax
mov    0x54(%esp),%ebx
movl   $0x4,0x4c(%esp)
movb   $0x0,0x54(%esp)
sub    %esi,%eax
cmp    %eax,%ebx
mov    %esi,%eax
setl   0x30(%esp)
lea    0x76c(%eax,%ebx,1),%esi
xor    %ebx,%ebx
jmp    8056de0 <__sprintf_chk@plt+0xd130>
imul   $0x64,%esi,%esi
shr    $0x1f,%ebx
mov    %ebx,0x30(%esp)
mov    $0x4,%ebx
movb   $0x1,0x54(%esp)
add    %eax,%esi
movl   $0x6,0x4c(%esp)
jmp    8056de0 <__sprintf_chk@plt+0xd130>
mov    0x50(%esp),%edx
mov    %ebx,%ecx
mov    0x14(%esp),%eax
call   80568a0 <__sprintf_chk@plt+0xcbf0>
jmp    805758e <__sprintf_chk@plt+0xd8de>
mov    0x4cc(%esp),%esi
mov    $0x9,%ebp
movl   $0x9,0x4c(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
movb   $0x20,0x97(%esp)
movb   $0x25,0x98(%esp)
movb   $0x0,0x30(%esp)
movl   $0x0,0x4c(%esp)
jmp    8056e0b <__sprintf_chk@plt+0xd15b>
movl   $0x30,0x4(%esp)
jmp    805706c <__sprintf_chk@plt+0xd3bc>
test   %ecx,%ecx
jne    8057d1e <__sprintf_chk@plt+0xe06e>
test   %eax,%eax
jne    8057da1 <__sprintf_chk@plt+0xe0f1>
shr    $0x1f,%ebx
mov    %ebx,0x30(%esp)
xor    %ebx,%ebx
movb   $0x1,0x54(%esp)
movl   $0x3,0x4c(%esp)
jmp    8056de0 <__sprintf_chk@plt+0xd130>
mov    0x30(%esp),%ebx
mov    $0x16d,%eax
sub    $0x1,%ebx
test   $0x3,%bl
jne    8057ea2 <__sprintf_chk@plt+0xe1f2>
mov    %ebx,%eax
mov    $0x51eb851f,%edx
imul   %edx
mov    %ebx,%eax
sar    $0x1f,%eax
mov    %eax,0x58(%esp)
mov    %edx,0x30(%esp)
sar    $0x5,%edx
sub    %eax,%edx
mov    $0x16e,%eax
imul   $0x64,%edx,%edx
cmp    %edx,%ebx
jne    8057ea2 <__sprintf_chk@plt+0xe1f2>
mov    0x30(%esp),%eax
sar    $0x7,%eax
sub    0x58(%esp),%eax
imul   $0x190,%eax,%eax
sub    %eax,%ebx
cmp    $0x1,%ebx
sbb    %eax,%eax
not    %eax
add    $0x16e,%eax
add    %eax,%esi
mov    $0x92492493,%edx
mov    %esi,%ebx
sub    0x4c(%esp),%ebx
movl   $0xffffffff,0x30(%esp)
add    $0x17e,%ebx
mov    %ebx,%eax
sub    %ebx,%esi
imul   %edx
lea    (%edx,%ebx,1),%eax
mov    %ebx,%edx
sar    $0x1f,%edx
sar    $0x2,%eax
sub    %edx,%eax
lea    0x0(,%eax,8),%edx
sub    %eax,%edx
lea    0x3(%esi,%edx,1),%ebx
jmp    805740d <__sprintf_chk@plt+0xd75d>
imul   $0x64,%esi,%esi
shr    $0x1f,%ebx
mov    %ebx,0x30(%esp)
xor    %ebx,%ebx
movb   $0x1,0x54(%esp)
add    %eax,%esi
movl   $0x5,0x4c(%esp)
jmp    8056de0 <__sprintf_chk@plt+0xd130>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %esi,0x14(%esp)
jmp    8057195 <__sprintf_chk@plt+0xd4e5>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %esi,0x14(%esp)
jmp    8056ede <__sprintf_chk@plt+0xd22e>
xor    %ebx,%ebx
movl   $0x805dfe5,0x50(%esp)
jmp    8057513 <__sprintf_chk@plt+0xd863>
mov    0x58(%esp),%ebx
movl   $0x0,0x30(%esp)
jmp    805740d <__sprintf_chk@plt+0xd75d>
xor    %eax,%eax
test   %esi,%esi
setg   %al
jmp    8057725 <__sprintf_chk@plt+0xda75>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    %ebp,0x14(%esp)
jmp    805756a <__sprintf_chk@plt+0xd8ba>
mov    0x14(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
mov    0x30(%esp),%edx
add    %esi,0x14(%esp)
mov    0x4c(%esp),%ecx
jmp    8057c99 <__sprintf_chk@plt+0xdfe9>
movl   $0x30,0x4(%esp)
jmp    8057a22 <__sprintf_chk@plt+0xdd72>
mov    0x4cc(%esp),%esi
mov    %ebp,0x4c(%esp)
jmp    8056dd0 <__sprintf_chk@plt+0xd120>
call   8049790 <__stack_chk_fail@plt>
movl   $0x0,0x4c(%esp)
jmp    8056e0b <__sprintf_chk@plt+0xd15b>
lea    0x0(%esi,%eiz,1),%esi
push   %esi
push   %ebx
mov    0x20(%esp),%esi
mov    0x14(%esp),%eax
mov    0x18(%esp),%ebx
mov    0xc(%esp),%edx
mov    %esi,0x18(%esp)
mov    0x1c(%esp),%esi
mov    0x10(%esp),%ecx
mov    %eax,0xc(%esp)
xor    %eax,%eax
mov    %ebx,0x10(%esp)
mov    %esi,0x14(%esp)
pop    %ebx
pop    %esi
jmp    8056920 <__sprintf_chk@plt+0xcc70>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x74(%esp),%eax
mov    0x70(%esp),%esi
mov    0x78(%esp),%edx
mov    0x7c(%esp),%ecx
test   %eax,%eax
mov    0x80(%esp),%ebx
mov    0x84(%esp),%edi
je     80584d8 <__sprintf_chk@plt+0xe828>
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
movl   $0x805df8c,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805df9f,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x7dd,0x10(%esp)
movl   $0x805e240,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %eax,0xc(%esp)
call   8049ba0 <__fprintf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805dffc,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
cmp    $0x9,%edi
ja     8058500 <__sprintf_chk@plt+0xe850>
jmp    *0x805e200(,%edi,4)
lea    0x0(%esi,%eiz,1),%esi
mov    0x18(%ebx),%edx
mov    0xc(%ebx),%edi
mov    0x1c(%ebx),%ecx
mov    0x10(%ebx),%eax
mov    %edx,0x44(%esp)
mov    0x8(%ebx),%edx
mov    0x14(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e160,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x48(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x38(%esp)
call   8049760 <dcgettext@plt>
mov    0x48(%esp),%ecx
mov    0x44(%esp),%edx
mov    %ebp,0x20(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x28(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x24(%esp)
mov    0x40(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x1c(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x14(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
mov    %ecx,0x18(%esp)
call   8049ba0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
mov    0x1c(%ebx),%edx
mov    0x14(%ebx),%eax
mov    0x10(%ebx),%edi
mov    0x20(%ebx),%ecx
mov    %edx,0x48(%esp)
mov    0xc(%ebx),%edx
mov    %eax,0x38(%esp)
mov    0x8(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %edi,0x3c(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e190,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x4c(%esp)
mov    %edx,0x40(%esp)
mov    %eax,0x44(%esp)
call   8049760 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x40(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x3c(%esp),%ecx
mov    %edx,0x18(%esp)
mov    %ecx,0x1c(%esp)
mov    0x44(%esp),%ecx
mov    %ecx,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
call   8049ba0 <__fprintf_chk@plt>
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
call   8049bf0 <abort@plt>
lea    0x0(%esi),%esi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805dfa3,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049ba0 <__fprintf_chk@plt>
xchg   %ax,%ax
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805dfb3,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049ba0 <__fprintf_chk@plt>
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805dfca,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %ebp,0x84(%esp)
mov    %edi,0x80(%esp)
mov    %ebx,0x7c(%esp)
mov    %esi,0x70(%esp)
movl   $0x1,0x74(%esp)
mov    %eax,0x78(%esp)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049ba0 <__fprintf_chk@plt>
lea    0x0(%esi),%esi
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e0c8,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x38(%esp)
call   8049760 <dcgettext@plt>
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
mov    %edx,0x18(%esp)
movl   $0x1,0x4(%esp)
mov    %eax,0x8(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    805817f <__sprintf_chk@plt+0xe4cf>
mov    0x10(%ebx),%ecx
mov    0xc(%ebx),%edx
mov    0x8(%ebx),%ebp
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e0e8,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x3c(%esp)
mov    %edx,0x38(%esp)
call   8049760 <dcgettext@plt>
mov    0x3c(%esp),%ecx
mov    0x38(%esp),%edx
mov    %ebp,0x14(%esp)
mov    %edi,0x10(%esp)
mov    %ecx,0x1c(%esp)
mov    %edx,0x18(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    805817f <__sprintf_chk@plt+0xe4cf>
nop
mov    0x14(%ebx),%ecx
mov    0x10(%ebx),%edx
mov    0x4(%ebx),%eax
mov    0xc(%ebx),%ebp
mov    0x8(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e10c,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x40(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049760 <dcgettext@plt>
mov    0x40(%esp),%ecx
mov    0x3c(%esp),%edx
mov    %ebp,0x18(%esp)
mov    %edi,0x14(%esp)
mov    %ecx,0x20(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    805817f <__sprintf_chk@plt+0xe4cf>
xchg   %ax,%ax
mov    0x14(%ebx),%edx
mov    0x18(%ebx),%ecx
mov    0x8(%ebx),%eax
mov    0x10(%ebx),%ebp
mov    %edx,0x40(%esp)
mov    0x4(%ebx),%edx
mov    0xc(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e134,0x4(%esp)
movl   $0x0,(%esp)
mov    %ecx,0x44(%esp)
mov    %edx,0x3c(%esp)
mov    %eax,0x38(%esp)
call   8049760 <dcgettext@plt>
mov    0x44(%esp),%ecx
mov    0x40(%esp),%edx
mov    %ebp,0x1c(%esp)
mov    %edi,0x18(%esp)
mov    %ecx,0x24(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x20(%esp)
mov    0x3c(%esp),%edx
mov    %ebx,0xc(%esp)
mov    %eax,0x8(%esp)
mov    %ecx,0x14(%esp)
mov    %edx,0x10(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    805817f <__sprintf_chk@plt+0xe4cf>
lea    0x0(%esi),%esi
mov    %ecx,0x10(%esp)
mov    %edx,0xc(%esp)
movl   $0x805df98,0x8(%esp)
movl   $0x1,0x4(%esp)
mov    %esi,(%esp)
call   8049ba0 <__fprintf_chk@plt>
jmp    8058071 <__sprintf_chk@plt+0xe3c1>
lea    0x0(%esi),%esi
mov    0x10(%ebx),%edi
mov    0x14(%ebx),%eax
mov    0x20(%ebx),%ecx
mov    0x1c(%ebx),%edx
mov    %edi,0x3c(%esp)
mov    0x8(%ebx),%edi
mov    %eax,0x38(%esp)
mov    0xc(%ebx),%eax
mov    0x18(%ebx),%ebp
mov    %ecx,0x4c(%esp)
mov    %edi,0x44(%esp)
mov    0x4(%ebx),%edi
mov    (%ebx),%ebx
movl   $0x5,0x8(%esp)
movl   $0x805e1c4,0x4(%esp)
movl   $0x0,(%esp)
mov    %edx,0x48(%esp)
mov    %eax,0x40(%esp)
call   8049760 <dcgettext@plt>
mov    0x4c(%esp),%ecx
mov    0x48(%esp),%edx
mov    %ebp,0x24(%esp)
mov    %ecx,0x2c(%esp)
mov    0x38(%esp),%ecx
mov    %edx,0x28(%esp)
mov    0x3c(%esp),%edx
mov    %ecx,0x20(%esp)
mov    0x40(%esp),%ecx
mov    %edx,0x1c(%esp)
mov    0x44(%esp),%edx
mov    %ecx,0x18(%esp)
mov    %edx,0x14(%esp)
jmp    805820a <__sprintf_chk@plt+0xe55a>
mov    %esi,%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
xor    %eax,%eax
mov    0x40(%esp),%edx
mov    (%edx),%ecx
test   %ecx,%ecx
je     80585aa <__sprintf_chk@plt+0xe8fa>
nop
add    $0x1,%eax
mov    (%edx,%eax,4),%ecx
test   %ecx,%ecx
jne    80585a0 <__sprintf_chk@plt+0xe8f0>
mov    %eax,0x14(%esp)
mov    0x3c(%esp),%eax
mov    %edx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   8058020 <__sprintf_chk@plt+0xe370>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
push   %ebx
xor    %eax,%eax
sub    $0x58,%esp
mov    0x70(%esp),%ebx
lea    0x28(%esp),%ecx
xchg   %ax,%ax
mov    (%ebx,%eax,4),%edx
test   %edx,%edx
mov    %edx,(%ecx,%eax,4)
je     8058602 <__sprintf_chk@plt+0xe952>
add    $0x1,%eax
cmp    $0xa,%eax
jne    80585f0 <__sprintf_chk@plt+0xe940>
mov    %eax,0x14(%esp)
mov    0x6c(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %eax,0xc(%esp)
mov    0x68(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x64(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %eax,(%esp)
call   8058020 <__sprintf_chk@plt+0xe370>
add    $0x58,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
sub    $0x2c,%esp
lea    0x40(%esp),%eax
mov    %eax,0x10(%esp)
mov    0x3c(%esp),%eax
mov    %eax,0xc(%esp)
mov    0x38(%esp),%eax
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %eax,(%esp)
call   80585e0 <__sprintf_chk@plt+0xe930>
add    $0x2c,%esp
ret
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
movl   $0x5,0x8(%esp)
movl   $0x805dfe6,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x805b2b6,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
movl   $0x5,0x8(%esp)
movl   $0x805b2cc,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
movl   $0x805d4b0,0xc(%esp)
movl   $0x805b2e0,0x8(%esp)
movl   $0x1,(%esp)
mov    %eax,0x4(%esp)
call   8049ac0 <__printf_chk@plt>
mov    0x80633a0,%ebx
movl   $0x5,0x8(%esp)
movl   $0x805d4d8,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049990 <fputs_unlocked@plt>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
je     8058749 <__sprintf_chk@plt+0xea99>
add    $0x18,%esp
pop    %ebx
ret
test   %ebx,%ebx
je     8058744 <__sprintf_chk@plt+0xea94>
lea    0x0(%esi),%esi
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
xor    %edx,%edx
sub    $0x8,%esp
mov    $0xffffffff,%eax
mov    0x14(%esp),%ecx
mov    0x10(%esp),%ebx
div    %ecx
cmp    %ebx,%eax
jb     8058789 <__sprintf_chk@plt+0xead9>
imul   %ebx,%ecx
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    8058730 <__sprintf_chk@plt+0xea80>
call   80589a0 <__sprintf_chk@plt+0xecf0>
xchg   %ax,%ax
jmp    8058730 <__sprintf_chk@plt+0xea80>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
test   %ebx,%ebx
je     80587c8 <__sprintf_chk@plt+0xeb18>
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049910 <realloc@plt>
test   %eax,%eax
je     80587db <__sprintf_chk@plt+0xeb2b>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi),%esi
test   %eax,%eax
je     80587b0 <__sprintf_chk@plt+0xeb00>
mov    %eax,(%esp)
call   80496b0 <free@plt>
add    $0x18,%esp
xor    %eax,%eax
pop    %ebx
ret
test   %ebx,%ebx
je     80587c0 <__sprintf_chk@plt+0xeb10>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi),%esi
lea    0x0(%edi),%edi
push   %esi
xor    %edx,%edx
push   %ebx
mov    $0xffffffff,%eax
sub    $0x4,%esp
mov    0x18(%esp),%ecx
mov    0x14(%esp),%ebx
mov    0x10(%esp),%esi
div    %ecx
cmp    %ebx,%eax
jb     8058823 <__sprintf_chk@plt+0xeb73>
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
add    $0x4,%esp
pop    %ebx
pop    %esi
jmp    80587a0 <__sprintf_chk@plt+0xeaf0>
call   80589a0 <__sprintf_chk@plt+0xecf0>
nop
lea    0x0(%esi,%eiz,1),%esi
push   %edi
push   %esi
push   %ebx
mov    0x10(%esp),%esi
mov    0x14(%esp),%edi
mov    0x18(%esp),%ebx
test   %esi,%esi
mov    (%edi),%ecx
je     8058870 <__sprintf_chk@plt+0xebc0>
xor    %edx,%edx
mov    $0xaaaaaaaa,%eax
div    %ebx
cmp    %eax,%ecx
jae    8058888 <__sprintf_chk@plt+0xebd8>
lea    0x1(%ecx),%eax
shr    %eax
add    %eax,%ecx
mov    %ecx,(%edi)
imul   %ebx,%ecx
mov    %esi,0x10(%esp)
mov    %ecx,0x14(%esp)
pop    %ebx
pop    %esi
pop    %edi
jmp    80587a0 <__sprintf_chk@plt+0xeaf0>
xchg   %ax,%ax
test   %ecx,%ecx
jne    8058859 <__sprintf_chk@plt+0xeba9>
xor    %edx,%edx
mov    $0x40,%eax
div    %ebx
xor    %ecx,%ecx
test   %eax,%eax
sete   %cl
add    %eax,%ecx
jmp    8058859 <__sprintf_chk@plt+0xeba9>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x8,%esp
mov    0x10(%esp),%ecx
mov    0x14(%esp),%ebx
test   %ecx,%ecx
mov    (%ebx),%eax
je     80588c8 <__sprintf_chk@plt+0xec18>
cmp    $0xaaaaaaa9,%eax
ja     80588d4 <__sprintf_chk@plt+0xec24>
lea    0x1(%eax),%edx
shr    %edx
add    %edx,%eax
mov    %eax,(%ebx)
mov    %eax,0x14(%esp)
mov    %ecx,0x10(%esp)
add    $0x8,%esp
pop    %ebx
jmp    80587a0 <__sprintf_chk@plt+0xeaf0>
nop
lea    0x0(%esi,%eiz,1),%esi
test   %eax,%eax
mov    $0x40,%edx
cmove  %edx,%eax
jmp    80588b0 <__sprintf_chk@plt+0xec00>
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    %ebx,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   8049a40 <memset@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
sub    $0x1c,%esp
mov    0x24(%esp),%eax
mov    %eax,0x4(%esp)
mov    0x20(%esp),%eax
mov    %eax,(%esp)
call   8049ca0 <calloc@plt>
test   %eax,%eax
je     805892f <__sprintf_chk@plt+0xec7f>
add    $0x1c,%esp
ret
nop
call   80589a0 <__sprintf_chk@plt+0xecf0>
lea    0x0(%esi,%eiz,1),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    %ebx,(%esp)
call   8058730 <__sprintf_chk@plt+0xea80>
mov    0x20(%esp),%edx
mov    %ebx,0x8(%esp)
mov    %edx,0x4(%esp)
mov    %eax,(%esp)
call   80496c0 <memcpy@plt>
add    $0x18,%esp
pop    %ebx
ret
lea    0x0(%esi,%eiz,1),%esi
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049a10 <strlen@plt>
mov    %ebx,(%esp)
add    $0x1,%eax
mov    %eax,0x4(%esp)
call   8058940 <__sprintf_chk@plt+0xec90>
add    $0x18,%esp
pop    %ebx
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
sub    $0x1c,%esp
movl   $0x5,0x8(%esp)
movl   $0x805e26f,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x80632f8,%edx
movl   $0x805d8dc,0x8(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,(%esp)
mov    %eax,0xc(%esp)
call   80498e0 <error@plt>
call   8049bf0 <abort@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x3c,%esp
mov    0x58(%esp),%esi
mov    0x50(%esp),%ebp
mov    0x54(%esp),%ebx
cmp    $0x24,%esi
ja     8058de0 <__sprintf_chk@plt+0xf130>
movzbl 0x0(%ebp),%edx
lea    0x2c(%esp),%eax
test   %ebx,%ebx
cmove  %eax,%ebx
mov    %edx,0x14(%esp)
call   8049c90 <__ctype_b_loc@plt>
mov    0x14(%esp),%edx
mov    (%eax),%edi
mov    %ebp,%eax
jmp    8058a36 <__sprintf_chk@plt+0xed86>
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%edx
movzbl %dl,%ecx
testb  $0x20,0x1(%edi,%ecx,2)
jne    8058a30 <__sprintf_chk@plt+0xed80>
cmp    $0x2d,%dl
jne    8058a58 <__sprintf_chk@plt+0xeda8>
mov    $0x4,%eax
add    $0x3c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049a60 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %esi,0x8(%esp)
mov    %ebx,0x4(%esp)
mov    %ebp,(%esp)
mov    %eax,0x14(%esp)
call   80499e0 <strtoul@plt>
mov    (%ebx),%edi
mov    0x14(%esp),%edx
cmp    %ebp,%edi
mov    %eax,%esi
je     8058b3a <__sprintf_chk@plt+0xee8a>
mov    (%edx),%eax
test   %eax,%eax
jne    8058ab0 <__sprintf_chk@plt+0xee00>
xor    %ebp,%ebp
mov    0x60(%esp),%eax
test   %eax,%eax
je     8058a9e <__sprintf_chk@plt+0xedee>
movzbl (%edi),%edx
test   %dl,%dl
jne    8058abc <__sprintf_chk@plt+0xee0c>
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
add    $0x3c,%esp
mov    %ebp,%eax
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    $0x22,%eax
mov    $0x1,%ebp
jne    8058a45 <__sprintf_chk@plt+0xed95>
jmp    8058a8f <__sprintf_chk@plt+0xeddf>
movsbl %dl,%eax
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     8058b88 <__sprintf_chk@plt+0xeed8>
mov    0x60(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
je     8058b1b <__sprintf_chk@plt+0xee6b>
movzbl 0x1(%edi),%eax
cmp    $0x44,%al
je     8058d9b <__sprintf_chk@plt+0xf0eb>
cmp    $0x69,%al
je     8058d80 <__sprintf_chk@plt+0xf0d0>
cmp    $0x42,%al
je     8058d9b <__sprintf_chk@plt+0xf0eb>
movl   $0x1,0x14(%esp)
mov    $0x400,%ecx
sub    $0x42,%edx
cmp    $0x35,%dl
ja     8058b88 <__sprintf_chk@plt+0xeed8>
movzbl %dl,%edx
jmp    *0x805e2b8(,%edx,4)
mov    0x60(%esp),%edx
test   %edx,%edx
je     8058a45 <__sprintf_chk@plt+0xed95>
movzbl 0x0(%ebp),%edx
test   %dl,%dl
je     8058a45 <__sprintf_chk@plt+0xed95>
movsbl %dl,%eax
xor    %ebp,%ebp
mov    %eax,0x4(%esp)
mov    0x60(%esp),%eax
mov    $0x1,%esi
mov    %edx,0x14(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x14(%esp),%edx
test   %eax,%eax
jne    8058adf <__sprintf_chk@plt+0xee2f>
jmp    8058a45 <__sprintf_chk@plt+0xed95>
lea    0x0(%esi,%eiz,1),%esi
mov    0x5c(%esp),%eax
mov    %esi,(%eax)
mov    %ebp,%eax
or     $0x2,%eax
jmp    8058a4a <__sprintf_chk@plt+0xed9a>
xor    %eax,%eax
add    0x14(%esp),%edi
or     %eax,%ebp
mov    %ebp,%eax
or     $0x2,%eax
mov    %edi,(%ebx)
cmpb   $0x0,(%edi)
cmovne %eax,%ebp
jmp    8058a9e <__sprintf_chk@plt+0xedee>
cmp    $0x7fffffff,%esi
ja     8058cf3 <__sprintf_chk@plt+0xf043>
add    %esi,%esi
xor    %eax,%eax
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
cmp    $0x7fffff,%esi
ja     8058cf3 <__sprintf_chk@plt+0xf043>
shl    $0x9,%esi
xor    %eax,%eax
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x7,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    8058c01 <__sprintf_chk@plt+0xef51>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     8058dad <__sprintf_chk@plt+0xf0fd>
cmp    %esi,0x18(%esp)
jae    8058bf1 <__sprintf_chk@plt+0xef41>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    8058bf6 <__sprintf_chk@plt+0xef46>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x8,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    8058c3d <__sprintf_chk@plt+0xef8d>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     8058dad <__sprintf_chk@plt+0xf0fd>
cmp    %esi,0x18(%esp)
jae    8058c2d <__sprintf_chk@plt+0xef7d>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    8058c32 <__sprintf_chk@plt+0xef82>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x4,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     8058db6 <__sprintf_chk@plt+0xf106>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    8058c66 <__sprintf_chk@plt+0xefb6>
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x5,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
jmp    8058cae <__sprintf_chk@plt+0xeffe>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
je     8058b9a <__sprintf_chk@plt+0xeeea>
cmp    %esi,0x1c(%esp)
jae    8058c9c <__sprintf_chk@plt+0xefec>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    8058ca1 <__sprintf_chk@plt+0xeff1>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
ja     8058dd1 <__sprintf_chk@plt+0xf121>
imul   %ecx,%esi
cmp    %esi,%eax
jb     8058dd1 <__sprintf_chk@plt+0xf121>
imul   %ecx,%esi
xor    %eax,%eax
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
xor    %edx,%edx
mov    $0xffffffff,%eax
div    %ecx
cmp    %eax,%esi
jbe    8058cdc <__sprintf_chk@plt+0xf02c>
mov    $0xffffffff,%esi
mov    $0x1,%eax
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
mov    $0x6,%edx
mov    %ebp,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
jmp    8058d2c <__sprintf_chk@plt+0xf07c>
imul   %ecx,%esi
xor    %ebp,%ebp
or     %ebp,%eax
sub    $0x1,%edx
je     8058dad <__sprintf_chk@plt+0xf0fd>
cmp    %esi,0x18(%esp)
jae    8058d1c <__sprintf_chk@plt+0xf06c>
mov    $0xffffffff,%esi
mov    $0x1,%ebp
jmp    8058d21 <__sprintf_chk@plt+0xf071>
cmp    $0x3fffff,%esi
ja     8058cf3 <__sprintf_chk@plt+0xf043>
shl    $0xa,%esi
xor    %eax,%eax
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
mov    $0xffffffff,%eax
xor    %edx,%edx
div    %ecx
movl   $0x3,0x18(%esp)
mov    %eax,0x1c(%esp)
xor    %eax,%eax
cmp    %esi,0x1c(%esp)
jb     8058dc5 <__sprintf_chk@plt+0xf115>
imul   %ecx,%esi
xor    %edx,%edx
or     %edx,%eax
subl   $0x1,0x18(%esp)
jne    8058d67 <__sprintf_chk@plt+0xf0b7>
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
xor    %eax,%eax
mov    $0x400,%ecx
cmpb   $0x42,0x2(%edi)
sete   %al
lea    0x1(%eax,%eax,1),%eax
mov    %eax,0x14(%esp)
jmp    8058b28 <__sprintf_chk@plt+0xee78>
movl   $0x2,0x14(%esp)
mov    $0x3e8,%ecx
jmp    8058b28 <__sprintf_chk@plt+0xee78>
mov    0x1c(%esp),%ebp
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    8058c75 <__sprintf_chk@plt+0xefc5>
mov    $0xffffffff,%esi
mov    $0x1,%edx
jmp    8058d72 <__sprintf_chk@plt+0xf0c2>
mov    $0x1,%eax
mov    $0xffffffff,%esi
jmp    8058b9a <__sprintf_chk@plt+0xeeea>
movl   $0x805e390,0xc(%esp)
movl   $0x60,0x8(%esp)
movl   $0x805e280,0x4(%esp)
movl   $0x805e290,(%esp)
call   8049c80 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %edi
push   %esi
push   %ebx
sub    $0x30,%esp
mov    0x80632f8,%esi
mov    0x40(%esp),%eax
mov    0x44(%esp),%edx
mov    0x48(%esp),%edi
cmp    $0x3,%eax
ja     8058e97 <__sprintf_chk@plt+0xf1e7>
cmp    $0x2,%eax
jae    8058e90 <__sprintf_chk@plt+0xf1e0>
sub    $0x1,%eax
mov    $0x805e3b4,%ecx
jne    8058e8b <__sprintf_chk@plt+0xf1db>
test   %edx,%edx
js     8058ea3 <__sprintf_chk@plt+0xf1f3>
mov    0x4c(%esp),%eax
shl    $0x4,%edx
mov    $0x805e3d1,%ebx
mov    (%eax,%edx,1),%edi
movl   $0x5,0x8(%esp)
mov    %ecx,0x4(%esp)
movl   $0x0,(%esp)
call   8049760 <dcgettext@plt>
mov    0x50(%esp),%edx
mov    %edi,0x10(%esp)
mov    %ebx,0xc(%esp)
movl   $0x0,0x4(%esp)
mov    %edx,0x14(%esp)
mov    %esi,(%esp)
mov    %eax,0x8(%esp)
call   80498e0 <error@plt>
call   8049bf0 <abort@plt>
mov    $0x805e3d4,%ecx
jmp    8058e3c <__sprintf_chk@plt+0xf18c>
cmp    $0x4,%eax
mov    $0x805e399,%ecx
je     8058e3c <__sprintf_chk@plt+0xf18c>
jmp    8058e8b <__sprintf_chk@plt+0xf1db>
mov    %edi,%eax
mov    $0x805e3d1,%ebx
sub    %edx,%ebx
mov    %al,0x2e(%esp)
lea    0x2e(%esp),%edi
movb   $0x0,0x2f(%esp)
jmp    8058e4f <__sprintf_chk@plt+0xf19f>
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x5c,%esp
mov    0x78(%esp),%esi
mov    0x70(%esp),%edi
mov    0x74(%esp),%ebx
cmp    $0x24,%esi
ja     80596cf <__sprintf_chk@plt+0xfa1f>
movzbl (%edi),%edx
lea    0x4c(%esp),%eax
test   %ebx,%ebx
cmove  %eax,%ebx
mov    %edx,0x18(%esp)
call   8049c90 <__ctype_b_loc@plt>
mov    0x18(%esp),%edx
mov    (%eax),%ebp
mov    %edi,%eax
jmp    8058f06 <__sprintf_chk@plt+0xf256>
nop
lea    0x0(%esi,%eiz,1),%esi
add    $0x1,%eax
movzbl (%eax),%edx
movzbl %dl,%ecx
testb  $0x20,0x1(%ebp,%ecx,2)
jne    8058f00 <__sprintf_chk@plt+0xf250>
cmp    $0x2d,%dl
jne    8058f28 <__sprintf_chk@plt+0xf278>
mov    $0x4,%eax
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
call   8049a60 <__errno_location@plt>
movl   $0x0,(%eax)
mov    %eax,%ebp
mov    %esi,0x8(%esp)
movl   $0x0,0xc(%esp)
mov    %ebx,0x4(%esp)
mov    %edi,(%esp)
call   80496f0 <__strtoull_internal@plt>
mov    (%ebx),%esi
cmp    %edi,%esi
mov    %eax,0x18(%esp)
mov    %edx,0x1c(%esp)
je     8059029 <__sprintf_chk@plt+0xf379>
mov    0x0(%ebp),%eax
test   %eax,%eax
jne    8058f98 <__sprintf_chk@plt+0xf2e8>
xor    %edi,%edi
mov    0x80(%esp),%ebp
test   %ebp,%ebp
je     8058f7a <__sprintf_chk@plt+0xf2ca>
movzbl (%esi),%edx
test   %dl,%dl
jne    8058fa8 <__sprintf_chk@plt+0xf2f8>
mov    0x7c(%esp),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%esi)
mov    %edi,%eax
mov    %edx,0x4(%esi)
add    $0x5c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    $0x22,%eax
mov    $0x1,%edi
jne    8058f15 <__sprintf_chk@plt+0xf265>
jmp    8058f68 <__sprintf_chk@plt+0xf2b8>
movsbl %dl,%eax
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
je     8059080 <__sprintf_chk@plt+0xf3d0>
mov    0x80(%esp),%eax
movl   $0x30,0x4(%esp)
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x20(%esp),%edx
test   %eax,%eax
je     805900d <__sprintf_chk@plt+0xf35d>
movzbl 0x1(%esi),%eax
cmp    $0x44,%al
je     805964b <__sprintf_chk@plt+0xf99b>
cmp    $0x69,%al
je     8059632 <__sprintf_chk@plt+0xf982>
cmp    $0x42,%al
je     805964b <__sprintf_chk@plt+0xf99b>
mov    $0x1,%ebp
mov    $0x400,%eax
sub    $0x42,%edx
cmp    $0x35,%dl
ja     8059080 <__sprintf_chk@plt+0xf3d0>
movzbl %dl,%edx
jmp    *0x805e3fc(,%edx,4)
mov    0x80(%esp),%eax
test   %eax,%eax
je     8058f15 <__sprintf_chk@plt+0xf265>
movzbl (%edi),%edx
test   %dl,%dl
je     8058f15 <__sprintf_chk@plt+0xf265>
movsbl %dl,%eax
xor    %edi,%edi
mov    %eax,0x4(%esp)
mov    0x80(%esp),%eax
mov    %edx,0x20(%esp)
mov    %eax,(%esp)
call   80499f0 <strchr@plt>
mov    0x20(%esp),%edx
movl   $0x1,0x18(%esp)
movl   $0x0,0x1c(%esp)
test   %eax,%eax
jne    8058fce <__sprintf_chk@plt+0xf31e>
jmp    8058f15 <__sprintf_chk@plt+0xf265>
mov    0x7c(%esp),%esi
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
mov    %eax,(%esi)
mov    %edi,%eax
mov    %edx,0x4(%esi)
or     $0x2,%eax
jmp    8058f1a <__sprintf_chk@plt+0xf26a>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
cmp    %edx,0x1c(%esp)
mov    %eax,%ecx
mov    %edx,0x30(%esp)
ja     80596b5 <__sprintf_chk@plt+0xfa05>
jb     80590dc <__sprintf_chk@plt+0xf42c>
cmp    %ecx,0x18(%esp)
ja     80596b5 <__sprintf_chk@plt+0xfa05>
mov    0x1c(%esp),%eax
mov    0x24(%esp),%edx
imul   0x18(%esp),%edx
imul   0x20(%esp),%eax
add    %edx,%eax
mov    %eax,0x2c(%esp)
mov    0x18(%esp),%eax
mull   0x20(%esp)
mov    %eax,0x18(%esp)
mov    0x2c(%esp),%eax
mov    %edx,0x1c(%esp)
add    %eax,0x1c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jb     80596b5 <__sprintf_chk@plt+0xfa05>
ja     8059126 <__sprintf_chk@plt+0xf476>
cmp    0x18(%esp),%ecx
jb     80596b5 <__sprintf_chk@plt+0xfa05>
mov    0x20(%esp),%eax
mov    0x1c(%esp),%ecx
mov    0x24(%esp),%edx
imul   %eax,%ecx
mov    0x18(%esp),%eax
imul   %edx,%eax
add    %eax,%ecx
mov    0x18(%esp),%eax
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
xor    %eax,%eax
or     %eax,%edi
add    %ebp,%esi
mov    %edi,%eax
or     $0x2,%eax
mov    %esi,(%ebx)
cmpb   $0x0,(%esi)
cmovne %eax,%edi
jmp    8058f7a <__sprintf_chk@plt+0xf2ca>
cmpl   $0x7fffffff,0x1c(%esp)
ja     8059667 <__sprintf_chk@plt+0xf9b7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0x1,%eax,%edx
add    %eax,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
cmpl   $0x7fffff,0x1c(%esp)
ja     8059667 <__sprintf_chk@plt+0xf9b7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0x9,%eax,%edx
shl    $0x9,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x7,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    8059248 <__sprintf_chk@plt+0xf598>
ja     8059205 <__sprintf_chk@plt+0xf555>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8059252 <__sprintf_chk@plt+0xf5a2>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     805965a <__sprintf_chk@plt+0xf9aa>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    80591f9 <__sprintf_chk@plt+0xf549>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    805923b <__sprintf_chk@plt+0xf58b>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x8,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    80592f6 <__sprintf_chk@plt+0xf646>
ja     80592b3 <__sprintf_chk@plt+0xf603>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8059300 <__sprintf_chk@plt+0xf650>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     805965a <__sprintf_chk@plt+0xf9aa>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    80592a7 <__sprintf_chk@plt+0xf5f7>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    80592e9 <__sprintf_chk@plt+0xf639>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x4,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jb     8059681 <__sprintf_chk@plt+0xf9d1>
ja     8059371 <__sprintf_chk@plt+0xf6c1>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     8059681 <__sprintf_chk@plt+0xf9d1>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
jne    8059353 <__sprintf_chk@plt+0xf6a3>
mov    0x2c(%esp),%eax
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x5,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
jmp    805944a <__sprintf_chk@plt+0xf79a>
ja     8059405 <__sprintf_chk@plt+0xf755>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     8059454 <__sprintf_chk@plt+0xf7a4>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
je     80593b2 <__sprintf_chk@plt+0xf702>
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jae    80593f9 <__sprintf_chk@plt+0xf749>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    805943b <__sprintf_chk@plt+0xf78b>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
cmp    %edx,0x1c(%esp)
ja     8059667 <__sprintf_chk@plt+0xf9b7>
jb     80594a6 <__sprintf_chk@plt+0xf7f6>
cmp    %eax,0x18(%esp)
ja     8059667 <__sprintf_chk@plt+0xf9b7>
mov    0x1c(%esp),%edx
mov    0x24(%esp),%eax
imul   0x20(%esp),%edx
imul   0x18(%esp),%eax
lea    (%eax,%edx,1),%ecx
jmp    805913e <__sprintf_chk@plt+0xf48e>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x3,%ecx
mov    %ecx,0x3c(%esp)
mov    %eax,0x34(%esp)
xor    %eax,%eax
mov    %edx,0x38(%esp)
mov    %eax,0x2c(%esp)
mov    0x1c(%esp),%eax
cmp    %eax,0x38(%esp)
jb     805969b <__sprintf_chk@plt+0xf9eb>
ja     805951a <__sprintf_chk@plt+0xf86a>
mov    0x18(%esp),%eax
cmp    %eax,0x34(%esp)
jb     805969b <__sprintf_chk@plt+0xf9eb>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ecx
mov    0x18(%esp),%eax
imul   %edx,%ecx
mov    %ecx,0x30(%esp)
mov    0x24(%esp),%ecx
imul   0x18(%esp),%ecx
mov    %ecx,%edx
mov    0x30(%esp),%ecx
add    %edx,%ecx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ecx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
subl   $0x1,0x3c(%esp)
jne    80594fc <__sprintf_chk@plt+0xf84c>
jmp    80593b2 <__sprintf_chk@plt+0xf702>
cltd
mov    %eax,0x8(%esp)
mov    %edx,0xc(%esp)
movl   $0xffffffff,(%esp)
movl   $0xffffffff,0x4(%esp)
mov    %eax,0x20(%esp)
mov    %edx,0x24(%esp)
call   805a100 <__sprintf_chk@plt+0x10450>
mov    $0x6,%ecx
mov    %ebx,0x74(%esp)
mov    %eax,0x38(%esp)
xor    %eax,%eax
mov    %edx,0x30(%esp)
mov    %eax,0x2c(%esp)
jmp    80595e9 <__sprintf_chk@plt+0xf939>
ja     80595aa <__sprintf_chk@plt+0xf8fa>
mov    0x18(%esp),%eax
cmp    %eax,0x38(%esp)
jb     80595f3 <__sprintf_chk@plt+0xf943>
mov    0x1c(%esp),%edx
mov    0x20(%esp),%ebx
mov    0x18(%esp),%eax
imul   %edx,%ebx
mov    %ebx,0x34(%esp)
mov    0x24(%esp),%ebx
imul   0x18(%esp),%ebx
mov    %ebx,%edx
mov    0x34(%esp),%ebx
add    %edx,%ebx
mull   0x20(%esp)
mov    %edx,0x1c(%esp)
xor    %edx,%edx
add    %ebx,0x1c(%esp)
mov    %eax,0x18(%esp)
or     %edx,0x2c(%esp)
sub    $0x1,%ecx
je     805965a <__sprintf_chk@plt+0xf9aa>
mov    0x1c(%esp),%eax
cmp    %eax,0x30(%esp)
jae    805959e <__sprintf_chk@plt+0xf8ee>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    80595e0 <__sprintf_chk@plt+0xf930>
cmpl   $0x3fffff,0x1c(%esp)
ja     8059667 <__sprintf_chk@plt+0xf9b7>
mov    0x18(%esp),%eax
mov    0x1c(%esp),%edx
shld   $0xa,%eax,%edx
shl    $0xa,%eax
mov    %eax,0x18(%esp)
xor    %eax,%eax
mov    %edx,0x1c(%esp)
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
xor    %eax,%eax
cmpb   $0x42,0x2(%esi)
sete   %al
mov    %eax,%ebp
mov    $0x400,%eax
lea    0x1(%ebp,%ebp,1),%ebp
jmp    8059017 <__sprintf_chk@plt+0xf367>
mov    $0x2,%ebp
mov    $0x3e8,%eax
jmp    8059017 <__sprintf_chk@plt+0xf367>
mov    0x2c(%esp),%eax
mov    0x74(%esp),%ebx
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%eax
movl   $0xffffffff,0x1c(%esp)
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    80593a7 <__sprintf_chk@plt+0xf6f7>
movl   $0xffffffff,0x18(%esp)
mov    $0x1,%edx
movl   $0xffffffff,0x1c(%esp)
jmp    8059550 <__sprintf_chk@plt+0xf8a0>
mov    $0x1,%eax
movl   $0xffffffff,0x18(%esp)
movl   $0xffffffff,0x1c(%esp)
jmp    8059154 <__sprintf_chk@plt+0xf4a4>
movl   $0x805e4d4,0xc(%esp)
movl   $0x60,0x8(%esp)
movl   $0x805e280,0x4(%esp)
movl   $0x805e290,(%esp)
call   8049c80 <__assert_fail@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
test   %eax,%eax
je     8059748 <__sprintf_chk@plt+0xfa98>
cmp    $0xa,%eax
je     8059718 <__sprintf_chk@plt+0xfa68>
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
mov    (%edx),%edx
mov    $0x805b295,%edi
mov    $0xa,%ecx
mov    %edx,%esi
repz cmpsb %es:(%edi),%ds:(%esi)
jne    805970f <__sprintf_chk@plt+0xfa5f>
mov    %edx,(%esp)
call   8049b70 <freecon@plt>
call   8049a60 <__errno_location@plt>
movl   $0x3d,(%eax)
mov    $0xffffffff,%eax
jmp    805970f <__sprintf_chk@plt+0xfa5f>
lea    0x0(%esi,%eiz,1),%esi
call   8049a60 <__errno_location@plt>
movl   $0x5f,(%eax)
mov    $0xffffffff,%eax
jmp    805970f <__sprintf_chk@plt+0xfa5f>
lea    0x0(%esi),%esi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80499c0 <getfilecon@plt>
add    $0x18,%esp
mov    %ebx,%edx
pop    %ebx
jmp    8059700 <__sprintf_chk@plt+0xfa50>
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   8049920 <lgetfilecon@plt>
add    $0x18,%esp
mov    %ebx,%edx
pop    %ebx
jmp    8059700 <__sprintf_chk@plt+0xfa50>
lea    0x0(%esi),%esi
lea    0x0(%edi,%eiz,1),%edi
push   %ebx
sub    $0x18,%esp
mov    0x24(%esp),%ebx
mov    0x20(%esp),%eax
mov    %ebx,0x4(%esp)
mov    %eax,(%esp)
call   80497c0 <fgetfilecon@plt>
add    $0x18,%esp
mov    %ebx,%edx
pop    %ebx
jmp    8059700 <__sprintf_chk@plt+0xfa50>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%esi
mov    %esi,(%esp)
call   80498a0 <__fpending@plt>
mov    (%esi),%ebx
mov    %esi,(%esp)
and    $0x20,%ebx
mov    %eax,%edi
call   8059c20 <__sprintf_chk@plt+0xff70>
test   %eax,%eax
setne  %dl
test   %ebx,%ebx
jne    8059820 <__sprintf_chk@plt+0xfb70>
test   %dl,%dl
je     8059817 <__sprintf_chk@plt+0xfb67>
test   %edi,%edi
mov    $0xffffffff,%ebx
je     8059840 <__sprintf_chk@plt+0xfb90>
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
test   %dl,%dl
mov    $0xffffffff,%ebx
jne    8059817 <__sprintf_chk@plt+0xfb67>
call   8049a60 <__errno_location@plt>
movl   $0x0,(%eax)
add    $0x10,%esp
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi),%esi
call   8049a60 <__errno_location@plt>
xor    %ebx,%ebx
cmpl   $0x9,(%eax)
setne  %bl
add    $0x10,%esp
neg    %ebx
mov    %ebx,%eax
pop    %ebx
pop    %esi
pop    %edi
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x9c,%esp
movl   $0xe,(%esp)
mov    %gs:0x14,%eax
mov    %eax,0x8c(%esp)
xor    %eax,%eax
call   8049b10 <nl_langinfo@plt>
mov    0x8063f90,%ebp
test   %eax,%eax
mov    %eax,%ebx
mov    $0x805dfe5,%eax
cmove  %eax,%ebx
test   %ebp,%ebp
je     805992c <__sprintf_chk@plt+0xfc7c>
movzbl 0x0(%ebp),%esi
mov    %esi,%eax
test   %al,%al
je     80598f7 <__sprintf_chk@plt+0xfc47>
mov    %ebx,%edi
mov    %esi,%ebx
jmp    80598d0 <__sprintf_chk@plt+0xfc20>
nop
mov    %ebp,(%esp)
call   8049a10 <strlen@plt>
lea    0x1(%ebp,%eax,1),%esi
mov    %esi,(%esp)
call   8049a10 <strlen@plt>
lea    0x1(%esi,%eax,1),%ebp
movzbl 0x0(%ebp),%ebx
test   %bl,%bl
je     8059928 <__sprintf_chk@plt+0xfc78>
mov    %ebp,0x4(%esp)
mov    %edi,(%esp)
call   8049600 <strcmp@plt>
test   %eax,%eax
je     80598eb <__sprintf_chk@plt+0xfc3b>
cmp    $0x2a,%bl
jne    80598b0 <__sprintf_chk@plt+0xfc00>
cmpb   $0x0,0x1(%ebp)
jne    80598b0 <__sprintf_chk@plt+0xfc00>
mov    %ebp,(%esp)
call   8049a10 <strlen@plt>
lea    0x1(%ebp,%eax,1),%ebx
cmpb   $0x0,(%ebx)
mov    $0x805e4e8,%eax
cmove  %eax,%ebx
mov    0x8c(%esp),%ecx
xor    %gs:0x14,%ecx
mov    %ebx,%eax
jne    8059bed <__sprintf_chk@plt+0xff3d>
add    $0x9c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ebx
jmp    80598f7 <__sprintf_chk@plt+0xfc47>
movl   $0x805e4ee,(%esp)
call   8049900 <getenv@plt>
test   %eax,%eax
je     8059945 <__sprintf_chk@plt+0xfc95>
cmpb   $0x0,(%eax)
jne    8059b53 <__sprintf_chk@plt+0xfea3>
mov    $0x7,%eax
mov    $0x8,%esi
mov    $0x805e4df,%ecx
cmpb   $0x2f,(%ecx,%eax,1)
mov    $0x1,%edi
movl   $0x1,0x10(%esp)
je     8059b44 <__sprintf_chk@plt+0xfe94>
add    %esi,%edi
lea    0xe(%edi),%eax
mov    %eax,(%esp)
mov    %ecx,0x18(%esp)
call   8049930 <malloc@plt>
test   %eax,%eax
mov    %eax,0x14(%esp)
je     8059be3 <__sprintf_chk@plt+0xff33>
mov    0x18(%esp),%ecx
mov    %esi,0x8(%esp)
mov    %eax,(%esp)
mov    %ecx,0x4(%esp)
call   80496c0 <memcpy@plt>
mov    0x10(%esp),%eax
test   %eax,%eax
je     80599ac <__sprintf_chk@plt+0xfcfc>
mov    0x14(%esp),%eax
movb   $0x2f,(%eax,%esi,1)
mov    0x14(%esp),%eax
mov    $0x73,%ecx
add    %eax,%edi
movl   $0x72616863,(%edi)
movl   $0x2e746573,0x4(%edi)
movl   $0x61696c61,0x8(%edi)
mov    %cx,0xc(%edi)
movl   $0x20000,0x4(%esp)
mov    %eax,(%esp)
call   8049610 <open64@plt>
test   %eax,%eax
mov    %eax,%edi
js     8059b28 <__sprintf_chk@plt+0xfe78>
movl   $0x805b505,0x4(%esp)
mov    %eax,(%esp)
call   8049980 <fdopen@plt>
test   %eax,%eax
mov    %eax,%esi
je     8059b20 <__sprintf_chk@plt+0xfe70>
movl   $0x0,0x10(%esp)
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8059b06 <__sprintf_chk@plt+0xfe56>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0x20,%eax
je     8059a10 <__sprintf_chk@plt+0xfd60>
lea    -0x9(%eax),%edx
cmp    $0x1,%edx
jbe    8059a10 <__sprintf_chk@plt+0xfd60>
cmp    $0x23,%eax
je     8059b7d <__sprintf_chk@plt+0xfecd>
mov    %esi,0x4(%esp)
mov    %eax,(%esp)
call   8049a50 <ungetc@plt>
lea    0x59(%esp),%eax
mov    %eax,0xc(%esp)
lea    0x26(%esp),%eax
mov    %eax,0x8(%esp)
movl   $0x805e4fe,0x4(%esp)
mov    %esi,(%esp)
call   8049a00 <fscanf@plt>
cmp    $0x1,%eax
jle    8059ba0 <__sprintf_chk@plt+0xfef0>
lea    0x26(%esp),%eax
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    %eax,0x18(%esp)
lea    0x59(%esp),%eax
mov    %eax,(%esp)
call   8049a10 <strlen@plt>
mov    0x10(%esp),%edx
mov    %eax,%ecx
mov    0x18(%esp),%eax
mov    %ecx,0x1c(%esp)
add    %ecx,%eax
test   %edx,%edx
jne    8059bbe <__sprintf_chk@plt+0xff0e>
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,(%esp)
mov    %ecx,0x10(%esp)
call   8049930 <malloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
test   %edi,%edi
je     8059bf2 <__sprintf_chk@plt+0xff42>
mov    0x10(%esp),%ebp
lea    0x26(%esp),%eax
mov    %eax,0x4(%esp)
sub    %ecx,%ebp
mov    %ebp,%eax
sub    0x18(%esp),%eax
lea    -0x2(%edi,%eax,1),%eax
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
lea    0x59(%esp),%eax
mov    %eax,0x4(%esp)
lea    -0x1(%edi,%ebp,1),%eax
mov    %edi,%ebp
mov    %eax,(%esp)
call   8049890 <strcpy@plt>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jb     8059a1c <__sprintf_chk@plt+0xfd6c>
mov    %esi,(%esp)
call   8049b00 <__uflow@plt>
cmp    $0xffffffff,%eax
je     8059ba0 <__sprintf_chk@plt+0xfef0>
jmp    8059a25 <__sprintf_chk@plt+0xfd75>
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,(%esp)
call   8049c30 <close@plt>
mov    $0x805dfe5,%ebp
mov    0x14(%esp),%eax
mov    %eax,(%esp)
call   80496b0 <free@plt>
mov    %ebp,0x8063f90
jmp    805989f <__sprintf_chk@plt+0xfbef>
xor    %edi,%edi
movl   $0x0,0x10(%esp)
jmp    805996b <__sprintf_chk@plt+0xfcbb>
mov    %eax,(%esp)
mov    %eax,0x10(%esp)
call   8049a10 <strlen@plt>
mov    0x10(%esp),%ecx
test   %eax,%eax
mov    %eax,%esi
je     8059b44 <__sprintf_chk@plt+0xfe94>
lea    -0x1(%eax),%eax
jmp    8059954 <__sprintf_chk@plt+0xfca4>
lea    0x0(%esi,%eiz,1),%esi
cmp    $0xffffffff,%eax
je     8059b97 <__sprintf_chk@plt+0xfee7>
mov    0x4(%esi),%eax
cmp    0x8(%esi),%eax
jae    8059c0c <__sprintf_chk@plt+0xff5c>
lea    0x1(%eax),%edx
mov    %edx,0x4(%esi)
movzbl (%eax),%eax
cmp    $0xa,%eax
jne    8059b78 <__sprintf_chk@plt+0xfec8>
cmp    $0xffffffff,%eax
jne    8059a10 <__sprintf_chk@plt+0xfd60>
mov    %esi,(%esp)
call   8059c20 <__sprintf_chk@plt+0xff70>
mov    0x10(%esp),%eax
test   %eax,%eax
je     8059b28 <__sprintf_chk@plt+0xfe78>
movb   $0x0,0x0(%ebp,%eax,1)
jmp    8059b2d <__sprintf_chk@plt+0xfe7d>
add    0x10(%esp),%eax
mov    %ebp,(%esp)
lea    0x2(%eax),%ecx
add    $0x3,%eax
mov    %eax,0x4(%esp)
mov    %ecx,0x10(%esp)
call   8049910 <realloc@plt>
mov    0x1c(%esp),%ecx
mov    %eax,%edi
jmp    8059abc <__sprintf_chk@plt+0xfe0c>
mov    $0x805dfe5,%ebp
jmp    8059b39 <__sprintf_chk@plt+0xfe89>
call   8049790 <__stack_chk_fail@plt>
mov    %ebp,(%esp)
mov    $0x805dfe5,%ebp
call   80496b0 <free@plt>
mov    %esi,(%esp)
call   8059c20 <__sprintf_chk@plt+0xff70>
jmp    8059b2d <__sprintf_chk@plt+0xfe7d>
mov    %esi,(%esp)
call   8049b00 <__uflow@plt>
jmp    8059b92 <__sprintf_chk@plt+0xfee2>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %edi
push   %esi
push   %ebx
sub    $0x10,%esp
mov    0x20(%esp),%ebx
mov    %ebx,(%esp)
call   8049a80 <fileno@plt>
test   %eax,%eax
js     8059ca8 <__sprintf_chk@plt+0xfff8>
mov    %ebx,(%esp)
call   8049940 <__freading@plt>
test   %eax,%eax
jne    8059c78 <__sprintf_chk@plt+0xffc8>
mov    %ebx,(%esp)
call   8059cc0 <__sprintf_chk@plt+0x10010>
test   %eax,%eax
je     8059ca8 <__sprintf_chk@plt+0xfff8>
call   8049a60 <__errno_location@plt>
mov    (%eax),%edi
mov    %eax,%esi
mov    %ebx,(%esp)
call   8049700 <fclose@plt>
test   %edi,%edi
je     8059c6a <__sprintf_chk@plt+0xffba>
mov    %edi,(%esi)
mov    $0xffffffff,%eax
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
ret
lea    0x0(%esi,%eiz,1),%esi
mov    %ebx,(%esp)
call   8049a80 <fileno@plt>
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
mov    %eax,(%esp)
call   8049b80 <lseek64@plt>
and    %edx,%eax
cmp    $0xffffffff,%eax
jne    8059c42 <__sprintf_chk@plt+0xff92>
nop
mov    %ebx,0x20(%esp)
add    $0x10,%esp
pop    %ebx
pop    %esi
pop    %edi
jmp    8049700 <fclose@plt>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebx
sub    $0x18,%esp
mov    0x20(%esp),%ebx
test   %ebx,%ebx
je     8059cd8 <__sprintf_chk@plt+0x10028>
mov    %ebx,(%esp)
call   8049940 <__freading@plt>
test   %eax,%eax
jne    8059ce8 <__sprintf_chk@plt+0x10038>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049640 <fflush@plt>
lea    0x0(%esi),%esi
testl  $0x100,(%ebx)
je     8059cd8 <__sprintf_chk@plt+0x10028>
mov    %ebx,(%esp)
movl   $0x1,0xc(%esp)
movl   $0x0,0x4(%esp)
movl   $0x0,0x8(%esp)
call   8059d20 <__sprintf_chk@plt+0x10070>
mov    %ebx,0x20(%esp)
add    $0x18,%esp
pop    %ebx
jmp    8049640 <fflush@plt>
xchg   %ax,%ax
nop
push   %ebp
push   %edi
push   %esi
push   %ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebx
mov    0x34(%esp),%esi
mov    0x38(%esp),%edi
mov    0x3c(%esp),%ebp
mov    0x4(%ebx),%eax
cmp    %eax,0x8(%ebx)
je     8059d60 <__sprintf_chk@plt+0x100b0>
mov    %ebp,0x3c(%esp)
mov    %esi,0x34(%esp)
mov    %edi,0x38(%esp)
mov    %ebx,0x30(%esp)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
jmp    8049710 <fseeko64@plt>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    0x10(%ebx),%eax
cmp    %eax,0x14(%ebx)
jne    8059d3f <__sprintf_chk@plt+0x1008f>
mov    0x24(%ebx),%eax
test   %eax,%eax
jne    8059d3f <__sprintf_chk@plt+0x1008f>
mov    %ebx,(%esp)
call   8049a80 <fileno@plt>
mov    %ebp,0xc(%esp)
mov    %esi,0x4(%esp)
mov    %edi,0x8(%esp)
mov    %eax,(%esp)
call   8049b80 <lseek64@plt>
mov    %eax,%ecx
and    %edx,%ecx
cmp    $0xffffffff,%ecx
je     8059da7 <__sprintf_chk@plt+0x100f7>
andl   $0xffffffef,(%ebx)
mov    %eax,0x4c(%ebx)
xor    %eax,%eax
mov    %edx,0x50(%ebx)
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
or     $0xffffffff,%eax
jmp    8059d9f <__sprintf_chk@plt+0x100ef>
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x10,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%edi
mov    0x20(%esp),%edx
movl   $0x0,(%esp)
mov    %eax,0x4(%esp)
mov    0x2c(%esp),%eax
test   %edi,%edi
mov    %edi,%ecx
mov    %eax,%ebp
js     8059e78 <__sprintf_chk@plt+0x101c8>
test   %ebp,%ebp
mov    0x4(%esp),%esi
mov    %eax,%edi
js     8059e94 <__sprintf_chk@plt+0x101e4>
test   %edi,%edi
mov    %ecx,%ebp
mov    %edx,0x8(%esp)
mov    %edi,%eax
mov    %edx,%ecx
mov    %esi,0x4(%esp)
jne    8059e10 <__sprintf_chk@plt+0x10160>
cmp    %ebp,%esi
jbe    8059e38 <__sprintf_chk@plt+0x10188>
mov    %ebp,%edx
mov    %ecx,%eax
xor    %ebp,%ebp
div    %esi
mov    %eax,%ecx
jmp    8059e18 <__sprintf_chk@plt+0x10168>
lea    0x0(%esi),%esi
cmp    %ebp,%edi
jbe    8059e58 <__sprintf_chk@plt+0x101a8>
xor    %ebp,%ebp
xor    %ecx,%ecx
mov    %ecx,%eax
mov    (%esp),%ecx
mov    %ebp,%edx
test   %ecx,%ecx
je     8059e2a <__sprintf_chk@plt+0x1017a>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x10,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi,%eiz,1),%esi
test   %esi,%esi
jne    8059e47 <__sprintf_chk@plt+0x10197>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%esi
mov    %ebp,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    %ecx,%eax
div    %esi
mov    %eax,%ecx
jmp    8059e18 <__sprintf_chk@plt+0x10168>
nop
bsr    %edi,%edi
xor    $0x1f,%edi
jne    8059ea8 <__sprintf_chk@plt+0x101f8>
mov    0x8(%esp),%edi
cmp    %edi,0x4(%esp)
jbe    8059e6e <__sprintf_chk@plt+0x101be>
cmp    %ebp,%eax
jae    8059e14 <__sprintf_chk@plt+0x10164>
xor    %ebp,%ebp
mov    $0x1,%ecx
jmp    8059e18 <__sprintf_chk@plt+0x10168>
nop
neg    %edx
mov    0x4(%esp),%esi
mov    %eax,%edi
adc    $0x0,%ecx
neg    %ecx
test   %ebp,%ebp
movl   $0xffffffff,(%esp)
jns    8059deb <__sprintf_chk@plt+0x1013b>
neg    %esi
adc    $0x0,%edi
notl   (%esp)
neg    %edi
jmp    8059deb <__sprintf_chk@plt+0x1013b>
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%ecx
mov    0x4(%esp),%esi
shl    %cl,%eax
mov    %eax,%edx
mov    $0x20,%eax
sub    %edi,%eax
mov    %eax,%ecx
shr    %cl,%esi
mov    %edi,%ecx
mov    %esi,0xc(%esp)
mov    0x4(%esp),%esi
or     %edx,0xc(%esp)
mov    %ebp,%edx
shl    %cl,%esi
mov    %eax,%ecx
mov    %esi,0x4(%esp)
mov    0x8(%esp),%esi
shr    %cl,%edx
mov    %edi,%ecx
shl    %cl,%ebp
mov    %eax,%ecx
shr    %cl,%esi
or     %ebp,%esi
mov    %esi,%eax
divl   0xc(%esp)
mov    %edx,%ebp
mov    %eax,%esi
mull   0x4(%esp)
cmp    %edx,%ebp
mov    %edx,0x4(%esp)
jb     8059f18 <__sprintf_chk@plt+0x10268>
mov    0x8(%esp),%edx
mov    %edi,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    8059f0d <__sprintf_chk@plt+0x1025d>
cmp    0x4(%esp),%ebp
je     8059f18 <__sprintf_chk@plt+0x10268>
mov    %esi,%ecx
xor    %ebp,%ebp
jmp    8059e18 <__sprintf_chk@plt+0x10168>
xchg   %ax,%ax
lea    -0x1(%esi),%ecx
xor    %ebp,%ebp
jmp    8059e18 <__sprintf_chk@plt+0x10168>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x20,%esp
mov    0x34(%esp),%edx
mov    0x3c(%esp),%eax
mov    0x30(%esp),%ebp
mov    0x38(%esp),%edi
test   %edx,%edx
mov    %eax,%esi
mov    %ebp,(%esp)
mov    %edx,0x4(%esp)
movl   $0x0,0xc(%esp)
js     805a018 <__sprintf_chk@plt+0x10368>
test   %esi,%esi
mov    %edi,%edx
mov    %eax,%ecx
js     805a008 <__sprintf_chk@plt+0x10358>
mov    0x4(%esp),%edi
mov    %ecx,%eax
mov    %edx,%ecx
mov    (%esp),%esi
test   %eax,%eax
mov    %edx,0x10(%esp)
mov    %edi,%ebp
mov    %esi,0x14(%esp)
mov    %esi,%edi
mov    %ebp,%esi
jne    8059fa0 <__sprintf_chk@plt+0x102f0>
cmp    %esi,%edx
jbe    8059fe8 <__sprintf_chk@plt+0x10338>
mov    %esi,%edx
mov    0x14(%esp),%eax
div    %ecx
mov    %edx,%esi
mov    %esi,%eax
xor    %edx,%edx
jmp    8059fa9 <__sprintf_chk@plt+0x102f9>
lea    0x0(%esi,%eiz,1),%esi
cmp    %esi,%eax
jbe    8059fc0 <__sprintf_chk@plt+0x10310>
mov    (%esp),%eax
mov    %esi,%edx
mov    0xc(%esp),%ecx
test   %ecx,%ecx
je     8059fb8 <__sprintf_chk@plt+0x10308>
neg    %eax
adc    $0x0,%edx
neg    %edx
add    $0x20,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
bsr    %eax,%edx
mov    %edx,(%esp)
xorl   $0x1f,(%esp)
jne    805a038 <__sprintf_chk@plt+0x10388>
cmp    %edi,%ecx
jbe    805a0d0 <__sprintf_chk@plt+0x10420>
cmp    %esi,%eax
jb     805a0d0 <__sprintf_chk@plt+0x10420>
mov    %edi,%eax
mov    %ebp,%edx
jmp    8059fa9 <__sprintf_chk@plt+0x102f9>
lea    0x0(%esi),%esi
test   %edx,%edx
jne    8059ff7 <__sprintf_chk@plt+0x10347>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%ecx
mov    %esi,%eax
xor    %edx,%edx
div    %ecx
mov    %edi,%eax
div    %ecx
mov    %edx,%esi
jmp    8059f96 <__sprintf_chk@plt+0x102e6>
lea    0x0(%esi),%esi
neg    %edx
adc    $0x0,%ecx
neg    %ecx
jmp    8059f6b <__sprintf_chk@plt+0x102bb>
lea    0x0(%esi,%eiz,1),%esi
negl   (%esp)
adcl   $0x0,0x4(%esp)
negl   0x4(%esp)
movl   $0xffffffff,0xc(%esp)
jmp    8059f5f <__sprintf_chk@plt+0x102af>
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%edx
movl   $0x20,0x18(%esp)
mov    0x10(%esp),%ebp
sub    %edx,0x18(%esp)
mov    %edx,%ecx
shl    %cl,%eax
movzbl 0x18(%esp),%ecx
mov    %ebp,%edi
shr    %cl,%edi
mov    %edx,%ecx
shl    %cl,%ebp
movzbl 0x18(%esp),%ecx
or     %eax,%edi
mov    %edx,%eax
mov    %esi,%edx
mov    %ebp,0x1c(%esp)
shr    %cl,%edx
mov    %eax,%ecx
mov    0x14(%esp),%eax
shl    %cl,%esi
movzbl 0x18(%esp),%ecx
shr    %cl,%eax
movzbl (%esp),%ecx
or     %esi,%eax
mov    0x14(%esp),%esi
div    %edi
shl    %cl,%esi
mov    %esi,0x14(%esp)
mov    %edx,%esi
mul    %ebp
mov    %edx,0x10(%esp)
mov    0x10(%esp),%ebp
mov    %eax,%edx
cmp    %ebp,%esi
mov    %ebp,%ecx
jb     805a0e4 <__sprintf_chk@plt+0x10434>
cmp    %eax,0x14(%esp)
jb     805a0e0 <__sprintf_chk@plt+0x10430>
mov    (%esp),%ebp
mov    0x14(%esp),%edi
sub    %edx,%edi
sbb    %ecx,%esi
mov    %esi,%eax
mov    %ebp,%ecx
shr    %cl,%edi
movzbl 0x18(%esp),%ecx
shl    %cl,%eax
mov    %ebp,%ecx
or     %eax,%edi
shr    %cl,%esi
mov    %edi,%eax
mov    %esi,%edx
jmp    8059fa9 <__sprintf_chk@plt+0x102f9>
nop
sub    %ecx,%edi
sbb    %eax,%esi
mov    %esi,%ebp
jmp    8059fdc <__sprintf_chk@plt+0x1032c>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    %ebp,%esi
jne    805a0a8 <__sprintf_chk@plt+0x103f8>
mov    0x10(%esp),%ecx
mov    %eax,%edx
sub    0x1c(%esp),%edx
sbb    %edi,%ecx
jmp    805a0a8 <__sprintf_chk@plt+0x103f8>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0xc,%esp
mov    0x28(%esp),%eax
mov    0x1c(%esp),%edi
mov    0x20(%esp),%ebp
mov    0x24(%esp),%ecx
test   %eax,%eax
mov    %edi,0x4(%esp)
mov    %ebp,%edx
mov    %ecx,(%esp)
jne    805a150 <__sprintf_chk@plt+0x104a0>
cmp    %ebp,%ecx
ja     805a188 <__sprintf_chk@plt+0x104d8>
test   %ecx,%ecx
mov    %ecx,%esi
jne    805a138 <__sprintf_chk@plt+0x10488>
mov    $0x1,%eax
xor    %edx,%edx
div    %ecx
mov    %eax,%esi
xor    %edx,%edx
mov    %ebp,%eax
div    %esi
mov    %eax,%ebp
mov    %edi,%eax
div    %esi
mov    %ebp,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
cmp    %ebp,%eax
ja     805a178 <__sprintf_chk@plt+0x104c8>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    805a198 <__sprintf_chk@plt+0x104e8>
mov    0x4(%esp),%esi
cmp    %esi,(%esp)
jbe    805a208 <__sprintf_chk@plt+0x10558>
cmp    %edx,%eax
jb     805a208 <__sprintf_chk@plt+0x10558>
lea    0x0(%esi,%eiz,1),%esi
xor    %edx,%edx
xor    %eax,%eax
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    %edi,%eax
div    %ecx
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
lea    0x0(%esi),%esi
mov    %ebp,%ecx
mov    (%esp),%edi
shl    %cl,%eax
mov    %eax,%esi
mov    $0x20,%eax
sub    %ebp,%eax
mov    %eax,%ecx
shr    %cl,%edi
mov    %ebp,%ecx
mov    %edi,0x8(%esp)
mov    (%esp),%edi
or     %esi,0x8(%esp)
mov    %edx,%esi
shl    %cl,%edi
mov    %eax,%ecx
mov    %edi,(%esp)
mov    0x4(%esp),%edi
shr    %cl,%esi
mov    %ebp,%ecx
shl    %cl,%edx
mov    %eax,%ecx
shr    %cl,%edi
or     %edx,%edi
mov    %esi,%edx
mov    %edi,%eax
divl   0x8(%esp)
mov    %edx,%esi
mov    %eax,%edi
mull   (%esp)
cmp    %edx,%esi
mov    %edx,(%esp)
jb     805a218 <__sprintf_chk@plt+0x10568>
mov    0x4(%esp),%edx
mov    %ebp,%ecx
shl    %cl,%edx
cmp    %eax,%edx
jae    805a1f9 <__sprintf_chk@plt+0x10549>
cmp    (%esp),%esi
je     805a218 <__sprintf_chk@plt+0x10568>
mov    %edi,%eax
xor    %edx,%edx
jmp    805a17c <__sprintf_chk@plt+0x104cc>
lea    0x0(%esi),%esi
xor    %edx,%edx
mov    $0x1,%eax
jmp    805a17c <__sprintf_chk@plt+0x104cc>
lea    0x0(%esi,%eiz,1),%esi
lea    -0x1(%edi),%eax
xor    %edx,%edx
add    $0xc,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebp
push   %edi
push   %esi
sub    $0x14,%esp
mov    0x28(%esp),%eax
mov    0x24(%esp),%ecx
mov    0x2c(%esp),%esi
mov    %eax,%edi
mov    %eax,0x4(%esp)
mov    0x30(%esp),%eax
mov    %ecx,0x10(%esp)
mov    %esi,(%esp)
mov    %ecx,0x8(%esp)
test   %eax,%eax
mov    %eax,%edx
mov    %edi,0xc(%esp)
jne    805a278 <__sprintf_chk@plt+0x105c8>
cmp    %edi,%esi
jbe    805a2b0 <__sprintf_chk@plt+0x10600>
mov    %ecx,%eax
mov    %edi,%edx
div    %esi
mov    %edx,%eax
xor    %edx,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
xchg   %ax,%ax
cmp    %edi,%eax
ja     805a2d0 <__sprintf_chk@plt+0x10620>
bsr    %eax,%ebp
xor    $0x1f,%ebp
jne    805a2e0 <__sprintf_chk@plt+0x10630>
mov    0x8(%esp),%edi
cmp    %edi,(%esp)
ja     805a378 <__sprintf_chk@plt+0x106c8>
mov    0x4(%esp),%edi
sub    %esi,%ecx
sbb    %eax,%edi
mov    %ecx,0x8(%esp)
mov    %edi,0xc(%esp)
mov    0x8(%esp),%eax
mov    0xc(%esp),%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
test   %esi,%esi
mov    %esi,%ebp
jne    805a2c1 <__sprintf_chk@plt+0x10611>
mov    $0x1,%eax
xor    %edx,%edx
div    %esi
mov    %eax,%ebp
mov    0x4(%esp),%eax
xor    %edx,%edx
div    %ebp
mov    %ecx,%eax
div    %ebp
jmp    805a26b <__sprintf_chk@plt+0x105bb>
nop
mov    %ecx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
lea    0x0(%esi,%eiz,1),%esi
mov    (%esp),%eax
mov    $0x20,%esi
mov    %ebp,%ecx
sub    %ebp,%esi
shl    %cl,%edx
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
mov    %eax,0x4(%esp)
mov    (%esp),%eax
or     %edx,0x4(%esp)
mov    %edi,%edx
shl    %cl,%eax
mov    %esi,%ecx
mov    %eax,0x8(%esp)
mov    0x10(%esp),%eax
shr    %cl,%edx
mov    %ebp,%ecx
shl    %cl,%edi
mov    %esi,%ecx
shr    %cl,%eax
mov    %ebp,%ecx
or     %edi,%eax
mov    0x10(%esp),%edi
divl   0x4(%esp)
shl    %cl,%edi
mov    %edi,0xc(%esp)
mov    %edx,%edi
mull   0x8(%esp)
cmp    %edx,%edi
mov    %eax,%ecx
mov    %edx,(%esp)
jb     805a364 <__sprintf_chk@plt+0x106b4>
cmp    %eax,0xc(%esp)
jb     805a360 <__sprintf_chk@plt+0x106b0>
mov    0xc(%esp),%eax
sub    %ecx,%eax
sbb    %edx,%edi
mov    %ebp,%ecx
mov    %edi,%edx
shr    %cl,%eax
mov    %esi,%ecx
shl    %cl,%edx
mov    %ebp,%ecx
shr    %cl,%edi
or     %edx,%eax
mov    %edi,%edx
add    $0x14,%esp
pop    %esi
pop    %edi
pop    %ebp
ret
nop
cmp    %edx,%edi
jne    805a33e <__sprintf_chk@plt+0x1068e>
mov    (%esp),%edx
mov    %eax,%ecx
sub    0x8(%esp),%ecx
sbb    0x4(%esp),%edx
jmp    805a33e <__sprintf_chk@plt+0x1068e>
nop
lea    0x0(%esi,%eiz,1),%esi
cmp    0xc(%esp),%eax
jb     805a291 <__sprintf_chk@plt+0x105e1>
jmp    805a2a1 <__sprintf_chk@plt+0x105f1>
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
nop
push   %ebp
push   %edi
xor    %edi,%edi
push   %esi
push   %ebx
call   804c070 <__sprintf_chk@plt+0x23c0>
add    $0x8c65,%ebx
sub    $0x1c,%esp
mov    0x30(%esp),%ebp
lea    -0x104(%ebx),%esi
call   804958c <_init>
lea    -0x108(%ebx),%eax
sub    %eax,%esi
sar    $0x2,%esi
test   %esi,%esi
je     805a3e9 <__sprintf_chk@plt+0x10739>
lea    0x0(%esi),%esi
mov    0x38(%esp),%eax
mov    %ebp,(%esp)
mov    %eax,0x8(%esp)
mov    0x34(%esp),%eax
mov    %eax,0x4(%esp)
call   *-0x108(%ebx,%edi,4)
add    $0x1,%edi
cmp    %esi,%edi
jne    805a3c8 <__sprintf_chk@plt+0x10718>
add    $0x1c,%esp
pop    %ebx
pop    %esi
pop    %edi
pop    %ebp
ret
jmp    805a400 <__sprintf_chk@plt+0x10750>
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
repz ret
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
xchg   %ax,%ax
push   %ebx
call   804c070 <__sprintf_chk@plt+0x23c0>
add    $0x8bea,%ebx
sub    $0x18,%esp
lea    0x1e4(%ebx),%eax
test   %eax,%eax
je     805a448 <__sprintf_chk@plt+0x10798>
mov    (%eax),%eax
mov    %eax,0x8(%esp)
mov    0x20(%esp),%eax
movl   $0x0,0x4(%esp)
mov    %eax,(%esp)
call   80498d0 <__cxa_atexit@plt>
add    $0x18,%esp
pop    %ebx
ret
xor    %eax,%eax
jmp    805a42b <__sprintf_chk@plt+0x1077b>
push   %ebx
sub    $0x8,%esp
call   804c070 <__sprintf_chk@plt+0x23c0>
add    $0x8bab,%ebx
add    $0x8,%esp
pop    %ebx
ret
add    (%eax),%eax
add    %eax,(%eax)
add    (%eax),%al
jo     805a445 <__sprintf_chk@plt+0x10795>
add    $0x8,%al
jo     805a449 <__sprintf_chk@plt+0x10799>
add    $0x8,%al
jo     805a44d <_fini+0x1>
add    $0x8,%al
jo     805a451 <_fini+0x5>
add    $0x8,%al
jo     805a455 <_fini+0x9>
add    $0x8,%al
jo     805a459 <_fini+0xd>
add    $0x8,%al
jo     805a45d <_fini+0x11>
add    $0x8,%al
jo     805a461 <_fini+0x15>
add    $0x8,%al
jo     805a465 <_IO_stdin_used+0x1>
add    $0x8,%al
jo     805a469 <_IO_stdin_used+0x5>
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %ah,-0x3d(%eax)
add    $0x8,%al
pusha
ret
add    $0x8,%al
pusha
ret
add    $0x8,%al
pusha
ret
add    $0x8,%al
pusha
ret
add    $0x8,%al
pusha
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x7ff7fb3d(%eax)
ret
add    $0x8,%al
add    $0x4,%bl
or     %al,-0x6ff7fb3d(%eax)
ret    $0x804
nop
ret    $0x804
nop
ret    $0x804
nop
ret    $0x804
nop
ret    $0x804
nop
ret    $0x804
add    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
or     %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
rol    %bl
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
nop
ret
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
sbb    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
enter  $0x4c3,$0x8
rol    $0x4,%bl
or     %ah,(%eax)
les    (%eax,%ecx,1),%eax
and    %al,%ah
add    $0x8,%al
test   $0xc3,%al
add    $0x8,%al
lock ret
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
clc
ret
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
loopne 805a6e9 <_IO_stdin_used+0x285>
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
call   280dabf4 <_end+0x20076c60>
les    (%eax,%ecx,1),%eax
fadd   %st(3),%st
add    $0x8,%al
and    %al,%ah
add    $0x8,%al
nop
ret
add    $0x8,%al
add    %eax,%gs:0x501c208
or     %bl,(%eax)
add    0x4fff308,%al
or     %dh,-0x59f7fb00(%ebp)
mov    %al,0xa29a0804
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
jle    805a9c8 <_IO_stdin_used+0x564>
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
bound  %esp,-0x5de2f7fc(%edx)
add    $0x8,%al
push   %cs
mov    %al,0xa2020804
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
repz mov 0xa1e70804,%eax
add    $0x8,%al
fsubs  -0x5e56f7fc(%ecx)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
lcall  $0x4a7,$0x550804a1
or     %al,0x550804a1(%ecx)
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   $0x5c0804a1
mov    0xa1480804,%eax
add    $0x8,%al
add    $0xf10804a1,%eax
mov    0xa7550804,%al
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
frstor -0x58aaf7fc(%eax)
add    $0x8,%al
shll   -0x58aaf7fc(%eax)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
ret    $0x4a0
or     %ch,-0x65f7fb60(%ecx)
mov    0xa08e0804,%al
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
mov    0xa03f0804,%al
add    $0x8,%al
(bad)
lahf
add    $0x8,%al
cmc
lahf
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
out    %al,(%dx)
lahf
add    $0x8,%al
loop   805aab1 <_IO_stdin_used+0x64d>
add    $0x8,%al
sbb    %ah,-0x6024f7fc(%edi)
add    $0x8,%al
add    -0x590cf7fc(%edi),%ah
add    $0x8,%al
out    %eax,$0xa6
add    $0x8,%al
(bad)  -0x5930f7fc(%esi)
add    $0x8,%al
mov    $0xac0804a6,%ebx
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
cwtl
cmpsb  %es:(%edi),%ds:(%esi)
add    $0x8,%al
add    $0xf60804a6,%eax
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
push   %ebp
cmpsl  %es:(%edi),%ds:(%esi)
add    $0x8,%al
ljmp   $0x4a5,$0xa00804a5
or     %bh,-0x5ad2f7fc(,%eiz,4)
add    $0x8,%al
push   %ds
movsl  %ds:(%esi),%es:(%edi)
add    $0x8,%al
xlat   %ds:(%ebx)
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
ret
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
mov    $0xa4,%bh
add    $0x8,%al
nop
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
dec    %ecx
movsb  %ds:(%esi),%es:(%edi)
add    $0x8,%al
mull   -0x5c14f7fc(%ebx)
add    $0x8,%al
stos   %al,%es:(%edi)
mov    %eax,0xa35e0804
add    $0x8,%al
pop    %ss
mov    %eax,0xa30c0804
add    $0x8,%al
mov    %eax,0x790804be
mov    $0xbed80804,%esi
add    $0x8,%al
cmp    %bh,-0x6247f7fc(%esi)
add    $0x8,%al
fstpt  0x804(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    $0x0,%eax
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
add    %al,(%eax)
add    %ah,0x76(%ebp,%eiz,2)
pop    %edi
imul   $0x706f705f,0x6f(%esi),%ebp
add    %cl,0x8000000
add    %al,(%eax)
add    %cl,(%ebx)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %cl,(%edx)
add    %al,(%eax)
add    %al,0x7000000
add    %al,(%eax)
add    %cl,(%ecx)
add    %al,(%eax)
add    %al,0x6000000
add    %al,(%eax)
add    %ah,0x6f(%esi)
jb     805acb9 <_IO_stdin_used+0x855>
popa
je     805acae <_IO_stdin_used+0x84a>
imul   $0x73006564,0x6f(%esi),%ebp
outsl  %ds:(%esi),(%dx)
jb     805accd <_IO_stdin_used+0x869>
pop    %edi
imul   $0x7000,0x73(%ebp,%eiz,2),%bp
outsl  %ds:(%esi),(%dx)
jae    805accd <_IO_stdin_used+0x869>
js     805ac93 <_IO_stdin_used+0x82f>
add    %ch,0x61(%ebp)
imul   $0x0,0x0(%esi),%ebp
adc    $0x0,%al
add    %al,(%eax)
push   %cs
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %cl,0x3000000
add    %al,(%eax)
add    %cl,(%edi)
add    %al,(%eax)
add    %bl,0x1b000000
add    %al,(%eax)
add    %bl,(%edx)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %bl,(%ecx)
add    %al,(%eax)
add    %al,%al
movl   $0x804d2b0,(%eax,%ecx,1)
loopne 805ac91 <_IO_stdin_used+0x82d>
add    $0x8,%al
nop
roll   %cl,(%eax,%ecx,1)
push   %eax
movl   $0x804d320,(%eax,%ecx,1)
jo     805aca1 <_IO_stdin_used+0x83d>
add    $0x8,%al
add    %dl,%ah
add    $0x8,%al
inc    %eax
or     0x50c3008,%al
or     %al,%al
or     %eax,0x50b7008
or     %ah,(%eax)
syscall
or     %ah,-0x5ff7faf1(%eax)
push   %cs
add    $0x4db2008,%eax
or     %dh,-0x5ff7fb15(%eax)
cld
add    $0x8,%al
adc    %ch,%ah
add    $0x8,%al
push   %eax
std
add    $0x8,%al
and    %al,(%edi)
add    $0x4d20008,%eax
or     %al,-0x3ff7faf9(%eax)
or     0x4c82008,%al
or     %dh,0x804da(%eax)
enter  $0x804,$0x40
fiaddl (%eax,%ecx,1)
add    %ch,%dh
add    $0x8,%al
add    %al,(%esi)
add    $0x4ed1008,%eax
or     %dl,-0x2ff7fafa(%eax)
or     %al,0x4d0e008
or     %ah,%al
pop    %es
add    $0x50cf008,%eax
or     %ah,-0x13(%eax)
add    $0x8,%al
rolb   $0x5,(%ebx)
or     %dh,0x500804ed(%eax)
add    $0x5,%al
or     %dh,(%eax)
or     %al,0x50e1008
or     %al,0x50080508(%eax)
rolb   (%eax,%ecx,1)
shr    $0x4,%ah
or     %ah,%al
add    $0x5,%al
or     %dh,-0x14(%eax)
add    $0x8,%al
jo     805ad93 <_IO_stdin_used+0x92f>
add    $0x5097008,%eax
or     %dh,-0x2f(%eax)
add    $0x8,%al
and    %cl,(%ecx)
add    $0x50d8008,%eax
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %ah,-0x26(%ebx)
add    $0x5b4f708,%eax
or     %bh,%bl
mov    $0x5,%ah
or     %al,(%ecx)
mov    $0x5,%ch
or     %al,(%edi)
mov    $0x5,%ch
or     %cl,(%edx)
mov    $0x5,%ch
or     %cl,(%edi)
mov    $0x5,%ch
or     %dl,(%edi)
mov    $0x5,%ch
or     %dl,0x805(,%esi,4)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
sbb    -0x4adef7fb(%ebp),%esi
add    $0x5b52808,%eax
or     %ch,-0x4acdf7fb(,%esi,4)
add    $0x8,%eax
add    %bh,%bh
(bad)
(bad)
incl   (%eax,%eax,1)
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
or     -0x4c96f7fb(%ebp),%dh
add    $0x5b6bc08,%eax
or     %bh,(%ecx)
mov    $0x5,%ch
or     %dh,0x805b2
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    (%eax),%eax
add    %al,(%eax)
add    (%eax),%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
mov    $0x5,%ch
or     %cl,-0x4b(%ebx)
add    $0x5b55008,%eax
or     %dl,-0x4b(%edi)
add    $0x5b56208,%eax
or     %ch,-0x4b(%ecx)
add    $0x5b57208,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %bl,(%ecx)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ecx)
add    %al,(%eax)
xorb   $0x0,0x805(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,0x0(%edx)
add    %al,(%eax)
xchg   %esi,0x805(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,%fs:(%eax)
add    %dl,0x805b5(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax,%eax,1)
add    %dl,0x805b5(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x5f000000(%esi)
mov    $0x5,%ch
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x47000000(%edi)
mov    $0x5,%ch
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%eax)
add    %al,(%eax)
enter  $0x5b5,$0x8
imul   $0xb5ce0000,(%eax),%eax
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %ch,0x0(%ebx)
add    %al,(%eax)
fdivs  0x805(%ebp)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
outsb  %ds:(%esi),(%dx)
add    %al,(%eax)
add    %ch,%al
mov    $0x5,%ch
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%edi)
add    %al,(%eax)
icebp
mov    $0x5,%ch
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ecx)
add    %al,(%eax)
add    $0xb6,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx)
add    %al,(%eax)
mov    $0x805b6,%esp
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%ebx)
add    %al,(%eax)
or     $0xb6,%al
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edi)
add    %al,(%eax)
adc    0x805(%esi),%dh
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
add    %al,(%eax)
add    %bl,0x805b6
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%edx)
add    %al,(%eax)
sub    $0xb6,%al
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%esi)
add    %al,(%eax)
xor    $0x805b6,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x49c10000(%eax,%eax,1)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,-0x49be0000(%eax,%eax,1)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%eax)
add    %al,(%eax)
pop    %eax
fadds  0x8
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x5b000000(%ebx)
mov    $0x5,%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x60000000(%eax)
mov    $0x5,%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%ecx)
add    %al,(%eax)
xorl   $0x0,0x10805(%ebx)
00
add    %al,(%eax)
mov    %eax,(%eax)
add    %al,(%eax)
addr16 mov $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%eax,%eax,1)
add    %dh,-0x4a(%ebx)
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x0(%esi)
add    %al,(%eax)
jnp    805b008 <_IO_stdin_used+0xba4>
add    $0x8,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%ecx)
add    %al,(%eax)
xchg   %eax,%ebx
mov    $0x5,%bl
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,-0x7a000000(%edx)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%edx)
add    %al,(%eax)
jo     805b035 <_IO_stdin_used+0xbd1>
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x70000000(%ebp)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x62000000(%ebx)
mov    $0x5,%bl
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,-0x5d000000(%ebp)
mov    $0x5,%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,0x0(%eax,%eax,1)
add    %ch,-0x4d(%ecx)
add    $0x108,%eax
add    %al,(%eax)
add    %al,(%eax)
add    %cl,-0x55000000(%esi)
mov    $0x5,%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %cl,0x79000000(%edi)
mov    $0x5,%bl
or     %al,(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x4a000000(%edx)
mov    $0x5,%dh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x3f000000(%ecx)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,0x0(%edx)
add    %al,(%eax)
leave
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,-0x30000000(%eax)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%esi)
(bad)
pushl  0x805b2
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x1(%ebp)
(bad)
incl   (%eax)
add    %al,(%eax)
add    %dh,(%ebx)
mov    $0x5,%bh
or     %dh,(%esi)
mov    $0x5,%bh
or     %bh,(%ecx)
mov    $0x5,%bh
or     %al,(%ecx)
mov    $0x5,%dh
or     %al,(%edi)
mov    $0x5,%ch
or     %bh,(%edi,%esi,4)
add    $0x5b73f08,%eax
or     %al,-0x49(%edx)
add    $0x5b74508,%eax
or     %bh,-0x49(%eax)
add    $0x5b74808,%eax
or     %cl,-0x49(%ebx)
add    $0x5b74e08,%eax
or     %cl,%ch
mov    $0x5,%dh
or     %dl,-0x49(%ecx)
add    $0x5b75408,%eax
or     %dl,-0x49(%edi)
add    $0x5b75a08,%eax
or     %dh,0x5d0805b5(%esi)
mov    $0x5,%bh
or     %ah,-0x49(%eax)
add    $0x5b76308,%eax
or     %ah,-0x49(%esi)
add    $0x5b76908,%eax
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %cl,(%edx)
mov    $0x5,%ch
or     %ch,0x5(%edi,%esi,4)
or     %dh,0x2c0805b6
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %dh,%bh
mov    $0x5,%dl
or     %dh,-0x49(%edx)
add    $0x5b77708,%eax
or     %cl,(%ebx)
mov    $0x5,%bl
or     %al,(%eax)
add    %al,(%eax)
add    %bh,(%edi)
jo     805b272 <_IO_stdin_used+0xe0e>
bound  %ebp,%fs:0x6477736c
add    %dh,(%eax)
xor    %al,(%eax)
jae    805b28e <_IO_stdin_used+0xe2a>
arpl   %bp,(%edi)
insb   (%dx),%es:(%edi)
jae    805b24f <_IO_stdin_used+0xdeb>
arpl   %ax,(%eax)
jae    805b294 <_IO_stdin_used+0xe30>
jb     805b29b <_IO_stdin_used+0xe37>
pop    %edi
je     805b2a3 <_IO_stdin_used+0xe3f>
jo     805b291 <_IO_stdin_used+0xe2d>
and    %ah,(%ecx)
cmp    $0x726f7320,%eax
je     805b294 <_IO_stdin_used+0xe30>
jbe    805b29c <_IO_stdin_used+0xe38>
jb     805b2ac <_IO_stdin_used+0xe48>
imul   $0x6c252000,0x6e(%edi),%ebp
jne    805b242 <_IO_stdin_used+0xdde>
and    $0x20756c2a,%eax
add    %bh,(%edi)
add    %ah,0x73250062
and    %ah,0x20732a
and    %ah,(%eax)
add    %ah,0x202c732a
and    $0x20732a,%eax
and    %ch,0x6300203e
popa
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805b28e <_IO_stdin_used+0xe2a>
popa
arpl   %sp,0x65(%ebx)
jae    805b2e7 <_IO_stdin_used+0xe83>
and    %ah,0x61630073
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805b29f <_IO_stdin_used+0xe3b>
jb     805b2e6 <_IO_stdin_used+0xe82>
popa
and    %dh,%fs:0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
and    %ah,0x6e750073
insb   (%dx),%es:(%edi)
popa
bound  %esp,0x6c(%ebp)
gs add %cl,%fs:%gs:(%edx)
push   %edx
gs
jo     805b313 <_IO_stdin_used+0xeaf>
jb     805b31a <_IO_stdin_used+0xeb6>
and    %ah,0x75622073
addr16 jae 805b2cf <_IO_stdin_used+0xe6b>
je     805b320 <_IO_stdin_used+0xebc>
and    %ah,0x62000a73
jne    805b320 <_IO_stdin_used+0xebc>
sub    $0x65726f63,%eax
jne    805b334 <_IO_stdin_used+0xed0>
imul   $0x2e756e67,0x40(%ebx,%esi,2),%ebp
outsl  %ds:(%esi),(%dx)
jb     805b332 <_IO_stdin_used+0xece>
add    %ah,0x6f682073
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x61(%eax)
cmp    %gs:(%bx,%si),%ah
cmp    $0x25,%al
jae    805b31c <_IO_stdin_used+0xeb8>
or     (%eax),%al
inc    %edi
dec    %esi
push   %ebp
and    %ah,0x6f(%ebx)
jb     805b34d <_IO_stdin_used+0xee9>
jne    805b35e <_IO_stdin_used+0xefa>
imul   $0x5f6e65,0x0(%ebx,%esi,2),%ebp
jbe    805b358 <_IO_stdin_used+0xef4>
imul   $0x6c6c7566,0x0(%edx),%esi
sub    $0x6f7369,%eax
das
jne    805b376 <_IO_stdin_used+0xf12>
jb     805b334 <_IO_stdin_used+0xed0>
jae    805b36f <_IO_stdin_used+0xf0b>
popa
jb     805b36f <_IO_stdin_used+0xf0b>
das
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %dl,%gs:0x55(%ecx)
dec    %edi
push   %esp
dec    %ecx
dec    %esi
inc    %edi
pop    %edi
push   %ebx
push   %esp
pop    %ecx
dec    %esp
inc    %ebp
add    %al,0x4f(%ebx)
dec    %esp
push   %ebp
dec    %ebp
dec    %esi
push   %ebx
add    %dl,0x42(%ecx,%eax,2)
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
add    %ch,0x6e(%ecx)
jbe    805b395 <_IO_stdin_used+0xf31>
insb   (%dx),%es:(%edi)
imul   $0x20656e69,0x6c(%eax,%eiz,1),%esp
ja     805b3a8 <_IO_stdin_used+0xf44>
fs
je     805b3aa <_IO_stdin_used+0xf46>
cmp    (%eax),%ah
and    $0x2a2e0073,%eax
jle    805b34b <_IO_stdin_used+0xee7>
imul   $0x64696c61,0x76(%esi),%ebp
and    %dh,0x62(%ecx,%eiz,2)
and    %dh,0x69(%ebx)
jp     805b3c0 <_IO_stdin_used+0xf5c>
cmp    (%eax),%ah
and    $0x2d2d0073,%eax
jae    805b3d3 <_IO_stdin_used+0xf6f>
jb     805b3da <_IO_stdin_used+0xf76>
add    %ch,0x6d69742d
add    %ch,%gs:0x726f662d
insl   (%dx),%es:(%edi)
popa
je     805b377 <_IO_stdin_used+0xf13>
sub    $0x6c6f632d,%eax
outsl  %ds:(%esi),(%dx)
jb     805b37f <_IO_stdin_used+0xf1b>
sub    $0x646e692d,%eax
imul   $0x2d726f74,0x61(%ebx),%esp
jae    805b401 <_IO_stdin_used+0xf9d>
jns    805b3fb <_IO_stdin_used+0xf97>
add    %ch,%gs:0x6f75712d
je     805b401 <_IO_stdin_used+0xf9d>
outsb  %ds:(%esi),(%dx)
addr16 sub $0x6c797473,%eax
add    %al,%gs:0x76(%ecx,%eiz,2)
imul   $0x654b6361,0x4d(%eax,%eiz,1),%esp
outsb  %ds:(%esi),(%dx)
jp     805b418 <_IO_stdin_used+0xfb4>
add    %dl,%gs:0x69(%edx)
arpl   %bp,0x61(%eax)
jb     805b41c <_IO_stdin_used+0xfb8>
and    %cl,0x2e(%ebp)
and    %dl,0x74(%ebx)
popa
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
add    %cl,0x5f(%ebx,%edx,2)
inc    %edx
dec    %esp
dec    %edi
inc    %ebx
dec    %ebx
pop    %edi
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
add    %ch,(%edx)
cmp    $0x7c403e,%eax
push   %esp
dec    %ecx
dec    %ebp
inc    %ebp
pop    %edi
push   %ebx
push   %esp
pop    %ecx
dec    %esp
inc    %ebp
add    %ch,0x6e(%ecx)
jbe    805b449 <_IO_stdin_used+0xfe5>
insb   (%dx),%es:(%edi)
imul   $0x20656d69,0x74(%eax,%eiz,1),%esp
jae    805b467 <_IO_stdin_used+0x1003>
jns    805b461 <_IO_stdin_used+0xffd>
and    %ah,%gs:0x6f(%esi)
jb     805b468 <_IO_stdin_used+0x1004>
popa
je     805b41e <_IO_stdin_used+0xfba>
and    $0x69740073,%eax
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x74(%ebx)
jns    805b476 <_IO_stdin_used+0x1012>
add    %dl,%gs:0x61(%esi)
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     805b48e <_IO_stdin_used+0x102a>
and    %ah,0x72(%ecx)
cmp    %gs:(%edx),%cl
add    %ah,(%eax)
and    %ch,0x6f705b20
jae    805b494 <_IO_stdin_used+0x1030>
js     805b45a <_IO_stdin_used+0xff6>
pop    %ebp
and    $0x25000a73,%eax
pop    %ecx
sub    $0x252d6d25,%eax
and    %ah,%fs:0x4d253a48
cmp    0x4e252e53,%ah
and    %ah,0x5925007a
sub    $0x252d6d25,%eax
and    %ah,%fs:0x4d253a48
add    %ah,0x6d252d59
sub    $0x206425,%eax
dec    %esp
push   %ebx
pop    %edi
inc    %ebx
dec    %edi
dec    %esp
dec    %edi
push   %edx
push   %ebx
add    %dh,0x72(%ecx,%eiz,2)
addr16
gs
je     805b474 <_IO_stdin_used+0x1010>
add    %ah,%cs:0x6f(%esi)
jne    805b4e8 <_IO_stdin_used+0x1084>
add    %ah,%fs:0x61(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805b4a3 <_IO_stdin_used+0x103f>
outsl  %ds:(%esi),(%dx)
jo     805b4eb <_IO_stdin_used+0x1087>
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    805b4b2 <_IO_stdin_used+0x104e>
and    $0x65720073,%eax
popa
imul   $0x72696420,%fs:0x67(%esi),%ebp
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    805b4c7 <_IO_stdin_used+0x1063>
and    $0x6c630073,%eax
outsl  %ds:(%esi),(%dx)
jae    805b518 <_IO_stdin_used+0x10b4>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%si)
jb     805b51b <_IO_stdin_used+0x10b7>
arpl   %si,0x72(%edi,%ebp,2)
jns    805b4dc <_IO_stdin_used+0x1078>
and    $0x6f740073,%eax
je     805b524 <_IO_stdin_used+0x10c0>
insb   (%dx),%es:(%edi)
add    %bl,(%ebx)
pop    %ebx
add    %ch,(%edi)
das
inc    %esp
dec    %ecx
push   %edx
inc    %ebp
inc    %esp
das
das
add    %ch,(%edi)
das
push   %ebx
push   %ebp
inc    %edx
inc    %esp
dec    %ecx
push   %edx
inc    %ebp
inc    %esp
das
das
add    %dh,0x6e(%ebp)
jb     805b548 <_IO_stdin_used+0x10e4>
arpl   %bp,0x67(%edi)
outsb  %ds:(%esi),(%dx)
imul   $0x72702064,0x65(%edx),%edi
imul   $0x2520,%gs:0x3a(%eax),%di
jae    805b4f7 <_IO_stdin_used+0x1093>
jns    805b55e <_IO_stdin_used+0x10fa>
jae    805b4fb <_IO_stdin_used+0x1097>
outsw  %ds:(%esi),(%dx)
jb     805b562 <_IO_stdin_used+0x10fe>
add    %ch,%gs:0x65(%esi)
jbe    805b56a <_IO_stdin_used+0x1106>
jb     805b507 <_IO_stdin_used+0x10a3>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
add    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
add    %ah,%gs:0x75(%ecx)
je     805b582 <_IO_stdin_used+0x111e>
add    %ch,0x66(%ecx)
sub    $0x797474,%eax
popa
je     805b587 <_IO_stdin_used+0x1123>
insl   (%dx),%es:(%edi)
add    %ah,%gs:0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    805b528 <_IO_stdin_used+0x10c4>
jne    805b59d <_IO_stdin_used+0x1139>
add    %ah,%gs:0x74(%ebx)
imul   $0x61747300,0x65(%ebp),%ebp
je     805b5ac <_IO_stdin_used+0x1148>
jae    805b539 <_IO_stdin_used+0x10d5>
gs
js     805b5b0 <_IO_stdin_used+0x114c>
outsb  %gs:(%esi),(%dx)
jae    805b5a9 <_IO_stdin_used+0x1145>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
add    %dh,0x65(%esi)
jb     805b5a9 <_IO_stdin_used+0x1145>
outsl  %ds:(%esi),(%dx)
jae    805b5af <_IO_stdin_used+0x114b>
add    %ch,0x6e(%edi,%ebp,2)
add    %ah,0x6f(%bp,%di)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
jae    805b557 <_IO_stdin_used+0x10f3>
push   $0x7a69726f
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     805b5c1 <_IO_stdin_used+0x115d>
insb   (%dx),%es:(%edi)
add    %ah,0x63(%ecx)
jb     805b5d5 <_IO_stdin_used+0x1171>
jae    805b5db <_IO_stdin_used+0x1177>
add    %dh,0x65(%esi)
jb     805b5e1 <_IO_stdin_used+0x117d>
imul   $0x6973006c,0x61(%ebx),%esp
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%di)
gs
sub    $0x756c6f63,%eax
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
add    %ah,0x73(%ebp)
arpl   %sp,0x70(%ecx)
add    %ah,%gs:0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    805b591 <_IO_stdin_used+0x112d>
imul   $0x75660064,%fs:0x65(%edx),%esi
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x656d6974,%eax
add    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805b616 <_IO_stdin_used+0x11b2>
sub    $0x65726964,%eax
arpl   %si,0x72(%edi,%ebp,2)
imul   $0x7269662d,0x73(%ebp),%esp
jae    805b62c <_IO_stdin_used+0x11c8>
add    %ch,0x75(%eax)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
sub    $0x64616572,%eax
popa
bound  %ebp,0x0(%ebp,%eiz,2)
imul   $0x6b006564,0x6f(%esi),%ebp
imul   $0x65747962,0x69(%edx),%esp
jae    805b5d8 <_IO_stdin_used+0x1174>
outsb  %ds:(%esi),(%dx)
jne    805b648 <_IO_stdin_used+0x11e4>
gs
jb     805b647 <_IO_stdin_used+0x11e3>
arpl   %bp,0x2d646975
imul   $0x672d6f6e,0x0(%si),%esp
jb     805b65d <_IO_stdin_used+0x11f9>
jne    805b660 <_IO_stdin_used+0x11fc>
add    %ch,0x69(%eax)
fs
gs
sub    $0x746e6f63,%eax
jb     805b66b <_IO_stdin_used+0x1207>
insb   (%dx),%es:(%edi)
sub    $0x72616863,%eax
jae    805b604 <_IO_stdin_used+0x11a0>
jb     805b66b <_IO_stdin_used+0x1207>
jbe    805b66d <_IO_stdin_used+0x1209>
jb     805b67d <_IO_stdin_used+0x1219>
add    %dh,%gs:0x69(%edi)
fs
je     805b679 <_IO_stdin_used+0x1215>
add    %ah,0x6c(%ecx)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jae    805b68c <_IO_stdin_used+0x1228>
sub    $0x6c6c61,%eax
imul   $0x2d65726f,0x6e(%edi),%esp
bound  %esp,0x63(%ecx)
imul   $0x73,0x70(%ebp),%esi
add    %ah,0x6c(%ebx)
popa
jae    805b6a4 <_IO_stdin_used+0x1240>
imul   $0x6c696600,0x79(%esi),%esp
gs
sub    $0x65707974,%eax
add    %dh,0x69(%ebx)
add    %ah,0x72(%ebp,%eiz,2)
gs
data16
gs
jb     805b6af <_IO_stdin_used+0x124b>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2d(%ebp)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
sub    $0x656e696c,%eax
add    %ch,0x69(%eax)
fs add %ch,%fs:%gs:0x67(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     805b6cb <_IO_stdin_used+0x1267>
add    %ah,0x72(%ebp,%eiz,2)
gs
data16
gs
jb     805b6d4 <_IO_stdin_used+0x1270>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x0(%ebp)
insb   (%dx),%es:(%edi)
imul   $0x71006c61,0x72(%ebp,%eiz,2),%esi
jne    805b6ed <_IO_stdin_used+0x1289>
je     805b6e5 <_IO_stdin_used+0x1281>
sub    $0x656d616e,%eax
add    %dh,0x65(%edx)
arpl   %si,0x72(%ebp)
jae    805b6f6 <_IO_stdin_used+0x1292>
jbe    805b6f4 <_IO_stdin_used+0x1290>
add    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805b6c2 <_IO_stdin_used+0x125e>
arpl   %bp,0x6e(%edi)
je     805b70c <_IO_stdin_used+0x12a8>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    $0x72616863,%eax
jae    805b6a3 <_IO_stdin_used+0x123f>
je     805b706 <_IO_stdin_used+0x12a2>
bound  %esi,0x69(%ebx)
jp     805b70f <_IO_stdin_used+0x12ab>
add    %dh,0x6d(%ecx,%ebp,2)
gs
sub    $0x6c797473,%eax
add    %ah,%gs:0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x2d(%ebx)
jae    805b727 <_IO_stdin_used+0x12c3>
jp     805b725 <_IO_stdin_used+0x12c1>
add    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805b72b <_IO_stdin_used+0x12c7>
js     805b73c <_IO_stdin_used+0x12d8>
add    %ah,0x75(%ecx)
je     805b735 <_IO_stdin_used+0x12d1>
outsl  %ds:(%esi),(%dx)
jb     805b6d0 <_IO_stdin_used+0x126c>
push   $0x706c65
and    $0x65252062,%eax
and    %ah,(%eax)
and    $0x62250059,%eax
and    %ah,0x48252065
cmp    0x6d004d,%ah
xor    %dh,(%ecx)
cmp    (%ebx),%esi
xor    $0x0,%al
xor    %dh,(%ecx)
cmp    (%ebx),%esi
add    %dh,%ss:(%eax)
xor    %edi,(%ebx)
xor    0x3b313000,%esi
xor    (%ebx),%esi
add    %dh,(%eax)
xor    %edi,(%ebx)
xor    (%edx),%esi
add    %dh,(%ebx)
aaa
cmp    (%ecx,%esi,1),%esi
add    %dh,(%ebx)
xor    %bh,(%ebx)
xor    $0x33,%al
add    %dh,(%ebx)
aaa
cmp    (%esp,%esi,1),%esi
add    %dh,(%ebx)
xor    $0x3b,%al
xor    $0x32,%al
add    %dh,(%ebx)
xor    %bh,(%ebx)
xor    $0x32,%al
add    %dh,(%ebx)
xor    %bh,(%ebx)
xor    $0x31,%al
add    %bl,(%ebx)
pop    %ebx
dec    %ebx
add    %ch,0x0(%ebx,%eiz,2)
jb     805b79b <_IO_stdin_used+0x1337>
add    %ah,0x63(%ebp)
add    %ah,0x69(%esi)
add    %ah,0x0(%ecx,%ebp,2)
insb   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
add    %dh,0x69(%eax)
add    %ah,0x64(%edx)
add    %ah,0x64(%ebx)
add    %ch,0x69(%ebp)
add    %ah,0x78(%ebp)
add    %ah,0x0(%edi,%ebp,2)
jae    805b7ce <_IO_stdin_used+0x136a>
add    %dh,0x67(%ebx)
add    %ch,0x77(%edi)
add    %dh,0x0(%edi,%esi,2)
arpl   %sp,0x0(%ecx)
insl   (%dx),%es:(%edi)
push   $0x6c6300
jae    805b7da <_IO_stdin_used+0x1376>
popa
jae    805b7d9 <_IO_stdin_used+0x1375>
add    %ch,0x6e(%edi,%ebp,2)
addr16 sub $0x6f7369,%eax
add    %ch,(%eax)
sub    %ch,(%eax)
sub    %ch,(%eax)
jae    805b7ec <_IO_stdin_used+0x1388>
jp     805b7ea <_IO_stdin_used+0x1386>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%eax)
jne    805b7f4 <_IO_stdin_used+0x1390>
outsb  %ds:(%esi),(%dx)
je     805b7fb <_IO_stdin_used+0x1397>
popa
js     805b7f0 <_IO_stdin_used+0x138c>
je     805b7bc <_IO_stdin_used+0x1358>
and    %ch,(%edx)
and    %bh,(%eax)
and    %ch,0x20212820
sub    %ch,(%eax)
pop    %edi
pop    %edi
je     805b81c <_IO_stdin_used+0x13b8>
jo     805b80a <_IO_stdin_used+0x13a6>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
and    %ch,(%eax)
jne    805b816 <_IO_stdin_used+0x13b2>
outsb  %ds:(%esi),(%dx)
je     805b81d <_IO_stdin_used+0x13b9>
popa
js     805b812 <_IO_stdin_used+0x13ae>
je     805b7de <_IO_stdin_used+0x137a>
sub    %esp,(%eax)
xor    %ah,(%eax)
cmp    $0x20,%al
sub    %bl,0x5f(%edi)
je     805b839 <_IO_stdin_used+0x13d5>
jo     805b827 <_IO_stdin_used+0x13c3>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
and    %ch,(%eax)
jne    805b833 <_IO_stdin_used+0x13cf>
outsb  %ds:(%esi),(%dx)
je     805b83a <_IO_stdin_used+0x13d6>
popa
js     805b82f <_IO_stdin_used+0x13cb>
je     805b7fb <_IO_stdin_used+0x1397>
sub    %esp,(%eax)
sub    $0x29292931,%eax
and    %ch,(%edx)
and    %dh,(%ecx)
xor    $0x36,%al
and    %ch,(%ebx)
and    %dh,(%eax,%edi,1)
xor    $0x29,%al
and    %ch,(%edi)
and    %dh,(%eax,%edi,1)
xor    $0x202b2029,%eax
sub    %ah,(%ecx)
and    %ch,(%eax)
sub    %bl,0x5f(%edi)
je     805b872 <_IO_stdin_used+0x140e>
jo     805b860 <_IO_stdin_used+0x13fc>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
and    %ch,(%eax)
jne    805b86c <_IO_stdin_used+0x1408>
outsb  %ds:(%esi),(%dx)
je     805b873 <_IO_stdin_used+0x140f>
popa
js     805b868 <_IO_stdin_used+0x1404>
je     805b834 <_IO_stdin_used+0x13d0>
sub    %esp,(%eax)
xor    %ah,(%eax)
cmp    $0x20,%al
sub    %bl,0x5f(%edi)
je     805b88f <_IO_stdin_used+0x142b>
jo     805b87d <_IO_stdin_used+0x1419>
outsl  %ds:(%esi),(%dx)
pop    %di
pop    %edi
and    %ch,(%eax)
jne    805b889 <_IO_stdin_used+0x1425>
outsb  %ds:(%esi),(%dx)
je     805b890 <_IO_stdin_used+0x142c>
popa
js     805b885 <_IO_stdin_used+0x1421>
je     805b851 <_IO_stdin_used+0x13ed>
sub    %esp,(%eax)
sub    $0x29292931,%eax
and    %ch,(%ebx)
and    %dh,(%ecx)
sub    %esp,(%eax)
cmp    $0x3d,%al
and    %ah,0x75(%edx)
data16
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
add    %al,(%eax)
push   %esp
jb     805b8bc <_IO_stdin_used+0x1458>
and    %ah,(%edi)
and    $0x2d2d2073,%eax
push   $0x27706c65
and    %ah,0x6f(%esi)
jb     805b874 <_IO_stdin_used+0x1410>
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805b8bd <_IO_stdin_used+0x1459>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     805b8cc <_IO_stdin_used+0x1468>
popa
je     805b8cb <_IO_stdin_used+0x1467>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %dl,0x73(%ebp)
popa
cmp    %gs:(%bx,%si),%ah
and    $0x4f5b2073,%eax
push   %eax
push   %esp
dec    %ecx
dec    %edi
dec    %esi
pop    %ebp
cs cs and %bl,%cs:0x46(%ebx)
dec    %ecx
dec    %esp
inc    %ebp
pop    %ebp
cs cs or %cs:(%eax),%al
add    %al,(%eax)
add    %cl,0x73(%ecx,%ebp,2)
je     805b8b1 <_IO_stdin_used+0x144d>
imul   $0x616d726f,0x66(%esi),%ebp
je     805b903 <_IO_stdin_used+0x149f>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x62(%ecx)
outsl  %ds:(%esi),(%dx)
jne    805b916 <_IO_stdin_used+0x14b2>
and    %dh,0x65(%eax,%ebp,2)
and    %al,0x49(%esi)
dec    %esp
inc    %ebp
jae    805b8cd <_IO_stdin_used+0x1469>
sub    %dh,0x65(%eax,%ebp,2)
and    %ah,0x75(%ebx)
jb     805b928 <_IO_stdin_used+0x14c4>
outsb  %gs:(%esi),(%dx)
je     805b8da <_IO_stdin_used+0x1476>
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    805b8e4 <_IO_stdin_used+0x1480>
bound  %edi,0x20(%ecx)
fs
gs
popaw
jne    805b939 <_IO_stdin_used+0x14d5>
je     805b8f8 <_IO_stdin_used+0x1494>
or     %cs:0x6f(%ebx),%dl
jb     805b949 <_IO_stdin_used+0x14e5>
and    %ah,0x6e(%ebp)
je     805b94c <_IO_stdin_used+0x14e8>
imul   $0x706c6120,0x73(%ebp),%esp
push   $0x74656261
imul   $0x20796c6c,0x61(%ebx),%esp
imul   $0x656e6f6e,0x20(%esi),%esp
and    %ch,0x66(%edi)
and    %ch,0x75746663
jbe    805b952 <_IO_stdin_used+0x14ee>
push   %ebp
pop    %eax
and    %ch,0x6f(%esi)
jb     805b926 <_IO_stdin_used+0x14c2>
sub    $0x726f732d,%eax
je     805b92d <_IO_stdin_used+0x14c9>
imul   $0x63657073,0x20(%ebx),%esi
imul   $0xa2e6465,0x69(%esi),%esp
add    %cl,(%edx)
dec    %ebp
popa
outsb  %ds:(%esi),(%dx)
fs
popa
je     805b993 <_IO_stdin_used+0x152f>
jb     805b99f <_IO_stdin_used+0x153b>
and    %ah,0x72(%ecx)
addr16 jne 805b999 <_IO_stdin_used+0x1535>
outsb  %gs:(%esi),(%dx)
je     805b9a3 <_IO_stdin_used+0x153f>
and    %dh,0x20(%edi,%ebp,2)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x70(%bx)
je     805b9a6 <_IO_stdin_used+0x1542>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    805b961 <_IO_stdin_used+0x14fd>
popa
jb     805b9a9 <_IO_stdin_used+0x1545>
and    %ch,0x61(%ebp)
outsb  %ds:(%esi),(%dx)
fs
popa
je     805b9bb <_IO_stdin_used+0x1557>
jb     805b9c7 <_IO_stdin_used+0x1563>
and    %ah,0x6f(%esi)
jb     805b973 <_IO_stdin_used+0x150f>
jae    805b9bd <_IO_stdin_used+0x1559>
outsl  %ds:(%esi),(%dx)
jb     805b9cc <_IO_stdin_used+0x1568>
and    %ch,0x70(%edi)
je     805b9c6 <_IO_stdin_used+0x1562>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jae    805b981 <_IO_stdin_used+0x151d>
je     805b9d2 <_IO_stdin_used+0x156e>
outsl  %ds:(%esi),(%dx)
or     %cs:(%eax),%al
add    %ah,(%eax)
and    %ch,0x2d202c61
sub    $0x206c6c61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805b9ac <_IO_stdin_used+0x1548>
imul   $0x2065726f,0x6e(%edi),%esp
outsb  %gs:(%esi),(%dx)
je     805ba09 <_IO_stdin_used+0x15a5>
imul   $0x61747320,0x73(%ebp),%esp
jb     805ba14 <_IO_stdin_used+0x15b0>
imul   $0x74697720,0x67(%esi),%ebp
push   $0x200a2e20
and    %ch,0x2d202c41
sub    $0x6f6d6c61,%eax
jae    805ba2d <_IO_stdin_used+0x15c9>
sub    $0x206c6c61,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805b9ef <_IO_stdin_used+0x158b>
insb   (%dx),%es:(%edi)
imul   $0x706d6920,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x61202e20,0x64(%ebp),%esp
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:(%esi)
or     %cs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7475612d
push   $0x2020726f
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x69(%edi)
je     805ba6e <_IO_stdin_used+0x160a>
and    %ch,0x70202c6c
jb     805ba77 <_IO_stdin_used+0x1613>
outsb  %ds:(%esi),(%dx)
je     805ba31 <_IO_stdin_used+0x15cd>
je     805ba7b <_IO_stdin_used+0x1617>
and    %ah,%gs:0x75(%ecx)
je     805ba81 <_IO_stdin_used+0x161d>
outsl  %ds:(%esi),(%dx)
jb     805ba3c <_IO_stdin_used+0x15d8>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
imul   $0x2020,0xa(%ebp,%eiz,2),%bp
sub    $0x2d202c62,%eax
sub    $0x61637365,%eax
jo     805ba9c <_IO_stdin_used+0x1638>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x732d4320,0x74(%esi),%ebp
je     805baca <_IO_stdin_used+0x1666>
insb   (%dx),%es:(%edi)
and    %ah,%gs:0x73(%ebp)
arpl   %sp,0x70(%ecx)
gs
jae    805ba7c <_IO_stdin_used+0x1618>
outsw  %ds:(%esi),(%dx)
jb     805ba80 <_IO_stdin_used+0x161c>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
addr16 jb 805bac7 <_IO_stdin_used+0x1663>
jo     805bad0 <_IO_stdin_used+0x166c>
imul   $0x72616863,0x20(%ebx),%esp
popa
arpl   %si,0x72(%ebp,%eiz,2)
jae    805ba80 <_IO_stdin_used+0x161c>
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f6c622d,%eax
arpl   %bp,0x2d(%ebx)
jae    805baf1 <_IO_stdin_used+0x168d>
jp     805baef <_IO_stdin_used+0x168b>
cmp    $0x455a4953,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    805bafa <_IO_stdin_used+0x1696>
popa
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x69(%ebx)
jp     805bb04 <_IO_stdin_used+0x16a0>
jae    805bac1 <_IO_stdin_used+0x165d>
bound  %edi,0x20(%ecx)
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
and    %ah,0x65(%edx)
outsw  %ds:(%esi),(%dx)
jb     805bb14 <_IO_stdin_used+0x16b0>
and    %dh,0x72(%eax)
imul   $0x20676e69,0x74(%esi),%ebp
je     805bb23 <_IO_stdin_used+0x16bf>
gs
insl   (%dx),%es:(%edi)
and    %ah,%cs:(%eax)
inc    %ebp
cs
addr16
cs
sub    $0xa,%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%edi)
sub    $0x6f6c622d,%eax
arpl   %bp,0x2d(%ebx)
jae    805bb59 <_IO_stdin_used+0x16f5>
jp     805bb57 <_IO_stdin_used+0x16f3>
cmp    $0x7020274d,%eax
jb     805bb62 <_IO_stdin_used+0x16fe>
outsb  %ds:(%esi),(%dx)
je     805bb6f <_IO_stdin_used+0x170b>
and    %dh,0x69(%ebx)
jp     805bb66 <_IO_stdin_used+0x1702>
jae    805bb23 <_IO_stdin_used+0x16bf>
imul   $0x74696e75,0x20(%esi),%ebp
jae    805bb2c <_IO_stdin_used+0x16c8>
outsl  %ds:(%esi),(%dx)
data16
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
xor    %ebp,(%eax,%esi,1)
xor    $0x38,%al
sub    $0x35,%al
aaa
and    %ah,%ss:0x79(%edx)
je     805bba1 <_IO_stdin_used+0x173d>
jae    805bb6c <_IO_stdin_used+0x1708>
and    %ah,(%eax)
push   %ebx
gs and %dl,%gs:0x49(%ebx)
pop    %edx
inc    %ebp
and    %ah,0x6f(%esi)
jb     805bbba <_IO_stdin_used+0x1756>
popa
je     805bb70 <_IO_stdin_used+0x170c>
bound  %esp,0x6c(%ebp)
outsl  %ds:(%esi),(%dx)
ja     805bb84 <_IO_stdin_used+0x1720>
or     (%eax),%ah
and    %ch,0x2d202c42
sub    $0x6f6e6769,%eax
jb     805bbca <_IO_stdin_used+0x1766>
sub    $0x6b636162,%eax
jne    805bbdc <_IO_stdin_used+0x1778>
jae    805bb8e <_IO_stdin_used+0x172a>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805bb9b <_IO_stdin_used+0x1737>
insb   (%dx),%es:(%edi)
imul   $0x706d6920,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x64(%ebp),%esp
jb     805bbf6 <_IO_stdin_used+0x1792>
gs
jae    805bbb0 <_IO_stdin_used+0x174c>
outsb  %gs:(%esi),(%dx)
imul   $0x74697720,%fs:0x67(%esi),%ebp
push   $0x200a7e20
and    %ch,0x20202063
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
ja     805bc26 <_IO_stdin_used+0x17c2>
je     805bc27 <_IO_stdin_used+0x17c3>
and    %ch,0x203a746c
jae    805bc36 <_IO_stdin_used+0x17d2>
jb     805bc3d <_IO_stdin_used+0x17d9>
and    %ah,0x79(%edx)
sub    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805bc03 <_IO_stdin_used+0x179f>
and    %ah,0x74(%ebx)
imul   $0x69742820,0x65(%ebp),%ebp
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x66(%edi)
and    %ch,0x73(%ecx,%eiz,2)
je     805bbf6 <_IO_stdin_used+0x1792>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6f(%ebp)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x66(%edi)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x74(%ebx)
popa
je     805bc9a <_IO_stdin_used+0x1836>
jae    805bc47 <_IO_stdin_used+0x17e3>
imul   $0x616d726f,0x66(%esi),%ebp
je     805bc99 <_IO_stdin_used+0x1835>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    %ecx,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x69(%edi)
je     805bcbf <_IO_stdin_used+0x185b>
and    %ch,0x73203a6c
push   $0x6320776f
je     805bccd <_IO_stdin_used+0x1869>
insl   (%dx),%es:(%edi)
and    %ah,%gs:0x6e(%ecx)
and    %dh,%fs:0x6f(%ebx)
jb     805bce3 <_IO_stdin_used+0x187f>
and    %ah,0x79(%edx)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
je     805bd02 <_IO_stdin_used+0x189e>
gs
jb     805bd14 <_IO_stdin_used+0x18b0>
imul   $0x6f73203a,0x65(%ebx),%esi
jb     805bd1a <_IO_stdin_used+0x18b6>
and    %ah,0x79(%edx)
and    %ah,0x74(%ebx)
imul   $0x656e202c,0x65(%ebp),%ebp
ja     805bd1a <_IO_stdin_used+0x18b6>
jae    805bd2b <_IO_stdin_used+0x18c7>
and    %ah,0x69(%esi)
jb     805bd2f <_IO_stdin_used+0x18cb>
je     805bcc8 <_IO_stdin_used+0x1864>
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x20202043,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x74(%ebx),%esi
jb     805bd50 <_IO_stdin_used+0x18ec>
gs
jae    805bd0a <_IO_stdin_used+0x18a6>
bound  %edi,0x20(%ecx)
arpl   %bp,0x6c(%edi)
jne    805bd5f <_IO_stdin_used+0x18fb>
outsb  %ds:(%esi),(%dx)
jae    805bcff <_IO_stdin_used+0x189b>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6c6f632d,%eax
outsl  %ds:(%esi),(%dx)
jb     805bd5e <_IO_stdin_used+0x18fa>
cmp    $0x4e454857,%eax
pop    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6f(%ebx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805bd81 <_IO_stdin_used+0x191d>
jp     805bd7f <_IO_stdin_used+0x191b>
and    %dh,0x65(%eax,%ebp,2)
and    %ch,0x75(%edi)
je     805bd93 <_IO_stdin_used+0x192f>
jne    805bd99 <_IO_stdin_used+0x1935>
and    %ah,%cs:(%eax)
push   %edi
dec    %eax
inc    %ebp
dec    %esi
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    805bd9f <_IO_stdin_used+0x193b>
je     805bda8 <_IO_stdin_used+0x1944>
and    %dh,0x20(%edi,%ebp,2)
daa
popa
insb   (%dx),%es:(%edi)
ja     805bd9f <_IO_stdin_used+0x193b>
jns    805bdb3 <_IO_stdin_used+0x194f>
daa
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805bd84 <_IO_stdin_used+0x1920>
arpl   %sp,0x6e(%ecx)
and    %ah,0x65(%edx)
and    %ah,(%edi)
outsb  %ds:(%esi),(%dx)
gs
jbe    805bdd5 <_IO_stdin_used+0x1971>
jb     805bd99 <_IO_stdin_used+0x1935>
and    %ch,0x72(%edi)
and    %ah,(%edi)
popa
jne    805bdee <_IO_stdin_used+0x198a>
outsl  %ds:(%esi),(%dx)
daa
and    %ah,%cs:(%eax)
dec    %ebp
outsl  %ds:(%esi),(%dx)
jb     805bde8 <_IO_stdin_used+0x1984>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
and    %ah,0x65(%edx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805bd99 <_IO_stdin_used+0x1935>
and    %ah,(%eax)
sub    $0x2d202c64,%eax
sub    $0x65726964,%eax
arpl   %si,0x72(%edi,%ebp,2)
jns    805bdc1 <_IO_stdin_used+0x195d>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x73(%ecx,%ebp,2)
je     805bdd1 <_IO_stdin_used+0x196d>
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    805bddb <_IO_stdin_used+0x1977>
outsb  %gs:(%esi),(%dx)
je     805be31 <_IO_stdin_used+0x19cd>
imul   $0x736e6920,0x73(%ebp),%esp
je     805be2d <_IO_stdin_used+0x19c9>
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
je     805be38 <_IO_stdin_used+0x19d4>
outsb  %ds:(%esi),(%dx)
je     805be49 <_IO_stdin_used+0x19e5>
sub    $0xa,%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805be22 <_IO_stdin_used+0x19be>
fs
gs
jb     805be6b <_IO_stdin_used+0x1a07>
data16
gs
jb     805be6f <_IO_stdin_used+0x1a0b>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
jae    805be89 <_IO_stdin_used+0x1a25>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    805be27 <_IO_stdin_used+0x19c3>
and    %ah,(%eax)
sub    $0x2d202c44,%eax
sub    $0x65726964,%eax
and    %ah,%fs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %gs:(%si),(%dx)
gs
jb     805bea1 <_IO_stdin_used+0x1a3d>
je     805bea7 <_IO_stdin_used+0x1a43>
and    %ch,0x75(%edi)
je     805beb7 <_IO_stdin_used+0x1a53>
jne    805bebd <_IO_stdin_used+0x1a59>
and    %ah,0x73(%ebp,%eiz,2)
imul   $0x66206465,0x6e(%edi),%esp
outsl  %ds:(%esi),(%dx)
jb     805be77 <_IO_stdin_used+0x1a13>
inc    %ebp
insl   (%dx),%es:(%edi)
popa
arpl   %si,0x27(%ebx)
and    %ah,0x72(%ecx,%ebp,2)
gs and %ch,%fs:%gs:0x6f(%ebp)
fs or  %fs:%gs:(%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x20202066,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805beb0 <_IO_stdin_used+0x1a4c>
jae    805bf01 <_IO_stdin_used+0x1a9d>
jb     805bf08 <_IO_stdin_used+0x1aa4>
sub    $0x20,%al
outsb  %gs:(%esi),(%dx)
popa
bound  %ebp,0x20(%ebp,%eiz,2)
sub    $0x202c5561,%eax
imul   $0x20656c62,%fs:0x61(%ebx),%esi
sub    $0x2d20736c,%eax
sub    $0x6f6c6f63,%eax
jb     805bec0 <_IO_stdin_used+0x1a5c>
and    %ah,(%eax)
sub    $0x2d202c46,%eax
sub    $0x73616c63,%eax
jae    805bf2d <_IO_stdin_used+0x1ac9>
data16
jns    805bee7 <_IO_stdin_used+0x1a83>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
popa
jo     805bf46 <_IO_stdin_used+0x1ae2>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx)
imul   $0x20726f74,%fs:0x61(%ebx),%esp
sub    %ch,0x6e(%edi)
and    %ch,%gs:0x66(%edi)
and    %ch,(%edx)
das
cmp    $0x297c403e,%eax
and    %dh,0x20(%edi,%ebp,2)
outsb  %gs:(%esi),(%dx)
je     805bf6d <_IO_stdin_used+0x1b09>
imul   $0x2020200a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ch,0x6c69662d
gs
sub    $0x65707974,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x65736977,0x65(%ebx),%ebp
sub    $0x20,%al
gs
js     805bf8c <_IO_stdin_used+0x1b28>
gs
jo     805bfa0 <_IO_stdin_used+0x1b3c>
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805bf54 <_IO_stdin_used+0x1af0>
popa
jo     805bfa7 <_IO_stdin_used+0x1b43>
outsb  %gs:(%esi),(%dx)
and    %ah,%fs:(%edi)
sub    (%edi),%ah
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x726f662d
insl   (%dx),%es:(%edi)
popa
je     805bf8b <_IO_stdin_used+0x1b27>
push   %edi
dec    %edi
push   %edx
inc    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
popa
arpl   %si,0x6f(%edx)
jae    805bfd5 <_IO_stdin_used+0x1b71>
and    %ch,0x63202c78
outsl  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
jae    805bf8e <_IO_stdin_used+0x1b2a>
sub    $0x68202c6d,%eax
outsl  %ds:(%esi),(%dx)
jb     805bfdf <_IO_stdin_used+0x1b7b>
jp     805bfe7 <_IO_stdin_used+0x1b83>
outsb  %ds:(%esi),(%dx)
je     805bfdc <_IO_stdin_used+0x1b78>
insb   (%dx),%es:(%edi)
and    %ch,0x6c202c78
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,(%di)
insb   (%dx),%es:(%edi)
sub    $0xa,%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x69(%ebx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%di)
gs
sub    $0x756c6f63,%eax
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
and    %ch,0x76202c31
gs
jb     805c021 <_IO_stdin_used+0x1bbd>
outsl  %ds:(%esi),(%dx)
jae    805c027 <_IO_stdin_used+0x1bc3>
and    %ch,0x76202c6c
gs
jb     805c03f <_IO_stdin_used+0x1bdb>
imul   $0x432d206c,0x61(%ebx),%esp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c75662d
insb   (%dx),%es:(%edi)
sub    $0x656d6974,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x206c2d20,0x65(%ebx),%ebp
sub    $0x6d69742d,%eax
gs
sub    $0x6c797473,%eax
gs
cmp    $0x6c6c7566,%eax
sub    $0xa6f7369,%eax
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x20202067,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x2c6c2d20,0x65(%ebx),%ebp
and    %ah,0x75(%edx)
je     805c05a <_IO_stdin_used+0x1bf6>
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805c061 <_IO_stdin_used+0x1bfd>
insb   (%dx),%es:(%edi)
imul   $0x6e776f20,0x74(%ebx),%esi
gs
jb     805c056 <_IO_stdin_used+0x1bf2>
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f72672d,%eax
jne    805c0cd <_IO_stdin_used+0x1c69>
sub    $0x65726964,%eax
arpl   %si,0x72(%edi,%ebp,2)
imul   $0x7269662d,0x73(%ebp),%esp
jae    805c0e3 <_IO_stdin_used+0x1c7f>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
addr16 jb 805c0ff <_IO_stdin_used+0x1c9b>
jne    805c102 <_IO_stdin_used+0x1c9e>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0x66656220,0x73(%ebp),%esp
outsl  %ds:(%esi),(%dx)
jb     805c10a <_IO_stdin_used+0x1ca6>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
jae    805c0da <_IO_stdin_used+0x1c76>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
popa
jne    805c136 <_IO_stdin_used+0x1cd2>
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805c0f4 <_IO_stdin_used+0x1c90>
ja     805c13f <_IO_stdin_used+0x1cdb>
je     805c140 <_IO_stdin_used+0x1cdc>
and    %ah,0x20(%ecx)
sub    $0x726f732d,%eax
je     805c102 <_IO_stdin_used+0x1c9e>
outsl  %ds:(%esi),(%dx)
jo     805c159 <_IO_stdin_used+0x1cf5>
imul   $0x7562202c,0x6e(%edi),%ebp
je     805c10e <_IO_stdin_used+0x1caa>
popa
outsb  %ds:(%esi),(%dx)
jns    805c0fc <_IO_stdin_used+0x1c98>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %ch,%gs:0x66(%edi)
and    %ch,0x726f732d
je     805c15c <_IO_stdin_used+0x1cf8>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%eax)
sub    $0x64202955,%eax
imul   $0x73656c62,0x61(%ebx),%esi
and    %ah,0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805c1a7 <_IO_stdin_used+0x1d43>
imul   $0x2020000a,0x67(%esi),%ebp
sub    $0x2d202c47,%eax
sub    $0x672d6f6e,%eax
jb     805c1b9 <_IO_stdin_used+0x1d55>
jne    805c1bc <_IO_stdin_used+0x1d58>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6e(%ecx)
and    %ah,0x20(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x69(%si)
jae    805c1db <_IO_stdin_used+0x1d77>
imul   $0x6f64202c,0x67(%esi),%ebp
outsb  %ds:(%esi),(%dx)
daa
je     805c192 <_IO_stdin_used+0x1d2e>
jo     805c1e6 <_IO_stdin_used+0x1d82>
imul   $0x6f726720,0x74(%esi),%ebp
jne    805c1ed <_IO_stdin_used+0x1d89>
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
gs
jae    805c18e <_IO_stdin_used+0x1d2a>
and    %ah,(%eax)
sub    $0x2d202c68,%eax
sub    $0x616d7568,%eax
outsb  %ds:(%esi),(%dx)
sub    $0x64616572,%eax
popa
bound  %ebp,0x20(%ebp,%eiz,2)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
ja     805c20c <_IO_stdin_used+0x1da8>
je     805c20d <_IO_stdin_used+0x1da9>
and    %ch,0x70202c6c
jb     805c216 <_IO_stdin_used+0x1db2>
outsb  %ds:(%esi),(%dx)
je     805c1d0 <_IO_stdin_used+0x1d6c>
jae    805c21b <_IO_stdin_used+0x1db7>
jp     805c219 <_IO_stdin_used+0x1db5>
jae    805c1d6 <_IO_stdin_used+0x1d72>
imul   $0x616d7568,0x20(%esi),%ebp
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%edx)
popa
fs
popa
bound  %ebp,0x20(%ebp,%eiz,2)
outsw  %ds:(%esi),(%dx)
jb     805c239 <_IO_stdin_used+0x1dd5>
popa
je     805c1d9 <_IO_stdin_used+0x1d75>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
xor    %ecx,0x20(%ebx)
xor    (%ebx),%dh
xor    $0x4d,%al
and    %dh,(%edx)
inc    %edi
sub    %ecx,(%edx)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x2069732d,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x65736977,0x65(%ebx),%ebp
sub    $0x20,%al
bound  %esi,0x74(%ebp)
and    %dh,0x73(%ebp)
and    %dh,%gs:0x6f(%eax)
ja     805c299 <_IO_stdin_used+0x1e35>
jb     805c2a9 <_IO_stdin_used+0x1e45>
and    %ch,0x66(%edi)
and    %dh,(%ecx)
xor    %dh,(%eax)
xor    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805c263 <_IO_stdin_used+0x1dff>
xor    %esi,(%eax)
xor    (%edx,%ecx,1),%dh
add    %al,(%eax)
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x2d202c48,%eax
sub    $0x65726564,%eax
data16
gs
jb     805c2c1 <_IO_stdin_used+0x1e5d>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2d(%ebp)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
sub    $0x656e696c,%eax
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsw  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805c2b1 <_IO_stdin_used+0x1e4d>
jae    805c30c <_IO_stdin_used+0x1ea8>
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
jae    805c2c0 <_IO_stdin_used+0x1e5c>
insb   (%dx),%es:(%edi)
imul   $0x6f206465,0x74(%ebx),%esi
outsb  %ds:(%esi),(%dx)
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265642d
gs
data16
gs
jb     805c330 <_IO_stdin_used+0x1ecc>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2d(%ebp)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
sub    $0x656e696c,%eax
sub    $0x6c6d7973,%eax
imul   $0x2d6f742d,0x6b(%esi),%ebp
imul   $0x20202020,%fs:0xa(%edx),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6f(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
ja     805c32f <_IO_stdin_used+0x1ecb>
gs
popa
arpl   %bp,0x20(%eax)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx,%ebp,2)
and    %dh,%gs:0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x6b6e696c,0x20(%ebx),%esp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     805c3b6 <_IO_stdin_used+0x1f52>
popa
je     805c371 <_IO_stdin_used+0x1f0d>
jo     805c3c2 <_IO_stdin_used+0x1f5e>
imul   $0x6f742073,0x74(%esi),%ebp
and    %ah,0x20(%ecx)
imul   $0x726f7463,%fs:0x65(%edx),%esi
jns    805c371 <_IO_stdin_used+0x1f0d>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6469682d,%eax
gs
cmp    $0x54544150,%eax
inc    %ebp
push   %edx
dec    %esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805c3ab <_IO_stdin_used+0x1f47>
insb   (%dx),%es:(%edi)
imul   $0x706d6920,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x64(%ebp),%esp
jb     805c406 <_IO_stdin_used+0x1fa2>
gs
jae    805c3c0 <_IO_stdin_used+0x1f5c>
insl   (%dx),%es:(%edi)
popa
je     805c407 <_IO_stdin_used+0x1fa3>
push   $0x20676e69
jae    805c413 <_IO_stdin_used+0x1faf>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dl,0x41(%eax)
push   %esp
push   %esp
inc    %ebp
push   %edx
dec    %esi
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    %ch,0x76(%edi)
gs
jb     805c44e <_IO_stdin_used+0x1fea>
imul   $0x7962206e,0x65(%esp,%eiz,2),%esp
and    %ch,0x726f2061
and    %ch,0xa2941
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x646e692d,%eax
imul   $0x2d726f74,0x61(%ebx),%esp
jae    805c478 <_IO_stdin_used+0x2014>
jns    805c472 <_IO_stdin_used+0x200e>
gs
cmp    $0x44524f57,%eax
and    %ah,(%eax)
popa
jo     805c481 <_IO_stdin_used+0x201d>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:0x6e(%ecx)
imul   $0x20726f74,%fs:0x61(%ebx),%esp
ja     805c48a <_IO_stdin_used+0x2026>
je     805c48b <_IO_stdin_used+0x2027>
and    %dh,0x74(%ebx)
jns    805c494 <_IO_stdin_used+0x2030>
and    %dl,%gs:0x4f(%edi)
push   %edx
inc    %esp
and    %dh,0x20(%edi,%ebp,2)
outsb  %gs:(%esi),(%dx)
je     805c4a8 <_IO_stdin_used+0x2044>
jns    805c458 <_IO_stdin_used+0x1ff4>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
jae    805c478 <_IO_stdin_used+0x2014>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:(%eax)
fs
gs
popaw
jne    805c4d6 <_IO_stdin_used+0x2072>
je     805c495 <_IO_stdin_used+0x2031>
sub    $0x20,%al
jae    805c4dc <_IO_stdin_used+0x2078>
popa
jae    805c4db <_IO_stdin_used+0x2077>
and    %ch,(%eax)
sub    $0xa2c2970,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
gs
sub    $0x65707974,%eax
and    %ch,(%eax)
sub    $0x6c69662d,%eax
gs
sub    $0x65707974,%eax
sub    %ebp,(%eax,%eiz,1)
arpl   %bp,0x73(%ecx,%eiz,2)
jae    805c521 <_IO_stdin_used+0x20bd>
data16
jns    805c4db <_IO_stdin_used+0x2077>
sub    %ch,0x200a2946
and    %ch,0x2d202c69
sub    $0x646f6e69,%eax
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     805c551 <_IO_stdin_used+0x20ed>
imul   $0x65687420,0x74(%esi),%ebp
and    %ch,0x6e(%ecx)
fs
gs
js     805c50d <_IO_stdin_used+0x20a9>
outsb  %ds:(%esi),(%dx)
jne    805c55d <_IO_stdin_used+0x20f9>
bound  %esp,0x72(%ebp)
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
imul   $0x2020,0xa(%ebp,%eiz,2),%bp
sub    $0x2d202c49,%eax
sub    $0x6f6e6769,%eax
jb     805c574 <_IO_stdin_used+0x2110>
cmp    $0x54544150,%eax
inc    %ebp
push   %edx
dec    %esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x20(%edi,%ebp,2)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805c545 <_IO_stdin_used+0x20e1>
insb   (%dx),%es:(%edi)
imul   $0x706d6920,0x74(%ebx),%esi
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x64(%ebp),%esp
jb     805c5a0 <_IO_stdin_used+0x213c>
gs
jae    805c55a <_IO_stdin_used+0x20f6>
insl   (%dx),%es:(%edi)
popa
je     805c5a1 <_IO_stdin_used+0x213d>
push   $0x20676e69
jae    805c5ad <_IO_stdin_used+0x2149>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
and    %dl,0x41(%eax)
push   %esp
push   %esp
inc    %ebp
push   %edx
dec    %esi
or     (%eax),%ah
and    %ch,0x2d202c6b
sub    $0x6962696b,%eax
bound  %edi,0x74(%ecx)
gs
jae    805c583 <_IO_stdin_used+0x211f>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %dh,%gs:(%ecx)
xor    %dh,(%edx)
xor    $0x2d,%al
bound  %edi,0x74(%ecx)
and    %ah,%gs:0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
or     (%eax),%al
and    %ah,(%eax)
sub    $0x2020206c,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jne    805c616 <_IO_stdin_used+0x21b2>
and    %ah,%gs:0x20(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x69(%si)
jae    805c624 <_IO_stdin_used+0x21c0>
imul   $0x726f6620,0x67(%esi),%ebp
insl   (%dx),%es:(%edi)
popa
je     805c5c5 <_IO_stdin_used+0x2161>
and    %ah,(%eax)
sub    $0x2d202c4c,%eax
sub    $0x65726564,%eax
data16
gs
jb     805c630 <_IO_stdin_used+0x21cc>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x20(%ebp)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x68(%edi)
outsb  %gs:(%esi),(%dx)
and    %dh,0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805c64b <_IO_stdin_used+0x21e7>
outsb  %ds:(%esi),(%dx)
and    %ah,0x69(%bp)
insb   (%dx),%es:(%edi)
and    %ch,%gs:0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     805c65d <_IO_stdin_used+0x21f9>
popa
je     805c65c <_IO_stdin_used+0x21f8>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     805c61a <_IO_stdin_used+0x21b6>
popa
and    %dh,0x79(%ebx)
insl   (%dx),%es:(%edi)
bound  %ebp,0x6c(%edi)
imul   $0x20202020,0xa(%ebx),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6e(%ecx,%ebp,2)
imul   $0x73,(%eax,%eiz,1),%ebp
push   $0x6920776f
outsb  %ds:(%esi),(%dx)
outsw  %ds:(%esi),(%dx)
jb     805c6a2 <_IO_stdin_used+0x223e>
popa
je     805c6a1 <_IO_stdin_used+0x223d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     805c65f <_IO_stdin_used+0x21fb>
je     805c6a9 <_IO_stdin_used+0x2245>
and    %ah,%gs:0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x65(%eax,%ebp,2)
and    %ch,0x6e(%ecx,%ebp,2)
imul   $0x20,(%edx),%ecx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jb     805c6d7 <_IO_stdin_used+0x2273>
data16
gs
jb     805c6db <_IO_stdin_used+0x2277>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x73(%ebp)
and    %dh,0x61(%edx)
je     805c6e7 <_IO_stdin_used+0x2283>
gs
jb     805c6a2 <_IO_stdin_used+0x223e>
je     805c6ec <_IO_stdin_used+0x2288>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%esi)
jb     805c6ab <_IO_stdin_used+0x2247>
je     805c6f5 <_IO_stdin_used+0x2291>
and    %ch,%gs:0x6e(%ecx,%ebp,2)
imul   $0x69,(%eax),%esp
je     805c70a <_IO_stdin_used+0x22a6>
gs
insb   (%dx),%es:(%edi)
data16
or     (%eax),%ah
and    %ch,0x2020206d
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x6977,0x20(%esp,%ebp,2),%bp
fs
je     805c72a <_IO_stdin_used+0x22c6>
and    %dh,0x69(%edi)
je     805c72f <_IO_stdin_used+0x22cb>
and    %ah,0x20(%ecx)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
and    %dh,0x65(%ebx)
jo     805c735 <_IO_stdin_used+0x22d1>
jb     805c737 <_IO_stdin_used+0x22d3>
je     805c73d <_IO_stdin_used+0x22d9>
and    %ch,%fs:0x73(%ecx,%ebp,2)
je     805c6ff <_IO_stdin_used+0x229b>
outsl  %ds:(%esi),(%dx)
data16
and    %ah,0x6e(%ebp)
je     805c758 <_IO_stdin_used+0x22f4>
imul   $0x2000000a,0x73(%ebp),%esp
and    %ch,0x2d202c6e
sub    $0x656d756e,%eax
jb     805c763 <_IO_stdin_used+0x22ff>
arpl   %bp,0x2d646975
imul   $0x20202020,0x20(%si),%esp
and    %ch,0x6b(%ecx,%ebp,2)
and    %ch,%gs:0x62202c6c
jne    805c789 <_IO_stdin_used+0x2325>
and    %ch,0x73(%ecx,%ebp,2)
je     805c73b <_IO_stdin_used+0x22d7>
outsb  %ds:(%esi),(%dx)
jne    805c78b <_IO_stdin_used+0x2327>
gs
jb     805c78a <_IO_stdin_used+0x2326>
arpl   %sp,(%eax)
jne    805c798 <_IO_stdin_used+0x2334>
gs
jb     805c748 <_IO_stdin_used+0x22e4>
popa
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0x72(%edi)
outsl  %ds:(%esi),(%dx)
jne    805c7a1 <_IO_stdin_used+0x233d>
and    %cl,0x44(%ecx)
jae    805c740 <_IO_stdin_used+0x22dc>
and    %ah,(%eax)
sub    $0x2d202c4e,%eax
sub    $0x6574696c,%eax
jb     805c7a5 <_IO_stdin_used+0x2341>
insb   (%dx),%es:(%edi)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     805c7c7 <_IO_stdin_used+0x2363>
imul   $0x77617220,0x74(%esi),%ebp
and    %ah,0x6e(%ebp)
je     805c7d3 <_IO_stdin_used+0x236f>
jns    805c783 <_IO_stdin_used+0x231f>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
jae    805c789 <_IO_stdin_used+0x2325>
sub    %ah,0x6e(%edi,%ebp,2)
daa
je     805c790 <_IO_stdin_used+0x232c>
je     805c7e4 <_IO_stdin_used+0x2380>
gs
popa
je     805c796 <_IO_stdin_used+0x2332>
gs cs and %ah,%cs:%gs:0x6f(%bp,%di)
outsb  %ds:(%esi),(%dx)
je     805c7f2 <_IO_stdin_used+0x238e>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
arpl   %bp,0x61(%eax)
jb     805c808 <_IO_stdin_used+0x23a4>
arpl   %si,0x72(%ebp,%eiz,2)
jae    805c7cd <_IO_stdin_used+0x2369>
jae    805c81f <_IO_stdin_used+0x23bb>
arpl   %bp,%gs:0x61(%ecx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
jns    805c7e0 <_IO_stdin_used+0x237c>
or     (%eax),%ah
and    %ch,0x2020206f
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x2c6c2d20,0x65(%ebx),%ebp
and    %ah,0x75(%edx)
je     805c802 <_IO_stdin_used+0x239e>
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805c809 <_IO_stdin_used+0x23a5>
insb   (%dx),%es:(%edi)
imul   $0x6f726720,0x74(%ebx),%esi
jne    805c863 <_IO_stdin_used+0x23ff>
and    %ch,0x6e(%ecx)
outsw  %ds:(%esi),(%dx)
jb     805c867 <_IO_stdin_used+0x2403>
popa
je     805c866 <_IO_stdin_used+0x2402>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ch,0x2d202c70
sub    $0x69646e69,%eax
arpl   %sp,0x74(%ecx)
outsl  %ds:(%esi),(%dx)
jb     805c83f <_IO_stdin_used+0x23db>
jae    805c888 <_IO_stdin_used+0x2424>
jns    805c882 <_IO_stdin_used+0x241e>
gs
cmp    $0x73616c73,%eax
push   $0x2020200a
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
popa
jo     805c8ae <_IO_stdin_used+0x244a>
outsb  %gs:(%esi),(%dx)
and    %ch,%fs:(%edi)
and    %ch,0x6e(%ecx)
imul   $0x20726f74,%fs:0x61(%ebx),%esp
je     805c8bf <_IO_stdin_used+0x245b>
and    %ah,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
imul   $0xa,0x73(%ebp),%esp
and    %ah,(%eax)
sub    $0x2d202c71,%eax
sub    $0x65646968,%eax
sub    $0x746e6f63,%eax
jb     805c8e2 <_IO_stdin_used+0x247e>
insb   (%dx),%es:(%edi)
sub    $0x72616863,%eax
jae    805c89b <_IO_stdin_used+0x2437>
and    %ah,(%eax)
jo     805c8f1 <_IO_stdin_used+0x248d>
imul   $0x69203f20,0x74(%esi),%ebp
outsb  %ds:(%esi),(%dx)
jae    805c8fd <_IO_stdin_used+0x2499>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%edi)
popa
jo     805c901 <_IO_stdin_used+0x249d>
imul   $0x72616863,0x20(%ebx),%esp
popa
arpl   %si,0x72(%ebp,%eiz,2)
jae    805c8b1 <_IO_stdin_used+0x244d>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f68732d,%eax
ja     805c8e1 <_IO_stdin_used+0x247d>
arpl   %bp,0x6e(%edi)
je     805c92b <_IO_stdin_used+0x24c7>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
sub    $0x72616863,%eax
jae    805c8e2 <_IO_stdin_used+0x247e>
and    %ah,(%eax)
jae    805c92e <_IO_stdin_used+0x24ca>
outsl  %ds:(%esi),(%dx)
ja     805c8e9 <_IO_stdin_used+0x2485>
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x72(%edi)
popa
jo     805c93a <_IO_stdin_used+0x24d6>
imul   $0x72616863,0x20(%ebx),%esp
popa
arpl   %si,0x72(%ebp,%eiz,2)
jae    805c900 <_IO_stdin_used+0x249c>
popa
jae    805c910 <_IO_stdin_used+0x24ac>
imul   $0x66656428,0x20(%ebx),%esi
popa
jne    805c959 <_IO_stdin_used+0x24f5>
je     805c8f9 <_IO_stdin_used+0x2495>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x6e(%ebp)
insb   (%dx),%es:(%edi)
gs
jae    805c985 <_IO_stdin_used+0x2521>
and    %dh,0x72(%eax)
outsl  %ds:(%esi),(%dx)
addr16 jb 805c97a <_IO_stdin_used+0x2516>
insl   (%dx),%es:(%edi)
and    %ch,0x73(%ecx)
and    %ah,(%edi)
insb   (%dx),%es:(%edi)
jae    805c949 <_IO_stdin_used+0x24e5>
and    %ah,0x6e(%ecx)
and    %ch,%fs:0x75(%edi)
je     805c99b <_IO_stdin_used+0x2537>
jne    805c9a1 <_IO_stdin_used+0x253d>
and    %ch,0x73(%ecx)
and    %ah,0x20(%ecx)
je     805c99a <_IO_stdin_used+0x2536>
jb     805c9a4 <_IO_stdin_used+0x2540>
imul   $0x200a296c,0x61(%esi),%ebp
and    %ch,0x2d202c51
sub    $0x746f7571,%eax
gs
sub    $0x656d616e,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x6e(%ebp)
arpl   %bp,0x73(%edi,%ebp,2)
and    %ah,%gs:0x6e(%ebp)
je     805c9d8 <_IO_stdin_used+0x2574>
jns    805c988 <_IO_stdin_used+0x2524>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
jae    805c98e <_IO_stdin_used+0x252a>
imul   $0x62756f64,0x20(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x75(%ecx)
outsl  %ds:(%esi),(%dx)
je     805c9e2 <_IO_stdin_used+0x257e>
jae    805c989 <_IO_stdin_used+0x2525>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6f75712d,%eax
je     805c9f5 <_IO_stdin_used+0x2591>
outsb  %ds:(%esi),(%dx)
addr16 sub $0x6c797473,%eax
gs
cmp    $0x44524f57,%eax
and    %ah,(%eax)
and    %dh,0x73(%ebp)
and    %dh,%gs:0x75(%ecx)
outsl  %ds:(%esi),(%dx)
je     805ca0e <_IO_stdin_used+0x25aa>
outsb  %ds:(%esi),(%dx)
and    %dh,0x74(%bp,%di)
jns    805ca18 <_IO_stdin_used+0x25b4>
and    %dl,%gs:0x4f(%edi)
push   %edx
inc    %esp
and    %ah,0x6f(%esi)
jb     805c9d7 <_IO_stdin_used+0x2573>
outsb  %gs:(%esi),(%dx)
je     805ca2d <_IO_stdin_used+0x25c9>
jns    805c9dd <_IO_stdin_used+0x2579>
outsb  %ds:(%esi),(%dx)
popa
insl   (%dx),%es:(%edi)
gs
jae    805c9fd <_IO_stdin_used+0x2599>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x202c6c61,0x72(%ebp,%eiz,2),%esi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
sub    $0x20,%al
jae    805ca5e <_IO_stdin_used+0x25fa>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x20,%al
jae    805ca65 <_IO_stdin_used+0x2601>
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    805ca7a <_IO_stdin_used+0x2616>
sub    $0x20,%al
arpl   %bp,(%eax,%eiz,1)
gs
jae    805ca72 <_IO_stdin_used+0x260e>
popa
jo     805ca77 <_IO_stdin_used+0x2613>
or     (%eax),%al
and    %ah,(%eax)
sub    $0x2d202c72,%eax
sub    $0x65766572,%eax
jb     805ca95 <_IO_stdin_used+0x2631>
and    %ah,%gs:(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jb     805ca98 <_IO_stdin_used+0x2634>
jbe    805ca9a <_IO_stdin_used+0x2636>
jb     805caaa <_IO_stdin_used+0x2646>
and    %ch,%gs:0x72(%edi)
fs
gs
jb     805ca5f <_IO_stdin_used+0x25fb>
ja     805caa9 <_IO_stdin_used+0x2645>
imul   $0x74726f73,0x20(%ebp,%eiz,2),%ebp
imul   $0x2d20200a,0x67(%esi),%ebp
push   %edx
sub    $0x20,%al
sub    $0x6365722d,%eax
jne    805cacc <_IO_stdin_used+0x2668>
jae    805cac5 <_IO_stdin_used+0x2661>
jbe    805cac3 <_IO_stdin_used+0x265f>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x62757320,0x74(%ebx),%esi
imul   $0x726f7463,%fs:0x65(%edx),%esi
imul   $0x63657220,0x73(%ebp),%esp
jne    805caf5 <_IO_stdin_used+0x2691>
jae    805caee <_IO_stdin_used+0x268a>
jbe    805caec <_IO_stdin_used+0x2688>
insb   (%dx),%es:(%edi)
jns    805ca94 <_IO_stdin_used+0x2630>
and    %ah,(%eax)
sub    $0x2d202c73,%eax
sub    $0x657a6973,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x72(%eax)
imul   $0x65687420,0x74(%esi),%ebp
and    %ah,0x6c(%ecx)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x74(%ecx)
gs and %dh,%fs:%gs:0x69(%ebx)
jp     805cb24 <_IO_stdin_used+0x26c0>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
imul   $0x6920,0x2c(%ebp,%eiz,2),%bp
outsb  %ds:(%esi),(%dx)
and    %ah,0x6c(%edx)
outsl  %ds:(%esi),(%dx)
arpl   %bp,0x73(%ebx)
or     (%eax),%al
add    %al,(%eax)
add    %ah,(%eax)
and    %ch,0x20202053
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    805cb6a <_IO_stdin_used+0x2706>
jb     805cb71 <_IO_stdin_used+0x270d>
and    %ah,0x79(%edx)
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x69(%ebx)
jp     805cb6f <_IO_stdin_used+0x270b>
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x726f732d
je     805cb55 <_IO_stdin_used+0x26f1>
push   %edi
dec    %edi
push   %edx
inc    %esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    805cb99 <_IO_stdin_used+0x2735>
jb     805cba0 <_IO_stdin_used+0x273c>
and    %ah,0x79(%edx)
and    %dl,0x4f(%edi)
push   %edx
inc    %esp
and    %ch,0x6e(%ecx)
jae    805cbad <_IO_stdin_used+0x2749>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,%gs:0x200a2c55
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
gs
js     805cbe3 <_IO_stdin_used+0x277f>
outsb  %gs:(%esi),(%dx)
jae    805cbdc <_IO_stdin_used+0x2778>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ch,0x73202c58
imul   $0x2c532d20,0x65(%edx),%edi
and    %dh,0x6d(%ecx,%ebp,2)
and    %ch,%gs:0x76202c74
gs
jb     805cc03 <_IO_stdin_used+0x279f>
imul   $0xa762d20,0x6e(%edi),%ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6d69742d,%eax
gs
cmp    $0x44524f57,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
ja     805cc1f <_IO_stdin_used+0x27bb>
je     805cc20 <_IO_stdin_used+0x27bc>
and    %ch,0x73202c6c
push   $0x7420776f
imul   $0x20736120,0x65(%ebp),%ebp
push   %edi
dec    %edi
push   %edx
inc    %esp
and    %ch,0x6e(%ecx)
jae    805cc47 <_IO_stdin_used+0x27e3>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ch,0x6f(%ebp)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     805cc6f <_IO_stdin_used+0x280b>
insl   (%dx),%es:(%edi)
cmp    %gs:(%eax),%ah
popa
je     805cc76 <_IO_stdin_used+0x2812>
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x61202c75
arpl   %sp,0x65(%ebx)
jae    805cc8d <_IO_stdin_used+0x2829>
and    %ch,0x75202c75
jae    805cc87 <_IO_stdin_used+0x2823>
and    %ch,0x63202c75
je     805cc93 <_IO_stdin_used+0x282f>
insl   (%dx),%es:(%edi)
and    %ch,%gs:0x200a2c63
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jb     805cc71 <_IO_stdin_used+0x280d>
jae    805ccc7 <_IO_stdin_used+0x2863>
popa
je     805cccb <_IO_stdin_used+0x2867>
jae    805cc78 <_IO_stdin_used+0x2814>
sub    $0x75203b63,%eax
jae    805ccc4 <_IO_stdin_used+0x2860>
and    %dh,0x70(%ebx)
arpl   %bp,%gs:0x66(%ecx)
imul   $0x6d697420,0x64(%ebp),%esp
and    %ah,%gs:0x73(%ecx)
and    %dh,0x6f(%ebx)
jb     805ccea <_IO_stdin_used+0x2886>
and    %ch,0x65(%ebx)
jns    805cc85 <_IO_stdin_used+0x2821>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x66(%ecx)
and    %ch,0x726f732d
je     805ccdf <_IO_stdin_used+0x287b>
je     805cd0d <_IO_stdin_used+0x28a9>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%al
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
sub    $0x6d69742d,%eax
gs
sub    $0x6c797473,%eax
gs
cmp    $0x4c595453,%eax
inc    %ebp
and    %ah,(%eax)
and    %ah,(%eax)
and    %dh,0x69(%edi)
je     805cd31 <_IO_stdin_used+0x28cd>
and    %ch,0x73202c6c
push   $0x7420776f
imul   $0x73752073,0x65(%ebp),%ebp
imul   $0x79747320,0x67(%esi),%ebp
insb   (%dx),%es:(%edi)
and    %dl,%gs:0x54(%ebx)
pop    %ecx
dec    %esp
inc    %ebp
cmp    (%edx),%cl
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x75(%esi)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x2c6f7369,%eax
and    %ch,0x6e(%edi,%ebp,2)
addr16 sub $0x2c6f7369,%eax
and    %ch,0x73(%ecx)
outsl  %ds:(%esi),(%dx)
sub    $0x20,%al
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
gs
sub    $0x20,%al
sub    0x4f(%esi),%eax
push   %edx
dec    %ebp
inc    %ecx
push   %esp
or     %cs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esi
dec    %edi
push   %edx
dec    %ebp
inc    %ecx
push   %esp
and    %ch,0x73(%ecx)
and    %ch,0x6e(%ecx)
je     805cdc3 <_IO_stdin_used+0x295f>
jb     805cdd0 <_IO_stdin_used+0x296c>
jb     805cdc7 <_IO_stdin_used+0x2963>
je     805cdc9 <_IO_stdin_used+0x2965>
and    %ch,%fs:0x6b(%ecx,%ebp,2)
and    %ah,%gs:(%edi)
fs
popa
je     805cdd5 <_IO_stdin_used+0x2971>
daa
cmp    (%eax),%esp
imul   $0x4d524f46,0x20(%esi),%esp
inc    %ecx
push   %esp
and    %ch,0x73(%ecx)
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
inc    %esi
dec    %edi
push   %edx
dec    %ebp
inc    %ecx
push   %esp
xor    %edi,(%esi,%ebp,2)
gs
ja     805ce15 <_IO_stdin_used+0x29b1>
imul   $0x524f463e,0x65(%esi),%ebp
dec    %ebp
inc    %ecx
push   %esp
xor    (%eax,%eiz,1),%ch
inc    %esi
dec    %edi
push   %edx
dec    %ebp
inc    %ecx
push   %esp
xor    %esp,(%eax)
popa
jo     805ce31 <_IO_stdin_used+0x29cd>
insb   (%dx),%es:(%edi)
imul   $0xa6f7420,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6f(%esi)
outsb  %ds:(%esi),(%dx)
sub    $0x65636572,%eax
outsb  %ds:(%esi),(%dx)
je     805ce11 <_IO_stdin_used+0x29ad>
imul   $0x6120,0x73(%ebp,%eiz,2),%bp
outsb  %ds:(%esi),(%dx)
and    %al,%fs:0x4f(%esi)
push   %edx
dec    %ebp
inc    %ecx
push   %esp
xor    (%eax),%ah
je     805ce74 <_IO_stdin_used+0x2a10>
and    %dh,0x65(%edx)
arpl   %sp,0x6e(%ebp)
je     805ce2d <_IO_stdin_used+0x29c9>
imul   $0xa3b,0x73(%ebp,%eiz,2),%bp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x66(%ecx)
and    %dl,0x54(%ebx)
pop    %ecx
dec    %esp
inc    %ebp
and    %ch,0x73(%ecx)
and    %dh,0x72(%eax)
imul   $0x2064,%gs:0x65(%eax),%di
ja     805ceb1 <_IO_stdin_used+0x2a4d>
je     805ceb2 <_IO_stdin_used+0x2a4e>
and    %ah,(%edi)
jo     805cebd <_IO_stdin_used+0x2a59>
jae    805ceb9 <_IO_stdin_used+0x2a55>
js     805ce7f <_IO_stdin_used+0x2a1b>
daa
sub    $0x20,%al
push   %ebx
push   %esp
pop    %ecx
dec    %esp
inc    %ebp
or     (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
je     805cedb <_IO_stdin_used+0x2a77>
imul   $0x20,0x73(%ebp),%esp
gs
data16
data16
arpl   %si,%gs:0x6f(%eax,%eiz,1)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    805ceaa <_IO_stdin_used+0x2a46>
outsl  %ds:(%esi),(%dx)
jne    805cf01 <_IO_stdin_used+0x2a9d>
jae    805cef8 <_IO_stdin_used+0x2a94>
fs and %dh,%fs:%gs:0x65(%eax,%ebp,2)
and    %dl,0x4f(%eax)
push   %ebx
dec    %ecx
pop    %eax
and    %ch,0x63(%edi,%ebp,2)
popa
insb   (%dx),%es:(%edi)
or     %gs:(%eax),%al
and    %ah,(%eax)
sub    $0x20202074,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    805cf32 <_IO_stdin_used+0x2ace>
jb     805cf39 <_IO_stdin_used+0x2ad5>
and    %ah,0x79(%edx)
and    %ch,0x6f(%ebp)
imul   $0x69746163,%fs:0x69(%esi),%esp
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %dh,0x6d(%ecx,%ebp,2)
gs
sub    $0x20,%al
outsb  %ds:(%esi),(%dx)
gs
ja     805cf45 <_IO_stdin_used+0x2ae1>
jae    805cf56 <_IO_stdin_used+0x2af2>
and    %ah,0x69(%esi)
jb     805cf5a <_IO_stdin_used+0x2af6>
je     805cef3 <_IO_stdin_used+0x2a8f>
and    %ah,(%eax)
sub    $0x2d202c54,%eax
sub    $0x73626174,%eax
imul   $0x4c4f433d,0x65(%edx),%edi
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x73(%ecx)
jae    805cf7f <_IO_stdin_used+0x2b1b>
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x62(%ecx,%eiz,2)
and    %dh,0x74(%ebx)
outsl  %ds:(%esi),(%dx)
jo     805cf89 <_IO_stdin_used+0x2b25>
and    %ah,0x74(%ecx)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
inc    %ebx
dec    %edi
dec    %esp
push   %ebx
and    %ch,0x6e(%ecx)
jae    805cf9c <_IO_stdin_used+0x2b38>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %bh,(%eax)
or     (%eax),%al
add    %al,(%eax)
and    %ah,(%eax)
sub    $0x20202075,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
ja     805cfbc <_IO_stdin_used+0x2b58>
je     805cfbd <_IO_stdin_used+0x2b59>
and    %ch,0x203a746c
jae    805cfcc <_IO_stdin_used+0x2b68>
jb     805cfd3 <_IO_stdin_used+0x2b6f>
and    %ah,0x79(%edx)
sub    $0x20,%al
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x68(%ebx)
outsl  %ds:(%esi),(%dx)
ja     805cf99 <_IO_stdin_used+0x2b35>
and    %ah,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    805cf95 <_IO_stdin_used+0x2b31>
je     805cfe0 <_IO_stdin_used+0x2b7c>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
ja     805d004 <_IO_stdin_used+0x2ba0>
je     805d005 <_IO_stdin_used+0x2ba1>
and    %ch,0x73203a6c
push   $0x6120776f
arpl   %sp,0x65(%ebx)
jae    805d020 <_IO_stdin_used+0x2bbc>
and    %dh,0x6d(%ecx,%ebp,2)
and    %ah,%gs:0x6e(%ecx)
and    %dh,%fs:0x6f(%ebx)
jb     805d02f <_IO_stdin_used+0x2bcb>
and    %ah,0x79(%edx)
and    %ch,0x61(%esi)
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
je     805d04e <_IO_stdin_used+0x2bea>
gs
jb     805d060 <_IO_stdin_used+0x2bfc>
imul   $0x6f73203a,0x65(%ebx),%esi
jb     805d066 <_IO_stdin_used+0x2c02>
and    %ah,0x79(%edx)
and    %ah,0x63(%ecx)
arpl   %sp,0x73(%ebp)
jae    805d01d <_IO_stdin_used+0x2bb9>
je     805d068 <_IO_stdin_used+0x2c04>
insl   (%dx),%es:(%edi)
or     %gs:(%eax),%ah
and    %ch,0x20202055
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsl  %fs:(%esi),(%dx)
and    %ch,0x6f(%esi)
je     805d046 <_IO_stdin_used+0x2be2>
jae    805d097 <_IO_stdin_used+0x2c33>
jb     805d09e <_IO_stdin_used+0x2c3a>
cmp    (%eax),%esp
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x74(%ebx),%esi
jb     805d09f <_IO_stdin_used+0x2c3b>
gs
jae    805d059 <_IO_stdin_used+0x2bf5>
imul   $0x65726964,0x20(%esi),%ebp
arpl   %si,0x72(%edi,%ebp,2)
jns    805d066 <_IO_stdin_used+0x2c02>
outsl  %ds:(%esi),(%dx)
jb     805d0ad <_IO_stdin_used+0x2c49>
gs
jb     805d056 <_IO_stdin_used+0x2bf2>
and    %ah,(%eax)
sub    $0x20202076,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
outsb  %ds:(%esi),(%dx)
popa
je     805d0e2 <_IO_stdin_used+0x2c7e>
jb     805d0d0 <_IO_stdin_used+0x2c6c>
insb   (%dx),%es:(%edi)
and    %dh,0x6f(%ebx)
jb     805d0e9 <_IO_stdin_used+0x2c85>
and    %ch,0x66(%edi)
and    %ch,(%eax)
jbe    805d0e1 <_IO_stdin_used+0x2c7d>
jb     805d0f1 <_IO_stdin_used+0x2c8d>
imul   $0x756e2029,0x6e(%edi),%ebp
insl   (%dx),%es:(%edi)
bound  %esp,0x72(%ebp)
jae    805d0ab <_IO_stdin_used+0x2c47>
ja     805d0f6 <_IO_stdin_used+0x2c92>
je     805d0f7 <_IO_stdin_used+0x2c93>
imul   $0x74786574,0x20(%esi),%ebp
or     (%eax),%al
and    %ah,(%eax)
sub    $0x2d202c77,%eax
sub    $0x74646977,%eax
push   $0x4c4f433d
push   %ebx
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,0x73(%ecx)
jae    805d12e <_IO_stdin_used+0x2cca>
insl   (%dx),%es:(%edi)
and    %dh,%gs:0x63(%ebx)
jb     805d125 <_IO_stdin_used+0x2cc1>
outsb  %gs:(%esi),(%dx)
and    %dh,0x69(%edi)
fs
je     805d130 <_IO_stdin_used+0x2ccc>
and    %ch,0x6e(%ecx)
jae    805d141 <_IO_stdin_used+0x2cdd>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x75(%ebx)
jb     805d14a <_IO_stdin_used+0x2ce6>
outsb  %gs:(%esi),(%dx)
je     805d0fc <_IO_stdin_used+0x2c98>
jbe    805d13f <_IO_stdin_used+0x2cdb>
insb   (%dx),%es:(%edi)
jne    805d146 <_IO_stdin_used+0x2ce2>
or     (%eax),%ah
and    %ch,0x20202078
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x746e6520,0x74(%ebx),%esi
jb     805d172 <_IO_stdin_used+0x2d0e>
gs
jae    805d12c <_IO_stdin_used+0x2cc8>
bound  %edi,0x20(%ecx)
insb   (%dx),%es:(%edi)
imul   $0x6e692073,0x65(%esi),%ebp
jae    805d18d <_IO_stdin_used+0x2d29>
gs
popa
and    %ch,%fs:0x66(%edi)
and    %ah,0x79(%edx)
and    %ah,0x6f(%ebx)
insb   (%dx),%es:(%edi)
jne    805d195 <_IO_stdin_used+0x2d31>
outsb  %ds:(%esi),(%dx)
jae    805d135 <_IO_stdin_used+0x2cd1>
and    %ah,(%eax)
sub    $0x20202058,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jae    805d1b9 <_IO_stdin_used+0x2d55>
jb     805d1c0 <_IO_stdin_used+0x2d5c>
and    %ah,0x6c(%ecx)
jo     805d1b9 <_IO_stdin_used+0x2d55>
popa
bound  %esp,0x74(%ebp)
imul   $0x20796c6c,0x61(%ebx),%esp
bound  %edi,0x20(%ecx)
outsb  %gs:(%esi),(%dx)
je     805d1d5 <_IO_stdin_used+0x2d71>
jns    805d185 <_IO_stdin_used+0x2d21>
gs
js     805d1dc <_IO_stdin_used+0x2d78>
outsb  %gs:(%esi),(%dx)
jae    805d1d5 <_IO_stdin_used+0x2d71>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
or     (%eax),%ah
and    %ch,0x2d202c5a
sub    $0x746e6f63,%eax
gs
js     805d1f2 <_IO_stdin_used+0x2d8e>
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
jo     805d200 <_IO_stdin_used+0x2d9c>
imul   $0x796e6120,0x74(%esi),%ebp
and    %dl,0x45(%ebx)
dec    %esp
imul   $0x65732078,0x75(%esi),%ebp
arpl   %si,0x72(%ebp)
imul   $0x746e6f63,0x20(%ecx,%edi,2),%esi
gs
js     805d222 <_IO_stdin_used+0x2dbe>
and    %ch,0x66(%edi)
and    %ah,0x61(%ebp)
arpl   %bp,0x20(%eax)
imul   $0x2020,0xa(%ebp,%eiz,2),%bp
sub    $0x20202031,%eax
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
insb   (%dx),%es:(%edi)
imul   $0x656e6f20,0x74(%ebx),%esi
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x65(%eax)
jb     805d20b <_IO_stdin_used+0x2da7>
insb   (%dx),%es:(%edi)
imul   $0xa,0x65(%esi),%ebp
add    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x6c65682d
jo     805d221 <_IO_stdin_used+0x2dbd>
and    %ah,(%eax)
and    %ah,(%eax)
imul   $0x2079616c,%fs:0x70(%ebx),%esi
je     805d277 <_IO_stdin_used+0x2e13>
imul   $0x706c6568,0x20(%ebx),%esi
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x20000000,0x0(%edx,%ecx,1),%esi
and    %ah,(%eax)
and    %ah,(%eax)
and    %ch,0x7265762d
jae    805d29a <_IO_stdin_used+0x2e36>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,(%eax)
outsl  %ds:(%esi),(%dx)
jne    805d2ac <_IO_stdin_used+0x2e48>
jo     805d2af <_IO_stdin_used+0x2e4b>
je     805d25c <_IO_stdin_used+0x2df8>
jbe    805d2a3 <_IO_stdin_used+0x2e3f>
jb     805d2b3 <_IO_stdin_used+0x2e4f>
imul   $0x666e6920,0x6e(%edi),%ebp
outsl  %ds:(%esi),(%dx)
jb     805d2b7 <_IO_stdin_used+0x2e53>
popa
je     805d2b6 <_IO_stdin_used+0x2e52>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x6e(%ecx)
and    %ah,%fs:0x78(%ebp)
imul   $0x530a0000,0x0(%edx,%ecx,1),%esi
dec    %ecx
pop    %edx
inc    %ebp
and    %ch,0x73(%ecx)
and    %ah,0x6e(%ecx)
and    %ch,0x6e(%ecx)
je     805d2d1 <_IO_stdin_used+0x2e6d>
addr16
gs
jb     805d290 <_IO_stdin_used+0x2e2c>
popa
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x70(%edi)
je     805d2e1 <_IO_stdin_used+0x2e7d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
popa
insb   (%dx),%es:(%edi)
and    %dh,0x6e(%ebp)
imul   $0x6d617865,0x28(%eax,%eiz,1),%esi
jo     805d2f5 <_IO_stdin_used+0x2e91>
cmp    %gs:(%eax),%ah
xor    %esi,(%eax)
dec    %ebp
and    %ch,0x73(%ecx)
and    %dh,(%ecx)
xor    %ch,(%edx)
xor    %esi,(%eax)
xor    (%edx,%ebp,1),%dh
xor    %esi,(%eax)
xor    (%ecx,%ebp,1),%dh
and    %ah,%cs:(%eax)
push   %ebp
outsb  %ds:(%esi),(%dx)
imul   $0x20657261,0xa(%ebx,%esi,2),%esi
dec    %ebx
sub    $0x20,%al
dec    %ebp
sub    $0x20,%al
inc    %edi
sub    $0x20,%al
push   %esp
sub    $0x20,%al
push   %eax
sub    $0x20,%al
inc    %ebp
sub    $0x20,%al
pop    %edx
sub    $0x20,%al
pop    %ecx
and    %ch,(%eax)
jo     805d336 <_IO_stdin_used+0x2ed2>
ja     805d32e <_IO_stdin_used+0x2eca>
jb     805d33e <_IO_stdin_used+0x2eda>
and    %ch,0x66(%edi)
and    %dh,(%ecx)
xor    %dh,(%edx)
xor    $0x29,%al
and    %ch,0x72(%edi)
and    %cl,0x42(%ebx)
sub    $0x20,%al
dec    %ebp
inc    %edx
sub    $0x20,%al
cs cs and %ch,%cs:(%eax)
jo     805d356 <_IO_stdin_used+0x2ef2>
ja     805d34e <_IO_stdin_used+0x2eea>
jb     805d35e <_IO_stdin_used+0x2efa>
and    %ch,0x66(%edi)
and    %dh,(%ecx)
xor    %dh,(%eax)
xor    %ch,(%ecx)
or     %cs:(%eax),%al
add    %cl,(%edx)
push   %ebp
jae    805d365 <_IO_stdin_used+0x2f01>
outsb  %ds:(%esi),(%dx)
and    %ah,0x6f(%bp,%di)
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805d325 <_IO_stdin_used+0x2ec1>
je     805d376 <_IO_stdin_used+0x2f12>
and    %ah,0x73(%ecx,%ebp,2)
je     805d376 <_IO_stdin_used+0x2f12>
outsb  %ds:(%esi),(%dx)
addr16 jne 805d37a <_IO_stdin_used+0x2f16>
jae    805d37b <_IO_stdin_used+0x2f17>
and    %ah,0x69(%esi)
insb   (%dx),%es:(%edi)
and    %dh,%gs:0x70(%ecx,%edi,2)
gs
jae    805d33f <_IO_stdin_used+0x2edb>
imul   $0x61736964,0x20(%ebx),%esi
bound  %ebp,0x64(%ebp,%eiz,2)
and    %ah,0x6f(%edx)
je     805d397 <_IO_stdin_used+0x2f33>
and    %ah,0x79(%edx)
and    %ah,0x66(%ebp,%eiz,2)
popa
jne    805d3a5 <_IO_stdin_used+0x2f41>
je     805d35b <_IO_stdin_used+0x2ef7>
popa
outsb  %ds:(%esi),(%dx)
or     %fs:0x69(%edi),%dh
je     805d3ab <_IO_stdin_used+0x2f47>
and    %ch,0x6c6f632d
outsl  %ds:(%esi),(%dx)
jb     805d389 <_IO_stdin_used+0x2f25>
outsb  %ds:(%esi),(%dx)
gs
jbe    805d3b5 <_IO_stdin_used+0x2f51>
jb     805d380 <_IO_stdin_used+0x2f1c>
and    %ah,(%eax)
push   %edi
imul   $0x6f632d2d,0x20(%eax,%ebp,2),%esi
insb   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805d39e <_IO_stdin_used+0x2f3a>
popa
jne    805d3d8 <_IO_stdin_used+0x2f74>
outsl  %ds:(%esi),(%dx)
sub    $0x20,%al
insb   (%dx),%es:(%edi)
jae    805d38a <_IO_stdin_used+0x2f26>
gs
insl   (%dx),%es:(%edi)
imul   $0x6f6c6f63,0x20(%ebx,%esi,2),%esi
jb     805d396 <_IO_stdin_used+0x2f32>
arpl   %bp,0x64(%edi)
gs
jae    805d39c <_IO_stdin_used+0x2f38>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
jns    805d3a1 <_IO_stdin_used+0x2f3d>
ja     805d3eb <_IO_stdin_used+0x2f87>
outsb  %gs:(%esi),(%dx)
or     0x74(%ebx),%dh
popa
outsb  %ds:(%esi),(%dx)
fs
popa
jb     805d3f2 <_IO_stdin_used+0x2f8e>
and    %ch,0x75(%edi)
je     805d403 <_IO_stdin_used+0x2f9f>
jne    805d409 <_IO_stdin_used+0x2fa5>
and    %ch,0x73(%ecx)
and    %ah,0x6f(%ebx)
outsb  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
arpl   %si,%gs:0x64(%ebp,%eiz,2)
and    %dh,0x20(%edi,%ebp,2)
popa
and    %dh,0x72(%ebp,%eiz,2)
insl   (%dx),%es:(%edi)
imul   $0x20202e6c,0x61(%esi),%ebp
push   %esp
push   $0x534c2065
pop    %edi
inc    %ebx
dec    %edi
dec    %esp
dec    %edi
push   %edx
push   %ebx
and    %ah,0x6e(%ebp)
jbe    805d42e <_IO_stdin_used+0x2fca>
jb     805d436 <_IO_stdin_used+0x2fd2>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805d3d7 <_IO_stdin_used+0x2f73>
jbe    805d430 <_IO_stdin_used+0x2fcc>
jb     805d43a <_IO_stdin_used+0x2fd6>
popa
bound  %ebp,0x20(%ebp,%eiz,2)
arpl   %sp,0x6e(%ecx)
and    %ah,0x68(%ebx)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%gs:0x68(%si)
and    %dh,%gs:0x65(%ebx)
je     805d45d <_IO_stdin_used+0x2ff9>
imul   $0x20202e73,0x67(%esi),%ebp
push   %ebp
jae    805d458 <_IO_stdin_used+0x2ff4>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x72(%ecx,%ebp,2)
arpl   %bp,0x6c(%edi)
outsl  %ds:(%esi),(%dx)
jb     805d474 <_IO_stdin_used+0x3010>
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
and    %dh,%fs:0x20(%edi,%ebp,2)
jae    805d474 <_IO_stdin_used+0x3010>
je     805d431 <_IO_stdin_used+0x2fcd>
imul   $0xa000000,0xa(%esi,%ebp,1),%esi
inc    %ebp
js     805d485 <_IO_stdin_used+0x3021>
je     805d43e <_IO_stdin_used+0x2fda>
jae    805d494 <_IO_stdin_used+0x3030>
popa
je     805d498 <_IO_stdin_used+0x3034>
jae    805d45f <_IO_stdin_used+0x2ffb>
or     (%eax),%ah
xor    %ah,(%eax)
and    %ch,0x66(%ecx)
and    %cl,0x4b(%edi)
sub    $0xa,%al
and    %dh,(%ecx)
and    %ah,(%eax)
imul   $0x6f6e696d,0x20(%esi),%esp
jb     805d45e <_IO_stdin_used+0x2ffa>
jo     805d4b2 <_IO_stdin_used+0x304e>
outsl  %ds:(%esi),(%dx)
bound  %ebp,0x6d(%ebp,%eiz,2)
jae    805d467 <_IO_stdin_used+0x3003>
sub    %ah,0x2e(%ebp)
addr16
cs
sub    $0x20,%al
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805d475 <_IO_stdin_used+0x3011>
popa
arpl   %sp,0x65(%ebx)
jae    805d4ce <_IO_stdin_used+0x306a>
and    %dh,0x75(%ebx)
bound  %esp,0x72(%ecx,%ebp,2)
arpl   %si,%gs:0x72(%edi,%ebp,2)
jns    805d492 <_IO_stdin_used+0x302e>
sub    $0xa,%al
and    %dh,(%edx)
and    %ah,(%eax)
imul   $0x69726573,0x20(%esi),%esp
outsl  %ds:(%esi),(%dx)
jne    805d4ec <_IO_stdin_used+0x3088>
and    %dh,0x6f(%edx,%esi,2)
jne    805d4e1 <_IO_stdin_used+0x307d>
insb   (%dx),%es:(%edi)
and    %ch,%gs:(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805d4b0 <_IO_stdin_used+0x304c>
popa
arpl   %sp,0x65(%ebx)
jae    805d509 <_IO_stdin_used+0x30a5>
and    %ah,0x6f(%ebx)
insl   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
sub    $0x656e696c,%eax
and    %ah,0x72(%ecx)
addr16 jne 805d516 <_IO_stdin_used+0x30b2>
outsb  %gs:(%esi),(%dx)
je     805d4d6 <_IO_stdin_used+0x3072>
or     %cs:(%eax),%al
push   $0x3a707474
das
das
ja     805d530 <_IO_stdin_used+0x30cc>
ja     805d4e9 <_IO_stdin_used+0x3085>
outsb  %ds:(%si),(%dx)
jne    805d4ed <_IO_stdin_used+0x3089>
outsl  %ds:(%esi),(%dx)
jb     805d529 <_IO_stdin_used+0x30c5>
das
jae    805d534 <_IO_stdin_used+0x30d0>
data16
je     805d53f <_IO_stdin_used+0x30db>
popa
jb     805d530 <_IO_stdin_used+0x30cc>
das
arpl   %bp,0x72(%edi)
gs
jne    805d546 <_IO_stdin_used+0x30e2>
imul   $0x65470000,0x2f(%ebx,%esi,2),%ebp
outsb  %ds:(%esi),(%dx)
gs
jb     805d53f <_IO_stdin_used+0x30db>
insb   (%dx),%es:(%edi)
and    %ch,0x65(%eax)
insb   (%dx),%es:(%edi)
jo     805d505 <_IO_stdin_used+0x30a1>
jne    805d55a <_IO_stdin_used+0x30f6>
imul   $0x554e4720,0x67(%esi),%ebp
and    %dh,0x6f(%ebx)
data16
je     805d56b <_IO_stdin_used+0x3107>
popa
jb     805d55c <_IO_stdin_used+0x30f8>
cmp    (%eax),%ah
cmp    $0x68,%al
je     805d571 <_IO_stdin_used+0x310d>
jo     805d539 <_IO_stdin_used+0x30d5>
das
das
ja     805d57a <_IO_stdin_used+0x3116>
ja     805d533 <_IO_stdin_used+0x30cf>
outsb  %ds:(%si),(%dx)
jne    805d537 <_IO_stdin_used+0x30d3>
outsl  %ds:(%esi),(%dx)
jb     805d573 <_IO_stdin_used+0x310f>
das
addr16
gs
je     805d579 <_IO_stdin_used+0x3115>
gs
insb   (%dx),%es:(%edi)
jo     805d544 <_IO_stdin_used+0x30e0>
or     %ds:(%eax),%al
push   %edx
gs
jo     805d58b <_IO_stdin_used+0x3127>
jb     805d592 <_IO_stdin_used+0x312e>
and    %ah,0x72742073
popa
outsb  %ds:(%esi),(%dx)
jae    805d594 <_IO_stdin_used+0x3130>
popa
je     805d594 <_IO_stdin_used+0x3130>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
and    %ah,0x75(%edx)
addr16 jae 805d553 <_IO_stdin_used+0x30ef>
je     805d5a4 <_IO_stdin_used+0x3140>
and    %bh,(%eax,%ebp,2)
je     805d5ae <_IO_stdin_used+0x314a>
jo     805d576 <_IO_stdin_used+0x3112>
das
das
je     805d5b2 <_IO_stdin_used+0x314e>
popa
outsb  %ds:(%esi),(%dx)
jae    805d5b0 <_IO_stdin_used+0x314c>
popa
je     805d5b0 <_IO_stdin_used+0x314c>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
jo     805d5bd <_IO_stdin_used+0x3159>
outsl  %ds:(%esi),(%dx)
push   $0x65
arpl   %si,0x6f(%esi,%ebp,1)
jb     805d5bb <_IO_stdin_used+0x3157>
das
je     805d5bc <_IO_stdin_used+0x3158>
popa
insl   (%dx),%es:(%edi)
das
or     %ds:(%eax),%al
add    %al,(%eax)
add    %al,0x6f(%esi)
jb     805d584 <_IO_stdin_used+0x3120>
arpl   %bp,0x6d(%edi)
jo     805d5d5 <_IO_stdin_used+0x3171>
gs
je     805d5d1 <_IO_stdin_used+0x316d>
and    %ah,0x63(%edi,%ebp,2)
jne    805d5df <_IO_stdin_used+0x317b>
outsb  %gs:(%esi),(%dx)
je     805d5d7 <_IO_stdin_used+0x3173>
je     805d5e1 <_IO_stdin_used+0x317d>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
jb     805d5f3 <_IO_stdin_used+0x318f>
outsb  %ds:(%esi),(%dx)
cmp    (%eax),%ah
imul   $0x6f63206f,0x66(%esi),%ebp
jb     805d5ef <_IO_stdin_used+0x318b>
jne    805d600 <_IO_stdin_used+0x319c>
imul   $0x20732527,0x20(%ebx,%esi,2),%ebp
imul   $0x7461636f,0x76(%esi),%ebp
imul   $0xa27,0x6e(%edi),%ebp
add    %al,(%eax)
imul   $0x6e69726f,0x6e(%edi),%esp
and    %ch,0x6e(%bx,%di)
jbe    805d612 <_IO_stdin_used+0x31ae>
insb   (%dx),%es:(%edi)
imul   $0x65756c61,0x76(%eax,%eiz,1),%esp
and    %ch,0x66(%edi)
and    %ah,0x6e(%ebp)
jbe    805d62b <_IO_stdin_used+0x31c7>
jb     805d633 <_IO_stdin_used+0x31cf>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805d5ea <_IO_stdin_used+0x3186>
jbe    805d62d <_IO_stdin_used+0x31c9>
jb     805d637 <_IO_stdin_used+0x31d3>
popa
bound  %ebp,0x20(%ebp,%eiz,2)
push   %ecx
push   %ebp
dec    %edi
push   %esp
dec    %ecx
dec    %esi
inc    %edi
pop    %edi
push   %ebx
push   %esp
pop    %ecx
dec    %esp
inc    %ebp
cmp    (%eax),%ah
and    $0x73,%eax
add    %ch,0x67(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jb     805d657 <_IO_stdin_used+0x31f3>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%bx,%di)
jbe    805d656 <_IO_stdin_used+0x31f2>
insb   (%dx),%es:(%edi)
imul   $0x68746469,0x77(%eax,%eiz,1),%esp
and    %ch,0x6e(%ecx)
and    %ah,0x6e(%ebp)
jbe    805d66f <_IO_stdin_used+0x320b>
jb     805d677 <_IO_stdin_used+0x3213>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805d62e <_IO_stdin_used+0x31ca>
jbe    805d671 <_IO_stdin_used+0x320d>
jb     805d67b <_IO_stdin_used+0x3217>
popa
bound  %ebp,0x20(%ebp,%eiz,2)
inc    %ebx
dec    %edi
dec    %esp
push   %ebp
dec    %ebp
dec    %esi
push   %ebx
cmp    (%eax),%ah
and    $0x69000073,%eax
outsb  %ds:(%si),(%dx)
outsl  %ds:(%esi),(%dx)
jb     805d693 <_IO_stdin_used+0x322f>
outsb  %ds:(%esi),(%dx)
and    %ch,0x6e(%bx,%di)
jbe    805d692 <_IO_stdin_used+0x322e>
insb   (%dx),%es:(%edi)
imul   $0x73206261,0x74(%eax,%eiz,1),%esp
imul   $0x206e6920,0x65(%edx),%edi
outsb  %gs:(%esi),(%dx)
jbe    805d6ae <_IO_stdin_used+0x324a>
jb     805d6b6 <_IO_stdin_used+0x3252>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805d66d <_IO_stdin_used+0x3209>
jbe    805d6b0 <_IO_stdin_used+0x324c>
jb     805d6ba <_IO_stdin_used+0x3256>
popa
bound  %ebp,0x20(%ebp,%eiz,2)
push   %esp
inc    %ecx
inc    %edx
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
cmp    (%eax),%ah
and    $0x73,%eax
popa
bound  %esp,0x64(%ebx)
addr16 pushw $0x6b69
insb   (%dx),%es:(%edi)
insl   (%dx),%es:(%edi)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
jo     805d6e4 <_IO_stdin_used+0x3280>
jb     805d6e8 <_IO_stdin_used+0x3284>
je     805d6ec <_IO_stdin_used+0x3288>
jbe    805d6f0 <_IO_stdin_used+0x328c>
cmp    0x41(%eax),%bh
inc    %edx
inc    %ebx
inc    %esp
inc    %esi
inc    %edi
dec    %eax
dec    %ecx
cmp    0x51(%esi,%ecx,2),%cl
push   %edx
push   %ebx
push   %esp
cmp    0x58(%ebp),%dl
pop    %edx
xor    %eax,(%eax)
and    %ah,(%eax)
sub    $0x4f462b20,%eax
push   %edx
dec    %ebp
inc    %ecx
push   %esp
and    %ch,(%eax)
gs
cs
addr16
cs
sub    $0x20,%al
sub    0x4d253a48,%esp
sub    %esp,(%eax)
outsw  %ds:(%esi),(%dx)
jb     805d6cf <_IO_stdin_used+0x326b>
popa
and    %ah,(%edi)
fs
popa
je     805d71b <_IO_stdin_used+0x32b7>
daa
sub    $0x6c797473,%eax
and    %ah,%gs:0x6f(%esi)
jb     805d72f <_IO_stdin_used+0x32cb>
popa
je     805d6cf <_IO_stdin_used+0x326b>
add    %al,(%eax)
add    %ah,0x72(%ebp)
jb     805d73b <_IO_stdin_used+0x32d7>
jb     805d6ee <_IO_stdin_used+0x328a>
imul   $0x6c616974,0x69(%esi),%ebp
imul   $0x6d20676e,0x69(%edx),%edi
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
je     805d748 <_IO_stdin_used+0x32e4>
and    %dh,0x74(%ebx)
jb     805d74e <_IO_stdin_used+0x32ea>
outsb  %ds:(%esi),(%dx)
addr16 jae 805d6e9 <_IO_stdin_used+0x3285>
add    %al,(%eax)
add    %dh,0x69(%ebx)
jp     805d755 <_IO_stdin_used+0x32f1>
outsl  %ds:(%esi),(%dx)
data16
and    %ch,(%eax)
jae    805d76a <_IO_stdin_used+0x3306>
jb     805d76d <_IO_stdin_used+0x3309>
arpl   %si,0x64(%eax,%eiz,1)
gs
jbe    805d75e <_IO_stdin_used+0x32fa>
imul   $0x3d3c2029,0x6f(%esi),%ebp
and    %bl,0x5f(%edi)
gs
js     805d780 <_IO_stdin_used+0x331c>
outsb  %gs:(%esi),(%dx)
jae    805d779 <_IO_stdin_used+0x3315>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
pop    %edi
pop    %edi
and    %ch,(%eax)
jnp    805d738 <_IO_stdin_used+0x32d4>
jae    805d78e <_IO_stdin_used+0x332a>
jb     805d791 <_IO_stdin_used+0x332d>
arpl   %si,0x6f(%eax,%eiz,1)
bound  %esi,0x74(%ebx)
popa
arpl   %bp,0x20(%ebx)
arpl   %bp,0x6e(%edi)
jae    805d7a0 <_IO_stdin_used+0x333c>
and    %ch,(%edx)
pop    %edi
pop    %edi
outsl  %ds:(%esi),(%dx)
and    %bh,0x64262820
gs
jbe    805d799 <_IO_stdin_used+0x3335>
imul   $0x73626f5f,0x6f(%esi),%ebp
je     805d7a4 <_IO_stdin_used+0x3340>
arpl   %bp,0x29(%ebx)
cmp    (%eax),%esp
sub    %dh,0x6e(%ebp)
jae    805d7b6 <_IO_stdin_used+0x3352>
outsb  %ds:(%si),(%dx)
gs sub %esp,%fs:%gs:(%eax)
sub    %bl,0x5f(%edi)
outsl  %ds:(%esi),(%dx)
sub    $0x78656e3e,%eax
je     805d7bd <_IO_stdin_used+0x3359>
data16
jb     805d7c6 <_IO_stdin_used+0x3362>
and    %ch,%gs:0x6f5f5f20
sub    $0x6a626f3e,%eax
arpl   %si,%gs:0x62(%edi,%ebx,2)
popa
jae    805d7da <_IO_stdin_used+0x3376>
sub    %edi,(%ebx)
and    %bh,0x29(%ebp)
add    %al,(%eax)
arpl   %sp,0x6e(%ecx)
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805d7a3 <_IO_stdin_used+0x333f>
fs
gs
je     805d7ec <_IO_stdin_used+0x3388>
jb     805d7f6 <_IO_stdin_used+0x3392>
imul   $0x76656420,0x65(%esi),%ebp
imul   $0x646e6120,0x65(%ebx),%esp
and    %ch,0x6e(%ecx)
outsl  %ds:(%esi),(%dx)
fs and %ch,%fs:%gs:0x66(%edi)
and    %ah,0x73250073
cmp    (%eax),%ah
outsb  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
je     805d7cc <_IO_stdin_used+0x3368>
insb   (%dx),%es:(%edi)
imul   $0x20676e69,0x74(%ebx),%esi
popa
insb   (%dx),%es:(%edi)
jb     805d81d <_IO_stdin_used+0x33b9>
popa
fs
jns    805d7e9 <_IO_stdin_used+0x3385>
insb   (%dx),%es:(%edi)
imul   $0x64206465,0x74(%ebx),%esi
imul   $0x726f7463,0x65(%edx),%esi
jns    805d7cd <_IO_stdin_used+0x3369>
add    %al,(%eax)
add    %ch,(%edi)
das
inc    %esp
dec    %ecx
push   %edx
inc    %ebp
inc    %esp
sub    $0x4954504f,%eax
dec    %edi
dec    %esi
push   %ebx
das
das
and    %ch,0x6f75712d
je     805d852 <_IO_stdin_used+0x33ee>
outsb  %ds:(%esi),(%dx)
addr16 sub $0x6c797473,%eax
gs
cmp    $0xa7325,%eax
add    %al,(%eax)
push   $0x5f687361
addr16
gs
je     805d860 <_IO_stdin_used+0x33fc>
outsb  %ds:(%esi),(%dx)
pop    %edi
outsb  %gs:(%esi),(%dx)
je     805d879 <_IO_stdin_used+0x3415>
imul   $0x63612820,0x73(%ebp),%esp
je     805d879 <_IO_stdin_used+0x3415>
jbe    805d877 <_IO_stdin_used+0x3413>
pop    %edi
imul   $0x29746573,%fs:0x5f(%edx),%esi
and    %bh,0x30203d
add    %al,(%eax)
add    %dh,0x6e(%ebp)
jo     805d889 <_IO_stdin_used+0x3425>
jb     805d89d <_IO_stdin_used+0x3439>
popa
bound  %ebp,0x20(%ebp,%eiz,2)
jbe    805d892 <_IO_stdin_used+0x342e>
insb   (%dx),%es:(%edi)
jne    805d899 <_IO_stdin_used+0x3435>
and    %ah,0x6f(%esi)
jb     805d859 <_IO_stdin_used+0x33f5>
dec    %esp
push   %ebx
pop    %edi
inc    %ebx
dec    %edi
dec    %esp
dec    %edi
push   %edx
push   %ebx
and    %ah,0x6e(%ebp)
jbe    805d8b0 <_IO_stdin_used+0x344c>
jb     805d8b8 <_IO_stdin_used+0x3454>
outsb  %ds:(%esi),(%dx)
insl   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
je     805d86f <_IO_stdin_used+0x340b>
jbe    805d8b2 <_IO_stdin_used+0x344e>
jb     805d8bc <_IO_stdin_used+0x3458>
popa
bound  %ebp,0x0(%ebp,%eiz,2)
fs
gs
jb     805d8c1 <_IO_stdin_used+0x345d>
data16
gs
jb     805d8c5 <_IO_stdin_used+0x3461>
outsb  %ds:(%esi),(%dx)
arpl   %sp,0x2d(%ebp)
arpl   %bp,0x6d(%edi)
insl   (%dx),%es:(%edi)
popa
outsb  %ds:(%esi),(%dx)
fs
sub    $0x656e696c,%eax
sub    $0x6c6d7973,%eax
imul   $0x2d6f742d,0x6b(%esi),%ebp
imul   $0x31322e38,%fs:0x0(%edx),%esi
add    %ch,0x6e(%ecx)
jbe    805d8ea <_IO_stdin_used+0x3486>
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     805d8b6 <_IO_stdin_used+0x3452>
and    $0x6f662073,%eax
jb     805d8bd <_IO_stdin_used+0x3459>
and    $0x6d610073,%eax
bound  %ebp,0x67(%ecx)
jne    805d916 <_IO_stdin_used+0x34b2>
jne    805d91c <_IO_stdin_used+0x34b8>
and    %ah,0x72(%ecx)
addr16 jne 805d91c <_IO_stdin_used+0x34b8>
outsb  %gs:(%esi),(%dx)
je     805d8d3 <_IO_stdin_used+0x346f>
and    $0x6f662073,%eax
jb     805d8da <_IO_stdin_used+0x3476>
and    $0x61560073,%eax
insb   (%dx),%es:(%edi)
imul   $0x6d756772,0x61(%eax,%eiz,1),%esp
outsb  %gs:(%esi),(%dx)
je     805d93f <_IO_stdin_used+0x34db>
and    %ah,0x72(%ecx)
cmp    %gs:(%eax),%al
or     (%eax),%ah
and    %ch,0x732520
sub    $0x20,%al
and    $0x72770073,%eax
imul   $0x6f727265,0x20(%ebp,%eiz,2),%esi
jb     805d8eb <_IO_stdin_used+0x3487>
and    $0x25203a73,%eax
jae    805d8f2 <_IO_stdin_used+0x348e>
push   %eax
dec    %edi
push   %ebx
dec    %ecx
pop    %eax
add    %ah,(%ebx)
and    %ah,0x6e(%ebp)
je     805d970 <_IO_stdin_used+0x350c>
imul   $0x2020203a,0x73(%ebp),%esp
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
cmp    (%eax),%ah
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    %ah,(%eax)
and    $0xa756c,%eax
insl   (%dx),%es:(%edi)
popa
js     805d94c <_IO_stdin_used+0x34e8>
bound  %esi,0x63(%ebp)
imul   $0x20,0x74(%ebp),%esp
insb   (%dx),%es:(%edi)
outsb  %gs:(%esi),(%dx)
addr16 je 805d9a1 <_IO_stdin_used+0x353d>
cmp    (%eax),%ah
and    $0xa756c,%eax
and    (%eax),%esp
bound  %esi,0x63(%ebp)
imul   $0x73,0x74(%ebp),%esp
and    %dh,0x73(%ebp)
gs cmp %fs:%gs:(%eax),%ah
and    %ah,(%eax)
and    %ah,0x2820756c
and    $0x2566322e,%eax
and    $0xa29,%eax
cmpb   $0xcd,(%edi)
int3
dec    %esp
aas
hlt
std
mov    $0x3f,%ah
add    %al,(%eax)
add    %al,(%eax)
int    $0xcc
int3
cmp    $0x3f666666,%eax
int    $0xcc
mov    %?,(%edi)
add    %al,(%eax)
enter  $0x42,$0x0
orb    $0x2e,0x25(%edi)
xor    %cl,0x0(%esi,%eiz,2)
and    $0x664c312e,%eax
add    %al,0x4c(%edx)
dec    %edi
inc    %ebx
dec    %ebx
push   %ebx
dec    %ecx
pop    %edx
inc    %ebp
add    %dl,0x4f(%eax)
push   %ebx
dec    %ecx
pop    %eax
dec    %esp
pop    %ecx
pop    %edi
inc    %ebx
dec    %edi
push   %edx
push   %edx
inc    %ebp
inc    %ebx
push   %esp
add    %ah,0x45(%ebp)
addr16 inc %edi
imul   $0x4d,0x6d(%ebx),%ecx
jo     805da0c <_IO_stdin_used+0x35a8>
je     805da12 <_IO_stdin_used+0x35ae>
jns    805da19 <_IO_stdin_used+0x35b5>
jp     805da1c <_IO_stdin_used+0x35b8>
xor    %al,(%eax)
mov    $0x0,%al
add    %al,(%eax)
nop
add    %al,(%eax)
add    %bh,0x3f0805b5(%ecx)
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
dec    %ebx
dec    %ebp
inc    %edi
push   %esp
push   %eax
inc    %ebp
pop    %edx
pop    %ecx
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x5f(%eax)
pop    %edi
add    %al,(%eax)
and    %al,-0x1(%ecx)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
(bad)
ds
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
and    %cl,0x55(%esi)
dec    %esp
dec    %esp
and    %ah,0x72(%ecx)
addr16 jbe 805da67 <_IO_stdin_used+0x3603>
xor    %bl,0x20(%ebp)
ja     805da72 <_IO_stdin_used+0x360e>
jae    805da33 <_IO_stdin_used+0x35cf>
jo     805da76 <_IO_stdin_used+0x3612>
jae    805da8a <_IO_stdin_used+0x3626>
gs and %dh,%fs:%gs:0x72(%eax,%ebp,2)
outsl  %ds:(%esi),(%dx)
jne    805da87 <_IO_stdin_used+0x3623>
push   $0x206e6120
gs
js     805da8d <_IO_stdin_used+0x3629>
arpl   %sp,(%eax)
jae    805daa5 <_IO_stdin_used+0x3641>
jae    805daa2 <_IO_stdin_used+0x363e>
gs
insl   (%dx),%es:(%edi)
and    %ah,0x61(%ebx)
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
or     %cs:(%eax),%al
das
cs
insb   (%dx),%es:(%edi)
imul   $0x746c002f,0x73(%edx),%esp
sub    $0x9980e200,%eax
add    %ah,0x2200af(%ecx)
mov    0xe2006507,%eax
sbbb   $0x68,0x73006000(%eax)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
add    %dh,0x68(%ebx)
gs
insb   (%dx),%es:(%edi)
insb   (%dx),%es:(%edi)
sub    $0x61776c61,%eax
jns    805dadc <_IO_stdin_used+0x3678>
add    %ah,0x2d(%ebx)
insl   (%dx),%es:(%edi)
popa
jns    805dad2 <_IO_stdin_used+0x366e>
add    %ah,%gs:0x6c(%ebx)
outsl  %ds:(%esi),(%dx)
arpl   %sp,0x6c(%ecx)
add    %al,%gs:(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,-0x67f7faab(%eax)
pop    %ebx
add    $0x55bc808,%eax
or     %cl,-0x37f7faa6(%eax)
pop    %edx
add    $0x55af808,%eax
or     %ah,(%eax)
pop    %ebx
add    $0x55b2008,%eax
or     %ah,(%eax)
pop    %ebx
add    $0x558c008,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,(%eax)
pop    %ecx
add    $0x5589808,%eax
or     %bh,-0x4ff7faa8(%eax)
pop    %eax
add    $0x558a808,%eax
or     %ah,0x70080558(%eax)
pop    %eax
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x559b808,%eax
or     %bh,-0x47f7faa7(%eax)
pop    %ecx
add    $0x557e908,%eax
or     %ch,%cl
push   %edi
add    $0x557e908,%eax
or     %ah,%cl
push   %edi
add    $0x557e908,%eax
or     %bl,0x57(%eax)
add    $0x557e908,%eax
or     %ch,0x59(%eax)
add    $0x557e908,%eax
or     %ch,%cl
push   %edi
add    $0x557e908,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %ch,%cl
push   %edi
add    $0x557e908,%eax
or     %ch,%cl
push   %edi
add    $0x557e908,%eax
or     %ch,-0x47f7faaa(%eax)
pop    %ecx
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x557e908,%eax
or     %cl,0x59(%eax)
add    $0x5575808,%eax
or     %ch,%cl
push   %edi
add    $0x5575808,%eax
or     %ch,%cl
push   %edi
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x5575808,%eax
or     %bl,0x57(%eax)
add    $0x557c008,%eax
or     %ch,%cl
push   %edi
add    $0x557c008,%eax
or     %ah,%cl
push   %edi
add    $0x55de008,%eax
or     %ah,%al
pop    %ebp
add    $0x55d7808,%eax
or     %ah,%al
pop    %ebp
add    $0x55d7808,%eax
or     %ah,%al
pop    %ebp
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %bh,0x5d(%eax)
add    $0x55d7808,%eax
or     %ah,%al
pop    %ebp
add    $0x8,%eax
add    %al,(%ecx)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
add    $0x6000000,%eax
add    %al,(%eax)
add    %al,(%edi)
add    %al,(%eax)
add    %dh,-0x4a(%ebx)
add    $0x5da5708,%eax
or     %bl,-0x26(%ebp)
add    $0x5e28c08,%eax
or     %ch,-0x26(%edx)
add    $0x5b58008,%eax
or     %cl,(%ebx)
mov    $0x5,%bl
or     %dh,-0x26(%edx)
add    $0x8,%eax
add    %ah,0x64252f6d
das
and    $0x59250079,%eax
sub    $0x252d6d25,%eax
add    %ah,%fs:0x4d253a48
cmp    0x4f000053,%ah
jp     805dda8 <_IO_stdin_used+0x3944>
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %cl,%al
jns    805de3c <_IO_stdin_used+0x39d8>
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %ah,0x5b080579(%edx)
jp     805de94 <_IO_stdin_used+0x3a30>
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x56c5008,%eax
or     %dl,0x6c(%eax)
add    $0x576e508,%eax
or     %dl,0x5b080572(%edx)
jp     805debc <_IO_stdin_used+0x3a58>
or     %ah,0x5080571(%esi)
jae    805dec4 <_IO_stdin_used+0x3a60>
or     %ah,%bl
jb     805dec8 <_IO_stdin_used+0x3a64>
or     %al,%bh
jb     805decc <_IO_stdin_used+0x3a68>
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x572a808,%eax
or     %bh,0x78(%eax)
add    $0x57a5b08,%eax
or     %bh,(%ebx)
js     805dee8 <_IO_stdin_used+0x3a84>
or     %bl,0x7a(%ebx)
add    $0x5794908,%eax
or     %al,0x74d90805(%ecx,%edi,2)
add    $0x578c708,%eax
or     %al,0x90080573
jbe    805df04 <_IO_stdin_used+0x3aa0>
or     %dl,(%eax)
imul   $0x8,0x5780008,%eax
jecxz  805df7e <_IO_stdin_used+0x3b1a>
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x57a5b08,%eax
or     %bl,0x7a(%ebx)
add    $0x56c5008,%eax
or     %ah,0x10080575(%ecx)
imul   $0x8,0x56e6708,%eax
sub    0x5(%esi),%ch
or     %bl,0x7a(%ebx)
add    $0x5730508,%eax
or     %ah,0x5b080575(%ecx)
jp     805df4c <_IO_stdin_used+0x3ae8>
or     %bl,(%eax)
jns    805df50 <_IO_stdin_used+0x3aec>
or     %al,(%ecx)
jns    805df54 <_IO_stdin_used+0x3af0>
or     %ch,%ch
js     805df58 <_IO_stdin_used+0x3af4>
or     %dl,0x79(%ebx)
add    $0x5713908,%eax
or     %bl,0x7a(%ebx)
add    $0x57a4508,%eax
or     %bl,0x7a(%ebx)
add    $0x56b1b08,%eax
or     %dh,%ch
outsb  %ds:(%esi),(%dx)
add    $0x56e8608,%eax
or     %dl,0x5b08056d(%esi)
jp     805df80 <_IO_stdin_used+0x3b1c>
or     %dh,0x76(%ecx)
add    $0x56b1008,%eax
or     %cl,-0x38f7fa8c(%eax)
jne    805df90 <_IO_stdin_used+0x3b2c>
or     %ah,0x25282073
jae    805dfbc <_IO_stdin_used+0x3b58>
and    %ah,0x25000a73
jae    805dfbb <_IO_stdin_used+0x3b57>
and    $0x28000a73,%eax
inc    %ebx
sub    %eax,(%eax)
push   %edi
jb     805e00f <_IO_stdin_used+0x3bab>
je     805e01c <_IO_stdin_used+0x3bb8>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0xa2e73
push   %edi
jb     805e01f <_IO_stdin_used+0x3bbb>
je     805e02c <_IO_stdin_used+0x3bc8>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x6e612073
and    %ah,%fs:0xa2e73
push   %edi
jb     805e036 <_IO_stdin_used+0x3bd2>
je     805e043 <_IO_stdin_used+0x3bdf>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e008 <_IO_stdin_used+0x3ba4>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
or     0x65(%edx),%dl
jo     805e05a <_IO_stdin_used+0x3bf6>
jb     805e061 <_IO_stdin_used+0x3bfd>
and    %ah,0x75(%edx)
addr16 jae 805e013 <_IO_stdin_used+0x3baf>
je     805e064 <_IO_stdin_used+0x3c00>
cmp    (%eax),%ah
and    $0xa73,%eax
or     0x63(%ecx,%ebp,2),%cl
outsb  %gs:(%esi),(%dx)
jae    805e069 <_IO_stdin_used+0x3c05>
and    %al,0x50(%edi)
dec    %esp
jbe    805e03d <_IO_stdin_used+0x3bd9>
sub    (%edx),%edi
and    %al,0x4e(%edi)
push   %ebp
and    %al,0x50(%edi)
dec    %esp
and    %dh,0x65(%esi)
jb     805e08c <_IO_stdin_used+0x3c28>
imul   $0x6f203320,0x6e(%edi),%ebp
jb     805e042 <_IO_stdin_used+0x3bde>
insb   (%dx),%es:(%edi)
popa
je     805e08b <_IO_stdin_used+0x3c27>
jb     805e048 <_IO_stdin_used+0x3be4>
cmp    $0x68,%al
je     805e0a0 <_IO_stdin_used+0x3c3c>
jo     805e068 <_IO_stdin_used+0x3c04>
das
das
outsb  %ds:(%si),(%dx)
jne    805e062 <_IO_stdin_used+0x3bfe>
outsl  %ds:(%esi),(%dx)
jb     805e09e <_IO_stdin_used+0x3c3a>
das
insb   (%dx),%es:(%edi)
imul   $0x7365736e,0x65(%ebx),%esp
das
addr16 jo 805e0b0 <_IO_stdin_used+0x3c4c>
cs
push   $0x3e6c6d74
or     %cs:0x69(%eax,%ebp,2),%dl
jae    805e071 <_IO_stdin_used+0x3c0d>
imul   $0x65657266,0x20(%ebx),%esi
and    %dh,0x6f(%ebx)
data16
je     805e0d5 <_IO_stdin_used+0x3c71>
popa
jb     805e0c6 <_IO_stdin_used+0x3c62>
cmp    (%eax),%ah
jns    805e0d4 <_IO_stdin_used+0x3c70>
jne    805e087 <_IO_stdin_used+0x3c23>
popa
jb     805e0cf <_IO_stdin_used+0x3c6b>
and    %ah,0x72(%esi)
gs and %dh,%gs:0x20(%edi,%ebp,2)
arpl   %bp,0x61(%eax)
outsb  %ds:(%esi),(%dx)
and    %ah,%gs:0x6e(%bx,%di)
and    %dh,%fs:0x65(%edx)
imul   $0x75626972,%fs:0x74(%ebx),%esi
je     805e0ef <_IO_stdin_used+0x3c8b>
and    %ch,0x74(%ecx)
or     %cs:0x65(%eax,%ebp,2),%dl
jb     805e0f9 <_IO_stdin_used+0x3c95>
and    %ch,0x73(%ecx)
and    %cl,0x4f(%esi)
and    %dl,0x41(%edi)
push   %edx
push   %edx
inc    %ecx
dec    %esi
push   %esp
pop    %ecx
sub    $0x20,%al
je     805e116 <_IO_stdin_used+0x3cb2>
and    %dh,0x65(%eax,%ebp,2)
and    %ah,0x78(%ebp)
je     805e115 <_IO_stdin_used+0x3cb1>
outsb  %ds:(%esi),(%dx)
je     805e0d3 <_IO_stdin_used+0x3c6f>
jo     805e11a <_IO_stdin_used+0x3cb6>
jb     805e124 <_IO_stdin_used+0x3cc0>
imul   $0x79622064,0x65(%esp,%esi,2),%esi
and    %ch,0x77(%ecx,%eiz,2)
or     %cs:(%edx),%cl
add    %al,(%eax)
push   %edi
jb     805e134 <_IO_stdin_used+0x3cd0>
je     805e141 <_IO_stdin_used+0x3cdd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e106 <_IO_stdin_used+0x3ca2>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e154 <_IO_stdin_used+0x3cf0>
je     805e161 <_IO_stdin_used+0x3cfd>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e126 <_IO_stdin_used+0x3cc2>
and    %ah,0x250a2c73
jae    805e12e <_IO_stdin_used+0x3cca>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e178 <_IO_stdin_used+0x3d14>
je     805e185 <_IO_stdin_used+0x3d21>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e14a <_IO_stdin_used+0x3ce6>
and    %ah,0x250a2c73
jae    805e152 <_IO_stdin_used+0x3cee>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e1a0 <_IO_stdin_used+0x3d3c>
je     805e1ad <_IO_stdin_used+0x3d49>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e172 <_IO_stdin_used+0x3d0e>
and    %ah,0x250a2c73
jae    805e17a <_IO_stdin_used+0x3d16>
and    %ah,0x25202c73
jae    805e182 <_IO_stdin_used+0x3d1e>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e1cc <_IO_stdin_used+0x3d68>
je     805e1d9 <_IO_stdin_used+0x3d75>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e19e <_IO_stdin_used+0x3d3a>
and    %ah,0x250a2c73
jae    805e1a6 <_IO_stdin_used+0x3d42>
and    %ah,0x25202c73
jae    805e1ae <_IO_stdin_used+0x3d4a>
and    %ah,0x610a2c73
outsb  %ds:(%esi),(%dx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e1fc <_IO_stdin_used+0x3d98>
je     805e209 <_IO_stdin_used+0x3da5>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e1ce <_IO_stdin_used+0x3d6a>
and    %ah,0x250a2c73
jae    805e1d6 <_IO_stdin_used+0x3d72>
and    %ah,0x25202c73
jae    805e1de <_IO_stdin_used+0x3d7a>
and    %ah,0x250a2c73
jae    805e1e6 <_IO_stdin_used+0x3d82>
and    %ah,0x6e(%ecx)
and    %ah,%fs:0xa2e73
push   %edi
jb     805e230 <_IO_stdin_used+0x3dcc>
je     805e23d <_IO_stdin_used+0x3dd9>
outsb  %gs:(%esi),(%dx)
and    %ah,0x79(%edx)
and    %ah,0x25202c73
jae    805e202 <_IO_stdin_used+0x3d9e>
and    %ah,0x250a2c73
jae    805e20a <_IO_stdin_used+0x3da6>
and    %ah,0x25202c73
jae    805e212 <_IO_stdin_used+0x3dae>
and    %ah,0x250a2c73
jae    805e21a <_IO_stdin_used+0x3db6>
and    %ah,0x61202c73
outsb  %ds:(%esi),(%dx)
and    %ch,%fs:0x74(%edi)
push   $0x2e737265
or     (%eax),%al
xor    %al,-0x7dc7f7fb(%edx)
add    $0x5827808,%eax
or     %al,%al
(bad)
add    $0x5831808,%eax
or     %dh,-0x7d(%eax)
add    $0x583d808,%eax
or     %dl,-0x7c(%eax)
add    $0x580f008,%eax
or     %cl,0x80581(%eax)
add    %al,(%eax)
add    %al,0x6f(%ebx)
jo     805e2bd <_IO_stdin_used+0x3e59>
jb     805e2af <_IO_stdin_used+0x3e4b>
addr16 push $0x73252074
and    %ah,0x72462064
gs and %dl,%gs:0x6f(%ebx)
data16
je     805e2d1 <_IO_stdin_used+0x3e6d>
popa
jb     805e2c2 <_IO_stdin_used+0x3e5e>
and    %al,0x6f(%esi)
jne    805e2d0 <_IO_stdin_used+0x3e6c>
fs
popa
je     805e2cf <_IO_stdin_used+0x3e6b>
outsl  %ds:(%esi),(%dx)
outsb  %ds:(%esi),(%dx)
sub    $0x20,%al
dec    %ecx
outsb  %ds:(%esi),(%dx)
arpl   %bp,(%esi)
add    %ch,0x65(%ebp)
insl   (%dx),%es:(%edi)
outsl  %ds:(%esi),(%dx)
jb     805e2ee <_IO_stdin_used+0x3e8a>
and    %ah,0x78(%ebp)
push   $0x74737561
gs add %ch,%fs:%gs:0x62(%ecx,%ebp,2)
das
js     805e2f9 <_IO_stdin_used+0x3e95>
je     805e2fa <_IO_stdin_used+0x3e96>
je     805e2f9 <_IO_stdin_used+0x3e95>
insb   (%dx),%es:(%edi)
arpl   %ax,%cs:(%eax)
add    %al,(%eax)
xor    %ah,(%eax)
cmp    $0x3d,%al
and    %dh,0x74(%ebx)
jb     805e30d <_IO_stdin_used+0x3ea9>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %ah,%gs:(%esi)
and    %dh,%es:0x74(%ebx)
jb     805e31c <_IO_stdin_used+0x3eb8>
outsl  %ds:(%esi),(%dx)
insb   (%dx),%es:(%edi)
pop    %edi
bound  %esp,0x73(%ecx)
and    %bh,%gs:0x363320(,%edi,1)
add    %al,(%eax)
lea    %ds:0x58b8808,%eax
or     %cl,0x208058b(%eax)
lea    0x58b8808,%eax
or     %dl,-0x73(%eax)
add    $0x58b8808,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58ce608,%eax
or     %cl,-0x3ff7fa75(%eax)
mov    %es,0x58b8808
or     %cl,-0x7cf7fa75(%eax)
mov    %es,0x58b8808
or     %cl,-0x77f7fa75(%eax)
mov    0x58c4f08,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58b8808,%eax
or     %cl,0x1308058b(%eax)
mov    %es,0x58bd708
or     %cl,-0x77f7fa75(%eax)
mov    0x58b8808,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58b8808,%eax
or     %cl,-0x3bf7fa75(%eax)
mov    0x58b9808,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58b8808,%eax
or     %dl,-0x73(%eax)
add    $0x58b8808,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58ce608,%eax
or     %cl,-0x3ff7fa75(%eax)
mov    %es,0x58b8808
or     %cl,-0x77f7fa75(%eax)
mov    0x58b8808,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58c4f08,%eax
or     %cl,-0x77f7fa75(%eax)
mov    0x58bb208,%eax
or     %bh,0x73(%eax)
je     805e406 <_IO_stdin_used+0x3fa2>
je     805e405 <_IO_stdin_used+0x3fa1>
jne    805e404 <_IO_stdin_used+0x3fa0>
add    %ch,0x6e(%ecx)
jbe    805e3fe <_IO_stdin_used+0x3f9a>
insb   (%dx),%es:(%edi)
imul   $0x20732573,0x25(%eax,%eiz,1),%esp
popa
jb     805e410 <_IO_stdin_used+0x3fac>
jne    805e418 <_IO_stdin_used+0x3fb4>
outsb  %gs:(%esi),(%dx)
je     805e3cf <_IO_stdin_used+0x3f6b>
daa
and    $0x25002773,%eax
jae    805e3dc <_IO_stdin_used+0x3f78>
jae    805e3d9 <_IO_stdin_used+0x3f75>
popa
jb     805e423 <_IO_stdin_used+0x3fbf>
jne    805e42b <_IO_stdin_used+0x3fc7>
outsb  %gs:(%esi),(%dx)
je     805e3e2 <_IO_stdin_used+0x3f7e>
daa
and    $0x74202773,%eax
outsl  %ds:(%esi),(%dx)
outsl  %ds:(%esi),(%dx)
and    %ch,0x72(%ecx,%eiz,2)
add    %ch,%gs:(%di)
sub    $0x766e6900,%eax
popa
insb   (%dx),%es:(%edi)
imul   $0x69666675,0x73(%eax,%eiz,1),%esp
js     805e403 <_IO_stdin_used+0x3f9f>
imul   $0x73257325,0x20(%esi),%ebp
and    %ah,0x72(%ecx)
addr16 jne 805e45d <_IO_stdin_used+0x3ff9>
outsb  %gs:(%esi),(%dx)
je     805e414 <_IO_stdin_used+0x3fb0>
daa
and    $0x2773,%eax
add    %al,(%eax)
or     -0x6f7ff7fb(%esi),%dl
add    $0x5908008,%eax
or     %ah,-0x6b(%eax)
add    $0x5908008,%eax
or     %al,%al
xchg   %eax,%esp
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5946b08,%eax
or     %al,-0x64f7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,-0x44f7fa70(%eax)
xchg   %eax,%ebx
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5931708,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,0x69080590(%eax)
xchg   %eax,%edx
add    $0x591bb08,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,-0x6df7fa70(%eax)
xchg   %eax,%ecx
add    $0x5915208,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,%al
xchg   %eax,%esp
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5946b08,%eax
or     %al,-0x64f7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5908008,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5931708,%eax
or     %al,-0x7ff7fa70(%eax)
nop
add    $0x5916a08,%eax
or     %bh,0x73(%eax)
je     805e54a <_IO_stdin_used+0x40e6>
je     805e549 <_IO_stdin_used+0x40e5>
jne    805e549 <_IO_stdin_used+0x40e5>
popa
js     805e4df <_IO_stdin_used+0x407b>
das
jne    805e555 <_IO_stdin_used+0x40f1>
jb     805e513 <_IO_stdin_used+0x40af>
insb   (%dx),%es:(%edi)
imul   $0x49435341,0x0(%edx),%esp
dec    %ecx
add    %al,0x48(%ebx)
inc    %ecx
push   %edx
push   %ebx
inc    %ebp
push   %esp
inc    %ecx
dec    %esp
dec    %ecx
inc    %ecx
push   %ebx
inc    %esp
dec    %ecx
push   %edx
add    %ah,0x20733035
and    $0x733035,%eax
add    %ebx,(%ebx)
add    (%ebx),%edi
inc    %eax
pop    %es
add    %al,(%eax)
out    %eax,$0x0
add    %al,(%eax)
test   $0xb0,%al
(bad)
lcall  *0x0(%edi,%eax,1)
add    %bh,-0x4f000149(%eax)
push   %cs
add    %al,(%eax)
call   cd05e3e0 <_end+0xc4ffa44c>
sbb    (%eax),%eax
add    %bh,(%eax)
fdivr  %st,%st(6)
incl   0x68000007(%eax)
fdivr  %st,%st(6)
lcall  *-0x57fffff9(%eax)
fdivr  %st,%st(6)
dec    %eax
pop    %es
add    %al,(%eax)
enter  $0xfedc,$0xff
faddl  (%edi)
add    %al,(%eax)
fcomp  %st(4)
(bad)
push   %eax
pop    %es
add    %al,(%eax)
cmp    %bl,%bh
(bad)
pushl  (%eax)
or     %al,(%eax)
add    %cl,0x6cfffedf(%eax)
or     %al,(%eax)
add    %ch,%al
(bad)
ljmp   *0x28000008(%eax)
loopne 805e56d <_IO_stdin_used+0x4109>
dec    %eax
or     %al,(%eax)
add    %bl,%al
loopne 805e575 <_IO_stdin_used+0x4111>
(bad)
in     (%dx),%al
or     %al,(%eax)
add    %cl,-0x1e(%eax)
(bad)
jmp    *(%ecx,%ecx,1)
add    %al,(%eax)
push   $0x38fffee2
or     %eax,(%eax)
add    %cl,0x4cfffee2(%eax)
or     %eax,(%eax)
add    %bh,0x78fffee2(%eax)
or     %eax,(%eax)
add    %bl,%al
loop   805e59d <_IO_stdin_used+0x4139>
decl   -0x1d080000(%ecx,%ecx,1)
(bad)
jmp    *0x18000009(%eax)
jecxz  805e5ad <_IO_stdin_used+0x4149>
pushl  -0x1cc80000(%ecx,%ecx,1)
(bad)
dec    %eax
or     %eax,(%eax)
add    %cl,0x8fffee4(%eax)
or     (%eax),%al
add    %cl,-0x1b(%eax)
(bad)
decl   0xa(%eax)
add    %al,(%eax)
call   8505e4b9 <_end+0x7cffa525>
or     (%eax),%al
add    %ch,-0x43000117(%eax)
or     (%eax),%al
add    %ch,-0x16(%eax)
(bad)
push   %esp
or     (%eax),%al
add    %bh,0x20fffeea(%eax)
or     (%eax),%eax
add    %bl,%al
ljmp   $0x0,$0xb34fffe
dec    %eax
jmp    805e5f5 <_IO_stdin_used+0x4191>
(bad)
js     805e605 <_IO_stdin_used+0x41a1>
add    %al,(%eax)
fsubr  %st(3),%st
(bad)
dec    %eax
or     (%eax),%eax
add    %ch,-0x14(%eax)
(bad)
lcall  *(%eax)
or     $0x0,%al
add    %bh,%al
in     (%dx),%al
(bad)
ljmp   *0xc(%eax)
add    %al,(%eax)
test   $0xed,%al
(bad)
(bad)
mov    $0x1800000c,%eax
out    %al,(%dx)
(bad)
(bad)
clc
or     $0x0,%al
add    %cl,0x38fffeee(%eax)
or     $0xeef80000,%eax
(bad)
(bad)
js     805e63f <_IO_stdin_used+0x41db>
add    %al,(%eax)
push   $0xb8fffeef
or     $0xf0580000,%eax
(bad)
(bad)
clc
or     $0xf0a80000,%eax
(bad)
lcall  *(%esi,%ecx,1)
add    %al,(%eax)
sub    %dh,%dl
(bad)
decl   0x0(%esi,%ecx,1)
add    %ch,-0x7300010c(%eax)
push   %cs
add    %al,(%eax)
cmp    %dh,%ch
(bad)
inc    %esp
push   %cs
add    %al,(%eax)
test   $0xf5,%al
(bad)
incl   (%edi,%ecx,1)
add    %al,(%eax)
sbb    %dh,%dh
(bad)
incl   0x0(%edi,%ecx,1)
add    %cl,%al
idiv   %dh
decl   -0x8f80000(%edi,%ecx,1)
(bad)
jmp    *-0x8a80000(%edi,%ecx,1)
(bad)
inc    %eax
sldt   (%eax)
sub    %bh,%al
(bad)
(bad)
in     (%dx),%al
sldt   (%eax)
mov    $0x44fffefc,%eax
adc    %al,(%eax)
add    %cl,(%eax)
std
(bad)
jmp    *0x0(%eax,%edx,1)
add    %bh,%al
std
(bad)
jmp    *0x6a80000(%eax,%edx,1)
(bad)
(bad)
call   1005e6c5 <_end+0x7ffa731>
pop    %es
(bad)
(bad)
cmp    %dl,(%ecx)
add    %al,(%eax)
push   $0x88ffff07
adc    %eax,(%eax)
add    %bh,-0x3b0000f9(%eax)
adc    %eax,(%eax)
add    %cl,(%eax)
or     %bh,%bh
incl   (%eax)
adc    (%eax),%al
add    %bl,0x8(%eax)
(bad)
(bad)
cmp    $0x12,%al
add    %al,(%eax)
test   $0x8,%al
(bad)
(bad)
js     805e6f4 <_IO_stdin_used+0x4290>
add    %al,(%eax)
clc
or     %bh,%bh
pushl  0x9480000(%edx,%edx,1)
(bad)
push   %eax
adc    (%eax),%al
add    %bl,0x20ffff17(%eax)
adc    (%eax),%eax
add    %cl,0x18(%eax)
(bad)
pushl  0x13(%eax)
add    %al,(%eax)
clc
sbb    %bh,%bh
inc    %eax
adc    (%eax),%eax
add    %ch,-0x70000e6(%eax)
adc    (%eax),%eax
add    %bh,-0x7b0000e2(%eax)
adc    $0x0,%al
add    %cl,0x1f(%eax)
(bad)
call   *%esp
adc    $0x0,%al
add    %bl,%al
pop    %ds
(bad)
jmp    *0x20680000(,%edx,1)
(bad)
pushl  0x0(%ebp,%edx,1)
add    %bh,%al
and    %bh,%bh
inc    %esp
adc    $0x21880000,%eax
(bad)
call   *(%esi,%edx,1)
add    %al,(%eax)
sbb    %ah,(%edx)
(bad)
jmp    *0x0(%esi,%edx,1)
add    %bh,0x22(%eax)
(bad)
pushl  0x22d80000(%esi,%edx,1)
(bad)
incl   (%edi,%edx,1)
add    %al,(%eax)
sub    %ah,(%ebx)
(bad)
incl   0x17(%eax)
add    %al,(%eax)
js     805e789 <_IO_stdin_used+0x4325>
(bad)
(bad)
jl     805e781 <_IO_stdin_used+0x431d>
add    %al,(%eax)
enter  $0xff23,$0xff
mov    $0x18000017,%eax
and    $0xff,%al
push   %esp
pop    %ss
add    %al,(%eax)
push   $0x30ffff24
sbb    %al,(%eax)
add    %bh,0x6cffff24(%eax)
sbb    %al,(%eax)
add    %bh,(%eax)
and    $0x18b4ffff,%eax
add    %al,(%eax)
mov    $0xfcffff25,%eax
sbb    %al,(%eax)
add    %ch,0x26(%eax)
(bad)
decl   0x0(%ecx,%ebx,1)
add    %ch,(%eax)
daa
(bad)
call   *0x27e80000(%ecx,%ebx,1)
(bad)
(bad)
fcompl (%ecx)
add    %al,(%eax)
js     805e7de <_IO_stdin_used+0x437a>
(bad)
ljmp   *(%edx,%ebx,1)
add    %al,(%eax)
or     %ch,(%ecx)
(bad)
(bad)
jl     805e7dc <_IO_stdin_used+0x4378>
add    %al,(%eax)
cwtl
sub    %edi,%edi
dec    %esp
sbb    (%eax),%al
add    %bl,(%eax)
sub    %bh,%bh
call   *(%ebx,%ebx,1)
add    %al,(%eax)
cwtl
sub    %bh,%bh
lcall  *0x0(%ebx,%ebx,1)
add    %cl,0x2b(%eax)
(bad)
jmp    *0x31b80000(%ebx,%ebx,1)
(bad)
jmp    *%esp
sbb    (%eax),%eax
add    %cl,0x32(%eax)
(bad)
ljmp   *(%esp,%ebx,1)
add    %al,(%eax)
test   $0x32,%al
(bad)
decl   0x0(%esp,%ebx,1)
add    %cl,-0x470000cd(%eax)
sbb    $0x0,%al
add    %ch,-0x2f0000cd(%eax)
sbb    $0x0,%al
add    %ch,0x28ffff34(%eax)
sbb    $0x35480000,%eax
(bad)
lcall  *0x1d(%eax)
add    %al,(%eax)
push   $0xacffff36
sbb    $0x36d80000,%eax
(bad)
(bad)
in     (%dx),%al
sbb    $0x37280000,%eax
(bad)
ljmp   *(%eax)
push   %ds
add    %al,(%eax)
cmp    %dh,(%edi)
(bad)
(bad)
cmp    $0x1e,%al
add    %al,(%eax)
dec    %eax
aaa
(bad)
call   *0x1e(%eax)
add    %al,(%eax)
sbb    %bh,(%eax)
(bad)
(bad)
jl     805e868 <_IO_stdin_used+0x4404>
add    %al,(%eax)
push   $0xa8ffff38
push   %ds
add    %al,(%eax)
fdivrs (%eax)
(bad)
(bad)
call   4005e87b <_end+0x37ffa8e7>
cmp    %edi,%edi
decl   (%eax)
pop    %ds
add    %al,(%eax)
js     805e89f <_IO_stdin_used+0x443b>
(bad)
ljmp   *(%edi,%ebx,1)
add    %al,(%eax)
pop    %eax
cmp    %edi,%edi
call   *0x0(%edi,%ebx,1)
add    %ch,0x3b(%eax)
(bad)
ljmp   *0x1f(%eax)
add    %al,(%eax)
cwtl
cmp    %edi,%edi
incl   0x3c880000(%edi,%ebx,1)
(bad)
inc    %esp
pop    %ds
add    %al,(%eax)
sub    %bh,0x2000ffff
add    %al,(%eax)
sbb    %al,-0x1(%ecx)
lcall  *0x20(%eax)
add    %al,(%eax)
push   $0x7cffff41
and    %al,(%eax)
add    %cl,%al
inc    %ecx
(bad)
inc    %esp
and    %al,(%eax)
add    %bl,0x42(%eax)
(bad)
incl   (%eax)
and    %eax,(%eax)
add    %ch,0x42(%eax)
(bad)
call   *(%ecx,%eiz,1)
add    %al,(%eax)
js     805e900 <_IO_stdin_used+0x449c>
(bad)
ljmp   *(%eax)
and    %eax,(%eax)
add    %ch,0x4cffff42(%eax)
and    %eax,(%eax)
add    %ch,0x43(%eax)
(bad)
(bad)
mov    $0x18000021,%eax
inc    %esp
(bad)
dec    %esp
and    %eax,(%eax)
add    %ch,(%eax)
inc    %ebp
(bad)
jmp    *(%eax)
and    (%eax),%al
add    %bh,(%eax)
inc    %ebp
(bad)
pushl  (%edx,%eiz,1)
add    %al,(%eax)
dec    %eax
inc    %ebp
(bad)
decl   0x22(%eax)
add    %al,(%eax)
pop    %eax
inc    %ebp
(bad)
lcall  *0x0(%edx,%eiz,1)
add    %ch,-0x7f0000bb(%eax)
and    (%eax),%al
add    %cl,(%eax)
inc    %esi
(bad)
(bad)
mov    $0x18000022,%esp
inc    %edi
(bad)
(bad)
clc
and    (%eax),%al
add    %bh,0x47(%eax)
(bad)
incl   0x23(%eax)
add    %al,(%eax)
mov    $0x60ffff47,%eax
and    (%eax),%eax
add    %bl,(%eax)
dec    %eax
(bad)
lcall  *0x48780000(%ebx,%eiz,1)
(bad)
call   *%esp
and    (%eax),%eax
add    %bh,%al
dec    %eax
(bad)
call   *(%eax)
and    $0x0,%al
add    %bh,(%eax)
dec    %ecx
(bad)
pushl  (%esp)
add    %al,(%eax)
push   $0x48ffff49
and    $0x0,%al
add    %ch,-0x5f0000b6(%eax)
and    $0x0,%al
add    %bh,(%eax)
dec    %ebx
(bad)
call   *%esp
and    $0x0,%al
add    %cl,(%eax)
dec    %esp
(bad)
decl   0x4d980000(,%eiz,1)
(bad)
(bad)
jl     805e98f <_IO_stdin_used+0x452b>
add    %al,(%eax)
push   $0xd8ffff4f
and    $0x4f780000,%eax
(bad)
(bad)
in     (%dx),%al
and    $0x4fb80000,%eax
(bad)
call   *(%eax)
add    %al,%es:(%eax)
sub    %dl,-0x1(%ecx)
call   *0x26(%eax)
add    %al,(%eax)
cwtl
pop    %edi
(bad)
call   *0x61680000(%esi,%eiz,1)
(bad)
(bad)
fsubl  (%esi)
add    %al,(%eax)
clc
popa
(bad)
call   *(%edi,%eiz,1)
add    %al,(%eax)
call   6505e90b <_end+0x5cffa977>
daa
add    %al,(%eax)
js     805ea11 <_IO_stdin_used+0x45ad>
(bad)
call   *0x64680000(%edi,%eiz,1)
(bad)
(bad)
fsubl  (%edi)
add    %al,(%eax)
dec    %eax
gs
(bad)
pushl  (%eax)
sub    %al,(%eax)
add    %cl,%al
gs
(bad)
jmp    *0x0(%eax,%ebp,1)
add    %cl,-0x5b000097(%eax)
sub    %al,(%eax)
add    %ch,(%eax)
push   $0xffffffff
decl   (%ecx,%ebp,1)
add    %al,(%eax)
clc
imul   $0xffffffff,%edi,%edi
dec    %esp
sub    %eax,(%eax)
add    %ch,(%eax)
insb   (%dx),%es:(%edi)
(bad)
ljmp   *0x0(%ecx,%ebp,1)
add    %cl,0x6e(%eax)
(bad)
(bad)
fsubrs (%ecx)
add    %al,(%eax)
push   $0xf4ffff6e
sub    %eax,(%eax)
add    %bl,(%eax)
outsl  %ds:(%esi),(%dx)
(bad)
pushl  (%edx,%ebp,1)
add    %al,(%eax)
dec    %eax
outsl  %ds:(%esi),(%dx)
(bad)
jmp    *0x2a(%eax)
add    %al,(%eax)
cmp    %dh,-0x1(%eax)
lcall  *0x6800002a(%eax)
jp     805ea16 <_IO_stdin_used+0x45b2>
(bad)
fsubrl (%edx)
add    %al,(%eax)
or     %bh,-0x1(%edi,%edi,8)
sbb    $0x2b,%al
add    %al,(%eax)
dec    %eax
jl     805ea26 <_IO_stdin_used+0x45c2>
call   *0x2b(%eax)
add    %al,(%eax)
push   $0x64ffff7c
sub    (%eax),%eax
add    %cl,0x78ffff7c(%eax)
sub    (%eax),%eax
add    %cl,%al
jl     805ea3e <_IO_stdin_used+0x45da>
lcall  *0x7ce80000(%ebx,%ebp,1)
(bad)
pushl  0x2800002b(%eax)
jge    805ea4e <_IO_stdin_used+0x45ea>
call   *%esp
sub    (%eax),%eax
add    %cl,0x8ffff7d(%eax)
sub    $0x0,%al
add    %ch,0x7e(%eax)
(bad)
incl   0x0(%esp,%ebp,1)
add    %bl,0x5cffff7e(%eax)
sub    $0x0,%al
add    %ch,(%eax)
jg     805ea6e <_IO_stdin_used+0x460a>
call   *0x4800002c(%eax)
jg     805ea76 <_IO_stdin_used+0x4612>
jmp    *0x7f680000(%esp,%ebp,1)
(bad)
(bad)
mov    $0x8800002c,%eax
jg     805ea86 <_IO_stdin_used+0x4622>
dec    %esp
sub    $0x0,%al
add    %ch,-0x1f000081(%eax)
sub    $0x0,%al
add    %bl,%al
jg     805ea96 <_IO_stdin_used+0x4632>
incl   (%eax)
sub    $0x80080000,%eax
(bad)
jmp    *(%eax)
sub    $0x80380000,%eax
(bad)
(bad)
cmp    %ch,0x80680000
(bad)
call   *0x2d(%eax)
add    %al,(%eax)
sbb    %al,0x2d74ffff(%ecx)
add    %al,(%eax)
dec    %eax
cmp    $0x2d8cff,%edi
add    %bh,-0x7f(%eax)
(bad)
jmp    *-0x7e580000(%ebp,%ebp,1)
(bad)
(bad)
mov    $0x5800002d,%esp
(bad)
(bad)
jmp    *%eax
sub    $0x82980000,%eax
(bad)
(bad)
clc
sub    $0x82d80000,%eax
(bad)
call   *(%eax)
add    %al,%cs:(%eax)
sbb    %al,0x2e28ffff(%ebx)
add    %al,(%eax)
cmp    %al,0x2e3cffff(%ebx)
add    %al,(%eax)
pop    %eax
cmp    $0xffffffff,%edi
push   %eax
add    %al,%cs:(%eax)
js     805ea89 <_IO_stdin_used+0x4625>
(bad)
jmp    *0x0(%esi,%ebp,1)
add    %bl,0x78ffff83(%eax)
add    %al,%cs:(%eax)
fadds  0x2ea4ffff(%ebx)
add    %al,(%eax)
sbb    %al,0x2ed0ff(%edi,%edi,8)
add    %bl,%al
lcall  $0x0,$0x2f14ffff
sbb    %bl,0x2f38ffff(%ebx)
add    %al,(%eax)
mov    %ah,0x2fd4ffff(%eax)
add    %al,(%eax)
fsubs  0x2fecffff(%eax)
add    %al,(%eax)
cmp    %ah,0x3010ffff(%ecx)
add    %al,(%eax)
js     805eaef <_IO_stdin_used+0x468b>
(bad)
ljmp   *(%eax)
xor    %al,(%eax)
add    %ch,(%eax)
mov    %al,0x304cffff
add    %al,(%eax)
pop    %eax
mov    %al,0x3070ffff
add    %al,(%eax)
mov    %ah,0x3094ffff(%edx)
add    %al,(%eax)
cwtl
mov    %al,0x30a8ffff
add    %al,(%eax)
call   e105eb1b <_end+0xd8ffab87>
xor    %al,(%eax)
add    %ch,(%eax)
mov    %eax,0x3104ffff
add    %al,(%eax)
mov    %ah,0x3134ffff(%ebx)
add    %al,(%eax)
fsubs  0x3158ffff(%ebx)
add    %al,(%eax)
or     %ah,0x3178ff(%edi,%edi,8)
add    %bh,(%eax)
movsb  %ds:(%esi),%es:(%edi)
(bad)
call   *-0x5b980000(%ecx,%esi,1)
(bad)
pushl  -0x5b680000(%ecx,%esi,1)
(bad)
call   *%esp
xor    %eax,(%eax)
add    %ch,%al
movsb  %ds:(%esi),%es:(%edi)
(bad)
(bad)
call   1005ebee <_end+0x7ffac5a>
test   $0x3240ffff,%eax
add    %al,(%eax)
mov    $0x64ffffa9,%eax
xor    (%eax),%al
add    %bh,%al
mov    $0xff,%cl
(bad)
mov    $0x58000032,%esp
mov    $0xff,%dl
push   %esp
xor    (%eax),%al
add    %bh,-0x4e(%eax)
(bad)
call   *(%ebx,%esi,1)
add    %al,(%eax)
test   $0xb2,%al
(bad)
pushl  (%ebx,%esi,1)
add    %al,(%eax)
fdivs  0x3354ffff(%edx)
add    %al,(%eax)
pop    %eax
mov    $0xff,%bl
ljmp   *-0x48e80000(%ebx,%esi,1)
(bad)
(bad)
in     (%dx),%al
xor    (%eax),%eax
add    %bh,0x34ffffb7(%eax)
xor    $0x0,%al
add    %bl,(%eax)
mov    $0x3460ffff,%eax
add    %al,(%eax)
test   $0xb8,%al
(bad)
(bad)
mov    $0x28000034,%eax
mov    $0x34f0ffff,%edx
add    %al,(%eax)
clc
mov    $0x3528ffff,%ebx
add    %al,(%eax)
sub    %bh,0x3594ffff(%ebp)
add    %al,(%eax)
mov    %bh,0x3600ffff(%esi)
add    %al,(%eax)
clc
mov    $0x363cffff,%esi
add    %al,(%eax)
or     %bh,0x3650ffff(%edi)
adc    $0x0,%al
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %edi,0x52(%edx)
add    %al,(%ecx)
jl     805ec63 <_IO_stdin_used+0x47ff>
add    %ebx,(%ebx)
or     $0x4,%al
add    $0x88,%al
add    %eax,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
inc    %esp
test   $0x710fffe,%eax
add    %al,(%eax)
add    %cl,(%esi)
or     %al,0xe(%esi)
or     $0x4a,%al
ud2
je     805ec83 <_IO_stdin_used+0x481f>
js     805ec81 <_IO_stdin_used+0x481d>
aas
sbb    (%ebx),%bh
sub    (%edx),%dh
and    $0x22,%al
adc    $0x0,%al
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %dh,0x2cfffed4(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ch,0xe(%eax)
add    $0x0,%al
sub    $0x0,%al
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %cl,%al
aam    $0xfe
pushl  (%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x57,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x44,%al
or     -0x3d(%ebp),%ecx
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,-0x28000000(%eax)
aam    $0xfe
call   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
pushf
add    %al,(%eax)
add    %ah,%ah
aam    $0xfe
incl   0x0
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x0,%al
add    %al,(%eax)
loopne 805ecd6 <_IO_stdin_used+0x4872>
(bad)
lcall  *0x2(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x5a,0x2200e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
lock add %al,(%eax)
add    %al,(%eax)
xlat   %ds:(%ebx)
(bad)
decl   0x0(%ecx)
add    %al,(%eax)
add    %cl,0xe(%eax)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
pop    %ebp
or     %dh,%al
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ecx
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4a,%al
or     0xe(%esi,%eax,8),%eax
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
sub    $0x1,%al
add    %al,(%eax)
adc    $0xd7,%al
(bad)
call   *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x45,0x2300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %ch,0x1(%eax)
add    %al,(%eax)
cmp    %dl,%bh
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   $0xe
or     %al,-0x3d(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %cl,0x58000001(%eax)
xlat   %ds:(%ebx)
(bad)
jmp    *0x0(%edx)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
add    -0x3cbef7f2(%edx),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
lods   %ds:(%esi),%al
add    %eax,(%eax)
add    %ah,%ah
xlat   %ds:(%ebx)
(bad)
jmp    *0x0(%ecx,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    %bl,%dh
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,%ah
add    %eax,(%eax)
add    %bl,(%ecx,%ebx,8)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%al
add    %eax,(%eax)
add    %ch,(%eax)
fsin
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %cl,(%edx,%eax,1)
add    %al,(%eax)
xor    $0xd9,%al
(bad)
ljmp   *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
adc    %bl,0xe(%esi)
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
cmp    %al,(%edx)
add    %al,(%eax)
cmp    %bl,%cl
(bad)
call   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x0(%edx,%eax,1)
add    %al,-0x2(%ecx,%ebx,8)
call   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x2(%eax)
add    %al,(%eax)
push   %eax
fsin
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,0x0(%edx,%eax,1)
add    %bl,-0x2(%ecx,%ebx,8)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    %al,(%edx)
add    %al,(%eax)
push   $0x43fffed9
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x31,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
enter  $0x2,$0x0
js     805eef4 <_IO_stdin_used+0x4a90>
(bad)
pushl  0x0(%esi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x71,0x2300e45
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
or     %al,(%ebx)
add    %al,(%eax)
clc
(bad)
call   *0x3(%ebp)
inc    %ecx
push   %cs
or     %al,0x50d4202(%ebp)
inc    %ecx
xchg   %eax,(%ebx)
inc    %ebx
xchg   %al,(%ecx,%ecx,2)
addl   $0x41,0xc30af002
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
cmp    $0x3,%al
add    %al,(%eax)
fs
fdivrp %st,%st(6)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff94,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    $0x0,%al
add    %al,(%eax)
jl     805efcd <_IO_stdin_used+0x4b69>
add    %al,(%eax)
in     $0xde,%al
(bad)
pushl  0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
add    0xa(%esi),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %dh,-0x20940000(%ebx,%eax,1)
(bad)
incl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ebp)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%edx
or     %al,-0x3d(%ebp)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,%al
add    (%eax),%eax
add    %dl,0x18fffedf(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,0x0(%eax)
add    %al,(%eax)
hlt
add    (%eax),%eax
add    %bl,0x62fffe(%edi,%ebx,8)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x200e4504(%ebx)
jp     805f06b <_IO_stdin_used+0x4c07>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%esi),%edx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x4c,%al
add    %al,(%eax)
add    %bh,(%eax)
add    $0x0,%al
add    %cl,%al
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %cl,0x8000004(%eax)
loopne 805f0d9 <_IO_stdin_used+0x4c75>
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %bl,%al
add    $0x0,%al
add    %cl,-0x20(%eax)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %ch,(%eax)
add    $0xe0880000,%eax
(bad)
jmp    *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%ebp
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
js     805f1cb <_IO_stdin_used+0x4d67>
add    %al,(%eax)
call   6c05f0ad <_end+0x63ffb119>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x18000005,%eax
loope  805f209 <_IO_stdin_used+0x4da5>
jmp    *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf582fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edx),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
clc
add    $0xe1480000,%eax
(bad)
jmp    *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
cmp    %al,(%esi)
add    %al,(%eax)
js     805f26b <_IO_stdin_used+0x4e07>
(bad)
jmp    *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf582fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edx),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
js     805f2cc <_IO_stdin_used+0x4e68>
add    %al,(%eax)
test   $0xe1,%al
(bad)
(bad)
out    %eax,(%dx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,-0x3cf59ffc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
orb    $0xc3,(%edx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
mov    $0x58000006,%eax
loop   805f309 <_IO_stdin_used+0x4ea5>
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4602(%ebx)
outsl  %ds:(%esi),(%dx)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    $0x0,%al
add    %al,(%eax)
faddl  (%esi)
add    %al,(%eax)
test   %ah,%dl
(bad)
pushl  0x1(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
rolb   0xe0ac102
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
or     $0x7,%al
add    %al,(%eax)
aam    $0xe3
(bad)
pushl  0x2(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x35,0x3500e43
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%esp
add    %al,(%eax)
add    %cl,0x0(%edi,%eax,1)
add    %dl,(%esi,%eiz,8)
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0x400e4502(%ebx)
add    0xa(%ebp),%dl
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%edx
add    %al,(%eax)
add    %dh,0x7(%eax)
add    %al,(%eax)
add    %ch,0x27fffe(%ecx)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %bh,(%eax,%eax,1)
add    %al,(%eax)
test   %al,(%edi)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
out    %al,$0xfe
jmp    *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
les    (%edi),%eax
add    %al,(%eax)
pushf
out    %al,$0xfe
jmp    *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%ecx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     (%eax),%eax
add    %al,0x0(%eax,%eax,1)
add    %al,(%eax,%ecx,1)
add    %al,(%eax)
int3
out    %al,$0xfe
ljmp   *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jl     805f47b <_IO_stdin_used+0x5017>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %eax
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%edx
add    %al,(%eax)
dec    %esp
or     %al,(%eax)
add    %dh,(%edi,%eiz,8)
(bad)
pushl  (%ecx)
add    %al,(%eax)
add    %al,(%eax)
push   %ebx
push   %cs
adc    %bl,0x4(%esi,%ecx,1)
add    %bl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%eax,%ecx,1)
add    %bl,-0x2(%edi,%eiz,8)
decl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %ch,0xa(%edi)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ch,(%eax)
add    %al,(%eax)
add    %al,-0x6ffffff8(%eax)
out    %eax,$0xfe
dec    %ecx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x46,(%ebx)
push   %cs
mov    0xebe0201,%al
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %ch,-0x17cc0000(%eax,%ecx,1)
(bad)
incl   0x41000000(%esp,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x11,0x3300e45
add    (%edx),%cl
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%edx),%esi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
add    $0x9,%al
add    %al,(%eax)
insb   (%dx),%es:(%edi)
in     (%dx),%al
(bad)
incl   0x0(%ecx)
add    %al,(%eax)
add    %cl,0x10(%esi,%ecx,1)
push   %ecx
push   %cs
add    $0x43,%al
push   %cs
adc    %bl,0x4(%esi,%ecx,1)
add    %al,(%eax)
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
and    $0x9,%al
add    %al,(%eax)
pushf
in     (%dx),%al
(bad)
(bad)
ljmp   $0xe41,$0x0
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x2,0x2d00e48
jl     805f5a2 <_IO_stdin_used+0x513e>
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0x0(%eax),%eax
add    %al,(%eax)
or     %eax,%fs:(%eax)
add    %cl,-0x2(%ebp,%ebp,8)
jmp    *0x8(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x3,0x25b00e46
outsl  %ds:(%esi),(%dx)
add    $0xa,%al
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %ch,-0x47fffff7(%eax)
cmc
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf5a4fc(%ebx)
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %bh,%al
or     %eax,(%eax)
add    %cl,%al
cmc
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf5a4fc(%ebx)
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
dec    %eax
or     (%eax),%al
add    %bl,%al
cmc
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,-0xa140000(%edx,%ecx,1)
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,%al
or     (%eax),%al
add    %al,(%eax)
idiv   %dh
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,%ah
or     (%eax),%al
add    %dl,(%esi,%esi,8)
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,(%eax)
or     (%eax),%eax
add    %ch,(%eax)
idiv   %dh
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dh,0x0(%ebx,%ecx,1)
add    %bh,(%esi,%esi,8)
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
mov    $0xb,%al
add    %al,(%eax)
push   %eax
idiv   %dh
decl   0xe(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %ecx
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0xa034903,%eax
ret
inc    %ecx
movb   $0x41,-0x39(%ecx)
lds    (%esp,%eax,1),%ecx
add    $0x48,%al
or     0x0(%eax,%eax,1),%ecx
add    %ah,%al
or     (%eax),%eax
add    %dh,0x4(%eax)
(bad)
jmp    *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%ebp
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dh,(%eax)
or     $0x0,%al
add    %dl,%al
add    $0xff,%al
jmp    *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%ebp
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
orb    $0x0,(%eax,%eax,1)
xor    %al,0x1a8ffff
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,-0x3ff1b7fc(%ebx)
add    $0xe0ae602,%eax
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
mov    %al,(%eax)
add    %al,(%eax)
mov    $0xa800000c,%eax
push   %es
(bad)
call   *(%eax)
add    $0x0,%al
add    %al,(%eax)
dec    %edx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x6d500e43
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
push   %cs
push   %eax
addl   $0xffffff87,0x4860285
add    (%ebx),%eax
movb   $0xa,(%ecx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ebp
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
out    %al,(%dx)
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%ecx
add    %al,0x0(%ebp,%ecx,1)
add    %ch,(%edx,%ecx,1)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dl,0xa6c0000(%ebp,%ecx,1)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %ah,%ah
or     $0xaac0000,%eax
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dh,(%esi,%ecx,1)
add    %al,(%eax)
in     (%dx),%al
or     %bh,%bh
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %al,0xb2c0000(%esi,%ecx,1)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dl,%ah
push   %cs
add    %al,(%eax)
insb   (%dx),%es:(%edi)
or     %edi,%edi
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %ah,(%edi,%ecx,1)
add    %al,(%eax)
lods   %ds:(%esi),%al
or     %edi,%edi
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf5a4fc(%ebx)
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %dh,0x0(%edi,%ecx,1)
add    %bh,0x56ffff(%ebx,%ecx,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf5a4fc(%ebx)
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
les    (%edi),%ecx
add    %al,(%eax)
int3
or     %edi,%edi
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %ah,%al
or     %edi,%edi
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,(%eax,%edx,1)
add    %al,(%eax)
hlt
or     %edi,%edi
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %bh,0x10(%eax)
add    %al,(%eax)
or     %cl,(%edi,%edi,8)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dh,0xc1c0000(%eax,%edx,1)
(bad)
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %dh,%al
adc    %al,(%eax)
add    %dh,(%eax)
or     $0xff,%al
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x69,(%ebx)
or     %bl,%al
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x4c,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%esi),%eax
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     0x0(%eax,%eax,1),%eax
add    %ch,(%ecx,%edx,1)
add    %al,(%eax)
inc    %esp
or     $0xff,%al
pushl  0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%dl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edi),%ecx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dh,0x0(%ecx,%edx,1)
add    %bh,-0x1(%esp,%ecx,1)
pushl  0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%dl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edi),%ecx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %bh,0xcb40000(%ecx,%edx,1)
(bad)
jmp    *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%ebp
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xa(%ecx),%edx
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %cl,(%edx,%edx,1)
add    %al,(%eax)
adc    $0xd,%al
(bad)
pushl  0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jl     805fe83 <_IO_stdin_used+0x5a1f>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     0x0(%eax,%eax,1),%eax
add    %dl,0x0(%edx,%edx,1)
add    %cl,0xb3ffff(%ebp,%ecx,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jl     805fecb <_IO_stdin_used+0x5a67>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %esp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x49,%al
or     0x0(%eax,%eax,1),%ecx
add    %bl,0xe040000(%edx,%edx,1)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %ch,%ah
adc    (%eax),%al
add    %al,-0x1(%esi,%ecx,1)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
dec    %esp
add    %al,(%eax)
add    %bh,(%ebx,%edx,1)
add    %al,(%eax)
test   %cl,(%esi)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf585fc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xa(%ecx),%ecx
ret
push   %cs
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %cl,0xec40000(%ebx,%edx,1)
(bad)
pushl  0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%dl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%ecx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,%ah
adc    (%eax),%eax
add    %bh,%ah
push   %cs
(bad)
pushl  0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%dl
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebx),%ecx
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bl,(%esp,%edx,1)
add    %al,(%eax)
xor    $0xf,%al
(bad)
ljmp   *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
jl     8060093 <_IO_stdin_used+0x5c2f>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%edx),%eax
push   %eax
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
fs
adc    $0x0,%al
add    %bl,0x667ffff(%edi,%ecx,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
test   %dl,(%eax,%eax,1)
add    %bl,(%esp,%ebx,4)
(bad)
call   *0x23(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x50d4202(%ebp)
dec    %esp
xchg   %eax,(%ebx)
xchg   %al,(%ebx,%eax,4)
add    $0x44,%eax
movsb  %ds:(%esi),%es:(%edi)
adc    $0x0,%al
add    %cl,%ah
adc    $0x8cffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xa(%ecx),%dh
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xe(%ebx),%eax
adc    %al,-0x3d(%esi)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
adc    $0x0,%al
add    %dl,(%esi,%edx,1)
(bad)
lcall  *0x0(%edi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%esi)
push   %cs
add    $0x47,%al
or     0xa(%ebp),%edx
push   %cs
add    $0x43,%al
or     0x0(%eax),%ebp
add    %al,(%eax)
or     $0x15,%al
add    %al,(%eax)
push   %esp
push   %ss
(bad)
(bad)
fldl   (%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x61,0x2400e48
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
inc    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%esi),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
js     80601db <_IO_stdin_used+0x5d77>
add    %al,(%eax)
enter  $0xff16,$0xff
adc    (%eax),%eax
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %cl,0xe(%edi)
add    $0x0,%al
push   %esp
add    %al,(%eax)
add    %dl,-0x2fffffeb(%eax)
push   %ss
(bad)
push   %ebx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc7,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ebx),%eax
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    $0x0,%al
add    %al,(%eax)
call   8006024e <_end+0x77ffc2ba>
pop    %ss
(bad)
jmp    *0x0(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %al,(%edx)
jp     806025b <_IO_stdin_used+0x5df7>
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
add    %al,(%eax)
push   %eax
add    %al,(%eax)
add    %bl,(%eax)
push   %ss
add    %al,(%eax)
call   27060184 <_end+0x1effc1f0>
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2400e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edi),%ecx
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
push   %ss
add    %al,(%eax)
mov    $0x18,%ah
(bad)
jmp    *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax)
add    %al,(%eax)
add    %ch,0x18e40000(%esi,%edx,1)
(bad)
decl   0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0x7f300e43
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   6034f <_init-0x7fe923d>
sbb    %bh,%bh
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
push   %ss
add    %al,(%eax)
hlt
sbb    %bh,%bh
decl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
pop    %ss
add    %al,(%eax)
lock sbb %bh,%bh
dec    %edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x43,(%ebx)
push   %cs
xor    %bh,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%ebp
add    %al,(%eax)
add    %bh,(%edi,%edx,1)
add    %al,(%eax)
xchg   %eax,%esp
sbb    %edi,%edi
decl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x43,(%ebx)
push   %cs
and    %bh,0xe(%edx,%ecx,1)
or     $0x43,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%edi
add    %al,(%eax)
push   $0xb8000017
sbb    %edi,%edi
ljmp   *0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4e,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
test   $0x17,%al
add    %al,(%eax)
call   60060316 <_end+0x57ffc382>
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xa490202(%ebx)
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %cl,%al
pop    %ss
add    %al,(%eax)
sub    %bl,(%edx)
(bad)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %esi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
and    $0x0,%al
add    %al,(%eax)
in     (%dx),%al
pop    %ss
add    %al,(%eax)
inc    %esp
sbb    %bh,%bh
call   *%edx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x1380302(%ebx)
or     %bl,%al
push   %cs
add    $0x47,%al
or     0xa(%edx),%ebx
ret
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax,%ebx,1)
add    %al,(%eax)
cld
sbb    %edi,%edi
call   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
sbb    %al,(%eax)
add    %bh,%al
sbb    %edi,%edi
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
inc    %esp
sbb    %al,(%eax)
add    %cl,(%esp,%ebx,1)
(bad)
jmp    *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xffffffb0,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
cmp    %al,(%eax)
add    %al,(%eax)
test   %bl,(%eax)
add    %al,(%eax)
mov    $0x92ffff1c,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xe,0xc30a6b02
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %al,%al
sbb    %al,(%eax)
add    %ah,(%eax)
sbb    $0x3e9ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x74,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%ebx),%eax
jae    806054b <_IO_stdin_used+0x60e7>
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
sbb    %bl,(%ecx)
add    %al,(%eax)
mov    $0x46ffff20,%eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x300e4302(%ebx)
add    0xe(%eax),%al
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %bh,(%ecx,%ebx,1)
add    %al,(%eax)
in     $0x20,%al
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
and    %ah,0xa(%esi)
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%edx,%ecx,1),%edx
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xe(%ebx),%eax
or     $0x46,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
test   %bl,(%ecx)
add    %al,(%eax)
cld
and    %bh,%bh
incl   0x0(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4402(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xe,0xc30a6402
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
rcrb   $0x0,(%ecx)
add    %dl,0x21(%eax)
(bad)
call   *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,%ah
sbb    %eax,(%eax)
add    %cl,-0x1(%ecx,%eiz,1)
decl   (%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
call   50060652 <_end+0x47ffc6be>
and    %edi,%edi
jmp    *(%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4502(%ebx)
push   %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
push   $0xc000000
sbb    (%eax),%al
add    %dl,-0x1(%ecx,%eiz,1)
inc    %eax
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x58,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ecx),%esp
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
js     80606e0 <_IO_stdin_used+0x627c>
add    %al,(%eax)
test   $0x21,%al
(bad)
ljmp   *0x0(%edi)
add    %al,(%eax)
add    %dl,0x0(%eax)
add    %al,(%eax)
mov    %ds,(%edx)
add    %al,(%eax)
inc    %esp
and    %bh,%bh
decl   (%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0x7e,0x2300e43
or     (%esi),%cl
adc    $0x46,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%edx),%eax
insl   (%dx),%es:(%edi)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
loopne 8060748 <_IO_stdin_used+0x62e4>
add    %al,(%eax)
add    %ah,(%ebx)
(bad)
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dh,%ah
sbb    (%eax),%al
add    %bh,%ah
and    %bh,%bh
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,(%eax)
sbb    (%eax),%eax
add    %bh,%al
and    %bh,%bh
decl   (%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bl,(%ebx,%ebx,1)
add    %al,(%eax)
hlt
and    %bh,%bh
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%esi)
addl   $0x2,(%ebx)
inc    %ebp
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x38,%al
add    %al,(%eax)
add    %al,0x1b(%eax)
add    %al,(%eax)
and    %ah,(%ebx)
(bad)
call   *0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa440204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xe(%ebx,%eax,8),%eax
or     $0x41,%al
(bad)
push   %cs
or     %al,0xe(%edi,%eax,8)
add    $0x38,%al
add    %al,(%eax)
add    %bh,0x0(%ebx,%ebx,1)
add    %al,-0x1(%ebx,%eiz,1)
incl   (%esi)
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xfffffffa,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
add    %al,(%eax)
add    %bh,0x1800001b(%eax)
and    $0xff,%al
lcall  *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%ebp),%eax
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %dh,(%eax)
and    $0xff,%al
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ebx)
adc    %ch,0xa(%ebp)
push   %cs
add    $0x41,%al
or     0xa(%ebp),%eax
push   %cs
add    $0x41,%al
or     (%eax),%edi
add    %al,(%eax)
add    %ah,(%eax)
sbb    $0x0,%al
add    %dl,0x24(%eax)
(bad)
call   *0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0xa450204(%ebx)
ret
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     -0x3d(%ecx),%eax
push   %cs
or     $0x43,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x34,%al
add    %al,(%eax)
add    %bl,0x0(%esp,%ebx,1)
add    %dh,-0x1(%esp)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x10,0xec35302
inc    %ecx
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax)
add    %al,(%eax)
add    %dl,0x249c0000(%esp,%ebx,1)
(bad)
pushl  0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x62,0x2300e45
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %dl,%al
sbb    $0x0,%al
add    %ah,%al
and    $0xff,%al
pushl  (%edi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%esi)
addl   $0x71,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
hlt
sbb    $0x0,%al
add    %bh,%ah
and    $0xff,%al
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
push   %esp
add    %al,(%eax)
add    %cl,(%eax)
sbb    $0x25180000,%eax
(bad)
(bad)
cmp    $0x1,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     0xe(%edx,%ecx,1),%edx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %dh,(%eax)
add    %al,(%eax)
add    %ah,0x1d(%eax)
add    %al,(%eax)
add    %ah,(%esi)
(bad)
decl   0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    -0x3cbeeff2(%ecx),%al
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
xor    $0x0,%al
add    %al,(%eax)
xchg   %eax,%esp
sbb    $0x265c0000,%eax
(bad)
inc    %esi
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edx,%ecx,1),%bh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
add    %ch,0x0(%eax,%eax,1)
add    %cl,%ah
sbb    $0x26f40000,%eax
(bad)
decl   0x1(%edx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x600e4304(%ebx)
add    (%ebx),%esp
add    %ecx,(%edx)
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%ebx),%eax
push   %cs
adc    %cl,-0x3d(%eax)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%eax
push   %cs
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
pop    %eax
add    %al,(%eax)
add    %bh,(%esi,%ebx,1)
add    %al,(%eax)
adc    $0x28,%al
(bad)
inc    %esi
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
jnp    8060ab3 <_IO_stdin_used+0x664f>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
jbe    8060ac6 <_IO_stdin_used+0x6662>
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%ebx),%eax
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dl,(%eax)
add    %al,(%eax)
add    %bl,-0x77ffffe2(%eax)
sub    %edi,%edi
incl   0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %ch,0x29840000(%esi,%ebx,1)
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x300e4302(%ebx)
insl   (%dx),%es:(%edi)
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
cmp    $0x0,%al
add    %al,(%eax)
rcrb   (%esi)
add    %al,(%eax)
mov    0x65ffff29,%al
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x44,0x2500e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
inc    %eax
add    %al,(%eax)
add    %dl,(%eax)
pop    %ds
add    %al,(%eax)
shrb   (%edx)
(bad)
jmp    *0xe(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1e00e46
pushw  %es
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,0x0(%edi,%ebx,1)
add    %bh,%ah
cmp    %bh,%bh
dec    %ebx
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    0xa(%ecx),%ch
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%eax),%ebp
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
pushf
pop    %ds
add    %al,(%eax)
test   %bh,(%edx)
(bad)
incl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,%ah
pop    %ds
add    %al,(%eax)
fdivrl (%edx)
(bad)
(bad)
out    %eax,(%dx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
sbb    $0x20,%al
add    %al,(%eax)
test   %bh,(%ebx)
(bad)
incl   0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %esp
add    %al,(%eax)
add    %dl,0x0(%eax,%eiz,1)
add    %bl,%ah
cmp    %edi,%edi
(bad)
out    %eax,(%dx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%eax),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     0x0(%eax),%edx
add    %al,(%eax)
pushf
and    %al,(%eax)
add    %al,0xdeffff(%esp,%edi,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x66,0x2300e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
pop    %edi
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
lock and %al,(%eax)
add    %dl,(%eax)
cmp    $0x73ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xe(%edi),%ah
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    $0x0,%al
add    %al,(%eax)
and    $0x21,%al
add    %al,(%eax)
pop    %esp
cmp    $0x3b2ffff,%eax
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x1b,0x3400e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     0x0(%eax,%eax,1),%esp
add    %ah,0x0(%ecx,%eiz,1)
add    %bl,%ah
inc    %eax
(bad)
lcall  *0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x60,0x2400e43
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%ebx),%ecx
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xe(%ebp),%ecx
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x3c,%al
add    %al,(%eax)
add    %cl,%ah
and    %eax,(%eax)
add    %dl,(%ecx,%eax,2)
(bad)
dec    %ebp
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffff96,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%eax,%eax,1),%ebx
add    %al,(%eax)
or     $0x22,%al
add    %al,(%eax)
movsb  %ds:(%esi),%es:(%edi)
inc    %edx
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x68,%al
add    %al,(%eax)
add    %ch,(%edx,%eiz,1)
add    %al,(%eax)
mov    $0x42,%ah
(bad)
lcall  *(%edi)
add    (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4304(%esi)
addl   $0xa,0x56500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%ebx),%eax
(bad)
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     0xa(%eax),%esp
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%ebx
add    %al,(%eax)
add    %bl,0x68000022(%eax)
inc    %esp
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xec35102(%ebx)
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x22,%ah
add    %al,(%eax)
insb   (%dx),%es:(%edi)
inc    %esp
(bad)
ljmp   *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x77,0x2300e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
sub    %al,(%eax)
add    %al,(%eax)
hlt
and    (%eax),%al
add    %bl,%ah
inc    %esp
(bad)
jmp    *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%edi)
addl   $0x45,(%ebx)
push   %cs
adc    %dl,0xa(%eax)
push   %cs
or     $0x43,%al
ret
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     (%eax,%eax,1),%esi
add    %al,(%eax)
and    %ah,(%ebx)
add    %al,(%eax)
loopne 8060fb6 <_IO_stdin_used+0x6b52>
(bad)
jmp    *%edx
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4504(%ebx)
popa
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %al,(%eax)
inc    %eax
add    %al,(%eax)
add    %bl,0x23(%eax)
add    %al,(%eax)
cwtl
inc    %ebp
(bad)
ljmp   *(%edi)
or     (%eax),%al
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x1900e43
sbb    $0x140e0a03,%eax
inc    %ecx
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%eax
add    %al,(%eax)
cmp    $0x0,%al
add    %al,(%eax)
pushf
and    (%eax),%eax
add    %al,0x196ffff(%edi,%ecx,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x4b,0x3500e43
add    %ecx,(%edx)
push   %cs
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%eax),%esi
add    %al,(%eax)
add    %bl,%ah
and    (%eax),%eax
add    %ah,%ah
push   %eax
(bad)
pushl  (%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
insb   (%dx),%es:(%edi)
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
and    $0x0,%al
add    %dh,%al
push   %eax
(bad)
call   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%esp)
add    %al,(%eax)
cld
push   %eax
(bad)
call   *0x0
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
and    $0x0,%al
add    %cl,(%eax)
push   %ecx
(bad)
(bad)
aas
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%esi)
addl   $0x76,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
pop    %esp
and    $0x0,%al
add    %ah,(%ecx,%edx,2)
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dh,0x24(%eax)
add    %al,(%eax)
xor    %dl,-0x1(%ecx)
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4802(%ebx)
push   $0x41080e0a
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
xor    %al,(%eax)
add    %al,(%eax)
xchg   %eax,%esp
and    $0x0,%al
add    %cl,-0x1(%ecx,%edx,2)
jmp    *0x0(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4602(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%ebx)
add    0xe(%ecx),%dl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
cmp    %al,(%eax)
add    %al,(%eax)
enter  $0x24,$0x0
js     806116b <_IO_stdin_used+0x6d07>
(bad)
call   *%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4602(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xffffffc3,0x2500e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %al,0x521c0000(,%eiz,1)
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
xor    %al,(%eax)
add    %al,(%eax)
sbb    $0x25,%al
add    %al,(%eax)
xor    $0x52,%al
(bad)
incl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4804(%ebx)
add    0xe(%ebp),%dh
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
push   %eax
and    $0x52900000,%eax
(bad)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,0x0(%ebp,%eiz,1)
add    %bl,0x19ffff(%edx,%edx,2)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
js     80611eb <_IO_stdin_used+0x6d87>
add    %al,(%eax)
test   $0x52,%al
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %cl,0x52b40000(%ebp,%eiz,1)
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
mov    0xc0000025,%al
push   %edx
(bad)
ljmp   *0x0
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
addr16 push %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %al,%al
and    $0x52d00000,%eax
(bad)
ljmp   *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x500e4302(%ebx)
pushw  %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x14,%al
add    %al,(%eax)
add    %ah,%al
and    $0x52e00000,%eax
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
clc
and    $0x52f80000,%eax
(bad)
ljmp   *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %ah,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
adc    %ah,(%esi)
add    %al,(%eax)
adc    %dl,-0x1(%ebx)
pushl  0x0(%eax)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edx),%ch
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
xor    $0x26,%al
add    %al,(%eax)
pushf
push   %ebx
(bad)
jmp    *(%eax,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %ah,0xe(%eax)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
dec    %esp
add    %al,%es:(%eax)
mov    $0x53,%ah
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
fs add %al,%es:%fs:(%eax)
int3
push   %ebx
(bad)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
jl     80612f0 <_IO_stdin_used+0x6e8c>
add    %al,(%eax)
in     $0x53,%al
(bad)
jmp    *0x0(%ebp)
inc    %ecx
push   %cs
or     %al,0x500e4302(%ebx)
add    -0x3cbef7f2(%edi),%bl
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
mov    0x70000026,%al
push   %esp
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
mov    $0x98000026,%eax
push   %esp
(bad)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    $0x0,%al
add    %al,(%eax)
shlb   (%esi)
add    %al,(%eax)
rclb   $0x33,-0x1(%edi,%edi,8)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
adc    %al,(%eax)
add    %al,(%eax)
call   f006135f <_end+0xe7ffd3cb>
push   %esp
(bad)
lcall  *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %bh,%ah
add    %al,%es:(%eax)
hlt
push   %esp
(bad)
call   *(%edi)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
daa
add    %al,(%eax)
add    %dl,-0x1(%ebp)
lcall  *(%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
add    %al,(%eax)
add    %ah,(%edi,%eiz,1)
add    %al,(%eax)
or     $0x55,%al
(bad)
lcall  *(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ch,(%eax)
add    %al,(%eax)
add    %bh,(%eax)
daa
add    %al,(%eax)
sbb    %dl,-0x1(%ebp)
pushl  (%edx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0xec36804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x28,%al
add    %al,(%eax)
add    %ah,0x0(%edi,%eiz,1)
add    %ch,0x32ffff(,%edx,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%edi)
xchg   %al,(%ebx)
inc    %ebx
push   %cs
adc    %al,0xec36804(%ebx)
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x40,%al
add    %al,(%eax)
add    %dl,0x40000027(%eax)
push   %ebp
(bad)
(bad)
mov    $0x16,%ecx
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x3,0x9c00e46
mov    $0x1,%dl
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
aam    $0x27
add    %al,(%eax)
mov    $0x33ffff6b,%esp
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%esi)
addl   $0x6b,(%ebx)
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x0,%al
cwtl
add    %al,(%eax)
add    %bh,%al
daa
add    %al,(%eax)
fsubrs -0x1(%ebx)
jmp    *0x5(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x5b,0x3700e43
add    %ecx,(%edx)
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%edx),%eax
mov    0x41140e0a,%eax
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xa(%ebp),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     0xa(%edi),%edi
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x45,%al
or     (%edx),%eax
dec    %ecx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4b,%al
or     (%eax),%eax
add    %dl,(%eax,%eax,1)
add    %al,(%eax)
xchg   %eax,%esp
sub    %al,(%eax)
add    %ch,0x4affff(%eax,%esi,2)
add    %al,(%eax)
add    %al,0xe(%ebx)
xor    %al,(%edx)
inc    %esi
push   %cs
add    $0x20,%al
add    %al,(%eax)
add    %ch,0x70e40000(%eax,%ebp,1)
(bad)
call   *0x0(%ebx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x600e4502(%ebx)
add    0xe(%ebx),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
adc    $0x0,%al
add    %al,(%eax)
shrb   (%eax)
add    %al,(%eax)
and    %dh,-0x1(%ecx)
pushl  (%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
xor    %ch,0xe(%edi)
add    $0x0,%al
and    %al,(%eax)
add    %al,(%eax)
call   50061561 <_end+0x47ffd5cd>
jno    806153a <_IO_stdin_used+0x70d6>
jmp    *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
add    -0x3cbef7f2(%ecx),%ah
push   %cs
add    $0x0,%al
add    %al,(%eax)
and    %al,(%eax)
add    %al,(%eax)
or     $0x29,%al
add    %al,(%eax)
aam    $0x71
(bad)
jmp    *0x0
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
xor    %ch,(%ecx)
add    %al,(%eax)
loopne 80615f3 <_IO_stdin_used+0x718f>
(bad)
ljmp   *(%esi)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x100e4502(%ebx)
pop    %ebp
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x45,%al
or     (%eax),%eax
adc    %al,(%eax)
add    %al,(%eax)
push   %esp
sub    %eax,(%eax)
add    %ch,%ah
jno    80615a6 <_IO_stdin_used+0x7142>
incl   0x0
add    %al,(%eax)
add    %ch,(%eax,%eax,1)
add    %al,(%eax)
push   $0xe8000029
jno    80615ba <_IO_stdin_used+0x7156>
incl   0x0(%eax,%eax,1)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
pop    %edi
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ecx
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
cwtl
sub    %eax,(%eax)
add    %cl,(%eax)
jb     80615ea <_IO_stdin_used+0x7186>
(bad)
cmp    %al,(%eax)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4302(%esi)
addl   $0x48,(%ebx)
push   %cs
adc    %ah,0xa(%eax)
push   %cs
or     $0x41,%al
ret
push   %cs
or     %al,-0x3a(%ecx)
push   %cs
add    $0x45,%al
or     (%eax,%eax,1),%ebp
add    %al,(%eax)
les    (%ecx),%ebp
add    %al,(%eax)
sbb    $0x72,%al
(bad)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,-0x3cf58bfc(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x47,%al
or     (%eax),%eax
and    %al,(%eax)
add    %al,(%eax)
hlt
sub    %eax,(%eax)
add    %cl,-0x1(%edx,%esi,2)
decl   0x0(%ecx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x100e4302(%ebx)
imul   $0xc341080e,(%edx),%ecx
push   %cs
add    $0x4a,%al
or     (%eax),%eax
sbb    $0x0,%al
add    %al,(%eax)
sbb    %ch,(%edx)
add    %al,(%eax)
js     80616dc <_IO_stdin_used+0x7278>
(bad)
ljmp   *(%ecx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x18,%al
add    %al,(%eax)
add    %bh,(%eax)
sub    (%eax),%al
add    %cl,0x25ffff72(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ebx
push   %cs
and    %bl,0xa(%ebx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %bl,(%eax,%eax,1)
add    %al,(%eax)
push   %esp
sub    (%eax),%al
add    %bl,0x29ffff(%edx,%esi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
arpl   %cx,(%esi)
or     %al,-0x3d(%ecx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,0x0(%edx,%ebp,1)
add    %ch,0x24ffff(%edx,%esi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %esi
push   %cs
or     %al,-0x3d(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %dl,0x72bc0000(%edx,%ebp,1)
(bad)
incl   0x0(%esi)
add    %al,(%eax)
add    %al,0xe(%ebx)
and    %dl,0x0(%eax,%eax,1)
add    %ch,-0x7ffffd6(%eax)
jb     80616fa <_IO_stdin_used+0x7296>
call   *(%esp,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2500e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
dec    %edi
or     (%esi),%cl
adc    $0x43,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %ah,(%eax)
add    %al,(%eax)
add    %al,(%eax)
sub    (%eax),%eax
add    %al,%al
jbe    8061752 <_IO_stdin_used+0x72ee>
ljmp   *0x0(%ebx)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x400e4304(%ebx)
add    %dl,0x0(%eax,%eax,1)
add    %ah,(%ebx,%ebp,1)
add    %al,(%eax)
dec    %esp
ja     8061776 <_IO_stdin_used+0x7312>
pushl  (%ebx)
or     %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x56,0x2700e43
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x47,%al
or     (%edx),%eax
push   $0x41140e0a
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
jl     80617f5 <_IO_stdin_used+0x7391>
add    %al,(%eax)
xor    $0x7f,%al
(bad)
lcall  *0x0(%edx)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
dec    %esp
or     (%esi),%cl
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x43,%al
or     (%eax),%eax
add    %al,(%eax)
sbb    $0x0,%al
add    %al,(%eax)
mov    $0x2b,%ah
add    %al,(%eax)
pop    %esp
jg     8061806 <_IO_stdin_used+0x73a2>
jmp    *(%eax)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %edi
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dl,%ah
sub    (%eax),%eax
add    %bl,-0x1(%edi,%edi,2)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %edi
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x1c,%al
add    %al,(%eax)
add    %dh,%ah
sub    (%eax),%eax
add    %ch,-0x1(%edi,%edi,2)
jmp    *(%ebx)
add    %al,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0x200e4302(%ebx)
push   %edi
push   %cs
or     %al,-0x3d(%ebx)
push   %cs
add    $0x54,%al
add    %al,(%eax)
add    %dl,(%esp,%ebp,1)
add    %al,(%eax)
jl     80618e5 <_IO_stdin_used+0x7481>
(bad)
(bad)
js     806186a <_IO_stdin_used+0x7406>
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
je     806188b <_IO_stdin_used+0x7427>
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%edx
push   %cs
adc    %al,-0x3d(%ebx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x44,%al
or     0xe(%eax),%edx
adc    %al,-0x3d(%ebp)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %bh,(%eax,%eax,1)
add    %al,(%eax)
insb   (%dx),%es:(%edi)
sub    $0x0,%al
add    %ah,0x3b9ffff(%edi,%edi,2)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x2,0x1b00e46
mov    $0xa,%ah
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0x0(%eax,%eax,1),%eax
add    %ch,-0x7cdc0000(%esp,%ebp,1)
(bad)
call   *0x0(%edi)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%edi)
xchg   %al,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%ebx)
add    0xa(%edi),%al
push   %cs
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%esi
adc    %al,-0x3d(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x39(%ecx)
push   %cs
add    $0x0,%al
add    %al,(%eax)
sub    %al,(%eax)
add    %al,(%eax)
hlt
sub    $0x0,%al
add    %bh,-0x1(%ebx,%eax,4)
lcall  *0x0(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4302(%ebx)
pop    %ebx
or     (%esi),%cl
or     %al,-0x3d(%ecx)
push   %cs
add    $0x48,%al
or     0xe(%edi),%ebp
or     %al,-0x3d(%ecx)
push   %cs
add    $0x0,%al
add    %dl,0x0(%eax,%eax,1)
add    %ah,(%eax)
sub    $0x83b00000,%eax
(bad)
decl   0x41000000(%eax,%eax,1)
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0xa,0x6b300e43
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x4a,%al
or     (%edx),%eax
inc    %edx
or     (%esi),%cl
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
xor    $0x0,%al
add    %al,(%eax)
js     80619f3 <_IO_stdin_used+0x758f>
add    %al,(%eax)
call   7b061950 <_end+0x72ffd9bc>
add    %eax,(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x200e4304(%esi)
add    0xa(%edi),%dh
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x48,%al
or     (%eax),%eax
add    %dh,(%eax,%eax,1)
add    %al,(%eax)
mov    $0x2d,%al
add    %al,(%eax)
xor    %al,0x1c2ffff(%ebp)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x300e4304(%esi)
add    0x41100e0a(%ebp),%al
(bad)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%eax
add    %ch,0x0(%eax)
add    %al,(%eax)
call   d0061a66 <_end+0xc7ffdad2>
xchg   %bh,%bh
jmp    *(%ecx,%eax,1)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x1c0e4304(%esi)
add    0xa(%ebx),%al
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     0xa(%edi),%ebp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     0xa(%ecx),%ecx
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x44,%al
or     (%edx),%eax
mov    %cl,(%esi)
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x0,%al
add    %ch,0x0(%eax)
add    %al,(%eax)
push   %esp
add    %al,%cs:(%eax)
mov    %es,0x157ffff(%edi)
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ecx
push   %cs
adc    %al,0x240e4304(%esi)
jl     8061acb <_IO_stdin_used+0x7667>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x43,%al
or     0xe(%edx,%ecx,1),%esi
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x41,%al
or     0xa(%edi),%esp
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x46,%al
or     (%edx),%eax
jnp    8061b02 <_IO_stdin_used+0x769e>
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x42,%al
or     (%eax),%edi
add    %al,(%eax)
add    %al,%al
add    %al,%cs:(%eax)
orb    $0x0,0x61ffff(%eax)
add    %al,(%eax)
inc    %ecx
push   %cs
or     %al,0xc0e4102(%ebp)
xchg   %eax,(%ebx)
inc    %ebx
push   %cs
adc    %al,0x140e4104(%esi)
addl   $0x48,0x2300e4e
push   %cs
adc    $0x41,%al
ret
push   %cs
adc    %al,-0x3a(%ecx)
push   %cs
or     $0x41,%al
(bad)
push   %cs
or     %al,-0x3b(%ecx)
push   %cs
add    $0x10,%al
add    %al,(%eax)
add    %bh,%ah
add    %al,%cs:(%eax)
mov    $0x88,%ah
(bad)
incl   (%edx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %ah,(%eax)
add    %al,(%eax)
add    %dl,(%eax)
das
add    %al,(%eax)
mov    $0x88,%al
(bad)
(bad)
cmp    $0x0,%al
add    %al,(%eax)
add    %al,0xe(%ecx)
or     %al,0x200e4e02(%ebx)
or     0x4108,%cl
ret
push   %cs
add    $0x41,%al
or     (%eax),%eax
add    %al,(%eax)
adc    %al,%cl
add    $0x8,%al
lock
.byte 0xc0
add    $0x8,%al
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
add    %eax,(%eax)
add    %al,(%eax)
xchg   %eax,%esi
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %dl,%bl
add    %al,(%eax)
add    %cl,(%eax,%eax,1)
add    %al,(%eax)
mov    %ss,0xd0804(%ebp)
add    %al,(%eax)
dec    %esp
movsb  %ds:(%esi),%es:(%edi)
add    $0x1908,%eax
add    %bh,%al
cs
push   %es
or     %bl,(%ebx)
add    %al,(%eax)
add    %al,(%eax,%eax,1)
add    %al,(%eax)
sbb    (%eax),%al
add    %al,(%eax)
cld
cs
push   %es
or     %bl,(%eax,%eax,1)
add    %al,(%eax)
add    $0x0,%al
add    %al,(%eax)
cmc
(bad)
ljmp   *-0x54(%edi)
addl   $0x5,(%eax,%ecx,1)
cmp    %cl,0x60804(%edx)
add    %al,(%eax)
sbb    %al,0xa0804(%edx)
add    %al,(%eax)
aad    $0x5
add    %al,(%eax)
or     (%eax),%eax
add    %al,(%eax)
adc    %al,(%eax)
add    %al,(%eax)
adc    $0x0,%eax
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %al,(%eax)
xor    %al,(%esi)
or     %al,(%edx)
add    %al,(%eax)
add    %al,0x14000003(%eax)
add    %al,(%eax)
add    %dl,(%ecx)
add    %al,(%eax)
add    %dl,(%edi)
add    %al,(%eax)
add    %cl,(%edx,%edx,4)
add    $0x8,%al
adc    %eax,(%eax)
add    %al,(%eax)
aam    $0x91
add    $0x8,%al
adc    (%eax),%al
add    %al,(%eax)
cmp    %al,(%eax)
add    %al,(%eax)
adc    (%eax),%eax
add    %al,(%eax)
or     %al,(%eax)
add    %al,(%eax)
(bad)
(bad)
ljmp   *0x14(%edi)
xchg   %eax,%ecx
add    $0x8,%al
(bad)
(bad)
ljmp   *0x2(%edi)
add    %al,(%eax)
add    %dh,%al
(bad)
ljmp   *0xe(%edi)
nop
add    $0x8,%al
add    %al,(%eax)
add    $0x2f,%al
push   %es
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,%dh
xchg   %eax,%ebp
add    $0x8,%al
(bad)
xchg   %eax,%ebp
add    $0x8,%al
out    %al,$0x95
add    $0x8,%al
notb   -0x69f9f7fc(%ebp)
add    $0x8,%al
push   %ss
xchg   %eax,%esi
add    $0x8,%al
es
xchg   %eax,%esi
add    $0x8,%al
ss
xchg   %eax,%esi
add    $0x8,%al
inc    %esi
xchg   %eax,%esi
add    $0x8,%al
push   %esi
xchg   %eax,%esi
add    $0x8,%al
xchg   %ax,%si
add    $0x8,%al
jbe    8062fd0 <_IO_stdin_used+0x8b6c>
add    $0x8,%al
xchg   %dl,-0x6969f7fc(%esi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%esi
add    $0x8,%al
mov    $0x96,%dh
add    $0x8,%al
(bad)
xchg   %eax,%esi
add    $0x8,%al
(bad)
xchg   %eax,%esi
add    $0x8,%al
out    %al,$0x96
add    $0x8,%al
notb   -0x68f9f7fc(%esi)
add    $0x8,%al
push   %ss
xchg   %eax,%edi
add    $0x8,%al
es
xchg   %eax,%edi
add    $0x8,%al
ss
xchg   %eax,%edi
add    $0x8,%al
inc    %esi
xchg   %eax,%edi
add    $0x8,%al
push   %esi
xchg   %eax,%edi
add    $0x8,%al
xchg   %ax,%di
add    $0x8,%al
jbe    8063011 <_IO_stdin_used+0x8bad>
add    $0x8,%al
xchg   %dl,-0x6869f7fc(%edi)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
xchg   %eax,%edi
add    $0x8,%al
mov    $0x97,%dh
add    $0x8,%al
(bad)
xchg   %eax,%edi
add    $0x8,%al
(bad)
xchg   %eax,%edi
add    $0x8,%al
out    %al,$0x97
add    $0x8,%al
notb   -0x67f9f7fc(%edi)
add    $0x8,%al
push   %ss
cwtl
add    $0x8,%al
es
cwtl
add    $0x8,%al
ss
cwtl
add    $0x8,%al
inc    %esi
cwtl
add    $0x8,%al
push   %esi
cwtl
add    $0x8,%al
cbtw
add    $0x8,%al
jbe    8063052 <_IO_stdin_used+0x8bee>
add    $0x8,%al
xchg   %bl,-0x6769f7fc(%eax)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
cwtl
add    $0x8,%al
mov    $0x98,%dh
add    $0x8,%al
(bad)
cwtl
add    $0x8,%al
(bad)
cwtl
add    $0x8,%al
out    %al,$0x98
add    $0x8,%al
negb   -0x66f9f7fc(%eax)
add    $0x8,%al
push   %ss
cltd
add    $0x8,%al
es
cltd
add    $0x8,%al
ss
cltd
add    $0x8,%al
inc    %esi
cltd
add    $0x8,%al
push   %esi
cltd
add    $0x8,%al
cwtd
add    $0x8,%al
jbe    8063093 <_IO_stdin_used+0x8c2f>
add    $0x8,%al
xchg   %bl,-0x6669f7fc(%ecx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
cltd
add    $0x8,%al
mov    $0x99,%dh
add    $0x8,%al
(bad)
cltd
add    $0x8,%al
(bad)
cltd
add    $0x8,%al
out    %al,$0x99
add    $0x8,%al
negb   -0x65f9f7fc(%ecx)
add    $0x8,%al
push   %ss
lcall  $0x804,$0x9a260804
ss
lcall  $0x804,$0x9a460804
push   %esi
lcall  $0x804,$0x9a660804
jbe    80630d4 <_IO_stdin_used+0x8c70>
add    $0x8,%al
xchg   %bl,-0x6569f7fc(%edx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
lcall  $0x804,$0x9ab60804
(bad)
lcall  $0x804,$0x9ad60804
out    %al,$0x9a
add    $0x8,%al
negb   -0x64f9f7fc(%edx)
add    $0x8,%al
push   %ss
fwait
add    $0x8,%al
fwait
fwait
add    $0x8,%al
fwait
fwait
add    $0x8,%al
inc    %esi
fwait
add    $0x8,%al
push   %esi
fwait
add    $0x8,%al
fwait
fwait
add    $0x8,%al
jbe    8063115 <_IO_stdin_used+0x8cb1>
add    $0x8,%al
xchg   %bl,-0x6469f7fc(%ebx)
add    $0x8,%al
cmpsb  %es:(%edi),%ds:(%esi)
fwait
add    $0x8,%al
mov    $0x9b,%dh
add    $0x8,%al
(bad)
fwait
add    $0x8,%al
(bad)
fwait
add    $0x8,%al
out    %al,$0x9b
add    $0x8,%al
negb   -0x63f9f7fc(%ebx)
add    $0x8,%al
push   %ss
pushf
add    $0x8,%al
es
pushf
add    $0x8,%al
ss
pushf
add    $0x8,%al
inc    %esi
pushf
add    $0x8,%al
push   %esi
pushf
add    $0x8,%al
pushfw
add    $0x8,%al
jbe    8063156 <_IO_stdin_used+0x8cf2>
add    $0x8,%al
xchg   %bl,0x49c9608(%esp,%eax,1)
or     %ah,-0x49f7fb64(%esi)
pushf
add    $0x8,%al
add    %eax,(%eax)
add    %al,(%eax)
(bad)
(bad)
(bad)
call   *%ebp
mov    $0x5,%dh
or     %bl,%bh
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%edx)
add    %al,(%eax)
add    %al,%ch
mov    $0x5,%ah
or     %al,(%ecx)
add    %al,(%eax)
add    %ch,%bl
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %al,(%eax)
add    %bl,(%eax)
mov    $0x5,%dl
or     %al,(%eax)
add    %al,(%eax)
add    %al,0xed000000
mov    $0x5,%dh
or     %al,0xf3000000
mov    $0x5,%dh
or     %al,(%edx)
add    %al,(%eax)
add    %al,(%edx)
mov    $0x5,%bh
or     %al,0xf9000000
mov    $0x5,%dh
or     %al,0xff000000
mov    $0x5,%dh
or     %al,0xff000000
mov    $0x5,%dh
or     %al,(%eax)
add    %al,(%eax)
add    %al,0x5000000
mov    $0x5,%bh
or     %al,0xf9000000
mov    $0x5,%dh
or     %al,0xb000000
mov    $0x5,%bh
or     %al,0x11000000
mov    $0x5,%bh
or     %al,0x17000000
mov    $0x5,%bh
or     %al,0x1d000000
mov    $0x5,%bh
or     %al,0x23000000
mov    $0x5,%bh
or     %al,0x29000000
mov    $0x5,%bh
or     %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ebx)
add    %al,(%eax)
add    %ch,(%edi)
mov    $0x5,%bh
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%ecx)
add    %edi,(%edi)
add    %al,(%edx)
add    %al,(%eax)
add    %al,-0x6ff7fa28(%eax)
sbb    %al,0x108
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%esi)
add    %al,(%eax)
add    %dh,(%ebx,%esi,1)
push   %es
or     %al,(%eax)
add    %eax,(%eax)
add    %ah,0x3e(%eax)
push   %es
or     %al,(%ecx)
add    %al,(%eax)
add    %al,(%eax)
add    %al,(%eax)
imul   $0xe03f8c71,%fs:0x0(%edx),%esi
